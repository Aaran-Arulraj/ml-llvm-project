; ModuleID = 'haifa-sched.c'
source_filename = "haifa-sched.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.spec_info_def = type { i32, %struct._IO_FILE*, i32, i32, i32 }
%struct.ready_list = type { %struct.rtx_def**, i32, i32, i32, i32 }
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type { %struct.unnamed_section }
%struct.unnamed_section = type { %struct.section_common, void (i8*)*, i8*, %union.section* }
%struct.section_common = type { i32 }
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.common_sched_info_def = type { void (i32, i32, i32)*, void (%struct.basic_block_def*, %struct.basic_block_def*)*, i32 (%struct.basic_block_def*)*, i32 (%struct.rtx_def*)*, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.gimple_seq_d = type opaque
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type { %struct.eh_region_d*, %struct.VEC_eh_region_gc*, %struct.VEC_eh_landing_pad_gc*, %struct.htab*, %struct.VEC_tree_gc*, %union.eh_status_u }
%struct.eh_region_d = type { %struct.eh_region_d*, %struct.eh_region_d*, %struct.eh_region_d*, i32, i32, %union.eh_region_u, %struct.eh_landing_pad_d*, %struct.rtx_def*, %struct.rtx_def*, i8 }
%union.eh_region_u = type { %struct.eh_region_u_allowed }
%struct.eh_region_u_allowed = type { %union.tree_node*, %union.tree_node*, i32 }
%struct.eh_landing_pad_d = type { %struct.eh_landing_pad_d*, %struct.eh_region_d*, %union.tree_node*, %struct.rtx_def*, i32 }
%struct.VEC_eh_region_gc = type { %struct.VEC_eh_region_base }
%struct.VEC_eh_region_base = type { i32, i32, [1 x %struct.eh_region_d*] }
%struct.VEC_eh_landing_pad_gc = type { %struct.VEC_eh_landing_pad_base }
%struct.VEC_eh_landing_pad_base = type { i32, i32, [1 x %struct.eh_landing_pad_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%union.eh_status_u = type { %struct.VEC_tree_gc* }
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_df = type opaque
%struct.loops = type { i32, %struct.VEC_loop_p_gc*, %struct.htab*, %struct.loop* }
%struct.VEC_loop_p_gc = type { %struct.VEC_loop_p_base }
%struct.VEC_loop_p_base = type { i32, i32, [1 x %struct.loop*] }
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.loop = type { i32, i32, %struct.basic_block_def*, %struct.basic_block_def*, %struct.lpt_decision, i32, i32, %struct.VEC_loop_p_gc*, %struct.loop*, %struct.loop*, i8*, %union.tree_node*, %struct.double_int, %struct.double_int, i8, i8, i32, %struct.nb_iter_bound*, %struct.loop_exit*, i8, %union.tree_node* }
%struct.lpt_decision = type { i32, i32 }
%struct.double_int = type { i64, i64 }
%struct.nb_iter_bound = type { %union.gimple_statement_d*, %struct.double_int, i8, %struct.nb_iter_bound* }
%union.gimple_statement_d = type opaque
%struct.loop_exit = type { %struct.edge_def*, %struct.loop_exit*, %struct.loop_exit*, %struct.loop_exit* }
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_int_heap = type { %struct.VEC_int_base }
%struct.VEC_int_base = type { i32, i32, [1 x i32] }
%struct.VEC_haifa_insn_data_def_heap = type { %struct.VEC_haifa_insn_data_def_base }
%struct.VEC_haifa_insn_data_def_base = type { i32, i32, [1 x %struct._haifa_insn_data] }
%struct._haifa_insn_data = type { i32, i32, i32, i32, i32, i16, i8, i8, i32, i32, i32, %struct.basic_block_def*, %struct.rtx_def*, %struct.reg_pressure_data*, i32*, %struct.reg_use_data*, %struct.reg_set_data*, i32 }
%struct.reg_pressure_data = type { i32 }
%struct.reg_use_data = type { i32, %struct.rtx_def*, %struct.reg_use_data*, %struct.reg_use_data* }
%struct.reg_set_data = type { i32, %struct.rtx_def*, %struct.reg_set_data* }
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.gcc_target = type { %struct.asm_out, %struct.sched, %struct.vectorize, i32, void ()*, i8 (i64, i8*, i32)*, void ()*, i32 ()*, i32 ()*, i32 ()*, i32 ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %struct.attribute_spec*, i32 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void ()*, %union.tree_node* (i32, i8)*, %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32)*, %union.tree_node* (i32, %union.tree_node*, i8*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, i8)*, %union.tree_node* (i32, i8, i8)*, i8* (%union.tree_node*)*, void ()*, i32 (%union.tree_node*, i8*, i32)*, i8 ()*, i32 ()*, i8 (i8)*, i8 ()*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, i8 (i32, %struct.rtx_def*, i8)*, i8 (i32, %struct.rtx_def*)*, i64, i64, i8 (%struct.rtx_def*)*, i8 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*, i32)*, i8* (i8*)*, i64 (i32)*, i32 (i32)*, i32 (i32, i32)*, i8 (i32)*, %struct.addr_space, i8 (i32)*, i8 (i32)*, i8 (%struct.rtx_def*, i32, i32, i32*, i8)*, i32 (%struct.rtx_def*, i8)*, %struct.rtx_def* (%struct.rtx_def*)*, i32 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, void (%union.tree_node*)*, i8 (i32*, i32*)*, i32 (i32, i32)*, void ()*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, i8* (i64*)*, i8* (i8*, i64)*, i8* (i32)*, i8 ()*, %struct.rtx_def* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i32 (%union.tree_node*)*, void (i8*, %struct.rtx_def*, i32)*, i8 (%struct.stdarg_info*, %union.gimple_statement_d*)*, %union.tree_node* ()*, %union.tree_node* ()*, i8* (%struct.rtx_def*)*, i8 (%union.tree_node*)*, i64, %struct.calls, i8* (%union.tree_node*, %union.tree_node*)*, i8* (i32, %union.tree_node*)*, i8* (i32, %union.tree_node*, %union.tree_node*)*, i8* (%union.tree_node*)*, i8* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i32* ()*, i32 (i8, %struct.rtx_def*, i32, i32, %struct.secondary_reload_info*)*, void ()*, void ()*, i8 (i32)*, i32 ()*, i8 ()*, i8 (i32, i32)*, %struct.c, %struct.cxx, %struct.emutls, %struct.target_option_hooks, void (%struct.bitmap_head_def*)*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.asm_out = type { i8*, i8*, i8*, %struct.asm_int_op, %struct.asm_int_op, i8 (%struct.rtx_def*, i32, i32)*, void (%struct._IO_FILE*, i8*)*, void (%struct._IO_FILE*, %union.tree_node*)*, void (%struct._IO_FILE*, %union.tree_node*, i32, i32)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, %struct.rtx_def*)*, void (%struct._IO_FILE*, i8*, i64)*, i8 (%struct.rtx_def*)*, void (%union.tree_node*, i32)*, void (%struct._IO_FILE*, i64)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, i64)*, void ()*, void (i8*, i32, %union.tree_node*)*, i32 ()*, %union.section* (%union.tree_node*, i32, i64)*, %union.section* (i32, %struct.rtx_def*, i64)*, void (%union.tree_node*, i32)*, %union.section* (%union.tree_node*)*, void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i64, i64, %union.tree_node*)*, i8 (%union.tree_node*, i64, i64, %union.tree_node*)*, void ()*, void ()*, void ()*, void (%struct.rtx_def*)*, void (i8*)*, i32 (i32, i8*)*, i8*, void (%struct.rtx_def*)*, void (%struct._IO_FILE*, i32, %struct.rtx_def*)*, void (%struct._IO_FILE*, %struct.rtx_def*, %struct.rtx_def**, i32)*, void (%struct._IO_FILE*)* }
%struct.asm_int_op = type { i8*, i8*, i8*, i8* }
%struct.sched = type { i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)*, i32 ()*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, void (%struct.rtx_def*, %struct.rtx_def*)*, void ()*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, void ()*, void ()*, i32 ()*, i32 (%struct.rtx_def*)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32, i32, i32*)*, i8 (%struct._dep*, i32, i32)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def*, i32, i32)*, void ()*, i8* ()*, void (i8*, i8)*, void (i8*)*, void (i8*)*, void (i8*)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def**)*, i8 (i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, i8 (%struct.rtx_def*)*, void (%struct.spec_info_def*)*, i32 (%struct.rtx_def*)*, i32 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i32 (%struct.ddg*)* }
%struct._dep = type { %struct.rtx_def*, %struct.rtx_def*, i32, i32 }
%struct.ddg = type opaque
%struct.vectorize = type { %union.tree_node* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (i32, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i32 (i8)*, i8 (%union.tree_node*, i8)*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (i32, %union.tree_node*, i32, i8)* }
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.addr_space = type { i32 (i8)*, i32 (i8)*, i8 (i32, i8)*, i8 (i32, %struct.rtx_def*, i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32, i8)*, i8 (i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %union.tree_node*, %union.tree_node*)* }
%struct.stdarg_info = type opaque
%struct.calls = type { i32 (%union.tree_node*, i32, i32*, %union.tree_node*, i32)*, i8 (%union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, i32)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, %struct.rtx_def* ()*, void (%struct.ix86_args*, i32, %union.tree_node*, i32*, i32)*, i8 (%struct.ix86_args*)*, i8 (%struct.ix86_args*)*, i8 (%union.tree_node*)*, i8 (i32, %union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i32 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i8* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, %union.tree_node*, i8)*, %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, i8 ()*, %struct.rtx_def* (%union.tree_node*, i8)*, void (%struct.rtx_def*, %union.tree_node*, %struct.rtx_def*)*, %struct.rtx_def* (%struct.rtx_def*)* }
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.secondary_reload_info = type { i32, i32, %struct.secondary_reload_info*, i32 }
%struct.c = type { i32 (i8)* }
%struct.cxx = type { %union.tree_node* ()*, i8 ()*, %union.tree_node* (%union.tree_node*)*, i8 ()*, i32 (%union.tree_node*, i32)*, i8 ()*, i8 ()*, void (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void (%union.tree_node*)* }
%struct.emutls = type { i8*, i8*, i8*, i8*, i8*, i8*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i8, i8 }
%struct.target_option_hooks = type { i8 (%union.tree_node*, %union.tree_node*, %union.tree_node*, i32)*, void (%struct.cl_target_option*)*, void (%struct.cl_target_option*)*, void (%struct._IO_FILE*, i32, %struct.cl_target_option*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)* }
%struct.cl_target_option = type { i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8 }
%struct.choice_entry = type { i32, i32, i32, i8* }
%struct.haifa_sched_info = type { void ()*, i32 (%struct.rtx_def*)*, i32 ()*, i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, %struct.rtx_def*)*, i8* (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, %struct.rtx_def*)*, i8 (%struct.rtx_def*)*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i8, i32, void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, %struct.rtx_def*)*, %struct.basic_block_def* (%struct.basic_block_def*, %struct.rtx_def*)*, i32 }
%struct.param_info = type { i8*, i32, i8, i32, i32, i8* }
%struct.sched_deps_info_def = type { void (%struct.rtx_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*)*, void (%struct.rtx_def*)*, void ()*, void (%struct.rtx_def*)*, void ()*, void (%struct.rtx_def*)*, void ()*, void (i32)*, void (i32)*, void (i32)*, void (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)*, i8 }
%struct.sched_scan_info_def = type { void ()*, void (%struct.basic_block_def*)*, void ()*, void (%struct.rtx_def*)* }
%struct._dep_link = type { %struct._dep_node*, %struct._dep_link*, %struct._dep_link** }
%struct._dep_node = type { %struct._dep_link, %struct._dep, %struct._dep_link }
%struct.VEC_haifa_deps_insn_data_def_heap = type { %struct.VEC_haifa_deps_insn_data_def_base }
%struct.VEC_haifa_deps_insn_data_def_base = type { i32, i32, [1 x %struct._haifa_deps_insn_data] }
%struct._haifa_deps_insn_data = type { i32, i32, %struct._deps_list*, %struct._deps_list*, %struct._deps_list*, %struct._deps_list*, %struct._deps_list*, i8 }
%struct._deps_list = type { %struct._dep_link*, i32 }
%struct.rtvec_def = type { i32, [1 x %struct.rtx_def*] }
%struct.rtl_bb_info = type { %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32 }
%struct.VEC_basic_block_heap = type { %struct.VEC_basic_block_base }
%struct.VEC_rtx_heap = type { %struct.VEC_rtx_base }
%struct._sd_iterator = type { i32, %struct.rtx_def*, %struct._dep_link**, i8 }
%struct.edge_iterator = type { i32, %struct.VEC_edge_gc** }
%struct.bitmap_iterator = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, i64 }

@sched_verbose = dso_local global i32 0, align 4, !dbg !0
@sched_dump = dso_local global %struct._IO_FILE* null, align 8, !dbg !2194
@.str = private unnamed_addr constant [8 x i8] c"verbose\00", align 1
@sched_verbose_param = internal global i32 0, align 4, !dbg !2433
@.str.1 = private unnamed_addr constant [35 x i8] c"fix_sched_param: unknown param: %s\00", align 1
@spec_info = dso_local global %struct.spec_info_def* null, align 8, !dbg !2247
@adding_bb_to_current_region_p = dso_local global i8 1, align 1, !dbg !2259
@ready_try = dso_local global i8* null, align 8, !dbg !2261
@ready = dso_local global %struct.ready_list zeroinitializer, align 8, !dbg !2263
@haifa_common_sched_info = dso_local constant %struct.common_sched_info_def { void (i32, i32, i32)* null, void (%struct.basic_block_def*, %struct.basic_block_def*)* null, i32 (%struct.basic_block_def*)* null, i32 (%struct.rtx_def*)* @haifa_luid_for_non_insn, i32 0 }, align 8, !dbg !2272
@sched_luids = dso_local global %struct.VEC_int_heap* null, align 8, !dbg !2294
@sched_max_luid = dso_local global i32 1, align 4, !dbg !2296
@h_i_d = dso_local global %struct.VEC_haifa_insn_data_def_heap* null, align 8, !dbg !2298
@region_ref_regs = internal global %struct.bitmap_head_def* null, align 8, !dbg !2419
@targetm = external dso_local global %struct.gcc_target, align 8
@.str.2 = private unnamed_addr constant [14 x i8] c"haifa-sched.c\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@sched_pressure_p = common dso_local global i8 0, align 1, !dbg !2411
@note_list = common dso_local global %struct.rtx_def* null, align 8, !dbg !2305
@dfa_lookahead = common dso_local global i32 0, align 4, !dbg !2429
@cached_first_cycle_multipass_dfa_lookahead = internal global i32 0, align 4, !dbg !2451
@max_lookahead_tries = internal global i32 0, align 4, !dbg !2431
@issue_rate = common dso_local global i32 0, align 4, !dbg !2300
@cycle_issued_insns = common dso_local global i32 0, align 4, !dbg !2427
@choice_stack = internal global %struct.choice_entry* null, align 8, !dbg !2425
@dfa_state_size = common dso_local global i64 0, align 8, !dbg !2329
@current_sched_info = common dso_local global %struct.haifa_sched_info* null, align 8, !dbg !2364
@haifa_recovery_bb_recently_added_p = internal global i8 0, align 1, !dbg !2309
@curr_state = common dso_local global i8* null, align 8, !dbg !2327
@last_scheduled_insn = internal global %struct.rtx_def* null, align 8, !dbg !2421
@q_ptr = internal global i32 0, align 4, !dbg !2453
@q_size = internal global i32 0, align 4, !dbg !2455
@max_insn_queue_index = external dso_local constant i32, align 4
@insn_queue = internal global %struct.rtx_def** null, align 8, !dbg !2325
@clock_var = internal global i32 0, align 4, !dbg !2331
@reload_completed = external dso_local global i32, align 4
@compiler_params = external dso_local global %struct.param_info*, align 8
@.str.4 = private unnamed_addr constant [35 x i8] c";;\09\09Ready list on entry: %d insns\0A\00", align 1
@.str.5 = private unnamed_addr constant [45 x i8] c";;\09\09 before reload => truncated to %d insns\0A\00", align 1
@last_clock_var = internal global i32 0, align 4, !dbg !2423
@.str.6 = private unnamed_addr constant [39 x i8] c";;\09\09Ready list after queue_to_ready:  \00", align 1
@.str.7 = private unnamed_addr constant [35 x i8] c";;\09\09Ready list after ready_sort:  \00", align 1
@.str.8 = private unnamed_addr constant [27 x i8] c";;\09Ready list (t = %3d):  \00", align 1
@.str.9 = private unnamed_addr constant [19 x i8] c";;\09\09Second chance\0A\00", align 1
@.str.10 = private unnamed_addr constant [25 x i8] c";;\09Ready list (final):  \00", align 1
@.str.11 = private unnamed_addr constant [22 x i8] c";;   total time = %d\0A\00", align 1
@.str.12 = private unnamed_addr constant [40 x i8] c";;   new head = %d\0A;;   new tail = %d\0A\0A\00", align 1
@dump_file = external dso_local global %struct._IO_FILE*, align 8
@stderr = external dso_local global %struct._IO_FILE*, align 8
@flag_sched_pressure = external dso_local global i32, align 4
@common_sched_info = common dso_local global %struct.common_sched_info_def* null, align 8, !dbg !2302
@spec_info_var = internal global %struct.spec_info_def zeroinitializer, align 8, !dbg !2307
@cached_issue_rate = internal global i32 0, align 4, !dbg !2460
@sched_regno_cover_class = common dso_local global i32* null, align 8, !dbg !2413
@ira_class_translate = external dso_local global [27 x i32], align 16
@regclass_map = external dso_local constant [53 x i32], align 16
@curr_reg_live = internal global %struct.bitmap_head_def* null, align 8, !dbg !2415
@saved_reg_live = internal global %struct.bitmap_head_def* null, align 8, !dbg !2417
@sched_deps_info = external dso_local global %struct.sched_deps_info_def*, align 8
@cfun = external dso_local global %struct.function*, align 8
@sched_init_only_bb = common dso_local global void (%struct.basic_block_def*, %struct.basic_block_def*)* null, align 8, !dbg !2352
@sched_split_block = common dso_local global %struct.basic_block_def* (%struct.basic_block_def*, %struct.rtx_def*)* null, align 8, !dbg !2354
@sched_create_empty_bb = common dso_local global %struct.basic_block_def* (%struct.basic_block_def*)* null, align 8, !dbg !2359
@haifa_recovery_bb_ever_added_p = common dso_local global i8 0, align 1, !dbg !2311
@nr_be_in_control = internal global i32 0, align 4, !dbg !2319
@nr_be_in_data = internal global i32 0, align 4, !dbg !2315
@nr_begin_control = internal global i32 0, align 4, !dbg !2317
@nr_begin_data = internal global i32 0, align 4, !dbg !2313
@before_recovery = internal global %struct.basic_block_def* null, align 8, !dbg !2321
@after_recovery = common dso_local global %struct.basic_block_def* null, align 8, !dbg !2323
@.str.13 = private unnamed_addr constant [8 x i8] c";; %s:\0A\00", align 1
@.str.14 = private unnamed_addr constant [48 x i8] c";; Procedure %cr-begin-data-spec motions == %d\0A\00", align 1
@.str.15 = private unnamed_addr constant [48 x i8] c";; Procedure %cr-be-in-data-spec motions == %d\0A\00", align 1
@.str.16 = private unnamed_addr constant [51 x i8] c";; Procedure %cr-begin-control-spec motions == %d\0A\00", align 1
@.str.17 = private unnamed_addr constant [51 x i8] c";; Procedure %cr-be-in-control-spec motions == %d\0A\00", align 1
@.str.18 = private unnamed_addr constant [35 x i8] c";;\09\09dependencies resolved: insn %s\00", align 1
@.str.19 = private unnamed_addr constant [13 x i8] c"; data-spec;\00", align 1
@.str.20 = private unnamed_addr constant [16 x i8] c"; control-spec;\00", align 1
@.str.21 = private unnamed_addr constant [19 x i8] c"; in-control-spec;\00", align 1
@.str.22 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@sched_ready_n_insns = internal global i32 -1, align 4, !dbg !2497
@.str.23 = private unnamed_addr constant [36 x i8] c";;\09\09Generated recovery block rec%d\0A\00", align 1
@flag_reorder_blocks_and_partition = external dso_local global i32, align 4
@bb_header = internal global %struct.rtx_def** null, align 8, !dbg !2499
@sched_scan_info = common dso_local global %struct.sched_scan_info_def* null, align 8, !dbg !2333
@__const.sched_init_luids.ssi = private unnamed_addr constant %struct.sched_scan_info_def { void ()* null, void (%struct.basic_block_def*)* null, void ()* @luids_extend_insn, void (%struct.rtx_def*)* @luids_init_insn }, align 8
@__const.haifa_init_h_i_d.ssi = private unnamed_addr constant %struct.sched_scan_info_def { void ()* null, void (%struct.basic_block_def*)* null, void ()* @extend_h_i_d, void (%struct.rtx_def*)* @init_h_i_d }, align 8
@rtx_class = external dso_local constant [139 x i32], align 16
@rtx_format = external dso_local constant [139 x i8*], align 16
@rtx_length = external dso_local constant [139 x i8], align 16
@setup_insn_reg_pressure_info.death = internal global [27 x i32] zeroinitializer, align 16, !dbg !2435
@ira_reg_class_cover_size = external dso_local global i32, align 4
@ira_reg_class_cover = external dso_local global [27 x i32], align 16
@ira_reg_class_nregs = external dso_local global [27 x [87 x i32]], align 16
@regno_reg_rtx = external dso_local global %struct.rtx_def**, align 8
@curr_reg_pressure = internal global [27 x i32] zeroinitializer, align 16, !dbg !2442
@ira_available_class_regs = external dso_local global [27 x i32], align 16
@ira_class_hard_regs = external dso_local global [27 x [53 x i16]], align 16
@reg_raw_mode = external dso_local global [53 x i32], align 16
@ira_memory_move_cost = external dso_local global [87 x [27 x [2 x i16]]], align 16
@flag_var_tracking_assignments = external dso_local global i32, align 4
@flag_sched_group_heuristic = external dso_local global i32, align 4
@flag_sched_critical_path_heuristic = external dso_local global i32, align 4
@flag_sched_spec_insn_heuristic = external dso_local global i32, align 4
@flag_sched_rank_heuristic = external dso_local global i32, align 4
@flag_sched_last_insn_heuristic = external dso_local global i32, align 4
@flag_sched_dep_count_heuristic = external dso_local global i32, align 4
@current_nr_blocks = external dso_local global i32, align 4
@hard_regno_nregs = external dso_local global [53 x [87 x i8]], align 16
@bitmap_zero_bits = external dso_local global %struct.bitmap_element_def, align 8
@ira_no_alloc_regs = external dso_local global i64, align 8
@setup_insn_max_reg_pressure.max_reg_pressure = internal global [27 x i32] zeroinitializer, align 16, !dbg !2444
@saved_reg_pressure = internal global [27 x i32] zeroinitializer, align 16, !dbg !2449
@.str.24 = private unnamed_addr constant [25 x i8] c";;\09\09Ready-->Q: insn %s: \00", align 1
@.str.25 = private unnamed_addr constant [23 x i8] c"queued for %d cycles.\0A\00", align 1
@.str.26 = private unnamed_addr constant [22 x i8] c";;\09Advanced a state.\0A\00", align 1
@.str.27 = private unnamed_addr constant [25 x i8] c";;\09\09Q-->Ready: insn %s: \00", align 1
@.str.28 = private unnamed_addr constant [29 x i8] c"requeued because ready full\0A\00", align 1
@.str.29 = private unnamed_addr constant [32 x i8] c"moving to ready without stalls\0A\00", align 1
@.str.30 = private unnamed_addr constant [32 x i8] c"moving to ready with %d stalls\0A\00", align 1
@.str.31 = private unnamed_addr constant [8 x i8] c"  %s:%d\00", align 1
@.str.32 = private unnamed_addr constant [9 x i8] c"(cost=%d\00", align 1
@.str.33 = private unnamed_addr constant [10 x i8] c":delay=%d\00", align 1
@.str.34 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.35 = private unnamed_addr constant [17 x i8] c";;\09%3i--> %-40s:\00", align 1
@.str.36 = private unnamed_addr constant [8 x i8] c"nothing\00", align 1
@.str.37 = private unnamed_addr constant [10 x i8] c"%s%+d(%d)\00", align 1
@reg_class_names = external dso_local global [0 x i8*], align 8
@.str.38 = private unnamed_addr constant [30 x i8] c";;\09\09resetting: debug insn %d\0A\00", align 1
@const_int_rtx = external dso_local global [129 x %struct.rtx_def*], align 16
@flag_sched_stalled_insns = external dso_local global i32, align 4
@.str.39 = private unnamed_addr constant [4 x i8] c";;\09\00", align 1
@.str.40 = private unnamed_addr constant [12 x i8] c"  %s:%d(%d)\00", align 1
@.str.41 = private unnamed_addr constant [26 x i8] c";; look at index %d + %d\0A\00", align 1
@.str.42 = private unnamed_addr constant [22 x i8] c"transition cost = %d\0A\00", align 1
@.str.43 = private unnamed_addr constant [30 x i8] c";;\09\09Early Q-->Ready: insn %s\0A\00", align 1
@flag_sched_stalled_insns_dep = external dso_local global i32, align 4
@.str.44 = private unnamed_addr constant [41 x i8] c";;\09\09Chosen insn (but can't issue) : %s \0A\00", align 1
@.str.45 = private unnamed_addr constant [22 x i8] c";;\09\09Chosen insn : %s\0A\00", align 1
@readyp = internal global %struct.ready_list* @ready, align 8, !dbg !2457
@sd_iterator_start.null_link = internal global %struct._dep_link* null, align 8, !dbg !2462
@.str.46 = private unnamed_addr constant [26 x i8] c";;\09\09tick updated: insn %s\00", align 1
@.str.47 = private unnamed_addr constant [13 x i8] c" into ready\0A\00", align 1
@.str.48 = private unnamed_addr constant [26 x i8] c" into queue with cost=%d\0A\00", align 1
@.str.49 = private unnamed_addr constant [36 x i8] c" removed from ready or queue lists\0A\00", align 1
@.str.50 = private unnamed_addr constant [31 x i8] c";;\09\09Generated check insn : %s\0A\00", align 1
@.str.51 = private unnamed_addr constant [36 x i8] c";;\09\09Generated twin insn : %d/rec%d\0A\00", align 1
@h_d_i_d = external dso_local global %struct.VEC_haifa_deps_insn_data_def_heap*, align 8
@.str.52 = private unnamed_addr constant [31 x i8] c";;\09\09Removed simple check : %s\0A\00", align 1
@.str.53 = private unnamed_addr constant [16 x i8] c"./basic-block.h\00", align 1
@.str.54 = private unnamed_addr constant [49 x i8] c";;\09\09Fixed fallthru to EXIT : %d->>%d->%d->>EXIT\0A\00", align 1
@.str.55 = private unnamed_addr constant [61 x i8] c";;   ======================================================\0A\00", align 1
@.str.56 = private unnamed_addr constant [61 x i8] c";;   =====================ADVANCING TO=====================\0A\00", align 1
@.str.57 = private unnamed_addr constant [51 x i8] c";;   -- basic block %d from %d to %d -- %s reload\0A\00", align 1
@.str.58 = private unnamed_addr constant [6 x i8] c"after\00", align 1
@.str.59 = private unnamed_addr constant [7 x i8] c"before\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local void @fix_sched_param(i8* %param, i8* %val) #0 !dbg !2505 {
entry:
  %param.addr = alloca i8*, align 8
  %val.addr = alloca i8*, align 8
  store i8* %param, i8** %param.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %param.addr, metadata !2508, metadata !DIExpression()), !dbg !2509
  store i8* %val, i8** %val.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %val.addr, metadata !2510, metadata !DIExpression()), !dbg !2511
  %0 = load i8*, i8** %param.addr, align 8, !dbg !2512
  %call = call i32 @strcmp(i8* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0)), !dbg !2514
  %tobool = icmp ne i32 %call, 0, !dbg !2514
  br i1 %tobool, label %if.else, label %if.then, !dbg !2515

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %val.addr, align 8, !dbg !2516
  %call1 = call i32 @atoi(i8* %1), !dbg !2517
  store i32 %call1, i32* @sched_verbose_param, align 4, !dbg !2518
  br label %if.end, !dbg !2519

if.else:                                          ; preds = %entry
  %2 = load i8*, i8** %param.addr, align 8, !dbg !2520
  %call2 = call zeroext i8 (i32, i8*, ...) @warning(i32 0, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i64 0, i64 0), i8* %2), !dbg !2521
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !2522
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @strcmp(i8*, i8*) #2

declare dso_local i32 @atoi(i8*) #2

declare dso_local zeroext i8 @warning(i32, i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @haifa_luid_for_non_insn(%struct.rtx_def* %x) #0 !dbg !2523 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !2524, metadata !DIExpression()), !dbg !2525
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !2526
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !2526
  %bf.load = load i32, i32* %1, align 8, !dbg !2526
  %bf.clear = and i32 %bf.load, 65535, !dbg !2526
  %cmp = icmp eq i32 %bf.clear, 13, !dbg !2526
  br i1 %cmp, label %cond.false, label %lor.lhs.false, !dbg !2526

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !2526
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !2526
  %bf.load1 = load i32, i32* %3, align 8, !dbg !2526
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !2526
  %cmp3 = icmp eq i32 %bf.clear2, 12, !dbg !2526
  br i1 %cmp3, label %cond.false, label %cond.true, !dbg !2526

cond.true:                                        ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 3984, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !2526
  br label %cond.end, !dbg !2526

cond.false:                                       ; preds = %lor.lhs.false, %entry
  br label %cond.end, !dbg !2526

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !2526
  ret i32 0, !dbg !2527
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @haifa_classify_insn(%struct.rtx_def* %insn) #0 !dbg !2528 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !2531, metadata !DIExpression()), !dbg !2532
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2533
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !2533
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !2533
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !2533
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !2533
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !2533
  %call = call i32 @haifa_classify_rtx(%struct.rtx_def* %1), !dbg !2534
  ret i32 %call, !dbg !2535
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @haifa_classify_rtx(%struct.rtx_def* %x) #0 !dbg !2536 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %tmp_class = alloca i32, align 4
  %insn_class = alloca i32, align 4
  %code = alloca i32, align 4
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !2537, metadata !DIExpression()), !dbg !2538
  call void @llvm.dbg.declare(metadata i32* %tmp_class, metadata !2539, metadata !DIExpression()), !dbg !2540
  store i32 0, i32* %tmp_class, align 4, !dbg !2540
  call void @llvm.dbg.declare(metadata i32* %insn_class, metadata !2541, metadata !DIExpression()), !dbg !2542
  store i32 0, i32* %insn_class, align 4, !dbg !2542
  call void @llvm.dbg.declare(metadata i32* %code, metadata !2543, metadata !DIExpression()), !dbg !2544
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !2545
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !2545
  %bf.load = load i32, i32* %1, align 8, !dbg !2545
  %bf.clear = and i32 %bf.load, 65535, !dbg !2545
  %cmp = icmp eq i32 %bf.clear, 15, !dbg !2547
  br i1 %cmp, label %if.then, label %if.else, !dbg !2548

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2549, metadata !DIExpression()), !dbg !2551
  call void @llvm.dbg.declare(metadata i32* %len, metadata !2552, metadata !DIExpression()), !dbg !2553
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !2554
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !2554
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !2554
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !2554
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx to %struct.rtvec_def**, !dbg !2554
  %3 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !2554
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %3, i32 0, i32 0, !dbg !2554
  %4 = load i32, i32* %num_elem, align 8, !dbg !2554
  store i32 %4, i32* %len, align 4, !dbg !2553
  %5 = load i32, i32* %len, align 4, !dbg !2555
  %sub = sub nsw i32 %5, 1, !dbg !2557
  store i32 %sub, i32* %i, align 4, !dbg !2558
  br label %for.cond, !dbg !2559

for.cond:                                         ; preds = %for.inc, %if.then
  %6 = load i32, i32* %i, align 4, !dbg !2560
  %cmp1 = icmp sge i32 %6, 0, !dbg !2562
  br i1 %cmp1, label %for.body, label %for.end, !dbg !2563

for.body:                                         ; preds = %for.cond
  %7 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !2564
  %u2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1, !dbg !2564
  %fld3 = bitcast %union.u* %u2 to [1 x %union.rtunion_def]*, !dbg !2564
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3, i64 0, i64 0, !dbg !2564
  %rt_rtvec5 = bitcast %union.rtunion_def* %arrayidx4 to %struct.rtvec_def**, !dbg !2564
  %8 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec5, align 8, !dbg !2564
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %8, i32 0, i32 1, !dbg !2564
  %9 = load i32, i32* %i, align 4, !dbg !2564
  %idxprom = sext i32 %9 to i64, !dbg !2564
  %arrayidx6 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom, !dbg !2564
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8, !dbg !2564
  %call = call i32 @haifa_classify_rtx(%struct.rtx_def* %10), !dbg !2566
  store i32 %call, i32* %tmp_class, align 4, !dbg !2567
  %11 = load i32, i32* %insn_class, align 4, !dbg !2568
  %12 = load i32, i32* %tmp_class, align 4, !dbg !2568
  %cmp7 = icmp sgt i32 %11, %12, !dbg !2568
  br i1 %cmp7, label %cond.true, label %cond.false, !dbg !2568

cond.true:                                        ; preds = %for.body
  %13 = load i32, i32* %insn_class, align 4, !dbg !2568
  br label %cond.end, !dbg !2568

cond.false:                                       ; preds = %for.body
  %14 = load i32, i32* %tmp_class, align 4, !dbg !2568
  br label %cond.end, !dbg !2568

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %13, %cond.true ], [ %14, %cond.false ], !dbg !2568
  store i32 %cond, i32* %insn_class, align 4, !dbg !2569
  %15 = load i32, i32* %insn_class, align 4, !dbg !2570
  %cmp8 = icmp eq i32 %15, 5, !dbg !2572
  br i1 %cmp8, label %if.then10, label %lor.lhs.false, !dbg !2573

lor.lhs.false:                                    ; preds = %cond.end
  %16 = load i32, i32* %insn_class, align 4, !dbg !2574
  %cmp9 = icmp eq i32 %16, 4, !dbg !2575
  br i1 %cmp9, label %if.then10, label %if.end, !dbg !2576

if.then10:                                        ; preds = %lor.lhs.false, %cond.end
  br label %for.end, !dbg !2577

if.end:                                           ; preds = %lor.lhs.false
  br label %for.inc, !dbg !2578

for.inc:                                          ; preds = %if.end
  %17 = load i32, i32* %i, align 4, !dbg !2579
  %dec = add nsw i32 %17, -1, !dbg !2579
  store i32 %dec, i32* %i, align 4, !dbg !2579
  br label %for.cond, !dbg !2580, !llvm.loop !2581

for.end:                                          ; preds = %if.then10, %for.cond
  br label %if.end66, !dbg !2583

if.else:                                          ; preds = %entry
  %18 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !2584
  %19 = bitcast %struct.rtx_def* %18 to i32*, !dbg !2584
  %bf.load11 = load i32, i32* %19, align 8, !dbg !2584
  %bf.clear12 = and i32 %bf.load11, 65535, !dbg !2584
  store i32 %bf.clear12, i32* %code, align 4, !dbg !2586
  %20 = load i32, i32* %code, align 4, !dbg !2587
  switch i32 %20, label %sw.default [
    i32 25, label %sw.bb
    i32 23, label %sw.bb17
    i32 14, label %sw.bb41
    i32 29, label %sw.bb65
  ], !dbg !2588

sw.bb:                                            ; preds = %if.else
  %21 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !2589
  %u13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !2589
  %fld14 = bitcast %union.u* %u13 to [1 x %union.rtunion_def]*, !dbg !2589
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i64 0, i64 0, !dbg !2589
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx15 to %struct.rtx_def**, !dbg !2589
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !2589
  %call16 = call i32 @may_trap_exp(%struct.rtx_def* %22, i32 1), !dbg !2591
  store i32 %call16, i32* %tmp_class, align 4, !dbg !2592
  br label %sw.epilog, !dbg !2593

sw.bb17:                                          ; preds = %if.else
  %23 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !2594
  %u18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1, !dbg !2594
  %fld19 = bitcast %union.u* %u18 to [1 x %union.rtunion_def]*, !dbg !2594
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i64 0, i64 0, !dbg !2594
  %rt_rtx21 = bitcast %union.rtunion_def* %arrayidx20 to %struct.rtx_def**, !dbg !2594
  %24 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx21, align 8, !dbg !2594
  %call22 = call i32 @may_trap_exp(%struct.rtx_def* %24, i32 1), !dbg !2595
  store i32 %call22, i32* %tmp_class, align 4, !dbg !2596
  %25 = load i32, i32* %tmp_class, align 4, !dbg !2597
  %cmp23 = icmp eq i32 %25, 5, !dbg !2599
  br i1 %cmp23, label %if.then24, label %if.end25, !dbg !2600

if.then24:                                        ; preds = %sw.bb17
  br label %sw.epilog, !dbg !2601

if.end25:                                         ; preds = %sw.bb17
  %26 = load i32, i32* %tmp_class, align 4, !dbg !2602
  %27 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !2602
  %u26 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1, !dbg !2602
  %fld27 = bitcast %union.u* %u26 to [1 x %union.rtunion_def]*, !dbg !2602
  %arrayidx28 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld27, i64 0, i64 1, !dbg !2602
  %rt_rtx29 = bitcast %union.rtunion_def* %arrayidx28 to %struct.rtx_def**, !dbg !2602
  %28 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx29, align 8, !dbg !2602
  %call30 = call i32 @may_trap_exp(%struct.rtx_def* %28, i32 0), !dbg !2602
  %cmp31 = icmp sgt i32 %26, %call30, !dbg !2602
  br i1 %cmp31, label %cond.true32, label %cond.false33, !dbg !2602

cond.true32:                                      ; preds = %if.end25
  %29 = load i32, i32* %tmp_class, align 4, !dbg !2602
  br label %cond.end39, !dbg !2602

cond.false33:                                     ; preds = %if.end25
  %30 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !2602
  %u34 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1, !dbg !2602
  %fld35 = bitcast %union.u* %u34 to [1 x %union.rtunion_def]*, !dbg !2602
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld35, i64 0, i64 1, !dbg !2602
  %rt_rtx37 = bitcast %union.rtunion_def* %arrayidx36 to %struct.rtx_def**, !dbg !2602
  %31 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx37, align 8, !dbg !2602
  %call38 = call i32 @may_trap_exp(%struct.rtx_def* %31, i32 0), !dbg !2602
  br label %cond.end39, !dbg !2602

cond.end39:                                       ; preds = %cond.false33, %cond.true32
  %cond40 = phi i32 [ %29, %cond.true32 ], [ %call38, %cond.false33 ], !dbg !2602
  store i32 %cond40, i32* %tmp_class, align 4, !dbg !2603
  br label %sw.epilog, !dbg !2604

sw.bb41:                                          ; preds = %if.else
  %32 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !2605
  %u42 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1, !dbg !2605
  %fld43 = bitcast %union.u* %u42 to [1 x %union.rtunion_def]*, !dbg !2605
  %arrayidx44 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld43, i64 0, i64 1, !dbg !2605
  %rt_rtx45 = bitcast %union.rtunion_def* %arrayidx44 to %struct.rtx_def**, !dbg !2605
  %33 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx45, align 8, !dbg !2605
  %call46 = call i32 @haifa_classify_rtx(%struct.rtx_def* %33), !dbg !2606
  store i32 %call46, i32* %tmp_class, align 4, !dbg !2607
  %34 = load i32, i32* %tmp_class, align 4, !dbg !2608
  %cmp47 = icmp eq i32 %34, 5, !dbg !2610
  br i1 %cmp47, label %if.then48, label %if.end49, !dbg !2611

if.then48:                                        ; preds = %sw.bb41
  br label %sw.epilog, !dbg !2612

if.end49:                                         ; preds = %sw.bb41
  %35 = load i32, i32* %tmp_class, align 4, !dbg !2613
  %36 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !2613
  %u50 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1, !dbg !2613
  %fld51 = bitcast %union.u* %u50 to [1 x %union.rtunion_def]*, !dbg !2613
  %arrayidx52 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld51, i64 0, i64 0, !dbg !2613
  %rt_rtx53 = bitcast %union.rtunion_def* %arrayidx52 to %struct.rtx_def**, !dbg !2613
  %37 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx53, align 8, !dbg !2613
  %call54 = call i32 @may_trap_exp(%struct.rtx_def* %37, i32 0), !dbg !2613
  %cmp55 = icmp sgt i32 %35, %call54, !dbg !2613
  br i1 %cmp55, label %cond.true56, label %cond.false57, !dbg !2613

cond.true56:                                      ; preds = %if.end49
  %38 = load i32, i32* %tmp_class, align 4, !dbg !2613
  br label %cond.end63, !dbg !2613

cond.false57:                                     ; preds = %if.end49
  %39 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !2613
  %u58 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1, !dbg !2613
  %fld59 = bitcast %union.u* %u58 to [1 x %union.rtunion_def]*, !dbg !2613
  %arrayidx60 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld59, i64 0, i64 0, !dbg !2613
  %rt_rtx61 = bitcast %union.rtunion_def* %arrayidx60 to %struct.rtx_def**, !dbg !2613
  %40 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx61, align 8, !dbg !2613
  %call62 = call i32 @may_trap_exp(%struct.rtx_def* %40, i32 0), !dbg !2613
  br label %cond.end63, !dbg !2613

cond.end63:                                       ; preds = %cond.false57, %cond.true56
  %cond64 = phi i32 [ %38, %cond.true56 ], [ %call62, %cond.false57 ], !dbg !2613
  store i32 %cond64, i32* %tmp_class, align 4, !dbg !2614
  br label %sw.epilog, !dbg !2615

sw.bb65:                                          ; preds = %if.else
  store i32 5, i32* %tmp_class, align 4, !dbg !2616
  br label %sw.epilog, !dbg !2617

sw.default:                                       ; preds = %if.else
  br label %sw.epilog, !dbg !2618

sw.epilog:                                        ; preds = %sw.default, %sw.bb65, %cond.end63, %if.then48, %cond.end39, %if.then24, %sw.bb
  %41 = load i32, i32* %tmp_class, align 4, !dbg !2619
  store i32 %41, i32* %insn_class, align 4, !dbg !2620
  br label %if.end66

if.end66:                                         ; preds = %sw.epilog, %for.end
  %42 = load i32, i32* %insn_class, align 4, !dbg !2621
  ret i32 %42, !dbg !2622
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @sched_init_region_reg_pressure_info() #0 !dbg !2623 {
entry:
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @region_ref_regs, align 8, !dbg !2624
  call void @bitmap_clear(%struct.bitmap_head_def* %0), !dbg !2625
  ret void, !dbg !2626
}

declare dso_local void @bitmap_clear(%struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @insn_cost(%struct.rtx_def* %insn) #0 !dbg !2627 {
entry:
  %retval = alloca i32, align 4
  %insn.addr = alloca %struct.rtx_def*, align 8
  %cost = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !2628, metadata !DIExpression()), !dbg !2629
  call void @llvm.dbg.declare(metadata i32* %cost, metadata !2630, metadata !DIExpression()), !dbg !2631
  %call = call zeroext i8 @sel_sched_p(), !dbg !2632
  %tobool = icmp ne i8 %call, 0, !dbg !2632
  br i1 %tobool, label %if.then, label %if.end7, !dbg !2634

if.then:                                          ; preds = %entry
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2635
  %call1 = call i32 @recog_memoized(%struct.rtx_def* %0), !dbg !2638
  %cmp = icmp slt i32 %call1, 0, !dbg !2639
  br i1 %cmp, label %if.then2, label %if.end, !dbg !2640

if.then2:                                         ; preds = %if.then
  store i32 0, i32* %retval, align 4, !dbg !2641
  br label %return, !dbg !2641

if.end:                                           ; preds = %if.then
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2642
  %call3 = call i32 @insn_default_latency(%struct.rtx_def* %1), !dbg !2643
  store i32 %call3, i32* %cost, align 4, !dbg !2644
  %2 = load i32, i32* %cost, align 4, !dbg !2645
  %cmp4 = icmp slt i32 %2, 0, !dbg !2647
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !2648

if.then5:                                         ; preds = %if.end
  store i32 0, i32* %cost, align 4, !dbg !2649
  br label %if.end6, !dbg !2650

if.end6:                                          ; preds = %if.then5, %if.end
  %3 = load i32, i32* %cost, align 4, !dbg !2651
  store i32 %3, i32* %retval, align 4, !dbg !2652
  br label %return, !dbg !2652

if.end7:                                          ; preds = %entry
  %4 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !2653
  %tobool8 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %4, null, !dbg !2653
  br i1 %tobool8, label %cond.true, label %cond.false, !dbg !2653

cond.true:                                        ; preds = %if.end7
  %5 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !2653
  %base = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %5, i32 0, i32 0, !dbg !2653
  br label %cond.end, !dbg !2653

cond.false:                                       ; preds = %if.end7
  br label %cond.end, !dbg !2653

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_haifa_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2653
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2653
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !2653
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !2653
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !2653
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !2653
  %7 = load i32, i32* %rt_int, align 8, !dbg !2653
  %call9 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond, i32 %7), !dbg !2653
  %cost10 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call9, i32 0, i32 5, !dbg !2653
  %8 = load i16, i16* %cost10, align 4, !dbg !2653
  %conv = sext i16 %8 to i32, !dbg !2653
  store i32 %conv, i32* %cost, align 4, !dbg !2654
  %9 = load i32, i32* %cost, align 4, !dbg !2655
  %cmp11 = icmp slt i32 %9, 0, !dbg !2657
  br i1 %cmp11, label %if.then13, label %if.end49, !dbg !2658

if.then13:                                        ; preds = %cond.end
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2659
  %call14 = call i32 @recog_memoized(%struct.rtx_def* %10), !dbg !2662
  %cmp15 = icmp slt i32 %call14, 0, !dbg !2663
  br i1 %cmp15, label %if.then17, label %if.else, !dbg !2664

if.then17:                                        ; preds = %if.then13
  %11 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !2665
  %tobool18 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %11, null, !dbg !2665
  br i1 %tobool18, label %cond.true19, label %cond.false21, !dbg !2665

cond.true19:                                      ; preds = %if.then17
  %12 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !2665
  %base20 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %12, i32 0, i32 0, !dbg !2665
  br label %cond.end22, !dbg !2665

cond.false21:                                     ; preds = %if.then17
  br label %cond.end22, !dbg !2665

cond.end22:                                       ; preds = %cond.false21, %cond.true19
  %cond23 = phi %struct.VEC_haifa_insn_data_def_base* [ %base20, %cond.true19 ], [ null, %cond.false21 ], !dbg !2665
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2665
  %u24 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !2665
  %fld25 = bitcast %union.u* %u24 to [1 x %union.rtunion_def]*, !dbg !2665
  %arrayidx26 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld25, i64 0, i64 0, !dbg !2665
  %rt_int27 = bitcast %union.rtunion_def* %arrayidx26 to i32*, !dbg !2665
  %14 = load i32, i32* %rt_int27, align 8, !dbg !2665
  %call28 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond23, i32 %14), !dbg !2665
  %cost29 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call28, i32 0, i32 5, !dbg !2665
  store i16 0, i16* %cost29, align 4, !dbg !2667
  store i32 0, i32* %retval, align 4, !dbg !2668
  br label %return, !dbg !2668

if.else:                                          ; preds = %if.then13
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2669
  %call30 = call i32 @insn_default_latency(%struct.rtx_def* %15), !dbg !2671
  store i32 %call30, i32* %cost, align 4, !dbg !2672
  %16 = load i32, i32* %cost, align 4, !dbg !2673
  %cmp31 = icmp slt i32 %16, 0, !dbg !2675
  br i1 %cmp31, label %if.then33, label %if.end34, !dbg !2676

if.then33:                                        ; preds = %if.else
  store i32 0, i32* %cost, align 4, !dbg !2677
  br label %if.end34, !dbg !2678

if.end34:                                         ; preds = %if.then33, %if.else
  %17 = load i32, i32* %cost, align 4, !dbg !2679
  %conv35 = trunc i32 %17 to i16, !dbg !2679
  %18 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !2680
  %tobool36 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %18, null, !dbg !2680
  br i1 %tobool36, label %cond.true37, label %cond.false39, !dbg !2680

cond.true37:                                      ; preds = %if.end34
  %19 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !2680
  %base38 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %19, i32 0, i32 0, !dbg !2680
  br label %cond.end40, !dbg !2680

cond.false39:                                     ; preds = %if.end34
  br label %cond.end40, !dbg !2680

cond.end40:                                       ; preds = %cond.false39, %cond.true37
  %cond41 = phi %struct.VEC_haifa_insn_data_def_base* [ %base38, %cond.true37 ], [ null, %cond.false39 ], !dbg !2680
  %20 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2680
  %u42 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1, !dbg !2680
  %fld43 = bitcast %union.u* %u42 to [1 x %union.rtunion_def]*, !dbg !2680
  %arrayidx44 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld43, i64 0, i64 0, !dbg !2680
  %rt_int45 = bitcast %union.rtunion_def* %arrayidx44 to i32*, !dbg !2680
  %21 = load i32, i32* %rt_int45, align 8, !dbg !2680
  %call46 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond41, i32 %21), !dbg !2680
  %cost47 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call46, i32 0, i32 5, !dbg !2680
  store i16 %conv35, i16* %cost47, align 4, !dbg !2681
  br label %if.end48

if.end48:                                         ; preds = %cond.end40
  br label %if.end49, !dbg !2682

if.end49:                                         ; preds = %if.end48, %cond.end
  %22 = load i32, i32* %cost, align 4, !dbg !2683
  store i32 %22, i32* %retval, align 4, !dbg !2684
  br label %return, !dbg !2684

return:                                           ; preds = %if.end49, %cond.end22, %if.end6, %if.then2
  %23 = load i32, i32* %retval, align 4, !dbg !2685
  ret i32 %23, !dbg !2685
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @sel_sched_p() #0 !dbg !2686 {
entry:
  %0 = load %struct.common_sched_info_def*, %struct.common_sched_info_def** @common_sched_info, align 8, !dbg !2689
  %sched_pass_id = getelementptr inbounds %struct.common_sched_info_def, %struct.common_sched_info_def* %0, i32 0, i32 4, !dbg !2690
  %1 = load i32, i32* %sched_pass_id, align 8, !dbg !2690
  %cmp = icmp eq i32 %1, 4, !dbg !2691
  %conv = zext i1 %cmp to i32, !dbg !2691
  %conv1 = trunc i32 %conv to i8, !dbg !2689
  ret i8 %conv1, !dbg !2692
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @recog_memoized(%struct.rtx_def* %insn) #0 !dbg !2693 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !2695, metadata !DIExpression()), !dbg !2696
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2697
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !2697
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !2697
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 6, !dbg !2697
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !2697
  %1 = load i32, i32* %rt_int, align 8, !dbg !2697
  %cmp = icmp slt i32 %1, 0, !dbg !2699
  br i1 %cmp, label %if.then, label %if.end, !dbg !2700

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2701
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !2701
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !2701
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 5, !dbg !2701
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**, !dbg !2701
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !2701
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2702
  %call = call i32 @recog(%struct.rtx_def* %3, %struct.rtx_def* %4, i32* null), !dbg !2703
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2704
  %u4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !2704
  %fld5 = bitcast %union.u* %u4 to [1 x %union.rtunion_def]*, !dbg !2704
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i64 0, i64 6, !dbg !2704
  %rt_int7 = bitcast %union.rtunion_def* %arrayidx6 to i32*, !dbg !2704
  store i32 %call, i32* %rt_int7, align 8, !dbg !2705
  br label %if.end, !dbg !2704

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2706
  %u8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !2706
  %fld9 = bitcast %union.u* %u8 to [1 x %union.rtunion_def]*, !dbg !2706
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i64 0, i64 6, !dbg !2706
  %rt_int11 = bitcast %union.rtunion_def* %arrayidx10 to i32*, !dbg !2706
  %7 = load i32, i32* %rt_int11, align 8, !dbg !2706
  ret i32 %7, !dbg !2707
}

declare dso_local i32 @insn_default_latency(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %vec_, i32 %ix_) #0 !dbg !2708 {
entry:
  %vec_.addr = alloca %struct.VEC_haifa_insn_data_def_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_haifa_insn_data_def_base* %vec_, %struct.VEC_haifa_insn_data_def_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_haifa_insn_data_def_base** %vec_.addr, metadata !2713, metadata !DIExpression()), !dbg !2714
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !2715, metadata !DIExpression()), !dbg !2714
  %0 = load %struct.VEC_haifa_insn_data_def_base*, %struct.VEC_haifa_insn_data_def_base** %vec_.addr, align 8, !dbg !2714
  %tobool = icmp ne %struct.VEC_haifa_insn_data_def_base* %0, null, !dbg !2714
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !2714

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !2714
  %2 = load %struct.VEC_haifa_insn_data_def_base*, %struct.VEC_haifa_insn_data_def_base** %vec_.addr, align 8, !dbg !2714
  %num = getelementptr inbounds %struct.VEC_haifa_insn_data_def_base, %struct.VEC_haifa_insn_data_def_base* %2, i32 0, i32 0, !dbg !2714
  %3 = load i32, i32* %num, align 8, !dbg !2714
  %cmp = icmp ult i32 %1, %3, !dbg !2714
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !2716
  %land.ext = zext i1 %4 to i32, !dbg !2714
  %5 = load %struct.VEC_haifa_insn_data_def_base*, %struct.VEC_haifa_insn_data_def_base** %vec_.addr, align 8, !dbg !2714
  %vec = getelementptr inbounds %struct.VEC_haifa_insn_data_def_base, %struct.VEC_haifa_insn_data_def_base* %5, i32 0, i32 2, !dbg !2714
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !2714
  %idxprom = zext i32 %6 to i64, !dbg !2714
  %arrayidx = getelementptr inbounds [1 x %struct._haifa_insn_data], [1 x %struct._haifa_insn_data]* %vec, i64 0, i64 %idxprom, !dbg !2714
  ret %struct._haifa_insn_data* %arrayidx, !dbg !2714
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @dep_cost_1(%struct._dep* %link, i32 %dw) #0 !dbg !2717 {
entry:
  %link.addr = alloca %struct._dep*, align 8
  %dw.addr = alloca i32, align 4
  %insn = alloca %struct.rtx_def*, align 8
  %used = alloca %struct.rtx_def*, align 8
  %cost = alloca i32, align 4
  %dep_type = alloca i32, align 4
  %dep_cost_rtx_link = alloca %struct.rtx_def*, align 8
  store %struct._dep* %link, %struct._dep** %link.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._dep** %link.addr, metadata !2723, metadata !DIExpression()), !dbg !2724
  store i32 %dw, i32* %dw.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %dw.addr, metadata !2725, metadata !DIExpression()), !dbg !2726
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !2727, metadata !DIExpression()), !dbg !2728
  %0 = load %struct._dep*, %struct._dep** %link.addr, align 8, !dbg !2729
  %pro = getelementptr inbounds %struct._dep, %struct._dep* %0, i32 0, i32 0, !dbg !2729
  %1 = load %struct.rtx_def*, %struct.rtx_def** %pro, align 8, !dbg !2729
  store %struct.rtx_def* %1, %struct.rtx_def** %insn, align 8, !dbg !2728
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %used, metadata !2730, metadata !DIExpression()), !dbg !2731
  %2 = load %struct._dep*, %struct._dep** %link.addr, align 8, !dbg !2732
  %con = getelementptr inbounds %struct._dep, %struct._dep* %2, i32 0, i32 1, !dbg !2732
  %3 = load %struct.rtx_def*, %struct.rtx_def** %con, align 8, !dbg !2732
  store %struct.rtx_def* %3, %struct.rtx_def** %used, align 8, !dbg !2731
  call void @llvm.dbg.declare(metadata i32* %cost, metadata !2733, metadata !DIExpression()), !dbg !2734
  %4 = load %struct.rtx_def*, %struct.rtx_def** %used, align 8, !dbg !2735
  %call = call i32 @recog_memoized(%struct.rtx_def* %4), !dbg !2737
  %cmp = icmp slt i32 %call, 0, !dbg !2738
  br i1 %cmp, label %if.then, label %if.else, !dbg !2739

if.then:                                          ; preds = %entry
  store i32 0, i32* %cost, align 4, !dbg !2740
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2742
  %call1 = call i32 @recog_memoized(%struct.rtx_def* %5), !dbg !2743
  br label %if.end39, !dbg !2744

if.else:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %dep_type, metadata !2745, metadata !DIExpression()), !dbg !2747
  %6 = load %struct._dep*, %struct._dep** %link.addr, align 8, !dbg !2748
  %type = getelementptr inbounds %struct._dep, %struct._dep* %6, i32 0, i32 2, !dbg !2748
  %7 = load i32, i32* %type, align 8, !dbg !2748
  store i32 %7, i32* %dep_type, align 4, !dbg !2747
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2749
  %call2 = call i32 @insn_cost(%struct.rtx_def* %8), !dbg !2750
  store i32 %call2, i32* %cost, align 4, !dbg !2751
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2752
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !2752
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !2752
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 6, !dbg !2752
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !2752
  %10 = load i32, i32* %rt_int, align 8, !dbg !2752
  %cmp3 = icmp sge i32 %10, 0, !dbg !2754
  br i1 %cmp3, label %if.then4, label %if.end21, !dbg !2755

if.then4:                                         ; preds = %if.else
  %11 = load i32, i32* %dep_type, align 4, !dbg !2756
  %cmp5 = icmp eq i32 %11, 12, !dbg !2759
  br i1 %cmp5, label %if.then6, label %if.else7, !dbg !2760

if.then6:                                         ; preds = %if.then4
  store i32 0, i32* %cost, align 4, !dbg !2761
  br label %if.end20, !dbg !2762

if.else7:                                         ; preds = %if.then4
  %12 = load i32, i32* %dep_type, align 4, !dbg !2763
  %cmp8 = icmp eq i32 %12, 11, !dbg !2765
  br i1 %cmp8, label %if.then9, label %if.else14, !dbg !2766

if.then9:                                         ; preds = %if.else7
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2767
  %call10 = call i32 @insn_default_latency(%struct.rtx_def* %13), !dbg !2769
  %14 = load %struct.rtx_def*, %struct.rtx_def** %used, align 8, !dbg !2770
  %call11 = call i32 @insn_default_latency(%struct.rtx_def* %14), !dbg !2771
  %sub = sub nsw i32 %call10, %call11, !dbg !2772
  store i32 %sub, i32* %cost, align 4, !dbg !2773
  %15 = load i32, i32* %cost, align 4, !dbg !2774
  %cmp12 = icmp sle i32 %15, 0, !dbg !2776
  br i1 %cmp12, label %if.then13, label %if.end, !dbg !2777

if.then13:                                        ; preds = %if.then9
  store i32 1, i32* %cost, align 4, !dbg !2778
  br label %if.end, !dbg !2779

if.end:                                           ; preds = %if.then13, %if.then9
  br label %if.end19, !dbg !2780

if.else14:                                        ; preds = %if.else7
  %16 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2781
  %call15 = call i32 @bypass_p(%struct.rtx_def* %16), !dbg !2783
  %tobool = icmp ne i32 %call15, 0, !dbg !2783
  br i1 %tobool, label %if.then16, label %if.end18, !dbg !2784

if.then16:                                        ; preds = %if.else14
  %17 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2785
  %18 = load %struct.rtx_def*, %struct.rtx_def** %used, align 8, !dbg !2786
  %call17 = call i32 @insn_latency(%struct.rtx_def* %17, %struct.rtx_def* %18), !dbg !2787
  store i32 %call17, i32* %cost, align 4, !dbg !2788
  br label %if.end18, !dbg !2789

if.end18:                                         ; preds = %if.then16, %if.else14
  br label %if.end19

if.end19:                                         ; preds = %if.end18, %if.end
  br label %if.end20

if.end20:                                         ; preds = %if.end19, %if.then6
  br label %if.end21, !dbg !2790

if.end21:                                         ; preds = %if.end20, %if.else
  %19 = load i32 (%struct.rtx_def*, i32, %struct.rtx_def*, i32, i32)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def*, i32, i32)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 21), align 8, !dbg !2791
  %tobool22 = icmp ne i32 (%struct.rtx_def*, i32, %struct.rtx_def*, i32, i32)* %19, null, !dbg !2793
  br i1 %tobool22, label %if.then23, label %if.else25, !dbg !2794

if.then23:                                        ; preds = %if.end21
  %20 = load i32 (%struct.rtx_def*, i32, %struct.rtx_def*, i32, i32)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def*, i32, i32)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 21), align 8, !dbg !2795
  %21 = load %struct.rtx_def*, %struct.rtx_def** %used, align 8, !dbg !2796
  %22 = load i32, i32* %dep_type, align 4, !dbg !2797
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2798
  %24 = load i32, i32* %cost, align 4, !dbg !2799
  %25 = load i32, i32* %dw.addr, align 4, !dbg !2800
  %call24 = call i32 %20(%struct.rtx_def* %21, i32 %22, %struct.rtx_def* %23, i32 %24, i32 %25), !dbg !2801
  store i32 %call24, i32* %cost, align 4, !dbg !2802
  br label %if.end35, !dbg !2803

if.else25:                                        ; preds = %if.end21
  %26 = load i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 0), align 8, !dbg !2804
  %cmp26 = icmp ne i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)* %26, null, !dbg !2806
  br i1 %cmp26, label %if.then27, label %if.end34, !dbg !2807

if.then27:                                        ; preds = %if.else25
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %dep_cost_rtx_link, metadata !2808, metadata !DIExpression()), !dbg !2810
  %call28 = call %struct.rtx_def* @alloc_INSN_LIST(%struct.rtx_def* null, %struct.rtx_def* null), !dbg !2811
  store %struct.rtx_def* %call28, %struct.rtx_def** %dep_cost_rtx_link, align 8, !dbg !2810
  %27 = load %struct.rtx_def*, %struct.rtx_def** %dep_cost_rtx_link, align 8, !dbg !2812
  %28 = load %struct.rtx_def*, %struct.rtx_def** %dep_cost_rtx_link, align 8, !dbg !2813
  %u29 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1, !dbg !2813
  %fld30 = bitcast %union.u* %u29 to [1 x %union.rtunion_def]*, !dbg !2813
  %arrayidx31 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld30, i64 0, i64 1, !dbg !2813
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx31 to %struct.rtx_def**, !dbg !2813
  store %struct.rtx_def* %27, %struct.rtx_def** %rt_rtx, align 8, !dbg !2814
  %29 = load %struct._dep*, %struct._dep** %link.addr, align 8, !dbg !2815
  %type32 = getelementptr inbounds %struct._dep, %struct._dep* %29, i32 0, i32 2, !dbg !2815
  %30 = load i32, i32* %type32, align 8, !dbg !2815
  %31 = load %struct.rtx_def*, %struct.rtx_def** %dep_cost_rtx_link, align 8, !dbg !2815
  %32 = bitcast %struct.rtx_def* %31 to i32*, !dbg !2815
  %bf.load = load i32, i32* %32, align 8, !dbg !2815
  %bf.value = and i32 %30, 255, !dbg !2815
  %bf.shl = shl i32 %bf.value, 16, !dbg !2815
  %bf.clear = and i32 %bf.load, -16711681, !dbg !2815
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !2815
  store i32 %bf.set, i32* %32, align 8, !dbg !2815
  %33 = load i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 0), align 8, !dbg !2816
  %34 = load %struct.rtx_def*, %struct.rtx_def** %used, align 8, !dbg !2817
  %35 = load %struct.rtx_def*, %struct.rtx_def** %dep_cost_rtx_link, align 8, !dbg !2818
  %36 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2819
  %37 = load i32, i32* %cost, align 4, !dbg !2820
  %call33 = call i32 %33(%struct.rtx_def* %34, %struct.rtx_def* %35, %struct.rtx_def* %36, i32 %37), !dbg !2821
  store i32 %call33, i32* %cost, align 4, !dbg !2822
  %38 = load %struct.rtx_def*, %struct.rtx_def** %dep_cost_rtx_link, align 8, !dbg !2823
  call void @free_INSN_LIST_node(%struct.rtx_def* %38), !dbg !2824
  br label %if.end34, !dbg !2825

if.end34:                                         ; preds = %if.then27, %if.else25
  br label %if.end35

if.end35:                                         ; preds = %if.end34, %if.then23
  %39 = load i32, i32* %cost, align 4, !dbg !2826
  %cmp36 = icmp slt i32 %39, 0, !dbg !2828
  br i1 %cmp36, label %if.then37, label %if.end38, !dbg !2829

if.then37:                                        ; preds = %if.end35
  store i32 0, i32* %cost, align 4, !dbg !2830
  br label %if.end38, !dbg !2831

if.end38:                                         ; preds = %if.then37, %if.end35
  br label %if.end39

if.end39:                                         ; preds = %if.end38, %if.then
  %40 = load i32, i32* %cost, align 4, !dbg !2832
  ret i32 %40, !dbg !2833
}

declare dso_local i32 @bypass_p(%struct.rtx_def*) #2

declare dso_local i32 @insn_latency(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @alloc_INSN_LIST(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local void @free_INSN_LIST_node(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @dep_cost(%struct._dep* %link) #0 !dbg !2834 {
entry:
  %link.addr = alloca %struct._dep*, align 8
  store %struct._dep* %link, %struct._dep** %link.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._dep** %link.addr, metadata !2837, metadata !DIExpression()), !dbg !2838
  %0 = load %struct._dep*, %struct._dep** %link.addr, align 8, !dbg !2839
  %call = call i32 @dep_cost_1(%struct._dep* %0, i32 0), !dbg !2840
  ret i32 %call, !dbg !2841
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @increase_insn_priority(%struct.rtx_def* %insn, i32 %amount) #0 !dbg !2842 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %amount.addr = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !2843, metadata !DIExpression()), !dbg !2844
  store i32 %amount, i32* %amount.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %amount.addr, metadata !2845, metadata !DIExpression()), !dbg !2846
  %call = call zeroext i8 @sel_sched_p(), !dbg !2847
  %tobool = icmp ne i8 %call, 0, !dbg !2847
  br i1 %tobool, label %if.else, label %if.then, !dbg !2849

if.then:                                          ; preds = %entry
  %0 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !2850
  %tobool1 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %0, null, !dbg !2850
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !2850

cond.true:                                        ; preds = %if.then
  %1 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !2850
  %base = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %1, i32 0, i32 0, !dbg !2850
  br label %cond.end, !dbg !2850

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !2850

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_haifa_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2850
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2850
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !2850
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !2850
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !2850
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !2850
  %3 = load i32, i32* %rt_int, align 8, !dbg !2850
  %call2 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond, i32 %3), !dbg !2850
  %priority_status = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call2, i32 0, i32 7, !dbg !2850
  %4 = load i8, i8* %priority_status, align 1, !dbg !2850
  %conv = sext i8 %4 to i32, !dbg !2850
  %cmp = icmp sgt i32 %conv, 0, !dbg !2850
  br i1 %cmp, label %if.then4, label %if.end, !dbg !2853

if.then4:                                         ; preds = %cond.end
  %5 = load i32, i32* %amount.addr, align 4, !dbg !2854
  %6 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !2855
  %tobool5 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %6, null, !dbg !2855
  br i1 %tobool5, label %cond.true6, label %cond.false8, !dbg !2855

cond.true6:                                       ; preds = %if.then4
  %7 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !2855
  %base7 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %7, i32 0, i32 0, !dbg !2855
  br label %cond.end9, !dbg !2855

cond.false8:                                      ; preds = %if.then4
  br label %cond.end9, !dbg !2855

cond.end9:                                        ; preds = %cond.false8, %cond.true6
  %cond10 = phi %struct.VEC_haifa_insn_data_def_base* [ %base7, %cond.true6 ], [ null, %cond.false8 ], !dbg !2855
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2855
  %u11 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !2855
  %fld12 = bitcast %union.u* %u11 to [1 x %union.rtunion_def]*, !dbg !2855
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i64 0, i64 0, !dbg !2855
  %rt_int14 = bitcast %union.rtunion_def* %arrayidx13 to i32*, !dbg !2855
  %9 = load i32, i32* %rt_int14, align 8, !dbg !2855
  %call15 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond10, i32 %9), !dbg !2855
  %priority = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call15, i32 0, i32 1, !dbg !2855
  %10 = load i32, i32* %priority, align 4, !dbg !2856
  %add = add nsw i32 %10, %5, !dbg !2856
  store i32 %add, i32* %priority, align 4, !dbg !2856
  br label %if.end, !dbg !2855

if.end:                                           ; preds = %cond.end9, %cond.end
  br label %if.end16, !dbg !2857

if.else:                                          ; preds = %entry
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2858
  %12 = load i32, i32* %amount.addr, align 4, !dbg !2860
  call void @sel_add_to_insn_priority(%struct.rtx_def* %11, i32 %12), !dbg !2861
  br label %if.end16

if.end16:                                         ; preds = %if.else, %if.end
  ret void, !dbg !2862
}

declare dso_local void @sel_add_to_insn_priority(%struct.rtx_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def** @ready_lastpos(%struct.ready_list* %ready) #0 !dbg !2863 {
entry:
  %ready.addr = alloca %struct.ready_list*, align 8
  store %struct.ready_list* %ready, %struct.ready_list** %ready.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ready_list** %ready.addr, metadata !2866, metadata !DIExpression()), !dbg !2867
  %0 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !2868
  %n_ready = getelementptr inbounds %struct.ready_list, %struct.ready_list* %0, i32 0, i32 3, !dbg !2868
  %1 = load i32, i32* %n_ready, align 8, !dbg !2868
  %cmp = icmp sge i32 %1, 1, !dbg !2868
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !2868

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 1379, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !2868
  br label %cond.end, !dbg !2868

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2868

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !2868
  %2 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !2869
  %vec = getelementptr inbounds %struct.ready_list, %struct.ready_list* %2, i32 0, i32 0, !dbg !2870
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %vec, align 8, !dbg !2870
  %4 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !2871
  %first = getelementptr inbounds %struct.ready_list, %struct.ready_list* %4, i32 0, i32 2, !dbg !2872
  %5 = load i32, i32* %first, align 4, !dbg !2872
  %idx.ext = sext i32 %5 to i64, !dbg !2873
  %add.ptr = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 %idx.ext, !dbg !2873
  %6 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !2874
  %n_ready1 = getelementptr inbounds %struct.ready_list, %struct.ready_list* %6, i32 0, i32 3, !dbg !2875
  %7 = load i32, i32* %n_ready1, align 8, !dbg !2875
  %idx.ext2 = sext i32 %7 to i64, !dbg !2876
  %idx.neg = sub i64 0, %idx.ext2, !dbg !2876
  %add.ptr3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %add.ptr, i64 %idx.neg, !dbg !2876
  %add.ptr4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %add.ptr3, i64 1, !dbg !2877
  ret %struct.rtx_def** %add.ptr4, !dbg !2878
}

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @ready_element(%struct.ready_list* %ready, i32 %index) #0 !dbg !2879 {
entry:
  %ready.addr = alloca %struct.ready_list*, align 8
  %index.addr = alloca i32, align 4
  store %struct.ready_list* %ready, %struct.ready_list** %ready.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ready_list** %ready.addr, metadata !2882, metadata !DIExpression()), !dbg !2883
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !2884, metadata !DIExpression()), !dbg !2885
  %0 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !2886
  %n_ready = getelementptr inbounds %struct.ready_list, %struct.ready_list* %0, i32 0, i32 3, !dbg !2886
  %1 = load i32, i32* %n_ready, align 8, !dbg !2886
  %tobool = icmp ne i32 %1, 0, !dbg !2886
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !2886

land.lhs.true:                                    ; preds = %entry
  %2 = load i32, i32* %index.addr, align 4, !dbg !2886
  %3 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !2886
  %n_ready1 = getelementptr inbounds %struct.ready_list, %struct.ready_list* %3, i32 0, i32 3, !dbg !2886
  %4 = load i32, i32* %n_ready1, align 8, !dbg !2886
  %cmp = icmp slt i32 %2, %4, !dbg !2886
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !2886

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 1456, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !2886
  br label %cond.end, !dbg !2886

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !2886

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !2886
  %5 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !2887
  %vec = getelementptr inbounds %struct.ready_list, %struct.ready_list* %5, i32 0, i32 0, !dbg !2888
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %vec, align 8, !dbg !2888
  %7 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !2889
  %first = getelementptr inbounds %struct.ready_list, %struct.ready_list* %7, i32 0, i32 2, !dbg !2890
  %8 = load i32, i32* %first, align 4, !dbg !2890
  %9 = load i32, i32* %index.addr, align 4, !dbg !2891
  %sub = sub nsw i32 %8, %9, !dbg !2892
  %idxprom = sext i32 %sub to i64, !dbg !2887
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 %idxprom, !dbg !2887
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8, !dbg !2887
  ret %struct.rtx_def* %10, !dbg !2893
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @ready_sort(%struct.ready_list* %ready) #0 !dbg !2894 {
entry:
  %ready.addr = alloca %struct.ready_list*, align 8
  %i = alloca i32, align 4
  %first = alloca %struct.rtx_def**, align 8
  store %struct.ready_list* %ready, %struct.ready_list** %ready.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ready_list** %ready.addr, metadata !2897, metadata !DIExpression()), !dbg !2898
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2899, metadata !DIExpression()), !dbg !2900
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %first, metadata !2901, metadata !DIExpression()), !dbg !2902
  %0 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !2903
  %call = call %struct.rtx_def** @ready_lastpos(%struct.ready_list* %0), !dbg !2904
  store %struct.rtx_def** %call, %struct.rtx_def*** %first, align 8, !dbg !2902
  %1 = load i8, i8* @sched_pressure_p, align 1, !dbg !2905
  %tobool = icmp ne i8 %1, 0, !dbg !2905
  br i1 %tobool, label %if.then, label %if.end, !dbg !2907

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !2908
  br label %for.cond, !dbg !2911

for.cond:                                         ; preds = %for.inc, %if.then
  %2 = load i32, i32* %i, align 4, !dbg !2912
  %3 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !2914
  %n_ready = getelementptr inbounds %struct.ready_list, %struct.ready_list* %3, i32 0, i32 3, !dbg !2915
  %4 = load i32, i32* %n_ready, align 8, !dbg !2915
  %cmp = icmp slt i32 %2, %4, !dbg !2916
  br i1 %cmp, label %for.body, label %for.end, !dbg !2917

for.body:                                         ; preds = %for.cond
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %first, align 8, !dbg !2918
  %6 = load i32, i32* %i, align 4, !dbg !2919
  %idxprom = sext i32 %6 to i64, !dbg !2918
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 %idxprom, !dbg !2918
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8, !dbg !2918
  call void @setup_insn_reg_pressure_info(%struct.rtx_def* %7), !dbg !2920
  br label %for.inc, !dbg !2920

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4, !dbg !2921
  %inc = add nsw i32 %8, 1, !dbg !2921
  store i32 %inc, i32* %i, align 4, !dbg !2921
  br label %for.cond, !dbg !2922, !llvm.loop !2923

for.end:                                          ; preds = %for.cond
  br label %if.end, !dbg !2925

if.end:                                           ; preds = %for.end, %entry
  br label %do.body, !dbg !2926

do.body:                                          ; preds = %if.end
  %9 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !2927
  %n_ready1 = getelementptr inbounds %struct.ready_list, %struct.ready_list* %9, i32 0, i32 3, !dbg !2927
  %10 = load i32, i32* %n_ready1, align 8, !dbg !2927
  %cmp2 = icmp eq i32 %10, 2, !dbg !2927
  br i1 %cmp2, label %if.then3, label %if.else, !dbg !2930

if.then3:                                         ; preds = %do.body
  %11 = load %struct.rtx_def**, %struct.rtx_def*** %first, align 8, !dbg !2927
  %12 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !2927
  %n_ready4 = getelementptr inbounds %struct.ready_list, %struct.ready_list* %12, i32 0, i32 3, !dbg !2927
  %13 = load i32, i32* %n_ready4, align 8, !dbg !2927
  call void @swap_sort(%struct.rtx_def** %11, i32 %13), !dbg !2927
  br label %if.end10, !dbg !2927

if.else:                                          ; preds = %do.body
  %14 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !2931
  %n_ready5 = getelementptr inbounds %struct.ready_list, %struct.ready_list* %14, i32 0, i32 3, !dbg !2931
  %15 = load i32, i32* %n_ready5, align 8, !dbg !2931
  %cmp6 = icmp sgt i32 %15, 2, !dbg !2931
  br i1 %cmp6, label %if.then7, label %if.end9, !dbg !2927

if.then7:                                         ; preds = %if.else
  %16 = load %struct.rtx_def**, %struct.rtx_def*** %first, align 8, !dbg !2931
  %17 = bitcast %struct.rtx_def** %16 to i8*, !dbg !2931
  %18 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !2931
  %n_ready8 = getelementptr inbounds %struct.ready_list, %struct.ready_list* %18, i32 0, i32 3, !dbg !2931
  %19 = load i32, i32* %n_ready8, align 8, !dbg !2931
  %conv = sext i32 %19 to i64, !dbg !2931
  call void @spec_qsort(i8* %17, i64 %conv, i64 8, i32 (i8*, i8*)* @rank_for_schedule), !dbg !2931
  br label %if.end9, !dbg !2931

if.end9:                                          ; preds = %if.then7, %if.else
  br label %if.end10

if.end10:                                         ; preds = %if.end9, %if.then3
  br label %do.end, !dbg !2930

do.end:                                           ; preds = %if.end10
  ret void, !dbg !2933
}

; Function Attrs: noinline nounwind uwtable
define internal void @setup_insn_reg_pressure_info(%struct.rtx_def* %insn) #0 !dbg !2437 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %change = alloca i32, align 4
  %before = alloca i32, align 4
  %after = alloca i32, align 4
  %hard_regno = alloca i32, align 4
  %excess_cost_change = alloca i32, align 4
  %mode = alloca i32, align 4
  %cl = alloca i32, align 4
  %pressure_info = alloca %struct.reg_pressure_data*, align 8
  %max_reg_pressure = alloca i32*, align 8
  %use = alloca %struct.reg_use_data*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !2934, metadata !DIExpression()), !dbg !2935
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2936, metadata !DIExpression()), !dbg !2937
  call void @llvm.dbg.declare(metadata i32* %change, metadata !2938, metadata !DIExpression()), !dbg !2939
  call void @llvm.dbg.declare(metadata i32* %before, metadata !2940, metadata !DIExpression()), !dbg !2941
  call void @llvm.dbg.declare(metadata i32* %after, metadata !2942, metadata !DIExpression()), !dbg !2943
  call void @llvm.dbg.declare(metadata i32* %hard_regno, metadata !2944, metadata !DIExpression()), !dbg !2945
  call void @llvm.dbg.declare(metadata i32* %excess_cost_change, metadata !2946, metadata !DIExpression()), !dbg !2947
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !2948, metadata !DIExpression()), !dbg !2949
  call void @llvm.dbg.declare(metadata i32* %cl, metadata !2950, metadata !DIExpression()), !dbg !2951
  call void @llvm.dbg.declare(metadata %struct.reg_pressure_data** %pressure_info, metadata !2952, metadata !DIExpression()), !dbg !2953
  call void @llvm.dbg.declare(metadata i32** %max_reg_pressure, metadata !2954, metadata !DIExpression()), !dbg !2955
  call void @llvm.dbg.declare(metadata %struct.reg_use_data** %use, metadata !2956, metadata !DIExpression()), !dbg !2957
  store i32 0, i32* %excess_cost_change, align 4, !dbg !2958
  store i32 0, i32* %i, align 4, !dbg !2959
  br label %for.cond, !dbg !2961

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !2962
  %1 = load i32, i32* @ira_reg_class_cover_size, align 4, !dbg !2964
  %cmp = icmp slt i32 %0, %1, !dbg !2965
  br i1 %cmp, label %for.body, label %for.end, !dbg !2966

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4, !dbg !2967
  %idxprom = sext i32 %2 to i64, !dbg !2968
  %arrayidx = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom, !dbg !2968
  %3 = load i32, i32* %arrayidx, align 4, !dbg !2968
  %idxprom1 = zext i32 %3 to i64, !dbg !2969
  %arrayidx2 = getelementptr inbounds [27 x i32], [27 x i32]* @setup_insn_reg_pressure_info.death, i64 0, i64 %idxprom1, !dbg !2969
  store i32 0, i32* %arrayidx2, align 4, !dbg !2970
  br label %for.inc, !dbg !2969

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4, !dbg !2971
  %inc = add nsw i32 %4, 1, !dbg !2971
  store i32 %inc, i32* %i, align 4, !dbg !2971
  br label %for.cond, !dbg !2972, !llvm.loop !2973

for.end:                                          ; preds = %for.cond
  %5 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !2975
  %tobool = icmp ne %struct.VEC_haifa_insn_data_def_heap* %5, null, !dbg !2975
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2975

cond.true:                                        ; preds = %for.end
  %6 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !2975
  %base = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %6, i32 0, i32 0, !dbg !2975
  br label %cond.end, !dbg !2975

cond.false:                                       ; preds = %for.end
  br label %cond.end, !dbg !2975

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_haifa_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2975
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2975
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1, !dbg !2975
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !2975
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !2975
  %rt_int = bitcast %union.rtunion_def* %arrayidx3 to i32*, !dbg !2975
  %8 = load i32, i32* %rt_int, align 8, !dbg !2975
  %call = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond, i32 %8), !dbg !2975
  %reg_use_list = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call, i32 0, i32 15, !dbg !2975
  %9 = load %struct.reg_use_data*, %struct.reg_use_data** %reg_use_list, align 8, !dbg !2975
  store %struct.reg_use_data* %9, %struct.reg_use_data** %use, align 8, !dbg !2977
  br label %for.cond4, !dbg !2978

for.cond4:                                        ; preds = %for.inc27, %cond.end
  %10 = load %struct.reg_use_data*, %struct.reg_use_data** %use, align 8, !dbg !2979
  %cmp5 = icmp ne %struct.reg_use_data* %10, null, !dbg !2981
  br i1 %cmp5, label %for.body6, label %for.end28, !dbg !2982

for.body6:                                        ; preds = %for.cond4
  %11 = load %struct.reg_use_data*, %struct.reg_use_data** %use, align 8, !dbg !2983
  %call7 = call zeroext i8 @dying_use_p(%struct.reg_use_data* %11), !dbg !2985
  %tobool8 = icmp ne i8 %call7, 0, !dbg !2985
  br i1 %tobool8, label %if.then, label %if.end26, !dbg !2986

if.then:                                          ; preds = %for.body6
  %12 = load i32*, i32** @sched_regno_cover_class, align 8, !dbg !2987
  %13 = load %struct.reg_use_data*, %struct.reg_use_data** %use, align 8, !dbg !2989
  %regno = getelementptr inbounds %struct.reg_use_data, %struct.reg_use_data* %13, i32 0, i32 0, !dbg !2990
  %14 = load i32, i32* %regno, align 8, !dbg !2990
  %idxprom9 = sext i32 %14 to i64, !dbg !2987
  %arrayidx10 = getelementptr inbounds i32, i32* %12, i64 %idxprom9, !dbg !2987
  %15 = load i32, i32* %arrayidx10, align 4, !dbg !2987
  store i32 %15, i32* %cl, align 4, !dbg !2991
  %16 = load %struct.reg_use_data*, %struct.reg_use_data** %use, align 8, !dbg !2992
  %regno11 = getelementptr inbounds %struct.reg_use_data, %struct.reg_use_data* %16, i32 0, i32 0, !dbg !2994
  %17 = load i32, i32* %regno11, align 8, !dbg !2994
  %cmp12 = icmp slt i32 %17, 53, !dbg !2995
  br i1 %cmp12, label %if.then13, label %if.else, !dbg !2996

if.then13:                                        ; preds = %if.then
  %18 = load i32, i32* %cl, align 4, !dbg !2997
  %idxprom14 = zext i32 %18 to i64, !dbg !2998
  %arrayidx15 = getelementptr inbounds [27 x i32], [27 x i32]* @setup_insn_reg_pressure_info.death, i64 0, i64 %idxprom14, !dbg !2998
  %19 = load i32, i32* %arrayidx15, align 4, !dbg !2999
  %inc16 = add nsw i32 %19, 1, !dbg !2999
  store i32 %inc16, i32* %arrayidx15, align 4, !dbg !2999
  br label %if.end, !dbg !2998

if.else:                                          ; preds = %if.then
  %20 = load i32, i32* %cl, align 4, !dbg !3000
  %idxprom17 = zext i32 %20 to i64, !dbg !3001
  %arrayidx18 = getelementptr inbounds [27 x [87 x i32]], [27 x [87 x i32]]* @ira_reg_class_nregs, i64 0, i64 %idxprom17, !dbg !3001
  %21 = load %struct.rtx_def**, %struct.rtx_def*** @regno_reg_rtx, align 8, !dbg !3002
  %22 = load %struct.reg_use_data*, %struct.reg_use_data** %use, align 8, !dbg !3002
  %regno19 = getelementptr inbounds %struct.reg_use_data, %struct.reg_use_data* %22, i32 0, i32 0, !dbg !3002
  %23 = load i32, i32* %regno19, align 8, !dbg !3002
  %idxprom20 = sext i32 %23 to i64, !dbg !3002
  %arrayidx21 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %21, i64 %idxprom20, !dbg !3002
  %24 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx21, align 8, !dbg !3002
  %25 = bitcast %struct.rtx_def* %24 to i32*, !dbg !3002
  %bf.load = load i32, i32* %25, align 8, !dbg !3002
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !3002
  %bf.clear = and i32 %bf.lshr, 255, !dbg !3002
  %idxprom22 = zext i32 %bf.clear to i64, !dbg !3001
  %arrayidx23 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx18, i64 0, i64 %idxprom22, !dbg !3001
  %26 = load i32, i32* %arrayidx23, align 4, !dbg !3001
  %27 = load i32, i32* %cl, align 4, !dbg !3003
  %idxprom24 = zext i32 %27 to i64, !dbg !3004
  %arrayidx25 = getelementptr inbounds [27 x i32], [27 x i32]* @setup_insn_reg_pressure_info.death, i64 0, i64 %idxprom24, !dbg !3004
  %28 = load i32, i32* %arrayidx25, align 4, !dbg !3005
  %add = add nsw i32 %28, %26, !dbg !3005
  store i32 %add, i32* %arrayidx25, align 4, !dbg !3005
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then13
  br label %if.end26, !dbg !3006

if.end26:                                         ; preds = %if.end, %for.body6
  br label %for.inc27, !dbg !3007

for.inc27:                                        ; preds = %if.end26
  %29 = load %struct.reg_use_data*, %struct.reg_use_data** %use, align 8, !dbg !3008
  %next_insn_use = getelementptr inbounds %struct.reg_use_data, %struct.reg_use_data* %29, i32 0, i32 3, !dbg !3009
  %30 = load %struct.reg_use_data*, %struct.reg_use_data** %next_insn_use, align 8, !dbg !3009
  store %struct.reg_use_data* %30, %struct.reg_use_data** %use, align 8, !dbg !3010
  br label %for.cond4, !dbg !3011, !llvm.loop !3012

for.end28:                                        ; preds = %for.cond4
  %31 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !3014
  %tobool29 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %31, null, !dbg !3014
  br i1 %tobool29, label %cond.true30, label %cond.false32, !dbg !3014

cond.true30:                                      ; preds = %for.end28
  %32 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !3014
  %base31 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %32, i32 0, i32 0, !dbg !3014
  br label %cond.end33, !dbg !3014

cond.false32:                                     ; preds = %for.end28
  br label %cond.end33, !dbg !3014

cond.end33:                                       ; preds = %cond.false32, %cond.true30
  %cond34 = phi %struct.VEC_haifa_insn_data_def_base* [ %base31, %cond.true30 ], [ null, %cond.false32 ], !dbg !3014
  %33 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3014
  %u35 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1, !dbg !3014
  %fld36 = bitcast %union.u* %u35 to [1 x %union.rtunion_def]*, !dbg !3014
  %arrayidx37 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld36, i64 0, i64 0, !dbg !3014
  %rt_int38 = bitcast %union.rtunion_def* %arrayidx37 to i32*, !dbg !3014
  %34 = load i32, i32* %rt_int38, align 8, !dbg !3014
  %call39 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond34, i32 %34), !dbg !3014
  %reg_pressure = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call39, i32 0, i32 13, !dbg !3014
  %35 = load %struct.reg_pressure_data*, %struct.reg_pressure_data** %reg_pressure, align 8, !dbg !3014
  store %struct.reg_pressure_data* %35, %struct.reg_pressure_data** %pressure_info, align 8, !dbg !3015
  %36 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !3016
  %tobool40 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %36, null, !dbg !3016
  br i1 %tobool40, label %cond.true41, label %cond.false43, !dbg !3016

cond.true41:                                      ; preds = %cond.end33
  %37 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !3016
  %base42 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %37, i32 0, i32 0, !dbg !3016
  br label %cond.end44, !dbg !3016

cond.false43:                                     ; preds = %cond.end33
  br label %cond.end44, !dbg !3016

cond.end44:                                       ; preds = %cond.false43, %cond.true41
  %cond45 = phi %struct.VEC_haifa_insn_data_def_base* [ %base42, %cond.true41 ], [ null, %cond.false43 ], !dbg !3016
  %38 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3016
  %u46 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1, !dbg !3016
  %fld47 = bitcast %union.u* %u46 to [1 x %union.rtunion_def]*, !dbg !3016
  %arrayidx48 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld47, i64 0, i64 0, !dbg !3016
  %rt_int49 = bitcast %union.rtunion_def* %arrayidx48 to i32*, !dbg !3016
  %39 = load i32, i32* %rt_int49, align 8, !dbg !3016
  %call50 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond45, i32 %39), !dbg !3016
  %max_reg_pressure51 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call50, i32 0, i32 14, !dbg !3016
  %40 = load i32*, i32** %max_reg_pressure51, align 8, !dbg !3016
  store i32* %40, i32** %max_reg_pressure, align 8, !dbg !3017
  %41 = load %struct.reg_pressure_data*, %struct.reg_pressure_data** %pressure_info, align 8, !dbg !3018
  %cmp52 = icmp ne %struct.reg_pressure_data* %41, null, !dbg !3018
  br i1 %cmp52, label %land.lhs.true, label %cond.true54, !dbg !3018

land.lhs.true:                                    ; preds = %cond.end44
  %42 = load i32*, i32** %max_reg_pressure, align 8, !dbg !3018
  %cmp53 = icmp ne i32* %42, null, !dbg !3018
  br i1 %cmp53, label %cond.false55, label %cond.true54, !dbg !3018

cond.true54:                                      ; preds = %land.lhs.true, %cond.end44
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 1149, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !3018
  br label %cond.end56, !dbg !3018

cond.false55:                                     ; preds = %land.lhs.true
  br label %cond.end56, !dbg !3018

cond.end56:                                       ; preds = %cond.false55, %cond.true54
  %cond57 = phi i32 [ 0, %cond.true54 ], [ 0, %cond.false55 ], !dbg !3018
  store i32 0, i32* %i, align 4, !dbg !3019
  br label %for.cond58, !dbg !3021

for.cond58:                                       ; preds = %for.inc135, %cond.end56
  %43 = load i32, i32* %i, align 4, !dbg !3022
  %44 = load i32, i32* @ira_reg_class_cover_size, align 4, !dbg !3024
  %cmp59 = icmp slt i32 %43, %44, !dbg !3025
  br i1 %cmp59, label %for.body60, label %for.end137, !dbg !3026

for.body60:                                       ; preds = %for.cond58
  %45 = load i32, i32* %i, align 4, !dbg !3027
  %idxprom61 = sext i32 %45 to i64, !dbg !3029
  %arrayidx62 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom61, !dbg !3029
  %46 = load i32, i32* %arrayidx62, align 4, !dbg !3029
  store i32 %46, i32* %cl, align 4, !dbg !3030
  %47 = load i32, i32* %cl, align 4, !dbg !3031
  %idxprom63 = zext i32 %47 to i64, !dbg !3031
  %arrayidx64 = getelementptr inbounds [27 x i32], [27 x i32]* @curr_reg_pressure, i64 0, i64 %idxprom63, !dbg !3031
  %48 = load i32, i32* %arrayidx64, align 4, !dbg !3031
  %cmp65 = icmp sge i32 %48, 0, !dbg !3031
  br i1 %cmp65, label %cond.false67, label %cond.true66, !dbg !3031

cond.true66:                                      ; preds = %for.body60
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 1153, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !3031
  br label %cond.end68, !dbg !3031

cond.false67:                                     ; preds = %for.body60
  br label %cond.end68, !dbg !3031

cond.end68:                                       ; preds = %cond.false67, %cond.true66
  %cond69 = phi i32 [ 0, %cond.true66 ], [ 0, %cond.false67 ], !dbg !3031
  %49 = load %struct.reg_pressure_data*, %struct.reg_pressure_data** %pressure_info, align 8, !dbg !3032
  %50 = load i32, i32* %i, align 4, !dbg !3033
  %idxprom70 = sext i32 %50 to i64, !dbg !3032
  %arrayidx71 = getelementptr inbounds %struct.reg_pressure_data, %struct.reg_pressure_data* %49, i64 %idxprom70, !dbg !3032
  %51 = bitcast %struct.reg_pressure_data* %arrayidx71 to i32*, !dbg !3034
  %bf.load72 = load i32, i32* %51, align 4, !dbg !3034
  %bf.lshr73 = lshr i32 %bf.load72, 8, !dbg !3034
  %bf.clear74 = and i32 %bf.lshr73, 255, !dbg !3034
  %52 = load i32, i32* %cl, align 4, !dbg !3035
  %idxprom75 = zext i32 %52 to i64, !dbg !3036
  %arrayidx76 = getelementptr inbounds [27 x i32], [27 x i32]* @setup_insn_reg_pressure_info.death, i64 0, i64 %idxprom75, !dbg !3036
  %53 = load i32, i32* %arrayidx76, align 4, !dbg !3036
  %sub = sub nsw i32 %bf.clear74, %53, !dbg !3037
  store i32 %sub, i32* %change, align 4, !dbg !3038
  %54 = load i32*, i32** %max_reg_pressure, align 8, !dbg !3039
  %55 = load i32, i32* %i, align 4, !dbg !3039
  %idxprom77 = sext i32 %55 to i64, !dbg !3039
  %arrayidx78 = getelementptr inbounds i32, i32* %54, i64 %idxprom77, !dbg !3039
  %56 = load i32, i32* %arrayidx78, align 4, !dbg !3039
  %57 = load i32, i32* %cl, align 4, !dbg !3039
  %idxprom79 = zext i32 %57 to i64, !dbg !3039
  %arrayidx80 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_available_class_regs, i64 0, i64 %idxprom79, !dbg !3039
  %58 = load i32, i32* %arrayidx80, align 4, !dbg !3039
  %sub81 = sub nsw i32 %56, %58, !dbg !3039
  %cmp82 = icmp sgt i32 0, %sub81, !dbg !3039
  br i1 %cmp82, label %cond.true83, label %cond.false84, !dbg !3039

cond.true83:                                      ; preds = %cond.end68
  br label %cond.end90, !dbg !3039

cond.false84:                                     ; preds = %cond.end68
  %59 = load i32*, i32** %max_reg_pressure, align 8, !dbg !3039
  %60 = load i32, i32* %i, align 4, !dbg !3039
  %idxprom85 = sext i32 %60 to i64, !dbg !3039
  %arrayidx86 = getelementptr inbounds i32, i32* %59, i64 %idxprom85, !dbg !3039
  %61 = load i32, i32* %arrayidx86, align 4, !dbg !3039
  %62 = load i32, i32* %cl, align 4, !dbg !3039
  %idxprom87 = zext i32 %62 to i64, !dbg !3039
  %arrayidx88 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_available_class_regs, i64 0, i64 %idxprom87, !dbg !3039
  %63 = load i32, i32* %arrayidx88, align 4, !dbg !3039
  %sub89 = sub nsw i32 %61, %63, !dbg !3039
  br label %cond.end90, !dbg !3039

cond.end90:                                       ; preds = %cond.false84, %cond.true83
  %cond91 = phi i32 [ 0, %cond.true83 ], [ %sub89, %cond.false84 ], !dbg !3039
  store i32 %cond91, i32* %before, align 4, !dbg !3040
  %64 = load i32*, i32** %max_reg_pressure, align 8, !dbg !3041
  %65 = load i32, i32* %i, align 4, !dbg !3041
  %idxprom92 = sext i32 %65 to i64, !dbg !3041
  %arrayidx93 = getelementptr inbounds i32, i32* %64, i64 %idxprom92, !dbg !3041
  %66 = load i32, i32* %arrayidx93, align 4, !dbg !3041
  %67 = load i32, i32* %change, align 4, !dbg !3041
  %add94 = add nsw i32 %66, %67, !dbg !3041
  %68 = load i32, i32* %cl, align 4, !dbg !3041
  %idxprom95 = zext i32 %68 to i64, !dbg !3041
  %arrayidx96 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_available_class_regs, i64 0, i64 %idxprom95, !dbg !3041
  %69 = load i32, i32* %arrayidx96, align 4, !dbg !3041
  %sub97 = sub nsw i32 %add94, %69, !dbg !3041
  %cmp98 = icmp sgt i32 0, %sub97, !dbg !3041
  br i1 %cmp98, label %cond.true99, label %cond.false100, !dbg !3041

cond.true99:                                      ; preds = %cond.end90
  br label %cond.end107, !dbg !3041

cond.false100:                                    ; preds = %cond.end90
  %70 = load i32*, i32** %max_reg_pressure, align 8, !dbg !3041
  %71 = load i32, i32* %i, align 4, !dbg !3041
  %idxprom101 = sext i32 %71 to i64, !dbg !3041
  %arrayidx102 = getelementptr inbounds i32, i32* %70, i64 %idxprom101, !dbg !3041
  %72 = load i32, i32* %arrayidx102, align 4, !dbg !3041
  %73 = load i32, i32* %change, align 4, !dbg !3041
  %add103 = add nsw i32 %72, %73, !dbg !3041
  %74 = load i32, i32* %cl, align 4, !dbg !3041
  %idxprom104 = zext i32 %74 to i64, !dbg !3041
  %arrayidx105 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_available_class_regs, i64 0, i64 %idxprom104, !dbg !3041
  %75 = load i32, i32* %arrayidx105, align 4, !dbg !3041
  %sub106 = sub nsw i32 %add103, %75, !dbg !3041
  br label %cond.end107, !dbg !3041

cond.end107:                                      ; preds = %cond.false100, %cond.true99
  %cond108 = phi i32 [ 0, %cond.true99 ], [ %sub106, %cond.false100 ], !dbg !3041
  store i32 %cond108, i32* %after, align 4, !dbg !3042
  %76 = load i32, i32* %cl, align 4, !dbg !3043
  %idxprom109 = zext i32 %76 to i64, !dbg !3044
  %arrayidx110 = getelementptr inbounds [27 x [53 x i16]], [27 x [53 x i16]]* @ira_class_hard_regs, i64 0, i64 %idxprom109, !dbg !3044
  %arrayidx111 = getelementptr inbounds [53 x i16], [53 x i16]* %arrayidx110, i64 0, i64 0, !dbg !3044
  %77 = load i16, i16* %arrayidx111, align 2, !dbg !3044
  %conv = sext i16 %77 to i32, !dbg !3044
  store i32 %conv, i32* %hard_regno, align 4, !dbg !3045
  %78 = load i32, i32* %hard_regno, align 4, !dbg !3046
  %cmp112 = icmp sge i32 %78, 0, !dbg !3046
  br i1 %cmp112, label %cond.false115, label %cond.true114, !dbg !3046

cond.true114:                                     ; preds = %cond.end107
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 1159, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !3046
  br label %cond.end116, !dbg !3046

cond.false115:                                    ; preds = %cond.end107
  br label %cond.end116, !dbg !3046

cond.end116:                                      ; preds = %cond.false115, %cond.true114
  %cond117 = phi i32 [ 0, %cond.true114 ], [ 0, %cond.false115 ], !dbg !3046
  %79 = load i32, i32* %hard_regno, align 4, !dbg !3047
  %idxprom118 = sext i32 %79 to i64, !dbg !3048
  %arrayidx119 = getelementptr inbounds [53 x i32], [53 x i32]* @reg_raw_mode, i64 0, i64 %idxprom118, !dbg !3048
  %80 = load i32, i32* %arrayidx119, align 4, !dbg !3048
  store i32 %80, i32* %mode, align 4, !dbg !3049
  %81 = load i32, i32* %after, align 4, !dbg !3050
  %82 = load i32, i32* %before, align 4, !dbg !3051
  %sub120 = sub nsw i32 %81, %82, !dbg !3052
  %83 = load i32, i32* %mode, align 4, !dbg !3053
  %idxprom121 = zext i32 %83 to i64, !dbg !3054
  %arrayidx122 = getelementptr inbounds [87 x [27 x [2 x i16]]], [87 x [27 x [2 x i16]]]* @ira_memory_move_cost, i64 0, i64 %idxprom121, !dbg !3054
  %84 = load i32, i32* %cl, align 4, !dbg !3055
  %idxprom123 = zext i32 %84 to i64, !dbg !3054
  %arrayidx124 = getelementptr inbounds [27 x [2 x i16]], [27 x [2 x i16]]* %arrayidx122, i64 0, i64 %idxprom123, !dbg !3054
  %arrayidx125 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx124, i64 0, i64 0, !dbg !3054
  %85 = load i16, i16* %arrayidx125, align 4, !dbg !3054
  %conv126 = sext i16 %85 to i32, !dbg !3054
  %86 = load i32, i32* %mode, align 4, !dbg !3056
  %idxprom127 = zext i32 %86 to i64, !dbg !3057
  %arrayidx128 = getelementptr inbounds [87 x [27 x [2 x i16]]], [87 x [27 x [2 x i16]]]* @ira_memory_move_cost, i64 0, i64 %idxprom127, !dbg !3057
  %87 = load i32, i32* %cl, align 4, !dbg !3058
  %idxprom129 = zext i32 %87 to i64, !dbg !3057
  %arrayidx130 = getelementptr inbounds [27 x [2 x i16]], [27 x [2 x i16]]* %arrayidx128, i64 0, i64 %idxprom129, !dbg !3057
  %arrayidx131 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx130, i64 0, i64 1, !dbg !3057
  %88 = load i16, i16* %arrayidx131, align 2, !dbg !3057
  %conv132 = sext i16 %88 to i32, !dbg !3057
  %add133 = add nsw i32 %conv126, %conv132, !dbg !3059
  %mul = mul nsw i32 %sub120, %add133, !dbg !3060
  %89 = load i32, i32* %excess_cost_change, align 4, !dbg !3061
  %add134 = add nsw i32 %89, %mul, !dbg !3061
  store i32 %add134, i32* %excess_cost_change, align 4, !dbg !3061
  br label %for.inc135, !dbg !3062

for.inc135:                                       ; preds = %cond.end116
  %90 = load i32, i32* %i, align 4, !dbg !3063
  %inc136 = add nsw i32 %90, 1, !dbg !3063
  store i32 %inc136, i32* %i, align 4, !dbg !3063
  br label %for.cond58, !dbg !3064, !llvm.loop !3065

for.end137:                                       ; preds = %for.cond58
  %91 = load i32, i32* %excess_cost_change, align 4, !dbg !3067
  %92 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !3068
  %tobool138 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %92, null, !dbg !3068
  br i1 %tobool138, label %cond.true139, label %cond.false141, !dbg !3068

cond.true139:                                     ; preds = %for.end137
  %93 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !3068
  %base140 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %93, i32 0, i32 0, !dbg !3068
  br label %cond.end142, !dbg !3068

cond.false141:                                    ; preds = %for.end137
  br label %cond.end142, !dbg !3068

cond.end142:                                      ; preds = %cond.false141, %cond.true139
  %cond143 = phi %struct.VEC_haifa_insn_data_def_base* [ %base140, %cond.true139 ], [ null, %cond.false141 ], !dbg !3068
  %94 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3068
  %u144 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %94, i32 0, i32 1, !dbg !3068
  %fld145 = bitcast %union.u* %u144 to [1 x %union.rtunion_def]*, !dbg !3068
  %arrayidx146 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld145, i64 0, i64 0, !dbg !3068
  %rt_int147 = bitcast %union.rtunion_def* %arrayidx146 to i32*, !dbg !3068
  %95 = load i32, i32* %rt_int147, align 8, !dbg !3068
  %call148 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond143, i32 %95), !dbg !3068
  %reg_pressure_excess_cost_change = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call148, i32 0, i32 17, !dbg !3068
  store i32 %91, i32* %reg_pressure_excess_cost_change, align 8, !dbg !3069
  ret void, !dbg !3070
}

; Function Attrs: noinline nounwind uwtable
define internal void @swap_sort(%struct.rtx_def** %a, i32 %n) #0 !dbg !3071 {
entry:
  %a.addr = alloca %struct.rtx_def**, align 8
  %n.addr = alloca i32, align 4
  %insn = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  store %struct.rtx_def** %a, %struct.rtx_def*** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %a.addr, metadata !3074, metadata !DIExpression()), !dbg !3075
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !3076, metadata !DIExpression()), !dbg !3077
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !3078, metadata !DIExpression()), !dbg !3079
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %a.addr, align 8, !dbg !3080
  %1 = load i32, i32* %n.addr, align 4, !dbg !3081
  %sub = sub nsw i32 %1, 1, !dbg !3082
  %idxprom = sext i32 %sub to i64, !dbg !3080
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 %idxprom, !dbg !3080
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8, !dbg !3080
  store %struct.rtx_def* %2, %struct.rtx_def** %insn, align 8, !dbg !3079
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3083, metadata !DIExpression()), !dbg !3084
  %3 = load i32, i32* %n.addr, align 4, !dbg !3085
  %sub1 = sub nsw i32 %3, 2, !dbg !3086
  store i32 %sub1, i32* %i, align 4, !dbg !3084
  br label %while.cond, !dbg !3087

while.cond:                                       ; preds = %while.body, %entry
  %4 = load i32, i32* %i, align 4, !dbg !3088
  %cmp = icmp sge i32 %4, 0, !dbg !3089
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !3090

land.rhs:                                         ; preds = %while.cond
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %a.addr, align 8, !dbg !3091
  %6 = load i32, i32* %i, align 4, !dbg !3092
  %idx.ext = sext i32 %6 to i64, !dbg !3093
  %add.ptr = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 %idx.ext, !dbg !3093
  %7 = bitcast %struct.rtx_def** %add.ptr to i8*, !dbg !3091
  %8 = bitcast %struct.rtx_def** %insn to i8*, !dbg !3094
  %call = call i32 @rank_for_schedule(i8* %7, i8* %8), !dbg !3095
  %cmp2 = icmp sge i32 %call, 0, !dbg !3096
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %9 = phi i1 [ false, %while.cond ], [ %cmp2, %land.rhs ], !dbg !3097
  br i1 %9, label %while.body, label %while.end, !dbg !3087

while.body:                                       ; preds = %land.end
  %10 = load %struct.rtx_def**, %struct.rtx_def*** %a.addr, align 8, !dbg !3098
  %11 = load i32, i32* %i, align 4, !dbg !3100
  %idxprom3 = sext i32 %11 to i64, !dbg !3098
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %10, i64 %idxprom3, !dbg !3098
  %12 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8, !dbg !3098
  %13 = load %struct.rtx_def**, %struct.rtx_def*** %a.addr, align 8, !dbg !3101
  %14 = load i32, i32* %i, align 4, !dbg !3102
  %add = add nsw i32 %14, 1, !dbg !3103
  %idxprom5 = sext i32 %add to i64, !dbg !3101
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %13, i64 %idxprom5, !dbg !3101
  store %struct.rtx_def* %12, %struct.rtx_def** %arrayidx6, align 8, !dbg !3104
  %15 = load i32, i32* %i, align 4, !dbg !3105
  %sub7 = sub nsw i32 %15, 1, !dbg !3105
  store i32 %sub7, i32* %i, align 4, !dbg !3105
  br label %while.cond, !dbg !3087, !llvm.loop !3106

while.end:                                        ; preds = %land.end
  %16 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3108
  %17 = load %struct.rtx_def**, %struct.rtx_def*** %a.addr, align 8, !dbg !3109
  %18 = load i32, i32* %i, align 4, !dbg !3110
  %add8 = add nsw i32 %18, 1, !dbg !3111
  %idxprom9 = sext i32 %add8 to i64, !dbg !3109
  %arrayidx10 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %17, i64 %idxprom9, !dbg !3109
  store %struct.rtx_def* %16, %struct.rtx_def** %arrayidx10, align 8, !dbg !3112
  ret void, !dbg !3113
}

declare dso_local void @spec_qsort(i8*, i64, i64, i32 (i8*, i8*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @rank_for_schedule(i8* %x, i8* %y) #0 !dbg !3114 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca i8*, align 8
  %y.addr = alloca i8*, align 8
  %tmp = alloca %struct.rtx_def*, align 8
  %tmp2 = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  %tmp_class = alloca i32, align 4
  %tmp2_class = alloca i32, align 4
  %val = alloca i32, align 4
  %priority_val = alloca i32, align 4
  %info_val = alloca i32, align 4
  %diff = alloca i32, align 4
  %ds1 = alloca i32, align 4
  %ds2 = alloca i32, align 4
  %dw1 = alloca i32, align 4
  %dw2 = alloca i32, align 4
  %dw = alloca i32, align 4
  %dep1 = alloca %struct._dep*, align 8
  %dep2 = alloca %struct._dep*, align 8
  store i8* %x, i8** %x.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x.addr, metadata !3115, metadata !DIExpression()), !dbg !3116
  store i8* %y, i8** %y.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %y.addr, metadata !3117, metadata !DIExpression()), !dbg !3118
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tmp, metadata !3119, metadata !DIExpression()), !dbg !3120
  %0 = load i8*, i8** %y.addr, align 8, !dbg !3121
  %1 = bitcast i8* %0 to %struct.rtx_def**, !dbg !3122
  %2 = load %struct.rtx_def*, %struct.rtx_def** %1, align 8, !dbg !3123
  store %struct.rtx_def* %2, %struct.rtx_def** %tmp, align 8, !dbg !3120
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tmp2, metadata !3124, metadata !DIExpression()), !dbg !3125
  %3 = load i8*, i8** %x.addr, align 8, !dbg !3126
  %4 = bitcast i8* %3 to %struct.rtx_def**, !dbg !3127
  %5 = load %struct.rtx_def*, %struct.rtx_def** %4, align 8, !dbg !3128
  store %struct.rtx_def* %5, %struct.rtx_def** %tmp2, align 8, !dbg !3125
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !3129, metadata !DIExpression()), !dbg !3130
  call void @llvm.dbg.declare(metadata i32* %tmp_class, metadata !3131, metadata !DIExpression()), !dbg !3132
  call void @llvm.dbg.declare(metadata i32* %tmp2_class, metadata !3133, metadata !DIExpression()), !dbg !3134
  call void @llvm.dbg.declare(metadata i32* %val, metadata !3135, metadata !DIExpression()), !dbg !3136
  call void @llvm.dbg.declare(metadata i32* %priority_val, metadata !3137, metadata !DIExpression()), !dbg !3138
  call void @llvm.dbg.declare(metadata i32* %info_val, metadata !3139, metadata !DIExpression()), !dbg !3140
  %6 = load i32, i32* @flag_var_tracking_assignments, align 4, !dbg !3141
  %tobool = icmp ne i32 %6, 0, !dbg !3141
  br i1 %tobool, label %if.then, label %if.end10, !dbg !3143

if.then:                                          ; preds = %entry
  %7 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !3144
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !3144
  %bf.load = load i32, i32* %8, align 8, !dbg !3144
  %bf.clear = and i32 %bf.load, 65535, !dbg !3144
  %cmp = icmp eq i32 %bf.clear, 7, !dbg !3144
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !3147

land.lhs.true:                                    ; preds = %if.then
  %9 = load %struct.rtx_def*, %struct.rtx_def** %tmp2, align 8, !dbg !3148
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !3148
  %bf.load1 = load i32, i32* %10, align 8, !dbg !3148
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !3148
  %cmp3 = icmp eq i32 %bf.clear2, 7, !dbg !3148
  br i1 %cmp3, label %if.else, label %if.then4, !dbg !3149

if.then4:                                         ; preds = %land.lhs.true
  store i32 -1, i32* %retval, align 4, !dbg !3150
  br label %return, !dbg !3150

if.else:                                          ; preds = %land.lhs.true, %if.then
  %11 = load %struct.rtx_def*, %struct.rtx_def** %tmp2, align 8, !dbg !3151
  %12 = bitcast %struct.rtx_def* %11 to i32*, !dbg !3151
  %bf.load5 = load i32, i32* %12, align 8, !dbg !3151
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !3151
  %cmp7 = icmp eq i32 %bf.clear6, 7, !dbg !3151
  br i1 %cmp7, label %if.then8, label %if.end, !dbg !3153

if.then8:                                         ; preds = %if.else
  store i32 1, i32* %retval, align 4, !dbg !3154
  br label %return, !dbg !3154

if.end:                                           ; preds = %if.else
  br label %if.end9

if.end9:                                          ; preds = %if.end
  br label %if.end10, !dbg !3155

if.end10:                                         ; preds = %if.end9, %entry
  %13 = load i32, i32* @flag_sched_group_heuristic, align 4, !dbg !3156
  %tobool11 = icmp ne i32 %13, 0, !dbg !3156
  br i1 %tobool11, label %land.lhs.true12, label %if.end24, !dbg !3158

land.lhs.true12:                                  ; preds = %if.end10
  %14 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !3159
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !3159
  %bf.load13 = load i32, i32* %15, align 8, !dbg !3159
  %bf.lshr = lshr i32 %bf.load13, 28, !dbg !3159
  %bf.clear14 = and i32 %bf.lshr, 1, !dbg !3159
  %16 = load %struct.rtx_def*, %struct.rtx_def** %tmp2, align 8, !dbg !3160
  %17 = bitcast %struct.rtx_def* %16 to i32*, !dbg !3160
  %bf.load15 = load i32, i32* %17, align 8, !dbg !3160
  %bf.lshr16 = lshr i32 %bf.load15, 28, !dbg !3160
  %bf.clear17 = and i32 %bf.lshr16, 1, !dbg !3160
  %cmp18 = icmp ne i32 %bf.clear14, %bf.clear17, !dbg !3161
  br i1 %cmp18, label %if.then19, label %if.end24, !dbg !3162

if.then19:                                        ; preds = %land.lhs.true12
  %18 = load %struct.rtx_def*, %struct.rtx_def** %tmp2, align 8, !dbg !3163
  %19 = bitcast %struct.rtx_def* %18 to i32*, !dbg !3163
  %bf.load20 = load i32, i32* %19, align 8, !dbg !3163
  %bf.lshr21 = lshr i32 %bf.load20, 28, !dbg !3163
  %bf.clear22 = and i32 %bf.lshr21, 1, !dbg !3163
  %tobool23 = icmp ne i32 %bf.clear22, 0, !dbg !3163
  %20 = zext i1 %tobool23 to i64, !dbg !3163
  %cond = select i1 %tobool23, i32 1, i32 -1, !dbg !3163
  store i32 %cond, i32* %retval, align 4, !dbg !3164
  br label %return, !dbg !3164

if.end24:                                         ; preds = %land.lhs.true12, %if.end10
  %21 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !3165
  %tobool25 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %21, null, !dbg !3165
  br i1 %tobool25, label %cond.true, label %cond.false, !dbg !3165

cond.true:                                        ; preds = %if.end24
  %22 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !3165
  %base = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %22, i32 0, i32 0, !dbg !3165
  br label %cond.end, !dbg !3165

cond.false:                                       ; preds = %if.end24
  br label %cond.end, !dbg !3165

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond26 = phi %struct.VEC_haifa_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3165
  %23 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !3165
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1, !dbg !3165
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3165
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !3165
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !3165
  %24 = load i32, i32* %rt_int, align 8, !dbg !3165
  %call = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond26, i32 %24), !dbg !3165
  %priority_status = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call, i32 0, i32 7, !dbg !3165
  %25 = load i8, i8* %priority_status, align 1, !dbg !3165
  %conv = sext i8 %25 to i32, !dbg !3165
  %cmp27 = icmp sgt i32 %conv, 0, !dbg !3165
  br i1 %cmp27, label %land.lhs.true29, label %cond.true45, !dbg !3165

land.lhs.true29:                                  ; preds = %cond.end
  %26 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !3165
  %tobool30 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %26, null, !dbg !3165
  br i1 %tobool30, label %cond.true31, label %cond.false33, !dbg !3165

cond.true31:                                      ; preds = %land.lhs.true29
  %27 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !3165
  %base32 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %27, i32 0, i32 0, !dbg !3165
  br label %cond.end34, !dbg !3165

cond.false33:                                     ; preds = %land.lhs.true29
  br label %cond.end34, !dbg !3165

cond.end34:                                       ; preds = %cond.false33, %cond.true31
  %cond35 = phi %struct.VEC_haifa_insn_data_def_base* [ %base32, %cond.true31 ], [ null, %cond.false33 ], !dbg !3165
  %28 = load %struct.rtx_def*, %struct.rtx_def** %tmp2, align 8, !dbg !3165
  %u36 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1, !dbg !3165
  %fld37 = bitcast %union.u* %u36 to [1 x %union.rtunion_def]*, !dbg !3165
  %arrayidx38 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld37, i64 0, i64 0, !dbg !3165
  %rt_int39 = bitcast %union.rtunion_def* %arrayidx38 to i32*, !dbg !3165
  %29 = load i32, i32* %rt_int39, align 8, !dbg !3165
  %call40 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond35, i32 %29), !dbg !3165
  %priority_status41 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call40, i32 0, i32 7, !dbg !3165
  %30 = load i8, i8* %priority_status41, align 1, !dbg !3165
  %conv42 = sext i8 %30 to i32, !dbg !3165
  %cmp43 = icmp sgt i32 %conv42, 0, !dbg !3165
  br i1 %cmp43, label %cond.false46, label %cond.true45, !dbg !3165

cond.true45:                                      ; preds = %cond.end34, %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 1196, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !3165
  br label %cond.end47, !dbg !3165

cond.false46:                                     ; preds = %cond.end34
  br label %cond.end47, !dbg !3165

cond.end47:                                       ; preds = %cond.false46, %cond.true45
  %cond48 = phi i32 [ 0, %cond.true45 ], [ 0, %cond.false46 ], !dbg !3165
  %31 = load i8, i8* @sched_pressure_p, align 1, !dbg !3166
  %tobool49 = icmp ne i8 %31, 0, !dbg !3166
  br i1 %tobool49, label %if.then50, label %if.end140, !dbg !3168

if.then50:                                        ; preds = %cond.end47
  call void @llvm.dbg.declare(metadata i32* %diff, metadata !3169, metadata !DIExpression()), !dbg !3171
  %32 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !3172
  %tobool51 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %32, null, !dbg !3172
  br i1 %tobool51, label %cond.true52, label %cond.false54, !dbg !3172

cond.true52:                                      ; preds = %if.then50
  %33 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !3172
  %base53 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %33, i32 0, i32 0, !dbg !3172
  br label %cond.end55, !dbg !3172

cond.false54:                                     ; preds = %if.then50
  br label %cond.end55, !dbg !3172

cond.end55:                                       ; preds = %cond.false54, %cond.true52
  %cond56 = phi %struct.VEC_haifa_insn_data_def_base* [ %base53, %cond.true52 ], [ null, %cond.false54 ], !dbg !3172
  %34 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !3172
  %u57 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %34, i32 0, i32 1, !dbg !3172
  %fld58 = bitcast %union.u* %u57 to [1 x %union.rtunion_def]*, !dbg !3172
  %arrayidx59 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld58, i64 0, i64 0, !dbg !3172
  %rt_int60 = bitcast %union.rtunion_def* %arrayidx59 to i32*, !dbg !3172
  %35 = load i32, i32* %rt_int60, align 8, !dbg !3172
  %call61 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond56, i32 %35), !dbg !3172
  %reg_pressure_excess_cost_change = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call61, i32 0, i32 17, !dbg !3172
  %36 = load i32, i32* %reg_pressure_excess_cost_change, align 8, !dbg !3172
  %37 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !3174
  %tobool62 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %37, null, !dbg !3174
  br i1 %tobool62, label %cond.true63, label %cond.false65, !dbg !3174

cond.true63:                                      ; preds = %cond.end55
  %38 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !3174
  %base64 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %38, i32 0, i32 0, !dbg !3174
  br label %cond.end66, !dbg !3174

cond.false65:                                     ; preds = %cond.end55
  br label %cond.end66, !dbg !3174

cond.end66:                                       ; preds = %cond.false65, %cond.true63
  %cond67 = phi %struct.VEC_haifa_insn_data_def_base* [ %base64, %cond.true63 ], [ null, %cond.false65 ], !dbg !3174
  %39 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !3174
  %u68 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1, !dbg !3174
  %fld69 = bitcast %union.u* %u68 to [1 x %union.rtunion_def]*, !dbg !3174
  %arrayidx70 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld69, i64 0, i64 0, !dbg !3174
  %rt_int71 = bitcast %union.rtunion_def* %arrayidx70 to i32*, !dbg !3174
  %40 = load i32, i32* %rt_int71, align 8, !dbg !3174
  %call72 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond67, i32 %40), !dbg !3174
  %tick = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call72, i32 0, i32 2, !dbg !3174
  %41 = load i32, i32* %tick, align 8, !dbg !3174
  %42 = load i32, i32* @clock_var, align 4, !dbg !3175
  %cmp73 = icmp sgt i32 %41, %42, !dbg !3176
  br i1 %cmp73, label %cond.true75, label %cond.false88, !dbg !3174

cond.true75:                                      ; preds = %cond.end66
  %43 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !3177
  %tobool76 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %43, null, !dbg !3177
  br i1 %tobool76, label %cond.true77, label %cond.false79, !dbg !3177

cond.true77:                                      ; preds = %cond.true75
  %44 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !3177
  %base78 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %44, i32 0, i32 0, !dbg !3177
  br label %cond.end80, !dbg !3177

cond.false79:                                     ; preds = %cond.true75
  br label %cond.end80, !dbg !3177

cond.end80:                                       ; preds = %cond.false79, %cond.true77
  %cond81 = phi %struct.VEC_haifa_insn_data_def_base* [ %base78, %cond.true77 ], [ null, %cond.false79 ], !dbg !3177
  %45 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !3177
  %u82 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1, !dbg !3177
  %fld83 = bitcast %union.u* %u82 to [1 x %union.rtunion_def]*, !dbg !3177
  %arrayidx84 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld83, i64 0, i64 0, !dbg !3177
  %rt_int85 = bitcast %union.rtunion_def* %arrayidx84 to i32*, !dbg !3177
  %46 = load i32, i32* %rt_int85, align 8, !dbg !3177
  %call86 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond81, i32 %46), !dbg !3177
  %tick87 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call86, i32 0, i32 2, !dbg !3177
  %47 = load i32, i32* %tick87, align 8, !dbg !3177
  %48 = load i32, i32* @clock_var, align 4, !dbg !3178
  %sub = sub nsw i32 %47, %48, !dbg !3179
  br label %cond.end89, !dbg !3174

cond.false88:                                     ; preds = %cond.end66
  br label %cond.end89, !dbg !3174

cond.end89:                                       ; preds = %cond.false88, %cond.end80
  %cond90 = phi i32 [ %sub, %cond.end80 ], [ 0, %cond.false88 ], !dbg !3174
  %add = add nsw i32 %36, %cond90, !dbg !3180
  %49 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !3181
  %tobool91 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %49, null, !dbg !3181
  br i1 %tobool91, label %cond.true92, label %cond.false94, !dbg !3181

cond.true92:                                      ; preds = %cond.end89
  %50 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !3181
  %base93 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %50, i32 0, i32 0, !dbg !3181
  br label %cond.end95, !dbg !3181

cond.false94:                                     ; preds = %cond.end89
  br label %cond.end95, !dbg !3181

cond.end95:                                       ; preds = %cond.false94, %cond.true92
  %cond96 = phi %struct.VEC_haifa_insn_data_def_base* [ %base93, %cond.true92 ], [ null, %cond.false94 ], !dbg !3181
  %51 = load %struct.rtx_def*, %struct.rtx_def** %tmp2, align 8, !dbg !3181
  %u97 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %51, i32 0, i32 1, !dbg !3181
  %fld98 = bitcast %union.u* %u97 to [1 x %union.rtunion_def]*, !dbg !3181
  %arrayidx99 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld98, i64 0, i64 0, !dbg !3181
  %rt_int100 = bitcast %union.rtunion_def* %arrayidx99 to i32*, !dbg !3181
  %52 = load i32, i32* %rt_int100, align 8, !dbg !3181
  %call101 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond96, i32 %52), !dbg !3181
  %reg_pressure_excess_cost_change102 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call101, i32 0, i32 17, !dbg !3181
  %53 = load i32, i32* %reg_pressure_excess_cost_change102, align 8, !dbg !3181
  %sub103 = sub nsw i32 %add, %53, !dbg !3182
  %54 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !3183
  %tobool104 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %54, null, !dbg !3183
  br i1 %tobool104, label %cond.true105, label %cond.false107, !dbg !3183

cond.true105:                                     ; preds = %cond.end95
  %55 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !3183
  %base106 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %55, i32 0, i32 0, !dbg !3183
  br label %cond.end108, !dbg !3183

cond.false107:                                    ; preds = %cond.end95
  br label %cond.end108, !dbg !3183

cond.end108:                                      ; preds = %cond.false107, %cond.true105
  %cond109 = phi %struct.VEC_haifa_insn_data_def_base* [ %base106, %cond.true105 ], [ null, %cond.false107 ], !dbg !3183
  %56 = load %struct.rtx_def*, %struct.rtx_def** %tmp2, align 8, !dbg !3183
  %u110 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %56, i32 0, i32 1, !dbg !3183
  %fld111 = bitcast %union.u* %u110 to [1 x %union.rtunion_def]*, !dbg !3183
  %arrayidx112 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld111, i64 0, i64 0, !dbg !3183
  %rt_int113 = bitcast %union.rtunion_def* %arrayidx112 to i32*, !dbg !3183
  %57 = load i32, i32* %rt_int113, align 8, !dbg !3183
  %call114 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond109, i32 %57), !dbg !3183
  %tick115 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call114, i32 0, i32 2, !dbg !3183
  %58 = load i32, i32* %tick115, align 8, !dbg !3183
  %59 = load i32, i32* @clock_var, align 4, !dbg !3184
  %cmp116 = icmp sgt i32 %58, %59, !dbg !3185
  br i1 %cmp116, label %cond.true118, label %cond.false132, !dbg !3183

cond.true118:                                     ; preds = %cond.end108
  %60 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !3186
  %tobool119 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %60, null, !dbg !3186
  br i1 %tobool119, label %cond.true120, label %cond.false122, !dbg !3186

cond.true120:                                     ; preds = %cond.true118
  %61 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !3186
  %base121 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %61, i32 0, i32 0, !dbg !3186
  br label %cond.end123, !dbg !3186

cond.false122:                                    ; preds = %cond.true118
  br label %cond.end123, !dbg !3186

cond.end123:                                      ; preds = %cond.false122, %cond.true120
  %cond124 = phi %struct.VEC_haifa_insn_data_def_base* [ %base121, %cond.true120 ], [ null, %cond.false122 ], !dbg !3186
  %62 = load %struct.rtx_def*, %struct.rtx_def** %tmp2, align 8, !dbg !3186
  %u125 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %62, i32 0, i32 1, !dbg !3186
  %fld126 = bitcast %union.u* %u125 to [1 x %union.rtunion_def]*, !dbg !3186
  %arrayidx127 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld126, i64 0, i64 0, !dbg !3186
  %rt_int128 = bitcast %union.rtunion_def* %arrayidx127 to i32*, !dbg !3186
  %63 = load i32, i32* %rt_int128, align 8, !dbg !3186
  %call129 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond124, i32 %63), !dbg !3186
  %tick130 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call129, i32 0, i32 2, !dbg !3186
  %64 = load i32, i32* %tick130, align 8, !dbg !3186
  %65 = load i32, i32* @clock_var, align 4, !dbg !3187
  %sub131 = sub nsw i32 %64, %65, !dbg !3188
  br label %cond.end133, !dbg !3183

cond.false132:                                    ; preds = %cond.end108
  br label %cond.end133, !dbg !3183

cond.end133:                                      ; preds = %cond.false132, %cond.end123
  %cond134 = phi i32 [ %sub131, %cond.end123 ], [ 0, %cond.false132 ], !dbg !3183
  %sub135 = sub nsw i32 %sub103, %cond134, !dbg !3189
  store i32 %sub135, i32* %diff, align 4, !dbg !3190
  %cmp136 = icmp ne i32 %sub135, 0, !dbg !3191
  br i1 %cmp136, label %if.then138, label %if.end139, !dbg !3192

if.then138:                                       ; preds = %cond.end133
  %66 = load i32, i32* %diff, align 4, !dbg !3193
  store i32 %66, i32* %retval, align 4, !dbg !3194
  br label %return, !dbg !3194

if.end139:                                        ; preds = %cond.end133
  br label %if.end140, !dbg !3195

if.end140:                                        ; preds = %if.end139, %cond.end47
  %67 = load i8, i8* @sched_pressure_p, align 1, !dbg !3196
  %conv141 = zext i8 %67 to i32, !dbg !3196
  %tobool142 = icmp ne i32 %conv141, 0, !dbg !3196
  br i1 %tobool142, label %land.lhs.true143, label %if.end230, !dbg !3198

land.lhs.true143:                                 ; preds = %if.end140
  %68 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !3199
  %tobool144 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %68, null, !dbg !3199
  br i1 %tobool144, label %cond.true145, label %cond.false147, !dbg !3199

cond.true145:                                     ; preds = %land.lhs.true143
  %69 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !3199
  %base146 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %69, i32 0, i32 0, !dbg !3199
  br label %cond.end148, !dbg !3199

cond.false147:                                    ; preds = %land.lhs.true143
  br label %cond.end148, !dbg !3199

cond.end148:                                      ; preds = %cond.false147, %cond.true145
  %cond149 = phi %struct.VEC_haifa_insn_data_def_base* [ %base146, %cond.true145 ], [ null, %cond.false147 ], !dbg !3199
  %70 = load %struct.rtx_def*, %struct.rtx_def** %tmp2, align 8, !dbg !3199
  %u150 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %70, i32 0, i32 1, !dbg !3199
  %fld151 = bitcast %union.u* %u150 to [1 x %union.rtunion_def]*, !dbg !3199
  %arrayidx152 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld151, i64 0, i64 0, !dbg !3199
  %rt_int153 = bitcast %union.rtunion_def* %arrayidx152 to i32*, !dbg !3199
  %71 = load i32, i32* %rt_int153, align 8, !dbg !3199
  %call154 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond149, i32 %71), !dbg !3199
  %tick155 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call154, i32 0, i32 2, !dbg !3199
  %72 = load i32, i32* %tick155, align 8, !dbg !3199
  %73 = load i32, i32* @clock_var, align 4, !dbg !3200
  %cmp156 = icmp sgt i32 %72, %73, !dbg !3201
  br i1 %cmp156, label %if.then172, label %lor.lhs.false, !dbg !3202

lor.lhs.false:                                    ; preds = %cond.end148
  %74 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !3203
  %tobool158 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %74, null, !dbg !3203
  br i1 %tobool158, label %cond.true159, label %cond.false161, !dbg !3203

cond.true159:                                     ; preds = %lor.lhs.false
  %75 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !3203
  %base160 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %75, i32 0, i32 0, !dbg !3203
  br label %cond.end162, !dbg !3203

cond.false161:                                    ; preds = %lor.lhs.false
  br label %cond.end162, !dbg !3203

cond.end162:                                      ; preds = %cond.false161, %cond.true159
  %cond163 = phi %struct.VEC_haifa_insn_data_def_base* [ %base160, %cond.true159 ], [ null, %cond.false161 ], !dbg !3203
  %76 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !3203
  %u164 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %76, i32 0, i32 1, !dbg !3203
  %fld165 = bitcast %union.u* %u164 to [1 x %union.rtunion_def]*, !dbg !3203
  %arrayidx166 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld165, i64 0, i64 0, !dbg !3203
  %rt_int167 = bitcast %union.rtunion_def* %arrayidx166 to i32*, !dbg !3203
  %77 = load i32, i32* %rt_int167, align 8, !dbg !3203
  %call168 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond163, i32 %77), !dbg !3203
  %tick169 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call168, i32 0, i32 2, !dbg !3203
  %78 = load i32, i32* %tick169, align 8, !dbg !3203
  %79 = load i32, i32* @clock_var, align 4, !dbg !3204
  %cmp170 = icmp sgt i32 %78, %79, !dbg !3205
  br i1 %cmp170, label %if.then172, label %if.end230, !dbg !3206

if.then172:                                       ; preds = %cond.end162, %cond.end148
  %80 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !3207
  %tobool173 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %80, null, !dbg !3207
  br i1 %tobool173, label %cond.true174, label %cond.false176, !dbg !3207

cond.true174:                                     ; preds = %if.then172
  %81 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !3207
  %base175 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %81, i32 0, i32 0, !dbg !3207
  br label %cond.end177, !dbg !3207

cond.false176:                                    ; preds = %if.then172
  br label %cond.end177, !dbg !3207

cond.end177:                                      ; preds = %cond.false176, %cond.true174
  %cond178 = phi %struct.VEC_haifa_insn_data_def_base* [ %base175, %cond.true174 ], [ null, %cond.false176 ], !dbg !3207
  %82 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !3207
  %u179 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %82, i32 0, i32 1, !dbg !3207
  %fld180 = bitcast %union.u* %u179 to [1 x %union.rtunion_def]*, !dbg !3207
  %arrayidx181 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld180, i64 0, i64 0, !dbg !3207
  %rt_int182 = bitcast %union.rtunion_def* %arrayidx181 to i32*, !dbg !3207
  %83 = load i32, i32* %rt_int182, align 8, !dbg !3207
  %call183 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond178, i32 %83), !dbg !3207
  %tick184 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call183, i32 0, i32 2, !dbg !3207
  %84 = load i32, i32* %tick184, align 8, !dbg !3207
  %85 = load i32, i32* @clock_var, align 4, !dbg !3210
  %cmp185 = icmp sle i32 %84, %85, !dbg !3211
  br i1 %cmp185, label %if.then187, label %if.else188, !dbg !3212

if.then187:                                       ; preds = %cond.end177
  store i32 -1, i32* %retval, align 4, !dbg !3213
  br label %return, !dbg !3213

if.else188:                                       ; preds = %cond.end177
  %86 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !3214
  %tobool189 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %86, null, !dbg !3214
  br i1 %tobool189, label %cond.true190, label %cond.false192, !dbg !3214

cond.true190:                                     ; preds = %if.else188
  %87 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !3214
  %base191 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %87, i32 0, i32 0, !dbg !3214
  br label %cond.end193, !dbg !3214

cond.false192:                                    ; preds = %if.else188
  br label %cond.end193, !dbg !3214

cond.end193:                                      ; preds = %cond.false192, %cond.true190
  %cond194 = phi %struct.VEC_haifa_insn_data_def_base* [ %base191, %cond.true190 ], [ null, %cond.false192 ], !dbg !3214
  %88 = load %struct.rtx_def*, %struct.rtx_def** %tmp2, align 8, !dbg !3214
  %u195 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %88, i32 0, i32 1, !dbg !3214
  %fld196 = bitcast %union.u* %u195 to [1 x %union.rtunion_def]*, !dbg !3214
  %arrayidx197 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld196, i64 0, i64 0, !dbg !3214
  %rt_int198 = bitcast %union.rtunion_def* %arrayidx197 to i32*, !dbg !3214
  %89 = load i32, i32* %rt_int198, align 8, !dbg !3214
  %call199 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond194, i32 %89), !dbg !3214
  %tick200 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call199, i32 0, i32 2, !dbg !3214
  %90 = load i32, i32* %tick200, align 8, !dbg !3214
  %91 = load i32, i32* @clock_var, align 4, !dbg !3216
  %cmp201 = icmp sle i32 %90, %91, !dbg !3217
  br i1 %cmp201, label %if.then203, label %if.else204, !dbg !3218

if.then203:                                       ; preds = %cond.end193
  store i32 1, i32* %retval, align 4, !dbg !3219
  br label %return, !dbg !3219

if.else204:                                       ; preds = %cond.end193
  %92 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !3220
  %tobool205 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %92, null, !dbg !3220
  br i1 %tobool205, label %cond.true206, label %cond.false208, !dbg !3220

cond.true206:                                     ; preds = %if.else204
  %93 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !3220
  %base207 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %93, i32 0, i32 0, !dbg !3220
  br label %cond.end209, !dbg !3220

cond.false208:                                    ; preds = %if.else204
  br label %cond.end209, !dbg !3220

cond.end209:                                      ; preds = %cond.false208, %cond.true206
  %cond210 = phi %struct.VEC_haifa_insn_data_def_base* [ %base207, %cond.true206 ], [ null, %cond.false208 ], !dbg !3220
  %94 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !3220
  %u211 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %94, i32 0, i32 1, !dbg !3220
  %fld212 = bitcast %union.u* %u211 to [1 x %union.rtunion_def]*, !dbg !3220
  %arrayidx213 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld212, i64 0, i64 0, !dbg !3220
  %rt_int214 = bitcast %union.rtunion_def* %arrayidx213 to i32*, !dbg !3220
  %95 = load i32, i32* %rt_int214, align 8, !dbg !3220
  %call215 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond210, i32 %95), !dbg !3220
  %tick216 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call215, i32 0, i32 2, !dbg !3220
  %96 = load i32, i32* %tick216, align 8, !dbg !3220
  %97 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !3221
  %tobool217 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %97, null, !dbg !3221
  br i1 %tobool217, label %cond.true218, label %cond.false220, !dbg !3221

cond.true218:                                     ; preds = %cond.end209
  %98 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !3221
  %base219 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %98, i32 0, i32 0, !dbg !3221
  br label %cond.end221, !dbg !3221

cond.false220:                                    ; preds = %cond.end209
  br label %cond.end221, !dbg !3221

cond.end221:                                      ; preds = %cond.false220, %cond.true218
  %cond222 = phi %struct.VEC_haifa_insn_data_def_base* [ %base219, %cond.true218 ], [ null, %cond.false220 ], !dbg !3221
  %99 = load %struct.rtx_def*, %struct.rtx_def** %tmp2, align 8, !dbg !3221
  %u223 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %99, i32 0, i32 1, !dbg !3221
  %fld224 = bitcast %union.u* %u223 to [1 x %union.rtunion_def]*, !dbg !3221
  %arrayidx225 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld224, i64 0, i64 0, !dbg !3221
  %rt_int226 = bitcast %union.rtunion_def* %arrayidx225 to i32*, !dbg !3221
  %100 = load i32, i32* %rt_int226, align 8, !dbg !3221
  %call227 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond222, i32 %100), !dbg !3221
  %tick228 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call227, i32 0, i32 2, !dbg !3221
  %101 = load i32, i32* %tick228, align 8, !dbg !3221
  %sub229 = sub nsw i32 %96, %101, !dbg !3222
  store i32 %sub229, i32* %retval, align 4, !dbg !3223
  br label %return, !dbg !3223

if.end230:                                        ; preds = %cond.end162, %if.end140
  %102 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !3224
  %tobool231 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %102, null, !dbg !3224
  br i1 %tobool231, label %cond.true232, label %cond.false234, !dbg !3224

cond.true232:                                     ; preds = %if.end230
  %103 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !3224
  %base233 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %103, i32 0, i32 0, !dbg !3224
  br label %cond.end235, !dbg !3224

cond.false234:                                    ; preds = %if.end230
  br label %cond.end235, !dbg !3224

cond.end235:                                      ; preds = %cond.false234, %cond.true232
  %cond236 = phi %struct.VEC_haifa_insn_data_def_base* [ %base233, %cond.true232 ], [ null, %cond.false234 ], !dbg !3224
  %104 = load %struct.rtx_def*, %struct.rtx_def** %tmp2, align 8, !dbg !3224
  %u237 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %104, i32 0, i32 1, !dbg !3224
  %fld238 = bitcast %union.u* %u237 to [1 x %union.rtunion_def]*, !dbg !3224
  %arrayidx239 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld238, i64 0, i64 0, !dbg !3224
  %rt_int240 = bitcast %union.rtunion_def* %arrayidx239 to i32*, !dbg !3224
  %105 = load i32, i32* %rt_int240, align 8, !dbg !3224
  %call241 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond236, i32 %105), !dbg !3224
  %priority = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call241, i32 0, i32 1, !dbg !3224
  %106 = load i32, i32* %priority, align 4, !dbg !3224
  %107 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !3225
  %tobool242 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %107, null, !dbg !3225
  br i1 %tobool242, label %cond.true243, label %cond.false245, !dbg !3225

cond.true243:                                     ; preds = %cond.end235
  %108 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !3225
  %base244 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %108, i32 0, i32 0, !dbg !3225
  br label %cond.end246, !dbg !3225

cond.false245:                                    ; preds = %cond.end235
  br label %cond.end246, !dbg !3225

cond.end246:                                      ; preds = %cond.false245, %cond.true243
  %cond247 = phi %struct.VEC_haifa_insn_data_def_base* [ %base244, %cond.true243 ], [ null, %cond.false245 ], !dbg !3225
  %109 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !3225
  %u248 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %109, i32 0, i32 1, !dbg !3225
  %fld249 = bitcast %union.u* %u248 to [1 x %union.rtunion_def]*, !dbg !3225
  %arrayidx250 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld249, i64 0, i64 0, !dbg !3225
  %rt_int251 = bitcast %union.rtunion_def* %arrayidx250 to i32*, !dbg !3225
  %110 = load i32, i32* %rt_int251, align 8, !dbg !3225
  %call252 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond247, i32 %110), !dbg !3225
  %priority253 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call252, i32 0, i32 1, !dbg !3225
  %111 = load i32, i32* %priority253, align 4, !dbg !3225
  %sub254 = sub nsw i32 %106, %111, !dbg !3226
  store i32 %sub254, i32* %priority_val, align 4, !dbg !3227
  %112 = load i32, i32* @flag_sched_critical_path_heuristic, align 4, !dbg !3228
  %tobool255 = icmp ne i32 %112, 0, !dbg !3228
  br i1 %tobool255, label %land.lhs.true256, label %if.end259, !dbg !3230

land.lhs.true256:                                 ; preds = %cond.end246
  %113 = load i32, i32* %priority_val, align 4, !dbg !3231
  %tobool257 = icmp ne i32 %113, 0, !dbg !3231
  br i1 %tobool257, label %if.then258, label %if.end259, !dbg !3232

if.then258:                                       ; preds = %land.lhs.true256
  %114 = load i32, i32* %priority_val, align 4, !dbg !3233
  store i32 %114, i32* %retval, align 4, !dbg !3234
  br label %return, !dbg !3234

if.end259:                                        ; preds = %land.lhs.true256, %cond.end246
  %115 = load i32, i32* @flag_sched_spec_insn_heuristic, align 4, !dbg !3235
  %tobool260 = icmp ne i32 %115, 0, !dbg !3235
  br i1 %tobool260, label %land.lhs.true261, label %if.end306, !dbg !3237

land.lhs.true261:                                 ; preds = %if.end259
  %116 = load %struct.spec_info_def*, %struct.spec_info_def** @spec_info, align 8, !dbg !3238
  %tobool262 = icmp ne %struct.spec_info_def* %116, null, !dbg !3238
  br i1 %tobool262, label %if.then263, label %if.end306, !dbg !3239

if.then263:                                       ; preds = %land.lhs.true261
  call void @llvm.dbg.declare(metadata i32* %ds1, metadata !3240, metadata !DIExpression()), !dbg !3242
  call void @llvm.dbg.declare(metadata i32* %ds2, metadata !3243, metadata !DIExpression()), !dbg !3244
  call void @llvm.dbg.declare(metadata i32* %dw1, metadata !3245, metadata !DIExpression()), !dbg !3246
  call void @llvm.dbg.declare(metadata i32* %dw2, metadata !3247, metadata !DIExpression()), !dbg !3248
  call void @llvm.dbg.declare(metadata i32* %dw, metadata !3249, metadata !DIExpression()), !dbg !3250
  %117 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !3251
  %tobool264 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %117, null, !dbg !3251
  br i1 %tobool264, label %cond.true265, label %cond.false267, !dbg !3251

cond.true265:                                     ; preds = %if.then263
  %118 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !3251
  %base266 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %118, i32 0, i32 0, !dbg !3251
  br label %cond.end268, !dbg !3251

cond.false267:                                    ; preds = %if.then263
  br label %cond.end268, !dbg !3251

cond.end268:                                      ; preds = %cond.false267, %cond.true265
  %cond269 = phi %struct.VEC_haifa_insn_data_def_base* [ %base266, %cond.true265 ], [ null, %cond.false267 ], !dbg !3251
  %119 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !3251
  %u270 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %119, i32 0, i32 1, !dbg !3251
  %fld271 = bitcast %union.u* %u270 to [1 x %union.rtunion_def]*, !dbg !3251
  %arrayidx272 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld271, i64 0, i64 0, !dbg !3251
  %rt_int273 = bitcast %union.rtunion_def* %arrayidx272 to i32*, !dbg !3251
  %120 = load i32, i32* %rt_int273, align 8, !dbg !3251
  %call274 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond269, i32 %120), !dbg !3251
  %todo_spec = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call274, i32 0, i32 8, !dbg !3251
  %121 = load i32, i32* %todo_spec, align 8, !dbg !3251
  %and = and i32 %121, 16777215, !dbg !3252
  store i32 %and, i32* %ds1, align 4, !dbg !3253
  %122 = load i32, i32* %ds1, align 4, !dbg !3254
  %tobool275 = icmp ne i32 %122, 0, !dbg !3254
  br i1 %tobool275, label %if.then276, label %if.else278, !dbg !3256

if.then276:                                       ; preds = %cond.end268
  %123 = load i32, i32* %ds1, align 4, !dbg !3257
  %call277 = call i32 @ds_weak(i32 %123), !dbg !3258
  store i32 %call277, i32* %dw1, align 4, !dbg !3259
  br label %if.end279, !dbg !3260

if.else278:                                       ; preds = %cond.end268
  store i32 63, i32* %dw1, align 4, !dbg !3261
  br label %if.end279

if.end279:                                        ; preds = %if.else278, %if.then276
  %124 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !3262
  %tobool280 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %124, null, !dbg !3262
  br i1 %tobool280, label %cond.true281, label %cond.false283, !dbg !3262

cond.true281:                                     ; preds = %if.end279
  %125 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !3262
  %base282 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %125, i32 0, i32 0, !dbg !3262
  br label %cond.end284, !dbg !3262

cond.false283:                                    ; preds = %if.end279
  br label %cond.end284, !dbg !3262

cond.end284:                                      ; preds = %cond.false283, %cond.true281
  %cond285 = phi %struct.VEC_haifa_insn_data_def_base* [ %base282, %cond.true281 ], [ null, %cond.false283 ], !dbg !3262
  %126 = load %struct.rtx_def*, %struct.rtx_def** %tmp2, align 8, !dbg !3262
  %u286 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %126, i32 0, i32 1, !dbg !3262
  %fld287 = bitcast %union.u* %u286 to [1 x %union.rtunion_def]*, !dbg !3262
  %arrayidx288 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld287, i64 0, i64 0, !dbg !3262
  %rt_int289 = bitcast %union.rtunion_def* %arrayidx288 to i32*, !dbg !3262
  %127 = load i32, i32* %rt_int289, align 8, !dbg !3262
  %call290 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond285, i32 %127), !dbg !3262
  %todo_spec291 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call290, i32 0, i32 8, !dbg !3262
  %128 = load i32, i32* %todo_spec291, align 8, !dbg !3262
  %and292 = and i32 %128, 16777215, !dbg !3263
  store i32 %and292, i32* %ds2, align 4, !dbg !3264
  %129 = load i32, i32* %ds2, align 4, !dbg !3265
  %tobool293 = icmp ne i32 %129, 0, !dbg !3265
  br i1 %tobool293, label %if.then294, label %if.else296, !dbg !3267

if.then294:                                       ; preds = %cond.end284
  %130 = load i32, i32* %ds2, align 4, !dbg !3268
  %call295 = call i32 @ds_weak(i32 %130), !dbg !3269
  store i32 %call295, i32* %dw2, align 4, !dbg !3270
  br label %if.end297, !dbg !3271

if.else296:                                       ; preds = %cond.end284
  store i32 63, i32* %dw2, align 4, !dbg !3272
  br label %if.end297

if.end297:                                        ; preds = %if.else296, %if.then294
  %131 = load i32, i32* %dw2, align 4, !dbg !3273
  %132 = load i32, i32* %dw1, align 4, !dbg !3274
  %sub298 = sub nsw i32 %131, %132, !dbg !3275
  store i32 %sub298, i32* %dw, align 4, !dbg !3276
  %133 = load i32, i32* %dw, align 4, !dbg !3277
  %cmp299 = icmp sgt i32 %133, 7, !dbg !3279
  br i1 %cmp299, label %if.then304, label %lor.lhs.false301, !dbg !3280

lor.lhs.false301:                                 ; preds = %if.end297
  %134 = load i32, i32* %dw, align 4, !dbg !3281
  %cmp302 = icmp slt i32 %134, -7, !dbg !3282
  br i1 %cmp302, label %if.then304, label %if.end305, !dbg !3283

if.then304:                                       ; preds = %lor.lhs.false301, %if.end297
  %135 = load i32, i32* %dw, align 4, !dbg !3284
  store i32 %135, i32* %retval, align 4, !dbg !3285
  br label %return, !dbg !3285

if.end305:                                        ; preds = %lor.lhs.false301
  br label %if.end306, !dbg !3286

if.end306:                                        ; preds = %if.end305, %land.lhs.true261, %if.end259
  %136 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !3287
  %rank = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %136, i32 0, i32 4, !dbg !3288
  %137 = load i32 (%struct.rtx_def*, %struct.rtx_def*)*, i32 (%struct.rtx_def*, %struct.rtx_def*)** %rank, align 8, !dbg !3288
  %138 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !3289
  %139 = load %struct.rtx_def*, %struct.rtx_def** %tmp2, align 8, !dbg !3290
  %call307 = call i32 %137(%struct.rtx_def* %138, %struct.rtx_def* %139), !dbg !3291
  store i32 %call307, i32* %info_val, align 4, !dbg !3292
  %140 = load i32, i32* @flag_sched_rank_heuristic, align 4, !dbg !3293
  %tobool308 = icmp ne i32 %140, 0, !dbg !3293
  br i1 %tobool308, label %land.lhs.true309, label %if.end312, !dbg !3295

land.lhs.true309:                                 ; preds = %if.end306
  %141 = load i32, i32* %info_val, align 4, !dbg !3296
  %tobool310 = icmp ne i32 %141, 0, !dbg !3296
  br i1 %tobool310, label %if.then311, label %if.end312, !dbg !3297

if.then311:                                       ; preds = %land.lhs.true309
  %142 = load i32, i32* %info_val, align 4, !dbg !3298
  store i32 %142, i32* %retval, align 4, !dbg !3299
  br label %return, !dbg !3299

if.end312:                                        ; preds = %land.lhs.true309, %if.end306
  %143 = load i32, i32* @flag_sched_last_insn_heuristic, align 4, !dbg !3300
  %tobool313 = icmp ne i32 %143, 0, !dbg !3300
  br i1 %tobool313, label %if.then314, label %if.end354, !dbg !3302

if.then314:                                       ; preds = %if.end312
  %144 = load %struct.rtx_def*, %struct.rtx_def** @last_scheduled_insn, align 8, !dbg !3303
  store %struct.rtx_def* %144, %struct.rtx_def** %last, align 8, !dbg !3305
  %145 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !3306
  %146 = bitcast %struct.rtx_def* %145 to i32*, !dbg !3306
  %bf.load315 = load i32, i32* %146, align 8, !dbg !3306
  %bf.clear316 = and i32 %bf.load315, 65535, !dbg !3306
  %cmp317 = icmp eq i32 %bf.clear316, 7, !dbg !3306
  br i1 %cmp317, label %land.lhs.true319, label %if.end353, !dbg !3308

land.lhs.true319:                                 ; preds = %if.then314
  %147 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !3309
  %148 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !3310
  %prev_head = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %148, i32 0, i32 8, !dbg !3311
  %149 = load %struct.rtx_def*, %struct.rtx_def** %prev_head, align 8, !dbg !3311
  %cmp320 = icmp ne %struct.rtx_def* %147, %149, !dbg !3312
  br i1 %cmp320, label %if.then322, label %if.end353, !dbg !3313

if.then322:                                       ; preds = %land.lhs.true319
  br label %do.body, !dbg !3314

do.body:                                          ; preds = %land.end, %if.then322
  %150 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !3315
  %u323 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %150, i32 0, i32 1, !dbg !3315
  %fld324 = bitcast %union.u* %u323 to [1 x %union.rtunion_def]*, !dbg !3315
  %arrayidx325 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld324, i64 0, i64 1, !dbg !3315
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx325 to %struct.rtx_def**, !dbg !3315
  %151 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !3315
  store %struct.rtx_def* %151, %struct.rtx_def** %last, align 8, !dbg !3316
  br label %do.cond, !dbg !3317

do.cond:                                          ; preds = %do.body
  %152 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !3318
  %153 = bitcast %struct.rtx_def* %152 to i32*, !dbg !3318
  %bf.load326 = load i32, i32* %153, align 8, !dbg !3318
  %bf.clear327 = and i32 %bf.load326, 65535, !dbg !3318
  %cmp328 = icmp eq i32 %bf.clear327, 8, !dbg !3318
  br i1 %cmp328, label %land.lhs.true345, label %lor.lhs.false330, !dbg !3318

lor.lhs.false330:                                 ; preds = %do.cond
  %154 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !3318
  %155 = bitcast %struct.rtx_def* %154 to i32*, !dbg !3318
  %bf.load331 = load i32, i32* %155, align 8, !dbg !3318
  %bf.clear332 = and i32 %bf.load331, 65535, !dbg !3318
  %cmp333 = icmp eq i32 %bf.clear332, 7, !dbg !3318
  br i1 %cmp333, label %land.lhs.true345, label %lor.lhs.false335, !dbg !3318

lor.lhs.false335:                                 ; preds = %lor.lhs.false330
  %156 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !3318
  %157 = bitcast %struct.rtx_def* %156 to i32*, !dbg !3318
  %bf.load336 = load i32, i32* %157, align 8, !dbg !3318
  %bf.clear337 = and i32 %bf.load336, 65535, !dbg !3318
  %cmp338 = icmp eq i32 %bf.clear337, 9, !dbg !3318
  br i1 %cmp338, label %land.lhs.true345, label %lor.lhs.false340, !dbg !3318

lor.lhs.false340:                                 ; preds = %lor.lhs.false335
  %158 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !3318
  %159 = bitcast %struct.rtx_def* %158 to i32*, !dbg !3318
  %bf.load341 = load i32, i32* %159, align 8, !dbg !3318
  %bf.clear342 = and i32 %bf.load341, 65535, !dbg !3318
  %cmp343 = icmp eq i32 %bf.clear342, 10, !dbg !3318
  br i1 %cmp343, label %land.lhs.true345, label %land.rhs, !dbg !3318

land.lhs.true345:                                 ; preds = %lor.lhs.false340, %lor.lhs.false335, %lor.lhs.false330, %do.cond
  %160 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !3318
  %161 = bitcast %struct.rtx_def* %160 to i32*, !dbg !3318
  %bf.load346 = load i32, i32* %161, align 8, !dbg !3318
  %bf.clear347 = and i32 %bf.load346, 65535, !dbg !3318
  %cmp348 = icmp eq i32 %bf.clear347, 7, !dbg !3318
  br i1 %cmp348, label %land.rhs, label %land.end, !dbg !3319

land.rhs:                                         ; preds = %land.lhs.true345, %lor.lhs.false340
  %162 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !3320
  %163 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !3321
  %prev_head350 = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %163, i32 0, i32 8, !dbg !3322
  %164 = load %struct.rtx_def*, %struct.rtx_def** %prev_head350, align 8, !dbg !3322
  %cmp351 = icmp ne %struct.rtx_def* %162, %164, !dbg !3323
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true345
  %165 = phi i1 [ false, %land.lhs.true345 ], [ %cmp351, %land.rhs ], !dbg !3324
  br i1 %165, label %do.body, label %do.end, !dbg !3317, !llvm.loop !3325

do.end:                                           ; preds = %land.end
  br label %if.end353, !dbg !3317

if.end353:                                        ; preds = %do.end, %land.lhs.true319, %if.then314
  br label %if.end354, !dbg !3327

if.end354:                                        ; preds = %if.end353, %if.end312
  %166 = load i32, i32* @flag_sched_last_insn_heuristic, align 4, !dbg !3328
  %tobool355 = icmp ne i32 %166, 0, !dbg !3328
  br i1 %tobool355, label %land.lhs.true356, label %if.end417, !dbg !3330

land.lhs.true356:                                 ; preds = %if.end354
  %167 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !3331
  %168 = bitcast %struct.rtx_def* %167 to i32*, !dbg !3331
  %bf.load357 = load i32, i32* %168, align 8, !dbg !3331
  %bf.clear358 = and i32 %bf.load357, 65535, !dbg !3331
  %cmp359 = icmp eq i32 %bf.clear358, 8, !dbg !3331
  br i1 %cmp359, label %land.lhs.true376, label %lor.lhs.false361, !dbg !3331

lor.lhs.false361:                                 ; preds = %land.lhs.true356
  %169 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !3331
  %170 = bitcast %struct.rtx_def* %169 to i32*, !dbg !3331
  %bf.load362 = load i32, i32* %170, align 8, !dbg !3331
  %bf.clear363 = and i32 %bf.load362, 65535, !dbg !3331
  %cmp364 = icmp eq i32 %bf.clear363, 7, !dbg !3331
  br i1 %cmp364, label %land.lhs.true376, label %lor.lhs.false366, !dbg !3331

lor.lhs.false366:                                 ; preds = %lor.lhs.false361
  %171 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !3331
  %172 = bitcast %struct.rtx_def* %171 to i32*, !dbg !3331
  %bf.load367 = load i32, i32* %172, align 8, !dbg !3331
  %bf.clear368 = and i32 %bf.load367, 65535, !dbg !3331
  %cmp369 = icmp eq i32 %bf.clear368, 9, !dbg !3331
  br i1 %cmp369, label %land.lhs.true376, label %lor.lhs.false371, !dbg !3331

lor.lhs.false371:                                 ; preds = %lor.lhs.false366
  %173 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !3331
  %174 = bitcast %struct.rtx_def* %173 to i32*, !dbg !3331
  %bf.load372 = load i32, i32* %174, align 8, !dbg !3331
  %bf.clear373 = and i32 %bf.load372, 65535, !dbg !3331
  %cmp374 = icmp eq i32 %bf.clear373, 10, !dbg !3331
  br i1 %cmp374, label %land.lhs.true376, label %if.end417, !dbg !3331

land.lhs.true376:                                 ; preds = %lor.lhs.false371, %lor.lhs.false366, %lor.lhs.false361, %land.lhs.true356
  %175 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !3331
  %176 = bitcast %struct.rtx_def* %175 to i32*, !dbg !3331
  %bf.load377 = load i32, i32* %176, align 8, !dbg !3331
  %bf.clear378 = and i32 %bf.load377, 65535, !dbg !3331
  %cmp379 = icmp eq i32 %bf.clear378, 7, !dbg !3331
  br i1 %cmp379, label %if.end417, label %if.then381, !dbg !3332

if.then381:                                       ; preds = %land.lhs.true376
  call void @llvm.dbg.declare(metadata %struct._dep** %dep1, metadata !3333, metadata !DIExpression()), !dbg !3335
  call void @llvm.dbg.declare(metadata %struct._dep** %dep2, metadata !3336, metadata !DIExpression()), !dbg !3337
  %177 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !3338
  %178 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !3339
  %call382 = call %struct._dep* @sd_find_dep_between(%struct.rtx_def* %177, %struct.rtx_def* %178, i8 zeroext 1), !dbg !3340
  store %struct._dep* %call382, %struct._dep** %dep1, align 8, !dbg !3341
  %179 = load %struct._dep*, %struct._dep** %dep1, align 8, !dbg !3342
  %cmp383 = icmp eq %struct._dep* %179, null, !dbg !3344
  br i1 %cmp383, label %if.then389, label %lor.lhs.false385, !dbg !3345

lor.lhs.false385:                                 ; preds = %if.then381
  %180 = load %struct._dep*, %struct._dep** %dep1, align 8, !dbg !3346
  %call386 = call i32 @dep_cost(%struct._dep* %180), !dbg !3347
  %cmp387 = icmp eq i32 %call386, 1, !dbg !3348
  br i1 %cmp387, label %if.then389, label %if.else390, !dbg !3349

if.then389:                                       ; preds = %lor.lhs.false385, %if.then381
  store i32 3, i32* %tmp_class, align 4, !dbg !3350
  br label %if.end396, !dbg !3351

if.else390:                                       ; preds = %lor.lhs.false385
  %181 = load %struct._dep*, %struct._dep** %dep1, align 8, !dbg !3352
  %type = getelementptr inbounds %struct._dep, %struct._dep* %181, i32 0, i32 2, !dbg !3352
  %182 = load i32, i32* %type, align 8, !dbg !3352
  %cmp391 = icmp eq i32 %182, 0, !dbg !3354
  br i1 %cmp391, label %if.then393, label %if.else394, !dbg !3355

if.then393:                                       ; preds = %if.else390
  store i32 1, i32* %tmp_class, align 4, !dbg !3356
  br label %if.end395, !dbg !3357

if.else394:                                       ; preds = %if.else390
  store i32 2, i32* %tmp_class, align 4, !dbg !3358
  br label %if.end395

if.end395:                                        ; preds = %if.else394, %if.then393
  br label %if.end396

if.end396:                                        ; preds = %if.end395, %if.then389
  %183 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !3359
  %184 = load %struct.rtx_def*, %struct.rtx_def** %tmp2, align 8, !dbg !3360
  %call397 = call %struct._dep* @sd_find_dep_between(%struct.rtx_def* %183, %struct.rtx_def* %184, i8 zeroext 1), !dbg !3361
  store %struct._dep* %call397, %struct._dep** %dep2, align 8, !dbg !3362
  %185 = load %struct._dep*, %struct._dep** %dep2, align 8, !dbg !3363
  %cmp398 = icmp eq %struct._dep* %185, null, !dbg !3365
  br i1 %cmp398, label %if.then404, label %lor.lhs.false400, !dbg !3366

lor.lhs.false400:                                 ; preds = %if.end396
  %186 = load %struct._dep*, %struct._dep** %dep2, align 8, !dbg !3367
  %call401 = call i32 @dep_cost(%struct._dep* %186), !dbg !3368
  %cmp402 = icmp eq i32 %call401, 1, !dbg !3369
  br i1 %cmp402, label %if.then404, label %if.else405, !dbg !3370

if.then404:                                       ; preds = %lor.lhs.false400, %if.end396
  store i32 3, i32* %tmp2_class, align 4, !dbg !3371
  br label %if.end412, !dbg !3372

if.else405:                                       ; preds = %lor.lhs.false400
  %187 = load %struct._dep*, %struct._dep** %dep2, align 8, !dbg !3373
  %type406 = getelementptr inbounds %struct._dep, %struct._dep* %187, i32 0, i32 2, !dbg !3373
  %188 = load i32, i32* %type406, align 8, !dbg !3373
  %cmp407 = icmp eq i32 %188, 0, !dbg !3375
  br i1 %cmp407, label %if.then409, label %if.else410, !dbg !3376

if.then409:                                       ; preds = %if.else405
  store i32 1, i32* %tmp2_class, align 4, !dbg !3377
  br label %if.end411, !dbg !3378

if.else410:                                       ; preds = %if.else405
  store i32 2, i32* %tmp2_class, align 4, !dbg !3379
  br label %if.end411

if.end411:                                        ; preds = %if.else410, %if.then409
  br label %if.end412

if.end412:                                        ; preds = %if.end411, %if.then404
  %189 = load i32, i32* %tmp2_class, align 4, !dbg !3380
  %190 = load i32, i32* %tmp_class, align 4, !dbg !3382
  %sub413 = sub nsw i32 %189, %190, !dbg !3383
  store i32 %sub413, i32* %val, align 4, !dbg !3384
  %tobool414 = icmp ne i32 %sub413, 0, !dbg !3384
  br i1 %tobool414, label %if.then415, label %if.end416, !dbg !3385

if.then415:                                       ; preds = %if.end412
  %191 = load i32, i32* %val, align 4, !dbg !3386
  store i32 %191, i32* %retval, align 4, !dbg !3387
  br label %return, !dbg !3387

if.end416:                                        ; preds = %if.end412
  br label %if.end417, !dbg !3388

if.end417:                                        ; preds = %if.end416, %land.lhs.true376, %lor.lhs.false371, %if.end354
  %192 = load %struct.rtx_def*, %struct.rtx_def** %tmp2, align 8, !dbg !3389
  %call418 = call i32 @dep_list_size(%struct.rtx_def* %192), !dbg !3390
  %193 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !3391
  %call419 = call i32 @dep_list_size(%struct.rtx_def* %193), !dbg !3392
  %sub420 = sub nsw i32 %call418, %call419, !dbg !3393
  store i32 %sub420, i32* %val, align 4, !dbg !3394
  %194 = load i32, i32* @flag_sched_dep_count_heuristic, align 4, !dbg !3395
  %tobool421 = icmp ne i32 %194, 0, !dbg !3395
  br i1 %tobool421, label %land.lhs.true422, label %if.end426, !dbg !3397

land.lhs.true422:                                 ; preds = %if.end417
  %195 = load i32, i32* %val, align 4, !dbg !3398
  %cmp423 = icmp ne i32 %195, 0, !dbg !3399
  br i1 %cmp423, label %if.then425, label %if.end426, !dbg !3400

if.then425:                                       ; preds = %land.lhs.true422
  %196 = load i32, i32* %val, align 4, !dbg !3401
  store i32 %196, i32* %retval, align 4, !dbg !3402
  br label %return, !dbg !3402

if.end426:                                        ; preds = %land.lhs.true422, %if.end417
  %197 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !3403
  %tobool427 = icmp ne %struct.VEC_int_heap* %197, null, !dbg !3403
  br i1 %tobool427, label %cond.true428, label %cond.false430, !dbg !3403

cond.true428:                                     ; preds = %if.end426
  %198 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !3403
  %base429 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %198, i32 0, i32 0, !dbg !3403
  br label %cond.end431, !dbg !3403

cond.false430:                                    ; preds = %if.end426
  br label %cond.end431, !dbg !3403

cond.end431:                                      ; preds = %cond.false430, %cond.true428
  %cond432 = phi %struct.VEC_int_base* [ %base429, %cond.true428 ], [ null, %cond.false430 ], !dbg !3403
  %199 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !3403
  %u433 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %199, i32 0, i32 1, !dbg !3403
  %fld434 = bitcast %union.u* %u433 to [1 x %union.rtunion_def]*, !dbg !3403
  %arrayidx435 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld434, i64 0, i64 0, !dbg !3403
  %rt_int436 = bitcast %union.rtunion_def* %arrayidx435 to i32*, !dbg !3403
  %200 = load i32, i32* %rt_int436, align 8, !dbg !3403
  %call437 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond432, i32 %200), !dbg !3403
  %201 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !3404
  %tobool438 = icmp ne %struct.VEC_int_heap* %201, null, !dbg !3404
  br i1 %tobool438, label %cond.true439, label %cond.false441, !dbg !3404

cond.true439:                                     ; preds = %cond.end431
  %202 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !3404
  %base440 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %202, i32 0, i32 0, !dbg !3404
  br label %cond.end442, !dbg !3404

cond.false441:                                    ; preds = %cond.end431
  br label %cond.end442, !dbg !3404

cond.end442:                                      ; preds = %cond.false441, %cond.true439
  %cond443 = phi %struct.VEC_int_base* [ %base440, %cond.true439 ], [ null, %cond.false441 ], !dbg !3404
  %203 = load %struct.rtx_def*, %struct.rtx_def** %tmp2, align 8, !dbg !3404
  %u444 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %203, i32 0, i32 1, !dbg !3404
  %fld445 = bitcast %union.u* %u444 to [1 x %union.rtunion_def]*, !dbg !3404
  %arrayidx446 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld445, i64 0, i64 0, !dbg !3404
  %rt_int447 = bitcast %union.rtunion_def* %arrayidx446 to i32*, !dbg !3404
  %204 = load i32, i32* %rt_int447, align 8, !dbg !3404
  %call448 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond443, i32 %204), !dbg !3404
  %sub449 = sub nsw i32 %call437, %call448, !dbg !3405
  store i32 %sub449, i32* %retval, align 4, !dbg !3406
  br label %return, !dbg !3406

return:                                           ; preds = %cond.end442, %if.then425, %if.then415, %if.then311, %if.then304, %if.then258, %cond.end221, %if.then203, %if.then187, %if.then138, %if.then19, %if.then8, %if.then4
  %205 = load i32, i32* %retval, align 4, !dbg !3407
  ret i32 %205, !dbg !3407
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @advance_state(i8* %state) #0 !dbg !3408 {
entry:
  %state.addr = alloca i8*, align 8
  store i8* %state, i8** %state.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %state.addr, metadata !3411, metadata !DIExpression()), !dbg !3412
  %0 = load void ()*, void ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 15), align 8, !dbg !3413
  %tobool = icmp ne void ()* %0, null, !dbg !3415
  br i1 %tobool, label %if.then, label %if.end, !dbg !3416

if.then:                                          ; preds = %entry
  %1 = load void ()*, void ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 15), align 8, !dbg !3417
  call void %1(), !dbg !3418
  br label %if.end, !dbg !3418

if.end:                                           ; preds = %if.then, %entry
  %2 = load %struct.rtx_def* ()*, %struct.rtx_def* ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 12), align 8, !dbg !3419
  %tobool1 = icmp ne %struct.rtx_def* ()* %2, null, !dbg !3421
  br i1 %tobool1, label %if.then2, label %if.end4, !dbg !3422

if.then2:                                         ; preds = %if.end
  %3 = load i8*, i8** %state.addr, align 8, !dbg !3423
  %4 = load %struct.rtx_def* ()*, %struct.rtx_def* ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 12), align 8, !dbg !3424
  %call = call %struct.rtx_def* %4(), !dbg !3425
  %call3 = call i32 @state_transition(i8* %3, %struct.rtx_def* %call), !dbg !3426
  br label %if.end4, !dbg !3426

if.end4:                                          ; preds = %if.then2, %if.end
  %5 = load i8*, i8** %state.addr, align 8, !dbg !3427
  %call5 = call i32 @state_transition(i8* %5, %struct.rtx_def* null), !dbg !3428
  %6 = load %struct.rtx_def* ()*, %struct.rtx_def* ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 14), align 8, !dbg !3429
  %tobool6 = icmp ne %struct.rtx_def* ()* %6, null, !dbg !3431
  br i1 %tobool6, label %if.then7, label %if.end10, !dbg !3432

if.then7:                                         ; preds = %if.end4
  %7 = load i8*, i8** %state.addr, align 8, !dbg !3433
  %8 = load %struct.rtx_def* ()*, %struct.rtx_def* ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 14), align 8, !dbg !3434
  %call8 = call %struct.rtx_def* %8(), !dbg !3435
  %call9 = call i32 @state_transition(i8* %7, %struct.rtx_def* %call8), !dbg !3436
  br label %if.end10, !dbg !3436

if.end10:                                         ; preds = %if.then7, %if.end4
  %9 = load void ()*, void ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 16), align 8, !dbg !3437
  %tobool11 = icmp ne void ()* %9, null, !dbg !3439
  br i1 %tobool11, label %if.then12, label %if.end13, !dbg !3440

if.then12:                                        ; preds = %if.end10
  %10 = load void ()*, void ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 16), align 8, !dbg !3441
  call void %10(), !dbg !3442
  br label %if.end13, !dbg !3442

if.end13:                                         ; preds = %if.then12, %if.end10
  ret void, !dbg !3443
}

declare dso_local i32 @state_transition(i8*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @sched_setup_bb_reg_pressure_info(%struct.basic_block_def* %bb, %struct.rtx_def* %after) #0 !dbg !3444 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %after.addr = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !3447, metadata !DIExpression()), !dbg !3448
  store %struct.rtx_def* %after, %struct.rtx_def** %after.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %after.addr, metadata !3449, metadata !DIExpression()), !dbg !3450
  %0 = load i8, i8* @sched_pressure_p, align 1, !dbg !3451
  %tobool = icmp ne i8 %0, 0, !dbg !3451
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !3451

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 1650, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !3451
  br label %cond.end, !dbg !3451

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3451

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3451
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3452
  call void @initiate_bb_reg_pressure_info(%struct.basic_block_def* %1), !dbg !3453
  %2 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !3454
  call void @setup_insn_max_reg_pressure(%struct.rtx_def* %2, i8 zeroext 0), !dbg !3455
  ret void, !dbg !3456
}

; Function Attrs: noinline nounwind uwtable
define internal void @initiate_bb_reg_pressure_info(%struct.basic_block_def* %bb) #0 !dbg !3457 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %i = alloca i32, align 4
  %insn = alloca %struct.rtx_def*, align 8
  %regno = alloca i32, align 4
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !3458, metadata !DIExpression()), !dbg !3459
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3460, metadata !DIExpression()), !dbg !3461
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !3462, metadata !DIExpression()), !dbg !3463
  %0 = load i32, i32* @current_nr_blocks, align 4, !dbg !3464
  %cmp = icmp sgt i32 %0, 1, !dbg !3466
  br i1 %cmp, label %if.then, label %if.end25, !dbg !3467

if.then:                                          ; preds = %entry
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3468
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 7, !dbg !3468
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !3468
  %2 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !3468
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %2, i32 0, i32 0, !dbg !3468
  %3 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !3468
  store %struct.rtx_def* %3, %struct.rtx_def** %insn, align 8, !dbg !3468
  br label %for.cond, !dbg !3468

for.cond:                                         ; preds = %for.inc, %if.then
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3470
  %tobool = icmp ne %struct.rtx_def* %4, null, !dbg !3470
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !3470

land.rhs:                                         ; preds = %for.cond
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3470
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3470
  %il1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 7, !dbg !3470
  %rtl2 = bitcast %union.basic_block_il_dependent* %il1 to %struct.rtl_bb_info**, !dbg !3470
  %7 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl2, align 8, !dbg !3470
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %7, i32 0, i32 1, !dbg !3470
  %8 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !3470
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !3470
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3470
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !3470
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !3470
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !3470
  %cmp3 = icmp ne %struct.rtx_def* %5, %9, !dbg !3470
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %10 = phi i1 [ false, %for.cond ], [ %cmp3, %land.rhs ], !dbg !3472
  br i1 %10, label %for.body, label %for.end, !dbg !3468

for.body:                                         ; preds = %land.end
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3473
  %12 = bitcast %struct.rtx_def* %11 to i32*, !dbg !3473
  %bf.load = load i32, i32* %12, align 8, !dbg !3473
  %bf.clear = and i32 %bf.load, 65535, !dbg !3473
  %cmp4 = icmp eq i32 %bf.clear, 8, !dbg !3473
  br i1 %cmp4, label %if.then16, label %lor.lhs.false, !dbg !3473

lor.lhs.false:                                    ; preds = %for.body
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3473
  %14 = bitcast %struct.rtx_def* %13 to i32*, !dbg !3473
  %bf.load5 = load i32, i32* %14, align 8, !dbg !3473
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !3473
  %cmp7 = icmp eq i32 %bf.clear6, 7, !dbg !3473
  br i1 %cmp7, label %if.then16, label %lor.lhs.false8, !dbg !3473

lor.lhs.false8:                                   ; preds = %lor.lhs.false
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3473
  %16 = bitcast %struct.rtx_def* %15 to i32*, !dbg !3473
  %bf.load9 = load i32, i32* %16, align 8, !dbg !3473
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !3473
  %cmp11 = icmp eq i32 %bf.clear10, 9, !dbg !3473
  br i1 %cmp11, label %if.then16, label %lor.lhs.false12, !dbg !3473

lor.lhs.false12:                                  ; preds = %lor.lhs.false8
  %17 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3473
  %18 = bitcast %struct.rtx_def* %17 to i32*, !dbg !3473
  %bf.load13 = load i32, i32* %18, align 8, !dbg !3473
  %bf.clear14 = and i32 %bf.load13, 65535, !dbg !3473
  %cmp15 = icmp eq i32 %bf.clear14, 10, !dbg !3473
  br i1 %cmp15, label %if.then16, label %if.end, !dbg !3475

if.then16:                                        ; preds = %lor.lhs.false12, %lor.lhs.false8, %lor.lhs.false, %for.body
  %19 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3476
  %u17 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !3476
  %fld18 = bitcast %union.u* %u17 to [1 x %union.rtunion_def]*, !dbg !3476
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld18, i64 0, i64 5, !dbg !3476
  %rt_rtx20 = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtx_def**, !dbg !3476
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx20, align 8, !dbg !3476
  call void @setup_ref_regs(%struct.rtx_def* %20), !dbg !3477
  br label %if.end, !dbg !3477

if.end:                                           ; preds = %if.then16, %lor.lhs.false12
  br label %for.inc, !dbg !3473

for.inc:                                          ; preds = %if.end
  %21 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3470
  %u21 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !3470
  %fld22 = bitcast %union.u* %u21 to [1 x %union.rtunion_def]*, !dbg !3470
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld22, i64 0, i64 2, !dbg !3470
  %rt_rtx24 = bitcast %union.rtunion_def* %arrayidx23 to %struct.rtx_def**, !dbg !3470
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx24, align 8, !dbg !3470
  store %struct.rtx_def* %22, %struct.rtx_def** %insn, align 8, !dbg !3470
  br label %for.cond, !dbg !3470, !llvm.loop !3478

for.end:                                          ; preds = %land.end
  br label %if.end25, !dbg !3479

if.end25:                                         ; preds = %for.end, %entry
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3480
  %call = call %struct.bitmap_head_def* @df_get_live_in(%struct.basic_block_def* %23), !dbg !3481
  call void @initiate_reg_pressure_info(%struct.bitmap_head_def* %call), !dbg !3482
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3483
  %call26 = call zeroext i8 @bb_has_eh_pred(%struct.basic_block_def* %24), !dbg !3485
  %tobool27 = icmp ne i8 %call26, 0, !dbg !3485
  br i1 %tobool27, label %if.then28, label %if.end41, !dbg !3486

if.then28:                                        ; preds = %if.end25
  store i32 0, i32* %i, align 4, !dbg !3487
  br label %for.cond29, !dbg !3489

for.cond29:                                       ; preds = %for.inc39, %if.then28
  call void @llvm.dbg.declare(metadata i32* %regno, metadata !3490, metadata !DIExpression()), !dbg !3493
  %25 = load i32, i32* %i, align 4, !dbg !3494
  %cmp30 = icmp ult i32 %25, 2, !dbg !3494
  br i1 %cmp30, label %cond.true, label %cond.false, !dbg !3494

cond.true:                                        ; preds = %for.cond29
  %26 = load i32, i32* %i, align 4, !dbg !3494
  br label %cond.end, !dbg !3494

cond.false:                                       ; preds = %for.cond29
  br label %cond.end, !dbg !3494

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %26, %cond.true ], [ -1, %cond.false ], !dbg !3494
  store i32 %cond, i32* %regno, align 4, !dbg !3493
  %27 = load i32, i32* %regno, align 4, !dbg !3495
  %cmp31 = icmp eq i32 %27, -1, !dbg !3497
  br i1 %cmp31, label %if.then32, label %if.end33, !dbg !3498

if.then32:                                        ; preds = %cond.end
  br label %for.end40, !dbg !3499

if.end33:                                         ; preds = %cond.end
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3500
  %call34 = call %struct.bitmap_head_def* @df_get_live_in(%struct.basic_block_def* %28), !dbg !3502
  %29 = load i32, i32* %regno, align 4, !dbg !3503
  %call35 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %call34, i32 %29), !dbg !3504
  %tobool36 = icmp ne i32 %call35, 0, !dbg !3504
  br i1 %tobool36, label %if.end38, label %if.then37, !dbg !3505

if.then37:                                        ; preds = %if.end33
  %30 = load i32, i32* %regno, align 4, !dbg !3506
  call void @mark_regno_birth_or_death(i32 %30, i8 zeroext 1), !dbg !3507
  br label %if.end38, !dbg !3507

if.end38:                                         ; preds = %if.then37, %if.end33
  br label %for.inc39, !dbg !3508

for.inc39:                                        ; preds = %if.end38
  %31 = load i32, i32* %i, align 4, !dbg !3509
  %inc = add i32 %31, 1, !dbg !3509
  store i32 %inc, i32* %i, align 4, !dbg !3509
  br label %for.cond29, !dbg !3510, !llvm.loop !3511

for.end40:                                        ; preds = %if.then32
  br label %if.end41, !dbg !3513

if.end41:                                         ; preds = %for.end40, %if.end25
  ret void, !dbg !3514
}

; Function Attrs: noinline nounwind uwtable
define internal void @setup_insn_max_reg_pressure(%struct.rtx_def* %after, i8 zeroext %update_p) #0 !dbg !2446 {
entry:
  %after.addr = alloca %struct.rtx_def*, align 8
  %update_p.addr = alloca i8, align 1
  %i = alloca i32, align 4
  %p = alloca i32, align 4
  %eq_p = alloca i8, align 1
  %insn = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %after, %struct.rtx_def** %after.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %after.addr, metadata !3515, metadata !DIExpression()), !dbg !3516
  store i8 %update_p, i8* %update_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %update_p.addr, metadata !3517, metadata !DIExpression()), !dbg !3518
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3519, metadata !DIExpression()), !dbg !3520
  call void @llvm.dbg.declare(metadata i32* %p, metadata !3521, metadata !DIExpression()), !dbg !3522
  call void @llvm.dbg.declare(metadata i8* %eq_p, metadata !3523, metadata !DIExpression()), !dbg !3524
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !3525, metadata !DIExpression()), !dbg !3526
  call void @save_reg_pressure(), !dbg !3527
  store i32 0, i32* %i, align 4, !dbg !3528
  br label %for.cond, !dbg !3530

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !3531
  %1 = load i32, i32* @ira_reg_class_cover_size, align 4, !dbg !3533
  %cmp = icmp slt i32 %0, %1, !dbg !3534
  br i1 %cmp, label %for.body, label %for.end, !dbg !3535

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4, !dbg !3536
  %idxprom = sext i32 %2 to i64, !dbg !3537
  %arrayidx = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom, !dbg !3537
  %3 = load i32, i32* %arrayidx, align 4, !dbg !3537
  %idxprom1 = zext i32 %3 to i64, !dbg !3538
  %arrayidx2 = getelementptr inbounds [27 x i32], [27 x i32]* @curr_reg_pressure, i64 0, i64 %idxprom1, !dbg !3538
  %4 = load i32, i32* %arrayidx2, align 4, !dbg !3538
  %5 = load i32, i32* %i, align 4, !dbg !3539
  %idxprom3 = sext i32 %5 to i64, !dbg !3540
  %arrayidx4 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom3, !dbg !3540
  %6 = load i32, i32* %arrayidx4, align 4, !dbg !3540
  %idxprom5 = zext i32 %6 to i64, !dbg !3541
  %arrayidx6 = getelementptr inbounds [27 x i32], [27 x i32]* @setup_insn_max_reg_pressure.max_reg_pressure, i64 0, i64 %idxprom5, !dbg !3541
  store i32 %4, i32* %arrayidx6, align 4, !dbg !3542
  br label %for.inc, !dbg !3541

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4, !dbg !3543
  %inc = add nsw i32 %7, 1, !dbg !3543
  store i32 %inc, i32* %i, align 4, !dbg !3543
  br label %for.cond, !dbg !3544, !llvm.loop !3545

for.end:                                          ; preds = %for.cond
  %8 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !3547
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !3547
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3547
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !3547
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx7 to %struct.rtx_def**, !dbg !3547
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !3547
  store %struct.rtx_def* %9, %struct.rtx_def** %insn, align 8, !dbg !3549
  br label %for.cond8, !dbg !3550

for.cond8:                                        ; preds = %for.inc103, %for.end
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3551
  %cmp9 = icmp ne %struct.rtx_def* %10, null, !dbg !3553
  br i1 %cmp9, label %land.rhs, label %land.end, !dbg !3554

land.rhs:                                         ; preds = %for.cond8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3555
  %u10 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !3555
  %fld11 = bitcast %union.u* %u10 to [1 x %union.rtunion_def]*, !dbg !3555
  %arrayidx12 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld11, i64 0, i64 3, !dbg !3555
  %rt_bb = bitcast %union.rtunion_def* %arrayidx12 to %struct.basic_block_def**, !dbg !3555
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !3555
  %13 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !3556
  %u13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !3556
  %fld14 = bitcast %union.u* %u13 to [1 x %union.rtunion_def]*, !dbg !3556
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i64 0, i64 3, !dbg !3556
  %rt_bb16 = bitcast %union.rtunion_def* %arrayidx15 to %struct.basic_block_def**, !dbg !3556
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb16, align 8, !dbg !3556
  %cmp17 = icmp eq %struct.basic_block_def* %12, %14, !dbg !3557
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond8
  %15 = phi i1 [ false, %for.cond8 ], [ %cmp17, %land.rhs ], !dbg !3558
  br i1 %15, label %for.body18, label %for.end108, !dbg !3559

for.body18:                                       ; preds = %land.end
  %16 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3560
  %17 = bitcast %struct.rtx_def* %16 to i32*, !dbg !3560
  %bf.load = load i32, i32* %17, align 8, !dbg !3560
  %bf.clear = and i32 %bf.load, 65535, !dbg !3560
  %cmp19 = icmp eq i32 %bf.clear, 8, !dbg !3560
  br i1 %cmp19, label %land.lhs.true, label %lor.lhs.false, !dbg !3560

lor.lhs.false:                                    ; preds = %for.body18
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3560
  %19 = bitcast %struct.rtx_def* %18 to i32*, !dbg !3560
  %bf.load20 = load i32, i32* %19, align 8, !dbg !3560
  %bf.clear21 = and i32 %bf.load20, 65535, !dbg !3560
  %cmp22 = icmp eq i32 %bf.clear21, 7, !dbg !3560
  br i1 %cmp22, label %land.lhs.true, label %lor.lhs.false23, !dbg !3560

lor.lhs.false23:                                  ; preds = %lor.lhs.false
  %20 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3560
  %21 = bitcast %struct.rtx_def* %20 to i32*, !dbg !3560
  %bf.load24 = load i32, i32* %21, align 8, !dbg !3560
  %bf.clear25 = and i32 %bf.load24, 65535, !dbg !3560
  %cmp26 = icmp eq i32 %bf.clear25, 9, !dbg !3560
  br i1 %cmp26, label %land.lhs.true, label %lor.lhs.false27, !dbg !3560

lor.lhs.false27:                                  ; preds = %lor.lhs.false23
  %22 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3560
  %23 = bitcast %struct.rtx_def* %22 to i32*, !dbg !3560
  %bf.load28 = load i32, i32* %23, align 8, !dbg !3560
  %bf.clear29 = and i32 %bf.load28, 65535, !dbg !3560
  %cmp30 = icmp eq i32 %bf.clear29, 10, !dbg !3560
  br i1 %cmp30, label %land.lhs.true, label %if.end102, !dbg !3560

land.lhs.true:                                    ; preds = %lor.lhs.false27, %lor.lhs.false23, %lor.lhs.false, %for.body18
  %24 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3560
  %25 = bitcast %struct.rtx_def* %24 to i32*, !dbg !3560
  %bf.load31 = load i32, i32* %25, align 8, !dbg !3560
  %bf.clear32 = and i32 %bf.load31, 65535, !dbg !3560
  %cmp33 = icmp eq i32 %bf.clear32, 7, !dbg !3560
  br i1 %cmp33, label %if.end102, label %if.then, !dbg !3562

if.then:                                          ; preds = %land.lhs.true
  store i8 1, i8* %eq_p, align 1, !dbg !3563
  store i32 0, i32* %i, align 4, !dbg !3565
  br label %for.cond34, !dbg !3567

for.cond34:                                       ; preds = %for.inc66, %if.then
  %26 = load i32, i32* %i, align 4, !dbg !3568
  %27 = load i32, i32* @ira_reg_class_cover_size, align 4, !dbg !3570
  %cmp35 = icmp slt i32 %26, %27, !dbg !3571
  br i1 %cmp35, label %for.body36, label %for.end68, !dbg !3572

for.body36:                                       ; preds = %for.cond34
  %28 = load i32, i32* %i, align 4, !dbg !3573
  %idxprom37 = sext i32 %28 to i64, !dbg !3575
  %arrayidx38 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom37, !dbg !3575
  %29 = load i32, i32* %arrayidx38, align 4, !dbg !3575
  %idxprom39 = zext i32 %29 to i64, !dbg !3576
  %arrayidx40 = getelementptr inbounds [27 x i32], [27 x i32]* @setup_insn_max_reg_pressure.max_reg_pressure, i64 0, i64 %idxprom39, !dbg !3576
  %30 = load i32, i32* %arrayidx40, align 4, !dbg !3576
  store i32 %30, i32* %p, align 4, !dbg !3577
  %31 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !3578
  %tobool = icmp ne %struct.VEC_haifa_insn_data_def_heap* %31, null, !dbg !3578
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3578

cond.true:                                        ; preds = %for.body36
  %32 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !3578
  %base = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %32, i32 0, i32 0, !dbg !3578
  br label %cond.end, !dbg !3578

cond.false:                                       ; preds = %for.body36
  br label %cond.end, !dbg !3578

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_haifa_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3578
  %33 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3578
  %u41 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1, !dbg !3578
  %fld42 = bitcast %union.u* %u41 to [1 x %union.rtunion_def]*, !dbg !3578
  %arrayidx43 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld42, i64 0, i64 0, !dbg !3578
  %rt_int = bitcast %union.rtunion_def* %arrayidx43 to i32*, !dbg !3578
  %34 = load i32, i32* %rt_int, align 8, !dbg !3578
  %call = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond, i32 %34), !dbg !3578
  %max_reg_pressure = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call, i32 0, i32 14, !dbg !3578
  %35 = load i32*, i32** %max_reg_pressure, align 8, !dbg !3578
  %36 = load i32, i32* %i, align 4, !dbg !3580
  %idxprom44 = sext i32 %36 to i64, !dbg !3578
  %arrayidx45 = getelementptr inbounds i32, i32* %35, i64 %idxprom44, !dbg !3578
  %37 = load i32, i32* %arrayidx45, align 4, !dbg !3578
  %38 = load i32, i32* %p, align 4, !dbg !3581
  %cmp46 = icmp ne i32 %37, %38, !dbg !3582
  br i1 %cmp46, label %if.then47, label %if.end, !dbg !3583

if.then47:                                        ; preds = %cond.end
  store i8 0, i8* %eq_p, align 1, !dbg !3584
  %39 = load i32, i32* %i, align 4, !dbg !3586
  %idxprom48 = sext i32 %39 to i64, !dbg !3587
  %arrayidx49 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom48, !dbg !3587
  %40 = load i32, i32* %arrayidx49, align 4, !dbg !3587
  %idxprom50 = zext i32 %40 to i64, !dbg !3588
  %arrayidx51 = getelementptr inbounds [27 x i32], [27 x i32]* @setup_insn_max_reg_pressure.max_reg_pressure, i64 0, i64 %idxprom50, !dbg !3588
  %41 = load i32, i32* %arrayidx51, align 4, !dbg !3588
  %42 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !3589
  %tobool52 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %42, null, !dbg !3589
  br i1 %tobool52, label %cond.true53, label %cond.false55, !dbg !3589

cond.true53:                                      ; preds = %if.then47
  %43 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !3589
  %base54 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %43, i32 0, i32 0, !dbg !3589
  br label %cond.end56, !dbg !3589

cond.false55:                                     ; preds = %if.then47
  br label %cond.end56, !dbg !3589

cond.end56:                                       ; preds = %cond.false55, %cond.true53
  %cond57 = phi %struct.VEC_haifa_insn_data_def_base* [ %base54, %cond.true53 ], [ null, %cond.false55 ], !dbg !3589
  %44 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3589
  %u58 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %44, i32 0, i32 1, !dbg !3589
  %fld59 = bitcast %union.u* %u58 to [1 x %union.rtunion_def]*, !dbg !3589
  %arrayidx60 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld59, i64 0, i64 0, !dbg !3589
  %rt_int61 = bitcast %union.rtunion_def* %arrayidx60 to i32*, !dbg !3589
  %45 = load i32, i32* %rt_int61, align 8, !dbg !3589
  %call62 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond57, i32 %45), !dbg !3589
  %max_reg_pressure63 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call62, i32 0, i32 14, !dbg !3589
  %46 = load i32*, i32** %max_reg_pressure63, align 8, !dbg !3589
  %47 = load i32, i32* %i, align 4, !dbg !3590
  %idxprom64 = sext i32 %47 to i64, !dbg !3589
  %arrayidx65 = getelementptr inbounds i32, i32* %46, i64 %idxprom64, !dbg !3589
  store i32 %41, i32* %arrayidx65, align 4, !dbg !3591
  br label %if.end, !dbg !3592

if.end:                                           ; preds = %cond.end56, %cond.end
  br label %for.inc66, !dbg !3593

for.inc66:                                        ; preds = %if.end
  %48 = load i32, i32* %i, align 4, !dbg !3594
  %inc67 = add nsw i32 %48, 1, !dbg !3594
  store i32 %inc67, i32* %i, align 4, !dbg !3594
  br label %for.cond34, !dbg !3595, !llvm.loop !3596

for.end68:                                        ; preds = %for.cond34
  %49 = load i8, i8* %update_p.addr, align 1, !dbg !3598
  %conv = zext i8 %49 to i32, !dbg !3598
  %tobool69 = icmp ne i32 %conv, 0, !dbg !3598
  br i1 %tobool69, label %land.lhs.true70, label %if.end74, !dbg !3600

land.lhs.true70:                                  ; preds = %for.end68
  %50 = load i8, i8* %eq_p, align 1, !dbg !3601
  %conv71 = zext i8 %50 to i32, !dbg !3601
  %tobool72 = icmp ne i32 %conv71, 0, !dbg !3601
  br i1 %tobool72, label %if.then73, label %if.end74, !dbg !3602

if.then73:                                        ; preds = %land.lhs.true70
  br label %for.end108, !dbg !3603

if.end74:                                         ; preds = %land.lhs.true70, %for.end68
  %51 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3604
  call void @update_register_pressure(%struct.rtx_def* %51), !dbg !3605
  store i32 0, i32* %i, align 4, !dbg !3606
  br label %for.cond75, !dbg !3608

for.cond75:                                       ; preds = %for.inc99, %if.end74
  %52 = load i32, i32* %i, align 4, !dbg !3609
  %53 = load i32, i32* @ira_reg_class_cover_size, align 4, !dbg !3611
  %cmp76 = icmp slt i32 %52, %53, !dbg !3612
  br i1 %cmp76, label %for.body78, label %for.end101, !dbg !3613

for.body78:                                       ; preds = %for.cond75
  %54 = load i32, i32* %i, align 4, !dbg !3614
  %idxprom79 = sext i32 %54 to i64, !dbg !3616
  %arrayidx80 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom79, !dbg !3616
  %55 = load i32, i32* %arrayidx80, align 4, !dbg !3616
  %idxprom81 = zext i32 %55 to i64, !dbg !3617
  %arrayidx82 = getelementptr inbounds [27 x i32], [27 x i32]* @setup_insn_max_reg_pressure.max_reg_pressure, i64 0, i64 %idxprom81, !dbg !3617
  %56 = load i32, i32* %arrayidx82, align 4, !dbg !3617
  %57 = load i32, i32* %i, align 4, !dbg !3618
  %idxprom83 = sext i32 %57 to i64, !dbg !3619
  %arrayidx84 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom83, !dbg !3619
  %58 = load i32, i32* %arrayidx84, align 4, !dbg !3619
  %idxprom85 = zext i32 %58 to i64, !dbg !3620
  %arrayidx86 = getelementptr inbounds [27 x i32], [27 x i32]* @curr_reg_pressure, i64 0, i64 %idxprom85, !dbg !3620
  %59 = load i32, i32* %arrayidx86, align 4, !dbg !3620
  %cmp87 = icmp slt i32 %56, %59, !dbg !3621
  br i1 %cmp87, label %if.then89, label %if.end98, !dbg !3622

if.then89:                                        ; preds = %for.body78
  %60 = load i32, i32* %i, align 4, !dbg !3623
  %idxprom90 = sext i32 %60 to i64, !dbg !3624
  %arrayidx91 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom90, !dbg !3624
  %61 = load i32, i32* %arrayidx91, align 4, !dbg !3624
  %idxprom92 = zext i32 %61 to i64, !dbg !3625
  %arrayidx93 = getelementptr inbounds [27 x i32], [27 x i32]* @curr_reg_pressure, i64 0, i64 %idxprom92, !dbg !3625
  %62 = load i32, i32* %arrayidx93, align 4, !dbg !3625
  %63 = load i32, i32* %i, align 4, !dbg !3626
  %idxprom94 = sext i32 %63 to i64, !dbg !3627
  %arrayidx95 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom94, !dbg !3627
  %64 = load i32, i32* %arrayidx95, align 4, !dbg !3627
  %idxprom96 = zext i32 %64 to i64, !dbg !3628
  %arrayidx97 = getelementptr inbounds [27 x i32], [27 x i32]* @setup_insn_max_reg_pressure.max_reg_pressure, i64 0, i64 %idxprom96, !dbg !3628
  store i32 %62, i32* %arrayidx97, align 4, !dbg !3629
  br label %if.end98, !dbg !3628

if.end98:                                         ; preds = %if.then89, %for.body78
  br label %for.inc99, !dbg !3630

for.inc99:                                        ; preds = %if.end98
  %65 = load i32, i32* %i, align 4, !dbg !3631
  %inc100 = add nsw i32 %65, 1, !dbg !3631
  store i32 %inc100, i32* %i, align 4, !dbg !3631
  br label %for.cond75, !dbg !3632, !llvm.loop !3633

for.end101:                                       ; preds = %for.cond75
  br label %if.end102, !dbg !3635

if.end102:                                        ; preds = %for.end101, %land.lhs.true, %lor.lhs.false27
  br label %for.inc103, !dbg !3560

for.inc103:                                       ; preds = %if.end102
  %66 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3636
  %u104 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %66, i32 0, i32 1, !dbg !3636
  %fld105 = bitcast %union.u* %u104 to [1 x %union.rtunion_def]*, !dbg !3636
  %arrayidx106 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld105, i64 0, i64 2, !dbg !3636
  %rt_rtx107 = bitcast %union.rtunion_def* %arrayidx106 to %struct.rtx_def**, !dbg !3636
  %67 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx107, align 8, !dbg !3636
  store %struct.rtx_def* %67, %struct.rtx_def** %insn, align 8, !dbg !3637
  br label %for.cond8, !dbg !3638, !llvm.loop !3639

for.end108:                                       ; preds = %if.then73, %land.end
  call void @restore_reg_pressure(), !dbg !3641
  ret void, !dbg !3642
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @concat_note_lists(%struct.rtx_def* %from_end, %struct.rtx_def** %to_endp) #0 !dbg !3643 {
entry:
  %from_end.addr = alloca %struct.rtx_def*, align 8
  %to_endp.addr = alloca %struct.rtx_def**, align 8
  %from_start = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %from_end, %struct.rtx_def** %from_end.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %from_end.addr, metadata !3646, metadata !DIExpression()), !dbg !3647
  store %struct.rtx_def** %to_endp, %struct.rtx_def*** %to_endp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %to_endp.addr, metadata !3648, metadata !DIExpression()), !dbg !3649
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %from_start, metadata !3650, metadata !DIExpression()), !dbg !3651
  %0 = load %struct.rtx_def*, %struct.rtx_def** %from_end.addr, align 8, !dbg !3652
  %cmp = icmp eq %struct.rtx_def* %0, null, !dbg !3654
  br i1 %cmp, label %if.then, label %if.end, !dbg !3655

if.then:                                          ; preds = %entry
  br label %return, !dbg !3656

if.end:                                           ; preds = %entry
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %to_endp.addr, align 8, !dbg !3657
  %2 = load %struct.rtx_def*, %struct.rtx_def** %1, align 8, !dbg !3659
  %cmp1 = icmp eq %struct.rtx_def* %2, null, !dbg !3660
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !3661

if.then2:                                         ; preds = %if.end
  %3 = load %struct.rtx_def*, %struct.rtx_def** %from_end.addr, align 8, !dbg !3662
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %to_endp.addr, align 8, !dbg !3664
  store %struct.rtx_def* %3, %struct.rtx_def** %4, align 8, !dbg !3665
  br label %return, !dbg !3666

if.end3:                                          ; preds = %if.end
  %5 = load %struct.rtx_def*, %struct.rtx_def** %from_end.addr, align 8, !dbg !3667
  store %struct.rtx_def* %5, %struct.rtx_def** %from_start, align 8, !dbg !3668
  br label %while.cond, !dbg !3669

while.cond:                                       ; preds = %while.body, %if.end3
  %6 = load %struct.rtx_def*, %struct.rtx_def** %from_start, align 8, !dbg !3670
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !3670
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3670
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !3670
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !3670
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !3670
  %cmp4 = icmp ne %struct.rtx_def* %7, null, !dbg !3671
  br i1 %cmp4, label %while.body, label %while.end, !dbg !3669

while.body:                                       ; preds = %while.cond
  %8 = load %struct.rtx_def*, %struct.rtx_def** %from_start, align 8, !dbg !3672
  %u5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !3672
  %fld6 = bitcast %union.u* %u5 to [1 x %union.rtunion_def]*, !dbg !3672
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i64 0, i64 1, !dbg !3672
  %rt_rtx8 = bitcast %union.rtunion_def* %arrayidx7 to %struct.rtx_def**, !dbg !3672
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx8, align 8, !dbg !3672
  store %struct.rtx_def* %9, %struct.rtx_def** %from_start, align 8, !dbg !3673
  br label %while.cond, !dbg !3669, !llvm.loop !3674

while.end:                                        ; preds = %while.cond
  %10 = load %struct.rtx_def**, %struct.rtx_def*** %to_endp.addr, align 8, !dbg !3675
  %11 = load %struct.rtx_def*, %struct.rtx_def** %10, align 8, !dbg !3676
  %12 = load %struct.rtx_def*, %struct.rtx_def** %from_start, align 8, !dbg !3677
  %u9 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !3677
  %fld10 = bitcast %union.u* %u9 to [1 x %union.rtunion_def]*, !dbg !3677
  %arrayidx11 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld10, i64 0, i64 1, !dbg !3677
  %rt_rtx12 = bitcast %union.rtunion_def* %arrayidx11 to %struct.rtx_def**, !dbg !3677
  store %struct.rtx_def* %11, %struct.rtx_def** %rt_rtx12, align 8, !dbg !3678
  %13 = load %struct.rtx_def*, %struct.rtx_def** %from_start, align 8, !dbg !3679
  %14 = load %struct.rtx_def**, %struct.rtx_def*** %to_endp.addr, align 8, !dbg !3680
  %15 = load %struct.rtx_def*, %struct.rtx_def** %14, align 8, !dbg !3680
  %u13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !3680
  %fld14 = bitcast %union.u* %u13 to [1 x %union.rtunion_def]*, !dbg !3680
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i64 0, i64 2, !dbg !3680
  %rt_rtx16 = bitcast %union.rtunion_def* %arrayidx15 to %struct.rtx_def**, !dbg !3680
  store %struct.rtx_def* %13, %struct.rtx_def** %rt_rtx16, align 8, !dbg !3681
  %16 = load %struct.rtx_def*, %struct.rtx_def** %from_end.addr, align 8, !dbg !3682
  %17 = load %struct.rtx_def**, %struct.rtx_def*** %to_endp.addr, align 8, !dbg !3683
  store %struct.rtx_def* %16, %struct.rtx_def** %17, align 8, !dbg !3684
  br label %return, !dbg !3685

return:                                           ; preds = %while.end, %if.then2, %if.then
  ret void, !dbg !3685
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @remove_notes(%struct.rtx_def* %head, %struct.rtx_def* %tail) #0 !dbg !3686 {
entry:
  %head.addr = alloca %struct.rtx_def*, align 8
  %tail.addr = alloca %struct.rtx_def*, align 8
  %next_tail = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %next = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %head, %struct.rtx_def** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %head.addr, metadata !3687, metadata !DIExpression()), !dbg !3688
  store %struct.rtx_def* %tail, %struct.rtx_def** %tail.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tail.addr, metadata !3689, metadata !DIExpression()), !dbg !3690
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %next_tail, metadata !3691, metadata !DIExpression()), !dbg !3692
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !3693, metadata !DIExpression()), !dbg !3694
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %next, metadata !3695, metadata !DIExpression()), !dbg !3696
  store %struct.rtx_def* null, %struct.rtx_def** @note_list, align 8, !dbg !3697
  %0 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !3698
  %1 = load %struct.rtx_def*, %struct.rtx_def** %tail.addr, align 8, !dbg !3700
  %cmp = icmp eq %struct.rtx_def* %0, %1, !dbg !3701
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !3702

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !3703
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !3703
  %bf.load = load i32, i32* %3, align 8, !dbg !3703
  %bf.clear = and i32 %bf.load, 65535, !dbg !3703
  %cmp1 = icmp eq i32 %bf.clear, 8, !dbg !3703
  br i1 %cmp1, label %if.end, label %lor.lhs.false, !dbg !3703

lor.lhs.false:                                    ; preds = %land.lhs.true
  %4 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !3703
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !3703
  %bf.load2 = load i32, i32* %5, align 8, !dbg !3703
  %bf.clear3 = and i32 %bf.load2, 65535, !dbg !3703
  %cmp4 = icmp eq i32 %bf.clear3, 7, !dbg !3703
  br i1 %cmp4, label %if.end, label %lor.lhs.false5, !dbg !3703

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %6 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !3703
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !3703
  %bf.load6 = load i32, i32* %7, align 8, !dbg !3703
  %bf.clear7 = and i32 %bf.load6, 65535, !dbg !3703
  %cmp8 = icmp eq i32 %bf.clear7, 9, !dbg !3703
  br i1 %cmp8, label %if.end, label %lor.lhs.false9, !dbg !3703

lor.lhs.false9:                                   ; preds = %lor.lhs.false5
  %8 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !3703
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !3703
  %bf.load10 = load i32, i32* %9, align 8, !dbg !3703
  %bf.clear11 = and i32 %bf.load10, 65535, !dbg !3703
  %cmp12 = icmp eq i32 %bf.clear11, 10, !dbg !3703
  br i1 %cmp12, label %if.end, label %if.then, !dbg !3704

if.then:                                          ; preds = %lor.lhs.false9
  br label %for.end, !dbg !3705

if.end:                                           ; preds = %lor.lhs.false9, %lor.lhs.false5, %lor.lhs.false, %land.lhs.true, %entry
  %10 = load %struct.rtx_def*, %struct.rtx_def** %tail.addr, align 8, !dbg !3706
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !3706
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3706
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !3706
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !3706
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !3706
  store %struct.rtx_def* %11, %struct.rtx_def** %next_tail, align 8, !dbg !3707
  %12 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !3708
  store %struct.rtx_def* %12, %struct.rtx_def** %insn, align 8, !dbg !3710
  br label %for.cond, !dbg !3711

for.cond:                                         ; preds = %for.inc, %if.end
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3712
  %14 = load %struct.rtx_def*, %struct.rtx_def** %next_tail, align 8, !dbg !3714
  %cmp13 = icmp ne %struct.rtx_def* %13, %14, !dbg !3715
  br i1 %cmp13, label %for.body, label %for.end, !dbg !3716

for.body:                                         ; preds = %for.cond
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3717
  %u14 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !3717
  %fld15 = bitcast %union.u* %u14 to [1 x %union.rtunion_def]*, !dbg !3717
  %arrayidx16 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld15, i64 0, i64 2, !dbg !3717
  %rt_rtx17 = bitcast %union.rtunion_def* %arrayidx16 to %struct.rtx_def**, !dbg !3717
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx17, align 8, !dbg !3717
  store %struct.rtx_def* %16, %struct.rtx_def** %next, align 8, !dbg !3719
  %17 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3720
  %18 = bitcast %struct.rtx_def* %17 to i32*, !dbg !3720
  %bf.load18 = load i32, i32* %18, align 8, !dbg !3720
  %bf.clear19 = and i32 %bf.load18, 65535, !dbg !3720
  %cmp20 = icmp eq i32 %bf.clear19, 13, !dbg !3720
  br i1 %cmp20, label %if.end22, label %if.then21, !dbg !3722

if.then21:                                        ; preds = %for.body
  br label %for.inc, !dbg !3723

if.end22:                                         ; preds = %for.body
  %19 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3724
  %u23 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !3724
  %fld24 = bitcast %union.u* %u23 to [1 x %union.rtunion_def]*, !dbg !3724
  %arrayidx25 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld24, i64 0, i64 5, !dbg !3724
  %rt_int = bitcast %union.rtunion_def* %arrayidx25 to i32*, !dbg !3724
  %20 = load i32, i32* %rt_int, align 8, !dbg !3724
  switch i32 %20, label %sw.default [
    i32 10, label %sw.bb
    i32 6, label %sw.bb26
  ], !dbg !3725

sw.bb:                                            ; preds = %if.end22
  br label %for.inc, !dbg !3726

sw.bb26:                                          ; preds = %if.end22
  %21 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3728
  %22 = load %struct.rtx_def*, %struct.rtx_def** %tail.addr, align 8, !dbg !3730
  %cmp27 = icmp ne %struct.rtx_def* %21, %22, !dbg !3731
  br i1 %cmp27, label %if.then28, label %if.end29, !dbg !3732

if.then28:                                        ; preds = %sw.bb26
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3733
  call void @remove_insn(%struct.rtx_def* %23), !dbg !3735
  %24 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !3736
  %call = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 6), !dbg !3737
  call void @add_reg_note(%struct.rtx_def* %24, i32 26, %struct.rtx_def* %call), !dbg !3738
  br label %sw.epilog, !dbg !3739

if.end29:                                         ; preds = %sw.bb26
  br label %sw.default, !dbg !3730

sw.default:                                       ; preds = %if.end22, %if.end29
  %25 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3740
  call void @remove_insn(%struct.rtx_def* %25), !dbg !3741
  %26 = load %struct.rtx_def*, %struct.rtx_def** @note_list, align 8, !dbg !3742
  %27 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3743
  %u30 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1, !dbg !3743
  %fld31 = bitcast %union.u* %u30 to [1 x %union.rtunion_def]*, !dbg !3743
  %arrayidx32 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld31, i64 0, i64 1, !dbg !3743
  %rt_rtx33 = bitcast %union.rtunion_def* %arrayidx32 to %struct.rtx_def**, !dbg !3743
  store %struct.rtx_def* %26, %struct.rtx_def** %rt_rtx33, align 8, !dbg !3744
  %28 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3745
  %u34 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1, !dbg !3745
  %fld35 = bitcast %union.u* %u34 to [1 x %union.rtunion_def]*, !dbg !3745
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld35, i64 0, i64 2, !dbg !3745
  %rt_rtx37 = bitcast %union.rtunion_def* %arrayidx36 to %struct.rtx_def**, !dbg !3745
  store %struct.rtx_def* null, %struct.rtx_def** %rt_rtx37, align 8, !dbg !3746
  %29 = load %struct.rtx_def*, %struct.rtx_def** @note_list, align 8, !dbg !3747
  %tobool = icmp ne %struct.rtx_def* %29, null, !dbg !3747
  br i1 %tobool, label %if.then38, label %if.end43, !dbg !3749

if.then38:                                        ; preds = %sw.default
  %30 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3750
  %31 = load %struct.rtx_def*, %struct.rtx_def** @note_list, align 8, !dbg !3751
  %u39 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1, !dbg !3751
  %fld40 = bitcast %union.u* %u39 to [1 x %union.rtunion_def]*, !dbg !3751
  %arrayidx41 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld40, i64 0, i64 2, !dbg !3751
  %rt_rtx42 = bitcast %union.rtunion_def* %arrayidx41 to %struct.rtx_def**, !dbg !3751
  store %struct.rtx_def* %30, %struct.rtx_def** %rt_rtx42, align 8, !dbg !3752
  br label %if.end43, !dbg !3751

if.end43:                                         ; preds = %if.then38, %sw.default
  %32 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3753
  store %struct.rtx_def* %32, %struct.rtx_def** @note_list, align 8, !dbg !3754
  br label %sw.epilog, !dbg !3755

sw.epilog:                                        ; preds = %if.end43, %if.then28
  %call44 = call zeroext i8 @sel_sched_p(), !dbg !3756
  %conv = zext i8 %call44 to i32, !dbg !3756
  %tobool45 = icmp ne i32 %conv, 0, !dbg !3756
  br i1 %tobool45, label %land.lhs.true49, label %lor.lhs.false46, !dbg !3756

lor.lhs.false46:                                  ; preds = %sw.epilog
  %33 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3756
  %34 = load %struct.rtx_def*, %struct.rtx_def** %tail.addr, align 8, !dbg !3756
  %cmp47 = icmp ne %struct.rtx_def* %33, %34, !dbg !3756
  br i1 %cmp47, label %land.lhs.true49, label %cond.true, !dbg !3756

land.lhs.true49:                                  ; preds = %lor.lhs.false46, %sw.epilog
  %35 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3756
  %36 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !3756
  %cmp50 = icmp ne %struct.rtx_def* %35, %36, !dbg !3756
  br i1 %cmp50, label %cond.false, label %cond.true, !dbg !3756

cond.true:                                        ; preds = %land.lhs.true49, %lor.lhs.false46
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 1887, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !3756
  br label %cond.end, !dbg !3756

cond.false:                                       ; preds = %land.lhs.true49
  br label %cond.end, !dbg !3756

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3756
  br label %for.inc, !dbg !3757

for.inc:                                          ; preds = %cond.end, %sw.bb, %if.then21
  %37 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !3758
  store %struct.rtx_def* %37, %struct.rtx_def** %insn, align 8, !dbg !3759
  br label %for.cond, !dbg !3760, !llvm.loop !3761

for.end:                                          ; preds = %if.then, %for.cond
  ret void, !dbg !3763
}

declare dso_local void @remove_insn(%struct.rtx_def*) #2

declare dso_local void @add_reg_note(%struct.rtx_def*, i32, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @gen_rtx_CONST_INT(i32, i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @get_ebb_head_tail(%struct.basic_block_def* %beg, %struct.basic_block_def* %end, %struct.rtx_def** %headp, %struct.rtx_def** %tailp) #0 !dbg !3764 {
entry:
  %beg.addr = alloca %struct.basic_block_def*, align 8
  %end.addr = alloca %struct.basic_block_def*, align 8
  %headp.addr = alloca %struct.rtx_def**, align 8
  %tailp.addr = alloca %struct.rtx_def**, align 8
  %beg_head = alloca %struct.rtx_def*, align 8
  %beg_tail = alloca %struct.rtx_def*, align 8
  %end_head = alloca %struct.rtx_def*, align 8
  %end_tail = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def* %beg, %struct.basic_block_def** %beg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %beg.addr, metadata !3767, metadata !DIExpression()), !dbg !3768
  store %struct.basic_block_def* %end, %struct.basic_block_def** %end.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %end.addr, metadata !3769, metadata !DIExpression()), !dbg !3770
  store %struct.rtx_def** %headp, %struct.rtx_def*** %headp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %headp.addr, metadata !3771, metadata !DIExpression()), !dbg !3772
  store %struct.rtx_def** %tailp, %struct.rtx_def*** %tailp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %tailp.addr, metadata !3773, metadata !DIExpression()), !dbg !3774
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %beg_head, metadata !3775, metadata !DIExpression()), !dbg !3776
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %beg.addr, align 8, !dbg !3777
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 7, !dbg !3777
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !3777
  %1 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !3777
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %1, i32 0, i32 0, !dbg !3777
  %2 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !3777
  store %struct.rtx_def* %2, %struct.rtx_def** %beg_head, align 8, !dbg !3776
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %beg_tail, metadata !3778, metadata !DIExpression()), !dbg !3779
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %beg.addr, align 8, !dbg !3780
  %il1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 7, !dbg !3780
  %rtl2 = bitcast %union.basic_block_il_dependent* %il1 to %struct.rtl_bb_info**, !dbg !3780
  %4 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl2, align 8, !dbg !3780
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %4, i32 0, i32 1, !dbg !3780
  %5 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !3780
  store %struct.rtx_def* %5, %struct.rtx_def** %beg_tail, align 8, !dbg !3779
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %end_head, metadata !3781, metadata !DIExpression()), !dbg !3782
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %end.addr, align 8, !dbg !3783
  %il3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 7, !dbg !3783
  %rtl4 = bitcast %union.basic_block_il_dependent* %il3 to %struct.rtl_bb_info**, !dbg !3783
  %7 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl4, align 8, !dbg !3783
  %head_5 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %7, i32 0, i32 0, !dbg !3783
  %8 = load %struct.rtx_def*, %struct.rtx_def** %head_5, align 8, !dbg !3783
  store %struct.rtx_def* %8, %struct.rtx_def** %end_head, align 8, !dbg !3782
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %end_tail, metadata !3784, metadata !DIExpression()), !dbg !3785
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %end.addr, align 8, !dbg !3786
  %il6 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 7, !dbg !3786
  %rtl7 = bitcast %union.basic_block_il_dependent* %il6 to %struct.rtl_bb_info**, !dbg !3786
  %10 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl7, align 8, !dbg !3786
  %end_8 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %10, i32 0, i32 1, !dbg !3786
  %11 = load %struct.rtx_def*, %struct.rtx_def** %end_8, align 8, !dbg !3786
  store %struct.rtx_def* %11, %struct.rtx_def** %end_tail, align 8, !dbg !3785
  %12 = load %struct.rtx_def*, %struct.rtx_def** %beg_head, align 8, !dbg !3787
  %13 = bitcast %struct.rtx_def* %12 to i32*, !dbg !3787
  %bf.load = load i32, i32* %13, align 8, !dbg !3787
  %bf.clear = and i32 %bf.load, 65535, !dbg !3787
  %cmp = icmp eq i32 %bf.clear, 12, !dbg !3787
  br i1 %cmp, label %if.then, label %if.end, !dbg !3789

if.then:                                          ; preds = %entry
  %14 = load %struct.rtx_def*, %struct.rtx_def** %beg_head, align 8, !dbg !3790
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !3790
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3790
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !3790
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !3790
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !3790
  store %struct.rtx_def* %15, %struct.rtx_def** %beg_head, align 8, !dbg !3791
  br label %if.end, !dbg !3792

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond, !dbg !3793

while.cond:                                       ; preds = %if.end23, %if.end
  %16 = load %struct.rtx_def*, %struct.rtx_def** %beg_head, align 8, !dbg !3794
  %17 = load %struct.rtx_def*, %struct.rtx_def** %beg_tail, align 8, !dbg !3795
  %cmp9 = icmp ne %struct.rtx_def* %16, %17, !dbg !3796
  br i1 %cmp9, label %while.body, label %while.end, !dbg !3793

while.body:                                       ; preds = %while.cond
  %18 = load %struct.rtx_def*, %struct.rtx_def** %beg_head, align 8, !dbg !3797
  %19 = bitcast %struct.rtx_def* %18 to i32*, !dbg !3797
  %bf.load10 = load i32, i32* %19, align 8, !dbg !3797
  %bf.clear11 = and i32 %bf.load10, 65535, !dbg !3797
  %cmp12 = icmp eq i32 %bf.clear11, 13, !dbg !3797
  br i1 %cmp12, label %if.then18, label %lor.lhs.false, !dbg !3799

lor.lhs.false:                                    ; preds = %while.body
  %20 = load %struct.rtx_def*, %struct.rtx_def** %beg_head, align 8, !dbg !3800
  %21 = bitcast %struct.rtx_def* %20 to i32*, !dbg !3800
  %bf.load13 = load i32, i32* %21, align 8, !dbg !3800
  %bf.clear14 = and i32 %bf.load13, 65535, !dbg !3800
  %cmp15 = icmp eq i32 %bf.clear14, 7, !dbg !3800
  br i1 %cmp15, label %land.lhs.true, label %if.else, !dbg !3800

land.lhs.true:                                    ; preds = %lor.lhs.false
  %22 = load %struct.rtx_def*, %struct.rtx_def** %beg_head, align 8, !dbg !3800
  %23 = bitcast %struct.rtx_def* %22 to i32*, !dbg !3800
  %bf.load16 = load i32, i32* %23, align 8, !dbg !3800
  %bf.lshr = lshr i32 %bf.load16, 26, !dbg !3800
  %bf.clear17 = and i32 %bf.lshr, 1, !dbg !3800
  %tobool = icmp ne i32 %bf.clear17, 0, !dbg !3800
  br i1 %tobool, label %if.else, label %if.then18, !dbg !3801

if.then18:                                        ; preds = %land.lhs.true, %while.body
  %24 = load %struct.rtx_def*, %struct.rtx_def** %beg_head, align 8, !dbg !3802
  %u19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1, !dbg !3802
  %fld20 = bitcast %union.u* %u19 to [1 x %union.rtunion_def]*, !dbg !3802
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i64 0, i64 2, !dbg !3802
  %rt_rtx22 = bitcast %union.rtunion_def* %arrayidx21 to %struct.rtx_def**, !dbg !3802
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx22, align 8, !dbg !3802
  store %struct.rtx_def* %25, %struct.rtx_def** %beg_head, align 8, !dbg !3803
  br label %if.end23, !dbg !3804

if.else:                                          ; preds = %land.lhs.true, %lor.lhs.false
  br label %while.end, !dbg !3805

if.end23:                                         ; preds = %if.then18
  br label %while.cond, !dbg !3793, !llvm.loop !3806

while.end:                                        ; preds = %if.else, %while.cond
  %26 = load %struct.rtx_def*, %struct.rtx_def** %beg_head, align 8, !dbg !3808
  %27 = load %struct.rtx_def**, %struct.rtx_def*** %headp.addr, align 8, !dbg !3809
  store %struct.rtx_def* %26, %struct.rtx_def** %27, align 8, !dbg !3810
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %beg.addr, align 8, !dbg !3811
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %end.addr, align 8, !dbg !3813
  %cmp24 = icmp eq %struct.basic_block_def* %28, %29, !dbg !3814
  br i1 %cmp24, label %if.then25, label %if.else26, !dbg !3815

if.then25:                                        ; preds = %while.end
  %30 = load %struct.rtx_def*, %struct.rtx_def** %beg_head, align 8, !dbg !3816
  store %struct.rtx_def* %30, %struct.rtx_def** %end_head, align 8, !dbg !3817
  br label %if.end36, !dbg !3818

if.else26:                                        ; preds = %while.end
  %31 = load %struct.rtx_def*, %struct.rtx_def** %end_head, align 8, !dbg !3819
  %32 = bitcast %struct.rtx_def* %31 to i32*, !dbg !3819
  %bf.load27 = load i32, i32* %32, align 8, !dbg !3819
  %bf.clear28 = and i32 %bf.load27, 65535, !dbg !3819
  %cmp29 = icmp eq i32 %bf.clear28, 12, !dbg !3819
  br i1 %cmp29, label %if.then30, label %if.end35, !dbg !3821

if.then30:                                        ; preds = %if.else26
  %33 = load %struct.rtx_def*, %struct.rtx_def** %end_head, align 8, !dbg !3822
  %u31 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1, !dbg !3822
  %fld32 = bitcast %union.u* %u31 to [1 x %union.rtunion_def]*, !dbg !3822
  %arrayidx33 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld32, i64 0, i64 2, !dbg !3822
  %rt_rtx34 = bitcast %union.rtunion_def* %arrayidx33 to %struct.rtx_def**, !dbg !3822
  %34 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx34, align 8, !dbg !3822
  store %struct.rtx_def* %34, %struct.rtx_def** %end_head, align 8, !dbg !3823
  br label %if.end35, !dbg !3824

if.end35:                                         ; preds = %if.then30, %if.else26
  br label %if.end36

if.end36:                                         ; preds = %if.end35, %if.then25
  br label %while.cond37, !dbg !3825

while.cond37:                                     ; preds = %if.end58, %if.end36
  %35 = load %struct.rtx_def*, %struct.rtx_def** %end_head, align 8, !dbg !3826
  %36 = load %struct.rtx_def*, %struct.rtx_def** %end_tail, align 8, !dbg !3827
  %cmp38 = icmp ne %struct.rtx_def* %35, %36, !dbg !3828
  br i1 %cmp38, label %while.body39, label %while.end59, !dbg !3825

while.body39:                                     ; preds = %while.cond37
  %37 = load %struct.rtx_def*, %struct.rtx_def** %end_tail, align 8, !dbg !3829
  %38 = bitcast %struct.rtx_def* %37 to i32*, !dbg !3829
  %bf.load40 = load i32, i32* %38, align 8, !dbg !3829
  %bf.clear41 = and i32 %bf.load40, 65535, !dbg !3829
  %cmp42 = icmp eq i32 %bf.clear41, 13, !dbg !3829
  br i1 %cmp42, label %if.then52, label %lor.lhs.false43, !dbg !3831

lor.lhs.false43:                                  ; preds = %while.body39
  %39 = load %struct.rtx_def*, %struct.rtx_def** %end_tail, align 8, !dbg !3832
  %40 = bitcast %struct.rtx_def* %39 to i32*, !dbg !3832
  %bf.load44 = load i32, i32* %40, align 8, !dbg !3832
  %bf.clear45 = and i32 %bf.load44, 65535, !dbg !3832
  %cmp46 = icmp eq i32 %bf.clear45, 7, !dbg !3832
  br i1 %cmp46, label %land.lhs.true47, label %if.else57, !dbg !3832

land.lhs.true47:                                  ; preds = %lor.lhs.false43
  %41 = load %struct.rtx_def*, %struct.rtx_def** %end_tail, align 8, !dbg !3832
  %42 = bitcast %struct.rtx_def* %41 to i32*, !dbg !3832
  %bf.load48 = load i32, i32* %42, align 8, !dbg !3832
  %bf.lshr49 = lshr i32 %bf.load48, 26, !dbg !3832
  %bf.clear50 = and i32 %bf.lshr49, 1, !dbg !3832
  %tobool51 = icmp ne i32 %bf.clear50, 0, !dbg !3832
  br i1 %tobool51, label %if.else57, label %if.then52, !dbg !3833

if.then52:                                        ; preds = %land.lhs.true47, %while.body39
  %43 = load %struct.rtx_def*, %struct.rtx_def** %end_tail, align 8, !dbg !3834
  %u53 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %43, i32 0, i32 1, !dbg !3834
  %fld54 = bitcast %union.u* %u53 to [1 x %union.rtunion_def]*, !dbg !3834
  %arrayidx55 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld54, i64 0, i64 1, !dbg !3834
  %rt_rtx56 = bitcast %union.rtunion_def* %arrayidx55 to %struct.rtx_def**, !dbg !3834
  %44 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx56, align 8, !dbg !3834
  store %struct.rtx_def* %44, %struct.rtx_def** %end_tail, align 8, !dbg !3835
  br label %if.end58, !dbg !3836

if.else57:                                        ; preds = %land.lhs.true47, %lor.lhs.false43
  br label %while.end59, !dbg !3837

if.end58:                                         ; preds = %if.then52
  br label %while.cond37, !dbg !3825, !llvm.loop !3838

while.end59:                                      ; preds = %if.else57, %while.cond37
  %45 = load %struct.rtx_def*, %struct.rtx_def** %end_tail, align 8, !dbg !3840
  %46 = load %struct.rtx_def**, %struct.rtx_def*** %tailp.addr, align 8, !dbg !3841
  store %struct.rtx_def* %45, %struct.rtx_def** %46, align 8, !dbg !3842
  ret void, !dbg !3843
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @no_real_insns_p(%struct.rtx_def* %head, %struct.rtx_def* %tail) #0 !dbg !3844 {
entry:
  %retval = alloca i32, align 4
  %head.addr = alloca %struct.rtx_def*, align 8
  %tail.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %head, %struct.rtx_def** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %head.addr, metadata !3847, metadata !DIExpression()), !dbg !3848
  store %struct.rtx_def* %tail, %struct.rtx_def** %tail.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tail.addr, metadata !3849, metadata !DIExpression()), !dbg !3850
  br label %while.cond, !dbg !3851

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !3852
  %1 = load %struct.rtx_def*, %struct.rtx_def** %tail.addr, align 8, !dbg !3853
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !3853
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3853
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !3853
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !3853
  %2 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !3853
  %cmp = icmp ne %struct.rtx_def* %0, %2, !dbg !3854
  br i1 %cmp, label %while.body, label %while.end, !dbg !3851

while.body:                                       ; preds = %while.cond
  %3 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !3855
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !3855
  %bf.load = load i32, i32* %4, align 8, !dbg !3855
  %bf.clear = and i32 %bf.load, 65535, !dbg !3855
  %cmp1 = icmp eq i32 %bf.clear, 13, !dbg !3855
  br i1 %cmp1, label %if.end, label %land.lhs.true, !dbg !3858

land.lhs.true:                                    ; preds = %while.body
  %5 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !3859
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !3859
  %bf.load2 = load i32, i32* %6, align 8, !dbg !3859
  %bf.clear3 = and i32 %bf.load2, 65535, !dbg !3859
  %cmp4 = icmp eq i32 %bf.clear3, 12, !dbg !3859
  br i1 %cmp4, label %if.end, label %land.lhs.true5, !dbg !3860

land.lhs.true5:                                   ; preds = %land.lhs.true
  %7 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !3861
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !3861
  %bf.load6 = load i32, i32* %8, align 8, !dbg !3861
  %bf.clear7 = and i32 %bf.load6, 65535, !dbg !3861
  %cmp8 = icmp eq i32 %bf.clear7, 7, !dbg !3861
  br i1 %cmp8, label %land.lhs.true9, label %if.then, !dbg !3861

land.lhs.true9:                                   ; preds = %land.lhs.true5
  %9 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !3861
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !3861
  %bf.load10 = load i32, i32* %10, align 8, !dbg !3861
  %bf.lshr = lshr i32 %bf.load10, 26, !dbg !3861
  %bf.clear11 = and i32 %bf.lshr, 1, !dbg !3861
  %tobool = icmp ne i32 %bf.clear11, 0, !dbg !3861
  br i1 %tobool, label %if.then, label %if.end, !dbg !3862

if.then:                                          ; preds = %land.lhs.true9, %land.lhs.true5
  store i32 0, i32* %retval, align 4, !dbg !3863
  br label %return, !dbg !3863

if.end:                                           ; preds = %land.lhs.true9, %land.lhs.true, %while.body
  %11 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !3864
  %u12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !3864
  %fld13 = bitcast %union.u* %u12 to [1 x %union.rtunion_def]*, !dbg !3864
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i64 0, i64 2, !dbg !3864
  %rt_rtx15 = bitcast %union.rtunion_def* %arrayidx14 to %struct.rtx_def**, !dbg !3864
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx15, align 8, !dbg !3864
  store %struct.rtx_def* %12, %struct.rtx_def** %head.addr, align 8, !dbg !3865
  br label %while.cond, !dbg !3851, !llvm.loop !3866

while.end:                                        ; preds = %while.cond
  store i32 1, i32* %retval, align 4, !dbg !3868
  br label %return, !dbg !3868

return:                                           ; preds = %while.end, %if.then
  %13 = load i32, i32* %retval, align 4, !dbg !3869
  ret i32 %13, !dbg !3869
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @restore_other_notes(%struct.rtx_def* %head, %struct.basic_block_def* %head_bb) #0 !dbg !3870 {
entry:
  %head.addr = alloca %struct.rtx_def*, align 8
  %head_bb.addr = alloca %struct.basic_block_def*, align 8
  %note_head = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %head, %struct.rtx_def** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %head.addr, metadata !3873, metadata !DIExpression()), !dbg !3874
  store %struct.basic_block_def* %head_bb, %struct.basic_block_def** %head_bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %head_bb.addr, metadata !3875, metadata !DIExpression()), !dbg !3876
  %0 = load %struct.rtx_def*, %struct.rtx_def** @note_list, align 8, !dbg !3877
  %cmp = icmp ne %struct.rtx_def* %0, null, !dbg !3879
  br i1 %cmp, label %if.then, label %if.end53, !dbg !3880

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note_head, metadata !3881, metadata !DIExpression()), !dbg !3883
  %1 = load %struct.rtx_def*, %struct.rtx_def** @note_list, align 8, !dbg !3884
  store %struct.rtx_def* %1, %struct.rtx_def** %note_head, align 8, !dbg !3883
  %2 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !3885
  %tobool = icmp ne %struct.rtx_def* %2, null, !dbg !3885
  br i1 %tobool, label %if.then1, label %if.else, !dbg !3887

if.then1:                                         ; preds = %if.then
  %3 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !3888
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !3888
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3888
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !3888
  %rt_bb = bitcast %union.rtunion_def* %arrayidx to %struct.basic_block_def**, !dbg !3888
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !3888
  store %struct.basic_block_def* %4, %struct.basic_block_def** %head_bb.addr, align 8, !dbg !3889
  br label %if.end, !dbg !3890

if.else:                                          ; preds = %if.then
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %head_bb.addr, align 8, !dbg !3891
  %call = call %struct.rtx_def* @bb_note(%struct.basic_block_def* %5), !dbg !3891
  %u2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %call, i32 0, i32 1, !dbg !3891
  %fld3 = bitcast %union.u* %u2 to [1 x %union.rtunion_def]*, !dbg !3891
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3, i64 0, i64 2, !dbg !3891
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx4 to %struct.rtx_def**, !dbg !3891
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !3891
  store %struct.rtx_def* %6, %struct.rtx_def** %head.addr, align 8, !dbg !3892
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then1
  br label %while.cond, !dbg !3893

while.cond:                                       ; preds = %while.body, %if.end
  %7 = load %struct.rtx_def*, %struct.rtx_def** %note_head, align 8, !dbg !3894
  %u5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1, !dbg !3894
  %fld6 = bitcast %union.u* %u5 to [1 x %union.rtunion_def]*, !dbg !3894
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i64 0, i64 1, !dbg !3894
  %rt_rtx8 = bitcast %union.rtunion_def* %arrayidx7 to %struct.rtx_def**, !dbg !3894
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx8, align 8, !dbg !3894
  %tobool9 = icmp ne %struct.rtx_def* %8, null, !dbg !3893
  br i1 %tobool9, label %while.body, label %while.end, !dbg !3893

while.body:                                       ; preds = %while.cond
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %head_bb.addr, align 8, !dbg !3895
  %10 = load %struct.rtx_def*, %struct.rtx_def** %note_head, align 8, !dbg !3895
  %u10 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !3895
  %fld11 = bitcast %union.u* %u10 to [1 x %union.rtunion_def]*, !dbg !3895
  %arrayidx12 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld11, i64 0, i64 3, !dbg !3895
  %rt_bb13 = bitcast %union.rtunion_def* %arrayidx12 to %struct.basic_block_def**, !dbg !3895
  store %struct.basic_block_def* %9, %struct.basic_block_def** %rt_bb13, align 8, !dbg !3895
  %11 = load %struct.rtx_def*, %struct.rtx_def** %note_head, align 8, !dbg !3897
  %u14 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !3897
  %fld15 = bitcast %union.u* %u14 to [1 x %union.rtunion_def]*, !dbg !3897
  %arrayidx16 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld15, i64 0, i64 1, !dbg !3897
  %rt_rtx17 = bitcast %union.rtunion_def* %arrayidx16 to %struct.rtx_def**, !dbg !3897
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx17, align 8, !dbg !3897
  store %struct.rtx_def* %12, %struct.rtx_def** %note_head, align 8, !dbg !3898
  br label %while.cond, !dbg !3893, !llvm.loop !3899

while.end:                                        ; preds = %while.cond
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %head_bb.addr, align 8, !dbg !3901
  %14 = load %struct.rtx_def*, %struct.rtx_def** %note_head, align 8, !dbg !3901
  %u18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !3901
  %fld19 = bitcast %union.u* %u18 to [1 x %union.rtunion_def]*, !dbg !3901
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i64 0, i64 3, !dbg !3901
  %rt_bb21 = bitcast %union.rtunion_def* %arrayidx20 to %struct.basic_block_def**, !dbg !3901
  store %struct.basic_block_def* %13, %struct.basic_block_def** %rt_bb21, align 8, !dbg !3901
  %15 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !3902
  %u22 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !3902
  %fld23 = bitcast %union.u* %u22 to [1 x %union.rtunion_def]*, !dbg !3902
  %arrayidx24 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld23, i64 0, i64 1, !dbg !3902
  %rt_rtx25 = bitcast %union.rtunion_def* %arrayidx24 to %struct.rtx_def**, !dbg !3902
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx25, align 8, !dbg !3902
  %17 = load %struct.rtx_def*, %struct.rtx_def** %note_head, align 8, !dbg !3903
  %u26 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !3903
  %fld27 = bitcast %union.u* %u26 to [1 x %union.rtunion_def]*, !dbg !3903
  %arrayidx28 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld27, i64 0, i64 1, !dbg !3903
  %rt_rtx29 = bitcast %union.rtunion_def* %arrayidx28 to %struct.rtx_def**, !dbg !3903
  store %struct.rtx_def* %16, %struct.rtx_def** %rt_rtx29, align 8, !dbg !3904
  %18 = load %struct.rtx_def*, %struct.rtx_def** %note_head, align 8, !dbg !3905
  %19 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !3906
  %u30 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !3906
  %fld31 = bitcast %union.u* %u30 to [1 x %union.rtunion_def]*, !dbg !3906
  %arrayidx32 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld31, i64 0, i64 1, !dbg !3906
  %rt_rtx33 = bitcast %union.rtunion_def* %arrayidx32 to %struct.rtx_def**, !dbg !3906
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx33, align 8, !dbg !3906
  %u34 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1, !dbg !3906
  %fld35 = bitcast %union.u* %u34 to [1 x %union.rtunion_def]*, !dbg !3906
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld35, i64 0, i64 2, !dbg !3906
  %rt_rtx37 = bitcast %union.rtunion_def* %arrayidx36 to %struct.rtx_def**, !dbg !3906
  store %struct.rtx_def* %18, %struct.rtx_def** %rt_rtx37, align 8, !dbg !3907
  %21 = load %struct.rtx_def*, %struct.rtx_def** @note_list, align 8, !dbg !3908
  %22 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !3909
  %u38 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !3909
  %fld39 = bitcast %union.u* %u38 to [1 x %union.rtunion_def]*, !dbg !3909
  %arrayidx40 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld39, i64 0, i64 1, !dbg !3909
  %rt_rtx41 = bitcast %union.rtunion_def* %arrayidx40 to %struct.rtx_def**, !dbg !3909
  store %struct.rtx_def* %21, %struct.rtx_def** %rt_rtx41, align 8, !dbg !3910
  %23 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !3911
  %24 = load %struct.rtx_def*, %struct.rtx_def** @note_list, align 8, !dbg !3912
  %u42 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1, !dbg !3912
  %fld43 = bitcast %union.u* %u42 to [1 x %union.rtunion_def]*, !dbg !3912
  %arrayidx44 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld43, i64 0, i64 2, !dbg !3912
  %rt_rtx45 = bitcast %union.rtunion_def* %arrayidx44 to %struct.rtx_def**, !dbg !3912
  store %struct.rtx_def* %23, %struct.rtx_def** %rt_rtx45, align 8, !dbg !3913
  %25 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !3914
  %u46 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1, !dbg !3914
  %fld47 = bitcast %union.u* %u46 to [1 x %union.rtunion_def]*, !dbg !3914
  %arrayidx48 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld47, i64 0, i64 3, !dbg !3914
  %rt_bb49 = bitcast %union.rtunion_def* %arrayidx48 to %struct.basic_block_def**, !dbg !3914
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb49, align 8, !dbg !3914
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %head_bb.addr, align 8, !dbg !3916
  %cmp50 = icmp ne %struct.basic_block_def* %26, %27, !dbg !3917
  br i1 %cmp50, label %if.then51, label %if.end52, !dbg !3918

if.then51:                                        ; preds = %while.end
  %28 = load %struct.rtx_def*, %struct.rtx_def** @note_list, align 8, !dbg !3919
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %head_bb.addr, align 8, !dbg !3920
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %29, i32 0, i32 7, !dbg !3920
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !3920
  %30 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !3920
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %30, i32 0, i32 1, !dbg !3920
  store %struct.rtx_def* %28, %struct.rtx_def** %end_, align 8, !dbg !3921
  br label %if.end52, !dbg !3920

if.end52:                                         ; preds = %if.then51, %while.end
  %31 = load %struct.rtx_def*, %struct.rtx_def** %note_head, align 8, !dbg !3922
  store %struct.rtx_def* %31, %struct.rtx_def** %head.addr, align 8, !dbg !3923
  br label %if.end53, !dbg !3924

if.end53:                                         ; preds = %if.end52, %entry
  %32 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !3925
  ret %struct.rtx_def* %32, !dbg !3926
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @bb_note(%struct.basic_block_def* %bb) #0 !dbg !3927 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !3930, metadata !DIExpression()), !dbg !3931
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !3932, metadata !DIExpression()), !dbg !3933
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3934
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 7, !dbg !3934
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !3934
  %1 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !3934
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %1, i32 0, i32 0, !dbg !3934
  %2 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !3934
  store %struct.rtx_def* %2, %struct.rtx_def** %note, align 8, !dbg !3935
  %3 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !3936
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !3936
  %bf.load = load i32, i32* %4, align 8, !dbg !3936
  %bf.clear = and i32 %bf.load, 65535, !dbg !3936
  %cmp = icmp eq i32 %bf.clear, 12, !dbg !3936
  br i1 %cmp, label %if.then, label %if.end, !dbg !3938

if.then:                                          ; preds = %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !3939
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !3939
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3939
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !3939
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !3939
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !3939
  store %struct.rtx_def* %6, %struct.rtx_def** %note, align 8, !dbg !3940
  br label %if.end, !dbg !3941

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !3942
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !3942
  %bf.load1 = load i32, i32* %8, align 8, !dbg !3942
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !3942
  %cmp3 = icmp eq i32 %bf.clear2, 13, !dbg !3942
  br i1 %cmp3, label %land.lhs.true, label %cond.true, !dbg !3942

land.lhs.true:                                    ; preds = %if.end
  %9 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !3942
  %u4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !3942
  %fld5 = bitcast %union.u* %u4 to [1 x %union.rtunion_def]*, !dbg !3942
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i64 0, i64 5, !dbg !3942
  %rt_int = bitcast %union.rtunion_def* %arrayidx6 to i32*, !dbg !3942
  %10 = load i32, i32* %rt_int, align 8, !dbg !3942
  %cmp7 = icmp eq i32 %10, 10, !dbg !3942
  br i1 %cmp7, label %cond.false, label %cond.true, !dbg !3942

cond.true:                                        ; preds = %land.lhs.true, %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 5132, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !3942
  br label %cond.end, !dbg !3942

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !3942

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3942
  %11 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !3943
  ret %struct.rtx_def* %11, !dbg !3944
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @reemit_notes(%struct.rtx_def* %insn) #0 !dbg !3945 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  %note_type = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !3946, metadata !DIExpression()), !dbg !3947
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !3948, metadata !DIExpression()), !dbg !3949
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !3950, metadata !DIExpression()), !dbg !3951
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3952
  store %struct.rtx_def* %0, %struct.rtx_def** %last, align 8, !dbg !3951
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3953
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !3953
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3953
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 7, !dbg !3953
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !3953
  %2 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !3953
  store %struct.rtx_def* %2, %struct.rtx_def** %note, align 8, !dbg !3955
  br label %for.cond, !dbg !3956

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !3957
  %tobool = icmp ne %struct.rtx_def* %3, null, !dbg !3959
  br i1 %tobool, label %for.body, label %for.end, !dbg !3959

for.body:                                         ; preds = %for.cond
  %4 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !3960
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !3960
  %bf.load = load i32, i32* %5, align 8, !dbg !3960
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !3960
  %bf.clear = and i32 %bf.lshr, 255, !dbg !3960
  %cmp = icmp eq i32 %bf.clear, 26, !dbg !3963
  br i1 %cmp, label %if.then, label %if.end, !dbg !3964

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata i32* %note_type, metadata !3965, metadata !DIExpression()), !dbg !3967
  %6 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !3968
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !3968
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !3968
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 0, !dbg !3968
  %rt_rtx4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**, !dbg !3968
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx4, align 8, !dbg !3968
  %u5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1, !dbg !3968
  %hwint = bitcast %union.u* %u5 to [1 x i64]*, !dbg !3968
  %arrayidx6 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !3968
  %8 = load i64, i64* %arrayidx6, align 8, !dbg !3968
  %conv = trunc i64 %8 to i32, !dbg !3969
  store i32 %conv, i32* %note_type, align 4, !dbg !3967
  %9 = load i32, i32* %note_type, align 4, !dbg !3970
  %10 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !3971
  %call = call %struct.rtx_def* @emit_note_before(i32 %9, %struct.rtx_def* %10), !dbg !3972
  store %struct.rtx_def* %call, %struct.rtx_def** %last, align 8, !dbg !3973
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3974
  %12 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !3975
  call void @remove_note(%struct.rtx_def* %11, %struct.rtx_def* %12), !dbg !3976
  br label %if.end, !dbg !3977

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !3978

for.inc:                                          ; preds = %if.end
  %13 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !3979
  %u7 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !3979
  %fld8 = bitcast %union.u* %u7 to [1 x %union.rtunion_def]*, !dbg !3979
  %arrayidx9 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld8, i64 0, i64 1, !dbg !3979
  %rt_rtx10 = bitcast %union.rtunion_def* %arrayidx9 to %struct.rtx_def**, !dbg !3979
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx10, align 8, !dbg !3979
  store %struct.rtx_def* %14, %struct.rtx_def** %note, align 8, !dbg !3980
  br label %for.cond, !dbg !3981, !llvm.loop !3982

for.end:                                          ; preds = %for.cond
  ret void, !dbg !3984
}

declare dso_local %struct.rtx_def* @emit_note_before(i32, %struct.rtx_def*) #2

declare dso_local void @remove_note(%struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @max_issue(%struct.ready_list* %ready, i32 %privileged_n, i8* %state, i32* %index) #0 !dbg !3985 {
entry:
  %ready.addr = alloca %struct.ready_list*, align 8
  %privileged_n.addr = alloca i32, align 4
  %state.addr = alloca i8*, align 8
  %index.addr = alloca i32*, align 8
  %n = alloca i32, align 4
  %i = alloca i32, align 4
  %all = alloca i32, align 4
  %n_ready = alloca i32, align 4
  %best = alloca i32, align 4
  %delay = alloca i32, align 4
  %tries_num = alloca i32, align 4
  %max_points = alloca i32, align 4
  %more_issue = alloca i32, align 4
  %top = alloca %struct.choice_entry*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  store %struct.ready_list* %ready, %struct.ready_list** %ready.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ready_list** %ready.addr, metadata !3988, metadata !DIExpression()), !dbg !3989
  store i32 %privileged_n, i32* %privileged_n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %privileged_n.addr, metadata !3990, metadata !DIExpression()), !dbg !3991
  store i8* %state, i8** %state.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %state.addr, metadata !3992, metadata !DIExpression()), !dbg !3993
  store i32* %index, i32** %index.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %index.addr, metadata !3994, metadata !DIExpression()), !dbg !3995
  call void @llvm.dbg.declare(metadata i32* %n, metadata !3996, metadata !DIExpression()), !dbg !3997
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3998, metadata !DIExpression()), !dbg !3999
  call void @llvm.dbg.declare(metadata i32* %all, metadata !4000, metadata !DIExpression()), !dbg !4001
  call void @llvm.dbg.declare(metadata i32* %n_ready, metadata !4002, metadata !DIExpression()), !dbg !4003
  call void @llvm.dbg.declare(metadata i32* %best, metadata !4004, metadata !DIExpression()), !dbg !4005
  call void @llvm.dbg.declare(metadata i32* %delay, metadata !4006, metadata !DIExpression()), !dbg !4007
  call void @llvm.dbg.declare(metadata i32* %tries_num, metadata !4008, metadata !DIExpression()), !dbg !4009
  call void @llvm.dbg.declare(metadata i32* %max_points, metadata !4010, metadata !DIExpression()), !dbg !4011
  call void @llvm.dbg.declare(metadata i32* %more_issue, metadata !4012, metadata !DIExpression()), !dbg !4013
  call void @llvm.dbg.declare(metadata %struct.choice_entry** %top, metadata !4014, metadata !DIExpression()), !dbg !4015
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !4016, metadata !DIExpression()), !dbg !4017
  %0 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !4018
  %n_ready1 = getelementptr inbounds %struct.ready_list, %struct.ready_list* %0, i32 0, i32 3, !dbg !4019
  %1 = load i32, i32* %n_ready1, align 8, !dbg !4019
  store i32 %1, i32* %n_ready, align 4, !dbg !4020
  %2 = load i32, i32* @dfa_lookahead, align 4, !dbg !4021
  %cmp = icmp sge i32 %2, 1, !dbg !4021
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !4021

land.lhs.true:                                    ; preds = %entry
  %3 = load i32, i32* %privileged_n.addr, align 4, !dbg !4021
  %cmp2 = icmp sge i32 %3, 0, !dbg !4021
  br i1 %cmp2, label %land.lhs.true3, label %cond.true, !dbg !4021

land.lhs.true3:                                   ; preds = %land.lhs.true
  %4 = load i32, i32* %privileged_n.addr, align 4, !dbg !4021
  %5 = load i32, i32* %n_ready, align 4, !dbg !4021
  %cmp4 = icmp sle i32 %4, %5, !dbg !4021
  br i1 %cmp4, label %cond.false, label %cond.true, !dbg !4021

cond.true:                                        ; preds = %land.lhs.true3, %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 2458, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4021
  br label %cond.end, !dbg !4021

cond.false:                                       ; preds = %land.lhs.true3
  br label %cond.end, !dbg !4021

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4021
  %6 = load i32, i32* @cached_first_cycle_multipass_dfa_lookahead, align 4, !dbg !4022
  %7 = load i32, i32* @dfa_lookahead, align 4, !dbg !4024
  %cmp5 = icmp ne i32 %6, %7, !dbg !4025
  br i1 %cmp5, label %if.then, label %if.end, !dbg !4026

if.then:                                          ; preds = %cond.end
  %8 = load i32, i32* @dfa_lookahead, align 4, !dbg !4027
  store i32 %8, i32* @cached_first_cycle_multipass_dfa_lookahead, align 4, !dbg !4029
  store i32 100, i32* @max_lookahead_tries, align 4, !dbg !4030
  store i32 0, i32* %i, align 4, !dbg !4031
  br label %for.cond, !dbg !4033

for.cond:                                         ; preds = %for.inc, %if.then
  %9 = load i32, i32* %i, align 4, !dbg !4034
  %10 = load i32, i32* @issue_rate, align 4, !dbg !4036
  %cmp6 = icmp slt i32 %9, %10, !dbg !4037
  br i1 %cmp6, label %for.body, label %for.end, !dbg !4038

for.body:                                         ; preds = %for.cond
  %11 = load i32, i32* @dfa_lookahead, align 4, !dbg !4039
  %12 = load i32, i32* @max_lookahead_tries, align 4, !dbg !4040
  %mul = mul nsw i32 %12, %11, !dbg !4040
  store i32 %mul, i32* @max_lookahead_tries, align 4, !dbg !4040
  br label %for.inc, !dbg !4041

for.inc:                                          ; preds = %for.body
  %13 = load i32, i32* %i, align 4, !dbg !4042
  %inc = add nsw i32 %13, 1, !dbg !4042
  store i32 %inc, i32* %i, align 4, !dbg !4042
  br label %for.cond, !dbg !4043, !llvm.loop !4044

for.end:                                          ; preds = %for.cond
  br label %if.end, !dbg !4046

if.end:                                           ; preds = %for.end, %cond.end
  store i32 0, i32* %max_points, align 4, !dbg !4047
  %14 = load i32, i32* @issue_rate, align 4, !dbg !4048
  %15 = load i32, i32* @cycle_issued_insns, align 4, !dbg !4049
  %sub = sub nsw i32 %14, %15, !dbg !4050
  store i32 %sub, i32* %more_issue, align 4, !dbg !4051
  store i32 0, i32* %i, align 4, !dbg !4052
  br label %for.cond7, !dbg !4054

for.cond7:                                        ; preds = %for.inc15, %if.end
  %16 = load i32, i32* %i, align 4, !dbg !4055
  %17 = load i32, i32* %n_ready, align 4, !dbg !4057
  %cmp8 = icmp slt i32 %16, %17, !dbg !4058
  br i1 %cmp8, label %for.body9, label %for.end17, !dbg !4059

for.body9:                                        ; preds = %for.cond7
  %18 = load i8*, i8** @ready_try, align 8, !dbg !4060
  %19 = load i32, i32* %i, align 4, !dbg !4062
  %idxprom = sext i32 %19 to i64, !dbg !4060
  %arrayidx = getelementptr inbounds i8, i8* %18, i64 %idxprom, !dbg !4060
  %20 = load i8, i8* %arrayidx, align 1, !dbg !4060
  %tobool = icmp ne i8 %20, 0, !dbg !4060
  br i1 %tobool, label %if.end14, label %if.then10, !dbg !4063

if.then10:                                        ; preds = %for.body9
  %21 = load i32, i32* %more_issue, align 4, !dbg !4064
  %dec = add nsw i32 %21, -1, !dbg !4064
  store i32 %dec, i32* %more_issue, align 4, !dbg !4064
  %cmp11 = icmp sgt i32 %21, 0, !dbg !4067
  br i1 %cmp11, label %if.then12, label %if.else, !dbg !4068

if.then12:                                        ; preds = %if.then10
  %22 = load i32, i32* %max_points, align 4, !dbg !4069
  %add = add nsw i32 %22, 1, !dbg !4069
  store i32 %add, i32* %max_points, align 4, !dbg !4069
  br label %if.end13, !dbg !4070

if.else:                                          ; preds = %if.then10
  br label %for.end17, !dbg !4071

if.end13:                                         ; preds = %if.then12
  br label %if.end14, !dbg !4072

if.end14:                                         ; preds = %if.end13, %for.body9
  br label %for.inc15, !dbg !4073

for.inc15:                                        ; preds = %if.end14
  %23 = load i32, i32* %i, align 4, !dbg !4074
  %inc16 = add nsw i32 %23, 1, !dbg !4074
  store i32 %inc16, i32* %i, align 4, !dbg !4074
  br label %for.cond7, !dbg !4075, !llvm.loop !4076

for.end17:                                        ; preds = %if.else, %for.cond7
  store i32 0, i32* %best, align 4, !dbg !4078
  %24 = load %struct.choice_entry*, %struct.choice_entry** @choice_stack, align 8, !dbg !4079
  store %struct.choice_entry* %24, %struct.choice_entry** %top, align 8, !dbg !4080
  %25 = load %struct.choice_entry*, %struct.choice_entry** %top, align 8, !dbg !4081
  %state18 = getelementptr inbounds %struct.choice_entry, %struct.choice_entry* %25, i32 0, i32 3, !dbg !4082
  %26 = load i8*, i8** %state18, align 8, !dbg !4082
  %27 = load i8*, i8** %state.addr, align 8, !dbg !4083
  %28 = load i64, i64* @dfa_state_size, align 8, !dbg !4084
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %26, i8* align 1 %27, i64 %28, i1 false), !dbg !4085
  %29 = load i32, i32* @dfa_lookahead, align 4, !dbg !4086
  %30 = load %struct.choice_entry*, %struct.choice_entry** %top, align 8, !dbg !4087
  %rest = getelementptr inbounds %struct.choice_entry, %struct.choice_entry* %30, i32 0, i32 1, !dbg !4088
  store i32 %29, i32* %rest, align 4, !dbg !4089
  %31 = load %struct.choice_entry*, %struct.choice_entry** %top, align 8, !dbg !4090
  %n19 = getelementptr inbounds %struct.choice_entry, %struct.choice_entry* %31, i32 0, i32 2, !dbg !4091
  store i32 0, i32* %n19, align 8, !dbg !4092
  store i32 0, i32* %i, align 4, !dbg !4093
  store i32 0, i32* %all, align 4, !dbg !4095
  br label %for.cond20, !dbg !4096

for.cond20:                                       ; preds = %for.inc29, %for.end17
  %32 = load i32, i32* %i, align 4, !dbg !4097
  %33 = load i32, i32* %n_ready, align 4, !dbg !4099
  %cmp21 = icmp slt i32 %32, %33, !dbg !4100
  br i1 %cmp21, label %for.body22, label %for.end31, !dbg !4101

for.body22:                                       ; preds = %for.cond20
  %34 = load i8*, i8** @ready_try, align 8, !dbg !4102
  %35 = load i32, i32* %i, align 4, !dbg !4104
  %idxprom23 = sext i32 %35 to i64, !dbg !4102
  %arrayidx24 = getelementptr inbounds i8, i8* %34, i64 %idxprom23, !dbg !4102
  %36 = load i8, i8* %arrayidx24, align 1, !dbg !4102
  %tobool25 = icmp ne i8 %36, 0, !dbg !4102
  br i1 %tobool25, label %if.end28, label %if.then26, !dbg !4105

if.then26:                                        ; preds = %for.body22
  %37 = load i32, i32* %all, align 4, !dbg !4106
  %inc27 = add nsw i32 %37, 1, !dbg !4106
  store i32 %inc27, i32* %all, align 4, !dbg !4106
  br label %if.end28, !dbg !4107

if.end28:                                         ; preds = %if.then26, %for.body22
  br label %for.inc29, !dbg !4108

for.inc29:                                        ; preds = %if.end28
  %38 = load i32, i32* %i, align 4, !dbg !4109
  %inc30 = add nsw i32 %38, 1, !dbg !4109
  store i32 %inc30, i32* %i, align 4, !dbg !4109
  br label %for.cond20, !dbg !4110, !llvm.loop !4111

for.end31:                                        ; preds = %for.cond20
  store i32 0, i32* %i, align 4, !dbg !4113
  store i32 0, i32* %tries_num, align 4, !dbg !4114
  br label %for.cond32, !dbg !4115

for.cond32:                                       ; preds = %if.end128, %for.end31
  %39 = load %struct.choice_entry*, %struct.choice_entry** %top, align 8, !dbg !4116
  %rest33 = getelementptr inbounds %struct.choice_entry, %struct.choice_entry* %39, i32 0, i32 1, !dbg !4121
  %40 = load i32, i32* %rest33, align 4, !dbg !4121
  %cmp34 = icmp eq i32 %40, 0, !dbg !4122
  br i1 %cmp34, label %if.then36, label %lor.lhs.false, !dbg !4123

lor.lhs.false:                                    ; preds = %for.cond32
  %41 = load i32, i32* %i, align 4, !dbg !4124
  %42 = load i32, i32* %n_ready, align 4, !dbg !4125
  %cmp35 = icmp sge i32 %41, %42, !dbg !4126
  br i1 %cmp35, label %if.then36, label %if.else85, !dbg !4127

if.then36:                                        ; preds = %lor.lhs.false, %for.cond32
  %43 = load i32, i32* %i, align 4, !dbg !4128
  %44 = load i32, i32* %n_ready, align 4, !dbg !4128
  %cmp37 = icmp sle i32 %43, %44, !dbg !4128
  br i1 %cmp37, label %cond.false39, label %cond.true38, !dbg !4128

cond.true38:                                      ; preds = %if.then36
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 2517, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4128
  br label %cond.end40, !dbg !4128

cond.false39:                                     ; preds = %if.then36
  br label %cond.end40, !dbg !4128

cond.end40:                                       ; preds = %cond.false39, %cond.true38
  %cond41 = phi i32 [ 0, %cond.true38 ], [ 0, %cond.false39 ], !dbg !4128
  %45 = load %struct.choice_entry*, %struct.choice_entry** %top, align 8, !dbg !4130
  %46 = load %struct.choice_entry*, %struct.choice_entry** @choice_stack, align 8, !dbg !4132
  %cmp42 = icmp eq %struct.choice_entry* %45, %46, !dbg !4133
  br i1 %cmp42, label %if.then43, label %if.end44, !dbg !4134

if.then43:                                        ; preds = %cond.end40
  br label %for.end130, !dbg !4135

if.end44:                                         ; preds = %cond.end40
  %47 = load i32, i32* %best, align 4, !dbg !4136
  %conv = sext i32 %47 to i64, !dbg !4136
  %48 = load %struct.choice_entry*, %struct.choice_entry** %top, align 8, !dbg !4138
  %49 = load %struct.choice_entry*, %struct.choice_entry** @choice_stack, align 8, !dbg !4139
  %sub.ptr.lhs.cast = ptrtoint %struct.choice_entry* %48 to i64, !dbg !4140
  %sub.ptr.rhs.cast = ptrtoint %struct.choice_entry* %49 to i64, !dbg !4140
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !4140
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 24, !dbg !4140
  %cmp45 = icmp slt i64 %conv, %sub.ptr.div, !dbg !4141
  br i1 %cmp45, label %if.then47, label %if.end80, !dbg !4142

if.then47:                                        ; preds = %if.end44
  %50 = load i32, i32* %privileged_n.addr, align 4, !dbg !4143
  %tobool48 = icmp ne i32 %50, 0, !dbg !4143
  br i1 %tobool48, label %if.then49, label %if.end55, !dbg !4146

if.then49:                                        ; preds = %if.then47
  %51 = load i32, i32* %privileged_n.addr, align 4, !dbg !4147
  store i32 %51, i32* %n, align 4, !dbg !4149
  br label %while.cond, !dbg !4150

while.cond:                                       ; preds = %while.body, %if.then49
  %52 = load i32, i32* %n, align 4, !dbg !4151
  %tobool50 = icmp ne i32 %52, 0, !dbg !4151
  br i1 %tobool50, label %land.rhs, label %land.end, !dbg !4152

land.rhs:                                         ; preds = %while.cond
  %53 = load i8*, i8** @ready_try, align 8, !dbg !4153
  %54 = load i32, i32* %n, align 4, !dbg !4154
  %dec51 = add nsw i32 %54, -1, !dbg !4154
  store i32 %dec51, i32* %n, align 4, !dbg !4154
  %idxprom52 = sext i32 %dec51 to i64, !dbg !4153
  %arrayidx53 = getelementptr inbounds i8, i8* %53, i64 %idxprom52, !dbg !4153
  %55 = load i8, i8* %arrayidx53, align 1, !dbg !4153
  %tobool54 = icmp ne i8 %55, 0, !dbg !4155
  %lnot = xor i1 %tobool54, true, !dbg !4155
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %56 = phi i1 [ false, %while.cond ], [ %lnot, %land.rhs ], !dbg !4156
  br i1 %56, label %while.body, label %while.end, !dbg !4150

while.body:                                       ; preds = %land.end
  br label %while.cond, !dbg !4150, !llvm.loop !4157

while.end:                                        ; preds = %land.end
  br label %if.end55, !dbg !4159

if.end55:                                         ; preds = %while.end, %if.then47
  %57 = load i32, i32* %privileged_n.addr, align 4, !dbg !4160
  %cmp56 = icmp eq i32 %57, 0, !dbg !4162
  br i1 %cmp56, label %if.then63, label %lor.lhs.false58, !dbg !4163

lor.lhs.false58:                                  ; preds = %if.end55
  %58 = load i8*, i8** @ready_try, align 8, !dbg !4164
  %59 = load i32, i32* %n, align 4, !dbg !4165
  %idxprom59 = sext i32 %59 to i64, !dbg !4164
  %arrayidx60 = getelementptr inbounds i8, i8* %58, i64 %idxprom59, !dbg !4164
  %60 = load i8, i8* %arrayidx60, align 1, !dbg !4164
  %conv61 = sext i8 %60 to i32, !dbg !4164
  %tobool62 = icmp ne i32 %conv61, 0, !dbg !4164
  br i1 %tobool62, label %if.then63, label %if.end79, !dbg !4166

if.then63:                                        ; preds = %lor.lhs.false58, %if.end55
  %61 = load %struct.choice_entry*, %struct.choice_entry** %top, align 8, !dbg !4167
  %62 = load %struct.choice_entry*, %struct.choice_entry** @choice_stack, align 8, !dbg !4169
  %sub.ptr.lhs.cast64 = ptrtoint %struct.choice_entry* %61 to i64, !dbg !4170
  %sub.ptr.rhs.cast65 = ptrtoint %struct.choice_entry* %62 to i64, !dbg !4170
  %sub.ptr.sub66 = sub i64 %sub.ptr.lhs.cast64, %sub.ptr.rhs.cast65, !dbg !4170
  %sub.ptr.div67 = sdiv exact i64 %sub.ptr.sub66, 24, !dbg !4170
  %conv68 = trunc i64 %sub.ptr.div67 to i32, !dbg !4167
  store i32 %conv68, i32* %best, align 4, !dbg !4171
  %63 = load %struct.choice_entry*, %struct.choice_entry** @choice_stack, align 8, !dbg !4172
  %arrayidx69 = getelementptr inbounds %struct.choice_entry, %struct.choice_entry* %63, i64 1, !dbg !4172
  %index70 = getelementptr inbounds %struct.choice_entry, %struct.choice_entry* %arrayidx69, i32 0, i32 0, !dbg !4173
  %64 = load i32, i32* %index70, align 8, !dbg !4173
  %65 = load i32*, i32** %index.addr, align 8, !dbg !4174
  store i32 %64, i32* %65, align 4, !dbg !4175
  %66 = load %struct.choice_entry*, %struct.choice_entry** %top, align 8, !dbg !4176
  %n71 = getelementptr inbounds %struct.choice_entry, %struct.choice_entry* %66, i32 0, i32 2, !dbg !4178
  %67 = load i32, i32* %n71, align 8, !dbg !4178
  %68 = load i32, i32* %max_points, align 4, !dbg !4179
  %cmp72 = icmp eq i32 %67, %68, !dbg !4180
  br i1 %cmp72, label %if.then77, label %lor.lhs.false74, !dbg !4181

lor.lhs.false74:                                  ; preds = %if.then63
  %69 = load i32, i32* %best, align 4, !dbg !4182
  %70 = load i32, i32* %all, align 4, !dbg !4183
  %cmp75 = icmp eq i32 %69, %70, !dbg !4184
  br i1 %cmp75, label %if.then77, label %if.end78, !dbg !4185

if.then77:                                        ; preds = %lor.lhs.false74, %if.then63
  br label %for.end130, !dbg !4186

if.end78:                                         ; preds = %lor.lhs.false74
  br label %if.end79, !dbg !4187

if.end79:                                         ; preds = %if.end78, %lor.lhs.false58
  br label %if.end80, !dbg !4188

if.end80:                                         ; preds = %if.end79, %if.end44
  %71 = load %struct.choice_entry*, %struct.choice_entry** %top, align 8, !dbg !4189
  %index81 = getelementptr inbounds %struct.choice_entry, %struct.choice_entry* %71, i32 0, i32 0, !dbg !4190
  %72 = load i32, i32* %index81, align 8, !dbg !4190
  store i32 %72, i32* %i, align 4, !dbg !4191
  %73 = load i8*, i8** @ready_try, align 8, !dbg !4192
  %74 = load i32, i32* %i, align 4, !dbg !4193
  %idxprom82 = sext i32 %74 to i64, !dbg !4192
  %arrayidx83 = getelementptr inbounds i8, i8* %73, i64 %idxprom82, !dbg !4192
  store i8 0, i8* %arrayidx83, align 1, !dbg !4194
  %75 = load %struct.choice_entry*, %struct.choice_entry** %top, align 8, !dbg !4195
  %incdec.ptr = getelementptr inbounds %struct.choice_entry, %struct.choice_entry* %75, i32 -1, !dbg !4195
  store %struct.choice_entry* %incdec.ptr, %struct.choice_entry** %top, align 8, !dbg !4195
  %76 = load i8*, i8** %state.addr, align 8, !dbg !4196
  %77 = load %struct.choice_entry*, %struct.choice_entry** %top, align 8, !dbg !4197
  %state84 = getelementptr inbounds %struct.choice_entry, %struct.choice_entry* %77, i32 0, i32 3, !dbg !4198
  %78 = load i8*, i8** %state84, align 8, !dbg !4198
  %79 = load i64, i64* @dfa_state_size, align 8, !dbg !4199
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %76, i8* align 1 %78, i64 %79, i1 false), !dbg !4200
  br label %if.end128, !dbg !4201

if.else85:                                        ; preds = %lor.lhs.false
  %80 = load i8*, i8** @ready_try, align 8, !dbg !4202
  %81 = load i32, i32* %i, align 4, !dbg !4204
  %idxprom86 = sext i32 %81 to i64, !dbg !4202
  %arrayidx87 = getelementptr inbounds i8, i8* %80, i64 %idxprom86, !dbg !4202
  %82 = load i8, i8* %arrayidx87, align 1, !dbg !4202
  %tobool88 = icmp ne i8 %82, 0, !dbg !4202
  br i1 %tobool88, label %if.end127, label %if.then89, !dbg !4205

if.then89:                                        ; preds = %if.else85
  %83 = load i32, i32* %tries_num, align 4, !dbg !4206
  %inc90 = add nsw i32 %83, 1, !dbg !4206
  store i32 %inc90, i32* %tries_num, align 4, !dbg !4206
  %84 = load i32, i32* %tries_num, align 4, !dbg !4208
  %85 = load i32, i32* @max_lookahead_tries, align 4, !dbg !4210
  %cmp91 = icmp sgt i32 %84, %85, !dbg !4211
  br i1 %cmp91, label %if.then93, label %if.end94, !dbg !4212

if.then93:                                        ; preds = %if.then89
  br label %for.end130, !dbg !4213

if.end94:                                         ; preds = %if.then89
  %86 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !4214
  %87 = load i32, i32* %i, align 4, !dbg !4215
  %call = call %struct.rtx_def* @ready_element(%struct.ready_list* %86, i32 %87), !dbg !4216
  store %struct.rtx_def* %call, %struct.rtx_def** %insn, align 8, !dbg !4217
  %88 = load i8*, i8** %state.addr, align 8, !dbg !4218
  %89 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4219
  %call95 = call i32 @state_transition(i8* %88, %struct.rtx_def* %89), !dbg !4220
  store i32 %call95, i32* %delay, align 4, !dbg !4221
  %90 = load i32, i32* %delay, align 4, !dbg !4222
  %cmp96 = icmp slt i32 %90, 0, !dbg !4224
  br i1 %cmp96, label %if.then98, label %if.end126, !dbg !4225

if.then98:                                        ; preds = %if.end94
  %91 = load i8*, i8** %state.addr, align 8, !dbg !4226
  %call99 = call i32 @state_dead_lock_p(i8* %91), !dbg !4229
  %tobool100 = icmp ne i32 %call99, 0, !dbg !4229
  br i1 %tobool100, label %if.then105, label %lor.lhs.false101, !dbg !4230

lor.lhs.false101:                                 ; preds = %if.then98
  %92 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4231
  %call102 = call zeroext i8 @insn_finishes_cycle_p(%struct.rtx_def* %92), !dbg !4232
  %conv103 = zext i8 %call102 to i32, !dbg !4232
  %tobool104 = icmp ne i32 %conv103, 0, !dbg !4232
  br i1 %tobool104, label %if.then105, label %if.else107, !dbg !4233

if.then105:                                       ; preds = %lor.lhs.false101, %if.then98
  %93 = load %struct.choice_entry*, %struct.choice_entry** %top, align 8, !dbg !4234
  %rest106 = getelementptr inbounds %struct.choice_entry, %struct.choice_entry* %93, i32 0, i32 1, !dbg !4235
  store i32 0, i32* %rest106, align 4, !dbg !4236
  br label %if.end110, !dbg !4234

if.else107:                                       ; preds = %lor.lhs.false101
  %94 = load %struct.choice_entry*, %struct.choice_entry** %top, align 8, !dbg !4237
  %rest108 = getelementptr inbounds %struct.choice_entry, %struct.choice_entry* %94, i32 0, i32 1, !dbg !4238
  %95 = load i32, i32* %rest108, align 4, !dbg !4239
  %dec109 = add nsw i32 %95, -1, !dbg !4239
  store i32 %dec109, i32* %rest108, align 4, !dbg !4239
  br label %if.end110

if.end110:                                        ; preds = %if.else107, %if.then105
  %96 = load %struct.choice_entry*, %struct.choice_entry** %top, align 8, !dbg !4240
  %n111 = getelementptr inbounds %struct.choice_entry, %struct.choice_entry* %96, i32 0, i32 2, !dbg !4241
  %97 = load i32, i32* %n111, align 8, !dbg !4241
  store i32 %97, i32* %n, align 4, !dbg !4242
  %98 = load %struct.choice_entry*, %struct.choice_entry** %top, align 8, !dbg !4243
  %state112 = getelementptr inbounds %struct.choice_entry, %struct.choice_entry* %98, i32 0, i32 3, !dbg !4245
  %99 = load i8*, i8** %state112, align 8, !dbg !4245
  %100 = load i8*, i8** %state.addr, align 8, !dbg !4246
  %101 = load i64, i64* @dfa_state_size, align 8, !dbg !4247
  %call113 = call i32 @memcmp(i8* %99, i8* %100, i64 %101), !dbg !4248
  %cmp114 = icmp ne i32 %call113, 0, !dbg !4249
  br i1 %cmp114, label %if.then116, label %if.end118, !dbg !4250

if.then116:                                       ; preds = %if.end110
  %102 = load i32, i32* %n, align 4, !dbg !4251
  %add117 = add nsw i32 %102, 1, !dbg !4251
  store i32 %add117, i32* %n, align 4, !dbg !4251
  br label %if.end118, !dbg !4252

if.end118:                                        ; preds = %if.then116, %if.end110
  %103 = load %struct.choice_entry*, %struct.choice_entry** %top, align 8, !dbg !4253
  %incdec.ptr119 = getelementptr inbounds %struct.choice_entry, %struct.choice_entry* %103, i32 1, !dbg !4253
  store %struct.choice_entry* %incdec.ptr119, %struct.choice_entry** %top, align 8, !dbg !4253
  %104 = load i32, i32* @dfa_lookahead, align 4, !dbg !4254
  %105 = load %struct.choice_entry*, %struct.choice_entry** %top, align 8, !dbg !4255
  %rest120 = getelementptr inbounds %struct.choice_entry, %struct.choice_entry* %105, i32 0, i32 1, !dbg !4256
  store i32 %104, i32* %rest120, align 4, !dbg !4257
  %106 = load i32, i32* %i, align 4, !dbg !4258
  %107 = load %struct.choice_entry*, %struct.choice_entry** %top, align 8, !dbg !4259
  %index121 = getelementptr inbounds %struct.choice_entry, %struct.choice_entry* %107, i32 0, i32 0, !dbg !4260
  store i32 %106, i32* %index121, align 8, !dbg !4261
  %108 = load i32, i32* %n, align 4, !dbg !4262
  %109 = load %struct.choice_entry*, %struct.choice_entry** %top, align 8, !dbg !4263
  %n122 = getelementptr inbounds %struct.choice_entry, %struct.choice_entry* %109, i32 0, i32 2, !dbg !4264
  store i32 %108, i32* %n122, align 8, !dbg !4265
  %110 = load %struct.choice_entry*, %struct.choice_entry** %top, align 8, !dbg !4266
  %state123 = getelementptr inbounds %struct.choice_entry, %struct.choice_entry* %110, i32 0, i32 3, !dbg !4267
  %111 = load i8*, i8** %state123, align 8, !dbg !4267
  %112 = load i8*, i8** %state.addr, align 8, !dbg !4268
  %113 = load i64, i64* @dfa_state_size, align 8, !dbg !4269
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %111, i8* align 1 %112, i64 %113, i1 false), !dbg !4270
  %114 = load i8*, i8** @ready_try, align 8, !dbg !4271
  %115 = load i32, i32* %i, align 4, !dbg !4272
  %idxprom124 = sext i32 %115 to i64, !dbg !4271
  %arrayidx125 = getelementptr inbounds i8, i8* %114, i64 %idxprom124, !dbg !4271
  store i8 1, i8* %arrayidx125, align 1, !dbg !4273
  store i32 -1, i32* %i, align 4, !dbg !4274
  br label %if.end126, !dbg !4275

if.end126:                                        ; preds = %if.end118, %if.end94
  br label %if.end127, !dbg !4276

if.end127:                                        ; preds = %if.end126, %if.else85
  br label %if.end128

if.end128:                                        ; preds = %if.end127, %if.end80
  %116 = load i32, i32* %i, align 4, !dbg !4277
  %inc129 = add nsw i32 %116, 1, !dbg !4277
  store i32 %inc129, i32* %i, align 4, !dbg !4277
  br label %for.cond32, !dbg !4278, !llvm.loop !4279

for.end130:                                       ; preds = %if.then93, %if.then77, %if.then43
  %117 = load i8*, i8** %state.addr, align 8, !dbg !4282
  %118 = load %struct.choice_entry*, %struct.choice_entry** @choice_stack, align 8, !dbg !4283
  %state131 = getelementptr inbounds %struct.choice_entry, %struct.choice_entry* %118, i32 0, i32 3, !dbg !4284
  %119 = load i8*, i8** %state131, align 8, !dbg !4284
  %120 = load i64, i64* @dfa_state_size, align 8, !dbg !4285
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %117, i8* align 1 %119, i64 %120, i1 false), !dbg !4286
  %121 = load i32, i32* %best, align 4, !dbg !4287
  ret i32 %121, !dbg !4288
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

declare dso_local i32 @state_dead_lock_p(i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @insn_finishes_cycle_p(%struct.rtx_def* %insn) #0 !dbg !4289 {
entry:
  %retval = alloca i8, align 1
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !4290, metadata !DIExpression()), !dbg !4291
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4292
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !4292
  %bf.load = load i32, i32* %1, align 8, !dbg !4292
  %bf.lshr = lshr i32 %bf.load, 28, !dbg !4292
  %bf.clear = and i32 %bf.lshr, 1, !dbg !4292
  %tobool = icmp ne i32 %bf.clear, 0, !dbg !4292
  br i1 %tobool, label %if.then, label %if.end, !dbg !4294

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !4295
  br label %return, !dbg !4295

if.end:                                           ; preds = %entry
  %2 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !4296
  %insn_finishes_block_p = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %2, i32 0, i32 7, !dbg !4298
  %3 = load i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)** %insn_finishes_block_p, align 8, !dbg !4298
  %tobool1 = icmp ne i8 (%struct.rtx_def*)* %3, null, !dbg !4296
  br i1 %tobool1, label %land.lhs.true, label %if.end5, !dbg !4299

land.lhs.true:                                    ; preds = %if.end
  %4 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !4300
  %insn_finishes_block_p2 = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %4, i32 0, i32 7, !dbg !4301
  %5 = load i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)** %insn_finishes_block_p2, align 8, !dbg !4301
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4302
  %call = call zeroext i8 %5(%struct.rtx_def* %6), !dbg !4300
  %conv = zext i8 %call to i32, !dbg !4300
  %tobool3 = icmp ne i32 %conv, 0, !dbg !4300
  br i1 %tobool3, label %if.then4, label %if.end5, !dbg !4303

if.then4:                                         ; preds = %land.lhs.true
  store i8 1, i8* %retval, align 1, !dbg !4304
  br label %return, !dbg !4304

if.end5:                                          ; preds = %land.lhs.true, %if.end
  store i8 0, i8* %retval, align 1, !dbg !4305
  br label %return, !dbg !4305

return:                                           ; preds = %if.end5, %if.then4, %if.then
  %7 = load i8, i8* %retval, align 1, !dbg !4306
  ret i8 %7, !dbg !4306
}

declare dso_local i32 @memcmp(i8*, i8*, i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @schedule_block(%struct.basic_block_def** %target_bb) #0 !dbg !4307 {
entry:
  %target_bb.addr = alloca %struct.basic_block_def**, align 8
  %i = alloca i32, align 4
  %first_cycle_insn_p = alloca i32, align 4
  %can_issue_more = alloca i32, align 4
  %temp_state = alloca i8*, align 8
  %sort_p = alloca i32, align 4
  %advance = alloca i32, align 4
  %start_clock_var = alloca i32, align 4
  %prev_head = alloca %struct.rtx_def*, align 8
  %next_tail = alloca %struct.rtx_def*, align 8
  %head = alloca %struct.rtx_def*, align 8
  %tail = alloca %struct.rtx_def*, align 8
  %skip_insn = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %x = alloca %struct.rtx_def*, align 8
  %insn142 = alloca %struct.rtx_def*, align 8
  %insn187 = alloca %struct.rtx_def*, align 8
  %cost = alloca i32, align 4
  %asm_p = alloca i8, align 1
  %res = alloca i32, align 4
  %x379 = alloca %struct.rtx_def*, align 8
  %x456 = alloca %struct.rtx_def*, align 8
  %x544 = alloca %struct.rtx_def*, align 8
  %link = alloca %struct.rtx_def*, align 8
  %x596 = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def** %target_bb, %struct.basic_block_def*** %target_bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %target_bb.addr, metadata !4311, metadata !DIExpression()), !dbg !4312
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4313, metadata !DIExpression()), !dbg !4314
  call void @llvm.dbg.declare(metadata i32* %first_cycle_insn_p, metadata !4315, metadata !DIExpression()), !dbg !4316
  call void @llvm.dbg.declare(metadata i32* %can_issue_more, metadata !4317, metadata !DIExpression()), !dbg !4318
  call void @llvm.dbg.declare(metadata i8** %temp_state, metadata !4319, metadata !DIExpression()), !dbg !4320
  store i8* null, i8** %temp_state, align 8, !dbg !4320
  call void @llvm.dbg.declare(metadata i32* %sort_p, metadata !4321, metadata !DIExpression()), !dbg !4322
  call void @llvm.dbg.declare(metadata i32* %advance, metadata !4323, metadata !DIExpression()), !dbg !4324
  call void @llvm.dbg.declare(metadata i32* %start_clock_var, metadata !4325, metadata !DIExpression()), !dbg !4326
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %prev_head, metadata !4327, metadata !DIExpression()), !dbg !4328
  %0 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !4329
  %prev_head1 = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %0, i32 0, i32 8, !dbg !4330
  %1 = load %struct.rtx_def*, %struct.rtx_def** %prev_head1, align 8, !dbg !4330
  store %struct.rtx_def* %1, %struct.rtx_def** %prev_head, align 8, !dbg !4328
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %next_tail, metadata !4331, metadata !DIExpression()), !dbg !4332
  %2 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !4333
  %next_tail2 = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %2, i32 0, i32 9, !dbg !4334
  %3 = load %struct.rtx_def*, %struct.rtx_def** %next_tail2, align 8, !dbg !4334
  store %struct.rtx_def* %3, %struct.rtx_def** %next_tail, align 8, !dbg !4332
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %head, metadata !4335, metadata !DIExpression()), !dbg !4336
  %4 = load %struct.rtx_def*, %struct.rtx_def** %prev_head, align 8, !dbg !4337
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !4337
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4337
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !4337
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4337
  %5 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4337
  store %struct.rtx_def* %5, %struct.rtx_def** %head, align 8, !dbg !4336
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tail, metadata !4338, metadata !DIExpression()), !dbg !4339
  %6 = load %struct.rtx_def*, %struct.rtx_def** %next_tail, align 8, !dbg !4340
  %u3 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !4340
  %fld4 = bitcast %union.u* %u3 to [1 x %union.rtunion_def]*, !dbg !4340
  %arrayidx5 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld4, i64 0, i64 1, !dbg !4340
  %rt_rtx6 = bitcast %union.rtunion_def* %arrayidx5 to %struct.rtx_def**, !dbg !4340
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx6, align 8, !dbg !4340
  store %struct.rtx_def* %7, %struct.rtx_def** %tail, align 8, !dbg !4339
  %8 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !4341
  %9 = load %struct.rtx_def*, %struct.rtx_def** %tail, align 8, !dbg !4341
  %cmp = icmp ne %struct.rtx_def* %8, %9, !dbg !4341
  br i1 %cmp, label %cond.false, label %lor.lhs.false, !dbg !4341

lor.lhs.false:                                    ; preds = %entry
  %10 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !4341
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !4341
  %bf.load = load i32, i32* %11, align 8, !dbg !4341
  %bf.clear = and i32 %bf.load, 65535, !dbg !4341
  %cmp7 = icmp eq i32 %bf.clear, 8, !dbg !4341
  br i1 %cmp7, label %cond.false, label %lor.lhs.false8, !dbg !4341

lor.lhs.false8:                                   ; preds = %lor.lhs.false
  %12 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !4341
  %13 = bitcast %struct.rtx_def* %12 to i32*, !dbg !4341
  %bf.load9 = load i32, i32* %13, align 8, !dbg !4341
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !4341
  %cmp11 = icmp eq i32 %bf.clear10, 7, !dbg !4341
  br i1 %cmp11, label %cond.false, label %lor.lhs.false12, !dbg !4341

lor.lhs.false12:                                  ; preds = %lor.lhs.false8
  %14 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !4341
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !4341
  %bf.load13 = load i32, i32* %15, align 8, !dbg !4341
  %bf.clear14 = and i32 %bf.load13, 65535, !dbg !4341
  %cmp15 = icmp eq i32 %bf.clear14, 9, !dbg !4341
  br i1 %cmp15, label %cond.false, label %lor.lhs.false16, !dbg !4341

lor.lhs.false16:                                  ; preds = %lor.lhs.false12
  %16 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !4341
  %17 = bitcast %struct.rtx_def* %16 to i32*, !dbg !4341
  %bf.load17 = load i32, i32* %17, align 8, !dbg !4341
  %bf.clear18 = and i32 %bf.load17, 65535, !dbg !4341
  %cmp19 = icmp eq i32 %bf.clear18, 10, !dbg !4341
  br i1 %cmp19, label %cond.false, label %cond.true, !dbg !4341

cond.true:                                        ; preds = %lor.lhs.false16
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 2780, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4341
  br label %cond.end, !dbg !4341

cond.false:                                       ; preds = %lor.lhs.false16, %lor.lhs.false12, %lor.lhs.false8, %lor.lhs.false, %entry
  br label %cond.end, !dbg !4341

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4341
  store i8 0, i8* @haifa_recovery_bb_recently_added_p, align 1, !dbg !4342
  %18 = load i32, i32* @sched_verbose, align 4, !dbg !4343
  %tobool = icmp ne i32 %18, 0, !dbg !4343
  br i1 %tobool, label %if.then, label %if.end, !dbg !4345

if.then:                                          ; preds = %cond.end
  %19 = load %struct.basic_block_def**, %struct.basic_block_def*** %target_bb.addr, align 8, !dbg !4346
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %19, align 8, !dbg !4347
  %21 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !4348
  %22 = load %struct.rtx_def*, %struct.rtx_def** %tail, align 8, !dbg !4349
  call void @dump_new_block_header(i32 0, %struct.basic_block_def* %20, %struct.rtx_def* %21, %struct.rtx_def* %22), !dbg !4350
  br label %if.end, !dbg !4350

if.end:                                           ; preds = %if.then, %cond.end
  %23 = load i8*, i8** @curr_state, align 8, !dbg !4351
  call void @state_reset(i8* %23), !dbg !4352
  %24 = load i32, i32* getelementptr inbounds (%struct.ready_list, %struct.ready_list* @ready, i32 0, i32 1), align 8, !dbg !4353
  %sub = sub nsw i32 %24, 1, !dbg !4354
  store i32 %sub, i32* getelementptr inbounds (%struct.ready_list, %struct.ready_list* @ready, i32 0, i32 2), align 4, !dbg !4355
  store i32 0, i32* getelementptr inbounds (%struct.ready_list, %struct.ready_list* @ready, i32 0, i32 3), align 8, !dbg !4356
  store i32 0, i32* getelementptr inbounds (%struct.ready_list, %struct.ready_list* @ready, i32 0, i32 4), align 4, !dbg !4357
  %25 = load i64, i64* @dfa_state_size, align 8, !dbg !4358
  %26 = alloca i8, i64 %25, align 16, !dbg !4358
  store i8* %26, i8** %temp_state, align 8, !dbg !4359
  %27 = load void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32, i32)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 4), align 8, !dbg !4360
  %tobool20 = icmp ne void (%struct._IO_FILE*, i32, i32)* %27, null, !dbg !4362
  br i1 %tobool20, label %if.then21, label %if.end22, !dbg !4363

if.then21:                                        ; preds = %if.end
  %28 = load void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32, i32)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 4), align 8, !dbg !4364
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !4365
  %30 = load i32, i32* @sched_verbose, align 4, !dbg !4366
  %31 = load i32, i32* getelementptr inbounds (%struct.ready_list, %struct.ready_list* @ready, i32 0, i32 1), align 8, !dbg !4367
  call void %28(%struct._IO_FILE* %29, i32 %30, i32 %31), !dbg !4368
  br label %if.end22, !dbg !4368

if.end22:                                         ; preds = %if.then21, %if.end
  %32 = load %struct.rtx_def*, %struct.rtx_def** %prev_head, align 8, !dbg !4369
  store %struct.rtx_def* %32, %struct.rtx_def** @last_scheduled_insn, align 8, !dbg !4370
  %33 = load %struct.rtx_def*, %struct.rtx_def** @last_scheduled_insn, align 8, !dbg !4371
  %34 = bitcast %struct.rtx_def* %33 to i32*, !dbg !4371
  %bf.load23 = load i32, i32* %34, align 8, !dbg !4371
  %bf.clear24 = and i32 %bf.load23, 65535, !dbg !4371
  %cmp25 = icmp eq i32 %bf.clear24, 13, !dbg !4371
  br i1 %cmp25, label %land.lhs.true33, label %lor.lhs.false26, !dbg !4371

lor.lhs.false26:                                  ; preds = %if.end22
  %35 = load %struct.rtx_def*, %struct.rtx_def** @last_scheduled_insn, align 8, !dbg !4371
  %36 = bitcast %struct.rtx_def* %35 to i32*, !dbg !4371
  %bf.load27 = load i32, i32* %36, align 8, !dbg !4371
  %bf.clear28 = and i32 %bf.load27, 65535, !dbg !4371
  %cmp29 = icmp eq i32 %bf.clear28, 7, !dbg !4371
  br i1 %cmp29, label %land.lhs.true, label %cond.true38, !dbg !4371

land.lhs.true:                                    ; preds = %lor.lhs.false26
  %37 = load %struct.rtx_def*, %struct.rtx_def** @last_scheduled_insn, align 8, !dbg !4371
  %38 = bitcast %struct.rtx_def* %37 to i32*, !dbg !4371
  %bf.load30 = load i32, i32* %38, align 8, !dbg !4371
  %bf.lshr = lshr i32 %bf.load30, 26, !dbg !4371
  %bf.clear31 = and i32 %bf.lshr, 1, !dbg !4371
  %tobool32 = icmp ne i32 %bf.clear31, 0, !dbg !4371
  br i1 %tobool32, label %cond.true38, label %land.lhs.true33, !dbg !4371

land.lhs.true33:                                  ; preds = %land.lhs.true, %if.end22
  %39 = load %struct.rtx_def*, %struct.rtx_def** @last_scheduled_insn, align 8, !dbg !4371
  %u34 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1, !dbg !4371
  %fld35 = bitcast %union.u* %u34 to [1 x %union.rtunion_def]*, !dbg !4371
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld35, i64 0, i64 3, !dbg !4371
  %rt_bb = bitcast %union.rtunion_def* %arrayidx36 to %struct.basic_block_def**, !dbg !4371
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !4371
  %41 = load %struct.basic_block_def**, %struct.basic_block_def*** %target_bb.addr, align 8, !dbg !4371
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %41, align 8, !dbg !4371
  %cmp37 = icmp eq %struct.basic_block_def* %40, %42, !dbg !4371
  br i1 %cmp37, label %cond.false39, label %cond.true38, !dbg !4371

cond.true38:                                      ; preds = %land.lhs.true33, %land.lhs.true, %lor.lhs.false26
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 2806, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4371
  br label %cond.end40, !dbg !4371

cond.false39:                                     ; preds = %land.lhs.true33
  br label %cond.end40, !dbg !4371

cond.end40:                                       ; preds = %cond.false39, %cond.true38
  %cond41 = phi i32 [ 0, %cond.true38 ], [ 0, %cond.false39 ], !dbg !4371
  store i32 0, i32* @q_ptr, align 4, !dbg !4372
  store i32 0, i32* @q_size, align 4, !dbg !4373
  %43 = load i32, i32* @max_insn_queue_index, align 4, !dbg !4374
  %add = add nsw i32 %43, 1, !dbg !4374
  %conv = sext i32 %add to i64, !dbg !4374
  %mul = mul i64 8, %conv, !dbg !4374
  %44 = alloca i8, i64 %mul, align 16, !dbg !4374
  %45 = bitcast i8* %44 to %struct.rtx_def**, !dbg !4374
  store %struct.rtx_def** %45, %struct.rtx_def*** @insn_queue, align 8, !dbg !4375
  %46 = load %struct.rtx_def**, %struct.rtx_def*** @insn_queue, align 8, !dbg !4376
  %47 = bitcast %struct.rtx_def** %46 to i8*, !dbg !4377
  %48 = load i32, i32* @max_insn_queue_index, align 4, !dbg !4378
  %add42 = add nsw i32 %48, 1, !dbg !4379
  %conv43 = sext i32 %add42 to i64, !dbg !4380
  %mul44 = mul i64 %conv43, 8, !dbg !4381
  call void @llvm.memset.p0i8.i64(i8* align 8 %47, i8 0, i64 %mul44, i1 false), !dbg !4377
  store i32 -1, i32* @clock_var, align 4, !dbg !4382
  %49 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !4383
  %init_ready_list = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %49, i32 0, i32 0, !dbg !4384
  %50 = load void ()*, void ()** %init_ready_list, align 8, !dbg !4384
  call void %50(), !dbg !4385
  %51 = load i32, i32* @reload_completed, align 4, !dbg !4386
  %tobool45 = icmp ne i32 %51, 0, !dbg !4386
  br i1 %tobool45, label %if.end83, label %land.lhs.true46, !dbg !4388

land.lhs.true46:                                  ; preds = %cond.end40
  %52 = load i32, i32* getelementptr inbounds (%struct.ready_list, %struct.ready_list* @ready, i32 0, i32 3), align 8, !dbg !4389
  %53 = load i32, i32* getelementptr inbounds (%struct.ready_list, %struct.ready_list* @ready, i32 0, i32 4), align 4, !dbg !4390
  %sub47 = sub nsw i32 %52, %53, !dbg !4391
  %54 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !4392
  %arrayidx48 = getelementptr inbounds %struct.param_info, %struct.param_info* %54, i64 96, !dbg !4392
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx48, i32 0, i32 1, !dbg !4392
  %55 = load i32, i32* %value, align 8, !dbg !4392
  %cmp49 = icmp sgt i32 %sub47, %55, !dbg !4393
  br i1 %cmp49, label %if.then51, label %if.end83, !dbg !4394

if.then51:                                        ; preds = %land.lhs.true46
  call void @ready_sort(%struct.ready_list* @ready), !dbg !4395
  %56 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !4397
  %arrayidx52 = getelementptr inbounds %struct.param_info, %struct.param_info* %56, i64 96, !dbg !4397
  %value53 = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx52, i32 0, i32 1, !dbg !4397
  %57 = load i32, i32* %value53, align 8, !dbg !4397
  %58 = load i32, i32* getelementptr inbounds (%struct.ready_list, %struct.ready_list* @ready, i32 0, i32 4), align 4, !dbg !4399
  %add54 = add nsw i32 %57, %58, !dbg !4400
  store i32 %add54, i32* %i, align 4, !dbg !4401
  br label %for.cond, !dbg !4402

for.cond:                                         ; preds = %for.inc, %if.then51
  %59 = load i32, i32* %i, align 4, !dbg !4403
  %60 = load i32, i32* getelementptr inbounds (%struct.ready_list, %struct.ready_list* @ready, i32 0, i32 3), align 8, !dbg !4405
  %cmp55 = icmp slt i32 %59, %60, !dbg !4406
  br i1 %cmp55, label %for.body, label %for.end, !dbg !4407

for.body:                                         ; preds = %for.cond
  %61 = load i32, i32* %i, align 4, !dbg !4408
  %call = call %struct.rtx_def* @ready_element(%struct.ready_list* @ready, i32 %61), !dbg !4408
  %62 = bitcast %struct.rtx_def* %call to i32*, !dbg !4408
  %bf.load57 = load i32, i32* %62, align 8, !dbg !4408
  %bf.lshr58 = lshr i32 %bf.load57, 28, !dbg !4408
  %bf.clear59 = and i32 %bf.lshr58, 1, !dbg !4408
  %tobool60 = icmp ne i32 %bf.clear59, 0, !dbg !4408
  br i1 %tobool60, label %if.end62, label %if.then61, !dbg !4410

if.then61:                                        ; preds = %for.body
  br label %for.end, !dbg !4411

if.end62:                                         ; preds = %for.body
  br label %for.inc, !dbg !4408

for.inc:                                          ; preds = %if.end62
  %63 = load i32, i32* %i, align 4, !dbg !4412
  %inc = add nsw i32 %63, 1, !dbg !4412
  store i32 %inc, i32* %i, align 4, !dbg !4412
  br label %for.cond, !dbg !4413, !llvm.loop !4414

for.end:                                          ; preds = %if.then61, %for.cond
  %64 = load i32, i32* @sched_verbose, align 4, !dbg !4416
  %cmp63 = icmp sge i32 %64, 2, !dbg !4418
  br i1 %cmp63, label %if.then65, label %if.end68, !dbg !4419

if.then65:                                        ; preds = %for.end
  %65 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !4420
  %66 = load i32, i32* getelementptr inbounds (%struct.ready_list, %struct.ready_list* @ready, i32 0, i32 3), align 8, !dbg !4422
  %call66 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %65, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.4, i64 0, i64 0), i32 %66), !dbg !4423
  %67 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !4424
  %68 = load i32, i32* %i, align 4, !dbg !4425
  %call67 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %67, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.5, i64 0, i64 0), i32 %68), !dbg !4426
  br label %if.end68, !dbg !4427

if.end68:                                         ; preds = %if.then65, %for.end
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %skip_insn, metadata !4428, metadata !DIExpression()), !dbg !4430
  %call69 = call zeroext i8 @dbg_cnt(i32 29), !dbg !4431
  %conv70 = zext i8 %call69 to i32, !dbg !4431
  %cmp71 = icmp eq i32 %conv70, 0, !dbg !4433
  br i1 %cmp71, label %if.then73, label %if.else, !dbg !4434

if.then73:                                        ; preds = %if.end68
  %69 = load %struct.rtx_def*, %struct.rtx_def** @last_scheduled_insn, align 8, !dbg !4435
  %call74 = call %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %69), !dbg !4436
  store %struct.rtx_def* %call74, %struct.rtx_def** %skip_insn, align 8, !dbg !4437
  br label %if.end75, !dbg !4438

if.else:                                          ; preds = %if.end68
  store %struct.rtx_def* null, %struct.rtx_def** %skip_insn, align 8, !dbg !4439
  br label %if.end75

if.end75:                                         ; preds = %if.else, %if.then73
  br label %while.cond, !dbg !4440

while.cond:                                       ; preds = %if.end82, %if.end75
  %70 = load i32, i32* %i, align 4, !dbg !4441
  %71 = load i32, i32* getelementptr inbounds (%struct.ready_list, %struct.ready_list* @ready, i32 0, i32 3), align 8, !dbg !4442
  %cmp76 = icmp slt i32 %70, %71, !dbg !4443
  br i1 %cmp76, label %while.body, label %while.end, !dbg !4440

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !4444, metadata !DIExpression()), !dbg !4446
  %72 = load i32, i32* %i, align 4, !dbg !4447
  %call78 = call %struct.rtx_def* @ready_remove(%struct.ready_list* @ready, i32 %72), !dbg !4448
  store %struct.rtx_def* %call78, %struct.rtx_def** %insn, align 8, !dbg !4449
  %73 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4450
  %74 = load %struct.rtx_def*, %struct.rtx_def** %skip_insn, align 8, !dbg !4452
  %cmp79 = icmp ne %struct.rtx_def* %73, %74, !dbg !4453
  br i1 %cmp79, label %if.then81, label %if.end82, !dbg !4454

if.then81:                                        ; preds = %while.body
  %75 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4455
  call void @queue_insn(%struct.rtx_def* %75, i32 1), !dbg !4456
  br label %if.end82, !dbg !4456

if.end82:                                         ; preds = %if.then81, %while.body
  br label %while.cond, !dbg !4440, !llvm.loop !4457

while.end:                                        ; preds = %while.cond
  br label %if.end83, !dbg !4459

if.end83:                                         ; preds = %while.end, %land.lhs.true46, %cond.end40
  %76 = load %struct.basic_block_def**, %struct.basic_block_def*** %target_bb.addr, align 8, !dbg !4460
  %77 = load %struct.basic_block_def*, %struct.basic_block_def** %76, align 8, !dbg !4461
  call void @restore_bb_notes(%struct.basic_block_def* %77), !dbg !4462
  store i32 -1, i32* @last_clock_var, align 4, !dbg !4463
  store i32 0, i32* %advance, align 4, !dbg !4464
  store i32 1, i32* %sort_p, align 4, !dbg !4465
  br label %while.cond84, !dbg !4466

while.cond84:                                     ; preds = %for.end519, %if.then166, %if.end83
  %78 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !4467
  %schedule_more_p = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %78, i32 0, i32 2, !dbg !4468
  %79 = load i32 ()*, i32 ()** %schedule_more_p, align 8, !dbg !4468
  %call85 = call i32 %79(), !dbg !4469
  %tobool86 = icmp ne i32 %call85, 0, !dbg !4466
  br i1 %tobool86, label %while.body87, label %while.end520, !dbg !4466

while.body87:                                     ; preds = %while.cond84
  br label %do.body, !dbg !4470

do.body:                                          ; preds = %do.cond, %while.body87
  %80 = load i32, i32* @clock_var, align 4, !dbg !4472
  store i32 %80, i32* %start_clock_var, align 4, !dbg !4474
  %81 = load i32, i32* @clock_var, align 4, !dbg !4475
  %inc88 = add nsw i32 %81, 1, !dbg !4475
  store i32 %inc88, i32* @clock_var, align 4, !dbg !4475
  call void @advance_one_cycle(), !dbg !4476
  call void @queue_to_ready(%struct.ready_list* @ready), !dbg !4477
  %82 = load i32, i32* getelementptr inbounds (%struct.ready_list, %struct.ready_list* @ready, i32 0, i32 3), align 8, !dbg !4478
  %tobool89 = icmp ne i32 %82, 0, !dbg !4478
  br i1 %tobool89, label %cond.false91, label %cond.true90, !dbg !4478

cond.true90:                                      ; preds = %do.body
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 2893, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4478
  br label %cond.end92, !dbg !4478

cond.false91:                                     ; preds = %do.body
  br label %cond.end92, !dbg !4478

cond.end92:                                       ; preds = %cond.false91, %cond.true90
  %cond93 = phi i32 [ 0, %cond.true90 ], [ 0, %cond.false91 ], !dbg !4478
  %83 = load i32, i32* @sched_verbose, align 4, !dbg !4479
  %cmp94 = icmp sge i32 %83, 2, !dbg !4481
  br i1 %cmp94, label %if.then96, label %if.end98, !dbg !4482

if.then96:                                        ; preds = %cond.end92
  %84 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !4483
  %call97 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %84, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.6, i64 0, i64 0)), !dbg !4485
  call void @debug_ready_list(%struct.ready_list* @ready), !dbg !4486
  br label %if.end98, !dbg !4487

if.end98:                                         ; preds = %if.then96, %cond.end92
  %85 = load i32, i32* @clock_var, align 4, !dbg !4488
  %86 = load i32, i32* %start_clock_var, align 4, !dbg !4489
  %sub99 = sub nsw i32 %85, %86, !dbg !4490
  %87 = load i32, i32* %advance, align 4, !dbg !4491
  %sub100 = sub nsw i32 %87, %sub99, !dbg !4491
  store i32 %sub100, i32* %advance, align 4, !dbg !4491
  br label %do.cond, !dbg !4492

do.cond:                                          ; preds = %if.end98
  %88 = load i32, i32* %advance, align 4, !dbg !4493
  %cmp101 = icmp sgt i32 %88, 0, !dbg !4494
  br i1 %cmp101, label %do.body, label %do.end, !dbg !4492, !llvm.loop !4495

do.end:                                           ; preds = %do.cond
  %89 = load i32, i32* %sort_p, align 4, !dbg !4497
  %tobool103 = icmp ne i32 %89, 0, !dbg !4497
  br i1 %tobool103, label %if.then104, label %if.end110, !dbg !4499

if.then104:                                       ; preds = %do.end
  call void @ready_sort(%struct.ready_list* @ready), !dbg !4500
  %90 = load i32, i32* @sched_verbose, align 4, !dbg !4502
  %cmp105 = icmp sge i32 %90, 2, !dbg !4504
  br i1 %cmp105, label %if.then107, label %if.end109, !dbg !4505

if.then107:                                       ; preds = %if.then104
  %91 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !4506
  %call108 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %91, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7, i64 0, i64 0)), !dbg !4508
  call void @debug_ready_list(%struct.ready_list* @ready), !dbg !4509
  br label %if.end109, !dbg !4510

if.end109:                                        ; preds = %if.then107, %if.then104
  br label %if.end110, !dbg !4511

if.end110:                                        ; preds = %if.end109, %do.end
  %92 = load i32, i32* getelementptr inbounds (%struct.ready_list, %struct.ready_list* @ready, i32 0, i32 3), align 8, !dbg !4512
  %tobool111 = icmp ne i32 %92, 0, !dbg !4514
  br i1 %tobool111, label %land.lhs.true112, label %if.end168, !dbg !4515

land.lhs.true112:                                 ; preds = %if.end110
  %call113 = call %struct.rtx_def* @ready_element(%struct.ready_list* @ready, i32 0), !dbg !4516
  %93 = bitcast %struct.rtx_def* %call113 to i32*, !dbg !4516
  %bf.load114 = load i32, i32* %93, align 8, !dbg !4516
  %bf.clear115 = and i32 %bf.load114, 65535, !dbg !4516
  %cmp116 = icmp eq i32 %bf.clear115, 7, !dbg !4516
  br i1 %cmp116, label %if.then118, label %if.end168, !dbg !4517

if.then118:                                       ; preds = %land.lhs.true112
  %94 = load %struct.rtx_def*, %struct.rtx_def** @last_scheduled_insn, align 8, !dbg !4518
  %call119 = call zeroext i8 @control_flow_insn_p(%struct.rtx_def* %94), !dbg !4521
  %tobool120 = icmp ne i8 %call119, 0, !dbg !4521
  br i1 %tobool120, label %if.then121, label %if.end133, !dbg !4522

if.then121:                                       ; preds = %if.then118
  %95 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !4523
  %advance_target_bb = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %95, i32 0, i32 16, !dbg !4525
  %96 = load %struct.basic_block_def* (%struct.basic_block_def*, %struct.rtx_def*)*, %struct.basic_block_def* (%struct.basic_block_def*, %struct.rtx_def*)** %advance_target_bb, align 8, !dbg !4525
  %97 = load %struct.basic_block_def**, %struct.basic_block_def*** %target_bb.addr, align 8, !dbg !4526
  %98 = load %struct.basic_block_def*, %struct.basic_block_def** %97, align 8, !dbg !4527
  %call122 = call %struct.basic_block_def* %96(%struct.basic_block_def* %98, %struct.rtx_def* null), !dbg !4523
  %99 = load %struct.basic_block_def**, %struct.basic_block_def*** %target_bb.addr, align 8, !dbg !4528
  store %struct.basic_block_def* %call122, %struct.basic_block_def** %99, align 8, !dbg !4529
  %100 = load i32, i32* @sched_verbose, align 4, !dbg !4530
  %tobool123 = icmp ne i32 %100, 0, !dbg !4530
  br i1 %tobool123, label %if.then124, label %if.end131, !dbg !4532

if.then124:                                       ; preds = %if.then121
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !4533, metadata !DIExpression()), !dbg !4535
  %101 = load %struct.rtx_def*, %struct.rtx_def** @last_scheduled_insn, align 8, !dbg !4536
  %call125 = call %struct.rtx_def* @next_real_insn(%struct.rtx_def* %101), !dbg !4537
  store %struct.rtx_def* %call125, %struct.rtx_def** %x, align 8, !dbg !4538
  %102 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4539
  %tobool126 = icmp ne %struct.rtx_def* %102, null, !dbg !4539
  br i1 %tobool126, label %cond.false128, label %cond.true127, !dbg !4539

cond.true127:                                     ; preds = %if.then124
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 2930, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4539
  br label %cond.end129, !dbg !4539

cond.false128:                                    ; preds = %if.then124
  br label %cond.end129, !dbg !4539

cond.end129:                                      ; preds = %cond.false128, %cond.true127
  %cond130 = phi i32 [ 0, %cond.true127 ], [ 0, %cond.false128 ], !dbg !4539
  %103 = load %struct.basic_block_def**, %struct.basic_block_def*** %target_bb.addr, align 8, !dbg !4540
  %104 = load %struct.basic_block_def*, %struct.basic_block_def** %103, align 8, !dbg !4541
  %105 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4542
  %106 = load %struct.rtx_def*, %struct.rtx_def** %tail, align 8, !dbg !4543
  call void @dump_new_block_header(i32 1, %struct.basic_block_def* %104, %struct.rtx_def* %105, %struct.rtx_def* %106), !dbg !4544
  br label %if.end131, !dbg !4545

if.end131:                                        ; preds = %cond.end129, %if.then121
  %107 = load %struct.basic_block_def**, %struct.basic_block_def*** %target_bb.addr, align 8, !dbg !4546
  %108 = load %struct.basic_block_def*, %struct.basic_block_def** %107, align 8, !dbg !4547
  %call132 = call %struct.rtx_def* @bb_note(%struct.basic_block_def* %108), !dbg !4548
  store %struct.rtx_def* %call132, %struct.rtx_def** @last_scheduled_insn, align 8, !dbg !4549
  br label %if.end133, !dbg !4550

if.end133:                                        ; preds = %if.end131, %if.then118
  br label %while.cond134, !dbg !4551

while.cond134:                                    ; preds = %if.end163, %if.end133
  %109 = load i32, i32* getelementptr inbounds (%struct.ready_list, %struct.ready_list* @ready, i32 0, i32 3), align 8, !dbg !4552
  %tobool135 = icmp ne i32 %109, 0, !dbg !4553
  br i1 %tobool135, label %land.rhs, label %land.end, !dbg !4554

land.rhs:                                         ; preds = %while.cond134
  %call136 = call %struct.rtx_def* @ready_element(%struct.ready_list* @ready, i32 0), !dbg !4555
  %110 = bitcast %struct.rtx_def* %call136 to i32*, !dbg !4555
  %bf.load137 = load i32, i32* %110, align 8, !dbg !4555
  %bf.clear138 = and i32 %bf.load137, 65535, !dbg !4555
  %cmp139 = icmp eq i32 %bf.clear138, 7, !dbg !4555
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond134
  %111 = phi i1 [ false, %while.cond134 ], [ %cmp139, %land.rhs ], !dbg !4556
  br i1 %111, label %while.body141, label %while.end164, !dbg !4551

while.body141:                                    ; preds = %land.end
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn142, metadata !4557, metadata !DIExpression()), !dbg !4559
  %call143 = call %struct.rtx_def* @ready_remove_first(%struct.ready_list* @ready), !dbg !4560
  store %struct.rtx_def* %call143, %struct.rtx_def** %insn142, align 8, !dbg !4559
  %112 = load %struct.rtx_def*, %struct.rtx_def** %insn142, align 8, !dbg !4561
  %113 = bitcast %struct.rtx_def* %112 to i32*, !dbg !4561
  %bf.load144 = load i32, i32* %113, align 8, !dbg !4561
  %bf.clear145 = and i32 %bf.load144, 65535, !dbg !4561
  %cmp146 = icmp eq i32 %bf.clear145, 7, !dbg !4561
  br i1 %cmp146, label %cond.false149, label %cond.true148, !dbg !4561

cond.true148:                                     ; preds = %while.body141
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 2940, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4561
  br label %cond.end150, !dbg !4561

cond.false149:                                    ; preds = %while.body141
  br label %cond.end150, !dbg !4561

cond.end150:                                      ; preds = %cond.false149, %cond.true148
  %cond151 = phi i32 [ 0, %cond.true148 ], [ 0, %cond.false149 ], !dbg !4561
  %114 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !4562
  %begin_schedule_ready = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %114, i32 0, i32 15, !dbg !4563
  %115 = load void (%struct.rtx_def*, %struct.rtx_def*)*, void (%struct.rtx_def*, %struct.rtx_def*)** %begin_schedule_ready, align 8, !dbg !4563
  %116 = load %struct.rtx_def*, %struct.rtx_def** %insn142, align 8, !dbg !4564
  %117 = load %struct.rtx_def*, %struct.rtx_def** @last_scheduled_insn, align 8, !dbg !4565
  call void %115(%struct.rtx_def* %116, %struct.rtx_def* %117), !dbg !4566
  %118 = load %struct.rtx_def*, %struct.rtx_def** %insn142, align 8, !dbg !4567
  %119 = load %struct.rtx_def*, %struct.rtx_def** @last_scheduled_insn, align 8, !dbg !4568
  %120 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !4569
  %next_tail152 = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %120, i32 0, i32 9, !dbg !4570
  %121 = load %struct.rtx_def*, %struct.rtx_def** %next_tail152, align 8, !dbg !4570
  call void @move_insn(%struct.rtx_def* %118, %struct.rtx_def* %119, %struct.rtx_def* %121), !dbg !4571
  %122 = load %struct.rtx_def*, %struct.rtx_def** %insn142, align 8, !dbg !4572
  store %struct.rtx_def* %122, %struct.rtx_def** @last_scheduled_insn, align 8, !dbg !4573
  %123 = load %struct.rtx_def*, %struct.rtx_def** %insn142, align 8, !dbg !4574
  %call153 = call i32 @schedule_insn(%struct.rtx_def* %123), !dbg !4575
  store i32 %call153, i32* %advance, align 4, !dbg !4576
  %124 = load i32, i32* %advance, align 4, !dbg !4577
  %cmp154 = icmp eq i32 %124, 0, !dbg !4577
  br i1 %cmp154, label %cond.false157, label %cond.true156, !dbg !4577

cond.true156:                                     ; preds = %cond.end150
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 2947, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4577
  br label %cond.end158, !dbg !4577

cond.false157:                                    ; preds = %cond.end150
  br label %cond.end158, !dbg !4577

cond.end158:                                      ; preds = %cond.false157, %cond.true156
  %cond159 = phi i32 [ 0, %cond.true156 ], [ 0, %cond.false157 ], !dbg !4577
  %125 = load i32, i32* getelementptr inbounds (%struct.ready_list, %struct.ready_list* @ready, i32 0, i32 3), align 8, !dbg !4578
  %cmp160 = icmp sgt i32 %125, 0, !dbg !4580
  br i1 %cmp160, label %if.then162, label %if.end163, !dbg !4581

if.then162:                                       ; preds = %cond.end158
  call void @ready_sort(%struct.ready_list* @ready), !dbg !4582
  br label %if.end163, !dbg !4582

if.end163:                                        ; preds = %if.then162, %cond.end158
  br label %while.cond134, !dbg !4551, !llvm.loop !4583

while.end164:                                     ; preds = %land.end
  %126 = load i32, i32* getelementptr inbounds (%struct.ready_list, %struct.ready_list* @ready, i32 0, i32 3), align 8, !dbg !4585
  %tobool165 = icmp ne i32 %126, 0, !dbg !4587
  br i1 %tobool165, label %if.end167, label %if.then166, !dbg !4588

if.then166:                                       ; preds = %while.end164
  br label %while.cond84, !dbg !4589, !llvm.loop !4590

if.end167:                                        ; preds = %while.end164
  br label %if.end168, !dbg !4592

if.end168:                                        ; preds = %if.end167, %land.lhs.true112, %if.end110
  %127 = load i32, i32* %sort_p, align 4, !dbg !4593
  %tobool169 = icmp ne i32 %127, 0, !dbg !4593
  br i1 %tobool169, label %land.lhs.true170, label %if.else184, !dbg !4595

land.lhs.true170:                                 ; preds = %if.end168
  %128 = load i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 8), align 8, !dbg !4596
  %tobool171 = icmp ne i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)* %128, null, !dbg !4597
  br i1 %tobool171, label %land.lhs.true172, label %if.else184, !dbg !4598

land.lhs.true172:                                 ; preds = %land.lhs.true170
  %129 = load i32, i32* getelementptr inbounds (%struct.ready_list, %struct.ready_list* @ready, i32 0, i32 3), align 8, !dbg !4599
  %cmp173 = icmp eq i32 %129, 0, !dbg !4600
  br i1 %cmp173, label %if.then181, label %lor.lhs.false175, !dbg !4601

lor.lhs.false175:                                 ; preds = %land.lhs.true172
  %call176 = call %struct.rtx_def* @ready_element(%struct.ready_list* @ready, i32 0), !dbg !4602
  %130 = bitcast %struct.rtx_def* %call176 to i32*, !dbg !4602
  %bf.load177 = load i32, i32* %130, align 8, !dbg !4602
  %bf.lshr178 = lshr i32 %bf.load177, 28, !dbg !4602
  %bf.clear179 = and i32 %bf.lshr178, 1, !dbg !4602
  %tobool180 = icmp ne i32 %bf.clear179, 0, !dbg !4602
  br i1 %tobool180, label %if.else184, label %if.then181, !dbg !4603

if.then181:                                       ; preds = %lor.lhs.false175, %land.lhs.true172
  %131 = load i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 8), align 8, !dbg !4604
  %132 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !4605
  %133 = load i32, i32* @sched_verbose, align 4, !dbg !4606
  %call182 = call %struct.rtx_def** @ready_lastpos(%struct.ready_list* @ready), !dbg !4607
  %134 = load i32, i32* @clock_var, align 4, !dbg !4608
  %call183 = call i32 %131(%struct._IO_FILE* %132, i32 %133, %struct.rtx_def** %call182, i32* getelementptr inbounds (%struct.ready_list, %struct.ready_list* @ready, i32 0, i32 3), i32 %134), !dbg !4609
  store i32 %call183, i32* %can_issue_more, align 4, !dbg !4610
  br label %if.end185, !dbg !4611

if.else184:                                       ; preds = %lor.lhs.false175, %land.lhs.true170, %if.end168
  %135 = load i32, i32* @issue_rate, align 4, !dbg !4612
  store i32 %135, i32* %can_issue_more, align 4, !dbg !4613
  br label %if.end185

if.end185:                                        ; preds = %if.else184, %if.then181
  store i32 1, i32* %first_cycle_insn_p, align 4, !dbg !4614
  store i32 0, i32* @cycle_issued_insns, align 4, !dbg !4615
  br label %for.cond186, !dbg !4616

for.cond186:                                      ; preds = %if.end518, %cond.end342, %if.end319, %if.then235, %if.end185
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn187, metadata !4617, metadata !DIExpression()), !dbg !4621
  call void @llvm.dbg.declare(metadata i32* %cost, metadata !4622, metadata !DIExpression()), !dbg !4623
  call void @llvm.dbg.declare(metadata i8* %asm_p, metadata !4624, metadata !DIExpression()), !dbg !4625
  store i8 0, i8* %asm_p, align 1, !dbg !4625
  %136 = load i32, i32* @sched_verbose, align 4, !dbg !4626
  %cmp188 = icmp sge i32 %136, 2, !dbg !4628
  br i1 %cmp188, label %if.then190, label %if.end195, !dbg !4629

if.then190:                                       ; preds = %for.cond186
  %137 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !4630
  %138 = load i32, i32* @clock_var, align 4, !dbg !4632
  %call191 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %137, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.8, i64 0, i64 0), i32 %138), !dbg !4633
  call void @debug_ready_list(%struct.ready_list* @ready), !dbg !4634
  %139 = load i8, i8* @sched_pressure_p, align 1, !dbg !4635
  %tobool192 = icmp ne i8 %139, 0, !dbg !4635
  br i1 %tobool192, label %if.then193, label %if.end194, !dbg !4637

if.then193:                                       ; preds = %if.then190
  call void @print_curr_reg_pressure(), !dbg !4638
  br label %if.end194, !dbg !4638

if.end194:                                        ; preds = %if.then193, %if.then190
  br label %if.end195, !dbg !4639

if.end195:                                        ; preds = %if.end194, %for.cond186
  %140 = load i32, i32* getelementptr inbounds (%struct.ready_list, %struct.ready_list* @ready, i32 0, i32 3), align 8, !dbg !4640
  %cmp196 = icmp eq i32 %140, 0, !dbg !4642
  br i1 %cmp196, label %land.lhs.true198, label %if.end212, !dbg !4643

land.lhs.true198:                                 ; preds = %if.end195
  %141 = load i32, i32* %can_issue_more, align 4, !dbg !4644
  %tobool199 = icmp ne i32 %141, 0, !dbg !4644
  br i1 %tobool199, label %land.lhs.true200, label %if.end212, !dbg !4645

land.lhs.true200:                                 ; preds = %land.lhs.true198
  %142 = load i32, i32* @reload_completed, align 4, !dbg !4646
  %tobool201 = icmp ne i32 %142, 0, !dbg !4646
  br i1 %tobool201, label %if.then202, label %if.end212, !dbg !4647

if.then202:                                       ; preds = %land.lhs.true200
  %143 = load i32, i32* @sched_verbose, align 4, !dbg !4648
  %cmp203 = icmp sge i32 %143, 6, !dbg !4651
  br i1 %cmp203, label %if.then205, label %if.end207, !dbg !4652

if.then205:                                       ; preds = %if.then202
  %144 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !4653
  %call206 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %144, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.9, i64 0, i64 0)), !dbg !4654
  br label %if.end207, !dbg !4654

if.end207:                                        ; preds = %if.then205, %if.then202
  %145 = load i8*, i8** %temp_state, align 8, !dbg !4655
  %146 = load i8*, i8** @curr_state, align 8, !dbg !4656
  %147 = load i64, i64* @dfa_state_size, align 8, !dbg !4657
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %145, i8* align 1 %146, i64 %147, i1 false), !dbg !4658
  %148 = load i8*, i8** %temp_state, align 8, !dbg !4659
  %call208 = call i32 @early_queue_to_ready(i8* %148, %struct.ready_list* @ready), !dbg !4661
  %tobool209 = icmp ne i32 %call208, 0, !dbg !4661
  br i1 %tobool209, label %if.then210, label %if.end211, !dbg !4662

if.then210:                                       ; preds = %if.end207
  call void @ready_sort(%struct.ready_list* @ready), !dbg !4663
  br label %if.end211, !dbg !4663

if.end211:                                        ; preds = %if.then210, %if.end207
  br label %if.end212, !dbg !4664

if.end212:                                        ; preds = %if.end211, %land.lhs.true200, %land.lhs.true198, %if.end195
  %149 = load i32, i32* getelementptr inbounds (%struct.ready_list, %struct.ready_list* @ready, i32 0, i32 3), align 8, !dbg !4665
  %cmp213 = icmp eq i32 %149, 0, !dbg !4667
  br i1 %cmp213, label %if.then224, label %lor.lhs.false215, !dbg !4668

lor.lhs.false215:                                 ; preds = %if.end212
  %150 = load i32, i32* %can_issue_more, align 4, !dbg !4669
  %tobool216 = icmp ne i32 %150, 0, !dbg !4669
  br i1 %tobool216, label %lor.lhs.false217, label %if.then224, !dbg !4670

lor.lhs.false217:                                 ; preds = %lor.lhs.false215
  %151 = load i8*, i8** @curr_state, align 8, !dbg !4671
  %call218 = call i32 @state_dead_lock_p(i8* %151), !dbg !4672
  %tobool219 = icmp ne i32 %call218, 0, !dbg !4672
  br i1 %tobool219, label %if.then224, label %lor.lhs.false220, !dbg !4673

lor.lhs.false220:                                 ; preds = %lor.lhs.false217
  %152 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !4674
  %schedule_more_p221 = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %152, i32 0, i32 2, !dbg !4675
  %153 = load i32 ()*, i32 ()** %schedule_more_p221, align 8, !dbg !4675
  %call222 = call i32 %153(), !dbg !4676
  %tobool223 = icmp ne i32 %call222, 0, !dbg !4676
  br i1 %tobool223, label %if.end225, label %if.then224, !dbg !4677

if.then224:                                       ; preds = %lor.lhs.false220, %lor.lhs.false217, %lor.lhs.false215, %if.end212
  br label %for.end519, !dbg !4678

if.end225:                                        ; preds = %lor.lhs.false220
  %154 = load i32, i32* %sort_p, align 4, !dbg !4679
  %tobool226 = icmp ne i32 %154, 0, !dbg !4679
  br i1 %tobool226, label %if.then227, label %if.else243, !dbg !4681

if.then227:                                       ; preds = %if.end225
  call void @llvm.dbg.declare(metadata i32* %res, metadata !4682, metadata !DIExpression()), !dbg !4684
  store %struct.rtx_def* null, %struct.rtx_def** %insn187, align 8, !dbg !4685
  %call228 = call i32 @choose_ready(%struct.ready_list* @ready, %struct.rtx_def** %insn187), !dbg !4686
  store i32 %call228, i32* %res, align 4, !dbg !4687
  %155 = load i32, i32* %res, align 4, !dbg !4688
  %cmp229 = icmp slt i32 %155, 0, !dbg !4690
  br i1 %cmp229, label %if.then231, label %if.end232, !dbg !4691

if.then231:                                       ; preds = %if.then227
  br label %for.end519, !dbg !4692

if.end232:                                        ; preds = %if.then227
  %156 = load i32, i32* %res, align 4, !dbg !4693
  %cmp233 = icmp sgt i32 %156, 0, !dbg !4695
  br i1 %cmp233, label %if.then235, label %if.end236, !dbg !4696

if.then235:                                       ; preds = %if.end232
  br label %for.cond186, !dbg !4697, !llvm.loop !4698

if.end236:                                        ; preds = %if.end232
  %157 = load %struct.rtx_def*, %struct.rtx_def** %insn187, align 8, !dbg !4701
  %cmp237 = icmp ne %struct.rtx_def* %157, null, !dbg !4701
  br i1 %cmp237, label %cond.false240, label %cond.true239, !dbg !4701

cond.true239:                                     ; preds = %if.end236
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 3020, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4701
  br label %cond.end241, !dbg !4701

cond.false240:                                    ; preds = %if.end236
  br label %cond.end241, !dbg !4701

cond.end241:                                      ; preds = %cond.false240, %cond.true239
  %cond242 = phi i32 [ 0, %cond.true239 ], [ 0, %cond.false240 ], !dbg !4701
  br label %if.end245, !dbg !4702

if.else243:                                       ; preds = %if.end225
  %call244 = call %struct.rtx_def* @ready_remove_first(%struct.ready_list* @ready), !dbg !4703
  store %struct.rtx_def* %call244, %struct.rtx_def** %insn187, align 8, !dbg !4704
  br label %if.end245

if.end245:                                        ; preds = %if.else243, %cond.end241
  %158 = load i8, i8* @sched_pressure_p, align 1, !dbg !4705
  %conv246 = zext i8 %158 to i32, !dbg !4705
  %tobool247 = icmp ne i32 %conv246, 0, !dbg !4705
  br i1 %tobool247, label %land.lhs.true248, label %if.end261, !dbg !4707

land.lhs.true248:                                 ; preds = %if.end245
  %159 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !4708
  %tobool249 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %159, null, !dbg !4708
  br i1 %tobool249, label %cond.true250, label %cond.false251, !dbg !4708

cond.true250:                                     ; preds = %land.lhs.true248
  %160 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !4708
  %base = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %160, i32 0, i32 0, !dbg !4708
  br label %cond.end252, !dbg !4708

cond.false251:                                    ; preds = %land.lhs.true248
  br label %cond.end252, !dbg !4708

cond.end252:                                      ; preds = %cond.false251, %cond.true250
  %cond253 = phi %struct.VEC_haifa_insn_data_def_base* [ %base, %cond.true250 ], [ null, %cond.false251 ], !dbg !4708
  %161 = load %struct.rtx_def*, %struct.rtx_def** %insn187, align 8, !dbg !4708
  %u254 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %161, i32 0, i32 1, !dbg !4708
  %fld255 = bitcast %union.u* %u254 to [1 x %union.rtunion_def]*, !dbg !4708
  %arrayidx256 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld255, i64 0, i64 0, !dbg !4708
  %rt_int = bitcast %union.rtunion_def* %arrayidx256 to i32*, !dbg !4708
  %162 = load i32, i32* %rt_int, align 8, !dbg !4708
  %call257 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond253, i32 %162), !dbg !4708
  %tick = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call257, i32 0, i32 2, !dbg !4708
  %163 = load i32, i32* %tick, align 8, !dbg !4708
  %164 = load i32, i32* @clock_var, align 4, !dbg !4709
  %cmp258 = icmp sgt i32 %163, %164, !dbg !4710
  br i1 %cmp258, label %if.then260, label %if.end261, !dbg !4711

if.then260:                                       ; preds = %cond.end252
  %165 = load %struct.rtx_def*, %struct.rtx_def** %insn187, align 8, !dbg !4712
  call void @ready_add(%struct.ready_list* @ready, %struct.rtx_def* %165, i8 zeroext 1), !dbg !4714
  store i32 1, i32* %advance, align 4, !dbg !4715
  br label %for.end519, !dbg !4716

if.end261:                                        ; preds = %cond.end252, %if.end245
  %166 = load i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32, i32, i32*)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32, i32, i32*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 19), align 8, !dbg !4717
  %tobool262 = icmp ne i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32, i32, i32*)* %166, null, !dbg !4719
  br i1 %tobool262, label %land.lhs.true263, label %if.end267, !dbg !4720

land.lhs.true263:                                 ; preds = %if.end261
  %167 = load i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32, i32, i32*)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32, i32, i32*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 19), align 8, !dbg !4721
  %168 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !4722
  %169 = load i32, i32* @sched_verbose, align 4, !dbg !4723
  %170 = load %struct.rtx_def*, %struct.rtx_def** %insn187, align 8, !dbg !4724
  %171 = load i32, i32* @last_clock_var, align 4, !dbg !4725
  %172 = load i32, i32* @clock_var, align 4, !dbg !4726
  %call264 = call i32 %167(%struct._IO_FILE* %168, i32 %169, %struct.rtx_def* %170, i32 %171, i32 %172, i32* %sort_p), !dbg !4727
  %tobool265 = icmp ne i32 %call264, 0, !dbg !4727
  br i1 %tobool265, label %if.then266, label %if.end267, !dbg !4728

if.then266:                                       ; preds = %land.lhs.true263
  %173 = load %struct.rtx_def*, %struct.rtx_def** %insn187, align 8, !dbg !4729
  call void @ready_add(%struct.ready_list* @ready, %struct.rtx_def* %173, i8 zeroext 1), !dbg !4731
  br label %for.end519, !dbg !4732

if.end267:                                        ; preds = %land.lhs.true263, %if.end261
  store i32 1, i32* %sort_p, align 4, !dbg !4733
  %174 = load i8*, i8** %temp_state, align 8, !dbg !4734
  %175 = load i8*, i8** @curr_state, align 8, !dbg !4735
  %176 = load i64, i64* @dfa_state_size, align 8, !dbg !4736
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %174, i8* align 1 %175, i64 %176, i1 false), !dbg !4737
  %177 = load %struct.rtx_def*, %struct.rtx_def** %insn187, align 8, !dbg !4738
  %call268 = call i32 @recog_memoized(%struct.rtx_def* %177), !dbg !4740
  %cmp269 = icmp slt i32 %call268, 0, !dbg !4741
  br i1 %cmp269, label %if.then271, label %if.else295, !dbg !4742

if.then271:                                       ; preds = %if.end267
  %178 = load %struct.rtx_def*, %struct.rtx_def** %insn187, align 8, !dbg !4743
  %u272 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %178, i32 0, i32 1, !dbg !4743
  %fld273 = bitcast %union.u* %u272 to [1 x %union.rtunion_def]*, !dbg !4743
  %arrayidx274 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld273, i64 0, i64 5, !dbg !4743
  %rt_rtx275 = bitcast %union.rtunion_def* %arrayidx274 to %struct.rtx_def**, !dbg !4743
  %179 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx275, align 8, !dbg !4743
  %180 = bitcast %struct.rtx_def* %179 to i32*, !dbg !4743
  %bf.load276 = load i32, i32* %180, align 8, !dbg !4743
  %bf.clear277 = and i32 %bf.load276, 65535, !dbg !4743
  %cmp278 = icmp eq i32 %bf.clear277, 16, !dbg !4745
  br i1 %cmp278, label %lor.end, label %lor.rhs, !dbg !4746

lor.rhs:                                          ; preds = %if.then271
  %181 = load %struct.rtx_def*, %struct.rtx_def** %insn187, align 8, !dbg !4747
  %u280 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %181, i32 0, i32 1, !dbg !4747
  %fld281 = bitcast %union.u* %u280 to [1 x %union.rtunion_def]*, !dbg !4747
  %arrayidx282 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld281, i64 0, i64 5, !dbg !4747
  %rt_rtx283 = bitcast %union.rtunion_def* %arrayidx282 to %struct.rtx_def**, !dbg !4747
  %182 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx283, align 8, !dbg !4747
  %call284 = call i32 @asm_noperands(%struct.rtx_def* %182), !dbg !4748
  %cmp285 = icmp sge i32 %call284, 0, !dbg !4749
  br label %lor.end, !dbg !4746

lor.end:                                          ; preds = %lor.rhs, %if.then271
  %183 = phi i1 [ true, %if.then271 ], [ %cmp285, %lor.rhs ]
  %lor.ext = zext i1 %183 to i32, !dbg !4746
  %conv287 = trunc i32 %lor.ext to i8, !dbg !4750
  store i8 %conv287, i8* %asm_p, align 1, !dbg !4751
  %184 = load i32, i32* %first_cycle_insn_p, align 4, !dbg !4752
  %tobool288 = icmp ne i32 %184, 0, !dbg !4752
  br i1 %tobool288, label %if.else293, label %land.lhs.true289, !dbg !4754

land.lhs.true289:                                 ; preds = %lor.end
  %185 = load i8, i8* %asm_p, align 1, !dbg !4755
  %conv290 = zext i8 %185 to i32, !dbg !4755
  %tobool291 = icmp ne i32 %conv290, 0, !dbg !4755
  br i1 %tobool291, label %if.then292, label %if.else293, !dbg !4756

if.then292:                                       ; preds = %land.lhs.true289
  store i32 1, i32* %cost, align 4, !dbg !4757
  br label %if.end294, !dbg !4758

if.else293:                                       ; preds = %land.lhs.true289, %lor.end
  store i32 0, i32* %cost, align 4, !dbg !4759
  br label %if.end294

if.end294:                                        ; preds = %if.else293, %if.then292
  br label %if.end310, !dbg !4760

if.else295:                                       ; preds = %if.end267
  %186 = load i8, i8* @sched_pressure_p, align 1, !dbg !4761
  %tobool296 = icmp ne i8 %186, 0, !dbg !4761
  br i1 %tobool296, label %if.then297, label %if.else298, !dbg !4763

if.then297:                                       ; preds = %if.else295
  store i32 0, i32* %cost, align 4, !dbg !4764
  br label %if.end309, !dbg !4765

if.else298:                                       ; preds = %if.else295
  %187 = load i8*, i8** %temp_state, align 8, !dbg !4766
  %188 = load %struct.rtx_def*, %struct.rtx_def** %insn187, align 8, !dbg !4768
  %call299 = call i32 @state_transition(i8* %187, %struct.rtx_def* %188), !dbg !4769
  store i32 %call299, i32* %cost, align 4, !dbg !4770
  %189 = load i32, i32* %cost, align 4, !dbg !4771
  %cmp300 = icmp slt i32 %189, 0, !dbg !4773
  br i1 %cmp300, label %if.then302, label %if.else303, !dbg !4774

if.then302:                                       ; preds = %if.else298
  store i32 0, i32* %cost, align 4, !dbg !4775
  br label %if.end308, !dbg !4776

if.else303:                                       ; preds = %if.else298
  %190 = load i32, i32* %cost, align 4, !dbg !4777
  %cmp304 = icmp eq i32 %190, 0, !dbg !4779
  br i1 %cmp304, label %if.then306, label %if.end307, !dbg !4780

if.then306:                                       ; preds = %if.else303
  store i32 1, i32* %cost, align 4, !dbg !4781
  br label %if.end307, !dbg !4782

if.end307:                                        ; preds = %if.then306, %if.else303
  br label %if.end308

if.end308:                                        ; preds = %if.end307, %if.then302
  br label %if.end309

if.end309:                                        ; preds = %if.end308, %if.then297
  br label %if.end310

if.end310:                                        ; preds = %if.end309, %if.end294
  %191 = load i32, i32* %cost, align 4, !dbg !4783
  %cmp311 = icmp sge i32 %191, 1, !dbg !4785
  br i1 %cmp311, label %if.then313, label %if.end320, !dbg !4786

if.then313:                                       ; preds = %if.end310
  %192 = load %struct.rtx_def*, %struct.rtx_def** %insn187, align 8, !dbg !4787
  %193 = load i32, i32* %cost, align 4, !dbg !4789
  call void @queue_insn(%struct.rtx_def* %192, i32 %193), !dbg !4790
  %194 = load %struct.rtx_def*, %struct.rtx_def** %insn187, align 8, !dbg !4791
  %195 = bitcast %struct.rtx_def* %194 to i32*, !dbg !4791
  %bf.load314 = load i32, i32* %195, align 8, !dbg !4791
  %bf.lshr315 = lshr i32 %bf.load314, 28, !dbg !4791
  %bf.clear316 = and i32 %bf.lshr315, 1, !dbg !4791
  %tobool317 = icmp ne i32 %bf.clear316, 0, !dbg !4791
  br i1 %tobool317, label %if.then318, label %if.end319, !dbg !4793

if.then318:                                       ; preds = %if.then313
  %196 = load i32, i32* %cost, align 4, !dbg !4794
  store i32 %196, i32* %advance, align 4, !dbg !4796
  br label %for.end519, !dbg !4797

if.end319:                                        ; preds = %if.then313
  br label %for.cond186, !dbg !4798, !llvm.loop !4698

if.end320:                                        ; preds = %if.end310
  %197 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !4799
  %can_schedule_ready_p = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %197, i32 0, i32 1, !dbg !4801
  %198 = load i32 (%struct.rtx_def*)*, i32 (%struct.rtx_def*)** %can_schedule_ready_p, align 8, !dbg !4801
  %tobool321 = icmp ne i32 (%struct.rtx_def*)* %198, null, !dbg !4799
  br i1 %tobool321, label %land.lhs.true322, label %if.end350, !dbg !4802

land.lhs.true322:                                 ; preds = %if.end320
  %199 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !4803
  %can_schedule_ready_p323 = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %199, i32 0, i32 1, !dbg !4804
  %200 = load i32 (%struct.rtx_def*)*, i32 (%struct.rtx_def*)** %can_schedule_ready_p323, align 8, !dbg !4804
  %201 = load %struct.rtx_def*, %struct.rtx_def** %insn187, align 8, !dbg !4805
  %call324 = call i32 %200(%struct.rtx_def* %201), !dbg !4806
  %tobool325 = icmp ne i32 %call324, 0, !dbg !4806
  br i1 %tobool325, label %if.end350, label %if.then326, !dbg !4807

if.then326:                                       ; preds = %land.lhs.true322
  %202 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !4808
  %tobool327 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %202, null, !dbg !4808
  br i1 %tobool327, label %cond.true328, label %cond.false330, !dbg !4808

cond.true328:                                     ; preds = %if.then326
  %203 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !4808
  %base329 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %203, i32 0, i32 0, !dbg !4808
  br label %cond.end331, !dbg !4808

cond.false330:                                    ; preds = %if.then326
  br label %cond.end331, !dbg !4808

cond.end331:                                      ; preds = %cond.false330, %cond.true328
  %cond332 = phi %struct.VEC_haifa_insn_data_def_base* [ %base329, %cond.true328 ], [ null, %cond.false330 ], !dbg !4808
  %204 = load %struct.rtx_def*, %struct.rtx_def** %insn187, align 8, !dbg !4808
  %u333 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %204, i32 0, i32 1, !dbg !4808
  %fld334 = bitcast %union.u* %u333 to [1 x %union.rtunion_def]*, !dbg !4808
  %arrayidx335 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld334, i64 0, i64 0, !dbg !4808
  %rt_int336 = bitcast %union.rtunion_def* %arrayidx335 to i32*, !dbg !4808
  %205 = load i32, i32* %rt_int336, align 8, !dbg !4808
  %call337 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond332, i32 %205), !dbg !4808
  %todo_spec = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call337, i32 0, i32 8, !dbg !4808
  %206 = load i32, i32* %todo_spec, align 8, !dbg !4808
  %and = and i32 %206, -16777216, !dbg !4810
  %or = or i32 %and, 134217728, !dbg !4811
  %207 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !4812
  %tobool338 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %207, null, !dbg !4812
  br i1 %tobool338, label %cond.true339, label %cond.false341, !dbg !4812

cond.true339:                                     ; preds = %cond.end331
  %208 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !4812
  %base340 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %208, i32 0, i32 0, !dbg !4812
  br label %cond.end342, !dbg !4812

cond.false341:                                    ; preds = %cond.end331
  br label %cond.end342, !dbg !4812

cond.end342:                                      ; preds = %cond.false341, %cond.true339
  %cond343 = phi %struct.VEC_haifa_insn_data_def_base* [ %base340, %cond.true339 ], [ null, %cond.false341 ], !dbg !4812
  %209 = load %struct.rtx_def*, %struct.rtx_def** %insn187, align 8, !dbg !4812
  %u344 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %209, i32 0, i32 1, !dbg !4812
  %fld345 = bitcast %union.u* %u344 to [1 x %union.rtunion_def]*, !dbg !4812
  %arrayidx346 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld345, i64 0, i64 0, !dbg !4812
  %rt_int347 = bitcast %union.rtunion_def* %arrayidx346 to i32*, !dbg !4812
  %210 = load i32, i32* %rt_int347, align 8, !dbg !4812
  %call348 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond343, i32 %210), !dbg !4812
  %todo_spec349 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call348, i32 0, i32 8, !dbg !4812
  store i32 %or, i32* %todo_spec349, align 8, !dbg !4813
  br label %for.cond186, !dbg !4814, !llvm.loop !4698

if.end350:                                        ; preds = %land.lhs.true322, %if.end320
  %211 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !4815
  %tobool351 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %211, null, !dbg !4815
  br i1 %tobool351, label %cond.true352, label %cond.false354, !dbg !4815

cond.true352:                                     ; preds = %if.end350
  %212 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !4815
  %base353 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %212, i32 0, i32 0, !dbg !4815
  br label %cond.end355, !dbg !4815

cond.false354:                                    ; preds = %if.end350
  br label %cond.end355, !dbg !4815

cond.end355:                                      ; preds = %cond.false354, %cond.true352
  %cond356 = phi %struct.VEC_haifa_insn_data_def_base* [ %base353, %cond.true352 ], [ null, %cond.false354 ], !dbg !4815
  %213 = load %struct.rtx_def*, %struct.rtx_def** %insn187, align 8, !dbg !4815
  %u357 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %213, i32 0, i32 1, !dbg !4815
  %fld358 = bitcast %union.u* %u357 to [1 x %union.rtunion_def]*, !dbg !4815
  %arrayidx359 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld358, i64 0, i64 0, !dbg !4815
  %rt_int360 = bitcast %union.rtunion_def* %arrayidx359 to i32*, !dbg !4815
  %214 = load i32, i32* %rt_int360, align 8, !dbg !4815
  %call361 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond356, i32 %214), !dbg !4815
  %todo_spec362 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call361, i32 0, i32 8, !dbg !4815
  %215 = load i32, i32* %todo_spec362, align 8, !dbg !4815
  %and363 = and i32 %215, 16777215, !dbg !4817
  %tobool364 = icmp ne i32 %and363, 0, !dbg !4817
  br i1 %tobool364, label %if.then365, label %if.end366, !dbg !4818

if.then365:                                       ; preds = %cond.end355
  %216 = load %struct.rtx_def*, %struct.rtx_def** %insn187, align 8, !dbg !4819
  call void @generate_recovery_code(%struct.rtx_def* %216), !dbg !4820
  br label %if.end366, !dbg !4820

if.end366:                                        ; preds = %if.then365, %cond.end355
  %217 = load %struct.rtx_def*, %struct.rtx_def** @last_scheduled_insn, align 8, !dbg !4821
  %call367 = call zeroext i8 @control_flow_insn_p(%struct.rtx_def* %217), !dbg !4823
  %conv368 = zext i8 %call367 to i32, !dbg !4823
  %tobool369 = icmp ne i32 %conv368, 0, !dbg !4823
  br i1 %tobool369, label %if.then374, label %lor.lhs.false370, !dbg !4824

lor.lhs.false370:                                 ; preds = %if.end366
  %218 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !4825
  %advance_target_bb371 = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %218, i32 0, i32 16, !dbg !4826
  %219 = load %struct.basic_block_def* (%struct.basic_block_def*, %struct.rtx_def*)*, %struct.basic_block_def* (%struct.basic_block_def*, %struct.rtx_def*)** %advance_target_bb371, align 8, !dbg !4826
  %220 = load %struct.basic_block_def**, %struct.basic_block_def*** %target_bb.addr, align 8, !dbg !4827
  %221 = load %struct.basic_block_def*, %struct.basic_block_def** %220, align 8, !dbg !4828
  %222 = load %struct.rtx_def*, %struct.rtx_def** %insn187, align 8, !dbg !4829
  %call372 = call %struct.basic_block_def* %219(%struct.basic_block_def* %221, %struct.rtx_def* %222), !dbg !4825
  %tobool373 = icmp ne %struct.basic_block_def* %call372, null, !dbg !4825
  br i1 %tobool373, label %if.then374, label %if.end388, !dbg !4830

if.then374:                                       ; preds = %lor.lhs.false370, %if.end366
  %223 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !4831
  %advance_target_bb375 = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %223, i32 0, i32 16, !dbg !4833
  %224 = load %struct.basic_block_def* (%struct.basic_block_def*, %struct.rtx_def*)*, %struct.basic_block_def* (%struct.basic_block_def*, %struct.rtx_def*)** %advance_target_bb375, align 8, !dbg !4833
  %225 = load %struct.basic_block_def**, %struct.basic_block_def*** %target_bb.addr, align 8, !dbg !4834
  %226 = load %struct.basic_block_def*, %struct.basic_block_def** %225, align 8, !dbg !4835
  %call376 = call %struct.basic_block_def* %224(%struct.basic_block_def* %226, %struct.rtx_def* null), !dbg !4831
  %227 = load %struct.basic_block_def**, %struct.basic_block_def*** %target_bb.addr, align 8, !dbg !4836
  store %struct.basic_block_def* %call376, %struct.basic_block_def** %227, align 8, !dbg !4837
  %228 = load i32, i32* @sched_verbose, align 4, !dbg !4838
  %tobool377 = icmp ne i32 %228, 0, !dbg !4838
  br i1 %tobool377, label %if.then378, label %if.end386, !dbg !4840

if.then378:                                       ; preds = %if.then374
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x379, metadata !4841, metadata !DIExpression()), !dbg !4843
  %229 = load %struct.rtx_def*, %struct.rtx_def** @last_scheduled_insn, align 8, !dbg !4844
  %call380 = call %struct.rtx_def* @next_real_insn(%struct.rtx_def* %229), !dbg !4845
  store %struct.rtx_def* %call380, %struct.rtx_def** %x379, align 8, !dbg !4846
  %230 = load %struct.rtx_def*, %struct.rtx_def** %x379, align 8, !dbg !4847
  %tobool381 = icmp ne %struct.rtx_def* %230, null, !dbg !4847
  br i1 %tobool381, label %cond.false383, label %cond.true382, !dbg !4847

cond.true382:                                     ; preds = %if.then378
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 3122, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4847
  br label %cond.end384, !dbg !4847

cond.false383:                                    ; preds = %if.then378
  br label %cond.end384, !dbg !4847

cond.end384:                                      ; preds = %cond.false383, %cond.true382
  %cond385 = phi i32 [ 0, %cond.true382 ], [ 0, %cond.false383 ], !dbg !4847
  %231 = load %struct.basic_block_def**, %struct.basic_block_def*** %target_bb.addr, align 8, !dbg !4848
  %232 = load %struct.basic_block_def*, %struct.basic_block_def** %231, align 8, !dbg !4849
  %233 = load %struct.rtx_def*, %struct.rtx_def** %x379, align 8, !dbg !4850
  %234 = load %struct.rtx_def*, %struct.rtx_def** %tail, align 8, !dbg !4851
  call void @dump_new_block_header(i32 1, %struct.basic_block_def* %232, %struct.rtx_def* %233, %struct.rtx_def* %234), !dbg !4852
  br label %if.end386, !dbg !4853

if.end386:                                        ; preds = %cond.end384, %if.then374
  %235 = load %struct.basic_block_def**, %struct.basic_block_def*** %target_bb.addr, align 8, !dbg !4854
  %236 = load %struct.basic_block_def*, %struct.basic_block_def** %235, align 8, !dbg !4855
  %call387 = call %struct.rtx_def* @bb_note(%struct.basic_block_def* %236), !dbg !4856
  store %struct.rtx_def* %call387, %struct.rtx_def** @last_scheduled_insn, align 8, !dbg !4857
  br label %if.end388, !dbg !4858

if.end388:                                        ; preds = %if.end386, %lor.lhs.false370
  %237 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !4859
  %begin_schedule_ready389 = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %237, i32 0, i32 15, !dbg !4860
  %238 = load void (%struct.rtx_def*, %struct.rtx_def*)*, void (%struct.rtx_def*, %struct.rtx_def*)** %begin_schedule_ready389, align 8, !dbg !4860
  %239 = load %struct.rtx_def*, %struct.rtx_def** %insn187, align 8, !dbg !4861
  %240 = load %struct.rtx_def*, %struct.rtx_def** @last_scheduled_insn, align 8, !dbg !4862
  call void %238(%struct.rtx_def* %239, %struct.rtx_def* %240), !dbg !4863
  %241 = load %struct.rtx_def*, %struct.rtx_def** %insn187, align 8, !dbg !4864
  %242 = load %struct.rtx_def*, %struct.rtx_def** @last_scheduled_insn, align 8, !dbg !4865
  %243 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !4866
  %next_tail390 = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %243, i32 0, i32 9, !dbg !4867
  %244 = load %struct.rtx_def*, %struct.rtx_def** %next_tail390, align 8, !dbg !4867
  call void @move_insn(%struct.rtx_def* %241, %struct.rtx_def* %242, %struct.rtx_def* %244), !dbg !4868
  %245 = load %struct.rtx_def*, %struct.rtx_def** %insn187, align 8, !dbg !4869
  call void @reemit_notes(%struct.rtx_def* %245), !dbg !4870
  %246 = load %struct.rtx_def*, %struct.rtx_def** %insn187, align 8, !dbg !4871
  store %struct.rtx_def* %246, %struct.rtx_def** @last_scheduled_insn, align 8, !dbg !4872
  %247 = load i8*, i8** @curr_state, align 8, !dbg !4873
  %248 = load i8*, i8** %temp_state, align 8, !dbg !4875
  %249 = load i64, i64* @dfa_state_size, align 8, !dbg !4876
  %call391 = call i32 @memcmp(i8* %247, i8* %248, i64 %249), !dbg !4877
  %cmp392 = icmp ne i32 %call391, 0, !dbg !4878
  br i1 %cmp392, label %if.then394, label %if.end396, !dbg !4879

if.then394:                                       ; preds = %if.end388
  %250 = load i32, i32* @cycle_issued_insns, align 4, !dbg !4880
  %inc395 = add nsw i32 %250, 1, !dbg !4880
  store i32 %inc395, i32* @cycle_issued_insns, align 4, !dbg !4880
  %251 = load i8*, i8** @curr_state, align 8, !dbg !4882
  %252 = load i8*, i8** %temp_state, align 8, !dbg !4883
  %253 = load i64, i64* @dfa_state_size, align 8, !dbg !4884
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %251, i8* align 1 %252, i64 %253, i1 false), !dbg !4885
  br label %if.end396, !dbg !4886

if.end396:                                        ; preds = %if.then394, %if.end388
  %254 = load i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 3), align 8, !dbg !4887
  %tobool397 = icmp ne i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)* %254, null, !dbg !4889
  br i1 %tobool397, label %if.then398, label %if.else400, !dbg !4890

if.then398:                                       ; preds = %if.end396
  %255 = load i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 3), align 8, !dbg !4891
  %256 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !4892
  %257 = load i32, i32* @sched_verbose, align 4, !dbg !4893
  %258 = load %struct.rtx_def*, %struct.rtx_def** %insn187, align 8, !dbg !4894
  %259 = load i32, i32* %can_issue_more, align 4, !dbg !4895
  %call399 = call i32 %255(%struct._IO_FILE* %256, i32 %257, %struct.rtx_def* %258, i32 %259), !dbg !4896
  store i32 %call399, i32* %can_issue_more, align 4, !dbg !4897
  br label %if.end420, !dbg !4898

if.else400:                                       ; preds = %if.end396
  %260 = load %struct.rtx_def*, %struct.rtx_def** %insn187, align 8, !dbg !4899
  %u401 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %260, i32 0, i32 1, !dbg !4899
  %fld402 = bitcast %union.u* %u401 to [1 x %union.rtunion_def]*, !dbg !4899
  %arrayidx403 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld402, i64 0, i64 5, !dbg !4899
  %rt_rtx404 = bitcast %union.rtunion_def* %arrayidx403 to %struct.rtx_def**, !dbg !4899
  %261 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx404, align 8, !dbg !4899
  %262 = bitcast %struct.rtx_def* %261 to i32*, !dbg !4899
  %bf.load405 = load i32, i32* %262, align 8, !dbg !4899
  %bf.clear406 = and i32 %bf.load405, 65535, !dbg !4899
  %cmp407 = icmp ne i32 %bf.clear406, 24, !dbg !4901
  br i1 %cmp407, label %land.lhs.true409, label %if.end419, !dbg !4902

land.lhs.true409:                                 ; preds = %if.else400
  %263 = load %struct.rtx_def*, %struct.rtx_def** %insn187, align 8, !dbg !4903
  %u410 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %263, i32 0, i32 1, !dbg !4903
  %fld411 = bitcast %union.u* %u410 to [1 x %union.rtunion_def]*, !dbg !4903
  %arrayidx412 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld411, i64 0, i64 5, !dbg !4903
  %rt_rtx413 = bitcast %union.rtunion_def* %arrayidx412 to %struct.rtx_def**, !dbg !4903
  %264 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx413, align 8, !dbg !4903
  %265 = bitcast %struct.rtx_def* %264 to i32*, !dbg !4903
  %bf.load414 = load i32, i32* %265, align 8, !dbg !4903
  %bf.clear415 = and i32 %bf.load414, 65535, !dbg !4903
  %cmp416 = icmp ne i32 %bf.clear415, 25, !dbg !4904
  br i1 %cmp416, label %if.then418, label %if.end419, !dbg !4905

if.then418:                                       ; preds = %land.lhs.true409
  %266 = load i32, i32* %can_issue_more, align 4, !dbg !4906
  %dec = add nsw i32 %266, -1, !dbg !4906
  store i32 %dec, i32* %can_issue_more, align 4, !dbg !4906
  br label %if.end419, !dbg !4907

if.end419:                                        ; preds = %if.then418, %land.lhs.true409, %if.else400
  br label %if.end420

if.end420:                                        ; preds = %if.end419, %if.then398
  %267 = load %struct.rtx_def*, %struct.rtx_def** %insn187, align 8, !dbg !4908
  %call421 = call i32 @schedule_insn(%struct.rtx_def* %267), !dbg !4909
  store i32 %call421, i32* %advance, align 4, !dbg !4910
  %268 = load i32, i32* %advance, align 4, !dbg !4911
  %cmp422 = icmp eq i32 %268, 0, !dbg !4913
  br i1 %cmp422, label %land.lhs.true424, label %if.end428, !dbg !4914

land.lhs.true424:                                 ; preds = %if.end420
  %269 = load i8, i8* %asm_p, align 1, !dbg !4915
  %conv425 = zext i8 %269 to i32, !dbg !4915
  %tobool426 = icmp ne i32 %conv425, 0, !dbg !4915
  br i1 %tobool426, label %if.then427, label %if.end428, !dbg !4916

if.then427:                                       ; preds = %land.lhs.true424
  store i32 1, i32* %advance, align 4, !dbg !4917
  br label %if.end428, !dbg !4918

if.end428:                                        ; preds = %if.then427, %land.lhs.true424, %if.end420
  %270 = load i32, i32* %advance, align 4, !dbg !4919
  %cmp429 = icmp ne i32 %270, 0, !dbg !4921
  br i1 %cmp429, label %if.then431, label %if.end432, !dbg !4922

if.then431:                                       ; preds = %if.end428
  br label %for.end519, !dbg !4923

if.end432:                                        ; preds = %if.end428
  store i32 0, i32* %first_cycle_insn_p, align 4, !dbg !4924
  %271 = load i32, i32* getelementptr inbounds (%struct.ready_list, %struct.ready_list* @ready, i32 0, i32 3), align 8, !dbg !4925
  %cmp433 = icmp sgt i32 %271, 0, !dbg !4927
  br i1 %cmp433, label %if.then435, label %if.end436, !dbg !4928

if.then435:                                       ; preds = %if.end432
  call void @ready_sort(%struct.ready_list* @ready), !dbg !4929
  br label %if.end436, !dbg !4929

if.end436:                                        ; preds = %if.then435, %if.end432
  %272 = load i32, i32* getelementptr inbounds (%struct.ready_list, %struct.ready_list* @ready, i32 0, i32 3), align 8, !dbg !4930
  %tobool437 = icmp ne i32 %272, 0, !dbg !4932
  br i1 %tobool437, label %land.lhs.true438, label %if.end499, !dbg !4933

land.lhs.true438:                                 ; preds = %if.end436
  %call439 = call %struct.rtx_def* @ready_element(%struct.ready_list* @ready, i32 0), !dbg !4934
  %273 = bitcast %struct.rtx_def* %call439 to i32*, !dbg !4934
  %bf.load440 = load i32, i32* %273, align 8, !dbg !4934
  %bf.clear441 = and i32 %bf.load440, 65535, !dbg !4934
  %cmp442 = icmp eq i32 %bf.clear441, 7, !dbg !4934
  br i1 %cmp442, label %land.lhs.true444, label %if.end499, !dbg !4935

land.lhs.true444:                                 ; preds = %land.lhs.true438
  %274 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !4936
  %schedule_more_p445 = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %274, i32 0, i32 2, !dbg !4937
  %275 = load i32 ()*, i32 ()** %schedule_more_p445, align 8, !dbg !4937
  %call446 = call i32 %275(), !dbg !4938
  %tobool447 = icmp ne i32 %call446, 0, !dbg !4938
  br i1 %tobool447, label %if.then448, label %if.end499, !dbg !4939

if.then448:                                       ; preds = %land.lhs.true444
  %276 = load %struct.rtx_def*, %struct.rtx_def** @last_scheduled_insn, align 8, !dbg !4940
  %call449 = call zeroext i8 @control_flow_insn_p(%struct.rtx_def* %276), !dbg !4943
  %tobool450 = icmp ne i8 %call449, 0, !dbg !4943
  br i1 %tobool450, label %if.then451, label %if.end465, !dbg !4944

if.then451:                                       ; preds = %if.then448
  %277 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !4945
  %advance_target_bb452 = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %277, i32 0, i32 16, !dbg !4947
  %278 = load %struct.basic_block_def* (%struct.basic_block_def*, %struct.rtx_def*)*, %struct.basic_block_def* (%struct.basic_block_def*, %struct.rtx_def*)** %advance_target_bb452, align 8, !dbg !4947
  %279 = load %struct.basic_block_def**, %struct.basic_block_def*** %target_bb.addr, align 8, !dbg !4948
  %280 = load %struct.basic_block_def*, %struct.basic_block_def** %279, align 8, !dbg !4949
  %call453 = call %struct.basic_block_def* %278(%struct.basic_block_def* %280, %struct.rtx_def* null), !dbg !4945
  %281 = load %struct.basic_block_def**, %struct.basic_block_def*** %target_bb.addr, align 8, !dbg !4950
  store %struct.basic_block_def* %call453, %struct.basic_block_def** %281, align 8, !dbg !4951
  %282 = load i32, i32* @sched_verbose, align 4, !dbg !4952
  %tobool454 = icmp ne i32 %282, 0, !dbg !4952
  br i1 %tobool454, label %if.then455, label %if.end463, !dbg !4954

if.then455:                                       ; preds = %if.then451
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x456, metadata !4955, metadata !DIExpression()), !dbg !4957
  %283 = load %struct.rtx_def*, %struct.rtx_def** @last_scheduled_insn, align 8, !dbg !4958
  %call457 = call %struct.rtx_def* @next_real_insn(%struct.rtx_def* %283), !dbg !4959
  store %struct.rtx_def* %call457, %struct.rtx_def** %x456, align 8, !dbg !4960
  %284 = load %struct.rtx_def*, %struct.rtx_def** %x456, align 8, !dbg !4961
  %tobool458 = icmp ne %struct.rtx_def* %284, null, !dbg !4961
  br i1 %tobool458, label %cond.false460, label %cond.true459, !dbg !4961

cond.true459:                                     ; preds = %if.then455
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 3183, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4961
  br label %cond.end461, !dbg !4961

cond.false460:                                    ; preds = %if.then455
  br label %cond.end461, !dbg !4961

cond.end461:                                      ; preds = %cond.false460, %cond.true459
  %cond462 = phi i32 [ 0, %cond.true459 ], [ 0, %cond.false460 ], !dbg !4961
  %285 = load %struct.basic_block_def**, %struct.basic_block_def*** %target_bb.addr, align 8, !dbg !4962
  %286 = load %struct.basic_block_def*, %struct.basic_block_def** %285, align 8, !dbg !4963
  %287 = load %struct.rtx_def*, %struct.rtx_def** %x456, align 8, !dbg !4964
  %288 = load %struct.rtx_def*, %struct.rtx_def** %tail, align 8, !dbg !4965
  call void @dump_new_block_header(i32 1, %struct.basic_block_def* %286, %struct.rtx_def* %287, %struct.rtx_def* %288), !dbg !4966
  br label %if.end463, !dbg !4967

if.end463:                                        ; preds = %cond.end461, %if.then451
  %289 = load %struct.basic_block_def**, %struct.basic_block_def*** %target_bb.addr, align 8, !dbg !4968
  %290 = load %struct.basic_block_def*, %struct.basic_block_def** %289, align 8, !dbg !4969
  %call464 = call %struct.rtx_def* @bb_note(%struct.basic_block_def* %290), !dbg !4970
  store %struct.rtx_def* %call464, %struct.rtx_def** @last_scheduled_insn, align 8, !dbg !4971
  br label %if.end465, !dbg !4972

if.end465:                                        ; preds = %if.end463, %if.then448
  br label %while.cond466, !dbg !4973

while.cond466:                                    ; preds = %if.end497, %if.end465
  %291 = load i32, i32* getelementptr inbounds (%struct.ready_list, %struct.ready_list* @ready, i32 0, i32 3), align 8, !dbg !4974
  %tobool467 = icmp ne i32 %291, 0, !dbg !4975
  br i1 %tobool467, label %land.rhs468, label %land.end474, !dbg !4976

land.rhs468:                                      ; preds = %while.cond466
  %call469 = call %struct.rtx_def* @ready_element(%struct.ready_list* @ready, i32 0), !dbg !4977
  %292 = bitcast %struct.rtx_def* %call469 to i32*, !dbg !4977
  %bf.load470 = load i32, i32* %292, align 8, !dbg !4977
  %bf.clear471 = and i32 %bf.load470, 65535, !dbg !4977
  %cmp472 = icmp eq i32 %bf.clear471, 7, !dbg !4977
  br label %land.end474

land.end474:                                      ; preds = %land.rhs468, %while.cond466
  %293 = phi i1 [ false, %while.cond466 ], [ %cmp472, %land.rhs468 ], !dbg !4978
  br i1 %293, label %while.body475, label %while.end498, !dbg !4973

while.body475:                                    ; preds = %land.end474
  %call476 = call %struct.rtx_def* @ready_remove_first(%struct.ready_list* @ready), !dbg !4979
  store %struct.rtx_def* %call476, %struct.rtx_def** %insn187, align 8, !dbg !4981
  %294 = load %struct.rtx_def*, %struct.rtx_def** %insn187, align 8, !dbg !4982
  %295 = bitcast %struct.rtx_def* %294 to i32*, !dbg !4982
  %bf.load477 = load i32, i32* %295, align 8, !dbg !4982
  %bf.clear478 = and i32 %bf.load477, 65535, !dbg !4982
  %cmp479 = icmp eq i32 %bf.clear478, 7, !dbg !4982
  br i1 %cmp479, label %cond.false482, label %cond.true481, !dbg !4982

cond.true481:                                     ; preds = %while.body475
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 3193, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4982
  br label %cond.end483, !dbg !4982

cond.false482:                                    ; preds = %while.body475
  br label %cond.end483, !dbg !4982

cond.end483:                                      ; preds = %cond.false482, %cond.true481
  %cond484 = phi i32 [ 0, %cond.true481 ], [ 0, %cond.false482 ], !dbg !4982
  %296 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !4983
  %begin_schedule_ready485 = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %296, i32 0, i32 15, !dbg !4984
  %297 = load void (%struct.rtx_def*, %struct.rtx_def*)*, void (%struct.rtx_def*, %struct.rtx_def*)** %begin_schedule_ready485, align 8, !dbg !4984
  %298 = load %struct.rtx_def*, %struct.rtx_def** %insn187, align 8, !dbg !4985
  %299 = load %struct.rtx_def*, %struct.rtx_def** @last_scheduled_insn, align 8, !dbg !4986
  call void %297(%struct.rtx_def* %298, %struct.rtx_def* %299), !dbg !4987
  %300 = load %struct.rtx_def*, %struct.rtx_def** %insn187, align 8, !dbg !4988
  %301 = load %struct.rtx_def*, %struct.rtx_def** @last_scheduled_insn, align 8, !dbg !4989
  %302 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !4990
  %next_tail486 = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %302, i32 0, i32 9, !dbg !4991
  %303 = load %struct.rtx_def*, %struct.rtx_def** %next_tail486, align 8, !dbg !4991
  call void @move_insn(%struct.rtx_def* %300, %struct.rtx_def* %301, %struct.rtx_def* %303), !dbg !4992
  %304 = load %struct.rtx_def*, %struct.rtx_def** %insn187, align 8, !dbg !4993
  %call487 = call i32 @schedule_insn(%struct.rtx_def* %304), !dbg !4994
  store i32 %call487, i32* %advance, align 4, !dbg !4995
  %305 = load %struct.rtx_def*, %struct.rtx_def** %insn187, align 8, !dbg !4996
  store %struct.rtx_def* %305, %struct.rtx_def** @last_scheduled_insn, align 8, !dbg !4997
  %306 = load i32, i32* %advance, align 4, !dbg !4998
  %cmp488 = icmp eq i32 %306, 0, !dbg !4998
  br i1 %cmp488, label %cond.false491, label %cond.true490, !dbg !4998

cond.true490:                                     ; preds = %cond.end483
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 3200, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4998
  br label %cond.end492, !dbg !4998

cond.false491:                                    ; preds = %cond.end483
  br label %cond.end492, !dbg !4998

cond.end492:                                      ; preds = %cond.false491, %cond.true490
  %cond493 = phi i32 [ 0, %cond.true490 ], [ 0, %cond.false491 ], !dbg !4998
  %307 = load i32, i32* getelementptr inbounds (%struct.ready_list, %struct.ready_list* @ready, i32 0, i32 3), align 8, !dbg !4999
  %cmp494 = icmp sgt i32 %307, 0, !dbg !5001
  br i1 %cmp494, label %if.then496, label %if.end497, !dbg !5002

if.then496:                                       ; preds = %cond.end492
  call void @ready_sort(%struct.ready_list* @ready), !dbg !5003
  br label %if.end497, !dbg !5003

if.end497:                                        ; preds = %if.then496, %cond.end492
  br label %while.cond466, !dbg !4973, !llvm.loop !5004

while.end498:                                     ; preds = %land.end474
  br label %if.end499, !dbg !5006

if.end499:                                        ; preds = %while.end498, %land.lhs.true444, %land.lhs.true438, %if.end436
  %308 = load i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 9), align 8, !dbg !5007
  %tobool500 = icmp ne i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)* %308, null, !dbg !5009
  br i1 %tobool500, label %land.lhs.true501, label %if.end518, !dbg !5010

land.lhs.true501:                                 ; preds = %if.end499
  %309 = load i32, i32* getelementptr inbounds (%struct.ready_list, %struct.ready_list* @ready, i32 0, i32 3), align 8, !dbg !5011
  %cmp502 = icmp eq i32 %309, 0, !dbg !5012
  br i1 %cmp502, label %if.then510, label %lor.lhs.false504, !dbg !5013

lor.lhs.false504:                                 ; preds = %land.lhs.true501
  %call505 = call %struct.rtx_def* @ready_element(%struct.ready_list* @ready, i32 0), !dbg !5014
  %310 = bitcast %struct.rtx_def* %call505 to i32*, !dbg !5014
  %bf.load506 = load i32, i32* %310, align 8, !dbg !5014
  %bf.lshr507 = lshr i32 %bf.load506, 28, !dbg !5014
  %bf.clear508 = and i32 %bf.lshr507, 1, !dbg !5014
  %tobool509 = icmp ne i32 %bf.clear508, 0, !dbg !5014
  br i1 %tobool509, label %if.end518, label %if.then510, !dbg !5015

if.then510:                                       ; preds = %lor.lhs.false504, %land.lhs.true501
  %311 = load i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 9), align 8, !dbg !5016
  %312 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !5018
  %313 = load i32, i32* @sched_verbose, align 4, !dbg !5019
  %314 = load i32, i32* getelementptr inbounds (%struct.ready_list, %struct.ready_list* @ready, i32 0, i32 3), align 8, !dbg !5020
  %tobool511 = icmp ne i32 %314, 0, !dbg !5021
  br i1 %tobool511, label %cond.true512, label %cond.false514, !dbg !5021

cond.true512:                                     ; preds = %if.then510
  %call513 = call %struct.rtx_def** @ready_lastpos(%struct.ready_list* @ready), !dbg !5022
  br label %cond.end515, !dbg !5021

cond.false514:                                    ; preds = %if.then510
  br label %cond.end515, !dbg !5021

cond.end515:                                      ; preds = %cond.false514, %cond.true512
  %cond516 = phi %struct.rtx_def** [ %call513, %cond.true512 ], [ null, %cond.false514 ], !dbg !5021
  %315 = load i32, i32* @clock_var, align 4, !dbg !5023
  %call517 = call i32 %311(%struct._IO_FILE* %312, i32 %313, %struct.rtx_def** %cond516, i32* getelementptr inbounds (%struct.ready_list, %struct.ready_list* @ready, i32 0, i32 3), i32 %315), !dbg !5024
  store i32 %call517, i32* %can_issue_more, align 4, !dbg !5025
  br label %if.end518, !dbg !5026

if.end518:                                        ; preds = %cond.end515, %lor.lhs.false504, %if.end499
  br label %for.cond186, !dbg !5027, !llvm.loop !4698

for.end519:                                       ; preds = %if.then431, %if.then318, %if.then266, %if.then260, %if.then231, %if.then224
  br label %while.cond84, !dbg !4466, !llvm.loop !4590

while.end520:                                     ; preds = %while.cond84
  %316 = load i32, i32* @sched_verbose, align 4, !dbg !5028
  %tobool521 = icmp ne i32 %316, 0, !dbg !5028
  br i1 %tobool521, label %if.then522, label %if.end524, !dbg !5030

if.then522:                                       ; preds = %while.end520
  %317 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !5031
  %call523 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %317, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.10, i64 0, i64 0)), !dbg !5033
  call void @debug_ready_list(%struct.ready_list* @ready), !dbg !5034
  br label %if.end524, !dbg !5035

if.end524:                                        ; preds = %if.then522, %while.end520
  %318 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !5036
  %queue_must_finish_empty = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %318, i32 0, i32 12, !dbg !5038
  %bf.load525 = load i8, i8* %queue_must_finish_empty, align 8, !dbg !5038
  %bf.clear526 = and i8 %bf.load525, 1, !dbg !5038
  %bf.cast = zext i8 %bf.clear526 to i32, !dbg !5038
  %tobool527 = icmp ne i32 %bf.cast, 0, !dbg !5036
  br i1 %tobool527, label %if.then528, label %if.else538, !dbg !5039

if.then528:                                       ; preds = %if.end524
  %319 = load i32, i32* @q_size, align 4, !dbg !5040
  %tobool529 = icmp ne i32 %319, 0, !dbg !5040
  br i1 %tobool529, label %cond.true534, label %land.lhs.true530, !dbg !5040

land.lhs.true530:                                 ; preds = %if.then528
  %320 = load i32, i32* getelementptr inbounds (%struct.ready_list, %struct.ready_list* @ready, i32 0, i32 3), align 8, !dbg !5040
  %tobool531 = icmp ne i32 %320, 0, !dbg !5040
  br i1 %tobool531, label %cond.true534, label %land.lhs.true532, !dbg !5040

land.lhs.true532:                                 ; preds = %land.lhs.true530
  %321 = load i32, i32* getelementptr inbounds (%struct.ready_list, %struct.ready_list* @ready, i32 0, i32 4), align 4, !dbg !5040
  %tobool533 = icmp ne i32 %321, 0, !dbg !5040
  br i1 %tobool533, label %cond.true534, label %cond.false535, !dbg !5040

cond.true534:                                     ; preds = %land.lhs.true532, %land.lhs.true530, %if.then528
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 3229, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !5040
  br label %cond.end536, !dbg !5040

cond.false535:                                    ; preds = %land.lhs.true532
  br label %cond.end536, !dbg !5040

cond.end536:                                      ; preds = %cond.false535, %cond.true534
  %cond537 = phi i32 [ 0, %cond.true534 ], [ 0, %cond.false535 ], !dbg !5040
  br label %if.end651, !dbg !5040

if.else538:                                       ; preds = %if.end524
  %322 = load i32, i32* getelementptr inbounds (%struct.ready_list, %struct.ready_list* @ready, i32 0, i32 3), align 8, !dbg !5041
  %sub539 = sub nsw i32 %322, 1, !dbg !5044
  store i32 %sub539, i32* %i, align 4, !dbg !5045
  br label %for.cond540, !dbg !5046

for.cond540:                                      ; preds = %for.inc583, %if.else538
  %323 = load i32, i32* %i, align 4, !dbg !5047
  %cmp541 = icmp sge i32 %323, 0, !dbg !5049
  br i1 %cmp541, label %for.body543, label %for.end585, !dbg !5050

for.body543:                                      ; preds = %for.cond540
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x544, metadata !5051, metadata !DIExpression()), !dbg !5053
  %324 = load i32, i32* %i, align 4, !dbg !5054
  %call545 = call %struct.rtx_def* @ready_element(%struct.ready_list* @ready, i32 %324), !dbg !5055
  store %struct.rtx_def* %call545, %struct.rtx_def** %x544, align 8, !dbg !5056
  %325 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !5057
  %tobool546 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %325, null, !dbg !5057
  br i1 %tobool546, label %cond.true547, label %cond.false549, !dbg !5057

cond.true547:                                     ; preds = %for.body543
  %326 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !5057
  %base548 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %326, i32 0, i32 0, !dbg !5057
  br label %cond.end550, !dbg !5057

cond.false549:                                    ; preds = %for.body543
  br label %cond.end550, !dbg !5057

cond.end550:                                      ; preds = %cond.false549, %cond.true547
  %cond551 = phi %struct.VEC_haifa_insn_data_def_base* [ %base548, %cond.true547 ], [ null, %cond.false549 ], !dbg !5057
  %327 = load %struct.rtx_def*, %struct.rtx_def** %x544, align 8, !dbg !5057
  %u552 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %327, i32 0, i32 1, !dbg !5057
  %fld553 = bitcast %union.u* %u552 to [1 x %union.rtunion_def]*, !dbg !5057
  %arrayidx554 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld553, i64 0, i64 0, !dbg !5057
  %rt_int555 = bitcast %union.rtunion_def* %arrayidx554 to i32*, !dbg !5057
  %328 = load i32, i32* %rt_int555, align 8, !dbg !5057
  %call556 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond551, i32 %328), !dbg !5057
  %queue_index = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call556, i32 0, i32 4, !dbg !5057
  store i32 -2, i32* %queue_index, align 8, !dbg !5058
  %329 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !5059
  %tobool557 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %329, null, !dbg !5059
  br i1 %tobool557, label %cond.true558, label %cond.false560, !dbg !5059

cond.true558:                                     ; preds = %cond.end550
  %330 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !5059
  %base559 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %330, i32 0, i32 0, !dbg !5059
  br label %cond.end561, !dbg !5059

cond.false560:                                    ; preds = %cond.end550
  br label %cond.end561, !dbg !5059

cond.end561:                                      ; preds = %cond.false560, %cond.true558
  %cond562 = phi %struct.VEC_haifa_insn_data_def_base* [ %base559, %cond.true558 ], [ null, %cond.false560 ], !dbg !5059
  %331 = load %struct.rtx_def*, %struct.rtx_def** %x544, align 8, !dbg !5059
  %u563 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %331, i32 0, i32 1, !dbg !5059
  %fld564 = bitcast %union.u* %u563 to [1 x %union.rtunion_def]*, !dbg !5059
  %arrayidx565 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld564, i64 0, i64 0, !dbg !5059
  %rt_int566 = bitcast %union.rtunion_def* %arrayidx565 to i32*, !dbg !5059
  %332 = load i32, i32* %rt_int566, align 8, !dbg !5059
  %call567 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond562, i32 %332), !dbg !5059
  %todo_spec568 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call567, i32 0, i32 8, !dbg !5059
  %333 = load i32, i32* %todo_spec568, align 8, !dbg !5059
  %and569 = and i32 %333, -16777216, !dbg !5060
  %or570 = or i32 %and569, 134217728, !dbg !5061
  %334 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !5062
  %tobool571 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %334, null, !dbg !5062
  br i1 %tobool571, label %cond.true572, label %cond.false574, !dbg !5062

cond.true572:                                     ; preds = %cond.end561
  %335 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !5062
  %base573 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %335, i32 0, i32 0, !dbg !5062
  br label %cond.end575, !dbg !5062

cond.false574:                                    ; preds = %cond.end561
  br label %cond.end575, !dbg !5062

cond.end575:                                      ; preds = %cond.false574, %cond.true572
  %cond576 = phi %struct.VEC_haifa_insn_data_def_base* [ %base573, %cond.true572 ], [ null, %cond.false574 ], !dbg !5062
  %336 = load %struct.rtx_def*, %struct.rtx_def** %x544, align 8, !dbg !5062
  %u577 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %336, i32 0, i32 1, !dbg !5062
  %fld578 = bitcast %union.u* %u577 to [1 x %union.rtunion_def]*, !dbg !5062
  %arrayidx579 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld578, i64 0, i64 0, !dbg !5062
  %rt_int580 = bitcast %union.rtunion_def* %arrayidx579 to i32*, !dbg !5062
  %337 = load i32, i32* %rt_int580, align 8, !dbg !5062
  %call581 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond576, i32 %337), !dbg !5062
  %todo_spec582 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call581, i32 0, i32 8, !dbg !5062
  store i32 %or570, i32* %todo_spec582, align 8, !dbg !5063
  br label %for.inc583, !dbg !5064

for.inc583:                                       ; preds = %cond.end575
  %338 = load i32, i32* %i, align 4, !dbg !5065
  %dec584 = add nsw i32 %338, -1, !dbg !5065
  store i32 %dec584, i32* %i, align 4, !dbg !5065
  br label %for.cond540, !dbg !5066, !llvm.loop !5067

for.end585:                                       ; preds = %for.cond540
  %339 = load i32, i32* @q_size, align 4, !dbg !5069
  %tobool586 = icmp ne i32 %339, 0, !dbg !5069
  br i1 %tobool586, label %if.then587, label %if.end650, !dbg !5071

if.then587:                                       ; preds = %for.end585
  store i32 0, i32* %i, align 4, !dbg !5072
  br label %for.cond588, !dbg !5074

for.cond588:                                      ; preds = %for.inc647, %if.then587
  %340 = load i32, i32* %i, align 4, !dbg !5075
  %341 = load i32, i32* @max_insn_queue_index, align 4, !dbg !5077
  %cmp589 = icmp sle i32 %340, %341, !dbg !5078
  br i1 %cmp589, label %for.body591, label %for.end649, !dbg !5079

for.body591:                                      ; preds = %for.cond588
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %link, metadata !5080, metadata !DIExpression()), !dbg !5082
  %342 = load %struct.rtx_def**, %struct.rtx_def*** @insn_queue, align 8, !dbg !5083
  %343 = load i32, i32* %i, align 4, !dbg !5085
  %idxprom = sext i32 %343 to i64, !dbg !5083
  %arrayidx592 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %342, i64 %idxprom, !dbg !5083
  %344 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx592, align 8, !dbg !5083
  store %struct.rtx_def* %344, %struct.rtx_def** %link, align 8, !dbg !5086
  br label %for.cond593, !dbg !5087

for.cond593:                                      ; preds = %for.inc639, %for.body591
  %345 = load %struct.rtx_def*, %struct.rtx_def** %link, align 8, !dbg !5088
  %tobool594 = icmp ne %struct.rtx_def* %345, null, !dbg !5090
  br i1 %tobool594, label %for.body595, label %for.end644, !dbg !5090

for.body595:                                      ; preds = %for.cond593
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x596, metadata !5091, metadata !DIExpression()), !dbg !5093
  %346 = load %struct.rtx_def*, %struct.rtx_def** %link, align 8, !dbg !5094
  %u597 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %346, i32 0, i32 1, !dbg !5094
  %fld598 = bitcast %union.u* %u597 to [1 x %union.rtunion_def]*, !dbg !5094
  %arrayidx599 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld598, i64 0, i64 0, !dbg !5094
  %rt_rtx600 = bitcast %union.rtunion_def* %arrayidx599 to %struct.rtx_def**, !dbg !5094
  %347 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx600, align 8, !dbg !5094
  store %struct.rtx_def* %347, %struct.rtx_def** %x596, align 8, !dbg !5095
  %348 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !5096
  %tobool601 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %348, null, !dbg !5096
  br i1 %tobool601, label %cond.true602, label %cond.false604, !dbg !5096

cond.true602:                                     ; preds = %for.body595
  %349 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !5096
  %base603 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %349, i32 0, i32 0, !dbg !5096
  br label %cond.end605, !dbg !5096

cond.false604:                                    ; preds = %for.body595
  br label %cond.end605, !dbg !5096

cond.end605:                                      ; preds = %cond.false604, %cond.true602
  %cond606 = phi %struct.VEC_haifa_insn_data_def_base* [ %base603, %cond.true602 ], [ null, %cond.false604 ], !dbg !5096
  %350 = load %struct.rtx_def*, %struct.rtx_def** %x596, align 8, !dbg !5096
  %u607 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %350, i32 0, i32 1, !dbg !5096
  %fld608 = bitcast %union.u* %u607 to [1 x %union.rtunion_def]*, !dbg !5096
  %arrayidx609 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld608, i64 0, i64 0, !dbg !5096
  %rt_int610 = bitcast %union.rtunion_def* %arrayidx609 to i32*, !dbg !5096
  %351 = load i32, i32* %rt_int610, align 8, !dbg !5096
  %call611 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond606, i32 %351), !dbg !5096
  %queue_index612 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call611, i32 0, i32 4, !dbg !5096
  store i32 -2, i32* %queue_index612, align 8, !dbg !5097
  %352 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !5098
  %tobool613 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %352, null, !dbg !5098
  br i1 %tobool613, label %cond.true614, label %cond.false616, !dbg !5098

cond.true614:                                     ; preds = %cond.end605
  %353 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !5098
  %base615 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %353, i32 0, i32 0, !dbg !5098
  br label %cond.end617, !dbg !5098

cond.false616:                                    ; preds = %cond.end605
  br label %cond.end617, !dbg !5098

cond.end617:                                      ; preds = %cond.false616, %cond.true614
  %cond618 = phi %struct.VEC_haifa_insn_data_def_base* [ %base615, %cond.true614 ], [ null, %cond.false616 ], !dbg !5098
  %354 = load %struct.rtx_def*, %struct.rtx_def** %x596, align 8, !dbg !5098
  %u619 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %354, i32 0, i32 1, !dbg !5098
  %fld620 = bitcast %union.u* %u619 to [1 x %union.rtunion_def]*, !dbg !5098
  %arrayidx621 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld620, i64 0, i64 0, !dbg !5098
  %rt_int622 = bitcast %union.rtunion_def* %arrayidx621 to i32*, !dbg !5098
  %355 = load i32, i32* %rt_int622, align 8, !dbg !5098
  %call623 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond618, i32 %355), !dbg !5098
  %todo_spec624 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call623, i32 0, i32 8, !dbg !5098
  %356 = load i32, i32* %todo_spec624, align 8, !dbg !5098
  %and625 = and i32 %356, -16777216, !dbg !5099
  %or626 = or i32 %and625, 134217728, !dbg !5100
  %357 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !5101
  %tobool627 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %357, null, !dbg !5101
  br i1 %tobool627, label %cond.true628, label %cond.false630, !dbg !5101

cond.true628:                                     ; preds = %cond.end617
  %358 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !5101
  %base629 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %358, i32 0, i32 0, !dbg !5101
  br label %cond.end631, !dbg !5101

cond.false630:                                    ; preds = %cond.end617
  br label %cond.end631, !dbg !5101

cond.end631:                                      ; preds = %cond.false630, %cond.true628
  %cond632 = phi %struct.VEC_haifa_insn_data_def_base* [ %base629, %cond.true628 ], [ null, %cond.false630 ], !dbg !5101
  %359 = load %struct.rtx_def*, %struct.rtx_def** %x596, align 8, !dbg !5101
  %u633 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %359, i32 0, i32 1, !dbg !5101
  %fld634 = bitcast %union.u* %u633 to [1 x %union.rtunion_def]*, !dbg !5101
  %arrayidx635 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld634, i64 0, i64 0, !dbg !5101
  %rt_int636 = bitcast %union.rtunion_def* %arrayidx635 to i32*, !dbg !5101
  %360 = load i32, i32* %rt_int636, align 8, !dbg !5101
  %call637 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond632, i32 %360), !dbg !5101
  %todo_spec638 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call637, i32 0, i32 8, !dbg !5101
  store i32 %or626, i32* %todo_spec638, align 8, !dbg !5102
  br label %for.inc639, !dbg !5103

for.inc639:                                       ; preds = %cond.end631
  %361 = load %struct.rtx_def*, %struct.rtx_def** %link, align 8, !dbg !5104
  %u640 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %361, i32 0, i32 1, !dbg !5104
  %fld641 = bitcast %union.u* %u640 to [1 x %union.rtunion_def]*, !dbg !5104
  %arrayidx642 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld641, i64 0, i64 1, !dbg !5104
  %rt_rtx643 = bitcast %union.rtunion_def* %arrayidx642 to %struct.rtx_def**, !dbg !5104
  %362 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx643, align 8, !dbg !5104
  store %struct.rtx_def* %362, %struct.rtx_def** %link, align 8, !dbg !5105
  br label %for.cond593, !dbg !5106, !llvm.loop !5107

for.end644:                                       ; preds = %for.cond593
  %363 = load %struct.rtx_def**, %struct.rtx_def*** @insn_queue, align 8, !dbg !5109
  %364 = load i32, i32* %i, align 4, !dbg !5110
  %idxprom645 = sext i32 %364 to i64, !dbg !5109
  %arrayidx646 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %363, i64 %idxprom645, !dbg !5109
  call void @free_INSN_LIST_list(%struct.rtx_def** %arrayidx646), !dbg !5111
  br label %for.inc647, !dbg !5112

for.inc647:                                       ; preds = %for.end644
  %365 = load i32, i32* %i, align 4, !dbg !5113
  %inc648 = add nsw i32 %365, 1, !dbg !5113
  store i32 %inc648, i32* %i, align 4, !dbg !5113
  br label %for.cond588, !dbg !5114, !llvm.loop !5115

for.end649:                                       ; preds = %for.cond588
  br label %if.end650, !dbg !5116

if.end650:                                        ; preds = %for.end649, %for.end585
  br label %if.end651

if.end651:                                        ; preds = %if.end650, %cond.end536
  %366 = load i32, i32* @sched_verbose, align 4, !dbg !5117
  %tobool652 = icmp ne i32 %366, 0, !dbg !5117
  br i1 %tobool652, label %if.then653, label %if.end655, !dbg !5119

if.then653:                                       ; preds = %if.end651
  %367 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !5120
  %368 = load i32, i32* @clock_var, align 4, !dbg !5121
  %call654 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %367, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.11, i64 0, i64 0), i32 %368), !dbg !5122
  br label %if.end655, !dbg !5122

if.end655:                                        ; preds = %if.then653, %if.end651
  %369 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !5123
  %queue_must_finish_empty656 = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %369, i32 0, i32 12, !dbg !5125
  %bf.load657 = load i8, i8* %queue_must_finish_empty656, align 8, !dbg !5125
  %bf.clear658 = and i8 %bf.load657, 1, !dbg !5125
  %bf.cast659 = zext i8 %bf.clear658 to i32, !dbg !5125
  %tobool660 = icmp ne i32 %bf.cast659, 0, !dbg !5123
  br i1 %tobool660, label %lor.lhs.false661, label %if.then664, !dbg !5126

lor.lhs.false661:                                 ; preds = %if.end655
  %370 = load i8, i8* @haifa_recovery_bb_recently_added_p, align 1, !dbg !5127
  %conv662 = zext i8 %370 to i32, !dbg !5127
  %tobool663 = icmp ne i32 %conv662, 0, !dbg !5127
  br i1 %tobool663, label %if.then664, label %if.end669, !dbg !5128

if.then664:                                       ; preds = %lor.lhs.false661, %if.end655
  %371 = load %struct.rtx_def*, %struct.rtx_def** %prev_head, align 8, !dbg !5129
  %u665 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %371, i32 0, i32 1, !dbg !5129
  %fld666 = bitcast %union.u* %u665 to [1 x %union.rtunion_def]*, !dbg !5129
  %arrayidx667 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld666, i64 0, i64 2, !dbg !5129
  %rt_rtx668 = bitcast %union.rtunion_def* %arrayidx667 to %struct.rtx_def**, !dbg !5129
  %372 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx668, align 8, !dbg !5129
  %373 = load %struct.rtx_def*, %struct.rtx_def** @last_scheduled_insn, align 8, !dbg !5131
  call void @fix_inter_tick(%struct.rtx_def* %372, %struct.rtx_def* %373), !dbg !5132
  br label %if.end669, !dbg !5133

if.end669:                                        ; preds = %if.then664, %lor.lhs.false661
  %374 = load void (%struct._IO_FILE*, i32)*, void (%struct._IO_FILE*, i32)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 5), align 8, !dbg !5134
  %tobool670 = icmp ne void (%struct._IO_FILE*, i32)* %374, null, !dbg !5136
  br i1 %tobool670, label %if.then671, label %if.end672, !dbg !5137

if.then671:                                       ; preds = %if.end669
  %375 = load void (%struct._IO_FILE*, i32)*, void (%struct._IO_FILE*, i32)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 5), align 8, !dbg !5138
  %376 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !5140
  %377 = load i32, i32* @sched_verbose, align 4, !dbg !5141
  call void %375(%struct._IO_FILE* %376, i32 %377), !dbg !5142
  call void @sched_init_luids(%struct.VEC_basic_block_heap* null, %struct.basic_block_def* null, %struct.VEC_rtx_heap* null, %struct.rtx_def* null), !dbg !5143
  br label %if.end672, !dbg !5144

if.end672:                                        ; preds = %if.then671, %if.end669
  %378 = load i32, i32* @sched_verbose, align 4, !dbg !5145
  %tobool673 = icmp ne i32 %378, 0, !dbg !5145
  br i1 %tobool673, label %if.then674, label %if.end684, !dbg !5147

if.then674:                                       ; preds = %if.end672
  %379 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !5148
  %380 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !5149
  %u675 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %380, i32 0, i32 1, !dbg !5149
  %fld676 = bitcast %union.u* %u675 to [1 x %union.rtunion_def]*, !dbg !5149
  %arrayidx677 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld676, i64 0, i64 0, !dbg !5149
  %rt_int678 = bitcast %union.rtunion_def* %arrayidx677 to i32*, !dbg !5149
  %381 = load i32, i32* %rt_int678, align 8, !dbg !5149
  %382 = load %struct.rtx_def*, %struct.rtx_def** %tail, align 8, !dbg !5150
  %u679 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %382, i32 0, i32 1, !dbg !5150
  %fld680 = bitcast %union.u* %u679 to [1 x %union.rtunion_def]*, !dbg !5150
  %arrayidx681 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld680, i64 0, i64 0, !dbg !5150
  %rt_int682 = bitcast %union.rtunion_def* %arrayidx681 to i32*, !dbg !5150
  %383 = load i32, i32* %rt_int682, align 8, !dbg !5150
  %call683 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %379, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.12, i64 0, i64 0), i32 %381, i32 %383), !dbg !5151
  br label %if.end684, !dbg !5151

if.end684:                                        ; preds = %if.then674, %if.end672
  %384 = load %struct.rtx_def*, %struct.rtx_def** %prev_head, align 8, !dbg !5152
  %u685 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %384, i32 0, i32 1, !dbg !5152
  %fld686 = bitcast %union.u* %u685 to [1 x %union.rtunion_def]*, !dbg !5152
  %arrayidx687 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld686, i64 0, i64 2, !dbg !5152
  %rt_rtx688 = bitcast %union.rtunion_def* %arrayidx687 to %struct.rtx_def**, !dbg !5152
  %385 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx688, align 8, !dbg !5152
  store %struct.rtx_def* %385, %struct.rtx_def** %head, align 8, !dbg !5153
  %386 = load %struct.rtx_def*, %struct.rtx_def** @last_scheduled_insn, align 8, !dbg !5154
  store %struct.rtx_def* %386, %struct.rtx_def** %tail, align 8, !dbg !5155
  %387 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !5156
  %call689 = call %struct.rtx_def* @restore_other_notes(%struct.rtx_def* %387, %struct.basic_block_def* null), !dbg !5157
  store %struct.rtx_def* %call689, %struct.rtx_def** %head, align 8, !dbg !5158
  %388 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !5159
  %389 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !5160
  %head690 = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %389, i32 0, i32 10, !dbg !5161
  store %struct.rtx_def* %388, %struct.rtx_def** %head690, align 8, !dbg !5162
  %390 = load %struct.rtx_def*, %struct.rtx_def** %tail, align 8, !dbg !5163
  %391 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !5164
  %tail691 = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %391, i32 0, i32 11, !dbg !5165
  store %struct.rtx_def* %390, %struct.rtx_def** %tail691, align 8, !dbg !5166
  ret void, !dbg !5167
}

; Function Attrs: noinline nounwind uwtable
define internal void @dump_new_block_header(i32 %i, %struct.basic_block_def* %bb, %struct.rtx_def* %head, %struct.rtx_def* %tail) #0 !dbg !5168 {
entry:
  %i.addr = alloca i32, align 4
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %head.addr = alloca %struct.rtx_def*, align 8
  %tail.addr = alloca %struct.rtx_def*, align 8
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !5171, metadata !DIExpression()), !dbg !5172
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5173, metadata !DIExpression()), !dbg !5174
  store %struct.rtx_def* %head, %struct.rtx_def** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %head.addr, metadata !5175, metadata !DIExpression()), !dbg !5176
  store %struct.rtx_def* %tail, %struct.rtx_def** %tail.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tail.addr, metadata !5177, metadata !DIExpression()), !dbg !5178
  %0 = load i32, i32* %i.addr, align 4, !dbg !5179
  %tobool = icmp ne i32 %0, 0, !dbg !5179
  br i1 %tobool, label %if.else, label %if.then, !dbg !5181

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !5182
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.55, i64 0, i64 0)), !dbg !5183
  br label %if.end, !dbg !5183

if.else:                                          ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !5184
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.56, i64 0, i64 0)), !dbg !5185
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !5186
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5187
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 9, !dbg !5188
  %5 = load i32, i32* %index, align 8, !dbg !5188
  %6 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !5189
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !5189
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5189
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !5189
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !5189
  %7 = load i32, i32* %rt_int, align 8, !dbg !5189
  %8 = load %struct.rtx_def*, %struct.rtx_def** %tail.addr, align 8, !dbg !5190
  %u2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !5190
  %fld3 = bitcast %union.u* %u2 to [1 x %union.rtunion_def]*, !dbg !5190
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3, i64 0, i64 0, !dbg !5190
  %rt_int5 = bitcast %union.rtunion_def* %arrayidx4 to i32*, !dbg !5190
  %9 = load i32, i32* %rt_int5, align 8, !dbg !5190
  %10 = load i32, i32* @reload_completed, align 4, !dbg !5191
  %tobool6 = icmp ne i32 %10, 0, !dbg !5191
  %11 = zext i1 %tobool6 to i64, !dbg !5191
  %cond = select i1 %tobool6, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.58, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.59, i64 0, i64 0), !dbg !5191
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.57, i64 0, i64 0), i32 %5, i32 %7, i32 %9, i8* %cond), !dbg !5192
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !5193
  %call8 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.55, i64 0, i64 0)), !dbg !5194
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !5195
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22, i64 0, i64 0)), !dbg !5196
  ret void, !dbg !5197
}

declare dso_local void @state_reset(i8*) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

declare dso_local zeroext i8 @dbg_cnt(i32) #2

declare dso_local %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @ready_remove(%struct.ready_list* %ready, i32 %index) #0 !dbg !5198 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %ready.addr = alloca %struct.ready_list*, align 8
  %index.addr = alloca i32, align 4
  %t = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  store %struct.ready_list* %ready, %struct.ready_list** %ready.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ready_list** %ready.addr, metadata !5199, metadata !DIExpression()), !dbg !5200
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !5201, metadata !DIExpression()), !dbg !5202
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %t, metadata !5203, metadata !DIExpression()), !dbg !5204
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5205, metadata !DIExpression()), !dbg !5206
  %0 = load i32, i32* %index.addr, align 4, !dbg !5207
  %cmp = icmp eq i32 %0, 0, !dbg !5209
  br i1 %cmp, label %if.then, label %if.end, !dbg !5210

if.then:                                          ; preds = %entry
  %1 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !5211
  %call = call %struct.rtx_def* @ready_remove_first(%struct.ready_list* %1), !dbg !5212
  store %struct.rtx_def* %call, %struct.rtx_def** %retval, align 8, !dbg !5213
  br label %return, !dbg !5213

if.end:                                           ; preds = %entry
  %2 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !5214
  %n_ready = getelementptr inbounds %struct.ready_list, %struct.ready_list* %2, i32 0, i32 3, !dbg !5214
  %3 = load i32, i32* %n_ready, align 8, !dbg !5214
  %tobool = icmp ne i32 %3, 0, !dbg !5214
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !5214

land.lhs.true:                                    ; preds = %if.end
  %4 = load i32, i32* %index.addr, align 4, !dbg !5214
  %5 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !5214
  %n_ready1 = getelementptr inbounds %struct.ready_list, %struct.ready_list* %5, i32 0, i32 3, !dbg !5214
  %6 = load i32, i32* %n_ready1, align 8, !dbg !5214
  %cmp2 = icmp slt i32 %4, %6, !dbg !5214
  br i1 %cmp2, label %cond.false, label %cond.true, !dbg !5214

cond.true:                                        ; preds = %land.lhs.true, %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 1473, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !5214
  br label %cond.end, !dbg !5214

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !5214

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5214
  %7 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !5215
  %vec = getelementptr inbounds %struct.ready_list, %struct.ready_list* %7, i32 0, i32 0, !dbg !5216
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %vec, align 8, !dbg !5216
  %9 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !5217
  %first = getelementptr inbounds %struct.ready_list, %struct.ready_list* %9, i32 0, i32 2, !dbg !5218
  %10 = load i32, i32* %first, align 4, !dbg !5218
  %11 = load i32, i32* %index.addr, align 4, !dbg !5219
  %sub = sub nsw i32 %10, %11, !dbg !5220
  %idxprom = sext i32 %sub to i64, !dbg !5215
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %8, i64 %idxprom, !dbg !5215
  %12 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8, !dbg !5215
  store %struct.rtx_def* %12, %struct.rtx_def** %t, align 8, !dbg !5221
  %13 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !5222
  %n_ready3 = getelementptr inbounds %struct.ready_list, %struct.ready_list* %13, i32 0, i32 3, !dbg !5223
  %14 = load i32, i32* %n_ready3, align 8, !dbg !5224
  %dec = add nsw i32 %14, -1, !dbg !5224
  store i32 %dec, i32* %n_ready3, align 8, !dbg !5224
  %15 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8, !dbg !5225
  %16 = bitcast %struct.rtx_def* %15 to i32*, !dbg !5225
  %bf.load = load i32, i32* %16, align 8, !dbg !5225
  %bf.clear = and i32 %bf.load, 65535, !dbg !5225
  %cmp4 = icmp eq i32 %bf.clear, 7, !dbg !5225
  br i1 %cmp4, label %if.then5, label %if.end7, !dbg !5227

if.then5:                                         ; preds = %cond.end
  %17 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !5228
  %n_debug = getelementptr inbounds %struct.ready_list, %struct.ready_list* %17, i32 0, i32 4, !dbg !5229
  %18 = load i32, i32* %n_debug, align 4, !dbg !5230
  %dec6 = add nsw i32 %18, -1, !dbg !5230
  store i32 %dec6, i32* %n_debug, align 4, !dbg !5230
  br label %if.end7, !dbg !5228

if.end7:                                          ; preds = %if.then5, %cond.end
  %19 = load i32, i32* %index.addr, align 4, !dbg !5231
  store i32 %19, i32* %i, align 4, !dbg !5233
  br label %for.cond, !dbg !5234

for.cond:                                         ; preds = %for.inc, %if.end7
  %20 = load i32, i32* %i, align 4, !dbg !5235
  %21 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !5237
  %n_ready8 = getelementptr inbounds %struct.ready_list, %struct.ready_list* %21, i32 0, i32 3, !dbg !5238
  %22 = load i32, i32* %n_ready8, align 8, !dbg !5238
  %cmp9 = icmp slt i32 %20, %22, !dbg !5239
  br i1 %cmp9, label %for.body, label %for.end, !dbg !5240

for.body:                                         ; preds = %for.cond
  %23 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !5241
  %vec10 = getelementptr inbounds %struct.ready_list, %struct.ready_list* %23, i32 0, i32 0, !dbg !5242
  %24 = load %struct.rtx_def**, %struct.rtx_def*** %vec10, align 8, !dbg !5242
  %25 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !5243
  %first11 = getelementptr inbounds %struct.ready_list, %struct.ready_list* %25, i32 0, i32 2, !dbg !5244
  %26 = load i32, i32* %first11, align 4, !dbg !5244
  %27 = load i32, i32* %i, align 4, !dbg !5245
  %sub12 = sub nsw i32 %26, %27, !dbg !5246
  %sub13 = sub nsw i32 %sub12, 1, !dbg !5247
  %idxprom14 = sext i32 %sub13 to i64, !dbg !5241
  %arrayidx15 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %24, i64 %idxprom14, !dbg !5241
  %28 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx15, align 8, !dbg !5241
  %29 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !5248
  %vec16 = getelementptr inbounds %struct.ready_list, %struct.ready_list* %29, i32 0, i32 0, !dbg !5249
  %30 = load %struct.rtx_def**, %struct.rtx_def*** %vec16, align 8, !dbg !5249
  %31 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !5250
  %first17 = getelementptr inbounds %struct.ready_list, %struct.ready_list* %31, i32 0, i32 2, !dbg !5251
  %32 = load i32, i32* %first17, align 4, !dbg !5251
  %33 = load i32, i32* %i, align 4, !dbg !5252
  %sub18 = sub nsw i32 %32, %33, !dbg !5253
  %idxprom19 = sext i32 %sub18 to i64, !dbg !5248
  %arrayidx20 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %30, i64 %idxprom19, !dbg !5248
  store %struct.rtx_def* %28, %struct.rtx_def** %arrayidx20, align 8, !dbg !5254
  br label %for.inc, !dbg !5248

for.inc:                                          ; preds = %for.body
  %34 = load i32, i32* %i, align 4, !dbg !5255
  %inc = add nsw i32 %34, 1, !dbg !5255
  store i32 %inc, i32* %i, align 4, !dbg !5255
  br label %for.cond, !dbg !5256, !llvm.loop !5257

for.end:                                          ; preds = %for.cond
  %35 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !5259
  %tobool21 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %35, null, !dbg !5259
  br i1 %tobool21, label %cond.true22, label %cond.false23, !dbg !5259

cond.true22:                                      ; preds = %for.end
  %36 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !5259
  %base = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %36, i32 0, i32 0, !dbg !5259
  br label %cond.end24, !dbg !5259

cond.false23:                                     ; preds = %for.end
  br label %cond.end24, !dbg !5259

cond.end24:                                       ; preds = %cond.false23, %cond.true22
  %cond25 = phi %struct.VEC_haifa_insn_data_def_base* [ %base, %cond.true22 ], [ null, %cond.false23 ], !dbg !5259
  %37 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8, !dbg !5259
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1, !dbg !5259
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5259
  %arrayidx26 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !5259
  %rt_int = bitcast %union.rtunion_def* %arrayidx26 to i32*, !dbg !5259
  %38 = load i32, i32* %rt_int, align 8, !dbg !5259
  %call27 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond25, i32 %38), !dbg !5259
  %queue_index = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call27, i32 0, i32 4, !dbg !5259
  store i32 -2, i32* %queue_index, align 8, !dbg !5260
  %39 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8, !dbg !5261
  store %struct.rtx_def* %39, %struct.rtx_def** %retval, align 8, !dbg !5262
  br label %return, !dbg !5262

return:                                           ; preds = %cond.end24, %if.then
  %40 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !5263
  ret %struct.rtx_def* %40, !dbg !5263
}

; Function Attrs: noinline nounwind uwtable
define internal void @queue_insn(%struct.rtx_def* %insn, i32 %n_cycles) #0 !dbg !5264 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %n_cycles.addr = alloca i32, align 4
  %next_q = alloca i32, align 4
  %link = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !5265, metadata !DIExpression()), !dbg !5266
  store i32 %n_cycles, i32* %n_cycles.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n_cycles.addr, metadata !5267, metadata !DIExpression()), !dbg !5268
  call void @llvm.dbg.declare(metadata i32* %next_q, metadata !5269, metadata !DIExpression()), !dbg !5270
  %0 = load i32, i32* @q_ptr, align 4, !dbg !5271
  %1 = load i32, i32* %n_cycles.addr, align 4, !dbg !5271
  %add = add nsw i32 %0, %1, !dbg !5271
  %2 = load i32, i32* @max_insn_queue_index, align 4, !dbg !5271
  %and = and i32 %add, %2, !dbg !5271
  store i32 %and, i32* %next_q, align 4, !dbg !5270
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %link, metadata !5272, metadata !DIExpression()), !dbg !5273
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5274
  %4 = load %struct.rtx_def**, %struct.rtx_def*** @insn_queue, align 8, !dbg !5275
  %5 = load i32, i32* %next_q, align 4, !dbg !5276
  %idxprom = sext i32 %5 to i64, !dbg !5275
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 %idxprom, !dbg !5275
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8, !dbg !5275
  %call = call %struct.rtx_def* @alloc_INSN_LIST(%struct.rtx_def* %3, %struct.rtx_def* %6), !dbg !5277
  store %struct.rtx_def* %call, %struct.rtx_def** %link, align 8, !dbg !5273
  %7 = load i32, i32* %n_cycles.addr, align 4, !dbg !5278
  %8 = load i32, i32* @max_insn_queue_index, align 4, !dbg !5278
  %cmp = icmp sle i32 %7, %8, !dbg !5278
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5278

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 1346, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !5278
  br label %cond.end, !dbg !5278

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5278

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5278
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5279
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !5279
  %bf.load = load i32, i32* %10, align 8, !dbg !5279
  %bf.clear = and i32 %bf.load, 65535, !dbg !5279
  %cmp1 = icmp eq i32 %bf.clear, 7, !dbg !5279
  br i1 %cmp1, label %cond.true2, label %cond.false3, !dbg !5279

cond.true2:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 1347, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !5279
  br label %cond.end4, !dbg !5279

cond.false3:                                      ; preds = %cond.end
  br label %cond.end4, !dbg !5279

cond.end4:                                        ; preds = %cond.false3, %cond.true2
  %cond5 = phi i32 [ 0, %cond.true2 ], [ 0, %cond.false3 ], !dbg !5279
  %11 = load %struct.rtx_def*, %struct.rtx_def** %link, align 8, !dbg !5280
  %12 = load %struct.rtx_def**, %struct.rtx_def*** @insn_queue, align 8, !dbg !5281
  %13 = load i32, i32* %next_q, align 4, !dbg !5282
  %idxprom6 = sext i32 %13 to i64, !dbg !5281
  %arrayidx7 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %12, i64 %idxprom6, !dbg !5281
  store %struct.rtx_def* %11, %struct.rtx_def** %arrayidx7, align 8, !dbg !5283
  %14 = load i32, i32* @q_size, align 4, !dbg !5284
  %add8 = add nsw i32 %14, 1, !dbg !5284
  store i32 %add8, i32* @q_size, align 4, !dbg !5284
  %15 = load i32, i32* @sched_verbose, align 4, !dbg !5285
  %cmp9 = icmp sge i32 %15, 2, !dbg !5287
  br i1 %cmp9, label %if.then, label %if.end, !dbg !5288

if.then:                                          ; preds = %cond.end4
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !5289
  %17 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !5291
  %print_insn = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %17, i32 0, i32 5, !dbg !5292
  %18 = load i8* (%struct.rtx_def*, i32)*, i8* (%struct.rtx_def*, i32)** %print_insn, align 8, !dbg !5292
  %19 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5293
  %call10 = call i8* %18(%struct.rtx_def* %19, i32 0), !dbg !5294
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.24, i64 0, i64 0), i8* %call10), !dbg !5295
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !5296
  %21 = load i32, i32* %n_cycles.addr, align 4, !dbg !5297
  %call12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %20, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.25, i64 0, i64 0), i32 %21), !dbg !5298
  br label %if.end, !dbg !5299

if.end:                                           ; preds = %if.then, %cond.end4
  %22 = load i32, i32* %next_q, align 4, !dbg !5300
  %23 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !5301
  %tobool = icmp ne %struct.VEC_haifa_insn_data_def_heap* %23, null, !dbg !5301
  br i1 %tobool, label %cond.true13, label %cond.false14, !dbg !5301

cond.true13:                                      ; preds = %if.end
  %24 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !5301
  %base = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %24, i32 0, i32 0, !dbg !5301
  br label %cond.end15, !dbg !5301

cond.false14:                                     ; preds = %if.end
  br label %cond.end15, !dbg !5301

cond.end15:                                       ; preds = %cond.false14, %cond.true13
  %cond16 = phi %struct.VEC_haifa_insn_data_def_base* [ %base, %cond.true13 ], [ null, %cond.false14 ], !dbg !5301
  %25 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5301
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1, !dbg !5301
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5301
  %arrayidx17 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !5301
  %rt_int = bitcast %union.rtunion_def* %arrayidx17 to i32*, !dbg !5301
  %26 = load i32, i32* %rt_int, align 8, !dbg !5301
  %call18 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond16, i32 %26), !dbg !5301
  %queue_index = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call18, i32 0, i32 4, !dbg !5301
  store i32 %22, i32* %queue_index, align 8, !dbg !5302
  ret void, !dbg !5303
}

; Function Attrs: noinline nounwind uwtable
define internal void @restore_bb_notes(%struct.basic_block_def* %first) #0 !dbg !5304 {
entry:
  %first.addr = alloca %struct.basic_block_def*, align 8
  %prev = alloca %struct.rtx_def*, align 8
  %label = alloca %struct.rtx_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  %next = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def* %first, %struct.basic_block_def** %first.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %first.addr, metadata !5305, metadata !DIExpression()), !dbg !5306
  %0 = load %struct.rtx_def**, %struct.rtx_def*** @bb_header, align 8, !dbg !5307
  %tobool = icmp ne %struct.rtx_def** %0, null, !dbg !5307
  br i1 %tobool, label %if.end, label %if.then, !dbg !5309

if.then:                                          ; preds = %entry
  br label %return, !dbg !5310

if.end:                                           ; preds = %entry
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %first.addr, align 8, !dbg !5311
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 6, !dbg !5312
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !5312
  store %struct.basic_block_def* %2, %struct.basic_block_def** %first.addr, align 8, !dbg !5313
  br label %while.cond, !dbg !5314

while.cond:                                       ; preds = %cond.end, %if.end
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %first.addr, align 8, !dbg !5315
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5316
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !5316
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !5316
  %5 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5316
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %5, i32 0, i32 1, !dbg !5316
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !5316
  %cmp = icmp ne %struct.basic_block_def* %3, %6, !dbg !5317
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !5318

land.rhs:                                         ; preds = %while.cond
  %7 = load %struct.rtx_def**, %struct.rtx_def*** @bb_header, align 8, !dbg !5319
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %first.addr, align 8, !dbg !5320
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 9, !dbg !5321
  %9 = load i32, i32* %index, align 8, !dbg !5321
  %idxprom = sext i32 %9 to i64, !dbg !5319
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %7, i64 %idxprom, !dbg !5319
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8, !dbg !5319
  %tobool1 = icmp ne %struct.rtx_def* %10, null, !dbg !5318
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %11 = phi i1 [ false, %while.cond ], [ %tobool1, %land.rhs ], !dbg !5322
  br i1 %11, label %while.body, label %while.end, !dbg !5314

while.body:                                       ; preds = %land.end
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %prev, metadata !5323, metadata !DIExpression()), !dbg !5325
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %label, metadata !5326, metadata !DIExpression()), !dbg !5327
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !5328, metadata !DIExpression()), !dbg !5329
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %next, metadata !5330, metadata !DIExpression()), !dbg !5331
  %12 = load %struct.rtx_def**, %struct.rtx_def*** @bb_header, align 8, !dbg !5332
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %first.addr, align 8, !dbg !5333
  %index2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 9, !dbg !5334
  %14 = load i32, i32* %index2, align 8, !dbg !5334
  %idxprom3 = sext i32 %14 to i64, !dbg !5332
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %12, i64 %idxprom3, !dbg !5332
  %15 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8, !dbg !5332
  store %struct.rtx_def* %15, %struct.rtx_def** %label, align 8, !dbg !5335
  %16 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !5336
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !5336
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5336
  %arrayidx5 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !5336
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx5 to %struct.rtx_def**, !dbg !5336
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5336
  store %struct.rtx_def* %17, %struct.rtx_def** %prev, align 8, !dbg !5337
  %18 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !5338
  %u6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1, !dbg !5338
  %fld7 = bitcast %union.u* %u6 to [1 x %union.rtunion_def]*, !dbg !5338
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i64 0, i64 2, !dbg !5338
  %rt_rtx9 = bitcast %union.rtunion_def* %arrayidx8 to %struct.rtx_def**, !dbg !5338
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx9, align 8, !dbg !5338
  store %struct.rtx_def* %19, %struct.rtx_def** %next, align 8, !dbg !5339
  %20 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !5340
  %21 = bitcast %struct.rtx_def* %20 to i32*, !dbg !5340
  %bf.load = load i32, i32* %21, align 8, !dbg !5340
  %bf.clear = and i32 %bf.load, 65535, !dbg !5340
  %cmp10 = icmp eq i32 %bf.clear, 12, !dbg !5340
  br i1 %cmp10, label %if.then11, label %if.else, !dbg !5342

if.then11:                                        ; preds = %while.body
  %22 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !5343
  %u12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !5343
  %fld13 = bitcast %union.u* %u12 to [1 x %union.rtunion_def]*, !dbg !5343
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i64 0, i64 2, !dbg !5343
  %rt_rtx15 = bitcast %union.rtunion_def* %arrayidx14 to %struct.rtx_def**, !dbg !5343
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx15, align 8, !dbg !5343
  store %struct.rtx_def* %23, %struct.rtx_def** %note, align 8, !dbg !5344
  br label %if.end16, !dbg !5345

if.else:                                          ; preds = %while.body
  %24 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !5346
  store %struct.rtx_def* %24, %struct.rtx_def** %note, align 8, !dbg !5347
  br label %if.end16

if.end16:                                         ; preds = %if.else, %if.then11
  %25 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5348
  %26 = bitcast %struct.rtx_def* %25 to i32*, !dbg !5348
  %bf.load17 = load i32, i32* %26, align 8, !dbg !5348
  %bf.clear18 = and i32 %bf.load17, 65535, !dbg !5348
  %cmp19 = icmp eq i32 %bf.clear18, 13, !dbg !5348
  br i1 %cmp19, label %land.lhs.true, label %cond.true, !dbg !5348

land.lhs.true:                                    ; preds = %if.end16
  %27 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5348
  %u20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1, !dbg !5348
  %fld21 = bitcast %union.u* %u20 to [1 x %union.rtunion_def]*, !dbg !5348
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i64 0, i64 5, !dbg !5348
  %rt_int = bitcast %union.rtunion_def* %arrayidx22 to i32*, !dbg !5348
  %28 = load i32, i32* %rt_int, align 8, !dbg !5348
  %cmp23 = icmp eq i32 %28, 10, !dbg !5348
  br i1 %cmp23, label %cond.false, label %cond.true, !dbg !5348

cond.true:                                        ; preds = %land.lhs.true, %if.end16
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 4941, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !5348
  br label %cond.end, !dbg !5348

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !5348

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5348
  %29 = load %struct.rtx_def**, %struct.rtx_def*** @bb_header, align 8, !dbg !5349
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %first.addr, align 8, !dbg !5350
  %index24 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %30, i32 0, i32 9, !dbg !5351
  %31 = load i32, i32* %index24, align 8, !dbg !5351
  %idxprom25 = sext i32 %31 to i64, !dbg !5349
  %arrayidx26 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %29, i64 %idxprom25, !dbg !5349
  store %struct.rtx_def* null, %struct.rtx_def** %arrayidx26, align 8, !dbg !5352
  %32 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !5353
  %33 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !5354
  %u27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1, !dbg !5354
  %fld28 = bitcast %union.u* %u27 to [1 x %union.rtunion_def]*, !dbg !5354
  %arrayidx29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld28, i64 0, i64 2, !dbg !5354
  %rt_rtx30 = bitcast %union.rtunion_def* %arrayidx29 to %struct.rtx_def**, !dbg !5354
  store %struct.rtx_def* %32, %struct.rtx_def** %rt_rtx30, align 8, !dbg !5355
  %34 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !5356
  %35 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5357
  %u31 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1, !dbg !5357
  %fld32 = bitcast %union.u* %u31 to [1 x %union.rtunion_def]*, !dbg !5357
  %arrayidx33 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld32, i64 0, i64 2, !dbg !5357
  %rt_rtx34 = bitcast %union.rtunion_def* %arrayidx33 to %struct.rtx_def**, !dbg !5357
  store %struct.rtx_def* %34, %struct.rtx_def** %rt_rtx34, align 8, !dbg !5358
  %36 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5359
  %37 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !5360
  %u35 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1, !dbg !5360
  %fld36 = bitcast %union.u* %u35 to [1 x %union.rtunion_def]*, !dbg !5360
  %arrayidx37 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld36, i64 0, i64 1, !dbg !5360
  %rt_rtx38 = bitcast %union.rtunion_def* %arrayidx37 to %struct.rtx_def**, !dbg !5360
  store %struct.rtx_def* %36, %struct.rtx_def** %rt_rtx38, align 8, !dbg !5361
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %first.addr, align 8, !dbg !5362
  %next_bb39 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %38, i32 0, i32 6, !dbg !5363
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb39, align 8, !dbg !5363
  store %struct.basic_block_def* %39, %struct.basic_block_def** %first.addr, align 8, !dbg !5364
  br label %while.cond, !dbg !5314, !llvm.loop !5365

while.end:                                        ; preds = %land.end
  %40 = load %struct.rtx_def**, %struct.rtx_def*** @bb_header, align 8, !dbg !5367
  %41 = bitcast %struct.rtx_def** %40 to i8*, !dbg !5367
  call void @free(i8* %41), !dbg !5368
  store %struct.rtx_def** null, %struct.rtx_def*** @bb_header, align 8, !dbg !5369
  br label %return, !dbg !5370

return:                                           ; preds = %while.end, %if.then
  ret void, !dbg !5370
}

; Function Attrs: noinline nounwind uwtable
define internal void @advance_one_cycle() #0 !dbg !5371 {
entry:
  %0 = load i8*, i8** @curr_state, align 8, !dbg !5372
  call void @advance_state(i8* %0), !dbg !5373
  %1 = load i32, i32* @sched_verbose, align 4, !dbg !5374
  %cmp = icmp sge i32 %1, 6, !dbg !5376
  br i1 %cmp, label %if.then, label %if.end, !dbg !5377

if.then:                                          ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !5378
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.26, i64 0, i64 0)), !dbg !5379
  br label %if.end, !dbg !5379

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !5380
}

; Function Attrs: noinline nounwind uwtable
define internal void @queue_to_ready(%struct.ready_list* %ready) #0 !dbg !5381 {
entry:
  %ready.addr = alloca %struct.ready_list*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %link = alloca %struct.rtx_def*, align 8
  %skip_insn = alloca %struct.rtx_def*, align 8
  %stalls = alloca i32, align 4
  store %struct.ready_list* %ready, %struct.ready_list** %ready.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ready_list** %ready.addr, metadata !5382, metadata !DIExpression()), !dbg !5383
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !5384, metadata !DIExpression()), !dbg !5385
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %link, metadata !5386, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %skip_insn, metadata !5388, metadata !DIExpression()), !dbg !5389
  %0 = load i32, i32* @q_ptr, align 4, !dbg !5390
  %add = add nsw i32 %0, 1, !dbg !5390
  %1 = load i32, i32* @max_insn_queue_index, align 4, !dbg !5390
  %and = and i32 %add, %1, !dbg !5390
  store i32 %and, i32* @q_ptr, align 4, !dbg !5391
  %call = call zeroext i8 @dbg_cnt(i32 29), !dbg !5392
  %conv = zext i8 %call to i32, !dbg !5392
  %cmp = icmp eq i32 %conv, 0, !dbg !5394
  br i1 %cmp, label %if.then, label %if.else, !dbg !5395

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** @last_scheduled_insn, align 8, !dbg !5396
  %call2 = call %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %2), !dbg !5398
  store %struct.rtx_def* %call2, %struct.rtx_def** %skip_insn, align 8, !dbg !5399
  br label %while.cond, !dbg !5400

while.cond:                                       ; preds = %while.body, %if.then
  %3 = load %struct.rtx_def*, %struct.rtx_def** %skip_insn, align 8, !dbg !5401
  %tobool = icmp ne %struct.rtx_def* %3, null, !dbg !5401
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !5402

land.rhs:                                         ; preds = %while.cond
  %4 = load %struct.rtx_def*, %struct.rtx_def** %skip_insn, align 8, !dbg !5403
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !5403
  %bf.load = load i32, i32* %5, align 8, !dbg !5403
  %bf.clear = and i32 %bf.load, 65535, !dbg !5403
  %cmp3 = icmp eq i32 %bf.clear, 7, !dbg !5403
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %6 = phi i1 [ false, %while.cond ], [ %cmp3, %land.rhs ], !dbg !5404
  br i1 %6, label %while.body, label %while.end, !dbg !5400

while.body:                                       ; preds = %land.end
  %7 = load %struct.rtx_def*, %struct.rtx_def** %skip_insn, align 8, !dbg !5405
  %call5 = call %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %7), !dbg !5406
  store %struct.rtx_def* %call5, %struct.rtx_def** %skip_insn, align 8, !dbg !5407
  br label %while.cond, !dbg !5400, !llvm.loop !5408

while.end:                                        ; preds = %land.end
  br label %if.end, !dbg !5410

if.else:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %skip_insn, align 8, !dbg !5411
  br label %if.end

if.end:                                           ; preds = %if.else, %while.end
  %8 = load %struct.rtx_def**, %struct.rtx_def*** @insn_queue, align 8, !dbg !5412
  %9 = load i32, i32* @q_ptr, align 4, !dbg !5414
  %idxprom = sext i32 %9 to i64, !dbg !5412
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %8, i64 %idxprom, !dbg !5412
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8, !dbg !5412
  store %struct.rtx_def* %10, %struct.rtx_def** %link, align 8, !dbg !5415
  br label %for.cond, !dbg !5416

for.cond:                                         ; preds = %for.inc, %if.end
  %11 = load %struct.rtx_def*, %struct.rtx_def** %link, align 8, !dbg !5417
  %tobool6 = icmp ne %struct.rtx_def* %11, null, !dbg !5419
  br i1 %tobool6, label %for.body, label %for.end, !dbg !5419

for.body:                                         ; preds = %for.cond
  %12 = load %struct.rtx_def*, %struct.rtx_def** %link, align 8, !dbg !5420
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !5420
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5420
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !5420
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx7 to %struct.rtx_def**, !dbg !5420
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5420
  store %struct.rtx_def* %13, %struct.rtx_def** %insn, align 8, !dbg !5422
  %14 = load i32, i32* @q_size, align 4, !dbg !5423
  %sub = sub nsw i32 %14, 1, !dbg !5423
  store i32 %sub, i32* @q_size, align 4, !dbg !5423
  %15 = load i32, i32* @sched_verbose, align 4, !dbg !5424
  %cmp8 = icmp sge i32 %15, 2, !dbg !5426
  br i1 %cmp8, label %if.then10, label %if.end13, !dbg !5427

if.then10:                                        ; preds = %for.body
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !5428
  %17 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !5429
  %print_insn = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %17, i32 0, i32 5, !dbg !5430
  %18 = load i8* (%struct.rtx_def*, i32)*, i8* (%struct.rtx_def*, i32)** %print_insn, align 8, !dbg !5430
  %19 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5431
  %call11 = call i8* %18(%struct.rtx_def* %19, i32 0), !dbg !5432
  %call12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.27, i64 0, i64 0), i8* %call11), !dbg !5433
  br label %if.end13, !dbg !5433

if.end13:                                         ; preds = %if.then10, %for.body
  %20 = load i32, i32* @reload_completed, align 4, !dbg !5434
  %tobool14 = icmp ne i32 %20, 0, !dbg !5434
  br i1 %tobool14, label %if.else32, label %land.lhs.true, !dbg !5436

land.lhs.true:                                    ; preds = %if.end13
  %21 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !5437
  %n_ready = getelementptr inbounds %struct.ready_list, %struct.ready_list* %21, i32 0, i32 3, !dbg !5438
  %22 = load i32, i32* %n_ready, align 8, !dbg !5438
  %23 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !5439
  %n_debug = getelementptr inbounds %struct.ready_list, %struct.ready_list* %23, i32 0, i32 4, !dbg !5440
  %24 = load i32, i32* %n_debug, align 4, !dbg !5440
  %sub15 = sub nsw i32 %22, %24, !dbg !5441
  %25 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !5442
  %arrayidx16 = getelementptr inbounds %struct.param_info, %struct.param_info* %25, i64 96, !dbg !5442
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx16, i32 0, i32 1, !dbg !5442
  %26 = load i32, i32* %value, align 8, !dbg !5442
  %cmp17 = icmp sgt i32 %sub15, %26, !dbg !5443
  br i1 %cmp17, label %land.lhs.true19, label %if.else32, !dbg !5444

land.lhs.true19:                                  ; preds = %land.lhs.true
  %27 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5445
  %28 = bitcast %struct.rtx_def* %27 to i32*, !dbg !5445
  %bf.load20 = load i32, i32* %28, align 8, !dbg !5445
  %bf.lshr = lshr i32 %bf.load20, 28, !dbg !5445
  %bf.clear21 = and i32 %bf.lshr, 1, !dbg !5445
  %tobool22 = icmp ne i32 %bf.clear21, 0, !dbg !5445
  br i1 %tobool22, label %if.else32, label %land.lhs.true23, !dbg !5446

land.lhs.true23:                                  ; preds = %land.lhs.true19
  %29 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5447
  %30 = load %struct.rtx_def*, %struct.rtx_def** %skip_insn, align 8, !dbg !5448
  %cmp24 = icmp ne %struct.rtx_def* %29, %30, !dbg !5449
  br i1 %cmp24, label %if.then26, label %if.else32, !dbg !5450

if.then26:                                        ; preds = %land.lhs.true23
  %31 = load i32, i32* @sched_verbose, align 4, !dbg !5451
  %cmp27 = icmp sge i32 %31, 2, !dbg !5454
  br i1 %cmp27, label %if.then29, label %if.end31, !dbg !5455

if.then29:                                        ; preds = %if.then26
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !5456
  %call30 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %32, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.28, i64 0, i64 0)), !dbg !5457
  br label %if.end31, !dbg !5457

if.end31:                                         ; preds = %if.then29, %if.then26
  %33 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5458
  call void @queue_insn(%struct.rtx_def* %33, i32 1), !dbg !5459
  br label %if.end38, !dbg !5460

if.else32:                                        ; preds = %land.lhs.true23, %land.lhs.true19, %land.lhs.true, %if.end13
  %34 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !5461
  %35 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5463
  call void @ready_add(%struct.ready_list* %34, %struct.rtx_def* %35, i8 zeroext 0), !dbg !5464
  %36 = load i32, i32* @sched_verbose, align 4, !dbg !5465
  %cmp33 = icmp sge i32 %36, 2, !dbg !5467
  br i1 %cmp33, label %if.then35, label %if.end37, !dbg !5468

if.then35:                                        ; preds = %if.else32
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !5469
  %call36 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %37, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.29, i64 0, i64 0)), !dbg !5470
  br label %if.end37, !dbg !5470

if.end37:                                         ; preds = %if.then35, %if.else32
  br label %if.end38

if.end38:                                         ; preds = %if.end37, %if.end31
  br label %for.inc, !dbg !5471

for.inc:                                          ; preds = %if.end38
  %38 = load %struct.rtx_def*, %struct.rtx_def** %link, align 8, !dbg !5472
  %u39 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1, !dbg !5472
  %fld40 = bitcast %union.u* %u39 to [1 x %union.rtunion_def]*, !dbg !5472
  %arrayidx41 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld40, i64 0, i64 1, !dbg !5472
  %rt_rtx42 = bitcast %union.rtunion_def* %arrayidx41 to %struct.rtx_def**, !dbg !5472
  %39 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx42, align 8, !dbg !5472
  store %struct.rtx_def* %39, %struct.rtx_def** %link, align 8, !dbg !5473
  br label %for.cond, !dbg !5474, !llvm.loop !5475

for.end:                                          ; preds = %for.cond
  %40 = load %struct.rtx_def**, %struct.rtx_def*** @insn_queue, align 8, !dbg !5477
  %41 = load i32, i32* @q_ptr, align 4, !dbg !5478
  %idxprom43 = sext i32 %41 to i64, !dbg !5477
  %arrayidx44 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %40, i64 %idxprom43, !dbg !5477
  call void @free_INSN_LIST_list(%struct.rtx_def** %arrayidx44), !dbg !5479
  %42 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !5480
  %n_ready45 = getelementptr inbounds %struct.ready_list, %struct.ready_list* %42, i32 0, i32 3, !dbg !5482
  %43 = load i32, i32* %n_ready45, align 8, !dbg !5482
  %cmp46 = icmp eq i32 %43, 0, !dbg !5483
  br i1 %cmp46, label %if.then48, label %if.end95, !dbg !5484

if.then48:                                        ; preds = %for.end
  call void @llvm.dbg.declare(metadata i32* %stalls, metadata !5485, metadata !DIExpression()), !dbg !5487
  store i32 1, i32* %stalls, align 4, !dbg !5488
  br label %for.cond49, !dbg !5490

for.cond49:                                       ; preds = %for.inc90, %if.then48
  %44 = load i32, i32* %stalls, align 4, !dbg !5491
  %45 = load i32, i32* @max_insn_queue_index, align 4, !dbg !5493
  %cmp50 = icmp sle i32 %44, %45, !dbg !5494
  br i1 %cmp50, label %for.body52, label %for.end91, !dbg !5495

for.body52:                                       ; preds = %for.cond49
  %46 = load %struct.rtx_def**, %struct.rtx_def*** @insn_queue, align 8, !dbg !5496
  %47 = load i32, i32* @q_ptr, align 4, !dbg !5499
  %48 = load i32, i32* %stalls, align 4, !dbg !5499
  %add53 = add nsw i32 %47, %48, !dbg !5499
  %49 = load i32, i32* @max_insn_queue_index, align 4, !dbg !5499
  %and54 = and i32 %add53, %49, !dbg !5499
  %idxprom55 = sext i32 %and54 to i64, !dbg !5496
  %arrayidx56 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %46, i64 %idxprom55, !dbg !5496
  %50 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx56, align 8, !dbg !5496
  store %struct.rtx_def* %50, %struct.rtx_def** %link, align 8, !dbg !5500
  %tobool57 = icmp ne %struct.rtx_def* %50, null, !dbg !5500
  br i1 %tobool57, label %if.then58, label %if.end89, !dbg !5501

if.then58:                                        ; preds = %for.body52
  br label %for.cond59, !dbg !5502

for.cond59:                                       ; preds = %for.inc79, %if.then58
  %51 = load %struct.rtx_def*, %struct.rtx_def** %link, align 8, !dbg !5504
  %tobool60 = icmp ne %struct.rtx_def* %51, null, !dbg !5507
  br i1 %tobool60, label %for.body61, label %for.end84, !dbg !5507

for.body61:                                       ; preds = %for.cond59
  %52 = load %struct.rtx_def*, %struct.rtx_def** %link, align 8, !dbg !5508
  %u62 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %52, i32 0, i32 1, !dbg !5508
  %fld63 = bitcast %union.u* %u62 to [1 x %union.rtunion_def]*, !dbg !5508
  %arrayidx64 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld63, i64 0, i64 0, !dbg !5508
  %rt_rtx65 = bitcast %union.rtunion_def* %arrayidx64 to %struct.rtx_def**, !dbg !5508
  %53 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx65, align 8, !dbg !5508
  store %struct.rtx_def* %53, %struct.rtx_def** %insn, align 8, !dbg !5510
  %54 = load i32, i32* @q_size, align 4, !dbg !5511
  %sub66 = sub nsw i32 %54, 1, !dbg !5511
  store i32 %sub66, i32* @q_size, align 4, !dbg !5511
  %55 = load i32, i32* @sched_verbose, align 4, !dbg !5512
  %cmp67 = icmp sge i32 %55, 2, !dbg !5514
  br i1 %cmp67, label %if.then69, label %if.end73, !dbg !5515

if.then69:                                        ; preds = %for.body61
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !5516
  %57 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !5517
  %print_insn70 = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %57, i32 0, i32 5, !dbg !5518
  %58 = load i8* (%struct.rtx_def*, i32)*, i8* (%struct.rtx_def*, i32)** %print_insn70, align 8, !dbg !5518
  %59 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5519
  %call71 = call i8* %58(%struct.rtx_def* %59, i32 0), !dbg !5520
  %call72 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %56, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.27, i64 0, i64 0), i8* %call71), !dbg !5521
  br label %if.end73, !dbg !5521

if.end73:                                         ; preds = %if.then69, %for.body61
  %60 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !5522
  %61 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5523
  call void @ready_add(%struct.ready_list* %60, %struct.rtx_def* %61, i8 zeroext 0), !dbg !5524
  %62 = load i32, i32* @sched_verbose, align 4, !dbg !5525
  %cmp74 = icmp sge i32 %62, 2, !dbg !5527
  br i1 %cmp74, label %if.then76, label %if.end78, !dbg !5528

if.then76:                                        ; preds = %if.end73
  %63 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !5529
  %64 = load i32, i32* %stalls, align 4, !dbg !5530
  %call77 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %63, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.30, i64 0, i64 0), i32 %64), !dbg !5531
  br label %if.end78, !dbg !5531

if.end78:                                         ; preds = %if.then76, %if.end73
  br label %for.inc79, !dbg !5532

for.inc79:                                        ; preds = %if.end78
  %65 = load %struct.rtx_def*, %struct.rtx_def** %link, align 8, !dbg !5533
  %u80 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %65, i32 0, i32 1, !dbg !5533
  %fld81 = bitcast %union.u* %u80 to [1 x %union.rtunion_def]*, !dbg !5533
  %arrayidx82 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld81, i64 0, i64 1, !dbg !5533
  %rt_rtx83 = bitcast %union.rtunion_def* %arrayidx82 to %struct.rtx_def**, !dbg !5533
  %66 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx83, align 8, !dbg !5533
  store %struct.rtx_def* %66, %struct.rtx_def** %link, align 8, !dbg !5534
  br label %for.cond59, !dbg !5535, !llvm.loop !5536

for.end84:                                        ; preds = %for.cond59
  %67 = load %struct.rtx_def**, %struct.rtx_def*** @insn_queue, align 8, !dbg !5538
  %68 = load i32, i32* @q_ptr, align 4, !dbg !5539
  %69 = load i32, i32* %stalls, align 4, !dbg !5539
  %add85 = add nsw i32 %68, %69, !dbg !5539
  %70 = load i32, i32* @max_insn_queue_index, align 4, !dbg !5539
  %and86 = and i32 %add85, %70, !dbg !5539
  %idxprom87 = sext i32 %and86 to i64, !dbg !5538
  %arrayidx88 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %67, i64 %idxprom87, !dbg !5538
  call void @free_INSN_LIST_list(%struct.rtx_def** %arrayidx88), !dbg !5540
  call void @advance_one_cycle(), !dbg !5541
  br label %for.end91, !dbg !5542

if.end89:                                         ; preds = %for.body52
  call void @advance_one_cycle(), !dbg !5543
  br label %for.inc90, !dbg !5544

for.inc90:                                        ; preds = %if.end89
  %71 = load i32, i32* %stalls, align 4, !dbg !5545
  %inc = add nsw i32 %71, 1, !dbg !5545
  store i32 %inc, i32* %stalls, align 4, !dbg !5545
  br label %for.cond49, !dbg !5546, !llvm.loop !5547

for.end91:                                        ; preds = %for.end84, %for.cond49
  %72 = load i32, i32* @q_ptr, align 4, !dbg !5549
  %73 = load i32, i32* %stalls, align 4, !dbg !5549
  %add92 = add nsw i32 %72, %73, !dbg !5549
  %74 = load i32, i32* @max_insn_queue_index, align 4, !dbg !5549
  %and93 = and i32 %add92, %74, !dbg !5549
  store i32 %and93, i32* @q_ptr, align 4, !dbg !5550
  %75 = load i32, i32* %stalls, align 4, !dbg !5551
  %76 = load i32, i32* @clock_var, align 4, !dbg !5552
  %add94 = add nsw i32 %76, %75, !dbg !5552
  store i32 %add94, i32* @clock_var, align 4, !dbg !5552
  br label %if.end95, !dbg !5553

if.end95:                                         ; preds = %for.end91, %for.end
  ret void, !dbg !5554
}

; Function Attrs: noinline nounwind uwtable
define internal void @debug_ready_list(%struct.ready_list* %ready) #0 !dbg !5555 {
entry:
  %ready.addr = alloca %struct.ready_list*, align 8
  %p = alloca %struct.rtx_def**, align 8
  %i = alloca i32, align 4
  store %struct.ready_list* %ready, %struct.ready_list** %ready.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ready_list** %ready.addr, metadata !5556, metadata !DIExpression()), !dbg !5557
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %p, metadata !5558, metadata !DIExpression()), !dbg !5559
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5560, metadata !DIExpression()), !dbg !5561
  %0 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !5562
  %n_ready = getelementptr inbounds %struct.ready_list, %struct.ready_list* %0, i32 0, i32 3, !dbg !5564
  %1 = load i32, i32* %n_ready, align 8, !dbg !5564
  %cmp = icmp eq i32 %1, 0, !dbg !5565
  br i1 %cmp, label %if.then, label %if.end, !dbg !5566

if.then:                                          ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !5567
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22, i64 0, i64 0)), !dbg !5569
  br label %return, !dbg !5570

if.end:                                           ; preds = %entry
  %3 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !5571
  %call1 = call %struct.rtx_def** @ready_lastpos(%struct.ready_list* %3), !dbg !5572
  store %struct.rtx_def** %call1, %struct.rtx_def*** %p, align 8, !dbg !5573
  store i32 0, i32* %i, align 4, !dbg !5574
  br label %for.cond, !dbg !5576

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load i32, i32* %i, align 4, !dbg !5577
  %5 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !5579
  %n_ready2 = getelementptr inbounds %struct.ready_list, %struct.ready_list* %5, i32 0, i32 3, !dbg !5580
  %6 = load i32, i32* %n_ready2, align 8, !dbg !5580
  %cmp3 = icmp slt i32 %4, %6, !dbg !5581
  br i1 %cmp3, label %for.body, label %for.end, !dbg !5582

for.body:                                         ; preds = %for.cond
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !5583
  %8 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !5585
  %print_insn = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %8, i32 0, i32 5, !dbg !5586
  %9 = load i8* (%struct.rtx_def*, i32)*, i8* (%struct.rtx_def*, i32)** %print_insn, align 8, !dbg !5586
  %10 = load %struct.rtx_def**, %struct.rtx_def*** %p, align 8, !dbg !5587
  %11 = load i32, i32* %i, align 4, !dbg !5588
  %idxprom = sext i32 %11 to i64, !dbg !5587
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %10, i64 %idxprom, !dbg !5587
  %12 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8, !dbg !5587
  %call4 = call i8* %9(%struct.rtx_def* %12, i32 0), !dbg !5589
  %13 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !5590
  %tobool = icmp ne %struct.VEC_int_heap* %13, null, !dbg !5590
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5590

cond.true:                                        ; preds = %for.body
  %14 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !5590
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %14, i32 0, i32 0, !dbg !5590
  br label %cond.end, !dbg !5590

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !5590

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_int_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5590
  %15 = load %struct.rtx_def**, %struct.rtx_def*** %p, align 8, !dbg !5590
  %16 = load i32, i32* %i, align 4, !dbg !5590
  %idxprom5 = sext i32 %16 to i64, !dbg !5590
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %15, i64 %idxprom5, !dbg !5590
  %17 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8, !dbg !5590
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !5590
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5590
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !5590
  %rt_int = bitcast %union.rtunion_def* %arrayidx7 to i32*, !dbg !5590
  %18 = load i32, i32* %rt_int, align 8, !dbg !5590
  %call8 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond, i32 %18), !dbg !5590
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.31, i64 0, i64 0), i8* %call4, i32 %call8), !dbg !5591
  %19 = load i8, i8* @sched_pressure_p, align 1, !dbg !5592
  %tobool10 = icmp ne i8 %19, 0, !dbg !5592
  br i1 %tobool10, label %if.then11, label %if.end26, !dbg !5594

if.then11:                                        ; preds = %cond.end
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !5595
  %21 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !5596
  %tobool12 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %21, null, !dbg !5596
  br i1 %tobool12, label %cond.true13, label %cond.false15, !dbg !5596

cond.true13:                                      ; preds = %if.then11
  %22 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !5596
  %base14 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %22, i32 0, i32 0, !dbg !5596
  br label %cond.end16, !dbg !5596

cond.false15:                                     ; preds = %if.then11
  br label %cond.end16, !dbg !5596

cond.end16:                                       ; preds = %cond.false15, %cond.true13
  %cond17 = phi %struct.VEC_haifa_insn_data_def_base* [ %base14, %cond.true13 ], [ null, %cond.false15 ], !dbg !5596
  %23 = load %struct.rtx_def**, %struct.rtx_def*** %p, align 8, !dbg !5596
  %24 = load i32, i32* %i, align 4, !dbg !5596
  %idxprom18 = sext i32 %24 to i64, !dbg !5596
  %arrayidx19 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %23, i64 %idxprom18, !dbg !5596
  %25 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx19, align 8, !dbg !5596
  %u20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1, !dbg !5596
  %fld21 = bitcast %union.u* %u20 to [1 x %union.rtunion_def]*, !dbg !5596
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i64 0, i64 0, !dbg !5596
  %rt_int23 = bitcast %union.rtunion_def* %arrayidx22 to i32*, !dbg !5596
  %26 = load i32, i32* %rt_int23, align 8, !dbg !5596
  %call24 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond17, i32 %26), !dbg !5596
  %reg_pressure_excess_cost_change = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call24, i32 0, i32 17, !dbg !5596
  %27 = load i32, i32* %reg_pressure_excess_cost_change, align 8, !dbg !5596
  %call25 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %20, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.32, i64 0, i64 0), i32 %27), !dbg !5597
  br label %if.end26, !dbg !5597

if.end26:                                         ; preds = %cond.end16, %cond.end
  %28 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !5598
  %tobool27 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %28, null, !dbg !5598
  br i1 %tobool27, label %cond.true28, label %cond.false30, !dbg !5598

cond.true28:                                      ; preds = %if.end26
  %29 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !5598
  %base29 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %29, i32 0, i32 0, !dbg !5598
  br label %cond.end31, !dbg !5598

cond.false30:                                     ; preds = %if.end26
  br label %cond.end31, !dbg !5598

cond.end31:                                       ; preds = %cond.false30, %cond.true28
  %cond32 = phi %struct.VEC_haifa_insn_data_def_base* [ %base29, %cond.true28 ], [ null, %cond.false30 ], !dbg !5598
  %30 = load %struct.rtx_def**, %struct.rtx_def*** %p, align 8, !dbg !5598
  %31 = load i32, i32* %i, align 4, !dbg !5598
  %idxprom33 = sext i32 %31 to i64, !dbg !5598
  %arrayidx34 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %30, i64 %idxprom33, !dbg !5598
  %32 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx34, align 8, !dbg !5598
  %u35 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1, !dbg !5598
  %fld36 = bitcast %union.u* %u35 to [1 x %union.rtunion_def]*, !dbg !5598
  %arrayidx37 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld36, i64 0, i64 0, !dbg !5598
  %rt_int38 = bitcast %union.rtunion_def* %arrayidx37 to i32*, !dbg !5598
  %33 = load i32, i32* %rt_int38, align 8, !dbg !5598
  %call39 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond32, i32 %33), !dbg !5598
  %tick = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call39, i32 0, i32 2, !dbg !5598
  %34 = load i32, i32* %tick, align 8, !dbg !5598
  %35 = load i32, i32* @clock_var, align 4, !dbg !5600
  %cmp40 = icmp sgt i32 %34, %35, !dbg !5601
  br i1 %cmp40, label %if.then41, label %if.end57, !dbg !5602

if.then41:                                        ; preds = %cond.end31
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !5603
  %37 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !5604
  %tobool42 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %37, null, !dbg !5604
  br i1 %tobool42, label %cond.true43, label %cond.false45, !dbg !5604

cond.true43:                                      ; preds = %if.then41
  %38 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !5604
  %base44 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %38, i32 0, i32 0, !dbg !5604
  br label %cond.end46, !dbg !5604

cond.false45:                                     ; preds = %if.then41
  br label %cond.end46, !dbg !5604

cond.end46:                                       ; preds = %cond.false45, %cond.true43
  %cond47 = phi %struct.VEC_haifa_insn_data_def_base* [ %base44, %cond.true43 ], [ null, %cond.false45 ], !dbg !5604
  %39 = load %struct.rtx_def**, %struct.rtx_def*** %p, align 8, !dbg !5604
  %40 = load i32, i32* %i, align 4, !dbg !5604
  %idxprom48 = sext i32 %40 to i64, !dbg !5604
  %arrayidx49 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %39, i64 %idxprom48, !dbg !5604
  %41 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx49, align 8, !dbg !5604
  %u50 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1, !dbg !5604
  %fld51 = bitcast %union.u* %u50 to [1 x %union.rtunion_def]*, !dbg !5604
  %arrayidx52 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld51, i64 0, i64 0, !dbg !5604
  %rt_int53 = bitcast %union.rtunion_def* %arrayidx52 to i32*, !dbg !5604
  %42 = load i32, i32* %rt_int53, align 8, !dbg !5604
  %call54 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond47, i32 %42), !dbg !5604
  %tick55 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call54, i32 0, i32 2, !dbg !5604
  %43 = load i32, i32* %tick55, align 8, !dbg !5604
  %44 = load i32, i32* @clock_var, align 4, !dbg !5605
  %sub = sub nsw i32 %43, %44, !dbg !5606
  %call56 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %36, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.33, i64 0, i64 0), i32 %sub), !dbg !5607
  br label %if.end57, !dbg !5607

if.end57:                                         ; preds = %cond.end46, %cond.end31
  %45 = load i8, i8* @sched_pressure_p, align 1, !dbg !5608
  %tobool58 = icmp ne i8 %45, 0, !dbg !5608
  br i1 %tobool58, label %if.then59, label %if.end61, !dbg !5610

if.then59:                                        ; preds = %if.end57
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !5611
  %call60 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %46, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.34, i64 0, i64 0)), !dbg !5612
  br label %if.end61, !dbg !5612

if.end61:                                         ; preds = %if.then59, %if.end57
  br label %for.inc, !dbg !5613

for.inc:                                          ; preds = %if.end61
  %47 = load i32, i32* %i, align 4, !dbg !5614
  %inc = add nsw i32 %47, 1, !dbg !5614
  store i32 %inc, i32* %i, align 4, !dbg !5614
  br label %for.cond, !dbg !5615, !llvm.loop !5616

for.end:                                          ; preds = %for.cond
  %48 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !5618
  %call62 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %48, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22, i64 0, i64 0)), !dbg !5619
  br label %return, !dbg !5620

return:                                           ; preds = %for.end, %if.then
  ret void, !dbg !5620
}

declare dso_local zeroext i8 @control_flow_insn_p(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @next_real_insn(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @ready_remove_first(%struct.ready_list* %ready) #0 !dbg !5621 {
entry:
  %ready.addr = alloca %struct.ready_list*, align 8
  %t = alloca %struct.rtx_def*, align 8
  store %struct.ready_list* %ready, %struct.ready_list** %ready.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ready_list** %ready.addr, metadata !5624, metadata !DIExpression()), !dbg !5625
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %t, metadata !5626, metadata !DIExpression()), !dbg !5627
  %0 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !5628
  %n_ready = getelementptr inbounds %struct.ready_list, %struct.ready_list* %0, i32 0, i32 3, !dbg !5628
  %1 = load i32, i32* %n_ready, align 8, !dbg !5628
  %tobool = icmp ne i32 %1, 0, !dbg !5628
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !5628

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 1430, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !5628
  br label %cond.end, !dbg !5628

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5628

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5628
  %2 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !5629
  %vec = getelementptr inbounds %struct.ready_list, %struct.ready_list* %2, i32 0, i32 0, !dbg !5630
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %vec, align 8, !dbg !5630
  %4 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !5631
  %first = getelementptr inbounds %struct.ready_list, %struct.ready_list* %4, i32 0, i32 2, !dbg !5632
  %5 = load i32, i32* %first, align 4, !dbg !5633
  %dec = add nsw i32 %5, -1, !dbg !5633
  store i32 %dec, i32* %first, align 4, !dbg !5633
  %idxprom = sext i32 %5 to i64, !dbg !5629
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 %idxprom, !dbg !5629
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8, !dbg !5629
  store %struct.rtx_def* %6, %struct.rtx_def** %t, align 8, !dbg !5634
  %7 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !5635
  %n_ready1 = getelementptr inbounds %struct.ready_list, %struct.ready_list* %7, i32 0, i32 3, !dbg !5636
  %8 = load i32, i32* %n_ready1, align 8, !dbg !5637
  %dec2 = add nsw i32 %8, -1, !dbg !5637
  store i32 %dec2, i32* %n_ready1, align 8, !dbg !5637
  %9 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8, !dbg !5638
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !5638
  %bf.load = load i32, i32* %10, align 8, !dbg !5638
  %bf.clear = and i32 %bf.load, 65535, !dbg !5638
  %cmp = icmp eq i32 %bf.clear, 7, !dbg !5638
  br i1 %cmp, label %if.then, label %if.end, !dbg !5640

if.then:                                          ; preds = %cond.end
  %11 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !5641
  %n_debug = getelementptr inbounds %struct.ready_list, %struct.ready_list* %11, i32 0, i32 4, !dbg !5642
  %12 = load i32, i32* %n_debug, align 4, !dbg !5643
  %dec3 = add nsw i32 %12, -1, !dbg !5643
  store i32 %dec3, i32* %n_debug, align 4, !dbg !5643
  br label %if.end, !dbg !5641

if.end:                                           ; preds = %if.then, %cond.end
  %13 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !5644
  %n_ready4 = getelementptr inbounds %struct.ready_list, %struct.ready_list* %13, i32 0, i32 3, !dbg !5646
  %14 = load i32, i32* %n_ready4, align 8, !dbg !5646
  %cmp5 = icmp eq i32 %14, 0, !dbg !5647
  br i1 %cmp5, label %if.then6, label %if.end8, !dbg !5648

if.then6:                                         ; preds = %if.end
  %15 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !5649
  %veclen = getelementptr inbounds %struct.ready_list, %struct.ready_list* %15, i32 0, i32 1, !dbg !5650
  %16 = load i32, i32* %veclen, align 8, !dbg !5650
  %sub = sub nsw i32 %16, 1, !dbg !5651
  %17 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !5652
  %first7 = getelementptr inbounds %struct.ready_list, %struct.ready_list* %17, i32 0, i32 2, !dbg !5653
  store i32 %sub, i32* %first7, align 4, !dbg !5654
  br label %if.end8, !dbg !5652

if.end8:                                          ; preds = %if.then6, %if.end
  %18 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !5655
  %tobool9 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %18, null, !dbg !5655
  br i1 %tobool9, label %cond.true10, label %cond.false11, !dbg !5655

cond.true10:                                      ; preds = %if.end8
  %19 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !5655
  %base = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %19, i32 0, i32 0, !dbg !5655
  br label %cond.end12, !dbg !5655

cond.false11:                                     ; preds = %if.end8
  br label %cond.end12, !dbg !5655

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond13 = phi %struct.VEC_haifa_insn_data_def_base* [ %base, %cond.true10 ], [ null, %cond.false11 ], !dbg !5655
  %20 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8, !dbg !5655
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1, !dbg !5655
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5655
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !5655
  %rt_int = bitcast %union.rtunion_def* %arrayidx14 to i32*, !dbg !5655
  %21 = load i32, i32* %rt_int, align 8, !dbg !5655
  %call = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond13, i32 %21), !dbg !5655
  %queue_index = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call, i32 0, i32 4, !dbg !5655
  %22 = load i32, i32* %queue_index, align 8, !dbg !5655
  %cmp15 = icmp eq i32 %22, -1, !dbg !5655
  br i1 %cmp15, label %cond.false17, label %cond.true16, !dbg !5655

cond.true16:                                      ; preds = %cond.end12
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 1439, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !5655
  br label %cond.end18, !dbg !5655

cond.false17:                                     ; preds = %cond.end12
  br label %cond.end18, !dbg !5655

cond.end18:                                       ; preds = %cond.false17, %cond.true16
  %cond19 = phi i32 [ 0, %cond.true16 ], [ 0, %cond.false17 ], !dbg !5655
  %23 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !5656
  %tobool20 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %23, null, !dbg !5656
  br i1 %tobool20, label %cond.true21, label %cond.false23, !dbg !5656

cond.true21:                                      ; preds = %cond.end18
  %24 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !5656
  %base22 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %24, i32 0, i32 0, !dbg !5656
  br label %cond.end24, !dbg !5656

cond.false23:                                     ; preds = %cond.end18
  br label %cond.end24, !dbg !5656

cond.end24:                                       ; preds = %cond.false23, %cond.true21
  %cond25 = phi %struct.VEC_haifa_insn_data_def_base* [ %base22, %cond.true21 ], [ null, %cond.false23 ], !dbg !5656
  %25 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8, !dbg !5656
  %u26 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1, !dbg !5656
  %fld27 = bitcast %union.u* %u26 to [1 x %union.rtunion_def]*, !dbg !5656
  %arrayidx28 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld27, i64 0, i64 0, !dbg !5656
  %rt_int29 = bitcast %union.rtunion_def* %arrayidx28 to i32*, !dbg !5656
  %26 = load i32, i32* %rt_int29, align 8, !dbg !5656
  %call30 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond25, i32 %26), !dbg !5656
  %queue_index31 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call30, i32 0, i32 4, !dbg !5656
  store i32 -2, i32* %queue_index31, align 8, !dbg !5657
  %27 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8, !dbg !5658
  ret %struct.rtx_def* %27, !dbg !5659
}

; Function Attrs: noinline nounwind uwtable
define internal void @move_insn(%struct.rtx_def* %insn, %struct.rtx_def* %last, %struct.rtx_def* %nt) #0 !dbg !5660 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %last.addr = alloca %struct.rtx_def*, align 8
  %nt.addr = alloca %struct.rtx_def*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  %jump_p = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !5663, metadata !DIExpression()), !dbg !5664
  store %struct.rtx_def* %last, %struct.rtx_def** %last.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last.addr, metadata !5665, metadata !DIExpression()), !dbg !5666
  store %struct.rtx_def* %nt, %struct.rtx_def** %nt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %nt.addr, metadata !5667, metadata !DIExpression()), !dbg !5668
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5669
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !5669
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5669
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !5669
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !5669
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5669
  %2 = load %struct.rtx_def*, %struct.rtx_def** %last.addr, align 8, !dbg !5671
  %cmp = icmp ne %struct.rtx_def* %1, %2, !dbg !5672
  br i1 %cmp, label %if.then, label %if.end217, !dbg !5673

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !5674, metadata !DIExpression()), !dbg !5676
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !5677, metadata !DIExpression()), !dbg !5678
  call void @llvm.dbg.declare(metadata i32* %jump_p, metadata !5679, metadata !DIExpression()), !dbg !5680
  store i32 0, i32* %jump_p, align 4, !dbg !5680
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5681
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !5681
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !5681
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 3, !dbg !5681
  %rt_bb = bitcast %union.rtunion_def* %arrayidx3 to %struct.basic_block_def**, !dbg !5681
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !5681
  store %struct.basic_block_def* %4, %struct.basic_block_def** %bb, align 8, !dbg !5682
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5683
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %5, i32 0, i32 7, !dbg !5683
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !5683
  %6 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !5683
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %6, i32 0, i32 0, !dbg !5683
  %7 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !5683
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5683
  %cmp4 = icmp ne %struct.rtx_def* %7, %8, !dbg !5683
  br i1 %cmp4, label %cond.false, label %cond.true, !dbg !5683

cond.true:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 2298, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !5683
  br label %cond.end, !dbg !5683

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !5683

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5683
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5684
  %il5 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 7, !dbg !5684
  %rtl6 = bitcast %union.basic_block_il_dependent* %il5 to %struct.rtl_bb_info**, !dbg !5684
  %10 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl6, align 8, !dbg !5684
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %10, i32 0, i32 1, !dbg !5684
  %11 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !5684
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5686
  %cmp7 = icmp eq %struct.rtx_def* %11, %12, !dbg !5687
  br i1 %cmp7, label %if.then8, label %if.end, !dbg !5688

if.then8:                                         ; preds = %cond.end
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5689
  %call = call zeroext i8 @control_flow_insn_p(%struct.rtx_def* %13), !dbg !5691
  %conv = zext i8 %call to i32, !dbg !5691
  store i32 %conv, i32* %jump_p, align 4, !dbg !5692
  %14 = load i32, i32* %jump_p, align 4, !dbg !5693
  %tobool = icmp ne i32 %14, 0, !dbg !5693
  br i1 %tobool, label %lor.lhs.false, label %cond.false42, !dbg !5693

lor.lhs.false:                                    ; preds = %if.then8
  %15 = load %struct.common_sched_info_def*, %struct.common_sched_info_def** @common_sched_info, align 8, !dbg !5693
  %sched_pass_id = getelementptr inbounds %struct.common_sched_info_def, %struct.common_sched_info_def* %15, i32 0, i32 4, !dbg !5693
  %16 = load i32, i32* %sched_pass_id, align 8, !dbg !5693
  %cmp9 = icmp eq i32 %16, 1, !dbg !5693
  br i1 %cmp9, label %land.lhs.true, label %lor.lhs.false37, !dbg !5693

land.lhs.true:                                    ; preds = %lor.lhs.false
  %17 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !5693
  %tobool11 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %17, null, !dbg !5693
  br i1 %tobool11, label %cond.true12, label %cond.false13, !dbg !5693

cond.true12:                                      ; preds = %land.lhs.true
  %18 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !5693
  %base = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %18, i32 0, i32 0, !dbg !5693
  br label %cond.end14, !dbg !5693

cond.false13:                                     ; preds = %land.lhs.true
  br label %cond.end14, !dbg !5693

cond.end14:                                       ; preds = %cond.false13, %cond.true12
  %cond15 = phi %struct.VEC_haifa_insn_data_def_base* [ %base, %cond.true12 ], [ null, %cond.false13 ], !dbg !5693
  %19 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5693
  %u16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !5693
  %fld17 = bitcast %union.u* %u16 to [1 x %union.rtunion_def]*, !dbg !5693
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i64 0, i64 0, !dbg !5693
  %rt_int = bitcast %union.rtunion_def* %arrayidx18 to i32*, !dbg !5693
  %20 = load i32, i32* %rt_int, align 8, !dbg !5693
  %call19 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond15, i32 %20), !dbg !5693
  %recovery_block = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call19, i32 0, i32 11, !dbg !5693
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %recovery_block, align 8, !dbg !5693
  %cmp20 = icmp ne %struct.basic_block_def* %21, null, !dbg !5693
  br i1 %cmp20, label %land.lhs.true22, label %lor.lhs.false37, !dbg !5693

land.lhs.true22:                                  ; preds = %cond.end14
  %22 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !5693
  %tobool23 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %22, null, !dbg !5693
  br i1 %tobool23, label %cond.true24, label %cond.false26, !dbg !5693

cond.true24:                                      ; preds = %land.lhs.true22
  %23 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !5693
  %base25 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %23, i32 0, i32 0, !dbg !5693
  br label %cond.end27, !dbg !5693

cond.false26:                                     ; preds = %land.lhs.true22
  br label %cond.end27, !dbg !5693

cond.end27:                                       ; preds = %cond.false26, %cond.true24
  %cond28 = phi %struct.VEC_haifa_insn_data_def_base* [ %base25, %cond.true24 ], [ null, %cond.false26 ], !dbg !5693
  %24 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5693
  %u29 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1, !dbg !5693
  %fld30 = bitcast %union.u* %u29 to [1 x %union.rtunion_def]*, !dbg !5693
  %arrayidx31 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld30, i64 0, i64 0, !dbg !5693
  %rt_int32 = bitcast %union.rtunion_def* %arrayidx31 to i32*, !dbg !5693
  %25 = load i32, i32* %rt_int32, align 8, !dbg !5693
  %call33 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond28, i32 %25), !dbg !5693
  %recovery_block34 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call33, i32 0, i32 11, !dbg !5693
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %recovery_block34, align 8, !dbg !5693
  %27 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5693
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %27, i64 0, !dbg !5693
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !5693
  %28 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5693
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %28, i32 0, i32 1, !dbg !5693
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !5693
  %cmp35 = icmp ne %struct.basic_block_def* %26, %29, !dbg !5693
  br i1 %cmp35, label %cond.false42, label %lor.lhs.false37, !dbg !5693

lor.lhs.false37:                                  ; preds = %cond.end27, %cond.end14, %lor.lhs.false
  %30 = load %struct.common_sched_info_def*, %struct.common_sched_info_def** @common_sched_info, align 8, !dbg !5693
  %sched_pass_id38 = getelementptr inbounds %struct.common_sched_info_def, %struct.common_sched_info_def* %30, i32 0, i32 4, !dbg !5693
  %31 = load i32, i32* %sched_pass_id38, align 8, !dbg !5693
  %cmp39 = icmp eq i32 %31, 2, !dbg !5693
  br i1 %cmp39, label %cond.false42, label %cond.true41, !dbg !5693

cond.true41:                                      ; preds = %lor.lhs.false37
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 2311, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !5693
  br label %cond.end43, !dbg !5693

cond.false42:                                     ; preds = %lor.lhs.false37, %cond.end27, %if.then8
  br label %cond.end43, !dbg !5693

cond.end43:                                       ; preds = %cond.false42, %cond.true41
  %cond44 = phi i32 [ 0, %cond.true41 ], [ 0, %cond.false42 ], !dbg !5693
  %32 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5694
  %u45 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1, !dbg !5694
  %fld46 = bitcast %union.u* %u45 to [1 x %union.rtunion_def]*, !dbg !5694
  %arrayidx47 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld46, i64 0, i64 1, !dbg !5694
  %rt_rtx48 = bitcast %union.rtunion_def* %arrayidx47 to %struct.rtx_def**, !dbg !5694
  %33 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx48, align 8, !dbg !5694
  %u49 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1, !dbg !5694
  %fld50 = bitcast %union.u* %u49 to [1 x %union.rtunion_def]*, !dbg !5694
  %arrayidx51 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld50, i64 0, i64 3, !dbg !5694
  %rt_bb52 = bitcast %union.rtunion_def* %arrayidx51 to %struct.basic_block_def**, !dbg !5694
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb52, align 8, !dbg !5694
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5694
  %cmp53 = icmp eq %struct.basic_block_def* %34, %35, !dbg !5694
  br i1 %cmp53, label %cond.false56, label %cond.true55, !dbg !5694

cond.true55:                                      ; preds = %cond.end43
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 2313, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !5694
  br label %cond.end57, !dbg !5694

cond.false56:                                     ; preds = %cond.end43
  br label %cond.end57, !dbg !5694

cond.end57:                                       ; preds = %cond.false56, %cond.true55
  %cond58 = phi i32 [ 0, %cond.true55 ], [ 0, %cond.false56 ], !dbg !5694
  %36 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5695
  %u59 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1, !dbg !5695
  %fld60 = bitcast %union.u* %u59 to [1 x %union.rtunion_def]*, !dbg !5695
  %arrayidx61 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld60, i64 0, i64 1, !dbg !5695
  %rt_rtx62 = bitcast %union.rtunion_def* %arrayidx61 to %struct.rtx_def**, !dbg !5695
  %37 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx62, align 8, !dbg !5695
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5696
  %il63 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %38, i32 0, i32 7, !dbg !5696
  %rtl64 = bitcast %union.basic_block_il_dependent* %il63 to %struct.rtl_bb_info**, !dbg !5696
  %39 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl64, align 8, !dbg !5696
  %end_65 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %39, i32 0, i32 1, !dbg !5696
  store %struct.rtx_def* %37, %struct.rtx_def** %end_65, align 8, !dbg !5697
  br label %if.end, !dbg !5698

if.end:                                           ; preds = %cond.end57, %cond.end
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5699
  %il66 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %40, i32 0, i32 7, !dbg !5699
  %rtl67 = bitcast %union.basic_block_il_dependent* %il66 to %struct.rtl_bb_info**, !dbg !5699
  %41 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl67, align 8, !dbg !5699
  %end_68 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %41, i32 0, i32 1, !dbg !5699
  %42 = load %struct.rtx_def*, %struct.rtx_def** %end_68, align 8, !dbg !5699
  %43 = load %struct.rtx_def*, %struct.rtx_def** %last.addr, align 8, !dbg !5699
  %cmp69 = icmp ne %struct.rtx_def* %42, %43, !dbg !5699
  br i1 %cmp69, label %cond.false72, label %cond.true71, !dbg !5699

cond.true71:                                      ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 2318, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !5699
  br label %cond.end73, !dbg !5699

cond.false72:                                     ; preds = %if.end
  br label %cond.end73, !dbg !5699

cond.end73:                                       ; preds = %cond.false72, %cond.true71
  %cond74 = phi i32 [ 0, %cond.true71 ], [ 0, %cond.false72 ], !dbg !5699
  %44 = load i32, i32* %jump_p, align 4, !dbg !5700
  %tobool75 = icmp ne i32 %44, 0, !dbg !5700
  br i1 %tobool75, label %if.then76, label %if.else, !dbg !5702

if.then76:                                        ; preds = %cond.end73
  %45 = load %struct.rtx_def*, %struct.rtx_def** %nt.addr, align 8, !dbg !5703
  %tobool77 = icmp ne %struct.rtx_def* %45, null, !dbg !5703
  br i1 %tobool77, label %cond.false79, label %cond.true78, !dbg !5703

cond.true78:                                      ; preds = %if.then76
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 2323, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !5703
  br label %cond.end80, !dbg !5703

cond.false79:                                     ; preds = %if.then76
  br label %cond.end80, !dbg !5703

cond.end80:                                       ; preds = %cond.false79, %cond.true78
  %cond81 = phi i32 [ 0, %cond.true78 ], [ 0, %cond.false79 ], !dbg !5703
  %46 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5705
  %u82 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %46, i32 0, i32 1, !dbg !5705
  %fld83 = bitcast %union.u* %u82 to [1 x %union.rtunion_def]*, !dbg !5705
  %arrayidx84 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld83, i64 0, i64 2, !dbg !5705
  %rt_rtx85 = bitcast %union.rtunion_def* %arrayidx84 to %struct.rtx_def**, !dbg !5705
  %47 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx85, align 8, !dbg !5705
  store %struct.rtx_def* %47, %struct.rtx_def** %note, align 8, !dbg !5706
  br label %while.cond, !dbg !5707

while.cond:                                       ; preds = %while.body, %cond.end80
  %48 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5708
  %49 = bitcast %struct.rtx_def* %48 to i32*, !dbg !5708
  %bf.load = load i32, i32* %49, align 8, !dbg !5708
  %bf.clear = and i32 %bf.load, 65535, !dbg !5708
  %cmp86 = icmp eq i32 %bf.clear, 13, !dbg !5708
  br i1 %cmp86, label %land.lhs.true88, label %land.end, !dbg !5708

land.lhs.true88:                                  ; preds = %while.cond
  %50 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5708
  %u89 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %50, i32 0, i32 1, !dbg !5708
  %fld90 = bitcast %union.u* %u89 to [1 x %union.rtunion_def]*, !dbg !5708
  %arrayidx91 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld90, i64 0, i64 5, !dbg !5708
  %rt_int92 = bitcast %union.rtunion_def* %arrayidx91 to i32*, !dbg !5708
  %51 = load i32, i32* %rt_int92, align 8, !dbg !5708
  %cmp93 = icmp ne i32 %51, 10, !dbg !5708
  br i1 %cmp93, label %land.rhs, label %land.end, !dbg !5709

land.rhs:                                         ; preds = %land.lhs.true88
  %52 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5710
  %53 = load %struct.rtx_def*, %struct.rtx_def** %nt.addr, align 8, !dbg !5711
  %cmp95 = icmp ne %struct.rtx_def* %52, %53, !dbg !5712
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true88, %while.cond
  %54 = phi i1 [ false, %land.lhs.true88 ], [ false, %while.cond ], [ %cmp95, %land.rhs ], !dbg !5713
  br i1 %54, label %while.body, label %while.end, !dbg !5707

while.body:                                       ; preds = %land.end
  %55 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5714
  %u97 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %55, i32 0, i32 1, !dbg !5714
  %fld98 = bitcast %union.u* %u97 to [1 x %union.rtunion_def]*, !dbg !5714
  %arrayidx99 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld98, i64 0, i64 2, !dbg !5714
  %rt_rtx100 = bitcast %union.rtunion_def* %arrayidx99 to %struct.rtx_def**, !dbg !5714
  %56 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx100, align 8, !dbg !5714
  store %struct.rtx_def* %56, %struct.rtx_def** %note, align 8, !dbg !5715
  br label %while.cond, !dbg !5707, !llvm.loop !5716

while.end:                                        ; preds = %land.end
  %57 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5717
  %58 = load %struct.rtx_def*, %struct.rtx_def** %nt.addr, align 8, !dbg !5719
  %cmp101 = icmp ne %struct.rtx_def* %57, %58, !dbg !5720
  br i1 %cmp101, label %land.lhs.true103, label %if.end118, !dbg !5721

land.lhs.true103:                                 ; preds = %while.end
  %59 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5722
  %60 = bitcast %struct.rtx_def* %59 to i32*, !dbg !5722
  %bf.load104 = load i32, i32* %60, align 8, !dbg !5722
  %bf.clear105 = and i32 %bf.load104, 65535, !dbg !5722
  %cmp106 = icmp eq i32 %bf.clear105, 12, !dbg !5722
  br i1 %cmp106, label %if.then113, label %lor.lhs.false108, !dbg !5723

lor.lhs.false108:                                 ; preds = %land.lhs.true103
  %61 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5724
  %62 = bitcast %struct.rtx_def* %61 to i32*, !dbg !5724
  %bf.load109 = load i32, i32* %62, align 8, !dbg !5724
  %bf.clear110 = and i32 %bf.load109, 65535, !dbg !5724
  %cmp111 = icmp eq i32 %bf.clear110, 11, !dbg !5724
  br i1 %cmp111, label %if.then113, label %if.end118, !dbg !5725

if.then113:                                       ; preds = %lor.lhs.false108, %land.lhs.true103
  %63 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5726
  %u114 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %63, i32 0, i32 1, !dbg !5726
  %fld115 = bitcast %union.u* %u114 to [1 x %union.rtunion_def]*, !dbg !5726
  %arrayidx116 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld115, i64 0, i64 2, !dbg !5726
  %rt_rtx117 = bitcast %union.rtunion_def* %arrayidx116 to %struct.rtx_def**, !dbg !5726
  %64 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx117, align 8, !dbg !5726
  store %struct.rtx_def* %64, %struct.rtx_def** %note, align 8, !dbg !5727
  br label %if.end118, !dbg !5728

if.end118:                                        ; preds = %if.then113, %lor.lhs.false108, %while.end
  %65 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5729
  %66 = bitcast %struct.rtx_def* %65 to i32*, !dbg !5729
  %bf.load119 = load i32, i32* %66, align 8, !dbg !5729
  %bf.clear120 = and i32 %bf.load119, 65535, !dbg !5729
  %cmp121 = icmp eq i32 %bf.clear120, 13, !dbg !5729
  br i1 %cmp121, label %land.lhs.true123, label %cond.true130, !dbg !5729

land.lhs.true123:                                 ; preds = %if.end118
  %67 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5729
  %u124 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %67, i32 0, i32 1, !dbg !5729
  %fld125 = bitcast %union.u* %u124 to [1 x %union.rtunion_def]*, !dbg !5729
  %arrayidx126 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld125, i64 0, i64 5, !dbg !5729
  %rt_int127 = bitcast %union.rtunion_def* %arrayidx126 to i32*, !dbg !5729
  %68 = load i32, i32* %rt_int127, align 8, !dbg !5729
  %cmp128 = icmp eq i32 %68, 10, !dbg !5729
  br i1 %cmp128, label %cond.false131, label %cond.true130, !dbg !5729

cond.true130:                                     ; preds = %land.lhs.true123, %if.end118
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 2334, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !5729
  br label %cond.end132, !dbg !5729

cond.false131:                                    ; preds = %land.lhs.true123
  br label %cond.end132, !dbg !5729

cond.end132:                                      ; preds = %cond.false131, %cond.true130
  %cond133 = phi i32 [ 0, %cond.true130 ], [ 0, %cond.false131 ], !dbg !5729
  br label %if.end134, !dbg !5730

if.else:                                          ; preds = %cond.end73
  %69 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5731
  store %struct.rtx_def* %69, %struct.rtx_def** %note, align 8, !dbg !5732
  br label %if.end134

if.end134:                                        ; preds = %if.else, %cond.end132
  %70 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5733
  %u135 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %70, i32 0, i32 1, !dbg !5733
  %fld136 = bitcast %union.u* %u135 to [1 x %union.rtunion_def]*, !dbg !5733
  %arrayidx137 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld136, i64 0, i64 2, !dbg !5733
  %rt_rtx138 = bitcast %union.rtunion_def* %arrayidx137 to %struct.rtx_def**, !dbg !5733
  %71 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx138, align 8, !dbg !5733
  %72 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5734
  %u139 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %72, i32 0, i32 1, !dbg !5734
  %fld140 = bitcast %union.u* %u139 to [1 x %union.rtunion_def]*, !dbg !5734
  %arrayidx141 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld140, i64 0, i64 1, !dbg !5734
  %rt_rtx142 = bitcast %union.rtunion_def* %arrayidx141 to %struct.rtx_def**, !dbg !5734
  %73 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx142, align 8, !dbg !5734
  %u143 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %73, i32 0, i32 1, !dbg !5734
  %fld144 = bitcast %union.u* %u143 to [1 x %union.rtunion_def]*, !dbg !5734
  %arrayidx145 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld144, i64 0, i64 2, !dbg !5734
  %rt_rtx146 = bitcast %union.rtunion_def* %arrayidx145 to %struct.rtx_def**, !dbg !5734
  store %struct.rtx_def* %71, %struct.rtx_def** %rt_rtx146, align 8, !dbg !5735
  %74 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5736
  %u147 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %74, i32 0, i32 1, !dbg !5736
  %fld148 = bitcast %union.u* %u147 to [1 x %union.rtunion_def]*, !dbg !5736
  %arrayidx149 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld148, i64 0, i64 1, !dbg !5736
  %rt_rtx150 = bitcast %union.rtunion_def* %arrayidx149 to %struct.rtx_def**, !dbg !5736
  %75 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx150, align 8, !dbg !5736
  %76 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5737
  %u151 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %76, i32 0, i32 1, !dbg !5737
  %fld152 = bitcast %union.u* %u151 to [1 x %union.rtunion_def]*, !dbg !5737
  %arrayidx153 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld152, i64 0, i64 2, !dbg !5737
  %rt_rtx154 = bitcast %union.rtunion_def* %arrayidx153 to %struct.rtx_def**, !dbg !5737
  %77 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx154, align 8, !dbg !5737
  %u155 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %77, i32 0, i32 1, !dbg !5737
  %fld156 = bitcast %union.u* %u155 to [1 x %union.rtunion_def]*, !dbg !5737
  %arrayidx157 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld156, i64 0, i64 1, !dbg !5737
  %rt_rtx158 = bitcast %union.rtunion_def* %arrayidx157 to %struct.rtx_def**, !dbg !5737
  store %struct.rtx_def* %75, %struct.rtx_def** %rt_rtx158, align 8, !dbg !5738
  %78 = load %struct.rtx_def*, %struct.rtx_def** %last.addr, align 8, !dbg !5739
  %u159 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %78, i32 0, i32 1, !dbg !5739
  %fld160 = bitcast %union.u* %u159 to [1 x %union.rtunion_def]*, !dbg !5739
  %arrayidx161 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld160, i64 0, i64 2, !dbg !5739
  %rt_rtx162 = bitcast %union.rtunion_def* %arrayidx161 to %struct.rtx_def**, !dbg !5739
  %79 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx162, align 8, !dbg !5739
  %80 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5740
  %u163 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %80, i32 0, i32 1, !dbg !5740
  %fld164 = bitcast %union.u* %u163 to [1 x %union.rtunion_def]*, !dbg !5740
  %arrayidx165 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld164, i64 0, i64 2, !dbg !5740
  %rt_rtx166 = bitcast %union.rtunion_def* %arrayidx165 to %struct.rtx_def**, !dbg !5740
  store %struct.rtx_def* %79, %struct.rtx_def** %rt_rtx166, align 8, !dbg !5741
  %81 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5742
  %82 = load %struct.rtx_def*, %struct.rtx_def** %last.addr, align 8, !dbg !5743
  %u167 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %82, i32 0, i32 1, !dbg !5743
  %fld168 = bitcast %union.u* %u167 to [1 x %union.rtunion_def]*, !dbg !5743
  %arrayidx169 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld168, i64 0, i64 2, !dbg !5743
  %rt_rtx170 = bitcast %union.rtunion_def* %arrayidx169 to %struct.rtx_def**, !dbg !5743
  %83 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx170, align 8, !dbg !5743
  %u171 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %83, i32 0, i32 1, !dbg !5743
  %fld172 = bitcast %union.u* %u171 to [1 x %union.rtunion_def]*, !dbg !5743
  %arrayidx173 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld172, i64 0, i64 1, !dbg !5743
  %rt_rtx174 = bitcast %union.rtunion_def* %arrayidx173 to %struct.rtx_def**, !dbg !5743
  store %struct.rtx_def* %81, %struct.rtx_def** %rt_rtx174, align 8, !dbg !5744
  %84 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5745
  %85 = load %struct.rtx_def*, %struct.rtx_def** %last.addr, align 8, !dbg !5746
  %u175 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %85, i32 0, i32 1, !dbg !5746
  %fld176 = bitcast %union.u* %u175 to [1 x %union.rtunion_def]*, !dbg !5746
  %arrayidx177 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld176, i64 0, i64 2, !dbg !5746
  %rt_rtx178 = bitcast %union.rtunion_def* %arrayidx177 to %struct.rtx_def**, !dbg !5746
  store %struct.rtx_def* %84, %struct.rtx_def** %rt_rtx178, align 8, !dbg !5747
  %86 = load %struct.rtx_def*, %struct.rtx_def** %last.addr, align 8, !dbg !5748
  %87 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5749
  %u179 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %87, i32 0, i32 1, !dbg !5749
  %fld180 = bitcast %union.u* %u179 to [1 x %union.rtunion_def]*, !dbg !5749
  %arrayidx181 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld180, i64 0, i64 1, !dbg !5749
  %rt_rtx182 = bitcast %union.rtunion_def* %arrayidx181 to %struct.rtx_def**, !dbg !5749
  store %struct.rtx_def* %86, %struct.rtx_def** %rt_rtx182, align 8, !dbg !5750
  %88 = load %struct.rtx_def*, %struct.rtx_def** %last.addr, align 8, !dbg !5751
  %u183 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %88, i32 0, i32 1, !dbg !5751
  %fld184 = bitcast %union.u* %u183 to [1 x %union.rtunion_def]*, !dbg !5751
  %arrayidx185 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld184, i64 0, i64 3, !dbg !5751
  %rt_bb186 = bitcast %union.rtunion_def* %arrayidx185 to %struct.basic_block_def**, !dbg !5751
  %89 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb186, align 8, !dbg !5751
  store %struct.basic_block_def* %89, %struct.basic_block_def** %bb, align 8, !dbg !5752
  %90 = load i32, i32* %jump_p, align 4, !dbg !5753
  %tobool187 = icmp ne i32 %90, 0, !dbg !5753
  br i1 %tobool187, label %if.then188, label %if.end206, !dbg !5755

if.then188:                                       ; preds = %if.end134
  %91 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5756
  call void @fix_jump_move(%struct.rtx_def* %91), !dbg !5758
  %92 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5759
  %u189 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %92, i32 0, i32 1, !dbg !5759
  %fld190 = bitcast %union.u* %u189 to [1 x %union.rtunion_def]*, !dbg !5759
  %arrayidx191 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld190, i64 0, i64 3, !dbg !5759
  %rt_bb192 = bitcast %union.rtunion_def* %arrayidx191 to %struct.basic_block_def**, !dbg !5759
  %93 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb192, align 8, !dbg !5759
  %94 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5761
  %cmp193 = icmp ne %struct.basic_block_def* %93, %94, !dbg !5762
  br i1 %cmp193, label %if.then195, label %if.end196, !dbg !5763

if.then195:                                       ; preds = %if.then188
  %95 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5764
  call void @move_block_after_check(%struct.rtx_def* %95), !dbg !5765
  br label %if.end196, !dbg !5765

if.end196:                                        ; preds = %if.then195, %if.then188
  %96 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5766
  %il197 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %96, i32 0, i32 7, !dbg !5766
  %rtl198 = bitcast %union.basic_block_il_dependent* %il197 to %struct.rtl_bb_info**, !dbg !5766
  %97 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl198, align 8, !dbg !5766
  %end_199 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %97, i32 0, i32 1, !dbg !5766
  %98 = load %struct.rtx_def*, %struct.rtx_def** %end_199, align 8, !dbg !5766
  %99 = load %struct.rtx_def*, %struct.rtx_def** %last.addr, align 8, !dbg !5766
  %cmp200 = icmp eq %struct.rtx_def* %98, %99, !dbg !5766
  br i1 %cmp200, label %cond.false203, label %cond.true202, !dbg !5766

cond.true202:                                     ; preds = %if.end196
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 2357, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !5766
  br label %cond.end204, !dbg !5766

cond.false203:                                    ; preds = %if.end196
  br label %cond.end204, !dbg !5766

cond.end204:                                      ; preds = %cond.false203, %cond.true202
  %cond205 = phi i32 [ 0, %cond.true202 ], [ 0, %cond.false203 ], !dbg !5766
  br label %if.end206, !dbg !5767

if.end206:                                        ; preds = %cond.end204, %if.end134
  %100 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5768
  %101 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5769
  call void @df_insn_change_bb(%struct.rtx_def* %100, %struct.basic_block_def* %101), !dbg !5770
  %102 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5771
  %il207 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %102, i32 0, i32 7, !dbg !5771
  %rtl208 = bitcast %union.basic_block_il_dependent* %il207 to %struct.rtl_bb_info**, !dbg !5771
  %103 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl208, align 8, !dbg !5771
  %end_209 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %103, i32 0, i32 1, !dbg !5771
  %104 = load %struct.rtx_def*, %struct.rtx_def** %end_209, align 8, !dbg !5771
  %105 = load %struct.rtx_def*, %struct.rtx_def** %last.addr, align 8, !dbg !5773
  %cmp210 = icmp eq %struct.rtx_def* %104, %105, !dbg !5774
  br i1 %cmp210, label %if.then212, label %if.end216, !dbg !5775

if.then212:                                       ; preds = %if.end206
  %106 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5776
  %107 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5777
  %il213 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %107, i32 0, i32 7, !dbg !5777
  %rtl214 = bitcast %union.basic_block_il_dependent* %il213 to %struct.rtl_bb_info**, !dbg !5777
  %108 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl214, align 8, !dbg !5777
  %end_215 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %108, i32 0, i32 1, !dbg !5777
  store %struct.rtx_def* %106, %struct.rtx_def** %end_215, align 8, !dbg !5778
  br label %if.end216, !dbg !5777

if.end216:                                        ; preds = %if.then212, %if.end206
  br label %if.end217, !dbg !5779

if.end217:                                        ; preds = %if.end216, %entry
  %109 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5780
  %110 = bitcast %struct.rtx_def* %109 to i32*, !dbg !5780
  %bf.load218 = load i32, i32* %110, align 8, !dbg !5781
  %bf.clear219 = and i32 %bf.load218, -268435457, !dbg !5781
  store i32 %bf.clear219, i32* %110, align 8, !dbg !5781
  ret void, !dbg !5782
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @schedule_insn(%struct.rtx_def* %insn) #0 !dbg !5783 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %sd_it = alloca %struct._sd_iterator, align 8
  %dep = alloca %struct._dep*, align 8
  %i = alloca i32, align 4
  %advance = alloca i32, align 4
  %pressure_info = alloca %struct.reg_pressure_data*, align 8
  %buf = alloca [2048 x i8], align 16
  %tmp = alloca %struct._sd_iterator, align 8
  %dbg = alloca %struct.rtx_def*, align 8
  %tmp144 = alloca %struct._sd_iterator, align 8
  %next = alloca %struct.rtx_def*, align 8
  %effective_cost = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !5784, metadata !DIExpression()), !dbg !5785
  call void @llvm.dbg.declare(metadata %struct._sd_iterator* %sd_it, metadata !5786, metadata !DIExpression()), !dbg !5787
  call void @llvm.dbg.declare(metadata %struct._dep** %dep, metadata !5788, metadata !DIExpression()), !dbg !5789
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5790, metadata !DIExpression()), !dbg !5791
  call void @llvm.dbg.declare(metadata i32* %advance, metadata !5792, metadata !DIExpression()), !dbg !5793
  store i32 0, i32* %advance, align 4, !dbg !5793
  %0 = load i32, i32* @sched_verbose, align 4, !dbg !5794
  %cmp = icmp sge i32 %0, 1, !dbg !5796
  br i1 %cmp, label %if.then, label %if.end23, !dbg !5797

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.reg_pressure_data** %pressure_info, metadata !5798, metadata !DIExpression()), !dbg !5800
  call void @llvm.dbg.declare(metadata [2048 x i8]* %buf, metadata !5801, metadata !DIExpression()), !dbg !5805
  %arraydecay = getelementptr inbounds [2048 x i8], [2048 x i8]* %buf, i64 0, i64 0, !dbg !5806
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5807
  call void @print_insn(i8* %arraydecay, %struct.rtx_def* %1, i32 0), !dbg !5808
  %arrayidx = getelementptr inbounds [2048 x i8], [2048 x i8]* %buf, i64 0, i64 40, !dbg !5809
  store i8 0, i8* %arrayidx, align 8, !dbg !5810
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !5811
  %3 = load i32, i32* @clock_var, align 4, !dbg !5812
  %arraydecay1 = getelementptr inbounds [2048 x i8], [2048 x i8]* %buf, i64 0, i64 0, !dbg !5813
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.35, i64 0, i64 0), i32 %3, i8* %arraydecay1), !dbg !5814
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5815
  %call2 = call i32 @recog_memoized(%struct.rtx_def* %4), !dbg !5817
  %cmp3 = icmp slt i32 %call2, 0, !dbg !5818
  br i1 %cmp3, label %if.then4, label %if.else, !dbg !5819

if.then4:                                         ; preds = %if.then
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !5820
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.36, i64 0, i64 0)), !dbg !5821
  br label %if.end, !dbg !5821

if.else:                                          ; preds = %if.then
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !5822
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5823
  call void @print_reservation(%struct._IO_FILE* %6, %struct.rtx_def* %7), !dbg !5824
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then4
  %8 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !5825
  %tobool = icmp ne %struct.VEC_haifa_insn_data_def_heap* %8, null, !dbg !5825
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5825

cond.true:                                        ; preds = %if.end
  %9 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !5825
  %base = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %9, i32 0, i32 0, !dbg !5825
  br label %cond.end, !dbg !5825

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !5825

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_haifa_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5825
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5825
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !5825
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5825
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !5825
  %rt_int = bitcast %union.rtunion_def* %arrayidx6 to i32*, !dbg !5825
  %11 = load i32, i32* %rt_int, align 8, !dbg !5825
  %call7 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond, i32 %11), !dbg !5825
  %reg_pressure = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call7, i32 0, i32 13, !dbg !5825
  %12 = load %struct.reg_pressure_data*, %struct.reg_pressure_data** %reg_pressure, align 8, !dbg !5825
  store %struct.reg_pressure_data* %12, %struct.reg_pressure_data** %pressure_info, align 8, !dbg !5826
  %13 = load %struct.reg_pressure_data*, %struct.reg_pressure_data** %pressure_info, align 8, !dbg !5827
  %cmp8 = icmp ne %struct.reg_pressure_data* %13, null, !dbg !5829
  br i1 %cmp8, label %if.then9, label %if.end21, !dbg !5830

if.then9:                                         ; preds = %cond.end
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !5831
  %call10 = call i32 @fputc(i32 58, %struct._IO_FILE* %14), !dbg !5833
  store i32 0, i32* %i, align 4, !dbg !5834
  br label %for.cond, !dbg !5836

for.cond:                                         ; preds = %for.inc, %if.then9
  %15 = load i32, i32* %i, align 4, !dbg !5837
  %16 = load i32, i32* @ira_reg_class_cover_size, align 4, !dbg !5839
  %cmp11 = icmp slt i32 %15, %16, !dbg !5840
  br i1 %cmp11, label %for.body, label %for.end, !dbg !5841

for.body:                                         ; preds = %for.cond
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !5842
  %18 = load i32, i32* %i, align 4, !dbg !5843
  %idxprom = sext i32 %18 to i64, !dbg !5844
  %arrayidx12 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom, !dbg !5844
  %19 = load i32, i32* %arrayidx12, align 4, !dbg !5844
  %idxprom13 = zext i32 %19 to i64, !dbg !5845
  %arrayidx14 = getelementptr inbounds [0 x i8*], [0 x i8*]* @reg_class_names, i64 0, i64 %idxprom13, !dbg !5845
  %20 = load i8*, i8** %arrayidx14, align 8, !dbg !5845
  %21 = load %struct.reg_pressure_data*, %struct.reg_pressure_data** %pressure_info, align 8, !dbg !5846
  %22 = load i32, i32* %i, align 4, !dbg !5847
  %idxprom15 = sext i32 %22 to i64, !dbg !5846
  %arrayidx16 = getelementptr inbounds %struct.reg_pressure_data, %struct.reg_pressure_data* %21, i64 %idxprom15, !dbg !5846
  %23 = bitcast %struct.reg_pressure_data* %arrayidx16 to i32*, !dbg !5848
  %bf.load = load i32, i32* %23, align 4, !dbg !5848
  %bf.lshr = lshr i32 %bf.load, 8, !dbg !5848
  %bf.clear = and i32 %bf.lshr, 255, !dbg !5848
  %24 = load %struct.reg_pressure_data*, %struct.reg_pressure_data** %pressure_info, align 8, !dbg !5849
  %25 = load i32, i32* %i, align 4, !dbg !5850
  %idxprom17 = sext i32 %25 to i64, !dbg !5849
  %arrayidx18 = getelementptr inbounds %struct.reg_pressure_data, %struct.reg_pressure_data* %24, i64 %idxprom17, !dbg !5849
  %26 = bitcast %struct.reg_pressure_data* %arrayidx18 to i32*, !dbg !5851
  %bf.load19 = load i32, i32* %26, align 4, !dbg !5851
  %bf.ashr = ashr i32 %bf.load19, 24, !dbg !5851
  %call20 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.37, i64 0, i64 0), i8* %20, i32 %bf.clear, i32 %bf.ashr), !dbg !5852
  br label %for.inc, !dbg !5852

for.inc:                                          ; preds = %for.body
  %27 = load i32, i32* %i, align 4, !dbg !5853
  %inc = add nsw i32 %27, 1, !dbg !5853
  store i32 %inc, i32* %i, align 4, !dbg !5853
  br label %for.cond, !dbg !5854, !llvm.loop !5855

for.end:                                          ; preds = %for.cond
  br label %if.end21, !dbg !5857

if.end21:                                         ; preds = %for.end, %cond.end
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !5858
  %call22 = call i32 @fputc(i32 10, %struct._IO_FILE* %28), !dbg !5859
  br label %if.end23, !dbg !5860

if.end23:                                         ; preds = %if.end21, %entry
  %29 = load i8, i8* @sched_pressure_p, align 1, !dbg !5861
  %tobool24 = icmp ne i8 %29, 0, !dbg !5861
  br i1 %tobool24, label %if.then25, label %if.end26, !dbg !5863

if.then25:                                        ; preds = %if.end23
  %30 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5864
  call void @update_reg_and_insn_max_reg_pressure(%struct.rtx_def* %30), !dbg !5865
  br label %if.end26, !dbg !5865

if.end26:                                         ; preds = %if.then25, %if.end23
  %31 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5866
  %call27 = call zeroext i8 @sd_lists_empty_p(%struct.rtx_def* %31, i32 3), !dbg !5866
  %tobool28 = icmp ne i8 %call27, 0, !dbg !5866
  br i1 %tobool28, label %cond.false30, label %cond.true29, !dbg !5866

cond.true29:                                      ; preds = %if.end26
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 1699, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !5866
  br label %cond.end31, !dbg !5866

cond.false30:                                     ; preds = %if.end26
  br label %cond.end31, !dbg !5866

cond.end31:                                       ; preds = %cond.false30, %cond.true29
  %cond32 = phi i32 [ 0, %cond.true29 ], [ 0, %cond.false30 ], !dbg !5866
  %32 = load i32, i32* @flag_var_tracking_assignments, align 4, !dbg !5867
  %tobool33 = icmp ne i32 %32, 0, !dbg !5867
  br i1 %tobool33, label %land.lhs.true, label %if.end67, !dbg !5869

land.lhs.true:                                    ; preds = %cond.end31
  %33 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5870
  %34 = bitcast %struct.rtx_def* %33 to i32*, !dbg !5870
  %bf.load34 = load i32, i32* %34, align 8, !dbg !5870
  %bf.clear35 = and i32 %bf.load34, 65535, !dbg !5870
  %cmp36 = icmp eq i32 %bf.clear35, 7, !dbg !5870
  br i1 %cmp36, label %if.end67, label %if.then37, !dbg !5871

if.then37:                                        ; preds = %land.lhs.true
  %35 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5872
  call void @sd_iterator_start(%struct._sd_iterator* sret %tmp, %struct.rtx_def* %35, i32 3), !dbg !5874
  %36 = bitcast %struct._sd_iterator* %sd_it to i8*, !dbg !5874
  %37 = bitcast %struct._sd_iterator* %tmp to i8*, !dbg !5874
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %36, i8* align 8 %37, i64 32, i1 false), !dbg !5874
  br label %for.cond38, !dbg !5875

for.cond38:                                       ; preds = %if.end56, %if.then37
  %call39 = call zeroext i8 @sd_iterator_cond(%struct._sd_iterator* %sd_it, %struct._dep** %dep), !dbg !5876
  %tobool40 = icmp ne i8 %call39, 0, !dbg !5878
  br i1 %tobool40, label %for.body41, label %for.end66, !dbg !5878

for.body41:                                       ; preds = %for.cond38
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %dbg, metadata !5879, metadata !DIExpression()), !dbg !5881
  %38 = load %struct._dep*, %struct._dep** %dep, align 8, !dbg !5882
  %pro = getelementptr inbounds %struct._dep, %struct._dep* %38, i32 0, i32 0, !dbg !5882
  %39 = load %struct.rtx_def*, %struct.rtx_def** %pro, align 8, !dbg !5882
  store %struct.rtx_def* %39, %struct.rtx_def** %dbg, align 8, !dbg !5881
  %40 = load %struct.rtx_def*, %struct.rtx_def** %dbg, align 8, !dbg !5883
  %41 = bitcast %struct.rtx_def* %40 to i32*, !dbg !5883
  %bf.load42 = load i32, i32* %41, align 8, !dbg !5883
  %bf.clear43 = and i32 %bf.load42, 65535, !dbg !5883
  %cmp44 = icmp eq i32 %bf.clear43, 7, !dbg !5883
  br i1 %cmp44, label %cond.false46, label %cond.true45, !dbg !5883

cond.true45:                                      ; preds = %for.body41
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 1708, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !5883
  br label %cond.end47, !dbg !5883

cond.false46:                                     ; preds = %for.body41
  br label %cond.end47, !dbg !5883

cond.end47:                                       ; preds = %cond.false46, %cond.true45
  %cond48 = phi i32 [ 0, %cond.true45 ], [ 0, %cond.false46 ], !dbg !5883
  %42 = load i32, i32* @sched_verbose, align 4, !dbg !5884
  %cmp49 = icmp sge i32 %42, 6, !dbg !5886
  br i1 %cmp49, label %if.then50, label %if.end56, !dbg !5887

if.then50:                                        ; preds = %cond.end47
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !5888
  %44 = load %struct.rtx_def*, %struct.rtx_def** %dbg, align 8, !dbg !5889
  %u51 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %44, i32 0, i32 1, !dbg !5889
  %fld52 = bitcast %union.u* %u51 to [1 x %union.rtunion_def]*, !dbg !5889
  %arrayidx53 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld52, i64 0, i64 0, !dbg !5889
  %rt_int54 = bitcast %union.rtunion_def* %arrayidx53 to i32*, !dbg !5889
  %45 = load i32, i32* %rt_int54, align 8, !dbg !5889
  %call55 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %43, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.38, i64 0, i64 0), i32 %45), !dbg !5890
  br label %if.end56, !dbg !5890

if.end56:                                         ; preds = %if.then50, %cond.end47
  %46 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !5891
  %call57 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 25, i32 0, %struct.rtx_def* %46), !dbg !5891
  %47 = load %struct.rtx_def*, %struct.rtx_def** %dbg, align 8, !dbg !5892
  %u58 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %47, i32 0, i32 1, !dbg !5892
  %fld59 = bitcast %union.u* %u58 to [1 x %union.rtunion_def]*, !dbg !5892
  %arrayidx60 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld59, i64 0, i64 5, !dbg !5892
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx60 to %struct.rtx_def**, !dbg !5892
  %48 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5892
  %u61 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %48, i32 0, i32 1, !dbg !5892
  %fld62 = bitcast %union.u* %u61 to [1 x %union.rtunion_def]*, !dbg !5892
  %arrayidx63 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld62, i64 0, i64 1, !dbg !5892
  %rt_rtx64 = bitcast %union.rtunion_def* %arrayidx63 to %struct.rtx_def**, !dbg !5892
  store %struct.rtx_def* %call57, %struct.rtx_def** %rt_rtx64, align 8, !dbg !5893
  %49 = load %struct.rtx_def*, %struct.rtx_def** %dbg, align 8, !dbg !5894
  %call65 = call zeroext i8 @df_insn_rescan(%struct.rtx_def* %49), !dbg !5895
  call void @sd_delete_dep(%struct._sd_iterator* byval(%struct._sd_iterator) align 8 %sd_it), !dbg !5896
  br label %for.cond38, !dbg !5897, !llvm.loop !5898

for.end66:                                        ; preds = %for.cond38
  br label %if.end67, !dbg !5899

if.end67:                                         ; preds = %for.end66, %land.lhs.true, %cond.end31
  %50 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !5900
  %tobool68 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %50, null, !dbg !5900
  br i1 %tobool68, label %cond.true69, label %cond.false71, !dbg !5900

cond.true69:                                      ; preds = %if.end67
  %51 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !5900
  %base70 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %51, i32 0, i32 0, !dbg !5900
  br label %cond.end72, !dbg !5900

cond.false71:                                     ; preds = %if.end67
  br label %cond.end72, !dbg !5900

cond.end72:                                       ; preds = %cond.false71, %cond.true69
  %cond73 = phi %struct.VEC_haifa_insn_data_def_base* [ %base70, %cond.true69 ], [ null, %cond.false71 ], !dbg !5900
  %52 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5900
  %u74 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %52, i32 0, i32 1, !dbg !5900
  %fld75 = bitcast %union.u* %u74 to [1 x %union.rtunion_def]*, !dbg !5900
  %arrayidx76 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld75, i64 0, i64 0, !dbg !5900
  %rt_int77 = bitcast %union.rtunion_def* %arrayidx76 to i32*, !dbg !5900
  %53 = load i32, i32* %rt_int77, align 8, !dbg !5900
  %call78 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond73, i32 %53), !dbg !5900
  %queue_index = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call78, i32 0, i32 4, !dbg !5900
  %54 = load i32, i32* %queue_index, align 8, !dbg !5900
  %cmp79 = icmp eq i32 %54, -2, !dbg !5900
  br i1 %cmp79, label %cond.false81, label %cond.true80, !dbg !5900

cond.true80:                                      ; preds = %cond.end72
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 1734, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !5900
  br label %cond.end82, !dbg !5900

cond.false81:                                     ; preds = %cond.end72
  br label %cond.end82, !dbg !5900

cond.end82:                                       ; preds = %cond.false81, %cond.true80
  %cond83 = phi i32 [ 0, %cond.true80 ], [ 0, %cond.false81 ], !dbg !5900
  %55 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !5901
  %tobool84 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %55, null, !dbg !5901
  br i1 %tobool84, label %cond.true85, label %cond.false87, !dbg !5901

cond.true85:                                      ; preds = %cond.end82
  %56 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !5901
  %base86 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %56, i32 0, i32 0, !dbg !5901
  br label %cond.end88, !dbg !5901

cond.false87:                                     ; preds = %cond.end82
  br label %cond.end88, !dbg !5901

cond.end88:                                       ; preds = %cond.false87, %cond.true85
  %cond89 = phi %struct.VEC_haifa_insn_data_def_base* [ %base86, %cond.true85 ], [ null, %cond.false87 ], !dbg !5901
  %57 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5901
  %u90 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %57, i32 0, i32 1, !dbg !5901
  %fld91 = bitcast %union.u* %u90 to [1 x %union.rtunion_def]*, !dbg !5901
  %arrayidx92 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld91, i64 0, i64 0, !dbg !5901
  %rt_int93 = bitcast %union.rtunion_def* %arrayidx92 to i32*, !dbg !5901
  %58 = load i32, i32* %rt_int93, align 8, !dbg !5901
  %call94 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond89, i32 %58), !dbg !5901
  %queue_index95 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call94, i32 0, i32 4, !dbg !5901
  store i32 -3, i32* %queue_index95, align 8, !dbg !5902
  %59 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !5903
  %tobool96 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %59, null, !dbg !5903
  br i1 %tobool96, label %cond.true97, label %cond.false99, !dbg !5903

cond.true97:                                      ; preds = %cond.end88
  %60 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !5903
  %base98 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %60, i32 0, i32 0, !dbg !5903
  br label %cond.end100, !dbg !5903

cond.false99:                                     ; preds = %cond.end88
  br label %cond.end100, !dbg !5903

cond.end100:                                      ; preds = %cond.false99, %cond.true97
  %cond101 = phi %struct.VEC_haifa_insn_data_def_base* [ %base98, %cond.true97 ], [ null, %cond.false99 ], !dbg !5903
  %61 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5903
  %u102 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %61, i32 0, i32 1, !dbg !5903
  %fld103 = bitcast %union.u* %u102 to [1 x %union.rtunion_def]*, !dbg !5903
  %arrayidx104 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld103, i64 0, i64 0, !dbg !5903
  %rt_int105 = bitcast %union.rtunion_def* %arrayidx104 to i32*, !dbg !5903
  %62 = load i32, i32* %rt_int105, align 8, !dbg !5903
  %call106 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond101, i32 %62), !dbg !5903
  %tick = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call106, i32 0, i32 2, !dbg !5903
  %63 = load i32, i32* %tick, align 8, !dbg !5903
  %64 = load i32, i32* @max_insn_queue_index, align 4, !dbg !5903
  %sub = sub nsw i32 0, %64, !dbg !5903
  %cmp107 = icmp sge i32 %63, %sub, !dbg !5903
  br i1 %cmp107, label %cond.false109, label %cond.true108, !dbg !5903

cond.true108:                                     ; preds = %cond.end100
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 1737, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !5903
  br label %cond.end110, !dbg !5903

cond.false109:                                    ; preds = %cond.end100
  br label %cond.end110, !dbg !5903

cond.end110:                                      ; preds = %cond.false109, %cond.true108
  %cond111 = phi i32 [ 0, %cond.true108 ], [ 0, %cond.false109 ], !dbg !5903
  %65 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !5904
  %tobool112 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %65, null, !dbg !5904
  br i1 %tobool112, label %cond.true113, label %cond.false115, !dbg !5904

cond.true113:                                     ; preds = %cond.end110
  %66 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !5904
  %base114 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %66, i32 0, i32 0, !dbg !5904
  br label %cond.end116, !dbg !5904

cond.false115:                                    ; preds = %cond.end110
  br label %cond.end116, !dbg !5904

cond.end116:                                      ; preds = %cond.false115, %cond.true113
  %cond117 = phi %struct.VEC_haifa_insn_data_def_base* [ %base114, %cond.true113 ], [ null, %cond.false115 ], !dbg !5904
  %67 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5904
  %u118 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %67, i32 0, i32 1, !dbg !5904
  %fld119 = bitcast %union.u* %u118 to [1 x %union.rtunion_def]*, !dbg !5904
  %arrayidx120 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld119, i64 0, i64 0, !dbg !5904
  %rt_int121 = bitcast %union.rtunion_def* %arrayidx120 to i32*, !dbg !5904
  %68 = load i32, i32* %rt_int121, align 8, !dbg !5904
  %call122 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond117, i32 %68), !dbg !5904
  %tick123 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call122, i32 0, i32 2, !dbg !5904
  %69 = load i32, i32* %tick123, align 8, !dbg !5904
  %70 = load i32, i32* @clock_var, align 4, !dbg !5906
  %cmp124 = icmp sgt i32 %69, %70, !dbg !5907
  br i1 %cmp124, label %if.then125, label %if.end131, !dbg !5908

if.then125:                                       ; preds = %cond.end116
  %71 = load i32, i32* @flag_sched_stalled_insns, align 4, !dbg !5909
  %tobool126 = icmp ne i32 %71, 0, !dbg !5909
  br i1 %tobool126, label %cond.false128, label %cond.true127, !dbg !5909

cond.true127:                                     ; preds = %if.then125
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 1741, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !5909
  br label %cond.end129, !dbg !5909

cond.false128:                                    ; preds = %if.then125
  br label %cond.end129, !dbg !5909

cond.end129:                                      ; preds = %cond.false128, %cond.true127
  %cond130 = phi i32 [ 0, %cond.true127 ], [ 0, %cond.false128 ], !dbg !5909
  br label %if.end131, !dbg !5909

if.end131:                                        ; preds = %cond.end129, %cond.end116
  %72 = load i32, i32* @clock_var, align 4, !dbg !5910
  %73 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !5911
  %tobool132 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %73, null, !dbg !5911
  br i1 %tobool132, label %cond.true133, label %cond.false135, !dbg !5911

cond.true133:                                     ; preds = %if.end131
  %74 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !5911
  %base134 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %74, i32 0, i32 0, !dbg !5911
  br label %cond.end136, !dbg !5911

cond.false135:                                    ; preds = %if.end131
  br label %cond.end136, !dbg !5911

cond.end136:                                      ; preds = %cond.false135, %cond.true133
  %cond137 = phi %struct.VEC_haifa_insn_data_def_base* [ %base134, %cond.true133 ], [ null, %cond.false135 ], !dbg !5911
  %75 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5911
  %u138 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %75, i32 0, i32 1, !dbg !5911
  %fld139 = bitcast %union.u* %u138 to [1 x %union.rtunion_def]*, !dbg !5911
  %arrayidx140 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld139, i64 0, i64 0, !dbg !5911
  %rt_int141 = bitcast %union.rtunion_def* %arrayidx140 to i32*, !dbg !5911
  %76 = load i32, i32* %rt_int141, align 8, !dbg !5911
  %call142 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond137, i32 %76), !dbg !5911
  %tick143 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call142, i32 0, i32 2, !dbg !5911
  store i32 %72, i32* %tick143, align 8, !dbg !5912
  %77 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5913
  call void @sd_iterator_start(%struct._sd_iterator* sret %tmp144, %struct.rtx_def* %77, i32 4), !dbg !5915
  %78 = bitcast %struct._sd_iterator* %sd_it to i8*, !dbg !5915
  %79 = bitcast %struct._sd_iterator* %tmp144 to i8*, !dbg !5915
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %78, i8* align 8 %79, i64 32, i1 false), !dbg !5915
  br label %for.cond145, !dbg !5916

for.cond145:                                      ; preds = %if.end215, %if.then156, %cond.end136
  %call146 = call zeroext i8 @sd_iterator_cond(%struct._sd_iterator* %sd_it, %struct._dep** %dep), !dbg !5917
  %tobool147 = icmp ne i8 %call146, 0, !dbg !5919
  br i1 %tobool147, label %for.body148, label %for.end216, !dbg !5919

for.body148:                                      ; preds = %for.cond145
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %next, metadata !5920, metadata !DIExpression()), !dbg !5922
  %80 = load %struct._dep*, %struct._dep** %dep, align 8, !dbg !5923
  %con = getelementptr inbounds %struct._dep, %struct._dep* %80, i32 0, i32 1, !dbg !5923
  %81 = load %struct.rtx_def*, %struct.rtx_def** %con, align 8, !dbg !5923
  store %struct.rtx_def* %81, %struct.rtx_def** %next, align 8, !dbg !5922
  call void @sd_resolve_dep(%struct._sd_iterator* byval(%struct._sd_iterator) align 8 %sd_it), !dbg !5924
  %82 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5925
  %83 = bitcast %struct.rtx_def* %82 to i32*, !dbg !5925
  %bf.load149 = load i32, i32* %83, align 8, !dbg !5925
  %bf.clear150 = and i32 %bf.load149, 65535, !dbg !5925
  %cmp151 = icmp eq i32 %bf.clear150, 7, !dbg !5925
  br i1 %cmp151, label %land.lhs.true152, label %if.end157, !dbg !5927

land.lhs.true152:                                 ; preds = %for.body148
  %84 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !5928
  %85 = bitcast %struct.rtx_def* %84 to i32*, !dbg !5928
  %bf.load153 = load i32, i32* %85, align 8, !dbg !5928
  %bf.clear154 = and i32 %bf.load153, 65535, !dbg !5928
  %cmp155 = icmp eq i32 %bf.clear154, 7, !dbg !5928
  br i1 %cmp155, label %if.end157, label %if.then156, !dbg !5929

if.then156:                                       ; preds = %land.lhs.true152
  br label %for.cond145, !dbg !5930, !llvm.loop !5931

if.end157:                                        ; preds = %land.lhs.true152, %for.body148
  %86 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !5933
  %tobool158 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %86, null, !dbg !5933
  br i1 %tobool158, label %cond.true159, label %cond.false161, !dbg !5933

cond.true159:                                     ; preds = %if.end157
  %87 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !5933
  %base160 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %87, i32 0, i32 0, !dbg !5933
  br label %cond.end162, !dbg !5933

cond.false161:                                    ; preds = %if.end157
  br label %cond.end162, !dbg !5933

cond.end162:                                      ; preds = %cond.false161, %cond.true159
  %cond163 = phi %struct.VEC_haifa_insn_data_def_base* [ %base160, %cond.true159 ], [ null, %cond.false161 ], !dbg !5933
  %88 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5933
  %u164 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %88, i32 0, i32 1, !dbg !5933
  %fld165 = bitcast %union.u* %u164 to [1 x %union.rtunion_def]*, !dbg !5933
  %arrayidx166 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld165, i64 0, i64 0, !dbg !5933
  %rt_int167 = bitcast %union.rtunion_def* %arrayidx166 to i32*, !dbg !5933
  %89 = load i32, i32* %rt_int167, align 8, !dbg !5933
  %call168 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond163, i32 %89), !dbg !5933
  %recovery_block = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call168, i32 0, i32 11, !dbg !5933
  %90 = load %struct.basic_block_def*, %struct.basic_block_def** %recovery_block, align 8, !dbg !5933
  %cmp169 = icmp ne %struct.basic_block_def* %90, null, !dbg !5933
  br i1 %cmp169, label %land.lhs.true170, label %if.then184, !dbg !5933

land.lhs.true170:                                 ; preds = %cond.end162
  %91 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !5933
  %tobool171 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %91, null, !dbg !5933
  br i1 %tobool171, label %cond.true172, label %cond.false174, !dbg !5933

cond.true172:                                     ; preds = %land.lhs.true170
  %92 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !5933
  %base173 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %92, i32 0, i32 0, !dbg !5933
  br label %cond.end175, !dbg !5933

cond.false174:                                    ; preds = %land.lhs.true170
  br label %cond.end175, !dbg !5933

cond.end175:                                      ; preds = %cond.false174, %cond.true172
  %cond176 = phi %struct.VEC_haifa_insn_data_def_base* [ %base173, %cond.true172 ], [ null, %cond.false174 ], !dbg !5933
  %93 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5933
  %u177 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %93, i32 0, i32 1, !dbg !5933
  %fld178 = bitcast %union.u* %u177 to [1 x %union.rtunion_def]*, !dbg !5933
  %arrayidx179 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld178, i64 0, i64 0, !dbg !5933
  %rt_int180 = bitcast %union.rtunion_def* %arrayidx179 to i32*, !dbg !5933
  %94 = load i32, i32* %rt_int180, align 8, !dbg !5933
  %call181 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond176, i32 %94), !dbg !5933
  %recovery_block182 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call181, i32 0, i32 11, !dbg !5933
  %95 = load %struct.basic_block_def*, %struct.basic_block_def** %recovery_block182, align 8, !dbg !5933
  %96 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5933
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %96, i64 0, !dbg !5933
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !5933
  %97 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5933
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %97, i32 0, i32 1, !dbg !5933
  %98 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !5933
  %cmp183 = icmp ne %struct.basic_block_def* %95, %98, !dbg !5933
  br i1 %cmp183, label %if.else196, label %if.then184, !dbg !5935

if.then184:                                       ; preds = %cond.end175, %cond.end162
  call void @llvm.dbg.declare(metadata i32* %effective_cost, metadata !5936, metadata !DIExpression()), !dbg !5938
  %99 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !5939
  %call185 = call i32 @try_ready(%struct.rtx_def* %99), !dbg !5940
  store i32 %call185, i32* %effective_cost, align 4, !dbg !5941
  %100 = load i32, i32* %effective_cost, align 4, !dbg !5942
  %cmp186 = icmp sge i32 %100, 0, !dbg !5944
  br i1 %cmp186, label %land.lhs.true187, label %if.end195, !dbg !5945

land.lhs.true187:                                 ; preds = %if.then184
  %101 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !5946
  %102 = bitcast %struct.rtx_def* %101 to i32*, !dbg !5946
  %bf.load188 = load i32, i32* %102, align 8, !dbg !5946
  %bf.lshr189 = lshr i32 %bf.load188, 28, !dbg !5946
  %bf.clear190 = and i32 %bf.lshr189, 1, !dbg !5946
  %tobool191 = icmp ne i32 %bf.clear190, 0, !dbg !5946
  br i1 %tobool191, label %land.lhs.true192, label %if.end195, !dbg !5947

land.lhs.true192:                                 ; preds = %land.lhs.true187
  %103 = load i32, i32* %advance, align 4, !dbg !5948
  %104 = load i32, i32* %effective_cost, align 4, !dbg !5949
  %cmp193 = icmp slt i32 %103, %104, !dbg !5950
  br i1 %cmp193, label %if.then194, label %if.end195, !dbg !5951

if.then194:                                       ; preds = %land.lhs.true192
  %105 = load i32, i32* %effective_cost, align 4, !dbg !5952
  store i32 %105, i32* %advance, align 4, !dbg !5953
  br label %if.end195, !dbg !5954

if.end195:                                        ; preds = %if.then194, %land.lhs.true192, %land.lhs.true187, %if.then184
  br label %if.end215, !dbg !5955

if.else196:                                       ; preds = %cond.end175
  %106 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5956
  %call197 = call zeroext i8 @sd_lists_empty_p(%struct.rtx_def* %106, i32 4), !dbg !5956
  %tobool198 = icmp ne i8 %call197, 0, !dbg !5956
  br i1 %tobool198, label %cond.false200, label %cond.true199, !dbg !5956

cond.true199:                                     ; preds = %if.else196
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 1779, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !5956
  br label %cond.end201, !dbg !5956

cond.false200:                                    ; preds = %if.else196
  br label %cond.end201, !dbg !5956

cond.end201:                                      ; preds = %cond.false200, %cond.true199
  %cond202 = phi i32 [ 0, %cond.true199 ], [ 0, %cond.false200 ], !dbg !5956
  %107 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !5958
  %tobool203 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %107, null, !dbg !5958
  br i1 %tobool203, label %cond.true204, label %cond.false206, !dbg !5958

cond.true204:                                     ; preds = %cond.end201
  %108 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !5958
  %base205 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %108, i32 0, i32 0, !dbg !5958
  br label %cond.end207, !dbg !5958

cond.false206:                                    ; preds = %cond.end201
  br label %cond.end207, !dbg !5958

cond.end207:                                      ; preds = %cond.false206, %cond.true204
  %cond208 = phi %struct.VEC_haifa_insn_data_def_base* [ %base205, %cond.true204 ], [ null, %cond.false206 ], !dbg !5958
  %109 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5958
  %u209 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %109, i32 0, i32 1, !dbg !5958
  %fld210 = bitcast %union.u* %u209 to [1 x %union.rtunion_def]*, !dbg !5958
  %arrayidx211 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld210, i64 0, i64 0, !dbg !5958
  %rt_int212 = bitcast %union.rtunion_def* %arrayidx211 to i32*, !dbg !5958
  %110 = load i32, i32* %rt_int212, align 8, !dbg !5958
  %call213 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond208, i32 %110), !dbg !5958
  %recovery_block214 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call213, i32 0, i32 11, !dbg !5958
  %111 = load %struct.basic_block_def*, %struct.basic_block_def** %recovery_block214, align 8, !dbg !5958
  call void @fix_recovery_deps(%struct.basic_block_def* %111), !dbg !5959
  br label %if.end215

if.end215:                                        ; preds = %cond.end207, %if.end195
  br label %for.cond145, !dbg !5960, !llvm.loop !5931

for.end216:                                       ; preds = %for.cond145
  %112 = load i32, i32* @issue_rate, align 4, !dbg !5961
  %cmp217 = icmp sgt i32 %112, 1, !dbg !5963
  br i1 %cmp217, label %land.lhs.true218, label %if.end246, !dbg !5964

land.lhs.true218:                                 ; preds = %for.end216
  %113 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5965
  %u219 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %113, i32 0, i32 1, !dbg !5965
  %fld220 = bitcast %union.u* %u219 to [1 x %union.rtunion_def]*, !dbg !5965
  %arrayidx221 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld220, i64 0, i64 5, !dbg !5965
  %rt_rtx222 = bitcast %union.rtunion_def* %arrayidx221 to %struct.rtx_def**, !dbg !5965
  %114 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx222, align 8, !dbg !5965
  %115 = bitcast %struct.rtx_def* %114 to i32*, !dbg !5965
  %bf.load223 = load i32, i32* %115, align 8, !dbg !5965
  %bf.clear224 = and i32 %bf.load223, 65535, !dbg !5965
  %cmp225 = icmp ne i32 %bf.clear224, 24, !dbg !5966
  br i1 %cmp225, label %land.lhs.true226, label %if.end246, !dbg !5967

land.lhs.true226:                                 ; preds = %land.lhs.true218
  %116 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5968
  %u227 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %116, i32 0, i32 1, !dbg !5968
  %fld228 = bitcast %union.u* %u227 to [1 x %union.rtunion_def]*, !dbg !5968
  %arrayidx229 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld228, i64 0, i64 5, !dbg !5968
  %rt_rtx230 = bitcast %union.rtunion_def* %arrayidx229 to %struct.rtx_def**, !dbg !5968
  %117 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx230, align 8, !dbg !5968
  %118 = bitcast %struct.rtx_def* %117 to i32*, !dbg !5968
  %bf.load231 = load i32, i32* %118, align 8, !dbg !5968
  %bf.clear232 = and i32 %bf.load231, 65535, !dbg !5968
  %cmp233 = icmp ne i32 %bf.clear232, 25, !dbg !5969
  br i1 %cmp233, label %land.lhs.true234, label %if.end246, !dbg !5970

land.lhs.true234:                                 ; preds = %land.lhs.true226
  %119 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5971
  %120 = bitcast %struct.rtx_def* %119 to i32*, !dbg !5971
  %bf.load235 = load i32, i32* %120, align 8, !dbg !5971
  %bf.clear236 = and i32 %bf.load235, 65535, !dbg !5971
  %cmp237 = icmp eq i32 %bf.clear236, 7, !dbg !5971
  br i1 %cmp237, label %if.end246, label %if.then238, !dbg !5972

if.then238:                                       ; preds = %land.lhs.true234
  %121 = load i32, i32* @reload_completed, align 4, !dbg !5973
  %tobool239 = icmp ne i32 %121, 0, !dbg !5973
  br i1 %tobool239, label %if.then240, label %if.end245, !dbg !5976

if.then240:                                       ; preds = %if.then238
  %122 = load i32, i32* @clock_var, align 4, !dbg !5977
  %123 = load i32, i32* @last_clock_var, align 4, !dbg !5977
  %cmp241 = icmp sgt i32 %122, %123, !dbg !5977
  %124 = zext i1 %cmp241 to i64, !dbg !5977
  %cond242 = select i1 %cmp241, i32 18, i32 0, !dbg !5977
  %125 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5977
  %126 = bitcast %struct.rtx_def* %125 to i32*, !dbg !5977
  %bf.load243 = load i32, i32* %126, align 8, !dbg !5977
  %bf.value = and i32 %cond242, 255, !dbg !5977
  %bf.shl = shl i32 %bf.value, 16, !dbg !5977
  %bf.clear244 = and i32 %bf.load243, -16711681, !dbg !5977
  %bf.set = or i32 %bf.clear244, %bf.shl, !dbg !5977
  store i32 %bf.set, i32* %126, align 8, !dbg !5977
  br label %if.end245, !dbg !5977

if.end245:                                        ; preds = %if.then240, %if.then238
  %127 = load i32, i32* @clock_var, align 4, !dbg !5978
  store i32 %127, i32* @last_clock_var, align 4, !dbg !5979
  br label %if.end246, !dbg !5980

if.end246:                                        ; preds = %if.end245, %land.lhs.true234, %land.lhs.true226, %land.lhs.true218, %for.end216
  %128 = load i32, i32* %advance, align 4, !dbg !5981
  ret i32 %128, !dbg !5982
}

; Function Attrs: noinline nounwind uwtable
define internal void @print_curr_reg_pressure() #0 !dbg !5983 {
entry:
  %i = alloca i32, align 4
  %cl = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5984, metadata !DIExpression()), !dbg !5985
  call void @llvm.dbg.declare(metadata i32* %cl, metadata !5986, metadata !DIExpression()), !dbg !5987
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !5988
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.39, i64 0, i64 0)), !dbg !5989
  store i32 0, i32* %i, align 4, !dbg !5990
  br label %for.cond, !dbg !5992

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4, !dbg !5993
  %2 = load i32, i32* @ira_reg_class_cover_size, align 4, !dbg !5995
  %cmp = icmp slt i32 %1, %2, !dbg !5996
  br i1 %cmp, label %for.body, label %for.end, !dbg !5997

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4, !dbg !5998
  %idxprom = sext i32 %3 to i64, !dbg !6000
  %arrayidx = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom, !dbg !6000
  %4 = load i32, i32* %arrayidx, align 4, !dbg !6000
  store i32 %4, i32* %cl, align 4, !dbg !6001
  %5 = load i32, i32* %cl, align 4, !dbg !6002
  %idxprom1 = zext i32 %5 to i64, !dbg !6002
  %arrayidx2 = getelementptr inbounds [27 x i32], [27 x i32]* @curr_reg_pressure, i64 0, i64 %idxprom1, !dbg !6002
  %6 = load i32, i32* %arrayidx2, align 4, !dbg !6002
  %cmp3 = icmp sge i32 %6, 0, !dbg !6002
  br i1 %cmp3, label %cond.false, label %cond.true, !dbg !6002

cond.true:                                        ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 787, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !6002
  br label %cond.end, !dbg !6002

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !6002

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6002
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !6003
  %8 = load i32, i32* %cl, align 4, !dbg !6004
  %idxprom4 = zext i32 %8 to i64, !dbg !6005
  %arrayidx5 = getelementptr inbounds [0 x i8*], [0 x i8*]* @reg_class_names, i64 0, i64 %idxprom4, !dbg !6005
  %9 = load i8*, i8** %arrayidx5, align 8, !dbg !6005
  %10 = load i32, i32* %cl, align 4, !dbg !6006
  %idxprom6 = zext i32 %10 to i64, !dbg !6007
  %arrayidx7 = getelementptr inbounds [27 x i32], [27 x i32]* @curr_reg_pressure, i64 0, i64 %idxprom6, !dbg !6007
  %11 = load i32, i32* %arrayidx7, align 4, !dbg !6007
  %12 = load i32, i32* %cl, align 4, !dbg !6008
  %idxprom8 = zext i32 %12 to i64, !dbg !6009
  %arrayidx9 = getelementptr inbounds [27 x i32], [27 x i32]* @curr_reg_pressure, i64 0, i64 %idxprom8, !dbg !6009
  %13 = load i32, i32* %arrayidx9, align 4, !dbg !6009
  %14 = load i32, i32* %cl, align 4, !dbg !6010
  %idxprom10 = zext i32 %14 to i64, !dbg !6011
  %arrayidx11 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_available_class_regs, i64 0, i64 %idxprom10, !dbg !6011
  %15 = load i32, i32* %arrayidx11, align 4, !dbg !6011
  %sub = sub nsw i32 %13, %15, !dbg !6012
  %call12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.40, i64 0, i64 0), i8* %9, i32 %11, i32 %sub), !dbg !6013
  br label %for.inc, !dbg !6014

for.inc:                                          ; preds = %cond.end
  %16 = load i32, i32* %i, align 4, !dbg !6015
  %inc = add nsw i32 %16, 1, !dbg !6015
  store i32 %inc, i32* %i, align 4, !dbg !6015
  br label %for.cond, !dbg !6016, !llvm.loop !6017

for.end:                                          ; preds = %for.cond
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !6019
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22, i64 0, i64 0)), !dbg !6020
  ret void, !dbg !6021
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @early_queue_to_ready(i8* %state, %struct.ready_list* %ready) #0 !dbg !6022 {
entry:
  %retval = alloca i32, align 4
  %state.addr = alloca i8*, align 8
  %ready.addr = alloca %struct.ready_list*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %link = alloca %struct.rtx_def*, align 8
  %next_link = alloca %struct.rtx_def*, align 8
  %prev_link = alloca %struct.rtx_def*, align 8
  %move_to_ready = alloca i8, align 1
  %cost = alloca i32, align 4
  %temp_state = alloca i8*, align 8
  %stalls = alloca i32, align 4
  %insns_removed = alloca i32, align 4
  store i8* %state, i8** %state.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %state.addr, metadata !6025, metadata !DIExpression()), !dbg !6026
  store %struct.ready_list* %ready, %struct.ready_list** %ready.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ready_list** %ready.addr, metadata !6027, metadata !DIExpression()), !dbg !6028
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !6029, metadata !DIExpression()), !dbg !6030
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %link, metadata !6031, metadata !DIExpression()), !dbg !6032
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %next_link, metadata !6033, metadata !DIExpression()), !dbg !6034
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %prev_link, metadata !6035, metadata !DIExpression()), !dbg !6036
  call void @llvm.dbg.declare(metadata i8* %move_to_ready, metadata !6037, metadata !DIExpression()), !dbg !6038
  call void @llvm.dbg.declare(metadata i32* %cost, metadata !6039, metadata !DIExpression()), !dbg !6040
  call void @llvm.dbg.declare(metadata i8** %temp_state, metadata !6041, metadata !DIExpression()), !dbg !6042
  %0 = load i64, i64* @dfa_state_size, align 8, !dbg !6043
  %1 = alloca i8, i64 %0, align 16, !dbg !6043
  store i8* %1, i8** %temp_state, align 8, !dbg !6042
  call void @llvm.dbg.declare(metadata i32* %stalls, metadata !6044, metadata !DIExpression()), !dbg !6045
  call void @llvm.dbg.declare(metadata i32* %insns_removed, metadata !6046, metadata !DIExpression()), !dbg !6047
  store i32 0, i32* %insns_removed, align 4, !dbg !6047
  %2 = load i32, i32* @flag_sched_stalled_insns, align 4, !dbg !6048
  %tobool = icmp ne i32 %2, 0, !dbg !6048
  br i1 %tobool, label %if.end, label %if.then, !dbg !6050

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !6051
  br label %return, !dbg !6051

if.end:                                           ; preds = %entry
  store i32 0, i32* %stalls, align 4, !dbg !6052
  br label %for.cond, !dbg !6054

for.cond:                                         ; preds = %for.inc, %if.end
  %3 = load i32, i32* %stalls, align 4, !dbg !6055
  %4 = load i32, i32* @max_insn_queue_index, align 4, !dbg !6057
  %cmp = icmp sle i32 %3, %4, !dbg !6058
  br i1 %cmp, label %for.body, label %for.end, !dbg !6059

for.body:                                         ; preds = %for.cond
  %5 = load %struct.rtx_def**, %struct.rtx_def*** @insn_queue, align 8, !dbg !6060
  %6 = load i32, i32* @q_ptr, align 4, !dbg !6063
  %7 = load i32, i32* %stalls, align 4, !dbg !6063
  %add = add nsw i32 %6, %7, !dbg !6063
  %8 = load i32, i32* @max_insn_queue_index, align 4, !dbg !6063
  %and = and i32 %add, %8, !dbg !6063
  %idxprom = sext i32 %and to i64, !dbg !6060
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 %idxprom, !dbg !6060
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8, !dbg !6060
  store %struct.rtx_def* %9, %struct.rtx_def** %link, align 8, !dbg !6064
  %tobool1 = icmp ne %struct.rtx_def* %9, null, !dbg !6064
  br i1 %tobool1, label %if.then2, label %if.end61, !dbg !6065

if.then2:                                         ; preds = %for.body
  %10 = load i32, i32* @sched_verbose, align 4, !dbg !6066
  %cmp3 = icmp sgt i32 %10, 6, !dbg !6069
  br i1 %cmp3, label %if.then4, label %if.end5, !dbg !6070

if.then4:                                         ; preds = %if.then2
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !6071
  %12 = load i32, i32* @q_ptr, align 4, !dbg !6072
  %13 = load i32, i32* %stalls, align 4, !dbg !6073
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.41, i64 0, i64 0), i32 %12, i32 %13), !dbg !6074
  br label %if.end5, !dbg !6074

if.end5:                                          ; preds = %if.then4, %if.then2
  store %struct.rtx_def* null, %struct.rtx_def** %prev_link, align 8, !dbg !6075
  br label %while.cond, !dbg !6076

while.cond:                                       ; preds = %if.end60, %if.end5
  %14 = load %struct.rtx_def*, %struct.rtx_def** %link, align 8, !dbg !6077
  %tobool6 = icmp ne %struct.rtx_def* %14, null, !dbg !6076
  br i1 %tobool6, label %while.body, label %while.end, !dbg !6076

while.body:                                       ; preds = %while.cond
  %15 = load %struct.rtx_def*, %struct.rtx_def** %link, align 8, !dbg !6078
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !6078
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6078
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !6078
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx7 to %struct.rtx_def**, !dbg !6078
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6078
  store %struct.rtx_def* %16, %struct.rtx_def** %next_link, align 8, !dbg !6080
  %17 = load %struct.rtx_def*, %struct.rtx_def** %link, align 8, !dbg !6081
  %u8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !6081
  %fld9 = bitcast %union.u* %u8 to [1 x %union.rtunion_def]*, !dbg !6081
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i64 0, i64 0, !dbg !6081
  %rt_rtx11 = bitcast %union.rtunion_def* %arrayidx10 to %struct.rtx_def**, !dbg !6081
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx11, align 8, !dbg !6081
  store %struct.rtx_def* %18, %struct.rtx_def** %insn, align 8, !dbg !6082
  %19 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6083
  %tobool12 = icmp ne %struct.rtx_def* %19, null, !dbg !6083
  br i1 %tobool12, label %land.lhs.true, label %if.end16, !dbg !6085

land.lhs.true:                                    ; preds = %while.body
  %20 = load i32, i32* @sched_verbose, align 4, !dbg !6086
  %cmp13 = icmp sgt i32 %20, 6, !dbg !6087
  br i1 %cmp13, label %if.then14, label %if.end16, !dbg !6088

if.then14:                                        ; preds = %land.lhs.true
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !6089
  %22 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6090
  %call15 = call i32 @print_rtl_single(%struct._IO_FILE* %21, %struct.rtx_def* %22), !dbg !6091
  br label %if.end16, !dbg !6091

if.end16:                                         ; preds = %if.then14, %land.lhs.true, %while.body
  %23 = load i8*, i8** %temp_state, align 8, !dbg !6092
  %24 = load i8*, i8** %state.addr, align 8, !dbg !6093
  %25 = load i64, i64* @dfa_state_size, align 8, !dbg !6094
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %23, i8* align 1 %24, i64 %25, i1 false), !dbg !6095
  %26 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6096
  %call17 = call i32 @recog_memoized(%struct.rtx_def* %26), !dbg !6098
  %cmp18 = icmp slt i32 %call17, 0, !dbg !6099
  br i1 %cmp18, label %if.then19, label %if.else, !dbg !6100

if.then19:                                        ; preds = %if.end16
  store i32 0, i32* %cost, align 4, !dbg !6101
  br label %if.end21, !dbg !6102

if.else:                                          ; preds = %if.end16
  %27 = load i8*, i8** %temp_state, align 8, !dbg !6103
  %28 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6104
  %call20 = call i32 @state_transition(i8* %27, %struct.rtx_def* %28), !dbg !6105
  store i32 %call20, i32* %cost, align 4, !dbg !6106
  br label %if.end21

if.end21:                                         ; preds = %if.else, %if.then19
  %29 = load i32, i32* @sched_verbose, align 4, !dbg !6107
  %cmp22 = icmp sge i32 %29, 6, !dbg !6109
  br i1 %cmp22, label %if.then23, label %if.end25, !dbg !6110

if.then23:                                        ; preds = %if.end21
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !6111
  %31 = load i32, i32* %cost, align 4, !dbg !6112
  %call24 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %30, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.42, i64 0, i64 0), i32 %31), !dbg !6113
  br label %if.end25, !dbg !6113

if.end25:                                         ; preds = %if.then23, %if.end21
  store i8 0, i8* %move_to_ready, align 1, !dbg !6114
  %32 = load i32, i32* %cost, align 4, !dbg !6115
  %cmp26 = icmp slt i32 %32, 0, !dbg !6117
  br i1 %cmp26, label %if.then27, label %if.end55, !dbg !6118

if.then27:                                        ; preds = %if.end25
  %33 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6119
  %call28 = call zeroext i8 @ok_for_early_queue_removal(%struct.rtx_def* %33), !dbg !6121
  store i8 %call28, i8* %move_to_ready, align 1, !dbg !6122
  %34 = load i8, i8* %move_to_ready, align 1, !dbg !6123
  %conv = zext i8 %34 to i32, !dbg !6123
  %cmp29 = icmp eq i32 %conv, 1, !dbg !6125
  br i1 %cmp29, label %if.then31, label %if.end54, !dbg !6126

if.then31:                                        ; preds = %if.then27
  %35 = load i32, i32* @q_size, align 4, !dbg !6127
  %sub = sub nsw i32 %35, 1, !dbg !6127
  store i32 %sub, i32* @q_size, align 4, !dbg !6127
  %36 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !6129
  %37 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6130
  call void @ready_add(%struct.ready_list* %36, %struct.rtx_def* %37, i8 zeroext 0), !dbg !6131
  %38 = load %struct.rtx_def*, %struct.rtx_def** %prev_link, align 8, !dbg !6132
  %tobool32 = icmp ne %struct.rtx_def* %38, null, !dbg !6132
  br i1 %tobool32, label %if.then33, label %if.else38, !dbg !6134

if.then33:                                        ; preds = %if.then31
  %39 = load %struct.rtx_def*, %struct.rtx_def** %next_link, align 8, !dbg !6135
  %40 = load %struct.rtx_def*, %struct.rtx_def** %prev_link, align 8, !dbg !6136
  %u34 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %40, i32 0, i32 1, !dbg !6136
  %fld35 = bitcast %union.u* %u34 to [1 x %union.rtunion_def]*, !dbg !6136
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld35, i64 0, i64 1, !dbg !6136
  %rt_rtx37 = bitcast %union.rtunion_def* %arrayidx36 to %struct.rtx_def**, !dbg !6136
  store %struct.rtx_def* %39, %struct.rtx_def** %rt_rtx37, align 8, !dbg !6137
  br label %if.end43, !dbg !6136

if.else38:                                        ; preds = %if.then31
  %41 = load %struct.rtx_def*, %struct.rtx_def** %next_link, align 8, !dbg !6138
  %42 = load %struct.rtx_def**, %struct.rtx_def*** @insn_queue, align 8, !dbg !6139
  %43 = load i32, i32* @q_ptr, align 4, !dbg !6140
  %44 = load i32, i32* %stalls, align 4, !dbg !6140
  %add39 = add nsw i32 %43, %44, !dbg !6140
  %45 = load i32, i32* @max_insn_queue_index, align 4, !dbg !6140
  %and40 = and i32 %add39, %45, !dbg !6140
  %idxprom41 = sext i32 %and40 to i64, !dbg !6139
  %arrayidx42 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %42, i64 %idxprom41, !dbg !6139
  store %struct.rtx_def* %41, %struct.rtx_def** %arrayidx42, align 8, !dbg !6141
  br label %if.end43

if.end43:                                         ; preds = %if.else38, %if.then33
  %46 = load %struct.rtx_def*, %struct.rtx_def** %link, align 8, !dbg !6142
  call void @free_INSN_LIST_node(%struct.rtx_def* %46), !dbg !6143
  %47 = load i32, i32* @sched_verbose, align 4, !dbg !6144
  %cmp44 = icmp sge i32 %47, 2, !dbg !6146
  br i1 %cmp44, label %if.then46, label %if.end49, !dbg !6147

if.then46:                                        ; preds = %if.end43
  %48 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !6148
  %49 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !6149
  %print_insn = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %49, i32 0, i32 5, !dbg !6150
  %50 = load i8* (%struct.rtx_def*, i32)*, i8* (%struct.rtx_def*, i32)** %print_insn, align 8, !dbg !6150
  %51 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6151
  %call47 = call i8* %50(%struct.rtx_def* %51, i32 0), !dbg !6152
  %call48 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %48, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.43, i64 0, i64 0), i8* %call47), !dbg !6153
  br label %if.end49, !dbg !6153

if.end49:                                         ; preds = %if.then46, %if.end43
  %52 = load i32, i32* %insns_removed, align 4, !dbg !6154
  %inc = add nsw i32 %52, 1, !dbg !6154
  store i32 %inc, i32* %insns_removed, align 4, !dbg !6154
  %53 = load i32, i32* %insns_removed, align 4, !dbg !6155
  %54 = load i32, i32* @flag_sched_stalled_insns, align 4, !dbg !6157
  %cmp50 = icmp eq i32 %53, %54, !dbg !6158
  br i1 %cmp50, label %if.then52, label %if.end53, !dbg !6159

if.then52:                                        ; preds = %if.end49
  %55 = load i32, i32* %insns_removed, align 4, !dbg !6160
  store i32 %55, i32* %retval, align 4, !dbg !6161
  br label %return, !dbg !6161

if.end53:                                         ; preds = %if.end49
  br label %if.end54, !dbg !6162

if.end54:                                         ; preds = %if.end53, %if.then27
  br label %if.end55, !dbg !6163

if.end55:                                         ; preds = %if.end54, %if.end25
  %56 = load i8, i8* %move_to_ready, align 1, !dbg !6164
  %conv56 = zext i8 %56 to i32, !dbg !6164
  %cmp57 = icmp eq i32 %conv56, 0, !dbg !6166
  br i1 %cmp57, label %if.then59, label %if.end60, !dbg !6167

if.then59:                                        ; preds = %if.end55
  %57 = load %struct.rtx_def*, %struct.rtx_def** %link, align 8, !dbg !6168
  store %struct.rtx_def* %57, %struct.rtx_def** %prev_link, align 8, !dbg !6169
  br label %if.end60, !dbg !6170

if.end60:                                         ; preds = %if.then59, %if.end55
  %58 = load %struct.rtx_def*, %struct.rtx_def** %next_link, align 8, !dbg !6171
  store %struct.rtx_def* %58, %struct.rtx_def** %link, align 8, !dbg !6172
  br label %while.cond, !dbg !6076, !llvm.loop !6173

while.end:                                        ; preds = %while.cond
  br label %if.end61, !dbg !6175

if.end61:                                         ; preds = %while.end, %for.body
  br label %for.inc, !dbg !6176

for.inc:                                          ; preds = %if.end61
  %59 = load i32, i32* %stalls, align 4, !dbg !6177
  %inc62 = add nsw i32 %59, 1, !dbg !6177
  store i32 %inc62, i32* %stalls, align 4, !dbg !6177
  br label %for.cond, !dbg !6178, !llvm.loop !6179

for.end:                                          ; preds = %for.cond
  %60 = load i32, i32* %insns_removed, align 4, !dbg !6181
  store i32 %60, i32* %retval, align 4, !dbg !6182
  br label %return, !dbg !6182

return:                                           ; preds = %for.end, %if.then52, %if.then
  %61 = load i32, i32* %retval, align 4, !dbg !6183
  ret i32 %61, !dbg !6183
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @choose_ready(%struct.ready_list* %ready, %struct.rtx_def** %insn_ptr) #0 !dbg !6184 {
entry:
  %retval = alloca i32, align 4
  %ready.addr = alloca %struct.ready_list*, align 8
  %insn_ptr.addr = alloca %struct.rtx_def**, align 8
  %lookahead = alloca i32, align 4
  %insn = alloca %struct.rtx_def*, align 8
  %index = alloca i32, align 4
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %insn24 = alloca %struct.rtx_def*, align 8
  %try_data = alloca i32, align 4
  %try_control = alloca i32, align 4
  %ts = alloca i32, align 4
  %x = alloca %struct.rtx_def*, align 8
  %s = alloca i32, align 4
  store %struct.ready_list* %ready, %struct.ready_list** %ready.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ready_list** %ready.addr, metadata !6187, metadata !DIExpression()), !dbg !6188
  store %struct.rtx_def** %insn_ptr, %struct.rtx_def*** %insn_ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %insn_ptr.addr, metadata !6189, metadata !DIExpression()), !dbg !6190
  call void @llvm.dbg.declare(metadata i32* %lookahead, metadata !6191, metadata !DIExpression()), !dbg !6192
  %call = call zeroext i8 @dbg_cnt(i32 29), !dbg !6193
  %conv = zext i8 %call to i32, !dbg !6193
  %cmp = icmp eq i32 %conv, 0, !dbg !6195
  br i1 %cmp, label %if.then, label %if.end7, !dbg !6196

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !6197, metadata !DIExpression()), !dbg !6199
  %0 = load %struct.rtx_def*, %struct.rtx_def** @last_scheduled_insn, align 8, !dbg !6200
  %call2 = call %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %0), !dbg !6201
  store %struct.rtx_def* %call2, %struct.rtx_def** %insn, align 8, !dbg !6202
  %1 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6203
  %tobool = icmp ne %struct.VEC_haifa_insn_data_def_heap* %1, null, !dbg !6203
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6203

cond.true:                                        ; preds = %if.then
  %2 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6203
  %base = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %2, i32 0, i32 0, !dbg !6203
  br label %cond.end, !dbg !6203

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !6203

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_haifa_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6203
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6203
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !6203
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6203
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !6203
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !6203
  %4 = load i32, i32* %rt_int, align 8, !dbg !6203
  %call3 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond, i32 %4), !dbg !6203
  %queue_index = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call3, i32 0, i32 4, !dbg !6203
  %5 = load i32, i32* %queue_index, align 8, !dbg !6203
  %cmp4 = icmp eq i32 %5, -1, !dbg !6205
  br i1 %cmp4, label %if.then6, label %if.end, !dbg !6206

if.then6:                                         ; preds = %cond.end
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6207
  call void @ready_remove_insn(%struct.rtx_def* %6), !dbg !6209
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6210
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %insn_ptr.addr, align 8, !dbg !6211
  store %struct.rtx_def* %7, %struct.rtx_def** %8, align 8, !dbg !6212
  store i32 0, i32* %retval, align 4, !dbg !6213
  br label %return, !dbg !6213

if.end:                                           ; preds = %cond.end
  store i32 -1, i32* %retval, align 4, !dbg !6214
  br label %return, !dbg !6214

if.end7:                                          ; preds = %entry
  store i32 0, i32* %lookahead, align 4, !dbg !6215
  %9 = load i32 ()*, i32 ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 17), align 8, !dbg !6216
  %tobool8 = icmp ne i32 ()* %9, null, !dbg !6218
  br i1 %tobool8, label %if.then9, label %if.end11, !dbg !6219

if.then9:                                         ; preds = %if.end7
  %10 = load i32 ()*, i32 ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 17), align 8, !dbg !6220
  %call10 = call i32 %10(), !dbg !6221
  store i32 %call10, i32* %lookahead, align 4, !dbg !6222
  br label %if.end11, !dbg !6223

if.end11:                                         ; preds = %if.then9, %if.end7
  %11 = load i32, i32* %lookahead, align 4, !dbg !6224
  %cmp12 = icmp sle i32 %11, 0, !dbg !6226
  br i1 %cmp12, label %if.then22, label %lor.lhs.false, !dbg !6227

lor.lhs.false:                                    ; preds = %if.end11
  %12 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !6228
  %call14 = call %struct.rtx_def* @ready_element(%struct.ready_list* %12, i32 0), !dbg !6228
  %13 = bitcast %struct.rtx_def* %call14 to i32*, !dbg !6228
  %bf.load = load i32, i32* %13, align 8, !dbg !6228
  %bf.lshr = lshr i32 %bf.load, 28, !dbg !6228
  %bf.clear = and i32 %bf.lshr, 1, !dbg !6228
  %tobool15 = icmp ne i32 %bf.clear, 0, !dbg !6228
  br i1 %tobool15, label %if.then22, label %lor.lhs.false16, !dbg !6229

lor.lhs.false16:                                  ; preds = %lor.lhs.false
  %14 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !6230
  %call17 = call %struct.rtx_def* @ready_element(%struct.ready_list* %14, i32 0), !dbg !6230
  %15 = bitcast %struct.rtx_def* %call17 to i32*, !dbg !6230
  %bf.load18 = load i32, i32* %15, align 8, !dbg !6230
  %bf.clear19 = and i32 %bf.load18, 65535, !dbg !6230
  %cmp20 = icmp eq i32 %bf.clear19, 7, !dbg !6230
  br i1 %cmp20, label %if.then22, label %if.else, !dbg !6231

if.then22:                                        ; preds = %lor.lhs.false16, %lor.lhs.false, %if.end11
  %16 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !6232
  %call23 = call %struct.rtx_def* @ready_remove_first(%struct.ready_list* %16), !dbg !6234
  %17 = load %struct.rtx_def**, %struct.rtx_def*** %insn_ptr.addr, align 8, !dbg !6235
  store %struct.rtx_def* %call23, %struct.rtx_def** %17, align 8, !dbg !6236
  store i32 0, i32* %retval, align 4, !dbg !6237
  br label %return, !dbg !6237

if.else:                                          ; preds = %lor.lhs.false16
  call void @llvm.dbg.declare(metadata i32* %index, metadata !6238, metadata !DIExpression()), !dbg !6240
  store i32 0, i32* %index, align 4, !dbg !6240
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6241, metadata !DIExpression()), !dbg !6242
  call void @llvm.dbg.declare(metadata i32* %n, metadata !6243, metadata !DIExpression()), !dbg !6244
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn24, metadata !6245, metadata !DIExpression()), !dbg !6246
  call void @llvm.dbg.declare(metadata i32* %try_data, metadata !6247, metadata !DIExpression()), !dbg !6248
  store i32 1, i32* %try_data, align 4, !dbg !6248
  call void @llvm.dbg.declare(metadata i32* %try_control, metadata !6249, metadata !DIExpression()), !dbg !6250
  store i32 1, i32* %try_control, align 4, !dbg !6250
  call void @llvm.dbg.declare(metadata i32* %ts, metadata !6251, metadata !DIExpression()), !dbg !6252
  %18 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !6253
  %call25 = call %struct.rtx_def* @ready_element(%struct.ready_list* %18, i32 0), !dbg !6254
  store %struct.rtx_def* %call25, %struct.rtx_def** %insn24, align 8, !dbg !6255
  %19 = load %struct.rtx_def*, %struct.rtx_def** %insn24, align 8, !dbg !6256
  %u26 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !6256
  %fld27 = bitcast %union.u* %u26 to [1 x %union.rtunion_def]*, !dbg !6256
  %arrayidx28 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld27, i64 0, i64 6, !dbg !6256
  %rt_int29 = bitcast %union.rtunion_def* %arrayidx28 to i32*, !dbg !6256
  %20 = load i32, i32* %rt_int29, align 8, !dbg !6256
  %cmp30 = icmp slt i32 %20, 0, !dbg !6258
  br i1 %cmp30, label %if.then32, label %if.end34, !dbg !6259

if.then32:                                        ; preds = %if.else
  %21 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !6260
  %call33 = call %struct.rtx_def* @ready_remove_first(%struct.ready_list* %21), !dbg !6262
  %22 = load %struct.rtx_def**, %struct.rtx_def*** %insn_ptr.addr, align 8, !dbg !6263
  store %struct.rtx_def* %call33, %struct.rtx_def** %22, align 8, !dbg !6264
  store i32 0, i32* %retval, align 4, !dbg !6265
  br label %return, !dbg !6265

if.end34:                                         ; preds = %if.else
  %23 = load %struct.spec_info_def*, %struct.spec_info_def** @spec_info, align 8, !dbg !6266
  %tobool35 = icmp ne %struct.spec_info_def* %23, null, !dbg !6266
  br i1 %tobool35, label %land.lhs.true, label %if.end82, !dbg !6268

land.lhs.true:                                    ; preds = %if.end34
  %24 = load %struct.spec_info_def*, %struct.spec_info_def** @spec_info, align 8, !dbg !6269
  %flags = getelementptr inbounds %struct.spec_info_def, %struct.spec_info_def* %24, i32 0, i32 4, !dbg !6270
  %25 = load i32, i32* %flags, align 8, !dbg !6270
  %and = and i32 %25, 6, !dbg !6271
  %tobool36 = icmp ne i32 %and, 0, !dbg !6271
  br i1 %tobool36, label %if.then37, label %if.end82, !dbg !6272

if.then37:                                        ; preds = %land.lhs.true
  store i32 0, i32* %i, align 4, !dbg !6273
  %26 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !6276
  %n_ready = getelementptr inbounds %struct.ready_list, %struct.ready_list* %26, i32 0, i32 3, !dbg !6277
  %27 = load i32, i32* %n_ready, align 8, !dbg !6277
  store i32 %27, i32* %n, align 4, !dbg !6278
  br label %for.cond, !dbg !6279

for.cond:                                         ; preds = %for.inc, %if.then37
  %28 = load i32, i32* %i, align 4, !dbg !6280
  %29 = load i32, i32* %n, align 4, !dbg !6282
  %cmp38 = icmp slt i32 %28, %29, !dbg !6283
  br i1 %cmp38, label %for.body, label %for.end, !dbg !6284

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !6285, metadata !DIExpression()), !dbg !6287
  call void @llvm.dbg.declare(metadata i32* %s, metadata !6288, metadata !DIExpression()), !dbg !6289
  %30 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !6290
  %31 = load i32, i32* %i, align 4, !dbg !6291
  %call40 = call %struct.rtx_def* @ready_element(%struct.ready_list* %30, i32 %31), !dbg !6292
  store %struct.rtx_def* %call40, %struct.rtx_def** %x, align 8, !dbg !6293
  %32 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6294
  %tobool41 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %32, null, !dbg !6294
  br i1 %tobool41, label %cond.true42, label %cond.false44, !dbg !6294

cond.true42:                                      ; preds = %for.body
  %33 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6294
  %base43 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %33, i32 0, i32 0, !dbg !6294
  br label %cond.end45, !dbg !6294

cond.false44:                                     ; preds = %for.body
  br label %cond.end45, !dbg !6294

cond.end45:                                       ; preds = %cond.false44, %cond.true42
  %cond46 = phi %struct.VEC_haifa_insn_data_def_base* [ %base43, %cond.true42 ], [ null, %cond.false44 ], !dbg !6294
  %34 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6294
  %u47 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %34, i32 0, i32 1, !dbg !6294
  %fld48 = bitcast %union.u* %u47 to [1 x %union.rtunion_def]*, !dbg !6294
  %arrayidx49 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld48, i64 0, i64 0, !dbg !6294
  %rt_int50 = bitcast %union.rtunion_def* %arrayidx49 to i32*, !dbg !6294
  %35 = load i32, i32* %rt_int50, align 8, !dbg !6294
  %call51 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond46, i32 %35), !dbg !6294
  %todo_spec = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call51, i32 0, i32 8, !dbg !6294
  %36 = load i32, i32* %todo_spec, align 8, !dbg !6294
  store i32 %36, i32* %s, align 4, !dbg !6295
  %37 = load %struct.spec_info_def*, %struct.spec_info_def** @spec_info, align 8, !dbg !6296
  %flags52 = getelementptr inbounds %struct.spec_info_def, %struct.spec_info_def* %37, i32 0, i32 4, !dbg !6298
  %38 = load i32, i32* %flags52, align 8, !dbg !6298
  %and53 = and i32 %38, 2, !dbg !6299
  %tobool54 = icmp ne i32 %and53, 0, !dbg !6299
  br i1 %tobool54, label %land.lhs.true55, label %if.end66, !dbg !6300

land.lhs.true55:                                  ; preds = %cond.end45
  %39 = load i32, i32* %s, align 4, !dbg !6301
  %and56 = and i32 %39, 4095, !dbg !6302
  %tobool57 = icmp ne i32 %and56, 0, !dbg !6302
  br i1 %tobool57, label %if.end66, label %if.then58, !dbg !6303

if.then58:                                        ; preds = %land.lhs.true55
  store i32 0, i32* %try_data, align 4, !dbg !6304
  %40 = load %struct.spec_info_def*, %struct.spec_info_def** @spec_info, align 8, !dbg !6306
  %flags59 = getelementptr inbounds %struct.spec_info_def, %struct.spec_info_def* %40, i32 0, i32 4, !dbg !6308
  %41 = load i32, i32* %flags59, align 8, !dbg !6308
  %and60 = and i32 %41, 4, !dbg !6309
  %tobool61 = icmp ne i32 %and60, 0, !dbg !6309
  br i1 %tobool61, label %lor.lhs.false62, label %if.then64, !dbg !6310

lor.lhs.false62:                                  ; preds = %if.then58
  %42 = load i32, i32* %try_control, align 4, !dbg !6311
  %tobool63 = icmp ne i32 %42, 0, !dbg !6311
  br i1 %tobool63, label %if.end65, label %if.then64, !dbg !6312

if.then64:                                        ; preds = %lor.lhs.false62, %if.then58
  br label %for.end, !dbg !6313

if.end65:                                         ; preds = %lor.lhs.false62
  br label %if.end66, !dbg !6314

if.end66:                                         ; preds = %if.end65, %land.lhs.true55, %cond.end45
  %43 = load %struct.spec_info_def*, %struct.spec_info_def** @spec_info, align 8, !dbg !6315
  %flags67 = getelementptr inbounds %struct.spec_info_def, %struct.spec_info_def* %43, i32 0, i32 4, !dbg !6317
  %44 = load i32, i32* %flags67, align 8, !dbg !6317
  %and68 = and i32 %44, 4, !dbg !6318
  %tobool69 = icmp ne i32 %and68, 0, !dbg !6318
  br i1 %tobool69, label %land.lhs.true70, label %if.end81, !dbg !6319

land.lhs.true70:                                  ; preds = %if.end66
  %45 = load i32, i32* %s, align 4, !dbg !6320
  %and71 = and i32 %45, 16773120, !dbg !6321
  %tobool72 = icmp ne i32 %and71, 0, !dbg !6321
  br i1 %tobool72, label %if.end81, label %if.then73, !dbg !6322

if.then73:                                        ; preds = %land.lhs.true70
  store i32 0, i32* %try_control, align 4, !dbg !6323
  %46 = load %struct.spec_info_def*, %struct.spec_info_def** @spec_info, align 8, !dbg !6325
  %flags74 = getelementptr inbounds %struct.spec_info_def, %struct.spec_info_def* %46, i32 0, i32 4, !dbg !6327
  %47 = load i32, i32* %flags74, align 8, !dbg !6327
  %and75 = and i32 %47, 2, !dbg !6328
  %tobool76 = icmp ne i32 %and75, 0, !dbg !6328
  br i1 %tobool76, label %lor.lhs.false77, label %if.then79, !dbg !6329

lor.lhs.false77:                                  ; preds = %if.then73
  %48 = load i32, i32* %try_data, align 4, !dbg !6330
  %tobool78 = icmp ne i32 %48, 0, !dbg !6330
  br i1 %tobool78, label %if.end80, label %if.then79, !dbg !6331

if.then79:                                        ; preds = %lor.lhs.false77, %if.then73
  br label %for.end, !dbg !6332

if.end80:                                         ; preds = %lor.lhs.false77
  br label %if.end81, !dbg !6333

if.end81:                                         ; preds = %if.end80, %land.lhs.true70, %if.end66
  br label %for.inc, !dbg !6334

for.inc:                                          ; preds = %if.end81
  %49 = load i32, i32* %i, align 4, !dbg !6335
  %inc = add nsw i32 %49, 1, !dbg !6335
  store i32 %inc, i32* %i, align 4, !dbg !6335
  br label %for.cond, !dbg !6336, !llvm.loop !6337

for.end:                                          ; preds = %if.then79, %if.then64, %for.cond
  br label %if.end82, !dbg !6339

if.end82:                                         ; preds = %for.end, %land.lhs.true, %if.end34
  %50 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6340
  %tobool83 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %50, null, !dbg !6340
  br i1 %tobool83, label %cond.true84, label %cond.false86, !dbg !6340

cond.true84:                                      ; preds = %if.end82
  %51 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6340
  %base85 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %51, i32 0, i32 0, !dbg !6340
  br label %cond.end87, !dbg !6340

cond.false86:                                     ; preds = %if.end82
  br label %cond.end87, !dbg !6340

cond.end87:                                       ; preds = %cond.false86, %cond.true84
  %cond88 = phi %struct.VEC_haifa_insn_data_def_base* [ %base85, %cond.true84 ], [ null, %cond.false86 ], !dbg !6340
  %52 = load %struct.rtx_def*, %struct.rtx_def** %insn24, align 8, !dbg !6340
  %u89 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %52, i32 0, i32 1, !dbg !6340
  %fld90 = bitcast %union.u* %u89 to [1 x %union.rtunion_def]*, !dbg !6340
  %arrayidx91 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld90, i64 0, i64 0, !dbg !6340
  %rt_int92 = bitcast %union.rtunion_def* %arrayidx91 to i32*, !dbg !6340
  %53 = load i32, i32* %rt_int92, align 8, !dbg !6340
  %call93 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond88, i32 %53), !dbg !6340
  %todo_spec94 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call93, i32 0, i32 8, !dbg !6340
  %54 = load i32, i32* %todo_spec94, align 8, !dbg !6340
  store i32 %54, i32* %ts, align 4, !dbg !6341
  %55 = load i32, i32* %ts, align 4, !dbg !6342
  %and95 = and i32 %55, 16777215, !dbg !6344
  %tobool96 = icmp ne i32 %and95, 0, !dbg !6344
  br i1 %tobool96, label %land.lhs.true97, label %if.end113, !dbg !6345

land.lhs.true97:                                  ; preds = %cond.end87
  %56 = load i32, i32* %try_data, align 4, !dbg !6346
  %tobool98 = icmp ne i32 %56, 0, !dbg !6346
  br i1 %tobool98, label %lor.lhs.false102, label %land.lhs.true99, !dbg !6347

land.lhs.true99:                                  ; preds = %land.lhs.true97
  %57 = load i32, i32* %ts, align 4, !dbg !6348
  %and100 = and i32 %57, 4095, !dbg !6349
  %tobool101 = icmp ne i32 %and100, 0, !dbg !6349
  br i1 %tobool101, label %if.then112, label %lor.lhs.false102, !dbg !6350

lor.lhs.false102:                                 ; preds = %land.lhs.true99, %land.lhs.true97
  %58 = load i32, i32* %try_control, align 4, !dbg !6351
  %tobool103 = icmp ne i32 %58, 0, !dbg !6351
  br i1 %tobool103, label %lor.lhs.false107, label %land.lhs.true104, !dbg !6352

land.lhs.true104:                                 ; preds = %lor.lhs.false102
  %59 = load i32, i32* %ts, align 4, !dbg !6353
  %and105 = and i32 %59, 16773120, !dbg !6354
  %tobool106 = icmp ne i32 %and105, 0, !dbg !6354
  br i1 %tobool106, label %if.then112, label %lor.lhs.false107, !dbg !6355

lor.lhs.false107:                                 ; preds = %land.lhs.true104, %lor.lhs.false102
  %60 = load i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 31), align 8, !dbg !6356
  %tobool108 = icmp ne i8 (%struct.rtx_def*)* %60, null, !dbg !6357
  br i1 %tobool108, label %land.lhs.true109, label %if.end113, !dbg !6358

land.lhs.true109:                                 ; preds = %lor.lhs.false107
  %61 = load i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 31), align 8, !dbg !6359
  %62 = load %struct.rtx_def*, %struct.rtx_def** %insn24, align 8, !dbg !6360
  %call110 = call zeroext i8 %61(%struct.rtx_def* %62), !dbg !6361
  %tobool111 = icmp ne i8 %call110, 0, !dbg !6361
  br i1 %tobool111, label %if.end113, label %if.then112, !dbg !6362

if.then112:                                       ; preds = %land.lhs.true109, %land.lhs.true104, %land.lhs.true99
  %63 = load %struct.rtx_def*, %struct.rtx_def** %insn24, align 8, !dbg !6363
  call void @change_queue_index(%struct.rtx_def* %63, i32 1), !dbg !6365
  store i32 1, i32* %retval, align 4, !dbg !6366
  br label %return, !dbg !6366

if.end113:                                        ; preds = %land.lhs.true109, %lor.lhs.false107, %cond.end87
  %64 = load i8*, i8** @ready_try, align 8, !dbg !6367
  %arrayidx114 = getelementptr inbounds i8, i8* %64, i64 0, !dbg !6367
  store i8 0, i8* %arrayidx114, align 1, !dbg !6368
  store i32 1, i32* %i, align 4, !dbg !6369
  br label %for.cond115, !dbg !6371

for.cond115:                                      ; preds = %for.inc154, %if.end113
  %65 = load i32, i32* %i, align 4, !dbg !6372
  %66 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !6374
  %n_ready116 = getelementptr inbounds %struct.ready_list, %struct.ready_list* %66, i32 0, i32 3, !dbg !6375
  %67 = load i32, i32* %n_ready116, align 8, !dbg !6375
  %cmp117 = icmp slt i32 %65, %67, !dbg !6376
  br i1 %cmp117, label %for.body119, label %for.end156, !dbg !6377

for.body119:                                      ; preds = %for.cond115
  %68 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !6378
  %69 = load i32, i32* %i, align 4, !dbg !6380
  %call120 = call %struct.rtx_def* @ready_element(%struct.ready_list* %68, i32 %69), !dbg !6381
  store %struct.rtx_def* %call120, %struct.rtx_def** %insn24, align 8, !dbg !6382
  %70 = load i32, i32* %try_data, align 4, !dbg !6383
  %tobool121 = icmp ne i32 %70, 0, !dbg !6383
  br i1 %tobool121, label %lor.rhs, label %land.lhs.true122, !dbg !6384

land.lhs.true122:                                 ; preds = %for.body119
  %71 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6385
  %tobool123 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %71, null, !dbg !6385
  br i1 %tobool123, label %cond.true124, label %cond.false126, !dbg !6385

cond.true124:                                     ; preds = %land.lhs.true122
  %72 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6385
  %base125 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %72, i32 0, i32 0, !dbg !6385
  br label %cond.end127, !dbg !6385

cond.false126:                                    ; preds = %land.lhs.true122
  br label %cond.end127, !dbg !6385

cond.end127:                                      ; preds = %cond.false126, %cond.true124
  %cond128 = phi %struct.VEC_haifa_insn_data_def_base* [ %base125, %cond.true124 ], [ null, %cond.false126 ], !dbg !6385
  %73 = load %struct.rtx_def*, %struct.rtx_def** %insn24, align 8, !dbg !6385
  %u129 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %73, i32 0, i32 1, !dbg !6385
  %fld130 = bitcast %union.u* %u129 to [1 x %union.rtunion_def]*, !dbg !6385
  %arrayidx131 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld130, i64 0, i64 0, !dbg !6385
  %rt_int132 = bitcast %union.rtunion_def* %arrayidx131 to i32*, !dbg !6385
  %74 = load i32, i32* %rt_int132, align 8, !dbg !6385
  %call133 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond128, i32 %74), !dbg !6385
  %todo_spec134 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call133, i32 0, i32 8, !dbg !6385
  %75 = load i32, i32* %todo_spec134, align 8, !dbg !6385
  %and135 = and i32 %75, 4095, !dbg !6386
  %tobool136 = icmp ne i32 %and135, 0, !dbg !6386
  br i1 %tobool136, label %lor.end, label %lor.rhs, !dbg !6387

lor.rhs:                                          ; preds = %cond.end127, %for.body119
  %76 = load i32, i32* %try_control, align 4, !dbg !6388
  %tobool137 = icmp ne i32 %76, 0, !dbg !6388
  br i1 %tobool137, label %land.end, label %land.rhs, !dbg !6389

land.rhs:                                         ; preds = %lor.rhs
  %77 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6390
  %tobool138 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %77, null, !dbg !6390
  br i1 %tobool138, label %cond.true139, label %cond.false141, !dbg !6390

cond.true139:                                     ; preds = %land.rhs
  %78 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6390
  %base140 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %78, i32 0, i32 0, !dbg !6390
  br label %cond.end142, !dbg !6390

cond.false141:                                    ; preds = %land.rhs
  br label %cond.end142, !dbg !6390

cond.end142:                                      ; preds = %cond.false141, %cond.true139
  %cond143 = phi %struct.VEC_haifa_insn_data_def_base* [ %base140, %cond.true139 ], [ null, %cond.false141 ], !dbg !6390
  %79 = load %struct.rtx_def*, %struct.rtx_def** %insn24, align 8, !dbg !6390
  %u144 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %79, i32 0, i32 1, !dbg !6390
  %fld145 = bitcast %union.u* %u144 to [1 x %union.rtunion_def]*, !dbg !6390
  %arrayidx146 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld145, i64 0, i64 0, !dbg !6390
  %rt_int147 = bitcast %union.rtunion_def* %arrayidx146 to i32*, !dbg !6390
  %80 = load i32, i32* %rt_int147, align 8, !dbg !6390
  %call148 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond143, i32 %80), !dbg !6390
  %todo_spec149 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call148, i32 0, i32 8, !dbg !6390
  %81 = load i32, i32* %todo_spec149, align 8, !dbg !6390
  %and150 = and i32 %81, 16773120, !dbg !6391
  %tobool151 = icmp ne i32 %and150, 0, !dbg !6389
  br label %land.end

land.end:                                         ; preds = %cond.end142, %lor.rhs
  %82 = phi i1 [ false, %lor.rhs ], [ %tobool151, %cond.end142 ], !dbg !6392
  br label %lor.end, !dbg !6387

lor.end:                                          ; preds = %land.end, %cond.end127
  %83 = phi i1 [ true, %cond.end127 ], [ %82, %land.end ]
  %lor.ext = zext i1 %83 to i32, !dbg !6387
  %conv152 = trunc i32 %lor.ext to i8, !dbg !6393
  %84 = load i8*, i8** @ready_try, align 8, !dbg !6394
  %85 = load i32, i32* %i, align 4, !dbg !6395
  %idxprom = sext i32 %85 to i64, !dbg !6394
  %arrayidx153 = getelementptr inbounds i8, i8* %84, i64 %idxprom, !dbg !6394
  store i8 %conv152, i8* %arrayidx153, align 1, !dbg !6396
  br label %for.inc154, !dbg !6397

for.inc154:                                       ; preds = %lor.end
  %86 = load i32, i32* %i, align 4, !dbg !6398
  %inc155 = add nsw i32 %86, 1, !dbg !6398
  store i32 %inc155, i32* %i, align 4, !dbg !6398
  br label %for.cond115, !dbg !6399, !llvm.loop !6400

for.end156:                                       ; preds = %for.cond115
  store i32 1, i32* %i, align 4, !dbg !6402
  br label %for.cond157, !dbg !6404

for.cond157:                                      ; preds = %for.inc185, %for.end156
  %87 = load i32, i32* %i, align 4, !dbg !6405
  %88 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !6407
  %n_ready158 = getelementptr inbounds %struct.ready_list, %struct.ready_list* %88, i32 0, i32 3, !dbg !6408
  %89 = load i32, i32* %n_ready158, align 8, !dbg !6408
  %cmp159 = icmp slt i32 %87, %89, !dbg !6409
  br i1 %cmp159, label %for.body161, label %for.end187, !dbg !6410

for.body161:                                      ; preds = %for.cond157
  %90 = load i8*, i8** @ready_try, align 8, !dbg !6411
  %91 = load i32, i32* %i, align 4, !dbg !6413
  %idxprom162 = sext i32 %91 to i64, !dbg !6411
  %arrayidx163 = getelementptr inbounds i8, i8* %90, i64 %idxprom162, !dbg !6411
  %92 = load i8, i8* %arrayidx163, align 1, !dbg !6411
  %tobool164 = icmp ne i8 %92, 0, !dbg !6411
  br i1 %tobool164, label %if.end184, label %if.then165, !dbg !6414

if.then165:                                       ; preds = %for.body161
  %93 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !6415
  %94 = load i32, i32* %i, align 4, !dbg !6417
  %call166 = call %struct.rtx_def* @ready_element(%struct.ready_list* %93, i32 %94), !dbg !6418
  store %struct.rtx_def* %call166, %struct.rtx_def** %insn24, align 8, !dbg !6419
  %95 = load %struct.rtx_def*, %struct.rtx_def** %insn24, align 8, !dbg !6420
  %u167 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %95, i32 0, i32 1, !dbg !6420
  %fld168 = bitcast %union.u* %u167 to [1 x %union.rtunion_def]*, !dbg !6420
  %arrayidx169 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld168, i64 0, i64 6, !dbg !6420
  %rt_int170 = bitcast %union.rtunion_def* %arrayidx169 to i32*, !dbg !6420
  %96 = load i32, i32* %rt_int170, align 8, !dbg !6420
  %cmp171 = icmp slt i32 %96, 0, !dbg !6421
  br i1 %cmp171, label %lor.end179, label %lor.rhs173, !dbg !6422

lor.rhs173:                                       ; preds = %if.then165
  %97 = load i32 (%struct.rtx_def*)*, i32 (%struct.rtx_def*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 18), align 8, !dbg !6423
  %tobool174 = icmp ne i32 (%struct.rtx_def*)* %97, null, !dbg !6424
  br i1 %tobool174, label %land.rhs175, label %land.end178, !dbg !6425

land.rhs175:                                      ; preds = %lor.rhs173
  %98 = load i32 (%struct.rtx_def*)*, i32 (%struct.rtx_def*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 18), align 8, !dbg !6426
  %99 = load %struct.rtx_def*, %struct.rtx_def** %insn24, align 8, !dbg !6427
  %call176 = call i32 %98(%struct.rtx_def* %99), !dbg !6428
  %tobool177 = icmp ne i32 %call176, 0, !dbg !6429
  %lnot = xor i1 %tobool177, true, !dbg !6429
  br label %land.end178

land.end178:                                      ; preds = %land.rhs175, %lor.rhs173
  %100 = phi i1 [ false, %lor.rhs173 ], [ %lnot, %land.rhs175 ], !dbg !6430
  br label %lor.end179, !dbg !6422

lor.end179:                                       ; preds = %land.end178, %if.then165
  %101 = phi i1 [ true, %if.then165 ], [ %100, %land.end178 ]
  %lor.ext180 = zext i1 %101 to i32, !dbg !6422
  %conv181 = trunc i32 %lor.ext180 to i8, !dbg !6431
  %102 = load i8*, i8** @ready_try, align 8, !dbg !6432
  %103 = load i32, i32* %i, align 4, !dbg !6433
  %idxprom182 = sext i32 %103 to i64, !dbg !6432
  %arrayidx183 = getelementptr inbounds i8, i8* %102, i64 %idxprom182, !dbg !6432
  store i8 %conv181, i8* %arrayidx183, align 1, !dbg !6434
  br label %if.end184, !dbg !6435

if.end184:                                        ; preds = %lor.end179, %for.body161
  br label %for.inc185, !dbg !6436

for.inc185:                                       ; preds = %if.end184
  %104 = load i32, i32* %i, align 4, !dbg !6437
  %inc186 = add nsw i32 %104, 1, !dbg !6437
  store i32 %inc186, i32* %i, align 4, !dbg !6437
  br label %for.cond157, !dbg !6438, !llvm.loop !6439

for.end187:                                       ; preds = %for.cond157
  %105 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !6441
  %106 = load i8*, i8** @curr_state, align 8, !dbg !6443
  %call188 = call i32 @max_issue(%struct.ready_list* %105, i32 1, i8* %106, i32* %index), !dbg !6444
  %cmp189 = icmp eq i32 %call188, 0, !dbg !6445
  br i1 %cmp189, label %if.then191, label %if.else199, !dbg !6446

if.then191:                                       ; preds = %for.end187
  %107 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !6447
  %call192 = call %struct.rtx_def* @ready_remove_first(%struct.ready_list* %107), !dbg !6449
  %108 = load %struct.rtx_def**, %struct.rtx_def*** %insn_ptr.addr, align 8, !dbg !6450
  store %struct.rtx_def* %call192, %struct.rtx_def** %108, align 8, !dbg !6451
  %109 = load i32, i32* @sched_verbose, align 4, !dbg !6452
  %cmp193 = icmp sge i32 %109, 4, !dbg !6454
  br i1 %cmp193, label %if.then195, label %if.end198, !dbg !6455

if.then195:                                       ; preds = %if.then191
  %110 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !6456
  %111 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !6457
  %print_insn = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %111, i32 0, i32 5, !dbg !6458
  %112 = load i8* (%struct.rtx_def*, i32)*, i8* (%struct.rtx_def*, i32)** %print_insn, align 8, !dbg !6458
  %113 = load %struct.rtx_def**, %struct.rtx_def*** %insn_ptr.addr, align 8, !dbg !6459
  %114 = load %struct.rtx_def*, %struct.rtx_def** %113, align 8, !dbg !6460
  %call196 = call i8* %112(%struct.rtx_def* %114, i32 0), !dbg !6461
  %call197 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %110, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.44, i64 0, i64 0), i8* %call196), !dbg !6462
  br label %if.end198, !dbg !6462

if.end198:                                        ; preds = %if.then195, %if.then191
  store i32 0, i32* %retval, align 4, !dbg !6463
  br label %return, !dbg !6463

if.else199:                                       ; preds = %for.end187
  %115 = load i32, i32* @sched_verbose, align 4, !dbg !6464
  %cmp200 = icmp sge i32 %115, 4, !dbg !6467
  br i1 %cmp200, label %if.then202, label %if.end207, !dbg !6468

if.then202:                                       ; preds = %if.else199
  %116 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !6469
  %117 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !6470
  %print_insn203 = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %117, i32 0, i32 5, !dbg !6471
  %118 = load i8* (%struct.rtx_def*, i32)*, i8* (%struct.rtx_def*, i32)** %print_insn203, align 8, !dbg !6471
  %119 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !6472
  %120 = load i32, i32* %index, align 4, !dbg !6473
  %call204 = call %struct.rtx_def* @ready_element(%struct.ready_list* %119, i32 %120), !dbg !6474
  %call205 = call i8* %118(%struct.rtx_def* %call204, i32 0), !dbg !6475
  %call206 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %116, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.45, i64 0, i64 0), i8* %call205), !dbg !6476
  br label %if.end207, !dbg !6476

if.end207:                                        ; preds = %if.then202, %if.else199
  %121 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !6477
  %122 = load i32, i32* %index, align 4, !dbg !6478
  %call208 = call %struct.rtx_def* @ready_remove(%struct.ready_list* %121, i32 %122), !dbg !6479
  %123 = load %struct.rtx_def**, %struct.rtx_def*** %insn_ptr.addr, align 8, !dbg !6480
  store %struct.rtx_def* %call208, %struct.rtx_def** %123, align 8, !dbg !6481
  store i32 0, i32* %retval, align 4, !dbg !6482
  br label %return, !dbg !6482

return:                                           ; preds = %if.end207, %if.end198, %if.then112, %if.then32, %if.then22, %if.end, %if.then6
  %124 = load i32, i32* %retval, align 4, !dbg !6483
  ret i32 %124, !dbg !6483
}

; Function Attrs: noinline nounwind uwtable
define internal void @ready_add(%struct.ready_list* %ready, %struct.rtx_def* %insn, i8 zeroext %first_p) #0 !dbg !6484 {
entry:
  %ready.addr = alloca %struct.ready_list*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %first_p.addr = alloca i8, align 1
  store %struct.ready_list* %ready, %struct.ready_list** %ready.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ready_list** %ready.addr, metadata !6487, metadata !DIExpression()), !dbg !6488
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !6489, metadata !DIExpression()), !dbg !6490
  store i8 %first_p, i8* %first_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %first_p.addr, metadata !6491, metadata !DIExpression()), !dbg !6492
  %0 = load i8, i8* %first_p.addr, align 1, !dbg !6493
  %tobool = icmp ne i8 %0, 0, !dbg !6493
  br i1 %tobool, label %if.else, label %if.then, !dbg !6495

if.then:                                          ; preds = %entry
  %1 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !6496
  %first = getelementptr inbounds %struct.ready_list, %struct.ready_list* %1, i32 0, i32 2, !dbg !6499
  %2 = load i32, i32* %first, align 4, !dbg !6499
  %3 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !6500
  %n_ready = getelementptr inbounds %struct.ready_list, %struct.ready_list* %3, i32 0, i32 3, !dbg !6501
  %4 = load i32, i32* %n_ready, align 8, !dbg !6501
  %cmp = icmp eq i32 %2, %4, !dbg !6502
  br i1 %cmp, label %if.then1, label %if.end, !dbg !6503

if.then1:                                         ; preds = %if.then
  %5 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !6504
  %vec = getelementptr inbounds %struct.ready_list, %struct.ready_list* %5, i32 0, i32 0, !dbg !6506
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %vec, align 8, !dbg !6506
  %7 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !6507
  %veclen = getelementptr inbounds %struct.ready_list, %struct.ready_list* %7, i32 0, i32 1, !dbg !6508
  %8 = load i32, i32* %veclen, align 8, !dbg !6508
  %idx.ext = sext i32 %8 to i64, !dbg !6509
  %add.ptr = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 %idx.ext, !dbg !6509
  %9 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !6510
  %n_ready2 = getelementptr inbounds %struct.ready_list, %struct.ready_list* %9, i32 0, i32 3, !dbg !6511
  %10 = load i32, i32* %n_ready2, align 8, !dbg !6511
  %idx.ext3 = sext i32 %10 to i64, !dbg !6512
  %idx.neg = sub i64 0, %idx.ext3, !dbg !6512
  %add.ptr4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %add.ptr, i64 %idx.neg, !dbg !6512
  %11 = bitcast %struct.rtx_def** %add.ptr4 to i8*, !dbg !6513
  %12 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !6514
  %call = call %struct.rtx_def** @ready_lastpos(%struct.ready_list* %12), !dbg !6515
  %13 = bitcast %struct.rtx_def** %call to i8*, !dbg !6513
  %14 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !6516
  %n_ready5 = getelementptr inbounds %struct.ready_list, %struct.ready_list* %14, i32 0, i32 3, !dbg !6517
  %15 = load i32, i32* %n_ready5, align 8, !dbg !6517
  %conv = sext i32 %15 to i64, !dbg !6516
  %mul = mul i64 %conv, 8, !dbg !6518
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %11, i8* align 8 %13, i64 %mul, i1 false), !dbg !6513
  %16 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !6519
  %veclen6 = getelementptr inbounds %struct.ready_list, %struct.ready_list* %16, i32 0, i32 1, !dbg !6520
  %17 = load i32, i32* %veclen6, align 8, !dbg !6520
  %sub = sub nsw i32 %17, 1, !dbg !6521
  %18 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !6522
  %first7 = getelementptr inbounds %struct.ready_list, %struct.ready_list* %18, i32 0, i32 2, !dbg !6523
  store i32 %sub, i32* %first7, align 4, !dbg !6524
  br label %if.end, !dbg !6525

if.end:                                           ; preds = %if.then1, %if.then
  %19 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6526
  %20 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !6527
  %vec8 = getelementptr inbounds %struct.ready_list, %struct.ready_list* %20, i32 0, i32 0, !dbg !6528
  %21 = load %struct.rtx_def**, %struct.rtx_def*** %vec8, align 8, !dbg !6528
  %22 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !6529
  %first9 = getelementptr inbounds %struct.ready_list, %struct.ready_list* %22, i32 0, i32 2, !dbg !6530
  %23 = load i32, i32* %first9, align 4, !dbg !6530
  %24 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !6531
  %n_ready10 = getelementptr inbounds %struct.ready_list, %struct.ready_list* %24, i32 0, i32 3, !dbg !6532
  %25 = load i32, i32* %n_ready10, align 8, !dbg !6532
  %sub11 = sub nsw i32 %23, %25, !dbg !6533
  %idxprom = sext i32 %sub11 to i64, !dbg !6527
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %21, i64 %idxprom, !dbg !6527
  store %struct.rtx_def* %19, %struct.rtx_def** %arrayidx, align 8, !dbg !6534
  br label %if.end43, !dbg !6535

if.else:                                          ; preds = %entry
  %26 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !6536
  %first12 = getelementptr inbounds %struct.ready_list, %struct.ready_list* %26, i32 0, i32 2, !dbg !6539
  %27 = load i32, i32* %first12, align 4, !dbg !6539
  %28 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !6540
  %veclen13 = getelementptr inbounds %struct.ready_list, %struct.ready_list* %28, i32 0, i32 1, !dbg !6541
  %29 = load i32, i32* %veclen13, align 8, !dbg !6541
  %sub14 = sub nsw i32 %29, 1, !dbg !6542
  %cmp15 = icmp eq i32 %27, %sub14, !dbg !6543
  br i1 %cmp15, label %if.then17, label %if.end38, !dbg !6544

if.then17:                                        ; preds = %if.else
  %30 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !6545
  %n_ready18 = getelementptr inbounds %struct.ready_list, %struct.ready_list* %30, i32 0, i32 3, !dbg !6548
  %31 = load i32, i32* %n_ready18, align 8, !dbg !6548
  %tobool19 = icmp ne i32 %31, 0, !dbg !6545
  br i1 %tobool19, label %if.then20, label %if.end34, !dbg !6549

if.then20:                                        ; preds = %if.then17
  %32 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !6550
  %vec21 = getelementptr inbounds %struct.ready_list, %struct.ready_list* %32, i32 0, i32 0, !dbg !6551
  %33 = load %struct.rtx_def**, %struct.rtx_def*** %vec21, align 8, !dbg !6551
  %34 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !6552
  %veclen22 = getelementptr inbounds %struct.ready_list, %struct.ready_list* %34, i32 0, i32 1, !dbg !6553
  %35 = load i32, i32* %veclen22, align 8, !dbg !6553
  %idx.ext23 = sext i32 %35 to i64, !dbg !6554
  %add.ptr24 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %33, i64 %idx.ext23, !dbg !6554
  %36 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !6555
  %n_ready25 = getelementptr inbounds %struct.ready_list, %struct.ready_list* %36, i32 0, i32 3, !dbg !6556
  %37 = load i32, i32* %n_ready25, align 8, !dbg !6556
  %idx.ext26 = sext i32 %37 to i64, !dbg !6557
  %idx.neg27 = sub i64 0, %idx.ext26, !dbg !6557
  %add.ptr28 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %add.ptr24, i64 %idx.neg27, !dbg !6557
  %add.ptr29 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %add.ptr28, i64 -1, !dbg !6558
  %38 = bitcast %struct.rtx_def** %add.ptr29 to i8*, !dbg !6559
  %39 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !6560
  %call30 = call %struct.rtx_def** @ready_lastpos(%struct.ready_list* %39), !dbg !6561
  %40 = bitcast %struct.rtx_def** %call30 to i8*, !dbg !6559
  %41 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !6562
  %n_ready31 = getelementptr inbounds %struct.ready_list, %struct.ready_list* %41, i32 0, i32 3, !dbg !6563
  %42 = load i32, i32* %n_ready31, align 8, !dbg !6563
  %conv32 = sext i32 %42 to i64, !dbg !6562
  %mul33 = mul i64 %conv32, 8, !dbg !6564
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %38, i8* align 8 %40, i64 %mul33, i1 false), !dbg !6559
  br label %if.end34, !dbg !6559

if.end34:                                         ; preds = %if.then20, %if.then17
  %43 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !6565
  %veclen35 = getelementptr inbounds %struct.ready_list, %struct.ready_list* %43, i32 0, i32 1, !dbg !6566
  %44 = load i32, i32* %veclen35, align 8, !dbg !6566
  %sub36 = sub nsw i32 %44, 2, !dbg !6567
  %45 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !6568
  %first37 = getelementptr inbounds %struct.ready_list, %struct.ready_list* %45, i32 0, i32 2, !dbg !6569
  store i32 %sub36, i32* %first37, align 4, !dbg !6570
  br label %if.end38, !dbg !6571

if.end38:                                         ; preds = %if.end34, %if.else
  %46 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6572
  %47 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !6573
  %vec39 = getelementptr inbounds %struct.ready_list, %struct.ready_list* %47, i32 0, i32 0, !dbg !6574
  %48 = load %struct.rtx_def**, %struct.rtx_def*** %vec39, align 8, !dbg !6574
  %49 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !6575
  %first40 = getelementptr inbounds %struct.ready_list, %struct.ready_list* %49, i32 0, i32 2, !dbg !6576
  %50 = load i32, i32* %first40, align 4, !dbg !6577
  %inc = add nsw i32 %50, 1, !dbg !6577
  store i32 %inc, i32* %first40, align 4, !dbg !6577
  %idxprom41 = sext i32 %inc to i64, !dbg !6573
  %arrayidx42 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %48, i64 %idxprom41, !dbg !6573
  store %struct.rtx_def* %46, %struct.rtx_def** %arrayidx42, align 8, !dbg !6578
  br label %if.end43

if.end43:                                         ; preds = %if.end38, %if.end
  %51 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !6579
  %n_ready44 = getelementptr inbounds %struct.ready_list, %struct.ready_list* %51, i32 0, i32 3, !dbg !6580
  %52 = load i32, i32* %n_ready44, align 8, !dbg !6581
  %inc45 = add nsw i32 %52, 1, !dbg !6581
  store i32 %inc45, i32* %n_ready44, align 8, !dbg !6581
  %53 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6582
  %54 = bitcast %struct.rtx_def* %53 to i32*, !dbg !6582
  %bf.load = load i32, i32* %54, align 8, !dbg !6582
  %bf.clear = and i32 %bf.load, 65535, !dbg !6582
  %cmp46 = icmp eq i32 %bf.clear, 7, !dbg !6582
  br i1 %cmp46, label %if.then48, label %if.end50, !dbg !6584

if.then48:                                        ; preds = %if.end43
  %55 = load %struct.ready_list*, %struct.ready_list** %ready.addr, align 8, !dbg !6585
  %n_debug = getelementptr inbounds %struct.ready_list, %struct.ready_list* %55, i32 0, i32 4, !dbg !6586
  %56 = load i32, i32* %n_debug, align 4, !dbg !6587
  %inc49 = add nsw i32 %56, 1, !dbg !6587
  store i32 %inc49, i32* %n_debug, align 4, !dbg !6587
  br label %if.end50, !dbg !6585

if.end50:                                         ; preds = %if.then48, %if.end43
  %57 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6588
  %tobool51 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %57, null, !dbg !6588
  br i1 %tobool51, label %cond.true, label %cond.false, !dbg !6588

cond.true:                                        ; preds = %if.end50
  %58 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6588
  %base = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %58, i32 0, i32 0, !dbg !6588
  br label %cond.end, !dbg !6588

cond.false:                                       ; preds = %if.end50
  br label %cond.end, !dbg !6588

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_haifa_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6588
  %59 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6588
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %59, i32 0, i32 1, !dbg !6588
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6588
  %arrayidx52 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !6588
  %rt_int = bitcast %union.rtunion_def* %arrayidx52 to i32*, !dbg !6588
  %60 = load i32, i32* %rt_int, align 8, !dbg !6588
  %call53 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond, i32 %60), !dbg !6588
  %queue_index = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call53, i32 0, i32 4, !dbg !6588
  %61 = load i32, i32* %queue_index, align 8, !dbg !6588
  %cmp54 = icmp ne i32 %61, -1, !dbg !6588
  br i1 %cmp54, label %cond.false57, label %cond.true56, !dbg !6588

cond.true56:                                      ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 1418, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !6588
  br label %cond.end58, !dbg !6588

cond.false57:                                     ; preds = %cond.end
  br label %cond.end58, !dbg !6588

cond.end58:                                       ; preds = %cond.false57, %cond.true56
  %cond59 = phi i32 [ 0, %cond.true56 ], [ 0, %cond.false57 ], !dbg !6588
  %62 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6589
  %tobool60 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %62, null, !dbg !6589
  br i1 %tobool60, label %cond.true61, label %cond.false63, !dbg !6589

cond.true61:                                      ; preds = %cond.end58
  %63 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6589
  %base62 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %63, i32 0, i32 0, !dbg !6589
  br label %cond.end64, !dbg !6589

cond.false63:                                     ; preds = %cond.end58
  br label %cond.end64, !dbg !6589

cond.end64:                                       ; preds = %cond.false63, %cond.true61
  %cond65 = phi %struct.VEC_haifa_insn_data_def_base* [ %base62, %cond.true61 ], [ null, %cond.false63 ], !dbg !6589
  %64 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6589
  %u66 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %64, i32 0, i32 1, !dbg !6589
  %fld67 = bitcast %union.u* %u66 to [1 x %union.rtunion_def]*, !dbg !6589
  %arrayidx68 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld67, i64 0, i64 0, !dbg !6589
  %rt_int69 = bitcast %union.rtunion_def* %arrayidx68 to i32*, !dbg !6589
  %65 = load i32, i32* %rt_int69, align 8, !dbg !6589
  %call70 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond65, i32 %65), !dbg !6589
  %queue_index71 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call70, i32 0, i32 4, !dbg !6589
  store i32 -1, i32* %queue_index71, align 8, !dbg !6590
  ret void, !dbg !6591
}

declare dso_local i32 @asm_noperands(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @generate_recovery_code(%struct.rtx_def* %insn) #0 !dbg !6592 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !6593, metadata !DIExpression()), !dbg !6594
  %0 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6595
  %tobool = icmp ne %struct.VEC_haifa_insn_data_def_heap* %0, null, !dbg !6595
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6595

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6595
  %base = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %1, i32 0, i32 0, !dbg !6595
  br label %cond.end, !dbg !6595

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6595

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_haifa_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6595
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6595
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !6595
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6595
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !6595
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !6595
  %3 = load i32, i32* %rt_int, align 8, !dbg !6595
  %call = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond, i32 %3), !dbg !6595
  %todo_spec = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call, i32 0, i32 8, !dbg !6595
  %4 = load i32, i32* %todo_spec, align 8, !dbg !6595
  %and = and i32 %4, 258111, !dbg !6597
  %tobool1 = icmp ne i32 %and, 0, !dbg !6597
  br i1 %tobool1, label %if.then, label %if.end, !dbg !6598

if.then:                                          ; preds = %cond.end
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6599
  call void @begin_speculative_block(%struct.rtx_def* %5), !dbg !6600
  br label %if.end, !dbg !6600

if.end:                                           ; preds = %if.then, %cond.end
  %6 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6601
  %tobool2 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %6, null, !dbg !6601
  br i1 %tobool2, label %cond.true3, label %cond.false5, !dbg !6601

cond.true3:                                       ; preds = %if.end
  %7 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6601
  %base4 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %7, i32 0, i32 0, !dbg !6601
  br label %cond.end6, !dbg !6601

cond.false5:                                      ; preds = %if.end
  br label %cond.end6, !dbg !6601

cond.end6:                                        ; preds = %cond.false5, %cond.true3
  %cond7 = phi %struct.VEC_haifa_insn_data_def_base* [ %base4, %cond.true3 ], [ null, %cond.false5 ], !dbg !6601
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6601
  %u8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !6601
  %fld9 = bitcast %union.u* %u8 to [1 x %union.rtunion_def]*, !dbg !6601
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i64 0, i64 0, !dbg !6601
  %rt_int11 = bitcast %union.rtunion_def* %arrayidx10 to i32*, !dbg !6601
  %9 = load i32, i32* %rt_int11, align 8, !dbg !6601
  %call12 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond7, i32 %9), !dbg !6601
  %todo_spec13 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call12, i32 0, i32 8, !dbg !6601
  %10 = load i32, i32* %todo_spec13, align 8, !dbg !6601
  %and14 = and i32 %10, 16519104, !dbg !6603
  %tobool15 = icmp ne i32 %and14, 0, !dbg !6603
  br i1 %tobool15, label %if.then16, label %if.end17, !dbg !6604

if.then16:                                        ; preds = %cond.end6
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6605
  call void @add_to_speculative_block(%struct.rtx_def* %11), !dbg !6606
  br label %if.end17, !dbg !6606

if.end17:                                         ; preds = %if.then16, %cond.end6
  ret void, !dbg !6607
}

declare dso_local void @free_INSN_LIST_list(%struct.rtx_def**) #2

; Function Attrs: noinline nounwind uwtable
define internal void @fix_inter_tick(%struct.rtx_def* %head, %struct.rtx_def* %tail) #0 !dbg !6608 {
entry:
  %head.addr = alloca %struct.rtx_def*, align 8
  %tail.addr = alloca %struct.rtx_def*, align 8
  %processed = alloca %struct.bitmap_head_def, align 8
  %next_clock = alloca i32, align 4
  %tick = alloca i32, align 4
  %sd_it = alloca %struct._sd_iterator, align 8
  %dep = alloca %struct._dep*, align 8
  %tmp = alloca %struct._sd_iterator, align 8
  %next = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %head, %struct.rtx_def** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %head.addr, metadata !6609, metadata !DIExpression()), !dbg !6610
  store %struct.rtx_def* %tail, %struct.rtx_def** %tail.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tail.addr, metadata !6611, metadata !DIExpression()), !dbg !6612
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def* %processed, metadata !6613, metadata !DIExpression()), !dbg !6615
  call void @llvm.dbg.declare(metadata i32* %next_clock, metadata !6616, metadata !DIExpression()), !dbg !6617
  %0 = load i32, i32* @clock_var, align 4, !dbg !6618
  %add = add nsw i32 %0, 1, !dbg !6619
  store i32 %add, i32* %next_clock, align 4, !dbg !6617
  call void @bitmap_initialize_stat(%struct.bitmap_head_def* %processed, %struct.bitmap_obstack* null), !dbg !6620
  %1 = load %struct.rtx_def*, %struct.rtx_def** %tail.addr, align 8, !dbg !6621
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !6621
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6621
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !6621
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6621
  %2 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6621
  store %struct.rtx_def* %2, %struct.rtx_def** %tail.addr, align 8, !dbg !6623
  br label %for.cond, !dbg !6624

for.cond:                                         ; preds = %for.inc169, %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !6625
  %4 = load %struct.rtx_def*, %struct.rtx_def** %tail.addr, align 8, !dbg !6627
  %cmp = icmp ne %struct.rtx_def* %3, %4, !dbg !6628
  br i1 %cmp, label %for.body, label %for.end174, !dbg !6629

for.body:                                         ; preds = %for.cond
  %5 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !6630
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !6630
  %bf.load = load i32, i32* %6, align 8, !dbg !6630
  %bf.clear = and i32 %bf.load, 65535, !dbg !6630
  %cmp1 = icmp eq i32 %bf.clear, 8, !dbg !6630
  br i1 %cmp1, label %if.then, label %lor.lhs.false, !dbg !6630

lor.lhs.false:                                    ; preds = %for.body
  %7 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !6630
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !6630
  %bf.load2 = load i32, i32* %8, align 8, !dbg !6630
  %bf.clear3 = and i32 %bf.load2, 65535, !dbg !6630
  %cmp4 = icmp eq i32 %bf.clear3, 7, !dbg !6630
  br i1 %cmp4, label %if.then, label %lor.lhs.false5, !dbg !6630

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %9 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !6630
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !6630
  %bf.load6 = load i32, i32* %10, align 8, !dbg !6630
  %bf.clear7 = and i32 %bf.load6, 65535, !dbg !6630
  %cmp8 = icmp eq i32 %bf.clear7, 9, !dbg !6630
  br i1 %cmp8, label %if.then, label %lor.lhs.false9, !dbg !6630

lor.lhs.false9:                                   ; preds = %lor.lhs.false5
  %11 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !6630
  %12 = bitcast %struct.rtx_def* %11 to i32*, !dbg !6630
  %bf.load10 = load i32, i32* %12, align 8, !dbg !6630
  %bf.clear11 = and i32 %bf.load10, 65535, !dbg !6630
  %cmp12 = icmp eq i32 %bf.clear11, 10, !dbg !6630
  br i1 %cmp12, label %if.then, label %if.end168, !dbg !6633

if.then:                                          ; preds = %lor.lhs.false9, %lor.lhs.false5, %lor.lhs.false, %for.body
  call void @llvm.dbg.declare(metadata i32* %tick, metadata !6634, metadata !DIExpression()), !dbg !6636
  call void @llvm.dbg.declare(metadata %struct._sd_iterator* %sd_it, metadata !6637, metadata !DIExpression()), !dbg !6638
  call void @llvm.dbg.declare(metadata %struct._dep** %dep, metadata !6639, metadata !DIExpression()), !dbg !6640
  %13 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6641
  %tobool = icmp ne %struct.VEC_haifa_insn_data_def_heap* %13, null, !dbg !6641
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6641

cond.true:                                        ; preds = %if.then
  %14 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6641
  %base = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %14, i32 0, i32 0, !dbg !6641
  br label %cond.end, !dbg !6641

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !6641

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_haifa_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6641
  %15 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !6641
  %u13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !6641
  %fld14 = bitcast %union.u* %u13 to [1 x %union.rtunion_def]*, !dbg !6641
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i64 0, i64 0, !dbg !6641
  %rt_int = bitcast %union.rtunion_def* %arrayidx15 to i32*, !dbg !6641
  %16 = load i32, i32* %rt_int, align 8, !dbg !6641
  %call = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond, i32 %16), !dbg !6641
  %tick16 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call, i32 0, i32 2, !dbg !6641
  %17 = load i32, i32* %tick16, align 8, !dbg !6641
  store i32 %17, i32* %tick, align 4, !dbg !6642
  %18 = load i32, i32* %tick, align 4, !dbg !6643
  %19 = load i32, i32* @max_insn_queue_index, align 4, !dbg !6643
  %sub = sub nsw i32 0, %19, !dbg !6643
  %cmp17 = icmp sge i32 %18, %sub, !dbg !6643
  br i1 %cmp17, label %cond.false19, label %cond.true18, !dbg !6643

cond.true18:                                      ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 3605, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !6643
  br label %cond.end20, !dbg !6643

cond.false19:                                     ; preds = %cond.end
  br label %cond.end20, !dbg !6643

cond.end20:                                       ; preds = %cond.false19, %cond.true18
  %cond21 = phi i32 [ 0, %cond.true18 ], [ 0, %cond.false19 ], !dbg !6643
  %20 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6644
  %tobool22 = icmp ne %struct.VEC_int_heap* %20, null, !dbg !6644
  br i1 %tobool22, label %cond.true23, label %cond.false25, !dbg !6644

cond.true23:                                      ; preds = %cond.end20
  %21 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6644
  %base24 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %21, i32 0, i32 0, !dbg !6644
  br label %cond.end26, !dbg !6644

cond.false25:                                     ; preds = %cond.end20
  br label %cond.end26, !dbg !6644

cond.end26:                                       ; preds = %cond.false25, %cond.true23
  %cond27 = phi %struct.VEC_int_base* [ %base24, %cond.true23 ], [ null, %cond.false25 ], !dbg !6644
  %22 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !6644
  %u28 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !6644
  %fld29 = bitcast %union.u* %u28 to [1 x %union.rtunion_def]*, !dbg !6644
  %arrayidx30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld29, i64 0, i64 0, !dbg !6644
  %rt_int31 = bitcast %union.rtunion_def* %arrayidx30 to i32*, !dbg !6644
  %23 = load i32, i32* %rt_int31, align 8, !dbg !6644
  %call32 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond27, i32 %23), !dbg !6644
  %call33 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %processed, i32 %call32), !dbg !6646
  %tobool34 = icmp ne i32 %call33, 0, !dbg !6646
  br i1 %tobool34, label %if.end65, label %if.then35, !dbg !6647

if.then35:                                        ; preds = %cond.end26
  %24 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6648
  %tobool36 = icmp ne %struct.VEC_int_heap* %24, null, !dbg !6648
  br i1 %tobool36, label %cond.true37, label %cond.false39, !dbg !6648

cond.true37:                                      ; preds = %if.then35
  %25 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6648
  %base38 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %25, i32 0, i32 0, !dbg !6648
  br label %cond.end40, !dbg !6648

cond.false39:                                     ; preds = %if.then35
  br label %cond.end40, !dbg !6648

cond.end40:                                       ; preds = %cond.false39, %cond.true37
  %cond41 = phi %struct.VEC_int_base* [ %base38, %cond.true37 ], [ null, %cond.false39 ], !dbg !6648
  %26 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !6648
  %u42 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1, !dbg !6648
  %fld43 = bitcast %union.u* %u42 to [1 x %union.rtunion_def]*, !dbg !6648
  %arrayidx44 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld43, i64 0, i64 0, !dbg !6648
  %rt_int45 = bitcast %union.rtunion_def* %arrayidx44 to i32*, !dbg !6648
  %27 = load i32, i32* %rt_int45, align 8, !dbg !6648
  %call46 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond41, i32 %27), !dbg !6648
  %call47 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %processed, i32 %call46), !dbg !6650
  %28 = load i32, i32* %next_clock, align 4, !dbg !6651
  %29 = load i32, i32* %tick, align 4, !dbg !6652
  %sub48 = sub nsw i32 %29, %28, !dbg !6652
  store i32 %sub48, i32* %tick, align 4, !dbg !6652
  %30 = load i32, i32* %tick, align 4, !dbg !6653
  %31 = load i32, i32* @max_insn_queue_index, align 4, !dbg !6655
  %sub49 = sub nsw i32 0, %31, !dbg !6655
  %cmp50 = icmp slt i32 %30, %sub49, !dbg !6656
  br i1 %cmp50, label %if.then51, label %if.end, !dbg !6657

if.then51:                                        ; preds = %cond.end40
  %32 = load i32, i32* @max_insn_queue_index, align 4, !dbg !6658
  %sub52 = sub nsw i32 0, %32, !dbg !6658
  store i32 %sub52, i32* %tick, align 4, !dbg !6659
  br label %if.end, !dbg !6660

if.end:                                           ; preds = %if.then51, %cond.end40
  %33 = load i32, i32* %tick, align 4, !dbg !6661
  %34 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6662
  %tobool53 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %34, null, !dbg !6662
  br i1 %tobool53, label %cond.true54, label %cond.false56, !dbg !6662

cond.true54:                                      ; preds = %if.end
  %35 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6662
  %base55 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %35, i32 0, i32 0, !dbg !6662
  br label %cond.end57, !dbg !6662

cond.false56:                                     ; preds = %if.end
  br label %cond.end57, !dbg !6662

cond.end57:                                       ; preds = %cond.false56, %cond.true54
  %cond58 = phi %struct.VEC_haifa_insn_data_def_base* [ %base55, %cond.true54 ], [ null, %cond.false56 ], !dbg !6662
  %36 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !6662
  %u59 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1, !dbg !6662
  %fld60 = bitcast %union.u* %u59 to [1 x %union.rtunion_def]*, !dbg !6662
  %arrayidx61 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld60, i64 0, i64 0, !dbg !6662
  %rt_int62 = bitcast %union.rtunion_def* %arrayidx61 to i32*, !dbg !6662
  %37 = load i32, i32* %rt_int62, align 8, !dbg !6662
  %call63 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond58, i32 %37), !dbg !6662
  %tick64 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call63, i32 0, i32 2, !dbg !6662
  store i32 %33, i32* %tick64, align 8, !dbg !6663
  br label %if.end65, !dbg !6664

if.end65:                                         ; preds = %cond.end57, %cond.end26
  %38 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !6665
  call void @sd_iterator_start(%struct._sd_iterator* sret %tmp, %struct.rtx_def* %38, i32 16), !dbg !6665
  %39 = bitcast %struct._sd_iterator* %sd_it to i8*, !dbg !6665
  %40 = bitcast %struct._sd_iterator* %tmp to i8*, !dbg !6665
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %39, i8* align 8 %40, i64 32, i1 false), !dbg !6665
  br label %for.cond66, !dbg !6665

for.cond66:                                       ; preds = %for.inc, %if.end65
  %call67 = call zeroext i8 @sd_iterator_cond(%struct._sd_iterator* %sd_it, %struct._dep** %dep), !dbg !6667
  %tobool68 = icmp ne i8 %call67, 0, !dbg !6665
  br i1 %tobool68, label %for.body69, label %for.end, !dbg !6665

for.body69:                                       ; preds = %for.cond66
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %next, metadata !6669, metadata !DIExpression()), !dbg !6671
  %41 = load %struct._dep*, %struct._dep** %dep, align 8, !dbg !6672
  %con = getelementptr inbounds %struct._dep, %struct._dep* %41, i32 0, i32 1, !dbg !6672
  %42 = load %struct.rtx_def*, %struct.rtx_def** %con, align 8, !dbg !6672
  store %struct.rtx_def* %42, %struct.rtx_def** %next, align 8, !dbg !6673
  %43 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6674
  %tobool70 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %43, null, !dbg !6674
  br i1 %tobool70, label %cond.true71, label %cond.false73, !dbg !6674

cond.true71:                                      ; preds = %for.body69
  %44 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6674
  %base72 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %44, i32 0, i32 0, !dbg !6674
  br label %cond.end74, !dbg !6674

cond.false73:                                     ; preds = %for.body69
  br label %cond.end74, !dbg !6674

cond.end74:                                       ; preds = %cond.false73, %cond.true71
  %cond75 = phi %struct.VEC_haifa_insn_data_def_base* [ %base72, %cond.true71 ], [ null, %cond.false73 ], !dbg !6674
  %45 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !6674
  %u76 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1, !dbg !6674
  %fld77 = bitcast %union.u* %u76 to [1 x %union.rtunion_def]*, !dbg !6674
  %arrayidx78 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld77, i64 0, i64 0, !dbg !6674
  %rt_int79 = bitcast %union.rtunion_def* %arrayidx78 to i32*, !dbg !6674
  %46 = load i32, i32* %rt_int79, align 8, !dbg !6674
  %call80 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond75, i32 %46), !dbg !6674
  %tick81 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call80, i32 0, i32 2, !dbg !6674
  %47 = load i32, i32* %tick81, align 8, !dbg !6674
  store i32 %47, i32* %tick, align 4, !dbg !6675
  %48 = load i32, i32* %tick, align 4, !dbg !6676
  %49 = load i32, i32* @max_insn_queue_index, align 4, !dbg !6678
  %add82 = add nsw i32 %49, 1, !dbg !6678
  %sub83 = sub nsw i32 0, %add82, !dbg !6678
  %cmp84 = icmp ne i32 %48, %sub83, !dbg !6679
  br i1 %cmp84, label %land.lhs.true, label %if.end167, !dbg !6680

land.lhs.true:                                    ; preds = %cond.end74
  %50 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6681
  %tobool85 = icmp ne %struct.VEC_int_heap* %50, null, !dbg !6681
  br i1 %tobool85, label %cond.true86, label %cond.false88, !dbg !6681

cond.true86:                                      ; preds = %land.lhs.true
  %51 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6681
  %base87 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %51, i32 0, i32 0, !dbg !6681
  br label %cond.end89, !dbg !6681

cond.false88:                                     ; preds = %land.lhs.true
  br label %cond.end89, !dbg !6681

cond.end89:                                       ; preds = %cond.false88, %cond.true86
  %cond90 = phi %struct.VEC_int_base* [ %base87, %cond.true86 ], [ null, %cond.false88 ], !dbg !6681
  %52 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !6681
  %u91 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %52, i32 0, i32 1, !dbg !6681
  %fld92 = bitcast %union.u* %u91 to [1 x %union.rtunion_def]*, !dbg !6681
  %arrayidx93 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld92, i64 0, i64 0, !dbg !6681
  %rt_int94 = bitcast %union.rtunion_def* %arrayidx93 to i32*, !dbg !6681
  %53 = load i32, i32* %rt_int94, align 8, !dbg !6681
  %call95 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond90, i32 %53), !dbg !6681
  %call96 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %processed, i32 %call95), !dbg !6682
  %tobool97 = icmp ne i32 %call96, 0, !dbg !6682
  br i1 %tobool97, label %if.end167, label %if.then98, !dbg !6683

if.then98:                                        ; preds = %cond.end89
  %54 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6684
  %tobool99 = icmp ne %struct.VEC_int_heap* %54, null, !dbg !6684
  br i1 %tobool99, label %cond.true100, label %cond.false102, !dbg !6684

cond.true100:                                     ; preds = %if.then98
  %55 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6684
  %base101 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %55, i32 0, i32 0, !dbg !6684
  br label %cond.end103, !dbg !6684

cond.false102:                                    ; preds = %if.then98
  br label %cond.end103, !dbg !6684

cond.end103:                                      ; preds = %cond.false102, %cond.true100
  %cond104 = phi %struct.VEC_int_base* [ %base101, %cond.true100 ], [ null, %cond.false102 ], !dbg !6684
  %56 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !6684
  %u105 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %56, i32 0, i32 1, !dbg !6684
  %fld106 = bitcast %union.u* %u105 to [1 x %union.rtunion_def]*, !dbg !6684
  %arrayidx107 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld106, i64 0, i64 0, !dbg !6684
  %rt_int108 = bitcast %union.rtunion_def* %arrayidx107 to i32*, !dbg !6684
  %57 = load i32, i32* %rt_int108, align 8, !dbg !6684
  %call109 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond104, i32 %57), !dbg !6684
  %call110 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %processed, i32 %call109), !dbg !6686
  %58 = load i32, i32* %next_clock, align 4, !dbg !6687
  %59 = load i32, i32* %tick, align 4, !dbg !6688
  %sub111 = sub nsw i32 %59, %58, !dbg !6688
  store i32 %sub111, i32* %tick, align 4, !dbg !6688
  %60 = load i32, i32* %tick, align 4, !dbg !6689
  %61 = load i32, i32* @max_insn_queue_index, align 4, !dbg !6691
  %sub112 = sub nsw i32 0, %61, !dbg !6691
  %cmp113 = icmp slt i32 %60, %sub112, !dbg !6692
  br i1 %cmp113, label %if.then114, label %if.end116, !dbg !6693

if.then114:                                       ; preds = %cond.end103
  %62 = load i32, i32* @max_insn_queue_index, align 4, !dbg !6694
  %sub115 = sub nsw i32 0, %62, !dbg !6694
  store i32 %sub115, i32* %tick, align 4, !dbg !6695
  br label %if.end116, !dbg !6696

if.end116:                                        ; preds = %if.then114, %cond.end103
  %63 = load i32, i32* %tick, align 4, !dbg !6697
  %64 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6699
  %tobool117 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %64, null, !dbg !6699
  br i1 %tobool117, label %cond.true118, label %cond.false120, !dbg !6699

cond.true118:                                     ; preds = %if.end116
  %65 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6699
  %base119 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %65, i32 0, i32 0, !dbg !6699
  br label %cond.end121, !dbg !6699

cond.false120:                                    ; preds = %if.end116
  br label %cond.end121, !dbg !6699

cond.end121:                                      ; preds = %cond.false120, %cond.true118
  %cond122 = phi %struct.VEC_haifa_insn_data_def_base* [ %base119, %cond.true118 ], [ null, %cond.false120 ], !dbg !6699
  %66 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !6699
  %u123 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %66, i32 0, i32 1, !dbg !6699
  %fld124 = bitcast %union.u* %u123 to [1 x %union.rtunion_def]*, !dbg !6699
  %arrayidx125 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld124, i64 0, i64 0, !dbg !6699
  %rt_int126 = bitcast %union.rtunion_def* %arrayidx125 to i32*, !dbg !6699
  %67 = load i32, i32* %rt_int126, align 8, !dbg !6699
  %call127 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond122, i32 %67), !dbg !6699
  %inter_tick = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call127, i32 0, i32 3, !dbg !6699
  %68 = load i32, i32* %inter_tick, align 4, !dbg !6699
  %cmp128 = icmp sgt i32 %63, %68, !dbg !6700
  br i1 %cmp128, label %if.then129, label %if.else, !dbg !6701

if.then129:                                       ; preds = %cond.end121
  %69 = load i32, i32* %tick, align 4, !dbg !6702
  %70 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6703
  %tobool130 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %70, null, !dbg !6703
  br i1 %tobool130, label %cond.true131, label %cond.false133, !dbg !6703

cond.true131:                                     ; preds = %if.then129
  %71 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6703
  %base132 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %71, i32 0, i32 0, !dbg !6703
  br label %cond.end134, !dbg !6703

cond.false133:                                    ; preds = %if.then129
  br label %cond.end134, !dbg !6703

cond.end134:                                      ; preds = %cond.false133, %cond.true131
  %cond135 = phi %struct.VEC_haifa_insn_data_def_base* [ %base132, %cond.true131 ], [ null, %cond.false133 ], !dbg !6703
  %72 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !6703
  %u136 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %72, i32 0, i32 1, !dbg !6703
  %fld137 = bitcast %union.u* %u136 to [1 x %union.rtunion_def]*, !dbg !6703
  %arrayidx138 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld137, i64 0, i64 0, !dbg !6703
  %rt_int139 = bitcast %union.rtunion_def* %arrayidx138 to i32*, !dbg !6703
  %73 = load i32, i32* %rt_int139, align 8, !dbg !6703
  %call140 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond135, i32 %73), !dbg !6703
  %inter_tick141 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call140, i32 0, i32 3, !dbg !6703
  store i32 %69, i32* %inter_tick141, align 4, !dbg !6704
  br label %if.end154, !dbg !6703

if.else:                                          ; preds = %cond.end121
  %74 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6705
  %tobool142 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %74, null, !dbg !6705
  br i1 %tobool142, label %cond.true143, label %cond.false145, !dbg !6705

cond.true143:                                     ; preds = %if.else
  %75 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6705
  %base144 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %75, i32 0, i32 0, !dbg !6705
  br label %cond.end146, !dbg !6705

cond.false145:                                    ; preds = %if.else
  br label %cond.end146, !dbg !6705

cond.end146:                                      ; preds = %cond.false145, %cond.true143
  %cond147 = phi %struct.VEC_haifa_insn_data_def_base* [ %base144, %cond.true143 ], [ null, %cond.false145 ], !dbg !6705
  %76 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !6705
  %u148 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %76, i32 0, i32 1, !dbg !6705
  %fld149 = bitcast %union.u* %u148 to [1 x %union.rtunion_def]*, !dbg !6705
  %arrayidx150 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld149, i64 0, i64 0, !dbg !6705
  %rt_int151 = bitcast %union.rtunion_def* %arrayidx150 to i32*, !dbg !6705
  %77 = load i32, i32* %rt_int151, align 8, !dbg !6705
  %call152 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond147, i32 %77), !dbg !6705
  %inter_tick153 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call152, i32 0, i32 3, !dbg !6705
  %78 = load i32, i32* %inter_tick153, align 4, !dbg !6705
  store i32 %78, i32* %tick, align 4, !dbg !6706
  br label %if.end154

if.end154:                                        ; preds = %cond.end146, %cond.end134
  %79 = load i32, i32* %tick, align 4, !dbg !6707
  %80 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6708
  %tobool155 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %80, null, !dbg !6708
  br i1 %tobool155, label %cond.true156, label %cond.false158, !dbg !6708

cond.true156:                                     ; preds = %if.end154
  %81 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6708
  %base157 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %81, i32 0, i32 0, !dbg !6708
  br label %cond.end159, !dbg !6708

cond.false158:                                    ; preds = %if.end154
  br label %cond.end159, !dbg !6708

cond.end159:                                      ; preds = %cond.false158, %cond.true156
  %cond160 = phi %struct.VEC_haifa_insn_data_def_base* [ %base157, %cond.true156 ], [ null, %cond.false158 ], !dbg !6708
  %82 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !6708
  %u161 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %82, i32 0, i32 1, !dbg !6708
  %fld162 = bitcast %union.u* %u161 to [1 x %union.rtunion_def]*, !dbg !6708
  %arrayidx163 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld162, i64 0, i64 0, !dbg !6708
  %rt_int164 = bitcast %union.rtunion_def* %arrayidx163 to i32*, !dbg !6708
  %83 = load i32, i32* %rt_int164, align 8, !dbg !6708
  %call165 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond160, i32 %83), !dbg !6708
  %tick166 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call165, i32 0, i32 2, !dbg !6708
  store i32 %79, i32* %tick166, align 8, !dbg !6709
  br label %if.end167, !dbg !6710

if.end167:                                        ; preds = %cond.end159, %cond.end89, %cond.end74
  br label %for.inc, !dbg !6711

for.inc:                                          ; preds = %if.end167
  call void @sd_iterator_next(%struct._sd_iterator* %sd_it), !dbg !6667
  br label %for.cond66, !dbg !6667, !llvm.loop !6712

for.end:                                          ; preds = %for.cond66
  br label %if.end168, !dbg !6714

if.end168:                                        ; preds = %for.end, %lor.lhs.false9
  br label %for.inc169, !dbg !6715

for.inc169:                                       ; preds = %if.end168
  %84 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !6716
  %u170 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %84, i32 0, i32 1, !dbg !6716
  %fld171 = bitcast %union.u* %u170 to [1 x %union.rtunion_def]*, !dbg !6716
  %arrayidx172 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld171, i64 0, i64 2, !dbg !6716
  %rt_rtx173 = bitcast %union.rtunion_def* %arrayidx172 to %struct.rtx_def**, !dbg !6716
  %85 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx173, align 8, !dbg !6716
  store %struct.rtx_def* %85, %struct.rtx_def** %head.addr, align 8, !dbg !6717
  br label %for.cond, !dbg !6718, !llvm.loop !6719

for.end174:                                       ; preds = %for.cond
  call void @bitmap_clear(%struct.bitmap_head_def* %processed), !dbg !6721
  ret void, !dbg !6722
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @sched_init_luids(%struct.VEC_basic_block_heap* %bbs, %struct.basic_block_def* %bb, %struct.VEC_rtx_heap* %insns, %struct.rtx_def* %insn) #0 !dbg !6723 {
entry:
  %bbs.addr = alloca %struct.VEC_basic_block_heap*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %insns.addr = alloca %struct.VEC_rtx_heap*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %ssi = alloca %struct.sched_scan_info_def, align 8
  store %struct.VEC_basic_block_heap* %bbs, %struct.VEC_basic_block_heap** %bbs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap** %bbs.addr, metadata !6728, metadata !DIExpression()), !dbg !6729
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6730, metadata !DIExpression()), !dbg !6731
  store %struct.VEC_rtx_heap* %insns, %struct.VEC_rtx_heap** %insns.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_heap** %insns.addr, metadata !6732, metadata !DIExpression()), !dbg !6733
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !6734, metadata !DIExpression()), !dbg !6735
  call void @llvm.dbg.declare(metadata %struct.sched_scan_info_def* %ssi, metadata !6736, metadata !DIExpression()), !dbg !6737
  %0 = bitcast %struct.sched_scan_info_def* %ssi to i8*, !dbg !6737
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %0, i8* align 8 bitcast (%struct.sched_scan_info_def* @__const.sched_init_luids.ssi to i8*), i64 32, i1 false), !dbg !6737
  %1 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %bbs.addr, align 8, !dbg !6738
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6739
  %3 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %insns.addr, align 8, !dbg !6740
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6741
  call void @sched_scan(%struct.sched_scan_info_def* %ssi, %struct.VEC_basic_block_heap* %1, %struct.basic_block_def* %2, %struct.VEC_rtx_heap* %3, %struct.rtx_def* %4), !dbg !6742
  ret void, !dbg !6743
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @set_priorities(%struct.rtx_def* %head, %struct.rtx_def* %tail) #0 !dbg !6744 {
entry:
  %head.addr = alloca %struct.rtx_def*, align 8
  %tail.addr = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %n_insn = alloca i32, align 4
  %sched_max_insns_priority = alloca i32, align 4
  %prev_head = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %head, %struct.rtx_def** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %head.addr, metadata !6745, metadata !DIExpression()), !dbg !6746
  store %struct.rtx_def* %tail, %struct.rtx_def** %tail.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tail.addr, metadata !6747, metadata !DIExpression()), !dbg !6748
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !6749, metadata !DIExpression()), !dbg !6750
  call void @llvm.dbg.declare(metadata i32* %n_insn, metadata !6751, metadata !DIExpression()), !dbg !6752
  call void @llvm.dbg.declare(metadata i32* %sched_max_insns_priority, metadata !6753, metadata !DIExpression()), !dbg !6754
  %0 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !6755
  %sched_max_insns_priority1 = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %0, i32 0, i32 13, !dbg !6756
  %1 = load i32, i32* %sched_max_insns_priority1, align 4, !dbg !6756
  store i32 %1, i32* %sched_max_insns_priority, align 4, !dbg !6754
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %prev_head, metadata !6757, metadata !DIExpression()), !dbg !6758
  %2 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !6759
  %3 = load %struct.rtx_def*, %struct.rtx_def** %tail.addr, align 8, !dbg !6761
  %cmp = icmp eq %struct.rtx_def* %2, %3, !dbg !6762
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !6763

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !6764
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !6764
  %bf.load = load i32, i32* %5, align 8, !dbg !6764
  %bf.clear = and i32 %bf.load, 65535, !dbg !6764
  %cmp2 = icmp eq i32 %bf.clear, 8, !dbg !6764
  br i1 %cmp2, label %lor.lhs.false14, label %lor.lhs.false, !dbg !6764

lor.lhs.false:                                    ; preds = %land.lhs.true
  %6 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !6764
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !6764
  %bf.load3 = load i32, i32* %7, align 8, !dbg !6764
  %bf.clear4 = and i32 %bf.load3, 65535, !dbg !6764
  %cmp5 = icmp eq i32 %bf.clear4, 7, !dbg !6764
  br i1 %cmp5, label %lor.lhs.false14, label %lor.lhs.false6, !dbg !6764

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %8 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !6764
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !6764
  %bf.load7 = load i32, i32* %9, align 8, !dbg !6764
  %bf.clear8 = and i32 %bf.load7, 65535, !dbg !6764
  %cmp9 = icmp eq i32 %bf.clear8, 9, !dbg !6764
  br i1 %cmp9, label %lor.lhs.false14, label %lor.lhs.false10, !dbg !6764

lor.lhs.false10:                                  ; preds = %lor.lhs.false6
  %10 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !6764
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !6764
  %bf.load11 = load i32, i32* %11, align 8, !dbg !6764
  %bf.clear12 = and i32 %bf.load11, 65535, !dbg !6764
  %cmp13 = icmp eq i32 %bf.clear12, 10, !dbg !6764
  br i1 %cmp13, label %lor.lhs.false14, label %if.then, !dbg !6765

lor.lhs.false14:                                  ; preds = %lor.lhs.false10, %lor.lhs.false6, %lor.lhs.false, %land.lhs.true
  %12 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !6766
  %13 = bitcast %struct.rtx_def* %12 to i32*, !dbg !6766
  %bf.load15 = load i32, i32* %13, align 8, !dbg !6766
  %bf.clear16 = and i32 %bf.load15, 65535, !dbg !6766
  %cmp17 = icmp eq i32 %bf.clear16, 7, !dbg !6766
  br i1 %cmp17, label %land.lhs.true18, label %if.end, !dbg !6766

land.lhs.true18:                                  ; preds = %lor.lhs.false14
  %14 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !6766
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !6766
  %bf.load19 = load i32, i32* %15, align 8, !dbg !6766
  %bf.lshr = lshr i32 %bf.load19, 26, !dbg !6766
  %bf.clear20 = and i32 %bf.lshr, 1, !dbg !6766
  %tobool = icmp ne i32 %bf.clear20, 0, !dbg !6766
  br i1 %tobool, label %if.end, label %if.then, !dbg !6767

if.then:                                          ; preds = %land.lhs.true18, %lor.lhs.false10
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 3309, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !6768
  br label %if.end, !dbg !6768

if.end:                                           ; preds = %if.then, %land.lhs.true18, %lor.lhs.false14, %entry
  store i32 0, i32* %n_insn, align 4, !dbg !6769
  %16 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !6770
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !6770
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6770
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !6770
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6770
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6770
  store %struct.rtx_def* %17, %struct.rtx_def** %prev_head, align 8, !dbg !6771
  %18 = load %struct.rtx_def*, %struct.rtx_def** %tail.addr, align 8, !dbg !6772
  store %struct.rtx_def* %18, %struct.rtx_def** %insn, align 8, !dbg !6774
  br label %for.cond, !dbg !6775

for.cond:                                         ; preds = %for.inc, %if.end
  %19 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6776
  %20 = load %struct.rtx_def*, %struct.rtx_def** %prev_head, align 8, !dbg !6778
  %cmp21 = icmp ne %struct.rtx_def* %19, %20, !dbg !6779
  br i1 %cmp21, label %for.body, label %for.end, !dbg !6780

for.body:                                         ; preds = %for.cond
  %21 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6781
  %22 = bitcast %struct.rtx_def* %21 to i32*, !dbg !6781
  %bf.load22 = load i32, i32* %22, align 8, !dbg !6781
  %bf.clear23 = and i32 %bf.load22, 65535, !dbg !6781
  %cmp24 = icmp eq i32 %bf.clear23, 8, !dbg !6781
  br i1 %cmp24, label %if.end38, label %lor.lhs.false25, !dbg !6781

lor.lhs.false25:                                  ; preds = %for.body
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6781
  %24 = bitcast %struct.rtx_def* %23 to i32*, !dbg !6781
  %bf.load26 = load i32, i32* %24, align 8, !dbg !6781
  %bf.clear27 = and i32 %bf.load26, 65535, !dbg !6781
  %cmp28 = icmp eq i32 %bf.clear27, 7, !dbg !6781
  br i1 %cmp28, label %if.end38, label %lor.lhs.false29, !dbg !6781

lor.lhs.false29:                                  ; preds = %lor.lhs.false25
  %25 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6781
  %26 = bitcast %struct.rtx_def* %25 to i32*, !dbg !6781
  %bf.load30 = load i32, i32* %26, align 8, !dbg !6781
  %bf.clear31 = and i32 %bf.load30, 65535, !dbg !6781
  %cmp32 = icmp eq i32 %bf.clear31, 9, !dbg !6781
  br i1 %cmp32, label %if.end38, label %lor.lhs.false33, !dbg !6781

lor.lhs.false33:                                  ; preds = %lor.lhs.false29
  %27 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6781
  %28 = bitcast %struct.rtx_def* %27 to i32*, !dbg !6781
  %bf.load34 = load i32, i32* %28, align 8, !dbg !6781
  %bf.clear35 = and i32 %bf.load34, 65535, !dbg !6781
  %cmp36 = icmp eq i32 %bf.clear35, 10, !dbg !6781
  br i1 %cmp36, label %if.end38, label %if.then37, !dbg !6784

if.then37:                                        ; preds = %lor.lhs.false33
  br label %for.inc, !dbg !6785

if.end38:                                         ; preds = %lor.lhs.false33, %lor.lhs.false29, %lor.lhs.false25, %for.body
  %29 = load i32, i32* %n_insn, align 4, !dbg !6786
  %inc = add nsw i32 %29, 1, !dbg !6786
  store i32 %inc, i32* %n_insn, align 4, !dbg !6786
  %30 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6787
  %call = call i32 @priority(%struct.rtx_def* %30), !dbg !6788
  %31 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6789
  %tobool39 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %31, null, !dbg !6789
  br i1 %tobool39, label %cond.true, label %cond.false, !dbg !6789

cond.true:                                        ; preds = %if.end38
  %32 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6789
  %base = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %32, i32 0, i32 0, !dbg !6789
  br label %cond.end, !dbg !6789

cond.false:                                       ; preds = %if.end38
  br label %cond.end, !dbg !6789

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_haifa_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6789
  %33 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6789
  %u40 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1, !dbg !6789
  %fld41 = bitcast %union.u* %u40 to [1 x %union.rtunion_def]*, !dbg !6789
  %arrayidx42 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld41, i64 0, i64 0, !dbg !6789
  %rt_int = bitcast %union.rtunion_def* %arrayidx42 to i32*, !dbg !6789
  %34 = load i32, i32* %rt_int, align 8, !dbg !6789
  %call43 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond, i32 %34), !dbg !6789
  %priority_status = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call43, i32 0, i32 7, !dbg !6789
  %35 = load i8, i8* %priority_status, align 1, !dbg !6789
  %conv = sext i8 %35 to i32, !dbg !6789
  %cmp44 = icmp sgt i32 %conv, 0, !dbg !6789
  br i1 %cmp44, label %cond.false47, label %cond.true46, !dbg !6789

cond.true46:                                      ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 3322, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !6789
  br label %cond.end48, !dbg !6789

cond.false47:                                     ; preds = %cond.end
  br label %cond.end48, !dbg !6789

cond.end48:                                       ; preds = %cond.false47, %cond.true46
  %cond49 = phi i32 [ 0, %cond.true46 ], [ 0, %cond.false47 ], !dbg !6789
  %36 = load i32, i32* %sched_max_insns_priority, align 4, !dbg !6790
  %37 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6790
  %tobool50 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %37, null, !dbg !6790
  br i1 %tobool50, label %cond.true51, label %cond.false53, !dbg !6790

cond.true51:                                      ; preds = %cond.end48
  %38 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6790
  %base52 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %38, i32 0, i32 0, !dbg !6790
  br label %cond.end54, !dbg !6790

cond.false53:                                     ; preds = %cond.end48
  br label %cond.end54, !dbg !6790

cond.end54:                                       ; preds = %cond.false53, %cond.true51
  %cond55 = phi %struct.VEC_haifa_insn_data_def_base* [ %base52, %cond.true51 ], [ null, %cond.false53 ], !dbg !6790
  %39 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6790
  %u56 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1, !dbg !6790
  %fld57 = bitcast %union.u* %u56 to [1 x %union.rtunion_def]*, !dbg !6790
  %arrayidx58 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld57, i64 0, i64 0, !dbg !6790
  %rt_int59 = bitcast %union.rtunion_def* %arrayidx58 to i32*, !dbg !6790
  %40 = load i32, i32* %rt_int59, align 8, !dbg !6790
  %call60 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond55, i32 %40), !dbg !6790
  %priority = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call60, i32 0, i32 1, !dbg !6790
  %41 = load i32, i32* %priority, align 4, !dbg !6790
  %cmp61 = icmp sgt i32 %36, %41, !dbg !6790
  br i1 %cmp61, label %cond.true63, label %cond.false64, !dbg !6790

cond.true63:                                      ; preds = %cond.end54
  %42 = load i32, i32* %sched_max_insns_priority, align 4, !dbg !6790
  br label %cond.end77, !dbg !6790

cond.false64:                                     ; preds = %cond.end54
  %43 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6790
  %tobool65 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %43, null, !dbg !6790
  br i1 %tobool65, label %cond.true66, label %cond.false68, !dbg !6790

cond.true66:                                      ; preds = %cond.false64
  %44 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6790
  %base67 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %44, i32 0, i32 0, !dbg !6790
  br label %cond.end69, !dbg !6790

cond.false68:                                     ; preds = %cond.false64
  br label %cond.end69, !dbg !6790

cond.end69:                                       ; preds = %cond.false68, %cond.true66
  %cond70 = phi %struct.VEC_haifa_insn_data_def_base* [ %base67, %cond.true66 ], [ null, %cond.false68 ], !dbg !6790
  %45 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6790
  %u71 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1, !dbg !6790
  %fld72 = bitcast %union.u* %u71 to [1 x %union.rtunion_def]*, !dbg !6790
  %arrayidx73 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld72, i64 0, i64 0, !dbg !6790
  %rt_int74 = bitcast %union.rtunion_def* %arrayidx73 to i32*, !dbg !6790
  %46 = load i32, i32* %rt_int74, align 8, !dbg !6790
  %call75 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond70, i32 %46), !dbg !6790
  %priority76 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call75, i32 0, i32 1, !dbg !6790
  %47 = load i32, i32* %priority76, align 4, !dbg !6790
  br label %cond.end77, !dbg !6790

cond.end77:                                       ; preds = %cond.end69, %cond.true63
  %cond78 = phi i32 [ %42, %cond.true63 ], [ %47, %cond.end69 ], !dbg !6790
  store i32 %cond78, i32* %sched_max_insns_priority, align 4, !dbg !6791
  br label %for.inc, !dbg !6792

for.inc:                                          ; preds = %cond.end77, %if.then37
  %48 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6793
  %u79 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %48, i32 0, i32 1, !dbg !6793
  %fld80 = bitcast %union.u* %u79 to [1 x %union.rtunion_def]*, !dbg !6793
  %arrayidx81 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld80, i64 0, i64 1, !dbg !6793
  %rt_rtx82 = bitcast %union.rtunion_def* %arrayidx81 to %struct.rtx_def**, !dbg !6793
  %49 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx82, align 8, !dbg !6793
  store %struct.rtx_def* %49, %struct.rtx_def** %insn, align 8, !dbg !6794
  br label %for.cond, !dbg !6795, !llvm.loop !6796

for.end:                                          ; preds = %for.cond
  %50 = load i32, i32* %sched_max_insns_priority, align 4, !dbg !6798
  %51 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !6799
  %sched_max_insns_priority83 = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %51, i32 0, i32 13, !dbg !6800
  store i32 %50, i32* %sched_max_insns_priority83, align 4, !dbg !6801
  %52 = load i32, i32* %n_insn, align 4, !dbg !6802
  ret i32 %52, !dbg !6803
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @priority(%struct.rtx_def* %insn) #0 !dbg !6804 {
entry:
  %retval = alloca i32, align 4
  %insn.addr = alloca %struct.rtx_def*, align 8
  %this_priority = alloca i32, align 4
  %prev_first = alloca %struct.rtx_def*, align 8
  %twin = alloca %struct.rtx_def*, align 8
  %rec = alloca %struct.basic_block_def*, align 8
  %sd_it = alloca %struct._sd_iterator, align 8
  %dep = alloca %struct._dep*, align 8
  %tmp = alloca %struct._sd_iterator, align 8
  %next = alloca %struct.rtx_def*, align 8
  %next_priority = alloca i32, align 4
  %cost = alloca i32, align 4
  %_dep1 = alloca %struct._dep, align 8
  %dep1 = alloca %struct._dep*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !6805, metadata !DIExpression()), !dbg !6806
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6807
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !6807
  %bf.load = load i32, i32* %1, align 8, !dbg !6807
  %bf.clear = and i32 %bf.load, 65535, !dbg !6807
  %cmp = icmp eq i32 %bf.clear, 8, !dbg !6807
  br i1 %cmp, label %if.end, label %lor.lhs.false, !dbg !6807

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6807
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !6807
  %bf.load1 = load i32, i32* %3, align 8, !dbg !6807
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !6807
  %cmp3 = icmp eq i32 %bf.clear2, 7, !dbg !6807
  br i1 %cmp3, label %if.end, label %lor.lhs.false4, !dbg !6807

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6807
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !6807
  %bf.load5 = load i32, i32* %5, align 8, !dbg !6807
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !6807
  %cmp7 = icmp eq i32 %bf.clear6, 9, !dbg !6807
  br i1 %cmp7, label %if.end, label %lor.lhs.false8, !dbg !6807

lor.lhs.false8:                                   ; preds = %lor.lhs.false4
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6807
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !6807
  %bf.load9 = load i32, i32* %7, align 8, !dbg !6807
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !6807
  %cmp11 = icmp eq i32 %bf.clear10, 10, !dbg !6807
  br i1 %cmp11, label %if.end, label %if.then, !dbg !6809

if.then:                                          ; preds = %lor.lhs.false8
  store i32 0, i32* %retval, align 4, !dbg !6810
  br label %return, !dbg !6810

if.end:                                           ; preds = %lor.lhs.false8, %lor.lhs.false4, %lor.lhs.false, %entry
  %8 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6811
  %tobool = icmp ne %struct.VEC_haifa_insn_data_def_heap* %8, null, !dbg !6811
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6811

cond.true:                                        ; preds = %if.end
  %9 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6811
  %base = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %9, i32 0, i32 0, !dbg !6811
  br label %cond.end, !dbg !6811

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !6811

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_haifa_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6811
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6811
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !6811
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6811
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !6811
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !6811
  %11 = load i32, i32* %rt_int, align 8, !dbg !6811
  %call = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond, i32 %11), !dbg !6811
  %queue_index = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call, i32 0, i32 4, !dbg !6811
  %12 = load i32, i32* %queue_index, align 8, !dbg !6811
  %cmp12 = icmp ne i32 %12, -3, !dbg !6811
  br i1 %cmp12, label %cond.false14, label %cond.true13, !dbg !6811

cond.true13:                                      ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 1010, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !6811
  br label %cond.end15, !dbg !6811

cond.false14:                                     ; preds = %cond.end
  br label %cond.end15, !dbg !6811

cond.end15:                                       ; preds = %cond.false14, %cond.true13
  %cond16 = phi i32 [ 0, %cond.true13 ], [ 0, %cond.false14 ], !dbg !6811
  %13 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6812
  %tobool17 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %13, null, !dbg !6812
  br i1 %tobool17, label %cond.true18, label %cond.false20, !dbg !6812

cond.true18:                                      ; preds = %cond.end15
  %14 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6812
  %base19 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %14, i32 0, i32 0, !dbg !6812
  br label %cond.end21, !dbg !6812

cond.false20:                                     ; preds = %cond.end15
  br label %cond.end21, !dbg !6812

cond.end21:                                       ; preds = %cond.false20, %cond.true18
  %cond22 = phi %struct.VEC_haifa_insn_data_def_base* [ %base19, %cond.true18 ], [ null, %cond.false20 ], !dbg !6812
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6812
  %u23 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !6812
  %fld24 = bitcast %union.u* %u23 to [1 x %union.rtunion_def]*, !dbg !6812
  %arrayidx25 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld24, i64 0, i64 0, !dbg !6812
  %rt_int26 = bitcast %union.rtunion_def* %arrayidx25 to i32*, !dbg !6812
  %16 = load i32, i32* %rt_int26, align 8, !dbg !6812
  %call27 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond22, i32 %16), !dbg !6812
  %priority_status = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call27, i32 0, i32 7, !dbg !6812
  %17 = load i8, i8* %priority_status, align 1, !dbg !6812
  %conv = sext i8 %17 to i32, !dbg !6812
  %cmp28 = icmp sgt i32 %conv, 0, !dbg !6812
  br i1 %cmp28, label %if.end140, label %if.then30, !dbg !6814

if.then30:                                        ; preds = %cond.end21
  call void @llvm.dbg.declare(metadata i32* %this_priority, metadata !6815, metadata !DIExpression()), !dbg !6817
  store i32 -1, i32* %this_priority, align 4, !dbg !6817
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6818
  %call31 = call i32 @dep_list_size(%struct.rtx_def* %18), !dbg !6820
  %cmp32 = icmp eq i32 %call31, 0, !dbg !6821
  br i1 %cmp32, label %if.then34, label %if.else, !dbg !6822

if.then34:                                        ; preds = %if.then30
  %19 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6823
  %call35 = call i32 @insn_cost(%struct.rtx_def* %19), !dbg !6824
  store i32 %call35, i32* %this_priority, align 4, !dbg !6825
  br label %if.end105, !dbg !6826

if.else:                                          ; preds = %if.then30
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %prev_first, metadata !6827, metadata !DIExpression()), !dbg !6829
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %twin, metadata !6830, metadata !DIExpression()), !dbg !6831
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %rec, metadata !6832, metadata !DIExpression()), !dbg !6833
  %call36 = call zeroext i8 @sel_sched_p(), !dbg !6834
  %conv37 = zext i8 %call36 to i32, !dbg !6834
  %tobool38 = icmp ne i32 %conv37, 0, !dbg !6834
  br i1 %tobool38, label %cond.true39, label %cond.false40, !dbg !6834

cond.true39:                                      ; preds = %if.else
  br label %cond.end52, !dbg !6834

cond.false40:                                     ; preds = %if.else
  %20 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6835
  %tobool41 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %20, null, !dbg !6835
  br i1 %tobool41, label %cond.true42, label %cond.false44, !dbg !6835

cond.true42:                                      ; preds = %cond.false40
  %21 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6835
  %base43 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %21, i32 0, i32 0, !dbg !6835
  br label %cond.end45, !dbg !6835

cond.false44:                                     ; preds = %cond.false40
  br label %cond.end45, !dbg !6835

cond.end45:                                       ; preds = %cond.false44, %cond.true42
  %cond46 = phi %struct.VEC_haifa_insn_data_def_base* [ %base43, %cond.true42 ], [ null, %cond.false44 ], !dbg !6835
  %22 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6835
  %u47 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !6835
  %fld48 = bitcast %union.u* %u47 to [1 x %union.rtunion_def]*, !dbg !6835
  %arrayidx49 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld48, i64 0, i64 0, !dbg !6835
  %rt_int50 = bitcast %union.rtunion_def* %arrayidx49 to i32*, !dbg !6835
  %23 = load i32, i32* %rt_int50, align 8, !dbg !6835
  %call51 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond46, i32 %23), !dbg !6835
  %recovery_block = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call51, i32 0, i32 11, !dbg !6835
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %recovery_block, align 8, !dbg !6835
  br label %cond.end52, !dbg !6834

cond.end52:                                       ; preds = %cond.end45, %cond.true39
  %cond53 = phi %struct.basic_block_def* [ null, %cond.true39 ], [ %24, %cond.end45 ], !dbg !6834
  store %struct.basic_block_def* %cond53, %struct.basic_block_def** %rec, align 8, !dbg !6836
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %rec, align 8, !dbg !6837
  %tobool54 = icmp ne %struct.basic_block_def* %25, null, !dbg !6837
  br i1 %tobool54, label %lor.lhs.false55, label %if.then58, !dbg !6839

lor.lhs.false55:                                  ; preds = %cond.end52
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %rec, align 8, !dbg !6840
  %27 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6841
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %27, i64 0, !dbg !6841
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !6841
  %28 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !6841
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %28, i32 0, i32 1, !dbg !6841
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !6841
  %cmp56 = icmp eq %struct.basic_block_def* %26, %29, !dbg !6842
  br i1 %cmp56, label %if.then58, label %if.else62, !dbg !6843

if.then58:                                        ; preds = %lor.lhs.false55, %cond.end52
  %30 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6844
  %u59 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1, !dbg !6844
  %fld60 = bitcast %union.u* %u59 to [1 x %union.rtunion_def]*, !dbg !6844
  %arrayidx61 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld60, i64 0, i64 1, !dbg !6844
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx61 to %struct.rtx_def**, !dbg !6844
  %31 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6844
  store %struct.rtx_def* %31, %struct.rtx_def** %prev_first, align 8, !dbg !6846
  %32 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6847
  store %struct.rtx_def* %32, %struct.rtx_def** %twin, align 8, !dbg !6848
  br label %if.end73, !dbg !6849

if.else62:                                        ; preds = %lor.lhs.false55
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %rec, align 8, !dbg !6850
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %33, i32 0, i32 7, !dbg !6850
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !6850
  %34 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !6850
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %34, i32 0, i32 0, !dbg !6850
  %35 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !6850
  %u63 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1, !dbg !6850
  %fld64 = bitcast %union.u* %u63 to [1 x %union.rtunion_def]*, !dbg !6850
  %arrayidx65 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld64, i64 0, i64 2, !dbg !6850
  %rt_rtx66 = bitcast %union.rtunion_def* %arrayidx65 to %struct.rtx_def**, !dbg !6850
  %36 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx66, align 8, !dbg !6850
  store %struct.rtx_def* %36, %struct.rtx_def** %prev_first, align 8, !dbg !6852
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %rec, align 8, !dbg !6853
  %il67 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %37, i32 0, i32 7, !dbg !6853
  %rtl68 = bitcast %union.basic_block_il_dependent* %il67 to %struct.rtl_bb_info**, !dbg !6853
  %38 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl68, align 8, !dbg !6853
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %38, i32 0, i32 1, !dbg !6853
  %39 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !6853
  %u69 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1, !dbg !6853
  %fld70 = bitcast %union.u* %u69 to [1 x %union.rtunion_def]*, !dbg !6853
  %arrayidx71 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld70, i64 0, i64 1, !dbg !6853
  %rt_rtx72 = bitcast %union.rtunion_def* %arrayidx71 to %struct.rtx_def**, !dbg !6853
  %40 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx72, align 8, !dbg !6853
  store %struct.rtx_def* %40, %struct.rtx_def** %twin, align 8, !dbg !6854
  br label %if.end73

if.end73:                                         ; preds = %if.else62, %if.then58
  br label %do.body, !dbg !6855

do.body:                                          ; preds = %do.cond, %if.end73
  call void @llvm.dbg.declare(metadata %struct._sd_iterator* %sd_it, metadata !6856, metadata !DIExpression()), !dbg !6858
  call void @llvm.dbg.declare(metadata %struct._dep** %dep, metadata !6859, metadata !DIExpression()), !dbg !6860
  %41 = load %struct.rtx_def*, %struct.rtx_def** %twin, align 8, !dbg !6861
  call void @sd_iterator_start(%struct._sd_iterator* sret %tmp, %struct.rtx_def* %41, i32 4), !dbg !6861
  %42 = bitcast %struct._sd_iterator* %sd_it to i8*, !dbg !6861
  %43 = bitcast %struct._sd_iterator* %tmp to i8*, !dbg !6861
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %42, i8* align 8 %43, i64 32, i1 false), !dbg !6861
  br label %for.cond, !dbg !6861

for.cond:                                         ; preds = %for.inc, %do.body
  %call74 = call zeroext i8 @sd_iterator_cond(%struct._sd_iterator* %sd_it, %struct._dep** %dep), !dbg !6863
  %tobool75 = icmp ne i8 %call74, 0, !dbg !6861
  br i1 %tobool75, label %for.body, label %for.end, !dbg !6861

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %next, metadata !6865, metadata !DIExpression()), !dbg !6867
  call void @llvm.dbg.declare(metadata i32* %next_priority, metadata !6868, metadata !DIExpression()), !dbg !6869
  %44 = load %struct._dep*, %struct._dep** %dep, align 8, !dbg !6870
  %con = getelementptr inbounds %struct._dep, %struct._dep* %44, i32 0, i32 1, !dbg !6870
  %45 = load %struct.rtx_def*, %struct.rtx_def** %con, align 8, !dbg !6870
  store %struct.rtx_def* %45, %struct.rtx_def** %next, align 8, !dbg !6871
  %46 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !6872
  %u76 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %46, i32 0, i32 1, !dbg !6872
  %fld77 = bitcast %union.u* %u76 to [1 x %union.rtunion_def]*, !dbg !6872
  %arrayidx78 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld77, i64 0, i64 3, !dbg !6872
  %rt_bb = bitcast %union.rtunion_def* %arrayidx78 to %struct.basic_block_def**, !dbg !6872
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !6872
  %48 = load %struct.basic_block_def*, %struct.basic_block_def** %rec, align 8, !dbg !6874
  %cmp79 = icmp ne %struct.basic_block_def* %47, %48, !dbg !6875
  br i1 %cmp79, label %if.then81, label %if.end98, !dbg !6876

if.then81:                                        ; preds = %for.body
  call void @llvm.dbg.declare(metadata i32* %cost, metadata !6877, metadata !DIExpression()), !dbg !6879
  %49 = load %struct._dep*, %struct._dep** %dep, align 8, !dbg !6880
  %call82 = call zeroext i8 @contributes_to_priority_p(%struct._dep* %49), !dbg !6882
  %tobool83 = icmp ne i8 %call82, 0, !dbg !6882
  br i1 %tobool83, label %if.end85, label %if.then84, !dbg !6883

if.then84:                                        ; preds = %if.then81
  br label %for.inc, !dbg !6884

if.end85:                                         ; preds = %if.then81
  %50 = load %struct.rtx_def*, %struct.rtx_def** %twin, align 8, !dbg !6885
  %51 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6887
  %cmp86 = icmp eq %struct.rtx_def* %50, %51, !dbg !6888
  br i1 %cmp86, label %if.then88, label %if.else90, !dbg !6889

if.then88:                                        ; preds = %if.end85
  %52 = load %struct._dep*, %struct._dep** %dep, align 8, !dbg !6890
  %call89 = call i32 @dep_cost(%struct._dep* %52), !dbg !6891
  store i32 %call89, i32* %cost, align 4, !dbg !6892
  br label %if.end92, !dbg !6893

if.else90:                                        ; preds = %if.end85
  call void @llvm.dbg.declare(metadata %struct._dep* %_dep1, metadata !6894, metadata !DIExpression()), !dbg !6896
  call void @llvm.dbg.declare(metadata %struct._dep** %dep1, metadata !6897, metadata !DIExpression()), !dbg !6899
  store %struct._dep* %_dep1, %struct._dep** %dep1, align 8, !dbg !6899
  %53 = load %struct._dep*, %struct._dep** %dep1, align 8, !dbg !6900
  %54 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6901
  %55 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !6902
  call void @init_dep(%struct._dep* %53, %struct.rtx_def* %54, %struct.rtx_def* %55, i32 12), !dbg !6903
  %56 = load %struct._dep*, %struct._dep** %dep1, align 8, !dbg !6904
  %call91 = call i32 @dep_cost(%struct._dep* %56), !dbg !6905
  store i32 %call91, i32* %cost, align 4, !dbg !6906
  br label %if.end92

if.end92:                                         ; preds = %if.else90, %if.then88
  %57 = load i32, i32* %cost, align 4, !dbg !6907
  %58 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !6908
  %call93 = call i32 @priority(%struct.rtx_def* %58), !dbg !6909
  %add = add nsw i32 %57, %call93, !dbg !6910
  store i32 %add, i32* %next_priority, align 4, !dbg !6911
  %59 = load i32, i32* %next_priority, align 4, !dbg !6912
  %60 = load i32, i32* %this_priority, align 4, !dbg !6914
  %cmp94 = icmp sgt i32 %59, %60, !dbg !6915
  br i1 %cmp94, label %if.then96, label %if.end97, !dbg !6916

if.then96:                                        ; preds = %if.end92
  %61 = load i32, i32* %next_priority, align 4, !dbg !6917
  store i32 %61, i32* %this_priority, align 4, !dbg !6918
  br label %if.end97, !dbg !6919

if.end97:                                         ; preds = %if.then96, %if.end92
  br label %if.end98, !dbg !6920

if.end98:                                         ; preds = %if.end97, %for.body
  br label %for.inc, !dbg !6921

for.inc:                                          ; preds = %if.end98, %if.then84
  call void @sd_iterator_next(%struct._sd_iterator* %sd_it), !dbg !6863
  br label %for.cond, !dbg !6863, !llvm.loop !6922

for.end:                                          ; preds = %for.cond
  %62 = load %struct.rtx_def*, %struct.rtx_def** %twin, align 8, !dbg !6924
  %u99 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %62, i32 0, i32 1, !dbg !6924
  %fld100 = bitcast %union.u* %u99 to [1 x %union.rtunion_def]*, !dbg !6924
  %arrayidx101 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld100, i64 0, i64 1, !dbg !6924
  %rt_rtx102 = bitcast %union.rtunion_def* %arrayidx101 to %struct.rtx_def**, !dbg !6924
  %63 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx102, align 8, !dbg !6924
  store %struct.rtx_def* %63, %struct.rtx_def** %twin, align 8, !dbg !6925
  br label %do.cond, !dbg !6926

do.cond:                                          ; preds = %for.end
  %64 = load %struct.rtx_def*, %struct.rtx_def** %twin, align 8, !dbg !6927
  %65 = load %struct.rtx_def*, %struct.rtx_def** %prev_first, align 8, !dbg !6928
  %cmp103 = icmp ne %struct.rtx_def* %64, %65, !dbg !6929
  br i1 %cmp103, label %do.body, label %do.end, !dbg !6926, !llvm.loop !6930

do.end:                                           ; preds = %do.cond
  br label %if.end105

if.end105:                                        ; preds = %do.end, %if.then34
  %66 = load i32, i32* %this_priority, align 4, !dbg !6932
  %cmp106 = icmp slt i32 %66, 0, !dbg !6934
  br i1 %cmp106, label %if.then108, label %if.end116, !dbg !6935

if.then108:                                       ; preds = %if.end105
  %67 = load i32, i32* %this_priority, align 4, !dbg !6936
  %cmp109 = icmp eq i32 %67, -1, !dbg !6936
  br i1 %cmp109, label %cond.false112, label %cond.true111, !dbg !6936

cond.true111:                                     ; preds = %if.then108
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 1090, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !6936
  br label %cond.end113, !dbg !6936

cond.false112:                                    ; preds = %if.then108
  br label %cond.end113, !dbg !6936

cond.end113:                                      ; preds = %cond.false112, %cond.true111
  %cond114 = phi i32 [ 0, %cond.true111 ], [ 0, %cond.false112 ], !dbg !6936
  %68 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6938
  %call115 = call i32 @insn_cost(%struct.rtx_def* %68), !dbg !6939
  store i32 %call115, i32* %this_priority, align 4, !dbg !6940
  br label %if.end116, !dbg !6941

if.end116:                                        ; preds = %cond.end113, %if.end105
  %69 = load i32, i32* %this_priority, align 4, !dbg !6942
  %70 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6943
  %tobool117 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %70, null, !dbg !6943
  br i1 %tobool117, label %cond.true118, label %cond.false120, !dbg !6943

cond.true118:                                     ; preds = %if.end116
  %71 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6943
  %base119 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %71, i32 0, i32 0, !dbg !6943
  br label %cond.end121, !dbg !6943

cond.false120:                                    ; preds = %if.end116
  br label %cond.end121, !dbg !6943

cond.end121:                                      ; preds = %cond.false120, %cond.true118
  %cond122 = phi %struct.VEC_haifa_insn_data_def_base* [ %base119, %cond.true118 ], [ null, %cond.false120 ], !dbg !6943
  %72 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6943
  %u123 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %72, i32 0, i32 1, !dbg !6943
  %fld124 = bitcast %union.u* %u123 to [1 x %union.rtunion_def]*, !dbg !6943
  %arrayidx125 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld124, i64 0, i64 0, !dbg !6943
  %rt_int126 = bitcast %union.rtunion_def* %arrayidx125 to i32*, !dbg !6943
  %73 = load i32, i32* %rt_int126, align 8, !dbg !6943
  %call127 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond122, i32 %73), !dbg !6943
  %priority = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call127, i32 0, i32 1, !dbg !6943
  store i32 %69, i32* %priority, align 4, !dbg !6944
  %74 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6945
  %tobool128 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %74, null, !dbg !6945
  br i1 %tobool128, label %cond.true129, label %cond.false131, !dbg !6945

cond.true129:                                     ; preds = %cond.end121
  %75 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6945
  %base130 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %75, i32 0, i32 0, !dbg !6945
  br label %cond.end132, !dbg !6945

cond.false131:                                    ; preds = %cond.end121
  br label %cond.end132, !dbg !6945

cond.end132:                                      ; preds = %cond.false131, %cond.true129
  %cond133 = phi %struct.VEC_haifa_insn_data_def_base* [ %base130, %cond.true129 ], [ null, %cond.false131 ], !dbg !6945
  %76 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6945
  %u134 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %76, i32 0, i32 1, !dbg !6945
  %fld135 = bitcast %union.u* %u134 to [1 x %union.rtunion_def]*, !dbg !6945
  %arrayidx136 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld135, i64 0, i64 0, !dbg !6945
  %rt_int137 = bitcast %union.rtunion_def* %arrayidx136 to i32*, !dbg !6945
  %77 = load i32, i32* %rt_int137, align 8, !dbg !6945
  %call138 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond133, i32 %77), !dbg !6945
  %priority_status139 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call138, i32 0, i32 7, !dbg !6945
  store i8 1, i8* %priority_status139, align 1, !dbg !6946
  br label %if.end140, !dbg !6947

if.end140:                                        ; preds = %cond.end132, %cond.end21
  %78 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6948
  %tobool141 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %78, null, !dbg !6948
  br i1 %tobool141, label %cond.true142, label %cond.false144, !dbg !6948

cond.true142:                                     ; preds = %if.end140
  %79 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6948
  %base143 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %79, i32 0, i32 0, !dbg !6948
  br label %cond.end145, !dbg !6948

cond.false144:                                    ; preds = %if.end140
  br label %cond.end145, !dbg !6948

cond.end145:                                      ; preds = %cond.false144, %cond.true142
  %cond146 = phi %struct.VEC_haifa_insn_data_def_base* [ %base143, %cond.true142 ], [ null, %cond.false144 ], !dbg !6948
  %80 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6948
  %u147 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %80, i32 0, i32 1, !dbg !6948
  %fld148 = bitcast %union.u* %u147 to [1 x %union.rtunion_def]*, !dbg !6948
  %arrayidx149 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld148, i64 0, i64 0, !dbg !6948
  %rt_int150 = bitcast %union.rtunion_def* %arrayidx149 to i32*, !dbg !6948
  %81 = load i32, i32* %rt_int150, align 8, !dbg !6948
  %call151 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond146, i32 %81), !dbg !6948
  %priority152 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call151, i32 0, i32 1, !dbg !6948
  %82 = load i32, i32* %priority152, align 4, !dbg !6948
  store i32 %82, i32* %retval, align 4, !dbg !6949
  br label %return, !dbg !6949

return:                                           ; preds = %cond.end145, %if.then
  %83 = load i32, i32* %retval, align 4, !dbg !6950
  ret i32 %83, !dbg !6950
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @setup_sched_dump() #0 !dbg !6951 {
entry:
  %0 = load i32, i32* @sched_verbose_param, align 4, !dbg !6952
  store i32 %0, i32* @sched_verbose, align 4, !dbg !6953
  %1 = load i32, i32* @sched_verbose_param, align 4, !dbg !6954
  %cmp = icmp eq i32 %1, 0, !dbg !6956
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !6957

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6958
  %tobool = icmp ne %struct._IO_FILE* %2, null, !dbg !6958
  br i1 %tobool, label %if.then, label %if.end, !dbg !6959

if.then:                                          ; preds = %land.lhs.true
  store i32 1, i32* @sched_verbose, align 4, !dbg !6960
  br label %if.end, !dbg !6961

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %3 = load i32, i32* @sched_verbose_param, align 4, !dbg !6962
  %cmp1 = icmp sge i32 %3, 10, !dbg !6963
  br i1 %cmp1, label %cond.true, label %lor.lhs.false, !dbg !6964

lor.lhs.false:                                    ; preds = %if.end
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6965
  %tobool2 = icmp ne %struct._IO_FILE* %4, null, !dbg !6965
  br i1 %tobool2, label %cond.false, label %cond.true, !dbg !6966

cond.true:                                        ; preds = %lor.lhs.false, %if.end
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !6967
  br label %cond.end, !dbg !6966

cond.false:                                       ; preds = %lor.lhs.false
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6968
  br label %cond.end, !dbg !6966

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._IO_FILE* [ %5, %cond.true ], [ %6, %cond.false ], !dbg !6966
  store %struct._IO_FILE* %cond, %struct._IO_FILE** @sched_dump, align 8, !dbg !6969
  ret void, !dbg !6970
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @sched_init() #0 !dbg !6971 {
entry:
  %i = alloca i32, align 4
  %max_regno = alloca i32, align 4
  %0 = load i32, i32* @flag_sched_pressure, align 4, !dbg !6972
  %tobool = icmp ne i32 %0, 0, !dbg !6972
  br i1 %tobool, label %land.lhs.true, label %land.end, !dbg !6973

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @reload_completed, align 4, !dbg !6974
  %tobool1 = icmp ne i32 %1, 0, !dbg !6974
  br i1 %tobool1, label %land.end, label %land.rhs, !dbg !6975

land.rhs:                                         ; preds = %land.lhs.true
  %2 = load %struct.common_sched_info_def*, %struct.common_sched_info_def** @common_sched_info, align 8, !dbg !6976
  %sched_pass_id = getelementptr inbounds %struct.common_sched_info_def, %struct.common_sched_info_def* %2, i32 0, i32 4, !dbg !6977
  %3 = load i32, i32* %sched_pass_id, align 8, !dbg !6977
  %cmp = icmp eq i32 %3, 1, !dbg !6978
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %4 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %cmp, %land.rhs ], !dbg !6979
  %land.ext = zext i1 %4 to i32, !dbg !6975
  %conv = trunc i32 %land.ext to i8, !dbg !6980
  store i8 %conv, i8* @sched_pressure_p, align 1, !dbg !6981
  %5 = load i8, i8* @sched_pressure_p, align 1, !dbg !6982
  %tobool2 = icmp ne i8 %5, 0, !dbg !6982
  br i1 %tobool2, label %if.then, label %if.end, !dbg !6984

if.then:                                          ; preds = %land.end
  call void @ira_setup_eliminable_regset(), !dbg !6985
  br label %if.end, !dbg !6985

if.end:                                           ; preds = %if.then, %land.end
  %6 = load void (%struct.spec_info_def*)*, void (%struct.spec_info_def*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 32), align 8, !dbg !6986
  %tobool3 = icmp ne void (%struct.spec_info_def*)* %6, null, !dbg !6988
  br i1 %tobool3, label %if.then4, label %if.else13, !dbg !6989

if.then4:                                         ; preds = %if.end
  store %struct.spec_info_def* @spec_info_var, %struct.spec_info_def** @spec_info, align 8, !dbg !6990
  %7 = load void (%struct.spec_info_def*)*, void (%struct.spec_info_def*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 32), align 8, !dbg !6992
  %8 = load %struct.spec_info_def*, %struct.spec_info_def** @spec_info, align 8, !dbg !6993
  call void %7(%struct.spec_info_def* %8), !dbg !6994
  %9 = load %struct.spec_info_def*, %struct.spec_info_def** @spec_info, align 8, !dbg !6995
  %mask = getelementptr inbounds %struct.spec_info_def, %struct.spec_info_def* %9, i32 0, i32 0, !dbg !6997
  %10 = load i32, i32* %mask, align 8, !dbg !6997
  %cmp5 = icmp ne i32 %10, 0, !dbg !6998
  br i1 %cmp5, label %if.then7, label %if.else, !dbg !6999

if.then7:                                         ; preds = %if.then4
  %11 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !7000
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %11, i64 84, !dbg !7000
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !7000
  %12 = load i32, i32* %value, align 8, !dbg !7000
  %mul = mul nsw i32 %12, 62, !dbg !7002
  %div = sdiv i32 %mul, 100, !dbg !7003
  %13 = load %struct.spec_info_def*, %struct.spec_info_def** @spec_info, align 8, !dbg !7004
  %data_weakness_cutoff = getelementptr inbounds %struct.spec_info_def, %struct.spec_info_def* %13, i32 0, i32 2, !dbg !7005
  store i32 %div, i32* %data_weakness_cutoff, align 8, !dbg !7006
  %14 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !7007
  %arrayidx8 = getelementptr inbounds %struct.param_info, %struct.param_info* %14, i64 84, !dbg !7007
  %value9 = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx8, i32 0, i32 1, !dbg !7007
  %15 = load i32, i32* %value9, align 8, !dbg !7007
  %mul10 = mul nsw i32 %15, 10000, !dbg !7008
  %div11 = sdiv i32 %mul10, 100, !dbg !7009
  %16 = load %struct.spec_info_def*, %struct.spec_info_def** @spec_info, align 8, !dbg !7010
  %control_weakness_cutoff = getelementptr inbounds %struct.spec_info_def, %struct.spec_info_def* %16, i32 0, i32 3, !dbg !7011
  store i32 %div11, i32* %control_weakness_cutoff, align 4, !dbg !7012
  br label %if.end12, !dbg !7013

if.else:                                          ; preds = %if.then4
  store %struct.spec_info_def* null, %struct.spec_info_def** @spec_info, align 8, !dbg !7014
  br label %if.end12

if.end12:                                         ; preds = %if.else, %if.then7
  br label %if.end14, !dbg !7015

if.else13:                                        ; preds = %if.end
  store %struct.spec_info_def* null, %struct.spec_info_def** @spec_info, align 8, !dbg !7016
  br label %if.end14

if.end14:                                         ; preds = %if.else13, %if.end12
  %17 = load i32 ()*, i32 ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 2), align 8, !dbg !7017
  %tobool15 = icmp ne i32 ()* %17, null, !dbg !7019
  br i1 %tobool15, label %if.then16, label %if.else17, !dbg !7020

if.then16:                                        ; preds = %if.end14
  %18 = load i32 ()*, i32 ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 2), align 8, !dbg !7021
  %call = call i32 %18(), !dbg !7022
  store i32 %call, i32* @issue_rate, align 4, !dbg !7023
  br label %if.end18, !dbg !7024

if.else17:                                        ; preds = %if.end14
  store i32 1, i32* @issue_rate, align 4, !dbg !7025
  br label %if.end18

if.end18:                                         ; preds = %if.else17, %if.then16
  %19 = load i32, i32* @cached_issue_rate, align 4, !dbg !7026
  %20 = load i32, i32* @issue_rate, align 4, !dbg !7028
  %cmp19 = icmp ne i32 %19, %20, !dbg !7029
  br i1 %cmp19, label %if.then21, label %if.end22, !dbg !7030

if.then21:                                        ; preds = %if.end18
  %21 = load i32, i32* @issue_rate, align 4, !dbg !7031
  store i32 %21, i32* @cached_issue_rate, align 4, !dbg !7033
  store i32 0, i32* @cached_first_cycle_multipass_dfa_lookahead, align 4, !dbg !7034
  br label %if.end22, !dbg !7035

if.end22:                                         ; preds = %if.then21, %if.end18
  %22 = load i32 ()*, i32 ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 17), align 8, !dbg !7036
  %tobool23 = icmp ne i32 ()* %22, null, !dbg !7038
  br i1 %tobool23, label %if.then24, label %if.else26, !dbg !7039

if.then24:                                        ; preds = %if.end22
  %23 = load i32 ()*, i32 ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 17), align 8, !dbg !7040
  %call25 = call i32 %23(), !dbg !7041
  store i32 %call25, i32* @dfa_lookahead, align 4, !dbg !7042
  br label %if.end27, !dbg !7043

if.else26:                                        ; preds = %if.end22
  store i32 0, i32* @dfa_lookahead, align 4, !dbg !7044
  br label %if.end27

if.end27:                                         ; preds = %if.else26, %if.then24
  %24 = load void ()*, void ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 11), align 8, !dbg !7045
  %tobool28 = icmp ne void ()* %24, null, !dbg !7047
  br i1 %tobool28, label %if.then29, label %if.end30, !dbg !7048

if.then29:                                        ; preds = %if.end27
  %25 = load void ()*, void ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 11), align 8, !dbg !7049
  call void %25(), !dbg !7050
  br label %if.end30, !dbg !7050

if.end30:                                         ; preds = %if.then29, %if.end27
  %26 = load void ()*, void ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 13), align 8, !dbg !7051
  %tobool31 = icmp ne void ()* %26, null, !dbg !7053
  br i1 %tobool31, label %if.then32, label %if.end33, !dbg !7054

if.then32:                                        ; preds = %if.end30
  %27 = load void ()*, void ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 13), align 8, !dbg !7055
  call void %27(), !dbg !7056
  br label %if.end33, !dbg !7056

if.end33:                                         ; preds = %if.then32, %if.end30
  call void @dfa_start(), !dbg !7057
  %call34 = call i32 @state_size(), !dbg !7058
  %conv35 = sext i32 %call34 to i64, !dbg !7058
  store i64 %conv35, i64* @dfa_state_size, align 8, !dbg !7059
  call void @init_alias_analysis(), !dbg !7060
  %call36 = call i32 @df_set_flags(i32 1), !dbg !7061
  call void @df_note_add_problem(), !dbg !7062
  %28 = load %struct.common_sched_info_def*, %struct.common_sched_info_def** @common_sched_info, align 8, !dbg !7063
  %sched_pass_id37 = getelementptr inbounds %struct.common_sched_info_def, %struct.common_sched_info_def* %28, i32 0, i32 4, !dbg !7065
  %29 = load i32, i32* %sched_pass_id37, align 8, !dbg !7065
  %cmp38 = icmp eq i32 %29, 3, !dbg !7066
  br i1 %cmp38, label %if.then40, label %if.end41, !dbg !7067

if.then40:                                        ; preds = %if.end33
  call void @df_rd_add_problem(), !dbg !7068
  call void @df_chain_add_problem(i32 3), !dbg !7070
  br label %if.end41, !dbg !7071

if.end41:                                         ; preds = %if.then40, %if.end33
  call void @df_analyze(), !dbg !7072
  %30 = load i32, i32* @reload_completed, align 4, !dbg !7073
  %tobool42 = icmp ne i32 %30, 0, !dbg !7073
  br i1 %tobool42, label %if.then43, label %if.end45, !dbg !7075

if.then43:                                        ; preds = %if.end41
  %call44 = call i32 @df_clear_flags(i32 1), !dbg !7076
  br label %if.end45, !dbg !7076

if.end45:                                         ; preds = %if.then43, %if.end41
  call void @regstat_compute_calls_crossed(), !dbg !7077
  %31 = load void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32, i32)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 6), align 8, !dbg !7078
  %tobool46 = icmp ne void (%struct._IO_FILE*, i32, i32)* %31, null, !dbg !7080
  br i1 %tobool46, label %if.then47, label %if.end49, !dbg !7081

if.then47:                                        ; preds = %if.end45
  %32 = load void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32, i32)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 6), align 8, !dbg !7082
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !7083
  %34 = load i32, i32* @sched_verbose, align 4, !dbg !7084
  %call48 = call i32 @get_max_uid(), !dbg !7085
  %add = add nsw i32 %call48, 1, !dbg !7086
  call void %32(%struct._IO_FILE* %33, i32 %34, i32 %add), !dbg !7087
  br label %if.end49, !dbg !7087

if.end49:                                         ; preds = %if.then47, %if.end45
  %35 = load i8, i8* @sched_pressure_p, align 1, !dbg !7088
  %tobool50 = icmp ne i8 %35, 0, !dbg !7088
  br i1 %tobool50, label %if.then51, label %if.end74, !dbg !7090

if.then51:                                        ; preds = %if.end49
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7091, metadata !DIExpression()), !dbg !7093
  call void @llvm.dbg.declare(metadata i32* %max_regno, metadata !7094, metadata !DIExpression()), !dbg !7095
  %call52 = call i32 @max_reg_num(), !dbg !7096
  store i32 %call52, i32* %max_regno, align 4, !dbg !7095
  %36 = load i32, i32* @sched_verbose, align 4, !dbg !7097
  %tobool53 = icmp ne i32 %36, 0, !dbg !7097
  br i1 %tobool53, label %cond.true, label %cond.false, !dbg !7097

cond.true:                                        ; preds = %if.then51
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !7098
  br label %cond.end, !dbg !7097

cond.false:                                       ; preds = %if.then51
  br label %cond.end, !dbg !7097

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._IO_FILE* [ %37, %cond.true ], [ null, %cond.false ], !dbg !7097
  call void @ira_set_pseudo_classes(%struct._IO_FILE* %cond), !dbg !7099
  %38 = load i32, i32* %max_regno, align 4, !dbg !7100
  %conv54 = sext i32 %38 to i64, !dbg !7100
  %mul55 = mul i64 %conv54, 4, !dbg !7101
  %call56 = call i8* @xmalloc(i64 %mul55), !dbg !7102
  %39 = bitcast i8* %call56 to i32*, !dbg !7103
  store i32* %39, i32** @sched_regno_cover_class, align 8, !dbg !7104
  store i32 0, i32* %i, align 4, !dbg !7105
  br label %for.cond, !dbg !7107

for.cond:                                         ; preds = %for.inc, %cond.end
  %40 = load i32, i32* %i, align 4, !dbg !7108
  %41 = load i32, i32* %max_regno, align 4, !dbg !7110
  %cmp57 = icmp slt i32 %40, %41, !dbg !7111
  br i1 %cmp57, label %for.body, label %for.end, !dbg !7112

for.body:                                         ; preds = %for.cond
  %42 = load i32, i32* %i, align 4, !dbg !7113
  %cmp59 = icmp slt i32 %42, 53, !dbg !7114
  br i1 %cmp59, label %cond.true61, label %cond.false65, !dbg !7113

cond.true61:                                      ; preds = %for.body
  %43 = load i32, i32* %i, align 4, !dbg !7115
  %idxprom = sext i32 %43 to i64, !dbg !7115
  %arrayidx62 = getelementptr inbounds [53 x i32], [53 x i32]* @regclass_map, i64 0, i64 %idxprom, !dbg !7115
  %44 = load i32, i32* %arrayidx62, align 4, !dbg !7115
  %idxprom63 = zext i32 %44 to i64, !dbg !7116
  %arrayidx64 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_class_translate, i64 0, i64 %idxprom63, !dbg !7116
  %45 = load i32, i32* %arrayidx64, align 4, !dbg !7116
  br label %cond.end67, !dbg !7113

cond.false65:                                     ; preds = %for.body
  %46 = load i32, i32* %i, align 4, !dbg !7117
  %call66 = call i32 @reg_cover_class(i32 %46), !dbg !7118
  br label %cond.end67, !dbg !7113

cond.end67:                                       ; preds = %cond.false65, %cond.true61
  %cond68 = phi i32 [ %45, %cond.true61 ], [ %call66, %cond.false65 ], !dbg !7113
  %47 = load i32*, i32** @sched_regno_cover_class, align 8, !dbg !7119
  %48 = load i32, i32* %i, align 4, !dbg !7120
  %idxprom69 = sext i32 %48 to i64, !dbg !7119
  %arrayidx70 = getelementptr inbounds i32, i32* %47, i64 %idxprom69, !dbg !7119
  store i32 %cond68, i32* %arrayidx70, align 4, !dbg !7121
  br label %for.inc, !dbg !7119

for.inc:                                          ; preds = %cond.end67
  %49 = load i32, i32* %i, align 4, !dbg !7122
  %inc = add nsw i32 %49, 1, !dbg !7122
  store i32 %inc, i32* %i, align 4, !dbg !7122
  br label %for.cond, !dbg !7123, !llvm.loop !7124

for.end:                                          ; preds = %for.cond
  %call71 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !7126
  store %struct.bitmap_head_def* %call71, %struct.bitmap_head_def** @curr_reg_live, align 8, !dbg !7127
  %call72 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !7128
  store %struct.bitmap_head_def* %call72, %struct.bitmap_head_def** @saved_reg_live, align 8, !dbg !7129
  %call73 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !7130
  store %struct.bitmap_head_def* %call73, %struct.bitmap_head_def** @region_ref_regs, align 8, !dbg !7131
  br label %if.end74, !dbg !7132

if.end74:                                         ; preds = %for.end, %if.end49
  %50 = load i64, i64* @dfa_state_size, align 8, !dbg !7133
  %call75 = call i8* @xmalloc(i64 %50), !dbg !7134
  store i8* %call75, i8** @curr_state, align 8, !dbg !7135
  ret void, !dbg !7136
}

declare dso_local void @ira_setup_eliminable_regset() #2

declare dso_local void @dfa_start() #2

declare dso_local i32 @state_size() #2

declare dso_local void @init_alias_analysis() #2

declare dso_local i32 @df_set_flags(i32) #2

declare dso_local void @df_note_add_problem() #2

declare dso_local void @df_rd_add_problem() #2

declare dso_local void @df_chain_add_problem(i32) #2

declare dso_local void @df_analyze() #2

declare dso_local i32 @df_clear_flags(i32) #2

declare dso_local void @regstat_compute_calls_crossed() #2

declare dso_local i32 @get_max_uid() #2

declare dso_local i32 @max_reg_num() #2

declare dso_local void @ira_set_pseudo_classes(%struct._IO_FILE*) #2

declare dso_local i8* @xmalloc(i64) #2

declare dso_local i32 @reg_cover_class(i32) #2

declare dso_local %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @haifa_sched_init() #0 !dbg !7137 {
entry:
  %bbs = alloca %struct.VEC_basic_block_heap*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  call void @setup_sched_dump(), !dbg !7138
  call void @sched_init(), !dbg !7139
  %0 = load %struct.spec_info_def*, %struct.spec_info_def** @spec_info, align 8, !dbg !7140
  %cmp = icmp ne %struct.spec_info_def* %0, null, !dbg !7142
  br i1 %cmp, label %if.then, label %if.end, !dbg !7143

if.then:                                          ; preds = %entry
  %1 = load %struct.sched_deps_info_def*, %struct.sched_deps_info_def** @sched_deps_info, align 8, !dbg !7144
  %use_deps_list = getelementptr inbounds %struct.sched_deps_info_def, %struct.sched_deps_info_def* %1, i32 0, i32 12, !dbg !7146
  %bf.load = load i8, i8* %use_deps_list, align 8, !dbg !7147
  %bf.clear = and i8 %bf.load, -3, !dbg !7147
  %bf.set = or i8 %bf.clear, 2, !dbg !7147
  store i8 %bf.set, i8* %use_deps_list, align 8, !dbg !7147
  %2 = load %struct.sched_deps_info_def*, %struct.sched_deps_info_def** @sched_deps_info, align 8, !dbg !7148
  %generate_spec_deps = getelementptr inbounds %struct.sched_deps_info_def, %struct.sched_deps_info_def* %2, i32 0, i32 12, !dbg !7149
  %bf.load1 = load i8, i8* %generate_spec_deps, align 8, !dbg !7150
  %bf.clear2 = and i8 %bf.load1, -5, !dbg !7150
  %bf.set3 = or i8 %bf.clear2, 4, !dbg !7150
  store i8 %bf.set3, i8* %generate_spec_deps, align 8, !dbg !7150
  br label %if.end, !dbg !7151

if.end:                                           ; preds = %if.then, %entry
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap** %bbs, metadata !7152, metadata !DIExpression()), !dbg !7154
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7155
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !7155
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !7155
  %4 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !7155
  %x_n_basic_blocks = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %4, i32 0, i32 3, !dbg !7155
  %5 = load i32, i32* %x_n_basic_blocks, align 8, !dbg !7155
  %call = call %struct.VEC_basic_block_heap* @VEC_basic_block_heap_alloc(i32 %5), !dbg !7155
  store %struct.VEC_basic_block_heap* %call, %struct.VEC_basic_block_heap** %bbs, align 8, !dbg !7154
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !7156, metadata !DIExpression()), !dbg !7157
  call void @sched_init_bbs(), !dbg !7158
  %6 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7159
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %6, i64 0, !dbg !7159
  %cfg5 = getelementptr inbounds %struct.function, %struct.function* %add.ptr4, i32 0, i32 1, !dbg !7159
  %7 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg5, align 8, !dbg !7159
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %7, i32 0, i32 0, !dbg !7159
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !7159
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 6, !dbg !7159
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !7159
  store %struct.basic_block_def* %9, %struct.basic_block_def** %bb, align 8, !dbg !7159
  br label %for.cond, !dbg !7159

for.cond:                                         ; preds = %for.inc, %if.end
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7161
  %11 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7161
  %add.ptr6 = getelementptr inbounds %struct.function, %struct.function* %11, i64 0, !dbg !7161
  %cfg7 = getelementptr inbounds %struct.function, %struct.function* %add.ptr6, i32 0, i32 1, !dbg !7161
  %12 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg7, align 8, !dbg !7161
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %12, i32 0, i32 1, !dbg !7161
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !7161
  %cmp8 = icmp ne %struct.basic_block_def* %10, %13, !dbg !7161
  br i1 %cmp8, label %for.body, label %for.end, !dbg !7159

for.body:                                         ; preds = %for.cond
  %14 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %bbs, align 8, !dbg !7163
  %tobool = icmp ne %struct.VEC_basic_block_heap* %14, null, !dbg !7163
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7163

cond.true:                                        ; preds = %for.body
  %15 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %bbs, align 8, !dbg !7163
  %base = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %15, i32 0, i32 0, !dbg !7163
  br label %cond.end, !dbg !7163

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !7163

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7163
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7163
  %call9 = call %struct.basic_block_def** @VEC_basic_block_base_quick_push(%struct.VEC_basic_block_base* %cond, %struct.basic_block_def* %16), !dbg !7163
  br label %for.inc, !dbg !7163

for.inc:                                          ; preds = %cond.end
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7161
  %next_bb10 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %17, i32 0, i32 6, !dbg !7161
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb10, align 8, !dbg !7161
  store %struct.basic_block_def* %18, %struct.basic_block_def** %bb, align 8, !dbg !7161
  br label %for.cond, !dbg !7161, !llvm.loop !7164

for.end:                                          ; preds = %for.cond
  %19 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %bbs, align 8, !dbg !7166
  call void @sched_init_luids(%struct.VEC_basic_block_heap* %19, %struct.basic_block_def* null, %struct.VEC_rtx_heap* null, %struct.rtx_def* null), !dbg !7167
  call void @sched_deps_init(i8 zeroext 1), !dbg !7168
  call void @sched_extend_target(), !dbg !7169
  %20 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %bbs, align 8, !dbg !7170
  call void @haifa_init_h_i_d(%struct.VEC_basic_block_heap* %20, %struct.basic_block_def* null, %struct.VEC_rtx_heap* null, %struct.rtx_def* null), !dbg !7171
  call void @VEC_basic_block_heap_free(%struct.VEC_basic_block_heap** %bbs), !dbg !7172
  store void (%struct.basic_block_def*, %struct.basic_block_def*)* @haifa_init_only_bb, void (%struct.basic_block_def*, %struct.basic_block_def*)** @sched_init_only_bb, align 8, !dbg !7173
  store %struct.basic_block_def* (%struct.basic_block_def*, %struct.rtx_def*)* @sched_split_block_1, %struct.basic_block_def* (%struct.basic_block_def*, %struct.rtx_def*)** @sched_split_block, align 8, !dbg !7174
  store %struct.basic_block_def* (%struct.basic_block_def*)* @sched_create_empty_bb_1, %struct.basic_block_def* (%struct.basic_block_def*)** @sched_create_empty_bb, align 8, !dbg !7175
  store i8 0, i8* @haifa_recovery_bb_ever_added_p, align 1, !dbg !7176
  store i32 0, i32* @nr_be_in_control, align 4, !dbg !7177
  store i32 0, i32* @nr_be_in_data, align 4, !dbg !7178
  store i32 0, i32* @nr_begin_control, align 4, !dbg !7179
  store i32 0, i32* @nr_begin_data, align 4, !dbg !7180
  store %struct.basic_block_def* null, %struct.basic_block_def** @before_recovery, align 8, !dbg !7181
  store %struct.basic_block_def* null, %struct.basic_block_def** @after_recovery, align 8, !dbg !7182
  ret void, !dbg !7183
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_basic_block_heap* @VEC_basic_block_heap_alloc(i32 %alloc_) #0 !dbg !7184 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7187, metadata !DIExpression()), !dbg !7188
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !7188
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !7188
  %1 = bitcast i8* %call to %struct.VEC_basic_block_heap*, !dbg !7188
  ret %struct.VEC_basic_block_heap* %1, !dbg !7188
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @sched_init_bbs() #0 !dbg !7189 {
entry:
  call void @sched_extend_bb(), !dbg !7190
  ret void, !dbg !7191
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def** @VEC_basic_block_base_quick_push(%struct.VEC_basic_block_base* %vec_, %struct.basic_block_def* %obj_) #0 !dbg !7192 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  %obj_.addr = alloca %struct.basic_block_def*, align 8
  %slot_ = alloca %struct.basic_block_def**, align 8
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !7196, metadata !DIExpression()), !dbg !7197
  store %struct.basic_block_def* %obj_, %struct.basic_block_def** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %obj_.addr, metadata !7198, metadata !DIExpression()), !dbg !7197
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %slot_, metadata !7199, metadata !DIExpression()), !dbg !7197
  %0 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !7197
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %0, i32 0, i32 0, !dbg !7197
  %1 = load i32, i32* %num, align 8, !dbg !7197
  %2 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !7197
  %alloc = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %2, i32 0, i32 1, !dbg !7197
  %3 = load i32, i32* %alloc, align 4, !dbg !7197
  %cmp = icmp ult i32 %1, %3, !dbg !7197
  %conv = zext i1 %cmp to i32, !dbg !7197
  %4 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !7197
  %vec = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %4, i32 0, i32 2, !dbg !7197
  %5 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !7197
  %num1 = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %5, i32 0, i32 0, !dbg !7197
  %6 = load i32, i32* %num1, align 8, !dbg !7197
  %inc = add i32 %6, 1, !dbg !7197
  store i32 %inc, i32* %num1, align 8, !dbg !7197
  %idxprom = zext i32 %6 to i64, !dbg !7197
  %arrayidx = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %vec, i64 0, i64 %idxprom, !dbg !7197
  store %struct.basic_block_def** %arrayidx, %struct.basic_block_def*** %slot_, align 8, !dbg !7197
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %obj_.addr, align 8, !dbg !7197
  %8 = load %struct.basic_block_def**, %struct.basic_block_def*** %slot_, align 8, !dbg !7197
  store %struct.basic_block_def* %7, %struct.basic_block_def** %8, align 8, !dbg !7197
  %9 = load %struct.basic_block_def**, %struct.basic_block_def*** %slot_, align 8, !dbg !7197
  ret %struct.basic_block_def** %9, !dbg !7197
}

declare dso_local void @sched_deps_init(i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @sched_extend_target() #0 !dbg !7200 {
entry:
  %0 = load void ()*, void ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 22), align 8, !dbg !7201
  %tobool = icmp ne void ()* %0, null, !dbg !7203
  br i1 %tobool, label %if.then, label %if.end, !dbg !7204

if.then:                                          ; preds = %entry
  %1 = load void ()*, void ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 22), align 8, !dbg !7205
  call void %1(), !dbg !7206
  br label %if.end, !dbg !7206

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !7207
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @haifa_init_h_i_d(%struct.VEC_basic_block_heap* %bbs, %struct.basic_block_def* %bb, %struct.VEC_rtx_heap* %insns, %struct.rtx_def* %insn) #0 !dbg !7208 {
entry:
  %bbs.addr = alloca %struct.VEC_basic_block_heap*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %insns.addr = alloca %struct.VEC_rtx_heap*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %ssi = alloca %struct.sched_scan_info_def, align 8
  store %struct.VEC_basic_block_heap* %bbs, %struct.VEC_basic_block_heap** %bbs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap** %bbs.addr, metadata !7209, metadata !DIExpression()), !dbg !7210
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !7211, metadata !DIExpression()), !dbg !7212
  store %struct.VEC_rtx_heap* %insns, %struct.VEC_rtx_heap** %insns.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_heap** %insns.addr, metadata !7213, metadata !DIExpression()), !dbg !7214
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !7215, metadata !DIExpression()), !dbg !7216
  call void @llvm.dbg.declare(metadata %struct.sched_scan_info_def* %ssi, metadata !7217, metadata !DIExpression()), !dbg !7218
  %0 = bitcast %struct.sched_scan_info_def* %ssi to i8*, !dbg !7218
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %0, i8* align 8 bitcast (%struct.sched_scan_info_def* @__const.haifa_init_h_i_d.ssi to i8*), i64 32, i1 false), !dbg !7218
  %1 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %bbs.addr, align 8, !dbg !7219
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7220
  %3 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %insns.addr, align 8, !dbg !7221
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7222
  call void @sched_scan(%struct.sched_scan_info_def* %ssi, %struct.VEC_basic_block_heap* %1, %struct.basic_block_def* %2, %struct.VEC_rtx_heap* %3, %struct.rtx_def* %4), !dbg !7223
  ret void, !dbg !7224
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_basic_block_heap_free(%struct.VEC_basic_block_heap** %vec_) #0 !dbg !7225 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_heap**, align 8
  store %struct.VEC_basic_block_heap** %vec_, %struct.VEC_basic_block_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap*** %vec_.addr, metadata !7229, metadata !DIExpression()), !dbg !7230
  %0 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !7231
  %1 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %0, align 8, !dbg !7231
  %tobool = icmp ne %struct.VEC_basic_block_heap* %1, null, !dbg !7231
  br i1 %tobool, label %if.then, label %if.end, !dbg !7230

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !7231
  %3 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %2, align 8, !dbg !7231
  %4 = bitcast %struct.VEC_basic_block_heap* %3 to i8*, !dbg !7231
  call void @free(i8* %4), !dbg !7231
  br label %if.end, !dbg !7231

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !7230
  store %struct.VEC_basic_block_heap* null, %struct.VEC_basic_block_heap** %5, align 8, !dbg !7230
  ret void, !dbg !7230
}

; Function Attrs: noinline nounwind uwtable
define internal void @haifa_init_only_bb(%struct.basic_block_def* %bb, %struct.basic_block_def* %after) #0 !dbg !7233 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %after.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !7234, metadata !DIExpression()), !dbg !7235
  store %struct.basic_block_def* %after, %struct.basic_block_def** %after.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %after.addr, metadata !7236, metadata !DIExpression()), !dbg !7237
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7238
  %cmp = icmp ne %struct.basic_block_def* %0, null, !dbg !7238
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !7238

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 5515, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !7238
  br label %cond.end, !dbg !7238

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7238

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7238
  call void @sched_init_bbs(), !dbg !7239
  %1 = load %struct.common_sched_info_def*, %struct.common_sched_info_def** @common_sched_info, align 8, !dbg !7240
  %add_block = getelementptr inbounds %struct.common_sched_info_def, %struct.common_sched_info_def* %1, i32 0, i32 1, !dbg !7242
  %2 = load void (%struct.basic_block_def*, %struct.basic_block_def*)*, void (%struct.basic_block_def*, %struct.basic_block_def*)** %add_block, align 8, !dbg !7242
  %tobool = icmp ne void (%struct.basic_block_def*, %struct.basic_block_def*)* %2, null, !dbg !7240
  br i1 %tobool, label %if.then, label %if.end, !dbg !7243

if.then:                                          ; preds = %cond.end
  %3 = load %struct.common_sched_info_def*, %struct.common_sched_info_def** @common_sched_info, align 8, !dbg !7244
  %add_block1 = getelementptr inbounds %struct.common_sched_info_def, %struct.common_sched_info_def* %3, i32 0, i32 1, !dbg !7245
  %4 = load void (%struct.basic_block_def*, %struct.basic_block_def*)*, void (%struct.basic_block_def*, %struct.basic_block_def*)** %add_block1, align 8, !dbg !7245
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7246
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %after.addr, align 8, !dbg !7247
  call void %4(%struct.basic_block_def* %5, %struct.basic_block_def* %6), !dbg !7244
  br label %if.end, !dbg !7244

if.end:                                           ; preds = %if.then, %cond.end
  ret void, !dbg !7248
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.basic_block_def* @sched_split_block_1(%struct.basic_block_def* %first_bb, %struct.rtx_def* %after) #0 !dbg !7249 {
entry:
  %first_bb.addr = alloca %struct.basic_block_def*, align 8
  %after.addr = alloca %struct.rtx_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  store %struct.basic_block_def* %first_bb, %struct.basic_block_def** %first_bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %first_bb.addr, metadata !7250, metadata !DIExpression()), !dbg !7251
  store %struct.rtx_def* %after, %struct.rtx_def** %after.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %after.addr, metadata !7252, metadata !DIExpression()), !dbg !7253
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !7254, metadata !DIExpression()), !dbg !7255
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %first_bb.addr, align 8, !dbg !7256
  %1 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !7257
  %2 = bitcast %struct.rtx_def* %1 to i8*, !dbg !7257
  %call = call %struct.edge_def* @split_block(%struct.basic_block_def* %0, i8* %2), !dbg !7258
  store %struct.edge_def* %call, %struct.edge_def** %e, align 8, !dbg !7259
  %3 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !7260
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %3, i32 0, i32 0, !dbg !7260
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !7260
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %first_bb.addr, align 8, !dbg !7260
  %cmp = icmp eq %struct.basic_block_def* %4, %5, !dbg !7260
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !7260

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 5531, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !7260
  br label %cond.end, !dbg !7260

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7260

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7260
  %6 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !7261
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %6, i32 0, i32 1, !dbg !7262
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !7262
  ret %struct.basic_block_def* %7, !dbg !7263
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.basic_block_def* @sched_create_empty_bb_1(%struct.basic_block_def* %after) #0 !dbg !7264 {
entry:
  %after.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %after, %struct.basic_block_def** %after.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %after.addr, metadata !7265, metadata !DIExpression()), !dbg !7266
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %after.addr, align 8, !dbg !7267
  %call = call %struct.basic_block_def* @create_empty_bb(%struct.basic_block_def* %0), !dbg !7268
  ret %struct.basic_block_def* %call, !dbg !7269
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @haifa_sched_finish() #0 !dbg !7270 {
entry:
  %c = alloca i8, align 1
  store %struct.basic_block_def* (%struct.basic_block_def*)* null, %struct.basic_block_def* (%struct.basic_block_def*)** @sched_create_empty_bb, align 8, !dbg !7271
  store %struct.basic_block_def* (%struct.basic_block_def*, %struct.rtx_def*)* null, %struct.basic_block_def* (%struct.basic_block_def*, %struct.rtx_def*)** @sched_split_block, align 8, !dbg !7272
  store void (%struct.basic_block_def*, %struct.basic_block_def*)* null, void (%struct.basic_block_def*, %struct.basic_block_def*)** @sched_init_only_bb, align 8, !dbg !7273
  %0 = load %struct.spec_info_def*, %struct.spec_info_def** @spec_info, align 8, !dbg !7274
  %tobool = icmp ne %struct.spec_info_def* %0, null, !dbg !7274
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !7276

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.spec_info_def*, %struct.spec_info_def** @spec_info, align 8, !dbg !7277
  %dump = getelementptr inbounds %struct.spec_info_def, %struct.spec_info_def* %1, i32 0, i32 1, !dbg !7278
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %dump, align 8, !dbg !7278
  %tobool1 = icmp ne %struct._IO_FILE* %2, null, !dbg !7277
  br i1 %tobool1, label %if.then, label %if.end, !dbg !7279

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i8* %c, metadata !7280, metadata !DIExpression()), !dbg !7282
  %3 = load i32, i32* @reload_completed, align 4, !dbg !7283
  %tobool2 = icmp ne i32 %3, 0, !dbg !7283
  %4 = zext i1 %tobool2 to i64, !dbg !7283
  %cond = select i1 %tobool2, i32 97, i32 98, !dbg !7283
  %conv = trunc i32 %cond to i8, !dbg !7283
  store i8 %conv, i8* %c, align 1, !dbg !7282
  %5 = load %struct.spec_info_def*, %struct.spec_info_def** @spec_info, align 8, !dbg !7284
  %dump3 = getelementptr inbounds %struct.spec_info_def, %struct.spec_info_def* %5, i32 0, i32 1, !dbg !7285
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %dump3, align 8, !dbg !7285
  %call = call i8* @current_function_name(), !dbg !7286
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.13, i64 0, i64 0), i8* %call), !dbg !7287
  %7 = load %struct.spec_info_def*, %struct.spec_info_def** @spec_info, align 8, !dbg !7288
  %dump5 = getelementptr inbounds %struct.spec_info_def, %struct.spec_info_def* %7, i32 0, i32 1, !dbg !7289
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %dump5, align 8, !dbg !7289
  %9 = load i8, i8* %c, align 1, !dbg !7290
  %conv6 = sext i8 %9 to i32, !dbg !7290
  %10 = load i32, i32* @nr_begin_data, align 4, !dbg !7291
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.14, i64 0, i64 0), i32 %conv6, i32 %10), !dbg !7292
  %11 = load %struct.spec_info_def*, %struct.spec_info_def** @spec_info, align 8, !dbg !7293
  %dump8 = getelementptr inbounds %struct.spec_info_def, %struct.spec_info_def* %11, i32 0, i32 1, !dbg !7294
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %dump8, align 8, !dbg !7294
  %13 = load i8, i8* %c, align 1, !dbg !7295
  %conv9 = sext i8 %13 to i32, !dbg !7295
  %14 = load i32, i32* @nr_be_in_data, align 4, !dbg !7296
  %call10 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.15, i64 0, i64 0), i32 %conv9, i32 %14), !dbg !7297
  %15 = load %struct.spec_info_def*, %struct.spec_info_def** @spec_info, align 8, !dbg !7298
  %dump11 = getelementptr inbounds %struct.spec_info_def, %struct.spec_info_def* %15, i32 0, i32 1, !dbg !7299
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** %dump11, align 8, !dbg !7299
  %17 = load i8, i8* %c, align 1, !dbg !7300
  %conv12 = sext i8 %17 to i32, !dbg !7300
  %18 = load i32, i32* @nr_begin_control, align 4, !dbg !7301
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.16, i64 0, i64 0), i32 %conv12, i32 %18), !dbg !7302
  %19 = load %struct.spec_info_def*, %struct.spec_info_def** @spec_info, align 8, !dbg !7303
  %dump14 = getelementptr inbounds %struct.spec_info_def, %struct.spec_info_def* %19, i32 0, i32 1, !dbg !7304
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %dump14, align 8, !dbg !7304
  %21 = load i8, i8* %c, align 1, !dbg !7305
  %conv15 = sext i8 %21 to i32, !dbg !7305
  %22 = load i32, i32* @nr_be_in_control, align 4, !dbg !7306
  %call16 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %20, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.17, i64 0, i64 0), i32 %conv15, i32 %22), !dbg !7307
  br label %if.end, !dbg !7308

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  call void @sched_deps_finish(), !dbg !7309
  call void @sched_finish_luids(), !dbg !7310
  store %struct.haifa_sched_info* null, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !7311
  call void @sched_finish(), !dbg !7312
  ret void, !dbg !7313
}

declare dso_local i8* @current_function_name() #2

declare dso_local void @sched_deps_finish() #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @sched_finish_luids() #0 !dbg !7314 {
entry:
  call void @VEC_int_heap_free(%struct.VEC_int_heap** @sched_luids), !dbg !7315
  store i32 1, i32* @sched_max_luid, align 4, !dbg !7316
  ret void, !dbg !7317
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @sched_finish() #0 !dbg !7318 {
entry:
  call void @haifa_finish_h_i_d(), !dbg !7319
  %0 = load i8, i8* @sched_pressure_p, align 1, !dbg !7320
  %tobool = icmp ne i8 %0, 0, !dbg !7320
  br i1 %tobool, label %if.then, label %if.end, !dbg !7322

if.then:                                          ; preds = %entry
  %1 = load i32*, i32** @sched_regno_cover_class, align 8, !dbg !7323
  %2 = bitcast i32* %1 to i8*, !dbg !7323
  call void @free(i8* %2), !dbg !7325
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @region_ref_regs, align 8, !dbg !7326
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %3), !dbg !7326
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** @region_ref_regs, align 8, !dbg !7326
  %4 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @saved_reg_live, align 8, !dbg !7327
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %4), !dbg !7327
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** @saved_reg_live, align 8, !dbg !7327
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @curr_reg_live, align 8, !dbg !7328
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %5), !dbg !7328
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** @curr_reg_live, align 8, !dbg !7328
  br label %if.end, !dbg !7329

if.end:                                           ; preds = %if.then, %entry
  %6 = load i8*, i8** @curr_state, align 8, !dbg !7330
  call void @free(i8* %6), !dbg !7331
  %7 = load void (%struct._IO_FILE*, i32)*, void (%struct._IO_FILE*, i32)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 7), align 8, !dbg !7332
  %tobool1 = icmp ne void (%struct._IO_FILE*, i32)* %7, null, !dbg !7334
  br i1 %tobool1, label %if.then2, label %if.end3, !dbg !7335

if.then2:                                         ; preds = %if.end
  %8 = load void (%struct._IO_FILE*, i32)*, void (%struct._IO_FILE*, i32)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 7), align 8, !dbg !7336
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !7337
  %10 = load i32, i32* @sched_verbose, align 4, !dbg !7338
  call void %8(%struct._IO_FILE* %9, i32 %10), !dbg !7339
  br label %if.end3, !dbg !7339

if.end3:                                          ; preds = %if.then2, %if.end
  call void @end_alias_analysis(), !dbg !7340
  call void @regstat_free_calls_crossed(), !dbg !7341
  call void @dfa_finish(), !dbg !7342
  ret void, !dbg !7343
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @haifa_finish_h_i_d() #0 !dbg !7344 {
entry:
  %i = alloca i32, align 4
  %data = alloca %struct._haifa_insn_data*, align 8
  %use = alloca %struct.reg_use_data*, align 8
  %next = alloca %struct.reg_use_data*, align 8
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7345, metadata !DIExpression()), !dbg !7346
  call void @llvm.dbg.declare(metadata %struct._haifa_insn_data** %data, metadata !7347, metadata !DIExpression()), !dbg !7349
  call void @llvm.dbg.declare(metadata %struct.reg_use_data** %use, metadata !7350, metadata !DIExpression()), !dbg !7351
  call void @llvm.dbg.declare(metadata %struct.reg_use_data** %next, metadata !7352, metadata !DIExpression()), !dbg !7353
  store i32 0, i32* %i, align 4, !dbg !7354
  br label %for.cond, !dbg !7356

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7357
  %tobool = icmp ne %struct.VEC_haifa_insn_data_def_heap* %0, null, !dbg !7357
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7357

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7357
  %base = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %1, i32 0, i32 0, !dbg !7357
  br label %cond.end, !dbg !7357

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !7357

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_haifa_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7357
  %2 = load i32, i32* %i, align 4, !dbg !7357
  %call = call i32 @VEC_haifa_insn_data_def_base_iterate(%struct.VEC_haifa_insn_data_def_base* %cond, i32 %2, %struct._haifa_insn_data** %data), !dbg !7357
  %tobool1 = icmp ne i32 %call, 0, !dbg !7359
  br i1 %tobool1, label %for.body, label %for.end7, !dbg !7359

for.body:                                         ; preds = %cond.end
  %3 = load %struct._haifa_insn_data*, %struct._haifa_insn_data** %data, align 8, !dbg !7360
  %reg_pressure = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %3, i32 0, i32 13, !dbg !7363
  %4 = load %struct.reg_pressure_data*, %struct.reg_pressure_data** %reg_pressure, align 8, !dbg !7363
  %cmp = icmp ne %struct.reg_pressure_data* %4, null, !dbg !7364
  br i1 %cmp, label %if.then, label %if.end, !dbg !7365

if.then:                                          ; preds = %for.body
  %5 = load %struct._haifa_insn_data*, %struct._haifa_insn_data** %data, align 8, !dbg !7366
  %reg_pressure2 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %5, i32 0, i32 13, !dbg !7367
  %6 = load %struct.reg_pressure_data*, %struct.reg_pressure_data** %reg_pressure2, align 8, !dbg !7367
  %7 = bitcast %struct.reg_pressure_data* %6 to i8*, !dbg !7366
  call void @free(i8* %7), !dbg !7368
  br label %if.end, !dbg !7368

if.end:                                           ; preds = %if.then, %for.body
  %8 = load %struct._haifa_insn_data*, %struct._haifa_insn_data** %data, align 8, !dbg !7369
  %reg_use_list = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %8, i32 0, i32 15, !dbg !7371
  %9 = load %struct.reg_use_data*, %struct.reg_use_data** %reg_use_list, align 8, !dbg !7371
  store %struct.reg_use_data* %9, %struct.reg_use_data** %use, align 8, !dbg !7372
  br label %for.cond3, !dbg !7373

for.cond3:                                        ; preds = %for.inc, %if.end
  %10 = load %struct.reg_use_data*, %struct.reg_use_data** %use, align 8, !dbg !7374
  %cmp4 = icmp ne %struct.reg_use_data* %10, null, !dbg !7376
  br i1 %cmp4, label %for.body5, label %for.end, !dbg !7377

for.body5:                                        ; preds = %for.cond3
  %11 = load %struct.reg_use_data*, %struct.reg_use_data** %use, align 8, !dbg !7378
  %next_insn_use = getelementptr inbounds %struct.reg_use_data, %struct.reg_use_data* %11, i32 0, i32 3, !dbg !7380
  %12 = load %struct.reg_use_data*, %struct.reg_use_data** %next_insn_use, align 8, !dbg !7380
  store %struct.reg_use_data* %12, %struct.reg_use_data** %next, align 8, !dbg !7381
  %13 = load %struct.reg_use_data*, %struct.reg_use_data** %use, align 8, !dbg !7382
  %14 = bitcast %struct.reg_use_data* %13 to i8*, !dbg !7382
  call void @free(i8* %14), !dbg !7383
  br label %for.inc, !dbg !7384

for.inc:                                          ; preds = %for.body5
  %15 = load %struct.reg_use_data*, %struct.reg_use_data** %next, align 8, !dbg !7385
  store %struct.reg_use_data* %15, %struct.reg_use_data** %use, align 8, !dbg !7386
  br label %for.cond3, !dbg !7387, !llvm.loop !7388

for.end:                                          ; preds = %for.cond3
  br label %for.inc6, !dbg !7390

for.inc6:                                         ; preds = %for.end
  %16 = load i32, i32* %i, align 4, !dbg !7391
  %inc = add nsw i32 %16, 1, !dbg !7391
  store i32 %inc, i32* %i, align 4, !dbg !7391
  br label %for.cond, !dbg !7392, !llvm.loop !7393

for.end7:                                         ; preds = %cond.end
  call void @VEC_haifa_insn_data_def_heap_free(%struct.VEC_haifa_insn_data_def_heap** @h_i_d), !dbg !7395
  ret void, !dbg !7396
}

declare dso_local void @free(i8*) #2

declare dso_local void @bitmap_obstack_free(%struct.bitmap_head_def*) #2

declare dso_local void @end_alias_analysis() #2

declare dso_local void @regstat_free_calls_crossed() #2

declare dso_local void @dfa_finish() #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @try_ready(%struct.rtx_def* %next) #0 !dbg !7397 {
entry:
  %retval = alloca i32, align 4
  %next.addr = alloca %struct.rtx_def*, align 8
  %old_ts = alloca i32, align 4
  %ts = alloca i32*, align 8
  %sd_it = alloca %struct._sd_iterator, align 8
  %dep = alloca %struct._dep*, align 8
  %first_p = alloca i8, align 1
  %tmp = alloca %struct._sd_iterator, align 8
  %ds = alloca i32, align 4
  %res = alloca i32, align 4
  %new_pat = alloca %struct.rtx_def*, align 8
  %s = alloca i32, align 4
  store %struct.rtx_def* %next, %struct.rtx_def** %next.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %next.addr, metadata !7398, metadata !DIExpression()), !dbg !7399
  call void @llvm.dbg.declare(metadata i32* %old_ts, metadata !7400, metadata !DIExpression()), !dbg !7401
  call void @llvm.dbg.declare(metadata i32** %ts, metadata !7402, metadata !DIExpression()), !dbg !7404
  %0 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7405
  %tobool = icmp ne %struct.VEC_haifa_insn_data_def_heap* %0, null, !dbg !7405
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7405

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7405
  %base = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %1, i32 0, i32 0, !dbg !7405
  br label %cond.end, !dbg !7405

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7405

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_haifa_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7405
  %2 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7405
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !7405
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7405
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !7405
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !7405
  %3 = load i32, i32* %rt_int, align 8, !dbg !7405
  %call = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond, i32 %3), !dbg !7405
  %todo_spec = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call, i32 0, i32 8, !dbg !7405
  store i32* %todo_spec, i32** %ts, align 8, !dbg !7406
  %4 = load i32*, i32** %ts, align 8, !dbg !7407
  %5 = load i32, i32* %4, align 4, !dbg !7408
  store i32 %5, i32* %old_ts, align 4, !dbg !7409
  %6 = load i32, i32* %old_ts, align 4, !dbg !7410
  %and = and i32 %6, -150994944, !dbg !7410
  %tobool1 = icmp ne i32 %and, 0, !dbg !7410
  br i1 %tobool1, label %cond.true6, label %land.lhs.true, !dbg !7410

land.lhs.true:                                    ; preds = %cond.end
  %7 = load i32, i32* %old_ts, align 4, !dbg !7410
  %and2 = and i32 %7, 134217728, !dbg !7410
  %tobool3 = icmp ne i32 %and2, 0, !dbg !7410
  br i1 %tobool3, label %cond.false7, label %lor.lhs.false, !dbg !7410

lor.lhs.false:                                    ; preds = %land.lhs.true
  %8 = load i32, i32* %old_ts, align 4, !dbg !7410
  %and4 = and i32 %8, 16777215, !dbg !7410
  %tobool5 = icmp ne i32 %and4, 0, !dbg !7410
  br i1 %tobool5, label %cond.false7, label %cond.true6, !dbg !7410

cond.true6:                                       ; preds = %lor.lhs.false, %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 3669, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !7410
  br label %cond.end8, !dbg !7410

cond.false7:                                      ; preds = %lor.lhs.false, %land.lhs.true
  br label %cond.end8, !dbg !7410

cond.end8:                                        ; preds = %cond.false7, %cond.true6
  %cond9 = phi i32 [ 0, %cond.true6 ], [ 0, %cond.false7 ], !dbg !7410
  %9 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7411
  %call10 = call zeroext i8 @sd_lists_empty_p(%struct.rtx_def* %9, i32 3), !dbg !7413
  %tobool11 = icmp ne i8 %call10, 0, !dbg !7413
  br i1 %tobool11, label %if.then, label %if.else, !dbg !7414

if.then:                                          ; preds = %cond.end8
  %10 = load i32*, i32** %ts, align 8, !dbg !7415
  %11 = load i32, i32* %10, align 4, !dbg !7417
  %and12 = and i32 %11, -134217729, !dbg !7417
  store i32 %and12, i32* %10, align 4, !dbg !7417
  %12 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !7418
  %flags = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %12, i32 0, i32 17, !dbg !7420
  %13 = load i32, i32* %flags, align 8, !dbg !7420
  %and13 = and i32 %13, 2, !dbg !7421
  %tobool14 = icmp ne i32 %and13, 0, !dbg !7421
  br i1 %tobool14, label %if.then15, label %if.end, !dbg !7422

if.then15:                                        ; preds = %if.then
  %14 = load i32*, i32** %ts, align 8, !dbg !7423
  %15 = load i32, i32* %14, align 4, !dbg !7424
  %and16 = and i32 %15, -16777216, !dbg !7424
  store i32 %and16, i32* %14, align 4, !dbg !7424
  br label %if.end, !dbg !7425

if.end:                                           ; preds = %if.then15, %if.then
  br label %if.end43, !dbg !7426

if.else:                                          ; preds = %cond.end8
  %16 = load i32*, i32** %ts, align 8, !dbg !7427
  %17 = load i32, i32* %16, align 4, !dbg !7429
  %and17 = and i32 %17, -150994944, !dbg !7429
  store i32 %and17, i32* %16, align 4, !dbg !7429
  %18 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7430
  %call18 = call zeroext i8 @sd_lists_empty_p(%struct.rtx_def* %18, i32 1), !dbg !7432
  %tobool19 = icmp ne i8 %call18, 0, !dbg !7432
  br i1 %tobool19, label %if.then20, label %if.else40, !dbg !7433

if.then20:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata %struct._sd_iterator* %sd_it, metadata !7434, metadata !DIExpression()), !dbg !7436
  call void @llvm.dbg.declare(metadata %struct._dep** %dep, metadata !7437, metadata !DIExpression()), !dbg !7438
  call void @llvm.dbg.declare(metadata i8* %first_p, metadata !7439, metadata !DIExpression()), !dbg !7440
  store i8 1, i8* %first_p, align 1, !dbg !7440
  %19 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7441
  call void @sd_iterator_start(%struct._sd_iterator* sret %tmp, %struct.rtx_def* %19, i32 3), !dbg !7441
  %20 = bitcast %struct._sd_iterator* %sd_it to i8*, !dbg !7441
  %21 = bitcast %struct._sd_iterator* %tmp to i8*, !dbg !7441
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %20, i8* align 8 %21, i64 32, i1 false), !dbg !7441
  br label %for.cond, !dbg !7441

for.cond:                                         ; preds = %for.inc, %if.then20
  %call21 = call zeroext i8 @sd_iterator_cond(%struct._sd_iterator* %sd_it, %struct._dep** %dep), !dbg !7443
  %tobool22 = icmp ne i8 %call21, 0, !dbg !7441
  br i1 %tobool22, label %for.body, label %for.end, !dbg !7441

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %ds, metadata !7445, metadata !DIExpression()), !dbg !7447
  %22 = load %struct._dep*, %struct._dep** %dep, align 8, !dbg !7448
  %status = getelementptr inbounds %struct._dep, %struct._dep* %22, i32 0, i32 3, !dbg !7448
  %23 = load i32, i32* %status, align 4, !dbg !7448
  %and23 = and i32 %23, 16777215, !dbg !7449
  store i32 %and23, i32* %ds, align 4, !dbg !7447
  %24 = load %struct._dep*, %struct._dep** %dep, align 8, !dbg !7450
  %pro = getelementptr inbounds %struct._dep, %struct._dep* %24, i32 0, i32 0, !dbg !7450
  %25 = load %struct.rtx_def*, %struct.rtx_def** %pro, align 8, !dbg !7450
  %26 = bitcast %struct.rtx_def* %25 to i32*, !dbg !7450
  %bf.load = load i32, i32* %26, align 8, !dbg !7450
  %bf.clear = and i32 %bf.load, 65535, !dbg !7450
  %cmp = icmp eq i32 %bf.clear, 7, !dbg !7450
  br i1 %cmp, label %land.lhs.true24, label %if.end29, !dbg !7452

land.lhs.true24:                                  ; preds = %for.body
  %27 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7453
  %28 = bitcast %struct.rtx_def* %27 to i32*, !dbg !7453
  %bf.load25 = load i32, i32* %28, align 8, !dbg !7453
  %bf.clear26 = and i32 %bf.load25, 65535, !dbg !7453
  %cmp27 = icmp eq i32 %bf.clear26, 7, !dbg !7453
  br i1 %cmp27, label %if.end29, label %if.then28, !dbg !7454

if.then28:                                        ; preds = %land.lhs.true24
  br label %for.inc, !dbg !7455

if.end29:                                         ; preds = %land.lhs.true24, %for.body
  %29 = load i8, i8* %first_p, align 1, !dbg !7456
  %tobool30 = icmp ne i8 %29, 0, !dbg !7456
  br i1 %tobool30, label %if.then31, label %if.else32, !dbg !7458

if.then31:                                        ; preds = %if.end29
  store i8 0, i8* %first_p, align 1, !dbg !7459
  %30 = load i32, i32* %ds, align 4, !dbg !7461
  %31 = load i32*, i32** %ts, align 8, !dbg !7462
  store i32 %30, i32* %31, align 4, !dbg !7463
  br label %if.end34, !dbg !7464

if.else32:                                        ; preds = %if.end29
  %32 = load i32*, i32** %ts, align 8, !dbg !7465
  %33 = load i32, i32* %32, align 4, !dbg !7466
  %34 = load i32, i32* %ds, align 4, !dbg !7467
  %call33 = call i32 @ds_merge(i32 %33, i32 %34), !dbg !7468
  %35 = load i32*, i32** %ts, align 8, !dbg !7469
  store i32 %call33, i32* %35, align 4, !dbg !7470
  br label %if.end34

if.end34:                                         ; preds = %if.else32, %if.then31
  br label %for.inc, !dbg !7471

for.inc:                                          ; preds = %if.end34, %if.then28
  call void @sd_iterator_next(%struct._sd_iterator* %sd_it), !dbg !7443
  br label %for.cond, !dbg !7443, !llvm.loop !7472

for.end:                                          ; preds = %for.cond
  %36 = load i32*, i32** %ts, align 8, !dbg !7474
  %37 = load i32, i32* %36, align 4, !dbg !7476
  %call35 = call i32 @ds_weak(i32 %37), !dbg !7477
  %38 = load %struct.spec_info_def*, %struct.spec_info_def** @spec_info, align 8, !dbg !7478
  %data_weakness_cutoff = getelementptr inbounds %struct.spec_info_def, %struct.spec_info_def* %38, i32 0, i32 2, !dbg !7479
  %39 = load i32, i32* %data_weakness_cutoff, align 8, !dbg !7479
  %cmp36 = icmp slt i32 %call35, %39, !dbg !7480
  br i1 %cmp36, label %if.then37, label %if.end39, !dbg !7481

if.then37:                                        ; preds = %for.end
  %40 = load i32*, i32** %ts, align 8, !dbg !7482
  %41 = load i32, i32* %40, align 4, !dbg !7483
  %and38 = and i32 %41, -16777216, !dbg !7484
  %or = or i32 %and38, 134217728, !dbg !7485
  %42 = load i32*, i32** %ts, align 8, !dbg !7486
  store i32 %or, i32* %42, align 4, !dbg !7487
  br label %if.end39, !dbg !7488

if.end39:                                         ; preds = %if.then37, %for.end
  br label %if.end42, !dbg !7489

if.else40:                                        ; preds = %if.else
  %43 = load i32*, i32** %ts, align 8, !dbg !7490
  %44 = load i32, i32* %43, align 4, !dbg !7491
  %or41 = or i32 %44, 134217728, !dbg !7491
  store i32 %or41, i32* %43, align 4, !dbg !7491
  br label %if.end42

if.end42:                                         ; preds = %if.else40, %if.end39
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %if.end
  %45 = load i32*, i32** %ts, align 8, !dbg !7492
  %46 = load i32, i32* %45, align 4, !dbg !7494
  %and44 = and i32 %46, 134217728, !dbg !7495
  %tobool45 = icmp ne i32 %and44, 0, !dbg !7495
  br i1 %tobool45, label %if.then46, label %if.else65, !dbg !7496

if.then46:                                        ; preds = %if.end43
  %47 = load i32*, i32** %ts, align 8, !dbg !7497
  %48 = load i32, i32* %47, align 4, !dbg !7497
  %49 = load i32, i32* %old_ts, align 4, !dbg !7497
  %cmp47 = icmp eq i32 %48, %49, !dbg !7497
  br i1 %cmp47, label %land.lhs.true48, label %cond.true61, !dbg !7497

land.lhs.true48:                                  ; preds = %if.then46
  %50 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7497
  %tobool49 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %50, null, !dbg !7497
  br i1 %tobool49, label %cond.true50, label %cond.false52, !dbg !7497

cond.true50:                                      ; preds = %land.lhs.true48
  %51 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7497
  %base51 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %51, i32 0, i32 0, !dbg !7497
  br label %cond.end53, !dbg !7497

cond.false52:                                     ; preds = %land.lhs.true48
  br label %cond.end53, !dbg !7497

cond.end53:                                       ; preds = %cond.false52, %cond.true50
  %cond54 = phi %struct.VEC_haifa_insn_data_def_base* [ %base51, %cond.true50 ], [ null, %cond.false52 ], !dbg !7497
  %52 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7497
  %u55 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %52, i32 0, i32 1, !dbg !7497
  %fld56 = bitcast %union.u* %u55 to [1 x %union.rtunion_def]*, !dbg !7497
  %arrayidx57 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld56, i64 0, i64 0, !dbg !7497
  %rt_int58 = bitcast %union.rtunion_def* %arrayidx57 to i32*, !dbg !7497
  %53 = load i32, i32* %rt_int58, align 8, !dbg !7497
  %call59 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond54, i32 %53), !dbg !7497
  %queue_index = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call59, i32 0, i32 4, !dbg !7497
  %54 = load i32, i32* %queue_index, align 8, !dbg !7497
  %cmp60 = icmp eq i32 %54, -2, !dbg !7497
  br i1 %cmp60, label %cond.false62, label %cond.true61, !dbg !7497

cond.true61:                                      ; preds = %cond.end53, %if.then46
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 3725, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !7497
  br label %cond.end63, !dbg !7497

cond.false62:                                     ; preds = %cond.end53
  br label %cond.end63, !dbg !7497

cond.end63:                                       ; preds = %cond.false62, %cond.true61
  %cond64 = phi i32 [ 0, %cond.true61 ], [ 0, %cond.false62 ], !dbg !7497
  br label %if.end71, !dbg !7497

if.else65:                                        ; preds = %if.end43
  %55 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !7498
  %new_ready = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %55, i32 0, i32 3, !dbg !7500
  %56 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %new_ready, align 8, !dbg !7500
  %tobool66 = icmp ne i32 (%struct.rtx_def*, i32)* %56, null, !dbg !7498
  br i1 %tobool66, label %if.then67, label %if.end70, !dbg !7501

if.then67:                                        ; preds = %if.else65
  %57 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !7502
  %new_ready68 = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %57, i32 0, i32 3, !dbg !7503
  %58 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %new_ready68, align 8, !dbg !7503
  %59 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7504
  %60 = load i32*, i32** %ts, align 8, !dbg !7505
  %61 = load i32, i32* %60, align 4, !dbg !7506
  %call69 = call i32 %58(%struct.rtx_def* %59, i32 %61), !dbg !7502
  %62 = load i32*, i32** %ts, align 8, !dbg !7507
  store i32 %call69, i32* %62, align 4, !dbg !7508
  br label %if.end70, !dbg !7509

if.end70:                                         ; preds = %if.then67, %if.else65
  br label %if.end71

if.end71:                                         ; preds = %if.end70, %cond.end63
  %63 = load i32*, i32** %ts, align 8, !dbg !7510
  %64 = load i32, i32* %63, align 4, !dbg !7512
  %and72 = and i32 %64, 16777215, !dbg !7513
  %tobool73 = icmp ne i32 %and72, 0, !dbg !7513
  br i1 %tobool73, label %land.lhs.true74, label %if.end151, !dbg !7514

land.lhs.true74:                                  ; preds = %if.end71
  %65 = load i32*, i32** %ts, align 8, !dbg !7515
  %66 = load i32, i32* %65, align 4, !dbg !7516
  %67 = load i32, i32* %old_ts, align 4, !dbg !7517
  %cmp75 = icmp ne i32 %66, %67, !dbg !7518
  br i1 %cmp75, label %if.then76, label %if.end151, !dbg !7519

if.then76:                                        ; preds = %land.lhs.true74
  call void @llvm.dbg.declare(metadata i32* %res, metadata !7520, metadata !DIExpression()), !dbg !7522
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %new_pat, metadata !7523, metadata !DIExpression()), !dbg !7524
  %68 = load i32*, i32** %ts, align 8, !dbg !7525
  %69 = load i32, i32* %68, align 4, !dbg !7525
  %and77 = and i32 %69, 16777215, !dbg !7525
  %tobool78 = icmp ne i32 %and77, 0, !dbg !7525
  br i1 %tobool78, label %land.lhs.true79, label %cond.true82, !dbg !7525

land.lhs.true79:                                  ; preds = %if.then76
  %70 = load i32*, i32** %ts, align 8, !dbg !7525
  %71 = load i32, i32* %70, align 4, !dbg !7525
  %and80 = and i32 %71, -16777216, !dbg !7525
  %tobool81 = icmp ne i32 %and80, 0, !dbg !7525
  br i1 %tobool81, label %cond.true82, label %cond.false83, !dbg !7525

cond.true82:                                      ; preds = %land.lhs.true79, %if.then76
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 3747, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !7525
  br label %cond.end84, !dbg !7525

cond.false83:                                     ; preds = %land.lhs.true79
  br label %cond.end84, !dbg !7525

cond.end84:                                       ; preds = %cond.false83, %cond.true82
  %cond85 = phi i32 [ 0, %cond.true82 ], [ 0, %cond.false83 ], !dbg !7525
  %72 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7526
  %73 = load i32*, i32** %ts, align 8, !dbg !7527
  %74 = load i32, i32* %73, align 4, !dbg !7528
  %call86 = call i32 @haifa_speculate_insn(%struct.rtx_def* %72, i32 %74, %struct.rtx_def** %new_pat), !dbg !7529
  store i32 %call86, i32* %res, align 4, !dbg !7530
  %75 = load i32, i32* %res, align 4, !dbg !7531
  switch i32 %75, label %sw.default [
    i32 -1, label %sw.bb
    i32 0, label %sw.bb89
    i32 1, label %sw.bb119
  ], !dbg !7532

sw.bb:                                            ; preds = %cond.end84
  %76 = load i32*, i32** %ts, align 8, !dbg !7533
  %77 = load i32, i32* %76, align 4, !dbg !7535
  %and87 = and i32 %77, -16777216, !dbg !7536
  %or88 = or i32 %and87, 134217728, !dbg !7537
  %78 = load i32*, i32** %ts, align 8, !dbg !7538
  store i32 %or88, i32* %78, align 4, !dbg !7539
  br label %sw.epilog, !dbg !7540

sw.bb89:                                          ; preds = %cond.end84
  %79 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7541
  %tobool90 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %79, null, !dbg !7541
  br i1 %tobool90, label %cond.true91, label %cond.false93, !dbg !7541

cond.true91:                                      ; preds = %sw.bb89
  %80 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7541
  %base92 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %80, i32 0, i32 0, !dbg !7541
  br label %cond.end94, !dbg !7541

cond.false93:                                     ; preds = %sw.bb89
  br label %cond.end94, !dbg !7541

cond.end94:                                       ; preds = %cond.false93, %cond.true91
  %cond95 = phi %struct.VEC_haifa_insn_data_def_base* [ %base92, %cond.true91 ], [ null, %cond.false93 ], !dbg !7541
  %81 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7541
  %u96 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %81, i32 0, i32 1, !dbg !7541
  %fld97 = bitcast %union.u* %u96 to [1 x %union.rtunion_def]*, !dbg !7541
  %arrayidx98 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld97, i64 0, i64 0, !dbg !7541
  %rt_int99 = bitcast %union.rtunion_def* %arrayidx98 to i32*, !dbg !7541
  %82 = load i32, i32* %rt_int99, align 8, !dbg !7541
  %call100 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond95, i32 %82), !dbg !7541
  %orig_pat = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call100, i32 0, i32 12, !dbg !7541
  %83 = load %struct.rtx_def*, %struct.rtx_def** %orig_pat, align 8, !dbg !7541
  %tobool101 = icmp ne %struct.rtx_def* %83, null, !dbg !7541
  br i1 %tobool101, label %if.end118, label %if.then102, !dbg !7543

if.then102:                                       ; preds = %cond.end94
  %84 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7544
  %u103 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %84, i32 0, i32 1, !dbg !7544
  %fld104 = bitcast %union.u* %u103 to [1 x %union.rtunion_def]*, !dbg !7544
  %arrayidx105 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld104, i64 0, i64 5, !dbg !7544
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx105 to %struct.rtx_def**, !dbg !7544
  %85 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7544
  %86 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7545
  %tobool106 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %86, null, !dbg !7545
  br i1 %tobool106, label %cond.true107, label %cond.false109, !dbg !7545

cond.true107:                                     ; preds = %if.then102
  %87 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7545
  %base108 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %87, i32 0, i32 0, !dbg !7545
  br label %cond.end110, !dbg !7545

cond.false109:                                    ; preds = %if.then102
  br label %cond.end110, !dbg !7545

cond.end110:                                      ; preds = %cond.false109, %cond.true107
  %cond111 = phi %struct.VEC_haifa_insn_data_def_base* [ %base108, %cond.true107 ], [ null, %cond.false109 ], !dbg !7545
  %88 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7545
  %u112 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %88, i32 0, i32 1, !dbg !7545
  %fld113 = bitcast %union.u* %u112 to [1 x %union.rtunion_def]*, !dbg !7545
  %arrayidx114 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld113, i64 0, i64 0, !dbg !7545
  %rt_int115 = bitcast %union.rtunion_def* %arrayidx114 to i32*, !dbg !7545
  %89 = load i32, i32* %rt_int115, align 8, !dbg !7545
  %call116 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond111, i32 %89), !dbg !7545
  %orig_pat117 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call116, i32 0, i32 12, !dbg !7545
  store %struct.rtx_def* %85, %struct.rtx_def** %orig_pat117, align 8, !dbg !7546
  br label %if.end118, !dbg !7545

if.end118:                                        ; preds = %cond.end110, %cond.end94
  br label %sw.epilog, !dbg !7547

sw.bb119:                                         ; preds = %cond.end84
  %90 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7548
  %tobool120 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %90, null, !dbg !7548
  br i1 %tobool120, label %cond.true121, label %cond.false123, !dbg !7548

cond.true121:                                     ; preds = %sw.bb119
  %91 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7548
  %base122 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %91, i32 0, i32 0, !dbg !7548
  br label %cond.end124, !dbg !7548

cond.false123:                                    ; preds = %sw.bb119
  br label %cond.end124, !dbg !7548

cond.end124:                                      ; preds = %cond.false123, %cond.true121
  %cond125 = phi %struct.VEC_haifa_insn_data_def_base* [ %base122, %cond.true121 ], [ null, %cond.false123 ], !dbg !7548
  %92 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7548
  %u126 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %92, i32 0, i32 1, !dbg !7548
  %fld127 = bitcast %union.u* %u126 to [1 x %union.rtunion_def]*, !dbg !7548
  %arrayidx128 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld127, i64 0, i64 0, !dbg !7548
  %rt_int129 = bitcast %union.rtunion_def* %arrayidx128 to i32*, !dbg !7548
  %93 = load i32, i32* %rt_int129, align 8, !dbg !7548
  %call130 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond125, i32 %93), !dbg !7548
  %orig_pat131 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call130, i32 0, i32 12, !dbg !7548
  %94 = load %struct.rtx_def*, %struct.rtx_def** %orig_pat131, align 8, !dbg !7548
  %tobool132 = icmp ne %struct.rtx_def* %94, null, !dbg !7548
  br i1 %tobool132, label %if.end150, label %if.then133, !dbg !7550

if.then133:                                       ; preds = %cond.end124
  %95 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7551
  %u134 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %95, i32 0, i32 1, !dbg !7551
  %fld135 = bitcast %union.u* %u134 to [1 x %union.rtunion_def]*, !dbg !7551
  %arrayidx136 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld135, i64 0, i64 5, !dbg !7551
  %rt_rtx137 = bitcast %union.rtunion_def* %arrayidx136 to %struct.rtx_def**, !dbg !7551
  %96 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx137, align 8, !dbg !7551
  %97 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7552
  %tobool138 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %97, null, !dbg !7552
  br i1 %tobool138, label %cond.true139, label %cond.false141, !dbg !7552

cond.true139:                                     ; preds = %if.then133
  %98 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7552
  %base140 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %98, i32 0, i32 0, !dbg !7552
  br label %cond.end142, !dbg !7552

cond.false141:                                    ; preds = %if.then133
  br label %cond.end142, !dbg !7552

cond.end142:                                      ; preds = %cond.false141, %cond.true139
  %cond143 = phi %struct.VEC_haifa_insn_data_def_base* [ %base140, %cond.true139 ], [ null, %cond.false141 ], !dbg !7552
  %99 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7552
  %u144 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %99, i32 0, i32 1, !dbg !7552
  %fld145 = bitcast %union.u* %u144 to [1 x %union.rtunion_def]*, !dbg !7552
  %arrayidx146 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld145, i64 0, i64 0, !dbg !7552
  %rt_int147 = bitcast %union.rtunion_def* %arrayidx146 to i32*, !dbg !7552
  %100 = load i32, i32* %rt_int147, align 8, !dbg !7552
  %call148 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond143, i32 %100), !dbg !7552
  %orig_pat149 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call148, i32 0, i32 12, !dbg !7552
  store %struct.rtx_def* %96, %struct.rtx_def** %orig_pat149, align 8, !dbg !7553
  br label %if.end150, !dbg !7552

if.end150:                                        ; preds = %cond.end142, %cond.end124
  %101 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7554
  %102 = load %struct.rtx_def*, %struct.rtx_def** %new_pat, align 8, !dbg !7555
  call void @haifa_change_pattern(%struct.rtx_def* %101, %struct.rtx_def* %102), !dbg !7556
  br label %sw.epilog, !dbg !7557

sw.default:                                       ; preds = %cond.end84
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 3777, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !7558
  br label %sw.epilog, !dbg !7559

sw.epilog:                                        ; preds = %sw.default, %if.end150, %if.end118, %sw.bb
  br label %if.end151, !dbg !7560

if.end151:                                        ; preds = %sw.epilog, %land.lhs.true74, %if.end71
  %103 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7561
  %tobool152 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %103, null, !dbg !7561
  br i1 %tobool152, label %cond.true153, label %cond.false155, !dbg !7561

cond.true153:                                     ; preds = %if.end151
  %104 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7561
  %base154 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %104, i32 0, i32 0, !dbg !7561
  br label %cond.end156, !dbg !7561

cond.false155:                                    ; preds = %if.end151
  br label %cond.end156, !dbg !7561

cond.end156:                                      ; preds = %cond.false155, %cond.true153
  %cond157 = phi %struct.VEC_haifa_insn_data_def_base* [ %base154, %cond.true153 ], [ null, %cond.false155 ], !dbg !7561
  %105 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7561
  %u158 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %105, i32 0, i32 1, !dbg !7561
  %fld159 = bitcast %union.u* %u158 to [1 x %union.rtunion_def]*, !dbg !7561
  %arrayidx160 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld159, i64 0, i64 0, !dbg !7561
  %rt_int161 = bitcast %union.rtunion_def* %arrayidx160 to i32*, !dbg !7561
  %106 = load i32, i32* %rt_int161, align 8, !dbg !7561
  %call162 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond157, i32 %106), !dbg !7561
  %orig_pat163 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call162, i32 0, i32 12, !dbg !7561
  %107 = load %struct.rtx_def*, %struct.rtx_def** %orig_pat163, align 8, !dbg !7561
  %tobool164 = icmp ne %struct.rtx_def* %107, null, !dbg !7561
  br i1 %tobool164, label %lor.lhs.false165, label %cond.false193, !dbg !7561

lor.lhs.false165:                                 ; preds = %cond.end156
  %108 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7561
  %tobool166 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %108, null, !dbg !7561
  br i1 %tobool166, label %cond.true167, label %cond.false169, !dbg !7561

cond.true167:                                     ; preds = %lor.lhs.false165
  %109 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7561
  %base168 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %109, i32 0, i32 0, !dbg !7561
  br label %cond.end170, !dbg !7561

cond.false169:                                    ; preds = %lor.lhs.false165
  br label %cond.end170, !dbg !7561

cond.end170:                                      ; preds = %cond.false169, %cond.true167
  %cond171 = phi %struct.VEC_haifa_insn_data_def_base* [ %base168, %cond.true167 ], [ null, %cond.false169 ], !dbg !7561
  %110 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7561
  %u172 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %110, i32 0, i32 1, !dbg !7561
  %fld173 = bitcast %union.u* %u172 to [1 x %union.rtunion_def]*, !dbg !7561
  %arrayidx174 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld173, i64 0, i64 0, !dbg !7561
  %rt_int175 = bitcast %union.rtunion_def* %arrayidx174 to i32*, !dbg !7561
  %111 = load i32, i32* %rt_int175, align 8, !dbg !7561
  %call176 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond171, i32 %111), !dbg !7561
  %recovery_block = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call176, i32 0, i32 11, !dbg !7561
  %112 = load %struct.basic_block_def*, %struct.basic_block_def** %recovery_block, align 8, !dbg !7561
  %cmp177 = icmp ne %struct.basic_block_def* %112, null, !dbg !7561
  br i1 %cmp177, label %land.lhs.true178, label %cond.false193, !dbg !7561

land.lhs.true178:                                 ; preds = %cond.end170
  %113 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7561
  %tobool179 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %113, null, !dbg !7561
  br i1 %tobool179, label %cond.true180, label %cond.false182, !dbg !7561

cond.true180:                                     ; preds = %land.lhs.true178
  %114 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7561
  %base181 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %114, i32 0, i32 0, !dbg !7561
  br label %cond.end183, !dbg !7561

cond.false182:                                    ; preds = %land.lhs.true178
  br label %cond.end183, !dbg !7561

cond.end183:                                      ; preds = %cond.false182, %cond.true180
  %cond184 = phi %struct.VEC_haifa_insn_data_def_base* [ %base181, %cond.true180 ], [ null, %cond.false182 ], !dbg !7561
  %115 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7561
  %u185 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %115, i32 0, i32 1, !dbg !7561
  %fld186 = bitcast %union.u* %u185 to [1 x %union.rtunion_def]*, !dbg !7561
  %arrayidx187 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld186, i64 0, i64 0, !dbg !7561
  %rt_int188 = bitcast %union.rtunion_def* %arrayidx187 to i32*, !dbg !7561
  %116 = load i32, i32* %rt_int188, align 8, !dbg !7561
  %call189 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond184, i32 %116), !dbg !7561
  %recovery_block190 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call189, i32 0, i32 11, !dbg !7561
  %117 = load %struct.basic_block_def*, %struct.basic_block_def** %recovery_block190, align 8, !dbg !7561
  %118 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7561
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %118, i64 0, !dbg !7561
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !7561
  %119 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !7561
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %119, i32 0, i32 1, !dbg !7561
  %120 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !7561
  %cmp191 = icmp ne %struct.basic_block_def* %117, %120, !dbg !7561
  br i1 %cmp191, label %cond.true192, label %cond.false193, !dbg !7561

cond.true192:                                     ; preds = %cond.end183
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 3786, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !7561
  br label %cond.end194, !dbg !7561

cond.false193:                                    ; preds = %cond.end183, %cond.end170, %cond.end156
  br label %cond.end194, !dbg !7561

cond.end194:                                      ; preds = %cond.false193, %cond.true192
  %cond195 = phi i32 [ 0, %cond.true192 ], [ 0, %cond.false193 ], !dbg !7561
  %121 = load i32*, i32** %ts, align 8, !dbg !7562
  %122 = load i32, i32* %121, align 4, !dbg !7564
  %and196 = and i32 %122, 134217728, !dbg !7565
  %tobool197 = icmp ne i32 %and196, 0, !dbg !7565
  br i1 %tobool197, label %if.then198, label %if.else199, !dbg !7566

if.then198:                                       ; preds = %cond.end194
  %123 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7567
  call void @change_queue_index(%struct.rtx_def* %123, i32 -2), !dbg !7569
  store i32 -1, i32* %retval, align 4, !dbg !7570
  br label %return, !dbg !7570

if.else199:                                       ; preds = %cond.end194
  %124 = load i32*, i32** %ts, align 8, !dbg !7571
  %125 = load i32, i32* %124, align 4, !dbg !7573
  %and200 = and i32 %125, 258111, !dbg !7574
  %tobool201 = icmp ne i32 %and200, 0, !dbg !7574
  br i1 %tobool201, label %if.end263, label %land.lhs.true202, !dbg !7575

land.lhs.true202:                                 ; preds = %if.else199
  %126 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7576
  %tobool203 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %126, null, !dbg !7576
  br i1 %tobool203, label %cond.true204, label %cond.false206, !dbg !7576

cond.true204:                                     ; preds = %land.lhs.true202
  %127 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7576
  %base205 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %127, i32 0, i32 0, !dbg !7576
  br label %cond.end207, !dbg !7576

cond.false206:                                    ; preds = %land.lhs.true202
  br label %cond.end207, !dbg !7576

cond.end207:                                      ; preds = %cond.false206, %cond.true204
  %cond208 = phi %struct.VEC_haifa_insn_data_def_base* [ %base205, %cond.true204 ], [ null, %cond.false206 ], !dbg !7576
  %128 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7576
  %u209 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %128, i32 0, i32 1, !dbg !7576
  %fld210 = bitcast %union.u* %u209 to [1 x %union.rtunion_def]*, !dbg !7576
  %arrayidx211 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld210, i64 0, i64 0, !dbg !7576
  %rt_int212 = bitcast %union.rtunion_def* %arrayidx211 to i32*, !dbg !7576
  %129 = load i32, i32* %rt_int212, align 8, !dbg !7576
  %call213 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond208, i32 %129), !dbg !7576
  %orig_pat214 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call213, i32 0, i32 12, !dbg !7576
  %130 = load %struct.rtx_def*, %struct.rtx_def** %orig_pat214, align 8, !dbg !7576
  %tobool215 = icmp ne %struct.rtx_def* %130, null, !dbg !7576
  br i1 %tobool215, label %land.lhs.true216, label %if.end263, !dbg !7577

land.lhs.true216:                                 ; preds = %cond.end207
  %call217 = call zeroext i8 @sel_sched_p(), !dbg !7578
  %conv = zext i8 %call217 to i32, !dbg !7578
  %tobool218 = icmp ne i32 %conv, 0, !dbg !7578
  br i1 %tobool218, label %cond.true219, label %cond.false223, !dbg !7579

cond.true219:                                     ; preds = %land.lhs.true216
  %131 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7578
  %call220 = call zeroext i8 @sel_insn_is_speculation_check(%struct.rtx_def* %131), !dbg !7578
  %conv221 = zext i8 %call220 to i32, !dbg !7578
  %tobool222 = icmp ne i32 %conv221, 0, !dbg !7578
  br i1 %tobool222, label %if.end263, label %if.then238, !dbg !7578

cond.false223:                                    ; preds = %land.lhs.true216
  %132 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7578
  %tobool224 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %132, null, !dbg !7578
  br i1 %tobool224, label %cond.true225, label %cond.false227, !dbg !7578

cond.true225:                                     ; preds = %cond.false223
  %133 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7578
  %base226 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %133, i32 0, i32 0, !dbg !7578
  br label %cond.end228, !dbg !7578

cond.false227:                                    ; preds = %cond.false223
  br label %cond.end228, !dbg !7578

cond.end228:                                      ; preds = %cond.false227, %cond.true225
  %cond229 = phi %struct.VEC_haifa_insn_data_def_base* [ %base226, %cond.true225 ], [ null, %cond.false227 ], !dbg !7578
  %134 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7578
  %u230 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %134, i32 0, i32 1, !dbg !7578
  %fld231 = bitcast %union.u* %u230 to [1 x %union.rtunion_def]*, !dbg !7578
  %arrayidx232 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld231, i64 0, i64 0, !dbg !7578
  %rt_int233 = bitcast %union.rtunion_def* %arrayidx232 to i32*, !dbg !7578
  %135 = load i32, i32* %rt_int233, align 8, !dbg !7578
  %call234 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond229, i32 %135), !dbg !7578
  %recovery_block235 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call234, i32 0, i32 11, !dbg !7578
  %136 = load %struct.basic_block_def*, %struct.basic_block_def** %recovery_block235, align 8, !dbg !7578
  %cmp236 = icmp ne %struct.basic_block_def* %136, null, !dbg !7578
  br i1 %cmp236, label %if.end263, label %if.then238, !dbg !7579

if.then238:                                       ; preds = %cond.end228, %cond.true219
  %137 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7580
  %138 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7582
  %tobool239 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %138, null, !dbg !7582
  br i1 %tobool239, label %cond.true240, label %cond.false242, !dbg !7582

cond.true240:                                     ; preds = %if.then238
  %139 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7582
  %base241 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %139, i32 0, i32 0, !dbg !7582
  br label %cond.end243, !dbg !7582

cond.false242:                                    ; preds = %if.then238
  br label %cond.end243, !dbg !7582

cond.end243:                                      ; preds = %cond.false242, %cond.true240
  %cond244 = phi %struct.VEC_haifa_insn_data_def_base* [ %base241, %cond.true240 ], [ null, %cond.false242 ], !dbg !7582
  %140 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7582
  %u245 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %140, i32 0, i32 1, !dbg !7582
  %fld246 = bitcast %union.u* %u245 to [1 x %union.rtunion_def]*, !dbg !7582
  %arrayidx247 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld246, i64 0, i64 0, !dbg !7582
  %rt_int248 = bitcast %union.rtunion_def* %arrayidx247 to i32*, !dbg !7582
  %141 = load i32, i32* %rt_int248, align 8, !dbg !7582
  %call249 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond244, i32 %141), !dbg !7582
  %orig_pat250 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call249, i32 0, i32 12, !dbg !7582
  %142 = load %struct.rtx_def*, %struct.rtx_def** %orig_pat250, align 8, !dbg !7582
  call void @haifa_change_pattern(%struct.rtx_def* %137, %struct.rtx_def* %142), !dbg !7583
  %143 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7584
  %tobool251 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %143, null, !dbg !7584
  br i1 %tobool251, label %cond.true252, label %cond.false254, !dbg !7584

cond.true252:                                     ; preds = %cond.end243
  %144 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7584
  %base253 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %144, i32 0, i32 0, !dbg !7584
  br label %cond.end255, !dbg !7584

cond.false254:                                    ; preds = %cond.end243
  br label %cond.end255, !dbg !7584

cond.end255:                                      ; preds = %cond.false254, %cond.true252
  %cond256 = phi %struct.VEC_haifa_insn_data_def_base* [ %base253, %cond.true252 ], [ null, %cond.false254 ], !dbg !7584
  %145 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7584
  %u257 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %145, i32 0, i32 1, !dbg !7584
  %fld258 = bitcast %union.u* %u257 to [1 x %union.rtunion_def]*, !dbg !7584
  %arrayidx259 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld258, i64 0, i64 0, !dbg !7584
  %rt_int260 = bitcast %union.rtunion_def* %arrayidx259 to i32*, !dbg !7584
  %146 = load i32, i32* %rt_int260, align 8, !dbg !7584
  %call261 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond256, i32 %146), !dbg !7584
  %orig_pat262 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call261, i32 0, i32 12, !dbg !7584
  store %struct.rtx_def* null, %struct.rtx_def** %orig_pat262, align 8, !dbg !7585
  br label %if.end263, !dbg !7586

if.end263:                                        ; preds = %cond.end255, %cond.end228, %cond.true219, %cond.end207, %if.else199
  br label %if.end264

if.end264:                                        ; preds = %if.end263
  %147 = load i32, i32* @sched_verbose, align 4, !dbg !7587
  %cmp265 = icmp sge i32 %147, 2, !dbg !7589
  br i1 %cmp265, label %if.then267, label %if.end306, !dbg !7590

if.then267:                                       ; preds = %if.end264
  call void @llvm.dbg.declare(metadata i32* %s, metadata !7591, metadata !DIExpression()), !dbg !7593
  %148 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7594
  %tobool268 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %148, null, !dbg !7594
  br i1 %tobool268, label %cond.true269, label %cond.false271, !dbg !7594

cond.true269:                                     ; preds = %if.then267
  %149 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7594
  %base270 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %149, i32 0, i32 0, !dbg !7594
  br label %cond.end272, !dbg !7594

cond.false271:                                    ; preds = %if.then267
  br label %cond.end272, !dbg !7594

cond.end272:                                      ; preds = %cond.false271, %cond.true269
  %cond273 = phi %struct.VEC_haifa_insn_data_def_base* [ %base270, %cond.true269 ], [ null, %cond.false271 ], !dbg !7594
  %150 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7594
  %u274 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %150, i32 0, i32 1, !dbg !7594
  %fld275 = bitcast %union.u* %u274 to [1 x %union.rtunion_def]*, !dbg !7594
  %arrayidx276 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld275, i64 0, i64 0, !dbg !7594
  %rt_int277 = bitcast %union.rtunion_def* %arrayidx276 to i32*, !dbg !7594
  %151 = load i32, i32* %rt_int277, align 8, !dbg !7594
  %call278 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond273, i32 %151), !dbg !7594
  %todo_spec279 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call278, i32 0, i32 8, !dbg !7594
  %152 = load i32, i32* %todo_spec279, align 8, !dbg !7594
  store i32 %152, i32* %s, align 4, !dbg !7593
  %153 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !7595
  %154 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !7596
  %print_insn = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %154, i32 0, i32 5, !dbg !7597
  %155 = load i8* (%struct.rtx_def*, i32)*, i8* (%struct.rtx_def*, i32)** %print_insn, align 8, !dbg !7597
  %156 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7598
  %call280 = call i8* %155(%struct.rtx_def* %156, i32 0), !dbg !7599
  %call281 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %153, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.18, i64 0, i64 0), i8* %call280), !dbg !7600
  %157 = load %struct.spec_info_def*, %struct.spec_info_def** @spec_info, align 8, !dbg !7601
  %tobool282 = icmp ne %struct.spec_info_def* %157, null, !dbg !7601
  br i1 %tobool282, label %land.lhs.true283, label %if.end304, !dbg !7603

land.lhs.true283:                                 ; preds = %cond.end272
  %158 = load %struct.spec_info_def*, %struct.spec_info_def** @spec_info, align 8, !dbg !7604
  %dump = getelementptr inbounds %struct.spec_info_def, %struct.spec_info_def* %158, i32 0, i32 1, !dbg !7605
  %159 = load %struct._IO_FILE*, %struct._IO_FILE** %dump, align 8, !dbg !7605
  %tobool284 = icmp ne %struct._IO_FILE* %159, null, !dbg !7604
  br i1 %tobool284, label %if.then285, label %if.end304, !dbg !7606

if.then285:                                       ; preds = %land.lhs.true283
  %160 = load i32, i32* %s, align 4, !dbg !7607
  %and286 = and i32 %160, 63, !dbg !7610
  %tobool287 = icmp ne i32 %and286, 0, !dbg !7610
  br i1 %tobool287, label %if.then288, label %if.end291, !dbg !7611

if.then288:                                       ; preds = %if.then285
  %161 = load %struct.spec_info_def*, %struct.spec_info_def** @spec_info, align 8, !dbg !7612
  %dump289 = getelementptr inbounds %struct.spec_info_def, %struct.spec_info_def* %161, i32 0, i32 1, !dbg !7613
  %162 = load %struct._IO_FILE*, %struct._IO_FILE** %dump289, align 8, !dbg !7613
  %call290 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %162, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.19, i64 0, i64 0)), !dbg !7614
  br label %if.end291, !dbg !7614

if.end291:                                        ; preds = %if.then288, %if.then285
  %163 = load i32, i32* %s, align 4, !dbg !7615
  %and292 = and i32 %163, 258048, !dbg !7617
  %tobool293 = icmp ne i32 %and292, 0, !dbg !7617
  br i1 %tobool293, label %if.then294, label %if.end297, !dbg !7618

if.then294:                                       ; preds = %if.end291
  %164 = load %struct.spec_info_def*, %struct.spec_info_def** @spec_info, align 8, !dbg !7619
  %dump295 = getelementptr inbounds %struct.spec_info_def, %struct.spec_info_def* %164, i32 0, i32 1, !dbg !7620
  %165 = load %struct._IO_FILE*, %struct._IO_FILE** %dump295, align 8, !dbg !7620
  %call296 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %165, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0)), !dbg !7621
  br label %if.end297, !dbg !7621

if.end297:                                        ; preds = %if.then294, %if.end291
  %166 = load i32, i32* %s, align 4, !dbg !7622
  %and298 = and i32 %166, 16515072, !dbg !7624
  %tobool299 = icmp ne i32 %and298, 0, !dbg !7624
  br i1 %tobool299, label %if.then300, label %if.end303, !dbg !7625

if.then300:                                       ; preds = %if.end297
  %167 = load %struct.spec_info_def*, %struct.spec_info_def** @spec_info, align 8, !dbg !7626
  %dump301 = getelementptr inbounds %struct.spec_info_def, %struct.spec_info_def* %167, i32 0, i32 1, !dbg !7627
  %168 = load %struct._IO_FILE*, %struct._IO_FILE** %dump301, align 8, !dbg !7627
  %call302 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %168, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.21, i64 0, i64 0)), !dbg !7628
  br label %if.end303, !dbg !7628

if.end303:                                        ; preds = %if.then300, %if.end297
  br label %if.end304, !dbg !7629

if.end304:                                        ; preds = %if.end303, %land.lhs.true283, %cond.end272
  %169 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !7630
  %call305 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %169, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22, i64 0, i64 0)), !dbg !7631
  br label %if.end306, !dbg !7632

if.end306:                                        ; preds = %if.end304, %if.end264
  %170 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7633
  call void @adjust_priority(%struct.rtx_def* %170), !dbg !7634
  %171 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7635
  %call307 = call i32 @fix_tick_ready(%struct.rtx_def* %171), !dbg !7636
  store i32 %call307, i32* %retval, align 4, !dbg !7637
  br label %return, !dbg !7637

return:                                           ; preds = %if.end306, %if.then198
  %172 = load i32, i32* %retval, align 4, !dbg !7638
  ret i32 %172, !dbg !7638
}

declare dso_local zeroext i8 @sd_lists_empty_p(%struct.rtx_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @sd_iterator_start(%struct._sd_iterator* noalias sret %agg.result, %struct.rtx_def* %insn, i32 %types) #0 !dbg !2464 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %types.addr = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !7639, metadata !DIExpression()), !dbg !7640
  store i32 %types, i32* %types.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %types.addr, metadata !7641, metadata !DIExpression()), !dbg !7642
  call void @llvm.dbg.declare(metadata %struct._sd_iterator* %agg.result, metadata !7643, metadata !DIExpression()), !dbg !7644
  %0 = load i32, i32* %types.addr, align 4, !dbg !7645
  %types1 = getelementptr inbounds %struct._sd_iterator, %struct._sd_iterator* %agg.result, i32 0, i32 0, !dbg !7646
  store i32 %0, i32* %types1, align 8, !dbg !7647
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7648
  %insn2 = getelementptr inbounds %struct._sd_iterator, %struct._sd_iterator* %agg.result, i32 0, i32 1, !dbg !7649
  store %struct.rtx_def* %1, %struct.rtx_def** %insn2, align 8, !dbg !7650
  %linkp = getelementptr inbounds %struct._sd_iterator, %struct._sd_iterator* %agg.result, i32 0, i32 2, !dbg !7651
  store %struct._dep_link** @sd_iterator_start.null_link, %struct._dep_link*** %linkp, align 8, !dbg !7652
  %resolved_p = getelementptr inbounds %struct._sd_iterator, %struct._sd_iterator* %agg.result, i32 0, i32 3, !dbg !7653
  store i8 0, i8* %resolved_p, align 8, !dbg !7654
  ret void, !dbg !7655
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @sd_iterator_cond(%struct._sd_iterator* %it_ptr, %struct._dep** %dep_ptr) #0 !dbg !7656 {
entry:
  %retval = alloca i8, align 1
  %it_ptr.addr = alloca %struct._sd_iterator*, align 8
  %dep_ptr.addr = alloca %struct._dep**, align 8
  %link = alloca %struct._dep_link*, align 8
  %types = alloca i32, align 4
  %list = alloca %struct._deps_list*, align 8
  store %struct._sd_iterator* %it_ptr, %struct._sd_iterator** %it_ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._sd_iterator** %it_ptr.addr, metadata !7661, metadata !DIExpression()), !dbg !7662
  store %struct._dep** %dep_ptr, %struct._dep*** %dep_ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._dep*** %dep_ptr.addr, metadata !7663, metadata !DIExpression()), !dbg !7664
  call void @llvm.dbg.declare(metadata %struct._dep_link** %link, metadata !7665, metadata !DIExpression()), !dbg !7666
  %0 = load %struct._sd_iterator*, %struct._sd_iterator** %it_ptr.addr, align 8, !dbg !7667
  %linkp = getelementptr inbounds %struct._sd_iterator, %struct._sd_iterator* %0, i32 0, i32 2, !dbg !7668
  %1 = load %struct._dep_link**, %struct._dep_link*** %linkp, align 8, !dbg !7668
  %2 = load %struct._dep_link*, %struct._dep_link** %1, align 8, !dbg !7669
  store %struct._dep_link* %2, %struct._dep_link** %link, align 8, !dbg !7666
  %3 = load %struct._dep_link*, %struct._dep_link** %link, align 8, !dbg !7670
  %cmp = icmp ne %struct._dep_link* %3, null, !dbg !7672
  br i1 %cmp, label %if.then, label %if.else, !dbg !7673

if.then:                                          ; preds = %entry
  %4 = load %struct._dep_link*, %struct._dep_link** %link, align 8, !dbg !7674
  %node = getelementptr inbounds %struct._dep_link, %struct._dep_link* %4, i32 0, i32 0, !dbg !7674
  %5 = load %struct._dep_node*, %struct._dep_node** %node, align 8, !dbg !7674
  %dep = getelementptr inbounds %struct._dep_node, %struct._dep_node* %5, i32 0, i32 1, !dbg !7674
  %6 = load %struct._dep**, %struct._dep*** %dep_ptr.addr, align 8, !dbg !7676
  store %struct._dep* %dep, %struct._dep** %6, align 8, !dbg !7677
  store i8 1, i8* %retval, align 1, !dbg !7678
  br label %return, !dbg !7678

if.else:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %types, metadata !7679, metadata !DIExpression()), !dbg !7681
  %7 = load %struct._sd_iterator*, %struct._sd_iterator** %it_ptr.addr, align 8, !dbg !7682
  %types1 = getelementptr inbounds %struct._sd_iterator, %struct._sd_iterator* %7, i32 0, i32 0, !dbg !7683
  %8 = load i32, i32* %types1, align 8, !dbg !7683
  store i32 %8, i32* %types, align 4, !dbg !7681
  %9 = load i32, i32* %types, align 4, !dbg !7684
  %cmp2 = icmp ne i32 %9, 0, !dbg !7686
  br i1 %cmp2, label %if.then3, label %if.end7, !dbg !7687

if.then3:                                         ; preds = %if.else
  call void @llvm.dbg.declare(metadata %struct._deps_list** %list, metadata !7688, metadata !DIExpression()), !dbg !7696
  %10 = load %struct._sd_iterator*, %struct._sd_iterator** %it_ptr.addr, align 8, !dbg !7697
  %insn = getelementptr inbounds %struct._sd_iterator, %struct._sd_iterator* %10, i32 0, i32 1, !dbg !7698
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7698
  %12 = load %struct._sd_iterator*, %struct._sd_iterator** %it_ptr.addr, align 8, !dbg !7699
  %types4 = getelementptr inbounds %struct._sd_iterator, %struct._sd_iterator* %12, i32 0, i32 0, !dbg !7700
  %13 = load %struct._sd_iterator*, %struct._sd_iterator** %it_ptr.addr, align 8, !dbg !7701
  %resolved_p = getelementptr inbounds %struct._sd_iterator, %struct._sd_iterator* %13, i32 0, i32 3, !dbg !7702
  call void @sd_next_list(%struct.rtx_def* %11, i32* %types4, %struct._deps_list** %list, i8* %resolved_p), !dbg !7703
  %14 = load %struct._deps_list*, %struct._deps_list** %list, align 8, !dbg !7704
  %first = getelementptr inbounds %struct._deps_list, %struct._deps_list* %14, i32 0, i32 0, !dbg !7704
  %15 = load %struct._sd_iterator*, %struct._sd_iterator** %it_ptr.addr, align 8, !dbg !7705
  %linkp5 = getelementptr inbounds %struct._sd_iterator, %struct._sd_iterator* %15, i32 0, i32 2, !dbg !7706
  store %struct._dep_link** %first, %struct._dep_link*** %linkp5, align 8, !dbg !7707
  %16 = load %struct._deps_list*, %struct._deps_list** %list, align 8, !dbg !7708
  %tobool = icmp ne %struct._deps_list* %16, null, !dbg !7708
  br i1 %tobool, label %if.then6, label %if.end, !dbg !7710

if.then6:                                         ; preds = %if.then3
  %17 = load %struct._sd_iterator*, %struct._sd_iterator** %it_ptr.addr, align 8, !dbg !7711
  %18 = load %struct._dep**, %struct._dep*** %dep_ptr.addr, align 8, !dbg !7712
  %call = call zeroext i8 @sd_iterator_cond(%struct._sd_iterator* %17, %struct._dep** %18), !dbg !7713
  store i8 %call, i8* %retval, align 1, !dbg !7714
  br label %return, !dbg !7714

if.end:                                           ; preds = %if.then3
  br label %if.end7, !dbg !7715

if.end7:                                          ; preds = %if.end, %if.else
  %19 = load %struct._dep**, %struct._dep*** %dep_ptr.addr, align 8, !dbg !7716
  store %struct._dep* null, %struct._dep** %19, align 8, !dbg !7717
  store i8 0, i8* %retval, align 1, !dbg !7718
  br label %return, !dbg !7718

return:                                           ; preds = %if.end7, %if.then6, %if.then
  %20 = load i8, i8* %retval, align 1, !dbg !7719
  ret i8 %20, !dbg !7719
}

declare dso_local i32 @ds_merge(i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @sd_iterator_next(%struct._sd_iterator* %it_ptr) #0 !dbg !7720 {
entry:
  %it_ptr.addr = alloca %struct._sd_iterator*, align 8
  store %struct._sd_iterator* %it_ptr, %struct._sd_iterator** %it_ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._sd_iterator** %it_ptr.addr, metadata !7723, metadata !DIExpression()), !dbg !7724
  %0 = load %struct._sd_iterator*, %struct._sd_iterator** %it_ptr.addr, align 8, !dbg !7725
  %linkp = getelementptr inbounds %struct._sd_iterator, %struct._sd_iterator* %0, i32 0, i32 2, !dbg !7725
  %1 = load %struct._dep_link**, %struct._dep_link*** %linkp, align 8, !dbg !7725
  %2 = load %struct._dep_link*, %struct._dep_link** %1, align 8, !dbg !7725
  %next = getelementptr inbounds %struct._dep_link, %struct._dep_link* %2, i32 0, i32 1, !dbg !7725
  %3 = load %struct._sd_iterator*, %struct._sd_iterator** %it_ptr.addr, align 8, !dbg !7726
  %linkp1 = getelementptr inbounds %struct._sd_iterator, %struct._sd_iterator* %3, i32 0, i32 2, !dbg !7727
  store %struct._dep_link** %next, %struct._dep_link*** %linkp1, align 8, !dbg !7728
  ret void, !dbg !7729
}

declare dso_local i32 @ds_weak(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @haifa_speculate_insn(%struct.rtx_def* %insn, i32 %request, %struct.rtx_def** %new_pat) #0 !dbg !7730 {
entry:
  %retval = alloca i32, align 4
  %insn.addr = alloca %struct.rtx_def*, align 8
  %request.addr = alloca i32, align 4
  %new_pat.addr = alloca %struct.rtx_def**, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !7733, metadata !DIExpression()), !dbg !7734
  store i32 %request, i32* %request.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %request.addr, metadata !7735, metadata !DIExpression()), !dbg !7736
  store %struct.rtx_def** %new_pat, %struct.rtx_def*** %new_pat.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %new_pat.addr, metadata !7737, metadata !DIExpression()), !dbg !7738
  %0 = load %struct.sched_deps_info_def*, %struct.sched_deps_info_def** @sched_deps_info, align 8, !dbg !7739
  %generate_spec_deps = getelementptr inbounds %struct.sched_deps_info_def, %struct.sched_deps_info_def* %0, i32 0, i32 12, !dbg !7739
  %bf.load = load i8, i8* %generate_spec_deps, align 8, !dbg !7739
  %bf.lshr = lshr i8 %bf.load, 2, !dbg !7739
  %bf.clear = and i8 %bf.lshr, 1, !dbg !7739
  %bf.cast = zext i8 %bf.clear to i32, !dbg !7739
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !7739
  br i1 %tobool, label %land.lhs.true, label %cond.true10, !dbg !7739

land.lhs.true:                                    ; preds = %entry
  %call = call zeroext i8 @sel_sched_p(), !dbg !7739
  %conv = zext i8 %call to i32, !dbg !7739
  %tobool1 = icmp ne i32 %conv, 0, !dbg !7739
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !7739

cond.true:                                        ; preds = %land.lhs.true
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7739
  %call2 = call zeroext i8 @sel_insn_is_speculation_check(%struct.rtx_def* %1), !dbg !7739
  %conv3 = zext i8 %call2 to i32, !dbg !7739
  %tobool4 = icmp ne i32 %conv3, 0, !dbg !7739
  br i1 %tobool4, label %cond.true10, label %cond.false11, !dbg !7739

cond.false:                                       ; preds = %land.lhs.true
  %2 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7739
  %tobool5 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %2, null, !dbg !7739
  br i1 %tobool5, label %cond.true6, label %cond.false7, !dbg !7739

cond.true6:                                       ; preds = %cond.false
  %3 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7739
  %base = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %3, i32 0, i32 0, !dbg !7739
  br label %cond.end, !dbg !7739

cond.false7:                                      ; preds = %cond.false
  br label %cond.end, !dbg !7739

cond.end:                                         ; preds = %cond.false7, %cond.true6
  %cond = phi %struct.VEC_haifa_insn_data_def_base* [ %base, %cond.true6 ], [ null, %cond.false7 ], !dbg !7739
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7739
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !7739
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7739
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !7739
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !7739
  %5 = load i32, i32* %rt_int, align 8, !dbg !7739
  %call8 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond, i32 %5), !dbg !7739
  %recovery_block = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call8, i32 0, i32 11, !dbg !7739
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %recovery_block, align 8, !dbg !7739
  %cmp = icmp ne %struct.basic_block_def* %6, null, !dbg !7739
  br i1 %cmp, label %cond.true10, label %cond.false11, !dbg !7739

cond.true10:                                      ; preds = %cond.end, %cond.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 4836, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !7739
  br label %cond.end12, !dbg !7739

cond.false11:                                     ; preds = %cond.end, %cond.true
  br label %cond.end12, !dbg !7739

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond13 = phi i32 [ 0, %cond.true10 ], [ 0, %cond.false11 ], !dbg !7739
  %7 = load %struct.VEC_haifa_deps_insn_data_def_heap*, %struct.VEC_haifa_deps_insn_data_def_heap** @h_d_i_d, align 8, !dbg !7740
  %tobool14 = icmp ne %struct.VEC_haifa_deps_insn_data_def_heap* %7, null, !dbg !7740
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !7740

cond.true15:                                      ; preds = %cond.end12
  %8 = load %struct.VEC_haifa_deps_insn_data_def_heap*, %struct.VEC_haifa_deps_insn_data_def_heap** @h_d_i_d, align 8, !dbg !7740
  %base16 = getelementptr inbounds %struct.VEC_haifa_deps_insn_data_def_heap, %struct.VEC_haifa_deps_insn_data_def_heap* %8, i32 0, i32 0, !dbg !7740
  br label %cond.end18, !dbg !7740

cond.false17:                                     ; preds = %cond.end12
  br label %cond.end18, !dbg !7740

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_haifa_deps_insn_data_def_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !7740
  %9 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !7740
  %tobool20 = icmp ne %struct.VEC_int_heap* %9, null, !dbg !7740
  br i1 %tobool20, label %cond.true21, label %cond.false23, !dbg !7740

cond.true21:                                      ; preds = %cond.end18
  %10 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !7740
  %base22 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %10, i32 0, i32 0, !dbg !7740
  br label %cond.end24, !dbg !7740

cond.false23:                                     ; preds = %cond.end18
  br label %cond.end24, !dbg !7740

cond.end24:                                       ; preds = %cond.false23, %cond.true21
  %cond25 = phi %struct.VEC_int_base* [ %base22, %cond.true21 ], [ null, %cond.false23 ], !dbg !7740
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7740
  %u26 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !7740
  %fld27 = bitcast %union.u* %u26 to [1 x %union.rtunion_def]*, !dbg !7740
  %arrayidx28 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld27, i64 0, i64 0, !dbg !7740
  %rt_int29 = bitcast %union.rtunion_def* %arrayidx28 to i32*, !dbg !7740
  %12 = load i32, i32* %rt_int29, align 8, !dbg !7740
  %call30 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond25, i32 %12), !dbg !7740
  %call31 = call %struct._haifa_deps_insn_data* @VEC_haifa_deps_insn_data_def_base_index(%struct.VEC_haifa_deps_insn_data_def_base* %cond19, i32 %call30), !dbg !7740
  %has_internal_dep = getelementptr inbounds %struct._haifa_deps_insn_data, %struct._haifa_deps_insn_data* %call31, i32 0, i32 1, !dbg !7740
  %13 = load i32, i32* %has_internal_dep, align 4, !dbg !7740
  %tobool32 = icmp ne i32 %13, 0, !dbg !7740
  br i1 %tobool32, label %if.then, label %lor.lhs.false, !dbg !7742

lor.lhs.false:                                    ; preds = %cond.end24
  %14 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7743
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !7743
  %bf.load33 = load i32, i32* %15, align 8, !dbg !7743
  %bf.lshr34 = lshr i32 %bf.load33, 28, !dbg !7743
  %bf.clear35 = and i32 %bf.lshr34, 1, !dbg !7743
  %tobool36 = icmp ne i32 %bf.clear35, 0, !dbg !7743
  br i1 %tobool36, label %if.then, label %if.end, !dbg !7744

if.then:                                          ; preds = %lor.lhs.false, %cond.end24
  store i32 -1, i32* %retval, align 4, !dbg !7745
  br label %return, !dbg !7745

if.end:                                           ; preds = %lor.lhs.false
  %16 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7746
  %17 = load i32, i32* %request.addr, align 4, !dbg !7747
  %18 = load %struct.rtx_def**, %struct.rtx_def*** %new_pat.addr, align 8, !dbg !7748
  %call37 = call i32 @sched_speculate_insn(%struct.rtx_def* %16, i32 %17, %struct.rtx_def** %18), !dbg !7749
  store i32 %call37, i32* %retval, align 4, !dbg !7750
  br label %return, !dbg !7750

return:                                           ; preds = %if.end, %if.then
  %19 = load i32, i32* %retval, align 4, !dbg !7751
  ret i32 %19, !dbg !7751
}

; Function Attrs: noinline nounwind uwtable
define internal void @haifa_change_pattern(%struct.rtx_def* %insn, %struct.rtx_def* %new_pat) #0 !dbg !7752 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %new_pat.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !7753, metadata !DIExpression()), !dbg !7754
  store %struct.rtx_def* %new_pat, %struct.rtx_def** %new_pat.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %new_pat.addr, metadata !7755, metadata !DIExpression()), !dbg !7756
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7757
  %1 = load %struct.rtx_def*, %struct.rtx_def** %new_pat.addr, align 8, !dbg !7758
  call void @sched_change_pattern(%struct.rtx_def* %0, %struct.rtx_def* %1), !dbg !7759
  %2 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7760
  %tobool = icmp ne %struct.VEC_haifa_insn_data_def_heap* %2, null, !dbg !7760
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7760

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7760
  %base = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %3, i32 0, i32 0, !dbg !7760
  br label %cond.end, !dbg !7760

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7760

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_haifa_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7760
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7760
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !7760
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7760
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !7760
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !7760
  %5 = load i32, i32* %rt_int, align 8, !dbg !7760
  %call = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond, i32 %5), !dbg !7760
  %cost = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call, i32 0, i32 5, !dbg !7760
  store i16 -1, i16* %cost, align 4, !dbg !7761
  %6 = load i32, i32* @max_insn_queue_index, align 4, !dbg !7762
  %add = add nsw i32 %6, 1, !dbg !7762
  %sub = sub nsw i32 0, %add, !dbg !7762
  %7 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7763
  %tobool1 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %7, null, !dbg !7763
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !7763

cond.true2:                                       ; preds = %cond.end
  %8 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7763
  %base3 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %8, i32 0, i32 0, !dbg !7763
  br label %cond.end5, !dbg !7763

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !7763

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_haifa_insn_data_def_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !7763
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7763
  %u7 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !7763
  %fld8 = bitcast %union.u* %u7 to [1 x %union.rtunion_def]*, !dbg !7763
  %arrayidx9 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld8, i64 0, i64 0, !dbg !7763
  %rt_int10 = bitcast %union.rtunion_def* %arrayidx9 to i32*, !dbg !7763
  %10 = load i32, i32* %rt_int10, align 8, !dbg !7763
  %call11 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond6, i32 %10), !dbg !7763
  %tick = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call11, i32 0, i32 2, !dbg !7763
  store i32 %sub, i32* %tick, align 8, !dbg !7764
  ret void, !dbg !7765
}

; Function Attrs: noinline nounwind uwtable
define internal void @change_queue_index(%struct.rtx_def* %next, i32 %delay) #0 !dbg !7766 {
entry:
  %next.addr = alloca %struct.rtx_def*, align 8
  %delay.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.rtx_def* %next, %struct.rtx_def** %next.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %next.addr, metadata !7767, metadata !DIExpression()), !dbg !7768
  store i32 %delay, i32* %delay.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %delay.addr, metadata !7769, metadata !DIExpression()), !dbg !7770
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7771, metadata !DIExpression()), !dbg !7772
  %0 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7773
  %tobool = icmp ne %struct.VEC_haifa_insn_data_def_heap* %0, null, !dbg !7773
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7773

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7773
  %base = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %1, i32 0, i32 0, !dbg !7773
  br label %cond.end, !dbg !7773

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7773

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_haifa_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7773
  %2 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7773
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !7773
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7773
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !7773
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !7773
  %3 = load i32, i32* %rt_int, align 8, !dbg !7773
  %call = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond, i32 %3), !dbg !7773
  %queue_index = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call, i32 0, i32 4, !dbg !7773
  %4 = load i32, i32* %queue_index, align 8, !dbg !7773
  store i32 %4, i32* %i, align 4, !dbg !7772
  %5 = load i32, i32* %delay.addr, align 4, !dbg !7774
  %cmp = icmp sle i32 -2, %5, !dbg !7774
  br i1 %cmp, label %land.lhs.true, label %cond.true4, !dbg !7774

land.lhs.true:                                    ; preds = %cond.end
  %6 = load i32, i32* %delay.addr, align 4, !dbg !7774
  %7 = load i32, i32* @max_insn_queue_index, align 4, !dbg !7774
  %cmp1 = icmp sle i32 %6, %7, !dbg !7774
  br i1 %cmp1, label %land.lhs.true2, label %cond.true4, !dbg !7774

land.lhs.true2:                                   ; preds = %land.lhs.true
  %8 = load i32, i32* %delay.addr, align 4, !dbg !7774
  %cmp3 = icmp ne i32 %8, 0, !dbg !7774
  br i1 %cmp3, label %cond.false5, label %cond.true4, !dbg !7774

cond.true4:                                       ; preds = %land.lhs.true2, %land.lhs.true, %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 3889, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !7774
  br label %cond.end6, !dbg !7774

cond.false5:                                      ; preds = %land.lhs.true2
  br label %cond.end6, !dbg !7774

cond.end6:                                        ; preds = %cond.false5, %cond.true4
  %cond7 = phi i32 [ 0, %cond.true4 ], [ 0, %cond.false5 ], !dbg !7774
  %9 = load i32, i32* %i, align 4, !dbg !7775
  %cmp8 = icmp ne i32 %9, -3, !dbg !7775
  br i1 %cmp8, label %cond.false10, label %cond.true9, !dbg !7775

cond.true9:                                       ; preds = %cond.end6
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 3890, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !7775
  br label %cond.end11, !dbg !7775

cond.false10:                                     ; preds = %cond.end6
  br label %cond.end11, !dbg !7775

cond.end11:                                       ; preds = %cond.false10, %cond.true9
  %cond12 = phi i32 [ 0, %cond.true9 ], [ 0, %cond.false10 ], !dbg !7775
  %10 = load i32, i32* %delay.addr, align 4, !dbg !7776
  %cmp13 = icmp sgt i32 %10, 0, !dbg !7778
  br i1 %cmp13, label %land.lhs.true14, label %lor.lhs.false, !dbg !7779

land.lhs.true14:                                  ; preds = %cond.end11
  %11 = load i32, i32* @q_ptr, align 4, !dbg !7780
  %12 = load i32, i32* %delay.addr, align 4, !dbg !7780
  %add = add nsw i32 %11, %12, !dbg !7780
  %13 = load i32, i32* @max_insn_queue_index, align 4, !dbg !7780
  %and = and i32 %add, %13, !dbg !7780
  %14 = load i32, i32* %i, align 4, !dbg !7781
  %cmp15 = icmp eq i32 %and, %14, !dbg !7782
  br i1 %cmp15, label %if.then, label %lor.lhs.false, !dbg !7783

lor.lhs.false:                                    ; preds = %land.lhs.true14, %cond.end11
  %15 = load i32, i32* %delay.addr, align 4, !dbg !7784
  %cmp16 = icmp slt i32 %15, 0, !dbg !7785
  br i1 %cmp16, label %land.lhs.true17, label %if.end, !dbg !7786

land.lhs.true17:                                  ; preds = %lor.lhs.false
  %16 = load i32, i32* %delay.addr, align 4, !dbg !7787
  %17 = load i32, i32* %i, align 4, !dbg !7788
  %cmp18 = icmp eq i32 %16, %17, !dbg !7789
  br i1 %cmp18, label %if.then, label %if.end, !dbg !7790

if.then:                                          ; preds = %land.lhs.true17, %land.lhs.true14
  br label %if.end47, !dbg !7791

if.end:                                           ; preds = %land.lhs.true17, %lor.lhs.false
  %18 = load i32, i32* %i, align 4, !dbg !7792
  %cmp19 = icmp eq i32 %18, -1, !dbg !7794
  br i1 %cmp19, label %if.then20, label %if.else, !dbg !7795

if.then20:                                        ; preds = %if.end
  %19 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7796
  call void @ready_remove_insn(%struct.rtx_def* %19), !dbg !7797
  br label %if.end24, !dbg !7797

if.else:                                          ; preds = %if.end
  %20 = load i32, i32* %i, align 4, !dbg !7798
  %cmp21 = icmp sge i32 %20, 0, !dbg !7800
  br i1 %cmp21, label %if.then22, label %if.end23, !dbg !7801

if.then22:                                        ; preds = %if.else
  %21 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7802
  call void @queue_remove(%struct.rtx_def* %21), !dbg !7803
  br label %if.end23, !dbg !7803

if.end23:                                         ; preds = %if.then22, %if.else
  br label %if.end24

if.end24:                                         ; preds = %if.end23, %if.then20
  %22 = load i32, i32* %delay.addr, align 4, !dbg !7804
  %cmp25 = icmp eq i32 %22, -1, !dbg !7806
  br i1 %cmp25, label %if.then26, label %if.else27, !dbg !7807

if.then26:                                        ; preds = %if.end24
  %23 = load %struct.ready_list*, %struct.ready_list** @readyp, align 8, !dbg !7808
  %24 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7809
  call void @ready_add(%struct.ready_list* %23, %struct.rtx_def* %24, i8 zeroext 0), !dbg !7810
  br label %if.end31, !dbg !7810

if.else27:                                        ; preds = %if.end24
  %25 = load i32, i32* %delay.addr, align 4, !dbg !7811
  %cmp28 = icmp sge i32 %25, 1, !dbg !7813
  br i1 %cmp28, label %if.then29, label %if.end30, !dbg !7814

if.then29:                                        ; preds = %if.else27
  %26 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7815
  %27 = load i32, i32* %delay.addr, align 4, !dbg !7816
  call void @queue_insn(%struct.rtx_def* %26, i32 %27), !dbg !7817
  br label %if.end30, !dbg !7817

if.end30:                                         ; preds = %if.then29, %if.else27
  br label %if.end31

if.end31:                                         ; preds = %if.end30, %if.then26
  %28 = load i32, i32* @sched_verbose, align 4, !dbg !7818
  %cmp32 = icmp sge i32 %28, 2, !dbg !7820
  br i1 %cmp32, label %if.then33, label %if.end47, !dbg !7821

if.then33:                                        ; preds = %if.end31
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !7822
  %30 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !7824
  %print_insn = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %30, i32 0, i32 5, !dbg !7825
  %31 = load i8* (%struct.rtx_def*, i32)*, i8* (%struct.rtx_def*, i32)** %print_insn, align 8, !dbg !7825
  %32 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7826
  %call34 = call i8* %31(%struct.rtx_def* %32, i32 0), !dbg !7827
  %call35 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %29, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.46, i64 0, i64 0), i8* %call34), !dbg !7828
  %33 = load i32, i32* %delay.addr, align 4, !dbg !7829
  %cmp36 = icmp eq i32 %33, -1, !dbg !7831
  br i1 %cmp36, label %if.then37, label %if.else39, !dbg !7832

if.then37:                                        ; preds = %if.then33
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !7833
  %call38 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %34, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.47, i64 0, i64 0)), !dbg !7834
  br label %if.end46, !dbg !7834

if.else39:                                        ; preds = %if.then33
  %35 = load i32, i32* %delay.addr, align 4, !dbg !7835
  %cmp40 = icmp sge i32 %35, 1, !dbg !7837
  br i1 %cmp40, label %if.then41, label %if.else43, !dbg !7838

if.then41:                                        ; preds = %if.else39
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !7839
  %37 = load i32, i32* %delay.addr, align 4, !dbg !7840
  %call42 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %36, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.48, i64 0, i64 0), i32 %37), !dbg !7841
  br label %if.end45, !dbg !7841

if.else43:                                        ; preds = %if.else39
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !7842
  %call44 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %38, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.49, i64 0, i64 0)), !dbg !7843
  br label %if.end45

if.end45:                                         ; preds = %if.else43, %if.then41
  br label %if.end46

if.end46:                                         ; preds = %if.end45, %if.then37
  br label %if.end47, !dbg !7844

if.end47:                                         ; preds = %if.then, %if.end46, %if.end31
  ret void, !dbg !7845
}

declare dso_local zeroext i8 @sel_insn_is_speculation_check(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @adjust_priority(%struct.rtx_def* %prev) #0 !dbg !7846 {
entry:
  %prev.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %prev, %struct.rtx_def** %prev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %prev.addr, metadata !7847, metadata !DIExpression()), !dbg !7848
  %0 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 1), align 8, !dbg !7849
  %tobool = icmp ne i32 (%struct.rtx_def*, i32)* %0, null, !dbg !7851
  br i1 %tobool, label %if.then, label %if.end, !dbg !7852

if.then:                                          ; preds = %entry
  %1 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 1), align 8, !dbg !7853
  %2 = load %struct.rtx_def*, %struct.rtx_def** %prev.addr, align 8, !dbg !7854
  %3 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7855
  %tobool1 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %3, null, !dbg !7855
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !7855

cond.true:                                        ; preds = %if.then
  %4 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7855
  %base = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %4, i32 0, i32 0, !dbg !7855
  br label %cond.end, !dbg !7855

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !7855

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_haifa_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7855
  %5 = load %struct.rtx_def*, %struct.rtx_def** %prev.addr, align 8, !dbg !7855
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !7855
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7855
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !7855
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !7855
  %6 = load i32, i32* %rt_int, align 8, !dbg !7855
  %call = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond, i32 %6), !dbg !7855
  %priority = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call, i32 0, i32 1, !dbg !7855
  %7 = load i32, i32* %priority, align 4, !dbg !7855
  %call2 = call i32 %1(%struct.rtx_def* %2, i32 %7), !dbg !7856
  %8 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7857
  %tobool3 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %8, null, !dbg !7857
  br i1 %tobool3, label %cond.true4, label %cond.false6, !dbg !7857

cond.true4:                                       ; preds = %cond.end
  %9 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7857
  %base5 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %9, i32 0, i32 0, !dbg !7857
  br label %cond.end7, !dbg !7857

cond.false6:                                      ; preds = %cond.end
  br label %cond.end7, !dbg !7857

cond.end7:                                        ; preds = %cond.false6, %cond.true4
  %cond8 = phi %struct.VEC_haifa_insn_data_def_base* [ %base5, %cond.true4 ], [ null, %cond.false6 ], !dbg !7857
  %10 = load %struct.rtx_def*, %struct.rtx_def** %prev.addr, align 8, !dbg !7857
  %u9 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !7857
  %fld10 = bitcast %union.u* %u9 to [1 x %union.rtunion_def]*, !dbg !7857
  %arrayidx11 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld10, i64 0, i64 0, !dbg !7857
  %rt_int12 = bitcast %union.rtunion_def* %arrayidx11 to i32*, !dbg !7857
  %11 = load i32, i32* %rt_int12, align 8, !dbg !7857
  %call13 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond8, i32 %11), !dbg !7857
  %priority14 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call13, i32 0, i32 1, !dbg !7857
  store i32 %call2, i32* %priority14, align 4, !dbg !7858
  br label %if.end, !dbg !7857

if.end:                                           ; preds = %cond.end7, %entry
  ret void, !dbg !7859
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @fix_tick_ready(%struct.rtx_def* %next) #0 !dbg !7860 {
entry:
  %next.addr = alloca %struct.rtx_def*, align 8
  %tick = alloca i32, align 4
  %delay = alloca i32, align 4
  %full_p = alloca i32, align 4
  %sd_it = alloca %struct._sd_iterator, align 8
  %dep = alloca %struct._dep*, align 8
  %tmp = alloca %struct._sd_iterator, align 8
  %pro = alloca %struct.rtx_def*, align 8
  %tick1 = alloca i32, align 4
  store %struct.rtx_def* %next, %struct.rtx_def** %next.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %next.addr, metadata !7861, metadata !DIExpression()), !dbg !7862
  call void @llvm.dbg.declare(metadata i32* %tick, metadata !7863, metadata !DIExpression()), !dbg !7864
  call void @llvm.dbg.declare(metadata i32* %delay, metadata !7865, metadata !DIExpression()), !dbg !7866
  %0 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7867
  %call = call zeroext i8 @sd_lists_empty_p(%struct.rtx_def* %0, i32 8), !dbg !7869
  %tobool = icmp ne i8 %call, 0, !dbg !7869
  br i1 %tobool, label %if.else, label %if.then, !dbg !7870

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %full_p, metadata !7871, metadata !DIExpression()), !dbg !7873
  call void @llvm.dbg.declare(metadata %struct._sd_iterator* %sd_it, metadata !7874, metadata !DIExpression()), !dbg !7875
  call void @llvm.dbg.declare(metadata %struct._dep** %dep, metadata !7876, metadata !DIExpression()), !dbg !7877
  %1 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7878
  %tobool1 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %1, null, !dbg !7878
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !7878

cond.true:                                        ; preds = %if.then
  %2 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7878
  %base = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %2, i32 0, i32 0, !dbg !7878
  br label %cond.end, !dbg !7878

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !7878

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_haifa_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7878
  %3 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7878
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !7878
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7878
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !7878
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !7878
  %4 = load i32, i32* %rt_int, align 8, !dbg !7878
  %call2 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond, i32 %4), !dbg !7878
  %tick3 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call2, i32 0, i32 2, !dbg !7878
  %5 = load i32, i32* %tick3, align 8, !dbg !7878
  store i32 %5, i32* %tick, align 4, !dbg !7879
  %6 = load i32, i32* %tick, align 4, !dbg !7880
  %7 = load i32, i32* @max_insn_queue_index, align 4, !dbg !7881
  %add = add nsw i32 %7, 1, !dbg !7881
  %sub = sub nsw i32 0, %add, !dbg !7881
  %cmp = icmp eq i32 %6, %sub, !dbg !7882
  %conv = zext i1 %cmp to i32, !dbg !7882
  store i32 %conv, i32* %full_p, align 4, !dbg !7883
  %8 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7884
  call void @sd_iterator_start(%struct._sd_iterator* sret %tmp, %struct.rtx_def* %8, i32 8), !dbg !7884
  %9 = bitcast %struct._sd_iterator* %sd_it to i8*, !dbg !7884
  %10 = bitcast %struct._sd_iterator* %tmp to i8*, !dbg !7884
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 32, i1 false), !dbg !7884
  br label %for.cond, !dbg !7884

for.cond:                                         ; preds = %for.inc, %cond.end
  %call4 = call zeroext i8 @sd_iterator_cond(%struct._sd_iterator* %sd_it, %struct._dep** %dep), !dbg !7886
  %tobool5 = icmp ne i8 %call4, 0, !dbg !7884
  br i1 %tobool5, label %for.body, label %for.end, !dbg !7884

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pro, metadata !7888, metadata !DIExpression()), !dbg !7890
  %11 = load %struct._dep*, %struct._dep** %dep, align 8, !dbg !7891
  %pro6 = getelementptr inbounds %struct._dep, %struct._dep* %11, i32 0, i32 0, !dbg !7891
  %12 = load %struct.rtx_def*, %struct.rtx_def** %pro6, align 8, !dbg !7891
  store %struct.rtx_def* %12, %struct.rtx_def** %pro, align 8, !dbg !7890
  call void @llvm.dbg.declare(metadata i32* %tick1, metadata !7892, metadata !DIExpression()), !dbg !7893
  %13 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7894
  %tobool7 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %13, null, !dbg !7894
  br i1 %tobool7, label %cond.true8, label %cond.false10, !dbg !7894

cond.true8:                                       ; preds = %for.body
  %14 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7894
  %base9 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %14, i32 0, i32 0, !dbg !7894
  br label %cond.end11, !dbg !7894

cond.false10:                                     ; preds = %for.body
  br label %cond.end11, !dbg !7894

cond.end11:                                       ; preds = %cond.false10, %cond.true8
  %cond12 = phi %struct.VEC_haifa_insn_data_def_base* [ %base9, %cond.true8 ], [ null, %cond.false10 ], !dbg !7894
  %15 = load %struct.rtx_def*, %struct.rtx_def** %pro, align 8, !dbg !7894
  %u13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !7894
  %fld14 = bitcast %union.u* %u13 to [1 x %union.rtunion_def]*, !dbg !7894
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i64 0, i64 0, !dbg !7894
  %rt_int16 = bitcast %union.rtunion_def* %arrayidx15 to i32*, !dbg !7894
  %16 = load i32, i32* %rt_int16, align 8, !dbg !7894
  %call17 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond12, i32 %16), !dbg !7894
  %tick18 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call17, i32 0, i32 2, !dbg !7894
  %17 = load i32, i32* %tick18, align 8, !dbg !7894
  %18 = load i32, i32* @max_insn_queue_index, align 4, !dbg !7894
  %sub19 = sub nsw i32 0, %18, !dbg !7894
  %cmp20 = icmp sge i32 %17, %sub19, !dbg !7894
  br i1 %cmp20, label %cond.false23, label %cond.true22, !dbg !7894

cond.true22:                                      ; preds = %cond.end11
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 3856, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !7894
  br label %cond.end24, !dbg !7894

cond.false23:                                     ; preds = %cond.end11
  br label %cond.end24, !dbg !7894

cond.end24:                                       ; preds = %cond.false23, %cond.true22
  %cond25 = phi i32 [ 0, %cond.true22 ], [ 0, %cond.false23 ], !dbg !7894
  %19 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7895
  %tobool26 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %19, null, !dbg !7895
  br i1 %tobool26, label %cond.true27, label %cond.false29, !dbg !7895

cond.true27:                                      ; preds = %cond.end24
  %20 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7895
  %base28 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %20, i32 0, i32 0, !dbg !7895
  br label %cond.end30, !dbg !7895

cond.false29:                                     ; preds = %cond.end24
  br label %cond.end30, !dbg !7895

cond.end30:                                       ; preds = %cond.false29, %cond.true27
  %cond31 = phi %struct.VEC_haifa_insn_data_def_base* [ %base28, %cond.true27 ], [ null, %cond.false29 ], !dbg !7895
  %21 = load %struct.rtx_def*, %struct.rtx_def** %pro, align 8, !dbg !7895
  %u32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !7895
  %fld33 = bitcast %union.u* %u32 to [1 x %union.rtunion_def]*, !dbg !7895
  %arrayidx34 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld33, i64 0, i64 0, !dbg !7895
  %rt_int35 = bitcast %union.rtunion_def* %arrayidx34 to i32*, !dbg !7895
  %22 = load i32, i32* %rt_int35, align 8, !dbg !7895
  %call36 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond31, i32 %22), !dbg !7895
  %tick37 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call36, i32 0, i32 2, !dbg !7895
  %23 = load i32, i32* %tick37, align 8, !dbg !7895
  %24 = load %struct._dep*, %struct._dep** %dep, align 8, !dbg !7896
  %call38 = call i32 @dep_cost(%struct._dep* %24), !dbg !7897
  %add39 = add nsw i32 %23, %call38, !dbg !7898
  store i32 %add39, i32* %tick1, align 4, !dbg !7899
  %25 = load i32, i32* %tick1, align 4, !dbg !7900
  %26 = load i32, i32* %tick, align 4, !dbg !7902
  %cmp40 = icmp sgt i32 %25, %26, !dbg !7903
  br i1 %cmp40, label %if.then42, label %if.end, !dbg !7904

if.then42:                                        ; preds = %cond.end30
  %27 = load i32, i32* %tick1, align 4, !dbg !7905
  store i32 %27, i32* %tick, align 4, !dbg !7906
  br label %if.end, !dbg !7907

if.end:                                           ; preds = %if.then42, %cond.end30
  %28 = load i32, i32* %full_p, align 4, !dbg !7908
  %tobool43 = icmp ne i32 %28, 0, !dbg !7908
  br i1 %tobool43, label %if.end45, label %if.then44, !dbg !7910

if.then44:                                        ; preds = %if.end
  br label %for.end, !dbg !7911

if.end45:                                         ; preds = %if.end
  br label %for.inc, !dbg !7912

for.inc:                                          ; preds = %if.end45
  call void @sd_iterator_next(%struct._sd_iterator* %sd_it), !dbg !7886
  br label %for.cond, !dbg !7886, !llvm.loop !7913

for.end:                                          ; preds = %if.then44, %for.cond
  br label %if.end46, !dbg !7915

if.else:                                          ; preds = %entry
  store i32 -1, i32* %tick, align 4, !dbg !7916
  br label %if.end46

if.end46:                                         ; preds = %if.else, %for.end
  %29 = load i32, i32* %tick, align 4, !dbg !7917
  %30 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7918
  %tobool47 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %30, null, !dbg !7918
  br i1 %tobool47, label %cond.true48, label %cond.false50, !dbg !7918

cond.true48:                                      ; preds = %if.end46
  %31 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7918
  %base49 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %31, i32 0, i32 0, !dbg !7918
  br label %cond.end51, !dbg !7918

cond.false50:                                     ; preds = %if.end46
  br label %cond.end51, !dbg !7918

cond.end51:                                       ; preds = %cond.false50, %cond.true48
  %cond52 = phi %struct.VEC_haifa_insn_data_def_base* [ %base49, %cond.true48 ], [ null, %cond.false50 ], !dbg !7918
  %32 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7918
  %u53 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1, !dbg !7918
  %fld54 = bitcast %union.u* %u53 to [1 x %union.rtunion_def]*, !dbg !7918
  %arrayidx55 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld54, i64 0, i64 0, !dbg !7918
  %rt_int56 = bitcast %union.rtunion_def* %arrayidx55 to i32*, !dbg !7918
  %33 = load i32, i32* %rt_int56, align 8, !dbg !7918
  %call57 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond52, i32 %33), !dbg !7918
  %tick58 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call57, i32 0, i32 2, !dbg !7918
  store i32 %29, i32* %tick58, align 8, !dbg !7919
  %34 = load i32, i32* %tick, align 4, !dbg !7920
  %35 = load i32, i32* @clock_var, align 4, !dbg !7921
  %sub59 = sub nsw i32 %34, %35, !dbg !7922
  store i32 %sub59, i32* %delay, align 4, !dbg !7923
  %36 = load i32, i32* %delay, align 4, !dbg !7924
  %cmp60 = icmp sle i32 %36, 0, !dbg !7926
  br i1 %cmp60, label %if.then64, label %lor.lhs.false, !dbg !7927

lor.lhs.false:                                    ; preds = %cond.end51
  %37 = load i8, i8* @sched_pressure_p, align 1, !dbg !7928
  %conv62 = zext i8 %37 to i32, !dbg !7928
  %tobool63 = icmp ne i32 %conv62, 0, !dbg !7928
  br i1 %tobool63, label %if.then64, label %if.end65, !dbg !7929

if.then64:                                        ; preds = %lor.lhs.false, %cond.end51
  store i32 -1, i32* %delay, align 4, !dbg !7930
  br label %if.end65, !dbg !7931

if.end65:                                         ; preds = %if.then64, %lor.lhs.false
  %38 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7932
  %39 = load i32, i32* %delay, align 4, !dbg !7933
  call void @change_queue_index(%struct.rtx_def* %38, i32 %39), !dbg !7934
  %40 = load i32, i32* %delay, align 4, !dbg !7935
  ret i32 %40, !dbg !7936
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @sched_extend_ready_list(i32 %new_sched_ready_n_insns) #0 !dbg !7937 {
entry:
  %new_sched_ready_n_insns.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %new_sched_ready_n_insns, i32* %new_sched_ready_n_insns.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %new_sched_ready_n_insns.addr, metadata !7940, metadata !DIExpression()), !dbg !7941
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7942, metadata !DIExpression()), !dbg !7943
  %0 = load i32, i32* @sched_ready_n_insns, align 4, !dbg !7944
  %cmp = icmp eq i32 %0, -1, !dbg !7946
  br i1 %cmp, label %if.then, label %if.else, !dbg !7947

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !7948
  store i32 0, i32* @sched_ready_n_insns, align 4, !dbg !7950
  br label %if.end, !dbg !7951

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @sched_ready_n_insns, align 4, !dbg !7952
  %add = add nsw i32 %1, 1, !dbg !7953
  store i32 %add, i32* %i, align 4, !dbg !7954
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %2 = load i32, i32* %new_sched_ready_n_insns.addr, align 4, !dbg !7955
  %3 = load i32, i32* @issue_rate, align 4, !dbg !7956
  %add1 = add nsw i32 %2, %3, !dbg !7957
  store i32 %add1, i32* getelementptr inbounds (%struct.ready_list, %struct.ready_list* @ready, i32 0, i32 1), align 8, !dbg !7958
  %4 = load %struct.rtx_def**, %struct.rtx_def*** getelementptr inbounds (%struct.ready_list, %struct.ready_list* @ready, i32 0, i32 0), align 8, !dbg !7959
  %5 = bitcast %struct.rtx_def** %4 to i8*, !dbg !7959
  %6 = load i32, i32* getelementptr inbounds (%struct.ready_list, %struct.ready_list* @ready, i32 0, i32 1), align 8, !dbg !7959
  %conv = sext i32 %6 to i64, !dbg !7959
  %mul = mul i64 8, %conv, !dbg !7959
  %call = call i8* @xrealloc(i8* %5, i64 %mul), !dbg !7959
  %7 = bitcast i8* %call to %struct.rtx_def**, !dbg !7959
  store %struct.rtx_def** %7, %struct.rtx_def*** getelementptr inbounds (%struct.ready_list, %struct.ready_list* @ready, i32 0, i32 0), align 8, !dbg !7960
  %8 = load i32, i32* %new_sched_ready_n_insns.addr, align 4, !dbg !7961
  %9 = load i32, i32* @sched_ready_n_insns, align 4, !dbg !7961
  %cmp2 = icmp sge i32 %8, %9, !dbg !7961
  br i1 %cmp2, label %cond.false, label %cond.true, !dbg !7961

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 3944, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !7961
  br label %cond.end, !dbg !7961

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !7961

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7961
  %10 = load i8*, i8** @ready_try, align 8, !dbg !7962
  %11 = load i32, i32* %new_sched_ready_n_insns.addr, align 4, !dbg !7963
  %conv4 = sext i32 %11 to i64, !dbg !7963
  %12 = load i32, i32* @sched_ready_n_insns, align 4, !dbg !7964
  %conv5 = sext i32 %12 to i64, !dbg !7964
  %call6 = call i8* @xrecalloc(i8* %10, i64 %conv4, i64 %conv5, i64 1), !dbg !7965
  store i8* %call6, i8** @ready_try, align 8, !dbg !7966
  %13 = load %struct.choice_entry*, %struct.choice_entry** @choice_stack, align 8, !dbg !7967
  %14 = bitcast %struct.choice_entry* %13 to i8*, !dbg !7967
  %15 = load i32, i32* %new_sched_ready_n_insns.addr, align 4, !dbg !7967
  %add7 = add nsw i32 %15, 1, !dbg !7967
  %conv8 = sext i32 %add7 to i64, !dbg !7967
  %mul9 = mul i64 24, %conv8, !dbg !7967
  %call10 = call i8* @xrealloc(i8* %14, i64 %mul9), !dbg !7967
  %16 = bitcast i8* %call10 to %struct.choice_entry*, !dbg !7967
  store %struct.choice_entry* %16, %struct.choice_entry** @choice_stack, align 8, !dbg !7968
  br label %for.cond, !dbg !7969

for.cond:                                         ; preds = %for.inc, %cond.end
  %17 = load i32, i32* %i, align 4, !dbg !7970
  %18 = load i32, i32* %new_sched_ready_n_insns.addr, align 4, !dbg !7973
  %cmp11 = icmp sle i32 %17, %18, !dbg !7974
  br i1 %cmp11, label %for.body, label %for.end, !dbg !7975

for.body:                                         ; preds = %for.cond
  %19 = load i64, i64* @dfa_state_size, align 8, !dbg !7976
  %call13 = call i8* @xmalloc(i64 %19), !dbg !7977
  %20 = load %struct.choice_entry*, %struct.choice_entry** @choice_stack, align 8, !dbg !7978
  %21 = load i32, i32* %i, align 4, !dbg !7979
  %idxprom = sext i32 %21 to i64, !dbg !7978
  %arrayidx = getelementptr inbounds %struct.choice_entry, %struct.choice_entry* %20, i64 %idxprom, !dbg !7978
  %state = getelementptr inbounds %struct.choice_entry, %struct.choice_entry* %arrayidx, i32 0, i32 3, !dbg !7980
  store i8* %call13, i8** %state, align 8, !dbg !7981
  br label %for.inc, !dbg !7978

for.inc:                                          ; preds = %for.body
  %22 = load i32, i32* %i, align 4, !dbg !7982
  %inc = add nsw i32 %22, 1, !dbg !7982
  store i32 %inc, i32* %i, align 4, !dbg !7982
  br label %for.cond, !dbg !7983, !llvm.loop !7984

for.end:                                          ; preds = %for.cond
  %23 = load i32, i32* %new_sched_ready_n_insns.addr, align 4, !dbg !7986
  store i32 %23, i32* @sched_ready_n_insns, align 4, !dbg !7987
  ret void, !dbg !7988
}

declare dso_local i8* @xrealloc(i8*, i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @xrecalloc(i8* %p, i64 %new_nmemb, i64 %old_nmemb, i64 %size) #0 !dbg !7989 {
entry:
  %p.addr = alloca i8*, align 8
  %new_nmemb.addr = alloca i64, align 8
  %old_nmemb.addr = alloca i64, align 8
  %size.addr = alloca i64, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !7992, metadata !DIExpression()), !dbg !7993
  store i64 %new_nmemb, i64* %new_nmemb.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %new_nmemb.addr, metadata !7994, metadata !DIExpression()), !dbg !7995
  store i64 %old_nmemb, i64* %old_nmemb.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %old_nmemb.addr, metadata !7996, metadata !DIExpression()), !dbg !7997
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !7998, metadata !DIExpression()), !dbg !7999
  %0 = load i64, i64* %new_nmemb.addr, align 8, !dbg !8000
  %1 = load i64, i64* %old_nmemb.addr, align 8, !dbg !8000
  %cmp = icmp uge i64 %0, %1, !dbg !8000
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !8000

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 4222, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !8000
  br label %cond.end, !dbg !8000

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8000

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8000
  %2 = load i8*, i8** %p.addr, align 8, !dbg !8001
  %3 = load i64, i64* %new_nmemb.addr, align 8, !dbg !8001
  %4 = load i64, i64* %size.addr, align 8, !dbg !8001
  %mul = mul i64 %3, %4, !dbg !8001
  %call = call i8* @xrealloc(i8* %2, i64 %mul), !dbg !8001
  store i8* %call, i8** %p.addr, align 8, !dbg !8002
  %5 = load i8*, i8** %p.addr, align 8, !dbg !8003
  %6 = load i64, i64* %old_nmemb.addr, align 8, !dbg !8004
  %7 = load i64, i64* %size.addr, align 8, !dbg !8005
  %mul1 = mul i64 %6, %7, !dbg !8006
  %add.ptr = getelementptr inbounds i8, i8* %5, i64 %mul1, !dbg !8007
  %8 = load i64, i64* %new_nmemb.addr, align 8, !dbg !8008
  %9 = load i64, i64* %old_nmemb.addr, align 8, !dbg !8009
  %sub = sub i64 %8, %9, !dbg !8010
  %10 = load i64, i64* %size.addr, align 8, !dbg !8011
  %mul2 = mul i64 %sub, %10, !dbg !8012
  call void @llvm.memset.p0i8.i64(i8* align 1 %add.ptr, i8 0, i64 %mul2, i1 false), !dbg !8013
  %11 = load i8*, i8** %p.addr, align 8, !dbg !8014
  ret i8* %11, !dbg !8015
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @sched_finish_ready_list() #0 !dbg !8016 {
entry:
  %i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8017, metadata !DIExpression()), !dbg !8018
  %0 = load %struct.rtx_def**, %struct.rtx_def*** getelementptr inbounds (%struct.ready_list, %struct.ready_list* @ready, i32 0, i32 0), align 8, !dbg !8019
  %1 = bitcast %struct.rtx_def** %0 to i8*, !dbg !8020
  call void @free(i8* %1), !dbg !8021
  store %struct.rtx_def** null, %struct.rtx_def*** getelementptr inbounds (%struct.ready_list, %struct.ready_list* @ready, i32 0, i32 0), align 8, !dbg !8022
  store i32 0, i32* getelementptr inbounds (%struct.ready_list, %struct.ready_list* @ready, i32 0, i32 1), align 8, !dbg !8023
  %2 = load i8*, i8** @ready_try, align 8, !dbg !8024
  call void @free(i8* %2), !dbg !8025
  store i8* null, i8** @ready_try, align 8, !dbg !8026
  store i32 0, i32* %i, align 4, !dbg !8027
  br label %for.cond, !dbg !8029

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4, !dbg !8030
  %4 = load i32, i32* @sched_ready_n_insns, align 4, !dbg !8032
  %cmp = icmp sle i32 %3, %4, !dbg !8033
  br i1 %cmp, label %for.body, label %for.end, !dbg !8034

for.body:                                         ; preds = %for.cond
  %5 = load %struct.choice_entry*, %struct.choice_entry** @choice_stack, align 8, !dbg !8035
  %6 = load i32, i32* %i, align 4, !dbg !8036
  %idxprom = sext i32 %6 to i64, !dbg !8035
  %arrayidx = getelementptr inbounds %struct.choice_entry, %struct.choice_entry* %5, i64 %idxprom, !dbg !8035
  %state = getelementptr inbounds %struct.choice_entry, %struct.choice_entry* %arrayidx, i32 0, i32 3, !dbg !8037
  %7 = load i8*, i8** %state, align 8, !dbg !8037
  call void @free(i8* %7), !dbg !8038
  br label %for.inc, !dbg !8038

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4, !dbg !8039
  %inc = add nsw i32 %8, 1, !dbg !8039
  store i32 %inc, i32* %i, align 4, !dbg !8039
  br label %for.cond, !dbg !8040, !llvm.loop !8041

for.end:                                          ; preds = %for.cond
  %9 = load %struct.choice_entry*, %struct.choice_entry** @choice_stack, align 8, !dbg !8043
  %10 = bitcast %struct.choice_entry* %9 to i8*, !dbg !8043
  call void @free(i8* %10), !dbg !8044
  store %struct.choice_entry* null, %struct.choice_entry** @choice_stack, align 8, !dbg !8045
  store i32 -1, i32* @sched_ready_n_insns, align 4, !dbg !8046
  ret void, !dbg !8047
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.edge_def* @find_fallthru_edge(%struct.basic_block_def* %pred) #0 !dbg !8048 {
entry:
  %retval = alloca %struct.edge_def*, align 8
  %pred.addr = alloca %struct.basic_block_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %succ = alloca %struct.basic_block_def*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %tmp26 = alloca %struct.edge_iterator, align 8
  store %struct.basic_block_def* %pred, %struct.basic_block_def** %pred.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %pred.addr, metadata !8051, metadata !DIExpression()), !dbg !8052
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !8053, metadata !DIExpression()), !dbg !8054
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !8055, metadata !DIExpression()), !dbg !8062
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %succ, metadata !8063, metadata !DIExpression()), !dbg !8064
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %pred.addr, align 8, !dbg !8065
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 6, !dbg !8066
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !8066
  store %struct.basic_block_def* %1, %struct.basic_block_def** %succ, align 8, !dbg !8067
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %succ, align 8, !dbg !8068
  %prev_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 5, !dbg !8068
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb, align 8, !dbg !8068
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %pred.addr, align 8, !dbg !8068
  %cmp = icmp eq %struct.basic_block_def* %3, %4, !dbg !8068
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !8068

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 4238, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !8068
  br label %cond.end, !dbg !8068

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8068

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8068
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %pred.addr, align 8, !dbg !8069
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %5, i32 0, i32 1, !dbg !8069
  %6 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !8069
  %tobool = icmp ne %struct.VEC_edge_gc* %6, null, !dbg !8069
  br i1 %tobool, label %cond.true1, label %cond.false3, !dbg !8069

cond.true1:                                       ; preds = %cond.end
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %pred.addr, align 8, !dbg !8069
  %succs2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 1, !dbg !8069
  %8 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs2, align 8, !dbg !8069
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %8, i32 0, i32 0, !dbg !8069
  br label %cond.end4, !dbg !8069

cond.false3:                                      ; preds = %cond.end
  br label %cond.end4, !dbg !8069

cond.end4:                                        ; preds = %cond.false3, %cond.true1
  %cond5 = phi %struct.VEC_edge_base* [ %base, %cond.true1 ], [ null, %cond.false3 ], !dbg !8069
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond5), !dbg !8069
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %succ, align 8, !dbg !8071
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 0, !dbg !8071
  %10 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !8071
  %tobool6 = icmp ne %struct.VEC_edge_gc* %10, null, !dbg !8071
  br i1 %tobool6, label %cond.true7, label %cond.false10, !dbg !8071

cond.true7:                                       ; preds = %cond.end4
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %succ, align 8, !dbg !8071
  %preds8 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 0, !dbg !8071
  %12 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds8, align 8, !dbg !8071
  %base9 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %12, i32 0, i32 0, !dbg !8071
  br label %cond.end11, !dbg !8071

cond.false10:                                     ; preds = %cond.end4
  br label %cond.end11, !dbg !8071

cond.end11:                                       ; preds = %cond.false10, %cond.true7
  %cond12 = phi %struct.VEC_edge_base* [ %base9, %cond.true7 ], [ null, %cond.false10 ], !dbg !8071
  %call13 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond12), !dbg !8071
  %cmp14 = icmp ule i32 %call, %call13, !dbg !8072
  br i1 %cmp14, label %if.then, label %if.else, !dbg !8073

if.then:                                          ; preds = %cond.end11
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %pred.addr, align 8, !dbg !8074
  %succs15 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 1, !dbg !8074
  %call16 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs15), !dbg !8074
  %14 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !8074
  %15 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %14, i32 0, i32 0, !dbg !8074
  %16 = extractvalue { i32, %struct.VEC_edge_gc** } %call16, 0, !dbg !8074
  store i32 %16, i32* %15, align 8, !dbg !8074
  %17 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %14, i32 0, i32 1, !dbg !8074
  %18 = extractvalue { i32, %struct.VEC_edge_gc** } %call16, 1, !dbg !8074
  store %struct.VEC_edge_gc** %18, %struct.VEC_edge_gc*** %17, align 8, !dbg !8074
  %19 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !8074
  %20 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !8074
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* align 8 %20, i64 16, i1 false), !dbg !8074
  br label %for.cond, !dbg !8074

for.cond:                                         ; preds = %for.inc, %if.then
  %21 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !8077
  %22 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %21, i32 0, i32 0, !dbg !8077
  %23 = load i32, i32* %22, align 8, !dbg !8077
  %24 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %21, i32 0, i32 1, !dbg !8077
  %25 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %24, align 8, !dbg !8077
  %call17 = call zeroext i8 @ei_cond(i32 %23, %struct.VEC_edge_gc** %25, %struct.edge_def** %e), !dbg !8077
  %tobool18 = icmp ne i8 %call17, 0, !dbg !8074
  br i1 %tobool18, label %for.body, label %for.end, !dbg !8074

for.body:                                         ; preds = %for.cond
  %26 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8079
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %26, i32 0, i32 7, !dbg !8081
  %27 = load i32, i32* %flags, align 8, !dbg !8081
  %and = and i32 %27, 1, !dbg !8082
  %tobool19 = icmp ne i32 %and, 0, !dbg !8082
  br i1 %tobool19, label %if.then20, label %if.end, !dbg !8083

if.then20:                                        ; preds = %for.body
  %28 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8084
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %28, i32 0, i32 1, !dbg !8084
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !8084
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %succ, align 8, !dbg !8084
  %cmp21 = icmp eq %struct.basic_block_def* %29, %30, !dbg !8084
  br i1 %cmp21, label %cond.false23, label %cond.true22, !dbg !8084

cond.true22:                                      ; preds = %if.then20
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 4245, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !8084
  br label %cond.end24, !dbg !8084

cond.false23:                                     ; preds = %if.then20
  br label %cond.end24, !dbg !8084

cond.end24:                                       ; preds = %cond.false23, %cond.true22
  %cond25 = phi i32 [ 0, %cond.true22 ], [ 0, %cond.false23 ], !dbg !8084
  %31 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8086
  store %struct.edge_def* %31, %struct.edge_def** %retval, align 8, !dbg !8087
  br label %return, !dbg !8087

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !8088

for.inc:                                          ; preds = %if.end
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !8077
  br label %for.cond, !dbg !8077, !llvm.loop !8089

for.end:                                          ; preds = %for.cond
  br label %if.end45, !dbg !8091

if.else:                                          ; preds = %cond.end11
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %succ, align 8, !dbg !8092
  %preds27 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %32, i32 0, i32 0, !dbg !8092
  %call28 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds27), !dbg !8092
  %33 = bitcast %struct.edge_iterator* %tmp26 to { i32, %struct.VEC_edge_gc** }*, !dbg !8092
  %34 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %33, i32 0, i32 0, !dbg !8092
  %35 = extractvalue { i32, %struct.VEC_edge_gc** } %call28, 0, !dbg !8092
  store i32 %35, i32* %34, align 8, !dbg !8092
  %36 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %33, i32 0, i32 1, !dbg !8092
  %37 = extractvalue { i32, %struct.VEC_edge_gc** } %call28, 1, !dbg !8092
  store %struct.VEC_edge_gc** %37, %struct.VEC_edge_gc*** %36, align 8, !dbg !8092
  %38 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !8092
  %39 = bitcast %struct.edge_iterator* %tmp26 to i8*, !dbg !8092
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %38, i8* align 8 %39, i64 16, i1 false), !dbg !8092
  br label %for.cond29, !dbg !8092

for.cond29:                                       ; preds = %for.inc43, %if.else
  %40 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !8095
  %41 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %40, i32 0, i32 0, !dbg !8095
  %42 = load i32, i32* %41, align 8, !dbg !8095
  %43 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %40, i32 0, i32 1, !dbg !8095
  %44 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %43, align 8, !dbg !8095
  %call30 = call zeroext i8 @ei_cond(i32 %42, %struct.VEC_edge_gc** %44, %struct.edge_def** %e), !dbg !8095
  %tobool31 = icmp ne i8 %call30, 0, !dbg !8092
  br i1 %tobool31, label %for.body32, label %for.end44, !dbg !8092

for.body32:                                       ; preds = %for.cond29
  %45 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8097
  %flags33 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %45, i32 0, i32 7, !dbg !8099
  %46 = load i32, i32* %flags33, align 8, !dbg !8099
  %and34 = and i32 %46, 1, !dbg !8100
  %tobool35 = icmp ne i32 %and34, 0, !dbg !8100
  br i1 %tobool35, label %if.then36, label %if.end42, !dbg !8101

if.then36:                                        ; preds = %for.body32
  %47 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8102
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %47, i32 0, i32 0, !dbg !8102
  %48 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !8102
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %pred.addr, align 8, !dbg !8102
  %cmp37 = icmp eq %struct.basic_block_def* %48, %49, !dbg !8102
  br i1 %cmp37, label %cond.false39, label %cond.true38, !dbg !8102

cond.true38:                                      ; preds = %if.then36
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 4254, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !8102
  br label %cond.end40, !dbg !8102

cond.false39:                                     ; preds = %if.then36
  br label %cond.end40, !dbg !8102

cond.end40:                                       ; preds = %cond.false39, %cond.true38
  %cond41 = phi i32 [ 0, %cond.true38 ], [ 0, %cond.false39 ], !dbg !8102
  %50 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8104
  store %struct.edge_def* %50, %struct.edge_def** %retval, align 8, !dbg !8105
  br label %return, !dbg !8105

if.end42:                                         ; preds = %for.body32
  br label %for.inc43, !dbg !8106

for.inc43:                                        ; preds = %if.end42
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !8095
  br label %for.cond29, !dbg !8095, !llvm.loop !8107

for.end44:                                        ; preds = %for.cond29
  br label %if.end45

if.end45:                                         ; preds = %for.end44, %for.end
  store %struct.edge_def* null, %struct.edge_def** %retval, align 8, !dbg !8109
  br label %return, !dbg !8109

return:                                           ; preds = %if.end45, %cond.end40, %cond.end24
  %51 = load %struct.edge_def*, %struct.edge_def** %retval, align 8, !dbg !8110
  ret %struct.edge_def* %51, !dbg !8110
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_length(%struct.VEC_edge_base* %vec_) #0 !dbg !8111 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !8116, metadata !DIExpression()), !dbg !8117
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !8117
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !8117
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8117

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !8117
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %1, i32 0, i32 0, !dbg !8117
  %2 = load i32, i32* %num, align 8, !dbg !8117
  br label %cond.end, !dbg !8117

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8117

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !8117
  ret i32 %cond, !dbg !8117
}

; Function Attrs: noinline nounwind uwtable
define internal { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %ev) #0 !dbg !8118 {
entry:
  %retval = alloca %struct.edge_iterator, align 8
  %ev.addr = alloca %struct.VEC_edge_gc**, align 8
  store %struct.VEC_edge_gc** %ev, %struct.VEC_edge_gc*** %ev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_gc*** %ev.addr, metadata !8121, metadata !DIExpression()), !dbg !8122
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %retval, metadata !8123, metadata !DIExpression()), !dbg !8124
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 0, !dbg !8125
  store i32 0, i32* %index, align 8, !dbg !8126
  %0 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %ev.addr, align 8, !dbg !8127
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 1, !dbg !8128
  store %struct.VEC_edge_gc** %0, %struct.VEC_edge_gc*** %container, align 8, !dbg !8129
  %1 = bitcast %struct.edge_iterator* %retval to { i32, %struct.VEC_edge_gc** }*, !dbg !8130
  %2 = load { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, align 8, !dbg !8130
  ret { i32, %struct.VEC_edge_gc** } %2, !dbg !8130
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_cond(i32 %ei.coerce0, %struct.VEC_edge_gc** %ei.coerce1, %struct.edge_def** %p) #0 !dbg !8131 {
entry:
  %retval = alloca i8, align 1
  %ei = alloca %struct.edge_iterator, align 8
  %p.addr = alloca %struct.edge_def**, align 8
  %0 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %ei.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %ei.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !8135, metadata !DIExpression()), !dbg !8136
  store %struct.edge_def** %p, %struct.edge_def*** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %p.addr, metadata !8137, metadata !DIExpression()), !dbg !8138
  %3 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !8139
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !8139
  %5 = load i32, i32* %4, align 8, !dbg !8139
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !8139
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !8139
  %call = call zeroext i8 @ei_end_p(i32 %5, %struct.VEC_edge_gc** %7), !dbg !8139
  %tobool = icmp ne i8 %call, 0, !dbg !8139
  br i1 %tobool, label %if.else, label %if.then, !dbg !8141

if.then:                                          ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !8142
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !8142
  %10 = load i32, i32* %9, align 8, !dbg !8142
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !8142
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !8142
  %call1 = call %struct.edge_def* @ei_edge(i32 %10, %struct.VEC_edge_gc** %12), !dbg !8142
  %13 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !8144
  store %struct.edge_def* %call1, %struct.edge_def** %13, align 8, !dbg !8145
  store i8 1, i8* %retval, align 1, !dbg !8146
  br label %return, !dbg !8146

if.else:                                          ; preds = %entry
  %14 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !8147
  store %struct.edge_def* null, %struct.edge_def** %14, align 8, !dbg !8149
  store i8 0, i8* %retval, align 1, !dbg !8150
  br label %return, !dbg !8150

return:                                           ; preds = %if.else, %if.then
  %15 = load i8, i8* %retval, align 1, !dbg !8151
  ret i8 %15, !dbg !8151
}

; Function Attrs: noinline nounwind uwtable
define internal void @ei_next(%struct.edge_iterator* %i) #0 !dbg !8152 {
entry:
  %i.addr = alloca %struct.edge_iterator*, align 8
  store %struct.edge_iterator* %i, %struct.edge_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator** %i.addr, metadata !8156, metadata !DIExpression()), !dbg !8157
  %0 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !8158
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %0, i32 0, i32 0, !dbg !8158
  %1 = load i32, i32* %index, align 8, !dbg !8158
  %2 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !8158
  %3 = bitcast %struct.edge_iterator* %2 to { i32, %struct.VEC_edge_gc** }*, !dbg !8158
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !8158
  %5 = load i32, i32* %4, align 8, !dbg !8158
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !8158
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !8158
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !8158
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !8158
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8158

cond.true:                                        ; preds = %entry
  %8 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !8158
  %9 = bitcast %struct.edge_iterator* %8 to { i32, %struct.VEC_edge_gc** }*, !dbg !8158
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !8158
  %11 = load i32, i32* %10, align 8, !dbg !8158
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !8158
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !8158
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !8158
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !8158
  br label %cond.end, !dbg !8158

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8158

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8158
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !8158
  %cmp = icmp ult i32 %1, %call2, !dbg !8158
  br i1 %cmp, label %cond.false4, label %cond.true3, !dbg !8158

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.53, i64 0, i64 0), i32 738, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !8158
  br label %cond.end5, !dbg !8158

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !8158

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !8158
  %14 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !8159
  %index7 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %14, i32 0, i32 0, !dbg !8160
  %15 = load i32, i32* %index7, align 8, !dbg !8161
  %inc = add i32 %15, 1, !dbg !8161
  store i32 %inc, i32* %index7, align 8, !dbg !8161
  ret void, !dbg !8162
}

; Function Attrs: noinline nounwind uwtable
define internal void @sched_extend_bb() #0 !dbg !8163 {
entry:
  %insn = alloca %struct.rtx_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !8164, metadata !DIExpression()), !dbg !8165
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8166
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !8166
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !8166
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !8166
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 1, !dbg !8166
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !8166
  %prev_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 5, !dbg !8166
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb, align 8, !dbg !8166
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 7, !dbg !8166
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !8166
  %4 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !8166
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %4, i32 0, i32 1, !dbg !8166
  %5 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !8166
  store %struct.rtx_def* %5, %struct.rtx_def** %insn, align 8, !dbg !8167
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8168
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !8168
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8168
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !8168
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !8168
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !8168
  %cmp = icmp eq %struct.rtx_def* %7, null, !dbg !8170
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !8171

lor.lhs.false:                                    ; preds = %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8172
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !8172
  %bf.load = load i32, i32* %9, align 8, !dbg !8172
  %bf.clear = and i32 %bf.load, 65535, !dbg !8172
  %cmp1 = icmp eq i32 %bf.clear, 13, !dbg !8172
  br i1 %cmp1, label %if.end, label %land.lhs.true, !dbg !8173

land.lhs.true:                                    ; preds = %lor.lhs.false
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8174
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !8174
  %bf.load2 = load i32, i32* %11, align 8, !dbg !8174
  %bf.clear3 = and i32 %bf.load2, 65535, !dbg !8174
  %cmp4 = icmp eq i32 %bf.clear3, 12, !dbg !8174
  br i1 %cmp4, label %if.end, label %land.lhs.true5, !dbg !8175

land.lhs.true5:                                   ; preds = %land.lhs.true
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8176
  %u6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !8176
  %fld7 = bitcast %union.u* %u6 to [1 x %union.rtunion_def]*, !dbg !8176
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i64 0, i64 2, !dbg !8176
  %rt_rtx9 = bitcast %union.rtunion_def* %arrayidx8 to %struct.rtx_def**, !dbg !8176
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx9, align 8, !dbg !8176
  %14 = bitcast %struct.rtx_def* %13 to i32*, !dbg !8176
  %bf.load10 = load i32, i32* %14, align 8, !dbg !8176
  %bf.clear11 = and i32 %bf.load10, 65535, !dbg !8176
  %cmp12 = icmp eq i32 %bf.clear11, 11, !dbg !8176
  br i1 %cmp12, label %if.end, label %if.then, !dbg !8177

if.then:                                          ; preds = %land.lhs.true5, %entry
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !8178, metadata !DIExpression()), !dbg !8180
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8181
  %call = call %struct.rtx_def* @emit_note_after(i32 0, %struct.rtx_def* %15), !dbg !8182
  store %struct.rtx_def* %call, %struct.rtx_def** %note, align 8, !dbg !8180
  %16 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !8183
  %u13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !8183
  %fld14 = bitcast %union.u* %u13 to [1 x %union.rtunion_def]*, !dbg !8183
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i64 0, i64 3, !dbg !8183
  %rt_bb = bitcast %union.rtunion_def* %arrayidx15 to %struct.basic_block_def**, !dbg !8183
  store %struct.basic_block_def* null, %struct.basic_block_def** %rt_bb, align 8, !dbg !8183
  %17 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8184
  %18 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8185
  %add.ptr16 = getelementptr inbounds %struct.function, %struct.function* %18, i64 0, !dbg !8185
  %cfg17 = getelementptr inbounds %struct.function, %struct.function* %add.ptr16, i32 0, i32 1, !dbg !8185
  %19 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg17, align 8, !dbg !8185
  %x_exit_block_ptr18 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %19, i32 0, i32 1, !dbg !8185
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr18, align 8, !dbg !8185
  %prev_bb19 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %20, i32 0, i32 5, !dbg !8185
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb19, align 8, !dbg !8185
  %il20 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %21, i32 0, i32 7, !dbg !8185
  %rtl21 = bitcast %union.basic_block_il_dependent* %il20 to %struct.rtl_bb_info**, !dbg !8185
  %22 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl21, align 8, !dbg !8185
  %end_22 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %22, i32 0, i32 1, !dbg !8185
  store %struct.rtx_def* %17, %struct.rtx_def** %end_22, align 8, !dbg !8186
  br label %if.end, !dbg !8187

if.end:                                           ; preds = %if.then, %land.lhs.true5, %land.lhs.true, %lor.lhs.false
  ret void, !dbg !8188
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.basic_block_def* @sched_create_recovery_block(%struct.basic_block_def** %before_recovery_ptr) #0 !dbg !8189 {
entry:
  %before_recovery_ptr.addr = alloca %struct.basic_block_def**, align 8
  %label = alloca %struct.rtx_def*, align 8
  %barrier = alloca %struct.rtx_def*, align 8
  %rec = alloca %struct.basic_block_def*, align 8
  %bb_ = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def** %before_recovery_ptr, %struct.basic_block_def*** %before_recovery_ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %before_recovery_ptr.addr, metadata !8192, metadata !DIExpression()), !dbg !8193
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %label, metadata !8194, metadata !DIExpression()), !dbg !8195
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %barrier, metadata !8196, metadata !DIExpression()), !dbg !8197
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %rec, metadata !8198, metadata !DIExpression()), !dbg !8199
  store i8 1, i8* @haifa_recovery_bb_recently_added_p, align 1, !dbg !8200
  store i8 1, i8* @haifa_recovery_bb_ever_added_p, align 1, !dbg !8201
  %0 = load %struct.basic_block_def**, %struct.basic_block_def*** %before_recovery_ptr.addr, align 8, !dbg !8202
  call void @init_before_recovery(%struct.basic_block_def** %0), !dbg !8203
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** @before_recovery, align 8, !dbg !8204
  %call = call %struct.rtx_def* @get_last_bb_insn(%struct.basic_block_def* %1), !dbg !8205
  store %struct.rtx_def* %call, %struct.rtx_def** %barrier, align 8, !dbg !8206
  %2 = load %struct.rtx_def*, %struct.rtx_def** %barrier, align 8, !dbg !8207
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !8207
  %bf.load = load i32, i32* %3, align 8, !dbg !8207
  %bf.clear = and i32 %bf.load, 65535, !dbg !8207
  %cmp = icmp eq i32 %bf.clear, 11, !dbg !8207
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !8207

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 4382, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !8207
  br label %cond.end, !dbg !8207

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8207

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8207
  %call1 = call %struct.rtx_def* @gen_label_rtx(), !dbg !8208
  %4 = load %struct.rtx_def*, %struct.rtx_def** %barrier, align 8, !dbg !8209
  %call2 = call %struct.rtx_def* @emit_label_after(%struct.rtx_def* %call1, %struct.rtx_def* %4), !dbg !8210
  store %struct.rtx_def* %call2, %struct.rtx_def** %label, align 8, !dbg !8211
  %5 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !8212
  %6 = bitcast %struct.rtx_def* %5 to i8*, !dbg !8212
  %7 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !8213
  %8 = bitcast %struct.rtx_def* %7 to i8*, !dbg !8213
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** @before_recovery, align 8, !dbg !8214
  %call3 = call %struct.basic_block_def* @create_basic_block(i8* %6, i8* %8, %struct.basic_block_def* %9), !dbg !8215
  store %struct.basic_block_def* %call3, %struct.basic_block_def** %rec, align 8, !dbg !8216
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %rec, align 8, !dbg !8217
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 7, !dbg !8217
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !8217
  %11 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !8217
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %11, i32 0, i32 1, !dbg !8217
  %12 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !8217
  %call4 = call %struct.rtx_def* @emit_barrier_after(%struct.rtx_def* %12), !dbg !8218
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** @before_recovery, align 8, !dbg !8219
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 13, !dbg !8219
  %14 = load i32, i32* %flags, align 8, !dbg !8219
  %and = and i32 %14, 96, !dbg !8219
  %cmp5 = icmp ne i32 %and, 0, !dbg !8221
  br i1 %cmp5, label %if.then, label %if.end, !dbg !8222

if.then:                                          ; preds = %cond.end
  br label %do.body, !dbg !8223

do.body:                                          ; preds = %if.then
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb_, metadata !8224, metadata !DIExpression()), !dbg !8226
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %rec, align 8, !dbg !8226
  store %struct.basic_block_def* %15, %struct.basic_block_def** %bb_, align 8, !dbg !8226
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_, align 8, !dbg !8226
  %flags6 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i32 0, i32 13, !dbg !8226
  %17 = load i32, i32* %flags6, align 8, !dbg !8226
  %and7 = and i32 %17, -97, !dbg !8226
  %or = or i32 %and7, 64, !dbg !8226
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_, align 8, !dbg !8226
  %flags8 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %18, i32 0, i32 13, !dbg !8226
  store i32 %or, i32* %flags8, align 8, !dbg !8226
  br label %do.end, !dbg !8226

do.end:                                           ; preds = %do.body
  br label %if.end, !dbg !8226

if.end:                                           ; preds = %do.end, %cond.end
  %19 = load i32, i32* @sched_verbose, align 4, !dbg !8227
  %tobool = icmp ne i32 %19, 0, !dbg !8227
  br i1 %tobool, label %land.lhs.true, label %if.end13, !dbg !8229

land.lhs.true:                                    ; preds = %if.end
  %20 = load %struct.spec_info_def*, %struct.spec_info_def** @spec_info, align 8, !dbg !8230
  %dump = getelementptr inbounds %struct.spec_info_def, %struct.spec_info_def* %20, i32 0, i32 1, !dbg !8231
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** %dump, align 8, !dbg !8231
  %tobool9 = icmp ne %struct._IO_FILE* %21, null, !dbg !8230
  br i1 %tobool9, label %if.then10, label %if.end13, !dbg !8232

if.then10:                                        ; preds = %land.lhs.true
  %22 = load %struct.spec_info_def*, %struct.spec_info_def** @spec_info, align 8, !dbg !8233
  %dump11 = getelementptr inbounds %struct.spec_info_def, %struct.spec_info_def* %22, i32 0, i32 1, !dbg !8234
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** %dump11, align 8, !dbg !8234
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %rec, align 8, !dbg !8235
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %24, i32 0, i32 9, !dbg !8236
  %25 = load i32, i32* %index, align 8, !dbg !8236
  %call12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %23, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.23, i64 0, i64 0), i32 %25), !dbg !8237
  br label %if.end13, !dbg !8237

if.end13:                                         ; preds = %if.then10, %land.lhs.true, %if.end
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %rec, align 8, !dbg !8238
  ret %struct.basic_block_def* %26, !dbg !8239
}

; Function Attrs: noinline nounwind uwtable
define internal void @init_before_recovery(%struct.basic_block_def** %before_recovery_ptr) #0 !dbg !8240 {
entry:
  %before_recovery_ptr.addr = alloca %struct.basic_block_def**, align 8
  %last = alloca %struct.basic_block_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %single = alloca %struct.basic_block_def*, align 8
  %empty = alloca %struct.basic_block_def*, align 8
  %x = alloca %struct.rtx_def*, align 8
  %label = alloca %struct.rtx_def*, align 8
  %bb_ = alloca %struct.basic_block_def*, align 8
  %bb_38 = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def** %before_recovery_ptr, %struct.basic_block_def*** %before_recovery_ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %before_recovery_ptr.addr, metadata !8241, metadata !DIExpression()), !dbg !8242
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %last, metadata !8243, metadata !DIExpression()), !dbg !8244
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !8245, metadata !DIExpression()), !dbg !8246
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8247
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !8247
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !8247
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !8247
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 1, !dbg !8247
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !8247
  %prev_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 5, !dbg !8248
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb, align 8, !dbg !8248
  store %struct.basic_block_def* %3, %struct.basic_block_def** %last, align 8, !dbg !8249
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %last, align 8, !dbg !8250
  %call = call %struct.edge_def* @find_fallthru_edge(%struct.basic_block_def* %4), !dbg !8251
  store %struct.edge_def* %call, %struct.edge_def** %e, align 8, !dbg !8252
  %5 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8253
  %tobool = icmp ne %struct.edge_def* %5, null, !dbg !8253
  br i1 %tobool, label %if.then, label %if.else, !dbg !8255

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %single, metadata !8256, metadata !DIExpression()), !dbg !8258
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %empty, metadata !8259, metadata !DIExpression()), !dbg !8260
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !8261, metadata !DIExpression()), !dbg !8262
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %label, metadata !8263, metadata !DIExpression()), !dbg !8264
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %last, align 8, !dbg !8265
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** @after_recovery, align 8, !dbg !8267
  %cmp = icmp eq %struct.basic_block_def* %6, %7, !dbg !8268
  br i1 %cmp, label %if.then1, label %if.end, !dbg !8269

if.then1:                                         ; preds = %if.then
  br label %if.end69, !dbg !8270

if.end:                                           ; preds = %if.then
  store i8 0, i8* @adding_bb_to_current_region_p, align 1, !dbg !8271
  %8 = load %struct.basic_block_def* (%struct.basic_block_def*)*, %struct.basic_block_def* (%struct.basic_block_def*)** @sched_create_empty_bb, align 8, !dbg !8272
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %last, align 8, !dbg !8273
  %call2 = call %struct.basic_block_def* %8(%struct.basic_block_def* %9), !dbg !8272
  store %struct.basic_block_def* %call2, %struct.basic_block_def** %single, align 8, !dbg !8274
  %10 = load %struct.basic_block_def* (%struct.basic_block_def*)*, %struct.basic_block_def* (%struct.basic_block_def*)** @sched_create_empty_bb, align 8, !dbg !8275
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %single, align 8, !dbg !8276
  %call3 = call %struct.basic_block_def* %10(%struct.basic_block_def* %11), !dbg !8275
  store %struct.basic_block_def* %call3, %struct.basic_block_def** %empty, align 8, !dbg !8277
  %12 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8278
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, !dbg !8278
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr4, i32 0, i32 4, !dbg !8278
  %13 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !8278
  %cmp5 = icmp ne %struct.loops* %13, null, !dbg !8280
  br i1 %cmp5, label %if.then6, label %if.end27, !dbg !8281

if.then6:                                         ; preds = %if.end
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %single, align 8, !dbg !8282
  %15 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8284
  %add.ptr7 = getelementptr inbounds %struct.function, %struct.function* %15, i64 0, !dbg !8284
  %x_current_loops8 = getelementptr inbounds %struct.function, %struct.function* %add.ptr7, i32 0, i32 4, !dbg !8284
  %16 = load %struct.loops*, %struct.loops** %x_current_loops8, align 8, !dbg !8284
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %16, i32 0, i32 1, !dbg !8284
  %17 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !8284
  %tobool9 = icmp ne %struct.VEC_loop_p_gc* %17, null, !dbg !8284
  br i1 %tobool9, label %cond.true, label %cond.false, !dbg !8284

cond.true:                                        ; preds = %if.then6
  %18 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8284
  %add.ptr10 = getelementptr inbounds %struct.function, %struct.function* %18, i64 0, !dbg !8284
  %x_current_loops11 = getelementptr inbounds %struct.function, %struct.function* %add.ptr10, i32 0, i32 4, !dbg !8284
  %19 = load %struct.loops*, %struct.loops** %x_current_loops11, align 8, !dbg !8284
  %larray12 = getelementptr inbounds %struct.loops, %struct.loops* %19, i32 0, i32 1, !dbg !8284
  %20 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray12, align 8, !dbg !8284
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %20, i32 0, i32 0, !dbg !8284
  br label %cond.end, !dbg !8284

cond.false:                                       ; preds = %if.then6
  br label %cond.end, !dbg !8284

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8284
  %call13 = call %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond, i32 0), !dbg !8284
  call void @add_bb_to_loop(%struct.basic_block_def* %14, %struct.loop* %call13), !dbg !8285
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %empty, align 8, !dbg !8286
  %22 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8287
  %add.ptr14 = getelementptr inbounds %struct.function, %struct.function* %22, i64 0, !dbg !8287
  %x_current_loops15 = getelementptr inbounds %struct.function, %struct.function* %add.ptr14, i32 0, i32 4, !dbg !8287
  %23 = load %struct.loops*, %struct.loops** %x_current_loops15, align 8, !dbg !8287
  %larray16 = getelementptr inbounds %struct.loops, %struct.loops* %23, i32 0, i32 1, !dbg !8287
  %24 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray16, align 8, !dbg !8287
  %tobool17 = icmp ne %struct.VEC_loop_p_gc* %24, null, !dbg !8287
  br i1 %tobool17, label %cond.true18, label %cond.false23, !dbg !8287

cond.true18:                                      ; preds = %cond.end
  %25 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8287
  %add.ptr19 = getelementptr inbounds %struct.function, %struct.function* %25, i64 0, !dbg !8287
  %x_current_loops20 = getelementptr inbounds %struct.function, %struct.function* %add.ptr19, i32 0, i32 4, !dbg !8287
  %26 = load %struct.loops*, %struct.loops** %x_current_loops20, align 8, !dbg !8287
  %larray21 = getelementptr inbounds %struct.loops, %struct.loops* %26, i32 0, i32 1, !dbg !8287
  %27 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray21, align 8, !dbg !8287
  %base22 = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %27, i32 0, i32 0, !dbg !8287
  br label %cond.end24, !dbg !8287

cond.false23:                                     ; preds = %cond.end
  br label %cond.end24, !dbg !8287

cond.end24:                                       ; preds = %cond.false23, %cond.true18
  %cond25 = phi %struct.VEC_loop_p_base* [ %base22, %cond.true18 ], [ null, %cond.false23 ], !dbg !8287
  %call26 = call %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond25, i32 0), !dbg !8287
  call void @add_bb_to_loop(%struct.basic_block_def* %21, %struct.loop* %call26), !dbg !8288
  br label %if.end27, !dbg !8289

if.end27:                                         ; preds = %cond.end24, %if.end
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %last, align 8, !dbg !8290
  %count = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %28, i32 0, i32 8, !dbg !8291
  %29 = load i64, i64* %count, align 8, !dbg !8291
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %single, align 8, !dbg !8292
  %count28 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %30, i32 0, i32 8, !dbg !8293
  store i64 %29, i64* %count28, align 8, !dbg !8294
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %last, align 8, !dbg !8295
  %count29 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %31, i32 0, i32 8, !dbg !8296
  %32 = load i64, i64* %count29, align 8, !dbg !8296
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %empty, align 8, !dbg !8297
  %count30 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %33, i32 0, i32 8, !dbg !8298
  store i64 %32, i64* %count30, align 8, !dbg !8299
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %last, align 8, !dbg !8300
  %frequency = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %34, i32 0, i32 11, !dbg !8301
  %35 = load i32, i32* %frequency, align 8, !dbg !8301
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %single, align 8, !dbg !8302
  %frequency31 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %36, i32 0, i32 11, !dbg !8303
  store i32 %35, i32* %frequency31, align 8, !dbg !8304
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %last, align 8, !dbg !8305
  %frequency32 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %37, i32 0, i32 11, !dbg !8306
  %38 = load i32, i32* %frequency32, align 8, !dbg !8306
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %empty, align 8, !dbg !8307
  %frequency33 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %39, i32 0, i32 11, !dbg !8308
  store i32 %38, i32* %frequency33, align 8, !dbg !8309
  br label %do.body, !dbg !8310

do.body:                                          ; preds = %if.end27
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb_, metadata !8311, metadata !DIExpression()), !dbg !8313
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %single, align 8, !dbg !8313
  store %struct.basic_block_def* %40, %struct.basic_block_def** %bb_, align 8, !dbg !8313
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_, align 8, !dbg !8313
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %41, i32 0, i32 13, !dbg !8313
  %42 = load i32, i32* %flags, align 8, !dbg !8313
  %and = and i32 %42, -97, !dbg !8313
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %last, align 8, !dbg !8313
  %flags34 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %43, i32 0, i32 13, !dbg !8313
  %44 = load i32, i32* %flags34, align 8, !dbg !8313
  %and35 = and i32 %44, 96, !dbg !8313
  %or = or i32 %and, %and35, !dbg !8313
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_, align 8, !dbg !8313
  %flags36 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %45, i32 0, i32 13, !dbg !8313
  store i32 %or, i32* %flags36, align 8, !dbg !8313
  br label %do.end, !dbg !8313

do.end:                                           ; preds = %do.body
  br label %do.body37, !dbg !8314

do.body37:                                        ; preds = %do.end
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb_38, metadata !8315, metadata !DIExpression()), !dbg !8317
  %46 = load %struct.basic_block_def*, %struct.basic_block_def** %empty, align 8, !dbg !8317
  store %struct.basic_block_def* %46, %struct.basic_block_def** %bb_38, align 8, !dbg !8317
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_38, align 8, !dbg !8317
  %flags39 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %47, i32 0, i32 13, !dbg !8317
  %48 = load i32, i32* %flags39, align 8, !dbg !8317
  %and40 = and i32 %48, -97, !dbg !8317
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %last, align 8, !dbg !8317
  %flags41 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %49, i32 0, i32 13, !dbg !8317
  %50 = load i32, i32* %flags41, align 8, !dbg !8317
  %and42 = and i32 %50, 96, !dbg !8317
  %or43 = or i32 %and40, %and42, !dbg !8317
  %51 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_38, align 8, !dbg !8317
  %flags44 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %51, i32 0, i32 13, !dbg !8317
  store i32 %or43, i32* %flags44, align 8, !dbg !8317
  br label %do.end45, !dbg !8317

do.end45:                                         ; preds = %do.body37
  %52 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8318
  %53 = load %struct.basic_block_def*, %struct.basic_block_def** %single, align 8, !dbg !8319
  call void @redirect_edge_succ(%struct.edge_def* %52, %struct.basic_block_def* %53), !dbg !8320
  %54 = load %struct.basic_block_def*, %struct.basic_block_def** %single, align 8, !dbg !8321
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %empty, align 8, !dbg !8322
  %call46 = call %struct.edge_def* @make_single_succ_edge(%struct.basic_block_def* %54, %struct.basic_block_def* %55, i32 0), !dbg !8323
  %56 = load %struct.basic_block_def*, %struct.basic_block_def** %empty, align 8, !dbg !8324
  %57 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8325
  %add.ptr47 = getelementptr inbounds %struct.function, %struct.function* %57, i64 0, !dbg !8325
  %cfg48 = getelementptr inbounds %struct.function, %struct.function* %add.ptr47, i32 0, i32 1, !dbg !8325
  %58 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg48, align 8, !dbg !8325
  %x_exit_block_ptr49 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %58, i32 0, i32 1, !dbg !8325
  %59 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr49, align 8, !dbg !8325
  %call50 = call %struct.edge_def* @make_single_succ_edge(%struct.basic_block_def* %56, %struct.basic_block_def* %59, i32 65), !dbg !8326
  %60 = load %struct.basic_block_def*, %struct.basic_block_def** %empty, align 8, !dbg !8327
  %call51 = call %struct.rtx_def* @block_label(%struct.basic_block_def* %60), !dbg !8328
  store %struct.rtx_def* %call51, %struct.rtx_def** %label, align 8, !dbg !8329
  %61 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !8330
  %call52 = call %struct.rtx_def* @gen_jump(%struct.rtx_def* %61), !dbg !8331
  %62 = load %struct.basic_block_def*, %struct.basic_block_def** %single, align 8, !dbg !8332
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %62, i32 0, i32 7, !dbg !8332
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !8332
  %63 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !8332
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %63, i32 0, i32 1, !dbg !8332
  %64 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !8332
  %call53 = call %struct.rtx_def* @emit_jump_insn_after(%struct.rtx_def* %call52, %struct.rtx_def* %64), !dbg !8333
  store %struct.rtx_def* %call53, %struct.rtx_def** %x, align 8, !dbg !8334
  %65 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !8335
  %66 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !8336
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %66, i32 0, i32 1, !dbg !8336
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8336
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 8, !dbg !8336
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !8336
  store %struct.rtx_def* %65, %struct.rtx_def** %rt_rtx, align 8, !dbg !8337
  %67 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !8338
  %u54 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %67, i32 0, i32 1, !dbg !8338
  %fld55 = bitcast %union.u* %u54 to [1 x %union.rtunion_def]*, !dbg !8338
  %arrayidx56 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld55, i64 0, i64 4, !dbg !8338
  %rt_int = bitcast %union.rtunion_def* %arrayidx56 to i32*, !dbg !8338
  %68 = load i32, i32* %rt_int, align 8, !dbg !8339
  %inc = add nsw i32 %68, 1, !dbg !8339
  store i32 %inc, i32* %rt_int, align 8, !dbg !8339
  %69 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !8340
  call void @haifa_init_insn(%struct.rtx_def* %69), !dbg !8341
  %70 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !8342
  %call57 = call %struct.rtx_def* @emit_barrier_after(%struct.rtx_def* %70), !dbg !8343
  %71 = load void (%struct.basic_block_def*, %struct.basic_block_def*)*, void (%struct.basic_block_def*, %struct.basic_block_def*)** @sched_init_only_bb, align 8, !dbg !8344
  %72 = load %struct.basic_block_def*, %struct.basic_block_def** %empty, align 8, !dbg !8345
  call void %71(%struct.basic_block_def* %72, %struct.basic_block_def* null), !dbg !8344
  %73 = load void (%struct.basic_block_def*, %struct.basic_block_def*)*, void (%struct.basic_block_def*, %struct.basic_block_def*)** @sched_init_only_bb, align 8, !dbg !8346
  %74 = load %struct.basic_block_def*, %struct.basic_block_def** %single, align 8, !dbg !8347
  call void %73(%struct.basic_block_def* %74, %struct.basic_block_def* null), !dbg !8346
  call void @sched_extend_bb(), !dbg !8348
  store i8 1, i8* @adding_bb_to_current_region_p, align 1, !dbg !8349
  %75 = load %struct.basic_block_def*, %struct.basic_block_def** %single, align 8, !dbg !8350
  store %struct.basic_block_def* %75, %struct.basic_block_def** @before_recovery, align 8, !dbg !8351
  %76 = load %struct.basic_block_def*, %struct.basic_block_def** %empty, align 8, !dbg !8352
  store %struct.basic_block_def* %76, %struct.basic_block_def** @after_recovery, align 8, !dbg !8353
  %77 = load %struct.basic_block_def**, %struct.basic_block_def*** %before_recovery_ptr.addr, align 8, !dbg !8354
  %tobool58 = icmp ne %struct.basic_block_def** %77, null, !dbg !8354
  br i1 %tobool58, label %if.then59, label %if.end60, !dbg !8356

if.then59:                                        ; preds = %do.end45
  %78 = load %struct.basic_block_def*, %struct.basic_block_def** @before_recovery, align 8, !dbg !8357
  %79 = load %struct.basic_block_def**, %struct.basic_block_def*** %before_recovery_ptr.addr, align 8, !dbg !8358
  store %struct.basic_block_def* %78, %struct.basic_block_def** %79, align 8, !dbg !8359
  br label %if.end60, !dbg !8360

if.end60:                                         ; preds = %if.then59, %do.end45
  %80 = load i32, i32* @sched_verbose, align 4, !dbg !8361
  %cmp61 = icmp sge i32 %80, 2, !dbg !8363
  br i1 %cmp61, label %land.lhs.true, label %if.end68, !dbg !8364

land.lhs.true:                                    ; preds = %if.end60
  %81 = load %struct.spec_info_def*, %struct.spec_info_def** @spec_info, align 8, !dbg !8365
  %dump = getelementptr inbounds %struct.spec_info_def, %struct.spec_info_def* %81, i32 0, i32 1, !dbg !8366
  %82 = load %struct._IO_FILE*, %struct._IO_FILE** %dump, align 8, !dbg !8366
  %tobool62 = icmp ne %struct._IO_FILE* %82, null, !dbg !8365
  br i1 %tobool62, label %if.then63, label %if.end68, !dbg !8367

if.then63:                                        ; preds = %land.lhs.true
  %83 = load %struct.spec_info_def*, %struct.spec_info_def** @spec_info, align 8, !dbg !8368
  %dump64 = getelementptr inbounds %struct.spec_info_def, %struct.spec_info_def* %83, i32 0, i32 1, !dbg !8369
  %84 = load %struct._IO_FILE*, %struct._IO_FILE** %dump64, align 8, !dbg !8369
  %85 = load %struct.basic_block_def*, %struct.basic_block_def** %last, align 8, !dbg !8370
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %85, i32 0, i32 9, !dbg !8371
  %86 = load i32, i32* %index, align 8, !dbg !8371
  %87 = load %struct.basic_block_def*, %struct.basic_block_def** %single, align 8, !dbg !8372
  %index65 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %87, i32 0, i32 9, !dbg !8373
  %88 = load i32, i32* %index65, align 8, !dbg !8373
  %89 = load %struct.basic_block_def*, %struct.basic_block_def** %empty, align 8, !dbg !8374
  %index66 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %89, i32 0, i32 9, !dbg !8375
  %90 = load i32, i32* %index66, align 8, !dbg !8375
  %call67 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %84, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.54, i64 0, i64 0), i32 %86, i32 %88, i32 %90), !dbg !8376
  br label %if.end68, !dbg !8376

if.end68:                                         ; preds = %if.then63, %land.lhs.true, %if.end60
  br label %if.end69, !dbg !8377

if.else:                                          ; preds = %entry
  %91 = load %struct.basic_block_def*, %struct.basic_block_def** %last, align 8, !dbg !8378
  store %struct.basic_block_def* %91, %struct.basic_block_def** @before_recovery, align 8, !dbg !8379
  br label %if.end69

if.end69:                                         ; preds = %if.then1, %if.else, %if.end68
  ret void, !dbg !8380
}

declare dso_local %struct.rtx_def* @get_last_bb_insn(%struct.basic_block_def*) #2

declare dso_local %struct.rtx_def* @emit_label_after(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @gen_label_rtx() #2

declare dso_local %struct.basic_block_def* @create_basic_block(i8*, i8*, %struct.basic_block_def*) #2

declare dso_local %struct.rtx_def* @emit_barrier_after(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @sched_create_recovery_edges(%struct.basic_block_def* %first_bb, %struct.basic_block_def* %rec, %struct.basic_block_def* %second_bb) #0 !dbg !8381 {
entry:
  %first_bb.addr = alloca %struct.basic_block_def*, align 8
  %rec.addr = alloca %struct.basic_block_def*, align 8
  %second_bb.addr = alloca %struct.basic_block_def*, align 8
  %label = alloca %struct.rtx_def*, align 8
  %jump = alloca %struct.rtx_def*, align 8
  %edge_flags = alloca i32, align 4
  store %struct.basic_block_def* %first_bb, %struct.basic_block_def** %first_bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %first_bb.addr, metadata !8384, metadata !DIExpression()), !dbg !8385
  store %struct.basic_block_def* %rec, %struct.basic_block_def** %rec.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %rec.addr, metadata !8386, metadata !DIExpression()), !dbg !8387
  store %struct.basic_block_def* %second_bb, %struct.basic_block_def** %second_bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %second_bb.addr, metadata !8388, metadata !DIExpression()), !dbg !8389
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %label, metadata !8390, metadata !DIExpression()), !dbg !8391
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %jump, metadata !8392, metadata !DIExpression()), !dbg !8393
  call void @llvm.dbg.declare(metadata i32* %edge_flags, metadata !8394, metadata !DIExpression()), !dbg !8395
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %first_bb.addr, align 8, !dbg !8396
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !8396
  %1 = load i32, i32* %flags, align 8, !dbg !8396
  %and = and i32 %1, 96, !dbg !8396
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %rec.addr, align 8, !dbg !8398
  %flags1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 13, !dbg !8398
  %3 = load i32, i32* %flags1, align 8, !dbg !8398
  %and2 = and i32 %3, 96, !dbg !8398
  %cmp = icmp ne i32 %and, %and2, !dbg !8399
  br i1 %cmp, label %if.then, label %if.else, !dbg !8400

if.then:                                          ; preds = %entry
  store i32 8192, i32* %edge_flags, align 4, !dbg !8401
  br label %if.end, !dbg !8402

if.else:                                          ; preds = %entry
  store i32 0, i32* %edge_flags, align 4, !dbg !8403
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %first_bb.addr, align 8, !dbg !8404
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %rec.addr, align 8, !dbg !8405
  %6 = load i32, i32* %edge_flags, align 4, !dbg !8406
  %call = call %struct.edge_def* @make_edge(%struct.basic_block_def* %4, %struct.basic_block_def* %5, i32 %6), !dbg !8407
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %second_bb.addr, align 8, !dbg !8408
  %call3 = call %struct.rtx_def* @block_label(%struct.basic_block_def* %7), !dbg !8409
  store %struct.rtx_def* %call3, %struct.rtx_def** %label, align 8, !dbg !8410
  %8 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !8411
  %call4 = call %struct.rtx_def* @gen_jump(%struct.rtx_def* %8), !dbg !8412
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %rec.addr, align 8, !dbg !8413
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 7, !dbg !8413
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !8413
  %10 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !8413
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %10, i32 0, i32 1, !dbg !8413
  %11 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !8413
  %call5 = call %struct.rtx_def* @emit_jump_insn_after(%struct.rtx_def* %call4, %struct.rtx_def* %11), !dbg !8414
  store %struct.rtx_def* %call5, %struct.rtx_def** %jump, align 8, !dbg !8415
  %12 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !8416
  %13 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !8417
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !8417
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8417
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 8, !dbg !8417
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !8417
  store %struct.rtx_def* %12, %struct.rtx_def** %rt_rtx, align 8, !dbg !8418
  %14 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !8419
  %u6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !8419
  %fld7 = bitcast %union.u* %u6 to [1 x %union.rtunion_def]*, !dbg !8419
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i64 0, i64 4, !dbg !8419
  %rt_int = bitcast %union.rtunion_def* %arrayidx8 to i32*, !dbg !8419
  %15 = load i32, i32* %rt_int, align 8, !dbg !8420
  %inc = add nsw i32 %15, 1, !dbg !8420
  store i32 %inc, i32* %rt_int, align 8, !dbg !8420
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %second_bb.addr, align 8, !dbg !8421
  %flags9 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i32 0, i32 13, !dbg !8421
  %17 = load i32, i32* %flags9, align 8, !dbg !8421
  %and10 = and i32 %17, 96, !dbg !8421
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %rec.addr, align 8, !dbg !8423
  %flags11 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %18, i32 0, i32 13, !dbg !8423
  %19 = load i32, i32* %flags11, align 8, !dbg !8423
  %and12 = and i32 %19, 96, !dbg !8423
  %cmp13 = icmp ne i32 %and10, %and12, !dbg !8424
  br i1 %cmp13, label %if.then14, label %if.else18, !dbg !8425

if.then14:                                        ; preds = %if.end
  %20 = load i32, i32* @flag_reorder_blocks_and_partition, align 4, !dbg !8426
  %tobool = icmp ne i32 %20, 0, !dbg !8426
  br i1 %tobool, label %land.lhs.true, label %if.end17, !dbg !8429

land.lhs.true:                                    ; preds = %if.then14
  %21 = load i8, i8* getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 110), align 1, !dbg !8430
  %conv = zext i8 %21 to i32, !dbg !8431
  %tobool15 = icmp ne i32 %conv, 0, !dbg !8431
  br i1 %tobool15, label %if.then16, label %if.end17, !dbg !8432

if.then16:                                        ; preds = %land.lhs.true
  %22 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !8433
  call void @add_reg_note(%struct.rtx_def* %22, i32 29, %struct.rtx_def* null), !dbg !8435
  br label %if.end17, !dbg !8436

if.end17:                                         ; preds = %if.then16, %land.lhs.true, %if.then14
  store i32 8192, i32* %edge_flags, align 4, !dbg !8437
  br label %if.end19, !dbg !8438

if.else18:                                        ; preds = %if.end
  store i32 0, i32* %edge_flags, align 4, !dbg !8439
  br label %if.end19

if.end19:                                         ; preds = %if.else18, %if.end17
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %rec.addr, align 8, !dbg !8440
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %second_bb.addr, align 8, !dbg !8441
  %25 = load i32, i32* %edge_flags, align 4, !dbg !8442
  %call20 = call %struct.edge_def* @make_single_succ_edge(%struct.basic_block_def* %23, %struct.basic_block_def* %24, i32 %25), !dbg !8443
  ret void, !dbg !8444
}

declare dso_local %struct.edge_def* @make_edge(%struct.basic_block_def*, %struct.basic_block_def*, i32) #2

declare dso_local %struct.rtx_def* @block_label(%struct.basic_block_def*) #2

declare dso_local %struct.rtx_def* @emit_jump_insn_after(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @gen_jump(%struct.rtx_def*) #2

declare dso_local %struct.edge_def* @make_single_succ_edge(%struct.basic_block_def*, %struct.basic_block_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @sched_change_pattern(%struct.rtx_def* %insn, %struct.rtx_def* %new_pat) #0 !dbg !8445 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %new_pat.addr = alloca %struct.rtx_def*, align 8
  %t = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !8446, metadata !DIExpression()), !dbg !8447
  store %struct.rtx_def* %new_pat, %struct.rtx_def** %new_pat.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %new_pat.addr, metadata !8448, metadata !DIExpression()), !dbg !8449
  call void @llvm.dbg.declare(metadata i32* %t, metadata !8450, metadata !DIExpression()), !dbg !8451
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8452
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8453
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !8453
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8453
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !8453
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !8453
  %2 = load %struct.rtx_def*, %struct.rtx_def** %new_pat.addr, align 8, !dbg !8454
  %call = call zeroext i8 @validate_change(%struct.rtx_def* %0, %struct.rtx_def** %rt_rtx, %struct.rtx_def* %2, i8 zeroext 0), !dbg !8455
  %conv = zext i8 %call to i32, !dbg !8455
  store i32 %conv, i32* %t, align 4, !dbg !8456
  %3 = load i32, i32* %t, align 4, !dbg !8457
  %tobool = icmp ne i32 %3, 0, !dbg !8457
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !8457

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 4794, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !8457
  br label %cond.end, !dbg !8457

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8457

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8457
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8458
  call void @dfa_clear_single_insn_cache(%struct.rtx_def* %4), !dbg !8459
  ret void, !dbg !8460
}

declare dso_local zeroext i8 @validate_change(%struct.rtx_def*, %struct.rtx_def**, %struct.rtx_def*, i8 zeroext) #2

declare dso_local void @dfa_clear_single_insn_cache(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @sched_speculate_insn(%struct.rtx_def* %insn, i32 %request, %struct.rtx_def** %new_pat) #0 !dbg !8461 {
entry:
  %retval = alloca i32, align 4
  %insn.addr = alloca %struct.rtx_def*, align 8
  %request.addr = alloca i32, align 4
  %new_pat.addr = alloca %struct.rtx_def**, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !8462, metadata !DIExpression()), !dbg !8463
  store i32 %request, i32* %request.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %request.addr, metadata !8464, metadata !DIExpression()), !dbg !8465
  store %struct.rtx_def** %new_pat, %struct.rtx_def*** %new_pat.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %new_pat.addr, metadata !8466, metadata !DIExpression()), !dbg !8467
  %0 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !8468
  %flags = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %0, i32 0, i32 17, !dbg !8468
  %1 = load i32, i32* %flags, align 8, !dbg !8468
  %and = and i32 %1, 2, !dbg !8468
  %tobool = icmp ne i32 %and, 0, !dbg !8468
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !8468

land.lhs.true:                                    ; preds = %entry
  %2 = load i32, i32* %request.addr, align 4, !dbg !8468
  %and1 = and i32 %2, 16777215, !dbg !8468
  %tobool2 = icmp ne i32 %and1, 0, !dbg !8468
  br i1 %tobool2, label %land.lhs.true3, label %cond.true, !dbg !8468

land.lhs.true3:                                   ; preds = %land.lhs.true
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8468
  %4 = load i32, i32* %request.addr, align 4, !dbg !8468
  %call = call zeroext i8 @sched_insn_is_legitimate_for_speculation_p(%struct.rtx_def* %3, i32 %4), !dbg !8468
  %conv = zext i8 %call to i32, !dbg !8468
  %tobool4 = icmp ne i32 %conv, 0, !dbg !8468
  br i1 %tobool4, label %cond.false, label %cond.true, !dbg !8468

cond.true:                                        ; preds = %land.lhs.true3, %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 4820, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !8468
  br label %cond.end, !dbg !8468

cond.false:                                       ; preds = %land.lhs.true3
  br label %cond.end, !dbg !8468

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8468
  %5 = load i32, i32* %request.addr, align 4, !dbg !8469
  %6 = load %struct.spec_info_def*, %struct.spec_info_def** @spec_info, align 8, !dbg !8471
  %mask = getelementptr inbounds %struct.spec_info_def, %struct.spec_info_def* %6, i32 0, i32 0, !dbg !8472
  %7 = load i32, i32* %mask, align 8, !dbg !8472
  %and5 = and i32 %5, %7, !dbg !8473
  %8 = load i32, i32* %request.addr, align 4, !dbg !8474
  %cmp = icmp ne i32 %and5, %8, !dbg !8475
  br i1 %cmp, label %if.then, label %if.end, !dbg !8476

if.then:                                          ; preds = %cond.end
  store i32 -1, i32* %retval, align 4, !dbg !8477
  br label %return, !dbg !8477

if.end:                                           ; preds = %cond.end
  %9 = load i32, i32* %request.addr, align 4, !dbg !8478
  %and7 = and i32 %9, 16519104, !dbg !8480
  %tobool8 = icmp ne i32 %and7, 0, !dbg !8480
  br i1 %tobool8, label %land.lhs.true9, label %if.end13, !dbg !8481

land.lhs.true9:                                   ; preds = %if.end
  %10 = load i32, i32* %request.addr, align 4, !dbg !8482
  %and10 = and i32 %10, 258111, !dbg !8483
  %tobool11 = icmp ne i32 %and10, 0, !dbg !8483
  br i1 %tobool11, label %if.end13, label %if.then12, !dbg !8484

if.then12:                                        ; preds = %land.lhs.true9
  store i32 0, i32* %retval, align 4, !dbg !8485
  br label %return, !dbg !8485

if.end13:                                         ; preds = %land.lhs.true9, %if.end
  %11 = load i32 (%struct.rtx_def*, i32, %struct.rtx_def**)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def**)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 28), align 8, !dbg !8486
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8487
  %13 = load i32, i32* %request.addr, align 4, !dbg !8488
  %14 = load %struct.rtx_def**, %struct.rtx_def*** %new_pat.addr, align 8, !dbg !8489
  %call14 = call i32 %11(%struct.rtx_def* %12, i32 %13, %struct.rtx_def** %14), !dbg !8490
  store i32 %call14, i32* %retval, align 4, !dbg !8491
  br label %return, !dbg !8491

return:                                           ; preds = %if.end13, %if.then12, %if.then
  %15 = load i32, i32* %retval, align 4, !dbg !8492
  ret i32 %15, !dbg !8492
}

declare dso_local zeroext i8 @sched_insn_is_legitimate_for_speculation_p(%struct.rtx_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @unlink_bb_notes(%struct.basic_block_def* %first, %struct.basic_block_def* %last) #0 !dbg !8493 {
entry:
  %first.addr = alloca %struct.basic_block_def*, align 8
  %last.addr = alloca %struct.basic_block_def*, align 8
  %prev = alloca %struct.rtx_def*, align 8
  %label = alloca %struct.rtx_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  %next = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def* %first, %struct.basic_block_def** %first.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %first.addr, metadata !8494, metadata !DIExpression()), !dbg !8495
  store %struct.basic_block_def* %last, %struct.basic_block_def** %last.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %last.addr, metadata !8496, metadata !DIExpression()), !dbg !8497
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %first.addr, align 8, !dbg !8498
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %last.addr, align 8, !dbg !8500
  %cmp = icmp eq %struct.basic_block_def* %0, %1, !dbg !8501
  br i1 %cmp, label %if.then, label %if.end, !dbg !8502

if.then:                                          ; preds = %entry
  br label %do.end, !dbg !8503

if.end:                                           ; preds = %entry
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8504
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !8504
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !8504
  %3 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !8504
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %3, i32 0, i32 5, !dbg !8504
  %4 = load i32, i32* %x_last_basic_block, align 8, !dbg !8504
  %conv = sext i32 %4 to i64, !dbg !8504
  %mul = mul i64 8, %conv, !dbg !8504
  %call = call i8* @xmalloc(i64 %mul), !dbg !8504
  %5 = bitcast i8* %call to %struct.rtx_def**, !dbg !8504
  store %struct.rtx_def** %5, %struct.rtx_def*** @bb_header, align 8, !dbg !8505
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %last.addr, align 8, !dbg !8506
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 6, !dbg !8508
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !8508
  %8 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8509
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %8, i64 0, !dbg !8509
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !8509
  %9 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !8509
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %9, i32 0, i32 1, !dbg !8509
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !8509
  %cmp3 = icmp ne %struct.basic_block_def* %7, %10, !dbg !8510
  br i1 %cmp3, label %if.then5, label %if.end7, !dbg !8511

if.then5:                                         ; preds = %if.end
  %11 = load %struct.rtx_def**, %struct.rtx_def*** @bb_header, align 8, !dbg !8512
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %last.addr, align 8, !dbg !8513
  %next_bb6 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 6, !dbg !8514
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb6, align 8, !dbg !8514
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 9, !dbg !8515
  %14 = load i32, i32* %index, align 8, !dbg !8515
  %idxprom = sext i32 %14 to i64, !dbg !8512
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %11, i64 %idxprom, !dbg !8512
  store %struct.rtx_def* null, %struct.rtx_def** %arrayidx, align 8, !dbg !8516
  br label %if.end7, !dbg !8512

if.end7:                                          ; preds = %if.then5, %if.end
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %first.addr, align 8, !dbg !8517
  %next_bb8 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %15, i32 0, i32 6, !dbg !8518
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb8, align 8, !dbg !8518
  store %struct.basic_block_def* %16, %struct.basic_block_def** %first.addr, align 8, !dbg !8519
  br label %do.body, !dbg !8520

do.body:                                          ; preds = %do.cond, %if.end7
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %prev, metadata !8521, metadata !DIExpression()), !dbg !8523
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %label, metadata !8524, metadata !DIExpression()), !dbg !8525
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !8526, metadata !DIExpression()), !dbg !8527
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %next, metadata !8528, metadata !DIExpression()), !dbg !8529
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %last.addr, align 8, !dbg !8530
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %17, i32 0, i32 7, !dbg !8530
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !8530
  %18 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !8530
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %18, i32 0, i32 0, !dbg !8530
  %19 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !8530
  store %struct.rtx_def* %19, %struct.rtx_def** %label, align 8, !dbg !8531
  %20 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !8532
  %21 = bitcast %struct.rtx_def* %20 to i32*, !dbg !8532
  %bf.load = load i32, i32* %21, align 8, !dbg !8532
  %bf.clear = and i32 %bf.load, 65535, !dbg !8532
  %cmp9 = icmp eq i32 %bf.clear, 12, !dbg !8532
  br i1 %cmp9, label %if.then11, label %if.else, !dbg !8534

if.then11:                                        ; preds = %do.body
  %22 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !8535
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !8535
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8535
  %arrayidx12 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !8535
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx12 to %struct.rtx_def**, !dbg !8535
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !8535
  store %struct.rtx_def* %23, %struct.rtx_def** %note, align 8, !dbg !8536
  br label %if.end13, !dbg !8537

if.else:                                          ; preds = %do.body
  %24 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !8538
  store %struct.rtx_def* %24, %struct.rtx_def** %note, align 8, !dbg !8539
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.then11
  %25 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !8540
  %26 = bitcast %struct.rtx_def* %25 to i32*, !dbg !8540
  %bf.load14 = load i32, i32* %26, align 8, !dbg !8540
  %bf.clear15 = and i32 %bf.load14, 65535, !dbg !8540
  %cmp16 = icmp eq i32 %bf.clear15, 13, !dbg !8540
  br i1 %cmp16, label %land.lhs.true, label %cond.true, !dbg !8540

land.lhs.true:                                    ; preds = %if.end13
  %27 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !8540
  %u18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1, !dbg !8540
  %fld19 = bitcast %union.u* %u18 to [1 x %union.rtunion_def]*, !dbg !8540
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i64 0, i64 5, !dbg !8540
  %rt_int = bitcast %union.rtunion_def* %arrayidx20 to i32*, !dbg !8540
  %28 = load i32, i32* %rt_int, align 8, !dbg !8540
  %cmp21 = icmp eq i32 %28, 10, !dbg !8540
  br i1 %cmp21, label %cond.false, label %cond.true, !dbg !8540

cond.true:                                        ; preds = %land.lhs.true, %if.end13
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 4897, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !8540
  br label %cond.end, !dbg !8540

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !8540

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8540
  %29 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !8541
  %u23 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1, !dbg !8541
  %fld24 = bitcast %union.u* %u23 to [1 x %union.rtunion_def]*, !dbg !8541
  %arrayidx25 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld24, i64 0, i64 1, !dbg !8541
  %rt_rtx26 = bitcast %union.rtunion_def* %arrayidx25 to %struct.rtx_def**, !dbg !8541
  %30 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx26, align 8, !dbg !8541
  store %struct.rtx_def* %30, %struct.rtx_def** %prev, align 8, !dbg !8542
  %31 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !8543
  %u27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1, !dbg !8543
  %fld28 = bitcast %union.u* %u27 to [1 x %union.rtunion_def]*, !dbg !8543
  %arrayidx29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld28, i64 0, i64 2, !dbg !8543
  %rt_rtx30 = bitcast %union.rtunion_def* %arrayidx29 to %struct.rtx_def**, !dbg !8543
  %32 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx30, align 8, !dbg !8543
  store %struct.rtx_def* %32, %struct.rtx_def** %next, align 8, !dbg !8544
  %33 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !8545
  %tobool = icmp ne %struct.rtx_def* %33, null, !dbg !8545
  br i1 %tobool, label %land.lhs.true31, label %cond.true33, !dbg !8545

land.lhs.true31:                                  ; preds = %cond.end
  %34 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !8545
  %tobool32 = icmp ne %struct.rtx_def* %34, null, !dbg !8545
  br i1 %tobool32, label %cond.false34, label %cond.true33, !dbg !8545

cond.true33:                                      ; preds = %land.lhs.true31, %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 4901, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !8545
  br label %cond.end35, !dbg !8545

cond.false34:                                     ; preds = %land.lhs.true31
  br label %cond.end35, !dbg !8545

cond.end35:                                       ; preds = %cond.false34, %cond.true33
  %cond36 = phi i32 [ 0, %cond.true33 ], [ 0, %cond.false34 ], !dbg !8545
  %35 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !8546
  %36 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !8547
  %u37 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1, !dbg !8547
  %fld38 = bitcast %union.u* %u37 to [1 x %union.rtunion_def]*, !dbg !8547
  %arrayidx39 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld38, i64 0, i64 2, !dbg !8547
  %rt_rtx40 = bitcast %union.rtunion_def* %arrayidx39 to %struct.rtx_def**, !dbg !8547
  store %struct.rtx_def* %35, %struct.rtx_def** %rt_rtx40, align 8, !dbg !8548
  %37 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !8549
  %38 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !8550
  %u41 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1, !dbg !8550
  %fld42 = bitcast %union.u* %u41 to [1 x %union.rtunion_def]*, !dbg !8550
  %arrayidx43 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld42, i64 0, i64 1, !dbg !8550
  %rt_rtx44 = bitcast %union.rtunion_def* %arrayidx43 to %struct.rtx_def**, !dbg !8550
  store %struct.rtx_def* %37, %struct.rtx_def** %rt_rtx44, align 8, !dbg !8551
  %39 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !8552
  %40 = load %struct.rtx_def**, %struct.rtx_def*** @bb_header, align 8, !dbg !8553
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %last.addr, align 8, !dbg !8554
  %index45 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %41, i32 0, i32 9, !dbg !8555
  %42 = load i32, i32* %index45, align 8, !dbg !8555
  %idxprom46 = sext i32 %42 to i64, !dbg !8553
  %arrayidx47 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %40, i64 %idxprom46, !dbg !8553
  store %struct.rtx_def* %39, %struct.rtx_def** %arrayidx47, align 8, !dbg !8556
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %last.addr, align 8, !dbg !8557
  %44 = load %struct.basic_block_def*, %struct.basic_block_def** %first.addr, align 8, !dbg !8559
  %cmp48 = icmp eq %struct.basic_block_def* %43, %44, !dbg !8560
  br i1 %cmp48, label %if.then50, label %if.end51, !dbg !8561

if.then50:                                        ; preds = %cond.end35
  br label %do.end, !dbg !8562

if.end51:                                         ; preds = %cond.end35
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %last.addr, align 8, !dbg !8563
  %prev_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %45, i32 0, i32 5, !dbg !8564
  %46 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb, align 8, !dbg !8564
  store %struct.basic_block_def* %46, %struct.basic_block_def** %last.addr, align 8, !dbg !8565
  br label %do.cond, !dbg !8566

do.cond:                                          ; preds = %if.end51
  br i1 true, label %do.body, label %do.end, !dbg !8566, !llvm.loop !8567

do.end:                                           ; preds = %if.then, %do.cond, %if.then50
  ret void, !dbg !8569
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @sched_scan(%struct.sched_scan_info_def* %ssi, %struct.VEC_basic_block_heap* %bbs, %struct.basic_block_def* %bb, %struct.VEC_rtx_heap* %insns, %struct.rtx_def* %insn) #0 !dbg !8570 {
entry:
  %ssi.addr = alloca %struct.sched_scan_info_def*, align 8
  %bbs.addr = alloca %struct.VEC_basic_block_heap*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %insns.addr = alloca %struct.VEC_rtx_heap*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %x = alloca %struct.basic_block_def*, align 8
  %i11 = alloca i32, align 4
  %x12 = alloca %struct.basic_block_def*, align 8
  %i32 = alloca i32, align 4
  %x33 = alloca %struct.rtx_def*, align 8
  store %struct.sched_scan_info_def* %ssi, %struct.sched_scan_info_def** %ssi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sched_scan_info_def** %ssi.addr, metadata !8573, metadata !DIExpression()), !dbg !8574
  store %struct.VEC_basic_block_heap* %bbs, %struct.VEC_basic_block_heap** %bbs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap** %bbs.addr, metadata !8575, metadata !DIExpression()), !dbg !8576
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !8577, metadata !DIExpression()), !dbg !8578
  store %struct.VEC_rtx_heap* %insns, %struct.VEC_rtx_heap** %insns.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_heap** %insns.addr, metadata !8579, metadata !DIExpression()), !dbg !8580
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !8581, metadata !DIExpression()), !dbg !8582
  %0 = load %struct.sched_scan_info_def*, %struct.sched_scan_info_def** %ssi.addr, align 8, !dbg !8583
  store %struct.sched_scan_info_def* %0, %struct.sched_scan_info_def** @sched_scan_info, align 8, !dbg !8584
  %1 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %bbs.addr, align 8, !dbg !8585
  %cmp = icmp ne %struct.VEC_basic_block_heap* %1, null, !dbg !8587
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !8588

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8589
  %cmp1 = icmp ne %struct.basic_block_def* %2, null, !dbg !8590
  br i1 %cmp1, label %if.then, label %if.end8, !dbg !8591

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @extend_bb(), !dbg !8592
  %3 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %bbs.addr, align 8, !dbg !8594
  %cmp2 = icmp ne %struct.VEC_basic_block_heap* %3, null, !dbg !8596
  br i1 %cmp2, label %if.then3, label %if.end, !dbg !8597

if.then3:                                         ; preds = %if.then
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8598, metadata !DIExpression()), !dbg !8600
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %x, metadata !8601, metadata !DIExpression()), !dbg !8602
  store i32 0, i32* %i, align 4, !dbg !8603
  br label %for.cond, !dbg !8605

for.cond:                                         ; preds = %for.inc, %if.then3
  %4 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %bbs.addr, align 8, !dbg !8606
  %tobool = icmp ne %struct.VEC_basic_block_heap* %4, null, !dbg !8606
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8606

cond.true:                                        ; preds = %for.cond
  %5 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %bbs.addr, align 8, !dbg !8606
  %base = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %5, i32 0, i32 0, !dbg !8606
  br label %cond.end, !dbg !8606

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !8606

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8606
  %6 = load i32, i32* %i, align 4, !dbg !8606
  %call = call i32 @VEC_basic_block_base_iterate(%struct.VEC_basic_block_base* %cond, i32 %6, %struct.basic_block_def** %x), !dbg !8606
  %tobool4 = icmp ne i32 %call, 0, !dbg !8608
  br i1 %tobool4, label %for.body, label %for.end, !dbg !8608

for.body:                                         ; preds = %cond.end
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x, align 8, !dbg !8609
  call void @init_bb(%struct.basic_block_def* %7), !dbg !8610
  br label %for.inc, !dbg !8610

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4, !dbg !8611
  %inc = add i32 %8, 1, !dbg !8611
  store i32 %inc, i32* %i, align 4, !dbg !8611
  br label %for.cond, !dbg !8612, !llvm.loop !8613

for.end:                                          ; preds = %cond.end
  br label %if.end, !dbg !8615

if.end:                                           ; preds = %for.end, %if.then
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8616
  %cmp5 = icmp ne %struct.basic_block_def* %9, null, !dbg !8618
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !8619

if.then6:                                         ; preds = %if.end
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8620
  call void @init_bb(%struct.basic_block_def* %10), !dbg !8621
  br label %if.end7, !dbg !8621

if.end7:                                          ; preds = %if.then6, %if.end
  br label %if.end8, !dbg !8622

if.end8:                                          ; preds = %if.end7, %lor.lhs.false
  call void @extend_insn(), !dbg !8623
  %11 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %bbs.addr, align 8, !dbg !8624
  %cmp9 = icmp ne %struct.VEC_basic_block_heap* %11, null, !dbg !8626
  br i1 %cmp9, label %if.then10, label %if.end26, !dbg !8627

if.then10:                                        ; preds = %if.end8
  call void @llvm.dbg.declare(metadata i32* %i11, metadata !8628, metadata !DIExpression()), !dbg !8630
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %x12, metadata !8631, metadata !DIExpression()), !dbg !8632
  store i32 0, i32* %i11, align 4, !dbg !8633
  br label %for.cond13, !dbg !8635

for.cond13:                                       ; preds = %for.inc23, %if.then10
  %12 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %bbs.addr, align 8, !dbg !8636
  %tobool14 = icmp ne %struct.VEC_basic_block_heap* %12, null, !dbg !8636
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !8636

cond.true15:                                      ; preds = %for.cond13
  %13 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %bbs.addr, align 8, !dbg !8636
  %base16 = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %13, i32 0, i32 0, !dbg !8636
  br label %cond.end18, !dbg !8636

cond.false17:                                     ; preds = %for.cond13
  br label %cond.end18, !dbg !8636

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_basic_block_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !8636
  %14 = load i32, i32* %i11, align 4, !dbg !8636
  %call20 = call i32 @VEC_basic_block_base_iterate(%struct.VEC_basic_block_base* %cond19, i32 %14, %struct.basic_block_def** %x12), !dbg !8636
  %tobool21 = icmp ne i32 %call20, 0, !dbg !8638
  br i1 %tobool21, label %for.body22, label %for.end25, !dbg !8638

for.body22:                                       ; preds = %cond.end18
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %x12, align 8, !dbg !8639
  call void @init_insns_in_bb(%struct.basic_block_def* %15), !dbg !8640
  br label %for.inc23, !dbg !8640

for.inc23:                                        ; preds = %for.body22
  %16 = load i32, i32* %i11, align 4, !dbg !8641
  %inc24 = add i32 %16, 1, !dbg !8641
  store i32 %inc24, i32* %i11, align 4, !dbg !8641
  br label %for.cond13, !dbg !8642, !llvm.loop !8643

for.end25:                                        ; preds = %cond.end18
  br label %if.end26, !dbg !8645

if.end26:                                         ; preds = %for.end25, %if.end8
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8646
  %cmp27 = icmp ne %struct.basic_block_def* %17, null, !dbg !8648
  br i1 %cmp27, label %if.then28, label %if.end29, !dbg !8649

if.then28:                                        ; preds = %if.end26
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8650
  call void @init_insns_in_bb(%struct.basic_block_def* %18), !dbg !8651
  br label %if.end29, !dbg !8651

if.end29:                                         ; preds = %if.then28, %if.end26
  %19 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %insns.addr, align 8, !dbg !8652
  %cmp30 = icmp ne %struct.VEC_rtx_heap* %19, null, !dbg !8654
  br i1 %cmp30, label %if.then31, label %if.end47, !dbg !8655

if.then31:                                        ; preds = %if.end29
  call void @llvm.dbg.declare(metadata i32* %i32, metadata !8656, metadata !DIExpression()), !dbg !8658
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x33, metadata !8659, metadata !DIExpression()), !dbg !8660
  store i32 0, i32* %i32, align 4, !dbg !8661
  br label %for.cond34, !dbg !8663

for.cond34:                                       ; preds = %for.inc44, %if.then31
  %20 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %insns.addr, align 8, !dbg !8664
  %tobool35 = icmp ne %struct.VEC_rtx_heap* %20, null, !dbg !8664
  br i1 %tobool35, label %cond.true36, label %cond.false38, !dbg !8664

cond.true36:                                      ; preds = %for.cond34
  %21 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %insns.addr, align 8, !dbg !8664
  %base37 = getelementptr inbounds %struct.VEC_rtx_heap, %struct.VEC_rtx_heap* %21, i32 0, i32 0, !dbg !8664
  br label %cond.end39, !dbg !8664

cond.false38:                                     ; preds = %for.cond34
  br label %cond.end39, !dbg !8664

cond.end39:                                       ; preds = %cond.false38, %cond.true36
  %cond40 = phi %struct.VEC_rtx_base* [ %base37, %cond.true36 ], [ null, %cond.false38 ], !dbg !8664
  %22 = load i32, i32* %i32, align 4, !dbg !8664
  %call41 = call i32 @VEC_rtx_base_iterate(%struct.VEC_rtx_base* %cond40, i32 %22, %struct.rtx_def** %x33), !dbg !8664
  %tobool42 = icmp ne i32 %call41, 0, !dbg !8666
  br i1 %tobool42, label %for.body43, label %for.end46, !dbg !8666

for.body43:                                       ; preds = %cond.end39
  %23 = load %struct.rtx_def*, %struct.rtx_def** %x33, align 8, !dbg !8667
  call void @init_insn(%struct.rtx_def* %23), !dbg !8668
  br label %for.inc44, !dbg !8668

for.inc44:                                        ; preds = %for.body43
  %24 = load i32, i32* %i32, align 4, !dbg !8669
  %inc45 = add i32 %24, 1, !dbg !8669
  store i32 %inc45, i32* %i32, align 4, !dbg !8669
  br label %for.cond34, !dbg !8670, !llvm.loop !8671

for.end46:                                        ; preds = %cond.end39
  br label %if.end47, !dbg !8673

if.end47:                                         ; preds = %for.end46, %if.end29
  %25 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8674
  %cmp48 = icmp ne %struct.rtx_def* %25, null, !dbg !8676
  br i1 %cmp48, label %if.then49, label %if.end50, !dbg !8677

if.then49:                                        ; preds = %if.end47
  %26 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8678
  call void @init_insn(%struct.rtx_def* %26), !dbg !8679
  br label %if.end50, !dbg !8679

if.end50:                                         ; preds = %if.then49, %if.end47
  ret void, !dbg !8680
}

; Function Attrs: noinline nounwind uwtable
define internal void @extend_bb() #0 !dbg !8681 {
entry:
  %0 = load %struct.sched_scan_info_def*, %struct.sched_scan_info_def** @sched_scan_info, align 8, !dbg !8682
  %extend_bb = getelementptr inbounds %struct.sched_scan_info_def, %struct.sched_scan_info_def* %0, i32 0, i32 0, !dbg !8684
  %1 = load void ()*, void ()** %extend_bb, align 8, !dbg !8684
  %tobool = icmp ne void ()* %1, null, !dbg !8682
  br i1 %tobool, label %if.then, label %if.end, !dbg !8685

if.then:                                          ; preds = %entry
  %2 = load %struct.sched_scan_info_def*, %struct.sched_scan_info_def** @sched_scan_info, align 8, !dbg !8686
  %extend_bb1 = getelementptr inbounds %struct.sched_scan_info_def, %struct.sched_scan_info_def* %2, i32 0, i32 0, !dbg !8687
  %3 = load void ()*, void ()** %extend_bb1, align 8, !dbg !8687
  call void %3(), !dbg !8686
  br label %if.end, !dbg !8686

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !8688
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_basic_block_base_iterate(%struct.VEC_basic_block_base* %vec_, i32 %ix_, %struct.basic_block_def** %ptr) #0 !dbg !8689 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.basic_block_def**, align 8
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !8694, metadata !DIExpression()), !dbg !8695
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !8696, metadata !DIExpression()), !dbg !8695
  store %struct.basic_block_def** %ptr, %struct.basic_block_def*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %ptr.addr, metadata !8697, metadata !DIExpression()), !dbg !8695
  %0 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !8698
  %tobool = icmp ne %struct.VEC_basic_block_base* %0, null, !dbg !8698
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !8698

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !8698
  %2 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !8698
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %2, i32 0, i32 0, !dbg !8698
  %3 = load i32, i32* %num, align 8, !dbg !8698
  %cmp = icmp ult i32 %1, %3, !dbg !8698
  br i1 %cmp, label %if.then, label %if.else, !dbg !8695

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !8700
  %vec = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %4, i32 0, i32 2, !dbg !8700
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !8700
  %idxprom = zext i32 %5 to i64, !dbg !8700
  %arrayidx = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %vec, i64 0, i64 %idxprom, !dbg !8700
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !8700
  %7 = load %struct.basic_block_def**, %struct.basic_block_def*** %ptr.addr, align 8, !dbg !8700
  store %struct.basic_block_def* %6, %struct.basic_block_def** %7, align 8, !dbg !8700
  store i32 1, i32* %retval, align 4, !dbg !8700
  br label %return, !dbg !8700

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.basic_block_def**, %struct.basic_block_def*** %ptr.addr, align 8, !dbg !8702
  store %struct.basic_block_def* null, %struct.basic_block_def** %8, align 8, !dbg !8702
  store i32 0, i32* %retval, align 4, !dbg !8702
  br label %return, !dbg !8702

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !8695
  ret i32 %9, !dbg !8695
}

; Function Attrs: noinline nounwind uwtable
define internal void @init_bb(%struct.basic_block_def* %bb) #0 !dbg !8704 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !8705, metadata !DIExpression()), !dbg !8706
  %0 = load %struct.sched_scan_info_def*, %struct.sched_scan_info_def** @sched_scan_info, align 8, !dbg !8707
  %init_bb = getelementptr inbounds %struct.sched_scan_info_def, %struct.sched_scan_info_def* %0, i32 0, i32 1, !dbg !8709
  %1 = load void (%struct.basic_block_def*)*, void (%struct.basic_block_def*)** %init_bb, align 8, !dbg !8709
  %tobool = icmp ne void (%struct.basic_block_def*)* %1, null, !dbg !8707
  br i1 %tobool, label %if.then, label %if.end, !dbg !8710

if.then:                                          ; preds = %entry
  %2 = load %struct.sched_scan_info_def*, %struct.sched_scan_info_def** @sched_scan_info, align 8, !dbg !8711
  %init_bb1 = getelementptr inbounds %struct.sched_scan_info_def, %struct.sched_scan_info_def* %2, i32 0, i32 1, !dbg !8712
  %3 = load void (%struct.basic_block_def*)*, void (%struct.basic_block_def*)** %init_bb1, align 8, !dbg !8712
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8713
  call void %3(%struct.basic_block_def* %4), !dbg !8711
  br label %if.end, !dbg !8711

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !8714
}

; Function Attrs: noinline nounwind uwtable
define internal void @extend_insn() #0 !dbg !8715 {
entry:
  %0 = load %struct.sched_scan_info_def*, %struct.sched_scan_info_def** @sched_scan_info, align 8, !dbg !8716
  %extend_insn = getelementptr inbounds %struct.sched_scan_info_def, %struct.sched_scan_info_def* %0, i32 0, i32 2, !dbg !8718
  %1 = load void ()*, void ()** %extend_insn, align 8, !dbg !8718
  %tobool = icmp ne void ()* %1, null, !dbg !8716
  br i1 %tobool, label %if.then, label %if.end, !dbg !8719

if.then:                                          ; preds = %entry
  %2 = load %struct.sched_scan_info_def*, %struct.sched_scan_info_def** @sched_scan_info, align 8, !dbg !8720
  %extend_insn1 = getelementptr inbounds %struct.sched_scan_info_def, %struct.sched_scan_info_def* %2, i32 0, i32 2, !dbg !8721
  %3 = load void ()*, void ()** %extend_insn1, align 8, !dbg !8721
  call void %3(), !dbg !8720
  br label %if.end, !dbg !8720

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !8722
}

; Function Attrs: noinline nounwind uwtable
define internal void @init_insns_in_bb(%struct.basic_block_def* %bb) #0 !dbg !8723 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !8724, metadata !DIExpression()), !dbg !8725
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !8726, metadata !DIExpression()), !dbg !8727
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8728
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 7, !dbg !8728
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !8728
  %1 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !8728
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %1, i32 0, i32 0, !dbg !8728
  %2 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !8728
  store %struct.rtx_def* %2, %struct.rtx_def** %insn, align 8, !dbg !8728
  br label %for.cond, !dbg !8728

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8730
  %tobool = icmp ne %struct.rtx_def* %3, null, !dbg !8730
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !8730

land.rhs:                                         ; preds = %for.cond
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8730
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8730
  %il1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %5, i32 0, i32 7, !dbg !8730
  %rtl2 = bitcast %union.basic_block_il_dependent* %il1 to %struct.rtl_bb_info**, !dbg !8730
  %6 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl2, align 8, !dbg !8730
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %6, i32 0, i32 1, !dbg !8730
  %7 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !8730
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1, !dbg !8730
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8730
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !8730
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !8730
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !8730
  %cmp = icmp ne %struct.rtx_def* %4, %8, !dbg !8730
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %9 = phi i1 [ false, %for.cond ], [ %cmp, %land.rhs ], !dbg !8732
  br i1 %9, label %for.body, label %for.end, !dbg !8728

for.body:                                         ; preds = %land.end
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8733
  call void @init_insn(%struct.rtx_def* %10), !dbg !8734
  br label %for.inc, !dbg !8734

for.inc:                                          ; preds = %for.body
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8730
  %u3 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !8730
  %fld4 = bitcast %union.u* %u3 to [1 x %union.rtunion_def]*, !dbg !8730
  %arrayidx5 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld4, i64 0, i64 2, !dbg !8730
  %rt_rtx6 = bitcast %union.rtunion_def* %arrayidx5 to %struct.rtx_def**, !dbg !8730
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx6, align 8, !dbg !8730
  store %struct.rtx_def* %12, %struct.rtx_def** %insn, align 8, !dbg !8730
  br label %for.cond, !dbg !8730, !llvm.loop !8735

for.end:                                          ; preds = %land.end
  ret void, !dbg !8737
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_rtx_base_iterate(%struct.VEC_rtx_base* %vec_, i32 %ix_, %struct.rtx_def** %ptr) #0 !dbg !8738 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_rtx_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.rtx_def**, align 8
  store %struct.VEC_rtx_base* %vec_, %struct.VEC_rtx_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_base** %vec_.addr, metadata !8743, metadata !DIExpression()), !dbg !8744
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !8745, metadata !DIExpression()), !dbg !8744
  store %struct.rtx_def** %ptr, %struct.rtx_def*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %ptr.addr, metadata !8746, metadata !DIExpression()), !dbg !8744
  %0 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !8747
  %tobool = icmp ne %struct.VEC_rtx_base* %0, null, !dbg !8747
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !8747

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !8747
  %2 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !8747
  %num = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %2, i32 0, i32 0, !dbg !8747
  %3 = load i32, i32* %num, align 8, !dbg !8747
  %cmp = icmp ult i32 %1, %3, !dbg !8747
  br i1 %cmp, label %if.then, label %if.else, !dbg !8744

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !8749
  %vec = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %4, i32 0, i32 2, !dbg !8749
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !8749
  %idxprom = zext i32 %5 to i64, !dbg !8749
  %arrayidx = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %vec, i64 0, i64 %idxprom, !dbg !8749
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8, !dbg !8749
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %ptr.addr, align 8, !dbg !8749
  store %struct.rtx_def* %6, %struct.rtx_def** %7, align 8, !dbg !8749
  store i32 1, i32* %retval, align 4, !dbg !8749
  br label %return, !dbg !8749

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %ptr.addr, align 8, !dbg !8751
  store %struct.rtx_def* null, %struct.rtx_def** %8, align 8, !dbg !8751
  store i32 0, i32* %retval, align 4, !dbg !8751
  br label %return, !dbg !8751

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !8744
  ret i32 %9, !dbg !8744
}

; Function Attrs: noinline nounwind uwtable
define internal void @init_insn(%struct.rtx_def* %insn) #0 !dbg !8753 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !8754, metadata !DIExpression()), !dbg !8755
  %0 = load %struct.sched_scan_info_def*, %struct.sched_scan_info_def** @sched_scan_info, align 8, !dbg !8756
  %init_insn = getelementptr inbounds %struct.sched_scan_info_def, %struct.sched_scan_info_def* %0, i32 0, i32 3, !dbg !8758
  %1 = load void (%struct.rtx_def*)*, void (%struct.rtx_def*)** %init_insn, align 8, !dbg !8758
  %tobool = icmp ne void (%struct.rtx_def*)* %1, null, !dbg !8756
  br i1 %tobool, label %if.then, label %if.end, !dbg !8759

if.then:                                          ; preds = %entry
  %2 = load %struct.sched_scan_info_def*, %struct.sched_scan_info_def** @sched_scan_info, align 8, !dbg !8760
  %init_insn1 = getelementptr inbounds %struct.sched_scan_info_def, %struct.sched_scan_info_def* %2, i32 0, i32 3, !dbg !8761
  %3 = load void (%struct.rtx_def*)*, void (%struct.rtx_def*)** %init_insn1, align 8, !dbg !8761
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8762
  call void %3(%struct.rtx_def* %4), !dbg !8760
  br label %if.end, !dbg !8760

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !8763
}

; Function Attrs: noinline nounwind uwtable
define internal void @luids_extend_insn() #0 !dbg !8764 {
entry:
  %new_luids_max_uid = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %new_luids_max_uid, metadata !8765, metadata !DIExpression()), !dbg !8766
  %call = call i32 @get_max_uid(), !dbg !8767
  %add = add nsw i32 %call, 1, !dbg !8768
  store i32 %add, i32* %new_luids_max_uid, align 4, !dbg !8766
  %0 = load i32, i32* %new_luids_max_uid, align 4, !dbg !8769
  call void @VEC_int_heap_safe_grow_cleared(%struct.VEC_int_heap** @sched_luids, i32 %0), !dbg !8769
  ret void, !dbg !8770
}

; Function Attrs: noinline nounwind uwtable
define internal void @luids_init_insn(%struct.rtx_def* %insn) #0 !dbg !8771 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %luid = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !8772, metadata !DIExpression()), !dbg !8773
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8774, metadata !DIExpression()), !dbg !8775
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8776
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !8776
  %bf.load = load i32, i32* %1, align 8, !dbg !8776
  %bf.clear = and i32 %bf.load, 65535, !dbg !8776
  %cmp = icmp eq i32 %bf.clear, 8, !dbg !8776
  br i1 %cmp, label %cond.true, label %lor.lhs.false, !dbg !8776

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8776
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !8776
  %bf.load1 = load i32, i32* %3, align 8, !dbg !8776
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !8776
  %cmp3 = icmp eq i32 %bf.clear2, 7, !dbg !8776
  br i1 %cmp3, label %cond.true, label %lor.lhs.false4, !dbg !8776

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8776
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !8776
  %bf.load5 = load i32, i32* %5, align 8, !dbg !8776
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !8776
  %cmp7 = icmp eq i32 %bf.clear6, 9, !dbg !8776
  br i1 %cmp7, label %cond.true, label %lor.lhs.false8, !dbg !8776

lor.lhs.false8:                                   ; preds = %lor.lhs.false4
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8776
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !8776
  %bf.load9 = load i32, i32* %7, align 8, !dbg !8776
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !8776
  %cmp11 = icmp eq i32 %bf.clear10, 10, !dbg !8776
  br i1 %cmp11, label %cond.true, label %cond.false, !dbg !8776

cond.true:                                        ; preds = %lor.lhs.false8, %lor.lhs.false4, %lor.lhs.false, %entry
  br label %cond.end, !dbg !8776

cond.false:                                       ; preds = %lor.lhs.false8
  %8 = load %struct.common_sched_info_def*, %struct.common_sched_info_def** @common_sched_info, align 8, !dbg !8777
  %luid_for_non_insn = getelementptr inbounds %struct.common_sched_info_def, %struct.common_sched_info_def* %8, i32 0, i32 3, !dbg !8778
  %9 = load i32 (%struct.rtx_def*)*, i32 (%struct.rtx_def*)** %luid_for_non_insn, align 8, !dbg !8778
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8779
  %call = call i32 %9(%struct.rtx_def* %10), !dbg !8777
  br label %cond.end, !dbg !8776

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 1, %cond.true ], [ %call, %cond.false ], !dbg !8776
  store i32 %cond, i32* %i, align 4, !dbg !8775
  call void @llvm.dbg.declare(metadata i32* %luid, metadata !8780, metadata !DIExpression()), !dbg !8781
  %11 = load i32, i32* %i, align 4, !dbg !8782
  %cmp12 = icmp sge i32 %11, 0, !dbg !8784
  br i1 %cmp12, label %if.then, label %if.else, !dbg !8785

if.then:                                          ; preds = %cond.end
  %12 = load i32, i32* @sched_max_luid, align 4, !dbg !8786
  store i32 %12, i32* %luid, align 4, !dbg !8788
  %13 = load i32, i32* %i, align 4, !dbg !8789
  %14 = load i32, i32* @sched_max_luid, align 4, !dbg !8790
  %add = add nsw i32 %14, %13, !dbg !8790
  store i32 %add, i32* @sched_max_luid, align 4, !dbg !8790
  br label %if.end, !dbg !8791

if.else:                                          ; preds = %cond.end
  store i32 -1, i32* %luid, align 4, !dbg !8792
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %15 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !8793
  %tobool = icmp ne %struct.VEC_int_heap* %15, null, !dbg !8793
  br i1 %tobool, label %cond.true13, label %cond.false14, !dbg !8793

cond.true13:                                      ; preds = %if.end
  %16 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !8793
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %16, i32 0, i32 0, !dbg !8793
  br label %cond.end15, !dbg !8793

cond.false14:                                     ; preds = %if.end
  br label %cond.end15, !dbg !8793

cond.end15:                                       ; preds = %cond.false14, %cond.true13
  %cond16 = phi %struct.VEC_int_base* [ %base, %cond.true13 ], [ null, %cond.false14 ], !dbg !8793
  %17 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8793
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !8793
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8793
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !8793
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !8793
  %18 = load i32, i32* %rt_int, align 8, !dbg !8793
  %19 = load i32, i32* %luid, align 4, !dbg !8793
  %call17 = call i32 @VEC_int_base_replace(%struct.VEC_int_base* %cond16, i32 %18, i32 %19), !dbg !8793
  ret void, !dbg !8794
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_int_heap_free(%struct.VEC_int_heap** %vec_) #0 !dbg !8795 {
entry:
  %vec_.addr = alloca %struct.VEC_int_heap**, align 8
  store %struct.VEC_int_heap** %vec_, %struct.VEC_int_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap*** %vec_.addr, metadata !8799, metadata !DIExpression()), !dbg !8800
  %0 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !8801
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %0, align 8, !dbg !8801
  %tobool = icmp ne %struct.VEC_int_heap* %1, null, !dbg !8801
  br i1 %tobool, label %if.then, label %if.end, !dbg !8800

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !8801
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %2, align 8, !dbg !8801
  %4 = bitcast %struct.VEC_int_heap* %3 to i8*, !dbg !8801
  call void @free(i8* %4), !dbg !8801
  br label %if.end, !dbg !8801

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !8800
  store %struct.VEC_int_heap* null, %struct.VEC_int_heap** %5, align 8, !dbg !8800
  ret void, !dbg !8800
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @insn_luid(%struct.rtx_def* %insn) #0 !dbg !8803 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !8804, metadata !DIExpression()), !dbg !8805
  %0 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !8806
  %tobool = icmp ne %struct.VEC_int_heap* %0, null, !dbg !8806
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8806

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !8806
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %1, i32 0, i32 0, !dbg !8806
  br label %cond.end, !dbg !8806

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8806

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_int_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8806
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8806
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !8806
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8806
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !8806
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !8806
  %3 = load i32, i32* %rt_int, align 8, !dbg !8806
  %call = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond, i32 %3), !dbg !8806
  ret i32 %call, !dbg !8807
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_int_base_index(%struct.VEC_int_base* %vec_, i32 %ix_) #0 !dbg !8808 {
entry:
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !8813, metadata !DIExpression()), !dbg !8814
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !8815, metadata !DIExpression()), !dbg !8814
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !8814
  %tobool = icmp ne %struct.VEC_int_base* %0, null, !dbg !8814
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !8814

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !8814
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !8814
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 0, !dbg !8814
  %3 = load i32, i32* %num, align 4, !dbg !8814
  %cmp = icmp ult i32 %1, %3, !dbg !8814
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !8816
  %land.ext = zext i1 %4 to i32, !dbg !8814
  %5 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !8814
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %5, i32 0, i32 2, !dbg !8814
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !8814
  %idxprom = zext i32 %6 to i64, !dbg !8814
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !8814
  %7 = load i32, i32* %arrayidx, align 4, !dbg !8814
  ret i32 %7, !dbg !8814
}

; Function Attrs: noinline nounwind uwtable
define internal void @extend_h_i_d() #0 !dbg !8817 {
entry:
  %reserve = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %reserve, metadata !8818, metadata !DIExpression()), !dbg !8819
  %call = call i32 @get_max_uid(), !dbg !8820
  %add = add nsw i32 %call, 1, !dbg !8821
  %0 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !8822
  %tobool = icmp ne %struct.VEC_haifa_insn_data_def_heap* %0, null, !dbg !8822
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8822

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !8822
  %base = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %1, i32 0, i32 0, !dbg !8822
  br label %cond.end, !dbg !8822

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8822

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_haifa_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8822
  %call1 = call i32 @VEC_haifa_insn_data_def_base_length(%struct.VEC_haifa_insn_data_def_base* %cond), !dbg !8822
  %sub = sub i32 %add, %call1, !dbg !8823
  store i32 %sub, i32* %reserve, align 4, !dbg !8819
  %2 = load i32, i32* %reserve, align 4, !dbg !8824
  %cmp = icmp sgt i32 %2, 0, !dbg !8826
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !8827

land.lhs.true:                                    ; preds = %cond.end
  %3 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !8828
  %tobool2 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %3, null, !dbg !8828
  br i1 %tobool2, label %cond.true3, label %cond.false5, !dbg !8828

cond.true3:                                       ; preds = %land.lhs.true
  %4 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !8828
  %base4 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %4, i32 0, i32 0, !dbg !8828
  br label %cond.end6, !dbg !8828

cond.false5:                                      ; preds = %land.lhs.true
  br label %cond.end6, !dbg !8828

cond.end6:                                        ; preds = %cond.false5, %cond.true3
  %cond7 = phi %struct.VEC_haifa_insn_data_def_base* [ %base4, %cond.true3 ], [ null, %cond.false5 ], !dbg !8828
  %5 = load i32, i32* %reserve, align 4, !dbg !8828
  %call8 = call i32 @VEC_haifa_insn_data_def_base_space(%struct.VEC_haifa_insn_data_def_base* %cond7, i32 %5), !dbg !8828
  %tobool9 = icmp ne i32 %call8, 0, !dbg !8828
  br i1 %tobool9, label %if.end, label %if.then, !dbg !8829

if.then:                                          ; preds = %cond.end6
  %call10 = call i32 @get_max_uid(), !dbg !8830
  %mul = mul nsw i32 3, %call10, !dbg !8830
  %div = sdiv i32 %mul, 2, !dbg !8830
  call void @VEC_haifa_insn_data_def_heap_safe_grow_cleared(%struct.VEC_haifa_insn_data_def_heap** @h_i_d, i32 %div), !dbg !8830
  call void @sched_extend_target(), !dbg !8832
  br label %if.end, !dbg !8833

if.end:                                           ; preds = %if.then, %cond.end6, %cond.end
  ret void, !dbg !8834
}

; Function Attrs: noinline nounwind uwtable
define internal void @init_h_i_d(%struct.rtx_def* %insn) #0 !dbg !8835 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !8836, metadata !DIExpression()), !dbg !8837
  %0 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !8838
  %tobool = icmp ne %struct.VEC_int_heap* %0, null, !dbg !8838
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8838

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !8838
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %1, i32 0, i32 0, !dbg !8838
  br label %cond.end, !dbg !8838

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8838

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_int_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8838
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8838
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !8838
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8838
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !8838
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !8838
  %3 = load i32, i32* %rt_int, align 8, !dbg !8838
  %call = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond, i32 %3), !dbg !8838
  %cmp = icmp sgt i32 %call, 0, !dbg !8840
  br i1 %cmp, label %if.then, label %if.end, !dbg !8841

if.then:                                          ; preds = %cond.end
  %4 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !8842
  %tobool1 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %4, null, !dbg !8842
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !8842

cond.true2:                                       ; preds = %if.then
  %5 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !8842
  %base3 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %5, i32 0, i32 0, !dbg !8842
  br label %cond.end5, !dbg !8842

cond.false4:                                      ; preds = %if.then
  br label %cond.end5, !dbg !8842

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_haifa_insn_data_def_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !8842
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8842
  %u7 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !8842
  %fld8 = bitcast %union.u* %u7 to [1 x %union.rtunion_def]*, !dbg !8842
  %arrayidx9 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld8, i64 0, i64 0, !dbg !8842
  %rt_int10 = bitcast %union.rtunion_def* %arrayidx9 to i32*, !dbg !8842
  %7 = load i32, i32* %rt_int10, align 8, !dbg !8842
  %call11 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond6, i32 %7), !dbg !8842
  %cost = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call11, i32 0, i32 5, !dbg !8842
  store i16 -1, i16* %cost, align 4, !dbg !8844
  %8 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !8845
  %tobool12 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %8, null, !dbg !8845
  br i1 %tobool12, label %cond.true13, label %cond.false15, !dbg !8845

cond.true13:                                      ; preds = %cond.end5
  %9 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !8845
  %base14 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %9, i32 0, i32 0, !dbg !8845
  br label %cond.end16, !dbg !8845

cond.false15:                                     ; preds = %cond.end5
  br label %cond.end16, !dbg !8845

cond.end16:                                       ; preds = %cond.false15, %cond.true13
  %cond17 = phi %struct.VEC_haifa_insn_data_def_base* [ %base14, %cond.true13 ], [ null, %cond.false15 ], !dbg !8845
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8845
  %u18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !8845
  %fld19 = bitcast %union.u* %u18 to [1 x %union.rtunion_def]*, !dbg !8845
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i64 0, i64 0, !dbg !8845
  %rt_int21 = bitcast %union.rtunion_def* %arrayidx20 to i32*, !dbg !8845
  %11 = load i32, i32* %rt_int21, align 8, !dbg !8845
  %call22 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond17, i32 %11), !dbg !8845
  %queue_index = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call22, i32 0, i32 4, !dbg !8845
  store i32 -2, i32* %queue_index, align 8, !dbg !8846
  %12 = load i32, i32* @max_insn_queue_index, align 4, !dbg !8847
  %add = add nsw i32 %12, 1, !dbg !8847
  %sub = sub nsw i32 0, %add, !dbg !8847
  %13 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !8848
  %tobool23 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %13, null, !dbg !8848
  br i1 %tobool23, label %cond.true24, label %cond.false26, !dbg !8848

cond.true24:                                      ; preds = %cond.end16
  %14 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !8848
  %base25 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %14, i32 0, i32 0, !dbg !8848
  br label %cond.end27, !dbg !8848

cond.false26:                                     ; preds = %cond.end16
  br label %cond.end27, !dbg !8848

cond.end27:                                       ; preds = %cond.false26, %cond.true24
  %cond28 = phi %struct.VEC_haifa_insn_data_def_base* [ %base25, %cond.true24 ], [ null, %cond.false26 ], !dbg !8848
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8848
  %u29 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !8848
  %fld30 = bitcast %union.u* %u29 to [1 x %union.rtunion_def]*, !dbg !8848
  %arrayidx31 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld30, i64 0, i64 0, !dbg !8848
  %rt_int32 = bitcast %union.rtunion_def* %arrayidx31 to i32*, !dbg !8848
  %16 = load i32, i32* %rt_int32, align 8, !dbg !8848
  %call33 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond28, i32 %16), !dbg !8848
  %tick = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call33, i32 0, i32 2, !dbg !8848
  store i32 %sub, i32* %tick, align 8, !dbg !8849
  %17 = load i32, i32* @max_insn_queue_index, align 4, !dbg !8850
  %add34 = add nsw i32 %17, 1, !dbg !8850
  %sub35 = sub nsw i32 0, %add34, !dbg !8850
  %18 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !8851
  %tobool36 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %18, null, !dbg !8851
  br i1 %tobool36, label %cond.true37, label %cond.false39, !dbg !8851

cond.true37:                                      ; preds = %cond.end27
  %19 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !8851
  %base38 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %19, i32 0, i32 0, !dbg !8851
  br label %cond.end40, !dbg !8851

cond.false39:                                     ; preds = %cond.end27
  br label %cond.end40, !dbg !8851

cond.end40:                                       ; preds = %cond.false39, %cond.true37
  %cond41 = phi %struct.VEC_haifa_insn_data_def_base* [ %base38, %cond.true37 ], [ null, %cond.false39 ], !dbg !8851
  %20 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8851
  %u42 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1, !dbg !8851
  %fld43 = bitcast %union.u* %u42 to [1 x %union.rtunion_def]*, !dbg !8851
  %arrayidx44 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld43, i64 0, i64 0, !dbg !8851
  %rt_int45 = bitcast %union.rtunion_def* %arrayidx44 to i32*, !dbg !8851
  %21 = load i32, i32* %rt_int45, align 8, !dbg !8851
  %call46 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond41, i32 %21), !dbg !8851
  %inter_tick = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call46, i32 0, i32 3, !dbg !8851
  store i32 %sub35, i32* %inter_tick, align 4, !dbg !8852
  %22 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !8853
  %tobool47 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %22, null, !dbg !8853
  br i1 %tobool47, label %cond.true48, label %cond.false50, !dbg !8853

cond.true48:                                      ; preds = %cond.end40
  %23 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !8853
  %base49 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %23, i32 0, i32 0, !dbg !8853
  br label %cond.end51, !dbg !8853

cond.false50:                                     ; preds = %cond.end40
  br label %cond.end51, !dbg !8853

cond.end51:                                       ; preds = %cond.false50, %cond.true48
  %cond52 = phi %struct.VEC_haifa_insn_data_def_base* [ %base49, %cond.true48 ], [ null, %cond.false50 ], !dbg !8853
  %24 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8853
  %u53 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1, !dbg !8853
  %fld54 = bitcast %union.u* %u53 to [1 x %union.rtunion_def]*, !dbg !8853
  %arrayidx55 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld54, i64 0, i64 0, !dbg !8853
  %rt_int56 = bitcast %union.rtunion_def* %arrayidx55 to i32*, !dbg !8853
  %25 = load i32, i32* %rt_int56, align 8, !dbg !8853
  %call57 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond52, i32 %25), !dbg !8853
  %todo_spec = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call57, i32 0, i32 8, !dbg !8853
  store i32 134217728, i32* %todo_spec, align 8, !dbg !8854
  br label %if.end, !dbg !8855

if.end:                                           ; preds = %cond.end51, %cond.end
  ret void, !dbg !8856
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_haifa_insn_data_def_base_iterate(%struct.VEC_haifa_insn_data_def_base* %vec_, i32 %ix_, %struct._haifa_insn_data** %ptr) #0 !dbg !8857 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_haifa_insn_data_def_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct._haifa_insn_data**, align 8
  store %struct.VEC_haifa_insn_data_def_base* %vec_, %struct.VEC_haifa_insn_data_def_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_haifa_insn_data_def_base** %vec_.addr, metadata !8861, metadata !DIExpression()), !dbg !8862
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !8863, metadata !DIExpression()), !dbg !8862
  store %struct._haifa_insn_data** %ptr, %struct._haifa_insn_data*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._haifa_insn_data*** %ptr.addr, metadata !8864, metadata !DIExpression()), !dbg !8862
  %0 = load %struct.VEC_haifa_insn_data_def_base*, %struct.VEC_haifa_insn_data_def_base** %vec_.addr, align 8, !dbg !8865
  %tobool = icmp ne %struct.VEC_haifa_insn_data_def_base* %0, null, !dbg !8865
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !8865

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !8865
  %2 = load %struct.VEC_haifa_insn_data_def_base*, %struct.VEC_haifa_insn_data_def_base** %vec_.addr, align 8, !dbg !8865
  %num = getelementptr inbounds %struct.VEC_haifa_insn_data_def_base, %struct.VEC_haifa_insn_data_def_base* %2, i32 0, i32 0, !dbg !8865
  %3 = load i32, i32* %num, align 8, !dbg !8865
  %cmp = icmp ult i32 %1, %3, !dbg !8865
  br i1 %cmp, label %if.then, label %if.else, !dbg !8862

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_haifa_insn_data_def_base*, %struct.VEC_haifa_insn_data_def_base** %vec_.addr, align 8, !dbg !8867
  %vec = getelementptr inbounds %struct.VEC_haifa_insn_data_def_base, %struct.VEC_haifa_insn_data_def_base* %4, i32 0, i32 2, !dbg !8867
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !8867
  %idxprom = zext i32 %5 to i64, !dbg !8867
  %arrayidx = getelementptr inbounds [1 x %struct._haifa_insn_data], [1 x %struct._haifa_insn_data]* %vec, i64 0, i64 %idxprom, !dbg !8867
  %6 = load %struct._haifa_insn_data**, %struct._haifa_insn_data*** %ptr.addr, align 8, !dbg !8867
  store %struct._haifa_insn_data* %arrayidx, %struct._haifa_insn_data** %6, align 8, !dbg !8867
  store i32 1, i32* %retval, align 4, !dbg !8867
  br label %return, !dbg !8867

if.else:                                          ; preds = %land.lhs.true, %entry
  %7 = load %struct._haifa_insn_data**, %struct._haifa_insn_data*** %ptr.addr, align 8, !dbg !8869
  store %struct._haifa_insn_data* null, %struct._haifa_insn_data** %7, align 8, !dbg !8869
  store i32 0, i32* %retval, align 4, !dbg !8869
  br label %return, !dbg !8869

return:                                           ; preds = %if.else, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !8862
  ret i32 %8, !dbg !8862
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_haifa_insn_data_def_heap_free(%struct.VEC_haifa_insn_data_def_heap** %vec_) #0 !dbg !8871 {
entry:
  %vec_.addr = alloca %struct.VEC_haifa_insn_data_def_heap**, align 8
  store %struct.VEC_haifa_insn_data_def_heap** %vec_, %struct.VEC_haifa_insn_data_def_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_haifa_insn_data_def_heap*** %vec_.addr, metadata !8875, metadata !DIExpression()), !dbg !8876
  %0 = load %struct.VEC_haifa_insn_data_def_heap**, %struct.VEC_haifa_insn_data_def_heap*** %vec_.addr, align 8, !dbg !8877
  %1 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** %0, align 8, !dbg !8877
  %tobool = icmp ne %struct.VEC_haifa_insn_data_def_heap* %1, null, !dbg !8877
  br i1 %tobool, label %if.then, label %if.end, !dbg !8876

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_haifa_insn_data_def_heap**, %struct.VEC_haifa_insn_data_def_heap*** %vec_.addr, align 8, !dbg !8877
  %3 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** %2, align 8, !dbg !8877
  %4 = bitcast %struct.VEC_haifa_insn_data_def_heap* %3 to i8*, !dbg !8877
  call void @free(i8* %4), !dbg !8877
  br label %if.end, !dbg !8877

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_haifa_insn_data_def_heap**, %struct.VEC_haifa_insn_data_def_heap*** %vec_.addr, align 8, !dbg !8876
  store %struct.VEC_haifa_insn_data_def_heap* null, %struct.VEC_haifa_insn_data_def_heap** %5, align 8, !dbg !8876
  ret void, !dbg !8876
}

declare dso_local %struct.edge_def* @split_block(%struct.basic_block_def*, i8*) #2

declare dso_local %struct.basic_block_def* @create_empty_bb(%struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @sched_emit_insn(%struct.rtx_def* %pat) #0 !dbg !8879 {
entry:
  %pat.addr = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %pat, %struct.rtx_def** %pat.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pat.addr, metadata !8882, metadata !DIExpression()), !dbg !8883
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !8884, metadata !DIExpression()), !dbg !8885
  %0 = load %struct.rtx_def*, %struct.rtx_def** %pat.addr, align 8, !dbg !8886
  %1 = load %struct.rtx_def*, %struct.rtx_def** @last_scheduled_insn, align 8, !dbg !8887
  %call = call %struct.rtx_def* @emit_insn_after(%struct.rtx_def* %0, %struct.rtx_def* %1), !dbg !8888
  store %struct.rtx_def* %call, %struct.rtx_def** %insn, align 8, !dbg !8885
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8889
  store %struct.rtx_def* %2, %struct.rtx_def** @last_scheduled_insn, align 8, !dbg !8890
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8891
  call void @haifa_init_insn(%struct.rtx_def* %3), !dbg !8892
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8893
  ret %struct.rtx_def* %4, !dbg !8894
}

declare dso_local %struct.rtx_def* @emit_insn_after(%struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @haifa_init_insn(%struct.rtx_def* %insn) #0 !dbg !8895 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !8896, metadata !DIExpression()), !dbg !8897
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8898
  %cmp = icmp ne %struct.rtx_def* %0, null, !dbg !8898
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !8898

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 5495, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !8898
  br label %cond.end, !dbg !8898

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8898

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8898
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8899
  call void @sched_init_luids(%struct.VEC_basic_block_heap* null, %struct.basic_block_def* null, %struct.VEC_rtx_heap* null, %struct.rtx_def* %1), !dbg !8900
  call void @sched_extend_target(), !dbg !8901
  call void @sched_deps_init(i8 zeroext 0), !dbg !8902
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8903
  call void @haifa_init_h_i_d(%struct.VEC_basic_block_heap* null, %struct.basic_block_def* null, %struct.VEC_rtx_heap* null, %struct.rtx_def* %2), !dbg !8904
  %3 = load i8, i8* @adding_bb_to_current_region_p, align 1, !dbg !8905
  %tobool = icmp ne i8 %3, 0, !dbg !8905
  br i1 %tobool, label %if.then, label %if.end, !dbg !8907

if.then:                                          ; preds = %cond.end
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8908
  call void @sd_init_insn(%struct.rtx_def* %4), !dbg !8910
  call void @extend_dependency_caches(i32 1, i8 zeroext 0), !dbg !8911
  br label %if.end, !dbg !8912

if.end:                                           ; preds = %if.then, %cond.end
  ret void, !dbg !8913
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @may_trap_exp(%struct.rtx_def* %x, i32 %is_store) #0 !dbg !8914 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def*, align 8
  %is_store.addr = alloca i32, align 4
  %code = alloca i32, align 4
  %fmt = alloca i8*, align 8
  %i = alloca i32, align 4
  %insn_class = alloca i32, align 4
  %tmp_class = alloca i32, align 4
  %j = alloca i32, align 4
  %tmp_class112 = alloca i32, align 4
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !8917, metadata !DIExpression()), !dbg !8918
  store i32 %is_store, i32* %is_store.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %is_store.addr, metadata !8919, metadata !DIExpression()), !dbg !8920
  call void @llvm.dbg.declare(metadata i32* %code, metadata !8921, metadata !DIExpression()), !dbg !8922
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8923
  %cmp = icmp eq %struct.rtx_def* %0, null, !dbg !8925
  br i1 %cmp, label %if.then, label %if.end, !dbg !8926

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !8927
  br label %return, !dbg !8927

if.end:                                           ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8928
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !8928
  %bf.load = load i32, i32* %2, align 8, !dbg !8928
  %bf.clear = and i32 %bf.load, 65535, !dbg !8928
  store i32 %bf.clear, i32* %code, align 4, !dbg !8929
  %3 = load i32, i32* %is_store.addr, align 4, !dbg !8930
  %tobool = icmp ne i32 %3, 0, !dbg !8930
  br i1 %tobool, label %if.then1, label %if.end5, !dbg !8932

if.then1:                                         ; preds = %if.end
  %4 = load i32, i32* %code, align 4, !dbg !8933
  %cmp2 = icmp eq i32 %4, 43, !dbg !8936
  br i1 %cmp2, label %land.lhs.true, label %if.else, !dbg !8937

land.lhs.true:                                    ; preds = %if.then1
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8938
  %call = call i32 @may_trap_p(%struct.rtx_def* %5), !dbg !8939
  %tobool3 = icmp ne i32 %call, 0, !dbg !8939
  br i1 %tobool3, label %if.then4, label %if.else, !dbg !8940

if.then4:                                         ; preds = %land.lhs.true
  store i32 5, i32* %retval, align 4, !dbg !8941
  br label %return, !dbg !8941

if.else:                                          ; preds = %land.lhs.true, %if.then1
  store i32 0, i32* %retval, align 4, !dbg !8942
  br label %return, !dbg !8942

if.end5:                                          ; preds = %if.end
  %6 = load i32, i32* %code, align 4, !dbg !8943
  %cmp6 = icmp eq i32 %6, 43, !dbg !8945
  br i1 %cmp6, label %if.then7, label %if.else72, !dbg !8946

if.then7:                                         ; preds = %if.end5
  %7 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8947
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !8947
  %bf.load8 = load i32, i32* %8, align 8, !dbg !8947
  %bf.lshr = lshr i32 %bf.load8, 27, !dbg !8947
  %bf.clear9 = and i32 %bf.lshr, 1, !dbg !8947
  %tobool10 = icmp ne i32 %bf.clear9, 0, !dbg !8947
  br i1 %tobool10, label %if.then11, label %if.end12, !dbg !8950

if.then11:                                        ; preds = %if.then7
  store i32 4, i32* %retval, align 4, !dbg !8951
  br label %return, !dbg !8951

if.end12:                                         ; preds = %if.then7
  %9 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8952
  %call13 = call i32 @may_trap_p(%struct.rtx_def* %9), !dbg !8954
  %tobool14 = icmp ne i32 %call13, 0, !dbg !8954
  br i1 %tobool14, label %if.end16, label %if.then15, !dbg !8955

if.then15:                                        ; preds = %if.end12
  store i32 1, i32* %retval, align 4, !dbg !8956
  br label %return, !dbg !8956

if.end16:                                         ; preds = %if.end12
  %10 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8957
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !8957
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8957
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !8957
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !8957
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !8957
  %12 = bitcast %struct.rtx_def* %11 to i32*, !dbg !8957
  %bf.load17 = load i32, i32* %12, align 8, !dbg !8957
  %bf.clear18 = and i32 %bf.load17, 65535, !dbg !8957
  %cmp19 = icmp eq i32 %bf.clear18, 37, !dbg !8957
  br i1 %cmp19, label %if.then70, label %lor.lhs.false, !dbg !8957

lor.lhs.false:                                    ; preds = %if.end16
  %13 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8957
  %u20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !8957
  %fld21 = bitcast %union.u* %u20 to [1 x %union.rtunion_def]*, !dbg !8957
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i64 0, i64 0, !dbg !8957
  %rt_rtx23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtx_def**, !dbg !8957
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx23, align 8, !dbg !8957
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !8957
  %bf.load24 = load i32, i32* %15, align 8, !dbg !8957
  %bf.clear25 = and i32 %bf.load24, 65535, !dbg !8957
  %cmp26 = icmp eq i32 %bf.clear25, 49, !dbg !8957
  br i1 %cmp26, label %land.lhs.true43, label %lor.lhs.false27, !dbg !8957

lor.lhs.false27:                                  ; preds = %lor.lhs.false
  %16 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8957
  %u28 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !8957
  %fld29 = bitcast %union.u* %u28 to [1 x %union.rtunion_def]*, !dbg !8957
  %arrayidx30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld29, i64 0, i64 0, !dbg !8957
  %rt_rtx31 = bitcast %union.rtunion_def* %arrayidx30 to %struct.rtx_def**, !dbg !8957
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx31, align 8, !dbg !8957
  %18 = bitcast %struct.rtx_def* %17 to i32*, !dbg !8957
  %bf.load32 = load i32, i32* %18, align 8, !dbg !8957
  %bf.clear33 = and i32 %bf.load32, 65535, !dbg !8957
  %cmp34 = icmp eq i32 %bf.clear33, 50, !dbg !8957
  br i1 %cmp34, label %land.lhs.true43, label %lor.lhs.false35, !dbg !8957

lor.lhs.false35:                                  ; preds = %lor.lhs.false27
  %19 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8957
  %u36 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !8957
  %fld37 = bitcast %union.u* %u36 to [1 x %union.rtunion_def]*, !dbg !8957
  %arrayidx38 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld37, i64 0, i64 0, !dbg !8957
  %rt_rtx39 = bitcast %union.rtunion_def* %arrayidx38 to %struct.rtx_def**, !dbg !8957
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx39, align 8, !dbg !8957
  %21 = bitcast %struct.rtx_def* %20 to i32*, !dbg !8957
  %bf.load40 = load i32, i32* %21, align 8, !dbg !8957
  %bf.clear41 = and i32 %bf.load40, 65535, !dbg !8957
  %cmp42 = icmp eq i32 %bf.clear41, 122, !dbg !8957
  br i1 %cmp42, label %land.lhs.true43, label %if.end71, !dbg !8957

land.lhs.true43:                                  ; preds = %lor.lhs.false35, %lor.lhs.false27, %lor.lhs.false
  %22 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8957
  %u44 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !8957
  %fld45 = bitcast %union.u* %u44 to [1 x %union.rtunion_def]*, !dbg !8957
  %arrayidx46 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld45, i64 0, i64 0, !dbg !8957
  %rt_rtx47 = bitcast %union.rtunion_def* %arrayidx46 to %struct.rtx_def**, !dbg !8957
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx47, align 8, !dbg !8957
  %u48 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1, !dbg !8957
  %fld49 = bitcast %union.u* %u48 to [1 x %union.rtunion_def]*, !dbg !8957
  %arrayidx50 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld49, i64 0, i64 0, !dbg !8957
  %rt_rtx51 = bitcast %union.rtunion_def* %arrayidx50 to %struct.rtx_def**, !dbg !8957
  %24 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx51, align 8, !dbg !8957
  %25 = bitcast %struct.rtx_def* %24 to i32*, !dbg !8957
  %bf.load52 = load i32, i32* %25, align 8, !dbg !8957
  %bf.clear53 = and i32 %bf.load52, 65535, !dbg !8957
  %idxprom = sext i32 %bf.clear53 to i64, !dbg !8957
  %arrayidx54 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom, !dbg !8957
  %26 = load i32, i32* %arrayidx54, align 4, !dbg !8957
  %cmp55 = icmp eq i32 %26, 9, !dbg !8957
  br i1 %cmp55, label %if.then70, label %lor.lhs.false56, !dbg !8957

lor.lhs.false56:                                  ; preds = %land.lhs.true43
  %27 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8957
  %u57 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1, !dbg !8957
  %fld58 = bitcast %union.u* %u57 to [1 x %union.rtunion_def]*, !dbg !8957
  %arrayidx59 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld58, i64 0, i64 0, !dbg !8957
  %rt_rtx60 = bitcast %union.rtunion_def* %arrayidx59 to %struct.rtx_def**, !dbg !8957
  %28 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx60, align 8, !dbg !8957
  %u61 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1, !dbg !8957
  %fld62 = bitcast %union.u* %u61 to [1 x %union.rtunion_def]*, !dbg !8957
  %arrayidx63 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld62, i64 0, i64 1, !dbg !8957
  %rt_rtx64 = bitcast %union.rtunion_def* %arrayidx63 to %struct.rtx_def**, !dbg !8957
  %29 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx64, align 8, !dbg !8957
  %30 = bitcast %struct.rtx_def* %29 to i32*, !dbg !8957
  %bf.load65 = load i32, i32* %30, align 8, !dbg !8957
  %bf.clear66 = and i32 %bf.load65, 65535, !dbg !8957
  %idxprom67 = sext i32 %bf.clear66 to i64, !dbg !8957
  %arrayidx68 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom67, !dbg !8957
  %31 = load i32, i32* %arrayidx68, align 4, !dbg !8957
  %cmp69 = icmp eq i32 %31, 9, !dbg !8957
  br i1 %cmp69, label %if.then70, label %if.end71, !dbg !8959

if.then70:                                        ; preds = %lor.lhs.false56, %land.lhs.true43, %if.end16
  store i32 2, i32* %retval, align 4, !dbg !8960
  br label %return, !dbg !8960

if.end71:                                         ; preds = %lor.lhs.false56, %lor.lhs.false35
  store i32 3, i32* %retval, align 4, !dbg !8961
  br label %return, !dbg !8961

if.else72:                                        ; preds = %if.end5
  call void @llvm.dbg.declare(metadata i8** %fmt, metadata !8962, metadata !DIExpression()), !dbg !8964
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8965, metadata !DIExpression()), !dbg !8966
  call void @llvm.dbg.declare(metadata i32* %insn_class, metadata !8967, metadata !DIExpression()), !dbg !8968
  store i32 0, i32* %insn_class, align 4, !dbg !8968
  %32 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8969
  %call73 = call i32 @may_trap_p(%struct.rtx_def* %32), !dbg !8971
  %tobool74 = icmp ne i32 %call73, 0, !dbg !8971
  br i1 %tobool74, label %if.then75, label %if.end76, !dbg !8972

if.then75:                                        ; preds = %if.else72
  store i32 5, i32* %retval, align 4, !dbg !8973
  br label %return, !dbg !8973

if.end76:                                         ; preds = %if.else72
  %33 = load i32, i32* %code, align 4, !dbg !8974
  %idxprom77 = sext i32 %33 to i64, !dbg !8974
  %arrayidx78 = getelementptr inbounds [139 x i8*], [139 x i8*]* @rtx_format, i64 0, i64 %idxprom77, !dbg !8974
  %34 = load i8*, i8** %arrayidx78, align 8, !dbg !8974
  store i8* %34, i8** %fmt, align 8, !dbg !8975
  %35 = load i32, i32* %code, align 4, !dbg !8976
  %idxprom79 = sext i32 %35 to i64, !dbg !8976
  %arrayidx80 = getelementptr inbounds [139 x i8], [139 x i8]* @rtx_length, i64 0, i64 %idxprom79, !dbg !8976
  %36 = load i8, i8* %arrayidx80, align 1, !dbg !8976
  %conv = zext i8 %36 to i32, !dbg !8976
  %sub = sub nsw i32 %conv, 1, !dbg !8978
  store i32 %sub, i32* %i, align 4, !dbg !8979
  br label %for.cond, !dbg !8980

for.cond:                                         ; preds = %for.inc143, %if.end76
  %37 = load i32, i32* %i, align 4, !dbg !8981
  %cmp81 = icmp sge i32 %37, 0, !dbg !8983
  br i1 %cmp81, label %for.body, label %for.end144, !dbg !8984

for.body:                                         ; preds = %for.cond
  %38 = load i8*, i8** %fmt, align 8, !dbg !8985
  %39 = load i32, i32* %i, align 4, !dbg !8988
  %idxprom83 = sext i32 %39 to i64, !dbg !8985
  %arrayidx84 = getelementptr inbounds i8, i8* %38, i64 %idxprom83, !dbg !8985
  %40 = load i8, i8* %arrayidx84, align 1, !dbg !8985
  %conv85 = sext i8 %40 to i32, !dbg !8985
  %cmp86 = icmp eq i32 %conv85, 101, !dbg !8989
  br i1 %cmp86, label %if.then88, label %if.else97, !dbg !8990

if.then88:                                        ; preds = %for.body
  call void @llvm.dbg.declare(metadata i32* %tmp_class, metadata !8991, metadata !DIExpression()), !dbg !8993
  %41 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8994
  %u89 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1, !dbg !8994
  %fld90 = bitcast %union.u* %u89 to [1 x %union.rtunion_def]*, !dbg !8994
  %42 = load i32, i32* %i, align 4, !dbg !8994
  %idxprom91 = sext i32 %42 to i64, !dbg !8994
  %arrayidx92 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld90, i64 0, i64 %idxprom91, !dbg !8994
  %rt_rtx93 = bitcast %union.rtunion_def* %arrayidx92 to %struct.rtx_def**, !dbg !8994
  %43 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx93, align 8, !dbg !8994
  %44 = load i32, i32* %is_store.addr, align 4, !dbg !8995
  %call94 = call i32 @may_trap_exp(%struct.rtx_def* %43, i32 %44), !dbg !8996
  store i32 %call94, i32* %tmp_class, align 4, !dbg !8993
  %45 = load i32, i32* %insn_class, align 4, !dbg !8997
  %46 = load i32, i32* %tmp_class, align 4, !dbg !8997
  %cmp95 = icmp sgt i32 %45, %46, !dbg !8997
  br i1 %cmp95, label %cond.true, label %cond.false, !dbg !8997

cond.true:                                        ; preds = %if.then88
  %47 = load i32, i32* %insn_class, align 4, !dbg !8997
  br label %cond.end, !dbg !8997

cond.false:                                       ; preds = %if.then88
  %48 = load i32, i32* %tmp_class, align 4, !dbg !8997
  br label %cond.end, !dbg !8997

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %47, %cond.true ], [ %48, %cond.false ], !dbg !8997
  store i32 %cond, i32* %insn_class, align 4, !dbg !8998
  br label %if.end135, !dbg !8999

if.else97:                                        ; preds = %for.body
  %49 = load i8*, i8** %fmt, align 8, !dbg !9000
  %50 = load i32, i32* %i, align 4, !dbg !9002
  %idxprom98 = sext i32 %50 to i64, !dbg !9000
  %arrayidx99 = getelementptr inbounds i8, i8* %49, i64 %idxprom98, !dbg !9000
  %51 = load i8, i8* %arrayidx99, align 1, !dbg !9000
  %conv100 = sext i8 %51 to i32, !dbg !9000
  %cmp101 = icmp eq i32 %conv100, 69, !dbg !9003
  br i1 %cmp101, label %if.then103, label %if.end134, !dbg !9004

if.then103:                                       ; preds = %if.else97
  call void @llvm.dbg.declare(metadata i32* %j, metadata !9005, metadata !DIExpression()), !dbg !9007
  store i32 0, i32* %j, align 4, !dbg !9008
  br label %for.cond104, !dbg !9010

for.cond104:                                      ; preds = %for.inc, %if.then103
  %52 = load i32, i32* %j, align 4, !dbg !9011
  %53 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9013
  %u105 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %53, i32 0, i32 1, !dbg !9013
  %fld106 = bitcast %union.u* %u105 to [1 x %union.rtunion_def]*, !dbg !9013
  %54 = load i32, i32* %i, align 4, !dbg !9013
  %idxprom107 = sext i32 %54 to i64, !dbg !9013
  %arrayidx108 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld106, i64 0, i64 %idxprom107, !dbg !9013
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx108 to %struct.rtvec_def**, !dbg !9013
  %55 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !9013
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %55, i32 0, i32 0, !dbg !9013
  %56 = load i32, i32* %num_elem, align 8, !dbg !9013
  %cmp109 = icmp slt i32 %52, %56, !dbg !9014
  br i1 %cmp109, label %for.body111, label %for.end, !dbg !9015

for.body111:                                      ; preds = %for.cond104
  call void @llvm.dbg.declare(metadata i32* %tmp_class112, metadata !9016, metadata !DIExpression()), !dbg !9018
  %57 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9019
  %u113 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %57, i32 0, i32 1, !dbg !9019
  %fld114 = bitcast %union.u* %u113 to [1 x %union.rtunion_def]*, !dbg !9019
  %58 = load i32, i32* %i, align 4, !dbg !9019
  %idxprom115 = sext i32 %58 to i64, !dbg !9019
  %arrayidx116 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld114, i64 0, i64 %idxprom115, !dbg !9019
  %rt_rtvec117 = bitcast %union.rtunion_def* %arrayidx116 to %struct.rtvec_def**, !dbg !9019
  %59 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec117, align 8, !dbg !9019
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %59, i32 0, i32 1, !dbg !9019
  %60 = load i32, i32* %j, align 4, !dbg !9019
  %idxprom118 = sext i32 %60 to i64, !dbg !9019
  %arrayidx119 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom118, !dbg !9019
  %61 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx119, align 8, !dbg !9019
  %62 = load i32, i32* %is_store.addr, align 4, !dbg !9020
  %call120 = call i32 @may_trap_exp(%struct.rtx_def* %61, i32 %62), !dbg !9021
  store i32 %call120, i32* %tmp_class112, align 4, !dbg !9018
  %63 = load i32, i32* %insn_class, align 4, !dbg !9022
  %64 = load i32, i32* %tmp_class112, align 4, !dbg !9022
  %cmp121 = icmp sgt i32 %63, %64, !dbg !9022
  br i1 %cmp121, label %cond.true123, label %cond.false124, !dbg !9022

cond.true123:                                     ; preds = %for.body111
  %65 = load i32, i32* %insn_class, align 4, !dbg !9022
  br label %cond.end125, !dbg !9022

cond.false124:                                    ; preds = %for.body111
  %66 = load i32, i32* %tmp_class112, align 4, !dbg !9022
  br label %cond.end125, !dbg !9022

cond.end125:                                      ; preds = %cond.false124, %cond.true123
  %cond126 = phi i32 [ %65, %cond.true123 ], [ %66, %cond.false124 ], !dbg !9022
  store i32 %cond126, i32* %insn_class, align 4, !dbg !9023
  %67 = load i32, i32* %insn_class, align 4, !dbg !9024
  %cmp127 = icmp eq i32 %67, 5, !dbg !9026
  br i1 %cmp127, label %if.then132, label %lor.lhs.false129, !dbg !9027

lor.lhs.false129:                                 ; preds = %cond.end125
  %68 = load i32, i32* %insn_class, align 4, !dbg !9028
  %cmp130 = icmp eq i32 %68, 4, !dbg !9029
  br i1 %cmp130, label %if.then132, label %if.end133, !dbg !9030

if.then132:                                       ; preds = %lor.lhs.false129, %cond.end125
  br label %for.end, !dbg !9031

if.end133:                                        ; preds = %lor.lhs.false129
  br label %for.inc, !dbg !9032

for.inc:                                          ; preds = %if.end133
  %69 = load i32, i32* %j, align 4, !dbg !9033
  %inc = add nsw i32 %69, 1, !dbg !9033
  store i32 %inc, i32* %j, align 4, !dbg !9033
  br label %for.cond104, !dbg !9034, !llvm.loop !9035

for.end:                                          ; preds = %if.then132, %for.cond104
  br label %if.end134, !dbg !9037

if.end134:                                        ; preds = %for.end, %if.else97
  br label %if.end135

if.end135:                                        ; preds = %if.end134, %cond.end
  %70 = load i32, i32* %insn_class, align 4, !dbg !9038
  %cmp136 = icmp eq i32 %70, 5, !dbg !9040
  br i1 %cmp136, label %if.then141, label %lor.lhs.false138, !dbg !9041

lor.lhs.false138:                                 ; preds = %if.end135
  %71 = load i32, i32* %insn_class, align 4, !dbg !9042
  %cmp139 = icmp eq i32 %71, 4, !dbg !9043
  br i1 %cmp139, label %if.then141, label %if.end142, !dbg !9044

if.then141:                                       ; preds = %lor.lhs.false138, %if.end135
  br label %for.end144, !dbg !9045

if.end142:                                        ; preds = %lor.lhs.false138
  br label %for.inc143, !dbg !9046

for.inc143:                                       ; preds = %if.end142
  %72 = load i32, i32* %i, align 4, !dbg !9047
  %dec = add nsw i32 %72, -1, !dbg !9047
  store i32 %dec, i32* %i, align 4, !dbg !9047
  br label %for.cond, !dbg !9048, !llvm.loop !9049

for.end144:                                       ; preds = %if.then141, %for.cond
  %73 = load i32, i32* %insn_class, align 4, !dbg !9051
  store i32 %73, i32* %retval, align 4, !dbg !9052
  br label %return, !dbg !9052

return:                                           ; preds = %for.end144, %if.then75, %if.end71, %if.then70, %if.then15, %if.then11, %if.else, %if.then4, %if.then
  %74 = load i32, i32* %retval, align 4, !dbg !9053
  ret i32 %74, !dbg !9053
}

declare dso_local i32 @may_trap_p(%struct.rtx_def*) #2

declare dso_local i32 @recog(%struct.rtx_def*, %struct.rtx_def*, i32*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @dying_use_p(%struct.reg_use_data* %use) #0 !dbg !9054 {
entry:
  %retval = alloca i8, align 1
  %use.addr = alloca %struct.reg_use_data*, align 8
  %next = alloca %struct.reg_use_data*, align 8
  store %struct.reg_use_data* %use, %struct.reg_use_data** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.reg_use_data** %use.addr, metadata !9057, metadata !DIExpression()), !dbg !9058
  call void @llvm.dbg.declare(metadata %struct.reg_use_data** %next, metadata !9059, metadata !DIExpression()), !dbg !9060
  %0 = load %struct.reg_use_data*, %struct.reg_use_data** %use.addr, align 8, !dbg !9061
  %next_regno_use = getelementptr inbounds %struct.reg_use_data, %struct.reg_use_data* %0, i32 0, i32 2, !dbg !9063
  %1 = load %struct.reg_use_data*, %struct.reg_use_data** %next_regno_use, align 8, !dbg !9063
  store %struct.reg_use_data* %1, %struct.reg_use_data** %next, align 8, !dbg !9064
  br label %for.cond, !dbg !9065

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.reg_use_data*, %struct.reg_use_data** %next, align 8, !dbg !9066
  %3 = load %struct.reg_use_data*, %struct.reg_use_data** %use.addr, align 8, !dbg !9068
  %cmp = icmp ne %struct.reg_use_data* %2, %3, !dbg !9069
  br i1 %cmp, label %for.body, label %for.end, !dbg !9070

for.body:                                         ; preds = %for.cond
  %4 = load %struct.reg_use_data*, %struct.reg_use_data** %next, align 8, !dbg !9071
  %insn = getelementptr inbounds %struct.reg_use_data, %struct.reg_use_data* %4, i32 0, i32 1, !dbg !9071
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9071
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !9071
  %bf.load = load i32, i32* %6, align 8, !dbg !9071
  %bf.clear = and i32 %bf.load, 65535, !dbg !9071
  %cmp1 = icmp eq i32 %bf.clear, 8, !dbg !9071
  br i1 %cmp1, label %land.lhs.true, label %lor.lhs.false, !dbg !9071

lor.lhs.false:                                    ; preds = %for.body
  %7 = load %struct.reg_use_data*, %struct.reg_use_data** %next, align 8, !dbg !9071
  %insn2 = getelementptr inbounds %struct.reg_use_data, %struct.reg_use_data* %7, i32 0, i32 1, !dbg !9071
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn2, align 8, !dbg !9071
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !9071
  %bf.load3 = load i32, i32* %9, align 8, !dbg !9071
  %bf.clear4 = and i32 %bf.load3, 65535, !dbg !9071
  %cmp5 = icmp eq i32 %bf.clear4, 7, !dbg !9071
  br i1 %cmp5, label %land.lhs.true, label %lor.lhs.false6, !dbg !9071

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %10 = load %struct.reg_use_data*, %struct.reg_use_data** %next, align 8, !dbg !9071
  %insn7 = getelementptr inbounds %struct.reg_use_data, %struct.reg_use_data* %10, i32 0, i32 1, !dbg !9071
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn7, align 8, !dbg !9071
  %12 = bitcast %struct.rtx_def* %11 to i32*, !dbg !9071
  %bf.load8 = load i32, i32* %12, align 8, !dbg !9071
  %bf.clear9 = and i32 %bf.load8, 65535, !dbg !9071
  %cmp10 = icmp eq i32 %bf.clear9, 9, !dbg !9071
  br i1 %cmp10, label %land.lhs.true, label %lor.lhs.false11, !dbg !9071

lor.lhs.false11:                                  ; preds = %lor.lhs.false6
  %13 = load %struct.reg_use_data*, %struct.reg_use_data** %next, align 8, !dbg !9071
  %insn12 = getelementptr inbounds %struct.reg_use_data, %struct.reg_use_data* %13, i32 0, i32 1, !dbg !9071
  %14 = load %struct.rtx_def*, %struct.rtx_def** %insn12, align 8, !dbg !9071
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !9071
  %bf.load13 = load i32, i32* %15, align 8, !dbg !9071
  %bf.clear14 = and i32 %bf.load13, 65535, !dbg !9071
  %cmp15 = icmp eq i32 %bf.clear14, 10, !dbg !9071
  br i1 %cmp15, label %land.lhs.true, label %if.end, !dbg !9071

land.lhs.true:                                    ; preds = %lor.lhs.false11, %lor.lhs.false6, %lor.lhs.false, %for.body
  %16 = load %struct.reg_use_data*, %struct.reg_use_data** %next, align 8, !dbg !9071
  %insn16 = getelementptr inbounds %struct.reg_use_data, %struct.reg_use_data* %16, i32 0, i32 1, !dbg !9071
  %17 = load %struct.rtx_def*, %struct.rtx_def** %insn16, align 8, !dbg !9071
  %18 = bitcast %struct.rtx_def* %17 to i32*, !dbg !9071
  %bf.load17 = load i32, i32* %18, align 8, !dbg !9071
  %bf.clear18 = and i32 %bf.load17, 65535, !dbg !9071
  %cmp19 = icmp eq i32 %bf.clear18, 7, !dbg !9071
  br i1 %cmp19, label %if.end, label %land.lhs.true20, !dbg !9073

land.lhs.true20:                                  ; preds = %land.lhs.true
  %19 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !9074
  %tobool = icmp ne %struct.VEC_haifa_insn_data_def_heap* %19, null, !dbg !9074
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9074

cond.true:                                        ; preds = %land.lhs.true20
  %20 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !9074
  %base = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %20, i32 0, i32 0, !dbg !9074
  br label %cond.end, !dbg !9074

cond.false:                                       ; preds = %land.lhs.true20
  br label %cond.end, !dbg !9074

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_haifa_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9074
  %21 = load %struct.reg_use_data*, %struct.reg_use_data** %next, align 8, !dbg !9074
  %insn21 = getelementptr inbounds %struct.reg_use_data, %struct.reg_use_data* %21, i32 0, i32 1, !dbg !9074
  %22 = load %struct.rtx_def*, %struct.rtx_def** %insn21, align 8, !dbg !9074
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !9074
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !9074
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !9074
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !9074
  %23 = load i32, i32* %rt_int, align 8, !dbg !9074
  %call = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond, i32 %23), !dbg !9074
  %queue_index = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call, i32 0, i32 4, !dbg !9074
  %24 = load i32, i32* %queue_index, align 8, !dbg !9074
  %cmp22 = icmp ne i32 %24, -3, !dbg !9075
  br i1 %cmp22, label %if.then, label %if.end, !dbg !9076

if.then:                                          ; preds = %cond.end
  store i8 0, i8* %retval, align 1, !dbg !9077
  br label %return, !dbg !9077

if.end:                                           ; preds = %cond.end, %land.lhs.true, %lor.lhs.false11
  br label %for.inc, !dbg !9078

for.inc:                                          ; preds = %if.end
  %25 = load %struct.reg_use_data*, %struct.reg_use_data** %next, align 8, !dbg !9079
  %next_regno_use23 = getelementptr inbounds %struct.reg_use_data, %struct.reg_use_data* %25, i32 0, i32 2, !dbg !9080
  %26 = load %struct.reg_use_data*, %struct.reg_use_data** %next_regno_use23, align 8, !dbg !9080
  store %struct.reg_use_data* %26, %struct.reg_use_data** %next, align 8, !dbg !9081
  br label %for.cond, !dbg !9082, !llvm.loop !9083

for.end:                                          ; preds = %for.cond
  store i8 1, i8* %retval, align 1, !dbg !9085
  br label %return, !dbg !9085

return:                                           ; preds = %for.end, %if.then
  %27 = load i8, i8* %retval, align 1, !dbg !9086
  ret i8 %27, !dbg !9086
}

declare dso_local %struct._dep* @sd_find_dep_between(%struct.rtx_def*, %struct.rtx_def*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @dep_list_size(%struct.rtx_def* %insn) #0 !dbg !9087 {
entry:
  %retval = alloca i32, align 4
  %insn.addr = alloca %struct.rtx_def*, align 8
  %sd_it = alloca %struct._sd_iterator, align 8
  %dep = alloca %struct._dep*, align 8
  %dbgcount = alloca i32, align 4
  %nodbgcount = alloca i32, align 4
  %tmp = alloca %struct._sd_iterator, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !9088, metadata !DIExpression()), !dbg !9089
  call void @llvm.dbg.declare(metadata %struct._sd_iterator* %sd_it, metadata !9090, metadata !DIExpression()), !dbg !9091
  call void @llvm.dbg.declare(metadata %struct._dep** %dep, metadata !9092, metadata !DIExpression()), !dbg !9093
  call void @llvm.dbg.declare(metadata i32* %dbgcount, metadata !9094, metadata !DIExpression()), !dbg !9095
  store i32 0, i32* %dbgcount, align 4, !dbg !9095
  call void @llvm.dbg.declare(metadata i32* %nodbgcount, metadata !9096, metadata !DIExpression()), !dbg !9097
  store i32 0, i32* %nodbgcount, align 4, !dbg !9097
  %0 = load i32, i32* @flag_var_tracking_assignments, align 4, !dbg !9098
  %tobool = icmp ne i32 %0, 0, !dbg !9098
  br i1 %tobool, label %if.end, label %if.then, !dbg !9100

if.then:                                          ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !9101
  %call = call i32 @sd_lists_size(%struct.rtx_def* %1, i32 4), !dbg !9102
  store i32 %call, i32* %retval, align 4, !dbg !9103
  br label %return, !dbg !9103

if.end:                                           ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !9104
  call void @sd_iterator_start(%struct._sd_iterator* sret %tmp, %struct.rtx_def* %2, i32 4), !dbg !9104
  %3 = bitcast %struct._sd_iterator* %sd_it to i8*, !dbg !9104
  %4 = bitcast %struct._sd_iterator* %tmp to i8*, !dbg !9104
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 32, i1 false), !dbg !9104
  br label %for.cond, !dbg !9104

for.cond:                                         ; preds = %for.inc, %if.end
  %call1 = call zeroext i8 @sd_iterator_cond(%struct._sd_iterator* %sd_it, %struct._dep** %dep), !dbg !9106
  %tobool2 = icmp ne i8 %call1, 0, !dbg !9104
  br i1 %tobool2, label %for.body, label %for.end, !dbg !9104

for.body:                                         ; preds = %for.cond
  %5 = load %struct._dep*, %struct._dep** %dep, align 8, !dbg !9108
  %con = getelementptr inbounds %struct._dep, %struct._dep* %5, i32 0, i32 1, !dbg !9108
  %6 = load %struct.rtx_def*, %struct.rtx_def** %con, align 8, !dbg !9108
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !9108
  %bf.load = load i32, i32* %7, align 8, !dbg !9108
  %bf.clear = and i32 %bf.load, 65535, !dbg !9108
  %cmp = icmp eq i32 %bf.clear, 7, !dbg !9108
  br i1 %cmp, label %if.then3, label %if.else, !dbg !9111

if.then3:                                         ; preds = %for.body
  %8 = load i32, i32* %dbgcount, align 4, !dbg !9112
  %inc = add nsw i32 %8, 1, !dbg !9112
  store i32 %inc, i32* %dbgcount, align 4, !dbg !9112
  br label %if.end10, !dbg !9113

if.else:                                          ; preds = %for.body
  %9 = load %struct._dep*, %struct._dep** %dep, align 8, !dbg !9114
  %pro = getelementptr inbounds %struct._dep, %struct._dep* %9, i32 0, i32 0, !dbg !9114
  %10 = load %struct.rtx_def*, %struct.rtx_def** %pro, align 8, !dbg !9114
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !9114
  %bf.load4 = load i32, i32* %11, align 8, !dbg !9114
  %bf.clear5 = and i32 %bf.load4, 65535, !dbg !9114
  %cmp6 = icmp eq i32 %bf.clear5, 7, !dbg !9114
  br i1 %cmp6, label %if.end9, label %if.then7, !dbg !9116

if.then7:                                         ; preds = %if.else
  %12 = load i32, i32* %nodbgcount, align 4, !dbg !9117
  %inc8 = add nsw i32 %12, 1, !dbg !9117
  store i32 %inc8, i32* %nodbgcount, align 4, !dbg !9117
  br label %if.end9, !dbg !9118

if.end9:                                          ; preds = %if.then7, %if.else
  br label %if.end10

if.end10:                                         ; preds = %if.end9, %if.then3
  br label %for.inc, !dbg !9119

for.inc:                                          ; preds = %if.end10
  call void @sd_iterator_next(%struct._sd_iterator* %sd_it), !dbg !9106
  br label %for.cond, !dbg !9106, !llvm.loop !9120

for.end:                                          ; preds = %for.cond
  %13 = load i32, i32* %dbgcount, align 4, !dbg !9122
  %14 = load i32, i32* %nodbgcount, align 4, !dbg !9122
  %add = add nsw i32 %13, %14, !dbg !9122
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !9122
  %call11 = call i32 @sd_lists_size(%struct.rtx_def* %15, i32 4), !dbg !9122
  %cmp12 = icmp eq i32 %add, %call11, !dbg !9122
  br i1 %cmp12, label %cond.false, label %cond.true, !dbg !9122

cond.true:                                        ; preds = %for.end
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 997, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !9122
  br label %cond.end, !dbg !9122

cond.false:                                       ; preds = %for.end
  br label %cond.end, !dbg !9122

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9122
  %16 = load i32, i32* %nodbgcount, align 4, !dbg !9123
  store i32 %16, i32* %retval, align 4, !dbg !9124
  br label %return, !dbg !9124

return:                                           ; preds = %cond.end, %if.then
  %17 = load i32, i32* %retval, align 4, !dbg !9125
  ret i32 %17, !dbg !9125
}

declare dso_local i32 @sd_lists_size(%struct.rtx_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @setup_ref_regs(%struct.rtx_def* %x) #0 !dbg !9126 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %regno = alloca i32, align 4
  %code = alloca i32, align 4
  %fmt = alloca i8*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !9127, metadata !DIExpression()), !dbg !9128
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9129, metadata !DIExpression()), !dbg !9130
  call void @llvm.dbg.declare(metadata i32* %j, metadata !9131, metadata !DIExpression()), !dbg !9132
  call void @llvm.dbg.declare(metadata i32* %regno, metadata !9133, metadata !DIExpression()), !dbg !9134
  call void @llvm.dbg.declare(metadata i32* %code, metadata !9135, metadata !DIExpression()), !dbg !9137
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9138
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !9138
  %bf.load = load i32, i32* %1, align 8, !dbg !9138
  %bf.clear = and i32 %bf.load, 65535, !dbg !9138
  store i32 %bf.clear, i32* %code, align 4, !dbg !9137
  call void @llvm.dbg.declare(metadata i8** %fmt, metadata !9139, metadata !DIExpression()), !dbg !9140
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9141
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !9141
  %bf.load1 = load i32, i32* %3, align 8, !dbg !9141
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !9141
  %cmp = icmp eq i32 %bf.clear2, 37, !dbg !9141
  br i1 %cmp, label %if.then, label %if.end14, !dbg !9143

if.then:                                          ; preds = %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9144
  %call = call i32 @rhs_regno(%struct.rtx_def* %4), !dbg !9144
  store i32 %call, i32* %regno, align 4, !dbg !9146
  %5 = load i32, i32* %regno, align 4, !dbg !9147
  %cmp3 = icmp sge i32 %5, 53, !dbg !9149
  br i1 %cmp3, label %if.then4, label %if.else, !dbg !9150

if.then4:                                         ; preds = %if.then
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @region_ref_regs, align 8, !dbg !9151
  %7 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9152
  %call5 = call i32 @rhs_regno(%struct.rtx_def* %7), !dbg !9152
  %call6 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %6, i32 %call5), !dbg !9153
  br label %if.end, !dbg !9153

if.else:                                          ; preds = %if.then
  %8 = load i32, i32* %regno, align 4, !dbg !9154
  %idxprom = sext i32 %8 to i64, !dbg !9156
  %arrayidx = getelementptr inbounds [53 x [87 x i8]], [53 x [87 x i8]]* @hard_regno_nregs, i64 0, i64 %idxprom, !dbg !9156
  %9 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9157
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !9157
  %bf.load7 = load i32, i32* %10, align 8, !dbg !9157
  %bf.lshr = lshr i32 %bf.load7, 16, !dbg !9157
  %bf.clear8 = and i32 %bf.lshr, 255, !dbg !9157
  %idxprom9 = zext i32 %bf.clear8 to i64, !dbg !9156
  %arrayidx10 = getelementptr inbounds [87 x i8], [87 x i8]* %arrayidx, i64 0, i64 %idxprom9, !dbg !9156
  %11 = load i8, i8* %arrayidx10, align 1, !dbg !9156
  %conv = zext i8 %11 to i32, !dbg !9156
  %sub = sub nsw i32 %conv, 1, !dbg !9158
  store i32 %sub, i32* %i, align 4, !dbg !9159
  br label %for.cond, !dbg !9160

for.cond:                                         ; preds = %for.inc, %if.else
  %12 = load i32, i32* %i, align 4, !dbg !9161
  %cmp11 = icmp sge i32 %12, 0, !dbg !9163
  br i1 %cmp11, label %for.body, label %for.end, !dbg !9164

for.body:                                         ; preds = %for.cond
  %13 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @region_ref_regs, align 8, !dbg !9165
  %14 = load i32, i32* %regno, align 4, !dbg !9166
  %15 = load i32, i32* %i, align 4, !dbg !9167
  %add = add nsw i32 %14, %15, !dbg !9168
  %call13 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %13, i32 %add), !dbg !9169
  br label %for.inc, !dbg !9169

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4, !dbg !9170
  %dec = add nsw i32 %16, -1, !dbg !9170
  store i32 %dec, i32* %i, align 4, !dbg !9170
  br label %for.cond, !dbg !9171, !llvm.loop !9172

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %if.then4
  br label %for.end61, !dbg !9174

if.end14:                                         ; preds = %entry
  %17 = load i32, i32* %code, align 4, !dbg !9175
  %idxprom15 = sext i32 %17 to i64, !dbg !9175
  %arrayidx16 = getelementptr inbounds [139 x i8*], [139 x i8*]* @rtx_format, i64 0, i64 %idxprom15, !dbg !9175
  %18 = load i8*, i8** %arrayidx16, align 8, !dbg !9175
  store i8* %18, i8** %fmt, align 8, !dbg !9176
  %19 = load i32, i32* %code, align 4, !dbg !9177
  %idxprom17 = sext i32 %19 to i64, !dbg !9177
  %arrayidx18 = getelementptr inbounds [139 x i8], [139 x i8]* @rtx_length, i64 0, i64 %idxprom17, !dbg !9177
  %20 = load i8, i8* %arrayidx18, align 1, !dbg !9177
  %conv19 = zext i8 %20 to i32, !dbg !9177
  %sub20 = sub nsw i32 %conv19, 1, !dbg !9179
  store i32 %sub20, i32* %i, align 4, !dbg !9180
  br label %for.cond21, !dbg !9181

for.cond21:                                       ; preds = %for.inc59, %if.end14
  %21 = load i32, i32* %i, align 4, !dbg !9182
  %cmp22 = icmp sge i32 %21, 0, !dbg !9184
  br i1 %cmp22, label %for.body24, label %for.end61, !dbg !9185

for.body24:                                       ; preds = %for.cond21
  %22 = load i8*, i8** %fmt, align 8, !dbg !9186
  %23 = load i32, i32* %i, align 4, !dbg !9188
  %idxprom25 = sext i32 %23 to i64, !dbg !9186
  %arrayidx26 = getelementptr inbounds i8, i8* %22, i64 %idxprom25, !dbg !9186
  %24 = load i8, i8* %arrayidx26, align 1, !dbg !9186
  %conv27 = sext i8 %24 to i32, !dbg !9186
  %cmp28 = icmp eq i32 %conv27, 101, !dbg !9189
  br i1 %cmp28, label %if.then30, label %if.else33, !dbg !9190

if.then30:                                        ; preds = %for.body24
  %25 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9191
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1, !dbg !9191
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !9191
  %26 = load i32, i32* %i, align 4, !dbg !9191
  %idxprom31 = sext i32 %26 to i64, !dbg !9191
  %arrayidx32 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 %idxprom31, !dbg !9191
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx32 to %struct.rtx_def**, !dbg !9191
  %27 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !9191
  call void @setup_ref_regs(%struct.rtx_def* %27), !dbg !9192
  br label %if.end58, !dbg !9192

if.else33:                                        ; preds = %for.body24
  %28 = load i8*, i8** %fmt, align 8, !dbg !9193
  %29 = load i32, i32* %i, align 4, !dbg !9195
  %idxprom34 = sext i32 %29 to i64, !dbg !9193
  %arrayidx35 = getelementptr inbounds i8, i8* %28, i64 %idxprom34, !dbg !9193
  %30 = load i8, i8* %arrayidx35, align 1, !dbg !9193
  %conv36 = sext i8 %30 to i32, !dbg !9193
  %cmp37 = icmp eq i32 %conv36, 69, !dbg !9196
  br i1 %cmp37, label %if.then39, label %if.end57, !dbg !9197

if.then39:                                        ; preds = %if.else33
  store i32 0, i32* %j, align 4, !dbg !9198
  br label %for.cond40, !dbg !9201

for.cond40:                                       ; preds = %for.inc55, %if.then39
  %31 = load i32, i32* %j, align 4, !dbg !9202
  %32 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9204
  %u41 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1, !dbg !9204
  %fld42 = bitcast %union.u* %u41 to [1 x %union.rtunion_def]*, !dbg !9204
  %33 = load i32, i32* %i, align 4, !dbg !9204
  %idxprom43 = sext i32 %33 to i64, !dbg !9204
  %arrayidx44 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld42, i64 0, i64 %idxprom43, !dbg !9204
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx44 to %struct.rtvec_def**, !dbg !9204
  %34 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !9204
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %34, i32 0, i32 0, !dbg !9204
  %35 = load i32, i32* %num_elem, align 8, !dbg !9204
  %cmp45 = icmp slt i32 %31, %35, !dbg !9205
  br i1 %cmp45, label %for.body47, label %for.end56, !dbg !9206

for.body47:                                       ; preds = %for.cond40
  %36 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9207
  %u48 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1, !dbg !9207
  %fld49 = bitcast %union.u* %u48 to [1 x %union.rtunion_def]*, !dbg !9207
  %37 = load i32, i32* %i, align 4, !dbg !9207
  %idxprom50 = sext i32 %37 to i64, !dbg !9207
  %arrayidx51 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld49, i64 0, i64 %idxprom50, !dbg !9207
  %rt_rtvec52 = bitcast %union.rtunion_def* %arrayidx51 to %struct.rtvec_def**, !dbg !9207
  %38 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec52, align 8, !dbg !9207
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %38, i32 0, i32 1, !dbg !9207
  %39 = load i32, i32* %j, align 4, !dbg !9207
  %idxprom53 = sext i32 %39 to i64, !dbg !9207
  %arrayidx54 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom53, !dbg !9207
  %40 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx54, align 8, !dbg !9207
  call void @setup_ref_regs(%struct.rtx_def* %40), !dbg !9208
  br label %for.inc55, !dbg !9208

for.inc55:                                        ; preds = %for.body47
  %41 = load i32, i32* %j, align 4, !dbg !9209
  %inc = add nsw i32 %41, 1, !dbg !9209
  store i32 %inc, i32* %j, align 4, !dbg !9209
  br label %for.cond40, !dbg !9210, !llvm.loop !9211

for.end56:                                        ; preds = %for.cond40
  br label %if.end57, !dbg !9213

if.end57:                                         ; preds = %for.end56, %if.else33
  br label %if.end58

if.end58:                                         ; preds = %if.end57, %if.then30
  br label %for.inc59, !dbg !9214

for.inc59:                                        ; preds = %if.end58
  %42 = load i32, i32* %i, align 4, !dbg !9215
  %dec60 = add nsw i32 %42, -1, !dbg !9215
  store i32 %dec60, i32* %i, align 4, !dbg !9215
  br label %for.cond21, !dbg !9216, !llvm.loop !9217

for.end61:                                        ; preds = %if.end, %for.cond21
  ret void, !dbg !9219
}

; Function Attrs: noinline nounwind uwtable
define internal void @initiate_reg_pressure_info(%struct.bitmap_head_def* %live) #0 !dbg !9220 {
entry:
  %live.addr = alloca %struct.bitmap_head_def*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  store %struct.bitmap_head_def* %live, %struct.bitmap_head_def** %live.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %live.addr, metadata !9223, metadata !DIExpression()), !dbg !9224
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9225, metadata !DIExpression()), !dbg !9226
  call void @llvm.dbg.declare(metadata i32* %j, metadata !9227, metadata !DIExpression()), !dbg !9228
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !9229, metadata !DIExpression()), !dbg !9237
  store i32 0, i32* %i, align 4, !dbg !9238
  br label %for.cond, !dbg !9240

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !9241
  %1 = load i32, i32* @ira_reg_class_cover_size, align 4, !dbg !9243
  %cmp = icmp slt i32 %0, %1, !dbg !9244
  br i1 %cmp, label %for.body, label %for.end, !dbg !9245

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4, !dbg !9246
  %idxprom = sext i32 %2 to i64, !dbg !9247
  %arrayidx = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom, !dbg !9247
  %3 = load i32, i32* %arrayidx, align 4, !dbg !9247
  %idxprom1 = zext i32 %3 to i64, !dbg !9248
  %arrayidx2 = getelementptr inbounds [27 x i32], [27 x i32]* @curr_reg_pressure, i64 0, i64 %idxprom1, !dbg !9248
  store i32 0, i32* %arrayidx2, align 4, !dbg !9249
  br label %for.inc, !dbg !9248

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4, !dbg !9250
  %inc = add nsw i32 %4, 1, !dbg !9250
  store i32 %inc, i32* %i, align 4, !dbg !9250
  br label %for.cond, !dbg !9251, !llvm.loop !9252

for.end:                                          ; preds = %for.cond
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @curr_reg_live, align 8, !dbg !9254
  call void @bitmap_clear(%struct.bitmap_head_def* %5), !dbg !9255
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %live.addr, align 8, !dbg !9256
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %6, i32 0, i32* %j), !dbg !9256
  br label %for.cond3, !dbg !9256

for.cond3:                                        ; preds = %for.inc8, %for.end
  %call = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %j), !dbg !9258
  %tobool = icmp ne i8 %call, 0, !dbg !9256
  br i1 %tobool, label %for.body4, label %for.end9, !dbg !9256

for.body4:                                        ; preds = %for.cond3
  %7 = load i32, i32* @current_nr_blocks, align 4, !dbg !9260
  %cmp5 = icmp eq i32 %7, 1, !dbg !9262
  br i1 %cmp5, label %if.then, label %lor.lhs.false, !dbg !9263

lor.lhs.false:                                    ; preds = %for.body4
  %8 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @region_ref_regs, align 8, !dbg !9264
  %9 = load i32, i32* %j, align 4, !dbg !9265
  %call6 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %8, i32 %9), !dbg !9266
  %tobool7 = icmp ne i32 %call6, 0, !dbg !9266
  br i1 %tobool7, label %if.then, label %if.end, !dbg !9267

if.then:                                          ; preds = %lor.lhs.false, %for.body4
  %10 = load i32, i32* %j, align 4, !dbg !9268
  call void @mark_regno_birth_or_death(i32 %10, i8 zeroext 1), !dbg !9269
  br label %if.end, !dbg !9269

if.end:                                           ; preds = %if.then, %lor.lhs.false
  br label %for.inc8, !dbg !9270

for.inc8:                                         ; preds = %if.end
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %j), !dbg !9258
  br label %for.cond3, !dbg !9258, !llvm.loop !9271

for.end9:                                         ; preds = %for.cond3
  ret void, !dbg !9273
}

declare dso_local %struct.bitmap_head_def* @df_get_live_in(%struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @bb_has_eh_pred(%struct.basic_block_def* %bb) #0 !dbg !9274 {
entry:
  %retval = alloca i8, align 1
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !9277, metadata !DIExpression()), !dbg !9278
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !9279, metadata !DIExpression()), !dbg !9280
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !9281, metadata !DIExpression()), !dbg !9282
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9283
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 0, !dbg !9283
  %call = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !9283
  %1 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !9283
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, i32 0, i32 0, !dbg !9283
  %3 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !9283
  store i32 %3, i32* %2, align 8, !dbg !9283
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, i32 0, i32 1, !dbg !9283
  %5 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !9283
  store %struct.VEC_edge_gc** %5, %struct.VEC_edge_gc*** %4, align 8, !dbg !9283
  %6 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !9283
  %7 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !9283
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 16, i1 false), !dbg !9283
  br label %for.cond, !dbg !9283

for.cond:                                         ; preds = %for.inc, %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !9285
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !9285
  %10 = load i32, i32* %9, align 8, !dbg !9285
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !9285
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !9285
  %call1 = call zeroext i8 @ei_cond(i32 %10, %struct.VEC_edge_gc** %12, %struct.edge_def** %e), !dbg !9285
  %tobool = icmp ne i8 %call1, 0, !dbg !9283
  br i1 %tobool, label %for.body, label %for.end, !dbg !9283

for.body:                                         ; preds = %for.cond
  %13 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !9287
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %13, i32 0, i32 7, !dbg !9290
  %14 = load i32, i32* %flags, align 8, !dbg !9290
  %and = and i32 %14, 8, !dbg !9291
  %tobool2 = icmp ne i32 %and, 0, !dbg !9291
  br i1 %tobool2, label %if.then, label %if.end, !dbg !9292

if.then:                                          ; preds = %for.body
  store i8 1, i8* %retval, align 1, !dbg !9293
  br label %return, !dbg !9293

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !9294

for.inc:                                          ; preds = %if.end
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !9285
  br label %for.cond, !dbg !9285, !llvm.loop !9295

for.end:                                          ; preds = %for.cond
  store i8 0, i8* %retval, align 1, !dbg !9297
  br label %return, !dbg !9297

return:                                           ; preds = %for.end, %if.then
  %15 = load i8, i8* %retval, align 1, !dbg !9298
  ret i8 %15, !dbg !9298
}

declare dso_local i32 @bitmap_bit_p(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @mark_regno_birth_or_death(i32 %regno, i8 zeroext %birth_p) #0 !dbg !9299 {
entry:
  %regno.addr = alloca i32, align 4
  %birth_p.addr = alloca i8, align 1
  %cover_class = alloca i32, align 4
  store i32 %regno, i32* %regno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %regno.addr, metadata !9302, metadata !DIExpression()), !dbg !9303
  store i8 %birth_p, i8* %birth_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %birth_p.addr, metadata !9304, metadata !DIExpression()), !dbg !9305
  call void @llvm.dbg.declare(metadata i32* %cover_class, metadata !9306, metadata !DIExpression()), !dbg !9307
  %0 = load i32*, i32** @sched_regno_cover_class, align 8, !dbg !9308
  %1 = load i32, i32* %regno.addr, align 4, !dbg !9309
  %idxprom = sext i32 %1 to i64, !dbg !9308
  %arrayidx = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !9308
  %2 = load i32, i32* %arrayidx, align 4, !dbg !9308
  store i32 %2, i32* %cover_class, align 4, !dbg !9310
  %3 = load i32, i32* %regno.addr, align 4, !dbg !9311
  %cmp = icmp sge i32 %3, 53, !dbg !9313
  br i1 %cmp, label %if.then, label %if.else25, !dbg !9314

if.then:                                          ; preds = %entry
  %4 = load i32, i32* %cover_class, align 4, !dbg !9315
  %cmp1 = icmp ne i32 %4, 0, !dbg !9318
  br i1 %cmp1, label %if.then2, label %if.end24, !dbg !9319

if.then2:                                         ; preds = %if.then
  %5 = load i8, i8* %birth_p.addr, align 1, !dbg !9320
  %tobool = icmp ne i8 %5, 0, !dbg !9320
  br i1 %tobool, label %if.then3, label %if.else, !dbg !9323

if.then3:                                         ; preds = %if.then2
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @curr_reg_live, align 8, !dbg !9324
  %7 = load i32, i32* %regno.addr, align 4, !dbg !9326
  %call = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %6, i32 %7), !dbg !9327
  %8 = load i32, i32* %cover_class, align 4, !dbg !9328
  %idxprom4 = zext i32 %8 to i64, !dbg !9329
  %arrayidx5 = getelementptr inbounds [27 x [87 x i32]], [27 x [87 x i32]]* @ira_reg_class_nregs, i64 0, i64 %idxprom4, !dbg !9329
  %9 = load %struct.rtx_def**, %struct.rtx_def*** @regno_reg_rtx, align 8, !dbg !9330
  %10 = load i32, i32* %regno.addr, align 4, !dbg !9330
  %idxprom6 = sext i32 %10 to i64, !dbg !9330
  %arrayidx7 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %9, i64 %idxprom6, !dbg !9330
  %11 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8, !dbg !9330
  %12 = bitcast %struct.rtx_def* %11 to i32*, !dbg !9330
  %bf.load = load i32, i32* %12, align 8, !dbg !9330
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !9330
  %bf.clear = and i32 %bf.lshr, 255, !dbg !9330
  %idxprom8 = zext i32 %bf.clear to i64, !dbg !9329
  %arrayidx9 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx5, i64 0, i64 %idxprom8, !dbg !9329
  %13 = load i32, i32* %arrayidx9, align 4, !dbg !9329
  %14 = load i32, i32* %cover_class, align 4, !dbg !9331
  %idxprom10 = zext i32 %14 to i64, !dbg !9332
  %arrayidx11 = getelementptr inbounds [27 x i32], [27 x i32]* @curr_reg_pressure, i64 0, i64 %idxprom10, !dbg !9332
  %15 = load i32, i32* %arrayidx11, align 4, !dbg !9333
  %add = add nsw i32 %15, %13, !dbg !9333
  store i32 %add, i32* %arrayidx11, align 4, !dbg !9333
  br label %if.end, !dbg !9334

if.else:                                          ; preds = %if.then2
  %16 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @curr_reg_live, align 8, !dbg !9335
  %17 = load i32, i32* %regno.addr, align 4, !dbg !9337
  %call12 = call zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def* %16, i32 %17), !dbg !9338
  %18 = load i32, i32* %cover_class, align 4, !dbg !9339
  %idxprom13 = zext i32 %18 to i64, !dbg !9340
  %arrayidx14 = getelementptr inbounds [27 x [87 x i32]], [27 x [87 x i32]]* @ira_reg_class_nregs, i64 0, i64 %idxprom13, !dbg !9340
  %19 = load %struct.rtx_def**, %struct.rtx_def*** @regno_reg_rtx, align 8, !dbg !9341
  %20 = load i32, i32* %regno.addr, align 4, !dbg !9341
  %idxprom15 = sext i32 %20 to i64, !dbg !9341
  %arrayidx16 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %19, i64 %idxprom15, !dbg !9341
  %21 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx16, align 8, !dbg !9341
  %22 = bitcast %struct.rtx_def* %21 to i32*, !dbg !9341
  %bf.load17 = load i32, i32* %22, align 8, !dbg !9341
  %bf.lshr18 = lshr i32 %bf.load17, 16, !dbg !9341
  %bf.clear19 = and i32 %bf.lshr18, 255, !dbg !9341
  %idxprom20 = zext i32 %bf.clear19 to i64, !dbg !9340
  %arrayidx21 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx14, i64 0, i64 %idxprom20, !dbg !9340
  %23 = load i32, i32* %arrayidx21, align 4, !dbg !9340
  %24 = load i32, i32* %cover_class, align 4, !dbg !9342
  %idxprom22 = zext i32 %24 to i64, !dbg !9343
  %arrayidx23 = getelementptr inbounds [27 x i32], [27 x i32]* @curr_reg_pressure, i64 0, i64 %idxprom22, !dbg !9343
  %25 = load i32, i32* %arrayidx23, align 4, !dbg !9344
  %sub = sub nsw i32 %25, %23, !dbg !9344
  store i32 %sub, i32* %arrayidx23, align 4, !dbg !9344
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then3
  br label %if.end24, !dbg !9345

if.end24:                                         ; preds = %if.end, %if.then
  br label %if.end40, !dbg !9346

if.else25:                                        ; preds = %entry
  %26 = load i32, i32* %cover_class, align 4, !dbg !9347
  %cmp26 = icmp ne i32 %26, 0, !dbg !9349
  br i1 %cmp26, label %land.lhs.true, label %if.end39, !dbg !9350

land.lhs.true:                                    ; preds = %if.else25
  %27 = load i64, i64* @ira_no_alloc_regs, align 8, !dbg !9351
  %28 = load i32, i32* %regno.addr, align 4, !dbg !9351
  %sh_prom = zext i32 %28 to i64, !dbg !9351
  %shl = shl i64 1, %sh_prom, !dbg !9351
  %and = and i64 %27, %shl, !dbg !9351
  %tobool27 = icmp ne i64 %and, 0, !dbg !9351
  br i1 %tobool27, label %if.end39, label %if.then28, !dbg !9352

if.then28:                                        ; preds = %land.lhs.true
  %29 = load i8, i8* %birth_p.addr, align 1, !dbg !9353
  %tobool29 = icmp ne i8 %29, 0, !dbg !9353
  br i1 %tobool29, label %if.then30, label %if.else34, !dbg !9356

if.then30:                                        ; preds = %if.then28
  %30 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @curr_reg_live, align 8, !dbg !9357
  %31 = load i32, i32* %regno.addr, align 4, !dbg !9359
  %call31 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %30, i32 %31), !dbg !9360
  %32 = load i32, i32* %cover_class, align 4, !dbg !9361
  %idxprom32 = zext i32 %32 to i64, !dbg !9362
  %arrayidx33 = getelementptr inbounds [27 x i32], [27 x i32]* @curr_reg_pressure, i64 0, i64 %idxprom32, !dbg !9362
  %33 = load i32, i32* %arrayidx33, align 4, !dbg !9363
  %inc = add nsw i32 %33, 1, !dbg !9363
  store i32 %inc, i32* %arrayidx33, align 4, !dbg !9363
  br label %if.end38, !dbg !9364

if.else34:                                        ; preds = %if.then28
  %34 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @curr_reg_live, align 8, !dbg !9365
  %35 = load i32, i32* %regno.addr, align 4, !dbg !9367
  %call35 = call zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def* %34, i32 %35), !dbg !9368
  %36 = load i32, i32* %cover_class, align 4, !dbg !9369
  %idxprom36 = zext i32 %36 to i64, !dbg !9370
  %arrayidx37 = getelementptr inbounds [27 x i32], [27 x i32]* @curr_reg_pressure, i64 0, i64 %idxprom36, !dbg !9370
  %37 = load i32, i32* %arrayidx37, align 4, !dbg !9371
  %dec = add nsw i32 %37, -1, !dbg !9371
  store i32 %dec, i32* %arrayidx37, align 4, !dbg !9371
  br label %if.end38

if.end38:                                         ; preds = %if.else34, %if.then30
  br label %if.end39, !dbg !9372

if.end39:                                         ; preds = %if.end38, %land.lhs.true, %if.else25
  br label %if.end40

if.end40:                                         ; preds = %if.end39, %if.end24
  ret void, !dbg !9373
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @rhs_regno(%struct.rtx_def* %x) #0 !dbg !9374 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !9377, metadata !DIExpression()), !dbg !9378
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9379
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !9379
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !9379
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !9379
  %rt_uint = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !9379
  %1 = load i32, i32* %rt_uint, align 8, !dbg !9379
  ret i32 %1, !dbg !9380
}

declare dso_local zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %map, i32 %start_bit, i32* %bit_no) #0 !dbg !9381 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %map.addr = alloca %struct.bitmap_head_def*, align 8
  %start_bit.addr = alloca i32, align 4
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !9389, metadata !DIExpression()), !dbg !9390
  store %struct.bitmap_head_def* %map, %struct.bitmap_head_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %map.addr, metadata !9391, metadata !DIExpression()), !dbg !9392
  store i32 %start_bit, i32* %start_bit.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %start_bit.addr, metadata !9393, metadata !DIExpression()), !dbg !9394
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !9395, metadata !DIExpression()), !dbg !9396
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %map.addr, align 8, !dbg !9397
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %0, i32 0, i32 0, !dbg !9398
  %1 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !9398
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9399
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 0, !dbg !9400
  store %struct.bitmap_element_def* %1, %struct.bitmap_element_def** %elt1, align 8, !dbg !9401
  %3 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9402
  %elt2 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %3, i32 0, i32 1, !dbg !9403
  store %struct.bitmap_element_def* null, %struct.bitmap_element_def** %elt2, align 8, !dbg !9404
  br label %while.body, !dbg !9405

while.body:                                       ; preds = %entry, %if.end5
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9406
  %elt11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 0, !dbg !9409
  %5 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt11, align 8, !dbg !9409
  %tobool = icmp ne %struct.bitmap_element_def* %5, null, !dbg !9406
  br i1 %tobool, label %if.end, label %if.then, !dbg !9410

if.then:                                          ; preds = %while.body
  %6 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9411
  %elt12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %6, i32 0, i32 0, !dbg !9413
  store %struct.bitmap_element_def* @bitmap_zero_bits, %struct.bitmap_element_def** %elt12, align 8, !dbg !9414
  br label %while.end, !dbg !9415

if.end:                                           ; preds = %while.body
  %7 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9416
  %elt13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %7, i32 0, i32 0, !dbg !9418
  %8 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt13, align 8, !dbg !9418
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %8, i32 0, i32 2, !dbg !9419
  %9 = load i32, i32* %indx, align 8, !dbg !9419
  %10 = load i32, i32* %start_bit.addr, align 4, !dbg !9420
  %div = udiv i32 %10, 128, !dbg !9421
  %cmp = icmp uge i32 %9, %div, !dbg !9422
  br i1 %cmp, label %if.then4, label %if.end5, !dbg !9423

if.then4:                                         ; preds = %if.end
  br label %while.end, !dbg !9424

if.end5:                                          ; preds = %if.end
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9425
  %elt16 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 0, !dbg !9426
  %12 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt16, align 8, !dbg !9426
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %12, i32 0, i32 0, !dbg !9427
  %13 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !9427
  %14 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9428
  %elt17 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %14, i32 0, i32 0, !dbg !9429
  store %struct.bitmap_element_def* %13, %struct.bitmap_element_def** %elt17, align 8, !dbg !9430
  br label %while.body, !dbg !9405, !llvm.loop !9431

while.end:                                        ; preds = %if.then4, %if.then
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9433
  %elt18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !9435
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt18, align 8, !dbg !9435
  %indx9 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 2, !dbg !9436
  %17 = load i32, i32* %indx9, align 8, !dbg !9436
  %18 = load i32, i32* %start_bit.addr, align 4, !dbg !9437
  %div10 = udiv i32 %18, 128, !dbg !9438
  %cmp11 = icmp ne i32 %17, %div10, !dbg !9439
  br i1 %cmp11, label %if.then12, label %if.end15, !dbg !9440

if.then12:                                        ; preds = %while.end
  %19 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9441
  %elt113 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %19, i32 0, i32 0, !dbg !9442
  %20 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt113, align 8, !dbg !9442
  %indx14 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %20, i32 0, i32 2, !dbg !9443
  %21 = load i32, i32* %indx14, align 8, !dbg !9443
  %mul = mul i32 %21, 128, !dbg !9444
  store i32 %mul, i32* %start_bit.addr, align 4, !dbg !9445
  br label %if.end15, !dbg !9446

if.end15:                                         ; preds = %if.then12, %while.end
  %22 = load i32, i32* %start_bit.addr, align 4, !dbg !9447
  %div16 = udiv i32 %22, 64, !dbg !9448
  %rem = urem i32 %div16, 2, !dbg !9449
  %23 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9450
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %23, i32 0, i32 2, !dbg !9451
  store i32 %rem, i32* %word_no, align 8, !dbg !9452
  %24 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9453
  %elt117 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %24, i32 0, i32 0, !dbg !9454
  %25 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt117, align 8, !dbg !9454
  %bits = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %25, i32 0, i32 3, !dbg !9455
  %26 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9456
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %26, i32 0, i32 2, !dbg !9457
  %27 = load i32, i32* %word_no18, align 8, !dbg !9457
  %idxprom = zext i32 %27 to i64, !dbg !9453
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits, i64 0, i64 %idxprom, !dbg !9453
  %28 = load i64, i64* %arrayidx, align 8, !dbg !9453
  %29 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9458
  %bits19 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %29, i32 0, i32 3, !dbg !9459
  store i64 %28, i64* %bits19, align 8, !dbg !9460
  %30 = load i32, i32* %start_bit.addr, align 4, !dbg !9461
  %rem20 = urem i32 %30, 64, !dbg !9462
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9463
  %bits21 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 3, !dbg !9464
  %32 = load i64, i64* %bits21, align 8, !dbg !9465
  %sh_prom = zext i32 %rem20 to i64, !dbg !9465
  %shr = lshr i64 %32, %sh_prom, !dbg !9465
  store i64 %shr, i64* %bits21, align 8, !dbg !9465
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9466
  %bits22 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 3, !dbg !9467
  %34 = load i64, i64* %bits22, align 8, !dbg !9467
  %tobool23 = icmp ne i64 %34, 0, !dbg !9468
  %lnot = xor i1 %tobool23, true, !dbg !9468
  %lnot.ext = zext i1 %lnot to i32, !dbg !9468
  %35 = load i32, i32* %start_bit.addr, align 4, !dbg !9469
  %add = add i32 %35, %lnot.ext, !dbg !9469
  store i32 %add, i32* %start_bit.addr, align 4, !dbg !9469
  %36 = load i32, i32* %start_bit.addr, align 4, !dbg !9470
  %37 = load i32*, i32** %bit_no.addr, align 8, !dbg !9471
  store i32 %36, i32* %37, align 4, !dbg !9472
  ret void, !dbg !9473
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !9474 {
entry:
  %retval = alloca i8, align 1
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !9477, metadata !DIExpression()), !dbg !9478
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !9479, metadata !DIExpression()), !dbg !9480
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9481
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !9483
  %1 = load i64, i64* %bits, align 8, !dbg !9483
  %tobool = icmp ne i64 %1, 0, !dbg !9481
  br i1 %tobool, label %if.then, label %if.end, !dbg !9484

if.then:                                          ; preds = %entry
  br label %next_bit, !dbg !9485

next_bit:                                         ; preds = %if.then15, %if.then
  call void @llvm.dbg.label(metadata !9486), !dbg !9488
  br label %while.cond, !dbg !9489

while.cond:                                       ; preds = %while.body, %next_bit
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9490
  %bits1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 3, !dbg !9491
  %3 = load i64, i64* %bits1, align 8, !dbg !9491
  %and = and i64 %3, 1, !dbg !9492
  %tobool2 = icmp ne i64 %and, 0, !dbg !9493
  %lnot = xor i1 %tobool2, true, !dbg !9493
  br i1 %lnot, label %while.body, label %while.end, !dbg !9489

while.body:                                       ; preds = %while.cond
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9494
  %bits3 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 3, !dbg !9496
  %5 = load i64, i64* %bits3, align 8, !dbg !9497
  %shr = lshr i64 %5, 1, !dbg !9497
  store i64 %shr, i64* %bits3, align 8, !dbg !9497
  %6 = load i32*, i32** %bit_no.addr, align 8, !dbg !9498
  %7 = load i32, i32* %6, align 4, !dbg !9499
  %add = add i32 %7, 1, !dbg !9499
  store i32 %add, i32* %6, align 4, !dbg !9499
  br label %while.cond, !dbg !9489, !llvm.loop !9500

while.end:                                        ; preds = %while.cond
  store i8 1, i8* %retval, align 1, !dbg !9502
  br label %return, !dbg !9502

if.end:                                           ; preds = %entry
  %8 = load i32*, i32** %bit_no.addr, align 8, !dbg !9503
  %9 = load i32, i32* %8, align 4, !dbg !9504
  %add4 = add i32 %9, 64, !dbg !9505
  %sub = sub i32 %add4, 1, !dbg !9506
  %div = udiv i32 %sub, 64, !dbg !9507
  %mul = mul i32 %div, 64, !dbg !9508
  %10 = load i32*, i32** %bit_no.addr, align 8, !dbg !9509
  store i32 %mul, i32* %10, align 4, !dbg !9510
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9511
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 2, !dbg !9512
  %12 = load i32, i32* %word_no, align 8, !dbg !9513
  %inc = add i32 %12, 1, !dbg !9513
  store i32 %inc, i32* %word_no, align 8, !dbg !9513
  br label %while.body6, !dbg !9514

while.body6:                                      ; preds = %if.end, %if.end26
  br label %while.cond7, !dbg !9515

while.cond7:                                      ; preds = %if.end16, %while.body6
  %13 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9517
  %word_no8 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %13, i32 0, i32 2, !dbg !9518
  %14 = load i32, i32* %word_no8, align 8, !dbg !9518
  %cmp = icmp ne i32 %14, 2, !dbg !9519
  br i1 %cmp, label %while.body9, label %while.end20, !dbg !9515

while.body9:                                      ; preds = %while.cond7
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9520
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !9522
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt1, align 8, !dbg !9522
  %bits10 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 3, !dbg !9523
  %17 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9524
  %word_no11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %17, i32 0, i32 2, !dbg !9525
  %18 = load i32, i32* %word_no11, align 8, !dbg !9525
  %idxprom = zext i32 %18 to i64, !dbg !9520
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits10, i64 0, i64 %idxprom, !dbg !9520
  %19 = load i64, i64* %arrayidx, align 8, !dbg !9520
  %20 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9526
  %bits12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %20, i32 0, i32 3, !dbg !9527
  store i64 %19, i64* %bits12, align 8, !dbg !9528
  %21 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9529
  %bits13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %21, i32 0, i32 3, !dbg !9531
  %22 = load i64, i64* %bits13, align 8, !dbg !9531
  %tobool14 = icmp ne i64 %22, 0, !dbg !9529
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !9532

if.then15:                                        ; preds = %while.body9
  br label %next_bit, !dbg !9533

if.end16:                                         ; preds = %while.body9
  %23 = load i32*, i32** %bit_no.addr, align 8, !dbg !9534
  %24 = load i32, i32* %23, align 4, !dbg !9535
  %add17 = add i32 %24, 64, !dbg !9535
  store i32 %add17, i32* %23, align 4, !dbg !9535
  %25 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9536
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %25, i32 0, i32 2, !dbg !9537
  %26 = load i32, i32* %word_no18, align 8, !dbg !9538
  %inc19 = add i32 %26, 1, !dbg !9538
  store i32 %inc19, i32* %word_no18, align 8, !dbg !9538
  br label %while.cond7, !dbg !9515, !llvm.loop !9539

while.end20:                                      ; preds = %while.cond7
  %27 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9541
  %elt121 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %27, i32 0, i32 0, !dbg !9542
  %28 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt121, align 8, !dbg !9542
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %28, i32 0, i32 0, !dbg !9543
  %29 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !9543
  %30 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9544
  %elt122 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %30, i32 0, i32 0, !dbg !9545
  store %struct.bitmap_element_def* %29, %struct.bitmap_element_def** %elt122, align 8, !dbg !9546
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9547
  %elt123 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 0, !dbg !9549
  %32 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt123, align 8, !dbg !9549
  %tobool24 = icmp ne %struct.bitmap_element_def* %32, null, !dbg !9547
  br i1 %tobool24, label %if.end26, label %if.then25, !dbg !9550

if.then25:                                        ; preds = %while.end20
  store i8 0, i8* %retval, align 1, !dbg !9551
  br label %return, !dbg !9551

if.end26:                                         ; preds = %while.end20
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9552
  %elt127 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 0, !dbg !9553
  %34 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt127, align 8, !dbg !9553
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %34, i32 0, i32 2, !dbg !9554
  %35 = load i32, i32* %indx, align 8, !dbg !9554
  %mul28 = mul i32 %35, 128, !dbg !9555
  %36 = load i32*, i32** %bit_no.addr, align 8, !dbg !9556
  store i32 %mul28, i32* %36, align 4, !dbg !9557
  %37 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9558
  %word_no29 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %37, i32 0, i32 2, !dbg !9559
  store i32 0, i32* %word_no29, align 8, !dbg !9560
  br label %while.body6, !dbg !9514, !llvm.loop !9561

return:                                           ; preds = %if.then25, %while.end
  %38 = load i8, i8* %retval, align 1, !dbg !9563
  ret i8 %38, !dbg !9563
}

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !9564 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !9567, metadata !DIExpression()), !dbg !9568
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !9569, metadata !DIExpression()), !dbg !9570
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9571
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !9572
  %1 = load i64, i64* %bits, align 8, !dbg !9573
  %shr = lshr i64 %1, 1, !dbg !9573
  store i64 %shr, i64* %bits, align 8, !dbg !9573
  %2 = load i32*, i32** %bit_no.addr, align 8, !dbg !9574
  %3 = load i32, i32* %2, align 4, !dbg !9575
  %add = add i32 %3, 1, !dbg !9575
  store i32 %add, i32* %2, align 4, !dbg !9575
  ret void, !dbg !9576
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

declare dso_local zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @save_reg_pressure() #0 !dbg !9577 {
entry:
  %i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9578, metadata !DIExpression()), !dbg !9579
  store i32 0, i32* %i, align 4, !dbg !9580
  br label %for.cond, !dbg !9582

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !9583
  %1 = load i32, i32* @ira_reg_class_cover_size, align 4, !dbg !9585
  %cmp = icmp slt i32 %0, %1, !dbg !9586
  br i1 %cmp, label %for.body, label %for.end, !dbg !9587

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4, !dbg !9588
  %idxprom = sext i32 %2 to i64, !dbg !9589
  %arrayidx = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom, !dbg !9589
  %3 = load i32, i32* %arrayidx, align 4, !dbg !9589
  %idxprom1 = zext i32 %3 to i64, !dbg !9590
  %arrayidx2 = getelementptr inbounds [27 x i32], [27 x i32]* @curr_reg_pressure, i64 0, i64 %idxprom1, !dbg !9590
  %4 = load i32, i32* %arrayidx2, align 4, !dbg !9590
  %5 = load i32, i32* %i, align 4, !dbg !9591
  %idxprom3 = sext i32 %5 to i64, !dbg !9592
  %arrayidx4 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom3, !dbg !9592
  %6 = load i32, i32* %arrayidx4, align 4, !dbg !9592
  %idxprom5 = zext i32 %6 to i64, !dbg !9593
  %arrayidx6 = getelementptr inbounds [27 x i32], [27 x i32]* @saved_reg_pressure, i64 0, i64 %idxprom5, !dbg !9593
  store i32 %4, i32* %arrayidx6, align 4, !dbg !9594
  br label %for.inc, !dbg !9593

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4, !dbg !9595
  %inc = add nsw i32 %7, 1, !dbg !9595
  store i32 %inc, i32* %i, align 4, !dbg !9595
  br label %for.cond, !dbg !9596, !llvm.loop !9597

for.end:                                          ; preds = %for.cond
  %8 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @saved_reg_live, align 8, !dbg !9599
  %9 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @curr_reg_live, align 8, !dbg !9600
  call void @bitmap_copy(%struct.bitmap_head_def* %8, %struct.bitmap_head_def* %9), !dbg !9601
  ret void, !dbg !9602
}

; Function Attrs: noinline nounwind uwtable
define internal void @update_register_pressure(%struct.rtx_def* %insn) #0 !dbg !9603 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %use = alloca %struct.reg_use_data*, align 8
  %set = alloca %struct.reg_set_data*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !9604, metadata !DIExpression()), !dbg !9605
  call void @llvm.dbg.declare(metadata %struct.reg_use_data** %use, metadata !9606, metadata !DIExpression()), !dbg !9607
  call void @llvm.dbg.declare(metadata %struct.reg_set_data** %set, metadata !9608, metadata !DIExpression()), !dbg !9609
  %0 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !9610
  %tobool = icmp ne %struct.VEC_haifa_insn_data_def_heap* %0, null, !dbg !9610
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9610

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !9610
  %base = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %1, i32 0, i32 0, !dbg !9610
  br label %cond.end, !dbg !9610

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9610

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_haifa_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9610
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !9610
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !9610
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !9610
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !9610
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !9610
  %3 = load i32, i32* %rt_int, align 8, !dbg !9610
  %call = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond, i32 %3), !dbg !9610
  %reg_use_list = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call, i32 0, i32 15, !dbg !9610
  %4 = load %struct.reg_use_data*, %struct.reg_use_data** %reg_use_list, align 8, !dbg !9610
  store %struct.reg_use_data* %4, %struct.reg_use_data** %use, align 8, !dbg !9612
  br label %for.cond, !dbg !9613

for.cond:                                         ; preds = %for.inc, %cond.end
  %5 = load %struct.reg_use_data*, %struct.reg_use_data** %use, align 8, !dbg !9614
  %cmp = icmp ne %struct.reg_use_data* %5, null, !dbg !9616
  br i1 %cmp, label %for.body, label %for.end, !dbg !9617

for.body:                                         ; preds = %for.cond
  %6 = load %struct.reg_use_data*, %struct.reg_use_data** %use, align 8, !dbg !9618
  %call1 = call zeroext i8 @dying_use_p(%struct.reg_use_data* %6), !dbg !9620
  %conv = zext i8 %call1 to i32, !dbg !9620
  %tobool2 = icmp ne i32 %conv, 0, !dbg !9620
  br i1 %tobool2, label %land.lhs.true, label %if.end, !dbg !9621

land.lhs.true:                                    ; preds = %for.body
  %7 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @curr_reg_live, align 8, !dbg !9622
  %8 = load %struct.reg_use_data*, %struct.reg_use_data** %use, align 8, !dbg !9623
  %regno = getelementptr inbounds %struct.reg_use_data, %struct.reg_use_data* %8, i32 0, i32 0, !dbg !9624
  %9 = load i32, i32* %regno, align 8, !dbg !9624
  %call3 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %7, i32 %9), !dbg !9625
  %tobool4 = icmp ne i32 %call3, 0, !dbg !9625
  br i1 %tobool4, label %if.then, label %if.end, !dbg !9626

if.then:                                          ; preds = %land.lhs.true
  %10 = load %struct.reg_use_data*, %struct.reg_use_data** %use, align 8, !dbg !9627
  %regno5 = getelementptr inbounds %struct.reg_use_data, %struct.reg_use_data* %10, i32 0, i32 0, !dbg !9628
  %11 = load i32, i32* %regno5, align 8, !dbg !9628
  call void @mark_regno_birth_or_death(i32 %11, i8 zeroext 0), !dbg !9629
  br label %if.end, !dbg !9629

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body
  br label %for.inc, !dbg !9630

for.inc:                                          ; preds = %if.end
  %12 = load %struct.reg_use_data*, %struct.reg_use_data** %use, align 8, !dbg !9631
  %next_insn_use = getelementptr inbounds %struct.reg_use_data, %struct.reg_use_data* %12, i32 0, i32 3, !dbg !9632
  %13 = load %struct.reg_use_data*, %struct.reg_use_data** %next_insn_use, align 8, !dbg !9632
  store %struct.reg_use_data* %13, %struct.reg_use_data** %use, align 8, !dbg !9633
  br label %for.cond, !dbg !9634, !llvm.loop !9635

for.end:                                          ; preds = %for.cond
  %14 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !9637
  %tobool6 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %14, null, !dbg !9637
  br i1 %tobool6, label %cond.true7, label %cond.false9, !dbg !9637

cond.true7:                                       ; preds = %for.end
  %15 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !9637
  %base8 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %15, i32 0, i32 0, !dbg !9637
  br label %cond.end10, !dbg !9637

cond.false9:                                      ; preds = %for.end
  br label %cond.end10, !dbg !9637

cond.end10:                                       ; preds = %cond.false9, %cond.true7
  %cond11 = phi %struct.VEC_haifa_insn_data_def_base* [ %base8, %cond.true7 ], [ null, %cond.false9 ], !dbg !9637
  %16 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !9637
  %u12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !9637
  %fld13 = bitcast %union.u* %u12 to [1 x %union.rtunion_def]*, !dbg !9637
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i64 0, i64 0, !dbg !9637
  %rt_int15 = bitcast %union.rtunion_def* %arrayidx14 to i32*, !dbg !9637
  %17 = load i32, i32* %rt_int15, align 8, !dbg !9637
  %call16 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond11, i32 %17), !dbg !9637
  %reg_set_list = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call16, i32 0, i32 16, !dbg !9637
  %18 = load %struct.reg_set_data*, %struct.reg_set_data** %reg_set_list, align 8, !dbg !9637
  store %struct.reg_set_data* %18, %struct.reg_set_data** %set, align 8, !dbg !9639
  br label %for.cond17, !dbg !9640

for.cond17:                                       ; preds = %for.inc22, %cond.end10
  %19 = load %struct.reg_set_data*, %struct.reg_set_data** %set, align 8, !dbg !9641
  %cmp18 = icmp ne %struct.reg_set_data* %19, null, !dbg !9643
  br i1 %cmp18, label %for.body20, label %for.end23, !dbg !9644

for.body20:                                       ; preds = %for.cond17
  %20 = load %struct.reg_set_data*, %struct.reg_set_data** %set, align 8, !dbg !9645
  %regno21 = getelementptr inbounds %struct.reg_set_data, %struct.reg_set_data* %20, i32 0, i32 0, !dbg !9646
  %21 = load i32, i32* %regno21, align 8, !dbg !9646
  call void @mark_regno_birth_or_death(i32 %21, i8 zeroext 1), !dbg !9647
  br label %for.inc22, !dbg !9647

for.inc22:                                        ; preds = %for.body20
  %22 = load %struct.reg_set_data*, %struct.reg_set_data** %set, align 8, !dbg !9648
  %next_insn_set = getelementptr inbounds %struct.reg_set_data, %struct.reg_set_data* %22, i32 0, i32 2, !dbg !9649
  %23 = load %struct.reg_set_data*, %struct.reg_set_data** %next_insn_set, align 8, !dbg !9649
  store %struct.reg_set_data* %23, %struct.reg_set_data** %set, align 8, !dbg !9650
  br label %for.cond17, !dbg !9651, !llvm.loop !9652

for.end23:                                        ; preds = %for.cond17
  ret void, !dbg !9654
}

; Function Attrs: noinline nounwind uwtable
define internal void @restore_reg_pressure() #0 !dbg !9655 {
entry:
  %i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9656, metadata !DIExpression()), !dbg !9657
  store i32 0, i32* %i, align 4, !dbg !9658
  br label %for.cond, !dbg !9660

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !9661
  %1 = load i32, i32* @ira_reg_class_cover_size, align 4, !dbg !9663
  %cmp = icmp slt i32 %0, %1, !dbg !9664
  br i1 %cmp, label %for.body, label %for.end, !dbg !9665

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4, !dbg !9666
  %idxprom = sext i32 %2 to i64, !dbg !9667
  %arrayidx = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom, !dbg !9667
  %3 = load i32, i32* %arrayidx, align 4, !dbg !9667
  %idxprom1 = zext i32 %3 to i64, !dbg !9668
  %arrayidx2 = getelementptr inbounds [27 x i32], [27 x i32]* @saved_reg_pressure, i64 0, i64 %idxprom1, !dbg !9668
  %4 = load i32, i32* %arrayidx2, align 4, !dbg !9668
  %5 = load i32, i32* %i, align 4, !dbg !9669
  %idxprom3 = sext i32 %5 to i64, !dbg !9670
  %arrayidx4 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom3, !dbg !9670
  %6 = load i32, i32* %arrayidx4, align 4, !dbg !9670
  %idxprom5 = zext i32 %6 to i64, !dbg !9671
  %arrayidx6 = getelementptr inbounds [27 x i32], [27 x i32]* @curr_reg_pressure, i64 0, i64 %idxprom5, !dbg !9671
  store i32 %4, i32* %arrayidx6, align 4, !dbg !9672
  br label %for.inc, !dbg !9671

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4, !dbg !9673
  %inc = add nsw i32 %7, 1, !dbg !9673
  store i32 %inc, i32* %i, align 4, !dbg !9673
  br label %for.cond, !dbg !9674, !llvm.loop !9675

for.end:                                          ; preds = %for.cond
  %8 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @curr_reg_live, align 8, !dbg !9677
  %9 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @saved_reg_live, align 8, !dbg !9678
  call void @bitmap_copy(%struct.bitmap_head_def* %8, %struct.bitmap_head_def* %9), !dbg !9679
  ret void, !dbg !9680
}

declare dso_local void @bitmap_copy(%struct.bitmap_head_def*, %struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @fix_jump_move(%struct.rtx_def* %jump) #0 !dbg !9681 {
entry:
  %jump.addr = alloca %struct.rtx_def*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %jump_bb = alloca %struct.basic_block_def*, align 8
  %jump_bb_next = alloca %struct.basic_block_def*, align 8
  store %struct.rtx_def* %jump, %struct.rtx_def** %jump.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %jump.addr, metadata !9682, metadata !DIExpression()), !dbg !9683
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !9684, metadata !DIExpression()), !dbg !9685
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %jump_bb, metadata !9686, metadata !DIExpression()), !dbg !9687
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %jump_bb_next, metadata !9688, metadata !DIExpression()), !dbg !9689
  %0 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !9690
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !9690
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !9690
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !9690
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !9690
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !9690
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !9690
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !9690
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 3, !dbg !9690
  %rt_bb = bitcast %union.rtunion_def* %arrayidx3 to %struct.basic_block_def**, !dbg !9690
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !9690
  store %struct.basic_block_def* %2, %struct.basic_block_def** %bb, align 8, !dbg !9691
  %3 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !9692
  %u4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !9692
  %fld5 = bitcast %union.u* %u4 to [1 x %union.rtunion_def]*, !dbg !9692
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i64 0, i64 3, !dbg !9692
  %rt_bb7 = bitcast %union.rtunion_def* %arrayidx6 to %struct.basic_block_def**, !dbg !9692
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb7, align 8, !dbg !9692
  store %struct.basic_block_def* %4, %struct.basic_block_def** %jump_bb, align 8, !dbg !9693
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_bb, align 8, !dbg !9694
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %5, i32 0, i32 6, !dbg !9695
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !9695
  store %struct.basic_block_def* %6, %struct.basic_block_def** %jump_bb_next, align 8, !dbg !9696
  %7 = load %struct.common_sched_info_def*, %struct.common_sched_info_def** @common_sched_info, align 8, !dbg !9697
  %sched_pass_id = getelementptr inbounds %struct.common_sched_info_def, %struct.common_sched_info_def* %7, i32 0, i32 4, !dbg !9697
  %8 = load i32, i32* %sched_pass_id, align 8, !dbg !9697
  %cmp = icmp eq i32 %8, 2, !dbg !9697
  br i1 %cmp, label %cond.false26, label %lor.lhs.false, !dbg !9697

lor.lhs.false:                                    ; preds = %entry
  %9 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !9697
  %tobool = icmp ne %struct.VEC_haifa_insn_data_def_heap* %9, null, !dbg !9697
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9697

cond.true:                                        ; preds = %lor.lhs.false
  %10 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !9697
  %base = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %10, i32 0, i32 0, !dbg !9697
  br label %cond.end, !dbg !9697

cond.false:                                       ; preds = %lor.lhs.false
  br label %cond.end, !dbg !9697

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_haifa_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9697
  %11 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !9697
  %u8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !9697
  %fld9 = bitcast %union.u* %u8 to [1 x %union.rtunion_def]*, !dbg !9697
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i64 0, i64 0, !dbg !9697
  %rt_int = bitcast %union.rtunion_def* %arrayidx10 to i32*, !dbg !9697
  %12 = load i32, i32* %rt_int, align 8, !dbg !9697
  %call = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond, i32 %12), !dbg !9697
  %recovery_block = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call, i32 0, i32 11, !dbg !9697
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %recovery_block, align 8, !dbg !9697
  %cmp11 = icmp ne %struct.basic_block_def* %13, null, !dbg !9697
  br i1 %cmp11, label %land.lhs.true, label %cond.true25, !dbg !9697

land.lhs.true:                                    ; preds = %cond.end
  %14 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !9697
  %tobool12 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %14, null, !dbg !9697
  br i1 %tobool12, label %cond.true13, label %cond.false15, !dbg !9697

cond.true13:                                      ; preds = %land.lhs.true
  %15 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !9697
  %base14 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %15, i32 0, i32 0, !dbg !9697
  br label %cond.end16, !dbg !9697

cond.false15:                                     ; preds = %land.lhs.true
  br label %cond.end16, !dbg !9697

cond.end16:                                       ; preds = %cond.false15, %cond.true13
  %cond17 = phi %struct.VEC_haifa_insn_data_def_base* [ %base14, %cond.true13 ], [ null, %cond.false15 ], !dbg !9697
  %16 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !9697
  %u18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !9697
  %fld19 = bitcast %union.u* %u18 to [1 x %union.rtunion_def]*, !dbg !9697
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i64 0, i64 0, !dbg !9697
  %rt_int21 = bitcast %union.rtunion_def* %arrayidx20 to i32*, !dbg !9697
  %17 = load i32, i32* %rt_int21, align 8, !dbg !9697
  %call22 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond17, i32 %17), !dbg !9697
  %recovery_block23 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call22, i32 0, i32 11, !dbg !9697
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %recovery_block23, align 8, !dbg !9697
  %19 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9697
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %19, i64 0, !dbg !9697
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !9697
  %20 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !9697
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %20, i32 0, i32 1, !dbg !9697
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !9697
  %cmp24 = icmp ne %struct.basic_block_def* %18, %21, !dbg !9697
  br i1 %cmp24, label %cond.false26, label %cond.true25, !dbg !9697

cond.true25:                                      ; preds = %cond.end16, %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 4969, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !9697
  br label %cond.end27, !dbg !9697

cond.false26:                                     ; preds = %cond.end16, %entry
  br label %cond.end27, !dbg !9697

cond.end27:                                       ; preds = %cond.false26, %cond.true25
  %cond28 = phi i32 [ 0, %cond.true25 ], [ 0, %cond.false26 ], !dbg !9697
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_bb_next, align 8, !dbg !9698
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %22, i32 0, i32 7, !dbg !9698
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !9698
  %23 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !9698
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %23, i32 0, i32 1, !dbg !9698
  %24 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !9698
  %25 = bitcast %struct.rtx_def* %24 to i32*, !dbg !9698
  %bf.load = load i32, i32* %25, align 8, !dbg !9698
  %bf.clear = and i32 %bf.load, 65535, !dbg !9698
  %cmp29 = icmp eq i32 %bf.clear, 13, !dbg !9698
  br i1 %cmp29, label %land.lhs.true30, label %if.then, !dbg !9698

land.lhs.true30:                                  ; preds = %cond.end27
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_bb_next, align 8, !dbg !9698
  %il31 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %26, i32 0, i32 7, !dbg !9698
  %rtl32 = bitcast %union.basic_block_il_dependent* %il31 to %struct.rtl_bb_info**, !dbg !9698
  %27 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl32, align 8, !dbg !9698
  %end_33 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %27, i32 0, i32 1, !dbg !9698
  %28 = load %struct.rtx_def*, %struct.rtx_def** %end_33, align 8, !dbg !9698
  %u34 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1, !dbg !9698
  %fld35 = bitcast %union.u* %u34 to [1 x %union.rtunion_def]*, !dbg !9698
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld35, i64 0, i64 5, !dbg !9698
  %rt_int37 = bitcast %union.rtunion_def* %arrayidx36 to i32*, !dbg !9698
  %29 = load i32, i32* %rt_int37, align 8, !dbg !9698
  %cmp38 = icmp eq i32 %29, 10, !dbg !9698
  br i1 %cmp38, label %if.end, label %if.then, !dbg !9700

if.then:                                          ; preds = %land.lhs.true30, %cond.end27
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_bb_next, align 8, !dbg !9701
  %il39 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %30, i32 0, i32 7, !dbg !9701
  %rtl40 = bitcast %union.basic_block_il_dependent* %il39 to %struct.rtl_bb_info**, !dbg !9701
  %31 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl40, align 8, !dbg !9701
  %end_41 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %31, i32 0, i32 1, !dbg !9701
  %32 = load %struct.rtx_def*, %struct.rtx_def** %end_41, align 8, !dbg !9701
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_bb, align 8, !dbg !9702
  %il42 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %33, i32 0, i32 7, !dbg !9702
  %rtl43 = bitcast %union.basic_block_il_dependent* %il42 to %struct.rtl_bb_info**, !dbg !9702
  %34 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl43, align 8, !dbg !9702
  %end_44 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %34, i32 0, i32 1, !dbg !9702
  store %struct.rtx_def* %32, %struct.rtx_def** %end_44, align 8, !dbg !9703
  br label %if.end, !dbg !9702

if.end:                                           ; preds = %if.then, %land.lhs.true30
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9704
  %il45 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %35, i32 0, i32 7, !dbg !9704
  %rtl46 = bitcast %union.basic_block_il_dependent* %il45 to %struct.rtl_bb_info**, !dbg !9704
  %36 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl46, align 8, !dbg !9704
  %end_47 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %36, i32 0, i32 1, !dbg !9704
  %37 = load %struct.rtx_def*, %struct.rtx_def** %end_47, align 8, !dbg !9704
  %38 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !9706
  %u48 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1, !dbg !9706
  %fld49 = bitcast %union.u* %u48 to [1 x %union.rtunion_def]*, !dbg !9706
  %arrayidx50 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld49, i64 0, i64 1, !dbg !9706
  %rt_rtx51 = bitcast %union.rtunion_def* %arrayidx50 to %struct.rtx_def**, !dbg !9706
  %39 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx51, align 8, !dbg !9706
  %cmp52 = icmp ne %struct.rtx_def* %37, %39, !dbg !9707
  br i1 %cmp52, label %if.then53, label %if.else, !dbg !9708

if.then53:                                        ; preds = %if.end
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9709
  %il54 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %40, i32 0, i32 7, !dbg !9709
  %rtl55 = bitcast %union.basic_block_il_dependent* %il54 to %struct.rtl_bb_info**, !dbg !9709
  %41 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl55, align 8, !dbg !9709
  %end_56 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %41, i32 0, i32 1, !dbg !9709
  %42 = load %struct.rtx_def*, %struct.rtx_def** %end_56, align 8, !dbg !9709
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_bb_next, align 8, !dbg !9710
  %il57 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %43, i32 0, i32 7, !dbg !9710
  %rtl58 = bitcast %union.basic_block_il_dependent* %il57 to %struct.rtl_bb_info**, !dbg !9710
  %44 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl58, align 8, !dbg !9710
  %end_59 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %44, i32 0, i32 1, !dbg !9710
  store %struct.rtx_def* %42, %struct.rtx_def** %end_59, align 8, !dbg !9711
  br label %if.end69, !dbg !9710

if.else:                                          ; preds = %if.end
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_bb_next, align 8, !dbg !9712
  %il60 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %45, i32 0, i32 7, !dbg !9712
  %rtl61 = bitcast %union.basic_block_il_dependent* %il60 to %struct.rtl_bb_info**, !dbg !9712
  %46 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl61, align 8, !dbg !9712
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %46, i32 0, i32 0, !dbg !9712
  %47 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !9712
  %u62 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %47, i32 0, i32 1, !dbg !9712
  %fld63 = bitcast %union.u* %u62 to [1 x %union.rtunion_def]*, !dbg !9712
  %arrayidx64 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld63, i64 0, i64 2, !dbg !9712
  %rt_rtx65 = bitcast %union.rtunion_def* %arrayidx64 to %struct.rtx_def**, !dbg !9712
  %48 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx65, align 8, !dbg !9712
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_bb_next, align 8, !dbg !9713
  %il66 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %49, i32 0, i32 7, !dbg !9713
  %rtl67 = bitcast %union.basic_block_il_dependent* %il66 to %struct.rtl_bb_info**, !dbg !9713
  %50 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl67, align 8, !dbg !9713
  %end_68 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %50, i32 0, i32 1, !dbg !9713
  store %struct.rtx_def* %48, %struct.rtx_def** %end_68, align 8, !dbg !9714
  br label %if.end69

if.end69:                                         ; preds = %if.else, %if.then53
  %51 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !9715
  %u70 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %51, i32 0, i32 1, !dbg !9715
  %fld71 = bitcast %union.u* %u70 to [1 x %union.rtunion_def]*, !dbg !9715
  %arrayidx72 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld71, i64 0, i64 1, !dbg !9715
  %rt_rtx73 = bitcast %union.rtunion_def* %arrayidx72 to %struct.rtx_def**, !dbg !9715
  %52 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx73, align 8, !dbg !9715
  %53 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9716
  %il74 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %53, i32 0, i32 7, !dbg !9716
  %rtl75 = bitcast %union.basic_block_il_dependent* %il74 to %struct.rtl_bb_info**, !dbg !9716
  %54 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl75, align 8, !dbg !9716
  %end_76 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %54, i32 0, i32 1, !dbg !9716
  store %struct.rtx_def* %52, %struct.rtx_def** %end_76, align 8, !dbg !9717
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_bb_next, align 8, !dbg !9718
  call void @update_bb_for_insn(%struct.basic_block_def* %55), !dbg !9719
  ret void, !dbg !9720
}

; Function Attrs: noinline nounwind uwtable
define internal void @move_block_after_check(%struct.rtx_def* %jump) #0 !dbg !9721 {
entry:
  %jump.addr = alloca %struct.rtx_def*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %jump_bb = alloca %struct.basic_block_def*, align 8
  %jump_bb_next = alloca %struct.basic_block_def*, align 8
  %t = alloca %struct.VEC_edge_gc*, align 8
  store %struct.rtx_def* %jump, %struct.rtx_def** %jump.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %jump.addr, metadata !9722, metadata !DIExpression()), !dbg !9723
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !9724, metadata !DIExpression()), !dbg !9725
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %jump_bb, metadata !9726, metadata !DIExpression()), !dbg !9727
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %jump_bb_next, metadata !9728, metadata !DIExpression()), !dbg !9729
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_gc** %t, metadata !9730, metadata !DIExpression()), !dbg !9731
  %0 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !9732
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !9732
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !9732
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !9732
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !9732
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !9732
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !9732
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !9732
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 3, !dbg !9732
  %rt_bb = bitcast %union.rtunion_def* %arrayidx3 to %struct.basic_block_def**, !dbg !9732
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !9732
  store %struct.basic_block_def* %2, %struct.basic_block_def** %bb, align 8, !dbg !9733
  %3 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !9734
  %u4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !9734
  %fld5 = bitcast %union.u* %u4 to [1 x %union.rtunion_def]*, !dbg !9734
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i64 0, i64 3, !dbg !9734
  %rt_bb7 = bitcast %union.rtunion_def* %arrayidx6 to %struct.basic_block_def**, !dbg !9734
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb7, align 8, !dbg !9734
  store %struct.basic_block_def* %4, %struct.basic_block_def** %jump_bb, align 8, !dbg !9735
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_bb, align 8, !dbg !9736
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %5, i32 0, i32 6, !dbg !9737
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !9737
  store %struct.basic_block_def* %6, %struct.basic_block_def** %jump_bb_next, align 8, !dbg !9738
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_bb, align 8, !dbg !9739
  call void @update_bb_for_insn(%struct.basic_block_def* %7), !dbg !9740
  %call = call zeroext i8 @sel_sched_p(), !dbg !9741
  %conv = zext i8 %call to i32, !dbg !9741
  %tobool = icmp ne i32 %conv, 0, !dbg !9741
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9741

cond.true:                                        ; preds = %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !9741
  %call8 = call zeroext i8 @sel_insn_is_speculation_check(%struct.rtx_def* %8), !dbg !9741
  %conv9 = zext i8 %call8 to i32, !dbg !9741
  %tobool10 = icmp ne i32 %conv9, 0, !dbg !9741
  br i1 %tobool10, label %cond.false45, label %lor.lhs.false, !dbg !9741

cond.false:                                       ; preds = %entry
  %9 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !9741
  %tobool11 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %9, null, !dbg !9741
  br i1 %tobool11, label %cond.true12, label %cond.false13, !dbg !9741

cond.true12:                                      ; preds = %cond.false
  %10 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !9741
  %base = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %10, i32 0, i32 0, !dbg !9741
  br label %cond.end, !dbg !9741

cond.false13:                                     ; preds = %cond.false
  br label %cond.end, !dbg !9741

cond.end:                                         ; preds = %cond.false13, %cond.true12
  %cond = phi %struct.VEC_haifa_insn_data_def_base* [ %base, %cond.true12 ], [ null, %cond.false13 ], !dbg !9741
  %11 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !9741
  %u14 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !9741
  %fld15 = bitcast %union.u* %u14 to [1 x %union.rtunion_def]*, !dbg !9741
  %arrayidx16 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld15, i64 0, i64 0, !dbg !9741
  %rt_int = bitcast %union.rtunion_def* %arrayidx16 to i32*, !dbg !9741
  %12 = load i32, i32* %rt_int, align 8, !dbg !9741
  %call17 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond, i32 %12), !dbg !9741
  %recovery_block = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call17, i32 0, i32 11, !dbg !9741
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %recovery_block, align 8, !dbg !9741
  %cmp = icmp ne %struct.basic_block_def* %13, null, !dbg !9741
  br i1 %cmp, label %cond.false45, label %lor.lhs.false, !dbg !9741

lor.lhs.false:                                    ; preds = %cond.end, %cond.true
  %call19 = call zeroext i8 @sel_sched_p(), !dbg !9741
  %conv20 = zext i8 %call19 to i32, !dbg !9741
  %tobool21 = icmp ne i32 %conv20, 0, !dbg !9741
  br i1 %tobool21, label %cond.true22, label %cond.false26, !dbg !9741

cond.true22:                                      ; preds = %lor.lhs.false
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_bb_next, align 8, !dbg !9741
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %14, i32 0, i32 7, !dbg !9741
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !9741
  %15 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !9741
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %15, i32 0, i32 1, !dbg !9741
  %16 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !9741
  %call23 = call zeroext i8 @sel_insn_is_speculation_check(%struct.rtx_def* %16), !dbg !9741
  %conv24 = zext i8 %call23 to i32, !dbg !9741
  %tobool25 = icmp ne i32 %conv24, 0, !dbg !9741
  br i1 %tobool25, label %cond.false45, label %cond.true44, !dbg !9741

cond.false26:                                     ; preds = %lor.lhs.false
  %17 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !9741
  %tobool27 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %17, null, !dbg !9741
  br i1 %tobool27, label %cond.true28, label %cond.false30, !dbg !9741

cond.true28:                                      ; preds = %cond.false26
  %18 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !9741
  %base29 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %18, i32 0, i32 0, !dbg !9741
  br label %cond.end31, !dbg !9741

cond.false30:                                     ; preds = %cond.false26
  br label %cond.end31, !dbg !9741

cond.end31:                                       ; preds = %cond.false30, %cond.true28
  %cond32 = phi %struct.VEC_haifa_insn_data_def_base* [ %base29, %cond.true28 ], [ null, %cond.false30 ], !dbg !9741
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_bb_next, align 8, !dbg !9741
  %il33 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %19, i32 0, i32 7, !dbg !9741
  %rtl34 = bitcast %union.basic_block_il_dependent* %il33 to %struct.rtl_bb_info**, !dbg !9741
  %20 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl34, align 8, !dbg !9741
  %end_35 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %20, i32 0, i32 1, !dbg !9741
  %21 = load %struct.rtx_def*, %struct.rtx_def** %end_35, align 8, !dbg !9741
  %u36 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !9741
  %fld37 = bitcast %union.u* %u36 to [1 x %union.rtunion_def]*, !dbg !9741
  %arrayidx38 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld37, i64 0, i64 0, !dbg !9741
  %rt_int39 = bitcast %union.rtunion_def* %arrayidx38 to i32*, !dbg !9741
  %22 = load i32, i32* %rt_int39, align 8, !dbg !9741
  %call40 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond32, i32 %22), !dbg !9741
  %recovery_block41 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call40, i32 0, i32 11, !dbg !9741
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %recovery_block41, align 8, !dbg !9741
  %cmp42 = icmp ne %struct.basic_block_def* %23, null, !dbg !9741
  br i1 %cmp42, label %cond.false45, label %cond.true44, !dbg !9741

cond.true44:                                      ; preds = %cond.end31, %cond.true22
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 5003, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !9741
  br label %cond.end46, !dbg !9741

cond.false45:                                     ; preds = %cond.end31, %cond.true22, %cond.end, %cond.true
  br label %cond.end46, !dbg !9741

cond.end46:                                       ; preds = %cond.false45, %cond.true44
  %cond47 = phi i32 [ 0, %cond.true44 ], [ 0, %cond.false45 ], !dbg !9741
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_bb_next, align 8, !dbg !9742
  call void @unlink_block(%struct.basic_block_def* %24), !dbg !9743
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_bb_next, align 8, !dbg !9744
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9745
  call void @link_block(%struct.basic_block_def* %25, %struct.basic_block_def* %26), !dbg !9746
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9747
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %27, i32 0, i32 1, !dbg !9748
  %28 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !9748
  store %struct.VEC_edge_gc* %28, %struct.VEC_edge_gc** %t, align 8, !dbg !9749
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9750
  %succs48 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %29, i32 0, i32 1, !dbg !9751
  store %struct.VEC_edge_gc* null, %struct.VEC_edge_gc** %succs48, align 8, !dbg !9752
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_bb, align 8, !dbg !9753
  %succs49 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %30, i32 0, i32 1, !dbg !9754
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9755
  call void @move_succs(%struct.VEC_edge_gc** %succs49, %struct.basic_block_def* %31), !dbg !9756
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_bb_next, align 8, !dbg !9757
  %succs50 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %32, i32 0, i32 1, !dbg !9758
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_bb, align 8, !dbg !9759
  call void @move_succs(%struct.VEC_edge_gc** %succs50, %struct.basic_block_def* %33), !dbg !9760
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_bb_next, align 8, !dbg !9761
  call void @move_succs(%struct.VEC_edge_gc** %t, %struct.basic_block_def* %34), !dbg !9762
  call void @df_mark_solutions_dirty(), !dbg !9763
  %35 = load %struct.common_sched_info_def*, %struct.common_sched_info_def** @common_sched_info, align 8, !dbg !9764
  %fix_recovery_cfg = getelementptr inbounds %struct.common_sched_info_def, %struct.common_sched_info_def* %35, i32 0, i32 0, !dbg !9765
  %36 = load void (i32, i32, i32)*, void (i32, i32, i32)** %fix_recovery_cfg, align 8, !dbg !9765
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9766
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %37, i32 0, i32 9, !dbg !9767
  %38 = load i32, i32* %index, align 8, !dbg !9767
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_bb, align 8, !dbg !9768
  %index51 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %39, i32 0, i32 9, !dbg !9769
  %40 = load i32, i32* %index51, align 8, !dbg !9769
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_bb_next, align 8, !dbg !9770
  %index52 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %41, i32 0, i32 9, !dbg !9771
  %42 = load i32, i32* %index52, align 8, !dbg !9771
  call void %36(i32 %38, i32 %40, i32 %42), !dbg !9764
  ret void, !dbg !9772
}

declare dso_local void @df_insn_change_bb(%struct.rtx_def*, %struct.basic_block_def*) #2

declare dso_local void @update_bb_for_insn(%struct.basic_block_def*) #2

declare dso_local void @unlink_block(%struct.basic_block_def*) #2

declare dso_local void @link_block(%struct.basic_block_def*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @move_succs(%struct.VEC_edge_gc** %succsp, %struct.basic_block_def* %to) #0 !dbg !9773 {
entry:
  %succsp.addr = alloca %struct.VEC_edge_gc**, align 8
  %to.addr = alloca %struct.basic_block_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store %struct.VEC_edge_gc** %succsp, %struct.VEC_edge_gc*** %succsp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_gc*** %succsp.addr, metadata !9776, metadata !DIExpression()), !dbg !9777
  store %struct.basic_block_def* %to, %struct.basic_block_def** %to.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %to.addr, metadata !9778, metadata !DIExpression()), !dbg !9779
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !9780, metadata !DIExpression()), !dbg !9781
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !9782, metadata !DIExpression()), !dbg !9783
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %to.addr, align 8, !dbg !9784
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 1, !dbg !9784
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !9784
  %cmp = icmp eq %struct.VEC_edge_gc* %1, null, !dbg !9784
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !9784

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 5029, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !9784
  br label %cond.end, !dbg !9784

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9784

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9784
  %2 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %succsp.addr, align 8, !dbg !9785
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %2, align 8, !dbg !9786
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %to.addr, align 8, !dbg !9787
  %succs1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 1, !dbg !9788
  store %struct.VEC_edge_gc* %3, %struct.VEC_edge_gc** %succs1, align 8, !dbg !9789
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %to.addr, align 8, !dbg !9790
  %succs2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %5, i32 0, i32 1, !dbg !9790
  %call = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs2), !dbg !9790
  %6 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !9790
  %7 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %6, i32 0, i32 0, !dbg !9790
  %8 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !9790
  store i32 %8, i32* %7, align 8, !dbg !9790
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %6, i32 0, i32 1, !dbg !9790
  %10 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !9790
  store %struct.VEC_edge_gc** %10, %struct.VEC_edge_gc*** %9, align 8, !dbg !9790
  %11 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !9790
  %12 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !9790
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* align 8 %12, i64 16, i1 false), !dbg !9790
  br label %for.cond, !dbg !9790

for.cond:                                         ; preds = %for.inc, %cond.end
  %13 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !9792
  %14 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %13, i32 0, i32 0, !dbg !9792
  %15 = load i32, i32* %14, align 8, !dbg !9792
  %16 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %13, i32 0, i32 1, !dbg !9792
  %17 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %16, align 8, !dbg !9792
  %call3 = call zeroext i8 @ei_cond(i32 %15, %struct.VEC_edge_gc** %17, %struct.edge_def** %e), !dbg !9792
  %tobool = icmp ne i8 %call3, 0, !dbg !9790
  br i1 %tobool, label %for.body, label %for.end, !dbg !9790

for.body:                                         ; preds = %for.cond
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %to.addr, align 8, !dbg !9794
  %19 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !9795
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %19, i32 0, i32 0, !dbg !9796
  store %struct.basic_block_def* %18, %struct.basic_block_def** %src, align 8, !dbg !9797
  br label %for.inc, !dbg !9795

for.inc:                                          ; preds = %for.body
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !9792
  br label %for.cond, !dbg !9792, !llvm.loop !9798

for.end:                                          ; preds = %for.cond
  %20 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %succsp.addr, align 8, !dbg !9800
  store %struct.VEC_edge_gc* null, %struct.VEC_edge_gc** %20, align 8, !dbg !9801
  ret void, !dbg !9802
}

declare dso_local void @df_mark_solutions_dirty() #2

declare dso_local void @print_insn(i8*, %struct.rtx_def*, i32) #2

declare dso_local void @print_reservation(%struct._IO_FILE*, %struct.rtx_def*) #2

declare dso_local i32 @fputc(i32, %struct._IO_FILE*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @update_reg_and_insn_max_reg_pressure(%struct.rtx_def* %insn) #0 !dbg !9803 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %before = alloca [27 x i32], align 16
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !9804, metadata !DIExpression()), !dbg !9805
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9806, metadata !DIExpression()), !dbg !9807
  call void @llvm.dbg.declare(metadata [27 x i32]* %before, metadata !9808, metadata !DIExpression()), !dbg !9809
  store i32 0, i32* %i, align 4, !dbg !9810
  br label %for.cond, !dbg !9812

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !9813
  %1 = load i32, i32* @ira_reg_class_cover_size, align 4, !dbg !9815
  %cmp = icmp slt i32 %0, %1, !dbg !9816
  br i1 %cmp, label %for.body, label %for.end, !dbg !9817

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4, !dbg !9818
  %idxprom = sext i32 %2 to i64, !dbg !9819
  %arrayidx = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom, !dbg !9819
  %3 = load i32, i32* %arrayidx, align 4, !dbg !9819
  %idxprom1 = zext i32 %3 to i64, !dbg !9820
  %arrayidx2 = getelementptr inbounds [27 x i32], [27 x i32]* @curr_reg_pressure, i64 0, i64 %idxprom1, !dbg !9820
  %4 = load i32, i32* %arrayidx2, align 4, !dbg !9820
  %5 = load i32, i32* %i, align 4, !dbg !9821
  %idxprom3 = sext i32 %5 to i64, !dbg !9822
  %arrayidx4 = getelementptr inbounds [27 x i32], [27 x i32]* %before, i64 0, i64 %idxprom3, !dbg !9822
  store i32 %4, i32* %arrayidx4, align 4, !dbg !9823
  br label %for.inc, !dbg !9822

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4, !dbg !9824
  %inc = add nsw i32 %6, 1, !dbg !9824
  store i32 %inc, i32* %i, align 4, !dbg !9824
  br label %for.cond, !dbg !9825, !llvm.loop !9826

for.end:                                          ; preds = %for.cond
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !9828
  call void @update_register_pressure(%struct.rtx_def* %7), !dbg !9829
  store i32 0, i32* %i, align 4, !dbg !9830
  br label %for.cond5, !dbg !9832

for.cond5:                                        ; preds = %for.inc15, %for.end
  %8 = load i32, i32* %i, align 4, !dbg !9833
  %9 = load i32, i32* @ira_reg_class_cover_size, align 4, !dbg !9835
  %cmp6 = icmp slt i32 %8, %9, !dbg !9836
  br i1 %cmp6, label %for.body7, label %for.end17, !dbg !9837

for.body7:                                        ; preds = %for.cond5
  %10 = load i32, i32* %i, align 4, !dbg !9838
  %idxprom8 = sext i32 %10 to i64, !dbg !9840
  %arrayidx9 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom8, !dbg !9840
  %11 = load i32, i32* %arrayidx9, align 4, !dbg !9840
  %idxprom10 = zext i32 %11 to i64, !dbg !9841
  %arrayidx11 = getelementptr inbounds [27 x i32], [27 x i32]* @curr_reg_pressure, i64 0, i64 %idxprom10, !dbg !9841
  %12 = load i32, i32* %arrayidx11, align 4, !dbg !9841
  %13 = load i32, i32* %i, align 4, !dbg !9842
  %idxprom12 = sext i32 %13 to i64, !dbg !9843
  %arrayidx13 = getelementptr inbounds [27 x i32], [27 x i32]* %before, i64 0, i64 %idxprom12, !dbg !9843
  %14 = load i32, i32* %arrayidx13, align 4, !dbg !9843
  %cmp14 = icmp ne i32 %12, %14, !dbg !9844
  br i1 %cmp14, label %if.then, label %if.end, !dbg !9845

if.then:                                          ; preds = %for.body7
  br label %for.end17, !dbg !9846

if.end:                                           ; preds = %for.body7
  br label %for.inc15, !dbg !9847

for.inc15:                                        ; preds = %if.end
  %15 = load i32, i32* %i, align 4, !dbg !9848
  %inc16 = add nsw i32 %15, 1, !dbg !9848
  store i32 %inc16, i32* %i, align 4, !dbg !9848
  br label %for.cond5, !dbg !9849, !llvm.loop !9850

for.end17:                                        ; preds = %if.then, %for.cond5
  %16 = load i32, i32* %i, align 4, !dbg !9852
  %17 = load i32, i32* @ira_reg_class_cover_size, align 4, !dbg !9854
  %cmp18 = icmp slt i32 %16, %17, !dbg !9855
  br i1 %cmp18, label %if.then19, label %if.end20, !dbg !9856

if.then19:                                        ; preds = %for.end17
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !9857
  call void @setup_insn_max_reg_pressure(%struct.rtx_def* %18, i8 zeroext 1), !dbg !9858
  br label %if.end20, !dbg !9858

if.end20:                                         ; preds = %if.then19, %for.end17
  ret void, !dbg !9859
}

declare dso_local %struct.rtx_def* @gen_rtx_fmt_e_stat(i32, i32, %struct.rtx_def*) #2

declare dso_local zeroext i8 @df_insn_rescan(%struct.rtx_def*) #2

declare dso_local void @sd_delete_dep(%struct._sd_iterator* byval(%struct._sd_iterator) align 8) #2

declare dso_local void @sd_resolve_dep(%struct._sd_iterator* byval(%struct._sd_iterator) align 8) #2

; Function Attrs: noinline nounwind uwtable
define internal void @fix_recovery_deps(%struct.basic_block_def* %rec) #0 !dbg !9860 {
entry:
  %rec.addr = alloca %struct.basic_block_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %jump = alloca %struct.rtx_def*, align 8
  %ready_list = alloca %struct.rtx_def*, align 8
  %in_ready = alloca %struct.bitmap_head_def, align 8
  %link = alloca %struct.rtx_def*, align 8
  %sd_it = alloca %struct._sd_iterator, align 8
  %dep = alloca %struct._dep*, align 8
  %tmp = alloca %struct._sd_iterator, align 8
  %consumer = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def* %rec, %struct.basic_block_def** %rec.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %rec.addr, metadata !9861, metadata !DIExpression()), !dbg !9862
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !9863, metadata !DIExpression()), !dbg !9864
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !9865, metadata !DIExpression()), !dbg !9866
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %jump, metadata !9867, metadata !DIExpression()), !dbg !9868
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %ready_list, metadata !9869, metadata !DIExpression()), !dbg !9870
  store %struct.rtx_def* null, %struct.rtx_def** %ready_list, align 8, !dbg !9870
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def* %in_ready, metadata !9871, metadata !DIExpression()), !dbg !9872
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %link, metadata !9873, metadata !DIExpression()), !dbg !9874
  call void @bitmap_initialize_stat(%struct.bitmap_head_def* %in_ready, %struct.bitmap_obstack* null), !dbg !9875
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %rec.addr, align 8, !dbg !9876
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 7, !dbg !9876
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !9876
  %1 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !9876
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %1, i32 0, i32 0, !dbg !9876
  %2 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !9876
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !9876
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !9876
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !9876
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !9876
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !9876
  store %struct.rtx_def* %3, %struct.rtx_def** %note, align 8, !dbg !9877
  %4 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !9878
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !9878
  %bf.load = load i32, i32* %5, align 8, !dbg !9878
  %bf.clear = and i32 %bf.load, 65535, !dbg !9878
  %cmp = icmp eq i32 %bf.clear, 13, !dbg !9878
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !9878

land.lhs.true:                                    ; preds = %entry
  %6 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !9878
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !9878
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !9878
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 5, !dbg !9878
  %rt_int = bitcast %union.rtunion_def* %arrayidx3 to i32*, !dbg !9878
  %7 = load i32, i32* %rt_int, align 8, !dbg !9878
  %cmp4 = icmp eq i32 %7, 10, !dbg !9878
  br i1 %cmp4, label %cond.false, label %cond.true, !dbg !9878

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 4732, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !9878
  br label %cond.end, !dbg !9878

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !9878

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9878
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %rec.addr, align 8, !dbg !9879
  %il5 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 7, !dbg !9879
  %rtl6 = bitcast %union.basic_block_il_dependent* %il5 to %struct.rtl_bb_info**, !dbg !9879
  %9 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl6, align 8, !dbg !9879
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %9, i32 0, i32 1, !dbg !9879
  %10 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !9879
  store %struct.rtx_def* %10, %struct.rtx_def** %insn, align 8, !dbg !9880
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9881
  %12 = bitcast %struct.rtx_def* %11 to i32*, !dbg !9881
  %bf.load7 = load i32, i32* %12, align 8, !dbg !9881
  %bf.clear8 = and i32 %bf.load7, 65535, !dbg !9881
  %cmp9 = icmp eq i32 %bf.clear8, 9, !dbg !9881
  br i1 %cmp9, label %cond.false11, label %cond.true10, !dbg !9881

cond.true10:                                      ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 4734, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !9881
  br label %cond.end12, !dbg !9881

cond.false11:                                     ; preds = %cond.end
  br label %cond.end12, !dbg !9881

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond13 = phi i32 [ 0, %cond.true10 ], [ 0, %cond.false11 ], !dbg !9881
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9882
  %u14 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !9882
  %fld15 = bitcast %union.u* %u14 to [1 x %union.rtunion_def]*, !dbg !9882
  %arrayidx16 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld15, i64 0, i64 1, !dbg !9882
  %rt_rtx17 = bitcast %union.rtunion_def* %arrayidx16 to %struct.rtx_def**, !dbg !9882
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx17, align 8, !dbg !9882
  store %struct.rtx_def* %14, %struct.rtx_def** %insn, align 8, !dbg !9883
  br label %do.body, !dbg !9884

do.body:                                          ; preds = %do.cond, %cond.end12
  call void @llvm.dbg.declare(metadata %struct._sd_iterator* %sd_it, metadata !9885, metadata !DIExpression()), !dbg !9887
  call void @llvm.dbg.declare(metadata %struct._dep** %dep, metadata !9888, metadata !DIExpression()), !dbg !9889
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9890
  call void @sd_iterator_start(%struct._sd_iterator* sret %tmp, %struct.rtx_def* %15, i32 4), !dbg !9892
  %16 = bitcast %struct._sd_iterator* %sd_it to i8*, !dbg !9892
  %17 = bitcast %struct._sd_iterator* %tmp to i8*, !dbg !9892
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 %17, i64 32, i1 false), !dbg !9892
  br label %for.cond, !dbg !9893

for.cond:                                         ; preds = %if.end53, %do.body
  %call = call zeroext i8 @sd_iterator_cond(%struct._sd_iterator* %sd_it, %struct._dep** %dep), !dbg !9894
  %tobool = icmp ne i8 %call, 0, !dbg !9896
  br i1 %tobool, label %for.body, label %for.end, !dbg !9896

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %consumer, metadata !9897, metadata !DIExpression()), !dbg !9899
  %18 = load %struct._dep*, %struct._dep** %dep, align 8, !dbg !9900
  %con = getelementptr inbounds %struct._dep, %struct._dep* %18, i32 0, i32 1, !dbg !9900
  %19 = load %struct.rtx_def*, %struct.rtx_def** %con, align 8, !dbg !9900
  store %struct.rtx_def* %19, %struct.rtx_def** %consumer, align 8, !dbg !9899
  %20 = load %struct.rtx_def*, %struct.rtx_def** %consumer, align 8, !dbg !9901
  %u18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1, !dbg !9901
  %fld19 = bitcast %union.u* %u18 to [1 x %union.rtunion_def]*, !dbg !9901
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i64 0, i64 3, !dbg !9901
  %rt_bb = bitcast %union.rtunion_def* %arrayidx20 to %struct.basic_block_def**, !dbg !9901
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !9901
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %rec.addr, align 8, !dbg !9903
  %cmp21 = icmp ne %struct.basic_block_def* %21, %22, !dbg !9904
  br i1 %cmp21, label %if.then, label %if.else, !dbg !9905

if.then:                                          ; preds = %for.body
  call void @sd_delete_dep(%struct._sd_iterator* byval(%struct._sd_iterator) align 8 %sd_it), !dbg !9906
  %23 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !9908
  %tobool22 = icmp ne %struct.VEC_int_heap* %23, null, !dbg !9908
  br i1 %tobool22, label %cond.true23, label %cond.false24, !dbg !9908

cond.true23:                                      ; preds = %if.then
  %24 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !9908
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %24, i32 0, i32 0, !dbg !9908
  br label %cond.end25, !dbg !9908

cond.false24:                                     ; preds = %if.then
  br label %cond.end25, !dbg !9908

cond.end25:                                       ; preds = %cond.false24, %cond.true23
  %cond26 = phi %struct.VEC_int_base* [ %base, %cond.true23 ], [ null, %cond.false24 ], !dbg !9908
  %25 = load %struct.rtx_def*, %struct.rtx_def** %consumer, align 8, !dbg !9908
  %u27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1, !dbg !9908
  %fld28 = bitcast %union.u* %u27 to [1 x %union.rtunion_def]*, !dbg !9908
  %arrayidx29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld28, i64 0, i64 0, !dbg !9908
  %rt_int30 = bitcast %union.rtunion_def* %arrayidx29 to i32*, !dbg !9908
  %26 = load i32, i32* %rt_int30, align 8, !dbg !9908
  %call31 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond26, i32 %26), !dbg !9908
  %call32 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %in_ready, i32 %call31), !dbg !9910
  %tobool33 = icmp ne i32 %call32, 0, !dbg !9910
  br i1 %tobool33, label %if.end, label %if.then34, !dbg !9911

if.then34:                                        ; preds = %cond.end25
  %27 = load %struct.rtx_def*, %struct.rtx_def** %consumer, align 8, !dbg !9912
  %28 = load %struct.rtx_def*, %struct.rtx_def** %ready_list, align 8, !dbg !9914
  %call35 = call %struct.rtx_def* @alloc_INSN_LIST(%struct.rtx_def* %27, %struct.rtx_def* %28), !dbg !9915
  store %struct.rtx_def* %call35, %struct.rtx_def** %ready_list, align 8, !dbg !9916
  %29 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !9917
  %tobool36 = icmp ne %struct.VEC_int_heap* %29, null, !dbg !9917
  br i1 %tobool36, label %cond.true37, label %cond.false39, !dbg !9917

cond.true37:                                      ; preds = %if.then34
  %30 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !9917
  %base38 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %30, i32 0, i32 0, !dbg !9917
  br label %cond.end40, !dbg !9917

cond.false39:                                     ; preds = %if.then34
  br label %cond.end40, !dbg !9917

cond.end40:                                       ; preds = %cond.false39, %cond.true37
  %cond41 = phi %struct.VEC_int_base* [ %base38, %cond.true37 ], [ null, %cond.false39 ], !dbg !9917
  %31 = load %struct.rtx_def*, %struct.rtx_def** %consumer, align 8, !dbg !9917
  %u42 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1, !dbg !9917
  %fld43 = bitcast %union.u* %u42 to [1 x %union.rtunion_def]*, !dbg !9917
  %arrayidx44 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld43, i64 0, i64 0, !dbg !9917
  %rt_int45 = bitcast %union.rtunion_def* %arrayidx44 to i32*, !dbg !9917
  %32 = load i32, i32* %rt_int45, align 8, !dbg !9917
  %call46 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond41, i32 %32), !dbg !9917
  %call47 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %in_ready, i32 %call46), !dbg !9918
  br label %if.end, !dbg !9919

if.end:                                           ; preds = %cond.end40, %cond.end25
  br label %if.end53, !dbg !9920

if.else:                                          ; preds = %for.body
  %33 = load %struct._dep*, %struct._dep** %dep, align 8, !dbg !9921
  %status = getelementptr inbounds %struct._dep, %struct._dep* %33, i32 0, i32 3, !dbg !9921
  %34 = load i32, i32* %status, align 4, !dbg !9921
  %and = and i32 %34, 117440512, !dbg !9921
  %cmp48 = icmp eq i32 %and, 16777216, !dbg !9921
  br i1 %cmp48, label %cond.false50, label %cond.true49, !dbg !9921

cond.true49:                                      ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 4759, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !9921
  br label %cond.end51, !dbg !9921

cond.false50:                                     ; preds = %if.else
  br label %cond.end51, !dbg !9921

cond.end51:                                       ; preds = %cond.false50, %cond.true49
  %cond52 = phi i32 [ 0, %cond.true49 ], [ 0, %cond.false50 ], !dbg !9921
  call void @sd_iterator_next(%struct._sd_iterator* %sd_it), !dbg !9923
  br label %if.end53

if.end53:                                         ; preds = %cond.end51, %if.end
  br label %for.cond, !dbg !9924, !llvm.loop !9925

for.end:                                          ; preds = %for.cond
  %35 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9927
  %u54 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1, !dbg !9927
  %fld55 = bitcast %union.u* %u54 to [1 x %union.rtunion_def]*, !dbg !9927
  %arrayidx56 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld55, i64 0, i64 1, !dbg !9927
  %rt_rtx57 = bitcast %union.rtunion_def* %arrayidx56 to %struct.rtx_def**, !dbg !9927
  %36 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx57, align 8, !dbg !9927
  store %struct.rtx_def* %36, %struct.rtx_def** %insn, align 8, !dbg !9928
  br label %do.cond, !dbg !9929

do.cond:                                          ; preds = %for.end
  %37 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9930
  %38 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !9931
  %cmp58 = icmp ne %struct.rtx_def* %37, %38, !dbg !9932
  br i1 %cmp58, label %do.body, label %do.end, !dbg !9929, !llvm.loop !9933

do.end:                                           ; preds = %do.cond
  call void @bitmap_clear(%struct.bitmap_head_def* %in_ready), !dbg !9935
  %39 = load %struct.rtx_def*, %struct.rtx_def** %ready_list, align 8, !dbg !9936
  store %struct.rtx_def* %39, %struct.rtx_def** %link, align 8, !dbg !9938
  br label %for.cond59, !dbg !9939

for.cond59:                                       ; preds = %for.inc, %do.end
  %40 = load %struct.rtx_def*, %struct.rtx_def** %link, align 8, !dbg !9940
  %tobool60 = icmp ne %struct.rtx_def* %40, null, !dbg !9942
  br i1 %tobool60, label %for.body61, label %for.end71, !dbg !9942

for.body61:                                       ; preds = %for.cond59
  %41 = load %struct.rtx_def*, %struct.rtx_def** %link, align 8, !dbg !9943
  %u62 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1, !dbg !9943
  %fld63 = bitcast %union.u* %u62 to [1 x %union.rtunion_def]*, !dbg !9943
  %arrayidx64 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld63, i64 0, i64 0, !dbg !9943
  %rt_rtx65 = bitcast %union.rtunion_def* %arrayidx64 to %struct.rtx_def**, !dbg !9943
  %42 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx65, align 8, !dbg !9943
  %call66 = call i32 @try_ready(%struct.rtx_def* %42), !dbg !9944
  br label %for.inc, !dbg !9944

for.inc:                                          ; preds = %for.body61
  %43 = load %struct.rtx_def*, %struct.rtx_def** %link, align 8, !dbg !9945
  %u67 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %43, i32 0, i32 1, !dbg !9945
  %fld68 = bitcast %union.u* %u67 to [1 x %union.rtunion_def]*, !dbg !9945
  %arrayidx69 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld68, i64 0, i64 1, !dbg !9945
  %rt_rtx70 = bitcast %union.rtunion_def* %arrayidx69 to %struct.rtx_def**, !dbg !9945
  %44 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx70, align 8, !dbg !9945
  store %struct.rtx_def* %44, %struct.rtx_def** %link, align 8, !dbg !9946
  br label %for.cond59, !dbg !9947, !llvm.loop !9948

for.end71:                                        ; preds = %for.cond59
  call void @free_INSN_LIST_list(%struct.rtx_def** %ready_list), !dbg !9950
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %rec.addr, align 8, !dbg !9951
  %il72 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %45, i32 0, i32 7, !dbg !9951
  %rtl73 = bitcast %union.basic_block_il_dependent* %il72 to %struct.rtl_bb_info**, !dbg !9951
  %46 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl73, align 8, !dbg !9951
  %head_74 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %46, i32 0, i32 0, !dbg !9951
  %47 = load %struct.rtx_def*, %struct.rtx_def** %head_74, align 8, !dbg !9951
  store %struct.rtx_def* %47, %struct.rtx_def** %insn, align 8, !dbg !9952
  %48 = load %struct.basic_block_def*, %struct.basic_block_def** %rec.addr, align 8, !dbg !9953
  %il75 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %48, i32 0, i32 7, !dbg !9953
  %rtl76 = bitcast %union.basic_block_il_dependent* %il75 to %struct.rtl_bb_info**, !dbg !9953
  %49 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl76, align 8, !dbg !9953
  %end_77 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %49, i32 0, i32 1, !dbg !9953
  %50 = load %struct.rtx_def*, %struct.rtx_def** %end_77, align 8, !dbg !9953
  store %struct.rtx_def* %50, %struct.rtx_def** %jump, align 8, !dbg !9954
  %51 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9955
  %52 = bitcast %struct.rtx_def* %51 to i32*, !dbg !9955
  %bf.load78 = load i32, i32* %52, align 8, !dbg !9955
  %bf.clear79 = and i32 %bf.load78, 65535, !dbg !9955
  %cmp80 = icmp eq i32 %bf.clear79, 12, !dbg !9955
  br i1 %cmp80, label %cond.false82, label %cond.true81, !dbg !9955

cond.true81:                                      ; preds = %for.end71
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 4780, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !9955
  br label %cond.end83, !dbg !9955

cond.false82:                                     ; preds = %for.end71
  br label %cond.end83, !dbg !9955

cond.end83:                                       ; preds = %cond.false82, %cond.true81
  %cond84 = phi i32 [ 0, %cond.true81 ], [ 0, %cond.false82 ], !dbg !9955
  %53 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9956
  %u85 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %53, i32 0, i32 1, !dbg !9956
  %fld86 = bitcast %union.u* %u85 to [1 x %union.rtunion_def]*, !dbg !9956
  %arrayidx87 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld86, i64 0, i64 2, !dbg !9956
  %rt_rtx88 = bitcast %union.rtunion_def* %arrayidx87 to %struct.rtx_def**, !dbg !9956
  %54 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx88, align 8, !dbg !9956
  store %struct.rtx_def* %54, %struct.rtx_def** %insn, align 8, !dbg !9957
  %55 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9958
  %56 = bitcast %struct.rtx_def* %55 to i32*, !dbg !9958
  %bf.load89 = load i32, i32* %56, align 8, !dbg !9958
  %bf.clear90 = and i32 %bf.load89, 65535, !dbg !9958
  %cmp91 = icmp eq i32 %bf.clear90, 13, !dbg !9958
  br i1 %cmp91, label %land.lhs.true92, label %cond.true98, !dbg !9958

land.lhs.true92:                                  ; preds = %cond.end83
  %57 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9958
  %u93 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %57, i32 0, i32 1, !dbg !9958
  %fld94 = bitcast %union.u* %u93 to [1 x %union.rtunion_def]*, !dbg !9958
  %arrayidx95 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld94, i64 0, i64 5, !dbg !9958
  %rt_int96 = bitcast %union.rtunion_def* %arrayidx95 to i32*, !dbg !9958
  %58 = load i32, i32* %rt_int96, align 8, !dbg !9958
  %cmp97 = icmp eq i32 %58, 10, !dbg !9958
  br i1 %cmp97, label %cond.false99, label %cond.true98, !dbg !9958

cond.true98:                                      ; preds = %land.lhs.true92, %cond.end83
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 4783, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !9958
  br label %cond.end100, !dbg !9958

cond.false99:                                     ; preds = %land.lhs.true92
  br label %cond.end100, !dbg !9958

cond.end100:                                      ; preds = %cond.false99, %cond.true98
  %cond101 = phi i32 [ 0, %cond.true98 ], [ 0, %cond.false99 ], !dbg !9958
  %59 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9959
  %60 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !9960
  call void @add_jump_dependencies(%struct.rtx_def* %59, %struct.rtx_def* %60), !dbg !9961
  ret void, !dbg !9962
}

; Function Attrs: noinline nounwind uwtable
define internal void @bitmap_initialize_stat(%struct.bitmap_head_def* %head, %struct.bitmap_obstack* %obstack) #0 !dbg !9963 {
entry:
  %head.addr = alloca %struct.bitmap_head_def*, align 8
  %obstack.addr = alloca %struct.bitmap_obstack*, align 8
  store %struct.bitmap_head_def* %head, %struct.bitmap_head_def** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %head.addr, metadata !9966, metadata !DIExpression()), !dbg !9967
  store %struct.bitmap_obstack* %obstack, %struct.bitmap_obstack** %obstack.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_obstack** %obstack.addr, metadata !9968, metadata !DIExpression()), !dbg !9969
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %head.addr, align 8, !dbg !9970
  %current = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %0, i32 0, i32 1, !dbg !9971
  store %struct.bitmap_element_def* null, %struct.bitmap_element_def** %current, align 8, !dbg !9972
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %head.addr, align 8, !dbg !9973
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %1, i32 0, i32 0, !dbg !9974
  store %struct.bitmap_element_def* null, %struct.bitmap_element_def** %first, align 8, !dbg !9975
  %2 = load %struct.bitmap_obstack*, %struct.bitmap_obstack** %obstack.addr, align 8, !dbg !9976
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %head.addr, align 8, !dbg !9977
  %obstack1 = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %3, i32 0, i32 3, !dbg !9978
  store %struct.bitmap_obstack* %2, %struct.bitmap_obstack** %obstack1, align 8, !dbg !9979
  ret void, !dbg !9980
}

; Function Attrs: noinline nounwind uwtable
define internal void @add_jump_dependencies(%struct.rtx_def* %insn, %struct.rtx_def* %jump) #0 !dbg !9981 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %jump.addr = alloca %struct.rtx_def*, align 8
  %_new_dep = alloca %struct._dep, align 8
  %new_dep = alloca %struct._dep*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !9982, metadata !DIExpression()), !dbg !9983
  store %struct.rtx_def* %jump, %struct.rtx_def** %jump.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %jump.addr, metadata !9984, metadata !DIExpression()), !dbg !9985
  br label %do.body, !dbg !9986

do.body:                                          ; preds = %do.cond, %entry
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !9987
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !9987
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !9987
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !9987
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !9987
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !9987
  store %struct.rtx_def* %1, %struct.rtx_def** %insn.addr, align 8, !dbg !9989
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !9990
  %3 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !9992
  %cmp = icmp eq %struct.rtx_def* %2, %3, !dbg !9993
  br i1 %cmp, label %if.then, label %if.end, !dbg !9994

if.then:                                          ; preds = %do.body
  br label %do.end, !dbg !9995

if.end:                                           ; preds = %do.body
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !9996
  %call = call i32 @dep_list_size(%struct.rtx_def* %4), !dbg !9998
  %cmp1 = icmp eq i32 %call, 0, !dbg !9999
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !10000

if.then2:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct._dep* %_new_dep, metadata !10001, metadata !DIExpression()), !dbg !10003
  call void @llvm.dbg.declare(metadata %struct._dep** %new_dep, metadata !10004, metadata !DIExpression()), !dbg !10005
  store %struct._dep* %_new_dep, %struct._dep** %new_dep, align 8, !dbg !10005
  %5 = load %struct._dep*, %struct._dep** %new_dep, align 8, !dbg !10006
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10007
  %7 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !10008
  call void @init_dep(%struct._dep* %5, %struct.rtx_def* %6, %struct.rtx_def* %7, i32 12), !dbg !10009
  %8 = load %struct._dep*, %struct._dep** %new_dep, align 8, !dbg !10010
  call void @sd_add_dep(%struct._dep* %8, i8 zeroext 0), !dbg !10011
  br label %if.end3, !dbg !10012

if.end3:                                          ; preds = %if.then2, %if.end
  br label %do.cond, !dbg !10013

do.cond:                                          ; preds = %if.end3
  br i1 true, label %do.body, label %do.end, !dbg !10013, !llvm.loop !10014

do.end:                                           ; preds = %do.cond, %if.then
  %9 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !10016
  %call4 = call zeroext i8 @sd_lists_empty_p(%struct.rtx_def* %9, i32 3), !dbg !10016
  %tobool = icmp ne i8 %call4, 0, !dbg !10016
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10016

cond.true:                                        ; preds = %do.end
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 5119, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !10016
  br label %cond.end, !dbg !10016

cond.false:                                       ; preds = %do.end
  br label %cond.end, !dbg !10016

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10016
  ret void, !dbg !10017
}

declare dso_local void @init_dep(%struct._dep*, %struct.rtx_def*, %struct.rtx_def*, i32) #2

declare dso_local void @sd_add_dep(%struct._dep*, i8 zeroext) #2

declare dso_local i32 @print_rtl_single(%struct._IO_FILE*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ok_for_early_queue_removal(%struct.rtx_def* %insn) #0 !dbg !10018 {
entry:
  %retval = alloca i8, align 1
  %insn.addr = alloca %struct.rtx_def*, align 8
  %n_cycles = alloca i32, align 4
  %prev_insn = alloca %struct.rtx_def*, align 8
  %cost = alloca i32, align 4
  %dep = alloca %struct._dep*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !10019, metadata !DIExpression()), !dbg !10020
  call void @llvm.dbg.declare(metadata i32* %n_cycles, metadata !10021, metadata !DIExpression()), !dbg !10022
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %prev_insn, metadata !10023, metadata !DIExpression()), !dbg !10024
  %0 = load %struct.rtx_def*, %struct.rtx_def** @last_scheduled_insn, align 8, !dbg !10025
  store %struct.rtx_def* %0, %struct.rtx_def** %prev_insn, align 8, !dbg !10024
  %1 = load i8 (%struct._dep*, i32, i32)*, i8 (%struct._dep*, i32, i32)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 20), align 8, !dbg !10026
  %tobool = icmp ne i8 (%struct._dep*, i32, i32)* %1, null, !dbg !10028
  br i1 %tobool, label %if.then, label %if.end31, !dbg !10029

if.then:                                          ; preds = %entry
  %2 = load i32, i32* @flag_sched_stalled_insns_dep, align 4, !dbg !10030
  store i32 %2, i32* %n_cycles, align 4, !dbg !10033
  br label %for.cond, !dbg !10034

for.cond:                                         ; preds = %for.inc29, %if.then
  %3 = load i32, i32* %n_cycles, align 4, !dbg !10035
  %tobool1 = icmp ne i32 %3, 0, !dbg !10037
  br i1 %tobool1, label %for.body, label %for.end30, !dbg !10037

for.body:                                         ; preds = %for.cond
  br label %for.cond2, !dbg !10038

for.cond2:                                        ; preds = %for.inc, %for.body
  %4 = load %struct.rtx_def*, %struct.rtx_def** %prev_insn, align 8, !dbg !10040
  %tobool3 = icmp ne %struct.rtx_def* %4, null, !dbg !10043
  br i1 %tobool3, label %for.body4, label %for.end, !dbg !10043

for.body4:                                        ; preds = %for.cond2
  call void @llvm.dbg.declare(metadata i32* %cost, metadata !10044, metadata !DIExpression()), !dbg !10046
  %5 = load %struct.rtx_def*, %struct.rtx_def** %prev_insn, align 8, !dbg !10047
  %6 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !10049
  %prev_head = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %6, i32 0, i32 8, !dbg !10050
  %7 = load %struct.rtx_def*, %struct.rtx_def** %prev_head, align 8, !dbg !10050
  %cmp = icmp eq %struct.rtx_def* %5, %7, !dbg !10051
  br i1 %cmp, label %if.then5, label %if.end, !dbg !10052

if.then5:                                         ; preds = %for.body4
  store %struct.rtx_def* null, %struct.rtx_def** %prev_insn, align 8, !dbg !10053
  br label %for.end, !dbg !10055

if.end:                                           ; preds = %for.body4
  %8 = load %struct.rtx_def*, %struct.rtx_def** %prev_insn, align 8, !dbg !10056
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !10056
  %bf.load = load i32, i32* %9, align 8, !dbg !10056
  %bf.clear = and i32 %bf.load, 65535, !dbg !10056
  %cmp6 = icmp eq i32 %bf.clear, 13, !dbg !10056
  br i1 %cmp6, label %if.end16, label %if.then7, !dbg !10058

if.then7:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct._dep** %dep, metadata !10059, metadata !DIExpression()), !dbg !10061
  %10 = load %struct.rtx_def*, %struct.rtx_def** %prev_insn, align 8, !dbg !10062
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10063
  %call = call %struct._dep* @sd_find_dep_between(%struct.rtx_def* %10, %struct.rtx_def* %11, i8 zeroext 1), !dbg !10064
  store %struct._dep* %call, %struct._dep** %dep, align 8, !dbg !10065
  %12 = load %struct._dep*, %struct._dep** %dep, align 8, !dbg !10066
  %cmp8 = icmp ne %struct._dep* %12, null, !dbg !10068
  br i1 %cmp8, label %if.then9, label %if.end15, !dbg !10069

if.then9:                                         ; preds = %if.then7
  %13 = load %struct._dep*, %struct._dep** %dep, align 8, !dbg !10070
  %call10 = call i32 @dep_cost(%struct._dep* %13), !dbg !10072
  store i32 %call10, i32* %cost, align 4, !dbg !10073
  %14 = load i8 (%struct._dep*, i32, i32)*, i8 (%struct._dep*, i32, i32)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 20), align 8, !dbg !10074
  %15 = load %struct._dep*, %struct._dep** %dep, align 8, !dbg !10076
  %16 = load i32, i32* %cost, align 4, !dbg !10077
  %17 = load i32, i32* @flag_sched_stalled_insns_dep, align 4, !dbg !10078
  %18 = load i32, i32* %n_cycles, align 4, !dbg !10079
  %sub = sub nsw i32 %17, %18, !dbg !10080
  %call11 = call zeroext i8 %14(%struct._dep* %15, i32 %16, i32 %sub), !dbg !10081
  %tobool12 = icmp ne i8 %call11, 0, !dbg !10081
  br i1 %tobool12, label %if.then13, label %if.end14, !dbg !10082

if.then13:                                        ; preds = %if.then9
  store i8 0, i8* %retval, align 1, !dbg !10083
  br label %return, !dbg !10083

if.end14:                                         ; preds = %if.then9
  br label %if.end15, !dbg !10084

if.end15:                                         ; preds = %if.end14, %if.then7
  br label %if.end16, !dbg !10085

if.end16:                                         ; preds = %if.end15, %if.end
  %19 = load %struct.rtx_def*, %struct.rtx_def** %prev_insn, align 8, !dbg !10086
  %20 = bitcast %struct.rtx_def* %19 to i32*, !dbg !10086
  %bf.load17 = load i32, i32* %20, align 8, !dbg !10086
  %bf.lshr = lshr i32 %bf.load17, 16, !dbg !10086
  %bf.clear18 = and i32 %bf.lshr, 255, !dbg !10086
  %cmp19 = icmp eq i32 %bf.clear18, 18, !dbg !10088
  br i1 %cmp19, label %if.then20, label %if.end21, !dbg !10089

if.then20:                                        ; preds = %if.end16
  br label %for.end, !dbg !10090

if.end21:                                         ; preds = %if.end16
  br label %for.inc, !dbg !10091

for.inc:                                          ; preds = %if.end21
  %21 = load %struct.rtx_def*, %struct.rtx_def** %prev_insn, align 8, !dbg !10092
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !10092
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !10092
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !10092
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !10092
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !10092
  store %struct.rtx_def* %22, %struct.rtx_def** %prev_insn, align 8, !dbg !10093
  br label %for.cond2, !dbg !10094, !llvm.loop !10095

for.end:                                          ; preds = %if.then20, %if.then5, %for.cond2
  %23 = load %struct.rtx_def*, %struct.rtx_def** %prev_insn, align 8, !dbg !10097
  %tobool22 = icmp ne %struct.rtx_def* %23, null, !dbg !10097
  br i1 %tobool22, label %if.end24, label %if.then23, !dbg !10099

if.then23:                                        ; preds = %for.end
  br label %for.end30, !dbg !10100

if.end24:                                         ; preds = %for.end
  %24 = load %struct.rtx_def*, %struct.rtx_def** %prev_insn, align 8, !dbg !10101
  %u25 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1, !dbg !10101
  %fld26 = bitcast %union.u* %u25 to [1 x %union.rtunion_def]*, !dbg !10101
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i64 0, i64 1, !dbg !10101
  %rt_rtx28 = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtx_def**, !dbg !10101
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx28, align 8, !dbg !10101
  store %struct.rtx_def* %25, %struct.rtx_def** %prev_insn, align 8, !dbg !10102
  br label %for.inc29, !dbg !10103

for.inc29:                                        ; preds = %if.end24
  %26 = load i32, i32* %n_cycles, align 4, !dbg !10104
  %dec = add nsw i32 %26, -1, !dbg !10104
  store i32 %dec, i32* %n_cycles, align 4, !dbg !10104
  br label %for.cond, !dbg !10105, !llvm.loop !10106

for.end30:                                        ; preds = %if.then23, %for.cond
  br label %if.end31, !dbg !10108

if.end31:                                         ; preds = %for.end30, %entry
  store i8 1, i8* %retval, align 1, !dbg !10109
  br label %return, !dbg !10109

return:                                           ; preds = %if.end31, %if.then13
  %27 = load i8, i8* %retval, align 1, !dbg !10110
  ret i8 %27, !dbg !10110
}

; Function Attrs: noinline nounwind uwtable
define internal void @ready_remove_insn(%struct.rtx_def* %insn) #0 !dbg !10111 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !10112, metadata !DIExpression()), !dbg !10113
  call void @llvm.dbg.declare(metadata i32* %i, metadata !10114, metadata !DIExpression()), !dbg !10115
  store i32 0, i32* %i, align 4, !dbg !10116
  br label %for.cond, !dbg !10118

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !10119
  %1 = load %struct.ready_list*, %struct.ready_list** @readyp, align 8, !dbg !10121
  %n_ready = getelementptr inbounds %struct.ready_list, %struct.ready_list* %1, i32 0, i32 3, !dbg !10122
  %2 = load i32, i32* %n_ready, align 8, !dbg !10122
  %cmp = icmp slt i32 %0, %2, !dbg !10123
  br i1 %cmp, label %for.body, label %for.end, !dbg !10124

for.body:                                         ; preds = %for.cond
  %3 = load %struct.ready_list*, %struct.ready_list** @readyp, align 8, !dbg !10125
  %4 = load i32, i32* %i, align 4, !dbg !10127
  %call = call %struct.rtx_def* @ready_element(%struct.ready_list* %3, i32 %4), !dbg !10128
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10129
  %cmp1 = icmp eq %struct.rtx_def* %call, %5, !dbg !10130
  br i1 %cmp1, label %if.then, label %if.end, !dbg !10131

if.then:                                          ; preds = %for.body
  %6 = load %struct.ready_list*, %struct.ready_list** @readyp, align 8, !dbg !10132
  %7 = load i32, i32* %i, align 4, !dbg !10134
  %call2 = call %struct.rtx_def* @ready_remove(%struct.ready_list* %6, i32 %7), !dbg !10135
  br label %return, !dbg !10136

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !10129

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %i, align 4, !dbg !10137
  %inc = add nsw i32 %8, 1, !dbg !10137
  store i32 %inc, i32* %i, align 4, !dbg !10137
  br label %for.cond, !dbg !10138, !llvm.loop !10139

for.end:                                          ; preds = %for.cond
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 1496, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !10141
  br label %return, !dbg !10142

return:                                           ; preds = %for.end, %if.then
  ret void, !dbg !10142
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @contributes_to_priority_p(%struct._dep* %dep) #0 !dbg !10143 {
entry:
  %retval = alloca i8, align 1
  %dep.addr = alloca %struct._dep*, align 8
  store %struct._dep* %dep, %struct._dep** %dep.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._dep** %dep.addr, metadata !10146, metadata !DIExpression()), !dbg !10147
  %0 = load %struct._dep*, %struct._dep** %dep.addr, align 8, !dbg !10148
  %con = getelementptr inbounds %struct._dep, %struct._dep* %0, i32 0, i32 1, !dbg !10148
  %1 = load %struct.rtx_def*, %struct.rtx_def** %con, align 8, !dbg !10148
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !10148
  %bf.load = load i32, i32* %2, align 8, !dbg !10148
  %bf.clear = and i32 %bf.load, 65535, !dbg !10148
  %cmp = icmp eq i32 %bf.clear, 7, !dbg !10148
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !10150

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct._dep*, %struct._dep** %dep.addr, align 8, !dbg !10151
  %pro = getelementptr inbounds %struct._dep, %struct._dep* %3, i32 0, i32 0, !dbg !10151
  %4 = load %struct.rtx_def*, %struct.rtx_def** %pro, align 8, !dbg !10151
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !10151
  %bf.load1 = load i32, i32* %5, align 8, !dbg !10151
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !10151
  %cmp3 = icmp eq i32 %bf.clear2, 7, !dbg !10151
  br i1 %cmp3, label %if.then, label %if.end, !dbg !10152

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8 0, i8* %retval, align 1, !dbg !10153
  br label %return, !dbg !10153

if.end:                                           ; preds = %lor.lhs.false
  %6 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !10154
  %contributes_to_priority = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %6, i32 0, i32 6, !dbg !10156
  %7 = load i32 (%struct.rtx_def*, %struct.rtx_def*)*, i32 (%struct.rtx_def*, %struct.rtx_def*)** %contributes_to_priority, align 8, !dbg !10156
  %8 = load %struct._dep*, %struct._dep** %dep.addr, align 8, !dbg !10157
  %con4 = getelementptr inbounds %struct._dep, %struct._dep* %8, i32 0, i32 1, !dbg !10157
  %9 = load %struct.rtx_def*, %struct.rtx_def** %con4, align 8, !dbg !10157
  %10 = load %struct._dep*, %struct._dep** %dep.addr, align 8, !dbg !10158
  %pro5 = getelementptr inbounds %struct._dep, %struct._dep* %10, i32 0, i32 0, !dbg !10158
  %11 = load %struct.rtx_def*, %struct.rtx_def** %pro5, align 8, !dbg !10158
  %call = call i32 %7(%struct.rtx_def* %9, %struct.rtx_def* %11), !dbg !10154
  %tobool = icmp ne i32 %call, 0, !dbg !10154
  br i1 %tobool, label %if.end7, label %if.then6, !dbg !10159

if.then6:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !10160
  br label %return, !dbg !10160

if.end7:                                          ; preds = %if.end
  %12 = load %struct.sched_deps_info_def*, %struct.sched_deps_info_def** @sched_deps_info, align 8, !dbg !10161
  %generate_spec_deps = getelementptr inbounds %struct.sched_deps_info_def, %struct.sched_deps_info_def* %12, i32 0, i32 12, !dbg !10163
  %bf.load8 = load i8, i8* %generate_spec_deps, align 8, !dbg !10163
  %bf.lshr = lshr i8 %bf.load8, 2, !dbg !10163
  %bf.clear9 = and i8 %bf.lshr, 1, !dbg !10163
  %bf.cast = zext i8 %bf.clear9 to i32, !dbg !10163
  %tobool10 = icmp ne i32 %bf.cast, 0, !dbg !10161
  br i1 %tobool10, label %land.lhs.true, label %if.end16, !dbg !10164

land.lhs.true:                                    ; preds = %if.end7
  %13 = load %struct.spec_info_def*, %struct.spec_info_def** @spec_info, align 8, !dbg !10165
  %flags = getelementptr inbounds %struct.spec_info_def, %struct.spec_info_def* %13, i32 0, i32 4, !dbg !10166
  %14 = load i32, i32* %flags, align 8, !dbg !10166
  %and = and i32 %14, 1, !dbg !10167
  %tobool11 = icmp ne i32 %and, 0, !dbg !10167
  br i1 %tobool11, label %if.end16, label %land.lhs.true12, !dbg !10168

land.lhs.true12:                                  ; preds = %land.lhs.true
  %15 = load %struct._dep*, %struct._dep** %dep.addr, align 8, !dbg !10169
  %status = getelementptr inbounds %struct._dep, %struct._dep* %15, i32 0, i32 3, !dbg !10169
  %16 = load i32, i32* %status, align 4, !dbg !10169
  %and13 = and i32 %16, 16777215, !dbg !10170
  %tobool14 = icmp ne i32 %and13, 0, !dbg !10170
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !10171

if.then15:                                        ; preds = %land.lhs.true12
  store i8 0, i8* %retval, align 1, !dbg !10172
  br label %return, !dbg !10172

if.end16:                                         ; preds = %land.lhs.true12, %land.lhs.true, %if.end7
  store i8 1, i8* %retval, align 1, !dbg !10173
  br label %return, !dbg !10173

return:                                           ; preds = %if.end16, %if.then15, %if.then6, %if.then
  %17 = load i8, i8* %retval, align 1, !dbg !10174
  ret i8 %17, !dbg !10174
}

declare dso_local i8* @vec_heap_p_reserve_exact(i8*, i32) #2

declare dso_local void @sd_next_list(%struct.rtx_def*, i32*, %struct._deps_list**, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @queue_remove(%struct.rtx_def* %insn) #0 !dbg !10175 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !10176, metadata !DIExpression()), !dbg !10177
  %0 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10178
  %tobool = icmp ne %struct.VEC_haifa_insn_data_def_heap* %0, null, !dbg !10178
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10178

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10178
  %base = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %1, i32 0, i32 0, !dbg !10178
  br label %cond.end, !dbg !10178

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10178

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_haifa_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !10178
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10178
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !10178
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !10178
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !10178
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !10178
  %3 = load i32, i32* %rt_int, align 8, !dbg !10178
  %call = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond, i32 %3), !dbg !10178
  %queue_index = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call, i32 0, i32 4, !dbg !10178
  %4 = load i32, i32* %queue_index, align 8, !dbg !10178
  %cmp = icmp sge i32 %4, 0, !dbg !10178
  br i1 %cmp, label %cond.false2, label %cond.true1, !dbg !10178

cond.true1:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 1367, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !10178
  br label %cond.end3, !dbg !10178

cond.false2:                                      ; preds = %cond.end
  br label %cond.end3, !dbg !10178

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond4 = phi i32 [ 0, %cond.true1 ], [ 0, %cond.false2 ], !dbg !10178
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10179
  %6 = load %struct.rtx_def**, %struct.rtx_def*** @insn_queue, align 8, !dbg !10180
  %7 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10181
  %tobool5 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %7, null, !dbg !10181
  br i1 %tobool5, label %cond.true6, label %cond.false8, !dbg !10181

cond.true6:                                       ; preds = %cond.end3
  %8 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10181
  %base7 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %8, i32 0, i32 0, !dbg !10181
  br label %cond.end9, !dbg !10181

cond.false8:                                      ; preds = %cond.end3
  br label %cond.end9, !dbg !10181

cond.end9:                                        ; preds = %cond.false8, %cond.true6
  %cond10 = phi %struct.VEC_haifa_insn_data_def_base* [ %base7, %cond.true6 ], [ null, %cond.false8 ], !dbg !10181
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10181
  %u11 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !10181
  %fld12 = bitcast %union.u* %u11 to [1 x %union.rtunion_def]*, !dbg !10181
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i64 0, i64 0, !dbg !10181
  %rt_int14 = bitcast %union.rtunion_def* %arrayidx13 to i32*, !dbg !10181
  %10 = load i32, i32* %rt_int14, align 8, !dbg !10181
  %call15 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond10, i32 %10), !dbg !10181
  %queue_index16 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call15, i32 0, i32 4, !dbg !10181
  %11 = load i32, i32* %queue_index16, align 8, !dbg !10181
  %idxprom = sext i32 %11 to i64, !dbg !10180
  %arrayidx17 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 %idxprom, !dbg !10180
  call void @remove_free_INSN_LIST_elem(%struct.rtx_def* %5, %struct.rtx_def** %arrayidx17), !dbg !10182
  %12 = load i32, i32* @q_size, align 4, !dbg !10183
  %dec = add nsw i32 %12, -1, !dbg !10183
  store i32 %dec, i32* @q_size, align 4, !dbg !10183
  %13 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10184
  %tobool18 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %13, null, !dbg !10184
  br i1 %tobool18, label %cond.true19, label %cond.false21, !dbg !10184

cond.true19:                                      ; preds = %cond.end9
  %14 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10184
  %base20 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %14, i32 0, i32 0, !dbg !10184
  br label %cond.end22, !dbg !10184

cond.false21:                                     ; preds = %cond.end9
  br label %cond.end22, !dbg !10184

cond.end22:                                       ; preds = %cond.false21, %cond.true19
  %cond23 = phi %struct.VEC_haifa_insn_data_def_base* [ %base20, %cond.true19 ], [ null, %cond.false21 ], !dbg !10184
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10184
  %u24 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !10184
  %fld25 = bitcast %union.u* %u24 to [1 x %union.rtunion_def]*, !dbg !10184
  %arrayidx26 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld25, i64 0, i64 0, !dbg !10184
  %rt_int27 = bitcast %union.rtunion_def* %arrayidx26 to i32*, !dbg !10184
  %16 = load i32, i32* %rt_int27, align 8, !dbg !10184
  %call28 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond23, i32 %16), !dbg !10184
  %queue_index29 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call28, i32 0, i32 4, !dbg !10184
  store i32 -2, i32* %queue_index29, align 8, !dbg !10185
  ret void, !dbg !10186
}

declare dso_local void @remove_free_INSN_LIST_elem(%struct.rtx_def*, %struct.rtx_def**) #2

; Function Attrs: noinline nounwind uwtable
define internal void @begin_speculative_block(%struct.rtx_def* %insn) #0 !dbg !10187 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !10188, metadata !DIExpression()), !dbg !10189
  %0 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10190
  %tobool = icmp ne %struct.VEC_haifa_insn_data_def_heap* %0, null, !dbg !10190
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10190

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10190
  %base = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %1, i32 0, i32 0, !dbg !10190
  br label %cond.end, !dbg !10190

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10190

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_haifa_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !10190
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10190
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !10190
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !10190
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !10190
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !10190
  %3 = load i32, i32* %rt_int, align 8, !dbg !10190
  %call = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond, i32 %3), !dbg !10190
  %todo_spec = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call, i32 0, i32 8, !dbg !10190
  %4 = load i32, i32* %todo_spec, align 8, !dbg !10190
  %and = and i32 %4, 63, !dbg !10192
  %tobool1 = icmp ne i32 %and, 0, !dbg !10192
  br i1 %tobool1, label %if.then, label %if.end, !dbg !10193

if.then:                                          ; preds = %cond.end
  %5 = load i32, i32* @nr_begin_data, align 4, !dbg !10194
  %inc = add nsw i32 %5, 1, !dbg !10194
  store i32 %inc, i32* @nr_begin_data, align 4, !dbg !10194
  br label %if.end, !dbg !10195

if.end:                                           ; preds = %if.then, %cond.end
  %6 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10196
  %tobool2 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %6, null, !dbg !10196
  br i1 %tobool2, label %cond.true3, label %cond.false5, !dbg !10196

cond.true3:                                       ; preds = %if.end
  %7 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10196
  %base4 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %7, i32 0, i32 0, !dbg !10196
  br label %cond.end6, !dbg !10196

cond.false5:                                      ; preds = %if.end
  br label %cond.end6, !dbg !10196

cond.end6:                                        ; preds = %cond.false5, %cond.true3
  %cond7 = phi %struct.VEC_haifa_insn_data_def_base* [ %base4, %cond.true3 ], [ null, %cond.false5 ], !dbg !10196
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10196
  %u8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !10196
  %fld9 = bitcast %union.u* %u8 to [1 x %union.rtunion_def]*, !dbg !10196
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i64 0, i64 0, !dbg !10196
  %rt_int11 = bitcast %union.rtunion_def* %arrayidx10 to i32*, !dbg !10196
  %9 = load i32, i32* %rt_int11, align 8, !dbg !10196
  %call12 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond7, i32 %9), !dbg !10196
  %todo_spec13 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call12, i32 0, i32 8, !dbg !10196
  %10 = load i32, i32* %todo_spec13, align 8, !dbg !10196
  %and14 = and i32 %10, 258048, !dbg !10198
  %tobool15 = icmp ne i32 %and14, 0, !dbg !10198
  br i1 %tobool15, label %if.then16, label %if.end18, !dbg !10199

if.then16:                                        ; preds = %cond.end6
  %11 = load i32, i32* @nr_begin_control, align 4, !dbg !10200
  %inc17 = add nsw i32 %11, 1, !dbg !10200
  store i32 %inc17, i32* @nr_begin_control, align 4, !dbg !10200
  br label %if.end18, !dbg !10201

if.end18:                                         ; preds = %if.then16, %cond.end6
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10202
  call void @create_check_block_twin(%struct.rtx_def* %12, i8 zeroext 0), !dbg !10203
  %13 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10204
  %tobool19 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %13, null, !dbg !10204
  br i1 %tobool19, label %cond.true20, label %cond.false22, !dbg !10204

cond.true20:                                      ; preds = %if.end18
  %14 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10204
  %base21 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %14, i32 0, i32 0, !dbg !10204
  br label %cond.end23, !dbg !10204

cond.false22:                                     ; preds = %if.end18
  br label %cond.end23, !dbg !10204

cond.end23:                                       ; preds = %cond.false22, %cond.true20
  %cond24 = phi %struct.VEC_haifa_insn_data_def_base* [ %base21, %cond.true20 ], [ null, %cond.false22 ], !dbg !10204
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10204
  %u25 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !10204
  %fld26 = bitcast %union.u* %u25 to [1 x %union.rtunion_def]*, !dbg !10204
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i64 0, i64 0, !dbg !10204
  %rt_int28 = bitcast %union.rtunion_def* %arrayidx27 to i32*, !dbg !10204
  %16 = load i32, i32* %rt_int28, align 8, !dbg !10204
  %call29 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond24, i32 %16), !dbg !10204
  %todo_spec30 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call29, i32 0, i32 8, !dbg !10204
  %17 = load i32, i32* %todo_spec30, align 8, !dbg !10205
  %and31 = and i32 %17, -258112, !dbg !10205
  store i32 %and31, i32* %todo_spec30, align 8, !dbg !10205
  ret void, !dbg !10206
}

; Function Attrs: noinline nounwind uwtable
define internal void @add_to_speculative_block(%struct.rtx_def* %insn) #0 !dbg !10207 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %ts = alloca i32, align 4
  %sd_it = alloca %struct._sd_iterator, align 8
  %dep = alloca %struct._dep*, align 8
  %twins = alloca %struct.rtx_def*, align 8
  %priorities_roots = alloca %struct.VEC_rtx_heap*, align 8
  %tmp = alloca %struct._sd_iterator, align 8
  %check = alloca %struct.rtx_def*, align 8
  %tmp68 = alloca %struct._sd_iterator, align 8
  %check70 = alloca %struct.rtx_def*, align 8
  %twin = alloca %struct.rtx_def*, align 8
  %rec = alloca %struct.basic_block_def*, align 8
  %tmp71 = alloca %struct._sd_iterator, align 8
  %tmp162 = alloca %struct._sd_iterator, align 8
  %pro167 = alloca %struct.rtx_def*, align 8
  %_new_dep = alloca %struct._dep, align 8
  %new_dep = alloca %struct._dep*, align 8
  %tmp184 = alloca %struct._sd_iterator, align 8
  %pro189 = alloca %struct.rtx_def*, align 8
  %twin203 = alloca %struct.rtx_def*, align 8
  %_new_dep208 = alloca %struct._dep, align 8
  %new_dep209 = alloca %struct._dep*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !10208, metadata !DIExpression()), !dbg !10209
  call void @llvm.dbg.declare(metadata i32* %ts, metadata !10210, metadata !DIExpression()), !dbg !10211
  call void @llvm.dbg.declare(metadata %struct._sd_iterator* %sd_it, metadata !10212, metadata !DIExpression()), !dbg !10213
  call void @llvm.dbg.declare(metadata %struct._dep** %dep, metadata !10214, metadata !DIExpression()), !dbg !10215
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %twins, metadata !10216, metadata !DIExpression()), !dbg !10217
  store %struct.rtx_def* null, %struct.rtx_def** %twins, align 8, !dbg !10217
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_heap** %priorities_roots, metadata !10218, metadata !DIExpression()), !dbg !10220
  %0 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10221
  %tobool = icmp ne %struct.VEC_haifa_insn_data_def_heap* %0, null, !dbg !10221
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10221

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10221
  %base = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %1, i32 0, i32 0, !dbg !10221
  br label %cond.end, !dbg !10221

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10221

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_haifa_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !10221
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10221
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !10221
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !10221
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !10221
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !10221
  %3 = load i32, i32* %rt_int, align 8, !dbg !10221
  %call = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond, i32 %3), !dbg !10221
  %todo_spec = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call, i32 0, i32 8, !dbg !10221
  %4 = load i32, i32* %todo_spec, align 8, !dbg !10221
  store i32 %4, i32* %ts, align 4, !dbg !10222
  %5 = load i32, i32* %ts, align 4, !dbg !10223
  %and = and i32 %5, -16519105, !dbg !10223
  %tobool1 = icmp ne i32 %and, 0, !dbg !10223
  br i1 %tobool1, label %cond.true2, label %cond.false3, !dbg !10223

cond.true2:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 4091, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !10223
  br label %cond.end4, !dbg !10223

cond.false3:                                      ; preds = %cond.end
  br label %cond.end4, !dbg !10223

cond.end4:                                        ; preds = %cond.false3, %cond.true2
  %cond5 = phi i32 [ 0, %cond.true2 ], [ 0, %cond.false3 ], !dbg !10223
  %6 = load i32, i32* %ts, align 4, !dbg !10224
  %and6 = and i32 %6, 4032, !dbg !10226
  %tobool7 = icmp ne i32 %and6, 0, !dbg !10226
  br i1 %tobool7, label %if.then, label %if.end, !dbg !10227

if.then:                                          ; preds = %cond.end4
  %7 = load i32, i32* @nr_be_in_data, align 4, !dbg !10228
  %inc = add nsw i32 %7, 1, !dbg !10228
  store i32 %inc, i32* @nr_be_in_data, align 4, !dbg !10228
  br label %if.end, !dbg !10229

if.end:                                           ; preds = %if.then, %cond.end4
  %8 = load i32, i32* %ts, align 4, !dbg !10230
  %and8 = and i32 %8, 16515072, !dbg !10232
  %tobool9 = icmp ne i32 %and8, 0, !dbg !10232
  br i1 %tobool9, label %if.then10, label %if.end12, !dbg !10233

if.then10:                                        ; preds = %if.end
  %9 = load i32, i32* @nr_be_in_control, align 4, !dbg !10234
  %inc11 = add nsw i32 %9, 1, !dbg !10234
  store i32 %inc11, i32* @nr_be_in_control, align 4, !dbg !10234
  br label %if.end12, !dbg !10235

if.end12:                                         ; preds = %if.then10, %if.end
  %10 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10236
  %tobool13 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %10, null, !dbg !10236
  br i1 %tobool13, label %cond.true14, label %cond.false16, !dbg !10236

cond.true14:                                      ; preds = %if.end12
  %11 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10236
  %base15 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %11, i32 0, i32 0, !dbg !10236
  br label %cond.end17, !dbg !10236

cond.false16:                                     ; preds = %if.end12
  br label %cond.end17, !dbg !10236

cond.end17:                                       ; preds = %cond.false16, %cond.true14
  %cond18 = phi %struct.VEC_haifa_insn_data_def_base* [ %base15, %cond.true14 ], [ null, %cond.false16 ], !dbg !10236
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10236
  %u19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !10236
  %fld20 = bitcast %union.u* %u19 to [1 x %union.rtunion_def]*, !dbg !10236
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i64 0, i64 0, !dbg !10236
  %rt_int22 = bitcast %union.rtunion_def* %arrayidx21 to i32*, !dbg !10236
  %13 = load i32, i32* %rt_int22, align 8, !dbg !10236
  %call23 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond18, i32 %13), !dbg !10236
  %todo_spec24 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call23, i32 0, i32 8, !dbg !10236
  %14 = load i32, i32* %todo_spec24, align 8, !dbg !10237
  %and25 = and i32 %14, -16519105, !dbg !10237
  store i32 %and25, i32* %todo_spec24, align 8, !dbg !10237
  %15 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10238
  %tobool26 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %15, null, !dbg !10238
  br i1 %tobool26, label %cond.true27, label %cond.false29, !dbg !10238

cond.true27:                                      ; preds = %cond.end17
  %16 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10238
  %base28 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %16, i32 0, i32 0, !dbg !10238
  br label %cond.end30, !dbg !10238

cond.false29:                                     ; preds = %cond.end17
  br label %cond.end30, !dbg !10238

cond.end30:                                       ; preds = %cond.false29, %cond.true27
  %cond31 = phi %struct.VEC_haifa_insn_data_def_base* [ %base28, %cond.true27 ], [ null, %cond.false29 ], !dbg !10238
  %17 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10238
  %u32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !10238
  %fld33 = bitcast %union.u* %u32 to [1 x %union.rtunion_def]*, !dbg !10238
  %arrayidx34 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld33, i64 0, i64 0, !dbg !10238
  %rt_int35 = bitcast %union.rtunion_def* %arrayidx34 to i32*, !dbg !10238
  %18 = load i32, i32* %rt_int35, align 8, !dbg !10238
  %call36 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond31, i32 %18), !dbg !10238
  %todo_spec37 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call36, i32 0, i32 8, !dbg !10238
  %19 = load i32, i32* %todo_spec37, align 8, !dbg !10238
  %tobool38 = icmp ne i32 %19, 0, !dbg !10238
  br i1 %tobool38, label %cond.true39, label %cond.false40, !dbg !10238

cond.true39:                                      ; preds = %cond.end30
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 4099, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !10238
  br label %cond.end41, !dbg !10238

cond.false40:                                     ; preds = %cond.end30
  br label %cond.end41, !dbg !10238

cond.end41:                                       ; preds = %cond.false40, %cond.true39
  %cond42 = phi i32 [ 0, %cond.true39 ], [ 0, %cond.false40 ], !dbg !10238
  %20 = load i32, i32* %ts, align 4, !dbg !10239
  %21 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10240
  %tobool43 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %21, null, !dbg !10240
  br i1 %tobool43, label %cond.true44, label %cond.false46, !dbg !10240

cond.true44:                                      ; preds = %cond.end41
  %22 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10240
  %base45 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %22, i32 0, i32 0, !dbg !10240
  br label %cond.end47, !dbg !10240

cond.false46:                                     ; preds = %cond.end41
  br label %cond.end47, !dbg !10240

cond.end47:                                       ; preds = %cond.false46, %cond.true44
  %cond48 = phi %struct.VEC_haifa_insn_data_def_base* [ %base45, %cond.true44 ], [ null, %cond.false46 ], !dbg !10240
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10240
  %u49 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1, !dbg !10240
  %fld50 = bitcast %union.u* %u49 to [1 x %union.rtunion_def]*, !dbg !10240
  %arrayidx51 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld50, i64 0, i64 0, !dbg !10240
  %rt_int52 = bitcast %union.rtunion_def* %arrayidx51 to i32*, !dbg !10240
  %24 = load i32, i32* %rt_int52, align 8, !dbg !10240
  %call53 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond48, i32 %24), !dbg !10240
  %done_spec = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call53, i32 0, i32 9, !dbg !10240
  %25 = load i32, i32* %done_spec, align 4, !dbg !10241
  %or = or i32 %25, %20, !dbg !10241
  store i32 %or, i32* %done_spec, align 4, !dbg !10241
  %26 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10242
  call void @sd_iterator_start(%struct._sd_iterator* sret %tmp, %struct.rtx_def* %26, i32 2), !dbg !10244
  %27 = bitcast %struct._sd_iterator* %sd_it to i8*, !dbg !10244
  %28 = bitcast %struct._sd_iterator* %tmp to i8*, !dbg !10244
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %27, i8* align 8 %28, i64 32, i1 false), !dbg !10244
  br label %for.cond, !dbg !10245

for.cond:                                         ; preds = %if.end69, %cond.end47
  %call54 = call zeroext i8 @sd_iterator_cond(%struct._sd_iterator* %sd_it, %struct._dep** %dep), !dbg !10246
  %tobool55 = icmp ne i8 %call54, 0, !dbg !10248
  br i1 %tobool55, label %for.body, label %for.end, !dbg !10248

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %check, metadata !10249, metadata !DIExpression()), !dbg !10251
  %29 = load %struct._dep*, %struct._dep** %dep, align 8, !dbg !10252
  %pro = getelementptr inbounds %struct._dep, %struct._dep* %29, i32 0, i32 0, !dbg !10252
  %30 = load %struct.rtx_def*, %struct.rtx_def** %pro, align 8, !dbg !10252
  store %struct.rtx_def* %30, %struct.rtx_def** %check, align 8, !dbg !10251
  %31 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10253
  %tobool56 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %31, null, !dbg !10253
  br i1 %tobool56, label %cond.true57, label %cond.false59, !dbg !10253

cond.true57:                                      ; preds = %for.body
  %32 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10253
  %base58 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %32, i32 0, i32 0, !dbg !10253
  br label %cond.end60, !dbg !10253

cond.false59:                                     ; preds = %for.body
  br label %cond.end60, !dbg !10253

cond.end60:                                       ; preds = %cond.false59, %cond.true57
  %cond61 = phi %struct.VEC_haifa_insn_data_def_base* [ %base58, %cond.true57 ], [ null, %cond.false59 ], !dbg !10253
  %33 = load %struct.rtx_def*, %struct.rtx_def** %check, align 8, !dbg !10253
  %u62 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1, !dbg !10253
  %fld63 = bitcast %union.u* %u62 to [1 x %union.rtunion_def]*, !dbg !10253
  %arrayidx64 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld63, i64 0, i64 0, !dbg !10253
  %rt_int65 = bitcast %union.rtunion_def* %arrayidx64 to i32*, !dbg !10253
  %34 = load i32, i32* %rt_int65, align 8, !dbg !10253
  %call66 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond61, i32 %34), !dbg !10253
  %recovery_block = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call66, i32 0, i32 11, !dbg !10253
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %recovery_block, align 8, !dbg !10253
  %36 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10253
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %36, i64 0, !dbg !10253
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !10253
  %37 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !10253
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %37, i32 0, i32 1, !dbg !10253
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !10253
  %cmp = icmp eq %struct.basic_block_def* %35, %38, !dbg !10253
  br i1 %cmp, label %if.then67, label %if.else, !dbg !10255

if.then67:                                        ; preds = %cond.end60
  %39 = load %struct.rtx_def*, %struct.rtx_def** %check, align 8, !dbg !10256
  call void @create_check_block_twin(%struct.rtx_def* %39, i8 zeroext 1), !dbg !10258
  %40 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10259
  call void @sd_iterator_start(%struct._sd_iterator* sret %tmp68, %struct.rtx_def* %40, i32 2), !dbg !10260
  %41 = bitcast %struct._sd_iterator* %sd_it to i8*, !dbg !10260
  %42 = bitcast %struct._sd_iterator* %tmp68 to i8*, !dbg !10260
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %41, i8* align 8 %42, i64 32, i1 false), !dbg !10260
  br label %if.end69, !dbg !10261

if.else:                                          ; preds = %cond.end60
  call void @sd_iterator_next(%struct._sd_iterator* %sd_it), !dbg !10262
  br label %if.end69

if.end69:                                         ; preds = %if.else, %if.then67
  br label %for.cond, !dbg !10263, !llvm.loop !10264

for.end:                                          ; preds = %for.cond
  store %struct.VEC_rtx_heap* null, %struct.VEC_rtx_heap** %priorities_roots, align 8, !dbg !10266
  %43 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10267
  call void @clear_priorities(%struct.rtx_def* %43, %struct.VEC_rtx_heap** %priorities_roots), !dbg !10268
  br label %while.body, !dbg !10269

while.body:                                       ; preds = %for.end, %for.end200
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %check70, metadata !10270, metadata !DIExpression()), !dbg !10272
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %twin, metadata !10273, metadata !DIExpression()), !dbg !10274
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %rec, metadata !10275, metadata !DIExpression()), !dbg !10276
  %44 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10277
  call void @sd_iterator_start(%struct._sd_iterator* sret %tmp71, %struct.rtx_def* %44, i32 2), !dbg !10278
  %45 = bitcast %struct._sd_iterator* %sd_it to i8*, !dbg !10278
  %46 = bitcast %struct._sd_iterator* %tmp71 to i8*, !dbg !10278
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %45, i8* align 8 %46, i64 32, i1 false), !dbg !10278
  %call72 = call zeroext i8 @sd_iterator_cond(%struct._sd_iterator* %sd_it, %struct._dep** %dep), !dbg !10279
  %tobool73 = icmp ne i8 %call72, 0, !dbg !10279
  br i1 %tobool73, label %if.end75, label %if.then74, !dbg !10281

if.then74:                                        ; preds = %while.body
  br label %while.end, !dbg !10282

if.end75:                                         ; preds = %while.body
  %47 = load %struct._dep*, %struct._dep** %dep, align 8, !dbg !10283
  %status = getelementptr inbounds %struct._dep, %struct._dep* %47, i32 0, i32 3, !dbg !10283
  %48 = load i32, i32* %status, align 4, !dbg !10283
  %and76 = and i32 %48, 258111, !dbg !10283
  %cmp77 = icmp eq i32 %and76, 0, !dbg !10283
  br i1 %cmp77, label %land.lhs.true, label %cond.true85, !dbg !10283

land.lhs.true:                                    ; preds = %if.end75
  %49 = load %struct._dep*, %struct._dep** %dep, align 8, !dbg !10283
  %status78 = getelementptr inbounds %struct._dep, %struct._dep* %49, i32 0, i32 3, !dbg !10283
  %50 = load i32, i32* %status78, align 4, !dbg !10283
  %and79 = and i32 %50, 16519104, !dbg !10283
  %cmp80 = icmp ne i32 %and79, 0, !dbg !10283
  br i1 %cmp80, label %land.lhs.true81, label %cond.true85, !dbg !10283

land.lhs.true81:                                  ; preds = %land.lhs.true
  %51 = load %struct._dep*, %struct._dep** %dep, align 8, !dbg !10283
  %status82 = getelementptr inbounds %struct._dep, %struct._dep* %51, i32 0, i32 3, !dbg !10283
  %52 = load i32, i32* %status82, align 4, !dbg !10283
  %and83 = and i32 %52, 117440512, !dbg !10283
  %cmp84 = icmp eq i32 %and83, 16777216, !dbg !10283
  br i1 %cmp84, label %cond.false86, label %cond.true85, !dbg !10283

cond.true85:                                      ; preds = %land.lhs.true81, %land.lhs.true, %if.end75
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 4137, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !10283
  br label %cond.end87, !dbg !10283

cond.false86:                                     ; preds = %land.lhs.true81
  br label %cond.end87, !dbg !10283

cond.end87:                                       ; preds = %cond.false86, %cond.true85
  %cond88 = phi i32 [ 0, %cond.true85 ], [ 0, %cond.false86 ], !dbg !10283
  %53 = load %struct._dep*, %struct._dep** %dep, align 8, !dbg !10284
  %pro89 = getelementptr inbounds %struct._dep, %struct._dep* %53, i32 0, i32 0, !dbg !10284
  %54 = load %struct.rtx_def*, %struct.rtx_def** %pro89, align 8, !dbg !10284
  store %struct.rtx_def* %54, %struct.rtx_def** %check70, align 8, !dbg !10285
  %call90 = call zeroext i8 @sel_sched_p(), !dbg !10286
  %conv = zext i8 %call90 to i32, !dbg !10286
  %tobool91 = icmp ne i32 %conv, 0, !dbg !10286
  br i1 %tobool91, label %cond.true92, label %cond.false96, !dbg !10286

cond.true92:                                      ; preds = %cond.end87
  %55 = load %struct.rtx_def*, %struct.rtx_def** %check70, align 8, !dbg !10286
  %call93 = call zeroext i8 @sel_insn_is_speculation_check(%struct.rtx_def* %55), !dbg !10286
  %conv94 = zext i8 %call93 to i32, !dbg !10286
  %tobool95 = icmp ne i32 %conv94, 0, !dbg !10286
  br i1 %tobool95, label %cond.true138, label %land.lhs.true111, !dbg !10286

cond.false96:                                     ; preds = %cond.end87
  %56 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10286
  %tobool97 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %56, null, !dbg !10286
  br i1 %tobool97, label %cond.true98, label %cond.false100, !dbg !10286

cond.true98:                                      ; preds = %cond.false96
  %57 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10286
  %base99 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %57, i32 0, i32 0, !dbg !10286
  br label %cond.end101, !dbg !10286

cond.false100:                                    ; preds = %cond.false96
  br label %cond.end101, !dbg !10286

cond.end101:                                      ; preds = %cond.false100, %cond.true98
  %cond102 = phi %struct.VEC_haifa_insn_data_def_base* [ %base99, %cond.true98 ], [ null, %cond.false100 ], !dbg !10286
  %58 = load %struct.rtx_def*, %struct.rtx_def** %check70, align 8, !dbg !10286
  %u103 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %58, i32 0, i32 1, !dbg !10286
  %fld104 = bitcast %union.u* %u103 to [1 x %union.rtunion_def]*, !dbg !10286
  %arrayidx105 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld104, i64 0, i64 0, !dbg !10286
  %rt_int106 = bitcast %union.rtunion_def* %arrayidx105 to i32*, !dbg !10286
  %59 = load i32, i32* %rt_int106, align 8, !dbg !10286
  %call107 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond102, i32 %59), !dbg !10286
  %recovery_block108 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call107, i32 0, i32 11, !dbg !10286
  %60 = load %struct.basic_block_def*, %struct.basic_block_def** %recovery_block108, align 8, !dbg !10286
  %cmp109 = icmp ne %struct.basic_block_def* %60, null, !dbg !10286
  br i1 %cmp109, label %cond.true138, label %land.lhs.true111, !dbg !10286

land.lhs.true111:                                 ; preds = %cond.end101, %cond.true92
  %61 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10286
  %tobool112 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %61, null, !dbg !10286
  br i1 %tobool112, label %cond.true113, label %cond.false115, !dbg !10286

cond.true113:                                     ; preds = %land.lhs.true111
  %62 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10286
  %base114 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %62, i32 0, i32 0, !dbg !10286
  br label %cond.end116, !dbg !10286

cond.false115:                                    ; preds = %land.lhs.true111
  br label %cond.end116, !dbg !10286

cond.end116:                                      ; preds = %cond.false115, %cond.true113
  %cond117 = phi %struct.VEC_haifa_insn_data_def_base* [ %base114, %cond.true113 ], [ null, %cond.false115 ], !dbg !10286
  %63 = load %struct.rtx_def*, %struct.rtx_def** %check70, align 8, !dbg !10286
  %u118 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %63, i32 0, i32 1, !dbg !10286
  %fld119 = bitcast %union.u* %u118 to [1 x %union.rtunion_def]*, !dbg !10286
  %arrayidx120 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld119, i64 0, i64 0, !dbg !10286
  %rt_int121 = bitcast %union.rtunion_def* %arrayidx120 to i32*, !dbg !10286
  %64 = load i32, i32* %rt_int121, align 8, !dbg !10286
  %call122 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond117, i32 %64), !dbg !10286
  %orig_pat = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call122, i32 0, i32 12, !dbg !10286
  %65 = load %struct.rtx_def*, %struct.rtx_def** %orig_pat, align 8, !dbg !10286
  %tobool123 = icmp ne %struct.rtx_def* %65, null, !dbg !10286
  br i1 %tobool123, label %cond.true138, label %land.lhs.true124, !dbg !10286

land.lhs.true124:                                 ; preds = %cond.end116
  %66 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10286
  %tobool125 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %66, null, !dbg !10286
  br i1 %tobool125, label %cond.true126, label %cond.false128, !dbg !10286

cond.true126:                                     ; preds = %land.lhs.true124
  %67 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10286
  %base127 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %67, i32 0, i32 0, !dbg !10286
  br label %cond.end129, !dbg !10286

cond.false128:                                    ; preds = %land.lhs.true124
  br label %cond.end129, !dbg !10286

cond.end129:                                      ; preds = %cond.false128, %cond.true126
  %cond130 = phi %struct.VEC_haifa_insn_data_def_base* [ %base127, %cond.true126 ], [ null, %cond.false128 ], !dbg !10286
  %68 = load %struct.rtx_def*, %struct.rtx_def** %check70, align 8, !dbg !10286
  %u131 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %68, i32 0, i32 1, !dbg !10286
  %fld132 = bitcast %union.u* %u131 to [1 x %union.rtunion_def]*, !dbg !10286
  %arrayidx133 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld132, i64 0, i64 0, !dbg !10286
  %rt_int134 = bitcast %union.rtunion_def* %arrayidx133 to i32*, !dbg !10286
  %69 = load i32, i32* %rt_int134, align 8, !dbg !10286
  %call135 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond130, i32 %69), !dbg !10286
  %queue_index = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call135, i32 0, i32 4, !dbg !10286
  %70 = load i32, i32* %queue_index, align 8, !dbg !10286
  %cmp136 = icmp eq i32 %70, -2, !dbg !10286
  br i1 %cmp136, label %cond.false139, label %cond.true138, !dbg !10286

cond.true138:                                     ; preds = %cond.end129, %cond.end116, %cond.end101, %cond.true92
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 4142, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !10286
  br label %cond.end140, !dbg !10286

cond.false139:                                    ; preds = %cond.end129
  br label %cond.end140, !dbg !10286

cond.end140:                                      ; preds = %cond.false139, %cond.true138
  %cond141 = phi i32 [ 0, %cond.true138 ], [ 0, %cond.false139 ], !dbg !10286
  %71 = load %struct.rtx_def*, %struct.rtx_def** %check70, align 8, !dbg !10287
  %u142 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %71, i32 0, i32 1, !dbg !10287
  %fld143 = bitcast %union.u* %u142 to [1 x %union.rtunion_def]*, !dbg !10287
  %arrayidx144 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld143, i64 0, i64 3, !dbg !10287
  %rt_bb = bitcast %union.rtunion_def* %arrayidx144 to %struct.basic_block_def**, !dbg !10287
  %72 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !10287
  store %struct.basic_block_def* %72, %struct.basic_block_def** %rec, align 8, !dbg !10288
  %73 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10289
  %u145 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %73, i32 0, i32 1, !dbg !10289
  %fld146 = bitcast %union.u* %u145 to [1 x %union.rtunion_def]*, !dbg !10289
  %arrayidx147 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld146, i64 0, i64 5, !dbg !10289
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx147 to %struct.rtx_def**, !dbg !10289
  %74 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !10289
  %call148 = call %struct.rtx_def* @copy_insn(%struct.rtx_def* %74), !dbg !10290
  %75 = load %struct.basic_block_def*, %struct.basic_block_def** %rec, align 8, !dbg !10291
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %75, i32 0, i32 7, !dbg !10291
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !10291
  %76 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !10291
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %76, i32 0, i32 1, !dbg !10291
  %77 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !10291
  %call149 = call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %call148, %struct.rtx_def* %77), !dbg !10292
  store %struct.rtx_def* %call149, %struct.rtx_def** %twin, align 8, !dbg !10293
  %78 = load %struct.rtx_def*, %struct.rtx_def** %twin, align 8, !dbg !10294
  call void @haifa_init_insn(%struct.rtx_def* %78), !dbg !10295
  %79 = load %struct.rtx_def*, %struct.rtx_def** %twin, align 8, !dbg !10296
  %80 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10297
  call void @sd_copy_back_deps(%struct.rtx_def* %79, %struct.rtx_def* %80, i8 zeroext 1), !dbg !10298
  %81 = load i32, i32* @sched_verbose, align 4, !dbg !10299
  %tobool150 = icmp ne i32 %81, 0, !dbg !10299
  br i1 %tobool150, label %land.lhs.true151, label %if.end160, !dbg !10301

land.lhs.true151:                                 ; preds = %cond.end140
  %82 = load %struct.spec_info_def*, %struct.spec_info_def** @spec_info, align 8, !dbg !10302
  %dump = getelementptr inbounds %struct.spec_info_def, %struct.spec_info_def* %82, i32 0, i32 1, !dbg !10303
  %83 = load %struct._IO_FILE*, %struct._IO_FILE** %dump, align 8, !dbg !10303
  %tobool152 = icmp ne %struct._IO_FILE* %83, null, !dbg !10302
  br i1 %tobool152, label %if.then153, label %if.end160, !dbg !10304

if.then153:                                       ; preds = %land.lhs.true151
  %84 = load %struct.spec_info_def*, %struct.spec_info_def** @spec_info, align 8, !dbg !10305
  %dump154 = getelementptr inbounds %struct.spec_info_def, %struct.spec_info_def* %84, i32 0, i32 1, !dbg !10306
  %85 = load %struct._IO_FILE*, %struct._IO_FILE** %dump154, align 8, !dbg !10306
  %86 = load %struct.rtx_def*, %struct.rtx_def** %twin, align 8, !dbg !10307
  %u155 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %86, i32 0, i32 1, !dbg !10307
  %fld156 = bitcast %union.u* %u155 to [1 x %union.rtunion_def]*, !dbg !10307
  %arrayidx157 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld156, i64 0, i64 0, !dbg !10307
  %rt_int158 = bitcast %union.rtunion_def* %arrayidx157 to i32*, !dbg !10307
  %87 = load i32, i32* %rt_int158, align 8, !dbg !10307
  %88 = load %struct.basic_block_def*, %struct.basic_block_def** %rec, align 8, !dbg !10308
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %88, i32 0, i32 9, !dbg !10309
  %89 = load i32, i32* %index, align 8, !dbg !10309
  %call159 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %85, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.51, i64 0, i64 0), i32 %87, i32 %89), !dbg !10310
  br label %if.end160, !dbg !10310

if.end160:                                        ; preds = %if.then153, %land.lhs.true151, %cond.end140
  %90 = load %struct.rtx_def*, %struct.rtx_def** %twin, align 8, !dbg !10311
  %91 = load %struct.rtx_def*, %struct.rtx_def** %twins, align 8, !dbg !10312
  %call161 = call %struct.rtx_def* @alloc_INSN_LIST(%struct.rtx_def* %90, %struct.rtx_def* %91), !dbg !10313
  store %struct.rtx_def* %call161, %struct.rtx_def** %twins, align 8, !dbg !10314
  %92 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10315
  call void @sd_iterator_start(%struct._sd_iterator* sret %tmp162, %struct.rtx_def* %92, i32 2), !dbg !10315
  %93 = bitcast %struct._sd_iterator* %sd_it to i8*, !dbg !10315
  %94 = bitcast %struct._sd_iterator* %tmp162 to i8*, !dbg !10315
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %93, i8* align 8 %94, i64 32, i1 false), !dbg !10315
  br label %for.cond163, !dbg !10315

for.cond163:                                      ; preds = %for.inc, %if.end160
  %call164 = call zeroext i8 @sd_iterator_cond(%struct._sd_iterator* %sd_it, %struct._dep** %dep), !dbg !10317
  %tobool165 = icmp ne i8 %call164, 0, !dbg !10315
  br i1 %tobool165, label %for.body166, label %for.end183, !dbg !10315

for.body166:                                      ; preds = %for.cond163
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pro167, metadata !10319, metadata !DIExpression()), !dbg !10321
  %95 = load %struct._dep*, %struct._dep** %dep, align 8, !dbg !10322
  %pro168 = getelementptr inbounds %struct._dep, %struct._dep* %95, i32 0, i32 0, !dbg !10322
  %96 = load %struct.rtx_def*, %struct.rtx_def** %pro168, align 8, !dbg !10322
  store %struct.rtx_def* %96, %struct.rtx_def** %pro167, align 8, !dbg !10321
  %97 = load %struct._dep*, %struct._dep** %dep, align 8, !dbg !10323
  %type = getelementptr inbounds %struct._dep, %struct._dep* %97, i32 0, i32 2, !dbg !10323
  %98 = load i32, i32* %type, align 8, !dbg !10323
  %cmp169 = icmp eq i32 %98, 0, !dbg !10323
  br i1 %cmp169, label %cond.false172, label %cond.true171, !dbg !10323

cond.true171:                                     ; preds = %for.body166
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 4165, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !10323
  br label %cond.end173, !dbg !10323

cond.false172:                                    ; preds = %for.body166
  br label %cond.end173, !dbg !10323

cond.end173:                                      ; preds = %cond.false172, %cond.true171
  %cond174 = phi i32 [ 0, %cond.true171 ], [ 0, %cond.false172 ], !dbg !10323
  %99 = load %struct.rtx_def*, %struct.rtx_def** %pro167, align 8, !dbg !10324
  %u175 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %99, i32 0, i32 1, !dbg !10324
  %fld176 = bitcast %union.u* %u175 to [1 x %union.rtunion_def]*, !dbg !10324
  %arrayidx177 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld176, i64 0, i64 3, !dbg !10324
  %rt_bb178 = bitcast %union.rtunion_def* %arrayidx177 to %struct.basic_block_def**, !dbg !10324
  %100 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb178, align 8, !dbg !10324
  %101 = load %struct.basic_block_def*, %struct.basic_block_def** %rec, align 8, !dbg !10326
  %cmp179 = icmp eq %struct.basic_block_def* %100, %101, !dbg !10327
  br i1 %cmp179, label %if.then181, label %if.end182, !dbg !10328

if.then181:                                       ; preds = %cond.end173
  call void @llvm.dbg.declare(metadata %struct._dep* %_new_dep, metadata !10329, metadata !DIExpression()), !dbg !10331
  call void @llvm.dbg.declare(metadata %struct._dep** %new_dep, metadata !10332, metadata !DIExpression()), !dbg !10333
  store %struct._dep* %_new_dep, %struct._dep** %new_dep, align 8, !dbg !10333
  %102 = load %struct._dep*, %struct._dep** %new_dep, align 8, !dbg !10334
  %103 = load %struct.rtx_def*, %struct.rtx_def** %pro167, align 8, !dbg !10335
  %104 = load %struct.rtx_def*, %struct.rtx_def** %twin, align 8, !dbg !10336
  call void @init_dep(%struct._dep* %102, %struct.rtx_def* %103, %struct.rtx_def* %104, i32 0), !dbg !10337
  %105 = load %struct._dep*, %struct._dep** %new_dep, align 8, !dbg !10338
  call void @sd_add_dep(%struct._dep* %105, i8 zeroext 0), !dbg !10339
  br label %if.end182, !dbg !10340

if.end182:                                        ; preds = %if.then181, %cond.end173
  br label %for.inc, !dbg !10341

for.inc:                                          ; preds = %if.end182
  call void @sd_iterator_next(%struct._sd_iterator* %sd_it), !dbg !10317
  br label %for.cond163, !dbg !10317, !llvm.loop !10342

for.end183:                                       ; preds = %for.cond163
  %106 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10344
  %107 = load %struct.rtx_def*, %struct.rtx_def** %twin, align 8, !dbg !10345
  %108 = load i32, i32* %ts, align 4, !dbg !10346
  call void @process_insn_forw_deps_be_in_spec(%struct.rtx_def* %106, %struct.rtx_def* %107, i32 %108), !dbg !10347
  %109 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10348
  call void @sd_iterator_start(%struct._sd_iterator* sret %tmp184, %struct.rtx_def* %109, i32 2), !dbg !10350
  %110 = bitcast %struct._sd_iterator* %sd_it to i8*, !dbg !10350
  %111 = bitcast %struct._sd_iterator* %tmp184 to i8*, !dbg !10350
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %110, i8* align 8 %111, i64 32, i1 false), !dbg !10350
  br label %for.cond185, !dbg !10351

for.cond185:                                      ; preds = %if.end199, %for.end183
  %call186 = call zeroext i8 @sd_iterator_cond(%struct._sd_iterator* %sd_it, %struct._dep** %dep), !dbg !10352
  %tobool187 = icmp ne i8 %call186, 0, !dbg !10354
  br i1 %tobool187, label %for.body188, label %for.end200, !dbg !10354

for.body188:                                      ; preds = %for.cond185
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pro189, metadata !10355, metadata !DIExpression()), !dbg !10357
  %112 = load %struct._dep*, %struct._dep** %dep, align 8, !dbg !10358
  %pro190 = getelementptr inbounds %struct._dep, %struct._dep* %112, i32 0, i32 0, !dbg !10358
  %113 = load %struct.rtx_def*, %struct.rtx_def** %pro190, align 8, !dbg !10358
  store %struct.rtx_def* %113, %struct.rtx_def** %pro189, align 8, !dbg !10357
  %114 = load %struct.rtx_def*, %struct.rtx_def** %pro189, align 8, !dbg !10359
  %u191 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %114, i32 0, i32 1, !dbg !10359
  %fld192 = bitcast %union.u* %u191 to [1 x %union.rtunion_def]*, !dbg !10359
  %arrayidx193 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld192, i64 0, i64 3, !dbg !10359
  %rt_bb194 = bitcast %union.rtunion_def* %arrayidx193 to %struct.basic_block_def**, !dbg !10359
  %115 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb194, align 8, !dbg !10359
  %116 = load %struct.basic_block_def*, %struct.basic_block_def** %rec, align 8, !dbg !10361
  %cmp195 = icmp eq %struct.basic_block_def* %115, %116, !dbg !10362
  br i1 %cmp195, label %if.then197, label %if.else198, !dbg !10363

if.then197:                                       ; preds = %for.body188
  call void @sd_delete_dep(%struct._sd_iterator* byval(%struct._sd_iterator) align 8 %sd_it), !dbg !10364
  br label %if.end199, !dbg !10364

if.else198:                                       ; preds = %for.body188
  call void @sd_iterator_next(%struct._sd_iterator* %sd_it), !dbg !10365
  br label %if.end199

if.end199:                                        ; preds = %if.else198, %if.then197
  br label %for.cond185, !dbg !10366, !llvm.loop !10367

for.end200:                                       ; preds = %for.cond185
  br label %while.body, !dbg !10269, !llvm.loop !10369

while.end:                                        ; preds = %if.then74
  br label %while.cond, !dbg !10371

while.cond:                                       ; preds = %while.body202, %while.end
  %117 = load %struct.rtx_def*, %struct.rtx_def** %twins, align 8, !dbg !10372
  %tobool201 = icmp ne %struct.rtx_def* %117, null, !dbg !10371
  br i1 %tobool201, label %while.body202, label %while.end214, !dbg !10371

while.body202:                                    ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %twin203, metadata !10373, metadata !DIExpression()), !dbg !10375
  %118 = load %struct.rtx_def*, %struct.rtx_def** %twins, align 8, !dbg !10376
  %u204 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %118, i32 0, i32 1, !dbg !10376
  %fld205 = bitcast %union.u* %u204 to [1 x %union.rtunion_def]*, !dbg !10376
  %arrayidx206 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld205, i64 0, i64 0, !dbg !10376
  %rt_rtx207 = bitcast %union.rtunion_def* %arrayidx206 to %struct.rtx_def**, !dbg !10376
  %119 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx207, align 8, !dbg !10376
  store %struct.rtx_def* %119, %struct.rtx_def** %twin203, align 8, !dbg !10377
  call void @llvm.dbg.declare(metadata %struct._dep* %_new_dep208, metadata !10378, metadata !DIExpression()), !dbg !10380
  call void @llvm.dbg.declare(metadata %struct._dep** %new_dep209, metadata !10381, metadata !DIExpression()), !dbg !10382
  store %struct._dep* %_new_dep208, %struct._dep** %new_dep209, align 8, !dbg !10382
  %120 = load %struct._dep*, %struct._dep** %new_dep209, align 8, !dbg !10383
  %121 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10384
  %122 = load %struct.rtx_def*, %struct.rtx_def** %twin203, align 8, !dbg !10385
  call void @init_dep(%struct._dep* %120, %struct.rtx_def* %121, %struct.rtx_def* %122, i32 11), !dbg !10386
  %123 = load %struct._dep*, %struct._dep** %new_dep209, align 8, !dbg !10387
  call void @sd_add_dep(%struct._dep* %123, i8 zeroext 0), !dbg !10388
  %124 = load %struct.rtx_def*, %struct.rtx_def** %twins, align 8, !dbg !10389
  %u210 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %124, i32 0, i32 1, !dbg !10389
  %fld211 = bitcast %union.u* %u210 to [1 x %union.rtunion_def]*, !dbg !10389
  %arrayidx212 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld211, i64 0, i64 1, !dbg !10389
  %rt_rtx213 = bitcast %union.rtunion_def* %arrayidx212 to %struct.rtx_def**, !dbg !10389
  %125 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx213, align 8, !dbg !10389
  store %struct.rtx_def* %125, %struct.rtx_def** %twin203, align 8, !dbg !10390
  %126 = load %struct.rtx_def*, %struct.rtx_def** %twins, align 8, !dbg !10391
  call void @free_INSN_LIST_node(%struct.rtx_def* %126), !dbg !10392
  %127 = load %struct.rtx_def*, %struct.rtx_def** %twin203, align 8, !dbg !10393
  store %struct.rtx_def* %127, %struct.rtx_def** %twins, align 8, !dbg !10394
  br label %while.cond, !dbg !10371, !llvm.loop !10395

while.end214:                                     ; preds = %while.cond
  %128 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %priorities_roots, align 8, !dbg !10397
  call void @calc_priorities(%struct.VEC_rtx_heap* %128), !dbg !10398
  call void @VEC_rtx_heap_free(%struct.VEC_rtx_heap** %priorities_roots), !dbg !10399
  ret void, !dbg !10400
}

; Function Attrs: noinline nounwind uwtable
define internal void @create_check_block_twin(%struct.rtx_def* %insn, i8 zeroext %mutate_p) #0 !dbg !10401 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %mutate_p.addr = alloca i8, align 1
  %rec = alloca %struct.basic_block_def*, align 8
  %label = alloca %struct.rtx_def*, align 8
  %check = alloca %struct.rtx_def*, align 8
  %twin = alloca %struct.rtx_def*, align 8
  %fs = alloca i32, align 4
  %sd_it = alloca %struct._sd_iterator, align 8
  %dep = alloca %struct._dep*, align 8
  %_new_dep = alloca %struct._dep, align 8
  %new_dep = alloca %struct._dep*, align 8
  %todo_spec = alloca i32, align 4
  %sd_it141 = alloca %struct._sd_iterator, align 8
  %dep142 = alloca %struct._dep*, align 8
  %tmp = alloca %struct._sd_iterator, align 8
  %_dep2 = alloca %struct._dep, align 8
  %dep2 = alloca %struct._dep*, align 8
  %first_bb = alloca %struct.basic_block_def*, align 8
  %second_bb = alloca %struct.basic_block_def*, align 8
  %jump = alloca %struct.rtx_def*, align 8
  %tmp238 = alloca %struct._sd_iterator, align 8
  %pro243 = alloca %struct.rtx_def*, align 8
  %ds = alloca i32, align 4
  %tmp265 = alloca %struct._sd_iterator, align 8
  %ts = alloca i32, align 4
  %tmp391 = alloca %struct._sd_iterator, align 8
  %priorities_roots = alloca %struct.VEC_rtx_heap*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !10402, metadata !DIExpression()), !dbg !10403
  store i8 %mutate_p, i8* %mutate_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %mutate_p.addr, metadata !10404, metadata !DIExpression()), !dbg !10405
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %rec, metadata !10406, metadata !DIExpression()), !dbg !10407
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %label, metadata !10408, metadata !DIExpression()), !dbg !10409
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %check, metadata !10410, metadata !DIExpression()), !dbg !10411
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %twin, metadata !10412, metadata !DIExpression()), !dbg !10413
  call void @llvm.dbg.declare(metadata i32* %fs, metadata !10414, metadata !DIExpression()), !dbg !10415
  call void @llvm.dbg.declare(metadata %struct._sd_iterator* %sd_it, metadata !10416, metadata !DIExpression()), !dbg !10417
  call void @llvm.dbg.declare(metadata %struct._dep** %dep, metadata !10418, metadata !DIExpression()), !dbg !10419
  call void @llvm.dbg.declare(metadata %struct._dep* %_new_dep, metadata !10420, metadata !DIExpression()), !dbg !10421
  call void @llvm.dbg.declare(metadata %struct._dep** %new_dep, metadata !10422, metadata !DIExpression()), !dbg !10423
  store %struct._dep* %_new_dep, %struct._dep** %new_dep, align 8, !dbg !10423
  call void @llvm.dbg.declare(metadata i32* %todo_spec, metadata !10424, metadata !DIExpression()), !dbg !10425
  %0 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10426
  %tobool = icmp ne %struct.VEC_haifa_insn_data_def_heap* %0, null, !dbg !10426
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10426

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10426
  %base = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %1, i32 0, i32 0, !dbg !10426
  br label %cond.end, !dbg !10426

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10426

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_haifa_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !10426
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10426
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !10426
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !10426
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !10426
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !10426
  %3 = load i32, i32* %rt_int, align 8, !dbg !10426
  %call = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond, i32 %3), !dbg !10426
  %orig_pat = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call, i32 0, i32 12, !dbg !10426
  %4 = load %struct.rtx_def*, %struct.rtx_def** %orig_pat, align 8, !dbg !10426
  %cmp = icmp ne %struct.rtx_def* %4, null, !dbg !10426
  br i1 %cmp, label %cond.false2, label %cond.true1, !dbg !10426

cond.true1:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 4457, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !10426
  br label %cond.end3, !dbg !10426

cond.false2:                                      ; preds = %cond.end
  br label %cond.end3, !dbg !10426

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond4 = phi i32 [ 0, %cond.true1 ], [ 0, %cond.false2 ], !dbg !10426
  %5 = load i8, i8* %mutate_p.addr, align 1, !dbg !10427
  %tobool5 = icmp ne i8 %5, 0, !dbg !10427
  br i1 %tobool5, label %if.else, label %if.then, !dbg !10429

if.then:                                          ; preds = %cond.end3
  %6 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10430
  %tobool6 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %6, null, !dbg !10430
  br i1 %tobool6, label %cond.true7, label %cond.false9, !dbg !10430

cond.true7:                                       ; preds = %if.then
  %7 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10430
  %base8 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %7, i32 0, i32 0, !dbg !10430
  br label %cond.end10, !dbg !10430

cond.false9:                                      ; preds = %if.then
  br label %cond.end10, !dbg !10430

cond.end10:                                       ; preds = %cond.false9, %cond.true7
  %cond11 = phi %struct.VEC_haifa_insn_data_def_base* [ %base8, %cond.true7 ], [ null, %cond.false9 ], !dbg !10430
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10430
  %u12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !10430
  %fld13 = bitcast %union.u* %u12 to [1 x %union.rtunion_def]*, !dbg !10430
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i64 0, i64 0, !dbg !10430
  %rt_int15 = bitcast %union.rtunion_def* %arrayidx14 to i32*, !dbg !10430
  %9 = load i32, i32* %rt_int15, align 8, !dbg !10430
  %call16 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond11, i32 %9), !dbg !10430
  %todo_spec17 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call16, i32 0, i32 8, !dbg !10430
  %10 = load i32, i32* %todo_spec17, align 8, !dbg !10430
  store i32 %10, i32* %todo_spec, align 4, !dbg !10431
  br label %if.end, !dbg !10432

if.else:                                          ; preds = %cond.end3
  %11 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10433
  %tobool18 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %11, null, !dbg !10433
  br i1 %tobool18, label %cond.true19, label %cond.false21, !dbg !10433

cond.true19:                                      ; preds = %if.else
  %12 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10433
  %base20 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %12, i32 0, i32 0, !dbg !10433
  br label %cond.end22, !dbg !10433

cond.false21:                                     ; preds = %if.else
  br label %cond.end22, !dbg !10433

cond.end22:                                       ; preds = %cond.false21, %cond.true19
  %cond23 = phi %struct.VEC_haifa_insn_data_def_base* [ %base20, %cond.true19 ], [ null, %cond.false21 ], !dbg !10433
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10433
  %u24 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !10433
  %fld25 = bitcast %union.u* %u24 to [1 x %union.rtunion_def]*, !dbg !10433
  %arrayidx26 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld25, i64 0, i64 0, !dbg !10433
  %rt_int27 = bitcast %union.rtunion_def* %arrayidx26 to i32*, !dbg !10433
  %14 = load i32, i32* %rt_int27, align 8, !dbg !10433
  %call28 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond23, i32 %14), !dbg !10433
  %recovery_block = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call28, i32 0, i32 11, !dbg !10433
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %recovery_block, align 8, !dbg !10433
  %16 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10433
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %16, i64 0, !dbg !10433
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !10433
  %17 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !10433
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %17, i32 0, i32 1, !dbg !10433
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !10433
  %cmp29 = icmp eq %struct.basic_block_def* %15, %18, !dbg !10433
  br i1 %cmp29, label %land.lhs.true, label %cond.true43, !dbg !10433

land.lhs.true:                                    ; preds = %cond.end22
  %19 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10433
  %tobool30 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %19, null, !dbg !10433
  br i1 %tobool30, label %cond.true31, label %cond.false33, !dbg !10433

cond.true31:                                      ; preds = %land.lhs.true
  %20 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10433
  %base32 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %20, i32 0, i32 0, !dbg !10433
  br label %cond.end34, !dbg !10433

cond.false33:                                     ; preds = %land.lhs.true
  br label %cond.end34, !dbg !10433

cond.end34:                                       ; preds = %cond.false33, %cond.true31
  %cond35 = phi %struct.VEC_haifa_insn_data_def_base* [ %base32, %cond.true31 ], [ null, %cond.false33 ], !dbg !10433
  %21 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10433
  %u36 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !10433
  %fld37 = bitcast %union.u* %u36 to [1 x %union.rtunion_def]*, !dbg !10433
  %arrayidx38 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld37, i64 0, i64 0, !dbg !10433
  %rt_int39 = bitcast %union.rtunion_def* %arrayidx38 to i32*, !dbg !10433
  %22 = load i32, i32* %rt_int39, align 8, !dbg !10433
  %call40 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond35, i32 %22), !dbg !10433
  %todo_spec41 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call40, i32 0, i32 8, !dbg !10433
  %23 = load i32, i32* %todo_spec41, align 8, !dbg !10433
  %and = and i32 %23, 16777215, !dbg !10433
  %cmp42 = icmp eq i32 %and, 0, !dbg !10433
  br i1 %cmp42, label %cond.false44, label %cond.true43, !dbg !10433

cond.true43:                                      ; preds = %cond.end34, %cond.end22
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 4464, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !10433
  br label %cond.end45, !dbg !10433

cond.false44:                                     ; preds = %cond.end34
  br label %cond.end45, !dbg !10433

cond.end45:                                       ; preds = %cond.false44, %cond.true43
  %cond46 = phi i32 [ 0, %cond.true43 ], [ 0, %cond.false44 ], !dbg !10433
  %24 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10435
  %tobool47 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %24, null, !dbg !10435
  br i1 %tobool47, label %cond.true48, label %cond.false50, !dbg !10435

cond.true48:                                      ; preds = %cond.end45
  %25 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10435
  %base49 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %25, i32 0, i32 0, !dbg !10435
  br label %cond.end51, !dbg !10435

cond.false50:                                     ; preds = %cond.end45
  br label %cond.end51, !dbg !10435

cond.end51:                                       ; preds = %cond.false50, %cond.true48
  %cond52 = phi %struct.VEC_haifa_insn_data_def_base* [ %base49, %cond.true48 ], [ null, %cond.false50 ], !dbg !10435
  %26 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10435
  %u53 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1, !dbg !10435
  %fld54 = bitcast %union.u* %u53 to [1 x %union.rtunion_def]*, !dbg !10435
  %arrayidx55 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld54, i64 0, i64 0, !dbg !10435
  %rt_int56 = bitcast %union.rtunion_def* %arrayidx55 to i32*, !dbg !10435
  %27 = load i32, i32* %rt_int56, align 8, !dbg !10435
  %call57 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond52, i32 %27), !dbg !10435
  %check_spec = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call57, i32 0, i32 10, !dbg !10435
  %28 = load i32, i32* %check_spec, align 8, !dbg !10435
  store i32 %28, i32* %todo_spec, align 4, !dbg !10436
  br label %if.end

if.end:                                           ; preds = %cond.end51, %cond.end10
  %29 = load i32, i32* %todo_spec, align 4, !dbg !10437
  %and58 = and i32 %29, 16777215, !dbg !10437
  store i32 %and58, i32* %todo_spec, align 4, !dbg !10437
  %30 = load i8, i8* %mutate_p.addr, align 1, !dbg !10438
  %conv = zext i8 %30 to i32, !dbg !10438
  %tobool59 = icmp ne i32 %conv, 0, !dbg !10438
  br i1 %tobool59, label %if.then63, label %lor.lhs.false, !dbg !10440

lor.lhs.false:                                    ; preds = %if.end
  %31 = load i8 (i32)*, i8 (i32)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 29), align 8, !dbg !10441
  %32 = load i32, i32* %todo_spec, align 4, !dbg !10442
  %call60 = call zeroext i8 %31(i32 %32), !dbg !10443
  %conv61 = zext i8 %call60 to i32, !dbg !10443
  %tobool62 = icmp ne i32 %conv61, 0, !dbg !10443
  br i1 %tobool62, label %if.then63, label %if.else65, !dbg !10444

if.then63:                                        ; preds = %lor.lhs.false, %if.end
  %call64 = call %struct.basic_block_def* @sched_create_recovery_block(%struct.basic_block_def** null), !dbg !10445
  store %struct.basic_block_def* %call64, %struct.basic_block_def** %rec, align 8, !dbg !10447
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %rec, align 8, !dbg !10448
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %33, i32 0, i32 7, !dbg !10448
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !10448
  %34 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !10448
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %34, i32 0, i32 0, !dbg !10448
  %35 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !10448
  store %struct.rtx_def* %35, %struct.rtx_def** %label, align 8, !dbg !10449
  br label %if.end69, !dbg !10450

if.else65:                                        ; preds = %lor.lhs.false
  %36 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10451
  %add.ptr66 = getelementptr inbounds %struct.function, %struct.function* %36, i64 0, !dbg !10451
  %cfg67 = getelementptr inbounds %struct.function, %struct.function* %add.ptr66, i32 0, i32 1, !dbg !10451
  %37 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg67, align 8, !dbg !10451
  %x_exit_block_ptr68 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %37, i32 0, i32 1, !dbg !10451
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr68, align 8, !dbg !10451
  store %struct.basic_block_def* %38, %struct.basic_block_def** %rec, align 8, !dbg !10453
  store %struct.rtx_def* null, %struct.rtx_def** %label, align 8, !dbg !10454
  br label %if.end69

if.end69:                                         ; preds = %if.else65, %if.then63
  %39 = load %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 30), align 8, !dbg !10455
  %40 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10456
  %41 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !10457
  %42 = load i32, i32* %todo_spec, align 4, !dbg !10458
  %call70 = call %struct.rtx_def* %39(%struct.rtx_def* %40, %struct.rtx_def* %41, i32 %42), !dbg !10459
  store %struct.rtx_def* %call70, %struct.rtx_def** %check, align 8, !dbg !10460
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %rec, align 8, !dbg !10461
  %44 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10463
  %add.ptr71 = getelementptr inbounds %struct.function, %struct.function* %44, i64 0, !dbg !10463
  %cfg72 = getelementptr inbounds %struct.function, %struct.function* %add.ptr71, i32 0, i32 1, !dbg !10463
  %45 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg72, align 8, !dbg !10463
  %x_exit_block_ptr73 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %45, i32 0, i32 1, !dbg !10463
  %46 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr73, align 8, !dbg !10463
  %cmp74 = icmp ne %struct.basic_block_def* %43, %46, !dbg !10464
  br i1 %cmp74, label %if.then76, label %if.else85, !dbg !10465

if.then76:                                        ; preds = %if.end69
  %47 = load %struct.rtx_def*, %struct.rtx_def** %check, align 8, !dbg !10466
  %48 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10468
  %call77 = call %struct.rtx_def* @emit_jump_insn_before(%struct.rtx_def* %47, %struct.rtx_def* %48), !dbg !10469
  store %struct.rtx_def* %call77, %struct.rtx_def** %check, align 8, !dbg !10470
  %49 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !10471
  %50 = load %struct.rtx_def*, %struct.rtx_def** %check, align 8, !dbg !10472
  %u78 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %50, i32 0, i32 1, !dbg !10472
  %fld79 = bitcast %union.u* %u78 to [1 x %union.rtunion_def]*, !dbg !10472
  %arrayidx80 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld79, i64 0, i64 8, !dbg !10472
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx80 to %struct.rtx_def**, !dbg !10472
  store %struct.rtx_def* %49, %struct.rtx_def** %rt_rtx, align 8, !dbg !10473
  %51 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !10474
  %u81 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %51, i32 0, i32 1, !dbg !10474
  %fld82 = bitcast %union.u* %u81 to [1 x %union.rtunion_def]*, !dbg !10474
  %arrayidx83 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld82, i64 0, i64 4, !dbg !10474
  %rt_int84 = bitcast %union.rtunion_def* %arrayidx83 to i32*, !dbg !10474
  %52 = load i32, i32* %rt_int84, align 8, !dbg !10475
  %inc = add nsw i32 %52, 1, !dbg !10475
  store i32 %inc, i32* %rt_int84, align 8, !dbg !10475
  br label %if.end87, !dbg !10476

if.else85:                                        ; preds = %if.end69
  %53 = load %struct.rtx_def*, %struct.rtx_def** %check, align 8, !dbg !10477
  %54 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10478
  %call86 = call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %53, %struct.rtx_def* %54), !dbg !10479
  store %struct.rtx_def* %call86, %struct.rtx_def** %check, align 8, !dbg !10480
  br label %if.end87

if.end87:                                         ; preds = %if.else85, %if.then76
  %55 = load %struct.rtx_def*, %struct.rtx_def** %check, align 8, !dbg !10481
  call void @haifa_init_insn(%struct.rtx_def* %55), !dbg !10482
  %56 = load i32, i32* @sched_ready_n_insns, align 4, !dbg !10483
  %cmp88 = icmp ne i32 %56, -1, !dbg !10483
  br i1 %cmp88, label %cond.false91, label %cond.true90, !dbg !10483

cond.true90:                                      ; preds = %if.end87
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 4503, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !10483
  br label %cond.end92, !dbg !10483

cond.false91:                                     ; preds = %if.end87
  br label %cond.end92, !dbg !10483

cond.end92:                                       ; preds = %cond.false91, %cond.true90
  %cond93 = phi i32 [ 0, %cond.true90 ], [ 0, %cond.false91 ], !dbg !10483
  %57 = load i32, i32* @sched_ready_n_insns, align 4, !dbg !10484
  %add = add nsw i32 %57, 1, !dbg !10485
  call void @sched_extend_ready_list(i32 %add), !dbg !10486
  %58 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !10487
  %add_remove_insn = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %58, i32 0, i32 14, !dbg !10489
  %59 = load void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)** %add_remove_insn, align 8, !dbg !10489
  %tobool94 = icmp ne void (%struct.rtx_def*, i32)* %59, null, !dbg !10487
  br i1 %tobool94, label %if.then95, label %if.end97, !dbg !10490

if.then95:                                        ; preds = %cond.end92
  %60 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !10491
  %add_remove_insn96 = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %60, i32 0, i32 14, !dbg !10492
  %61 = load void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)** %add_remove_insn96, align 8, !dbg !10492
  %62 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10493
  call void %61(%struct.rtx_def* %62, i32 0), !dbg !10491
  br label %if.end97, !dbg !10491

if.end97:                                         ; preds = %if.then95, %cond.end92
  %63 = load %struct.basic_block_def*, %struct.basic_block_def** %rec, align 8, !dbg !10494
  %64 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10495
  %tobool98 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %64, null, !dbg !10495
  br i1 %tobool98, label %cond.true99, label %cond.false101, !dbg !10495

cond.true99:                                      ; preds = %if.end97
  %65 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10495
  %base100 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %65, i32 0, i32 0, !dbg !10495
  br label %cond.end102, !dbg !10495

cond.false101:                                    ; preds = %if.end97
  br label %cond.end102, !dbg !10495

cond.end102:                                      ; preds = %cond.false101, %cond.true99
  %cond103 = phi %struct.VEC_haifa_insn_data_def_base* [ %base100, %cond.true99 ], [ null, %cond.false101 ], !dbg !10495
  %66 = load %struct.rtx_def*, %struct.rtx_def** %check, align 8, !dbg !10495
  %u104 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %66, i32 0, i32 1, !dbg !10495
  %fld105 = bitcast %union.u* %u104 to [1 x %union.rtunion_def]*, !dbg !10495
  %arrayidx106 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld105, i64 0, i64 0, !dbg !10495
  %rt_int107 = bitcast %union.rtunion_def* %arrayidx106 to i32*, !dbg !10495
  %67 = load i32, i32* %rt_int107, align 8, !dbg !10495
  %call108 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond103, i32 %67), !dbg !10495
  %recovery_block109 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call108, i32 0, i32 11, !dbg !10495
  store %struct.basic_block_def* %63, %struct.basic_block_def** %recovery_block109, align 8, !dbg !10496
  %68 = load i32, i32* @sched_verbose, align 4, !dbg !10497
  %tobool110 = icmp ne i32 %68, 0, !dbg !10497
  br i1 %tobool110, label %land.lhs.true111, label %if.end117, !dbg !10499

land.lhs.true111:                                 ; preds = %cond.end102
  %69 = load %struct.spec_info_def*, %struct.spec_info_def** @spec_info, align 8, !dbg !10500
  %dump = getelementptr inbounds %struct.spec_info_def, %struct.spec_info_def* %69, i32 0, i32 1, !dbg !10501
  %70 = load %struct._IO_FILE*, %struct._IO_FILE** %dump, align 8, !dbg !10501
  %tobool112 = icmp ne %struct._IO_FILE* %70, null, !dbg !10500
  br i1 %tobool112, label %if.then113, label %if.end117, !dbg !10502

if.then113:                                       ; preds = %land.lhs.true111
  %71 = load %struct.spec_info_def*, %struct.spec_info_def** @spec_info, align 8, !dbg !10503
  %dump114 = getelementptr inbounds %struct.spec_info_def, %struct.spec_info_def* %71, i32 0, i32 1, !dbg !10504
  %72 = load %struct._IO_FILE*, %struct._IO_FILE** %dump114, align 8, !dbg !10504
  %73 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !10505
  %print_insn = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %73, i32 0, i32 5, !dbg !10506
  %74 = load i8* (%struct.rtx_def*, i32)*, i8* (%struct.rtx_def*, i32)** %print_insn, align 8, !dbg !10506
  %75 = load %struct.rtx_def*, %struct.rtx_def** %check, align 8, !dbg !10507
  %call115 = call i8* %74(%struct.rtx_def* %75, i32 0), !dbg !10508
  %call116 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %72, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.50, i64 0, i64 0), i8* %call115), !dbg !10509
  br label %if.end117, !dbg !10509

if.end117:                                        ; preds = %if.then113, %land.lhs.true111, %cond.end102
  %76 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10510
  %tobool118 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %76, null, !dbg !10510
  br i1 %tobool118, label %cond.true119, label %cond.false121, !dbg !10510

cond.true119:                                     ; preds = %if.end117
  %77 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10510
  %base120 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %77, i32 0, i32 0, !dbg !10510
  br label %cond.end122, !dbg !10510

cond.false121:                                    ; preds = %if.end117
  br label %cond.end122, !dbg !10510

cond.end122:                                      ; preds = %cond.false121, %cond.true119
  %cond123 = phi %struct.VEC_haifa_insn_data_def_base* [ %base120, %cond.true119 ], [ null, %cond.false121 ], !dbg !10510
  %78 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10510
  %u124 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %78, i32 0, i32 1, !dbg !10510
  %fld125 = bitcast %union.u* %u124 to [1 x %union.rtunion_def]*, !dbg !10510
  %arrayidx126 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld125, i64 0, i64 0, !dbg !10510
  %rt_int127 = bitcast %union.rtunion_def* %arrayidx126 to i32*, !dbg !10510
  %79 = load i32, i32* %rt_int127, align 8, !dbg !10510
  %call128 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond123, i32 %79), !dbg !10510
  %orig_pat129 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call128, i32 0, i32 12, !dbg !10510
  %80 = load %struct.rtx_def*, %struct.rtx_def** %orig_pat129, align 8, !dbg !10510
  %tobool130 = icmp ne %struct.rtx_def* %80, null, !dbg !10510
  br i1 %tobool130, label %cond.false132, label %cond.true131, !dbg !10510

cond.true131:                                     ; preds = %cond.end122
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 4515, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !10510
  br label %cond.end133, !dbg !10510

cond.false132:                                    ; preds = %cond.end122
  br label %cond.end133, !dbg !10510

cond.end133:                                      ; preds = %cond.false132, %cond.true131
  %cond134 = phi i32 [ 0, %cond.true131 ], [ 0, %cond.false132 ], !dbg !10510
  %81 = load %struct.basic_block_def*, %struct.basic_block_def** %rec, align 8, !dbg !10511
  %82 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10513
  %add.ptr135 = getelementptr inbounds %struct.function, %struct.function* %82, i64 0, !dbg !10513
  %cfg136 = getelementptr inbounds %struct.function, %struct.function* %add.ptr135, i32 0, i32 1, !dbg !10513
  %83 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg136, align 8, !dbg !10513
  %x_exit_block_ptr137 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %83, i32 0, i32 1, !dbg !10513
  %84 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr137, align 8, !dbg !10513
  %cmp138 = icmp ne %struct.basic_block_def* %81, %84, !dbg !10514
  br i1 %cmp138, label %if.then140, label %if.else177, !dbg !10515

if.then140:                                       ; preds = %cond.end133
  call void @llvm.dbg.declare(metadata %struct._sd_iterator* %sd_it141, metadata !10516, metadata !DIExpression()), !dbg !10518
  call void @llvm.dbg.declare(metadata %struct._dep** %dep142, metadata !10519, metadata !DIExpression()), !dbg !10520
  %85 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10521
  call void @sd_iterator_start(%struct._sd_iterator* sret %tmp, %struct.rtx_def* %85, i32 8), !dbg !10521
  %86 = bitcast %struct._sd_iterator* %sd_it141 to i8*, !dbg !10521
  %87 = bitcast %struct._sd_iterator* %tmp to i8*, !dbg !10521
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %86, i8* align 8 %87, i64 32, i1 false), !dbg !10521
  br label %for.cond, !dbg !10521

for.cond:                                         ; preds = %for.inc, %if.then140
  %call143 = call zeroext i8 @sd_iterator_cond(%struct._sd_iterator* %sd_it141, %struct._dep** %dep142), !dbg !10523
  %tobool144 = icmp ne i8 %call143, 0, !dbg !10521
  br i1 %tobool144, label %for.body, label %for.end, !dbg !10521

for.body:                                         ; preds = %for.cond
  %88 = load %struct._dep*, %struct._dep** %dep142, align 8, !dbg !10525
  %status = getelementptr inbounds %struct._dep, %struct._dep* %88, i32 0, i32 3, !dbg !10525
  %89 = load i32, i32* %status, align 4, !dbg !10525
  %and145 = and i32 %89, 33554432, !dbg !10527
  %cmp146 = icmp ne i32 %and145, 0, !dbg !10528
  br i1 %cmp146, label %if.then148, label %if.end149, !dbg !10529

if.then148:                                       ; preds = %for.body
  call void @llvm.dbg.declare(metadata %struct._dep* %_dep2, metadata !10530, metadata !DIExpression()), !dbg !10532
  call void @llvm.dbg.declare(metadata %struct._dep** %dep2, metadata !10533, metadata !DIExpression()), !dbg !10534
  store %struct._dep* %_dep2, %struct._dep** %dep2, align 8, !dbg !10534
  %90 = load %struct._dep*, %struct._dep** %dep2, align 8, !dbg !10535
  %91 = load %struct._dep*, %struct._dep** %dep142, align 8, !dbg !10536
  %pro = getelementptr inbounds %struct._dep, %struct._dep* %91, i32 0, i32 0, !dbg !10536
  %92 = load %struct.rtx_def*, %struct.rtx_def** %pro, align 8, !dbg !10536
  %93 = load %struct.rtx_def*, %struct.rtx_def** %check, align 8, !dbg !10537
  call void @init_dep(%struct._dep* %90, %struct.rtx_def* %92, %struct.rtx_def* %93, i32 0), !dbg !10538
  %94 = load %struct._dep*, %struct._dep** %dep2, align 8, !dbg !10539
  call void @sd_add_dep(%struct._dep* %94, i8 zeroext 1), !dbg !10540
  br label %if.end149, !dbg !10541

if.end149:                                        ; preds = %if.then148, %for.body
  br label %for.inc, !dbg !10542

for.inc:                                          ; preds = %if.end149
  call void @sd_iterator_next(%struct._sd_iterator* %sd_it141), !dbg !10523
  br label %for.cond, !dbg !10523, !llvm.loop !10543

for.end:                                          ; preds = %for.cond
  %95 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10545
  %tobool150 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %95, null, !dbg !10545
  br i1 %tobool150, label %cond.true151, label %cond.false153, !dbg !10545

cond.true151:                                     ; preds = %for.end
  %96 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10545
  %base152 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %96, i32 0, i32 0, !dbg !10545
  br label %cond.end154, !dbg !10545

cond.false153:                                    ; preds = %for.end
  br label %cond.end154, !dbg !10545

cond.end154:                                      ; preds = %cond.false153, %cond.true151
  %cond155 = phi %struct.VEC_haifa_insn_data_def_base* [ %base152, %cond.true151 ], [ null, %cond.false153 ], !dbg !10545
  %97 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10545
  %u156 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %97, i32 0, i32 1, !dbg !10545
  %fld157 = bitcast %union.u* %u156 to [1 x %union.rtunion_def]*, !dbg !10545
  %arrayidx158 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld157, i64 0, i64 0, !dbg !10545
  %rt_int159 = bitcast %union.rtunion_def* %arrayidx158 to i32*, !dbg !10545
  %98 = load i32, i32* %rt_int159, align 8, !dbg !10545
  %call160 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond155, i32 %98), !dbg !10545
  %orig_pat161 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call160, i32 0, i32 12, !dbg !10545
  %99 = load %struct.rtx_def*, %struct.rtx_def** %orig_pat161, align 8, !dbg !10545
  %100 = load %struct.basic_block_def*, %struct.basic_block_def** %rec, align 8, !dbg !10546
  %il162 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %100, i32 0, i32 7, !dbg !10546
  %rtl163 = bitcast %union.basic_block_il_dependent* %il162 to %struct.rtl_bb_info**, !dbg !10546
  %101 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl163, align 8, !dbg !10546
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %101, i32 0, i32 1, !dbg !10546
  %102 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !10546
  %call164 = call %struct.rtx_def* @emit_insn_after(%struct.rtx_def* %99, %struct.rtx_def* %102), !dbg !10547
  store %struct.rtx_def* %call164, %struct.rtx_def** %twin, align 8, !dbg !10548
  %103 = load %struct.rtx_def*, %struct.rtx_def** %twin, align 8, !dbg !10549
  call void @haifa_init_insn(%struct.rtx_def* %103), !dbg !10550
  %104 = load i32, i32* @sched_verbose, align 4, !dbg !10551
  %tobool165 = icmp ne i32 %104, 0, !dbg !10551
  br i1 %tobool165, label %land.lhs.true166, label %if.end176, !dbg !10553

land.lhs.true166:                                 ; preds = %cond.end154
  %105 = load %struct.spec_info_def*, %struct.spec_info_def** @spec_info, align 8, !dbg !10554
  %dump167 = getelementptr inbounds %struct.spec_info_def, %struct.spec_info_def* %105, i32 0, i32 1, !dbg !10555
  %106 = load %struct._IO_FILE*, %struct._IO_FILE** %dump167, align 8, !dbg !10555
  %tobool168 = icmp ne %struct._IO_FILE* %106, null, !dbg !10554
  br i1 %tobool168, label %if.then169, label %if.end176, !dbg !10556

if.then169:                                       ; preds = %land.lhs.true166
  %107 = load %struct.spec_info_def*, %struct.spec_info_def** @spec_info, align 8, !dbg !10557
  %dump170 = getelementptr inbounds %struct.spec_info_def, %struct.spec_info_def* %107, i32 0, i32 1, !dbg !10558
  %108 = load %struct._IO_FILE*, %struct._IO_FILE** %dump170, align 8, !dbg !10558
  %109 = load %struct.rtx_def*, %struct.rtx_def** %twin, align 8, !dbg !10559
  %u171 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %109, i32 0, i32 1, !dbg !10559
  %fld172 = bitcast %union.u* %u171 to [1 x %union.rtunion_def]*, !dbg !10559
  %arrayidx173 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld172, i64 0, i64 0, !dbg !10559
  %rt_int174 = bitcast %union.rtunion_def* %arrayidx173 to i32*, !dbg !10559
  %110 = load i32, i32* %rt_int174, align 8, !dbg !10559
  %111 = load %struct.basic_block_def*, %struct.basic_block_def** %rec, align 8, !dbg !10560
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %111, i32 0, i32 9, !dbg !10561
  %112 = load i32, i32* %index, align 8, !dbg !10561
  %call175 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %108, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.51, i64 0, i64 0), i32 %110, i32 %112), !dbg !10562
  br label %if.end176, !dbg !10562

if.end176:                                        ; preds = %if.then169, %land.lhs.true166, %cond.end154
  br label %if.end220, !dbg !10563

if.else177:                                       ; preds = %cond.end133
  %113 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10564
  %tobool178 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %113, null, !dbg !10564
  br i1 %tobool178, label %cond.true179, label %cond.false181, !dbg !10564

cond.true179:                                     ; preds = %if.else177
  %114 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10564
  %base180 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %114, i32 0, i32 0, !dbg !10564
  br label %cond.end182, !dbg !10564

cond.false181:                                    ; preds = %if.else177
  br label %cond.end182, !dbg !10564

cond.end182:                                      ; preds = %cond.false181, %cond.true179
  %cond183 = phi %struct.VEC_haifa_insn_data_def_base* [ %base180, %cond.true179 ], [ null, %cond.false181 ], !dbg !10564
  %115 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10564
  %u184 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %115, i32 0, i32 1, !dbg !10564
  %fld185 = bitcast %union.u* %u184 to [1 x %union.rtunion_def]*, !dbg !10564
  %arrayidx186 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld185, i64 0, i64 0, !dbg !10564
  %rt_int187 = bitcast %union.rtunion_def* %arrayidx186 to i32*, !dbg !10564
  %116 = load i32, i32* %rt_int187, align 8, !dbg !10564
  %call188 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond183, i32 %116), !dbg !10564
  %orig_pat189 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call188, i32 0, i32 12, !dbg !10564
  %117 = load %struct.rtx_def*, %struct.rtx_def** %orig_pat189, align 8, !dbg !10564
  %118 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10566
  %tobool190 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %118, null, !dbg !10566
  br i1 %tobool190, label %cond.true191, label %cond.false193, !dbg !10566

cond.true191:                                     ; preds = %cond.end182
  %119 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10566
  %base192 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %119, i32 0, i32 0, !dbg !10566
  br label %cond.end194, !dbg !10566

cond.false193:                                    ; preds = %cond.end182
  br label %cond.end194, !dbg !10566

cond.end194:                                      ; preds = %cond.false193, %cond.true191
  %cond195 = phi %struct.VEC_haifa_insn_data_def_base* [ %base192, %cond.true191 ], [ null, %cond.false193 ], !dbg !10566
  %120 = load %struct.rtx_def*, %struct.rtx_def** %check, align 8, !dbg !10566
  %u196 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %120, i32 0, i32 1, !dbg !10566
  %fld197 = bitcast %union.u* %u196 to [1 x %union.rtunion_def]*, !dbg !10566
  %arrayidx198 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld197, i64 0, i64 0, !dbg !10566
  %rt_int199 = bitcast %union.rtunion_def* %arrayidx198 to i32*, !dbg !10566
  %121 = load i32, i32* %rt_int199, align 8, !dbg !10566
  %call200 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond195, i32 %121), !dbg !10566
  %orig_pat201 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call200, i32 0, i32 12, !dbg !10566
  store %struct.rtx_def* %117, %struct.rtx_def** %orig_pat201, align 8, !dbg !10567
  %122 = load %struct.VEC_haifa_deps_insn_data_def_heap*, %struct.VEC_haifa_deps_insn_data_def_heap** @h_d_i_d, align 8, !dbg !10568
  %tobool202 = icmp ne %struct.VEC_haifa_deps_insn_data_def_heap* %122, null, !dbg !10568
  br i1 %tobool202, label %cond.true203, label %cond.false205, !dbg !10568

cond.true203:                                     ; preds = %cond.end194
  %123 = load %struct.VEC_haifa_deps_insn_data_def_heap*, %struct.VEC_haifa_deps_insn_data_def_heap** @h_d_i_d, align 8, !dbg !10568
  %base204 = getelementptr inbounds %struct.VEC_haifa_deps_insn_data_def_heap, %struct.VEC_haifa_deps_insn_data_def_heap* %123, i32 0, i32 0, !dbg !10568
  br label %cond.end206, !dbg !10568

cond.false205:                                    ; preds = %cond.end194
  br label %cond.end206, !dbg !10568

cond.end206:                                      ; preds = %cond.false205, %cond.true203
  %cond207 = phi %struct.VEC_haifa_deps_insn_data_def_base* [ %base204, %cond.true203 ], [ null, %cond.false205 ], !dbg !10568
  %124 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !10568
  %tobool208 = icmp ne %struct.VEC_int_heap* %124, null, !dbg !10568
  br i1 %tobool208, label %cond.true209, label %cond.false211, !dbg !10568

cond.true209:                                     ; preds = %cond.end206
  %125 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !10568
  %base210 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %125, i32 0, i32 0, !dbg !10568
  br label %cond.end212, !dbg !10568

cond.false211:                                    ; preds = %cond.end206
  br label %cond.end212, !dbg !10568

cond.end212:                                      ; preds = %cond.false211, %cond.true209
  %cond213 = phi %struct.VEC_int_base* [ %base210, %cond.true209 ], [ null, %cond.false211 ], !dbg !10568
  %126 = load %struct.rtx_def*, %struct.rtx_def** %check, align 8, !dbg !10568
  %u214 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %126, i32 0, i32 1, !dbg !10568
  %fld215 = bitcast %union.u* %u214 to [1 x %union.rtunion_def]*, !dbg !10568
  %arrayidx216 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld215, i64 0, i64 0, !dbg !10568
  %rt_int217 = bitcast %union.rtunion_def* %arrayidx216 to i32*, !dbg !10568
  %127 = load i32, i32* %rt_int217, align 8, !dbg !10568
  %call218 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond213, i32 %127), !dbg !10568
  %call219 = call %struct._haifa_deps_insn_data* @VEC_haifa_deps_insn_data_def_base_index(%struct.VEC_haifa_deps_insn_data_def_base* %cond207, i32 %call218), !dbg !10568
  %has_internal_dep = getelementptr inbounds %struct._haifa_deps_insn_data, %struct._haifa_deps_insn_data* %call219, i32 0, i32 1, !dbg !10568
  store i32 1, i32* %has_internal_dep, align 4, !dbg !10569
  %128 = load %struct.rtx_def*, %struct.rtx_def** %check, align 8, !dbg !10570
  store %struct.rtx_def* %128, %struct.rtx_def** %twin, align 8, !dbg !10571
  br label %if.end220

if.end220:                                        ; preds = %cond.end212, %if.end176
  %129 = load %struct.rtx_def*, %struct.rtx_def** %twin, align 8, !dbg !10572
  %130 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10573
  call void @sd_copy_back_deps(%struct.rtx_def* %129, %struct.rtx_def* %130, i8 zeroext 1), !dbg !10574
  %131 = load %struct.basic_block_def*, %struct.basic_block_def** %rec, align 8, !dbg !10575
  %132 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10577
  %add.ptr221 = getelementptr inbounds %struct.function, %struct.function* %132, i64 0, !dbg !10577
  %cfg222 = getelementptr inbounds %struct.function, %struct.function* %add.ptr221, i32 0, i32 1, !dbg !10577
  %133 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg222, align 8, !dbg !10577
  %x_exit_block_ptr223 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %133, i32 0, i32 1, !dbg !10577
  %134 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr223, align 8, !dbg !10577
  %cmp224 = icmp ne %struct.basic_block_def* %131, %134, !dbg !10578
  br i1 %cmp224, label %if.then226, label %if.end237, !dbg !10579

if.then226:                                       ; preds = %if.end220
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %first_bb, metadata !10580, metadata !DIExpression()), !dbg !10582
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %second_bb, metadata !10583, metadata !DIExpression()), !dbg !10584
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %jump, metadata !10585, metadata !DIExpression()), !dbg !10586
  %135 = load %struct.rtx_def*, %struct.rtx_def** %check, align 8, !dbg !10587
  %u227 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %135, i32 0, i32 1, !dbg !10587
  %fld228 = bitcast %union.u* %u227 to [1 x %union.rtunion_def]*, !dbg !10587
  %arrayidx229 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld228, i64 0, i64 3, !dbg !10587
  %rt_bb = bitcast %union.rtunion_def* %arrayidx229 to %struct.basic_block_def**, !dbg !10587
  %136 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !10587
  store %struct.basic_block_def* %136, %struct.basic_block_def** %first_bb, align 8, !dbg !10588
  %137 = load %struct.basic_block_def* (%struct.basic_block_def*, %struct.rtx_def*)*, %struct.basic_block_def* (%struct.basic_block_def*, %struct.rtx_def*)** @sched_split_block, align 8, !dbg !10589
  %138 = load %struct.basic_block_def*, %struct.basic_block_def** %first_bb, align 8, !dbg !10590
  %139 = load %struct.rtx_def*, %struct.rtx_def** %check, align 8, !dbg !10591
  %call230 = call %struct.basic_block_def* %137(%struct.basic_block_def* %138, %struct.rtx_def* %139), !dbg !10589
  store %struct.basic_block_def* %call230, %struct.basic_block_def** %second_bb, align 8, !dbg !10592
  %140 = load %struct.basic_block_def*, %struct.basic_block_def** %first_bb, align 8, !dbg !10593
  %141 = load %struct.basic_block_def*, %struct.basic_block_def** %rec, align 8, !dbg !10594
  %142 = load %struct.basic_block_def*, %struct.basic_block_def** %second_bb, align 8, !dbg !10595
  call void @sched_create_recovery_edges(%struct.basic_block_def* %140, %struct.basic_block_def* %141, %struct.basic_block_def* %142), !dbg !10596
  %143 = load void (%struct.basic_block_def*, %struct.basic_block_def*)*, void (%struct.basic_block_def*, %struct.basic_block_def*)** @sched_init_only_bb, align 8, !dbg !10597
  %144 = load %struct.basic_block_def*, %struct.basic_block_def** %second_bb, align 8, !dbg !10598
  %145 = load %struct.basic_block_def*, %struct.basic_block_def** %first_bb, align 8, !dbg !10599
  call void %143(%struct.basic_block_def* %144, %struct.basic_block_def* %145), !dbg !10597
  %146 = load void (%struct.basic_block_def*, %struct.basic_block_def*)*, void (%struct.basic_block_def*, %struct.basic_block_def*)** @sched_init_only_bb, align 8, !dbg !10600
  %147 = load %struct.basic_block_def*, %struct.basic_block_def** %rec, align 8, !dbg !10601
  %148 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10602
  %add.ptr231 = getelementptr inbounds %struct.function, %struct.function* %148, i64 0, !dbg !10602
  %cfg232 = getelementptr inbounds %struct.function, %struct.function* %add.ptr231, i32 0, i32 1, !dbg !10602
  %149 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg232, align 8, !dbg !10602
  %x_exit_block_ptr233 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %149, i32 0, i32 1, !dbg !10602
  %150 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr233, align 8, !dbg !10602
  call void %146(%struct.basic_block_def* %147, %struct.basic_block_def* %150), !dbg !10600
  %151 = load %struct.basic_block_def*, %struct.basic_block_def** %rec, align 8, !dbg !10603
  %il234 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %151, i32 0, i32 7, !dbg !10603
  %rtl235 = bitcast %union.basic_block_il_dependent* %il234 to %struct.rtl_bb_info**, !dbg !10603
  %152 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl235, align 8, !dbg !10603
  %end_236 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %152, i32 0, i32 1, !dbg !10603
  %153 = load %struct.rtx_def*, %struct.rtx_def** %end_236, align 8, !dbg !10603
  store %struct.rtx_def* %153, %struct.rtx_def** %jump, align 8, !dbg !10604
  %154 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !10605
  call void @haifa_init_insn(%struct.rtx_def* %154), !dbg !10606
  br label %if.end237, !dbg !10607

if.end237:                                        ; preds = %if.then226, %if.end220
  %155 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10608
  call void @sd_iterator_start(%struct._sd_iterator* sret %tmp238, %struct.rtx_def* %155, i32 3), !dbg !10608
  %156 = bitcast %struct._sd_iterator* %sd_it to i8*, !dbg !10608
  %157 = bitcast %struct._sd_iterator* %tmp238 to i8*, !dbg !10608
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %156, i8* align 8 %157, i64 32, i1 false), !dbg !10608
  br label %for.cond239, !dbg !10608

for.cond239:                                      ; preds = %for.inc263, %if.end237
  %call240 = call zeroext i8 @sd_iterator_cond(%struct._sd_iterator* %sd_it, %struct._dep** %dep), !dbg !10610
  %tobool241 = icmp ne i8 %call240, 0, !dbg !10608
  br i1 %tobool241, label %for.body242, label %for.end264, !dbg !10608

for.body242:                                      ; preds = %for.cond239
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pro243, metadata !10612, metadata !DIExpression()), !dbg !10614
  %158 = load %struct._dep*, %struct._dep** %dep, align 8, !dbg !10615
  %pro244 = getelementptr inbounds %struct._dep, %struct._dep* %158, i32 0, i32 0, !dbg !10615
  %159 = load %struct.rtx_def*, %struct.rtx_def** %pro244, align 8, !dbg !10615
  store %struct.rtx_def* %159, %struct.rtx_def** %pro243, align 8, !dbg !10614
  call void @llvm.dbg.declare(metadata i32* %ds, metadata !10616, metadata !DIExpression()), !dbg !10617
  %160 = load %struct._dep*, %struct._dep** %dep, align 8, !dbg !10618
  %status245 = getelementptr inbounds %struct._dep, %struct._dep* %160, i32 0, i32 3, !dbg !10618
  %161 = load i32, i32* %status245, align 4, !dbg !10618
  store i32 %161, i32* %ds, align 4, !dbg !10619
  %162 = load i32, i32* %ds, align 4, !dbg !10620
  %and246 = and i32 %162, 258111, !dbg !10622
  %tobool247 = icmp ne i32 %and246, 0, !dbg !10622
  br i1 %tobool247, label %if.then248, label %if.end255, !dbg !10623

if.then248:                                       ; preds = %for.body242
  %163 = load i8, i8* %mutate_p.addr, align 1, !dbg !10624
  %tobool249 = icmp ne i8 %163, 0, !dbg !10624
  br i1 %tobool249, label %cond.true250, label %cond.false251, !dbg !10624

cond.true250:                                     ; preds = %if.then248
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 4602, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !10624
  br label %cond.end252, !dbg !10624

cond.false251:                                    ; preds = %if.then248
  br label %cond.end252, !dbg !10624

cond.end252:                                      ; preds = %cond.false251, %cond.true250
  %cond253 = phi i32 [ 0, %cond.true250 ], [ 0, %cond.false251 ], !dbg !10624
  %164 = load i32, i32* %ds, align 4, !dbg !10626
  %and254 = and i32 %164, -258112, !dbg !10626
  store i32 %and254, i32* %ds, align 4, !dbg !10626
  br label %if.end255, !dbg !10627

if.end255:                                        ; preds = %cond.end252, %for.body242
  %165 = load %struct._dep*, %struct._dep** %new_dep, align 8, !dbg !10628
  %166 = load %struct.rtx_def*, %struct.rtx_def** %pro243, align 8, !dbg !10629
  %167 = load %struct.rtx_def*, %struct.rtx_def** %check, align 8, !dbg !10630
  %168 = load %struct._dep*, %struct._dep** %dep, align 8, !dbg !10631
  %type = getelementptr inbounds %struct._dep, %struct._dep* %168, i32 0, i32 2, !dbg !10631
  %169 = load i32, i32* %type, align 8, !dbg !10631
  %170 = load i32, i32* %ds, align 4, !dbg !10632
  call void @init_dep_1(%struct._dep* %165, %struct.rtx_def* %166, %struct.rtx_def* %167, i32 %169, i32 %170), !dbg !10633
  %171 = load %struct._dep*, %struct._dep** %new_dep, align 8, !dbg !10634
  call void @sd_add_dep(%struct._dep* %171, i8 zeroext 0), !dbg !10635
  %172 = load %struct.basic_block_def*, %struct.basic_block_def** %rec, align 8, !dbg !10636
  %173 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10638
  %add.ptr256 = getelementptr inbounds %struct.function, %struct.function* %173, i64 0, !dbg !10638
  %cfg257 = getelementptr inbounds %struct.function, %struct.function* %add.ptr256, i32 0, i32 1, !dbg !10638
  %174 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg257, align 8, !dbg !10638
  %x_exit_block_ptr258 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %174, i32 0, i32 1, !dbg !10638
  %175 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr258, align 8, !dbg !10638
  %cmp259 = icmp ne %struct.basic_block_def* %172, %175, !dbg !10639
  br i1 %cmp259, label %if.then261, label %if.end262, !dbg !10640

if.then261:                                       ; preds = %if.end255
  %176 = load %struct.rtx_def*, %struct.rtx_def** %twin, align 8, !dbg !10641
  %177 = load %struct._dep*, %struct._dep** %new_dep, align 8, !dbg !10643
  %con = getelementptr inbounds %struct._dep, %struct._dep* %177, i32 0, i32 1, !dbg !10643
  store %struct.rtx_def* %176, %struct.rtx_def** %con, align 8, !dbg !10644
  %178 = load %struct._dep*, %struct._dep** %new_dep, align 8, !dbg !10645
  call void @sd_add_dep(%struct._dep* %178, i8 zeroext 0), !dbg !10646
  br label %if.end262, !dbg !10647

if.end262:                                        ; preds = %if.then261, %if.end255
  br label %for.inc263, !dbg !10648

for.inc263:                                       ; preds = %if.end262
  call void @sd_iterator_next(%struct._sd_iterator* %sd_it), !dbg !10610
  br label %for.cond239, !dbg !10610, !llvm.loop !10649

for.end264:                                       ; preds = %for.cond239
  %179 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10651
  call void @sd_iterator_start(%struct._sd_iterator* sret %tmp265, %struct.rtx_def* %179, i32 2), !dbg !10653
  %180 = bitcast %struct._sd_iterator* %sd_it to i8*, !dbg !10653
  %181 = bitcast %struct._sd_iterator* %tmp265 to i8*, !dbg !10653
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %180, i8* align 8 %181, i64 32, i1 false), !dbg !10653
  br label %for.cond266, !dbg !10654

for.cond266:                                      ; preds = %if.end278, %for.end264
  %call267 = call zeroext i8 @sd_iterator_cond(%struct._sd_iterator* %sd_it, %struct._dep** %dep), !dbg !10655
  %tobool268 = icmp ne i8 %call267, 0, !dbg !10657
  br i1 %tobool268, label %for.body269, label %for.end279, !dbg !10657

for.body269:                                      ; preds = %for.cond266
  %182 = load %struct._dep*, %struct._dep** %dep, align 8, !dbg !10658
  %status270 = getelementptr inbounds %struct._dep, %struct._dep* %182, i32 0, i32 3, !dbg !10658
  %183 = load i32, i32* %status270, align 4, !dbg !10658
  %and271 = and i32 %183, 258111, !dbg !10661
  %tobool272 = icmp ne i32 %and271, 0, !dbg !10661
  br i1 %tobool272, label %if.then276, label %lor.lhs.false273, !dbg !10662

lor.lhs.false273:                                 ; preds = %for.body269
  %184 = load i8, i8* %mutate_p.addr, align 1, !dbg !10663
  %conv274 = zext i8 %184 to i32, !dbg !10663
  %tobool275 = icmp ne i32 %conv274, 0, !dbg !10663
  br i1 %tobool275, label %if.then276, label %if.else277, !dbg !10664

if.then276:                                       ; preds = %lor.lhs.false273, %for.body269
  call void @sd_delete_dep(%struct._sd_iterator* byval(%struct._sd_iterator) align 8 %sd_it), !dbg !10665
  br label %if.end278, !dbg !10665

if.else277:                                       ; preds = %lor.lhs.false273
  call void @sd_iterator_next(%struct._sd_iterator* %sd_it), !dbg !10666
  br label %if.end278

if.end278:                                        ; preds = %if.else277, %if.then276
  br label %for.cond266, !dbg !10667, !llvm.loop !10668

for.end279:                                       ; preds = %for.cond266
  store i32 0, i32* %fs, align 4, !dbg !10670
  %185 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10671
  %tobool280 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %185, null, !dbg !10671
  br i1 %tobool280, label %cond.true281, label %cond.false283, !dbg !10671

cond.true281:                                     ; preds = %for.end279
  %186 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10671
  %base282 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %186, i32 0, i32 0, !dbg !10671
  br label %cond.end284, !dbg !10671

cond.false283:                                    ; preds = %for.end279
  br label %cond.end284, !dbg !10671

cond.end284:                                      ; preds = %cond.false283, %cond.true281
  %cond285 = phi %struct.VEC_haifa_insn_data_def_base* [ %base282, %cond.true281 ], [ null, %cond.false283 ], !dbg !10671
  %187 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10671
  %u286 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %187, i32 0, i32 1, !dbg !10671
  %fld287 = bitcast %union.u* %u286 to [1 x %union.rtunion_def]*, !dbg !10671
  %arrayidx288 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld287, i64 0, i64 0, !dbg !10671
  %rt_int289 = bitcast %union.rtunion_def* %arrayidx288 to i32*, !dbg !10671
  %188 = load i32, i32* %rt_int289, align 8, !dbg !10671
  %call290 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond285, i32 %188), !dbg !10671
  %done_spec = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call290, i32 0, i32 9, !dbg !10671
  %189 = load i32, i32* %done_spec, align 4, !dbg !10671
  %tobool291 = icmp ne i32 %189, 0, !dbg !10671
  br i1 %tobool291, label %cond.true292, label %cond.false293, !dbg !10671

cond.true292:                                     ; preds = %cond.end284
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 4635, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !10671
  br label %cond.end294, !dbg !10671

cond.false293:                                    ; preds = %cond.end284
  br label %cond.end294, !dbg !10671

cond.end294:                                      ; preds = %cond.false293, %cond.true292
  %cond295 = phi i32 [ 0, %cond.true292 ], [ 0, %cond.false293 ], !dbg !10671
  %190 = load i8, i8* %mutate_p.addr, align 1, !dbg !10672
  %tobool296 = icmp ne i8 %190, 0, !dbg !10672
  br i1 %tobool296, label %if.else348, label %if.then297, !dbg !10674

if.then297:                                       ; preds = %cond.end294
  call void @llvm.dbg.declare(metadata i32* %ts, metadata !10675, metadata !DIExpression()), !dbg !10677
  %191 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10678
  %tobool298 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %191, null, !dbg !10678
  br i1 %tobool298, label %cond.true299, label %cond.false301, !dbg !10678

cond.true299:                                     ; preds = %if.then297
  %192 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10678
  %base300 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %192, i32 0, i32 0, !dbg !10678
  br label %cond.end302, !dbg !10678

cond.false301:                                    ; preds = %if.then297
  br label %cond.end302, !dbg !10678

cond.end302:                                      ; preds = %cond.false301, %cond.true299
  %cond303 = phi %struct.VEC_haifa_insn_data_def_base* [ %base300, %cond.true299 ], [ null, %cond.false301 ], !dbg !10678
  %193 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10678
  %u304 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %193, i32 0, i32 1, !dbg !10678
  %fld305 = bitcast %union.u* %u304 to [1 x %union.rtunion_def]*, !dbg !10678
  %arrayidx306 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld305, i64 0, i64 0, !dbg !10678
  %rt_int307 = bitcast %union.rtunion_def* %arrayidx306 to i32*, !dbg !10678
  %194 = load i32, i32* %rt_int307, align 8, !dbg !10678
  %call308 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond303, i32 %194), !dbg !10678
  %todo_spec309 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call308, i32 0, i32 8, !dbg !10678
  %195 = load i32, i32* %todo_spec309, align 8, !dbg !10678
  store i32 %195, i32* %ts, align 4, !dbg !10677
  %196 = load i32, i32* %ts, align 4, !dbg !10679
  %and310 = and i32 %196, 258111, !dbg !10680
  %197 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10681
  %tobool311 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %197, null, !dbg !10681
  br i1 %tobool311, label %cond.true312, label %cond.false314, !dbg !10681

cond.true312:                                     ; preds = %cond.end302
  %198 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10681
  %base313 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %198, i32 0, i32 0, !dbg !10681
  br label %cond.end315, !dbg !10681

cond.false314:                                    ; preds = %cond.end302
  br label %cond.end315, !dbg !10681

cond.end315:                                      ; preds = %cond.false314, %cond.true312
  %cond316 = phi %struct.VEC_haifa_insn_data_def_base* [ %base313, %cond.true312 ], [ null, %cond.false314 ], !dbg !10681
  %199 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10681
  %u317 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %199, i32 0, i32 1, !dbg !10681
  %fld318 = bitcast %union.u* %u317 to [1 x %union.rtunion_def]*, !dbg !10681
  %arrayidx319 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld318, i64 0, i64 0, !dbg !10681
  %rt_int320 = bitcast %union.rtunion_def* %arrayidx319 to i32*, !dbg !10681
  %200 = load i32, i32* %rt_int320, align 8, !dbg !10681
  %call321 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond316, i32 %200), !dbg !10681
  %done_spec322 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call321, i32 0, i32 9, !dbg !10681
  store i32 %and310, i32* %done_spec322, align 4, !dbg !10682
  %201 = load i32, i32* %ts, align 4, !dbg !10683
  %and323 = and i32 %201, 258111, !dbg !10684
  %202 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10685
  %tobool324 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %202, null, !dbg !10685
  br i1 %tobool324, label %cond.true325, label %cond.false327, !dbg !10685

cond.true325:                                     ; preds = %cond.end315
  %203 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10685
  %base326 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %203, i32 0, i32 0, !dbg !10685
  br label %cond.end328, !dbg !10685

cond.false327:                                    ; preds = %cond.end315
  br label %cond.end328, !dbg !10685

cond.end328:                                      ; preds = %cond.false327, %cond.true325
  %cond329 = phi %struct.VEC_haifa_insn_data_def_base* [ %base326, %cond.true325 ], [ null, %cond.false327 ], !dbg !10685
  %204 = load %struct.rtx_def*, %struct.rtx_def** %check, align 8, !dbg !10685
  %u330 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %204, i32 0, i32 1, !dbg !10685
  %fld331 = bitcast %union.u* %u330 to [1 x %union.rtunion_def]*, !dbg !10685
  %arrayidx332 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld331, i64 0, i64 0, !dbg !10685
  %rt_int333 = bitcast %union.rtunion_def* %arrayidx332 to i32*, !dbg !10685
  %205 = load i32, i32* %rt_int333, align 8, !dbg !10685
  %call334 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond329, i32 %205), !dbg !10685
  %check_spec335 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call334, i32 0, i32 10, !dbg !10685
  store i32 %and323, i32* %check_spec335, align 8, !dbg !10686
  %206 = load i32, i32* %ts, align 4, !dbg !10687
  %and336 = and i32 %206, 63, !dbg !10689
  %tobool337 = icmp ne i32 %and336, 0, !dbg !10689
  br i1 %tobool337, label %if.then338, label %if.end341, !dbg !10690

if.then338:                                       ; preds = %cond.end328
  %207 = load i32, i32* %fs, align 4, !dbg !10691
  %208 = load i32, i32* %ts, align 4, !dbg !10692
  %call339 = call i32 @get_dep_weak(i32 %208, i32 63), !dbg !10693
  %call340 = call i32 @set_dep_weak(i32 %207, i32 4032, i32 %call339), !dbg !10694
  store i32 %call340, i32* %fs, align 4, !dbg !10695
  br label %if.end341, !dbg !10696

if.end341:                                        ; preds = %if.then338, %cond.end328
  %209 = load i32, i32* %ts, align 4, !dbg !10697
  %and342 = and i32 %209, 258048, !dbg !10699
  %tobool343 = icmp ne i32 %and342, 0, !dbg !10699
  br i1 %tobool343, label %if.then344, label %if.end347, !dbg !10700

if.then344:                                       ; preds = %if.end341
  %210 = load i32, i32* %fs, align 4, !dbg !10701
  %211 = load i32, i32* %ts, align 4, !dbg !10702
  %call345 = call i32 @get_dep_weak(i32 %211, i32 258048), !dbg !10703
  %call346 = call i32 @set_dep_weak(i32 %210, i32 16515072, i32 %call345), !dbg !10704
  store i32 %call346, i32* %fs, align 4, !dbg !10705
  br label %if.end347, !dbg !10706

if.end347:                                        ; preds = %if.then344, %if.end341
  br label %if.end373, !dbg !10707

if.else348:                                       ; preds = %cond.end294
  %212 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10708
  %tobool349 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %212, null, !dbg !10708
  br i1 %tobool349, label %cond.true350, label %cond.false352, !dbg !10708

cond.true350:                                     ; preds = %if.else348
  %213 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10708
  %base351 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %213, i32 0, i32 0, !dbg !10708
  br label %cond.end353, !dbg !10708

cond.false352:                                    ; preds = %if.else348
  br label %cond.end353, !dbg !10708

cond.end353:                                      ; preds = %cond.false352, %cond.true350
  %cond354 = phi %struct.VEC_haifa_insn_data_def_base* [ %base351, %cond.true350 ], [ null, %cond.false352 ], !dbg !10708
  %214 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10708
  %u355 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %214, i32 0, i32 1, !dbg !10708
  %fld356 = bitcast %union.u* %u355 to [1 x %union.rtunion_def]*, !dbg !10708
  %arrayidx357 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld356, i64 0, i64 0, !dbg !10708
  %rt_int358 = bitcast %union.rtunion_def* %arrayidx357 to i32*, !dbg !10708
  %215 = load i32, i32* %rt_int358, align 8, !dbg !10708
  %call359 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond354, i32 %215), !dbg !10708
  %check_spec360 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call359, i32 0, i32 10, !dbg !10708
  %216 = load i32, i32* %check_spec360, align 8, !dbg !10708
  %217 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10709
  %tobool361 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %217, null, !dbg !10709
  br i1 %tobool361, label %cond.true362, label %cond.false364, !dbg !10709

cond.true362:                                     ; preds = %cond.end353
  %218 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10709
  %base363 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %218, i32 0, i32 0, !dbg !10709
  br label %cond.end365, !dbg !10709

cond.false364:                                    ; preds = %cond.end353
  br label %cond.end365, !dbg !10709

cond.end365:                                      ; preds = %cond.false364, %cond.true362
  %cond366 = phi %struct.VEC_haifa_insn_data_def_base* [ %base363, %cond.true362 ], [ null, %cond.false364 ], !dbg !10709
  %219 = load %struct.rtx_def*, %struct.rtx_def** %check, align 8, !dbg !10709
  %u367 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %219, i32 0, i32 1, !dbg !10709
  %fld368 = bitcast %union.u* %u367 to [1 x %union.rtunion_def]*, !dbg !10709
  %arrayidx369 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld368, i64 0, i64 0, !dbg !10709
  %rt_int370 = bitcast %union.rtunion_def* %arrayidx369 to i32*, !dbg !10709
  %220 = load i32, i32* %rt_int370, align 8, !dbg !10709
  %call371 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond366, i32 %220), !dbg !10709
  %check_spec372 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call371, i32 0, i32 10, !dbg !10709
  store i32 %216, i32* %check_spec372, align 8, !dbg !10710
  br label %if.end373

if.end373:                                        ; preds = %cond.end365, %if.end347
  %221 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10711
  %222 = load %struct.rtx_def*, %struct.rtx_def** %twin, align 8, !dbg !10712
  %223 = load i32, i32* %fs, align 4, !dbg !10713
  call void @process_insn_forw_deps_be_in_spec(%struct.rtx_def* %221, %struct.rtx_def* %222, i32 %223), !dbg !10714
  %224 = load %struct.basic_block_def*, %struct.basic_block_def** %rec, align 8, !dbg !10715
  %225 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10717
  %add.ptr374 = getelementptr inbounds %struct.function, %struct.function* %225, i64 0, !dbg !10717
  %cfg375 = getelementptr inbounds %struct.function, %struct.function* %add.ptr374, i32 0, i32 1, !dbg !10717
  %226 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg375, align 8, !dbg !10717
  %x_exit_block_ptr376 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %226, i32 0, i32 1, !dbg !10717
  %227 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr376, align 8, !dbg !10717
  %cmp377 = icmp ne %struct.basic_block_def* %224, %227, !dbg !10718
  br i1 %cmp377, label %if.then379, label %if.else411, !dbg !10719

if.then379:                                       ; preds = %if.end373
  %228 = load i8, i8* %mutate_p.addr, align 1, !dbg !10720
  %tobool380 = icmp ne i8 %228, 0, !dbg !10720
  br i1 %tobool380, label %if.else382, label %if.then381, !dbg !10723

if.then381:                                       ; preds = %if.then379
  %229 = load %struct._dep*, %struct._dep** %new_dep, align 8, !dbg !10724
  %230 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10726
  %231 = load %struct.rtx_def*, %struct.rtx_def** %check, align 8, !dbg !10727
  call void @init_dep(%struct._dep* %229, %struct.rtx_def* %230, %struct.rtx_def* %231, i32 0), !dbg !10728
  %232 = load %struct._dep*, %struct._dep** %new_dep, align 8, !dbg !10729
  call void @sd_add_dep(%struct._dep* %232, i8 zeroext 0), !dbg !10730
  %233 = load %struct._dep*, %struct._dep** %new_dep, align 8, !dbg !10731
  %234 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10732
  %235 = load %struct.rtx_def*, %struct.rtx_def** %twin, align 8, !dbg !10733
  call void @init_dep(%struct._dep* %233, %struct.rtx_def* %234, %struct.rtx_def* %235, i32 11), !dbg !10734
  %236 = load %struct._dep*, %struct._dep** %new_dep, align 8, !dbg !10735
  call void @sd_add_dep(%struct._dep* %236, i8 zeroext 0), !dbg !10736
  br label %if.end410, !dbg !10737

if.else382:                                       ; preds = %if.then379
  %237 = load %struct.spec_info_def*, %struct.spec_info_def** @spec_info, align 8, !dbg !10738
  %dump383 = getelementptr inbounds %struct.spec_info_def, %struct.spec_info_def* %237, i32 0, i32 1, !dbg !10741
  %238 = load %struct._IO_FILE*, %struct._IO_FILE** %dump383, align 8, !dbg !10741
  %tobool384 = icmp ne %struct._IO_FILE* %238, null, !dbg !10738
  br i1 %tobool384, label %if.then385, label %if.end390, !dbg !10742

if.then385:                                       ; preds = %if.else382
  %239 = load %struct.spec_info_def*, %struct.spec_info_def** @spec_info, align 8, !dbg !10743
  %dump386 = getelementptr inbounds %struct.spec_info_def, %struct.spec_info_def* %239, i32 0, i32 1, !dbg !10744
  %240 = load %struct._IO_FILE*, %struct._IO_FILE** %dump386, align 8, !dbg !10744
  %241 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !10745
  %print_insn387 = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %241, i32 0, i32 5, !dbg !10746
  %242 = load i8* (%struct.rtx_def*, i32)*, i8* (%struct.rtx_def*, i32)** %print_insn387, align 8, !dbg !10746
  %243 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10747
  %call388 = call i8* %242(%struct.rtx_def* %243, i32 0), !dbg !10748
  %call389 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %240, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.52, i64 0, i64 0), i8* %call388), !dbg !10749
  br label %if.end390, !dbg !10749

if.end390:                                        ; preds = %if.then385, %if.else382
  %244 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10750
  call void @sd_iterator_start(%struct._sd_iterator* sret %tmp391, %struct.rtx_def* %244, i32 15), !dbg !10752
  %245 = bitcast %struct._sd_iterator* %sd_it to i8*, !dbg !10752
  %246 = bitcast %struct._sd_iterator* %tmp391 to i8*, !dbg !10752
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %245, i8* align 8 %246, i64 32, i1 false), !dbg !10752
  br label %while.cond, !dbg !10753

while.cond:                                       ; preds = %while.body, %if.end390
  %call392 = call zeroext i8 @sd_iterator_cond(%struct._sd_iterator* %sd_it, %struct._dep** %dep), !dbg !10754
  %tobool393 = icmp ne i8 %call392, 0, !dbg !10753
  br i1 %tobool393, label %while.body, label %while.end, !dbg !10753

while.body:                                       ; preds = %while.cond
  call void @sd_delete_dep(%struct._sd_iterator* byval(%struct._sd_iterator) align 8 %sd_it), !dbg !10755
  br label %while.cond, !dbg !10753, !llvm.loop !10756

while.end:                                        ; preds = %while.cond
  %247 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10758
  %tobool394 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %247, null, !dbg !10758
  br i1 %tobool394, label %cond.true395, label %cond.false397, !dbg !10758

cond.true395:                                     ; preds = %while.end
  %248 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10758
  %base396 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %248, i32 0, i32 0, !dbg !10758
  br label %cond.end398, !dbg !10758

cond.false397:                                    ; preds = %while.end
  br label %cond.end398, !dbg !10758

cond.end398:                                      ; preds = %cond.false397, %cond.true395
  %cond399 = phi %struct.VEC_haifa_insn_data_def_base* [ %base396, %cond.true395 ], [ null, %cond.false397 ], !dbg !10758
  %249 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10758
  %u400 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %249, i32 0, i32 1, !dbg !10758
  %fld401 = bitcast %union.u* %u400 to [1 x %union.rtunion_def]*, !dbg !10758
  %arrayidx402 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld401, i64 0, i64 0, !dbg !10758
  %rt_int403 = bitcast %union.rtunion_def* %arrayidx402 to i32*, !dbg !10758
  %250 = load i32, i32* %rt_int403, align 8, !dbg !10758
  %call404 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond399, i32 %250), !dbg !10758
  %queue_index = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call404, i32 0, i32 4, !dbg !10758
  %251 = load i32, i32* %queue_index, align 8, !dbg !10758
  %cmp405 = icmp ne i32 %251, -2, !dbg !10760
  br i1 %cmp405, label %if.then407, label %if.end409, !dbg !10761

if.then407:                                       ; preds = %cond.end398
  %252 = load %struct.rtx_def*, %struct.rtx_def** %check, align 8, !dbg !10762
  %call408 = call i32 @try_ready(%struct.rtx_def* %252), !dbg !10763
  br label %if.end409, !dbg !10763

if.end409:                                        ; preds = %if.then407, %cond.end398
  %253 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10764
  call void @sched_remove_insn(%struct.rtx_def* %253), !dbg !10765
  br label %if.end410

if.end410:                                        ; preds = %if.end409, %if.then381
  %254 = load %struct._dep*, %struct._dep** %new_dep, align 8, !dbg !10766
  %255 = load %struct.rtx_def*, %struct.rtx_def** %check, align 8, !dbg !10767
  %256 = load %struct.rtx_def*, %struct.rtx_def** %twin, align 8, !dbg !10768
  call void @init_dep(%struct._dep* %254, %struct.rtx_def* %255, %struct.rtx_def* %256, i32 12), !dbg !10769
  %257 = load %struct._dep*, %struct._dep** %new_dep, align 8, !dbg !10770
  call void @sd_add_dep(%struct._dep* %257, i8 zeroext 0), !dbg !10771
  br label %if.end412, !dbg !10772

if.else411:                                       ; preds = %if.end373
  %258 = load %struct._dep*, %struct._dep** %new_dep, align 8, !dbg !10773
  %259 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10775
  %260 = load %struct.rtx_def*, %struct.rtx_def** %check, align 8, !dbg !10776
  call void @init_dep_1(%struct._dep* %258, %struct.rtx_def* %259, %struct.rtx_def* %260, i32 0, i32 50331648), !dbg !10777
  %261 = load %struct._dep*, %struct._dep** %new_dep, align 8, !dbg !10778
  call void @sd_add_dep(%struct._dep* %261, i8 zeroext 0), !dbg !10779
  br label %if.end412

if.end412:                                        ; preds = %if.else411, %if.end410
  %262 = load i8, i8* %mutate_p.addr, align 1, !dbg !10780
  %tobool413 = icmp ne i8 %262, 0, !dbg !10780
  br i1 %tobool413, label %if.end415, label %if.then414, !dbg !10782

if.then414:                                       ; preds = %if.end412
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_heap** %priorities_roots, metadata !10783, metadata !DIExpression()), !dbg !10785
  store %struct.VEC_rtx_heap* null, %struct.VEC_rtx_heap** %priorities_roots, align 8, !dbg !10785
  %263 = load %struct.rtx_def*, %struct.rtx_def** %twin, align 8, !dbg !10786
  call void @clear_priorities(%struct.rtx_def* %263, %struct.VEC_rtx_heap** %priorities_roots), !dbg !10787
  %264 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %priorities_roots, align 8, !dbg !10788
  call void @calc_priorities(%struct.VEC_rtx_heap* %264), !dbg !10789
  call void @VEC_rtx_heap_free(%struct.VEC_rtx_heap** %priorities_roots), !dbg !10790
  br label %if.end415, !dbg !10791

if.end415:                                        ; preds = %if.then414, %if.end412
  ret void, !dbg !10792
}

declare dso_local %struct.rtx_def* @emit_jump_insn_before(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @emit_insn_before(%struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct._haifa_deps_insn_data* @VEC_haifa_deps_insn_data_def_base_index(%struct.VEC_haifa_deps_insn_data_def_base* %vec_, i32 %ix_) #0 !dbg !10793 {
entry:
  %vec_.addr = alloca %struct.VEC_haifa_deps_insn_data_def_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_haifa_deps_insn_data_def_base* %vec_, %struct.VEC_haifa_deps_insn_data_def_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_haifa_deps_insn_data_def_base** %vec_.addr, metadata !10816, metadata !DIExpression()), !dbg !10817
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !10818, metadata !DIExpression()), !dbg !10817
  %0 = load %struct.VEC_haifa_deps_insn_data_def_base*, %struct.VEC_haifa_deps_insn_data_def_base** %vec_.addr, align 8, !dbg !10817
  %tobool = icmp ne %struct.VEC_haifa_deps_insn_data_def_base* %0, null, !dbg !10817
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !10817

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !10817
  %2 = load %struct.VEC_haifa_deps_insn_data_def_base*, %struct.VEC_haifa_deps_insn_data_def_base** %vec_.addr, align 8, !dbg !10817
  %num = getelementptr inbounds %struct.VEC_haifa_deps_insn_data_def_base, %struct.VEC_haifa_deps_insn_data_def_base* %2, i32 0, i32 0, !dbg !10817
  %3 = load i32, i32* %num, align 8, !dbg !10817
  %cmp = icmp ult i32 %1, %3, !dbg !10817
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !10819
  %land.ext = zext i1 %4 to i32, !dbg !10817
  %5 = load %struct.VEC_haifa_deps_insn_data_def_base*, %struct.VEC_haifa_deps_insn_data_def_base** %vec_.addr, align 8, !dbg !10817
  %vec = getelementptr inbounds %struct.VEC_haifa_deps_insn_data_def_base, %struct.VEC_haifa_deps_insn_data_def_base* %5, i32 0, i32 2, !dbg !10817
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !10817
  %idxprom = zext i32 %6 to i64, !dbg !10817
  %arrayidx = getelementptr inbounds [1 x %struct._haifa_deps_insn_data], [1 x %struct._haifa_deps_insn_data]* %vec, i64 0, i64 %idxprom, !dbg !10817
  ret %struct._haifa_deps_insn_data* %arrayidx, !dbg !10817
}

declare dso_local void @sd_copy_back_deps(%struct.rtx_def*, %struct.rtx_def*, i8 zeroext) #2

declare dso_local void @init_dep_1(%struct._dep*, %struct.rtx_def*, %struct.rtx_def*, i32, i32) #2

declare dso_local i32 @set_dep_weak(i32, i32, i32) #2

declare dso_local i32 @get_dep_weak(i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @process_insn_forw_deps_be_in_spec(%struct.rtx_def* %insn, %struct.rtx_def* %twin, i32 %fs) #0 !dbg !10820 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %twin.addr = alloca %struct.rtx_def*, align 8
  %fs.addr = alloca i32, align 4
  %sd_it = alloca %struct._sd_iterator, align 8
  %dep = alloca %struct._dep*, align 8
  %tmp = alloca %struct._sd_iterator, align 8
  %ds = alloca i32, align 4
  %consumer = alloca %struct.rtx_def*, align 8
  %new_ds = alloca i32, align 4
  %_new_dep = alloca %struct._dep, align 8
  %new_dep = alloca %struct._dep*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !10823, metadata !DIExpression()), !dbg !10824
  store %struct.rtx_def* %twin, %struct.rtx_def** %twin.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %twin.addr, metadata !10825, metadata !DIExpression()), !dbg !10826
  store i32 %fs, i32* %fs.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fs.addr, metadata !10827, metadata !DIExpression()), !dbg !10828
  call void @llvm.dbg.declare(metadata %struct._sd_iterator* %sd_it, metadata !10829, metadata !DIExpression()), !dbg !10830
  call void @llvm.dbg.declare(metadata %struct._dep** %dep, metadata !10831, metadata !DIExpression()), !dbg !10832
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10833
  call void @sd_iterator_start(%struct._sd_iterator* sret %tmp, %struct.rtx_def* %0, i32 4), !dbg !10833
  %1 = bitcast %struct._sd_iterator* %sd_it to i8*, !dbg !10833
  %2 = bitcast %struct._sd_iterator* %tmp to i8*, !dbg !10833
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 32, i1 false), !dbg !10833
  br label %for.cond, !dbg !10833

for.cond:                                         ; preds = %for.inc, %entry
  %call = call zeroext i8 @sd_iterator_cond(%struct._sd_iterator* %sd_it, %struct._dep** %dep), !dbg !10835
  %tobool = icmp ne i8 %call, 0, !dbg !10833
  br i1 %tobool, label %for.body, label %for.end, !dbg !10833

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %ds, metadata !10837, metadata !DIExpression()), !dbg !10839
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %consumer, metadata !10840, metadata !DIExpression()), !dbg !10841
  %3 = load %struct._dep*, %struct._dep** %dep, align 8, !dbg !10842
  %con = getelementptr inbounds %struct._dep, %struct._dep* %3, i32 0, i32 1, !dbg !10842
  %4 = load %struct.rtx_def*, %struct.rtx_def** %con, align 8, !dbg !10842
  store %struct.rtx_def* %4, %struct.rtx_def** %consumer, align 8, !dbg !10843
  %5 = load %struct._dep*, %struct._dep** %dep, align 8, !dbg !10844
  %status = getelementptr inbounds %struct._dep, %struct._dep* %5, i32 0, i32 3, !dbg !10844
  %6 = load i32, i32* %status, align 4, !dbg !10844
  store i32 %6, i32* %ds, align 4, !dbg !10845
  %7 = load i32, i32* %fs.addr, align 4, !dbg !10846
  %tobool1 = icmp ne i32 %7, 0, !dbg !10846
  br i1 %tobool1, label %land.lhs.true, label %if.end18, !dbg !10848

land.lhs.true:                                    ; preds = %for.body
  %8 = load i32, i32* %ds, align 4, !dbg !10849
  %and = and i32 %8, 117440512, !dbg !10850
  %cmp = icmp eq i32 %and, 16777216, !dbg !10851
  br i1 %cmp, label %if.then, label %if.end18, !dbg !10852

if.then:                                          ; preds = %land.lhs.true
  %9 = load i32, i32* %ds, align 4, !dbg !10853
  %and2 = and i32 %9, 16519104, !dbg !10853
  %tobool3 = icmp ne i32 %and2, 0, !dbg !10853
  br i1 %tobool3, label %cond.true, label %cond.false, !dbg !10853

cond.true:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 4026, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !10853
  br label %cond.end, !dbg !10853

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !10853

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10853
  %10 = load i32, i32* %ds, align 4, !dbg !10855
  %and4 = and i32 %10, 258111, !dbg !10857
  %tobool5 = icmp ne i32 %and4, 0, !dbg !10857
  br i1 %tobool5, label %if.then6, label %if.else, !dbg !10858

if.then6:                                         ; preds = %cond.end
  %11 = load i32, i32* %ds, align 4, !dbg !10859
  %call7 = call i32 @ds_weak(i32 %11), !dbg !10862
  %12 = load i32, i32* %fs.addr, align 4, !dbg !10863
  %call8 = call i32 @ds_weak(i32 %12), !dbg !10864
  %cmp9 = icmp sle i32 %call7, %call8, !dbg !10865
  br i1 %cmp9, label %if.then10, label %if.end15, !dbg !10866

if.then10:                                        ; preds = %if.then6
  call void @llvm.dbg.declare(metadata i32* %new_ds, metadata !10867, metadata !DIExpression()), !dbg !10869
  %13 = load i32, i32* %ds, align 4, !dbg !10870
  %and11 = and i32 %13, -258112, !dbg !10871
  %14 = load i32, i32* %fs.addr, align 4, !dbg !10872
  %or = or i32 %and11, %14, !dbg !10873
  store i32 %or, i32* %new_ds, align 4, !dbg !10874
  %15 = load %struct.rtx_def*, %struct.rtx_def** %consumer, align 8, !dbg !10875
  %16 = load i32, i32* %new_ds, align 4, !dbg !10877
  %call12 = call zeroext i8 @sched_insn_is_legitimate_for_speculation_p(%struct.rtx_def* %15, i32 %16), !dbg !10878
  %tobool13 = icmp ne i8 %call12, 0, !dbg !10878
  br i1 %tobool13, label %if.then14, label %if.end, !dbg !10879

if.then14:                                        ; preds = %if.then10
  %17 = load i32, i32* %new_ds, align 4, !dbg !10880
  store i32 %17, i32* %ds, align 4, !dbg !10881
  br label %if.end, !dbg !10882

if.end:                                           ; preds = %if.then14, %if.then10
  br label %if.end15, !dbg !10883

if.end15:                                         ; preds = %if.end, %if.then6
  br label %if.end17, !dbg !10884

if.else:                                          ; preds = %cond.end
  %18 = load i32, i32* %fs.addr, align 4, !dbg !10885
  %19 = load i32, i32* %ds, align 4, !dbg !10886
  %or16 = or i32 %19, %18, !dbg !10886
  store i32 %or16, i32* %ds, align 4, !dbg !10886
  br label %if.end17

if.end17:                                         ; preds = %if.else, %if.end15
  br label %if.end18, !dbg !10887

if.end18:                                         ; preds = %if.end17, %land.lhs.true, %for.body
  call void @llvm.dbg.declare(metadata %struct._dep* %_new_dep, metadata !10888, metadata !DIExpression()), !dbg !10890
  call void @llvm.dbg.declare(metadata %struct._dep** %new_dep, metadata !10891, metadata !DIExpression()), !dbg !10892
  store %struct._dep* %_new_dep, %struct._dep** %new_dep, align 8, !dbg !10892
  %20 = load %struct._dep*, %struct._dep** %new_dep, align 8, !dbg !10893
  %21 = load %struct.rtx_def*, %struct.rtx_def** %twin.addr, align 8, !dbg !10894
  %22 = load %struct.rtx_def*, %struct.rtx_def** %consumer, align 8, !dbg !10895
  %23 = load %struct._dep*, %struct._dep** %dep, align 8, !dbg !10896
  %type = getelementptr inbounds %struct._dep, %struct._dep* %23, i32 0, i32 2, !dbg !10896
  %24 = load i32, i32* %type, align 8, !dbg !10896
  %25 = load i32, i32* %ds, align 4, !dbg !10897
  call void @init_dep_1(%struct._dep* %20, %struct.rtx_def* %21, %struct.rtx_def* %22, i32 %24, i32 %25), !dbg !10898
  %26 = load %struct._dep*, %struct._dep** %new_dep, align 8, !dbg !10899
  call void @sd_add_dep(%struct._dep* %26, i8 zeroext 0), !dbg !10900
  br label %for.inc, !dbg !10901

for.inc:                                          ; preds = %if.end18
  call void @sd_iterator_next(%struct._sd_iterator* %sd_it), !dbg !10835
  br label %for.cond, !dbg !10835, !llvm.loop !10902

for.end:                                          ; preds = %for.cond
  ret void, !dbg !10904
}

; Function Attrs: noinline nounwind uwtable
define internal void @sched_remove_insn(%struct.rtx_def* %insn) #0 !dbg !10905 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !10906, metadata !DIExpression()), !dbg !10907
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10908
  call void @sd_finish_insn(%struct.rtx_def* %0), !dbg !10909
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10910
  call void @change_queue_index(%struct.rtx_def* %1, i32 -2), !dbg !10911
  %2 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !10912
  %add_remove_insn = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %2, i32 0, i32 14, !dbg !10913
  %3 = load void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)** %add_remove_insn, align 8, !dbg !10913
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10914
  call void %3(%struct.rtx_def* %4, i32 1), !dbg !10912
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10915
  call void @remove_insn(%struct.rtx_def* %5), !dbg !10916
  ret void, !dbg !10917
}

; Function Attrs: noinline nounwind uwtable
define internal void @clear_priorities(%struct.rtx_def* %insn, %struct.VEC_rtx_heap** %roots_ptr) #0 !dbg !10918 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %roots_ptr.addr = alloca %struct.VEC_rtx_heap**, align 8
  %sd_it = alloca %struct._sd_iterator, align 8
  %dep = alloca %struct._dep*, align 8
  %insn_is_root_p = alloca i8, align 1
  %tmp = alloca %struct._sd_iterator, align 8
  %pro = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !10922, metadata !DIExpression()), !dbg !10923
  store %struct.VEC_rtx_heap** %roots_ptr, %struct.VEC_rtx_heap*** %roots_ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_heap*** %roots_ptr.addr, metadata !10924, metadata !DIExpression()), !dbg !10925
  call void @llvm.dbg.declare(metadata %struct._sd_iterator* %sd_it, metadata !10926, metadata !DIExpression()), !dbg !10927
  call void @llvm.dbg.declare(metadata %struct._dep** %dep, metadata !10928, metadata !DIExpression()), !dbg !10929
  call void @llvm.dbg.declare(metadata i8* %insn_is_root_p, metadata !10930, metadata !DIExpression()), !dbg !10931
  store i8 1, i8* %insn_is_root_p, align 1, !dbg !10931
  %0 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10932
  %tobool = icmp ne %struct.VEC_haifa_insn_data_def_heap* %0, null, !dbg !10932
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10932

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10932
  %base = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %1, i32 0, i32 0, !dbg !10932
  br label %cond.end, !dbg !10932

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10932

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_haifa_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !10932
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10932
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !10932
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !10932
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !10932
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !10932
  %3 = load i32, i32* %rt_int, align 8, !dbg !10932
  %call = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond, i32 %3), !dbg !10932
  %queue_index = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call, i32 0, i32 4, !dbg !10932
  %4 = load i32, i32* %queue_index, align 8, !dbg !10932
  %cmp = icmp ne i32 %4, -3, !dbg !10932
  br i1 %cmp, label %cond.false2, label %cond.true1, !dbg !10932

cond.true1:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 5061, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !10932
  br label %cond.end3, !dbg !10932

cond.false2:                                      ; preds = %cond.end
  br label %cond.end3, !dbg !10932

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond4 = phi i32 [ 0, %cond.true1 ], [ 0, %cond.false2 ], !dbg !10932
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10933
  call void @sd_iterator_start(%struct._sd_iterator* sret %tmp, %struct.rtx_def* %5, i32 3), !dbg !10933
  %6 = bitcast %struct._sd_iterator* %sd_it to i8*, !dbg !10933
  %7 = bitcast %struct._sd_iterator* %tmp to i8*, !dbg !10933
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 32, i1 false), !dbg !10933
  br label %for.cond, !dbg !10933

for.cond:                                         ; preds = %for.inc, %cond.end3
  %call5 = call zeroext i8 @sd_iterator_cond(%struct._sd_iterator* %sd_it, %struct._dep** %dep), !dbg !10935
  %tobool6 = icmp ne i8 %call5, 0, !dbg !10933
  br i1 %tobool6, label %for.body, label %for.end, !dbg !10933

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pro, metadata !10937, metadata !DIExpression()), !dbg !10939
  %8 = load %struct._dep*, %struct._dep** %dep, align 8, !dbg !10940
  %pro7 = getelementptr inbounds %struct._dep, %struct._dep* %8, i32 0, i32 0, !dbg !10940
  %9 = load %struct.rtx_def*, %struct.rtx_def** %pro7, align 8, !dbg !10940
  store %struct.rtx_def* %9, %struct.rtx_def** %pro, align 8, !dbg !10939
  %10 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10941
  %tobool8 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %10, null, !dbg !10941
  br i1 %tobool8, label %cond.true9, label %cond.false11, !dbg !10941

cond.true9:                                       ; preds = %for.body
  %11 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10941
  %base10 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %11, i32 0, i32 0, !dbg !10941
  br label %cond.end12, !dbg !10941

cond.false11:                                     ; preds = %for.body
  br label %cond.end12, !dbg !10941

cond.end12:                                       ; preds = %cond.false11, %cond.true9
  %cond13 = phi %struct.VEC_haifa_insn_data_def_base* [ %base10, %cond.true9 ], [ null, %cond.false11 ], !dbg !10941
  %12 = load %struct.rtx_def*, %struct.rtx_def** %pro, align 8, !dbg !10941
  %u14 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !10941
  %fld15 = bitcast %union.u* %u14 to [1 x %union.rtunion_def]*, !dbg !10941
  %arrayidx16 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld15, i64 0, i64 0, !dbg !10941
  %rt_int17 = bitcast %union.rtunion_def* %arrayidx16 to i32*, !dbg !10941
  %13 = load i32, i32* %rt_int17, align 8, !dbg !10941
  %call18 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond13, i32 %13), !dbg !10941
  %priority_status = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call18, i32 0, i32 7, !dbg !10941
  %14 = load i8, i8* %priority_status, align 1, !dbg !10941
  %conv = sext i8 %14 to i32, !dbg !10941
  %cmp19 = icmp sge i32 %conv, 0, !dbg !10943
  br i1 %cmp19, label %land.lhs.true, label %if.end50, !dbg !10944

land.lhs.true:                                    ; preds = %cond.end12
  %15 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10945
  %tobool21 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %15, null, !dbg !10945
  br i1 %tobool21, label %cond.true22, label %cond.false24, !dbg !10945

cond.true22:                                      ; preds = %land.lhs.true
  %16 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10945
  %base23 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %16, i32 0, i32 0, !dbg !10945
  br label %cond.end25, !dbg !10945

cond.false24:                                     ; preds = %land.lhs.true
  br label %cond.end25, !dbg !10945

cond.end25:                                       ; preds = %cond.false24, %cond.true22
  %cond26 = phi %struct.VEC_haifa_insn_data_def_base* [ %base23, %cond.true22 ], [ null, %cond.false24 ], !dbg !10945
  %17 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10945
  %u27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !10945
  %fld28 = bitcast %union.u* %u27 to [1 x %union.rtunion_def]*, !dbg !10945
  %arrayidx29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld28, i64 0, i64 0, !dbg !10945
  %rt_int30 = bitcast %union.rtunion_def* %arrayidx29 to i32*, !dbg !10945
  %18 = load i32, i32* %rt_int30, align 8, !dbg !10945
  %call31 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond26, i32 %18), !dbg !10945
  %queue_index32 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call31, i32 0, i32 4, !dbg !10945
  %19 = load i32, i32* %queue_index32, align 8, !dbg !10945
  %cmp33 = icmp ne i32 %19, -3, !dbg !10946
  br i1 %cmp33, label %if.then, label %if.end50, !dbg !10947

if.then:                                          ; preds = %cond.end25
  %20 = load %struct._dep*, %struct._dep** %dep, align 8, !dbg !10948
  %call35 = call zeroext i8 @contributes_to_priority_p(%struct._dep* %20), !dbg !10951
  %tobool36 = icmp ne i8 %call35, 0, !dbg !10951
  br i1 %tobool36, label %if.then37, label %if.end, !dbg !10952

if.then37:                                        ; preds = %if.then
  store i8 0, i8* %insn_is_root_p, align 1, !dbg !10953
  br label %if.end, !dbg !10954

if.end:                                           ; preds = %if.then37, %if.then
  %21 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10955
  %tobool38 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %21, null, !dbg !10955
  br i1 %tobool38, label %cond.true39, label %cond.false41, !dbg !10955

cond.true39:                                      ; preds = %if.end
  %22 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !10955
  %base40 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %22, i32 0, i32 0, !dbg !10955
  br label %cond.end42, !dbg !10955

cond.false41:                                     ; preds = %if.end
  br label %cond.end42, !dbg !10955

cond.end42:                                       ; preds = %cond.false41, %cond.true39
  %cond43 = phi %struct.VEC_haifa_insn_data_def_base* [ %base40, %cond.true39 ], [ null, %cond.false41 ], !dbg !10955
  %23 = load %struct.rtx_def*, %struct.rtx_def** %pro, align 8, !dbg !10955
  %u44 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1, !dbg !10955
  %fld45 = bitcast %union.u* %u44 to [1 x %union.rtunion_def]*, !dbg !10955
  %arrayidx46 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld45, i64 0, i64 0, !dbg !10955
  %rt_int47 = bitcast %union.rtunion_def* %arrayidx46 to i32*, !dbg !10955
  %24 = load i32, i32* %rt_int47, align 8, !dbg !10955
  %call48 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond43, i32 %24), !dbg !10955
  %priority_status49 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call48, i32 0, i32 7, !dbg !10955
  store i8 -1, i8* %priority_status49, align 1, !dbg !10956
  %25 = load %struct.rtx_def*, %struct.rtx_def** %pro, align 8, !dbg !10957
  %26 = load %struct.VEC_rtx_heap**, %struct.VEC_rtx_heap*** %roots_ptr.addr, align 8, !dbg !10958
  call void @clear_priorities(%struct.rtx_def* %25, %struct.VEC_rtx_heap** %26), !dbg !10959
  br label %if.end50, !dbg !10960

if.end50:                                         ; preds = %cond.end42, %cond.end25, %cond.end12
  br label %for.inc, !dbg !10961

for.inc:                                          ; preds = %if.end50
  call void @sd_iterator_next(%struct._sd_iterator* %sd_it), !dbg !10935
  br label %for.cond, !dbg !10935, !llvm.loop !10962

for.end:                                          ; preds = %for.cond
  %27 = load i8, i8* %insn_is_root_p, align 1, !dbg !10964
  %tobool51 = icmp ne i8 %27, 0, !dbg !10964
  br i1 %tobool51, label %if.then52, label %if.end54, !dbg !10966

if.then52:                                        ; preds = %for.end
  %28 = load %struct.VEC_rtx_heap**, %struct.VEC_rtx_heap*** %roots_ptr.addr, align 8, !dbg !10967
  %29 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10967
  %call53 = call %struct.rtx_def** @VEC_rtx_heap_safe_push(%struct.VEC_rtx_heap** %28, %struct.rtx_def* %29), !dbg !10967
  br label %if.end54, !dbg !10967

if.end54:                                         ; preds = %if.then52, %for.end
  ret void, !dbg !10968
}

; Function Attrs: noinline nounwind uwtable
define internal void @calc_priorities(%struct.VEC_rtx_heap* %roots) #0 !dbg !10969 {
entry:
  %roots.addr = alloca %struct.VEC_rtx_heap*, align 8
  %i = alloca i32, align 4
  %insn = alloca %struct.rtx_def*, align 8
  store %struct.VEC_rtx_heap* %roots, %struct.VEC_rtx_heap** %roots.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_heap** %roots.addr, metadata !10972, metadata !DIExpression()), !dbg !10973
  call void @llvm.dbg.declare(metadata i32* %i, metadata !10974, metadata !DIExpression()), !dbg !10975
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !10976, metadata !DIExpression()), !dbg !10977
  store i32 0, i32* %i, align 4, !dbg !10978
  br label %for.cond, !dbg !10980

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %roots.addr, align 8, !dbg !10981
  %tobool = icmp ne %struct.VEC_rtx_heap* %0, null, !dbg !10981
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10981

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %roots.addr, align 8, !dbg !10981
  %base = getelementptr inbounds %struct.VEC_rtx_heap, %struct.VEC_rtx_heap* %1, i32 0, i32 0, !dbg !10981
  br label %cond.end, !dbg !10981

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !10981

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_rtx_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !10981
  %2 = load i32, i32* %i, align 4, !dbg !10981
  %call = call i32 @VEC_rtx_base_iterate(%struct.VEC_rtx_base* %cond, i32 %2, %struct.rtx_def** %insn), !dbg !10981
  %tobool1 = icmp ne i32 %call, 0, !dbg !10983
  br i1 %tobool1, label %for.body, label %for.end, !dbg !10983

for.body:                                         ; preds = %cond.end
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10984
  %call2 = call i32 @priority(%struct.rtx_def* %3), !dbg !10985
  br label %for.inc, !dbg !10985

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4, !dbg !10986
  %inc = add nsw i32 %4, 1, !dbg !10986
  store i32 %inc, i32* %i, align 4, !dbg !10986
  br label %for.cond, !dbg !10987, !llvm.loop !10988

for.end:                                          ; preds = %cond.end
  ret void, !dbg !10990
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_rtx_heap_free(%struct.VEC_rtx_heap** %vec_) #0 !dbg !10991 {
entry:
  %vec_.addr = alloca %struct.VEC_rtx_heap**, align 8
  store %struct.VEC_rtx_heap** %vec_, %struct.VEC_rtx_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_heap*** %vec_.addr, metadata !10995, metadata !DIExpression()), !dbg !10996
  %0 = load %struct.VEC_rtx_heap**, %struct.VEC_rtx_heap*** %vec_.addr, align 8, !dbg !10997
  %1 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %0, align 8, !dbg !10997
  %tobool = icmp ne %struct.VEC_rtx_heap* %1, null, !dbg !10997
  br i1 %tobool, label %if.then, label %if.end, !dbg !10996

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_rtx_heap**, %struct.VEC_rtx_heap*** %vec_.addr, align 8, !dbg !10997
  %3 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %2, align 8, !dbg !10997
  %4 = bitcast %struct.VEC_rtx_heap* %3 to i8*, !dbg !10997
  call void @free(i8* %4), !dbg !10997
  br label %if.end, !dbg !10997

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_rtx_heap**, %struct.VEC_rtx_heap*** %vec_.addr, align 8, !dbg !10996
  store %struct.VEC_rtx_heap* null, %struct.VEC_rtx_heap** %5, align 8, !dbg !10996
  ret void, !dbg !10996
}

declare dso_local void @sd_finish_insn(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def** @VEC_rtx_heap_safe_push(%struct.VEC_rtx_heap** %vec_, %struct.rtx_def* %obj_) #0 !dbg !10999 {
entry:
  %vec_.addr = alloca %struct.VEC_rtx_heap**, align 8
  %obj_.addr = alloca %struct.rtx_def*, align 8
  store %struct.VEC_rtx_heap** %vec_, %struct.VEC_rtx_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_heap*** %vec_.addr, metadata !11002, metadata !DIExpression()), !dbg !11003
  store %struct.rtx_def* %obj_, %struct.rtx_def** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %obj_.addr, metadata !11004, metadata !DIExpression()), !dbg !11003
  %0 = load %struct.VEC_rtx_heap**, %struct.VEC_rtx_heap*** %vec_.addr, align 8, !dbg !11003
  %call = call i32 @VEC_rtx_heap_reserve(%struct.VEC_rtx_heap** %0, i32 1), !dbg !11003
  %1 = load %struct.VEC_rtx_heap**, %struct.VEC_rtx_heap*** %vec_.addr, align 8, !dbg !11003
  %2 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %1, align 8, !dbg !11003
  %tobool = icmp ne %struct.VEC_rtx_heap* %2, null, !dbg !11003
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11003

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_rtx_heap**, %struct.VEC_rtx_heap*** %vec_.addr, align 8, !dbg !11003
  %4 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %3, align 8, !dbg !11003
  %base = getelementptr inbounds %struct.VEC_rtx_heap, %struct.VEC_rtx_heap* %4, i32 0, i32 0, !dbg !11003
  br label %cond.end, !dbg !11003

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11003

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_rtx_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11003
  %5 = load %struct.rtx_def*, %struct.rtx_def** %obj_.addr, align 8, !dbg !11003
  %call1 = call %struct.rtx_def** @VEC_rtx_base_quick_push(%struct.VEC_rtx_base* %cond, %struct.rtx_def* %5), !dbg !11003
  ret %struct.rtx_def** %call1, !dbg !11003
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_rtx_heap_reserve(%struct.VEC_rtx_heap** %vec_, i32 %alloc_) #0 !dbg !11005 {
entry:
  %vec_.addr = alloca %struct.VEC_rtx_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_rtx_heap** %vec_, %struct.VEC_rtx_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_heap*** %vec_.addr, metadata !11008, metadata !DIExpression()), !dbg !11009
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !11010, metadata !DIExpression()), !dbg !11009
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !11011, metadata !DIExpression()), !dbg !11009
  %0 = load %struct.VEC_rtx_heap**, %struct.VEC_rtx_heap*** %vec_.addr, align 8, !dbg !11009
  %1 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %0, align 8, !dbg !11009
  %tobool = icmp ne %struct.VEC_rtx_heap* %1, null, !dbg !11009
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11009

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_rtx_heap**, %struct.VEC_rtx_heap*** %vec_.addr, align 8, !dbg !11009
  %3 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %2, align 8, !dbg !11009
  %base = getelementptr inbounds %struct.VEC_rtx_heap, %struct.VEC_rtx_heap* %3, i32 0, i32 0, !dbg !11009
  br label %cond.end, !dbg !11009

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11009

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_rtx_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11009
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !11009
  %call = call i32 @VEC_rtx_base_space(%struct.VEC_rtx_base* %cond, i32 %4), !dbg !11009
  %tobool1 = icmp ne i32 %call, 0, !dbg !11009
  %lnot = xor i1 %tobool1, true, !dbg !11009
  %lnot.ext = zext i1 %lnot to i32, !dbg !11009
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !11009
  %5 = load i32, i32* %extend, align 4, !dbg !11012
  %tobool2 = icmp ne i32 %5, 0, !dbg !11012
  br i1 %tobool2, label %if.then, label %if.end, !dbg !11009

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_rtx_heap**, %struct.VEC_rtx_heap*** %vec_.addr, align 8, !dbg !11012
  %7 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %6, align 8, !dbg !11012
  %8 = bitcast %struct.VEC_rtx_heap* %7 to i8*, !dbg !11012
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !11012
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !11012
  %10 = bitcast i8* %call3 to %struct.VEC_rtx_heap*, !dbg !11012
  %11 = load %struct.VEC_rtx_heap**, %struct.VEC_rtx_heap*** %vec_.addr, align 8, !dbg !11012
  store %struct.VEC_rtx_heap* %10, %struct.VEC_rtx_heap** %11, align 8, !dbg !11012
  br label %if.end, !dbg !11012

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !11009
  ret i32 %12, !dbg !11009
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def** @VEC_rtx_base_quick_push(%struct.VEC_rtx_base* %vec_, %struct.rtx_def* %obj_) #0 !dbg !11014 {
entry:
  %vec_.addr = alloca %struct.VEC_rtx_base*, align 8
  %obj_.addr = alloca %struct.rtx_def*, align 8
  %slot_ = alloca %struct.rtx_def**, align 8
  store %struct.VEC_rtx_base* %vec_, %struct.VEC_rtx_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_base** %vec_.addr, metadata !11018, metadata !DIExpression()), !dbg !11019
  store %struct.rtx_def* %obj_, %struct.rtx_def** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %obj_.addr, metadata !11020, metadata !DIExpression()), !dbg !11019
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %slot_, metadata !11021, metadata !DIExpression()), !dbg !11019
  %0 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !11019
  %num = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %0, i32 0, i32 0, !dbg !11019
  %1 = load i32, i32* %num, align 8, !dbg !11019
  %2 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !11019
  %alloc = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %2, i32 0, i32 1, !dbg !11019
  %3 = load i32, i32* %alloc, align 4, !dbg !11019
  %cmp = icmp ult i32 %1, %3, !dbg !11019
  %conv = zext i1 %cmp to i32, !dbg !11019
  %4 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !11019
  %vec = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %4, i32 0, i32 2, !dbg !11019
  %5 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !11019
  %num1 = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %5, i32 0, i32 0, !dbg !11019
  %6 = load i32, i32* %num1, align 8, !dbg !11019
  %inc = add i32 %6, 1, !dbg !11019
  store i32 %inc, i32* %num1, align 8, !dbg !11019
  %idxprom = zext i32 %6 to i64, !dbg !11019
  %arrayidx = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %vec, i64 0, i64 %idxprom, !dbg !11019
  store %struct.rtx_def** %arrayidx, %struct.rtx_def*** %slot_, align 8, !dbg !11019
  %7 = load %struct.rtx_def*, %struct.rtx_def** %obj_.addr, align 8, !dbg !11019
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %slot_, align 8, !dbg !11019
  store %struct.rtx_def* %7, %struct.rtx_def** %8, align 8, !dbg !11019
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %slot_, align 8, !dbg !11019
  ret %struct.rtx_def** %9, !dbg !11019
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_rtx_base_space(%struct.VEC_rtx_base* %vec_, i32 %alloc_) #0 !dbg !11022 {
entry:
  %vec_.addr = alloca %struct.VEC_rtx_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_rtx_base* %vec_, %struct.VEC_rtx_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_base** %vec_.addr, metadata !11025, metadata !DIExpression()), !dbg !11026
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !11027, metadata !DIExpression()), !dbg !11026
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !11026
  %cmp = icmp sge i32 %0, 0, !dbg !11026
  %conv = zext i1 %cmp to i32, !dbg !11026
  %1 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !11026
  %tobool = icmp ne %struct.VEC_rtx_base* %1, null, !dbg !11026
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11026

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !11026
  %alloc = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %2, i32 0, i32 1, !dbg !11026
  %3 = load i32, i32* %alloc, align 4, !dbg !11026
  %4 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !11026
  %num = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %4, i32 0, i32 0, !dbg !11026
  %5 = load i32, i32* %num, align 8, !dbg !11026
  %sub = sub i32 %3, %5, !dbg !11026
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !11026
  %cmp1 = icmp uge i32 %sub, %6, !dbg !11026
  %conv2 = zext i1 %cmp1 to i32, !dbg !11026
  br label %cond.end, !dbg !11026

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !11026
  %tobool3 = icmp ne i32 %7, 0, !dbg !11026
  %lnot = xor i1 %tobool3, true, !dbg !11026
  %lnot.ext = zext i1 %lnot to i32, !dbg !11026
  br label %cond.end, !dbg !11026

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !11026
  ret i32 %cond, !dbg !11026
}

declare dso_local i8* @vec_heap_p_reserve(i8*, i32) #2

declare dso_local %struct.rtx_def* @copy_insn(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_end_p(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !11028 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !11031, metadata !DIExpression()), !dbg !11032
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !11033
  %3 = load i32, i32* %index, align 8, !dbg !11033
  %4 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !11034
  %5 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 0, !dbg !11034
  %6 = load i32, i32* %5, align 8, !dbg !11034
  %7 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 1, !dbg !11034
  %8 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %7, align 8, !dbg !11034
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %6, %struct.VEC_edge_gc** %8), !dbg !11034
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !11034
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11034

cond.true:                                        ; preds = %entry
  %9 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !11034
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !11034
  %11 = load i32, i32* %10, align 8, !dbg !11034
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !11034
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !11034
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !11034
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !11034
  br label %cond.end, !dbg !11034

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11034

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11034
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !11034
  %cmp = icmp eq i32 %3, %call2, !dbg !11035
  %conv = zext i1 %cmp to i32, !dbg !11035
  %conv3 = trunc i32 %conv to i8, !dbg !11036
  ret i8 %conv3, !dbg !11037
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @ei_edge(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !11038 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !11041, metadata !DIExpression()), !dbg !11042
  %3 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !11043
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !11043
  %5 = load i32, i32* %4, align 8, !dbg !11043
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !11043
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !11043
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !11043
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !11043
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11043

cond.true:                                        ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !11043
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !11043
  %10 = load i32, i32* %9, align 8, !dbg !11043
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !11043
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !11043
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %10, %struct.VEC_edge_gc** %12), !dbg !11043
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !11043
  br label %cond.end, !dbg !11043

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11043

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11043
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !11043
  %13 = load i32, i32* %index, align 8, !dbg !11043
  %call2 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 %13), !dbg !11043
  ret %struct.edge_def* %call2, !dbg !11044
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_edge_gc* @ei_container(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !11045 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !11048, metadata !DIExpression()), !dbg !11049
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !11050
  %3 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container, align 8, !dbg !11050
  %tobool = icmp ne %struct.VEC_edge_gc** %3, null, !dbg !11050
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !11050

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.53, i64 0, i64 0), i32 687, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !11050
  br label %cond.end, !dbg !11050

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11050

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !11050
  %container1 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !11051
  %4 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container1, align 8, !dbg !11051
  %5 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %4, align 8, !dbg !11052
  ret %struct.VEC_edge_gc* %5, !dbg !11053
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %vec_, i32 %ix_) #0 !dbg !11054 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !11057, metadata !DIExpression()), !dbg !11058
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !11059, metadata !DIExpression()), !dbg !11058
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !11058
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !11058
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !11058

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !11058
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !11058
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !11058
  %3 = load i32, i32* %num, align 8, !dbg !11058
  %cmp = icmp ult i32 %1, %3, !dbg !11058
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !11060
  %land.ext = zext i1 %4 to i32, !dbg !11058
  %5 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !11058
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %5, i32 0, i32 2, !dbg !11058
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !11058
  %idxprom = zext i32 %6 to i64, !dbg !11058
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !11058
  %7 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !11058
  ret %struct.edge_def* %7, !dbg !11058
}

declare dso_local %struct.rtx_def* @emit_note_after(i32, %struct.rtx_def*) #2

declare dso_local void @add_bb_to_loop(%struct.basic_block_def*, %struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %vec_, i32 %ix_) #0 !dbg !11061 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !11066, metadata !DIExpression()), !dbg !11067
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !11068, metadata !DIExpression()), !dbg !11067
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !11067
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !11067
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !11067

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !11067
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !11067
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 0, !dbg !11067
  %3 = load i32, i32* %num, align 8, !dbg !11067
  %cmp = icmp ult i32 %1, %3, !dbg !11067
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !11069
  %land.ext = zext i1 %4 to i32, !dbg !11067
  %5 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !11067
  %vec = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %5, i32 0, i32 2, !dbg !11067
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !11067
  %idxprom = zext i32 %6 to i64, !dbg !11067
  %arrayidx = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec, i64 0, i64 %idxprom, !dbg !11067
  %7 = load %struct.loop*, %struct.loop** %arrayidx, align 8, !dbg !11067
  ret %struct.loop* %7, !dbg !11067
}

declare dso_local void @redirect_edge_succ(%struct.edge_def*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_int_heap_safe_grow_cleared(%struct.VEC_int_heap** %vec_, i32 %size_) #0 !dbg !11070 {
entry:
  %vec_.addr = alloca %struct.VEC_int_heap**, align 8
  %size_.addr = alloca i32, align 4
  %oldsize = alloca i32, align 4
  store %struct.VEC_int_heap** %vec_, %struct.VEC_int_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap*** %vec_.addr, metadata !11073, metadata !DIExpression()), !dbg !11074
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !11075, metadata !DIExpression()), !dbg !11074
  call void @llvm.dbg.declare(metadata i32* %oldsize, metadata !11076, metadata !DIExpression()), !dbg !11074
  %0 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !11074
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %0, align 8, !dbg !11074
  %tobool = icmp ne %struct.VEC_int_heap* %1, null, !dbg !11074
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11074

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !11074
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %2, align 8, !dbg !11074
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %3, i32 0, i32 0, !dbg !11074
  br label %cond.end, !dbg !11074

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11074

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_int_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11074
  %call = call i32 @VEC_int_base_length(%struct.VEC_int_base* %cond), !dbg !11074
  store i32 %call, i32* %oldsize, align 4, !dbg !11074
  %4 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !11074
  %5 = load i32, i32* %size_.addr, align 4, !dbg !11074
  call void @VEC_int_heap_safe_grow(%struct.VEC_int_heap** %4, i32 %5), !dbg !11074
  %6 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !11074
  %7 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %6, align 8, !dbg !11074
  %tobool1 = icmp ne %struct.VEC_int_heap* %7, null, !dbg !11074
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !11074

cond.true2:                                       ; preds = %cond.end
  %8 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !11074
  %9 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %8, align 8, !dbg !11074
  %base3 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %9, i32 0, i32 0, !dbg !11074
  br label %cond.end5, !dbg !11074

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !11074

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_int_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !11074
  %call7 = call i32* @VEC_int_base_address(%struct.VEC_int_base* %cond6), !dbg !11074
  %10 = load i32, i32* %oldsize, align 4, !dbg !11074
  %idxprom = sext i32 %10 to i64, !dbg !11074
  %arrayidx = getelementptr inbounds i32, i32* %call7, i64 %idxprom, !dbg !11074
  %11 = bitcast i32* %arrayidx to i8*, !dbg !11074
  %12 = load i32, i32* %size_.addr, align 4, !dbg !11074
  %13 = load i32, i32* %oldsize, align 4, !dbg !11074
  %sub = sub nsw i32 %12, %13, !dbg !11074
  %conv = sext i32 %sub to i64, !dbg !11074
  %mul = mul i64 4, %conv, !dbg !11074
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 %mul, i1 false), !dbg !11074
  ret void, !dbg !11074
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_int_base_length(%struct.VEC_int_base* %vec_) #0 !dbg !11077 {
entry:
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !11080, metadata !DIExpression()), !dbg !11081
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !11081
  %tobool = icmp ne %struct.VEC_int_base* %0, null, !dbg !11081
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11081

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !11081
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %1, i32 0, i32 0, !dbg !11081
  %2 = load i32, i32* %num, align 4, !dbg !11081
  br label %cond.end, !dbg !11081

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11081

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !11081
  ret i32 %cond, !dbg !11081
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_int_heap_safe_grow(%struct.VEC_int_heap** %vec_, i32 %size_) #0 !dbg !11082 {
entry:
  %vec_.addr = alloca %struct.VEC_int_heap**, align 8
  %size_.addr = alloca i32, align 4
  store %struct.VEC_int_heap** %vec_, %struct.VEC_int_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap*** %vec_.addr, metadata !11083, metadata !DIExpression()), !dbg !11084
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !11085, metadata !DIExpression()), !dbg !11084
  %0 = load i32, i32* %size_.addr, align 4, !dbg !11084
  %cmp = icmp sge i32 %0, 0, !dbg !11084
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !11084

land.rhs:                                         ; preds = %entry
  %1 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !11084
  %2 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %1, align 8, !dbg !11084
  %tobool = icmp ne %struct.VEC_int_heap* %2, null, !dbg !11084
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11084

cond.true:                                        ; preds = %land.rhs
  %3 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !11084
  %4 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %3, align 8, !dbg !11084
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %4, i32 0, i32 0, !dbg !11084
  br label %cond.end, !dbg !11084

cond.false:                                       ; preds = %land.rhs
  br label %cond.end, !dbg !11084

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_int_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11084
  %call = call i32 @VEC_int_base_length(%struct.VEC_int_base* %cond), !dbg !11084
  %5 = load i32, i32* %size_.addr, align 4, !dbg !11084
  %cmp1 = icmp ule i32 %call, %5, !dbg !11084
  br label %land.end

land.end:                                         ; preds = %cond.end, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %cond.end ], !dbg !11086
  %land.ext = zext i1 %6 to i32, !dbg !11084
  %7 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !11084
  %8 = load i32, i32* %size_.addr, align 4, !dbg !11084
  %9 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !11084
  %10 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %9, align 8, !dbg !11084
  %tobool2 = icmp ne %struct.VEC_int_heap* %10, null, !dbg !11084
  br i1 %tobool2, label %cond.true3, label %cond.false10, !dbg !11084

cond.true3:                                       ; preds = %land.end
  %11 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !11084
  %12 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %11, align 8, !dbg !11084
  %tobool4 = icmp ne %struct.VEC_int_heap* %12, null, !dbg !11084
  br i1 %tobool4, label %cond.true5, label %cond.false7, !dbg !11084

cond.true5:                                       ; preds = %cond.true3
  %13 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !11084
  %14 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %13, align 8, !dbg !11084
  %base6 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %14, i32 0, i32 0, !dbg !11084
  br label %cond.end8, !dbg !11084

cond.false7:                                      ; preds = %cond.true3
  br label %cond.end8, !dbg !11084

cond.end8:                                        ; preds = %cond.false7, %cond.true5
  %cond9 = phi %struct.VEC_int_base* [ %base6, %cond.true5 ], [ null, %cond.false7 ], !dbg !11084
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %cond9, i32 0, i32 0, !dbg !11084
  %15 = load i32, i32* %num, align 4, !dbg !11084
  br label %cond.end11, !dbg !11084

cond.false10:                                     ; preds = %land.end
  br label %cond.end11, !dbg !11084

cond.end11:                                       ; preds = %cond.false10, %cond.end8
  %cond12 = phi i32 [ %15, %cond.end8 ], [ 0, %cond.false10 ], !dbg !11084
  %sub = sub nsw i32 %8, %cond12, !dbg !11084
  %call13 = call i32 @VEC_int_heap_reserve_exact(%struct.VEC_int_heap** %7, i32 %sub), !dbg !11084
  %16 = load i32, i32* %size_.addr, align 4, !dbg !11084
  %17 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !11084
  %18 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %17, align 8, !dbg !11084
  %tobool14 = icmp ne %struct.VEC_int_heap* %18, null, !dbg !11084
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !11084

cond.true15:                                      ; preds = %cond.end11
  %19 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !11084
  %20 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %19, align 8, !dbg !11084
  %base16 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %20, i32 0, i32 0, !dbg !11084
  br label %cond.end18, !dbg !11084

cond.false17:                                     ; preds = %cond.end11
  br label %cond.end18, !dbg !11084

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_int_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !11084
  %num20 = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %cond19, i32 0, i32 0, !dbg !11084
  store i32 %16, i32* %num20, align 4, !dbg !11084
  ret void, !dbg !11084
}

; Function Attrs: noinline nounwind uwtable
define internal i32* @VEC_int_base_address(%struct.VEC_int_base* %vec_) #0 !dbg !11087 {
entry:
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !11091, metadata !DIExpression()), !dbg !11092
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !11092
  %tobool = icmp ne %struct.VEC_int_base* %0, null, !dbg !11092
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11092

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !11092
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %1, i32 0, i32 2, !dbg !11092
  %arraydecay = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 0, !dbg !11092
  br label %cond.end, !dbg !11092

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11092

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32* [ %arraydecay, %cond.true ], [ null, %cond.false ], !dbg !11092
  ret i32* %cond, !dbg !11092
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_int_heap_reserve_exact(%struct.VEC_int_heap** %vec_, i32 %alloc_) #0 !dbg !11093 {
entry:
  %vec_.addr = alloca %struct.VEC_int_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_int_heap** %vec_, %struct.VEC_int_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap*** %vec_.addr, metadata !11096, metadata !DIExpression()), !dbg !11097
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !11098, metadata !DIExpression()), !dbg !11097
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !11099, metadata !DIExpression()), !dbg !11097
  %0 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !11097
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %0, align 8, !dbg !11097
  %tobool = icmp ne %struct.VEC_int_heap* %1, null, !dbg !11097
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11097

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !11097
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %2, align 8, !dbg !11097
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %3, i32 0, i32 0, !dbg !11097
  br label %cond.end, !dbg !11097

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11097

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_int_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11097
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !11097
  %call = call i32 @VEC_int_base_space(%struct.VEC_int_base* %cond, i32 %4), !dbg !11097
  %tobool1 = icmp ne i32 %call, 0, !dbg !11097
  %lnot = xor i1 %tobool1, true, !dbg !11097
  %lnot.ext = zext i1 %lnot to i32, !dbg !11097
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !11097
  %5 = load i32, i32* %extend, align 4, !dbg !11100
  %tobool2 = icmp ne i32 %5, 0, !dbg !11100
  br i1 %tobool2, label %if.then, label %if.end, !dbg !11097

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !11100
  %7 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %6, align 8, !dbg !11100
  %8 = bitcast %struct.VEC_int_heap* %7 to i8*, !dbg !11100
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !11100
  %call3 = call i8* @vec_heap_o_reserve_exact(i8* %8, i32 %9, i64 8, i64 4), !dbg !11100
  %10 = bitcast i8* %call3 to %struct.VEC_int_heap*, !dbg !11100
  %11 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !11100
  store %struct.VEC_int_heap* %10, %struct.VEC_int_heap** %11, align 8, !dbg !11100
  br label %if.end, !dbg !11100

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !11097
  ret i32 %12, !dbg !11097
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_int_base_space(%struct.VEC_int_base* %vec_, i32 %alloc_) #0 !dbg !11102 {
entry:
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !11105, metadata !DIExpression()), !dbg !11106
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !11107, metadata !DIExpression()), !dbg !11106
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !11106
  %cmp = icmp sge i32 %0, 0, !dbg !11106
  %conv = zext i1 %cmp to i32, !dbg !11106
  %1 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !11106
  %tobool = icmp ne %struct.VEC_int_base* %1, null, !dbg !11106
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11106

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !11106
  %alloc = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 1, !dbg !11106
  %3 = load i32, i32* %alloc, align 4, !dbg !11106
  %4 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !11106
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %4, i32 0, i32 0, !dbg !11106
  %5 = load i32, i32* %num, align 4, !dbg !11106
  %sub = sub i32 %3, %5, !dbg !11106
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !11106
  %cmp1 = icmp uge i32 %sub, %6, !dbg !11106
  %conv2 = zext i1 %cmp1 to i32, !dbg !11106
  br label %cond.end, !dbg !11106

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !11106
  %tobool3 = icmp ne i32 %7, 0, !dbg !11106
  %lnot = xor i1 %tobool3, true, !dbg !11106
  %lnot.ext = zext i1 %lnot to i32, !dbg !11106
  br label %cond.end, !dbg !11106

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !11106
  ret i32 %cond, !dbg !11106
}

declare dso_local i8* @vec_heap_o_reserve_exact(i8*, i32, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_int_base_replace(%struct.VEC_int_base* %vec_, i32 %ix_, i32 %obj_) #0 !dbg !11108 {
entry:
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %ix_.addr = alloca i32, align 4
  %obj_.addr = alloca i32, align 4
  %old_obj_ = alloca i32, align 4
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !11111, metadata !DIExpression()), !dbg !11112
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !11113, metadata !DIExpression()), !dbg !11112
  store i32 %obj_, i32* %obj_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %obj_.addr, metadata !11114, metadata !DIExpression()), !dbg !11112
  call void @llvm.dbg.declare(metadata i32* %old_obj_, metadata !11115, metadata !DIExpression()), !dbg !11112
  %0 = load i32, i32* %ix_.addr, align 4, !dbg !11112
  %1 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !11112
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %1, i32 0, i32 0, !dbg !11112
  %2 = load i32, i32* %num, align 4, !dbg !11112
  %cmp = icmp ult i32 %0, %2, !dbg !11112
  %conv = zext i1 %cmp to i32, !dbg !11112
  %3 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !11112
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %3, i32 0, i32 2, !dbg !11112
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !11112
  %idxprom = zext i32 %4 to i64, !dbg !11112
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !11112
  %5 = load i32, i32* %arrayidx, align 4, !dbg !11112
  store i32 %5, i32* %old_obj_, align 4, !dbg !11112
  %6 = load i32, i32* %obj_.addr, align 4, !dbg !11112
  %7 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !11112
  %vec1 = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %7, i32 0, i32 2, !dbg !11112
  %8 = load i32, i32* %ix_.addr, align 4, !dbg !11112
  %idxprom2 = zext i32 %8 to i64, !dbg !11112
  %arrayidx3 = getelementptr inbounds [1 x i32], [1 x i32]* %vec1, i64 0, i64 %idxprom2, !dbg !11112
  store i32 %6, i32* %arrayidx3, align 4, !dbg !11112
  %9 = load i32, i32* %old_obj_, align 4, !dbg !11112
  ret i32 %9, !dbg !11112
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_haifa_insn_data_def_base_length(%struct.VEC_haifa_insn_data_def_base* %vec_) #0 !dbg !11116 {
entry:
  %vec_.addr = alloca %struct.VEC_haifa_insn_data_def_base*, align 8
  store %struct.VEC_haifa_insn_data_def_base* %vec_, %struct.VEC_haifa_insn_data_def_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_haifa_insn_data_def_base** %vec_.addr, metadata !11121, metadata !DIExpression()), !dbg !11122
  %0 = load %struct.VEC_haifa_insn_data_def_base*, %struct.VEC_haifa_insn_data_def_base** %vec_.addr, align 8, !dbg !11122
  %tobool = icmp ne %struct.VEC_haifa_insn_data_def_base* %0, null, !dbg !11122
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11122

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_haifa_insn_data_def_base*, %struct.VEC_haifa_insn_data_def_base** %vec_.addr, align 8, !dbg !11122
  %num = getelementptr inbounds %struct.VEC_haifa_insn_data_def_base, %struct.VEC_haifa_insn_data_def_base* %1, i32 0, i32 0, !dbg !11122
  %2 = load i32, i32* %num, align 8, !dbg !11122
  br label %cond.end, !dbg !11122

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11122

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !11122
  ret i32 %cond, !dbg !11122
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_haifa_insn_data_def_base_space(%struct.VEC_haifa_insn_data_def_base* %vec_, i32 %alloc_) #0 !dbg !11123 {
entry:
  %vec_.addr = alloca %struct.VEC_haifa_insn_data_def_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_haifa_insn_data_def_base* %vec_, %struct.VEC_haifa_insn_data_def_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_haifa_insn_data_def_base** %vec_.addr, metadata !11126, metadata !DIExpression()), !dbg !11127
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !11128, metadata !DIExpression()), !dbg !11127
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !11127
  %cmp = icmp sge i32 %0, 0, !dbg !11127
  %conv = zext i1 %cmp to i32, !dbg !11127
  %1 = load %struct.VEC_haifa_insn_data_def_base*, %struct.VEC_haifa_insn_data_def_base** %vec_.addr, align 8, !dbg !11127
  %tobool = icmp ne %struct.VEC_haifa_insn_data_def_base* %1, null, !dbg !11127
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11127

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_haifa_insn_data_def_base*, %struct.VEC_haifa_insn_data_def_base** %vec_.addr, align 8, !dbg !11127
  %alloc = getelementptr inbounds %struct.VEC_haifa_insn_data_def_base, %struct.VEC_haifa_insn_data_def_base* %2, i32 0, i32 1, !dbg !11127
  %3 = load i32, i32* %alloc, align 4, !dbg !11127
  %4 = load %struct.VEC_haifa_insn_data_def_base*, %struct.VEC_haifa_insn_data_def_base** %vec_.addr, align 8, !dbg !11127
  %num = getelementptr inbounds %struct.VEC_haifa_insn_data_def_base, %struct.VEC_haifa_insn_data_def_base* %4, i32 0, i32 0, !dbg !11127
  %5 = load i32, i32* %num, align 8, !dbg !11127
  %sub = sub i32 %3, %5, !dbg !11127
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !11127
  %cmp1 = icmp uge i32 %sub, %6, !dbg !11127
  %conv2 = zext i1 %cmp1 to i32, !dbg !11127
  br label %cond.end, !dbg !11127

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !11127
  %tobool3 = icmp ne i32 %7, 0, !dbg !11127
  %lnot = xor i1 %tobool3, true, !dbg !11127
  %lnot.ext = zext i1 %lnot to i32, !dbg !11127
  br label %cond.end, !dbg !11127

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !11127
  ret i32 %cond, !dbg !11127
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_haifa_insn_data_def_heap_safe_grow_cleared(%struct.VEC_haifa_insn_data_def_heap** %vec_, i32 %size_) #0 !dbg !11129 {
entry:
  %vec_.addr = alloca %struct.VEC_haifa_insn_data_def_heap**, align 8
  %size_.addr = alloca i32, align 4
  %oldsize = alloca i32, align 4
  store %struct.VEC_haifa_insn_data_def_heap** %vec_, %struct.VEC_haifa_insn_data_def_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_haifa_insn_data_def_heap*** %vec_.addr, metadata !11132, metadata !DIExpression()), !dbg !11133
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !11134, metadata !DIExpression()), !dbg !11133
  call void @llvm.dbg.declare(metadata i32* %oldsize, metadata !11135, metadata !DIExpression()), !dbg !11133
  %0 = load %struct.VEC_haifa_insn_data_def_heap**, %struct.VEC_haifa_insn_data_def_heap*** %vec_.addr, align 8, !dbg !11133
  %1 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** %0, align 8, !dbg !11133
  %tobool = icmp ne %struct.VEC_haifa_insn_data_def_heap* %1, null, !dbg !11133
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11133

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_haifa_insn_data_def_heap**, %struct.VEC_haifa_insn_data_def_heap*** %vec_.addr, align 8, !dbg !11133
  %3 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** %2, align 8, !dbg !11133
  %base = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %3, i32 0, i32 0, !dbg !11133
  br label %cond.end, !dbg !11133

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11133

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_haifa_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11133
  %call = call i32 @VEC_haifa_insn_data_def_base_length(%struct.VEC_haifa_insn_data_def_base* %cond), !dbg !11133
  store i32 %call, i32* %oldsize, align 4, !dbg !11133
  %4 = load %struct.VEC_haifa_insn_data_def_heap**, %struct.VEC_haifa_insn_data_def_heap*** %vec_.addr, align 8, !dbg !11133
  %5 = load i32, i32* %size_.addr, align 4, !dbg !11133
  call void @VEC_haifa_insn_data_def_heap_safe_grow(%struct.VEC_haifa_insn_data_def_heap** %4, i32 %5), !dbg !11133
  %6 = load %struct.VEC_haifa_insn_data_def_heap**, %struct.VEC_haifa_insn_data_def_heap*** %vec_.addr, align 8, !dbg !11133
  %7 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** %6, align 8, !dbg !11133
  %tobool1 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %7, null, !dbg !11133
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !11133

cond.true2:                                       ; preds = %cond.end
  %8 = load %struct.VEC_haifa_insn_data_def_heap**, %struct.VEC_haifa_insn_data_def_heap*** %vec_.addr, align 8, !dbg !11133
  %9 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** %8, align 8, !dbg !11133
  %base3 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %9, i32 0, i32 0, !dbg !11133
  br label %cond.end5, !dbg !11133

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !11133

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_haifa_insn_data_def_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !11133
  %call7 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_address(%struct.VEC_haifa_insn_data_def_base* %cond6), !dbg !11133
  %10 = load i32, i32* %oldsize, align 4, !dbg !11133
  %idxprom = sext i32 %10 to i64, !dbg !11133
  %arrayidx = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call7, i64 %idxprom, !dbg !11133
  %11 = bitcast %struct._haifa_insn_data* %arrayidx to i8*, !dbg !11133
  %12 = load i32, i32* %size_.addr, align 4, !dbg !11133
  %13 = load i32, i32* %oldsize, align 4, !dbg !11133
  %sub = sub nsw i32 %12, %13, !dbg !11133
  %conv = sext i32 %sub to i64, !dbg !11133
  %mul = mul i64 96, %conv, !dbg !11133
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 %mul, i1 false), !dbg !11133
  ret void, !dbg !11133
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_haifa_insn_data_def_heap_safe_grow(%struct.VEC_haifa_insn_data_def_heap** %vec_, i32 %size_) #0 !dbg !11136 {
entry:
  %vec_.addr = alloca %struct.VEC_haifa_insn_data_def_heap**, align 8
  %size_.addr = alloca i32, align 4
  store %struct.VEC_haifa_insn_data_def_heap** %vec_, %struct.VEC_haifa_insn_data_def_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_haifa_insn_data_def_heap*** %vec_.addr, metadata !11137, metadata !DIExpression()), !dbg !11138
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !11139, metadata !DIExpression()), !dbg !11138
  %0 = load i32, i32* %size_.addr, align 4, !dbg !11138
  %cmp = icmp sge i32 %0, 0, !dbg !11138
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !11138

land.rhs:                                         ; preds = %entry
  %1 = load %struct.VEC_haifa_insn_data_def_heap**, %struct.VEC_haifa_insn_data_def_heap*** %vec_.addr, align 8, !dbg !11138
  %2 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** %1, align 8, !dbg !11138
  %tobool = icmp ne %struct.VEC_haifa_insn_data_def_heap* %2, null, !dbg !11138
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11138

cond.true:                                        ; preds = %land.rhs
  %3 = load %struct.VEC_haifa_insn_data_def_heap**, %struct.VEC_haifa_insn_data_def_heap*** %vec_.addr, align 8, !dbg !11138
  %4 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** %3, align 8, !dbg !11138
  %base = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %4, i32 0, i32 0, !dbg !11138
  br label %cond.end, !dbg !11138

cond.false:                                       ; preds = %land.rhs
  br label %cond.end, !dbg !11138

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_haifa_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11138
  %call = call i32 @VEC_haifa_insn_data_def_base_length(%struct.VEC_haifa_insn_data_def_base* %cond), !dbg !11138
  %5 = load i32, i32* %size_.addr, align 4, !dbg !11138
  %cmp1 = icmp ule i32 %call, %5, !dbg !11138
  br label %land.end

land.end:                                         ; preds = %cond.end, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %cond.end ], !dbg !11140
  %land.ext = zext i1 %6 to i32, !dbg !11138
  %7 = load %struct.VEC_haifa_insn_data_def_heap**, %struct.VEC_haifa_insn_data_def_heap*** %vec_.addr, align 8, !dbg !11138
  %8 = load i32, i32* %size_.addr, align 4, !dbg !11138
  %9 = load %struct.VEC_haifa_insn_data_def_heap**, %struct.VEC_haifa_insn_data_def_heap*** %vec_.addr, align 8, !dbg !11138
  %10 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** %9, align 8, !dbg !11138
  %tobool2 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %10, null, !dbg !11138
  br i1 %tobool2, label %cond.true3, label %cond.false10, !dbg !11138

cond.true3:                                       ; preds = %land.end
  %11 = load %struct.VEC_haifa_insn_data_def_heap**, %struct.VEC_haifa_insn_data_def_heap*** %vec_.addr, align 8, !dbg !11138
  %12 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** %11, align 8, !dbg !11138
  %tobool4 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %12, null, !dbg !11138
  br i1 %tobool4, label %cond.true5, label %cond.false7, !dbg !11138

cond.true5:                                       ; preds = %cond.true3
  %13 = load %struct.VEC_haifa_insn_data_def_heap**, %struct.VEC_haifa_insn_data_def_heap*** %vec_.addr, align 8, !dbg !11138
  %14 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** %13, align 8, !dbg !11138
  %base6 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %14, i32 0, i32 0, !dbg !11138
  br label %cond.end8, !dbg !11138

cond.false7:                                      ; preds = %cond.true3
  br label %cond.end8, !dbg !11138

cond.end8:                                        ; preds = %cond.false7, %cond.true5
  %cond9 = phi %struct.VEC_haifa_insn_data_def_base* [ %base6, %cond.true5 ], [ null, %cond.false7 ], !dbg !11138
  %num = getelementptr inbounds %struct.VEC_haifa_insn_data_def_base, %struct.VEC_haifa_insn_data_def_base* %cond9, i32 0, i32 0, !dbg !11138
  %15 = load i32, i32* %num, align 8, !dbg !11138
  br label %cond.end11, !dbg !11138

cond.false10:                                     ; preds = %land.end
  br label %cond.end11, !dbg !11138

cond.end11:                                       ; preds = %cond.false10, %cond.end8
  %cond12 = phi i32 [ %15, %cond.end8 ], [ 0, %cond.false10 ], !dbg !11138
  %sub = sub nsw i32 %8, %cond12, !dbg !11138
  %call13 = call i32 @VEC_haifa_insn_data_def_heap_reserve_exact(%struct.VEC_haifa_insn_data_def_heap** %7, i32 %sub), !dbg !11138
  %16 = load i32, i32* %size_.addr, align 4, !dbg !11138
  %17 = load %struct.VEC_haifa_insn_data_def_heap**, %struct.VEC_haifa_insn_data_def_heap*** %vec_.addr, align 8, !dbg !11138
  %18 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** %17, align 8, !dbg !11138
  %tobool14 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %18, null, !dbg !11138
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !11138

cond.true15:                                      ; preds = %cond.end11
  %19 = load %struct.VEC_haifa_insn_data_def_heap**, %struct.VEC_haifa_insn_data_def_heap*** %vec_.addr, align 8, !dbg !11138
  %20 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** %19, align 8, !dbg !11138
  %base16 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %20, i32 0, i32 0, !dbg !11138
  br label %cond.end18, !dbg !11138

cond.false17:                                     ; preds = %cond.end11
  br label %cond.end18, !dbg !11138

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_haifa_insn_data_def_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !11138
  %num20 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_base, %struct.VEC_haifa_insn_data_def_base* %cond19, i32 0, i32 0, !dbg !11138
  store i32 %16, i32* %num20, align 8, !dbg !11138
  ret void, !dbg !11138
}

; Function Attrs: noinline nounwind uwtable
define internal %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_address(%struct.VEC_haifa_insn_data_def_base* %vec_) #0 !dbg !11141 {
entry:
  %vec_.addr = alloca %struct.VEC_haifa_insn_data_def_base*, align 8
  store %struct.VEC_haifa_insn_data_def_base* %vec_, %struct.VEC_haifa_insn_data_def_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_haifa_insn_data_def_base** %vec_.addr, metadata !11144, metadata !DIExpression()), !dbg !11145
  %0 = load %struct.VEC_haifa_insn_data_def_base*, %struct.VEC_haifa_insn_data_def_base** %vec_.addr, align 8, !dbg !11145
  %tobool = icmp ne %struct.VEC_haifa_insn_data_def_base* %0, null, !dbg !11145
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11145

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_haifa_insn_data_def_base*, %struct.VEC_haifa_insn_data_def_base** %vec_.addr, align 8, !dbg !11145
  %vec = getelementptr inbounds %struct.VEC_haifa_insn_data_def_base, %struct.VEC_haifa_insn_data_def_base* %1, i32 0, i32 2, !dbg !11145
  %arraydecay = getelementptr inbounds [1 x %struct._haifa_insn_data], [1 x %struct._haifa_insn_data]* %vec, i64 0, i64 0, !dbg !11145
  br label %cond.end, !dbg !11145

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11145

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._haifa_insn_data* [ %arraydecay, %cond.true ], [ null, %cond.false ], !dbg !11145
  ret %struct._haifa_insn_data* %cond, !dbg !11145
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_haifa_insn_data_def_heap_reserve_exact(%struct.VEC_haifa_insn_data_def_heap** %vec_, i32 %alloc_) #0 !dbg !11146 {
entry:
  %vec_.addr = alloca %struct.VEC_haifa_insn_data_def_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_haifa_insn_data_def_heap** %vec_, %struct.VEC_haifa_insn_data_def_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_haifa_insn_data_def_heap*** %vec_.addr, metadata !11149, metadata !DIExpression()), !dbg !11150
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !11151, metadata !DIExpression()), !dbg !11150
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !11152, metadata !DIExpression()), !dbg !11150
  %0 = load %struct.VEC_haifa_insn_data_def_heap**, %struct.VEC_haifa_insn_data_def_heap*** %vec_.addr, align 8, !dbg !11150
  %1 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** %0, align 8, !dbg !11150
  %tobool = icmp ne %struct.VEC_haifa_insn_data_def_heap* %1, null, !dbg !11150
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11150

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_haifa_insn_data_def_heap**, %struct.VEC_haifa_insn_data_def_heap*** %vec_.addr, align 8, !dbg !11150
  %3 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** %2, align 8, !dbg !11150
  %base = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %3, i32 0, i32 0, !dbg !11150
  br label %cond.end, !dbg !11150

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11150

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_haifa_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11150
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !11150
  %call = call i32 @VEC_haifa_insn_data_def_base_space(%struct.VEC_haifa_insn_data_def_base* %cond, i32 %4), !dbg !11150
  %tobool1 = icmp ne i32 %call, 0, !dbg !11150
  %lnot = xor i1 %tobool1, true, !dbg !11150
  %lnot.ext = zext i1 %lnot to i32, !dbg !11150
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !11150
  %5 = load i32, i32* %extend, align 4, !dbg !11153
  %tobool2 = icmp ne i32 %5, 0, !dbg !11153
  br i1 %tobool2, label %if.then, label %if.end, !dbg !11150

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_haifa_insn_data_def_heap**, %struct.VEC_haifa_insn_data_def_heap*** %vec_.addr, align 8, !dbg !11153
  %7 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** %6, align 8, !dbg !11153
  %8 = bitcast %struct.VEC_haifa_insn_data_def_heap* %7 to i8*, !dbg !11153
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !11153
  %call3 = call i8* @vec_heap_o_reserve_exact(i8* %8, i32 %9, i64 8, i64 96), !dbg !11153
  %10 = bitcast i8* %call3 to %struct.VEC_haifa_insn_data_def_heap*, !dbg !11153
  %11 = load %struct.VEC_haifa_insn_data_def_heap**, %struct.VEC_haifa_insn_data_def_heap*** %vec_.addr, align 8, !dbg !11153
  store %struct.VEC_haifa_insn_data_def_heap* %10, %struct.VEC_haifa_insn_data_def_heap** %11, align 8, !dbg !11153
  br label %if.end, !dbg !11153

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !11150
  ret i32 %12, !dbg !11150
}

declare dso_local void @sd_init_insn(%struct.rtx_def*) #2

declare dso_local void @extend_dependency_caches(i32, i8 zeroext) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!2501, !2502, !2503}
!llvm.ident = !{!2504}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "sched_verbose", scope: !2, file: !3, line: 170, type: !865, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !864, globals: !2193, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "haifa-sched.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !134, !141, !150, !154, !160, !165, !170, !189, !196, !203, !397, !405, !440, !582, !598, !721, !763, !769, !779, !783, !813, !821, !835, !843, !858}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !6, line: 7, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133}
!9 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!25 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!26 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!27 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!28 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!29 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!30 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!31 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!32 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!33 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!34 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!35 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!36 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!37 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!38 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!39 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!40 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!41 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!42 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!43 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!44 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!45 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!46 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!47 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!48 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!49 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!50 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!51 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!52 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!53 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!54 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!55 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!56 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!57 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!58 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!59 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!60 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!61 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!62 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!63 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!64 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!65 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!66 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!67 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!68 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!69 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!70 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!71 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!72 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!73 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!74 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!75 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!76 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!77 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!78 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!79 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!80 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!81 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!82 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!83 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!84 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!85 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!86 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!87 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!88 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!89 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!90 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!91 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!92 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!93 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!94 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!95 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!133 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!134 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "eh_region_type", file: !135, line: 30, baseType: !7, size: 32, elements: !136)
!135 = !DIFile(filename: "./except.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!136 = !{!137, !138, !139, !140}
!137 = !DIEnumerator(name: "ERT_CLEANUP", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "ERT_TRY", value: 1, isUnsigned: true)
!139 = !DIEnumerator(name: "ERT_ALLOWED_EXCEPTIONS", value: 2, isUnsigned: true)
!140 = !DIEnumerator(name: "ERT_MUST_NOT_THROW", value: 3, isUnsigned: true)
!141 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "lpt_dec", file: !142, line: 31, baseType: !7, size: 32, elements: !143)
!142 = !DIFile(filename: "./cfgloop.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!143 = !{!144, !145, !146, !147, !148, !149}
!144 = !DIEnumerator(name: "LPT_NONE", value: 0, isUnsigned: true)
!145 = !DIEnumerator(name: "LPT_PEEL_COMPLETELY", value: 1, isUnsigned: true)
!146 = !DIEnumerator(name: "LPT_PEEL_SIMPLE", value: 2, isUnsigned: true)
!147 = !DIEnumerator(name: "LPT_UNROLL_CONSTANT", value: 3, isUnsigned: true)
!148 = !DIEnumerator(name: "LPT_UNROLL_RUNTIME", value: 4, isUnsigned: true)
!149 = !DIEnumerator(name: "LPT_UNROLL_STUPID", value: 5, isUnsigned: true)
!150 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "loop_estimation", file: !142, line: 91, baseType: !7, size: 32, elements: !151)
!151 = !{!152, !153}
!152 = !DIEnumerator(name: "EST_NOT_COMPUTED", value: 0, isUnsigned: true)
!153 = !DIEnumerator(name: "EST_AVAILABLE", value: 1, isUnsigned: true)
!154 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !155, line: 363, baseType: !7, size: 32, elements: !156)
!155 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!156 = !{!157, !158, !159}
!157 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!158 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!159 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!160 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !155, line: 355, baseType: !7, size: 32, elements: !161)
!161 = !{!162, !163, !164}
!162 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!163 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!164 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!165 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !166, line: 474, baseType: !7, size: 32, elements: !167)
!166 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!167 = !{!168, !169}
!168 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!169 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!170 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !171, line: 280, baseType: !7, size: 32, elements: !172)
!171 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!172 = !{!173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188}
!173 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!174 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!175 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!176 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!177 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!178 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!179 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!180 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!181 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!182 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!183 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!184 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!185 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!186 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!187 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!188 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!189 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !171, line: 1817, baseType: !7, size: 32, elements: !190)
!190 = !{!191, !192, !193, !194, !195}
!191 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!192 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!193 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!194 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!195 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!196 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !171, line: 1805, baseType: !7, size: 32, elements: !197)
!197 = !{!198, !199, !200, !201, !202}
!198 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!199 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!200 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!201 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!202 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!203 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !171, line: 39, baseType: !7, size: 32, elements: !204)
!204 = !{!205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !334, !335, !336, !337, !338, !339, !340, !341, !342, !343, !344, !345, !346, !347, !348, !349, !350, !351, !352, !353, !354, !355, !356, !357, !358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375, !376, !377, !378, !379, !380, !381, !382, !383, !384, !385, !386, !387, !388, !389, !390, !391, !392, !393, !394, !395, !396}
!205 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!206 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!207 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!208 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!209 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!210 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!211 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!212 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!213 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!214 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!215 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!216 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!217 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!218 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!219 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!220 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!221 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!222 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!223 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!224 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!225 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!226 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!227 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!228 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!229 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!230 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!231 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!232 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!233 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!234 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!235 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!236 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!237 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!238 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!239 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!240 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!241 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!242 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!243 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!244 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!245 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!246 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!247 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!248 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!249 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!250 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!251 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!252 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!253 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!254 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!255 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!256 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!257 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!258 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!259 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!260 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!261 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!262 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!263 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!264 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!265 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!266 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!267 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!268 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!269 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!270 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!271 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!272 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!273 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!274 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!275 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!276 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!277 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!278 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!279 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!280 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!281 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!282 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!283 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!284 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!285 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!286 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!287 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!288 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!289 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!290 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!291 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!292 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!293 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!294 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!295 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!296 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!297 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!298 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!299 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!300 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!301 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!302 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!303 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!304 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!305 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!306 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!307 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!308 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!309 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!310 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!311 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!312 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!313 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!314 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!315 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!316 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!317 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!318 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!319 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!320 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!321 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!322 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!323 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!324 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!325 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!326 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!327 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!328 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!329 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!330 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!331 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!332 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!333 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!334 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!335 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!336 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!337 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!338 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!339 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!340 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!341 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!342 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!343 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!344 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!345 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!346 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!347 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!348 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!349 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!350 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!351 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!352 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!353 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!354 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!355 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!356 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!357 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!358 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!359 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!360 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!361 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!362 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!363 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!364 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!365 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!366 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!367 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!368 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!369 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!370 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!371 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!372 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!373 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!374 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!375 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!376 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!377 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!378 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!379 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!380 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!381 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!382 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!383 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!384 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!385 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!386 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!387 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!388 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!389 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!390 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!391 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!392 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!393 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!394 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!395 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!396 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!397 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "sched_pass_id_t", file: !398, line: 37, baseType: !7, size: 32, elements: !399)
!398 = !DIFile(filename: "./sched-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!399 = !{!400, !401, !402, !403, !404}
!400 = !DIEnumerator(name: "SCHED_PASS_UNKNOWN", value: 0, isUnsigned: true)
!401 = !DIEnumerator(name: "SCHED_RGN_PASS", value: 1, isUnsigned: true)
!402 = !DIEnumerator(name: "SCHED_EBB_PASS", value: 2, isUnsigned: true)
!403 = !DIEnumerator(name: "SCHED_SMS_PASS", value: 3, isUnsigned: true)
!404 = !DIEnumerator(name: "SCHED_SEL_PASS", value: 4, isUnsigned: true)
!405 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "reg_note", file: !406, line: 836, baseType: !7, size: 32, elements: !407)
!406 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!407 = !{!408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439}
!408 = !DIEnumerator(name: "REG_DEP_TRUE", value: 0, isUnsigned: true)
!409 = !DIEnumerator(name: "REG_DEAD", value: 1, isUnsigned: true)
!410 = !DIEnumerator(name: "REG_INC", value: 2, isUnsigned: true)
!411 = !DIEnumerator(name: "REG_EQUIV", value: 3, isUnsigned: true)
!412 = !DIEnumerator(name: "REG_EQUAL", value: 4, isUnsigned: true)
!413 = !DIEnumerator(name: "REG_NONNEG", value: 5, isUnsigned: true)
!414 = !DIEnumerator(name: "REG_UNUSED", value: 6, isUnsigned: true)
!415 = !DIEnumerator(name: "REG_CC_SETTER", value: 7, isUnsigned: true)
!416 = !DIEnumerator(name: "REG_CC_USER", value: 8, isUnsigned: true)
!417 = !DIEnumerator(name: "REG_LABEL_TARGET", value: 9, isUnsigned: true)
!418 = !DIEnumerator(name: "REG_LABEL_OPERAND", value: 10, isUnsigned: true)
!419 = !DIEnumerator(name: "REG_DEP_OUTPUT", value: 11, isUnsigned: true)
!420 = !DIEnumerator(name: "REG_DEP_ANTI", value: 12, isUnsigned: true)
!421 = !DIEnumerator(name: "REG_BR_PROB", value: 13, isUnsigned: true)
!422 = !DIEnumerator(name: "REG_VALUE_PROFILE", value: 14, isUnsigned: true)
!423 = !DIEnumerator(name: "REG_NOALIAS", value: 15, isUnsigned: true)
!424 = !DIEnumerator(name: "REG_BR_PRED", value: 16, isUnsigned: true)
!425 = !DIEnumerator(name: "REG_FRAME_RELATED_EXPR", value: 17, isUnsigned: true)
!426 = !DIEnumerator(name: "REG_CFA_DEF_CFA", value: 18, isUnsigned: true)
!427 = !DIEnumerator(name: "REG_CFA_ADJUST_CFA", value: 19, isUnsigned: true)
!428 = !DIEnumerator(name: "REG_CFA_OFFSET", value: 20, isUnsigned: true)
!429 = !DIEnumerator(name: "REG_CFA_REGISTER", value: 21, isUnsigned: true)
!430 = !DIEnumerator(name: "REG_CFA_RESTORE", value: 22, isUnsigned: true)
!431 = !DIEnumerator(name: "REG_CFA_SET_VDRAP", value: 23, isUnsigned: true)
!432 = !DIEnumerator(name: "REG_EH_CONTEXT", value: 24, isUnsigned: true)
!433 = !DIEnumerator(name: "REG_EH_REGION", value: 25, isUnsigned: true)
!434 = !DIEnumerator(name: "REG_SAVE_NOTE", value: 26, isUnsigned: true)
!435 = !DIEnumerator(name: "REG_NORETURN", value: 27, isUnsigned: true)
!436 = !DIEnumerator(name: "REG_NON_LOCAL_GOTO", value: 28, isUnsigned: true)
!437 = !DIEnumerator(name: "REG_CROSSING_JUMP", value: 29, isUnsigned: true)
!438 = !DIEnumerator(name: "REG_SETJMP", value: 30, isUnsigned: true)
!439 = !DIEnumerator(name: "REG_NOTE_MAX", value: 31, isUnsigned: true)
!440 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rtx_code", file: !406, line: 45, baseType: !7, size: 32, elements: !441)
!441 = !{!442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575, !576, !577, !578, !579, !580, !581}
!442 = !DIEnumerator(name: "UNKNOWN", value: 0, isUnsigned: true)
!443 = !DIEnumerator(name: "VALUE", value: 1, isUnsigned: true)
!444 = !DIEnumerator(name: "DEBUG_EXPR", value: 2, isUnsigned: true)
!445 = !DIEnumerator(name: "EXPR_LIST", value: 3, isUnsigned: true)
!446 = !DIEnumerator(name: "INSN_LIST", value: 4, isUnsigned: true)
!447 = !DIEnumerator(name: "SEQUENCE", value: 5, isUnsigned: true)
!448 = !DIEnumerator(name: "ADDRESS", value: 6, isUnsigned: true)
!449 = !DIEnumerator(name: "DEBUG_INSN", value: 7, isUnsigned: true)
!450 = !DIEnumerator(name: "INSN", value: 8, isUnsigned: true)
!451 = !DIEnumerator(name: "JUMP_INSN", value: 9, isUnsigned: true)
!452 = !DIEnumerator(name: "CALL_INSN", value: 10, isUnsigned: true)
!453 = !DIEnumerator(name: "BARRIER", value: 11, isUnsigned: true)
!454 = !DIEnumerator(name: "CODE_LABEL", value: 12, isUnsigned: true)
!455 = !DIEnumerator(name: "NOTE", value: 13, isUnsigned: true)
!456 = !DIEnumerator(name: "COND_EXEC", value: 14, isUnsigned: true)
!457 = !DIEnumerator(name: "PARALLEL", value: 15, isUnsigned: true)
!458 = !DIEnumerator(name: "ASM_INPUT", value: 16, isUnsigned: true)
!459 = !DIEnumerator(name: "ASM_OPERANDS", value: 17, isUnsigned: true)
!460 = !DIEnumerator(name: "UNSPEC", value: 18, isUnsigned: true)
!461 = !DIEnumerator(name: "UNSPEC_VOLATILE", value: 19, isUnsigned: true)
!462 = !DIEnumerator(name: "ADDR_VEC", value: 20, isUnsigned: true)
!463 = !DIEnumerator(name: "ADDR_DIFF_VEC", value: 21, isUnsigned: true)
!464 = !DIEnumerator(name: "PREFETCH", value: 22, isUnsigned: true)
!465 = !DIEnumerator(name: "SET", value: 23, isUnsigned: true)
!466 = !DIEnumerator(name: "USE", value: 24, isUnsigned: true)
!467 = !DIEnumerator(name: "CLOBBER", value: 25, isUnsigned: true)
!468 = !DIEnumerator(name: "CALL", value: 26, isUnsigned: true)
!469 = !DIEnumerator(name: "RETURN", value: 27, isUnsigned: true)
!470 = !DIEnumerator(name: "EH_RETURN", value: 28, isUnsigned: true)
!471 = !DIEnumerator(name: "TRAP_IF", value: 29, isUnsigned: true)
!472 = !DIEnumerator(name: "CONST_INT", value: 30, isUnsigned: true)
!473 = !DIEnumerator(name: "CONST_FIXED", value: 31, isUnsigned: true)
!474 = !DIEnumerator(name: "CONST_DOUBLE", value: 32, isUnsigned: true)
!475 = !DIEnumerator(name: "CONST_VECTOR", value: 33, isUnsigned: true)
!476 = !DIEnumerator(name: "CONST_STRING", value: 34, isUnsigned: true)
!477 = !DIEnumerator(name: "CONST", value: 35, isUnsigned: true)
!478 = !DIEnumerator(name: "PC", value: 36, isUnsigned: true)
!479 = !DIEnumerator(name: "REG", value: 37, isUnsigned: true)
!480 = !DIEnumerator(name: "SCRATCH", value: 38, isUnsigned: true)
!481 = !DIEnumerator(name: "SUBREG", value: 39, isUnsigned: true)
!482 = !DIEnumerator(name: "STRICT_LOW_PART", value: 40, isUnsigned: true)
!483 = !DIEnumerator(name: "CONCAT", value: 41, isUnsigned: true)
!484 = !DIEnumerator(name: "CONCATN", value: 42, isUnsigned: true)
!485 = !DIEnumerator(name: "MEM", value: 43, isUnsigned: true)
!486 = !DIEnumerator(name: "LABEL_REF", value: 44, isUnsigned: true)
!487 = !DIEnumerator(name: "SYMBOL_REF", value: 45, isUnsigned: true)
!488 = !DIEnumerator(name: "CC0", value: 46, isUnsigned: true)
!489 = !DIEnumerator(name: "IF_THEN_ELSE", value: 47, isUnsigned: true)
!490 = !DIEnumerator(name: "COMPARE", value: 48, isUnsigned: true)
!491 = !DIEnumerator(name: "PLUS", value: 49, isUnsigned: true)
!492 = !DIEnumerator(name: "MINUS", value: 50, isUnsigned: true)
!493 = !DIEnumerator(name: "NEG", value: 51, isUnsigned: true)
!494 = !DIEnumerator(name: "MULT", value: 52, isUnsigned: true)
!495 = !DIEnumerator(name: "SS_MULT", value: 53, isUnsigned: true)
!496 = !DIEnumerator(name: "US_MULT", value: 54, isUnsigned: true)
!497 = !DIEnumerator(name: "DIV", value: 55, isUnsigned: true)
!498 = !DIEnumerator(name: "SS_DIV", value: 56, isUnsigned: true)
!499 = !DIEnumerator(name: "US_DIV", value: 57, isUnsigned: true)
!500 = !DIEnumerator(name: "MOD", value: 58, isUnsigned: true)
!501 = !DIEnumerator(name: "UDIV", value: 59, isUnsigned: true)
!502 = !DIEnumerator(name: "UMOD", value: 60, isUnsigned: true)
!503 = !DIEnumerator(name: "AND", value: 61, isUnsigned: true)
!504 = !DIEnumerator(name: "IOR", value: 62, isUnsigned: true)
!505 = !DIEnumerator(name: "XOR", value: 63, isUnsigned: true)
!506 = !DIEnumerator(name: "NOT", value: 64, isUnsigned: true)
!507 = !DIEnumerator(name: "ASHIFT", value: 65, isUnsigned: true)
!508 = !DIEnumerator(name: "ROTATE", value: 66, isUnsigned: true)
!509 = !DIEnumerator(name: "ASHIFTRT", value: 67, isUnsigned: true)
!510 = !DIEnumerator(name: "LSHIFTRT", value: 68, isUnsigned: true)
!511 = !DIEnumerator(name: "ROTATERT", value: 69, isUnsigned: true)
!512 = !DIEnumerator(name: "SMIN", value: 70, isUnsigned: true)
!513 = !DIEnumerator(name: "SMAX", value: 71, isUnsigned: true)
!514 = !DIEnumerator(name: "UMIN", value: 72, isUnsigned: true)
!515 = !DIEnumerator(name: "UMAX", value: 73, isUnsigned: true)
!516 = !DIEnumerator(name: "PRE_DEC", value: 74, isUnsigned: true)
!517 = !DIEnumerator(name: "PRE_INC", value: 75, isUnsigned: true)
!518 = !DIEnumerator(name: "POST_DEC", value: 76, isUnsigned: true)
!519 = !DIEnumerator(name: "POST_INC", value: 77, isUnsigned: true)
!520 = !DIEnumerator(name: "PRE_MODIFY", value: 78, isUnsigned: true)
!521 = !DIEnumerator(name: "POST_MODIFY", value: 79, isUnsigned: true)
!522 = !DIEnumerator(name: "NE", value: 80, isUnsigned: true)
!523 = !DIEnumerator(name: "EQ", value: 81, isUnsigned: true)
!524 = !DIEnumerator(name: "GE", value: 82, isUnsigned: true)
!525 = !DIEnumerator(name: "GT", value: 83, isUnsigned: true)
!526 = !DIEnumerator(name: "LE", value: 84, isUnsigned: true)
!527 = !DIEnumerator(name: "LT", value: 85, isUnsigned: true)
!528 = !DIEnumerator(name: "GEU", value: 86, isUnsigned: true)
!529 = !DIEnumerator(name: "GTU", value: 87, isUnsigned: true)
!530 = !DIEnumerator(name: "LEU", value: 88, isUnsigned: true)
!531 = !DIEnumerator(name: "LTU", value: 89, isUnsigned: true)
!532 = !DIEnumerator(name: "UNORDERED", value: 90, isUnsigned: true)
!533 = !DIEnumerator(name: "ORDERED", value: 91, isUnsigned: true)
!534 = !DIEnumerator(name: "UNEQ", value: 92, isUnsigned: true)
!535 = !DIEnumerator(name: "UNGE", value: 93, isUnsigned: true)
!536 = !DIEnumerator(name: "UNGT", value: 94, isUnsigned: true)
!537 = !DIEnumerator(name: "UNLE", value: 95, isUnsigned: true)
!538 = !DIEnumerator(name: "UNLT", value: 96, isUnsigned: true)
!539 = !DIEnumerator(name: "LTGT", value: 97, isUnsigned: true)
!540 = !DIEnumerator(name: "SIGN_EXTEND", value: 98, isUnsigned: true)
!541 = !DIEnumerator(name: "ZERO_EXTEND", value: 99, isUnsigned: true)
!542 = !DIEnumerator(name: "TRUNCATE", value: 100, isUnsigned: true)
!543 = !DIEnumerator(name: "FLOAT_EXTEND", value: 101, isUnsigned: true)
!544 = !DIEnumerator(name: "FLOAT_TRUNCATE", value: 102, isUnsigned: true)
!545 = !DIEnumerator(name: "FLOAT", value: 103, isUnsigned: true)
!546 = !DIEnumerator(name: "FIX", value: 104, isUnsigned: true)
!547 = !DIEnumerator(name: "UNSIGNED_FLOAT", value: 105, isUnsigned: true)
!548 = !DIEnumerator(name: "UNSIGNED_FIX", value: 106, isUnsigned: true)
!549 = !DIEnumerator(name: "FRACT_CONVERT", value: 107, isUnsigned: true)
!550 = !DIEnumerator(name: "UNSIGNED_FRACT_CONVERT", value: 108, isUnsigned: true)
!551 = !DIEnumerator(name: "SAT_FRACT", value: 109, isUnsigned: true)
!552 = !DIEnumerator(name: "UNSIGNED_SAT_FRACT", value: 110, isUnsigned: true)
!553 = !DIEnumerator(name: "ABS", value: 111, isUnsigned: true)
!554 = !DIEnumerator(name: "SQRT", value: 112, isUnsigned: true)
!555 = !DIEnumerator(name: "BSWAP", value: 113, isUnsigned: true)
!556 = !DIEnumerator(name: "FFS", value: 114, isUnsigned: true)
!557 = !DIEnumerator(name: "CLZ", value: 115, isUnsigned: true)
!558 = !DIEnumerator(name: "CTZ", value: 116, isUnsigned: true)
!559 = !DIEnumerator(name: "POPCOUNT", value: 117, isUnsigned: true)
!560 = !DIEnumerator(name: "PARITY", value: 118, isUnsigned: true)
!561 = !DIEnumerator(name: "SIGN_EXTRACT", value: 119, isUnsigned: true)
!562 = !DIEnumerator(name: "ZERO_EXTRACT", value: 120, isUnsigned: true)
!563 = !DIEnumerator(name: "HIGH", value: 121, isUnsigned: true)
!564 = !DIEnumerator(name: "LO_SUM", value: 122, isUnsigned: true)
!565 = !DIEnumerator(name: "VEC_MERGE", value: 123, isUnsigned: true)
!566 = !DIEnumerator(name: "VEC_SELECT", value: 124, isUnsigned: true)
!567 = !DIEnumerator(name: "VEC_CONCAT", value: 125, isUnsigned: true)
!568 = !DIEnumerator(name: "VEC_DUPLICATE", value: 126, isUnsigned: true)
!569 = !DIEnumerator(name: "SS_PLUS", value: 127, isUnsigned: true)
!570 = !DIEnumerator(name: "US_PLUS", value: 128, isUnsigned: true)
!571 = !DIEnumerator(name: "SS_MINUS", value: 129, isUnsigned: true)
!572 = !DIEnumerator(name: "SS_NEG", value: 130, isUnsigned: true)
!573 = !DIEnumerator(name: "US_NEG", value: 131, isUnsigned: true)
!574 = !DIEnumerator(name: "SS_ABS", value: 132, isUnsigned: true)
!575 = !DIEnumerator(name: "SS_ASHIFT", value: 133, isUnsigned: true)
!576 = !DIEnumerator(name: "US_ASHIFT", value: 134, isUnsigned: true)
!577 = !DIEnumerator(name: "US_MINUS", value: 135, isUnsigned: true)
!578 = !DIEnumerator(name: "SS_TRUNCATE", value: 136, isUnsigned: true)
!579 = !DIEnumerator(name: "US_TRUNCATE", value: 137, isUnsigned: true)
!580 = !DIEnumerator(name: "VAR_LOCATION", value: 138, isUnsigned: true)
!581 = !DIEnumerator(name: "LAST_AND_UNUSED_RTX_CODE", value: 139, isUnsigned: true)
!582 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insn_note", file: !406, line: 956, baseType: !7, size: 32, elements: !583)
!583 = !{!584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597}
!584 = !DIEnumerator(name: "NOTE_INSN_DELETED", value: 0, isUnsigned: true)
!585 = !DIEnumerator(name: "NOTE_INSN_DELETED_LABEL", value: 1, isUnsigned: true)
!586 = !DIEnumerator(name: "NOTE_INSN_BLOCK_BEG", value: 2, isUnsigned: true)
!587 = !DIEnumerator(name: "NOTE_INSN_BLOCK_END", value: 3, isUnsigned: true)
!588 = !DIEnumerator(name: "NOTE_INSN_FUNCTION_BEG", value: 4, isUnsigned: true)
!589 = !DIEnumerator(name: "NOTE_INSN_PROLOGUE_END", value: 5, isUnsigned: true)
!590 = !DIEnumerator(name: "NOTE_INSN_EPILOGUE_BEG", value: 6, isUnsigned: true)
!591 = !DIEnumerator(name: "NOTE_INSN_EH_REGION_BEG", value: 7, isUnsigned: true)
!592 = !DIEnumerator(name: "NOTE_INSN_EH_REGION_END", value: 8, isUnsigned: true)
!593 = !DIEnumerator(name: "NOTE_INSN_VAR_LOCATION", value: 9, isUnsigned: true)
!594 = !DIEnumerator(name: "NOTE_INSN_BASIC_BLOCK", value: 10, isUnsigned: true)
!595 = !DIEnumerator(name: "NOTE_INSN_SWITCH_TEXT_SECTIONS", value: 11, isUnsigned: true)
!596 = !DIEnumerator(name: "NOTE_INSN_CFA_RESTORE_STATE", value: 12, isUnsigned: true)
!597 = !DIEnumerator(name: "NOTE_INSN_MAX", value: 13, isUnsigned: true)
!598 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "compiler_param", file: !599, line: 82, baseType: !7, size: 32, elements: !600)
!599 = !DIFile(filename: "./params.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!600 = !{!601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713, !714, !715, !716, !717, !718, !719, !720}
!601 = !DIEnumerator(name: "PARAM_STRUCT_REORG_COLD_STRUCT_RATIO", value: 0, isUnsigned: true)
!602 = !DIEnumerator(name: "PARAM_PREDICTABLE_BRANCH_OUTCOME", value: 1, isUnsigned: true)
!603 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_SINGLE", value: 2, isUnsigned: true)
!604 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_AUTO", value: 3, isUnsigned: true)
!605 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE", value: 4, isUnsigned: true)
!606 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE_AUTO", value: 5, isUnsigned: true)
!607 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH", value: 6, isUnsigned: true)
!608 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH_AUTO", value: 7, isUnsigned: true)
!609 = !DIEnumerator(name: "PARAM_MIN_INLINE_RECURSIVE_PROBABILITY", value: 8, isUnsigned: true)
!610 = !DIEnumerator(name: "PARAM_EARLY_INLINER_MAX_ITERATIONS", value: 9, isUnsigned: true)
!611 = !DIEnumerator(name: "PARAM_MAX_VARIABLE_EXPANSIONS", value: 10, isUnsigned: true)
!612 = !DIEnumerator(name: "PARAM_MIN_VECT_LOOP_BOUND", value: 11, isUnsigned: true)
!613 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_INSN_SEARCH", value: 12, isUnsigned: true)
!614 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_LIVE_SEARCH", value: 13, isUnsigned: true)
!615 = !DIEnumerator(name: "PARAM_MAX_PENDING_LIST_LENGTH", value: 14, isUnsigned: true)
!616 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_INSNS", value: 15, isUnsigned: true)
!617 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_GROWTH", value: 16, isUnsigned: true)
!618 = !DIEnumerator(name: "PARAM_LARGE_UNIT_INSNS", value: 17, isUnsigned: true)
!619 = !DIEnumerator(name: "PARAM_INLINE_UNIT_GROWTH", value: 18, isUnsigned: true)
!620 = !DIEnumerator(name: "PARAM_IPCP_UNIT_GROWTH", value: 19, isUnsigned: true)
!621 = !DIEnumerator(name: "PARAM_EARLY_INLINING_INSNS", value: 20, isUnsigned: true)
!622 = !DIEnumerator(name: "PARAM_LARGE_STACK_FRAME", value: 21, isUnsigned: true)
!623 = !DIEnumerator(name: "PARAM_STACK_FRAME_GROWTH", value: 22, isUnsigned: true)
!624 = !DIEnumerator(name: "PARAM_MAX_GCSE_MEMORY", value: 23, isUnsigned: true)
!625 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_PARTIAL_FRACTION", value: 24, isUnsigned: true)
!626 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_CRITICAL_FRACTION", value: 25, isUnsigned: true)
!627 = !DIEnumerator(name: "PARAM_MAX_UNROLLED_INSNS", value: 26, isUnsigned: true)
!628 = !DIEnumerator(name: "PARAM_MAX_AVERAGE_UNROLLED_INSNS", value: 27, isUnsigned: true)
!629 = !DIEnumerator(name: "PARAM_MAX_UNROLL_TIMES", value: 28, isUnsigned: true)
!630 = !DIEnumerator(name: "PARAM_MAX_PEELED_INSNS", value: 29, isUnsigned: true)
!631 = !DIEnumerator(name: "PARAM_MAX_PEEL_TIMES", value: 30, isUnsigned: true)
!632 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEELED_INSNS", value: 31, isUnsigned: true)
!633 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEEL_TIMES", value: 32, isUnsigned: true)
!634 = !DIEnumerator(name: "PARAM_MAX_ONCE_PEELED_INSNS", value: 33, isUnsigned: true)
!635 = !DIEnumerator(name: "PARAM_MAX_UNROLL_ITERATIONS", value: 34, isUnsigned: true)
!636 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_INSNS", value: 35, isUnsigned: true)
!637 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_LEVEL", value: 36, isUnsigned: true)
!638 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_TO_TRACK", value: 37, isUnsigned: true)
!639 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_COMPUTATION_COST", value: 38, isUnsigned: true)
!640 = !DIEnumerator(name: "PARAM_SMS_MAX_II_FACTOR", value: 39, isUnsigned: true)
!641 = !DIEnumerator(name: "PARAM_SMS_DFA_HISTORY", value: 40, isUnsigned: true)
!642 = !DIEnumerator(name: "PARAM_SMS_LOOP_AVERAGE_COUNT_THRESHOLD", value: 41, isUnsigned: true)
!643 = !DIEnumerator(name: "HOT_BB_COUNT_FRACTION", value: 42, isUnsigned: true)
!644 = !DIEnumerator(name: "HOT_BB_FREQUENCY_FRACTION", value: 43, isUnsigned: true)
!645 = !DIEnumerator(name: "PARAM_ALIGN_THRESHOLD", value: 44, isUnsigned: true)
!646 = !DIEnumerator(name: "PARAM_ALIGN_LOOP_ITERATIONS", value: 45, isUnsigned: true)
!647 = !DIEnumerator(name: "PARAM_MAX_PREDICTED_ITERATIONS", value: 46, isUnsigned: true)
!648 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE_FEEDBACK", value: 47, isUnsigned: true)
!649 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE", value: 48, isUnsigned: true)
!650 = !DIEnumerator(name: "TRACER_MAX_CODE_GROWTH", value: 49, isUnsigned: true)
!651 = !DIEnumerator(name: "TRACER_MIN_BRANCH_RATIO", value: 50, isUnsigned: true)
!652 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY_FEEDBACK", value: 51, isUnsigned: true)
!653 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY", value: 52, isUnsigned: true)
!654 = !DIEnumerator(name: "PARAM_MAX_CROSSJUMP_EDGES", value: 53, isUnsigned: true)
!655 = !DIEnumerator(name: "PARAM_MIN_CROSSJUMP_INSNS", value: 54, isUnsigned: true)
!656 = !DIEnumerator(name: "PARAM_MAX_GROW_COPY_BB_INSNS", value: 55, isUnsigned: true)
!657 = !DIEnumerator(name: "PARAM_MAX_GOTO_DUPLICATION_INSNS", value: 56, isUnsigned: true)
!658 = !DIEnumerator(name: "PARAM_MAX_CSE_PATH_LENGTH", value: 57, isUnsigned: true)
!659 = !DIEnumerator(name: "PARAM_MAX_CSE_INSNS", value: 58, isUnsigned: true)
!660 = !DIEnumerator(name: "PARAM_LIM_EXPENSIVE", value: 59, isUnsigned: true)
!661 = !DIEnumerator(name: "PARAM_IV_CONSIDER_ALL_CANDIDATES_BOUND", value: 60, isUnsigned: true)
!662 = !DIEnumerator(name: "PARAM_IV_MAX_CONSIDERED_USES", value: 61, isUnsigned: true)
!663 = !DIEnumerator(name: "PARAM_IV_ALWAYS_PRUNE_CAND_SET_BOUND", value: 62, isUnsigned: true)
!664 = !DIEnumerator(name: "PARAM_SCEV_MAX_EXPR_SIZE", value: 63, isUnsigned: true)
!665 = !DIEnumerator(name: "PARAM_OMEGA_MAX_VARS", value: 64, isUnsigned: true)
!666 = !DIEnumerator(name: "PARAM_OMEGA_MAX_GEQS", value: 65, isUnsigned: true)
!667 = !DIEnumerator(name: "PARAM_OMEGA_MAX_EQS", value: 66, isUnsigned: true)
!668 = !DIEnumerator(name: "PARAM_OMEGA_MAX_WILD_CARDS", value: 67, isUnsigned: true)
!669 = !DIEnumerator(name: "PARAM_OMEGA_HASH_TABLE_SIZE", value: 68, isUnsigned: true)
!670 = !DIEnumerator(name: "PARAM_OMEGA_MAX_KEYS", value: 69, isUnsigned: true)
!671 = !DIEnumerator(name: "PARAM_OMEGA_ELIMINATE_REDUNDANT_CONSTRAINTS", value: 70, isUnsigned: true)
!672 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIGNMENT_CHECKS", value: 71, isUnsigned: true)
!673 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIAS_CHECKS", value: 72, isUnsigned: true)
!674 = !DIEnumerator(name: "PARAM_MAX_CSELIB_MEMORY_LOCATIONS", value: 73, isUnsigned: true)
!675 = !DIEnumerator(name: "GGC_MIN_EXPAND", value: 74, isUnsigned: true)
!676 = !DIEnumerator(name: "GGC_MIN_HEAPSIZE", value: 75, isUnsigned: true)
!677 = !DIEnumerator(name: "PARAM_MAX_RELOAD_SEARCH_INSNS", value: 76, isUnsigned: true)
!678 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_BLOCKS", value: 77, isUnsigned: true)
!679 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_INSNS", value: 78, isUnsigned: true)
!680 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_BLOCKS", value: 79, isUnsigned: true)
!681 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_INSNS", value: 80, isUnsigned: true)
!682 = !DIEnumerator(name: "PARAM_MIN_SPEC_PROB", value: 81, isUnsigned: true)
!683 = !DIEnumerator(name: "PARAM_MAX_SCHED_EXTEND_REGIONS_ITERS", value: 82, isUnsigned: true)
!684 = !DIEnumerator(name: "PARAM_MAX_SCHED_INSN_CONFLICT_DELAY", value: 83, isUnsigned: true)
!685 = !DIEnumerator(name: "PARAM_SCHED_SPEC_PROB_CUTOFF", value: 84, isUnsigned: true)
!686 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_LOOKAHEAD", value: 85, isUnsigned: true)
!687 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_SCHED_TIMES", value: 86, isUnsigned: true)
!688 = !DIEnumerator(name: "PARAM_SELSCHED_INSNS_TO_RENAME", value: 87, isUnsigned: true)
!689 = !DIEnumerator(name: "PARAM_SCHED_MEM_TRUE_DEP_COST", value: 88, isUnsigned: true)
!690 = !DIEnumerator(name: "PARAM_MAX_LAST_VALUE_RTL", value: 89, isUnsigned: true)
!691 = !DIEnumerator(name: "PARAM_INTEGER_SHARE_LIMIT", value: 90, isUnsigned: true)
!692 = !DIEnumerator(name: "PARAM_MIN_VIRTUAL_MAPPINGS", value: 91, isUnsigned: true)
!693 = !DIEnumerator(name: "PARAM_VIRTUAL_MAPPINGS_TO_SYMS_RATIO", value: 92, isUnsigned: true)
!694 = !DIEnumerator(name: "PARAM_SSP_BUFFER_SIZE", value: 93, isUnsigned: true)
!695 = !DIEnumerator(name: "PARAM_MAX_JUMP_THREAD_DUPLICATION_STMTS", value: 94, isUnsigned: true)
!696 = !DIEnumerator(name: "PARAM_MAX_FIELDS_FOR_FIELD_SENSITIVE", value: 95, isUnsigned: true)
!697 = !DIEnumerator(name: "PARAM_MAX_SCHED_READY_INSNS", value: 96, isUnsigned: true)
!698 = !DIEnumerator(name: "PARAM_PREFETCH_LATENCY", value: 97, isUnsigned: true)
!699 = !DIEnumerator(name: "PARAM_SIMULTANEOUS_PREFETCHES", value: 98, isUnsigned: true)
!700 = !DIEnumerator(name: "PARAM_L1_CACHE_SIZE", value: 99, isUnsigned: true)
!701 = !DIEnumerator(name: "PARAM_L1_CACHE_LINE_SIZE", value: 100, isUnsigned: true)
!702 = !DIEnumerator(name: "PARAM_L2_CACHE_SIZE", value: 101, isUnsigned: true)
!703 = !DIEnumerator(name: "PARAM_USE_CANONICAL_TYPES", value: 102, isUnsigned: true)
!704 = !DIEnumerator(name: "PARAM_MAX_PARTIAL_ANTIC_LENGTH", value: 103, isUnsigned: true)
!705 = !DIEnumerator(name: "PARAM_SCCVN_MAX_SCC_SIZE", value: 104, isUnsigned: true)
!706 = !DIEnumerator(name: "PARAM_IRA_MAX_LOOPS_NUM", value: 105, isUnsigned: true)
!707 = !DIEnumerator(name: "PARAM_IRA_MAX_CONFLICT_TABLE_SIZE", value: 106, isUnsigned: true)
!708 = !DIEnumerator(name: "PARAM_IRA_LOOP_RESERVED_REGS", value: 107, isUnsigned: true)
!709 = !DIEnumerator(name: "PARAM_SWITCH_CONVERSION_BRANCH_RATIO", value: 108, isUnsigned: true)
!710 = !DIEnumerator(name: "PARAM_LOOP_BLOCK_TILE_SIZE", value: 109, isUnsigned: true)
!711 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_NB_SCOP_PARAMS", value: 110, isUnsigned: true)
!712 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_BBS_PER_FUNCTION", value: 111, isUnsigned: true)
!713 = !DIEnumerator(name: "PARAM_LOOP_INVARIANT_MAX_BBS_IN_LOOP", value: 112, isUnsigned: true)
!714 = !DIEnumerator(name: "PARAM_SLP_MAX_INSNS_IN_BB", value: 113, isUnsigned: true)
!715 = !DIEnumerator(name: "PARAM_MIN_INSN_TO_PREFETCH_RATIO", value: 114, isUnsigned: true)
!716 = !DIEnumerator(name: "PARAM_PREFETCH_MIN_INSN_TO_MEM_RATIO", value: 115, isUnsigned: true)
!717 = !DIEnumerator(name: "PARAM_MAX_VARTRACK_SIZE", value: 116, isUnsigned: true)
!718 = !DIEnumerator(name: "PARAM_MIN_NONDEBUG_INSN_UID", value: 117, isUnsigned: true)
!719 = !DIEnumerator(name: "PARAM_IPA_SRA_PTR_GROWTH_FACTOR", value: 118, isUnsigned: true)
!720 = !DIEnumerator(name: "LAST_PARAM", value: 119, isUnsigned: true)
!721 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "debug_counter", file: !722, line: 27, baseType: !7, size: 32, elements: !723)
!722 = !DIFile(filename: "./dbgcnt.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!723 = !{!724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743, !744, !745, !746, !747, !748, !749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760, !761, !762}
!724 = !DIEnumerator(name: "auto_inc_dec", value: 0, isUnsigned: true)
!725 = !DIEnumerator(name: "ccp", value: 1, isUnsigned: true)
!726 = !DIEnumerator(name: "cfg_cleanup", value: 2, isUnsigned: true)
!727 = !DIEnumerator(name: "cse2_move2add", value: 3, isUnsigned: true)
!728 = !DIEnumerator(name: "cprop", value: 4, isUnsigned: true)
!729 = !DIEnumerator(name: "dce", value: 5, isUnsigned: true)
!730 = !DIEnumerator(name: "dce_fast", value: 6, isUnsigned: true)
!731 = !DIEnumerator(name: "dce_ud", value: 7, isUnsigned: true)
!732 = !DIEnumerator(name: "delete_trivial_dead", value: 8, isUnsigned: true)
!733 = !DIEnumerator(name: "df_byte_scan", value: 9, isUnsigned: true)
!734 = !DIEnumerator(name: "dse", value: 10, isUnsigned: true)
!735 = !DIEnumerator(name: "dse1", value: 11, isUnsigned: true)
!736 = !DIEnumerator(name: "dse2", value: 12, isUnsigned: true)
!737 = !DIEnumerator(name: "gcse2_delete", value: 13, isUnsigned: true)
!738 = !DIEnumerator(name: "global_alloc_at_func", value: 14, isUnsigned: true)
!739 = !DIEnumerator(name: "global_alloc_at_reg", value: 15, isUnsigned: true)
!740 = !DIEnumerator(name: "hoist", value: 16, isUnsigned: true)
!741 = !DIEnumerator(name: "ia64_sched2", value: 17, isUnsigned: true)
!742 = !DIEnumerator(name: "if_conversion", value: 18, isUnsigned: true)
!743 = !DIEnumerator(name: "if_after_combine", value: 19, isUnsigned: true)
!744 = !DIEnumerator(name: "if_after_reload", value: 20, isUnsigned: true)
!745 = !DIEnumerator(name: "local_alloc_for_sched", value: 21, isUnsigned: true)
!746 = !DIEnumerator(name: "postreload_cse", value: 22, isUnsigned: true)
!747 = !DIEnumerator(name: "pre", value: 23, isUnsigned: true)
!748 = !DIEnumerator(name: "pre_insn", value: 24, isUnsigned: true)
!749 = !DIEnumerator(name: "treepre_insert", value: 25, isUnsigned: true)
!750 = !DIEnumerator(name: "sched2_func", value: 26, isUnsigned: true)
!751 = !DIEnumerator(name: "sched_block", value: 27, isUnsigned: true)
!752 = !DIEnumerator(name: "sched_func", value: 28, isUnsigned: true)
!753 = !DIEnumerator(name: "sched_insn", value: 29, isUnsigned: true)
!754 = !DIEnumerator(name: "sched_region", value: 30, isUnsigned: true)
!755 = !DIEnumerator(name: "sel_sched_cnt", value: 31, isUnsigned: true)
!756 = !DIEnumerator(name: "sel_sched_region_cnt", value: 32, isUnsigned: true)
!757 = !DIEnumerator(name: "sel_sched_insn_cnt", value: 33, isUnsigned: true)
!758 = !DIEnumerator(name: "sms_sched_loop", value: 34, isUnsigned: true)
!759 = !DIEnumerator(name: "store_motion", value: 35, isUnsigned: true)
!760 = !DIEnumerator(name: "split_for_sched2", value: 36, isUnsigned: true)
!761 = !DIEnumerator(name: "tail_call", value: 37, isUnsigned: true)
!762 = !DIEnumerator(name: "debug_counter_number_of_counters", value: 38, isUnsigned: true)
!763 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "SPEC_TYPES_OFFSETS", file: !398, line: 958, baseType: !7, size: 32, elements: !764)
!764 = !{!765, !766, !767, !768}
!765 = !DIEnumerator(name: "BEGIN_DATA_BITS_OFFSET", value: 0, isUnsigned: true)
!766 = !DIEnumerator(name: "BE_IN_DATA_BITS_OFFSET", value: 6, isUnsigned: true)
!767 = !DIEnumerator(name: "BEGIN_CONTROL_BITS_OFFSET", value: 12, isUnsigned: true)
!768 = !DIEnumerator(name: "BE_IN_CONTROL_BITS_OFFSET", value: 18, isUnsigned: true)
!769 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "df_changeable_flags", file: !770, line: 463, baseType: !7, size: 32, elements: !771)
!770 = !DIFile(filename: "./df.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!771 = !{!772, !773, !774, !775, !776, !777, !778}
!772 = !DIEnumerator(name: "DF_LR_RUN_DCE", value: 1, isUnsigned: true)
!773 = !DIEnumerator(name: "DF_NO_HARD_REGS", value: 2, isUnsigned: true)
!774 = !DIEnumerator(name: "DF_EQ_NOTES", value: 4, isUnsigned: true)
!775 = !DIEnumerator(name: "DF_NO_REGS_EVER_LIVE", value: 8, isUnsigned: true)
!776 = !DIEnumerator(name: "DF_NO_INSN_RESCAN", value: 16, isUnsigned: true)
!777 = !DIEnumerator(name: "DF_DEFER_INSN_RESCAN", value: 32, isUnsigned: true)
!778 = !DIEnumerator(name: "DF_VERIFY_SCHEDULED", value: 64, isUnsigned: true)
!779 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "df_chain_flags", file: !770, line: 456, baseType: !7, size: 32, elements: !780)
!780 = !{!781, !782}
!781 = !DIEnumerator(name: "DF_DU_CHAIN", value: 1, isUnsigned: true)
!782 = !DIEnumerator(name: "DF_UD_CHAIN", value: 2, isUnsigned: true)
!783 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "reg_class", file: !166, line: 1188, baseType: !7, size: 32, elements: !784)
!784 = !{!785, !786, !787, !788, !789, !790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808, !809, !810, !811, !812}
!785 = !DIEnumerator(name: "NO_REGS", value: 0, isUnsigned: true)
!786 = !DIEnumerator(name: "AREG", value: 1, isUnsigned: true)
!787 = !DIEnumerator(name: "DREG", value: 2, isUnsigned: true)
!788 = !DIEnumerator(name: "CREG", value: 3, isUnsigned: true)
!789 = !DIEnumerator(name: "BREG", value: 4, isUnsigned: true)
!790 = !DIEnumerator(name: "SIREG", value: 5, isUnsigned: true)
!791 = !DIEnumerator(name: "DIREG", value: 6, isUnsigned: true)
!792 = !DIEnumerator(name: "AD_REGS", value: 7, isUnsigned: true)
!793 = !DIEnumerator(name: "CLOBBERED_REGS", value: 8, isUnsigned: true)
!794 = !DIEnumerator(name: "Q_REGS", value: 9, isUnsigned: true)
!795 = !DIEnumerator(name: "NON_Q_REGS", value: 10, isUnsigned: true)
!796 = !DIEnumerator(name: "INDEX_REGS", value: 11, isUnsigned: true)
!797 = !DIEnumerator(name: "LEGACY_REGS", value: 12, isUnsigned: true)
!798 = !DIEnumerator(name: "GENERAL_REGS", value: 13, isUnsigned: true)
!799 = !DIEnumerator(name: "FP_TOP_REG", value: 14, isUnsigned: true)
!800 = !DIEnumerator(name: "FP_SECOND_REG", value: 15, isUnsigned: true)
!801 = !DIEnumerator(name: "FLOAT_REGS", value: 16, isUnsigned: true)
!802 = !DIEnumerator(name: "SSE_FIRST_REG", value: 17, isUnsigned: true)
!803 = !DIEnumerator(name: "SSE_REGS", value: 18, isUnsigned: true)
!804 = !DIEnumerator(name: "MMX_REGS", value: 19, isUnsigned: true)
!805 = !DIEnumerator(name: "FP_TOP_SSE_REGS", value: 20, isUnsigned: true)
!806 = !DIEnumerator(name: "FP_SECOND_SSE_REGS", value: 21, isUnsigned: true)
!807 = !DIEnumerator(name: "FLOAT_SSE_REGS", value: 22, isUnsigned: true)
!808 = !DIEnumerator(name: "FLOAT_INT_REGS", value: 23, isUnsigned: true)
!809 = !DIEnumerator(name: "INT_SSE_REGS", value: 24, isUnsigned: true)
!810 = !DIEnumerator(name: "FLOAT_INT_SSE_REGS", value: 25, isUnsigned: true)
!811 = !DIEnumerator(name: "ALL_REGS", value: 26, isUnsigned: true)
!812 = !DIEnumerator(name: "LIM_REG_CLASSES", value: 27, isUnsigned: true)
!813 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "SCHED_FLAGS", file: !398, line: 1029, baseType: !7, size: 32, elements: !814)
!814 = !{!815, !816, !817, !818, !819, !820}
!815 = !DIEnumerator(name: "USE_DEPS_LIST", value: 1, isUnsigned: true)
!816 = !DIEnumerator(name: "DO_SPECULATION", value: 2, isUnsigned: true)
!817 = !DIEnumerator(name: "SCHED_RGN", value: 4, isUnsigned: true)
!818 = !DIEnumerator(name: "SCHED_EBB", value: 8, isUnsigned: true)
!819 = !DIEnumerator(name: "NEW_BBS", value: 16, isUnsigned: true)
!820 = !DIEnumerator(name: "SEL_SCHED", value: 32, isUnsigned: true)
!821 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "bb_flags", file: !155, line: 295, baseType: !7, size: 32, elements: !822)
!822 = !{!823, !824, !825, !826, !827, !828, !829, !830, !831, !832, !833, !834}
!823 = !DIEnumerator(name: "BB_NEW", value: 1, isUnsigned: true)
!824 = !DIEnumerator(name: "BB_REACHABLE", value: 2, isUnsigned: true)
!825 = !DIEnumerator(name: "BB_IRREDUCIBLE_LOOP", value: 4, isUnsigned: true)
!826 = !DIEnumerator(name: "BB_SUPERBLOCK", value: 8, isUnsigned: true)
!827 = !DIEnumerator(name: "BB_DISABLE_SCHEDULE", value: 16, isUnsigned: true)
!828 = !DIEnumerator(name: "BB_HOT_PARTITION", value: 32, isUnsigned: true)
!829 = !DIEnumerator(name: "BB_COLD_PARTITION", value: 64, isUnsigned: true)
!830 = !DIEnumerator(name: "BB_DUPLICATED", value: 128, isUnsigned: true)
!831 = !DIEnumerator(name: "BB_NON_LOCAL_GOTO_TARGET", value: 256, isUnsigned: true)
!832 = !DIEnumerator(name: "BB_RTL", value: 512, isUnsigned: true)
!833 = !DIEnumerator(name: "BB_FORWARDER_BLOCK", value: 1024, isUnsigned: true)
!834 = !DIEnumerator(name: "BB_NONTHREADABLE_BLOCK", value: 2048, isUnsigned: true)
!835 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "INSN_TRAP_CLASS", file: !398, line: 1121, baseType: !7, size: 32, elements: !836)
!836 = !{!837, !838, !839, !840, !841, !842}
!837 = !DIEnumerator(name: "TRAP_FREE", value: 0, isUnsigned: true)
!838 = !DIEnumerator(name: "IFREE", value: 1, isUnsigned: true)
!839 = !DIEnumerator(name: "PFREE_CANDIDATE", value: 2, isUnsigned: true)
!840 = !DIEnumerator(name: "PRISKY_CANDIDATE", value: 3, isUnsigned: true)
!841 = !DIEnumerator(name: "IRISKY", value: 4, isUnsigned: true)
!842 = !DIEnumerator(name: "TRAP_RISKY", value: 5, isUnsigned: true)
!843 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rtx_class", file: !406, line: 60, baseType: !7, size: 32, elements: !844)
!844 = !{!845, !846, !847, !848, !849, !850, !851, !852, !853, !854, !855, !856, !857}
!845 = !DIEnumerator(name: "RTX_COMPARE", value: 0, isUnsigned: true)
!846 = !DIEnumerator(name: "RTX_COMM_COMPARE", value: 1, isUnsigned: true)
!847 = !DIEnumerator(name: "RTX_BIN_ARITH", value: 2, isUnsigned: true)
!848 = !DIEnumerator(name: "RTX_COMM_ARITH", value: 3, isUnsigned: true)
!849 = !DIEnumerator(name: "RTX_UNARY", value: 4, isUnsigned: true)
!850 = !DIEnumerator(name: "RTX_EXTRA", value: 5, isUnsigned: true)
!851 = !DIEnumerator(name: "RTX_MATCH", value: 6, isUnsigned: true)
!852 = !DIEnumerator(name: "RTX_INSN", value: 7, isUnsigned: true)
!853 = !DIEnumerator(name: "RTX_OBJ", value: 8, isUnsigned: true)
!854 = !DIEnumerator(name: "RTX_CONST_OBJ", value: 9, isUnsigned: true)
!855 = !DIEnumerator(name: "RTX_TERNARY", value: 10, isUnsigned: true)
!856 = !DIEnumerator(name: "RTX_BITFIELD_OPS", value: 11, isUnsigned: true)
!857 = !DIEnumerator(name: "RTX_AUTOINC", value: 12, isUnsigned: true)
!858 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "SPEC_SCHED_FLAGS", file: !398, line: 1044, baseType: !7, size: 32, elements: !859)
!859 = !{!860, !861, !862, !863}
!860 = !DIEnumerator(name: "COUNT_SPEC_IN_CRITICAL_PATH", value: 1, isUnsigned: true)
!861 = !DIEnumerator(name: "PREFER_NON_DATA_SPEC", value: 2, isUnsigned: true)
!862 = !DIEnumerator(name: "PREFER_NON_CONTROL_SPEC", value: 4, isUnsigned: true)
!863 = !DIEnumerator(name: "SEL_SCHED_SPEC_DONT_CHECK_CONTROL", value: 8, isUnsigned: true)
!864 = !{!865, !866, !867, !5, !440, !405, !582, !2098, !2099, !2100, !2101, !963, !2102, !2111, !7, !2113, !2115, !2120, !1406, !2125, !2137}
!865 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!866 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!867 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !868, line: 50, baseType: !869)
!868 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!869 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !870, size: 64)
!870 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !406, line: 240, size: 384, elements: !871)
!871 = !{!872, !873, !874, !875, !876, !877, !878, !879, !880, !881, !882}
!872 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !870, file: !406, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!873 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !870, file: !406, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!874 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !870, file: !406, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!875 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !870, file: !406, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!876 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !870, file: !406, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!877 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !870, file: !406, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!878 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !870, file: !406, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!879 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !870, file: !406, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!880 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !870, file: !406, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!881 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !870, file: !406, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!882 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !870, file: !406, line: 321, baseType: !883, size: 320, offset: 64)
!883 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !406, line: 315, size: 320, elements: !884)
!884 = !{!885, !2033, !2035, !2096, !2097}
!885 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !883, file: !406, line: 316, baseType: !886, size: 64)
!886 = !DICompositeType(tag: DW_TAG_array_type, baseType: !887, size: 64, elements: !905)
!887 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !406, line: 183, baseType: !888)
!888 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !406, line: 166, size: 64, elements: !889)
!889 = !{!890, !891, !892, !896, !897, !907, !908, !920, !923, !986, !2011, !2012, !2023, !2030}
!890 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !888, file: !406, line: 168, baseType: !865, size: 32)
!891 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !888, file: !406, line: 169, baseType: !7, size: 32)
!892 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !888, file: !406, line: 170, baseType: !893, size: 64)
!893 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !894, size: 64)
!894 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !895)
!895 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!896 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !888, file: !406, line: 171, baseType: !867, size: 64)
!897 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !888, file: !406, line: 172, baseType: !898, size: 64)
!898 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !868, line: 53, baseType: !899)
!899 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !900, size: 64)
!900 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !406, line: 359, size: 128, elements: !901)
!901 = !{!902, !903}
!902 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !900, file: !406, line: 360, baseType: !865, size: 32)
!903 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !900, file: !406, line: 361, baseType: !904, size: 64, offset: 64)
!904 = !DICompositeType(tag: DW_TAG_array_type, baseType: !867, size: 64, elements: !905)
!905 = !{!906}
!906 = !DISubrange(count: 1)
!907 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !888, file: !406, line: 173, baseType: !5, size: 32)
!908 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !888, file: !406, line: 174, baseType: !909, size: 32)
!909 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !406, line: 133, baseType: !910)
!910 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !406, line: 115, size: 32, elements: !911)
!911 = !{!912, !913, !914, !915, !916, !917, !918, !919}
!912 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !910, file: !406, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!913 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !910, file: !406, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!914 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !910, file: !406, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!915 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !910, file: !406, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!916 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !910, file: !406, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!917 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !910, file: !406, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!918 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !910, file: !406, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!919 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !910, file: !406, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!920 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !888, file: !406, line: 175, baseType: !921, size: 64)
!921 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !922, size: 64)
!922 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !406, line: 175, flags: DIFlagFwdDecl)
!923 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !888, file: !406, line: 176, baseType: !924, size: 64)
!924 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !925, size: 64)
!925 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !926, line: 75, size: 256, elements: !927)
!926 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!927 = !{!928, !943, !944, !945}
!928 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !925, file: !926, line: 76, baseType: !929, size: 64)
!929 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !930, size: 64)
!930 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !926, line: 68, baseType: !931)
!931 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !926, line: 63, size: 320, elements: !932)
!932 = !{!933, !935, !936, !937}
!933 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !931, file: !926, line: 64, baseType: !934, size: 64)
!934 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !931, size: 64)
!935 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !931, file: !926, line: 65, baseType: !934, size: 64, offset: 64)
!936 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !931, file: !926, line: 66, baseType: !7, size: 32, offset: 128)
!937 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !931, file: !926, line: 67, baseType: !938, size: 128, offset: 192)
!938 = !DICompositeType(tag: DW_TAG_array_type, baseType: !939, size: 128, elements: !941)
!939 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !926, line: 29, baseType: !940)
!940 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!941 = !{!942}
!942 = !DISubrange(count: 2)
!943 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !925, file: !926, line: 77, baseType: !929, size: 64, offset: 64)
!944 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !925, file: !926, line: 78, baseType: !7, size: 32, offset: 128)
!945 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !925, file: !926, line: 79, baseType: !946, size: 64, offset: 192)
!946 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !947, size: 64)
!947 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !926, line: 49, baseType: !948)
!948 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !926, line: 45, size: 832, elements: !949)
!949 = !{!950, !951, !952}
!950 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !948, file: !926, line: 46, baseType: !934, size: 64)
!951 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !948, file: !926, line: 47, baseType: !924, size: 64, offset: 64)
!952 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !948, file: !926, line: 48, baseType: !953, size: 704, offset: 128)
!953 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !954, line: 164, size: 704, elements: !955)
!954 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!955 = !{!956, !958, !969, !970, !971, !972, !973, !974, !978, !982, !983, !984, !985}
!956 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !953, file: !954, line: 166, baseType: !957, size: 64)
!957 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!958 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !953, file: !954, line: 167, baseType: !959, size: 64, offset: 64)
!959 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !960, size: 64)
!960 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !954, line: 157, size: 192, elements: !961)
!961 = !{!962, !964, !965}
!962 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !960, file: !954, line: 159, baseType: !963, size: 64)
!963 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !895, size: 64)
!964 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !960, file: !954, line: 160, baseType: !959, size: 64, offset: 64)
!965 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !960, file: !954, line: 161, baseType: !966, size: 32, offset: 128)
!966 = !DICompositeType(tag: DW_TAG_array_type, baseType: !895, size: 32, elements: !967)
!967 = !{!968}
!968 = !DISubrange(count: 4)
!969 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !953, file: !954, line: 168, baseType: !963, size: 64, offset: 128)
!970 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !953, file: !954, line: 169, baseType: !963, size: 64, offset: 192)
!971 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !953, file: !954, line: 170, baseType: !963, size: 64, offset: 256)
!972 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !953, file: !954, line: 171, baseType: !957, size: 64, offset: 320)
!973 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !953, file: !954, line: 172, baseType: !865, size: 32, offset: 384)
!974 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !953, file: !954, line: 176, baseType: !975, size: 64, offset: 448)
!975 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !976, size: 64)
!976 = !DISubroutineType(types: !977)
!977 = !{!959, !866, !957}
!978 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !953, file: !954, line: 177, baseType: !979, size: 64, offset: 512)
!979 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !980, size: 64)
!980 = !DISubroutineType(types: !981)
!981 = !{null, !866, !959}
!982 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !953, file: !954, line: 178, baseType: !866, size: 64, offset: 576)
!983 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !953, file: !954, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!984 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !953, file: !954, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!985 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !953, file: !954, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!986 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !888, file: !406, line: 177, baseType: !987, size: 64)
!987 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !868, line: 56, baseType: !988)
!988 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !989, size: 64)
!989 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !171, line: 3371, size: 1792, elements: !990)
!990 = !{!991, !1024, !1030, !1041, !1060, !1071, !1076, !1083, !1089, !1103, !1115, !1153, !1158, !1186, !1194, !1195, !1200, !1209, !1215, !1220, !1224, !1228, !1650, !1699, !1705, !1711, !1718, !1741, !1755, !1772, !1784, !1806, !1821, !1993}
!991 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !989, file: !171, line: 3372, baseType: !992, size: 64)
!992 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !171, line: 360, size: 64, elements: !993)
!993 = !{!994, !995, !996, !997, !998, !999, !1000, !1001, !1002, !1003, !1004, !1005, !1006, !1007, !1008, !1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018, !1019, !1020, !1021, !1022, !1023}
!994 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !992, file: !171, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!995 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !992, file: !171, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!996 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !992, file: !171, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!997 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !992, file: !171, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!998 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !992, file: !171, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!999 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !992, file: !171, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1000 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !992, file: !171, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1001 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !992, file: !171, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1002 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !992, file: !171, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!1003 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !992, file: !171, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1004 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !992, file: !171, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1005 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !992, file: !171, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1006 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !992, file: !171, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1007 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !992, file: !171, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1008 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !992, file: !171, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1009 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !992, file: !171, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1010 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !992, file: !171, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1011 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !992, file: !171, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!1012 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !992, file: !171, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!1013 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !992, file: !171, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!1014 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !992, file: !171, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!1015 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !992, file: !171, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!1016 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !992, file: !171, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!1017 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !992, file: !171, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!1018 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !992, file: !171, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!1019 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !992, file: !171, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!1020 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !992, file: !171, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!1021 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !992, file: !171, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!1022 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !992, file: !171, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!1023 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !992, file: !171, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!1024 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !989, file: !171, line: 3373, baseType: !1025, size: 192)
!1025 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !171, line: 402, size: 192, elements: !1026)
!1026 = !{!1027, !1028, !1029}
!1027 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1025, file: !171, line: 403, baseType: !992, size: 64)
!1028 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !1025, file: !171, line: 404, baseType: !987, size: 64, offset: 64)
!1029 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1025, file: !171, line: 405, baseType: !987, size: 64, offset: 128)
!1030 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !989, file: !171, line: 3374, baseType: !1031, size: 320)
!1031 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !171, line: 1384, size: 320, elements: !1032)
!1032 = !{!1033, !1034}
!1033 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1031, file: !171, line: 1385, baseType: !1025, size: 192)
!1034 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1031, file: !171, line: 1386, baseType: !1035, size: 128, offset: 192)
!1035 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !1036, line: 58, baseType: !1037)
!1036 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1037 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1036, line: 54, size: 128, elements: !1038)
!1038 = !{!1039, !1040}
!1039 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1037, file: !1036, line: 56, baseType: !940, size: 64)
!1040 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1037, file: !1036, line: 57, baseType: !957, size: 64, offset: 64)
!1041 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !989, file: !171, line: 3375, baseType: !1042, size: 256)
!1042 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !171, line: 1397, size: 256, elements: !1043)
!1043 = !{!1044, !1045}
!1044 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1042, file: !171, line: 1398, baseType: !1025, size: 192)
!1045 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !1042, file: !171, line: 1399, baseType: !1046, size: 64, offset: 192)
!1046 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1047, size: 64)
!1047 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !1048, line: 52, size: 256, elements: !1049)
!1048 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1049 = !{!1050, !1051, !1052, !1053, !1054, !1055, !1056}
!1050 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !1047, file: !1048, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1051 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !1047, file: !1048, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1052 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !1047, file: !1048, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1053 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !1047, file: !1048, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1054 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1047, file: !1048, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1055 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !1047, file: !1048, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1056 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !1047, file: !1048, line: 62, baseType: !1057, size: 192, offset: 64)
!1057 = !DICompositeType(tag: DW_TAG_array_type, baseType: !940, size: 192, elements: !1058)
!1058 = !{!1059}
!1059 = !DISubrange(count: 3)
!1060 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !989, file: !171, line: 3376, baseType: !1061, size: 256)
!1061 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !171, line: 1408, size: 256, elements: !1062)
!1062 = !{!1063, !1064}
!1063 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1061, file: !171, line: 1409, baseType: !1025, size: 192)
!1064 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !1061, file: !171, line: 1410, baseType: !1065, size: 64, offset: 192)
!1065 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1066, size: 64)
!1066 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !1067, line: 27, size: 192, elements: !1068)
!1067 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1068 = !{!1069, !1070}
!1069 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1066, file: !1067, line: 29, baseType: !1035, size: 128)
!1070 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1066, file: !1067, line: 30, baseType: !5, size: 32, offset: 128)
!1071 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !989, file: !171, line: 3377, baseType: !1072, size: 256)
!1072 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !171, line: 1437, size: 256, elements: !1073)
!1073 = !{!1074, !1075}
!1074 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1072, file: !171, line: 1438, baseType: !1025, size: 192)
!1075 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1072, file: !171, line: 1439, baseType: !987, size: 64, offset: 192)
!1076 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !989, file: !171, line: 3378, baseType: !1077, size: 256)
!1077 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !171, line: 1418, size: 256, elements: !1078)
!1078 = !{!1079, !1080, !1081}
!1079 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1077, file: !171, line: 1419, baseType: !1025, size: 192)
!1080 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1077, file: !171, line: 1420, baseType: !865, size: 32, offset: 192)
!1081 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1077, file: !171, line: 1421, baseType: !1082, size: 8, offset: 224)
!1082 = !DICompositeType(tag: DW_TAG_array_type, baseType: !895, size: 8, elements: !905)
!1083 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !989, file: !171, line: 3379, baseType: !1084, size: 320)
!1084 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !171, line: 1428, size: 320, elements: !1085)
!1085 = !{!1086, !1087, !1088}
!1086 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1084, file: !171, line: 1429, baseType: !1025, size: 192)
!1087 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !1084, file: !171, line: 1430, baseType: !987, size: 64, offset: 192)
!1088 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !1084, file: !171, line: 1431, baseType: !987, size: 64, offset: 256)
!1089 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !989, file: !171, line: 3380, baseType: !1090, size: 320)
!1090 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !171, line: 1460, size: 320, elements: !1091)
!1091 = !{!1092, !1093}
!1092 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1090, file: !171, line: 1461, baseType: !1025, size: 192)
!1093 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1090, file: !171, line: 1462, baseType: !1094, size: 128, offset: 192)
!1094 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !1095, line: 31, size: 128, elements: !1096)
!1095 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1096 = !{!1097, !1101, !1102}
!1097 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1094, file: !1095, line: 32, baseType: !1098, size: 64)
!1098 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1099, size: 64)
!1099 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1100)
!1100 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!1101 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1094, file: !1095, line: 33, baseType: !7, size: 32, offset: 64)
!1102 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !1094, file: !1095, line: 34, baseType: !7, size: 32, offset: 96)
!1103 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !989, file: !171, line: 3381, baseType: !1104, size: 384)
!1104 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !171, line: 2507, size: 384, elements: !1105)
!1105 = !{!1106, !1107, !1112, !1113, !1114}
!1106 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1104, file: !171, line: 2508, baseType: !1025, size: 192)
!1107 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1104, file: !171, line: 2509, baseType: !1108, size: 32, offset: 192)
!1108 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !1109, line: 58, baseType: !1110)
!1109 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1110 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !1111, line: 44, baseType: !7)
!1111 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1112 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1104, file: !171, line: 2510, baseType: !7, size: 32, offset: 224)
!1113 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1104, file: !171, line: 2511, baseType: !987, size: 64, offset: 256)
!1114 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1104, file: !171, line: 2512, baseType: !987, size: 64, offset: 320)
!1115 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !989, file: !171, line: 3382, baseType: !1116, size: 896)
!1116 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !171, line: 2652, size: 896, elements: !1117)
!1117 = !{!1118, !1119, !1120, !1121, !1122, !1123, !1124, !1125, !1126, !1127, !1128, !1129, !1130, !1131, !1132, !1133, !1134, !1135, !1136, !1137, !1138, !1139, !1140, !1141, !1142, !1143, !1144, !1145, !1146, !1147, !1148, !1149, !1150}
!1118 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1116, file: !171, line: 2653, baseType: !1104, size: 384)
!1119 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1116, file: !171, line: 2654, baseType: !987, size: 64, offset: 384)
!1120 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1116, file: !171, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!1121 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !1116, file: !171, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!1122 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !1116, file: !171, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!1123 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !1116, file: !171, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!1124 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1116, file: !171, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!1125 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !1116, file: !171, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!1126 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !1116, file: !171, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!1127 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !1116, file: !171, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!1128 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1116, file: !171, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!1129 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1116, file: !171, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!1130 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1116, file: !171, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!1131 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1116, file: !171, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!1132 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1116, file: !171, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!1133 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1116, file: !171, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!1134 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1116, file: !171, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!1135 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !1116, file: !171, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!1136 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !1116, file: !171, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!1137 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !1116, file: !171, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!1138 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !1116, file: !171, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!1139 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !1116, file: !171, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!1140 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !1116, file: !171, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!1141 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !1116, file: !171, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!1142 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !1116, file: !171, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!1143 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !1116, file: !171, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!1144 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !1116, file: !171, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!1145 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1116, file: !171, line: 2703, baseType: !7, size: 32, offset: 512)
!1146 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1116, file: !171, line: 2705, baseType: !987, size: 64, offset: 576)
!1147 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1116, file: !171, line: 2706, baseType: !987, size: 64, offset: 640)
!1148 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1116, file: !171, line: 2707, baseType: !987, size: 64, offset: 704)
!1149 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1116, file: !171, line: 2708, baseType: !987, size: 64, offset: 768)
!1150 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1116, file: !171, line: 2711, baseType: !1151, size: 64, offset: 832)
!1151 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1152, size: 64)
!1152 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !171, line: 2711, flags: DIFlagFwdDecl)
!1153 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !989, file: !171, line: 3383, baseType: !1154, size: 960)
!1154 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !171, line: 2756, size: 960, elements: !1155)
!1155 = !{!1156, !1157}
!1156 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1154, file: !171, line: 2757, baseType: !1116, size: 896)
!1157 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1154, file: !171, line: 2758, baseType: !867, size: 64, offset: 896)
!1158 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !989, file: !171, line: 3384, baseType: !1159, size: 1472)
!1159 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !171, line: 3114, size: 1472, elements: !1160)
!1160 = !{!1161, !1182, !1183, !1184, !1185}
!1161 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1159, file: !171, line: 3115, baseType: !1162, size: 1216)
!1162 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !171, line: 2984, size: 1216, elements: !1163)
!1163 = !{!1164, !1165, !1166, !1167, !1168, !1169, !1170, !1171, !1172, !1173, !1174, !1175, !1176, !1177, !1178, !1179, !1180, !1181}
!1164 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1162, file: !171, line: 2985, baseType: !1154, size: 960)
!1165 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !1162, file: !171, line: 2986, baseType: !987, size: 64, offset: 960)
!1166 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !1162, file: !171, line: 2987, baseType: !987, size: 64, offset: 1024)
!1167 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !1162, file: !171, line: 2988, baseType: !987, size: 64, offset: 1088)
!1168 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !1162, file: !171, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!1169 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !1162, file: !171, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!1170 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !1162, file: !171, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!1171 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !1162, file: !171, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!1172 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !1162, file: !171, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!1173 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !1162, file: !171, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!1174 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !1162, file: !171, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!1175 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !1162, file: !171, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!1176 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !1162, file: !171, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!1177 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !1162, file: !171, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!1178 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !1162, file: !171, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!1179 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !1162, file: !171, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!1180 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !1162, file: !171, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!1181 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !1162, file: !171, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!1182 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !1159, file: !171, line: 3117, baseType: !987, size: 64, offset: 1216)
!1183 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !1159, file: !171, line: 3119, baseType: !987, size: 64, offset: 1280)
!1184 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1159, file: !171, line: 3121, baseType: !987, size: 64, offset: 1344)
!1185 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !1159, file: !171, line: 3123, baseType: !987, size: 64, offset: 1408)
!1186 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !989, file: !171, line: 3385, baseType: !1187, size: 1088)
!1187 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !171, line: 2874, size: 1088, elements: !1188)
!1188 = !{!1189, !1190, !1191}
!1189 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1187, file: !171, line: 2875, baseType: !1154, size: 960)
!1190 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !1187, file: !171, line: 2876, baseType: !867, size: 64, offset: 960)
!1191 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1187, file: !171, line: 2877, baseType: !1192, size: 64, offset: 1024)
!1192 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1193, size: 64)
!1193 = !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !171, line: 2856, flags: DIFlagFwdDecl)
!1194 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !989, file: !171, line: 3386, baseType: !1162, size: 1216)
!1195 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !989, file: !171, line: 3387, baseType: !1196, size: 1280)
!1196 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !171, line: 3093, size: 1280, elements: !1197)
!1197 = !{!1198, !1199}
!1198 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1196, file: !171, line: 3094, baseType: !1162, size: 1216)
!1199 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1196, file: !171, line: 3095, baseType: !1192, size: 64, offset: 1216)
!1200 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !989, file: !171, line: 3388, baseType: !1201, size: 1216)
!1201 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !171, line: 2824, size: 1216, elements: !1202)
!1202 = !{!1203, !1204, !1205, !1206, !1207, !1208}
!1203 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1201, file: !171, line: 2825, baseType: !1116, size: 896)
!1204 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1201, file: !171, line: 2827, baseType: !987, size: 64, offset: 896)
!1205 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !1201, file: !171, line: 2828, baseType: !987, size: 64, offset: 960)
!1206 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !1201, file: !171, line: 2829, baseType: !987, size: 64, offset: 1024)
!1207 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !1201, file: !171, line: 2830, baseType: !987, size: 64, offset: 1088)
!1208 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !1201, file: !171, line: 2831, baseType: !987, size: 64, offset: 1152)
!1209 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !989, file: !171, line: 3389, baseType: !1210, size: 1024)
!1210 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !171, line: 2850, size: 1024, elements: !1211)
!1211 = !{!1212, !1213, !1214}
!1212 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1210, file: !171, line: 2851, baseType: !1154, size: 960)
!1213 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !1210, file: !171, line: 2852, baseType: !865, size: 32, offset: 960)
!1214 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !1210, file: !171, line: 2853, baseType: !865, size: 32, offset: 992)
!1215 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !989, file: !171, line: 3390, baseType: !1216, size: 1024)
!1216 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !171, line: 2857, size: 1024, elements: !1217)
!1217 = !{!1218, !1219}
!1218 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1216, file: !171, line: 2858, baseType: !1154, size: 960)
!1219 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1216, file: !171, line: 2859, baseType: !1192, size: 64, offset: 960)
!1220 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !989, file: !171, line: 3391, baseType: !1221, size: 960)
!1221 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !171, line: 2862, size: 960, elements: !1222)
!1222 = !{!1223}
!1223 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1221, file: !171, line: 2863, baseType: !1154, size: 960)
!1224 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !989, file: !171, line: 3392, baseType: !1225, size: 1472)
!1225 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !171, line: 3304, size: 1472, elements: !1226)
!1226 = !{!1227}
!1227 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1225, file: !171, line: 3305, baseType: !1159, size: 1472)
!1228 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !989, file: !171, line: 3393, baseType: !1229, size: 1792)
!1229 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !171, line: 3248, size: 1792, elements: !1230)
!1230 = !{!1231, !1232, !1629, !1630, !1631, !1632, !1633, !1634, !1635, !1636, !1637, !1638, !1639, !1640, !1641, !1642, !1643, !1644, !1645, !1646, !1647, !1648, !1649}
!1231 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1229, file: !171, line: 3249, baseType: !1159, size: 1472)
!1232 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !1229, file: !171, line: 3251, baseType: !1233, size: 64, offset: 1472)
!1233 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1234, size: 64)
!1234 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !1235, line: 463, size: 1152, elements: !1236)
!1235 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1236 = !{!1237, !1401, !1561, !1562, !1565, !1573, !1574, !1575, !1576, !1577, !1578, !1602, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628}
!1237 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !1234, file: !1235, line: 464, baseType: !1238, size: 64)
!1238 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1239, size: 64)
!1239 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !135, line: 194, size: 384, elements: !1240)
!1240 = !{!1241, !1290, !1303, !1317, !1369, !1382}
!1241 = !DIDerivedType(tag: DW_TAG_member, name: "region_tree", scope: !1239, file: !135, line: 197, baseType: !1242, size: 64)
!1242 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_region", file: !135, line: 182, baseType: !1243)
!1243 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1244, size: 64)
!1244 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_d", file: !135, line: 116, size: 704, elements: !1245)
!1245 = !{!1246, !1247, !1248, !1249, !1250, !1251, !1278, !1287, !1288, !1289}
!1246 = !DIDerivedType(tag: DW_TAG_member, name: "outer", scope: !1244, file: !135, line: 119, baseType: !1243, size: 64)
!1247 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !1244, file: !135, line: 122, baseType: !1243, size: 64, offset: 64)
!1248 = !DIDerivedType(tag: DW_TAG_member, name: "next_peer", scope: !1244, file: !135, line: 123, baseType: !1243, size: 64, offset: 128)
!1249 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1244, file: !135, line: 126, baseType: !865, size: 32, offset: 192)
!1250 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1244, file: !135, line: 129, baseType: !134, size: 32, offset: 224)
!1251 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1244, file: !135, line: 165, baseType: !1252, size: 192, offset: 256)
!1252 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_region_u", file: !135, line: 132, size: 192, elements: !1253)
!1253 = !{!1254, !1267, !1273}
!1254 = !DIDerivedType(tag: DW_TAG_member, name: "eh_try", scope: !1252, file: !135, line: 137, baseType: !1255, size: 128)
!1255 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_try", file: !135, line: 133, size: 128, elements: !1256)
!1256 = !{!1257, !1266}
!1257 = !DIDerivedType(tag: DW_TAG_member, name: "first_catch", scope: !1255, file: !135, line: 135, baseType: !1258, size: 64)
!1258 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1259, size: 64)
!1259 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_catch_d", file: !135, line: 93, size: 320, elements: !1260)
!1260 = !{!1261, !1262, !1263, !1264, !1265}
!1261 = !DIDerivedType(tag: DW_TAG_member, name: "next_catch", scope: !1259, file: !135, line: 96, baseType: !1258, size: 64)
!1262 = !DIDerivedType(tag: DW_TAG_member, name: "prev_catch", scope: !1259, file: !135, line: 97, baseType: !1258, size: 64, offset: 64)
!1263 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !1259, file: !135, line: 101, baseType: !987, size: 64, offset: 128)
!1264 = !DIDerivedType(tag: DW_TAG_member, name: "filter_list", scope: !1259, file: !135, line: 106, baseType: !987, size: 64, offset: 192)
!1265 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !1259, file: !135, line: 111, baseType: !987, size: 64, offset: 256)
!1266 = !DIDerivedType(tag: DW_TAG_member, name: "last_catch", scope: !1255, file: !135, line: 136, baseType: !1258, size: 64, offset: 64)
!1267 = !DIDerivedType(tag: DW_TAG_member, name: "allowed", scope: !1252, file: !135, line: 151, baseType: !1268, size: 192)
!1268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_allowed", file: !135, line: 139, size: 192, elements: !1269)
!1269 = !{!1270, !1271, !1272}
!1270 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !1268, file: !135, line: 141, baseType: !987, size: 64)
!1271 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !1268, file: !135, line: 145, baseType: !987, size: 64, offset: 64)
!1272 = !DIDerivedType(tag: DW_TAG_member, name: "filter", scope: !1268, file: !135, line: 150, baseType: !865, size: 32, offset: 128)
!1273 = !DIDerivedType(tag: DW_TAG_member, name: "must_not_throw", scope: !1252, file: !135, line: 164, baseType: !1274, size: 128)
!1274 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_must_not_throw", file: !135, line: 153, size: 128, elements: !1275)
!1275 = !{!1276, !1277}
!1276 = !DIDerivedType(tag: DW_TAG_member, name: "failure_decl", scope: !1274, file: !135, line: 161, baseType: !987, size: 64)
!1277 = !DIDerivedType(tag: DW_TAG_member, name: "failure_loc", scope: !1274, file: !135, line: 163, baseType: !1108, size: 32, offset: 64)
!1278 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pads", scope: !1244, file: !135, line: 168, baseType: !1279, size: 64, offset: 448)
!1279 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1280, size: 64)
!1280 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_landing_pad_d", file: !135, line: 67, size: 320, elements: !1281)
!1281 = !{!1282, !1283, !1284, !1285, !1286}
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "next_lp", scope: !1280, file: !135, line: 70, baseType: !1279, size: 64)
!1283 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !1280, file: !135, line: 73, baseType: !1243, size: 64, offset: 64)
!1284 = !DIDerivedType(tag: DW_TAG_member, name: "post_landing_pad", scope: !1280, file: !135, line: 78, baseType: !987, size: 64, offset: 128)
!1285 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pad", scope: !1280, file: !135, line: 85, baseType: !867, size: 64, offset: 192)
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1280, file: !135, line: 88, baseType: !865, size: 32, offset: 256)
!1287 = !DIDerivedType(tag: DW_TAG_member, name: "exc_ptr_reg", scope: !1244, file: !135, line: 173, baseType: !867, size: 64, offset: 512)
!1288 = !DIDerivedType(tag: DW_TAG_member, name: "filter_reg", scope: !1244, file: !135, line: 173, baseType: !867, size: 64, offset: 576)
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "use_cxa_end_cleanup", scope: !1244, file: !135, line: 177, baseType: !1100, size: 8, offset: 640)
!1290 = !DIDerivedType(tag: DW_TAG_member, name: "region_array", scope: !1239, file: !135, line: 200, baseType: !1291, size: 64, offset: 64)
!1291 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1292, size: 64)
!1292 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_gc", file: !135, line: 185, baseType: !1293)
!1293 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_gc", file: !135, line: 185, size: 128, elements: !1294)
!1294 = !{!1295}
!1295 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1293, file: !135, line: 185, baseType: !1296, size: 128)
!1296 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_base", file: !135, line: 184, baseType: !1297)
!1297 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_base", file: !135, line: 184, size: 128, elements: !1298)
!1298 = !{!1299, !1300, !1301}
!1299 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1297, file: !135, line: 184, baseType: !7, size: 32)
!1300 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1297, file: !135, line: 184, baseType: !7, size: 32, offset: 32)
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1297, file: !135, line: 184, baseType: !1302, size: 64, offset: 64)
!1302 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1242, size: 64, elements: !905)
!1303 = !DIDerivedType(tag: DW_TAG_member, name: "lp_array", scope: !1239, file: !135, line: 203, baseType: !1304, size: 64, offset: 128)
!1304 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1305, size: 64)
!1305 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_gc", file: !135, line: 189, baseType: !1306)
!1306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_gc", file: !135, line: 189, size: 128, elements: !1307)
!1307 = !{!1308}
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1306, file: !135, line: 189, baseType: !1309, size: 128)
!1309 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_base", file: !135, line: 188, baseType: !1310)
!1310 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_base", file: !135, line: 188, size: 128, elements: !1311)
!1311 = !{!1312, !1313, !1314}
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1310, file: !135, line: 188, baseType: !7, size: 32)
!1313 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1310, file: !135, line: 188, baseType: !7, size: 32, offset: 32)
!1314 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1310, file: !135, line: 188, baseType: !1315, size: 64, offset: 64)
!1315 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1316, size: 64, elements: !905)
!1316 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_landing_pad", file: !135, line: 180, baseType: !1279)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "throw_stmt_table", scope: !1239, file: !135, line: 207, baseType: !1318, size: 64, offset: 192)
!1318 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !1319, line: 144, baseType: !1320)
!1319 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1320 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1321, size: 64)
!1321 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !1319, line: 100, size: 896, elements: !1322)
!1322 = !{!1323, !1331, !1336, !1341, !1343, !1346, !1347, !1348, !1349, !1350, !1355, !1357, !1358, !1363, !1368}
!1323 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !1321, file: !1319, line: 102, baseType: !1324, size: 64)
!1324 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !1319, line: 52, baseType: !1325)
!1325 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1326, size: 64)
!1326 = !DISubroutineType(types: !1327)
!1327 = !{!1328, !1329}
!1328 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !1319, line: 47, baseType: !7)
!1329 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1330, size: 64)
!1330 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!1331 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !1321, file: !1319, line: 105, baseType: !1332, size: 64, offset: 64)
!1332 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !1319, line: 59, baseType: !1333)
!1333 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1334, size: 64)
!1334 = !DISubroutineType(types: !1335)
!1335 = !{!865, !1329, !1329}
!1336 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !1321, file: !1319, line: 108, baseType: !1337, size: 64, offset: 128)
!1337 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !1319, line: 63, baseType: !1338)
!1338 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1339, size: 64)
!1339 = !DISubroutineType(types: !1340)
!1340 = !{null, !866}
!1341 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !1321, file: !1319, line: 111, baseType: !1342, size: 64, offset: 192)
!1342 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !866, size: 64)
!1343 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1321, file: !1319, line: 114, baseType: !1344, size: 64, offset: 256)
!1344 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !1345, line: 46, baseType: !940)
!1345 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!1346 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !1321, file: !1319, line: 117, baseType: !1344, size: 64, offset: 320)
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !1321, file: !1319, line: 120, baseType: !1344, size: 64, offset: 384)
!1348 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !1321, file: !1319, line: 124, baseType: !7, size: 32, offset: 448)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !1321, file: !1319, line: 128, baseType: !7, size: 32, offset: 480)
!1350 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !1321, file: !1319, line: 131, baseType: !1351, size: 64, offset: 512)
!1351 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !1319, line: 75, baseType: !1352)
!1352 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1353, size: 64)
!1353 = !DISubroutineType(types: !1354)
!1354 = !{!866, !1344, !1344}
!1355 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !1321, file: !1319, line: 132, baseType: !1356, size: 64, offset: 576)
!1356 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !1319, line: 78, baseType: !1338)
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !1321, file: !1319, line: 135, baseType: !866, size: 64, offset: 640)
!1358 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !1321, file: !1319, line: 136, baseType: !1359, size: 64, offset: 704)
!1359 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !1319, line: 82, baseType: !1360)
!1360 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1361, size: 64)
!1361 = !DISubroutineType(types: !1362)
!1362 = !{!866, !866, !1344, !1344}
!1363 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !1321, file: !1319, line: 137, baseType: !1364, size: 64, offset: 768)
!1364 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !1319, line: 83, baseType: !1365)
!1365 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1366, size: 64)
!1366 = !DISubroutineType(types: !1367)
!1367 = !{null, !866, !866}
!1368 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !1321, file: !1319, line: 141, baseType: !7, size: 32, offset: 832)
!1369 = !DIDerivedType(tag: DW_TAG_member, name: "ttype_data", scope: !1239, file: !135, line: 211, baseType: !1370, size: 64, offset: 256)
!1370 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1371, size: 64)
!1371 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !171, line: 183, baseType: !1372)
!1372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !171, line: 183, size: 128, elements: !1373)
!1373 = !{!1374}
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1372, file: !171, line: 183, baseType: !1375, size: 128)
!1375 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !171, line: 182, baseType: !1376)
!1376 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !171, line: 182, size: 128, elements: !1377)
!1377 = !{!1378, !1379, !1380}
!1378 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1376, file: !171, line: 182, baseType: !7, size: 32)
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1376, file: !171, line: 182, baseType: !7, size: 32, offset: 32)
!1380 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1376, file: !171, line: 182, baseType: !1381, size: 64, offset: 64)
!1381 = !DICompositeType(tag: DW_TAG_array_type, baseType: !987, size: 64, elements: !905)
!1382 = !DIDerivedType(tag: DW_TAG_member, name: "ehspec_data", scope: !1239, file: !135, line: 220, baseType: !1383, size: 64, offset: 320)
!1383 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_status_u", file: !135, line: 217, size: 64, elements: !1384)
!1384 = !{!1385, !1386}
!1385 = !DIDerivedType(tag: DW_TAG_member, name: "arm_eabi", scope: !1383, file: !135, line: 218, baseType: !1370, size: 64)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "other", scope: !1383, file: !135, line: 219, baseType: !1387, size: 64)
!1387 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1388, size: 64)
!1388 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_gc", file: !1389, line: 29, baseType: !1390)
!1389 = !DIFile(filename: "./vecprim.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1390 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_gc", file: !1389, line: 29, size: 96, elements: !1391)
!1391 = !{!1392}
!1392 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1390, file: !1389, line: 29, baseType: !1393, size: 96)
!1393 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_base", file: !1389, line: 27, baseType: !1394)
!1394 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_base", file: !1389, line: 27, size: 96, elements: !1395)
!1395 = !{!1396, !1397, !1398}
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1394, file: !1389, line: 27, baseType: !7, size: 32)
!1397 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1394, file: !1389, line: 27, baseType: !7, size: 32, offset: 32)
!1398 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1394, file: !1389, line: 27, baseType: !1399, size: 8, offset: 64)
!1399 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1400, size: 8, elements: !905)
!1400 = !DIDerivedType(tag: DW_TAG_typedef, name: "uchar", file: !1389, line: 26, baseType: !1100)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !1234, file: !1235, line: 467, baseType: !1402, size: 64, offset: 64)
!1402 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1403, size: 64)
!1403 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !155, line: 374, size: 640, elements: !1404)
!1404 = !{!1405, !1536, !1537, !1550, !1551, !1552, !1553, !1554, !1555, !1557, !1559, !1560}
!1405 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !1403, file: !155, line: 377, baseType: !1406, size: 64)
!1406 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !868, line: 111, baseType: !1407)
!1407 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1408, size: 64)
!1408 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !155, line: 217, size: 832, elements: !1409)
!1409 = !{!1410, !1445, !1446, !1447, !1506, !1510, !1511, !1512, !1530, !1531, !1532, !1533, !1534, !1535}
!1410 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !1408, file: !155, line: 219, baseType: !1411, size: 64)
!1411 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1412, size: 64)
!1412 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !155, line: 151, baseType: !1413)
!1413 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !155, line: 151, size: 128, elements: !1414)
!1414 = !{!1415}
!1415 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1413, file: !155, line: 151, baseType: !1416, size: 128)
!1416 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !155, line: 150, baseType: !1417)
!1417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !155, line: 150, size: 128, elements: !1418)
!1418 = !{!1419, !1420, !1421}
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1417, file: !155, line: 150, baseType: !7, size: 32)
!1420 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1417, file: !155, line: 150, baseType: !7, size: 32, offset: 32)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1417, file: !155, line: 150, baseType: !1422, size: 64, offset: 64)
!1422 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1423, size: 64, elements: !905)
!1423 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !868, line: 108, baseType: !1424)
!1424 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1425, size: 64)
!1425 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !155, line: 122, size: 512, elements: !1426)
!1426 = !{!1427, !1428, !1429, !1437, !1438, !1439, !1440, !1441, !1442, !1443}
!1427 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !1425, file: !155, line: 124, baseType: !1407, size: 64)
!1428 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !1425, file: !155, line: 125, baseType: !1407, size: 64, offset: 64)
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !1425, file: !155, line: 131, baseType: !1430, size: 64, offset: 128)
!1430 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !155, line: 128, size: 64, elements: !1431)
!1431 = !{!1432, !1436}
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !1430, file: !155, line: 129, baseType: !1433, size: 64)
!1433 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !868, line: 66, baseType: !1434)
!1434 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1435, size: 64)
!1435 = !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !868, line: 65, flags: DIFlagFwdDecl)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !1430, file: !155, line: 130, baseType: !867, size: 64)
!1437 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1425, file: !155, line: 134, baseType: !866, size: 64, offset: 192)
!1438 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !1425, file: !155, line: 137, baseType: !987, size: 64, offset: 256)
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !1425, file: !155, line: 138, baseType: !1108, size: 32, offset: 320)
!1440 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !1425, file: !155, line: 142, baseType: !7, size: 32, offset: 352)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1425, file: !155, line: 144, baseType: !865, size: 32, offset: 384)
!1442 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !1425, file: !155, line: 145, baseType: !865, size: 32, offset: 416)
!1443 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1425, file: !155, line: 146, baseType: !1444, size: 64, offset: 448)
!1444 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !155, line: 119, baseType: !957)
!1445 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !1408, file: !155, line: 220, baseType: !1411, size: 64, offset: 64)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1408, file: !155, line: 223, baseType: !866, size: 64, offset: 128)
!1447 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !1408, file: !155, line: 226, baseType: !1448, size: 64, offset: 192)
!1448 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1449, size: 64)
!1449 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !142, line: 100, size: 1216, elements: !1450)
!1450 = !{!1451, !1452, !1453, !1454, !1455, !1460, !1461, !1462, !1476, !1477, !1478, !1479, !1480, !1481, !1482, !1483, !1484, !1485, !1496, !1504, !1505}
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1449, file: !142, line: 102, baseType: !865, size: 32)
!1452 = !DIDerivedType(tag: DW_TAG_member, name: "ninsns", scope: !1449, file: !142, line: 105, baseType: !7, size: 32, offset: 32)
!1453 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1449, file: !142, line: 108, baseType: !1407, size: 64, offset: 64)
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "latch", scope: !1449, file: !142, line: 111, baseType: !1407, size: 64, offset: 128)
!1455 = !DIDerivedType(tag: DW_TAG_member, name: "lpt_decision", scope: !1449, file: !142, line: 114, baseType: !1456, size: 64, offset: 192)
!1456 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lpt_decision", file: !142, line: 41, size: 64, elements: !1457)
!1457 = !{!1458, !1459}
!1458 = !DIDerivedType(tag: DW_TAG_member, name: "decision", scope: !1456, file: !142, line: 42, baseType: !141, size: 32)
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "times", scope: !1456, file: !142, line: 43, baseType: !7, size: 32, offset: 32)
!1460 = !DIDerivedType(tag: DW_TAG_member, name: "av_ninsns", scope: !1449, file: !142, line: 117, baseType: !7, size: 32, offset: 256)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "num_nodes", scope: !1449, file: !142, line: 120, baseType: !7, size: 32, offset: 288)
!1462 = !DIDerivedType(tag: DW_TAG_member, name: "superloops", scope: !1449, file: !142, line: 123, baseType: !1463, size: 64, offset: 320)
!1463 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1464, size: 64)
!1464 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_gc", file: !142, line: 87, baseType: !1465)
!1465 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_gc", file: !142, line: 87, size: 128, elements: !1466)
!1466 = !{!1467}
!1467 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1465, file: !142, line: 87, baseType: !1468, size: 128)
!1468 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_base", file: !142, line: 85, baseType: !1469)
!1469 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_base", file: !142, line: 85, size: 128, elements: !1470)
!1470 = !{!1471, !1472, !1473}
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1469, file: !142, line: 85, baseType: !7, size: 32)
!1472 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1469, file: !142, line: 85, baseType: !7, size: 32, offset: 32)
!1473 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1469, file: !142, line: 85, baseType: !1474, size: 64, offset: 64)
!1474 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1475, size: 64, elements: !905)
!1475 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_p", file: !142, line: 84, baseType: !1448)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !1449, file: !142, line: 126, baseType: !1448, size: 64, offset: 384)
!1477 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1449, file: !142, line: 129, baseType: !1448, size: 64, offset: 448)
!1478 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1449, file: !142, line: 132, baseType: !866, size: 64, offset: 512)
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations", scope: !1449, file: !142, line: 139, baseType: !987, size: 64, offset: 576)
!1480 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_upper_bound", scope: !1449, file: !142, line: 143, baseType: !1035, size: 128, offset: 640)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_estimate", scope: !1449, file: !142, line: 146, baseType: !1035, size: 128, offset: 768)
!1482 = !DIDerivedType(tag: DW_TAG_member, name: "any_upper_bound", scope: !1449, file: !142, line: 148, baseType: !1100, size: 8, offset: 896)
!1483 = !DIDerivedType(tag: DW_TAG_member, name: "any_estimate", scope: !1449, file: !142, line: 149, baseType: !1100, size: 8, offset: 904)
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "estimate_state", scope: !1449, file: !142, line: 153, baseType: !150, size: 32, offset: 928)
!1485 = !DIDerivedType(tag: DW_TAG_member, name: "bounds", scope: !1449, file: !142, line: 156, baseType: !1486, size: 64, offset: 960)
!1486 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1487, size: 64)
!1487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nb_iter_bound", file: !142, line: 48, size: 320, elements: !1488)
!1488 = !{!1489, !1493, !1494, !1495}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1487, file: !142, line: 50, baseType: !1490, size: 64)
!1490 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !868, line: 58, baseType: !1491)
!1491 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1492, size: 64)
!1492 = !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !868, line: 57, flags: DIFlagFwdDecl)
!1493 = !DIDerivedType(tag: DW_TAG_member, name: "bound", scope: !1487, file: !142, line: 59, baseType: !1035, size: 128, offset: 64)
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "is_exit", scope: !1487, file: !142, line: 64, baseType: !1100, size: 8, offset: 192)
!1495 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1487, file: !142, line: 67, baseType: !1486, size: 64, offset: 256)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1449, file: !142, line: 159, baseType: !1497, size: 64, offset: 1024)
!1497 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1498, size: 64)
!1498 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop_exit", file: !142, line: 72, size: 256, elements: !1499)
!1499 = !{!1500, !1501, !1502, !1503}
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !1498, file: !142, line: 74, baseType: !1424, size: 64)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1498, file: !142, line: 77, baseType: !1497, size: 64, offset: 64)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1498, file: !142, line: 78, baseType: !1497, size: 64, offset: 128)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "next_e", scope: !1498, file: !142, line: 81, baseType: !1497, size: 64, offset: 192)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "can_be_parallel", scope: !1449, file: !142, line: 162, baseType: !1100, size: 8, offset: 1088)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "single_iv", scope: !1449, file: !142, line: 166, baseType: !987, size: 64, offset: 1152)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !1408, file: !155, line: 229, baseType: !1507, size: 128, offset: 256)
!1507 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1508, size: 128, elements: !941)
!1508 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1509, size: 64)
!1509 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !155, line: 229, flags: DIFlagFwdDecl)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !1408, file: !155, line: 232, baseType: !1407, size: 64, offset: 384)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !1408, file: !155, line: 233, baseType: !1407, size: 64, offset: 448)
!1512 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !1408, file: !155, line: 238, baseType: !1513, size: 64, offset: 512)
!1513 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !155, line: 235, size: 64, elements: !1514)
!1514 = !{!1515, !1521}
!1515 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !1513, file: !155, line: 236, baseType: !1516, size: 64)
!1516 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1517, size: 64)
!1517 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !155, line: 273, size: 128, elements: !1518)
!1518 = !{!1519, !1520}
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !1517, file: !155, line: 275, baseType: !1433, size: 64)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !1517, file: !155, line: 278, baseType: !1433, size: 64, offset: 64)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1513, file: !155, line: 237, baseType: !1522, size: 64)
!1522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1523, size: 64)
!1523 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !155, line: 259, size: 320, elements: !1524)
!1524 = !{!1525, !1526, !1527, !1528, !1529}
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !1523, file: !155, line: 261, baseType: !867, size: 64)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !1523, file: !155, line: 262, baseType: !867, size: 64, offset: 64)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1523, file: !155, line: 266, baseType: !867, size: 64, offset: 128)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !1523, file: !155, line: 267, baseType: !867, size: 64, offset: 192)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1523, file: !155, line: 270, baseType: !865, size: 32, offset: 256)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1408, file: !155, line: 241, baseType: !1444, size: 64, offset: 576)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1408, file: !155, line: 244, baseType: !865, size: 32, offset: 640)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !1408, file: !155, line: 247, baseType: !865, size: 32, offset: 672)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !1408, file: !155, line: 250, baseType: !865, size: 32, offset: 704)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !1408, file: !155, line: 253, baseType: !865, size: 32, offset: 736)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1408, file: !155, line: 256, baseType: !865, size: 32, offset: 768)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !1403, file: !155, line: 378, baseType: !1406, size: 64, offset: 64)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !1403, file: !155, line: 381, baseType: !1538, size: 64, offset: 128)
!1538 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1539, size: 64)
!1539 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !155, line: 282, baseType: !1540)
!1540 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !155, line: 282, size: 128, elements: !1541)
!1541 = !{!1542}
!1542 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1540, file: !155, line: 282, baseType: !1543, size: 128)
!1543 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !155, line: 281, baseType: !1544)
!1544 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !155, line: 281, size: 128, elements: !1545)
!1545 = !{!1546, !1547, !1548}
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1544, file: !155, line: 281, baseType: !7, size: 32)
!1547 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1544, file: !155, line: 281, baseType: !7, size: 32, offset: 32)
!1548 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1544, file: !155, line: 281, baseType: !1549, size: 64, offset: 64)
!1549 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1406, size: 64, elements: !905)
!1550 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !1403, file: !155, line: 384, baseType: !865, size: 32, offset: 192)
!1551 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !1403, file: !155, line: 387, baseType: !865, size: 32, offset: 224)
!1552 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !1403, file: !155, line: 390, baseType: !865, size: 32, offset: 256)
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !1403, file: !155, line: 394, baseType: !1538, size: 64, offset: 320)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !1403, file: !155, line: 396, baseType: !154, size: 32, offset: 384)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !1403, file: !155, line: 399, baseType: !1556, size: 64, offset: 416)
!1556 = !DICompositeType(tag: DW_TAG_array_type, baseType: !160, size: 64, elements: !941)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !1403, file: !155, line: 402, baseType: !1558, size: 64, offset: 480)
!1558 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !941)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !1403, file: !155, line: 406, baseType: !865, size: 32, offset: 544)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !1403, file: !155, line: 409, baseType: !865, size: 32, offset: 576)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !1234, file: !1235, line: 470, baseType: !1434, size: 64, offset: 128)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !1234, file: !1235, line: 473, baseType: !1563, size: 64, offset: 192)
!1563 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1564, size: 64)
!1564 = !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !1235, line: 166, flags: DIFlagFwdDecl)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !1234, file: !1235, line: 476, baseType: !1566, size: 64, offset: 256)
!1566 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1567, size: 64)
!1567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !142, line: 187, size: 256, elements: !1568)
!1568 = !{!1569, !1570, !1571, !1572}
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !1567, file: !142, line: 189, baseType: !865, size: 32)
!1570 = !DIDerivedType(tag: DW_TAG_member, name: "larray", scope: !1567, file: !142, line: 192, baseType: !1463, size: 64, offset: 64)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1567, file: !142, line: 197, baseType: !1318, size: 64, offset: 128)
!1572 = !DIDerivedType(tag: DW_TAG_member, name: "tree_root", scope: !1567, file: !142, line: 200, baseType: !1448, size: 64, offset: 192)
!1573 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !1234, file: !1235, line: 479, baseType: !1318, size: 64, offset: 320)
!1574 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1234, file: !1235, line: 484, baseType: !987, size: 64, offset: 384)
!1575 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !1234, file: !1235, line: 488, baseType: !987, size: 64, offset: 448)
!1576 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !1234, file: !1235, line: 493, baseType: !987, size: 64, offset: 512)
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !1234, file: !1235, line: 496, baseType: !987, size: 64, offset: 576)
!1578 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !1234, file: !1235, line: 501, baseType: !1579, size: 64, offset: 640)
!1579 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1580, size: 64)
!1580 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !166, line: 2355, size: 576, elements: !1581)
!1581 = !{!1582, !1585, !1586, !1587, !1588, !1590, !1591, !1596, !1597, !1598, !1599, !1600, !1601}
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !1580, file: !166, line: 2356, baseType: !1583, size: 64)
!1583 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1584, size: 64)
!1584 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !166, line: 2356, flags: DIFlagFwdDecl)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !1580, file: !166, line: 2357, baseType: !893, size: 64, offset: 64)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !1580, file: !166, line: 2358, baseType: !865, size: 32, offset: 128)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !1580, file: !166, line: 2359, baseType: !865, size: 32, offset: 160)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !1580, file: !166, line: 2360, baseType: !1589, size: 128, offset: 192)
!1589 = !DICompositeType(tag: DW_TAG_array_type, baseType: !865, size: 128, elements: !967)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !1580, file: !166, line: 2364, baseType: !865, size: 32, offset: 320)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !1580, file: !166, line: 2367, baseType: !1592, size: 128, offset: 384)
!1592 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !166, line: 2349, size: 128, elements: !1593)
!1593 = !{!1594, !1595}
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !1592, file: !166, line: 2351, baseType: !867, size: 64)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1592, file: !166, line: 2352, baseType: !957, size: 64, offset: 64)
!1596 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !1580, file: !166, line: 2371, baseType: !165, size: 32, offset: 512)
!1597 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !1580, file: !166, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !1580, file: !166, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !1580, file: !166, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !1580, file: !166, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !1580, file: !166, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !1234, file: !1235, line: 504, baseType: !1603, size: 64, offset: 704)
!1603 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1604, size: 64)
!1604 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !1235, line: 504, flags: DIFlagFwdDecl)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !1234, file: !1235, line: 507, baseType: !1318, size: 64, offset: 768)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !1234, file: !1235, line: 510, baseType: !865, size: 32, offset: 832)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !1234, file: !1235, line: 513, baseType: !865, size: 32, offset: 864)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !1234, file: !1235, line: 516, baseType: !1108, size: 32, offset: 896)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !1234, file: !1235, line: 519, baseType: !1108, size: 32, offset: 928)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !1234, file: !1235, line: 522, baseType: !7, size: 32, offset: 960)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !1234, file: !1235, line: 523, baseType: !7, size: 32, offset: 992)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !1234, file: !1235, line: 528, baseType: !893, size: 64, offset: 1024)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !1234, file: !1235, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !1234, file: !1235, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !1234, file: !1235, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !1234, file: !1235, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !1234, file: !1235, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !1234, file: !1235, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !1234, file: !1235, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !1234, file: !1235, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !1234, file: !1235, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !1234, file: !1235, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !1234, file: !1235, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !1234, file: !1235, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !1234, file: !1235, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !1234, file: !1235, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !1234, file: !1235, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !1234, file: !1235, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !1229, file: !171, line: 3254, baseType: !987, size: 64, offset: 1536)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !1229, file: !171, line: 3257, baseType: !987, size: 64, offset: 1600)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !1229, file: !171, line: 3258, baseType: !987, size: 64, offset: 1664)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !1229, file: !171, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!1633 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !1229, file: !171, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!1634 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !1229, file: !171, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !1229, file: !171, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!1636 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !1229, file: !171, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!1637 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !1229, file: !171, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!1638 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !1229, file: !171, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !1229, file: !171, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !1229, file: !171, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!1641 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !1229, file: !171, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !1229, file: !171, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!1643 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !1229, file: !171, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!1644 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !1229, file: !171, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !1229, file: !171, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!1646 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !1229, file: !171, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!1647 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !1229, file: !171, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!1648 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !1229, file: !171, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !1229, file: !171, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !989, file: !171, line: 3394, baseType: !1651, size: 1344)
!1651 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !171, line: 2279, size: 1344, elements: !1652)
!1652 = !{!1653, !1654, !1655, !1656, !1657, !1658, !1659, !1660, !1661, !1662, !1663, !1664, !1665, !1666, !1667, !1668, !1669, !1670, !1671, !1672, !1673, !1674, !1675, !1678, !1679, !1680, !1688, !1689, !1690, !1691, !1692, !1693, !1694, !1695, !1696}
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1651, file: !171, line: 2280, baseType: !1025, size: 192)
!1654 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !1651, file: !171, line: 2281, baseType: !987, size: 64, offset: 192)
!1655 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1651, file: !171, line: 2282, baseType: !987, size: 64, offset: 256)
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1651, file: !171, line: 2283, baseType: !987, size: 64, offset: 320)
!1657 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1651, file: !171, line: 2284, baseType: !987, size: 64, offset: 384)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1651, file: !171, line: 2285, baseType: !7, size: 32, offset: 448)
!1659 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !1651, file: !171, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !1651, file: !171, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !1651, file: !171, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!1662 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !1651, file: !171, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !1651, file: !171, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!1664 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !1651, file: !171, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!1665 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1651, file: !171, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !1651, file: !171, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!1667 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1651, file: !171, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1651, file: !171, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!1669 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1651, file: !171, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!1670 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1651, file: !171, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1651, file: !171, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!1672 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1651, file: !171, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1651, file: !171, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!1674 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1651, file: !171, line: 2305, baseType: !7, size: 32, offset: 512)
!1675 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !1651, file: !171, line: 2306, baseType: !1676, size: 32, offset: 544)
!1676 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !1677, line: 31, baseType: !865)
!1677 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !1651, file: !171, line: 2307, baseType: !987, size: 64, offset: 576)
!1679 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !1651, file: !171, line: 2308, baseType: !987, size: 64, offset: 640)
!1680 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !1651, file: !171, line: 2314, baseType: !1681, size: 64, offset: 704)
!1681 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !171, line: 2309, size: 64, elements: !1682)
!1682 = !{!1683, !1684, !1685}
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !1681, file: !171, line: 2310, baseType: !865, size: 32)
!1684 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !1681, file: !171, line: 2311, baseType: !893, size: 64)
!1685 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !1681, file: !171, line: 2312, baseType: !1686, size: 64)
!1686 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1687, size: 64)
!1687 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !171, line: 2277, flags: DIFlagFwdDecl)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1651, file: !171, line: 2315, baseType: !987, size: 64, offset: 768)
!1689 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !1651, file: !171, line: 2316, baseType: !987, size: 64, offset: 832)
!1690 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !1651, file: !171, line: 2317, baseType: !987, size: 64, offset: 896)
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !1651, file: !171, line: 2318, baseType: !987, size: 64, offset: 960)
!1692 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !1651, file: !171, line: 2319, baseType: !987, size: 64, offset: 1024)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1651, file: !171, line: 2320, baseType: !987, size: 64, offset: 1088)
!1694 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1651, file: !171, line: 2321, baseType: !987, size: 64, offset: 1152)
!1695 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1651, file: !171, line: 2322, baseType: !987, size: 64, offset: 1216)
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1651, file: !171, line: 2324, baseType: !1697, size: 64, offset: 1280)
!1697 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1698, size: 64)
!1698 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !171, line: 2324, flags: DIFlagFwdDecl)
!1699 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !989, file: !171, line: 3395, baseType: !1700, size: 320)
!1700 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !171, line: 1469, size: 320, elements: !1701)
!1701 = !{!1702, !1703, !1704}
!1702 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1700, file: !171, line: 1470, baseType: !1025, size: 192)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !1700, file: !171, line: 1471, baseType: !987, size: 64, offset: 192)
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1700, file: !171, line: 1472, baseType: !987, size: 64, offset: 256)
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !989, file: !171, line: 3396, baseType: !1706, size: 320)
!1706 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !171, line: 1482, size: 320, elements: !1707)
!1707 = !{!1708, !1709, !1710}
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1706, file: !171, line: 1483, baseType: !1025, size: 192)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1706, file: !171, line: 1484, baseType: !865, size: 32, offset: 192)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !1706, file: !171, line: 1485, baseType: !1381, size: 64, offset: 256)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !989, file: !171, line: 3397, baseType: !1712, size: 384)
!1712 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !171, line: 1829, size: 384, elements: !1713)
!1713 = !{!1714, !1715, !1716, !1717}
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1712, file: !171, line: 1830, baseType: !1025, size: 192)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1712, file: !171, line: 1831, baseType: !1108, size: 32, offset: 192)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1712, file: !171, line: 1832, baseType: !987, size: 64, offset: 256)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !1712, file: !171, line: 1835, baseType: !1381, size: 64, offset: 320)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !989, file: !171, line: 3398, baseType: !1719, size: 704)
!1719 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !171, line: 1898, size: 704, elements: !1720)
!1720 = !{!1721, !1722, !1723, !1724, !1725, !1728}
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1719, file: !171, line: 1899, baseType: !1025, size: 192)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !1719, file: !171, line: 1902, baseType: !987, size: 64, offset: 192)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !1719, file: !171, line: 1905, baseType: !1490, size: 64, offset: 256)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !1719, file: !171, line: 1908, baseType: !7, size: 32, offset: 320)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !1719, file: !171, line: 1911, baseType: !1726, size: 64, offset: 384)
!1726 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1727, size: 64)
!1727 = !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !171, line: 1876, flags: DIFlagFwdDecl)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !1719, file: !171, line: 1914, baseType: !1729, size: 256, offset: 448)
!1729 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !171, line: 1883, size: 256, elements: !1730)
!1730 = !{!1731, !1733, !1734, !1739}
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1729, file: !171, line: 1884, baseType: !1732, size: 64)
!1732 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1729, size: 64)
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1729, file: !171, line: 1885, baseType: !1732, size: 64, offset: 64)
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1729, file: !171, line: 1891, baseType: !1735, size: 64, offset: 128)
!1735 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1729, file: !171, line: 1891, size: 64, elements: !1736)
!1736 = !{!1737, !1738}
!1737 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1735, file: !171, line: 1891, baseType: !1490, size: 64)
!1738 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1735, file: !171, line: 1891, baseType: !987, size: 64)
!1739 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !1729, file: !171, line: 1892, baseType: !1740, size: 64, offset: 192)
!1740 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !987, size: 64)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !989, file: !171, line: 3399, baseType: !1742, size: 704)
!1742 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !171, line: 2008, size: 704, elements: !1743)
!1743 = !{!1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751, !1752, !1753, !1754}
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1742, file: !171, line: 2009, baseType: !1025, size: 192)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1742, file: !171, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !1742, file: !171, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1742, file: !171, line: 2014, baseType: !1108, size: 32, offset: 224)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1742, file: !171, line: 2016, baseType: !987, size: 64, offset: 256)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !1742, file: !171, line: 2017, baseType: !1370, size: 64, offset: 320)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !1742, file: !171, line: 2019, baseType: !987, size: 64, offset: 384)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !1742, file: !171, line: 2020, baseType: !987, size: 64, offset: 448)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1742, file: !171, line: 2021, baseType: !987, size: 64, offset: 512)
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !1742, file: !171, line: 2022, baseType: !987, size: 64, offset: 576)
!1754 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !1742, file: !171, line: 2023, baseType: !987, size: 64, offset: 640)
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !989, file: !171, line: 3400, baseType: !1756, size: 832)
!1756 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !171, line: 2430, size: 832, elements: !1757)
!1757 = !{!1758, !1759, !1760, !1761, !1762, !1763, !1764, !1765, !1766, !1767}
!1758 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1756, file: !171, line: 2431, baseType: !1025, size: 192)
!1759 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1756, file: !171, line: 2433, baseType: !987, size: 64, offset: 192)
!1760 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !1756, file: !171, line: 2434, baseType: !987, size: 64, offset: 256)
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !1756, file: !171, line: 2435, baseType: !987, size: 64, offset: 320)
!1762 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !1756, file: !171, line: 2436, baseType: !987, size: 64, offset: 384)
!1763 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !1756, file: !171, line: 2437, baseType: !1370, size: 64, offset: 448)
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !1756, file: !171, line: 2438, baseType: !987, size: 64, offset: 512)
!1765 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !1756, file: !171, line: 2440, baseType: !987, size: 64, offset: 576)
!1766 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !1756, file: !171, line: 2441, baseType: !987, size: 64, offset: 640)
!1767 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !1756, file: !171, line: 2443, baseType: !1768, size: 128, offset: 704)
!1768 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !171, line: 182, baseType: !1769)
!1769 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !171, line: 182, size: 128, elements: !1770)
!1770 = !{!1771}
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1769, file: !171, line: 182, baseType: !1375, size: 128)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !989, file: !171, line: 3401, baseType: !1773, size: 320)
!1773 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !171, line: 3327, size: 320, elements: !1774)
!1774 = !{!1775, !1776, !1783}
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1773, file: !171, line: 3329, baseType: !1025, size: 192)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !1773, file: !171, line: 3330, baseType: !1777, size: 64, offset: 192)
!1777 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1778, size: 64)
!1778 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !171, line: 3320, size: 192, elements: !1779)
!1779 = !{!1780, !1781, !1782}
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1778, file: !171, line: 3322, baseType: !1777, size: 64)
!1781 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1778, file: !171, line: 3323, baseType: !1777, size: 64, offset: 64)
!1782 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1778, file: !171, line: 3324, baseType: !987, size: 64, offset: 128)
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !1773, file: !171, line: 3331, baseType: !1777, size: 64, offset: 256)
!1784 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !989, file: !171, line: 3402, baseType: !1785, size: 256)
!1785 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !171, line: 1540, size: 256, elements: !1786)
!1786 = !{!1787, !1788}
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1785, file: !171, line: 1541, baseType: !1025, size: 192)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !1785, file: !171, line: 1542, baseType: !1789, size: 64, offset: 192)
!1789 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1790, size: 64)
!1790 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !171, line: 1538, baseType: !1791)
!1791 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !171, line: 1538, size: 192, elements: !1792)
!1792 = !{!1793}
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1791, file: !171, line: 1538, baseType: !1794, size: 192)
!1794 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !171, line: 1537, baseType: !1795)
!1795 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !171, line: 1537, size: 192, elements: !1796)
!1796 = !{!1797, !1798, !1799}
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1795, file: !171, line: 1537, baseType: !7, size: 32)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1795, file: !171, line: 1537, baseType: !7, size: 32, offset: 32)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1795, file: !171, line: 1537, baseType: !1800, size: 128, offset: 64)
!1800 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1801, size: 128, elements: !905)
!1801 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !171, line: 1535, baseType: !1802)
!1802 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !171, line: 1532, size: 128, elements: !1803)
!1803 = !{!1804, !1805}
!1804 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1802, file: !171, line: 1533, baseType: !987, size: 64)
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1802, file: !171, line: 1534, baseType: !987, size: 64, offset: 64)
!1806 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !989, file: !171, line: 3403, baseType: !1807, size: 512)
!1807 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !171, line: 1938, size: 512, elements: !1808)
!1808 = !{!1809, !1810, !1811, !1812, !1818, !1819, !1820}
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1807, file: !171, line: 1939, baseType: !1025, size: 192)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1807, file: !171, line: 1940, baseType: !1108, size: 32, offset: 192)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1807, file: !171, line: 1941, baseType: !170, size: 32, offset: 224)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1807, file: !171, line: 1946, baseType: !1813, size: 32, offset: 256)
!1813 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !171, line: 1942, size: 32, elements: !1814)
!1814 = !{!1815, !1816, !1817}
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !1813, file: !171, line: 1943, baseType: !189, size: 32)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !1813, file: !171, line: 1944, baseType: !196, size: 32)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !1813, file: !171, line: 1945, baseType: !203, size: 32)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !1807, file: !171, line: 1950, baseType: !1433, size: 64, offset: 320)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !1807, file: !171, line: 1951, baseType: !1433, size: 64, offset: 384)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !1807, file: !171, line: 1953, baseType: !1381, size: 64, offset: 448)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !989, file: !171, line: 3404, baseType: !1822, size: 1664)
!1822 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !171, line: 3337, size: 1664, elements: !1823)
!1823 = !{!1824, !1825}
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1822, file: !171, line: 3338, baseType: !1025, size: 192)
!1825 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1822, file: !171, line: 3341, baseType: !1826, size: 1472, offset: 192)
!1826 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !1827, line: 410, size: 1472, elements: !1828)
!1827 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1828 = !{!1829, !1830, !1831, !1832, !1833, !1834, !1835, !1836, !1837, !1839, !1840, !1841, !1842, !1843, !1844, !1845, !1846, !1847, !1848, !1849, !1850, !1851, !1852, !1853, !1854, !1855, !1856, !1857, !1858, !1859, !1860, !1861, !1862, !1863, !1864, !1865, !1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1883, !1884, !1885, !1886, !1887, !1888, !1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905, !1906, !1907, !1908, !1909, !1910, !1911, !1912, !1913, !1914, !1915, !1916, !1917, !1918, !1919, !1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930, !1931, !1932, !1933, !1934, !1935, !1936, !1937, !1938, !1939, !1940, !1941, !1942, !1943, !1944, !1945, !1946, !1947, !1948, !1949, !1950, !1951, !1952, !1953, !1954, !1955, !1956, !1957, !1958, !1959, !1960, !1961, !1962, !1963, !1964, !1965, !1966, !1967, !1968, !1969, !1970, !1971, !1972, !1973, !1974, !1975, !1976, !1977, !1978, !1979, !1980, !1981, !1982, !1983, !1984, !1985, !1986, !1987, !1988, !1989, !1990, !1991, !1992}
!1829 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !1826, file: !1827, line: 412, baseType: !865, size: 32)
!1830 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !1826, file: !1827, line: 413, baseType: !865, size: 32, offset: 32)
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !1826, file: !1827, line: 414, baseType: !865, size: 32, offset: 64)
!1832 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !1826, file: !1827, line: 415, baseType: !865, size: 32, offset: 96)
!1833 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !1826, file: !1827, line: 416, baseType: !865, size: 32, offset: 128)
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !1826, file: !1827, line: 417, baseType: !865, size: 32, offset: 160)
!1835 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !1826, file: !1827, line: 418, baseType: !1100, size: 8, offset: 192)
!1836 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !1826, file: !1827, line: 419, baseType: !1100, size: 8, offset: 200)
!1837 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !1826, file: !1827, line: 420, baseType: !1838, size: 8, offset: 208)
!1838 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !1826, file: !1827, line: 421, baseType: !1838, size: 8, offset: 216)
!1840 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !1826, file: !1827, line: 422, baseType: !1838, size: 8, offset: 224)
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !1826, file: !1827, line: 423, baseType: !1838, size: 8, offset: 232)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !1826, file: !1827, line: 424, baseType: !1838, size: 8, offset: 240)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !1826, file: !1827, line: 425, baseType: !1838, size: 8, offset: 248)
!1844 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !1826, file: !1827, line: 426, baseType: !1838, size: 8, offset: 256)
!1845 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !1826, file: !1827, line: 427, baseType: !1838, size: 8, offset: 264)
!1846 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !1826, file: !1827, line: 428, baseType: !1838, size: 8, offset: 272)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !1826, file: !1827, line: 429, baseType: !1838, size: 8, offset: 280)
!1848 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !1826, file: !1827, line: 430, baseType: !1838, size: 8, offset: 288)
!1849 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !1826, file: !1827, line: 431, baseType: !1838, size: 8, offset: 296)
!1850 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !1826, file: !1827, line: 432, baseType: !1838, size: 8, offset: 304)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !1826, file: !1827, line: 433, baseType: !1838, size: 8, offset: 312)
!1852 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !1826, file: !1827, line: 434, baseType: !1838, size: 8, offset: 320)
!1853 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !1826, file: !1827, line: 435, baseType: !1838, size: 8, offset: 328)
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !1826, file: !1827, line: 436, baseType: !1838, size: 8, offset: 336)
!1855 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !1826, file: !1827, line: 437, baseType: !1838, size: 8, offset: 344)
!1856 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !1826, file: !1827, line: 438, baseType: !1838, size: 8, offset: 352)
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !1826, file: !1827, line: 439, baseType: !1838, size: 8, offset: 360)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !1826, file: !1827, line: 440, baseType: !1838, size: 8, offset: 368)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !1826, file: !1827, line: 441, baseType: !1838, size: 8, offset: 376)
!1860 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !1826, file: !1827, line: 442, baseType: !1838, size: 8, offset: 384)
!1861 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !1826, file: !1827, line: 443, baseType: !1838, size: 8, offset: 392)
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !1826, file: !1827, line: 444, baseType: !1838, size: 8, offset: 400)
!1863 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !1826, file: !1827, line: 445, baseType: !1838, size: 8, offset: 408)
!1864 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !1826, file: !1827, line: 446, baseType: !1838, size: 8, offset: 416)
!1865 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !1826, file: !1827, line: 447, baseType: !1838, size: 8, offset: 424)
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !1826, file: !1827, line: 448, baseType: !1838, size: 8, offset: 432)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !1826, file: !1827, line: 449, baseType: !1838, size: 8, offset: 440)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !1826, file: !1827, line: 450, baseType: !1838, size: 8, offset: 448)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !1826, file: !1827, line: 451, baseType: !1838, size: 8, offset: 456)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !1826, file: !1827, line: 452, baseType: !1838, size: 8, offset: 464)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !1826, file: !1827, line: 453, baseType: !1838, size: 8, offset: 472)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !1826, file: !1827, line: 454, baseType: !1838, size: 8, offset: 480)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !1826, file: !1827, line: 455, baseType: !1838, size: 8, offset: 488)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !1826, file: !1827, line: 456, baseType: !1838, size: 8, offset: 496)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !1826, file: !1827, line: 457, baseType: !1838, size: 8, offset: 504)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !1826, file: !1827, line: 458, baseType: !1838, size: 8, offset: 512)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !1826, file: !1827, line: 459, baseType: !1838, size: 8, offset: 520)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !1826, file: !1827, line: 460, baseType: !1838, size: 8, offset: 528)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !1826, file: !1827, line: 461, baseType: !1838, size: 8, offset: 536)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !1826, file: !1827, line: 462, baseType: !1838, size: 8, offset: 544)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !1826, file: !1827, line: 463, baseType: !1838, size: 8, offset: 552)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !1826, file: !1827, line: 464, baseType: !1838, size: 8, offset: 560)
!1883 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !1826, file: !1827, line: 465, baseType: !1838, size: 8, offset: 568)
!1884 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !1826, file: !1827, line: 466, baseType: !1838, size: 8, offset: 576)
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !1826, file: !1827, line: 467, baseType: !1838, size: 8, offset: 584)
!1886 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !1826, file: !1827, line: 468, baseType: !1838, size: 8, offset: 592)
!1887 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !1826, file: !1827, line: 469, baseType: !1838, size: 8, offset: 600)
!1888 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !1826, file: !1827, line: 470, baseType: !1838, size: 8, offset: 608)
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !1826, file: !1827, line: 471, baseType: !1838, size: 8, offset: 616)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !1826, file: !1827, line: 472, baseType: !1838, size: 8, offset: 624)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !1826, file: !1827, line: 473, baseType: !1838, size: 8, offset: 632)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !1826, file: !1827, line: 474, baseType: !1838, size: 8, offset: 640)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !1826, file: !1827, line: 475, baseType: !1838, size: 8, offset: 648)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !1826, file: !1827, line: 476, baseType: !1838, size: 8, offset: 656)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !1826, file: !1827, line: 477, baseType: !1838, size: 8, offset: 664)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !1826, file: !1827, line: 478, baseType: !1838, size: 8, offset: 672)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !1826, file: !1827, line: 479, baseType: !1838, size: 8, offset: 680)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !1826, file: !1827, line: 480, baseType: !1838, size: 8, offset: 688)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !1826, file: !1827, line: 481, baseType: !1838, size: 8, offset: 696)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !1826, file: !1827, line: 482, baseType: !1838, size: 8, offset: 704)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !1826, file: !1827, line: 483, baseType: !1838, size: 8, offset: 712)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !1826, file: !1827, line: 484, baseType: !1838, size: 8, offset: 720)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !1826, file: !1827, line: 485, baseType: !1838, size: 8, offset: 728)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !1826, file: !1827, line: 486, baseType: !1838, size: 8, offset: 736)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !1826, file: !1827, line: 487, baseType: !1838, size: 8, offset: 744)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !1826, file: !1827, line: 488, baseType: !1838, size: 8, offset: 752)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !1826, file: !1827, line: 489, baseType: !1838, size: 8, offset: 760)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !1826, file: !1827, line: 490, baseType: !1838, size: 8, offset: 768)
!1909 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !1826, file: !1827, line: 491, baseType: !1838, size: 8, offset: 776)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !1826, file: !1827, line: 492, baseType: !1838, size: 8, offset: 784)
!1911 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !1826, file: !1827, line: 493, baseType: !1838, size: 8, offset: 792)
!1912 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !1826, file: !1827, line: 494, baseType: !1838, size: 8, offset: 800)
!1913 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !1826, file: !1827, line: 495, baseType: !1838, size: 8, offset: 808)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !1826, file: !1827, line: 496, baseType: !1838, size: 8, offset: 816)
!1915 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !1826, file: !1827, line: 497, baseType: !1838, size: 8, offset: 824)
!1916 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !1826, file: !1827, line: 498, baseType: !1838, size: 8, offset: 832)
!1917 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !1826, file: !1827, line: 499, baseType: !1838, size: 8, offset: 840)
!1918 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !1826, file: !1827, line: 500, baseType: !1838, size: 8, offset: 848)
!1919 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !1826, file: !1827, line: 501, baseType: !1838, size: 8, offset: 856)
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !1826, file: !1827, line: 502, baseType: !1838, size: 8, offset: 864)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !1826, file: !1827, line: 503, baseType: !1838, size: 8, offset: 872)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !1826, file: !1827, line: 504, baseType: !1838, size: 8, offset: 880)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !1826, file: !1827, line: 505, baseType: !1838, size: 8, offset: 888)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !1826, file: !1827, line: 506, baseType: !1838, size: 8, offset: 896)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !1826, file: !1827, line: 507, baseType: !1838, size: 8, offset: 904)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !1826, file: !1827, line: 508, baseType: !1838, size: 8, offset: 912)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !1826, file: !1827, line: 509, baseType: !1838, size: 8, offset: 920)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !1826, file: !1827, line: 510, baseType: !1838, size: 8, offset: 928)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !1826, file: !1827, line: 511, baseType: !1838, size: 8, offset: 936)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !1826, file: !1827, line: 512, baseType: !1838, size: 8, offset: 944)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !1826, file: !1827, line: 513, baseType: !1838, size: 8, offset: 952)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !1826, file: !1827, line: 514, baseType: !1838, size: 8, offset: 960)
!1933 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !1826, file: !1827, line: 515, baseType: !1838, size: 8, offset: 968)
!1934 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !1826, file: !1827, line: 516, baseType: !1838, size: 8, offset: 976)
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !1826, file: !1827, line: 517, baseType: !1838, size: 8, offset: 984)
!1936 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !1826, file: !1827, line: 518, baseType: !1838, size: 8, offset: 992)
!1937 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !1826, file: !1827, line: 519, baseType: !1838, size: 8, offset: 1000)
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !1826, file: !1827, line: 520, baseType: !1838, size: 8, offset: 1008)
!1939 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !1826, file: !1827, line: 521, baseType: !1838, size: 8, offset: 1016)
!1940 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !1826, file: !1827, line: 522, baseType: !1838, size: 8, offset: 1024)
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !1826, file: !1827, line: 523, baseType: !1838, size: 8, offset: 1032)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !1826, file: !1827, line: 524, baseType: !1838, size: 8, offset: 1040)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !1826, file: !1827, line: 525, baseType: !1838, size: 8, offset: 1048)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !1826, file: !1827, line: 526, baseType: !1838, size: 8, offset: 1056)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !1826, file: !1827, line: 527, baseType: !1838, size: 8, offset: 1064)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !1826, file: !1827, line: 528, baseType: !1838, size: 8, offset: 1072)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !1826, file: !1827, line: 529, baseType: !1838, size: 8, offset: 1080)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !1826, file: !1827, line: 530, baseType: !1838, size: 8, offset: 1088)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !1826, file: !1827, line: 531, baseType: !1838, size: 8, offset: 1096)
!1950 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !1826, file: !1827, line: 532, baseType: !1838, size: 8, offset: 1104)
!1951 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !1826, file: !1827, line: 533, baseType: !1838, size: 8, offset: 1112)
!1952 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !1826, file: !1827, line: 534, baseType: !1838, size: 8, offset: 1120)
!1953 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !1826, file: !1827, line: 535, baseType: !1838, size: 8, offset: 1128)
!1954 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !1826, file: !1827, line: 536, baseType: !1838, size: 8, offset: 1136)
!1955 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !1826, file: !1827, line: 537, baseType: !1838, size: 8, offset: 1144)
!1956 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !1826, file: !1827, line: 538, baseType: !1838, size: 8, offset: 1152)
!1957 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !1826, file: !1827, line: 539, baseType: !1838, size: 8, offset: 1160)
!1958 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !1826, file: !1827, line: 540, baseType: !1838, size: 8, offset: 1168)
!1959 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !1826, file: !1827, line: 541, baseType: !1838, size: 8, offset: 1176)
!1960 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !1826, file: !1827, line: 542, baseType: !1838, size: 8, offset: 1184)
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !1826, file: !1827, line: 543, baseType: !1838, size: 8, offset: 1192)
!1962 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !1826, file: !1827, line: 544, baseType: !1838, size: 8, offset: 1200)
!1963 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !1826, file: !1827, line: 545, baseType: !1838, size: 8, offset: 1208)
!1964 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !1826, file: !1827, line: 546, baseType: !1838, size: 8, offset: 1216)
!1965 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !1826, file: !1827, line: 547, baseType: !1838, size: 8, offset: 1224)
!1966 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !1826, file: !1827, line: 548, baseType: !1838, size: 8, offset: 1232)
!1967 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !1826, file: !1827, line: 549, baseType: !1838, size: 8, offset: 1240)
!1968 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !1826, file: !1827, line: 550, baseType: !1838, size: 8, offset: 1248)
!1969 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !1826, file: !1827, line: 551, baseType: !1838, size: 8, offset: 1256)
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !1826, file: !1827, line: 552, baseType: !1838, size: 8, offset: 1264)
!1971 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !1826, file: !1827, line: 553, baseType: !1838, size: 8, offset: 1272)
!1972 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !1826, file: !1827, line: 554, baseType: !1838, size: 8, offset: 1280)
!1973 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !1826, file: !1827, line: 555, baseType: !1838, size: 8, offset: 1288)
!1974 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !1826, file: !1827, line: 556, baseType: !1838, size: 8, offset: 1296)
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !1826, file: !1827, line: 557, baseType: !1838, size: 8, offset: 1304)
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !1826, file: !1827, line: 558, baseType: !1838, size: 8, offset: 1312)
!1977 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !1826, file: !1827, line: 559, baseType: !1838, size: 8, offset: 1320)
!1978 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !1826, file: !1827, line: 560, baseType: !1838, size: 8, offset: 1328)
!1979 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !1826, file: !1827, line: 561, baseType: !1838, size: 8, offset: 1336)
!1980 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !1826, file: !1827, line: 562, baseType: !1838, size: 8, offset: 1344)
!1981 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !1826, file: !1827, line: 563, baseType: !1838, size: 8, offset: 1352)
!1982 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !1826, file: !1827, line: 564, baseType: !1838, size: 8, offset: 1360)
!1983 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !1826, file: !1827, line: 565, baseType: !1838, size: 8, offset: 1368)
!1984 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !1826, file: !1827, line: 566, baseType: !1838, size: 8, offset: 1376)
!1985 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !1826, file: !1827, line: 567, baseType: !1838, size: 8, offset: 1384)
!1986 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !1826, file: !1827, line: 568, baseType: !1838, size: 8, offset: 1392)
!1987 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !1826, file: !1827, line: 569, baseType: !1838, size: 8, offset: 1400)
!1988 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !1826, file: !1827, line: 570, baseType: !1838, size: 8, offset: 1408)
!1989 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !1826, file: !1827, line: 571, baseType: !1838, size: 8, offset: 1416)
!1990 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !1826, file: !1827, line: 572, baseType: !1838, size: 8, offset: 1424)
!1991 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !1826, file: !1827, line: 573, baseType: !1838, size: 8, offset: 1432)
!1992 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !1826, file: !1827, line: 574, baseType: !1838, size: 8, offset: 1440)
!1993 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !989, file: !171, line: 3405, baseType: !1994, size: 384)
!1994 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !171, line: 3352, size: 384, elements: !1995)
!1995 = !{!1996, !1997}
!1996 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1994, file: !171, line: 3353, baseType: !1025, size: 192)
!1997 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1994, file: !171, line: 3356, baseType: !1998, size: 192, offset: 192)
!1998 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !1827, line: 578, size: 192, elements: !1999)
!1999 = !{!2000, !2001, !2002, !2003, !2004, !2005, !2006, !2007, !2008, !2009, !2010}
!2000 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !1998, file: !1827, line: 580, baseType: !865, size: 32)
!2001 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !1998, file: !1827, line: 581, baseType: !865, size: 32, offset: 32)
!2002 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !1998, file: !1827, line: 582, baseType: !865, size: 32, offset: 64)
!2003 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !1998, file: !1827, line: 583, baseType: !865, size: 32, offset: 96)
!2004 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !1998, file: !1827, line: 584, baseType: !1100, size: 8, offset: 128)
!2005 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !1998, file: !1827, line: 585, baseType: !1100, size: 8, offset: 136)
!2006 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !1998, file: !1827, line: 586, baseType: !1100, size: 8, offset: 144)
!2007 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !1998, file: !1827, line: 587, baseType: !1100, size: 8, offset: 152)
!2008 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !1998, file: !1827, line: 588, baseType: !1100, size: 8, offset: 160)
!2009 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !1998, file: !1827, line: 589, baseType: !1100, size: 8, offset: 168)
!2010 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !1998, file: !1827, line: 590, baseType: !1100, size: 8, offset: 176)
!2011 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !888, file: !406, line: 178, baseType: !1407, size: 64)
!2012 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !888, file: !406, line: 179, baseType: !2013, size: 64)
!2013 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2014, size: 64)
!2014 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !406, line: 150, baseType: !2015)
!2015 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !406, line: 142, size: 320, elements: !2016)
!2016 = !{!2017, !2018, !2019, !2020, !2021, !2022}
!2017 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !2015, file: !406, line: 144, baseType: !987, size: 64)
!2018 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2015, file: !406, line: 145, baseType: !867, size: 64, offset: 64)
!2019 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2015, file: !406, line: 146, baseType: !867, size: 64, offset: 128)
!2020 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2015, file: !406, line: 147, baseType: !1676, size: 32, offset: 192)
!2021 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2015, file: !406, line: 148, baseType: !7, size: 32, offset: 224)
!2022 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !2015, file: !406, line: 149, baseType: !1100, size: 8, offset: 256)
!2023 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !888, file: !406, line: 180, baseType: !2024, size: 64)
!2024 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2025, size: 64)
!2025 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !406, line: 162, baseType: !2026)
!2026 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !406, line: 159, size: 128, elements: !2027)
!2027 = !{!2028, !2029}
!2028 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2026, file: !406, line: 160, baseType: !987, size: 64)
!2029 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2026, file: !406, line: 161, baseType: !957, size: 64, offset: 64)
!2030 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !888, file: !406, line: 181, baseType: !2031, size: 64)
!2031 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2032, size: 64)
!2032 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !406, line: 181, flags: DIFlagFwdDecl)
!2033 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !883, file: !406, line: 317, baseType: !2034, size: 64)
!2034 = !DICompositeType(tag: DW_TAG_array_type, baseType: !957, size: 64, elements: !905)
!2035 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !883, file: !406, line: 318, baseType: !2036, size: 320)
!2036 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !406, line: 188, size: 320, elements: !2037)
!2037 = !{!2038, !2040, !2095}
!2038 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !2036, file: !406, line: 190, baseType: !2039, size: 192)
!2039 = !DICompositeType(tag: DW_TAG_array_type, baseType: !887, size: 192, elements: !1058)
!2040 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2036, file: !406, line: 193, baseType: !2041, size: 64, offset: 192)
!2041 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2042, size: 64)
!2042 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !406, line: 206, size: 320, elements: !2043)
!2043 = !{!2044, !2080, !2081, !2082, !2094}
!2044 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !2042, file: !406, line: 208, baseType: !2045, size: 64)
!2045 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2046, size: 64)
!2046 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !868, line: 62, baseType: !2047)
!2047 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !2048, line: 538, size: 256, elements: !2049)
!2048 = !DIFile(filename: "./output.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2049 = !{!2050, !2054, !2060, !2071}
!2050 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2047, file: !2048, line: 539, baseType: !2051, size: 32)
!2051 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "section_common", file: !2048, line: 482, size: 32, elements: !2052)
!2052 = !{!2053}
!2053 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2051, file: !2048, line: 484, baseType: !7, size: 32)
!2054 = !DIDerivedType(tag: DW_TAG_member, name: "named", scope: !2047, file: !2048, line: 540, baseType: !2055, size: 192)
!2055 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "named_section", file: !2048, line: 488, size: 192, elements: !2056)
!2056 = !{!2057, !2058, !2059}
!2057 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2055, file: !2048, line: 489, baseType: !2051, size: 32)
!2058 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2055, file: !2048, line: 492, baseType: !893, size: 64, offset: 64)
!2059 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2055, file: !2048, line: 496, baseType: !987, size: 64, offset: 128)
!2060 = !DIDerivedType(tag: DW_TAG_member, name: "unnamed", scope: !2047, file: !2048, line: 541, baseType: !2061, size: 256)
!2061 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "unnamed_section", file: !2048, line: 504, size: 256, elements: !2062)
!2062 = !{!2063, !2064, !2069, !2070}
!2063 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2061, file: !2048, line: 505, baseType: !2051, size: 32)
!2064 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !2061, file: !2048, line: 509, baseType: !2065, size: 64, offset: 64)
!2065 = !DIDerivedType(tag: DW_TAG_typedef, name: "unnamed_section_callback", file: !2048, line: 501, baseType: !2066)
!2066 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2067, size: 64)
!2067 = !DISubroutineType(types: !2068)
!2068 = !{null, !1329}
!2069 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !2061, file: !2048, line: 510, baseType: !1329, size: 64, offset: 128)
!2070 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2061, file: !2048, line: 513, baseType: !2045, size: 64, offset: 192)
!2071 = !DIDerivedType(tag: DW_TAG_member, name: "noswitch", scope: !2047, file: !2048, line: 542, baseType: !2072, size: 128)
!2072 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "noswitch_section", file: !2048, line: 530, size: 128, elements: !2073)
!2073 = !{!2074, !2075}
!2074 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2072, file: !2048, line: 531, baseType: !2051, size: 32)
!2075 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !2072, file: !2048, line: 534, baseType: !2076, size: 64, offset: 64)
!2076 = !DIDerivedType(tag: DW_TAG_typedef, name: "noswitch_section_callback", file: !2048, line: 525, baseType: !2077)
!2077 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2078, size: 64)
!2078 = !DISubroutineType(types: !2079)
!2079 = !{!1100, !987, !893, !940, !940}
!2080 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !2042, file: !406, line: 211, baseType: !7, size: 32, offset: 64)
!2081 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2042, file: !406, line: 214, baseType: !957, size: 64, offset: 128)
!2082 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !2042, file: !406, line: 224, baseType: !2083, size: 64, offset: 192)
!2083 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2084, size: 64)
!2084 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !406, line: 202, baseType: !2085)
!2085 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !406, line: 202, size: 128, elements: !2086)
!2086 = !{!2087}
!2087 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2085, file: !406, line: 202, baseType: !2088, size: 128)
!2088 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !406, line: 200, baseType: !2089)
!2089 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !406, line: 200, size: 128, elements: !2090)
!2090 = !{!2091, !2092, !2093}
!2091 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2089, file: !406, line: 200, baseType: !7, size: 32)
!2092 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2089, file: !406, line: 200, baseType: !7, size: 32, offset: 32)
!2093 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2089, file: !406, line: 200, baseType: !904, size: 64, offset: 64)
!2094 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !2042, file: !406, line: 234, baseType: !2083, size: 64, offset: 256)
!2095 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2036, file: !406, line: 197, baseType: !957, size: 64, offset: 256)
!2096 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !883, file: !406, line: 319, baseType: !1047, size: 256)
!2097 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !883, file: !406, line: 320, baseType: !1066, size: 192)
!2098 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !867, size: 64)
!2099 = !DIDerivedType(tag: DW_TAG_typedef, name: "ds_t", file: !398, line: 218, baseType: !865)
!2100 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !783, size: 64)
!2101 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !868, line: 47, baseType: !924)
!2102 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2103, size: 64)
!2103 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "choice_entry", file: !3, line: 2388, size: 192, elements: !2104)
!2104 = !{!2105, !2106, !2107, !2108}
!2105 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2103, file: !3, line: 2391, baseType: !865, size: 32)
!2106 = !DIDerivedType(tag: DW_TAG_member, name: "rest", scope: !2103, file: !3, line: 2393, baseType: !865, size: 32, offset: 32)
!2107 = !DIDerivedType(tag: DW_TAG_member, name: "n", scope: !2103, file: !3, line: 2395, baseType: !865, size: 32, offset: 64)
!2108 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !2103, file: !3, line: 2397, baseType: !2109, size: 64, offset: 128)
!2109 = !DIDerivedType(tag: DW_TAG_typedef, name: "state_t", file: !2110, line: 158, baseType: !866)
!2110 = !DIFile(filename: "./insn-attr.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2111 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2112, size: 64)
!2112 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !867)
!2113 = !DIDerivedType(tag: DW_TAG_typedef, name: "HARD_REG_ELT_TYPE", file: !2114, line: 42, baseType: !940)
!2114 = !DIFile(filename: "./hard-reg-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2115 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2116, size: 64)
!2116 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_heap", file: !155, line: 283, baseType: !2117)
!2117 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_heap", file: !155, line: 283, size: 128, elements: !2118)
!2118 = !{!2119}
!2119 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2117, file: !155, line: 283, baseType: !1543, size: 128)
!2120 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2121, size: 64)
!2121 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_heap", file: !406, line: 201, baseType: !2122)
!2122 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_heap", file: !406, line: 201, size: 128, elements: !2123)
!2123 = !{!2124}
!2124 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2122, file: !406, line: 201, baseType: !2088, size: 128)
!2125 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2126, size: 64)
!2126 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_heap", file: !1389, line: 32, baseType: !2127)
!2127 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_heap", file: !1389, line: 32, size: 96, elements: !2128)
!2128 = !{!2129}
!2129 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2127, file: !1389, line: 32, baseType: !2130, size: 96)
!2130 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_base", file: !1389, line: 31, baseType: !2131)
!2131 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_base", file: !1389, line: 31, size: 96, elements: !2132)
!2132 = !{!2133, !2134, !2135}
!2133 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2131, file: !1389, line: 31, baseType: !7, size: 32)
!2134 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2131, file: !1389, line: 31, baseType: !7, size: 32, offset: 32)
!2135 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2131, file: !1389, line: 31, baseType: !2136, size: 32, offset: 64)
!2136 = !DICompositeType(tag: DW_TAG_array_type, baseType: !865, size: 32, elements: !905)
!2137 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2138, size: 64)
!2138 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_haifa_insn_data_def_heap", file: !398, line: 826, baseType: !2139)
!2139 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_haifa_insn_data_def_heap", file: !398, line: 826, size: 832, elements: !2140)
!2140 = !{!2141}
!2141 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2139, file: !398, line: 826, baseType: !2142, size: 832)
!2142 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_haifa_insn_data_def_base", file: !398, line: 825, baseType: !2143)
!2143 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_haifa_insn_data_def_base", file: !398, line: 825, size: 832, elements: !2144)
!2144 = !{!2145, !2146, !2147}
!2145 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2143, file: !398, line: 825, baseType: !7, size: 32)
!2146 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2143, file: !398, line: 825, baseType: !7, size: 32, offset: 32)
!2147 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2143, file: !398, line: 825, baseType: !2148, size: 768, offset: 64)
!2148 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2149, size: 768, elements: !905)
!2149 = !DIDerivedType(tag: DW_TAG_typedef, name: "haifa_insn_data_def", file: !398, line: 822, baseType: !2150)
!2150 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_haifa_insn_data", file: !398, line: 751, size: 768, elements: !2151)
!2151 = !{!2152, !2153, !2154, !2155, !2156, !2157, !2159, !2160, !2161, !2162, !2163, !2164, !2165, !2166, !2167, !2175, !2177, !2185, !2192}
!2152 = !DIDerivedType(tag: DW_TAG_member, name: "luid", scope: !2150, file: !398, line: 758, baseType: !865, size: 32)
!2153 = !DIDerivedType(tag: DW_TAG_member, name: "priority", scope: !2150, file: !398, line: 761, baseType: !865, size: 32, offset: 32)
!2154 = !DIDerivedType(tag: DW_TAG_member, name: "tick", scope: !2150, file: !398, line: 765, baseType: !865, size: 32, offset: 64)
!2155 = !DIDerivedType(tag: DW_TAG_member, name: "inter_tick", scope: !2150, file: !398, line: 769, baseType: !865, size: 32, offset: 96)
!2156 = !DIDerivedType(tag: DW_TAG_member, name: "queue_index", scope: !2150, file: !398, line: 772, baseType: !865, size: 32, offset: 128)
!2157 = !DIDerivedType(tag: DW_TAG_member, name: "cost", scope: !2150, file: !398, line: 774, baseType: !2158, size: 16, offset: 160)
!2158 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!2159 = !DIDerivedType(tag: DW_TAG_member, name: "fed_by_spec_load", scope: !2150, file: !398, line: 778, baseType: !7, size: 1, offset: 176, flags: DIFlagBitField, extraData: i64 176)
!2160 = !DIDerivedType(tag: DW_TAG_member, name: "is_load_insn", scope: !2150, file: !398, line: 779, baseType: !7, size: 1, offset: 177, flags: DIFlagBitField, extraData: i64 176)
!2161 = !DIDerivedType(tag: DW_TAG_member, name: "priority_status", scope: !2150, file: !398, line: 784, baseType: !1838, size: 8, offset: 184)
!2162 = !DIDerivedType(tag: DW_TAG_member, name: "todo_spec", scope: !2150, file: !398, line: 787, baseType: !2099, size: 32, offset: 192)
!2163 = !DIDerivedType(tag: DW_TAG_member, name: "done_spec", scope: !2150, file: !398, line: 790, baseType: !2099, size: 32, offset: 224)
!2164 = !DIDerivedType(tag: DW_TAG_member, name: "check_spec", scope: !2150, file: !398, line: 793, baseType: !2099, size: 32, offset: 256)
!2165 = !DIDerivedType(tag: DW_TAG_member, name: "recovery_block", scope: !2150, file: !398, line: 796, baseType: !1406, size: 64, offset: 320)
!2166 = !DIDerivedType(tag: DW_TAG_member, name: "orig_pat", scope: !2150, file: !398, line: 799, baseType: !867, size: 64, offset: 384)
!2167 = !DIDerivedType(tag: DW_TAG_member, name: "reg_pressure", scope: !2150, file: !398, line: 804, baseType: !2168, size: 64, offset: 448)
!2168 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2169, size: 64)
!2169 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_pressure_data", file: !398, line: 711, size: 32, elements: !2170)
!2170 = !{!2171, !2172, !2173, !2174}
!2171 = !DIDerivedType(tag: DW_TAG_member, name: "clobber_increase", scope: !2169, file: !398, line: 714, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!2172 = !DIDerivedType(tag: DW_TAG_member, name: "set_increase", scope: !2169, file: !398, line: 717, baseType: !7, size: 8, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!2173 = !DIDerivedType(tag: DW_TAG_member, name: "unused_set_increase", scope: !2169, file: !398, line: 720, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!2174 = !DIDerivedType(tag: DW_TAG_member, name: "change", scope: !2169, file: !398, line: 722, baseType: !865, size: 8, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!2175 = !DIDerivedType(tag: DW_TAG_member, name: "max_reg_pressure", scope: !2150, file: !398, line: 810, baseType: !2176, size: 64, offset: 512)
!2176 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !865, size: 64)
!2177 = !DIDerivedType(tag: DW_TAG_member, name: "reg_use_list", scope: !2150, file: !398, line: 813, baseType: !2178, size: 64, offset: 576)
!2178 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2179, size: 64)
!2179 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_use_data", file: !398, line: 726, size: 256, elements: !2180)
!2180 = !{!2181, !2182, !2183, !2184}
!2181 = !DIDerivedType(tag: DW_TAG_member, name: "regno", scope: !2179, file: !398, line: 729, baseType: !865, size: 32)
!2182 = !DIDerivedType(tag: DW_TAG_member, name: "insn", scope: !2179, file: !398, line: 731, baseType: !867, size: 64, offset: 64)
!2183 = !DIDerivedType(tag: DW_TAG_member, name: "next_regno_use", scope: !2179, file: !398, line: 733, baseType: !2178, size: 64, offset: 128)
!2184 = !DIDerivedType(tag: DW_TAG_member, name: "next_insn_use", scope: !2179, file: !398, line: 735, baseType: !2178, size: 64, offset: 192)
!2185 = !DIDerivedType(tag: DW_TAG_member, name: "reg_set_list", scope: !2150, file: !398, line: 816, baseType: !2186, size: 64, offset: 640)
!2186 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2187, size: 64)
!2187 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_set_data", file: !398, line: 741, size: 192, elements: !2188)
!2188 = !{!2189, !2190, !2191}
!2189 = !DIDerivedType(tag: DW_TAG_member, name: "regno", scope: !2187, file: !398, line: 744, baseType: !865, size: 32)
!2190 = !DIDerivedType(tag: DW_TAG_member, name: "insn", scope: !2187, file: !398, line: 746, baseType: !867, size: 64, offset: 64)
!2191 = !DIDerivedType(tag: DW_TAG_member, name: "next_insn_set", scope: !2187, file: !398, line: 748, baseType: !2186, size: 64, offset: 128)
!2192 = !DIDerivedType(tag: DW_TAG_member, name: "reg_pressure_excess_cost_change", scope: !2150, file: !398, line: 819, baseType: !865, size: 32, offset: 704)
!2193 = !{!0, !2194, !2247, !2259, !2261, !2263, !2272, !2294, !2296, !2298, !2300, !2302, !2305, !2307, !2309, !2311, !2313, !2315, !2317, !2319, !2321, !2323, !2325, !2327, !2329, !2331, !2333, !2352, !2354, !2359, !2364, !2411, !2413, !2415, !2417, !2419, !2421, !2423, !2425, !2427, !2429, !2431, !2433, !2435, !2442, !2444, !2449, !2451, !2453, !2455, !2457, !2460, !2462, !2497, !2499}
!2194 = !DIGlobalVariableExpression(var: !2195, expr: !DIExpression())
!2195 = distinct !DIGlobalVariable(name: "sched_dump", scope: !2, file: !3, line: 174, type: !2196, isLocal: false, isDefinition: true)
!2196 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2197, size: 64)
!2197 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2198, line: 7, baseType: !2199)
!2198 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!2199 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2200, line: 49, size: 1728, elements: !2201)
!2200 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!2201 = !{!2202, !2203, !2204, !2205, !2206, !2207, !2208, !2209, !2210, !2211, !2212, !2213, !2214, !2217, !2219, !2220, !2221, !2224, !2226, !2227, !2228, !2231, !2233, !2236, !2239, !2240, !2241, !2242, !2243}
!2202 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2199, file: !2200, line: 51, baseType: !865, size: 32)
!2203 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2199, file: !2200, line: 54, baseType: !963, size: 64, offset: 64)
!2204 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2199, file: !2200, line: 55, baseType: !963, size: 64, offset: 128)
!2205 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2199, file: !2200, line: 56, baseType: !963, size: 64, offset: 192)
!2206 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2199, file: !2200, line: 57, baseType: !963, size: 64, offset: 256)
!2207 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2199, file: !2200, line: 58, baseType: !963, size: 64, offset: 320)
!2208 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2199, file: !2200, line: 59, baseType: !963, size: 64, offset: 384)
!2209 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2199, file: !2200, line: 60, baseType: !963, size: 64, offset: 448)
!2210 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2199, file: !2200, line: 61, baseType: !963, size: 64, offset: 512)
!2211 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2199, file: !2200, line: 64, baseType: !963, size: 64, offset: 576)
!2212 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2199, file: !2200, line: 65, baseType: !963, size: 64, offset: 640)
!2213 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2199, file: !2200, line: 66, baseType: !963, size: 64, offset: 704)
!2214 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2199, file: !2200, line: 68, baseType: !2215, size: 64, offset: 768)
!2215 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2216, size: 64)
!2216 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !2200, line: 36, flags: DIFlagFwdDecl)
!2217 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2199, file: !2200, line: 70, baseType: !2218, size: 64, offset: 832)
!2218 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2199, size: 64)
!2219 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2199, file: !2200, line: 72, baseType: !865, size: 32, offset: 896)
!2220 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2199, file: !2200, line: 73, baseType: !865, size: 32, offset: 928)
!2221 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2199, file: !2200, line: 74, baseType: !2222, size: 64, offset: 960)
!2222 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !2223, line: 152, baseType: !957)
!2223 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!2224 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2199, file: !2200, line: 77, baseType: !2225, size: 16, offset: 1024)
!2225 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!2226 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2199, file: !2200, line: 78, baseType: !1838, size: 8, offset: 1040)
!2227 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2199, file: !2200, line: 79, baseType: !1082, size: 8, offset: 1048)
!2228 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2199, file: !2200, line: 81, baseType: !2229, size: 64, offset: 1088)
!2229 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2230, size: 64)
!2230 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !2200, line: 43, baseType: null)
!2231 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2199, file: !2200, line: 89, baseType: !2232, size: 64, offset: 1152)
!2232 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !2223, line: 153, baseType: !957)
!2233 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2199, file: !2200, line: 91, baseType: !2234, size: 64, offset: 1216)
!2234 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2235, size: 64)
!2235 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !2200, line: 37, flags: DIFlagFwdDecl)
!2236 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2199, file: !2200, line: 92, baseType: !2237, size: 64, offset: 1280)
!2237 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2238, size: 64)
!2238 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !2200, line: 38, flags: DIFlagFwdDecl)
!2239 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2199, file: !2200, line: 93, baseType: !2218, size: 64, offset: 1344)
!2240 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2199, file: !2200, line: 94, baseType: !866, size: 64, offset: 1408)
!2241 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2199, file: !2200, line: 95, baseType: !1344, size: 64, offset: 1472)
!2242 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2199, file: !2200, line: 96, baseType: !865, size: 32, offset: 1536)
!2243 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2199, file: !2200, line: 98, baseType: !2244, size: 160, offset: 1568)
!2244 = !DICompositeType(tag: DW_TAG_array_type, baseType: !895, size: 160, elements: !2245)
!2245 = !{!2246}
!2246 = !DISubrange(count: 20)
!2247 = !DIGlobalVariableExpression(var: !2248, expr: !DIExpression())
!2248 = distinct !DIGlobalVariable(name: "spec_info", scope: !2, file: !3, line: 212, type: !2249, isLocal: false, isDefinition: true)
!2249 = !DIDerivedType(tag: DW_TAG_typedef, name: "spec_info_t", file: !398, line: 646, baseType: !2250)
!2250 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2251, size: 64)
!2251 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "spec_info_def", file: !398, line: 626, size: 256, elements: !2252)
!2252 = !{!2253, !2254, !2255, !2257, !2258}
!2253 = !DIDerivedType(tag: DW_TAG_member, name: "mask", scope: !2251, file: !398, line: 630, baseType: !865, size: 32)
!2254 = !DIDerivedType(tag: DW_TAG_member, name: "dump", scope: !2251, file: !398, line: 633, baseType: !2196, size: 64, offset: 64)
!2255 = !DIDerivedType(tag: DW_TAG_member, name: "data_weakness_cutoff", scope: !2251, file: !398, line: 637, baseType: !2256, size: 32, offset: 128)
!2256 = !DIDerivedType(tag: DW_TAG_typedef, name: "dw_t", file: !398, line: 221, baseType: !865)
!2257 = !DIDerivedType(tag: DW_TAG_member, name: "control_weakness_cutoff", scope: !2251, file: !398, line: 641, baseType: !865, size: 32, offset: 160)
!2258 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2251, file: !398, line: 644, baseType: !865, size: 32, offset: 192)
!2259 = !DIGlobalVariableExpression(var: !2260, expr: !DIExpression())
!2260 = distinct !DIGlobalVariable(name: "adding_bb_to_current_region_p", scope: !2, file: !3, line: 237, type: !1100, isLocal: false, isDefinition: true)
!2261 = !DIGlobalVariableExpression(var: !2262, expr: !DIExpression())
!2262 = distinct !DIGlobalVariable(name: "ready_try", scope: !2, file: !3, line: 311, type: !963, isLocal: false, isDefinition: true)
!2263 = !DIGlobalVariableExpression(var: !2264, expr: !DIExpression())
!2264 = distinct !DIGlobalVariable(name: "ready", scope: !2, file: !3, line: 314, type: !2265, isLocal: false, isDefinition: true)
!2265 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ready_list", file: !398, line: 186, size: 192, elements: !2266)
!2266 = !{!2267, !2268, !2269, !2270, !2271}
!2267 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2265, file: !398, line: 188, baseType: !2098, size: 64)
!2268 = !DIDerivedType(tag: DW_TAG_member, name: "veclen", scope: !2265, file: !398, line: 189, baseType: !865, size: 32, offset: 64)
!2269 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !2265, file: !398, line: 190, baseType: !865, size: 32, offset: 96)
!2270 = !DIDerivedType(tag: DW_TAG_member, name: "n_ready", scope: !2265, file: !398, line: 191, baseType: !865, size: 32, offset: 128)
!2271 = !DIDerivedType(tag: DW_TAG_member, name: "n_debug", scope: !2265, file: !398, line: 192, baseType: !865, size: 32, offset: 160)
!2272 = !DIGlobalVariableExpression(var: !2273, expr: !DIExpression())
!2273 = distinct !DIGlobalVariable(name: "haifa_common_sched_info", scope: !2, file: !3, line: 339, type: !2274, isLocal: false, isDefinition: true)
!2274 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2275)
!2275 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "common_sched_info_def", file: !398, line: 81, size: 320, elements: !2276)
!2276 = !{!2277, !2281, !2285, !2289, !2293}
!2277 = !DIDerivedType(tag: DW_TAG_member, name: "fix_recovery_cfg", scope: !2275, file: !398, line: 89, baseType: !2278, size: 64)
!2278 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2279, size: 64)
!2279 = !DISubroutineType(types: !2280)
!2280 = !{null, !865, !865, !865}
!2281 = !DIDerivedType(tag: DW_TAG_member, name: "add_block", scope: !2275, file: !398, line: 96, baseType: !2282, size: 64, offset: 64)
!2282 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2283, size: 64)
!2283 = !DISubroutineType(types: !2284)
!2284 = !{null, !1406, !1406}
!2285 = !DIDerivedType(tag: DW_TAG_member, name: "estimate_number_of_insns", scope: !2275, file: !398, line: 99, baseType: !2286, size: 64, offset: 128)
!2286 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2287, size: 64)
!2287 = !DISubroutineType(types: !2288)
!2288 = !{!865, !1406}
!2289 = !DIDerivedType(tag: DW_TAG_member, name: "luid_for_non_insn", scope: !2275, file: !398, line: 105, baseType: !2290, size: 64, offset: 192)
!2290 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2291, size: 64)
!2291 = !DISubroutineType(types: !2292)
!2292 = !{!865, !867}
!2293 = !DIDerivedType(tag: DW_TAG_member, name: "sched_pass_id", scope: !2275, file: !398, line: 108, baseType: !397, size: 32, offset: 256)
!2294 = !DIGlobalVariableExpression(var: !2295, expr: !DIExpression())
!2295 = distinct !DIGlobalVariable(name: "sched_luids", scope: !2, file: !3, line: 351, type: !2125, isLocal: false, isDefinition: true)
!2296 = !DIGlobalVariableExpression(var: !2297, expr: !DIExpression())
!2297 = distinct !DIGlobalVariable(name: "sched_max_luid", scope: !2, file: !3, line: 354, type: !865, isLocal: false, isDefinition: true)
!2298 = !DIGlobalVariableExpression(var: !2299, expr: !DIExpression())
!2299 = distinct !DIGlobalVariable(name: "h_i_d", scope: !2, file: !3, line: 357, type: !2137, isLocal: false, isDefinition: true)
!2300 = !DIGlobalVariableExpression(var: !2301, expr: !DIExpression())
!2301 = distinct !DIGlobalVariable(name: "issue_rate", scope: !2, file: !3, line: 158, type: !865, isLocal: false, isDefinition: true)
!2302 = !DIGlobalVariableExpression(var: !2303, expr: !DIExpression())
!2303 = distinct !DIGlobalVariable(name: "common_sched_info", scope: !2, file: !3, line: 190, type: !2304, isLocal: false, isDefinition: true)
!2304 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2275, size: 64)
!2305 = !DIGlobalVariableExpression(var: !2306, expr: !DIExpression())
!2306 = distinct !DIGlobalVariable(name: "note_list", scope: !2, file: !3, line: 207, type: !867, isLocal: false, isDefinition: true)
!2307 = !DIGlobalVariableExpression(var: !2308, expr: !DIExpression())
!2308 = distinct !DIGlobalVariable(name: "spec_info_var", scope: !2, file: !3, line: 209, type: !2251, isLocal: true, isDefinition: true)
!2309 = !DIGlobalVariableExpression(var: !2310, expr: !DIExpression())
!2310 = distinct !DIGlobalVariable(name: "haifa_recovery_bb_recently_added_p", scope: !2, file: !3, line: 216, type: !1100, isLocal: true, isDefinition: true)
!2311 = !DIGlobalVariableExpression(var: !2312, expr: !DIExpression())
!2312 = distinct !DIGlobalVariable(name: "haifa_recovery_bb_ever_added_p", scope: !2, file: !3, line: 221, type: !1100, isLocal: false, isDefinition: true)
!2313 = !DIGlobalVariableExpression(var: !2314, expr: !DIExpression())
!2314 = distinct !DIGlobalVariable(name: "nr_begin_data", scope: !2, file: !3, line: 224, type: !865, isLocal: true, isDefinition: true)
!2315 = !DIGlobalVariableExpression(var: !2316, expr: !DIExpression())
!2316 = distinct !DIGlobalVariable(name: "nr_be_in_data", scope: !2, file: !3, line: 224, type: !865, isLocal: true, isDefinition: true)
!2317 = !DIGlobalVariableExpression(var: !2318, expr: !DIExpression())
!2318 = distinct !DIGlobalVariable(name: "nr_begin_control", scope: !2, file: !3, line: 224, type: !865, isLocal: true, isDefinition: true)
!2319 = !DIGlobalVariableExpression(var: !2320, expr: !DIExpression())
!2320 = distinct !DIGlobalVariable(name: "nr_be_in_control", scope: !2, file: !3, line: 224, type: !865, isLocal: true, isDefinition: true)
!2321 = !DIGlobalVariableExpression(var: !2322, expr: !DIExpression())
!2322 = distinct !DIGlobalVariable(name: "before_recovery", scope: !2, file: !3, line: 230, type: !1406, isLocal: true, isDefinition: true)
!2323 = !DIGlobalVariableExpression(var: !2324, expr: !DIExpression())
!2324 = distinct !DIGlobalVariable(name: "after_recovery", scope: !2, file: !3, line: 234, type: !1406, isLocal: false, isDefinition: true)
!2325 = !DIGlobalVariableExpression(var: !2326, expr: !DIExpression())
!2326 = distinct !DIGlobalVariable(name: "insn_queue", scope: !2, file: !3, line: 284, type: !2098, isLocal: true, isDefinition: true)
!2327 = !DIGlobalVariableExpression(var: !2328, expr: !DIExpression())
!2328 = distinct !DIGlobalVariable(name: "curr_state", scope: !2, file: !3, line: 303, type: !2109, isLocal: false, isDefinition: true)
!2329 = !DIGlobalVariableExpression(var: !2330, expr: !DIExpression())
!2330 = distinct !DIGlobalVariable(name: "dfa_state_size", scope: !2, file: !3, line: 307, type: !1344, isLocal: false, isDefinition: true)
!2331 = !DIGlobalVariableExpression(var: !2332, expr: !DIExpression())
!2332 = distinct !DIGlobalVariable(name: "clock_var", scope: !2, file: !3, line: 320, type: !865, isLocal: true, isDefinition: true)
!2333 = !DIGlobalVariableExpression(var: !2334, expr: !DIExpression())
!2334 = distinct !DIGlobalVariable(name: "sched_scan_info", scope: !2, file: !3, line: 348, type: !2335, isLocal: false, isDefinition: true)
!2335 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2336, size: 64)
!2336 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2337)
!2337 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "sched_scan_info_def", file: !398, line: 44, size: 256, elements: !2338)
!2338 = !{!2339, !2343, !2347, !2348}
!2339 = !DIDerivedType(tag: DW_TAG_member, name: "extend_bb", scope: !2337, file: !398, line: 49, baseType: !2340, size: 64)
!2340 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2341, size: 64)
!2341 = !DISubroutineType(types: !2342)
!2342 = !{null}
!2343 = !DIDerivedType(tag: DW_TAG_member, name: "init_bb", scope: !2337, file: !398, line: 53, baseType: !2344, size: 64, offset: 64)
!2344 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2345, size: 64)
!2345 = !DISubroutineType(types: !2346)
!2346 = !{null, !1406}
!2347 = !DIDerivedType(tag: DW_TAG_member, name: "extend_insn", scope: !2337, file: !398, line: 58, baseType: !2340, size: 64, offset: 128)
!2348 = !DIDerivedType(tag: DW_TAG_member, name: "init_insn", scope: !2337, file: !398, line: 62, baseType: !2349, size: 64, offset: 192)
!2349 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2350, size: 64)
!2350 = !DISubroutineType(types: !2351)
!2351 = !{null, !867}
!2352 = !DIGlobalVariableExpression(var: !2353, expr: !DIExpression())
!2353 = distinct !DIGlobalVariable(name: "sched_init_only_bb", scope: !2, file: !3, line: 359, type: !2282, isLocal: false, isDefinition: true)
!2354 = !DIGlobalVariableExpression(var: !2355, expr: !DIExpression())
!2355 = distinct !DIGlobalVariable(name: "sched_split_block", scope: !2, file: !3, line: 363, type: !2356, isLocal: false, isDefinition: true)
!2356 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2357, size: 64)
!2357 = !DISubroutineType(types: !2358)
!2358 = !{!1406, !1406, !867}
!2359 = !DIGlobalVariableExpression(var: !2360, expr: !DIExpression())
!2360 = distinct !DIGlobalVariable(name: "sched_create_empty_bb", scope: !2, file: !3, line: 366, type: !2361, isLocal: false, isDefinition: true)
!2361 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2362, size: 64)
!2362 = !DISubroutineType(types: !2363)
!2363 = !{!1406, !1406}
!2364 = !DIGlobalVariableExpression(var: !2365, expr: !DIExpression())
!2365 = distinct !DIGlobalVariable(name: "current_sched_info", scope: !2, file: !3, line: 581, type: !2366, isLocal: false, isDefinition: true)
!2366 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2367, size: 64)
!2367 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "haifa_sched_info", file: !398, line: 556, size: 1088, elements: !2368)
!2368 = !{!2369, !2370, !2371, !2375, !2379, !2383, !2390, !2391, !2395, !2396, !2397, !2398, !2399, !2400, !2401, !2405, !2409, !2410}
!2369 = !DIDerivedType(tag: DW_TAG_member, name: "init_ready_list", scope: !2367, file: !398, line: 560, baseType: !2340, size: 64)
!2370 = !DIDerivedType(tag: DW_TAG_member, name: "can_schedule_ready_p", scope: !2367, file: !398, line: 563, baseType: !2290, size: 64, offset: 64)
!2371 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_more_p", scope: !2367, file: !398, line: 565, baseType: !2372, size: 64, offset: 128)
!2372 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2373, size: 64)
!2373 = !DISubroutineType(types: !2374)
!2374 = !{!865}
!2375 = !DIDerivedType(tag: DW_TAG_member, name: "new_ready", scope: !2367, file: !398, line: 571, baseType: !2376, size: 64, offset: 192)
!2376 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2377, size: 64)
!2377 = !DISubroutineType(types: !2378)
!2378 = !{!2099, !867, !2099}
!2379 = !DIDerivedType(tag: DW_TAG_member, name: "rank", scope: !2367, file: !398, line: 575, baseType: !2380, size: 64, offset: 256)
!2380 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2381, size: 64)
!2381 = !DISubroutineType(types: !2382)
!2382 = !{!865, !867, !867}
!2383 = !DIDerivedType(tag: DW_TAG_member, name: "print_insn", scope: !2367, file: !398, line: 580, baseType: !2384, size: 64, offset: 320)
!2384 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2385, size: 64)
!2385 = !DISubroutineType(types: !2386)
!2386 = !{!893, !2387, !865}
!2387 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_rtx", file: !868, line: 51, baseType: !2388)
!2388 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2389, size: 64)
!2389 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !870)
!2390 = !DIDerivedType(tag: DW_TAG_member, name: "contributes_to_priority", scope: !2367, file: !398, line: 583, baseType: !2380, size: 64, offset: 384)
!2391 = !DIDerivedType(tag: DW_TAG_member, name: "insn_finishes_block_p", scope: !2367, file: !398, line: 587, baseType: !2392, size: 64, offset: 448)
!2392 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2393, size: 64)
!2393 = !DISubroutineType(types: !2394)
!2394 = !{!1100, !867}
!2395 = !DIDerivedType(tag: DW_TAG_member, name: "prev_head", scope: !2367, file: !398, line: 590, baseType: !867, size: 64, offset: 512)
!2396 = !DIDerivedType(tag: DW_TAG_member, name: "next_tail", scope: !2367, file: !398, line: 590, baseType: !867, size: 64, offset: 576)
!2397 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !2367, file: !398, line: 594, baseType: !867, size: 64, offset: 640)
!2398 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !2367, file: !398, line: 594, baseType: !867, size: 64, offset: 704)
!2399 = !DIDerivedType(tag: DW_TAG_member, name: "queue_must_finish_empty", scope: !2367, file: !398, line: 597, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!2400 = !DIDerivedType(tag: DW_TAG_member, name: "sched_max_insns_priority", scope: !2367, file: !398, line: 600, baseType: !865, size: 32, offset: 800)
!2401 = !DIDerivedType(tag: DW_TAG_member, name: "add_remove_insn", scope: !2367, file: !398, line: 606, baseType: !2402, size: 64, offset: 832)
!2402 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2403, size: 64)
!2403 = !DISubroutineType(types: !2404)
!2404 = !{null, !867, !865}
!2405 = !DIDerivedType(tag: DW_TAG_member, name: "begin_schedule_ready", scope: !2367, file: !398, line: 611, baseType: !2406, size: 64, offset: 896)
!2406 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2407, size: 64)
!2407 = !DISubroutineType(types: !2408)
!2408 = !{null, !867, !867}
!2409 = !DIDerivedType(tag: DW_TAG_member, name: "advance_target_bb", scope: !2367, file: !398, line: 617, baseType: !2356, size: 64, offset: 960)
!2410 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2367, file: !398, line: 621, baseType: !7, size: 32, offset: 1024)
!2411 = !DIGlobalVariableExpression(var: !2412, expr: !DIExpression())
!2412 = distinct !DIGlobalVariable(name: "sched_pressure_p", scope: !2, file: !3, line: 592, type: !1100, isLocal: false, isDefinition: true)
!2413 = !DIGlobalVariableExpression(var: !2414, expr: !DIExpression())
!2414 = distinct !DIGlobalVariable(name: "sched_regno_cover_class", scope: !2, file: !3, line: 596, type: !2100, isLocal: false, isDefinition: true)
!2415 = !DIGlobalVariableExpression(var: !2416, expr: !DIExpression())
!2416 = distinct !DIGlobalVariable(name: "curr_reg_live", scope: !2, file: !3, line: 606, type: !2101, isLocal: true, isDefinition: true)
!2417 = !DIGlobalVariableExpression(var: !2418, expr: !DIExpression())
!2418 = distinct !DIGlobalVariable(name: "saved_reg_live", scope: !2, file: !3, line: 609, type: !2101, isLocal: true, isDefinition: true)
!2419 = !DIGlobalVariableExpression(var: !2420, expr: !DIExpression())
!2420 = distinct !DIGlobalVariable(name: "region_ref_regs", scope: !2, file: !3, line: 612, type: !2101, isLocal: true, isDefinition: true)
!2421 = !DIGlobalVariableExpression(var: !2422, expr: !DIExpression())
!2422 = distinct !DIGlobalVariable(name: "last_scheduled_insn", scope: !2, file: !3, line: 799, type: !867, isLocal: true, isDefinition: true)
!2423 = !DIGlobalVariableExpression(var: !2424, expr: !DIExpression())
!2424 = distinct !DIGlobalVariable(name: "last_clock_var", scope: !2, file: !3, line: 1566, type: !865, isLocal: true, isDefinition: true)
!2425 = !DIGlobalVariableExpression(var: !2426, expr: !DIExpression())
!2426 = distinct !DIGlobalVariable(name: "choice_stack", scope: !2, file: !3, line: 2402, type: !2102, isLocal: true, isDefinition: true)
!2427 = !DIGlobalVariableExpression(var: !2428, expr: !DIExpression())
!2428 = distinct !DIGlobalVariable(name: "cycle_issued_insns", scope: !2, file: !3, line: 2407, type: !865, isLocal: false, isDefinition: true)
!2429 = !DIGlobalVariableExpression(var: !2430, expr: !DIExpression())
!2430 = distinct !DIGlobalVariable(name: "dfa_lookahead", scope: !2, file: !3, line: 2410, type: !865, isLocal: false, isDefinition: true)
!2431 = !DIGlobalVariableExpression(var: !2432, expr: !DIExpression())
!2432 = distinct !DIGlobalVariable(name: "max_lookahead_tries", scope: !2, file: !3, line: 2421, type: !865, isLocal: true, isDefinition: true)
!2433 = !DIGlobalVariableExpression(var: !2434, expr: !DIExpression())
!2434 = distinct !DIGlobalVariable(name: "sched_verbose_param", scope: !2, file: !3, line: 169, type: !865, isLocal: true, isDefinition: true)
!2435 = !DIGlobalVariableExpression(var: !2436, expr: !DIExpression())
!2436 = distinct !DIGlobalVariable(name: "death", scope: !2437, file: !3, line: 1133, type: !2439, isLocal: true, isDefinition: true)
!2437 = distinct !DISubprogram(name: "setup_insn_reg_pressure_info", scope: !3, file: !3, line: 1124, type: !2350, scopeLine: 1125, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!2438 = !{}
!2439 = !DICompositeType(tag: DW_TAG_array_type, baseType: !865, size: 864, elements: !2440)
!2440 = !{!2441}
!2441 = !DISubrange(count: 27)
!2442 = !DIGlobalVariableExpression(var: !2443, expr: !DIExpression())
!2443 = distinct !DIGlobalVariable(name: "curr_reg_pressure", scope: !2, file: !3, line: 600, type: !2439, isLocal: true, isDefinition: true)
!2444 = !DIGlobalVariableExpression(var: !2445, expr: !DIExpression())
!2445 = distinct !DIGlobalVariable(name: "max_reg_pressure", scope: !2446, file: !3, line: 1591, type: !2439, isLocal: true, isDefinition: true)
!2446 = distinct !DISubprogram(name: "setup_insn_max_reg_pressure", scope: !3, file: !3, line: 1586, type: !2447, scopeLine: 1587, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!2447 = !DISubroutineType(types: !2448)
!2448 = !{null, !867, !1100}
!2449 = !DIGlobalVariableExpression(var: !2450, expr: !DIExpression())
!2450 = distinct !DIGlobalVariable(name: "saved_reg_pressure", scope: !2, file: !3, line: 603, type: !2439, isLocal: true, isDefinition: true)
!2451 = !DIGlobalVariableExpression(var: !2452, expr: !DIExpression())
!2452 = distinct !DIGlobalVariable(name: "cached_first_cycle_multipass_dfa_lookahead", scope: !2, file: !3, line: 2426, type: !865, isLocal: true, isDefinition: true)
!2453 = !DIGlobalVariableExpression(var: !2454, expr: !DIExpression())
!2454 = distinct !DIGlobalVariable(name: "q_ptr", scope: !2, file: !3, line: 285, type: !865, isLocal: true, isDefinition: true)
!2455 = !DIGlobalVariableExpression(var: !2456, expr: !DIExpression())
!2456 = distinct !DIGlobalVariable(name: "q_size", scope: !2, file: !3, line: 286, type: !865, isLocal: true, isDefinition: true)
!2457 = !DIGlobalVariableExpression(var: !2458, expr: !DIExpression())
!2458 = distinct !DIGlobalVariable(name: "readyp", scope: !2, file: !3, line: 317, type: !2459, isLocal: true, isDefinition: true)
!2459 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2265, size: 64)
!2460 = !DIGlobalVariableExpression(var: !2461, expr: !DIExpression())
!2461 = distinct !DIGlobalVariable(name: "cached_issue_rate", scope: !2, file: !3, line: 2430, type: !865, isLocal: true, isDefinition: true)
!2462 = !DIGlobalVariableExpression(var: !2463, expr: !DIExpression())
!2463 = distinct !DIGlobalVariable(name: "null_link", scope: !2464, file: !398, line: 1430, type: !2475, isLocal: true, isDefinition: true)
!2464 = distinct !DISubprogram(name: "sd_iterator_start", scope: !398, file: !398, line: 1427, type: !2465, scopeLine: 1428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!2465 = !DISubroutineType(types: !2466)
!2466 = !{!2467, !867, !2471}
!2467 = !DIDerivedType(tag: DW_TAG_typedef, name: "sd_iterator_def", file: !398, line: 1414, baseType: !2468)
!2468 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_sd_iterator", file: !398, line: 1395, size: 256, elements: !2469)
!2469 = !{!2470, !2472, !2473, !2496}
!2470 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !2468, file: !398, line: 1398, baseType: !2471, size: 32)
!2471 = !DIDerivedType(tag: DW_TAG_typedef, name: "sd_list_types_def", file: !398, line: 1390, baseType: !865)
!2472 = !DIDerivedType(tag: DW_TAG_member, name: "insn", scope: !2468, file: !398, line: 1401, baseType: !867, size: 64, offset: 64)
!2473 = !DIDerivedType(tag: DW_TAG_member, name: "linkp", scope: !2468, file: !398, line: 1408, baseType: !2474, size: 64, offset: 128)
!2474 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2475, size: 64)
!2475 = !DIDerivedType(tag: DW_TAG_typedef, name: "dep_link_t", file: !398, line: 280, baseType: !2476)
!2476 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2477, size: 64)
!2477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_dep_link", file: !398, line: 265, size: 192, elements: !2478)
!2478 = !{!2479, !2493, !2494}
!2479 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !2477, file: !398, line: 268, baseType: !2480, size: 64)
!2480 = !DIDerivedType(tag: DW_TAG_typedef, name: "dep_node_t", file: !398, line: 261, baseType: !2481)
!2481 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2482, size: 64)
!2482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_dep_node", file: !398, line: 405, size: 576, elements: !2483)
!2483 = !{!2484, !2485, !2492}
!2484 = !DIDerivedType(tag: DW_TAG_member, name: "back", scope: !2482, file: !398, line: 408, baseType: !2477, size: 192)
!2485 = !DIDerivedType(tag: DW_TAG_member, name: "dep", scope: !2482, file: !398, line: 411, baseType: !2486, size: 192, offset: 192)
!2486 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_dep", file: !398, line: 227, size: 192, elements: !2487)
!2487 = !{!2488, !2489, !2490, !2491}
!2488 = !DIDerivedType(tag: DW_TAG_member, name: "pro", scope: !2486, file: !398, line: 230, baseType: !867, size: 64)
!2489 = !DIDerivedType(tag: DW_TAG_member, name: "con", scope: !2486, file: !398, line: 233, baseType: !867, size: 64, offset: 64)
!2490 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2486, file: !398, line: 237, baseType: !405, size: 32, offset: 128)
!2491 = !DIDerivedType(tag: DW_TAG_member, name: "status", scope: !2486, file: !398, line: 241, baseType: !2099, size: 32, offset: 160)
!2492 = !DIDerivedType(tag: DW_TAG_member, name: "forw", scope: !2482, file: !398, line: 414, baseType: !2477, size: 192, offset: 384)
!2493 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2477, file: !398, line: 271, baseType: !2476, size: 64, offset: 64)
!2494 = !DIDerivedType(tag: DW_TAG_member, name: "prev_nextp", scope: !2477, file: !398, line: 278, baseType: !2495, size: 64, offset: 128)
!2495 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2476, size: 64)
!2496 = !DIDerivedType(tag: DW_TAG_member, name: "resolved_p", scope: !2468, file: !398, line: 1411, baseType: !1100, size: 8, offset: 192)
!2497 = !DIGlobalVariableExpression(var: !2498, expr: !DIExpression())
!2498 = distinct !DIGlobalVariable(name: "sched_ready_n_insns", scope: !2, file: !3, line: 3923, type: !865, isLocal: true, isDefinition: true)
!2499 = !DIGlobalVariableExpression(var: !2500, expr: !DIExpression())
!2500 = distinct !DIGlobalVariable(name: "bb_header", scope: !2, file: !3, line: 227, type: !2098, isLocal: true, isDefinition: true)
!2501 = !{i32 7, !"Dwarf Version", i32 4}
!2502 = !{i32 2, !"Debug Info Version", i32 3}
!2503 = !{i32 1, !"wchar_size", i32 4}
!2504 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!2505 = distinct !DISubprogram(name: "fix_sched_param", scope: !3, file: !3, line: 180, type: !2506, scopeLine: 181, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!2506 = !DISubroutineType(types: !2507)
!2507 = !{null, !893, !893}
!2508 = !DILocalVariable(name: "param", arg: 1, scope: !2505, file: !3, line: 180, type: !893)
!2509 = !DILocation(line: 180, column: 30, scope: !2505)
!2510 = !DILocalVariable(name: "val", arg: 2, scope: !2505, file: !3, line: 180, type: !893)
!2511 = !DILocation(line: 180, column: 49, scope: !2505)
!2512 = !DILocation(line: 182, column: 16, scope: !2513)
!2513 = distinct !DILexicalBlock(scope: !2505, file: !3, line: 182, column: 7)
!2514 = !DILocation(line: 182, column: 8, scope: !2513)
!2515 = !DILocation(line: 182, column: 7, scope: !2505)
!2516 = !DILocation(line: 183, column: 33, scope: !2513)
!2517 = !DILocation(line: 183, column: 27, scope: !2513)
!2518 = !DILocation(line: 183, column: 25, scope: !2513)
!2519 = !DILocation(line: 183, column: 5, scope: !2513)
!2520 = !DILocation(line: 185, column: 55, scope: !2513)
!2521 = !DILocation(line: 185, column: 5, scope: !2513)
!2522 = !DILocation(line: 186, column: 1, scope: !2505)
!2523 = distinct !DISubprogram(name: "haifa_luid_for_non_insn", scope: !3, file: !3, line: 3982, type: !2291, scopeLine: 3983, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!2524 = !DILocalVariable(name: "x", arg: 1, scope: !2523, file: !3, line: 3982, type: !867)
!2525 = !DILocation(line: 3982, column: 30, scope: !2523)
!2526 = !DILocation(line: 3984, column: 3, scope: !2523)
!2527 = !DILocation(line: 3986, column: 3, scope: !2523)
!2528 = distinct !DISubprogram(name: "haifa_classify_insn", scope: !3, file: !3, line: 499, type: !2529, scopeLine: 500, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!2529 = !DISubroutineType(types: !2530)
!2530 = !{!865, !2387}
!2531 = !DILocalVariable(name: "insn", arg: 1, scope: !2528, file: !3, line: 499, type: !2387)
!2532 = !DILocation(line: 499, column: 32, scope: !2528)
!2533 = !DILocation(line: 501, column: 30, scope: !2528)
!2534 = !DILocation(line: 501, column: 10, scope: !2528)
!2535 = !DILocation(line: 501, column: 3, scope: !2528)
!2536 = distinct !DISubprogram(name: "haifa_classify_rtx", scope: !3, file: !3, line: 443, type: !2529, scopeLine: 444, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!2537 = !DILocalVariable(name: "x", arg: 1, scope: !2536, file: !3, line: 443, type: !2387)
!2538 = !DILocation(line: 443, column: 31, scope: !2536)
!2539 = !DILocalVariable(name: "tmp_class", scope: !2536, file: !3, line: 445, type: !865)
!2540 = !DILocation(line: 445, column: 7, scope: !2536)
!2541 = !DILocalVariable(name: "insn_class", scope: !2536, file: !3, line: 446, type: !865)
!2542 = !DILocation(line: 446, column: 7, scope: !2536)
!2543 = !DILocalVariable(name: "code", scope: !2536, file: !3, line: 447, type: !440)
!2544 = !DILocation(line: 447, column: 17, scope: !2536)
!2545 = !DILocation(line: 449, column: 7, scope: !2546)
!2546 = distinct !DILexicalBlock(scope: !2536, file: !3, line: 449, column: 7)
!2547 = !DILocation(line: 449, column: 20, scope: !2546)
!2548 = !DILocation(line: 449, column: 7, scope: !2536)
!2549 = !DILocalVariable(name: "i", scope: !2550, file: !3, line: 451, type: !865)
!2550 = distinct !DILexicalBlock(scope: !2546, file: !3, line: 450, column: 5)
!2551 = !DILocation(line: 451, column: 11, scope: !2550)
!2552 = !DILocalVariable(name: "len", scope: !2550, file: !3, line: 451, type: !865)
!2553 = !DILocation(line: 451, column: 14, scope: !2550)
!2554 = !DILocation(line: 451, column: 20, scope: !2550)
!2555 = !DILocation(line: 453, column: 16, scope: !2556)
!2556 = distinct !DILexicalBlock(scope: !2550, file: !3, line: 453, column: 7)
!2557 = !DILocation(line: 453, column: 20, scope: !2556)
!2558 = !DILocation(line: 453, column: 14, scope: !2556)
!2559 = !DILocation(line: 453, column: 12, scope: !2556)
!2560 = !DILocation(line: 453, column: 25, scope: !2561)
!2561 = distinct !DILexicalBlock(scope: !2556, file: !3, line: 453, column: 7)
!2562 = !DILocation(line: 453, column: 27, scope: !2561)
!2563 = !DILocation(line: 453, column: 7, scope: !2556)
!2564 = !DILocation(line: 455, column: 36, scope: !2565)
!2565 = distinct !DILexicalBlock(scope: !2561, file: !3, line: 454, column: 2)
!2566 = !DILocation(line: 455, column: 16, scope: !2565)
!2567 = !DILocation(line: 455, column: 14, scope: !2565)
!2568 = !DILocation(line: 456, column: 17, scope: !2565)
!2569 = !DILocation(line: 456, column: 15, scope: !2565)
!2570 = !DILocation(line: 457, column: 8, scope: !2571)
!2571 = distinct !DILexicalBlock(scope: !2565, file: !3, line: 457, column: 8)
!2572 = !DILocation(line: 457, column: 19, scope: !2571)
!2573 = !DILocation(line: 457, column: 33, scope: !2571)
!2574 = !DILocation(line: 457, column: 36, scope: !2571)
!2575 = !DILocation(line: 457, column: 47, scope: !2571)
!2576 = !DILocation(line: 457, column: 8, scope: !2565)
!2577 = !DILocation(line: 458, column: 6, scope: !2571)
!2578 = !DILocation(line: 459, column: 2, scope: !2565)
!2579 = !DILocation(line: 453, column: 34, scope: !2561)
!2580 = !DILocation(line: 453, column: 7, scope: !2561)
!2581 = distinct !{!2581, !2563, !2582}
!2582 = !DILocation(line: 459, column: 2, scope: !2556)
!2583 = !DILocation(line: 460, column: 5, scope: !2550)
!2584 = !DILocation(line: 463, column: 14, scope: !2585)
!2585 = distinct !DILexicalBlock(scope: !2546, file: !3, line: 462, column: 5)
!2586 = !DILocation(line: 463, column: 12, scope: !2585)
!2587 = !DILocation(line: 464, column: 15, scope: !2585)
!2588 = !DILocation(line: 464, column: 7, scope: !2585)
!2589 = !DILocation(line: 468, column: 30, scope: !2590)
!2590 = distinct !DILexicalBlock(scope: !2585, file: !3, line: 465, column: 2)
!2591 = !DILocation(line: 468, column: 16, scope: !2590)
!2592 = !DILocation(line: 468, column: 14, scope: !2590)
!2593 = !DILocation(line: 469, column: 4, scope: !2590)
!2594 = !DILocation(line: 472, column: 30, scope: !2590)
!2595 = !DILocation(line: 472, column: 16, scope: !2590)
!2596 = !DILocation(line: 472, column: 14, scope: !2590)
!2597 = !DILocation(line: 473, column: 8, scope: !2598)
!2598 = distinct !DILexicalBlock(scope: !2590, file: !3, line: 473, column: 8)
!2599 = !DILocation(line: 473, column: 18, scope: !2598)
!2600 = !DILocation(line: 473, column: 8, scope: !2590)
!2601 = !DILocation(line: 474, column: 6, scope: !2598)
!2602 = !DILocation(line: 477, column: 6, scope: !2590)
!2603 = !DILocation(line: 476, column: 14, scope: !2590)
!2604 = !DILocation(line: 479, column: 4, scope: !2590)
!2605 = !DILocation(line: 481, column: 36, scope: !2590)
!2606 = !DILocation(line: 481, column: 16, scope: !2590)
!2607 = !DILocation(line: 481, column: 14, scope: !2590)
!2608 = !DILocation(line: 482, column: 8, scope: !2609)
!2609 = distinct !DILexicalBlock(scope: !2590, file: !3, line: 482, column: 8)
!2610 = !DILocation(line: 482, column: 18, scope: !2609)
!2611 = !DILocation(line: 482, column: 8, scope: !2590)
!2612 = !DILocation(line: 483, column: 6, scope: !2609)
!2613 = !DILocation(line: 484, column: 16, scope: !2590)
!2614 = !DILocation(line: 484, column: 14, scope: !2590)
!2615 = !DILocation(line: 486, column: 4, scope: !2590)
!2616 = !DILocation(line: 488, column: 14, scope: !2590)
!2617 = !DILocation(line: 489, column: 4, scope: !2590)
!2618 = !DILocation(line: 491, column: 2, scope: !2590)
!2619 = !DILocation(line: 492, column: 20, scope: !2585)
!2620 = !DILocation(line: 492, column: 18, scope: !2585)
!2621 = !DILocation(line: 495, column: 10, scope: !2536)
!2622 = !DILocation(line: 495, column: 3, scope: !2536)
!2623 = distinct !DISubprogram(name: "sched_init_region_reg_pressure_info", scope: !3, file: !3, line: 618, type: !2341, scopeLine: 619, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!2624 = !DILocation(line: 620, column: 17, scope: !2623)
!2625 = !DILocation(line: 620, column: 3, scope: !2623)
!2626 = !DILocation(line: 621, column: 1, scope: !2623)
!2627 = distinct !DISubprogram(name: "insn_cost", scope: !3, file: !3, line: 809, type: !2291, scopeLine: 810, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!2628 = !DILocalVariable(name: "insn", arg: 1, scope: !2627, file: !3, line: 809, type: !867)
!2629 = !DILocation(line: 809, column: 16, scope: !2627)
!2630 = !DILocalVariable(name: "cost", scope: !2627, file: !3, line: 811, type: !865)
!2631 = !DILocation(line: 811, column: 7, scope: !2627)
!2632 = !DILocation(line: 813, column: 7, scope: !2633)
!2633 = distinct !DILexicalBlock(scope: !2627, file: !3, line: 813, column: 7)
!2634 = !DILocation(line: 813, column: 7, scope: !2627)
!2635 = !DILocation(line: 815, column: 27, scope: !2636)
!2636 = distinct !DILexicalBlock(scope: !2637, file: !3, line: 815, column: 11)
!2637 = distinct !DILexicalBlock(scope: !2633, file: !3, line: 814, column: 5)
!2638 = !DILocation(line: 815, column: 11, scope: !2636)
!2639 = !DILocation(line: 815, column: 33, scope: !2636)
!2640 = !DILocation(line: 815, column: 11, scope: !2637)
!2641 = !DILocation(line: 816, column: 2, scope: !2636)
!2642 = !DILocation(line: 818, column: 36, scope: !2637)
!2643 = !DILocation(line: 818, column: 14, scope: !2637)
!2644 = !DILocation(line: 818, column: 12, scope: !2637)
!2645 = !DILocation(line: 819, column: 11, scope: !2646)
!2646 = distinct !DILexicalBlock(scope: !2637, file: !3, line: 819, column: 11)
!2647 = !DILocation(line: 819, column: 16, scope: !2646)
!2648 = !DILocation(line: 819, column: 11, scope: !2637)
!2649 = !DILocation(line: 820, column: 7, scope: !2646)
!2650 = !DILocation(line: 820, column: 2, scope: !2646)
!2651 = !DILocation(line: 822, column: 14, scope: !2637)
!2652 = !DILocation(line: 822, column: 7, scope: !2637)
!2653 = !DILocation(line: 825, column: 10, scope: !2627)
!2654 = !DILocation(line: 825, column: 8, scope: !2627)
!2655 = !DILocation(line: 827, column: 7, scope: !2656)
!2656 = distinct !DILexicalBlock(scope: !2627, file: !3, line: 827, column: 7)
!2657 = !DILocation(line: 827, column: 12, scope: !2656)
!2658 = !DILocation(line: 827, column: 7, scope: !2627)
!2659 = !DILocation(line: 833, column: 27, scope: !2660)
!2660 = distinct !DILexicalBlock(scope: !2661, file: !3, line: 833, column: 11)
!2661 = distinct !DILexicalBlock(scope: !2656, file: !3, line: 828, column: 5)
!2662 = !DILocation(line: 833, column: 11, scope: !2660)
!2663 = !DILocation(line: 833, column: 33, scope: !2660)
!2664 = !DILocation(line: 833, column: 11, scope: !2661)
!2665 = !DILocation(line: 835, column: 4, scope: !2666)
!2666 = distinct !DILexicalBlock(scope: !2660, file: !3, line: 834, column: 2)
!2667 = !DILocation(line: 835, column: 21, scope: !2666)
!2668 = !DILocation(line: 836, column: 4, scope: !2666)
!2669 = !DILocation(line: 840, column: 33, scope: !2670)
!2670 = distinct !DILexicalBlock(scope: !2660, file: !3, line: 839, column: 2)
!2671 = !DILocation(line: 840, column: 11, scope: !2670)
!2672 = !DILocation(line: 840, column: 9, scope: !2670)
!2673 = !DILocation(line: 841, column: 8, scope: !2674)
!2674 = distinct !DILexicalBlock(scope: !2670, file: !3, line: 841, column: 8)
!2675 = !DILocation(line: 841, column: 13, scope: !2674)
!2676 = !DILocation(line: 841, column: 8, scope: !2670)
!2677 = !DILocation(line: 842, column: 11, scope: !2674)
!2678 = !DILocation(line: 842, column: 6, scope: !2674)
!2679 = !DILocation(line: 844, column: 23, scope: !2670)
!2680 = !DILocation(line: 844, column: 4, scope: !2670)
!2681 = !DILocation(line: 844, column: 21, scope: !2670)
!2682 = !DILocation(line: 846, column: 5, scope: !2661)
!2683 = !DILocation(line: 848, column: 10, scope: !2627)
!2684 = !DILocation(line: 848, column: 3, scope: !2627)
!2685 = !DILocation(line: 849, column: 1, scope: !2627)
!2686 = distinct !DISubprogram(name: "sel_sched_p", scope: !398, file: !398, line: 117, type: !2687, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!2687 = !DISubroutineType(types: !2688)
!2688 = !{!1100}
!2689 = !DILocation(line: 119, column: 10, scope: !2686)
!2690 = !DILocation(line: 119, column: 29, scope: !2686)
!2691 = !DILocation(line: 119, column: 43, scope: !2686)
!2692 = !DILocation(line: 119, column: 3, scope: !2686)
!2693 = distinct !DISubprogram(name: "recog_memoized", scope: !2694, file: !2694, line: 150, type: !2291, scopeLine: 151, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!2694 = !DIFile(filename: "./recog.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2695 = !DILocalVariable(name: "insn", arg: 1, scope: !2693, file: !2694, line: 150, type: !867)
!2696 = !DILocation(line: 150, column: 21, scope: !2693)
!2697 = !DILocation(line: 152, column: 7, scope: !2698)
!2698 = distinct !DILexicalBlock(scope: !2693, file: !2694, line: 152, column: 7)
!2699 = !DILocation(line: 152, column: 24, scope: !2698)
!2700 = !DILocation(line: 152, column: 7, scope: !2693)
!2701 = !DILocation(line: 153, column: 31, scope: !2698)
!2702 = !DILocation(line: 153, column: 47, scope: !2698)
!2703 = !DILocation(line: 153, column: 24, scope: !2698)
!2704 = !DILocation(line: 153, column: 5, scope: !2698)
!2705 = !DILocation(line: 153, column: 22, scope: !2698)
!2706 = !DILocation(line: 154, column: 10, scope: !2693)
!2707 = !DILocation(line: 154, column: 3, scope: !2693)
!2708 = distinct !DISubprogram(name: "VEC_haifa_insn_data_def_base_index", scope: !398, file: !398, line: 825, type: !2709, scopeLine: 825, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!2709 = !DISubroutineType(types: !2710)
!2710 = !{!2711, !2712, !7}
!2711 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2149, size: 64)
!2712 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2142, size: 64)
!2713 = !DILocalVariable(name: "vec_", arg: 1, scope: !2708, file: !398, line: 825, type: !2712)
!2714 = !DILocation(line: 825, column: 1, scope: !2708)
!2715 = !DILocalVariable(name: "ix_", arg: 2, scope: !2708, file: !398, line: 825, type: !7)
!2716 = !DILocation(line: 0, scope: !2708)
!2717 = distinct !DISubprogram(name: "dep_cost_1", scope: !3, file: !3, line: 856, type: !2718, scopeLine: 857, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!2718 = !DISubroutineType(types: !2719)
!2719 = !{!865, !2720, !2256}
!2720 = !DIDerivedType(tag: DW_TAG_typedef, name: "dep_t", file: !398, line: 245, baseType: !2721)
!2721 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2722, size: 64)
!2722 = !DIDerivedType(tag: DW_TAG_typedef, name: "dep_def", file: !398, line: 244, baseType: !2486)
!2723 = !DILocalVariable(name: "link", arg: 1, scope: !2717, file: !3, line: 856, type: !2720)
!2724 = !DILocation(line: 856, column: 19, scope: !2717)
!2725 = !DILocalVariable(name: "dw", arg: 2, scope: !2717, file: !3, line: 856, type: !2256)
!2726 = !DILocation(line: 856, column: 30, scope: !2717)
!2727 = !DILocalVariable(name: "insn", scope: !2717, file: !3, line: 858, type: !867)
!2728 = !DILocation(line: 858, column: 7, scope: !2717)
!2729 = !DILocation(line: 858, column: 14, scope: !2717)
!2730 = !DILocalVariable(name: "used", scope: !2717, file: !3, line: 859, type: !867)
!2731 = !DILocation(line: 859, column: 7, scope: !2717)
!2732 = !DILocation(line: 859, column: 14, scope: !2717)
!2733 = !DILocalVariable(name: "cost", scope: !2717, file: !3, line: 860, type: !865)
!2734 = !DILocation(line: 860, column: 7, scope: !2717)
!2735 = !DILocation(line: 866, column: 23, scope: !2736)
!2736 = distinct !DILexicalBlock(scope: !2717, file: !3, line: 866, column: 7)
!2737 = !DILocation(line: 866, column: 7, scope: !2736)
!2738 = !DILocation(line: 866, column: 29, scope: !2736)
!2739 = !DILocation(line: 866, column: 7, scope: !2717)
!2740 = !DILocation(line: 868, column: 12, scope: !2741)
!2741 = distinct !DILexicalBlock(scope: !2736, file: !3, line: 867, column: 5)
!2742 = !DILocation(line: 869, column: 23, scope: !2741)
!2743 = !DILocation(line: 869, column: 7, scope: !2741)
!2744 = !DILocation(line: 870, column: 5, scope: !2741)
!2745 = !DILocalVariable(name: "dep_type", scope: !2746, file: !3, line: 873, type: !405)
!2746 = distinct !DILexicalBlock(scope: !2736, file: !3, line: 872, column: 5)
!2747 = !DILocation(line: 873, column: 21, scope: !2746)
!2748 = !DILocation(line: 873, column: 32, scope: !2746)
!2749 = !DILocation(line: 875, column: 25, scope: !2746)
!2750 = !DILocation(line: 875, column: 14, scope: !2746)
!2751 = !DILocation(line: 875, column: 12, scope: !2746)
!2752 = !DILocation(line: 877, column: 11, scope: !2753)
!2753 = distinct !DILexicalBlock(scope: !2746, file: !3, line: 877, column: 11)
!2754 = !DILocation(line: 877, column: 28, scope: !2753)
!2755 = !DILocation(line: 877, column: 11, scope: !2746)
!2756 = !DILocation(line: 879, column: 8, scope: !2757)
!2757 = distinct !DILexicalBlock(scope: !2758, file: !3, line: 879, column: 8)
!2758 = distinct !DILexicalBlock(scope: !2753, file: !3, line: 878, column: 2)
!2759 = !DILocation(line: 879, column: 17, scope: !2757)
!2760 = !DILocation(line: 879, column: 8, scope: !2758)
!2761 = !DILocation(line: 880, column: 11, scope: !2757)
!2762 = !DILocation(line: 880, column: 6, scope: !2757)
!2763 = !DILocation(line: 881, column: 13, scope: !2764)
!2764 = distinct !DILexicalBlock(scope: !2757, file: !3, line: 881, column: 13)
!2765 = !DILocation(line: 881, column: 22, scope: !2764)
!2766 = !DILocation(line: 881, column: 13, scope: !2757)
!2767 = !DILocation(line: 883, column: 38, scope: !2768)
!2768 = distinct !DILexicalBlock(scope: !2764, file: !3, line: 882, column: 6)
!2769 = !DILocation(line: 883, column: 16, scope: !2768)
!2770 = !DILocation(line: 884, column: 33, scope: !2768)
!2771 = !DILocation(line: 884, column: 11, scope: !2768)
!2772 = !DILocation(line: 884, column: 9, scope: !2768)
!2773 = !DILocation(line: 883, column: 13, scope: !2768)
!2774 = !DILocation(line: 885, column: 12, scope: !2775)
!2775 = distinct !DILexicalBlock(scope: !2768, file: !3, line: 885, column: 12)
!2776 = !DILocation(line: 885, column: 17, scope: !2775)
!2777 = !DILocation(line: 885, column: 12, scope: !2768)
!2778 = !DILocation(line: 886, column: 8, scope: !2775)
!2779 = !DILocation(line: 886, column: 3, scope: !2775)
!2780 = !DILocation(line: 887, column: 6, scope: !2768)
!2781 = !DILocation(line: 888, column: 23, scope: !2782)
!2782 = distinct !DILexicalBlock(scope: !2764, file: !3, line: 888, column: 13)
!2783 = !DILocation(line: 888, column: 13, scope: !2782)
!2784 = !DILocation(line: 888, column: 13, scope: !2764)
!2785 = !DILocation(line: 889, column: 27, scope: !2782)
!2786 = !DILocation(line: 889, column: 33, scope: !2782)
!2787 = !DILocation(line: 889, column: 13, scope: !2782)
!2788 = !DILocation(line: 889, column: 11, scope: !2782)
!2789 = !DILocation(line: 889, column: 6, scope: !2782)
!2790 = !DILocation(line: 890, column: 2, scope: !2758)
!2791 = !DILocation(line: 893, column: 25, scope: !2792)
!2792 = distinct !DILexicalBlock(scope: !2746, file: !3, line: 893, column: 11)
!2793 = !DILocation(line: 893, column: 11, scope: !2792)
!2794 = !DILocation(line: 893, column: 11, scope: !2746)
!2795 = !DILocation(line: 894, column: 23, scope: !2792)
!2796 = !DILocation(line: 894, column: 38, scope: !2792)
!2797 = !DILocation(line: 894, column: 50, scope: !2792)
!2798 = !DILocation(line: 894, column: 60, scope: !2792)
!2799 = !DILocation(line: 894, column: 66, scope: !2792)
!2800 = !DILocation(line: 895, column: 10, scope: !2792)
!2801 = !DILocation(line: 894, column: 9, scope: !2792)
!2802 = !DILocation(line: 894, column: 7, scope: !2792)
!2803 = !DILocation(line: 894, column: 2, scope: !2792)
!2804 = !DILocation(line: 896, column: 30, scope: !2805)
!2805 = distinct !DILexicalBlock(scope: !2792, file: !3, line: 896, column: 16)
!2806 = !DILocation(line: 896, column: 42, scope: !2805)
!2807 = !DILocation(line: 896, column: 16, scope: !2792)
!2808 = !DILocalVariable(name: "dep_cost_rtx_link", scope: !2809, file: !3, line: 900, type: !867)
!2809 = distinct !DILexicalBlock(scope: !2805, file: !3, line: 897, column: 2)
!2810 = !DILocation(line: 900, column: 8, scope: !2809)
!2811 = !DILocation(line: 900, column: 28, scope: !2809)
!2812 = !DILocation(line: 904, column: 34, scope: !2809)
!2813 = !DILocation(line: 904, column: 4, scope: !2809)
!2814 = !DILocation(line: 904, column: 32, scope: !2809)
!2815 = !DILocation(line: 907, column: 4, scope: !2809)
!2816 = !DILocation(line: 909, column: 25, scope: !2809)
!2817 = !DILocation(line: 909, column: 38, scope: !2809)
!2818 = !DILocation(line: 909, column: 44, scope: !2809)
!2819 = !DILocation(line: 910, column: 10, scope: !2809)
!2820 = !DILocation(line: 910, column: 16, scope: !2809)
!2821 = !DILocation(line: 909, column: 11, scope: !2809)
!2822 = !DILocation(line: 909, column: 9, scope: !2809)
!2823 = !DILocation(line: 912, column: 25, scope: !2809)
!2824 = !DILocation(line: 912, column: 4, scope: !2809)
!2825 = !DILocation(line: 913, column: 2, scope: !2809)
!2826 = !DILocation(line: 915, column: 11, scope: !2827)
!2827 = distinct !DILexicalBlock(scope: !2746, file: !3, line: 915, column: 11)
!2828 = !DILocation(line: 915, column: 16, scope: !2827)
!2829 = !DILocation(line: 915, column: 11, scope: !2746)
!2830 = !DILocation(line: 916, column: 7, scope: !2827)
!2831 = !DILocation(line: 916, column: 2, scope: !2827)
!2832 = !DILocation(line: 919, column: 10, scope: !2717)
!2833 = !DILocation(line: 919, column: 3, scope: !2717)
!2834 = distinct !DISubprogram(name: "dep_cost", scope: !3, file: !3, line: 926, type: !2835, scopeLine: 927, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!2835 = !DISubroutineType(types: !2836)
!2836 = !{!865, !2720}
!2837 = !DILocalVariable(name: "link", arg: 1, scope: !2834, file: !3, line: 926, type: !2720)
!2838 = !DILocation(line: 926, column: 17, scope: !2834)
!2839 = !DILocation(line: 928, column: 22, scope: !2834)
!2840 = !DILocation(line: 928, column: 10, scope: !2834)
!2841 = !DILocation(line: 928, column: 3, scope: !2834)
!2842 = distinct !DISubprogram(name: "increase_insn_priority", scope: !3, file: !3, line: 934, type: !2403, scopeLine: 935, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!2843 = !DILocalVariable(name: "insn", arg: 1, scope: !2842, file: !3, line: 934, type: !867)
!2844 = !DILocation(line: 934, column: 29, scope: !2842)
!2845 = !DILocalVariable(name: "amount", arg: 2, scope: !2842, file: !3, line: 934, type: !865)
!2846 = !DILocation(line: 934, column: 39, scope: !2842)
!2847 = !DILocation(line: 936, column: 8, scope: !2848)
!2848 = distinct !DILexicalBlock(scope: !2842, file: !3, line: 936, column: 7)
!2849 = !DILocation(line: 936, column: 7, scope: !2842)
!2850 = !DILocation(line: 939, column: 11, scope: !2851)
!2851 = distinct !DILexicalBlock(scope: !2852, file: !3, line: 939, column: 11)
!2852 = distinct !DILexicalBlock(scope: !2848, file: !3, line: 937, column: 5)
!2853 = !DILocation(line: 939, column: 11, scope: !2852)
!2854 = !DILocation(line: 940, column: 28, scope: !2851)
!2855 = !DILocation(line: 940, column: 4, scope: !2851)
!2856 = !DILocation(line: 940, column: 25, scope: !2851)
!2857 = !DILocation(line: 941, column: 5, scope: !2852)
!2858 = !DILocation(line: 946, column: 33, scope: !2859)
!2859 = distinct !DILexicalBlock(scope: !2848, file: !3, line: 943, column: 5)
!2860 = !DILocation(line: 946, column: 39, scope: !2859)
!2861 = !DILocation(line: 946, column: 7, scope: !2859)
!2862 = !DILocation(line: 948, column: 1, scope: !2842)
!2863 = distinct !DISubprogram(name: "ready_lastpos", scope: !3, file: !3, line: 1377, type: !2864, scopeLine: 1378, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!2864 = !DISubroutineType(types: !2865)
!2865 = !{!2098, !2459}
!2866 = !DILocalVariable(name: "ready", arg: 1, scope: !2863, file: !3, line: 1377, type: !2459)
!2867 = !DILocation(line: 1377, column: 35, scope: !2863)
!2868 = !DILocation(line: 1379, column: 3, scope: !2863)
!2869 = !DILocation(line: 1380, column: 10, scope: !2863)
!2870 = !DILocation(line: 1380, column: 17, scope: !2863)
!2871 = !DILocation(line: 1380, column: 23, scope: !2863)
!2872 = !DILocation(line: 1380, column: 30, scope: !2863)
!2873 = !DILocation(line: 1380, column: 21, scope: !2863)
!2874 = !DILocation(line: 1380, column: 38, scope: !2863)
!2875 = !DILocation(line: 1380, column: 45, scope: !2863)
!2876 = !DILocation(line: 1380, column: 36, scope: !2863)
!2877 = !DILocation(line: 1380, column: 53, scope: !2863)
!2878 = !DILocation(line: 1380, column: 3, scope: !2863)
!2879 = distinct !DISubprogram(name: "ready_element", scope: !3, file: !3, line: 1454, type: !2880, scopeLine: 1455, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!2880 = !DISubroutineType(types: !2881)
!2881 = !{!867, !2459, !865}
!2882 = !DILocalVariable(name: "ready", arg: 1, scope: !2879, file: !3, line: 1454, type: !2459)
!2883 = !DILocation(line: 1454, column: 35, scope: !2879)
!2884 = !DILocalVariable(name: "index", arg: 2, scope: !2879, file: !3, line: 1454, type: !865)
!2885 = !DILocation(line: 1454, column: 46, scope: !2879)
!2886 = !DILocation(line: 1456, column: 3, scope: !2879)
!2887 = !DILocation(line: 1458, column: 10, scope: !2879)
!2888 = !DILocation(line: 1458, column: 17, scope: !2879)
!2889 = !DILocation(line: 1458, column: 21, scope: !2879)
!2890 = !DILocation(line: 1458, column: 28, scope: !2879)
!2891 = !DILocation(line: 1458, column: 36, scope: !2879)
!2892 = !DILocation(line: 1458, column: 34, scope: !2879)
!2893 = !DILocation(line: 1458, column: 3, scope: !2879)
!2894 = distinct !DISubprogram(name: "ready_sort", scope: !3, file: !3, line: 1503, type: !2895, scopeLine: 1504, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!2895 = !DISubroutineType(types: !2896)
!2896 = !{null, !2459}
!2897 = !DILocalVariable(name: "ready", arg: 1, scope: !2894, file: !3, line: 1503, type: !2459)
!2898 = !DILocation(line: 1503, column: 32, scope: !2894)
!2899 = !DILocalVariable(name: "i", scope: !2894, file: !3, line: 1505, type: !865)
!2900 = !DILocation(line: 1505, column: 7, scope: !2894)
!2901 = !DILocalVariable(name: "first", scope: !2894, file: !3, line: 1506, type: !2098)
!2902 = !DILocation(line: 1506, column: 8, scope: !2894)
!2903 = !DILocation(line: 1506, column: 31, scope: !2894)
!2904 = !DILocation(line: 1506, column: 16, scope: !2894)
!2905 = !DILocation(line: 1508, column: 7, scope: !2906)
!2906 = distinct !DILexicalBlock(scope: !2894, file: !3, line: 1508, column: 7)
!2907 = !DILocation(line: 1508, column: 7, scope: !2894)
!2908 = !DILocation(line: 1510, column: 14, scope: !2909)
!2909 = distinct !DILexicalBlock(scope: !2910, file: !3, line: 1510, column: 7)
!2910 = distinct !DILexicalBlock(scope: !2906, file: !3, line: 1509, column: 5)
!2911 = !DILocation(line: 1510, column: 12, scope: !2909)
!2912 = !DILocation(line: 1510, column: 19, scope: !2913)
!2913 = distinct !DILexicalBlock(scope: !2909, file: !3, line: 1510, column: 7)
!2914 = !DILocation(line: 1510, column: 23, scope: !2913)
!2915 = !DILocation(line: 1510, column: 30, scope: !2913)
!2916 = !DILocation(line: 1510, column: 21, scope: !2913)
!2917 = !DILocation(line: 1510, column: 7, scope: !2909)
!2918 = !DILocation(line: 1511, column: 32, scope: !2913)
!2919 = !DILocation(line: 1511, column: 38, scope: !2913)
!2920 = !DILocation(line: 1511, column: 2, scope: !2913)
!2921 = !DILocation(line: 1510, column: 40, scope: !2913)
!2922 = !DILocation(line: 1510, column: 7, scope: !2913)
!2923 = distinct !{!2923, !2917, !2924}
!2924 = !DILocation(line: 1511, column: 40, scope: !2909)
!2925 = !DILocation(line: 1512, column: 5, scope: !2910)
!2926 = !DILocation(line: 1513, column: 3, scope: !2894)
!2927 = !DILocation(line: 1513, column: 3, scope: !2928)
!2928 = distinct !DILexicalBlock(scope: !2929, file: !3, line: 1513, column: 3)
!2929 = distinct !DILexicalBlock(scope: !2894, file: !3, line: 1513, column: 3)
!2930 = !DILocation(line: 1513, column: 3, scope: !2929)
!2931 = !DILocation(line: 1513, column: 3, scope: !2932)
!2932 = distinct !DILexicalBlock(scope: !2928, file: !3, line: 1513, column: 3)
!2933 = !DILocation(line: 1514, column: 1, scope: !2894)
!2934 = !DILocalVariable(name: "insn", arg: 1, scope: !2437, file: !3, line: 1124, type: !867)
!2935 = !DILocation(line: 1124, column: 35, scope: !2437)
!2936 = !DILocalVariable(name: "i", scope: !2437, file: !3, line: 1126, type: !865)
!2937 = !DILocation(line: 1126, column: 7, scope: !2437)
!2938 = !DILocalVariable(name: "change", scope: !2437, file: !3, line: 1126, type: !865)
!2939 = !DILocation(line: 1126, column: 10, scope: !2437)
!2940 = !DILocalVariable(name: "before", scope: !2437, file: !3, line: 1126, type: !865)
!2941 = !DILocation(line: 1126, column: 18, scope: !2437)
!2942 = !DILocalVariable(name: "after", scope: !2437, file: !3, line: 1126, type: !865)
!2943 = !DILocation(line: 1126, column: 26, scope: !2437)
!2944 = !DILocalVariable(name: "hard_regno", scope: !2437, file: !3, line: 1126, type: !865)
!2945 = !DILocation(line: 1126, column: 33, scope: !2437)
!2946 = !DILocalVariable(name: "excess_cost_change", scope: !2437, file: !3, line: 1127, type: !865)
!2947 = !DILocation(line: 1127, column: 7, scope: !2437)
!2948 = !DILocalVariable(name: "mode", scope: !2437, file: !3, line: 1128, type: !5)
!2949 = !DILocation(line: 1128, column: 21, scope: !2437)
!2950 = !DILocalVariable(name: "cl", scope: !2437, file: !3, line: 1129, type: !783)
!2951 = !DILocation(line: 1129, column: 18, scope: !2437)
!2952 = !DILocalVariable(name: "pressure_info", scope: !2437, file: !3, line: 1130, type: !2168)
!2953 = !DILocation(line: 1130, column: 29, scope: !2437)
!2954 = !DILocalVariable(name: "max_reg_pressure", scope: !2437, file: !3, line: 1131, type: !2176)
!2955 = !DILocation(line: 1131, column: 8, scope: !2437)
!2956 = !DILocalVariable(name: "use", scope: !2437, file: !3, line: 1132, type: !2178)
!2957 = !DILocation(line: 1132, column: 24, scope: !2437)
!2958 = !DILocation(line: 1135, column: 22, scope: !2437)
!2959 = !DILocation(line: 1136, column: 10, scope: !2960)
!2960 = distinct !DILexicalBlock(scope: !2437, file: !3, line: 1136, column: 3)
!2961 = !DILocation(line: 1136, column: 8, scope: !2960)
!2962 = !DILocation(line: 1136, column: 15, scope: !2963)
!2963 = distinct !DILexicalBlock(scope: !2960, file: !3, line: 1136, column: 3)
!2964 = !DILocation(line: 1136, column: 19, scope: !2963)
!2965 = !DILocation(line: 1136, column: 17, scope: !2963)
!2966 = !DILocation(line: 1136, column: 3, scope: !2960)
!2967 = !DILocation(line: 1137, column: 31, scope: !2963)
!2968 = !DILocation(line: 1137, column: 11, scope: !2963)
!2969 = !DILocation(line: 1137, column: 5, scope: !2963)
!2970 = !DILocation(line: 1137, column: 35, scope: !2963)
!2971 = !DILocation(line: 1136, column: 46, scope: !2963)
!2972 = !DILocation(line: 1136, column: 3, scope: !2963)
!2973 = distinct !{!2973, !2966, !2974}
!2974 = !DILocation(line: 1137, column: 37, scope: !2960)
!2975 = !DILocation(line: 1138, column: 14, scope: !2976)
!2976 = distinct !DILexicalBlock(scope: !2437, file: !3, line: 1138, column: 3)
!2977 = !DILocation(line: 1138, column: 12, scope: !2976)
!2978 = !DILocation(line: 1138, column: 8, scope: !2976)
!2979 = !DILocation(line: 1138, column: 40, scope: !2980)
!2980 = distinct !DILexicalBlock(scope: !2976, file: !3, line: 1138, column: 3)
!2981 = !DILocation(line: 1138, column: 44, scope: !2980)
!2982 = !DILocation(line: 1138, column: 3, scope: !2976)
!2983 = !DILocation(line: 1139, column: 22, scope: !2984)
!2984 = distinct !DILexicalBlock(scope: !2980, file: !3, line: 1139, column: 9)
!2985 = !DILocation(line: 1139, column: 9, scope: !2984)
!2986 = !DILocation(line: 1139, column: 9, scope: !2980)
!2987 = !DILocation(line: 1141, column: 7, scope: !2988)
!2988 = distinct !DILexicalBlock(scope: !2984, file: !3, line: 1140, column: 7)
!2989 = !DILocation(line: 1141, column: 31, scope: !2988)
!2990 = !DILocation(line: 1141, column: 36, scope: !2988)
!2991 = !DILocation(line: 1141, column: 5, scope: !2988)
!2992 = !DILocation(line: 1142, column: 6, scope: !2993)
!2993 = distinct !DILexicalBlock(scope: !2988, file: !3, line: 1142, column: 6)
!2994 = !DILocation(line: 1142, column: 11, scope: !2993)
!2995 = !DILocation(line: 1142, column: 17, scope: !2993)
!2996 = !DILocation(line: 1142, column: 6, scope: !2988)
!2997 = !DILocation(line: 1143, column: 10, scope: !2993)
!2998 = !DILocation(line: 1143, column: 4, scope: !2993)
!2999 = !DILocation(line: 1143, column: 13, scope: !2993)
!3000 = !DILocation(line: 1145, column: 37, scope: !2993)
!3001 = !DILocation(line: 1145, column: 17, scope: !2993)
!3002 = !DILocation(line: 1145, column: 41, scope: !2993)
!3003 = !DILocation(line: 1145, column: 10, scope: !2993)
!3004 = !DILocation(line: 1145, column: 4, scope: !2993)
!3005 = !DILocation(line: 1145, column: 14, scope: !2993)
!3006 = !DILocation(line: 1146, column: 7, scope: !2988)
!3007 = !DILocation(line: 1139, column: 25, scope: !2984)
!3008 = !DILocation(line: 1138, column: 59, scope: !2980)
!3009 = !DILocation(line: 1138, column: 64, scope: !2980)
!3010 = !DILocation(line: 1138, column: 57, scope: !2980)
!3011 = !DILocation(line: 1138, column: 3, scope: !2980)
!3012 = distinct !{!3012, !2982, !3013}
!3013 = !DILocation(line: 1146, column: 7, scope: !2976)
!3014 = !DILocation(line: 1147, column: 19, scope: !2437)
!3015 = !DILocation(line: 1147, column: 17, scope: !2437)
!3016 = !DILocation(line: 1148, column: 22, scope: !2437)
!3017 = !DILocation(line: 1148, column: 20, scope: !2437)
!3018 = !DILocation(line: 1149, column: 3, scope: !2437)
!3019 = !DILocation(line: 1150, column: 10, scope: !3020)
!3020 = distinct !DILexicalBlock(scope: !2437, file: !3, line: 1150, column: 3)
!3021 = !DILocation(line: 1150, column: 8, scope: !3020)
!3022 = !DILocation(line: 1150, column: 15, scope: !3023)
!3023 = distinct !DILexicalBlock(scope: !3020, file: !3, line: 1150, column: 3)
!3024 = !DILocation(line: 1150, column: 19, scope: !3023)
!3025 = !DILocation(line: 1150, column: 17, scope: !3023)
!3026 = !DILocation(line: 1150, column: 3, scope: !3020)
!3027 = !DILocation(line: 1152, column: 32, scope: !3028)
!3028 = distinct !DILexicalBlock(scope: !3023, file: !3, line: 1151, column: 5)
!3029 = !DILocation(line: 1152, column: 12, scope: !3028)
!3030 = !DILocation(line: 1152, column: 10, scope: !3028)
!3031 = !DILocation(line: 1153, column: 7, scope: !3028)
!3032 = !DILocation(line: 1154, column: 22, scope: !3028)
!3033 = !DILocation(line: 1154, column: 36, scope: !3028)
!3034 = !DILocation(line: 1154, column: 39, scope: !3028)
!3035 = !DILocation(line: 1154, column: 60, scope: !3028)
!3036 = !DILocation(line: 1154, column: 54, scope: !3028)
!3037 = !DILocation(line: 1154, column: 52, scope: !3028)
!3038 = !DILocation(line: 1154, column: 14, scope: !3028)
!3039 = !DILocation(line: 1155, column: 16, scope: !3028)
!3040 = !DILocation(line: 1155, column: 14, scope: !3028)
!3041 = !DILocation(line: 1156, column: 15, scope: !3028)
!3042 = !DILocation(line: 1156, column: 13, scope: !3028)
!3043 = !DILocation(line: 1158, column: 40, scope: !3028)
!3044 = !DILocation(line: 1158, column: 20, scope: !3028)
!3045 = !DILocation(line: 1158, column: 18, scope: !3028)
!3046 = !DILocation(line: 1159, column: 7, scope: !3028)
!3047 = !DILocation(line: 1160, column: 27, scope: !3028)
!3048 = !DILocation(line: 1160, column: 14, scope: !3028)
!3049 = !DILocation(line: 1160, column: 12, scope: !3028)
!3050 = !DILocation(line: 1161, column: 31, scope: !3028)
!3051 = !DILocation(line: 1161, column: 39, scope: !3028)
!3052 = !DILocation(line: 1161, column: 37, scope: !3028)
!3053 = !DILocation(line: 1162, column: 33, scope: !3028)
!3054 = !DILocation(line: 1162, column: 12, scope: !3028)
!3055 = !DILocation(line: 1162, column: 39, scope: !3028)
!3056 = !DILocation(line: 1163, column: 28, scope: !3028)
!3057 = !DILocation(line: 1163, column: 7, scope: !3028)
!3058 = !DILocation(line: 1163, column: 34, scope: !3028)
!3059 = !DILocation(line: 1163, column: 5, scope: !3028)
!3060 = !DILocation(line: 1162, column: 9, scope: !3028)
!3061 = !DILocation(line: 1161, column: 26, scope: !3028)
!3062 = !DILocation(line: 1164, column: 5, scope: !3028)
!3063 = !DILocation(line: 1150, column: 46, scope: !3023)
!3064 = !DILocation(line: 1150, column: 3, scope: !3023)
!3065 = distinct !{!3065, !3026, !3066}
!3066 = !DILocation(line: 1164, column: 5, scope: !3020)
!3067 = !DILocation(line: 1165, column: 49, scope: !2437)
!3068 = !DILocation(line: 1165, column: 3, scope: !2437)
!3069 = !DILocation(line: 1165, column: 47, scope: !2437)
!3070 = !DILocation(line: 1166, column: 1, scope: !2437)
!3071 = distinct !DISubprogram(name: "swap_sort", scope: !3, file: !3, line: 1323, type: !3072, scopeLine: 1324, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!3072 = !DISubroutineType(types: !3073)
!3073 = !{null, !2098, !865}
!3074 = !DILocalVariable(name: "a", arg: 1, scope: !3071, file: !3, line: 1323, type: !2098)
!3075 = !DILocation(line: 1323, column: 17, scope: !3071)
!3076 = !DILocalVariable(name: "n", arg: 2, scope: !3071, file: !3, line: 1323, type: !865)
!3077 = !DILocation(line: 1323, column: 24, scope: !3071)
!3078 = !DILocalVariable(name: "insn", scope: !3071, file: !3, line: 1325, type: !867)
!3079 = !DILocation(line: 1325, column: 7, scope: !3071)
!3080 = !DILocation(line: 1325, column: 14, scope: !3071)
!3081 = !DILocation(line: 1325, column: 16, scope: !3071)
!3082 = !DILocation(line: 1325, column: 18, scope: !3071)
!3083 = !DILocalVariable(name: "i", scope: !3071, file: !3, line: 1326, type: !865)
!3084 = !DILocation(line: 1326, column: 7, scope: !3071)
!3085 = !DILocation(line: 1326, column: 11, scope: !3071)
!3086 = !DILocation(line: 1326, column: 13, scope: !3071)
!3087 = !DILocation(line: 1328, column: 3, scope: !3071)
!3088 = !DILocation(line: 1328, column: 10, scope: !3071)
!3089 = !DILocation(line: 1328, column: 12, scope: !3071)
!3090 = !DILocation(line: 1328, column: 17, scope: !3071)
!3091 = !DILocation(line: 1328, column: 39, scope: !3071)
!3092 = !DILocation(line: 1328, column: 43, scope: !3071)
!3093 = !DILocation(line: 1328, column: 41, scope: !3071)
!3094 = !DILocation(line: 1328, column: 46, scope: !3071)
!3095 = !DILocation(line: 1328, column: 20, scope: !3071)
!3096 = !DILocation(line: 1328, column: 53, scope: !3071)
!3097 = !DILocation(line: 0, scope: !3071)
!3098 = !DILocation(line: 1330, column: 18, scope: !3099)
!3099 = distinct !DILexicalBlock(scope: !3071, file: !3, line: 1329, column: 5)
!3100 = !DILocation(line: 1330, column: 20, scope: !3099)
!3101 = !DILocation(line: 1330, column: 7, scope: !3099)
!3102 = !DILocation(line: 1330, column: 9, scope: !3099)
!3103 = !DILocation(line: 1330, column: 11, scope: !3099)
!3104 = !DILocation(line: 1330, column: 16, scope: !3099)
!3105 = !DILocation(line: 1331, column: 9, scope: !3099)
!3106 = distinct !{!3106, !3087, !3107}
!3107 = !DILocation(line: 1332, column: 5, scope: !3071)
!3108 = !DILocation(line: 1333, column: 14, scope: !3071)
!3109 = !DILocation(line: 1333, column: 3, scope: !3071)
!3110 = !DILocation(line: 1333, column: 5, scope: !3071)
!3111 = !DILocation(line: 1333, column: 7, scope: !3071)
!3112 = !DILocation(line: 1333, column: 12, scope: !3071)
!3113 = !DILocation(line: 1334, column: 1, scope: !3071)
!3114 = distinct !DISubprogram(name: "rank_for_schedule", scope: !3, file: !3, line: 1173, type: !1334, scopeLine: 1174, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!3115 = !DILocalVariable(name: "x", arg: 1, scope: !3114, file: !3, line: 1173, type: !1329)
!3116 = !DILocation(line: 1173, column: 32, scope: !3114)
!3117 = !DILocalVariable(name: "y", arg: 2, scope: !3114, file: !3, line: 1173, type: !1329)
!3118 = !DILocation(line: 1173, column: 47, scope: !3114)
!3119 = !DILocalVariable(name: "tmp", scope: !3114, file: !3, line: 1175, type: !867)
!3120 = !DILocation(line: 1175, column: 7, scope: !3114)
!3121 = !DILocation(line: 1175, column: 28, scope: !3114)
!3122 = !DILocation(line: 1175, column: 14, scope: !3114)
!3123 = !DILocation(line: 1175, column: 13, scope: !3114)
!3124 = !DILocalVariable(name: "tmp2", scope: !3114, file: !3, line: 1176, type: !867)
!3125 = !DILocation(line: 1176, column: 7, scope: !3114)
!3126 = !DILocation(line: 1176, column: 29, scope: !3114)
!3127 = !DILocation(line: 1176, column: 15, scope: !3114)
!3128 = !DILocation(line: 1176, column: 14, scope: !3114)
!3129 = !DILocalVariable(name: "last", scope: !3114, file: !3, line: 1177, type: !867)
!3130 = !DILocation(line: 1177, column: 7, scope: !3114)
!3131 = !DILocalVariable(name: "tmp_class", scope: !3114, file: !3, line: 1178, type: !865)
!3132 = !DILocation(line: 1178, column: 7, scope: !3114)
!3133 = !DILocalVariable(name: "tmp2_class", scope: !3114, file: !3, line: 1178, type: !865)
!3134 = !DILocation(line: 1178, column: 18, scope: !3114)
!3135 = !DILocalVariable(name: "val", scope: !3114, file: !3, line: 1179, type: !865)
!3136 = !DILocation(line: 1179, column: 7, scope: !3114)
!3137 = !DILocalVariable(name: "priority_val", scope: !3114, file: !3, line: 1179, type: !865)
!3138 = !DILocation(line: 1179, column: 12, scope: !3114)
!3139 = !DILocalVariable(name: "info_val", scope: !3114, file: !3, line: 1179, type: !865)
!3140 = !DILocation(line: 1179, column: 26, scope: !3114)
!3141 = !DILocation(line: 1181, column: 7, scope: !3142)
!3142 = distinct !DILexicalBlock(scope: !3114, file: !3, line: 1181, column: 7)
!3143 = !DILocation(line: 1181, column: 7, scope: !3114)
!3144 = !DILocation(line: 1184, column: 11, scope: !3145)
!3145 = distinct !DILexicalBlock(scope: !3146, file: !3, line: 1184, column: 11)
!3146 = distinct !DILexicalBlock(scope: !3142, file: !3, line: 1182, column: 5)
!3147 = !DILocation(line: 1184, column: 30, scope: !3145)
!3148 = !DILocation(line: 1184, column: 34, scope: !3145)
!3149 = !DILocation(line: 1184, column: 11, scope: !3146)
!3150 = !DILocation(line: 1185, column: 2, scope: !3145)
!3151 = !DILocation(line: 1186, column: 16, scope: !3152)
!3152 = distinct !DILexicalBlock(scope: !3145, file: !3, line: 1186, column: 16)
!3153 = !DILocation(line: 1186, column: 16, scope: !3145)
!3154 = !DILocation(line: 1187, column: 2, scope: !3152)
!3155 = !DILocation(line: 1188, column: 5, scope: !3146)
!3156 = !DILocation(line: 1191, column: 7, scope: !3157)
!3157 = distinct !DILexicalBlock(scope: !3114, file: !3, line: 1191, column: 7)
!3158 = !DILocation(line: 1191, column: 34, scope: !3157)
!3159 = !DILocation(line: 1192, column: 7, scope: !3157)
!3160 = !DILocation(line: 1192, column: 30, scope: !3157)
!3161 = !DILocation(line: 1192, column: 27, scope: !3157)
!3162 = !DILocation(line: 1191, column: 7, scope: !3114)
!3163 = !DILocation(line: 1193, column: 12, scope: !3157)
!3164 = !DILocation(line: 1193, column: 5, scope: !3157)
!3165 = !DILocation(line: 1196, column: 3, scope: !3114)
!3166 = !DILocation(line: 1198, column: 7, scope: !3167)
!3167 = distinct !DILexicalBlock(scope: !3114, file: !3, line: 1198, column: 7)
!3168 = !DILocation(line: 1198, column: 7, scope: !3114)
!3169 = !DILocalVariable(name: "diff", scope: !3170, file: !3, line: 1200, type: !865)
!3170 = distinct !DILexicalBlock(scope: !3167, file: !3, line: 1199, column: 5)
!3171 = !DILocation(line: 1200, column: 11, scope: !3170)
!3172 = !DILocation(line: 1204, column: 20, scope: !3173)
!3173 = distinct !DILexicalBlock(scope: !3170, file: !3, line: 1204, column: 11)
!3174 = !DILocation(line: 1205, column: 9, scope: !3173)
!3175 = !DILocation(line: 1205, column: 27, scope: !3173)
!3176 = !DILocation(line: 1205, column: 25, scope: !3173)
!3177 = !DILocation(line: 1206, column: 11, scope: !3173)
!3178 = !DILocation(line: 1206, column: 29, scope: !3173)
!3179 = !DILocation(line: 1206, column: 27, scope: !3173)
!3180 = !DILocation(line: 1205, column: 6, scope: !3173)
!3181 = !DILocation(line: 1207, column: 8, scope: !3173)
!3182 = !DILocation(line: 1207, column: 6, scope: !3173)
!3183 = !DILocation(line: 1208, column: 9, scope: !3173)
!3184 = !DILocation(line: 1208, column: 28, scope: !3173)
!3185 = !DILocation(line: 1208, column: 26, scope: !3173)
!3186 = !DILocation(line: 1209, column: 11, scope: !3173)
!3187 = !DILocation(line: 1209, column: 30, scope: !3173)
!3188 = !DILocation(line: 1209, column: 28, scope: !3173)
!3189 = !DILocation(line: 1208, column: 6, scope: !3173)
!3190 = !DILocation(line: 1204, column: 17, scope: !3173)
!3191 = !DILocation(line: 1209, column: 47, scope: !3173)
!3192 = !DILocation(line: 1204, column: 11, scope: !3170)
!3193 = !DILocation(line: 1210, column: 9, scope: !3173)
!3194 = !DILocation(line: 1210, column: 2, scope: !3173)
!3195 = !DILocation(line: 1211, column: 5, scope: !3170)
!3196 = !DILocation(line: 1214, column: 7, scope: !3197)
!3197 = distinct !DILexicalBlock(scope: !3114, file: !3, line: 1214, column: 7)
!3198 = !DILocation(line: 1215, column: 7, scope: !3197)
!3199 = !DILocation(line: 1215, column: 11, scope: !3197)
!3200 = !DILocation(line: 1215, column: 30, scope: !3197)
!3201 = !DILocation(line: 1215, column: 28, scope: !3197)
!3202 = !DILocation(line: 1215, column: 40, scope: !3197)
!3203 = !DILocation(line: 1215, column: 43, scope: !3197)
!3204 = !DILocation(line: 1215, column: 61, scope: !3197)
!3205 = !DILocation(line: 1215, column: 59, scope: !3197)
!3206 = !DILocation(line: 1214, column: 7, scope: !3114)
!3207 = !DILocation(line: 1217, column: 11, scope: !3208)
!3208 = distinct !DILexicalBlock(scope: !3209, file: !3, line: 1217, column: 11)
!3209 = distinct !DILexicalBlock(scope: !3197, file: !3, line: 1216, column: 5)
!3210 = !DILocation(line: 1217, column: 30, scope: !3208)
!3211 = !DILocation(line: 1217, column: 27, scope: !3208)
!3212 = !DILocation(line: 1217, column: 11, scope: !3209)
!3213 = !DILocation(line: 1218, column: 2, scope: !3208)
!3214 = !DILocation(line: 1219, column: 16, scope: !3215)
!3215 = distinct !DILexicalBlock(scope: !3208, file: !3, line: 1219, column: 16)
!3216 = !DILocation(line: 1219, column: 36, scope: !3215)
!3217 = !DILocation(line: 1219, column: 33, scope: !3215)
!3218 = !DILocation(line: 1219, column: 16, scope: !3208)
!3219 = !DILocation(line: 1220, column: 2, scope: !3215)
!3220 = !DILocation(line: 1222, column: 9, scope: !3215)
!3221 = !DILocation(line: 1222, column: 27, scope: !3215)
!3222 = !DILocation(line: 1222, column: 25, scope: !3215)
!3223 = !DILocation(line: 1222, column: 2, scope: !3215)
!3224 = !DILocation(line: 1225, column: 18, scope: !3114)
!3225 = !DILocation(line: 1225, column: 41, scope: !3114)
!3226 = !DILocation(line: 1225, column: 39, scope: !3114)
!3227 = !DILocation(line: 1225, column: 16, scope: !3114)
!3228 = !DILocation(line: 1227, column: 7, scope: !3229)
!3229 = distinct !DILexicalBlock(scope: !3114, file: !3, line: 1227, column: 7)
!3230 = !DILocation(line: 1227, column: 42, scope: !3229)
!3231 = !DILocation(line: 1227, column: 45, scope: !3229)
!3232 = !DILocation(line: 1227, column: 7, scope: !3114)
!3233 = !DILocation(line: 1228, column: 12, scope: !3229)
!3234 = !DILocation(line: 1228, column: 5, scope: !3229)
!3235 = !DILocation(line: 1231, column: 7, scope: !3236)
!3236 = distinct !DILexicalBlock(scope: !3114, file: !3, line: 1231, column: 7)
!3237 = !DILocation(line: 1231, column: 38, scope: !3236)
!3238 = !DILocation(line: 1231, column: 41, scope: !3236)
!3239 = !DILocation(line: 1231, column: 7, scope: !3114)
!3240 = !DILocalVariable(name: "ds1", scope: !3241, file: !3, line: 1233, type: !2099)
!3241 = distinct !DILexicalBlock(scope: !3236, file: !3, line: 1232, column: 5)
!3242 = !DILocation(line: 1233, column: 12, scope: !3241)
!3243 = !DILocalVariable(name: "ds2", scope: !3241, file: !3, line: 1233, type: !2099)
!3244 = !DILocation(line: 1233, column: 17, scope: !3241)
!3245 = !DILocalVariable(name: "dw1", scope: !3241, file: !3, line: 1234, type: !2256)
!3246 = !DILocation(line: 1234, column: 12, scope: !3241)
!3247 = !DILocalVariable(name: "dw2", scope: !3241, file: !3, line: 1234, type: !2256)
!3248 = !DILocation(line: 1234, column: 17, scope: !3241)
!3249 = !DILocalVariable(name: "dw", scope: !3241, file: !3, line: 1235, type: !865)
!3250 = !DILocation(line: 1235, column: 11, scope: !3241)
!3251 = !DILocation(line: 1237, column: 13, scope: !3241)
!3252 = !DILocation(line: 1237, column: 29, scope: !3241)
!3253 = !DILocation(line: 1237, column: 11, scope: !3241)
!3254 = !DILocation(line: 1238, column: 11, scope: !3255)
!3255 = distinct !DILexicalBlock(scope: !3241, file: !3, line: 1238, column: 11)
!3256 = !DILocation(line: 1238, column: 11, scope: !3241)
!3257 = !DILocation(line: 1239, column: 17, scope: !3255)
!3258 = !DILocation(line: 1239, column: 8, scope: !3255)
!3259 = !DILocation(line: 1239, column: 6, scope: !3255)
!3260 = !DILocation(line: 1239, column: 2, scope: !3255)
!3261 = !DILocation(line: 1241, column: 6, scope: !3255)
!3262 = !DILocation(line: 1243, column: 13, scope: !3241)
!3263 = !DILocation(line: 1243, column: 30, scope: !3241)
!3264 = !DILocation(line: 1243, column: 11, scope: !3241)
!3265 = !DILocation(line: 1244, column: 11, scope: !3266)
!3266 = distinct !DILexicalBlock(scope: !3241, file: !3, line: 1244, column: 11)
!3267 = !DILocation(line: 1244, column: 11, scope: !3241)
!3268 = !DILocation(line: 1245, column: 17, scope: !3266)
!3269 = !DILocation(line: 1245, column: 8, scope: !3266)
!3270 = !DILocation(line: 1245, column: 6, scope: !3266)
!3271 = !DILocation(line: 1245, column: 2, scope: !3266)
!3272 = !DILocation(line: 1247, column: 6, scope: !3266)
!3273 = !DILocation(line: 1249, column: 12, scope: !3241)
!3274 = !DILocation(line: 1249, column: 18, scope: !3241)
!3275 = !DILocation(line: 1249, column: 16, scope: !3241)
!3276 = !DILocation(line: 1249, column: 10, scope: !3241)
!3277 = !DILocation(line: 1250, column: 11, scope: !3278)
!3278 = distinct !DILexicalBlock(scope: !3241, file: !3, line: 1250, column: 11)
!3279 = !DILocation(line: 1250, column: 14, scope: !3278)
!3280 = !DILocation(line: 1250, column: 34, scope: !3278)
!3281 = !DILocation(line: 1250, column: 37, scope: !3278)
!3282 = !DILocation(line: 1250, column: 40, scope: !3278)
!3283 = !DILocation(line: 1250, column: 11, scope: !3241)
!3284 = !DILocation(line: 1251, column: 9, scope: !3278)
!3285 = !DILocation(line: 1251, column: 2, scope: !3278)
!3286 = !DILocation(line: 1252, column: 5, scope: !3241)
!3287 = !DILocation(line: 1254, column: 16, scope: !3114)
!3288 = !DILocation(line: 1254, column: 36, scope: !3114)
!3289 = !DILocation(line: 1254, column: 43, scope: !3114)
!3290 = !DILocation(line: 1254, column: 48, scope: !3114)
!3291 = !DILocation(line: 1254, column: 14, scope: !3114)
!3292 = !DILocation(line: 1254, column: 12, scope: !3114)
!3293 = !DILocation(line: 1255, column: 6, scope: !3294)
!3294 = distinct !DILexicalBlock(scope: !3114, file: !3, line: 1255, column: 6)
!3295 = !DILocation(line: 1255, column: 32, scope: !3294)
!3296 = !DILocation(line: 1255, column: 35, scope: !3294)
!3297 = !DILocation(line: 1255, column: 6, scope: !3114)
!3298 = !DILocation(line: 1256, column: 12, scope: !3294)
!3299 = !DILocation(line: 1256, column: 5, scope: !3294)
!3300 = !DILocation(line: 1258, column: 7, scope: !3301)
!3301 = distinct !DILexicalBlock(scope: !3114, file: !3, line: 1258, column: 7)
!3302 = !DILocation(line: 1258, column: 7, scope: !3114)
!3303 = !DILocation(line: 1260, column: 14, scope: !3304)
!3304 = distinct !DILexicalBlock(scope: !3301, file: !3, line: 1259, column: 5)
!3305 = !DILocation(line: 1260, column: 12, scope: !3304)
!3306 = !DILocation(line: 1262, column: 11, scope: !3307)
!3307 = distinct !DILexicalBlock(scope: !3304, file: !3, line: 1262, column: 11)
!3308 = !DILocation(line: 1262, column: 31, scope: !3307)
!3309 = !DILocation(line: 1262, column: 34, scope: !3307)
!3310 = !DILocation(line: 1262, column: 42, scope: !3307)
!3311 = !DILocation(line: 1262, column: 62, scope: !3307)
!3312 = !DILocation(line: 1262, column: 39, scope: !3307)
!3313 = !DILocation(line: 1262, column: 11, scope: !3304)
!3314 = !DILocation(line: 1263, column: 2, scope: !3307)
!3315 = !DILocation(line: 1264, column: 11, scope: !3307)
!3316 = !DILocation(line: 1264, column: 9, scope: !3307)
!3317 = !DILocation(line: 1264, column: 4, scope: !3307)
!3318 = !DILocation(line: 1265, column: 10, scope: !3307)
!3319 = !DILocation(line: 1266, column: 9, scope: !3307)
!3320 = !DILocation(line: 1266, column: 12, scope: !3307)
!3321 = !DILocation(line: 1266, column: 20, scope: !3307)
!3322 = !DILocation(line: 1266, column: 40, scope: !3307)
!3323 = !DILocation(line: 1266, column: 17, scope: !3307)
!3324 = !DILocation(line: 0, scope: !3307)
!3325 = distinct !{!3325, !3314, !3326}
!3326 = !DILocation(line: 1266, column: 49, scope: !3307)
!3327 = !DILocation(line: 1267, column: 5, scope: !3304)
!3328 = !DILocation(line: 1271, column: 7, scope: !3329)
!3329 = distinct !DILexicalBlock(scope: !3114, file: !3, line: 1271, column: 7)
!3330 = !DILocation(line: 1271, column: 38, scope: !3329)
!3331 = !DILocation(line: 1271, column: 41, scope: !3329)
!3332 = !DILocation(line: 1271, column: 7, scope: !3114)
!3333 = !DILocalVariable(name: "dep1", scope: !3334, file: !3, line: 1273, type: !2720)
!3334 = distinct !DILexicalBlock(scope: !3329, file: !3, line: 1272, column: 5)
!3335 = !DILocation(line: 1273, column: 13, scope: !3334)
!3336 = !DILocalVariable(name: "dep2", scope: !3334, file: !3, line: 1274, type: !2720)
!3337 = !DILocation(line: 1274, column: 13, scope: !3334)
!3338 = !DILocation(line: 1281, column: 35, scope: !3334)
!3339 = !DILocation(line: 1281, column: 41, scope: !3334)
!3340 = !DILocation(line: 1281, column: 14, scope: !3334)
!3341 = !DILocation(line: 1281, column: 12, scope: !3334)
!3342 = !DILocation(line: 1283, column: 11, scope: !3343)
!3343 = distinct !DILexicalBlock(scope: !3334, file: !3, line: 1283, column: 11)
!3344 = !DILocation(line: 1283, column: 16, scope: !3343)
!3345 = !DILocation(line: 1283, column: 24, scope: !3343)
!3346 = !DILocation(line: 1283, column: 37, scope: !3343)
!3347 = !DILocation(line: 1283, column: 27, scope: !3343)
!3348 = !DILocation(line: 1283, column: 43, scope: !3343)
!3349 = !DILocation(line: 1283, column: 11, scope: !3334)
!3350 = !DILocation(line: 1284, column: 12, scope: !3343)
!3351 = !DILocation(line: 1284, column: 2, scope: !3343)
!3352 = !DILocation(line: 1286, column: 9, scope: !3353)
!3353 = distinct !DILexicalBlock(scope: !3343, file: !3, line: 1286, column: 9)
!3354 = !DILocation(line: 1286, column: 25, scope: !3353)
!3355 = !DILocation(line: 1286, column: 9, scope: !3343)
!3356 = !DILocation(line: 1287, column: 12, scope: !3353)
!3357 = !DILocation(line: 1287, column: 2, scope: !3353)
!3358 = !DILocation(line: 1289, column: 12, scope: !3353)
!3359 = !DILocation(line: 1291, column: 35, scope: !3334)
!3360 = !DILocation(line: 1291, column: 41, scope: !3334)
!3361 = !DILocation(line: 1291, column: 14, scope: !3334)
!3362 = !DILocation(line: 1291, column: 12, scope: !3334)
!3363 = !DILocation(line: 1293, column: 11, scope: !3364)
!3364 = distinct !DILexicalBlock(scope: !3334, file: !3, line: 1293, column: 11)
!3365 = !DILocation(line: 1293, column: 16, scope: !3364)
!3366 = !DILocation(line: 1293, column: 24, scope: !3364)
!3367 = !DILocation(line: 1293, column: 37, scope: !3364)
!3368 = !DILocation(line: 1293, column: 27, scope: !3364)
!3369 = !DILocation(line: 1293, column: 44, scope: !3364)
!3370 = !DILocation(line: 1293, column: 11, scope: !3334)
!3371 = !DILocation(line: 1294, column: 13, scope: !3364)
!3372 = !DILocation(line: 1294, column: 2, scope: !3364)
!3373 = !DILocation(line: 1296, column: 9, scope: !3374)
!3374 = distinct !DILexicalBlock(scope: !3364, file: !3, line: 1296, column: 9)
!3375 = !DILocation(line: 1296, column: 25, scope: !3374)
!3376 = !DILocation(line: 1296, column: 9, scope: !3364)
!3377 = !DILocation(line: 1297, column: 13, scope: !3374)
!3378 = !DILocation(line: 1297, column: 2, scope: !3374)
!3379 = !DILocation(line: 1299, column: 13, scope: !3374)
!3380 = !DILocation(line: 1301, column: 18, scope: !3381)
!3381 = distinct !DILexicalBlock(scope: !3334, file: !3, line: 1301, column: 11)
!3382 = !DILocation(line: 1301, column: 31, scope: !3381)
!3383 = !DILocation(line: 1301, column: 29, scope: !3381)
!3384 = !DILocation(line: 1301, column: 16, scope: !3381)
!3385 = !DILocation(line: 1301, column: 11, scope: !3334)
!3386 = !DILocation(line: 1302, column: 9, scope: !3381)
!3387 = !DILocation(line: 1302, column: 2, scope: !3381)
!3388 = !DILocation(line: 1303, column: 5, scope: !3334)
!3389 = !DILocation(line: 1309, column: 25, scope: !3114)
!3390 = !DILocation(line: 1309, column: 10, scope: !3114)
!3391 = !DILocation(line: 1309, column: 48, scope: !3114)
!3392 = !DILocation(line: 1309, column: 33, scope: !3114)
!3393 = !DILocation(line: 1309, column: 31, scope: !3114)
!3394 = !DILocation(line: 1309, column: 7, scope: !3114)
!3395 = !DILocation(line: 1311, column: 7, scope: !3396)
!3396 = distinct !DILexicalBlock(scope: !3114, file: !3, line: 1311, column: 7)
!3397 = !DILocation(line: 1311, column: 38, scope: !3396)
!3398 = !DILocation(line: 1311, column: 41, scope: !3396)
!3399 = !DILocation(line: 1311, column: 45, scope: !3396)
!3400 = !DILocation(line: 1311, column: 7, scope: !3114)
!3401 = !DILocation(line: 1312, column: 12, scope: !3396)
!3402 = !DILocation(line: 1312, column: 5, scope: !3396)
!3403 = !DILocation(line: 1317, column: 10, scope: !3114)
!3404 = !DILocation(line: 1317, column: 28, scope: !3114)
!3405 = !DILocation(line: 1317, column: 26, scope: !3114)
!3406 = !DILocation(line: 1317, column: 3, scope: !3114)
!3407 = !DILocation(line: 1318, column: 1, scope: !3114)
!3408 = distinct !DISubprogram(name: "advance_state", scope: !3, file: !3, line: 1537, type: !3409, scopeLine: 1538, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!3409 = !DISubroutineType(types: !3410)
!3410 = !{null, !2109}
!3411 = !DILocalVariable(name: "state", arg: 1, scope: !3408, file: !3, line: 1537, type: !2109)
!3412 = !DILocation(line: 1537, column: 24, scope: !3408)
!3413 = !DILocation(line: 1539, column: 21, scope: !3414)
!3414 = distinct !DILexicalBlock(scope: !3408, file: !3, line: 1539, column: 7)
!3415 = !DILocation(line: 1539, column: 7, scope: !3414)
!3416 = !DILocation(line: 1539, column: 7, scope: !3408)
!3417 = !DILocation(line: 1540, column: 19, scope: !3414)
!3418 = !DILocation(line: 1540, column: 5, scope: !3414)
!3419 = !DILocation(line: 1542, column: 21, scope: !3420)
!3420 = distinct !DILexicalBlock(scope: !3408, file: !3, line: 1542, column: 7)
!3421 = !DILocation(line: 1542, column: 7, scope: !3420)
!3422 = !DILocation(line: 1542, column: 7, scope: !3408)
!3423 = !DILocation(line: 1543, column: 23, scope: !3420)
!3424 = !DILocation(line: 1544, column: 23, scope: !3420)
!3425 = !DILocation(line: 1544, column: 9, scope: !3420)
!3426 = !DILocation(line: 1543, column: 5, scope: !3420)
!3427 = !DILocation(line: 1546, column: 21, scope: !3408)
!3428 = !DILocation(line: 1546, column: 3, scope: !3408)
!3429 = !DILocation(line: 1548, column: 21, scope: !3430)
!3430 = distinct !DILexicalBlock(scope: !3408, file: !3, line: 1548, column: 7)
!3431 = !DILocation(line: 1548, column: 7, scope: !3430)
!3432 = !DILocation(line: 1548, column: 7, scope: !3408)
!3433 = !DILocation(line: 1549, column: 23, scope: !3430)
!3434 = !DILocation(line: 1550, column: 23, scope: !3430)
!3435 = !DILocation(line: 1550, column: 9, scope: !3430)
!3436 = !DILocation(line: 1549, column: 5, scope: !3430)
!3437 = !DILocation(line: 1552, column: 21, scope: !3438)
!3438 = distinct !DILexicalBlock(scope: !3408, file: !3, line: 1552, column: 7)
!3439 = !DILocation(line: 1552, column: 7, scope: !3438)
!3440 = !DILocation(line: 1552, column: 7, scope: !3408)
!3441 = !DILocation(line: 1553, column: 19, scope: !3438)
!3442 = !DILocation(line: 1553, column: 5, scope: !3438)
!3443 = !DILocation(line: 1554, column: 1, scope: !3408)
!3444 = distinct !DISubprogram(name: "sched_setup_bb_reg_pressure_info", scope: !3, file: !3, line: 1648, type: !3445, scopeLine: 1649, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!3445 = !DISubroutineType(types: !3446)
!3446 = !{null, !1406, !867}
!3447 = !DILocalVariable(name: "bb", arg: 1, scope: !3444, file: !3, line: 1648, type: !1406)
!3448 = !DILocation(line: 1648, column: 47, scope: !3444)
!3449 = !DILocalVariable(name: "after", arg: 2, scope: !3444, file: !3, line: 1648, type: !867)
!3450 = !DILocation(line: 1648, column: 55, scope: !3444)
!3451 = !DILocation(line: 1650, column: 3, scope: !3444)
!3452 = !DILocation(line: 1651, column: 34, scope: !3444)
!3453 = !DILocation(line: 1651, column: 3, scope: !3444)
!3454 = !DILocation(line: 1652, column: 32, scope: !3444)
!3455 = !DILocation(line: 1652, column: 3, scope: !3444)
!3456 = !DILocation(line: 1653, column: 1, scope: !3444)
!3457 = distinct !DISubprogram(name: "initiate_bb_reg_pressure_info", scope: !3, file: !3, line: 714, type: !2345, scopeLine: 715, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!3458 = !DILocalVariable(name: "bb", arg: 1, scope: !3457, file: !3, line: 714, type: !1406)
!3459 = !DILocation(line: 714, column: 44, scope: !3457)
!3460 = !DILocalVariable(name: "i", scope: !3457, file: !3, line: 716, type: !7)
!3461 = !DILocation(line: 716, column: 16, scope: !3457)
!3462 = !DILocalVariable(name: "insn", scope: !3457, file: !3, line: 717, type: !867)
!3463 = !DILocation(line: 717, column: 7, scope: !3457)
!3464 = !DILocation(line: 719, column: 7, scope: !3465)
!3465 = distinct !DILexicalBlock(scope: !3457, file: !3, line: 719, column: 7)
!3466 = !DILocation(line: 719, column: 25, scope: !3465)
!3467 = !DILocation(line: 719, column: 7, scope: !3457)
!3468 = !DILocation(line: 720, column: 5, scope: !3469)
!3469 = distinct !DILexicalBlock(scope: !3465, file: !3, line: 720, column: 5)
!3470 = !DILocation(line: 720, column: 5, scope: !3471)
!3471 = distinct !DILexicalBlock(scope: !3469, file: !3, line: 720, column: 5)
!3472 = !DILocation(line: 0, scope: !3471)
!3473 = !DILocation(line: 721, column: 11, scope: !3474)
!3474 = distinct !DILexicalBlock(scope: !3471, file: !3, line: 721, column: 11)
!3475 = !DILocation(line: 721, column: 11, scope: !3471)
!3476 = !DILocation(line: 722, column: 18, scope: !3474)
!3477 = !DILocation(line: 722, column: 2, scope: !3474)
!3478 = distinct !{!3478, !3468, !3479}
!3479 = !DILocation(line: 722, column: 32, scope: !3469)
!3480 = !DILocation(line: 723, column: 47, scope: !3457)
!3481 = !DILocation(line: 723, column: 31, scope: !3457)
!3482 = !DILocation(line: 723, column: 3, scope: !3457)
!3483 = !DILocation(line: 725, column: 23, scope: !3484)
!3484 = distinct !DILexicalBlock(scope: !3457, file: !3, line: 725, column: 7)
!3485 = !DILocation(line: 725, column: 7, scope: !3484)
!3486 = !DILocation(line: 725, column: 7, scope: !3457)
!3487 = !DILocation(line: 726, column: 12, scope: !3488)
!3488 = distinct !DILexicalBlock(scope: !3484, file: !3, line: 726, column: 5)
!3489 = !DILocation(line: 726, column: 10, scope: !3488)
!3490 = !DILocalVariable(name: "regno", scope: !3491, file: !3, line: 728, type: !7)
!3491 = distinct !DILexicalBlock(scope: !3492, file: !3, line: 727, column: 7)
!3492 = distinct !DILexicalBlock(scope: !3488, file: !3, line: 726, column: 5)
!3493 = !DILocation(line: 728, column: 15, scope: !3491)
!3494 = !DILocation(line: 728, column: 23, scope: !3491)
!3495 = !DILocation(line: 730, column: 6, scope: !3496)
!3496 = distinct !DILexicalBlock(scope: !3491, file: !3, line: 730, column: 6)
!3497 = !DILocation(line: 730, column: 12, scope: !3496)
!3498 = !DILocation(line: 730, column: 6, scope: !3491)
!3499 = !DILocation(line: 731, column: 4, scope: !3496)
!3500 = !DILocation(line: 732, column: 38, scope: !3501)
!3501 = distinct !DILexicalBlock(scope: !3491, file: !3, line: 732, column: 6)
!3502 = !DILocation(line: 732, column: 22, scope: !3501)
!3503 = !DILocation(line: 732, column: 43, scope: !3501)
!3504 = !DILocation(line: 732, column: 8, scope: !3501)
!3505 = !DILocation(line: 732, column: 6, scope: !3491)
!3506 = !DILocation(line: 733, column: 31, scope: !3501)
!3507 = !DILocation(line: 733, column: 4, scope: !3501)
!3508 = !DILocation(line: 734, column: 7, scope: !3491)
!3509 = !DILocation(line: 726, column: 19, scope: !3492)
!3510 = !DILocation(line: 726, column: 5, scope: !3492)
!3511 = distinct !{!3511, !3512, !3513}
!3512 = !DILocation(line: 726, column: 5, scope: !3488)
!3513 = !DILocation(line: 734, column: 7, scope: !3488)
!3514 = !DILocation(line: 736, column: 1, scope: !3457)
!3515 = !DILocalVariable(name: "after", arg: 1, scope: !2446, file: !3, line: 1586, type: !867)
!3516 = !DILocation(line: 1586, column: 34, scope: !2446)
!3517 = !DILocalVariable(name: "update_p", arg: 2, scope: !2446, file: !3, line: 1586, type: !1100)
!3518 = !DILocation(line: 1586, column: 46, scope: !2446)
!3519 = !DILocalVariable(name: "i", scope: !2446, file: !3, line: 1588, type: !865)
!3520 = !DILocation(line: 1588, column: 7, scope: !2446)
!3521 = !DILocalVariable(name: "p", scope: !2446, file: !3, line: 1588, type: !865)
!3522 = !DILocation(line: 1588, column: 10, scope: !2446)
!3523 = !DILocalVariable(name: "eq_p", scope: !2446, file: !3, line: 1589, type: !1100)
!3524 = !DILocation(line: 1589, column: 8, scope: !2446)
!3525 = !DILocalVariable(name: "insn", scope: !2446, file: !3, line: 1590, type: !867)
!3526 = !DILocation(line: 1590, column: 7, scope: !2446)
!3527 = !DILocation(line: 1593, column: 3, scope: !2446)
!3528 = !DILocation(line: 1594, column: 10, scope: !3529)
!3529 = distinct !DILexicalBlock(scope: !2446, file: !3, line: 1594, column: 3)
!3530 = !DILocation(line: 1594, column: 8, scope: !3529)
!3531 = !DILocation(line: 1594, column: 15, scope: !3532)
!3532 = distinct !DILexicalBlock(scope: !3529, file: !3, line: 1594, column: 3)
!3533 = !DILocation(line: 1594, column: 19, scope: !3532)
!3534 = !DILocation(line: 1594, column: 17, scope: !3532)
!3535 = !DILocation(line: 1594, column: 3, scope: !3529)
!3536 = !DILocation(line: 1596, column: 47, scope: !3532)
!3537 = !DILocation(line: 1596, column: 27, scope: !3532)
!3538 = !DILocation(line: 1596, column: 9, scope: !3532)
!3539 = !DILocation(line: 1595, column: 42, scope: !3532)
!3540 = !DILocation(line: 1595, column: 22, scope: !3532)
!3541 = !DILocation(line: 1595, column: 5, scope: !3532)
!3542 = !DILocation(line: 1596, column: 7, scope: !3532)
!3543 = !DILocation(line: 1594, column: 46, scope: !3532)
!3544 = !DILocation(line: 1594, column: 3, scope: !3532)
!3545 = distinct !{!3545, !3535, !3546}
!3546 = !DILocation(line: 1596, column: 49, scope: !3529)
!3547 = !DILocation(line: 1597, column: 15, scope: !3548)
!3548 = distinct !DILexicalBlock(scope: !2446, file: !3, line: 1597, column: 3)
!3549 = !DILocation(line: 1597, column: 13, scope: !3548)
!3550 = !DILocation(line: 1597, column: 8, scope: !3548)
!3551 = !DILocation(line: 1598, column: 8, scope: !3552)
!3552 = distinct !DILexicalBlock(scope: !3548, file: !3, line: 1597, column: 3)
!3553 = !DILocation(line: 1598, column: 13, scope: !3552)
!3554 = !DILocation(line: 1598, column: 25, scope: !3552)
!3555 = !DILocation(line: 1598, column: 28, scope: !3552)
!3556 = !DILocation(line: 1598, column: 53, scope: !3552)
!3557 = !DILocation(line: 1598, column: 50, scope: !3552)
!3558 = !DILocation(line: 0, scope: !3552)
!3559 = !DILocation(line: 1597, column: 3, scope: !3548)
!3560 = !DILocation(line: 1600, column: 9, scope: !3561)
!3561 = distinct !DILexicalBlock(scope: !3552, file: !3, line: 1600, column: 9)
!3562 = !DILocation(line: 1600, column: 9, scope: !3552)
!3563 = !DILocation(line: 1602, column: 7, scope: !3564)
!3564 = distinct !DILexicalBlock(scope: !3561, file: !3, line: 1601, column: 7)
!3565 = !DILocation(line: 1603, column: 9, scope: !3566)
!3566 = distinct !DILexicalBlock(scope: !3564, file: !3, line: 1603, column: 2)
!3567 = !DILocation(line: 1603, column: 7, scope: !3566)
!3568 = !DILocation(line: 1603, column: 14, scope: !3569)
!3569 = distinct !DILexicalBlock(scope: !3566, file: !3, line: 1603, column: 2)
!3570 = !DILocation(line: 1603, column: 18, scope: !3569)
!3571 = !DILocation(line: 1603, column: 16, scope: !3569)
!3572 = !DILocation(line: 1603, column: 2, scope: !3566)
!3573 = !DILocation(line: 1605, column: 47, scope: !3574)
!3574 = distinct !DILexicalBlock(scope: !3569, file: !3, line: 1604, column: 4)
!3575 = !DILocation(line: 1605, column: 27, scope: !3574)
!3576 = !DILocation(line: 1605, column: 10, scope: !3574)
!3577 = !DILocation(line: 1605, column: 8, scope: !3574)
!3578 = !DILocation(line: 1606, column: 10, scope: !3579)
!3579 = distinct !DILexicalBlock(scope: !3574, file: !3, line: 1606, column: 10)
!3580 = !DILocation(line: 1606, column: 39, scope: !3579)
!3581 = !DILocation(line: 1606, column: 45, scope: !3579)
!3582 = !DILocation(line: 1606, column: 42, scope: !3579)
!3583 = !DILocation(line: 1606, column: 10, scope: !3574)
!3584 = !DILocation(line: 1608, column: 8, scope: !3585)
!3585 = distinct !DILexicalBlock(scope: !3579, file: !3, line: 1607, column: 8)
!3586 = !DILocation(line: 1610, column: 44, scope: !3585)
!3587 = !DILocation(line: 1610, column: 24, scope: !3585)
!3588 = !DILocation(line: 1610, column: 7, scope: !3585)
!3589 = !DILocation(line: 1609, column: 3, scope: !3585)
!3590 = !DILocation(line: 1609, column: 32, scope: !3585)
!3591 = !DILocation(line: 1610, column: 5, scope: !3585)
!3592 = !DILocation(line: 1611, column: 8, scope: !3585)
!3593 = !DILocation(line: 1612, column: 4, scope: !3574)
!3594 = !DILocation(line: 1603, column: 45, scope: !3569)
!3595 = !DILocation(line: 1603, column: 2, scope: !3569)
!3596 = distinct !{!3596, !3572, !3597}
!3597 = !DILocation(line: 1612, column: 4, scope: !3566)
!3598 = !DILocation(line: 1613, column: 6, scope: !3599)
!3599 = distinct !DILexicalBlock(scope: !3564, file: !3, line: 1613, column: 6)
!3600 = !DILocation(line: 1613, column: 15, scope: !3599)
!3601 = !DILocation(line: 1613, column: 18, scope: !3599)
!3602 = !DILocation(line: 1613, column: 6, scope: !3564)
!3603 = !DILocation(line: 1614, column: 4, scope: !3599)
!3604 = !DILocation(line: 1615, column: 28, scope: !3564)
!3605 = !DILocation(line: 1615, column: 2, scope: !3564)
!3606 = !DILocation(line: 1616, column: 9, scope: !3607)
!3607 = distinct !DILexicalBlock(scope: !3564, file: !3, line: 1616, column: 2)
!3608 = !DILocation(line: 1616, column: 7, scope: !3607)
!3609 = !DILocation(line: 1616, column: 14, scope: !3610)
!3610 = distinct !DILexicalBlock(scope: !3607, file: !3, line: 1616, column: 2)
!3611 = !DILocation(line: 1616, column: 18, scope: !3610)
!3612 = !DILocation(line: 1616, column: 16, scope: !3610)
!3613 = !DILocation(line: 1616, column: 2, scope: !3607)
!3614 = !DILocation(line: 1617, column: 45, scope: !3615)
!3615 = distinct !DILexicalBlock(scope: !3610, file: !3, line: 1617, column: 8)
!3616 = !DILocation(line: 1617, column: 25, scope: !3615)
!3617 = !DILocation(line: 1617, column: 8, scope: !3615)
!3618 = !DILocation(line: 1618, column: 48, scope: !3615)
!3619 = !DILocation(line: 1618, column: 28, scope: !3615)
!3620 = !DILocation(line: 1618, column: 10, scope: !3615)
!3621 = !DILocation(line: 1618, column: 8, scope: !3615)
!3622 = !DILocation(line: 1617, column: 8, scope: !3610)
!3623 = !DILocation(line: 1620, column: 48, scope: !3615)
!3624 = !DILocation(line: 1620, column: 28, scope: !3615)
!3625 = !DILocation(line: 1620, column: 10, scope: !3615)
!3626 = !DILocation(line: 1619, column: 43, scope: !3615)
!3627 = !DILocation(line: 1619, column: 23, scope: !3615)
!3628 = !DILocation(line: 1619, column: 6, scope: !3615)
!3629 = !DILocation(line: 1620, column: 8, scope: !3615)
!3630 = !DILocation(line: 1618, column: 50, scope: !3615)
!3631 = !DILocation(line: 1616, column: 45, scope: !3610)
!3632 = !DILocation(line: 1616, column: 2, scope: !3610)
!3633 = distinct !{!3633, !3613, !3634}
!3634 = !DILocation(line: 1620, column: 50, scope: !3607)
!3635 = !DILocation(line: 1621, column: 7, scope: !3564)
!3636 = !DILocation(line: 1599, column: 15, scope: !3552)
!3637 = !DILocation(line: 1599, column: 13, scope: !3552)
!3638 = !DILocation(line: 1597, column: 3, scope: !3552)
!3639 = distinct !{!3639, !3559, !3640}
!3640 = !DILocation(line: 1621, column: 7, scope: !3548)
!3641 = !DILocation(line: 1622, column: 3, scope: !2446)
!3642 = !DILocation(line: 1623, column: 1, scope: !2446)
!3643 = distinct !DISubprogram(name: "concat_note_lists", scope: !3, file: !3, line: 1818, type: !3644, scopeLine: 1819, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!3644 = !DISubroutineType(types: !3645)
!3645 = !{null, !867, !2098}
!3646 = !DILocalVariable(name: "from_end", arg: 1, scope: !3643, file: !3, line: 1818, type: !867)
!3647 = !DILocation(line: 1818, column: 24, scope: !3643)
!3648 = !DILocalVariable(name: "to_endp", arg: 2, scope: !3643, file: !3, line: 1818, type: !2098)
!3649 = !DILocation(line: 1818, column: 39, scope: !3643)
!3650 = !DILocalVariable(name: "from_start", scope: !3643, file: !3, line: 1820, type: !867)
!3651 = !DILocation(line: 1820, column: 7, scope: !3643)
!3652 = !DILocation(line: 1823, column: 7, scope: !3653)
!3653 = distinct !DILexicalBlock(scope: !3643, file: !3, line: 1823, column: 7)
!3654 = !DILocation(line: 1823, column: 16, scope: !3653)
!3655 = !DILocation(line: 1823, column: 7, scope: !3643)
!3656 = !DILocation(line: 1824, column: 5, scope: !3653)
!3657 = !DILocation(line: 1827, column: 8, scope: !3658)
!3658 = distinct !DILexicalBlock(scope: !3643, file: !3, line: 1827, column: 7)
!3659 = !DILocation(line: 1827, column: 7, scope: !3658)
!3660 = !DILocation(line: 1827, column: 16, scope: !3658)
!3661 = !DILocation(line: 1827, column: 7, scope: !3643)
!3662 = !DILocation(line: 1829, column: 18, scope: !3663)
!3663 = distinct !DILexicalBlock(scope: !3658, file: !3, line: 1828, column: 5)
!3664 = !DILocation(line: 1829, column: 8, scope: !3663)
!3665 = !DILocation(line: 1829, column: 16, scope: !3663)
!3666 = !DILocation(line: 1830, column: 7, scope: !3663)
!3667 = !DILocation(line: 1833, column: 16, scope: !3643)
!3668 = !DILocation(line: 1833, column: 14, scope: !3643)
!3669 = !DILocation(line: 1834, column: 3, scope: !3643)
!3670 = !DILocation(line: 1834, column: 10, scope: !3643)
!3671 = !DILocation(line: 1834, column: 33, scope: !3643)
!3672 = !DILocation(line: 1835, column: 18, scope: !3643)
!3673 = !DILocation(line: 1835, column: 16, scope: !3643)
!3674 = distinct !{!3674, !3669, !3672}
!3675 = !DILocation(line: 1837, column: 29, scope: !3643)
!3676 = !DILocation(line: 1837, column: 28, scope: !3643)
!3677 = !DILocation(line: 1837, column: 3, scope: !3643)
!3678 = !DILocation(line: 1837, column: 26, scope: !3643)
!3679 = !DILocation(line: 1838, column: 26, scope: !3643)
!3680 = !DILocation(line: 1838, column: 3, scope: !3643)
!3681 = !DILocation(line: 1838, column: 24, scope: !3643)
!3682 = !DILocation(line: 1839, column: 14, scope: !3643)
!3683 = !DILocation(line: 1839, column: 4, scope: !3643)
!3684 = !DILocation(line: 1839, column: 12, scope: !3643)
!3685 = !DILocation(line: 1840, column: 1, scope: !3643)
!3686 = distinct !DISubprogram(name: "remove_notes", scope: !3, file: !3, line: 1845, type: !2407, scopeLine: 1846, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!3687 = !DILocalVariable(name: "head", arg: 1, scope: !3686, file: !3, line: 1845, type: !867)
!3688 = !DILocation(line: 1845, column: 19, scope: !3686)
!3689 = !DILocalVariable(name: "tail", arg: 2, scope: !3686, file: !3, line: 1845, type: !867)
!3690 = !DILocation(line: 1845, column: 29, scope: !3686)
!3691 = !DILocalVariable(name: "next_tail", scope: !3686, file: !3, line: 1847, type: !867)
!3692 = !DILocation(line: 1847, column: 7, scope: !3686)
!3693 = !DILocalVariable(name: "insn", scope: !3686, file: !3, line: 1847, type: !867)
!3694 = !DILocation(line: 1847, column: 18, scope: !3686)
!3695 = !DILocalVariable(name: "next", scope: !3686, file: !3, line: 1847, type: !867)
!3696 = !DILocation(line: 1847, column: 24, scope: !3686)
!3697 = !DILocation(line: 1849, column: 13, scope: !3686)
!3698 = !DILocation(line: 1850, column: 7, scope: !3699)
!3699 = distinct !DILexicalBlock(scope: !3686, file: !3, line: 1850, column: 7)
!3700 = !DILocation(line: 1850, column: 15, scope: !3699)
!3701 = !DILocation(line: 1850, column: 12, scope: !3699)
!3702 = !DILocation(line: 1850, column: 20, scope: !3699)
!3703 = !DILocation(line: 1850, column: 24, scope: !3699)
!3704 = !DILocation(line: 1850, column: 7, scope: !3686)
!3705 = !DILocation(line: 1851, column: 5, scope: !3699)
!3706 = !DILocation(line: 1853, column: 15, scope: !3686)
!3707 = !DILocation(line: 1853, column: 13, scope: !3686)
!3708 = !DILocation(line: 1854, column: 15, scope: !3709)
!3709 = distinct !DILexicalBlock(scope: !3686, file: !3, line: 1854, column: 3)
!3710 = !DILocation(line: 1854, column: 13, scope: !3709)
!3711 = !DILocation(line: 1854, column: 8, scope: !3709)
!3712 = !DILocation(line: 1854, column: 21, scope: !3713)
!3713 = distinct !DILexicalBlock(scope: !3709, file: !3, line: 1854, column: 3)
!3714 = !DILocation(line: 1854, column: 29, scope: !3713)
!3715 = !DILocation(line: 1854, column: 26, scope: !3713)
!3716 = !DILocation(line: 1854, column: 3, scope: !3709)
!3717 = !DILocation(line: 1856, column: 14, scope: !3718)
!3718 = distinct !DILexicalBlock(scope: !3713, file: !3, line: 1855, column: 5)
!3719 = !DILocation(line: 1856, column: 12, scope: !3718)
!3720 = !DILocation(line: 1857, column: 12, scope: !3721)
!3721 = distinct !DILexicalBlock(scope: !3718, file: !3, line: 1857, column: 11)
!3722 = !DILocation(line: 1857, column: 11, scope: !3718)
!3723 = !DILocation(line: 1858, column: 2, scope: !3721)
!3724 = !DILocation(line: 1860, column: 15, scope: !3718)
!3725 = !DILocation(line: 1860, column: 7, scope: !3718)
!3726 = !DILocation(line: 1863, column: 4, scope: !3727)
!3727 = distinct !DILexicalBlock(scope: !3718, file: !3, line: 1861, column: 2)
!3728 = !DILocation(line: 1866, column: 8, scope: !3729)
!3729 = distinct !DILexicalBlock(scope: !3727, file: !3, line: 1866, column: 8)
!3730 = !DILocation(line: 1866, column: 16, scope: !3729)
!3731 = !DILocation(line: 1866, column: 13, scope: !3729)
!3732 = !DILocation(line: 1866, column: 8, scope: !3727)
!3733 = !DILocation(line: 1868, column: 21, scope: !3734)
!3734 = distinct !DILexicalBlock(scope: !3729, file: !3, line: 1867, column: 6)
!3735 = !DILocation(line: 1868, column: 8, scope: !3734)
!3736 = !DILocation(line: 1869, column: 22, scope: !3734)
!3737 = !DILocation(line: 1870, column: 8, scope: !3734)
!3738 = !DILocation(line: 1869, column: 8, scope: !3734)
!3739 = !DILocation(line: 1871, column: 8, scope: !3734)
!3740 = !DILocation(line: 1876, column: 17, scope: !3727)
!3741 = !DILocation(line: 1876, column: 4, scope: !3727)
!3742 = !DILocation(line: 1879, column: 23, scope: !3727)
!3743 = !DILocation(line: 1879, column: 4, scope: !3727)
!3744 = !DILocation(line: 1879, column: 21, scope: !3727)
!3745 = !DILocation(line: 1880, column: 4, scope: !3727)
!3746 = !DILocation(line: 1880, column: 21, scope: !3727)
!3747 = !DILocation(line: 1881, column: 8, scope: !3748)
!3748 = distinct !DILexicalBlock(scope: !3727, file: !3, line: 1881, column: 8)
!3749 = !DILocation(line: 1881, column: 8, scope: !3727)
!3750 = !DILocation(line: 1882, column: 30, scope: !3748)
!3751 = !DILocation(line: 1882, column: 6, scope: !3748)
!3752 = !DILocation(line: 1882, column: 28, scope: !3748)
!3753 = !DILocation(line: 1883, column: 16, scope: !3727)
!3754 = !DILocation(line: 1883, column: 14, scope: !3727)
!3755 = !DILocation(line: 1884, column: 4, scope: !3727)
!3756 = !DILocation(line: 1887, column: 7, scope: !3718)
!3757 = !DILocation(line: 1888, column: 5, scope: !3718)
!3758 = !DILocation(line: 1854, column: 47, scope: !3713)
!3759 = !DILocation(line: 1854, column: 45, scope: !3713)
!3760 = !DILocation(line: 1854, column: 3, scope: !3713)
!3761 = distinct !{!3761, !3716, !3762}
!3762 = !DILocation(line: 1888, column: 5, scope: !3709)
!3763 = !DILocation(line: 1889, column: 1, scope: !3686)
!3764 = distinct !DISubprogram(name: "get_ebb_head_tail", scope: !3, file: !3, line: 1895, type: !3765, scopeLine: 1896, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!3765 = !DISubroutineType(types: !3766)
!3766 = !{null, !1406, !1406, !2098, !2098}
!3767 = !DILocalVariable(name: "beg", arg: 1, scope: !3764, file: !3, line: 1895, type: !1406)
!3768 = !DILocation(line: 1895, column: 32, scope: !3764)
!3769 = !DILocalVariable(name: "end", arg: 2, scope: !3764, file: !3, line: 1895, type: !1406)
!3770 = !DILocation(line: 1895, column: 49, scope: !3764)
!3771 = !DILocalVariable(name: "headp", arg: 3, scope: !3764, file: !3, line: 1895, type: !2098)
!3772 = !DILocation(line: 1895, column: 59, scope: !3764)
!3773 = !DILocalVariable(name: "tailp", arg: 4, scope: !3764, file: !3, line: 1895, type: !2098)
!3774 = !DILocation(line: 1895, column: 71, scope: !3764)
!3775 = !DILocalVariable(name: "beg_head", scope: !3764, file: !3, line: 1897, type: !867)
!3776 = !DILocation(line: 1897, column: 7, scope: !3764)
!3777 = !DILocation(line: 1897, column: 18, scope: !3764)
!3778 = !DILocalVariable(name: "beg_tail", scope: !3764, file: !3, line: 1898, type: !867)
!3779 = !DILocation(line: 1898, column: 7, scope: !3764)
!3780 = !DILocation(line: 1898, column: 18, scope: !3764)
!3781 = !DILocalVariable(name: "end_head", scope: !3764, file: !3, line: 1899, type: !867)
!3782 = !DILocation(line: 1899, column: 7, scope: !3764)
!3783 = !DILocation(line: 1899, column: 18, scope: !3764)
!3784 = !DILocalVariable(name: "end_tail", scope: !3764, file: !3, line: 1900, type: !867)
!3785 = !DILocation(line: 1900, column: 7, scope: !3764)
!3786 = !DILocation(line: 1900, column: 18, scope: !3764)
!3787 = !DILocation(line: 1905, column: 7, scope: !3788)
!3788 = distinct !DILexicalBlock(scope: !3764, file: !3, line: 1905, column: 7)
!3789 = !DILocation(line: 1905, column: 7, scope: !3764)
!3790 = !DILocation(line: 1906, column: 16, scope: !3788)
!3791 = !DILocation(line: 1906, column: 14, scope: !3788)
!3792 = !DILocation(line: 1906, column: 5, scope: !3788)
!3793 = !DILocation(line: 1908, column: 3, scope: !3764)
!3794 = !DILocation(line: 1908, column: 10, scope: !3764)
!3795 = !DILocation(line: 1908, column: 22, scope: !3764)
!3796 = !DILocation(line: 1908, column: 19, scope: !3764)
!3797 = !DILocation(line: 1909, column: 9, scope: !3798)
!3798 = distinct !DILexicalBlock(scope: !3764, file: !3, line: 1909, column: 9)
!3799 = !DILocation(line: 1909, column: 27, scope: !3798)
!3800 = !DILocation(line: 1909, column: 30, scope: !3798)
!3801 = !DILocation(line: 1909, column: 9, scope: !3764)
!3802 = !DILocation(line: 1910, column: 18, scope: !3798)
!3803 = !DILocation(line: 1910, column: 16, scope: !3798)
!3804 = !DILocation(line: 1910, column: 7, scope: !3798)
!3805 = !DILocation(line: 1912, column: 7, scope: !3798)
!3806 = distinct !{!3806, !3793, !3807}
!3807 = !DILocation(line: 1912, column: 7, scope: !3764)
!3808 = !DILocation(line: 1914, column: 12, scope: !3764)
!3809 = !DILocation(line: 1914, column: 4, scope: !3764)
!3810 = !DILocation(line: 1914, column: 10, scope: !3764)
!3811 = !DILocation(line: 1916, column: 7, scope: !3812)
!3812 = distinct !DILexicalBlock(scope: !3764, file: !3, line: 1916, column: 7)
!3813 = !DILocation(line: 1916, column: 14, scope: !3812)
!3814 = !DILocation(line: 1916, column: 11, scope: !3812)
!3815 = !DILocation(line: 1916, column: 7, scope: !3764)
!3816 = !DILocation(line: 1917, column: 16, scope: !3812)
!3817 = !DILocation(line: 1917, column: 14, scope: !3812)
!3818 = !DILocation(line: 1917, column: 5, scope: !3812)
!3819 = !DILocation(line: 1918, column: 12, scope: !3820)
!3820 = distinct !DILexicalBlock(scope: !3812, file: !3, line: 1918, column: 12)
!3821 = !DILocation(line: 1918, column: 12, scope: !3812)
!3822 = !DILocation(line: 1919, column: 16, scope: !3820)
!3823 = !DILocation(line: 1919, column: 14, scope: !3820)
!3824 = !DILocation(line: 1919, column: 5, scope: !3820)
!3825 = !DILocation(line: 1921, column: 3, scope: !3764)
!3826 = !DILocation(line: 1921, column: 10, scope: !3764)
!3827 = !DILocation(line: 1921, column: 22, scope: !3764)
!3828 = !DILocation(line: 1921, column: 19, scope: !3764)
!3829 = !DILocation(line: 1922, column: 9, scope: !3830)
!3830 = distinct !DILexicalBlock(scope: !3764, file: !3, line: 1922, column: 9)
!3831 = !DILocation(line: 1922, column: 27, scope: !3830)
!3832 = !DILocation(line: 1922, column: 30, scope: !3830)
!3833 = !DILocation(line: 1922, column: 9, scope: !3764)
!3834 = !DILocation(line: 1923, column: 18, scope: !3830)
!3835 = !DILocation(line: 1923, column: 16, scope: !3830)
!3836 = !DILocation(line: 1923, column: 7, scope: !3830)
!3837 = !DILocation(line: 1925, column: 7, scope: !3830)
!3838 = distinct !{!3838, !3825, !3839}
!3839 = !DILocation(line: 1925, column: 7, scope: !3764)
!3840 = !DILocation(line: 1927, column: 12, scope: !3764)
!3841 = !DILocation(line: 1927, column: 4, scope: !3764)
!3842 = !DILocation(line: 1927, column: 10, scope: !3764)
!3843 = !DILocation(line: 1928, column: 1, scope: !3764)
!3844 = distinct !DISubprogram(name: "no_real_insns_p", scope: !3, file: !3, line: 1933, type: !3845, scopeLine: 1934, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!3845 = !DISubroutineType(types: !3846)
!3846 = !{!865, !2387, !2387}
!3847 = !DILocalVariable(name: "head", arg: 1, scope: !3844, file: !3, line: 1933, type: !2387)
!3848 = !DILocation(line: 1933, column: 28, scope: !3844)
!3849 = !DILocalVariable(name: "tail", arg: 2, scope: !3844, file: !3, line: 1933, type: !2387)
!3850 = !DILocation(line: 1933, column: 44, scope: !3844)
!3851 = !DILocation(line: 1935, column: 3, scope: !3844)
!3852 = !DILocation(line: 1935, column: 10, scope: !3844)
!3853 = !DILocation(line: 1935, column: 18, scope: !3844)
!3854 = !DILocation(line: 1935, column: 15, scope: !3844)
!3855 = !DILocation(line: 1937, column: 12, scope: !3856)
!3856 = distinct !DILexicalBlock(scope: !3857, file: !3, line: 1937, column: 11)
!3857 = distinct !DILexicalBlock(scope: !3844, file: !3, line: 1936, column: 5)
!3858 = !DILocation(line: 1937, column: 26, scope: !3856)
!3859 = !DILocation(line: 1937, column: 30, scope: !3856)
!3860 = !DILocation(line: 1938, column: 4, scope: !3856)
!3861 = !DILocation(line: 1938, column: 8, scope: !3856)
!3862 = !DILocation(line: 1937, column: 11, scope: !3857)
!3863 = !DILocation(line: 1939, column: 2, scope: !3856)
!3864 = !DILocation(line: 1940, column: 14, scope: !3857)
!3865 = !DILocation(line: 1940, column: 12, scope: !3857)
!3866 = distinct !{!3866, !3851, !3867}
!3867 = !DILocation(line: 1941, column: 5, scope: !3844)
!3868 = !DILocation(line: 1942, column: 3, scope: !3844)
!3869 = !DILocation(line: 1943, column: 1, scope: !3844)
!3870 = distinct !DISubprogram(name: "restore_other_notes", scope: !3, file: !3, line: 1948, type: !3871, scopeLine: 1949, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!3871 = !DISubroutineType(types: !3872)
!3872 = !{!867, !867, !1406}
!3873 = !DILocalVariable(name: "head", arg: 1, scope: !3870, file: !3, line: 1948, type: !867)
!3874 = !DILocation(line: 1948, column: 26, scope: !3870)
!3875 = !DILocalVariable(name: "head_bb", arg: 2, scope: !3870, file: !3, line: 1948, type: !1406)
!3876 = !DILocation(line: 1948, column: 44, scope: !3870)
!3877 = !DILocation(line: 1950, column: 7, scope: !3878)
!3878 = distinct !DILexicalBlock(scope: !3870, file: !3, line: 1950, column: 7)
!3879 = !DILocation(line: 1950, column: 17, scope: !3878)
!3880 = !DILocation(line: 1950, column: 7, scope: !3870)
!3881 = !DILocalVariable(name: "note_head", scope: !3882, file: !3, line: 1952, type: !867)
!3882 = distinct !DILexicalBlock(scope: !3878, file: !3, line: 1951, column: 5)
!3883 = !DILocation(line: 1952, column: 11, scope: !3882)
!3884 = !DILocation(line: 1952, column: 23, scope: !3882)
!3885 = !DILocation(line: 1954, column: 11, scope: !3886)
!3886 = distinct !DILexicalBlock(scope: !3882, file: !3, line: 1954, column: 11)
!3887 = !DILocation(line: 1954, column: 11, scope: !3882)
!3888 = !DILocation(line: 1955, column: 12, scope: !3886)
!3889 = !DILocation(line: 1955, column: 10, scope: !3886)
!3890 = !DILocation(line: 1955, column: 2, scope: !3886)
!3891 = !DILocation(line: 1957, column: 9, scope: !3886)
!3892 = !DILocation(line: 1957, column: 7, scope: !3886)
!3893 = !DILocation(line: 1959, column: 7, scope: !3882)
!3894 = !DILocation(line: 1959, column: 14, scope: !3882)
!3895 = !DILocation(line: 1961, column: 4, scope: !3896)
!3896 = distinct !DILexicalBlock(scope: !3882, file: !3, line: 1960, column: 2)
!3897 = !DILocation(line: 1962, column: 16, scope: !3896)
!3898 = !DILocation(line: 1962, column: 14, scope: !3896)
!3899 = distinct !{!3899, !3893, !3900}
!3900 = !DILocation(line: 1963, column: 2, scope: !3882)
!3901 = !DILocation(line: 1965, column: 7, scope: !3882)
!3902 = !DILocation(line: 1967, column: 31, scope: !3882)
!3903 = !DILocation(line: 1967, column: 7, scope: !3882)
!3904 = !DILocation(line: 1967, column: 29, scope: !3882)
!3905 = !DILocation(line: 1968, column: 38, scope: !3882)
!3906 = !DILocation(line: 1968, column: 7, scope: !3882)
!3907 = !DILocation(line: 1968, column: 36, scope: !3882)
!3908 = !DILocation(line: 1969, column: 26, scope: !3882)
!3909 = !DILocation(line: 1969, column: 7, scope: !3882)
!3910 = !DILocation(line: 1969, column: 24, scope: !3882)
!3911 = !DILocation(line: 1970, column: 31, scope: !3882)
!3912 = !DILocation(line: 1970, column: 7, scope: !3882)
!3913 = !DILocation(line: 1970, column: 29, scope: !3882)
!3914 = !DILocation(line: 1972, column: 11, scope: !3915)
!3915 = distinct !DILexicalBlock(scope: !3882, file: !3, line: 1972, column: 11)
!3916 = !DILocation(line: 1972, column: 36, scope: !3915)
!3917 = !DILocation(line: 1972, column: 33, scope: !3915)
!3918 = !DILocation(line: 1972, column: 11, scope: !3882)
!3919 = !DILocation(line: 1973, column: 21, scope: !3915)
!3920 = !DILocation(line: 1973, column: 2, scope: !3915)
!3921 = !DILocation(line: 1973, column: 19, scope: !3915)
!3922 = !DILocation(line: 1975, column: 14, scope: !3882)
!3923 = !DILocation(line: 1975, column: 12, scope: !3882)
!3924 = !DILocation(line: 1976, column: 5, scope: !3882)
!3925 = !DILocation(line: 1978, column: 10, scope: !3870)
!3926 = !DILocation(line: 1978, column: 3, scope: !3870)
!3927 = distinct !DISubprogram(name: "bb_note", scope: !3, file: !3, line: 5124, type: !3928, scopeLine: 5125, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!3928 = !DISubroutineType(types: !3929)
!3929 = !{!867, !1406}
!3930 = !DILocalVariable(name: "bb", arg: 1, scope: !3927, file: !3, line: 5124, type: !1406)
!3931 = !DILocation(line: 5124, column: 22, scope: !3927)
!3932 = !DILocalVariable(name: "note", scope: !3927, file: !3, line: 5126, type: !867)
!3933 = !DILocation(line: 5126, column: 7, scope: !3927)
!3934 = !DILocation(line: 5128, column: 10, scope: !3927)
!3935 = !DILocation(line: 5128, column: 8, scope: !3927)
!3936 = !DILocation(line: 5129, column: 7, scope: !3937)
!3937 = distinct !DILexicalBlock(scope: !3927, file: !3, line: 5129, column: 7)
!3938 = !DILocation(line: 5129, column: 7, scope: !3927)
!3939 = !DILocation(line: 5130, column: 12, scope: !3937)
!3940 = !DILocation(line: 5130, column: 10, scope: !3937)
!3941 = !DILocation(line: 5130, column: 5, scope: !3937)
!3942 = !DILocation(line: 5132, column: 3, scope: !3927)
!3943 = !DILocation(line: 5133, column: 10, scope: !3927)
!3944 = !DILocation(line: 5133, column: 3, scope: !3927)
!3945 = distinct !DISubprogram(name: "reemit_notes", scope: !3, file: !3, line: 2269, type: !2350, scopeLine: 2270, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!3946 = !DILocalVariable(name: "insn", arg: 1, scope: !3945, file: !3, line: 2269, type: !867)
!3947 = !DILocation(line: 2269, column: 19, scope: !3945)
!3948 = !DILocalVariable(name: "note", scope: !3945, file: !3, line: 2271, type: !867)
!3949 = !DILocation(line: 2271, column: 7, scope: !3945)
!3950 = !DILocalVariable(name: "last", scope: !3945, file: !3, line: 2271, type: !867)
!3951 = !DILocation(line: 2271, column: 13, scope: !3945)
!3952 = !DILocation(line: 2271, column: 20, scope: !3945)
!3953 = !DILocation(line: 2273, column: 15, scope: !3954)
!3954 = distinct !DILexicalBlock(scope: !3945, file: !3, line: 2273, column: 3)
!3955 = !DILocation(line: 2273, column: 13, scope: !3954)
!3956 = !DILocation(line: 2273, column: 8, scope: !3954)
!3957 = !DILocation(line: 2273, column: 33, scope: !3958)
!3958 = distinct !DILexicalBlock(scope: !3954, file: !3, line: 2273, column: 3)
!3959 = !DILocation(line: 2273, column: 3, scope: !3954)
!3960 = !DILocation(line: 2275, column: 11, scope: !3961)
!3961 = distinct !DILexicalBlock(scope: !3962, file: !3, line: 2275, column: 11)
!3962 = distinct !DILexicalBlock(scope: !3958, file: !3, line: 2274, column: 5)
!3963 = !DILocation(line: 2275, column: 32, scope: !3961)
!3964 = !DILocation(line: 2275, column: 11, scope: !3962)
!3965 = !DILocalVariable(name: "note_type", scope: !3966, file: !3, line: 2277, type: !582)
!3966 = distinct !DILexicalBlock(scope: !3961, file: !3, line: 2276, column: 2)
!3967 = !DILocation(line: 2277, column: 19, scope: !3966)
!3968 = !DILocation(line: 2277, column: 48, scope: !3966)
!3969 = !DILocation(line: 2277, column: 31, scope: !3966)
!3970 = !DILocation(line: 2279, column: 29, scope: !3966)
!3971 = !DILocation(line: 2279, column: 40, scope: !3966)
!3972 = !DILocation(line: 2279, column: 11, scope: !3966)
!3973 = !DILocation(line: 2279, column: 9, scope: !3966)
!3974 = !DILocation(line: 2280, column: 17, scope: !3966)
!3975 = !DILocation(line: 2280, column: 23, scope: !3966)
!3976 = !DILocation(line: 2280, column: 4, scope: !3966)
!3977 = !DILocation(line: 2281, column: 2, scope: !3966)
!3978 = !DILocation(line: 2282, column: 5, scope: !3962)
!3979 = !DILocation(line: 2273, column: 46, scope: !3958)
!3980 = !DILocation(line: 2273, column: 44, scope: !3958)
!3981 = !DILocation(line: 2273, column: 3, scope: !3958)
!3982 = distinct !{!3982, !3959, !3983}
!3983 = !DILocation(line: 2282, column: 5, scope: !3954)
!3984 = !DILocation(line: 2283, column: 1, scope: !3945)
!3985 = distinct !DISubprogram(name: "max_issue", scope: !3, file: !3, line: 2448, type: !3986, scopeLine: 2450, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!3986 = !DISubroutineType(types: !3987)
!3987 = !{!865, !2459, !865, !2109, !2176}
!3988 = !DILocalVariable(name: "ready", arg: 1, scope: !3985, file: !3, line: 2448, type: !2459)
!3989 = !DILocation(line: 2448, column: 31, scope: !3985)
!3990 = !DILocalVariable(name: "privileged_n", arg: 2, scope: !3985, file: !3, line: 2448, type: !865)
!3991 = !DILocation(line: 2448, column: 42, scope: !3985)
!3992 = !DILocalVariable(name: "state", arg: 3, scope: !3985, file: !3, line: 2448, type: !2109)
!3993 = !DILocation(line: 2448, column: 64, scope: !3985)
!3994 = !DILocalVariable(name: "index", arg: 4, scope: !3985, file: !3, line: 2449, type: !2176)
!3995 = !DILocation(line: 2449, column: 10, scope: !3985)
!3996 = !DILocalVariable(name: "n", scope: !3985, file: !3, line: 2451, type: !865)
!3997 = !DILocation(line: 2451, column: 7, scope: !3985)
!3998 = !DILocalVariable(name: "i", scope: !3985, file: !3, line: 2451, type: !865)
!3999 = !DILocation(line: 2451, column: 10, scope: !3985)
!4000 = !DILocalVariable(name: "all", scope: !3985, file: !3, line: 2451, type: !865)
!4001 = !DILocation(line: 2451, column: 13, scope: !3985)
!4002 = !DILocalVariable(name: "n_ready", scope: !3985, file: !3, line: 2451, type: !865)
!4003 = !DILocation(line: 2451, column: 18, scope: !3985)
!4004 = !DILocalVariable(name: "best", scope: !3985, file: !3, line: 2451, type: !865)
!4005 = !DILocation(line: 2451, column: 27, scope: !3985)
!4006 = !DILocalVariable(name: "delay", scope: !3985, file: !3, line: 2451, type: !865)
!4007 = !DILocation(line: 2451, column: 33, scope: !3985)
!4008 = !DILocalVariable(name: "tries_num", scope: !3985, file: !3, line: 2451, type: !865)
!4009 = !DILocation(line: 2451, column: 40, scope: !3985)
!4010 = !DILocalVariable(name: "max_points", scope: !3985, file: !3, line: 2451, type: !865)
!4011 = !DILocation(line: 2451, column: 51, scope: !3985)
!4012 = !DILocalVariable(name: "more_issue", scope: !3985, file: !3, line: 2452, type: !865)
!4013 = !DILocation(line: 2452, column: 7, scope: !3985)
!4014 = !DILocalVariable(name: "top", scope: !3985, file: !3, line: 2453, type: !2102)
!4015 = !DILocation(line: 2453, column: 24, scope: !3985)
!4016 = !DILocalVariable(name: "insn", scope: !3985, file: !3, line: 2454, type: !867)
!4017 = !DILocation(line: 2454, column: 7, scope: !3985)
!4018 = !DILocation(line: 2456, column: 13, scope: !3985)
!4019 = !DILocation(line: 2456, column: 20, scope: !3985)
!4020 = !DILocation(line: 2456, column: 11, scope: !3985)
!4021 = !DILocation(line: 2457, column: 3, scope: !3985)
!4022 = !DILocation(line: 2461, column: 7, scope: !4023)
!4023 = distinct !DILexicalBlock(scope: !3985, file: !3, line: 2461, column: 7)
!4024 = !DILocation(line: 2461, column: 53, scope: !4023)
!4025 = !DILocation(line: 2461, column: 50, scope: !4023)
!4026 = !DILocation(line: 2461, column: 7, scope: !3985)
!4027 = !DILocation(line: 2463, column: 52, scope: !4028)
!4028 = distinct !DILexicalBlock(scope: !4023, file: !3, line: 2462, column: 5)
!4029 = !DILocation(line: 2463, column: 50, scope: !4028)
!4030 = !DILocation(line: 2464, column: 27, scope: !4028)
!4031 = !DILocation(line: 2465, column: 14, scope: !4032)
!4032 = distinct !DILexicalBlock(scope: !4028, file: !3, line: 2465, column: 7)
!4033 = !DILocation(line: 2465, column: 12, scope: !4032)
!4034 = !DILocation(line: 2465, column: 19, scope: !4035)
!4035 = distinct !DILexicalBlock(scope: !4032, file: !3, line: 2465, column: 7)
!4036 = !DILocation(line: 2465, column: 23, scope: !4035)
!4037 = !DILocation(line: 2465, column: 21, scope: !4035)
!4038 = !DILocation(line: 2465, column: 7, scope: !4032)
!4039 = !DILocation(line: 2466, column: 25, scope: !4035)
!4040 = !DILocation(line: 2466, column: 22, scope: !4035)
!4041 = !DILocation(line: 2466, column: 2, scope: !4035)
!4042 = !DILocation(line: 2465, column: 36, scope: !4035)
!4043 = !DILocation(line: 2465, column: 7, scope: !4035)
!4044 = distinct !{!4044, !4038, !4045}
!4045 = !DILocation(line: 2466, column: 25, scope: !4032)
!4046 = !DILocation(line: 2467, column: 5, scope: !4028)
!4047 = !DILocation(line: 2470, column: 14, scope: !3985)
!4048 = !DILocation(line: 2471, column: 16, scope: !3985)
!4049 = !DILocation(line: 2471, column: 29, scope: !3985)
!4050 = !DILocation(line: 2471, column: 27, scope: !3985)
!4051 = !DILocation(line: 2471, column: 14, scope: !3985)
!4052 = !DILocation(line: 2481, column: 10, scope: !4053)
!4053 = distinct !DILexicalBlock(scope: !3985, file: !3, line: 2481, column: 3)
!4054 = !DILocation(line: 2481, column: 8, scope: !4053)
!4055 = !DILocation(line: 2481, column: 15, scope: !4056)
!4056 = distinct !DILexicalBlock(scope: !4053, file: !3, line: 2481, column: 3)
!4057 = !DILocation(line: 2481, column: 19, scope: !4056)
!4058 = !DILocation(line: 2481, column: 17, scope: !4056)
!4059 = !DILocation(line: 2481, column: 3, scope: !4053)
!4060 = !DILocation(line: 2482, column: 10, scope: !4061)
!4061 = distinct !DILexicalBlock(scope: !4056, file: !3, line: 2482, column: 9)
!4062 = !DILocation(line: 2482, column: 21, scope: !4061)
!4063 = !DILocation(line: 2482, column: 9, scope: !4056)
!4064 = !DILocation(line: 2484, column: 16, scope: !4065)
!4065 = distinct !DILexicalBlock(scope: !4066, file: !3, line: 2484, column: 6)
!4066 = distinct !DILexicalBlock(scope: !4061, file: !3, line: 2483, column: 7)
!4067 = !DILocation(line: 2484, column: 19, scope: !4065)
!4068 = !DILocation(line: 2484, column: 6, scope: !4066)
!4069 = !DILocation(line: 2485, column: 15, scope: !4065)
!4070 = !DILocation(line: 2485, column: 4, scope: !4065)
!4071 = !DILocation(line: 2487, column: 4, scope: !4065)
!4072 = !DILocation(line: 2488, column: 7, scope: !4066)
!4073 = !DILocation(line: 2482, column: 22, scope: !4061)
!4074 = !DILocation(line: 2481, column: 29, scope: !4056)
!4075 = !DILocation(line: 2481, column: 3, scope: !4056)
!4076 = distinct !{!4076, !4059, !4077}
!4077 = !DILocation(line: 2488, column: 7, scope: !4053)
!4078 = !DILocation(line: 2491, column: 8, scope: !3985)
!4079 = !DILocation(line: 2493, column: 9, scope: !3985)
!4080 = !DILocation(line: 2493, column: 7, scope: !3985)
!4081 = !DILocation(line: 2496, column: 11, scope: !3985)
!4082 = !DILocation(line: 2496, column: 16, scope: !3985)
!4083 = !DILocation(line: 2496, column: 23, scope: !3985)
!4084 = !DILocation(line: 2496, column: 30, scope: !3985)
!4085 = !DILocation(line: 2496, column: 3, scope: !3985)
!4086 = !DILocation(line: 2497, column: 15, scope: !3985)
!4087 = !DILocation(line: 2497, column: 3, scope: !3985)
!4088 = !DILocation(line: 2497, column: 8, scope: !3985)
!4089 = !DILocation(line: 2497, column: 13, scope: !3985)
!4090 = !DILocation(line: 2498, column: 3, scope: !3985)
!4091 = !DILocation(line: 2498, column: 8, scope: !3985)
!4092 = !DILocation(line: 2498, column: 10, scope: !3985)
!4093 = !DILocation(line: 2501, column: 16, scope: !4094)
!4094 = distinct !DILexicalBlock(scope: !3985, file: !3, line: 2501, column: 3)
!4095 = !DILocation(line: 2501, column: 12, scope: !4094)
!4096 = !DILocation(line: 2501, column: 8, scope: !4094)
!4097 = !DILocation(line: 2501, column: 21, scope: !4098)
!4098 = distinct !DILexicalBlock(scope: !4094, file: !3, line: 2501, column: 3)
!4099 = !DILocation(line: 2501, column: 25, scope: !4098)
!4100 = !DILocation(line: 2501, column: 23, scope: !4098)
!4101 = !DILocation(line: 2501, column: 3, scope: !4094)
!4102 = !DILocation(line: 2502, column: 10, scope: !4103)
!4103 = distinct !DILexicalBlock(scope: !4098, file: !3, line: 2502, column: 9)
!4104 = !DILocation(line: 2502, column: 21, scope: !4103)
!4105 = !DILocation(line: 2502, column: 9, scope: !4098)
!4106 = !DILocation(line: 2503, column: 10, scope: !4103)
!4107 = !DILocation(line: 2503, column: 7, scope: !4103)
!4108 = !DILocation(line: 2502, column: 22, scope: !4103)
!4109 = !DILocation(line: 2501, column: 35, scope: !4098)
!4110 = !DILocation(line: 2501, column: 3, scope: !4098)
!4111 = distinct !{!4111, !4101, !4112}
!4112 = !DILocation(line: 2503, column: 10, scope: !4094)
!4113 = !DILocation(line: 2506, column: 5, scope: !3985)
!4114 = !DILocation(line: 2507, column: 13, scope: !3985)
!4115 = !DILocation(line: 2508, column: 3, scope: !3985)
!4116 = !DILocation(line: 2512, column: 4, scope: !4117)
!4117 = distinct !DILexicalBlock(scope: !4118, file: !3, line: 2512, column: 4)
!4118 = distinct !DILexicalBlock(scope: !4119, file: !3, line: 2509, column: 5)
!4119 = distinct !DILexicalBlock(scope: !4120, file: !3, line: 2508, column: 3)
!4120 = distinct !DILexicalBlock(scope: !3985, file: !3, line: 2508, column: 3)
!4121 = !DILocation(line: 2512, column: 9, scope: !4117)
!4122 = !DILocation(line: 2512, column: 14, scope: !4117)
!4123 = !DILocation(line: 2514, column: 4, scope: !4117)
!4124 = !DILocation(line: 2514, column: 7, scope: !4117)
!4125 = !DILocation(line: 2514, column: 12, scope: !4117)
!4126 = !DILocation(line: 2514, column: 9, scope: !4117)
!4127 = !DILocation(line: 2512, column: 4, scope: !4118)
!4128 = !DILocation(line: 2517, column: 4, scope: !4129)
!4129 = distinct !DILexicalBlock(scope: !4117, file: !3, line: 2515, column: 2)
!4130 = !DILocation(line: 2519, column: 8, scope: !4131)
!4131 = distinct !DILexicalBlock(scope: !4129, file: !3, line: 2519, column: 8)
!4132 = !DILocation(line: 2519, column: 15, scope: !4131)
!4133 = !DILocation(line: 2519, column: 12, scope: !4131)
!4134 = !DILocation(line: 2519, column: 8, scope: !4129)
!4135 = !DILocation(line: 2520, column: 6, scope: !4131)
!4136 = !DILocation(line: 2522, column: 8, scope: !4137)
!4137 = distinct !DILexicalBlock(scope: !4129, file: !3, line: 2522, column: 8)
!4138 = !DILocation(line: 2522, column: 15, scope: !4137)
!4139 = !DILocation(line: 2522, column: 21, scope: !4137)
!4140 = !DILocation(line: 2522, column: 19, scope: !4137)
!4141 = !DILocation(line: 2522, column: 13, scope: !4137)
!4142 = !DILocation(line: 2522, column: 8, scope: !4129)
!4143 = !DILocation(line: 2524, column: 12, scope: !4144)
!4144 = distinct !DILexicalBlock(scope: !4145, file: !3, line: 2524, column: 12)
!4145 = distinct !DILexicalBlock(scope: !4137, file: !3, line: 2523, column: 6)
!4146 = !DILocation(line: 2524, column: 12, scope: !4145)
!4147 = !DILocation(line: 2526, column: 9, scope: !4148)
!4148 = distinct !DILexicalBlock(scope: !4144, file: !3, line: 2525, column: 3)
!4149 = !DILocation(line: 2526, column: 7, scope: !4148)
!4150 = !DILocation(line: 2528, column: 5, scope: !4148)
!4151 = !DILocation(line: 2528, column: 12, scope: !4148)
!4152 = !DILocation(line: 2528, column: 14, scope: !4148)
!4153 = !DILocation(line: 2528, column: 18, scope: !4148)
!4154 = !DILocation(line: 2528, column: 28, scope: !4148)
!4155 = !DILocation(line: 2528, column: 17, scope: !4148)
!4156 = !DILocation(line: 0, scope: !4148)
!4157 = distinct !{!4157, !4150, !4158}
!4158 = !DILocation(line: 2528, column: 33, scope: !4148)
!4159 = !DILocation(line: 2529, column: 3, scope: !4148)
!4160 = !DILocation(line: 2532, column: 5, scope: !4161)
!4161 = distinct !DILexicalBlock(scope: !4145, file: !3, line: 2532, column: 5)
!4162 = !DILocation(line: 2532, column: 18, scope: !4161)
!4163 = !DILocation(line: 2534, column: 5, scope: !4161)
!4164 = !DILocation(line: 2534, column: 8, scope: !4161)
!4165 = !DILocation(line: 2534, column: 18, scope: !4161)
!4166 = !DILocation(line: 2532, column: 5, scope: !4145)
!4167 = !DILocation(line: 2537, column: 12, scope: !4168)
!4168 = distinct !DILexicalBlock(scope: !4161, file: !3, line: 2536, column: 3)
!4169 = !DILocation(line: 2537, column: 18, scope: !4168)
!4170 = !DILocation(line: 2537, column: 16, scope: !4168)
!4171 = !DILocation(line: 2537, column: 10, scope: !4168)
!4172 = !DILocation(line: 2540, column: 14, scope: !4168)
!4173 = !DILocation(line: 2540, column: 31, scope: !4168)
!4174 = !DILocation(line: 2540, column: 6, scope: !4168)
!4175 = !DILocation(line: 2540, column: 12, scope: !4168)
!4176 = !DILocation(line: 2541, column: 9, scope: !4177)
!4177 = distinct !DILexicalBlock(scope: !4168, file: !3, line: 2541, column: 9)
!4178 = !DILocation(line: 2541, column: 14, scope: !4177)
!4179 = !DILocation(line: 2541, column: 19, scope: !4177)
!4180 = !DILocation(line: 2541, column: 16, scope: !4177)
!4181 = !DILocation(line: 2541, column: 30, scope: !4177)
!4182 = !DILocation(line: 2541, column: 33, scope: !4177)
!4183 = !DILocation(line: 2541, column: 41, scope: !4177)
!4184 = !DILocation(line: 2541, column: 38, scope: !4177)
!4185 = !DILocation(line: 2541, column: 9, scope: !4168)
!4186 = !DILocation(line: 2542, column: 7, scope: !4177)
!4187 = !DILocation(line: 2543, column: 3, scope: !4168)
!4188 = !DILocation(line: 2544, column: 6, scope: !4145)
!4189 = !DILocation(line: 2548, column: 8, scope: !4129)
!4190 = !DILocation(line: 2548, column: 13, scope: !4129)
!4191 = !DILocation(line: 2548, column: 6, scope: !4129)
!4192 = !DILocation(line: 2551, column: 4, scope: !4129)
!4193 = !DILocation(line: 2551, column: 15, scope: !4129)
!4194 = !DILocation(line: 2551, column: 18, scope: !4129)
!4195 = !DILocation(line: 2552, column: 7, scope: !4129)
!4196 = !DILocation(line: 2553, column: 12, scope: !4129)
!4197 = !DILocation(line: 2553, column: 19, scope: !4129)
!4198 = !DILocation(line: 2553, column: 24, scope: !4129)
!4199 = !DILocation(line: 2553, column: 31, scope: !4129)
!4200 = !DILocation(line: 2553, column: 4, scope: !4129)
!4201 = !DILocation(line: 2554, column: 2, scope: !4129)
!4202 = !DILocation(line: 2555, column: 17, scope: !4203)
!4203 = distinct !DILexicalBlock(scope: !4117, file: !3, line: 2555, column: 16)
!4204 = !DILocation(line: 2555, column: 28, scope: !4203)
!4205 = !DILocation(line: 2555, column: 16, scope: !4117)
!4206 = !DILocation(line: 2557, column: 13, scope: !4207)
!4207 = distinct !DILexicalBlock(scope: !4203, file: !3, line: 2556, column: 2)
!4208 = !DILocation(line: 2558, column: 8, scope: !4209)
!4209 = distinct !DILexicalBlock(scope: !4207, file: !3, line: 2558, column: 8)
!4210 = !DILocation(line: 2558, column: 20, scope: !4209)
!4211 = !DILocation(line: 2558, column: 18, scope: !4209)
!4212 = !DILocation(line: 2558, column: 8, scope: !4207)
!4213 = !DILocation(line: 2559, column: 6, scope: !4209)
!4214 = !DILocation(line: 2560, column: 26, scope: !4207)
!4215 = !DILocation(line: 2560, column: 33, scope: !4207)
!4216 = !DILocation(line: 2560, column: 11, scope: !4207)
!4217 = !DILocation(line: 2560, column: 9, scope: !4207)
!4218 = !DILocation(line: 2561, column: 30, scope: !4207)
!4219 = !DILocation(line: 2561, column: 37, scope: !4207)
!4220 = !DILocation(line: 2561, column: 12, scope: !4207)
!4221 = !DILocation(line: 2561, column: 10, scope: !4207)
!4222 = !DILocation(line: 2562, column: 8, scope: !4223)
!4223 = distinct !DILexicalBlock(scope: !4207, file: !3, line: 2562, column: 8)
!4224 = !DILocation(line: 2562, column: 14, scope: !4223)
!4225 = !DILocation(line: 2562, column: 8, scope: !4207)
!4226 = !DILocation(line: 2564, column: 31, scope: !4227)
!4227 = distinct !DILexicalBlock(scope: !4228, file: !3, line: 2564, column: 12)
!4228 = distinct !DILexicalBlock(scope: !4223, file: !3, line: 2563, column: 6)
!4229 = !DILocation(line: 2564, column: 12, scope: !4227)
!4230 = !DILocation(line: 2565, column: 5, scope: !4227)
!4231 = !DILocation(line: 2565, column: 31, scope: !4227)
!4232 = !DILocation(line: 2565, column: 8, scope: !4227)
!4233 = !DILocation(line: 2564, column: 12, scope: !4228)
!4234 = !DILocation(line: 2568, column: 3, scope: !4227)
!4235 = !DILocation(line: 2568, column: 8, scope: !4227)
!4236 = !DILocation(line: 2568, column: 13, scope: !4227)
!4237 = !DILocation(line: 2570, column: 3, scope: !4227)
!4238 = !DILocation(line: 2570, column: 8, scope: !4227)
!4239 = !DILocation(line: 2570, column: 12, scope: !4227)
!4240 = !DILocation(line: 2572, column: 12, scope: !4228)
!4241 = !DILocation(line: 2572, column: 17, scope: !4228)
!4242 = !DILocation(line: 2572, column: 10, scope: !4228)
!4243 = !DILocation(line: 2573, column: 20, scope: !4244)
!4244 = distinct !DILexicalBlock(scope: !4228, file: !3, line: 2573, column: 12)
!4245 = !DILocation(line: 2573, column: 25, scope: !4244)
!4246 = !DILocation(line: 2573, column: 32, scope: !4244)
!4247 = !DILocation(line: 2573, column: 39, scope: !4244)
!4248 = !DILocation(line: 2573, column: 12, scope: !4244)
!4249 = !DILocation(line: 2573, column: 55, scope: !4244)
!4250 = !DILocation(line: 2573, column: 12, scope: !4228)
!4251 = !DILocation(line: 2574, column: 5, scope: !4244)
!4252 = !DILocation(line: 2574, column: 3, scope: !4244)
!4253 = !DILocation(line: 2577, column: 11, scope: !4228)
!4254 = !DILocation(line: 2579, column: 20, scope: !4228)
!4255 = !DILocation(line: 2579, column: 8, scope: !4228)
!4256 = !DILocation(line: 2579, column: 13, scope: !4228)
!4257 = !DILocation(line: 2579, column: 18, scope: !4228)
!4258 = !DILocation(line: 2580, column: 21, scope: !4228)
!4259 = !DILocation(line: 2580, column: 8, scope: !4228)
!4260 = !DILocation(line: 2580, column: 13, scope: !4228)
!4261 = !DILocation(line: 2580, column: 19, scope: !4228)
!4262 = !DILocation(line: 2581, column: 17, scope: !4228)
!4263 = !DILocation(line: 2581, column: 8, scope: !4228)
!4264 = !DILocation(line: 2581, column: 13, scope: !4228)
!4265 = !DILocation(line: 2581, column: 15, scope: !4228)
!4266 = !DILocation(line: 2582, column: 16, scope: !4228)
!4267 = !DILocation(line: 2582, column: 21, scope: !4228)
!4268 = !DILocation(line: 2582, column: 28, scope: !4228)
!4269 = !DILocation(line: 2582, column: 35, scope: !4228)
!4270 = !DILocation(line: 2582, column: 8, scope: !4228)
!4271 = !DILocation(line: 2584, column: 8, scope: !4228)
!4272 = !DILocation(line: 2584, column: 19, scope: !4228)
!4273 = !DILocation(line: 2584, column: 22, scope: !4228)
!4274 = !DILocation(line: 2585, column: 10, scope: !4228)
!4275 = !DILocation(line: 2586, column: 6, scope: !4228)
!4276 = !DILocation(line: 2587, column: 2, scope: !4207)
!4277 = !DILocation(line: 2590, column: 8, scope: !4118)
!4278 = !DILocation(line: 2508, column: 3, scope: !4119)
!4279 = distinct !{!4279, !4280, !4281}
!4280 = !DILocation(line: 2508, column: 3, scope: !4120)
!4281 = !DILocation(line: 2591, column: 5, scope: !4120)
!4282 = !DILocation(line: 2594, column: 11, scope: !3985)
!4283 = !DILocation(line: 2594, column: 18, scope: !3985)
!4284 = !DILocation(line: 2594, column: 32, scope: !3985)
!4285 = !DILocation(line: 2594, column: 39, scope: !3985)
!4286 = !DILocation(line: 2594, column: 3, scope: !3985)
!4287 = !DILocation(line: 2596, column: 10, scope: !3985)
!4288 = !DILocation(line: 2596, column: 3, scope: !3985)
!4289 = distinct !DISubprogram(name: "insn_finishes_cycle_p", scope: !3, file: !3, line: 2372, type: !2393, scopeLine: 2373, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!4290 = !DILocalVariable(name: "insn", arg: 1, scope: !4289, file: !3, line: 2372, type: !867)
!4291 = !DILocation(line: 2372, column: 28, scope: !4289)
!4292 = !DILocation(line: 2374, column: 7, scope: !4293)
!4293 = distinct !DILexicalBlock(scope: !4289, file: !3, line: 2374, column: 7)
!4294 = !DILocation(line: 2374, column: 7, scope: !4289)
!4295 = !DILocation(line: 2377, column: 5, scope: !4293)
!4296 = !DILocation(line: 2380, column: 7, scope: !4297)
!4297 = distinct !DILexicalBlock(scope: !4289, file: !3, line: 2380, column: 7)
!4298 = !DILocation(line: 2380, column: 27, scope: !4297)
!4299 = !DILocation(line: 2381, column: 7, scope: !4297)
!4300 = !DILocation(line: 2381, column: 10, scope: !4297)
!4301 = !DILocation(line: 2381, column: 30, scope: !4297)
!4302 = !DILocation(line: 2381, column: 53, scope: !4297)
!4303 = !DILocation(line: 2380, column: 7, scope: !4289)
!4304 = !DILocation(line: 2382, column: 5, scope: !4297)
!4305 = !DILocation(line: 2384, column: 3, scope: !4289)
!4306 = !DILocation(line: 2385, column: 1, scope: !4289)
!4307 = distinct !DISubprogram(name: "schedule_block", scope: !3, file: !3, line: 2760, type: !4308, scopeLine: 2761, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!4308 = !DISubroutineType(types: !4309)
!4309 = !{null, !4310}
!4310 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1406, size: 64)
!4311 = !DILocalVariable(name: "target_bb", arg: 1, scope: !4307, file: !3, line: 2760, type: !4310)
!4312 = !DILocation(line: 2760, column: 30, scope: !4307)
!4313 = !DILocalVariable(name: "i", scope: !4307, file: !3, line: 2762, type: !865)
!4314 = !DILocation(line: 2762, column: 7, scope: !4307)
!4315 = !DILocalVariable(name: "first_cycle_insn_p", scope: !4307, file: !3, line: 2762, type: !865)
!4316 = !DILocation(line: 2762, column: 10, scope: !4307)
!4317 = !DILocalVariable(name: "can_issue_more", scope: !4307, file: !3, line: 2763, type: !865)
!4318 = !DILocation(line: 2763, column: 7, scope: !4307)
!4319 = !DILocalVariable(name: "temp_state", scope: !4307, file: !3, line: 2764, type: !2109)
!4320 = !DILocation(line: 2764, column: 11, scope: !4307)
!4321 = !DILocalVariable(name: "sort_p", scope: !4307, file: !3, line: 2765, type: !865)
!4322 = !DILocation(line: 2765, column: 7, scope: !4307)
!4323 = !DILocalVariable(name: "advance", scope: !4307, file: !3, line: 2765, type: !865)
!4324 = !DILocation(line: 2765, column: 15, scope: !4307)
!4325 = !DILocalVariable(name: "start_clock_var", scope: !4307, file: !3, line: 2765, type: !865)
!4326 = !DILocation(line: 2765, column: 24, scope: !4307)
!4327 = !DILocalVariable(name: "prev_head", scope: !4307, file: !3, line: 2768, type: !867)
!4328 = !DILocation(line: 2768, column: 7, scope: !4307)
!4329 = !DILocation(line: 2768, column: 19, scope: !4307)
!4330 = !DILocation(line: 2768, column: 39, scope: !4307)
!4331 = !DILocalVariable(name: "next_tail", scope: !4307, file: !3, line: 2769, type: !867)
!4332 = !DILocation(line: 2769, column: 7, scope: !4307)
!4333 = !DILocation(line: 2769, column: 19, scope: !4307)
!4334 = !DILocation(line: 2769, column: 39, scope: !4307)
!4335 = !DILocalVariable(name: "head", scope: !4307, file: !3, line: 2770, type: !867)
!4336 = !DILocation(line: 2770, column: 7, scope: !4307)
!4337 = !DILocation(line: 2770, column: 14, scope: !4307)
!4338 = !DILocalVariable(name: "tail", scope: !4307, file: !3, line: 2771, type: !867)
!4339 = !DILocation(line: 2771, column: 7, scope: !4307)
!4340 = !DILocation(line: 2771, column: 14, scope: !4307)
!4341 = !DILocation(line: 2780, column: 3, scope: !4307)
!4342 = !DILocation(line: 2782, column: 38, scope: !4307)
!4343 = !DILocation(line: 2785, column: 7, scope: !4344)
!4344 = distinct !DILexicalBlock(scope: !4307, file: !3, line: 2785, column: 7)
!4345 = !DILocation(line: 2785, column: 7, scope: !4307)
!4346 = !DILocation(line: 2786, column: 32, scope: !4344)
!4347 = !DILocation(line: 2786, column: 31, scope: !4344)
!4348 = !DILocation(line: 2786, column: 43, scope: !4344)
!4349 = !DILocation(line: 2786, column: 49, scope: !4344)
!4350 = !DILocation(line: 2786, column: 5, scope: !4344)
!4351 = !DILocation(line: 2788, column: 16, scope: !4307)
!4352 = !DILocation(line: 2788, column: 3, scope: !4307)
!4353 = !DILocation(line: 2791, column: 23, scope: !4307)
!4354 = !DILocation(line: 2791, column: 30, scope: !4307)
!4355 = !DILocation(line: 2791, column: 15, scope: !4307)
!4356 = !DILocation(line: 2792, column: 17, scope: !4307)
!4357 = !DILocation(line: 2793, column: 17, scope: !4307)
!4358 = !DILocation(line: 2796, column: 16, scope: !4307)
!4359 = !DILocation(line: 2796, column: 14, scope: !4307)
!4360 = !DILocation(line: 2798, column: 21, scope: !4361)
!4361 = distinct !DILexicalBlock(scope: !4307, file: !3, line: 2798, column: 7)
!4362 = !DILocation(line: 2798, column: 7, scope: !4361)
!4363 = !DILocation(line: 2798, column: 7, scope: !4307)
!4364 = !DILocation(line: 2799, column: 19, scope: !4361)
!4365 = !DILocation(line: 2799, column: 28, scope: !4361)
!4366 = !DILocation(line: 2799, column: 40, scope: !4361)
!4367 = !DILocation(line: 2799, column: 61, scope: !4361)
!4368 = !DILocation(line: 2799, column: 5, scope: !4361)
!4369 = !DILocation(line: 2802, column: 25, scope: !4307)
!4370 = !DILocation(line: 2802, column: 23, scope: !4307)
!4371 = !DILocation(line: 2804, column: 3, scope: !4307)
!4372 = !DILocation(line: 2810, column: 9, scope: !4307)
!4373 = !DILocation(line: 2811, column: 10, scope: !4307)
!4374 = !DILocation(line: 2813, column: 16, scope: !4307)
!4375 = !DILocation(line: 2813, column: 14, scope: !4307)
!4376 = !DILocation(line: 2814, column: 11, scope: !4307)
!4377 = !DILocation(line: 2814, column: 3, scope: !4307)
!4378 = !DILocation(line: 2814, column: 27, scope: !4307)
!4379 = !DILocation(line: 2814, column: 48, scope: !4307)
!4380 = !DILocation(line: 2814, column: 26, scope: !4307)
!4381 = !DILocation(line: 2814, column: 53, scope: !4307)
!4382 = !DILocation(line: 2817, column: 13, scope: !4307)
!4383 = !DILocation(line: 2821, column: 5, scope: !4307)
!4384 = !DILocation(line: 2821, column: 25, scope: !4307)
!4385 = !DILocation(line: 2821, column: 3, scope: !4307)
!4386 = !DILocation(line: 2826, column: 8, scope: !4387)
!4387 = distinct !DILexicalBlock(scope: !4307, file: !3, line: 2826, column: 7)
!4388 = !DILocation(line: 2827, column: 7, scope: !4387)
!4389 = !DILocation(line: 2827, column: 16, scope: !4387)
!4390 = !DILocation(line: 2827, column: 32, scope: !4387)
!4391 = !DILocation(line: 2827, column: 24, scope: !4387)
!4392 = !DILocation(line: 2827, column: 42, scope: !4387)
!4393 = !DILocation(line: 2827, column: 40, scope: !4387)
!4394 = !DILocation(line: 2826, column: 7, scope: !4307)
!4395 = !DILocation(line: 2829, column: 7, scope: !4396)
!4396 = distinct !DILexicalBlock(scope: !4387, file: !3, line: 2828, column: 5)
!4397 = !DILocation(line: 2833, column: 16, scope: !4398)
!4398 = distinct !DILexicalBlock(scope: !4396, file: !3, line: 2833, column: 7)
!4399 = !DILocation(line: 2833, column: 46, scope: !4398)
!4400 = !DILocation(line: 2833, column: 38, scope: !4398)
!4401 = !DILocation(line: 2833, column: 14, scope: !4398)
!4402 = !DILocation(line: 2833, column: 12, scope: !4398)
!4403 = !DILocation(line: 2833, column: 55, scope: !4404)
!4404 = distinct !DILexicalBlock(scope: !4398, file: !3, line: 2833, column: 7)
!4405 = !DILocation(line: 2833, column: 65, scope: !4404)
!4406 = !DILocation(line: 2833, column: 57, scope: !4404)
!4407 = !DILocation(line: 2833, column: 7, scope: !4398)
!4408 = !DILocation(line: 2834, column: 7, scope: !4409)
!4409 = distinct !DILexicalBlock(scope: !4404, file: !3, line: 2834, column: 6)
!4410 = !DILocation(line: 2834, column: 6, scope: !4404)
!4411 = !DILocation(line: 2835, column: 4, scope: !4409)
!4412 = !DILocation(line: 2833, column: 75, scope: !4404)
!4413 = !DILocation(line: 2833, column: 7, scope: !4404)
!4414 = distinct !{!4414, !4407, !4415}
!4415 = !DILocation(line: 2835, column: 4, scope: !4398)
!4416 = !DILocation(line: 2837, column: 11, scope: !4417)
!4417 = distinct !DILexicalBlock(scope: !4396, file: !3, line: 2837, column: 11)
!4418 = !DILocation(line: 2837, column: 25, scope: !4417)
!4419 = !DILocation(line: 2837, column: 11, scope: !4396)
!4420 = !DILocation(line: 2839, column: 13, scope: !4421)
!4421 = distinct !DILexicalBlock(scope: !4417, file: !3, line: 2838, column: 2)
!4422 = !DILocation(line: 2840, column: 53, scope: !4421)
!4423 = !DILocation(line: 2839, column: 4, scope: !4421)
!4424 = !DILocation(line: 2841, column: 13, scope: !4421)
!4425 = !DILocation(line: 2842, column: 57, scope: !4421)
!4426 = !DILocation(line: 2841, column: 4, scope: !4421)
!4427 = !DILocation(line: 2843, column: 2, scope: !4421)
!4428 = !DILocalVariable(name: "skip_insn", scope: !4429, file: !3, line: 2849, type: !867)
!4429 = distinct !DILexicalBlock(scope: !4396, file: !3, line: 2848, column: 7)
!4430 = !DILocation(line: 2849, column: 6, scope: !4429)
!4431 = !DILocation(line: 2851, column: 6, scope: !4432)
!4432 = distinct !DILexicalBlock(scope: !4429, file: !3, line: 2851, column: 6)
!4433 = !DILocation(line: 2851, column: 27, scope: !4432)
!4434 = !DILocation(line: 2851, column: 6, scope: !4429)
!4435 = !DILocation(line: 2852, column: 35, scope: !4432)
!4436 = !DILocation(line: 2852, column: 16, scope: !4432)
!4437 = !DILocation(line: 2852, column: 14, scope: !4432)
!4438 = !DILocation(line: 2852, column: 4, scope: !4432)
!4439 = !DILocation(line: 2854, column: 14, scope: !4432)
!4440 = !DILocation(line: 2856, column: 2, scope: !4429)
!4441 = !DILocation(line: 2856, column: 9, scope: !4429)
!4442 = !DILocation(line: 2856, column: 19, scope: !4429)
!4443 = !DILocation(line: 2856, column: 11, scope: !4429)
!4444 = !DILocalVariable(name: "insn", scope: !4445, file: !3, line: 2858, type: !867)
!4445 = distinct !DILexicalBlock(scope: !4429, file: !3, line: 2857, column: 4)
!4446 = !DILocation(line: 2858, column: 10, scope: !4445)
!4447 = !DILocation(line: 2860, column: 35, scope: !4445)
!4448 = !DILocation(line: 2860, column: 13, scope: !4445)
!4449 = !DILocation(line: 2860, column: 11, scope: !4445)
!4450 = !DILocation(line: 2862, column: 10, scope: !4451)
!4451 = distinct !DILexicalBlock(scope: !4445, file: !3, line: 2862, column: 10)
!4452 = !DILocation(line: 2862, column: 18, scope: !4451)
!4453 = !DILocation(line: 2862, column: 15, scope: !4451)
!4454 = !DILocation(line: 2862, column: 10, scope: !4445)
!4455 = !DILocation(line: 2863, column: 20, scope: !4451)
!4456 = !DILocation(line: 2863, column: 8, scope: !4451)
!4457 = distinct !{!4457, !4440, !4458}
!4458 = !DILocation(line: 2864, column: 4, scope: !4429)
!4459 = !DILocation(line: 2866, column: 5, scope: !4396)
!4460 = !DILocation(line: 2869, column: 22, scope: !4307)
!4461 = !DILocation(line: 2869, column: 21, scope: !4307)
!4462 = !DILocation(line: 2869, column: 3, scope: !4307)
!4463 = !DILocation(line: 2871, column: 18, scope: !4307)
!4464 = !DILocation(line: 2873, column: 11, scope: !4307)
!4465 = !DILocation(line: 2875, column: 10, scope: !4307)
!4466 = !DILocation(line: 2877, column: 3, scope: !4307)
!4467 = !DILocation(line: 2877, column: 12, scope: !4307)
!4468 = !DILocation(line: 2877, column: 32, scope: !4307)
!4469 = !DILocation(line: 2877, column: 10, scope: !4307)
!4470 = !DILocation(line: 2879, column: 7, scope: !4471)
!4471 = distinct !DILexicalBlock(scope: !4307, file: !3, line: 2878, column: 5)
!4472 = !DILocation(line: 2881, column: 22, scope: !4473)
!4473 = distinct !DILexicalBlock(scope: !4471, file: !3, line: 2880, column: 2)
!4474 = !DILocation(line: 2881, column: 20, scope: !4473)
!4475 = !DILocation(line: 2883, column: 13, scope: !4473)
!4476 = !DILocation(line: 2885, column: 4, scope: !4473)
!4477 = !DILocation(line: 2891, column: 4, scope: !4473)
!4478 = !DILocation(line: 2893, column: 4, scope: !4473)
!4479 = !DILocation(line: 2895, column: 8, scope: !4480)
!4480 = distinct !DILexicalBlock(scope: !4473, file: !3, line: 2895, column: 8)
!4481 = !DILocation(line: 2895, column: 22, scope: !4480)
!4482 = !DILocation(line: 2895, column: 8, scope: !4473)
!4483 = !DILocation(line: 2897, column: 17, scope: !4484)
!4484 = distinct !DILexicalBlock(scope: !4480, file: !3, line: 2896, column: 6)
!4485 = !DILocation(line: 2897, column: 8, scope: !4484)
!4486 = !DILocation(line: 2898, column: 8, scope: !4484)
!4487 = !DILocation(line: 2899, column: 6, scope: !4484)
!4488 = !DILocation(line: 2900, column: 15, scope: !4473)
!4489 = !DILocation(line: 2900, column: 27, scope: !4473)
!4490 = !DILocation(line: 2900, column: 25, scope: !4473)
!4491 = !DILocation(line: 2900, column: 12, scope: !4473)
!4492 = !DILocation(line: 2901, column: 2, scope: !4473)
!4493 = !DILocation(line: 2902, column: 14, scope: !4471)
!4494 = !DILocation(line: 2902, column: 22, scope: !4471)
!4495 = distinct !{!4495, !4470, !4496}
!4496 = !DILocation(line: 2902, column: 25, scope: !4471)
!4497 = !DILocation(line: 2904, column: 11, scope: !4498)
!4498 = distinct !DILexicalBlock(scope: !4471, file: !3, line: 2904, column: 11)
!4499 = !DILocation(line: 2904, column: 11, scope: !4471)
!4500 = !DILocation(line: 2907, column: 4, scope: !4501)
!4501 = distinct !DILexicalBlock(scope: !4498, file: !3, line: 2905, column: 2)
!4502 = !DILocation(line: 2909, column: 8, scope: !4503)
!4503 = distinct !DILexicalBlock(scope: !4501, file: !3, line: 2909, column: 8)
!4504 = !DILocation(line: 2909, column: 22, scope: !4503)
!4505 = !DILocation(line: 2909, column: 8, scope: !4501)
!4506 = !DILocation(line: 2911, column: 17, scope: !4507)
!4507 = distinct !DILexicalBlock(scope: !4503, file: !3, line: 2910, column: 6)
!4508 = !DILocation(line: 2911, column: 8, scope: !4507)
!4509 = !DILocation(line: 2912, column: 8, scope: !4507)
!4510 = !DILocation(line: 2913, column: 6, scope: !4507)
!4511 = !DILocation(line: 2914, column: 2, scope: !4501)
!4512 = !DILocation(line: 2918, column: 17, scope: !4513)
!4513 = distinct !DILexicalBlock(scope: !4471, file: !3, line: 2918, column: 11)
!4514 = !DILocation(line: 2918, column: 11, scope: !4513)
!4515 = !DILocation(line: 2918, column: 25, scope: !4513)
!4516 = !DILocation(line: 2918, column: 28, scope: !4513)
!4517 = !DILocation(line: 2918, column: 11, scope: !4471)
!4518 = !DILocation(line: 2920, column: 29, scope: !4519)
!4519 = distinct !DILexicalBlock(scope: !4520, file: !3, line: 2920, column: 8)
!4520 = distinct !DILexicalBlock(scope: !4513, file: !3, line: 2919, column: 2)
!4521 = !DILocation(line: 2920, column: 8, scope: !4519)
!4522 = !DILocation(line: 2920, column: 8, scope: !4520)
!4523 = !DILocation(line: 2922, column: 21, scope: !4524)
!4524 = distinct !DILexicalBlock(scope: !4519, file: !3, line: 2921, column: 6)
!4525 = !DILocation(line: 2922, column: 41, scope: !4524)
!4526 = !DILocation(line: 2923, column: 5, scope: !4524)
!4527 = !DILocation(line: 2923, column: 4, scope: !4524)
!4528 = !DILocation(line: 2922, column: 9, scope: !4524)
!4529 = !DILocation(line: 2922, column: 19, scope: !4524)
!4530 = !DILocation(line: 2925, column: 12, scope: !4531)
!4531 = distinct !DILexicalBlock(scope: !4524, file: !3, line: 2925, column: 12)
!4532 = !DILocation(line: 2925, column: 12, scope: !4524)
!4533 = !DILocalVariable(name: "x", scope: !4534, file: !3, line: 2927, type: !867)
!4534 = distinct !DILexicalBlock(scope: !4531, file: !3, line: 2926, column: 3)
!4535 = !DILocation(line: 2927, column: 9, scope: !4534)
!4536 = !DILocation(line: 2929, column: 25, scope: !4534)
!4537 = !DILocation(line: 2929, column: 9, scope: !4534)
!4538 = !DILocation(line: 2929, column: 7, scope: !4534)
!4539 = !DILocation(line: 2930, column: 5, scope: !4534)
!4540 = !DILocation(line: 2931, column: 32, scope: !4534)
!4541 = !DILocation(line: 2931, column: 31, scope: !4534)
!4542 = !DILocation(line: 2931, column: 43, scope: !4534)
!4543 = !DILocation(line: 2931, column: 46, scope: !4534)
!4544 = !DILocation(line: 2931, column: 5, scope: !4534)
!4545 = !DILocation(line: 2932, column: 3, scope: !4534)
!4546 = !DILocation(line: 2934, column: 40, scope: !4524)
!4547 = !DILocation(line: 2934, column: 39, scope: !4524)
!4548 = !DILocation(line: 2934, column: 30, scope: !4524)
!4549 = !DILocation(line: 2934, column: 28, scope: !4524)
!4550 = !DILocation(line: 2935, column: 6, scope: !4524)
!4551 = !DILocation(line: 2937, column: 4, scope: !4520)
!4552 = !DILocation(line: 2937, column: 17, scope: !4520)
!4553 = !DILocation(line: 2937, column: 11, scope: !4520)
!4554 = !DILocation(line: 2937, column: 25, scope: !4520)
!4555 = !DILocation(line: 2937, column: 28, scope: !4520)
!4556 = !DILocation(line: 0, scope: !4520)
!4557 = !DILocalVariable(name: "insn", scope: !4558, file: !3, line: 2939, type: !867)
!4558 = distinct !DILexicalBlock(scope: !4520, file: !3, line: 2938, column: 6)
!4559 = !DILocation(line: 2939, column: 12, scope: !4558)
!4560 = !DILocation(line: 2939, column: 19, scope: !4558)
!4561 = !DILocation(line: 2940, column: 8, scope: !4558)
!4562 = !DILocation(line: 2941, column: 10, scope: !4558)
!4563 = !DILocation(line: 2941, column: 30, scope: !4558)
!4564 = !DILocation(line: 2941, column: 53, scope: !4558)
!4565 = !DILocation(line: 2942, column: 11, scope: !4558)
!4566 = !DILocation(line: 2941, column: 8, scope: !4558)
!4567 = !DILocation(line: 2943, column: 19, scope: !4558)
!4568 = !DILocation(line: 2943, column: 25, scope: !4558)
!4569 = !DILocation(line: 2944, column: 5, scope: !4558)
!4570 = !DILocation(line: 2944, column: 25, scope: !4558)
!4571 = !DILocation(line: 2943, column: 8, scope: !4558)
!4572 = !DILocation(line: 2945, column: 30, scope: !4558)
!4573 = !DILocation(line: 2945, column: 28, scope: !4558)
!4574 = !DILocation(line: 2946, column: 33, scope: !4558)
!4575 = !DILocation(line: 2946, column: 18, scope: !4558)
!4576 = !DILocation(line: 2946, column: 16, scope: !4558)
!4577 = !DILocation(line: 2947, column: 8, scope: !4558)
!4578 = !DILocation(line: 2948, column: 18, scope: !4579)
!4579 = distinct !DILexicalBlock(scope: !4558, file: !3, line: 2948, column: 12)
!4580 = !DILocation(line: 2948, column: 26, scope: !4579)
!4581 = !DILocation(line: 2948, column: 12, scope: !4558)
!4582 = !DILocation(line: 2949, column: 3, scope: !4579)
!4583 = distinct !{!4583, !4551, !4584}
!4584 = !DILocation(line: 2950, column: 6, scope: !4520)
!4585 = !DILocation(line: 2952, column: 15, scope: !4586)
!4586 = distinct !DILexicalBlock(scope: !4520, file: !3, line: 2952, column: 8)
!4587 = !DILocation(line: 2952, column: 9, scope: !4586)
!4588 = !DILocation(line: 2952, column: 8, scope: !4520)
!4589 = !DILocation(line: 2953, column: 6, scope: !4586)
!4590 = distinct !{!4590, !4466, !4591}
!4591 = !DILocation(line: 3217, column: 5, scope: !4307)
!4592 = !DILocation(line: 2954, column: 2, scope: !4520)
!4593 = !DILocation(line: 2958, column: 11, scope: !4594)
!4594 = distinct !DILexicalBlock(scope: !4471, file: !3, line: 2958, column: 11)
!4595 = !DILocation(line: 2958, column: 18, scope: !4594)
!4596 = !DILocation(line: 2958, column: 35, scope: !4594)
!4597 = !DILocation(line: 2958, column: 21, scope: !4594)
!4598 = !DILocation(line: 2959, column: 4, scope: !4594)
!4599 = !DILocation(line: 2959, column: 14, scope: !4594)
!4600 = !DILocation(line: 2959, column: 22, scope: !4594)
!4601 = !DILocation(line: 2960, column: 8, scope: !4594)
!4602 = !DILocation(line: 2960, column: 12, scope: !4594)
!4603 = !DILocation(line: 2958, column: 11, scope: !4471)
!4604 = !DILocation(line: 2962, column: 18, scope: !4594)
!4605 = !DILocation(line: 2962, column: 27, scope: !4594)
!4606 = !DILocation(line: 2962, column: 39, scope: !4594)
!4607 = !DILocation(line: 2963, column: 6, scope: !4594)
!4608 = !DILocation(line: 2964, column: 22, scope: !4594)
!4609 = !DILocation(line: 2962, column: 4, scope: !4594)
!4610 = !DILocation(line: 2961, column: 17, scope: !4594)
!4611 = !DILocation(line: 2961, column: 2, scope: !4594)
!4612 = !DILocation(line: 2966, column: 19, scope: !4594)
!4613 = !DILocation(line: 2966, column: 17, scope: !4594)
!4614 = !DILocation(line: 2968, column: 26, scope: !4471)
!4615 = !DILocation(line: 2969, column: 26, scope: !4471)
!4616 = !DILocation(line: 2970, column: 7, scope: !4471)
!4617 = !DILocalVariable(name: "insn", scope: !4618, file: !3, line: 2972, type: !867)
!4618 = distinct !DILexicalBlock(scope: !4619, file: !3, line: 2971, column: 2)
!4619 = distinct !DILexicalBlock(scope: !4620, file: !3, line: 2970, column: 7)
!4620 = distinct !DILexicalBlock(scope: !4471, file: !3, line: 2970, column: 7)
!4621 = !DILocation(line: 2972, column: 8, scope: !4618)
!4622 = !DILocalVariable(name: "cost", scope: !4618, file: !3, line: 2973, type: !865)
!4623 = !DILocation(line: 2973, column: 8, scope: !4618)
!4624 = !DILocalVariable(name: "asm_p", scope: !4618, file: !3, line: 2974, type: !1100)
!4625 = !DILocation(line: 2974, column: 9, scope: !4618)
!4626 = !DILocation(line: 2976, column: 8, scope: !4627)
!4627 = distinct !DILexicalBlock(scope: !4618, file: !3, line: 2976, column: 8)
!4628 = !DILocation(line: 2976, column: 22, scope: !4627)
!4629 = !DILocation(line: 2976, column: 8, scope: !4618)
!4630 = !DILocation(line: 2978, column: 17, scope: !4631)
!4631 = distinct !DILexicalBlock(scope: !4627, file: !3, line: 2977, column: 6)
!4632 = !DILocation(line: 2979, column: 10, scope: !4631)
!4633 = !DILocation(line: 2978, column: 8, scope: !4631)
!4634 = !DILocation(line: 2980, column: 8, scope: !4631)
!4635 = !DILocation(line: 2981, column: 12, scope: !4636)
!4636 = distinct !DILexicalBlock(scope: !4631, file: !3, line: 2981, column: 12)
!4637 = !DILocation(line: 2981, column: 12, scope: !4631)
!4638 = !DILocation(line: 2982, column: 3, scope: !4636)
!4639 = !DILocation(line: 2983, column: 6, scope: !4631)
!4640 = !DILocation(line: 2985, column: 14, scope: !4641)
!4641 = distinct !DILexicalBlock(scope: !4618, file: !3, line: 2985, column: 8)
!4642 = !DILocation(line: 2985, column: 22, scope: !4641)
!4643 = !DILocation(line: 2986, column: 8, scope: !4641)
!4644 = !DILocation(line: 2986, column: 11, scope: !4641)
!4645 = !DILocation(line: 2987, column: 8, scope: !4641)
!4646 = !DILocation(line: 2987, column: 11, scope: !4641)
!4647 = !DILocation(line: 2985, column: 8, scope: !4618)
!4648 = !DILocation(line: 2992, column: 12, scope: !4649)
!4649 = distinct !DILexicalBlock(scope: !4650, file: !3, line: 2992, column: 12)
!4650 = distinct !DILexicalBlock(scope: !4641, file: !3, line: 2988, column: 6)
!4651 = !DILocation(line: 2992, column: 26, scope: !4649)
!4652 = !DILocation(line: 2992, column: 12, scope: !4650)
!4653 = !DILocation(line: 2993, column: 12, scope: !4649)
!4654 = !DILocation(line: 2993, column: 3, scope: !4649)
!4655 = !DILocation(line: 2994, column: 16, scope: !4650)
!4656 = !DILocation(line: 2994, column: 28, scope: !4650)
!4657 = !DILocation(line: 2994, column: 40, scope: !4650)
!4658 = !DILocation(line: 2994, column: 8, scope: !4650)
!4659 = !DILocation(line: 2995, column: 34, scope: !4660)
!4660 = distinct !DILexicalBlock(scope: !4650, file: !3, line: 2995, column: 12)
!4661 = !DILocation(line: 2995, column: 12, scope: !4660)
!4662 = !DILocation(line: 2995, column: 12, scope: !4650)
!4663 = !DILocation(line: 2996, column: 3, scope: !4660)
!4664 = !DILocation(line: 2997, column: 6, scope: !4650)
!4665 = !DILocation(line: 2999, column: 14, scope: !4666)
!4666 = distinct !DILexicalBlock(scope: !4618, file: !3, line: 2999, column: 8)
!4667 = !DILocation(line: 2999, column: 22, scope: !4666)
!4668 = !DILocation(line: 3000, column: 8, scope: !4666)
!4669 = !DILocation(line: 3000, column: 12, scope: !4666)
!4670 = !DILocation(line: 3001, column: 8, scope: !4666)
!4671 = !DILocation(line: 3001, column: 30, scope: !4666)
!4672 = !DILocation(line: 3001, column: 11, scope: !4666)
!4673 = !DILocation(line: 3002, column: 8, scope: !4666)
!4674 = !DILocation(line: 3002, column: 14, scope: !4666)
!4675 = !DILocation(line: 3002, column: 34, scope: !4666)
!4676 = !DILocation(line: 3002, column: 12, scope: !4666)
!4677 = !DILocation(line: 2999, column: 8, scope: !4618)
!4678 = !DILocation(line: 3003, column: 6, scope: !4666)
!4679 = !DILocation(line: 3006, column: 8, scope: !4680)
!4680 = distinct !DILexicalBlock(scope: !4618, file: !3, line: 3006, column: 8)
!4681 = !DILocation(line: 3006, column: 8, scope: !4618)
!4682 = !DILocalVariable(name: "res", scope: !4683, file: !3, line: 3008, type: !865)
!4683 = distinct !DILexicalBlock(scope: !4680, file: !3, line: 3007, column: 6)
!4684 = !DILocation(line: 3008, column: 12, scope: !4683)
!4685 = !DILocation(line: 3010, column: 13, scope: !4683)
!4686 = !DILocation(line: 3011, column: 14, scope: !4683)
!4687 = !DILocation(line: 3011, column: 12, scope: !4683)
!4688 = !DILocation(line: 3013, column: 12, scope: !4689)
!4689 = distinct !DILexicalBlock(scope: !4683, file: !3, line: 3013, column: 12)
!4690 = !DILocation(line: 3013, column: 16, scope: !4689)
!4691 = !DILocation(line: 3013, column: 12, scope: !4683)
!4692 = !DILocation(line: 3015, column: 3, scope: !4689)
!4693 = !DILocation(line: 3016, column: 12, scope: !4694)
!4694 = distinct !DILexicalBlock(scope: !4683, file: !3, line: 3016, column: 12)
!4695 = !DILocation(line: 3016, column: 16, scope: !4694)
!4696 = !DILocation(line: 3016, column: 12, scope: !4683)
!4697 = !DILocation(line: 3018, column: 3, scope: !4694)
!4698 = distinct !{!4698, !4699, !4700}
!4699 = !DILocation(line: 2970, column: 7, scope: !4620)
!4700 = !DILocation(line: 3216, column: 2, scope: !4620)
!4701 = !DILocation(line: 3020, column: 8, scope: !4683)
!4702 = !DILocation(line: 3021, column: 6, scope: !4683)
!4703 = !DILocation(line: 3023, column: 13, scope: !4680)
!4704 = !DILocation(line: 3023, column: 11, scope: !4680)
!4705 = !DILocation(line: 3025, column: 8, scope: !4706)
!4706 = distinct !DILexicalBlock(scope: !4618, file: !3, line: 3025, column: 8)
!4707 = !DILocation(line: 3025, column: 25, scope: !4706)
!4708 = !DILocation(line: 3025, column: 28, scope: !4706)
!4709 = !DILocation(line: 3025, column: 47, scope: !4706)
!4710 = !DILocation(line: 3025, column: 45, scope: !4706)
!4711 = !DILocation(line: 3025, column: 8, scope: !4618)
!4712 = !DILocation(line: 3027, column: 27, scope: !4713)
!4713 = distinct !DILexicalBlock(scope: !4706, file: !3, line: 3026, column: 6)
!4714 = !DILocation(line: 3027, column: 8, scope: !4713)
!4715 = !DILocation(line: 3028, column: 16, scope: !4713)
!4716 = !DILocation(line: 3029, column: 8, scope: !4713)
!4717 = !DILocation(line: 3032, column: 22, scope: !4718)
!4718 = distinct !DILexicalBlock(scope: !4618, file: !3, line: 3032, column: 8)
!4719 = !DILocation(line: 3032, column: 8, scope: !4718)
!4720 = !DILocation(line: 3033, column: 8, scope: !4718)
!4721 = !DILocation(line: 3033, column: 25, scope: !4718)
!4722 = !DILocation(line: 3033, column: 40, scope: !4718)
!4723 = !DILocation(line: 3033, column: 52, scope: !4718)
!4724 = !DILocation(line: 3034, column: 12, scope: !4718)
!4725 = !DILocation(line: 3034, column: 18, scope: !4718)
!4726 = !DILocation(line: 3035, column: 12, scope: !4718)
!4727 = !DILocation(line: 3033, column: 11, scope: !4718)
!4728 = !DILocation(line: 3032, column: 8, scope: !4618)
!4729 = !DILocation(line: 3048, column: 27, scope: !4730)
!4730 = distinct !DILexicalBlock(scope: !4718, file: !3, line: 3047, column: 6)
!4731 = !DILocation(line: 3048, column: 8, scope: !4730)
!4732 = !DILocation(line: 3049, column: 15, scope: !4730)
!4733 = !DILocation(line: 3052, column: 11, scope: !4618)
!4734 = !DILocation(line: 3053, column: 12, scope: !4618)
!4735 = !DILocation(line: 3053, column: 24, scope: !4618)
!4736 = !DILocation(line: 3053, column: 36, scope: !4618)
!4737 = !DILocation(line: 3053, column: 4, scope: !4618)
!4738 = !DILocation(line: 3054, column: 24, scope: !4739)
!4739 = distinct !DILexicalBlock(scope: !4618, file: !3, line: 3054, column: 8)
!4740 = !DILocation(line: 3054, column: 8, scope: !4739)
!4741 = !DILocation(line: 3054, column: 30, scope: !4739)
!4742 = !DILocation(line: 3054, column: 8, scope: !4618)
!4743 = !DILocation(line: 3056, column: 17, scope: !4744)
!4744 = distinct !DILexicalBlock(scope: !4739, file: !3, line: 3055, column: 6)
!4745 = !DILocation(line: 3056, column: 43, scope: !4744)
!4746 = !DILocation(line: 3057, column: 10, scope: !4744)
!4747 = !DILocation(line: 3057, column: 28, scope: !4744)
!4748 = !DILocation(line: 3057, column: 13, scope: !4744)
!4749 = !DILocation(line: 3057, column: 44, scope: !4744)
!4750 = !DILocation(line: 3056, column: 16, scope: !4744)
!4751 = !DILocation(line: 3056, column: 14, scope: !4744)
!4752 = !DILocation(line: 3058, column: 13, scope: !4753)
!4753 = distinct !DILexicalBlock(scope: !4744, file: !3, line: 3058, column: 12)
!4754 = !DILocation(line: 3058, column: 32, scope: !4753)
!4755 = !DILocation(line: 3058, column: 35, scope: !4753)
!4756 = !DILocation(line: 3058, column: 12, scope: !4744)
!4757 = !DILocation(line: 3061, column: 8, scope: !4753)
!4758 = !DILocation(line: 3061, column: 3, scope: !4753)
!4759 = !DILocation(line: 3067, column: 8, scope: !4753)
!4760 = !DILocation(line: 3068, column: 6, scope: !4744)
!4761 = !DILocation(line: 3069, column: 13, scope: !4762)
!4762 = distinct !DILexicalBlock(scope: !4739, file: !3, line: 3069, column: 13)
!4763 = !DILocation(line: 3069, column: 13, scope: !4739)
!4764 = !DILocation(line: 3070, column: 11, scope: !4762)
!4765 = !DILocation(line: 3070, column: 6, scope: !4762)
!4766 = !DILocation(line: 3073, column: 33, scope: !4767)
!4767 = distinct !DILexicalBlock(scope: !4762, file: !3, line: 3072, column: 6)
!4768 = !DILocation(line: 3073, column: 45, scope: !4767)
!4769 = !DILocation(line: 3073, column: 15, scope: !4767)
!4770 = !DILocation(line: 3073, column: 13, scope: !4767)
!4771 = !DILocation(line: 3074, column: 12, scope: !4772)
!4772 = distinct !DILexicalBlock(scope: !4767, file: !3, line: 3074, column: 12)
!4773 = !DILocation(line: 3074, column: 17, scope: !4772)
!4774 = !DILocation(line: 3074, column: 12, scope: !4767)
!4775 = !DILocation(line: 3075, column: 8, scope: !4772)
!4776 = !DILocation(line: 3075, column: 3, scope: !4772)
!4777 = !DILocation(line: 3076, column: 17, scope: !4778)
!4778 = distinct !DILexicalBlock(scope: !4772, file: !3, line: 3076, column: 17)
!4779 = !DILocation(line: 3076, column: 22, scope: !4778)
!4780 = !DILocation(line: 3076, column: 17, scope: !4772)
!4781 = !DILocation(line: 3077, column: 8, scope: !4778)
!4782 = !DILocation(line: 3077, column: 3, scope: !4778)
!4783 = !DILocation(line: 3080, column: 8, scope: !4784)
!4784 = distinct !DILexicalBlock(scope: !4618, file: !3, line: 3080, column: 8)
!4785 = !DILocation(line: 3080, column: 13, scope: !4784)
!4786 = !DILocation(line: 3080, column: 8, scope: !4618)
!4787 = !DILocation(line: 3082, column: 20, scope: !4788)
!4788 = distinct !DILexicalBlock(scope: !4784, file: !3, line: 3081, column: 6)
!4789 = !DILocation(line: 3082, column: 26, scope: !4788)
!4790 = !DILocation(line: 3082, column: 8, scope: !4788)
!4791 = !DILocation(line: 3083, column: 13, scope: !4792)
!4792 = distinct !DILexicalBlock(scope: !4788, file: !3, line: 3083, column: 13)
!4793 = !DILocation(line: 3083, column: 13, scope: !4788)
!4794 = !DILocation(line: 3085, column: 16, scope: !4795)
!4795 = distinct !DILexicalBlock(scope: !4792, file: !3, line: 3084, column: 4)
!4796 = !DILocation(line: 3085, column: 14, scope: !4795)
!4797 = !DILocation(line: 3086, column: 6, scope: !4795)
!4798 = !DILocation(line: 3089, column: 8, scope: !4788)
!4799 = !DILocation(line: 3092, column: 8, scope: !4800)
!4800 = distinct !DILexicalBlock(scope: !4618, file: !3, line: 3092, column: 8)
!4801 = !DILocation(line: 3092, column: 28, scope: !4800)
!4802 = !DILocation(line: 3093, column: 8, scope: !4800)
!4803 = !DILocation(line: 3093, column: 15, scope: !4800)
!4804 = !DILocation(line: 3093, column: 35, scope: !4800)
!4805 = !DILocation(line: 3093, column: 58, scope: !4800)
!4806 = !DILocation(line: 3093, column: 13, scope: !4800)
!4807 = !DILocation(line: 3092, column: 8, scope: !4618)
!4808 = !DILocation(line: 3097, column: 28, scope: !4809)
!4809 = distinct !DILexicalBlock(scope: !4800, file: !3, line: 3096, column: 6)
!4810 = !DILocation(line: 3097, column: 45, scope: !4809)
!4811 = !DILocation(line: 3097, column: 61, scope: !4809)
!4812 = !DILocation(line: 3097, column: 8, scope: !4809)
!4813 = !DILocation(line: 3097, column: 25, scope: !4809)
!4814 = !DILocation(line: 3098, column: 8, scope: !4809)
!4815 = !DILocation(line: 3103, column: 15, scope: !4816)
!4816 = distinct !DILexicalBlock(scope: !4618, file: !3, line: 3103, column: 15)
!4817 = !DILocation(line: 3103, column: 32, scope: !4816)
!4818 = !DILocation(line: 3103, column: 15, scope: !4618)
!4819 = !DILocation(line: 3104, column: 37, scope: !4816)
!4820 = !DILocation(line: 3104, column: 13, scope: !4816)
!4821 = !DILocation(line: 3106, column: 29, scope: !4822)
!4822 = distinct !DILexicalBlock(scope: !4618, file: !3, line: 3106, column: 8)
!4823 = !DILocation(line: 3106, column: 8, scope: !4822)
!4824 = !DILocation(line: 3112, column: 8, scope: !4822)
!4825 = !DILocation(line: 3112, column: 11, scope: !4822)
!4826 = !DILocation(line: 3112, column: 31, scope: !4822)
!4827 = !DILocation(line: 3112, column: 51, scope: !4822)
!4828 = !DILocation(line: 3112, column: 50, scope: !4822)
!4829 = !DILocation(line: 3112, column: 62, scope: !4822)
!4830 = !DILocation(line: 3106, column: 8, scope: !4618)
!4831 = !DILocation(line: 3114, column: 21, scope: !4832)
!4832 = distinct !DILexicalBlock(scope: !4822, file: !3, line: 3113, column: 6)
!4833 = !DILocation(line: 3114, column: 41, scope: !4832)
!4834 = !DILocation(line: 3115, column: 5, scope: !4832)
!4835 = !DILocation(line: 3115, column: 4, scope: !4832)
!4836 = !DILocation(line: 3114, column: 9, scope: !4832)
!4837 = !DILocation(line: 3114, column: 19, scope: !4832)
!4838 = !DILocation(line: 3117, column: 12, scope: !4839)
!4839 = distinct !DILexicalBlock(scope: !4832, file: !3, line: 3117, column: 12)
!4840 = !DILocation(line: 3117, column: 12, scope: !4832)
!4841 = !DILocalVariable(name: "x", scope: !4842, file: !3, line: 3119, type: !867)
!4842 = distinct !DILexicalBlock(scope: !4839, file: !3, line: 3118, column: 3)
!4843 = !DILocation(line: 3119, column: 9, scope: !4842)
!4844 = !DILocation(line: 3121, column: 25, scope: !4842)
!4845 = !DILocation(line: 3121, column: 9, scope: !4842)
!4846 = !DILocation(line: 3121, column: 7, scope: !4842)
!4847 = !DILocation(line: 3122, column: 5, scope: !4842)
!4848 = !DILocation(line: 3123, column: 32, scope: !4842)
!4849 = !DILocation(line: 3123, column: 31, scope: !4842)
!4850 = !DILocation(line: 3123, column: 43, scope: !4842)
!4851 = !DILocation(line: 3123, column: 46, scope: !4842)
!4852 = !DILocation(line: 3123, column: 5, scope: !4842)
!4853 = !DILocation(line: 3124, column: 3, scope: !4842)
!4854 = !DILocation(line: 3126, column: 40, scope: !4832)
!4855 = !DILocation(line: 3126, column: 39, scope: !4832)
!4856 = !DILocation(line: 3126, column: 30, scope: !4832)
!4857 = !DILocation(line: 3126, column: 28, scope: !4832)
!4858 = !DILocation(line: 3127, column: 6, scope: !4832)
!4859 = !DILocation(line: 3130, column: 6, scope: !4618)
!4860 = !DILocation(line: 3130, column: 26, scope: !4618)
!4861 = !DILocation(line: 3130, column: 49, scope: !4618)
!4862 = !DILocation(line: 3131, column: 14, scope: !4618)
!4863 = !DILocation(line: 3130, column: 4, scope: !4618)
!4864 = !DILocation(line: 3133, column: 15, scope: !4618)
!4865 = !DILocation(line: 3133, column: 21, scope: !4618)
!4866 = !DILocation(line: 3133, column: 42, scope: !4618)
!4867 = !DILocation(line: 3133, column: 62, scope: !4618)
!4868 = !DILocation(line: 3133, column: 4, scope: !4618)
!4869 = !DILocation(line: 3134, column: 18, scope: !4618)
!4870 = !DILocation(line: 3134, column: 4, scope: !4618)
!4871 = !DILocation(line: 3135, column: 26, scope: !4618)
!4872 = !DILocation(line: 3135, column: 24, scope: !4618)
!4873 = !DILocation(line: 3137, column: 16, scope: !4874)
!4874 = distinct !DILexicalBlock(scope: !4618, file: !3, line: 3137, column: 8)
!4875 = !DILocation(line: 3137, column: 28, scope: !4874)
!4876 = !DILocation(line: 3137, column: 40, scope: !4874)
!4877 = !DILocation(line: 3137, column: 8, scope: !4874)
!4878 = !DILocation(line: 3137, column: 56, scope: !4874)
!4879 = !DILocation(line: 3137, column: 8, scope: !4618)
!4880 = !DILocation(line: 3139, column: 33, scope: !4881)
!4881 = distinct !DILexicalBlock(scope: !4874, file: !3, line: 3138, column: 13)
!4882 = !DILocation(line: 3140, column: 23, scope: !4881)
!4883 = !DILocation(line: 3140, column: 35, scope: !4881)
!4884 = !DILocation(line: 3140, column: 47, scope: !4881)
!4885 = !DILocation(line: 3140, column: 15, scope: !4881)
!4886 = !DILocation(line: 3141, column: 13, scope: !4881)
!4887 = !DILocation(line: 3143, column: 22, scope: !4888)
!4888 = distinct !DILexicalBlock(scope: !4618, file: !3, line: 3143, column: 8)
!4889 = !DILocation(line: 3143, column: 8, scope: !4888)
!4890 = !DILocation(line: 3143, column: 8, scope: !4618)
!4891 = !DILocation(line: 3145, column: 22, scope: !4888)
!4892 = !DILocation(line: 3145, column: 38, scope: !4888)
!4893 = !DILocation(line: 3145, column: 50, scope: !4888)
!4894 = !DILocation(line: 3146, column: 10, scope: !4888)
!4895 = !DILocation(line: 3146, column: 16, scope: !4888)
!4896 = !DILocation(line: 3145, column: 8, scope: !4888)
!4897 = !DILocation(line: 3144, column: 21, scope: !4888)
!4898 = !DILocation(line: 3144, column: 6, scope: !4888)
!4899 = !DILocation(line: 3149, column: 13, scope: !4900)
!4900 = distinct !DILexicalBlock(scope: !4888, file: !3, line: 3149, column: 13)
!4901 = !DILocation(line: 3149, column: 39, scope: !4900)
!4902 = !DILocation(line: 3150, column: 6, scope: !4900)
!4903 = !DILocation(line: 3150, column: 9, scope: !4900)
!4904 = !DILocation(line: 3150, column: 35, scope: !4900)
!4905 = !DILocation(line: 3149, column: 13, scope: !4888)
!4906 = !DILocation(line: 3151, column: 20, scope: !4900)
!4907 = !DILocation(line: 3151, column: 6, scope: !4900)
!4908 = !DILocation(line: 3152, column: 29, scope: !4618)
!4909 = !DILocation(line: 3152, column: 14, scope: !4618)
!4910 = !DILocation(line: 3152, column: 12, scope: !4618)
!4911 = !DILocation(line: 3155, column: 8, scope: !4912)
!4912 = distinct !DILexicalBlock(scope: !4618, file: !3, line: 3155, column: 8)
!4913 = !DILocation(line: 3155, column: 16, scope: !4912)
!4914 = !DILocation(line: 3155, column: 21, scope: !4912)
!4915 = !DILocation(line: 3155, column: 24, scope: !4912)
!4916 = !DILocation(line: 3155, column: 8, scope: !4618)
!4917 = !DILocation(line: 3156, column: 14, scope: !4912)
!4918 = !DILocation(line: 3156, column: 6, scope: !4912)
!4919 = !DILocation(line: 3157, column: 8, scope: !4920)
!4920 = distinct !DILexicalBlock(scope: !4618, file: !3, line: 3157, column: 8)
!4921 = !DILocation(line: 3157, column: 16, scope: !4920)
!4922 = !DILocation(line: 3157, column: 8, scope: !4618)
!4923 = !DILocation(line: 3158, column: 6, scope: !4920)
!4924 = !DILocation(line: 3160, column: 23, scope: !4618)
!4925 = !DILocation(line: 3165, column: 14, scope: !4926)
!4926 = distinct !DILexicalBlock(scope: !4618, file: !3, line: 3165, column: 8)
!4927 = !DILocation(line: 3165, column: 22, scope: !4926)
!4928 = !DILocation(line: 3165, column: 8, scope: !4618)
!4929 = !DILocation(line: 3166, column: 6, scope: !4926)
!4930 = !DILocation(line: 3170, column: 14, scope: !4931)
!4931 = distinct !DILexicalBlock(scope: !4618, file: !3, line: 3170, column: 8)
!4932 = !DILocation(line: 3170, column: 8, scope: !4931)
!4933 = !DILocation(line: 3170, column: 22, scope: !4931)
!4934 = !DILocation(line: 3170, column: 25, scope: !4931)
!4935 = !DILocation(line: 3171, column: 8, scope: !4931)
!4936 = !DILocation(line: 3171, column: 13, scope: !4931)
!4937 = !DILocation(line: 3171, column: 33, scope: !4931)
!4938 = !DILocation(line: 3171, column: 11, scope: !4931)
!4939 = !DILocation(line: 3170, column: 8, scope: !4618)
!4940 = !DILocation(line: 3173, column: 33, scope: !4941)
!4941 = distinct !DILexicalBlock(scope: !4942, file: !3, line: 3173, column: 12)
!4942 = distinct !DILexicalBlock(scope: !4931, file: !3, line: 3172, column: 6)
!4943 = !DILocation(line: 3173, column: 12, scope: !4941)
!4944 = !DILocation(line: 3173, column: 12, scope: !4942)
!4945 = !DILocation(line: 3175, column: 18, scope: !4946)
!4946 = distinct !DILexicalBlock(scope: !4941, file: !3, line: 3174, column: 3)
!4947 = !DILocation(line: 3175, column: 38, scope: !4946)
!4948 = !DILocation(line: 3176, column: 9, scope: !4946)
!4949 = !DILocation(line: 3176, column: 8, scope: !4946)
!4950 = !DILocation(line: 3175, column: 6, scope: !4946)
!4951 = !DILocation(line: 3175, column: 16, scope: !4946)
!4952 = !DILocation(line: 3178, column: 9, scope: !4953)
!4953 = distinct !DILexicalBlock(scope: !4946, file: !3, line: 3178, column: 9)
!4954 = !DILocation(line: 3178, column: 9, scope: !4946)
!4955 = !DILocalVariable(name: "x", scope: !4956, file: !3, line: 3180, type: !867)
!4956 = distinct !DILexicalBlock(scope: !4953, file: !3, line: 3179, column: 7)
!4957 = !DILocation(line: 3180, column: 13, scope: !4956)
!4958 = !DILocation(line: 3182, column: 29, scope: !4956)
!4959 = !DILocation(line: 3182, column: 13, scope: !4956)
!4960 = !DILocation(line: 3182, column: 11, scope: !4956)
!4961 = !DILocation(line: 3183, column: 9, scope: !4956)
!4962 = !DILocation(line: 3184, column: 36, scope: !4956)
!4963 = !DILocation(line: 3184, column: 35, scope: !4956)
!4964 = !DILocation(line: 3184, column: 47, scope: !4956)
!4965 = !DILocation(line: 3184, column: 50, scope: !4956)
!4966 = !DILocation(line: 3184, column: 9, scope: !4956)
!4967 = !DILocation(line: 3185, column: 7, scope: !4956)
!4968 = !DILocation(line: 3187, column: 37, scope: !4946)
!4969 = !DILocation(line: 3187, column: 36, scope: !4946)
!4970 = !DILocation(line: 3187, column: 27, scope: !4946)
!4971 = !DILocation(line: 3187, column: 25, scope: !4946)
!4972 = !DILocation(line: 3188, column: 3, scope: !4946)
!4973 = !DILocation(line: 3190, column: 9, scope: !4942)
!4974 = !DILocation(line: 3190, column: 22, scope: !4942)
!4975 = !DILocation(line: 3190, column: 16, scope: !4942)
!4976 = !DILocation(line: 3190, column: 30, scope: !4942)
!4977 = !DILocation(line: 3190, column: 33, scope: !4942)
!4978 = !DILocation(line: 0, scope: !4942)
!4979 = !DILocation(line: 3192, column: 12, scope: !4980)
!4980 = distinct !DILexicalBlock(scope: !4942, file: !3, line: 3191, column: 3)
!4981 = !DILocation(line: 3192, column: 10, scope: !4980)
!4982 = !DILocation(line: 3193, column: 5, scope: !4980)
!4983 = !DILocation(line: 3194, column: 7, scope: !4980)
!4984 = !DILocation(line: 3194, column: 27, scope: !4980)
!4985 = !DILocation(line: 3195, column: 8, scope: !4980)
!4986 = !DILocation(line: 3195, column: 14, scope: !4980)
!4987 = !DILocation(line: 3194, column: 5, scope: !4980)
!4988 = !DILocation(line: 3196, column: 16, scope: !4980)
!4989 = !DILocation(line: 3196, column: 22, scope: !4980)
!4990 = !DILocation(line: 3197, column: 9, scope: !4980)
!4991 = !DILocation(line: 3197, column: 29, scope: !4980)
!4992 = !DILocation(line: 3196, column: 5, scope: !4980)
!4993 = !DILocation(line: 3198, column: 30, scope: !4980)
!4994 = !DILocation(line: 3198, column: 15, scope: !4980)
!4995 = !DILocation(line: 3198, column: 13, scope: !4980)
!4996 = !DILocation(line: 3199, column: 27, scope: !4980)
!4997 = !DILocation(line: 3199, column: 25, scope: !4980)
!4998 = !DILocation(line: 3200, column: 5, scope: !4980)
!4999 = !DILocation(line: 3201, column: 15, scope: !5000)
!5000 = distinct !DILexicalBlock(scope: !4980, file: !3, line: 3201, column: 9)
!5001 = !DILocation(line: 3201, column: 23, scope: !5000)
!5002 = !DILocation(line: 3201, column: 9, scope: !4980)
!5003 = !DILocation(line: 3202, column: 7, scope: !5000)
!5004 = distinct !{!5004, !4973, !5005}
!5005 = !DILocation(line: 3203, column: 3, scope: !4942)
!5006 = !DILocation(line: 3204, column: 6, scope: !4942)
!5007 = !DILocation(line: 3206, column: 22, scope: !5008)
!5008 = distinct !DILexicalBlock(scope: !4618, file: !3, line: 3206, column: 8)
!5009 = !DILocation(line: 3206, column: 8, scope: !5008)
!5010 = !DILocation(line: 3207, column: 8, scope: !5008)
!5011 = !DILocation(line: 3207, column: 18, scope: !5008)
!5012 = !DILocation(line: 3207, column: 26, scope: !5008)
!5013 = !DILocation(line: 3208, column: 5, scope: !5008)
!5014 = !DILocation(line: 3208, column: 9, scope: !5008)
!5015 = !DILocation(line: 3206, column: 8, scope: !4618)
!5016 = !DILocation(line: 3211, column: 17, scope: !5017)
!5017 = distinct !DILexicalBlock(scope: !5008, file: !3, line: 3209, column: 6)
!5018 = !DILocation(line: 3211, column: 27, scope: !5017)
!5019 = !DILocation(line: 3211, column: 39, scope: !5017)
!5020 = !DILocation(line: 3212, column: 12, scope: !5017)
!5021 = !DILocation(line: 3212, column: 6, scope: !5017)
!5022 = !DILocation(line: 3213, column: 8, scope: !5017)
!5023 = !DILocation(line: 3214, column: 22, scope: !5017)
!5024 = !DILocation(line: 3211, column: 3, scope: !5017)
!5025 = !DILocation(line: 3210, column: 23, scope: !5017)
!5026 = !DILocation(line: 3215, column: 6, scope: !5017)
!5027 = !DILocation(line: 2970, column: 7, scope: !4619)
!5028 = !DILocation(line: 3220, column: 7, scope: !5029)
!5029 = distinct !DILexicalBlock(scope: !4307, file: !3, line: 3220, column: 7)
!5030 = !DILocation(line: 3220, column: 7, scope: !4307)
!5031 = !DILocation(line: 3222, column: 16, scope: !5032)
!5032 = distinct !DILexicalBlock(scope: !5029, file: !3, line: 3221, column: 5)
!5033 = !DILocation(line: 3222, column: 7, scope: !5032)
!5034 = !DILocation(line: 3223, column: 7, scope: !5032)
!5035 = !DILocation(line: 3224, column: 5, scope: !5032)
!5036 = !DILocation(line: 3226, column: 7, scope: !5037)
!5037 = distinct !DILexicalBlock(scope: !4307, file: !3, line: 3226, column: 7)
!5038 = !DILocation(line: 3226, column: 27, scope: !5037)
!5039 = !DILocation(line: 3226, column: 7, scope: !4307)
!5040 = !DILocation(line: 3229, column: 5, scope: !5037)
!5041 = !DILocation(line: 3233, column: 22, scope: !5042)
!5042 = distinct !DILexicalBlock(scope: !5043, file: !3, line: 3233, column: 7)
!5043 = distinct !DILexicalBlock(scope: !5037, file: !3, line: 3231, column: 5)
!5044 = !DILocation(line: 3233, column: 30, scope: !5042)
!5045 = !DILocation(line: 3233, column: 14, scope: !5042)
!5046 = !DILocation(line: 3233, column: 12, scope: !5042)
!5047 = !DILocation(line: 3233, column: 35, scope: !5048)
!5048 = distinct !DILexicalBlock(scope: !5042, file: !3, line: 3233, column: 7)
!5049 = !DILocation(line: 3233, column: 37, scope: !5048)
!5050 = !DILocation(line: 3233, column: 7, scope: !5042)
!5051 = !DILocalVariable(name: "x", scope: !5052, file: !3, line: 3235, type: !867)
!5052 = distinct !DILexicalBlock(scope: !5048, file: !3, line: 3234, column: 2)
!5053 = !DILocation(line: 3235, column: 8, scope: !5052)
!5054 = !DILocation(line: 3237, column: 31, scope: !5052)
!5055 = !DILocation(line: 3237, column: 8, scope: !5052)
!5056 = !DILocation(line: 3237, column: 6, scope: !5052)
!5057 = !DILocation(line: 3238, column: 4, scope: !5052)
!5058 = !DILocation(line: 3238, column: 20, scope: !5052)
!5059 = !DILocation(line: 3239, column: 21, scope: !5052)
!5060 = !DILocation(line: 3239, column: 35, scope: !5052)
!5061 = !DILocation(line: 3239, column: 51, scope: !5052)
!5062 = !DILocation(line: 3239, column: 4, scope: !5052)
!5063 = !DILocation(line: 3239, column: 18, scope: !5052)
!5064 = !DILocation(line: 3240, column: 2, scope: !5052)
!5065 = !DILocation(line: 3233, column: 44, scope: !5048)
!5066 = !DILocation(line: 3233, column: 7, scope: !5048)
!5067 = distinct !{!5067, !5050, !5068}
!5068 = !DILocation(line: 3240, column: 2, scope: !5042)
!5069 = !DILocation(line: 3242, column: 11, scope: !5070)
!5070 = distinct !DILexicalBlock(scope: !5043, file: !3, line: 3242, column: 11)
!5071 = !DILocation(line: 3242, column: 11, scope: !5043)
!5072 = !DILocation(line: 3243, column: 9, scope: !5073)
!5073 = distinct !DILexicalBlock(scope: !5070, file: !3, line: 3243, column: 2)
!5074 = !DILocation(line: 3243, column: 7, scope: !5073)
!5075 = !DILocation(line: 3243, column: 14, scope: !5076)
!5076 = distinct !DILexicalBlock(scope: !5073, file: !3, line: 3243, column: 2)
!5077 = !DILocation(line: 3243, column: 19, scope: !5076)
!5078 = !DILocation(line: 3243, column: 16, scope: !5076)
!5079 = !DILocation(line: 3243, column: 2, scope: !5073)
!5080 = !DILocalVariable(name: "link", scope: !5081, file: !3, line: 3245, type: !867)
!5081 = distinct !DILexicalBlock(scope: !5076, file: !3, line: 3244, column: 4)
!5082 = !DILocation(line: 3245, column: 10, scope: !5081)
!5083 = !DILocation(line: 3246, column: 18, scope: !5084)
!5084 = distinct !DILexicalBlock(scope: !5081, file: !3, line: 3246, column: 6)
!5085 = !DILocation(line: 3246, column: 29, scope: !5084)
!5086 = !DILocation(line: 3246, column: 16, scope: !5084)
!5087 = !DILocation(line: 3246, column: 11, scope: !5084)
!5088 = !DILocation(line: 3246, column: 33, scope: !5089)
!5089 = distinct !DILexicalBlock(scope: !5084, file: !3, line: 3246, column: 6)
!5090 = !DILocation(line: 3246, column: 6, scope: !5084)
!5091 = !DILocalVariable(name: "x", scope: !5092, file: !3, line: 3248, type: !867)
!5092 = distinct !DILexicalBlock(scope: !5089, file: !3, line: 3247, column: 8)
!5093 = !DILocation(line: 3248, column: 7, scope: !5092)
!5094 = !DILocation(line: 3250, column: 7, scope: !5092)
!5095 = !DILocation(line: 3250, column: 5, scope: !5092)
!5096 = !DILocation(line: 3251, column: 3, scope: !5092)
!5097 = !DILocation(line: 3251, column: 19, scope: !5092)
!5098 = !DILocation(line: 3252, column: 20, scope: !5092)
!5099 = !DILocation(line: 3252, column: 34, scope: !5092)
!5100 = !DILocation(line: 3252, column: 50, scope: !5092)
!5101 = !DILocation(line: 3252, column: 3, scope: !5092)
!5102 = !DILocation(line: 3252, column: 17, scope: !5092)
!5103 = !DILocation(line: 3253, column: 8, scope: !5092)
!5104 = !DILocation(line: 3246, column: 46, scope: !5089)
!5105 = !DILocation(line: 3246, column: 44, scope: !5089)
!5106 = !DILocation(line: 3246, column: 6, scope: !5089)
!5107 = distinct !{!5107, !5090, !5108}
!5108 = !DILocation(line: 3253, column: 8, scope: !5084)
!5109 = !DILocation(line: 3254, column: 28, scope: !5081)
!5110 = !DILocation(line: 3254, column: 39, scope: !5081)
!5111 = !DILocation(line: 3254, column: 6, scope: !5081)
!5112 = !DILocation(line: 3255, column: 4, scope: !5081)
!5113 = !DILocation(line: 3243, column: 42, scope: !5076)
!5114 = !DILocation(line: 3243, column: 2, scope: !5076)
!5115 = distinct !{!5115, !5079, !5116}
!5116 = !DILocation(line: 3255, column: 4, scope: !5073)
!5117 = !DILocation(line: 3258, column: 7, scope: !5118)
!5118 = distinct !DILexicalBlock(scope: !4307, file: !3, line: 3258, column: 7)
!5119 = !DILocation(line: 3258, column: 7, scope: !4307)
!5120 = !DILocation(line: 3259, column: 14, scope: !5118)
!5121 = !DILocation(line: 3259, column: 52, scope: !5118)
!5122 = !DILocation(line: 3259, column: 5, scope: !5118)
!5123 = !DILocation(line: 3261, column: 8, scope: !5124)
!5124 = distinct !DILexicalBlock(scope: !4307, file: !3, line: 3261, column: 7)
!5125 = !DILocation(line: 3261, column: 28, scope: !5124)
!5126 = !DILocation(line: 3262, column: 7, scope: !5124)
!5127 = !DILocation(line: 3262, column: 10, scope: !5124)
!5128 = !DILocation(line: 3261, column: 7, scope: !4307)
!5129 = !DILocation(line: 3270, column: 23, scope: !5130)
!5130 = distinct !DILexicalBlock(scope: !5124, file: !3, line: 3263, column: 5)
!5131 = !DILocation(line: 3270, column: 46, scope: !5130)
!5132 = !DILocation(line: 3270, column: 7, scope: !5130)
!5133 = !DILocation(line: 3271, column: 5, scope: !5130)
!5134 = !DILocation(line: 3273, column: 21, scope: !5135)
!5135 = distinct !DILexicalBlock(scope: !4307, file: !3, line: 3273, column: 7)
!5136 = !DILocation(line: 3273, column: 7, scope: !5135)
!5137 = !DILocation(line: 3273, column: 7, scope: !4307)
!5138 = !DILocation(line: 3275, column: 21, scope: !5139)
!5139 = distinct !DILexicalBlock(scope: !5135, file: !3, line: 3274, column: 5)
!5140 = !DILocation(line: 3275, column: 32, scope: !5139)
!5141 = !DILocation(line: 3275, column: 44, scope: !5139)
!5142 = !DILocation(line: 3275, column: 7, scope: !5139)
!5143 = !DILocation(line: 3280, column: 7, scope: !5139)
!5144 = !DILocation(line: 3281, column: 5, scope: !5139)
!5145 = !DILocation(line: 3283, column: 7, scope: !5146)
!5146 = distinct !DILexicalBlock(scope: !4307, file: !3, line: 3283, column: 7)
!5147 = !DILocation(line: 3283, column: 7, scope: !4307)
!5148 = !DILocation(line: 3284, column: 14, scope: !5146)
!5149 = !DILocation(line: 3285, column: 7, scope: !5146)
!5150 = !DILocation(line: 3285, column: 24, scope: !5146)
!5151 = !DILocation(line: 3284, column: 5, scope: !5146)
!5152 = !DILocation(line: 3288, column: 10, scope: !4307)
!5153 = !DILocation(line: 3288, column: 8, scope: !4307)
!5154 = !DILocation(line: 3289, column: 10, scope: !4307)
!5155 = !DILocation(line: 3289, column: 8, scope: !4307)
!5156 = !DILocation(line: 3291, column: 31, scope: !4307)
!5157 = !DILocation(line: 3291, column: 10, scope: !4307)
!5158 = !DILocation(line: 3291, column: 8, scope: !4307)
!5159 = !DILocation(line: 3293, column: 30, scope: !4307)
!5160 = !DILocation(line: 3293, column: 3, scope: !4307)
!5161 = !DILocation(line: 3293, column: 23, scope: !4307)
!5162 = !DILocation(line: 3293, column: 28, scope: !4307)
!5163 = !DILocation(line: 3294, column: 30, scope: !4307)
!5164 = !DILocation(line: 3294, column: 3, scope: !4307)
!5165 = !DILocation(line: 3294, column: 23, scope: !4307)
!5166 = !DILocation(line: 3294, column: 28, scope: !4307)
!5167 = !DILocation(line: 3295, column: 1, scope: !4307)
!5168 = distinct !DISubprogram(name: "dump_new_block_header", scope: !3, file: !3, line: 4849, type: !5169, scopeLine: 4850, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!5169 = !DISubroutineType(types: !5170)
!5170 = !{null, !865, !1406, !867, !867}
!5171 = !DILocalVariable(name: "i", arg: 1, scope: !5168, file: !3, line: 4849, type: !865)
!5172 = !DILocation(line: 4849, column: 28, scope: !5168)
!5173 = !DILocalVariable(name: "bb", arg: 2, scope: !5168, file: !3, line: 4849, type: !1406)
!5174 = !DILocation(line: 4849, column: 43, scope: !5168)
!5175 = !DILocalVariable(name: "head", arg: 3, scope: !5168, file: !3, line: 4849, type: !867)
!5176 = !DILocation(line: 4849, column: 51, scope: !5168)
!5177 = !DILocalVariable(name: "tail", arg: 4, scope: !5168, file: !3, line: 4849, type: !867)
!5178 = !DILocation(line: 4849, column: 61, scope: !5168)
!5179 = !DILocation(line: 4851, column: 8, scope: !5180)
!5180 = distinct !DILexicalBlock(scope: !5168, file: !3, line: 4851, column: 7)
!5181 = !DILocation(line: 4851, column: 7, scope: !5168)
!5182 = !DILocation(line: 4852, column: 14, scope: !5180)
!5183 = !DILocation(line: 4852, column: 5, scope: !5180)
!5184 = !DILocation(line: 4855, column: 14, scope: !5180)
!5185 = !DILocation(line: 4855, column: 5, scope: !5180)
!5186 = !DILocation(line: 4857, column: 12, scope: !5168)
!5187 = !DILocation(line: 4859, column: 5, scope: !5168)
!5188 = !DILocation(line: 4859, column: 9, scope: !5168)
!5189 = !DILocation(line: 4859, column: 16, scope: !5168)
!5190 = !DILocation(line: 4859, column: 33, scope: !5168)
!5191 = !DILocation(line: 4860, column: 6, scope: !5168)
!5192 = !DILocation(line: 4857, column: 3, scope: !5168)
!5193 = !DILocation(line: 4861, column: 12, scope: !5168)
!5194 = !DILocation(line: 4861, column: 3, scope: !5168)
!5195 = !DILocation(line: 4863, column: 12, scope: !5168)
!5196 = !DILocation(line: 4863, column: 3, scope: !5168)
!5197 = !DILocation(line: 4864, column: 1, scope: !5168)
!5198 = distinct !DISubprogram(name: "ready_remove", scope: !3, file: !3, line: 1466, type: !2880, scopeLine: 1467, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!5199 = !DILocalVariable(name: "ready", arg: 1, scope: !5198, file: !3, line: 1466, type: !2459)
!5200 = !DILocation(line: 1466, column: 34, scope: !5198)
!5201 = !DILocalVariable(name: "index", arg: 2, scope: !5198, file: !3, line: 1466, type: !865)
!5202 = !DILocation(line: 1466, column: 45, scope: !5198)
!5203 = !DILocalVariable(name: "t", scope: !5198, file: !3, line: 1468, type: !867)
!5204 = !DILocation(line: 1468, column: 7, scope: !5198)
!5205 = !DILocalVariable(name: "i", scope: !5198, file: !3, line: 1469, type: !865)
!5206 = !DILocation(line: 1469, column: 7, scope: !5198)
!5207 = !DILocation(line: 1471, column: 7, scope: !5208)
!5208 = distinct !DILexicalBlock(scope: !5198, file: !3, line: 1471, column: 7)
!5209 = !DILocation(line: 1471, column: 13, scope: !5208)
!5210 = !DILocation(line: 1471, column: 7, scope: !5198)
!5211 = !DILocation(line: 1472, column: 32, scope: !5208)
!5212 = !DILocation(line: 1472, column: 12, scope: !5208)
!5213 = !DILocation(line: 1472, column: 5, scope: !5208)
!5214 = !DILocation(line: 1473, column: 3, scope: !5198)
!5215 = !DILocation(line: 1474, column: 7, scope: !5198)
!5216 = !DILocation(line: 1474, column: 14, scope: !5198)
!5217 = !DILocation(line: 1474, column: 18, scope: !5198)
!5218 = !DILocation(line: 1474, column: 25, scope: !5198)
!5219 = !DILocation(line: 1474, column: 33, scope: !5198)
!5220 = !DILocation(line: 1474, column: 31, scope: !5198)
!5221 = !DILocation(line: 1474, column: 5, scope: !5198)
!5222 = !DILocation(line: 1475, column: 3, scope: !5198)
!5223 = !DILocation(line: 1475, column: 10, scope: !5198)
!5224 = !DILocation(line: 1475, column: 17, scope: !5198)
!5225 = !DILocation(line: 1476, column: 7, scope: !5226)
!5226 = distinct !DILexicalBlock(scope: !5198, file: !3, line: 1476, column: 7)
!5227 = !DILocation(line: 1476, column: 7, scope: !5198)
!5228 = !DILocation(line: 1477, column: 5, scope: !5226)
!5229 = !DILocation(line: 1477, column: 12, scope: !5226)
!5230 = !DILocation(line: 1477, column: 19, scope: !5226)
!5231 = !DILocation(line: 1478, column: 12, scope: !5232)
!5232 = distinct !DILexicalBlock(scope: !5198, file: !3, line: 1478, column: 3)
!5233 = !DILocation(line: 1478, column: 10, scope: !5232)
!5234 = !DILocation(line: 1478, column: 8, scope: !5232)
!5235 = !DILocation(line: 1478, column: 19, scope: !5236)
!5236 = distinct !DILexicalBlock(scope: !5232, file: !3, line: 1478, column: 3)
!5237 = !DILocation(line: 1478, column: 23, scope: !5236)
!5238 = !DILocation(line: 1478, column: 30, scope: !5236)
!5239 = !DILocation(line: 1478, column: 21, scope: !5236)
!5240 = !DILocation(line: 1478, column: 3, scope: !5232)
!5241 = !DILocation(line: 1479, column: 36, scope: !5236)
!5242 = !DILocation(line: 1479, column: 43, scope: !5236)
!5243 = !DILocation(line: 1479, column: 47, scope: !5236)
!5244 = !DILocation(line: 1479, column: 54, scope: !5236)
!5245 = !DILocation(line: 1479, column: 62, scope: !5236)
!5246 = !DILocation(line: 1479, column: 60, scope: !5236)
!5247 = !DILocation(line: 1479, column: 64, scope: !5236)
!5248 = !DILocation(line: 1479, column: 5, scope: !5236)
!5249 = !DILocation(line: 1479, column: 12, scope: !5236)
!5250 = !DILocation(line: 1479, column: 16, scope: !5236)
!5251 = !DILocation(line: 1479, column: 23, scope: !5236)
!5252 = !DILocation(line: 1479, column: 31, scope: !5236)
!5253 = !DILocation(line: 1479, column: 29, scope: !5236)
!5254 = !DILocation(line: 1479, column: 34, scope: !5236)
!5255 = !DILocation(line: 1478, column: 40, scope: !5236)
!5256 = !DILocation(line: 1478, column: 3, scope: !5236)
!5257 = distinct !{!5257, !5240, !5258}
!5258 = !DILocation(line: 1479, column: 67, scope: !5232)
!5259 = !DILocation(line: 1480, column: 3, scope: !5198)
!5260 = !DILocation(line: 1480, column: 19, scope: !5198)
!5261 = !DILocation(line: 1481, column: 10, scope: !5198)
!5262 = !DILocation(line: 1481, column: 3, scope: !5198)
!5263 = !DILocation(line: 1482, column: 1, scope: !5198)
!5264 = distinct !DISubprogram(name: "queue_insn", scope: !3, file: !3, line: 1341, type: !2403, scopeLine: 1342, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!5265 = !DILocalVariable(name: "insn", arg: 1, scope: !5264, file: !3, line: 1341, type: !867)
!5266 = !DILocation(line: 1341, column: 17, scope: !5264)
!5267 = !DILocalVariable(name: "n_cycles", arg: 2, scope: !5264, file: !3, line: 1341, type: !865)
!5268 = !DILocation(line: 1341, column: 27, scope: !5264)
!5269 = !DILocalVariable(name: "next_q", scope: !5264, file: !3, line: 1343, type: !865)
!5270 = !DILocation(line: 1343, column: 7, scope: !5264)
!5271 = !DILocation(line: 1343, column: 16, scope: !5264)
!5272 = !DILocalVariable(name: "link", scope: !5264, file: !3, line: 1344, type: !867)
!5273 = !DILocation(line: 1344, column: 7, scope: !5264)
!5274 = !DILocation(line: 1344, column: 31, scope: !5264)
!5275 = !DILocation(line: 1344, column: 37, scope: !5264)
!5276 = !DILocation(line: 1344, column: 48, scope: !5264)
!5277 = !DILocation(line: 1344, column: 14, scope: !5264)
!5278 = !DILocation(line: 1346, column: 3, scope: !5264)
!5279 = !DILocation(line: 1347, column: 3, scope: !5264)
!5280 = !DILocation(line: 1349, column: 24, scope: !5264)
!5281 = !DILocation(line: 1349, column: 3, scope: !5264)
!5282 = !DILocation(line: 1349, column: 14, scope: !5264)
!5283 = !DILocation(line: 1349, column: 22, scope: !5264)
!5284 = !DILocation(line: 1350, column: 10, scope: !5264)
!5285 = !DILocation(line: 1352, column: 7, scope: !5286)
!5286 = distinct !DILexicalBlock(scope: !5264, file: !3, line: 1352, column: 7)
!5287 = !DILocation(line: 1352, column: 21, scope: !5286)
!5288 = !DILocation(line: 1352, column: 7, scope: !5264)
!5289 = !DILocation(line: 1354, column: 16, scope: !5290)
!5290 = distinct !DILexicalBlock(scope: !5286, file: !3, line: 1353, column: 5)
!5291 = !DILocation(line: 1355, column: 11, scope: !5290)
!5292 = !DILocation(line: 1355, column: 31, scope: !5290)
!5293 = !DILocation(line: 1355, column: 44, scope: !5290)
!5294 = !DILocation(line: 1355, column: 9, scope: !5290)
!5295 = !DILocation(line: 1354, column: 7, scope: !5290)
!5296 = !DILocation(line: 1357, column: 16, scope: !5290)
!5297 = !DILocation(line: 1357, column: 55, scope: !5290)
!5298 = !DILocation(line: 1357, column: 7, scope: !5290)
!5299 = !DILocation(line: 1358, column: 5, scope: !5290)
!5300 = !DILocation(line: 1360, column: 24, scope: !5264)
!5301 = !DILocation(line: 1360, column: 3, scope: !5264)
!5302 = !DILocation(line: 1360, column: 22, scope: !5264)
!5303 = !DILocation(line: 1361, column: 1, scope: !5264)
!5304 = distinct !DISubprogram(name: "restore_bb_notes", scope: !3, file: !3, line: 4919, type: !2345, scopeLine: 4920, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!5305 = !DILocalVariable(name: "first", arg: 1, scope: !5304, file: !3, line: 4919, type: !1406)
!5306 = !DILocation(line: 4919, column: 31, scope: !5304)
!5307 = !DILocation(line: 4921, column: 8, scope: !5308)
!5308 = distinct !DILexicalBlock(scope: !5304, file: !3, line: 4921, column: 7)
!5309 = !DILocation(line: 4921, column: 7, scope: !5304)
!5310 = !DILocation(line: 4922, column: 5, scope: !5308)
!5311 = !DILocation(line: 4925, column: 11, scope: !5304)
!5312 = !DILocation(line: 4925, column: 18, scope: !5304)
!5313 = !DILocation(line: 4925, column: 9, scope: !5304)
!5314 = !DILocation(line: 4928, column: 3, scope: !5304)
!5315 = !DILocation(line: 4928, column: 10, scope: !5304)
!5316 = !DILocation(line: 4928, column: 19, scope: !5304)
!5317 = !DILocation(line: 4928, column: 16, scope: !5304)
!5318 = !DILocation(line: 4929, column: 3, scope: !5304)
!5319 = !DILocation(line: 4929, column: 6, scope: !5304)
!5320 = !DILocation(line: 4929, column: 16, scope: !5304)
!5321 = !DILocation(line: 4929, column: 23, scope: !5304)
!5322 = !DILocation(line: 0, scope: !5304)
!5323 = !DILocalVariable(name: "prev", scope: !5324, file: !3, line: 4931, type: !867)
!5324 = distinct !DILexicalBlock(scope: !5304, file: !3, line: 4930, column: 5)
!5325 = !DILocation(line: 4931, column: 11, scope: !5324)
!5326 = !DILocalVariable(name: "label", scope: !5324, file: !3, line: 4931, type: !867)
!5327 = !DILocation(line: 4931, column: 17, scope: !5324)
!5328 = !DILocalVariable(name: "note", scope: !5324, file: !3, line: 4931, type: !867)
!5329 = !DILocation(line: 4931, column: 24, scope: !5324)
!5330 = !DILocalVariable(name: "next", scope: !5324, file: !3, line: 4931, type: !867)
!5331 = !DILocation(line: 4931, column: 30, scope: !5324)
!5332 = !DILocation(line: 4933, column: 15, scope: !5324)
!5333 = !DILocation(line: 4933, column: 25, scope: !5324)
!5334 = !DILocation(line: 4933, column: 32, scope: !5324)
!5335 = !DILocation(line: 4933, column: 13, scope: !5324)
!5336 = !DILocation(line: 4934, column: 14, scope: !5324)
!5337 = !DILocation(line: 4934, column: 12, scope: !5324)
!5338 = !DILocation(line: 4935, column: 14, scope: !5324)
!5339 = !DILocation(line: 4935, column: 12, scope: !5324)
!5340 = !DILocation(line: 4937, column: 11, scope: !5341)
!5341 = distinct !DILexicalBlock(scope: !5324, file: !3, line: 4937, column: 11)
!5342 = !DILocation(line: 4937, column: 11, scope: !5324)
!5343 = !DILocation(line: 4938, column: 9, scope: !5341)
!5344 = !DILocation(line: 4938, column: 7, scope: !5341)
!5345 = !DILocation(line: 4938, column: 2, scope: !5341)
!5346 = !DILocation(line: 4940, column: 9, scope: !5341)
!5347 = !DILocation(line: 4940, column: 7, scope: !5341)
!5348 = !DILocation(line: 4941, column: 7, scope: !5324)
!5349 = !DILocation(line: 4943, column: 7, scope: !5324)
!5350 = !DILocation(line: 4943, column: 17, scope: !5324)
!5351 = !DILocation(line: 4943, column: 24, scope: !5324)
!5352 = !DILocation(line: 4943, column: 31, scope: !5324)
!5353 = !DILocation(line: 4945, column: 26, scope: !5324)
!5354 = !DILocation(line: 4945, column: 7, scope: !5324)
!5355 = !DILocation(line: 4945, column: 24, scope: !5324)
!5356 = !DILocation(line: 4946, column: 26, scope: !5324)
!5357 = !DILocation(line: 4946, column: 7, scope: !5324)
!5358 = !DILocation(line: 4946, column: 24, scope: !5324)
!5359 = !DILocation(line: 4947, column: 26, scope: !5324)
!5360 = !DILocation(line: 4947, column: 7, scope: !5324)
!5361 = !DILocation(line: 4947, column: 24, scope: !5324)
!5362 = !DILocation(line: 4949, column: 15, scope: !5324)
!5363 = !DILocation(line: 4949, column: 22, scope: !5324)
!5364 = !DILocation(line: 4949, column: 13, scope: !5324)
!5365 = distinct !{!5365, !5314, !5366}
!5366 = !DILocation(line: 4950, column: 5, scope: !5304)
!5367 = !DILocation(line: 4952, column: 9, scope: !5304)
!5368 = !DILocation(line: 4952, column: 3, scope: !5304)
!5369 = !DILocation(line: 4953, column: 13, scope: !5304)
!5370 = !DILocation(line: 4954, column: 1, scope: !5304)
!5371 = distinct !DISubprogram(name: "advance_one_cycle", scope: !3, file: !3, line: 1558, type: !2341, scopeLine: 1559, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!5372 = !DILocation(line: 1560, column: 18, scope: !5371)
!5373 = !DILocation(line: 1560, column: 3, scope: !5371)
!5374 = !DILocation(line: 1561, column: 7, scope: !5375)
!5375 = distinct !DILexicalBlock(scope: !5371, file: !3, line: 1561, column: 7)
!5376 = !DILocation(line: 1561, column: 21, scope: !5375)
!5377 = !DILocation(line: 1561, column: 7, scope: !5371)
!5378 = !DILocation(line: 1562, column: 14, scope: !5375)
!5379 = !DILocation(line: 1562, column: 5, scope: !5375)
!5380 = !DILocation(line: 1563, column: 1, scope: !5371)
!5381 = distinct !DISubprogram(name: "queue_to_ready", scope: !3, file: !3, line: 1984, type: !2895, scopeLine: 1985, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!5382 = !DILocalVariable(name: "ready", arg: 1, scope: !5381, file: !3, line: 1984, type: !2459)
!5383 = !DILocation(line: 1984, column: 36, scope: !5381)
!5384 = !DILocalVariable(name: "insn", scope: !5381, file: !3, line: 1986, type: !867)
!5385 = !DILocation(line: 1986, column: 7, scope: !5381)
!5386 = !DILocalVariable(name: "link", scope: !5381, file: !3, line: 1987, type: !867)
!5387 = !DILocation(line: 1987, column: 7, scope: !5381)
!5388 = !DILocalVariable(name: "skip_insn", scope: !5381, file: !3, line: 1988, type: !867)
!5389 = !DILocation(line: 1988, column: 7, scope: !5381)
!5390 = !DILocation(line: 1990, column: 11, scope: !5381)
!5391 = !DILocation(line: 1990, column: 9, scope: !5381)
!5392 = !DILocation(line: 1992, column: 7, scope: !5393)
!5393 = distinct !DILexicalBlock(scope: !5381, file: !3, line: 1992, column: 7)
!5394 = !DILocation(line: 1992, column: 28, scope: !5393)
!5395 = !DILocation(line: 1992, column: 7, scope: !5381)
!5396 = !DILocation(line: 1996, column: 38, scope: !5397)
!5397 = distinct !DILexicalBlock(scope: !5393, file: !3, line: 1993, column: 5)
!5398 = !DILocation(line: 1996, column: 19, scope: !5397)
!5399 = !DILocation(line: 1996, column: 17, scope: !5397)
!5400 = !DILocation(line: 1997, column: 7, scope: !5397)
!5401 = !DILocation(line: 1997, column: 14, scope: !5397)
!5402 = !DILocation(line: 1997, column: 24, scope: !5397)
!5403 = !DILocation(line: 1997, column: 27, scope: !5397)
!5404 = !DILocation(line: 0, scope: !5397)
!5405 = !DILocation(line: 1998, column: 33, scope: !5397)
!5406 = !DILocation(line: 1998, column: 14, scope: !5397)
!5407 = !DILocation(line: 1998, column: 12, scope: !5397)
!5408 = distinct !{!5408, !5400, !5409}
!5409 = !DILocation(line: 1998, column: 42, scope: !5397)
!5410 = !DILocation(line: 1999, column: 5, scope: !5397)
!5411 = !DILocation(line: 2001, column: 15, scope: !5393)
!5412 = !DILocation(line: 2005, column: 15, scope: !5413)
!5413 = distinct !DILexicalBlock(scope: !5381, file: !3, line: 2005, column: 3)
!5414 = !DILocation(line: 2005, column: 26, scope: !5413)
!5415 = !DILocation(line: 2005, column: 13, scope: !5413)
!5416 = !DILocation(line: 2005, column: 8, scope: !5413)
!5417 = !DILocation(line: 2005, column: 34, scope: !5418)
!5418 = distinct !DILexicalBlock(scope: !5413, file: !3, line: 2005, column: 3)
!5419 = !DILocation(line: 2005, column: 3, scope: !5413)
!5420 = !DILocation(line: 2007, column: 14, scope: !5421)
!5421 = distinct !DILexicalBlock(scope: !5418, file: !3, line: 2006, column: 5)
!5422 = !DILocation(line: 2007, column: 12, scope: !5421)
!5423 = !DILocation(line: 2008, column: 14, scope: !5421)
!5424 = !DILocation(line: 2010, column: 11, scope: !5425)
!5425 = distinct !DILexicalBlock(scope: !5421, file: !3, line: 2010, column: 11)
!5426 = !DILocation(line: 2010, column: 25, scope: !5425)
!5427 = !DILocation(line: 2010, column: 11, scope: !5421)
!5428 = !DILocation(line: 2011, column: 11, scope: !5425)
!5429 = !DILocation(line: 2012, column: 6, scope: !5425)
!5430 = !DILocation(line: 2012, column: 26, scope: !5425)
!5431 = !DILocation(line: 2012, column: 39, scope: !5425)
!5432 = !DILocation(line: 2012, column: 4, scope: !5425)
!5433 = !DILocation(line: 2011, column: 2, scope: !5425)
!5434 = !DILocation(line: 2016, column: 12, scope: !5435)
!5435 = distinct !DILexicalBlock(scope: !5421, file: !3, line: 2016, column: 11)
!5436 = !DILocation(line: 2017, column: 4, scope: !5435)
!5437 = !DILocation(line: 2017, column: 7, scope: !5435)
!5438 = !DILocation(line: 2017, column: 14, scope: !5435)
!5439 = !DILocation(line: 2017, column: 24, scope: !5435)
!5440 = !DILocation(line: 2017, column: 31, scope: !5435)
!5441 = !DILocation(line: 2017, column: 22, scope: !5435)
!5442 = !DILocation(line: 2017, column: 41, scope: !5435)
!5443 = !DILocation(line: 2017, column: 39, scope: !5435)
!5444 = !DILocation(line: 2018, column: 4, scope: !5435)
!5445 = !DILocation(line: 2018, column: 8, scope: !5435)
!5446 = !DILocation(line: 2019, column: 4, scope: !5435)
!5447 = !DILocation(line: 2019, column: 7, scope: !5435)
!5448 = !DILocation(line: 2019, column: 15, scope: !5435)
!5449 = !DILocation(line: 2019, column: 12, scope: !5435)
!5450 = !DILocation(line: 2016, column: 11, scope: !5421)
!5451 = !DILocation(line: 2021, column: 8, scope: !5452)
!5452 = distinct !DILexicalBlock(scope: !5453, file: !3, line: 2021, column: 8)
!5453 = distinct !DILexicalBlock(scope: !5435, file: !3, line: 2020, column: 2)
!5454 = !DILocation(line: 2021, column: 22, scope: !5452)
!5455 = !DILocation(line: 2021, column: 8, scope: !5453)
!5456 = !DILocation(line: 2022, column: 15, scope: !5452)
!5457 = !DILocation(line: 2022, column: 6, scope: !5452)
!5458 = !DILocation(line: 2023, column: 16, scope: !5453)
!5459 = !DILocation(line: 2023, column: 4, scope: !5453)
!5460 = !DILocation(line: 2024, column: 2, scope: !5453)
!5461 = !DILocation(line: 2027, column: 15, scope: !5462)
!5462 = distinct !DILexicalBlock(scope: !5435, file: !3, line: 2026, column: 2)
!5463 = !DILocation(line: 2027, column: 22, scope: !5462)
!5464 = !DILocation(line: 2027, column: 4, scope: !5462)
!5465 = !DILocation(line: 2028, column: 8, scope: !5466)
!5466 = distinct !DILexicalBlock(scope: !5462, file: !3, line: 2028, column: 8)
!5467 = !DILocation(line: 2028, column: 22, scope: !5466)
!5468 = !DILocation(line: 2028, column: 8, scope: !5462)
!5469 = !DILocation(line: 2029, column: 15, scope: !5466)
!5470 = !DILocation(line: 2029, column: 6, scope: !5466)
!5471 = !DILocation(line: 2031, column: 5, scope: !5421)
!5472 = !DILocation(line: 2005, column: 47, scope: !5418)
!5473 = !DILocation(line: 2005, column: 45, scope: !5418)
!5474 = !DILocation(line: 2005, column: 3, scope: !5418)
!5475 = distinct !{!5475, !5419, !5476}
!5476 = !DILocation(line: 2031, column: 5, scope: !5413)
!5477 = !DILocation(line: 2032, column: 25, scope: !5381)
!5478 = !DILocation(line: 2032, column: 36, scope: !5381)
!5479 = !DILocation(line: 2032, column: 3, scope: !5381)
!5480 = !DILocation(line: 2036, column: 7, scope: !5481)
!5481 = distinct !DILexicalBlock(scope: !5381, file: !3, line: 2036, column: 7)
!5482 = !DILocation(line: 2036, column: 14, scope: !5481)
!5483 = !DILocation(line: 2036, column: 22, scope: !5481)
!5484 = !DILocation(line: 2036, column: 7, scope: !5381)
!5485 = !DILocalVariable(name: "stalls", scope: !5486, file: !3, line: 2038, type: !865)
!5486 = distinct !DILexicalBlock(scope: !5481, file: !3, line: 2037, column: 5)
!5487 = !DILocation(line: 2038, column: 11, scope: !5486)
!5488 = !DILocation(line: 2040, column: 19, scope: !5489)
!5489 = distinct !DILexicalBlock(scope: !5486, file: !3, line: 2040, column: 7)
!5490 = !DILocation(line: 2040, column: 12, scope: !5489)
!5491 = !DILocation(line: 2040, column: 24, scope: !5492)
!5492 = distinct !DILexicalBlock(scope: !5489, file: !3, line: 2040, column: 7)
!5493 = !DILocation(line: 2040, column: 34, scope: !5492)
!5494 = !DILocation(line: 2040, column: 31, scope: !5492)
!5495 = !DILocation(line: 2040, column: 7, scope: !5489)
!5496 = !DILocation(line: 2042, column: 16, scope: !5497)
!5497 = distinct !DILexicalBlock(scope: !5498, file: !3, line: 2042, column: 8)
!5498 = distinct !DILexicalBlock(scope: !5492, file: !3, line: 2041, column: 2)
!5499 = !DILocation(line: 2042, column: 27, scope: !5497)
!5500 = !DILocation(line: 2042, column: 14, scope: !5497)
!5501 = !DILocation(line: 2042, column: 8, scope: !5498)
!5502 = !DILocation(line: 2044, column: 8, scope: !5503)
!5503 = distinct !DILexicalBlock(scope: !5497, file: !3, line: 2043, column: 6)
!5504 = !DILocation(line: 2044, column: 15, scope: !5505)
!5505 = distinct !DILexicalBlock(scope: !5506, file: !3, line: 2044, column: 8)
!5506 = distinct !DILexicalBlock(scope: !5503, file: !3, line: 2044, column: 8)
!5507 = !DILocation(line: 2044, column: 8, scope: !5506)
!5508 = !DILocation(line: 2046, column: 12, scope: !5509)
!5509 = distinct !DILexicalBlock(scope: !5505, file: !3, line: 2045, column: 3)
!5510 = !DILocation(line: 2046, column: 10, scope: !5509)
!5511 = !DILocation(line: 2047, column: 12, scope: !5509)
!5512 = !DILocation(line: 2049, column: 9, scope: !5513)
!5513 = distinct !DILexicalBlock(scope: !5509, file: !3, line: 2049, column: 9)
!5514 = !DILocation(line: 2049, column: 23, scope: !5513)
!5515 = !DILocation(line: 2049, column: 9, scope: !5509)
!5516 = !DILocation(line: 2050, column: 16, scope: !5513)
!5517 = !DILocation(line: 2051, column: 11, scope: !5513)
!5518 = !DILocation(line: 2051, column: 31, scope: !5513)
!5519 = !DILocation(line: 2051, column: 44, scope: !5513)
!5520 = !DILocation(line: 2051, column: 9, scope: !5513)
!5521 = !DILocation(line: 2050, column: 7, scope: !5513)
!5522 = !DILocation(line: 2053, column: 16, scope: !5509)
!5523 = !DILocation(line: 2053, column: 23, scope: !5509)
!5524 = !DILocation(line: 2053, column: 5, scope: !5509)
!5525 = !DILocation(line: 2054, column: 9, scope: !5526)
!5526 = distinct !DILexicalBlock(scope: !5509, file: !3, line: 2054, column: 9)
!5527 = !DILocation(line: 2054, column: 23, scope: !5526)
!5528 = !DILocation(line: 2054, column: 9, scope: !5509)
!5529 = !DILocation(line: 2055, column: 16, scope: !5526)
!5530 = !DILocation(line: 2055, column: 64, scope: !5526)
!5531 = !DILocation(line: 2055, column: 7, scope: !5526)
!5532 = !DILocation(line: 2056, column: 3, scope: !5509)
!5533 = !DILocation(line: 2044, column: 28, scope: !5505)
!5534 = !DILocation(line: 2044, column: 26, scope: !5505)
!5535 = !DILocation(line: 2044, column: 8, scope: !5505)
!5536 = distinct !{!5536, !5507, !5537}
!5537 = !DILocation(line: 2056, column: 3, scope: !5506)
!5538 = !DILocation(line: 2057, column: 30, scope: !5503)
!5539 = !DILocation(line: 2057, column: 41, scope: !5503)
!5540 = !DILocation(line: 2057, column: 8, scope: !5503)
!5541 = !DILocation(line: 2059, column: 8, scope: !5503)
!5542 = !DILocation(line: 2061, column: 8, scope: !5503)
!5543 = !DILocation(line: 2064, column: 4, scope: !5498)
!5544 = !DILocation(line: 2065, column: 2, scope: !5498)
!5545 = !DILocation(line: 2040, column: 62, scope: !5492)
!5546 = !DILocation(line: 2040, column: 7, scope: !5492)
!5547 = distinct !{!5547, !5495, !5548}
!5548 = !DILocation(line: 2065, column: 2, scope: !5489)
!5549 = !DILocation(line: 2067, column: 15, scope: !5486)
!5550 = !DILocation(line: 2067, column: 13, scope: !5486)
!5551 = !DILocation(line: 2068, column: 20, scope: !5486)
!5552 = !DILocation(line: 2068, column: 17, scope: !5486)
!5553 = !DILocation(line: 2069, column: 5, scope: !5486)
!5554 = !DILocation(line: 2070, column: 1, scope: !5381)
!5555 = distinct !DISubprogram(name: "debug_ready_list", scope: !3, file: !3, line: 2237, type: !2895, scopeLine: 2238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!5556 = !DILocalVariable(name: "ready", arg: 1, scope: !5555, file: !3, line: 2237, type: !2459)
!5557 = !DILocation(line: 2237, column: 38, scope: !5555)
!5558 = !DILocalVariable(name: "p", scope: !5555, file: !3, line: 2239, type: !2098)
!5559 = !DILocation(line: 2239, column: 8, scope: !5555)
!5560 = !DILocalVariable(name: "i", scope: !5555, file: !3, line: 2240, type: !865)
!5561 = !DILocation(line: 2240, column: 7, scope: !5555)
!5562 = !DILocation(line: 2242, column: 7, scope: !5563)
!5563 = distinct !DILexicalBlock(scope: !5555, file: !3, line: 2242, column: 7)
!5564 = !DILocation(line: 2242, column: 14, scope: !5563)
!5565 = !DILocation(line: 2242, column: 22, scope: !5563)
!5566 = !DILocation(line: 2242, column: 7, scope: !5555)
!5567 = !DILocation(line: 2244, column: 16, scope: !5568)
!5568 = distinct !DILexicalBlock(scope: !5563, file: !3, line: 2243, column: 5)
!5569 = !DILocation(line: 2244, column: 7, scope: !5568)
!5570 = !DILocation(line: 2245, column: 7, scope: !5568)
!5571 = !DILocation(line: 2248, column: 22, scope: !5555)
!5572 = !DILocation(line: 2248, column: 7, scope: !5555)
!5573 = !DILocation(line: 2248, column: 5, scope: !5555)
!5574 = !DILocation(line: 2249, column: 10, scope: !5575)
!5575 = distinct !DILexicalBlock(scope: !5555, file: !3, line: 2249, column: 3)
!5576 = !DILocation(line: 2249, column: 8, scope: !5575)
!5577 = !DILocation(line: 2249, column: 15, scope: !5578)
!5578 = distinct !DILexicalBlock(scope: !5575, file: !3, line: 2249, column: 3)
!5579 = !DILocation(line: 2249, column: 19, scope: !5578)
!5580 = !DILocation(line: 2249, column: 26, scope: !5578)
!5581 = !DILocation(line: 2249, column: 17, scope: !5578)
!5582 = !DILocation(line: 2249, column: 3, scope: !5575)
!5583 = !DILocation(line: 2251, column: 16, scope: !5584)
!5584 = distinct !DILexicalBlock(scope: !5578, file: !3, line: 2250, column: 5)
!5585 = !DILocation(line: 2252, column: 11, scope: !5584)
!5586 = !DILocation(line: 2252, column: 31, scope: !5584)
!5587 = !DILocation(line: 2252, column: 44, scope: !5584)
!5588 = !DILocation(line: 2252, column: 46, scope: !5584)
!5589 = !DILocation(line: 2252, column: 9, scope: !5584)
!5590 = !DILocation(line: 2253, column: 9, scope: !5584)
!5591 = !DILocation(line: 2251, column: 7, scope: !5584)
!5592 = !DILocation(line: 2254, column: 11, scope: !5593)
!5593 = distinct !DILexicalBlock(scope: !5584, file: !3, line: 2254, column: 11)
!5594 = !DILocation(line: 2254, column: 11, scope: !5584)
!5595 = !DILocation(line: 2255, column: 11, scope: !5593)
!5596 = !DILocation(line: 2256, column: 4, scope: !5593)
!5597 = !DILocation(line: 2255, column: 2, scope: !5593)
!5598 = !DILocation(line: 2257, column: 11, scope: !5599)
!5599 = distinct !DILexicalBlock(scope: !5584, file: !3, line: 2257, column: 11)
!5600 = !DILocation(line: 2257, column: 30, scope: !5599)
!5601 = !DILocation(line: 2257, column: 28, scope: !5599)
!5602 = !DILocation(line: 2257, column: 11, scope: !5584)
!5603 = !DILocation(line: 2258, column: 11, scope: !5599)
!5604 = !DILocation(line: 2258, column: 36, scope: !5599)
!5605 = !DILocation(line: 2258, column: 55, scope: !5599)
!5606 = !DILocation(line: 2258, column: 53, scope: !5599)
!5607 = !DILocation(line: 2258, column: 2, scope: !5599)
!5608 = !DILocation(line: 2259, column: 11, scope: !5609)
!5609 = distinct !DILexicalBlock(scope: !5584, file: !3, line: 2259, column: 11)
!5610 = !DILocation(line: 2259, column: 11, scope: !5584)
!5611 = !DILocation(line: 2260, column: 11, scope: !5609)
!5612 = !DILocation(line: 2260, column: 2, scope: !5609)
!5613 = !DILocation(line: 2261, column: 5, scope: !5584)
!5614 = !DILocation(line: 2249, column: 36, scope: !5578)
!5615 = !DILocation(line: 2249, column: 3, scope: !5578)
!5616 = distinct !{!5616, !5582, !5617}
!5617 = !DILocation(line: 2261, column: 5, scope: !5575)
!5618 = !DILocation(line: 2262, column: 12, scope: !5555)
!5619 = !DILocation(line: 2262, column: 3, scope: !5555)
!5620 = !DILocation(line: 2263, column: 1, scope: !5555)
!5621 = distinct !DISubprogram(name: "ready_remove_first", scope: !3, file: !3, line: 1426, type: !5622, scopeLine: 1427, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!5622 = !DISubroutineType(types: !5623)
!5623 = !{!867, !2459}
!5624 = !DILocalVariable(name: "ready", arg: 1, scope: !5621, file: !3, line: 1426, type: !2459)
!5625 = !DILocation(line: 1426, column: 40, scope: !5621)
!5626 = !DILocalVariable(name: "t", scope: !5621, file: !3, line: 1428, type: !867)
!5627 = !DILocation(line: 1428, column: 7, scope: !5621)
!5628 = !DILocation(line: 1430, column: 3, scope: !5621)
!5629 = !DILocation(line: 1431, column: 7, scope: !5621)
!5630 = !DILocation(line: 1431, column: 14, scope: !5621)
!5631 = !DILocation(line: 1431, column: 18, scope: !5621)
!5632 = !DILocation(line: 1431, column: 25, scope: !5621)
!5633 = !DILocation(line: 1431, column: 30, scope: !5621)
!5634 = !DILocation(line: 1431, column: 5, scope: !5621)
!5635 = !DILocation(line: 1432, column: 3, scope: !5621)
!5636 = !DILocation(line: 1432, column: 10, scope: !5621)
!5637 = !DILocation(line: 1432, column: 17, scope: !5621)
!5638 = !DILocation(line: 1433, column: 7, scope: !5639)
!5639 = distinct !DILexicalBlock(scope: !5621, file: !3, line: 1433, column: 7)
!5640 = !DILocation(line: 1433, column: 7, scope: !5621)
!5641 = !DILocation(line: 1434, column: 5, scope: !5639)
!5642 = !DILocation(line: 1434, column: 12, scope: !5639)
!5643 = !DILocation(line: 1434, column: 19, scope: !5639)
!5644 = !DILocation(line: 1436, column: 7, scope: !5645)
!5645 = distinct !DILexicalBlock(scope: !5621, file: !3, line: 1436, column: 7)
!5646 = !DILocation(line: 1436, column: 14, scope: !5645)
!5647 = !DILocation(line: 1436, column: 22, scope: !5645)
!5648 = !DILocation(line: 1436, column: 7, scope: !5621)
!5649 = !DILocation(line: 1437, column: 20, scope: !5645)
!5650 = !DILocation(line: 1437, column: 27, scope: !5645)
!5651 = !DILocation(line: 1437, column: 34, scope: !5645)
!5652 = !DILocation(line: 1437, column: 5, scope: !5645)
!5653 = !DILocation(line: 1437, column: 12, scope: !5645)
!5654 = !DILocation(line: 1437, column: 18, scope: !5645)
!5655 = !DILocation(line: 1439, column: 3, scope: !5621)
!5656 = !DILocation(line: 1440, column: 3, scope: !5621)
!5657 = !DILocation(line: 1440, column: 19, scope: !5621)
!5658 = !DILocation(line: 1442, column: 10, scope: !5621)
!5659 = !DILocation(line: 1442, column: 3, scope: !5621)
!5660 = distinct !DISubprogram(name: "move_insn", scope: !3, file: !3, line: 2287, type: !5661, scopeLine: 2288, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!5661 = !DISubroutineType(types: !5662)
!5662 = !{null, !867, !867, !867}
!5663 = !DILocalVariable(name: "insn", arg: 1, scope: !5660, file: !3, line: 2287, type: !867)
!5664 = !DILocation(line: 2287, column: 16, scope: !5660)
!5665 = !DILocalVariable(name: "last", arg: 2, scope: !5660, file: !3, line: 2287, type: !867)
!5666 = !DILocation(line: 2287, column: 26, scope: !5660)
!5667 = !DILocalVariable(name: "nt", arg: 3, scope: !5660, file: !3, line: 2287, type: !867)
!5668 = !DILocation(line: 2287, column: 36, scope: !5660)
!5669 = !DILocation(line: 2289, column: 7, scope: !5670)
!5670 = distinct !DILexicalBlock(scope: !5660, file: !3, line: 2289, column: 7)
!5671 = !DILocation(line: 2289, column: 27, scope: !5670)
!5672 = !DILocation(line: 2289, column: 24, scope: !5670)
!5673 = !DILocation(line: 2289, column: 7, scope: !5660)
!5674 = !DILocalVariable(name: "bb", scope: !5675, file: !3, line: 2291, type: !1406)
!5675 = distinct !DILexicalBlock(scope: !5670, file: !3, line: 2290, column: 5)
!5676 = !DILocation(line: 2291, column: 19, scope: !5675)
!5677 = !DILocalVariable(name: "note", scope: !5675, file: !3, line: 2292, type: !867)
!5678 = !DILocation(line: 2292, column: 11, scope: !5675)
!5679 = !DILocalVariable(name: "jump_p", scope: !5675, file: !3, line: 2293, type: !865)
!5680 = !DILocation(line: 2293, column: 11, scope: !5675)
!5681 = !DILocation(line: 2295, column: 12, scope: !5675)
!5682 = !DILocation(line: 2295, column: 10, scope: !5675)
!5683 = !DILocation(line: 2298, column: 7, scope: !5675)
!5684 = !DILocation(line: 2300, column: 11, scope: !5685)
!5685 = distinct !DILexicalBlock(scope: !5675, file: !3, line: 2300, column: 11)
!5686 = !DILocation(line: 2300, column: 26, scope: !5685)
!5687 = !DILocation(line: 2300, column: 23, scope: !5685)
!5688 = !DILocation(line: 2300, column: 11, scope: !5675)
!5689 = !DILocation(line: 2305, column: 34, scope: !5690)
!5690 = distinct !DILexicalBlock(scope: !5685, file: !3, line: 2303, column: 2)
!5691 = !DILocation(line: 2305, column: 13, scope: !5690)
!5692 = !DILocation(line: 2305, column: 11, scope: !5690)
!5693 = !DILocation(line: 2307, column: 4, scope: !5690)
!5694 = !DILocation(line: 2313, column: 4, scope: !5690)
!5695 = !DILocation(line: 2315, column: 18, scope: !5690)
!5696 = !DILocation(line: 2315, column: 4, scope: !5690)
!5697 = !DILocation(line: 2315, column: 16, scope: !5690)
!5698 = !DILocation(line: 2316, column: 2, scope: !5690)
!5699 = !DILocation(line: 2318, column: 7, scope: !5675)
!5700 = !DILocation(line: 2320, column: 11, scope: !5701)
!5701 = distinct !DILexicalBlock(scope: !5675, file: !3, line: 2320, column: 11)
!5702 = !DILocation(line: 2320, column: 11, scope: !5675)
!5703 = !DILocation(line: 2323, column: 4, scope: !5704)
!5704 = distinct !DILexicalBlock(scope: !5701, file: !3, line: 2322, column: 2)
!5705 = !DILocation(line: 2325, column: 11, scope: !5704)
!5706 = !DILocation(line: 2325, column: 9, scope: !5704)
!5707 = !DILocation(line: 2326, column: 4, scope: !5704)
!5708 = !DILocation(line: 2326, column: 11, scope: !5704)
!5709 = !DILocation(line: 2326, column: 32, scope: !5704)
!5710 = !DILocation(line: 2326, column: 35, scope: !5704)
!5711 = !DILocation(line: 2326, column: 43, scope: !5704)
!5712 = !DILocation(line: 2326, column: 40, scope: !5704)
!5713 = !DILocation(line: 0, scope: !5704)
!5714 = !DILocation(line: 2327, column: 13, scope: !5704)
!5715 = !DILocation(line: 2327, column: 11, scope: !5704)
!5716 = distinct !{!5716, !5707, !5714}
!5717 = !DILocation(line: 2329, column: 8, scope: !5718)
!5718 = distinct !DILexicalBlock(scope: !5704, file: !3, line: 2329, column: 8)
!5719 = !DILocation(line: 2329, column: 16, scope: !5718)
!5720 = !DILocation(line: 2329, column: 13, scope: !5718)
!5721 = !DILocation(line: 2330, column: 8, scope: !5718)
!5722 = !DILocation(line: 2330, column: 12, scope: !5718)
!5723 = !DILocation(line: 2331, column: 5, scope: !5718)
!5724 = !DILocation(line: 2331, column: 8, scope: !5718)
!5725 = !DILocation(line: 2329, column: 8, scope: !5704)
!5726 = !DILocation(line: 2332, column: 13, scope: !5718)
!5727 = !DILocation(line: 2332, column: 11, scope: !5718)
!5728 = !DILocation(line: 2332, column: 6, scope: !5718)
!5729 = !DILocation(line: 2334, column: 4, scope: !5704)
!5730 = !DILocation(line: 2335, column: 2, scope: !5704)
!5731 = !DILocation(line: 2337, column: 9, scope: !5701)
!5732 = !DILocation(line: 2337, column: 7, scope: !5701)
!5733 = !DILocation(line: 2339, column: 38, scope: !5675)
!5734 = !DILocation(line: 2339, column: 7, scope: !5675)
!5735 = !DILocation(line: 2339, column: 36, scope: !5675)
!5736 = !DILocation(line: 2340, column: 38, scope: !5675)
!5737 = !DILocation(line: 2340, column: 7, scope: !5675)
!5738 = !DILocation(line: 2340, column: 36, scope: !5675)
!5739 = !DILocation(line: 2342, column: 26, scope: !5675)
!5740 = !DILocation(line: 2342, column: 7, scope: !5675)
!5741 = !DILocation(line: 2342, column: 24, scope: !5675)
!5742 = !DILocation(line: 2343, column: 38, scope: !5675)
!5743 = !DILocation(line: 2343, column: 7, scope: !5675)
!5744 = !DILocation(line: 2343, column: 36, scope: !5675)
!5745 = !DILocation(line: 2345, column: 26, scope: !5675)
!5746 = !DILocation(line: 2345, column: 7, scope: !5675)
!5747 = !DILocation(line: 2345, column: 24, scope: !5675)
!5748 = !DILocation(line: 2346, column: 26, scope: !5675)
!5749 = !DILocation(line: 2346, column: 7, scope: !5675)
!5750 = !DILocation(line: 2346, column: 24, scope: !5675)
!5751 = !DILocation(line: 2348, column: 12, scope: !5675)
!5752 = !DILocation(line: 2348, column: 10, scope: !5675)
!5753 = !DILocation(line: 2350, column: 11, scope: !5754)
!5754 = distinct !DILexicalBlock(scope: !5675, file: !3, line: 2350, column: 11)
!5755 = !DILocation(line: 2350, column: 11, scope: !5675)
!5756 = !DILocation(line: 2352, column: 19, scope: !5757)
!5757 = distinct !DILexicalBlock(scope: !5754, file: !3, line: 2351, column: 2)
!5758 = !DILocation(line: 2352, column: 4, scope: !5757)
!5759 = !DILocation(line: 2354, column: 8, scope: !5760)
!5760 = distinct !DILexicalBlock(scope: !5757, file: !3, line: 2354, column: 8)
!5761 = !DILocation(line: 2354, column: 33, scope: !5760)
!5762 = !DILocation(line: 2354, column: 30, scope: !5760)
!5763 = !DILocation(line: 2354, column: 8, scope: !5757)
!5764 = !DILocation(line: 2355, column: 30, scope: !5760)
!5765 = !DILocation(line: 2355, column: 6, scope: !5760)
!5766 = !DILocation(line: 2357, column: 4, scope: !5757)
!5767 = !DILocation(line: 2358, column: 2, scope: !5757)
!5768 = !DILocation(line: 2360, column: 26, scope: !5675)
!5769 = !DILocation(line: 2360, column: 32, scope: !5675)
!5770 = !DILocation(line: 2360, column: 7, scope: !5675)
!5771 = !DILocation(line: 2363, column: 11, scope: !5772)
!5772 = distinct !DILexicalBlock(scope: !5675, file: !3, line: 2363, column: 11)
!5773 = !DILocation(line: 2363, column: 26, scope: !5772)
!5774 = !DILocation(line: 2363, column: 23, scope: !5772)
!5775 = !DILocation(line: 2363, column: 11, scope: !5675)
!5776 = !DILocation(line: 2364, column: 16, scope: !5772)
!5777 = !DILocation(line: 2364, column: 2, scope: !5772)
!5778 = !DILocation(line: 2364, column: 14, scope: !5772)
!5779 = !DILocation(line: 2365, column: 5, scope: !5675)
!5780 = !DILocation(line: 2367, column: 3, scope: !5660)
!5781 = !DILocation(line: 2367, column: 24, scope: !5660)
!5782 = !DILocation(line: 2368, column: 1, scope: !5660)
!5783 = distinct !DISubprogram(name: "schedule_insn", scope: !3, file: !3, line: 1662, type: !2291, scopeLine: 1663, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!5784 = !DILocalVariable(name: "insn", arg: 1, scope: !5783, file: !3, line: 1662, type: !867)
!5785 = !DILocation(line: 1662, column: 20, scope: !5783)
!5786 = !DILocalVariable(name: "sd_it", scope: !5783, file: !3, line: 1664, type: !2467)
!5787 = !DILocation(line: 1664, column: 19, scope: !5783)
!5788 = !DILocalVariable(name: "dep", scope: !5783, file: !3, line: 1665, type: !2720)
!5789 = !DILocation(line: 1665, column: 9, scope: !5783)
!5790 = !DILocalVariable(name: "i", scope: !5783, file: !3, line: 1666, type: !865)
!5791 = !DILocation(line: 1666, column: 7, scope: !5783)
!5792 = !DILocalVariable(name: "advance", scope: !5783, file: !3, line: 1667, type: !865)
!5793 = !DILocation(line: 1667, column: 7, scope: !5783)
!5794 = !DILocation(line: 1669, column: 7, scope: !5795)
!5795 = distinct !DILexicalBlock(scope: !5783, file: !3, line: 1669, column: 7)
!5796 = !DILocation(line: 1669, column: 21, scope: !5795)
!5797 = !DILocation(line: 1669, column: 7, scope: !5783)
!5798 = !DILocalVariable(name: "pressure_info", scope: !5799, file: !3, line: 1671, type: !2168)
!5799 = distinct !DILexicalBlock(scope: !5795, file: !3, line: 1670, column: 5)
!5800 = !DILocation(line: 1671, column: 33, scope: !5799)
!5801 = !DILocalVariable(name: "buf", scope: !5799, file: !3, line: 1672, type: !5802)
!5802 = !DICompositeType(tag: DW_TAG_array_type, baseType: !895, size: 16384, elements: !5803)
!5803 = !{!5804}
!5804 = !DISubrange(count: 2048)
!5805 = !DILocation(line: 1672, column: 12, scope: !5799)
!5806 = !DILocation(line: 1674, column: 19, scope: !5799)
!5807 = !DILocation(line: 1674, column: 24, scope: !5799)
!5808 = !DILocation(line: 1674, column: 7, scope: !5799)
!5809 = !DILocation(line: 1675, column: 7, scope: !5799)
!5810 = !DILocation(line: 1675, column: 15, scope: !5799)
!5811 = !DILocation(line: 1676, column: 16, scope: !5799)
!5812 = !DILocation(line: 1676, column: 49, scope: !5799)
!5813 = !DILocation(line: 1676, column: 60, scope: !5799)
!5814 = !DILocation(line: 1676, column: 7, scope: !5799)
!5815 = !DILocation(line: 1678, column: 27, scope: !5816)
!5816 = distinct !DILexicalBlock(scope: !5799, file: !3, line: 1678, column: 11)
!5817 = !DILocation(line: 1678, column: 11, scope: !5816)
!5818 = !DILocation(line: 1678, column: 33, scope: !5816)
!5819 = !DILocation(line: 1678, column: 11, scope: !5799)
!5820 = !DILocation(line: 1679, column: 11, scope: !5816)
!5821 = !DILocation(line: 1679, column: 2, scope: !5816)
!5822 = !DILocation(line: 1681, column: 21, scope: !5816)
!5823 = !DILocation(line: 1681, column: 33, scope: !5816)
!5824 = !DILocation(line: 1681, column: 2, scope: !5816)
!5825 = !DILocation(line: 1682, column: 23, scope: !5799)
!5826 = !DILocation(line: 1682, column: 21, scope: !5799)
!5827 = !DILocation(line: 1683, column: 11, scope: !5828)
!5828 = distinct !DILexicalBlock(scope: !5799, file: !3, line: 1683, column: 11)
!5829 = !DILocation(line: 1683, column: 25, scope: !5828)
!5830 = !DILocation(line: 1683, column: 11, scope: !5799)
!5831 = !DILocation(line: 1685, column: 16, scope: !5832)
!5832 = distinct !DILexicalBlock(scope: !5828, file: !3, line: 1684, column: 2)
!5833 = !DILocation(line: 1685, column: 4, scope: !5832)
!5834 = !DILocation(line: 1686, column: 11, scope: !5835)
!5835 = distinct !DILexicalBlock(scope: !5832, file: !3, line: 1686, column: 4)
!5836 = !DILocation(line: 1686, column: 9, scope: !5835)
!5837 = !DILocation(line: 1686, column: 16, scope: !5838)
!5838 = distinct !DILexicalBlock(scope: !5835, file: !3, line: 1686, column: 4)
!5839 = !DILocation(line: 1686, column: 20, scope: !5838)
!5840 = !DILocation(line: 1686, column: 18, scope: !5838)
!5841 = !DILocation(line: 1686, column: 4, scope: !5835)
!5842 = !DILocation(line: 1687, column: 15, scope: !5838)
!5843 = !DILocation(line: 1688, column: 44, scope: !5838)
!5844 = !DILocation(line: 1688, column: 24, scope: !5838)
!5845 = !DILocation(line: 1688, column: 8, scope: !5838)
!5846 = !DILocation(line: 1689, column: 8, scope: !5838)
!5847 = !DILocation(line: 1689, column: 22, scope: !5838)
!5848 = !DILocation(line: 1689, column: 25, scope: !5838)
!5849 = !DILocation(line: 1689, column: 39, scope: !5838)
!5850 = !DILocation(line: 1689, column: 53, scope: !5838)
!5851 = !DILocation(line: 1689, column: 56, scope: !5838)
!5852 = !DILocation(line: 1687, column: 6, scope: !5838)
!5853 = !DILocation(line: 1686, column: 47, scope: !5838)
!5854 = !DILocation(line: 1686, column: 4, scope: !5838)
!5855 = distinct !{!5855, !5841, !5856}
!5856 = !DILocation(line: 1689, column: 62, scope: !5835)
!5857 = !DILocation(line: 1690, column: 2, scope: !5832)
!5858 = !DILocation(line: 1691, column: 20, scope: !5799)
!5859 = !DILocation(line: 1691, column: 7, scope: !5799)
!5860 = !DILocation(line: 1692, column: 5, scope: !5799)
!5861 = !DILocation(line: 1694, column: 7, scope: !5862)
!5862 = distinct !DILexicalBlock(scope: !5783, file: !3, line: 1694, column: 7)
!5863 = !DILocation(line: 1694, column: 7, scope: !5783)
!5864 = !DILocation(line: 1695, column: 43, scope: !5862)
!5865 = !DILocation(line: 1695, column: 5, scope: !5862)
!5866 = !DILocation(line: 1699, column: 3, scope: !5783)
!5867 = !DILocation(line: 1702, column: 7, scope: !5868)
!5868 = distinct !DILexicalBlock(scope: !5783, file: !3, line: 1702, column: 7)
!5869 = !DILocation(line: 1702, column: 28, scope: !5868)
!5870 = !DILocation(line: 1702, column: 32, scope: !5868)
!5871 = !DILocation(line: 1702, column: 7, scope: !5783)
!5872 = !DILocation(line: 1703, column: 37, scope: !5873)
!5873 = distinct !DILexicalBlock(scope: !5868, file: !3, line: 1703, column: 5)
!5874 = !DILocation(line: 1703, column: 18, scope: !5873)
!5875 = !DILocation(line: 1703, column: 10, scope: !5873)
!5876 = !DILocation(line: 1704, column: 3, scope: !5877)
!5877 = distinct !DILexicalBlock(scope: !5873, file: !3, line: 1703, column: 5)
!5878 = !DILocation(line: 1703, column: 5, scope: !5873)
!5879 = !DILocalVariable(name: "dbg", scope: !5880, file: !3, line: 1706, type: !867)
!5880 = distinct !DILexicalBlock(scope: !5877, file: !3, line: 1705, column: 7)
!5881 = !DILocation(line: 1706, column: 6, scope: !5880)
!5882 = !DILocation(line: 1706, column: 12, scope: !5880)
!5883 = !DILocation(line: 1708, column: 2, scope: !5880)
!5884 = !DILocation(line: 1710, column: 6, scope: !5885)
!5885 = distinct !DILexicalBlock(scope: !5880, file: !3, line: 1710, column: 6)
!5886 = !DILocation(line: 1710, column: 20, scope: !5885)
!5887 = !DILocation(line: 1710, column: 6, scope: !5880)
!5888 = !DILocation(line: 1711, column: 13, scope: !5885)
!5889 = !DILocation(line: 1712, column: 6, scope: !5885)
!5890 = !DILocation(line: 1711, column: 4, scope: !5885)
!5891 = !DILocation(line: 1725, column: 32, scope: !5880)
!5892 = !DILocation(line: 1725, column: 2, scope: !5880)
!5893 = !DILocation(line: 1725, column: 30, scope: !5880)
!5894 = !DILocation(line: 1726, column: 18, scope: !5880)
!5895 = !DILocation(line: 1726, column: 2, scope: !5880)
!5896 = !DILocation(line: 1731, column: 2, scope: !5880)
!5897 = !DILocation(line: 1703, column: 5, scope: !5877)
!5898 = distinct !{!5898, !5878, !5899}
!5899 = !DILocation(line: 1732, column: 7, scope: !5873)
!5900 = !DILocation(line: 1734, column: 3, scope: !5783)
!5901 = !DILocation(line: 1735, column: 3, scope: !5783)
!5902 = !DILocation(line: 1735, column: 22, scope: !5783)
!5903 = !DILocation(line: 1737, column: 3, scope: !5783)
!5904 = !DILocation(line: 1738, column: 7, scope: !5905)
!5905 = distinct !DILexicalBlock(scope: !5783, file: !3, line: 1738, column: 7)
!5906 = !DILocation(line: 1738, column: 26, scope: !5905)
!5907 = !DILocation(line: 1738, column: 24, scope: !5905)
!5908 = !DILocation(line: 1738, column: 7, scope: !5783)
!5909 = !DILocation(line: 1741, column: 5, scope: !5905)
!5910 = !DILocation(line: 1745, column: 22, scope: !5783)
!5911 = !DILocation(line: 1745, column: 3, scope: !5783)
!5912 = !DILocation(line: 1745, column: 20, scope: !5783)
!5913 = !DILocation(line: 1748, column: 35, scope: !5914)
!5914 = distinct !DILexicalBlock(scope: !5783, file: !3, line: 1748, column: 3)
!5915 = !DILocation(line: 1748, column: 16, scope: !5914)
!5916 = !DILocation(line: 1748, column: 8, scope: !5914)
!5917 = !DILocation(line: 1749, column: 8, scope: !5918)
!5918 = distinct !DILexicalBlock(scope: !5914, file: !3, line: 1748, column: 3)
!5919 = !DILocation(line: 1748, column: 3, scope: !5914)
!5920 = !DILocalVariable(name: "next", scope: !5921, file: !3, line: 1751, type: !867)
!5921 = distinct !DILexicalBlock(scope: !5918, file: !3, line: 1750, column: 5)
!5922 = !DILocation(line: 1751, column: 11, scope: !5921)
!5923 = !DILocation(line: 1751, column: 18, scope: !5921)
!5924 = !DILocation(line: 1756, column: 7, scope: !5921)
!5925 = !DILocation(line: 1761, column: 11, scope: !5926)
!5926 = distinct !DILexicalBlock(scope: !5921, file: !3, line: 1761, column: 11)
!5927 = !DILocation(line: 1761, column: 31, scope: !5926)
!5928 = !DILocation(line: 1761, column: 35, scope: !5926)
!5929 = !DILocation(line: 1761, column: 11, scope: !5921)
!5930 = !DILocation(line: 1762, column: 2, scope: !5926)
!5931 = distinct !{!5931, !5919, !5932}
!5932 = !DILocation(line: 1782, column: 5, scope: !5914)
!5933 = !DILocation(line: 1764, column: 12, scope: !5934)
!5934 = distinct !DILexicalBlock(scope: !5921, file: !3, line: 1764, column: 11)
!5935 = !DILocation(line: 1764, column: 11, scope: !5921)
!5936 = !DILocalVariable(name: "effective_cost", scope: !5937, file: !3, line: 1766, type: !865)
!5937 = distinct !DILexicalBlock(scope: !5934, file: !3, line: 1765, column: 2)
!5938 = !DILocation(line: 1766, column: 8, scope: !5937)
!5939 = !DILocation(line: 1768, column: 32, scope: !5937)
!5940 = !DILocation(line: 1768, column: 21, scope: !5937)
!5941 = !DILocation(line: 1768, column: 19, scope: !5937)
!5942 = !DILocation(line: 1770, column: 8, scope: !5943)
!5943 = distinct !DILexicalBlock(scope: !5937, file: !3, line: 1770, column: 8)
!5944 = !DILocation(line: 1770, column: 23, scope: !5943)
!5945 = !DILocation(line: 1771, column: 8, scope: !5943)
!5946 = !DILocation(line: 1771, column: 11, scope: !5943)
!5947 = !DILocation(line: 1772, column: 8, scope: !5943)
!5948 = !DILocation(line: 1772, column: 11, scope: !5943)
!5949 = !DILocation(line: 1772, column: 21, scope: !5943)
!5950 = !DILocation(line: 1772, column: 19, scope: !5943)
!5951 = !DILocation(line: 1770, column: 8, scope: !5937)
!5952 = !DILocation(line: 1773, column: 16, scope: !5943)
!5953 = !DILocation(line: 1773, column: 14, scope: !5943)
!5954 = !DILocation(line: 1773, column: 6, scope: !5943)
!5955 = !DILocation(line: 1774, column: 2, scope: !5937)
!5956 = !DILocation(line: 1779, column: 4, scope: !5957)
!5957 = distinct !DILexicalBlock(scope: !5934, file: !3, line: 1778, column: 2)
!5958 = !DILocation(line: 1780, column: 23, scope: !5957)
!5959 = !DILocation(line: 1780, column: 4, scope: !5957)
!5960 = !DILocation(line: 1748, column: 3, scope: !5918)
!5961 = !DILocation(line: 1801, column: 7, scope: !5962)
!5962 = distinct !DILexicalBlock(scope: !5783, file: !3, line: 1801, column: 7)
!5963 = !DILocation(line: 1801, column: 18, scope: !5962)
!5964 = !DILocation(line: 1802, column: 7, scope: !5962)
!5965 = !DILocation(line: 1802, column: 10, scope: !5962)
!5966 = !DILocation(line: 1802, column: 36, scope: !5962)
!5967 = !DILocation(line: 1803, column: 7, scope: !5962)
!5968 = !DILocation(line: 1803, column: 10, scope: !5962)
!5969 = !DILocation(line: 1803, column: 36, scope: !5962)
!5970 = !DILocation(line: 1804, column: 7, scope: !5962)
!5971 = !DILocation(line: 1804, column: 11, scope: !5962)
!5972 = !DILocation(line: 1801, column: 7, scope: !5783)
!5973 = !DILocation(line: 1806, column: 11, scope: !5974)
!5974 = distinct !DILexicalBlock(scope: !5975, file: !3, line: 1806, column: 11)
!5975 = distinct !DILexicalBlock(scope: !5962, file: !3, line: 1805, column: 5)
!5976 = !DILocation(line: 1806, column: 11, scope: !5975)
!5977 = !DILocation(line: 1807, column: 2, scope: !5974)
!5978 = !DILocation(line: 1808, column: 24, scope: !5975)
!5979 = !DILocation(line: 1808, column: 22, scope: !5975)
!5980 = !DILocation(line: 1809, column: 5, scope: !5975)
!5981 = !DILocation(line: 1811, column: 10, scope: !5783)
!5982 = !DILocation(line: 1811, column: 3, scope: !5783)
!5983 = distinct !DISubprogram(name: "print_curr_reg_pressure", scope: !3, file: !3, line: 778, type: !2341, scopeLine: 779, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!5984 = !DILocalVariable(name: "i", scope: !5983, file: !3, line: 780, type: !865)
!5985 = !DILocation(line: 780, column: 7, scope: !5983)
!5986 = !DILocalVariable(name: "cl", scope: !5983, file: !3, line: 781, type: !783)
!5987 = !DILocation(line: 781, column: 18, scope: !5983)
!5988 = !DILocation(line: 783, column: 12, scope: !5983)
!5989 = !DILocation(line: 783, column: 3, scope: !5983)
!5990 = !DILocation(line: 784, column: 10, scope: !5991)
!5991 = distinct !DILexicalBlock(scope: !5983, file: !3, line: 784, column: 3)
!5992 = !DILocation(line: 784, column: 8, scope: !5991)
!5993 = !DILocation(line: 784, column: 15, scope: !5994)
!5994 = distinct !DILexicalBlock(scope: !5991, file: !3, line: 784, column: 3)
!5995 = !DILocation(line: 784, column: 19, scope: !5994)
!5996 = !DILocation(line: 784, column: 17, scope: !5994)
!5997 = !DILocation(line: 784, column: 3, scope: !5991)
!5998 = !DILocation(line: 786, column: 32, scope: !5999)
!5999 = distinct !DILexicalBlock(scope: !5994, file: !3, line: 785, column: 5)
!6000 = !DILocation(line: 786, column: 12, scope: !5999)
!6001 = !DILocation(line: 786, column: 10, scope: !5999)
!6002 = !DILocation(line: 787, column: 7, scope: !5999)
!6003 = !DILocation(line: 788, column: 16, scope: !5999)
!6004 = !DILocation(line: 788, column: 59, scope: !5999)
!6005 = !DILocation(line: 788, column: 43, scope: !5999)
!6006 = !DILocation(line: 789, column: 27, scope: !5999)
!6007 = !DILocation(line: 789, column: 9, scope: !5999)
!6008 = !DILocation(line: 790, column: 27, scope: !5999)
!6009 = !DILocation(line: 790, column: 9, scope: !5999)
!6010 = !DILocation(line: 790, column: 58, scope: !5999)
!6011 = !DILocation(line: 790, column: 33, scope: !5999)
!6012 = !DILocation(line: 790, column: 31, scope: !5999)
!6013 = !DILocation(line: 788, column: 7, scope: !5999)
!6014 = !DILocation(line: 791, column: 5, scope: !5999)
!6015 = !DILocation(line: 784, column: 46, scope: !5994)
!6016 = !DILocation(line: 784, column: 3, scope: !5994)
!6017 = distinct !{!6017, !5997, !6018}
!6018 = !DILocation(line: 791, column: 5, scope: !5991)
!6019 = !DILocation(line: 792, column: 12, scope: !5983)
!6020 = !DILocation(line: 792, column: 3, scope: !5983)
!6021 = !DILocation(line: 793, column: 1, scope: !5983)
!6022 = distinct !DISubprogram(name: "early_queue_to_ready", scope: !3, file: !3, line: 2137, type: !6023, scopeLine: 2138, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!6023 = !DISubroutineType(types: !6024)
!6024 = !{!865, !2109, !2459}
!6025 = !DILocalVariable(name: "state", arg: 1, scope: !6022, file: !3, line: 2137, type: !2109)
!6026 = !DILocation(line: 2137, column: 31, scope: !6022)
!6027 = !DILocalVariable(name: "ready", arg: 2, scope: !6022, file: !3, line: 2137, type: !2459)
!6028 = !DILocation(line: 2137, column: 57, scope: !6022)
!6029 = !DILocalVariable(name: "insn", scope: !6022, file: !3, line: 2139, type: !867)
!6030 = !DILocation(line: 2139, column: 7, scope: !6022)
!6031 = !DILocalVariable(name: "link", scope: !6022, file: !3, line: 2140, type: !867)
!6032 = !DILocation(line: 2140, column: 7, scope: !6022)
!6033 = !DILocalVariable(name: "next_link", scope: !6022, file: !3, line: 2141, type: !867)
!6034 = !DILocation(line: 2141, column: 7, scope: !6022)
!6035 = !DILocalVariable(name: "prev_link", scope: !6022, file: !3, line: 2142, type: !867)
!6036 = !DILocation(line: 2142, column: 7, scope: !6022)
!6037 = !DILocalVariable(name: "move_to_ready", scope: !6022, file: !3, line: 2143, type: !1100)
!6038 = !DILocation(line: 2143, column: 8, scope: !6022)
!6039 = !DILocalVariable(name: "cost", scope: !6022, file: !3, line: 2144, type: !865)
!6040 = !DILocation(line: 2144, column: 7, scope: !6022)
!6041 = !DILocalVariable(name: "temp_state", scope: !6022, file: !3, line: 2145, type: !2109)
!6042 = !DILocation(line: 2145, column: 11, scope: !6022)
!6043 = !DILocation(line: 2145, column: 24, scope: !6022)
!6044 = !DILocalVariable(name: "stalls", scope: !6022, file: !3, line: 2146, type: !865)
!6045 = !DILocation(line: 2146, column: 7, scope: !6022)
!6046 = !DILocalVariable(name: "insns_removed", scope: !6022, file: !3, line: 2147, type: !865)
!6047 = !DILocation(line: 2147, column: 7, scope: !6022)
!6048 = !DILocation(line: 2163, column: 9, scope: !6049)
!6049 = distinct !DILexicalBlock(scope: !6022, file: !3, line: 2163, column: 7)
!6050 = !DILocation(line: 2163, column: 7, scope: !6022)
!6051 = !DILocation(line: 2164, column: 5, scope: !6049)
!6052 = !DILocation(line: 2166, column: 15, scope: !6053)
!6053 = distinct !DILexicalBlock(scope: !6022, file: !3, line: 2166, column: 3)
!6054 = !DILocation(line: 2166, column: 8, scope: !6053)
!6055 = !DILocation(line: 2166, column: 20, scope: !6056)
!6056 = distinct !DILexicalBlock(scope: !6053, file: !3, line: 2166, column: 3)
!6057 = !DILocation(line: 2166, column: 30, scope: !6056)
!6058 = !DILocation(line: 2166, column: 27, scope: !6056)
!6059 = !DILocation(line: 2166, column: 3, scope: !6053)
!6060 = !DILocation(line: 2168, column: 19, scope: !6061)
!6061 = distinct !DILexicalBlock(scope: !6062, file: !3, line: 2168, column: 11)
!6062 = distinct !DILexicalBlock(scope: !6056, file: !3, line: 2167, column: 5)
!6063 = !DILocation(line: 2168, column: 30, scope: !6061)
!6064 = !DILocation(line: 2168, column: 17, scope: !6061)
!6065 = !DILocation(line: 2168, column: 11, scope: !6062)
!6066 = !DILocation(line: 2170, column: 8, scope: !6067)
!6067 = distinct !DILexicalBlock(scope: !6068, file: !3, line: 2170, column: 8)
!6068 = distinct !DILexicalBlock(scope: !6061, file: !3, line: 2169, column: 2)
!6069 = !DILocation(line: 2170, column: 22, scope: !6067)
!6070 = !DILocation(line: 2170, column: 8, scope: !6068)
!6071 = !DILocation(line: 2171, column: 15, scope: !6067)
!6072 = !DILocation(line: 2171, column: 57, scope: !6067)
!6073 = !DILocation(line: 2171, column: 64, scope: !6067)
!6074 = !DILocation(line: 2171, column: 6, scope: !6067)
!6075 = !DILocation(line: 2173, column: 14, scope: !6068)
!6076 = !DILocation(line: 2174, column: 4, scope: !6068)
!6077 = !DILocation(line: 2174, column: 11, scope: !6068)
!6078 = !DILocation(line: 2176, column: 20, scope: !6079)
!6079 = distinct !DILexicalBlock(scope: !6068, file: !3, line: 2175, column: 6)
!6080 = !DILocation(line: 2176, column: 18, scope: !6079)
!6081 = !DILocation(line: 2177, column: 15, scope: !6079)
!6082 = !DILocation(line: 2177, column: 13, scope: !6079)
!6083 = !DILocation(line: 2178, column: 12, scope: !6084)
!6084 = distinct !DILexicalBlock(scope: !6079, file: !3, line: 2178, column: 12)
!6085 = !DILocation(line: 2178, column: 17, scope: !6084)
!6086 = !DILocation(line: 2178, column: 20, scope: !6084)
!6087 = !DILocation(line: 2178, column: 34, scope: !6084)
!6088 = !DILocation(line: 2178, column: 12, scope: !6079)
!6089 = !DILocation(line: 2179, column: 21, scope: !6084)
!6090 = !DILocation(line: 2179, column: 33, scope: !6084)
!6091 = !DILocation(line: 2179, column: 3, scope: !6084)
!6092 = !DILocation(line: 2181, column: 16, scope: !6079)
!6093 = !DILocation(line: 2181, column: 28, scope: !6079)
!6094 = !DILocation(line: 2181, column: 35, scope: !6079)
!6095 = !DILocation(line: 2181, column: 8, scope: !6079)
!6096 = !DILocation(line: 2182, column: 28, scope: !6097)
!6097 = distinct !DILexicalBlock(scope: !6079, file: !3, line: 2182, column: 12)
!6098 = !DILocation(line: 2182, column: 12, scope: !6097)
!6099 = !DILocation(line: 2182, column: 34, scope: !6097)
!6100 = !DILocation(line: 2182, column: 12, scope: !6079)
!6101 = !DILocation(line: 2185, column: 8, scope: !6097)
!6102 = !DILocation(line: 2185, column: 3, scope: !6097)
!6103 = !DILocation(line: 2187, column: 28, scope: !6097)
!6104 = !DILocation(line: 2187, column: 40, scope: !6097)
!6105 = !DILocation(line: 2187, column: 10, scope: !6097)
!6106 = !DILocation(line: 2187, column: 8, scope: !6097)
!6107 = !DILocation(line: 2189, column: 12, scope: !6108)
!6108 = distinct !DILexicalBlock(scope: !6079, file: !3, line: 2189, column: 12)
!6109 = !DILocation(line: 2189, column: 26, scope: !6108)
!6110 = !DILocation(line: 2189, column: 12, scope: !6079)
!6111 = !DILocation(line: 2190, column: 12, scope: !6108)
!6112 = !DILocation(line: 2190, column: 50, scope: !6108)
!6113 = !DILocation(line: 2190, column: 3, scope: !6108)
!6114 = !DILocation(line: 2192, column: 22, scope: !6079)
!6115 = !DILocation(line: 2193, column: 12, scope: !6116)
!6116 = distinct !DILexicalBlock(scope: !6079, file: !3, line: 2193, column: 12)
!6117 = !DILocation(line: 2193, column: 17, scope: !6116)
!6118 = !DILocation(line: 2193, column: 12, scope: !6079)
!6119 = !DILocation(line: 2195, column: 49, scope: !6120)
!6120 = distinct !DILexicalBlock(scope: !6116, file: !3, line: 2194, column: 3)
!6121 = !DILocation(line: 2195, column: 21, scope: !6120)
!6122 = !DILocation(line: 2195, column: 19, scope: !6120)
!6123 = !DILocation(line: 2196, column: 9, scope: !6124)
!6124 = distinct !DILexicalBlock(scope: !6120, file: !3, line: 2196, column: 9)
!6125 = !DILocation(line: 2196, column: 23, scope: !6124)
!6126 = !DILocation(line: 2196, column: 9, scope: !6120)
!6127 = !DILocation(line: 2199, column: 16, scope: !6128)
!6128 = distinct !DILexicalBlock(scope: !6124, file: !3, line: 2197, column: 7)
!6129 = !DILocation(line: 2200, column: 20, scope: !6128)
!6130 = !DILocation(line: 2200, column: 27, scope: !6128)
!6131 = !DILocation(line: 2200, column: 9, scope: !6128)
!6132 = !DILocation(line: 2202, column: 13, scope: !6133)
!6133 = distinct !DILexicalBlock(scope: !6128, file: !3, line: 2202, column: 13)
!6134 = !DILocation(line: 2202, column: 13, scope: !6128)
!6135 = !DILocation(line: 2203, column: 26, scope: !6133)
!6136 = !DILocation(line: 2203, column: 4, scope: !6133)
!6137 = !DILocation(line: 2203, column: 24, scope: !6133)
!6138 = !DILocation(line: 2205, column: 47, scope: !6133)
!6139 = !DILocation(line: 2205, column: 4, scope: !6133)
!6140 = !DILocation(line: 2205, column: 15, scope: !6133)
!6141 = !DILocation(line: 2205, column: 45, scope: !6133)
!6142 = !DILocation(line: 2207, column: 30, scope: !6128)
!6143 = !DILocation(line: 2207, column: 9, scope: !6128)
!6144 = !DILocation(line: 2209, column: 13, scope: !6145)
!6145 = distinct !DILexicalBlock(scope: !6128, file: !3, line: 2209, column: 13)
!6146 = !DILocation(line: 2209, column: 27, scope: !6145)
!6147 = !DILocation(line: 2209, column: 13, scope: !6128)
!6148 = !DILocation(line: 2210, column: 13, scope: !6145)
!6149 = !DILocation(line: 2211, column: 8, scope: !6145)
!6150 = !DILocation(line: 2211, column: 28, scope: !6145)
!6151 = !DILocation(line: 2211, column: 41, scope: !6145)
!6152 = !DILocation(line: 2211, column: 6, scope: !6145)
!6153 = !DILocation(line: 2210, column: 4, scope: !6145)
!6154 = !DILocation(line: 2213, column: 22, scope: !6128)
!6155 = !DILocation(line: 2214, column: 13, scope: !6156)
!6156 = distinct !DILexicalBlock(scope: !6128, file: !3, line: 2214, column: 13)
!6157 = !DILocation(line: 2214, column: 30, scope: !6156)
!6158 = !DILocation(line: 2214, column: 27, scope: !6156)
!6159 = !DILocation(line: 2214, column: 13, scope: !6128)
!6160 = !DILocation(line: 2217, column: 11, scope: !6156)
!6161 = !DILocation(line: 2217, column: 4, scope: !6156)
!6162 = !DILocation(line: 2218, column: 7, scope: !6128)
!6163 = !DILocation(line: 2219, column: 3, scope: !6120)
!6164 = !DILocation(line: 2221, column: 12, scope: !6165)
!6165 = distinct !DILexicalBlock(scope: !6079, file: !3, line: 2221, column: 12)
!6166 = !DILocation(line: 2221, column: 26, scope: !6165)
!6167 = !DILocation(line: 2221, column: 12, scope: !6079)
!6168 = !DILocation(line: 2222, column: 15, scope: !6165)
!6169 = !DILocation(line: 2222, column: 13, scope: !6165)
!6170 = !DILocation(line: 2222, column: 3, scope: !6165)
!6171 = !DILocation(line: 2224, column: 15, scope: !6079)
!6172 = !DILocation(line: 2224, column: 13, scope: !6079)
!6173 = distinct !{!6173, !6076, !6174}
!6174 = !DILocation(line: 2225, column: 6, scope: !6068)
!6175 = !DILocation(line: 2226, column: 2, scope: !6068)
!6176 = !DILocation(line: 2228, column: 5, scope: !6062)
!6177 = !DILocation(line: 2166, column: 58, scope: !6056)
!6178 = !DILocation(line: 2166, column: 3, scope: !6056)
!6179 = distinct !{!6179, !6059, !6180}
!6180 = !DILocation(line: 2228, column: 5, scope: !6053)
!6181 = !DILocation(line: 2230, column: 10, scope: !6022)
!6182 = !DILocation(line: 2230, column: 3, scope: !6022)
!6183 = !DILocation(line: 2231, column: 1, scope: !6022)
!6184 = distinct !DISubprogram(name: "choose_ready", scope: !3, file: !3, line: 2607, type: !6185, scopeLine: 2608, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!6185 = !DISubroutineType(types: !6186)
!6186 = !{!865, !2459, !2098}
!6187 = !DILocalVariable(name: "ready", arg: 1, scope: !6184, file: !3, line: 2607, type: !2459)
!6188 = !DILocation(line: 2607, column: 34, scope: !6184)
!6189 = !DILocalVariable(name: "insn_ptr", arg: 2, scope: !6184, file: !3, line: 2607, type: !2098)
!6190 = !DILocation(line: 2607, column: 46, scope: !6184)
!6191 = !DILocalVariable(name: "lookahead", scope: !6184, file: !3, line: 2609, type: !865)
!6192 = !DILocation(line: 2609, column: 7, scope: !6184)
!6193 = !DILocation(line: 2611, column: 7, scope: !6194)
!6194 = distinct !DILexicalBlock(scope: !6184, file: !3, line: 2611, column: 7)
!6195 = !DILocation(line: 2611, column: 28, scope: !6194)
!6196 = !DILocation(line: 2611, column: 7, scope: !6184)
!6197 = !DILocalVariable(name: "insn", scope: !6198, file: !3, line: 2613, type: !867)
!6198 = distinct !DILexicalBlock(scope: !6194, file: !3, line: 2612, column: 5)
!6199 = !DILocation(line: 2613, column: 11, scope: !6198)
!6200 = !DILocation(line: 2615, column: 33, scope: !6198)
!6201 = !DILocation(line: 2615, column: 14, scope: !6198)
!6202 = !DILocation(line: 2615, column: 12, scope: !6198)
!6203 = !DILocation(line: 2617, column: 11, scope: !6204)
!6204 = distinct !DILexicalBlock(scope: !6198, file: !3, line: 2617, column: 11)
!6205 = !DILocation(line: 2617, column: 30, scope: !6204)
!6206 = !DILocation(line: 2617, column: 11, scope: !6198)
!6207 = !DILocation(line: 2620, column: 23, scope: !6208)
!6208 = distinct !DILexicalBlock(scope: !6204, file: !3, line: 2619, column: 2)
!6209 = !DILocation(line: 2620, column: 4, scope: !6208)
!6210 = !DILocation(line: 2621, column: 16, scope: !6208)
!6211 = !DILocation(line: 2621, column: 5, scope: !6208)
!6212 = !DILocation(line: 2621, column: 14, scope: !6208)
!6213 = !DILocation(line: 2622, column: 4, scope: !6208)
!6214 = !DILocation(line: 2626, column: 7, scope: !6198)
!6215 = !DILocation(line: 2629, column: 13, scope: !6184)
!6216 = !DILocation(line: 2631, column: 21, scope: !6217)
!6217 = distinct !DILexicalBlock(scope: !6184, file: !3, line: 2631, column: 7)
!6218 = !DILocation(line: 2631, column: 7, scope: !6217)
!6219 = !DILocation(line: 2631, column: 7, scope: !6184)
!6220 = !DILocation(line: 2632, column: 31, scope: !6217)
!6221 = !DILocation(line: 2632, column: 17, scope: !6217)
!6222 = !DILocation(line: 2632, column: 15, scope: !6217)
!6223 = !DILocation(line: 2632, column: 5, scope: !6217)
!6224 = !DILocation(line: 2633, column: 7, scope: !6225)
!6225 = distinct !DILexicalBlock(scope: !6184, file: !3, line: 2633, column: 7)
!6226 = !DILocation(line: 2633, column: 17, scope: !6225)
!6227 = !DILocation(line: 2633, column: 22, scope: !6225)
!6228 = !DILocation(line: 2633, column: 25, scope: !6225)
!6229 = !DILocation(line: 2634, column: 7, scope: !6225)
!6230 = !DILocation(line: 2634, column: 10, scope: !6225)
!6231 = !DILocation(line: 2633, column: 7, scope: !6184)
!6232 = !DILocation(line: 2636, column: 39, scope: !6233)
!6233 = distinct !DILexicalBlock(scope: !6225, file: !3, line: 2635, column: 5)
!6234 = !DILocation(line: 2636, column: 19, scope: !6233)
!6235 = !DILocation(line: 2636, column: 8, scope: !6233)
!6236 = !DILocation(line: 2636, column: 17, scope: !6233)
!6237 = !DILocation(line: 2637, column: 7, scope: !6233)
!6238 = !DILocalVariable(name: "index", scope: !6239, file: !3, line: 2642, type: !865)
!6239 = distinct !DILexicalBlock(scope: !6225, file: !3, line: 2640, column: 5)
!6240 = !DILocation(line: 2642, column: 11, scope: !6239)
!6241 = !DILocalVariable(name: "i", scope: !6239, file: !3, line: 2642, type: !865)
!6242 = !DILocation(line: 2642, column: 22, scope: !6239)
!6243 = !DILocalVariable(name: "n", scope: !6239, file: !3, line: 2642, type: !865)
!6244 = !DILocation(line: 2642, column: 25, scope: !6239)
!6245 = !DILocalVariable(name: "insn", scope: !6239, file: !3, line: 2643, type: !867)
!6246 = !DILocation(line: 2643, column: 11, scope: !6239)
!6247 = !DILocalVariable(name: "try_data", scope: !6239, file: !3, line: 2644, type: !865)
!6248 = !DILocation(line: 2644, column: 11, scope: !6239)
!6249 = !DILocalVariable(name: "try_control", scope: !6239, file: !3, line: 2644, type: !865)
!6250 = !DILocation(line: 2644, column: 25, scope: !6239)
!6251 = !DILocalVariable(name: "ts", scope: !6239, file: !3, line: 2645, type: !2099)
!6252 = !DILocation(line: 2645, column: 12, scope: !6239)
!6253 = !DILocation(line: 2647, column: 29, scope: !6239)
!6254 = !DILocation(line: 2647, column: 14, scope: !6239)
!6255 = !DILocation(line: 2647, column: 12, scope: !6239)
!6256 = !DILocation(line: 2648, column: 11, scope: !6257)
!6257 = distinct !DILexicalBlock(scope: !6239, file: !3, line: 2648, column: 11)
!6258 = !DILocation(line: 2648, column: 28, scope: !6257)
!6259 = !DILocation(line: 2648, column: 11, scope: !6239)
!6260 = !DILocation(line: 2650, column: 36, scope: !6261)
!6261 = distinct !DILexicalBlock(scope: !6257, file: !3, line: 2649, column: 2)
!6262 = !DILocation(line: 2650, column: 16, scope: !6261)
!6263 = !DILocation(line: 2650, column: 5, scope: !6261)
!6264 = !DILocation(line: 2650, column: 14, scope: !6261)
!6265 = !DILocation(line: 2651, column: 4, scope: !6261)
!6266 = !DILocation(line: 2654, column: 11, scope: !6267)
!6267 = distinct !DILexicalBlock(scope: !6239, file: !3, line: 2654, column: 11)
!6268 = !DILocation(line: 2655, column: 4, scope: !6267)
!6269 = !DILocation(line: 2655, column: 7, scope: !6267)
!6270 = !DILocation(line: 2655, column: 18, scope: !6267)
!6271 = !DILocation(line: 2655, column: 24, scope: !6267)
!6272 = !DILocation(line: 2654, column: 11, scope: !6239)
!6273 = !DILocation(line: 2658, column: 11, scope: !6274)
!6274 = distinct !DILexicalBlock(scope: !6275, file: !3, line: 2658, column: 4)
!6275 = distinct !DILexicalBlock(scope: !6267, file: !3, line: 2657, column: 2)
!6276 = !DILocation(line: 2658, column: 20, scope: !6274)
!6277 = !DILocation(line: 2658, column: 27, scope: !6274)
!6278 = !DILocation(line: 2658, column: 18, scope: !6274)
!6279 = !DILocation(line: 2658, column: 9, scope: !6274)
!6280 = !DILocation(line: 2658, column: 36, scope: !6281)
!6281 = distinct !DILexicalBlock(scope: !6274, file: !3, line: 2658, column: 4)
!6282 = !DILocation(line: 2658, column: 40, scope: !6281)
!6283 = !DILocation(line: 2658, column: 38, scope: !6281)
!6284 = !DILocation(line: 2658, column: 4, scope: !6274)
!6285 = !DILocalVariable(name: "x", scope: !6286, file: !3, line: 2660, type: !867)
!6286 = distinct !DILexicalBlock(scope: !6281, file: !3, line: 2659, column: 6)
!6287 = !DILocation(line: 2660, column: 12, scope: !6286)
!6288 = !DILocalVariable(name: "s", scope: !6286, file: !3, line: 2661, type: !2099)
!6289 = !DILocation(line: 2661, column: 13, scope: !6286)
!6290 = !DILocation(line: 2663, column: 27, scope: !6286)
!6291 = !DILocation(line: 2663, column: 34, scope: !6286)
!6292 = !DILocation(line: 2663, column: 12, scope: !6286)
!6293 = !DILocation(line: 2663, column: 10, scope: !6286)
!6294 = !DILocation(line: 2664, column: 12, scope: !6286)
!6295 = !DILocation(line: 2664, column: 10, scope: !6286)
!6296 = !DILocation(line: 2666, column: 12, scope: !6297)
!6297 = distinct !DILexicalBlock(scope: !6286, file: !3, line: 2666, column: 12)
!6298 = !DILocation(line: 2666, column: 23, scope: !6297)
!6299 = !DILocation(line: 2666, column: 29, scope: !6297)
!6300 = !DILocation(line: 2667, column: 5, scope: !6297)
!6301 = !DILocation(line: 2667, column: 10, scope: !6297)
!6302 = !DILocation(line: 2667, column: 12, scope: !6297)
!6303 = !DILocation(line: 2666, column: 12, scope: !6286)
!6304 = !DILocation(line: 2669, column: 14, scope: !6305)
!6305 = distinct !DILexicalBlock(scope: !6297, file: !3, line: 2668, column: 3)
!6306 = !DILocation(line: 2670, column: 11, scope: !6307)
!6307 = distinct !DILexicalBlock(scope: !6305, file: !3, line: 2670, column: 9)
!6308 = !DILocation(line: 2670, column: 22, scope: !6307)
!6309 = !DILocation(line: 2670, column: 28, scope: !6307)
!6310 = !DILocation(line: 2671, column: 9, scope: !6307)
!6311 = !DILocation(line: 2671, column: 13, scope: !6307)
!6312 = !DILocation(line: 2670, column: 9, scope: !6305)
!6313 = !DILocation(line: 2672, column: 7, scope: !6307)
!6314 = !DILocation(line: 2673, column: 3, scope: !6305)
!6315 = !DILocation(line: 2675, column: 12, scope: !6316)
!6316 = distinct !DILexicalBlock(scope: !6286, file: !3, line: 2675, column: 12)
!6317 = !DILocation(line: 2675, column: 23, scope: !6316)
!6318 = !DILocation(line: 2675, column: 29, scope: !6316)
!6319 = !DILocation(line: 2676, column: 5, scope: !6316)
!6320 = !DILocation(line: 2676, column: 10, scope: !6316)
!6321 = !DILocation(line: 2676, column: 12, scope: !6316)
!6322 = !DILocation(line: 2675, column: 12, scope: !6286)
!6323 = !DILocation(line: 2678, column: 17, scope: !6324)
!6324 = distinct !DILexicalBlock(scope: !6316, file: !3, line: 2677, column: 3)
!6325 = !DILocation(line: 2679, column: 11, scope: !6326)
!6326 = distinct !DILexicalBlock(scope: !6324, file: !3, line: 2679, column: 9)
!6327 = !DILocation(line: 2679, column: 22, scope: !6326)
!6328 = !DILocation(line: 2679, column: 28, scope: !6326)
!6329 = !DILocation(line: 2679, column: 52, scope: !6326)
!6330 = !DILocation(line: 2679, column: 56, scope: !6326)
!6331 = !DILocation(line: 2679, column: 9, scope: !6324)
!6332 = !DILocation(line: 2680, column: 7, scope: !6326)
!6333 = !DILocation(line: 2681, column: 3, scope: !6324)
!6334 = !DILocation(line: 2682, column: 6, scope: !6286)
!6335 = !DILocation(line: 2658, column: 44, scope: !6281)
!6336 = !DILocation(line: 2658, column: 4, scope: !6281)
!6337 = distinct !{!6337, !6284, !6338}
!6338 = !DILocation(line: 2682, column: 6, scope: !6274)
!6339 = !DILocation(line: 2683, column: 2, scope: !6275)
!6340 = !DILocation(line: 2685, column: 12, scope: !6239)
!6341 = !DILocation(line: 2685, column: 10, scope: !6239)
!6342 = !DILocation(line: 2686, column: 12, scope: !6343)
!6343 = distinct !DILexicalBlock(scope: !6239, file: !3, line: 2686, column: 11)
!6344 = !DILocation(line: 2686, column: 15, scope: !6343)
!6345 = !DILocation(line: 2687, column: 4, scope: !6343)
!6346 = !DILocation(line: 2687, column: 11, scope: !6343)
!6347 = !DILocation(line: 2687, column: 20, scope: !6343)
!6348 = !DILocation(line: 2687, column: 24, scope: !6343)
!6349 = !DILocation(line: 2687, column: 27, scope: !6343)
!6350 = !DILocation(line: 2688, column: 9, scope: !6343)
!6351 = !DILocation(line: 2688, column: 14, scope: !6343)
!6352 = !DILocation(line: 2688, column: 26, scope: !6343)
!6353 = !DILocation(line: 2688, column: 30, scope: !6343)
!6354 = !DILocation(line: 2688, column: 33, scope: !6343)
!6355 = !DILocation(line: 2689, column: 8, scope: !6343)
!6356 = !DILocation(line: 2689, column: 26, scope: !6343)
!6357 = !DILocation(line: 2689, column: 12, scope: !6343)
!6358 = !DILocation(line: 2690, column: 5, scope: !6343)
!6359 = !DILocation(line: 2691, column: 6, scope: !6343)
!6360 = !DILocation(line: 2691, column: 54, scope: !6343)
!6361 = !DILocation(line: 2690, column: 9, scope: !6343)
!6362 = !DILocation(line: 2686, column: 11, scope: !6239)
!6363 = !DILocation(line: 2695, column: 24, scope: !6364)
!6364 = distinct !DILexicalBlock(scope: !6343, file: !3, line: 2694, column: 2)
!6365 = !DILocation(line: 2695, column: 4, scope: !6364)
!6366 = !DILocation(line: 2696, column: 4, scope: !6364)
!6367 = !DILocation(line: 2699, column: 7, scope: !6239)
!6368 = !DILocation(line: 2699, column: 20, scope: !6239)
!6369 = !DILocation(line: 2701, column: 14, scope: !6370)
!6370 = distinct !DILexicalBlock(scope: !6239, file: !3, line: 2701, column: 7)
!6371 = !DILocation(line: 2701, column: 12, scope: !6370)
!6372 = !DILocation(line: 2701, column: 19, scope: !6373)
!6373 = distinct !DILexicalBlock(scope: !6370, file: !3, line: 2701, column: 7)
!6374 = !DILocation(line: 2701, column: 23, scope: !6373)
!6375 = !DILocation(line: 2701, column: 30, scope: !6373)
!6376 = !DILocation(line: 2701, column: 21, scope: !6373)
!6377 = !DILocation(line: 2701, column: 7, scope: !6370)
!6378 = !DILocation(line: 2703, column: 26, scope: !6379)
!6379 = distinct !DILexicalBlock(scope: !6373, file: !3, line: 2702, column: 2)
!6380 = !DILocation(line: 2703, column: 33, scope: !6379)
!6381 = !DILocation(line: 2703, column: 11, scope: !6379)
!6382 = !DILocation(line: 2703, column: 9, scope: !6379)
!6383 = !DILocation(line: 2706, column: 11, scope: !6379)
!6384 = !DILocation(line: 2706, column: 20, scope: !6379)
!6385 = !DILocation(line: 2706, column: 24, scope: !6379)
!6386 = !DILocation(line: 2706, column: 41, scope: !6379)
!6387 = !DILocation(line: 2707, column: 16, scope: !6379)
!6388 = !DILocation(line: 2707, column: 21, scope: !6379)
!6389 = !DILocation(line: 2707, column: 33, scope: !6379)
!6390 = !DILocation(line: 2707, column: 37, scope: !6379)
!6391 = !DILocation(line: 2707, column: 54, scope: !6379)
!6392 = !DILocation(line: 0, scope: !6379)
!6393 = !DILocation(line: 2706, column: 8, scope: !6379)
!6394 = !DILocation(line: 2705, column: 4, scope: !6379)
!6395 = !DILocation(line: 2705, column: 15, scope: !6379)
!6396 = !DILocation(line: 2706, column: 6, scope: !6379)
!6397 = !DILocation(line: 2708, column: 2, scope: !6379)
!6398 = !DILocation(line: 2701, column: 40, scope: !6373)
!6399 = !DILocation(line: 2701, column: 7, scope: !6373)
!6400 = distinct !{!6400, !6377, !6401}
!6401 = !DILocation(line: 2708, column: 2, scope: !6370)
!6402 = !DILocation(line: 2711, column: 14, scope: !6403)
!6403 = distinct !DILexicalBlock(scope: !6239, file: !3, line: 2711, column: 7)
!6404 = !DILocation(line: 2711, column: 12, scope: !6403)
!6405 = !DILocation(line: 2711, column: 19, scope: !6406)
!6406 = distinct !DILexicalBlock(scope: !6403, file: !3, line: 2711, column: 7)
!6407 = !DILocation(line: 2711, column: 23, scope: !6406)
!6408 = !DILocation(line: 2711, column: 30, scope: !6406)
!6409 = !DILocation(line: 2711, column: 21, scope: !6406)
!6410 = !DILocation(line: 2711, column: 7, scope: !6403)
!6411 = !DILocation(line: 2712, column: 7, scope: !6412)
!6412 = distinct !DILexicalBlock(scope: !6406, file: !3, line: 2712, column: 6)
!6413 = !DILocation(line: 2712, column: 17, scope: !6412)
!6414 = !DILocation(line: 2712, column: 6, scope: !6406)
!6415 = !DILocation(line: 2714, column: 28, scope: !6416)
!6416 = distinct !DILexicalBlock(scope: !6412, file: !3, line: 2713, column: 4)
!6417 = !DILocation(line: 2714, column: 35, scope: !6416)
!6418 = !DILocation(line: 2714, column: 13, scope: !6416)
!6419 = !DILocation(line: 2714, column: 11, scope: !6416)
!6420 = !DILocation(line: 2728, column: 4, scope: !6416)
!6421 = !DILocation(line: 2728, column: 21, scope: !6416)
!6422 = !DILocation(line: 2729, column: 4, scope: !6416)
!6423 = !DILocation(line: 2729, column: 22, scope: !6416)
!6424 = !DILocation(line: 2729, column: 8, scope: !6416)
!6425 = !DILocation(line: 2730, column: 8, scope: !6416)
!6426 = !DILocation(line: 2730, column: 26, scope: !6416)
!6427 = !DILocation(line: 2731, column: 9, scope: !6416)
!6428 = !DILocation(line: 2730, column: 12, scope: !6416)
!6429 = !DILocation(line: 2730, column: 11, scope: !6416)
!6430 = !DILocation(line: 0, scope: !6416)
!6431 = !DILocation(line: 2726, column: 10, scope: !6416)
!6432 = !DILocation(line: 2725, column: 6, scope: !6416)
!6433 = !DILocation(line: 2725, column: 17, scope: !6416)
!6434 = !DILocation(line: 2726, column: 8, scope: !6416)
!6435 = !DILocation(line: 2732, column: 4, scope: !6416)
!6436 = !DILocation(line: 2712, column: 18, scope: !6412)
!6437 = !DILocation(line: 2711, column: 40, scope: !6406)
!6438 = !DILocation(line: 2711, column: 7, scope: !6406)
!6439 = distinct !{!6439, !6410, !6440}
!6440 = !DILocation(line: 2732, column: 4, scope: !6403)
!6441 = !DILocation(line: 2734, column: 22, scope: !6442)
!6442 = distinct !DILexicalBlock(scope: !6239, file: !3, line: 2734, column: 11)
!6443 = !DILocation(line: 2734, column: 32, scope: !6442)
!6444 = !DILocation(line: 2734, column: 11, scope: !6442)
!6445 = !DILocation(line: 2734, column: 52, scope: !6442)
!6446 = !DILocation(line: 2734, column: 11, scope: !6239)
!6447 = !DILocation(line: 2736, column: 36, scope: !6448)
!6448 = distinct !DILexicalBlock(scope: !6442, file: !3, line: 2735, column: 2)
!6449 = !DILocation(line: 2736, column: 16, scope: !6448)
!6450 = !DILocation(line: 2736, column: 5, scope: !6448)
!6451 = !DILocation(line: 2736, column: 14, scope: !6448)
!6452 = !DILocation(line: 2737, column: 8, scope: !6453)
!6453 = distinct !DILexicalBlock(scope: !6448, file: !3, line: 2737, column: 8)
!6454 = !DILocation(line: 2737, column: 22, scope: !6453)
!6455 = !DILocation(line: 2737, column: 8, scope: !6448)
!6456 = !DILocation(line: 2738, column: 15, scope: !6453)
!6457 = !DILocation(line: 2739, column: 24, scope: !6453)
!6458 = !DILocation(line: 2739, column: 44, scope: !6453)
!6459 = !DILocation(line: 2739, column: 58, scope: !6453)
!6460 = !DILocation(line: 2739, column: 57, scope: !6453)
!6461 = !DILocation(line: 2739, column: 22, scope: !6453)
!6462 = !DILocation(line: 2738, column: 6, scope: !6453)
!6463 = !DILocation(line: 2740, column: 4, scope: !6448)
!6464 = !DILocation(line: 2744, column: 8, scope: !6465)
!6465 = distinct !DILexicalBlock(scope: !6466, file: !3, line: 2744, column: 8)
!6466 = distinct !DILexicalBlock(scope: !6442, file: !3, line: 2743, column: 2)
!6467 = !DILocation(line: 2744, column: 22, scope: !6465)
!6468 = !DILocation(line: 2744, column: 8, scope: !6466)
!6469 = !DILocation(line: 2745, column: 15, scope: !6465)
!6470 = !DILocation(line: 2746, column: 10, scope: !6465)
!6471 = !DILocation(line: 2746, column: 30, scope: !6465)
!6472 = !DILocation(line: 2747, column: 24, scope: !6465)
!6473 = !DILocation(line: 2747, column: 31, scope: !6465)
!6474 = !DILocation(line: 2747, column: 9, scope: !6465)
!6475 = !DILocation(line: 2746, column: 8, scope: !6465)
!6476 = !DILocation(line: 2745, column: 6, scope: !6465)
!6477 = !DILocation(line: 2749, column: 30, scope: !6466)
!6478 = !DILocation(line: 2749, column: 37, scope: !6466)
!6479 = !DILocation(line: 2749, column: 16, scope: !6466)
!6480 = !DILocation(line: 2749, column: 5, scope: !6466)
!6481 = !DILocation(line: 2749, column: 14, scope: !6466)
!6482 = !DILocation(line: 2750, column: 4, scope: !6466)
!6483 = !DILocation(line: 2753, column: 1, scope: !6184)
!6484 = distinct !DISubprogram(name: "ready_add", scope: !3, file: !3, line: 1387, type: !6485, scopeLine: 1388, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!6485 = !DISubroutineType(types: !6486)
!6486 = !{null, !2459, !867, !1100}
!6487 = !DILocalVariable(name: "ready", arg: 1, scope: !6484, file: !3, line: 1387, type: !2459)
!6488 = !DILocation(line: 1387, column: 31, scope: !6484)
!6489 = !DILocalVariable(name: "insn", arg: 2, scope: !6484, file: !3, line: 1387, type: !867)
!6490 = !DILocation(line: 1387, column: 42, scope: !6484)
!6491 = !DILocalVariable(name: "first_p", arg: 3, scope: !6484, file: !3, line: 1387, type: !1100)
!6492 = !DILocation(line: 1387, column: 53, scope: !6484)
!6493 = !DILocation(line: 1389, column: 8, scope: !6494)
!6494 = distinct !DILexicalBlock(scope: !6484, file: !3, line: 1389, column: 7)
!6495 = !DILocation(line: 1389, column: 7, scope: !6484)
!6496 = !DILocation(line: 1391, column: 11, scope: !6497)
!6497 = distinct !DILexicalBlock(scope: !6498, file: !3, line: 1391, column: 11)
!6498 = distinct !DILexicalBlock(scope: !6494, file: !3, line: 1390, column: 5)
!6499 = !DILocation(line: 1391, column: 18, scope: !6497)
!6500 = !DILocation(line: 1391, column: 27, scope: !6497)
!6501 = !DILocation(line: 1391, column: 34, scope: !6497)
!6502 = !DILocation(line: 1391, column: 24, scope: !6497)
!6503 = !DILocation(line: 1391, column: 11, scope: !6498)
!6504 = !DILocation(line: 1393, column: 13, scope: !6505)
!6505 = distinct !DILexicalBlock(scope: !6497, file: !3, line: 1392, column: 2)
!6506 = !DILocation(line: 1393, column: 20, scope: !6505)
!6507 = !DILocation(line: 1393, column: 26, scope: !6505)
!6508 = !DILocation(line: 1393, column: 33, scope: !6505)
!6509 = !DILocation(line: 1393, column: 24, scope: !6505)
!6510 = !DILocation(line: 1393, column: 42, scope: !6505)
!6511 = !DILocation(line: 1393, column: 49, scope: !6505)
!6512 = !DILocation(line: 1393, column: 40, scope: !6505)
!6513 = !DILocation(line: 1393, column: 4, scope: !6505)
!6514 = !DILocation(line: 1394, column: 21, scope: !6505)
!6515 = !DILocation(line: 1394, column: 6, scope: !6505)
!6516 = !DILocation(line: 1395, column: 6, scope: !6505)
!6517 = !DILocation(line: 1395, column: 13, scope: !6505)
!6518 = !DILocation(line: 1395, column: 21, scope: !6505)
!6519 = !DILocation(line: 1396, column: 19, scope: !6505)
!6520 = !DILocation(line: 1396, column: 26, scope: !6505)
!6521 = !DILocation(line: 1396, column: 33, scope: !6505)
!6522 = !DILocation(line: 1396, column: 4, scope: !6505)
!6523 = !DILocation(line: 1396, column: 11, scope: !6505)
!6524 = !DILocation(line: 1396, column: 17, scope: !6505)
!6525 = !DILocation(line: 1397, column: 2, scope: !6505)
!6526 = !DILocation(line: 1398, column: 51, scope: !6498)
!6527 = !DILocation(line: 1398, column: 7, scope: !6498)
!6528 = !DILocation(line: 1398, column: 14, scope: !6498)
!6529 = !DILocation(line: 1398, column: 18, scope: !6498)
!6530 = !DILocation(line: 1398, column: 25, scope: !6498)
!6531 = !DILocation(line: 1398, column: 33, scope: !6498)
!6532 = !DILocation(line: 1398, column: 40, scope: !6498)
!6533 = !DILocation(line: 1398, column: 31, scope: !6498)
!6534 = !DILocation(line: 1398, column: 49, scope: !6498)
!6535 = !DILocation(line: 1399, column: 5, scope: !6498)
!6536 = !DILocation(line: 1402, column: 11, scope: !6537)
!6537 = distinct !DILexicalBlock(scope: !6538, file: !3, line: 1402, column: 11)
!6538 = distinct !DILexicalBlock(scope: !6494, file: !3, line: 1401, column: 5)
!6539 = !DILocation(line: 1402, column: 18, scope: !6537)
!6540 = !DILocation(line: 1402, column: 27, scope: !6537)
!6541 = !DILocation(line: 1402, column: 34, scope: !6537)
!6542 = !DILocation(line: 1402, column: 41, scope: !6537)
!6543 = !DILocation(line: 1402, column: 24, scope: !6537)
!6544 = !DILocation(line: 1402, column: 11, scope: !6538)
!6545 = !DILocation(line: 1404, column: 8, scope: !6546)
!6546 = distinct !DILexicalBlock(scope: !6547, file: !3, line: 1404, column: 8)
!6547 = distinct !DILexicalBlock(scope: !6537, file: !3, line: 1403, column: 2)
!6548 = !DILocation(line: 1404, column: 15, scope: !6546)
!6549 = !DILocation(line: 1404, column: 8, scope: !6547)
!6550 = !DILocation(line: 1406, column: 15, scope: !6546)
!6551 = !DILocation(line: 1406, column: 22, scope: !6546)
!6552 = !DILocation(line: 1406, column: 28, scope: !6546)
!6553 = !DILocation(line: 1406, column: 35, scope: !6546)
!6554 = !DILocation(line: 1406, column: 26, scope: !6546)
!6555 = !DILocation(line: 1406, column: 44, scope: !6546)
!6556 = !DILocation(line: 1406, column: 51, scope: !6546)
!6557 = !DILocation(line: 1406, column: 42, scope: !6546)
!6558 = !DILocation(line: 1406, column: 59, scope: !6546)
!6559 = !DILocation(line: 1406, column: 6, scope: !6546)
!6560 = !DILocation(line: 1407, column: 23, scope: !6546)
!6561 = !DILocation(line: 1407, column: 8, scope: !6546)
!6562 = !DILocation(line: 1408, column: 8, scope: !6546)
!6563 = !DILocation(line: 1408, column: 15, scope: !6546)
!6564 = !DILocation(line: 1408, column: 23, scope: !6546)
!6565 = !DILocation(line: 1409, column: 19, scope: !6547)
!6566 = !DILocation(line: 1409, column: 26, scope: !6547)
!6567 = !DILocation(line: 1409, column: 33, scope: !6547)
!6568 = !DILocation(line: 1409, column: 4, scope: !6547)
!6569 = !DILocation(line: 1409, column: 11, scope: !6547)
!6570 = !DILocation(line: 1409, column: 17, scope: !6547)
!6571 = !DILocation(line: 1410, column: 2, scope: !6547)
!6572 = !DILocation(line: 1411, column: 38, scope: !6538)
!6573 = !DILocation(line: 1411, column: 7, scope: !6538)
!6574 = !DILocation(line: 1411, column: 14, scope: !6538)
!6575 = !DILocation(line: 1411, column: 21, scope: !6538)
!6576 = !DILocation(line: 1411, column: 28, scope: !6538)
!6577 = !DILocation(line: 1411, column: 18, scope: !6538)
!6578 = !DILocation(line: 1411, column: 36, scope: !6538)
!6579 = !DILocation(line: 1414, column: 3, scope: !6484)
!6580 = !DILocation(line: 1414, column: 10, scope: !6484)
!6581 = !DILocation(line: 1414, column: 17, scope: !6484)
!6582 = !DILocation(line: 1415, column: 7, scope: !6583)
!6583 = distinct !DILexicalBlock(scope: !6484, file: !3, line: 1415, column: 7)
!6584 = !DILocation(line: 1415, column: 7, scope: !6484)
!6585 = !DILocation(line: 1416, column: 5, scope: !6583)
!6586 = !DILocation(line: 1416, column: 12, scope: !6583)
!6587 = !DILocation(line: 1416, column: 19, scope: !6583)
!6588 = !DILocation(line: 1418, column: 3, scope: !6484)
!6589 = !DILocation(line: 1419, column: 3, scope: !6484)
!6590 = !DILocation(line: 1419, column: 22, scope: !6484)
!6591 = !DILocation(line: 1420, column: 1, scope: !6484)
!6592 = distinct !DISubprogram(name: "generate_recovery_code", scope: !3, file: !3, line: 3991, type: !2350, scopeLine: 3992, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!6593 = !DILocalVariable(name: "insn", arg: 1, scope: !6592, file: !3, line: 3991, type: !867)
!6594 = !DILocation(line: 3991, column: 29, scope: !6592)
!6595 = !DILocation(line: 3993, column: 7, scope: !6596)
!6596 = distinct !DILexicalBlock(scope: !6592, file: !3, line: 3993, column: 7)
!6597 = !DILocation(line: 3993, column: 24, scope: !6596)
!6598 = !DILocation(line: 3993, column: 7, scope: !6592)
!6599 = !DILocation(line: 3994, column: 30, scope: !6596)
!6600 = !DILocation(line: 3994, column: 5, scope: !6596)
!6601 = !DILocation(line: 3999, column: 7, scope: !6602)
!6602 = distinct !DILexicalBlock(scope: !6592, file: !3, line: 3999, column: 7)
!6603 = !DILocation(line: 3999, column: 24, scope: !6602)
!6604 = !DILocation(line: 3999, column: 7, scope: !6592)
!6605 = !DILocation(line: 4000, column: 31, scope: !6602)
!6606 = !DILocation(line: 4000, column: 5, scope: !6602)
!6607 = !DILocation(line: 4001, column: 1, scope: !6592)
!6608 = distinct !DISubprogram(name: "fix_inter_tick", scope: !3, file: !3, line: 3581, type: !2407, scopeLine: 3582, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!6609 = !DILocalVariable(name: "head", arg: 1, scope: !6608, file: !3, line: 3581, type: !867)
!6610 = !DILocation(line: 3581, column: 21, scope: !6608)
!6611 = !DILocalVariable(name: "tail", arg: 2, scope: !6608, file: !3, line: 3581, type: !867)
!6612 = !DILocation(line: 3581, column: 31, scope: !6608)
!6613 = !DILocalVariable(name: "processed", scope: !6608, file: !3, line: 3584, type: !6614)
!6614 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_head", file: !926, line: 84, baseType: !925)
!6615 = !DILocation(line: 3584, column: 15, scope: !6608)
!6616 = !DILocalVariable(name: "next_clock", scope: !6608, file: !3, line: 3589, type: !865)
!6617 = !DILocation(line: 3589, column: 7, scope: !6608)
!6618 = !DILocation(line: 3589, column: 20, scope: !6608)
!6619 = !DILocation(line: 3589, column: 30, scope: !6608)
!6620 = !DILocation(line: 3591, column: 3, scope: !6608)
!6621 = !DILocation(line: 3596, column: 15, scope: !6622)
!6622 = distinct !DILexicalBlock(scope: !6608, file: !3, line: 3596, column: 3)
!6623 = !DILocation(line: 3596, column: 13, scope: !6622)
!6624 = !DILocation(line: 3596, column: 8, scope: !6622)
!6625 = !DILocation(line: 3596, column: 33, scope: !6626)
!6626 = distinct !DILexicalBlock(scope: !6622, file: !3, line: 3596, column: 3)
!6627 = !DILocation(line: 3596, column: 41, scope: !6626)
!6628 = !DILocation(line: 3596, column: 38, scope: !6626)
!6629 = !DILocation(line: 3596, column: 3, scope: !6622)
!6630 = !DILocation(line: 3598, column: 11, scope: !6631)
!6631 = distinct !DILexicalBlock(scope: !6632, file: !3, line: 3598, column: 11)
!6632 = distinct !DILexicalBlock(scope: !6626, file: !3, line: 3597, column: 5)
!6633 = !DILocation(line: 3598, column: 11, scope: !6632)
!6634 = !DILocalVariable(name: "tick", scope: !6635, file: !3, line: 3600, type: !865)
!6635 = distinct !DILexicalBlock(scope: !6631, file: !3, line: 3599, column: 2)
!6636 = !DILocation(line: 3600, column: 8, scope: !6635)
!6637 = !DILocalVariable(name: "sd_it", scope: !6635, file: !3, line: 3601, type: !2467)
!6638 = !DILocation(line: 3601, column: 20, scope: !6635)
!6639 = !DILocalVariable(name: "dep", scope: !6635, file: !3, line: 3602, type: !2720)
!6640 = !DILocation(line: 3602, column: 10, scope: !6635)
!6641 = !DILocation(line: 3604, column: 11, scope: !6635)
!6642 = !DILocation(line: 3604, column: 9, scope: !6635)
!6643 = !DILocation(line: 3605, column: 4, scope: !6635)
!6644 = !DILocation(line: 3608, column: 35, scope: !6645)
!6645 = distinct !DILexicalBlock(scope: !6635, file: !3, line: 3608, column: 8)
!6646 = !DILocation(line: 3608, column: 9, scope: !6645)
!6647 = !DILocation(line: 3608, column: 8, scope: !6635)
!6648 = !DILocation(line: 3610, column: 36, scope: !6649)
!6649 = distinct !DILexicalBlock(scope: !6645, file: !3, line: 3609, column: 6)
!6650 = !DILocation(line: 3610, column: 8, scope: !6649)
!6651 = !DILocation(line: 3611, column: 16, scope: !6649)
!6652 = !DILocation(line: 3611, column: 13, scope: !6649)
!6653 = !DILocation(line: 3613, column: 12, scope: !6654)
!6654 = distinct !DILexicalBlock(scope: !6649, file: !3, line: 3613, column: 12)
!6655 = !DILocation(line: 3613, column: 19, scope: !6654)
!6656 = !DILocation(line: 3613, column: 17, scope: !6654)
!6657 = !DILocation(line: 3613, column: 12, scope: !6649)
!6658 = !DILocation(line: 3614, column: 10, scope: !6654)
!6659 = !DILocation(line: 3614, column: 8, scope: !6654)
!6660 = !DILocation(line: 3614, column: 3, scope: !6654)
!6661 = !DILocation(line: 3616, column: 27, scope: !6649)
!6662 = !DILocation(line: 3616, column: 8, scope: !6649)
!6663 = !DILocation(line: 3616, column: 25, scope: !6649)
!6664 = !DILocation(line: 3617, column: 6, scope: !6649)
!6665 = !DILocation(line: 3619, column: 4, scope: !6666)
!6666 = distinct !DILexicalBlock(scope: !6635, file: !3, line: 3619, column: 4)
!6667 = !DILocation(line: 3619, column: 4, scope: !6668)
!6668 = distinct !DILexicalBlock(scope: !6666, file: !3, line: 3619, column: 4)
!6669 = !DILocalVariable(name: "next", scope: !6670, file: !3, line: 3621, type: !867)
!6670 = distinct !DILexicalBlock(scope: !6668, file: !3, line: 3620, column: 6)
!6671 = !DILocation(line: 3621, column: 12, scope: !6670)
!6672 = !DILocation(line: 3623, column: 15, scope: !6670)
!6673 = !DILocation(line: 3623, column: 13, scope: !6670)
!6674 = !DILocation(line: 3624, column: 15, scope: !6670)
!6675 = !DILocation(line: 3624, column: 13, scope: !6670)
!6676 = !DILocation(line: 3626, column: 12, scope: !6677)
!6677 = distinct !DILexicalBlock(scope: !6670, file: !3, line: 3626, column: 12)
!6678 = !DILocation(line: 3626, column: 20, scope: !6677)
!6679 = !DILocation(line: 3626, column: 17, scope: !6677)
!6680 = !DILocation(line: 3630, column: 5, scope: !6677)
!6681 = !DILocation(line: 3630, column: 35, scope: !6677)
!6682 = !DILocation(line: 3630, column: 9, scope: !6677)
!6683 = !DILocation(line: 3626, column: 12, scope: !6670)
!6684 = !DILocation(line: 3632, column: 33, scope: !6685)
!6685 = distinct !DILexicalBlock(scope: !6677, file: !3, line: 3631, column: 3)
!6686 = !DILocation(line: 3632, column: 5, scope: !6685)
!6687 = !DILocation(line: 3633, column: 13, scope: !6685)
!6688 = !DILocation(line: 3633, column: 10, scope: !6685)
!6689 = !DILocation(line: 3635, column: 9, scope: !6690)
!6690 = distinct !DILexicalBlock(scope: !6685, file: !3, line: 3635, column: 9)
!6691 = !DILocation(line: 3635, column: 16, scope: !6690)
!6692 = !DILocation(line: 3635, column: 14, scope: !6690)
!6693 = !DILocation(line: 3635, column: 9, scope: !6685)
!6694 = !DILocation(line: 3636, column: 14, scope: !6690)
!6695 = !DILocation(line: 3636, column: 12, scope: !6690)
!6696 = !DILocation(line: 3636, column: 7, scope: !6690)
!6697 = !DILocation(line: 3638, column: 9, scope: !6698)
!6698 = distinct !DILexicalBlock(scope: !6685, file: !3, line: 3638, column: 9)
!6699 = !DILocation(line: 3638, column: 16, scope: !6698)
!6700 = !DILocation(line: 3638, column: 14, scope: !6698)
!6701 = !DILocation(line: 3638, column: 9, scope: !6685)
!6702 = !DILocation(line: 3639, column: 27, scope: !6698)
!6703 = !DILocation(line: 3639, column: 7, scope: !6698)
!6704 = !DILocation(line: 3639, column: 25, scope: !6698)
!6705 = !DILocation(line: 3641, column: 14, scope: !6698)
!6706 = !DILocation(line: 3641, column: 12, scope: !6698)
!6707 = !DILocation(line: 3643, column: 24, scope: !6685)
!6708 = !DILocation(line: 3643, column: 5, scope: !6685)
!6709 = !DILocation(line: 3643, column: 22, scope: !6685)
!6710 = !DILocation(line: 3644, column: 3, scope: !6685)
!6711 = !DILocation(line: 3645, column: 6, scope: !6670)
!6712 = distinct !{!6712, !6665, !6713}
!6713 = !DILocation(line: 3645, column: 6, scope: !6666)
!6714 = !DILocation(line: 3646, column: 2, scope: !6635)
!6715 = !DILocation(line: 3647, column: 5, scope: !6632)
!6716 = !DILocation(line: 3596, column: 54, scope: !6626)
!6717 = !DILocation(line: 3596, column: 52, scope: !6626)
!6718 = !DILocation(line: 3596, column: 3, scope: !6626)
!6719 = distinct !{!6719, !6629, !6720}
!6720 = !DILocation(line: 3647, column: 5, scope: !6622)
!6721 = !DILocation(line: 3648, column: 3, scope: !6608)
!6722 = !DILocation(line: 3649, column: 1, scope: !6608)
!6723 = distinct !DISubprogram(name: "sched_init_luids", scope: !3, file: !3, line: 5388, type: !6724, scopeLine: 5389, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!6724 = !DISubroutineType(types: !6725)
!6725 = !{null, !6726, !1406, !6727, !867}
!6726 = !DIDerivedType(tag: DW_TAG_typedef, name: "bb_vec_t", file: !398, line: 40, baseType: !2115)
!6727 = !DIDerivedType(tag: DW_TAG_typedef, name: "insn_vec_t", file: !398, line: 41, baseType: !2120)
!6728 = !DILocalVariable(name: "bbs", arg: 1, scope: !6723, file: !3, line: 5388, type: !6726)
!6729 = !DILocation(line: 5388, column: 28, scope: !6723)
!6730 = !DILocalVariable(name: "bb", arg: 2, scope: !6723, file: !3, line: 5388, type: !1406)
!6731 = !DILocation(line: 5388, column: 45, scope: !6723)
!6732 = !DILocalVariable(name: "insns", arg: 3, scope: !6723, file: !3, line: 5388, type: !6727)
!6733 = !DILocation(line: 5388, column: 60, scope: !6723)
!6734 = !DILocalVariable(name: "insn", arg: 4, scope: !6723, file: !3, line: 5388, type: !867)
!6735 = !DILocation(line: 5388, column: 71, scope: !6723)
!6736 = !DILocalVariable(name: "ssi", scope: !6723, file: !3, line: 5390, type: !2336)
!6737 = !DILocation(line: 5390, column: 36, scope: !6723)
!6738 = !DILocation(line: 5398, column: 21, scope: !6723)
!6739 = !DILocation(line: 5398, column: 26, scope: !6723)
!6740 = !DILocation(line: 5398, column: 30, scope: !6723)
!6741 = !DILocation(line: 5398, column: 37, scope: !6723)
!6742 = !DILocation(line: 5398, column: 3, scope: !6723)
!6743 = !DILocation(line: 5399, column: 1, scope: !6723)
!6744 = distinct !DISubprogram(name: "set_priorities", scope: !3, file: !3, line: 3300, type: !2381, scopeLine: 3301, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!6745 = !DILocalVariable(name: "head", arg: 1, scope: !6744, file: !3, line: 3300, type: !867)
!6746 = !DILocation(line: 3300, column: 21, scope: !6744)
!6747 = !DILocalVariable(name: "tail", arg: 2, scope: !6744, file: !3, line: 3300, type: !867)
!6748 = !DILocation(line: 3300, column: 31, scope: !6744)
!6749 = !DILocalVariable(name: "insn", scope: !6744, file: !3, line: 3302, type: !867)
!6750 = !DILocation(line: 3302, column: 7, scope: !6744)
!6751 = !DILocalVariable(name: "n_insn", scope: !6744, file: !3, line: 3303, type: !865)
!6752 = !DILocation(line: 3303, column: 7, scope: !6744)
!6753 = !DILocalVariable(name: "sched_max_insns_priority", scope: !6744, file: !3, line: 3304, type: !865)
!6754 = !DILocation(line: 3304, column: 7, scope: !6744)
!6755 = !DILocation(line: 3305, column: 2, scope: !6744)
!6756 = !DILocation(line: 3305, column: 22, scope: !6744)
!6757 = !DILocalVariable(name: "prev_head", scope: !6744, file: !3, line: 3306, type: !867)
!6758 = !DILocation(line: 3306, column: 7, scope: !6744)
!6759 = !DILocation(line: 3308, column: 7, scope: !6760)
!6760 = distinct !DILexicalBlock(scope: !6744, file: !3, line: 3308, column: 7)
!6761 = !DILocation(line: 3308, column: 15, scope: !6760)
!6762 = !DILocation(line: 3308, column: 12, scope: !6760)
!6763 = !DILocation(line: 3308, column: 20, scope: !6760)
!6764 = !DILocation(line: 3308, column: 26, scope: !6760)
!6765 = !DILocation(line: 3308, column: 40, scope: !6760)
!6766 = !DILocation(line: 3308, column: 43, scope: !6760)
!6767 = !DILocation(line: 3308, column: 7, scope: !6744)
!6768 = !DILocation(line: 3309, column: 5, scope: !6760)
!6769 = !DILocation(line: 3311, column: 10, scope: !6744)
!6770 = !DILocation(line: 3313, column: 15, scope: !6744)
!6771 = !DILocation(line: 3313, column: 13, scope: !6744)
!6772 = !DILocation(line: 3314, column: 15, scope: !6773)
!6773 = distinct !DILexicalBlock(scope: !6744, file: !3, line: 3314, column: 3)
!6774 = !DILocation(line: 3314, column: 13, scope: !6773)
!6775 = !DILocation(line: 3314, column: 8, scope: !6773)
!6776 = !DILocation(line: 3314, column: 21, scope: !6777)
!6777 = distinct !DILexicalBlock(scope: !6773, file: !3, line: 3314, column: 3)
!6778 = !DILocation(line: 3314, column: 29, scope: !6777)
!6779 = !DILocation(line: 3314, column: 26, scope: !6777)
!6780 = !DILocation(line: 3314, column: 3, scope: !6773)
!6781 = !DILocation(line: 3316, column: 12, scope: !6782)
!6782 = distinct !DILexicalBlock(scope: !6783, file: !3, line: 3316, column: 11)
!6783 = distinct !DILexicalBlock(scope: !6777, file: !3, line: 3315, column: 5)
!6784 = !DILocation(line: 3316, column: 11, scope: !6783)
!6785 = !DILocation(line: 3317, column: 2, scope: !6782)
!6786 = !DILocation(line: 3319, column: 13, scope: !6783)
!6787 = !DILocation(line: 3320, column: 24, scope: !6783)
!6788 = !DILocation(line: 3320, column: 14, scope: !6783)
!6789 = !DILocation(line: 3322, column: 7, scope: !6783)
!6790 = !DILocation(line: 3324, column: 34, scope: !6783)
!6791 = !DILocation(line: 3324, column: 32, scope: !6783)
!6792 = !DILocation(line: 3326, column: 5, scope: !6783)
!6793 = !DILocation(line: 3314, column: 47, scope: !6777)
!6794 = !DILocation(line: 3314, column: 45, scope: !6777)
!6795 = !DILocation(line: 3314, column: 3, scope: !6777)
!6796 = distinct !{!6796, !6780, !6797}
!6797 = !DILocation(line: 3326, column: 5, scope: !6773)
!6798 = !DILocation(line: 3328, column: 50, scope: !6744)
!6799 = !DILocation(line: 3328, column: 3, scope: !6744)
!6800 = !DILocation(line: 3328, column: 23, scope: !6744)
!6801 = !DILocation(line: 3328, column: 48, scope: !6744)
!6802 = !DILocation(line: 3330, column: 10, scope: !6744)
!6803 = !DILocation(line: 3330, column: 3, scope: !6744)
!6804 = distinct !DISubprogram(name: "priority", scope: !3, file: !3, line: 1004, type: !2291, scopeLine: 1005, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!6805 = !DILocalVariable(name: "insn", arg: 1, scope: !6804, file: !3, line: 1004, type: !867)
!6806 = !DILocation(line: 1004, column: 15, scope: !6804)
!6807 = !DILocation(line: 1006, column: 9, scope: !6808)
!6808 = distinct !DILexicalBlock(scope: !6804, file: !3, line: 1006, column: 7)
!6809 = !DILocation(line: 1006, column: 7, scope: !6804)
!6810 = !DILocation(line: 1007, column: 5, scope: !6808)
!6811 = !DILocation(line: 1010, column: 3, scope: !6804)
!6812 = !DILocation(line: 1012, column: 8, scope: !6813)
!6813 = distinct !DILexicalBlock(scope: !6804, file: !3, line: 1012, column: 7)
!6814 = !DILocation(line: 1012, column: 7, scope: !6804)
!6815 = !DILocalVariable(name: "this_priority", scope: !6816, file: !3, line: 1014, type: !865)
!6816 = distinct !DILexicalBlock(scope: !6813, file: !3, line: 1013, column: 5)
!6817 = !DILocation(line: 1014, column: 11, scope: !6816)
!6818 = !DILocation(line: 1016, column: 26, scope: !6819)
!6819 = distinct !DILexicalBlock(scope: !6816, file: !3, line: 1016, column: 11)
!6820 = !DILocation(line: 1016, column: 11, scope: !6819)
!6821 = !DILocation(line: 1016, column: 32, scope: !6819)
!6822 = !DILocation(line: 1016, column: 11, scope: !6816)
!6823 = !DILocation(line: 1021, column: 29, scope: !6819)
!6824 = !DILocation(line: 1021, column: 18, scope: !6819)
!6825 = !DILocation(line: 1021, column: 16, scope: !6819)
!6826 = !DILocation(line: 1021, column: 2, scope: !6819)
!6827 = !DILocalVariable(name: "prev_first", scope: !6828, file: !3, line: 1024, type: !867)
!6828 = distinct !DILexicalBlock(scope: !6819, file: !3, line: 1023, column: 2)
!6829 = !DILocation(line: 1024, column: 8, scope: !6828)
!6830 = !DILocalVariable(name: "twin", scope: !6828, file: !3, line: 1024, type: !867)
!6831 = !DILocation(line: 1024, column: 20, scope: !6828)
!6832 = !DILocalVariable(name: "rec", scope: !6828, file: !3, line: 1025, type: !1406)
!6833 = !DILocation(line: 1025, column: 16, scope: !6828)
!6834 = !DILocation(line: 1034, column: 10, scope: !6828)
!6835 = !DILocation(line: 1034, column: 34, scope: !6828)
!6836 = !DILocation(line: 1034, column: 8, scope: !6828)
!6837 = !DILocation(line: 1035, column: 9, scope: !6838)
!6838 = distinct !DILexicalBlock(scope: !6828, file: !3, line: 1035, column: 8)
!6839 = !DILocation(line: 1035, column: 13, scope: !6838)
!6840 = !DILocation(line: 1035, column: 16, scope: !6838)
!6841 = !DILocation(line: 1035, column: 23, scope: !6838)
!6842 = !DILocation(line: 1035, column: 20, scope: !6838)
!6843 = !DILocation(line: 1035, column: 8, scope: !6828)
!6844 = !DILocation(line: 1037, column: 21, scope: !6845)
!6845 = distinct !DILexicalBlock(scope: !6838, file: !3, line: 1036, column: 6)
!6846 = !DILocation(line: 1037, column: 19, scope: !6845)
!6847 = !DILocation(line: 1038, column: 15, scope: !6845)
!6848 = !DILocation(line: 1038, column: 13, scope: !6845)
!6849 = !DILocation(line: 1039, column: 6, scope: !6845)
!6850 = !DILocation(line: 1042, column: 21, scope: !6851)
!6851 = distinct !DILexicalBlock(scope: !6838, file: !3, line: 1041, column: 6)
!6852 = !DILocation(line: 1042, column: 19, scope: !6851)
!6853 = !DILocation(line: 1043, column: 15, scope: !6851)
!6854 = !DILocation(line: 1043, column: 13, scope: !6851)
!6855 = !DILocation(line: 1046, column: 4, scope: !6828)
!6856 = !DILocalVariable(name: "sd_it", scope: !6857, file: !3, line: 1048, type: !2467)
!6857 = distinct !DILexicalBlock(scope: !6828, file: !3, line: 1047, column: 6)
!6858 = !DILocation(line: 1048, column: 24, scope: !6857)
!6859 = !DILocalVariable(name: "dep", scope: !6857, file: !3, line: 1049, type: !2720)
!6860 = !DILocation(line: 1049, column: 14, scope: !6857)
!6861 = !DILocation(line: 1051, column: 8, scope: !6862)
!6862 = distinct !DILexicalBlock(scope: !6857, file: !3, line: 1051, column: 8)
!6863 = !DILocation(line: 1051, column: 8, scope: !6864)
!6864 = distinct !DILexicalBlock(scope: !6862, file: !3, line: 1051, column: 8)
!6865 = !DILocalVariable(name: "next", scope: !6866, file: !3, line: 1053, type: !867)
!6866 = distinct !DILexicalBlock(scope: !6864, file: !3, line: 1052, column: 3)
!6867 = !DILocation(line: 1053, column: 9, scope: !6866)
!6868 = !DILocalVariable(name: "next_priority", scope: !6866, file: !3, line: 1054, type: !865)
!6869 = !DILocation(line: 1054, column: 9, scope: !6866)
!6870 = !DILocation(line: 1056, column: 12, scope: !6866)
!6871 = !DILocation(line: 1056, column: 10, scope: !6866)
!6872 = !DILocation(line: 1058, column: 9, scope: !6873)
!6873 = distinct !DILexicalBlock(scope: !6866, file: !3, line: 1058, column: 9)
!6874 = !DILocation(line: 1058, column: 34, scope: !6873)
!6875 = !DILocation(line: 1058, column: 31, scope: !6873)
!6876 = !DILocation(line: 1058, column: 9, scope: !6866)
!6877 = !DILocalVariable(name: "cost", scope: !6878, file: !3, line: 1060, type: !865)
!6878 = distinct !DILexicalBlock(scope: !6873, file: !3, line: 1059, column: 7)
!6879 = !DILocation(line: 1060, column: 13, scope: !6878)
!6880 = !DILocation(line: 1062, column: 41, scope: !6881)
!6881 = distinct !DILexicalBlock(scope: !6878, file: !3, line: 1062, column: 13)
!6882 = !DILocation(line: 1062, column: 14, scope: !6881)
!6883 = !DILocation(line: 1062, column: 13, scope: !6878)
!6884 = !DILocation(line: 1063, column: 4, scope: !6881)
!6885 = !DILocation(line: 1065, column: 13, scope: !6886)
!6886 = distinct !DILexicalBlock(scope: !6878, file: !3, line: 1065, column: 13)
!6887 = !DILocation(line: 1065, column: 21, scope: !6886)
!6888 = !DILocation(line: 1065, column: 18, scope: !6886)
!6889 = !DILocation(line: 1065, column: 13, scope: !6878)
!6890 = !DILocation(line: 1066, column: 21, scope: !6886)
!6891 = !DILocation(line: 1066, column: 11, scope: !6886)
!6892 = !DILocation(line: 1066, column: 9, scope: !6886)
!6893 = !DILocation(line: 1066, column: 4, scope: !6886)
!6894 = !DILocalVariable(name: "_dep1", scope: !6895, file: !3, line: 1069, type: !2486)
!6895 = distinct !DILexicalBlock(scope: !6886, file: !3, line: 1068, column: 4)
!6896 = !DILocation(line: 1069, column: 18, scope: !6895)
!6897 = !DILocalVariable(name: "dep1", scope: !6895, file: !3, line: 1069, type: !6898)
!6898 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2486, size: 64)
!6899 = !DILocation(line: 1069, column: 26, scope: !6895)
!6900 = !DILocation(line: 1071, column: 16, scope: !6895)
!6901 = !DILocation(line: 1071, column: 22, scope: !6895)
!6902 = !DILocation(line: 1071, column: 28, scope: !6895)
!6903 = !DILocation(line: 1071, column: 6, scope: !6895)
!6904 = !DILocation(line: 1073, column: 23, scope: !6895)
!6905 = !DILocation(line: 1073, column: 13, scope: !6895)
!6906 = !DILocation(line: 1073, column: 11, scope: !6895)
!6907 = !DILocation(line: 1076, column: 25, scope: !6878)
!6908 = !DILocation(line: 1076, column: 42, scope: !6878)
!6909 = !DILocation(line: 1076, column: 32, scope: !6878)
!6910 = !DILocation(line: 1076, column: 30, scope: !6878)
!6911 = !DILocation(line: 1076, column: 23, scope: !6878)
!6912 = !DILocation(line: 1078, column: 13, scope: !6913)
!6913 = distinct !DILexicalBlock(scope: !6878, file: !3, line: 1078, column: 13)
!6914 = !DILocation(line: 1078, column: 29, scope: !6913)
!6915 = !DILocation(line: 1078, column: 27, scope: !6913)
!6916 = !DILocation(line: 1078, column: 13, scope: !6878)
!6917 = !DILocation(line: 1079, column: 20, scope: !6913)
!6918 = !DILocation(line: 1079, column: 18, scope: !6913)
!6919 = !DILocation(line: 1079, column: 4, scope: !6913)
!6920 = !DILocation(line: 1080, column: 7, scope: !6878)
!6921 = !DILocation(line: 1081, column: 3, scope: !6866)
!6922 = distinct !{!6922, !6861, !6923}
!6923 = !DILocation(line: 1081, column: 3, scope: !6862)
!6924 = !DILocation(line: 1083, column: 15, scope: !6857)
!6925 = !DILocation(line: 1083, column: 13, scope: !6857)
!6926 = !DILocation(line: 1084, column: 6, scope: !6857)
!6927 = !DILocation(line: 1085, column: 11, scope: !6828)
!6928 = !DILocation(line: 1085, column: 19, scope: !6828)
!6929 = !DILocation(line: 1085, column: 16, scope: !6828)
!6930 = distinct !{!6930, !6855, !6931}
!6931 = !DILocation(line: 1085, column: 29, scope: !6828)
!6932 = !DILocation(line: 1088, column: 11, scope: !6933)
!6933 = distinct !DILexicalBlock(scope: !6816, file: !3, line: 1088, column: 11)
!6934 = !DILocation(line: 1088, column: 25, scope: !6933)
!6935 = !DILocation(line: 1088, column: 11, scope: !6816)
!6936 = !DILocation(line: 1090, column: 4, scope: !6937)
!6937 = distinct !DILexicalBlock(scope: !6933, file: !3, line: 1089, column: 2)
!6938 = !DILocation(line: 1092, column: 31, scope: !6937)
!6939 = !DILocation(line: 1092, column: 20, scope: !6937)
!6940 = !DILocation(line: 1092, column: 18, scope: !6937)
!6941 = !DILocation(line: 1093, column: 2, scope: !6937)
!6942 = !DILocation(line: 1095, column: 30, scope: !6816)
!6943 = !DILocation(line: 1095, column: 7, scope: !6816)
!6944 = !DILocation(line: 1095, column: 28, scope: !6816)
!6945 = !DILocation(line: 1096, column: 7, scope: !6816)
!6946 = !DILocation(line: 1096, column: 35, scope: !6816)
!6947 = !DILocation(line: 1097, column: 5, scope: !6816)
!6948 = !DILocation(line: 1099, column: 10, scope: !6804)
!6949 = !DILocation(line: 1099, column: 3, scope: !6804)
!6950 = !DILocation(line: 1100, column: 1, scope: !6804)
!6951 = distinct !DISubprogram(name: "setup_sched_dump", scope: !3, file: !3, line: 3337, type: !2341, scopeLine: 3338, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!6952 = !DILocation(line: 3339, column: 19, scope: !6951)
!6953 = !DILocation(line: 3339, column: 17, scope: !6951)
!6954 = !DILocation(line: 3340, column: 7, scope: !6955)
!6955 = distinct !DILexicalBlock(scope: !6951, file: !3, line: 3340, column: 7)
!6956 = !DILocation(line: 3340, column: 27, scope: !6955)
!6957 = !DILocation(line: 3340, column: 32, scope: !6955)
!6958 = !DILocation(line: 3340, column: 35, scope: !6955)
!6959 = !DILocation(line: 3340, column: 7, scope: !6951)
!6960 = !DILocation(line: 3341, column: 19, scope: !6955)
!6961 = !DILocation(line: 3341, column: 5, scope: !6955)
!6962 = !DILocation(line: 3342, column: 18, scope: !6951)
!6963 = !DILocation(line: 3342, column: 38, scope: !6951)
!6964 = !DILocation(line: 3342, column: 44, scope: !6951)
!6965 = !DILocation(line: 3342, column: 48, scope: !6951)
!6966 = !DILocation(line: 3342, column: 17, scope: !6951)
!6967 = !DILocation(line: 3343, column: 5, scope: !6951)
!6968 = !DILocation(line: 3343, column: 14, scope: !6951)
!6969 = !DILocation(line: 3342, column: 14, scope: !6951)
!6970 = !DILocation(line: 3344, column: 1, scope: !6951)
!6971 = distinct !DISubprogram(name: "sched_init", scope: !3, file: !3, line: 3351, type: !2341, scopeLine: 3352, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!6972 = !DILocation(line: 3358, column: 23, scope: !6971)
!6973 = !DILocation(line: 3358, column: 43, scope: !6971)
!6974 = !DILocation(line: 3358, column: 48, scope: !6971)
!6975 = !DILocation(line: 3359, column: 9, scope: !6971)
!6976 = !DILocation(line: 3359, column: 12, scope: !6971)
!6977 = !DILocation(line: 3359, column: 31, scope: !6971)
!6978 = !DILocation(line: 3359, column: 45, scope: !6971)
!6979 = !DILocation(line: 0, scope: !6971)
!6980 = !DILocation(line: 3358, column: 22, scope: !6971)
!6981 = !DILocation(line: 3358, column: 20, scope: !6971)
!6982 = !DILocation(line: 3360, column: 7, scope: !6983)
!6983 = distinct !DILexicalBlock(scope: !6971, file: !3, line: 3360, column: 7)
!6984 = !DILocation(line: 3360, column: 7, scope: !6971)
!6985 = !DILocation(line: 3361, column: 5, scope: !6983)
!6986 = !DILocation(line: 3364, column: 21, scope: !6987)
!6987 = distinct !DILexicalBlock(scope: !6971, file: !3, line: 3364, column: 7)
!6988 = !DILocation(line: 3364, column: 7, scope: !6987)
!6989 = !DILocation(line: 3364, column: 7, scope: !6971)
!6990 = !DILocation(line: 3366, column: 17, scope: !6991)
!6991 = distinct !DILexicalBlock(scope: !6987, file: !3, line: 3365, column: 5)
!6992 = !DILocation(line: 3367, column: 21, scope: !6991)
!6993 = !DILocation(line: 3367, column: 38, scope: !6991)
!6994 = !DILocation(line: 3367, column: 7, scope: !6991)
!6995 = !DILocation(line: 3369, column: 11, scope: !6996)
!6996 = distinct !DILexicalBlock(scope: !6991, file: !3, line: 3369, column: 11)
!6997 = !DILocation(line: 3369, column: 22, scope: !6996)
!6998 = !DILocation(line: 3369, column: 27, scope: !6996)
!6999 = !DILocation(line: 3369, column: 11, scope: !6991)
!7000 = !DILocation(line: 3372, column: 14, scope: !7001)
!7001 = distinct !DILexicalBlock(scope: !6996, file: !3, line: 3370, column: 9)
!7002 = !DILocation(line: 3372, column: 57, scope: !7001)
!7003 = !DILocation(line: 3372, column: 73, scope: !7001)
!7004 = !DILocation(line: 3371, column: 11, scope: !7001)
!7005 = !DILocation(line: 3371, column: 22, scope: !7001)
!7006 = !DILocation(line: 3371, column: 43, scope: !7001)
!7007 = !DILocation(line: 3374, column: 14, scope: !7001)
!7008 = !DILocation(line: 3375, column: 14, scope: !7001)
!7009 = !DILocation(line: 3375, column: 34, scope: !7001)
!7010 = !DILocation(line: 3373, column: 11, scope: !7001)
!7011 = !DILocation(line: 3373, column: 22, scope: !7001)
!7012 = !DILocation(line: 3373, column: 46, scope: !7001)
!7013 = !DILocation(line: 3376, column: 9, scope: !7001)
!7014 = !DILocation(line: 3379, column: 12, scope: !6996)
!7015 = !DILocation(line: 3381, column: 5, scope: !6991)
!7016 = !DILocation(line: 3384, column: 15, scope: !6987)
!7017 = !DILocation(line: 3387, column: 21, scope: !7018)
!7018 = distinct !DILexicalBlock(scope: !6971, file: !3, line: 3387, column: 7)
!7019 = !DILocation(line: 3387, column: 7, scope: !7018)
!7020 = !DILocation(line: 3387, column: 7, scope: !6971)
!7021 = !DILocation(line: 3388, column: 32, scope: !7018)
!7022 = !DILocation(line: 3388, column: 18, scope: !7018)
!7023 = !DILocation(line: 3388, column: 16, scope: !7018)
!7024 = !DILocation(line: 3388, column: 5, scope: !7018)
!7025 = !DILocation(line: 3390, column: 16, scope: !7018)
!7026 = !DILocation(line: 3392, column: 7, scope: !7027)
!7027 = distinct !DILexicalBlock(scope: !6971, file: !3, line: 3392, column: 7)
!7028 = !DILocation(line: 3392, column: 28, scope: !7027)
!7029 = !DILocation(line: 3392, column: 25, scope: !7027)
!7030 = !DILocation(line: 3392, column: 7, scope: !6971)
!7031 = !DILocation(line: 3394, column: 27, scope: !7032)
!7032 = distinct !DILexicalBlock(scope: !7027, file: !3, line: 3393, column: 5)
!7033 = !DILocation(line: 3394, column: 25, scope: !7032)
!7034 = !DILocation(line: 3396, column: 50, scope: !7032)
!7035 = !DILocation(line: 3397, column: 5, scope: !7032)
!7036 = !DILocation(line: 3399, column: 21, scope: !7037)
!7037 = distinct !DILexicalBlock(scope: !6971, file: !3, line: 3399, column: 7)
!7038 = !DILocation(line: 3399, column: 7, scope: !7037)
!7039 = !DILocation(line: 3399, column: 7, scope: !6971)
!7040 = !DILocation(line: 3400, column: 35, scope: !7037)
!7041 = !DILocation(line: 3400, column: 21, scope: !7037)
!7042 = !DILocation(line: 3400, column: 19, scope: !7037)
!7043 = !DILocation(line: 3400, column: 5, scope: !7037)
!7044 = !DILocation(line: 3402, column: 19, scope: !7037)
!7045 = !DILocation(line: 3404, column: 21, scope: !7046)
!7046 = distinct !DILexicalBlock(scope: !6971, file: !3, line: 3404, column: 7)
!7047 = !DILocation(line: 3404, column: 7, scope: !7046)
!7048 = !DILocation(line: 3404, column: 7, scope: !6971)
!7049 = !DILocation(line: 3405, column: 19, scope: !7046)
!7050 = !DILocation(line: 3405, column: 5, scope: !7046)
!7051 = !DILocation(line: 3407, column: 21, scope: !7052)
!7052 = distinct !DILexicalBlock(scope: !6971, file: !3, line: 3407, column: 7)
!7053 = !DILocation(line: 3407, column: 7, scope: !7052)
!7054 = !DILocation(line: 3407, column: 7, scope: !6971)
!7055 = !DILocation(line: 3408, column: 19, scope: !7052)
!7056 = !DILocation(line: 3408, column: 5, scope: !7052)
!7057 = !DILocation(line: 3410, column: 3, scope: !6971)
!7058 = !DILocation(line: 3411, column: 20, scope: !6971)
!7059 = !DILocation(line: 3411, column: 18, scope: !6971)
!7060 = !DILocation(line: 3413, column: 3, scope: !6971)
!7061 = !DILocation(line: 3415, column: 3, scope: !6971)
!7062 = !DILocation(line: 3416, column: 3, scope: !6971)
!7063 = !DILocation(line: 3419, column: 7, scope: !7064)
!7064 = distinct !DILexicalBlock(scope: !6971, file: !3, line: 3419, column: 7)
!7065 = !DILocation(line: 3419, column: 26, scope: !7064)
!7066 = !DILocation(line: 3419, column: 40, scope: !7064)
!7067 = !DILocation(line: 3419, column: 7, scope: !6971)
!7068 = !DILocation(line: 3421, column: 7, scope: !7069)
!7069 = distinct !DILexicalBlock(scope: !7064, file: !3, line: 3420, column: 5)
!7070 = !DILocation(line: 3422, column: 7, scope: !7069)
!7071 = !DILocation(line: 3423, column: 5, scope: !7069)
!7072 = !DILocation(line: 3425, column: 3, scope: !6971)
!7073 = !DILocation(line: 3429, column: 7, scope: !7074)
!7074 = distinct !DILexicalBlock(scope: !6971, file: !3, line: 3429, column: 7)
!7075 = !DILocation(line: 3429, column: 7, scope: !6971)
!7076 = !DILocation(line: 3430, column: 5, scope: !7074)
!7077 = !DILocation(line: 3432, column: 3, scope: !6971)
!7078 = !DILocation(line: 3434, column: 21, scope: !7079)
!7079 = distinct !DILexicalBlock(scope: !6971, file: !3, line: 3434, column: 7)
!7080 = !DILocation(line: 3434, column: 7, scope: !7079)
!7081 = !DILocation(line: 3434, column: 7, scope: !6971)
!7082 = !DILocation(line: 3435, column: 19, scope: !7079)
!7083 = !DILocation(line: 3435, column: 35, scope: !7079)
!7084 = !DILocation(line: 3435, column: 47, scope: !7079)
!7085 = !DILocation(line: 3436, column: 7, scope: !7079)
!7086 = !DILocation(line: 3436, column: 22, scope: !7079)
!7087 = !DILocation(line: 3435, column: 5, scope: !7079)
!7088 = !DILocation(line: 3438, column: 7, scope: !7089)
!7089 = distinct !DILexicalBlock(scope: !6971, file: !3, line: 3438, column: 7)
!7090 = !DILocation(line: 3438, column: 7, scope: !6971)
!7091 = !DILocalVariable(name: "i", scope: !7092, file: !3, line: 3440, type: !865)
!7092 = distinct !DILexicalBlock(scope: !7089, file: !3, line: 3439, column: 5)
!7093 = !DILocation(line: 3440, column: 11, scope: !7092)
!7094 = !DILocalVariable(name: "max_regno", scope: !7092, file: !3, line: 3440, type: !865)
!7095 = !DILocation(line: 3440, column: 14, scope: !7092)
!7096 = !DILocation(line: 3440, column: 26, scope: !7092)
!7097 = !DILocation(line: 3442, column: 31, scope: !7092)
!7098 = !DILocation(line: 3442, column: 47, scope: !7092)
!7099 = !DILocation(line: 3442, column: 7, scope: !7092)
!7100 = !DILocation(line: 3444, column: 32, scope: !7092)
!7101 = !DILocation(line: 3444, column: 42, scope: !7092)
!7102 = !DILocation(line: 3444, column: 23, scope: !7092)
!7103 = !DILocation(line: 3444, column: 4, scope: !7092)
!7104 = !DILocation(line: 3444, column: 2, scope: !7092)
!7105 = !DILocation(line: 3445, column: 14, scope: !7106)
!7106 = distinct !DILexicalBlock(scope: !7092, file: !3, line: 3445, column: 7)
!7107 = !DILocation(line: 3445, column: 12, scope: !7106)
!7108 = !DILocation(line: 3445, column: 19, scope: !7109)
!7109 = distinct !DILexicalBlock(scope: !7106, file: !3, line: 3445, column: 7)
!7110 = !DILocation(line: 3445, column: 23, scope: !7109)
!7111 = !DILocation(line: 3445, column: 21, scope: !7109)
!7112 = !DILocation(line: 3445, column: 7, scope: !7106)
!7113 = !DILocation(line: 3447, column: 7, scope: !7109)
!7114 = !DILocation(line: 3447, column: 9, scope: !7109)
!7115 = !DILocation(line: 3448, column: 29, scope: !7109)
!7116 = !DILocation(line: 3448, column: 9, scope: !7109)
!7117 = !DILocation(line: 3449, column: 26, scope: !7109)
!7118 = !DILocation(line: 3449, column: 9, scope: !7109)
!7119 = !DILocation(line: 3446, column: 2, scope: !7109)
!7120 = !DILocation(line: 3446, column: 26, scope: !7109)
!7121 = !DILocation(line: 3447, column: 4, scope: !7109)
!7122 = !DILocation(line: 3445, column: 35, scope: !7109)
!7123 = !DILocation(line: 3445, column: 7, scope: !7109)
!7124 = distinct !{!7124, !7112, !7125}
!7125 = !DILocation(line: 3449, column: 28, scope: !7106)
!7126 = !DILocation(line: 3450, column: 23, scope: !7092)
!7127 = !DILocation(line: 3450, column: 21, scope: !7092)
!7128 = !DILocation(line: 3451, column: 24, scope: !7092)
!7129 = !DILocation(line: 3451, column: 22, scope: !7092)
!7130 = !DILocation(line: 3452, column: 25, scope: !7092)
!7131 = !DILocation(line: 3452, column: 23, scope: !7092)
!7132 = !DILocation(line: 3453, column: 5, scope: !7092)
!7133 = !DILocation(line: 3455, column: 25, scope: !6971)
!7134 = !DILocation(line: 3455, column: 16, scope: !6971)
!7135 = !DILocation(line: 3455, column: 14, scope: !6971)
!7136 = !DILocation(line: 3456, column: 1, scope: !6971)
!7137 = distinct !DISubprogram(name: "haifa_sched_init", scope: !3, file: !3, line: 3462, type: !2341, scopeLine: 3463, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!7138 = !DILocation(line: 3464, column: 3, scope: !7137)
!7139 = !DILocation(line: 3465, column: 3, scope: !7137)
!7140 = !DILocation(line: 3467, column: 7, scope: !7141)
!7141 = distinct !DILexicalBlock(scope: !7137, file: !3, line: 3467, column: 7)
!7142 = !DILocation(line: 3467, column: 17, scope: !7141)
!7143 = !DILocation(line: 3467, column: 7, scope: !7137)
!7144 = !DILocation(line: 3469, column: 7, scope: !7145)
!7145 = distinct !DILexicalBlock(scope: !7141, file: !3, line: 3468, column: 5)
!7146 = !DILocation(line: 3469, column: 24, scope: !7145)
!7147 = !DILocation(line: 3469, column: 38, scope: !7145)
!7148 = !DILocation(line: 3470, column: 7, scope: !7145)
!7149 = !DILocation(line: 3470, column: 24, scope: !7145)
!7150 = !DILocation(line: 3470, column: 43, scope: !7145)
!7151 = !DILocation(line: 3471, column: 5, scope: !7145)
!7152 = !DILocalVariable(name: "bbs", scope: !7153, file: !3, line: 3476, type: !6726)
!7153 = distinct !DILexicalBlock(scope: !7137, file: !3, line: 3475, column: 3)
!7154 = !DILocation(line: 3476, column: 14, scope: !7153)
!7155 = !DILocation(line: 3476, column: 20, scope: !7153)
!7156 = !DILocalVariable(name: "bb", scope: !7153, file: !3, line: 3477, type: !1406)
!7157 = !DILocation(line: 3477, column: 17, scope: !7153)
!7158 = !DILocation(line: 3479, column: 5, scope: !7153)
!7159 = !DILocation(line: 3481, column: 5, scope: !7160)
!7160 = distinct !DILexicalBlock(scope: !7153, file: !3, line: 3481, column: 5)
!7161 = !DILocation(line: 3481, column: 5, scope: !7162)
!7162 = distinct !DILexicalBlock(scope: !7160, file: !3, line: 3481, column: 5)
!7163 = !DILocation(line: 3482, column: 7, scope: !7162)
!7164 = distinct !{!7164, !7159, !7165}
!7165 = !DILocation(line: 3482, column: 7, scope: !7160)
!7166 = !DILocation(line: 3483, column: 23, scope: !7153)
!7167 = !DILocation(line: 3483, column: 5, scope: !7153)
!7168 = !DILocation(line: 3484, column: 5, scope: !7153)
!7169 = !DILocation(line: 3485, column: 5, scope: !7153)
!7170 = !DILocation(line: 3486, column: 23, scope: !7153)
!7171 = !DILocation(line: 3486, column: 5, scope: !7153)
!7172 = !DILocation(line: 3488, column: 5, scope: !7153)
!7173 = !DILocation(line: 3491, column: 22, scope: !7137)
!7174 = !DILocation(line: 3492, column: 21, scope: !7137)
!7175 = !DILocation(line: 3493, column: 25, scope: !7137)
!7176 = !DILocation(line: 3494, column: 34, scope: !7137)
!7177 = !DILocation(line: 3503, column: 71, scope: !7137)
!7178 = !DILocation(line: 3503, column: 52, scope: !7137)
!7179 = !DILocation(line: 3503, column: 36, scope: !7137)
!7180 = !DILocation(line: 3503, column: 17, scope: !7137)
!7181 = !DILocation(line: 3504, column: 19, scope: !7137)
!7182 = !DILocation(line: 3505, column: 18, scope: !7137)
!7183 = !DILocation(line: 3506, column: 1, scope: !7137)
!7184 = distinct !DISubprogram(name: "VEC_basic_block_heap_alloc", scope: !155, file: !155, line: 283, type: !7185, scopeLine: 283, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!7185 = !DISubroutineType(types: !7186)
!7186 = !{!2115, !865}
!7187 = !DILocalVariable(name: "alloc_", arg: 1, scope: !7184, file: !155, line: 283, type: !865)
!7188 = !DILocation(line: 283, column: 1, scope: !7184)
!7189 = distinct !DISubprogram(name: "sched_init_bbs", scope: !3, file: !3, line: 4285, type: !2341, scopeLine: 4286, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!7190 = !DILocation(line: 4287, column: 3, scope: !7189)
!7191 = !DILocation(line: 4288, column: 1, scope: !7189)
!7192 = distinct !DISubprogram(name: "VEC_basic_block_base_quick_push", scope: !155, file: !155, line: 281, type: !7193, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!7193 = !DISubroutineType(types: !7194)
!7194 = !{!4310, !7195, !1406}
!7195 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1543, size: 64)
!7196 = !DILocalVariable(name: "vec_", arg: 1, scope: !7192, file: !155, line: 281, type: !7195)
!7197 = !DILocation(line: 281, column: 1, scope: !7192)
!7198 = !DILocalVariable(name: "obj_", arg: 2, scope: !7192, file: !155, line: 281, type: !1406)
!7199 = !DILocalVariable(name: "slot_", scope: !7192, file: !155, line: 281, type: !4310)
!7200 = distinct !DISubprogram(name: "sched_extend_target", scope: !3, file: !3, line: 5418, type: !2341, scopeLine: 5419, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!7201 = !DILocation(line: 5420, column: 21, scope: !7202)
!7202 = distinct !DILexicalBlock(scope: !7200, file: !3, line: 5420, column: 7)
!7203 = !DILocation(line: 5420, column: 7, scope: !7202)
!7204 = !DILocation(line: 5420, column: 7, scope: !7200)
!7205 = !DILocation(line: 5421, column: 19, scope: !7202)
!7206 = !DILocation(line: 5421, column: 5, scope: !7202)
!7207 = !DILocation(line: 5422, column: 1, scope: !7200)
!7208 = distinct !DISubprogram(name: "haifa_init_h_i_d", scope: !3, file: !3, line: 5457, type: !6724, scopeLine: 5458, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!7209 = !DILocalVariable(name: "bbs", arg: 1, scope: !7208, file: !3, line: 5457, type: !6726)
!7210 = !DILocation(line: 5457, column: 28, scope: !7208)
!7211 = !DILocalVariable(name: "bb", arg: 2, scope: !7208, file: !3, line: 5457, type: !1406)
!7212 = !DILocation(line: 5457, column: 45, scope: !7208)
!7213 = !DILocalVariable(name: "insns", arg: 3, scope: !7208, file: !3, line: 5457, type: !6727)
!7214 = !DILocation(line: 5457, column: 60, scope: !7208)
!7215 = !DILocalVariable(name: "insn", arg: 4, scope: !7208, file: !3, line: 5457, type: !867)
!7216 = !DILocation(line: 5457, column: 71, scope: !7208)
!7217 = !DILocalVariable(name: "ssi", scope: !7208, file: !3, line: 5459, type: !2336)
!7218 = !DILocation(line: 5459, column: 36, scope: !7208)
!7219 = !DILocation(line: 5467, column: 21, scope: !7208)
!7220 = !DILocation(line: 5467, column: 26, scope: !7208)
!7221 = !DILocation(line: 5467, column: 30, scope: !7208)
!7222 = !DILocation(line: 5467, column: 37, scope: !7208)
!7223 = !DILocation(line: 5467, column: 3, scope: !7208)
!7224 = !DILocation(line: 5468, column: 1, scope: !7208)
!7225 = distinct !DISubprogram(name: "VEC_basic_block_heap_free", scope: !155, file: !155, line: 283, type: !7226, scopeLine: 283, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!7226 = !DISubroutineType(types: !7227)
!7227 = !{null, !7228}
!7228 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2115, size: 64)
!7229 = !DILocalVariable(name: "vec_", arg: 1, scope: !7225, file: !155, line: 283, type: !7228)
!7230 = !DILocation(line: 283, column: 1, scope: !7225)
!7231 = !DILocation(line: 283, column: 1, scope: !7232)
!7232 = distinct !DILexicalBlock(scope: !7225, file: !155, line: 283, column: 1)
!7233 = distinct !DISubprogram(name: "haifa_init_only_bb", scope: !3, file: !3, line: 5513, type: !2283, scopeLine: 5514, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!7234 = !DILocalVariable(name: "bb", arg: 1, scope: !7233, file: !3, line: 5513, type: !1406)
!7235 = !DILocation(line: 5513, column: 33, scope: !7233)
!7236 = !DILocalVariable(name: "after", arg: 2, scope: !7233, file: !3, line: 5513, type: !1406)
!7237 = !DILocation(line: 5513, column: 49, scope: !7233)
!7238 = !DILocation(line: 5515, column: 3, scope: !7233)
!7239 = !DILocation(line: 5517, column: 3, scope: !7233)
!7240 = !DILocation(line: 5519, column: 7, scope: !7241)
!7241 = distinct !DILexicalBlock(scope: !7233, file: !3, line: 5519, column: 7)
!7242 = !DILocation(line: 5519, column: 26, scope: !7241)
!7243 = !DILocation(line: 5519, column: 7, scope: !7233)
!7244 = !DILocation(line: 5521, column: 5, scope: !7241)
!7245 = !DILocation(line: 5521, column: 24, scope: !7241)
!7246 = !DILocation(line: 5521, column: 35, scope: !7241)
!7247 = !DILocation(line: 5521, column: 39, scope: !7241)
!7248 = !DILocation(line: 5522, column: 1, scope: !7233)
!7249 = distinct !DISubprogram(name: "sched_split_block_1", scope: !3, file: !3, line: 5526, type: !2357, scopeLine: 5527, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!7250 = !DILocalVariable(name: "first_bb", arg: 1, scope: !7249, file: !3, line: 5526, type: !1406)
!7251 = !DILocation(line: 5526, column: 34, scope: !7249)
!7252 = !DILocalVariable(name: "after", arg: 2, scope: !7249, file: !3, line: 5526, type: !867)
!7253 = !DILocation(line: 5526, column: 48, scope: !7249)
!7254 = !DILocalVariable(name: "e", scope: !7249, file: !3, line: 5528, type: !1423)
!7255 = !DILocation(line: 5528, column: 8, scope: !7249)
!7256 = !DILocation(line: 5530, column: 20, scope: !7249)
!7257 = !DILocation(line: 5530, column: 30, scope: !7249)
!7258 = !DILocation(line: 5530, column: 7, scope: !7249)
!7259 = !DILocation(line: 5530, column: 5, scope: !7249)
!7260 = !DILocation(line: 5531, column: 3, scope: !7249)
!7261 = !DILocation(line: 5536, column: 10, scope: !7249)
!7262 = !DILocation(line: 5536, column: 13, scope: !7249)
!7263 = !DILocation(line: 5536, column: 3, scope: !7249)
!7264 = distinct !DISubprogram(name: "sched_create_empty_bb_1", scope: !3, file: !3, line: 5541, type: !2362, scopeLine: 5542, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!7265 = !DILocalVariable(name: "after", arg: 1, scope: !7264, file: !3, line: 5541, type: !1406)
!7266 = !DILocation(line: 5541, column: 38, scope: !7264)
!7267 = !DILocation(line: 5543, column: 27, scope: !7264)
!7268 = !DILocation(line: 5543, column: 10, scope: !7264)
!7269 = !DILocation(line: 5543, column: 3, scope: !7264)
!7270 = distinct !DISubprogram(name: "haifa_sched_finish", scope: !3, file: !3, line: 3510, type: !2341, scopeLine: 3511, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!7271 = !DILocation(line: 3512, column: 25, scope: !7270)
!7272 = !DILocation(line: 3513, column: 21, scope: !7270)
!7273 = !DILocation(line: 3514, column: 22, scope: !7270)
!7274 = !DILocation(line: 3516, column: 7, scope: !7275)
!7275 = distinct !DILexicalBlock(scope: !7270, file: !3, line: 3516, column: 7)
!7276 = !DILocation(line: 3516, column: 17, scope: !7275)
!7277 = !DILocation(line: 3516, column: 20, scope: !7275)
!7278 = !DILocation(line: 3516, column: 31, scope: !7275)
!7279 = !DILocation(line: 3516, column: 7, scope: !7270)
!7280 = !DILocalVariable(name: "c", scope: !7281, file: !3, line: 3518, type: !895)
!7281 = distinct !DILexicalBlock(scope: !7275, file: !3, line: 3517, column: 5)
!7282 = !DILocation(line: 3518, column: 12, scope: !7281)
!7283 = !DILocation(line: 3518, column: 16, scope: !7281)
!7284 = !DILocation(line: 3520, column: 16, scope: !7281)
!7285 = !DILocation(line: 3520, column: 27, scope: !7281)
!7286 = !DILocation(line: 3521, column: 21, scope: !7281)
!7287 = !DILocation(line: 3520, column: 7, scope: !7281)
!7288 = !DILocation(line: 3523, column: 16, scope: !7281)
!7289 = !DILocation(line: 3523, column: 27, scope: !7281)
!7290 = !DILocation(line: 3525, column: 16, scope: !7281)
!7291 = !DILocation(line: 3525, column: 19, scope: !7281)
!7292 = !DILocation(line: 3523, column: 7, scope: !7281)
!7293 = !DILocation(line: 3526, column: 16, scope: !7281)
!7294 = !DILocation(line: 3526, column: 27, scope: !7281)
!7295 = !DILocation(line: 3528, column: 16, scope: !7281)
!7296 = !DILocation(line: 3528, column: 19, scope: !7281)
!7297 = !DILocation(line: 3526, column: 7, scope: !7281)
!7298 = !DILocation(line: 3529, column: 16, scope: !7281)
!7299 = !DILocation(line: 3529, column: 27, scope: !7281)
!7300 = !DILocation(line: 3531, column: 16, scope: !7281)
!7301 = !DILocation(line: 3531, column: 19, scope: !7281)
!7302 = !DILocation(line: 3529, column: 7, scope: !7281)
!7303 = !DILocation(line: 3532, column: 16, scope: !7281)
!7304 = !DILocation(line: 3532, column: 27, scope: !7281)
!7305 = !DILocation(line: 3534, column: 16, scope: !7281)
!7306 = !DILocation(line: 3534, column: 19, scope: !7281)
!7307 = !DILocation(line: 3532, column: 7, scope: !7281)
!7308 = !DILocation(line: 3535, column: 5, scope: !7281)
!7309 = !DILocation(line: 3539, column: 3, scope: !7270)
!7310 = !DILocation(line: 3540, column: 3, scope: !7270)
!7311 = !DILocation(line: 3541, column: 22, scope: !7270)
!7312 = !DILocation(line: 3542, column: 3, scope: !7270)
!7313 = !DILocation(line: 3543, column: 1, scope: !7270)
!7314 = distinct !DISubprogram(name: "sched_finish_luids", scope: !3, file: !3, line: 5403, type: !2341, scopeLine: 5404, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!7315 = !DILocation(line: 5405, column: 3, scope: !7314)
!7316 = !DILocation(line: 5406, column: 18, scope: !7314)
!7317 = !DILocation(line: 5407, column: 1, scope: !7314)
!7318 = distinct !DISubprogram(name: "sched_finish", scope: !3, file: !3, line: 3549, type: !2341, scopeLine: 3550, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!7319 = !DILocation(line: 3551, column: 3, scope: !7318)
!7320 = !DILocation(line: 3552, column: 7, scope: !7321)
!7321 = distinct !DILexicalBlock(scope: !7318, file: !3, line: 3552, column: 7)
!7322 = !DILocation(line: 3552, column: 7, scope: !7318)
!7323 = !DILocation(line: 3554, column: 13, scope: !7324)
!7324 = distinct !DILexicalBlock(scope: !7321, file: !3, line: 3553, column: 5)
!7325 = !DILocation(line: 3554, column: 7, scope: !7324)
!7326 = !DILocation(line: 3555, column: 7, scope: !7324)
!7327 = !DILocation(line: 3556, column: 7, scope: !7324)
!7328 = !DILocation(line: 3557, column: 7, scope: !7324)
!7329 = !DILocation(line: 3558, column: 5, scope: !7324)
!7330 = !DILocation(line: 3559, column: 9, scope: !7318)
!7331 = !DILocation(line: 3559, column: 3, scope: !7318)
!7332 = !DILocation(line: 3561, column: 21, scope: !7333)
!7333 = distinct !DILexicalBlock(scope: !7318, file: !3, line: 3561, column: 7)
!7334 = !DILocation(line: 3561, column: 7, scope: !7333)
!7335 = !DILocation(line: 3561, column: 7, scope: !7318)
!7336 = !DILocation(line: 3562, column: 19, scope: !7333)
!7337 = !DILocation(line: 3562, column: 37, scope: !7333)
!7338 = !DILocation(line: 3562, column: 49, scope: !7333)
!7339 = !DILocation(line: 3562, column: 5, scope: !7333)
!7340 = !DILocation(line: 3564, column: 3, scope: !7318)
!7341 = !DILocation(line: 3566, column: 3, scope: !7318)
!7342 = !DILocation(line: 3568, column: 3, scope: !7318)
!7343 = !DILocation(line: 3575, column: 1, scope: !7318)
!7344 = distinct !DISubprogram(name: "haifa_finish_h_i_d", scope: !3, file: !3, line: 5472, type: !2341, scopeLine: 5473, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!7345 = !DILocalVariable(name: "i", scope: !7344, file: !3, line: 5474, type: !865)
!7346 = !DILocation(line: 5474, column: 7, scope: !7344)
!7347 = !DILocalVariable(name: "data", scope: !7344, file: !3, line: 5475, type: !7348)
!7348 = !DIDerivedType(tag: DW_TAG_typedef, name: "haifa_insn_data_t", file: !398, line: 823, baseType: !2711)
!7349 = !DILocation(line: 5475, column: 21, scope: !7344)
!7350 = !DILocalVariable(name: "use", scope: !7344, file: !3, line: 5476, type: !2178)
!7351 = !DILocation(line: 5476, column: 24, scope: !7344)
!7352 = !DILocalVariable(name: "next", scope: !7344, file: !3, line: 5476, type: !2178)
!7353 = !DILocation(line: 5476, column: 30, scope: !7344)
!7354 = !DILocation(line: 5478, column: 10, scope: !7355)
!7355 = distinct !DILexicalBlock(scope: !7344, file: !3, line: 5478, column: 3)
!7356 = !DILocation(line: 5478, column: 8, scope: !7355)
!7357 = !DILocation(line: 5478, column: 15, scope: !7358)
!7358 = distinct !DILexicalBlock(scope: !7355, file: !3, line: 5478, column: 3)
!7359 = !DILocation(line: 5478, column: 3, scope: !7355)
!7360 = !DILocation(line: 5480, column: 11, scope: !7361)
!7361 = distinct !DILexicalBlock(scope: !7362, file: !3, line: 5480, column: 11)
!7362 = distinct !DILexicalBlock(scope: !7358, file: !3, line: 5479, column: 5)
!7363 = !DILocation(line: 5480, column: 17, scope: !7361)
!7364 = !DILocation(line: 5480, column: 30, scope: !7361)
!7365 = !DILocation(line: 5480, column: 11, scope: !7362)
!7366 = !DILocation(line: 5481, column: 8, scope: !7361)
!7367 = !DILocation(line: 5481, column: 14, scope: !7361)
!7368 = !DILocation(line: 5481, column: 2, scope: !7361)
!7369 = !DILocation(line: 5482, column: 18, scope: !7370)
!7370 = distinct !DILexicalBlock(scope: !7362, file: !3, line: 5482, column: 7)
!7371 = !DILocation(line: 5482, column: 24, scope: !7370)
!7372 = !DILocation(line: 5482, column: 16, scope: !7370)
!7373 = !DILocation(line: 5482, column: 12, scope: !7370)
!7374 = !DILocation(line: 5482, column: 38, scope: !7375)
!7375 = distinct !DILexicalBlock(scope: !7370, file: !3, line: 5482, column: 7)
!7376 = !DILocation(line: 5482, column: 42, scope: !7375)
!7377 = !DILocation(line: 5482, column: 7, scope: !7370)
!7378 = !DILocation(line: 5484, column: 11, scope: !7379)
!7379 = distinct !DILexicalBlock(scope: !7375, file: !3, line: 5483, column: 2)
!7380 = !DILocation(line: 5484, column: 16, scope: !7379)
!7381 = !DILocation(line: 5484, column: 9, scope: !7379)
!7382 = !DILocation(line: 5485, column: 10, scope: !7379)
!7383 = !DILocation(line: 5485, column: 4, scope: !7379)
!7384 = !DILocation(line: 5486, column: 2, scope: !7379)
!7385 = !DILocation(line: 5482, column: 57, scope: !7375)
!7386 = !DILocation(line: 5482, column: 55, scope: !7375)
!7387 = !DILocation(line: 5482, column: 7, scope: !7375)
!7388 = distinct !{!7388, !7377, !7389}
!7389 = !DILocation(line: 5486, column: 2, scope: !7370)
!7390 = !DILocation(line: 5487, column: 5, scope: !7362)
!7391 = !DILocation(line: 5478, column: 67, scope: !7358)
!7392 = !DILocation(line: 5478, column: 3, scope: !7358)
!7393 = distinct !{!7393, !7359, !7394}
!7394 = !DILocation(line: 5487, column: 5, scope: !7355)
!7395 = !DILocation(line: 5488, column: 3, scope: !7344)
!7396 = !DILocation(line: 5489, column: 1, scope: !7344)
!7397 = distinct !DISubprogram(name: "try_ready", scope: !3, file: !3, line: 3660, type: !2291, scopeLine: 3661, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!7398 = !DILocalVariable(name: "next", arg: 1, scope: !7397, file: !3, line: 3660, type: !867)
!7399 = !DILocation(line: 3660, column: 16, scope: !7397)
!7400 = !DILocalVariable(name: "old_ts", scope: !7397, file: !3, line: 3662, type: !2099)
!7401 = !DILocation(line: 3662, column: 8, scope: !7397)
!7402 = !DILocalVariable(name: "ts", scope: !7397, file: !3, line: 3662, type: !7403)
!7403 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2099, size: 64)
!7404 = !DILocation(line: 3662, column: 17, scope: !7397)
!7405 = !DILocation(line: 3664, column: 9, scope: !7397)
!7406 = !DILocation(line: 3664, column: 6, scope: !7397)
!7407 = !DILocation(line: 3665, column: 13, scope: !7397)
!7408 = !DILocation(line: 3665, column: 12, scope: !7397)
!7409 = !DILocation(line: 3665, column: 10, scope: !7397)
!7410 = !DILocation(line: 3667, column: 3, scope: !7397)
!7411 = !DILocation(line: 3671, column: 25, scope: !7412)
!7412 = distinct !DILexicalBlock(scope: !7397, file: !3, line: 3671, column: 7)
!7413 = !DILocation(line: 3671, column: 7, scope: !7412)
!7414 = !DILocation(line: 3671, column: 7, scope: !7397)
!7415 = !DILocation(line: 3675, column: 8, scope: !7416)
!7416 = distinct !DILexicalBlock(scope: !7412, file: !3, line: 3673, column: 5)
!7417 = !DILocation(line: 3675, column: 11, scope: !7416)
!7418 = !DILocation(line: 3677, column: 11, scope: !7419)
!7419 = distinct !DILexicalBlock(scope: !7416, file: !3, line: 3677, column: 11)
!7420 = !DILocation(line: 3677, column: 31, scope: !7419)
!7421 = !DILocation(line: 3677, column: 37, scope: !7419)
!7422 = !DILocation(line: 3677, column: 11, scope: !7416)
!7423 = !DILocation(line: 3679, column: 3, scope: !7419)
!7424 = !DILocation(line: 3679, column: 6, scope: !7419)
!7425 = !DILocation(line: 3679, column: 2, scope: !7419)
!7426 = !DILocation(line: 3680, column: 5, scope: !7416)
!7427 = !DILocation(line: 3686, column: 8, scope: !7428)
!7428 = distinct !DILexicalBlock(scope: !7412, file: !3, line: 3682, column: 5)
!7429 = !DILocation(line: 3686, column: 11, scope: !7428)
!7430 = !DILocation(line: 3688, column: 29, scope: !7431)
!7431 = distinct !DILexicalBlock(scope: !7428, file: !3, line: 3688, column: 11)
!7432 = !DILocation(line: 3688, column: 11, scope: !7431)
!7433 = !DILocation(line: 3688, column: 11, scope: !7428)
!7434 = !DILocalVariable(name: "sd_it", scope: !7435, file: !3, line: 3693, type: !2467)
!7435 = distinct !DILexicalBlock(scope: !7431, file: !3, line: 3692, column: 2)
!7436 = !DILocation(line: 3693, column: 20, scope: !7435)
!7437 = !DILocalVariable(name: "dep", scope: !7435, file: !3, line: 3694, type: !2720)
!7438 = !DILocation(line: 3694, column: 10, scope: !7435)
!7439 = !DILocalVariable(name: "first_p", scope: !7435, file: !3, line: 3695, type: !1100)
!7440 = !DILocation(line: 3695, column: 9, scope: !7435)
!7441 = !DILocation(line: 3697, column: 4, scope: !7442)
!7442 = distinct !DILexicalBlock(scope: !7435, file: !3, line: 3697, column: 4)
!7443 = !DILocation(line: 3697, column: 4, scope: !7444)
!7444 = distinct !DILexicalBlock(scope: !7442, file: !3, line: 3697, column: 4)
!7445 = !DILocalVariable(name: "ds", scope: !7446, file: !3, line: 3699, type: !2099)
!7446 = distinct !DILexicalBlock(scope: !7444, file: !3, line: 3698, column: 6)
!7447 = !DILocation(line: 3699, column: 13, scope: !7446)
!7448 = !DILocation(line: 3699, column: 18, scope: !7446)
!7449 = !DILocation(line: 3699, column: 35, scope: !7446)
!7450 = !DILocation(line: 3701, column: 12, scope: !7451)
!7451 = distinct !DILexicalBlock(scope: !7446, file: !3, line: 3701, column: 12)
!7452 = !DILocation(line: 3702, column: 5, scope: !7451)
!7453 = !DILocation(line: 3702, column: 9, scope: !7451)
!7454 = !DILocation(line: 3701, column: 12, scope: !7446)
!7455 = !DILocation(line: 3703, column: 3, scope: !7451)
!7456 = !DILocation(line: 3705, column: 12, scope: !7457)
!7457 = distinct !DILexicalBlock(scope: !7446, file: !3, line: 3705, column: 12)
!7458 = !DILocation(line: 3705, column: 12, scope: !7446)
!7459 = !DILocation(line: 3707, column: 13, scope: !7460)
!7460 = distinct !DILexicalBlock(scope: !7457, file: !3, line: 3706, column: 3)
!7461 = !DILocation(line: 3709, column: 11, scope: !7460)
!7462 = !DILocation(line: 3709, column: 6, scope: !7460)
!7463 = !DILocation(line: 3709, column: 9, scope: !7460)
!7464 = !DILocation(line: 3710, column: 3, scope: !7460)
!7465 = !DILocation(line: 3712, column: 20, scope: !7457)
!7466 = !DILocation(line: 3712, column: 19, scope: !7457)
!7467 = !DILocation(line: 3712, column: 24, scope: !7457)
!7468 = !DILocation(line: 3712, column: 9, scope: !7457)
!7469 = !DILocation(line: 3712, column: 4, scope: !7457)
!7470 = !DILocation(line: 3712, column: 7, scope: !7457)
!7471 = !DILocation(line: 3713, column: 6, scope: !7446)
!7472 = distinct !{!7472, !7441, !7473}
!7473 = !DILocation(line: 3713, column: 6, scope: !7442)
!7474 = !DILocation(line: 3715, column: 18, scope: !7475)
!7475 = distinct !DILexicalBlock(scope: !7435, file: !3, line: 3715, column: 8)
!7476 = !DILocation(line: 3715, column: 17, scope: !7475)
!7477 = !DILocation(line: 3715, column: 8, scope: !7475)
!7478 = !DILocation(line: 3715, column: 24, scope: !7475)
!7479 = !DILocation(line: 3715, column: 35, scope: !7475)
!7480 = !DILocation(line: 3715, column: 22, scope: !7475)
!7481 = !DILocation(line: 3715, column: 8, scope: !7435)
!7482 = !DILocation(line: 3717, column: 14, scope: !7475)
!7483 = !DILocation(line: 3717, column: 13, scope: !7475)
!7484 = !DILocation(line: 3717, column: 17, scope: !7475)
!7485 = !DILocation(line: 3717, column: 33, scope: !7475)
!7486 = !DILocation(line: 3717, column: 7, scope: !7475)
!7487 = !DILocation(line: 3717, column: 10, scope: !7475)
!7488 = !DILocation(line: 3717, column: 6, scope: !7475)
!7489 = !DILocation(line: 3718, column: 2, scope: !7435)
!7490 = !DILocation(line: 3720, column: 3, scope: !7431)
!7491 = !DILocation(line: 3720, column: 6, scope: !7431)
!7492 = !DILocation(line: 3723, column: 8, scope: !7493)
!7493 = distinct !DILexicalBlock(scope: !7397, file: !3, line: 3723, column: 7)
!7494 = !DILocation(line: 3723, column: 7, scope: !7493)
!7495 = !DILocation(line: 3723, column: 11, scope: !7493)
!7496 = !DILocation(line: 3723, column: 7, scope: !7397)
!7497 = !DILocation(line: 3724, column: 5, scope: !7493)
!7498 = !DILocation(line: 3726, column: 12, scope: !7499)
!7499 = distinct !DILexicalBlock(scope: !7493, file: !3, line: 3726, column: 12)
!7500 = !DILocation(line: 3726, column: 32, scope: !7499)
!7501 = !DILocation(line: 3726, column: 12, scope: !7493)
!7502 = !DILocation(line: 3727, column: 11, scope: !7499)
!7503 = !DILocation(line: 3727, column: 31, scope: !7499)
!7504 = !DILocation(line: 3727, column: 42, scope: !7499)
!7505 = !DILocation(line: 3727, column: 49, scope: !7499)
!7506 = !DILocation(line: 3727, column: 48, scope: !7499)
!7507 = !DILocation(line: 3727, column: 6, scope: !7499)
!7508 = !DILocation(line: 3727, column: 9, scope: !7499)
!7509 = !DILocation(line: 3727, column: 5, scope: !7499)
!7510 = !DILocation(line: 3739, column: 9, scope: !7511)
!7511 = distinct !DILexicalBlock(scope: !7397, file: !3, line: 3739, column: 7)
!7512 = !DILocation(line: 3739, column: 8, scope: !7511)
!7513 = !DILocation(line: 3739, column: 12, scope: !7511)
!7514 = !DILocation(line: 3742, column: 7, scope: !7511)
!7515 = !DILocation(line: 3742, column: 11, scope: !7511)
!7516 = !DILocation(line: 3742, column: 10, scope: !7511)
!7517 = !DILocation(line: 3742, column: 17, scope: !7511)
!7518 = !DILocation(line: 3742, column: 14, scope: !7511)
!7519 = !DILocation(line: 3739, column: 7, scope: !7397)
!7520 = !DILocalVariable(name: "res", scope: !7521, file: !3, line: 3744, type: !865)
!7521 = distinct !DILexicalBlock(scope: !7511, file: !3, line: 3743, column: 5)
!7522 = !DILocation(line: 3744, column: 11, scope: !7521)
!7523 = !DILocalVariable(name: "new_pat", scope: !7521, file: !3, line: 3745, type: !867)
!7524 = !DILocation(line: 3745, column: 11, scope: !7521)
!7525 = !DILocation(line: 3747, column: 7, scope: !7521)
!7526 = !DILocation(line: 3749, column: 35, scope: !7521)
!7527 = !DILocation(line: 3749, column: 42, scope: !7521)
!7528 = !DILocation(line: 3749, column: 41, scope: !7521)
!7529 = !DILocation(line: 3749, column: 13, scope: !7521)
!7530 = !DILocation(line: 3749, column: 11, scope: !7521)
!7531 = !DILocation(line: 3751, column: 15, scope: !7521)
!7532 = !DILocation(line: 3751, column: 7, scope: !7521)
!7533 = !DILocation(line: 3757, column: 12, scope: !7534)
!7534 = distinct !DILexicalBlock(scope: !7521, file: !3, line: 3752, column: 2)
!7535 = !DILocation(line: 3757, column: 11, scope: !7534)
!7536 = !DILocation(line: 3757, column: 15, scope: !7534)
!7537 = !DILocation(line: 3757, column: 31, scope: !7534)
!7538 = !DILocation(line: 3757, column: 5, scope: !7534)
!7539 = !DILocation(line: 3757, column: 8, scope: !7534)
!7540 = !DILocation(line: 3758, column: 4, scope: !7534)
!7541 = !DILocation(line: 3763, column: 9, scope: !7542)
!7542 = distinct !DILexicalBlock(scope: !7534, file: !3, line: 3763, column: 8)
!7543 = !DILocation(line: 3763, column: 8, scope: !7534)
!7544 = !DILocation(line: 3764, column: 24, scope: !7542)
!7545 = !DILocation(line: 3764, column: 6, scope: !7542)
!7546 = !DILocation(line: 3764, column: 22, scope: !7542)
!7547 = !DILocation(line: 3765, column: 4, scope: !7534)
!7548 = !DILocation(line: 3768, column: 9, scope: !7549)
!7549 = distinct !DILexicalBlock(scope: !7534, file: !3, line: 3768, column: 8)
!7550 = !DILocation(line: 3768, column: 8, scope: !7534)
!7551 = !DILocation(line: 3771, column: 24, scope: !7549)
!7552 = !DILocation(line: 3771, column: 6, scope: !7549)
!7553 = !DILocation(line: 3771, column: 22, scope: !7549)
!7554 = !DILocation(line: 3773, column: 26, scope: !7534)
!7555 = !DILocation(line: 3773, column: 32, scope: !7534)
!7556 = !DILocation(line: 3773, column: 4, scope: !7534)
!7557 = !DILocation(line: 3774, column: 4, scope: !7534)
!7558 = !DILocation(line: 3777, column: 4, scope: !7534)
!7559 = !DILocation(line: 3778, column: 2, scope: !7534)
!7560 = !DILocation(line: 3779, column: 5, scope: !7521)
!7561 = !DILocation(line: 3785, column: 3, scope: !7397)
!7562 = !DILocation(line: 3788, column: 8, scope: !7563)
!7563 = distinct !DILexicalBlock(scope: !7397, file: !3, line: 3788, column: 7)
!7564 = !DILocation(line: 3788, column: 7, scope: !7563)
!7565 = !DILocation(line: 3788, column: 11, scope: !7563)
!7566 = !DILocation(line: 3788, column: 7, scope: !7397)
!7567 = !DILocation(line: 3795, column: 27, scope: !7568)
!7568 = distinct !DILexicalBlock(scope: !7563, file: !3, line: 3789, column: 5)
!7569 = !DILocation(line: 3795, column: 7, scope: !7568)
!7570 = !DILocation(line: 3796, column: 7, scope: !7568)
!7571 = !DILocation(line: 3798, column: 15, scope: !7572)
!7572 = distinct !DILexicalBlock(scope: !7563, file: !3, line: 3798, column: 12)
!7573 = !DILocation(line: 3798, column: 14, scope: !7572)
!7574 = !DILocation(line: 3798, column: 18, scope: !7572)
!7575 = !DILocation(line: 3798, column: 32, scope: !7572)
!7576 = !DILocation(line: 3798, column: 35, scope: !7572)
!7577 = !DILocation(line: 3798, column: 51, scope: !7572)
!7578 = !DILocation(line: 3798, column: 55, scope: !7572)
!7579 = !DILocation(line: 3798, column: 12, scope: !7563)
!7580 = !DILocation(line: 3804, column: 29, scope: !7581)
!7581 = distinct !DILexicalBlock(scope: !7572, file: !3, line: 3803, column: 5)
!7582 = !DILocation(line: 3804, column: 35, scope: !7581)
!7583 = !DILocation(line: 3804, column: 7, scope: !7581)
!7584 = !DILocation(line: 3805, column: 7, scope: !7581)
!7585 = !DILocation(line: 3805, column: 23, scope: !7581)
!7586 = !DILocation(line: 3806, column: 5, scope: !7581)
!7587 = !DILocation(line: 3808, column: 7, scope: !7588)
!7588 = distinct !DILexicalBlock(scope: !7397, file: !3, line: 3808, column: 7)
!7589 = !DILocation(line: 3808, column: 21, scope: !7588)
!7590 = !DILocation(line: 3808, column: 7, scope: !7397)
!7591 = !DILocalVariable(name: "s", scope: !7592, file: !3, line: 3810, type: !865)
!7592 = distinct !DILexicalBlock(scope: !7588, file: !3, line: 3809, column: 5)
!7593 = !DILocation(line: 3810, column: 11, scope: !7592)
!7594 = !DILocation(line: 3810, column: 15, scope: !7592)
!7595 = !DILocation(line: 3812, column: 16, scope: !7592)
!7596 = !DILocation(line: 3813, column: 18, scope: !7592)
!7597 = !DILocation(line: 3813, column: 38, scope: !7592)
!7598 = !DILocation(line: 3813, column: 51, scope: !7592)
!7599 = !DILocation(line: 3813, column: 16, scope: !7592)
!7600 = !DILocation(line: 3812, column: 7, scope: !7592)
!7601 = !DILocation(line: 3815, column: 11, scope: !7602)
!7602 = distinct !DILexicalBlock(scope: !7592, file: !3, line: 3815, column: 11)
!7603 = !DILocation(line: 3815, column: 21, scope: !7602)
!7604 = !DILocation(line: 3815, column: 24, scope: !7602)
!7605 = !DILocation(line: 3815, column: 35, scope: !7602)
!7606 = !DILocation(line: 3815, column: 11, scope: !7592)
!7607 = !DILocation(line: 3817, column: 15, scope: !7608)
!7608 = distinct !DILexicalBlock(scope: !7609, file: !3, line: 3817, column: 15)
!7609 = distinct !DILexicalBlock(scope: !7602, file: !3, line: 3816, column: 9)
!7610 = !DILocation(line: 3817, column: 17, scope: !7608)
!7611 = !DILocation(line: 3817, column: 15, scope: !7609)
!7612 = !DILocation(line: 3818, column: 22, scope: !7608)
!7613 = !DILocation(line: 3818, column: 33, scope: !7608)
!7614 = !DILocation(line: 3818, column: 13, scope: !7608)
!7615 = !DILocation(line: 3819, column: 15, scope: !7616)
!7616 = distinct !DILexicalBlock(scope: !7609, file: !3, line: 3819, column: 15)
!7617 = !DILocation(line: 3819, column: 17, scope: !7616)
!7618 = !DILocation(line: 3819, column: 15, scope: !7609)
!7619 = !DILocation(line: 3820, column: 22, scope: !7616)
!7620 = !DILocation(line: 3820, column: 33, scope: !7616)
!7621 = !DILocation(line: 3820, column: 13, scope: !7616)
!7622 = !DILocation(line: 3821, column: 15, scope: !7623)
!7623 = distinct !DILexicalBlock(scope: !7609, file: !3, line: 3821, column: 15)
!7624 = !DILocation(line: 3821, column: 17, scope: !7623)
!7625 = !DILocation(line: 3821, column: 15, scope: !7609)
!7626 = !DILocation(line: 3822, column: 22, scope: !7623)
!7627 = !DILocation(line: 3822, column: 33, scope: !7623)
!7628 = !DILocation(line: 3822, column: 13, scope: !7623)
!7629 = !DILocation(line: 3823, column: 9, scope: !7609)
!7630 = !DILocation(line: 3825, column: 16, scope: !7592)
!7631 = !DILocation(line: 3825, column: 7, scope: !7592)
!7632 = !DILocation(line: 3826, column: 5, scope: !7592)
!7633 = !DILocation(line: 3828, column: 20, scope: !7397)
!7634 = !DILocation(line: 3828, column: 3, scope: !7397)
!7635 = !DILocation(line: 3830, column: 26, scope: !7397)
!7636 = !DILocation(line: 3830, column: 10, scope: !7397)
!7637 = !DILocation(line: 3830, column: 3, scope: !7397)
!7638 = !DILocation(line: 3831, column: 1, scope: !7397)
!7639 = !DILocalVariable(name: "insn", arg: 1, scope: !2464, file: !398, line: 1427, type: !867)
!7640 = !DILocation(line: 1427, column: 24, scope: !2464)
!7641 = !DILocalVariable(name: "types", arg: 2, scope: !2464, file: !398, line: 1427, type: !2471)
!7642 = !DILocation(line: 1427, column: 48, scope: !2464)
!7643 = !DILocalVariable(name: "i", scope: !2464, file: !398, line: 1432, type: !2467)
!7644 = !DILocation(line: 1432, column: 19, scope: !2464)
!7645 = !DILocation(line: 1434, column: 13, scope: !2464)
!7646 = !DILocation(line: 1434, column: 5, scope: !2464)
!7647 = !DILocation(line: 1434, column: 11, scope: !2464)
!7648 = !DILocation(line: 1435, column: 12, scope: !2464)
!7649 = !DILocation(line: 1435, column: 5, scope: !2464)
!7650 = !DILocation(line: 1435, column: 10, scope: !2464)
!7651 = !DILocation(line: 1436, column: 5, scope: !2464)
!7652 = !DILocation(line: 1436, column: 11, scope: !2464)
!7653 = !DILocation(line: 1439, column: 5, scope: !2464)
!7654 = !DILocation(line: 1439, column: 16, scope: !2464)
!7655 = !DILocation(line: 1441, column: 3, scope: !2464)
!7656 = distinct !DISubprogram(name: "sd_iterator_cond", scope: !398, file: !398, line: 1446, type: !7657, scopeLine: 1447, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!7657 = !DISubroutineType(types: !7658)
!7658 = !{!1100, !7659, !7660}
!7659 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2467, size: 64)
!7660 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2720, size: 64)
!7661 = !DILocalVariable(name: "it_ptr", arg: 1, scope: !7656, file: !398, line: 1446, type: !7659)
!7662 = !DILocation(line: 1446, column: 36, scope: !7656)
!7663 = !DILocalVariable(name: "dep_ptr", arg: 2, scope: !7656, file: !398, line: 1446, type: !7660)
!7664 = !DILocation(line: 1446, column: 51, scope: !7656)
!7665 = !DILocalVariable(name: "link", scope: !7656, file: !398, line: 1448, type: !2475)
!7666 = !DILocation(line: 1448, column: 14, scope: !7656)
!7667 = !DILocation(line: 1448, column: 22, scope: !7656)
!7668 = !DILocation(line: 1448, column: 30, scope: !7656)
!7669 = !DILocation(line: 1448, column: 21, scope: !7656)
!7670 = !DILocation(line: 1450, column: 7, scope: !7671)
!7671 = distinct !DILexicalBlock(scope: !7656, file: !398, line: 1450, column: 7)
!7672 = !DILocation(line: 1450, column: 12, scope: !7671)
!7673 = !DILocation(line: 1450, column: 7, scope: !7656)
!7674 = !DILocation(line: 1452, column: 18, scope: !7675)
!7675 = distinct !DILexicalBlock(scope: !7671, file: !398, line: 1451, column: 5)
!7676 = !DILocation(line: 1452, column: 8, scope: !7675)
!7677 = !DILocation(line: 1452, column: 16, scope: !7675)
!7678 = !DILocation(line: 1453, column: 7, scope: !7675)
!7679 = !DILocalVariable(name: "types", scope: !7680, file: !398, line: 1457, type: !2471)
!7680 = distinct !DILexicalBlock(scope: !7671, file: !398, line: 1456, column: 5)
!7681 = !DILocation(line: 1457, column: 25, scope: !7680)
!7682 = !DILocation(line: 1457, column: 33, scope: !7680)
!7683 = !DILocation(line: 1457, column: 41, scope: !7680)
!7684 = !DILocation(line: 1459, column: 11, scope: !7685)
!7685 = distinct !DILexicalBlock(scope: !7680, file: !398, line: 1459, column: 11)
!7686 = !DILocation(line: 1459, column: 17, scope: !7685)
!7687 = !DILocation(line: 1459, column: 11, scope: !7680)
!7688 = !DILocalVariable(name: "list", scope: !7689, file: !398, line: 1462, type: !7690)
!7689 = distinct !DILexicalBlock(scope: !7685, file: !398, line: 1461, column: 2)
!7690 = !DIDerivedType(tag: DW_TAG_typedef, name: "deps_list_t", file: !398, line: 305, baseType: !7691)
!7691 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7692, size: 64)
!7692 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_deps_list", file: !398, line: 297, size: 128, elements: !7693)
!7693 = !{!7694, !7695}
!7694 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !7692, file: !398, line: 300, baseType: !2475, size: 64)
!7695 = !DIDerivedType(tag: DW_TAG_member, name: "n_links", scope: !7692, file: !398, line: 303, baseType: !865, size: 32, offset: 64)
!7696 = !DILocation(line: 1462, column: 16, scope: !7689)
!7697 = !DILocation(line: 1464, column: 18, scope: !7689)
!7698 = !DILocation(line: 1464, column: 26, scope: !7689)
!7699 = !DILocation(line: 1465, column: 5, scope: !7689)
!7700 = !DILocation(line: 1465, column: 13, scope: !7689)
!7701 = !DILocation(line: 1465, column: 28, scope: !7689)
!7702 = !DILocation(line: 1465, column: 36, scope: !7689)
!7703 = !DILocation(line: 1464, column: 4, scope: !7689)
!7704 = !DILocation(line: 1467, column: 21, scope: !7689)
!7705 = !DILocation(line: 1467, column: 4, scope: !7689)
!7706 = !DILocation(line: 1467, column: 12, scope: !7689)
!7707 = !DILocation(line: 1467, column: 18, scope: !7689)
!7708 = !DILocation(line: 1469, column: 8, scope: !7709)
!7709 = distinct !DILexicalBlock(scope: !7689, file: !398, line: 1469, column: 8)
!7710 = !DILocation(line: 1469, column: 8, scope: !7689)
!7711 = !DILocation(line: 1470, column: 31, scope: !7709)
!7712 = !DILocation(line: 1470, column: 39, scope: !7709)
!7713 = !DILocation(line: 1470, column: 13, scope: !7709)
!7714 = !DILocation(line: 1470, column: 6, scope: !7709)
!7715 = !DILocation(line: 1471, column: 2, scope: !7689)
!7716 = !DILocation(line: 1473, column: 8, scope: !7680)
!7717 = !DILocation(line: 1473, column: 16, scope: !7680)
!7718 = !DILocation(line: 1474, column: 7, scope: !7680)
!7719 = !DILocation(line: 1476, column: 1, scope: !7656)
!7720 = distinct !DISubprogram(name: "sd_iterator_next", scope: !398, file: !398, line: 1480, type: !7721, scopeLine: 1481, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!7721 = !DISubroutineType(types: !7722)
!7722 = !{null, !7659}
!7723 = !DILocalVariable(name: "it_ptr", arg: 1, scope: !7720, file: !398, line: 1480, type: !7659)
!7724 = !DILocation(line: 1480, column: 36, scope: !7720)
!7725 = !DILocation(line: 1482, column: 20, scope: !7720)
!7726 = !DILocation(line: 1482, column: 3, scope: !7720)
!7727 = !DILocation(line: 1482, column: 11, scope: !7720)
!7728 = !DILocation(line: 1482, column: 17, scope: !7720)
!7729 = !DILocation(line: 1483, column: 1, scope: !7720)
!7730 = distinct !DISubprogram(name: "haifa_speculate_insn", scope: !3, file: !3, line: 4833, type: !7731, scopeLine: 4834, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!7731 = !DISubroutineType(types: !7732)
!7732 = !{!865, !867, !2099, !2098}
!7733 = !DILocalVariable(name: "insn", arg: 1, scope: !7730, file: !3, line: 4833, type: !867)
!7734 = !DILocation(line: 4833, column: 27, scope: !7730)
!7735 = !DILocalVariable(name: "request", arg: 2, scope: !7730, file: !3, line: 4833, type: !2099)
!7736 = !DILocation(line: 4833, column: 38, scope: !7730)
!7737 = !DILocalVariable(name: "new_pat", arg: 3, scope: !7730, file: !3, line: 4833, type: !2098)
!7738 = !DILocation(line: 4833, column: 52, scope: !7730)
!7739 = !DILocation(line: 4835, column: 3, scope: !7730)
!7740 = !DILocation(line: 4838, column: 7, scope: !7741)
!7741 = distinct !DILexicalBlock(scope: !7730, file: !3, line: 4838, column: 7)
!7742 = !DILocation(line: 4839, column: 7, scope: !7741)
!7743 = !DILocation(line: 4839, column: 10, scope: !7741)
!7744 = !DILocation(line: 4838, column: 7, scope: !7730)
!7745 = !DILocation(line: 4840, column: 5, scope: !7741)
!7746 = !DILocation(line: 4842, column: 32, scope: !7730)
!7747 = !DILocation(line: 4842, column: 38, scope: !7730)
!7748 = !DILocation(line: 4842, column: 47, scope: !7730)
!7749 = !DILocation(line: 4842, column: 10, scope: !7730)
!7750 = !DILocation(line: 4842, column: 3, scope: !7730)
!7751 = !DILocation(line: 4843, column: 1, scope: !7730)
!7752 = distinct !DISubprogram(name: "haifa_change_pattern", scope: !3, file: !3, line: 4801, type: !2407, scopeLine: 4802, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!7753 = !DILocalVariable(name: "insn", arg: 1, scope: !7752, file: !3, line: 4801, type: !867)
!7754 = !DILocation(line: 4801, column: 27, scope: !7752)
!7755 = !DILocalVariable(name: "new_pat", arg: 2, scope: !7752, file: !3, line: 4801, type: !867)
!7756 = !DILocation(line: 4801, column: 37, scope: !7752)
!7757 = !DILocation(line: 4803, column: 25, scope: !7752)
!7758 = !DILocation(line: 4803, column: 31, scope: !7752)
!7759 = !DILocation(line: 4803, column: 3, scope: !7752)
!7760 = !DILocation(line: 4806, column: 3, scope: !7752)
!7761 = !DILocation(line: 4806, column: 20, scope: !7752)
!7762 = !DILocation(line: 4808, column: 22, scope: !7752)
!7763 = !DILocation(line: 4808, column: 3, scope: !7752)
!7764 = !DILocation(line: 4808, column: 20, scope: !7752)
!7765 = !DILocation(line: 4809, column: 1, scope: !7752)
!7766 = distinct !DISubprogram(name: "change_queue_index", scope: !3, file: !3, line: 3884, type: !2403, scopeLine: 3885, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!7767 = !DILocalVariable(name: "next", arg: 1, scope: !7766, file: !3, line: 3884, type: !867)
!7768 = !DILocation(line: 3884, column: 25, scope: !7766)
!7769 = !DILocalVariable(name: "delay", arg: 2, scope: !7766, file: !3, line: 3884, type: !865)
!7770 = !DILocation(line: 3884, column: 35, scope: !7766)
!7771 = !DILocalVariable(name: "i", scope: !7766, file: !3, line: 3886, type: !865)
!7772 = !DILocation(line: 3886, column: 7, scope: !7766)
!7773 = !DILocation(line: 3886, column: 11, scope: !7766)
!7774 = !DILocation(line: 3888, column: 3, scope: !7766)
!7775 = !DILocation(line: 3890, column: 3, scope: !7766)
!7776 = !DILocation(line: 3892, column: 8, scope: !7777)
!7777 = distinct !DILexicalBlock(scope: !7766, file: !3, line: 3892, column: 7)
!7778 = !DILocation(line: 3892, column: 14, scope: !7777)
!7779 = !DILocation(line: 3892, column: 18, scope: !7777)
!7780 = !DILocation(line: 3892, column: 21, scope: !7777)
!7781 = !DILocation(line: 3892, column: 52, scope: !7777)
!7782 = !DILocation(line: 3892, column: 49, scope: !7777)
!7783 = !DILocation(line: 3893, column: 7, scope: !7777)
!7784 = !DILocation(line: 3893, column: 11, scope: !7777)
!7785 = !DILocation(line: 3893, column: 17, scope: !7777)
!7786 = !DILocation(line: 3893, column: 21, scope: !7777)
!7787 = !DILocation(line: 3893, column: 24, scope: !7777)
!7788 = !DILocation(line: 3893, column: 33, scope: !7777)
!7789 = !DILocation(line: 3893, column: 30, scope: !7777)
!7790 = !DILocation(line: 3892, column: 7, scope: !7766)
!7791 = !DILocation(line: 3895, column: 5, scope: !7777)
!7792 = !DILocation(line: 3898, column: 7, scope: !7793)
!7793 = distinct !DILexicalBlock(scope: !7766, file: !3, line: 3898, column: 7)
!7794 = !DILocation(line: 3898, column: 9, scope: !7793)
!7795 = !DILocation(line: 3898, column: 7, scope: !7766)
!7796 = !DILocation(line: 3899, column: 24, scope: !7793)
!7797 = !DILocation(line: 3899, column: 5, scope: !7793)
!7798 = !DILocation(line: 3900, column: 12, scope: !7799)
!7799 = distinct !DILexicalBlock(scope: !7793, file: !3, line: 3900, column: 12)
!7800 = !DILocation(line: 3900, column: 14, scope: !7799)
!7801 = !DILocation(line: 3900, column: 12, scope: !7793)
!7802 = !DILocation(line: 3901, column: 19, scope: !7799)
!7803 = !DILocation(line: 3901, column: 5, scope: !7799)
!7804 = !DILocation(line: 3904, column: 7, scope: !7805)
!7805 = distinct !DILexicalBlock(scope: !7766, file: !3, line: 3904, column: 7)
!7806 = !DILocation(line: 3904, column: 13, scope: !7805)
!7807 = !DILocation(line: 3904, column: 7, scope: !7766)
!7808 = !DILocation(line: 3905, column: 16, scope: !7805)
!7809 = !DILocation(line: 3905, column: 24, scope: !7805)
!7810 = !DILocation(line: 3905, column: 5, scope: !7805)
!7811 = !DILocation(line: 3906, column: 12, scope: !7812)
!7812 = distinct !DILexicalBlock(scope: !7805, file: !3, line: 3906, column: 12)
!7813 = !DILocation(line: 3906, column: 18, scope: !7812)
!7814 = !DILocation(line: 3906, column: 12, scope: !7805)
!7815 = !DILocation(line: 3907, column: 17, scope: !7812)
!7816 = !DILocation(line: 3907, column: 23, scope: !7812)
!7817 = !DILocation(line: 3907, column: 5, scope: !7812)
!7818 = !DILocation(line: 3909, column: 7, scope: !7819)
!7819 = distinct !DILexicalBlock(scope: !7766, file: !3, line: 3909, column: 7)
!7820 = !DILocation(line: 3909, column: 21, scope: !7819)
!7821 = !DILocation(line: 3909, column: 7, scope: !7766)
!7822 = !DILocation(line: 3911, column: 16, scope: !7823)
!7823 = distinct !DILexicalBlock(scope: !7819, file: !3, line: 3910, column: 5)
!7824 = !DILocation(line: 3912, column: 11, scope: !7823)
!7825 = !DILocation(line: 3912, column: 31, scope: !7823)
!7826 = !DILocation(line: 3912, column: 44, scope: !7823)
!7827 = !DILocation(line: 3912, column: 9, scope: !7823)
!7828 = !DILocation(line: 3911, column: 7, scope: !7823)
!7829 = !DILocation(line: 3914, column: 11, scope: !7830)
!7830 = distinct !DILexicalBlock(scope: !7823, file: !3, line: 3914, column: 11)
!7831 = !DILocation(line: 3914, column: 17, scope: !7830)
!7832 = !DILocation(line: 3914, column: 11, scope: !7823)
!7833 = !DILocation(line: 3915, column: 11, scope: !7830)
!7834 = !DILocation(line: 3915, column: 2, scope: !7830)
!7835 = !DILocation(line: 3916, column: 16, scope: !7836)
!7836 = distinct !DILexicalBlock(scope: !7830, file: !3, line: 3916, column: 16)
!7837 = !DILocation(line: 3916, column: 22, scope: !7836)
!7838 = !DILocation(line: 3916, column: 16, scope: !7830)
!7839 = !DILocation(line: 3917, column: 11, scope: !7836)
!7840 = !DILocation(line: 3917, column: 53, scope: !7836)
!7841 = !DILocation(line: 3917, column: 2, scope: !7836)
!7842 = !DILocation(line: 3919, column: 11, scope: !7836)
!7843 = !DILocation(line: 3919, column: 2, scope: !7836)
!7844 = !DILocation(line: 3920, column: 5, scope: !7823)
!7845 = !DILocation(line: 3921, column: 1, scope: !7766)
!7846 = distinct !DISubprogram(name: "adjust_priority", scope: !3, file: !3, line: 1521, type: !2350, scopeLine: 1522, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!7847 = !DILocalVariable(name: "prev", arg: 1, scope: !7846, file: !3, line: 1521, type: !867)
!7848 = !DILocation(line: 1521, column: 22, scope: !7846)
!7849 = !DILocation(line: 1530, column: 21, scope: !7850)
!7850 = distinct !DILexicalBlock(scope: !7846, file: !3, line: 1530, column: 7)
!7851 = !DILocation(line: 1530, column: 7, scope: !7850)
!7852 = !DILocation(line: 1530, column: 7, scope: !7846)
!7853 = !DILocation(line: 1532, column: 21, scope: !7850)
!7854 = !DILocation(line: 1532, column: 38, scope: !7850)
!7855 = !DILocation(line: 1532, column: 44, scope: !7850)
!7856 = !DILocation(line: 1532, column: 7, scope: !7850)
!7857 = !DILocation(line: 1531, column: 5, scope: !7850)
!7858 = !DILocation(line: 1531, column: 26, scope: !7850)
!7859 = !DILocation(line: 1533, column: 1, scope: !7846)
!7860 = distinct !DISubprogram(name: "fix_tick_ready", scope: !3, file: !3, line: 3835, type: !2291, scopeLine: 3836, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!7861 = !DILocalVariable(name: "next", arg: 1, scope: !7860, file: !3, line: 3835, type: !867)
!7862 = !DILocation(line: 3835, column: 21, scope: !7860)
!7863 = !DILocalVariable(name: "tick", scope: !7860, file: !3, line: 3837, type: !865)
!7864 = !DILocation(line: 3837, column: 7, scope: !7860)
!7865 = !DILocalVariable(name: "delay", scope: !7860, file: !3, line: 3837, type: !865)
!7866 = !DILocation(line: 3837, column: 13, scope: !7860)
!7867 = !DILocation(line: 3839, column: 26, scope: !7868)
!7868 = distinct !DILexicalBlock(scope: !7860, file: !3, line: 3839, column: 7)
!7869 = !DILocation(line: 3839, column: 8, scope: !7868)
!7870 = !DILocation(line: 3839, column: 7, scope: !7860)
!7871 = !DILocalVariable(name: "full_p", scope: !7872, file: !3, line: 3841, type: !865)
!7872 = distinct !DILexicalBlock(scope: !7868, file: !3, line: 3840, column: 5)
!7873 = !DILocation(line: 3841, column: 11, scope: !7872)
!7874 = !DILocalVariable(name: "sd_it", scope: !7872, file: !3, line: 3842, type: !2467)
!7875 = !DILocation(line: 3842, column: 23, scope: !7872)
!7876 = !DILocalVariable(name: "dep", scope: !7872, file: !3, line: 3843, type: !2720)
!7877 = !DILocation(line: 3843, column: 13, scope: !7872)
!7878 = !DILocation(line: 3845, column: 14, scope: !7872)
!7879 = !DILocation(line: 3845, column: 12, scope: !7872)
!7880 = !DILocation(line: 3849, column: 17, scope: !7872)
!7881 = !DILocation(line: 3849, column: 25, scope: !7872)
!7882 = !DILocation(line: 3849, column: 22, scope: !7872)
!7883 = !DILocation(line: 3849, column: 14, scope: !7872)
!7884 = !DILocation(line: 3851, column: 7, scope: !7885)
!7885 = distinct !DILexicalBlock(scope: !7872, file: !3, line: 3851, column: 7)
!7886 = !DILocation(line: 3851, column: 7, scope: !7887)
!7887 = distinct !DILexicalBlock(scope: !7885, file: !3, line: 3851, column: 7)
!7888 = !DILocalVariable(name: "pro", scope: !7889, file: !3, line: 3853, type: !867)
!7889 = distinct !DILexicalBlock(scope: !7887, file: !3, line: 3852, column: 9)
!7890 = !DILocation(line: 3853, column: 15, scope: !7889)
!7891 = !DILocation(line: 3853, column: 21, scope: !7889)
!7892 = !DILocalVariable(name: "tick1", scope: !7889, file: !3, line: 3854, type: !865)
!7893 = !DILocation(line: 3854, column: 15, scope: !7889)
!7894 = !DILocation(line: 3856, column: 4, scope: !7889)
!7895 = !DILocation(line: 3858, column: 19, scope: !7889)
!7896 = !DILocation(line: 3858, column: 47, scope: !7889)
!7897 = !DILocation(line: 3858, column: 37, scope: !7889)
!7898 = !DILocation(line: 3858, column: 35, scope: !7889)
!7899 = !DILocation(line: 3858, column: 17, scope: !7889)
!7900 = !DILocation(line: 3859, column: 15, scope: !7901)
!7901 = distinct !DILexicalBlock(scope: !7889, file: !3, line: 3859, column: 15)
!7902 = !DILocation(line: 3859, column: 23, scope: !7901)
!7903 = !DILocation(line: 3859, column: 21, scope: !7901)
!7904 = !DILocation(line: 3859, column: 15, scope: !7889)
!7905 = !DILocation(line: 3860, column: 20, scope: !7901)
!7906 = !DILocation(line: 3860, column: 18, scope: !7901)
!7907 = !DILocation(line: 3860, column: 13, scope: !7901)
!7908 = !DILocation(line: 3862, column: 9, scope: !7909)
!7909 = distinct !DILexicalBlock(scope: !7889, file: !3, line: 3862, column: 8)
!7910 = !DILocation(line: 3862, column: 8, scope: !7889)
!7911 = !DILocation(line: 3863, column: 6, scope: !7909)
!7912 = !DILocation(line: 3864, column: 9, scope: !7889)
!7913 = distinct !{!7913, !7884, !7914}
!7914 = !DILocation(line: 3864, column: 9, scope: !7885)
!7915 = !DILocation(line: 3865, column: 5, scope: !7872)
!7916 = !DILocation(line: 3867, column: 10, scope: !7868)
!7917 = !DILocation(line: 3869, column: 22, scope: !7860)
!7918 = !DILocation(line: 3869, column: 3, scope: !7860)
!7919 = !DILocation(line: 3869, column: 20, scope: !7860)
!7920 = !DILocation(line: 3871, column: 11, scope: !7860)
!7921 = !DILocation(line: 3871, column: 18, scope: !7860)
!7922 = !DILocation(line: 3871, column: 16, scope: !7860)
!7923 = !DILocation(line: 3871, column: 9, scope: !7860)
!7924 = !DILocation(line: 3872, column: 7, scope: !7925)
!7925 = distinct !DILexicalBlock(scope: !7860, file: !3, line: 3872, column: 7)
!7926 = !DILocation(line: 3872, column: 13, scope: !7925)
!7927 = !DILocation(line: 3872, column: 18, scope: !7925)
!7928 = !DILocation(line: 3872, column: 21, scope: !7925)
!7929 = !DILocation(line: 3872, column: 7, scope: !7860)
!7930 = !DILocation(line: 3873, column: 11, scope: !7925)
!7931 = !DILocation(line: 3873, column: 5, scope: !7925)
!7932 = !DILocation(line: 3875, column: 23, scope: !7860)
!7933 = !DILocation(line: 3875, column: 29, scope: !7860)
!7934 = !DILocation(line: 3875, column: 3, scope: !7860)
!7935 = !DILocation(line: 3877, column: 10, scope: !7860)
!7936 = !DILocation(line: 3877, column: 3, scope: !7860)
!7937 = distinct !DISubprogram(name: "sched_extend_ready_list", scope: !3, file: !3, line: 3927, type: !7938, scopeLine: 3928, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!7938 = !DISubroutineType(types: !7939)
!7939 = !{null, !865}
!7940 = !DILocalVariable(name: "new_sched_ready_n_insns", arg: 1, scope: !7937, file: !3, line: 3927, type: !865)
!7941 = !DILocation(line: 3927, column: 30, scope: !7937)
!7942 = !DILocalVariable(name: "i", scope: !7937, file: !3, line: 3929, type: !865)
!7943 = !DILocation(line: 3929, column: 7, scope: !7937)
!7944 = !DILocation(line: 3931, column: 7, scope: !7945)
!7945 = distinct !DILexicalBlock(scope: !7937, file: !3, line: 3931, column: 7)
!7946 = !DILocation(line: 3931, column: 27, scope: !7945)
!7947 = !DILocation(line: 3931, column: 7, scope: !7937)
!7948 = !DILocation(line: 3935, column: 9, scope: !7949)
!7949 = distinct !DILexicalBlock(scope: !7945, file: !3, line: 3934, column: 5)
!7950 = !DILocation(line: 3936, column: 27, scope: !7949)
!7951 = !DILocation(line: 3937, column: 5, scope: !7949)
!7952 = !DILocation(line: 3939, column: 9, scope: !7945)
!7953 = !DILocation(line: 3939, column: 29, scope: !7945)
!7954 = !DILocation(line: 3939, column: 7, scope: !7945)
!7955 = !DILocation(line: 3941, column: 18, scope: !7937)
!7956 = !DILocation(line: 3941, column: 44, scope: !7937)
!7957 = !DILocation(line: 3941, column: 42, scope: !7937)
!7958 = !DILocation(line: 3941, column: 16, scope: !7937)
!7959 = !DILocation(line: 3942, column: 15, scope: !7937)
!7960 = !DILocation(line: 3942, column: 13, scope: !7937)
!7961 = !DILocation(line: 3944, column: 3, scope: !7937)
!7962 = !DILocation(line: 3946, column: 35, scope: !7937)
!7963 = !DILocation(line: 3946, column: 46, scope: !7937)
!7964 = !DILocation(line: 3947, column: 35, scope: !7937)
!7965 = !DILocation(line: 3946, column: 24, scope: !7937)
!7966 = !DILocation(line: 3946, column: 13, scope: !7937)
!7967 = !DILocation(line: 3951, column: 18, scope: !7937)
!7968 = !DILocation(line: 3951, column: 16, scope: !7937)
!7969 = !DILocation(line: 3954, column: 3, scope: !7937)
!7970 = !DILocation(line: 3954, column: 10, scope: !7971)
!7971 = distinct !DILexicalBlock(scope: !7972, file: !3, line: 3954, column: 3)
!7972 = distinct !DILexicalBlock(scope: !7937, file: !3, line: 3954, column: 3)
!7973 = !DILocation(line: 3954, column: 15, scope: !7971)
!7974 = !DILocation(line: 3954, column: 12, scope: !7971)
!7975 = !DILocation(line: 3954, column: 3, scope: !7972)
!7976 = !DILocation(line: 3955, column: 38, scope: !7971)
!7977 = !DILocation(line: 3955, column: 29, scope: !7971)
!7978 = !DILocation(line: 3955, column: 5, scope: !7971)
!7979 = !DILocation(line: 3955, column: 18, scope: !7971)
!7980 = !DILocation(line: 3955, column: 21, scope: !7971)
!7981 = !DILocation(line: 3955, column: 27, scope: !7971)
!7982 = !DILocation(line: 3954, column: 41, scope: !7971)
!7983 = !DILocation(line: 3954, column: 3, scope: !7971)
!7984 = distinct !{!7984, !7975, !7985}
!7985 = !DILocation(line: 3955, column: 52, scope: !7972)
!7986 = !DILocation(line: 3957, column: 25, scope: !7937)
!7987 = !DILocation(line: 3957, column: 23, scope: !7937)
!7988 = !DILocation(line: 3958, column: 1, scope: !7937)
!7989 = distinct !DISubprogram(name: "xrecalloc", scope: !3, file: !3, line: 4220, type: !7990, scopeLine: 4221, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!7990 = !DISubroutineType(types: !7991)
!7991 = !{!866, !866, !1344, !1344, !1344}
!7992 = !DILocalVariable(name: "p", arg: 1, scope: !7989, file: !3, line: 4220, type: !866)
!7993 = !DILocation(line: 4220, column: 18, scope: !7989)
!7994 = !DILocalVariable(name: "new_nmemb", arg: 2, scope: !7989, file: !3, line: 4220, type: !1344)
!7995 = !DILocation(line: 4220, column: 28, scope: !7989)
!7996 = !DILocalVariable(name: "old_nmemb", arg: 3, scope: !7989, file: !3, line: 4220, type: !1344)
!7997 = !DILocation(line: 4220, column: 46, scope: !7989)
!7998 = !DILocalVariable(name: "size", arg: 4, scope: !7989, file: !3, line: 4220, type: !1344)
!7999 = !DILocation(line: 4220, column: 64, scope: !7989)
!8000 = !DILocation(line: 4222, column: 3, scope: !7989)
!8001 = !DILocation(line: 4223, column: 7, scope: !7989)
!8002 = !DILocation(line: 4223, column: 5, scope: !7989)
!8003 = !DILocation(line: 4224, column: 21, scope: !7989)
!8004 = !DILocation(line: 4224, column: 26, scope: !7989)
!8005 = !DILocation(line: 4224, column: 38, scope: !7989)
!8006 = !DILocation(line: 4224, column: 36, scope: !7989)
!8007 = !DILocation(line: 4224, column: 24, scope: !7989)
!8008 = !DILocation(line: 4224, column: 48, scope: !7989)
!8009 = !DILocation(line: 4224, column: 60, scope: !7989)
!8010 = !DILocation(line: 4224, column: 58, scope: !7989)
!8011 = !DILocation(line: 4224, column: 73, scope: !7989)
!8012 = !DILocation(line: 4224, column: 71, scope: !7989)
!8013 = !DILocation(line: 4224, column: 3, scope: !7989)
!8014 = !DILocation(line: 4225, column: 10, scope: !7989)
!8015 = !DILocation(line: 4225, column: 3, scope: !7989)
!8016 = distinct !DISubprogram(name: "sched_finish_ready_list", scope: !3, file: !3, line: 3962, type: !2341, scopeLine: 3963, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!8017 = !DILocalVariable(name: "i", scope: !8016, file: !3, line: 3964, type: !865)
!8018 = !DILocation(line: 3964, column: 7, scope: !8016)
!8019 = !DILocation(line: 3966, column: 15, scope: !8016)
!8020 = !DILocation(line: 3966, column: 9, scope: !8016)
!8021 = !DILocation(line: 3966, column: 3, scope: !8016)
!8022 = !DILocation(line: 3967, column: 13, scope: !8016)
!8023 = !DILocation(line: 3968, column: 16, scope: !8016)
!8024 = !DILocation(line: 3970, column: 9, scope: !8016)
!8025 = !DILocation(line: 3970, column: 3, scope: !8016)
!8026 = !DILocation(line: 3971, column: 13, scope: !8016)
!8027 = !DILocation(line: 3973, column: 10, scope: !8028)
!8028 = distinct !DILexicalBlock(scope: !8016, file: !3, line: 3973, column: 3)
!8029 = !DILocation(line: 3973, column: 8, scope: !8028)
!8030 = !DILocation(line: 3973, column: 15, scope: !8031)
!8031 = distinct !DILexicalBlock(scope: !8028, file: !3, line: 3973, column: 3)
!8032 = !DILocation(line: 3973, column: 20, scope: !8031)
!8033 = !DILocation(line: 3973, column: 17, scope: !8031)
!8034 = !DILocation(line: 3973, column: 3, scope: !8028)
!8035 = !DILocation(line: 3974, column: 11, scope: !8031)
!8036 = !DILocation(line: 3974, column: 25, scope: !8031)
!8037 = !DILocation(line: 3974, column: 28, scope: !8031)
!8038 = !DILocation(line: 3974, column: 5, scope: !8031)
!8039 = !DILocation(line: 3973, column: 42, scope: !8031)
!8040 = !DILocation(line: 3973, column: 3, scope: !8031)
!8041 = distinct !{!8041, !8034, !8042}
!8042 = !DILocation(line: 3974, column: 33, scope: !8028)
!8043 = !DILocation(line: 3975, column: 9, scope: !8016)
!8044 = !DILocation(line: 3975, column: 3, scope: !8016)
!8045 = !DILocation(line: 3976, column: 16, scope: !8016)
!8046 = !DILocation(line: 3978, column: 23, scope: !8016)
!8047 = !DILocation(line: 3979, column: 1, scope: !8016)
!8048 = distinct !DISubprogram(name: "find_fallthru_edge", scope: !3, file: !3, line: 4231, type: !8049, scopeLine: 4232, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!8049 = !DISubroutineType(types: !8050)
!8050 = !{!1423, !1406}
!8051 = !DILocalVariable(name: "pred", arg: 1, scope: !8048, file: !3, line: 4231, type: !1406)
!8052 = !DILocation(line: 4231, column: 33, scope: !8048)
!8053 = !DILocalVariable(name: "e", scope: !8048, file: !3, line: 4233, type: !1423)
!8054 = !DILocation(line: 4233, column: 8, scope: !8048)
!8055 = !DILocalVariable(name: "ei", scope: !8048, file: !3, line: 4234, type: !8056)
!8056 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge_iterator", file: !155, line: 682, baseType: !8057)
!8057 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !155, line: 679, size: 128, elements: !8058)
!8058 = !{!8059, !8060}
!8059 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !8057, file: !155, line: 680, baseType: !7, size: 32)
!8060 = !DIDerivedType(tag: DW_TAG_member, name: "container", scope: !8057, file: !155, line: 681, baseType: !8061, size: 64, offset: 64)
!8061 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1411, size: 64)
!8062 = !DILocation(line: 4234, column: 17, scope: !8048)
!8063 = !DILocalVariable(name: "succ", scope: !8048, file: !3, line: 4235, type: !1406)
!8064 = !DILocation(line: 4235, column: 15, scope: !8048)
!8065 = !DILocation(line: 4237, column: 10, scope: !8048)
!8066 = !DILocation(line: 4237, column: 16, scope: !8048)
!8067 = !DILocation(line: 4237, column: 8, scope: !8048)
!8068 = !DILocation(line: 4238, column: 3, scope: !8048)
!8069 = !DILocation(line: 4240, column: 7, scope: !8070)
!8070 = distinct !DILexicalBlock(scope: !8048, file: !3, line: 4240, column: 7)
!8071 = !DILocation(line: 4240, column: 35, scope: !8070)
!8072 = !DILocation(line: 4240, column: 32, scope: !8070)
!8073 = !DILocation(line: 4240, column: 7, scope: !8048)
!8074 = !DILocation(line: 4242, column: 7, scope: !8075)
!8075 = distinct !DILexicalBlock(scope: !8076, file: !3, line: 4242, column: 7)
!8076 = distinct !DILexicalBlock(scope: !8070, file: !3, line: 4241, column: 5)
!8077 = !DILocation(line: 4242, column: 7, scope: !8078)
!8078 = distinct !DILexicalBlock(scope: !8075, file: !3, line: 4242, column: 7)
!8079 = !DILocation(line: 4243, column: 6, scope: !8080)
!8080 = distinct !DILexicalBlock(scope: !8078, file: !3, line: 4243, column: 6)
!8081 = !DILocation(line: 4243, column: 9, scope: !8080)
!8082 = !DILocation(line: 4243, column: 15, scope: !8080)
!8083 = !DILocation(line: 4243, column: 6, scope: !8078)
!8084 = !DILocation(line: 4245, column: 6, scope: !8085)
!8085 = distinct !DILexicalBlock(scope: !8080, file: !3, line: 4244, column: 4)
!8086 = !DILocation(line: 4246, column: 13, scope: !8085)
!8087 = !DILocation(line: 4246, column: 6, scope: !8085)
!8088 = !DILocation(line: 4243, column: 17, scope: !8080)
!8089 = distinct !{!8089, !8074, !8090}
!8090 = !DILocation(line: 4247, column: 4, scope: !8075)
!8091 = !DILocation(line: 4248, column: 5, scope: !8076)
!8092 = !DILocation(line: 4251, column: 7, scope: !8093)
!8093 = distinct !DILexicalBlock(scope: !8094, file: !3, line: 4251, column: 7)
!8094 = distinct !DILexicalBlock(scope: !8070, file: !3, line: 4250, column: 5)
!8095 = !DILocation(line: 4251, column: 7, scope: !8096)
!8096 = distinct !DILexicalBlock(scope: !8093, file: !3, line: 4251, column: 7)
!8097 = !DILocation(line: 4252, column: 6, scope: !8098)
!8098 = distinct !DILexicalBlock(scope: !8096, file: !3, line: 4252, column: 6)
!8099 = !DILocation(line: 4252, column: 9, scope: !8098)
!8100 = !DILocation(line: 4252, column: 15, scope: !8098)
!8101 = !DILocation(line: 4252, column: 6, scope: !8096)
!8102 = !DILocation(line: 4254, column: 6, scope: !8103)
!8103 = distinct !DILexicalBlock(scope: !8098, file: !3, line: 4253, column: 4)
!8104 = !DILocation(line: 4255, column: 13, scope: !8103)
!8105 = !DILocation(line: 4255, column: 6, scope: !8103)
!8106 = !DILocation(line: 4252, column: 17, scope: !8098)
!8107 = distinct !{!8107, !8092, !8108}
!8108 = !DILocation(line: 4256, column: 4, scope: !8093)
!8109 = !DILocation(line: 4259, column: 3, scope: !8048)
!8110 = !DILocation(line: 4260, column: 1, scope: !8048)
!8111 = distinct !DISubprogram(name: "VEC_edge_base_length", scope: !155, file: !155, line: 150, type: !8112, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!8112 = !DISubroutineType(types: !8113)
!8113 = !{!7, !8114}
!8114 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8115, size: 64)
!8115 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1416)
!8116 = !DILocalVariable(name: "vec_", arg: 1, scope: !8111, file: !155, line: 150, type: !8114)
!8117 = !DILocation(line: 150, column: 1, scope: !8111)
!8118 = distinct !DISubprogram(name: "ei_start_1", scope: !155, file: !155, line: 696, type: !8119, scopeLine: 697, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!8119 = !DISubroutineType(types: !8120)
!8120 = !{!8056, !8061}
!8121 = !DILocalVariable(name: "ev", arg: 1, scope: !8118, file: !155, line: 696, type: !8061)
!8122 = !DILocation(line: 696, column: 28, scope: !8118)
!8123 = !DILocalVariable(name: "i", scope: !8118, file: !155, line: 698, type: !8056)
!8124 = !DILocation(line: 698, column: 17, scope: !8118)
!8125 = !DILocation(line: 700, column: 5, scope: !8118)
!8126 = !DILocation(line: 700, column: 11, scope: !8118)
!8127 = !DILocation(line: 701, column: 17, scope: !8118)
!8128 = !DILocation(line: 701, column: 5, scope: !8118)
!8129 = !DILocation(line: 701, column: 15, scope: !8118)
!8130 = !DILocation(line: 703, column: 3, scope: !8118)
!8131 = distinct !DISubprogram(name: "ei_cond", scope: !155, file: !155, line: 771, type: !8132, scopeLine: 772, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!8132 = !DISubroutineType(types: !8133)
!8133 = !{!1100, !8056, !8134}
!8134 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1423, size: 64)
!8135 = !DILocalVariable(name: "ei", arg: 1, scope: !8131, file: !155, line: 771, type: !8056)
!8136 = !DILocation(line: 771, column: 24, scope: !8131)
!8137 = !DILocalVariable(name: "p", arg: 2, scope: !8131, file: !155, line: 771, type: !8134)
!8138 = !DILocation(line: 771, column: 34, scope: !8131)
!8139 = !DILocation(line: 773, column: 8, scope: !8140)
!8140 = distinct !DILexicalBlock(scope: !8131, file: !155, line: 773, column: 7)
!8141 = !DILocation(line: 773, column: 7, scope: !8131)
!8142 = !DILocation(line: 775, column: 12, scope: !8143)
!8143 = distinct !DILexicalBlock(scope: !8140, file: !155, line: 774, column: 5)
!8144 = !DILocation(line: 775, column: 8, scope: !8143)
!8145 = !DILocation(line: 775, column: 10, scope: !8143)
!8146 = !DILocation(line: 776, column: 7, scope: !8143)
!8147 = !DILocation(line: 780, column: 8, scope: !8148)
!8148 = distinct !DILexicalBlock(scope: !8140, file: !155, line: 779, column: 5)
!8149 = !DILocation(line: 780, column: 10, scope: !8148)
!8150 = !DILocation(line: 781, column: 7, scope: !8148)
!8151 = !DILocation(line: 783, column: 1, scope: !8131)
!8152 = distinct !DISubprogram(name: "ei_next", scope: !155, file: !155, line: 736, type: !8153, scopeLine: 737, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!8153 = !DISubroutineType(types: !8154)
!8154 = !{null, !8155}
!8155 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8056, size: 64)
!8156 = !DILocalVariable(name: "i", arg: 1, scope: !8152, file: !155, line: 736, type: !8155)
!8157 = !DILocation(line: 736, column: 25, scope: !8152)
!8158 = !DILocation(line: 738, column: 3, scope: !8152)
!8159 = !DILocation(line: 739, column: 3, scope: !8152)
!8160 = !DILocation(line: 739, column: 6, scope: !8152)
!8161 = !DILocation(line: 739, column: 11, scope: !8152)
!8162 = !DILocation(line: 740, column: 1, scope: !8152)
!8163 = distinct !DISubprogram(name: "sched_extend_bb", scope: !3, file: !3, line: 4264, type: !2341, scopeLine: 4265, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!8164 = !DILocalVariable(name: "insn", scope: !8163, file: !3, line: 4266, type: !867)
!8165 = !DILocation(line: 4266, column: 7, scope: !8163)
!8166 = !DILocation(line: 4269, column: 10, scope: !8163)
!8167 = !DILocation(line: 4269, column: 8, scope: !8163)
!8168 = !DILocation(line: 4270, column: 7, scope: !8169)
!8169 = distinct !DILexicalBlock(scope: !8163, file: !3, line: 4270, column: 7)
!8170 = !DILocation(line: 4270, column: 24, scope: !8169)
!8171 = !DILocation(line: 4271, column: 7, scope: !8169)
!8172 = !DILocation(line: 4271, column: 12, scope: !8169)
!8173 = !DILocation(line: 4272, column: 4, scope: !8169)
!8174 = !DILocation(line: 4272, column: 8, scope: !8169)
!8175 = !DILocation(line: 4274, column: 4, scope: !8169)
!8176 = !DILocation(line: 4274, column: 8, scope: !8169)
!8177 = !DILocation(line: 4270, column: 7, scope: !8163)
!8178 = !DILocalVariable(name: "note", scope: !8179, file: !3, line: 4276, type: !867)
!8179 = distinct !DILexicalBlock(scope: !8169, file: !3, line: 4275, column: 5)
!8180 = !DILocation(line: 4276, column: 11, scope: !8179)
!8181 = !DILocation(line: 4276, column: 54, scope: !8179)
!8182 = !DILocation(line: 4276, column: 18, scope: !8179)
!8183 = !DILocation(line: 4278, column: 7, scope: !8179)
!8184 = !DILocation(line: 4279, column: 42, scope: !8179)
!8185 = !DILocation(line: 4279, column: 7, scope: !8179)
!8186 = !DILocation(line: 4279, column: 40, scope: !8179)
!8187 = !DILocation(line: 4280, column: 5, scope: !8179)
!8188 = !DILocation(line: 4281, column: 1, scope: !8163)
!8189 = distinct !DISubprogram(name: "sched_create_recovery_block", scope: !3, file: !3, line: 4370, type: !8190, scopeLine: 4371, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!8190 = !DISubroutineType(types: !8191)
!8191 = !{!1406, !4310}
!8192 = !DILocalVariable(name: "before_recovery_ptr", arg: 1, scope: !8189, file: !3, line: 4370, type: !4310)
!8193 = !DILocation(line: 4370, column: 43, scope: !8189)
!8194 = !DILocalVariable(name: "label", scope: !8189, file: !3, line: 4372, type: !867)
!8195 = !DILocation(line: 4372, column: 7, scope: !8189)
!8196 = !DILocalVariable(name: "barrier", scope: !8189, file: !3, line: 4373, type: !867)
!8197 = !DILocation(line: 4373, column: 7, scope: !8189)
!8198 = !DILocalVariable(name: "rec", scope: !8189, file: !3, line: 4374, type: !1406)
!8199 = !DILocation(line: 4374, column: 15, scope: !8189)
!8200 = !DILocation(line: 4376, column: 38, scope: !8189)
!8201 = !DILocation(line: 4377, column: 34, scope: !8189)
!8202 = !DILocation(line: 4379, column: 25, scope: !8189)
!8203 = !DILocation(line: 4379, column: 3, scope: !8189)
!8204 = !DILocation(line: 4381, column: 31, scope: !8189)
!8205 = !DILocation(line: 4381, column: 13, scope: !8189)
!8206 = !DILocation(line: 4381, column: 11, scope: !8189)
!8207 = !DILocation(line: 4382, column: 3, scope: !8189)
!8208 = !DILocation(line: 4384, column: 29, scope: !8189)
!8209 = !DILocation(line: 4384, column: 47, scope: !8189)
!8210 = !DILocation(line: 4384, column: 11, scope: !8189)
!8211 = !DILocation(line: 4384, column: 9, scope: !8189)
!8212 = !DILocation(line: 4386, column: 29, scope: !8189)
!8213 = !DILocation(line: 4386, column: 36, scope: !8189)
!8214 = !DILocation(line: 4386, column: 43, scope: !8189)
!8215 = !DILocation(line: 4386, column: 9, scope: !8189)
!8216 = !DILocation(line: 4386, column: 7, scope: !8189)
!8217 = !DILocation(line: 4389, column: 23, scope: !8189)
!8218 = !DILocation(line: 4389, column: 3, scope: !8189)
!8219 = !DILocation(line: 4391, column: 7, scope: !8220)
!8220 = distinct !DILexicalBlock(scope: !8189, file: !3, line: 4391, column: 7)
!8221 = !DILocation(line: 4391, column: 38, scope: !8220)
!8222 = !DILocation(line: 4391, column: 7, scope: !8189)
!8223 = !DILocation(line: 4392, column: 5, scope: !8220)
!8224 = !DILocalVariable(name: "bb_", scope: !8225, file: !3, line: 4392, type: !1406)
!8225 = distinct !DILexicalBlock(scope: !8220, file: !3, line: 4392, column: 5)
!8226 = !DILocation(line: 4392, column: 5, scope: !8225)
!8227 = !DILocation(line: 4394, column: 7, scope: !8228)
!8228 = distinct !DILexicalBlock(scope: !8189, file: !3, line: 4394, column: 7)
!8229 = !DILocation(line: 4394, column: 21, scope: !8228)
!8230 = !DILocation(line: 4394, column: 24, scope: !8228)
!8231 = !DILocation(line: 4394, column: 35, scope: !8228)
!8232 = !DILocation(line: 4394, column: 7, scope: !8189)
!8233 = !DILocation(line: 4395, column: 14, scope: !8228)
!8234 = !DILocation(line: 4395, column: 25, scope: !8228)
!8235 = !DILocation(line: 4396, column: 14, scope: !8228)
!8236 = !DILocation(line: 4396, column: 19, scope: !8228)
!8237 = !DILocation(line: 4395, column: 5, scope: !8228)
!8238 = !DILocation(line: 4398, column: 10, scope: !8189)
!8239 = !DILocation(line: 4398, column: 3, scope: !8189)
!8240 = distinct !DISubprogram(name: "init_before_recovery", scope: !3, file: !3, line: 4292, type: !4308, scopeLine: 4293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!8241 = !DILocalVariable(name: "before_recovery_ptr", arg: 1, scope: !8240, file: !3, line: 4292, type: !4310)
!8242 = !DILocation(line: 4292, column: 36, scope: !8240)
!8243 = !DILocalVariable(name: "last", scope: !8240, file: !3, line: 4294, type: !1406)
!8244 = !DILocation(line: 4294, column: 15, scope: !8240)
!8245 = !DILocalVariable(name: "e", scope: !8240, file: !3, line: 4295, type: !1423)
!8246 = !DILocation(line: 4295, column: 8, scope: !8240)
!8247 = !DILocation(line: 4297, column: 10, scope: !8240)
!8248 = !DILocation(line: 4297, column: 26, scope: !8240)
!8249 = !DILocation(line: 4297, column: 8, scope: !8240)
!8250 = !DILocation(line: 4298, column: 27, scope: !8240)
!8251 = !DILocation(line: 4298, column: 7, scope: !8240)
!8252 = !DILocation(line: 4298, column: 5, scope: !8240)
!8253 = !DILocation(line: 4300, column: 7, scope: !8254)
!8254 = distinct !DILexicalBlock(scope: !8240, file: !3, line: 4300, column: 7)
!8255 = !DILocation(line: 4300, column: 7, scope: !8240)
!8256 = !DILocalVariable(name: "single", scope: !8257, file: !3, line: 4308, type: !1406)
!8257 = distinct !DILexicalBlock(scope: !8254, file: !3, line: 4301, column: 5)
!8258 = !DILocation(line: 4308, column: 19, scope: !8257)
!8259 = !DILocalVariable(name: "empty", scope: !8257, file: !3, line: 4308, type: !1406)
!8260 = !DILocation(line: 4308, column: 27, scope: !8257)
!8261 = !DILocalVariable(name: "x", scope: !8257, file: !3, line: 4309, type: !867)
!8262 = !DILocation(line: 4309, column: 11, scope: !8257)
!8263 = !DILocalVariable(name: "label", scope: !8257, file: !3, line: 4309, type: !867)
!8264 = !DILocation(line: 4309, column: 14, scope: !8257)
!8265 = !DILocation(line: 4313, column: 11, scope: !8266)
!8266 = distinct !DILexicalBlock(scope: !8257, file: !3, line: 4313, column: 11)
!8267 = !DILocation(line: 4313, column: 19, scope: !8266)
!8268 = !DILocation(line: 4313, column: 16, scope: !8266)
!8269 = !DILocation(line: 4313, column: 11, scope: !8257)
!8270 = !DILocation(line: 4314, column: 2, scope: !8266)
!8271 = !DILocation(line: 4316, column: 37, scope: !8257)
!8272 = !DILocation(line: 4318, column: 16, scope: !8257)
!8273 = !DILocation(line: 4318, column: 39, scope: !8257)
!8274 = !DILocation(line: 4318, column: 14, scope: !8257)
!8275 = !DILocation(line: 4319, column: 15, scope: !8257)
!8276 = !DILocation(line: 4319, column: 38, scope: !8257)
!8277 = !DILocation(line: 4319, column: 13, scope: !8257)
!8278 = !DILocation(line: 4322, column: 11, scope: !8279)
!8279 = distinct !DILexicalBlock(scope: !8257, file: !3, line: 4322, column: 11)
!8280 = !DILocation(line: 4322, column: 25, scope: !8279)
!8281 = !DILocation(line: 4322, column: 11, scope: !8257)
!8282 = !DILocation(line: 4324, column: 20, scope: !8283)
!8283 = distinct !DILexicalBlock(scope: !8279, file: !3, line: 4323, column: 2)
!8284 = !DILocation(line: 4324, column: 28, scope: !8283)
!8285 = !DILocation(line: 4324, column: 4, scope: !8283)
!8286 = !DILocation(line: 4325, column: 20, scope: !8283)
!8287 = !DILocation(line: 4325, column: 27, scope: !8283)
!8288 = !DILocation(line: 4325, column: 4, scope: !8283)
!8289 = !DILocation(line: 4326, column: 2, scope: !8283)
!8290 = !DILocation(line: 4328, column: 23, scope: !8257)
!8291 = !DILocation(line: 4328, column: 29, scope: !8257)
!8292 = !DILocation(line: 4328, column: 7, scope: !8257)
!8293 = !DILocation(line: 4328, column: 15, scope: !8257)
!8294 = !DILocation(line: 4328, column: 21, scope: !8257)
!8295 = !DILocation(line: 4329, column: 22, scope: !8257)
!8296 = !DILocation(line: 4329, column: 28, scope: !8257)
!8297 = !DILocation(line: 4329, column: 7, scope: !8257)
!8298 = !DILocation(line: 4329, column: 14, scope: !8257)
!8299 = !DILocation(line: 4329, column: 20, scope: !8257)
!8300 = !DILocation(line: 4330, column: 27, scope: !8257)
!8301 = !DILocation(line: 4330, column: 33, scope: !8257)
!8302 = !DILocation(line: 4330, column: 7, scope: !8257)
!8303 = !DILocation(line: 4330, column: 15, scope: !8257)
!8304 = !DILocation(line: 4330, column: 25, scope: !8257)
!8305 = !DILocation(line: 4331, column: 26, scope: !8257)
!8306 = !DILocation(line: 4331, column: 32, scope: !8257)
!8307 = !DILocation(line: 4331, column: 7, scope: !8257)
!8308 = !DILocation(line: 4331, column: 14, scope: !8257)
!8309 = !DILocation(line: 4331, column: 24, scope: !8257)
!8310 = !DILocation(line: 4332, column: 7, scope: !8257)
!8311 = !DILocalVariable(name: "bb_", scope: !8312, file: !3, line: 4332, type: !1406)
!8312 = distinct !DILexicalBlock(scope: !8257, file: !3, line: 4332, column: 7)
!8313 = !DILocation(line: 4332, column: 7, scope: !8312)
!8314 = !DILocation(line: 4333, column: 7, scope: !8257)
!8315 = !DILocalVariable(name: "bb_", scope: !8316, file: !3, line: 4333, type: !1406)
!8316 = distinct !DILexicalBlock(scope: !8257, file: !3, line: 4333, column: 7)
!8317 = !DILocation(line: 4333, column: 7, scope: !8316)
!8318 = !DILocation(line: 4335, column: 27, scope: !8257)
!8319 = !DILocation(line: 4335, column: 30, scope: !8257)
!8320 = !DILocation(line: 4335, column: 7, scope: !8257)
!8321 = !DILocation(line: 4336, column: 30, scope: !8257)
!8322 = !DILocation(line: 4336, column: 38, scope: !8257)
!8323 = !DILocation(line: 4336, column: 7, scope: !8257)
!8324 = !DILocation(line: 4337, column: 30, scope: !8257)
!8325 = !DILocation(line: 4337, column: 37, scope: !8257)
!8326 = !DILocation(line: 4337, column: 7, scope: !8257)
!8327 = !DILocation(line: 4340, column: 28, scope: !8257)
!8328 = !DILocation(line: 4340, column: 15, scope: !8257)
!8329 = !DILocation(line: 4340, column: 13, scope: !8257)
!8330 = !DILocation(line: 4341, column: 43, scope: !8257)
!8331 = !DILocation(line: 4341, column: 33, scope: !8257)
!8332 = !DILocation(line: 4341, column: 51, scope: !8257)
!8333 = !DILocation(line: 4341, column: 11, scope: !8257)
!8334 = !DILocation(line: 4341, column: 9, scope: !8257)
!8335 = !DILocation(line: 4342, column: 24, scope: !8257)
!8336 = !DILocation(line: 4342, column: 7, scope: !8257)
!8337 = !DILocation(line: 4342, column: 22, scope: !8257)
!8338 = !DILocation(line: 4343, column: 7, scope: !8257)
!8339 = !DILocation(line: 4343, column: 26, scope: !8257)
!8340 = !DILocation(line: 4344, column: 24, scope: !8257)
!8341 = !DILocation(line: 4344, column: 7, scope: !8257)
!8342 = !DILocation(line: 4346, column: 27, scope: !8257)
!8343 = !DILocation(line: 4346, column: 7, scope: !8257)
!8344 = !DILocation(line: 4348, column: 7, scope: !8257)
!8345 = !DILocation(line: 4348, column: 27, scope: !8257)
!8346 = !DILocation(line: 4349, column: 7, scope: !8257)
!8347 = !DILocation(line: 4349, column: 27, scope: !8257)
!8348 = !DILocation(line: 4350, column: 7, scope: !8257)
!8349 = !DILocation(line: 4352, column: 37, scope: !8257)
!8350 = !DILocation(line: 4353, column: 25, scope: !8257)
!8351 = !DILocation(line: 4353, column: 23, scope: !8257)
!8352 = !DILocation(line: 4354, column: 24, scope: !8257)
!8353 = !DILocation(line: 4354, column: 22, scope: !8257)
!8354 = !DILocation(line: 4356, column: 11, scope: !8355)
!8355 = distinct !DILexicalBlock(scope: !8257, file: !3, line: 4356, column: 11)
!8356 = !DILocation(line: 4356, column: 11, scope: !8257)
!8357 = !DILocation(line: 4357, column: 32, scope: !8355)
!8358 = !DILocation(line: 4357, column: 10, scope: !8355)
!8359 = !DILocation(line: 4357, column: 30, scope: !8355)
!8360 = !DILocation(line: 4357, column: 9, scope: !8355)
!8361 = !DILocation(line: 4359, column: 11, scope: !8362)
!8362 = distinct !DILexicalBlock(scope: !8257, file: !3, line: 4359, column: 11)
!8363 = !DILocation(line: 4359, column: 25, scope: !8362)
!8364 = !DILocation(line: 4359, column: 30, scope: !8362)
!8365 = !DILocation(line: 4359, column: 33, scope: !8362)
!8366 = !DILocation(line: 4359, column: 44, scope: !8362)
!8367 = !DILocation(line: 4359, column: 11, scope: !8257)
!8368 = !DILocation(line: 4360, column: 18, scope: !8362)
!8369 = !DILocation(line: 4360, column: 29, scope: !8362)
!8370 = !DILocation(line: 4362, column: 18, scope: !8362)
!8371 = !DILocation(line: 4362, column: 24, scope: !8362)
!8372 = !DILocation(line: 4362, column: 31, scope: !8362)
!8373 = !DILocation(line: 4362, column: 39, scope: !8362)
!8374 = !DILocation(line: 4362, column: 46, scope: !8362)
!8375 = !DILocation(line: 4362, column: 53, scope: !8362)
!8376 = !DILocation(line: 4360, column: 9, scope: !8362)
!8377 = !DILocation(line: 4363, column: 5, scope: !8257)
!8378 = !DILocation(line: 4365, column: 23, scope: !8254)
!8379 = !DILocation(line: 4365, column: 21, scope: !8254)
!8380 = !DILocation(line: 4366, column: 1, scope: !8240)
!8381 = distinct !DISubprogram(name: "sched_create_recovery_edges", scope: !3, file: !3, line: 4404, type: !8382, scopeLine: 4406, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!8382 = !DISubroutineType(types: !8383)
!8383 = !{null, !1406, !1406, !1406}
!8384 = !DILocalVariable(name: "first_bb", arg: 1, scope: !8381, file: !3, line: 4404, type: !1406)
!8385 = !DILocation(line: 4404, column: 42, scope: !8381)
!8386 = !DILocalVariable(name: "rec", arg: 2, scope: !8381, file: !3, line: 4404, type: !1406)
!8387 = !DILocation(line: 4404, column: 64, scope: !8381)
!8388 = !DILocalVariable(name: "second_bb", arg: 3, scope: !8381, file: !3, line: 4405, type: !1406)
!8389 = !DILocation(line: 4405, column: 21, scope: !8381)
!8390 = !DILocalVariable(name: "label", scope: !8381, file: !3, line: 4407, type: !867)
!8391 = !DILocation(line: 4407, column: 7, scope: !8381)
!8392 = !DILocalVariable(name: "jump", scope: !8381, file: !3, line: 4408, type: !867)
!8393 = !DILocation(line: 4408, column: 7, scope: !8381)
!8394 = !DILocalVariable(name: "edge_flags", scope: !8381, file: !3, line: 4409, type: !865)
!8395 = !DILocation(line: 4409, column: 7, scope: !8381)
!8396 = !DILocation(line: 4413, column: 7, scope: !8397)
!8397 = distinct !DILexicalBlock(scope: !8381, file: !3, line: 4413, column: 7)
!8398 = !DILocation(line: 4413, column: 34, scope: !8397)
!8399 = !DILocation(line: 4413, column: 31, scope: !8397)
!8400 = !DILocation(line: 4413, column: 7, scope: !8381)
!8401 = !DILocation(line: 4415, column: 16, scope: !8397)
!8402 = !DILocation(line: 4415, column: 5, scope: !8397)
!8403 = !DILocation(line: 4417, column: 16, scope: !8397)
!8404 = !DILocation(line: 4419, column: 14, scope: !8381)
!8405 = !DILocation(line: 4419, column: 24, scope: !8381)
!8406 = !DILocation(line: 4419, column: 29, scope: !8381)
!8407 = !DILocation(line: 4419, column: 3, scope: !8381)
!8408 = !DILocation(line: 4420, column: 24, scope: !8381)
!8409 = !DILocation(line: 4420, column: 11, scope: !8381)
!8410 = !DILocation(line: 4420, column: 9, scope: !8381)
!8411 = !DILocation(line: 4421, column: 42, scope: !8381)
!8412 = !DILocation(line: 4421, column: 32, scope: !8381)
!8413 = !DILocation(line: 4421, column: 50, scope: !8381)
!8414 = !DILocation(line: 4421, column: 10, scope: !8381)
!8415 = !DILocation(line: 4421, column: 8, scope: !8381)
!8416 = !DILocation(line: 4422, column: 23, scope: !8381)
!8417 = !DILocation(line: 4422, column: 3, scope: !8381)
!8418 = !DILocation(line: 4422, column: 21, scope: !8381)
!8419 = !DILocation(line: 4423, column: 3, scope: !8381)
!8420 = !DILocation(line: 4423, column: 22, scope: !8381)
!8421 = !DILocation(line: 4425, column: 7, scope: !8422)
!8422 = distinct !DILexicalBlock(scope: !8381, file: !3, line: 4425, column: 7)
!8423 = !DILocation(line: 4425, column: 35, scope: !8422)
!8424 = !DILocation(line: 4425, column: 32, scope: !8422)
!8425 = !DILocation(line: 4425, column: 7, scope: !8381)
!8426 = !DILocation(line: 4429, column: 11, scope: !8427)
!8427 = distinct !DILexicalBlock(scope: !8428, file: !3, line: 4429, column: 11)
!8428 = distinct !DILexicalBlock(scope: !8422, file: !3, line: 4427, column: 5)
!8429 = !DILocation(line: 4430, column: 4, scope: !8427)
!8430 = !DILocation(line: 4430, column: 15, scope: !8427)
!8431 = !DILocation(line: 4430, column: 7, scope: !8427)
!8432 = !DILocation(line: 4429, column: 11, scope: !8428)
!8433 = !DILocation(line: 4434, column: 18, scope: !8434)
!8434 = distinct !DILexicalBlock(scope: !8427, file: !3, line: 4431, column: 2)
!8435 = !DILocation(line: 4434, column: 4, scope: !8434)
!8436 = !DILocation(line: 4435, column: 2, scope: !8434)
!8437 = !DILocation(line: 4436, column: 18, scope: !8428)
!8438 = !DILocation(line: 4437, column: 5, scope: !8428)
!8439 = !DILocation(line: 4439, column: 16, scope: !8422)
!8440 = !DILocation(line: 4441, column: 26, scope: !8381)
!8441 = !DILocation(line: 4441, column: 31, scope: !8381)
!8442 = !DILocation(line: 4441, column: 42, scope: !8381)
!8443 = !DILocation(line: 4441, column: 3, scope: !8381)
!8444 = !DILocation(line: 4442, column: 1, scope: !8381)
!8445 = distinct !DISubprogram(name: "sched_change_pattern", scope: !3, file: !3, line: 4789, type: !2407, scopeLine: 4790, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!8446 = !DILocalVariable(name: "insn", arg: 1, scope: !8445, file: !3, line: 4789, type: !867)
!8447 = !DILocation(line: 4789, column: 27, scope: !8445)
!8448 = !DILocalVariable(name: "new_pat", arg: 2, scope: !8445, file: !3, line: 4789, type: !867)
!8449 = !DILocation(line: 4789, column: 37, scope: !8445)
!8450 = !DILocalVariable(name: "t", scope: !8445, file: !3, line: 4791, type: !865)
!8451 = !DILocation(line: 4791, column: 7, scope: !8445)
!8452 = !DILocation(line: 4793, column: 24, scope: !8445)
!8453 = !DILocation(line: 4793, column: 31, scope: !8445)
!8454 = !DILocation(line: 4793, column: 47, scope: !8445)
!8455 = !DILocation(line: 4793, column: 7, scope: !8445)
!8456 = !DILocation(line: 4793, column: 5, scope: !8445)
!8457 = !DILocation(line: 4794, column: 3, scope: !8445)
!8458 = !DILocation(line: 4795, column: 32, scope: !8445)
!8459 = !DILocation(line: 4795, column: 3, scope: !8445)
!8460 = !DILocation(line: 4796, column: 1, scope: !8445)
!8461 = distinct !DISubprogram(name: "sched_speculate_insn", scope: !3, file: !3, line: 4816, type: !7731, scopeLine: 4817, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!8462 = !DILocalVariable(name: "insn", arg: 1, scope: !8461, file: !3, line: 4816, type: !867)
!8463 = !DILocation(line: 4816, column: 27, scope: !8461)
!8464 = !DILocalVariable(name: "request", arg: 2, scope: !8461, file: !3, line: 4816, type: !2099)
!8465 = !DILocation(line: 4816, column: 38, scope: !8461)
!8466 = !DILocalVariable(name: "new_pat", arg: 3, scope: !8461, file: !3, line: 4816, type: !2098)
!8467 = !DILocation(line: 4816, column: 52, scope: !8461)
!8468 = !DILocation(line: 4818, column: 3, scope: !8461)
!8469 = !DILocation(line: 4822, column: 8, scope: !8470)
!8470 = distinct !DILexicalBlock(scope: !8461, file: !3, line: 4822, column: 7)
!8471 = !DILocation(line: 4822, column: 18, scope: !8470)
!8472 = !DILocation(line: 4822, column: 29, scope: !8470)
!8473 = !DILocation(line: 4822, column: 16, scope: !8470)
!8474 = !DILocation(line: 4822, column: 38, scope: !8470)
!8475 = !DILocation(line: 4822, column: 35, scope: !8470)
!8476 = !DILocation(line: 4822, column: 7, scope: !8461)
!8477 = !DILocation(line: 4823, column: 5, scope: !8470)
!8478 = !DILocation(line: 4825, column: 7, scope: !8479)
!8479 = distinct !DILexicalBlock(scope: !8461, file: !3, line: 4825, column: 7)
!8480 = !DILocation(line: 4825, column: 15, scope: !8479)
!8481 = !DILocation(line: 4826, column: 7, scope: !8479)
!8482 = !DILocation(line: 4826, column: 12, scope: !8479)
!8483 = !DILocation(line: 4826, column: 20, scope: !8479)
!8484 = !DILocation(line: 4825, column: 7, scope: !8461)
!8485 = !DILocation(line: 4827, column: 5, scope: !8479)
!8486 = !DILocation(line: 4829, column: 24, scope: !8461)
!8487 = !DILocation(line: 4829, column: 40, scope: !8461)
!8488 = !DILocation(line: 4829, column: 46, scope: !8461)
!8489 = !DILocation(line: 4829, column: 55, scope: !8461)
!8490 = !DILocation(line: 4829, column: 10, scope: !8461)
!8491 = !DILocation(line: 4829, column: 3, scope: !8461)
!8492 = !DILocation(line: 4830, column: 1, scope: !8461)
!8493 = distinct !DISubprogram(name: "unlink_bb_notes", scope: !3, file: !3, line: 4875, type: !2283, scopeLine: 4876, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!8494 = !DILocalVariable(name: "first", arg: 1, scope: !8493, file: !3, line: 4875, type: !1406)
!8495 = !DILocation(line: 4875, column: 30, scope: !8493)
!8496 = !DILocalVariable(name: "last", arg: 2, scope: !8493, file: !3, line: 4875, type: !1406)
!8497 = !DILocation(line: 4875, column: 49, scope: !8493)
!8498 = !DILocation(line: 4878, column: 7, scope: !8499)
!8499 = distinct !DILexicalBlock(scope: !8493, file: !3, line: 4878, column: 7)
!8500 = !DILocation(line: 4878, column: 16, scope: !8499)
!8501 = !DILocation(line: 4878, column: 13, scope: !8499)
!8502 = !DILocation(line: 4878, column: 7, scope: !8493)
!8503 = !DILocation(line: 4879, column: 5, scope: !8499)
!8504 = !DILocation(line: 4881, column: 15, scope: !8493)
!8505 = !DILocation(line: 4881, column: 13, scope: !8493)
!8506 = !DILocation(line: 4884, column: 7, scope: !8507)
!8507 = distinct !DILexicalBlock(scope: !8493, file: !3, line: 4884, column: 7)
!8508 = !DILocation(line: 4884, column: 13, scope: !8507)
!8509 = !DILocation(line: 4884, column: 24, scope: !8507)
!8510 = !DILocation(line: 4884, column: 21, scope: !8507)
!8511 = !DILocation(line: 4884, column: 7, scope: !8493)
!8512 = !DILocation(line: 4885, column: 5, scope: !8507)
!8513 = !DILocation(line: 4885, column: 15, scope: !8507)
!8514 = !DILocation(line: 4885, column: 21, scope: !8507)
!8515 = !DILocation(line: 4885, column: 30, scope: !8507)
!8516 = !DILocation(line: 4885, column: 37, scope: !8507)
!8517 = !DILocation(line: 4887, column: 11, scope: !8493)
!8518 = !DILocation(line: 4887, column: 18, scope: !8493)
!8519 = !DILocation(line: 4887, column: 9, scope: !8493)
!8520 = !DILocation(line: 4888, column: 3, scope: !8493)
!8521 = !DILocalVariable(name: "prev", scope: !8522, file: !3, line: 4890, type: !867)
!8522 = distinct !DILexicalBlock(scope: !8493, file: !3, line: 4889, column: 5)
!8523 = !DILocation(line: 4890, column: 11, scope: !8522)
!8524 = !DILocalVariable(name: "label", scope: !8522, file: !3, line: 4890, type: !867)
!8525 = !DILocation(line: 4890, column: 17, scope: !8522)
!8526 = !DILocalVariable(name: "note", scope: !8522, file: !3, line: 4890, type: !867)
!8527 = !DILocation(line: 4890, column: 24, scope: !8522)
!8528 = !DILocalVariable(name: "next", scope: !8522, file: !3, line: 4890, type: !867)
!8529 = !DILocation(line: 4890, column: 30, scope: !8522)
!8530 = !DILocation(line: 4892, column: 15, scope: !8522)
!8531 = !DILocation(line: 4892, column: 13, scope: !8522)
!8532 = !DILocation(line: 4893, column: 11, scope: !8533)
!8533 = distinct !DILexicalBlock(scope: !8522, file: !3, line: 4893, column: 11)
!8534 = !DILocation(line: 4893, column: 11, scope: !8522)
!8535 = !DILocation(line: 4894, column: 9, scope: !8533)
!8536 = !DILocation(line: 4894, column: 7, scope: !8533)
!8537 = !DILocation(line: 4894, column: 2, scope: !8533)
!8538 = !DILocation(line: 4896, column: 9, scope: !8533)
!8539 = !DILocation(line: 4896, column: 7, scope: !8533)
!8540 = !DILocation(line: 4897, column: 7, scope: !8522)
!8541 = !DILocation(line: 4899, column: 14, scope: !8522)
!8542 = !DILocation(line: 4899, column: 12, scope: !8522)
!8543 = !DILocation(line: 4900, column: 14, scope: !8522)
!8544 = !DILocation(line: 4900, column: 12, scope: !8522)
!8545 = !DILocation(line: 4901, column: 7, scope: !8522)
!8546 = !DILocation(line: 4903, column: 26, scope: !8522)
!8547 = !DILocation(line: 4903, column: 7, scope: !8522)
!8548 = !DILocation(line: 4903, column: 24, scope: !8522)
!8549 = !DILocation(line: 4904, column: 26, scope: !8522)
!8550 = !DILocation(line: 4904, column: 7, scope: !8522)
!8551 = !DILocation(line: 4904, column: 24, scope: !8522)
!8552 = !DILocation(line: 4906, column: 32, scope: !8522)
!8553 = !DILocation(line: 4906, column: 7, scope: !8522)
!8554 = !DILocation(line: 4906, column: 17, scope: !8522)
!8555 = !DILocation(line: 4906, column: 23, scope: !8522)
!8556 = !DILocation(line: 4906, column: 30, scope: !8522)
!8557 = !DILocation(line: 4908, column: 11, scope: !8558)
!8558 = distinct !DILexicalBlock(scope: !8522, file: !3, line: 4908, column: 11)
!8559 = !DILocation(line: 4908, column: 19, scope: !8558)
!8560 = !DILocation(line: 4908, column: 16, scope: !8558)
!8561 = !DILocation(line: 4908, column: 11, scope: !8522)
!8562 = !DILocation(line: 4909, column: 2, scope: !8558)
!8563 = !DILocation(line: 4911, column: 14, scope: !8522)
!8564 = !DILocation(line: 4911, column: 20, scope: !8522)
!8565 = !DILocation(line: 4911, column: 12, scope: !8522)
!8566 = !DILocation(line: 4912, column: 5, scope: !8522)
!8567 = distinct !{!8567, !8520, !8568}
!8568 = !DILocation(line: 4913, column: 11, scope: !8493)
!8569 = !DILocation(line: 4914, column: 1, scope: !8493)
!8570 = distinct !DISubprogram(name: "sched_scan", scope: !3, file: !3, line: 5307, type: !8571, scopeLine: 5309, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!8571 = !DISubroutineType(types: !8572)
!8572 = !{null, !2335, !6726, !1406, !6727, !867}
!8573 = !DILocalVariable(name: "ssi", arg: 1, scope: !8570, file: !3, line: 5307, type: !2335)
!8574 = !DILocation(line: 5307, column: 47, scope: !8570)
!8575 = !DILocalVariable(name: "bbs", arg: 2, scope: !8570, file: !3, line: 5308, type: !6726)
!8576 = !DILocation(line: 5308, column: 15, scope: !8570)
!8577 = !DILocalVariable(name: "bb", arg: 3, scope: !8570, file: !3, line: 5308, type: !1406)
!8578 = !DILocation(line: 5308, column: 32, scope: !8570)
!8579 = !DILocalVariable(name: "insns", arg: 4, scope: !8570, file: !3, line: 5308, type: !6727)
!8580 = !DILocation(line: 5308, column: 47, scope: !8570)
!8581 = !DILocalVariable(name: "insn", arg: 5, scope: !8570, file: !3, line: 5308, type: !867)
!8582 = !DILocation(line: 5308, column: 58, scope: !8570)
!8583 = !DILocation(line: 5310, column: 21, scope: !8570)
!8584 = !DILocation(line: 5310, column: 19, scope: !8570)
!8585 = !DILocation(line: 5312, column: 7, scope: !8586)
!8586 = distinct !DILexicalBlock(scope: !8570, file: !3, line: 5312, column: 7)
!8587 = !DILocation(line: 5312, column: 11, scope: !8586)
!8588 = !DILocation(line: 5312, column: 19, scope: !8586)
!8589 = !DILocation(line: 5312, column: 22, scope: !8586)
!8590 = !DILocation(line: 5312, column: 25, scope: !8586)
!8591 = !DILocation(line: 5312, column: 7, scope: !8570)
!8592 = !DILocation(line: 5314, column: 7, scope: !8593)
!8593 = distinct !DILexicalBlock(scope: !8586, file: !3, line: 5313, column: 5)
!8594 = !DILocation(line: 5316, column: 11, scope: !8595)
!8595 = distinct !DILexicalBlock(scope: !8593, file: !3, line: 5316, column: 11)
!8596 = !DILocation(line: 5316, column: 15, scope: !8595)
!8597 = !DILocation(line: 5316, column: 11, scope: !8593)
!8598 = !DILocalVariable(name: "i", scope: !8599, file: !3, line: 5318, type: !7)
!8599 = distinct !DILexicalBlock(scope: !8595, file: !3, line: 5317, column: 2)
!8600 = !DILocation(line: 5318, column: 13, scope: !8599)
!8601 = !DILocalVariable(name: "x", scope: !8599, file: !3, line: 5319, type: !1406)
!8602 = !DILocation(line: 5319, column: 16, scope: !8599)
!8603 = !DILocation(line: 5321, column: 11, scope: !8604)
!8604 = distinct !DILexicalBlock(scope: !8599, file: !3, line: 5321, column: 4)
!8605 = !DILocation(line: 5321, column: 9, scope: !8604)
!8606 = !DILocation(line: 5321, column: 16, scope: !8607)
!8607 = distinct !DILexicalBlock(scope: !8604, file: !3, line: 5321, column: 4)
!8608 = !DILocation(line: 5321, column: 4, scope: !8604)
!8609 = !DILocation(line: 5322, column: 15, scope: !8607)
!8610 = !DILocation(line: 5322, column: 6, scope: !8607)
!8611 = !DILocation(line: 5321, column: 55, scope: !8607)
!8612 = !DILocation(line: 5321, column: 4, scope: !8607)
!8613 = distinct !{!8613, !8608, !8614}
!8614 = !DILocation(line: 5322, column: 16, scope: !8604)
!8615 = !DILocation(line: 5323, column: 2, scope: !8599)
!8616 = !DILocation(line: 5325, column: 11, scope: !8617)
!8617 = distinct !DILexicalBlock(scope: !8593, file: !3, line: 5325, column: 11)
!8618 = !DILocation(line: 5325, column: 14, scope: !8617)
!8619 = !DILocation(line: 5325, column: 11, scope: !8593)
!8620 = !DILocation(line: 5326, column: 11, scope: !8617)
!8621 = !DILocation(line: 5326, column: 2, scope: !8617)
!8622 = !DILocation(line: 5327, column: 5, scope: !8593)
!8623 = !DILocation(line: 5329, column: 3, scope: !8570)
!8624 = !DILocation(line: 5331, column: 7, scope: !8625)
!8625 = distinct !DILexicalBlock(scope: !8570, file: !3, line: 5331, column: 7)
!8626 = !DILocation(line: 5331, column: 11, scope: !8625)
!8627 = !DILocation(line: 5331, column: 7, scope: !8570)
!8628 = !DILocalVariable(name: "i", scope: !8629, file: !3, line: 5333, type: !7)
!8629 = distinct !DILexicalBlock(scope: !8625, file: !3, line: 5332, column: 5)
!8630 = !DILocation(line: 5333, column: 16, scope: !8629)
!8631 = !DILocalVariable(name: "x", scope: !8629, file: !3, line: 5334, type: !1406)
!8632 = !DILocation(line: 5334, column: 19, scope: !8629)
!8633 = !DILocation(line: 5336, column: 14, scope: !8634)
!8634 = distinct !DILexicalBlock(scope: !8629, file: !3, line: 5336, column: 7)
!8635 = !DILocation(line: 5336, column: 12, scope: !8634)
!8636 = !DILocation(line: 5336, column: 19, scope: !8637)
!8637 = distinct !DILexicalBlock(scope: !8634, file: !3, line: 5336, column: 7)
!8638 = !DILocation(line: 5336, column: 7, scope: !8634)
!8639 = !DILocation(line: 5337, column: 20, scope: !8637)
!8640 = !DILocation(line: 5337, column: 2, scope: !8637)
!8641 = !DILocation(line: 5336, column: 58, scope: !8637)
!8642 = !DILocation(line: 5336, column: 7, scope: !8637)
!8643 = distinct !{!8643, !8638, !8644}
!8644 = !DILocation(line: 5337, column: 21, scope: !8634)
!8645 = !DILocation(line: 5338, column: 5, scope: !8629)
!8646 = !DILocation(line: 5340, column: 7, scope: !8647)
!8647 = distinct !DILexicalBlock(scope: !8570, file: !3, line: 5340, column: 7)
!8648 = !DILocation(line: 5340, column: 10, scope: !8647)
!8649 = !DILocation(line: 5340, column: 7, scope: !8570)
!8650 = !DILocation(line: 5341, column: 23, scope: !8647)
!8651 = !DILocation(line: 5341, column: 5, scope: !8647)
!8652 = !DILocation(line: 5343, column: 7, scope: !8653)
!8653 = distinct !DILexicalBlock(scope: !8570, file: !3, line: 5343, column: 7)
!8654 = !DILocation(line: 5343, column: 13, scope: !8653)
!8655 = !DILocation(line: 5343, column: 7, scope: !8570)
!8656 = !DILocalVariable(name: "i", scope: !8657, file: !3, line: 5345, type: !7)
!8657 = distinct !DILexicalBlock(scope: !8653, file: !3, line: 5344, column: 5)
!8658 = !DILocation(line: 5345, column: 16, scope: !8657)
!8659 = !DILocalVariable(name: "x", scope: !8657, file: !3, line: 5346, type: !867)
!8660 = !DILocation(line: 5346, column: 11, scope: !8657)
!8661 = !DILocation(line: 5348, column: 14, scope: !8662)
!8662 = distinct !DILexicalBlock(scope: !8657, file: !3, line: 5348, column: 7)
!8663 = !DILocation(line: 5348, column: 12, scope: !8662)
!8664 = !DILocation(line: 5348, column: 19, scope: !8665)
!8665 = distinct !DILexicalBlock(scope: !8662, file: !3, line: 5348, column: 7)
!8666 = !DILocation(line: 5348, column: 7, scope: !8662)
!8667 = !DILocation(line: 5349, column: 13, scope: !8665)
!8668 = !DILocation(line: 5349, column: 2, scope: !8665)
!8669 = !DILocation(line: 5348, column: 52, scope: !8665)
!8670 = !DILocation(line: 5348, column: 7, scope: !8665)
!8671 = distinct !{!8671, !8666, !8672}
!8672 = !DILocation(line: 5349, column: 14, scope: !8662)
!8673 = !DILocation(line: 5350, column: 5, scope: !8657)
!8674 = !DILocation(line: 5352, column: 7, scope: !8675)
!8675 = distinct !DILexicalBlock(scope: !8570, file: !3, line: 5352, column: 7)
!8676 = !DILocation(line: 5352, column: 12, scope: !8675)
!8677 = !DILocation(line: 5352, column: 7, scope: !8570)
!8678 = !DILocation(line: 5353, column: 16, scope: !8675)
!8679 = !DILocation(line: 5353, column: 5, scope: !8675)
!8680 = !DILocation(line: 5354, column: 1, scope: !8570)
!8681 = distinct !DISubprogram(name: "extend_bb", scope: !3, file: !3, line: 5263, type: !2341, scopeLine: 5264, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!8682 = !DILocation(line: 5265, column: 7, scope: !8683)
!8683 = distinct !DILexicalBlock(scope: !8681, file: !3, line: 5265, column: 7)
!8684 = !DILocation(line: 5265, column: 24, scope: !8683)
!8685 = !DILocation(line: 5265, column: 7, scope: !8681)
!8686 = !DILocation(line: 5266, column: 5, scope: !8683)
!8687 = !DILocation(line: 5266, column: 22, scope: !8683)
!8688 = !DILocation(line: 5267, column: 1, scope: !8681)
!8689 = distinct !DISubprogram(name: "VEC_basic_block_base_iterate", scope: !155, file: !155, line: 281, type: !8690, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!8690 = !DISubroutineType(types: !8691)
!8691 = !{!865, !8692, !7, !4310}
!8692 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8693, size: 64)
!8693 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1543)
!8694 = !DILocalVariable(name: "vec_", arg: 1, scope: !8689, file: !155, line: 281, type: !8692)
!8695 = !DILocation(line: 281, column: 1, scope: !8689)
!8696 = !DILocalVariable(name: "ix_", arg: 2, scope: !8689, file: !155, line: 281, type: !7)
!8697 = !DILocalVariable(name: "ptr", arg: 3, scope: !8689, file: !155, line: 281, type: !4310)
!8698 = !DILocation(line: 281, column: 1, scope: !8699)
!8699 = distinct !DILexicalBlock(scope: !8689, file: !155, line: 281, column: 1)
!8700 = !DILocation(line: 281, column: 1, scope: !8701)
!8701 = distinct !DILexicalBlock(scope: !8699, file: !155, line: 281, column: 1)
!8702 = !DILocation(line: 281, column: 1, scope: !8703)
!8703 = distinct !DILexicalBlock(scope: !8699, file: !155, line: 281, column: 1)
!8704 = distinct !DISubprogram(name: "init_bb", scope: !3, file: !3, line: 5271, type: !2345, scopeLine: 5272, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!8705 = !DILocalVariable(name: "bb", arg: 1, scope: !8704, file: !3, line: 5271, type: !1406)
!8706 = !DILocation(line: 5271, column: 22, scope: !8704)
!8707 = !DILocation(line: 5273, column: 7, scope: !8708)
!8708 = distinct !DILexicalBlock(scope: !8704, file: !3, line: 5273, column: 7)
!8709 = !DILocation(line: 5273, column: 24, scope: !8708)
!8710 = !DILocation(line: 5273, column: 7, scope: !8704)
!8711 = !DILocation(line: 5274, column: 5, scope: !8708)
!8712 = !DILocation(line: 5274, column: 22, scope: !8708)
!8713 = !DILocation(line: 5274, column: 31, scope: !8708)
!8714 = !DILocation(line: 5275, column: 1, scope: !8704)
!8715 = distinct !DISubprogram(name: "extend_insn", scope: !3, file: !3, line: 5279, type: !2341, scopeLine: 5280, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!8716 = !DILocation(line: 5281, column: 7, scope: !8717)
!8717 = distinct !DILexicalBlock(scope: !8715, file: !3, line: 5281, column: 7)
!8718 = !DILocation(line: 5281, column: 24, scope: !8717)
!8719 = !DILocation(line: 5281, column: 7, scope: !8715)
!8720 = !DILocation(line: 5282, column: 5, scope: !8717)
!8721 = !DILocation(line: 5282, column: 22, scope: !8717)
!8722 = !DILocation(line: 5283, column: 1, scope: !8715)
!8723 = distinct !DISubprogram(name: "init_insns_in_bb", scope: !3, file: !3, line: 5295, type: !2345, scopeLine: 5296, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!8724 = !DILocalVariable(name: "bb", arg: 1, scope: !8723, file: !3, line: 5295, type: !1406)
!8725 = !DILocation(line: 5295, column: 31, scope: !8723)
!8726 = !DILocalVariable(name: "insn", scope: !8723, file: !3, line: 5297, type: !867)
!8727 = !DILocation(line: 5297, column: 7, scope: !8723)
!8728 = !DILocation(line: 5299, column: 3, scope: !8729)
!8729 = distinct !DILexicalBlock(scope: !8723, file: !3, line: 5299, column: 3)
!8730 = !DILocation(line: 5299, column: 3, scope: !8731)
!8731 = distinct !DILexicalBlock(scope: !8729, file: !3, line: 5299, column: 3)
!8732 = !DILocation(line: 0, scope: !8731)
!8733 = !DILocation(line: 5300, column: 16, scope: !8731)
!8734 = !DILocation(line: 5300, column: 5, scope: !8731)
!8735 = distinct !{!8735, !8728, !8736}
!8736 = !DILocation(line: 5300, column: 20, scope: !8729)
!8737 = !DILocation(line: 5301, column: 1, scope: !8723)
!8738 = distinct !DISubprogram(name: "VEC_rtx_base_iterate", scope: !406, file: !406, line: 200, type: !8739, scopeLine: 200, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!8739 = !DISubroutineType(types: !8740)
!8740 = !{!865, !8741, !7, !2098}
!8741 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8742, size: 64)
!8742 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2088)
!8743 = !DILocalVariable(name: "vec_", arg: 1, scope: !8738, file: !406, line: 200, type: !8741)
!8744 = !DILocation(line: 200, column: 1, scope: !8738)
!8745 = !DILocalVariable(name: "ix_", arg: 2, scope: !8738, file: !406, line: 200, type: !7)
!8746 = !DILocalVariable(name: "ptr", arg: 3, scope: !8738, file: !406, line: 200, type: !2098)
!8747 = !DILocation(line: 200, column: 1, scope: !8748)
!8748 = distinct !DILexicalBlock(scope: !8738, file: !406, line: 200, column: 1)
!8749 = !DILocation(line: 200, column: 1, scope: !8750)
!8750 = distinct !DILexicalBlock(scope: !8748, file: !406, line: 200, column: 1)
!8751 = !DILocation(line: 200, column: 1, scope: !8752)
!8752 = distinct !DILexicalBlock(scope: !8748, file: !406, line: 200, column: 1)
!8753 = distinct !DISubprogram(name: "init_insn", scope: !3, file: !3, line: 5287, type: !2350, scopeLine: 5288, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!8754 = !DILocalVariable(name: "insn", arg: 1, scope: !8753, file: !3, line: 5287, type: !867)
!8755 = !DILocation(line: 5287, column: 16, scope: !8753)
!8756 = !DILocation(line: 5289, column: 7, scope: !8757)
!8757 = distinct !DILexicalBlock(scope: !8753, file: !3, line: 5289, column: 7)
!8758 = !DILocation(line: 5289, column: 24, scope: !8757)
!8759 = !DILocation(line: 5289, column: 7, scope: !8753)
!8760 = !DILocation(line: 5290, column: 5, scope: !8757)
!8761 = !DILocation(line: 5290, column: 22, scope: !8757)
!8762 = !DILocation(line: 5290, column: 33, scope: !8757)
!8763 = !DILocation(line: 5291, column: 1, scope: !8753)
!8764 = distinct !DISubprogram(name: "luids_extend_insn", scope: !3, file: !3, line: 5359, type: !2341, scopeLine: 5360, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!8765 = !DILocalVariable(name: "new_luids_max_uid", scope: !8764, file: !3, line: 5361, type: !865)
!8766 = !DILocation(line: 5361, column: 7, scope: !8764)
!8767 = !DILocation(line: 5361, column: 27, scope: !8764)
!8768 = !DILocation(line: 5361, column: 42, scope: !8764)
!8769 = !DILocation(line: 5363, column: 3, scope: !8764)
!8770 = !DILocation(line: 5364, column: 1, scope: !8764)
!8771 = distinct !DISubprogram(name: "luids_init_insn", scope: !3, file: !3, line: 5368, type: !2350, scopeLine: 5369, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!8772 = !DILocalVariable(name: "insn", arg: 1, scope: !8771, file: !3, line: 5368, type: !867)
!8773 = !DILocation(line: 5368, column: 22, scope: !8771)
!8774 = !DILocalVariable(name: "i", scope: !8771, file: !3, line: 5370, type: !865)
!8775 = !DILocation(line: 5370, column: 7, scope: !8771)
!8776 = !DILocation(line: 5370, column: 11, scope: !8771)
!8777 = !DILocation(line: 5370, column: 31, scope: !8771)
!8778 = !DILocation(line: 5370, column: 50, scope: !8771)
!8779 = !DILocation(line: 5370, column: 69, scope: !8771)
!8780 = !DILocalVariable(name: "luid", scope: !8771, file: !3, line: 5371, type: !865)
!8781 = !DILocation(line: 5371, column: 7, scope: !8771)
!8782 = !DILocation(line: 5373, column: 7, scope: !8783)
!8783 = distinct !DILexicalBlock(scope: !8771, file: !3, line: 5373, column: 7)
!8784 = !DILocation(line: 5373, column: 9, scope: !8783)
!8785 = !DILocation(line: 5373, column: 7, scope: !8771)
!8786 = !DILocation(line: 5375, column: 14, scope: !8787)
!8787 = distinct !DILexicalBlock(scope: !8783, file: !3, line: 5374, column: 5)
!8788 = !DILocation(line: 5375, column: 12, scope: !8787)
!8789 = !DILocation(line: 5376, column: 25, scope: !8787)
!8790 = !DILocation(line: 5376, column: 22, scope: !8787)
!8791 = !DILocation(line: 5377, column: 5, scope: !8787)
!8792 = !DILocation(line: 5379, column: 10, scope: !8783)
!8793 = !DILocation(line: 5381, column: 3, scope: !8771)
!8794 = !DILocation(line: 5382, column: 1, scope: !8771)
!8795 = distinct !DISubprogram(name: "VEC_int_heap_free", scope: !1389, file: !1389, line: 32, type: !8796, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!8796 = !DISubroutineType(types: !8797)
!8797 = !{null, !8798}
!8798 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2125, size: 64)
!8799 = !DILocalVariable(name: "vec_", arg: 1, scope: !8795, file: !1389, line: 32, type: !8798)
!8800 = !DILocation(line: 32, column: 1, scope: !8795)
!8801 = !DILocation(line: 32, column: 1, scope: !8802)
!8802 = distinct !DILexicalBlock(scope: !8795, file: !1389, line: 32, column: 1)
!8803 = distinct !DISubprogram(name: "insn_luid", scope: !3, file: !3, line: 5411, type: !2291, scopeLine: 5412, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!8804 = !DILocalVariable(name: "insn", arg: 1, scope: !8803, file: !3, line: 5411, type: !867)
!8805 = !DILocation(line: 5411, column: 16, scope: !8803)
!8806 = !DILocation(line: 5413, column: 10, scope: !8803)
!8807 = !DILocation(line: 5413, column: 3, scope: !8803)
!8808 = distinct !DISubprogram(name: "VEC_int_base_index", scope: !1389, file: !1389, line: 31, type: !8809, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!8809 = !DISubroutineType(types: !8810)
!8810 = !{!865, !8811, !7}
!8811 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8812, size: 64)
!8812 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2130)
!8813 = !DILocalVariable(name: "vec_", arg: 1, scope: !8808, file: !1389, line: 31, type: !8811)
!8814 = !DILocation(line: 31, column: 1, scope: !8808)
!8815 = !DILocalVariable(name: "ix_", arg: 2, scope: !8808, file: !1389, line: 31, type: !7)
!8816 = !DILocation(line: 0, scope: !8808)
!8817 = distinct !DISubprogram(name: "extend_h_i_d", scope: !3, file: !3, line: 5427, type: !2341, scopeLine: 5428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!8818 = !DILocalVariable(name: "reserve", scope: !8817, file: !3, line: 5429, type: !865)
!8819 = !DILocation(line: 5429, column: 7, scope: !8817)
!8820 = !DILocation(line: 5429, column: 18, scope: !8817)
!8821 = !DILocation(line: 5429, column: 33, scope: !8817)
!8822 = !DILocation(line: 5430, column: 20, scope: !8817)
!8823 = !DILocation(line: 5430, column: 18, scope: !8817)
!8824 = !DILocation(line: 5431, column: 7, scope: !8825)
!8825 = distinct !DILexicalBlock(scope: !8817, file: !3, line: 5431, column: 7)
!8826 = !DILocation(line: 5431, column: 15, scope: !8825)
!8827 = !DILocation(line: 5432, column: 7, scope: !8825)
!8828 = !DILocation(line: 5432, column: 12, scope: !8825)
!8829 = !DILocation(line: 5431, column: 7, scope: !8817)
!8830 = !DILocation(line: 5434, column: 7, scope: !8831)
!8831 = distinct !DILexicalBlock(scope: !8825, file: !3, line: 5433, column: 5)
!8832 = !DILocation(line: 5436, column: 7, scope: !8831)
!8833 = !DILocation(line: 5437, column: 5, scope: !8831)
!8834 = !DILocation(line: 5438, column: 1, scope: !8817)
!8835 = distinct !DISubprogram(name: "init_h_i_d", scope: !3, file: !3, line: 5443, type: !2350, scopeLine: 5444, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!8836 = !DILocalVariable(name: "insn", arg: 1, scope: !8835, file: !3, line: 5443, type: !867)
!8837 = !DILocation(line: 5443, column: 17, scope: !8835)
!8838 = !DILocation(line: 5445, column: 7, scope: !8839)
!8839 = distinct !DILexicalBlock(scope: !8835, file: !3, line: 5445, column: 7)
!8840 = !DILocation(line: 5445, column: 24, scope: !8839)
!8841 = !DILocation(line: 5445, column: 7, scope: !8835)
!8842 = !DILocation(line: 5447, column: 7, scope: !8843)
!8843 = distinct !DILexicalBlock(scope: !8839, file: !3, line: 5446, column: 5)
!8844 = !DILocation(line: 5447, column: 24, scope: !8843)
!8845 = !DILocation(line: 5448, column: 7, scope: !8843)
!8846 = !DILocation(line: 5448, column: 26, scope: !8843)
!8847 = !DILocation(line: 5449, column: 26, scope: !8843)
!8848 = !DILocation(line: 5449, column: 7, scope: !8843)
!8849 = !DILocation(line: 5449, column: 24, scope: !8843)
!8850 = !DILocation(line: 5450, column: 27, scope: !8843)
!8851 = !DILocation(line: 5450, column: 7, scope: !8843)
!8852 = !DILocation(line: 5450, column: 25, scope: !8843)
!8853 = !DILocation(line: 5451, column: 7, scope: !8843)
!8854 = !DILocation(line: 5451, column: 24, scope: !8843)
!8855 = !DILocation(line: 5452, column: 5, scope: !8843)
!8856 = !DILocation(line: 5453, column: 1, scope: !8835)
!8857 = distinct !DISubprogram(name: "VEC_haifa_insn_data_def_base_iterate", scope: !398, file: !398, line: 825, type: !8858, scopeLine: 825, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!8858 = !DISubroutineType(types: !8859)
!8859 = !{!865, !2712, !7, !8860}
!8860 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2711, size: 64)
!8861 = !DILocalVariable(name: "vec_", arg: 1, scope: !8857, file: !398, line: 825, type: !2712)
!8862 = !DILocation(line: 825, column: 1, scope: !8857)
!8863 = !DILocalVariable(name: "ix_", arg: 2, scope: !8857, file: !398, line: 825, type: !7)
!8864 = !DILocalVariable(name: "ptr", arg: 3, scope: !8857, file: !398, line: 825, type: !8860)
!8865 = !DILocation(line: 825, column: 1, scope: !8866)
!8866 = distinct !DILexicalBlock(scope: !8857, file: !398, line: 825, column: 1)
!8867 = !DILocation(line: 825, column: 1, scope: !8868)
!8868 = distinct !DILexicalBlock(scope: !8866, file: !398, line: 825, column: 1)
!8869 = !DILocation(line: 825, column: 1, scope: !8870)
!8870 = distinct !DILexicalBlock(scope: !8866, file: !398, line: 825, column: 1)
!8871 = distinct !DISubprogram(name: "VEC_haifa_insn_data_def_heap_free", scope: !398, file: !398, line: 826, type: !8872, scopeLine: 826, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!8872 = !DISubroutineType(types: !8873)
!8873 = !{null, !8874}
!8874 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2137, size: 64)
!8875 = !DILocalVariable(name: "vec_", arg: 1, scope: !8871, file: !398, line: 826, type: !8874)
!8876 = !DILocation(line: 826, column: 1, scope: !8871)
!8877 = !DILocation(line: 826, column: 1, scope: !8878)
!8878 = distinct !DILexicalBlock(scope: !8871, file: !398, line: 826, column: 1)
!8879 = distinct !DISubprogram(name: "sched_emit_insn", scope: !3, file: !3, line: 5549, type: !8880, scopeLine: 5550, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!8880 = !DISubroutineType(types: !8881)
!8881 = !{!867, !867}
!8882 = !DILocalVariable(name: "pat", arg: 1, scope: !8879, file: !3, line: 5549, type: !867)
!8883 = !DILocation(line: 5549, column: 22, scope: !8879)
!8884 = !DILocalVariable(name: "insn", scope: !8879, file: !3, line: 5551, type: !867)
!8885 = !DILocation(line: 5551, column: 7, scope: !8879)
!8886 = !DILocation(line: 5551, column: 31, scope: !8879)
!8887 = !DILocation(line: 5551, column: 36, scope: !8879)
!8888 = !DILocation(line: 5551, column: 14, scope: !8879)
!8889 = !DILocation(line: 5552, column: 25, scope: !8879)
!8890 = !DILocation(line: 5552, column: 23, scope: !8879)
!8891 = !DILocation(line: 5553, column: 20, scope: !8879)
!8892 = !DILocation(line: 5553, column: 3, scope: !8879)
!8893 = !DILocation(line: 5554, column: 10, scope: !8879)
!8894 = !DILocation(line: 5554, column: 3, scope: !8879)
!8895 = distinct !DISubprogram(name: "haifa_init_insn", scope: !3, file: !3, line: 5493, type: !2350, scopeLine: 5494, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!8896 = !DILocalVariable(name: "insn", arg: 1, scope: !8895, file: !3, line: 5493, type: !867)
!8897 = !DILocation(line: 5493, column: 22, scope: !8895)
!8898 = !DILocation(line: 5495, column: 3, scope: !8895)
!8899 = !DILocation(line: 5497, column: 39, scope: !8895)
!8900 = !DILocation(line: 5497, column: 3, scope: !8895)
!8901 = !DILocation(line: 5498, column: 3, scope: !8895)
!8902 = !DILocation(line: 5499, column: 3, scope: !8895)
!8903 = !DILocation(line: 5500, column: 39, scope: !8895)
!8904 = !DILocation(line: 5500, column: 3, scope: !8895)
!8905 = !DILocation(line: 5502, column: 7, scope: !8906)
!8906 = distinct !DILexicalBlock(scope: !8895, file: !3, line: 5502, column: 7)
!8907 = !DILocation(line: 5502, column: 7, scope: !8895)
!8908 = !DILocation(line: 5504, column: 21, scope: !8909)
!8909 = distinct !DILexicalBlock(scope: !8906, file: !3, line: 5503, column: 5)
!8910 = !DILocation(line: 5504, column: 7, scope: !8909)
!8911 = !DILocation(line: 5507, column: 7, scope: !8909)
!8912 = !DILocation(line: 5508, column: 5, scope: !8909)
!8913 = !DILocation(line: 5509, column: 1, scope: !8895)
!8914 = distinct !DISubprogram(name: "may_trap_exp", scope: !3, file: !3, line: 369, type: !8915, scopeLine: 370, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!8915 = !DISubroutineType(types: !8916)
!8916 = !{!865, !2387, !865}
!8917 = !DILocalVariable(name: "x", arg: 1, scope: !8914, file: !3, line: 369, type: !2387)
!8918 = !DILocation(line: 369, column: 25, scope: !8914)
!8919 = !DILocalVariable(name: "is_store", arg: 2, scope: !8914, file: !3, line: 369, type: !865)
!8920 = !DILocation(line: 369, column: 32, scope: !8914)
!8921 = !DILocalVariable(name: "code", scope: !8914, file: !3, line: 371, type: !440)
!8922 = !DILocation(line: 371, column: 17, scope: !8914)
!8923 = !DILocation(line: 373, column: 7, scope: !8924)
!8924 = distinct !DILexicalBlock(scope: !8914, file: !3, line: 373, column: 7)
!8925 = !DILocation(line: 373, column: 9, scope: !8924)
!8926 = !DILocation(line: 373, column: 7, scope: !8914)
!8927 = !DILocation(line: 374, column: 5, scope: !8924)
!8928 = !DILocation(line: 375, column: 10, scope: !8914)
!8929 = !DILocation(line: 375, column: 8, scope: !8914)
!8930 = !DILocation(line: 376, column: 7, scope: !8931)
!8931 = distinct !DILexicalBlock(scope: !8914, file: !3, line: 376, column: 7)
!8932 = !DILocation(line: 376, column: 7, scope: !8914)
!8933 = !DILocation(line: 378, column: 11, scope: !8934)
!8934 = distinct !DILexicalBlock(scope: !8935, file: !3, line: 378, column: 11)
!8935 = distinct !DILexicalBlock(scope: !8931, file: !3, line: 377, column: 5)
!8936 = !DILocation(line: 378, column: 16, scope: !8934)
!8937 = !DILocation(line: 378, column: 23, scope: !8934)
!8938 = !DILocation(line: 378, column: 38, scope: !8934)
!8939 = !DILocation(line: 378, column: 26, scope: !8934)
!8940 = !DILocation(line: 378, column: 11, scope: !8935)
!8941 = !DILocation(line: 379, column: 2, scope: !8934)
!8942 = !DILocation(line: 381, column: 2, scope: !8934)
!8943 = !DILocation(line: 383, column: 7, scope: !8944)
!8944 = distinct !DILexicalBlock(scope: !8914, file: !3, line: 383, column: 7)
!8945 = !DILocation(line: 383, column: 12, scope: !8944)
!8946 = !DILocation(line: 383, column: 7, scope: !8914)
!8947 = !DILocation(line: 386, column: 11, scope: !8948)
!8948 = distinct !DILexicalBlock(scope: !8949, file: !3, line: 386, column: 11)
!8949 = distinct !DILexicalBlock(scope: !8944, file: !3, line: 384, column: 5)
!8950 = !DILocation(line: 386, column: 11, scope: !8949)
!8951 = !DILocation(line: 387, column: 2, scope: !8948)
!8952 = !DILocation(line: 389, column: 24, scope: !8953)
!8953 = distinct !DILexicalBlock(scope: !8949, file: !3, line: 389, column: 11)
!8954 = !DILocation(line: 389, column: 12, scope: !8953)
!8955 = !DILocation(line: 389, column: 11, scope: !8949)
!8956 = !DILocation(line: 390, column: 2, scope: !8953)
!8957 = !DILocation(line: 392, column: 11, scope: !8958)
!8958 = distinct !DILexicalBlock(scope: !8949, file: !3, line: 392, column: 11)
!8959 = !DILocation(line: 392, column: 11, scope: !8949)
!8960 = !DILocation(line: 393, column: 2, scope: !8958)
!8961 = !DILocation(line: 395, column: 7, scope: !8949)
!8962 = !DILocalVariable(name: "fmt", scope: !8963, file: !3, line: 399, type: !893)
!8963 = distinct !DILexicalBlock(scope: !8944, file: !3, line: 398, column: 5)
!8964 = !DILocation(line: 399, column: 19, scope: !8963)
!8965 = !DILocalVariable(name: "i", scope: !8963, file: !3, line: 400, type: !865)
!8966 = !DILocation(line: 400, column: 11, scope: !8963)
!8967 = !DILocalVariable(name: "insn_class", scope: !8963, file: !3, line: 400, type: !865)
!8968 = !DILocation(line: 400, column: 14, scope: !8963)
!8969 = !DILocation(line: 403, column: 23, scope: !8970)
!8970 = distinct !DILexicalBlock(scope: !8963, file: !3, line: 403, column: 11)
!8971 = !DILocation(line: 403, column: 11, scope: !8970)
!8972 = !DILocation(line: 403, column: 11, scope: !8963)
!8973 = !DILocation(line: 404, column: 2, scope: !8970)
!8974 = !DILocation(line: 406, column: 13, scope: !8963)
!8975 = !DILocation(line: 406, column: 11, scope: !8963)
!8976 = !DILocation(line: 407, column: 16, scope: !8977)
!8977 = distinct !DILexicalBlock(scope: !8963, file: !3, line: 407, column: 7)
!8978 = !DILocation(line: 407, column: 38, scope: !8977)
!8979 = !DILocation(line: 407, column: 14, scope: !8977)
!8980 = !DILocation(line: 407, column: 12, scope: !8977)
!8981 = !DILocation(line: 407, column: 43, scope: !8982)
!8982 = distinct !DILexicalBlock(scope: !8977, file: !3, line: 407, column: 7)
!8983 = !DILocation(line: 407, column: 45, scope: !8982)
!8984 = !DILocation(line: 407, column: 7, scope: !8977)
!8985 = !DILocation(line: 409, column: 8, scope: !8986)
!8986 = distinct !DILexicalBlock(scope: !8987, file: !3, line: 409, column: 8)
!8987 = distinct !DILexicalBlock(scope: !8982, file: !3, line: 408, column: 2)
!8988 = !DILocation(line: 409, column: 12, scope: !8986)
!8989 = !DILocation(line: 409, column: 15, scope: !8986)
!8990 = !DILocation(line: 409, column: 8, scope: !8987)
!8991 = !DILocalVariable(name: "tmp_class", scope: !8992, file: !3, line: 411, type: !865)
!8992 = distinct !DILexicalBlock(scope: !8986, file: !3, line: 410, column: 6)
!8993 = !DILocation(line: 411, column: 12, scope: !8992)
!8994 = !DILocation(line: 411, column: 38, scope: !8992)
!8995 = !DILocation(line: 411, column: 51, scope: !8992)
!8996 = !DILocation(line: 411, column: 24, scope: !8992)
!8997 = !DILocation(line: 412, column: 21, scope: !8992)
!8998 = !DILocation(line: 412, column: 19, scope: !8992)
!8999 = !DILocation(line: 413, column: 6, scope: !8992)
!9000 = !DILocation(line: 414, column: 13, scope: !9001)
!9001 = distinct !DILexicalBlock(scope: !8986, file: !3, line: 414, column: 13)
!9002 = !DILocation(line: 414, column: 17, scope: !9001)
!9003 = !DILocation(line: 414, column: 20, scope: !9001)
!9004 = !DILocation(line: 414, column: 13, scope: !8986)
!9005 = !DILocalVariable(name: "j", scope: !9006, file: !3, line: 416, type: !865)
!9006 = distinct !DILexicalBlock(scope: !9001, file: !3, line: 415, column: 6)
!9007 = !DILocation(line: 416, column: 12, scope: !9006)
!9008 = !DILocation(line: 417, column: 15, scope: !9009)
!9009 = distinct !DILexicalBlock(scope: !9006, file: !3, line: 417, column: 8)
!9010 = !DILocation(line: 417, column: 13, scope: !9009)
!9011 = !DILocation(line: 417, column: 20, scope: !9012)
!9012 = distinct !DILexicalBlock(scope: !9009, file: !3, line: 417, column: 8)
!9013 = !DILocation(line: 417, column: 24, scope: !9012)
!9014 = !DILocation(line: 417, column: 22, scope: !9012)
!9015 = !DILocation(line: 417, column: 8, scope: !9009)
!9016 = !DILocalVariable(name: "tmp_class", scope: !9017, file: !3, line: 419, type: !865)
!9017 = distinct !DILexicalBlock(scope: !9012, file: !3, line: 418, column: 3)
!9018 = !DILocation(line: 419, column: 9, scope: !9017)
!9019 = !DILocation(line: 419, column: 35, scope: !9017)
!9020 = !DILocation(line: 419, column: 54, scope: !9017)
!9021 = !DILocation(line: 419, column: 21, scope: !9017)
!9022 = !DILocation(line: 420, column: 18, scope: !9017)
!9023 = !DILocation(line: 420, column: 16, scope: !9017)
!9024 = !DILocation(line: 421, column: 9, scope: !9025)
!9025 = distinct !DILexicalBlock(scope: !9017, file: !3, line: 421, column: 9)
!9026 = !DILocation(line: 421, column: 20, scope: !9025)
!9027 = !DILocation(line: 421, column: 34, scope: !9025)
!9028 = !DILocation(line: 421, column: 37, scope: !9025)
!9029 = !DILocation(line: 421, column: 48, scope: !9025)
!9030 = !DILocation(line: 421, column: 9, scope: !9017)
!9031 = !DILocation(line: 422, column: 7, scope: !9025)
!9032 = !DILocation(line: 423, column: 3, scope: !9017)
!9033 = !DILocation(line: 417, column: 41, scope: !9012)
!9034 = !DILocation(line: 417, column: 8, scope: !9012)
!9035 = distinct !{!9035, !9015, !9036}
!9036 = !DILocation(line: 423, column: 3, scope: !9009)
!9037 = !DILocation(line: 424, column: 6, scope: !9006)
!9038 = !DILocation(line: 425, column: 8, scope: !9039)
!9039 = distinct !DILexicalBlock(scope: !8987, file: !3, line: 425, column: 8)
!9040 = !DILocation(line: 425, column: 19, scope: !9039)
!9041 = !DILocation(line: 425, column: 33, scope: !9039)
!9042 = !DILocation(line: 425, column: 36, scope: !9039)
!9043 = !DILocation(line: 425, column: 47, scope: !9039)
!9044 = !DILocation(line: 425, column: 8, scope: !8987)
!9045 = !DILocation(line: 426, column: 6, scope: !9039)
!9046 = !DILocation(line: 427, column: 2, scope: !8987)
!9047 = !DILocation(line: 407, column: 52, scope: !8982)
!9048 = !DILocation(line: 407, column: 7, scope: !8982)
!9049 = distinct !{!9049, !8984, !9050}
!9050 = !DILocation(line: 427, column: 2, scope: !8977)
!9051 = !DILocation(line: 428, column: 14, scope: !8963)
!9052 = !DILocation(line: 428, column: 7, scope: !8963)
!9053 = !DILocation(line: 430, column: 1, scope: !8914)
!9054 = distinct !DISubprogram(name: "dying_use_p", scope: !3, file: !3, line: 764, type: !9055, scopeLine: 765, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!9055 = !DISubroutineType(types: !9056)
!9056 = !{!1100, !2178}
!9057 = !DILocalVariable(name: "use", arg: 1, scope: !9054, file: !3, line: 764, type: !2178)
!9058 = !DILocation(line: 764, column: 35, scope: !9054)
!9059 = !DILocalVariable(name: "next", scope: !9054, file: !3, line: 766, type: !2178)
!9060 = !DILocation(line: 766, column: 24, scope: !9054)
!9061 = !DILocation(line: 768, column: 15, scope: !9062)
!9062 = distinct !DILexicalBlock(scope: !9054, file: !3, line: 768, column: 3)
!9063 = !DILocation(line: 768, column: 20, scope: !9062)
!9064 = !DILocation(line: 768, column: 13, scope: !9062)
!9065 = !DILocation(line: 768, column: 8, scope: !9062)
!9066 = !DILocation(line: 768, column: 36, scope: !9067)
!9067 = distinct !DILexicalBlock(scope: !9062, file: !3, line: 768, column: 3)
!9068 = !DILocation(line: 768, column: 44, scope: !9067)
!9069 = !DILocation(line: 768, column: 41, scope: !9067)
!9070 = !DILocation(line: 768, column: 3, scope: !9062)
!9071 = !DILocation(line: 769, column: 9, scope: !9072)
!9072 = distinct !DILexicalBlock(scope: !9067, file: !3, line: 769, column: 9)
!9073 = !DILocation(line: 770, column: 2, scope: !9072)
!9074 = !DILocation(line: 770, column: 5, scope: !9072)
!9075 = !DILocation(line: 770, column: 30, scope: !9072)
!9076 = !DILocation(line: 769, column: 9, scope: !9067)
!9077 = !DILocation(line: 771, column: 7, scope: !9072)
!9078 = !DILocation(line: 770, column: 33, scope: !9072)
!9079 = !DILocation(line: 768, column: 56, scope: !9067)
!9080 = !DILocation(line: 768, column: 62, scope: !9067)
!9081 = !DILocation(line: 768, column: 54, scope: !9067)
!9082 = !DILocation(line: 768, column: 3, scope: !9067)
!9083 = distinct !{!9083, !9070, !9084}
!9084 = !DILocation(line: 771, column: 14, scope: !9062)
!9085 = !DILocation(line: 772, column: 3, scope: !9054)
!9086 = !DILocation(line: 773, column: 1, scope: !9054)
!9087 = distinct !DISubprogram(name: "dep_list_size", scope: !3, file: !3, line: 980, type: !2291, scopeLine: 981, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!9088 = !DILocalVariable(name: "insn", arg: 1, scope: !9087, file: !3, line: 980, type: !867)
!9089 = !DILocation(line: 980, column: 20, scope: !9087)
!9090 = !DILocalVariable(name: "sd_it", scope: !9087, file: !3, line: 982, type: !2467)
!9091 = !DILocation(line: 982, column: 19, scope: !9087)
!9092 = !DILocalVariable(name: "dep", scope: !9087, file: !3, line: 983, type: !2720)
!9093 = !DILocation(line: 983, column: 9, scope: !9087)
!9094 = !DILocalVariable(name: "dbgcount", scope: !9087, file: !3, line: 984, type: !865)
!9095 = !DILocation(line: 984, column: 7, scope: !9087)
!9096 = !DILocalVariable(name: "nodbgcount", scope: !9087, file: !3, line: 984, type: !865)
!9097 = !DILocation(line: 984, column: 21, scope: !9087)
!9098 = !DILocation(line: 986, column: 8, scope: !9099)
!9099 = distinct !DILexicalBlock(scope: !9087, file: !3, line: 986, column: 7)
!9100 = !DILocation(line: 986, column: 7, scope: !9087)
!9101 = !DILocation(line: 987, column: 27, scope: !9099)
!9102 = !DILocation(line: 987, column: 12, scope: !9099)
!9103 = !DILocation(line: 987, column: 5, scope: !9099)
!9104 = !DILocation(line: 989, column: 3, scope: !9105)
!9105 = distinct !DILexicalBlock(scope: !9087, file: !3, line: 989, column: 3)
!9106 = !DILocation(line: 989, column: 3, scope: !9107)
!9107 = distinct !DILexicalBlock(scope: !9105, file: !3, line: 989, column: 3)
!9108 = !DILocation(line: 991, column: 11, scope: !9109)
!9109 = distinct !DILexicalBlock(scope: !9110, file: !3, line: 991, column: 11)
!9110 = distinct !DILexicalBlock(scope: !9107, file: !3, line: 990, column: 5)
!9111 = !DILocation(line: 991, column: 11, scope: !9110)
!9112 = !DILocation(line: 992, column: 10, scope: !9109)
!9113 = !DILocation(line: 992, column: 2, scope: !9109)
!9114 = !DILocation(line: 993, column: 17, scope: !9115)
!9115 = distinct !DILexicalBlock(scope: !9109, file: !3, line: 993, column: 16)
!9116 = !DILocation(line: 993, column: 16, scope: !9109)
!9117 = !DILocation(line: 994, column: 12, scope: !9115)
!9118 = !DILocation(line: 994, column: 2, scope: !9115)
!9119 = !DILocation(line: 995, column: 5, scope: !9110)
!9120 = distinct !{!9120, !9104, !9121}
!9121 = !DILocation(line: 995, column: 5, scope: !9105)
!9122 = !DILocation(line: 997, column: 3, scope: !9087)
!9123 = !DILocation(line: 999, column: 10, scope: !9087)
!9124 = !DILocation(line: 999, column: 3, scope: !9087)
!9125 = !DILocation(line: 1000, column: 1, scope: !9087)
!9126 = distinct !DISubprogram(name: "setup_ref_regs", scope: !3, file: !3, line: 684, type: !2350, scopeLine: 685, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!9127 = !DILocalVariable(name: "x", arg: 1, scope: !9126, file: !3, line: 684, type: !867)
!9128 = !DILocation(line: 684, column: 21, scope: !9126)
!9129 = !DILocalVariable(name: "i", scope: !9126, file: !3, line: 686, type: !865)
!9130 = !DILocation(line: 686, column: 7, scope: !9126)
!9131 = !DILocalVariable(name: "j", scope: !9126, file: !3, line: 686, type: !865)
!9132 = !DILocation(line: 686, column: 10, scope: !9126)
!9133 = !DILocalVariable(name: "regno", scope: !9126, file: !3, line: 686, type: !865)
!9134 = !DILocation(line: 686, column: 13, scope: !9126)
!9135 = !DILocalVariable(name: "code", scope: !9126, file: !3, line: 687, type: !9136)
!9136 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !440)
!9137 = !DILocation(line: 687, column: 18, scope: !9126)
!9138 = !DILocation(line: 687, column: 25, scope: !9126)
!9139 = !DILocalVariable(name: "fmt", scope: !9126, file: !3, line: 688, type: !893)
!9140 = !DILocation(line: 688, column: 15, scope: !9126)
!9141 = !DILocation(line: 690, column: 7, scope: !9142)
!9142 = distinct !DILexicalBlock(scope: !9126, file: !3, line: 690, column: 7)
!9143 = !DILocation(line: 690, column: 7, scope: !9126)
!9144 = !DILocation(line: 692, column: 15, scope: !9145)
!9145 = distinct !DILexicalBlock(scope: !9142, file: !3, line: 691, column: 5)
!9146 = !DILocation(line: 692, column: 13, scope: !9145)
!9147 = !DILocation(line: 693, column: 11, scope: !9148)
!9148 = distinct !DILexicalBlock(scope: !9145, file: !3, line: 693, column: 11)
!9149 = !DILocation(line: 693, column: 17, scope: !9148)
!9150 = !DILocation(line: 693, column: 11, scope: !9145)
!9151 = !DILocation(line: 694, column: 18, scope: !9148)
!9152 = !DILocation(line: 694, column: 35, scope: !9148)
!9153 = !DILocation(line: 694, column: 2, scope: !9148)
!9154 = !DILocation(line: 696, column: 28, scope: !9155)
!9155 = distinct !DILexicalBlock(scope: !9148, file: !3, line: 696, column: 2)
!9156 = !DILocation(line: 696, column: 11, scope: !9155)
!9157 = !DILocation(line: 696, column: 35, scope: !9155)
!9158 = !DILocation(line: 696, column: 49, scope: !9155)
!9159 = !DILocation(line: 696, column: 9, scope: !9155)
!9160 = !DILocation(line: 696, column: 7, scope: !9155)
!9161 = !DILocation(line: 696, column: 54, scope: !9162)
!9162 = distinct !DILexicalBlock(scope: !9155, file: !3, line: 696, column: 2)
!9163 = !DILocation(line: 696, column: 56, scope: !9162)
!9164 = !DILocation(line: 696, column: 2, scope: !9155)
!9165 = !DILocation(line: 697, column: 20, scope: !9162)
!9166 = !DILocation(line: 697, column: 37, scope: !9162)
!9167 = !DILocation(line: 697, column: 45, scope: !9162)
!9168 = !DILocation(line: 697, column: 43, scope: !9162)
!9169 = !DILocation(line: 697, column: 4, scope: !9162)
!9170 = !DILocation(line: 696, column: 63, scope: !9162)
!9171 = !DILocation(line: 696, column: 2, scope: !9162)
!9172 = distinct !{!9172, !9164, !9173}
!9173 = !DILocation(line: 697, column: 46, scope: !9155)
!9174 = !DILocation(line: 698, column: 7, scope: !9145)
!9175 = !DILocation(line: 700, column: 9, scope: !9126)
!9176 = !DILocation(line: 700, column: 7, scope: !9126)
!9177 = !DILocation(line: 701, column: 12, scope: !9178)
!9178 = distinct !DILexicalBlock(scope: !9126, file: !3, line: 701, column: 3)
!9179 = !DILocation(line: 701, column: 34, scope: !9178)
!9180 = !DILocation(line: 701, column: 10, scope: !9178)
!9181 = !DILocation(line: 701, column: 8, scope: !9178)
!9182 = !DILocation(line: 701, column: 39, scope: !9183)
!9183 = distinct !DILexicalBlock(scope: !9178, file: !3, line: 701, column: 3)
!9184 = !DILocation(line: 701, column: 41, scope: !9183)
!9185 = !DILocation(line: 701, column: 3, scope: !9178)
!9186 = !DILocation(line: 702, column: 9, scope: !9187)
!9187 = distinct !DILexicalBlock(scope: !9183, file: !3, line: 702, column: 9)
!9188 = !DILocation(line: 702, column: 13, scope: !9187)
!9189 = !DILocation(line: 702, column: 16, scope: !9187)
!9190 = !DILocation(line: 702, column: 9, scope: !9183)
!9191 = !DILocation(line: 703, column: 23, scope: !9187)
!9192 = !DILocation(line: 703, column: 7, scope: !9187)
!9193 = !DILocation(line: 704, column: 14, scope: !9194)
!9194 = distinct !DILexicalBlock(scope: !9187, file: !3, line: 704, column: 14)
!9195 = !DILocation(line: 704, column: 18, scope: !9194)
!9196 = !DILocation(line: 704, column: 21, scope: !9194)
!9197 = !DILocation(line: 704, column: 14, scope: !9187)
!9198 = !DILocation(line: 706, column: 9, scope: !9199)
!9199 = distinct !DILexicalBlock(scope: !9200, file: !3, line: 706, column: 2)
!9200 = distinct !DILexicalBlock(scope: !9194, file: !3, line: 705, column: 7)
!9201 = !DILocation(line: 706, column: 7, scope: !9199)
!9202 = !DILocation(line: 706, column: 14, scope: !9203)
!9203 = distinct !DILexicalBlock(scope: !9199, file: !3, line: 706, column: 2)
!9204 = !DILocation(line: 706, column: 18, scope: !9203)
!9205 = !DILocation(line: 706, column: 16, scope: !9203)
!9206 = !DILocation(line: 706, column: 2, scope: !9199)
!9207 = !DILocation(line: 707, column: 20, scope: !9203)
!9208 = !DILocation(line: 707, column: 4, scope: !9203)
!9209 = !DILocation(line: 706, column: 35, scope: !9203)
!9210 = !DILocation(line: 706, column: 2, scope: !9203)
!9211 = distinct !{!9211, !9206, !9212}
!9212 = !DILocation(line: 707, column: 37, scope: !9199)
!9213 = !DILocation(line: 708, column: 7, scope: !9200)
!9214 = !DILocation(line: 702, column: 19, scope: !9187)
!9215 = !DILocation(line: 701, column: 48, scope: !9183)
!9216 = !DILocation(line: 701, column: 3, scope: !9183)
!9217 = distinct !{!9217, !9185, !9218}
!9218 = !DILocation(line: 708, column: 7, scope: !9178)
!9219 = !DILocation(line: 709, column: 1, scope: !9126)
!9220 = distinct !DISubprogram(name: "initiate_reg_pressure_info", scope: !3, file: !3, line: 668, type: !9221, scopeLine: 669, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!9221 = !DISubroutineType(types: !9222)
!9222 = !{null, !2101}
!9223 = !DILocalVariable(name: "live", arg: 1, scope: !9220, file: !3, line: 668, type: !2101)
!9224 = !DILocation(line: 668, column: 36, scope: !9220)
!9225 = !DILocalVariable(name: "i", scope: !9220, file: !3, line: 670, type: !865)
!9226 = !DILocation(line: 670, column: 7, scope: !9220)
!9227 = !DILocalVariable(name: "j", scope: !9220, file: !3, line: 671, type: !7)
!9228 = !DILocation(line: 671, column: 16, scope: !9220)
!9229 = !DILocalVariable(name: "bi", scope: !9220, file: !3, line: 672, type: !9230)
!9230 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_iterator", file: !926, line: 218, baseType: !9231)
!9231 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !926, line: 203, size: 256, elements: !9232)
!9232 = !{!9233, !9234, !9235, !9236}
!9233 = !DIDerivedType(tag: DW_TAG_member, name: "elt1", scope: !9231, file: !926, line: 206, baseType: !929, size: 64)
!9234 = !DIDerivedType(tag: DW_TAG_member, name: "elt2", scope: !9231, file: !926, line: 209, baseType: !929, size: 64, offset: 64)
!9235 = !DIDerivedType(tag: DW_TAG_member, name: "word_no", scope: !9231, file: !926, line: 212, baseType: !7, size: 32, offset: 128)
!9236 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !9231, file: !926, line: 217, baseType: !939, size: 64, offset: 192)
!9237 = !DILocation(line: 672, column: 19, scope: !9220)
!9238 = !DILocation(line: 674, column: 10, scope: !9239)
!9239 = distinct !DILexicalBlock(scope: !9220, file: !3, line: 674, column: 3)
!9240 = !DILocation(line: 674, column: 8, scope: !9239)
!9241 = !DILocation(line: 674, column: 15, scope: !9242)
!9242 = distinct !DILexicalBlock(scope: !9239, file: !3, line: 674, column: 3)
!9243 = !DILocation(line: 674, column: 19, scope: !9242)
!9244 = !DILocation(line: 674, column: 17, scope: !9242)
!9245 = !DILocation(line: 674, column: 3, scope: !9239)
!9246 = !DILocation(line: 675, column: 43, scope: !9242)
!9247 = !DILocation(line: 675, column: 23, scope: !9242)
!9248 = !DILocation(line: 675, column: 5, scope: !9242)
!9249 = !DILocation(line: 675, column: 47, scope: !9242)
!9250 = !DILocation(line: 674, column: 46, scope: !9242)
!9251 = !DILocation(line: 674, column: 3, scope: !9242)
!9252 = distinct !{!9252, !9245, !9253}
!9253 = !DILocation(line: 675, column: 49, scope: !9239)
!9254 = !DILocation(line: 676, column: 17, scope: !9220)
!9255 = !DILocation(line: 676, column: 3, scope: !9220)
!9256 = !DILocation(line: 677, column: 3, scope: !9257)
!9257 = distinct !DILexicalBlock(scope: !9220, file: !3, line: 677, column: 3)
!9258 = !DILocation(line: 677, column: 3, scope: !9259)
!9259 = distinct !DILexicalBlock(scope: !9257, file: !3, line: 677, column: 3)
!9260 = !DILocation(line: 678, column: 9, scope: !9261)
!9261 = distinct !DILexicalBlock(scope: !9259, file: !3, line: 678, column: 9)
!9262 = !DILocation(line: 678, column: 27, scope: !9261)
!9263 = !DILocation(line: 678, column: 32, scope: !9261)
!9264 = !DILocation(line: 678, column: 49, scope: !9261)
!9265 = !DILocation(line: 678, column: 66, scope: !9261)
!9266 = !DILocation(line: 678, column: 35, scope: !9261)
!9267 = !DILocation(line: 678, column: 9, scope: !9259)
!9268 = !DILocation(line: 679, column: 34, scope: !9261)
!9269 = !DILocation(line: 679, column: 7, scope: !9261)
!9270 = !DILocation(line: 678, column: 67, scope: !9261)
!9271 = distinct !{!9271, !9256, !9272}
!9272 = !DILocation(line: 679, column: 41, scope: !9257)
!9273 = !DILocation(line: 680, column: 1, scope: !9220)
!9274 = distinct !DISubprogram(name: "bb_has_eh_pred", scope: !155, file: !155, line: 973, type: !9275, scopeLine: 974, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!9275 = !DISubroutineType(types: !9276)
!9276 = !{!1100, !1406}
!9277 = !DILocalVariable(name: "bb", arg: 1, scope: !9274, file: !155, line: 973, type: !1406)
!9278 = !DILocation(line: 973, column: 29, scope: !9274)
!9279 = !DILocalVariable(name: "e", scope: !9274, file: !155, line: 975, type: !1423)
!9280 = !DILocation(line: 975, column: 8, scope: !9274)
!9281 = !DILocalVariable(name: "ei", scope: !9274, file: !155, line: 976, type: !8056)
!9282 = !DILocation(line: 976, column: 17, scope: !9274)
!9283 = !DILocation(line: 978, column: 3, scope: !9284)
!9284 = distinct !DILexicalBlock(scope: !9274, file: !155, line: 978, column: 3)
!9285 = !DILocation(line: 978, column: 3, scope: !9286)
!9286 = distinct !DILexicalBlock(scope: !9284, file: !155, line: 978, column: 3)
!9287 = !DILocation(line: 980, column: 11, scope: !9288)
!9288 = distinct !DILexicalBlock(scope: !9289, file: !155, line: 980, column: 11)
!9289 = distinct !DILexicalBlock(scope: !9286, file: !155, line: 979, column: 5)
!9290 = !DILocation(line: 980, column: 14, scope: !9288)
!9291 = !DILocation(line: 980, column: 20, scope: !9288)
!9292 = !DILocation(line: 980, column: 11, scope: !9289)
!9293 = !DILocation(line: 981, column: 2, scope: !9288)
!9294 = !DILocation(line: 982, column: 5, scope: !9289)
!9295 = distinct !{!9295, !9283, !9296}
!9296 = !DILocation(line: 982, column: 5, scope: !9284)
!9297 = !DILocation(line: 983, column: 3, scope: !9274)
!9298 = !DILocation(line: 984, column: 1, scope: !9274)
!9299 = distinct !DISubprogram(name: "mark_regno_birth_or_death", scope: !3, file: !3, line: 626, type: !9300, scopeLine: 627, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!9300 = !DISubroutineType(types: !9301)
!9301 = !{null, !865, !1100}
!9302 = !DILocalVariable(name: "regno", arg: 1, scope: !9299, file: !3, line: 626, type: !865)
!9303 = !DILocation(line: 626, column: 32, scope: !9299)
!9304 = !DILocalVariable(name: "birth_p", arg: 2, scope: !9299, file: !3, line: 626, type: !1100)
!9305 = !DILocation(line: 626, column: 44, scope: !9299)
!9306 = !DILocalVariable(name: "cover_class", scope: !9299, file: !3, line: 628, type: !783)
!9307 = !DILocation(line: 628, column: 18, scope: !9299)
!9308 = !DILocation(line: 630, column: 17, scope: !9299)
!9309 = !DILocation(line: 630, column: 41, scope: !9299)
!9310 = !DILocation(line: 630, column: 15, scope: !9299)
!9311 = !DILocation(line: 631, column: 7, scope: !9312)
!9312 = distinct !DILexicalBlock(scope: !9299, file: !3, line: 631, column: 7)
!9313 = !DILocation(line: 631, column: 13, scope: !9312)
!9314 = !DILocation(line: 631, column: 7, scope: !9299)
!9315 = !DILocation(line: 633, column: 11, scope: !9316)
!9316 = distinct !DILexicalBlock(scope: !9317, file: !3, line: 633, column: 11)
!9317 = distinct !DILexicalBlock(scope: !9312, file: !3, line: 632, column: 5)
!9318 = !DILocation(line: 633, column: 23, scope: !9316)
!9319 = !DILocation(line: 633, column: 11, scope: !9317)
!9320 = !DILocation(line: 635, column: 8, scope: !9321)
!9321 = distinct !DILexicalBlock(scope: !9322, file: !3, line: 635, column: 8)
!9322 = distinct !DILexicalBlock(scope: !9316, file: !3, line: 634, column: 2)
!9323 = !DILocation(line: 635, column: 8, scope: !9322)
!9324 = !DILocation(line: 637, column: 24, scope: !9325)
!9325 = distinct !DILexicalBlock(scope: !9321, file: !3, line: 636, column: 6)
!9326 = !DILocation(line: 637, column: 39, scope: !9325)
!9327 = !DILocation(line: 637, column: 8, scope: !9325)
!9328 = !DILocation(line: 639, column: 26, scope: !9325)
!9329 = !DILocation(line: 639, column: 6, scope: !9325)
!9330 = !DILocation(line: 639, column: 39, scope: !9325)
!9331 = !DILocation(line: 638, column: 26, scope: !9325)
!9332 = !DILocation(line: 638, column: 8, scope: !9325)
!9333 = !DILocation(line: 639, column: 3, scope: !9325)
!9334 = !DILocation(line: 640, column: 6, scope: !9325)
!9335 = !DILocation(line: 643, column: 26, scope: !9336)
!9336 = distinct !DILexicalBlock(scope: !9321, file: !3, line: 642, column: 6)
!9337 = !DILocation(line: 643, column: 41, scope: !9336)
!9338 = !DILocation(line: 643, column: 8, scope: !9336)
!9339 = !DILocation(line: 645, column: 26, scope: !9336)
!9340 = !DILocation(line: 645, column: 6, scope: !9336)
!9341 = !DILocation(line: 645, column: 39, scope: !9336)
!9342 = !DILocation(line: 644, column: 26, scope: !9336)
!9343 = !DILocation(line: 644, column: 8, scope: !9336)
!9344 = !DILocation(line: 645, column: 3, scope: !9336)
!9345 = !DILocation(line: 647, column: 2, scope: !9322)
!9346 = !DILocation(line: 648, column: 5, scope: !9317)
!9347 = !DILocation(line: 649, column: 12, scope: !9348)
!9348 = distinct !DILexicalBlock(scope: !9312, file: !3, line: 649, column: 12)
!9349 = !DILocation(line: 649, column: 24, scope: !9348)
!9350 = !DILocation(line: 650, column: 5, scope: !9348)
!9351 = !DILocation(line: 650, column: 10, scope: !9348)
!9352 = !DILocation(line: 649, column: 12, scope: !9312)
!9353 = !DILocation(line: 652, column: 11, scope: !9354)
!9354 = distinct !DILexicalBlock(scope: !9355, file: !3, line: 652, column: 11)
!9355 = distinct !DILexicalBlock(scope: !9348, file: !3, line: 651, column: 5)
!9356 = !DILocation(line: 652, column: 11, scope: !9355)
!9357 = !DILocation(line: 654, column: 20, scope: !9358)
!9358 = distinct !DILexicalBlock(scope: !9354, file: !3, line: 653, column: 2)
!9359 = !DILocation(line: 654, column: 35, scope: !9358)
!9360 = !DILocation(line: 654, column: 4, scope: !9358)
!9361 = !DILocation(line: 655, column: 22, scope: !9358)
!9362 = !DILocation(line: 655, column: 4, scope: !9358)
!9363 = !DILocation(line: 655, column: 34, scope: !9358)
!9364 = !DILocation(line: 656, column: 2, scope: !9358)
!9365 = !DILocation(line: 659, column: 22, scope: !9366)
!9366 = distinct !DILexicalBlock(scope: !9354, file: !3, line: 658, column: 2)
!9367 = !DILocation(line: 659, column: 37, scope: !9366)
!9368 = !DILocation(line: 659, column: 4, scope: !9366)
!9369 = !DILocation(line: 660, column: 22, scope: !9366)
!9370 = !DILocation(line: 660, column: 4, scope: !9366)
!9371 = !DILocation(line: 660, column: 34, scope: !9366)
!9372 = !DILocation(line: 662, column: 5, scope: !9355)
!9373 = !DILocation(line: 663, column: 1, scope: !9299)
!9374 = distinct !DISubprogram(name: "rhs_regno", scope: !406, file: !406, line: 1051, type: !9375, scopeLine: 1052, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!9375 = !DISubroutineType(types: !9376)
!9376 = !{!7, !2387}
!9377 = !DILocalVariable(name: "x", arg: 1, scope: !9374, file: !406, line: 1051, type: !2387)
!9378 = !DILocation(line: 1051, column: 22, scope: !9374)
!9379 = !DILocation(line: 1053, column: 10, scope: !9374)
!9380 = !DILocation(line: 1053, column: 3, scope: !9374)
!9381 = distinct !DISubprogram(name: "bmp_iter_set_init", scope: !926, file: !926, line: 224, type: !9382, scopeLine: 226, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!9382 = !DISubroutineType(types: !9383)
!9383 = !{null, !9384, !9385, !7, !9388}
!9384 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9230, size: 64)
!9385 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_bitmap", file: !868, line: 48, baseType: !9386)
!9386 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9387, size: 64)
!9387 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !925)
!9388 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!9389 = !DILocalVariable(name: "bi", arg: 1, scope: !9381, file: !926, line: 224, type: !9384)
!9390 = !DILocation(line: 224, column: 37, scope: !9381)
!9391 = !DILocalVariable(name: "map", arg: 2, scope: !9381, file: !926, line: 224, type: !9385)
!9392 = !DILocation(line: 224, column: 54, scope: !9381)
!9393 = !DILocalVariable(name: "start_bit", arg: 3, scope: !9381, file: !926, line: 225, type: !7)
!9394 = !DILocation(line: 225, column: 15, scope: !9381)
!9395 = !DILocalVariable(name: "bit_no", arg: 4, scope: !9381, file: !926, line: 225, type: !9388)
!9396 = !DILocation(line: 225, column: 36, scope: !9381)
!9397 = !DILocation(line: 227, column: 14, scope: !9381)
!9398 = !DILocation(line: 227, column: 19, scope: !9381)
!9399 = !DILocation(line: 227, column: 3, scope: !9381)
!9400 = !DILocation(line: 227, column: 7, scope: !9381)
!9401 = !DILocation(line: 227, column: 12, scope: !9381)
!9402 = !DILocation(line: 228, column: 3, scope: !9381)
!9403 = !DILocation(line: 228, column: 7, scope: !9381)
!9404 = !DILocation(line: 228, column: 12, scope: !9381)
!9405 = !DILocation(line: 231, column: 3, scope: !9381)
!9406 = !DILocation(line: 233, column: 12, scope: !9407)
!9407 = distinct !DILexicalBlock(scope: !9408, file: !926, line: 233, column: 11)
!9408 = distinct !DILexicalBlock(scope: !9381, file: !926, line: 232, column: 5)
!9409 = !DILocation(line: 233, column: 16, scope: !9407)
!9410 = !DILocation(line: 233, column: 11, scope: !9408)
!9411 = !DILocation(line: 235, column: 4, scope: !9412)
!9412 = distinct !DILexicalBlock(scope: !9407, file: !926, line: 234, column: 2)
!9413 = !DILocation(line: 235, column: 8, scope: !9412)
!9414 = !DILocation(line: 235, column: 13, scope: !9412)
!9415 = !DILocation(line: 236, column: 4, scope: !9412)
!9416 = !DILocation(line: 239, column: 11, scope: !9417)
!9417 = distinct !DILexicalBlock(scope: !9408, file: !926, line: 239, column: 11)
!9418 = !DILocation(line: 239, column: 15, scope: !9417)
!9419 = !DILocation(line: 239, column: 21, scope: !9417)
!9420 = !DILocation(line: 239, column: 29, scope: !9417)
!9421 = !DILocation(line: 239, column: 39, scope: !9417)
!9422 = !DILocation(line: 239, column: 26, scope: !9417)
!9423 = !DILocation(line: 239, column: 11, scope: !9408)
!9424 = !DILocation(line: 240, column: 2, scope: !9417)
!9425 = !DILocation(line: 241, column: 18, scope: !9408)
!9426 = !DILocation(line: 241, column: 22, scope: !9408)
!9427 = !DILocation(line: 241, column: 28, scope: !9408)
!9428 = !DILocation(line: 241, column: 7, scope: !9408)
!9429 = !DILocation(line: 241, column: 11, scope: !9408)
!9430 = !DILocation(line: 241, column: 16, scope: !9408)
!9431 = distinct !{!9431, !9405, !9432}
!9432 = !DILocation(line: 242, column: 5, scope: !9381)
!9433 = !DILocation(line: 245, column: 7, scope: !9434)
!9434 = distinct !DILexicalBlock(scope: !9381, file: !926, line: 245, column: 7)
!9435 = !DILocation(line: 245, column: 11, scope: !9434)
!9436 = !DILocation(line: 245, column: 17, scope: !9434)
!9437 = !DILocation(line: 245, column: 25, scope: !9434)
!9438 = !DILocation(line: 245, column: 35, scope: !9434)
!9439 = !DILocation(line: 245, column: 22, scope: !9434)
!9440 = !DILocation(line: 245, column: 7, scope: !9381)
!9441 = !DILocation(line: 246, column: 17, scope: !9434)
!9442 = !DILocation(line: 246, column: 21, scope: !9434)
!9443 = !DILocation(line: 246, column: 27, scope: !9434)
!9444 = !DILocation(line: 246, column: 32, scope: !9434)
!9445 = !DILocation(line: 246, column: 15, scope: !9434)
!9446 = !DILocation(line: 246, column: 5, scope: !9434)
!9447 = !DILocation(line: 249, column: 17, scope: !9381)
!9448 = !DILocation(line: 249, column: 27, scope: !9381)
!9449 = !DILocation(line: 249, column: 46, scope: !9381)
!9450 = !DILocation(line: 249, column: 3, scope: !9381)
!9451 = !DILocation(line: 249, column: 7, scope: !9381)
!9452 = !DILocation(line: 249, column: 15, scope: !9381)
!9453 = !DILocation(line: 250, column: 14, scope: !9381)
!9454 = !DILocation(line: 250, column: 18, scope: !9381)
!9455 = !DILocation(line: 250, column: 24, scope: !9381)
!9456 = !DILocation(line: 250, column: 29, scope: !9381)
!9457 = !DILocation(line: 250, column: 33, scope: !9381)
!9458 = !DILocation(line: 250, column: 3, scope: !9381)
!9459 = !DILocation(line: 250, column: 7, scope: !9381)
!9460 = !DILocation(line: 250, column: 12, scope: !9381)
!9461 = !DILocation(line: 251, column: 16, scope: !9381)
!9462 = !DILocation(line: 251, column: 26, scope: !9381)
!9463 = !DILocation(line: 251, column: 3, scope: !9381)
!9464 = !DILocation(line: 251, column: 7, scope: !9381)
!9465 = !DILocation(line: 251, column: 12, scope: !9381)
!9466 = !DILocation(line: 257, column: 17, scope: !9381)
!9467 = !DILocation(line: 257, column: 21, scope: !9381)
!9468 = !DILocation(line: 257, column: 16, scope: !9381)
!9469 = !DILocation(line: 257, column: 13, scope: !9381)
!9470 = !DILocation(line: 259, column: 13, scope: !9381)
!9471 = !DILocation(line: 259, column: 4, scope: !9381)
!9472 = !DILocation(line: 259, column: 11, scope: !9381)
!9473 = !DILocation(line: 260, column: 1, scope: !9381)
!9474 = distinct !DISubprogram(name: "bmp_iter_set", scope: !926, file: !926, line: 393, type: !9475, scopeLine: 394, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!9475 = !DISubroutineType(types: !9476)
!9476 = !{!1100, !9384, !9388}
!9477 = !DILocalVariable(name: "bi", arg: 1, scope: !9474, file: !926, line: 393, type: !9384)
!9478 = !DILocation(line: 393, column: 32, scope: !9474)
!9479 = !DILocalVariable(name: "bit_no", arg: 2, scope: !9474, file: !926, line: 393, type: !9388)
!9480 = !DILocation(line: 393, column: 46, scope: !9474)
!9481 = !DILocation(line: 396, column: 7, scope: !9482)
!9482 = distinct !DILexicalBlock(scope: !9474, file: !926, line: 396, column: 7)
!9483 = !DILocation(line: 396, column: 11, scope: !9482)
!9484 = !DILocation(line: 396, column: 7, scope: !9474)
!9485 = !DILocation(line: 397, column: 5, scope: !9482)
!9486 = !DILabel(scope: !9487, name: "next_bit", file: !926, line: 398)
!9487 = distinct !DILexicalBlock(scope: !9482, file: !926, line: 397, column: 5)
!9488 = !DILocation(line: 398, column: 5, scope: !9487)
!9489 = !DILocation(line: 399, column: 7, scope: !9487)
!9490 = !DILocation(line: 399, column: 16, scope: !9487)
!9491 = !DILocation(line: 399, column: 20, scope: !9487)
!9492 = !DILocation(line: 399, column: 25, scope: !9487)
!9493 = !DILocation(line: 399, column: 14, scope: !9487)
!9494 = !DILocation(line: 401, column: 4, scope: !9495)
!9495 = distinct !DILexicalBlock(scope: !9487, file: !926, line: 400, column: 2)
!9496 = !DILocation(line: 401, column: 8, scope: !9495)
!9497 = !DILocation(line: 401, column: 13, scope: !9495)
!9498 = !DILocation(line: 402, column: 5, scope: !9495)
!9499 = !DILocation(line: 402, column: 12, scope: !9495)
!9500 = distinct !{!9500, !9489, !9501}
!9501 = !DILocation(line: 403, column: 2, scope: !9487)
!9502 = !DILocation(line: 404, column: 7, scope: !9487)
!9503 = !DILocation(line: 410, column: 16, scope: !9474)
!9504 = !DILocation(line: 410, column: 15, scope: !9474)
!9505 = !DILocation(line: 410, column: 23, scope: !9474)
!9506 = !DILocation(line: 410, column: 42, scope: !9474)
!9507 = !DILocation(line: 411, column: 7, scope: !9474)
!9508 = !DILocation(line: 411, column: 26, scope: !9474)
!9509 = !DILocation(line: 410, column: 4, scope: !9474)
!9510 = !DILocation(line: 410, column: 11, scope: !9474)
!9511 = !DILocation(line: 412, column: 3, scope: !9474)
!9512 = !DILocation(line: 412, column: 7, scope: !9474)
!9513 = !DILocation(line: 412, column: 14, scope: !9474)
!9514 = !DILocation(line: 414, column: 3, scope: !9474)
!9515 = !DILocation(line: 417, column: 7, scope: !9516)
!9516 = distinct !DILexicalBlock(scope: !9474, file: !926, line: 415, column: 5)
!9517 = !DILocation(line: 417, column: 14, scope: !9516)
!9518 = !DILocation(line: 417, column: 18, scope: !9516)
!9519 = !DILocation(line: 417, column: 26, scope: !9516)
!9520 = !DILocation(line: 419, column: 15, scope: !9521)
!9521 = distinct !DILexicalBlock(scope: !9516, file: !926, line: 418, column: 2)
!9522 = !DILocation(line: 419, column: 19, scope: !9521)
!9523 = !DILocation(line: 419, column: 25, scope: !9521)
!9524 = !DILocation(line: 419, column: 30, scope: !9521)
!9525 = !DILocation(line: 419, column: 34, scope: !9521)
!9526 = !DILocation(line: 419, column: 4, scope: !9521)
!9527 = !DILocation(line: 419, column: 8, scope: !9521)
!9528 = !DILocation(line: 419, column: 13, scope: !9521)
!9529 = !DILocation(line: 420, column: 8, scope: !9530)
!9530 = distinct !DILexicalBlock(scope: !9521, file: !926, line: 420, column: 8)
!9531 = !DILocation(line: 420, column: 12, scope: !9530)
!9532 = !DILocation(line: 420, column: 8, scope: !9521)
!9533 = !DILocation(line: 421, column: 6, scope: !9530)
!9534 = !DILocation(line: 422, column: 5, scope: !9521)
!9535 = !DILocation(line: 422, column: 12, scope: !9521)
!9536 = !DILocation(line: 423, column: 4, scope: !9521)
!9537 = !DILocation(line: 423, column: 8, scope: !9521)
!9538 = !DILocation(line: 423, column: 15, scope: !9521)
!9539 = distinct !{!9539, !9515, !9540}
!9540 = !DILocation(line: 424, column: 2, scope: !9516)
!9541 = !DILocation(line: 427, column: 18, scope: !9516)
!9542 = !DILocation(line: 427, column: 22, scope: !9516)
!9543 = !DILocation(line: 427, column: 28, scope: !9516)
!9544 = !DILocation(line: 427, column: 7, scope: !9516)
!9545 = !DILocation(line: 427, column: 11, scope: !9516)
!9546 = !DILocation(line: 427, column: 16, scope: !9516)
!9547 = !DILocation(line: 428, column: 12, scope: !9548)
!9548 = distinct !DILexicalBlock(scope: !9516, file: !926, line: 428, column: 11)
!9549 = !DILocation(line: 428, column: 16, scope: !9548)
!9550 = !DILocation(line: 428, column: 11, scope: !9516)
!9551 = !DILocation(line: 429, column: 2, scope: !9548)
!9552 = !DILocation(line: 430, column: 17, scope: !9516)
!9553 = !DILocation(line: 430, column: 21, scope: !9516)
!9554 = !DILocation(line: 430, column: 27, scope: !9516)
!9555 = !DILocation(line: 430, column: 32, scope: !9516)
!9556 = !DILocation(line: 430, column: 8, scope: !9516)
!9557 = !DILocation(line: 430, column: 15, scope: !9516)
!9558 = !DILocation(line: 431, column: 7, scope: !9516)
!9559 = !DILocation(line: 431, column: 11, scope: !9516)
!9560 = !DILocation(line: 431, column: 19, scope: !9516)
!9561 = distinct !{!9561, !9514, !9562}
!9562 = !DILocation(line: 432, column: 5, scope: !9474)
!9563 = !DILocation(line: 433, column: 1, scope: !9474)
!9564 = distinct !DISubprogram(name: "bmp_iter_next", scope: !926, file: !926, line: 382, type: !9565, scopeLine: 383, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!9565 = !DISubroutineType(types: !9566)
!9566 = !{null, !9384, !9388}
!9567 = !DILocalVariable(name: "bi", arg: 1, scope: !9564, file: !926, line: 382, type: !9384)
!9568 = !DILocation(line: 382, column: 33, scope: !9564)
!9569 = !DILocalVariable(name: "bit_no", arg: 2, scope: !9564, file: !926, line: 382, type: !9388)
!9570 = !DILocation(line: 382, column: 47, scope: !9564)
!9571 = !DILocation(line: 384, column: 3, scope: !9564)
!9572 = !DILocation(line: 384, column: 7, scope: !9564)
!9573 = !DILocation(line: 384, column: 12, scope: !9564)
!9574 = !DILocation(line: 385, column: 4, scope: !9564)
!9575 = !DILocation(line: 385, column: 11, scope: !9564)
!9576 = !DILocation(line: 386, column: 1, scope: !9564)
!9577 = distinct !DISubprogram(name: "save_reg_pressure", scope: !3, file: !3, line: 740, type: !2341, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!9578 = !DILocalVariable(name: "i", scope: !9577, file: !3, line: 742, type: !865)
!9579 = !DILocation(line: 742, column: 7, scope: !9577)
!9580 = !DILocation(line: 744, column: 10, scope: !9581)
!9581 = distinct !DILexicalBlock(scope: !9577, file: !3, line: 744, column: 3)
!9582 = !DILocation(line: 744, column: 8, scope: !9581)
!9583 = !DILocation(line: 744, column: 15, scope: !9584)
!9584 = distinct !DILexicalBlock(scope: !9581, file: !3, line: 744, column: 3)
!9585 = !DILocation(line: 744, column: 19, scope: !9584)
!9586 = !DILocation(line: 744, column: 17, scope: !9584)
!9587 = !DILocation(line: 744, column: 3, scope: !9581)
!9588 = !DILocation(line: 746, column: 47, scope: !9584)
!9589 = !DILocation(line: 746, column: 27, scope: !9584)
!9590 = !DILocation(line: 746, column: 9, scope: !9584)
!9591 = !DILocation(line: 745, column: 44, scope: !9584)
!9592 = !DILocation(line: 745, column: 24, scope: !9584)
!9593 = !DILocation(line: 745, column: 5, scope: !9584)
!9594 = !DILocation(line: 746, column: 7, scope: !9584)
!9595 = !DILocation(line: 744, column: 46, scope: !9584)
!9596 = !DILocation(line: 744, column: 3, scope: !9584)
!9597 = distinct !{!9597, !9587, !9598}
!9598 = !DILocation(line: 746, column: 49, scope: !9581)
!9599 = !DILocation(line: 747, column: 16, scope: !9577)
!9600 = !DILocation(line: 747, column: 32, scope: !9577)
!9601 = !DILocation(line: 747, column: 3, scope: !9577)
!9602 = !DILocation(line: 748, column: 1, scope: !9577)
!9603 = distinct !DISubprogram(name: "update_register_pressure", scope: !3, file: !3, line: 1570, type: !2350, scopeLine: 1571, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!9604 = !DILocalVariable(name: "insn", arg: 1, scope: !9603, file: !3, line: 1570, type: !867)
!9605 = !DILocation(line: 1570, column: 31, scope: !9603)
!9606 = !DILocalVariable(name: "use", scope: !9603, file: !3, line: 1572, type: !2178)
!9607 = !DILocation(line: 1572, column: 24, scope: !9603)
!9608 = !DILocalVariable(name: "set", scope: !9603, file: !3, line: 1573, type: !2186)
!9609 = !DILocation(line: 1573, column: 24, scope: !9603)
!9610 = !DILocation(line: 1575, column: 14, scope: !9611)
!9611 = distinct !DILexicalBlock(scope: !9603, file: !3, line: 1575, column: 3)
!9612 = !DILocation(line: 1575, column: 12, scope: !9611)
!9613 = !DILocation(line: 1575, column: 8, scope: !9611)
!9614 = !DILocation(line: 1575, column: 40, scope: !9615)
!9615 = distinct !DILexicalBlock(scope: !9611, file: !3, line: 1575, column: 3)
!9616 = !DILocation(line: 1575, column: 44, scope: !9615)
!9617 = !DILocation(line: 1575, column: 3, scope: !9611)
!9618 = !DILocation(line: 1576, column: 22, scope: !9619)
!9619 = distinct !DILexicalBlock(scope: !9615, file: !3, line: 1576, column: 9)
!9620 = !DILocation(line: 1576, column: 9, scope: !9619)
!9621 = !DILocation(line: 1576, column: 27, scope: !9619)
!9622 = !DILocation(line: 1576, column: 44, scope: !9619)
!9623 = !DILocation(line: 1576, column: 59, scope: !9619)
!9624 = !DILocation(line: 1576, column: 64, scope: !9619)
!9625 = !DILocation(line: 1576, column: 30, scope: !9619)
!9626 = !DILocation(line: 1576, column: 9, scope: !9615)
!9627 = !DILocation(line: 1577, column: 34, scope: !9619)
!9628 = !DILocation(line: 1577, column: 39, scope: !9619)
!9629 = !DILocation(line: 1577, column: 7, scope: !9619)
!9630 = !DILocation(line: 1576, column: 69, scope: !9619)
!9631 = !DILocation(line: 1575, column: 59, scope: !9615)
!9632 = !DILocation(line: 1575, column: 64, scope: !9615)
!9633 = !DILocation(line: 1575, column: 57, scope: !9615)
!9634 = !DILocation(line: 1575, column: 3, scope: !9615)
!9635 = distinct !{!9635, !9617, !9636}
!9636 = !DILocation(line: 1577, column: 51, scope: !9611)
!9637 = !DILocation(line: 1578, column: 14, scope: !9638)
!9638 = distinct !DILexicalBlock(scope: !9603, file: !3, line: 1578, column: 3)
!9639 = !DILocation(line: 1578, column: 12, scope: !9638)
!9640 = !DILocation(line: 1578, column: 8, scope: !9638)
!9641 = !DILocation(line: 1578, column: 40, scope: !9642)
!9642 = distinct !DILexicalBlock(scope: !9638, file: !3, line: 1578, column: 3)
!9643 = !DILocation(line: 1578, column: 44, scope: !9642)
!9644 = !DILocation(line: 1578, column: 3, scope: !9638)
!9645 = !DILocation(line: 1579, column: 32, scope: !9642)
!9646 = !DILocation(line: 1579, column: 37, scope: !9642)
!9647 = !DILocation(line: 1579, column: 5, scope: !9642)
!9648 = !DILocation(line: 1578, column: 59, scope: !9642)
!9649 = !DILocation(line: 1578, column: 64, scope: !9642)
!9650 = !DILocation(line: 1578, column: 57, scope: !9642)
!9651 = !DILocation(line: 1578, column: 3, scope: !9642)
!9652 = distinct !{!9652, !9644, !9653}
!9653 = !DILocation(line: 1579, column: 48, scope: !9638)
!9654 = !DILocation(line: 1580, column: 1, scope: !9603)
!9655 = distinct !DISubprogram(name: "restore_reg_pressure", scope: !3, file: !3, line: 752, type: !2341, scopeLine: 753, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!9656 = !DILocalVariable(name: "i", scope: !9655, file: !3, line: 754, type: !865)
!9657 = !DILocation(line: 754, column: 7, scope: !9655)
!9658 = !DILocation(line: 756, column: 10, scope: !9659)
!9659 = distinct !DILexicalBlock(scope: !9655, file: !3, line: 756, column: 3)
!9660 = !DILocation(line: 756, column: 8, scope: !9659)
!9661 = !DILocation(line: 756, column: 15, scope: !9662)
!9662 = distinct !DILexicalBlock(scope: !9659, file: !3, line: 756, column: 3)
!9663 = !DILocation(line: 756, column: 19, scope: !9662)
!9664 = !DILocation(line: 756, column: 17, scope: !9662)
!9665 = !DILocation(line: 756, column: 3, scope: !9659)
!9666 = !DILocation(line: 758, column: 48, scope: !9662)
!9667 = !DILocation(line: 758, column: 28, scope: !9662)
!9668 = !DILocation(line: 758, column: 9, scope: !9662)
!9669 = !DILocation(line: 757, column: 43, scope: !9662)
!9670 = !DILocation(line: 757, column: 23, scope: !9662)
!9671 = !DILocation(line: 757, column: 5, scope: !9662)
!9672 = !DILocation(line: 758, column: 7, scope: !9662)
!9673 = !DILocation(line: 756, column: 46, scope: !9662)
!9674 = !DILocation(line: 756, column: 3, scope: !9662)
!9675 = distinct !{!9675, !9665, !9676}
!9676 = !DILocation(line: 758, column: 50, scope: !9659)
!9677 = !DILocation(line: 759, column: 16, scope: !9655)
!9678 = !DILocation(line: 759, column: 31, scope: !9655)
!9679 = !DILocation(line: 759, column: 3, scope: !9655)
!9680 = !DILocation(line: 760, column: 1, scope: !9655)
!9681 = distinct !DISubprogram(name: "fix_jump_move", scope: !3, file: !3, line: 4960, type: !2350, scopeLine: 4961, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!9682 = !DILocalVariable(name: "jump", arg: 1, scope: !9681, file: !3, line: 4960, type: !867)
!9683 = !DILocation(line: 4960, column: 20, scope: !9681)
!9684 = !DILocalVariable(name: "bb", scope: !9681, file: !3, line: 4962, type: !1406)
!9685 = !DILocation(line: 4962, column: 15, scope: !9681)
!9686 = !DILocalVariable(name: "jump_bb", scope: !9681, file: !3, line: 4962, type: !1406)
!9687 = !DILocation(line: 4962, column: 19, scope: !9681)
!9688 = !DILocalVariable(name: "jump_bb_next", scope: !9681, file: !3, line: 4962, type: !1406)
!9689 = !DILocation(line: 4962, column: 28, scope: !9681)
!9690 = !DILocation(line: 4964, column: 8, scope: !9681)
!9691 = !DILocation(line: 4964, column: 6, scope: !9681)
!9692 = !DILocation(line: 4965, column: 13, scope: !9681)
!9693 = !DILocation(line: 4965, column: 11, scope: !9681)
!9694 = !DILocation(line: 4966, column: 18, scope: !9681)
!9695 = !DILocation(line: 4966, column: 27, scope: !9681)
!9696 = !DILocation(line: 4966, column: 16, scope: !9681)
!9697 = !DILocation(line: 4968, column: 3, scope: !9681)
!9698 = !DILocation(line: 4971, column: 8, scope: !9699)
!9699 = distinct !DILexicalBlock(scope: !9681, file: !3, line: 4971, column: 7)
!9700 = !DILocation(line: 4971, column: 7, scope: !9681)
!9701 = !DILocation(line: 4973, column: 24, scope: !9699)
!9702 = !DILocation(line: 4973, column: 5, scope: !9699)
!9703 = !DILocation(line: 4973, column: 22, scope: !9699)
!9704 = !DILocation(line: 4975, column: 7, scope: !9705)
!9705 = distinct !DILexicalBlock(scope: !9681, file: !3, line: 4975, column: 7)
!9706 = !DILocation(line: 4975, column: 22, scope: !9705)
!9707 = !DILocation(line: 4975, column: 19, scope: !9705)
!9708 = !DILocation(line: 4975, column: 7, scope: !9681)
!9709 = !DILocation(line: 4978, column: 29, scope: !9705)
!9710 = !DILocation(line: 4978, column: 5, scope: !9705)
!9711 = !DILocation(line: 4978, column: 27, scope: !9705)
!9712 = !DILocation(line: 4981, column: 29, scope: !9705)
!9713 = !DILocation(line: 4981, column: 5, scope: !9705)
!9714 = !DILocation(line: 4981, column: 27, scope: !9705)
!9715 = !DILocation(line: 4984, column: 17, scope: !9681)
!9716 = !DILocation(line: 4984, column: 3, scope: !9681)
!9717 = !DILocation(line: 4984, column: 15, scope: !9681)
!9718 = !DILocation(line: 4986, column: 23, scope: !9681)
!9719 = !DILocation(line: 4986, column: 3, scope: !9681)
!9720 = !DILocation(line: 4987, column: 1, scope: !9681)
!9721 = distinct !DISubprogram(name: "move_block_after_check", scope: !3, file: !3, line: 4991, type: !2350, scopeLine: 4992, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!9722 = !DILocalVariable(name: "jump", arg: 1, scope: !9721, file: !3, line: 4991, type: !867)
!9723 = !DILocation(line: 4991, column: 29, scope: !9721)
!9724 = !DILocalVariable(name: "bb", scope: !9721, file: !3, line: 4993, type: !1406)
!9725 = !DILocation(line: 4993, column: 15, scope: !9721)
!9726 = !DILocalVariable(name: "jump_bb", scope: !9721, file: !3, line: 4993, type: !1406)
!9727 = !DILocation(line: 4993, column: 19, scope: !9721)
!9728 = !DILocalVariable(name: "jump_bb_next", scope: !9721, file: !3, line: 4993, type: !1406)
!9729 = !DILocation(line: 4993, column: 28, scope: !9721)
!9730 = !DILocalVariable(name: "t", scope: !9721, file: !3, line: 4994, type: !1411)
!9731 = !DILocation(line: 4994, column: 17, scope: !9721)
!9732 = !DILocation(line: 4996, column: 8, scope: !9721)
!9733 = !DILocation(line: 4996, column: 6, scope: !9721)
!9734 = !DILocation(line: 4997, column: 13, scope: !9721)
!9735 = !DILocation(line: 4997, column: 11, scope: !9721)
!9736 = !DILocation(line: 4998, column: 18, scope: !9721)
!9737 = !DILocation(line: 4998, column: 27, scope: !9721)
!9738 = !DILocation(line: 4998, column: 16, scope: !9721)
!9739 = !DILocation(line: 5000, column: 23, scope: !9721)
!9740 = !DILocation(line: 5000, column: 3, scope: !9721)
!9741 = !DILocation(line: 5002, column: 3, scope: !9721)
!9742 = !DILocation(line: 5005, column: 17, scope: !9721)
!9743 = !DILocation(line: 5005, column: 3, scope: !9721)
!9744 = !DILocation(line: 5006, column: 15, scope: !9721)
!9745 = !DILocation(line: 5006, column: 29, scope: !9721)
!9746 = !DILocation(line: 5006, column: 3, scope: !9721)
!9747 = !DILocation(line: 5008, column: 7, scope: !9721)
!9748 = !DILocation(line: 5008, column: 11, scope: !9721)
!9749 = !DILocation(line: 5008, column: 5, scope: !9721)
!9750 = !DILocation(line: 5009, column: 3, scope: !9721)
!9751 = !DILocation(line: 5009, column: 7, scope: !9721)
!9752 = !DILocation(line: 5009, column: 13, scope: !9721)
!9753 = !DILocation(line: 5010, column: 17, scope: !9721)
!9754 = !DILocation(line: 5010, column: 26, scope: !9721)
!9755 = !DILocation(line: 5010, column: 34, scope: !9721)
!9756 = !DILocation(line: 5010, column: 3, scope: !9721)
!9757 = !DILocation(line: 5011, column: 17, scope: !9721)
!9758 = !DILocation(line: 5011, column: 31, scope: !9721)
!9759 = !DILocation(line: 5011, column: 39, scope: !9721)
!9760 = !DILocation(line: 5011, column: 3, scope: !9721)
!9761 = !DILocation(line: 5012, column: 19, scope: !9721)
!9762 = !DILocation(line: 5012, column: 3, scope: !9721)
!9763 = !DILocation(line: 5014, column: 3, scope: !9721)
!9764 = !DILocation(line: 5016, column: 3, scope: !9721)
!9765 = !DILocation(line: 5016, column: 22, scope: !9721)
!9766 = !DILocation(line: 5017, column: 6, scope: !9721)
!9767 = !DILocation(line: 5017, column: 10, scope: !9721)
!9768 = !DILocation(line: 5017, column: 17, scope: !9721)
!9769 = !DILocation(line: 5017, column: 26, scope: !9721)
!9770 = !DILocation(line: 5017, column: 33, scope: !9721)
!9771 = !DILocation(line: 5017, column: 47, scope: !9721)
!9772 = !DILocation(line: 5018, column: 1, scope: !9721)
!9773 = distinct !DISubprogram(name: "move_succs", scope: !3, file: !3, line: 5024, type: !9774, scopeLine: 5025, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!9774 = !DISubroutineType(types: !9775)
!9775 = !{null, !8061, !1406}
!9776 = !DILocalVariable(name: "succsp", arg: 1, scope: !9773, file: !3, line: 5024, type: !8061)
!9777 = !DILocation(line: 5024, column: 28, scope: !9773)
!9778 = !DILocalVariable(name: "to", arg: 2, scope: !9773, file: !3, line: 5024, type: !1406)
!9779 = !DILocation(line: 5024, column: 48, scope: !9773)
!9780 = !DILocalVariable(name: "e", scope: !9773, file: !3, line: 5026, type: !1423)
!9781 = !DILocation(line: 5026, column: 8, scope: !9773)
!9782 = !DILocalVariable(name: "ei", scope: !9773, file: !3, line: 5027, type: !8056)
!9783 = !DILocation(line: 5027, column: 17, scope: !9773)
!9784 = !DILocation(line: 5029, column: 3, scope: !9773)
!9785 = !DILocation(line: 5031, column: 16, scope: !9773)
!9786 = !DILocation(line: 5031, column: 15, scope: !9773)
!9787 = !DILocation(line: 5031, column: 3, scope: !9773)
!9788 = !DILocation(line: 5031, column: 7, scope: !9773)
!9789 = !DILocation(line: 5031, column: 13, scope: !9773)
!9790 = !DILocation(line: 5033, column: 3, scope: !9791)
!9791 = distinct !DILexicalBlock(scope: !9773, file: !3, line: 5033, column: 3)
!9792 = !DILocation(line: 5033, column: 3, scope: !9793)
!9793 = distinct !DILexicalBlock(scope: !9791, file: !3, line: 5033, column: 3)
!9794 = !DILocation(line: 5034, column: 14, scope: !9793)
!9795 = !DILocation(line: 5034, column: 5, scope: !9793)
!9796 = !DILocation(line: 5034, column: 8, scope: !9793)
!9797 = !DILocation(line: 5034, column: 12, scope: !9793)
!9798 = distinct !{!9798, !9790, !9799}
!9799 = !DILocation(line: 5034, column: 14, scope: !9791)
!9800 = !DILocation(line: 5036, column: 4, scope: !9773)
!9801 = !DILocation(line: 5036, column: 11, scope: !9773)
!9802 = !DILocation(line: 5037, column: 1, scope: !9773)
!9803 = distinct !DISubprogram(name: "update_reg_and_insn_max_reg_pressure", scope: !3, file: !3, line: 1629, type: !2350, scopeLine: 1630, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!9804 = !DILocalVariable(name: "insn", arg: 1, scope: !9803, file: !3, line: 1629, type: !867)
!9805 = !DILocation(line: 1629, column: 43, scope: !9803)
!9806 = !DILocalVariable(name: "i", scope: !9803, file: !3, line: 1631, type: !865)
!9807 = !DILocation(line: 1631, column: 7, scope: !9803)
!9808 = !DILocalVariable(name: "before", scope: !9803, file: !3, line: 1632, type: !2439)
!9809 = !DILocation(line: 1632, column: 7, scope: !9803)
!9810 = !DILocation(line: 1634, column: 10, scope: !9811)
!9811 = distinct !DILexicalBlock(scope: !9803, file: !3, line: 1634, column: 3)
!9812 = !DILocation(line: 1634, column: 8, scope: !9811)
!9813 = !DILocation(line: 1634, column: 15, scope: !9814)
!9814 = distinct !DILexicalBlock(scope: !9811, file: !3, line: 1634, column: 3)
!9815 = !DILocation(line: 1634, column: 19, scope: !9814)
!9816 = !DILocation(line: 1634, column: 17, scope: !9814)
!9817 = !DILocation(line: 1634, column: 3, scope: !9811)
!9818 = !DILocation(line: 1635, column: 55, scope: !9814)
!9819 = !DILocation(line: 1635, column: 35, scope: !9814)
!9820 = !DILocation(line: 1635, column: 17, scope: !9814)
!9821 = !DILocation(line: 1635, column: 12, scope: !9814)
!9822 = !DILocation(line: 1635, column: 5, scope: !9814)
!9823 = !DILocation(line: 1635, column: 15, scope: !9814)
!9824 = !DILocation(line: 1634, column: 46, scope: !9814)
!9825 = !DILocation(line: 1634, column: 3, scope: !9814)
!9826 = distinct !{!9826, !9817, !9827}
!9827 = !DILocation(line: 1635, column: 57, scope: !9811)
!9828 = !DILocation(line: 1636, column: 29, scope: !9803)
!9829 = !DILocation(line: 1636, column: 3, scope: !9803)
!9830 = !DILocation(line: 1637, column: 10, scope: !9831)
!9831 = distinct !DILexicalBlock(scope: !9803, file: !3, line: 1637, column: 3)
!9832 = !DILocation(line: 1637, column: 8, scope: !9831)
!9833 = !DILocation(line: 1637, column: 15, scope: !9834)
!9834 = distinct !DILexicalBlock(scope: !9831, file: !3, line: 1637, column: 3)
!9835 = !DILocation(line: 1637, column: 19, scope: !9834)
!9836 = !DILocation(line: 1637, column: 17, scope: !9834)
!9837 = !DILocation(line: 1637, column: 3, scope: !9831)
!9838 = !DILocation(line: 1638, column: 47, scope: !9839)
!9839 = distinct !DILexicalBlock(scope: !9834, file: !3, line: 1638, column: 9)
!9840 = !DILocation(line: 1638, column: 27, scope: !9839)
!9841 = !DILocation(line: 1638, column: 9, scope: !9839)
!9842 = !DILocation(line: 1638, column: 61, scope: !9839)
!9843 = !DILocation(line: 1638, column: 54, scope: !9839)
!9844 = !DILocation(line: 1638, column: 51, scope: !9839)
!9845 = !DILocation(line: 1638, column: 9, scope: !9834)
!9846 = !DILocation(line: 1639, column: 7, scope: !9839)
!9847 = !DILocation(line: 1638, column: 62, scope: !9839)
!9848 = !DILocation(line: 1637, column: 46, scope: !9834)
!9849 = !DILocation(line: 1637, column: 3, scope: !9834)
!9850 = distinct !{!9850, !9837, !9851}
!9851 = !DILocation(line: 1639, column: 7, scope: !9831)
!9852 = !DILocation(line: 1640, column: 7, scope: !9853)
!9853 = distinct !DILexicalBlock(scope: !9803, file: !3, line: 1640, column: 7)
!9854 = !DILocation(line: 1640, column: 11, scope: !9853)
!9855 = !DILocation(line: 1640, column: 9, scope: !9853)
!9856 = !DILocation(line: 1640, column: 7, scope: !9803)
!9857 = !DILocation(line: 1641, column: 34, scope: !9853)
!9858 = !DILocation(line: 1641, column: 5, scope: !9853)
!9859 = !DILocation(line: 1642, column: 1, scope: !9803)
!9860 = distinct !DISubprogram(name: "fix_recovery_deps", scope: !3, file: !3, line: 4722, type: !2345, scopeLine: 4723, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!9861 = !DILocalVariable(name: "rec", arg: 1, scope: !9860, file: !3, line: 4722, type: !1406)
!9862 = !DILocation(line: 4722, column: 32, scope: !9860)
!9863 = !DILocalVariable(name: "note", scope: !9860, file: !3, line: 4724, type: !867)
!9864 = !DILocation(line: 4724, column: 7, scope: !9860)
!9865 = !DILocalVariable(name: "insn", scope: !9860, file: !3, line: 4724, type: !867)
!9866 = !DILocation(line: 4724, column: 13, scope: !9860)
!9867 = !DILocalVariable(name: "jump", scope: !9860, file: !3, line: 4724, type: !867)
!9868 = !DILocation(line: 4724, column: 19, scope: !9860)
!9869 = !DILocalVariable(name: "ready_list", scope: !9860, file: !3, line: 4724, type: !867)
!9870 = !DILocation(line: 4724, column: 25, scope: !9860)
!9871 = !DILocalVariable(name: "in_ready", scope: !9860, file: !3, line: 4725, type: !6614)
!9872 = !DILocation(line: 4725, column: 15, scope: !9860)
!9873 = !DILocalVariable(name: "link", scope: !9860, file: !3, line: 4726, type: !867)
!9874 = !DILocation(line: 4726, column: 7, scope: !9860)
!9875 = !DILocation(line: 4728, column: 3, scope: !9860)
!9876 = !DILocation(line: 4731, column: 10, scope: !9860)
!9877 = !DILocation(line: 4731, column: 8, scope: !9860)
!9878 = !DILocation(line: 4732, column: 3, scope: !9860)
!9879 = !DILocation(line: 4733, column: 10, scope: !9860)
!9880 = !DILocation(line: 4733, column: 8, scope: !9860)
!9881 = !DILocation(line: 4734, column: 3, scope: !9860)
!9882 = !DILocation(line: 4735, column: 10, scope: !9860)
!9883 = !DILocation(line: 4735, column: 8, scope: !9860)
!9884 = !DILocation(line: 4737, column: 3, scope: !9860)
!9885 = !DILocalVariable(name: "sd_it", scope: !9886, file: !3, line: 4739, type: !2467)
!9886 = distinct !DILexicalBlock(scope: !9860, file: !3, line: 4738, column: 5)
!9887 = !DILocation(line: 4739, column: 23, scope: !9886)
!9888 = !DILocalVariable(name: "dep", scope: !9886, file: !3, line: 4740, type: !2720)
!9889 = !DILocation(line: 4740, column: 13, scope: !9886)
!9890 = !DILocation(line: 4742, column: 39, scope: !9891)
!9891 = distinct !DILexicalBlock(scope: !9886, file: !3, line: 4742, column: 7)
!9892 = !DILocation(line: 4742, column: 20, scope: !9891)
!9893 = !DILocation(line: 4742, column: 12, scope: !9891)
!9894 = !DILocation(line: 4743, column: 5, scope: !9895)
!9895 = distinct !DILexicalBlock(scope: !9891, file: !3, line: 4742, column: 7)
!9896 = !DILocation(line: 4742, column: 7, scope: !9891)
!9897 = !DILocalVariable(name: "consumer", scope: !9898, file: !3, line: 4745, type: !867)
!9898 = distinct !DILexicalBlock(scope: !9895, file: !3, line: 4744, column: 2)
!9899 = !DILocation(line: 4745, column: 8, scope: !9898)
!9900 = !DILocation(line: 4745, column: 19, scope: !9898)
!9901 = !DILocation(line: 4747, column: 8, scope: !9902)
!9902 = distinct !DILexicalBlock(scope: !9898, file: !3, line: 4747, column: 8)
!9903 = !DILocation(line: 4747, column: 37, scope: !9902)
!9904 = !DILocation(line: 4747, column: 34, scope: !9902)
!9905 = !DILocation(line: 4747, column: 8, scope: !9898)
!9906 = !DILocation(line: 4749, column: 8, scope: !9907)
!9907 = distinct !DILexicalBlock(scope: !9902, file: !3, line: 4748, column: 6)
!9908 = !DILocation(line: 4751, column: 38, scope: !9909)
!9909 = distinct !DILexicalBlock(scope: !9907, file: !3, line: 4751, column: 12)
!9910 = !DILocation(line: 4751, column: 13, scope: !9909)
!9911 = !DILocation(line: 4751, column: 12, scope: !9907)
!9912 = !DILocation(line: 4753, column: 35, scope: !9913)
!9913 = distinct !DILexicalBlock(scope: !9909, file: !3, line: 4752, column: 3)
!9914 = !DILocation(line: 4753, column: 45, scope: !9913)
!9915 = !DILocation(line: 4753, column: 18, scope: !9913)
!9916 = !DILocation(line: 4753, column: 16, scope: !9913)
!9917 = !DILocation(line: 4754, column: 32, scope: !9913)
!9918 = !DILocation(line: 4754, column: 5, scope: !9913)
!9919 = !DILocation(line: 4755, column: 3, scope: !9913)
!9920 = !DILocation(line: 4756, column: 6, scope: !9907)
!9921 = !DILocation(line: 4759, column: 8, scope: !9922)
!9922 = distinct !DILexicalBlock(scope: !9902, file: !3, line: 4758, column: 6)
!9923 = !DILocation(line: 4761, column: 8, scope: !9922)
!9924 = !DILocation(line: 4742, column: 7, scope: !9895)
!9925 = distinct !{!9925, !9896, !9926}
!9926 = !DILocation(line: 4763, column: 2, scope: !9891)
!9927 = !DILocation(line: 4765, column: 14, scope: !9886)
!9928 = !DILocation(line: 4765, column: 12, scope: !9886)
!9929 = !DILocation(line: 4766, column: 5, scope: !9886)
!9930 = !DILocation(line: 4767, column: 10, scope: !9860)
!9931 = !DILocation(line: 4767, column: 18, scope: !9860)
!9932 = !DILocation(line: 4767, column: 15, scope: !9860)
!9933 = distinct !{!9933, !9884, !9934}
!9934 = !DILocation(line: 4767, column: 22, scope: !9860)
!9935 = !DILocation(line: 4769, column: 3, scope: !9860)
!9936 = !DILocation(line: 4772, column: 15, scope: !9937)
!9937 = distinct !DILexicalBlock(scope: !9860, file: !3, line: 4772, column: 3)
!9938 = !DILocation(line: 4772, column: 13, scope: !9937)
!9939 = !DILocation(line: 4772, column: 8, scope: !9937)
!9940 = !DILocation(line: 4772, column: 27, scope: !9941)
!9941 = distinct !DILexicalBlock(scope: !9937, file: !3, line: 4772, column: 3)
!9942 = !DILocation(line: 4772, column: 3, scope: !9937)
!9943 = !DILocation(line: 4773, column: 16, scope: !9941)
!9944 = !DILocation(line: 4773, column: 5, scope: !9941)
!9945 = !DILocation(line: 4772, column: 40, scope: !9941)
!9946 = !DILocation(line: 4772, column: 38, scope: !9941)
!9947 = !DILocation(line: 4772, column: 3, scope: !9941)
!9948 = distinct !{!9948, !9942, !9949}
!9949 = !DILocation(line: 4773, column: 30, scope: !9937)
!9950 = !DILocation(line: 4774, column: 3, scope: !9860)
!9951 = !DILocation(line: 4777, column: 10, scope: !9860)
!9952 = !DILocation(line: 4777, column: 8, scope: !9860)
!9953 = !DILocation(line: 4778, column: 10, scope: !9860)
!9954 = !DILocation(line: 4778, column: 8, scope: !9860)
!9955 = !DILocation(line: 4780, column: 3, scope: !9860)
!9956 = !DILocation(line: 4781, column: 10, scope: !9860)
!9957 = !DILocation(line: 4781, column: 8, scope: !9860)
!9958 = !DILocation(line: 4783, column: 3, scope: !9860)
!9959 = !DILocation(line: 4784, column: 26, scope: !9860)
!9960 = !DILocation(line: 4784, column: 32, scope: !9860)
!9961 = !DILocation(line: 4784, column: 3, scope: !9860)
!9962 = !DILocation(line: 4785, column: 1, scope: !9860)
!9963 = distinct !DISubprogram(name: "bitmap_initialize_stat", scope: !926, file: !926, line: 165, type: !9964, scopeLine: 166, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!9964 = !DISubroutineType(types: !9965)
!9965 = !{null, !2101, !946}
!9966 = !DILocalVariable(name: "head", arg: 1, scope: !9963, file: !926, line: 165, type: !2101)
!9967 = !DILocation(line: 165, column: 32, scope: !9963)
!9968 = !DILocalVariable(name: "obstack", arg: 2, scope: !9963, file: !926, line: 165, type: !946)
!9969 = !DILocation(line: 165, column: 54, scope: !9963)
!9970 = !DILocation(line: 167, column: 17, scope: !9963)
!9971 = !DILocation(line: 167, column: 23, scope: !9963)
!9972 = !DILocation(line: 167, column: 31, scope: !9963)
!9973 = !DILocation(line: 167, column: 3, scope: !9963)
!9974 = !DILocation(line: 167, column: 9, scope: !9963)
!9975 = !DILocation(line: 167, column: 15, scope: !9963)
!9976 = !DILocation(line: 168, column: 19, scope: !9963)
!9977 = !DILocation(line: 168, column: 3, scope: !9963)
!9978 = !DILocation(line: 168, column: 9, scope: !9963)
!9979 = !DILocation(line: 168, column: 17, scope: !9963)
!9980 = !DILocation(line: 172, column: 1, scope: !9963)
!9981 = distinct !DISubprogram(name: "add_jump_dependencies", scope: !3, file: !3, line: 5101, type: !2407, scopeLine: 5102, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!9982 = !DILocalVariable(name: "insn", arg: 1, scope: !9981, file: !3, line: 5101, type: !867)
!9983 = !DILocation(line: 5101, column: 28, scope: !9981)
!9984 = !DILocalVariable(name: "jump", arg: 2, scope: !9981, file: !3, line: 5101, type: !867)
!9985 = !DILocation(line: 5101, column: 38, scope: !9981)
!9986 = !DILocation(line: 5103, column: 3, scope: !9981)
!9987 = !DILocation(line: 5105, column: 14, scope: !9988)
!9988 = distinct !DILexicalBlock(scope: !9981, file: !3, line: 5104, column: 5)
!9989 = !DILocation(line: 5105, column: 12, scope: !9988)
!9990 = !DILocation(line: 5106, column: 11, scope: !9991)
!9991 = distinct !DILexicalBlock(scope: !9988, file: !3, line: 5106, column: 11)
!9992 = !DILocation(line: 5106, column: 19, scope: !9991)
!9993 = !DILocation(line: 5106, column: 16, scope: !9991)
!9994 = !DILocation(line: 5106, column: 11, scope: !9988)
!9995 = !DILocation(line: 5107, column: 2, scope: !9991)
!9996 = !DILocation(line: 5109, column: 26, scope: !9997)
!9997 = distinct !DILexicalBlock(scope: !9988, file: !3, line: 5109, column: 11)
!9998 = !DILocation(line: 5109, column: 11, scope: !9997)
!9999 = !DILocation(line: 5109, column: 32, scope: !9997)
!10000 = !DILocation(line: 5109, column: 11, scope: !9988)
!10001 = !DILocalVariable(name: "_new_dep", scope: !10002, file: !3, line: 5111, type: !2722)
!10002 = distinct !DILexicalBlock(scope: !9997, file: !3, line: 5110, column: 2)
!10003 = !DILocation(line: 5111, column: 12, scope: !10002)
!10004 = !DILocalVariable(name: "new_dep", scope: !10002, file: !3, line: 5111, type: !2721)
!10005 = !DILocation(line: 5111, column: 23, scope: !10002)
!10006 = !DILocation(line: 5113, column: 14, scope: !10002)
!10007 = !DILocation(line: 5113, column: 23, scope: !10002)
!10008 = !DILocation(line: 5113, column: 29, scope: !10002)
!10009 = !DILocation(line: 5113, column: 4, scope: !10002)
!10010 = !DILocation(line: 5114, column: 16, scope: !10002)
!10011 = !DILocation(line: 5114, column: 4, scope: !10002)
!10012 = !DILocation(line: 5115, column: 2, scope: !10002)
!10013 = !DILocation(line: 5116, column: 5, scope: !9988)
!10014 = distinct !{!10014, !9986, !10015}
!10015 = !DILocation(line: 5117, column: 11, scope: !9981)
!10016 = !DILocation(line: 5119, column: 3, scope: !9981)
!10017 = !DILocation(line: 5120, column: 1, scope: !9981)
!10018 = distinct !DISubprogram(name: "ok_for_early_queue_removal", scope: !3, file: !3, line: 2084, type: !2393, scopeLine: 2085, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!10019 = !DILocalVariable(name: "insn", arg: 1, scope: !10018, file: !3, line: 2084, type: !867)
!10020 = !DILocation(line: 2084, column: 33, scope: !10018)
!10021 = !DILocalVariable(name: "n_cycles", scope: !10018, file: !3, line: 2086, type: !865)
!10022 = !DILocation(line: 2086, column: 7, scope: !10018)
!10023 = !DILocalVariable(name: "prev_insn", scope: !10018, file: !3, line: 2087, type: !867)
!10024 = !DILocation(line: 2087, column: 7, scope: !10018)
!10025 = !DILocation(line: 2087, column: 19, scope: !10018)
!10026 = !DILocation(line: 2089, column: 21, scope: !10027)
!10027 = distinct !DILexicalBlock(scope: !10018, file: !3, line: 2089, column: 7)
!10028 = !DILocation(line: 2089, column: 7, scope: !10027)
!10029 = !DILocation(line: 2089, column: 7, scope: !10018)
!10030 = !DILocation(line: 2091, column: 23, scope: !10031)
!10031 = distinct !DILexicalBlock(scope: !10032, file: !3, line: 2091, column: 7)
!10032 = distinct !DILexicalBlock(scope: !10027, file: !3, line: 2090, column: 5)
!10033 = !DILocation(line: 2091, column: 21, scope: !10031)
!10034 = !DILocation(line: 2091, column: 12, scope: !10031)
!10035 = !DILocation(line: 2091, column: 53, scope: !10036)
!10036 = distinct !DILexicalBlock(scope: !10031, file: !3, line: 2091, column: 7)
!10037 = !DILocation(line: 2091, column: 7, scope: !10031)
!10038 = !DILocation(line: 2093, column: 4, scope: !10039)
!10039 = distinct !DILexicalBlock(scope: !10036, file: !3, line: 2092, column: 2)
!10040 = !DILocation(line: 2093, column: 12, scope: !10041)
!10041 = distinct !DILexicalBlock(scope: !10042, file: !3, line: 2093, column: 4)
!10042 = distinct !DILexicalBlock(scope: !10039, file: !3, line: 2093, column: 4)
!10043 = !DILocation(line: 2093, column: 4, scope: !10042)
!10044 = !DILocalVariable(name: "cost", scope: !10045, file: !3, line: 2095, type: !865)
!10045 = distinct !DILexicalBlock(scope: !10041, file: !3, line: 2094, column: 6)
!10046 = !DILocation(line: 2095, column: 12, scope: !10045)
!10047 = !DILocation(line: 2097, column: 12, scope: !10048)
!10048 = distinct !DILexicalBlock(scope: !10045, file: !3, line: 2097, column: 12)
!10049 = !DILocation(line: 2097, column: 25, scope: !10048)
!10050 = !DILocation(line: 2097, column: 45, scope: !10048)
!10051 = !DILocation(line: 2097, column: 22, scope: !10048)
!10052 = !DILocation(line: 2097, column: 12, scope: !10045)
!10053 = !DILocation(line: 2099, column: 15, scope: !10054)
!10054 = distinct !DILexicalBlock(scope: !10048, file: !3, line: 2098, column: 3)
!10055 = !DILocation(line: 2100, column: 5, scope: !10054)
!10056 = !DILocation(line: 2103, column: 13, scope: !10057)
!10057 = distinct !DILexicalBlock(scope: !10045, file: !3, line: 2103, column: 12)
!10058 = !DILocation(line: 2103, column: 12, scope: !10045)
!10059 = !DILocalVariable(name: "dep", scope: !10060, file: !3, line: 2105, type: !2720)
!10060 = distinct !DILexicalBlock(scope: !10057, file: !3, line: 2104, column: 3)
!10061 = !DILocation(line: 2105, column: 11, scope: !10060)
!10062 = !DILocation(line: 2107, column: 32, scope: !10060)
!10063 = !DILocation(line: 2107, column: 43, scope: !10060)
!10064 = !DILocation(line: 2107, column: 11, scope: !10060)
!10065 = !DILocation(line: 2107, column: 9, scope: !10060)
!10066 = !DILocation(line: 2109, column: 9, scope: !10067)
!10067 = distinct !DILexicalBlock(scope: !10060, file: !3, line: 2109, column: 9)
!10068 = !DILocation(line: 2109, column: 13, scope: !10067)
!10069 = !DILocation(line: 2109, column: 9, scope: !10060)
!10070 = !DILocation(line: 2111, column: 26, scope: !10071)
!10071 = distinct !DILexicalBlock(scope: !10067, file: !3, line: 2110, column: 7)
!10072 = !DILocation(line: 2111, column: 16, scope: !10071)
!10073 = !DILocation(line: 2111, column: 14, scope: !10071)
!10074 = !DILocation(line: 2113, column: 27, scope: !10075)
!10075 = distinct !DILexicalBlock(scope: !10071, file: !3, line: 2113, column: 13)
!10076 = !DILocation(line: 2113, column: 49, scope: !10075)
!10077 = !DILocation(line: 2113, column: 54, scope: !10075)
!10078 = !DILocation(line: 2114, column: 5, scope: !10075)
!10079 = !DILocation(line: 2114, column: 36, scope: !10075)
!10080 = !DILocation(line: 2114, column: 34, scope: !10075)
!10081 = !DILocation(line: 2113, column: 13, scope: !10075)
!10082 = !DILocation(line: 2113, column: 13, scope: !10071)
!10083 = !DILocation(line: 2115, column: 4, scope: !10075)
!10084 = !DILocation(line: 2116, column: 7, scope: !10071)
!10085 = !DILocation(line: 2117, column: 3, scope: !10060)
!10086 = !DILocation(line: 2119, column: 12, scope: !10087)
!10087 = distinct !DILexicalBlock(scope: !10045, file: !3, line: 2119, column: 12)
!10088 = !DILocation(line: 2119, column: 33, scope: !10087)
!10089 = !DILocation(line: 2119, column: 12, scope: !10045)
!10090 = !DILocation(line: 2120, column: 3, scope: !10087)
!10091 = !DILocation(line: 2121, column: 6, scope: !10045)
!10092 = !DILocation(line: 2093, column: 35, scope: !10041)
!10093 = !DILocation(line: 2093, column: 33, scope: !10041)
!10094 = !DILocation(line: 2093, column: 4, scope: !10041)
!10095 = distinct !{!10095, !10043, !10096}
!10096 = !DILocation(line: 2121, column: 6, scope: !10042)
!10097 = !DILocation(line: 2123, column: 9, scope: !10098)
!10098 = distinct !DILexicalBlock(scope: !10039, file: !3, line: 2123, column: 8)
!10099 = !DILocation(line: 2123, column: 8, scope: !10039)
!10100 = !DILocation(line: 2124, column: 6, scope: !10098)
!10101 = !DILocation(line: 2125, column: 16, scope: !10039)
!10102 = !DILocation(line: 2125, column: 14, scope: !10039)
!10103 = !DILocation(line: 2126, column: 2, scope: !10039)
!10104 = !DILocation(line: 2091, column: 71, scope: !10036)
!10105 = !DILocation(line: 2091, column: 7, scope: !10036)
!10106 = distinct !{!10106, !10037, !10107}
!10107 = !DILocation(line: 2126, column: 2, scope: !10031)
!10108 = !DILocation(line: 2127, column: 5, scope: !10032)
!10109 = !DILocation(line: 2129, column: 3, scope: !10018)
!10110 = !DILocation(line: 2130, column: 1, scope: !10018)
!10111 = distinct !DISubprogram(name: "ready_remove_insn", scope: !3, file: !3, line: 1486, type: !2350, scopeLine: 1487, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!10112 = !DILocalVariable(name: "insn", arg: 1, scope: !10111, file: !3, line: 1486, type: !867)
!10113 = !DILocation(line: 1486, column: 24, scope: !10111)
!10114 = !DILocalVariable(name: "i", scope: !10111, file: !3, line: 1488, type: !865)
!10115 = !DILocation(line: 1488, column: 7, scope: !10111)
!10116 = !DILocation(line: 1490, column: 10, scope: !10117)
!10117 = distinct !DILexicalBlock(scope: !10111, file: !3, line: 1490, column: 3)
!10118 = !DILocation(line: 1490, column: 8, scope: !10117)
!10119 = !DILocation(line: 1490, column: 15, scope: !10120)
!10120 = distinct !DILexicalBlock(scope: !10117, file: !3, line: 1490, column: 3)
!10121 = !DILocation(line: 1490, column: 19, scope: !10120)
!10122 = !DILocation(line: 1490, column: 27, scope: !10120)
!10123 = !DILocation(line: 1490, column: 17, scope: !10120)
!10124 = !DILocation(line: 1490, column: 3, scope: !10117)
!10125 = !DILocation(line: 1491, column: 24, scope: !10126)
!10126 = distinct !DILexicalBlock(scope: !10120, file: !3, line: 1491, column: 9)
!10127 = !DILocation(line: 1491, column: 32, scope: !10126)
!10128 = !DILocation(line: 1491, column: 9, scope: !10126)
!10129 = !DILocation(line: 1491, column: 38, scope: !10126)
!10130 = !DILocation(line: 1491, column: 35, scope: !10126)
!10131 = !DILocation(line: 1491, column: 9, scope: !10120)
!10132 = !DILocation(line: 1493, column: 23, scope: !10133)
!10133 = distinct !DILexicalBlock(scope: !10126, file: !3, line: 1492, column: 7)
!10134 = !DILocation(line: 1493, column: 31, scope: !10133)
!10135 = !DILocation(line: 1493, column: 9, scope: !10133)
!10136 = !DILocation(line: 1494, column: 9, scope: !10133)
!10137 = !DILocation(line: 1490, column: 37, scope: !10120)
!10138 = !DILocation(line: 1490, column: 3, scope: !10120)
!10139 = distinct !{!10139, !10124, !10140}
!10140 = !DILocation(line: 1495, column: 7, scope: !10117)
!10141 = !DILocation(line: 1496, column: 3, scope: !10111)
!10142 = !DILocation(line: 1497, column: 1, scope: !10111)
!10143 = distinct !DISubprogram(name: "contributes_to_priority_p", scope: !3, file: !3, line: 952, type: !10144, scopeLine: 953, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!10144 = !DISubroutineType(types: !10145)
!10145 = !{!1100, !2720}
!10146 = !DILocalVariable(name: "dep", arg: 1, scope: !10143, file: !3, line: 952, type: !2720)
!10147 = !DILocation(line: 952, column: 34, scope: !10143)
!10148 = !DILocation(line: 954, column: 7, scope: !10149)
!10149 = distinct !DILexicalBlock(scope: !10143, file: !3, line: 954, column: 7)
!10150 = !DILocation(line: 955, column: 7, scope: !10149)
!10151 = !DILocation(line: 955, column: 10, scope: !10149)
!10152 = !DILocation(line: 954, column: 7, scope: !10143)
!10153 = !DILocation(line: 956, column: 5, scope: !10149)
!10154 = !DILocation(line: 959, column: 8, scope: !10155)
!10155 = distinct !DILexicalBlock(scope: !10143, file: !3, line: 959, column: 7)
!10156 = !DILocation(line: 959, column: 28, scope: !10155)
!10157 = !DILocation(line: 959, column: 53, scope: !10155)
!10158 = !DILocation(line: 960, column: 11, scope: !10155)
!10159 = !DILocation(line: 959, column: 7, scope: !10143)
!10160 = !DILocation(line: 961, column: 5, scope: !10155)
!10161 = !DILocation(line: 969, column: 7, scope: !10162)
!10162 = distinct !DILexicalBlock(scope: !10143, file: !3, line: 969, column: 7)
!10163 = !DILocation(line: 969, column: 24, scope: !10162)
!10164 = !DILocation(line: 970, column: 7, scope: !10162)
!10165 = !DILocation(line: 970, column: 12, scope: !10162)
!10166 = !DILocation(line: 970, column: 23, scope: !10162)
!10167 = !DILocation(line: 970, column: 29, scope: !10162)
!10168 = !DILocation(line: 971, column: 7, scope: !10162)
!10169 = !DILocation(line: 971, column: 11, scope: !10162)
!10170 = !DILocation(line: 971, column: 28, scope: !10162)
!10171 = !DILocation(line: 969, column: 7, scope: !10143)
!10172 = !DILocation(line: 972, column: 5, scope: !10162)
!10173 = !DILocation(line: 974, column: 3, scope: !10143)
!10174 = !DILocation(line: 975, column: 1, scope: !10143)
!10175 = distinct !DISubprogram(name: "queue_remove", scope: !3, file: !3, line: 1365, type: !2350, scopeLine: 1366, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!10176 = !DILocalVariable(name: "insn", arg: 1, scope: !10175, file: !3, line: 1365, type: !867)
!10177 = !DILocation(line: 1365, column: 19, scope: !10175)
!10178 = !DILocation(line: 1367, column: 3, scope: !10175)
!10179 = !DILocation(line: 1368, column: 31, scope: !10175)
!10180 = !DILocation(line: 1368, column: 38, scope: !10175)
!10181 = !DILocation(line: 1368, column: 49, scope: !10175)
!10182 = !DILocation(line: 1368, column: 3, scope: !10175)
!10183 = !DILocation(line: 1369, column: 9, scope: !10175)
!10184 = !DILocation(line: 1370, column: 3, scope: !10175)
!10185 = !DILocation(line: 1370, column: 22, scope: !10175)
!10186 = !DILocation(line: 1371, column: 1, scope: !10175)
!10187 = distinct !DISubprogram(name: "begin_speculative_block", scope: !3, file: !3, line: 4066, type: !2350, scopeLine: 4067, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!10188 = !DILocalVariable(name: "insn", arg: 1, scope: !10187, file: !3, line: 4066, type: !867)
!10189 = !DILocation(line: 4066, column: 30, scope: !10187)
!10190 = !DILocation(line: 4068, column: 7, scope: !10191)
!10191 = distinct !DILexicalBlock(scope: !10187, file: !3, line: 4068, column: 7)
!10192 = !DILocation(line: 4068, column: 24, scope: !10191)
!10193 = !DILocation(line: 4068, column: 7, scope: !10187)
!10194 = !DILocation(line: 4069, column: 18, scope: !10191)
!10195 = !DILocation(line: 4069, column: 5, scope: !10191)
!10196 = !DILocation(line: 4070, column: 7, scope: !10197)
!10197 = distinct !DILexicalBlock(scope: !10187, file: !3, line: 4070, column: 7)
!10198 = !DILocation(line: 4070, column: 24, scope: !10197)
!10199 = !DILocation(line: 4070, column: 7, scope: !10187)
!10200 = !DILocation(line: 4071, column: 21, scope: !10197)
!10201 = !DILocation(line: 4071, column: 5, scope: !10197)
!10202 = !DILocation(line: 4073, column: 28, scope: !10187)
!10203 = !DILocation(line: 4073, column: 3, scope: !10187)
!10204 = !DILocation(line: 4075, column: 3, scope: !10187)
!10205 = !DILocation(line: 4075, column: 20, scope: !10187)
!10206 = !DILocation(line: 4076, column: 1, scope: !10187)
!10207 = distinct !DISubprogram(name: "add_to_speculative_block", scope: !3, file: !3, line: 4082, type: !2350, scopeLine: 4083, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!10208 = !DILocalVariable(name: "insn", arg: 1, scope: !10207, file: !3, line: 4082, type: !867)
!10209 = !DILocation(line: 4082, column: 31, scope: !10207)
!10210 = !DILocalVariable(name: "ts", scope: !10207, file: !3, line: 4084, type: !2099)
!10211 = !DILocation(line: 4084, column: 8, scope: !10207)
!10212 = !DILocalVariable(name: "sd_it", scope: !10207, file: !3, line: 4085, type: !2467)
!10213 = !DILocation(line: 4085, column: 19, scope: !10207)
!10214 = !DILocalVariable(name: "dep", scope: !10207, file: !3, line: 4086, type: !2720)
!10215 = !DILocation(line: 4086, column: 9, scope: !10207)
!10216 = !DILocalVariable(name: "twins", scope: !10207, file: !3, line: 4087, type: !867)
!10217 = !DILocation(line: 4087, column: 7, scope: !10207)
!10218 = !DILocalVariable(name: "priorities_roots", scope: !10207, file: !3, line: 4088, type: !10219)
!10219 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx_vec_t", file: !398, line: 42, baseType: !2120)
!10220 = !DILocation(line: 4088, column: 13, scope: !10207)
!10221 = !DILocation(line: 4090, column: 8, scope: !10207)
!10222 = !DILocation(line: 4090, column: 6, scope: !10207)
!10223 = !DILocation(line: 4091, column: 3, scope: !10207)
!10224 = !DILocation(line: 4093, column: 7, scope: !10225)
!10225 = distinct !DILexicalBlock(scope: !10207, file: !3, line: 4093, column: 7)
!10226 = !DILocation(line: 4093, column: 10, scope: !10225)
!10227 = !DILocation(line: 4093, column: 7, scope: !10207)
!10228 = !DILocation(line: 4094, column: 18, scope: !10225)
!10229 = !DILocation(line: 4094, column: 5, scope: !10225)
!10230 = !DILocation(line: 4095, column: 7, scope: !10231)
!10231 = distinct !DILexicalBlock(scope: !10207, file: !3, line: 4095, column: 7)
!10232 = !DILocation(line: 4095, column: 10, scope: !10231)
!10233 = !DILocation(line: 4095, column: 7, scope: !10207)
!10234 = !DILocation(line: 4096, column: 21, scope: !10231)
!10235 = !DILocation(line: 4096, column: 5, scope: !10231)
!10236 = !DILocation(line: 4098, column: 3, scope: !10207)
!10237 = !DILocation(line: 4098, column: 20, scope: !10207)
!10238 = !DILocation(line: 4099, column: 3, scope: !10207)
!10239 = !DILocation(line: 4101, column: 23, scope: !10207)
!10240 = !DILocation(line: 4101, column: 3, scope: !10207)
!10241 = !DILocation(line: 4101, column: 20, scope: !10207)
!10242 = !DILocation(line: 4104, column: 35, scope: !10243)
!10243 = distinct !DILexicalBlock(scope: !10207, file: !3, line: 4104, column: 3)
!10244 = !DILocation(line: 4104, column: 16, scope: !10243)
!10245 = !DILocation(line: 4104, column: 8, scope: !10243)
!10246 = !DILocation(line: 4105, column: 8, scope: !10247)
!10247 = distinct !DILexicalBlock(scope: !10243, file: !3, line: 4104, column: 3)
!10248 = !DILocation(line: 4104, column: 3, scope: !10243)
!10249 = !DILocalVariable(name: "check", scope: !10250, file: !3, line: 4107, type: !867)
!10250 = distinct !DILexicalBlock(scope: !10247, file: !3, line: 4106, column: 5)
!10251 = !DILocation(line: 4107, column: 11, scope: !10250)
!10252 = !DILocation(line: 4107, column: 19, scope: !10250)
!10253 = !DILocation(line: 4109, column: 11, scope: !10254)
!10254 = distinct !DILexicalBlock(scope: !10250, file: !3, line: 4109, column: 11)
!10255 = !DILocation(line: 4109, column: 11, scope: !10250)
!10256 = !DILocation(line: 4111, column: 29, scope: !10257)
!10257 = distinct !DILexicalBlock(scope: !10254, file: !3, line: 4110, column: 2)
!10258 = !DILocation(line: 4111, column: 4, scope: !10257)
!10259 = !DILocation(line: 4114, column: 31, scope: !10257)
!10260 = !DILocation(line: 4114, column: 12, scope: !10257)
!10261 = !DILocation(line: 4115, column: 2, scope: !10257)
!10262 = !DILocation(line: 4118, column: 2, scope: !10254)
!10263 = !DILocation(line: 4104, column: 3, scope: !10247)
!10264 = distinct !{!10264, !10248, !10265}
!10265 = !DILocation(line: 4119, column: 5, scope: !10243)
!10266 = !DILocation(line: 4121, column: 20, scope: !10207)
!10267 = !DILocation(line: 4122, column: 21, scope: !10207)
!10268 = !DILocation(line: 4122, column: 3, scope: !10207)
!10269 = !DILocation(line: 4124, column: 3, scope: !10207)
!10270 = !DILocalVariable(name: "check", scope: !10271, file: !3, line: 4126, type: !867)
!10271 = distinct !DILexicalBlock(scope: !10207, file: !3, line: 4125, column: 5)
!10272 = !DILocation(line: 4126, column: 11, scope: !10271)
!10273 = !DILocalVariable(name: "twin", scope: !10271, file: !3, line: 4126, type: !867)
!10274 = !DILocation(line: 4126, column: 18, scope: !10271)
!10275 = !DILocalVariable(name: "rec", scope: !10271, file: !3, line: 4127, type: !1406)
!10276 = !DILocation(line: 4127, column: 19, scope: !10271)
!10277 = !DILocation(line: 4130, column: 34, scope: !10271)
!10278 = !DILocation(line: 4130, column: 15, scope: !10271)
!10279 = !DILocation(line: 4131, column: 12, scope: !10280)
!10280 = distinct !DILexicalBlock(scope: !10271, file: !3, line: 4131, column: 11)
!10281 = !DILocation(line: 4131, column: 11, scope: !10271)
!10282 = !DILocation(line: 4133, column: 2, scope: !10280)
!10283 = !DILocation(line: 4135, column: 7, scope: !10271)
!10284 = !DILocation(line: 4139, column: 15, scope: !10271)
!10285 = !DILocation(line: 4139, column: 13, scope: !10271)
!10286 = !DILocation(line: 4141, column: 7, scope: !10271)
!10287 = !DILocation(line: 4144, column: 13, scope: !10271)
!10288 = !DILocation(line: 4144, column: 11, scope: !10271)
!10289 = !DILocation(line: 4146, column: 43, scope: !10271)
!10290 = !DILocation(line: 4146, column: 32, scope: !10271)
!10291 = !DILocation(line: 4146, column: 60, scope: !10271)
!10292 = !DILocation(line: 4146, column: 14, scope: !10271)
!10293 = !DILocation(line: 4146, column: 12, scope: !10271)
!10294 = !DILocation(line: 4147, column: 24, scope: !10271)
!10295 = !DILocation(line: 4147, column: 7, scope: !10271)
!10296 = !DILocation(line: 4149, column: 26, scope: !10271)
!10297 = !DILocation(line: 4149, column: 32, scope: !10271)
!10298 = !DILocation(line: 4149, column: 7, scope: !10271)
!10299 = !DILocation(line: 4151, column: 11, scope: !10300)
!10300 = distinct !DILexicalBlock(scope: !10271, file: !3, line: 4151, column: 11)
!10301 = !DILocation(line: 4151, column: 25, scope: !10300)
!10302 = !DILocation(line: 4151, column: 28, scope: !10300)
!10303 = !DILocation(line: 4151, column: 39, scope: !10300)
!10304 = !DILocation(line: 4151, column: 11, scope: !10271)
!10305 = !DILocation(line: 4154, column: 18, scope: !10300)
!10306 = !DILocation(line: 4154, column: 29, scope: !10300)
!10307 = !DILocation(line: 4155, column: 18, scope: !10300)
!10308 = !DILocation(line: 4155, column: 35, scope: !10300)
!10309 = !DILocation(line: 4155, column: 40, scope: !10300)
!10310 = !DILocation(line: 4154, column: 9, scope: !10300)
!10311 = !DILocation(line: 4157, column: 32, scope: !10271)
!10312 = !DILocation(line: 4157, column: 38, scope: !10271)
!10313 = !DILocation(line: 4157, column: 15, scope: !10271)
!10314 = !DILocation(line: 4157, column: 13, scope: !10271)
!10315 = !DILocation(line: 4161, column: 7, scope: !10316)
!10316 = distinct !DILexicalBlock(scope: !10271, file: !3, line: 4161, column: 7)
!10317 = !DILocation(line: 4161, column: 7, scope: !10318)
!10318 = distinct !DILexicalBlock(scope: !10316, file: !3, line: 4161, column: 7)
!10319 = !DILocalVariable(name: "pro", scope: !10320, file: !3, line: 4163, type: !867)
!10320 = distinct !DILexicalBlock(scope: !10318, file: !3, line: 4162, column: 2)
!10321 = !DILocation(line: 4163, column: 8, scope: !10320)
!10322 = !DILocation(line: 4163, column: 14, scope: !10320)
!10323 = !DILocation(line: 4165, column: 4, scope: !10320)
!10324 = !DILocation(line: 4170, column: 8, scope: !10325)
!10325 = distinct !DILexicalBlock(scope: !10320, file: !3, line: 4170, column: 8)
!10326 = !DILocation(line: 4170, column: 32, scope: !10325)
!10327 = !DILocation(line: 4170, column: 29, scope: !10325)
!10328 = !DILocation(line: 4170, column: 8, scope: !10320)
!10329 = !DILocalVariable(name: "_new_dep", scope: !10330, file: !3, line: 4172, type: !2722)
!10330 = distinct !DILexicalBlock(scope: !10325, file: !3, line: 4171, column: 6)
!10331 = !DILocation(line: 4172, column: 16, scope: !10330)
!10332 = !DILocalVariable(name: "new_dep", scope: !10330, file: !3, line: 4172, type: !2721)
!10333 = !DILocation(line: 4172, column: 27, scope: !10330)
!10334 = !DILocation(line: 4174, column: 18, scope: !10330)
!10335 = !DILocation(line: 4174, column: 27, scope: !10330)
!10336 = !DILocation(line: 4174, column: 32, scope: !10330)
!10337 = !DILocation(line: 4174, column: 8, scope: !10330)
!10338 = !DILocation(line: 4175, column: 20, scope: !10330)
!10339 = !DILocation(line: 4175, column: 8, scope: !10330)
!10340 = !DILocation(line: 4176, column: 6, scope: !10330)
!10341 = !DILocation(line: 4177, column: 2, scope: !10320)
!10342 = distinct !{!10342, !10315, !10343}
!10343 = !DILocation(line: 4177, column: 2, scope: !10316)
!10344 = !DILocation(line: 4179, column: 42, scope: !10271)
!10345 = !DILocation(line: 4179, column: 48, scope: !10271)
!10346 = !DILocation(line: 4179, column: 54, scope: !10271)
!10347 = !DILocation(line: 4179, column: 7, scope: !10271)
!10348 = !DILocation(line: 4182, column: 39, scope: !10349)
!10349 = distinct !DILexicalBlock(scope: !10271, file: !3, line: 4182, column: 7)
!10350 = !DILocation(line: 4182, column: 20, scope: !10349)
!10351 = !DILocation(line: 4182, column: 12, scope: !10349)
!10352 = !DILocation(line: 4183, column: 5, scope: !10353)
!10353 = distinct !DILexicalBlock(scope: !10349, file: !3, line: 4182, column: 7)
!10354 = !DILocation(line: 4182, column: 7, scope: !10349)
!10355 = !DILocalVariable(name: "pro", scope: !10356, file: !3, line: 4185, type: !867)
!10356 = distinct !DILexicalBlock(scope: !10353, file: !3, line: 4184, column: 2)
!10357 = !DILocation(line: 4185, column: 8, scope: !10356)
!10358 = !DILocation(line: 4185, column: 14, scope: !10356)
!10359 = !DILocation(line: 4187, column: 8, scope: !10360)
!10360 = distinct !DILexicalBlock(scope: !10356, file: !3, line: 4187, column: 8)
!10361 = !DILocation(line: 4187, column: 32, scope: !10360)
!10362 = !DILocation(line: 4187, column: 29, scope: !10360)
!10363 = !DILocation(line: 4187, column: 8, scope: !10356)
!10364 = !DILocation(line: 4188, column: 6, scope: !10360)
!10365 = !DILocation(line: 4190, column: 6, scope: !10360)
!10366 = !DILocation(line: 4182, column: 7, scope: !10353)
!10367 = distinct !{!10367, !10354, !10368}
!10368 = !DILocation(line: 4191, column: 2, scope: !10349)
!10369 = distinct !{!10369, !10269, !10370}
!10370 = !DILocation(line: 4192, column: 5, scope: !10207)
!10371 = !DILocation(line: 4196, column: 3, scope: !10207)
!10372 = !DILocation(line: 4196, column: 10, scope: !10207)
!10373 = !DILocalVariable(name: "twin", scope: !10374, file: !3, line: 4198, type: !867)
!10374 = distinct !DILexicalBlock(scope: !10207, file: !3, line: 4197, column: 5)
!10375 = !DILocation(line: 4198, column: 11, scope: !10374)
!10376 = !DILocation(line: 4200, column: 14, scope: !10374)
!10377 = !DILocation(line: 4200, column: 12, scope: !10374)
!10378 = !DILocalVariable(name: "_new_dep", scope: !10379, file: !3, line: 4203, type: !2722)
!10379 = distinct !DILexicalBlock(scope: !10374, file: !3, line: 4202, column: 7)
!10380 = !DILocation(line: 4203, column: 10, scope: !10379)
!10381 = !DILocalVariable(name: "new_dep", scope: !10379, file: !3, line: 4203, type: !2721)
!10382 = !DILocation(line: 4203, column: 21, scope: !10379)
!10383 = !DILocation(line: 4205, column: 12, scope: !10379)
!10384 = !DILocation(line: 4205, column: 21, scope: !10379)
!10385 = !DILocation(line: 4205, column: 27, scope: !10379)
!10386 = !DILocation(line: 4205, column: 2, scope: !10379)
!10387 = !DILocation(line: 4206, column: 14, scope: !10379)
!10388 = !DILocation(line: 4206, column: 2, scope: !10379)
!10389 = !DILocation(line: 4209, column: 14, scope: !10374)
!10390 = !DILocation(line: 4209, column: 12, scope: !10374)
!10391 = !DILocation(line: 4210, column: 28, scope: !10374)
!10392 = !DILocation(line: 4210, column: 7, scope: !10374)
!10393 = !DILocation(line: 4211, column: 15, scope: !10374)
!10394 = !DILocation(line: 4211, column: 13, scope: !10374)
!10395 = distinct !{!10395, !10371, !10396}
!10396 = !DILocation(line: 4212, column: 5, scope: !10207)
!10397 = !DILocation(line: 4214, column: 20, scope: !10207)
!10398 = !DILocation(line: 4214, column: 3, scope: !10207)
!10399 = !DILocation(line: 4215, column: 3, scope: !10207)
!10400 = !DILocation(line: 4216, column: 1, scope: !10207)
!10401 = distinct !DISubprogram(name: "create_check_block_twin", scope: !3, file: !3, line: 4447, type: !2447, scopeLine: 4448, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!10402 = !DILocalVariable(name: "insn", arg: 1, scope: !10401, file: !3, line: 4447, type: !867)
!10403 = !DILocation(line: 4447, column: 30, scope: !10401)
!10404 = !DILocalVariable(name: "mutate_p", arg: 2, scope: !10401, file: !3, line: 4447, type: !1100)
!10405 = !DILocation(line: 4447, column: 41, scope: !10401)
!10406 = !DILocalVariable(name: "rec", scope: !10401, file: !3, line: 4449, type: !1406)
!10407 = !DILocation(line: 4449, column: 15, scope: !10401)
!10408 = !DILocalVariable(name: "label", scope: !10401, file: !3, line: 4450, type: !867)
!10409 = !DILocation(line: 4450, column: 7, scope: !10401)
!10410 = !DILocalVariable(name: "check", scope: !10401, file: !3, line: 4450, type: !867)
!10411 = !DILocation(line: 4450, column: 14, scope: !10401)
!10412 = !DILocalVariable(name: "twin", scope: !10401, file: !3, line: 4450, type: !867)
!10413 = !DILocation(line: 4450, column: 21, scope: !10401)
!10414 = !DILocalVariable(name: "fs", scope: !10401, file: !3, line: 4451, type: !2099)
!10415 = !DILocation(line: 4451, column: 8, scope: !10401)
!10416 = !DILocalVariable(name: "sd_it", scope: !10401, file: !3, line: 4452, type: !2467)
!10417 = !DILocation(line: 4452, column: 19, scope: !10401)
!10418 = !DILocalVariable(name: "dep", scope: !10401, file: !3, line: 4453, type: !2720)
!10419 = !DILocation(line: 4453, column: 9, scope: !10401)
!10420 = !DILocalVariable(name: "_new_dep", scope: !10401, file: !3, line: 4454, type: !2722)
!10421 = !DILocation(line: 4454, column: 11, scope: !10401)
!10422 = !DILocalVariable(name: "new_dep", scope: !10401, file: !3, line: 4454, type: !2721)
!10423 = !DILocation(line: 4454, column: 22, scope: !10401)
!10424 = !DILocalVariable(name: "todo_spec", scope: !10401, file: !3, line: 4455, type: !2099)
!10425 = !DILocation(line: 4455, column: 8, scope: !10401)
!10426 = !DILocation(line: 4457, column: 3, scope: !10401)
!10427 = !DILocation(line: 4459, column: 8, scope: !10428)
!10428 = distinct !DILexicalBlock(scope: !10401, file: !3, line: 4459, column: 7)
!10429 = !DILocation(line: 4459, column: 7, scope: !10401)
!10430 = !DILocation(line: 4460, column: 17, scope: !10428)
!10431 = !DILocation(line: 4460, column: 15, scope: !10428)
!10432 = !DILocation(line: 4460, column: 5, scope: !10428)
!10433 = !DILocation(line: 4463, column: 7, scope: !10434)
!10434 = distinct !DILexicalBlock(scope: !10428, file: !3, line: 4462, column: 5)
!10435 = !DILocation(line: 4466, column: 19, scope: !10434)
!10436 = !DILocation(line: 4466, column: 17, scope: !10434)
!10437 = !DILocation(line: 4469, column: 13, scope: !10401)
!10438 = !DILocation(line: 4472, column: 7, scope: !10439)
!10439 = distinct !DILexicalBlock(scope: !10401, file: !3, line: 4472, column: 7)
!10440 = !DILocation(line: 4472, column: 16, scope: !10439)
!10441 = !DILocation(line: 4472, column: 33, scope: !10439)
!10442 = !DILocation(line: 4472, column: 48, scope: !10439)
!10443 = !DILocation(line: 4472, column: 19, scope: !10439)
!10444 = !DILocation(line: 4472, column: 7, scope: !10401)
!10445 = !DILocation(line: 4474, column: 13, scope: !10446)
!10446 = distinct !DILexicalBlock(scope: !10439, file: !3, line: 4473, column: 5)
!10447 = !DILocation(line: 4474, column: 11, scope: !10446)
!10448 = !DILocation(line: 4475, column: 15, scope: !10446)
!10449 = !DILocation(line: 4475, column: 13, scope: !10446)
!10450 = !DILocation(line: 4476, column: 5, scope: !10446)
!10451 = !DILocation(line: 4479, column: 13, scope: !10452)
!10452 = distinct !DILexicalBlock(scope: !10439, file: !3, line: 4478, column: 5)
!10453 = !DILocation(line: 4479, column: 11, scope: !10452)
!10454 = !DILocation(line: 4480, column: 13, scope: !10452)
!10455 = !DILocation(line: 4484, column: 25, scope: !10401)
!10456 = !DILocation(line: 4484, column: 41, scope: !10401)
!10457 = !DILocation(line: 4484, column: 47, scope: !10401)
!10458 = !DILocation(line: 4484, column: 54, scope: !10401)
!10459 = !DILocation(line: 4484, column: 11, scope: !10401)
!10460 = !DILocation(line: 4484, column: 9, scope: !10401)
!10461 = !DILocation(line: 4486, column: 7, scope: !10462)
!10462 = distinct !DILexicalBlock(scope: !10401, file: !3, line: 4486, column: 7)
!10463 = !DILocation(line: 4486, column: 14, scope: !10462)
!10464 = !DILocation(line: 4486, column: 11, scope: !10462)
!10465 = !DILocation(line: 4486, column: 7, scope: !10401)
!10466 = !DILocation(line: 4492, column: 38, scope: !10467)
!10467 = distinct !DILexicalBlock(scope: !10462, file: !3, line: 4487, column: 5)
!10468 = !DILocation(line: 4492, column: 45, scope: !10467)
!10469 = !DILocation(line: 4492, column: 15, scope: !10467)
!10470 = !DILocation(line: 4492, column: 13, scope: !10467)
!10471 = !DILocation(line: 4493, column: 28, scope: !10467)
!10472 = !DILocation(line: 4493, column: 7, scope: !10467)
!10473 = !DILocation(line: 4493, column: 26, scope: !10467)
!10474 = !DILocation(line: 4494, column: 7, scope: !10467)
!10475 = !DILocation(line: 4494, column: 26, scope: !10467)
!10476 = !DILocation(line: 4495, column: 5, scope: !10467)
!10477 = !DILocation(line: 4497, column: 31, scope: !10462)
!10478 = !DILocation(line: 4497, column: 38, scope: !10462)
!10479 = !DILocation(line: 4497, column: 13, scope: !10462)
!10480 = !DILocation(line: 4497, column: 11, scope: !10462)
!10481 = !DILocation(line: 4500, column: 20, scope: !10401)
!10482 = !DILocation(line: 4500, column: 3, scope: !10401)
!10483 = !DILocation(line: 4503, column: 3, scope: !10401)
!10484 = !DILocation(line: 4504, column: 28, scope: !10401)
!10485 = !DILocation(line: 4504, column: 48, scope: !10401)
!10486 = !DILocation(line: 4504, column: 3, scope: !10401)
!10487 = !DILocation(line: 4506, column: 7, scope: !10488)
!10488 = distinct !DILexicalBlock(scope: !10401, file: !3, line: 4506, column: 7)
!10489 = !DILocation(line: 4506, column: 27, scope: !10488)
!10490 = !DILocation(line: 4506, column: 7, scope: !10401)
!10491 = !DILocation(line: 4507, column: 5, scope: !10488)
!10492 = !DILocation(line: 4507, column: 25, scope: !10488)
!10493 = !DILocation(line: 4507, column: 42, scope: !10488)
!10494 = !DILocation(line: 4509, column: 28, scope: !10401)
!10495 = !DILocation(line: 4509, column: 3, scope: !10401)
!10496 = !DILocation(line: 4509, column: 26, scope: !10401)
!10497 = !DILocation(line: 4511, column: 7, scope: !10498)
!10498 = distinct !DILexicalBlock(scope: !10401, file: !3, line: 4511, column: 7)
!10499 = !DILocation(line: 4511, column: 21, scope: !10498)
!10500 = !DILocation(line: 4511, column: 24, scope: !10498)
!10501 = !DILocation(line: 4511, column: 35, scope: !10498)
!10502 = !DILocation(line: 4511, column: 7, scope: !10401)
!10503 = !DILocation(line: 4512, column: 14, scope: !10498)
!10504 = !DILocation(line: 4512, column: 25, scope: !10498)
!10505 = !DILocation(line: 4513, column: 16, scope: !10498)
!10506 = !DILocation(line: 4513, column: 36, scope: !10498)
!10507 = !DILocation(line: 4513, column: 49, scope: !10498)
!10508 = !DILocation(line: 4513, column: 14, scope: !10498)
!10509 = !DILocation(line: 4512, column: 5, scope: !10498)
!10510 = !DILocation(line: 4515, column: 3, scope: !10401)
!10511 = !DILocation(line: 4519, column: 7, scope: !10512)
!10512 = distinct !DILexicalBlock(scope: !10401, file: !3, line: 4519, column: 7)
!10513 = !DILocation(line: 4519, column: 14, scope: !10512)
!10514 = !DILocation(line: 4519, column: 11, scope: !10512)
!10515 = !DILocation(line: 4519, column: 7, scope: !10401)
!10516 = !DILocalVariable(name: "sd_it", scope: !10517, file: !3, line: 4521, type: !2467)
!10517 = distinct !DILexicalBlock(scope: !10512, file: !3, line: 4520, column: 5)
!10518 = !DILocation(line: 4521, column: 23, scope: !10517)
!10519 = !DILocalVariable(name: "dep", scope: !10517, file: !3, line: 4522, type: !2720)
!10520 = !DILocation(line: 4522, column: 13, scope: !10517)
!10521 = !DILocation(line: 4524, column: 7, scope: !10522)
!10522 = distinct !DILexicalBlock(scope: !10517, file: !3, line: 4524, column: 7)
!10523 = !DILocation(line: 4524, column: 7, scope: !10524)
!10524 = distinct !DILexicalBlock(scope: !10522, file: !3, line: 4524, column: 7)
!10525 = !DILocation(line: 4525, column: 7, scope: !10526)
!10526 = distinct !DILexicalBlock(scope: !10524, file: !3, line: 4525, column: 6)
!10527 = !DILocation(line: 4525, column: 24, scope: !10526)
!10528 = !DILocation(line: 4525, column: 38, scope: !10526)
!10529 = !DILocation(line: 4525, column: 6, scope: !10524)
!10530 = !DILocalVariable(name: "_dep2", scope: !10531, file: !3, line: 4527, type: !2486)
!10531 = distinct !DILexicalBlock(scope: !10526, file: !3, line: 4526, column: 4)
!10532 = !DILocation(line: 4527, column: 18, scope: !10531)
!10533 = !DILocalVariable(name: "dep2", scope: !10531, file: !3, line: 4527, type: !6898)
!10534 = !DILocation(line: 4527, column: 26, scope: !10531)
!10535 = !DILocation(line: 4529, column: 16, scope: !10531)
!10536 = !DILocation(line: 4529, column: 22, scope: !10531)
!10537 = !DILocation(line: 4529, column: 37, scope: !10531)
!10538 = !DILocation(line: 4529, column: 6, scope: !10531)
!10539 = !DILocation(line: 4531, column: 18, scope: !10531)
!10540 = !DILocation(line: 4531, column: 6, scope: !10531)
!10541 = !DILocation(line: 4532, column: 4, scope: !10531)
!10542 = !DILocation(line: 4525, column: 41, scope: !10526)
!10543 = distinct !{!10543, !10521, !10544}
!10544 = !DILocation(line: 4532, column: 4, scope: !10522)
!10545 = !DILocation(line: 4534, column: 31, scope: !10517)
!10546 = !DILocation(line: 4534, column: 48, scope: !10517)
!10547 = !DILocation(line: 4534, column: 14, scope: !10517)
!10548 = !DILocation(line: 4534, column: 12, scope: !10517)
!10549 = !DILocation(line: 4535, column: 24, scope: !10517)
!10550 = !DILocation(line: 4535, column: 7, scope: !10517)
!10551 = !DILocation(line: 4537, column: 11, scope: !10552)
!10552 = distinct !DILexicalBlock(scope: !10517, file: !3, line: 4537, column: 11)
!10553 = !DILocation(line: 4537, column: 25, scope: !10552)
!10554 = !DILocation(line: 4537, column: 28, scope: !10552)
!10555 = !DILocation(line: 4537, column: 39, scope: !10552)
!10556 = !DILocation(line: 4537, column: 11, scope: !10517)
!10557 = !DILocation(line: 4540, column: 11, scope: !10552)
!10558 = !DILocation(line: 4540, column: 22, scope: !10552)
!10559 = !DILocation(line: 4541, column: 4, scope: !10552)
!10560 = !DILocation(line: 4541, column: 21, scope: !10552)
!10561 = !DILocation(line: 4541, column: 26, scope: !10552)
!10562 = !DILocation(line: 4540, column: 2, scope: !10552)
!10563 = !DILocation(line: 4542, column: 5, scope: !10517)
!10564 = !DILocation(line: 4545, column: 26, scope: !10565)
!10565 = distinct !DILexicalBlock(scope: !10512, file: !3, line: 4544, column: 5)
!10566 = !DILocation(line: 4545, column: 7, scope: !10565)
!10567 = !DILocation(line: 4545, column: 24, scope: !10565)
!10568 = !DILocation(line: 4546, column: 7, scope: !10565)
!10569 = !DILocation(line: 4546, column: 32, scope: !10565)
!10570 = !DILocation(line: 4547, column: 14, scope: !10565)
!10571 = !DILocation(line: 4547, column: 12, scope: !10565)
!10572 = !DILocation(line: 4554, column: 22, scope: !10401)
!10573 = !DILocation(line: 4554, column: 28, scope: !10401)
!10574 = !DILocation(line: 4554, column: 3, scope: !10401)
!10575 = !DILocation(line: 4556, column: 7, scope: !10576)
!10576 = distinct !DILexicalBlock(scope: !10401, file: !3, line: 4556, column: 7)
!10577 = !DILocation(line: 4556, column: 14, scope: !10576)
!10578 = !DILocation(line: 4556, column: 11, scope: !10576)
!10579 = !DILocation(line: 4556, column: 7, scope: !10401)
!10580 = !DILocalVariable(name: "first_bb", scope: !10581, file: !3, line: 4559, type: !1406)
!10581 = distinct !DILexicalBlock(scope: !10576, file: !3, line: 4558, column: 5)
!10582 = !DILocation(line: 4559, column: 19, scope: !10581)
!10583 = !DILocalVariable(name: "second_bb", scope: !10581, file: !3, line: 4559, type: !1406)
!10584 = !DILocation(line: 4559, column: 29, scope: !10581)
!10585 = !DILocalVariable(name: "jump", scope: !10581, file: !3, line: 4560, type: !867)
!10586 = !DILocation(line: 4560, column: 11, scope: !10581)
!10587 = !DILocation(line: 4562, column: 18, scope: !10581)
!10588 = !DILocation(line: 4562, column: 16, scope: !10581)
!10589 = !DILocation(line: 4563, column: 19, scope: !10581)
!10590 = !DILocation(line: 4563, column: 38, scope: !10581)
!10591 = !DILocation(line: 4563, column: 48, scope: !10581)
!10592 = !DILocation(line: 4563, column: 17, scope: !10581)
!10593 = !DILocation(line: 4565, column: 36, scope: !10581)
!10594 = !DILocation(line: 4565, column: 46, scope: !10581)
!10595 = !DILocation(line: 4565, column: 51, scope: !10581)
!10596 = !DILocation(line: 4565, column: 7, scope: !10581)
!10597 = !DILocation(line: 4567, column: 7, scope: !10581)
!10598 = !DILocation(line: 4567, column: 27, scope: !10581)
!10599 = !DILocation(line: 4567, column: 38, scope: !10581)
!10600 = !DILocation(line: 4568, column: 7, scope: !10581)
!10601 = !DILocation(line: 4568, column: 27, scope: !10581)
!10602 = !DILocation(line: 4568, column: 32, scope: !10581)
!10603 = !DILocation(line: 4570, column: 14, scope: !10581)
!10604 = !DILocation(line: 4570, column: 12, scope: !10581)
!10605 = !DILocation(line: 4571, column: 24, scope: !10581)
!10606 = !DILocation(line: 4571, column: 7, scope: !10581)
!10607 = !DILocation(line: 4572, column: 5, scope: !10581)
!10608 = !DILocation(line: 4578, column: 3, scope: !10609)
!10609 = distinct !DILexicalBlock(scope: !10401, file: !3, line: 4578, column: 3)
!10610 = !DILocation(line: 4578, column: 3, scope: !10611)
!10611 = distinct !DILexicalBlock(scope: !10609, file: !3, line: 4578, column: 3)
!10612 = !DILocalVariable(name: "pro", scope: !10613, file: !3, line: 4580, type: !867)
!10613 = distinct !DILexicalBlock(scope: !10611, file: !3, line: 4579, column: 5)
!10614 = !DILocation(line: 4580, column: 11, scope: !10613)
!10615 = !DILocation(line: 4580, column: 17, scope: !10613)
!10616 = !DILocalVariable(name: "ds", scope: !10613, file: !3, line: 4581, type: !2099)
!10617 = !DILocation(line: 4581, column: 12, scope: !10613)
!10618 = !DILocation(line: 4598, column: 12, scope: !10613)
!10619 = !DILocation(line: 4598, column: 10, scope: !10613)
!10620 = !DILocation(line: 4600, column: 11, scope: !10621)
!10621 = distinct !DILexicalBlock(scope: !10613, file: !3, line: 4600, column: 11)
!10622 = !DILocation(line: 4600, column: 14, scope: !10621)
!10623 = !DILocation(line: 4600, column: 11, scope: !10613)
!10624 = !DILocation(line: 4602, column: 4, scope: !10625)
!10625 = distinct !DILexicalBlock(scope: !10621, file: !3, line: 4601, column: 2)
!10626 = !DILocation(line: 4603, column: 7, scope: !10625)
!10627 = !DILocation(line: 4604, column: 2, scope: !10625)
!10628 = !DILocation(line: 4606, column: 19, scope: !10613)
!10629 = !DILocation(line: 4606, column: 28, scope: !10613)
!10630 = !DILocation(line: 4606, column: 33, scope: !10613)
!10631 = !DILocation(line: 4606, column: 40, scope: !10613)
!10632 = !DILocation(line: 4606, column: 56, scope: !10613)
!10633 = !DILocation(line: 4606, column: 7, scope: !10613)
!10634 = !DILocation(line: 4607, column: 19, scope: !10613)
!10635 = !DILocation(line: 4607, column: 7, scope: !10613)
!10636 = !DILocation(line: 4609, column: 11, scope: !10637)
!10637 = distinct !DILexicalBlock(scope: !10613, file: !3, line: 4609, column: 11)
!10638 = !DILocation(line: 4609, column: 18, scope: !10637)
!10639 = !DILocation(line: 4609, column: 15, scope: !10637)
!10640 = !DILocation(line: 4609, column: 11, scope: !10613)
!10641 = !DILocation(line: 4611, column: 24, scope: !10642)
!10642 = distinct !DILexicalBlock(scope: !10637, file: !3, line: 4610, column: 2)
!10643 = !DILocation(line: 4611, column: 4, scope: !10642)
!10644 = !DILocation(line: 4611, column: 22, scope: !10642)
!10645 = !DILocation(line: 4612, column: 16, scope: !10642)
!10646 = !DILocation(line: 4612, column: 4, scope: !10642)
!10647 = !DILocation(line: 4613, column: 2, scope: !10642)
!10648 = !DILocation(line: 4614, column: 5, scope: !10613)
!10649 = distinct !{!10649, !10608, !10650}
!10650 = !DILocation(line: 4614, column: 5, scope: !10609)
!10651 = !DILocation(line: 4617, column: 35, scope: !10652)
!10652 = distinct !DILexicalBlock(scope: !10401, file: !3, line: 4617, column: 3)
!10653 = !DILocation(line: 4617, column: 16, scope: !10652)
!10654 = !DILocation(line: 4617, column: 8, scope: !10652)
!10655 = !DILocation(line: 4618, column: 8, scope: !10656)
!10656 = distinct !DILexicalBlock(scope: !10652, file: !3, line: 4617, column: 3)
!10657 = !DILocation(line: 4617, column: 3, scope: !10652)
!10658 = !DILocation(line: 4620, column: 12, scope: !10659)
!10659 = distinct !DILexicalBlock(scope: !10660, file: !3, line: 4620, column: 11)
!10660 = distinct !DILexicalBlock(scope: !10656, file: !3, line: 4619, column: 5)
!10661 = !DILocation(line: 4620, column: 29, scope: !10659)
!10662 = !DILocation(line: 4621, column: 4, scope: !10659)
!10663 = !DILocation(line: 4621, column: 7, scope: !10659)
!10664 = !DILocation(line: 4620, column: 11, scope: !10660)
!10665 = !DILocation(line: 4624, column: 2, scope: !10659)
!10666 = !DILocation(line: 4626, column: 2, scope: !10659)
!10667 = !DILocation(line: 4617, column: 3, scope: !10656)
!10668 = distinct !{!10668, !10657, !10669}
!10669 = !DILocation(line: 4627, column: 5, scope: !10652)
!10670 = !DILocation(line: 4630, column: 6, scope: !10401)
!10671 = !DILocation(line: 4635, column: 3, scope: !10401)
!10672 = !DILocation(line: 4637, column: 8, scope: !10673)
!10673 = distinct !DILexicalBlock(scope: !10401, file: !3, line: 4637, column: 7)
!10674 = !DILocation(line: 4637, column: 7, scope: !10401)
!10675 = !DILocalVariable(name: "ts", scope: !10676, file: !3, line: 4639, type: !2099)
!10676 = distinct !DILexicalBlock(scope: !10673, file: !3, line: 4638, column: 5)
!10677 = !DILocation(line: 4639, column: 12, scope: !10676)
!10678 = !DILocation(line: 4639, column: 17, scope: !10676)
!10679 = !DILocation(line: 4641, column: 26, scope: !10676)
!10680 = !DILocation(line: 4641, column: 29, scope: !10676)
!10681 = !DILocation(line: 4641, column: 7, scope: !10676)
!10682 = !DILocation(line: 4641, column: 24, scope: !10676)
!10683 = !DILocation(line: 4642, column: 28, scope: !10676)
!10684 = !DILocation(line: 4642, column: 31, scope: !10676)
!10685 = !DILocation(line: 4642, column: 7, scope: !10676)
!10686 = !DILocation(line: 4642, column: 26, scope: !10676)
!10687 = !DILocation(line: 4646, column: 11, scope: !10688)
!10688 = distinct !DILexicalBlock(scope: !10676, file: !3, line: 4646, column: 11)
!10689 = !DILocation(line: 4646, column: 14, scope: !10688)
!10690 = !DILocation(line: 4646, column: 11, scope: !10676)
!10691 = !DILocation(line: 4647, column: 21, scope: !10688)
!10692 = !DILocation(line: 4647, column: 51, scope: !10688)
!10693 = !DILocation(line: 4647, column: 37, scope: !10688)
!10694 = !DILocation(line: 4647, column: 7, scope: !10688)
!10695 = !DILocation(line: 4647, column: 5, scope: !10688)
!10696 = !DILocation(line: 4647, column: 2, scope: !10688)
!10697 = !DILocation(line: 4648, column: 11, scope: !10698)
!10698 = distinct !DILexicalBlock(scope: !10676, file: !3, line: 4648, column: 11)
!10699 = !DILocation(line: 4648, column: 14, scope: !10698)
!10700 = !DILocation(line: 4648, column: 11, scope: !10676)
!10701 = !DILocation(line: 4649, column: 21, scope: !10698)
!10702 = !DILocation(line: 4650, column: 21, scope: !10698)
!10703 = !DILocation(line: 4650, column: 7, scope: !10698)
!10704 = !DILocation(line: 4649, column: 7, scope: !10698)
!10705 = !DILocation(line: 4649, column: 5, scope: !10698)
!10706 = !DILocation(line: 4649, column: 2, scope: !10698)
!10707 = !DILocation(line: 4651, column: 5, scope: !10676)
!10708 = !DILocation(line: 4653, column: 26, scope: !10673)
!10709 = !DILocation(line: 4653, column: 5, scope: !10673)
!10710 = !DILocation(line: 4653, column: 24, scope: !10673)
!10711 = !DILocation(line: 4656, column: 38, scope: !10401)
!10712 = !DILocation(line: 4656, column: 44, scope: !10401)
!10713 = !DILocation(line: 4656, column: 50, scope: !10401)
!10714 = !DILocation(line: 4656, column: 3, scope: !10401)
!10715 = !DILocation(line: 4658, column: 7, scope: !10716)
!10716 = distinct !DILexicalBlock(scope: !10401, file: !3, line: 4658, column: 7)
!10717 = !DILocation(line: 4658, column: 14, scope: !10716)
!10718 = !DILocation(line: 4658, column: 11, scope: !10716)
!10719 = !DILocation(line: 4658, column: 7, scope: !10401)
!10720 = !DILocation(line: 4664, column: 12, scope: !10721)
!10721 = distinct !DILexicalBlock(scope: !10722, file: !3, line: 4664, column: 11)
!10722 = distinct !DILexicalBlock(scope: !10716, file: !3, line: 4659, column: 5)
!10723 = !DILocation(line: 4664, column: 11, scope: !10722)
!10724 = !DILocation(line: 4666, column: 14, scope: !10725)
!10725 = distinct !DILexicalBlock(scope: !10721, file: !3, line: 4665, column: 2)
!10726 = !DILocation(line: 4666, column: 23, scope: !10725)
!10727 = !DILocation(line: 4666, column: 29, scope: !10725)
!10728 = !DILocation(line: 4666, column: 4, scope: !10725)
!10729 = !DILocation(line: 4667, column: 16, scope: !10725)
!10730 = !DILocation(line: 4667, column: 4, scope: !10725)
!10731 = !DILocation(line: 4669, column: 14, scope: !10725)
!10732 = !DILocation(line: 4669, column: 23, scope: !10725)
!10733 = !DILocation(line: 4669, column: 29, scope: !10725)
!10734 = !DILocation(line: 4669, column: 4, scope: !10725)
!10735 = !DILocation(line: 4670, column: 16, scope: !10725)
!10736 = !DILocation(line: 4670, column: 4, scope: !10725)
!10737 = !DILocation(line: 4671, column: 2, scope: !10725)
!10738 = !DILocation(line: 4674, column: 8, scope: !10739)
!10739 = distinct !DILexicalBlock(scope: !10740, file: !3, line: 4674, column: 8)
!10740 = distinct !DILexicalBlock(scope: !10721, file: !3, line: 4673, column: 2)
!10741 = !DILocation(line: 4674, column: 19, scope: !10739)
!10742 = !DILocation(line: 4674, column: 8, scope: !10740)
!10743 = !DILocation(line: 4675, column: 15, scope: !10739)
!10744 = !DILocation(line: 4675, column: 26, scope: !10739)
!10745 = !DILocation(line: 4676, column: 10, scope: !10739)
!10746 = !DILocation(line: 4676, column: 30, scope: !10739)
!10747 = !DILocation(line: 4676, column: 43, scope: !10739)
!10748 = !DILocation(line: 4676, column: 8, scope: !10739)
!10749 = !DILocation(line: 4675, column: 6, scope: !10739)
!10750 = !DILocation(line: 4680, column: 33, scope: !10751)
!10751 = distinct !DILexicalBlock(scope: !10740, file: !3, line: 4679, column: 4)
!10752 = !DILocation(line: 4680, column: 14, scope: !10751)
!10753 = !DILocation(line: 4683, column: 6, scope: !10751)
!10754 = !DILocation(line: 4683, column: 13, scope: !10751)
!10755 = !DILocation(line: 4684, column: 8, scope: !10751)
!10756 = distinct !{!10756, !10753, !10757}
!10757 = !DILocation(line: 4684, column: 28, scope: !10751)
!10758 = !DILocation(line: 4689, column: 8, scope: !10759)
!10759 = distinct !DILexicalBlock(scope: !10740, file: !3, line: 4689, column: 8)
!10760 = !DILocation(line: 4689, column: 27, scope: !10759)
!10761 = !DILocation(line: 4689, column: 8, scope: !10740)
!10762 = !DILocation(line: 4690, column: 17, scope: !10759)
!10763 = !DILocation(line: 4690, column: 6, scope: !10759)
!10764 = !DILocation(line: 4694, column: 23, scope: !10740)
!10765 = !DILocation(line: 4694, column: 4, scope: !10740)
!10766 = !DILocation(line: 4697, column: 17, scope: !10722)
!10767 = !DILocation(line: 4697, column: 26, scope: !10722)
!10768 = !DILocation(line: 4697, column: 33, scope: !10722)
!10769 = !DILocation(line: 4697, column: 7, scope: !10722)
!10770 = !DILocation(line: 4698, column: 19, scope: !10722)
!10771 = !DILocation(line: 4698, column: 7, scope: !10722)
!10772 = !DILocation(line: 4699, column: 5, scope: !10722)
!10773 = !DILocation(line: 4702, column: 19, scope: !10774)
!10774 = distinct !DILexicalBlock(scope: !10716, file: !3, line: 4701, column: 5)
!10775 = !DILocation(line: 4702, column: 28, scope: !10774)
!10776 = !DILocation(line: 4702, column: 34, scope: !10774)
!10777 = !DILocation(line: 4702, column: 7, scope: !10774)
!10778 = !DILocation(line: 4703, column: 19, scope: !10774)
!10779 = !DILocation(line: 4703, column: 7, scope: !10774)
!10780 = !DILocation(line: 4706, column: 8, scope: !10781)
!10781 = distinct !DILexicalBlock(scope: !10401, file: !3, line: 4706, column: 7)
!10782 = !DILocation(line: 4706, column: 7, scope: !10401)
!10783 = !DILocalVariable(name: "priorities_roots", scope: !10784, file: !3, line: 4710, type: !10219)
!10784 = distinct !DILexicalBlock(scope: !10781, file: !3, line: 4709, column: 5)
!10785 = !DILocation(line: 4710, column: 17, scope: !10784)
!10786 = !DILocation(line: 4712, column: 25, scope: !10784)
!10787 = !DILocation(line: 4712, column: 7, scope: !10784)
!10788 = !DILocation(line: 4713, column: 24, scope: !10784)
!10789 = !DILocation(line: 4713, column: 7, scope: !10784)
!10790 = !DILocation(line: 4714, column: 7, scope: !10784)
!10791 = !DILocation(line: 4715, column: 5, scope: !10784)
!10792 = !DILocation(line: 4716, column: 1, scope: !10401)
!10793 = distinct !DISubprogram(name: "VEC_haifa_deps_insn_data_def_base_index", scope: !398, file: !398, line: 846, type: !10794, scopeLine: 846, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!10794 = !DISubroutineType(types: !10795)
!10795 = !{!10796, !10808, !7}
!10796 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10797, size: 64)
!10797 = !DIDerivedType(tag: DW_TAG_typedef, name: "haifa_deps_insn_data_def", file: !398, line: 843, baseType: !10798)
!10798 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_haifa_deps_insn_data", file: !398, line: 663, size: 448, elements: !10799)
!10799 = !{!10800, !10801, !10802, !10803, !10804, !10805, !10806, !10807}
!10800 = !DIDerivedType(tag: DW_TAG_member, name: "dep_count", scope: !10798, file: !398, line: 668, baseType: !865, size: 32)
!10801 = !DIDerivedType(tag: DW_TAG_member, name: "has_internal_dep", scope: !10798, file: !398, line: 672, baseType: !7, size: 32, offset: 32)
!10802 = !DIDerivedType(tag: DW_TAG_member, name: "hard_back_deps", scope: !10798, file: !398, line: 682, baseType: !7690, size: 64, offset: 64)
!10803 = !DIDerivedType(tag: DW_TAG_member, name: "spec_back_deps", scope: !10798, file: !398, line: 686, baseType: !7690, size: 64, offset: 128)
!10804 = !DIDerivedType(tag: DW_TAG_member, name: "forw_deps", scope: !10798, file: !398, line: 690, baseType: !7690, size: 64, offset: 192)
!10805 = !DIDerivedType(tag: DW_TAG_member, name: "resolved_back_deps", scope: !10798, file: !398, line: 694, baseType: !7690, size: 64, offset: 256)
!10806 = !DIDerivedType(tag: DW_TAG_member, name: "resolved_forw_deps", scope: !10798, file: !398, line: 699, baseType: !7690, size: 64, offset: 320)
!10807 = !DIDerivedType(tag: DW_TAG_member, name: "cant_move", scope: !10798, file: !398, line: 702, baseType: !7, size: 1, offset: 384, flags: DIFlagBitField, extraData: i64 384)
!10808 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10809, size: 64)
!10809 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_haifa_deps_insn_data_def_base", file: !398, line: 846, baseType: !10810)
!10810 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_haifa_deps_insn_data_def_base", file: !398, line: 846, size: 512, elements: !10811)
!10811 = !{!10812, !10813, !10814}
!10812 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !10810, file: !398, line: 846, baseType: !7, size: 32)
!10813 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !10810, file: !398, line: 846, baseType: !7, size: 32, offset: 32)
!10814 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !10810, file: !398, line: 846, baseType: !10815, size: 448, offset: 64)
!10815 = !DICompositeType(tag: DW_TAG_array_type, baseType: !10797, size: 448, elements: !905)
!10816 = !DILocalVariable(name: "vec_", arg: 1, scope: !10793, file: !398, line: 846, type: !10808)
!10817 = !DILocation(line: 846, column: 1, scope: !10793)
!10818 = !DILocalVariable(name: "ix_", arg: 2, scope: !10793, file: !398, line: 846, type: !7)
!10819 = !DILocation(line: 0, scope: !10793)
!10820 = distinct !DISubprogram(name: "process_insn_forw_deps_be_in_spec", scope: !3, file: !3, line: 4007, type: !10821, scopeLine: 4008, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!10821 = !DISubroutineType(types: !10822)
!10822 = !{null, !867, !867, !2099}
!10823 = !DILocalVariable(name: "insn", arg: 1, scope: !10820, file: !3, line: 4007, type: !867)
!10824 = !DILocation(line: 4007, column: 40, scope: !10820)
!10825 = !DILocalVariable(name: "twin", arg: 2, scope: !10820, file: !3, line: 4007, type: !867)
!10826 = !DILocation(line: 4007, column: 50, scope: !10820)
!10827 = !DILocalVariable(name: "fs", arg: 3, scope: !10820, file: !3, line: 4007, type: !2099)
!10828 = !DILocation(line: 4007, column: 61, scope: !10820)
!10829 = !DILocalVariable(name: "sd_it", scope: !10820, file: !3, line: 4009, type: !2467)
!10830 = !DILocation(line: 4009, column: 19, scope: !10820)
!10831 = !DILocalVariable(name: "dep", scope: !10820, file: !3, line: 4010, type: !2720)
!10832 = !DILocation(line: 4010, column: 9, scope: !10820)
!10833 = !DILocation(line: 4012, column: 3, scope: !10834)
!10834 = distinct !DILexicalBlock(scope: !10820, file: !3, line: 4012, column: 3)
!10835 = !DILocation(line: 4012, column: 3, scope: !10836)
!10836 = distinct !DILexicalBlock(scope: !10834, file: !3, line: 4012, column: 3)
!10837 = !DILocalVariable(name: "ds", scope: !10838, file: !3, line: 4014, type: !2099)
!10838 = distinct !DILexicalBlock(scope: !10836, file: !3, line: 4013, column: 5)
!10839 = !DILocation(line: 4014, column: 12, scope: !10838)
!10840 = !DILocalVariable(name: "consumer", scope: !10838, file: !3, line: 4015, type: !867)
!10841 = !DILocation(line: 4015, column: 11, scope: !10838)
!10842 = !DILocation(line: 4017, column: 18, scope: !10838)
!10843 = !DILocation(line: 4017, column: 16, scope: !10838)
!10844 = !DILocation(line: 4019, column: 12, scope: !10838)
!10845 = !DILocation(line: 4019, column: 10, scope: !10838)
!10846 = !DILocation(line: 4022, column: 4, scope: !10847)
!10847 = distinct !DILexicalBlock(scope: !10838, file: !3, line: 4022, column: 4)
!10848 = !DILocation(line: 4024, column: 4, scope: !10847)
!10849 = !DILocation(line: 4024, column: 8, scope: !10847)
!10850 = !DILocation(line: 4024, column: 11, scope: !10847)
!10851 = !DILocation(line: 4024, column: 24, scope: !10847)
!10852 = !DILocation(line: 4022, column: 4, scope: !10838)
!10853 = !DILocation(line: 4026, column: 4, scope: !10854)
!10854 = distinct !DILexicalBlock(scope: !10847, file: !3, line: 4025, column: 2)
!10855 = !DILocation(line: 4029, column: 8, scope: !10856)
!10856 = distinct !DILexicalBlock(scope: !10854, file: !3, line: 4029, column: 8)
!10857 = !DILocation(line: 4029, column: 11, scope: !10856)
!10858 = !DILocation(line: 4029, column: 8, scope: !10854)
!10859 = !DILocation(line: 4037, column: 14, scope: !10860)
!10860 = distinct !DILexicalBlock(scope: !10861, file: !3, line: 4037, column: 5)
!10861 = distinct !DILexicalBlock(scope: !10856, file: !3, line: 4032, column: 6)
!10862 = !DILocation(line: 4037, column: 5, scope: !10860)
!10863 = !DILocation(line: 4037, column: 30, scope: !10860)
!10864 = !DILocation(line: 4037, column: 21, scope: !10860)
!10865 = !DILocation(line: 4037, column: 18, scope: !10860)
!10866 = !DILocation(line: 4037, column: 5, scope: !10861)
!10867 = !DILocalVariable(name: "new_ds", scope: !10868, file: !3, line: 4039, type: !2099)
!10868 = distinct !DILexicalBlock(scope: !10860, file: !3, line: 4038, column: 3)
!10869 = !DILocation(line: 4039, column: 10, scope: !10868)
!10870 = !DILocation(line: 4041, column: 15, scope: !10868)
!10871 = !DILocation(line: 4041, column: 18, scope: !10868)
!10872 = !DILocation(line: 4041, column: 35, scope: !10868)
!10873 = !DILocation(line: 4041, column: 33, scope: !10868)
!10874 = !DILocation(line: 4041, column: 12, scope: !10868)
!10875 = !DILocation(line: 4044, column: 53, scope: !10876)
!10876 = distinct !DILexicalBlock(scope: !10868, file: !3, line: 4044, column: 9)
!10877 = !DILocation(line: 4045, column: 11, scope: !10876)
!10878 = !DILocation(line: 4044, column: 9, scope: !10876)
!10879 = !DILocation(line: 4044, column: 9, scope: !10868)
!10880 = !DILocation(line: 4047, column: 12, scope: !10876)
!10881 = !DILocation(line: 4047, column: 10, scope: !10876)
!10882 = !DILocation(line: 4047, column: 7, scope: !10876)
!10883 = !DILocation(line: 4048, column: 3, scope: !10868)
!10884 = !DILocation(line: 4049, column: 6, scope: !10861)
!10885 = !DILocation(line: 4052, column: 12, scope: !10856)
!10886 = !DILocation(line: 4052, column: 9, scope: !10856)
!10887 = !DILocation(line: 4053, column: 2, scope: !10854)
!10888 = !DILocalVariable(name: "_new_dep", scope: !10889, file: !3, line: 4056, type: !2722)
!10889 = distinct !DILexicalBlock(scope: !10838, file: !3, line: 4055, column: 7)
!10890 = !DILocation(line: 4056, column: 10, scope: !10889)
!10891 = !DILocalVariable(name: "new_dep", scope: !10889, file: !3, line: 4056, type: !2721)
!10892 = !DILocation(line: 4056, column: 21, scope: !10889)
!10893 = !DILocation(line: 4058, column: 14, scope: !10889)
!10894 = !DILocation(line: 4058, column: 23, scope: !10889)
!10895 = !DILocation(line: 4058, column: 29, scope: !10889)
!10896 = !DILocation(line: 4058, column: 39, scope: !10889)
!10897 = !DILocation(line: 4058, column: 55, scope: !10889)
!10898 = !DILocation(line: 4058, column: 2, scope: !10889)
!10899 = !DILocation(line: 4059, column: 14, scope: !10889)
!10900 = !DILocation(line: 4059, column: 2, scope: !10889)
!10901 = !DILocation(line: 4061, column: 5, scope: !10838)
!10902 = distinct !{!10902, !10833, !10903}
!10903 = !DILocation(line: 4061, column: 5, scope: !10834)
!10904 = !DILocation(line: 4062, column: 1, scope: !10820)
!10905 = distinct !DISubprogram(name: "sched_remove_insn", scope: !3, file: !3, line: 5042, type: !2350, scopeLine: 5043, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!10906 = !DILocalVariable(name: "insn", arg: 1, scope: !10905, file: !3, line: 5042, type: !867)
!10907 = !DILocation(line: 5042, column: 24, scope: !10905)
!10908 = !DILocation(line: 5044, column: 19, scope: !10905)
!10909 = !DILocation(line: 5044, column: 3, scope: !10905)
!10910 = !DILocation(line: 5046, column: 23, scope: !10905)
!10911 = !DILocation(line: 5046, column: 3, scope: !10905)
!10912 = !DILocation(line: 5047, column: 3, scope: !10905)
!10913 = !DILocation(line: 5047, column: 23, scope: !10905)
!10914 = !DILocation(line: 5047, column: 40, scope: !10905)
!10915 = !DILocation(line: 5048, column: 16, scope: !10905)
!10916 = !DILocation(line: 5048, column: 3, scope: !10905)
!10917 = !DILocation(line: 5049, column: 1, scope: !10905)
!10918 = distinct !DISubprogram(name: "clear_priorities", scope: !3, file: !3, line: 5055, type: !10919, scopeLine: 5056, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!10919 = !DISubroutineType(types: !10920)
!10920 = !{null, !867, !10921}
!10921 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10219, size: 64)
!10922 = !DILocalVariable(name: "insn", arg: 1, scope: !10918, file: !3, line: 5055, type: !867)
!10923 = !DILocation(line: 5055, column: 23, scope: !10918)
!10924 = !DILocalVariable(name: "roots_ptr", arg: 2, scope: !10918, file: !3, line: 5055, type: !10921)
!10925 = !DILocation(line: 5055, column: 40, scope: !10918)
!10926 = !DILocalVariable(name: "sd_it", scope: !10918, file: !3, line: 5057, type: !2467)
!10927 = !DILocation(line: 5057, column: 19, scope: !10918)
!10928 = !DILocalVariable(name: "dep", scope: !10918, file: !3, line: 5058, type: !2720)
!10929 = !DILocation(line: 5058, column: 9, scope: !10918)
!10930 = !DILocalVariable(name: "insn_is_root_p", scope: !10918, file: !3, line: 5059, type: !1100)
!10931 = !DILocation(line: 5059, column: 8, scope: !10918)
!10932 = !DILocation(line: 5061, column: 3, scope: !10918)
!10933 = !DILocation(line: 5063, column: 3, scope: !10934)
!10934 = distinct !DILexicalBlock(scope: !10918, file: !3, line: 5063, column: 3)
!10935 = !DILocation(line: 5063, column: 3, scope: !10936)
!10936 = distinct !DILexicalBlock(scope: !10934, file: !3, line: 5063, column: 3)
!10937 = !DILocalVariable(name: "pro", scope: !10938, file: !3, line: 5065, type: !867)
!10938 = distinct !DILexicalBlock(scope: !10936, file: !3, line: 5064, column: 5)
!10939 = !DILocation(line: 5065, column: 11, scope: !10938)
!10940 = !DILocation(line: 5065, column: 17, scope: !10938)
!10941 = !DILocation(line: 5067, column: 11, scope: !10942)
!10942 = distinct !DILexicalBlock(scope: !10938, file: !3, line: 5067, column: 11)
!10943 = !DILocation(line: 5067, column: 38, scope: !10942)
!10944 = !DILocation(line: 5068, column: 4, scope: !10942)
!10945 = !DILocation(line: 5068, column: 7, scope: !10942)
!10946 = !DILocation(line: 5068, column: 26, scope: !10942)
!10947 = !DILocation(line: 5067, column: 11, scope: !10938)
!10948 = !DILocation(line: 5072, column: 35, scope: !10949)
!10949 = distinct !DILexicalBlock(scope: !10950, file: !3, line: 5072, column: 8)
!10950 = distinct !DILexicalBlock(scope: !10942, file: !3, line: 5069, column: 2)
!10951 = !DILocation(line: 5072, column: 8, scope: !10949)
!10952 = !DILocation(line: 5072, column: 8, scope: !10950)
!10953 = !DILocation(line: 5073, column: 21, scope: !10949)
!10954 = !DILocation(line: 5073, column: 6, scope: !10949)
!10955 = !DILocation(line: 5075, column: 4, scope: !10950)
!10956 = !DILocation(line: 5075, column: 31, scope: !10950)
!10957 = !DILocation(line: 5076, column: 22, scope: !10950)
!10958 = !DILocation(line: 5076, column: 27, scope: !10950)
!10959 = !DILocation(line: 5076, column: 4, scope: !10950)
!10960 = !DILocation(line: 5077, column: 2, scope: !10950)
!10961 = !DILocation(line: 5078, column: 5, scope: !10938)
!10962 = distinct !{!10962, !10933, !10963}
!10963 = !DILocation(line: 5078, column: 5, scope: !10934)
!10964 = !DILocation(line: 5080, column: 7, scope: !10965)
!10965 = distinct !DILexicalBlock(scope: !10918, file: !3, line: 5080, column: 7)
!10966 = !DILocation(line: 5080, column: 7, scope: !10918)
!10967 = !DILocation(line: 5081, column: 5, scope: !10965)
!10968 = !DILocation(line: 5082, column: 1, scope: !10918)
!10969 = distinct !DISubprogram(name: "calc_priorities", scope: !3, file: !3, line: 5088, type: !10970, scopeLine: 5089, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!10970 = !DISubroutineType(types: !10971)
!10971 = !{null, !10219}
!10972 = !DILocalVariable(name: "roots", arg: 1, scope: !10969, file: !3, line: 5088, type: !10219)
!10973 = !DILocation(line: 5088, column: 28, scope: !10969)
!10974 = !DILocalVariable(name: "i", scope: !10969, file: !3, line: 5090, type: !865)
!10975 = !DILocation(line: 5090, column: 7, scope: !10969)
!10976 = !DILocalVariable(name: "insn", scope: !10969, file: !3, line: 5091, type: !867)
!10977 = !DILocation(line: 5091, column: 7, scope: !10969)
!10978 = !DILocation(line: 5093, column: 10, scope: !10979)
!10979 = distinct !DILexicalBlock(scope: !10969, file: !3, line: 5093, column: 3)
!10980 = !DILocation(line: 5093, column: 8, scope: !10979)
!10981 = !DILocation(line: 5093, column: 15, scope: !10982)
!10982 = distinct !DILexicalBlock(scope: !10979, file: !3, line: 5093, column: 3)
!10983 = !DILocation(line: 5093, column: 3, scope: !10979)
!10984 = !DILocation(line: 5094, column: 15, scope: !10982)
!10985 = !DILocation(line: 5094, column: 5, scope: !10982)
!10986 = !DILocation(line: 5093, column: 51, scope: !10982)
!10987 = !DILocation(line: 5093, column: 3, scope: !10982)
!10988 = distinct !{!10988, !10983, !10989}
!10989 = !DILocation(line: 5094, column: 19, scope: !10979)
!10990 = !DILocation(line: 5095, column: 1, scope: !10969)
!10991 = distinct !DISubprogram(name: "VEC_rtx_heap_free", scope: !406, file: !406, line: 201, type: !10992, scopeLine: 201, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!10992 = !DISubroutineType(types: !10993)
!10993 = !{null, !10994}
!10994 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2120, size: 64)
!10995 = !DILocalVariable(name: "vec_", arg: 1, scope: !10991, file: !406, line: 201, type: !10994)
!10996 = !DILocation(line: 201, column: 1, scope: !10991)
!10997 = !DILocation(line: 201, column: 1, scope: !10998)
!10998 = distinct !DILexicalBlock(scope: !10991, file: !406, line: 201, column: 1)
!10999 = distinct !DISubprogram(name: "VEC_rtx_heap_safe_push", scope: !406, file: !406, line: 201, type: !11000, scopeLine: 201, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!11000 = !DISubroutineType(types: !11001)
!11001 = !{!2098, !10994, !867}
!11002 = !DILocalVariable(name: "vec_", arg: 1, scope: !10999, file: !406, line: 201, type: !10994)
!11003 = !DILocation(line: 201, column: 1, scope: !10999)
!11004 = !DILocalVariable(name: "obj_", arg: 2, scope: !10999, file: !406, line: 201, type: !867)
!11005 = distinct !DISubprogram(name: "VEC_rtx_heap_reserve", scope: !406, file: !406, line: 201, type: !11006, scopeLine: 201, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!11006 = !DISubroutineType(types: !11007)
!11007 = !{!865, !10994, !865}
!11008 = !DILocalVariable(name: "vec_", arg: 1, scope: !11005, file: !406, line: 201, type: !10994)
!11009 = !DILocation(line: 201, column: 1, scope: !11005)
!11010 = !DILocalVariable(name: "alloc_", arg: 2, scope: !11005, file: !406, line: 201, type: !865)
!11011 = !DILocalVariable(name: "extend", scope: !11005, file: !406, line: 201, type: !865)
!11012 = !DILocation(line: 201, column: 1, scope: !11013)
!11013 = distinct !DILexicalBlock(scope: !11005, file: !406, line: 201, column: 1)
!11014 = distinct !DISubprogram(name: "VEC_rtx_base_quick_push", scope: !406, file: !406, line: 200, type: !11015, scopeLine: 200, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!11015 = !DISubroutineType(types: !11016)
!11016 = !{!2098, !11017, !867}
!11017 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2088, size: 64)
!11018 = !DILocalVariable(name: "vec_", arg: 1, scope: !11014, file: !406, line: 200, type: !11017)
!11019 = !DILocation(line: 200, column: 1, scope: !11014)
!11020 = !DILocalVariable(name: "obj_", arg: 2, scope: !11014, file: !406, line: 200, type: !867)
!11021 = !DILocalVariable(name: "slot_", scope: !11014, file: !406, line: 200, type: !2098)
!11022 = distinct !DISubprogram(name: "VEC_rtx_base_space", scope: !406, file: !406, line: 200, type: !11023, scopeLine: 200, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!11023 = !DISubroutineType(types: !11024)
!11024 = !{!865, !11017, !865}
!11025 = !DILocalVariable(name: "vec_", arg: 1, scope: !11022, file: !406, line: 200, type: !11017)
!11026 = !DILocation(line: 200, column: 1, scope: !11022)
!11027 = !DILocalVariable(name: "alloc_", arg: 2, scope: !11022, file: !406, line: 200, type: !865)
!11028 = distinct !DISubprogram(name: "ei_end_p", scope: !155, file: !155, line: 721, type: !11029, scopeLine: 722, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!11029 = !DISubroutineType(types: !11030)
!11030 = !{!1100, !8056}
!11031 = !DILocalVariable(name: "i", arg: 1, scope: !11028, file: !155, line: 721, type: !8056)
!11032 = !DILocation(line: 721, column: 25, scope: !11028)
!11033 = !DILocation(line: 723, column: 13, scope: !11028)
!11034 = !DILocation(line: 723, column: 22, scope: !11028)
!11035 = !DILocation(line: 723, column: 19, scope: !11028)
!11036 = !DILocation(line: 723, column: 10, scope: !11028)
!11037 = !DILocation(line: 723, column: 3, scope: !11028)
!11038 = distinct !DISubprogram(name: "ei_edge", scope: !155, file: !155, line: 752, type: !11039, scopeLine: 753, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!11039 = !DISubroutineType(types: !11040)
!11040 = !{!1423, !8056}
!11041 = !DILocalVariable(name: "i", arg: 1, scope: !11038, file: !155, line: 752, type: !8056)
!11042 = !DILocation(line: 752, column: 24, scope: !11038)
!11043 = !DILocation(line: 754, column: 10, scope: !11038)
!11044 = !DILocation(line: 754, column: 3, scope: !11038)
!11045 = distinct !DISubprogram(name: "ei_container", scope: !155, file: !155, line: 685, type: !11046, scopeLine: 686, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!11046 = !DISubroutineType(types: !11047)
!11047 = !{!1411, !8056}
!11048 = !DILocalVariable(name: "i", arg: 1, scope: !11045, file: !155, line: 685, type: !8056)
!11049 = !DILocation(line: 685, column: 29, scope: !11045)
!11050 = !DILocation(line: 687, column: 3, scope: !11045)
!11051 = !DILocation(line: 688, column: 13, scope: !11045)
!11052 = !DILocation(line: 688, column: 10, scope: !11045)
!11053 = !DILocation(line: 688, column: 3, scope: !11045)
!11054 = distinct !DISubprogram(name: "VEC_edge_base_index", scope: !155, file: !155, line: 150, type: !11055, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!11055 = !DISubroutineType(types: !11056)
!11056 = !{!1423, !8114, !7}
!11057 = !DILocalVariable(name: "vec_", arg: 1, scope: !11054, file: !155, line: 150, type: !8114)
!11058 = !DILocation(line: 150, column: 1, scope: !11054)
!11059 = !DILocalVariable(name: "ix_", arg: 2, scope: !11054, file: !155, line: 150, type: !7)
!11060 = !DILocation(line: 0, scope: !11054)
!11061 = distinct !DISubprogram(name: "VEC_loop_p_base_index", scope: !142, file: !142, line: 85, type: !11062, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!11062 = !DISubroutineType(types: !11063)
!11063 = !{!1475, !11064, !7}
!11064 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11065, size: 64)
!11065 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1468)
!11066 = !DILocalVariable(name: "vec_", arg: 1, scope: !11061, file: !142, line: 85, type: !11064)
!11067 = !DILocation(line: 85, column: 1, scope: !11061)
!11068 = !DILocalVariable(name: "ix_", arg: 2, scope: !11061, file: !142, line: 85, type: !7)
!11069 = !DILocation(line: 0, scope: !11061)
!11070 = distinct !DISubprogram(name: "VEC_int_heap_safe_grow_cleared", scope: !1389, file: !1389, line: 32, type: !11071, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!11071 = !DISubroutineType(types: !11072)
!11072 = !{null, !8798, !865}
!11073 = !DILocalVariable(name: "vec_", arg: 1, scope: !11070, file: !1389, line: 32, type: !8798)
!11074 = !DILocation(line: 32, column: 1, scope: !11070)
!11075 = !DILocalVariable(name: "size_", arg: 2, scope: !11070, file: !1389, line: 32, type: !865)
!11076 = !DILocalVariable(name: "oldsize", scope: !11070, file: !1389, line: 32, type: !865)
!11077 = distinct !DISubprogram(name: "VEC_int_base_length", scope: !1389, file: !1389, line: 31, type: !11078, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!11078 = !DISubroutineType(types: !11079)
!11079 = !{!7, !8811}
!11080 = !DILocalVariable(name: "vec_", arg: 1, scope: !11077, file: !1389, line: 31, type: !8811)
!11081 = !DILocation(line: 31, column: 1, scope: !11077)
!11082 = distinct !DISubprogram(name: "VEC_int_heap_safe_grow", scope: !1389, file: !1389, line: 32, type: !11071, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!11083 = !DILocalVariable(name: "vec_", arg: 1, scope: !11082, file: !1389, line: 32, type: !8798)
!11084 = !DILocation(line: 32, column: 1, scope: !11082)
!11085 = !DILocalVariable(name: "size_", arg: 2, scope: !11082, file: !1389, line: 32, type: !865)
!11086 = !DILocation(line: 0, scope: !11082)
!11087 = distinct !DISubprogram(name: "VEC_int_base_address", scope: !1389, file: !1389, line: 31, type: !11088, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!11088 = !DISubroutineType(types: !11089)
!11089 = !{!2176, !11090}
!11090 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2130, size: 64)
!11091 = !DILocalVariable(name: "vec_", arg: 1, scope: !11087, file: !1389, line: 31, type: !11090)
!11092 = !DILocation(line: 31, column: 1, scope: !11087)
!11093 = distinct !DISubprogram(name: "VEC_int_heap_reserve_exact", scope: !1389, file: !1389, line: 32, type: !11094, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!11094 = !DISubroutineType(types: !11095)
!11095 = !{!865, !8798, !865}
!11096 = !DILocalVariable(name: "vec_", arg: 1, scope: !11093, file: !1389, line: 32, type: !8798)
!11097 = !DILocation(line: 32, column: 1, scope: !11093)
!11098 = !DILocalVariable(name: "alloc_", arg: 2, scope: !11093, file: !1389, line: 32, type: !865)
!11099 = !DILocalVariable(name: "extend", scope: !11093, file: !1389, line: 32, type: !865)
!11100 = !DILocation(line: 32, column: 1, scope: !11101)
!11101 = distinct !DILexicalBlock(scope: !11093, file: !1389, line: 32, column: 1)
!11102 = distinct !DISubprogram(name: "VEC_int_base_space", scope: !1389, file: !1389, line: 31, type: !11103, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!11103 = !DISubroutineType(types: !11104)
!11104 = !{!865, !11090, !865}
!11105 = !DILocalVariable(name: "vec_", arg: 1, scope: !11102, file: !1389, line: 31, type: !11090)
!11106 = !DILocation(line: 31, column: 1, scope: !11102)
!11107 = !DILocalVariable(name: "alloc_", arg: 2, scope: !11102, file: !1389, line: 31, type: !865)
!11108 = distinct !DISubprogram(name: "VEC_int_base_replace", scope: !1389, file: !1389, line: 31, type: !11109, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!11109 = !DISubroutineType(types: !11110)
!11110 = !{!865, !11090, !7, !865}
!11111 = !DILocalVariable(name: "vec_", arg: 1, scope: !11108, file: !1389, line: 31, type: !11090)
!11112 = !DILocation(line: 31, column: 1, scope: !11108)
!11113 = !DILocalVariable(name: "ix_", arg: 2, scope: !11108, file: !1389, line: 31, type: !7)
!11114 = !DILocalVariable(name: "obj_", arg: 3, scope: !11108, file: !1389, line: 31, type: !865)
!11115 = !DILocalVariable(name: "old_obj_", scope: !11108, file: !1389, line: 31, type: !865)
!11116 = distinct !DISubprogram(name: "VEC_haifa_insn_data_def_base_length", scope: !398, file: !398, line: 825, type: !11117, scopeLine: 825, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!11117 = !DISubroutineType(types: !11118)
!11118 = !{!7, !11119}
!11119 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11120, size: 64)
!11120 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2142)
!11121 = !DILocalVariable(name: "vec_", arg: 1, scope: !11116, file: !398, line: 825, type: !11119)
!11122 = !DILocation(line: 825, column: 1, scope: !11116)
!11123 = distinct !DISubprogram(name: "VEC_haifa_insn_data_def_base_space", scope: !398, file: !398, line: 825, type: !11124, scopeLine: 825, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!11124 = !DISubroutineType(types: !11125)
!11125 = !{!865, !2712, !865}
!11126 = !DILocalVariable(name: "vec_", arg: 1, scope: !11123, file: !398, line: 825, type: !2712)
!11127 = !DILocation(line: 825, column: 1, scope: !11123)
!11128 = !DILocalVariable(name: "alloc_", arg: 2, scope: !11123, file: !398, line: 825, type: !865)
!11129 = distinct !DISubprogram(name: "VEC_haifa_insn_data_def_heap_safe_grow_cleared", scope: !398, file: !398, line: 826, type: !11130, scopeLine: 826, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!11130 = !DISubroutineType(types: !11131)
!11131 = !{null, !8874, !865}
!11132 = !DILocalVariable(name: "vec_", arg: 1, scope: !11129, file: !398, line: 826, type: !8874)
!11133 = !DILocation(line: 826, column: 1, scope: !11129)
!11134 = !DILocalVariable(name: "size_", arg: 2, scope: !11129, file: !398, line: 826, type: !865)
!11135 = !DILocalVariable(name: "oldsize", scope: !11129, file: !398, line: 826, type: !865)
!11136 = distinct !DISubprogram(name: "VEC_haifa_insn_data_def_heap_safe_grow", scope: !398, file: !398, line: 826, type: !11130, scopeLine: 826, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!11137 = !DILocalVariable(name: "vec_", arg: 1, scope: !11136, file: !398, line: 826, type: !8874)
!11138 = !DILocation(line: 826, column: 1, scope: !11136)
!11139 = !DILocalVariable(name: "size_", arg: 2, scope: !11136, file: !398, line: 826, type: !865)
!11140 = !DILocation(line: 0, scope: !11136)
!11141 = distinct !DISubprogram(name: "VEC_haifa_insn_data_def_base_address", scope: !398, file: !398, line: 825, type: !11142, scopeLine: 825, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!11142 = !DISubroutineType(types: !11143)
!11143 = !{!2711, !2712}
!11144 = !DILocalVariable(name: "vec_", arg: 1, scope: !11141, file: !398, line: 825, type: !2712)
!11145 = !DILocation(line: 825, column: 1, scope: !11141)
!11146 = distinct !DISubprogram(name: "VEC_haifa_insn_data_def_heap_reserve_exact", scope: !398, file: !398, line: 826, type: !11147, scopeLine: 826, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2438)
!11147 = !DISubroutineType(types: !11148)
!11148 = !{!865, !8874, !865}
!11149 = !DILocalVariable(name: "vec_", arg: 1, scope: !11146, file: !398, line: 826, type: !8874)
!11150 = !DILocation(line: 826, column: 1, scope: !11146)
!11151 = !DILocalVariable(name: "alloc_", arg: 2, scope: !11146, file: !398, line: 826, type: !865)
!11152 = !DILocalVariable(name: "extend", scope: !11146, file: !398, line: 826, type: !865)
!11153 = !DILocation(line: 826, column: 1, scope: !11154)
!11154 = distinct !DILexicalBlock(scope: !11146, file: !398, line: 826, column: 1)
