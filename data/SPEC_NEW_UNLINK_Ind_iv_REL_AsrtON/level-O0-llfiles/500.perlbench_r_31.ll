; ModuleID = 'perl.c'
source_filename = "perl.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.cop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i8, i8, i32, %struct.hv*, %struct.gv*, i32, i32, i64*, %struct.refcounted_he* }
%struct.op = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i8, i8 }
%struct.hv = type { %struct.xpvhv*, i32, i32, %union.anon.5 }
%struct.xpvhv = type { %struct.hv*, %union._xmgu, i64, i64 }
%union._xmgu = type { %struct.magic* }
%struct.magic = type { %struct.magic*, %struct.mgvtbl*, i16, i8, i8, i64, %struct.sv*, i8* }
%struct.mgvtbl = type { i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*, %struct.sv*, i8*, i32)*, i32 (%struct.magic*, %struct.clone_params*)*, i32 (%struct.sv*, %struct.magic*)* }
%struct.clone_params = type { %struct.av*, i64, %struct.interpreter*, %struct.interpreter*, %struct.av* }
%struct.interpreter = type { i8 }
%struct.av = type { %struct.xpvav*, i32, i32, %union.anon.3 }
%struct.xpvav = type { %struct.hv*, %union._xmgu, i64, i64, %struct.sv** }
%union.anon.3 = type { i8* }
%struct.sv = type { i8*, i32, i32, %union.anon }
%union.anon = type { i8* }
%union.anon.5 = type { i8* }
%struct.gv = type { %struct.xpvgv*, i32, i32, %union.anon.4 }
%struct.xpvgv = type { %struct.hv*, %union._xmgu, i64, %union.anon.7, %union._xivu, %union._xnvu }
%union.anon.7 = type { i64 }
%union._xivu = type { i64 }
%union._xnvu = type { double }
%union.anon.4 = type { i8* }
%struct.refcounted_he = type { %struct.refcounted_he*, %struct.hek*, %union.anon.6, i32, [1 x i8] }
%struct.hek = type { i32, i32, [1 x i8] }
%union.anon.6 = type { i64 }
%struct.jmpenv = type { [1 x %struct.__jmp_buf_tag], %struct.jmpenv*, i32, i8 }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.perl_debug_pad = type { [3 x %struct.sv] }
%struct.cv = type { %struct.xpvcv*, i32, i32, %union.anon.2 }
%struct.xpvcv = type { %struct.hv*, %union._xmgu, i64, %union.anon.8, %struct.hv*, %union.anon.9, %union.anon.10, %union.anon.11, i8*, %union.anon.12, %struct.cv*, i32, i32, i32 }
%union.anon.8 = type { i64 }
%union.anon.9 = type { %struct.op* }
%union.anon.10 = type { %struct.op* }
%union.anon.11 = type { %struct.gv* }
%union.anon.12 = type { %struct.padlist* }
%struct.padlist = type { i64, %struct.av**, i32, i32 }
%union.anon.2 = type { i8* }
%struct.padnamelist = type { i64, %struct.padname**, i64, i64, i32 }
%struct.padname = type { i8*, %struct.hv*, %union.anon.17, i32, i32, i32, i32, i8, i8 }
%union.anon.17 = type { %struct.hv* }
%struct.exitlistentry = type { void (i8*)*, i8* }
%struct.yy_parser = type { %struct.yy_parser*, %union.YYSTYPE, i32, i32, i32, i32, %struct.yy_stack_frame*, %struct.yy_stack_frame*, i32, i32, i8*, i8*, i8, i8, i8, i8, i32, %struct.op*, %struct.op*, %struct.sv*, i16, i16, i32, %struct.sv*, i32, i32, i8, i8, i8, i8, i32, %struct._sublex_info, %struct.yy_lexshared*, %struct.sv*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i16, i8, i8, %struct.hv*, %struct._PerlIO**, %struct.av*, i8, [5 x %union.YYSTYPE], [5 x i32], i32, %struct.cop*, [256 x i8], i32, i32, i8, i8, i8 }
%union.YYSTYPE = type { i8* }
%struct.yy_stack_frame = type { %union.YYSTYPE, i16, i32, %struct.cv* }
%struct._sublex_info = type { i8, i16, %struct.op*, %struct.sv* }
%struct.yy_lexshared = type { %struct.yy_lexshared*, %struct.sv*, i8*, i8*, %struct.sv* }
%struct._PerlIO = type opaque
%struct.stackinfo = type { %struct.av*, %struct.context*, %struct.stackinfo*, %struct.stackinfo*, i32, i32, i32, i32 }
%struct.context = type { %union.anon.18 }
%union.anon.18 = type { %struct.subst }
%struct.subst = type { i8, i8, i16, i32, i64, i64, i8*, %struct.sv*, %struct.sv*, i8*, i8*, i8*, i8*, %struct.p5rx* }
%struct.p5rx = type { %struct.regexp*, i32, i32, %union.anon.16 }
%struct.regexp = type { %struct.hv*, %union._xmgu, i64, %union.anon.15, %struct.regexp_engine*, %struct.p5rx*, %struct.hv*, i32, i64, i64, i64, %struct.reg_substr_data*, i32, i32, i8*, i32, i32, %struct.regexp_paren_pair*, i8*, %struct.sv*, i64, i64, i64, i64, i16, %struct.cv* }
%union.anon.15 = type { i64 }
%struct.regexp_engine = type { %struct.p5rx* (%struct.sv*, i32)*, i32 (%struct.p5rx*, i8*, i8*, i8*, i64, %struct.sv*, i8*, i32)*, i8* (%struct.p5rx*, %struct.sv*, i8*, i8*, i8*, i32, %struct.re_scream_pos_data_s*)*, %struct.sv* (%struct.p5rx*)*, void (%struct.p5rx*)*, void (%struct.p5rx*, i32, %struct.sv*)*, void (%struct.p5rx*, i32, %struct.sv*)*, i32 (%struct.p5rx*, %struct.sv*, i32)*, %struct.sv* (%struct.p5rx*, %struct.sv*, %struct.sv*, i32)*, %struct.sv* (%struct.p5rx*, %struct.sv*, i32)*, %struct.sv* (%struct.p5rx*)*, %struct.p5rx* (%struct.sv**, i32, %struct.op*, %struct.regexp_engine*, %struct.p5rx*, i8*, i32, i32)* }
%struct.re_scream_pos_data_s = type { i8**, i64* }
%struct.reg_substr_data = type { i8, [3 x %struct.reg_substr_datum] }
%struct.reg_substr_datum = type { i64, i64, %struct.sv*, %struct.sv*, i64 }
%struct.regexp_paren_pair = type { i64, i64, i64 }
%union.anon.16 = type { i8* }
%struct.pmop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i8, i8, %struct.op*, %struct.op*, %struct.p5rx*, i32, %union.anon.19, %union.anon.20, %struct.op* }
%union.anon.19 = type { %struct.op* }
%union.anon.20 = type { %struct.op* }
%struct.regmatch_slab = type { [33 x %struct.regmatch_state], %struct.regmatch_slab*, %struct.regmatch_slab* }
%struct.regmatch_state = type { i32, i8*, %union.anon.27 }
%union.anon.27 = type { %struct.anon.39 }
%struct.anon.39 = type { i32, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, %struct.regnode*, %struct.regnode*, [14 x i8], [14 x i8] }
%struct.regnode = type { i8, i8, i16 }
%union.any = type { i8* }
%struct.PerlIO_list_s = type opaque
%struct.he = type { %struct.he*, %struct.hek*, %union.anon.0 }
%union.anon.0 = type { %struct.sv* }
%struct.xpvmg = type { %struct.hv*, %union._xmgu, i64, %union.anon.40, %union._xivu, %union._xnvu }
%union.anon.40 = type { i64 }
%struct.xpv = type { %struct.hv*, %union._xmgu, i64, %union.anon.41 }
%union.anon.41 = type { i64 }
%struct.gp = type { %struct.sv*, %struct.io*, %struct.cv*, i32, i32, %struct.hv*, %struct.av*, %struct.cv*, %struct.gv*, i32, %struct.hek* }
%struct.io = type { %struct.xpvio*, i32, i32, %union.anon.1 }
%struct.xpvio = type { %struct.hv*, %union._xmgu, i64, %union.anon.13, %union._xivu, %struct._PerlIO**, %union.anon.14, i64, i64, i64, i8*, %struct.gv*, i8*, %struct.gv*, i8*, %struct.gv*, i8, i8 }
%union.anon.13 = type { i64 }
%union.anon.14 = type { %struct.__dirstream* }
%struct.__dirstream = type opaque
%union.anon.1 = type { i8* }
%struct.logop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i8, i8, %struct.op*, %struct.op* }
%struct.methop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i8, i8, %union.anon.42, %struct.sv* }
%union.anon.42 = type { %struct.op* }
%struct.unop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i8, i8, %struct.op* }
%struct.xpviv = type { %struct.hv*, %union._xmgu, i64, %union.anon.43, %union._xivu }
%union.anon.43 = type { i64 }
%struct.xpvnv = type { %struct.hv*, %union._xmgu, i64, %union.anon.44, %union._xivu, %union._xnvu }
%union.anon.44 = type { i64 }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i64 }

@PL_sigfpe_saved = external dso_local global void (i32)*, align 8
@PL_veto_cleanup = external dso_local global i32, align 4
@PL_perl_destruct_level = external dso_local global i8, align 1
@PL_compiling = external dso_local global %struct.cop, align 8
@PL_curcop = external dso_local global %struct.cop*, align 8
@PL_sv_placeholder = external dso_local global %struct.sv, align 8
@PL_sighandlerp = external dso_local global void (i32)*, align 8
@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@PL_rs = external dso_local global %struct.sv*, align 8
@PL_start_env = external dso_local global %struct.jmpenv, align 8
@PL_top_env = external dso_local global %struct.jmpenv*, align 8
@PL_statusvalue = external dso_local global i32, align 4
@PL_statusvalue_posix = external dso_local global i32, align 4
@local_patches = internal constant [2 x i8*] zeroinitializer, align 16
@PL_localpatches = external dso_local global i8**, align 8
@PL_fdpid = external dso_local global %struct.av*, align 8
@PL_modglobal = external dso_local global %struct.hv*, align 8
@.str.1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@PL_errors = external dso_local global %struct.sv*, align 8
@PL_debug_pad = external dso_local global %struct.perl_debug_pad, align 8
@PL_hash_seed_set = external dso_local global i8, align 1
@PL_hash_seed = external dso_local global [8 x i8], align 1
@PL_strtab = external dso_local global %struct.hv*, align 8
@PL_sv_consts = external dso_local global [35 x %struct.sv*], align 16
@environ = external dso_local global i8**, align 8
@PL_origenviron = external dso_local global i8**, align 8
@PL_clocktick = external dso_local global i64, align 8
@PL_stashcache = external dso_local global %struct.hv*, align 8
@.str.2 = private unnamed_addr constant [8 x i8] c"v5.22.1\00", align 1
@PL_patchlevel = external dso_local global %struct.sv*, align 8
@.str.3 = private unnamed_addr constant [9 x i8] c"spec-cpu\00", align 1
@PL_osname = external dso_local global i8*, align 8
@PL_registered_mros = external dso_local global %struct.hv*, align 8
@ASCII_invlist = internal constant [5 x i64] [i64 2, i64 148565664, i64 0, i64 0, i64 128], align 16
@PL_XPosix_ptrs = external dso_local global [16 x %struct.sv*], align 16
@XPosixAlnum_invlist = internal constant [1264 x i64] [i64 1261, i64 148565664, i64 1, i64 0, i64 48, i64 58, i64 65, i64 91, i64 97, i64 123, i64 170, i64 171, i64 181, i64 182, i64 186, i64 187, i64 192, i64 215, i64 216, i64 247, i64 248, i64 706, i64 710, i64 722, i64 736, i64 741, i64 748, i64 749, i64 750, i64 751, i64 837, i64 838, i64 880, i64 885, i64 886, i64 888, i64 890, i64 894, i64 895, i64 896, i64 902, i64 903, i64 904, i64 907, i64 908, i64 909, i64 910, i64 930, i64 931, i64 1014, i64 1015, i64 1154, i64 1162, i64 1328, i64 1329, i64 1367, i64 1369, i64 1370, i64 1377, i64 1416, i64 1456, i64 1470, i64 1471, i64 1472, i64 1473, i64 1475, i64 1476, i64 1478, i64 1479, i64 1480, i64 1488, i64 1515, i64 1520, i64 1523, i64 1552, i64 1563, i64 1568, i64 1624, i64 1625, i64 1642, i64 1646, i64 1748, i64 1749, i64 1757, i64 1761, i64 1769, i64 1773, i64 1789, i64 1791, i64 1792, i64 1808, i64 1856, i64 1869, i64 1970, i64 1984, i64 2027, i64 2036, i64 2038, i64 2042, i64 2043, i64 2048, i64 2072, i64 2074, i64 2093, i64 2112, i64 2137, i64 2208, i64 2227, i64 2276, i64 2282, i64 2288, i64 2364, i64 2365, i64 2381, i64 2382, i64 2385, i64 2389, i64 2404, i64 2406, i64 2416, i64 2417, i64 2436, i64 2437, i64 2445, i64 2447, i64 2449, i64 2451, i64 2473, i64 2474, i64 2481, i64 2482, i64 2483, i64 2486, i64 2490, i64 2493, i64 2501, i64 2503, i64 2505, i64 2507, i64 2509, i64 2510, i64 2511, i64 2519, i64 2520, i64 2524, i64 2526, i64 2527, i64 2532, i64 2534, i64 2546, i64 2561, i64 2564, i64 2565, i64 2571, i64 2575, i64 2577, i64 2579, i64 2601, i64 2602, i64 2609, i64 2610, i64 2612, i64 2613, i64 2615, i64 2616, i64 2618, i64 2622, i64 2627, i64 2631, i64 2633, i64 2635, i64 2637, i64 2641, i64 2642, i64 2649, i64 2653, i64 2654, i64 2655, i64 2662, i64 2678, i64 2689, i64 2692, i64 2693, i64 2702, i64 2703, i64 2706, i64 2707, i64 2729, i64 2730, i64 2737, i64 2738, i64 2740, i64 2741, i64 2746, i64 2749, i64 2758, i64 2759, i64 2762, i64 2763, i64 2765, i64 2768, i64 2769, i64 2784, i64 2788, i64 2790, i64 2800, i64 2817, i64 2820, i64 2821, i64 2829, i64 2831, i64 2833, i64 2835, i64 2857, i64 2858, i64 2865, i64 2866, i64 2868, i64 2869, i64 2874, i64 2877, i64 2885, i64 2887, i64 2889, i64 2891, i64 2893, i64 2902, i64 2904, i64 2908, i64 2910, i64 2911, i64 2916, i64 2918, i64 2928, i64 2929, i64 2930, i64 2946, i64 2948, i64 2949, i64 2955, i64 2958, i64 2961, i64 2962, i64 2966, i64 2969, i64 2971, i64 2972, i64 2973, i64 2974, i64 2976, i64 2979, i64 2981, i64 2984, i64 2987, i64 2990, i64 3002, i64 3006, i64 3011, i64 3014, i64 3017, i64 3018, i64 3021, i64 3024, i64 3025, i64 3031, i64 3032, i64 3046, i64 3056, i64 3072, i64 3076, i64 3077, i64 3085, i64 3086, i64 3089, i64 3090, i64 3113, i64 3114, i64 3130, i64 3133, i64 3141, i64 3142, i64 3145, i64 3146, i64 3149, i64 3157, i64 3159, i64 3160, i64 3162, i64 3168, i64 3172, i64 3174, i64 3184, i64 3201, i64 3204, i64 3205, i64 3213, i64 3214, i64 3217, i64 3218, i64 3241, i64 3242, i64 3252, i64 3253, i64 3258, i64 3261, i64 3269, i64 3270, i64 3273, i64 3274, i64 3277, i64 3285, i64 3287, i64 3294, i64 3295, i64 3296, i64 3300, i64 3302, i64 3312, i64 3313, i64 3315, i64 3329, i64 3332, i64 3333, i64 3341, i64 3342, i64 3345, i64 3346, i64 3387, i64 3389, i64 3397, i64 3398, i64 3401, i64 3402, i64 3405, i64 3406, i64 3407, i64 3415, i64 3416, i64 3424, i64 3428, i64 3430, i64 3440, i64 3450, i64 3456, i64 3458, i64 3460, i64 3461, i64 3479, i64 3482, i64 3506, i64 3507, i64 3516, i64 3517, i64 3518, i64 3520, i64 3527, i64 3535, i64 3541, i64 3542, i64 3543, i64 3544, i64 3552, i64 3558, i64 3568, i64 3570, i64 3572, i64 3585, i64 3643, i64 3648, i64 3655, i64 3661, i64 3662, i64 3664, i64 3674, i64 3713, i64 3715, i64 3716, i64 3717, i64 3719, i64 3721, i64 3722, i64 3723, i64 3725, i64 3726, i64 3732, i64 3736, i64 3737, i64 3744, i64 3745, i64 3748, i64 3749, i64 3750, i64 3751, i64 3752, i64 3754, i64 3756, i64 3757, i64 3770, i64 3771, i64 3774, i64 3776, i64 3781, i64 3782, i64 3783, i64 3789, i64 3790, i64 3792, i64 3802, i64 3804, i64 3808, i64 3840, i64 3841, i64 3872, i64 3882, i64 3904, i64 3912, i64 3913, i64 3949, i64 3953, i64 3970, i64 3976, i64 3992, i64 3993, i64 4029, i64 4096, i64 4151, i64 4152, i64 4153, i64 4155, i64 4170, i64 4176, i64 4195, i64 4197, i64 4201, i64 4206, i64 4231, i64 4238, i64 4239, i64 4240, i64 4250, i64 4252, i64 4254, i64 4256, i64 4294, i64 4295, i64 4296, i64 4301, i64 4302, i64 4304, i64 4347, i64 4348, i64 4681, i64 4682, i64 4686, i64 4688, i64 4695, i64 4696, i64 4697, i64 4698, i64 4702, i64 4704, i64 4745, i64 4746, i64 4750, i64 4752, i64 4785, i64 4786, i64 4790, i64 4792, i64 4799, i64 4800, i64 4801, i64 4802, i64 4806, i64 4808, i64 4823, i64 4824, i64 4881, i64 4882, i64 4886, i64 4888, i64 4955, i64 4959, i64 4960, i64 4992, i64 5008, i64 5024, i64 5109, i64 5121, i64 5741, i64 5743, i64 5760, i64 5761, i64 5787, i64 5792, i64 5867, i64 5870, i64 5881, i64 5888, i64 5901, i64 5902, i64 5908, i64 5920, i64 5940, i64 5952, i64 5972, i64 5984, i64 5997, i64 5998, i64 6001, i64 6002, i64 6004, i64 6016, i64 6068, i64 6070, i64 6089, i64 6103, i64 6104, i64 6108, i64 6109, i64 6112, i64 6122, i64 6160, i64 6170, i64 6176, i64 6264, i64 6272, i64 6315, i64 6320, i64 6390, i64 6400, i64 6431, i64 6432, i64 6444, i64 6448, i64 6457, i64 6470, i64 6510, i64 6512, i64 6517, i64 6528, i64 6572, i64 6576, i64 6602, i64 6608, i64 6618, i64 6656, i64 6684, i64 6688, i64 6751, i64 6753, i64 6773, i64 6784, i64 6794, i64 6800, i64 6810, i64 6823, i64 6824, i64 6912, i64 6964, i64 6965, i64 6980, i64 6981, i64 6988, i64 6992, i64 7002, i64 7040, i64 7082, i64 7084, i64 7142, i64 7143, i64 7154, i64 7168, i64 7222, i64 7232, i64 7242, i64 7245, i64 7294, i64 7401, i64 7405, i64 7406, i64 7412, i64 7413, i64 7415, i64 7424, i64 7616, i64 7655, i64 7669, i64 7680, i64 7958, i64 7960, i64 7966, i64 7968, i64 8006, i64 8008, i64 8014, i64 8016, i64 8024, i64 8025, i64 8026, i64 8027, i64 8028, i64 8029, i64 8030, i64 8031, i64 8062, i64 8064, i64 8117, i64 8118, i64 8125, i64 8126, i64 8127, i64 8130, i64 8133, i64 8134, i64 8141, i64 8144, i64 8148, i64 8150, i64 8156, i64 8160, i64 8173, i64 8178, i64 8181, i64 8182, i64 8189, i64 8305, i64 8306, i64 8319, i64 8320, i64 8336, i64 8349, i64 8450, i64 8451, i64 8455, i64 8456, i64 8458, i64 8468, i64 8469, i64 8470, i64 8473, i64 8478, i64 8484, i64 8485, i64 8486, i64 8487, i64 8488, i64 8489, i64 8490, i64 8494, i64 8495, i64 8506, i64 8508, i64 8512, i64 8517, i64 8522, i64 8526, i64 8527, i64 8544, i64 8585, i64 9398, i64 9450, i64 11264, i64 11311, i64 11312, i64 11359, i64 11360, i64 11493, i64 11499, i64 11503, i64 11506, i64 11508, i64 11520, i64 11558, i64 11559, i64 11560, i64 11565, i64 11566, i64 11568, i64 11624, i64 11631, i64 11632, i64 11648, i64 11671, i64 11680, i64 11687, i64 11688, i64 11695, i64 11696, i64 11703, i64 11704, i64 11711, i64 11712, i64 11719, i64 11720, i64 11727, i64 11728, i64 11735, i64 11736, i64 11743, i64 11744, i64 11776, i64 11823, i64 11824, i64 12293, i64 12296, i64 12321, i64 12330, i64 12337, i64 12342, i64 12344, i64 12349, i64 12353, i64 12439, i64 12445, i64 12448, i64 12449, i64 12539, i64 12540, i64 12544, i64 12549, i64 12590, i64 12593, i64 12687, i64 12704, i64 12731, i64 12784, i64 12800, i64 13312, i64 19894, i64 19968, i64 40909, i64 40960, i64 42125, i64 42192, i64 42238, i64 42240, i64 42509, i64 42512, i64 42540, i64 42560, i64 42607, i64 42612, i64 42620, i64 42623, i64 42654, i64 42655, i64 42736, i64 42775, i64 42784, i64 42786, i64 42889, i64 42891, i64 42895, i64 42896, i64 42926, i64 42928, i64 42930, i64 42999, i64 43010, i64 43011, i64 43014, i64 43015, i64 43019, i64 43020, i64 43048, i64 43072, i64 43124, i64 43136, i64 43204, i64 43216, i64 43226, i64 43250, i64 43256, i64 43259, i64 43260, i64 43264, i64 43307, i64 43312, i64 43347, i64 43360, i64 43389, i64 43392, i64 43443, i64 43444, i64 43456, i64 43471, i64 43482, i64 43488, i64 43493, i64 43494, i64 43519, i64 43520, i64 43575, i64 43584, i64 43598, i64 43600, i64 43610, i64 43616, i64 43639, i64 43642, i64 43643, i64 43646, i64 43711, i64 43712, i64 43713, i64 43714, i64 43715, i64 43739, i64 43742, i64 43744, i64 43760, i64 43762, i64 43766, i64 43777, i64 43783, i64 43785, i64 43791, i64 43793, i64 43799, i64 43808, i64 43815, i64 43816, i64 43823, i64 43824, i64 43867, i64 43868, i64 43872, i64 43876, i64 43878, i64 43968, i64 44011, i64 44016, i64 44026, i64 44032, i64 55204, i64 55216, i64 55239, i64 55243, i64 55292, i64 63744, i64 64110, i64 64112, i64 64218, i64 64256, i64 64263, i64 64275, i64 64280, i64 64285, i64 64297, i64 64298, i64 64311, i64 64312, i64 64317, i64 64318, i64 64319, i64 64320, i64 64322, i64 64323, i64 64325, i64 64326, i64 64434, i64 64467, i64 64830, i64 64848, i64 64912, i64 64914, i64 64968, i64 65008, i64 65020, i64 65136, i64 65141, i64 65142, i64 65277, i64 65296, i64 65306, i64 65313, i64 65339, i64 65345, i64 65371, i64 65382, i64 65471, i64 65474, i64 65480, i64 65482, i64 65488, i64 65490, i64 65496, i64 65498, i64 65501, i64 65536, i64 65548, i64 65549, i64 65575, i64 65576, i64 65595, i64 65596, i64 65598, i64 65599, i64 65614, i64 65616, i64 65630, i64 65664, i64 65787, i64 65856, i64 65909, i64 66176, i64 66205, i64 66208, i64 66257, i64 66304, i64 66336, i64 66352, i64 66379, i64 66384, i64 66427, i64 66432, i64 66462, i64 66464, i64 66500, i64 66504, i64 66512, i64 66513, i64 66518, i64 66560, i64 66718, i64 66720, i64 66730, i64 66816, i64 66856, i64 66864, i64 66916, i64 67072, i64 67383, i64 67392, i64 67414, i64 67424, i64 67432, i64 67584, i64 67590, i64 67592, i64 67593, i64 67594, i64 67638, i64 67639, i64 67641, i64 67644, i64 67645, i64 67647, i64 67670, i64 67680, i64 67703, i64 67712, i64 67743, i64 67840, i64 67862, i64 67872, i64 67898, i64 67968, i64 68024, i64 68030, i64 68032, i64 68096, i64 68100, i64 68101, i64 68103, i64 68108, i64 68116, i64 68117, i64 68120, i64 68121, i64 68148, i64 68192, i64 68221, i64 68224, i64 68253, i64 68288, i64 68296, i64 68297, i64 68325, i64 68352, i64 68406, i64 68416, i64 68438, i64 68448, i64 68467, i64 68480, i64 68498, i64 68608, i64 68681, i64 69632, i64 69702, i64 69734, i64 69744, i64 69762, i64 69817, i64 69840, i64 69865, i64 69872, i64 69882, i64 69888, i64 69939, i64 69942, i64 69952, i64 69968, i64 70003, i64 70006, i64 70007, i64 70016, i64 70080, i64 70081, i64 70085, i64 70096, i64 70107, i64 70144, i64 70162, i64 70163, i64 70197, i64 70199, i64 70200, i64 70320, i64 70377, i64 70384, i64 70394, i64 70401, i64 70404, i64 70405, i64 70413, i64 70415, i64 70417, i64 70419, i64 70441, i64 70442, i64 70449, i64 70450, i64 70452, i64 70453, i64 70458, i64 70461, i64 70469, i64 70471, i64 70473, i64 70475, i64 70477, i64 70487, i64 70488, i64 70493, i64 70500, i64 70784, i64 70850, i64 70852, i64 70854, i64 70855, i64 70856, i64 70864, i64 70874, i64 71040, i64 71094, i64 71096, i64 71103, i64 71168, i64 71231, i64 71232, i64 71233, i64 71236, i64 71237, i64 71248, i64 71258, i64 71296, i64 71350, i64 71360, i64 71370, i64 71840, i64 71914, i64 71935, i64 71936, i64 72384, i64 72441, i64 73728, i64 74649, i64 74752, i64 74863, i64 77824, i64 78895, i64 92160, i64 92729, i64 92736, i64 92767, i64 92768, i64 92778, i64 92880, i64 92910, i64 92928, i64 92983, i64 92992, i64 92996, i64 93008, i64 93018, i64 93027, i64 93048, i64 93053, i64 93072, i64 93952, i64 94021, i64 94032, i64 94079, i64 94099, i64 94112, i64 110592, i64 110594, i64 113664, i64 113771, i64 113776, i64 113789, i64 113792, i64 113801, i64 113808, i64 113818, i64 113822, i64 113823, i64 119808, i64 119893, i64 119894, i64 119965, i64 119966, i64 119968, i64 119970, i64 119971, i64 119973, i64 119975, i64 119977, i64 119981, i64 119982, i64 119994, i64 119995, i64 119996, i64 119997, i64 120004, i64 120005, i64 120070, i64 120071, i64 120075, i64 120077, i64 120085, i64 120086, i64 120093, i64 120094, i64 120122, i64 120123, i64 120127, i64 120128, i64 120133, i64 120134, i64 120135, i64 120138, i64 120145, i64 120146, i64 120486, i64 120488, i64 120513, i64 120514, i64 120539, i64 120540, i64 120571, i64 120572, i64 120597, i64 120598, i64 120629, i64 120630, i64 120655, i64 120656, i64 120687, i64 120688, i64 120713, i64 120714, i64 120745, i64 120746, i64 120771, i64 120772, i64 120780, i64 120782, i64 120832, i64 124928, i64 125125, i64 126464, i64 126468, i64 126469, i64 126496, i64 126497, i64 126499, i64 126500, i64 126501, i64 126503, i64 126504, i64 126505, i64 126515, i64 126516, i64 126520, i64 126521, i64 126522, i64 126523, i64 126524, i64 126530, i64 126531, i64 126535, i64 126536, i64 126537, i64 126538, i64 126539, i64 126540, i64 126541, i64 126544, i64 126545, i64 126547, i64 126548, i64 126549, i64 126551, i64 126552, i64 126553, i64 126554, i64 126555, i64 126556, i64 126557, i64 126558, i64 126559, i64 126560, i64 126561, i64 126563, i64 126564, i64 126565, i64 126567, i64 126571, i64 126572, i64 126579, i64 126580, i64 126584, i64 126585, i64 126589, i64 126590, i64 126591, i64 126592, i64 126602, i64 126603, i64 126620, i64 126625, i64 126628, i64 126629, i64 126634, i64 126635, i64 126652, i64 127280, i64 127306, i64 127312, i64 127338, i64 127344, i64 127370, i64 131072, i64 173783, i64 173824, i64 177973, i64 177984, i64 178206, i64 194560, i64 195102], align 16
@XPosixAlpha_invlist = internal constant [1204 x i64] [i64 1201, i64 148565664, i64 1, i64 0, i64 65, i64 91, i64 97, i64 123, i64 170, i64 171, i64 181, i64 182, i64 186, i64 187, i64 192, i64 215, i64 216, i64 247, i64 248, i64 706, i64 710, i64 722, i64 736, i64 741, i64 748, i64 749, i64 750, i64 751, i64 837, i64 838, i64 880, i64 885, i64 886, i64 888, i64 890, i64 894, i64 895, i64 896, i64 902, i64 903, i64 904, i64 907, i64 908, i64 909, i64 910, i64 930, i64 931, i64 1014, i64 1015, i64 1154, i64 1162, i64 1328, i64 1329, i64 1367, i64 1369, i64 1370, i64 1377, i64 1416, i64 1456, i64 1470, i64 1471, i64 1472, i64 1473, i64 1475, i64 1476, i64 1478, i64 1479, i64 1480, i64 1488, i64 1515, i64 1520, i64 1523, i64 1552, i64 1563, i64 1568, i64 1624, i64 1625, i64 1632, i64 1646, i64 1748, i64 1749, i64 1757, i64 1761, i64 1769, i64 1773, i64 1776, i64 1786, i64 1789, i64 1791, i64 1792, i64 1808, i64 1856, i64 1869, i64 1970, i64 1994, i64 2027, i64 2036, i64 2038, i64 2042, i64 2043, i64 2048, i64 2072, i64 2074, i64 2093, i64 2112, i64 2137, i64 2208, i64 2227, i64 2276, i64 2282, i64 2288, i64 2364, i64 2365, i64 2381, i64 2382, i64 2385, i64 2389, i64 2404, i64 2417, i64 2436, i64 2437, i64 2445, i64 2447, i64 2449, i64 2451, i64 2473, i64 2474, i64 2481, i64 2482, i64 2483, i64 2486, i64 2490, i64 2493, i64 2501, i64 2503, i64 2505, i64 2507, i64 2509, i64 2510, i64 2511, i64 2519, i64 2520, i64 2524, i64 2526, i64 2527, i64 2532, i64 2544, i64 2546, i64 2561, i64 2564, i64 2565, i64 2571, i64 2575, i64 2577, i64 2579, i64 2601, i64 2602, i64 2609, i64 2610, i64 2612, i64 2613, i64 2615, i64 2616, i64 2618, i64 2622, i64 2627, i64 2631, i64 2633, i64 2635, i64 2637, i64 2641, i64 2642, i64 2649, i64 2653, i64 2654, i64 2655, i64 2672, i64 2678, i64 2689, i64 2692, i64 2693, i64 2702, i64 2703, i64 2706, i64 2707, i64 2729, i64 2730, i64 2737, i64 2738, i64 2740, i64 2741, i64 2746, i64 2749, i64 2758, i64 2759, i64 2762, i64 2763, i64 2765, i64 2768, i64 2769, i64 2784, i64 2788, i64 2817, i64 2820, i64 2821, i64 2829, i64 2831, i64 2833, i64 2835, i64 2857, i64 2858, i64 2865, i64 2866, i64 2868, i64 2869, i64 2874, i64 2877, i64 2885, i64 2887, i64 2889, i64 2891, i64 2893, i64 2902, i64 2904, i64 2908, i64 2910, i64 2911, i64 2916, i64 2929, i64 2930, i64 2946, i64 2948, i64 2949, i64 2955, i64 2958, i64 2961, i64 2962, i64 2966, i64 2969, i64 2971, i64 2972, i64 2973, i64 2974, i64 2976, i64 2979, i64 2981, i64 2984, i64 2987, i64 2990, i64 3002, i64 3006, i64 3011, i64 3014, i64 3017, i64 3018, i64 3021, i64 3024, i64 3025, i64 3031, i64 3032, i64 3072, i64 3076, i64 3077, i64 3085, i64 3086, i64 3089, i64 3090, i64 3113, i64 3114, i64 3130, i64 3133, i64 3141, i64 3142, i64 3145, i64 3146, i64 3149, i64 3157, i64 3159, i64 3160, i64 3162, i64 3168, i64 3172, i64 3201, i64 3204, i64 3205, i64 3213, i64 3214, i64 3217, i64 3218, i64 3241, i64 3242, i64 3252, i64 3253, i64 3258, i64 3261, i64 3269, i64 3270, i64 3273, i64 3274, i64 3277, i64 3285, i64 3287, i64 3294, i64 3295, i64 3296, i64 3300, i64 3313, i64 3315, i64 3329, i64 3332, i64 3333, i64 3341, i64 3342, i64 3345, i64 3346, i64 3387, i64 3389, i64 3397, i64 3398, i64 3401, i64 3402, i64 3405, i64 3406, i64 3407, i64 3415, i64 3416, i64 3424, i64 3428, i64 3450, i64 3456, i64 3458, i64 3460, i64 3461, i64 3479, i64 3482, i64 3506, i64 3507, i64 3516, i64 3517, i64 3518, i64 3520, i64 3527, i64 3535, i64 3541, i64 3542, i64 3543, i64 3544, i64 3552, i64 3570, i64 3572, i64 3585, i64 3643, i64 3648, i64 3655, i64 3661, i64 3662, i64 3713, i64 3715, i64 3716, i64 3717, i64 3719, i64 3721, i64 3722, i64 3723, i64 3725, i64 3726, i64 3732, i64 3736, i64 3737, i64 3744, i64 3745, i64 3748, i64 3749, i64 3750, i64 3751, i64 3752, i64 3754, i64 3756, i64 3757, i64 3770, i64 3771, i64 3774, i64 3776, i64 3781, i64 3782, i64 3783, i64 3789, i64 3790, i64 3804, i64 3808, i64 3840, i64 3841, i64 3904, i64 3912, i64 3913, i64 3949, i64 3953, i64 3970, i64 3976, i64 3992, i64 3993, i64 4029, i64 4096, i64 4151, i64 4152, i64 4153, i64 4155, i64 4160, i64 4176, i64 4195, i64 4197, i64 4201, i64 4206, i64 4231, i64 4238, i64 4239, i64 4252, i64 4254, i64 4256, i64 4294, i64 4295, i64 4296, i64 4301, i64 4302, i64 4304, i64 4347, i64 4348, i64 4681, i64 4682, i64 4686, i64 4688, i64 4695, i64 4696, i64 4697, i64 4698, i64 4702, i64 4704, i64 4745, i64 4746, i64 4750, i64 4752, i64 4785, i64 4786, i64 4790, i64 4792, i64 4799, i64 4800, i64 4801, i64 4802, i64 4806, i64 4808, i64 4823, i64 4824, i64 4881, i64 4882, i64 4886, i64 4888, i64 4955, i64 4959, i64 4960, i64 4992, i64 5008, i64 5024, i64 5109, i64 5121, i64 5741, i64 5743, i64 5760, i64 5761, i64 5787, i64 5792, i64 5867, i64 5870, i64 5881, i64 5888, i64 5901, i64 5902, i64 5908, i64 5920, i64 5940, i64 5952, i64 5972, i64 5984, i64 5997, i64 5998, i64 6001, i64 6002, i64 6004, i64 6016, i64 6068, i64 6070, i64 6089, i64 6103, i64 6104, i64 6108, i64 6109, i64 6176, i64 6264, i64 6272, i64 6315, i64 6320, i64 6390, i64 6400, i64 6431, i64 6432, i64 6444, i64 6448, i64 6457, i64 6480, i64 6510, i64 6512, i64 6517, i64 6528, i64 6572, i64 6576, i64 6602, i64 6656, i64 6684, i64 6688, i64 6751, i64 6753, i64 6773, i64 6823, i64 6824, i64 6912, i64 6964, i64 6965, i64 6980, i64 6981, i64 6988, i64 7040, i64 7082, i64 7084, i64 7088, i64 7098, i64 7142, i64 7143, i64 7154, i64 7168, i64 7222, i64 7245, i64 7248, i64 7258, i64 7294, i64 7401, i64 7405, i64 7406, i64 7412, i64 7413, i64 7415, i64 7424, i64 7616, i64 7655, i64 7669, i64 7680, i64 7958, i64 7960, i64 7966, i64 7968, i64 8006, i64 8008, i64 8014, i64 8016, i64 8024, i64 8025, i64 8026, i64 8027, i64 8028, i64 8029, i64 8030, i64 8031, i64 8062, i64 8064, i64 8117, i64 8118, i64 8125, i64 8126, i64 8127, i64 8130, i64 8133, i64 8134, i64 8141, i64 8144, i64 8148, i64 8150, i64 8156, i64 8160, i64 8173, i64 8178, i64 8181, i64 8182, i64 8189, i64 8305, i64 8306, i64 8319, i64 8320, i64 8336, i64 8349, i64 8450, i64 8451, i64 8455, i64 8456, i64 8458, i64 8468, i64 8469, i64 8470, i64 8473, i64 8478, i64 8484, i64 8485, i64 8486, i64 8487, i64 8488, i64 8489, i64 8490, i64 8494, i64 8495, i64 8506, i64 8508, i64 8512, i64 8517, i64 8522, i64 8526, i64 8527, i64 8544, i64 8585, i64 9398, i64 9450, i64 11264, i64 11311, i64 11312, i64 11359, i64 11360, i64 11493, i64 11499, i64 11503, i64 11506, i64 11508, i64 11520, i64 11558, i64 11559, i64 11560, i64 11565, i64 11566, i64 11568, i64 11624, i64 11631, i64 11632, i64 11648, i64 11671, i64 11680, i64 11687, i64 11688, i64 11695, i64 11696, i64 11703, i64 11704, i64 11711, i64 11712, i64 11719, i64 11720, i64 11727, i64 11728, i64 11735, i64 11736, i64 11743, i64 11744, i64 11776, i64 11823, i64 11824, i64 12293, i64 12296, i64 12321, i64 12330, i64 12337, i64 12342, i64 12344, i64 12349, i64 12353, i64 12439, i64 12445, i64 12448, i64 12449, i64 12539, i64 12540, i64 12544, i64 12549, i64 12590, i64 12593, i64 12687, i64 12704, i64 12731, i64 12784, i64 12800, i64 13312, i64 19894, i64 19968, i64 40909, i64 40960, i64 42125, i64 42192, i64 42238, i64 42240, i64 42509, i64 42512, i64 42528, i64 42538, i64 42540, i64 42560, i64 42607, i64 42612, i64 42620, i64 42623, i64 42654, i64 42655, i64 42736, i64 42775, i64 42784, i64 42786, i64 42889, i64 42891, i64 42895, i64 42896, i64 42926, i64 42928, i64 42930, i64 42999, i64 43010, i64 43011, i64 43014, i64 43015, i64 43019, i64 43020, i64 43048, i64 43072, i64 43124, i64 43136, i64 43204, i64 43250, i64 43256, i64 43259, i64 43260, i64 43274, i64 43307, i64 43312, i64 43347, i64 43360, i64 43389, i64 43392, i64 43443, i64 43444, i64 43456, i64 43471, i64 43472, i64 43488, i64 43493, i64 43494, i64 43504, i64 43514, i64 43519, i64 43520, i64 43575, i64 43584, i64 43598, i64 43616, i64 43639, i64 43642, i64 43643, i64 43646, i64 43711, i64 43712, i64 43713, i64 43714, i64 43715, i64 43739, i64 43742, i64 43744, i64 43760, i64 43762, i64 43766, i64 43777, i64 43783, i64 43785, i64 43791, i64 43793, i64 43799, i64 43808, i64 43815, i64 43816, i64 43823, i64 43824, i64 43867, i64 43868, i64 43872, i64 43876, i64 43878, i64 43968, i64 44011, i64 44032, i64 55204, i64 55216, i64 55239, i64 55243, i64 55292, i64 63744, i64 64110, i64 64112, i64 64218, i64 64256, i64 64263, i64 64275, i64 64280, i64 64285, i64 64297, i64 64298, i64 64311, i64 64312, i64 64317, i64 64318, i64 64319, i64 64320, i64 64322, i64 64323, i64 64325, i64 64326, i64 64434, i64 64467, i64 64830, i64 64848, i64 64912, i64 64914, i64 64968, i64 65008, i64 65020, i64 65136, i64 65141, i64 65142, i64 65277, i64 65313, i64 65339, i64 65345, i64 65371, i64 65382, i64 65471, i64 65474, i64 65480, i64 65482, i64 65488, i64 65490, i64 65496, i64 65498, i64 65501, i64 65536, i64 65548, i64 65549, i64 65575, i64 65576, i64 65595, i64 65596, i64 65598, i64 65599, i64 65614, i64 65616, i64 65630, i64 65664, i64 65787, i64 65856, i64 65909, i64 66176, i64 66205, i64 66208, i64 66257, i64 66304, i64 66336, i64 66352, i64 66379, i64 66384, i64 66427, i64 66432, i64 66462, i64 66464, i64 66500, i64 66504, i64 66512, i64 66513, i64 66518, i64 66560, i64 66718, i64 66816, i64 66856, i64 66864, i64 66916, i64 67072, i64 67383, i64 67392, i64 67414, i64 67424, i64 67432, i64 67584, i64 67590, i64 67592, i64 67593, i64 67594, i64 67638, i64 67639, i64 67641, i64 67644, i64 67645, i64 67647, i64 67670, i64 67680, i64 67703, i64 67712, i64 67743, i64 67840, i64 67862, i64 67872, i64 67898, i64 67968, i64 68024, i64 68030, i64 68032, i64 68096, i64 68100, i64 68101, i64 68103, i64 68108, i64 68116, i64 68117, i64 68120, i64 68121, i64 68148, i64 68192, i64 68221, i64 68224, i64 68253, i64 68288, i64 68296, i64 68297, i64 68325, i64 68352, i64 68406, i64 68416, i64 68438, i64 68448, i64 68467, i64 68480, i64 68498, i64 68608, i64 68681, i64 69632, i64 69702, i64 69762, i64 69817, i64 69840, i64 69865, i64 69888, i64 69939, i64 69968, i64 70003, i64 70006, i64 70007, i64 70016, i64 70080, i64 70081, i64 70085, i64 70106, i64 70107, i64 70144, i64 70162, i64 70163, i64 70197, i64 70199, i64 70200, i64 70320, i64 70377, i64 70401, i64 70404, i64 70405, i64 70413, i64 70415, i64 70417, i64 70419, i64 70441, i64 70442, i64 70449, i64 70450, i64 70452, i64 70453, i64 70458, i64 70461, i64 70469, i64 70471, i64 70473, i64 70475, i64 70477, i64 70487, i64 70488, i64 70493, i64 70500, i64 70784, i64 70850, i64 70852, i64 70854, i64 70855, i64 70856, i64 71040, i64 71094, i64 71096, i64 71103, i64 71168, i64 71231, i64 71232, i64 71233, i64 71236, i64 71237, i64 71296, i64 71350, i64 71840, i64 71904, i64 71935, i64 71936, i64 72384, i64 72441, i64 73728, i64 74649, i64 74752, i64 74863, i64 77824, i64 78895, i64 92160, i64 92729, i64 92736, i64 92767, i64 92880, i64 92910, i64 92928, i64 92983, i64 92992, i64 92996, i64 93027, i64 93048, i64 93053, i64 93072, i64 93952, i64 94021, i64 94032, i64 94079, i64 94099, i64 94112, i64 110592, i64 110594, i64 113664, i64 113771, i64 113776, i64 113789, i64 113792, i64 113801, i64 113808, i64 113818, i64 113822, i64 113823, i64 119808, i64 119893, i64 119894, i64 119965, i64 119966, i64 119968, i64 119970, i64 119971, i64 119973, i64 119975, i64 119977, i64 119981, i64 119982, i64 119994, i64 119995, i64 119996, i64 119997, i64 120004, i64 120005, i64 120070, i64 120071, i64 120075, i64 120077, i64 120085, i64 120086, i64 120093, i64 120094, i64 120122, i64 120123, i64 120127, i64 120128, i64 120133, i64 120134, i64 120135, i64 120138, i64 120145, i64 120146, i64 120486, i64 120488, i64 120513, i64 120514, i64 120539, i64 120540, i64 120571, i64 120572, i64 120597, i64 120598, i64 120629, i64 120630, i64 120655, i64 120656, i64 120687, i64 120688, i64 120713, i64 120714, i64 120745, i64 120746, i64 120771, i64 120772, i64 120780, i64 124928, i64 125125, i64 126464, i64 126468, i64 126469, i64 126496, i64 126497, i64 126499, i64 126500, i64 126501, i64 126503, i64 126504, i64 126505, i64 126515, i64 126516, i64 126520, i64 126521, i64 126522, i64 126523, i64 126524, i64 126530, i64 126531, i64 126535, i64 126536, i64 126537, i64 126538, i64 126539, i64 126540, i64 126541, i64 126544, i64 126545, i64 126547, i64 126548, i64 126549, i64 126551, i64 126552, i64 126553, i64 126554, i64 126555, i64 126556, i64 126557, i64 126558, i64 126559, i64 126560, i64 126561, i64 126563, i64 126564, i64 126565, i64 126567, i64 126571, i64 126572, i64 126579, i64 126580, i64 126584, i64 126585, i64 126589, i64 126590, i64 126591, i64 126592, i64 126602, i64 126603, i64 126620, i64 126625, i64 126628, i64 126629, i64 126634, i64 126635, i64 126652, i64 127280, i64 127306, i64 127312, i64 127338, i64 127344, i64 127370, i64 131072, i64 173783, i64 173824, i64 177973, i64 177984, i64 178206, i64 194560, i64 195102], align 16
@XPosixBlank_invlist = internal constant [20 x i64] [i64 17, i64 148565664, i64 1, i64 0, i64 9, i64 10, i64 32, i64 33, i64 160, i64 161, i64 5760, i64 5761, i64 8192, i64 8203, i64 8239, i64 8240, i64 8287, i64 8288, i64 12288, i64 12289], align 16
@Cased_invlist = internal constant [258 x i64] [i64 255, i64 148565664, i64 1, i64 0, i64 65, i64 91, i64 97, i64 123, i64 170, i64 171, i64 181, i64 182, i64 186, i64 187, i64 192, i64 215, i64 216, i64 247, i64 248, i64 443, i64 444, i64 448, i64 452, i64 660, i64 661, i64 697, i64 704, i64 706, i64 736, i64 741, i64 837, i64 838, i64 880, i64 884, i64 886, i64 888, i64 890, i64 894, i64 895, i64 896, i64 902, i64 903, i64 904, i64 907, i64 908, i64 909, i64 910, i64 930, i64 931, i64 1014, i64 1015, i64 1154, i64 1162, i64 1328, i64 1329, i64 1367, i64 1377, i64 1416, i64 4256, i64 4294, i64 4295, i64 4296, i64 4301, i64 4302, i64 7424, i64 7616, i64 7680, i64 7958, i64 7960, i64 7966, i64 7968, i64 8006, i64 8008, i64 8014, i64 8016, i64 8024, i64 8025, i64 8026, i64 8027, i64 8028, i64 8029, i64 8030, i64 8031, i64 8062, i64 8064, i64 8117, i64 8118, i64 8125, i64 8126, i64 8127, i64 8130, i64 8133, i64 8134, i64 8141, i64 8144, i64 8148, i64 8150, i64 8156, i64 8160, i64 8173, i64 8178, i64 8181, i64 8182, i64 8189, i64 8305, i64 8306, i64 8319, i64 8320, i64 8336, i64 8349, i64 8450, i64 8451, i64 8455, i64 8456, i64 8458, i64 8468, i64 8469, i64 8470, i64 8473, i64 8478, i64 8484, i64 8485, i64 8486, i64 8487, i64 8488, i64 8489, i64 8490, i64 8494, i64 8495, i64 8501, i64 8505, i64 8506, i64 8508, i64 8512, i64 8517, i64 8522, i64 8526, i64 8527, i64 8544, i64 8576, i64 8579, i64 8581, i64 9398, i64 9450, i64 11264, i64 11311, i64 11312, i64 11359, i64 11360, i64 11493, i64 11499, i64 11503, i64 11506, i64 11508, i64 11520, i64 11558, i64 11559, i64 11560, i64 11565, i64 11566, i64 42560, i64 42606, i64 42624, i64 42654, i64 42786, i64 42888, i64 42891, i64 42895, i64 42896, i64 42926, i64 42928, i64 42930, i64 43000, i64 43003, i64 43824, i64 43867, i64 43868, i64 43872, i64 43876, i64 43878, i64 64256, i64 64263, i64 64275, i64 64280, i64 65313, i64 65339, i64 65345, i64 65371, i64 66560, i64 66640, i64 71840, i64 71904, i64 119808, i64 119893, i64 119894, i64 119965, i64 119966, i64 119968, i64 119970, i64 119971, i64 119973, i64 119975, i64 119977, i64 119981, i64 119982, i64 119994, i64 119995, i64 119996, i64 119997, i64 120004, i64 120005, i64 120070, i64 120071, i64 120075, i64 120077, i64 120085, i64 120086, i64 120093, i64 120094, i64 120122, i64 120123, i64 120127, i64 120128, i64 120133, i64 120134, i64 120135, i64 120138, i64 120145, i64 120146, i64 120486, i64 120488, i64 120513, i64 120514, i64 120539, i64 120540, i64 120571, i64 120572, i64 120597, i64 120598, i64 120629, i64 120630, i64 120655, i64 120656, i64 120687, i64 120688, i64 120713, i64 120714, i64 120745, i64 120746, i64 120771, i64 120772, i64 120780, i64 127280, i64 127306, i64 127312, i64 127338, i64 127344, i64 127370], align 16
@XPosixCntrl_invlist = internal constant [7 x i64] [i64 4, i64 148565664, i64 0, i64 0, i64 32, i64 127, i64 160], align 16
@XPosixDigit_invlist = internal constant [104 x i64] [i64 101, i64 148565664, i64 1, i64 0, i64 48, i64 58, i64 1632, i64 1642, i64 1776, i64 1786, i64 1984, i64 1994, i64 2406, i64 2416, i64 2534, i64 2544, i64 2662, i64 2672, i64 2790, i64 2800, i64 2918, i64 2928, i64 3046, i64 3056, i64 3174, i64 3184, i64 3302, i64 3312, i64 3430, i64 3440, i64 3558, i64 3568, i64 3664, i64 3674, i64 3792, i64 3802, i64 3872, i64 3882, i64 4160, i64 4170, i64 4240, i64 4250, i64 6112, i64 6122, i64 6160, i64 6170, i64 6470, i64 6480, i64 6608, i64 6618, i64 6784, i64 6794, i64 6800, i64 6810, i64 6992, i64 7002, i64 7088, i64 7098, i64 7232, i64 7242, i64 7248, i64 7258, i64 42528, i64 42538, i64 43216, i64 43226, i64 43264, i64 43274, i64 43472, i64 43482, i64 43504, i64 43514, i64 43600, i64 43610, i64 44016, i64 44026, i64 65296, i64 65306, i64 66720, i64 66730, i64 69734, i64 69744, i64 69872, i64 69882, i64 69942, i64 69952, i64 70096, i64 70106, i64 70384, i64 70394, i64 70864, i64 70874, i64 71248, i64 71258, i64 71360, i64 71370, i64 71904, i64 71914, i64 92768, i64 92778, i64 93008, i64 93018, i64 120782, i64 120832], align 16
@XPosixGraph_invlist = internal constant [1214 x i64] [i64 1211, i64 148565664, i64 1, i64 0, i64 33, i64 127, i64 161, i64 888, i64 890, i64 896, i64 900, i64 907, i64 908, i64 909, i64 910, i64 930, i64 931, i64 1328, i64 1329, i64 1367, i64 1369, i64 1376, i64 1377, i64 1416, i64 1417, i64 1419, i64 1421, i64 1424, i64 1425, i64 1480, i64 1488, i64 1515, i64 1520, i64 1525, i64 1536, i64 1565, i64 1566, i64 1806, i64 1807, i64 1867, i64 1869, i64 1970, i64 1984, i64 2043, i64 2048, i64 2094, i64 2096, i64 2111, i64 2112, i64 2140, i64 2142, i64 2143, i64 2208, i64 2227, i64 2276, i64 2436, i64 2437, i64 2445, i64 2447, i64 2449, i64 2451, i64 2473, i64 2474, i64 2481, i64 2482, i64 2483, i64 2486, i64 2490, i64 2492, i64 2501, i64 2503, i64 2505, i64 2507, i64 2511, i64 2519, i64 2520, i64 2524, i64 2526, i64 2527, i64 2532, i64 2534, i64 2556, i64 2561, i64 2564, i64 2565, i64 2571, i64 2575, i64 2577, i64 2579, i64 2601, i64 2602, i64 2609, i64 2610, i64 2612, i64 2613, i64 2615, i64 2616, i64 2618, i64 2620, i64 2621, i64 2622, i64 2627, i64 2631, i64 2633, i64 2635, i64 2638, i64 2641, i64 2642, i64 2649, i64 2653, i64 2654, i64 2655, i64 2662, i64 2678, i64 2689, i64 2692, i64 2693, i64 2702, i64 2703, i64 2706, i64 2707, i64 2729, i64 2730, i64 2737, i64 2738, i64 2740, i64 2741, i64 2746, i64 2748, i64 2758, i64 2759, i64 2762, i64 2763, i64 2766, i64 2768, i64 2769, i64 2784, i64 2788, i64 2790, i64 2802, i64 2817, i64 2820, i64 2821, i64 2829, i64 2831, i64 2833, i64 2835, i64 2857, i64 2858, i64 2865, i64 2866, i64 2868, i64 2869, i64 2874, i64 2876, i64 2885, i64 2887, i64 2889, i64 2891, i64 2894, i64 2902, i64 2904, i64 2908, i64 2910, i64 2911, i64 2916, i64 2918, i64 2936, i64 2946, i64 2948, i64 2949, i64 2955, i64 2958, i64 2961, i64 2962, i64 2966, i64 2969, i64 2971, i64 2972, i64 2973, i64 2974, i64 2976, i64 2979, i64 2981, i64 2984, i64 2987, i64 2990, i64 3002, i64 3006, i64 3011, i64 3014, i64 3017, i64 3018, i64 3022, i64 3024, i64 3025, i64 3031, i64 3032, i64 3046, i64 3067, i64 3072, i64 3076, i64 3077, i64 3085, i64 3086, i64 3089, i64 3090, i64 3113, i64 3114, i64 3130, i64 3133, i64 3141, i64 3142, i64 3145, i64 3146, i64 3150, i64 3157, i64 3159, i64 3160, i64 3162, i64 3168, i64 3172, i64 3174, i64 3184, i64 3192, i64 3200, i64 3201, i64 3204, i64 3205, i64 3213, i64 3214, i64 3217, i64 3218, i64 3241, i64 3242, i64 3252, i64 3253, i64 3258, i64 3260, i64 3269, i64 3270, i64 3273, i64 3274, i64 3278, i64 3285, i64 3287, i64 3294, i64 3295, i64 3296, i64 3300, i64 3302, i64 3312, i64 3313, i64 3315, i64 3329, i64 3332, i64 3333, i64 3341, i64 3342, i64 3345, i64 3346, i64 3387, i64 3389, i64 3397, i64 3398, i64 3401, i64 3402, i64 3407, i64 3415, i64 3416, i64 3424, i64 3428, i64 3430, i64 3446, i64 3449, i64 3456, i64 3458, i64 3460, i64 3461, i64 3479, i64 3482, i64 3506, i64 3507, i64 3516, i64 3517, i64 3518, i64 3520, i64 3527, i64 3530, i64 3531, i64 3535, i64 3541, i64 3542, i64 3543, i64 3544, i64 3552, i64 3558, i64 3568, i64 3570, i64 3573, i64 3585, i64 3643, i64 3647, i64 3676, i64 3713, i64 3715, i64 3716, i64 3717, i64 3719, i64 3721, i64 3722, i64 3723, i64 3725, i64 3726, i64 3732, i64 3736, i64 3737, i64 3744, i64 3745, i64 3748, i64 3749, i64 3750, i64 3751, i64 3752, i64 3754, i64 3756, i64 3757, i64 3770, i64 3771, i64 3774, i64 3776, i64 3781, i64 3782, i64 3783, i64 3784, i64 3790, i64 3792, i64 3802, i64 3804, i64 3808, i64 3840, i64 3912, i64 3913, i64 3949, i64 3953, i64 3992, i64 3993, i64 4029, i64 4030, i64 4045, i64 4046, i64 4059, i64 4096, i64 4294, i64 4295, i64 4296, i64 4301, i64 4302, i64 4304, i64 4681, i64 4682, i64 4686, i64 4688, i64 4695, i64 4696, i64 4697, i64 4698, i64 4702, i64 4704, i64 4745, i64 4746, i64 4750, i64 4752, i64 4785, i64 4786, i64 4790, i64 4792, i64 4799, i64 4800, i64 4801, i64 4802, i64 4806, i64 4808, i64 4823, i64 4824, i64 4881, i64 4882, i64 4886, i64 4888, i64 4955, i64 4957, i64 4989, i64 4992, i64 5018, i64 5024, i64 5109, i64 5120, i64 5760, i64 5761, i64 5789, i64 5792, i64 5881, i64 5888, i64 5901, i64 5902, i64 5909, i64 5920, i64 5943, i64 5952, i64 5972, i64 5984, i64 5997, i64 5998, i64 6001, i64 6002, i64 6004, i64 6016, i64 6110, i64 6112, i64 6122, i64 6128, i64 6138, i64 6144, i64 6159, i64 6160, i64 6170, i64 6176, i64 6264, i64 6272, i64 6315, i64 6320, i64 6390, i64 6400, i64 6431, i64 6432, i64 6444, i64 6448, i64 6460, i64 6464, i64 6465, i64 6468, i64 6510, i64 6512, i64 6517, i64 6528, i64 6572, i64 6576, i64 6602, i64 6608, i64 6619, i64 6622, i64 6684, i64 6686, i64 6751, i64 6752, i64 6781, i64 6783, i64 6794, i64 6800, i64 6810, i64 6816, i64 6830, i64 6832, i64 6847, i64 6912, i64 6988, i64 6992, i64 7037, i64 7040, i64 7156, i64 7164, i64 7224, i64 7227, i64 7242, i64 7245, i64 7296, i64 7360, i64 7368, i64 7376, i64 7415, i64 7416, i64 7418, i64 7424, i64 7670, i64 7676, i64 7958, i64 7960, i64 7966, i64 7968, i64 8006, i64 8008, i64 8014, i64 8016, i64 8024, i64 8025, i64 8026, i64 8027, i64 8028, i64 8029, i64 8030, i64 8031, i64 8062, i64 8064, i64 8117, i64 8118, i64 8133, i64 8134, i64 8148, i64 8150, i64 8156, i64 8157, i64 8176, i64 8178, i64 8181, i64 8182, i64 8191, i64 8203, i64 8232, i64 8234, i64 8239, i64 8240, i64 8287, i64 8288, i64 8293, i64 8294, i64 8306, i64 8308, i64 8335, i64 8336, i64 8349, i64 8352, i64 8382, i64 8400, i64 8433, i64 8448, i64 8586, i64 8592, i64 9211, i64 9216, i64 9255, i64 9280, i64 9291, i64 9312, i64 11124, i64 11126, i64 11158, i64 11160, i64 11194, i64 11197, i64 11209, i64 11210, i64 11218, i64 11264, i64 11311, i64 11312, i64 11359, i64 11360, i64 11508, i64 11513, i64 11558, i64 11559, i64 11560, i64 11565, i64 11566, i64 11568, i64 11624, i64 11631, i64 11633, i64 11647, i64 11671, i64 11680, i64 11687, i64 11688, i64 11695, i64 11696, i64 11703, i64 11704, i64 11711, i64 11712, i64 11719, i64 11720, i64 11727, i64 11728, i64 11735, i64 11736, i64 11743, i64 11744, i64 11843, i64 11904, i64 11930, i64 11931, i64 12020, i64 12032, i64 12246, i64 12272, i64 12284, i64 12289, i64 12352, i64 12353, i64 12439, i64 12441, i64 12544, i64 12549, i64 12590, i64 12593, i64 12687, i64 12688, i64 12731, i64 12736, i64 12772, i64 12784, i64 12831, i64 12832, i64 13055, i64 13056, i64 19894, i64 19904, i64 40909, i64 40960, i64 42125, i64 42128, i64 42183, i64 42192, i64 42540, i64 42560, i64 42654, i64 42655, i64 42744, i64 42752, i64 42895, i64 42896, i64 42926, i64 42928, i64 42930, i64 42999, i64 43052, i64 43056, i64 43066, i64 43072, i64 43128, i64 43136, i64 43205, i64 43214, i64 43226, i64 43232, i64 43260, i64 43264, i64 43348, i64 43359, i64 43389, i64 43392, i64 43470, i64 43471, i64 43482, i64 43486, i64 43519, i64 43520, i64 43575, i64 43584, i64 43598, i64 43600, i64 43610, i64 43612, i64 43715, i64 43739, i64 43767, i64 43777, i64 43783, i64 43785, i64 43791, i64 43793, i64 43799, i64 43808, i64 43815, i64 43816, i64 43823, i64 43824, i64 43872, i64 43876, i64 43878, i64 43968, i64 44014, i64 44016, i64 44026, i64 44032, i64 55204, i64 55216, i64 55239, i64 55243, i64 55292, i64 57344, i64 64110, i64 64112, i64 64218, i64 64256, i64 64263, i64 64275, i64 64280, i64 64285, i64 64311, i64 64312, i64 64317, i64 64318, i64 64319, i64 64320, i64 64322, i64 64323, i64 64325, i64 64326, i64 64450, i64 64467, i64 64832, i64 64848, i64 64912, i64 64914, i64 64968, i64 65008, i64 65022, i64 65024, i64 65050, i64 65056, i64 65070, i64 65072, i64 65107, i64 65108, i64 65127, i64 65128, i64 65132, i64 65136, i64 65141, i64 65142, i64 65277, i64 65279, i64 65280, i64 65281, i64 65471, i64 65474, i64 65480, i64 65482, i64 65488, i64 65490, i64 65496, i64 65498, i64 65501, i64 65504, i64 65511, i64 65512, i64 65519, i64 65529, i64 65534, i64 65536, i64 65548, i64 65549, i64 65575, i64 65576, i64 65595, i64 65596, i64 65598, i64 65599, i64 65614, i64 65616, i64 65630, i64 65664, i64 65787, i64 65792, i64 65795, i64 65799, i64 65844, i64 65847, i64 65933, i64 65936, i64 65948, i64 65952, i64 65953, i64 66000, i64 66046, i64 66176, i64 66205, i64 66208, i64 66257, i64 66272, i64 66300, i64 66304, i64 66340, i64 66352, i64 66379, i64 66384, i64 66427, i64 66432, i64 66462, i64 66463, i64 66500, i64 66504, i64 66518, i64 66560, i64 66718, i64 66720, i64 66730, i64 66816, i64 66856, i64 66864, i64 66916, i64 66927, i64 66928, i64 67072, i64 67383, i64 67392, i64 67414, i64 67424, i64 67432, i64 67584, i64 67590, i64 67592, i64 67593, i64 67594, i64 67638, i64 67639, i64 67641, i64 67644, i64 67645, i64 67647, i64 67670, i64 67671, i64 67743, i64 67751, i64 67760, i64 67840, i64 67868, i64 67871, i64 67898, i64 67903, i64 67904, i64 67968, i64 68024, i64 68030, i64 68032, i64 68096, i64 68100, i64 68101, i64 68103, i64 68108, i64 68116, i64 68117, i64 68120, i64 68121, i64 68148, i64 68152, i64 68155, i64 68159, i64 68168, i64 68176, i64 68185, i64 68192, i64 68256, i64 68288, i64 68327, i64 68331, i64 68343, i64 68352, i64 68406, i64 68409, i64 68438, i64 68440, i64 68467, i64 68472, i64 68498, i64 68505, i64 68509, i64 68521, i64 68528, i64 68608, i64 68681, i64 69216, i64 69247, i64 69632, i64 69710, i64 69714, i64 69744, i64 69759, i64 69826, i64 69840, i64 69865, i64 69872, i64 69882, i64 69888, i64 69941, i64 69942, i64 69956, i64 69968, i64 70007, i64 70016, i64 70089, i64 70093, i64 70094, i64 70096, i64 70107, i64 70113, i64 70133, i64 70144, i64 70162, i64 70163, i64 70206, i64 70320, i64 70379, i64 70384, i64 70394, i64 70401, i64 70404, i64 70405, i64 70413, i64 70415, i64 70417, i64 70419, i64 70441, i64 70442, i64 70449, i64 70450, i64 70452, i64 70453, i64 70458, i64 70460, i64 70469, i64 70471, i64 70473, i64 70475, i64 70478, i64 70487, i64 70488, i64 70493, i64 70500, i64 70502, i64 70509, i64 70512, i64 70517, i64 70784, i64 70856, i64 70864, i64 70874, i64 71040, i64 71094, i64 71096, i64 71114, i64 71168, i64 71237, i64 71248, i64 71258, i64 71296, i64 71352, i64 71360, i64 71370, i64 71840, i64 71923, i64 71935, i64 71936, i64 72384, i64 72441, i64 73728, i64 74649, i64 74752, i64 74863, i64 74864, i64 74869, i64 77824, i64 78895, i64 92160, i64 92729, i64 92736, i64 92767, i64 92768, i64 92778, i64 92782, i64 92784, i64 92880, i64 92910, i64 92912, i64 92918, i64 92928, i64 92998, i64 93008, i64 93018, i64 93019, i64 93026, i64 93027, i64 93048, i64 93053, i64 93072, i64 93952, i64 94021, i64 94032, i64 94079, i64 94095, i64 94112, i64 110592, i64 110594, i64 113664, i64 113771, i64 113776, i64 113789, i64 113792, i64 113801, i64 113808, i64 113818, i64 113820, i64 113828, i64 118784, i64 119030, i64 119040, i64 119079, i64 119081, i64 119262, i64 119296, i64 119366, i64 119552, i64 119639, i64 119648, i64 119666, i64 119808, i64 119893, i64 119894, i64 119965, i64 119966, i64 119968, i64 119970, i64 119971, i64 119973, i64 119975, i64 119977, i64 119981, i64 119982, i64 119994, i64 119995, i64 119996, i64 119997, i64 120004, i64 120005, i64 120070, i64 120071, i64 120075, i64 120077, i64 120085, i64 120086, i64 120093, i64 120094, i64 120122, i64 120123, i64 120127, i64 120128, i64 120133, i64 120134, i64 120135, i64 120138, i64 120145, i64 120146, i64 120486, i64 120488, i64 120780, i64 120782, i64 120832, i64 124928, i64 125125, i64 125127, i64 125143, i64 126464, i64 126468, i64 126469, i64 126496, i64 126497, i64 126499, i64 126500, i64 126501, i64 126503, i64 126504, i64 126505, i64 126515, i64 126516, i64 126520, i64 126521, i64 126522, i64 126523, i64 126524, i64 126530, i64 126531, i64 126535, i64 126536, i64 126537, i64 126538, i64 126539, i64 126540, i64 126541, i64 126544, i64 126545, i64 126547, i64 126548, i64 126549, i64 126551, i64 126552, i64 126553, i64 126554, i64 126555, i64 126556, i64 126557, i64 126558, i64 126559, i64 126560, i64 126561, i64 126563, i64 126564, i64 126565, i64 126567, i64 126571, i64 126572, i64 126579, i64 126580, i64 126584, i64 126585, i64 126589, i64 126590, i64 126591, i64 126592, i64 126602, i64 126603, i64 126620, i64 126625, i64 126628, i64 126629, i64 126634, i64 126635, i64 126652, i64 126704, i64 126706, i64 126976, i64 127020, i64 127024, i64 127124, i64 127136, i64 127151, i64 127153, i64 127168, i64 127169, i64 127184, i64 127185, i64 127222, i64 127232, i64 127245, i64 127248, i64 127279, i64 127280, i64 127340, i64 127344, i64 127387, i64 127462, i64 127491, i64 127504, i64 127547, i64 127552, i64 127561, i64 127568, i64 127570, i64 127744, i64 127789, i64 127792, i64 127870, i64 127872, i64 127951, i64 127956, i64 127992, i64 128000, i64 128255, i64 128256, i64 128331, i64 128336, i64 128378, i64 128379, i64 128420, i64 128421, i64 128579, i64 128581, i64 128720, i64 128736, i64 128749, i64 128752, i64 128756, i64 128768, i64 128884, i64 128896, i64 128981, i64 129024, i64 129036, i64 129040, i64 129096, i64 129104, i64 129114, i64 129120, i64 129160, i64 129168, i64 129198, i64 131072, i64 173783, i64 173824, i64 177973, i64 177984, i64 178206, i64 194560, i64 195102, i64 917505, i64 917506, i64 917536, i64 917632, i64 917760, i64 918000, i64 983040, i64 1048574, i64 1048576, i64 1114110], align 16
@XPosixLower_invlist = internal constant [1270 x i64] [i64 1267, i64 148565664, i64 1, i64 0, i64 97, i64 123, i64 170, i64 171, i64 181, i64 182, i64 186, i64 187, i64 223, i64 247, i64 248, i64 256, i64 257, i64 258, i64 259, i64 260, i64 261, i64 262, i64 263, i64 264, i64 265, i64 266, i64 267, i64 268, i64 269, i64 270, i64 271, i64 272, i64 273, i64 274, i64 275, i64 276, i64 277, i64 278, i64 279, i64 280, i64 281, i64 282, i64 283, i64 284, i64 285, i64 286, i64 287, i64 288, i64 289, i64 290, i64 291, i64 292, i64 293, i64 294, i64 295, i64 296, i64 297, i64 298, i64 299, i64 300, i64 301, i64 302, i64 303, i64 304, i64 305, i64 306, i64 307, i64 308, i64 309, i64 310, i64 311, i64 313, i64 314, i64 315, i64 316, i64 317, i64 318, i64 319, i64 320, i64 321, i64 322, i64 323, i64 324, i64 325, i64 326, i64 327, i64 328, i64 330, i64 331, i64 332, i64 333, i64 334, i64 335, i64 336, i64 337, i64 338, i64 339, i64 340, i64 341, i64 342, i64 343, i64 344, i64 345, i64 346, i64 347, i64 348, i64 349, i64 350, i64 351, i64 352, i64 353, i64 354, i64 355, i64 356, i64 357, i64 358, i64 359, i64 360, i64 361, i64 362, i64 363, i64 364, i64 365, i64 366, i64 367, i64 368, i64 369, i64 370, i64 371, i64 372, i64 373, i64 374, i64 375, i64 376, i64 378, i64 379, i64 380, i64 381, i64 382, i64 385, i64 387, i64 388, i64 389, i64 390, i64 392, i64 393, i64 396, i64 398, i64 402, i64 403, i64 405, i64 406, i64 409, i64 412, i64 414, i64 415, i64 417, i64 418, i64 419, i64 420, i64 421, i64 422, i64 424, i64 425, i64 426, i64 428, i64 429, i64 430, i64 432, i64 433, i64 436, i64 437, i64 438, i64 439, i64 441, i64 443, i64 445, i64 448, i64 454, i64 455, i64 457, i64 458, i64 460, i64 461, i64 462, i64 463, i64 464, i64 465, i64 466, i64 467, i64 468, i64 469, i64 470, i64 471, i64 472, i64 473, i64 474, i64 475, i64 476, i64 478, i64 479, i64 480, i64 481, i64 482, i64 483, i64 484, i64 485, i64 486, i64 487, i64 488, i64 489, i64 490, i64 491, i64 492, i64 493, i64 494, i64 495, i64 497, i64 499, i64 500, i64 501, i64 502, i64 505, i64 506, i64 507, i64 508, i64 509, i64 510, i64 511, i64 512, i64 513, i64 514, i64 515, i64 516, i64 517, i64 518, i64 519, i64 520, i64 521, i64 522, i64 523, i64 524, i64 525, i64 526, i64 527, i64 528, i64 529, i64 530, i64 531, i64 532, i64 533, i64 534, i64 535, i64 536, i64 537, i64 538, i64 539, i64 540, i64 541, i64 542, i64 543, i64 544, i64 545, i64 546, i64 547, i64 548, i64 549, i64 550, i64 551, i64 552, i64 553, i64 554, i64 555, i64 556, i64 557, i64 558, i64 559, i64 560, i64 561, i64 562, i64 563, i64 570, i64 572, i64 573, i64 575, i64 577, i64 578, i64 579, i64 583, i64 584, i64 585, i64 586, i64 587, i64 588, i64 589, i64 590, i64 591, i64 660, i64 661, i64 697, i64 704, i64 706, i64 736, i64 741, i64 837, i64 838, i64 881, i64 882, i64 883, i64 884, i64 887, i64 888, i64 890, i64 894, i64 912, i64 913, i64 940, i64 975, i64 976, i64 978, i64 981, i64 984, i64 985, i64 986, i64 987, i64 988, i64 989, i64 990, i64 991, i64 992, i64 993, i64 994, i64 995, i64 996, i64 997, i64 998, i64 999, i64 1000, i64 1001, i64 1002, i64 1003, i64 1004, i64 1005, i64 1006, i64 1007, i64 1012, i64 1013, i64 1014, i64 1016, i64 1017, i64 1019, i64 1021, i64 1072, i64 1120, i64 1121, i64 1122, i64 1123, i64 1124, i64 1125, i64 1126, i64 1127, i64 1128, i64 1129, i64 1130, i64 1131, i64 1132, i64 1133, i64 1134, i64 1135, i64 1136, i64 1137, i64 1138, i64 1139, i64 1140, i64 1141, i64 1142, i64 1143, i64 1144, i64 1145, i64 1146, i64 1147, i64 1148, i64 1149, i64 1150, i64 1151, i64 1152, i64 1153, i64 1154, i64 1163, i64 1164, i64 1165, i64 1166, i64 1167, i64 1168, i64 1169, i64 1170, i64 1171, i64 1172, i64 1173, i64 1174, i64 1175, i64 1176, i64 1177, i64 1178, i64 1179, i64 1180, i64 1181, i64 1182, i64 1183, i64 1184, i64 1185, i64 1186, i64 1187, i64 1188, i64 1189, i64 1190, i64 1191, i64 1192, i64 1193, i64 1194, i64 1195, i64 1196, i64 1197, i64 1198, i64 1199, i64 1200, i64 1201, i64 1202, i64 1203, i64 1204, i64 1205, i64 1206, i64 1207, i64 1208, i64 1209, i64 1210, i64 1211, i64 1212, i64 1213, i64 1214, i64 1215, i64 1216, i64 1218, i64 1219, i64 1220, i64 1221, i64 1222, i64 1223, i64 1224, i64 1225, i64 1226, i64 1227, i64 1228, i64 1229, i64 1230, i64 1232, i64 1233, i64 1234, i64 1235, i64 1236, i64 1237, i64 1238, i64 1239, i64 1240, i64 1241, i64 1242, i64 1243, i64 1244, i64 1245, i64 1246, i64 1247, i64 1248, i64 1249, i64 1250, i64 1251, i64 1252, i64 1253, i64 1254, i64 1255, i64 1256, i64 1257, i64 1258, i64 1259, i64 1260, i64 1261, i64 1262, i64 1263, i64 1264, i64 1265, i64 1266, i64 1267, i64 1268, i64 1269, i64 1270, i64 1271, i64 1272, i64 1273, i64 1274, i64 1275, i64 1276, i64 1277, i64 1278, i64 1279, i64 1280, i64 1281, i64 1282, i64 1283, i64 1284, i64 1285, i64 1286, i64 1287, i64 1288, i64 1289, i64 1290, i64 1291, i64 1292, i64 1293, i64 1294, i64 1295, i64 1296, i64 1297, i64 1298, i64 1299, i64 1300, i64 1301, i64 1302, i64 1303, i64 1304, i64 1305, i64 1306, i64 1307, i64 1308, i64 1309, i64 1310, i64 1311, i64 1312, i64 1313, i64 1314, i64 1315, i64 1316, i64 1317, i64 1318, i64 1319, i64 1320, i64 1321, i64 1322, i64 1323, i64 1324, i64 1325, i64 1326, i64 1327, i64 1328, i64 1377, i64 1416, i64 7424, i64 7616, i64 7681, i64 7682, i64 7683, i64 7684, i64 7685, i64 7686, i64 7687, i64 7688, i64 7689, i64 7690, i64 7691, i64 7692, i64 7693, i64 7694, i64 7695, i64 7696, i64 7697, i64 7698, i64 7699, i64 7700, i64 7701, i64 7702, i64 7703, i64 7704, i64 7705, i64 7706, i64 7707, i64 7708, i64 7709, i64 7710, i64 7711, i64 7712, i64 7713, i64 7714, i64 7715, i64 7716, i64 7717, i64 7718, i64 7719, i64 7720, i64 7721, i64 7722, i64 7723, i64 7724, i64 7725, i64 7726, i64 7727, i64 7728, i64 7729, i64 7730, i64 7731, i64 7732, i64 7733, i64 7734, i64 7735, i64 7736, i64 7737, i64 7738, i64 7739, i64 7740, i64 7741, i64 7742, i64 7743, i64 7744, i64 7745, i64 7746, i64 7747, i64 7748, i64 7749, i64 7750, i64 7751, i64 7752, i64 7753, i64 7754, i64 7755, i64 7756, i64 7757, i64 7758, i64 7759, i64 7760, i64 7761, i64 7762, i64 7763, i64 7764, i64 7765, i64 7766, i64 7767, i64 7768, i64 7769, i64 7770, i64 7771, i64 7772, i64 7773, i64 7774, i64 7775, i64 7776, i64 7777, i64 7778, i64 7779, i64 7780, i64 7781, i64 7782, i64 7783, i64 7784, i64 7785, i64 7786, i64 7787, i64 7788, i64 7789, i64 7790, i64 7791, i64 7792, i64 7793, i64 7794, i64 7795, i64 7796, i64 7797, i64 7798, i64 7799, i64 7800, i64 7801, i64 7802, i64 7803, i64 7804, i64 7805, i64 7806, i64 7807, i64 7808, i64 7809, i64 7810, i64 7811, i64 7812, i64 7813, i64 7814, i64 7815, i64 7816, i64 7817, i64 7818, i64 7819, i64 7820, i64 7821, i64 7822, i64 7823, i64 7824, i64 7825, i64 7826, i64 7827, i64 7828, i64 7829, i64 7838, i64 7839, i64 7840, i64 7841, i64 7842, i64 7843, i64 7844, i64 7845, i64 7846, i64 7847, i64 7848, i64 7849, i64 7850, i64 7851, i64 7852, i64 7853, i64 7854, i64 7855, i64 7856, i64 7857, i64 7858, i64 7859, i64 7860, i64 7861, i64 7862, i64 7863, i64 7864, i64 7865, i64 7866, i64 7867, i64 7868, i64 7869, i64 7870, i64 7871, i64 7872, i64 7873, i64 7874, i64 7875, i64 7876, i64 7877, i64 7878, i64 7879, i64 7880, i64 7881, i64 7882, i64 7883, i64 7884, i64 7885, i64 7886, i64 7887, i64 7888, i64 7889, i64 7890, i64 7891, i64 7892, i64 7893, i64 7894, i64 7895, i64 7896, i64 7897, i64 7898, i64 7899, i64 7900, i64 7901, i64 7902, i64 7903, i64 7904, i64 7905, i64 7906, i64 7907, i64 7908, i64 7909, i64 7910, i64 7911, i64 7912, i64 7913, i64 7914, i64 7915, i64 7916, i64 7917, i64 7918, i64 7919, i64 7920, i64 7921, i64 7922, i64 7923, i64 7924, i64 7925, i64 7926, i64 7927, i64 7928, i64 7929, i64 7930, i64 7931, i64 7932, i64 7933, i64 7934, i64 7935, i64 7944, i64 7952, i64 7958, i64 7968, i64 7976, i64 7984, i64 7992, i64 8000, i64 8006, i64 8016, i64 8024, i64 8032, i64 8040, i64 8048, i64 8062, i64 8064, i64 8072, i64 8080, i64 8088, i64 8096, i64 8104, i64 8112, i64 8117, i64 8118, i64 8120, i64 8126, i64 8127, i64 8130, i64 8133, i64 8134, i64 8136, i64 8144, i64 8148, i64 8150, i64 8152, i64 8160, i64 8168, i64 8178, i64 8181, i64 8182, i64 8184, i64 8305, i64 8306, i64 8319, i64 8320, i64 8336, i64 8349, i64 8458, i64 8459, i64 8462, i64 8464, i64 8467, i64 8468, i64 8495, i64 8496, i64 8500, i64 8501, i64 8505, i64 8506, i64 8508, i64 8510, i64 8518, i64 8522, i64 8526, i64 8527, i64 8560, i64 8576, i64 8580, i64 8581, i64 9424, i64 9450, i64 11312, i64 11359, i64 11361, i64 11362, i64 11365, i64 11367, i64 11368, i64 11369, i64 11370, i64 11371, i64 11372, i64 11373, i64 11377, i64 11378, i64 11379, i64 11381, i64 11382, i64 11390, i64 11393, i64 11394, i64 11395, i64 11396, i64 11397, i64 11398, i64 11399, i64 11400, i64 11401, i64 11402, i64 11403, i64 11404, i64 11405, i64 11406, i64 11407, i64 11408, i64 11409, i64 11410, i64 11411, i64 11412, i64 11413, i64 11414, i64 11415, i64 11416, i64 11417, i64 11418, i64 11419, i64 11420, i64 11421, i64 11422, i64 11423, i64 11424, i64 11425, i64 11426, i64 11427, i64 11428, i64 11429, i64 11430, i64 11431, i64 11432, i64 11433, i64 11434, i64 11435, i64 11436, i64 11437, i64 11438, i64 11439, i64 11440, i64 11441, i64 11442, i64 11443, i64 11444, i64 11445, i64 11446, i64 11447, i64 11448, i64 11449, i64 11450, i64 11451, i64 11452, i64 11453, i64 11454, i64 11455, i64 11456, i64 11457, i64 11458, i64 11459, i64 11460, i64 11461, i64 11462, i64 11463, i64 11464, i64 11465, i64 11466, i64 11467, i64 11468, i64 11469, i64 11470, i64 11471, i64 11472, i64 11473, i64 11474, i64 11475, i64 11476, i64 11477, i64 11478, i64 11479, i64 11480, i64 11481, i64 11482, i64 11483, i64 11484, i64 11485, i64 11486, i64 11487, i64 11488, i64 11489, i64 11490, i64 11491, i64 11493, i64 11500, i64 11501, i64 11502, i64 11503, i64 11507, i64 11508, i64 11520, i64 11558, i64 11559, i64 11560, i64 11565, i64 11566, i64 42561, i64 42562, i64 42563, i64 42564, i64 42565, i64 42566, i64 42567, i64 42568, i64 42569, i64 42570, i64 42571, i64 42572, i64 42573, i64 42574, i64 42575, i64 42576, i64 42577, i64 42578, i64 42579, i64 42580, i64 42581, i64 42582, i64 42583, i64 42584, i64 42585, i64 42586, i64 42587, i64 42588, i64 42589, i64 42590, i64 42591, i64 42592, i64 42593, i64 42594, i64 42595, i64 42596, i64 42597, i64 42598, i64 42599, i64 42600, i64 42601, i64 42602, i64 42603, i64 42604, i64 42605, i64 42606, i64 42625, i64 42626, i64 42627, i64 42628, i64 42629, i64 42630, i64 42631, i64 42632, i64 42633, i64 42634, i64 42635, i64 42636, i64 42637, i64 42638, i64 42639, i64 42640, i64 42641, i64 42642, i64 42643, i64 42644, i64 42645, i64 42646, i64 42647, i64 42648, i64 42649, i64 42650, i64 42651, i64 42654, i64 42787, i64 42788, i64 42789, i64 42790, i64 42791, i64 42792, i64 42793, i64 42794, i64 42795, i64 42796, i64 42797, i64 42798, i64 42799, i64 42802, i64 42803, i64 42804, i64 42805, i64 42806, i64 42807, i64 42808, i64 42809, i64 42810, i64 42811, i64 42812, i64 42813, i64 42814, i64 42815, i64 42816, i64 42817, i64 42818, i64 42819, i64 42820, i64 42821, i64 42822, i64 42823, i64 42824, i64 42825, i64 42826, i64 42827, i64 42828, i64 42829, i64 42830, i64 42831, i64 42832, i64 42833, i64 42834, i64 42835, i64 42836, i64 42837, i64 42838, i64 42839, i64 42840, i64 42841, i64 42842, i64 42843, i64 42844, i64 42845, i64 42846, i64 42847, i64 42848, i64 42849, i64 42850, i64 42851, i64 42852, i64 42853, i64 42854, i64 42855, i64 42856, i64 42857, i64 42858, i64 42859, i64 42860, i64 42861, i64 42862, i64 42863, i64 42873, i64 42874, i64 42875, i64 42876, i64 42877, i64 42879, i64 42880, i64 42881, i64 42882, i64 42883, i64 42884, i64 42885, i64 42886, i64 42887, i64 42888, i64 42892, i64 42893, i64 42894, i64 42895, i64 42897, i64 42898, i64 42899, i64 42902, i64 42903, i64 42904, i64 42905, i64 42906, i64 42907, i64 42908, i64 42909, i64 42910, i64 42911, i64 42912, i64 42913, i64 42914, i64 42915, i64 42916, i64 42917, i64 42918, i64 42919, i64 42920, i64 42921, i64 42922, i64 43000, i64 43003, i64 43824, i64 43867, i64 43868, i64 43872, i64 43876, i64 43878, i64 64256, i64 64263, i64 64275, i64 64280, i64 65345, i64 65371, i64 66600, i64 66640, i64 71872, i64 71904, i64 119834, i64 119860, i64 119886, i64 119893, i64 119894, i64 119912, i64 119938, i64 119964, i64 119990, i64 119994, i64 119995, i64 119996, i64 119997, i64 120004, i64 120005, i64 120016, i64 120042, i64 120068, i64 120094, i64 120120, i64 120146, i64 120172, i64 120198, i64 120224, i64 120250, i64 120276, i64 120302, i64 120328, i64 120354, i64 120380, i64 120406, i64 120432, i64 120458, i64 120486, i64 120514, i64 120539, i64 120540, i64 120546, i64 120572, i64 120597, i64 120598, i64 120604, i64 120630, i64 120655, i64 120656, i64 120662, i64 120688, i64 120713, i64 120714, i64 120720, i64 120746, i64 120771, i64 120772, i64 120778, i64 120779, i64 120780], align 16
@XPosixPrint_invlist = internal constant [1208 x i64] [i64 1205, i64 148565664, i64 1, i64 0, i64 32, i64 127, i64 160, i64 888, i64 890, i64 896, i64 900, i64 907, i64 908, i64 909, i64 910, i64 930, i64 931, i64 1328, i64 1329, i64 1367, i64 1369, i64 1376, i64 1377, i64 1416, i64 1417, i64 1419, i64 1421, i64 1424, i64 1425, i64 1480, i64 1488, i64 1515, i64 1520, i64 1525, i64 1536, i64 1565, i64 1566, i64 1806, i64 1807, i64 1867, i64 1869, i64 1970, i64 1984, i64 2043, i64 2048, i64 2094, i64 2096, i64 2111, i64 2112, i64 2140, i64 2142, i64 2143, i64 2208, i64 2227, i64 2276, i64 2436, i64 2437, i64 2445, i64 2447, i64 2449, i64 2451, i64 2473, i64 2474, i64 2481, i64 2482, i64 2483, i64 2486, i64 2490, i64 2492, i64 2501, i64 2503, i64 2505, i64 2507, i64 2511, i64 2519, i64 2520, i64 2524, i64 2526, i64 2527, i64 2532, i64 2534, i64 2556, i64 2561, i64 2564, i64 2565, i64 2571, i64 2575, i64 2577, i64 2579, i64 2601, i64 2602, i64 2609, i64 2610, i64 2612, i64 2613, i64 2615, i64 2616, i64 2618, i64 2620, i64 2621, i64 2622, i64 2627, i64 2631, i64 2633, i64 2635, i64 2638, i64 2641, i64 2642, i64 2649, i64 2653, i64 2654, i64 2655, i64 2662, i64 2678, i64 2689, i64 2692, i64 2693, i64 2702, i64 2703, i64 2706, i64 2707, i64 2729, i64 2730, i64 2737, i64 2738, i64 2740, i64 2741, i64 2746, i64 2748, i64 2758, i64 2759, i64 2762, i64 2763, i64 2766, i64 2768, i64 2769, i64 2784, i64 2788, i64 2790, i64 2802, i64 2817, i64 2820, i64 2821, i64 2829, i64 2831, i64 2833, i64 2835, i64 2857, i64 2858, i64 2865, i64 2866, i64 2868, i64 2869, i64 2874, i64 2876, i64 2885, i64 2887, i64 2889, i64 2891, i64 2894, i64 2902, i64 2904, i64 2908, i64 2910, i64 2911, i64 2916, i64 2918, i64 2936, i64 2946, i64 2948, i64 2949, i64 2955, i64 2958, i64 2961, i64 2962, i64 2966, i64 2969, i64 2971, i64 2972, i64 2973, i64 2974, i64 2976, i64 2979, i64 2981, i64 2984, i64 2987, i64 2990, i64 3002, i64 3006, i64 3011, i64 3014, i64 3017, i64 3018, i64 3022, i64 3024, i64 3025, i64 3031, i64 3032, i64 3046, i64 3067, i64 3072, i64 3076, i64 3077, i64 3085, i64 3086, i64 3089, i64 3090, i64 3113, i64 3114, i64 3130, i64 3133, i64 3141, i64 3142, i64 3145, i64 3146, i64 3150, i64 3157, i64 3159, i64 3160, i64 3162, i64 3168, i64 3172, i64 3174, i64 3184, i64 3192, i64 3200, i64 3201, i64 3204, i64 3205, i64 3213, i64 3214, i64 3217, i64 3218, i64 3241, i64 3242, i64 3252, i64 3253, i64 3258, i64 3260, i64 3269, i64 3270, i64 3273, i64 3274, i64 3278, i64 3285, i64 3287, i64 3294, i64 3295, i64 3296, i64 3300, i64 3302, i64 3312, i64 3313, i64 3315, i64 3329, i64 3332, i64 3333, i64 3341, i64 3342, i64 3345, i64 3346, i64 3387, i64 3389, i64 3397, i64 3398, i64 3401, i64 3402, i64 3407, i64 3415, i64 3416, i64 3424, i64 3428, i64 3430, i64 3446, i64 3449, i64 3456, i64 3458, i64 3460, i64 3461, i64 3479, i64 3482, i64 3506, i64 3507, i64 3516, i64 3517, i64 3518, i64 3520, i64 3527, i64 3530, i64 3531, i64 3535, i64 3541, i64 3542, i64 3543, i64 3544, i64 3552, i64 3558, i64 3568, i64 3570, i64 3573, i64 3585, i64 3643, i64 3647, i64 3676, i64 3713, i64 3715, i64 3716, i64 3717, i64 3719, i64 3721, i64 3722, i64 3723, i64 3725, i64 3726, i64 3732, i64 3736, i64 3737, i64 3744, i64 3745, i64 3748, i64 3749, i64 3750, i64 3751, i64 3752, i64 3754, i64 3756, i64 3757, i64 3770, i64 3771, i64 3774, i64 3776, i64 3781, i64 3782, i64 3783, i64 3784, i64 3790, i64 3792, i64 3802, i64 3804, i64 3808, i64 3840, i64 3912, i64 3913, i64 3949, i64 3953, i64 3992, i64 3993, i64 4029, i64 4030, i64 4045, i64 4046, i64 4059, i64 4096, i64 4294, i64 4295, i64 4296, i64 4301, i64 4302, i64 4304, i64 4681, i64 4682, i64 4686, i64 4688, i64 4695, i64 4696, i64 4697, i64 4698, i64 4702, i64 4704, i64 4745, i64 4746, i64 4750, i64 4752, i64 4785, i64 4786, i64 4790, i64 4792, i64 4799, i64 4800, i64 4801, i64 4802, i64 4806, i64 4808, i64 4823, i64 4824, i64 4881, i64 4882, i64 4886, i64 4888, i64 4955, i64 4957, i64 4989, i64 4992, i64 5018, i64 5024, i64 5109, i64 5120, i64 5789, i64 5792, i64 5881, i64 5888, i64 5901, i64 5902, i64 5909, i64 5920, i64 5943, i64 5952, i64 5972, i64 5984, i64 5997, i64 5998, i64 6001, i64 6002, i64 6004, i64 6016, i64 6110, i64 6112, i64 6122, i64 6128, i64 6138, i64 6144, i64 6159, i64 6160, i64 6170, i64 6176, i64 6264, i64 6272, i64 6315, i64 6320, i64 6390, i64 6400, i64 6431, i64 6432, i64 6444, i64 6448, i64 6460, i64 6464, i64 6465, i64 6468, i64 6510, i64 6512, i64 6517, i64 6528, i64 6572, i64 6576, i64 6602, i64 6608, i64 6619, i64 6622, i64 6684, i64 6686, i64 6751, i64 6752, i64 6781, i64 6783, i64 6794, i64 6800, i64 6810, i64 6816, i64 6830, i64 6832, i64 6847, i64 6912, i64 6988, i64 6992, i64 7037, i64 7040, i64 7156, i64 7164, i64 7224, i64 7227, i64 7242, i64 7245, i64 7296, i64 7360, i64 7368, i64 7376, i64 7415, i64 7416, i64 7418, i64 7424, i64 7670, i64 7676, i64 7958, i64 7960, i64 7966, i64 7968, i64 8006, i64 8008, i64 8014, i64 8016, i64 8024, i64 8025, i64 8026, i64 8027, i64 8028, i64 8029, i64 8030, i64 8031, i64 8062, i64 8064, i64 8117, i64 8118, i64 8133, i64 8134, i64 8148, i64 8150, i64 8156, i64 8157, i64 8176, i64 8178, i64 8181, i64 8182, i64 8191, i64 8192, i64 8232, i64 8234, i64 8293, i64 8294, i64 8306, i64 8308, i64 8335, i64 8336, i64 8349, i64 8352, i64 8382, i64 8400, i64 8433, i64 8448, i64 8586, i64 8592, i64 9211, i64 9216, i64 9255, i64 9280, i64 9291, i64 9312, i64 11124, i64 11126, i64 11158, i64 11160, i64 11194, i64 11197, i64 11209, i64 11210, i64 11218, i64 11264, i64 11311, i64 11312, i64 11359, i64 11360, i64 11508, i64 11513, i64 11558, i64 11559, i64 11560, i64 11565, i64 11566, i64 11568, i64 11624, i64 11631, i64 11633, i64 11647, i64 11671, i64 11680, i64 11687, i64 11688, i64 11695, i64 11696, i64 11703, i64 11704, i64 11711, i64 11712, i64 11719, i64 11720, i64 11727, i64 11728, i64 11735, i64 11736, i64 11743, i64 11744, i64 11843, i64 11904, i64 11930, i64 11931, i64 12020, i64 12032, i64 12246, i64 12272, i64 12284, i64 12288, i64 12352, i64 12353, i64 12439, i64 12441, i64 12544, i64 12549, i64 12590, i64 12593, i64 12687, i64 12688, i64 12731, i64 12736, i64 12772, i64 12784, i64 12831, i64 12832, i64 13055, i64 13056, i64 19894, i64 19904, i64 40909, i64 40960, i64 42125, i64 42128, i64 42183, i64 42192, i64 42540, i64 42560, i64 42654, i64 42655, i64 42744, i64 42752, i64 42895, i64 42896, i64 42926, i64 42928, i64 42930, i64 42999, i64 43052, i64 43056, i64 43066, i64 43072, i64 43128, i64 43136, i64 43205, i64 43214, i64 43226, i64 43232, i64 43260, i64 43264, i64 43348, i64 43359, i64 43389, i64 43392, i64 43470, i64 43471, i64 43482, i64 43486, i64 43519, i64 43520, i64 43575, i64 43584, i64 43598, i64 43600, i64 43610, i64 43612, i64 43715, i64 43739, i64 43767, i64 43777, i64 43783, i64 43785, i64 43791, i64 43793, i64 43799, i64 43808, i64 43815, i64 43816, i64 43823, i64 43824, i64 43872, i64 43876, i64 43878, i64 43968, i64 44014, i64 44016, i64 44026, i64 44032, i64 55204, i64 55216, i64 55239, i64 55243, i64 55292, i64 57344, i64 64110, i64 64112, i64 64218, i64 64256, i64 64263, i64 64275, i64 64280, i64 64285, i64 64311, i64 64312, i64 64317, i64 64318, i64 64319, i64 64320, i64 64322, i64 64323, i64 64325, i64 64326, i64 64450, i64 64467, i64 64832, i64 64848, i64 64912, i64 64914, i64 64968, i64 65008, i64 65022, i64 65024, i64 65050, i64 65056, i64 65070, i64 65072, i64 65107, i64 65108, i64 65127, i64 65128, i64 65132, i64 65136, i64 65141, i64 65142, i64 65277, i64 65279, i64 65280, i64 65281, i64 65471, i64 65474, i64 65480, i64 65482, i64 65488, i64 65490, i64 65496, i64 65498, i64 65501, i64 65504, i64 65511, i64 65512, i64 65519, i64 65529, i64 65534, i64 65536, i64 65548, i64 65549, i64 65575, i64 65576, i64 65595, i64 65596, i64 65598, i64 65599, i64 65614, i64 65616, i64 65630, i64 65664, i64 65787, i64 65792, i64 65795, i64 65799, i64 65844, i64 65847, i64 65933, i64 65936, i64 65948, i64 65952, i64 65953, i64 66000, i64 66046, i64 66176, i64 66205, i64 66208, i64 66257, i64 66272, i64 66300, i64 66304, i64 66340, i64 66352, i64 66379, i64 66384, i64 66427, i64 66432, i64 66462, i64 66463, i64 66500, i64 66504, i64 66518, i64 66560, i64 66718, i64 66720, i64 66730, i64 66816, i64 66856, i64 66864, i64 66916, i64 66927, i64 66928, i64 67072, i64 67383, i64 67392, i64 67414, i64 67424, i64 67432, i64 67584, i64 67590, i64 67592, i64 67593, i64 67594, i64 67638, i64 67639, i64 67641, i64 67644, i64 67645, i64 67647, i64 67670, i64 67671, i64 67743, i64 67751, i64 67760, i64 67840, i64 67868, i64 67871, i64 67898, i64 67903, i64 67904, i64 67968, i64 68024, i64 68030, i64 68032, i64 68096, i64 68100, i64 68101, i64 68103, i64 68108, i64 68116, i64 68117, i64 68120, i64 68121, i64 68148, i64 68152, i64 68155, i64 68159, i64 68168, i64 68176, i64 68185, i64 68192, i64 68256, i64 68288, i64 68327, i64 68331, i64 68343, i64 68352, i64 68406, i64 68409, i64 68438, i64 68440, i64 68467, i64 68472, i64 68498, i64 68505, i64 68509, i64 68521, i64 68528, i64 68608, i64 68681, i64 69216, i64 69247, i64 69632, i64 69710, i64 69714, i64 69744, i64 69759, i64 69826, i64 69840, i64 69865, i64 69872, i64 69882, i64 69888, i64 69941, i64 69942, i64 69956, i64 69968, i64 70007, i64 70016, i64 70089, i64 70093, i64 70094, i64 70096, i64 70107, i64 70113, i64 70133, i64 70144, i64 70162, i64 70163, i64 70206, i64 70320, i64 70379, i64 70384, i64 70394, i64 70401, i64 70404, i64 70405, i64 70413, i64 70415, i64 70417, i64 70419, i64 70441, i64 70442, i64 70449, i64 70450, i64 70452, i64 70453, i64 70458, i64 70460, i64 70469, i64 70471, i64 70473, i64 70475, i64 70478, i64 70487, i64 70488, i64 70493, i64 70500, i64 70502, i64 70509, i64 70512, i64 70517, i64 70784, i64 70856, i64 70864, i64 70874, i64 71040, i64 71094, i64 71096, i64 71114, i64 71168, i64 71237, i64 71248, i64 71258, i64 71296, i64 71352, i64 71360, i64 71370, i64 71840, i64 71923, i64 71935, i64 71936, i64 72384, i64 72441, i64 73728, i64 74649, i64 74752, i64 74863, i64 74864, i64 74869, i64 77824, i64 78895, i64 92160, i64 92729, i64 92736, i64 92767, i64 92768, i64 92778, i64 92782, i64 92784, i64 92880, i64 92910, i64 92912, i64 92918, i64 92928, i64 92998, i64 93008, i64 93018, i64 93019, i64 93026, i64 93027, i64 93048, i64 93053, i64 93072, i64 93952, i64 94021, i64 94032, i64 94079, i64 94095, i64 94112, i64 110592, i64 110594, i64 113664, i64 113771, i64 113776, i64 113789, i64 113792, i64 113801, i64 113808, i64 113818, i64 113820, i64 113828, i64 118784, i64 119030, i64 119040, i64 119079, i64 119081, i64 119262, i64 119296, i64 119366, i64 119552, i64 119639, i64 119648, i64 119666, i64 119808, i64 119893, i64 119894, i64 119965, i64 119966, i64 119968, i64 119970, i64 119971, i64 119973, i64 119975, i64 119977, i64 119981, i64 119982, i64 119994, i64 119995, i64 119996, i64 119997, i64 120004, i64 120005, i64 120070, i64 120071, i64 120075, i64 120077, i64 120085, i64 120086, i64 120093, i64 120094, i64 120122, i64 120123, i64 120127, i64 120128, i64 120133, i64 120134, i64 120135, i64 120138, i64 120145, i64 120146, i64 120486, i64 120488, i64 120780, i64 120782, i64 120832, i64 124928, i64 125125, i64 125127, i64 125143, i64 126464, i64 126468, i64 126469, i64 126496, i64 126497, i64 126499, i64 126500, i64 126501, i64 126503, i64 126504, i64 126505, i64 126515, i64 126516, i64 126520, i64 126521, i64 126522, i64 126523, i64 126524, i64 126530, i64 126531, i64 126535, i64 126536, i64 126537, i64 126538, i64 126539, i64 126540, i64 126541, i64 126544, i64 126545, i64 126547, i64 126548, i64 126549, i64 126551, i64 126552, i64 126553, i64 126554, i64 126555, i64 126556, i64 126557, i64 126558, i64 126559, i64 126560, i64 126561, i64 126563, i64 126564, i64 126565, i64 126567, i64 126571, i64 126572, i64 126579, i64 126580, i64 126584, i64 126585, i64 126589, i64 126590, i64 126591, i64 126592, i64 126602, i64 126603, i64 126620, i64 126625, i64 126628, i64 126629, i64 126634, i64 126635, i64 126652, i64 126704, i64 126706, i64 126976, i64 127020, i64 127024, i64 127124, i64 127136, i64 127151, i64 127153, i64 127168, i64 127169, i64 127184, i64 127185, i64 127222, i64 127232, i64 127245, i64 127248, i64 127279, i64 127280, i64 127340, i64 127344, i64 127387, i64 127462, i64 127491, i64 127504, i64 127547, i64 127552, i64 127561, i64 127568, i64 127570, i64 127744, i64 127789, i64 127792, i64 127870, i64 127872, i64 127951, i64 127956, i64 127992, i64 128000, i64 128255, i64 128256, i64 128331, i64 128336, i64 128378, i64 128379, i64 128420, i64 128421, i64 128579, i64 128581, i64 128720, i64 128736, i64 128749, i64 128752, i64 128756, i64 128768, i64 128884, i64 128896, i64 128981, i64 129024, i64 129036, i64 129040, i64 129096, i64 129104, i64 129114, i64 129120, i64 129160, i64 129168, i64 129198, i64 131072, i64 173783, i64 173824, i64 177973, i64 177984, i64 178206, i64 194560, i64 195102, i64 917505, i64 917506, i64 917536, i64 917632, i64 917760, i64 918000, i64 983040, i64 1048574, i64 1048576, i64 1114110], align 16
@XPosixPunct_invlist = internal constant [304 x i64] [i64 301, i64 148565664, i64 1, i64 0, i64 33, i64 48, i64 58, i64 65, i64 91, i64 97, i64 123, i64 127, i64 161, i64 162, i64 167, i64 168, i64 171, i64 172, i64 182, i64 184, i64 187, i64 188, i64 191, i64 192, i64 894, i64 895, i64 903, i64 904, i64 1370, i64 1376, i64 1417, i64 1419, i64 1470, i64 1471, i64 1472, i64 1473, i64 1475, i64 1476, i64 1478, i64 1479, i64 1523, i64 1525, i64 1545, i64 1547, i64 1548, i64 1550, i64 1563, i64 1564, i64 1566, i64 1568, i64 1642, i64 1646, i64 1748, i64 1749, i64 1792, i64 1806, i64 2039, i64 2042, i64 2096, i64 2111, i64 2142, i64 2143, i64 2404, i64 2406, i64 2416, i64 2417, i64 2800, i64 2801, i64 3572, i64 3573, i64 3663, i64 3664, i64 3674, i64 3676, i64 3844, i64 3859, i64 3860, i64 3861, i64 3898, i64 3902, i64 3973, i64 3974, i64 4048, i64 4053, i64 4057, i64 4059, i64 4170, i64 4176, i64 4347, i64 4348, i64 4960, i64 4969, i64 5120, i64 5121, i64 5741, i64 5743, i64 5787, i64 5789, i64 5867, i64 5870, i64 5941, i64 5943, i64 6100, i64 6103, i64 6104, i64 6107, i64 6144, i64 6155, i64 6468, i64 6470, i64 6686, i64 6688, i64 6816, i64 6823, i64 6824, i64 6830, i64 7002, i64 7009, i64 7164, i64 7168, i64 7227, i64 7232, i64 7294, i64 7296, i64 7360, i64 7368, i64 7379, i64 7380, i64 8208, i64 8232, i64 8240, i64 8260, i64 8261, i64 8274, i64 8275, i64 8287, i64 8317, i64 8319, i64 8333, i64 8335, i64 8968, i64 8972, i64 9001, i64 9003, i64 10088, i64 10102, i64 10181, i64 10183, i64 10214, i64 10224, i64 10627, i64 10649, i64 10712, i64 10716, i64 10748, i64 10750, i64 11513, i64 11517, i64 11518, i64 11520, i64 11632, i64 11633, i64 11776, i64 11823, i64 11824, i64 11843, i64 12289, i64 12292, i64 12296, i64 12306, i64 12308, i64 12320, i64 12336, i64 12337, i64 12349, i64 12350, i64 12448, i64 12449, i64 12539, i64 12540, i64 42238, i64 42240, i64 42509, i64 42512, i64 42611, i64 42612, i64 42622, i64 42623, i64 42738, i64 42744, i64 43124, i64 43128, i64 43214, i64 43216, i64 43256, i64 43259, i64 43310, i64 43312, i64 43359, i64 43360, i64 43457, i64 43470, i64 43486, i64 43488, i64 43612, i64 43616, i64 43742, i64 43744, i64 43760, i64 43762, i64 44011, i64 44012, i64 64830, i64 64832, i64 65040, i64 65050, i64 65072, i64 65107, i64 65108, i64 65122, i64 65123, i64 65124, i64 65128, i64 65129, i64 65130, i64 65132, i64 65281, i64 65284, i64 65285, i64 65291, i64 65292, i64 65296, i64 65306, i64 65308, i64 65311, i64 65313, i64 65339, i64 65342, i64 65343, i64 65344, i64 65371, i64 65372, i64 65373, i64 65374, i64 65375, i64 65382, i64 65792, i64 65795, i64 66463, i64 66464, i64 66512, i64 66513, i64 66927, i64 66928, i64 67671, i64 67672, i64 67871, i64 67872, i64 67903, i64 67904, i64 68176, i64 68185, i64 68223, i64 68224, i64 68336, i64 68343, i64 68409, i64 68416, i64 68505, i64 68509, i64 69703, i64 69710, i64 69819, i64 69821, i64 69822, i64 69826, i64 69952, i64 69956, i64 70004, i64 70006, i64 70085, i64 70089, i64 70093, i64 70094, i64 70200, i64 70206, i64 70854, i64 70855, i64 71105, i64 71114, i64 71233, i64 71236, i64 74864, i64 74869, i64 92782, i64 92784, i64 92917, i64 92918, i64 92983, i64 92988, i64 92996, i64 92997, i64 113823, i64 113824], align 16
@XPerlSpace_invlist = internal constant [24 x i64] [i64 21, i64 148565664, i64 1, i64 0, i64 9, i64 14, i64 32, i64 33, i64 133, i64 134, i64 160, i64 161, i64 5760, i64 5761, i64 8192, i64 8203, i64 8232, i64 8234, i64 8239, i64 8240, i64 8287, i64 8288, i64 12288, i64 12289], align 16
@XPosixUpper_invlist = internal constant [1258 x i64] [i64 1255, i64 148565664, i64 1, i64 0, i64 65, i64 91, i64 192, i64 215, i64 216, i64 223, i64 256, i64 257, i64 258, i64 259, i64 260, i64 261, i64 262, i64 263, i64 264, i64 265, i64 266, i64 267, i64 268, i64 269, i64 270, i64 271, i64 272, i64 273, i64 274, i64 275, i64 276, i64 277, i64 278, i64 279, i64 280, i64 281, i64 282, i64 283, i64 284, i64 285, i64 286, i64 287, i64 288, i64 289, i64 290, i64 291, i64 292, i64 293, i64 294, i64 295, i64 296, i64 297, i64 298, i64 299, i64 300, i64 301, i64 302, i64 303, i64 304, i64 305, i64 306, i64 307, i64 308, i64 309, i64 310, i64 311, i64 313, i64 314, i64 315, i64 316, i64 317, i64 318, i64 319, i64 320, i64 321, i64 322, i64 323, i64 324, i64 325, i64 326, i64 327, i64 328, i64 330, i64 331, i64 332, i64 333, i64 334, i64 335, i64 336, i64 337, i64 338, i64 339, i64 340, i64 341, i64 342, i64 343, i64 344, i64 345, i64 346, i64 347, i64 348, i64 349, i64 350, i64 351, i64 352, i64 353, i64 354, i64 355, i64 356, i64 357, i64 358, i64 359, i64 360, i64 361, i64 362, i64 363, i64 364, i64 365, i64 366, i64 367, i64 368, i64 369, i64 370, i64 371, i64 372, i64 373, i64 374, i64 375, i64 376, i64 378, i64 379, i64 380, i64 381, i64 382, i64 385, i64 387, i64 388, i64 389, i64 390, i64 392, i64 393, i64 396, i64 398, i64 402, i64 403, i64 405, i64 406, i64 409, i64 412, i64 414, i64 415, i64 417, i64 418, i64 419, i64 420, i64 421, i64 422, i64 424, i64 425, i64 426, i64 428, i64 429, i64 430, i64 432, i64 433, i64 436, i64 437, i64 438, i64 439, i64 441, i64 444, i64 445, i64 452, i64 453, i64 455, i64 456, i64 458, i64 459, i64 461, i64 462, i64 463, i64 464, i64 465, i64 466, i64 467, i64 468, i64 469, i64 470, i64 471, i64 472, i64 473, i64 474, i64 475, i64 476, i64 478, i64 479, i64 480, i64 481, i64 482, i64 483, i64 484, i64 485, i64 486, i64 487, i64 488, i64 489, i64 490, i64 491, i64 492, i64 493, i64 494, i64 495, i64 497, i64 498, i64 500, i64 501, i64 502, i64 505, i64 506, i64 507, i64 508, i64 509, i64 510, i64 511, i64 512, i64 513, i64 514, i64 515, i64 516, i64 517, i64 518, i64 519, i64 520, i64 521, i64 522, i64 523, i64 524, i64 525, i64 526, i64 527, i64 528, i64 529, i64 530, i64 531, i64 532, i64 533, i64 534, i64 535, i64 536, i64 537, i64 538, i64 539, i64 540, i64 541, i64 542, i64 543, i64 544, i64 545, i64 546, i64 547, i64 548, i64 549, i64 550, i64 551, i64 552, i64 553, i64 554, i64 555, i64 556, i64 557, i64 558, i64 559, i64 560, i64 561, i64 562, i64 563, i64 570, i64 572, i64 573, i64 575, i64 577, i64 578, i64 579, i64 583, i64 584, i64 585, i64 586, i64 587, i64 588, i64 589, i64 590, i64 591, i64 880, i64 881, i64 882, i64 883, i64 886, i64 887, i64 895, i64 896, i64 902, i64 903, i64 904, i64 907, i64 908, i64 909, i64 910, i64 912, i64 913, i64 930, i64 931, i64 940, i64 975, i64 976, i64 978, i64 981, i64 984, i64 985, i64 986, i64 987, i64 988, i64 989, i64 990, i64 991, i64 992, i64 993, i64 994, i64 995, i64 996, i64 997, i64 998, i64 999, i64 1000, i64 1001, i64 1002, i64 1003, i64 1004, i64 1005, i64 1006, i64 1007, i64 1012, i64 1013, i64 1015, i64 1016, i64 1017, i64 1019, i64 1021, i64 1072, i64 1120, i64 1121, i64 1122, i64 1123, i64 1124, i64 1125, i64 1126, i64 1127, i64 1128, i64 1129, i64 1130, i64 1131, i64 1132, i64 1133, i64 1134, i64 1135, i64 1136, i64 1137, i64 1138, i64 1139, i64 1140, i64 1141, i64 1142, i64 1143, i64 1144, i64 1145, i64 1146, i64 1147, i64 1148, i64 1149, i64 1150, i64 1151, i64 1152, i64 1153, i64 1162, i64 1163, i64 1164, i64 1165, i64 1166, i64 1167, i64 1168, i64 1169, i64 1170, i64 1171, i64 1172, i64 1173, i64 1174, i64 1175, i64 1176, i64 1177, i64 1178, i64 1179, i64 1180, i64 1181, i64 1182, i64 1183, i64 1184, i64 1185, i64 1186, i64 1187, i64 1188, i64 1189, i64 1190, i64 1191, i64 1192, i64 1193, i64 1194, i64 1195, i64 1196, i64 1197, i64 1198, i64 1199, i64 1200, i64 1201, i64 1202, i64 1203, i64 1204, i64 1205, i64 1206, i64 1207, i64 1208, i64 1209, i64 1210, i64 1211, i64 1212, i64 1213, i64 1214, i64 1215, i64 1216, i64 1218, i64 1219, i64 1220, i64 1221, i64 1222, i64 1223, i64 1224, i64 1225, i64 1226, i64 1227, i64 1228, i64 1229, i64 1230, i64 1232, i64 1233, i64 1234, i64 1235, i64 1236, i64 1237, i64 1238, i64 1239, i64 1240, i64 1241, i64 1242, i64 1243, i64 1244, i64 1245, i64 1246, i64 1247, i64 1248, i64 1249, i64 1250, i64 1251, i64 1252, i64 1253, i64 1254, i64 1255, i64 1256, i64 1257, i64 1258, i64 1259, i64 1260, i64 1261, i64 1262, i64 1263, i64 1264, i64 1265, i64 1266, i64 1267, i64 1268, i64 1269, i64 1270, i64 1271, i64 1272, i64 1273, i64 1274, i64 1275, i64 1276, i64 1277, i64 1278, i64 1279, i64 1280, i64 1281, i64 1282, i64 1283, i64 1284, i64 1285, i64 1286, i64 1287, i64 1288, i64 1289, i64 1290, i64 1291, i64 1292, i64 1293, i64 1294, i64 1295, i64 1296, i64 1297, i64 1298, i64 1299, i64 1300, i64 1301, i64 1302, i64 1303, i64 1304, i64 1305, i64 1306, i64 1307, i64 1308, i64 1309, i64 1310, i64 1311, i64 1312, i64 1313, i64 1314, i64 1315, i64 1316, i64 1317, i64 1318, i64 1319, i64 1320, i64 1321, i64 1322, i64 1323, i64 1324, i64 1325, i64 1326, i64 1327, i64 1329, i64 1367, i64 4256, i64 4294, i64 4295, i64 4296, i64 4301, i64 4302, i64 7680, i64 7681, i64 7682, i64 7683, i64 7684, i64 7685, i64 7686, i64 7687, i64 7688, i64 7689, i64 7690, i64 7691, i64 7692, i64 7693, i64 7694, i64 7695, i64 7696, i64 7697, i64 7698, i64 7699, i64 7700, i64 7701, i64 7702, i64 7703, i64 7704, i64 7705, i64 7706, i64 7707, i64 7708, i64 7709, i64 7710, i64 7711, i64 7712, i64 7713, i64 7714, i64 7715, i64 7716, i64 7717, i64 7718, i64 7719, i64 7720, i64 7721, i64 7722, i64 7723, i64 7724, i64 7725, i64 7726, i64 7727, i64 7728, i64 7729, i64 7730, i64 7731, i64 7732, i64 7733, i64 7734, i64 7735, i64 7736, i64 7737, i64 7738, i64 7739, i64 7740, i64 7741, i64 7742, i64 7743, i64 7744, i64 7745, i64 7746, i64 7747, i64 7748, i64 7749, i64 7750, i64 7751, i64 7752, i64 7753, i64 7754, i64 7755, i64 7756, i64 7757, i64 7758, i64 7759, i64 7760, i64 7761, i64 7762, i64 7763, i64 7764, i64 7765, i64 7766, i64 7767, i64 7768, i64 7769, i64 7770, i64 7771, i64 7772, i64 7773, i64 7774, i64 7775, i64 7776, i64 7777, i64 7778, i64 7779, i64 7780, i64 7781, i64 7782, i64 7783, i64 7784, i64 7785, i64 7786, i64 7787, i64 7788, i64 7789, i64 7790, i64 7791, i64 7792, i64 7793, i64 7794, i64 7795, i64 7796, i64 7797, i64 7798, i64 7799, i64 7800, i64 7801, i64 7802, i64 7803, i64 7804, i64 7805, i64 7806, i64 7807, i64 7808, i64 7809, i64 7810, i64 7811, i64 7812, i64 7813, i64 7814, i64 7815, i64 7816, i64 7817, i64 7818, i64 7819, i64 7820, i64 7821, i64 7822, i64 7823, i64 7824, i64 7825, i64 7826, i64 7827, i64 7828, i64 7829, i64 7838, i64 7839, i64 7840, i64 7841, i64 7842, i64 7843, i64 7844, i64 7845, i64 7846, i64 7847, i64 7848, i64 7849, i64 7850, i64 7851, i64 7852, i64 7853, i64 7854, i64 7855, i64 7856, i64 7857, i64 7858, i64 7859, i64 7860, i64 7861, i64 7862, i64 7863, i64 7864, i64 7865, i64 7866, i64 7867, i64 7868, i64 7869, i64 7870, i64 7871, i64 7872, i64 7873, i64 7874, i64 7875, i64 7876, i64 7877, i64 7878, i64 7879, i64 7880, i64 7881, i64 7882, i64 7883, i64 7884, i64 7885, i64 7886, i64 7887, i64 7888, i64 7889, i64 7890, i64 7891, i64 7892, i64 7893, i64 7894, i64 7895, i64 7896, i64 7897, i64 7898, i64 7899, i64 7900, i64 7901, i64 7902, i64 7903, i64 7904, i64 7905, i64 7906, i64 7907, i64 7908, i64 7909, i64 7910, i64 7911, i64 7912, i64 7913, i64 7914, i64 7915, i64 7916, i64 7917, i64 7918, i64 7919, i64 7920, i64 7921, i64 7922, i64 7923, i64 7924, i64 7925, i64 7926, i64 7927, i64 7928, i64 7929, i64 7930, i64 7931, i64 7932, i64 7933, i64 7934, i64 7935, i64 7944, i64 7952, i64 7960, i64 7966, i64 7976, i64 7984, i64 7992, i64 8000, i64 8008, i64 8014, i64 8025, i64 8026, i64 8027, i64 8028, i64 8029, i64 8030, i64 8031, i64 8032, i64 8040, i64 8048, i64 8120, i64 8124, i64 8136, i64 8140, i64 8152, i64 8156, i64 8168, i64 8173, i64 8184, i64 8188, i64 8450, i64 8451, i64 8455, i64 8456, i64 8459, i64 8462, i64 8464, i64 8467, i64 8469, i64 8470, i64 8473, i64 8478, i64 8484, i64 8485, i64 8486, i64 8487, i64 8488, i64 8489, i64 8490, i64 8494, i64 8496, i64 8500, i64 8510, i64 8512, i64 8517, i64 8518, i64 8544, i64 8560, i64 8579, i64 8580, i64 9398, i64 9424, i64 11264, i64 11311, i64 11360, i64 11361, i64 11362, i64 11365, i64 11367, i64 11368, i64 11369, i64 11370, i64 11371, i64 11372, i64 11373, i64 11377, i64 11378, i64 11379, i64 11381, i64 11382, i64 11390, i64 11393, i64 11394, i64 11395, i64 11396, i64 11397, i64 11398, i64 11399, i64 11400, i64 11401, i64 11402, i64 11403, i64 11404, i64 11405, i64 11406, i64 11407, i64 11408, i64 11409, i64 11410, i64 11411, i64 11412, i64 11413, i64 11414, i64 11415, i64 11416, i64 11417, i64 11418, i64 11419, i64 11420, i64 11421, i64 11422, i64 11423, i64 11424, i64 11425, i64 11426, i64 11427, i64 11428, i64 11429, i64 11430, i64 11431, i64 11432, i64 11433, i64 11434, i64 11435, i64 11436, i64 11437, i64 11438, i64 11439, i64 11440, i64 11441, i64 11442, i64 11443, i64 11444, i64 11445, i64 11446, i64 11447, i64 11448, i64 11449, i64 11450, i64 11451, i64 11452, i64 11453, i64 11454, i64 11455, i64 11456, i64 11457, i64 11458, i64 11459, i64 11460, i64 11461, i64 11462, i64 11463, i64 11464, i64 11465, i64 11466, i64 11467, i64 11468, i64 11469, i64 11470, i64 11471, i64 11472, i64 11473, i64 11474, i64 11475, i64 11476, i64 11477, i64 11478, i64 11479, i64 11480, i64 11481, i64 11482, i64 11483, i64 11484, i64 11485, i64 11486, i64 11487, i64 11488, i64 11489, i64 11490, i64 11491, i64 11499, i64 11500, i64 11501, i64 11502, i64 11506, i64 11507, i64 42560, i64 42561, i64 42562, i64 42563, i64 42564, i64 42565, i64 42566, i64 42567, i64 42568, i64 42569, i64 42570, i64 42571, i64 42572, i64 42573, i64 42574, i64 42575, i64 42576, i64 42577, i64 42578, i64 42579, i64 42580, i64 42581, i64 42582, i64 42583, i64 42584, i64 42585, i64 42586, i64 42587, i64 42588, i64 42589, i64 42590, i64 42591, i64 42592, i64 42593, i64 42594, i64 42595, i64 42596, i64 42597, i64 42598, i64 42599, i64 42600, i64 42601, i64 42602, i64 42603, i64 42604, i64 42605, i64 42624, i64 42625, i64 42626, i64 42627, i64 42628, i64 42629, i64 42630, i64 42631, i64 42632, i64 42633, i64 42634, i64 42635, i64 42636, i64 42637, i64 42638, i64 42639, i64 42640, i64 42641, i64 42642, i64 42643, i64 42644, i64 42645, i64 42646, i64 42647, i64 42648, i64 42649, i64 42650, i64 42651, i64 42786, i64 42787, i64 42788, i64 42789, i64 42790, i64 42791, i64 42792, i64 42793, i64 42794, i64 42795, i64 42796, i64 42797, i64 42798, i64 42799, i64 42802, i64 42803, i64 42804, i64 42805, i64 42806, i64 42807, i64 42808, i64 42809, i64 42810, i64 42811, i64 42812, i64 42813, i64 42814, i64 42815, i64 42816, i64 42817, i64 42818, i64 42819, i64 42820, i64 42821, i64 42822, i64 42823, i64 42824, i64 42825, i64 42826, i64 42827, i64 42828, i64 42829, i64 42830, i64 42831, i64 42832, i64 42833, i64 42834, i64 42835, i64 42836, i64 42837, i64 42838, i64 42839, i64 42840, i64 42841, i64 42842, i64 42843, i64 42844, i64 42845, i64 42846, i64 42847, i64 42848, i64 42849, i64 42850, i64 42851, i64 42852, i64 42853, i64 42854, i64 42855, i64 42856, i64 42857, i64 42858, i64 42859, i64 42860, i64 42861, i64 42862, i64 42863, i64 42873, i64 42874, i64 42875, i64 42876, i64 42877, i64 42879, i64 42880, i64 42881, i64 42882, i64 42883, i64 42884, i64 42885, i64 42886, i64 42887, i64 42891, i64 42892, i64 42893, i64 42894, i64 42896, i64 42897, i64 42898, i64 42899, i64 42902, i64 42903, i64 42904, i64 42905, i64 42906, i64 42907, i64 42908, i64 42909, i64 42910, i64 42911, i64 42912, i64 42913, i64 42914, i64 42915, i64 42916, i64 42917, i64 42918, i64 42919, i64 42920, i64 42921, i64 42922, i64 42926, i64 42928, i64 42930, i64 65313, i64 65339, i64 66560, i64 66600, i64 71840, i64 71872, i64 119808, i64 119834, i64 119860, i64 119886, i64 119912, i64 119938, i64 119964, i64 119965, i64 119966, i64 119968, i64 119970, i64 119971, i64 119973, i64 119975, i64 119977, i64 119981, i64 119982, i64 119990, i64 120016, i64 120042, i64 120068, i64 120070, i64 120071, i64 120075, i64 120077, i64 120085, i64 120086, i64 120093, i64 120120, i64 120122, i64 120123, i64 120127, i64 120128, i64 120133, i64 120134, i64 120135, i64 120138, i64 120145, i64 120172, i64 120198, i64 120224, i64 120250, i64 120276, i64 120302, i64 120328, i64 120354, i64 120380, i64 120406, i64 120432, i64 120458, i64 120488, i64 120513, i64 120546, i64 120571, i64 120604, i64 120629, i64 120662, i64 120687, i64 120720, i64 120745, i64 120778, i64 120779, i64 127280, i64 127306, i64 127312, i64 127338, i64 127344, i64 127370], align 16
@VertSpace_invlist = internal constant [10 x i64] [i64 7, i64 148565664, i64 1, i64 0, i64 10, i64 14, i64 133, i64 134, i64 8232, i64 8234], align 16
@XPosixWord_invlist = internal constant [1264 x i64] [i64 1261, i64 148565664, i64 1, i64 0, i64 48, i64 58, i64 65, i64 91, i64 95, i64 96, i64 97, i64 123, i64 170, i64 171, i64 181, i64 182, i64 186, i64 187, i64 192, i64 215, i64 216, i64 247, i64 248, i64 706, i64 710, i64 722, i64 736, i64 741, i64 748, i64 749, i64 750, i64 751, i64 768, i64 885, i64 886, i64 888, i64 890, i64 894, i64 895, i64 896, i64 902, i64 903, i64 904, i64 907, i64 908, i64 909, i64 910, i64 930, i64 931, i64 1014, i64 1015, i64 1154, i64 1155, i64 1328, i64 1329, i64 1367, i64 1369, i64 1370, i64 1377, i64 1416, i64 1425, i64 1470, i64 1471, i64 1472, i64 1473, i64 1475, i64 1476, i64 1478, i64 1479, i64 1480, i64 1488, i64 1515, i64 1520, i64 1523, i64 1552, i64 1563, i64 1568, i64 1642, i64 1646, i64 1748, i64 1749, i64 1757, i64 1759, i64 1769, i64 1770, i64 1789, i64 1791, i64 1792, i64 1808, i64 1867, i64 1869, i64 1970, i64 1984, i64 2038, i64 2042, i64 2043, i64 2048, i64 2094, i64 2112, i64 2140, i64 2208, i64 2227, i64 2276, i64 2404, i64 2406, i64 2416, i64 2417, i64 2436, i64 2437, i64 2445, i64 2447, i64 2449, i64 2451, i64 2473, i64 2474, i64 2481, i64 2482, i64 2483, i64 2486, i64 2490, i64 2492, i64 2501, i64 2503, i64 2505, i64 2507, i64 2511, i64 2519, i64 2520, i64 2524, i64 2526, i64 2527, i64 2532, i64 2534, i64 2546, i64 2561, i64 2564, i64 2565, i64 2571, i64 2575, i64 2577, i64 2579, i64 2601, i64 2602, i64 2609, i64 2610, i64 2612, i64 2613, i64 2615, i64 2616, i64 2618, i64 2620, i64 2621, i64 2622, i64 2627, i64 2631, i64 2633, i64 2635, i64 2638, i64 2641, i64 2642, i64 2649, i64 2653, i64 2654, i64 2655, i64 2662, i64 2678, i64 2689, i64 2692, i64 2693, i64 2702, i64 2703, i64 2706, i64 2707, i64 2729, i64 2730, i64 2737, i64 2738, i64 2740, i64 2741, i64 2746, i64 2748, i64 2758, i64 2759, i64 2762, i64 2763, i64 2766, i64 2768, i64 2769, i64 2784, i64 2788, i64 2790, i64 2800, i64 2817, i64 2820, i64 2821, i64 2829, i64 2831, i64 2833, i64 2835, i64 2857, i64 2858, i64 2865, i64 2866, i64 2868, i64 2869, i64 2874, i64 2876, i64 2885, i64 2887, i64 2889, i64 2891, i64 2894, i64 2902, i64 2904, i64 2908, i64 2910, i64 2911, i64 2916, i64 2918, i64 2928, i64 2929, i64 2930, i64 2946, i64 2948, i64 2949, i64 2955, i64 2958, i64 2961, i64 2962, i64 2966, i64 2969, i64 2971, i64 2972, i64 2973, i64 2974, i64 2976, i64 2979, i64 2981, i64 2984, i64 2987, i64 2990, i64 3002, i64 3006, i64 3011, i64 3014, i64 3017, i64 3018, i64 3022, i64 3024, i64 3025, i64 3031, i64 3032, i64 3046, i64 3056, i64 3072, i64 3076, i64 3077, i64 3085, i64 3086, i64 3089, i64 3090, i64 3113, i64 3114, i64 3130, i64 3133, i64 3141, i64 3142, i64 3145, i64 3146, i64 3150, i64 3157, i64 3159, i64 3160, i64 3162, i64 3168, i64 3172, i64 3174, i64 3184, i64 3201, i64 3204, i64 3205, i64 3213, i64 3214, i64 3217, i64 3218, i64 3241, i64 3242, i64 3252, i64 3253, i64 3258, i64 3260, i64 3269, i64 3270, i64 3273, i64 3274, i64 3278, i64 3285, i64 3287, i64 3294, i64 3295, i64 3296, i64 3300, i64 3302, i64 3312, i64 3313, i64 3315, i64 3329, i64 3332, i64 3333, i64 3341, i64 3342, i64 3345, i64 3346, i64 3387, i64 3389, i64 3397, i64 3398, i64 3401, i64 3402, i64 3407, i64 3415, i64 3416, i64 3424, i64 3428, i64 3430, i64 3440, i64 3450, i64 3456, i64 3458, i64 3460, i64 3461, i64 3479, i64 3482, i64 3506, i64 3507, i64 3516, i64 3517, i64 3518, i64 3520, i64 3527, i64 3530, i64 3531, i64 3535, i64 3541, i64 3542, i64 3543, i64 3544, i64 3552, i64 3558, i64 3568, i64 3570, i64 3572, i64 3585, i64 3643, i64 3648, i64 3663, i64 3664, i64 3674, i64 3713, i64 3715, i64 3716, i64 3717, i64 3719, i64 3721, i64 3722, i64 3723, i64 3725, i64 3726, i64 3732, i64 3736, i64 3737, i64 3744, i64 3745, i64 3748, i64 3749, i64 3750, i64 3751, i64 3752, i64 3754, i64 3756, i64 3757, i64 3770, i64 3771, i64 3774, i64 3776, i64 3781, i64 3782, i64 3783, i64 3784, i64 3790, i64 3792, i64 3802, i64 3804, i64 3808, i64 3840, i64 3841, i64 3864, i64 3866, i64 3872, i64 3882, i64 3893, i64 3894, i64 3895, i64 3896, i64 3897, i64 3898, i64 3902, i64 3912, i64 3913, i64 3949, i64 3953, i64 3973, i64 3974, i64 3992, i64 3993, i64 4029, i64 4038, i64 4039, i64 4096, i64 4170, i64 4176, i64 4254, i64 4256, i64 4294, i64 4295, i64 4296, i64 4301, i64 4302, i64 4304, i64 4347, i64 4348, i64 4681, i64 4682, i64 4686, i64 4688, i64 4695, i64 4696, i64 4697, i64 4698, i64 4702, i64 4704, i64 4745, i64 4746, i64 4750, i64 4752, i64 4785, i64 4786, i64 4790, i64 4792, i64 4799, i64 4800, i64 4801, i64 4802, i64 4806, i64 4808, i64 4823, i64 4824, i64 4881, i64 4882, i64 4886, i64 4888, i64 4955, i64 4957, i64 4960, i64 4992, i64 5008, i64 5024, i64 5109, i64 5121, i64 5741, i64 5743, i64 5760, i64 5761, i64 5787, i64 5792, i64 5867, i64 5870, i64 5881, i64 5888, i64 5901, i64 5902, i64 5909, i64 5920, i64 5941, i64 5952, i64 5972, i64 5984, i64 5997, i64 5998, i64 6001, i64 6002, i64 6004, i64 6016, i64 6100, i64 6103, i64 6104, i64 6108, i64 6110, i64 6112, i64 6122, i64 6155, i64 6158, i64 6160, i64 6170, i64 6176, i64 6264, i64 6272, i64 6315, i64 6320, i64 6390, i64 6400, i64 6431, i64 6432, i64 6444, i64 6448, i64 6460, i64 6470, i64 6510, i64 6512, i64 6517, i64 6528, i64 6572, i64 6576, i64 6602, i64 6608, i64 6618, i64 6656, i64 6684, i64 6688, i64 6751, i64 6752, i64 6781, i64 6783, i64 6794, i64 6800, i64 6810, i64 6823, i64 6824, i64 6832, i64 6847, i64 6912, i64 6988, i64 6992, i64 7002, i64 7019, i64 7028, i64 7040, i64 7156, i64 7168, i64 7224, i64 7232, i64 7242, i64 7245, i64 7294, i64 7376, i64 7379, i64 7380, i64 7415, i64 7416, i64 7418, i64 7424, i64 7670, i64 7676, i64 7958, i64 7960, i64 7966, i64 7968, i64 8006, i64 8008, i64 8014, i64 8016, i64 8024, i64 8025, i64 8026, i64 8027, i64 8028, i64 8029, i64 8030, i64 8031, i64 8062, i64 8064, i64 8117, i64 8118, i64 8125, i64 8126, i64 8127, i64 8130, i64 8133, i64 8134, i64 8141, i64 8144, i64 8148, i64 8150, i64 8156, i64 8160, i64 8173, i64 8178, i64 8181, i64 8182, i64 8189, i64 8204, i64 8206, i64 8255, i64 8257, i64 8276, i64 8277, i64 8305, i64 8306, i64 8319, i64 8320, i64 8336, i64 8349, i64 8400, i64 8433, i64 8450, i64 8451, i64 8455, i64 8456, i64 8458, i64 8468, i64 8469, i64 8470, i64 8473, i64 8478, i64 8484, i64 8485, i64 8486, i64 8487, i64 8488, i64 8489, i64 8490, i64 8494, i64 8495, i64 8506, i64 8508, i64 8512, i64 8517, i64 8522, i64 8526, i64 8527, i64 8544, i64 8585, i64 9398, i64 9450, i64 11264, i64 11311, i64 11312, i64 11359, i64 11360, i64 11493, i64 11499, i64 11508, i64 11520, i64 11558, i64 11559, i64 11560, i64 11565, i64 11566, i64 11568, i64 11624, i64 11631, i64 11632, i64 11647, i64 11671, i64 11680, i64 11687, i64 11688, i64 11695, i64 11696, i64 11703, i64 11704, i64 11711, i64 11712, i64 11719, i64 11720, i64 11727, i64 11728, i64 11735, i64 11736, i64 11743, i64 11744, i64 11776, i64 11823, i64 11824, i64 12293, i64 12296, i64 12321, i64 12336, i64 12337, i64 12342, i64 12344, i64 12349, i64 12353, i64 12439, i64 12441, i64 12443, i64 12445, i64 12448, i64 12449, i64 12539, i64 12540, i64 12544, i64 12549, i64 12590, i64 12593, i64 12687, i64 12704, i64 12731, i64 12784, i64 12800, i64 13312, i64 19894, i64 19968, i64 40909, i64 40960, i64 42125, i64 42192, i64 42238, i64 42240, i64 42509, i64 42512, i64 42540, i64 42560, i64 42611, i64 42612, i64 42622, i64 42623, i64 42654, i64 42655, i64 42738, i64 42775, i64 42784, i64 42786, i64 42889, i64 42891, i64 42895, i64 42896, i64 42926, i64 42928, i64 42930, i64 42999, i64 43048, i64 43072, i64 43124, i64 43136, i64 43205, i64 43216, i64 43226, i64 43232, i64 43256, i64 43259, i64 43260, i64 43264, i64 43310, i64 43312, i64 43348, i64 43360, i64 43389, i64 43392, i64 43457, i64 43471, i64 43482, i64 43488, i64 43519, i64 43520, i64 43575, i64 43584, i64 43598, i64 43600, i64 43610, i64 43616, i64 43639, i64 43642, i64 43715, i64 43739, i64 43742, i64 43744, i64 43760, i64 43762, i64 43767, i64 43777, i64 43783, i64 43785, i64 43791, i64 43793, i64 43799, i64 43808, i64 43815, i64 43816, i64 43823, i64 43824, i64 43867, i64 43868, i64 43872, i64 43876, i64 43878, i64 43968, i64 44011, i64 44012, i64 44014, i64 44016, i64 44026, i64 44032, i64 55204, i64 55216, i64 55239, i64 55243, i64 55292, i64 63744, i64 64110, i64 64112, i64 64218, i64 64256, i64 64263, i64 64275, i64 64280, i64 64285, i64 64297, i64 64298, i64 64311, i64 64312, i64 64317, i64 64318, i64 64319, i64 64320, i64 64322, i64 64323, i64 64325, i64 64326, i64 64434, i64 64467, i64 64830, i64 64848, i64 64912, i64 64914, i64 64968, i64 65008, i64 65020, i64 65024, i64 65040, i64 65056, i64 65070, i64 65075, i64 65077, i64 65101, i64 65104, i64 65136, i64 65141, i64 65142, i64 65277, i64 65296, i64 65306, i64 65313, i64 65339, i64 65343, i64 65344, i64 65345, i64 65371, i64 65382, i64 65471, i64 65474, i64 65480, i64 65482, i64 65488, i64 65490, i64 65496, i64 65498, i64 65501, i64 65536, i64 65548, i64 65549, i64 65575, i64 65576, i64 65595, i64 65596, i64 65598, i64 65599, i64 65614, i64 65616, i64 65630, i64 65664, i64 65787, i64 65856, i64 65909, i64 66045, i64 66046, i64 66176, i64 66205, i64 66208, i64 66257, i64 66272, i64 66273, i64 66304, i64 66336, i64 66352, i64 66379, i64 66384, i64 66427, i64 66432, i64 66462, i64 66464, i64 66500, i64 66504, i64 66512, i64 66513, i64 66518, i64 66560, i64 66718, i64 66720, i64 66730, i64 66816, i64 66856, i64 66864, i64 66916, i64 67072, i64 67383, i64 67392, i64 67414, i64 67424, i64 67432, i64 67584, i64 67590, i64 67592, i64 67593, i64 67594, i64 67638, i64 67639, i64 67641, i64 67644, i64 67645, i64 67647, i64 67670, i64 67680, i64 67703, i64 67712, i64 67743, i64 67840, i64 67862, i64 67872, i64 67898, i64 67968, i64 68024, i64 68030, i64 68032, i64 68096, i64 68100, i64 68101, i64 68103, i64 68108, i64 68116, i64 68117, i64 68120, i64 68121, i64 68148, i64 68152, i64 68155, i64 68159, i64 68160, i64 68192, i64 68221, i64 68224, i64 68253, i64 68288, i64 68296, i64 68297, i64 68327, i64 68352, i64 68406, i64 68416, i64 68438, i64 68448, i64 68467, i64 68480, i64 68498, i64 68608, i64 68681, i64 69632, i64 69703, i64 69734, i64 69744, i64 69759, i64 69819, i64 69840, i64 69865, i64 69872, i64 69882, i64 69888, i64 69941, i64 69942, i64 69952, i64 69968, i64 70004, i64 70006, i64 70007, i64 70016, i64 70085, i64 70096, i64 70107, i64 70144, i64 70162, i64 70163, i64 70200, i64 70320, i64 70379, i64 70384, i64 70394, i64 70401, i64 70404, i64 70405, i64 70413, i64 70415, i64 70417, i64 70419, i64 70441, i64 70442, i64 70449, i64 70450, i64 70452, i64 70453, i64 70458, i64 70460, i64 70469, i64 70471, i64 70473, i64 70475, i64 70478, i64 70487, i64 70488, i64 70493, i64 70500, i64 70502, i64 70509, i64 70512, i64 70517, i64 70784, i64 70854, i64 70855, i64 70856, i64 70864, i64 70874, i64 71040, i64 71094, i64 71096, i64 71105, i64 71168, i64 71233, i64 71236, i64 71237, i64 71248, i64 71258, i64 71296, i64 71352, i64 71360, i64 71370, i64 71840, i64 71914, i64 71935, i64 71936, i64 72384, i64 72441, i64 73728, i64 74649, i64 74752, i64 74863, i64 77824, i64 78895, i64 92160, i64 92729, i64 92736, i64 92767, i64 92768, i64 92778, i64 92880, i64 92910, i64 92912, i64 92917, i64 92928, i64 92983, i64 92992, i64 92996, i64 93008, i64 93018, i64 93027, i64 93048, i64 93053, i64 93072, i64 93952, i64 94021, i64 94032, i64 94079, i64 94095, i64 94112, i64 110592, i64 110594, i64 113664, i64 113771, i64 113776, i64 113789, i64 113792, i64 113801, i64 113808, i64 113818, i64 113821, i64 113823, i64 119141, i64 119146, i64 119149, i64 119155, i64 119163, i64 119171, i64 119173, i64 119180, i64 119210, i64 119214, i64 119362, i64 119365, i64 119808, i64 119893, i64 119894, i64 119965, i64 119966, i64 119968, i64 119970, i64 119971, i64 119973, i64 119975, i64 119977, i64 119981, i64 119982, i64 119994, i64 119995, i64 119996, i64 119997, i64 120004, i64 120005, i64 120070, i64 120071, i64 120075, i64 120077, i64 120085, i64 120086, i64 120093, i64 120094, i64 120122, i64 120123, i64 120127, i64 120128, i64 120133, i64 120134, i64 120135, i64 120138, i64 120145, i64 120146, i64 120486, i64 120488, i64 120513, i64 120514, i64 120539, i64 120540, i64 120571, i64 120572, i64 120597, i64 120598, i64 120629, i64 120630, i64 120655, i64 120656, i64 120687, i64 120688, i64 120713, i64 120714, i64 120745, i64 120746, i64 120771, i64 120772, i64 120780, i64 120782, i64 120832, i64 124928, i64 125125, i64 125136, i64 125143, i64 126464, i64 126468, i64 126469, i64 126496, i64 126497, i64 126499, i64 126500, i64 126501, i64 126503, i64 126504, i64 126505, i64 126515, i64 126516, i64 126520, i64 126521, i64 126522, i64 126523, i64 126524, i64 126530, i64 126531, i64 126535, i64 126536, i64 126537, i64 126538, i64 126539, i64 126540, i64 126541, i64 126544, i64 126545, i64 126547, i64 126548, i64 126549, i64 126551, i64 126552, i64 126553, i64 126554, i64 126555, i64 126556, i64 126557, i64 126558, i64 126559, i64 126560, i64 126561, i64 126563, i64 126564, i64 126565, i64 126567, i64 126571, i64 126572, i64 126579, i64 126580, i64 126584, i64 126585, i64 126589, i64 126590, i64 126591, i64 126592, i64 126602, i64 126603, i64 126620, i64 126625, i64 126628, i64 126629, i64 126634, i64 126635, i64 126652, i64 127280, i64 127306, i64 127312, i64 127338, i64 127344, i64 127370, i64 131072, i64 173783, i64 173824, i64 177973, i64 177984, i64 178206, i64 194560, i64 195102, i64 917760, i64 918000], align 16
@XPosixXDigit_invlist = internal constant [16 x i64] [i64 13, i64 148565664, i64 1, i64 0, i64 48, i64 58, i64 65, i64 71, i64 97, i64 103, i64 65296, i64 65306, i64 65313, i64 65319, i64 65345, i64 65351], align 16
@Grapheme_Cluster_Break_invlist = internal constant [1487 x i64] [i64 1484, i64 148565664, i64 0, i64 0, i64 10, i64 11, i64 13, i64 14, i64 32, i64 127, i64 160, i64 173, i64 174, i64 768, i64 880, i64 1155, i64 1162, i64 1425, i64 1470, i64 1471, i64 1472, i64 1473, i64 1475, i64 1476, i64 1478, i64 1479, i64 1480, i64 1536, i64 1542, i64 1552, i64 1563, i64 1564, i64 1565, i64 1611, i64 1632, i64 1648, i64 1649, i64 1750, i64 1757, i64 1758, i64 1759, i64 1765, i64 1767, i64 1769, i64 1770, i64 1774, i64 1807, i64 1808, i64 1809, i64 1810, i64 1840, i64 1867, i64 1958, i64 1969, i64 2027, i64 2036, i64 2070, i64 2074, i64 2075, i64 2084, i64 2085, i64 2088, i64 2089, i64 2094, i64 2137, i64 2140, i64 2276, i64 2307, i64 2308, i64 2362, i64 2363, i64 2364, i64 2365, i64 2366, i64 2369, i64 2377, i64 2381, i64 2382, i64 2384, i64 2385, i64 2392, i64 2402, i64 2404, i64 2433, i64 2434, i64 2436, i64 2492, i64 2493, i64 2494, i64 2495, i64 2497, i64 2501, i64 2503, i64 2505, i64 2507, i64 2509, i64 2510, i64 2519, i64 2520, i64 2530, i64 2532, i64 2561, i64 2563, i64 2564, i64 2620, i64 2621, i64 2622, i64 2625, i64 2627, i64 2631, i64 2633, i64 2635, i64 2638, i64 2641, i64 2642, i64 2672, i64 2674, i64 2677, i64 2678, i64 2689, i64 2691, i64 2692, i64 2748, i64 2749, i64 2750, i64 2753, i64 2758, i64 2759, i64 2761, i64 2762, i64 2763, i64 2765, i64 2766, i64 2786, i64 2788, i64 2817, i64 2818, i64 2820, i64 2876, i64 2877, i64 2878, i64 2880, i64 2881, i64 2885, i64 2887, i64 2889, i64 2891, i64 2893, i64 2894, i64 2902, i64 2904, i64 2914, i64 2916, i64 2946, i64 2947, i64 3006, i64 3007, i64 3008, i64 3009, i64 3011, i64 3014, i64 3017, i64 3018, i64 3021, i64 3022, i64 3031, i64 3032, i64 3072, i64 3073, i64 3076, i64 3134, i64 3137, i64 3141, i64 3142, i64 3145, i64 3146, i64 3150, i64 3157, i64 3159, i64 3170, i64 3172, i64 3201, i64 3202, i64 3204, i64 3260, i64 3261, i64 3262, i64 3263, i64 3264, i64 3266, i64 3267, i64 3269, i64 3270, i64 3271, i64 3273, i64 3274, i64 3276, i64 3278, i64 3285, i64 3287, i64 3298, i64 3300, i64 3329, i64 3330, i64 3332, i64 3390, i64 3391, i64 3393, i64 3397, i64 3398, i64 3401, i64 3402, i64 3405, i64 3406, i64 3415, i64 3416, i64 3426, i64 3428, i64 3458, i64 3460, i64 3530, i64 3531, i64 3535, i64 3536, i64 3538, i64 3541, i64 3542, i64 3543, i64 3544, i64 3551, i64 3552, i64 3570, i64 3572, i64 3633, i64 3634, i64 3635, i64 3636, i64 3643, i64 3655, i64 3663, i64 3761, i64 3762, i64 3763, i64 3764, i64 3770, i64 3771, i64 3773, i64 3784, i64 3790, i64 3864, i64 3866, i64 3893, i64 3894, i64 3895, i64 3896, i64 3897, i64 3898, i64 3902, i64 3904, i64 3953, i64 3967, i64 3968, i64 3973, i64 3974, i64 3976, i64 3981, i64 3992, i64 3993, i64 4029, i64 4038, i64 4039, i64 4141, i64 4145, i64 4146, i64 4152, i64 4153, i64 4155, i64 4157, i64 4159, i64 4182, i64 4184, i64 4186, i64 4190, i64 4193, i64 4209, i64 4213, i64 4226, i64 4227, i64 4228, i64 4229, i64 4231, i64 4237, i64 4238, i64 4253, i64 4254, i64 4352, i64 4448, i64 4520, i64 4608, i64 4957, i64 4960, i64 5906, i64 5909, i64 5938, i64 5941, i64 5970, i64 5972, i64 6002, i64 6004, i64 6068, i64 6070, i64 6071, i64 6078, i64 6086, i64 6087, i64 6089, i64 6100, i64 6109, i64 6110, i64 6155, i64 6158, i64 6159, i64 6313, i64 6314, i64 6432, i64 6435, i64 6439, i64 6441, i64 6444, i64 6448, i64 6450, i64 6451, i64 6457, i64 6460, i64 6581, i64 6584, i64 6586, i64 6587, i64 6679, i64 6681, i64 6683, i64 6684, i64 6741, i64 6742, i64 6743, i64 6744, i64 6751, i64 6752, i64 6753, i64 6754, i64 6755, i64 6757, i64 6765, i64 6771, i64 6781, i64 6783, i64 6784, i64 6832, i64 6847, i64 6912, i64 6916, i64 6917, i64 6964, i64 6965, i64 6966, i64 6971, i64 6972, i64 6973, i64 6978, i64 6979, i64 6981, i64 7019, i64 7028, i64 7040, i64 7042, i64 7043, i64 7073, i64 7074, i64 7078, i64 7080, i64 7082, i64 7083, i64 7086, i64 7142, i64 7143, i64 7144, i64 7146, i64 7149, i64 7150, i64 7151, i64 7154, i64 7156, i64 7204, i64 7212, i64 7220, i64 7222, i64 7224, i64 7376, i64 7379, i64 7380, i64 7393, i64 7394, i64 7401, i64 7405, i64 7406, i64 7410, i64 7412, i64 7413, i64 7416, i64 7418, i64 7616, i64 7670, i64 7676, i64 7680, i64 8203, i64 8204, i64 8206, i64 8208, i64 8232, i64 8239, i64 8288, i64 8304, i64 8400, i64 8433, i64 11503, i64 11506, i64 11647, i64 11648, i64 11744, i64 11776, i64 12330, i64 12336, i64 12441, i64 12443, i64 42607, i64 42611, i64 42612, i64 42622, i64 42655, i64 42656, i64 42736, i64 42738, i64 43010, i64 43011, i64 43014, i64 43015, i64 43019, i64 43020, i64 43043, i64 43045, i64 43047, i64 43048, i64 43136, i64 43138, i64 43188, i64 43204, i64 43205, i64 43232, i64 43250, i64 43302, i64 43310, i64 43335, i64 43346, i64 43348, i64 43360, i64 43389, i64 43392, i64 43395, i64 43396, i64 43443, i64 43444, i64 43446, i64 43450, i64 43452, i64 43453, i64 43457, i64 43493, i64 43494, i64 43561, i64 43567, i64 43569, i64 43571, i64 43573, i64 43575, i64 43587, i64 43588, i64 43596, i64 43597, i64 43598, i64 43644, i64 43645, i64 43696, i64 43697, i64 43698, i64 43701, i64 43703, i64 43705, i64 43710, i64 43712, i64 43713, i64 43714, i64 43755, i64 43756, i64 43758, i64 43760, i64 43765, i64 43766, i64 43767, i64 44003, i64 44005, i64 44006, i64 44008, i64 44009, i64 44011, i64 44012, i64 44013, i64 44014, i64 44032, i64 44033, i64 44060, i64 44061, i64 44088, i64 44089, i64 44116, i64 44117, i64 44144, i64 44145, i64 44172, i64 44173, i64 44200, i64 44201, i64 44228, i64 44229, i64 44256, i64 44257, i64 44284, i64 44285, i64 44312, i64 44313, i64 44340, i64 44341, i64 44368, i64 44369, i64 44396, i64 44397, i64 44424, i64 44425, i64 44452, i64 44453, i64 44480, i64 44481, i64 44508, i64 44509, i64 44536, i64 44537, i64 44564, i64 44565, i64 44592, i64 44593, i64 44620, i64 44621, i64 44648, i64 44649, i64 44676, i64 44677, i64 44704, i64 44705, i64 44732, i64 44733, i64 44760, i64 44761, i64 44788, i64 44789, i64 44816, i64 44817, i64 44844, i64 44845, i64 44872, i64 44873, i64 44900, i64 44901, i64 44928, i64 44929, i64 44956, i64 44957, i64 44984, i64 44985, i64 45012, i64 45013, i64 45040, i64 45041, i64 45068, i64 45069, i64 45096, i64 45097, i64 45124, i64 45125, i64 45152, i64 45153, i64 45180, i64 45181, i64 45208, i64 45209, i64 45236, i64 45237, i64 45264, i64 45265, i64 45292, i64 45293, i64 45320, i64 45321, i64 45348, i64 45349, i64 45376, i64 45377, i64 45404, i64 45405, i64 45432, i64 45433, i64 45460, i64 45461, i64 45488, i64 45489, i64 45516, i64 45517, i64 45544, i64 45545, i64 45572, i64 45573, i64 45600, i64 45601, i64 45628, i64 45629, i64 45656, i64 45657, i64 45684, i64 45685, i64 45712, i64 45713, i64 45740, i64 45741, i64 45768, i64 45769, i64 45796, i64 45797, i64 45824, i64 45825, i64 45852, i64 45853, i64 45880, i64 45881, i64 45908, i64 45909, i64 45936, i64 45937, i64 45964, i64 45965, i64 45992, i64 45993, i64 46020, i64 46021, i64 46048, i64 46049, i64 46076, i64 46077, i64 46104, i64 46105, i64 46132, i64 46133, i64 46160, i64 46161, i64 46188, i64 46189, i64 46216, i64 46217, i64 46244, i64 46245, i64 46272, i64 46273, i64 46300, i64 46301, i64 46328, i64 46329, i64 46356, i64 46357, i64 46384, i64 46385, i64 46412, i64 46413, i64 46440, i64 46441, i64 46468, i64 46469, i64 46496, i64 46497, i64 46524, i64 46525, i64 46552, i64 46553, i64 46580, i64 46581, i64 46608, i64 46609, i64 46636, i64 46637, i64 46664, i64 46665, i64 46692, i64 46693, i64 46720, i64 46721, i64 46748, i64 46749, i64 46776, i64 46777, i64 46804, i64 46805, i64 46832, i64 46833, i64 46860, i64 46861, i64 46888, i64 46889, i64 46916, i64 46917, i64 46944, i64 46945, i64 46972, i64 46973, i64 47000, i64 47001, i64 47028, i64 47029, i64 47056, i64 47057, i64 47084, i64 47085, i64 47112, i64 47113, i64 47140, i64 47141, i64 47168, i64 47169, i64 47196, i64 47197, i64 47224, i64 47225, i64 47252, i64 47253, i64 47280, i64 47281, i64 47308, i64 47309, i64 47336, i64 47337, i64 47364, i64 47365, i64 47392, i64 47393, i64 47420, i64 47421, i64 47448, i64 47449, i64 47476, i64 47477, i64 47504, i64 47505, i64 47532, i64 47533, i64 47560, i64 47561, i64 47588, i64 47589, i64 47616, i64 47617, i64 47644, i64 47645, i64 47672, i64 47673, i64 47700, i64 47701, i64 47728, i64 47729, i64 47756, i64 47757, i64 47784, i64 47785, i64 47812, i64 47813, i64 47840, i64 47841, i64 47868, i64 47869, i64 47896, i64 47897, i64 47924, i64 47925, i64 47952, i64 47953, i64 47980, i64 47981, i64 48008, i64 48009, i64 48036, i64 48037, i64 48064, i64 48065, i64 48092, i64 48093, i64 48120, i64 48121, i64 48148, i64 48149, i64 48176, i64 48177, i64 48204, i64 48205, i64 48232, i64 48233, i64 48260, i64 48261, i64 48288, i64 48289, i64 48316, i64 48317, i64 48344, i64 48345, i64 48372, i64 48373, i64 48400, i64 48401, i64 48428, i64 48429, i64 48456, i64 48457, i64 48484, i64 48485, i64 48512, i64 48513, i64 48540, i64 48541, i64 48568, i64 48569, i64 48596, i64 48597, i64 48624, i64 48625, i64 48652, i64 48653, i64 48680, i64 48681, i64 48708, i64 48709, i64 48736, i64 48737, i64 48764, i64 48765, i64 48792, i64 48793, i64 48820, i64 48821, i64 48848, i64 48849, i64 48876, i64 48877, i64 48904, i64 48905, i64 48932, i64 48933, i64 48960, i64 48961, i64 48988, i64 48989, i64 49016, i64 49017, i64 49044, i64 49045, i64 49072, i64 49073, i64 49100, i64 49101, i64 49128, i64 49129, i64 49156, i64 49157, i64 49184, i64 49185, i64 49212, i64 49213, i64 49240, i64 49241, i64 49268, i64 49269, i64 49296, i64 49297, i64 49324, i64 49325, i64 49352, i64 49353, i64 49380, i64 49381, i64 49408, i64 49409, i64 49436, i64 49437, i64 49464, i64 49465, i64 49492, i64 49493, i64 49520, i64 49521, i64 49548, i64 49549, i64 49576, i64 49577, i64 49604, i64 49605, i64 49632, i64 49633, i64 49660, i64 49661, i64 49688, i64 49689, i64 49716, i64 49717, i64 49744, i64 49745, i64 49772, i64 49773, i64 49800, i64 49801, i64 49828, i64 49829, i64 49856, i64 49857, i64 49884, i64 49885, i64 49912, i64 49913, i64 49940, i64 49941, i64 49968, i64 49969, i64 49996, i64 49997, i64 50024, i64 50025, i64 50052, i64 50053, i64 50080, i64 50081, i64 50108, i64 50109, i64 50136, i64 50137, i64 50164, i64 50165, i64 50192, i64 50193, i64 50220, i64 50221, i64 50248, i64 50249, i64 50276, i64 50277, i64 50304, i64 50305, i64 50332, i64 50333, i64 50360, i64 50361, i64 50388, i64 50389, i64 50416, i64 50417, i64 50444, i64 50445, i64 50472, i64 50473, i64 50500, i64 50501, i64 50528, i64 50529, i64 50556, i64 50557, i64 50584, i64 50585, i64 50612, i64 50613, i64 50640, i64 50641, i64 50668, i64 50669, i64 50696, i64 50697, i64 50724, i64 50725, i64 50752, i64 50753, i64 50780, i64 50781, i64 50808, i64 50809, i64 50836, i64 50837, i64 50864, i64 50865, i64 50892, i64 50893, i64 50920, i64 50921, i64 50948, i64 50949, i64 50976, i64 50977, i64 51004, i64 51005, i64 51032, i64 51033, i64 51060, i64 51061, i64 51088, i64 51089, i64 51116, i64 51117, i64 51144, i64 51145, i64 51172, i64 51173, i64 51200, i64 51201, i64 51228, i64 51229, i64 51256, i64 51257, i64 51284, i64 51285, i64 51312, i64 51313, i64 51340, i64 51341, i64 51368, i64 51369, i64 51396, i64 51397, i64 51424, i64 51425, i64 51452, i64 51453, i64 51480, i64 51481, i64 51508, i64 51509, i64 51536, i64 51537, i64 51564, i64 51565, i64 51592, i64 51593, i64 51620, i64 51621, i64 51648, i64 51649, i64 51676, i64 51677, i64 51704, i64 51705, i64 51732, i64 51733, i64 51760, i64 51761, i64 51788, i64 51789, i64 51816, i64 51817, i64 51844, i64 51845, i64 51872, i64 51873, i64 51900, i64 51901, i64 51928, i64 51929, i64 51956, i64 51957, i64 51984, i64 51985, i64 52012, i64 52013, i64 52040, i64 52041, i64 52068, i64 52069, i64 52096, i64 52097, i64 52124, i64 52125, i64 52152, i64 52153, i64 52180, i64 52181, i64 52208, i64 52209, i64 52236, i64 52237, i64 52264, i64 52265, i64 52292, i64 52293, i64 52320, i64 52321, i64 52348, i64 52349, i64 52376, i64 52377, i64 52404, i64 52405, i64 52432, i64 52433, i64 52460, i64 52461, i64 52488, i64 52489, i64 52516, i64 52517, i64 52544, i64 52545, i64 52572, i64 52573, i64 52600, i64 52601, i64 52628, i64 52629, i64 52656, i64 52657, i64 52684, i64 52685, i64 52712, i64 52713, i64 52740, i64 52741, i64 52768, i64 52769, i64 52796, i64 52797, i64 52824, i64 52825, i64 52852, i64 52853, i64 52880, i64 52881, i64 52908, i64 52909, i64 52936, i64 52937, i64 52964, i64 52965, i64 52992, i64 52993, i64 53020, i64 53021, i64 53048, i64 53049, i64 53076, i64 53077, i64 53104, i64 53105, i64 53132, i64 53133, i64 53160, i64 53161, i64 53188, i64 53189, i64 53216, i64 53217, i64 53244, i64 53245, i64 53272, i64 53273, i64 53300, i64 53301, i64 53328, i64 53329, i64 53356, i64 53357, i64 53384, i64 53385, i64 53412, i64 53413, i64 53440, i64 53441, i64 53468, i64 53469, i64 53496, i64 53497, i64 53524, i64 53525, i64 53552, i64 53553, i64 53580, i64 53581, i64 53608, i64 53609, i64 53636, i64 53637, i64 53664, i64 53665, i64 53692, i64 53693, i64 53720, i64 53721, i64 53748, i64 53749, i64 53776, i64 53777, i64 53804, i64 53805, i64 53832, i64 53833, i64 53860, i64 53861, i64 53888, i64 53889, i64 53916, i64 53917, i64 53944, i64 53945, i64 53972, i64 53973, i64 54000, i64 54001, i64 54028, i64 54029, i64 54056, i64 54057, i64 54084, i64 54085, i64 54112, i64 54113, i64 54140, i64 54141, i64 54168, i64 54169, i64 54196, i64 54197, i64 54224, i64 54225, i64 54252, i64 54253, i64 54280, i64 54281, i64 54308, i64 54309, i64 54336, i64 54337, i64 54364, i64 54365, i64 54392, i64 54393, i64 54420, i64 54421, i64 54448, i64 54449, i64 54476, i64 54477, i64 54504, i64 54505, i64 54532, i64 54533, i64 54560, i64 54561, i64 54588, i64 54589, i64 54616, i64 54617, i64 54644, i64 54645, i64 54672, i64 54673, i64 54700, i64 54701, i64 54728, i64 54729, i64 54756, i64 54757, i64 54784, i64 54785, i64 54812, i64 54813, i64 54840, i64 54841, i64 54868, i64 54869, i64 54896, i64 54897, i64 54924, i64 54925, i64 54952, i64 54953, i64 54980, i64 54981, i64 55008, i64 55009, i64 55036, i64 55037, i64 55064, i64 55065, i64 55092, i64 55093, i64 55120, i64 55121, i64 55148, i64 55149, i64 55176, i64 55177, i64 55204, i64 55216, i64 55239, i64 55243, i64 55292, i64 55296, i64 57344, i64 64286, i64 64287, i64 65024, i64 65040, i64 65056, i64 65070, i64 65279, i64 65280, i64 65438, i64 65440, i64 65520, i64 65532, i64 66045, i64 66046, i64 66272, i64 66273, i64 66422, i64 66427, i64 68097, i64 68100, i64 68101, i64 68103, i64 68108, i64 68112, i64 68152, i64 68155, i64 68159, i64 68160, i64 68325, i64 68327, i64 69632, i64 69633, i64 69634, i64 69635, i64 69688, i64 69703, i64 69759, i64 69762, i64 69763, i64 69808, i64 69811, i64 69815, i64 69817, i64 69819, i64 69821, i64 69822, i64 69888, i64 69891, i64 69927, i64 69932, i64 69933, i64 69941, i64 70003, i64 70004, i64 70016, i64 70018, i64 70019, i64 70067, i64 70070, i64 70079, i64 70081, i64 70188, i64 70191, i64 70194, i64 70196, i64 70197, i64 70198, i64 70200, i64 70367, i64 70368, i64 70371, i64 70379, i64 70401, i64 70402, i64 70404, i64 70460, i64 70461, i64 70462, i64 70463, i64 70464, i64 70465, i64 70469, i64 70471, i64 70473, i64 70475, i64 70478, i64 70487, i64 70488, i64 70498, i64 70500, i64 70502, i64 70509, i64 70512, i64 70517, i64 70832, i64 70833, i64 70835, i64 70841, i64 70842, i64 70843, i64 70845, i64 70846, i64 70847, i64 70849, i64 70850, i64 70852, i64 71087, i64 71088, i64 71090, i64 71094, i64 71096, i64 71100, i64 71102, i64 71103, i64 71105, i64 71216, i64 71219, i64 71227, i64 71229, i64 71230, i64 71231, i64 71233, i64 71339, i64 71340, i64 71341, i64 71342, i64 71344, i64 71350, i64 71351, i64 71352, i64 92912, i64 92917, i64 92976, i64 92983, i64 94033, i64 94079, i64 94095, i64 94099, i64 113821, i64 113823, i64 113824, i64 113828, i64 119141, i64 119142, i64 119143, i64 119146, i64 119149, i64 119150, i64 119155, i64 119163, i64 119171, i64 119173, i64 119180, i64 119210, i64 119214, i64 119362, i64 119365, i64 125136, i64 125143, i64 127462, i64 127488, i64 917504, i64 917760, i64 918000, i64 921600], align 16
@PL_GCB_invlist = external dso_local global %struct.sv*, align 8
@Sentence_Break_invlist = internal constant [2838 x i64] [i64 2835, i64 148565664, i64 0, i64 0, i64 9, i64 10, i64 11, i64 13, i64 14, i64 32, i64 33, i64 34, i64 35, i64 39, i64 42, i64 44, i64 46, i64 47, i64 48, i64 58, i64 59, i64 63, i64 64, i64 65, i64 91, i64 92, i64 93, i64 94, i64 97, i64 123, i64 124, i64 125, i64 126, i64 133, i64 134, i64 160, i64 161, i64 170, i64 171, i64 172, i64 173, i64 174, i64 181, i64 182, i64 186, i64 187, i64 188, i64 192, i64 215, i64 216, i64 223, i64 247, i64 248, i64 256, i64 257, i64 258, i64 259, i64 260, i64 261, i64 262, i64 263, i64 264, i64 265, i64 266, i64 267, i64 268, i64 269, i64 270, i64 271, i64 272, i64 273, i64 274, i64 275, i64 276, i64 277, i64 278, i64 279, i64 280, i64 281, i64 282, i64 283, i64 284, i64 285, i64 286, i64 287, i64 288, i64 289, i64 290, i64 291, i64 292, i64 293, i64 294, i64 295, i64 296, i64 297, i64 298, i64 299, i64 300, i64 301, i64 302, i64 303, i64 304, i64 305, i64 306, i64 307, i64 308, i64 309, i64 310, i64 311, i64 313, i64 314, i64 315, i64 316, i64 317, i64 318, i64 319, i64 320, i64 321, i64 322, i64 323, i64 324, i64 325, i64 326, i64 327, i64 328, i64 330, i64 331, i64 332, i64 333, i64 334, i64 335, i64 336, i64 337, i64 338, i64 339, i64 340, i64 341, i64 342, i64 343, i64 344, i64 345, i64 346, i64 347, i64 348, i64 349, i64 350, i64 351, i64 352, i64 353, i64 354, i64 355, i64 356, i64 357, i64 358, i64 359, i64 360, i64 361, i64 362, i64 363, i64 364, i64 365, i64 366, i64 367, i64 368, i64 369, i64 370, i64 371, i64 372, i64 373, i64 374, i64 375, i64 376, i64 378, i64 379, i64 380, i64 381, i64 382, i64 385, i64 387, i64 388, i64 389, i64 390, i64 392, i64 393, i64 396, i64 398, i64 402, i64 403, i64 405, i64 406, i64 409, i64 412, i64 414, i64 415, i64 417, i64 418, i64 419, i64 420, i64 421, i64 422, i64 424, i64 425, i64 426, i64 428, i64 429, i64 430, i64 432, i64 433, i64 436, i64 437, i64 438, i64 439, i64 441, i64 443, i64 444, i64 445, i64 448, i64 452, i64 454, i64 455, i64 457, i64 458, i64 460, i64 461, i64 462, i64 463, i64 464, i64 465, i64 466, i64 467, i64 468, i64 469, i64 470, i64 471, i64 472, i64 473, i64 474, i64 475, i64 476, i64 478, i64 479, i64 480, i64 481, i64 482, i64 483, i64 484, i64 485, i64 486, i64 487, i64 488, i64 489, i64 490, i64 491, i64 492, i64 493, i64 494, i64 495, i64 497, i64 499, i64 500, i64 501, i64 502, i64 505, i64 506, i64 507, i64 508, i64 509, i64 510, i64 511, i64 512, i64 513, i64 514, i64 515, i64 516, i64 517, i64 518, i64 519, i64 520, i64 521, i64 522, i64 523, i64 524, i64 525, i64 526, i64 527, i64 528, i64 529, i64 530, i64 531, i64 532, i64 533, i64 534, i64 535, i64 536, i64 537, i64 538, i64 539, i64 540, i64 541, i64 542, i64 543, i64 544, i64 545, i64 546, i64 547, i64 548, i64 549, i64 550, i64 551, i64 552, i64 553, i64 554, i64 555, i64 556, i64 557, i64 558, i64 559, i64 560, i64 561, i64 562, i64 563, i64 570, i64 572, i64 573, i64 575, i64 577, i64 578, i64 579, i64 583, i64 584, i64 585, i64 586, i64 587, i64 588, i64 589, i64 590, i64 591, i64 660, i64 661, i64 697, i64 704, i64 706, i64 710, i64 722, i64 736, i64 741, i64 748, i64 749, i64 750, i64 751, i64 768, i64 880, i64 881, i64 882, i64 883, i64 884, i64 885, i64 886, i64 887, i64 888, i64 890, i64 894, i64 895, i64 896, i64 902, i64 903, i64 904, i64 907, i64 908, i64 909, i64 910, i64 912, i64 913, i64 930, i64 931, i64 940, i64 975, i64 976, i64 978, i64 981, i64 984, i64 985, i64 986, i64 987, i64 988, i64 989, i64 990, i64 991, i64 992, i64 993, i64 994, i64 995, i64 996, i64 997, i64 998, i64 999, i64 1000, i64 1001, i64 1002, i64 1003, i64 1004, i64 1005, i64 1006, i64 1007, i64 1012, i64 1013, i64 1014, i64 1015, i64 1016, i64 1017, i64 1019, i64 1021, i64 1072, i64 1120, i64 1121, i64 1122, i64 1123, i64 1124, i64 1125, i64 1126, i64 1127, i64 1128, i64 1129, i64 1130, i64 1131, i64 1132, i64 1133, i64 1134, i64 1135, i64 1136, i64 1137, i64 1138, i64 1139, i64 1140, i64 1141, i64 1142, i64 1143, i64 1144, i64 1145, i64 1146, i64 1147, i64 1148, i64 1149, i64 1150, i64 1151, i64 1152, i64 1153, i64 1154, i64 1155, i64 1162, i64 1163, i64 1164, i64 1165, i64 1166, i64 1167, i64 1168, i64 1169, i64 1170, i64 1171, i64 1172, i64 1173, i64 1174, i64 1175, i64 1176, i64 1177, i64 1178, i64 1179, i64 1180, i64 1181, i64 1182, i64 1183, i64 1184, i64 1185, i64 1186, i64 1187, i64 1188, i64 1189, i64 1190, i64 1191, i64 1192, i64 1193, i64 1194, i64 1195, i64 1196, i64 1197, i64 1198, i64 1199, i64 1200, i64 1201, i64 1202, i64 1203, i64 1204, i64 1205, i64 1206, i64 1207, i64 1208, i64 1209, i64 1210, i64 1211, i64 1212, i64 1213, i64 1214, i64 1215, i64 1216, i64 1218, i64 1219, i64 1220, i64 1221, i64 1222, i64 1223, i64 1224, i64 1225, i64 1226, i64 1227, i64 1228, i64 1229, i64 1230, i64 1232, i64 1233, i64 1234, i64 1235, i64 1236, i64 1237, i64 1238, i64 1239, i64 1240, i64 1241, i64 1242, i64 1243, i64 1244, i64 1245, i64 1246, i64 1247, i64 1248, i64 1249, i64 1250, i64 1251, i64 1252, i64 1253, i64 1254, i64 1255, i64 1256, i64 1257, i64 1258, i64 1259, i64 1260, i64 1261, i64 1262, i64 1263, i64 1264, i64 1265, i64 1266, i64 1267, i64 1268, i64 1269, i64 1270, i64 1271, i64 1272, i64 1273, i64 1274, i64 1275, i64 1276, i64 1277, i64 1278, i64 1279, i64 1280, i64 1281, i64 1282, i64 1283, i64 1284, i64 1285, i64 1286, i64 1287, i64 1288, i64 1289, i64 1290, i64 1291, i64 1292, i64 1293, i64 1294, i64 1295, i64 1296, i64 1297, i64 1298, i64 1299, i64 1300, i64 1301, i64 1302, i64 1303, i64 1304, i64 1305, i64 1306, i64 1307, i64 1308, i64 1309, i64 1310, i64 1311, i64 1312, i64 1313, i64 1314, i64 1315, i64 1316, i64 1317, i64 1318, i64 1319, i64 1320, i64 1321, i64 1322, i64 1323, i64 1324, i64 1325, i64 1326, i64 1327, i64 1328, i64 1329, i64 1367, i64 1369, i64 1370, i64 1373, i64 1374, i64 1377, i64 1416, i64 1417, i64 1418, i64 1425, i64 1470, i64 1471, i64 1472, i64 1473, i64 1475, i64 1476, i64 1478, i64 1479, i64 1480, i64 1488, i64 1515, i64 1520, i64 1524, i64 1536, i64 1542, i64 1548, i64 1550, i64 1552, i64 1563, i64 1564, i64 1565, i64 1567, i64 1568, i64 1611, i64 1632, i64 1642, i64 1643, i64 1645, i64 1646, i64 1648, i64 1649, i64 1748, i64 1749, i64 1750, i64 1757, i64 1758, i64 1759, i64 1765, i64 1767, i64 1769, i64 1770, i64 1774, i64 1776, i64 1786, i64 1789, i64 1791, i64 1792, i64 1795, i64 1807, i64 1808, i64 1809, i64 1810, i64 1840, i64 1867, i64 1869, i64 1958, i64 1969, i64 1970, i64 1984, i64 1994, i64 2027, i64 2036, i64 2038, i64 2040, i64 2041, i64 2042, i64 2043, i64 2048, i64 2070, i64 2074, i64 2075, i64 2084, i64 2085, i64 2088, i64 2089, i64 2094, i64 2112, i64 2137, i64 2140, i64 2208, i64 2227, i64 2276, i64 2308, i64 2362, i64 2365, i64 2366, i64 2384, i64 2385, i64 2392, i64 2402, i64 2404, i64 2406, i64 2416, i64 2417, i64 2433, i64 2436, i64 2437, i64 2445, i64 2447, i64 2449, i64 2451, i64 2473, i64 2474, i64 2481, i64 2482, i64 2483, i64 2486, i64 2490, i64 2492, i64 2493, i64 2494, i64 2501, i64 2503, i64 2505, i64 2507, i64 2510, i64 2511, i64 2519, i64 2520, i64 2524, i64 2526, i64 2527, i64 2530, i64 2532, i64 2534, i64 2544, i64 2546, i64 2561, i64 2564, i64 2565, i64 2571, i64 2575, i64 2577, i64 2579, i64 2601, i64 2602, i64 2609, i64 2610, i64 2612, i64 2613, i64 2615, i64 2616, i64 2618, i64 2620, i64 2621, i64 2622, i64 2627, i64 2631, i64 2633, i64 2635, i64 2638, i64 2641, i64 2642, i64 2649, i64 2653, i64 2654, i64 2655, i64 2662, i64 2672, i64 2674, i64 2677, i64 2678, i64 2689, i64 2692, i64 2693, i64 2702, i64 2703, i64 2706, i64 2707, i64 2729, i64 2730, i64 2737, i64 2738, i64 2740, i64 2741, i64 2746, i64 2748, i64 2749, i64 2750, i64 2758, i64 2759, i64 2762, i64 2763, i64 2766, i64 2768, i64 2769, i64 2784, i64 2786, i64 2788, i64 2790, i64 2800, i64 2817, i64 2820, i64 2821, i64 2829, i64 2831, i64 2833, i64 2835, i64 2857, i64 2858, i64 2865, i64 2866, i64 2868, i64 2869, i64 2874, i64 2876, i64 2877, i64 2878, i64 2885, i64 2887, i64 2889, i64 2891, i64 2894, i64 2902, i64 2904, i64 2908, i64 2910, i64 2911, i64 2914, i64 2916, i64 2918, i64 2928, i64 2929, i64 2930, i64 2946, i64 2947, i64 2948, i64 2949, i64 2955, i64 2958, i64 2961, i64 2962, i64 2966, i64 2969, i64 2971, i64 2972, i64 2973, i64 2974, i64 2976, i64 2979, i64 2981, i64 2984, i64 2987, i64 2990, i64 3002, i64 3006, i64 3011, i64 3014, i64 3017, i64 3018, i64 3022, i64 3024, i64 3025, i64 3031, i64 3032, i64 3046, i64 3056, i64 3072, i64 3076, i64 3077, i64 3085, i64 3086, i64 3089, i64 3090, i64 3113, i64 3114, i64 3130, i64 3133, i64 3134, i64 3141, i64 3142, i64 3145, i64 3146, i64 3150, i64 3157, i64 3159, i64 3160, i64 3162, i64 3168, i64 3170, i64 3172, i64 3174, i64 3184, i64 3201, i64 3204, i64 3205, i64 3213, i64 3214, i64 3217, i64 3218, i64 3241, i64 3242, i64 3252, i64 3253, i64 3258, i64 3260, i64 3261, i64 3262, i64 3269, i64 3270, i64 3273, i64 3274, i64 3278, i64 3285, i64 3287, i64 3294, i64 3295, i64 3296, i64 3298, i64 3300, i64 3302, i64 3312, i64 3313, i64 3315, i64 3329, i64 3332, i64 3333, i64 3341, i64 3342, i64 3345, i64 3346, i64 3387, i64 3389, i64 3390, i64 3397, i64 3398, i64 3401, i64 3402, i64 3406, i64 3407, i64 3415, i64 3416, i64 3424, i64 3426, i64 3428, i64 3430, i64 3440, i64 3450, i64 3456, i64 3458, i64 3460, i64 3461, i64 3479, i64 3482, i64 3506, i64 3507, i64 3516, i64 3517, i64 3518, i64 3520, i64 3527, i64 3530, i64 3531, i64 3535, i64 3541, i64 3542, i64 3543, i64 3544, i64 3552, i64 3558, i64 3568, i64 3570, i64 3572, i64 3585, i64 3633, i64 3634, i64 3636, i64 3643, i64 3648, i64 3655, i64 3663, i64 3664, i64 3674, i64 3713, i64 3715, i64 3716, i64 3717, i64 3719, i64 3721, i64 3722, i64 3723, i64 3725, i64 3726, i64 3732, i64 3736, i64 3737, i64 3744, i64 3745, i64 3748, i64 3749, i64 3750, i64 3751, i64 3752, i64 3754, i64 3756, i64 3757, i64 3761, i64 3762, i64 3764, i64 3770, i64 3771, i64 3773, i64 3774, i64 3776, i64 3781, i64 3782, i64 3783, i64 3784, i64 3790, i64 3792, i64 3802, i64 3804, i64 3808, i64 3840, i64 3841, i64 3864, i64 3866, i64 3872, i64 3882, i64 3893, i64 3894, i64 3895, i64 3896, i64 3897, i64 3898, i64 3902, i64 3904, i64 3912, i64 3913, i64 3949, i64 3953, i64 3973, i64 3974, i64 3976, i64 3981, i64 3992, i64 3993, i64 4029, i64 4038, i64 4039, i64 4096, i64 4139, i64 4159, i64 4160, i64 4170, i64 4172, i64 4176, i64 4182, i64 4186, i64 4190, i64 4193, i64 4194, i64 4197, i64 4199, i64 4206, i64 4209, i64 4213, i64 4226, i64 4238, i64 4239, i64 4240, i64 4250, i64 4254, i64 4256, i64 4294, i64 4295, i64 4296, i64 4301, i64 4302, i64 4304, i64 4347, i64 4348, i64 4681, i64 4682, i64 4686, i64 4688, i64 4695, i64 4696, i64 4697, i64 4698, i64 4702, i64 4704, i64 4745, i64 4746, i64 4750, i64 4752, i64 4785, i64 4786, i64 4790, i64 4792, i64 4799, i64 4800, i64 4801, i64 4802, i64 4806, i64 4808, i64 4823, i64 4824, i64 4881, i64 4882, i64 4886, i64 4888, i64 4955, i64 4957, i64 4960, i64 4962, i64 4963, i64 4967, i64 4969, i64 4992, i64 5008, i64 5024, i64 5109, i64 5121, i64 5741, i64 5742, i64 5743, i64 5760, i64 5761, i64 5787, i64 5789, i64 5792, i64 5867, i64 5870, i64 5881, i64 5888, i64 5901, i64 5902, i64 5906, i64 5909, i64 5920, i64 5938, i64 5941, i64 5943, i64 5952, i64 5970, i64 5972, i64 5984, i64 5997, i64 5998, i64 6001, i64 6002, i64 6004, i64 6016, i64 6068, i64 6100, i64 6103, i64 6104, i64 6108, i64 6109, i64 6110, i64 6112, i64 6122, i64 6146, i64 6147, i64 6148, i64 6152, i64 6153, i64 6154, i64 6155, i64 6158, i64 6159, i64 6160, i64 6170, i64 6176, i64 6264, i64 6272, i64 6313, i64 6314, i64 6315, i64 6320, i64 6390, i64 6400, i64 6431, i64 6432, i64 6444, i64 6448, i64 6460, i64 6468, i64 6470, i64 6480, i64 6510, i64 6512, i64 6517, i64 6528, i64 6572, i64 6576, i64 6593, i64 6600, i64 6602, i64 6608, i64 6618, i64 6656, i64 6679, i64 6684, i64 6688, i64 6741, i64 6751, i64 6752, i64 6781, i64 6783, i64 6784, i64 6794, i64 6800, i64 6810, i64 6823, i64 6824, i64 6828, i64 6832, i64 6847, i64 6912, i64 6917, i64 6964, i64 6981, i64 6988, i64 6992, i64 7002, i64 7004, i64 7006, i64 7008, i64 7019, i64 7028, i64 7040, i64 7043, i64 7073, i64 7086, i64 7088, i64 7098, i64 7142, i64 7156, i64 7168, i64 7204, i64 7224, i64 7227, i64 7229, i64 7232, i64 7242, i64 7245, i64 7248, i64 7258, i64 7294, i64 7296, i64 7376, i64 7379, i64 7380, i64 7401, i64 7405, i64 7406, i64 7410, i64 7413, i64 7415, i64 7416, i64 7418, i64 7424, i64 7616, i64 7670, i64 7676, i64 7680, i64 7681, i64 7682, i64 7683, i64 7684, i64 7685, i64 7686, i64 7687, i64 7688, i64 7689, i64 7690, i64 7691, i64 7692, i64 7693, i64 7694, i64 7695, i64 7696, i64 7697, i64 7698, i64 7699, i64 7700, i64 7701, i64 7702, i64 7703, i64 7704, i64 7705, i64 7706, i64 7707, i64 7708, i64 7709, i64 7710, i64 7711, i64 7712, i64 7713, i64 7714, i64 7715, i64 7716, i64 7717, i64 7718, i64 7719, i64 7720, i64 7721, i64 7722, i64 7723, i64 7724, i64 7725, i64 7726, i64 7727, i64 7728, i64 7729, i64 7730, i64 7731, i64 7732, i64 7733, i64 7734, i64 7735, i64 7736, i64 7737, i64 7738, i64 7739, i64 7740, i64 7741, i64 7742, i64 7743, i64 7744, i64 7745, i64 7746, i64 7747, i64 7748, i64 7749, i64 7750, i64 7751, i64 7752, i64 7753, i64 7754, i64 7755, i64 7756, i64 7757, i64 7758, i64 7759, i64 7760, i64 7761, i64 7762, i64 7763, i64 7764, i64 7765, i64 7766, i64 7767, i64 7768, i64 7769, i64 7770, i64 7771, i64 7772, i64 7773, i64 7774, i64 7775, i64 7776, i64 7777, i64 7778, i64 7779, i64 7780, i64 7781, i64 7782, i64 7783, i64 7784, i64 7785, i64 7786, i64 7787, i64 7788, i64 7789, i64 7790, i64 7791, i64 7792, i64 7793, i64 7794, i64 7795, i64 7796, i64 7797, i64 7798, i64 7799, i64 7800, i64 7801, i64 7802, i64 7803, i64 7804, i64 7805, i64 7806, i64 7807, i64 7808, i64 7809, i64 7810, i64 7811, i64 7812, i64 7813, i64 7814, i64 7815, i64 7816, i64 7817, i64 7818, i64 7819, i64 7820, i64 7821, i64 7822, i64 7823, i64 7824, i64 7825, i64 7826, i64 7827, i64 7828, i64 7829, i64 7838, i64 7839, i64 7840, i64 7841, i64 7842, i64 7843, i64 7844, i64 7845, i64 7846, i64 7847, i64 7848, i64 7849, i64 7850, i64 7851, i64 7852, i64 7853, i64 7854, i64 7855, i64 7856, i64 7857, i64 7858, i64 7859, i64 7860, i64 7861, i64 7862, i64 7863, i64 7864, i64 7865, i64 7866, i64 7867, i64 7868, i64 7869, i64 7870, i64 7871, i64 7872, i64 7873, i64 7874, i64 7875, i64 7876, i64 7877, i64 7878, i64 7879, i64 7880, i64 7881, i64 7882, i64 7883, i64 7884, i64 7885, i64 7886, i64 7887, i64 7888, i64 7889, i64 7890, i64 7891, i64 7892, i64 7893, i64 7894, i64 7895, i64 7896, i64 7897, i64 7898, i64 7899, i64 7900, i64 7901, i64 7902, i64 7903, i64 7904, i64 7905, i64 7906, i64 7907, i64 7908, i64 7909, i64 7910, i64 7911, i64 7912, i64 7913, i64 7914, i64 7915, i64 7916, i64 7917, i64 7918, i64 7919, i64 7920, i64 7921, i64 7922, i64 7923, i64 7924, i64 7925, i64 7926, i64 7927, i64 7928, i64 7929, i64 7930, i64 7931, i64 7932, i64 7933, i64 7934, i64 7935, i64 7944, i64 7952, i64 7958, i64 7960, i64 7966, i64 7968, i64 7976, i64 7984, i64 7992, i64 8000, i64 8006, i64 8008, i64 8014, i64 8016, i64 8024, i64 8025, i64 8026, i64 8027, i64 8028, i64 8029, i64 8030, i64 8031, i64 8032, i64 8040, i64 8048, i64 8062, i64 8064, i64 8072, i64 8080, i64 8088, i64 8096, i64 8104, i64 8112, i64 8117, i64 8118, i64 8120, i64 8125, i64 8126, i64 8127, i64 8130, i64 8133, i64 8134, i64 8136, i64 8141, i64 8144, i64 8148, i64 8150, i64 8152, i64 8156, i64 8160, i64 8168, i64 8173, i64 8178, i64 8181, i64 8182, i64 8184, i64 8189, i64 8192, i64 8203, i64 8204, i64 8206, i64 8208, i64 8211, i64 8213, i64 8216, i64 8224, i64 8228, i64 8229, i64 8232, i64 8234, i64 8239, i64 8240, i64 8249, i64 8251, i64 8252, i64 8254, i64 8261, i64 8263, i64 8266, i64 8287, i64 8288, i64 8293, i64 8294, i64 8304, i64 8305, i64 8306, i64 8317, i64 8319, i64 8320, i64 8333, i64 8335, i64 8336, i64 8349, i64 8400, i64 8433, i64 8450, i64 8451, i64 8455, i64 8456, i64 8458, i64 8459, i64 8462, i64 8464, i64 8467, i64 8468, i64 8469, i64 8470, i64 8473, i64 8478, i64 8484, i64 8485, i64 8486, i64 8487, i64 8488, i64 8489, i64 8490, i64 8494, i64 8495, i64 8496, i64 8500, i64 8501, i64 8505, i64 8506, i64 8508, i64 8510, i64 8512, i64 8517, i64 8518, i64 8522, i64 8526, i64 8527, i64 8544, i64 8560, i64 8576, i64 8579, i64 8580, i64 8581, i64 8585, i64 8968, i64 8972, i64 9001, i64 9003, i64 9398, i64 9424, i64 9450, i64 10075, i64 10081, i64 10088, i64 10102, i64 10181, i64 10183, i64 10214, i64 10224, i64 10627, i64 10649, i64 10712, i64 10716, i64 10748, i64 10750, i64 11264, i64 11311, i64 11312, i64 11359, i64 11360, i64 11361, i64 11362, i64 11365, i64 11367, i64 11368, i64 11369, i64 11370, i64 11371, i64 11372, i64 11373, i64 11377, i64 11378, i64 11379, i64 11381, i64 11382, i64 11390, i64 11393, i64 11394, i64 11395, i64 11396, i64 11397, i64 11398, i64 11399, i64 11400, i64 11401, i64 11402, i64 11403, i64 11404, i64 11405, i64 11406, i64 11407, i64 11408, i64 11409, i64 11410, i64 11411, i64 11412, i64 11413, i64 11414, i64 11415, i64 11416, i64 11417, i64 11418, i64 11419, i64 11420, i64 11421, i64 11422, i64 11423, i64 11424, i64 11425, i64 11426, i64 11427, i64 11428, i64 11429, i64 11430, i64 11431, i64 11432, i64 11433, i64 11434, i64 11435, i64 11436, i64 11437, i64 11438, i64 11439, i64 11440, i64 11441, i64 11442, i64 11443, i64 11444, i64 11445, i64 11446, i64 11447, i64 11448, i64 11449, i64 11450, i64 11451, i64 11452, i64 11453, i64 11454, i64 11455, i64 11456, i64 11457, i64 11458, i64 11459, i64 11460, i64 11461, i64 11462, i64 11463, i64 11464, i64 11465, i64 11466, i64 11467, i64 11468, i64 11469, i64 11470, i64 11471, i64 11472, i64 11473, i64 11474, i64 11475, i64 11476, i64 11477, i64 11478, i64 11479, i64 11480, i64 11481, i64 11482, i64 11483, i64 11484, i64 11485, i64 11486, i64 11487, i64 11488, i64 11489, i64 11490, i64 11491, i64 11493, i64 11499, i64 11500, i64 11501, i64 11502, i64 11503, i64 11506, i64 11507, i64 11508, i64 11520, i64 11558, i64 11559, i64 11560, i64 11565, i64 11566, i64 11568, i64 11624, i64 11631, i64 11632, i64 11647, i64 11648, i64 11671, i64 11680, i64 11687, i64 11688, i64 11695, i64 11696, i64 11703, i64 11704, i64 11711, i64 11712, i64 11719, i64 11720, i64 11727, i64 11728, i64 11735, i64 11736, i64 11743, i64 11744, i64 11776, i64 11790, i64 11804, i64 11806, i64 11808, i64 11818, i64 11822, i64 11823, i64 11824, i64 11836, i64 11837, i64 11842, i64 11843, i64 12288, i64 12289, i64 12290, i64 12291, i64 12293, i64 12296, i64 12306, i64 12308, i64 12316, i64 12317, i64 12320, i64 12321, i64 12330, i64 12336, i64 12337, i64 12342, i64 12344, i64 12349, i64 12353, i64 12439, i64 12441, i64 12443, i64 12445, i64 12448, i64 12449, i64 12539, i64 12540, i64 12544, i64 12549, i64 12590, i64 12593, i64 12687, i64 12704, i64 12731, i64 12784, i64 12800, i64 13312, i64 19894, i64 19968, i64 40909, i64 40960, i64 42125, i64 42192, i64 42238, i64 42239, i64 42240, i64 42509, i64 42510, i64 42512, i64 42528, i64 42538, i64 42540, i64 42560, i64 42561, i64 42562, i64 42563, i64 42564, i64 42565, i64 42566, i64 42567, i64 42568, i64 42569, i64 42570, i64 42571, i64 42572, i64 42573, i64 42574, i64 42575, i64 42576, i64 42577, i64 42578, i64 42579, i64 42580, i64 42581, i64 42582, i64 42583, i64 42584, i64 42585, i64 42586, i64 42587, i64 42588, i64 42589, i64 42590, i64 42591, i64 42592, i64 42593, i64 42594, i64 42595, i64 42596, i64 42597, i64 42598, i64 42599, i64 42600, i64 42601, i64 42602, i64 42603, i64 42604, i64 42605, i64 42606, i64 42607, i64 42611, i64 42612, i64 42622, i64 42623, i64 42624, i64 42625, i64 42626, i64 42627, i64 42628, i64 42629, i64 42630, i64 42631, i64 42632, i64 42633, i64 42634, i64 42635, i64 42636, i64 42637, i64 42638, i64 42639, i64 42640, i64 42641, i64 42642, i64 42643, i64 42644, i64 42645, i64 42646, i64 42647, i64 42648, i64 42649, i64 42650, i64 42651, i64 42654, i64 42655, i64 42656, i64 42736, i64 42738, i64 42739, i64 42740, i64 42743, i64 42744, i64 42775, i64 42784, i64 42786, i64 42787, i64 42788, i64 42789, i64 42790, i64 42791, i64 42792, i64 42793, i64 42794, i64 42795, i64 42796, i64 42797, i64 42798, i64 42799, i64 42802, i64 42803, i64 42804, i64 42805, i64 42806, i64 42807, i64 42808, i64 42809, i64 42810, i64 42811, i64 42812, i64 42813, i64 42814, i64 42815, i64 42816, i64 42817, i64 42818, i64 42819, i64 42820, i64 42821, i64 42822, i64 42823, i64 42824, i64 42825, i64 42826, i64 42827, i64 42828, i64 42829, i64 42830, i64 42831, i64 42832, i64 42833, i64 42834, i64 42835, i64 42836, i64 42837, i64 42838, i64 42839, i64 42840, i64 42841, i64 42842, i64 42843, i64 42844, i64 42845, i64 42846, i64 42847, i64 42848, i64 42849, i64 42850, i64 42851, i64 42852, i64 42853, i64 42854, i64 42855, i64 42856, i64 42857, i64 42858, i64 42859, i64 42860, i64 42861, i64 42862, i64 42863, i64 42873, i64 42874, i64 42875, i64 42876, i64 42877, i64 42879, i64 42880, i64 42881, i64 42882, i64 42883, i64 42884, i64 42885, i64 42886, i64 42887, i64 42888, i64 42889, i64 42891, i64 42892, i64 42893, i64 42894, i64 42895, i64 42896, i64 42897, i64 42898, i64 42899, i64 42902, i64 42903, i64 42904, i64 42905, i64 42906, i64 42907, i64 42908, i64 42909, i64 42910, i64 42911, i64 42912, i64 42913, i64 42914, i64 42915, i64 42916, i64 42917, i64 42918, i64 42919, i64 42920, i64 42921, i64 42922, i64 42926, i64 42928, i64 42930, i64 42999, i64 43000, i64 43003, i64 43010, i64 43011, i64 43014, i64 43015, i64 43019, i64 43020, i64 43043, i64 43048, i64 43072, i64 43124, i64 43126, i64 43128, i64 43136, i64 43138, i64 43188, i64 43205, i64 43214, i64 43216, i64 43226, i64 43232, i64 43250, i64 43256, i64 43259, i64 43260, i64 43264, i64 43274, i64 43302, i64 43310, i64 43311, i64 43312, i64 43335, i64 43348, i64 43360, i64 43389, i64 43392, i64 43396, i64 43443, i64 43457, i64 43464, i64 43466, i64 43471, i64 43472, i64 43482, i64 43488, i64 43493, i64 43494, i64 43504, i64 43514, i64 43519, i64 43520, i64 43561, i64 43575, i64 43584, i64 43587, i64 43588, i64 43596, i64 43598, i64 43600, i64 43610, i64 43613, i64 43616, i64 43639, i64 43642, i64 43643, i64 43646, i64 43696, i64 43697, i64 43698, i64 43701, i64 43703, i64 43705, i64 43710, i64 43712, i64 43713, i64 43714, i64 43715, i64 43739, i64 43742, i64 43744, i64 43755, i64 43760, i64 43762, i64 43765, i64 43767, i64 43777, i64 43783, i64 43785, i64 43791, i64 43793, i64 43799, i64 43808, i64 43815, i64 43816, i64 43823, i64 43824, i64 43867, i64 43868, i64 43872, i64 43876, i64 43878, i64 43968, i64 44003, i64 44011, i64 44012, i64 44014, i64 44016, i64 44026, i64 44032, i64 55204, i64 55216, i64 55239, i64 55243, i64 55292, i64 63744, i64 64110, i64 64112, i64 64218, i64 64256, i64 64263, i64 64275, i64 64280, i64 64285, i64 64286, i64 64287, i64 64297, i64 64298, i64 64311, i64 64312, i64 64317, i64 64318, i64 64319, i64 64320, i64 64322, i64 64323, i64 64325, i64 64326, i64 64434, i64 64467, i64 64830, i64 64832, i64 64848, i64 64912, i64 64914, i64 64968, i64 65008, i64 65020, i64 65024, i64 65040, i64 65042, i64 65043, i64 65044, i64 65047, i64 65049, i64 65056, i64 65070, i64 65073, i64 65075, i64 65077, i64 65093, i64 65095, i64 65097, i64 65104, i64 65106, i64 65107, i64 65109, i64 65110, i64 65112, i64 65113, i64 65119, i64 65123, i64 65124, i64 65136, i64 65141, i64 65142, i64 65277, i64 65279, i64 65280, i64 65281, i64 65282, i64 65288, i64 65290, i64 65292, i64 65294, i64 65295, i64 65306, i64 65307, i64 65311, i64 65312, i64 65313, i64 65339, i64 65340, i64 65341, i64 65342, i64 65345, i64 65371, i64 65372, i64 65373, i64 65374, i64 65375, i64 65377, i64 65378, i64 65380, i64 65381, i64 65382, i64 65438, i64 65440, i64 65471, i64 65474, i64 65480, i64 65482, i64 65488, i64 65490, i64 65496, i64 65498, i64 65501, i64 65529, i64 65532, i64 65536, i64 65548, i64 65549, i64 65575, i64 65576, i64 65595, i64 65596, i64 65598, i64 65599, i64 65614, i64 65616, i64 65630, i64 65664, i64 65787, i64 65856, i64 65909, i64 66045, i64 66046, i64 66176, i64 66205, i64 66208, i64 66257, i64 66272, i64 66273, i64 66304, i64 66336, i64 66352, i64 66379, i64 66384, i64 66422, i64 66427, i64 66432, i64 66462, i64 66464, i64 66500, i64 66504, i64 66512, i64 66513, i64 66518, i64 66560, i64 66600, i64 66640, i64 66718, i64 66720, i64 66730, i64 66816, i64 66856, i64 66864, i64 66916, i64 67072, i64 67383, i64 67392, i64 67414, i64 67424, i64 67432, i64 67584, i64 67590, i64 67592, i64 67593, i64 67594, i64 67638, i64 67639, i64 67641, i64 67644, i64 67645, i64 67647, i64 67670, i64 67680, i64 67703, i64 67712, i64 67743, i64 67840, i64 67862, i64 67872, i64 67898, i64 67968, i64 68024, i64 68030, i64 68032, i64 68096, i64 68097, i64 68100, i64 68101, i64 68103, i64 68108, i64 68112, i64 68116, i64 68117, i64 68120, i64 68121, i64 68148, i64 68152, i64 68155, i64 68159, i64 68160, i64 68182, i64 68184, i64 68192, i64 68221, i64 68224, i64 68253, i64 68288, i64 68296, i64 68297, i64 68325, i64 68327, i64 68352, i64 68406, i64 68416, i64 68438, i64 68448, i64 68467, i64 68480, i64 68498, i64 68608, i64 68681, i64 69632, i64 69635, i64 69688, i64 69703, i64 69705, i64 69734, i64 69744, i64 69759, i64 69763, i64 69808, i64 69819, i64 69821, i64 69822, i64 69826, i64 69840, i64 69865, i64 69872, i64 69882, i64 69888, i64 69891, i64 69927, i64 69941, i64 69942, i64 69952, i64 69953, i64 69956, i64 69968, i64 70003, i64 70004, i64 70006, i64 70007, i64 70016, i64 70019, i64 70067, i64 70081, i64 70085, i64 70087, i64 70093, i64 70094, i64 70096, i64 70106, i64 70107, i64 70144, i64 70162, i64 70163, i64 70188, i64 70200, i64 70202, i64 70203, i64 70205, i64 70320, i64 70367, i64 70379, i64 70384, i64 70394, i64 70401, i64 70404, i64 70405, i64 70413, i64 70415, i64 70417, i64 70419, i64 70441, i64 70442, i64 70449, i64 70450, i64 70452, i64 70453, i64 70458, i64 70460, i64 70461, i64 70462, i64 70469, i64 70471, i64 70473, i64 70475, i64 70478, i64 70487, i64 70488, i64 70493, i64 70498, i64 70500, i64 70502, i64 70509, i64 70512, i64 70517, i64 70784, i64 70832, i64 70852, i64 70854, i64 70855, i64 70856, i64 70864, i64 70874, i64 71040, i64 71087, i64 71094, i64 71096, i64 71105, i64 71106, i64 71108, i64 71113, i64 71114, i64 71168, i64 71216, i64 71233, i64 71235, i64 71236, i64 71237, i64 71248, i64 71258, i64 71296, i64 71339, i64 71352, i64 71360, i64 71370, i64 71840, i64 71872, i64 71904, i64 71914, i64 71935, i64 71936, i64 72384, i64 72441, i64 73728, i64 74649, i64 74752, i64 74863, i64 77824, i64 78895, i64 92160, i64 92729, i64 92736, i64 92767, i64 92768, i64 92778, i64 92782, i64 92784, i64 92880, i64 92910, i64 92912, i64 92917, i64 92918, i64 92928, i64 92976, i64 92983, i64 92985, i64 92992, i64 92996, i64 92997, i64 93008, i64 93018, i64 93027, i64 93048, i64 93053, i64 93072, i64 93952, i64 94021, i64 94032, i64 94033, i64 94079, i64 94095, i64 94099, i64 94112, i64 110592, i64 110594, i64 113664, i64 113771, i64 113776, i64 113789, i64 113792, i64 113801, i64 113808, i64 113818, i64 113821, i64 113823, i64 113824, i64 113828, i64 119141, i64 119146, i64 119149, i64 119155, i64 119163, i64 119171, i64 119173, i64 119180, i64 119210, i64 119214, i64 119362, i64 119365, i64 119808, i64 119834, i64 119860, i64 119886, i64 119893, i64 119894, i64 119912, i64 119938, i64 119964, i64 119965, i64 119966, i64 119968, i64 119970, i64 119971, i64 119973, i64 119975, i64 119977, i64 119981, i64 119982, i64 119990, i64 119994, i64 119995, i64 119996, i64 119997, i64 120004, i64 120005, i64 120016, i64 120042, i64 120068, i64 120070, i64 120071, i64 120075, i64 120077, i64 120085, i64 120086, i64 120093, i64 120094, i64 120120, i64 120122, i64 120123, i64 120127, i64 120128, i64 120133, i64 120134, i64 120135, i64 120138, i64 120145, i64 120146, i64 120172, i64 120198, i64 120224, i64 120250, i64 120276, i64 120302, i64 120328, i64 120354, i64 120380, i64 120406, i64 120432, i64 120458, i64 120486, i64 120488, i64 120513, i64 120514, i64 120539, i64 120540, i64 120546, i64 120571, i64 120572, i64 120597, i64 120598, i64 120604, i64 120629, i64 120630, i64 120655, i64 120656, i64 120662, i64 120687, i64 120688, i64 120713, i64 120714, i64 120720, i64 120745, i64 120746, i64 120771, i64 120772, i64 120778, i64 120779, i64 120780, i64 120782, i64 120832, i64 124928, i64 125125, i64 125136, i64 125143, i64 126464, i64 126468, i64 126469, i64 126496, i64 126497, i64 126499, i64 126500, i64 126501, i64 126503, i64 126504, i64 126505, i64 126515, i64 126516, i64 126520, i64 126521, i64 126522, i64 126523, i64 126524, i64 126530, i64 126531, i64 126535, i64 126536, i64 126537, i64 126538, i64 126539, i64 126540, i64 126541, i64 126544, i64 126545, i64 126547, i64 126548, i64 126549, i64 126551, i64 126552, i64 126553, i64 126554, i64 126555, i64 126556, i64 126557, i64 126558, i64 126559, i64 126560, i64 126561, i64 126563, i64 126564, i64 126565, i64 126567, i64 126571, i64 126572, i64 126579, i64 126580, i64 126584, i64 126585, i64 126589, i64 126590, i64 126591, i64 126592, i64 126602, i64 126603, i64 126620, i64 126625, i64 126628, i64 126629, i64 126634, i64 126635, i64 126652, i64 127280, i64 127306, i64 127312, i64 127338, i64 127344, i64 127370, i64 128630, i64 128633, i64 131072, i64 173783, i64 173824, i64 177973, i64 177984, i64 178206, i64 194560, i64 195102, i64 917505, i64 917506, i64 917536, i64 917632, i64 917760, i64 918000], align 16
@PL_SB_invlist = external dso_local global %struct.sv*, align 8
@Word_Break_invlist = internal constant [1483 x i64] [i64 1480, i64 148565664, i64 0, i64 0, i64 10, i64 11, i64 13, i64 14, i64 34, i64 35, i64 39, i64 40, i64 44, i64 45, i64 46, i64 47, i64 48, i64 58, i64 59, i64 60, i64 65, i64 91, i64 95, i64 96, i64 97, i64 123, i64 133, i64 134, i64 170, i64 171, i64 173, i64 174, i64 181, i64 182, i64 183, i64 184, i64 186, i64 187, i64 192, i64 215, i64 216, i64 247, i64 248, i64 706, i64 710, i64 722, i64 727, i64 728, i64 736, i64 741, i64 748, i64 749, i64 750, i64 751, i64 768, i64 880, i64 885, i64 886, i64 888, i64 890, i64 894, i64 895, i64 896, i64 902, i64 903, i64 904, i64 907, i64 908, i64 909, i64 910, i64 930, i64 931, i64 1014, i64 1015, i64 1154, i64 1155, i64 1162, i64 1328, i64 1329, i64 1367, i64 1369, i64 1370, i64 1377, i64 1416, i64 1417, i64 1418, i64 1425, i64 1470, i64 1471, i64 1472, i64 1473, i64 1475, i64 1476, i64 1478, i64 1479, i64 1480, i64 1488, i64 1515, i64 1520, i64 1523, i64 1524, i64 1525, i64 1536, i64 1542, i64 1548, i64 1550, i64 1552, i64 1563, i64 1564, i64 1565, i64 1568, i64 1611, i64 1632, i64 1642, i64 1643, i64 1644, i64 1645, i64 1646, i64 1648, i64 1649, i64 1748, i64 1749, i64 1750, i64 1757, i64 1758, i64 1759, i64 1765, i64 1767, i64 1769, i64 1770, i64 1774, i64 1776, i64 1786, i64 1789, i64 1791, i64 1792, i64 1807, i64 1808, i64 1809, i64 1810, i64 1840, i64 1867, i64 1869, i64 1958, i64 1969, i64 1970, i64 1984, i64 1994, i64 2027, i64 2036, i64 2038, i64 2040, i64 2041, i64 2042, i64 2043, i64 2048, i64 2070, i64 2074, i64 2075, i64 2084, i64 2085, i64 2088, i64 2089, i64 2094, i64 2112, i64 2137, i64 2140, i64 2208, i64 2227, i64 2276, i64 2308, i64 2362, i64 2365, i64 2366, i64 2384, i64 2385, i64 2392, i64 2402, i64 2404, i64 2406, i64 2416, i64 2417, i64 2433, i64 2436, i64 2437, i64 2445, i64 2447, i64 2449, i64 2451, i64 2473, i64 2474, i64 2481, i64 2482, i64 2483, i64 2486, i64 2490, i64 2492, i64 2493, i64 2494, i64 2501, i64 2503, i64 2505, i64 2507, i64 2510, i64 2511, i64 2519, i64 2520, i64 2524, i64 2526, i64 2527, i64 2530, i64 2532, i64 2534, i64 2544, i64 2546, i64 2561, i64 2564, i64 2565, i64 2571, i64 2575, i64 2577, i64 2579, i64 2601, i64 2602, i64 2609, i64 2610, i64 2612, i64 2613, i64 2615, i64 2616, i64 2618, i64 2620, i64 2621, i64 2622, i64 2627, i64 2631, i64 2633, i64 2635, i64 2638, i64 2641, i64 2642, i64 2649, i64 2653, i64 2654, i64 2655, i64 2662, i64 2672, i64 2674, i64 2677, i64 2678, i64 2689, i64 2692, i64 2693, i64 2702, i64 2703, i64 2706, i64 2707, i64 2729, i64 2730, i64 2737, i64 2738, i64 2740, i64 2741, i64 2746, i64 2748, i64 2749, i64 2750, i64 2758, i64 2759, i64 2762, i64 2763, i64 2766, i64 2768, i64 2769, i64 2784, i64 2786, i64 2788, i64 2790, i64 2800, i64 2817, i64 2820, i64 2821, i64 2829, i64 2831, i64 2833, i64 2835, i64 2857, i64 2858, i64 2865, i64 2866, i64 2868, i64 2869, i64 2874, i64 2876, i64 2877, i64 2878, i64 2885, i64 2887, i64 2889, i64 2891, i64 2894, i64 2902, i64 2904, i64 2908, i64 2910, i64 2911, i64 2914, i64 2916, i64 2918, i64 2928, i64 2929, i64 2930, i64 2946, i64 2947, i64 2948, i64 2949, i64 2955, i64 2958, i64 2961, i64 2962, i64 2966, i64 2969, i64 2971, i64 2972, i64 2973, i64 2974, i64 2976, i64 2979, i64 2981, i64 2984, i64 2987, i64 2990, i64 3002, i64 3006, i64 3011, i64 3014, i64 3017, i64 3018, i64 3022, i64 3024, i64 3025, i64 3031, i64 3032, i64 3046, i64 3056, i64 3072, i64 3076, i64 3077, i64 3085, i64 3086, i64 3089, i64 3090, i64 3113, i64 3114, i64 3130, i64 3133, i64 3134, i64 3141, i64 3142, i64 3145, i64 3146, i64 3150, i64 3157, i64 3159, i64 3160, i64 3162, i64 3168, i64 3170, i64 3172, i64 3174, i64 3184, i64 3201, i64 3204, i64 3205, i64 3213, i64 3214, i64 3217, i64 3218, i64 3241, i64 3242, i64 3252, i64 3253, i64 3258, i64 3260, i64 3261, i64 3262, i64 3269, i64 3270, i64 3273, i64 3274, i64 3278, i64 3285, i64 3287, i64 3294, i64 3295, i64 3296, i64 3298, i64 3300, i64 3302, i64 3312, i64 3313, i64 3315, i64 3329, i64 3332, i64 3333, i64 3341, i64 3342, i64 3345, i64 3346, i64 3387, i64 3389, i64 3390, i64 3397, i64 3398, i64 3401, i64 3402, i64 3406, i64 3407, i64 3415, i64 3416, i64 3424, i64 3426, i64 3428, i64 3430, i64 3440, i64 3450, i64 3456, i64 3458, i64 3460, i64 3461, i64 3479, i64 3482, i64 3506, i64 3507, i64 3516, i64 3517, i64 3518, i64 3520, i64 3527, i64 3530, i64 3531, i64 3535, i64 3541, i64 3542, i64 3543, i64 3544, i64 3552, i64 3558, i64 3568, i64 3570, i64 3572, i64 3633, i64 3634, i64 3636, i64 3643, i64 3655, i64 3663, i64 3664, i64 3674, i64 3761, i64 3762, i64 3764, i64 3770, i64 3771, i64 3773, i64 3784, i64 3790, i64 3792, i64 3802, i64 3840, i64 3841, i64 3864, i64 3866, i64 3872, i64 3882, i64 3893, i64 3894, i64 3895, i64 3896, i64 3897, i64 3898, i64 3902, i64 3904, i64 3912, i64 3913, i64 3949, i64 3953, i64 3973, i64 3974, i64 3976, i64 3981, i64 3992, i64 3993, i64 4029, i64 4038, i64 4039, i64 4139, i64 4159, i64 4160, i64 4170, i64 4182, i64 4186, i64 4190, i64 4193, i64 4194, i64 4197, i64 4199, i64 4206, i64 4209, i64 4213, i64 4226, i64 4238, i64 4239, i64 4240, i64 4250, i64 4254, i64 4256, i64 4294, i64 4295, i64 4296, i64 4301, i64 4302, i64 4304, i64 4347, i64 4348, i64 4681, i64 4682, i64 4686, i64 4688, i64 4695, i64 4696, i64 4697, i64 4698, i64 4702, i64 4704, i64 4745, i64 4746, i64 4750, i64 4752, i64 4785, i64 4786, i64 4790, i64 4792, i64 4799, i64 4800, i64 4801, i64 4802, i64 4806, i64 4808, i64 4823, i64 4824, i64 4881, i64 4882, i64 4886, i64 4888, i64 4955, i64 4957, i64 4960, i64 4992, i64 5008, i64 5024, i64 5109, i64 5121, i64 5741, i64 5743, i64 5760, i64 5761, i64 5787, i64 5792, i64 5867, i64 5870, i64 5881, i64 5888, i64 5901, i64 5902, i64 5906, i64 5909, i64 5920, i64 5938, i64 5941, i64 5952, i64 5970, i64 5972, i64 5984, i64 5997, i64 5998, i64 6001, i64 6002, i64 6004, i64 6068, i64 6100, i64 6109, i64 6110, i64 6112, i64 6122, i64 6155, i64 6158, i64 6159, i64 6160, i64 6170, i64 6176, i64 6264, i64 6272, i64 6313, i64 6314, i64 6315, i64 6320, i64 6390, i64 6400, i64 6431, i64 6432, i64 6444, i64 6448, i64 6460, i64 6470, i64 6480, i64 6576, i64 6593, i64 6600, i64 6602, i64 6608, i64 6618, i64 6656, i64 6679, i64 6684, i64 6741, i64 6751, i64 6752, i64 6781, i64 6783, i64 6784, i64 6794, i64 6800, i64 6810, i64 6832, i64 6847, i64 6912, i64 6917, i64 6964, i64 6981, i64 6988, i64 6992, i64 7002, i64 7019, i64 7028, i64 7040, i64 7043, i64 7073, i64 7086, i64 7088, i64 7098, i64 7142, i64 7156, i64 7168, i64 7204, i64 7224, i64 7232, i64 7242, i64 7245, i64 7248, i64 7258, i64 7294, i64 7376, i64 7379, i64 7380, i64 7401, i64 7405, i64 7406, i64 7410, i64 7413, i64 7415, i64 7416, i64 7418, i64 7424, i64 7616, i64 7670, i64 7676, i64 7680, i64 7958, i64 7960, i64 7966, i64 7968, i64 8006, i64 8008, i64 8014, i64 8016, i64 8024, i64 8025, i64 8026, i64 8027, i64 8028, i64 8029, i64 8030, i64 8031, i64 8062, i64 8064, i64 8117, i64 8118, i64 8125, i64 8126, i64 8127, i64 8130, i64 8133, i64 8134, i64 8141, i64 8144, i64 8148, i64 8150, i64 8156, i64 8160, i64 8173, i64 8178, i64 8181, i64 8182, i64 8189, i64 8204, i64 8206, i64 8208, i64 8216, i64 8218, i64 8228, i64 8229, i64 8231, i64 8232, i64 8234, i64 8239, i64 8255, i64 8257, i64 8260, i64 8261, i64 8276, i64 8277, i64 8288, i64 8293, i64 8294, i64 8304, i64 8305, i64 8306, i64 8319, i64 8320, i64 8336, i64 8349, i64 8400, i64 8433, i64 8450, i64 8451, i64 8455, i64 8456, i64 8458, i64 8468, i64 8469, i64 8470, i64 8473, i64 8478, i64 8484, i64 8485, i64 8486, i64 8487, i64 8488, i64 8489, i64 8490, i64 8494, i64 8495, i64 8506, i64 8508, i64 8512, i64 8517, i64 8522, i64 8526, i64 8527, i64 8544, i64 8585, i64 9398, i64 9450, i64 11264, i64 11311, i64 11312, i64 11359, i64 11360, i64 11493, i64 11499, i64 11503, i64 11506, i64 11508, i64 11520, i64 11558, i64 11559, i64 11560, i64 11565, i64 11566, i64 11568, i64 11624, i64 11631, i64 11632, i64 11647, i64 11648, i64 11671, i64 11680, i64 11687, i64 11688, i64 11695, i64 11696, i64 11703, i64 11704, i64 11711, i64 11712, i64 11719, i64 11720, i64 11727, i64 11728, i64 11735, i64 11736, i64 11743, i64 11744, i64 11776, i64 11823, i64 11824, i64 12293, i64 12294, i64 12330, i64 12336, i64 12337, i64 12342, i64 12347, i64 12349, i64 12441, i64 12443, i64 12445, i64 12448, i64 12539, i64 12540, i64 12544, i64 12549, i64 12590, i64 12593, i64 12687, i64 12704, i64 12731, i64 12784, i64 12800, i64 13008, i64 13055, i64 13056, i64 13144, i64 40960, i64 42125, i64 42192, i64 42238, i64 42240, i64 42509, i64 42512, i64 42528, i64 42538, i64 42540, i64 42560, i64 42607, i64 42611, i64 42612, i64 42622, i64 42623, i64 42654, i64 42655, i64 42656, i64 42736, i64 42738, i64 42775, i64 42784, i64 42786, i64 42889, i64 42891, i64 42895, i64 42896, i64 42926, i64 42928, i64 42930, i64 42999, i64 43010, i64 43011, i64 43014, i64 43015, i64 43019, i64 43020, i64 43043, i64 43048, i64 43072, i64 43124, i64 43136, i64 43138, i64 43188, i64 43205, i64 43216, i64 43226, i64 43232, i64 43250, i64 43256, i64 43259, i64 43260, i64 43264, i64 43274, i64 43302, i64 43310, i64 43312, i64 43335, i64 43348, i64 43360, i64 43389, i64 43392, i64 43396, i64 43443, i64 43457, i64 43471, i64 43472, i64 43482, i64 43493, i64 43494, i64 43504, i64 43514, i64 43520, i64 43561, i64 43575, i64 43584, i64 43587, i64 43588, i64 43596, i64 43598, i64 43600, i64 43610, i64 43643, i64 43646, i64 43696, i64 43697, i64 43698, i64 43701, i64 43703, i64 43705, i64 43710, i64 43712, i64 43713, i64 43714, i64 43744, i64 43755, i64 43760, i64 43762, i64 43765, i64 43767, i64 43777, i64 43783, i64 43785, i64 43791, i64 43793, i64 43799, i64 43808, i64 43815, i64 43816, i64 43823, i64 43824, i64 43867, i64 43868, i64 43872, i64 43876, i64 43878, i64 43968, i64 44003, i64 44011, i64 44012, i64 44014, i64 44016, i64 44026, i64 44032, i64 55204, i64 55216, i64 55239, i64 55243, i64 55292, i64 64256, i64 64263, i64 64275, i64 64280, i64 64285, i64 64286, i64 64287, i64 64297, i64 64298, i64 64311, i64 64312, i64 64317, i64 64318, i64 64319, i64 64320, i64 64322, i64 64323, i64 64325, i64 64326, i64 64336, i64 64434, i64 64467, i64 64830, i64 64848, i64 64912, i64 64914, i64 64968, i64 65008, i64 65020, i64 65024, i64 65040, i64 65041, i64 65043, i64 65044, i64 65045, i64 65056, i64 65070, i64 65075, i64 65077, i64 65101, i64 65104, i64 65105, i64 65106, i64 65107, i64 65108, i64 65109, i64 65110, i64 65136, i64 65141, i64 65142, i64 65277, i64 65279, i64 65280, i64 65287, i64 65288, i64 65292, i64 65293, i64 65294, i64 65295, i64 65306, i64 65307, i64 65308, i64 65313, i64 65339, i64 65343, i64 65344, i64 65345, i64 65371, i64 65382, i64 65438, i64 65440, i64 65471, i64 65474, i64 65480, i64 65482, i64 65488, i64 65490, i64 65496, i64 65498, i64 65501, i64 65529, i64 65532, i64 65536, i64 65548, i64 65549, i64 65575, i64 65576, i64 65595, i64 65596, i64 65598, i64 65599, i64 65614, i64 65616, i64 65630, i64 65664, i64 65787, i64 65856, i64 65909, i64 66045, i64 66046, i64 66176, i64 66205, i64 66208, i64 66257, i64 66272, i64 66273, i64 66304, i64 66336, i64 66352, i64 66379, i64 66384, i64 66422, i64 66427, i64 66432, i64 66462, i64 66464, i64 66500, i64 66504, i64 66512, i64 66513, i64 66518, i64 66560, i64 66718, i64 66720, i64 66730, i64 66816, i64 66856, i64 66864, i64 66916, i64 67072, i64 67383, i64 67392, i64 67414, i64 67424, i64 67432, i64 67584, i64 67590, i64 67592, i64 67593, i64 67594, i64 67638, i64 67639, i64 67641, i64 67644, i64 67645, i64 67647, i64 67670, i64 67680, i64 67703, i64 67712, i64 67743, i64 67840, i64 67862, i64 67872, i64 67898, i64 67968, i64 68024, i64 68030, i64 68032, i64 68096, i64 68097, i64 68100, i64 68101, i64 68103, i64 68108, i64 68112, i64 68116, i64 68117, i64 68120, i64 68121, i64 68148, i64 68152, i64 68155, i64 68159, i64 68160, i64 68192, i64 68221, i64 68224, i64 68253, i64 68288, i64 68296, i64 68297, i64 68325, i64 68327, i64 68352, i64 68406, i64 68416, i64 68438, i64 68448, i64 68467, i64 68480, i64 68498, i64 68608, i64 68681, i64 69632, i64 69635, i64 69688, i64 69703, i64 69734, i64 69744, i64 69759, i64 69763, i64 69808, i64 69819, i64 69821, i64 69822, i64 69840, i64 69865, i64 69872, i64 69882, i64 69888, i64 69891, i64 69927, i64 69941, i64 69942, i64 69952, i64 69968, i64 70003, i64 70004, i64 70006, i64 70007, i64 70016, i64 70019, i64 70067, i64 70081, i64 70085, i64 70096, i64 70106, i64 70107, i64 70144, i64 70162, i64 70163, i64 70188, i64 70200, i64 70320, i64 70367, i64 70379, i64 70384, i64 70394, i64 70401, i64 70404, i64 70405, i64 70413, i64 70415, i64 70417, i64 70419, i64 70441, i64 70442, i64 70449, i64 70450, i64 70452, i64 70453, i64 70458, i64 70460, i64 70461, i64 70462, i64 70469, i64 70471, i64 70473, i64 70475, i64 70478, i64 70487, i64 70488, i64 70493, i64 70498, i64 70500, i64 70502, i64 70509, i64 70512, i64 70517, i64 70784, i64 70832, i64 70852, i64 70854, i64 70855, i64 70856, i64 70864, i64 70874, i64 71040, i64 71087, i64 71094, i64 71096, i64 71105, i64 71168, i64 71216, i64 71233, i64 71236, i64 71237, i64 71248, i64 71258, i64 71296, i64 71339, i64 71352, i64 71360, i64 71370, i64 71840, i64 71904, i64 71914, i64 71935, i64 71936, i64 72384, i64 72441, i64 73728, i64 74649, i64 74752, i64 74863, i64 77824, i64 78895, i64 92160, i64 92729, i64 92736, i64 92767, i64 92768, i64 92778, i64 92880, i64 92910, i64 92912, i64 92917, i64 92928, i64 92976, i64 92983, i64 92992, i64 92996, i64 93008, i64 93018, i64 93027, i64 93048, i64 93053, i64 93072, i64 93952, i64 94021, i64 94032, i64 94033, i64 94079, i64 94095, i64 94099, i64 94112, i64 110592, i64 110593, i64 113664, i64 113771, i64 113776, i64 113789, i64 113792, i64 113801, i64 113808, i64 113818, i64 113821, i64 113823, i64 113824, i64 113828, i64 119141, i64 119146, i64 119149, i64 119155, i64 119163, i64 119171, i64 119173, i64 119180, i64 119210, i64 119214, i64 119362, i64 119365, i64 119808, i64 119893, i64 119894, i64 119965, i64 119966, i64 119968, i64 119970, i64 119971, i64 119973, i64 119975, i64 119977, i64 119981, i64 119982, i64 119994, i64 119995, i64 119996, i64 119997, i64 120004, i64 120005, i64 120070, i64 120071, i64 120075, i64 120077, i64 120085, i64 120086, i64 120093, i64 120094, i64 120122, i64 120123, i64 120127, i64 120128, i64 120133, i64 120134, i64 120135, i64 120138, i64 120145, i64 120146, i64 120486, i64 120488, i64 120513, i64 120514, i64 120539, i64 120540, i64 120571, i64 120572, i64 120597, i64 120598, i64 120629, i64 120630, i64 120655, i64 120656, i64 120687, i64 120688, i64 120713, i64 120714, i64 120745, i64 120746, i64 120771, i64 120772, i64 120780, i64 120782, i64 120832, i64 124928, i64 125125, i64 125136, i64 125143, i64 126464, i64 126468, i64 126469, i64 126496, i64 126497, i64 126499, i64 126500, i64 126501, i64 126503, i64 126504, i64 126505, i64 126515, i64 126516, i64 126520, i64 126521, i64 126522, i64 126523, i64 126524, i64 126530, i64 126531, i64 126535, i64 126536, i64 126537, i64 126538, i64 126539, i64 126540, i64 126541, i64 126544, i64 126545, i64 126547, i64 126548, i64 126549, i64 126551, i64 126552, i64 126553, i64 126554, i64 126555, i64 126556, i64 126557, i64 126558, i64 126559, i64 126560, i64 126561, i64 126563, i64 126564, i64 126565, i64 126567, i64 126571, i64 126572, i64 126579, i64 126580, i64 126584, i64 126585, i64 126589, i64 126590, i64 126591, i64 126592, i64 126602, i64 126603, i64 126620, i64 126625, i64 126628, i64 126629, i64 126634, i64 126635, i64 126652, i64 127280, i64 127306, i64 127312, i64 127338, i64 127344, i64 127370, i64 127462, i64 127488, i64 917505, i64 917506, i64 917536, i64 917632, i64 917760, i64 918000], align 16
@PL_WB_invlist = external dso_local global %struct.sv*, align 8
@PL_exit_flags = external dso_local global i8, align 1
@PL_endav = external dso_local global %struct.av*, align 8
@PL_minus_c = external dso_local global i8, align 1
@PL_phase = external dso_local global i32, align 4
@PL_scopestack_ix = external dso_local global i32, align 4
@PL_tmps_ix = external dso_local global i64, align 8
@PL_tmps_floor = external dso_local global i64, align 8
@PL_threadhook = external dso_local global i32 ()*, align 8
@PL_main_root = external dso_local global %struct.op*, align 8
@PL_main_cv = external dso_local global %struct.cv*, align 8
@PL_comppad = external dso_local global %struct.av*, align 8
@PL_curpad = external dso_local global %struct.sv**, align 8
@PL_comppad_name = external dso_local global %struct.padnamelist*, align 8
@PL_main_start = external dso_local global %struct.op*, align 8
@PL_warnhook = external dso_local global %struct.sv*, align 8
@PL_diehook = external dso_local global %struct.sv*, align 8
@PL_exitlistlen = external dso_local global i32, align 4
@PL_exitlist = external dso_local global %struct.exitlistentry*, align 8
@PL_use_safe_putenv = external dso_local global i8, align 1
@PL_parser = external dso_local global %struct.yy_parser*, align 8
@PL_minus_F = external dso_local global i8, align 1
@PL_splitstr = external dso_local global i8*, align 8
@PL_minus_n = external dso_local global i8, align 1
@PL_minus_p = external dso_local global i8, align 1
@PL_minus_l = external dso_local global i8, align 1
@PL_minus_a = external dso_local global i8, align 1
@PL_doswitches = external dso_local global i8, align 1
@PL_dowarn = external dso_local global i8, align 1
@PL_unsafe = external dso_local global i8, align 1
@PL_inplace = external dso_local global i8*, align 8
@PL_e_script = external dso_local global %struct.sv*, align 8
@PL_perldb = external dso_local global i32, align 4
@PL_ofsgv = external dso_local global %struct.gv*, align 8
@PL_ors_sv = external dso_local global %struct.sv*, align 8
@PL_statname = external dso_local global %struct.sv*, align 8
@PL_statgv = external dso_local global %struct.gv*, align 8
@PL_efloatbuf = external dso_local global i8*, align 8
@PL_efloatsize = external dso_local global i64, align 8
@PL_beginav = external dso_local global %struct.av*, align 8
@PL_beginav_save = external dso_local global %struct.av*, align 8
@PL_checkav = external dso_local global %struct.av*, align 8
@PL_checkav_save = external dso_local global %struct.av*, align 8
@PL_unitcheckav = external dso_local global %struct.av*, align 8
@PL_unitcheckav_save = external dso_local global %struct.av*, align 8
@PL_initav = external dso_local global %struct.av*, align 8
@PL_hintgv = external dso_local global %struct.gv*, align 8
@PL_errgv = external dso_local global %struct.gv*, align 8
@PL_argvoutgv = external dso_local global %struct.gv*, align 8
@PL_stdingv = external dso_local global %struct.gv*, align 8
@PL_stderrgv = external dso_local global %struct.gv*, align 8
@PL_last_in_gv = external dso_local global %struct.gv*, align 8
@PL_DBsingle = external dso_local global %struct.sv*, align 8
@PL_DBtrace = external dso_local global %struct.sv*, align 8
@PL_DBsignal = external dso_local global %struct.sv*, align 8
@PL_DBcontrol = external dso_local global [3 x i64], align 16
@PL_DBcv = external dso_local global %struct.cv*, align 8
@PL_dbargs = external dso_local global %struct.av*, align 8
@PL_debstash = external dso_local global %struct.hv*, align 8
@PL_envgv = external dso_local global %struct.gv*, align 8
@PL_incgv = external dso_local global %struct.gv*, align 8
@PL_argvgv = external dso_local global %struct.gv*, align 8
@PL_replgv = external dso_local global %struct.gv*, align 8
@PL_DBgv = external dso_local global %struct.gv*, align 8
@PL_DBline = external dso_local global %struct.gv*, align 8
@PL_DBsub = external dso_local global %struct.gv*, align 8
@PL_argvout_stack = external dso_local global %struct.av*, align 8
@PL_preambleav = external dso_local global %struct.av*, align 8
@PL_subname = external dso_local global %struct.sv*, align 8
@PL_toptarget = external dso_local global %struct.sv*, align 8
@PL_bodytarget = external dso_local global %struct.sv*, align 8
@PL_formtarget = external dso_local global %struct.sv*, align 8
@PL_utf8_swash_ptrs = external dso_local global [10 x %struct.sv*], align 16
@PL_utf8_mark = external dso_local global %struct.sv*, align 8
@PL_utf8_toupper = external dso_local global %struct.sv*, align 8
@PL_utf8_totitle = external dso_local global %struct.sv*, align 8
@PL_utf8_tolower = external dso_local global %struct.sv*, align 8
@PL_utf8_tofold = external dso_local global %struct.sv*, align 8
@PL_utf8_idstart = external dso_local global %struct.sv*, align 8
@PL_utf8_idcont = external dso_local global %struct.sv*, align 8
@PL_utf8_foldable = external dso_local global %struct.sv*, align 8
@PL_utf8_foldclosures = external dso_local global %struct.hv*, align 8
@PL_AboveLatin1 = external dso_local global %struct.sv*, align 8
@PL_InBitmap = external dso_local global %struct.sv*, align 8
@PL_UpperLatin1 = external dso_local global %struct.sv*, align 8
@PL_Latin1 = external dso_local global %struct.sv*, align 8
@PL_NonL1NonFinalFold = external dso_local global %struct.sv*, align 8
@PL_HasMultiCharFold = external dso_local global %struct.sv*, align 8
@PL_defstash = external dso_local global %struct.hv*, align 8
@.str.4 = private unnamed_addr constant [7 x i8] c"main::\00", align 1
@PL_curstname = external dso_local global %struct.sv*, align 8
@PL_isarev = external dso_local global %struct.hv*, align 8
@.str.5 = private unnamed_addr constant [48 x i8] c"Unbalanced scopes: %ld more ENTERs than LEAVEs\0A\00", align 1
@PL_savestack_ix = external dso_local global i32, align 4
@.str.6 = private unnamed_addr constant [48 x i8] c"Unbalanced saves: %ld more saves than restores\0A\00", align 1
@.str.7 = private unnamed_addr constant [45 x i8] c"Unbalanced tmps: %ld more allocs than frees\0A\00", align 1
@PL_curstackinfo = external dso_local global %struct.stackinfo*, align 8
@.str.8 = private unnamed_addr constant [47 x i8] c"Unbalanced context: %ld more PUSHes than POPs\0A\00", align 1
@.str.9 = private unnamed_addr constant [49 x i8] c"Unbalanced string table refcount: (%ld) for \22%s\22\00", align 1
@PL_sv_yes = external dso_local global %struct.sv, align 8
@PL_sv_no = external dso_local global %struct.sv, align 8
@PL_sv_count = external dso_local global i64, align 8
@.str.10 = private unnamed_addr constant [21 x i8] c"Scalars leaked: %ld\0A\00", align 1
@PL_sv_undef = external dso_local global %struct.sv, align 8
@PL_origfilename = external dso_local global i8*, align 8
@PL_reg_curpm = external dso_local global %struct.pmop*, align 8
@PL_op_mask = external dso_local global i8*, align 8
@PL_psig_name = external dso_local global %struct.sv**, align 8
@PL_psig_ptr = external dso_local global %struct.sv**, align 8
@PL_psig_pend = external dso_local global i32*, align 8
@PL_tainting = external dso_local global i8, align 1
@PL_taint_warn = external dso_local global i8, align 1
@PL_debug = external dso_local global i32, align 4
@PL_custom_op_names = external dso_local global %struct.hv*, align 8
@PL_custom_op_descs = external dso_local global %struct.hv*, align 8
@PL_custom_ops = external dso_local global %struct.hv*, align 8
@PL_regmatch_slab = external dso_local global %struct.regmatch_slab*, align 8
@PL_mess_sv = external dso_local global %struct.sv*, align 8
@PL_origargc = external dso_local global i32, align 4
@PL_origargv = external dso_local global i8**, align 8
@PL_origalen = external dso_local global i32, align 4
@.str.11 = private unnamed_addr constant [11 x i8] c"NoNe  SuCh\00", align 1
@PL_do_undump = external dso_local global i8, align 1
@PL_tainted = external dso_local global i8, align 1
@PL_basetime = external dso_local global i64, align 8
@PL_curstash = external dso_local global %struct.hv*, align 8
@.str.12 = private unnamed_addr constant [16 x i8] c"panic: top_env\0A\00", align 1
@PL_restartop = external dso_local global %struct.op*, align 8
@PL_curstack = external dso_local global %struct.av*, align 8
@PL_mainstack = external dso_local global %struct.av*, align 8
@PL_stack_sp = external dso_local global %struct.sv**, align 8
@PL_stack_base = external dso_local global %struct.sv**, align 8
@PL_stack_max = external dso_local global %struct.sv**, align 8
@.str.13 = private unnamed_addr constant [30 x i8] c"panic: restartop in perl_run\0A\00", align 1
@PL_markstack_ptr = external dso_local global i32*, align 8
@PL_markstack_max = external dso_local global i32*, align 8
@PL_op = external dso_local global %struct.op*, align 8
@PL_ppaddr = external dso_local global [0 x %struct.op* ()*], align 8
@PL_runops = external dso_local global i32 ()*, align 8
@PL_restartjmpenv = external dso_local global %struct.jmpenv*, align 8
@.str.14 = private unnamed_addr constant [10 x i8] c"eval_sv()\00", align 1
@.str.15 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.16 = private unnamed_addr constant [16 x i8] c"require q%c%s%c\00", align 1
@.str.17 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@PL_unicode = external dso_local global i32, align 4
@PL_utf8cache = external dso_local global i8, align 1
@PL_charclass = external dso_local constant [0 x i32], align 4
@.str.18 = private unnamed_addr constant [17 x i8] c"PERL5DB_THREADED\00", align 1
@.str.19 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@.str.20 = private unnamed_addr constant [11 x i8] c"no Devel::\00", align 1
@.str.21 = private unnamed_addr constant [12 x i8] c"use Devel::\00", align 1
@.str.22 = private unnamed_addr constant [19 x i8] c" split(/,/,q{%s});\00", align 1
@.str.23 = private unnamed_addr constant [8 x i8] c"PERL5DB\00", align 1
@.str.24 = private unnamed_addr constant [70 x i8] c"Recompile perl with -DDEBUGGING to use -D switch (did you mean -d ?)\0A\00", align 1
@.str.25 = private unnamed_addr constant [30 x i8] c"No directory specified for -I\00", align 1
@.str.26 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@.str.27 = private unnamed_addr constant [5 x i8] c"use \00", align 1
@.str.28 = private unnamed_addr constant [5 x i8] c" no \00", align 1
@.str.29 = private unnamed_addr constant [37 x i8] c"Module name required with -%c option\00", align 1
@.str.30 = private unnamed_addr constant [62 x i8] c"Invalid module name %.*s with -%c option: contains single ':'\00", align 1
@.str.31 = private unnamed_addr constant [28 x i8] c"Can't use '%c' after -mname\00", align 1
@.str.32 = private unnamed_addr constant [4 x i8] c" ()\00", align 1
@.str.33 = private unnamed_addr constant [14 x i8] c" split(/,/,q\00\00", align 1
@.str.34 = private unnamed_addr constant [3 x i8] c"\00)\00", align 1
@.str.35 = private unnamed_addr constant [24 x i8] c"Missing argument to -%c\00", align 1
@.str.36 = private unnamed_addr constant [68 x i8] c"\22-%c\22 is on the #! line, it must also be used on the command line%s\00", align 1
@.str.37 = private unnamed_addr constant [31 x i8] c"Can't emulate -%.1s on #! line\00", align 1
@.str.38 = private unnamed_addr constant [57 x i8] c"Unrecognized switch: -%.1s  (-h will show valid options)\00", align 1
@.str.39 = private unnamed_addr constant [9 x i8] c"DB::args\00", align 1
@.str.40 = private unnamed_addr constant [26 x i8] c"Cannot set tied @DB::args\00", align 1
@.str.41 = private unnamed_addr constant [7 x i8] c"DB::DB\00", align 1
@.str.42 = private unnamed_addr constant [11 x i8] c"DB::dbline\00", align 1
@.str.43 = private unnamed_addr constant [8 x i8] c"DB::sub\00", align 1
@.str.44 = private unnamed_addr constant [11 x i8] c"DB::single\00", align 1
@PL_magic_vtables = external dso_local constant [31 x %struct.mgvtbl], align 16
@.str.45 = private unnamed_addr constant [10 x i8] c"DB::trace\00", align 1
@.str.46 = private unnamed_addr constant [11 x i8] c"DB::signal\00", align 1
@PL_tmps_stack = external dso_local global %struct.sv**, align 8
@PL_tmps_max = external dso_local global i64, align 8
@PL_markstack = external dso_local global i32*, align 8
@PL_scopestack = external dso_local global i32*, align 8
@PL_scopestack_max = external dso_local global i32, align 4
@PL_savestack = external dso_local global %union.any*, align 8
@PL_savestack_max = external dso_local global i32, align 4
@.str.47 = private unnamed_addr constant [5 x i8] c"ARGV\00", align 1
@PL_utf8locale = external dso_local global i8, align 1
@.str.48 = private unnamed_addr constant [66 x i8] c"-i used with no filenames on the command line, reading from STDIN\00", align 1
@PL_savebegin = external dso_local global i8, align 1
@.str.49 = private unnamed_addr constant [34 x i8] c"BEGIN failed--compilation aborted\00", align 1
@.str.50 = private unnamed_addr constant [30 x i8] c"%s failed--call queue aborted\00", align 1
@.str.51 = private unnamed_addr constant [6 x i8] c"CHECK\00", align 1
@.str.52 = private unnamed_addr constant [5 x i8] c"INIT\00", align 1
@.str.53 = private unnamed_addr constant [10 x i8] c"UNITCHECK\00", align 1
@.str.54 = private unnamed_addr constant [4 x i8] c"END\00", align 1
@.str.55 = private unnamed_addr constant [4 x i8] c"%-p\00", align 1
@.str.56 = private unnamed_addr constant [22 x i8] c"panic: top_env, v=%d\0A\00", align 1
@.str.57 = private unnamed_addr constant [31 x i8] c"panic: restartop in call_list\0A\00", align 1
@.str.58 = private unnamed_addr constant [20 x i8] c"Unexpected exit %lu\00", align 1
@.str.59 = private unnamed_addr constant [28 x i8] c"Unexpected exit failure %ld\00", align 1
@PL_curinterp = external dso_local global %struct.interpreter*, align 8
@PL_minus_E = external dso_local global i8, align 1
@.str.60 = private unnamed_addr constant [26 x i8] c"No code specified for -%c\00", align 1
@.str.61 = private unnamed_addr constant [25 x i8] c"use Config; Config::_V()\00", align 1
@.str.62 = private unnamed_addr constant [42 x i8] c"use Config; Config::config_vars(qw%c%s%c)\00", align 1
@.str.63 = private unnamed_addr constant [10 x i8] c"/dev/null\00", align 1
@.str.64 = private unnamed_addr constant [8 x i8] c"version\00", align 1
@.str.65 = private unnamed_addr constant [5 x i8] c"help\00", align 1
@.str.66 = private unnamed_addr constant [55 x i8] c"Unrecognized switch: -%s  (-h will show valid options)\00", align 1
@.str.67 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.68 = private unnamed_addr constant [45 x i8] c"Can't ignore signal CHLD, forcing to default\00", align 1
@.str.69 = private unnamed_addr constant [18 x i8] c"Can't chdir to %s\00", align 1
@PL_compcv = external dso_local global %struct.cv*, align 8
@.str.70 = private unnamed_addr constant [13 x i8] c"Internals::V\00", align 1
@.str.71 = private unnamed_addr constant [7 x i8] c"perl.c\00", align 1
@.str.72 = private unnamed_addr constant [6 x i8] c":utf8\00", align 1
@PL_defoutgv = external dso_local global %struct.gv*, align 8
@.str.73 = private unnamed_addr constant [5 x i8] c"\0FPEN\00", align 1
@.str.74 = private unnamed_addr constant [12 x i8] c":utf8\00:utf8\00", align 1
@.str.75 = private unnamed_addr constant [7 x i8] c":utf8\00\00", align 1
@.str.76 = private unnamed_addr constant [7 x i8] c"\00:utf8\00", align 1
@.str.77 = private unnamed_addr constant [5 x i8] c"main\00", align 1
@.str.78 = private unnamed_addr constant [28 x i8] c"%s had compilation errors.\0A\00", align 1
@.str.79 = private unnamed_addr constant [52 x i8] c"Execution of %s aborted due to compilation errors.\0A\00", align 1
@.str.80 = private unnamed_addr constant [4 x i8] c"INC\00", align 1
@.str.81 = private unnamed_addr constant [2 x i8] c"\08\00", align 1
@.str.82 = private unnamed_addr constant [2 x i8] c"_\00", align 1
@PL_defgv = external dso_local global %struct.gv*, align 8
@.str.83 = private unnamed_addr constant [2 x i8] c"@\00", align 1
@.str.84 = private unnamed_addr constant [2 x i8] c"\12\00", align 1
@.str.85 = private unnamed_addr constant [6 x i8] c"%240s\00", align 1
@.str.86 = private unnamed_addr constant [5 x i8] c"DB::\00", align 1
@.str.87 = private unnamed_addr constant [15 x i8] c"CORE::GLOBAL::\00", align 1
@PL_globalstash = external dso_local global %struct.hv*, align 8
@.str.88 = private unnamed_addr constant [4 x i8] c"lib\00", align 1
@.str.89 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.90 = private unnamed_addr constant [3 x i8] c"-e\00", align 1
@.str.91 = private unnamed_addr constant [9 x i8] c"/dev/fd/\00", align 1
@.str.92 = private unnamed_addr constant [41 x i8] c"Wrong syntax (suid) fd script name \22%s\22\0A\00", align 1
@.str.93 = private unnamed_addr constant [31 x i8] c"Missing (suid) fd script name\0A\00", align 1
@.str.94 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.95 = private unnamed_addr constant [26 x i8] c"Can't open /dev/null: %s\0A\00", align 1
@.str.96 = private unnamed_addr constant [33 x i8] c"Can't open perl script \22%s\22: %s\0A\00", align 1
@.str.97 = private unnamed_addr constant [31 x i8] c"No Perl script found in input\0A\00", align 1
@.str.98 = private unnamed_addr constant [5 x i8] c"perl\00", align 1
@.str.99 = private unnamed_addr constant [5 x i8] c"PERL\00", align 1
@S_Internals_V.non_bincompat_options = internal constant [113 x i8] c" PERL_DONT_CREATE_GVSV PERL_HASH_FUNC_ONE_AT_A_TIME_HARD PERL_NEW_COPY_ON_WRITE PERL_PRESERVE_IVUV USE_PERL_ATOF\00", align 16
@PL_bincompat_options = external dso_local constant [0 x i8], align 1
@.str.100 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.101 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.102 = private unnamed_addr constant [2 x i8] c",\00", align 1
@.str.103 = private unnamed_addr constant [14 x i8] c"IO::File::ISA\00", align 1
@.str.104 = private unnamed_addr constant [13 x i8] c"IO::Handle::\00", align 1
@.str.105 = private unnamed_addr constant [15 x i8] c"IO::Seekable::\00", align 1
@.str.106 = private unnamed_addr constant [11 x i8] c"Exporter::\00", align 1
@.str.107 = private unnamed_addr constant [6 x i8] c"STDIN\00", align 1
@.str.108 = private unnamed_addr constant [6 x i8] c"stdin\00", align 1
@.str.109 = private unnamed_addr constant [7 x i8] c"STDOUT\00", align 1
@.str.110 = private unnamed_addr constant [7 x i8] c"stdout\00", align 1
@.str.111 = private unnamed_addr constant [7 x i8] c"STDERR\00", align 1
@.str.112 = private unnamed_addr constant [7 x i8] c"stderr\00", align 1
@.str.113 = private unnamed_addr constant [14 x i8] c"%s syntax OK\0A\00", align 1
@S_usage.usage_msg = internal constant [6 x i8*] [i8* getelementptr inbounds ([385 x i8], [385 x i8]* @.str.114, i32 0, i32 0), i8* getelementptr inbounds ([436 x i8], [436 x i8]* @.str.115, i32 0, i32 0), i8* getelementptr inbounds ([439 x i8], [439 x i8]* @.str.116, i32 0, i32 0), i8* getelementptr inbounds ([324 x i8], [324 x i8]* @.str.117, i32 0, i32 0), i8* getelementptr inbounds ([258 x i8], [258 x i8]* @.str.118, i32 0, i32 0), i8* null], align 16
@.str.114 = private unnamed_addr constant [385 x i8] c"  -0[octal]         specify record separator (\\0, if no argument)\0A  -a                autosplit mode with -n or -p (splits $_ into @F)\0A  -C[number/list]   enables the listed Unicode features\0A  -c                check syntax only (runs BEGIN and CHECK blocks)\0A  -d[:debugger]     run program under debugger\0A  -D[number/list]   set debugging flags (argument is a bit mask or alphabets)\0A\00", align 1
@.str.115 = private unnamed_addr constant [436 x i8] c"  -e program        one line of program (several -e's allowed, omit programfile)\0A  -E program        like -e, but enables all optional features\0A  -f                don't do $sitelib/sitecustomize.pl at startup\0A  -F/pattern/       split() pattern for -a switch (//'s are optional)\0A  -i[extension]     edit <> files in place (makes backup if extension supplied)\0A  -Idirectory       specify @INC/#include directory (several -I's allowed)\0A\00", align 1
@.str.116 = private unnamed_addr constant [439 x i8] c"  -l[octal]         enable line ending processing, specifies line terminator\0A  -[mM][-]module    execute \22use/no module...\22 before executing program\0A  -n                assume \22while (<>) { ... }\22 loop around program\0A  -p                assume loop like -n but print line also, like sed\0A  -s                enable rudimentary parsing for switches after programfile\0A  -S                look for programfile using PATH environment variable\0A\00", align 1
@.str.117 = private unnamed_addr constant [324 x i8] c"  -t                enable tainting warnings\0A  -T                enable tainting checks\0A  -u                dump core after parsing program\0A  -U                allow unsafe operations\0A  -v                print version, patchlevel and license\0A  -V[:variable]     print configuration summary (or a single Config.pm variable)\0A\00", align 1
@.str.118 = private unnamed_addr constant [258 x i8] c"  -w                enable many useful warnings\0A  -W                enable all warnings\0A  -x[directory]     ignore text before #!perl line (optionally cd to directory)\0A  -X                disable all warnings\0A  \0ARun 'perldoc perl' for more help with Perl.\0A\0A\00", align 1
@.str.119 = private unnamed_addr constant [54 x i8] c"\0AUsage: %s [switches] [--] [programfile] [arguments]\0A\00", align 1
@.str.120 = private unnamed_addr constant [67 x i8] c"\0AThis is perl 5, version 22, subversion 1 (%-p) built for spec-cpu\00", align 1
@.str.121 = private unnamed_addr constant [35 x i8] c"\0A\0ACopyright 1987-2015, Larry Wall\0A\00", align 1
@.str.122 = private unnamed_addr constant [377 x i8] c"\0APerl may be copied only under the terms of either the Artistic License or the\0AGNU General Public License, which may be found in the Perl 5 source kit.\0A\0AComplete documentation for Perl, including FAQ lists, should be found on\0Athis system using \22man perl\22 or \22perldoc perl\22.  If you have access to the\0AInternet, point your browser at http://www.perl.org/, the Perl Home Page.\0A\0A\00", align 1
@PL_sub_generation = external dso_local global i32, align 4
@PL_sawalias = external dso_local global i8, align 1
@PL_hash_rand_bits_enabled = external dso_local global i8, align 1
@PL_hash_rand_bits = external dso_local global i64, align 8
@.str.123 = private unnamed_addr constant [4 x i8] c" \0A-\00", align 1
@PL_chopset = external dso_local global i8*, align 8
@PL_dumpindent = external dso_local global i16, align 2
@PL_peepp = external dso_local global void (%struct.op*)*, align 8
@PL_rpeepp = external dso_local global void (%struct.op*)*, align 8
@PL_opfreehook = external dso_local global void (%struct.op*)*, align 8
@PL_watchaddr = external dso_local global i8**, align 8
@PL_xsubfilename = external dso_local global i8*, align 8
@PL_maxsysfd = external dso_local global i32, align 4
@PL_sig_pending = external dso_local global i32, align 4
@PL_curcopdb = external dso_local global %struct.cop*, align 8
@PL_gensym = external dso_local global i32, align 4
@PL_cv_has_eval = external dso_local global i8, align 1
@PL_laststype = external dso_local global i16, align 2
@PL_laststatval = external dso_local global i32, align 4
@PL_profiledata = external dso_local global i32*, align 8
@PL_generation = external dso_local global i32, align 4
@PL_in_clean_objs = external dso_local global i8, align 1
@PL_in_clean_all = external dso_local global i8, align 1
@PL_an = external dso_local global i32, align 4
@PL_breakable_sub_gen = external dso_local global i32, align 4
@PL_cop_seqmax = external dso_local global i32, align 4
@PL_evalseq = external dso_local global i32, align 4
@PL_maxo = external dso_local global i32, align 4
@PL_in_load_module = external dso_local global i8, align 1
@PL_perlio = external dso_local global %struct._PerlIO*, align 8
@PL_known_layers = external dso_local global %struct.PerlIO_list_s*, align 8
@PL_def_layerlist = external dso_local global %struct.PerlIO_list_s*, align 8
@PL_encoding = external dso_local global %struct.sv*, align 8
@PL_lex_encoding = external dso_local global %struct.sv*, align 8
@PL_sharehook = external dso_local global void (%struct.sv*)*, align 8
@PL_lockhook = external dso_local global void (%struct.sv*)*, align 8
@PL_unlockhook = external dso_local global void (%struct.sv*)*, align 8
@PL_destroyhook = external dso_local global i1 (%struct.sv*)*, align 8
@PL_signalhook = external dso_local global void ()*, align 8
@PL_scopestack_name = external dso_local global i8**, align 8
@PL_globhook = external dso_local global void ()*, align 8
@PL_padlist_generation = external dso_local global i32, align 4
@.str.124 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@.str.125 = private unnamed_addr constant [4 x i8] c"ENV\00", align 1
@.str.126 = private unnamed_addr constant [8 x i8] c"main::F\00", align 1
@.str.127 = private unnamed_addr constant [17 x i8] c"/5.22.1/spec-cpu\00", align 1
@.str.128 = private unnamed_addr constant [8 x i8] c"/5.22.1\00", align 1
@.str.129 = private unnamed_addr constant [4 x i8] c"/%s\00", align 1
@.str.130 = private unnamed_addr constant [10 x i8] c"/spec-cpu\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sys_init(i32* %argc, i8*** %argv) #0 {
entry:
  %argc.addr = alloca i32*, align 8
  %argv.addr = alloca i8***, align 8
  store i32* %argc, i32** %argc.addr, align 8
  store i8*** %argv, i8**** %argv.addr, align 8
  %0 = load i32*, i32** %argc.addr, align 8
  %1 = load i8***, i8**** %argv.addr, align 8
  %call = call void (i32)* @__sysv_signal(i32 8, void (i32)* inttoptr (i64 1 to void (i32)*)) #6
  store void (i32)* %call, void (i32)** @PL_sigfpe_saved, align 8
  ret void
}

; Function Attrs: nounwind
declare dso_local void (i32)* @__sysv_signal(i32, void (i32)*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sys_init3(i32* %argc, i8*** %argv, i8*** %env) #0 {
entry:
  %argc.addr = alloca i32*, align 8
  %argv.addr = alloca i8***, align 8
  %env.addr = alloca i8***, align 8
  store i32* %argc, i32** %argc.addr, align 8
  store i8*** %argv, i8**** %argv.addr, align 8
  store i8*** %env, i8**** %env.addr, align 8
  %0 = load i32*, i32** %argc.addr, align 8
  %1 = load i8***, i8**** %argv.addr, align 8
  %2 = load i8***, i8**** %env.addr, align 8
  %call = call void (i32)* @__sysv_signal(i32 8, void (i32)* inttoptr (i64 1 to void (i32)*)) #6
  store void (i32)* %call, void (i32)** @PL_sigfpe_saved, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sys_term() #0 {
entry:
  %0 = load i32, i32* @PL_veto_cleanup, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @PerlIO_teardown()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare dso_local void @PerlIO_teardown() #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.interpreter* @perl_alloc() #0 {
entry:
  %my_perl = alloca %struct.interpreter*, align 8
  %call = call noalias i8* @malloc(i64 1) #6
  %0 = bitcast i8* %call to %struct.interpreter*
  store %struct.interpreter* %0, %struct.interpreter** %my_perl, align 8
  %1 = load %struct.interpreter*, %struct.interpreter** %my_perl, align 8
  call void @S_init_tls_and_interp(%struct.interpreter* %1)
  %2 = load %struct.interpreter*, %struct.interpreter** %my_perl, align 8
  %3 = bitcast %struct.interpreter* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %3, i8 0, i64 1, i1 false)
  %4 = bitcast i8* %3 to %struct.interpreter*
  ret %struct.interpreter* %4
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #1

; Function Attrs: noinline nounwind uwtable
define internal void @S_init_tls_and_interp(%struct.interpreter* %my_perl) #0 {
entry:
  %my_perl.addr = alloca %struct.interpreter*, align 8
  store %struct.interpreter* %my_perl, %struct.interpreter** %my_perl.addr, align 8
  %0 = load %struct.interpreter*, %struct.interpreter** @PL_curinterp, align 8
  %tobool = icmp ne %struct.interpreter* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.interpreter*, %struct.interpreter** %my_perl.addr, align 8
  store %struct.interpreter* %1, %struct.interpreter** @PL_curinterp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @perl_construct(%struct.interpreter* %my_perl) #0 {
entry:
  %my_perl.addr = alloca %struct.interpreter*, align 8
  store %struct.interpreter* %my_perl, %struct.interpreter** %my_perl.addr, align 8
  %0 = load %struct.interpreter*, %struct.interpreter** %my_perl.addr, align 8
  %1 = load i8, i8* @PL_perl_destruct_level, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp sgt i32 %conv, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @S_init_interp()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store %struct.cop* @PL_compiling, %struct.cop** @PL_curcop, align 8
  call void @Perl_init_constants()
  %2 = load i32, i32* getelementptr inbounds (%struct.sv, %struct.sv* @PL_sv_placeholder, i32 0, i32 2), align 4
  %or = or i32 %2, 134283264
  store i32 %or, i32* getelementptr inbounds (%struct.sv, %struct.sv* @PL_sv_placeholder, i32 0, i32 2), align 4
  store i32 2147483647, i32* getelementptr inbounds (%struct.sv, %struct.sv* @PL_sv_placeholder, i32 0, i32 1), align 8
  store void (i32)* @Perl_sighandler, void (i32)** @PL_sighandlerp, align 8
  %call = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0), i64 1)
  store %struct.sv* %call, %struct.sv** @PL_rs, align 8
  call void @Perl_init_stacks()
  call void @S_init_ids()
  br label %do.body

do.body:                                          ; preds = %if.end
  store %struct.jmpenv* @PL_start_env, %struct.jmpenv** @PL_top_env, align 8
  store %struct.jmpenv* null, %struct.jmpenv** getelementptr inbounds (%struct.jmpenv, %struct.jmpenv* @PL_start_env, i32 0, i32 1), align 8
  store i32 -1, i32* getelementptr inbounds (%struct.jmpenv, %struct.jmpenv* @PL_start_env, i32 0, i32 2), align 8
  store i8 1, i8* getelementptr inbounds (%struct.jmpenv, %struct.jmpenv* @PL_start_env, i32 0, i32 3), align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  store i32 0, i32* @PL_statusvalue, align 4
  store i32 0, i32* @PL_statusvalue_posix, align 4
  %call2 = call i32 @Perl_init_i18nl10n(i32 1)
  store i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @local_patches, i64 0, i64 0), i8*** @PL_localpatches, align 8
  call void @PerlIO_init()
  %call3 = call %struct.sv* @Perl_newSV_type(i32 11)
  %3 = bitcast %struct.sv* %call3 to i8*
  %4 = bitcast i8* %3 to %struct.av*
  store %struct.av* %4, %struct.av** @PL_fdpid, align 8
  %call4 = call %struct.sv* @Perl_newSV_type(i32 12)
  %5 = bitcast %struct.sv* %call4 to i8*
  %6 = bitcast i8* %5 to %struct.hv*
  store %struct.hv* %6, %struct.hv** @PL_modglobal, align 8
  %call5 = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), i64 0)
  store %struct.sv* %call5, %struct.sv** @PL_errors, align 8
  call void @Perl_sv_setpvn(%struct.sv* getelementptr inbounds (%struct.perl_debug_pad, %struct.perl_debug_pad* @PL_debug_pad, i32 0, i32 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), i64 0)
  call void @Perl_sv_setpvn(%struct.sv* getelementptr inbounds (%struct.perl_debug_pad, %struct.perl_debug_pad* @PL_debug_pad, i32 0, i32 0, i64 1), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), i64 0)
  call void @Perl_sv_setpvn(%struct.sv* getelementptr inbounds (%struct.perl_debug_pad, %struct.perl_debug_pad* @PL_debug_pad, i32 0, i32 0, i64 2), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), i64 0)
  %7 = load i8, i8* @PL_hash_seed_set, align 1
  %tobool = trunc i8 %7 to i1
  %conv6 = zext i1 %tobool to i32
  %cmp7 = icmp eq i32 %conv6, 0
  br i1 %cmp7, label %if.then9, label %if.end10

if.then9:                                         ; preds = %do.end
  call void @Perl_get_hash_seed(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @PL_hash_seed, i64 0, i64 0))
  store i8 1, i8* @PL_hash_seed_set, align 1
  br label %if.end10

if.end10:                                         ; preds = %if.then9, %do.end
  %call11 = call %struct.sv* @Perl_newSV_type(i32 12)
  %8 = bitcast %struct.sv* %call11 to i8*
  %9 = bitcast i8* %8 to %struct.hv*
  store %struct.hv* %9, %struct.hv** @PL_strtab, align 8
  %10 = load %struct.hv*, %struct.hv** @PL_strtab, align 8
  %sv_flags = getelementptr inbounds %struct.hv, %struct.hv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags, align 4
  %and = and i32 %11, -536870913
  store i32 %and, i32* %sv_flags, align 4
  %12 = load %struct.hv*, %struct.hv** @PL_strtab, align 8
  call void @Perl_hv_ksplit(%struct.hv* %12, i64 512)
  call void @llvm.memset.p0i8.i64(i8* align 16 bitcast ([35 x %struct.sv*]* @PL_sv_consts to i8*), i8 0, i64 280, i1 false)
  %13 = load i8**, i8*** @environ, align 8
  store i8** %13, i8*** @PL_origenviron, align 8
  store i64 60, i64* @PL_clocktick, align 8
  %call12 = call %struct.sv* @Perl_newSV_type(i32 12)
  %14 = bitcast %struct.sv* %call12 to i8*
  %15 = bitcast i8* %14 to %struct.hv*
  store %struct.hv* %15, %struct.hv** @PL_stashcache, align 8
  %call13 = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0), i64 7)
  store %struct.sv* %call13, %struct.sv** @PL_patchlevel, align 8
  %call14 = call i8* @Perl_savepvn(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i64 0, i64 0), i32 8)
  store i8* %call14, i8** @PL_osname, align 8
  %call15 = call %struct.sv* @Perl_newSV_type(i32 12)
  %16 = bitcast %struct.sv* %call15 to i8*
  %17 = bitcast i8* %16 to %struct.hv*
  store %struct.hv* %17, %struct.hv** @PL_registered_mros, align 8
  %18 = load %struct.hv*, %struct.hv** @PL_registered_mros, align 8
  %sv_any = getelementptr inbounds %struct.hv, %struct.hv* %18, i32 0, i32 0
  %19 = load %struct.xpvhv*, %struct.xpvhv** %sv_any, align 8
  %xhv_max = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %19, i32 0, i32 3
  store i64 0, i64* %xhv_max, align 8
  %call16 = call %struct.sv* @Perl__new_invlist_C_array(i64* getelementptr inbounds ([5 x i64], [5 x i64]* @ASCII_invlist, i64 0, i64 0))
  store %struct.sv* %call16, %struct.sv** getelementptr inbounds ([16 x %struct.sv*], [16 x %struct.sv*]* @PL_XPosix_ptrs, i64 0, i64 14), align 16
  %call17 = call %struct.sv* @Perl__new_invlist_C_array(i64* getelementptr inbounds ([1264 x i64], [1264 x i64]* @XPosixAlnum_invlist, i64 0, i64 0))
  store %struct.sv* %call17, %struct.sv** getelementptr inbounds ([16 x %struct.sv*], [16 x %struct.sv*]* @PL_XPosix_ptrs, i64 0, i64 7), align 8
  %call18 = call %struct.sv* @Perl__new_invlist_C_array(i64* getelementptr inbounds ([1204 x i64], [1204 x i64]* @XPosixAlpha_invlist, i64 0, i64 0))
  store %struct.sv* %call18, %struct.sv** getelementptr inbounds ([16 x %struct.sv*], [16 x %struct.sv*]* @PL_XPosix_ptrs, i64 0, i64 2), align 16
  %call19 = call %struct.sv* @Perl__new_invlist_C_array(i64* getelementptr inbounds ([20 x i64], [20 x i64]* @XPosixBlank_invlist, i64 0, i64 0))
  store %struct.sv* %call19, %struct.sv** getelementptr inbounds ([16 x %struct.sv*], [16 x %struct.sv*]* @PL_XPosix_ptrs, i64 0, i64 11), align 8
  %call20 = call %struct.sv* @Perl__new_invlist_C_array(i64* getelementptr inbounds ([258 x i64], [258 x i64]* @Cased_invlist, i64 0, i64 0))
  store %struct.sv* %call20, %struct.sv** getelementptr inbounds ([16 x %struct.sv*], [16 x %struct.sv*]* @PL_XPosix_ptrs, i64 0, i64 9), align 8
  %call21 = call %struct.sv* @Perl__new_invlist_C_array(i64* getelementptr inbounds ([7 x i64], [7 x i64]* @XPosixCntrl_invlist, i64 0, i64 0))
  store %struct.sv* %call21, %struct.sv** getelementptr inbounds ([16 x %struct.sv*], [16 x %struct.sv*]* @PL_XPosix_ptrs, i64 0, i64 13), align 8
  %call22 = call %struct.sv* @Perl__new_invlist_C_array(i64* getelementptr inbounds ([104 x i64], [104 x i64]* @XPosixDigit_invlist, i64 0, i64 0))
  store %struct.sv* %call22, %struct.sv** getelementptr inbounds ([16 x %struct.sv*], [16 x %struct.sv*]* @PL_XPosix_ptrs, i64 0, i64 1), align 8
  %call23 = call %struct.sv* @Perl__new_invlist_C_array(i64* getelementptr inbounds ([1214 x i64], [1214 x i64]* @XPosixGraph_invlist, i64 0, i64 0))
  store %struct.sv* %call23, %struct.sv** getelementptr inbounds ([16 x %struct.sv*], [16 x %struct.sv*]* @PL_XPosix_ptrs, i64 0, i64 8), align 16
  %call24 = call %struct.sv* @Perl__new_invlist_C_array(i64* getelementptr inbounds ([1270 x i64], [1270 x i64]* @XPosixLower_invlist, i64 0, i64 0))
  store %struct.sv* %call24, %struct.sv** getelementptr inbounds ([16 x %struct.sv*], [16 x %struct.sv*]* @PL_XPosix_ptrs, i64 0, i64 3), align 8
  %call25 = call %struct.sv* @Perl__new_invlist_C_array(i64* getelementptr inbounds ([1208 x i64], [1208 x i64]* @XPosixPrint_invlist, i64 0, i64 0))
  store %struct.sv* %call25, %struct.sv** getelementptr inbounds ([16 x %struct.sv*], [16 x %struct.sv*]* @PL_XPosix_ptrs, i64 0, i64 6), align 16
  %call26 = call %struct.sv* @Perl__new_invlist_C_array(i64* getelementptr inbounds ([304 x i64], [304 x i64]* @XPosixPunct_invlist, i64 0, i64 0))
  store %struct.sv* %call26, %struct.sv** getelementptr inbounds ([16 x %struct.sv*], [16 x %struct.sv*]* @PL_XPosix_ptrs, i64 0, i64 5), align 8
  %call27 = call %struct.sv* @Perl__new_invlist_C_array(i64* getelementptr inbounds ([24 x i64], [24 x i64]* @XPerlSpace_invlist, i64 0, i64 0))
  store %struct.sv* %call27, %struct.sv** getelementptr inbounds ([16 x %struct.sv*], [16 x %struct.sv*]* @PL_XPosix_ptrs, i64 0, i64 10), align 16
  %call28 = call %struct.sv* @Perl__new_invlist_C_array(i64* getelementptr inbounds ([1258 x i64], [1258 x i64]* @XPosixUpper_invlist, i64 0, i64 0))
  store %struct.sv* %call28, %struct.sv** getelementptr inbounds ([16 x %struct.sv*], [16 x %struct.sv*]* @PL_XPosix_ptrs, i64 0, i64 4), align 16
  %call29 = call %struct.sv* @Perl__new_invlist_C_array(i64* getelementptr inbounds ([10 x i64], [10 x i64]* @VertSpace_invlist, i64 0, i64 0))
  store %struct.sv* %call29, %struct.sv** getelementptr inbounds ([16 x %struct.sv*], [16 x %struct.sv*]* @PL_XPosix_ptrs, i64 0, i64 15), align 8
  %call30 = call %struct.sv* @Perl__new_invlist_C_array(i64* getelementptr inbounds ([1264 x i64], [1264 x i64]* @XPosixWord_invlist, i64 0, i64 0))
  store %struct.sv* %call30, %struct.sv** getelementptr inbounds ([16 x %struct.sv*], [16 x %struct.sv*]* @PL_XPosix_ptrs, i64 0, i64 0), align 16
  %call31 = call %struct.sv* @Perl__new_invlist_C_array(i64* getelementptr inbounds ([16 x i64], [16 x i64]* @XPosixXDigit_invlist, i64 0, i64 0))
  store %struct.sv* %call31, %struct.sv** getelementptr inbounds ([16 x %struct.sv*], [16 x %struct.sv*]* @PL_XPosix_ptrs, i64 0, i64 12), align 16
  %call32 = call %struct.sv* @Perl__new_invlist_C_array(i64* getelementptr inbounds ([1487 x i64], [1487 x i64]* @Grapheme_Cluster_Break_invlist, i64 0, i64 0))
  store %struct.sv* %call32, %struct.sv** @PL_GCB_invlist, align 8
  %call33 = call %struct.sv* @Perl__new_invlist_C_array(i64* getelementptr inbounds ([2838 x i64], [2838 x i64]* @Sentence_Break_invlist, i64 0, i64 0))
  store %struct.sv* %call33, %struct.sv** @PL_SB_invlist, align 8
  %call34 = call %struct.sv* @Perl__new_invlist_C_array(i64* getelementptr inbounds ([1483 x i64], [1483 x i64]* @Word_Break_invlist, i64 0, i64 0))
  store %struct.sv* %call34, %struct.sv** @PL_WB_invlist, align 8
  call void @Perl_push_scope()
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_init_interp() #0 {
entry:
  store i64 -1, i64* @PL_tmps_ix, align 8
  store i64 -1, i64* @PL_tmps_floor, align 8
  store i32 1, i32* @PL_sub_generation, align 4
  store i8 0, i8* @PL_sawalias, align 1
  store i8 1, i8* @PL_hash_rand_bits_enabled, align 1
  store i64 0, i64* @PL_hash_rand_bits, align 8
  store i8 1, i8* @PL_utf8cache, align 1
  store %struct.pmop* null, %struct.pmop** @PL_reg_curpm, align 8
  store %struct.regmatch_slab* null, %struct.regmatch_slab** @PL_regmatch_slab, align 8
  store %struct.sv* null, %struct.sv** @PL_statname, align 8
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.123, i64 0, i64 0), i8** @PL_chopset, align 8
  store %struct.sv* null, %struct.sv** @PL_errors, align 8
  store i16 4, i16* @PL_dumpindent, align 2
  store void (%struct.op*)* @Perl_peep, void (%struct.op*)** @PL_peepp, align 8
  store void (%struct.op*)* @Perl_rpeep, void (%struct.op*)** @PL_rpeepp, align 8
  store void (%struct.op*)* null, void (%struct.op*)** @PL_opfreehook, align 8
  store i8** null, i8*** @PL_watchaddr, align 8
  store i8* null, i8** @PL_xsubfilename, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.101, i64 0, i64 0), i8** @PL_splitstr, align 8
  store i32 2, i32* @PL_maxsysfd, align 4
  store i32 0, i32* @PL_sig_pending, align 4
  store i8* null, i8** @PL_op_mask, align 8
  store %struct.cop* null, %struct.cop** @PL_curcopdb, align 8
  store i32 0, i32* @PL_gensym, align 4
  store i8 0, i8* @PL_cv_has_eval, align 1
  store i16 265, i16* @PL_laststype, align 2
  store i32 -1, i32* @PL_laststatval, align 4
  store i32 0, i32* @PL_exitlistlen, align 4
  store %struct.exitlistentry* null, %struct.exitlistentry** @PL_exitlist, align 8
  store i32* null, i32** @PL_profiledata, align 8
  store i32 100, i32* @PL_generation, align 4
  store i8 0, i8* @PL_in_clean_objs, align 1
  store i8 0, i8* @PL_in_clean_all, align 1
  store i8 0, i8* @PL_savebegin, align 1
  store i32 0, i32* @PL_an, align 4
  store i32 0, i32* @PL_breakable_sub_gen, align 4
  store i32 0, i32* @PL_cop_seqmax, align 4
  store i32 0, i32* @PL_evalseq, align 4
  store i32 396, i32* @PL_maxo, align 4
  store i32 ()* @Perl_runops_standard, i32 ()** @PL_runops, align 8
  store i32 0, i32* @PL_phase, align 4
  store i8 0, i8* @PL_in_load_module, align 1
  store i8 0, i8* @PL_perl_destruct_level, align 1
  store %struct.av* null, %struct.av** @PL_beginav_save, align 8
  store %struct._PerlIO* null, %struct._PerlIO** @PL_perlio, align 8
  store %struct.PerlIO_list_s* null, %struct.PerlIO_list_s** @PL_known_layers, align 8
  store %struct.PerlIO_list_s* null, %struct.PerlIO_list_s** @PL_def_layerlist, align 8
  store %struct.sv* null, %struct.sv** @PL_encoding, align 8
  store %struct.sv* null, %struct.sv** @PL_lex_encoding, align 8
  store %struct.av* null, %struct.av** @PL_checkav_save, align 8
  store %struct.av* null, %struct.av** @PL_unitcheckav_save, align 8
  store i64 0, i64* @PL_clocktick, align 8
  store void (%struct.sv*)* @Perl_sv_nosharing, void (%struct.sv*)** @PL_sharehook, align 8
  store void (%struct.sv*)* @Perl_sv_nosharing, void (%struct.sv*)** @PL_lockhook, align 8
  store void (%struct.sv*)* @Perl_sv_nounlocking, void (%struct.sv*)** @PL_unlockhook, align 8
  store i32 ()* @Perl_nothreadhook, i32 ()** @PL_threadhook, align 8
  store i1 (%struct.sv*)* @Perl_sv_destroyable, i1 (%struct.sv*)** @PL_destroyhook, align 8
  store void ()* @Perl_despatch_signals, void ()** @PL_signalhook, align 8
  store %struct.hv* null, %struct.hv** @PL_isarev, align 8
  store %struct.hv* null, %struct.hv** @PL_utf8_foldclosures, align 8
  store %struct.sv* null, %struct.sv** @PL_utf8_foldable, align 8
  store i8** null, i8*** @PL_scopestack_name, align 8
  store void ()* null, void ()** @PL_globhook, align 8
  store i32 1, i32* @PL_padlist_generation, align 4
  ret void
}

declare dso_local void @Perl_init_constants() #2

declare dso_local void @Perl_sighandler(i32) #2

declare dso_local %struct.sv* @Perl_newSVpvn(i8*, i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_init_stacks() #0 {
entry:
  %call = call %struct.stackinfo* @Perl_new_stackinfo(i32 128, i32 92)
  store %struct.stackinfo* %call, %struct.stackinfo** @PL_curstackinfo, align 8
  %0 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_type = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %0, i32 0, i32 6
  store i32 1, i32* %si_type, align 8
  %1 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_stack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %1, i32 0, i32 0
  %2 = load %struct.av*, %struct.av** %si_stack, align 8
  store %struct.av* %2, %struct.av** @PL_curstack, align 8
  %3 = load %struct.av*, %struct.av** @PL_curstack, align 8
  store %struct.av* %3, %struct.av** @PL_mainstack, align 8
  %4 = load %struct.av*, %struct.av** @PL_curstack, align 8
  %sv_u = getelementptr inbounds %struct.av, %struct.av* %4, i32 0, i32 3
  %svu_array = bitcast %union.anon.3* %sv_u to %struct.sv***
  %5 = load %struct.sv**, %struct.sv*** %svu_array, align 8
  store %struct.sv** %5, %struct.sv*** @PL_stack_base, align 8
  %6 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  store %struct.sv** %6, %struct.sv*** @PL_stack_sp, align 8
  %7 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %8 = load %struct.av*, %struct.av** @PL_curstack, align 8
  %sv_any = getelementptr inbounds %struct.av, %struct.av* %8, i32 0, i32 0
  %9 = load %struct.xpvav*, %struct.xpvav** %sv_any, align 8
  %xav_max = getelementptr inbounds %struct.xpvav, %struct.xpvav* %9, i32 0, i32 3
  %10 = load i64, i64* %xav_max, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %7, i64 %10
  store %struct.sv** %add.ptr, %struct.sv*** @PL_stack_max, align 8
  %call1 = call i8* @Perl_safesysmalloc(i64 1024)
  %11 = bitcast i8* %call1 to %struct.sv**
  store %struct.sv** %11, %struct.sv*** @PL_tmps_stack, align 8
  store i64 -1, i64* @PL_tmps_floor, align 8
  store i64 -1, i64* @PL_tmps_ix, align 8
  store i64 128, i64* @PL_tmps_max, align 8
  %call2 = call i8* @Perl_safesysmalloc(i64 128)
  %12 = bitcast i8* %call2 to i32*
  store i32* %12, i32** @PL_markstack, align 8
  %13 = load i32*, i32** @PL_markstack, align 8
  store i32* %13, i32** @PL_markstack_ptr, align 8
  %14 = load i32*, i32** @PL_markstack, align 8
  %add.ptr3 = getelementptr inbounds i32, i32* %14, i64 32
  store i32* %add.ptr3, i32** @PL_markstack_max, align 8
  %call4 = call i8* @Perl_safesysmalloc(i64 128)
  %15 = bitcast i8* %call4 to i32*
  store i32* %15, i32** @PL_scopestack, align 8
  store i32 0, i32* @PL_scopestack_ix, align 4
  store i32 32, i32* @PL_scopestack_max, align 4
  %call5 = call i8* @Perl_safesysmalloc(i64 1024)
  %16 = bitcast i8* %call5 to %union.any*
  store %union.any* %16, %union.any** @PL_savestack, align 8
  store i32 0, i32* @PL_savestack_ix, align 4
  store i32 128, i32* @PL_savestack_max, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_init_ids() #0 {
entry:
  %my_uid = alloca i32, align 4
  %my_euid = alloca i32, align 4
  %my_gid = alloca i32, align 4
  %my_egid = alloca i32, align 4
  %call = call i32 @getuid() #6
  store i32 %call, i32* %my_uid, align 4
  %call1 = call i32 @geteuid() #6
  store i32 %call1, i32* %my_euid, align 4
  %call2 = call i32 @getgid() #6
  store i32 %call2, i32* %my_gid, align 4
  %call3 = call i32 @getegid() #6
  store i32 %call3, i32* %my_egid, align 4
  %0 = load i8, i8* @PL_tainting, align 1
  %tobool = trunc i8 %0 to i1
  %conv = zext i1 %tobool to i32
  %1 = load i32, i32* %my_uid, align 4
  %tobool4 = icmp ne i32 %1, 0
  br i1 %tobool4, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %2 = load i32, i32* %my_euid, align 4
  %3 = load i32, i32* %my_uid, align 4
  %cmp = icmp ne i32 %2, %3
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %4 = load i32, i32* %my_egid, align 4
  %5 = load i32, i32* %my_gid, align 4
  %cmp6 = icmp ne i32 %4, %5
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %6 = phi i1 [ true, %land.rhs ], [ %cmp6, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %entry
  %7 = phi i1 [ false, %entry ], [ %6, %lor.end ]
  %land.ext = zext i1 %7 to i32
  %or = or i32 %conv, %land.ext
  %tobool8 = icmp ne i32 %or, 0
  %frombool = zext i1 %tobool8 to i8
  store i8 %frombool, i8* @PL_tainting, align 1
  ret void
}

declare dso_local i32 @Perl_init_i18nl10n(i32) #2

declare dso_local void @PerlIO_init() #2

declare dso_local %struct.sv* @Perl_newSV_type(i32) #2

declare dso_local void @Perl_sv_setpvn(%struct.sv*, i8*, i64) #2

declare dso_local void @Perl_get_hash_seed(i8*) #2

declare dso_local void @Perl_hv_ksplit(%struct.hv*, i64) #2

declare dso_local i8* @Perl_savepvn(i8*, i32) #2

declare dso_local %struct.sv* @Perl__new_invlist_C_array(i64*) #2

declare dso_local void @Perl_push_scope() #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @Perl_nothreadhook() #0 {
entry:
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @perl_destruct(%struct.interpreter* %my_perl) #0 {
entry:
  %retval = alloca i32, align 4
  %my_perl.addr = alloca %struct.interpreter*, align 8
  %destruct_level = alloca i8, align 1
  %hv = alloca %struct.hv*, align 8
  %i = alloca i32, align 4
  %cur_env = alloca %struct.jmpenv, align 8
  %x = alloca i32, align 4
  %i40 = alloca i32, align 4
  %riter = alloca i32, align 4
  %max = alloca i32, align 4
  %array = alloca %struct.he**, align 8
  %hent = alloca %struct.he*, align 8
  %next = alloca %struct.he*, align 8
  %i172 = alloca i32, align 4
  %psig_save = alloca i32*, align 8
  %s = alloca %struct.regmatch_slab*, align 8
  %mg = alloca %struct.magic*, align 8
  %moremagic = alloca %struct.magic*, align 8
  %zok = alloca i64, align 8
  store %struct.interpreter* %my_perl, %struct.interpreter** %my_perl.addr, align 8
  %0 = load %struct.interpreter*, %struct.interpreter** %my_perl.addr, align 8
  %1 = load i8, i8* @PL_perl_destruct_level, align 1
  store volatile i8 %1, i8* %destruct_level, align 1
  %2 = load i8, i8* @PL_exit_flags, align 1
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 2
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end8

if.then:                                          ; preds = %entry
  store i32 0, i32* %x, align 4
  br label %do.body

do.body:                                          ; preds = %if.then
  %3 = load %struct.jmpenv*, %struct.jmpenv** @PL_top_env, align 8
  %je_prev = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 1
  store %struct.jmpenv* %3, %struct.jmpenv** %je_prev, align 8
  %je_buf = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 0
  %arraydecay = getelementptr inbounds [1 x %struct.__jmp_buf_tag], [1 x %struct.__jmp_buf_tag]* %je_buf, i64 0, i64 0
  %call = call i32 @__sigsetjmp(%struct.__jmp_buf_tag* %arraydecay, i32 0) #9
  %je_ret = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 2
  store i32 %call, i32* %je_ret, align 8
  store %struct.jmpenv* %cur_env, %struct.jmpenv** @PL_top_env, align 8
  %je_mustcatch = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 3
  store i8 0, i8* %je_mustcatch, align 4
  %je_ret1 = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 2
  %4 = load i32, i32* %je_ret1, align 8
  store i32 %4, i32* %x, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %5 = load i32, i32* %x, align 4
  %6 = load %struct.av*, %struct.av** @PL_endav, align 8
  %tobool2 = icmp ne %struct.av* %6, null
  br i1 %tobool2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %do.end
  %7 = load i8, i8* @PL_minus_c, align 1
  %tobool3 = trunc i8 %7 to i1
  br i1 %tobool3, label %if.end, label %if.then4

if.then4:                                         ; preds = %land.lhs.true
  store i32 5, i32* @PL_phase, align 4
  %8 = load i32, i32* @PL_scopestack_ix, align 4
  %9 = load %struct.av*, %struct.av** @PL_endav, align 8
  call void @Perl_call_list(i32 %8, %struct.av* %9)
  br label %if.end

if.end:                                           ; preds = %if.then4, %land.lhs.true, %do.end
  br label %do.body5

do.body5:                                         ; preds = %if.end
  %je_prev6 = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 1
  %10 = load %struct.jmpenv*, %struct.jmpenv** %je_prev6, align 8
  store %struct.jmpenv* %10, %struct.jmpenv** @PL_top_env, align 8
  br label %do.end7

do.end7:                                          ; preds = %do.body5
  br label %if.end8

if.end8:                                          ; preds = %do.end7, %entry
  call void @Perl_pop_scope()
  %11 = load i64, i64* @PL_tmps_ix, align 8
  %12 = load i64, i64* @PL_tmps_floor, align 8
  %cmp = icmp sgt i64 %11, %12
  br i1 %cmp, label %if.then10, label %if.end11

if.then10:                                        ; preds = %if.end8
  call void @Perl_free_tmps()
  br label %if.end11

if.end11:                                         ; preds = %if.then10, %if.end8
  %call12 = call i32 @Perl_my_fflush_all()
  %13 = load i32 ()*, i32 ()** @PL_threadhook, align 8
  %call13 = call i32 %13()
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end11
  store i32 1, i32* @PL_veto_cleanup, align 4
  %14 = load i32, i32* @PL_statusvalue, align 4
  store i32 %14, i32* %retval, align 4
  br label %return

if.end16:                                         ; preds = %if.end11
  store %struct.cop* @PL_compiling, %struct.cop** @PL_curcop, align 8
  %15 = load %struct.op*, %struct.op** @PL_main_root, align 8
  %tobool17 = icmp ne %struct.op* %15, null
  br i1 %tobool17, label %if.then18, label %if.end29

if.then18:                                        ; preds = %if.end16
  %16 = load %struct.cv*, %struct.cv** @PL_main_cv, align 8
  %sv_any = getelementptr inbounds %struct.cv, %struct.cv* %16, i32 0, i32 0
  %17 = load %struct.xpvcv*, %struct.xpvcv** %sv_any, align 8
  %18 = bitcast %struct.xpvcv* %17 to i8*
  %19 = bitcast i8* %18 to %struct.xpvcv*
  %xcv_padlist_u = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %19, i32 0, i32 9
  %xcv_padlist = bitcast %union.anon.12* %xcv_padlist_u to %struct.padlist**
  %20 = load %struct.padlist*, %struct.padlist** %xcv_padlist, align 8
  %tobool19 = icmp ne %struct.padlist* %20, null
  br i1 %tobool19, label %if.then20, label %if.end28

if.then20:                                        ; preds = %if.then18
  %21 = load %struct.cv*, %struct.cv** @PL_main_cv, align 8
  %sv_any21 = getelementptr inbounds %struct.cv, %struct.cv* %21, i32 0, i32 0
  %22 = load %struct.xpvcv*, %struct.xpvcv** %sv_any21, align 8
  %23 = bitcast %struct.xpvcv* %22 to i8*
  %24 = bitcast i8* %23 to %struct.xpvcv*
  %xcv_padlist_u22 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %24, i32 0, i32 9
  %xcv_padlist23 = bitcast %union.anon.12* %xcv_padlist_u22 to %struct.padlist**
  %25 = load %struct.padlist*, %struct.padlist** %xcv_padlist23, align 8
  %xpadl_alloc = getelementptr inbounds %struct.padlist, %struct.padlist* %25, i32 0, i32 1
  %26 = load %struct.av**, %struct.av*** %xpadl_alloc, align 8
  %arrayidx = getelementptr inbounds %struct.av*, %struct.av** %26, i64 1
  %27 = load %struct.av*, %struct.av** %arrayidx, align 8
  store %struct.av* %27, %struct.av** @PL_comppad, align 8
  %28 = load %struct.av*, %struct.av** @PL_comppad, align 8
  %sv_u = getelementptr inbounds %struct.av, %struct.av* %28, i32 0, i32 3
  %svu_array = bitcast %union.anon.3* %sv_u to %struct.sv***
  %29 = load %struct.sv**, %struct.sv*** %svu_array, align 8
  store %struct.sv** %29, %struct.sv*** @PL_curpad, align 8
  %30 = load %struct.cv*, %struct.cv** @PL_main_cv, align 8
  %sv_any24 = getelementptr inbounds %struct.cv, %struct.cv* %30, i32 0, i32 0
  %31 = load %struct.xpvcv*, %struct.xpvcv** %sv_any24, align 8
  %32 = bitcast %struct.xpvcv* %31 to i8*
  %33 = bitcast i8* %32 to %struct.xpvcv*
  %xcv_padlist_u25 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %33, i32 0, i32 9
  %xcv_padlist26 = bitcast %union.anon.12* %xcv_padlist_u25 to %struct.padlist**
  %34 = load %struct.padlist*, %struct.padlist** %xcv_padlist26, align 8
  %xpadl_alloc27 = getelementptr inbounds %struct.padlist, %struct.padlist* %34, i32 0, i32 1
  %35 = load %struct.av**, %struct.av*** %xpadl_alloc27, align 8
  %36 = load %struct.av*, %struct.av** %35, align 8
  %37 = bitcast %struct.av* %36 to %struct.padnamelist*
  store %struct.padnamelist* %37, %struct.padnamelist** @PL_comppad_name, align 8
  br label %if.end28

if.end28:                                         ; preds = %if.then20, %if.then18
  %38 = load %struct.op*, %struct.op** @PL_main_root, align 8
  call void @Perl_op_free(%struct.op* %38)
  store %struct.op* null, %struct.op** @PL_main_root, align 8
  br label %if.end29

if.end29:                                         ; preds = %if.end28, %if.end16
  store %struct.op* null, %struct.op** @PL_main_start, align 8
  %39 = load %struct.cv*, %struct.cv** @PL_main_cv, align 8
  %40 = bitcast %struct.cv* %39 to i8*
  %41 = bitcast i8* %40 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %41)
  store %struct.cv* null, %struct.cv** @PL_main_cv, align 8
  store i32 6, i32* @PL_phase, align 4
  call void @PerlIO_destruct()
  call void @Perl_sv_clean_objs()
  %42 = load %struct.sv*, %struct.sv** @PL_warnhook, align 8
  %43 = bitcast %struct.sv* %42 to i8*
  %44 = bitcast i8* %43 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %44)
  store %struct.sv* null, %struct.sv** @PL_warnhook, align 8
  %45 = load %struct.sv*, %struct.sv** @PL_diehook, align 8
  %46 = bitcast %struct.sv* %45 to i8*
  %47 = bitcast i8* %46 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %47)
  store %struct.sv* null, %struct.sv** @PL_diehook, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end29
  %48 = load i32, i32* @PL_exitlistlen, align 4
  %dec = add nsw i32 %48, -1
  store i32 %dec, i32* @PL_exitlistlen, align 4
  %cmp30 = icmp sgt i32 %48, 0
  br i1 %cmp30, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %49 = load %struct.exitlistentry*, %struct.exitlistentry** @PL_exitlist, align 8
  %50 = load i32, i32* @PL_exitlistlen, align 4
  %idxprom = sext i32 %50 to i64
  %arrayidx32 = getelementptr inbounds %struct.exitlistentry, %struct.exitlistentry* %49, i64 %idxprom
  %fn = getelementptr inbounds %struct.exitlistentry, %struct.exitlistentry* %arrayidx32, i32 0, i32 0
  %51 = load void (i8*)*, void (i8*)** %fn, align 8
  %52 = load %struct.exitlistentry*, %struct.exitlistentry** @PL_exitlist, align 8
  %53 = load i32, i32* @PL_exitlistlen, align 4
  %idxprom33 = sext i32 %53 to i64
  %arrayidx34 = getelementptr inbounds %struct.exitlistentry, %struct.exitlistentry* %52, i64 %idxprom33
  %ptr = getelementptr inbounds %struct.exitlistentry, %struct.exitlistentry* %arrayidx34, i32 0, i32 1
  %54 = load i8*, i8** %ptr, align 8
  call void %51(i8* %54)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %55 = load %struct.exitlistentry*, %struct.exitlistentry** @PL_exitlist, align 8
  %56 = bitcast %struct.exitlistentry* %55 to i8*
  call void @Perl_safesysfree(i8* %56)
  store %struct.exitlistentry* null, %struct.exitlistentry** @PL_exitlist, align 8
  store i32 0, i32* @PL_exitlistlen, align 4
  %57 = load %struct.hv*, %struct.hv** @PL_registered_mros, align 8
  %58 = bitcast %struct.hv* %57 to i8*
  %59 = bitcast i8* %58 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %59)
  %60 = load i8**, i8*** @environ, align 8
  %61 = load i8**, i8*** @PL_origenviron, align 8
  %cmp35 = icmp ne i8** %60, %61
  br i1 %cmp35, label %land.lhs.true37, label %if.end46

land.lhs.true37:                                  ; preds = %while.end
  %62 = load i8, i8* @PL_use_safe_putenv, align 1
  %tobool38 = trunc i8 %62 to i1
  br i1 %tobool38, label %if.end46, label %if.then39

if.then39:                                        ; preds = %land.lhs.true37
  store i32 0, i32* %i40, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then39
  %63 = load i8**, i8*** @environ, align 8
  %64 = load i32, i32* %i40, align 4
  %idxprom41 = sext i32 %64 to i64
  %arrayidx42 = getelementptr inbounds i8*, i8** %63, i64 %idxprom41
  %65 = load i8*, i8** %arrayidx42, align 8
  %tobool43 = icmp ne i8* %65, null
  br i1 %tobool43, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %66 = load i8**, i8*** @environ, align 8
  %67 = load i32, i32* %i40, align 4
  %idxprom44 = sext i32 %67 to i64
  %arrayidx45 = getelementptr inbounds i8*, i8** %66, i64 %idxprom44
  %68 = load i8*, i8** %arrayidx45, align 8
  call void @Perl_safesysfree(i8* %68)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %69 = load i32, i32* %i40, align 4
  %inc = add nsw i32 %69, 1
  store i32 %inc, i32* %i40, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %70 = load i8**, i8*** @environ, align 8
  %71 = bitcast i8** %70 to i8*
  call void @Perl_safesysfree(i8* %71)
  %72 = load i8**, i8*** @PL_origenviron, align 8
  store i8** %72, i8*** @environ, align 8
  br label %if.end46

if.end46:                                         ; preds = %for.end, %land.lhs.true37, %while.end
  %73 = load volatile i8, i8* %destruct_level, align 1
  %conv47 = sext i8 %73 to i32
  %cmp48 = icmp eq i32 %conv47, 0
  br i1 %cmp48, label %if.then50, label %if.end51

if.then50:                                        ; preds = %if.end46
  call void @PerlIO_cleanup()
  %74 = load %struct.gv*, %struct.gv** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 9), align 8
  %75 = bitcast %struct.gv* %74 to i8*
  %76 = bitcast i8* %75 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %76)
  store %struct.gv* null, %struct.gv** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 9), align 8
  %77 = load i32, i32* @PL_statusvalue, align 4
  store i32 %77, i32* %retval, align 4
  br label %return

if.end51:                                         ; preds = %if.end46
  %78 = load %struct.hv*, %struct.hv** @PL_stashcache, align 8
  %79 = bitcast %struct.hv* %78 to i8*
  %80 = bitcast i8* %79 to %struct.sv*
  %81 = bitcast %struct.sv* %80 to i8*
  %82 = bitcast i8* %81 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %82)
  store %struct.hv* null, %struct.hv** @PL_stashcache, align 8
  %83 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %tobool52 = icmp ne %struct.yy_parser* %83, null
  br i1 %tobool52, label %land.lhs.true53, label %if.end59

land.lhs.true53:                                  ; preds = %if.end51
  %84 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %rsfp = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %84, i32 0, i32 46
  %85 = load %struct._PerlIO**, %struct._PerlIO*** %rsfp, align 8
  %tobool54 = icmp ne %struct._PerlIO** %85, null
  br i1 %tobool54, label %if.then55, label %if.end59

if.then55:                                        ; preds = %land.lhs.true53
  %86 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %rsfp56 = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %86, i32 0, i32 46
  %87 = load %struct._PerlIO**, %struct._PerlIO*** %rsfp56, align 8
  %call57 = call i32 @Perl_PerlIO_close(%struct._PerlIO** %87)
  %88 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %rsfp58 = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %88, i32 0, i32 46
  store %struct._PerlIO** null, %struct._PerlIO*** %rsfp58, align 8
  br label %if.end59

if.end59:                                         ; preds = %if.then55, %land.lhs.true53, %if.end51
  %89 = load i8, i8* @PL_minus_F, align 1
  %tobool60 = trunc i8 %89 to i1
  br i1 %tobool60, label %if.then61, label %if.end62

if.then61:                                        ; preds = %if.end59
  %90 = load i8*, i8** @PL_splitstr, align 8
  call void @Perl_safesysfree(i8* %90)
  store i8* null, i8** @PL_splitstr, align 8
  br label %if.end62

if.end62:                                         ; preds = %if.then61, %if.end59
  store i8 0, i8* @PL_minus_n, align 1
  store i8 0, i8* @PL_minus_p, align 1
  store i8 0, i8* @PL_minus_l, align 1
  store i8 0, i8* @PL_minus_a, align 1
  store i8 0, i8* @PL_minus_F, align 1
  store i8 0, i8* @PL_doswitches, align 1
  store i8 0, i8* @PL_dowarn, align 1
  store i8 0, i8* @PL_unsafe, align 1
  %91 = load i8*, i8** @PL_inplace, align 8
  call void @Perl_safesysfree(i8* %91)
  store i8* null, i8** @PL_inplace, align 8
  %92 = load %struct.sv*, %struct.sv** @PL_patchlevel, align 8
  %93 = bitcast %struct.sv* %92 to i8*
  %94 = bitcast i8* %93 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %94)
  %95 = load %struct.sv*, %struct.sv** @PL_e_script, align 8
  %tobool63 = icmp ne %struct.sv* %95, null
  br i1 %tobool63, label %if.then64, label %if.end65

if.then64:                                        ; preds = %if.end62
  %96 = load %struct.sv*, %struct.sv** @PL_e_script, align 8
  %97 = bitcast %struct.sv* %96 to i8*
  %98 = bitcast i8* %97 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %98)
  store %struct.sv* null, %struct.sv** @PL_e_script, align 8
  br label %if.end65

if.end65:                                         ; preds = %if.then64, %if.end62
  store i32 0, i32* @PL_perldb, align 4
  %99 = load %struct.gv*, %struct.gv** @PL_ofsgv, align 8
  %100 = bitcast %struct.gv* %99 to i8*
  %101 = bitcast i8* %100 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %101)
  store %struct.gv* null, %struct.gv** @PL_ofsgv, align 8
  %102 = load %struct.sv*, %struct.sv** @PL_ors_sv, align 8
  %103 = bitcast %struct.sv* %102 to i8*
  %104 = bitcast i8* %103 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %104)
  store %struct.sv* null, %struct.sv** @PL_ors_sv, align 8
  %105 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %106 = bitcast %struct.sv* %105 to i8*
  %107 = bitcast i8* %106 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %107)
  store %struct.sv* null, %struct.sv** @PL_rs, align 8
  %108 = load i8*, i8** @PL_osname, align 8
  call void @Perl_safesysfree(i8* %108)
  store i8* null, i8** @PL_osname, align 8
  %109 = load %struct.sv*, %struct.sv** @PL_statname, align 8
  %110 = bitcast %struct.sv* %109 to i8*
  %111 = bitcast i8* %110 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %111)
  store %struct.sv* null, %struct.sv** @PL_statname, align 8
  store %struct.gv* null, %struct.gv** @PL_statgv, align 8
  %112 = load i8*, i8** @PL_efloatbuf, align 8
  call void @Perl_safesysfree(i8* %112)
  store i8* null, i8** @PL_efloatbuf, align 8
  store i64 0, i64* @PL_efloatsize, align 8
  %113 = load %struct.av*, %struct.av** @PL_beginav, align 8
  %114 = bitcast %struct.av* %113 to i8*
  %115 = bitcast i8* %114 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %115)
  %116 = load %struct.av*, %struct.av** @PL_beginav_save, align 8
  %117 = bitcast %struct.av* %116 to i8*
  %118 = bitcast i8* %117 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %118)
  %119 = load %struct.av*, %struct.av** @PL_endav, align 8
  %120 = bitcast %struct.av* %119 to i8*
  %121 = bitcast i8* %120 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %121)
  %122 = load %struct.av*, %struct.av** @PL_checkav, align 8
  %123 = bitcast %struct.av* %122 to i8*
  %124 = bitcast i8* %123 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %124)
  %125 = load %struct.av*, %struct.av** @PL_checkav_save, align 8
  %126 = bitcast %struct.av* %125 to i8*
  %127 = bitcast i8* %126 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %127)
  %128 = load %struct.av*, %struct.av** @PL_unitcheckav, align 8
  %129 = bitcast %struct.av* %128 to i8*
  %130 = bitcast i8* %129 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %130)
  %131 = load %struct.av*, %struct.av** @PL_unitcheckav_save, align 8
  %132 = bitcast %struct.av* %131 to i8*
  %133 = bitcast i8* %132 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %133)
  %134 = load %struct.av*, %struct.av** @PL_initav, align 8
  %135 = bitcast %struct.av* %134 to i8*
  %136 = bitcast i8* %135 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %136)
  store %struct.av* null, %struct.av** @PL_beginav, align 8
  store %struct.av* null, %struct.av** @PL_beginav_save, align 8
  store %struct.av* null, %struct.av** @PL_endav, align 8
  store %struct.av* null, %struct.av** @PL_checkav, align 8
  store %struct.av* null, %struct.av** @PL_checkav_save, align 8
  store %struct.av* null, %struct.av** @PL_unitcheckav, align 8
  store %struct.av* null, %struct.av** @PL_unitcheckav_save, align 8
  store %struct.av* null, %struct.av** @PL_initav, align 8
  store %struct.gv* null, %struct.gv** @PL_hintgv, align 8
  store %struct.gv* null, %struct.gv** @PL_errgv, align 8
  store %struct.gv* null, %struct.gv** @PL_argvoutgv, align 8
  store %struct.gv* null, %struct.gv** @PL_stdingv, align 8
  store %struct.gv* null, %struct.gv** @PL_stderrgv, align 8
  store %struct.gv* null, %struct.gv** @PL_last_in_gv, align 8
  store %struct.sv* null, %struct.sv** @PL_DBsingle, align 8
  store %struct.sv* null, %struct.sv** @PL_DBtrace, align 8
  store %struct.sv* null, %struct.sv** @PL_DBsignal, align 8
  store i64 0, i64* getelementptr inbounds ([3 x i64], [3 x i64]* @PL_DBcontrol, i64 0, i64 0), align 16
  store i64 0, i64* getelementptr inbounds ([3 x i64], [3 x i64]* @PL_DBcontrol, i64 0, i64 1), align 8
  store i64 0, i64* getelementptr inbounds ([3 x i64], [3 x i64]* @PL_DBcontrol, i64 0, i64 2), align 16
  store %struct.cv* null, %struct.cv** @PL_DBcv, align 8
  store %struct.av* null, %struct.av** @PL_dbargs, align 8
  store %struct.hv* null, %struct.hv** @PL_debstash, align 8
  %137 = load %struct.gv*, %struct.gv** @PL_envgv, align 8
  %138 = bitcast %struct.gv* %137 to i8*
  %139 = bitcast i8* %138 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %139)
  %140 = load %struct.gv*, %struct.gv** @PL_incgv, align 8
  %141 = bitcast %struct.gv* %140 to i8*
  %142 = bitcast i8* %141 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %142)
  %143 = load %struct.gv*, %struct.gv** @PL_argvgv, align 8
  %144 = bitcast %struct.gv* %143 to i8*
  %145 = bitcast i8* %144 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %145)
  %146 = load %struct.gv*, %struct.gv** @PL_replgv, align 8
  %147 = bitcast %struct.gv* %146 to i8*
  %148 = bitcast i8* %147 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %148)
  %149 = load %struct.gv*, %struct.gv** @PL_DBgv, align 8
  %150 = bitcast %struct.gv* %149 to i8*
  %151 = bitcast i8* %150 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %151)
  %152 = load %struct.gv*, %struct.gv** @PL_DBline, align 8
  %153 = bitcast %struct.gv* %152 to i8*
  %154 = bitcast i8* %153 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %154)
  %155 = load %struct.gv*, %struct.gv** @PL_DBsub, align 8
  %156 = bitcast %struct.gv* %155 to i8*
  %157 = bitcast i8* %156 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %157)
  store %struct.gv* null, %struct.gv** @PL_envgv, align 8
  store %struct.gv* null, %struct.gv** @PL_incgv, align 8
  store %struct.gv* null, %struct.gv** @PL_argvgv, align 8
  store %struct.gv* null, %struct.gv** @PL_replgv, align 8
  store %struct.gv* null, %struct.gv** @PL_DBgv, align 8
  store %struct.gv* null, %struct.gv** @PL_DBline, align 8
  store %struct.gv* null, %struct.gv** @PL_DBsub, align 8
  %158 = load %struct.av*, %struct.av** @PL_argvout_stack, align 8
  %159 = bitcast %struct.av* %158 to i8*
  %160 = bitcast i8* %159 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %160)
  store %struct.av* null, %struct.av** @PL_argvout_stack, align 8
  %161 = load %struct.hv*, %struct.hv** @PL_modglobal, align 8
  %162 = bitcast %struct.hv* %161 to i8*
  %163 = bitcast i8* %162 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %163)
  store %struct.hv* null, %struct.hv** @PL_modglobal, align 8
  %164 = load %struct.av*, %struct.av** @PL_preambleav, align 8
  %165 = bitcast %struct.av* %164 to i8*
  %166 = bitcast i8* %165 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %166)
  store %struct.av* null, %struct.av** @PL_preambleav, align 8
  %167 = load %struct.sv*, %struct.sv** @PL_subname, align 8
  %168 = bitcast %struct.sv* %167 to i8*
  %169 = bitcast i8* %168 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %169)
  store %struct.sv* null, %struct.sv** @PL_subname, align 8
  %170 = load %struct.sv*, %struct.sv** @PL_toptarget, align 8
  %171 = bitcast %struct.sv* %170 to i8*
  %172 = bitcast i8* %171 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %172)
  store %struct.sv* null, %struct.sv** @PL_toptarget, align 8
  %173 = load %struct.sv*, %struct.sv** @PL_bodytarget, align 8
  %174 = bitcast %struct.sv* %173 to i8*
  %175 = bitcast i8* %174 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %175)
  store %struct.sv* null, %struct.sv** @PL_bodytarget, align 8
  store %struct.sv* null, %struct.sv** @PL_formtarget, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond66

for.cond66:                                       ; preds = %for.inc74, %if.end65
  %176 = load i32, i32* %i, align 4
  %cmp67 = icmp slt i32 %176, 10
  br i1 %cmp67, label %for.body69, label %for.end76

for.body69:                                       ; preds = %for.cond66
  %177 = load i32, i32* %i, align 4
  %idxprom70 = sext i32 %177 to i64
  %arrayidx71 = getelementptr inbounds [10 x %struct.sv*], [10 x %struct.sv*]* @PL_utf8_swash_ptrs, i64 0, i64 %idxprom70
  %178 = load %struct.sv*, %struct.sv** %arrayidx71, align 8
  %179 = bitcast %struct.sv* %178 to i8*
  %180 = bitcast i8* %179 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %180)
  %181 = load i32, i32* %i, align 4
  %idxprom72 = sext i32 %181 to i64
  %arrayidx73 = getelementptr inbounds [10 x %struct.sv*], [10 x %struct.sv*]* @PL_utf8_swash_ptrs, i64 0, i64 %idxprom72
  store %struct.sv* null, %struct.sv** %arrayidx73, align 8
  br label %for.inc74

for.inc74:                                        ; preds = %for.body69
  %182 = load i32, i32* %i, align 4
  %inc75 = add nsw i32 %182, 1
  store i32 %inc75, i32* %i, align 4
  br label %for.cond66

for.end76:                                        ; preds = %for.cond66
  %183 = load %struct.sv*, %struct.sv** @PL_utf8_mark, align 8
  %184 = bitcast %struct.sv* %183 to i8*
  %185 = bitcast i8* %184 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %185)
  %186 = load %struct.sv*, %struct.sv** @PL_utf8_toupper, align 8
  %187 = bitcast %struct.sv* %186 to i8*
  %188 = bitcast i8* %187 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %188)
  %189 = load %struct.sv*, %struct.sv** @PL_utf8_totitle, align 8
  %190 = bitcast %struct.sv* %189 to i8*
  %191 = bitcast i8* %190 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %191)
  %192 = load %struct.sv*, %struct.sv** @PL_utf8_tolower, align 8
  %193 = bitcast %struct.sv* %192 to i8*
  %194 = bitcast i8* %193 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %194)
  %195 = load %struct.sv*, %struct.sv** @PL_utf8_tofold, align 8
  %196 = bitcast %struct.sv* %195 to i8*
  %197 = bitcast i8* %196 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %197)
  %198 = load %struct.sv*, %struct.sv** @PL_utf8_idstart, align 8
  %199 = bitcast %struct.sv* %198 to i8*
  %200 = bitcast i8* %199 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %200)
  %201 = load %struct.sv*, %struct.sv** @PL_utf8_idcont, align 8
  %202 = bitcast %struct.sv* %201 to i8*
  %203 = bitcast i8* %202 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %203)
  %204 = load %struct.sv*, %struct.sv** @PL_utf8_foldable, align 8
  %205 = bitcast %struct.sv* %204 to i8*
  %206 = bitcast i8* %205 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %206)
  %207 = load %struct.hv*, %struct.hv** @PL_utf8_foldclosures, align 8
  %208 = bitcast %struct.hv* %207 to i8*
  %209 = bitcast i8* %208 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %209)
  %210 = load %struct.sv*, %struct.sv** @PL_AboveLatin1, align 8
  %211 = bitcast %struct.sv* %210 to i8*
  %212 = bitcast i8* %211 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %212)
  %213 = load %struct.sv*, %struct.sv** @PL_InBitmap, align 8
  %214 = bitcast %struct.sv* %213 to i8*
  %215 = bitcast i8* %214 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %215)
  %216 = load %struct.sv*, %struct.sv** @PL_UpperLatin1, align 8
  %217 = bitcast %struct.sv* %216 to i8*
  %218 = bitcast i8* %217 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %218)
  %219 = load %struct.sv*, %struct.sv** @PL_Latin1, align 8
  %220 = bitcast %struct.sv* %219 to i8*
  %221 = bitcast i8* %220 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %221)
  %222 = load %struct.sv*, %struct.sv** @PL_NonL1NonFinalFold, align 8
  %223 = bitcast %struct.sv* %222 to i8*
  %224 = bitcast i8* %223 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %224)
  %225 = load %struct.sv*, %struct.sv** @PL_HasMultiCharFold, align 8
  %226 = bitcast %struct.sv* %225 to i8*
  %227 = bitcast i8* %226 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %227)
  store %struct.sv* null, %struct.sv** @PL_utf8_mark, align 8
  store %struct.sv* null, %struct.sv** @PL_utf8_toupper, align 8
  store %struct.sv* null, %struct.sv** @PL_utf8_totitle, align 8
  store %struct.sv* null, %struct.sv** @PL_utf8_tolower, align 8
  store %struct.sv* null, %struct.sv** @PL_utf8_tofold, align 8
  store %struct.sv* null, %struct.sv** @PL_utf8_idstart, align 8
  store %struct.sv* null, %struct.sv** @PL_utf8_idcont, align 8
  store %struct.hv* null, %struct.hv** @PL_utf8_foldclosures, align 8
  store %struct.sv* null, %struct.sv** @PL_AboveLatin1, align 8
  store %struct.sv* null, %struct.sv** @PL_InBitmap, align 8
  store %struct.sv* null, %struct.sv** @PL_HasMultiCharFold, align 8
  store %struct.sv* null, %struct.sv** @PL_Latin1, align 8
  store %struct.sv* null, %struct.sv** @PL_NonL1NonFinalFold, align 8
  store %struct.sv* null, %struct.sv** @PL_UpperLatin1, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond77

for.cond77:                                       ; preds = %for.inc85, %for.end76
  %228 = load i32, i32* %i, align 4
  %cmp78 = icmp slt i32 %228, 16
  br i1 %cmp78, label %for.body80, label %for.end87

for.body80:                                       ; preds = %for.cond77
  %229 = load i32, i32* %i, align 4
  %idxprom81 = sext i32 %229 to i64
  %arrayidx82 = getelementptr inbounds [16 x %struct.sv*], [16 x %struct.sv*]* @PL_XPosix_ptrs, i64 0, i64 %idxprom81
  %230 = load %struct.sv*, %struct.sv** %arrayidx82, align 8
  %231 = bitcast %struct.sv* %230 to i8*
  %232 = bitcast i8* %231 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %232)
  %233 = load i32, i32* %i, align 4
  %idxprom83 = sext i32 %233 to i64
  %arrayidx84 = getelementptr inbounds [16 x %struct.sv*], [16 x %struct.sv*]* @PL_XPosix_ptrs, i64 0, i64 %idxprom83
  store %struct.sv* null, %struct.sv** %arrayidx84, align 8
  br label %for.inc85

for.inc85:                                        ; preds = %for.body80
  %234 = load i32, i32* %i, align 4
  %inc86 = add nsw i32 %234, 1
  store i32 %inc86, i32* %i, align 4
  br label %for.cond77

for.end87:                                        ; preds = %for.cond77
  store %struct.sv* null, %struct.sv** @PL_GCB_invlist, align 8
  store %struct.sv* null, %struct.sv** @PL_SB_invlist, align 8
  store %struct.sv* null, %struct.sv** @PL_WB_invlist, align 8
  %235 = load i64*, i64** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 12), align 8
  %cmp88 = icmp eq i64* %235, null
  br i1 %cmp88, label %if.end96, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.end87
  %236 = load i64*, i64** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 12), align 8
  %cmp90 = icmp eq i64* %236, getelementptr inbounds (i64, i64* null, i64 1)
  br i1 %cmp90, label %if.end96, label %lor.lhs.false92

lor.lhs.false92:                                  ; preds = %lor.lhs.false
  %237 = load i64*, i64** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 12), align 8
  %cmp93 = icmp eq i64* %237, getelementptr inbounds (i64, i64* null, i64 2)
  br i1 %cmp93, label %if.end96, label %if.then95

if.then95:                                        ; preds = %lor.lhs.false92
  %238 = load i64*, i64** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 12), align 8
  %239 = bitcast i64* %238 to i8*
  call void @free(i8* %239) #6
  br label %if.end96

if.end96:                                         ; preds = %if.then95, %lor.lhs.false92, %lor.lhs.false, %for.end87
  store i64* null, i64** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 12), align 8
  %240 = load %struct.refcounted_he*, %struct.refcounted_he** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 13), align 8
  call void @Perl_refcounted_he_free(%struct.refcounted_he* %240)
  store %struct.refcounted_he* null, %struct.refcounted_he** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 13), align 8
  %241 = load %struct.gv*, %struct.gv** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 9), align 8
  %242 = bitcast %struct.gv* %241 to i8*
  %243 = bitcast i8* %242 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %243)
  store %struct.gv* null, %struct.gv** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 9), align 8
  %244 = load %struct.hv*, %struct.hv** @PL_defstash, align 8
  store %struct.hv* %244, %struct.hv** %hv, align 8
  %245 = load %struct.hv*, %struct.hv** %hv, align 8
  %call97 = call i8* @Perl_hv_common_key_len(%struct.hv* %245, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i32 6, i32 68, %struct.sv* null, i32 0)
  %246 = bitcast i8* %call97 to %struct.sv*
  store %struct.hv* null, %struct.hv** @PL_defstash, align 8
  %247 = load %struct.hv*, %struct.hv** %hv, align 8
  %248 = bitcast %struct.hv* %247 to i8*
  %249 = bitcast i8* %248 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %249)
  %250 = load %struct.sv*, %struct.sv** @PL_curstname, align 8
  %251 = bitcast %struct.sv* %250 to i8*
  %252 = bitcast i8* %251 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %252)
  store %struct.sv* null, %struct.sv** @PL_curstname, align 8
  %253 = load %struct.sv*, %struct.sv** @PL_errors, align 8
  %254 = bitcast %struct.sv* %253 to i8*
  %255 = bitcast i8* %254 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %255)
  store %struct.sv* null, %struct.sv** @PL_errors, align 8
  %256 = load %struct.hv*, %struct.hv** @PL_isarev, align 8
  %257 = bitcast %struct.hv* %256 to i8*
  %258 = bitcast i8* %257 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %258)
  %259 = load i64, i64* @PL_tmps_ix, align 8
  %260 = load i64, i64* @PL_tmps_floor, align 8
  %cmp98 = icmp sgt i64 %259, %260
  br i1 %cmp98, label %if.then100, label %if.end101

if.then100:                                       ; preds = %if.end96
  call void @Perl_free_tmps()
  br label %if.end101

if.end101:                                        ; preds = %if.then100, %if.end96
  %261 = load volatile i8, i8* %destruct_level, align 1
  %conv102 = sext i8 %261 to i32
  %cmp103 = icmp sge i32 %conv102, 2
  br i1 %cmp103, label %if.then105, label %if.end127

if.then105:                                       ; preds = %if.end101
  %262 = load i32, i32* @PL_scopestack_ix, align 4
  %cmp106 = icmp ne i32 %262, 0
  br i1 %cmp106, label %if.then108, label %if.end110

if.then108:                                       ; preds = %if.then105
  %263 = load i32, i32* @PL_scopestack_ix, align 4
  %conv109 = sext i32 %263 to i64
  call void (i32, i8*, ...) @Perl_ck_warner_d(i32 24, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.5, i64 0, i64 0), i64 %conv109)
  br label %if.end110

if.end110:                                        ; preds = %if.then108, %if.then105
  %264 = load i32, i32* @PL_savestack_ix, align 4
  %cmp111 = icmp ne i32 %264, 0
  br i1 %cmp111, label %if.then113, label %if.end115

if.then113:                                       ; preds = %if.end110
  %265 = load i32, i32* @PL_savestack_ix, align 4
  %conv114 = sext i32 %265 to i64
  call void (i32, i8*, ...) @Perl_ck_warner_d(i32 24, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.6, i64 0, i64 0), i64 %conv114)
  br label %if.end115

if.end115:                                        ; preds = %if.then113, %if.end110
  %266 = load i64, i64* @PL_tmps_floor, align 8
  %cmp116 = icmp ne i64 %266, -1
  br i1 %cmp116, label %if.then118, label %if.end119

if.then118:                                       ; preds = %if.end115
  %267 = load i64, i64* @PL_tmps_floor, align 8
  %add = add nsw i64 %267, 1
  call void (i32, i8*, ...) @Perl_ck_warner_d(i32 24, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.7, i64 0, i64 0), i64 %add)
  br label %if.end119

if.end119:                                        ; preds = %if.then118, %if.end115
  %268 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %268, i32 0, i32 4
  %269 = load i32, i32* %si_cxix, align 8
  %cmp120 = icmp ne i32 %269, -1
  br i1 %cmp120, label %if.then122, label %if.end126

if.then122:                                       ; preds = %if.end119
  %270 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix123 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %270, i32 0, i32 4
  %271 = load i32, i32* %si_cxix123, align 8
  %conv124 = sext i32 %271 to i64
  %add125 = add nsw i64 %conv124, 1
  call void (i32, i8*, ...) @Perl_ck_warner_d(i32 24, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.8, i64 0, i64 0), i64 %add125)
  br label %if.end126

if.end126:                                        ; preds = %if.then122, %if.end119
  br label %if.end127

if.end127:                                        ; preds = %if.end126, %if.end101
  br label %while.cond128

while.cond128:                                    ; preds = %while.body132, %if.end127
  %call129 = call i32 @Perl_sv_clean_all()
  %cmp130 = icmp sgt i32 %call129, 2
  br i1 %cmp130, label %while.body132, label %while.end133

while.body132:                                    ; preds = %while.cond128
  br label %while.cond128

while.end133:                                     ; preds = %while.cond128
  %272 = load %struct.av*, %struct.av** @PL_fdpid, align 8
  %sv_flags = getelementptr inbounds %struct.av, %struct.av* %272, i32 0, i32 2
  %273 = load i32, i32* %sv_flags, align 4
  %and134 = and i32 %273, -1073741825
  store i32 %and134, i32* %sv_flags, align 4
  %274 = load %struct.av*, %struct.av** @PL_fdpid, align 8
  %275 = bitcast %struct.av* %274 to i8*
  %276 = bitcast i8* %275 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %276)
  store %struct.av* null, %struct.av** @PL_fdpid, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond135

for.cond135:                                      ; preds = %for.inc143, %while.end133
  %277 = load i32, i32* %i, align 4
  %cmp136 = icmp slt i32 %277, 35
  br i1 %cmp136, label %for.body138, label %for.end145

for.body138:                                      ; preds = %for.cond135
  %278 = load i32, i32* %i, align 4
  %idxprom139 = sext i32 %278 to i64
  %arrayidx140 = getelementptr inbounds [35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 %idxprom139
  %279 = load %struct.sv*, %struct.sv** %arrayidx140, align 8
  %280 = bitcast %struct.sv* %279 to i8*
  %281 = bitcast i8* %280 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %281)
  %282 = load i32, i32* %i, align 4
  %idxprom141 = sext i32 %282 to i64
  %arrayidx142 = getelementptr inbounds [35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 %idxprom141
  store %struct.sv* null, %struct.sv** %arrayidx142, align 8
  br label %for.inc143

for.inc143:                                       ; preds = %for.body138
  %283 = load i32, i32* %i, align 4
  %inc144 = add nsw i32 %283, 1
  store i32 %inc144, i32* %i, align 4
  br label %for.cond135

for.end145:                                       ; preds = %for.cond135
  store i32 0, i32* %riter, align 4
  %284 = load %struct.hv*, %struct.hv** @PL_strtab, align 8
  %sv_any146 = getelementptr inbounds %struct.hv, %struct.hv* %284, i32 0, i32 0
  %285 = load %struct.xpvhv*, %struct.xpvhv** %sv_any146, align 8
  %xhv_max = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %285, i32 0, i32 3
  %286 = load i64, i64* %xhv_max, align 8
  %conv147 = trunc i64 %286 to i32
  store i32 %conv147, i32* %max, align 4
  %287 = load %struct.hv*, %struct.hv** @PL_strtab, align 8
  %sv_u148 = getelementptr inbounds %struct.hv, %struct.hv* %287, i32 0, i32 3
  %svu_hash = bitcast %union.anon.5* %sv_u148 to %struct.he***
  %288 = load %struct.he**, %struct.he*** %svu_hash, align 8
  store %struct.he** %288, %struct.he*** %array, align 8
  %289 = load %struct.he**, %struct.he*** %array, align 8
  %arrayidx149 = getelementptr inbounds %struct.he*, %struct.he** %289, i64 0
  %290 = load %struct.he*, %struct.he** %arrayidx149, align 8
  store %struct.he* %290, %struct.he** %hent, align 8
  br label %for.cond150

for.cond150:                                      ; preds = %if.end167, %for.end145
  %291 = load %struct.he*, %struct.he** %hent, align 8
  %tobool151 = icmp ne %struct.he* %291, null
  br i1 %tobool151, label %land.lhs.true152, label %if.end157

land.lhs.true152:                                 ; preds = %for.cond150
  %call153 = call zeroext i1 @Perl_ckwarn_d(i32 24)
  br i1 %call153, label %if.then155, label %if.end157

if.then155:                                       ; preds = %land.lhs.true152
  %292 = load %struct.he*, %struct.he** %hent, align 8
  %hent_next = getelementptr inbounds %struct.he, %struct.he* %292, i32 0, i32 0
  %293 = load %struct.he*, %struct.he** %hent_next, align 8
  store %struct.he* %293, %struct.he** %next, align 8
  %294 = load %struct.he*, %struct.he** %hent, align 8
  %he_valu = getelementptr inbounds %struct.he, %struct.he* %294, i32 0, i32 2
  %hent_refcount = bitcast %union.anon.0* %he_valu to i64*
  %295 = load i64, i64* %hent_refcount, align 8
  %296 = load %struct.he*, %struct.he** %hent, align 8
  %hent_hek = getelementptr inbounds %struct.he, %struct.he* %296, i32 0, i32 1
  %297 = load %struct.hek*, %struct.hek** %hent_hek, align 8
  %hek_key = getelementptr inbounds %struct.hek, %struct.hek* %297, i32 0, i32 2
  %arraydecay156 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key, i64 0, i64 0
  call void (i32, i8*, ...) @Perl_warner(i32 24, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.9, i64 0, i64 0), i64 %295, i8* %arraydecay156)
  %298 = load %struct.he*, %struct.he** %hent, align 8
  %299 = bitcast %struct.he* %298 to i8*
  call void @Perl_safesysfree(i8* %299)
  %300 = load %struct.he*, %struct.he** %next, align 8
  store %struct.he* %300, %struct.he** %hent, align 8
  br label %if.end157

if.end157:                                        ; preds = %if.then155, %land.lhs.true152, %for.cond150
  %301 = load %struct.he*, %struct.he** %hent, align 8
  %tobool158 = icmp ne %struct.he* %301, null
  br i1 %tobool158, label %if.end167, label %if.then159

if.then159:                                       ; preds = %if.end157
  %302 = load i32, i32* %riter, align 4
  %inc160 = add nsw i32 %302, 1
  store i32 %inc160, i32* %riter, align 4
  %303 = load i32, i32* %max, align 4
  %cmp161 = icmp sgt i32 %inc160, %303
  br i1 %cmp161, label %if.then163, label %if.end164

if.then163:                                       ; preds = %if.then159
  br label %for.end168

if.end164:                                        ; preds = %if.then159
  %304 = load %struct.he**, %struct.he*** %array, align 8
  %305 = load i32, i32* %riter, align 4
  %idxprom165 = sext i32 %305 to i64
  %arrayidx166 = getelementptr inbounds %struct.he*, %struct.he** %304, i64 %idxprom165
  %306 = load %struct.he*, %struct.he** %arrayidx166, align 8
  store %struct.he* %306, %struct.he** %hent, align 8
  br label %if.end167

if.end167:                                        ; preds = %if.end164, %if.end157
  br label %for.cond150

for.end168:                                       ; preds = %if.then163
  %307 = load %struct.he**, %struct.he*** %array, align 8
  %308 = bitcast %struct.he** %307 to i8*
  call void @Perl_safesysfree(i8* %308)
  %309 = load %struct.hv*, %struct.hv** @PL_strtab, align 8
  %sv_u169 = getelementptr inbounds %struct.hv, %struct.hv* %309, i32 0, i32 3
  %svu_hash170 = bitcast %union.anon.5* %sv_u169 to %struct.he***
  store %struct.he** null, %struct.he*** %svu_hash170, align 8
  %310 = load %struct.hv*, %struct.hv** @PL_strtab, align 8
  %sv_any171 = getelementptr inbounds %struct.hv, %struct.hv* %310, i32 0, i32 0
  %311 = load %struct.xpvhv*, %struct.xpvhv** %sv_any171, align 8
  %xhv_keys = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %311, i32 0, i32 2
  store i64 0, i64* %xhv_keys, align 8
  %312 = load %struct.hv*, %struct.hv** @PL_strtab, align 8
  %313 = bitcast %struct.hv* %312 to i8*
  %314 = bitcast i8* %313 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %314)
  store i32 0, i32* getelementptr inbounds (%struct.sv, %struct.sv* @PL_sv_yes, i32 0, i32 1), align 8
  call void @Perl_sv_clear(%struct.sv* @PL_sv_yes)
  store i8* null, i8** getelementptr inbounds (%struct.sv, %struct.sv* @PL_sv_yes, i32 0, i32 0), align 8
  store i32 0, i32* getelementptr inbounds (%struct.sv, %struct.sv* @PL_sv_yes, i32 0, i32 2), align 4
  store i32 0, i32* getelementptr inbounds (%struct.sv, %struct.sv* @PL_sv_no, i32 0, i32 1), align 8
  call void @Perl_sv_clear(%struct.sv* @PL_sv_no)
  store i8* null, i8** getelementptr inbounds (%struct.sv, %struct.sv* @PL_sv_no, i32 0, i32 0), align 8
  store i32 0, i32* getelementptr inbounds (%struct.sv, %struct.sv* @PL_sv_no, i32 0, i32 2), align 4
  store i32 0, i32* %i172, align 4
  br label %for.cond173

for.cond173:                                      ; preds = %for.inc187, %for.end168
  %315 = load i32, i32* %i172, align 4
  %cmp174 = icmp sle i32 %315, 2
  br i1 %cmp174, label %for.body176, label %for.end189

for.body176:                                      ; preds = %for.cond173
  %316 = load i32, i32* %i172, align 4
  %idxprom177 = sext i32 %316 to i64
  %arrayidx178 = getelementptr inbounds [3 x %struct.sv], [3 x %struct.sv]* getelementptr inbounds (%struct.perl_debug_pad, %struct.perl_debug_pad* @PL_debug_pad, i32 0, i32 0), i64 0, i64 %idxprom177
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %arrayidx178, i32 0, i32 1
  store i32 0, i32* %sv_refcnt, align 8
  %317 = load i32, i32* %i172, align 4
  %idxprom179 = sext i32 %317 to i64
  %arrayidx180 = getelementptr inbounds [3 x %struct.sv], [3 x %struct.sv]* getelementptr inbounds (%struct.perl_debug_pad, %struct.perl_debug_pad* @PL_debug_pad, i32 0, i32 0), i64 0, i64 %idxprom179
  call void @Perl_sv_clear(%struct.sv* %arrayidx180)
  %318 = load i32, i32* %i172, align 4
  %idxprom181 = sext i32 %318 to i64
  %arrayidx182 = getelementptr inbounds [3 x %struct.sv], [3 x %struct.sv]* getelementptr inbounds (%struct.perl_debug_pad, %struct.perl_debug_pad* @PL_debug_pad, i32 0, i32 0), i64 0, i64 %idxprom181
  %sv_any183 = getelementptr inbounds %struct.sv, %struct.sv* %arrayidx182, i32 0, i32 0
  store i8* null, i8** %sv_any183, align 8
  %319 = load i32, i32* %i172, align 4
  %idxprom184 = sext i32 %319 to i64
  %arrayidx185 = getelementptr inbounds [3 x %struct.sv], [3 x %struct.sv]* getelementptr inbounds (%struct.perl_debug_pad, %struct.perl_debug_pad* @PL_debug_pad, i32 0, i32 0), i64 0, i64 %idxprom184
  %sv_flags186 = getelementptr inbounds %struct.sv, %struct.sv* %arrayidx185, i32 0, i32 2
  store i32 0, i32* %sv_flags186, align 4
  br label %for.inc187

for.inc187:                                       ; preds = %for.body176
  %320 = load i32, i32* %i172, align 4
  %inc188 = add nsw i32 %320, 1
  store i32 %inc188, i32* %i172, align 4
  br label %for.cond173

for.end189:                                       ; preds = %for.cond173
  %321 = load i64, i64* @PL_sv_count, align 8
  %cmp190 = icmp ne i64 %321, 0
  br i1 %cmp190, label %land.lhs.true192, label %if.end196

land.lhs.true192:                                 ; preds = %for.end189
  %call193 = call zeroext i1 @Perl_ckwarn_d(i32 24)
  br i1 %call193, label %if.then195, label %if.end196

if.then195:                                       ; preds = %land.lhs.true192
  %322 = load i64, i64* @PL_sv_count, align 8
  call void (i32, i8*, ...) @Perl_warner(i32 24, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.10, i64 0, i64 0), i64 %322)
  br label %if.end196

if.end196:                                        ; preds = %if.then195, %land.lhs.true192, %for.end189
  store i64 0, i64* @PL_sv_count, align 8
  call void @PerlIO_cleanup()
  store i32 0, i32* getelementptr inbounds (%struct.sv, %struct.sv* @PL_sv_undef, i32 0, i32 1), align 8
  %323 = load i32, i32* getelementptr inbounds (%struct.sv, %struct.sv* @PL_sv_undef, i32 0, i32 2), align 4
  %and197 = and i32 %323, -134283265
  store i32 %and197, i32* getelementptr inbounds (%struct.sv, %struct.sv* @PL_sv_undef, i32 0, i32 2), align 4
  %324 = load i8*, i8** @PL_origfilename, align 8
  call void @Perl_safesysfree(i8* %324)
  store i8* null, i8** @PL_origfilename, align 8
  %325 = load %struct.pmop*, %struct.pmop** @PL_reg_curpm, align 8
  %326 = bitcast %struct.pmop* %325 to i8*
  call void @Perl_safesysfree(i8* %326)
  call void @Perl_free_tied_hv_pool()
  %327 = load i8*, i8** @PL_op_mask, align 8
  call void @Perl_safesysfree(i8* %327)
  %328 = load %struct.sv**, %struct.sv*** @PL_psig_name, align 8
  %329 = bitcast %struct.sv** %328 to i8*
  call void @Perl_safesysfree(i8* %329)
  store %struct.sv** null, %struct.sv*** @PL_psig_name, align 8
  store %struct.sv** null, %struct.sv*** @PL_psig_ptr, align 8
  %330 = load i32*, i32** @PL_psig_pend, align 8
  store i32* %330, i32** %psig_save, align 8
  store i32* null, i32** @PL_psig_pend, align 8
  %331 = load i32*, i32** %psig_save, align 8
  %332 = bitcast i32* %331 to i8*
  call void @Perl_safesysfree(i8* %332)
  call void @S_nuke_stacks()
  store i8 0, i8* @PL_tainting, align 1
  store i8 0, i8* @PL_taint_warn, align 1
  store i32 0, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  store volatile i32 0, i32* @PL_debug, align 4
  store %struct.hv* null, %struct.hv** @PL_custom_op_names, align 8
  store %struct.hv* null, %struct.hv** @PL_custom_op_descs, align 8
  store %struct.hv* null, %struct.hv** @PL_custom_ops, align 8
  call void @Perl_sv_free_arenas()
  br label %while.cond198

while.cond198:                                    ; preds = %while.body200, %if.end196
  %333 = load %struct.regmatch_slab*, %struct.regmatch_slab** @PL_regmatch_slab, align 8
  %tobool199 = icmp ne %struct.regmatch_slab* %333, null
  br i1 %tobool199, label %while.body200, label %while.end202

while.body200:                                    ; preds = %while.cond198
  %334 = load %struct.regmatch_slab*, %struct.regmatch_slab** @PL_regmatch_slab, align 8
  store %struct.regmatch_slab* %334, %struct.regmatch_slab** %s, align 8
  %335 = load %struct.regmatch_slab*, %struct.regmatch_slab** @PL_regmatch_slab, align 8
  %next201 = getelementptr inbounds %struct.regmatch_slab, %struct.regmatch_slab* %335, i32 0, i32 2
  %336 = load %struct.regmatch_slab*, %struct.regmatch_slab** %next201, align 8
  store %struct.regmatch_slab* %336, %struct.regmatch_slab** @PL_regmatch_slab, align 8
  %337 = load %struct.regmatch_slab*, %struct.regmatch_slab** %s, align 8
  %338 = bitcast %struct.regmatch_slab* %337 to i8*
  call void @Perl_safesysfree(i8* %338)
  br label %while.cond198

while.end202:                                     ; preds = %while.cond198
  %339 = load %struct.sv*, %struct.sv** @PL_mess_sv, align 8
  %tobool203 = icmp ne %struct.sv* %339, null
  br i1 %tobool203, label %if.then204, label %if.end264

if.then204:                                       ; preds = %while.end202
  %340 = load %struct.sv*, %struct.sv** @PL_mess_sv, align 8
  %sv_any205 = getelementptr inbounds %struct.sv, %struct.sv* %340, i32 0, i32 0
  %341 = load i8*, i8** %sv_any205, align 8
  %342 = bitcast i8* %341 to %struct.xpvmg*
  %xmg_u = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %342, i32 0, i32 1
  %xmg_magic = bitcast %union._xmgu* %xmg_u to %struct.magic**
  %343 = load %struct.magic*, %struct.magic** %xmg_magic, align 8
  store %struct.magic* %343, %struct.magic** %mg, align 8
  br label %for.cond206

for.cond206:                                      ; preds = %for.inc220, %if.then204
  %344 = load %struct.magic*, %struct.magic** %mg, align 8
  %tobool207 = icmp ne %struct.magic* %344, null
  br i1 %tobool207, label %for.body208, label %for.end221

for.body208:                                      ; preds = %for.cond206
  %345 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_moremagic = getelementptr inbounds %struct.magic, %struct.magic* %345, i32 0, i32 0
  %346 = load %struct.magic*, %struct.magic** %mg_moremagic, align 8
  store %struct.magic* %346, %struct.magic** %moremagic, align 8
  %347 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_ptr = getelementptr inbounds %struct.magic, %struct.magic* %347, i32 0, i32 7
  %348 = load i8*, i8** %mg_ptr, align 8
  %tobool209 = icmp ne i8* %348, null
  br i1 %tobool209, label %land.lhs.true210, label %if.end219

land.lhs.true210:                                 ; preds = %for.body208
  %349 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_type = getelementptr inbounds %struct.magic, %struct.magic* %349, i32 0, i32 3
  %350 = load i8, i8* %mg_type, align 2
  %conv211 = sext i8 %350 to i32
  %cmp212 = icmp ne i32 %conv211, 103
  br i1 %cmp212, label %land.lhs.true214, label %if.end219

land.lhs.true214:                                 ; preds = %land.lhs.true210
  %351 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len = getelementptr inbounds %struct.magic, %struct.magic* %351, i32 0, i32 5
  %352 = load i64, i64* %mg_len, align 8
  %cmp215 = icmp sge i64 %352, 0
  br i1 %cmp215, label %if.then217, label %if.end219

if.then217:                                       ; preds = %land.lhs.true214
  %353 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_ptr218 = getelementptr inbounds %struct.magic, %struct.magic* %353, i32 0, i32 7
  %354 = load i8*, i8** %mg_ptr218, align 8
  call void @Perl_safesysfree(i8* %354)
  br label %if.end219

if.end219:                                        ; preds = %if.then217, %land.lhs.true214, %land.lhs.true210, %for.body208
  %355 = load %struct.magic*, %struct.magic** %mg, align 8
  %356 = bitcast %struct.magic* %355 to i8*
  call void @Perl_safesysfree(i8* %356)
  br label %for.inc220

for.inc220:                                       ; preds = %if.end219
  %357 = load %struct.magic*, %struct.magic** %moremagic, align 8
  store %struct.magic* %357, %struct.magic** %mg, align 8
  br label %for.cond206

for.end221:                                       ; preds = %for.cond206
  br label %do.body222

do.body222:                                       ; preds = %for.end221
  %358 = load %struct.sv*, %struct.sv** @PL_mess_sv, align 8
  %sv_any223 = getelementptr inbounds %struct.sv, %struct.sv* %358, i32 0, i32 0
  %359 = load i8*, i8** %sv_any223, align 8
  %360 = bitcast i8* %359 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %360, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.41* %xpv_len_u to i64*
  %361 = load i64, i64* %xpvlenu_len, align 8
  %tobool224 = icmp ne i64 %361, 0
  br i1 %tobool224, label %if.then225, label %if.end261

if.then225:                                       ; preds = %do.body222
  %362 = load %struct.sv*, %struct.sv** @PL_mess_sv, align 8
  %sv_flags226 = getelementptr inbounds %struct.sv, %struct.sv* %362, i32 0, i32 2
  %363 = load i32, i32* %sv_flags226, align 4
  %and227 = and i32 %363, 33554432
  %tobool228 = icmp ne i32 %and227, 0
  br i1 %tobool228, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then225
  br i1 true, label %if.then229, label %if.end258

cond.false:                                       ; preds = %if.then225
  br i1 false, label %if.then229, label %if.end258

if.then229:                                       ; preds = %cond.false, %cond.true
  br label %do.body230

do.body230:                                       ; preds = %if.then229
  %364 = load %struct.sv*, %struct.sv** @PL_mess_sv, align 8
  %sv_flags231 = getelementptr inbounds %struct.sv, %struct.sv* %364, i32 0, i32 2
  %365 = load i32, i32* %sv_flags231, align 4
  %and232 = and i32 %365, 33554432
  %tobool233 = icmp ne i32 %and232, 0
  br i1 %tobool233, label %if.then234, label %if.else

if.then234:                                       ; preds = %do.body230
  %366 = load %struct.sv*, %struct.sv** @PL_mess_sv, align 8
  %sv_u235 = getelementptr inbounds %struct.sv, %struct.sv* %366, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u235 to i8**
  %367 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %367, i64 0
  %arrayidx236 = getelementptr inbounds i8, i8* %add.ptr, i64 -1
  %368 = load i8, i8* %arrayidx236, align 1
  %conv237 = zext i8 %368 to i64
  store i64 %conv237, i64* %zok, align 8
  %369 = load i64, i64* %zok, align 8
  %tobool238 = icmp ne i64 %369, 0
  br i1 %tobool238, label %if.end245, label %if.then239

if.then239:                                       ; preds = %if.then234
  %370 = bitcast i64* %zok to i8*
  %371 = load %struct.sv*, %struct.sv** @PL_mess_sv, align 8
  %sv_u240 = getelementptr inbounds %struct.sv, %struct.sv* %371, i32 0, i32 3
  %svu_pv241 = bitcast %union.anon* %sv_u240 to i8**
  %372 = load i8*, i8** %svu_pv241, align 8
  %add.ptr242 = getelementptr inbounds i8, i8* %372, i64 0
  %add.ptr243 = getelementptr inbounds i8, i8* %add.ptr242, i64 -1
  %add.ptr244 = getelementptr inbounds i8, i8* %add.ptr243, i64 -8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %370, i8* align 1 %add.ptr244, i64 8, i1 false)
  br label %if.end245

if.end245:                                        ; preds = %if.then239, %if.then234
  br label %if.end246

if.else:                                          ; preds = %do.body230
  store i64 0, i64* %zok, align 8
  br label %if.end246

if.end246:                                        ; preds = %if.else, %if.end245
  br label %do.end247

do.end247:                                        ; preds = %if.end246
  br label %do.body248

do.body248:                                       ; preds = %do.end247
  %373 = load %struct.sv*, %struct.sv** @PL_mess_sv, align 8
  %sv_u249 = getelementptr inbounds %struct.sv, %struct.sv* %373, i32 0, i32 3
  %svu_pv250 = bitcast %union.anon* %sv_u249 to i8**
  %374 = load i8*, i8** %svu_pv250, align 8
  %add.ptr251 = getelementptr inbounds i8, i8* %374, i64 0
  %375 = load i64, i64* %zok, align 8
  %idx.neg = sub i64 0, %375
  %add.ptr252 = getelementptr inbounds i8, i8* %add.ptr251, i64 %idx.neg
  %376 = load %struct.sv*, %struct.sv** @PL_mess_sv, align 8
  %sv_u253 = getelementptr inbounds %struct.sv, %struct.sv* %376, i32 0, i32 3
  %svu_pv254 = bitcast %union.anon* %sv_u253 to i8**
  store i8* %add.ptr252, i8** %svu_pv254, align 8
  br label %do.end255

do.end255:                                        ; preds = %do.body248
  %377 = load %struct.sv*, %struct.sv** @PL_mess_sv, align 8
  %sv_flags256 = getelementptr inbounds %struct.sv, %struct.sv* %377, i32 0, i32 2
  %378 = load i32, i32* %sv_flags256, align 4
  %and257 = and i32 %378, -33554433
  store i32 %and257, i32* %sv_flags256, align 4
  br label %if.end258

if.end258:                                        ; preds = %do.end255, %cond.false, %cond.true
  %379 = load %struct.sv*, %struct.sv** @PL_mess_sv, align 8
  %sv_u259 = getelementptr inbounds %struct.sv, %struct.sv* %379, i32 0, i32 3
  %svu_pv260 = bitcast %union.anon* %sv_u259 to i8**
  %380 = load i8*, i8** %svu_pv260, align 8
  call void @Perl_safesysfree(i8* %380)
  br label %if.end261

if.end261:                                        ; preds = %if.end258, %do.body222
  br label %do.end262

do.end262:                                        ; preds = %if.end261
  %381 = load %struct.sv*, %struct.sv** @PL_mess_sv, align 8
  %sv_any263 = getelementptr inbounds %struct.sv, %struct.sv* %381, i32 0, i32 0
  %382 = load i8*, i8** %sv_any263, align 8
  call void @Perl_safesysfree(i8* %382)
  %383 = load %struct.sv*, %struct.sv** @PL_mess_sv, align 8
  %384 = bitcast %struct.sv* %383 to i8*
  call void @Perl_safesysfree(i8* %384)
  store %struct.sv* null, %struct.sv** @PL_mess_sv, align 8
  br label %if.end264

if.end264:                                        ; preds = %do.end262, %while.end202
  %385 = load i32, i32* @PL_statusvalue, align 4
  store i32 %385, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end264, %if.then50, %if.then15
  %386 = load i32, i32* %retval, align 4
  ret i32 %386
}

; Function Attrs: nounwind returns_twice
declare dso_local i32 @__sigsetjmp(%struct.__jmp_buf_tag*, i32) #4

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_call_list(i32 %oldscope, %struct.av* %paramList) #0 {
entry:
  %oldscope.addr = alloca i32, align 4
  %paramList.addr = alloca %struct.av*, align 8
  %atsv = alloca %struct.sv*, align 8
  %oldline = alloca i32, align 4
  %cv = alloca %struct.cv*, align 8
  %len = alloca i64, align 8
  %ret = alloca i32, align 4
  %cur_env = alloca %struct.jmpenv, align 8
  %mark_stack_entry = alloca i32*, align 8
  store i32 %oldscope, i32* %oldscope.addr, align 4
  store %struct.av* %paramList, %struct.av** %paramList.addr, align 8
  %0 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %tobool = icmp ne %struct.cop* %0, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_line = getelementptr inbounds %struct.cop, %struct.cop* %1, i32 0, i32 7
  %2 = load i32, i32* %cop_line, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ]
  store volatile i32 %cond, i32* %oldline, align 4
  br label %while.cond

while.cond:                                       ; preds = %do.end149, %cond.end
  %3 = load %struct.av*, %struct.av** %paramList.addr, align 8
  %call = call i64 @S_av_top_index(%struct.av* %3)
  %cmp = icmp sge i64 %call, 0
  br i1 %cmp, label %while.body, label %while.end150

while.body:                                       ; preds = %while.cond
  %4 = load %struct.av*, %struct.av** %paramList.addr, align 8
  %call1 = call %struct.sv* @Perl_av_shift(%struct.av* %4)
  %5 = bitcast %struct.sv* %call1 to i8*
  %6 = bitcast i8* %5 to %struct.cv*
  store %struct.cv* %6, %struct.cv** %cv, align 8
  %7 = load i8, i8* @PL_savebegin, align 1
  %tobool2 = trunc i8 %7 to i1
  br i1 %tobool2, label %if.then, label %if.else12

if.then:                                          ; preds = %while.body
  %8 = load %struct.av*, %struct.av** %paramList.addr, align 8
  %9 = load %struct.av*, %struct.av** @PL_beginav, align 8
  %cmp3 = icmp eq %struct.av* %8, %9
  br i1 %cmp3, label %if.then4, label %if.else

if.then4:                                         ; preds = %if.then
  %10 = load %struct.cv*, %struct.cv** %cv, align 8
  %11 = bitcast %struct.cv* %10 to i8*
  %12 = bitcast i8* %11 to %struct.sv*
  call void @Perl_av_create_and_push(%struct.av** @PL_beginav_save, %struct.sv* %12)
  br label %if.end11

if.else:                                          ; preds = %if.then
  %13 = load %struct.av*, %struct.av** %paramList.addr, align 8
  %14 = load %struct.av*, %struct.av** @PL_checkav, align 8
  %cmp5 = icmp eq %struct.av* %13, %14
  br i1 %cmp5, label %if.then6, label %if.else7

if.then6:                                         ; preds = %if.else
  %15 = load %struct.cv*, %struct.cv** %cv, align 8
  %16 = bitcast %struct.cv* %15 to i8*
  %17 = bitcast i8* %16 to %struct.sv*
  call void @Perl_av_create_and_push(%struct.av** @PL_checkav_save, %struct.sv* %17)
  br label %if.end10

if.else7:                                         ; preds = %if.else
  %18 = load %struct.av*, %struct.av** %paramList.addr, align 8
  %19 = load %struct.av*, %struct.av** @PL_unitcheckav, align 8
  %cmp8 = icmp eq %struct.av* %18, %19
  br i1 %cmp8, label %if.then9, label %if.end

if.then9:                                         ; preds = %if.else7
  %20 = load %struct.cv*, %struct.cv** %cv, align 8
  %21 = bitcast %struct.cv* %20 to i8*
  %22 = bitcast i8* %21 to %struct.sv*
  call void @Perl_av_create_and_push(%struct.av** @PL_unitcheckav_save, %struct.sv* %22)
  br label %if.end

if.end:                                           ; preds = %if.then9, %if.else7
  br label %if.end10

if.end10:                                         ; preds = %if.end, %if.then6
  br label %if.end11

if.end11:                                         ; preds = %if.end10, %if.then4
  br label %if.end13

if.else12:                                        ; preds = %while.body
  %23 = load %struct.cv*, %struct.cv** %cv, align 8
  %24 = bitcast %struct.cv* %23 to i8*
  %25 = bitcast i8* %24 to %struct.sv*
  %26 = bitcast %struct.sv* %25 to i8*
  call void @Perl_save_pushptr(i8* %26, i32 11)
  br label %if.end13

if.end13:                                         ; preds = %if.else12, %if.end11
  br label %do.body

do.body:                                          ; preds = %if.end13
  %27 = load %struct.jmpenv*, %struct.jmpenv** @PL_top_env, align 8
  %je_prev = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 1
  store %struct.jmpenv* %27, %struct.jmpenv** %je_prev, align 8
  %je_buf = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 0
  %arraydecay = getelementptr inbounds [1 x %struct.__jmp_buf_tag], [1 x %struct.__jmp_buf_tag]* %je_buf, i64 0, i64 0
  %call14 = call i32 @__sigsetjmp(%struct.__jmp_buf_tag* %arraydecay, i32 0) #9
  %je_ret = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 2
  store i32 %call14, i32* %je_ret, align 8
  store %struct.jmpenv* %cur_env, %struct.jmpenv** @PL_top_env, align 8
  %je_mustcatch = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 3
  store i8 0, i8* %je_mustcatch, align 4
  %je_ret15 = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 2
  %28 = load i32, i32* %je_ret15, align 8
  store i32 %28, i32* %ret, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %29 = load i32, i32* %ret, align 4
  switch i32 %29, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb79
    i32 2, label %sw.bb80
    i32 3, label %sw.bb99
  ]

sw.bb:                                            ; preds = %do.end
  br label %do.body16

do.body16:                                        ; preds = %sw.bb
  %30 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %30, i32 1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  store i32* %incdec.ptr, i32** %mark_stack_entry, align 8
  %31 = load i32*, i32** @PL_markstack_max, align 8
  %cmp17 = icmp eq i32* %incdec.ptr, %31
  br i1 %cmp17, label %cond.true18, label %cond.false19

cond.true18:                                      ; preds = %do.body16
  br i1 true, label %if.then20, label %if.end22

cond.false19:                                     ; preds = %do.body16
  br i1 false, label %if.then20, label %if.end22

if.then20:                                        ; preds = %cond.false19, %cond.true18
  %call21 = call i32* @Perl_markstack_grow()
  store i32* %call21, i32** %mark_stack_entry, align 8
  br label %if.end22

if.end22:                                         ; preds = %if.then20, %cond.false19, %cond.true18
  %32 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %33 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %32 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %33 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %conv = trunc i64 %sub.ptr.div to i32
  %34 = load i32*, i32** %mark_stack_entry, align 8
  store i32 %conv, i32* %34, align 4
  br label %do.end23

do.end23:                                         ; preds = %if.end22
  %35 = load %struct.cv*, %struct.cv** %cv, align 8
  %36 = bitcast %struct.cv* %35 to i8*
  %37 = bitcast i8* %36 to %struct.sv*
  %call24 = call i32 @Perl_call_sv(%struct.sv* %37, i32 13)
  %38 = load %struct.gv*, %struct.gv** @PL_errgv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %38, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %39 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %39, i64 0
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 0
  %40 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  %tobool25 = icmp ne %struct.sv* %40, null
  br i1 %tobool25, label %cond.true26, label %cond.false31

cond.true26:                                      ; preds = %do.end23
  %41 = load %struct.gv*, %struct.gv** @PL_errgv, align 8
  %sv_u27 = getelementptr inbounds %struct.gv, %struct.gv* %41, i32 0, i32 3
  %svu_gp28 = bitcast %union.anon.4* %sv_u27 to %struct.gp**
  %42 = load %struct.gp*, %struct.gp** %svu_gp28, align 8
  %add.ptr29 = getelementptr inbounds %struct.gp, %struct.gp* %42, i64 0
  %gp_sv30 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr29, i32 0, i32 0
  br label %cond.end37

cond.false31:                                     ; preds = %do.end23
  %43 = load %struct.gv*, %struct.gv** @PL_errgv, align 8
  %call32 = call %struct.gv* @Perl_gv_add_by_type(%struct.gv* %43, i32 0)
  %sv_u33 = getelementptr inbounds %struct.gv, %struct.gv* %call32, i32 0, i32 3
  %svu_gp34 = bitcast %union.anon.4* %sv_u33 to %struct.gp**
  %44 = load %struct.gp*, %struct.gp** %svu_gp34, align 8
  %add.ptr35 = getelementptr inbounds %struct.gp, %struct.gp* %44, i64 0
  %gp_sv36 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr35, i32 0, i32 0
  br label %cond.end37

cond.end37:                                       ; preds = %cond.false31, %cond.true26
  %cond38 = phi %struct.sv** [ %gp_sv30, %cond.true26 ], [ %gp_sv36, %cond.false31 ]
  %45 = load %struct.sv*, %struct.sv** %cond38, align 8
  store %struct.sv* %45, %struct.sv** %atsv, align 8
  %46 = load %struct.sv*, %struct.sv** %atsv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 2
  %47 = load i32, i32* %sv_flags, align 4
  %and = and i32 %47, 2098176
  %cmp39 = icmp eq i32 %and, 1024
  br i1 %cmp39, label %cond.true41, label %cond.false44

cond.true41:                                      ; preds = %cond.end37
  %48 = load %struct.sv*, %struct.sv** %atsv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 0
  %49 = load i8*, i8** %sv_any, align 8
  %50 = bitcast i8* %49 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %50, i32 0, i32 2
  %51 = load i64, i64* %xpv_cur, align 8
  store i64 %51, i64* %len, align 8
  %52 = load %struct.sv*, %struct.sv** %atsv, align 8
  %sv_u42 = getelementptr inbounds %struct.sv, %struct.sv* %52, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u42 to i8**
  %53 = load i8*, i8** %svu_pv, align 8
  %add.ptr43 = getelementptr inbounds i8, i8* %53, i64 0
  br label %cond.end46

cond.false44:                                     ; preds = %cond.end37
  %54 = load %struct.sv*, %struct.sv** %atsv, align 8
  %call45 = call i8* @Perl_sv_2pv_flags(%struct.sv* %54, i64* %len, i32 34)
  br label %cond.end46

cond.end46:                                       ; preds = %cond.false44, %cond.true41
  %cond47 = phi i8* [ %add.ptr43, %cond.true41 ], [ %call45, %cond.false44 ]
  %55 = load i64, i64* %len, align 8
  %tobool48 = icmp ne i64 %55, 0
  br i1 %tobool48, label %if.then49, label %if.end78

if.then49:                                        ; preds = %cond.end46
  store %struct.cop* @PL_compiling, %struct.cop** @PL_curcop, align 8
  %56 = load volatile i32, i32* %oldline, align 4
  %57 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_line50 = getelementptr inbounds %struct.cop, %struct.cop* %57, i32 0, i32 7
  store i32 %56, i32* %cop_line50, align 4
  %58 = load %struct.av*, %struct.av** %paramList.addr, align 8
  %59 = load %struct.av*, %struct.av** @PL_beginav, align 8
  %cmp51 = icmp eq %struct.av* %58, %59
  br i1 %cmp51, label %if.then53, label %if.else54

if.then53:                                        ; preds = %if.then49
  %60 = load %struct.sv*, %struct.sv** %atsv, align 8
  call void @Perl_sv_catpvn_flags(%struct.sv* %60, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.49, i64 0, i64 0), i64 33, i32 2)
  br label %if.end70

if.else54:                                        ; preds = %if.then49
  %61 = load %struct.sv*, %struct.sv** %atsv, align 8
  %62 = load %struct.av*, %struct.av** %paramList.addr, align 8
  %63 = load %struct.av*, %struct.av** @PL_checkav, align 8
  %cmp55 = icmp eq %struct.av* %62, %63
  br i1 %cmp55, label %cond.true57, label %cond.false58

cond.true57:                                      ; preds = %if.else54
  br label %cond.end68

cond.false58:                                     ; preds = %if.else54
  %64 = load %struct.av*, %struct.av** %paramList.addr, align 8
  %65 = load %struct.av*, %struct.av** @PL_initav, align 8
  %cmp59 = icmp eq %struct.av* %64, %65
  br i1 %cmp59, label %cond.true61, label %cond.false62

cond.true61:                                      ; preds = %cond.false58
  br label %cond.end66

cond.false62:                                     ; preds = %cond.false58
  %66 = load %struct.av*, %struct.av** %paramList.addr, align 8
  %67 = load %struct.av*, %struct.av** @PL_unitcheckav, align 8
  %cmp63 = icmp eq %struct.av* %66, %67
  %68 = zext i1 %cmp63 to i64
  %cond65 = select i1 %cmp63, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.53, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0)
  br label %cond.end66

cond.end66:                                       ; preds = %cond.false62, %cond.true61
  %cond67 = phi i8* [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.52, i64 0, i64 0), %cond.true61 ], [ %cond65, %cond.false62 ]
  br label %cond.end68

cond.end68:                                       ; preds = %cond.end66, %cond.true57
  %cond69 = phi i8* [ getelementptr inbounds ([6 x i8], [6 x i8]* @.str.51, i64 0, i64 0), %cond.true57 ], [ %cond67, %cond.end66 ]
  call void (%struct.sv*, i8*, ...) @Perl_sv_catpvf(%struct.sv* %61, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50, i64 0, i64 0), i8* %cond69)
  br label %if.end70

if.end70:                                         ; preds = %cond.end68, %if.then53
  br label %while.cond71

while.cond71:                                     ; preds = %while.body74, %if.end70
  %69 = load i32, i32* @PL_scopestack_ix, align 4
  %70 = load i32, i32* %oldscope.addr, align 4
  %cmp72 = icmp sgt i32 %69, %70
  br i1 %cmp72, label %while.body74, label %while.end

while.body74:                                     ; preds = %while.cond71
  call void @Perl_pop_scope()
  br label %while.cond71

while.end:                                        ; preds = %while.cond71
  br label %do.body75

do.body75:                                        ; preds = %while.end
  %je_prev76 = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 1
  %71 = load %struct.jmpenv*, %struct.jmpenv** %je_prev76, align 8
  store %struct.jmpenv* %71, %struct.jmpenv** @PL_top_env, align 8
  br label %do.end77

do.end77:                                         ; preds = %do.body75
  %72 = load %struct.sv*, %struct.sv** %atsv, align 8
  %73 = bitcast %struct.sv* %72 to i8*
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.55, i64 0, i64 0), i8* %73)
  br label %if.end78

if.end78:                                         ; preds = %do.end77, %cond.end46
  br label %sw.epilog

sw.bb79:                                          ; preds = %do.end
  store i32 1, i32* @PL_statusvalue, align 4
  store i32 1, i32* @PL_statusvalue_posix, align 4
  br label %sw.bb80

sw.bb80:                                          ; preds = %do.end, %sw.bb79
  br label %while.cond81

while.cond81:                                     ; preds = %while.body84, %sw.bb80
  %74 = load i32, i32* @PL_scopestack_ix, align 4
  %75 = load i32, i32* %oldscope.addr, align 4
  %cmp82 = icmp sgt i32 %74, %75
  br i1 %cmp82, label %while.body84, label %while.end85

while.body84:                                     ; preds = %while.cond81
  call void @Perl_pop_scope()
  br label %while.cond81

while.end85:                                      ; preds = %while.cond81
  %76 = load i64, i64* @PL_tmps_ix, align 8
  %77 = load i64, i64* @PL_tmps_floor, align 8
  %cmp86 = icmp sgt i64 %76, %77
  br i1 %cmp86, label %if.then88, label %if.end89

if.then88:                                        ; preds = %while.end85
  call void @Perl_free_tmps()
  br label %if.end89

if.end89:                                         ; preds = %if.then88, %while.end85
  %78 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %79 = load %struct.hv*, %struct.hv** @PL_defstash, align 8
  %cmp90 = icmp ne %struct.hv* %78, %79
  br i1 %cmp90, label %if.then92, label %if.end94

if.then92:                                        ; preds = %if.end89
  %80 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %81 = bitcast %struct.hv* %80 to i8*
  %82 = bitcast i8* %81 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %82)
  %83 = load %struct.hv*, %struct.hv** @PL_defstash, align 8
  %84 = bitcast %struct.hv* %83 to i8*
  %85 = bitcast i8* %84 to %struct.sv*
  %call93 = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %85)
  %86 = bitcast %struct.sv* %call93 to %struct.hv*
  store %struct.hv* %86, %struct.hv** @PL_curstash, align 8
  br label %if.end94

if.end94:                                         ; preds = %if.then92, %if.end89
  store %struct.cop* @PL_compiling, %struct.cop** @PL_curcop, align 8
  %87 = load volatile i32, i32* %oldline, align 4
  %88 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_line95 = getelementptr inbounds %struct.cop, %struct.cop* %88, i32 0, i32 7
  store i32 %87, i32* %cop_line95, align 4
  br label %do.body96

do.body96:                                        ; preds = %if.end94
  %je_prev97 = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 1
  %89 = load %struct.jmpenv*, %struct.jmpenv** %je_prev97, align 8
  store %struct.jmpenv* %89, %struct.jmpenv** @PL_top_env, align 8
  br label %do.end98

do.end98:                                         ; preds = %do.body96
  call void @S_my_exit_jump()
  br label %sw.bb99

sw.bb99:                                          ; preds = %do.end, %do.end98
  %90 = load %struct.op*, %struct.op** @PL_restartop, align 8
  %tobool100 = icmp ne %struct.op* %90, null
  br i1 %tobool100, label %if.then101, label %if.end113

if.then101:                                       ; preds = %sw.bb99
  store %struct.cop* @PL_compiling, %struct.cop** @PL_curcop, align 8
  %91 = load volatile i32, i32* %oldline, align 4
  %92 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_line102 = getelementptr inbounds %struct.cop, %struct.cop* %92, i32 0, i32 7
  store i32 %91, i32* %cop_line102, align 4
  br label %do.body103

do.body103:                                       ; preds = %if.then101
  %93 = load %struct.jmpenv*, %struct.jmpenv** @PL_top_env, align 8
  %je_prev104 = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %93, i32 0, i32 1
  %94 = load %struct.jmpenv*, %struct.jmpenv** %je_prev104, align 8
  %tobool105 = icmp ne %struct.jmpenv* %94, null
  br i1 %tobool105, label %if.then106, label %if.end109

if.then106:                                       ; preds = %do.body103
  %95 = load %struct.jmpenv*, %struct.jmpenv** @PL_top_env, align 8
  %je_buf107 = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %95, i32 0, i32 0
  %arraydecay108 = getelementptr inbounds [1 x %struct.__jmp_buf_tag], [1 x %struct.__jmp_buf_tag]* %je_buf107, i64 0, i64 0
  call void @siglongjmp(%struct.__jmp_buf_tag* %arraydecay108, i32 3) #10
  unreachable

if.end109:                                        ; preds = %do.body103
  %call110 = call %struct._PerlIO** @Perl_PerlIO_stderr()
  %call111 = call i32 (%struct._PerlIO**, i8*, ...) @PerlIO_printf(%struct._PerlIO** %call110, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.56, i64 0, i64 0), i32 3)
  call void @exit(i32 1) #10
  unreachable

do.end112:                                        ; No predecessors!
  br label %if.end113

if.end113:                                        ; preds = %do.end112, %sw.bb99
  %96 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %tobool114 = icmp ne %struct.gv* %96, null
  br i1 %tobool114, label %land.lhs.true, label %cond.false138

land.lhs.true:                                    ; preds = %if.end113
  %97 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %sv_flags115 = getelementptr inbounds %struct.gv, %struct.gv* %97, i32 0, i32 2
  %98 = load i32, i32* %sv_flags115, align 4
  %and116 = and i32 %98, 255
  %cmp117 = icmp eq i32 %and116, 9
  br i1 %cmp117, label %land.lhs.true119, label %cond.false138

land.lhs.true119:                                 ; preds = %land.lhs.true
  %99 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %sv_u120 = getelementptr inbounds %struct.gv, %struct.gv* %99, i32 0, i32 3
  %svu_gp121 = bitcast %union.anon.4* %sv_u120 to %struct.gp**
  %100 = load %struct.gp*, %struct.gp** %svu_gp121, align 8
  %add.ptr122 = getelementptr inbounds %struct.gp, %struct.gp* %100, i64 0
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr122, i32 0, i32 1
  %101 = load %struct.io*, %struct.io** %gp_io, align 8
  %tobool123 = icmp ne %struct.io* %101, null
  br i1 %tobool123, label %land.lhs.true124, label %cond.false138

land.lhs.true124:                                 ; preds = %land.lhs.true119
  %102 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %sv_u125 = getelementptr inbounds %struct.gv, %struct.gv* %102, i32 0, i32 3
  %svu_gp126 = bitcast %union.anon.4* %sv_u125 to %struct.gp**
  %103 = load %struct.gp*, %struct.gp** %svu_gp126, align 8
  %add.ptr127 = getelementptr inbounds %struct.gp, %struct.gp* %103, i64 0
  %gp_io128 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr127, i32 0, i32 1
  %104 = load %struct.io*, %struct.io** %gp_io128, align 8
  %sv_any129 = getelementptr inbounds %struct.io, %struct.io* %104, i32 0, i32 0
  %105 = load %struct.xpvio*, %struct.xpvio** %sv_any129, align 8
  %xio_ofp = getelementptr inbounds %struct.xpvio, %struct.xpvio* %105, i32 0, i32 5
  %106 = load %struct._PerlIO**, %struct._PerlIO*** %xio_ofp, align 8
  %tobool130 = icmp ne %struct._PerlIO** %106, null
  br i1 %tobool130, label %cond.true131, label %cond.false138

cond.true131:                                     ; preds = %land.lhs.true124
  %107 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %sv_u132 = getelementptr inbounds %struct.gv, %struct.gv* %107, i32 0, i32 3
  %svu_gp133 = bitcast %union.anon.4* %sv_u132 to %struct.gp**
  %108 = load %struct.gp*, %struct.gp** %svu_gp133, align 8
  %add.ptr134 = getelementptr inbounds %struct.gp, %struct.gp* %108, i64 0
  %gp_io135 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr134, i32 0, i32 1
  %109 = load %struct.io*, %struct.io** %gp_io135, align 8
  %sv_any136 = getelementptr inbounds %struct.io, %struct.io* %109, i32 0, i32 0
  %110 = load %struct.xpvio*, %struct.xpvio** %sv_any136, align 8
  %xio_ofp137 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %110, i32 0, i32 5
  %111 = load %struct._PerlIO**, %struct._PerlIO*** %xio_ofp137, align 8
  br label %cond.end140

cond.false138:                                    ; preds = %land.lhs.true124, %land.lhs.true119, %land.lhs.true, %if.end113
  %call139 = call %struct._PerlIO** @Perl_PerlIO_stderr()
  br label %cond.end140

cond.end140:                                      ; preds = %cond.false138, %cond.true131
  %cond141 = phi %struct._PerlIO** [ %111, %cond.true131 ], [ %call139, %cond.false138 ]
  %call142 = call i32 (%struct._PerlIO**, i8*, ...) @PerlIO_printf(%struct._PerlIO** %cond141, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.57, i64 0, i64 0))
  %112 = load i64, i64* @PL_tmps_ix, align 8
  %113 = load i64, i64* @PL_tmps_floor, align 8
  %cmp143 = icmp sgt i64 %112, %113
  br i1 %cmp143, label %if.then145, label %if.end146

if.then145:                                       ; preds = %cond.end140
  call void @Perl_free_tmps()
  br label %if.end146

if.end146:                                        ; preds = %if.then145, %cond.end140
  br label %sw.epilog

sw.epilog:                                        ; preds = %do.end, %if.end146, %if.end78
  br label %do.body147

do.body147:                                       ; preds = %sw.epilog
  %je_prev148 = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 1
  %114 = load %struct.jmpenv*, %struct.jmpenv** %je_prev148, align 8
  store %struct.jmpenv* %114, %struct.jmpenv** @PL_top_env, align 8
  br label %do.end149

do.end149:                                        ; preds = %do.body147
  br label %while.cond

while.end150:                                     ; preds = %while.cond
  ret void
}

declare dso_local void @Perl_pop_scope() #2

declare dso_local void @Perl_free_tmps() #2

declare dso_local i32 @Perl_my_fflush_all() #2

declare dso_local void @Perl_op_free(%struct.op*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @S_SvREFCNT_dec(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %rc = alloca i32, align 4
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp = icmp ne %struct.sv* %0, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %if.then, label %if.end6

cond.false:                                       ; preds = %entry
  br i1 false, label %if.then, label %if.end6

if.then:                                          ; preds = %cond.false, %cond.true
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 1
  %2 = load i32, i32* %sv_refcnt, align 8
  store i32 %2, i32* %rc, align 4
  %3 = load i32, i32* %rc, align 4
  %cmp1 = icmp ugt i32 %3, 1
  br i1 %cmp1, label %cond.true2, label %cond.false3

cond.true2:                                       ; preds = %if.then
  br i1 true, label %if.then4, label %if.else

cond.false3:                                      ; preds = %if.then
  br i1 false, label %if.then4, label %if.else

if.then4:                                         ; preds = %cond.false3, %cond.true2
  %4 = load i32, i32* %rc, align 4
  %sub = sub i32 %4, 1
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt5 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 1
  store i32 %sub, i32* %sv_refcnt5, align 8
  br label %if.end

if.else:                                          ; preds = %cond.false3, %cond.true2
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %7 = load i32, i32* %rc, align 4
  call void @Perl_sv_free2(%struct.sv* %6, i32 %7)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then4
  br label %if.end6

if.end6:                                          ; preds = %if.end, %cond.false, %cond.true
  ret void
}

declare dso_local void @PerlIO_destruct() #2

declare dso_local void @Perl_sv_clean_objs() #2

declare dso_local void @Perl_safesysfree(i8*) #2

declare dso_local void @PerlIO_cleanup() #2

declare dso_local i32 @Perl_PerlIO_close(%struct._PerlIO**) #2

; Function Attrs: nounwind
declare dso_local void @free(i8*) #1

declare dso_local void @Perl_refcounted_he_free(%struct.refcounted_he*) #2

declare dso_local i8* @Perl_hv_common_key_len(%struct.hv*, i8*, i32, i32, %struct.sv*, i32) #2

declare dso_local void @Perl_ck_warner_d(i32, i8*, ...) #2

declare dso_local i32 @Perl_sv_clean_all() #2

declare dso_local zeroext i1 @Perl_ckwarn_d(i32) #2

declare dso_local void @Perl_warner(i32, i8*, ...) #2

declare dso_local void @Perl_sv_clear(%struct.sv*) #2

declare dso_local void @Perl_free_tied_hv_pool() #2

; Function Attrs: noinline nounwind uwtable
define internal void @S_nuke_stacks() #0 {
entry:
  %p = alloca %struct.stackinfo*, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_next = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %0, i32 0, i32 3
  %1 = load %struct.stackinfo*, %struct.stackinfo** %si_next, align 8
  %tobool = icmp ne %struct.stackinfo* %1, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_next1 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %2, i32 0, i32 3
  %3 = load %struct.stackinfo*, %struct.stackinfo** %si_next1, align 8
  store %struct.stackinfo* %3, %struct.stackinfo** @PL_curstackinfo, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %while.cond2

while.cond2:                                      ; preds = %while.body4, %while.end
  %4 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %tobool3 = icmp ne %struct.stackinfo* %4, null
  br i1 %tobool3, label %while.body4, label %while.end5

while.body4:                                      ; preds = %while.cond2
  %5 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_prev = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %5, i32 0, i32 2
  %6 = load %struct.stackinfo*, %struct.stackinfo** %si_prev, align 8
  store %struct.stackinfo* %6, %struct.stackinfo** %p, align 8
  %7 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %7, i32 0, i32 1
  %8 = load %struct.context*, %struct.context** %si_cxstack, align 8
  %9 = bitcast %struct.context* %8 to i8*
  call void @Perl_safesysfree(i8* %9)
  %10 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %11 = bitcast %struct.stackinfo* %10 to i8*
  call void @Perl_safesysfree(i8* %11)
  %12 = load %struct.stackinfo*, %struct.stackinfo** %p, align 8
  store %struct.stackinfo* %12, %struct.stackinfo** @PL_curstackinfo, align 8
  br label %while.cond2

while.end5:                                       ; preds = %while.cond2
  %13 = load %struct.sv**, %struct.sv*** @PL_tmps_stack, align 8
  %14 = bitcast %struct.sv** %13 to i8*
  call void @Perl_safesysfree(i8* %14)
  %15 = load i32*, i32** @PL_markstack, align 8
  %16 = bitcast i32* %15 to i8*
  call void @Perl_safesysfree(i8* %16)
  %17 = load i32*, i32** @PL_scopestack, align 8
  %18 = bitcast i32* %17 to i8*
  call void @Perl_safesysfree(i8* %18)
  %19 = load %union.any*, %union.any** @PL_savestack, align 8
  %20 = bitcast %union.any* %19 to i8*
  call void @Perl_safesysfree(i8* %20)
  ret void
}

declare dso_local void @Perl_sv_free_arenas() #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @perl_free(%struct.interpreter* %my_perl) #0 {
entry:
  %my_perl.addr = alloca %struct.interpreter*, align 8
  store %struct.interpreter* %my_perl, %struct.interpreter** %my_perl.addr, align 8
  %0 = load i32, i32* @PL_veto_cleanup, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.interpreter*, %struct.interpreter** %my_perl.addr, align 8
  %2 = bitcast %struct.interpreter* %1 to i8*
  call void @free(i8* %2) #6
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_call_atexit(void (i8*)* %fn, i8* %ptr) #0 {
entry:
  %fn.addr = alloca void (i8*)*, align 8
  %ptr.addr = alloca i8*, align 8
  store void (i8*)* %fn, void (i8*)** %fn.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  %0 = load %struct.exitlistentry*, %struct.exitlistentry** @PL_exitlist, align 8
  %1 = bitcast %struct.exitlistentry* %0 to i8*
  %2 = load i32, i32* @PL_exitlistlen, align 4
  %add = add nsw i32 %2, 1
  %conv = sext i32 %add to i64
  %mul = mul i64 %conv, 16
  %call = call i8* @Perl_safesysrealloc(i8* %1, i64 %mul)
  %3 = bitcast i8* %call to %struct.exitlistentry*
  store %struct.exitlistentry* %3, %struct.exitlistentry** @PL_exitlist, align 8
  %4 = load void (i8*)*, void (i8*)** %fn.addr, align 8
  %5 = load %struct.exitlistentry*, %struct.exitlistentry** @PL_exitlist, align 8
  %6 = load i32, i32* @PL_exitlistlen, align 4
  %idxprom = sext i32 %6 to i64
  %arrayidx = getelementptr inbounds %struct.exitlistentry, %struct.exitlistentry* %5, i64 %idxprom
  %fn1 = getelementptr inbounds %struct.exitlistentry, %struct.exitlistentry* %arrayidx, i32 0, i32 0
  store void (i8*)* %4, void (i8*)** %fn1, align 8
  %7 = load i8*, i8** %ptr.addr, align 8
  %8 = load %struct.exitlistentry*, %struct.exitlistentry** @PL_exitlist, align 8
  %9 = load i32, i32* @PL_exitlistlen, align 4
  %idxprom2 = sext i32 %9 to i64
  %arrayidx3 = getelementptr inbounds %struct.exitlistentry, %struct.exitlistentry* %8, i64 %idxprom2
  %ptr4 = getelementptr inbounds %struct.exitlistentry, %struct.exitlistentry* %arrayidx3, i32 0, i32 1
  store i8* %7, i8** %ptr4, align 8
  %10 = load i32, i32* @PL_exitlistlen, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* @PL_exitlistlen, align 4
  ret void
}

declare dso_local i8* @Perl_safesysrealloc(i8*, i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @perl_parse(%struct.interpreter* %my_perl, void ()* %xsinit, i32 %argc, i8** %argv, i8** %env) #0 {
entry:
  %retval = alloca i32, align 4
  %my_perl.addr = alloca %struct.interpreter*, align 8
  %xsinit.addr = alloca void ()*, align 8
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %env.addr = alloca i8**, align 8
  %oldscope = alloca i32, align 4
  %ret = alloca i32, align 4
  %cur_env = alloca %struct.jmpenv, align 8
  %s = alloca i8*, align 8
  %i = alloca i32, align 4
  %mask = alloca i64, align 8
  %aligned = alloca i64, align 8
  store %struct.interpreter* %my_perl, %struct.interpreter** %my_perl.addr, align 8
  store void ()* %xsinit, void ()** %xsinit.addr, align 8
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 8
  store i8** %env, i8*** %env.addr, align 8
  %0 = load %struct.interpreter*, %struct.interpreter** %my_perl.addr, align 8
  %1 = load i32, i32* %argc.addr, align 4
  store i32 %1, i32* @PL_origargc, align 4
  %2 = load i8**, i8*** %argv.addr, align 8
  store i8** %2, i8*** @PL_origargv, align 8
  %3 = load i32, i32* @PL_origalen, align 4
  %cmp = icmp ne i32 %3, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 1, i32* @PL_origalen, align 4
  br label %if.end109

if.else:                                          ; preds = %entry
  store i8* null, i8** %s, align 8
  store i64 -8, i64* %mask, align 8
  %4 = load i8**, i8*** %argv.addr, align 8
  %arrayidx = getelementptr inbounds i8*, i8** %4, i64 0
  %5 = load i8*, i8** %arrayidx, align 8
  %6 = ptrtoint i8* %5 to i64
  %and = and i64 %6, -8
  %7 = load i8**, i8*** %argv.addr, align 8
  %arrayidx1 = getelementptr inbounds i8*, i8** %7, i64 0
  %8 = load i8*, i8** %arrayidx1, align 8
  %9 = ptrtoint i8* %8 to i64
  %cmp2 = icmp eq i64 %and, %9
  %land.ext = zext i1 %cmp2 to i32
  %conv = sext i32 %land.ext to i64
  store i64 %conv, i64* %aligned, align 8
  %10 = load i8**, i8*** @PL_origargv, align 8
  %tobool = icmp ne i8** %10, null
  br i1 %tobool, label %land.lhs.true, label %if.end37

land.lhs.true:                                    ; preds = %if.else
  %11 = load i32, i32* @PL_origargc, align 4
  %cmp3 = icmp sge i32 %11, 1
  br i1 %cmp3, label %land.lhs.true5, label %if.end37

land.lhs.true5:                                   ; preds = %land.lhs.true
  %12 = load i8**, i8*** @PL_origargv, align 8
  %arrayidx6 = getelementptr inbounds i8*, i8** %12, i64 0
  %13 = load i8*, i8** %arrayidx6, align 8
  store i8* %13, i8** %s, align 8
  %tobool7 = icmp ne i8* %13, null
  br i1 %tobool7, label %if.then8, label %if.end37

if.then8:                                         ; preds = %land.lhs.true5
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then8
  %14 = load i8*, i8** %s, align 8
  %15 = load i8, i8* %14, align 1
  %tobool9 = icmp ne i8 %15, 0
  br i1 %tobool9, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %16 = load i8*, i8** %s, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %16, i32 1
  store i8* %incdec.ptr, i8** %s, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end
  %17 = load i32, i32* %i, align 4
  %18 = load i32, i32* @PL_origargc, align 4
  %cmp10 = icmp slt i32 %17, %18
  br i1 %cmp10, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %19 = load i8**, i8*** @PL_origargv, align 8
  %20 = load i32, i32* %i, align 4
  %idxprom = sext i32 %20 to i64
  %arrayidx12 = getelementptr inbounds i8*, i8** %19, i64 %idxprom
  %21 = load i8*, i8** %arrayidx12, align 8
  %22 = load i8*, i8** %s, align 8
  %add.ptr = getelementptr inbounds i8, i8* %22, i64 1
  %cmp13 = icmp eq i8* %21, %add.ptr
  br i1 %cmp13, label %if.then28, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %23 = load i64, i64* %aligned, align 8
  %tobool15 = icmp ne i64 %23, 0
  br i1 %tobool15, label %land.lhs.true16, label %if.else36

land.lhs.true16:                                  ; preds = %lor.lhs.false
  %24 = load i8**, i8*** @PL_origargv, align 8
  %25 = load i32, i32* %i, align 4
  %idxprom17 = sext i32 %25 to i64
  %arrayidx18 = getelementptr inbounds i8*, i8** %24, i64 %idxprom17
  %26 = load i8*, i8** %arrayidx18, align 8
  %27 = load i8*, i8** %s, align 8
  %cmp19 = icmp ugt i8* %26, %27
  br i1 %cmp19, label %land.lhs.true21, label %if.else36

land.lhs.true21:                                  ; preds = %land.lhs.true16
  %28 = load i8**, i8*** @PL_origargv, align 8
  %29 = load i32, i32* %i, align 4
  %idxprom22 = sext i32 %29 to i64
  %arrayidx23 = getelementptr inbounds i8*, i8** %28, i64 %idxprom22
  %30 = load i8*, i8** %arrayidx23, align 8
  %31 = load i8*, i8** %s, align 8
  %add.ptr24 = getelementptr inbounds i8, i8* %31, i64 8
  %32 = ptrtoint i8* %add.ptr24 to i64
  %and25 = and i64 %32, -8
  %33 = inttoptr i64 %and25 to i8*
  %cmp26 = icmp ule i8* %30, %33
  br i1 %cmp26, label %if.then28, label %if.else36

if.then28:                                        ; preds = %land.lhs.true21, %for.body
  %34 = load i8**, i8*** @PL_origargv, align 8
  %35 = load i32, i32* %i, align 4
  %idxprom29 = sext i32 %35 to i64
  %arrayidx30 = getelementptr inbounds i8*, i8** %34, i64 %idxprom29
  %36 = load i8*, i8** %arrayidx30, align 8
  store i8* %36, i8** %s, align 8
  br label %while.cond31

while.cond31:                                     ; preds = %while.body33, %if.then28
  %37 = load i8*, i8** %s, align 8
  %38 = load i8, i8* %37, align 1
  %tobool32 = icmp ne i8 %38, 0
  br i1 %tobool32, label %while.body33, label %while.end35

while.body33:                                     ; preds = %while.cond31
  %39 = load i8*, i8** %s, align 8
  %incdec.ptr34 = getelementptr inbounds i8, i8* %39, i32 1
  store i8* %incdec.ptr34, i8** %s, align 8
  br label %while.cond31

while.end35:                                      ; preds = %while.cond31
  br label %if.end

if.else36:                                        ; preds = %land.lhs.true21, %land.lhs.true16, %lor.lhs.false
  br label %for.end

if.end:                                           ; preds = %while.end35
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %40 = load i32, i32* %i, align 4
  %inc = add nsw i32 %40, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.else36, %for.cond
  br label %if.end37

if.end37:                                         ; preds = %for.end, %land.lhs.true5, %land.lhs.true, %if.else
  %41 = load i8*, i8** %s, align 8
  %tobool38 = icmp ne i8* %41, null
  br i1 %tobool38, label %land.lhs.true39, label %if.end105

land.lhs.true39:                                  ; preds = %if.end37
  %42 = load i8**, i8*** @PL_origenviron, align 8
  %tobool40 = icmp ne i8** %42, null
  br i1 %tobool40, label %land.lhs.true41, label %if.end105

land.lhs.true41:                                  ; preds = %land.lhs.true39
  %43 = load i8, i8* @PL_use_safe_putenv, align 1
  %tobool42 = trunc i8 %43 to i1
  br i1 %tobool42, label %if.end105, label %if.then43

if.then43:                                        ; preds = %land.lhs.true41
  %44 = load i8**, i8*** @PL_origenviron, align 8
  %arrayidx44 = getelementptr inbounds i8*, i8** %44, i64 0
  %45 = load i8*, i8** %arrayidx44, align 8
  %46 = load i8*, i8** %s, align 8
  %add.ptr45 = getelementptr inbounds i8, i8* %46, i64 1
  %cmp46 = icmp eq i8* %45, %add.ptr45
  br i1 %cmp46, label %if.then60, label %lor.lhs.false48

lor.lhs.false48:                                  ; preds = %if.then43
  %47 = load i64, i64* %aligned, align 8
  %tobool49 = icmp ne i64 %47, 0
  br i1 %tobool49, label %land.lhs.true50, label %if.end104

land.lhs.true50:                                  ; preds = %lor.lhs.false48
  %48 = load i8**, i8*** @PL_origenviron, align 8
  %arrayidx51 = getelementptr inbounds i8*, i8** %48, i64 0
  %49 = load i8*, i8** %arrayidx51, align 8
  %50 = load i8*, i8** %s, align 8
  %cmp52 = icmp ugt i8* %49, %50
  br i1 %cmp52, label %land.lhs.true54, label %if.end104

land.lhs.true54:                                  ; preds = %land.lhs.true50
  %51 = load i8**, i8*** @PL_origenviron, align 8
  %arrayidx55 = getelementptr inbounds i8*, i8** %51, i64 0
  %52 = load i8*, i8** %arrayidx55, align 8
  %53 = load i8*, i8** %s, align 8
  %add.ptr56 = getelementptr inbounds i8, i8* %53, i64 8
  %54 = ptrtoint i8* %add.ptr56 to i64
  %and57 = and i64 %54, -8
  %55 = inttoptr i64 %and57 to i8*
  %cmp58 = icmp ule i8* %52, %55
  br i1 %cmp58, label %if.then60, label %if.end104

if.then60:                                        ; preds = %land.lhs.true54, %if.then43
  %56 = load i8**, i8*** @PL_origenviron, align 8
  %arrayidx61 = getelementptr inbounds i8*, i8** %56, i64 0
  %57 = load i8*, i8** %arrayidx61, align 8
  store i8* %57, i8** %s, align 8
  br label %while.cond62

while.cond62:                                     ; preds = %while.body64, %if.then60
  %58 = load i8*, i8** %s, align 8
  %59 = load i8, i8* %58, align 1
  %tobool63 = icmp ne i8 %59, 0
  br i1 %tobool63, label %while.body64, label %while.end66

while.body64:                                     ; preds = %while.cond62
  %60 = load i8*, i8** %s, align 8
  %incdec.ptr65 = getelementptr inbounds i8, i8* %60, i32 1
  store i8* %incdec.ptr65, i8** %s, align 8
  br label %while.cond62

while.end66:                                      ; preds = %while.cond62
  call void @Perl_my_setenv(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.11, i64 0, i64 0), i8* null)
  store i32 1, i32* %i, align 4
  br label %for.cond67

for.cond67:                                       ; preds = %for.inc101, %while.end66
  %61 = load i8**, i8*** @PL_origenviron, align 8
  %62 = load i32, i32* %i, align 4
  %idxprom68 = sext i32 %62 to i64
  %arrayidx69 = getelementptr inbounds i8*, i8** %61, i64 %idxprom68
  %63 = load i8*, i8** %arrayidx69, align 8
  %tobool70 = icmp ne i8* %63, null
  br i1 %tobool70, label %for.body71, label %for.end103

for.body71:                                       ; preds = %for.cond67
  %64 = load i8**, i8*** @PL_origenviron, align 8
  %65 = load i32, i32* %i, align 4
  %idxprom72 = sext i32 %65 to i64
  %arrayidx73 = getelementptr inbounds i8*, i8** %64, i64 %idxprom72
  %66 = load i8*, i8** %arrayidx73, align 8
  %67 = load i8*, i8** %s, align 8
  %add.ptr74 = getelementptr inbounds i8, i8* %67, i64 1
  %cmp75 = icmp eq i8* %66, %add.ptr74
  br i1 %cmp75, label %if.then91, label %lor.lhs.false77

lor.lhs.false77:                                  ; preds = %for.body71
  %68 = load i64, i64* %aligned, align 8
  %tobool78 = icmp ne i64 %68, 0
  br i1 %tobool78, label %land.lhs.true79, label %if.else99

land.lhs.true79:                                  ; preds = %lor.lhs.false77
  %69 = load i8**, i8*** @PL_origenviron, align 8
  %70 = load i32, i32* %i, align 4
  %idxprom80 = sext i32 %70 to i64
  %arrayidx81 = getelementptr inbounds i8*, i8** %69, i64 %idxprom80
  %71 = load i8*, i8** %arrayidx81, align 8
  %72 = load i8*, i8** %s, align 8
  %cmp82 = icmp ugt i8* %71, %72
  br i1 %cmp82, label %land.lhs.true84, label %if.else99

land.lhs.true84:                                  ; preds = %land.lhs.true79
  %73 = load i8**, i8*** @PL_origenviron, align 8
  %74 = load i32, i32* %i, align 4
  %idxprom85 = sext i32 %74 to i64
  %arrayidx86 = getelementptr inbounds i8*, i8** %73, i64 %idxprom85
  %75 = load i8*, i8** %arrayidx86, align 8
  %76 = load i8*, i8** %s, align 8
  %add.ptr87 = getelementptr inbounds i8, i8* %76, i64 8
  %77 = ptrtoint i8* %add.ptr87 to i64
  %and88 = and i64 %77, -8
  %78 = inttoptr i64 %and88 to i8*
  %cmp89 = icmp ule i8* %75, %78
  br i1 %cmp89, label %if.then91, label %if.else99

if.then91:                                        ; preds = %land.lhs.true84, %for.body71
  %79 = load i8**, i8*** @PL_origenviron, align 8
  %80 = load i32, i32* %i, align 4
  %idxprom92 = sext i32 %80 to i64
  %arrayidx93 = getelementptr inbounds i8*, i8** %79, i64 %idxprom92
  %81 = load i8*, i8** %arrayidx93, align 8
  store i8* %81, i8** %s, align 8
  br label %while.cond94

while.cond94:                                     ; preds = %while.body96, %if.then91
  %82 = load i8*, i8** %s, align 8
  %83 = load i8, i8* %82, align 1
  %tobool95 = icmp ne i8 %83, 0
  br i1 %tobool95, label %while.body96, label %while.end98

while.body96:                                     ; preds = %while.cond94
  %84 = load i8*, i8** %s, align 8
  %incdec.ptr97 = getelementptr inbounds i8, i8* %84, i32 1
  store i8* %incdec.ptr97, i8** %s, align 8
  br label %while.cond94

while.end98:                                      ; preds = %while.cond94
  br label %if.end100

if.else99:                                        ; preds = %land.lhs.true84, %land.lhs.true79, %lor.lhs.false77
  br label %for.end103

if.end100:                                        ; preds = %while.end98
  br label %for.inc101

for.inc101:                                       ; preds = %if.end100
  %85 = load i32, i32* %i, align 4
  %inc102 = add nsw i32 %85, 1
  store i32 %inc102, i32* %i, align 4
  br label %for.cond67

for.end103:                                       ; preds = %if.else99, %for.cond67
  br label %if.end104

if.end104:                                        ; preds = %for.end103, %land.lhs.true54, %land.lhs.true50, %lor.lhs.false48
  br label %if.end105

if.end105:                                        ; preds = %if.end104, %land.lhs.true41, %land.lhs.true39, %if.end37
  %86 = load i8*, i8** %s, align 8
  %tobool106 = icmp ne i8* %86, null
  br i1 %tobool106, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end105
  %87 = load i8*, i8** %s, align 8
  %88 = load i8**, i8*** @PL_origargv, align 8
  %arrayidx107 = getelementptr inbounds i8*, i8** %88, i64 0
  %89 = load i8*, i8** %arrayidx107, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %87 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %89 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %add = add nsw i64 %sub.ptr.sub, 1
  br label %cond.end

cond.false:                                       ; preds = %if.end105
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %add, %cond.true ], [ 0, %cond.false ]
  %conv108 = trunc i64 %cond to i32
  store i32 %conv108, i32* @PL_origalen, align 4
  br label %if.end109

if.end109:                                        ; preds = %cond.end, %if.then
  %90 = load i8, i8* @PL_do_undump, align 1
  %tobool110 = trunc i8 %90 to i1
  br i1 %tobool110, label %if.then111, label %if.end113

if.then111:                                       ; preds = %if.end109
  %91 = load i8**, i8*** %argv.addr, align 8
  %arrayidx112 = getelementptr inbounds i8*, i8** %91, i64 0
  %92 = load i8*, i8** %arrayidx112, align 8
  %call = call i8* @Perl_savepv(i8* %92)
  store i8* %call, i8** @PL_origfilename, align 8
  store i8 0, i8* @PL_do_undump, align 1
  %93 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %93, i32 0, i32 4
  store i32 -1, i32* %si_cxix, align 8
  call void @S_init_ids()
  store i8 1, i8* @PL_tainted, align 1
  call void @Perl_set_caret_X()
  store i8 0, i8* @PL_tainted, align 1
  %94 = load i32, i32* %argc.addr, align 4
  %95 = load i8**, i8*** %argv.addr, align 8
  %96 = load i8**, i8*** %env.addr, align 8
  call void @S_init_postdump_symbols(i32 %94, i8** %95, i8** %96)
  store i32 0, i32* %retval, align 4
  br label %return

if.end113:                                        ; preds = %if.end109
  %97 = load %struct.op*, %struct.op** @PL_main_root, align 8
  %tobool114 = icmp ne %struct.op* %97, null
  br i1 %tobool114, label %if.then115, label %if.end116

if.then115:                                       ; preds = %if.end113
  %98 = load %struct.op*, %struct.op** @PL_main_root, align 8
  call void @Perl_op_free(%struct.op* %98)
  store %struct.op* null, %struct.op** @PL_main_root, align 8
  br label %if.end116

if.end116:                                        ; preds = %if.then115, %if.end113
  store %struct.op* null, %struct.op** @PL_main_start, align 8
  %99 = load %struct.cv*, %struct.cv** @PL_main_cv, align 8
  %100 = bitcast %struct.cv* %99 to i8*
  %101 = bitcast i8* %100 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %101)
  store %struct.cv* null, %struct.cv** @PL_main_cv, align 8
  %call117 = call i64 @time(i64* @PL_basetime) #6
  %102 = load i32, i32* @PL_scopestack_ix, align 4
  store i32 %102, i32* %oldscope, align 4
  store i8 0, i8* @PL_dowarn, align 1
  br label %do.body

do.body:                                          ; preds = %if.end116
  %103 = load %struct.jmpenv*, %struct.jmpenv** @PL_top_env, align 8
  %je_prev = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 1
  store %struct.jmpenv* %103, %struct.jmpenv** %je_prev, align 8
  %je_buf = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 0
  %arraydecay = getelementptr inbounds [1 x %struct.__jmp_buf_tag], [1 x %struct.__jmp_buf_tag]* %je_buf, i64 0, i64 0
  %call118 = call i32 @__sigsetjmp(%struct.__jmp_buf_tag* %arraydecay, i32 0) #9
  %je_ret = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 2
  store i32 %call118, i32* %je_ret, align 8
  store %struct.jmpenv* %cur_env, %struct.jmpenv** @PL_top_env, align 8
  %je_mustcatch = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 3
  store i8 0, i8* %je_mustcatch, align 4
  %je_ret119 = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 2
  %104 = load i32, i32* %je_ret119, align 8
  store i32 %104, i32* %ret, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %105 = load i32, i32* %ret, align 4
  switch i32 %105, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb127
    i32 2, label %sw.bb128
    i32 3, label %sw.bb149
  ]

sw.bb:                                            ; preds = %do.end
  %106 = load i8**, i8*** %env.addr, align 8
  %107 = load void ()*, void ()** %xsinit.addr, align 8
  %call120 = call i8* @S_parse_body(i8** %106, void ()* %107)
  %108 = load %struct.av*, %struct.av** @PL_unitcheckav, align 8
  %tobool121 = icmp ne %struct.av* %108, null
  br i1 %tobool121, label %if.then122, label %if.end123

if.then122:                                       ; preds = %sw.bb
  %109 = load i32, i32* %oldscope, align 4
  %110 = load %struct.av*, %struct.av** @PL_unitcheckav, align 8
  call void @Perl_call_list(i32 %109, %struct.av* %110)
  br label %if.end123

if.end123:                                        ; preds = %if.then122, %sw.bb
  %111 = load %struct.av*, %struct.av** @PL_checkav, align 8
  %tobool124 = icmp ne %struct.av* %111, null
  br i1 %tobool124, label %if.then125, label %if.end126

if.then125:                                       ; preds = %if.end123
  store i32 2, i32* @PL_phase, align 4
  %112 = load i32, i32* %oldscope, align 4
  %113 = load %struct.av*, %struct.av** @PL_checkav, align 8
  call void @Perl_call_list(i32 %112, %struct.av* %113)
  br label %if.end126

if.end126:                                        ; preds = %if.then125, %if.end123
  store i32 0, i32* %ret, align 4
  br label %sw.epilog

sw.bb127:                                         ; preds = %do.end
  store i32 1, i32* @PL_statusvalue, align 4
  store i32 1, i32* @PL_statusvalue_posix, align 4
  br label %sw.bb128

sw.bb128:                                         ; preds = %do.end, %sw.bb127
  br label %while.cond129

while.cond129:                                    ; preds = %while.body132, %sw.bb128
  %114 = load i32, i32* @PL_scopestack_ix, align 4
  %115 = load i32, i32* %oldscope, align 4
  %cmp130 = icmp sgt i32 %114, %115
  br i1 %cmp130, label %while.body132, label %while.end133

while.body132:                                    ; preds = %while.cond129
  call void @Perl_pop_scope()
  br label %while.cond129

while.end133:                                     ; preds = %while.cond129
  %116 = load i64, i64* @PL_tmps_ix, align 8
  %117 = load i64, i64* @PL_tmps_floor, align 8
  %cmp134 = icmp sgt i64 %116, %117
  br i1 %cmp134, label %if.then136, label %if.end137

if.then136:                                       ; preds = %while.end133
  call void @Perl_free_tmps()
  br label %if.end137

if.end137:                                        ; preds = %if.then136, %while.end133
  %118 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %119 = load %struct.hv*, %struct.hv** @PL_defstash, align 8
  %cmp138 = icmp ne %struct.hv* %118, %119
  br i1 %cmp138, label %if.then140, label %if.end142

if.then140:                                       ; preds = %if.end137
  %120 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %121 = bitcast %struct.hv* %120 to i8*
  %122 = bitcast i8* %121 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %122)
  %123 = load %struct.hv*, %struct.hv** @PL_defstash, align 8
  %124 = bitcast %struct.hv* %123 to i8*
  %125 = bitcast i8* %124 to %struct.sv*
  %call141 = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %125)
  %126 = bitcast %struct.sv* %call141 to %struct.hv*
  store %struct.hv* %126, %struct.hv** @PL_curstash, align 8
  br label %if.end142

if.end142:                                        ; preds = %if.then140, %if.end137
  %127 = load %struct.av*, %struct.av** @PL_unitcheckav, align 8
  %tobool143 = icmp ne %struct.av* %127, null
  br i1 %tobool143, label %if.then144, label %if.end145

if.then144:                                       ; preds = %if.end142
  %128 = load i32, i32* %oldscope, align 4
  %129 = load %struct.av*, %struct.av** @PL_unitcheckav, align 8
  call void @Perl_call_list(i32 %128, %struct.av* %129)
  br label %if.end145

if.end145:                                        ; preds = %if.then144, %if.end142
  %130 = load %struct.av*, %struct.av** @PL_checkav, align 8
  %tobool146 = icmp ne %struct.av* %130, null
  br i1 %tobool146, label %if.then147, label %if.end148

if.then147:                                       ; preds = %if.end145
  store i32 2, i32* @PL_phase, align 4
  %131 = load i32, i32* %oldscope, align 4
  %132 = load %struct.av*, %struct.av** @PL_checkav, align 8
  call void @Perl_call_list(i32 %131, %struct.av* %132)
  br label %if.end148

if.end148:                                        ; preds = %if.then147, %if.end145
  %133 = load i32, i32* @PL_statusvalue, align 4
  store i32 %133, i32* %ret, align 4
  br label %sw.epilog

sw.bb149:                                         ; preds = %do.end
  %134 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %tobool150 = icmp ne %struct.gv* %134, null
  br i1 %tobool150, label %land.lhs.true151, label %cond.false171

land.lhs.true151:                                 ; preds = %sw.bb149
  %135 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %sv_flags = getelementptr inbounds %struct.gv, %struct.gv* %135, i32 0, i32 2
  %136 = load i32, i32* %sv_flags, align 4
  %and152 = and i32 %136, 255
  %cmp153 = icmp eq i32 %and152, 9
  br i1 %cmp153, label %land.lhs.true155, label %cond.false171

land.lhs.true155:                                 ; preds = %land.lhs.true151
  %137 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %137, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %138 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr156 = getelementptr inbounds %struct.gp, %struct.gp* %138, i64 0
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr156, i32 0, i32 1
  %139 = load %struct.io*, %struct.io** %gp_io, align 8
  %tobool157 = icmp ne %struct.io* %139, null
  br i1 %tobool157, label %land.lhs.true158, label %cond.false171

land.lhs.true158:                                 ; preds = %land.lhs.true155
  %140 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %sv_u159 = getelementptr inbounds %struct.gv, %struct.gv* %140, i32 0, i32 3
  %svu_gp160 = bitcast %union.anon.4* %sv_u159 to %struct.gp**
  %141 = load %struct.gp*, %struct.gp** %svu_gp160, align 8
  %add.ptr161 = getelementptr inbounds %struct.gp, %struct.gp* %141, i64 0
  %gp_io162 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr161, i32 0, i32 1
  %142 = load %struct.io*, %struct.io** %gp_io162, align 8
  %sv_any = getelementptr inbounds %struct.io, %struct.io* %142, i32 0, i32 0
  %143 = load %struct.xpvio*, %struct.xpvio** %sv_any, align 8
  %xio_ofp = getelementptr inbounds %struct.xpvio, %struct.xpvio* %143, i32 0, i32 5
  %144 = load %struct._PerlIO**, %struct._PerlIO*** %xio_ofp, align 8
  %tobool163 = icmp ne %struct._PerlIO** %144, null
  br i1 %tobool163, label %cond.true164, label %cond.false171

cond.true164:                                     ; preds = %land.lhs.true158
  %145 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %sv_u165 = getelementptr inbounds %struct.gv, %struct.gv* %145, i32 0, i32 3
  %svu_gp166 = bitcast %union.anon.4* %sv_u165 to %struct.gp**
  %146 = load %struct.gp*, %struct.gp** %svu_gp166, align 8
  %add.ptr167 = getelementptr inbounds %struct.gp, %struct.gp* %146, i64 0
  %gp_io168 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr167, i32 0, i32 1
  %147 = load %struct.io*, %struct.io** %gp_io168, align 8
  %sv_any169 = getelementptr inbounds %struct.io, %struct.io* %147, i32 0, i32 0
  %148 = load %struct.xpvio*, %struct.xpvio** %sv_any169, align 8
  %xio_ofp170 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %148, i32 0, i32 5
  %149 = load %struct._PerlIO**, %struct._PerlIO*** %xio_ofp170, align 8
  br label %cond.end173

cond.false171:                                    ; preds = %land.lhs.true158, %land.lhs.true155, %land.lhs.true151, %sw.bb149
  %call172 = call %struct._PerlIO** @Perl_PerlIO_stderr()
  br label %cond.end173

cond.end173:                                      ; preds = %cond.false171, %cond.true164
  %cond174 = phi %struct._PerlIO** [ %149, %cond.true164 ], [ %call172, %cond.false171 ]
  %call175 = call i32 (%struct._PerlIO**, i8*, ...) @PerlIO_printf(%struct._PerlIO** %cond174, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.12, i64 0, i64 0))
  store i32 1, i32* %ret, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %do.end, %cond.end173, %if.end148, %if.end126
  br label %do.body176

do.body176:                                       ; preds = %sw.epilog
  %je_prev177 = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 1
  %150 = load %struct.jmpenv*, %struct.jmpenv** %je_prev177, align 8
  store %struct.jmpenv* %150, %struct.jmpenv** @PL_top_env, align 8
  br label %do.end178

do.end178:                                        ; preds = %do.body176
  %151 = load i32, i32* %ret, align 4
  store i32 %151, i32* %retval, align 4
  br label %return

return:                                           ; preds = %do.end178, %if.then111
  %152 = load i32, i32* %retval, align 4
  ret i32 %152
}

declare dso_local void @Perl_my_setenv(i8*, i8*) #2

declare dso_local i8* @Perl_savepv(i8*) #2

declare dso_local void @Perl_set_caret_X() #2

; Function Attrs: noinline nounwind uwtable
define internal void @S_init_postdump_symbols(i32 %argc, i8** %argv, i8** %env) #0 {
entry:
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %env.addr = alloca i8**, align 8
  %tmpgv = alloca %struct.gv*, align 8
  %hv = alloca %struct.hv*, align 8
  %env_is_not_environ = alloca i8, align 1
  %s = alloca i8*, align 8
  %old_var = alloca i8*, align 8
  %sv = alloca %struct.sv*, align 8
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 8
  store i8** %env, i8*** %env.addr, align 8
  %call = call %struct.sv* @Perl_newSV_type(i32 5)
  store %struct.sv* %call, %struct.sv** @PL_toptarget, align 8
  %0 = load %struct.sv*, %struct.sv** @PL_toptarget, align 8
  call void @Perl_sv_setpvn(%struct.sv* %0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), i64 0)
  %call1 = call %struct.sv* @Perl_newSV_type(i32 5)
  store %struct.sv* %call1, %struct.sv** @PL_bodytarget, align 8
  %1 = load %struct.sv*, %struct.sv** @PL_bodytarget, align 8
  call void @Perl_sv_setpvn(%struct.sv* %1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), i64 0)
  %2 = load %struct.sv*, %struct.sv** @PL_bodytarget, align 8
  store %struct.sv* %2, %struct.sv** @PL_formtarget, align 8
  store i8 1, i8* @PL_tainted, align 1
  %3 = load i32, i32* %argc.addr, align 4
  %4 = load i8**, i8*** %argv.addr, align 8
  call void @Perl_init_argv_symbols(i32 %3, i8** %4)
  %call2 = call %struct.gv* @Perl_gv_fetchpvn_flags(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.124, i64 0, i64 0), i64 1, i32 129, i32 3)
  store %struct.gv* %call2, %struct.gv** %tmpgv, align 8
  %tobool = icmp ne %struct.gv* %call2, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.gv*, %struct.gv** %tmpgv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %5, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %6 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %6, i64 0
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 0
  %7 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  %8 = load i8*, i8** @PL_origfilename, align 8
  call void @Perl_sv_setpv(%struct.sv* %7, i8* %8)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %call3 = call %struct.gv* @Perl_gv_fetchpvn_flags(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.125, i64 0, i64 0), i64 3, i32 129, i32 12)
  store %struct.gv* %call3, %struct.gv** @PL_envgv, align 8
  %tobool4 = icmp ne %struct.gv* %call3, null
  br i1 %tobool4, label %if.then5, label %if.end41

if.then5:                                         ; preds = %if.end
  %9 = load %struct.gv*, %struct.gv** @PL_envgv, align 8
  %10 = bitcast %struct.gv* %9 to i8*
  %11 = bitcast i8* %10 to %struct.sv*
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 1
  %12 = load i32, i32* %sv_refcnt, align 8
  %inc = add i32 %12, 1
  store i32 %inc, i32* %sv_refcnt, align 8
  %13 = load %struct.gv*, %struct.gv** @PL_envgv, align 8
  %sv_any = getelementptr inbounds %struct.gv, %struct.gv* %13, i32 0, i32 0
  %14 = load %struct.xpvgv*, %struct.xpvgv** %sv_any, align 8
  %xpv_cur = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %14, i32 0, i32 2
  %15 = load i64, i64* %xpv_cur, align 8
  %or = or i64 %15, 2
  store i64 %or, i64* %xpv_cur, align 8
  %16 = load %struct.gv*, %struct.gv** @PL_envgv, align 8
  %sv_u6 = getelementptr inbounds %struct.gv, %struct.gv* %16, i32 0, i32 3
  %svu_gp7 = bitcast %union.anon.4* %sv_u6 to %struct.gp**
  %17 = load %struct.gp*, %struct.gp** %svu_gp7, align 8
  %add.ptr8 = getelementptr inbounds %struct.gp, %struct.gp* %17, i64 0
  %gp_hv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr8, i32 0, i32 5
  %18 = load %struct.hv*, %struct.hv** %gp_hv, align 8
  %tobool9 = icmp ne %struct.hv* %18, null
  br i1 %tobool9, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then5
  %19 = load %struct.gv*, %struct.gv** @PL_envgv, align 8
  %sv_u10 = getelementptr inbounds %struct.gv, %struct.gv* %19, i32 0, i32 3
  %svu_gp11 = bitcast %union.anon.4* %sv_u10 to %struct.gp**
  %20 = load %struct.gp*, %struct.gp** %svu_gp11, align 8
  %add.ptr12 = getelementptr inbounds %struct.gp, %struct.gp* %20, i64 0
  %gp_hv13 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr12, i32 0, i32 5
  %21 = load %struct.hv*, %struct.hv** %gp_hv13, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then5
  %22 = load %struct.gv*, %struct.gv** @PL_envgv, align 8
  %call14 = call %struct.gv* @Perl_gv_add_by_type(%struct.gv* %22, i32 12)
  %sv_u15 = getelementptr inbounds %struct.gv, %struct.gv* %call14, i32 0, i32 3
  %svu_gp16 = bitcast %union.anon.4* %sv_u15 to %struct.gp**
  %23 = load %struct.gp*, %struct.gp** %svu_gp16, align 8
  %add.ptr17 = getelementptr inbounds %struct.gp, %struct.gp* %23, i64 0
  %gp_hv18 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr17, i32 0, i32 5
  %24 = load %struct.hv*, %struct.hv** %gp_hv18, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.hv* [ %21, %cond.true ], [ %24, %cond.false ]
  store %struct.hv* %cond, %struct.hv** %hv, align 8
  %25 = load %struct.hv*, %struct.hv** %hv, align 8
  %26 = bitcast %struct.hv* %25 to i8*
  %27 = bitcast i8* %26 to %struct.sv*
  call void @Perl_sv_magic(%struct.sv* %27, %struct.sv* null, i32 69, i8* null, i32 0)
  %28 = load i8**, i8*** %env.addr, align 8
  %tobool19 = icmp ne i8** %28, null
  br i1 %tobool19, label %if.end21, label %if.then20

if.then20:                                        ; preds = %cond.end
  %29 = load i8**, i8*** @environ, align 8
  store i8** %29, i8*** %env.addr, align 8
  br label %if.end21

if.end21:                                         ; preds = %if.then20, %cond.end
  %30 = load i8**, i8*** %env.addr, align 8
  %31 = load i8**, i8*** @environ, align 8
  %cmp = icmp ne i8** %30, %31
  %frombool = zext i1 %cmp to i8
  store i8 %frombool, i8* %env_is_not_environ, align 1
  %32 = load i8, i8* %env_is_not_environ, align 1
  %tobool22 = trunc i8 %32 to i1
  br i1 %tobool22, label %if.then23, label %if.end24

if.then23:                                        ; preds = %if.end21
  %33 = load i8**, i8*** @environ, align 8
  %arrayidx = getelementptr inbounds i8*, i8** %33, i64 0
  store i8* null, i8** %arrayidx, align 8
  br label %if.end24

if.end24:                                         ; preds = %if.then23, %if.end21
  %34 = load i8**, i8*** %env.addr, align 8
  %tobool25 = icmp ne i8** %34, null
  br i1 %tobool25, label %if.then26, label %if.end40

if.then26:                                        ; preds = %if.end24
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then26
  %35 = load i8**, i8*** %env.addr, align 8
  %36 = load i8*, i8** %35, align 8
  %tobool27 = icmp ne i8* %36, null
  br i1 %tobool27, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %37 = load i8**, i8*** %env.addr, align 8
  %38 = load i8*, i8** %37, align 8
  store i8* %38, i8** %old_var, align 8
  %39 = load i8*, i8** %old_var, align 8
  %call28 = call i8* @strchr(i8* %39, i32 61) #11
  store i8* %call28, i8** %s, align 8
  %tobool29 = icmp ne i8* %call28, null
  br i1 %tobool29, label %lor.lhs.false, label %if.then31

lor.lhs.false:                                    ; preds = %for.body
  %40 = load i8*, i8** %s, align 8
  %41 = load i8*, i8** %old_var, align 8
  %cmp30 = icmp eq i8* %40, %41
  br i1 %cmp30, label %if.then31, label %if.end32

if.then31:                                        ; preds = %lor.lhs.false, %for.body
  br label %for.inc

if.end32:                                         ; preds = %lor.lhs.false
  %42 = load i8*, i8** %s, align 8
  %add.ptr33 = getelementptr inbounds i8, i8* %42, i64 1
  %call34 = call %struct.sv* @Perl_newSVpv(i8* %add.ptr33, i64 0)
  store %struct.sv* %call34, %struct.sv** %sv, align 8
  %43 = load %struct.hv*, %struct.hv** %hv, align 8
  %44 = load i8*, i8** %old_var, align 8
  %45 = load i8*, i8** %s, align 8
  %46 = load i8*, i8** %old_var, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %45 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %46 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv = trunc i64 %sub.ptr.sub to i32
  %47 = load %struct.sv*, %struct.sv** %sv, align 8
  %call35 = call i8* @Perl_hv_common_key_len(%struct.hv* %43, i8* %44, i32 %conv, i32 36, %struct.sv* %47, i32 0)
  %48 = bitcast i8* %call35 to %struct.sv**
  %49 = load i8, i8* %env_is_not_environ, align 1
  %tobool36 = trunc i8 %49 to i1
  br i1 %tobool36, label %if.then37, label %if.end39

if.then37:                                        ; preds = %if.end32
  %50 = load %struct.sv*, %struct.sv** %sv, align 8
  %call38 = call i32 @Perl_mg_set(%struct.sv* %50)
  br label %if.end39

if.end39:                                         ; preds = %if.then37, %if.end32
  br label %for.inc

for.inc:                                          ; preds = %if.end39, %if.then31
  %51 = load i8**, i8*** %env.addr, align 8
  %incdec.ptr = getelementptr inbounds i8*, i8** %51, i32 1
  store i8** %incdec.ptr, i8*** %env.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end40

if.end40:                                         ; preds = %for.end, %if.end24
  br label %if.end41

if.end41:                                         ; preds = %if.end40, %if.end
  store i8 0, i8* @PL_tainted, align 1
  %52 = load i8, i8* @PL_minus_a, align 1
  %tobool42 = trunc i8 %52 to i1
  br i1 %tobool42, label %if.then43, label %if.end45

if.then43:                                        ; preds = %if.end41
  %call44 = call %struct.av* @Perl_get_av(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.126, i64 0, i64 0), i32 3)
  br label %if.end45

if.end45:                                         ; preds = %if.then43, %if.end41
  ret void
}

; Function Attrs: nounwind
declare dso_local i64 @time(i64*) #1

; Function Attrs: noinline nounwind uwtable
define internal i8* @S_parse_body(i8** %env, void ()* %xsinit) #0 {
entry:
  %env.addr = alloca i8**, align 8
  %xsinit.addr = alloca void ()*, align 8
  %rsfp = alloca %struct._PerlIO**, align 8
  %argc = alloca i32, align 4
  %argv = alloca i8**, align 8
  %scriptname = alloca i8*, align 8
  %dosearch = alloca i8, align 1
  %c = alloca i8, align 1
  %doextract = alloca i8, align 1
  %cddir = alloca i8*, align 8
  %linestr_sv = alloca %struct.sv*, align 8
  %add_read_e_script = alloca i8, align 1
  %lex_start_flags = alloca i32, align 4
  %s = alloca i8*, align 8
  %len = alloca i64, align 8
  %opts_prog = alloca %struct.sv*, align 8
  %s100 = alloca i8*, align 8
  %suidscript = alloca i8, align 1
  %sigstate = alloca void (i32)*, align 8
  %io = alloca %struct.io*, align 8
  %fp = alloca %struct._PerlIO**, align 8
  %sv = alloca %struct.sv*, align 8
  %in = alloca i32, align 4
  %out = alloca i32, align 4
  store i8** %env, i8*** %env.addr, align 8
  store void ()* %xsinit, void ()** %xsinit.addr, align 8
  %0 = load i32, i32* @PL_origargc, align 4
  store i32 %0, i32* %argc, align 4
  %1 = load i8**, i8*** @PL_origargv, align 8
  store i8** %1, i8*** %argv, align 8
  store i8* null, i8** %scriptname, align 8
  store volatile i8 0, i8* %dosearch, align 1
  store i8 0, i8* %doextract, align 1
  store i8* null, i8** %cddir, align 8
  store %struct.sv* null, %struct.sv** %linestr_sv, align 8
  store i8 0, i8* %add_read_e_script, align 1
  store i32 0, i32* %lex_start_flags, align 4
  store i32 1, i32* @PL_phase, align 4
  call void @S_init_main_stash()
  %2 = load i32, i32* %argc, align 4
  %dec = add nsw i32 %2, -1
  store i32 %dec, i32* %argc, align 4
  %3 = load i8**, i8*** %argv, align 8
  %incdec.ptr = getelementptr inbounds i8*, i8** %3, i32 1
  store i8** %incdec.ptr, i8*** %argv, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %argc, align 4
  %cmp = icmp sgt i32 %4, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i8**, i8*** %argv, align 8
  %arrayidx = getelementptr inbounds i8*, i8** %5, i64 0
  %6 = load i8*, i8** %arrayidx, align 8
  %arrayidx1 = getelementptr inbounds i8, i8* %6, i64 0
  %7 = load i8, i8* %arrayidx1, align 1
  %conv = sext i8 %7 to i32
  %cmp2 = icmp ne i32 %conv, 45
  br i1 %cmp2, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %8 = load i8**, i8*** %argv, align 8
  %arrayidx4 = getelementptr inbounds i8*, i8** %8, i64 0
  %9 = load i8*, i8** %arrayidx4, align 8
  %arrayidx5 = getelementptr inbounds i8, i8* %9, i64 1
  %10 = load i8, i8* %arrayidx5, align 1
  %tobool = icmp ne i8 %10, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %for.body
  br label %for.end

if.end:                                           ; preds = %lor.lhs.false
  %11 = load i8**, i8*** %argv, align 8
  %arrayidx6 = getelementptr inbounds i8*, i8** %11, i64 0
  %12 = load i8*, i8** %arrayidx6, align 8
  %add.ptr = getelementptr inbounds i8, i8* %12, i64 1
  store i8* %add.ptr, i8** %s, align 8
  br label %reswitch

reswitch:                                         ; preds = %if.end71, %sw.bb57, %sw.bb37, %sw.bb16, %if.end14, %if.then9, %if.end
  %13 = load i8*, i8** %s, align 8
  %14 = load i8, i8* %13, align 1
  store i8 %14, i8* %c, align 1
  %conv7 = sext i8 %14 to i32
  switch i32 %conv7, label %sw.default [
    i32 67, label %sw.bb
    i32 13, label %sw.bb
    i32 32, label %sw.bb
    i32 48, label %sw.bb
    i32 70, label %sw.bb
    i32 97, label %sw.bb
    i32 99, label %sw.bb
    i32 100, label %sw.bb
    i32 68, label %sw.bb
    i32 104, label %sw.bb
    i32 105, label %sw.bb
    i32 108, label %sw.bb
    i32 77, label %sw.bb
    i32 109, label %sw.bb
    i32 110, label %sw.bb
    i32 112, label %sw.bb
    i32 115, label %sw.bb
    i32 117, label %sw.bb
    i32 85, label %sw.bb
    i32 118, label %sw.bb
    i32 87, label %sw.bb
    i32 88, label %sw.bb
    i32 119, label %sw.bb
    i32 116, label %sw.bb11
    i32 84, label %sw.bb16
    i32 69, label %sw.bb18
    i32 101, label %sw.bb19
    i32 102, label %sw.bb37
    i32 73, label %sw.bb39
    i32 83, label %sw.bb57
    i32 86, label %sw.bb59
    i32 120, label %sw.bb72
    i32 0, label %sw.bb77
    i32 45, label %sw.bb78
  ]

sw.bb:                                            ; preds = %reswitch, %reswitch, %reswitch, %reswitch, %reswitch, %reswitch, %reswitch, %reswitch, %reswitch, %reswitch, %reswitch, %reswitch, %reswitch, %reswitch, %reswitch, %reswitch, %reswitch, %reswitch, %reswitch, %reswitch, %reswitch, %reswitch, %reswitch
  %15 = load i8*, i8** %s, align 8
  %call = call i8* @Perl_moreswitches(i8* %15)
  store i8* %call, i8** %s, align 8
  %tobool8 = icmp ne i8* %call, null
  br i1 %tobool8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %sw.bb
  br label %reswitch

if.end10:                                         ; preds = %sw.bb
  br label %sw.epilog

sw.bb11:                                          ; preds = %reswitch
  %16 = load i8, i8* @PL_tainting, align 1
  %tobool12 = trunc i8 %16 to i1
  br i1 %tobool12, label %if.end14, label %if.then13

if.then13:                                        ; preds = %sw.bb11
  store i8 1, i8* @PL_taint_warn, align 1
  store i8 1, i8* @PL_tainting, align 1
  br label %if.end14

if.end14:                                         ; preds = %if.then13, %sw.bb11
  %17 = load i8*, i8** %s, align 8
  %incdec.ptr15 = getelementptr inbounds i8, i8* %17, i32 1
  store i8* %incdec.ptr15, i8** %s, align 8
  br label %reswitch

sw.bb16:                                          ; preds = %reswitch
  store i8 1, i8* @PL_tainting, align 1
  store i8 0, i8* @PL_taint_warn, align 1
  %18 = load i8*, i8** %s, align 8
  %incdec.ptr17 = getelementptr inbounds i8, i8* %18, i32 1
  store i8* %incdec.ptr17, i8** %s, align 8
  br label %reswitch

sw.bb18:                                          ; preds = %reswitch
  store i8 1, i8* @PL_minus_E, align 1
  br label %sw.bb19

sw.bb19:                                          ; preds = %reswitch, %sw.bb18
  call void @S_forbid_setid(i8 signext 101, i1 zeroext false)
  %19 = load %struct.sv*, %struct.sv** @PL_e_script, align 8
  %tobool20 = icmp ne %struct.sv* %19, null
  br i1 %tobool20, label %if.end23, label %if.then21

if.then21:                                        ; preds = %sw.bb19
  %call22 = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), i64 0)
  store %struct.sv* %call22, %struct.sv** @PL_e_script, align 8
  store i8 1, i8* %add_read_e_script, align 1
  br label %if.end23

if.end23:                                         ; preds = %if.then21, %sw.bb19
  %20 = load i8*, i8** %s, align 8
  %incdec.ptr24 = getelementptr inbounds i8, i8* %20, i32 1
  store i8* %incdec.ptr24, i8** %s, align 8
  %21 = load i8, i8* %incdec.ptr24, align 1
  %tobool25 = icmp ne i8 %21, 0
  br i1 %tobool25, label %if.then26, label %if.else

if.then26:                                        ; preds = %if.end23
  %22 = load %struct.sv*, %struct.sv** @PL_e_script, align 8
  %23 = load i8*, i8** %s, align 8
  call void @Perl_sv_catpv(%struct.sv* %22, i8* %23)
  br label %if.end36

if.else:                                          ; preds = %if.end23
  %24 = load i8**, i8*** %argv, align 8
  %arrayidx27 = getelementptr inbounds i8*, i8** %24, i64 1
  %25 = load i8*, i8** %arrayidx27, align 8
  %tobool28 = icmp ne i8* %25, null
  br i1 %tobool28, label %if.then29, label %if.else33

if.then29:                                        ; preds = %if.else
  %26 = load %struct.sv*, %struct.sv** @PL_e_script, align 8
  %27 = load i8**, i8*** %argv, align 8
  %arrayidx30 = getelementptr inbounds i8*, i8** %27, i64 1
  %28 = load i8*, i8** %arrayidx30, align 8
  call void @Perl_sv_catpv(%struct.sv* %26, i8* %28)
  %29 = load i32, i32* %argc, align 4
  %dec31 = add nsw i32 %29, -1
  store i32 %dec31, i32* %argc, align 4
  %30 = load i8**, i8*** %argv, align 8
  %incdec.ptr32 = getelementptr inbounds i8*, i8** %30, i32 1
  store i8** %incdec.ptr32, i8*** %argv, align 8
  br label %if.end35

if.else33:                                        ; preds = %if.else
  %31 = load i8, i8* %c, align 1
  %conv34 = sext i8 %31 to i32
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.60, i64 0, i64 0), i32 %conv34)
  br label %if.end35

if.end35:                                         ; preds = %if.else33, %if.then29
  br label %if.end36

if.end36:                                         ; preds = %if.end35, %if.then26
  %32 = load %struct.sv*, %struct.sv** @PL_e_script, align 8
  call void @Perl_sv_catpvn_flags(%struct.sv* %32, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0), i64 1, i32 2)
  br label %sw.epilog

sw.bb37:                                          ; preds = %reswitch
  %33 = load i8*, i8** %s, align 8
  %incdec.ptr38 = getelementptr inbounds i8, i8* %33, i32 1
  store i8* %incdec.ptr38, i8** %s, align 8
  br label %reswitch

sw.bb39:                                          ; preds = %reswitch
  call void @S_forbid_setid(i8 signext 73, i1 zeroext false)
  %34 = load i8*, i8** %s, align 8
  %incdec.ptr40 = getelementptr inbounds i8, i8* %34, i32 1
  store i8* %incdec.ptr40, i8** %s, align 8
  %35 = load i8, i8* %incdec.ptr40, align 1
  %tobool41 = icmp ne i8 %35, 0
  br i1 %tobool41, label %if.end48, label %land.lhs.true

land.lhs.true:                                    ; preds = %sw.bb39
  %36 = load i8**, i8*** %argv, align 8
  %arrayidx42 = getelementptr inbounds i8*, i8** %36, i64 1
  %37 = load i8*, i8** %arrayidx42, align 8
  store i8* %37, i8** %s, align 8
  %cmp43 = icmp ne i8* %37, null
  br i1 %cmp43, label %if.then45, label %if.end48

if.then45:                                        ; preds = %land.lhs.true
  %38 = load i32, i32* %argc, align 4
  %dec46 = add nsw i32 %38, -1
  store i32 %dec46, i32* %argc, align 4
  %39 = load i8**, i8*** %argv, align 8
  %incdec.ptr47 = getelementptr inbounds i8*, i8** %39, i32 1
  store i8** %incdec.ptr47, i8*** %argv, align 8
  br label %if.end48

if.end48:                                         ; preds = %if.then45, %land.lhs.true, %sw.bb39
  %40 = load i8*, i8** %s, align 8
  %tobool49 = icmp ne i8* %40, null
  br i1 %tobool49, label %land.lhs.true50, label %if.else55

land.lhs.true50:                                  ; preds = %if.end48
  %41 = load i8*, i8** %s, align 8
  %42 = load i8, i8* %41, align 1
  %conv51 = sext i8 %42 to i32
  %tobool52 = icmp ne i32 %conv51, 0
  br i1 %tobool52, label %if.then53, label %if.else55

if.then53:                                        ; preds = %land.lhs.true50
  %43 = load i8*, i8** %s, align 8
  %call54 = call i64 @strlen(i8* %43) #11
  store i64 %call54, i64* %len, align 8
  %44 = load i8*, i8** %s, align 8
  %45 = load i64, i64* %len, align 8
  call void @S_incpush(i8* %44, i64 %45, i32 14)
  br label %if.end56

if.else55:                                        ; preds = %land.lhs.true50, %if.end48
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.25, i64 0, i64 0))
  br label %if.end56

if.end56:                                         ; preds = %if.else55, %if.then53
  br label %sw.epilog

sw.bb57:                                          ; preds = %reswitch
  call void @S_forbid_setid(i8 signext 83, i1 zeroext false)
  store volatile i8 1, i8* %dosearch, align 1
  %46 = load i8*, i8** %s, align 8
  %incdec.ptr58 = getelementptr inbounds i8, i8* %46, i32 1
  store i8* %incdec.ptr58, i8** %s, align 8
  br label %reswitch

sw.bb59:                                          ; preds = %reswitch
  %47 = load i8*, i8** %s, align 8
  %incdec.ptr60 = getelementptr inbounds i8, i8* %47, i32 1
  store i8* %incdec.ptr60, i8** %s, align 8
  %48 = load i8, i8* %incdec.ptr60, align 1
  %conv61 = sext i8 %48 to i32
  %cmp62 = icmp ne i32 %conv61, 58
  br i1 %cmp62, label %if.then64, label %if.else66

if.then64:                                        ; preds = %sw.bb59
  %call65 = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.61, i64 0, i64 0), i64 24)
  store %struct.sv* %call65, %struct.sv** %opts_prog, align 8
  br label %if.end71

if.else66:                                        ; preds = %sw.bb59
  %49 = load i8*, i8** %s, align 8
  %incdec.ptr67 = getelementptr inbounds i8, i8* %49, i32 1
  store i8* %incdec.ptr67, i8** %s, align 8
  %50 = load i8*, i8** %s, align 8
  %call68 = call %struct.sv* (i8*, ...) @Perl_newSVpvf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.62, i64 0, i64 0), i32 0, i8* %50, i32 0)
  store %struct.sv* %call68, %struct.sv** %opts_prog, align 8
  %51 = load i8*, i8** %s, align 8
  %call69 = call i64 @strlen(i8* %51) #11
  %52 = load i8*, i8** %s, align 8
  %add.ptr70 = getelementptr inbounds i8, i8* %52, i64 %call69
  store i8* %add.ptr70, i8** %s, align 8
  br label %if.end71

if.end71:                                         ; preds = %if.else66, %if.then64
  %53 = load %struct.sv*, %struct.sv** %opts_prog, align 8
  call void @Perl_av_create_and_push(%struct.av** @PL_preambleav, %struct.sv* %53)
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.63, i64 0, i64 0), i8** %scriptname, align 8
  br label %reswitch

sw.bb72:                                          ; preds = %reswitch
  store i8 1, i8* %doextract, align 1
  %54 = load i8*, i8** %s, align 8
  %incdec.ptr73 = getelementptr inbounds i8, i8* %54, i32 1
  store i8* %incdec.ptr73, i8** %s, align 8
  %55 = load i8*, i8** %s, align 8
  %56 = load i8, i8* %55, align 1
  %tobool74 = icmp ne i8 %56, 0
  br i1 %tobool74, label %if.then75, label %if.end76

if.then75:                                        ; preds = %sw.bb72
  %57 = load i8*, i8** %s, align 8
  store i8* %57, i8** %cddir, align 8
  br label %if.end76

if.end76:                                         ; preds = %if.then75, %sw.bb72
  br label %sw.epilog

sw.bb77:                                          ; preds = %reswitch
  br label %sw.epilog

sw.bb78:                                          ; preds = %reswitch
  %58 = load i8*, i8** %s, align 8
  %incdec.ptr79 = getelementptr inbounds i8, i8* %58, i32 1
  store i8* %incdec.ptr79, i8** %s, align 8
  %59 = load i8, i8* %incdec.ptr79, align 1
  %tobool80 = icmp ne i8 %59, 0
  br i1 %tobool80, label %lor.lhs.false81, label %if.then85

lor.lhs.false81:                                  ; preds = %sw.bb78
  %60 = load i8*, i8** %s, align 8
  %61 = load i8, i8* %60, align 1
  %idxprom = zext i8 %61 to i64
  %arrayidx82 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom
  %62 = load i32, i32* %arrayidx82, align 4
  %and = and i32 %62, 17408
  %cmp83 = icmp eq i32 %and, 17408
  br i1 %cmp83, label %if.then85, label %if.end88

if.then85:                                        ; preds = %lor.lhs.false81, %sw.bb78
  %63 = load i32, i32* %argc, align 4
  %dec86 = add nsw i32 %63, -1
  store i32 %dec86, i32* %argc, align 4
  %64 = load i8**, i8*** %argv, align 8
  %incdec.ptr87 = getelementptr inbounds i8*, i8** %64, i32 1
  store i8** %incdec.ptr87, i8*** %argv, align 8
  br label %switch_end

if.end88:                                         ; preds = %lor.lhs.false81
  %65 = load i8*, i8** %s, align 8
  %call89 = call i32 @strcmp(i8* %65, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.64, i64 0, i64 0)) #11
  %tobool90 = icmp ne i32 %call89, 0
  br i1 %tobool90, label %if.end92, label %if.then91

if.then91:                                        ; preds = %if.end88
  call void @S_minus_v()
  br label %if.end92

if.end92:                                         ; preds = %if.then91, %if.end88
  %66 = load i8*, i8** %s, align 8
  %call93 = call i32 @strcmp(i8* %66, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.65, i64 0, i64 0)) #11
  %tobool94 = icmp ne i32 %call93, 0
  br i1 %tobool94, label %if.end96, label %if.then95

if.then95:                                        ; preds = %if.end92
  call void @S_usage()
  br label %if.end96

if.end96:                                         ; preds = %if.then95, %if.end92
  %67 = load i8*, i8** %s, align 8
  %incdec.ptr97 = getelementptr inbounds i8, i8* %67, i32 -1
  store i8* %incdec.ptr97, i8** %s, align 8
  br label %sw.default

sw.default:                                       ; preds = %reswitch, %if.end96
  %68 = load i8*, i8** %s, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.66, i64 0, i64 0), i8* %68)
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb77, %if.end76, %if.end56, %if.end36, %if.end10
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %69 = load i32, i32* %argc, align 4
  %dec98 = add nsw i32 %69, -1
  store i32 %dec98, i32* %argc, align 4
  %70 = load i8**, i8*** %argv, align 8
  %incdec.ptr99 = getelementptr inbounds i8*, i8** %70, i32 1
  store i8** %incdec.ptr99, i8*** %argv, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  br label %switch_end

switch_end:                                       ; preds = %for.end, %if.then85
  store i8 1, i8* @PL_tainted, align 1
  call void @Perl_set_caret_X()
  store i8 0, i8* @PL_tainted, align 1
  %71 = load i8*, i8** %scriptname, align 8
  %tobool101 = icmp ne i8* %71, null
  br i1 %tobool101, label %if.end104, label %if.then102

if.then102:                                       ; preds = %switch_end
  %72 = load i8**, i8*** %argv, align 8
  %arrayidx103 = getelementptr inbounds i8*, i8** %72, i64 0
  %73 = load i8*, i8** %arrayidx103, align 8
  store i8* %73, i8** %scriptname, align 8
  br label %if.end104

if.end104:                                        ; preds = %if.then102, %switch_end
  %74 = load %struct.sv*, %struct.sv** @PL_e_script, align 8
  %tobool105 = icmp ne %struct.sv* %74, null
  br i1 %tobool105, label %if.then106, label %if.else108

if.then106:                                       ; preds = %if.end104
  %75 = load i32, i32* %argc, align 4
  %inc = add nsw i32 %75, 1
  store i32 %inc, i32* %argc, align 4
  %76 = load i8**, i8*** %argv, align 8
  %incdec.ptr107 = getelementptr inbounds i8*, i8** %76, i32 -1
  store i8** %incdec.ptr107, i8*** %argv, align 8
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.63, i64 0, i64 0), i8** %scriptname, align 8
  br label %if.end113

if.else108:                                       ; preds = %if.end104
  %77 = load i8*, i8** %scriptname, align 8
  %cmp109 = icmp eq i8* %77, null
  br i1 %cmp109, label %if.then111, label %if.end112

if.then111:                                       ; preds = %if.else108
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.67, i64 0, i64 0), i8** %scriptname, align 8
  br label %if.end112

if.end112:                                        ; preds = %if.then111, %if.else108
  br label %if.end113

if.end113:                                        ; preds = %if.end112, %if.then106
  call void @S_init_perllib()
  store i8 0, i8* %suidscript, align 1
  %78 = load i8*, i8** %scriptname, align 8
  %79 = load volatile i8, i8* %dosearch, align 1
  %tobool114 = trunc i8 %79 to i1
  %call115 = call %struct._PerlIO** @S_open_script(i8* %78, i1 zeroext %tobool114, i8* %suidscript)
  store %struct._PerlIO** %call115, %struct._PerlIO*** %rsfp, align 8
  %80 = load %struct._PerlIO**, %struct._PerlIO*** %rsfp, align 8
  %tobool116 = icmp ne %struct._PerlIO** %80, null
  br i1 %tobool116, label %if.end119, label %if.then117

if.then117:                                       ; preds = %if.end113
  %call118 = call %struct._PerlIO** @Perl_PerlIO_stdin()
  store %struct._PerlIO** %call118, %struct._PerlIO*** %rsfp, align 8
  store i32 16, i32* %lex_start_flags, align 4
  br label %if.end119

if.end119:                                        ; preds = %if.then117, %if.end113
  %call120 = call void (i32)* @Perl_rsignal_state(i32 17)
  store void (i32)* %call120, void (i32)** %sigstate, align 8
  %81 = load void (i32)*, void (i32)** %sigstate, align 8
  %cmp121 = icmp eq void (i32)* %81, inttoptr (i64 1 to void (i32)*)
  br i1 %cmp121, label %if.then123, label %if.end125

if.then123:                                       ; preds = %if.end119
  call void (i32, i8*, ...) @Perl_ck_warner(i32 26, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.68, i64 0, i64 0))
  %call124 = call void (i32)* @Perl_rsignal(i32 17, void (i32)* null)
  br label %if.end125

if.end125:                                        ; preds = %if.then123, %if.end119
  %82 = load i8, i8* %doextract, align 1
  %tobool126 = trunc i8 %82 to i1
  br i1 %tobool126, label %if.then127, label %if.end137

if.then127:                                       ; preds = %if.end125
  %83 = load i8, i8* %suidscript, align 1
  %tobool128 = trunc i8 %83 to i1
  call void @S_forbid_setid(i8 signext 120, i1 zeroext %tobool128)
  %call129 = call %struct.sv* @Perl_newSV_type(i32 3)
  store %struct.sv* %call129, %struct.sv** %linestr_sv, align 8
  %84 = load i32, i32* %lex_start_flags, align 4
  %or = or i32 %84, 8
  store i32 %or, i32* %lex_start_flags, align 4
  %85 = load %struct.sv*, %struct.sv** %linestr_sv, align 8
  %86 = load %struct._PerlIO**, %struct._PerlIO*** %rsfp, align 8
  call void @S_find_beginning(%struct.sv* %85, %struct._PerlIO** %86)
  %87 = load i8*, i8** %cddir, align 8
  %tobool130 = icmp ne i8* %87, null
  br i1 %tobool130, label %land.lhs.true131, label %if.end136

land.lhs.true131:                                 ; preds = %if.then127
  %88 = load i8*, i8** %cddir, align 8
  %call132 = call i32 @chdir(i8* %88) #6
  %cmp133 = icmp slt i32 %call132, 0
  br i1 %cmp133, label %if.then135, label %if.end136

if.then135:                                       ; preds = %land.lhs.true131
  %89 = load i8*, i8** %cddir, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.69, i64 0, i64 0), i8* %89)
  br label %if.end136

if.end136:                                        ; preds = %if.then135, %land.lhs.true131, %if.then127
  br label %if.end137

if.end137:                                        ; preds = %if.end136, %if.end125
  %call138 = call %struct.sv* @Perl_newSV_type(i32 13)
  %90 = bitcast %struct.sv* %call138 to i8*
  %91 = bitcast i8* %90 to %struct.cv*
  store %struct.cv* %91, %struct.cv** @PL_compcv, align 8
  store %struct.cv* %91, %struct.cv** @PL_main_cv, align 8
  %92 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %sv_any = getelementptr inbounds %struct.cv, %struct.cv* %92, i32 0, i32 0
  %93 = load %struct.xpvcv*, %struct.xpvcv** %sv_any, align 8
  %94 = bitcast %struct.xpvcv* %93 to i8*
  %95 = bitcast i8* %94 to %struct.xpvcv*
  %xcv_flags = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %95, i32 0, i32 12
  %96 = load i32, i32* %xcv_flags, align 4
  %or139 = or i32 %96, 256
  store i32 %or139, i32* %xcv_flags, align 4
  %call140 = call %struct.padlist* @Perl_pad_new(i32 0)
  %97 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %sv_any141 = getelementptr inbounds %struct.cv, %struct.cv* %97, i32 0, i32 0
  %98 = load %struct.xpvcv*, %struct.xpvcv** %sv_any141, align 8
  %99 = bitcast %struct.xpvcv* %98 to i8*
  %100 = bitcast i8* %99 to %struct.xpvcv*
  %xcv_padlist_u = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %100, i32 0, i32 9
  %xcv_padlist = bitcast %union.anon.12* %xcv_padlist_u to %struct.padlist**
  store %struct.padlist* %call140, %struct.padlist** %xcv_padlist, align 8
  %call142 = call %struct.sv* @Perl_newSV_type(i32 12)
  %101 = bitcast %struct.sv* %call142 to i8*
  %102 = bitcast i8* %101 to %struct.hv*
  store %struct.hv* %102, %struct.hv** @PL_isarev, align 8
  call void @Perl_boot_core_PerlIO()
  call void @Perl_boot_core_UNIVERSAL()
  call void @Perl_boot_core_mro()
  %call143 = call %struct.cv* @Perl_newXS(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.70, i64 0, i64 0), void (%struct.cv*)* @S_Internals_V, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.71, i64 0, i64 0))
  %103 = load void ()*, void ()** %xsinit.addr, align 8
  %tobool144 = icmp ne void ()* %103, null
  br i1 %tobool144, label %if.then145, label %if.end146

if.then145:                                       ; preds = %if.end137
  %104 = load void ()*, void ()** %xsinit.addr, align 8
  call void %104()
  br label %if.end146

if.end146:                                        ; preds = %if.then145, %if.end137
  call void @S_init_predump_symbols()
  %105 = load i8, i8* @PL_do_undump, align 1
  %tobool147 = trunc i8 %105 to i1
  br i1 %tobool147, label %if.end149, label %if.then148

if.then148:                                       ; preds = %if.end146
  %106 = load i32, i32* %argc, align 4
  %107 = load i8**, i8*** %argv, align 8
  %108 = load i8**, i8*** %env.addr, align 8
  call void @S_init_postdump_symbols(i32 %106, i8** %107, i8** %108)
  br label %if.end149

if.end149:                                        ; preds = %if.then148, %if.end146
  %109 = load i32, i32* @PL_unicode, align 4
  %tobool150 = icmp ne i32 %109, 0
  br i1 %tobool150, label %if.then151, label %if.end299

if.then151:                                       ; preds = %if.end149
  %110 = load i32, i32* @PL_unicode, align 4
  %and152 = and i32 %110, 64
  %tobool153 = icmp ne i32 %and152, 0
  br i1 %tobool153, label %lor.lhs.false154, label %if.then157

lor.lhs.false154:                                 ; preds = %if.then151
  %111 = load i8, i8* @PL_utf8locale, align 1
  %tobool155 = trunc i8 %111 to i1
  br i1 %tobool155, label %if.then157, label %if.end298

if.then157:                                       ; preds = %lor.lhs.false154, %if.then151
  %112 = load i32, i32* @PL_unicode, align 4
  %and158 = and i32 %112, 1
  %tobool159 = icmp ne i32 %and158, 0
  br i1 %tobool159, label %land.lhs.true160, label %if.end187

land.lhs.true160:                                 ; preds = %if.then157
  %113 = load %struct.gv*, %struct.gv** @PL_stdingv, align 8
  %tobool161 = icmp ne %struct.gv* %113, null
  br i1 %tobool161, label %land.lhs.true162, label %if.end187

land.lhs.true162:                                 ; preds = %land.lhs.true160
  %114 = load %struct.gv*, %struct.gv** @PL_stdingv, align 8
  %tobool163 = icmp ne %struct.gv* %114, null
  br i1 %tobool163, label %land.lhs.true164, label %cond.false

land.lhs.true164:                                 ; preds = %land.lhs.true162
  %115 = load %struct.gv*, %struct.gv** @PL_stdingv, align 8
  %116 = bitcast %struct.gv* %115 to %struct.sv*
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %116, i32 0, i32 2
  %117 = load i32, i32* %sv_flags, align 4
  %and165 = and i32 %117, 255
  %cmp166 = icmp eq i32 %and165, 9
  br i1 %cmp166, label %land.lhs.true173, label %lor.lhs.false168

lor.lhs.false168:                                 ; preds = %land.lhs.true164
  %118 = load %struct.gv*, %struct.gv** @PL_stdingv, align 8
  %119 = bitcast %struct.gv* %118 to %struct.sv*
  %sv_flags169 = getelementptr inbounds %struct.sv, %struct.sv* %119, i32 0, i32 2
  %120 = load i32, i32* %sv_flags169, align 4
  %and170 = and i32 %120, 255
  %cmp171 = icmp eq i32 %and170, 10
  br i1 %cmp171, label %land.lhs.true173, label %cond.false

land.lhs.true173:                                 ; preds = %lor.lhs.false168, %land.lhs.true164
  %121 = load %struct.gv*, %struct.gv** @PL_stdingv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %121, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %122 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr174 = getelementptr inbounds %struct.gp, %struct.gp* %122, i64 0
  %tobool175 = icmp ne %struct.gp* %add.ptr174, null
  br i1 %tobool175, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true173
  %123 = load %struct.gv*, %struct.gv** @PL_stdingv, align 8
  %sv_u176 = getelementptr inbounds %struct.gv, %struct.gv* %123, i32 0, i32 3
  %svu_gp177 = bitcast %union.anon.4* %sv_u176 to %struct.gp**
  %124 = load %struct.gp*, %struct.gp** %svu_gp177, align 8
  %add.ptr178 = getelementptr inbounds %struct.gp, %struct.gp* %124, i64 0
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr178, i32 0, i32 1
  %125 = load %struct.io*, %struct.io** %gp_io, align 8
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true173, %lor.lhs.false168, %land.lhs.true162
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.io* [ %125, %cond.true ], [ null, %cond.false ]
  store %struct.io* %cond, %struct.io** %io, align 8
  %tobool179 = icmp ne %struct.io* %cond, null
  br i1 %tobool179, label %land.lhs.true180, label %if.end187

land.lhs.true180:                                 ; preds = %cond.end
  %126 = load %struct.io*, %struct.io** %io, align 8
  %sv_u181 = getelementptr inbounds %struct.io, %struct.io* %126, i32 0, i32 3
  %svu_fp = bitcast %union.anon.1* %sv_u181 to %struct._PerlIO***
  %127 = load %struct._PerlIO**, %struct._PerlIO*** %svu_fp, align 8
  store %struct._PerlIO** %127, %struct._PerlIO*** %fp, align 8
  %tobool182 = icmp ne %struct._PerlIO** %127, null
  br i1 %tobool182, label %if.then183, label %if.end187

if.then183:                                       ; preds = %land.lhs.true180
  %128 = load %struct._PerlIO**, %struct._PerlIO*** %fp, align 8
  %129 = load %struct.io*, %struct.io** %io, align 8
  %sv_any184 = getelementptr inbounds %struct.io, %struct.io* %129, i32 0, i32 0
  %130 = load %struct.xpvio*, %struct.xpvio** %sv_any184, align 8
  %xio_type = getelementptr inbounds %struct.xpvio, %struct.xpvio* %130, i32 0, i32 16
  %131 = load i8, i8* %xio_type, align 8
  %conv185 = sext i8 %131 to i32
  %call186 = call i32 @PerlIO_binmode(%struct._PerlIO** %128, i32 %conv185, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.72, i64 0, i64 0))
  br label %if.end187

if.end187:                                        ; preds = %if.then183, %land.lhs.true180, %cond.end, %land.lhs.true160, %if.then157
  %132 = load i32, i32* @PL_unicode, align 4
  %and188 = and i32 %132, 2
  %tobool189 = icmp ne i32 %and188, 0
  br i1 %tobool189, label %land.lhs.true190, label %if.end226

land.lhs.true190:                                 ; preds = %if.end187
  %133 = load %struct.gv*, %struct.gv** @PL_defoutgv, align 8
  %tobool191 = icmp ne %struct.gv* %133, null
  br i1 %tobool191, label %land.lhs.true192, label %if.end226

land.lhs.true192:                                 ; preds = %land.lhs.true190
  %134 = load %struct.gv*, %struct.gv** @PL_defoutgv, align 8
  %tobool193 = icmp ne %struct.gv* %134, null
  br i1 %tobool193, label %land.lhs.true194, label %cond.false214

land.lhs.true194:                                 ; preds = %land.lhs.true192
  %135 = load %struct.gv*, %struct.gv** @PL_defoutgv, align 8
  %136 = bitcast %struct.gv* %135 to %struct.sv*
  %sv_flags195 = getelementptr inbounds %struct.sv, %struct.sv* %136, i32 0, i32 2
  %137 = load i32, i32* %sv_flags195, align 4
  %and196 = and i32 %137, 255
  %cmp197 = icmp eq i32 %and196, 9
  br i1 %cmp197, label %land.lhs.true204, label %lor.lhs.false199

lor.lhs.false199:                                 ; preds = %land.lhs.true194
  %138 = load %struct.gv*, %struct.gv** @PL_defoutgv, align 8
  %139 = bitcast %struct.gv* %138 to %struct.sv*
  %sv_flags200 = getelementptr inbounds %struct.sv, %struct.sv* %139, i32 0, i32 2
  %140 = load i32, i32* %sv_flags200, align 4
  %and201 = and i32 %140, 255
  %cmp202 = icmp eq i32 %and201, 10
  br i1 %cmp202, label %land.lhs.true204, label %cond.false214

land.lhs.true204:                                 ; preds = %lor.lhs.false199, %land.lhs.true194
  %141 = load %struct.gv*, %struct.gv** @PL_defoutgv, align 8
  %sv_u205 = getelementptr inbounds %struct.gv, %struct.gv* %141, i32 0, i32 3
  %svu_gp206 = bitcast %union.anon.4* %sv_u205 to %struct.gp**
  %142 = load %struct.gp*, %struct.gp** %svu_gp206, align 8
  %add.ptr207 = getelementptr inbounds %struct.gp, %struct.gp* %142, i64 0
  %tobool208 = icmp ne %struct.gp* %add.ptr207, null
  br i1 %tobool208, label %cond.true209, label %cond.false214

cond.true209:                                     ; preds = %land.lhs.true204
  %143 = load %struct.gv*, %struct.gv** @PL_defoutgv, align 8
  %sv_u210 = getelementptr inbounds %struct.gv, %struct.gv* %143, i32 0, i32 3
  %svu_gp211 = bitcast %union.anon.4* %sv_u210 to %struct.gp**
  %144 = load %struct.gp*, %struct.gp** %svu_gp211, align 8
  %add.ptr212 = getelementptr inbounds %struct.gp, %struct.gp* %144, i64 0
  %gp_io213 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr212, i32 0, i32 1
  %145 = load %struct.io*, %struct.io** %gp_io213, align 8
  br label %cond.end215

cond.false214:                                    ; preds = %land.lhs.true204, %lor.lhs.false199, %land.lhs.true192
  br label %cond.end215

cond.end215:                                      ; preds = %cond.false214, %cond.true209
  %cond216 = phi %struct.io* [ %145, %cond.true209 ], [ null, %cond.false214 ]
  store %struct.io* %cond216, %struct.io** %io, align 8
  %tobool217 = icmp ne %struct.io* %cond216, null
  br i1 %tobool217, label %land.lhs.true218, label %if.end226

land.lhs.true218:                                 ; preds = %cond.end215
  %146 = load %struct.io*, %struct.io** %io, align 8
  %sv_any219 = getelementptr inbounds %struct.io, %struct.io* %146, i32 0, i32 0
  %147 = load %struct.xpvio*, %struct.xpvio** %sv_any219, align 8
  %xio_ofp = getelementptr inbounds %struct.xpvio, %struct.xpvio* %147, i32 0, i32 5
  %148 = load %struct._PerlIO**, %struct._PerlIO*** %xio_ofp, align 8
  store %struct._PerlIO** %148, %struct._PerlIO*** %fp, align 8
  %tobool220 = icmp ne %struct._PerlIO** %148, null
  br i1 %tobool220, label %if.then221, label %if.end226

if.then221:                                       ; preds = %land.lhs.true218
  %149 = load %struct._PerlIO**, %struct._PerlIO*** %fp, align 8
  %150 = load %struct.io*, %struct.io** %io, align 8
  %sv_any222 = getelementptr inbounds %struct.io, %struct.io* %150, i32 0, i32 0
  %151 = load %struct.xpvio*, %struct.xpvio** %sv_any222, align 8
  %xio_type223 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %151, i32 0, i32 16
  %152 = load i8, i8* %xio_type223, align 8
  %conv224 = sext i8 %152 to i32
  %call225 = call i32 @PerlIO_binmode(%struct._PerlIO** %149, i32 %conv224, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.72, i64 0, i64 0))
  br label %if.end226

if.end226:                                        ; preds = %if.then221, %land.lhs.true218, %cond.end215, %land.lhs.true190, %if.end187
  %153 = load i32, i32* @PL_unicode, align 4
  %and227 = and i32 %153, 4
  %tobool228 = icmp ne i32 %and227, 0
  br i1 %tobool228, label %land.lhs.true229, label %if.end266

land.lhs.true229:                                 ; preds = %if.end226
  %154 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %tobool230 = icmp ne %struct.gv* %154, null
  br i1 %tobool230, label %land.lhs.true231, label %if.end266

land.lhs.true231:                                 ; preds = %land.lhs.true229
  %155 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %tobool232 = icmp ne %struct.gv* %155, null
  br i1 %tobool232, label %land.lhs.true233, label %cond.false253

land.lhs.true233:                                 ; preds = %land.lhs.true231
  %156 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %157 = bitcast %struct.gv* %156 to %struct.sv*
  %sv_flags234 = getelementptr inbounds %struct.sv, %struct.sv* %157, i32 0, i32 2
  %158 = load i32, i32* %sv_flags234, align 4
  %and235 = and i32 %158, 255
  %cmp236 = icmp eq i32 %and235, 9
  br i1 %cmp236, label %land.lhs.true243, label %lor.lhs.false238

lor.lhs.false238:                                 ; preds = %land.lhs.true233
  %159 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %160 = bitcast %struct.gv* %159 to %struct.sv*
  %sv_flags239 = getelementptr inbounds %struct.sv, %struct.sv* %160, i32 0, i32 2
  %161 = load i32, i32* %sv_flags239, align 4
  %and240 = and i32 %161, 255
  %cmp241 = icmp eq i32 %and240, 10
  br i1 %cmp241, label %land.lhs.true243, label %cond.false253

land.lhs.true243:                                 ; preds = %lor.lhs.false238, %land.lhs.true233
  %162 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %sv_u244 = getelementptr inbounds %struct.gv, %struct.gv* %162, i32 0, i32 3
  %svu_gp245 = bitcast %union.anon.4* %sv_u244 to %struct.gp**
  %163 = load %struct.gp*, %struct.gp** %svu_gp245, align 8
  %add.ptr246 = getelementptr inbounds %struct.gp, %struct.gp* %163, i64 0
  %tobool247 = icmp ne %struct.gp* %add.ptr246, null
  br i1 %tobool247, label %cond.true248, label %cond.false253

cond.true248:                                     ; preds = %land.lhs.true243
  %164 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %sv_u249 = getelementptr inbounds %struct.gv, %struct.gv* %164, i32 0, i32 3
  %svu_gp250 = bitcast %union.anon.4* %sv_u249 to %struct.gp**
  %165 = load %struct.gp*, %struct.gp** %svu_gp250, align 8
  %add.ptr251 = getelementptr inbounds %struct.gp, %struct.gp* %165, i64 0
  %gp_io252 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr251, i32 0, i32 1
  %166 = load %struct.io*, %struct.io** %gp_io252, align 8
  br label %cond.end254

cond.false253:                                    ; preds = %land.lhs.true243, %lor.lhs.false238, %land.lhs.true231
  br label %cond.end254

cond.end254:                                      ; preds = %cond.false253, %cond.true248
  %cond255 = phi %struct.io* [ %166, %cond.true248 ], [ null, %cond.false253 ]
  store %struct.io* %cond255, %struct.io** %io, align 8
  %tobool256 = icmp ne %struct.io* %cond255, null
  br i1 %tobool256, label %land.lhs.true257, label %if.end266

land.lhs.true257:                                 ; preds = %cond.end254
  %167 = load %struct.io*, %struct.io** %io, align 8
  %sv_any258 = getelementptr inbounds %struct.io, %struct.io* %167, i32 0, i32 0
  %168 = load %struct.xpvio*, %struct.xpvio** %sv_any258, align 8
  %xio_ofp259 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %168, i32 0, i32 5
  %169 = load %struct._PerlIO**, %struct._PerlIO*** %xio_ofp259, align 8
  store %struct._PerlIO** %169, %struct._PerlIO*** %fp, align 8
  %tobool260 = icmp ne %struct._PerlIO** %169, null
  br i1 %tobool260, label %if.then261, label %if.end266

if.then261:                                       ; preds = %land.lhs.true257
  %170 = load %struct._PerlIO**, %struct._PerlIO*** %fp, align 8
  %171 = load %struct.io*, %struct.io** %io, align 8
  %sv_any262 = getelementptr inbounds %struct.io, %struct.io* %171, i32 0, i32 0
  %172 = load %struct.xpvio*, %struct.xpvio** %sv_any262, align 8
  %xio_type263 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %172, i32 0, i32 16
  %173 = load i8, i8* %xio_type263, align 8
  %conv264 = sext i8 %173 to i32
  %call265 = call i32 @PerlIO_binmode(%struct._PerlIO** %170, i32 %conv264, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.72, i64 0, i64 0))
  br label %if.end266

if.end266:                                        ; preds = %if.then261, %land.lhs.true257, %cond.end254, %land.lhs.true229, %if.end226
  %174 = load i32, i32* @PL_unicode, align 4
  %and267 = and i32 %174, 24
  %tobool268 = icmp ne i32 %and267, 0
  br i1 %tobool268, label %land.lhs.true269, label %if.end297

land.lhs.true269:                                 ; preds = %if.end266
  %call270 = call %struct.gv* @Perl_gv_fetchpvn_flags(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.73, i64 0, i64 0), i64 4, i32 129, i32 3)
  %sv_u271 = getelementptr inbounds %struct.gv, %struct.gv* %call270, i32 0, i32 3
  %svu_gp272 = bitcast %union.anon.4* %sv_u271 to %struct.gp**
  %175 = load %struct.gp*, %struct.gp** %svu_gp272, align 8
  %add.ptr273 = getelementptr inbounds %struct.gp, %struct.gp* %175, i64 0
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr273, i32 0, i32 0
  %176 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  store %struct.sv* %176, %struct.sv** %sv, align 8
  %tobool274 = icmp ne %struct.sv* %176, null
  br i1 %tobool274, label %if.then275, label %if.end297

if.then275:                                       ; preds = %land.lhs.true269
  %177 = load i32, i32* @PL_unicode, align 4
  %and276 = and i32 %177, 8
  store i32 %and276, i32* %in, align 4
  %178 = load i32, i32* @PL_unicode, align 4
  %and277 = and i32 %178, 16
  store i32 %and277, i32* %out, align 4
  %179 = load i32, i32* %in, align 4
  %tobool278 = icmp ne i32 %179, 0
  br i1 %tobool278, label %if.then279, label %if.else284

if.then279:                                       ; preds = %if.then275
  %180 = load i32, i32* %out, align 4
  %tobool280 = icmp ne i32 %180, 0
  br i1 %tobool280, label %if.then281, label %if.else282

if.then281:                                       ; preds = %if.then279
  %181 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_setpvn(%struct.sv* %181, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.74, i64 0, i64 0), i64 11)
  br label %if.end283

if.else282:                                       ; preds = %if.then279
  %182 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_setpvn(%struct.sv* %182, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.75, i64 0, i64 0), i64 6)
  br label %if.end283

if.end283:                                        ; preds = %if.else282, %if.then281
  br label %if.end288

if.else284:                                       ; preds = %if.then275
  %183 = load i32, i32* %out, align 4
  %tobool285 = icmp ne i32 %183, 0
  br i1 %tobool285, label %if.then286, label %if.end287

if.then286:                                       ; preds = %if.else284
  %184 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_setpvn(%struct.sv* %184, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i64 0, i64 0), i64 6)
  br label %if.end287

if.end287:                                        ; preds = %if.then286, %if.else284
  br label %if.end288

if.end288:                                        ; preds = %if.end287, %if.end283
  br label %do.body

do.body:                                          ; preds = %if.end288
  %185 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags289 = getelementptr inbounds %struct.sv, %struct.sv* %185, i32 0, i32 2
  %186 = load i32, i32* %sv_flags289, align 4
  %and290 = and i32 %186, 4194304
  %tobool291 = icmp ne i32 %and290, 0
  br i1 %tobool291, label %cond.true292, label %cond.false293

cond.true292:                                     ; preds = %do.body
  br i1 true, label %if.then294, label %if.end296

cond.false293:                                    ; preds = %do.body
  br i1 false, label %if.then294, label %if.end296

if.then294:                                       ; preds = %cond.false293, %cond.true292
  %187 = load %struct.sv*, %struct.sv** %sv, align 8
  %call295 = call i32 @Perl_mg_set(%struct.sv* %187)
  br label %if.end296

if.end296:                                        ; preds = %if.then294, %cond.false293, %cond.true292
  br label %do.end

do.end:                                           ; preds = %if.end296
  br label %if.end297

if.end297:                                        ; preds = %do.end, %land.lhs.true269, %if.end266
  br label %if.end298

if.end298:                                        ; preds = %if.end297, %lor.lhs.false154
  br label %if.end299

if.end299:                                        ; preds = %if.end298, %if.end149
  %188 = load %struct.sv*, %struct.sv** %linestr_sv, align 8
  %189 = load %struct._PerlIO**, %struct._PerlIO*** %rsfp, align 8
  %190 = load i32, i32* %lex_start_flags, align 4
  call void @Perl_lex_start(%struct.sv* %188, %struct._PerlIO** %189, i32 %190)
  %191 = load %struct.sv*, %struct.sv** %linestr_sv, align 8
  %192 = bitcast %struct.sv* %191 to i8*
  %193 = bitcast i8* %192 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %193)
  %call300 = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.77, i64 0, i64 0), i64 4)
  store %struct.sv* %call300, %struct.sv** @PL_subname, align 8
  %194 = load i8, i8* %add_read_e_script, align 1
  %tobool301 = trunc i8 %194 to i1
  br i1 %tobool301, label %if.then302, label %if.end304

if.then302:                                       ; preds = %if.end299
  %call303 = call %struct.sv* @Perl_filter_add(i32 (i32, %struct.sv*, i32)* @read_e_script, %struct.sv* null)
  br label %if.end304

if.end304:                                        ; preds = %if.then302, %if.end299
  %call305 = call i32* @__errno_location() #12
  store i32 0, i32* %call305, align 4
  %call306 = call i32 @Perl_yyparse(i32 258)
  %tobool307 = icmp ne i32 %call306, 0
  br i1 %tobool307, label %if.then311, label %lor.lhs.false308

lor.lhs.false308:                                 ; preds = %if.end304
  %195 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %error_count = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %195, i32 0, i32 44
  %196 = load i8, i8* %error_count, align 1
  %conv309 = zext i8 %196 to i32
  %tobool310 = icmp ne i32 %conv309, 0
  br i1 %tobool310, label %if.then311, label %if.end316

if.then311:                                       ; preds = %lor.lhs.false308, %if.end304
  %197 = load i8, i8* @PL_minus_c, align 1
  %tobool312 = trunc i8 %197 to i1
  br i1 %tobool312, label %if.then313, label %if.else314

if.then313:                                       ; preds = %if.then311
  %198 = load i8*, i8** @PL_origfilename, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.78, i64 0, i64 0), i8* %198)
  br label %if.end315

if.else314:                                       ; preds = %if.then311
  %199 = load i8*, i8** @PL_origfilename, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.79, i64 0, i64 0), i8* %199)
  br label %if.end315

if.end315:                                        ; preds = %if.else314, %if.then313
  br label %if.end316

if.end316:                                        ; preds = %if.end315, %lor.lhs.false308
  %200 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_line = getelementptr inbounds %struct.cop, %struct.cop* %200, i32 0, i32 7
  store i32 0, i32* %cop_line, align 4
  %201 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %202 = load %struct.hv*, %struct.hv** @PL_defstash, align 8
  %cmp317 = icmp ne %struct.hv* %201, %202
  br i1 %cmp317, label %if.then319, label %if.end321

if.then319:                                       ; preds = %if.end316
  %203 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %204 = bitcast %struct.hv* %203 to i8*
  %205 = bitcast i8* %204 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %205)
  %206 = load %struct.hv*, %struct.hv** @PL_defstash, align 8
  %207 = bitcast %struct.hv* %206 to i8*
  %208 = bitcast i8* %207 to %struct.sv*
  %call320 = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %208)
  %209 = bitcast %struct.sv* %call320 to %struct.hv*
  store %struct.hv* %209, %struct.hv** @PL_curstash, align 8
  br label %if.end321

if.end321:                                        ; preds = %if.then319, %if.end316
  %210 = load %struct.sv*, %struct.sv** @PL_e_script, align 8
  %tobool322 = icmp ne %struct.sv* %210, null
  br i1 %tobool322, label %if.then323, label %if.end324

if.then323:                                       ; preds = %if.end321
  %211 = load %struct.sv*, %struct.sv** @PL_e_script, align 8
  %212 = bitcast %struct.sv* %211 to i8*
  %213 = bitcast i8* %212 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %213)
  store %struct.sv* null, %struct.sv** @PL_e_script, align 8
  br label %if.end324

if.end324:                                        ; preds = %if.then323, %if.end321
  %214 = load i8, i8* @PL_do_undump, align 1
  %tobool325 = trunc i8 %214 to i1
  br i1 %tobool325, label %if.then326, label %if.end327

if.then326:                                       ; preds = %if.end324
  call void @Perl_my_unexec()
  br label %if.end327

if.end327:                                        ; preds = %if.then326, %if.end324
  %215 = load i8, i8* @PL_dowarn, align 1
  %conv328 = zext i8 %215 to i32
  %and329 = and i32 %conv328, 9
  %tobool330 = icmp ne i32 %and329, 0
  br i1 %tobool330, label %if.then331, label %if.end333

if.then331:                                       ; preds = %if.end327
  %216 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_filegv = getelementptr inbounds %struct.cop, %struct.cop* %216, i32 0, i32 9
  %217 = bitcast %struct.gv** %cop_filegv to %struct.sv**
  call void @Perl_save_sptr(%struct.sv** %217)
  %218 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_line332 = getelementptr inbounds %struct.cop, %struct.cop* %218, i32 0, i32 7
  call void @Perl_save_I32(i32* %cop_line332)
  %219 = load %struct.hv*, %struct.hv** @PL_defstash, align 8
  call void @Perl_gv_check(%struct.hv* %219)
  br label %if.end333

if.end333:                                        ; preds = %if.then331, %if.end327
  call void @Perl_pop_scope()
  %220 = load i64, i64* @PL_tmps_ix, align 8
  %221 = load i64, i64* @PL_tmps_floor, align 8
  %cmp334 = icmp sgt i64 %220, %221
  br i1 %cmp334, label %if.then336, label %if.end337

if.then336:                                       ; preds = %if.end333
  call void @Perl_free_tmps()
  br label %if.end337

if.end337:                                        ; preds = %if.then336, %if.end333
  call void @Perl_push_scope()
  store %struct.jmpenv* null, %struct.jmpenv** @PL_restartjmpenv, align 8
  store %struct.op* null, %struct.op** @PL_restartop, align 8
  ret i8* null
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.sv* @S_SvREFCNT_inc(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp = icmp ne %struct.sv* %0, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %if.then, label %if.end

cond.false:                                       ; preds = %entry
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 1
  %2 = load i32, i32* %sv_refcnt, align 8
  %inc = add i32 %2, 1
  store i32 %inc, i32* %sv_refcnt, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  ret %struct.sv* %3
}

declare dso_local i32 @PerlIO_printf(%struct._PerlIO**, i8*, ...) #2

declare dso_local %struct._PerlIO** @Perl_PerlIO_stderr() #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @perl_run(%struct.interpreter* %my_perl) #0 {
entry:
  %my_perl.addr = alloca %struct.interpreter*, align 8
  %oldscope = alloca i32, align 4
  %ret = alloca i32, align 4
  %cur_env = alloca %struct.jmpenv, align 8
  %sp = alloca %struct.sv**, align 8
  %prev = alloca %struct.stackinfo*, align 8
  store %struct.interpreter* %my_perl, %struct.interpreter** %my_perl.addr, align 8
  store i32 0, i32* %ret, align 4
  %0 = load %struct.interpreter*, %struct.interpreter** %my_perl.addr, align 8
  %1 = load i32, i32* @PL_scopestack_ix, align 4
  store i32 %1, i32* %oldscope, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %2 = load %struct.jmpenv*, %struct.jmpenv** @PL_top_env, align 8
  %je_prev = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 1
  store %struct.jmpenv* %2, %struct.jmpenv** %je_prev, align 8
  %je_buf = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 0
  %arraydecay = getelementptr inbounds [1 x %struct.__jmp_buf_tag], [1 x %struct.__jmp_buf_tag]* %je_buf, i64 0, i64 0
  %call = call i32 @__sigsetjmp(%struct.__jmp_buf_tag* %arraydecay, i32 0) #9
  %je_ret = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 2
  store i32 %call, i32* %je_ret, align 8
  store %struct.jmpenv* %cur_env, %struct.jmpenv** @PL_top_env, align 8
  %je_mustcatch = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 3
  store i8 0, i8* %je_mustcatch, align 4
  %je_ret1 = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 2
  %3 = load i32, i32* %je_ret1, align 8
  store i32 %3, i32* %ret, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %4 = load i32, i32* %ret, align 4
  switch i32 %4, label %sw.epilog [
    i32 1, label %sw.bb
    i32 0, label %sw.bb2
    i32 2, label %sw.bb3
    i32 3, label %sw.bb14
  ]

sw.bb:                                            ; preds = %do.end
  %5 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %5, i32 0, i32 4
  store i32 -1, i32* %si_cxix, align 8
  br label %redo_body

sw.bb2:                                           ; preds = %do.end
  br label %redo_body

redo_body:                                        ; preds = %do.end37, %sw.bb2, %sw.bb
  %6 = load i32, i32* %oldscope, align 4
  call void @S_run_body(i32 %6)
  br label %sw.bb3

sw.bb3:                                           ; preds = %do.end, %redo_body
  br label %while.cond

while.cond:                                       ; preds = %while.body, %sw.bb3
  %7 = load i32, i32* @PL_scopestack_ix, align 4
  %8 = load i32, i32* %oldscope, align 4
  %cmp = icmp sgt i32 %7, %8
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  call void @Perl_pop_scope()
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %9 = load i64, i64* @PL_tmps_ix, align 8
  %10 = load i64, i64* @PL_tmps_floor, align 8
  %cmp4 = icmp sgt i64 %9, %10
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  call void @Perl_free_tmps()
  br label %if.end

if.end:                                           ; preds = %if.then, %while.end
  %11 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %12 = load %struct.hv*, %struct.hv** @PL_defstash, align 8
  %cmp5 = icmp ne %struct.hv* %11, %12
  br i1 %cmp5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.end
  %13 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %14 = bitcast %struct.hv* %13 to i8*
  %15 = bitcast i8* %14 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %15)
  %16 = load %struct.hv*, %struct.hv** @PL_defstash, align 8
  %17 = bitcast %struct.hv* %16 to i8*
  %18 = bitcast i8* %17 to %struct.sv*
  %call7 = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %18)
  %19 = bitcast %struct.sv* %call7 to %struct.hv*
  store %struct.hv* %19, %struct.hv** @PL_curstash, align 8
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %if.end
  %20 = load i8, i8* @PL_exit_flags, align 1
  %conv = zext i8 %20 to i32
  %and = and i32 %conv, 2
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end13, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end8
  %21 = load %struct.av*, %struct.av** @PL_endav, align 8
  %tobool9 = icmp ne %struct.av* %21, null
  br i1 %tobool9, label %land.lhs.true10, label %if.end13

land.lhs.true10:                                  ; preds = %land.lhs.true
  %22 = load i8, i8* @PL_minus_c, align 1
  %tobool11 = trunc i8 %22 to i1
  br i1 %tobool11, label %if.end13, label %if.then12

if.then12:                                        ; preds = %land.lhs.true10
  store i32 5, i32* @PL_phase, align 4
  %23 = load i32, i32* %oldscope, align 4
  %24 = load %struct.av*, %struct.av** @PL_endav, align 8
  call void @Perl_call_list(i32 %23, %struct.av* %24)
  br label %if.end13

if.end13:                                         ; preds = %if.then12, %land.lhs.true10, %land.lhs.true, %if.end8
  %25 = load i32, i32* @PL_statusvalue, align 4
  store i32 %25, i32* %ret, align 4
  br label %sw.epilog

sw.bb14:                                          ; preds = %do.end
  %26 = load %struct.op*, %struct.op** @PL_restartop, align 8
  %tobool15 = icmp ne %struct.op* %26, null
  br i1 %tobool15, label %if.then16, label %if.end38

if.then16:                                        ; preds = %sw.bb14
  br label %do.body17

do.body17:                                        ; preds = %if.then16
  br label %while.cond18

while.cond18:                                     ; preds = %do.end35, %do.body17
  %27 = load %struct.av*, %struct.av** @PL_curstack, align 8
  %28 = load %struct.av*, %struct.av** @PL_mainstack, align 8
  %cmp19 = icmp ne %struct.av* %27, %28
  br i1 %cmp19, label %while.body21, label %while.end36

while.body21:                                     ; preds = %while.cond18
  call void @Perl_dounwind(i32 -1)
  br label %do.body22

do.body22:                                        ; preds = %while.body21
  %29 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %29, %struct.sv*** %sp, align 8
  %30 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_prev = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %30, i32 0, i32 2
  %31 = load %struct.stackinfo*, %struct.stackinfo** %si_prev, align 8
  store %struct.stackinfo* %31, %struct.stackinfo** %prev, align 8
  %32 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %tobool23 = icmp ne %struct.stackinfo* %32, null
  br i1 %tobool23, label %if.end25, label %if.then24

if.then24:                                        ; preds = %do.body22
  call void @Perl_croak_popstack()
  br label %if.end25

if.end25:                                         ; preds = %if.then24, %do.body22
  br label %do.body26

do.body26:                                        ; preds = %if.end25
  %33 = load %struct.sv**, %struct.sv*** %sp, align 8
  %34 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %33 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %34 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %35 = load %struct.av*, %struct.av** @PL_curstack, align 8
  %sv_any = getelementptr inbounds %struct.av, %struct.av* %35, i32 0, i32 0
  %36 = load %struct.xpvav*, %struct.xpvav** %sv_any, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %36, i32 0, i32 2
  store i64 %sub.ptr.div, i64* %xav_fill, align 8
  %37 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %si_stack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %37, i32 0, i32 0
  %38 = load %struct.av*, %struct.av** %si_stack, align 8
  %sv_u = getelementptr inbounds %struct.av, %struct.av* %38, i32 0, i32 3
  %svu_array = bitcast %union.anon.3* %sv_u to %struct.sv***
  %39 = load %struct.sv**, %struct.sv*** %svu_array, align 8
  store %struct.sv** %39, %struct.sv*** @PL_stack_base, align 8
  %40 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %41 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %si_stack27 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %41, i32 0, i32 0
  %42 = load %struct.av*, %struct.av** %si_stack27, align 8
  %sv_any28 = getelementptr inbounds %struct.av, %struct.av* %42, i32 0, i32 0
  %43 = load %struct.xpvav*, %struct.xpvav** %sv_any28, align 8
  %xav_max = getelementptr inbounds %struct.xpvav, %struct.xpvav* %43, i32 0, i32 3
  %44 = load i64, i64* %xav_max, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %40, i64 %44
  store %struct.sv** %add.ptr, %struct.sv*** @PL_stack_max, align 8
  %45 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %46 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %si_stack29 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %46, i32 0, i32 0
  %47 = load %struct.av*, %struct.av** %si_stack29, align 8
  %sv_any30 = getelementptr inbounds %struct.av, %struct.av* %47, i32 0, i32 0
  %48 = load %struct.xpvav*, %struct.xpvav** %sv_any30, align 8
  %xav_fill31 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %48, i32 0, i32 2
  %49 = load i64, i64* %xav_fill31, align 8
  %add.ptr32 = getelementptr inbounds %struct.sv*, %struct.sv** %45, i64 %49
  store %struct.sv** %add.ptr32, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %add.ptr32, %struct.sv*** %sp, align 8
  %50 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %si_stack33 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %50, i32 0, i32 0
  %51 = load %struct.av*, %struct.av** %si_stack33, align 8
  store %struct.av* %51, %struct.av** @PL_curstack, align 8
  br label %do.end34

do.end34:                                         ; preds = %do.body26
  %52 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  store %struct.stackinfo* %52, %struct.stackinfo** @PL_curstackinfo, align 8
  br label %do.end35

do.end35:                                         ; preds = %do.end34
  br label %while.cond18

while.end36:                                      ; preds = %while.cond18
  br label %do.end37

do.end37:                                         ; preds = %while.end36
  br label %redo_body

if.end38:                                         ; preds = %sw.bb14
  %53 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %tobool39 = icmp ne %struct.gv* %53, null
  br i1 %tobool39, label %land.lhs.true40, label %cond.false

land.lhs.true40:                                  ; preds = %if.end38
  %54 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %sv_flags = getelementptr inbounds %struct.gv, %struct.gv* %54, i32 0, i32 2
  %55 = load i32, i32* %sv_flags, align 4
  %and41 = and i32 %55, 255
  %cmp42 = icmp eq i32 %and41, 9
  br i1 %cmp42, label %land.lhs.true44, label %cond.false

land.lhs.true44:                                  ; preds = %land.lhs.true40
  %56 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %sv_u45 = getelementptr inbounds %struct.gv, %struct.gv* %56, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u45 to %struct.gp**
  %57 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr46 = getelementptr inbounds %struct.gp, %struct.gp* %57, i64 0
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr46, i32 0, i32 1
  %58 = load %struct.io*, %struct.io** %gp_io, align 8
  %tobool47 = icmp ne %struct.io* %58, null
  br i1 %tobool47, label %land.lhs.true48, label %cond.false

land.lhs.true48:                                  ; preds = %land.lhs.true44
  %59 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %sv_u49 = getelementptr inbounds %struct.gv, %struct.gv* %59, i32 0, i32 3
  %svu_gp50 = bitcast %union.anon.4* %sv_u49 to %struct.gp**
  %60 = load %struct.gp*, %struct.gp** %svu_gp50, align 8
  %add.ptr51 = getelementptr inbounds %struct.gp, %struct.gp* %60, i64 0
  %gp_io52 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr51, i32 0, i32 1
  %61 = load %struct.io*, %struct.io** %gp_io52, align 8
  %sv_any53 = getelementptr inbounds %struct.io, %struct.io* %61, i32 0, i32 0
  %62 = load %struct.xpvio*, %struct.xpvio** %sv_any53, align 8
  %xio_ofp = getelementptr inbounds %struct.xpvio, %struct.xpvio* %62, i32 0, i32 5
  %63 = load %struct._PerlIO**, %struct._PerlIO*** %xio_ofp, align 8
  %tobool54 = icmp ne %struct._PerlIO** %63, null
  br i1 %tobool54, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true48
  %64 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %sv_u55 = getelementptr inbounds %struct.gv, %struct.gv* %64, i32 0, i32 3
  %svu_gp56 = bitcast %union.anon.4* %sv_u55 to %struct.gp**
  %65 = load %struct.gp*, %struct.gp** %svu_gp56, align 8
  %add.ptr57 = getelementptr inbounds %struct.gp, %struct.gp* %65, i64 0
  %gp_io58 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr57, i32 0, i32 1
  %66 = load %struct.io*, %struct.io** %gp_io58, align 8
  %sv_any59 = getelementptr inbounds %struct.io, %struct.io* %66, i32 0, i32 0
  %67 = load %struct.xpvio*, %struct.xpvio** %sv_any59, align 8
  %xio_ofp60 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %67, i32 0, i32 5
  %68 = load %struct._PerlIO**, %struct._PerlIO*** %xio_ofp60, align 8
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true48, %land.lhs.true44, %land.lhs.true40, %if.end38
  %call61 = call %struct._PerlIO** @Perl_PerlIO_stderr()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._PerlIO** [ %68, %cond.true ], [ %call61, %cond.false ]
  %call62 = call i32 (%struct._PerlIO**, i8*, ...) @PerlIO_printf(%struct._PerlIO** %cond, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.13, i64 0, i64 0))
  %69 = load i64, i64* @PL_tmps_ix, align 8
  %70 = load i64, i64* @PL_tmps_floor, align 8
  %cmp63 = icmp sgt i64 %69, %70
  br i1 %cmp63, label %if.then65, label %if.end66

if.then65:                                        ; preds = %cond.end
  call void @Perl_free_tmps()
  br label %if.end66

if.end66:                                         ; preds = %if.then65, %cond.end
  store i32 1, i32* %ret, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %do.end, %if.end66, %if.end13
  br label %do.body67

do.body67:                                        ; preds = %sw.epilog
  %je_prev68 = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 1
  %71 = load %struct.jmpenv*, %struct.jmpenv** %je_prev68, align 8
  store %struct.jmpenv* %71, %struct.jmpenv** @PL_top_env, align 8
  br label %do.end69

do.end69:                                         ; preds = %do.body67
  %72 = load i32, i32* %ret, align 4
  ret i32 %72
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_run_body(i32 %oldscope) #0 {
entry:
  %oldscope.addr = alloca i32, align 4
  store i32 %oldscope, i32* %oldscope.addr, align 4
  %0 = load %struct.op*, %struct.op** @PL_restartop, align 8
  %tobool = icmp ne %struct.op* %0, null
  br i1 %tobool, label %if.end28, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i8, i8* @PL_minus_c, align 1
  %tobool1 = trunc i8 %1 to i1
  br i1 %tobool1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %2 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %tobool3 = icmp ne %struct.gv* %2, null
  br i1 %tobool3, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %if.then2
  %3 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %sv_flags = getelementptr inbounds %struct.gv, %struct.gv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags, align 4
  %and = and i32 %4, 255
  %cmp = icmp eq i32 %and, 9
  br i1 %cmp, label %land.lhs.true4, label %cond.false

land.lhs.true4:                                   ; preds = %land.lhs.true
  %5 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %5, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %6 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %6, i64 0
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 1
  %7 = load %struct.io*, %struct.io** %gp_io, align 8
  %tobool5 = icmp ne %struct.io* %7, null
  br i1 %tobool5, label %land.lhs.true6, label %cond.false

land.lhs.true6:                                   ; preds = %land.lhs.true4
  %8 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %sv_u7 = getelementptr inbounds %struct.gv, %struct.gv* %8, i32 0, i32 3
  %svu_gp8 = bitcast %union.anon.4* %sv_u7 to %struct.gp**
  %9 = load %struct.gp*, %struct.gp** %svu_gp8, align 8
  %add.ptr9 = getelementptr inbounds %struct.gp, %struct.gp* %9, i64 0
  %gp_io10 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr9, i32 0, i32 1
  %10 = load %struct.io*, %struct.io** %gp_io10, align 8
  %sv_any = getelementptr inbounds %struct.io, %struct.io* %10, i32 0, i32 0
  %11 = load %struct.xpvio*, %struct.xpvio** %sv_any, align 8
  %xio_ofp = getelementptr inbounds %struct.xpvio, %struct.xpvio* %11, i32 0, i32 5
  %12 = load %struct._PerlIO**, %struct._PerlIO*** %xio_ofp, align 8
  %tobool11 = icmp ne %struct._PerlIO** %12, null
  br i1 %tobool11, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true6
  %13 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %sv_u12 = getelementptr inbounds %struct.gv, %struct.gv* %13, i32 0, i32 3
  %svu_gp13 = bitcast %union.anon.4* %sv_u12 to %struct.gp**
  %14 = load %struct.gp*, %struct.gp** %svu_gp13, align 8
  %add.ptr14 = getelementptr inbounds %struct.gp, %struct.gp* %14, i64 0
  %gp_io15 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr14, i32 0, i32 1
  %15 = load %struct.io*, %struct.io** %gp_io15, align 8
  %sv_any16 = getelementptr inbounds %struct.io, %struct.io* %15, i32 0, i32 0
  %16 = load %struct.xpvio*, %struct.xpvio** %sv_any16, align 8
  %xio_ofp17 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %16, i32 0, i32 5
  %17 = load %struct._PerlIO**, %struct._PerlIO*** %xio_ofp17, align 8
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true6, %land.lhs.true4, %land.lhs.true, %if.then2
  %call = call %struct._PerlIO** @Perl_PerlIO_stderr()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._PerlIO** [ %17, %cond.true ], [ %call, %cond.false ]
  %18 = load i8*, i8** @PL_origfilename, align 8
  %call18 = call i32 (%struct._PerlIO**, i8*, ...) @PerlIO_printf(%struct._PerlIO** %cond, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.113, i64 0, i64 0), i8* %18)
  call void @Perl_my_exit(i32 0)
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then
  %19 = load i32, i32* @PL_perldb, align 4
  %and19 = and i32 %19, 32
  %tobool20 = icmp ne i32 %and19, 0
  br i1 %tobool20, label %land.lhs.true21, label %if.end24

land.lhs.true21:                                  ; preds = %if.end
  %20 = load %struct.sv*, %struct.sv** @PL_DBsingle, align 8
  %tobool22 = icmp ne %struct.sv* %20, null
  br i1 %tobool22, label %if.then23, label %if.end24

if.then23:                                        ; preds = %land.lhs.true21
  store i64 1, i64* getelementptr inbounds ([3 x i64], [3 x i64]* @PL_DBcontrol, i64 0, i64 0), align 16
  br label %if.end24

if.end24:                                         ; preds = %if.then23, %land.lhs.true21, %if.end
  %21 = load %struct.av*, %struct.av** @PL_initav, align 8
  %tobool25 = icmp ne %struct.av* %21, null
  br i1 %tobool25, label %if.then26, label %if.end27

if.then26:                                        ; preds = %if.end24
  store i32 3, i32* @PL_phase, align 4
  %22 = load i32, i32* %oldscope.addr, align 4
  %23 = load %struct.av*, %struct.av** @PL_initav, align 8
  call void @Perl_call_list(i32 %22, %struct.av* %23)
  br label %if.end27

if.end27:                                         ; preds = %if.then26, %if.end24
  br label %if.end28

if.end28:                                         ; preds = %if.end27, %entry
  store i32 4, i32* @PL_phase, align 4
  %24 = load %struct.op*, %struct.op** @PL_restartop, align 8
  %tobool29 = icmp ne %struct.op* %24, null
  br i1 %tobool29, label %if.then30, label %if.else

if.then30:                                        ; preds = %if.end28
  store %struct.jmpenv* null, %struct.jmpenv** @PL_restartjmpenv, align 8
  %25 = load %struct.op*, %struct.op** @PL_restartop, align 8
  store %struct.op* %25, %struct.op** @PL_op, align 8
  store %struct.op* null, %struct.op** @PL_restartop, align 8
  %26 = load i32 ()*, i32 ()** @PL_runops, align 8
  %call31 = call i32 %26()
  br label %if.end37

if.else:                                          ; preds = %if.end28
  %27 = load %struct.op*, %struct.op** @PL_main_start, align 8
  %tobool32 = icmp ne %struct.op* %27, null
  br i1 %tobool32, label %if.then33, label %if.end36

if.then33:                                        ; preds = %if.else
  %28 = load %struct.cv*, %struct.cv** @PL_main_cv, align 8
  %call34 = call i32* @S_CvDEPTHp(%struct.cv* %28)
  store i32 1, i32* %call34, align 4
  %29 = load %struct.op*, %struct.op** @PL_main_start, align 8
  store %struct.op* %29, %struct.op** @PL_op, align 8
  %30 = load i32 ()*, i32 ()** @PL_runops, align 8
  %call35 = call i32 %30()
  br label %if.end36

if.end36:                                         ; preds = %if.then33, %if.else
  br label %if.end37

if.end37:                                         ; preds = %if.end36, %if.then30
  call void @Perl_my_exit(i32 0)
  ret void
}

declare dso_local void @Perl_dounwind(i32) #2

declare dso_local void @Perl_croak_popstack() #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl_get_sv(i8* %name, i32 %flags) #0 {
entry:
  %retval = alloca %struct.sv*, align 8
  %name.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %gv = alloca %struct.gv*, align 8
  store i8* %name, i8** %name.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i8*, i8** %name.addr, align 8
  %1 = load i32, i32* %flags.addr, align 4
  %call = call %struct.gv* @Perl_gv_fetchpv(i8* %0, i32 %1, i32 3)
  store %struct.gv* %call, %struct.gv** %gv, align 8
  %2 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool = icmp ne %struct.gv* %2, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %3, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %4 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %4, i64 0
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 0
  %5 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  store %struct.sv* %5, %struct.sv** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  store %struct.sv* null, %struct.sv** %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load %struct.sv*, %struct.sv** %retval, align 8
  ret %struct.sv* %6
}

declare dso_local %struct.gv* @Perl_gv_fetchpv(i8*, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.av* @Perl_get_av(i8* %name, i32 %flags) #0 {
entry:
  %retval = alloca %struct.av*, align 8
  %name.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %gv = alloca %struct.gv*, align 8
  store i8* %name, i8** %name.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i8*, i8** %name.addr, align 8
  %1 = load i32, i32* %flags.addr, align 4
  %call = call %struct.gv* @Perl_gv_fetchpv(i8* %0, i32 %1, i32 11)
  store %struct.gv* %call, %struct.gv** %gv, align 8
  %2 = load i32, i32* %flags.addr, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %3, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %4 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %4, i64 0
  %gp_av = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 6
  %5 = load %struct.av*, %struct.av** %gp_av, align 8
  %tobool1 = icmp ne %struct.av* %5, null
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %6 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u2 = getelementptr inbounds %struct.gv, %struct.gv* %6, i32 0, i32 3
  %svu_gp3 = bitcast %union.anon.4* %sv_u2 to %struct.gp**
  %7 = load %struct.gp*, %struct.gp** %svu_gp3, align 8
  %add.ptr4 = getelementptr inbounds %struct.gp, %struct.gp* %7, i64 0
  %gp_av5 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr4, i32 0, i32 6
  %8 = load %struct.av*, %struct.av** %gp_av5, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %9 = load %struct.gv*, %struct.gv** %gv, align 8
  %call6 = call %struct.gv* @Perl_gv_add_by_type(%struct.gv* %9, i32 11)
  %sv_u7 = getelementptr inbounds %struct.gv, %struct.gv* %call6, i32 0, i32 3
  %svu_gp8 = bitcast %union.anon.4* %sv_u7 to %struct.gp**
  %10 = load %struct.gp*, %struct.gp** %svu_gp8, align 8
  %add.ptr9 = getelementptr inbounds %struct.gp, %struct.gp* %10, i64 0
  %gp_av10 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr9, i32 0, i32 6
  %11 = load %struct.av*, %struct.av** %gp_av10, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.av* [ %8, %cond.true ], [ %11, %cond.false ]
  store %struct.av* %cond, %struct.av** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %12 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool11 = icmp ne %struct.gv* %12, null
  br i1 %tobool11, label %if.then12, label %if.end17

if.then12:                                        ; preds = %if.end
  %13 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u13 = getelementptr inbounds %struct.gv, %struct.gv* %13, i32 0, i32 3
  %svu_gp14 = bitcast %union.anon.4* %sv_u13 to %struct.gp**
  %14 = load %struct.gp*, %struct.gp** %svu_gp14, align 8
  %add.ptr15 = getelementptr inbounds %struct.gp, %struct.gp* %14, i64 0
  %gp_av16 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr15, i32 0, i32 6
  %15 = load %struct.av*, %struct.av** %gp_av16, align 8
  store %struct.av* %15, %struct.av** %retval, align 8
  br label %return

if.end17:                                         ; preds = %if.end
  store %struct.av* null, %struct.av** %retval, align 8
  br label %return

return:                                           ; preds = %if.end17, %if.then12, %cond.end
  %16 = load %struct.av*, %struct.av** %retval, align 8
  ret %struct.av* %16
}

declare dso_local %struct.gv* @Perl_gv_add_by_type(%struct.gv*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.hv* @Perl_get_hv(i8* %name, i32 %flags) #0 {
entry:
  %retval = alloca %struct.hv*, align 8
  %name.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %gv = alloca %struct.gv*, align 8
  store i8* %name, i8** %name.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i8*, i8** %name.addr, align 8
  %1 = load i32, i32* %flags.addr, align 4
  %call = call %struct.gv* @Perl_gv_fetchpv(i8* %0, i32 %1, i32 12)
  store %struct.gv* %call, %struct.gv** %gv, align 8
  %2 = load i32, i32* %flags.addr, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %3, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %4 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %4, i64 0
  %gp_hv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 5
  %5 = load %struct.hv*, %struct.hv** %gp_hv, align 8
  %tobool1 = icmp ne %struct.hv* %5, null
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %6 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u2 = getelementptr inbounds %struct.gv, %struct.gv* %6, i32 0, i32 3
  %svu_gp3 = bitcast %union.anon.4* %sv_u2 to %struct.gp**
  %7 = load %struct.gp*, %struct.gp** %svu_gp3, align 8
  %add.ptr4 = getelementptr inbounds %struct.gp, %struct.gp* %7, i64 0
  %gp_hv5 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr4, i32 0, i32 5
  %8 = load %struct.hv*, %struct.hv** %gp_hv5, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %9 = load %struct.gv*, %struct.gv** %gv, align 8
  %call6 = call %struct.gv* @Perl_gv_add_by_type(%struct.gv* %9, i32 12)
  %sv_u7 = getelementptr inbounds %struct.gv, %struct.gv* %call6, i32 0, i32 3
  %svu_gp8 = bitcast %union.anon.4* %sv_u7 to %struct.gp**
  %10 = load %struct.gp*, %struct.gp** %svu_gp8, align 8
  %add.ptr9 = getelementptr inbounds %struct.gp, %struct.gp* %10, i64 0
  %gp_hv10 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr9, i32 0, i32 5
  %11 = load %struct.hv*, %struct.hv** %gp_hv10, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.hv* [ %8, %cond.true ], [ %11, %cond.false ]
  store %struct.hv* %cond, %struct.hv** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %12 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool11 = icmp ne %struct.gv* %12, null
  br i1 %tobool11, label %if.then12, label %if.end17

if.then12:                                        ; preds = %if.end
  %13 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u13 = getelementptr inbounds %struct.gv, %struct.gv* %13, i32 0, i32 3
  %svu_gp14 = bitcast %union.anon.4* %sv_u13 to %struct.gp**
  %14 = load %struct.gp*, %struct.gp** %svu_gp14, align 8
  %add.ptr15 = getelementptr inbounds %struct.gp, %struct.gp* %14, i64 0
  %gp_hv16 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr15, i32 0, i32 5
  %15 = load %struct.hv*, %struct.hv** %gp_hv16, align 8
  store %struct.hv* %15, %struct.hv** %retval, align 8
  br label %return

if.end17:                                         ; preds = %if.end
  store %struct.hv* null, %struct.hv** %retval, align 8
  br label %return

return:                                           ; preds = %if.end17, %if.then12, %cond.end
  %16 = load %struct.hv*, %struct.hv** %retval, align 8
  ret %struct.hv* %16
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.cv* @Perl_get_cvn_flags(i8* %name, i64 %len, i32 %flags) #0 {
entry:
  %retval = alloca %struct.cv*, align 8
  %name.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  %gv = alloca %struct.gv*, align 8
  store i8* %name, i8** %name.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i8*, i8** %name.addr, align 8
  %1 = load i64, i64* %len.addr, align 8
  %2 = load i32, i32* %flags.addr, align 4
  %call = call %struct.gv* @Perl_gv_fetchpvn_flags(i8* %0, i64 %1, i32 %2, i32 13)
  store %struct.gv* %call, %struct.gv** %gv, align 8
  %3 = load i32, i32* %flags.addr, align 4
  %and = and i32 %3, -536874209
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %4, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %5 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %5, i64 0
  %gp_cvgen = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 3
  %6 = load i32, i32* %gp_cvgen, align 8
  %tobool1 = icmp ne i32 %6, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  br i1 false, label %if.end, label %if.then

cond.false:                                       ; preds = %land.lhs.true
  %7 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u2 = getelementptr inbounds %struct.gv, %struct.gv* %7, i32 0, i32 3
  %svu_gp3 = bitcast %union.anon.4* %sv_u2 to %struct.gp**
  %8 = load %struct.gp*, %struct.gp** %svu_gp3, align 8
  %add.ptr4 = getelementptr inbounds %struct.gp, %struct.gp* %8, i64 0
  %gp_cv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr4, i32 0, i32 2
  %9 = load %struct.cv*, %struct.cv** %gp_cv, align 8
  %tobool5 = icmp ne %struct.cv* %9, null
  br i1 %tobool5, label %if.end, label %if.then

if.then:                                          ; preds = %cond.false, %cond.true
  %10 = load %struct.gv*, %struct.gv** %gv, align 8
  %call6 = call %struct.cv* @Perl_newSTUB(%struct.gv* %10, i1 zeroext false)
  store %struct.cv* %call6, %struct.cv** %retval, align 8
  br label %return

if.end:                                           ; preds = %cond.false, %cond.true, %entry
  %11 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool7 = icmp ne %struct.gv* %11, null
  br i1 %tobool7, label %if.then8, label %if.end20

if.then8:                                         ; preds = %if.end
  %12 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u9 = getelementptr inbounds %struct.gv, %struct.gv* %12, i32 0, i32 3
  %svu_gp10 = bitcast %union.anon.4* %sv_u9 to %struct.gp**
  %13 = load %struct.gp*, %struct.gp** %svu_gp10, align 8
  %add.ptr11 = getelementptr inbounds %struct.gp, %struct.gp* %13, i64 0
  %gp_cvgen12 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr11, i32 0, i32 3
  %14 = load i32, i32* %gp_cvgen12, align 8
  %tobool13 = icmp ne i32 %14, 0
  br i1 %tobool13, label %cond.true14, label %cond.false15

cond.true14:                                      ; preds = %if.then8
  br label %cond.end

cond.false15:                                     ; preds = %if.then8
  %15 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u16 = getelementptr inbounds %struct.gv, %struct.gv* %15, i32 0, i32 3
  %svu_gp17 = bitcast %union.anon.4* %sv_u16 to %struct.gp**
  %16 = load %struct.gp*, %struct.gp** %svu_gp17, align 8
  %add.ptr18 = getelementptr inbounds %struct.gp, %struct.gp* %16, i64 0
  %gp_cv19 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr18, i32 0, i32 2
  %17 = load %struct.cv*, %struct.cv** %gp_cv19, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false15, %cond.true14
  %cond = phi %struct.cv* [ null, %cond.true14 ], [ %17, %cond.false15 ]
  store %struct.cv* %cond, %struct.cv** %retval, align 8
  br label %return

if.end20:                                         ; preds = %if.end
  store %struct.cv* null, %struct.cv** %retval, align 8
  br label %return

return:                                           ; preds = %if.end20, %cond.end, %if.then
  %18 = load %struct.cv*, %struct.cv** %retval, align 8
  ret %struct.cv* %18
}

declare dso_local %struct.gv* @Perl_gv_fetchpvn_flags(i8*, i64, i32, i32) #2

declare dso_local %struct.cv* @Perl_newSTUB(%struct.gv*, i1 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.cv* @Perl_get_cv(i8* %name, i32 %flags) #0 {
entry:
  %name.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  store i8* %name, i8** %name.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i8*, i8** %name.addr, align 8
  %1 = load i8*, i8** %name.addr, align 8
  %call = call i64 @strlen(i8* %1) #11
  %2 = load i32, i32* %flags.addr, align 4
  %call1 = call %struct.cv* @Perl_get_cvn_flags(i8* %0, i64 %call, i32 %2)
  ret %struct.cv* %call1
}

; Function Attrs: nounwind readonly
declare dso_local i64 @strlen(i8*) #5

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @Perl_call_argv(i8* %sub_name, i32 %flags, i8** %argv) #0 {
entry:
  %sub_name.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %sp = alloca %struct.sv**, align 8
  %mark_stack_entry = alloca i32*, align 8
  store i8* %sub_name, i8** %sub_name.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %1 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %1, i32 1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  store i32* %incdec.ptr, i32** %mark_stack_entry, align 8
  %2 = load i32*, i32** @PL_markstack_max, align 8
  %cmp = icmp eq i32* %incdec.ptr, %2
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %if.then, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  %call = call i32* @Perl_markstack_grow()
  store i32* %call, i32** %mark_stack_entry, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %4 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %3 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %4 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %conv = trunc i64 %sub.ptr.div to i32
  %5 = load i32*, i32** %mark_stack_entry, align 8
  store i32 %conv, i32* %5, align 4
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %while.cond

while.cond:                                       ; preds = %do.end18, %do.end
  %6 = load i8**, i8*** %argv.addr, align 8
  %7 = load i8*, i8** %6, align 8
  %tobool = icmp ne i8* %7, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  br label %do.body1

do.body1:                                         ; preds = %while.body
  br label %do.body2

do.body2:                                         ; preds = %do.body1
  %8 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast3 = ptrtoint %struct.sv** %8 to i64
  %sub.ptr.rhs.cast4 = ptrtoint %struct.sv** %9 to i64
  %sub.ptr.sub5 = sub i64 %sub.ptr.lhs.cast3, %sub.ptr.rhs.cast4
  %sub.ptr.div6 = sdiv exact i64 %sub.ptr.sub5, 8
  %cmp7 = icmp slt i64 %sub.ptr.div6, 1
  br i1 %cmp7, label %cond.true9, label %cond.false10

cond.true9:                                       ; preds = %do.body2
  br i1 true, label %if.then11, label %if.end13

cond.false10:                                     ; preds = %do.body2
  br i1 false, label %if.then11, label %if.end13

if.then11:                                        ; preds = %cond.false10, %cond.true9
  %10 = load %struct.sv**, %struct.sv*** %sp, align 8
  %11 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call12 = call %struct.sv** @Perl_stack_grow(%struct.sv** %10, %struct.sv** %11, i64 1)
  store %struct.sv** %call12, %struct.sv*** %sp, align 8
  %12 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end13

if.end13:                                         ; preds = %if.then11, %cond.false10, %cond.true9
  br label %do.end14

do.end14:                                         ; preds = %if.end13
  %13 = load i8**, i8*** %argv.addr, align 8
  %14 = load i8*, i8** %13, align 8
  %call15 = call %struct.sv* @Perl_newSVpv(i8* %14, i64 0)
  %call16 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call15)
  %15 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr17 = getelementptr inbounds %struct.sv*, %struct.sv** %15, i32 1
  store %struct.sv** %incdec.ptr17, %struct.sv*** %sp, align 8
  store %struct.sv* %call16, %struct.sv** %incdec.ptr17, align 8
  br label %do.end18

do.end18:                                         ; preds = %do.end14
  %16 = load i8**, i8*** %argv.addr, align 8
  %incdec.ptr19 = getelementptr inbounds i8*, i8** %16, i32 1
  store i8** %incdec.ptr19, i8*** %argv.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %17 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %17, %struct.sv*** @PL_stack_sp, align 8
  %18 = load i8*, i8** %sub_name.addr, align 8
  %19 = load i32, i32* %flags.addr, align 4
  %call20 = call i32 @Perl_call_pv(i8* %18, i32 %19)
  ret i32 %call20
}

declare dso_local i32* @Perl_markstack_grow() #2

declare dso_local %struct.sv** @Perl_stack_grow(%struct.sv**, %struct.sv**, i64) #2

declare dso_local %struct.sv* @Perl_sv_2mortal(%struct.sv*) #2

declare dso_local %struct.sv* @Perl_newSVpv(i8*, i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @Perl_call_pv(i8* %sub_name, i32 %flags) #0 {
entry:
  %sub_name.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  store i8* %sub_name, i8** %sub_name.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i8*, i8** %sub_name.addr, align 8
  %call = call %struct.cv* @Perl_get_cv(i8* %0, i32 1)
  %1 = bitcast %struct.cv* %call to i8*
  %2 = bitcast i8* %1 to %struct.sv*
  %3 = load i32, i32* %flags.addr, align 4
  %call1 = call i32 @Perl_call_sv(%struct.sv* %2, i32 %3)
  ret i32 %call1
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @Perl_call_sv(%struct.sv* %sv, i32 %flags) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %flags.addr = alloca i32, align 4
  %sp = alloca %struct.sv**, align 8
  %myop = alloca %struct.logop, align 8
  %method_op = alloca %struct.methop, align 8
  %oldmark = alloca i32, align 4
  %retval1 = alloca i32, align 4
  %oldscope = alloca i32, align 4
  %oldcatch = alloca i8, align 1
  %ret = alloca i32, align 4
  %oldop = alloca %struct.op*, align 8
  %cur_env = alloca %struct.jmpenv, align 8
  %svp = alloca %struct.sv**, align 8
  %errsv = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store volatile i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  store volatile i32 0, i32* %retval1, align 4
  %1 = load %struct.jmpenv*, %struct.jmpenv** @PL_top_env, align 8
  %je_mustcatch = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %1, i32 0, i32 3
  %2 = load i8, i8* %je_mustcatch, align 4
  %tobool = trunc i8 %2 to i1
  %frombool = zext i1 %tobool to i8
  store i8 %frombool, i8* %oldcatch, align 1
  %3 = load %struct.op*, %struct.op** @PL_op, align 8
  store %struct.op* %3, %struct.op** %oldop, align 8
  %4 = load volatile i32, i32* %flags.addr, align 4
  %and = and i32 %4, 4
  %tobool2 = icmp ne i32 %and, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @Perl_push_scope()
  call void @Perl_save_strlen(i64* @PL_tmps_floor)
  %5 = load i64, i64* @PL_tmps_ix, align 8
  store i64 %5, i64* @PL_tmps_floor, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load volatile i32, i32* %flags.addr, align 4
  %and3 = and i32 %6, 3
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %if.end6, label %if.then5

if.then5:                                         ; preds = %if.end
  %7 = load volatile i32, i32* %flags.addr, align 4
  %or = or i32 %7, 2
  store volatile i32 %or, i32* %flags.addr, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %if.end
  %8 = bitcast %struct.logop* %myop to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 56, i1 false)
  %9 = load volatile i32, i32* %flags.addr, align 4
  %and7 = and i32 %9, 16
  %tobool8 = icmp ne i32 %and7, 0
  br i1 %tobool8, label %if.end12, label %if.then9

if.then9:                                         ; preds = %if.end6
  %op_flags = getelementptr inbounds %struct.logop, %struct.logop* %myop, i32 0, i32 5
  %10 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %10 to i32
  %or10 = or i32 %conv, 64
  %conv11 = trunc i32 %or10 to i8
  store i8 %conv11, i8* %op_flags, align 2
  br label %if.end12

if.end12:                                         ; preds = %if.then9, %if.end6
  %11 = load volatile i32, i32* %flags.addr, align 4
  %and13 = and i32 %11, 3
  %op_flags14 = getelementptr inbounds %struct.logop, %struct.logop* %myop, i32 0, i32 5
  %12 = load i8, i8* %op_flags14, align 2
  %conv15 = zext i8 %12 to i32
  %or16 = or i32 %conv15, %and13
  %conv17 = trunc i32 %or16 to i8
  store i8 %conv17, i8* %op_flags14, align 2
  %13 = load %struct.op*, %struct.op** @PL_op, align 8
  %14 = bitcast %struct.op* %13 to i8*
  call void @Perl_save_pushptr(i8* %14, i32 18)
  %15 = bitcast %struct.logop* %myop to %struct.op*
  store %struct.op* %15, %struct.op** @PL_op, align 8
  br label %do.body

do.body:                                          ; preds = %if.end12
  %16 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %17 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %16 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %17 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %if.then19, label %if.end20

cond.false:                                       ; preds = %do.body
  br i1 false, label %if.then19, label %if.end20

if.then19:                                        ; preds = %cond.false, %cond.true
  %18 = load %struct.sv**, %struct.sv*** %sp, align 8
  %19 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %call = call %struct.sv** @Perl_stack_grow(%struct.sv** %18, %struct.sv** %19, i64 1)
  store %struct.sv** %call, %struct.sv*** %sp, align 8
  %20 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end20

if.end20:                                         ; preds = %if.then19, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end20
  %21 = load volatile i32, i32* %flags.addr, align 4
  %and21 = and i32 %21, 4096
  %tobool22 = icmp ne i32 %and21, 0
  br i1 %tobool22, label %if.end24, label %if.then23

if.then23:                                        ; preds = %do.end
  %22 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %23 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %23, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv* %22, %struct.sv** %incdec.ptr, align 8
  br label %if.end24

if.end24:                                         ; preds = %if.then23, %do.end
  %24 = load i32*, i32** @PL_markstack_ptr, align 8
  %25 = load i32, i32* %24, align 4
  store i32 %25, i32* %oldmark, align 4
  %26 = load i32, i32* @PL_scopestack_ix, align 4
  store i32 %26, i32* %oldscope, align 4
  %27 = load i32, i32* @PL_perldb, align 4
  %and25 = and i32 %27, 1
  %tobool26 = icmp ne i32 %and25, 0
  br i1 %tobool26, label %land.lhs.true, label %if.end48

land.lhs.true:                                    ; preds = %if.end24
  %28 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %29 = load %struct.hv*, %struct.hv** @PL_debstash, align 8
  %cmp27 = icmp ne %struct.hv* %28, %29
  br i1 %cmp27, label %land.lhs.true29, label %if.end48

land.lhs.true29:                                  ; preds = %land.lhs.true
  %30 = load %struct.cv*, %struct.cv** @PL_DBcv, align 8
  %tobool30 = icmp ne %struct.cv* %30, null
  br i1 %tobool30, label %land.lhs.true33, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true29
  %31 = load %struct.gv*, %struct.gv** @PL_DBsub, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %31, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %32 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %32, i64 0
  %gp_cv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 2
  %33 = load %struct.cv*, %struct.cv** %gp_cv, align 8
  %add.ptr31 = getelementptr inbounds %struct.cv, %struct.cv* %33, i64 0
  store %struct.cv* %add.ptr31, %struct.cv** @PL_DBcv, align 8
  %tobool32 = icmp ne %struct.cv* %add.ptr31, null
  br i1 %tobool32, label %land.lhs.true33, label %if.end48

land.lhs.true33:                                  ; preds = %lor.lhs.false, %land.lhs.true29
  %34 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 2
  %35 = load i32, i32* %sv_flags, align 4
  %and34 = and i32 %35, 255
  %cmp35 = icmp ne i32 %and34, 13
  br i1 %cmp35, label %land.lhs.true41, label %lor.lhs.false37

lor.lhs.false37:                                  ; preds = %land.lhs.true33
  %36 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %37 = bitcast %struct.sv* %36 to %struct.cv*
  %sv_any = getelementptr inbounds %struct.cv, %struct.cv* %37, i32 0, i32 0
  %38 = load %struct.xpvcv*, %struct.xpvcv** %sv_any, align 8
  %39 = bitcast %struct.xpvcv* %38 to i8*
  %40 = bitcast i8* %39 to %struct.xpvcv*
  %xcv_stash = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %40, i32 0, i32 4
  %41 = load %struct.hv*, %struct.hv** %xcv_stash, align 8
  %add.ptr38 = getelementptr inbounds %struct.hv, %struct.hv* %41, i64 0
  %42 = load %struct.hv*, %struct.hv** @PL_debstash, align 8
  %cmp39 = icmp ne %struct.hv* %add.ptr38, %42
  br i1 %cmp39, label %land.lhs.true41, label %if.end48

land.lhs.true41:                                  ; preds = %lor.lhs.false37, %land.lhs.true33
  %43 = load volatile i32, i32* %flags.addr, align 4
  %and42 = and i32 %43, 64
  %tobool43 = icmp ne i32 %and42, 0
  br i1 %tobool43, label %if.end48, label %if.then44

if.then44:                                        ; preds = %land.lhs.true41
  %op_private = getelementptr inbounds %struct.logop, %struct.logop* %myop, i32 0, i32 6
  %44 = load i8, i8* %op_private, align 1
  %conv45 = zext i8 %44 to i32
  %or46 = or i32 %conv45, 64
  %conv47 = trunc i32 %or46 to i8
  store i8 %conv47, i8* %op_private, align 1
  br label %if.end48

if.end48:                                         ; preds = %if.then44, %land.lhs.true41, %lor.lhs.false37, %lor.lhs.false, %land.lhs.true, %if.end24
  %45 = load volatile i32, i32* %flags.addr, align 4
  %and49 = and i32 %45, 4224
  %tobool50 = icmp ne i32 %and49, 0
  br i1 %tobool50, label %if.then51, label %if.end66

if.then51:                                        ; preds = %if.end48
  %46 = bitcast %struct.methop* %method_op to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %46, i8 0, i64 56, i1 false)
  %47 = bitcast %struct.logop* %myop to %struct.op*
  %op_next = getelementptr inbounds %struct.methop, %struct.methop* %method_op, i32 0, i32 0
  store %struct.op* %47, %struct.op** %op_next, align 8
  %48 = bitcast %struct.methop* %method_op to %struct.op*
  store %struct.op* %48, %struct.op** @PL_op, align 8
  %49 = load volatile i32, i32* %flags.addr, align 4
  %and52 = and i32 %49, 4096
  %tobool53 = icmp ne i32 %and52, 0
  br i1 %tobool53, label %if.then54, label %if.else

if.then54:                                        ; preds = %if.then51
  %50 = load %struct.op* ()*, %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 210), align 8
  %op_ppaddr = getelementptr inbounds %struct.methop, %struct.methop* %method_op, i32 0, i32 2
  store %struct.op* ()* %50, %struct.op* ()** %op_ppaddr, align 8
  %op_type = getelementptr inbounds %struct.methop, %struct.methop* %method_op, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, -512
  %bf.set = or i16 %bf.clear, 210
  store i16 %bf.set, i16* %op_type, align 8
  %51 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %op_u = getelementptr inbounds %struct.methop, %struct.methop* %method_op, i32 0, i32 7
  %op_meth_sv = bitcast %union.anon.42* %op_u to %struct.sv**
  store %struct.sv* %51, %struct.sv** %op_meth_sv, align 8
  br label %if.end60

if.else:                                          ; preds = %if.then51
  %52 = load %struct.op* ()*, %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 184), align 8
  %op_ppaddr55 = getelementptr inbounds %struct.methop, %struct.methop* %method_op, i32 0, i32 2
  store %struct.op* ()* %52, %struct.op* ()** %op_ppaddr55, align 8
  %op_type56 = getelementptr inbounds %struct.methop, %struct.methop* %method_op, i32 0, i32 4
  %bf.load57 = load i16, i16* %op_type56, align 8
  %bf.clear58 = and i16 %bf.load57, -512
  %bf.set59 = or i16 %bf.clear58, 184
  store i16 %bf.set59, i16* %op_type56, align 8
  br label %if.end60

if.end60:                                         ; preds = %if.else, %if.then54
  %53 = load %struct.op* ()*, %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 185), align 8
  %op_ppaddr61 = getelementptr inbounds %struct.logop, %struct.logop* %myop, i32 0, i32 2
  store %struct.op* ()* %53, %struct.op* ()** %op_ppaddr61, align 8
  %op_type62 = getelementptr inbounds %struct.logop, %struct.logop* %myop, i32 0, i32 4
  %bf.load63 = load i16, i16* %op_type62, align 8
  %bf.clear64 = and i16 %bf.load63, -512
  %bf.set65 = or i16 %bf.clear64, 185
  store i16 %bf.set65, i16* %op_type62, align 8
  br label %if.end66

if.end66:                                         ; preds = %if.end60, %if.end48
  %54 = load volatile i32, i32* %flags.addr, align 4
  %and67 = and i32 %54, 8
  %tobool68 = icmp ne i32 %and67, 0
  br i1 %tobool68, label %if.else93, label %if.then69

if.then69:                                        ; preds = %if.end66
  br label %do.body70

do.body70:                                        ; preds = %if.then69
  %55 = load %struct.jmpenv*, %struct.jmpenv** @PL_top_env, align 8
  %je_mustcatch71 = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %55, i32 0, i32 3
  store i8 1, i8* %je_mustcatch71, align 4
  br label %do.end72

do.end72:                                         ; preds = %do.body70
  %56 = load %struct.op*, %struct.op** @PL_op, align 8
  %57 = bitcast %struct.logop* %myop to %struct.op*
  %cmp73 = icmp eq %struct.op* %56, %57
  br i1 %cmp73, label %if.then75, label %if.end77

if.then75:                                        ; preds = %do.end72
  %58 = load %struct.op* ()*, %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 185), align 8
  %call76 = call %struct.op* %58()
  store %struct.op* %call76, %struct.op** @PL_op, align 8
  br label %if.end77

if.end77:                                         ; preds = %if.then75, %do.end72
  %59 = load %struct.op*, %struct.op** @PL_op, align 8
  %tobool78 = icmp ne %struct.op* %59, null
  br i1 %tobool78, label %if.then79, label %if.end81

if.then79:                                        ; preds = %if.end77
  %60 = load i32 ()*, i32 ()** @PL_runops, align 8
  %call80 = call i32 %60()
  br label %if.end81

if.end81:                                         ; preds = %if.then79, %if.end77
  %61 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %62 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %63 = load i32, i32* %oldmark, align 4
  %idx.ext = sext i32 %63 to i64
  %add.ptr82 = getelementptr inbounds %struct.sv*, %struct.sv** %62, i64 %idx.ext
  %sub.ptr.lhs.cast83 = ptrtoint %struct.sv** %61 to i64
  %sub.ptr.rhs.cast84 = ptrtoint %struct.sv** %add.ptr82 to i64
  %sub.ptr.sub85 = sub i64 %sub.ptr.lhs.cast83, %sub.ptr.rhs.cast84
  %sub.ptr.div86 = sdiv exact i64 %sub.ptr.sub85, 8
  %conv87 = trunc i64 %sub.ptr.div86 to i32
  store volatile i32 %conv87, i32* %retval1, align 4
  br label %do.body88

do.body88:                                        ; preds = %if.end81
  %64 = load i8, i8* %oldcatch, align 1
  %tobool89 = trunc i8 %64 to i1
  %65 = load %struct.jmpenv*, %struct.jmpenv** @PL_top_env, align 8
  %je_mustcatch90 = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %65, i32 0, i32 3
  %frombool91 = zext i1 %tobool89 to i8
  store i8 %frombool91, i8* %je_mustcatch90, align 4
  br label %do.end92

do.end92:                                         ; preds = %do.body88
  br label %if.end183

if.else93:                                        ; preds = %if.end66
  %66 = bitcast %struct.logop* %myop to %struct.op*
  %op_other = getelementptr inbounds %struct.logop, %struct.logop* %myop, i32 0, i32 8
  store %struct.op* %66, %struct.op** %op_other, align 8
  %67 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr94 = getelementptr inbounds i32, i32* %67, i32 -1
  store i32* %incdec.ptr94, i32** @PL_markstack_ptr, align 8
  %68 = load volatile i32, i32* %flags.addr, align 4
  %or95 = or i32 %68, 256
  %call96 = call %struct.context* @Perl_create_eval_scope(i32 %or95)
  %69 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr97 = getelementptr inbounds i32, i32* %69, i32 1
  store i32* %incdec.ptr97, i32** @PL_markstack_ptr, align 8
  br label %do.body98

do.body98:                                        ; preds = %if.else93
  %70 = load %struct.jmpenv*, %struct.jmpenv** @PL_top_env, align 8
  %je_prev = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 1
  store %struct.jmpenv* %70, %struct.jmpenv** %je_prev, align 8
  %je_buf = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 0
  %arraydecay = getelementptr inbounds [1 x %struct.__jmp_buf_tag], [1 x %struct.__jmp_buf_tag]* %je_buf, i64 0, i64 0
  %call99 = call i32 @__sigsetjmp(%struct.__jmp_buf_tag* %arraydecay, i32 0) #9
  %je_ret = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 2
  store i32 %call99, i32* %je_ret, align 8
  store %struct.jmpenv* %cur_env, %struct.jmpenv** @PL_top_env, align 8
  %je_mustcatch100 = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 3
  store i8 0, i8* %je_mustcatch100, align 4
  %je_ret101 = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 2
  %71 = load i32, i32* %je_ret101, align 8
  store i32 %71, i32* %ret, align 4
  br label %do.end102

do.end102:                                        ; preds = %do.body98
  %72 = load i32, i32* %ret, align 4
  switch i32 %72, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb149
    i32 2, label %sw.bb150
    i32 3, label %sw.bb163
  ]

sw.bb:                                            ; preds = %do.end102
  br label %redo_body

redo_body:                                        ; preds = %if.then165, %sw.bb
  %73 = load %struct.op*, %struct.op** @PL_op, align 8
  %74 = bitcast %struct.logop* %myop to %struct.op*
  %cmp103 = icmp eq %struct.op* %73, %74
  br i1 %cmp103, label %if.then105, label %if.end107

if.then105:                                       ; preds = %redo_body
  %75 = load %struct.op* ()*, %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 185), align 8
  %call106 = call %struct.op* %75()
  store %struct.op* %call106, %struct.op** @PL_op, align 8
  br label %if.end107

if.end107:                                        ; preds = %if.then105, %redo_body
  %76 = load %struct.op*, %struct.op** @PL_op, align 8
  %tobool108 = icmp ne %struct.op* %76, null
  br i1 %tobool108, label %if.then109, label %if.end111

if.then109:                                       ; preds = %if.end107
  %77 = load i32 ()*, i32 ()** @PL_runops, align 8
  %call110 = call i32 %77()
  br label %if.end111

if.end111:                                        ; preds = %if.then109, %if.end107
  %78 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %79 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %80 = load i32, i32* %oldmark, align 4
  %idx.ext112 = sext i32 %80 to i64
  %add.ptr113 = getelementptr inbounds %struct.sv*, %struct.sv** %79, i64 %idx.ext112
  %sub.ptr.lhs.cast114 = ptrtoint %struct.sv** %78 to i64
  %sub.ptr.rhs.cast115 = ptrtoint %struct.sv** %add.ptr113 to i64
  %sub.ptr.sub116 = sub i64 %sub.ptr.lhs.cast114, %sub.ptr.rhs.cast115
  %sub.ptr.div117 = sdiv exact i64 %sub.ptr.sub116, 8
  %conv118 = trunc i64 %sub.ptr.div117 to i32
  store volatile i32 %conv118, i32* %retval1, align 4
  %81 = load volatile i32, i32* %flags.addr, align 4
  %and119 = and i32 %81, 32
  %tobool120 = icmp ne i32 %and119, 0
  br i1 %tobool120, label %if.end148, label %if.then121

if.then121:                                       ; preds = %if.end111
  br label %do.body122

do.body122:                                       ; preds = %if.then121
  %82 = load %struct.gv*, %struct.gv** @PL_errgv, align 8
  %sv_u123 = getelementptr inbounds %struct.gv, %struct.gv* %82, i32 0, i32 3
  %svu_gp124 = bitcast %union.anon.4* %sv_u123 to %struct.gp**
  %83 = load %struct.gp*, %struct.gp** %svu_gp124, align 8
  %add.ptr125 = getelementptr inbounds %struct.gp, %struct.gp* %83, i64 0
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr125, i32 0, i32 0
  store %struct.sv** %gp_sv, %struct.sv*** %svp, align 8
  %84 = load %struct.sv**, %struct.sv*** %svp, align 8
  %85 = load %struct.sv*, %struct.sv** %84, align 8
  %tobool126 = icmp ne %struct.sv* %85, null
  br i1 %tobool126, label %if.else128, label %if.then127

if.then127:                                       ; preds = %do.body122
  br label %clresv_newemptypv

if.else128:                                       ; preds = %do.body122
  %86 = load %struct.sv**, %struct.sv*** %svp, align 8
  %87 = load %struct.sv*, %struct.sv** %86, align 8
  %sv_flags129 = getelementptr inbounds %struct.sv, %struct.sv* %87, i32 0, i32 2
  %88 = load i32, i32* %sv_flags129, align 4
  %and130 = and i32 %88, 134283264
  %tobool131 = icmp ne i32 %and130, 0
  br i1 %tobool131, label %if.then132, label %if.else134

if.then132:                                       ; preds = %if.else128
  %89 = load %struct.sv**, %struct.sv*** %svp, align 8
  %90 = load %struct.sv*, %struct.sv** %89, align 8
  %91 = bitcast %struct.sv* %90 to i8*
  %92 = bitcast i8* %91 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %92)
  br label %clresv_newemptypv

clresv_newemptypv:                                ; preds = %if.then132, %if.then127
  %call133 = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), i64 0)
  %93 = load %struct.sv**, %struct.sv*** %svp, align 8
  store %struct.sv* %call133, %struct.sv** %93, align 8
  br label %if.end145

if.else134:                                       ; preds = %if.else128
  %94 = load %struct.sv**, %struct.sv*** %svp, align 8
  %95 = load %struct.sv*, %struct.sv** %94, align 8
  store %struct.sv* %95, %struct.sv** %errsv, align 8
  %96 = load %struct.sv*, %struct.sv** %errsv, align 8
  call void @Perl_sv_setpvn(%struct.sv* %96, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), i64 0)
  %97 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_flags135 = getelementptr inbounds %struct.sv, %struct.sv* %97, i32 0, i32 2
  %98 = load i32, i32* %sv_flags135, align 4
  %and136 = and i32 %98, 1610547455
  store i32 %and136, i32* %sv_flags135, align 4
  %99 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_flags137 = getelementptr inbounds %struct.sv, %struct.sv* %99, i32 0, i32 2
  %100 = load i32, i32* %sv_flags137, align 4
  %or138 = or i32 %100, 17408
  store i32 %or138, i32* %sv_flags137, align 4
  %101 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_flags139 = getelementptr inbounds %struct.sv, %struct.sv* %101, i32 0, i32 2
  %102 = load i32, i32* %sv_flags139, align 4
  %and140 = and i32 %102, 14680064
  %tobool141 = icmp ne i32 %and140, 0
  br i1 %tobool141, label %if.then142, label %if.end144

if.then142:                                       ; preds = %if.else134
  %103 = load %struct.sv*, %struct.sv** %errsv, align 8
  %call143 = call i32 @Perl_mg_free(%struct.sv* %103)
  br label %if.end144

if.end144:                                        ; preds = %if.then142, %if.else134
  br label %if.end145

if.end145:                                        ; preds = %if.end144, %clresv_newemptypv
  br label %if.end146

if.end146:                                        ; preds = %if.end145
  br label %do.end147

do.end147:                                        ; preds = %if.end146
  br label %if.end148

if.end148:                                        ; preds = %do.end147, %if.end111
  br label %sw.epilog

sw.bb149:                                         ; preds = %do.end102
  store i32 1, i32* @PL_statusvalue, align 4
  store i32 1, i32* @PL_statusvalue_posix, align 4
  br label %sw.bb150

sw.bb150:                                         ; preds = %do.end102, %sw.bb149
  %104 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %105 = load %struct.hv*, %struct.hv** @PL_defstash, align 8
  %cmp151 = icmp ne %struct.hv* %104, %105
  br i1 %cmp151, label %if.then153, label %if.end155

if.then153:                                       ; preds = %sw.bb150
  %106 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %107 = bitcast %struct.hv* %106 to i8*
  %108 = bitcast i8* %107 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %108)
  %109 = load %struct.hv*, %struct.hv** @PL_defstash, align 8
  %110 = bitcast %struct.hv* %109 to i8*
  %111 = bitcast i8* %110 to %struct.sv*
  %call154 = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %111)
  %112 = bitcast %struct.sv* %call154 to %struct.hv*
  store %struct.hv* %112, %struct.hv** @PL_curstash, align 8
  br label %if.end155

if.end155:                                        ; preds = %if.then153, %sw.bb150
  %113 = load i64, i64* @PL_tmps_ix, align 8
  %114 = load i64, i64* @PL_tmps_floor, align 8
  %cmp156 = icmp sgt i64 %113, %114
  br i1 %cmp156, label %if.then158, label %if.end159

if.then158:                                       ; preds = %if.end155
  call void @Perl_free_tmps()
  br label %if.end159

if.end159:                                        ; preds = %if.then158, %if.end155
  br label %do.body160

do.body160:                                       ; preds = %if.end159
  %je_prev161 = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 1
  %115 = load %struct.jmpenv*, %struct.jmpenv** %je_prev161, align 8
  store %struct.jmpenv* %115, %struct.jmpenv** @PL_top_env, align 8
  br label %do.end162

do.end162:                                        ; preds = %do.body160
  call void @S_my_exit_jump()
  br label %sw.bb163

sw.bb163:                                         ; preds = %do.end102, %do.end162
  %116 = load %struct.op*, %struct.op** @PL_restartop, align 8
  %tobool164 = icmp ne %struct.op* %116, null
  br i1 %tobool164, label %if.then165, label %if.end166

if.then165:                                       ; preds = %sw.bb163
  store %struct.jmpenv* null, %struct.jmpenv** @PL_restartjmpenv, align 8
  %117 = load %struct.op*, %struct.op** @PL_restartop, align 8
  store %struct.op* %117, %struct.op** @PL_op, align 8
  store %struct.op* null, %struct.op** @PL_restartop, align 8
  br label %redo_body

if.end166:                                        ; preds = %sw.bb163
  %118 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %119 = load i32, i32* %oldmark, align 4
  %idx.ext167 = sext i32 %119 to i64
  %add.ptr168 = getelementptr inbounds %struct.sv*, %struct.sv** %118, i64 %idx.ext167
  store %struct.sv** %add.ptr168, %struct.sv*** @PL_stack_sp, align 8
  %120 = load volatile i32, i32* %flags.addr, align 4
  %and169 = and i32 %120, 3
  %cmp170 = icmp eq i32 %and169, 3
  br i1 %cmp170, label %if.then172, label %if.else173

if.then172:                                       ; preds = %if.end166
  store volatile i32 0, i32* %retval1, align 4
  br label %if.end175

if.else173:                                       ; preds = %if.end166
  store volatile i32 1, i32* %retval1, align 4
  %121 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %incdec.ptr174 = getelementptr inbounds %struct.sv*, %struct.sv** %121, i32 1
  store %struct.sv** %incdec.ptr174, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr174, align 8
  br label %if.end175

if.end175:                                        ; preds = %if.else173, %if.then172
  br label %sw.epilog

sw.epilog:                                        ; preds = %do.end102, %if.end175, %if.end148
  %122 = load i32, i32* @PL_scopestack_ix, align 4
  %123 = load i32, i32* %oldscope, align 4
  %cmp176 = icmp sgt i32 %122, %123
  br i1 %cmp176, label %if.then178, label %if.end179

if.then178:                                       ; preds = %sw.epilog
  call void @Perl_delete_eval_scope()
  br label %if.end179

if.end179:                                        ; preds = %if.then178, %sw.epilog
  br label %do.body180

do.body180:                                       ; preds = %if.end179
  %je_prev181 = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 1
  %124 = load %struct.jmpenv*, %struct.jmpenv** %je_prev181, align 8
  store %struct.jmpenv* %124, %struct.jmpenv** @PL_top_env, align 8
  br label %do.end182

do.end182:                                        ; preds = %do.body180
  br label %if.end183

if.end183:                                        ; preds = %do.end182, %do.end92
  %125 = load volatile i32, i32* %flags.addr, align 4
  %and184 = and i32 %125, 4
  %tobool185 = icmp ne i32 %and184, 0
  br i1 %tobool185, label %if.then186, label %if.end193

if.then186:                                       ; preds = %if.end183
  %126 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %127 = load i32, i32* %oldmark, align 4
  %idx.ext187 = sext i32 %127 to i64
  %add.ptr188 = getelementptr inbounds %struct.sv*, %struct.sv** %126, i64 %idx.ext187
  store %struct.sv** %add.ptr188, %struct.sv*** @PL_stack_sp, align 8
  store volatile i32 0, i32* %retval1, align 4
  %128 = load i64, i64* @PL_tmps_ix, align 8
  %129 = load i64, i64* @PL_tmps_floor, align 8
  %cmp189 = icmp sgt i64 %128, %129
  br i1 %cmp189, label %if.then191, label %if.end192

if.then191:                                       ; preds = %if.then186
  call void @Perl_free_tmps()
  br label %if.end192

if.end192:                                        ; preds = %if.then191, %if.then186
  call void @Perl_pop_scope()
  br label %if.end193

if.end193:                                        ; preds = %if.end192, %if.end183
  %130 = load %struct.op*, %struct.op** %oldop, align 8
  store %struct.op* %130, %struct.op** @PL_op, align 8
  %131 = load volatile i32, i32* %retval1, align 4
  ret i32 %131
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @Perl_call_method(i8* %methname, i32 %flags) #0 {
entry:
  %methname.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %len = alloca i64, align 8
  %sv = alloca %struct.sv*, align 8
  store i8* %methname, i8** %methname.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i8*, i8** %methname.addr, align 8
  %call = call i64 @strlen(i8* %0) #11
  store i64 %call, i64* %len, align 8
  %1 = load i32, i32* %flags.addr, align 4
  %and = and i32 %1, 4096
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load i8*, i8** %methname.addr, align 8
  %3 = load i64, i64* %len, align 8
  %conv = trunc i64 %3 to i32
  %call1 = call %struct.sv* @Perl_newSVpvn_share(i8* %2, i32 %conv, i32 0)
  %call2 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call1)
  br label %cond.end

cond.false:                                       ; preds = %entry
  %4 = load i8*, i8** %methname.addr, align 8
  %5 = load i64, i64* %len, align 8
  %call3 = call %struct.sv* @Perl_newSVpvn_flags(i8* %4, i64 %5, i32 524288)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sv* [ %call2, %cond.true ], [ %call3, %cond.false ]
  store %struct.sv* %cond, %struct.sv** %sv, align 8
  %6 = load %struct.sv*, %struct.sv** %sv, align 8
  %7 = load i32, i32* %flags.addr, align 4
  %or = or i32 %7, 128
  %call4 = call i32 @Perl_call_sv(%struct.sv* %6, i32 %or)
  ret i32 %call4
}

declare dso_local %struct.sv* @Perl_newSVpvn_share(i8*, i32, i32) #2

declare dso_local %struct.sv* @Perl_newSVpvn_flags(i8*, i64, i32) #2

declare dso_local void @Perl_save_strlen(i64*) #2

declare dso_local void @Perl_save_pushptr(i8*, i32) #2

declare dso_local %struct.context* @Perl_create_eval_scope(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @S_SvREFCNT_dec_NN(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %rc = alloca i32, align 4
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 1
  %1 = load i32, i32* %sv_refcnt, align 8
  store i32 %1, i32* %rc, align 4
  %2 = load i32, i32* %rc, align 4
  %cmp = icmp ugt i32 %2, 1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %if.then, label %if.else

cond.false:                                       ; preds = %entry
  br i1 false, label %if.then, label %if.else

if.then:                                          ; preds = %cond.false, %cond.true
  %3 = load i32, i32* %rc, align 4
  %sub = sub i32 %3, 1
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt1 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 1
  store i32 %sub, i32* %sv_refcnt1, align 8
  br label %if.end

if.else:                                          ; preds = %cond.false, %cond.true
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %6 = load i32, i32* %rc, align 4
  call void @Perl_sv_free2(%struct.sv* %5, i32 %6)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

declare dso_local i32 @Perl_mg_free(%struct.sv*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @S_my_exit_jump() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %prev = alloca %struct.stackinfo*, align 8
  %0 = load %struct.sv*, %struct.sv** @PL_e_script, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** @PL_e_script, align 8
  %2 = bitcast %struct.sv* %1 to i8*
  %3 = bitcast i8* %2 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %3)
  store %struct.sv* null, %struct.sv** @PL_e_script, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %do.body

do.body:                                          ; preds = %if.end
  br label %while.cond

while.cond:                                       ; preds = %do.end13, %do.body
  %4 = load %struct.av*, %struct.av** @PL_curstack, align 8
  %5 = load %struct.av*, %struct.av** @PL_mainstack, align 8
  %cmp = icmp ne %struct.av* %4, %5
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  call void @Perl_dounwind(i32 -1)
  br label %do.body1

do.body1:                                         ; preds = %while.body
  %6 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %6, %struct.sv*** %sp, align 8
  %7 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_prev = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %7, i32 0, i32 2
  %8 = load %struct.stackinfo*, %struct.stackinfo** %si_prev, align 8
  store %struct.stackinfo* %8, %struct.stackinfo** %prev, align 8
  %9 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %tobool2 = icmp ne %struct.stackinfo* %9, null
  br i1 %tobool2, label %if.end4, label %if.then3

if.then3:                                         ; preds = %do.body1
  call void @Perl_croak_popstack()
  br label %if.end4

if.end4:                                          ; preds = %if.then3, %do.body1
  br label %do.body5

do.body5:                                         ; preds = %if.end4
  %10 = load %struct.sv**, %struct.sv*** %sp, align 8
  %11 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %10 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %11 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %12 = load %struct.av*, %struct.av** @PL_curstack, align 8
  %sv_any = getelementptr inbounds %struct.av, %struct.av* %12, i32 0, i32 0
  %13 = load %struct.xpvav*, %struct.xpvav** %sv_any, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %13, i32 0, i32 2
  store i64 %sub.ptr.div, i64* %xav_fill, align 8
  %14 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %si_stack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %14, i32 0, i32 0
  %15 = load %struct.av*, %struct.av** %si_stack, align 8
  %sv_u = getelementptr inbounds %struct.av, %struct.av* %15, i32 0, i32 3
  %svu_array = bitcast %union.anon.3* %sv_u to %struct.sv***
  %16 = load %struct.sv**, %struct.sv*** %svu_array, align 8
  store %struct.sv** %16, %struct.sv*** @PL_stack_base, align 8
  %17 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %18 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %si_stack6 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %18, i32 0, i32 0
  %19 = load %struct.av*, %struct.av** %si_stack6, align 8
  %sv_any7 = getelementptr inbounds %struct.av, %struct.av* %19, i32 0, i32 0
  %20 = load %struct.xpvav*, %struct.xpvav** %sv_any7, align 8
  %xav_max = getelementptr inbounds %struct.xpvav, %struct.xpvav* %20, i32 0, i32 3
  %21 = load i64, i64* %xav_max, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %17, i64 %21
  store %struct.sv** %add.ptr, %struct.sv*** @PL_stack_max, align 8
  %22 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %23 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %si_stack8 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %23, i32 0, i32 0
  %24 = load %struct.av*, %struct.av** %si_stack8, align 8
  %sv_any9 = getelementptr inbounds %struct.av, %struct.av* %24, i32 0, i32 0
  %25 = load %struct.xpvav*, %struct.xpvav** %sv_any9, align 8
  %xav_fill10 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %25, i32 0, i32 2
  %26 = load i64, i64* %xav_fill10, align 8
  %add.ptr11 = getelementptr inbounds %struct.sv*, %struct.sv** %22, i64 %26
  store %struct.sv** %add.ptr11, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %add.ptr11, %struct.sv*** %sp, align 8
  %27 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %si_stack12 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %27, i32 0, i32 0
  %28 = load %struct.av*, %struct.av** %si_stack12, align 8
  store %struct.av* %28, %struct.av** @PL_curstack, align 8
  br label %do.end

do.end:                                           ; preds = %do.body5
  %29 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  store %struct.stackinfo* %29, %struct.stackinfo** @PL_curstackinfo, align 8
  br label %do.end13

do.end13:                                         ; preds = %do.end
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %do.end14

do.end14:                                         ; preds = %while.end
  call void @Perl_dounwind(i32 -1)
  br label %do.body15

do.body15:                                        ; preds = %do.end14
  %30 = load i32, i32* @PL_savestack_ix, align 4
  %cmp16 = icmp sgt i32 %30, 0
  br i1 %cmp16, label %if.then17, label %if.end18

if.then17:                                        ; preds = %do.body15
  call void @Perl_leave_scope(i32 0)
  br label %if.end18

if.end18:                                         ; preds = %if.then17, %do.body15
  br label %do.end19

do.end19:                                         ; preds = %if.end18
  br label %do.body20

do.body20:                                        ; preds = %do.end19
  %31 = load %struct.jmpenv*, %struct.jmpenv** @PL_top_env, align 8
  %je_prev = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %31, i32 0, i32 1
  %32 = load %struct.jmpenv*, %struct.jmpenv** %je_prev, align 8
  %tobool21 = icmp ne %struct.jmpenv* %32, null
  br i1 %tobool21, label %if.then22, label %if.end23

if.then22:                                        ; preds = %do.body20
  %33 = load %struct.jmpenv*, %struct.jmpenv** @PL_top_env, align 8
  %je_buf = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %33, i32 0, i32 0
  %arraydecay = getelementptr inbounds [1 x %struct.__jmp_buf_tag], [1 x %struct.__jmp_buf_tag]* %je_buf, i64 0, i64 0
  call void @siglongjmp(%struct.__jmp_buf_tag* %arraydecay, i32 2) #10
  unreachable

if.end23:                                         ; preds = %do.body20
  %34 = load i32, i32* @PL_statusvalue, align 4
  call void @exit(i32 %34) #10
  unreachable

do.end24:                                         ; No predecessors!
  ret void
}

declare dso_local void @Perl_delete_eval_scope() #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @Perl_eval_sv(%struct.sv* %sv, i32 %flags) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %flags.addr = alloca i32, align 4
  %sp = alloca %struct.sv**, align 8
  %myop = alloca %struct.unop, align 8
  %oldmark = alloca i32, align 4
  %retval1 = alloca i32, align 4
  %ret = alloca i32, align 4
  %oldop = alloca %struct.op*, align 8
  %cur_env = alloca %struct.jmpenv, align 8
  %svp = alloca %struct.sv**, align 8
  %errsv = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %2 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %1 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %2 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %conv = trunc i64 %sub.ptr.div to i32
  store volatile i32 %conv, i32* %oldmark, align 4
  store volatile i32 0, i32* %retval1, align 4
  %3 = load %struct.op*, %struct.op** @PL_op, align 8
  store %struct.op* %3, %struct.op** %oldop, align 8
  %4 = load i32, i32* %flags.addr, align 4
  %and = and i32 %4, 4
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @Perl_push_scope()
  call void @Perl_save_strlen(i64* @PL_tmps_floor)
  %5 = load i64, i64* @PL_tmps_ix, align 8
  store i64 %5, i64* @PL_tmps_floor, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.op*, %struct.op** @PL_op, align 8
  %7 = bitcast %struct.op* %6 to i8*
  call void @Perl_save_pushptr(i8* %7, i32 18)
  %8 = bitcast %struct.unop* %myop to %struct.op*
  store %struct.op* %8, %struct.op** @PL_op, align 8
  %9 = bitcast %struct.unop* %myop to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 48, i1 false)
  br label %do.body

do.body:                                          ; preds = %if.end
  %10 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %11 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %sub.ptr.lhs.cast2 = ptrtoint %struct.sv** %10 to i64
  %sub.ptr.rhs.cast3 = ptrtoint %struct.sv** %11 to i64
  %sub.ptr.sub4 = sub i64 %sub.ptr.lhs.cast2, %sub.ptr.rhs.cast3
  %sub.ptr.div5 = sdiv exact i64 %sub.ptr.sub4, 8
  %cmp = icmp slt i64 %sub.ptr.div5, 1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %if.then7, label %if.end8

cond.false:                                       ; preds = %do.body
  br i1 false, label %if.then7, label %if.end8

if.then7:                                         ; preds = %cond.false, %cond.true
  %12 = load %struct.sv**, %struct.sv*** %sp, align 8
  %13 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %call = call %struct.sv** @Perl_stack_grow(%struct.sv** %12, %struct.sv** %13, i64 1)
  store %struct.sv** %call, %struct.sv*** %sp, align 8
  %14 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end8
  %15 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %16 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %16, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv* %15, %struct.sv** %incdec.ptr, align 8
  %17 = load i32, i32* %flags.addr, align 4
  %and9 = and i32 %17, 16
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %if.end12, label %if.then11

if.then11:                                        ; preds = %do.end
  %op_flags = getelementptr inbounds %struct.unop, %struct.unop* %myop, i32 0, i32 5
  store i8 64, i8* %op_flags, align 2
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %do.end
  %op_type = getelementptr inbounds %struct.unop, %struct.unop* %myop, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, -512
  %bf.set = or i16 %bf.clear, 342
  store i16 %bf.set, i16* %op_type, align 8
  %18 = load i32, i32* %flags.addr, align 4
  %and13 = and i32 %18, 3
  %op_flags14 = getelementptr inbounds %struct.unop, %struct.unop* %myop, i32 0, i32 5
  %19 = load i8, i8* %op_flags14, align 2
  %conv15 = zext i8 %19 to i32
  %or = or i32 %conv15, %and13
  %conv16 = trunc i32 %or to i8
  store i8 %conv16, i8* %op_flags14, align 2
  %20 = load i32, i32* %flags.addr, align 4
  %and17 = and i32 %20, 32
  %tobool18 = icmp ne i32 %and17, 0
  br i1 %tobool18, label %if.then19, label %if.end24

if.then19:                                        ; preds = %if.end12
  %op_flags20 = getelementptr inbounds %struct.unop, %struct.unop* %myop, i32 0, i32 5
  %21 = load i8, i8* %op_flags20, align 2
  %conv21 = zext i8 %21 to i32
  %or22 = or i32 %conv21, 128
  %conv23 = trunc i32 %or22 to i8
  store i8 %conv23, i8* %op_flags20, align 2
  br label %if.end24

if.end24:                                         ; preds = %if.then19, %if.end12
  %22 = load i32, i32* %flags.addr, align 4
  %and25 = and i32 %22, 2048
  %tobool26 = icmp ne i32 %and25, 0
  br i1 %tobool26, label %if.then27, label %if.end28

if.then27:                                        ; preds = %if.end24
  %op_private = getelementptr inbounds %struct.unop, %struct.unop* %myop, i32 0, i32 6
  store i8 48, i8* %op_private, align 1
  br label %if.end28

if.end28:                                         ; preds = %if.then27, %if.end24
  %23 = load i8, i8* @PL_tainting, align 1
  %tobool29 = trunc i8 %23 to i1
  br i1 %tobool29, label %cond.true31, label %cond.false32

cond.true31:                                      ; preds = %if.end28
  br i1 true, label %if.then33, label %if.end34

cond.false32:                                     ; preds = %if.end28
  br i1 false, label %if.then33, label %if.end34

if.then33:                                        ; preds = %cond.false32, %cond.true31
  call void @Perl_taint_proper(i8* null, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.14, i64 0, i64 0))
  br label %if.end34

if.end34:                                         ; preds = %if.then33, %cond.false32, %cond.true31
  br label %do.body35

do.body35:                                        ; preds = %if.end34
  %24 = load %struct.jmpenv*, %struct.jmpenv** @PL_top_env, align 8
  %je_prev = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 1
  store %struct.jmpenv* %24, %struct.jmpenv** %je_prev, align 8
  %je_buf = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 0
  %arraydecay = getelementptr inbounds [1 x %struct.__jmp_buf_tag], [1 x %struct.__jmp_buf_tag]* %je_buf, i64 0, i64 0
  %call36 = call i32 @__sigsetjmp(%struct.__jmp_buf_tag* %arraydecay, i32 0) #9
  %je_ret = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 2
  store i32 %call36, i32* %je_ret, align 8
  store %struct.jmpenv* %cur_env, %struct.jmpenv** @PL_top_env, align 8
  %je_mustcatch = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 3
  store i8 0, i8* %je_mustcatch, align 4
  %je_ret37 = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 2
  %25 = load i32, i32* %je_ret37, align 8
  store i32 %25, i32* %ret, align 4
  br label %do.end38

do.end38:                                         ; preds = %do.body35
  %26 = load i32, i32* %ret, align 4
  switch i32 %26, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb79
    i32 2, label %sw.bb80
    i32 3, label %sw.bb93
  ]

sw.bb:                                            ; preds = %do.end38
  br label %redo_body

redo_body:                                        ; preds = %if.then95, %sw.bb
  %27 = load %struct.op*, %struct.op** @PL_op, align 8
  %28 = bitcast %struct.unop* %myop to %struct.op*
  %cmp39 = icmp eq %struct.op* %27, %28
  br i1 %cmp39, label %if.then41, label %if.end46

if.then41:                                        ; preds = %redo_body
  %29 = load %struct.op* ()*, %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 342), align 8
  %call42 = call %struct.op* %29()
  store %struct.op* %call42, %struct.op** @PL_op, align 8
  %30 = load %struct.op*, %struct.op** @PL_op, align 8
  %tobool43 = icmp ne %struct.op* %30, null
  br i1 %tobool43, label %if.end45, label %if.then44

if.then44:                                        ; preds = %if.then41
  br label %fail

if.end45:                                         ; preds = %if.then41
  br label %if.end46

if.end46:                                         ; preds = %if.end45, %redo_body
  %31 = load i32 ()*, i32 ()** @PL_runops, align 8
  %call47 = call i32 %31()
  %32 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %33 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %34 = load volatile i32, i32* %oldmark, align 4
  %idx.ext = sext i32 %34 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %33, i64 %idx.ext
  %sub.ptr.lhs.cast48 = ptrtoint %struct.sv** %32 to i64
  %sub.ptr.rhs.cast49 = ptrtoint %struct.sv** %add.ptr to i64
  %sub.ptr.sub50 = sub i64 %sub.ptr.lhs.cast48, %sub.ptr.rhs.cast49
  %sub.ptr.div51 = sdiv exact i64 %sub.ptr.sub50, 8
  %conv52 = trunc i64 %sub.ptr.div51 to i32
  store volatile i32 %conv52, i32* %retval1, align 4
  %35 = load i32, i32* %flags.addr, align 4
  %and53 = and i32 %35, 32
  %tobool54 = icmp ne i32 %and53, 0
  br i1 %tobool54, label %if.end78, label %if.then55

if.then55:                                        ; preds = %if.end46
  br label %do.body56

do.body56:                                        ; preds = %if.then55
  %36 = load %struct.gv*, %struct.gv** @PL_errgv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %36, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %37 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr57 = getelementptr inbounds %struct.gp, %struct.gp* %37, i64 0
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr57, i32 0, i32 0
  store %struct.sv** %gp_sv, %struct.sv*** %svp, align 8
  %38 = load %struct.sv**, %struct.sv*** %svp, align 8
  %39 = load %struct.sv*, %struct.sv** %38, align 8
  %tobool58 = icmp ne %struct.sv* %39, null
  br i1 %tobool58, label %if.else, label %if.then59

if.then59:                                        ; preds = %do.body56
  br label %clresv_newemptypv

if.else:                                          ; preds = %do.body56
  %40 = load %struct.sv**, %struct.sv*** %svp, align 8
  %41 = load %struct.sv*, %struct.sv** %40, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 2
  %42 = load i32, i32* %sv_flags, align 4
  %and60 = and i32 %42, 134283264
  %tobool61 = icmp ne i32 %and60, 0
  br i1 %tobool61, label %if.then62, label %if.else64

if.then62:                                        ; preds = %if.else
  %43 = load %struct.sv**, %struct.sv*** %svp, align 8
  %44 = load %struct.sv*, %struct.sv** %43, align 8
  %45 = bitcast %struct.sv* %44 to i8*
  %46 = bitcast i8* %45 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %46)
  br label %clresv_newemptypv

clresv_newemptypv:                                ; preds = %if.then62, %if.then59
  %call63 = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), i64 0)
  %47 = load %struct.sv**, %struct.sv*** %svp, align 8
  store %struct.sv* %call63, %struct.sv** %47, align 8
  br label %if.end75

if.else64:                                        ; preds = %if.else
  %48 = load %struct.sv**, %struct.sv*** %svp, align 8
  %49 = load %struct.sv*, %struct.sv** %48, align 8
  store %struct.sv* %49, %struct.sv** %errsv, align 8
  %50 = load %struct.sv*, %struct.sv** %errsv, align 8
  call void @Perl_sv_setpvn(%struct.sv* %50, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), i64 0)
  %51 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_flags65 = getelementptr inbounds %struct.sv, %struct.sv* %51, i32 0, i32 2
  %52 = load i32, i32* %sv_flags65, align 4
  %and66 = and i32 %52, 1610547455
  store i32 %and66, i32* %sv_flags65, align 4
  %53 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_flags67 = getelementptr inbounds %struct.sv, %struct.sv* %53, i32 0, i32 2
  %54 = load i32, i32* %sv_flags67, align 4
  %or68 = or i32 %54, 17408
  store i32 %or68, i32* %sv_flags67, align 4
  %55 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_flags69 = getelementptr inbounds %struct.sv, %struct.sv* %55, i32 0, i32 2
  %56 = load i32, i32* %sv_flags69, align 4
  %and70 = and i32 %56, 14680064
  %tobool71 = icmp ne i32 %and70, 0
  br i1 %tobool71, label %if.then72, label %if.end74

if.then72:                                        ; preds = %if.else64
  %57 = load %struct.sv*, %struct.sv** %errsv, align 8
  %call73 = call i32 @Perl_mg_free(%struct.sv* %57)
  br label %if.end74

if.end74:                                         ; preds = %if.then72, %if.else64
  br label %if.end75

if.end75:                                         ; preds = %if.end74, %clresv_newemptypv
  br label %if.end76

if.end76:                                         ; preds = %if.end75
  br label %do.end77

do.end77:                                         ; preds = %if.end76
  br label %if.end78

if.end78:                                         ; preds = %do.end77, %if.end46
  br label %sw.epilog

sw.bb79:                                          ; preds = %do.end38
  store i32 1, i32* @PL_statusvalue, align 4
  store i32 1, i32* @PL_statusvalue_posix, align 4
  br label %sw.bb80

sw.bb80:                                          ; preds = %do.end38, %sw.bb79
  %58 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %59 = load %struct.hv*, %struct.hv** @PL_defstash, align 8
  %cmp81 = icmp ne %struct.hv* %58, %59
  br i1 %cmp81, label %if.then83, label %if.end85

if.then83:                                        ; preds = %sw.bb80
  %60 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %61 = bitcast %struct.hv* %60 to i8*
  %62 = bitcast i8* %61 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %62)
  %63 = load %struct.hv*, %struct.hv** @PL_defstash, align 8
  %64 = bitcast %struct.hv* %63 to i8*
  %65 = bitcast i8* %64 to %struct.sv*
  %call84 = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %65)
  %66 = bitcast %struct.sv* %call84 to %struct.hv*
  store %struct.hv* %66, %struct.hv** @PL_curstash, align 8
  br label %if.end85

if.end85:                                         ; preds = %if.then83, %sw.bb80
  %67 = load i64, i64* @PL_tmps_ix, align 8
  %68 = load i64, i64* @PL_tmps_floor, align 8
  %cmp86 = icmp sgt i64 %67, %68
  br i1 %cmp86, label %if.then88, label %if.end89

if.then88:                                        ; preds = %if.end85
  call void @Perl_free_tmps()
  br label %if.end89

if.end89:                                         ; preds = %if.then88, %if.end85
  br label %do.body90

do.body90:                                        ; preds = %if.end89
  %je_prev91 = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 1
  %69 = load %struct.jmpenv*, %struct.jmpenv** %je_prev91, align 8
  store %struct.jmpenv* %69, %struct.jmpenv** @PL_top_env, align 8
  br label %do.end92

do.end92:                                         ; preds = %do.body90
  call void @S_my_exit_jump()
  br label %sw.bb93

sw.bb93:                                          ; preds = %do.end38, %do.end92
  %70 = load %struct.op*, %struct.op** @PL_restartop, align 8
  %tobool94 = icmp ne %struct.op* %70, null
  br i1 %tobool94, label %if.then95, label %if.end96

if.then95:                                        ; preds = %sw.bb93
  store %struct.jmpenv* null, %struct.jmpenv** @PL_restartjmpenv, align 8
  %71 = load %struct.op*, %struct.op** @PL_restartop, align 8
  store %struct.op* %71, %struct.op** @PL_op, align 8
  store %struct.op* null, %struct.op** @PL_restartop, align 8
  br label %redo_body

if.end96:                                         ; preds = %sw.bb93
  br label %fail

fail:                                             ; preds = %if.end96, %if.then44
  %72 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %73 = load volatile i32, i32* %oldmark, align 4
  %idx.ext97 = sext i32 %73 to i64
  %add.ptr98 = getelementptr inbounds %struct.sv*, %struct.sv** %72, i64 %idx.ext97
  store %struct.sv** %add.ptr98, %struct.sv*** @PL_stack_sp, align 8
  %74 = load i32, i32* %flags.addr, align 4
  %and99 = and i32 %74, 3
  %cmp100 = icmp eq i32 %and99, 3
  br i1 %cmp100, label %if.then102, label %if.else103

if.then102:                                       ; preds = %fail
  store volatile i32 0, i32* %retval1, align 4
  br label %if.end105

if.else103:                                       ; preds = %fail
  store volatile i32 1, i32* %retval1, align 4
  %75 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %incdec.ptr104 = getelementptr inbounds %struct.sv*, %struct.sv** %75, i32 1
  store %struct.sv** %incdec.ptr104, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr104, align 8
  br label %if.end105

if.end105:                                        ; preds = %if.else103, %if.then102
  br label %sw.epilog

sw.epilog:                                        ; preds = %do.end38, %if.end105, %if.end78
  br label %do.body106

do.body106:                                       ; preds = %sw.epilog
  %je_prev107 = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 1
  %76 = load %struct.jmpenv*, %struct.jmpenv** %je_prev107, align 8
  store %struct.jmpenv* %76, %struct.jmpenv** @PL_top_env, align 8
  br label %do.end108

do.end108:                                        ; preds = %do.body106
  %77 = load i32, i32* %flags.addr, align 4
  %and109 = and i32 %77, 4
  %tobool110 = icmp ne i32 %and109, 0
  br i1 %tobool110, label %if.then111, label %if.end118

if.then111:                                       ; preds = %do.end108
  %78 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %79 = load volatile i32, i32* %oldmark, align 4
  %idx.ext112 = sext i32 %79 to i64
  %add.ptr113 = getelementptr inbounds %struct.sv*, %struct.sv** %78, i64 %idx.ext112
  store %struct.sv** %add.ptr113, %struct.sv*** @PL_stack_sp, align 8
  store volatile i32 0, i32* %retval1, align 4
  %80 = load i64, i64* @PL_tmps_ix, align 8
  %81 = load i64, i64* @PL_tmps_floor, align 8
  %cmp114 = icmp sgt i64 %80, %81
  br i1 %cmp114, label %if.then116, label %if.end117

if.then116:                                       ; preds = %if.then111
  call void @Perl_free_tmps()
  br label %if.end117

if.end117:                                        ; preds = %if.then116, %if.then111
  call void @Perl_pop_scope()
  br label %if.end118

if.end118:                                        ; preds = %if.end117, %do.end108
  %82 = load %struct.op*, %struct.op** %oldop, align 8
  store %struct.op* %82, %struct.op** @PL_op, align 8
  %83 = load volatile i32, i32* %retval1, align 4
  ret i32 %83
}

declare dso_local void @Perl_taint_proper(i8*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl_eval_pv(i8* %p, i32 %croak_on_error) #0 {
entry:
  %p.addr = alloca i8*, align 8
  %croak_on_error.addr = alloca i32, align 4
  %sv = alloca %struct.sv*, align 8
  %sp = alloca %struct.sv**, align 8
  %errsv = alloca %struct.sv*, align 8
  store i8* %p, i8** %p.addr, align 8
  store i32 %croak_on_error, i32* %croak_on_error.addr, align 4
  %0 = load i8*, i8** %p.addr, align 8
  %call = call %struct.sv* @Perl_newSVpv(i8* %0, i64 0)
  store %struct.sv* %call, %struct.sv** %sv, align 8
  %1 = load %struct.sv*, %struct.sv** %sv, align 8
  %call1 = call i32 @Perl_eval_sv(%struct.sv* %1, i32 2)
  %2 = load %struct.sv*, %struct.sv** %sv, align 8
  %3 = bitcast %struct.sv* %2 to i8*
  %4 = bitcast i8* %3 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %4)
  %5 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %5, %struct.sv*** %sp, align 8
  %6 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %6, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %7 = load %struct.sv*, %struct.sv** %6, align 8
  store %struct.sv* %7, %struct.sv** %sv, align 8
  %8 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %8, %struct.sv*** @PL_stack_sp, align 8
  %9 = load i32, i32* %croak_on_error.addr, align 4
  %tobool = icmp ne i32 %9, 0
  br i1 %tobool, label %if.then, label %if.end85

if.then:                                          ; preds = %entry
  %10 = load %struct.gv*, %struct.gv** @PL_errgv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %10, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %11 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %11, i64 0
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 0
  %12 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  %tobool2 = icmp ne %struct.sv* %12, null
  br i1 %tobool2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %13 = load %struct.gv*, %struct.gv** @PL_errgv, align 8
  %sv_u3 = getelementptr inbounds %struct.gv, %struct.gv* %13, i32 0, i32 3
  %svu_gp4 = bitcast %union.anon.4* %sv_u3 to %struct.gp**
  %14 = load %struct.gp*, %struct.gp** %svu_gp4, align 8
  %add.ptr5 = getelementptr inbounds %struct.gp, %struct.gp* %14, i64 0
  %gp_sv6 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr5, i32 0, i32 0
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %15 = load %struct.gv*, %struct.gv** @PL_errgv, align 8
  %call7 = call %struct.gv* @Perl_gv_add_by_type(%struct.gv* %15, i32 0)
  %sv_u8 = getelementptr inbounds %struct.gv, %struct.gv* %call7, i32 0, i32 3
  %svu_gp9 = bitcast %union.anon.4* %sv_u8 to %struct.gp**
  %16 = load %struct.gp*, %struct.gp** %svu_gp9, align 8
  %add.ptr10 = getelementptr inbounds %struct.gp, %struct.gp* %16, i64 0
  %gp_sv11 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr10, i32 0, i32 0
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sv** [ %gp_sv6, %cond.true ], [ %gp_sv11, %cond.false ]
  %17 = load %struct.sv*, %struct.sv** %cond, align 8
  store %struct.sv* %17, %struct.sv** %errsv, align 8
  %18 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 2
  %19 = load i32, i32* %sv_flags, align 4
  %and = and i32 %19, 2097152
  %tobool12 = icmp ne i32 %and, 0
  br i1 %tobool12, label %cond.true13, label %cond.false14

cond.true13:                                      ; preds = %cond.end
  br i1 true, label %cond.true15, label %cond.false17

cond.false14:                                     ; preds = %cond.end
  br i1 false, label %cond.true15, label %cond.false17

cond.true15:                                      ; preds = %cond.false14, %cond.true13
  %20 = load %struct.sv*, %struct.sv** %errsv, align 8
  %call16 = call zeroext i1 @Perl_sv_2bool_flags(%struct.sv* %20, i32 2)
  br i1 %call16, label %if.then72, label %if.end

cond.false17:                                     ; preds = %cond.false14, %cond.true13
  %21 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_flags18 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags18, align 4
  %and19 = and i32 %22, 65280
  %tobool20 = icmp ne i32 %and19, 0
  br i1 %tobool20, label %cond.false28, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.false17
  %23 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_flags21 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  %24 = load i32, i32* %sv_flags21, align 4
  %and22 = and i32 %24, 255
  %cmp = icmp eq i32 %and22, 8
  br i1 %cmp, label %cond.false28, label %lor.lhs.false23

lor.lhs.false23:                                  ; preds = %lor.lhs.false
  %25 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_flags24 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 2
  %26 = load i32, i32* %sv_flags24, align 4
  %and25 = and i32 %26, 16826623
  %cmp26 = icmp eq i32 %and25, 16777226
  br i1 %cmp26, label %cond.false28, label %cond.true27

cond.true27:                                      ; preds = %lor.lhs.false23
  br i1 false, label %if.then72, label %if.end

cond.false28:                                     ; preds = %lor.lhs.false23, %lor.lhs.false, %cond.false17
  %27 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_flags29 = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 2
  %28 = load i32, i32* %sv_flags29, align 4
  %and30 = and i32 %28, 1024
  %tobool31 = icmp ne i32 %and30, 0
  br i1 %tobool31, label %cond.true32, label %cond.false44

cond.true32:                                      ; preds = %cond.false28
  %29 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 0
  %30 = load i8*, i8** %sv_any, align 8
  %31 = bitcast i8* %30 to %struct.xpv*
  %tobool33 = icmp ne %struct.xpv* %31, null
  br i1 %tobool33, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.true32
  %32 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_any34 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 0
  %33 = load i8*, i8** %sv_any34, align 8
  %34 = bitcast i8* %33 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %34, i32 0, i32 2
  %35 = load i64, i64* %xpv_cur, align 8
  %cmp35 = icmp ugt i64 %35, 1
  br i1 %cmp35, label %if.then72, label %lor.lhs.false36

lor.lhs.false36:                                  ; preds = %land.lhs.true
  %36 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_any37 = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 0
  %37 = load i8*, i8** %sv_any37, align 8
  %38 = bitcast i8* %37 to %struct.xpv*
  %xpv_cur38 = getelementptr inbounds %struct.xpv, %struct.xpv* %38, i32 0, i32 2
  %39 = load i64, i64* %xpv_cur38, align 8
  %tobool39 = icmp ne i64 %39, 0
  br i1 %tobool39, label %land.lhs.true40, label %if.end

land.lhs.true40:                                  ; preds = %lor.lhs.false36
  %40 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_u41 = getelementptr inbounds %struct.sv, %struct.sv* %40, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u41 to i8**
  %41 = load i8*, i8** %svu_pv, align 8
  %42 = load i8, i8* %41, align 1
  %conv = sext i8 %42 to i32
  %cmp42 = icmp ne i32 %conv, 48
  br i1 %cmp42, label %if.then72, label %if.end

cond.false44:                                     ; preds = %cond.false28
  %43 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_flags45 = getelementptr inbounds %struct.sv, %struct.sv* %43, i32 0, i32 2
  %44 = load i32, i32* %sv_flags45, align 4
  %and46 = and i32 %44, 768
  %tobool47 = icmp ne i32 %and46, 0
  br i1 %tobool47, label %cond.true48, label %cond.false69

cond.true48:                                      ; preds = %cond.false44
  %45 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_flags49 = getelementptr inbounds %struct.sv, %struct.sv* %45, i32 0, i32 2
  %46 = load i32, i32* %sv_flags49, align 4
  %and50 = and i32 %46, 256
  %tobool51 = icmp ne i32 %and50, 0
  br i1 %tobool51, label %land.lhs.true52, label %lor.lhs.false56

land.lhs.true52:                                  ; preds = %cond.true48
  %47 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_any53 = getelementptr inbounds %struct.sv, %struct.sv* %47, i32 0, i32 0
  %48 = load i8*, i8** %sv_any53, align 8
  %49 = bitcast i8* %48 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %49, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %50 = load i64, i64* %xivu_iv, align 8
  %cmp54 = icmp ne i64 %50, 0
  br i1 %cmp54, label %if.then72, label %lor.lhs.false56

lor.lhs.false56:                                  ; preds = %land.lhs.true52, %cond.true48
  %51 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_flags57 = getelementptr inbounds %struct.sv, %struct.sv* %51, i32 0, i32 2
  %52 = load i32, i32* %sv_flags57, align 4
  %and58 = and i32 %52, 512
  %tobool59 = icmp ne i32 %and58, 0
  br i1 %tobool59, label %land.lhs.true60, label %if.end

land.lhs.true60:                                  ; preds = %lor.lhs.false56
  %53 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_any61 = getelementptr inbounds %struct.sv, %struct.sv* %53, i32 0, i32 0
  %54 = load i8*, i8** %sv_any61, align 8
  %55 = bitcast i8* %54 to %struct.xpvnv*
  %xnv_u = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %55, i32 0, i32 5
  %xnv_nv = bitcast %union._xnvu* %xnv_u to double*
  %56 = load double, double* %xnv_nv, align 8
  %cmp62 = fcmp uno double %56, %56
  br i1 %cmp62, label %if.then72, label %lor.lhs.false63

lor.lhs.false63:                                  ; preds = %land.lhs.true60
  %57 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_any64 = getelementptr inbounds %struct.sv, %struct.sv* %57, i32 0, i32 0
  %58 = load i8*, i8** %sv_any64, align 8
  %59 = bitcast i8* %58 to %struct.xpvnv*
  %xnv_u65 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %59, i32 0, i32 5
  %xnv_nv66 = bitcast %union._xnvu* %xnv_u65 to double*
  %60 = load double, double* %xnv_nv66, align 8
  %cmp67 = fcmp une double %60, 0.000000e+00
  br i1 %cmp67, label %if.then72, label %if.end

cond.false69:                                     ; preds = %cond.false44
  %61 = load %struct.sv*, %struct.sv** %errsv, align 8
  %call70 = call zeroext i1 @Perl_sv_2bool_flags(%struct.sv* %61, i32 0)
  br i1 %call70, label %if.then72, label %if.end

if.then72:                                        ; preds = %cond.false69, %lor.lhs.false63, %land.lhs.true60, %land.lhs.true52, %land.lhs.true40, %land.lhs.true, %cond.true27, %cond.true15
  %62 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_flags73 = getelementptr inbounds %struct.sv, %struct.sv* %62, i32 0, i32 2
  %63 = load i32, i32* %sv_flags73, align 4
  %and74 = and i32 %63, 2098176
  %cmp75 = icmp eq i32 %and74, 1024
  br i1 %cmp75, label %cond.true77, label %cond.false81

cond.true77:                                      ; preds = %if.then72
  %64 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_u78 = getelementptr inbounds %struct.sv, %struct.sv* %64, i32 0, i32 3
  %svu_pv79 = bitcast %union.anon* %sv_u78 to i8**
  %65 = load i8*, i8** %svu_pv79, align 8
  %add.ptr80 = getelementptr inbounds i8, i8* %65, i64 0
  br label %cond.end83

cond.false81:                                     ; preds = %if.then72
  %66 = load %struct.sv*, %struct.sv** %errsv, align 8
  %call82 = call i8* @Perl_sv_2pv_flags(%struct.sv* %66, i64* null, i32 34)
  br label %cond.end83

cond.end83:                                       ; preds = %cond.false81, %cond.true77
  %cond84 = phi i8* [ %add.ptr80, %cond.true77 ], [ %call82, %cond.false81 ]
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i64 0, i64 0), i8* %cond84)
  br label %if.end

if.end:                                           ; preds = %cond.end83, %cond.false69, %lor.lhs.false63, %lor.lhs.false56, %land.lhs.true40, %lor.lhs.false36, %cond.true32, %cond.true27, %cond.true15
  br label %if.end85

if.end85:                                         ; preds = %if.end, %entry
  %67 = load %struct.sv*, %struct.sv** %sv, align 8
  ret %struct.sv* %67
}

declare dso_local zeroext i1 @Perl_sv_2bool_flags(%struct.sv*, i32) #2

declare dso_local void @Perl_croak(i8*, ...) #2

declare dso_local i8* @Perl_sv_2pv_flags(%struct.sv*, i64*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_require_pv(i8* %pv) #0 {
entry:
  %pv.addr = alloca i8*, align 8
  %sp = alloca %struct.sv**, align 8
  %sv = alloca %struct.sv*, align 8
  %next = alloca %struct.stackinfo*, align 8
  %sp18 = alloca %struct.sv**, align 8
  %prev = alloca %struct.stackinfo*, align 8
  store i8* %pv, i8** %pv.addr, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %1 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_next = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %1, i32 0, i32 3
  %2 = load %struct.stackinfo*, %struct.stackinfo** %si_next, align 8
  store %struct.stackinfo* %2, %struct.stackinfo** %next, align 8
  %3 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %tobool = icmp ne %struct.stackinfo* %3, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %do.body
  %call = call %struct.stackinfo* @Perl_new_stackinfo(i32 32, i32 22)
  store %struct.stackinfo* %call, %struct.stackinfo** %next, align 8
  %4 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %5 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_prev = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %5, i32 0, i32 2
  store %struct.stackinfo* %4, %struct.stackinfo** %si_prev, align 8
  %6 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %7 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_next1 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %7, i32 0, i32 3
  store %struct.stackinfo* %6, %struct.stackinfo** %si_next1, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  %8 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_type = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %8, i32 0, i32 6
  store i32 9, i32* %si_type, align 8
  %9 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %9, i32 0, i32 4
  store i32 -1, i32* %si_cxix, align 8
  %10 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_stack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %10, i32 0, i32 0
  %11 = load %struct.av*, %struct.av** %si_stack, align 8
  %sv_any = getelementptr inbounds %struct.av, %struct.av* %11, i32 0, i32 0
  %12 = load %struct.xpvav*, %struct.xpvav** %sv_any, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %12, i32 0, i32 2
  store i64 0, i64* %xav_fill, align 8
  br label %do.body2

do.body2:                                         ; preds = %if.end
  %13 = load %struct.sv**, %struct.sv*** %sp, align 8
  %14 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %13 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %14 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %15 = load %struct.av*, %struct.av** @PL_curstack, align 8
  %sv_any3 = getelementptr inbounds %struct.av, %struct.av* %15, i32 0, i32 0
  %16 = load %struct.xpvav*, %struct.xpvav** %sv_any3, align 8
  %xav_fill4 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %16, i32 0, i32 2
  store i64 %sub.ptr.div, i64* %xav_fill4, align 8
  %17 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_stack5 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %17, i32 0, i32 0
  %18 = load %struct.av*, %struct.av** %si_stack5, align 8
  %sv_u = getelementptr inbounds %struct.av, %struct.av* %18, i32 0, i32 3
  %svu_array = bitcast %union.anon.3* %sv_u to %struct.sv***
  %19 = load %struct.sv**, %struct.sv*** %svu_array, align 8
  store %struct.sv** %19, %struct.sv*** @PL_stack_base, align 8
  %20 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %21 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_stack6 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %21, i32 0, i32 0
  %22 = load %struct.av*, %struct.av** %si_stack6, align 8
  %sv_any7 = getelementptr inbounds %struct.av, %struct.av* %22, i32 0, i32 0
  %23 = load %struct.xpvav*, %struct.xpvav** %sv_any7, align 8
  %xav_max = getelementptr inbounds %struct.xpvav, %struct.xpvav* %23, i32 0, i32 3
  %24 = load i64, i64* %xav_max, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %20, i64 %24
  store %struct.sv** %add.ptr, %struct.sv*** @PL_stack_max, align 8
  %25 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %26 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_stack8 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %26, i32 0, i32 0
  %27 = load %struct.av*, %struct.av** %si_stack8, align 8
  %sv_any9 = getelementptr inbounds %struct.av, %struct.av* %27, i32 0, i32 0
  %28 = load %struct.xpvav*, %struct.xpvav** %sv_any9, align 8
  %xav_fill10 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %28, i32 0, i32 2
  %29 = load i64, i64* %xav_fill10, align 8
  %add.ptr11 = getelementptr inbounds %struct.sv*, %struct.sv** %25, i64 %29
  store %struct.sv** %add.ptr11, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %add.ptr11, %struct.sv*** %sp, align 8
  %30 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_stack12 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %30, i32 0, i32 0
  %31 = load %struct.av*, %struct.av** %si_stack12, align 8
  store %struct.av* %31, %struct.av** @PL_curstack, align 8
  br label %do.end

do.end:                                           ; preds = %do.body2
  %32 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  store %struct.stackinfo* %32, %struct.stackinfo** @PL_curstackinfo, align 8
  br label %do.end13

do.end13:                                         ; preds = %do.end
  %33 = load i8*, i8** %pv.addr, align 8
  %call14 = call %struct.sv* (i8*, ...) @Perl_newSVpvf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16, i64 0, i64 0), i32 0, i8* %33, i32 0)
  store %struct.sv* %call14, %struct.sv** %sv, align 8
  %34 = load %struct.sv*, %struct.sv** %sv, align 8
  %call15 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %34)
  %call16 = call i32 @Perl_eval_sv(%struct.sv* %call15, i32 4)
  br label %do.body17

do.body17:                                        ; preds = %do.end13
  %35 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %35, %struct.sv*** %sp18, align 8
  %36 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_prev19 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %36, i32 0, i32 2
  %37 = load %struct.stackinfo*, %struct.stackinfo** %si_prev19, align 8
  store %struct.stackinfo* %37, %struct.stackinfo** %prev, align 8
  %38 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %tobool20 = icmp ne %struct.stackinfo* %38, null
  br i1 %tobool20, label %if.end22, label %if.then21

if.then21:                                        ; preds = %do.body17
  call void @Perl_croak_popstack()
  br label %if.end22

if.end22:                                         ; preds = %if.then21, %do.body17
  br label %do.body23

do.body23:                                        ; preds = %if.end22
  %39 = load %struct.sv**, %struct.sv*** %sp18, align 8
  %40 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast24 = ptrtoint %struct.sv** %39 to i64
  %sub.ptr.rhs.cast25 = ptrtoint %struct.sv** %40 to i64
  %sub.ptr.sub26 = sub i64 %sub.ptr.lhs.cast24, %sub.ptr.rhs.cast25
  %sub.ptr.div27 = sdiv exact i64 %sub.ptr.sub26, 8
  %41 = load %struct.av*, %struct.av** @PL_curstack, align 8
  %sv_any28 = getelementptr inbounds %struct.av, %struct.av* %41, i32 0, i32 0
  %42 = load %struct.xpvav*, %struct.xpvav** %sv_any28, align 8
  %xav_fill29 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %42, i32 0, i32 2
  store i64 %sub.ptr.div27, i64* %xav_fill29, align 8
  %43 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %si_stack30 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %43, i32 0, i32 0
  %44 = load %struct.av*, %struct.av** %si_stack30, align 8
  %sv_u31 = getelementptr inbounds %struct.av, %struct.av* %44, i32 0, i32 3
  %svu_array32 = bitcast %union.anon.3* %sv_u31 to %struct.sv***
  %45 = load %struct.sv**, %struct.sv*** %svu_array32, align 8
  store %struct.sv** %45, %struct.sv*** @PL_stack_base, align 8
  %46 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %47 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %si_stack33 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %47, i32 0, i32 0
  %48 = load %struct.av*, %struct.av** %si_stack33, align 8
  %sv_any34 = getelementptr inbounds %struct.av, %struct.av* %48, i32 0, i32 0
  %49 = load %struct.xpvav*, %struct.xpvav** %sv_any34, align 8
  %xav_max35 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %49, i32 0, i32 3
  %50 = load i64, i64* %xav_max35, align 8
  %add.ptr36 = getelementptr inbounds %struct.sv*, %struct.sv** %46, i64 %50
  store %struct.sv** %add.ptr36, %struct.sv*** @PL_stack_max, align 8
  %51 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %52 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %si_stack37 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %52, i32 0, i32 0
  %53 = load %struct.av*, %struct.av** %si_stack37, align 8
  %sv_any38 = getelementptr inbounds %struct.av, %struct.av* %53, i32 0, i32 0
  %54 = load %struct.xpvav*, %struct.xpvav** %sv_any38, align 8
  %xav_fill39 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %54, i32 0, i32 2
  %55 = load i64, i64* %xav_fill39, align 8
  %add.ptr40 = getelementptr inbounds %struct.sv*, %struct.sv** %51, i64 %55
  store %struct.sv** %add.ptr40, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %add.ptr40, %struct.sv*** %sp18, align 8
  %56 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %si_stack41 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %56, i32 0, i32 0
  %57 = load %struct.av*, %struct.av** %si_stack41, align 8
  store %struct.av* %57, %struct.av** @PL_curstack, align 8
  br label %do.end42

do.end42:                                         ; preds = %do.body23
  %58 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  store %struct.stackinfo* %58, %struct.stackinfo** @PL_curstackinfo, align 8
  br label %do.end43

do.end43:                                         ; preds = %do.end42
  ret void
}

declare dso_local %struct.stackinfo* @Perl_new_stackinfo(i32, i32) #2

declare dso_local %struct.sv* @Perl_newSVpvf(i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @Perl_moreswitches(i8* %s) #0 {
entry:
  %retval = alloca i8*, align 8
  %s.addr = alloca i8*, align 8
  %rschar = alloca i64, align 8
  %option = alloca i8, align 1
  %flags = alloca i32, align 4
  %numlen = alloca i64, align 8
  %e = alloca i8*, align 8
  %tmps = alloca i8*, align 8
  %ch = alloca i8, align 1
  %start = alloca i8*, align 8
  %end = alloca i8*, align 8
  %sv = alloca %struct.sv*, align 8
  %start282 = alloca i8*, align 8
  %e330 = alloca i8*, align 8
  %p = alloca i8*, align 8
  %flags387 = alloca i32, align 4
  %numlen388 = alloca i64, align 8
  %start419 = alloca i8*, align 8
  %end420 = alloca i8*, align 8
  %sv421 = alloca %struct.sv*, align 8
  %use = alloca i8*, align 8
  %colon = alloca i8, align 1
  store i8* %s, i8** %s.addr, align 8
  %0 = load i8*, i8** %s.addr, align 8
  %1 = load i8, i8* %0, align 1
  store i8 %1, i8* %option, align 1
  %2 = load i8*, i8** %s.addr, align 8
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  switch i32 %conv, label %sw.default [
    i32 48, label %sw.bb
    i32 67, label %sw.bb165
    i32 70, label %sw.bb172
    i32 97, label %sw.bb189
    i32 99, label %sw.bb191
    i32 100, label %sw.bb193
    i32 68, label %sw.bb269
    i32 104, label %sw.bb280
    i32 105, label %sw.bb281
    i32 73, label %sw.bb313
    i32 108, label %sw.bb375
    i32 77, label %sw.bb414
    i32 109, label %sw.bb415
    i32 110, label %sw.bb500
    i32 112, label %sw.bb502
    i32 115, label %sw.bb504
    i32 116, label %sw.bb506
    i32 84, label %sw.bb506
    i32 117, label %sw.bb512
    i32 85, label %sw.bb514
    i32 118, label %sw.bb516
    i32 119, label %sw.bb517
    i32 87, label %sw.bb527
    i32 88, label %sw.bb539
    i32 42, label %sw.bb551
    i32 32, label %sw.bb551
    i32 45, label %sw.bb566
    i32 0, label %sw.bb566
    i32 13, label %sw.bb566
    i32 10, label %sw.bb566
    i32 9, label %sw.bb566
    i32 101, label %sw.bb567
    i32 102, label %sw.bb567
    i32 120, label %sw.bb567
    i32 69, label %sw.bb567
    i32 83, label %sw.bb567
    i32 86, label %sw.bb567
  ]

sw.bb:                                            ; preds = %entry
  store i32 0, i32* %flags, align 4
  %4 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %5 = bitcast %struct.sv* %4 to i8*
  %6 = bitcast i8* %5 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %6)
  %7 = load i8*, i8** %s.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %7, i64 1
  %8 = load i8, i8* %arrayidx, align 1
  %conv1 = sext i8 %8 to i32
  %cmp = icmp eq i32 %conv1, 120
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %sw.bb
  %9 = load i8*, i8** %s.addr, align 8
  %arrayidx3 = getelementptr inbounds i8, i8* %9, i64 2
  %10 = load i8, i8* %arrayidx3, align 1
  %conv4 = sext i8 %10 to i32
  %tobool = icmp ne i32 %conv4, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %11 = load i8*, i8** %s.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %11, i64 2
  store i8* %add.ptr, i8** %s.addr, align 8
  store i8* %add.ptr, i8** %e, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %12 = load i8*, i8** %e, align 8
  %13 = load i8, i8* %12, align 1
  %tobool5 = icmp ne i8 %13, 0
  br i1 %tobool5, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %14 = load i8*, i8** %e, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %14, i32 1
  store i8* %incdec.ptr, i8** %e, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %15 = load i8*, i8** %e, align 8
  %16 = load i8*, i8** %s.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %15 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %16 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %numlen, align 8
  store i32 4, i32* %flags, align 4
  %17 = load i8*, i8** %s.addr, align 8
  %call = call i64 @Perl_grok_hex(i8* %17, i64* %numlen, i32* %flags, double* null)
  %conv6 = trunc i64 %call to i32
  %conv7 = zext i32 %conv6 to i64
  store i64 %conv7, i64* %rschar, align 8
  %18 = load i8*, i8** %s.addr, align 8
  %19 = load i64, i64* %numlen, align 8
  %add.ptr8 = getelementptr inbounds i8, i8* %18, i64 %19
  %20 = load i8*, i8** %e, align 8
  %cmp9 = icmp ult i8* %add.ptr8, %20
  br i1 %cmp9, label %if.then11, label %if.end

if.then11:                                        ; preds = %while.end
  store i64 0, i64* %rschar, align 8
  store i64 0, i64* %numlen, align 8
  %21 = load i8*, i8** %s.addr, align 8
  %incdec.ptr12 = getelementptr inbounds i8, i8* %21, i32 -1
  store i8* %incdec.ptr12, i8** %s.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then11, %while.end
  %call13 = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), i64 0)
  store %struct.sv* %call13, %struct.sv** @PL_rs, align 8
  %22 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 2
  %23 = load i32, i32* %sv_flags, align 4
  %and = and i32 %23, 268435456
  %tobool14 = icmp ne i32 %and, 0
  br i1 %tobool14, label %cond.true53, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %24 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 0
  %25 = load i8*, i8** %sv_any, align 8
  %26 = bitcast i8* %25 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %26, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.41* %xpv_len_u to i64*
  %27 = load i64, i64* %xpvlenu_len, align 8
  %28 = load i64, i64* %rschar, align 8
  %cmp15 = icmp ult i64 %28, 128
  br i1 %cmp15, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false
  br label %cond.end48

cond.false:                                       ; preds = %lor.lhs.false
  %29 = load i64, i64* %rschar, align 8
  %cmp17 = icmp ult i64 %29, 2048
  br i1 %cmp17, label %cond.true19, label %cond.false20

cond.true19:                                      ; preds = %cond.false
  br label %cond.end46

cond.false20:                                     ; preds = %cond.false
  %30 = load i64, i64* %rschar, align 8
  %cmp21 = icmp ult i64 %30, 65536
  br i1 %cmp21, label %cond.true23, label %cond.false24

cond.true23:                                      ; preds = %cond.false20
  br label %cond.end44

cond.false24:                                     ; preds = %cond.false20
  %31 = load i64, i64* %rschar, align 8
  %cmp25 = icmp ult i64 %31, 2097152
  br i1 %cmp25, label %cond.true27, label %cond.false28

cond.true27:                                      ; preds = %cond.false24
  br label %cond.end42

cond.false28:                                     ; preds = %cond.false24
  %32 = load i64, i64* %rschar, align 8
  %cmp29 = icmp ult i64 %32, 67108864
  br i1 %cmp29, label %cond.true31, label %cond.false32

cond.true31:                                      ; preds = %cond.false28
  br label %cond.end40

cond.false32:                                     ; preds = %cond.false28
  %33 = load i64, i64* %rschar, align 8
  %cmp33 = icmp ult i64 %33, 2147483648
  br i1 %cmp33, label %cond.true35, label %cond.false36

cond.true35:                                      ; preds = %cond.false32
  br label %cond.end

cond.false36:                                     ; preds = %cond.false32
  %34 = load i64, i64* %rschar, align 8
  %cmp37 = icmp ult i64 %34, 68719476736
  %35 = zext i1 %cmp37 to i64
  %cond = select i1 %cmp37, i32 7, i32 13
  br label %cond.end

cond.end:                                         ; preds = %cond.false36, %cond.true35
  %cond39 = phi i32 [ 6, %cond.true35 ], [ %cond, %cond.false36 ]
  br label %cond.end40

cond.end40:                                       ; preds = %cond.end, %cond.true31
  %cond41 = phi i32 [ 5, %cond.true31 ], [ %cond39, %cond.end ]
  br label %cond.end42

cond.end42:                                       ; preds = %cond.end40, %cond.true27
  %cond43 = phi i32 [ 4, %cond.true27 ], [ %cond41, %cond.end40 ]
  br label %cond.end44

cond.end44:                                       ; preds = %cond.end42, %cond.true23
  %cond45 = phi i32 [ 3, %cond.true23 ], [ %cond43, %cond.end42 ]
  br label %cond.end46

cond.end46:                                       ; preds = %cond.end44, %cond.true19
  %cond47 = phi i32 [ 2, %cond.true19 ], [ %cond45, %cond.end44 ]
  br label %cond.end48

cond.end48:                                       ; preds = %cond.end46, %cond.true
  %cond49 = phi i32 [ 1, %cond.true ], [ %cond47, %cond.end46 ]
  %add = add nsw i32 %cond49, 1
  %conv50 = sext i32 %add to i64
  %cmp51 = icmp ult i64 %27, %conv50
  br i1 %cmp51, label %cond.true53, label %cond.false96

cond.true53:                                      ; preds = %cond.end48, %if.end
  %36 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %37 = load i64, i64* %rschar, align 8
  %cmp54 = icmp ult i64 %37, 128
  br i1 %cmp54, label %cond.true56, label %cond.false57

cond.true56:                                      ; preds = %cond.true53
  br label %cond.end91

cond.false57:                                     ; preds = %cond.true53
  %38 = load i64, i64* %rschar, align 8
  %cmp58 = icmp ult i64 %38, 2048
  br i1 %cmp58, label %cond.true60, label %cond.false61

cond.true60:                                      ; preds = %cond.false57
  br label %cond.end89

cond.false61:                                     ; preds = %cond.false57
  %39 = load i64, i64* %rschar, align 8
  %cmp62 = icmp ult i64 %39, 65536
  br i1 %cmp62, label %cond.true64, label %cond.false65

cond.true64:                                      ; preds = %cond.false61
  br label %cond.end87

cond.false65:                                     ; preds = %cond.false61
  %40 = load i64, i64* %rschar, align 8
  %cmp66 = icmp ult i64 %40, 2097152
  br i1 %cmp66, label %cond.true68, label %cond.false69

cond.true68:                                      ; preds = %cond.false65
  br label %cond.end85

cond.false69:                                     ; preds = %cond.false65
  %41 = load i64, i64* %rschar, align 8
  %cmp70 = icmp ult i64 %41, 67108864
  br i1 %cmp70, label %cond.true72, label %cond.false73

cond.true72:                                      ; preds = %cond.false69
  br label %cond.end83

cond.false73:                                     ; preds = %cond.false69
  %42 = load i64, i64* %rschar, align 8
  %cmp74 = icmp ult i64 %42, 2147483648
  br i1 %cmp74, label %cond.true76, label %cond.false77

cond.true76:                                      ; preds = %cond.false73
  br label %cond.end81

cond.false77:                                     ; preds = %cond.false73
  %43 = load i64, i64* %rschar, align 8
  %cmp78 = icmp ult i64 %43, 68719476736
  %44 = zext i1 %cmp78 to i64
  %cond80 = select i1 %cmp78, i32 7, i32 13
  br label %cond.end81

cond.end81:                                       ; preds = %cond.false77, %cond.true76
  %cond82 = phi i32 [ 6, %cond.true76 ], [ %cond80, %cond.false77 ]
  br label %cond.end83

cond.end83:                                       ; preds = %cond.end81, %cond.true72
  %cond84 = phi i32 [ 5, %cond.true72 ], [ %cond82, %cond.end81 ]
  br label %cond.end85

cond.end85:                                       ; preds = %cond.end83, %cond.true68
  %cond86 = phi i32 [ 4, %cond.true68 ], [ %cond84, %cond.end83 ]
  br label %cond.end87

cond.end87:                                       ; preds = %cond.end85, %cond.true64
  %cond88 = phi i32 [ 3, %cond.true64 ], [ %cond86, %cond.end85 ]
  br label %cond.end89

cond.end89:                                       ; preds = %cond.end87, %cond.true60
  %cond90 = phi i32 [ 2, %cond.true60 ], [ %cond88, %cond.end87 ]
  br label %cond.end91

cond.end91:                                       ; preds = %cond.end89, %cond.true56
  %cond92 = phi i32 [ 1, %cond.true56 ], [ %cond90, %cond.end89 ]
  %add93 = add nsw i32 %cond92, 1
  %conv94 = sext i32 %add93 to i64
  %call95 = call i8* @Perl_sv_grow(%struct.sv* %36, i64 %conv94)
  br label %cond.end97

cond.false96:                                     ; preds = %cond.end48
  %45 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %45, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %46 = load i8*, i8** %svu_pv, align 8
  br label %cond.end97

cond.end97:                                       ; preds = %cond.false96, %cond.end91
  %cond98 = phi i8* [ %call95, %cond.end91 ], [ %46, %cond.false96 ]
  %47 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_u99 = getelementptr inbounds %struct.sv, %struct.sv* %47, i32 0, i32 3
  %svu_pv100 = bitcast %union.anon* %sv_u99 to i8**
  %48 = load i8*, i8** %svu_pv100, align 8
  store i8* %48, i8** %tmps, align 8
  %49 = load i8*, i8** %tmps, align 8
  %50 = load i64, i64* %rschar, align 8
  %call101 = call i8* @Perl_uvoffuni_to_utf8_flags(i8* %49, i64 %50, i64 0)
  br label %do.body

do.body:                                          ; preds = %cond.end97
  %51 = load i64, i64* %rschar, align 8
  %cmp102 = icmp ult i64 %51, 128
  br i1 %cmp102, label %cond.true104, label %cond.false105

cond.true104:                                     ; preds = %do.body
  br label %cond.end139

cond.false105:                                    ; preds = %do.body
  %52 = load i64, i64* %rschar, align 8
  %cmp106 = icmp ult i64 %52, 2048
  br i1 %cmp106, label %cond.true108, label %cond.false109

cond.true108:                                     ; preds = %cond.false105
  br label %cond.end137

cond.false109:                                    ; preds = %cond.false105
  %53 = load i64, i64* %rschar, align 8
  %cmp110 = icmp ult i64 %53, 65536
  br i1 %cmp110, label %cond.true112, label %cond.false113

cond.true112:                                     ; preds = %cond.false109
  br label %cond.end135

cond.false113:                                    ; preds = %cond.false109
  %54 = load i64, i64* %rschar, align 8
  %cmp114 = icmp ult i64 %54, 2097152
  br i1 %cmp114, label %cond.true116, label %cond.false117

cond.true116:                                     ; preds = %cond.false113
  br label %cond.end133

cond.false117:                                    ; preds = %cond.false113
  %55 = load i64, i64* %rschar, align 8
  %cmp118 = icmp ult i64 %55, 67108864
  br i1 %cmp118, label %cond.true120, label %cond.false121

cond.true120:                                     ; preds = %cond.false117
  br label %cond.end131

cond.false121:                                    ; preds = %cond.false117
  %56 = load i64, i64* %rschar, align 8
  %cmp122 = icmp ult i64 %56, 2147483648
  br i1 %cmp122, label %cond.true124, label %cond.false125

cond.true124:                                     ; preds = %cond.false121
  br label %cond.end129

cond.false125:                                    ; preds = %cond.false121
  %57 = load i64, i64* %rschar, align 8
  %cmp126 = icmp ult i64 %57, 68719476736
  %58 = zext i1 %cmp126 to i64
  %cond128 = select i1 %cmp126, i32 7, i32 13
  br label %cond.end129

cond.end129:                                      ; preds = %cond.false125, %cond.true124
  %cond130 = phi i32 [ 6, %cond.true124 ], [ %cond128, %cond.false125 ]
  br label %cond.end131

cond.end131:                                      ; preds = %cond.end129, %cond.true120
  %cond132 = phi i32 [ 5, %cond.true120 ], [ %cond130, %cond.end129 ]
  br label %cond.end133

cond.end133:                                      ; preds = %cond.end131, %cond.true116
  %cond134 = phi i32 [ 4, %cond.true116 ], [ %cond132, %cond.end131 ]
  br label %cond.end135

cond.end135:                                      ; preds = %cond.end133, %cond.true112
  %cond136 = phi i32 [ 3, %cond.true112 ], [ %cond134, %cond.end133 ]
  br label %cond.end137

cond.end137:                                      ; preds = %cond.end135, %cond.true108
  %cond138 = phi i32 [ 2, %cond.true108 ], [ %cond136, %cond.end135 ]
  br label %cond.end139

cond.end139:                                      ; preds = %cond.end137, %cond.true104
  %cond140 = phi i32 [ 1, %cond.true104 ], [ %cond138, %cond.end137 ]
  %conv141 = sext i32 %cond140 to i64
  %59 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_any142 = getelementptr inbounds %struct.sv, %struct.sv* %59, i32 0, i32 0
  %60 = load i8*, i8** %sv_any142, align 8
  %61 = bitcast i8* %60 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %61, i32 0, i32 2
  store i64 %conv141, i64* %xpv_cur, align 8
  br label %do.end

do.end:                                           ; preds = %cond.end139
  %62 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_flags143 = getelementptr inbounds %struct.sv, %struct.sv* %62, i32 0, i32 2
  %63 = load i32, i32* %sv_flags143, align 4
  %or = or i32 %63, 536870912
  store i32 %or, i32* %sv_flags143, align 4
  br label %if.end162

if.else:                                          ; preds = %land.lhs.true, %sw.bb
  store i64 4, i64* %numlen, align 8
  %64 = load i8*, i8** %s.addr, align 8
  %call144 = call i64 @Perl_grok_oct(i8* %64, i64* %numlen, i32* %flags, double* null)
  %conv145 = trunc i64 %call144 to i32
  %conv146 = zext i32 %conv145 to i64
  store i64 %conv146, i64* %rschar, align 8
  %65 = load i64, i64* %rschar, align 8
  %and147 = and i64 %65, -256
  %tobool148 = icmp ne i64 %and147, 0
  br i1 %tobool148, label %if.then149, label %if.else150

if.then149:                                       ; preds = %if.else
  store %struct.sv* @PL_sv_undef, %struct.sv** @PL_rs, align 8
  br label %if.end161

if.else150:                                       ; preds = %if.else
  %66 = load i64, i64* %rschar, align 8
  %tobool151 = icmp ne i64 %66, 0
  br i1 %tobool151, label %if.else157, label %land.lhs.true152

land.lhs.true152:                                 ; preds = %if.else150
  %67 = load i64, i64* %numlen, align 8
  %cmp153 = icmp uge i64 %67, 2
  br i1 %cmp153, label %if.then155, label %if.else157

if.then155:                                       ; preds = %land.lhs.true152
  %call156 = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), i64 0)
  store %struct.sv* %call156, %struct.sv** @PL_rs, align 8
  br label %if.end160

if.else157:                                       ; preds = %land.lhs.true152, %if.else150
  %68 = load i64, i64* %rschar, align 8
  %conv158 = trunc i64 %68 to i8
  store i8 %conv158, i8* %ch, align 1
  %call159 = call %struct.sv* @Perl_newSVpvn(i8* %ch, i64 1)
  store %struct.sv* %call159, %struct.sv** @PL_rs, align 8
  br label %if.end160

if.end160:                                        ; preds = %if.else157, %if.then155
  br label %if.end161

if.end161:                                        ; preds = %if.end160, %if.then149
  br label %if.end162

if.end162:                                        ; preds = %if.end161, %do.end
  %call163 = call %struct.sv* @Perl_get_sv(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i64 0, i64 0), i32 1)
  %69 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %call163, %struct.sv* %69, i32 1538)
  %70 = load i8*, i8** %s.addr, align 8
  %71 = load i64, i64* %numlen, align 8
  %add.ptr164 = getelementptr inbounds i8, i8* %70, i64 %71
  store i8* %add.ptr164, i8** %retval, align 8
  br label %return

sw.bb165:                                         ; preds = %entry
  %72 = load i8*, i8** %s.addr, align 8
  %incdec.ptr166 = getelementptr inbounds i8, i8* %72, i32 1
  store i8* %incdec.ptr166, i8** %s.addr, align 8
  %call167 = call i32 @Perl_parse_unicode_opts(i8** %s.addr)
  store i32 %call167, i32* @PL_unicode, align 4
  %73 = load i32, i32* @PL_unicode, align 4
  %and168 = and i32 %73, 256
  %tobool169 = icmp ne i32 %and168, 0
  br i1 %tobool169, label %if.then170, label %if.end171

if.then170:                                       ; preds = %sw.bb165
  store i8 -1, i8* @PL_utf8cache, align 1
  br label %if.end171

if.end171:                                        ; preds = %if.then170, %sw.bb165
  %74 = load i8*, i8** %s.addr, align 8
  store i8* %74, i8** %retval, align 8
  br label %return

sw.bb172:                                         ; preds = %entry
  store i8 1, i8* @PL_minus_a, align 1
  store i8 1, i8* @PL_minus_F, align 1
  store i8 1, i8* @PL_minus_n, align 1
  %75 = load i8*, i8** %s.addr, align 8
  %incdec.ptr173 = getelementptr inbounds i8, i8* %75, i32 1
  store i8* %incdec.ptr173, i8** %s.addr, align 8
  store i8* %incdec.ptr173, i8** @PL_splitstr, align 8
  br label %while.cond174

while.cond174:                                    ; preds = %while.body181, %sw.bb172
  %76 = load i8*, i8** %s.addr, align 8
  %77 = load i8, i8* %76, align 1
  %conv175 = sext i8 %77 to i32
  %tobool176 = icmp ne i32 %conv175, 0
  br i1 %tobool176, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond174
  %78 = load i8*, i8** %s.addr, align 8
  %79 = load i8, i8* %78, align 1
  %idxprom = zext i8 %79 to i64
  %arrayidx177 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom
  %80 = load i32, i32* %arrayidx177, align 4
  %and178 = and i32 %80, 17408
  %cmp179 = icmp eq i32 %and178, 17408
  %lnot = xor i1 %cmp179, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond174
  %81 = phi i1 [ false, %while.cond174 ], [ %lnot, %land.rhs ]
  br i1 %81, label %while.body181, label %while.end183

while.body181:                                    ; preds = %land.end
  %82 = load i8*, i8** %s.addr, align 8
  %incdec.ptr182 = getelementptr inbounds i8, i8* %82, i32 1
  store i8* %incdec.ptr182, i8** %s.addr, align 8
  br label %while.cond174

while.end183:                                     ; preds = %land.end
  %83 = load i8*, i8** @PL_splitstr, align 8
  %84 = load i8*, i8** %s.addr, align 8
  %85 = load i8*, i8** @PL_splitstr, align 8
  %sub.ptr.lhs.cast184 = ptrtoint i8* %84 to i64
  %sub.ptr.rhs.cast185 = ptrtoint i8* %85 to i64
  %sub.ptr.sub186 = sub i64 %sub.ptr.lhs.cast184, %sub.ptr.rhs.cast185
  %conv187 = trunc i64 %sub.ptr.sub186 to i32
  %call188 = call i8* @Perl_savepvn(i8* %83, i32 %conv187)
  store i8* %call188, i8** @PL_splitstr, align 8
  %86 = load i8*, i8** %s.addr, align 8
  store i8* %86, i8** %retval, align 8
  br label %return

sw.bb189:                                         ; preds = %entry
  store i8 1, i8* @PL_minus_a, align 1
  store i8 1, i8* @PL_minus_n, align 1
  %87 = load i8*, i8** %s.addr, align 8
  %incdec.ptr190 = getelementptr inbounds i8, i8* %87, i32 1
  store i8* %incdec.ptr190, i8** %s.addr, align 8
  %88 = load i8*, i8** %s.addr, align 8
  store i8* %88, i8** %retval, align 8
  br label %return

sw.bb191:                                         ; preds = %entry
  store i8 1, i8* @PL_minus_c, align 1
  %89 = load i8*, i8** %s.addr, align 8
  %incdec.ptr192 = getelementptr inbounds i8, i8* %89, i32 1
  store i8* %incdec.ptr192, i8** %s.addr, align 8
  %90 = load i8*, i8** %s.addr, align 8
  store i8* %90, i8** %retval, align 8
  br label %return

sw.bb193:                                         ; preds = %entry
  call void @S_forbid_setid(i8 signext 100, i1 zeroext false)
  %91 = load i8*, i8** %s.addr, align 8
  %incdec.ptr194 = getelementptr inbounds i8, i8* %91, i32 1
  store i8* %incdec.ptr194, i8** %s.addr, align 8
  %92 = load i8*, i8** %s.addr, align 8
  %93 = load i8, i8* %92, align 1
  %conv195 = sext i8 %93 to i32
  %cmp196 = icmp eq i32 %conv195, 116
  br i1 %cmp196, label %land.lhs.true198, label %if.end207

land.lhs.true198:                                 ; preds = %sw.bb193
  %94 = load i8*, i8** %s.addr, align 8
  %arrayidx199 = getelementptr inbounds i8, i8* %94, i64 1
  %95 = load i8, i8* %arrayidx199, align 1
  %idxprom200 = zext i8 %95 to i64
  %arrayidx201 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom200
  %96 = load i32, i32* %arrayidx201, align 4
  %and202 = and i32 %96, 16385
  %cmp203 = icmp eq i32 %and202, 16385
  br i1 %cmp203, label %if.end207, label %if.then205

if.then205:                                       ; preds = %land.lhs.true198
  %97 = load i8*, i8** %s.addr, align 8
  %incdec.ptr206 = getelementptr inbounds i8, i8* %97, i32 1
  store i8* %incdec.ptr206, i8** %s.addr, align 8
  call void @Perl_my_setenv(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.18, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19, i64 0, i64 0))
  br label %if.end207

if.end207:                                        ; preds = %if.then205, %land.lhs.true198, %sw.bb193
  %98 = load i8*, i8** %s.addr, align 8
  %99 = load i8, i8* %98, align 1
  %conv208 = sext i8 %99 to i32
  %cmp209 = icmp eq i32 %conv208, 58
  br i1 %cmp209, label %if.then215, label %lor.lhs.false211

lor.lhs.false211:                                 ; preds = %if.end207
  %100 = load i8*, i8** %s.addr, align 8
  %101 = load i8, i8* %100, align 1
  %conv212 = sext i8 %101 to i32
  %cmp213 = icmp eq i32 %conv212, 61
  br i1 %cmp213, label %if.then215, label %if.end265

if.then215:                                       ; preds = %lor.lhs.false211, %if.end207
  %102 = load i8*, i8** %s.addr, align 8
  %incdec.ptr216 = getelementptr inbounds i8, i8* %102, i32 1
  store i8* %incdec.ptr216, i8** %s.addr, align 8
  %103 = load i8, i8* %incdec.ptr216, align 1
  %conv217 = sext i8 %103 to i32
  %cmp218 = icmp eq i32 %conv217, 45
  br i1 %cmp218, label %if.then220, label %if.else223

if.then220:                                       ; preds = %if.then215
  %104 = load i8*, i8** %s.addr, align 8
  %incdec.ptr221 = getelementptr inbounds i8, i8* %104, i32 1
  store i8* %incdec.ptr221, i8** %s.addr, align 8
  %call222 = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.20, i64 0, i64 0), i64 10)
  store %struct.sv* %call222, %struct.sv** %sv, align 8
  br label %if.end225

if.else223:                                       ; preds = %if.then215
  %call224 = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.21, i64 0, i64 0), i64 11)
  store %struct.sv* %call224, %struct.sv** %sv, align 8
  br label %if.end225

if.end225:                                        ; preds = %if.else223, %if.then220
  %105 = load i8*, i8** %s.addr, align 8
  store i8* %105, i8** %start, align 8
  %106 = load i8*, i8** %s.addr, align 8
  %107 = load i8*, i8** %s.addr, align 8
  %call226 = call i64 @strlen(i8* %107) #11
  %add.ptr227 = getelementptr inbounds i8, i8* %106, i64 %call226
  store i8* %add.ptr227, i8** %end, align 8
  br label %while.cond228

while.cond228:                                    ; preds = %while.body237, %if.end225
  %108 = load i8*, i8** %s.addr, align 8
  %109 = load i8, i8* %108, align 1
  %idxprom229 = zext i8 %109 to i64
  %arrayidx230 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom229
  %110 = load i32, i32* %arrayidx230, align 4
  %and231 = and i32 %110, 16385
  %cmp232 = icmp eq i32 %and231, 16385
  br i1 %cmp232, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %while.cond228
  %111 = load i8*, i8** %s.addr, align 8
  %112 = load i8, i8* %111, align 1
  %conv234 = sext i8 %112 to i32
  %cmp235 = icmp eq i32 %conv234, 58
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %while.cond228
  %113 = phi i1 [ true, %while.cond228 ], [ %cmp235, %lor.rhs ]
  br i1 %113, label %while.body237, label %while.end239

while.body237:                                    ; preds = %lor.end
  %114 = load i8*, i8** %s.addr, align 8
  %incdec.ptr238 = getelementptr inbounds i8, i8* %114, i32 1
  store i8* %incdec.ptr238, i8** %s.addr, align 8
  br label %while.cond228

while.end239:                                     ; preds = %lor.end
  %115 = load i8*, i8** %s.addr, align 8
  %116 = load i8, i8* %115, align 1
  %conv240 = sext i8 %116 to i32
  %cmp241 = icmp ne i32 %conv240, 61
  br i1 %cmp241, label %if.then243, label %if.else247

if.then243:                                       ; preds = %while.end239
  %117 = load %struct.sv*, %struct.sv** %sv, align 8
  %118 = load i8*, i8** %start, align 8
  %119 = load i8*, i8** %end, align 8
  %120 = load i8*, i8** %start, align 8
  %sub.ptr.lhs.cast244 = ptrtoint i8* %119 to i64
  %sub.ptr.rhs.cast245 = ptrtoint i8* %120 to i64
  %sub.ptr.sub246 = sub i64 %sub.ptr.lhs.cast244, %sub.ptr.rhs.cast245
  call void @Perl_sv_catpvn_flags(%struct.sv* %117, i8* %118, i64 %sub.ptr.sub246, i32 2)
  br label %if.end252

if.else247:                                       ; preds = %while.end239
  %121 = load %struct.sv*, %struct.sv** %sv, align 8
  %122 = load i8*, i8** %start, align 8
  %123 = load i8*, i8** %s.addr, align 8
  %124 = load i8*, i8** %start, align 8
  %sub.ptr.lhs.cast248 = ptrtoint i8* %123 to i64
  %sub.ptr.rhs.cast249 = ptrtoint i8* %124 to i64
  %sub.ptr.sub250 = sub i64 %sub.ptr.lhs.cast248, %sub.ptr.rhs.cast249
  call void @Perl_sv_catpvn_flags(%struct.sv* %121, i8* %122, i64 %sub.ptr.sub250, i32 2)
  %125 = load %struct.sv*, %struct.sv** %sv, align 8
  %126 = load i8*, i8** %s.addr, align 8
  %incdec.ptr251 = getelementptr inbounds i8, i8* %126, i32 1
  store i8* %incdec.ptr251, i8** %s.addr, align 8
  call void (%struct.sv*, i8*, ...) @Perl_sv_catpvf(%struct.sv* %125, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.22, i64 0, i64 0), i8* %incdec.ptr251)
  br label %if.end252

if.end252:                                        ; preds = %if.else247, %if.then243
  %127 = load i8*, i8** %end, align 8
  store i8* %127, i8** %s.addr, align 8
  %128 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags253 = getelementptr inbounds %struct.sv, %struct.sv* %128, i32 0, i32 2
  %129 = load i32, i32* %sv_flags253, align 4
  %and254 = and i32 %129, 2098176
  %cmp255 = icmp eq i32 %and254, 1024
  br i1 %cmp255, label %cond.true257, label %cond.false261

cond.true257:                                     ; preds = %if.end252
  %130 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u258 = getelementptr inbounds %struct.sv, %struct.sv* %130, i32 0, i32 3
  %svu_pv259 = bitcast %union.anon* %sv_u258 to i8**
  %131 = load i8*, i8** %svu_pv259, align 8
  %add.ptr260 = getelementptr inbounds i8, i8* %131, i64 0
  br label %cond.end263

cond.false261:                                    ; preds = %if.end252
  %132 = load %struct.sv*, %struct.sv** %sv, align 8
  %call262 = call i8* @Perl_sv_2pv_flags(%struct.sv* %132, i64* null, i32 34)
  br label %cond.end263

cond.end263:                                      ; preds = %cond.false261, %cond.true257
  %cond264 = phi i8* [ %add.ptr260, %cond.true257 ], [ %call262, %cond.false261 ]
  call void @Perl_my_setenv(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.23, i64 0, i64 0), i8* %cond264)
  %133 = load %struct.sv*, %struct.sv** %sv, align 8
  %134 = bitcast %struct.sv* %133 to i8*
  %135 = bitcast i8* %134 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %135)
  br label %if.end265

if.end265:                                        ; preds = %cond.end263, %lor.lhs.false211
  %136 = load i32, i32* @PL_perldb, align 4
  %tobool266 = icmp ne i32 %136, 0
  br i1 %tobool266, label %if.end268, label %if.then267

if.then267:                                       ; preds = %if.end265
  store i32 1855, i32* @PL_perldb, align 4
  call void @Perl_init_debugger()
  br label %if.end268

if.end268:                                        ; preds = %if.then267, %if.end265
  %137 = load i8*, i8** %s.addr, align 8
  store i8* %137, i8** %retval, align 8
  br label %return

sw.bb269:                                         ; preds = %entry
  %call270 = call zeroext i1 @Perl_ckwarn_d(i32 22)
  br i1 %call270, label %if.then271, label %if.end272

if.then271:                                       ; preds = %sw.bb269
  call void (i32, i8*, ...) @Perl_warner(i32 22, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.24, i64 0, i64 0))
  br label %if.end272

if.end272:                                        ; preds = %if.then271, %sw.bb269
  %138 = load i8*, i8** %s.addr, align 8
  %incdec.ptr273 = getelementptr inbounds i8, i8* %138, i32 1
  store i8* %incdec.ptr273, i8** %s.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end272
  %139 = load i8*, i8** %s.addr, align 8
  %140 = load i8, i8* %139, align 1
  %idxprom274 = zext i8 %140 to i64
  %arrayidx275 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom274
  %141 = load i32, i32* %arrayidx275, align 4
  %and276 = and i32 %141, 16385
  %cmp277 = icmp eq i32 %and276, 16385
  br i1 %cmp277, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %142 = load i8*, i8** %s.addr, align 8
  %incdec.ptr279 = getelementptr inbounds i8, i8* %142, i32 1
  store i8* %incdec.ptr279, i8** %s.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %143 = load i8*, i8** %s.addr, align 8
  store i8* %143, i8** %retval, align 8
  br label %return

sw.bb280:                                         ; preds = %entry
  call void @S_usage()
  br label %sw.bb281

sw.bb281:                                         ; preds = %entry, %sw.bb280
  %144 = load i8*, i8** @PL_inplace, align 8
  call void @Perl_safesysfree(i8* %144)
  %145 = load i8*, i8** %s.addr, align 8
  %incdec.ptr283 = getelementptr inbounds i8, i8* %145, i32 1
  store i8* %incdec.ptr283, i8** %s.addr, align 8
  store i8* %incdec.ptr283, i8** %start282, align 8
  br label %while.cond284

while.cond284:                                    ; preds = %while.body295, %sw.bb281
  %146 = load i8*, i8** %s.addr, align 8
  %147 = load i8, i8* %146, align 1
  %conv285 = sext i8 %147 to i32
  %tobool286 = icmp ne i32 %conv285, 0
  br i1 %tobool286, label %land.rhs287, label %land.end294

land.rhs287:                                      ; preds = %while.cond284
  %148 = load i8*, i8** %s.addr, align 8
  %149 = load i8, i8* %148, align 1
  %idxprom288 = zext i8 %149 to i64
  %arrayidx289 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom288
  %150 = load i32, i32* %arrayidx289, align 4
  %and290 = and i32 %150, 17408
  %cmp291 = icmp eq i32 %and290, 17408
  %lnot293 = xor i1 %cmp291, true
  br label %land.end294

land.end294:                                      ; preds = %land.rhs287, %while.cond284
  %151 = phi i1 [ false, %while.cond284 ], [ %lnot293, %land.rhs287 ]
  br i1 %151, label %while.body295, label %while.end297

while.body295:                                    ; preds = %land.end294
  %152 = load i8*, i8** %s.addr, align 8
  %incdec.ptr296 = getelementptr inbounds i8, i8* %152, i32 1
  store i8* %incdec.ptr296, i8** %s.addr, align 8
  br label %while.cond284

while.end297:                                     ; preds = %land.end294
  %153 = load i8*, i8** %start282, align 8
  %154 = load i8*, i8** %s.addr, align 8
  %155 = load i8*, i8** %start282, align 8
  %sub.ptr.lhs.cast298 = ptrtoint i8* %154 to i64
  %sub.ptr.rhs.cast299 = ptrtoint i8* %155 to i64
  %sub.ptr.sub300 = sub i64 %sub.ptr.lhs.cast298, %sub.ptr.rhs.cast299
  %conv301 = trunc i64 %sub.ptr.sub300 to i32
  %call302 = call i8* @Perl_savepvn(i8* %153, i32 %conv301)
  store i8* %call302, i8** @PL_inplace, align 8
  %156 = load i8*, i8** %s.addr, align 8
  %157 = load i8, i8* %156, align 1
  %tobool303 = icmp ne i8 %157, 0
  br i1 %tobool303, label %if.then304, label %if.end312

if.then304:                                       ; preds = %while.end297
  %158 = load i8*, i8** %s.addr, align 8
  %incdec.ptr305 = getelementptr inbounds i8, i8* %158, i32 1
  store i8* %incdec.ptr305, i8** %s.addr, align 8
  %159 = load i8*, i8** %s.addr, align 8
  %160 = load i8, i8* %159, align 1
  %conv306 = sext i8 %160 to i32
  %cmp307 = icmp eq i32 %conv306, 45
  br i1 %cmp307, label %if.then309, label %if.end311

if.then309:                                       ; preds = %if.then304
  %161 = load i8*, i8** %s.addr, align 8
  %incdec.ptr310 = getelementptr inbounds i8, i8* %161, i32 1
  store i8* %incdec.ptr310, i8** %s.addr, align 8
  br label %if.end311

if.end311:                                        ; preds = %if.then309, %if.then304
  br label %if.end312

if.end312:                                        ; preds = %if.end311, %while.end297
  %162 = load i8*, i8** %s.addr, align 8
  store i8* %162, i8** %retval, align 8
  br label %return

sw.bb313:                                         ; preds = %entry
  call void @S_forbid_setid(i8 signext 73, i1 zeroext false)
  %163 = load i8*, i8** %s.addr, align 8
  %incdec.ptr314 = getelementptr inbounds i8, i8* %163, i32 1
  store i8* %incdec.ptr314, i8** %s.addr, align 8
  br label %while.cond315

while.cond315:                                    ; preds = %while.body325, %sw.bb313
  %164 = load i8*, i8** %s.addr, align 8
  %165 = load i8, i8* %164, align 1
  %conv316 = sext i8 %165 to i32
  %tobool317 = icmp ne i32 %conv316, 0
  br i1 %tobool317, label %land.rhs318, label %land.end324

land.rhs318:                                      ; preds = %while.cond315
  %166 = load i8*, i8** %s.addr, align 8
  %167 = load i8, i8* %166, align 1
  %idxprom319 = zext i8 %167 to i64
  %arrayidx320 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom319
  %168 = load i32, i32* %arrayidx320, align 4
  %and321 = and i32 %168, 17408
  %cmp322 = icmp eq i32 %and321, 17408
  br label %land.end324

land.end324:                                      ; preds = %land.rhs318, %while.cond315
  %169 = phi i1 [ false, %while.cond315 ], [ %cmp322, %land.rhs318 ]
  br i1 %169, label %while.body325, label %while.end327

while.body325:                                    ; preds = %land.end324
  %170 = load i8*, i8** %s.addr, align 8
  %incdec.ptr326 = getelementptr inbounds i8, i8* %170, i32 1
  store i8* %incdec.ptr326, i8** %s.addr, align 8
  br label %while.cond315

while.end327:                                     ; preds = %land.end324
  %171 = load i8*, i8** %s.addr, align 8
  %172 = load i8, i8* %171, align 1
  %tobool328 = icmp ne i8 %172, 0
  br i1 %tobool328, label %if.then329, label %if.else373

if.then329:                                       ; preds = %while.end327
  %173 = load i8*, i8** %s.addr, align 8
  store i8* %173, i8** %p, align 8
  br label %do.body331

do.body331:                                       ; preds = %land.end362, %if.then329
  %174 = load i8*, i8** %p, align 8
  store i8* %174, i8** %e330, align 8
  br label %for.cond332

for.cond332:                                      ; preds = %for.inc344, %do.body331
  %175 = load i8*, i8** %e330, align 8
  %176 = load i8, i8* %175, align 1
  %conv333 = sext i8 %176 to i32
  %tobool334 = icmp ne i32 %conv333, 0
  br i1 %tobool334, label %land.rhs335, label %land.end342

land.rhs335:                                      ; preds = %for.cond332
  %177 = load i8*, i8** %e330, align 8
  %178 = load i8, i8* %177, align 1
  %idxprom336 = zext i8 %178 to i64
  %arrayidx337 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom336
  %179 = load i32, i32* %arrayidx337, align 4
  %and338 = and i32 %179, 17408
  %cmp339 = icmp eq i32 %and338, 17408
  %lnot341 = xor i1 %cmp339, true
  br label %land.end342

land.end342:                                      ; preds = %land.rhs335, %for.cond332
  %180 = phi i1 [ false, %for.cond332 ], [ %lnot341, %land.rhs335 ]
  br i1 %180, label %for.body343, label %for.end346

for.body343:                                      ; preds = %land.end342
  br label %for.inc344

for.inc344:                                       ; preds = %for.body343
  %181 = load i8*, i8** %e330, align 8
  %incdec.ptr345 = getelementptr inbounds i8, i8* %181, i32 1
  store i8* %incdec.ptr345, i8** %e330, align 8
  br label %for.cond332

for.end346:                                       ; preds = %land.end342
  %182 = load i8*, i8** %e330, align 8
  store i8* %182, i8** %p, align 8
  br label %while.cond347

while.cond347:                                    ; preds = %while.body353, %for.end346
  %183 = load i8*, i8** %p, align 8
  %184 = load i8, i8* %183, align 1
  %idxprom348 = zext i8 %184 to i64
  %arrayidx349 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom348
  %185 = load i32, i32* %arrayidx349, align 4
  %and350 = and i32 %185, 17408
  %cmp351 = icmp eq i32 %and350, 17408
  br i1 %cmp351, label %while.body353, label %while.end355

while.body353:                                    ; preds = %while.cond347
  %186 = load i8*, i8** %p, align 8
  %incdec.ptr354 = getelementptr inbounds i8, i8* %186, i32 1
  store i8* %incdec.ptr354, i8** %p, align 8
  br label %while.cond347

while.end355:                                     ; preds = %while.cond347
  br label %do.cond

do.cond:                                          ; preds = %while.end355
  %187 = load i8*, i8** %p, align 8
  %188 = load i8, i8* %187, align 1
  %conv356 = sext i8 %188 to i32
  %tobool357 = icmp ne i32 %conv356, 0
  br i1 %tobool357, label %land.rhs358, label %land.end362

land.rhs358:                                      ; preds = %do.cond
  %189 = load i8*, i8** %p, align 8
  %190 = load i8, i8* %189, align 1
  %conv359 = sext i8 %190 to i32
  %cmp360 = icmp ne i32 %conv359, 45
  br label %land.end362

land.end362:                                      ; preds = %land.rhs358, %do.cond
  %191 = phi i1 [ false, %do.cond ], [ %cmp360, %land.rhs358 ]
  br i1 %191, label %do.body331, label %do.end363

do.end363:                                        ; preds = %land.end362
  %192 = load i8*, i8** %s.addr, align 8
  %193 = load i8*, i8** %e330, align 8
  %194 = load i8*, i8** %s.addr, align 8
  %sub.ptr.lhs.cast364 = ptrtoint i8* %193 to i64
  %sub.ptr.rhs.cast365 = ptrtoint i8* %194 to i64
  %sub.ptr.sub366 = sub i64 %sub.ptr.lhs.cast364, %sub.ptr.rhs.cast365
  call void @S_incpush(i8* %192, i64 %sub.ptr.sub366, i32 15)
  %195 = load i8*, i8** %p, align 8
  store i8* %195, i8** %s.addr, align 8
  %196 = load i8*, i8** %s.addr, align 8
  %197 = load i8, i8* %196, align 1
  %conv367 = sext i8 %197 to i32
  %cmp368 = icmp eq i32 %conv367, 45
  br i1 %cmp368, label %if.then370, label %if.end372

if.then370:                                       ; preds = %do.end363
  %198 = load i8*, i8** %s.addr, align 8
  %incdec.ptr371 = getelementptr inbounds i8, i8* %198, i32 1
  store i8* %incdec.ptr371, i8** %s.addr, align 8
  br label %if.end372

if.end372:                                        ; preds = %if.then370, %do.end363
  br label %if.end374

if.else373:                                       ; preds = %while.end327
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.25, i64 0, i64 0))
  br label %if.end374

if.end374:                                        ; preds = %if.else373, %if.end372
  %199 = load i8*, i8** %s.addr, align 8
  store i8* %199, i8** %retval, align 8
  br label %return

sw.bb375:                                         ; preds = %entry
  store i8 1, i8* @PL_minus_l, align 1
  %200 = load i8*, i8** %s.addr, align 8
  %incdec.ptr376 = getelementptr inbounds i8, i8* %200, i32 1
  store i8* %incdec.ptr376, i8** %s.addr, align 8
  %201 = load %struct.sv*, %struct.sv** @PL_ors_sv, align 8
  %tobool377 = icmp ne %struct.sv* %201, null
  br i1 %tobool377, label %if.then378, label %if.end379

if.then378:                                       ; preds = %sw.bb375
  %202 = load %struct.sv*, %struct.sv** @PL_ors_sv, align 8
  %203 = bitcast %struct.sv* %202 to i8*
  %204 = bitcast i8* %203 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %204)
  store %struct.sv* null, %struct.sv** @PL_ors_sv, align 8
  br label %if.end379

if.end379:                                        ; preds = %if.then378, %sw.bb375
  %205 = load i8*, i8** %s.addr, align 8
  %206 = load i8, i8* %205, align 1
  %idxprom380 = zext i8 %206 to i64
  %arrayidx381 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom380
  %207 = load i32, i32* %arrayidx381, align 4
  %and382 = and i32 %207, 2
  %tobool383 = icmp ne i32 %and382, 0
  br i1 %tobool383, label %cond.true384, label %cond.false385

cond.true384:                                     ; preds = %if.end379
  br i1 true, label %if.then386, label %if.else400

cond.false385:                                    ; preds = %if.end379
  br i1 false, label %if.then386, label %if.else400

if.then386:                                       ; preds = %cond.false385, %cond.true384
  store i32 0, i32* %flags387, align 4
  %call389 = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0), i64 1)
  store %struct.sv* %call389, %struct.sv** @PL_ors_sv, align 8
  %208 = load i8*, i8** %s.addr, align 8
  %209 = load i8, i8* %208, align 1
  %conv390 = sext i8 %209 to i32
  %cmp391 = icmp eq i32 %conv390, 48
  %conv392 = zext i1 %cmp391 to i32
  %add393 = add nsw i32 3, %conv392
  %conv394 = sext i32 %add393 to i64
  store i64 %conv394, i64* %numlen388, align 8
  %210 = load i8*, i8** %s.addr, align 8
  %call395 = call i64 @Perl_grok_oct(i8* %210, i64* %numlen388, i32* %flags387, double* null)
  %conv396 = trunc i64 %call395 to i8
  %211 = load %struct.sv*, %struct.sv** @PL_ors_sv, align 8
  %sv_u397 = getelementptr inbounds %struct.sv, %struct.sv* %211, i32 0, i32 3
  %svu_pv398 = bitcast %union.anon* %sv_u397 to i8**
  %212 = load i8*, i8** %svu_pv398, align 8
  store i8 %conv396, i8* %212, align 1
  %213 = load i64, i64* %numlen388, align 8
  %214 = load i8*, i8** %s.addr, align 8
  %add.ptr399 = getelementptr inbounds i8, i8* %214, i64 %213
  store i8* %add.ptr399, i8** %s.addr, align 8
  br label %if.end413

if.else400:                                       ; preds = %cond.false385, %cond.true384
  %215 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_flags401 = getelementptr inbounds %struct.sv, %struct.sv* %215, i32 0, i32 2
  %216 = load i32, i32* %sv_flags401, align 4
  %and402 = and i32 %216, 1024
  %tobool403 = icmp ne i32 %and402, 0
  br i1 %tobool403, label %land.lhs.true404, label %if.else410

land.lhs.true404:                                 ; preds = %if.else400
  %217 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_any405 = getelementptr inbounds %struct.sv, %struct.sv* %217, i32 0, i32 0
  %218 = load i8*, i8** %sv_any405, align 8
  %219 = bitcast i8* %218 to %struct.xpv*
  %xpv_cur406 = getelementptr inbounds %struct.xpv, %struct.xpv* %219, i32 0, i32 2
  %220 = load i64, i64* %xpv_cur406, align 8
  %tobool407 = icmp ne i64 %220, 0
  br i1 %tobool407, label %if.else410, label %if.then408

if.then408:                                       ; preds = %land.lhs.true404
  %call409 = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.26, i64 0, i64 0), i64 2)
  store %struct.sv* %call409, %struct.sv** @PL_ors_sv, align 8
  br label %if.end412

if.else410:                                       ; preds = %land.lhs.true404, %if.else400
  %221 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %call411 = call %struct.sv* @Perl_newSVsv(%struct.sv* %221)
  store %struct.sv* %call411, %struct.sv** @PL_ors_sv, align 8
  br label %if.end412

if.end412:                                        ; preds = %if.else410, %if.then408
  br label %if.end413

if.end413:                                        ; preds = %if.end412, %if.then386
  %222 = load i8*, i8** %s.addr, align 8
  store i8* %222, i8** %retval, align 8
  br label %return

sw.bb414:                                         ; preds = %entry
  call void @S_forbid_setid(i8 signext 77, i1 zeroext false)
  br label %sw.bb415

sw.bb415:                                         ; preds = %entry, %sw.bb414
  call void @S_forbid_setid(i8 signext 109, i1 zeroext false)
  %223 = load i8*, i8** %s.addr, align 8
  %incdec.ptr416 = getelementptr inbounds i8, i8* %223, i32 1
  store i8* %incdec.ptr416, i8** %s.addr, align 8
  %224 = load i8, i8* %incdec.ptr416, align 1
  %tobool417 = icmp ne i8 %224, 0
  br i1 %tobool417, label %if.then418, label %if.else497

if.then418:                                       ; preds = %sw.bb415
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.27, i64 0, i64 0), i8** %use, align 8
  store i8 0, i8* %colon, align 1
  %225 = load i8*, i8** %s.addr, align 8
  %226 = load i8, i8* %225, align 1
  %conv422 = sext i8 %226 to i32
  %cmp423 = icmp eq i32 %conv422, 45
  br i1 %cmp423, label %if.then425, label %if.end427

if.then425:                                       ; preds = %if.then418
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.28, i64 0, i64 0), i8** %use, align 8
  %227 = load i8*, i8** %s.addr, align 8
  %incdec.ptr426 = getelementptr inbounds i8, i8* %227, i32 1
  store i8* %incdec.ptr426, i8** %s.addr, align 8
  br label %if.end427

if.end427:                                        ; preds = %if.then425, %if.then418
  %228 = load i8*, i8** %use, align 8
  %call428 = call %struct.sv* @Perl_newSVpvn(i8* %228, i64 4)
  store %struct.sv* %call428, %struct.sv** %sv421, align 8
  %229 = load i8*, i8** %s.addr, align 8
  store i8* %229, i8** %start419, align 8
  br label %while.cond429

while.cond429:                                    ; preds = %if.end453, %if.end427
  %230 = load i8*, i8** %s.addr, align 8
  %231 = load i8, i8* %230, align 1
  %idxprom430 = zext i8 %231 to i64
  %arrayidx431 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom430
  %232 = load i32, i32* %arrayidx431, align 4
  %and432 = and i32 %232, 16385
  %cmp433 = icmp eq i32 %and432, 16385
  br i1 %cmp433, label %lor.end439, label %lor.rhs435

lor.rhs435:                                       ; preds = %while.cond429
  %233 = load i8*, i8** %s.addr, align 8
  %234 = load i8, i8* %233, align 1
  %conv436 = sext i8 %234 to i32
  %cmp437 = icmp eq i32 %conv436, 58
  br label %lor.end439

lor.end439:                                       ; preds = %lor.rhs435, %while.cond429
  %235 = phi i1 [ true, %while.cond429 ], [ %cmp437, %lor.rhs435 ]
  br i1 %235, label %while.body440, label %while.end454

while.body440:                                    ; preds = %lor.end439
  %236 = load i8*, i8** %s.addr, align 8
  %incdec.ptr441 = getelementptr inbounds i8, i8* %236, i32 1
  store i8* %incdec.ptr441, i8** %s.addr, align 8
  %237 = load i8, i8* %236, align 1
  %conv442 = sext i8 %237 to i32
  %cmp443 = icmp eq i32 %conv442, 58
  br i1 %cmp443, label %if.then445, label %if.end453

if.then445:                                       ; preds = %while.body440
  %238 = load i8*, i8** %s.addr, align 8
  %239 = load i8, i8* %238, align 1
  %conv446 = sext i8 %239 to i32
  %cmp447 = icmp eq i32 %conv446, 58
  br i1 %cmp447, label %if.then449, label %if.else451

if.then449:                                       ; preds = %if.then445
  %240 = load i8*, i8** %s.addr, align 8
  %incdec.ptr450 = getelementptr inbounds i8, i8* %240, i32 1
  store i8* %incdec.ptr450, i8** %s.addr, align 8
  br label %if.end452

if.else451:                                       ; preds = %if.then445
  store i8 1, i8* %colon, align 1
  br label %if.end452

if.end452:                                        ; preds = %if.else451, %if.then449
  br label %if.end453

if.end453:                                        ; preds = %if.end452, %while.body440
  br label %while.cond429

while.end454:                                     ; preds = %lor.end439
  %241 = load i8*, i8** %s.addr, align 8
  %242 = load i8*, i8** %start419, align 8
  %cmp455 = icmp eq i8* %241, %242
  br i1 %cmp455, label %if.then457, label %if.end459

if.then457:                                       ; preds = %while.end454
  %243 = load i8, i8* %option, align 1
  %conv458 = sext i8 %243 to i32
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.29, i64 0, i64 0), i32 %conv458)
  br label %if.end459

if.end459:                                        ; preds = %if.then457, %while.end454
  %244 = load i8, i8* %colon, align 1
  %tobool460 = trunc i8 %244 to i1
  br i1 %tobool460, label %if.then461, label %if.end467

if.then461:                                       ; preds = %if.end459
  %245 = load i8*, i8** %s.addr, align 8
  %246 = load i8*, i8** %start419, align 8
  %sub.ptr.lhs.cast462 = ptrtoint i8* %245 to i64
  %sub.ptr.rhs.cast463 = ptrtoint i8* %246 to i64
  %sub.ptr.sub464 = sub i64 %sub.ptr.lhs.cast462, %sub.ptr.rhs.cast463
  %conv465 = trunc i64 %sub.ptr.sub464 to i32
  %247 = load i8*, i8** %start419, align 8
  %248 = load i8, i8* %option, align 1
  %conv466 = sext i8 %248 to i32
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.30, i64 0, i64 0), i32 %conv465, i8* %247, i32 %conv466)
  br label %if.end467

if.end467:                                        ; preds = %if.then461, %if.end459
  %249 = load i8*, i8** %s.addr, align 8
  %250 = load i8*, i8** %s.addr, align 8
  %call468 = call i64 @strlen(i8* %250) #11
  %add.ptr469 = getelementptr inbounds i8, i8* %249, i64 %call468
  store i8* %add.ptr469, i8** %end420, align 8
  %251 = load i8*, i8** %s.addr, align 8
  %252 = load i8, i8* %251, align 1
  %conv470 = sext i8 %252 to i32
  %cmp471 = icmp ne i32 %conv470, 61
  br i1 %cmp471, label %if.then473, label %if.else488

if.then473:                                       ; preds = %if.end467
  %253 = load %struct.sv*, %struct.sv** %sv421, align 8
  %254 = load i8*, i8** %start419, align 8
  %255 = load i8*, i8** %end420, align 8
  %256 = load i8*, i8** %start419, align 8
  %sub.ptr.lhs.cast474 = ptrtoint i8* %255 to i64
  %sub.ptr.rhs.cast475 = ptrtoint i8* %256 to i64
  %sub.ptr.sub476 = sub i64 %sub.ptr.lhs.cast474, %sub.ptr.rhs.cast475
  call void @Perl_sv_catpvn_flags(%struct.sv* %253, i8* %254, i64 %sub.ptr.sub476, i32 2)
  %257 = load i8, i8* %option, align 1
  %conv477 = sext i8 %257 to i32
  %cmp478 = icmp eq i32 %conv477, 109
  br i1 %cmp478, label %if.then480, label %if.end487

if.then480:                                       ; preds = %if.then473
  %258 = load i8*, i8** %s.addr, align 8
  %259 = load i8, i8* %258, align 1
  %conv481 = sext i8 %259 to i32
  %cmp482 = icmp ne i32 %conv481, 0
  br i1 %cmp482, label %if.then484, label %if.end486

if.then484:                                       ; preds = %if.then480
  %260 = load i8*, i8** %s.addr, align 8
  %261 = load i8, i8* %260, align 1
  %conv485 = sext i8 %261 to i32
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.31, i64 0, i64 0), i32 %conv485)
  br label %if.end486

if.end486:                                        ; preds = %if.then484, %if.then480
  %262 = load %struct.sv*, %struct.sv** %sv421, align 8
  call void @Perl_sv_catpvn_flags(%struct.sv* %262, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.32, i64 0, i64 0), i64 3, i32 2)
  br label %if.end487

if.end487:                                        ; preds = %if.end486, %if.then473
  br label %if.end496

if.else488:                                       ; preds = %if.end467
  %263 = load %struct.sv*, %struct.sv** %sv421, align 8
  %264 = load i8*, i8** %start419, align 8
  %265 = load i8*, i8** %s.addr, align 8
  %266 = load i8*, i8** %start419, align 8
  %sub.ptr.lhs.cast489 = ptrtoint i8* %265 to i64
  %sub.ptr.rhs.cast490 = ptrtoint i8* %266 to i64
  %sub.ptr.sub491 = sub i64 %sub.ptr.lhs.cast489, %sub.ptr.rhs.cast490
  call void @Perl_sv_catpvn_flags(%struct.sv* %263, i8* %264, i64 %sub.ptr.sub491, i32 2)
  %267 = load %struct.sv*, %struct.sv** %sv421, align 8
  call void @Perl_sv_catpvn_flags(%struct.sv* %267, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.33, i64 0, i64 0), i64 13, i32 2)
  %268 = load i8*, i8** %s.addr, align 8
  %incdec.ptr492 = getelementptr inbounds i8, i8* %268, i32 1
  store i8* %incdec.ptr492, i8** %s.addr, align 8
  %269 = load %struct.sv*, %struct.sv** %sv421, align 8
  %270 = load i8*, i8** %s.addr, align 8
  %271 = load i8*, i8** %end420, align 8
  %272 = load i8*, i8** %s.addr, align 8
  %sub.ptr.lhs.cast493 = ptrtoint i8* %271 to i64
  %sub.ptr.rhs.cast494 = ptrtoint i8* %272 to i64
  %sub.ptr.sub495 = sub i64 %sub.ptr.lhs.cast493, %sub.ptr.rhs.cast494
  call void @Perl_sv_catpvn_flags(%struct.sv* %269, i8* %270, i64 %sub.ptr.sub495, i32 2)
  %273 = load %struct.sv*, %struct.sv** %sv421, align 8
  call void @Perl_sv_catpvn_flags(%struct.sv* %273, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.34, i64 0, i64 0), i64 2, i32 2)
  br label %if.end496

if.end496:                                        ; preds = %if.else488, %if.end487
  %274 = load i8*, i8** %end420, align 8
  store i8* %274, i8** %s.addr, align 8
  %275 = load %struct.sv*, %struct.sv** %sv421, align 8
  call void @Perl_av_create_and_push(%struct.av** @PL_preambleav, %struct.sv* %275)
  br label %if.end499

if.else497:                                       ; preds = %sw.bb415
  %276 = load i8, i8* %option, align 1
  %conv498 = sext i8 %276 to i32
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.35, i64 0, i64 0), i32 %conv498)
  br label %if.end499

if.end499:                                        ; preds = %if.else497, %if.end496
  %277 = load i8*, i8** %s.addr, align 8
  store i8* %277, i8** %retval, align 8
  br label %return

sw.bb500:                                         ; preds = %entry
  store i8 1, i8* @PL_minus_n, align 1
  %278 = load i8*, i8** %s.addr, align 8
  %incdec.ptr501 = getelementptr inbounds i8, i8* %278, i32 1
  store i8* %incdec.ptr501, i8** %s.addr, align 8
  %279 = load i8*, i8** %s.addr, align 8
  store i8* %279, i8** %retval, align 8
  br label %return

sw.bb502:                                         ; preds = %entry
  store i8 1, i8* @PL_minus_p, align 1
  %280 = load i8*, i8** %s.addr, align 8
  %incdec.ptr503 = getelementptr inbounds i8, i8* %280, i32 1
  store i8* %incdec.ptr503, i8** %s.addr, align 8
  %281 = load i8*, i8** %s.addr, align 8
  store i8* %281, i8** %retval, align 8
  br label %return

sw.bb504:                                         ; preds = %entry
  call void @S_forbid_setid(i8 signext 115, i1 zeroext false)
  store i8 1, i8* @PL_doswitches, align 1
  %282 = load i8*, i8** %s.addr, align 8
  %incdec.ptr505 = getelementptr inbounds i8, i8* %282, i32 1
  store i8* %incdec.ptr505, i8** %s.addr, align 8
  %283 = load i8*, i8** %s.addr, align 8
  store i8* %283, i8** %retval, align 8
  br label %return

sw.bb506:                                         ; preds = %entry, %entry
  %284 = load i8, i8* @PL_tainting, align 1
  %tobool507 = trunc i8 %284 to i1
  br i1 %tobool507, label %if.end510, label %if.then508

if.then508:                                       ; preds = %sw.bb506
  %285 = load i8*, i8** %s.addr, align 8
  %286 = load i8, i8* %285, align 1
  %conv509 = sext i8 %286 to i32
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.36, i64 0, i64 0), i32 %conv509, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0))
  br label %if.end510

if.end510:                                        ; preds = %if.then508, %sw.bb506
  %287 = load i8*, i8** %s.addr, align 8
  %incdec.ptr511 = getelementptr inbounds i8, i8* %287, i32 1
  store i8* %incdec.ptr511, i8** %s.addr, align 8
  %288 = load i8*, i8** %s.addr, align 8
  store i8* %288, i8** %retval, align 8
  br label %return

sw.bb512:                                         ; preds = %entry
  store i8 1, i8* @PL_do_undump, align 1
  %289 = load i8*, i8** %s.addr, align 8
  %incdec.ptr513 = getelementptr inbounds i8, i8* %289, i32 1
  store i8* %incdec.ptr513, i8** %s.addr, align 8
  %290 = load i8*, i8** %s.addr, align 8
  store i8* %290, i8** %retval, align 8
  br label %return

sw.bb514:                                         ; preds = %entry
  store i8 1, i8* @PL_unsafe, align 1
  %291 = load i8*, i8** %s.addr, align 8
  %incdec.ptr515 = getelementptr inbounds i8, i8* %291, i32 1
  store i8* %incdec.ptr515, i8** %s.addr, align 8
  %292 = load i8*, i8** %s.addr, align 8
  store i8* %292, i8** %retval, align 8
  br label %return

sw.bb516:                                         ; preds = %entry
  call void @S_minus_v()
  br label %sw.bb517

sw.bb517:                                         ; preds = %entry, %sw.bb516
  %293 = load i8, i8* @PL_dowarn, align 1
  %conv518 = zext i8 %293 to i32
  %and519 = and i32 %conv518, 6
  %tobool520 = icmp ne i32 %and519, 0
  br i1 %tobool520, label %if.end525, label %if.then521

if.then521:                                       ; preds = %sw.bb517
  %294 = load i8, i8* @PL_dowarn, align 1
  %conv522 = zext i8 %294 to i32
  %or523 = or i32 %conv522, 1
  %conv524 = trunc i32 %or523 to i8
  store i8 %conv524, i8* @PL_dowarn, align 1
  br label %if.end525

if.end525:                                        ; preds = %if.then521, %sw.bb517
  %295 = load i8*, i8** %s.addr, align 8
  %incdec.ptr526 = getelementptr inbounds i8, i8* %295, i32 1
  store i8* %incdec.ptr526, i8** %s.addr, align 8
  %296 = load i8*, i8** %s.addr, align 8
  store i8* %296, i8** %retval, align 8
  br label %return

sw.bb527:                                         ; preds = %entry
  store i8 3, i8* @PL_dowarn, align 1
  %297 = load i64*, i64** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 12), align 8
  %cmp528 = icmp eq i64* %297, null
  br i1 %cmp528, label %if.end537, label %lor.lhs.false530

lor.lhs.false530:                                 ; preds = %sw.bb527
  %298 = load i64*, i64** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 12), align 8
  %cmp531 = icmp eq i64* %298, getelementptr inbounds (i64, i64* null, i64 1)
  br i1 %cmp531, label %if.end537, label %lor.lhs.false533

lor.lhs.false533:                                 ; preds = %lor.lhs.false530
  %299 = load i64*, i64** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 12), align 8
  %cmp534 = icmp eq i64* %299, getelementptr inbounds (i64, i64* null, i64 2)
  br i1 %cmp534, label %if.end537, label %if.then536

if.then536:                                       ; preds = %lor.lhs.false533
  %300 = load i64*, i64** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 12), align 8
  %301 = bitcast i64* %300 to i8*
  call void @free(i8* %301) #6
  br label %if.end537

if.end537:                                        ; preds = %if.then536, %lor.lhs.false533, %lor.lhs.false530, %sw.bb527
  store i64* getelementptr inbounds (i64, i64* null, i64 1), i64** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 12), align 8
  %302 = load i8*, i8** %s.addr, align 8
  %incdec.ptr538 = getelementptr inbounds i8, i8* %302, i32 1
  store i8* %incdec.ptr538, i8** %s.addr, align 8
  %303 = load i8*, i8** %s.addr, align 8
  store i8* %303, i8** %retval, align 8
  br label %return

sw.bb539:                                         ; preds = %entry
  store i8 4, i8* @PL_dowarn, align 1
  %304 = load i64*, i64** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 12), align 8
  %cmp540 = icmp eq i64* %304, null
  br i1 %cmp540, label %if.end549, label %lor.lhs.false542

lor.lhs.false542:                                 ; preds = %sw.bb539
  %305 = load i64*, i64** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 12), align 8
  %cmp543 = icmp eq i64* %305, getelementptr inbounds (i64, i64* null, i64 1)
  br i1 %cmp543, label %if.end549, label %lor.lhs.false545

lor.lhs.false545:                                 ; preds = %lor.lhs.false542
  %306 = load i64*, i64** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 12), align 8
  %cmp546 = icmp eq i64* %306, getelementptr inbounds (i64, i64* null, i64 2)
  br i1 %cmp546, label %if.end549, label %if.then548

if.then548:                                       ; preds = %lor.lhs.false545
  %307 = load i64*, i64** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 12), align 8
  %308 = bitcast i64* %307 to i8*
  call void @free(i8* %308) #6
  br label %if.end549

if.end549:                                        ; preds = %if.then548, %lor.lhs.false545, %lor.lhs.false542, %sw.bb539
  store i64* getelementptr inbounds (i64, i64* null, i64 2), i64** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 12), align 8
  %309 = load i8*, i8** %s.addr, align 8
  %incdec.ptr550 = getelementptr inbounds i8, i8* %309, i32 1
  store i8* %incdec.ptr550, i8** %s.addr, align 8
  %310 = load i8*, i8** %s.addr, align 8
  store i8* %310, i8** %retval, align 8
  br label %return

sw.bb551:                                         ; preds = %entry, %entry
  br label %while.cond552

while.cond552:                                    ; preds = %while.body556, %sw.bb551
  %311 = load i8*, i8** %s.addr, align 8
  %312 = load i8, i8* %311, align 1
  %conv553 = sext i8 %312 to i32
  %cmp554 = icmp eq i32 %conv553, 32
  br i1 %cmp554, label %while.body556, label %while.end558

while.body556:                                    ; preds = %while.cond552
  %313 = load i8*, i8** %s.addr, align 8
  %incdec.ptr557 = getelementptr inbounds i8, i8* %313, i32 1
  store i8* %incdec.ptr557, i8** %s.addr, align 8
  br label %while.cond552

while.end558:                                     ; preds = %while.cond552
  %314 = load i8*, i8** %s.addr, align 8
  %arrayidx559 = getelementptr inbounds i8, i8* %314, i64 0
  %315 = load i8, i8* %arrayidx559, align 1
  %conv560 = sext i8 %315 to i32
  %cmp561 = icmp eq i32 %conv560, 45
  br i1 %cmp561, label %if.then563, label %if.end565

if.then563:                                       ; preds = %while.end558
  %316 = load i8*, i8** %s.addr, align 8
  %add.ptr564 = getelementptr inbounds i8, i8* %316, i64 1
  store i8* %add.ptr564, i8** %retval, align 8
  br label %return

if.end565:                                        ; preds = %while.end558
  br label %sw.epilog

sw.bb566:                                         ; preds = %entry, %entry, %entry, %entry, %entry
  br label %sw.epilog

sw.bb567:                                         ; preds = %entry, %entry, %entry, %entry, %entry, %entry
  %317 = load i8*, i8** %s.addr, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.37, i64 0, i64 0), i8* %317)
  br label %sw.default

sw.default:                                       ; preds = %entry, %sw.bb567
  %318 = load i8*, i8** %s.addr, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.38, i64 0, i64 0), i8* %318)
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb566, %if.end565
  store i8* null, i8** %retval, align 8
  br label %return

return:                                           ; preds = %sw.epilog, %if.then563, %if.end549, %if.end537, %if.end525, %sw.bb514, %sw.bb512, %if.end510, %sw.bb504, %sw.bb502, %sw.bb500, %if.end499, %if.end413, %if.end374, %if.end312, %for.end, %if.end268, %sw.bb191, %sw.bb189, %while.end183, %if.end171, %if.end162
  %319 = load i8*, i8** %retval, align 8
  ret i8* %319
}

declare dso_local i64 @Perl_grok_hex(i8*, i64*, i32*, double*) #2

declare dso_local i8* @Perl_sv_grow(%struct.sv*, i64) #2

declare dso_local i8* @Perl_uvoffuni_to_utf8_flags(i8*, i64, i64) #2

declare dso_local i64 @Perl_grok_oct(i8*, i64*, i32*, double*) #2

declare dso_local void @Perl_sv_setsv_flags(%struct.sv*, %struct.sv*, i32) #2

declare dso_local i32 @Perl_parse_unicode_opts(i8**) #2

; Function Attrs: noinline nounwind uwtable
define internal void @S_forbid_setid(i8 signext %flag, i1 zeroext %suidscript) #0 {
entry:
  %flag.addr = alloca i8, align 1
  %suidscript.addr = alloca i8, align 1
  store i8 %flag, i8* %flag.addr, align 1
  %frombool = zext i1 %suidscript to i8
  store i8 %frombool, i8* %suidscript.addr, align 1
  ret void
}

declare dso_local void @Perl_sv_catpvn_flags(%struct.sv*, i8*, i64, i32) #2

declare dso_local void @Perl_sv_catpvf(%struct.sv*, i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_init_debugger() #0 {
entry:
  %ostash = alloca %struct.hv*, align 8
  %mg = alloca %struct.magic*, align 8
  %0 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  store %struct.hv* %0, %struct.hv** %ostash, align 8
  %1 = load %struct.hv*, %struct.hv** @PL_debstash, align 8
  %2 = bitcast %struct.hv* %1 to i8*
  %3 = bitcast i8* %2 to %struct.sv*
  %call = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %3)
  %4 = bitcast %struct.sv* %call to %struct.hv*
  store %struct.hv* %4, %struct.hv** @PL_curstash, align 8
  call void @Perl_init_dbargs()
  %call1 = call %struct.gv* @Perl_gv_fetchpvn_flags(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.41, i64 0, i64 0), i64 6, i32 2, i32 9)
  %5 = bitcast %struct.gv* %call1 to i8*
  %6 = bitcast i8* %5 to %struct.sv*
  %call2 = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %6)
  %7 = bitcast %struct.sv* %call2 to i8*
  %8 = bitcast i8* %7 to %struct.gv*
  store %struct.gv* %8, %struct.gv** @PL_DBgv, align 8
  %call3 = call %struct.gv* @Perl_gv_fetchpvn_flags(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i64 10, i32 2, i32 11)
  %9 = bitcast %struct.gv* %call3 to i8*
  %10 = bitcast i8* %9 to %struct.sv*
  %call4 = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %10)
  %11 = bitcast %struct.sv* %call4 to i8*
  %12 = bitcast i8* %11 to %struct.gv*
  store %struct.gv* %12, %struct.gv** @PL_DBline, align 8
  %call5 = call %struct.gv* @Perl_gv_fetchpvn_flags(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.43, i64 0, i64 0), i64 7, i32 2, i32 12)
  %call6 = call %struct.gv* @Perl_gv_add_by_type(%struct.gv* %call5, i32 12)
  %13 = bitcast %struct.gv* %call6 to i8*
  %14 = bitcast i8* %13 to %struct.sv*
  %call7 = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %14)
  %15 = bitcast %struct.sv* %call7 to i8*
  %16 = bitcast i8* %15 to %struct.gv*
  store %struct.gv* %16, %struct.gv** @PL_DBsub, align 8
  %call8 = call %struct.gv* @Perl_gv_fetchpvn_flags(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.44, i64 0, i64 0), i64 10, i32 2, i32 3)
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %call8, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %17 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %17, i64 0
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 0
  %18 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  store %struct.sv* %18, %struct.sv** @PL_DBsingle, align 8
  %19 = load %struct.sv*, %struct.sv** @PL_DBsingle, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 2
  %20 = load i32, i32* %sv_flags, align 4
  %and = and i32 %20, 256
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %21 = load %struct.sv*, %struct.sv** @PL_DBsingle, align 8
  call void @Perl_sv_setiv(%struct.sv* %21, i64 0)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %22 = load %struct.sv*, %struct.sv** @PL_DBsingle, align 8
  %call9 = call %struct.magic* @Perl_sv_magicext(%struct.sv* %22, %struct.sv* null, i32 42, %struct.mgvtbl* getelementptr inbounds ([31 x %struct.mgvtbl], [31 x %struct.mgvtbl]* @PL_magic_vtables, i64 0, i64 6), i8* null, i32 0)
  store %struct.magic* %call9, %struct.magic** %mg, align 8
  %23 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_private = getelementptr inbounds %struct.magic, %struct.magic* %23, i32 0, i32 2
  store i16 0, i16* %mg_private, align 8
  br label %do.body

do.body:                                          ; preds = %if.end
  %24 = load %struct.sv*, %struct.sv** @PL_DBsingle, align 8
  %sv_flags10 = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 2
  %25 = load i32, i32* %sv_flags10, align 4
  %and11 = and i32 %25, 4194304
  %tobool12 = icmp ne i32 %and11, 0
  br i1 %tobool12, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %if.then13, label %if.end15

cond.false:                                       ; preds = %do.body
  br i1 false, label %if.then13, label %if.end15

if.then13:                                        ; preds = %cond.false, %cond.true
  %26 = load %struct.sv*, %struct.sv** @PL_DBsingle, align 8
  %call14 = call i32 @Perl_mg_set(%struct.sv* %26)
  br label %if.end15

if.end15:                                         ; preds = %if.then13, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end15
  %call16 = call %struct.gv* @Perl_gv_fetchpvn_flags(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.45, i64 0, i64 0), i64 9, i32 2, i32 3)
  %sv_u17 = getelementptr inbounds %struct.gv, %struct.gv* %call16, i32 0, i32 3
  %svu_gp18 = bitcast %union.anon.4* %sv_u17 to %struct.gp**
  %27 = load %struct.gp*, %struct.gp** %svu_gp18, align 8
  %add.ptr19 = getelementptr inbounds %struct.gp, %struct.gp* %27, i64 0
  %gp_sv20 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr19, i32 0, i32 0
  %28 = load %struct.sv*, %struct.sv** %gp_sv20, align 8
  store %struct.sv* %28, %struct.sv** @PL_DBtrace, align 8
  %29 = load %struct.sv*, %struct.sv** @PL_DBtrace, align 8
  %sv_flags21 = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 2
  %30 = load i32, i32* %sv_flags21, align 4
  %and22 = and i32 %30, 256
  %tobool23 = icmp ne i32 %and22, 0
  br i1 %tobool23, label %if.end25, label %if.then24

if.then24:                                        ; preds = %do.end
  %31 = load %struct.sv*, %struct.sv** @PL_DBtrace, align 8
  call void @Perl_sv_setiv(%struct.sv* %31, i64 0)
  br label %if.end25

if.end25:                                         ; preds = %if.then24, %do.end
  %32 = load %struct.sv*, %struct.sv** @PL_DBtrace, align 8
  %call26 = call %struct.magic* @Perl_sv_magicext(%struct.sv* %32, %struct.sv* null, i32 42, %struct.mgvtbl* getelementptr inbounds ([31 x %struct.mgvtbl], [31 x %struct.mgvtbl]* @PL_magic_vtables, i64 0, i64 6), i8* null, i32 0)
  store %struct.magic* %call26, %struct.magic** %mg, align 8
  %33 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_private27 = getelementptr inbounds %struct.magic, %struct.magic* %33, i32 0, i32 2
  store i16 1, i16* %mg_private27, align 8
  br label %do.body28

do.body28:                                        ; preds = %if.end25
  %34 = load %struct.sv*, %struct.sv** @PL_DBtrace, align 8
  %sv_flags29 = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 2
  %35 = load i32, i32* %sv_flags29, align 4
  %and30 = and i32 %35, 4194304
  %tobool31 = icmp ne i32 %and30, 0
  br i1 %tobool31, label %cond.true32, label %cond.false33

cond.true32:                                      ; preds = %do.body28
  br i1 true, label %if.then34, label %if.end36

cond.false33:                                     ; preds = %do.body28
  br i1 false, label %if.then34, label %if.end36

if.then34:                                        ; preds = %cond.false33, %cond.true32
  %36 = load %struct.sv*, %struct.sv** @PL_DBtrace, align 8
  %call35 = call i32 @Perl_mg_set(%struct.sv* %36)
  br label %if.end36

if.end36:                                         ; preds = %if.then34, %cond.false33, %cond.true32
  br label %do.end37

do.end37:                                         ; preds = %if.end36
  %call38 = call %struct.gv* @Perl_gv_fetchpvn_flags(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.46, i64 0, i64 0), i64 10, i32 2, i32 3)
  %sv_u39 = getelementptr inbounds %struct.gv, %struct.gv* %call38, i32 0, i32 3
  %svu_gp40 = bitcast %union.anon.4* %sv_u39 to %struct.gp**
  %37 = load %struct.gp*, %struct.gp** %svu_gp40, align 8
  %add.ptr41 = getelementptr inbounds %struct.gp, %struct.gp* %37, i64 0
  %gp_sv42 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr41, i32 0, i32 0
  %38 = load %struct.sv*, %struct.sv** %gp_sv42, align 8
  store %struct.sv* %38, %struct.sv** @PL_DBsignal, align 8
  %39 = load %struct.sv*, %struct.sv** @PL_DBsignal, align 8
  %sv_flags43 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 2
  %40 = load i32, i32* %sv_flags43, align 4
  %and44 = and i32 %40, 256
  %tobool45 = icmp ne i32 %and44, 0
  br i1 %tobool45, label %if.end47, label %if.then46

if.then46:                                        ; preds = %do.end37
  %41 = load %struct.sv*, %struct.sv** @PL_DBsignal, align 8
  call void @Perl_sv_setiv(%struct.sv* %41, i64 0)
  br label %if.end47

if.end47:                                         ; preds = %if.then46, %do.end37
  %42 = load %struct.sv*, %struct.sv** @PL_DBsignal, align 8
  %call48 = call %struct.magic* @Perl_sv_magicext(%struct.sv* %42, %struct.sv* null, i32 42, %struct.mgvtbl* getelementptr inbounds ([31 x %struct.mgvtbl], [31 x %struct.mgvtbl]* @PL_magic_vtables, i64 0, i64 6), i8* null, i32 0)
  store %struct.magic* %call48, %struct.magic** %mg, align 8
  %43 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_private49 = getelementptr inbounds %struct.magic, %struct.magic* %43, i32 0, i32 2
  store i16 2, i16* %mg_private49, align 8
  br label %do.body50

do.body50:                                        ; preds = %if.end47
  %44 = load %struct.sv*, %struct.sv** @PL_DBsignal, align 8
  %sv_flags51 = getelementptr inbounds %struct.sv, %struct.sv* %44, i32 0, i32 2
  %45 = load i32, i32* %sv_flags51, align 4
  %and52 = and i32 %45, 4194304
  %tobool53 = icmp ne i32 %and52, 0
  br i1 %tobool53, label %cond.true54, label %cond.false55

cond.true54:                                      ; preds = %do.body50
  br i1 true, label %if.then56, label %if.end58

cond.false55:                                     ; preds = %do.body50
  br i1 false, label %if.then56, label %if.end58

if.then56:                                        ; preds = %cond.false55, %cond.true54
  %46 = load %struct.sv*, %struct.sv** @PL_DBsignal, align 8
  %call57 = call i32 @Perl_mg_set(%struct.sv* %46)
  br label %if.end58

if.end58:                                         ; preds = %if.then56, %cond.false55, %cond.true54
  br label %do.end59

do.end59:                                         ; preds = %if.end58
  %47 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %48 = bitcast %struct.hv* %47 to i8*
  %49 = bitcast i8* %48 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %49)
  %50 = load %struct.hv*, %struct.hv** %ostash, align 8
  store %struct.hv* %50, %struct.hv** @PL_curstash, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_usage() #0 {
entry:
  %p = alloca i8**, align 8
  %out = alloca %struct._PerlIO**, align 8
  store i8** getelementptr inbounds ([6 x i8*], [6 x i8*]* @S_usage.usage_msg, i64 0, i64 0), i8*** %p, align 8
  %call = call %struct._PerlIO** @Perl_PerlIO_stdout()
  store %struct._PerlIO** %call, %struct._PerlIO*** %out, align 8
  %0 = load %struct._PerlIO**, %struct._PerlIO*** %out, align 8
  %1 = load i8**, i8*** @PL_origargv, align 8
  %arrayidx = getelementptr inbounds i8*, i8** %1, i64 0
  %2 = load i8*, i8** %arrayidx, align 8
  %call1 = call i32 (%struct._PerlIO**, i8*, ...) @PerlIO_printf(%struct._PerlIO** %0, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.119, i64 0, i64 0), i8* %2)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %3 = load i8**, i8*** %p, align 8
  %4 = load i8*, i8** %3, align 8
  %tobool = icmp ne i8* %4, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load %struct._PerlIO**, %struct._PerlIO*** %out, align 8
  %6 = load i8**, i8*** %p, align 8
  %incdec.ptr = getelementptr inbounds i8*, i8** %6, i32 1
  store i8** %incdec.ptr, i8*** %p, align 8
  %7 = load i8*, i8** %6, align 8
  %call2 = call i32 @PerlIO_puts(%struct._PerlIO** %5, i8* %7)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  call void @Perl_my_exit(i32 0)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_incpush(i8* %dir, i64 %len, i32 %flags) #0 {
entry:
  %dir.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  %using_sub_dirs = alloca i8, align 1
  %add_versioned_sub_dirs = alloca i8, align 1
  %add_archonly_sub_dirs = alloca i8, align 1
  %addoldvers = alloca i8, align 1
  %unshift = alloca i8, align 1
  %push_basedir = alloca i8, align 1
  %inc = alloca %struct.av*, align 8
  %libdir = alloca %struct.sv*, align 8
  %av = alloca %struct.av*, align 8
  %subdir = alloca %struct.sv*, align 8
  %incverlist = alloca [1 x i8*], align 8
  %incver = alloca i8**, align 8
  %extra = alloca i64, align 8
  store i8* %dir, i8** %dir.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i32, i32* %flags.addr, align 4
  %conv = trunc i32 %0 to i8
  %conv1 = zext i8 %conv to i32
  %and = and i32 %conv1, 14
  %conv2 = trunc i32 %and to i8
  store i8 %conv2, i8* %using_sub_dirs, align 1
  %1 = load i32, i32* %flags.addr, align 4
  %conv3 = trunc i32 %1 to i8
  %conv4 = zext i8 %conv3 to i32
  %and5 = and i32 %conv4, 4
  %conv6 = trunc i32 %and5 to i8
  store i8 %conv6, i8* %add_versioned_sub_dirs, align 1
  %2 = load i32, i32* %flags.addr, align 4
  %conv7 = trunc i32 %2 to i8
  %conv8 = zext i8 %conv7 to i32
  %and9 = and i32 %conv8, 8
  %conv10 = trunc i32 %and9 to i8
  store i8 %conv10, i8* %add_archonly_sub_dirs, align 1
  %3 = load i32, i32* %flags.addr, align 4
  %conv11 = trunc i32 %3 to i8
  %conv12 = zext i8 %conv11 to i32
  %and13 = and i32 %conv12, 2
  %conv14 = trunc i32 %and13 to i8
  store i8 %conv14, i8* %addoldvers, align 1
  %4 = load i32, i32* %flags.addr, align 4
  %conv15 = trunc i32 %4 to i8
  %conv16 = zext i8 %conv15 to i32
  %and17 = and i32 %conv16, 1
  %conv18 = trunc i32 %and17 to i8
  store i8 %conv18, i8* %unshift, align 1
  %5 = load i32, i32* %flags.addr, align 4
  %and19 = and i32 %5, 16
  %tobool = icmp ne i32 %and19, 0
  %6 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 0, i32 1
  %conv20 = trunc i32 %cond to i8
  store i8 %conv20, i8* %push_basedir, align 1
  %7 = load %struct.gv*, %struct.gv** @PL_incgv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %7, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %8 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %8, i64 0
  %gp_av = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 6
  %9 = load %struct.av*, %struct.av** %gp_av, align 8
  %tobool21 = icmp ne %struct.av* %9, null
  br i1 %tobool21, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %10 = load %struct.gv*, %struct.gv** @PL_incgv, align 8
  %sv_u22 = getelementptr inbounds %struct.gv, %struct.gv* %10, i32 0, i32 3
  %svu_gp23 = bitcast %union.anon.4* %sv_u22 to %struct.gp**
  %11 = load %struct.gp*, %struct.gp** %svu_gp23, align 8
  %add.ptr24 = getelementptr inbounds %struct.gp, %struct.gp* %11, i64 0
  %gp_av25 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr24, i32 0, i32 6
  %12 = load %struct.av*, %struct.av** %gp_av25, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %13 = load %struct.gv*, %struct.gv** @PL_incgv, align 8
  %call = call %struct.gv* @Perl_gv_add_by_type(%struct.gv* %13, i32 11)
  %sv_u26 = getelementptr inbounds %struct.gv, %struct.gv* %call, i32 0, i32 3
  %svu_gp27 = bitcast %union.anon.4* %sv_u26 to %struct.gp**
  %14 = load %struct.gp*, %struct.gp** %svu_gp27, align 8
  %add.ptr28 = getelementptr inbounds %struct.gp, %struct.gp* %14, i64 0
  %gp_av29 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr28, i32 0, i32 6
  %15 = load %struct.av*, %struct.av** %gp_av29, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond30 = phi %struct.av* [ %12, %cond.true ], [ %15, %cond.false ]
  store %struct.av* %cond30, %struct.av** %inc, align 8
  %16 = load i8*, i8** %dir.addr, align 8
  %17 = load i64, i64* %len.addr, align 8
  %18 = load i32, i32* %flags.addr, align 4
  %call31 = call %struct.sv* @S_mayberelocate(i8* %16, i64 %17, i32 %18)
  store %struct.sv* %call31, %struct.sv** %libdir, align 8
  %19 = load i8, i8* %using_sub_dirs, align 1
  %conv32 = zext i8 %19 to i32
  %tobool33 = icmp ne i32 %conv32, 0
  br i1 %tobool33, label %cond.true34, label %cond.false42

cond.true34:                                      ; preds = %cond.end
  %20 = load i8, i8* %unshift, align 1
  %conv35 = zext i8 %20 to i32
  %tobool36 = icmp ne i32 %conv35, 0
  br i1 %tobool36, label %cond.true37, label %cond.false39

cond.true37:                                      ; preds = %cond.true34
  %call38 = call %struct.sv* @Perl_newSV_type(i32 11)
  %21 = bitcast %struct.sv* %call38 to i8*
  %22 = bitcast i8* %21 to %struct.av*
  br label %cond.end40

cond.false39:                                     ; preds = %cond.true34
  %23 = load %struct.av*, %struct.av** %inc, align 8
  br label %cond.end40

cond.end40:                                       ; preds = %cond.false39, %cond.true37
  %cond41 = phi %struct.av* [ %22, %cond.true37 ], [ %23, %cond.false39 ]
  br label %cond.end43

cond.false42:                                     ; preds = %cond.end
  br label %cond.end43

cond.end43:                                       ; preds = %cond.false42, %cond.end40
  %cond44 = phi %struct.av* [ %cond41, %cond.end40 ], [ null, %cond.false42 ]
  store %struct.av* %cond44, %struct.av** %av, align 8
  %24 = load i8, i8* %using_sub_dirs, align 1
  %tobool45 = icmp ne i8 %24, 0
  br i1 %tobool45, label %if.then, label %if.end60

if.then:                                          ; preds = %cond.end43
  %25 = load %struct.sv*, %struct.sv** %libdir, align 8
  %call46 = call %struct.sv* @Perl_newSVsv(%struct.sv* %25)
  store %struct.sv* %call46, %struct.sv** %subdir, align 8
  %26 = bitcast [1 x i8*]* %incverlist to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %26, i8 0, i64 8, i1 false)
  %27 = load i8, i8* %add_versioned_sub_dirs, align 1
  %tobool47 = icmp ne i8 %27, 0
  br i1 %tobool47, label %if.then48, label %if.end

if.then48:                                        ; preds = %if.then
  %28 = load %struct.sv*, %struct.sv** %subdir, align 8
  call void @Perl_sv_catpvn_flags(%struct.sv* %28, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.127, i64 0, i64 0), i64 16, i32 2)
  %29 = load %struct.av*, %struct.av** %av, align 8
  %30 = load %struct.sv*, %struct.sv** %subdir, align 8
  %31 = load %struct.sv*, %struct.sv** %libdir, align 8
  %call49 = call %struct.sv* @S_incpush_if_exists(%struct.av* %29, %struct.sv* %30, %struct.sv* %31)
  store %struct.sv* %call49, %struct.sv** %subdir, align 8
  %32 = load %struct.sv*, %struct.sv** %subdir, align 8
  call void @Perl_sv_catpvn_flags(%struct.sv* %32, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.128, i64 0, i64 0), i64 7, i32 2)
  %33 = load %struct.av*, %struct.av** %av, align 8
  %34 = load %struct.sv*, %struct.sv** %subdir, align 8
  %35 = load %struct.sv*, %struct.sv** %libdir, align 8
  %call50 = call %struct.sv* @S_incpush_if_exists(%struct.av* %33, %struct.sv* %34, %struct.sv* %35)
  store %struct.sv* %call50, %struct.sv** %subdir, align 8
  br label %if.end

if.end:                                           ; preds = %if.then48, %if.then
  %36 = load i8, i8* %addoldvers, align 1
  %tobool51 = icmp ne i8 %36, 0
  br i1 %tobool51, label %if.then52, label %if.end55

if.then52:                                        ; preds = %if.end
  %arraydecay = getelementptr inbounds [1 x i8*], [1 x i8*]* %incverlist, i64 0, i64 0
  store i8** %arraydecay, i8*** %incver, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then52
  %37 = load i8**, i8*** %incver, align 8
  %38 = load i8*, i8** %37, align 8
  %tobool53 = icmp ne i8* %38, null
  br i1 %tobool53, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %39 = load %struct.sv*, %struct.sv** %subdir, align 8
  %40 = load i8**, i8*** %incver, align 8
  %41 = load i8*, i8** %40, align 8
  call void (%struct.sv*, i8*, ...) @Perl_sv_catpvf(%struct.sv* %39, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.129, i64 0, i64 0), i8* %41)
  %42 = load %struct.av*, %struct.av** %av, align 8
  %43 = load %struct.sv*, %struct.sv** %subdir, align 8
  %44 = load %struct.sv*, %struct.sv** %libdir, align 8
  %call54 = call %struct.sv* @S_incpush_if_exists(%struct.av* %42, %struct.sv* %43, %struct.sv* %44)
  store %struct.sv* %call54, %struct.sv** %subdir, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %45 = load i8**, i8*** %incver, align 8
  %incdec.ptr = getelementptr inbounds i8*, i8** %45, i32 1
  store i8** %incdec.ptr, i8*** %incver, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end55

if.end55:                                         ; preds = %for.end, %if.end
  %46 = load i8, i8* %add_archonly_sub_dirs, align 1
  %tobool56 = icmp ne i8 %46, 0
  br i1 %tobool56, label %if.then57, label %if.end59

if.then57:                                        ; preds = %if.end55
  %47 = load %struct.sv*, %struct.sv** %subdir, align 8
  call void @Perl_sv_catpvn_flags(%struct.sv* %47, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.130, i64 0, i64 0), i64 9, i32 2)
  %48 = load %struct.av*, %struct.av** %av, align 8
  %49 = load %struct.sv*, %struct.sv** %subdir, align 8
  %50 = load %struct.sv*, %struct.sv** %libdir, align 8
  %call58 = call %struct.sv* @S_incpush_if_exists(%struct.av* %48, %struct.sv* %49, %struct.sv* %50)
  store %struct.sv* %call58, %struct.sv** %subdir, align 8
  br label %if.end59

if.end59:                                         ; preds = %if.then57, %if.end55
  %51 = load %struct.sv*, %struct.sv** %subdir, align 8
  %52 = bitcast %struct.sv* %51 to i8*
  %53 = bitcast i8* %52 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %53)
  br label %if.end60

if.end60:                                         ; preds = %if.end59, %cond.end43
  %54 = load i8, i8* %unshift, align 1
  %tobool61 = icmp ne i8 %54, 0
  br i1 %tobool61, label %if.then62, label %if.else

if.then62:                                        ; preds = %if.end60
  %55 = load %struct.av*, %struct.av** %av, align 8
  %call63 = call i64 @S_av_top_index(%struct.av* %55)
  %add = add nsw i64 %call63, 1
  store i64 %add, i64* %extra, align 8
  %56 = load %struct.av*, %struct.av** %inc, align 8
  %57 = load i64, i64* %extra, align 8
  %58 = load i8, i8* %push_basedir, align 1
  %conv64 = zext i8 %58 to i64
  %add65 = add i64 %57, %conv64
  call void @Perl_av_unshift(%struct.av* %56, i64 %add65)
  %59 = load i8, i8* %push_basedir, align 1
  %tobool66 = icmp ne i8 %59, 0
  br i1 %tobool66, label %if.then67, label %if.end69

if.then67:                                        ; preds = %if.then62
  %60 = load %struct.av*, %struct.av** %inc, align 8
  %61 = load i64, i64* %extra, align 8
  %62 = load %struct.sv*, %struct.sv** %libdir, align 8
  %call68 = call %struct.sv** @Perl_av_store(%struct.av* %60, i64 %61, %struct.sv* %62)
  br label %if.end69

if.end69:                                         ; preds = %if.then67, %if.then62
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end69
  %63 = load i64, i64* %extra, align 8
  %dec = add i64 %63, -1
  store i64 %dec, i64* %extra, align 8
  %tobool70 = icmp ne i64 %63, 0
  br i1 %tobool70, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %64 = load %struct.av*, %struct.av** %inc, align 8
  %65 = load i64, i64* %extra, align 8
  %66 = load %struct.av*, %struct.av** %av, align 8
  %67 = load i64, i64* %extra, align 8
  %call71 = call %struct.sv** @Perl_av_fetch(%struct.av* %66, i64 %67, i32 0)
  %68 = load %struct.sv*, %struct.sv** %call71, align 8
  %69 = bitcast %struct.sv* %68 to i8*
  %70 = bitcast i8* %69 to %struct.sv*
  %call72 = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %70)
  %call73 = call %struct.sv** @Perl_av_store(%struct.av* %64, i64 %65, %struct.sv* %call72)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %71 = load %struct.av*, %struct.av** %av, align 8
  %72 = bitcast %struct.av* %71 to i8*
  %73 = bitcast i8* %72 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %73)
  br label %if.end77

if.else:                                          ; preds = %if.end60
  %74 = load i8, i8* %push_basedir, align 1
  %tobool74 = icmp ne i8 %74, 0
  br i1 %tobool74, label %if.then75, label %if.end76

if.then75:                                        ; preds = %if.else
  %75 = load %struct.av*, %struct.av** %inc, align 8
  %76 = load %struct.sv*, %struct.sv** %libdir, align 8
  call void @Perl_av_push(%struct.av* %75, %struct.sv* %76)
  br label %if.end76

if.end76:                                         ; preds = %if.then75, %if.else
  br label %if.end77

if.end77:                                         ; preds = %if.end76, %while.end
  %77 = load i8, i8* %push_basedir, align 1
  %tobool78 = icmp ne i8 %77, 0
  br i1 %tobool78, label %if.end80, label %if.then79

if.then79:                                        ; preds = %if.end77
  %78 = load %struct.sv*, %struct.sv** %libdir, align 8
  %79 = bitcast %struct.sv* %78 to i8*
  %80 = bitcast i8* %79 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %80)
  br label %if.end80

if.end80:                                         ; preds = %if.then79, %if.end77
  ret void
}

declare dso_local %struct.sv* @Perl_newSVsv(%struct.sv*) #2

declare dso_local void @Perl_av_create_and_push(%struct.av**, %struct.sv*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @S_minus_v() #0 {
entry:
  %PIO_stdout = alloca %struct._PerlIO**, align 8
  %level_str = alloca i8*, align 8
  %level_len = alloca i64, align 8
  %level = alloca %struct.sv*, align 8
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0), i8** %level_str, align 8
  store i64 7, i64* %level_len, align 8
  %call = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i32 0, i32 0), i64 7)
  store %struct.sv* %call, %struct.sv** %level, align 8
  %call1 = call %struct._PerlIO** @Perl_PerlIO_stdout()
  store %struct._PerlIO** %call1, %struct._PerlIO*** %PIO_stdout, align 8
  %0 = load %struct._PerlIO**, %struct._PerlIO*** %PIO_stdout, align 8
  %1 = load %struct.sv*, %struct.sv** %level, align 8
  %2 = bitcast %struct.sv* %1 to i8*
  %call2 = call i32 (%struct._PerlIO**, i8*, ...) @PerlIO_printf(%struct._PerlIO** %0, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.120, i64 0, i64 0), i8* %2)
  %3 = load %struct.sv*, %struct.sv** %level, align 8
  %4 = bitcast %struct.sv* %3 to i8*
  %5 = bitcast i8* %4 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %5)
  %6 = load %struct._PerlIO**, %struct._PerlIO*** %PIO_stdout, align 8
  %call3 = call i32 (%struct._PerlIO**, i8*, ...) @PerlIO_printf(%struct._PerlIO** %6, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.121, i64 0, i64 0))
  %7 = load %struct._PerlIO**, %struct._PerlIO*** %PIO_stdout, align 8
  %call4 = call i32 (%struct._PerlIO**, i8*, ...) @PerlIO_printf(%struct._PerlIO** %7, i8* getelementptr inbounds ([377 x i8], [377 x i8]* @.str.122, i64 0, i64 0))
  call void @Perl_my_exit(i32 0)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_my_unexec() #0 {
entry:
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @Perl_doing_taint(i32 %argc, i8** %argv, i8** %envp) #0 {
entry:
  %retval = alloca i1, align 1
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %envp.addr = alloca i8**, align 8
  %uid = alloca i32, align 4
  %euid = alloca i32, align 4
  %gid = alloca i32, align 4
  %egid = alloca i32, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 8
  store i8** %envp, i8*** %envp.addr, align 8
  %call = call i32 @getuid() #6
  store i32 %call, i32* %uid, align 4
  %call1 = call i32 @geteuid() #6
  store i32 %call1, i32* %euid, align 4
  %call2 = call i32 @getgid() #6
  store i32 %call2, i32* %gid, align 4
  %call3 = call i32 @getegid() #6
  store i32 %call3, i32* %egid, align 4
  %0 = load i8**, i8*** %envp.addr, align 8
  %1 = load i32, i32* %uid, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load i32, i32* %euid, align 4
  %3 = load i32, i32* %uid, align 4
  %cmp = icmp ne i32 %2, %3
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %4 = load i32, i32* %egid, align 4
  %5 = load i32, i32* %gid, align 4
  %cmp4 = icmp ne i32 %4, %5
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  store i1 true, i1* %retval, align 1
  br label %return

if.end:                                           ; preds = %lor.lhs.false, %entry
  %6 = load i32, i32* %argc.addr, align 4
  %cmp5 = icmp sgt i32 %6, 1
  br i1 %cmp5, label %land.lhs.true6, label %if.end17

land.lhs.true6:                                   ; preds = %if.end
  %7 = load i8**, i8*** %argv.addr, align 8
  %arrayidx = getelementptr inbounds i8*, i8** %7, i64 1
  %8 = load i8*, i8** %arrayidx, align 8
  %arrayidx7 = getelementptr inbounds i8, i8* %8, i64 0
  %9 = load i8, i8* %arrayidx7, align 1
  %conv = sext i8 %9 to i32
  %cmp8 = icmp eq i32 %conv, 45
  br i1 %cmp8, label %land.lhs.true10, label %if.end17

land.lhs.true10:                                  ; preds = %land.lhs.true6
  %10 = load i8**, i8*** %argv.addr, align 8
  %arrayidx11 = getelementptr inbounds i8*, i8** %10, i64 1
  %11 = load i8*, i8** %arrayidx11, align 8
  %arrayidx12 = getelementptr inbounds i8, i8* %11, i64 1
  %12 = load i8, i8* %arrayidx12, align 1
  %conv13 = sext i8 %12 to i32
  %and = and i32 %conv13, -33
  %cmp14 = icmp eq i32 %and, 84
  br i1 %cmp14, label %if.then16, label %if.end17

if.then16:                                        ; preds = %land.lhs.true10
  store i1 true, i1* %retval, align 1
  br label %return

if.end17:                                         ; preds = %land.lhs.true10, %land.lhs.true6, %if.end
  store i1 false, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.end17, %if.then16, %if.then
  %13 = load i1, i1* %retval, align 1
  ret i1 %13
}

; Function Attrs: nounwind
declare dso_local i32 @getuid() #1

; Function Attrs: nounwind
declare dso_local i32 @geteuid() #1

; Function Attrs: nounwind
declare dso_local i32 @getgid() #1

; Function Attrs: nounwind
declare dso_local i32 @getegid() #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_init_dbargs() #0 {
entry:
  %args = alloca %struct.av*, align 8
  %call = call %struct.gv* @Perl_gv_fetchpvn_flags(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.39, i64 0, i64 0), i64 8, i32 2, i32 11)
  %call1 = call %struct.gv* @Perl_gv_add_by_type(%struct.gv* %call, i32 11)
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %call1, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %0 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %0, i64 0
  %gp_av = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 6
  %1 = load %struct.av*, %struct.av** %gp_av, align 8
  store %struct.av* %1, %struct.av** @PL_dbargs, align 8
  store %struct.av* %1, %struct.av** %args, align 8
  %2 = load %struct.av*, %struct.av** %args, align 8
  %sv_flags = getelementptr inbounds %struct.av, %struct.av* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %and = and i32 %3, 1073741824
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end8

if.then:                                          ; preds = %entry
  %4 = load %struct.av*, %struct.av** %args, align 8
  call void @Perl_av_clear(%struct.av* %4)
  %5 = load %struct.av*, %struct.av** %args, align 8
  %6 = bitcast %struct.av* %5 to %struct.sv*
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags2, align 4
  %and3 = and i32 %7, 8388608
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %8 = load %struct.av*, %struct.av** %args, align 8
  %9 = bitcast %struct.av* %8 to %struct.sv*
  %call5 = call %struct.magic* @Perl_mg_find(%struct.sv* %9, i32 80)
  %tobool6 = icmp ne %struct.magic* %call5, null
  br i1 %tobool6, label %if.then7, label %if.end

cond.false:                                       ; preds = %if.then
  br i1 false, label %if.then7, label %if.end

if.then7:                                         ; preds = %cond.false, %cond.true
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.40, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.then7, %cond.false, %cond.true
  br label %if.end8

if.end8:                                          ; preds = %if.end, %entry
  %10 = load %struct.av*, %struct.av** @PL_dbargs, align 8
  %sv_flags9 = getelementptr inbounds %struct.av, %struct.av* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags9, align 4
  %and10 = and i32 %11, -1073741825
  store i32 %and10, i32* %sv_flags9, align 4
  %12 = load %struct.av*, %struct.av** @PL_dbargs, align 8
  %sv_flags11 = getelementptr inbounds %struct.av, %struct.av* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags11, align 4
  %or = or i32 %13, -2147483648
  store i32 %or, i32* %sv_flags11, align 4
  ret void
}

declare dso_local void @Perl_av_clear(%struct.av*) #2

declare dso_local %struct.magic* @Perl_mg_find(%struct.sv*, i32) #2

declare dso_local void @Perl_sv_setiv(%struct.sv*, i64) #2

declare dso_local %struct.magic* @Perl_sv_magicext(%struct.sv*, %struct.sv*, i32, %struct.mgvtbl*, i8*, i32) #2

declare dso_local i32 @Perl_mg_set(%struct.sv*) #2

declare dso_local i8* @Perl_safesysmalloc(i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_populate_isa(i8* %name, i64 %len, ...) #0 {
entry:
  %name.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %gv = alloca %struct.gv*, align 8
  %isa = alloca %struct.av*, align 8
  %args = alloca [1 x %struct.__va_list_tag], align 16
  %parent = alloca i8*, align 8
  %parent_len = alloca i64, align 8
  store i8* %name, i8** %name.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  %0 = load i8*, i8** %name.addr, align 8
  %1 = load i64, i64* %len.addr, align 8
  %call = call %struct.gv* @Perl_gv_fetchpvn_flags(i8* %0, i64 %1, i32 3, i32 11)
  store %struct.gv* %call, %struct.gv** %gv, align 8
  %2 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %2, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %3 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %3, i64 0
  %gp_av = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 6
  %4 = load %struct.av*, %struct.av** %gp_av, align 8
  %tobool = icmp ne %struct.av* %4, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %5 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u1 = getelementptr inbounds %struct.gv, %struct.gv* %5, i32 0, i32 3
  %svu_gp2 = bitcast %union.anon.4* %sv_u1 to %struct.gp**
  %6 = load %struct.gp*, %struct.gp** %svu_gp2, align 8
  %add.ptr3 = getelementptr inbounds %struct.gp, %struct.gp* %6, i64 0
  %gp_av4 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr3, i32 0, i32 6
  %7 = load %struct.av*, %struct.av** %gp_av4, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %8 = load %struct.gv*, %struct.gv** %gv, align 8
  %call5 = call %struct.gv* @Perl_gv_add_by_type(%struct.gv* %8, i32 11)
  %sv_u6 = getelementptr inbounds %struct.gv, %struct.gv* %call5, i32 0, i32 3
  %svu_gp7 = bitcast %union.anon.4* %sv_u6 to %struct.gp**
  %9 = load %struct.gp*, %struct.gp** %svu_gp7, align 8
  %add.ptr8 = getelementptr inbounds %struct.gp, %struct.gp* %9, i64 0
  %gp_av9 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr8, i32 0, i32 6
  %10 = load %struct.av*, %struct.av** %gp_av9, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.av* [ %7, %cond.true ], [ %10, %cond.false ]
  store %struct.av* %cond, %struct.av** %isa, align 8
  %11 = load %struct.av*, %struct.av** %isa, align 8
  %sv_any = getelementptr inbounds %struct.av, %struct.av* %11, i32 0, i32 0
  %12 = load %struct.xpvav*, %struct.xpvav** %sv_any, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %12, i32 0, i32 2
  %13 = load i64, i64* %xav_fill, align 8
  %cmp = icmp ne i64 %13, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  br label %return

if.end:                                           ; preds = %cond.end
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i64 0, i64 0
  %arraydecay10 = bitcast %struct.__va_list_tag* %arraydecay to i8*
  call void @llvm.va_start(i8* %arraydecay10)
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end
  %arraydecay11 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i64 0, i64 0
  %gp_offset_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay11, i32 0, i32 0
  %gp_offset = load i32, i32* %gp_offset_p, align 16
  %fits_in_gp = icmp ule i32 %gp_offset, 40
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem

vaarg.in_reg:                                     ; preds = %do.body
  %14 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay11, i32 0, i32 3
  %reg_save_area = load i8*, i8** %14, align 16
  %15 = getelementptr i8, i8* %reg_save_area, i32 %gp_offset
  %16 = bitcast i8* %15 to i8**
  %17 = add i32 %gp_offset, 8
  store i32 %17, i32* %gp_offset_p, align 16
  br label %vaarg.end

vaarg.in_mem:                                     ; preds = %do.body
  %overflow_arg_area_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay11, i32 0, i32 2
  %overflow_arg_area = load i8*, i8** %overflow_arg_area_p, align 8
  %18 = bitcast i8* %overflow_arg_area to i8**
  %overflow_arg_area.next = getelementptr i8, i8* %overflow_arg_area, i32 8
  store i8* %overflow_arg_area.next, i8** %overflow_arg_area_p, align 8
  br label %vaarg.end

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %vaarg.addr = phi i8** [ %16, %vaarg.in_reg ], [ %18, %vaarg.in_mem ]
  %19 = load i8*, i8** %vaarg.addr, align 8
  store i8* %19, i8** %parent, align 8
  %20 = load i8*, i8** %parent, align 8
  %tobool12 = icmp ne i8* %20, null
  br i1 %tobool12, label %if.end14, label %if.then13

if.then13:                                        ; preds = %vaarg.end
  br label %do.end

if.end14:                                         ; preds = %vaarg.end
  %arraydecay15 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i64 0, i64 0
  %gp_offset_p16 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay15, i32 0, i32 0
  %gp_offset17 = load i32, i32* %gp_offset_p16, align 16
  %fits_in_gp18 = icmp ule i32 %gp_offset17, 40
  br i1 %fits_in_gp18, label %vaarg.in_reg19, label %vaarg.in_mem21

vaarg.in_reg19:                                   ; preds = %if.end14
  %21 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay15, i32 0, i32 3
  %reg_save_area20 = load i8*, i8** %21, align 16
  %22 = getelementptr i8, i8* %reg_save_area20, i32 %gp_offset17
  %23 = bitcast i8* %22 to i64*
  %24 = add i32 %gp_offset17, 8
  store i32 %24, i32* %gp_offset_p16, align 16
  br label %vaarg.end25

vaarg.in_mem21:                                   ; preds = %if.end14
  %overflow_arg_area_p22 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay15, i32 0, i32 2
  %overflow_arg_area23 = load i8*, i8** %overflow_arg_area_p22, align 8
  %25 = bitcast i8* %overflow_arg_area23 to i64*
  %overflow_arg_area.next24 = getelementptr i8, i8* %overflow_arg_area23, i32 8
  store i8* %overflow_arg_area.next24, i8** %overflow_arg_area_p22, align 8
  br label %vaarg.end25

vaarg.end25:                                      ; preds = %vaarg.in_mem21, %vaarg.in_reg19
  %vaarg.addr26 = phi i64* [ %23, %vaarg.in_reg19 ], [ %25, %vaarg.in_mem21 ]
  %26 = load i64, i64* %vaarg.addr26, align 8
  store i64 %26, i64* %parent_len, align 8
  %27 = load %struct.av*, %struct.av** %isa, align 8
  %28 = load i8*, i8** %parent, align 8
  %29 = load i64, i64* %parent_len, align 8
  %sub = sub i64 %29, 2
  %call27 = call %struct.sv* @Perl_newSVpvn(i8* %28, i64 %sub)
  call void @Perl_av_push(%struct.av* %27, %struct.sv* %call27)
  %30 = load i8*, i8** %parent, align 8
  %31 = load i64, i64* %parent_len, align 8
  %call28 = call %struct.gv* @Perl_gv_fetchpvn_flags(i8* %30, i64 %31, i32 1, i32 9)
  br label %do.cond

do.cond:                                          ; preds = %vaarg.end25
  br i1 true, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond, %if.then13
  %arraydecay29 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i64 0, i64 0
  %arraydecay2930 = bitcast %struct.__va_list_tag* %arraydecay29 to i8*
  call void @llvm.va_end(i8* %arraydecay2930)
  br label %return

return:                                           ; preds = %do.end, %if.then
  ret void
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #6

declare dso_local void @Perl_av_push(%struct.av*, %struct.sv*) #2

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #6

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_init_argv_symbols(i32 %argc, i8** %argv) #0 {
entry:
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %s = alloca i8*, align 8
  %start_name = alloca i8*, align 8
  %sv = alloca %struct.sv*, align 8
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 8
  %0 = load i32, i32* %argc.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %argc.addr, align 4
  %1 = load i8**, i8*** %argv.addr, align 8
  %incdec.ptr = getelementptr inbounds i8*, i8** %1, i32 1
  store i8** %incdec.ptr, i8*** %argv.addr, align 8
  %2 = load i8, i8* @PL_doswitches, align 1
  %tobool = trunc i8 %2 to i1
  br i1 %tobool, label %if.then, label %if.end35

if.then:                                          ; preds = %entry
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %3 = load i32, i32* %argc.addr, align 4
  %cmp = icmp sgt i32 %3, 0
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %4 = load i8**, i8*** %argv.addr, align 8
  %5 = load i8*, i8** %4, align 8
  %6 = load i8, i8* %5, align 1
  %conv = sext i8 %6 to i32
  %cmp1 = icmp eq i32 %conv, 45
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %cmp1, %land.rhs ]
  br i1 %7, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %8 = load i8**, i8*** %argv.addr, align 8
  %arrayidx = getelementptr inbounds i8*, i8** %8, i64 0
  %9 = load i8*, i8** %arrayidx, align 8
  %arrayidx3 = getelementptr inbounds i8, i8* %9, i64 1
  %10 = load i8, i8* %arrayidx3, align 1
  %tobool4 = icmp ne i8 %10, 0
  br i1 %tobool4, label %if.end, label %if.then5

if.then5:                                         ; preds = %for.body
  br label %for.end

if.end:                                           ; preds = %for.body
  %11 = load i8**, i8*** %argv.addr, align 8
  %arrayidx6 = getelementptr inbounds i8*, i8** %11, i64 0
  %12 = load i8*, i8** %arrayidx6, align 8
  %arrayidx7 = getelementptr inbounds i8, i8* %12, i64 1
  %13 = load i8, i8* %arrayidx7, align 1
  %conv8 = sext i8 %13 to i32
  %cmp9 = icmp eq i32 %conv8, 45
  br i1 %cmp9, label %land.lhs.true, label %if.end17

land.lhs.true:                                    ; preds = %if.end
  %14 = load i8**, i8*** %argv.addr, align 8
  %arrayidx11 = getelementptr inbounds i8*, i8** %14, i64 0
  %15 = load i8*, i8** %arrayidx11, align 8
  %arrayidx12 = getelementptr inbounds i8, i8* %15, i64 2
  %16 = load i8, i8* %arrayidx12, align 1
  %tobool13 = icmp ne i8 %16, 0
  br i1 %tobool13, label %if.end17, label %if.then14

if.then14:                                        ; preds = %land.lhs.true
  %17 = load i32, i32* %argc.addr, align 4
  %dec15 = add nsw i32 %17, -1
  store i32 %dec15, i32* %argc.addr, align 4
  %18 = load i8**, i8*** %argv.addr, align 8
  %incdec.ptr16 = getelementptr inbounds i8*, i8** %18, i32 1
  store i8** %incdec.ptr16, i8*** %argv.addr, align 8
  br label %for.end

if.end17:                                         ; preds = %land.lhs.true, %if.end
  %19 = load i8**, i8*** %argv.addr, align 8
  %arrayidx18 = getelementptr inbounds i8*, i8** %19, i64 0
  %20 = load i8*, i8** %arrayidx18, align 8
  %call = call i8* @strchr(i8* %20, i32 61) #11
  store i8* %call, i8** %s, align 8
  %tobool19 = icmp ne i8* %call, null
  br i1 %tobool19, label %if.then20, label %if.else

if.then20:                                        ; preds = %if.end17
  %21 = load i8**, i8*** %argv.addr, align 8
  %arrayidx21 = getelementptr inbounds i8*, i8** %21, i64 0
  %22 = load i8*, i8** %arrayidx21, align 8
  %add.ptr = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %add.ptr, i8** %start_name, align 8
  %23 = load i8*, i8** %start_name, align 8
  %24 = load i8*, i8** %s, align 8
  %25 = load i8*, i8** %start_name, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %24 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %25 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %call22 = call %struct.gv* @Perl_gv_fetchpvn_flags(i8* %23, i64 %sub.ptr.sub, i32 1, i32 3)
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %call22, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %26 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr23 = getelementptr inbounds %struct.gp, %struct.gp* %26, i64 0
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr23, i32 0, i32 0
  %27 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  %28 = load i8*, i8** %s, align 8
  %add.ptr24 = getelementptr inbounds i8, i8* %28, i64 1
  call void @Perl_sv_setpv(%struct.sv* %27, i8* %add.ptr24)
  br label %if.end32

if.else:                                          ; preds = %if.end17
  %29 = load i8**, i8*** %argv.addr, align 8
  %arrayidx25 = getelementptr inbounds i8*, i8** %29, i64 0
  %30 = load i8*, i8** %arrayidx25, align 8
  %add.ptr26 = getelementptr inbounds i8, i8* %30, i64 1
  %call27 = call %struct.gv* @Perl_gv_fetchpv(i8* %add.ptr26, i32 1, i32 3)
  %sv_u28 = getelementptr inbounds %struct.gv, %struct.gv* %call27, i32 0, i32 3
  %svu_gp29 = bitcast %union.anon.4* %sv_u28 to %struct.gp**
  %31 = load %struct.gp*, %struct.gp** %svu_gp29, align 8
  %add.ptr30 = getelementptr inbounds %struct.gp, %struct.gp* %31, i64 0
  %gp_sv31 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr30, i32 0, i32 0
  %32 = load %struct.sv*, %struct.sv** %gp_sv31, align 8
  call void @Perl_sv_setiv(%struct.sv* %32, i64 1)
  br label %if.end32

if.end32:                                         ; preds = %if.else, %if.then20
  br label %for.inc

for.inc:                                          ; preds = %if.end32
  %33 = load i32, i32* %argc.addr, align 4
  %dec33 = add nsw i32 %33, -1
  store i32 %dec33, i32* %argc.addr, align 4
  %34 = load i8**, i8*** %argv.addr, align 8
  %incdec.ptr34 = getelementptr inbounds i8*, i8** %34, i32 1
  store i8** %incdec.ptr34, i8*** %argv.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then14, %if.then5, %land.end
  br label %if.end35

if.end35:                                         ; preds = %for.end, %entry
  %call36 = call %struct.gv* @Perl_gv_fetchpvn_flags(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.47, i64 0, i64 0), i64 4, i32 129, i32 11)
  store %struct.gv* %call36, %struct.gv** @PL_argvgv, align 8
  %tobool37 = icmp ne %struct.gv* %call36, null
  br i1 %tobool37, label %if.then38, label %if.end81

if.then38:                                        ; preds = %if.end35
  %35 = load %struct.gv*, %struct.gv** @PL_argvgv, align 8
  %36 = bitcast %struct.gv* %35 to i8*
  %37 = bitcast i8* %36 to %struct.sv*
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 1
  %38 = load i32, i32* %sv_refcnt, align 8
  %inc = add i32 %38, 1
  store i32 %inc, i32* %sv_refcnt, align 8
  %39 = load %struct.gv*, %struct.gv** @PL_argvgv, align 8
  %sv_any = getelementptr inbounds %struct.gv, %struct.gv* %39, i32 0, i32 0
  %40 = load %struct.xpvgv*, %struct.xpvgv** %sv_any, align 8
  %xpv_cur = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %40, i32 0, i32 2
  %41 = load i64, i64* %xpv_cur, align 8
  %or = or i64 %41, 2
  store i64 %or, i64* %xpv_cur, align 8
  %42 = load %struct.gv*, %struct.gv** @PL_argvgv, align 8
  %sv_u39 = getelementptr inbounds %struct.gv, %struct.gv* %42, i32 0, i32 3
  %svu_gp40 = bitcast %union.anon.4* %sv_u39 to %struct.gp**
  %43 = load %struct.gp*, %struct.gp** %svu_gp40, align 8
  %add.ptr41 = getelementptr inbounds %struct.gp, %struct.gp* %43, i64 0
  %gp_av = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr41, i32 0, i32 6
  %44 = load %struct.av*, %struct.av** %gp_av, align 8
  %tobool42 = icmp ne %struct.av* %44, null
  br i1 %tobool42, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then38
  %45 = load %struct.gv*, %struct.gv** @PL_argvgv, align 8
  %sv_u43 = getelementptr inbounds %struct.gv, %struct.gv* %45, i32 0, i32 3
  %svu_gp44 = bitcast %union.anon.4* %sv_u43 to %struct.gp**
  %46 = load %struct.gp*, %struct.gp** %svu_gp44, align 8
  %add.ptr45 = getelementptr inbounds %struct.gp, %struct.gp* %46, i64 0
  %gp_av46 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr45, i32 0, i32 6
  %47 = load %struct.av*, %struct.av** %gp_av46, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then38
  %48 = load %struct.gv*, %struct.gv** @PL_argvgv, align 8
  %call47 = call %struct.gv* @Perl_gv_add_by_type(%struct.gv* %48, i32 11)
  %sv_u48 = getelementptr inbounds %struct.gv, %struct.gv* %call47, i32 0, i32 3
  %svu_gp49 = bitcast %union.anon.4* %sv_u48 to %struct.gp**
  %49 = load %struct.gp*, %struct.gp** %svu_gp49, align 8
  %add.ptr50 = getelementptr inbounds %struct.gp, %struct.gp* %49, i64 0
  %gp_av51 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr50, i32 0, i32 6
  %50 = load %struct.av*, %struct.av** %gp_av51, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.av* [ %47, %cond.true ], [ %50, %cond.false ]
  call void @Perl_av_clear(%struct.av* %cond)
  br label %for.cond52

for.cond52:                                       ; preds = %for.inc77, %cond.end
  %51 = load i32, i32* %argc.addr, align 4
  %cmp53 = icmp sgt i32 %51, 0
  br i1 %cmp53, label %for.body55, label %for.end80

for.body55:                                       ; preds = %for.cond52
  %52 = load i8**, i8*** %argv.addr, align 8
  %arrayidx56 = getelementptr inbounds i8*, i8** %52, i64 0
  %53 = load i8*, i8** %arrayidx56, align 8
  %call57 = call %struct.sv* @Perl_newSVpv(i8* %53, i64 0)
  store %struct.sv* %call57, %struct.sv** %sv, align 8
  %54 = load %struct.gv*, %struct.gv** @PL_argvgv, align 8
  %sv_u58 = getelementptr inbounds %struct.gv, %struct.gv* %54, i32 0, i32 3
  %svu_gp59 = bitcast %union.anon.4* %sv_u58 to %struct.gp**
  %55 = load %struct.gp*, %struct.gp** %svu_gp59, align 8
  %add.ptr60 = getelementptr inbounds %struct.gp, %struct.gp* %55, i64 0
  %gp_av61 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr60, i32 0, i32 6
  %56 = load %struct.av*, %struct.av** %gp_av61, align 8
  %57 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_av_push(%struct.av* %56, %struct.sv* %57)
  %58 = load i32, i32* @PL_unicode, align 4
  %and = and i32 %58, 64
  %tobool62 = icmp ne i32 %and, 0
  br i1 %tobool62, label %lor.lhs.false, label %if.then65

lor.lhs.false:                                    ; preds = %for.body55
  %59 = load i8, i8* @PL_utf8locale, align 1
  %tobool63 = trunc i8 %59 to i1
  br i1 %tobool63, label %if.then65, label %if.end71

if.then65:                                        ; preds = %lor.lhs.false, %for.body55
  %60 = load i32, i32* @PL_unicode, align 4
  %and66 = and i32 %60, 32
  %tobool67 = icmp ne i32 %and66, 0
  br i1 %tobool67, label %if.then68, label %if.end70

if.then68:                                        ; preds = %if.then65
  %61 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %61, i32 0, i32 2
  %62 = load i32, i32* %sv_flags, align 4
  %or69 = or i32 %62, 536870912
  store i32 %or69, i32* %sv_flags, align 4
  br label %if.end70

if.end70:                                         ; preds = %if.then68, %if.then65
  br label %if.end71

if.end71:                                         ; preds = %if.end70, %lor.lhs.false
  %63 = load i32, i32* @PL_unicode, align 4
  %and72 = and i32 %63, 128
  %tobool73 = icmp ne i32 %and72, 0
  br i1 %tobool73, label %if.then74, label %if.end76

if.then74:                                        ; preds = %if.end71
  %64 = load %struct.sv*, %struct.sv** %sv, align 8
  %call75 = call zeroext i1 @Perl_sv_utf8_decode(%struct.sv* %64)
  br label %if.end76

if.end76:                                         ; preds = %if.then74, %if.end71
  br label %for.inc77

for.inc77:                                        ; preds = %if.end76
  %65 = load i32, i32* %argc.addr, align 4
  %dec78 = add nsw i32 %65, -1
  store i32 %dec78, i32* %argc.addr, align 4
  %66 = load i8**, i8*** %argv.addr, align 8
  %incdec.ptr79 = getelementptr inbounds i8*, i8** %66, i32 1
  store i8** %incdec.ptr79, i8*** %argv.addr, align 8
  br label %for.cond52

for.end80:                                        ; preds = %for.cond52
  br label %if.end81

if.end81:                                         ; preds = %for.end80, %if.end35
  %67 = load i8*, i8** @PL_inplace, align 8
  %tobool82 = icmp ne i8* %67, null
  br i1 %tobool82, label %land.lhs.true83, label %if.end111

land.lhs.true83:                                  ; preds = %if.end81
  %68 = load %struct.gv*, %struct.gv** @PL_argvgv, align 8
  %tobool84 = icmp ne %struct.gv* %68, null
  br i1 %tobool84, label %lor.lhs.false85, label %if.then110

lor.lhs.false85:                                  ; preds = %land.lhs.true83
  %69 = load %struct.gv*, %struct.gv** @PL_argvgv, align 8
  %sv_u86 = getelementptr inbounds %struct.gv, %struct.gv* %69, i32 0, i32 3
  %svu_gp87 = bitcast %union.anon.4* %sv_u86 to %struct.gp**
  %70 = load %struct.gp*, %struct.gp** %svu_gp87, align 8
  %add.ptr88 = getelementptr inbounds %struct.gp, %struct.gp* %70, i64 0
  %gp_av89 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr88, i32 0, i32 6
  %71 = load %struct.av*, %struct.av** %gp_av89, align 8
  %72 = bitcast %struct.av* %71 to %struct.sv*
  %sv_flags90 = getelementptr inbounds %struct.sv, %struct.sv* %72, i32 0, i32 2
  %73 = load i32, i32* %sv_flags90, align 4
  %and91 = and i32 %73, 8388608
  %tobool92 = icmp ne i32 %and91, 0
  br i1 %tobool92, label %cond.true93, label %cond.false100

cond.true93:                                      ; preds = %lor.lhs.false85
  %74 = load %struct.gv*, %struct.gv** @PL_argvgv, align 8
  %sv_u94 = getelementptr inbounds %struct.gv, %struct.gv* %74, i32 0, i32 3
  %svu_gp95 = bitcast %union.anon.4* %sv_u94 to %struct.gp**
  %75 = load %struct.gp*, %struct.gp** %svu_gp95, align 8
  %add.ptr96 = getelementptr inbounds %struct.gp, %struct.gp* %75, i64 0
  %gp_av97 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr96, i32 0, i32 6
  %76 = load %struct.av*, %struct.av** %gp_av97, align 8
  %77 = bitcast %struct.av* %76 to i8*
  %78 = bitcast i8* %77 to %struct.sv*
  %call98 = call i32 @Perl_mg_size(%struct.sv* %78)
  %conv99 = sext i32 %call98 to i64
  br label %cond.end106

cond.false100:                                    ; preds = %lor.lhs.false85
  %79 = load %struct.gv*, %struct.gv** @PL_argvgv, align 8
  %sv_u101 = getelementptr inbounds %struct.gv, %struct.gv* %79, i32 0, i32 3
  %svu_gp102 = bitcast %union.anon.4* %sv_u101 to %struct.gp**
  %80 = load %struct.gp*, %struct.gp** %svu_gp102, align 8
  %add.ptr103 = getelementptr inbounds %struct.gp, %struct.gp* %80, i64 0
  %gp_av104 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr103, i32 0, i32 6
  %81 = load %struct.av*, %struct.av** %gp_av104, align 8
  %sv_any105 = getelementptr inbounds %struct.av, %struct.av* %81, i32 0, i32 0
  %82 = load %struct.xpvav*, %struct.xpvav** %sv_any105, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %82, i32 0, i32 2
  %83 = load i64, i64* %xav_fill, align 8
  br label %cond.end106

cond.end106:                                      ; preds = %cond.false100, %cond.true93
  %cond107 = phi i64 [ %conv99, %cond.true93 ], [ %83, %cond.false100 ]
  %cmp108 = icmp eq i64 %cond107, -1
  br i1 %cmp108, label %if.then110, label %if.end111

if.then110:                                       ; preds = %cond.end106, %land.lhs.true83
  call void (i32, i8*, ...) @Perl_ck_warner_d(i32 23, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.48, i64 0, i64 0))
  br label %if.end111

if.end111:                                        ; preds = %if.then110, %cond.end106, %if.end81
  ret void
}

; Function Attrs: nounwind readonly
declare dso_local i8* @strchr(i8*, i32) #5

declare dso_local void @Perl_sv_setpv(%struct.sv*, i8*) #2

declare dso_local zeroext i1 @Perl_sv_utf8_decode(%struct.sv*) #2

declare dso_local i32 @Perl_mg_size(%struct.sv*) #2

; Function Attrs: noinline nounwind uwtable
define internal i64 @S_av_top_index(%struct.av* %av) #0 {
entry:
  %av.addr = alloca %struct.av*, align 8
  store %struct.av* %av, %struct.av** %av.addr, align 8
  %0 = load %struct.av*, %struct.av** %av.addr, align 8
  %1 = bitcast %struct.av* %0 to %struct.sv*
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 8388608
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.av*, %struct.av** %av.addr, align 8
  %4 = bitcast %struct.av* %3 to i8*
  %5 = bitcast i8* %4 to %struct.sv*
  %call = call i32 @Perl_mg_size(%struct.sv* %5)
  %conv = sext i32 %call to i64
  br label %cond.end

cond.false:                                       ; preds = %entry
  %6 = load %struct.av*, %struct.av** %av.addr, align 8
  %sv_any = getelementptr inbounds %struct.av, %struct.av* %6, i32 0, i32 0
  %7 = load %struct.xpvav*, %struct.xpvav** %sv_any, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %7, i32 0, i32 2
  %8 = load i64, i64* %xav_fill, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %conv, %cond.true ], [ %8, %cond.false ]
  ret i64 %cond
}

declare dso_local %struct.sv* @Perl_av_shift(%struct.av*) #2

; Function Attrs: noreturn nounwind
declare dso_local void @siglongjmp(%struct.__jmp_buf_tag*, i32) #7

; Function Attrs: noreturn nounwind
declare dso_local void @exit(i32) #7

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_my_exit(i32 %status) #0 {
entry:
  %status.addr = alloca i32, align 4
  store i32 %status, i32* %status.addr, align 4
  %0 = load i8, i8* @PL_exit_flags, align 1
  %conv = zext i8 %0 to i32
  %and = and i32 %conv, 8
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @abort() #10
  unreachable

if.end:                                           ; preds = %entry
  %1 = load i8, i8* @PL_exit_flags, align 1
  %conv1 = zext i8 %1 to i32
  %and2 = and i32 %conv1, 4
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %if.then4, label %if.end11

if.then4:                                         ; preds = %if.end
  %2 = load i8, i8* @PL_exit_flags, align 1
  %conv5 = zext i8 %2 to i32
  %or = or i32 %conv5, 8
  %conv6 = trunc i32 %or to i8
  store i8 %conv6, i8* @PL_exit_flags, align 1
  %3 = load i32, i32* %status.addr, align 4
  %conv7 = zext i32 %3 to i64
  call void (i8*, ...) @Perl_warn(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.58, i64 0, i64 0), i64 %conv7)
  %4 = load i8, i8* @PL_exit_flags, align 1
  %conv8 = zext i8 %4 to i32
  %and9 = and i32 %conv8, -9
  %conv10 = trunc i32 %and9 to i8
  store i8 %conv10, i8* @PL_exit_flags, align 1
  br label %if.end11

if.end11:                                         ; preds = %if.then4, %if.end
  %5 = load i32, i32* %status.addr, align 4
  switch i32 %5, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb12
  ]

sw.bb:                                            ; preds = %if.end11
  store i32 0, i32* @PL_statusvalue, align 4
  store i32 0, i32* @PL_statusvalue_posix, align 4
  br label %sw.epilog

sw.bb12:                                          ; preds = %if.end11
  store i32 1, i32* @PL_statusvalue, align 4
  store i32 1, i32* @PL_statusvalue_posix, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %if.end11
  br label %do.body

do.body:                                          ; preds = %sw.default
  %6 = load i32, i32* %status.addr, align 4
  store i32 %6, i32* @PL_statusvalue, align 4
  %7 = load i32, i32* @PL_statusvalue, align 4
  %cmp = icmp ne i32 %7, -1
  br i1 %cmp, label %if.then14, label %if.end16

if.then14:                                        ; preds = %do.body
  %8 = load i32, i32* @PL_statusvalue, align 4
  %and15 = and i32 %8, 65535
  store i32 %and15, i32* @PL_statusvalue, align 4
  br label %if.end16

if.end16:                                         ; preds = %if.then14, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end16
  br label %sw.epilog

sw.epilog:                                        ; preds = %do.end, %sw.bb12, %sw.bb
  call void @S_my_exit_jump()
  ret void
}

; Function Attrs: noreturn nounwind
declare dso_local void @abort() #7

declare dso_local void @Perl_warn(i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_my_failure_exit() #0 {
entry:
  %exitstatus = alloca i32, align 4
  %call = call i32* @__errno_location() #12
  %0 = load i32, i32* %call, align 4
  %and = and i32 %0, 255
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  %call1 = call i32* @__errno_location() #12
  %1 = load i32, i32* %call1, align 4
  store i32 %1, i32* @PL_statusvalue, align 4
  %2 = load i32, i32* @PL_statusvalue, align 4
  %cmp = icmp ne i32 %2, -1
  br i1 %cmp, label %if.then2, label %if.end

if.then2:                                         ; preds = %do.body
  %3 = load i32, i32* @PL_statusvalue, align 4
  %and3 = and i32 %3, 65535
  store i32 %and3, i32* @PL_statusvalue, align 4
  br label %if.end

if.end:                                           ; preds = %if.then2, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end21

if.else:                                          ; preds = %entry
  %4 = load i32, i32* @PL_statusvalue, align 4
  %shr = ashr i32 %4, 8
  store i32 %shr, i32* %exitstatus, align 4
  %5 = load i32, i32* %exitstatus, align 4
  %and4 = and i32 %5, 255
  %tobool5 = icmp ne i32 %and4, 0
  br i1 %tobool5, label %if.then6, label %if.else13

if.then6:                                         ; preds = %if.else
  br label %do.body7

do.body7:                                         ; preds = %if.then6
  %6 = load i32, i32* %exitstatus, align 4
  store i32 %6, i32* @PL_statusvalue, align 4
  %7 = load i32, i32* @PL_statusvalue, align 4
  %cmp8 = icmp ne i32 %7, -1
  br i1 %cmp8, label %if.then9, label %if.end11

if.then9:                                         ; preds = %do.body7
  %8 = load i32, i32* @PL_statusvalue, align 4
  %and10 = and i32 %8, 65535
  store i32 %and10, i32* @PL_statusvalue, align 4
  br label %if.end11

if.end11:                                         ; preds = %if.then9, %do.body7
  br label %do.end12

do.end12:                                         ; preds = %if.end11
  br label %if.end20

if.else13:                                        ; preds = %if.else
  br label %do.body14

do.body14:                                        ; preds = %if.else13
  store i32 255, i32* @PL_statusvalue, align 4
  %9 = load i32, i32* @PL_statusvalue, align 4
  %cmp15 = icmp ne i32 %9, -1
  br i1 %cmp15, label %if.then16, label %if.end18

if.then16:                                        ; preds = %do.body14
  %10 = load i32, i32* @PL_statusvalue, align 4
  %and17 = and i32 %10, 65535
  store i32 %and17, i32* @PL_statusvalue, align 4
  br label %if.end18

if.end18:                                         ; preds = %if.then16, %do.body14
  br label %do.end19

do.end19:                                         ; preds = %if.end18
  br label %if.end20

if.end20:                                         ; preds = %do.end19, %do.end12
  br label %if.end21

if.end21:                                         ; preds = %if.end20, %do.end
  %11 = load i8, i8* @PL_exit_flags, align 1
  %conv = zext i8 %11 to i32
  %and22 = and i32 %conv, 8
  %tobool23 = icmp ne i32 %and22, 0
  br i1 %tobool23, label %if.then24, label %if.end25

if.then24:                                        ; preds = %if.end21
  call void @abort() #10
  unreachable

if.end25:                                         ; preds = %if.end21
  %12 = load i8, i8* @PL_exit_flags, align 1
  %conv26 = zext i8 %12 to i32
  %and27 = and i32 %conv26, 4
  %tobool28 = icmp ne i32 %and27, 0
  br i1 %tobool28, label %if.then29, label %if.end36

if.then29:                                        ; preds = %if.end25
  %13 = load i8, i8* @PL_exit_flags, align 1
  %conv30 = zext i8 %13 to i32
  %or = or i32 %conv30, 8
  %conv31 = trunc i32 %or to i8
  store i8 %conv31, i8* @PL_exit_flags, align 1
  %14 = load i32, i32* @PL_statusvalue, align 4
  %conv32 = sext i32 %14 to i64
  call void (i8*, ...) @Perl_warn(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.59, i64 0, i64 0), i64 %conv32)
  %15 = load i8, i8* @PL_exit_flags, align 1
  %conv33 = zext i8 %15 to i32
  %and34 = and i32 %conv33, -9
  %conv35 = trunc i32 %and34 to i8
  store i8 %conv35, i8* @PL_exit_flags, align 1
  br label %if.end36

if.end36:                                         ; preds = %if.then29, %if.end25
  call void @S_my_exit_jump()
  ret void
}

; Function Attrs: nounwind readnone
declare dso_local i32* @__errno_location() #8

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_xs_boot_epilog(i32 %ax) #0 {
entry:
  %ax.addr = alloca i32, align 4
  %tmpXSoff = alloca i64, align 8
  store i32 %ax, i32* %ax.addr, align 4
  %0 = load %struct.av*, %struct.av** @PL_unitcheckav, align 8
  %tobool = icmp ne %struct.av* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @PL_scopestack_ix, align 4
  %2 = load %struct.av*, %struct.av** @PL_unitcheckav, align 8
  call void @Perl_call_list(i32 %1, %struct.av* %2)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %do.body

do.body:                                          ; preds = %if.end
  %3 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %4 = load i32, i32* %ax.addr, align 4
  %add = add i32 %4, 0
  %idxprom = zext i32 %add to i64
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %3, i64 %idxprom
  store %struct.sv* @PL_sv_yes, %struct.sv** %arrayidx, align 8
  br label %do.body1

do.body1:                                         ; preds = %do.body
  store i64 1, i64* %tmpXSoff, align 8
  %5 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %6 = load i32, i32* %ax.addr, align 4
  %idx.ext = zext i32 %6 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %5, i64 %idx.ext
  %add.ptr2 = getelementptr inbounds %struct.sv*, %struct.sv** %add.ptr, i64 0
  store %struct.sv** %add.ptr2, %struct.sv*** @PL_stack_sp, align 8
  br label %do.end3

do.end:                                           ; No predecessors!
  br label %do.end3

do.end3:                                          ; preds = %do.body1, %do.end
  ret void
}

declare dso_local void @Perl_sv_free2(%struct.sv*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @S_init_main_stash() #0 {
entry:
  %gv = alloca %struct.gv*, align 8
  %svp = alloca %struct.sv**, align 8
  %errsv = alloca %struct.sv*, align 8
  %call = call %struct.sv* @Perl_newSV_type(i32 12)
  %0 = bitcast %struct.sv* %call to i8*
  %1 = bitcast i8* %0 to %struct.hv*
  %sv_refcnt = getelementptr inbounds %struct.hv, %struct.hv* %1, i32 0, i32 1
  %2 = load i32, i32* %sv_refcnt, align 8
  %inc = add i32 %2, 1
  store i32 %inc, i32* %sv_refcnt, align 8
  %call1 = call %struct.sv* @Perl_newSV_type(i32 12)
  %3 = bitcast %struct.sv* %call1 to i8*
  %4 = bitcast i8* %3 to %struct.hv*
  %5 = bitcast %struct.hv* %4 to i8*
  %6 = bitcast i8* %5 to %struct.sv*
  %7 = bitcast %struct.sv* %6 to %struct.hv*
  store %struct.hv* %7, %struct.hv** @PL_defstash, align 8
  store %struct.hv* %7, %struct.hv** @PL_curstash, align 8
  %call2 = call %struct.sv* @Perl_newSVpvn_share(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.77, i64 0, i64 0), i32 4, i32 0)
  store %struct.sv* %call2, %struct.sv** @PL_curstname, align 8
  %call3 = call %struct.gv* @Perl_gv_fetchpvn_flags(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i64 6, i32 129, i32 12)
  store %struct.gv* %call3, %struct.gv** %gv, align 8
  %8 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %8, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %9 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %9, i64 0
  %gp_hv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 5
  %10 = load %struct.hv*, %struct.hv** %gp_hv, align 8
  %11 = bitcast %struct.hv* %10 to i8*
  %12 = bitcast i8* %11 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %12)
  %13 = load %struct.hv*, %struct.hv** @PL_defstash, align 8
  call void @Perl_hv_name_set(%struct.hv* %13, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.77, i64 0, i64 0), i32 4, i32 0)
  %14 = load %struct.hv*, %struct.hv** @PL_defstash, align 8
  %15 = bitcast %struct.hv* %14 to i8*
  %16 = bitcast i8* %15 to %struct.sv*
  %call4 = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %16)
  %17 = bitcast %struct.sv* %call4 to i8*
  %18 = bitcast i8* %17 to %struct.hv*
  %19 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u5 = getelementptr inbounds %struct.gv, %struct.gv* %19, i32 0, i32 3
  %svu_gp6 = bitcast %union.anon.4* %sv_u5 to %struct.gp**
  %20 = load %struct.gp*, %struct.gp** %svu_gp6, align 8
  %add.ptr7 = getelementptr inbounds %struct.gp, %struct.gp* %20, i64 0
  %gp_hv8 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr7, i32 0, i32 5
  store %struct.hv* %18, %struct.hv** %gp_hv8, align 8
  %21 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags = getelementptr inbounds %struct.gv, %struct.gv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags, align 4
  %or = or i32 %22, 134283264
  store i32 %or, i32* %sv_flags, align 4
  %call9 = call %struct.gv* @Perl_gv_fetchpvn_flags(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.80, i64 0, i64 0), i64 3, i32 129, i32 11)
  %call10 = call %struct.gv* @Perl_gv_add_by_type(%struct.gv* %call9, i32 11)
  %call11 = call %struct.gv* @Perl_gv_add_by_type(%struct.gv* %call10, i32 12)
  store %struct.gv* %call11, %struct.gv** @PL_incgv, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %23 = load %struct.gv*, %struct.gv** @PL_incgv, align 8
  %tobool = icmp ne %struct.gv* %23, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %24 = load %struct.gv*, %struct.gv** @PL_incgv, align 8
  %sv_refcnt12 = getelementptr inbounds %struct.gv, %struct.gv* %24, i32 0, i32 1
  %25 = load i32, i32* %sv_refcnt12, align 8
  %inc13 = add i32 %25, 1
  store i32 %inc13, i32* %sv_refcnt12, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  %26 = load %struct.gv*, %struct.gv** @PL_incgv, align 8
  %sv_any = getelementptr inbounds %struct.gv, %struct.gv* %26, i32 0, i32 0
  %27 = load %struct.xpvgv*, %struct.xpvgv** %sv_any, align 8
  %xpv_cur = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %27, i32 0, i32 2
  %28 = load i64, i64* %xpv_cur, align 8
  %or14 = or i64 %28, 2
  store i64 %or14, i64* %xpv_cur, align 8
  %call15 = call %struct.gv* @Perl_gv_fetchpvn_flags(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.81, i64 0, i64 0), i64 1, i32 129, i32 3)
  store %struct.gv* %call15, %struct.gv** @PL_hintgv, align 8
  br label %do.body16

do.body16:                                        ; preds = %do.end
  %29 = load %struct.gv*, %struct.gv** @PL_hintgv, align 8
  %tobool17 = icmp ne %struct.gv* %29, null
  br i1 %tobool17, label %if.then18, label %if.end21

if.then18:                                        ; preds = %do.body16
  %30 = load %struct.gv*, %struct.gv** @PL_hintgv, align 8
  %sv_refcnt19 = getelementptr inbounds %struct.gv, %struct.gv* %30, i32 0, i32 1
  %31 = load i32, i32* %sv_refcnt19, align 8
  %inc20 = add i32 %31, 1
  store i32 %inc20, i32* %sv_refcnt19, align 8
  br label %if.end21

if.end21:                                         ; preds = %if.then18, %do.body16
  br label %do.end22

do.end22:                                         ; preds = %if.end21
  %32 = load %struct.gv*, %struct.gv** @PL_hintgv, align 8
  %sv_any23 = getelementptr inbounds %struct.gv, %struct.gv* %32, i32 0, i32 0
  %33 = load %struct.xpvgv*, %struct.xpvgv** %sv_any23, align 8
  %xpv_cur24 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %33, i32 0, i32 2
  %34 = load i64, i64* %xpv_cur24, align 8
  %or25 = or i64 %34, 2
  store i64 %or25, i64* %xpv_cur24, align 8
  %call26 = call %struct.gv* @Perl_gv_fetchpvn_flags(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.82, i64 0, i64 0), i64 1, i32 129, i32 11)
  store %struct.gv* %call26, %struct.gv** @PL_defgv, align 8
  br label %do.body27

do.body27:                                        ; preds = %do.end22
  %35 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %tobool28 = icmp ne %struct.gv* %35, null
  br i1 %tobool28, label %if.then29, label %if.end32

if.then29:                                        ; preds = %do.body27
  %36 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_refcnt30 = getelementptr inbounds %struct.gv, %struct.gv* %36, i32 0, i32 1
  %37 = load i32, i32* %sv_refcnt30, align 8
  %inc31 = add i32 %37, 1
  store i32 %inc31, i32* %sv_refcnt30, align 8
  br label %if.end32

if.end32:                                         ; preds = %if.then29, %do.body27
  br label %do.end33

do.end33:                                         ; preds = %if.end32
  %call34 = call %struct.gv* @Perl_gv_fetchpvn_flags(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.83, i64 0, i64 0), i64 1, i32 129, i32 3)
  store %struct.gv* %call34, %struct.gv** @PL_errgv, align 8
  br label %do.body35

do.body35:                                        ; preds = %do.end33
  %38 = load %struct.gv*, %struct.gv** @PL_errgv, align 8
  %tobool36 = icmp ne %struct.gv* %38, null
  br i1 %tobool36, label %if.then37, label %if.end40

if.then37:                                        ; preds = %do.body35
  %39 = load %struct.gv*, %struct.gv** @PL_errgv, align 8
  %sv_refcnt38 = getelementptr inbounds %struct.gv, %struct.gv* %39, i32 0, i32 1
  %40 = load i32, i32* %sv_refcnt38, align 8
  %inc39 = add i32 %40, 1
  store i32 %inc39, i32* %sv_refcnt38, align 8
  br label %if.end40

if.end40:                                         ; preds = %if.then37, %do.body35
  br label %do.end41

do.end41:                                         ; preds = %if.end40
  %41 = load %struct.gv*, %struct.gv** @PL_errgv, align 8
  %sv_any42 = getelementptr inbounds %struct.gv, %struct.gv* %41, i32 0, i32 0
  %42 = load %struct.xpvgv*, %struct.xpvgv** %sv_any42, align 8
  %xpv_cur43 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %42, i32 0, i32 2
  %43 = load i64, i64* %xpv_cur43, align 8
  %or44 = or i64 %43, 2
  store i64 %or44, i64* %xpv_cur43, align 8
  %call45 = call %struct.gv* @Perl_gv_fetchpvn_flags(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.84, i64 0, i64 0), i64 1, i32 129, i32 3)
  store %struct.gv* %call45, %struct.gv** @PL_replgv, align 8
  br label %do.body46

do.body46:                                        ; preds = %do.end41
  %44 = load %struct.gv*, %struct.gv** @PL_replgv, align 8
  %tobool47 = icmp ne %struct.gv* %44, null
  br i1 %tobool47, label %if.then48, label %if.end51

if.then48:                                        ; preds = %do.body46
  %45 = load %struct.gv*, %struct.gv** @PL_replgv, align 8
  %sv_refcnt49 = getelementptr inbounds %struct.gv, %struct.gv* %45, i32 0, i32 1
  %46 = load i32, i32* %sv_refcnt49, align 8
  %inc50 = add i32 %46, 1
  store i32 %inc50, i32* %sv_refcnt49, align 8
  br label %if.end51

if.end51:                                         ; preds = %if.then48, %do.body46
  br label %do.end52

do.end52:                                         ; preds = %if.end51
  %47 = load %struct.gv*, %struct.gv** @PL_replgv, align 8
  %sv_any53 = getelementptr inbounds %struct.gv, %struct.gv* %47, i32 0, i32 0
  %48 = load %struct.xpvgv*, %struct.xpvgv** %sv_any53, align 8
  %xpv_cur54 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %48, i32 0, i32 2
  %49 = load i64, i64* %xpv_cur54, align 8
  %or55 = or i64 %49, 2
  store i64 %or55, i64* %xpv_cur54, align 8
  %call56 = call i8* (i8*, ...) @Perl_form(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.85, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0))
  %50 = load %struct.gv*, %struct.gv** @PL_errgv, align 8
  %call57 = call %struct.gv* @Perl_gv_add_by_type(%struct.gv* %50, i32 0)
  %51 = load %struct.gv*, %struct.gv** @PL_errgv, align 8
  %sv_u58 = getelementptr inbounds %struct.gv, %struct.gv* %51, i32 0, i32 3
  %svu_gp59 = bitcast %union.anon.4* %sv_u58 to %struct.gp**
  %52 = load %struct.gp*, %struct.gp** %svu_gp59, align 8
  %add.ptr60 = getelementptr inbounds %struct.gp, %struct.gp* %52, i64 0
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr60, i32 0, i32 0
  %53 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  %tobool61 = icmp ne %struct.sv* %53, null
  br i1 %tobool61, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.end52
  %54 = load %struct.gv*, %struct.gv** @PL_errgv, align 8
  %sv_u62 = getelementptr inbounds %struct.gv, %struct.gv* %54, i32 0, i32 3
  %svu_gp63 = bitcast %union.anon.4* %sv_u62 to %struct.gp**
  %55 = load %struct.gp*, %struct.gp** %svu_gp63, align 8
  %add.ptr64 = getelementptr inbounds %struct.gp, %struct.gp* %55, i64 0
  %gp_sv65 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr64, i32 0, i32 0
  br label %cond.end

cond.false:                                       ; preds = %do.end52
  %56 = load %struct.gv*, %struct.gv** @PL_errgv, align 8
  %call66 = call %struct.gv* @Perl_gv_add_by_type(%struct.gv* %56, i32 0)
  %sv_u67 = getelementptr inbounds %struct.gv, %struct.gv* %call66, i32 0, i32 3
  %svu_gp68 = bitcast %union.anon.4* %sv_u67 to %struct.gp**
  %57 = load %struct.gp*, %struct.gp** %svu_gp68, align 8
  %add.ptr69 = getelementptr inbounds %struct.gp, %struct.gp* %57, i64 0
  %gp_sv70 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr69, i32 0, i32 0
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sv** [ %gp_sv65, %cond.true ], [ %gp_sv70, %cond.false ]
  %58 = load %struct.sv*, %struct.sv** %cond, align 8
  %call71 = call i8* @Perl_sv_grow(%struct.sv* %58, i64 240)
  br label %do.body72

do.body72:                                        ; preds = %cond.end
  %59 = load %struct.gv*, %struct.gv** @PL_errgv, align 8
  %sv_u73 = getelementptr inbounds %struct.gv, %struct.gv* %59, i32 0, i32 3
  %svu_gp74 = bitcast %union.anon.4* %sv_u73 to %struct.gp**
  %60 = load %struct.gp*, %struct.gp** %svu_gp74, align 8
  %add.ptr75 = getelementptr inbounds %struct.gp, %struct.gp* %60, i64 0
  %gp_sv76 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr75, i32 0, i32 0
  store %struct.sv** %gp_sv76, %struct.sv*** %svp, align 8
  %61 = load %struct.sv**, %struct.sv*** %svp, align 8
  %62 = load %struct.sv*, %struct.sv** %61, align 8
  %tobool77 = icmp ne %struct.sv* %62, null
  br i1 %tobool77, label %if.else, label %if.then78

if.then78:                                        ; preds = %do.body72
  br label %clresv_newemptypv

if.else:                                          ; preds = %do.body72
  %63 = load %struct.sv**, %struct.sv*** %svp, align 8
  %64 = load %struct.sv*, %struct.sv** %63, align 8
  %sv_flags79 = getelementptr inbounds %struct.sv, %struct.sv* %64, i32 0, i32 2
  %65 = load i32, i32* %sv_flags79, align 4
  %and = and i32 %65, 134283264
  %tobool80 = icmp ne i32 %and, 0
  br i1 %tobool80, label %if.then81, label %if.else83

if.then81:                                        ; preds = %if.else
  %66 = load %struct.sv**, %struct.sv*** %svp, align 8
  %67 = load %struct.sv*, %struct.sv** %66, align 8
  %68 = bitcast %struct.sv* %67 to i8*
  %69 = bitcast i8* %68 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %69)
  br label %clresv_newemptypv

clresv_newemptypv:                                ; preds = %if.then81, %if.then78
  %call82 = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), i64 0)
  %70 = load %struct.sv**, %struct.sv*** %svp, align 8
  store %struct.sv* %call82, %struct.sv** %70, align 8
  br label %if.end94

if.else83:                                        ; preds = %if.else
  %71 = load %struct.sv**, %struct.sv*** %svp, align 8
  %72 = load %struct.sv*, %struct.sv** %71, align 8
  store %struct.sv* %72, %struct.sv** %errsv, align 8
  %73 = load %struct.sv*, %struct.sv** %errsv, align 8
  call void @Perl_sv_setpvn(%struct.sv* %73, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), i64 0)
  %74 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_flags84 = getelementptr inbounds %struct.sv, %struct.sv* %74, i32 0, i32 2
  %75 = load i32, i32* %sv_flags84, align 4
  %and85 = and i32 %75, 1610547455
  store i32 %and85, i32* %sv_flags84, align 4
  %76 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_flags86 = getelementptr inbounds %struct.sv, %struct.sv* %76, i32 0, i32 2
  %77 = load i32, i32* %sv_flags86, align 4
  %or87 = or i32 %77, 17408
  store i32 %or87, i32* %sv_flags86, align 4
  %78 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_flags88 = getelementptr inbounds %struct.sv, %struct.sv* %78, i32 0, i32 2
  %79 = load i32, i32* %sv_flags88, align 4
  %and89 = and i32 %79, 14680064
  %tobool90 = icmp ne i32 %and89, 0
  br i1 %tobool90, label %if.then91, label %if.end93

if.then91:                                        ; preds = %if.else83
  %80 = load %struct.sv*, %struct.sv** %errsv, align 8
  %call92 = call i32 @Perl_mg_free(%struct.sv* %80)
  br label %if.end93

if.end93:                                         ; preds = %if.then91, %if.else83
  br label %if.end94

if.end94:                                         ; preds = %if.end93, %clresv_newemptypv
  br label %if.end95

if.end95:                                         ; preds = %if.end94
  br label %do.end96

do.end96:                                         ; preds = %if.end95
  %81 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %82 = load %struct.hv*, %struct.hv** @PL_defstash, align 8
  %cmp = icmp ne %struct.hv* %81, %82
  br i1 %cmp, label %if.then97, label %if.end99

if.then97:                                        ; preds = %do.end96
  %83 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %84 = bitcast %struct.hv* %83 to i8*
  %85 = bitcast i8* %84 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %85)
  %86 = load %struct.hv*, %struct.hv** @PL_defstash, align 8
  %87 = bitcast %struct.hv* %86 to i8*
  %88 = bitcast i8* %87 to %struct.sv*
  %call98 = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %88)
  %89 = bitcast %struct.sv* %call98 to %struct.hv*
  store %struct.hv* %89, %struct.hv** @PL_curstash, align 8
  br label %if.end99

if.end99:                                         ; preds = %if.then97, %do.end96
  %90 = load %struct.hv*, %struct.hv** @PL_defstash, align 8
  store %struct.hv* %90, %struct.hv** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 8), align 8
  %call100 = call %struct.gv* @Perl_gv_fetchpvn_flags(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.86, i64 0, i64 0), i64 4, i32 2, i32 12)
  %sv_u101 = getelementptr inbounds %struct.gv, %struct.gv* %call100, i32 0, i32 3
  %svu_gp102 = bitcast %union.anon.4* %sv_u101 to %struct.gp**
  %91 = load %struct.gp*, %struct.gp** %svu_gp102, align 8
  %add.ptr103 = getelementptr inbounds %struct.gp, %struct.gp* %91, i64 0
  %gp_hv104 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr103, i32 0, i32 5
  %92 = load %struct.hv*, %struct.hv** %gp_hv104, align 8
  store %struct.hv* %92, %struct.hv** @PL_debstash, align 8
  %call105 = call %struct.gv* @Perl_gv_fetchpvn_flags(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.87, i64 0, i64 0), i64 14, i32 2, i32 12)
  %sv_u106 = getelementptr inbounds %struct.gv, %struct.gv* %call105, i32 0, i32 3
  %svu_gp107 = bitcast %union.anon.4* %sv_u106 to %struct.gp**
  %93 = load %struct.gp*, %struct.gp** %svu_gp107, align 8
  %add.ptr108 = getelementptr inbounds %struct.gp, %struct.gp* %93, i64 0
  %gp_hv109 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr108, i32 0, i32 5
  %94 = load %struct.hv*, %struct.hv** %gp_hv109, align 8
  store %struct.hv* %94, %struct.hv** @PL_globalstash, align 8
  %call110 = call %struct.sv* @Perl_get_sv(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i64 0, i64 0), i32 1)
  call void @Perl_sv_setpvn(%struct.sv* %call110, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0), i64 1)
  ret void
}

declare dso_local void @Perl_sv_catpv(%struct.sv*, i8*) #2

; Function Attrs: nounwind readonly
declare dso_local i32 @strcmp(i8*, i8*) #5

; Function Attrs: noinline nounwind uwtable
define internal void @S_init_perllib() #0 {
entry:
  call void @S_incpush_use_sep(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.88, i64 0, i64 0), i64 0, i32 0)
  call void @S_incpush_use_sep(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.89, i64 0, i64 0), i64 0, i32 0)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal %struct._PerlIO** @S_open_script(i8* %scriptname, i1 zeroext %dosearch, i8* %suidscript) #0 {
entry:
  %retval = alloca %struct._PerlIO**, align 8
  %scriptname.addr = alloca i8*, align 8
  %dosearch.addr = alloca i8, align 1
  %suidscript.addr = alloca i8*, align 8
  %fdscript = alloca i32, align 4
  %rsfp = alloca %struct._PerlIO**, align 8
  %tmpstatbuf = alloca %struct.stat, align 8
  %fd = alloca i32, align 4
  %s = alloca i8*, align 8
  %uv = alloca i64, align 8
  store i8* %scriptname, i8** %scriptname.addr, align 8
  %frombool = zext i1 %dosearch to i8
  store i8 %frombool, i8* %dosearch.addr, align 1
  store i8* %suidscript, i8** %suidscript.addr, align 8
  store i32 -1, i32* %fdscript, align 4
  store %struct._PerlIO** null, %struct._PerlIO*** %rsfp, align 8
  %0 = load %struct.sv*, %struct.sv** @PL_e_script, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i8* @Perl_savepvn(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.90, i64 0, i64 0), i32 2)
  store i8* %call, i8** @PL_origfilename, align 8
  br label %if.end25

if.else:                                          ; preds = %entry
  %1 = load i8*, i8** %scriptname.addr, align 8
  %2 = load i8, i8* %dosearch.addr, align 1
  %tobool1 = trunc i8 %2 to i1
  %call2 = call i8* @Perl_find_script(i8* %1, i1 zeroext %tobool1, i8** null, i32 1)
  store i8* %call2, i8** @PL_origfilename, align 8
  store i8* %call2, i8** %scriptname.addr, align 8
  %3 = load i8*, i8** %scriptname.addr, align 8
  %call3 = call i32 @strncmp(i8* %3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.91, i64 0, i64 0), i64 8) #11
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %if.end24, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.else
  %4 = load i8*, i8** %scriptname.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 8
  %5 = load i8, i8* %arrayidx, align 1
  %idxprom = zext i8 %5 to i64
  %arrayidx5 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom
  %6 = load i32, i32* %arrayidx5, align 4
  %and = and i32 %6, 2
  %tobool6 = icmp ne i32 %and, 0
  br i1 %tobool6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  br i1 true, label %land.lhs.true7, label %if.end24

cond.false:                                       ; preds = %land.lhs.true
  br i1 false, label %land.lhs.true7, label %if.end24

land.lhs.true7:                                   ; preds = %cond.false, %cond.true
  %7 = load i8*, i8** %scriptname.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %7, i64 8
  %call8 = call zeroext i1 @Perl_grok_atoUV(i8* %add.ptr, i64* %uv, i8** %s)
  br i1 %call8, label %land.lhs.true9, label %if.end24

land.lhs.true9:                                   ; preds = %land.lhs.true7
  %8 = load i64, i64* %uv, align 8
  %cmp = icmp ule i64 %8, 2147483647
  br i1 %cmp, label %if.then10, label %if.end24

if.then10:                                        ; preds = %land.lhs.true9
  %9 = load i64, i64* %uv, align 8
  %conv = trunc i64 %9 to i32
  store i32 %conv, i32* %fdscript, align 4
  %10 = load i8*, i8** %s, align 8
  %11 = load i8, i8* %10, align 1
  %tobool11 = icmp ne i8 %11, 0
  br i1 %tobool11, label %if.then12, label %if.end23

if.then12:                                        ; preds = %if.then10
  %12 = load i8*, i8** %suidscript.addr, align 8
  store i8 1, i8* %12, align 1
  %13 = load i8*, i8** %s, align 8
  %14 = load i8, i8* %13, align 1
  %conv13 = sext i8 %14 to i32
  %cmp14 = icmp ne i32 %conv13, 47
  br i1 %cmp14, label %if.then16, label %if.end

if.then16:                                        ; preds = %if.then12
  %15 = load i8*, i8** %s, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.92, i64 0, i64 0), i8* %15)
  br label %if.end

if.end:                                           ; preds = %if.then16, %if.then12
  %16 = load i8*, i8** %s, align 8
  %add.ptr17 = getelementptr inbounds i8, i8* %16, i64 1
  %17 = load i8, i8* %add.ptr17, align 1
  %tobool18 = icmp ne i8 %17, 0
  br i1 %tobool18, label %if.end20, label %if.then19

if.then19:                                        ; preds = %if.end
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.93, i64 0, i64 0))
  br label %if.end20

if.end20:                                         ; preds = %if.then19, %if.end
  %18 = load i8*, i8** %s, align 8
  %add.ptr21 = getelementptr inbounds i8, i8* %18, i64 1
  %call22 = call i8* @Perl_savepv(i8* %add.ptr21)
  store i8* %call22, i8** %scriptname.addr, align 8
  %19 = load i8*, i8** @PL_origfilename, align 8
  call void @Perl_safesysfree(i8* %19)
  %20 = load i8*, i8** %scriptname.addr, align 8
  store i8* %20, i8** @PL_origfilename, align 8
  br label %if.end23

if.end23:                                         ; preds = %if.end20, %if.then10
  br label %if.end24

if.end24:                                         ; preds = %if.end23, %land.lhs.true9, %land.lhs.true7, %cond.false, %cond.true, %if.else
  br label %if.end25

if.end25:                                         ; preds = %if.end24, %if.then
  %21 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_filegv = getelementptr inbounds %struct.cop, %struct.cop* %21, i32 0, i32 9
  %22 = load %struct.gv*, %struct.gv** %cop_filegv, align 8
  %23 = bitcast %struct.gv* %22 to i8*
  %24 = bitcast i8* %23 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %24)
  %25 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_filegv26 = getelementptr inbounds %struct.cop, %struct.cop* %25, i32 0, i32 9
  store %struct.gv* null, %struct.gv** %cop_filegv26, align 8
  %26 = load i8*, i8** @PL_origfilename, align 8
  %call27 = call %struct.gv* @Perl_gv_fetchfile(i8* %26)
  %27 = bitcast %struct.gv* %call27 to i8*
  %28 = bitcast i8* %27 to %struct.sv*
  %call28 = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %28)
  %29 = bitcast %struct.sv* %call28 to %struct.gv*
  %30 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_filegv29 = getelementptr inbounds %struct.cop, %struct.cop* %30, i32 0, i32 9
  store %struct.gv* %29, %struct.gv** %cop_filegv29, align 8
  %31 = load i8*, i8** @PL_origfilename, align 8
  %32 = load i8, i8* %31, align 1
  %conv30 = sext i8 %32 to i32
  %cmp31 = icmp eq i32 %conv30, 45
  br i1 %cmp31, label %land.lhs.true33, label %if.end39

land.lhs.true33:                                  ; preds = %if.end25
  %33 = load i8*, i8** @PL_origfilename, align 8
  %arrayidx34 = getelementptr inbounds i8, i8* %33, i64 1
  %34 = load i8, i8* %arrayidx34, align 1
  %conv35 = sext i8 %34 to i32
  %cmp36 = icmp eq i32 %conv35, 0
  br i1 %cmp36, label %if.then38, label %if.end39

if.then38:                                        ; preds = %land.lhs.true33
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), i8** %scriptname.addr, align 8
  br label %if.end39

if.end39:                                         ; preds = %if.then38, %land.lhs.true33, %if.end25
  %35 = load i32, i32* %fdscript, align 4
  %cmp40 = icmp sge i32 %35, 0
  br i1 %cmp40, label %if.then42, label %if.else44

if.then42:                                        ; preds = %if.end39
  %36 = load i32, i32* %fdscript, align 4
  %call43 = call %struct._PerlIO** @PerlIO_fdopen(i32 %36, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.94, i64 0, i64 0))
  store %struct._PerlIO** %call43, %struct._PerlIO*** %rsfp, align 8
  br label %if.end51

if.else44:                                        ; preds = %if.end39
  %37 = load i8*, i8** %scriptname.addr, align 8
  %38 = load i8, i8* %37, align 1
  %tobool45 = icmp ne i8 %38, 0
  br i1 %tobool45, label %if.else48, label %if.then46

if.then46:                                        ; preds = %if.else44
  %39 = load i8*, i8** %suidscript.addr, align 8
  %40 = load i8, i8* %39, align 1
  %tobool47 = trunc i8 %40 to i1
  call void @S_forbid_setid(i8 signext 0, i1 zeroext %tobool47)
  store %struct._PerlIO** null, %struct._PerlIO*** %retval, align 8
  br label %return

if.else48:                                        ; preds = %if.else44
  %41 = load i8*, i8** %scriptname.addr, align 8
  %call49 = call %struct._PerlIO** @PerlIO_open(i8* %41, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.94, i64 0, i64 0))
  store %struct._PerlIO** %call49, %struct._PerlIO*** %rsfp, align 8
  br label %if.end50

if.end50:                                         ; preds = %if.else48
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %if.then42
  %42 = load %struct._PerlIO**, %struct._PerlIO*** %rsfp, align 8
  %tobool52 = icmp ne %struct._PerlIO** %42, null
  br i1 %tobool52, label %if.end68, label %if.then53

if.then53:                                        ; preds = %if.end51
  %43 = load %struct.sv*, %struct.sv** @PL_e_script, align 8
  %tobool54 = icmp ne %struct.sv* %43, null
  br i1 %tobool54, label %if.then55, label %if.else58

if.then55:                                        ; preds = %if.then53
  %call56 = call i32* @__errno_location() #12
  %44 = load i32, i32* %call56, align 4
  %call57 = call i8* @strerror(i32 %44) #6
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.95, i64 0, i64 0), i8* %call57)
  br label %if.end67

if.else58:                                        ; preds = %if.then53
  %45 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_filegv59 = getelementptr inbounds %struct.cop, %struct.cop* %45, i32 0, i32 9
  %46 = load %struct.gv*, %struct.gv** %cop_filegv59, align 8
  %tobool60 = icmp ne %struct.gv* %46, null
  br i1 %tobool60, label %cond.true61, label %cond.false64

cond.true61:                                      ; preds = %if.else58
  %47 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_filegv62 = getelementptr inbounds %struct.cop, %struct.cop* %47, i32 0, i32 9
  %48 = load %struct.gv*, %struct.gv** %cop_filegv62, align 8
  %sv_any = getelementptr inbounds %struct.gv, %struct.gv* %48, i32 0, i32 0
  %49 = load %struct.xpvgv*, %struct.xpvgv** %sv_any, align 8
  %xiv_u = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %49, i32 0, i32 4
  %xivu_namehek = bitcast %union._xivu* %xiv_u to %struct.hek**
  %50 = load %struct.hek*, %struct.hek** %xivu_namehek, align 8
  %hek_key = getelementptr inbounds %struct.hek, %struct.hek* %50, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key, i64 0, i64 0
  %add.ptr63 = getelementptr inbounds i8, i8* %arraydecay, i64 2
  br label %cond.end

cond.false64:                                     ; preds = %if.else58
  br label %cond.end

cond.end:                                         ; preds = %cond.false64, %cond.true61
  %cond = phi i8* [ %add.ptr63, %cond.true61 ], [ null, %cond.false64 ]
  %call65 = call i32* @__errno_location() #12
  %51 = load i32, i32* %call65, align 4
  %call66 = call i8* @strerror(i32 %51) #6
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.96, i64 0, i64 0), i8* %cond, i8* %call66)
  br label %if.end67

if.end67:                                         ; preds = %cond.end, %if.then55
  br label %if.end68

if.end68:                                         ; preds = %if.end67, %if.end51
  %52 = load %struct._PerlIO**, %struct._PerlIO*** %rsfp, align 8
  %call69 = call i32 @Perl_PerlIO_fileno(%struct._PerlIO** %52)
  store i32 %call69, i32* %fd, align 4
  %53 = load i32, i32* %fd, align 4
  %cmp70 = icmp sge i32 %53, 0
  br i1 %cmp70, label %if.then72, label %if.end93

if.then72:                                        ; preds = %if.end68
  %54 = load i32, i32* %fd, align 4
  %call73 = call i32 (i32, i32, ...) @fcntl64(i32 %54, i32 2, i32 1)
  %cmp74 = icmp slt i32 %call73, 0
  br i1 %cmp74, label %if.then76, label %if.end92

if.then76:                                        ; preds = %if.then72
  %55 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_filegv77 = getelementptr inbounds %struct.cop, %struct.cop* %55, i32 0, i32 9
  %56 = load %struct.gv*, %struct.gv** %cop_filegv77, align 8
  %tobool78 = icmp ne %struct.gv* %56, null
  br i1 %tobool78, label %cond.true79, label %cond.false87

cond.true79:                                      ; preds = %if.then76
  %57 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_filegv80 = getelementptr inbounds %struct.cop, %struct.cop* %57, i32 0, i32 9
  %58 = load %struct.gv*, %struct.gv** %cop_filegv80, align 8
  %sv_any81 = getelementptr inbounds %struct.gv, %struct.gv* %58, i32 0, i32 0
  %59 = load %struct.xpvgv*, %struct.xpvgv** %sv_any81, align 8
  %xiv_u82 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %59, i32 0, i32 4
  %xivu_namehek83 = bitcast %union._xivu* %xiv_u82 to %struct.hek**
  %60 = load %struct.hek*, %struct.hek** %xivu_namehek83, align 8
  %hek_key84 = getelementptr inbounds %struct.hek, %struct.hek* %60, i32 0, i32 2
  %arraydecay85 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key84, i64 0, i64 0
  %add.ptr86 = getelementptr inbounds i8, i8* %arraydecay85, i64 2
  br label %cond.end88

cond.false87:                                     ; preds = %if.then76
  br label %cond.end88

cond.end88:                                       ; preds = %cond.false87, %cond.true79
  %cond89 = phi i8* [ %add.ptr86, %cond.true79 ], [ null, %cond.false87 ]
  %call90 = call i32* @__errno_location() #12
  %61 = load i32, i32* %call90, align 4
  %call91 = call i8* @strerror(i32 %61) #6
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.96, i64 0, i64 0), i8* %cond89, i8* %call91)
  br label %if.end92

if.end92:                                         ; preds = %cond.end88, %if.then72
  br label %if.end93

if.end93:                                         ; preds = %if.end92, %if.end68
  %62 = load i32, i32* %fd, align 4
  %cmp94 = icmp slt i32 %62, 0
  br i1 %cmp94, label %if.then103, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end93
  %63 = load i32, i32* %fd, align 4
  %call96 = call i32 @fstat64(i32 %63, %struct.stat* %tmpstatbuf) #6
  %cmp97 = icmp sge i32 %call96, 0
  br i1 %cmp97, label %land.lhs.true99, label %if.end118

land.lhs.true99:                                  ; preds = %lor.lhs.false
  %st_mode = getelementptr inbounds %struct.stat, %struct.stat* %tmpstatbuf, i32 0, i32 3
  %64 = load i32, i32* %st_mode, align 8
  %and100 = and i32 %64, 61440
  %cmp101 = icmp eq i32 %and100, 16384
  br i1 %cmp101, label %if.then103, label %if.end118

if.then103:                                       ; preds = %land.lhs.true99, %if.end93
  %65 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_filegv104 = getelementptr inbounds %struct.cop, %struct.cop* %65, i32 0, i32 9
  %66 = load %struct.gv*, %struct.gv** %cop_filegv104, align 8
  %tobool105 = icmp ne %struct.gv* %66, null
  br i1 %tobool105, label %cond.true106, label %cond.false114

cond.true106:                                     ; preds = %if.then103
  %67 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_filegv107 = getelementptr inbounds %struct.cop, %struct.cop* %67, i32 0, i32 9
  %68 = load %struct.gv*, %struct.gv** %cop_filegv107, align 8
  %sv_any108 = getelementptr inbounds %struct.gv, %struct.gv* %68, i32 0, i32 0
  %69 = load %struct.xpvgv*, %struct.xpvgv** %sv_any108, align 8
  %xiv_u109 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %69, i32 0, i32 4
  %xivu_namehek110 = bitcast %union._xivu* %xiv_u109 to %struct.hek**
  %70 = load %struct.hek*, %struct.hek** %xivu_namehek110, align 8
  %hek_key111 = getelementptr inbounds %struct.hek, %struct.hek* %70, i32 0, i32 2
  %arraydecay112 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key111, i64 0, i64 0
  %add.ptr113 = getelementptr inbounds i8, i8* %arraydecay112, i64 2
  br label %cond.end115

cond.false114:                                    ; preds = %if.then103
  br label %cond.end115

cond.end115:                                      ; preds = %cond.false114, %cond.true106
  %cond116 = phi i8* [ %add.ptr113, %cond.true106 ], [ null, %cond.false114 ]
  %call117 = call i8* @strerror(i32 21) #6
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.96, i64 0, i64 0), i8* %cond116, i8* %call117)
  br label %if.end118

if.end118:                                        ; preds = %cond.end115, %land.lhs.true99, %lor.lhs.false
  %71 = load %struct._PerlIO**, %struct._PerlIO*** %rsfp, align 8
  store %struct._PerlIO** %71, %struct._PerlIO*** %retval, align 8
  br label %return

return:                                           ; preds = %if.end118, %if.then46
  %72 = load %struct._PerlIO**, %struct._PerlIO*** %retval, align 8
  ret %struct._PerlIO** %72
}

declare dso_local %struct._PerlIO** @Perl_PerlIO_stdin() #2

declare dso_local void (i32)* @Perl_rsignal_state(i32) #2

declare dso_local void @Perl_ck_warner(i32, i8*, ...) #2

declare dso_local void (i32)* @Perl_rsignal(i32, void (i32)*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @S_find_beginning(%struct.sv* %linestr_sv, %struct._PerlIO** %rsfp) #0 {
entry:
  %linestr_sv.addr = alloca %struct.sv*, align 8
  %rsfp.addr = alloca %struct._PerlIO**, align 8
  %s = alloca i8*, align 8
  %s2 = alloca i8*, align 8
  store %struct.sv* %linestr_sv, %struct.sv** %linestr_sv.addr, align 8
  store %struct._PerlIO** %rsfp, %struct._PerlIO*** %rsfp.addr, align 8
  br label %do.body

do.body:                                          ; preds = %land.end, %entry
  %0 = load %struct.sv*, %struct.sv** %linestr_sv.addr, align 8
  %1 = load %struct._PerlIO**, %struct._PerlIO*** %rsfp.addr, align 8
  %call = call i8* @Perl_sv_gets(%struct.sv* %0, %struct._PerlIO** %1, i32 0)
  store i8* %call, i8** %s, align 8
  %cmp = icmp eq i8* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.97, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  %2 = load i8*, i8** %s, align 8
  store i8* %2, i8** %s2, align 8
  br label %do.cond

do.cond:                                          ; preds = %if.end
  %3 = load i8*, i8** %s, align 8
  %4 = load i8, i8* %3, align 1
  %conv = sext i8 %4 to i32
  %cmp1 = icmp eq i32 %conv, 35
  br i1 %cmp1, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %do.cond
  %5 = load i8*, i8** %s, align 8
  %arrayidx = getelementptr inbounds i8, i8* %5, i64 1
  %6 = load i8, i8* %arrayidx, align 1
  %conv3 = sext i8 %6 to i32
  %cmp4 = icmp eq i32 %conv3, 33
  br i1 %cmp4, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %7 = load i8*, i8** %s, align 8
  %call6 = call i8* @Perl_instr(i8* %7, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.98, i64 0, i64 0))
  store i8* %call6, i8** %s, align 8
  %tobool = icmp ne i8* %call6, null
  br i1 %tobool, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %8 = load i8*, i8** %s2, align 8
  %call7 = call i8* @Perl_instr(i8* %8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.99, i64 0, i64 0))
  store i8* %call7, i8** %s, align 8
  %tobool8 = icmp ne i8* %call7, null
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %9 = phi i1 [ true, %land.rhs ], [ %tobool8, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %land.lhs.true, %do.cond
  %10 = phi i1 [ false, %land.lhs.true ], [ false, %do.cond ], [ %9, %lor.end ]
  %lnot = xor i1 %10, true
  br i1 %lnot, label %do.body, label %do.end

do.end:                                           ; preds = %land.end
  %11 = load %struct._PerlIO**, %struct._PerlIO*** %rsfp.addr, align 8
  %call9 = call i32 @PerlIO_ungetc(%struct._PerlIO** %11, i32 10)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %do.end
  %12 = load i8*, i8** %s, align 8
  %13 = load i8, i8* %12, align 1
  %conv10 = sext i8 %13 to i32
  %tobool11 = icmp ne i32 %conv10, 0
  br i1 %tobool11, label %land.rhs12, label %land.end22

land.rhs12:                                       ; preds = %while.cond
  %14 = load i8*, i8** %s, align 8
  %15 = load i8, i8* %14, align 1
  %idxprom = zext i8 %15 to i64
  %arrayidx13 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom
  %16 = load i32, i32* %arrayidx13, align 4
  %and = and i32 %16, 17408
  %cmp14 = icmp eq i32 %and, 17408
  br i1 %cmp14, label %lor.end20, label %lor.rhs16

lor.rhs16:                                        ; preds = %land.rhs12
  %17 = load i8*, i8** %s, align 8
  %18 = load i8, i8* %17, align 1
  %conv17 = sext i8 %18 to i32
  %cmp18 = icmp eq i32 %conv17, 35
  br label %lor.end20

lor.end20:                                        ; preds = %lor.rhs16, %land.rhs12
  %19 = phi i1 [ true, %land.rhs12 ], [ %cmp18, %lor.rhs16 ]
  %lnot21 = xor i1 %19, true
  br label %land.end22

land.end22:                                       ; preds = %lor.end20, %while.cond
  %20 = phi i1 [ false, %while.cond ], [ %lnot21, %lor.end20 ]
  br i1 %20, label %while.body, label %while.end

while.body:                                       ; preds = %land.end22
  %21 = load i8*, i8** %s, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %21, i32 1
  store i8* %incdec.ptr, i8** %s, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end22
  %22 = load i8*, i8** %s, align 8
  store i8* %22, i8** %s2, align 8
  br label %while.cond23

while.cond23:                                     ; preds = %while.body32, %while.end
  %23 = load i8*, i8** %s, align 8
  %24 = load i8, i8* %23, align 1
  %conv24 = sext i8 %24 to i32
  %cmp25 = icmp eq i32 %conv24, 32
  br i1 %cmp25, label %lor.end31, label %lor.rhs27

lor.rhs27:                                        ; preds = %while.cond23
  %25 = load i8*, i8** %s, align 8
  %26 = load i8, i8* %25, align 1
  %conv28 = sext i8 %26 to i32
  %cmp29 = icmp eq i32 %conv28, 9
  br label %lor.end31

lor.end31:                                        ; preds = %lor.rhs27, %while.cond23
  %27 = phi i1 [ true, %while.cond23 ], [ %cmp29, %lor.rhs27 ]
  br i1 %27, label %while.body32, label %while.end34

while.body32:                                     ; preds = %lor.end31
  %28 = load i8*, i8** %s, align 8
  %incdec.ptr33 = getelementptr inbounds i8, i8* %28, i32 1
  store i8* %incdec.ptr33, i8** %s, align 8
  br label %while.cond23

while.end34:                                      ; preds = %lor.end31
  %29 = load i8*, i8** %s, align 8
  %incdec.ptr35 = getelementptr inbounds i8, i8* %29, i32 1
  store i8* %incdec.ptr35, i8** %s, align 8
  %30 = load i8, i8* %29, align 1
  %conv36 = sext i8 %30 to i32
  %cmp37 = icmp eq i32 %conv36, 45
  br i1 %cmp37, label %if.then39, label %if.end73

if.then39:                                        ; preds = %while.end34
  br label %while.cond40

while.cond40:                                     ; preds = %while.body61, %if.then39
  %31 = load i8*, i8** %s2, align 8
  %arrayidx41 = getelementptr inbounds i8, i8* %31, i64 -1
  %32 = load i8, i8* %arrayidx41, align 1
  %idxprom42 = zext i8 %32 to i64
  %arrayidx43 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom42
  %33 = load i32, i32* %arrayidx43, align 4
  %and44 = and i32 %33, 2
  %tobool45 = icmp ne i32 %and44, 0
  br i1 %tobool45, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.cond40
  br i1 true, label %lor.end60, label %lor.lhs.false

cond.false:                                       ; preds = %while.cond40
  br i1 false, label %lor.end60, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.false, %cond.true
  %34 = load i8*, i8** %s2, align 8
  %arrayidx46 = getelementptr inbounds i8, i8* %34, i64 -1
  %35 = load i8, i8* %arrayidx46, align 1
  %conv47 = sext i8 %35 to i32
  %cmp48 = icmp eq i32 %conv47, 45
  br i1 %cmp48, label %lor.end60, label %lor.lhs.false50

lor.lhs.false50:                                  ; preds = %lor.lhs.false
  %36 = load i8*, i8** %s2, align 8
  %arrayidx51 = getelementptr inbounds i8, i8* %36, i64 -1
  %37 = load i8, i8* %arrayidx51, align 1
  %conv52 = sext i8 %37 to i32
  %cmp53 = icmp eq i32 %conv52, 46
  br i1 %cmp53, label %lor.end60, label %lor.rhs55

lor.rhs55:                                        ; preds = %lor.lhs.false50
  %38 = load i8*, i8** %s2, align 8
  %arrayidx56 = getelementptr inbounds i8, i8* %38, i64 -1
  %39 = load i8, i8* %arrayidx56, align 1
  %conv57 = sext i8 %39 to i32
  %cmp58 = icmp eq i32 %conv57, 95
  br label %lor.end60

lor.end60:                                        ; preds = %lor.rhs55, %lor.lhs.false50, %lor.lhs.false, %cond.false, %cond.true
  %40 = phi i1 [ true, %lor.lhs.false50 ], [ true, %lor.lhs.false ], [ true, %cond.false ], [ true, %cond.true ], [ %cmp58, %lor.rhs55 ]
  br i1 %40, label %while.body61, label %while.end63

while.body61:                                     ; preds = %lor.end60
  %41 = load i8*, i8** %s2, align 8
  %incdec.ptr62 = getelementptr inbounds i8, i8* %41, i32 -1
  store i8* %incdec.ptr62, i8** %s2, align 8
  br label %while.cond40

while.end63:                                      ; preds = %lor.end60
  %42 = load i8*, i8** %s2, align 8
  %add.ptr = getelementptr inbounds i8, i8* %42, i64 -4
  %call64 = call i32 @strncmp(i8* %add.ptr, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.98, i64 0, i64 0), i64 4) #11
  %tobool65 = icmp ne i32 %call64, 0
  br i1 %tobool65, label %if.end72, label %if.then66

if.then66:                                        ; preds = %while.end63
  br label %while.cond67

while.cond67:                                     ; preds = %while.body70, %if.then66
  %43 = load i8*, i8** %s, align 8
  %call68 = call i8* @Perl_moreswitches(i8* %43)
  store i8* %call68, i8** %s, align 8
  %tobool69 = icmp ne i8* %call68, null
  br i1 %tobool69, label %while.body70, label %while.end71

while.body70:                                     ; preds = %while.cond67
  br label %while.cond67

while.end71:                                      ; preds = %while.cond67
  br label %if.end72

if.end72:                                         ; preds = %while.end71, %while.end63
  br label %if.end73

if.end73:                                         ; preds = %if.end72, %while.end34
  ret void
}

; Function Attrs: nounwind
declare dso_local i32 @chdir(i8*) #1

declare dso_local %struct.padlist* @Perl_pad_new(i32) #2

declare dso_local void @Perl_boot_core_PerlIO() #2

declare dso_local void @Perl_boot_core_UNIVERSAL() #2

declare dso_local void @Perl_boot_core_mro() #2

declare dso_local %struct.cv* @Perl_newXS(i8*, void (%struct.cv*)*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @S_Internals_V(%struct.cv* %cv) #0 {
entry:
  %cv.addr = alloca %struct.cv*, align 8
  %sp = alloca %struct.sv**, align 8
  %ax = alloca i32, align 4
  %mark = alloca %struct.sv**, align 8
  %items = alloca i32, align 4
  %local_patch_count = alloca i32, align 4
  %entries = alloca i32, align 4
  %i = alloca i32, align 4
  %tmpXSoff = alloca i64, align 8
  store %struct.cv* %cv, %struct.cv** %cv.addr, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %1, i32 -1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  %2 = load i32, i32* %1, align 4
  store i32 %2, i32* %ax, align 4
  %3 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %4 = load i32, i32* %ax, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %ax, align 4
  %idx.ext = sext i32 %4 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %3, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** %mark, align 8
  %5 = load %struct.sv**, %struct.sv*** %sp, align 8
  %6 = load %struct.sv**, %struct.sv*** %mark, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %5 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %6 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %conv = trunc i64 %sub.ptr.div to i32
  store i32 %conv, i32* %items, align 4
  store i32 0, i32* %local_patch_count, align 4
  store i32 3, i32* %entries, align 4
  %7 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %8 = load i32, i32* %items, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %9 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %10 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast1 = ptrtoint %struct.sv** %9 to i64
  %sub.ptr.rhs.cast2 = ptrtoint %struct.sv** %10 to i64
  %sub.ptr.sub3 = sub i64 %sub.ptr.lhs.cast1, %sub.ptr.rhs.cast2
  %sub.ptr.div4 = sdiv exact i64 %sub.ptr.sub3, 8
  %cmp = icmp slt i64 %sub.ptr.div4, 3
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %if.then, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  %11 = load %struct.sv**, %struct.sv*** %sp, align 8
  %12 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call = call %struct.sv** @Perl_stack_grow(%struct.sv** %11, %struct.sv** %12, i64 3)
  store %struct.sv** %call, %struct.sv*** %sp, align 8
  %13 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %call6 = call %struct.sv* @Perl_newSVpv(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_bincompat_options, i64 0, i64 0), i64 0)
  %call7 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call6)
  %14 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr8 = getelementptr inbounds %struct.sv*, %struct.sv** %14, i32 1
  store %struct.sv** %incdec.ptr8, %struct.sv*** %sp, align 8
  store %struct.sv* %call7, %struct.sv** %incdec.ptr8, align 8
  %call9 = call %struct.sv* @Perl_newSVpvn_flags(i8* getelementptr inbounds ([113 x i8], [113 x i8]* @S_Internals_V.non_bincompat_options, i64 0, i64 0), i64 112, i32 524288)
  %15 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr10 = getelementptr inbounds %struct.sv*, %struct.sv** %15, i32 1
  store %struct.sv** %incdec.ptr10, %struct.sv*** %sp, align 8
  store %struct.sv* %call9, %struct.sv** %incdec.ptr10, align 8
  %16 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr11 = getelementptr inbounds %struct.sv*, %struct.sv** %16, i32 1
  store %struct.sv** %incdec.ptr11, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr11, align 8
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.end
  %17 = load i32, i32* %i, align 4
  %cmp12 = icmp sle i32 %17, 0
  br i1 %cmp12, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %18 = load i8**, i8*** @PL_localpatches, align 8
  %19 = load i32, i32* %i, align 4
  %idxprom = sext i32 %19 to i64
  %arrayidx = getelementptr inbounds i8*, i8** %18, i64 %idxprom
  %20 = load i8*, i8** %arrayidx, align 8
  %call14 = call %struct.sv* @Perl_newSVpv(i8* %20, i64 0)
  %call15 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call14)
  %21 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr16 = getelementptr inbounds %struct.sv*, %struct.sv** %21, i32 1
  store %struct.sv** %incdec.ptr16, %struct.sv*** %sp, align 8
  store %struct.sv* %call15, %struct.sv** %incdec.ptr16, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %22 = load i32, i32* %i, align 4
  %inc17 = add nsw i32 %22, 1
  store i32 %inc17, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %do.body18

do.body18:                                        ; preds = %for.end
  store i64 3, i64* %tmpXSoff, align 8
  %23 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %24 = load i32, i32* %ax, align 4
  %idx.ext19 = sext i32 %24 to i64
  %add.ptr20 = getelementptr inbounds %struct.sv*, %struct.sv** %23, i64 %idx.ext19
  %add.ptr21 = getelementptr inbounds %struct.sv*, %struct.sv** %add.ptr20, i64 2
  store %struct.sv** %add.ptr21, %struct.sv*** @PL_stack_sp, align 8
  br label %do.end22

do.end22:                                         ; preds = %do.body18
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_init_predump_symbols() #0 {
entry:
  %tmpgv = alloca %struct.gv*, align 8
  %io = alloca %struct.io*, align 8
  %call = call %struct.sv* @Perl_get_sv(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.100, i64 0, i64 0), i32 1)
  call void @Perl_sv_setpvn(%struct.sv* %call, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.101, i64 0, i64 0), i64 1)
  %call1 = call %struct.gv* @Perl_gv_fetchpvn_flags(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.102, i64 0, i64 0), i64 1, i32 129, i32 3)
  %0 = bitcast %struct.gv* %call1 to i8*
  %1 = bitcast i8* %0 to %struct.sv*
  %call2 = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %1)
  %2 = bitcast %struct.sv* %call2 to %struct.gv*
  store %struct.gv* %2, %struct.gv** @PL_ofsgv, align 8
  call void (i8*, i64, ...) @Perl_populate_isa(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.103, i64 0, i64 0), i64 13, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.104, i64 0, i64 0), i64 12, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.105, i64 0, i64 0), i64 14, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.106, i64 0, i64 0), i64 10, i8* null)
  %call3 = call %struct.gv* @Perl_gv_fetchpvn_flags(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.107, i64 0, i64 0), i64 5, i32 129, i32 15)
  store %struct.gv* %call3, %struct.gv** @PL_stdingv, align 8
  %3 = load %struct.gv*, %struct.gv** @PL_stdingv, align 8
  %sv_any = getelementptr inbounds %struct.gv, %struct.gv* %3, i32 0, i32 0
  %4 = load %struct.xpvgv*, %struct.xpvgv** %sv_any, align 8
  %xpv_cur = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %4, i32 0, i32 2
  %5 = load i64, i64* %xpv_cur, align 8
  %or = or i64 %5, 2
  store i64 %or, i64* %xpv_cur, align 8
  %6 = load %struct.gv*, %struct.gv** @PL_stdingv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %6, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %7 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %7, i64 0
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 1
  %8 = load %struct.io*, %struct.io** %gp_io, align 8
  store %struct.io* %8, %struct.io** %io, align 8
  %9 = load %struct.io*, %struct.io** %io, align 8
  %sv_any4 = getelementptr inbounds %struct.io, %struct.io* %9, i32 0, i32 0
  %10 = load %struct.xpvio*, %struct.xpvio** %sv_any4, align 8
  %xio_type = getelementptr inbounds %struct.xpvio, %struct.xpvio* %10, i32 0, i32 16
  store i8 60, i8* %xio_type, align 8
  %call5 = call %struct._PerlIO** @Perl_PerlIO_stdin()
  %11 = load %struct.io*, %struct.io** %io, align 8
  %sv_u6 = getelementptr inbounds %struct.io, %struct.io* %11, i32 0, i32 3
  %svu_fp = bitcast %union.anon.1* %sv_u6 to %struct._PerlIO***
  store %struct._PerlIO** %call5, %struct._PerlIO*** %svu_fp, align 8
  %call7 = call %struct.gv* @Perl_gv_fetchpvn_flags(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.108, i64 0, i64 0), i64 5, i32 129, i32 3)
  store %struct.gv* %call7, %struct.gv** %tmpgv, align 8
  %12 = load %struct.gv*, %struct.gv** %tmpgv, align 8
  %sv_any8 = getelementptr inbounds %struct.gv, %struct.gv* %12, i32 0, i32 0
  %13 = load %struct.xpvgv*, %struct.xpvgv** %sv_any8, align 8
  %xpv_cur9 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %13, i32 0, i32 2
  %14 = load i64, i64* %xpv_cur9, align 8
  %or10 = or i64 %14, 2
  store i64 %or10, i64* %xpv_cur9, align 8
  %15 = load %struct.io*, %struct.io** %io, align 8
  %16 = bitcast %struct.io* %15 to i8*
  %17 = bitcast i8* %16 to %struct.sv*
  %call11 = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %17)
  %18 = bitcast %struct.sv* %call11 to i8*
  %19 = bitcast i8* %18 to %struct.io*
  %20 = load %struct.gv*, %struct.gv** %tmpgv, align 8
  %sv_u12 = getelementptr inbounds %struct.gv, %struct.gv* %20, i32 0, i32 3
  %svu_gp13 = bitcast %union.anon.4* %sv_u12 to %struct.gp**
  %21 = load %struct.gp*, %struct.gp** %svu_gp13, align 8
  %add.ptr14 = getelementptr inbounds %struct.gp, %struct.gp* %21, i64 0
  %gp_io15 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr14, i32 0, i32 1
  store %struct.io* %19, %struct.io** %gp_io15, align 8
  %call16 = call %struct.gv* @Perl_gv_fetchpvn_flags(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.109, i64 0, i64 0), i64 6, i32 129, i32 15)
  store %struct.gv* %call16, %struct.gv** %tmpgv, align 8
  %22 = load %struct.gv*, %struct.gv** %tmpgv, align 8
  %sv_any17 = getelementptr inbounds %struct.gv, %struct.gv* %22, i32 0, i32 0
  %23 = load %struct.xpvgv*, %struct.xpvgv** %sv_any17, align 8
  %xpv_cur18 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %23, i32 0, i32 2
  %24 = load i64, i64* %xpv_cur18, align 8
  %or19 = or i64 %24, 2
  store i64 %or19, i64* %xpv_cur18, align 8
  %25 = load %struct.gv*, %struct.gv** %tmpgv, align 8
  %sv_u20 = getelementptr inbounds %struct.gv, %struct.gv* %25, i32 0, i32 3
  %svu_gp21 = bitcast %union.anon.4* %sv_u20 to %struct.gp**
  %26 = load %struct.gp*, %struct.gp** %svu_gp21, align 8
  %add.ptr22 = getelementptr inbounds %struct.gp, %struct.gp* %26, i64 0
  %gp_io23 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr22, i32 0, i32 1
  %27 = load %struct.io*, %struct.io** %gp_io23, align 8
  store %struct.io* %27, %struct.io** %io, align 8
  %28 = load %struct.io*, %struct.io** %io, align 8
  %sv_any24 = getelementptr inbounds %struct.io, %struct.io* %28, i32 0, i32 0
  %29 = load %struct.xpvio*, %struct.xpvio** %sv_any24, align 8
  %xio_type25 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %29, i32 0, i32 16
  store i8 62, i8* %xio_type25, align 8
  %call26 = call %struct._PerlIO** @Perl_PerlIO_stdout()
  %30 = load %struct.io*, %struct.io** %io, align 8
  %sv_u27 = getelementptr inbounds %struct.io, %struct.io* %30, i32 0, i32 3
  %svu_fp28 = bitcast %union.anon.1* %sv_u27 to %struct._PerlIO***
  store %struct._PerlIO** %call26, %struct._PerlIO*** %svu_fp28, align 8
  %31 = load %struct.io*, %struct.io** %io, align 8
  %sv_any29 = getelementptr inbounds %struct.io, %struct.io* %31, i32 0, i32 0
  %32 = load %struct.xpvio*, %struct.xpvio** %sv_any29, align 8
  %xio_ofp = getelementptr inbounds %struct.xpvio, %struct.xpvio* %32, i32 0, i32 5
  store %struct._PerlIO** %call26, %struct._PerlIO*** %xio_ofp, align 8
  %33 = load %struct.gv*, %struct.gv** %tmpgv, align 8
  call void @Perl_setdefout(%struct.gv* %33)
  %call30 = call %struct.gv* @Perl_gv_fetchpvn_flags(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.110, i64 0, i64 0), i64 6, i32 129, i32 3)
  store %struct.gv* %call30, %struct.gv** %tmpgv, align 8
  %34 = load %struct.gv*, %struct.gv** %tmpgv, align 8
  %sv_any31 = getelementptr inbounds %struct.gv, %struct.gv* %34, i32 0, i32 0
  %35 = load %struct.xpvgv*, %struct.xpvgv** %sv_any31, align 8
  %xpv_cur32 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %35, i32 0, i32 2
  %36 = load i64, i64* %xpv_cur32, align 8
  %or33 = or i64 %36, 2
  store i64 %or33, i64* %xpv_cur32, align 8
  %37 = load %struct.io*, %struct.io** %io, align 8
  %38 = bitcast %struct.io* %37 to i8*
  %39 = bitcast i8* %38 to %struct.sv*
  %call34 = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %39)
  %40 = bitcast %struct.sv* %call34 to i8*
  %41 = bitcast i8* %40 to %struct.io*
  %42 = load %struct.gv*, %struct.gv** %tmpgv, align 8
  %sv_u35 = getelementptr inbounds %struct.gv, %struct.gv* %42, i32 0, i32 3
  %svu_gp36 = bitcast %union.anon.4* %sv_u35 to %struct.gp**
  %43 = load %struct.gp*, %struct.gp** %svu_gp36, align 8
  %add.ptr37 = getelementptr inbounds %struct.gp, %struct.gp* %43, i64 0
  %gp_io38 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr37, i32 0, i32 1
  store %struct.io* %41, %struct.io** %gp_io38, align 8
  %call39 = call %struct.gv* @Perl_gv_fetchpvn_flags(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.111, i64 0, i64 0), i64 6, i32 129, i32 15)
  store %struct.gv* %call39, %struct.gv** @PL_stderrgv, align 8
  %44 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %sv_any40 = getelementptr inbounds %struct.gv, %struct.gv* %44, i32 0, i32 0
  %45 = load %struct.xpvgv*, %struct.xpvgv** %sv_any40, align 8
  %xpv_cur41 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %45, i32 0, i32 2
  %46 = load i64, i64* %xpv_cur41, align 8
  %or42 = or i64 %46, 2
  store i64 %or42, i64* %xpv_cur41, align 8
  %47 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %sv_u43 = getelementptr inbounds %struct.gv, %struct.gv* %47, i32 0, i32 3
  %svu_gp44 = bitcast %union.anon.4* %sv_u43 to %struct.gp**
  %48 = load %struct.gp*, %struct.gp** %svu_gp44, align 8
  %add.ptr45 = getelementptr inbounds %struct.gp, %struct.gp* %48, i64 0
  %gp_io46 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr45, i32 0, i32 1
  %49 = load %struct.io*, %struct.io** %gp_io46, align 8
  store %struct.io* %49, %struct.io** %io, align 8
  %50 = load %struct.io*, %struct.io** %io, align 8
  %sv_any47 = getelementptr inbounds %struct.io, %struct.io* %50, i32 0, i32 0
  %51 = load %struct.xpvio*, %struct.xpvio** %sv_any47, align 8
  %xio_type48 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %51, i32 0, i32 16
  store i8 62, i8* %xio_type48, align 8
  %call49 = call %struct._PerlIO** @Perl_PerlIO_stderr()
  %52 = load %struct.io*, %struct.io** %io, align 8
  %sv_u50 = getelementptr inbounds %struct.io, %struct.io* %52, i32 0, i32 3
  %svu_fp51 = bitcast %union.anon.1* %sv_u50 to %struct._PerlIO***
  store %struct._PerlIO** %call49, %struct._PerlIO*** %svu_fp51, align 8
  %53 = load %struct.io*, %struct.io** %io, align 8
  %sv_any52 = getelementptr inbounds %struct.io, %struct.io* %53, i32 0, i32 0
  %54 = load %struct.xpvio*, %struct.xpvio** %sv_any52, align 8
  %xio_ofp53 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %54, i32 0, i32 5
  store %struct._PerlIO** %call49, %struct._PerlIO*** %xio_ofp53, align 8
  %call54 = call %struct.gv* @Perl_gv_fetchpvn_flags(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.112, i64 0, i64 0), i64 6, i32 129, i32 3)
  store %struct.gv* %call54, %struct.gv** %tmpgv, align 8
  %55 = load %struct.gv*, %struct.gv** %tmpgv, align 8
  %sv_any55 = getelementptr inbounds %struct.gv, %struct.gv* %55, i32 0, i32 0
  %56 = load %struct.xpvgv*, %struct.xpvgv** %sv_any55, align 8
  %xpv_cur56 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %56, i32 0, i32 2
  %57 = load i64, i64* %xpv_cur56, align 8
  %or57 = or i64 %57, 2
  store i64 %or57, i64* %xpv_cur56, align 8
  %58 = load %struct.io*, %struct.io** %io, align 8
  %59 = bitcast %struct.io* %58 to i8*
  %60 = bitcast i8* %59 to %struct.sv*
  %call58 = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %60)
  %61 = bitcast %struct.sv* %call58 to i8*
  %62 = bitcast i8* %61 to %struct.io*
  %63 = load %struct.gv*, %struct.gv** %tmpgv, align 8
  %sv_u59 = getelementptr inbounds %struct.gv, %struct.gv* %63, i32 0, i32 3
  %svu_gp60 = bitcast %union.anon.4* %sv_u59 to %struct.gp**
  %64 = load %struct.gp*, %struct.gp** %svu_gp60, align 8
  %add.ptr61 = getelementptr inbounds %struct.gp, %struct.gp* %64, i64 0
  %gp_io62 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr61, i32 0, i32 1
  store %struct.io* %62, %struct.io** %gp_io62, align 8
  %call63 = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), i64 0)
  store %struct.sv* %call63, %struct.sv** @PL_statname, align 8
  ret void
}

declare dso_local i32 @PerlIO_binmode(%struct._PerlIO**, i32, i32, i8*) #2

declare dso_local void @Perl_lex_start(%struct.sv*, %struct._PerlIO**, i32) #2

declare dso_local %struct.sv* @Perl_filter_add(i32 (i32, %struct.sv*, i32)*, %struct.sv*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @read_e_script(i32 %idx, %struct.sv* %buf_sv, i32 %maxlen) #0 {
entry:
  %retval = alloca i32, align 4
  %idx.addr = alloca i32, align 4
  %buf_sv.addr = alloca %struct.sv*, align 8
  %maxlen.addr = alloca i32, align 4
  %p = alloca i8*, align 8
  %nl = alloca i8*, align 8
  store i32 %idx, i32* %idx.addr, align 4
  store %struct.sv* %buf_sv, %struct.sv** %buf_sv.addr, align 8
  store i32 %maxlen, i32* %maxlen.addr, align 4
  %0 = load %struct.sv*, %struct.sv** @PL_e_script, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %1 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 0
  store i8* %add.ptr, i8** %p, align 8
  %2 = load i8*, i8** %p, align 8
  %call = call i8* @strchr(i8* %2, i32 10) #11
  store i8* %call, i8** %nl, align 8
  %3 = load i32, i32* %idx.addr, align 4
  %4 = load i32, i32* %maxlen.addr, align 4
  %5 = load i8*, i8** %nl, align 8
  %tobool = icmp ne i8* %5, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %6 = load i8*, i8** %nl, align 8
  %add.ptr1 = getelementptr inbounds i8, i8* %6, i64 1
  br label %cond.end

cond.false:                                       ; preds = %entry
  %7 = load %struct.sv*, %struct.sv** @PL_e_script, align 8
  %sv_u2 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 3
  %svu_pv3 = bitcast %union.anon* %sv_u2 to i8**
  %8 = load i8*, i8** %svu_pv3, align 8
  %9 = load %struct.sv*, %struct.sv** @PL_e_script, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 0
  %10 = load i8*, i8** %sv_any, align 8
  %11 = bitcast i8* %10 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %11, i32 0, i32 2
  %12 = load i64, i64* %xpv_cur, align 8
  %add.ptr4 = getelementptr inbounds i8, i8* %8, i64 %12
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %add.ptr1, %cond.true ], [ %add.ptr4, %cond.false ]
  store i8* %cond, i8** %nl, align 8
  %13 = load i8*, i8** %nl, align 8
  %14 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %13 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %14 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp = icmp eq i64 %sub.ptr.sub, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  call void @Perl_filter_del(i32 (i32, %struct.sv*, i32)* @read_e_script)
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %cond.end
  %15 = load %struct.sv*, %struct.sv** %buf_sv.addr, align 8
  %16 = load i8*, i8** %p, align 8
  %17 = load i8*, i8** %nl, align 8
  %18 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast5 = ptrtoint i8* %17 to i64
  %sub.ptr.rhs.cast6 = ptrtoint i8* %18 to i64
  %sub.ptr.sub7 = sub i64 %sub.ptr.lhs.cast5, %sub.ptr.rhs.cast6
  call void @Perl_sv_catpvn_flags(%struct.sv* %15, i8* %16, i64 %sub.ptr.sub7, i32 2)
  %19 = load %struct.sv*, %struct.sv** @PL_e_script, align 8
  %20 = load i8*, i8** %nl, align 8
  call void @Perl_sv_chop(%struct.sv* %19, i8* %20)
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %21 = load i32, i32* %retval, align 4
  ret i32 %21
}

declare dso_local i32 @Perl_yyparse(i32) #2

declare dso_local void @Perl_save_sptr(%struct.sv**) #2

declare dso_local void @Perl_save_I32(i32*) #2

declare dso_local void @Perl_gv_check(%struct.hv*) #2

declare dso_local void @Perl_hv_name_set(%struct.hv*, i8*, i32, i32) #2

declare dso_local i8* @Perl_form(i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define internal void @S_incpush_use_sep(i8* %p, i64 %len, i32 %flags) #0 {
entry:
  %p.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  %s = alloca i8*, align 8
  %end = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i64, i64* %len.addr, align 8
  %tobool = icmp ne i64 %0, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %p.addr, align 8
  %call = call i64 @strlen(i8* %1) #11
  store i64 %call, i64* %len.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i8*, i8** %p.addr, align 8
  %3 = load i64, i64* %len.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 %3
  store i8* %add.ptr, i8** %end, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end7, %if.end
  %4 = load i8*, i8** %p.addr, align 8
  %5 = load i8*, i8** %end, align 8
  %6 = load i8*, i8** %p.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %5 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %6 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %call1 = call i8* @memchr(i8* %4, i32 58, i64 %sub.ptr.sub) #11
  store i8* %call1, i8** %s, align 8
  %tobool2 = icmp ne i8* %call1, null
  br i1 %tobool2, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %7 = load i8*, i8** %s, align 8
  %8 = load i8*, i8** %p.addr, align 8
  %cmp = icmp eq i8* %7, %8
  br i1 %cmp, label %if.then3, label %if.else

if.then3:                                         ; preds = %while.body
  br label %if.end7

if.else:                                          ; preds = %while.body
  %9 = load i8*, i8** %p.addr, align 8
  %10 = load i8*, i8** %s, align 8
  %11 = load i8*, i8** %p.addr, align 8
  %sub.ptr.lhs.cast4 = ptrtoint i8* %10 to i64
  %sub.ptr.rhs.cast5 = ptrtoint i8* %11 to i64
  %sub.ptr.sub6 = sub i64 %sub.ptr.lhs.cast4, %sub.ptr.rhs.cast5
  %12 = load i32, i32* %flags.addr, align 4
  call void @S_incpush(i8* %9, i64 %sub.ptr.sub6, i32 %12)
  br label %if.end7

if.end7:                                          ; preds = %if.else, %if.then3
  %13 = load i8*, i8** %s, align 8
  %add.ptr8 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %add.ptr8, i8** %p.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %14 = load i8*, i8** %p.addr, align 8
  %15 = load i8*, i8** %end, align 8
  %cmp9 = icmp ne i8* %14, %15
  br i1 %cmp9, label %if.then10, label %if.end14

if.then10:                                        ; preds = %while.end
  %16 = load i8*, i8** %p.addr, align 8
  %17 = load i8*, i8** %end, align 8
  %18 = load i8*, i8** %p.addr, align 8
  %sub.ptr.lhs.cast11 = ptrtoint i8* %17 to i64
  %sub.ptr.rhs.cast12 = ptrtoint i8* %18 to i64
  %sub.ptr.sub13 = sub i64 %sub.ptr.lhs.cast11, %sub.ptr.rhs.cast12
  %19 = load i32, i32* %flags.addr, align 4
  call void @S_incpush(i8* %16, i64 %sub.ptr.sub13, i32 %19)
  br label %if.end14

if.end14:                                         ; preds = %if.then10, %while.end
  ret void
}

; Function Attrs: nounwind readonly
declare dso_local i8* @memchr(i8*, i32, i64) #5

declare dso_local i8* @Perl_find_script(i8*, i1 zeroext, i8**, i32) #2

; Function Attrs: nounwind readonly
declare dso_local i32 @strncmp(i8*, i8*, i64) #5

declare dso_local zeroext i1 @Perl_grok_atoUV(i8*, i64*, i8**) #2

declare dso_local %struct.gv* @Perl_gv_fetchfile(i8*) #2

declare dso_local %struct._PerlIO** @PerlIO_fdopen(i32, i8*) #2

declare dso_local %struct._PerlIO** @PerlIO_open(i8*, i8*) #2

; Function Attrs: nounwind
declare dso_local i8* @strerror(i32) #1

declare dso_local i32 @Perl_PerlIO_fileno(%struct._PerlIO**) #2

declare dso_local i32 @fcntl64(i32, i32, ...) #2

; Function Attrs: nounwind
declare dso_local i32 @fstat64(i32, %struct.stat*) #1

declare dso_local i8* @Perl_sv_gets(%struct.sv*, %struct._PerlIO**, i32) #2

declare dso_local i8* @Perl_instr(i8*, i8*) #2

declare dso_local i32 @PerlIO_ungetc(%struct._PerlIO**, i32) #2

declare dso_local %struct._PerlIO** @Perl_PerlIO_stdout() #2

declare dso_local void @Perl_setdefout(%struct.gv*) #2

declare dso_local void @Perl_filter_del(i32 (i32, %struct.sv*, i32)*) #2

declare dso_local void @Perl_sv_chop(%struct.sv*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32* @S_CvDEPTHp(%struct.cv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.cv*, align 8
  store %struct.cv* %sv, %struct.cv** %sv.addr, align 8
  %0 = load %struct.cv*, %struct.cv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.cv, %struct.cv* %0, i32 0, i32 0
  %1 = load %struct.xpvcv*, %struct.xpvcv** %sv_any, align 8
  %xcv_depth = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %1, i32 0, i32 13
  ret i32* %xcv_depth
}

declare dso_local i32 @PerlIO_puts(%struct._PerlIO**, i8*) #2

declare dso_local void @Perl_peep(%struct.op*) #2

declare dso_local void @Perl_rpeep(%struct.op*) #2

declare dso_local i32 @Perl_runops_standard() #2

declare dso_local void @Perl_sv_nosharing(%struct.sv*) #2

declare dso_local void @Perl_sv_nounlocking(%struct.sv*) #2

declare dso_local zeroext i1 @Perl_sv_destroyable(%struct.sv*) #2

declare dso_local void @Perl_despatch_signals() #2

declare dso_local void @Perl_sv_magic(%struct.sv*, %struct.sv*, i32, i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.sv* @S_mayberelocate(i8* %dir, i64 %len, i32 %flags) #0 {
entry:
  %dir.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  %canrelocate = alloca i8, align 1
  %libdir = alloca %struct.sv*, align 8
  store i8* %dir, i8** %dir.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i32, i32* %flags.addr, align 4
  %conv = trunc i32 %0 to i8
  %conv1 = zext i8 %conv to i32
  %and = and i32 %conv1, 32
  %conv2 = trunc i32 %and to i8
  store i8 %conv2, i8* %canrelocate, align 1
  %1 = load i8*, i8** %dir.addr, align 8
  %2 = load i64, i64* %len.addr, align 8
  %call = call %struct.sv* @Perl_newSVpvn(i8* %1, i64 %2)
  store %struct.sv* %call, %struct.sv** %libdir, align 8
  %3 = load i8, i8* %canrelocate, align 1
  %tobool = icmp ne i8 %3, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.sv*, %struct.sv** %libdir, align 8
  ret %struct.sv* %4
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.sv* @S_incpush_if_exists(%struct.av* %av, %struct.sv* %dir, %struct.sv* %stem) #0 {
entry:
  %av.addr = alloca %struct.av*, align 8
  %dir.addr = alloca %struct.sv*, align 8
  %stem.addr = alloca %struct.sv*, align 8
  %tmpstatbuf = alloca %struct.stat, align 8
  store %struct.av* %av, %struct.av** %av.addr, align 8
  store %struct.sv* %dir, %struct.sv** %dir.addr, align 8
  store %struct.sv* %stem, %struct.sv** %stem.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %dir.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %1 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 0
  %call = call i32 @stat64(i8* %add.ptr, %struct.stat* %tmpstatbuf) #6
  %cmp = icmp sge i32 %call, 0
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %st_mode = getelementptr inbounds %struct.stat, %struct.stat* %tmpstatbuf, i32 0, i32 3
  %2 = load i32, i32* %st_mode, align 8
  %and = and i32 %2, 61440
  %cmp1 = icmp eq i32 %and, 16384
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct.av*, %struct.av** %av.addr, align 8
  %4 = load %struct.sv*, %struct.sv** %dir.addr, align 8
  call void @Perl_av_push(%struct.av* %3, %struct.sv* %4)
  %5 = load %struct.sv*, %struct.sv** %stem.addr, align 8
  %call2 = call %struct.sv* @Perl_newSVsv(%struct.sv* %5)
  store %struct.sv* %call2, %struct.sv** %dir.addr, align 8
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %entry
  br label %do.body

do.body:                                          ; preds = %if.else
  %6 = load %struct.sv*, %struct.sv** %stem.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 0
  %7 = load i8*, i8** %sv_any, align 8
  %8 = bitcast i8* %7 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %8, i32 0, i32 2
  %9 = load i64, i64* %xpv_cur, align 8
  %10 = load %struct.sv*, %struct.sv** %dir.addr, align 8
  %sv_any3 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 0
  %11 = load i8*, i8** %sv_any3, align 8
  %12 = bitcast i8* %11 to %struct.xpv*
  %xpv_cur4 = getelementptr inbounds %struct.xpv, %struct.xpv* %12, i32 0, i32 2
  store i64 %9, i64* %xpv_cur4, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %if.end

if.end:                                           ; preds = %do.end, %if.then
  %13 = load %struct.sv*, %struct.sv** %dir.addr, align 8
  ret %struct.sv* %13
}

declare dso_local void @Perl_av_unshift(%struct.av*, i64) #2

declare dso_local %struct.sv** @Perl_av_store(%struct.av*, i64, %struct.sv*) #2

declare dso_local %struct.sv** @Perl_av_fetch(%struct.av*, i64, i32) #2

; Function Attrs: nounwind
declare dso_local i32 @stat64(i8*, %struct.stat*) #1

declare dso_local void @Perl_leave_scope(i32) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind returns_twice "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind returns_twice }
attributes #10 = { noreturn nounwind }
attributes #11 = { nounwind readonly }
attributes #12 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
