; ModuleID = 'real.c'
source_filename = "real.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.real_format = type { void (%struct.real_format*, i64*, %struct.real_value*)*, void (%struct.real_format*, %struct.real_value*, i64*)*, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.real_value = type { i32, [3 x i64] }

@.str = private unnamed_addr constant [7 x i8] c"real.c\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@real_format_for_mode = external dso_local global [7 x %struct.real_format*], align 16
@mode_class = external dso_local constant [87 x i8], align 16
@mode_inner = external dso_local constant [87 x i8], align 16
@.str.2 = private unnamed_addr constant [5 x i8] c"-0.0\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"0.0\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"-Inf\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"+Inf\00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"%c%cNaN\00", align 1
@.str.7 = private unnamed_addr constant [5 x i8] c"e%+d\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"N/A\00", align 1
@.str.9 = private unnamed_addr constant [5 x i8] c"p%+d\00", align 1
@.str.10 = private unnamed_addr constant [17 x i8] c"0123456789abcdef\00", align 1
@.str.11 = private unnamed_addr constant [5 x i8] c"QNaN\00", align 1
@.str.12 = private unnamed_addr constant [5 x i8] c"SNaN\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"Inf\00", align 1
@_hex_value = external dso_local constant [256 x i8], align 16
@_sch_istable = external dso_local constant [256 x i16], align 16
@dconst_e_ptr.value = internal global %struct.real_value zeroinitializer, align 8, !dbg !0
@dconst_third_ptr.value = internal global %struct.real_value zeroinitializer, align 8, !dbg !403
@dconst1 = external dso_local global %struct.real_value, align 8
@dconst_sqrt2_ptr.value = internal global %struct.real_value zeroinitializer, align 8, !dbg !407
@ieee_single_format = dso_local constant %struct.real_format { void (%struct.real_format*, i64*, %struct.real_value*)* @encode_ieee_single, void (%struct.real_format*, %struct.real_value*, i64*)* @decode_ieee_single, i32 2, i32 24, i32 24, i32 -125, i32 128, i32 31, i32 31, i8 0, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 0 }, align 8, !dbg !410
@mips_single_format = dso_local constant %struct.real_format { void (%struct.real_format*, i64*, %struct.real_value*)* @encode_ieee_single, void (%struct.real_format*, %struct.real_value*, i64*)* @decode_ieee_single, i32 2, i32 24, i32 24, i32 -125, i32 128, i32 31, i32 31, i8 0, i8 1, i8 1, i8 1, i8 1, i8 1, i8 0, i8 1 }, align 8, !dbg !444
@motorola_single_format = dso_local constant %struct.real_format { void (%struct.real_format*, i64*, %struct.real_value*)* @encode_ieee_single, void (%struct.real_format*, %struct.real_value*, i64*)* @decode_ieee_single, i32 2, i32 24, i32 24, i32 -125, i32 128, i32 31, i32 31, i8 0, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1 }, align 8, !dbg !446
@spu_single_format = dso_local constant %struct.real_format { void (%struct.real_format*, i64*, %struct.real_value*)* @encode_ieee_single, void (%struct.real_format*, %struct.real_value*, i64*)* @decode_ieee_single, i32 2, i32 24, i32 24, i32 -125, i32 129, i32 31, i32 31, i8 1, i8 0, i8 0, i8 0, i8 1, i8 1, i8 0, i8 0 }, align 8, !dbg !448
@ieee_double_format = dso_local constant %struct.real_format { void (%struct.real_format*, i64*, %struct.real_value*)* @encode_ieee_double, void (%struct.real_format*, %struct.real_value*, i64*)* @decode_ieee_double, i32 2, i32 53, i32 53, i32 -1021, i32 1024, i32 63, i32 63, i8 0, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 0 }, align 8, !dbg !450
@mips_double_format = dso_local constant %struct.real_format { void (%struct.real_format*, i64*, %struct.real_value*)* @encode_ieee_double, void (%struct.real_format*, %struct.real_value*, i64*)* @decode_ieee_double, i32 2, i32 53, i32 53, i32 -1021, i32 1024, i32 63, i32 63, i8 0, i8 1, i8 1, i8 1, i8 1, i8 1, i8 0, i8 1 }, align 8, !dbg !452
@motorola_double_format = dso_local constant %struct.real_format { void (%struct.real_format*, i64*, %struct.real_value*)* @encode_ieee_double, void (%struct.real_format*, %struct.real_value*, i64*)* @decode_ieee_double, i32 2, i32 53, i32 53, i32 -1021, i32 1024, i32 63, i32 63, i8 0, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1 }, align 8, !dbg !454
@ieee_extended_motorola_format = dso_local constant %struct.real_format { void (%struct.real_format*, i64*, %struct.real_value*)* @encode_ieee_extended_motorola, void (%struct.real_format*, %struct.real_value*, i64*)* @decode_ieee_extended_motorola, i32 2, i32 64, i32 64, i32 -16382, i32 16384, i32 95, i32 95, i8 0, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1 }, align 8, !dbg !456
@ieee_extended_intel_96_format = dso_local constant %struct.real_format { void (%struct.real_format*, i64*, %struct.real_value*)* @encode_ieee_extended_intel_96, void (%struct.real_format*, %struct.real_value*, i64*)* @decode_ieee_extended_intel_96, i32 2, i32 64, i32 64, i32 -16381, i32 16384, i32 79, i32 79, i8 0, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 0 }, align 8, !dbg !458
@ieee_extended_intel_128_format = dso_local constant %struct.real_format { void (%struct.real_format*, i64*, %struct.real_value*)* @encode_ieee_extended_intel_128, void (%struct.real_format*, %struct.real_value*, i64*)* @decode_ieee_extended_intel_128, i32 2, i32 64, i32 64, i32 -16381, i32 16384, i32 79, i32 79, i8 0, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 0 }, align 8, !dbg !460
@ieee_extended_intel_96_round_53_format = dso_local constant %struct.real_format { void (%struct.real_format*, i64*, %struct.real_value*)* @encode_ieee_extended_intel_96, void (%struct.real_format*, %struct.real_value*, i64*)* @decode_ieee_extended_intel_96, i32 2, i32 53, i32 53, i32 -16381, i32 16384, i32 79, i32 79, i8 0, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 0 }, align 8, !dbg !462
@ibm_extended_format = dso_local constant %struct.real_format { void (%struct.real_format*, i64*, %struct.real_value*)* @encode_ibm_extended, void (%struct.real_format*, %struct.real_value*, i64*)* @decode_ibm_extended, i32 2, i32 106, i32 53, i32 -968, i32 1024, i32 127, i32 -1, i8 0, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 0 }, align 8, !dbg !464
@mips_extended_format = dso_local constant %struct.real_format { void (%struct.real_format*, i64*, %struct.real_value*)* @encode_ibm_extended, void (%struct.real_format*, %struct.real_value*, i64*)* @decode_ibm_extended, i32 2, i32 106, i32 53, i32 -968, i32 1024, i32 127, i32 -1, i8 0, i8 1, i8 1, i8 1, i8 1, i8 1, i8 0, i8 1 }, align 8, !dbg !466
@ieee_quad_format = dso_local constant %struct.real_format { void (%struct.real_format*, i64*, %struct.real_value*)* @encode_ieee_quad, void (%struct.real_format*, %struct.real_value*, i64*)* @decode_ieee_quad, i32 2, i32 113, i32 113, i32 -16381, i32 16384, i32 127, i32 127, i8 0, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 0 }, align 8, !dbg !468
@mips_quad_format = dso_local constant %struct.real_format { void (%struct.real_format*, i64*, %struct.real_value*)* @encode_ieee_quad, void (%struct.real_format*, %struct.real_value*, i64*)* @decode_ieee_quad, i32 2, i32 113, i32 113, i32 -16381, i32 16384, i32 127, i32 127, i8 0, i8 1, i8 1, i8 1, i8 1, i8 1, i8 0, i8 1 }, align 8, !dbg !470
@vax_f_format = dso_local constant %struct.real_format { void (%struct.real_format*, i64*, %struct.real_value*)* @encode_vax_f, void (%struct.real_format*, %struct.real_value*, i64*)* @decode_vax_f, i32 2, i32 24, i32 24, i32 -127, i32 127, i32 15, i32 15, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0 }, align 8, !dbg !472
@vax_d_format = dso_local constant %struct.real_format { void (%struct.real_format*, i64*, %struct.real_value*)* @encode_vax_d, void (%struct.real_format*, %struct.real_value*, i64*)* @decode_vax_d, i32 2, i32 56, i32 56, i32 -127, i32 127, i32 15, i32 15, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0 }, align 8, !dbg !474
@vax_g_format = dso_local constant %struct.real_format { void (%struct.real_format*, i64*, %struct.real_value*)* @encode_vax_g, void (%struct.real_format*, %struct.real_value*, i64*)* @decode_vax_g, i32 2, i32 53, i32 53, i32 -1023, i32 1023, i32 15, i32 15, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0 }, align 8, !dbg !476
@decimal_single_format = dso_local constant %struct.real_format { void (%struct.real_format*, i64*, %struct.real_value*)* @encode_decimal_single, void (%struct.real_format*, %struct.real_value*, i64*)* @decode_decimal_single, i32 10, i32 7, i32 7, i32 -94, i32 97, i32 31, i32 31, i8 0, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 0 }, align 8, !dbg !478
@decimal_double_format = dso_local constant %struct.real_format { void (%struct.real_format*, i64*, %struct.real_value*)* @encode_decimal_double, void (%struct.real_format*, %struct.real_value*, i64*)* @decode_decimal_double, i32 10, i32 16, i32 16, i32 -382, i32 385, i32 63, i32 63, i8 0, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 0 }, align 8, !dbg !480
@decimal_quad_format = dso_local constant %struct.real_format { void (%struct.real_format*, i64*, %struct.real_value*)* @encode_decimal_quad, void (%struct.real_format*, %struct.real_value*, i64*)* @decode_decimal_quad, i32 10, i32 34, i32 34, i32 -6142, i32 6145, i32 127, i32 127, i8 0, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 0 }, align 8, !dbg !482
@ieee_half_format = dso_local constant %struct.real_format { void (%struct.real_format*, i64*, %struct.real_value*)* @encode_ieee_half, void (%struct.real_format*, %struct.real_value*, i64*)* @decode_ieee_half, i32 2, i32 11, i32 11, i32 -13, i32 16, i32 15, i32 15, i8 0, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 0 }, align 8, !dbg !484
@arm_half_format = dso_local constant %struct.real_format { void (%struct.real_format*, i64*, %struct.real_value*)* @encode_ieee_half, void (%struct.real_format*, %struct.real_value*, i64*)* @decode_ieee_half, i32 2, i32 11, i32 11, i32 -13, i32 17, i32 15, i32 15, i8 0, i8 1, i8 0, i8 0, i8 1, i8 1, i8 0, i8 0 }, align 8, !dbg !486
@real_internal_format = dso_local constant %struct.real_format { void (%struct.real_format*, i64*, %struct.real_value*)* @encode_internal, void (%struct.real_format*, %struct.real_value*, i64*)* @decode_internal, i32 2, i32 190, i32 190, i32 -33554431, i32 33554431, i32 -1, i32 -1, i8 0, i8 0, i8 1, i8 1, i8 0, i8 1, i8 1, i8 0 }, align 8, !dbg !488
@real_sqrt.halfthree = internal global %struct.real_value zeroinitializer, align 8, !dbg !490
@real_sqrt.init = internal global i8 0, align 1, !dbg !495
@dconsthalf = external dso_local global %struct.real_value, align 8
@dconstm1 = external dso_local global %struct.real_value, align 8
@.str.14 = private unnamed_addr constant [5 x i8] c"0x0.\00", align 1
@.str.15 = private unnamed_addr constant [5 x i8] c"08ce\00", align 1
@.str.16 = private unnamed_addr constant [4 x i8] c"p%d\00", align 1
@.str.17 = private unnamed_addr constant [5 x i8] c"7bde\00", align 1
@.str.18 = private unnamed_addr constant [3 x i8] c"0.\00", align 1
@ten_to_ptwo.tens = internal global [26 x %struct.real_value] zeroinitializer, align 16, !dbg !497
@ten_to_mptwo.tens = internal global [26 x %struct.real_value] zeroinitializer, align 16, !dbg !505
@real_digit.num = internal global [10 x %struct.real_value] zeroinitializer, align 16, !dbg !508

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @real_arithmetic(%struct.real_value* %r, i32 %icode, %struct.real_value* %op0, %struct.real_value* %op1) #0 !dbg !518 {
entry:
  %retval = alloca i8, align 1
  %r.addr = alloca %struct.real_value*, align 8
  %icode.addr = alloca i32, align 4
  %op0.addr = alloca %struct.real_value*, align 8
  %op1.addr = alloca %struct.real_value*, align 8
  %code = alloca i32, align 4
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !521, metadata !DIExpression()), !dbg !522
  store i32 %icode, i32* %icode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %icode.addr, metadata !523, metadata !DIExpression()), !dbg !524
  store %struct.real_value* %op0, %struct.real_value** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %op0.addr, metadata !525, metadata !DIExpression()), !dbg !526
  store %struct.real_value* %op1, %struct.real_value** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %op1.addr, metadata !527, metadata !DIExpression()), !dbg !528
  call void @llvm.dbg.declare(metadata i32* %code, metadata !529, metadata !DIExpression()), !dbg !530
  %0 = load i32, i32* %icode.addr, align 4, !dbg !531
  store i32 %0, i32* %code, align 4, !dbg !530
  %1 = load %struct.real_value*, %struct.real_value** %op0.addr, align 8, !dbg !532
  %2 = bitcast %struct.real_value* %1 to i32*, !dbg !534
  %bf.load = load i32, i32* %2, align 8, !dbg !534
  %bf.lshr = lshr i32 %bf.load, 2, !dbg !534
  %bf.clear = and i32 %bf.lshr, 1, !dbg !534
  %tobool = icmp ne i32 %bf.clear, 0, !dbg !532
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !535

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.real_value*, %struct.real_value** %op1.addr, align 8, !dbg !536
  %tobool1 = icmp ne %struct.real_value* %3, null, !dbg !536
  br i1 %tobool1, label %land.lhs.true, label %if.end, !dbg !537

land.lhs.true:                                    ; preds = %lor.lhs.false
  %4 = load %struct.real_value*, %struct.real_value** %op1.addr, align 8, !dbg !538
  %5 = bitcast %struct.real_value* %4 to i32*, !dbg !539
  %bf.load2 = load i32, i32* %5, align 8, !dbg !539
  %bf.lshr3 = lshr i32 %bf.load2, 2, !dbg !539
  %bf.clear4 = and i32 %bf.lshr3, 1, !dbg !539
  %tobool5 = icmp ne i32 %bf.clear4, 0, !dbg !538
  br i1 %tobool5, label %if.then, label %if.end, !dbg !540

if.then:                                          ; preds = %land.lhs.true, %entry
  %6 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !541
  %7 = load i32, i32* %code, align 4, !dbg !542
  %8 = load %struct.real_value*, %struct.real_value** %op0.addr, align 8, !dbg !543
  %9 = load %struct.real_value*, %struct.real_value** %op1.addr, align 8, !dbg !544
  %call = call zeroext i8 @decimal_real_arithmetic(%struct.real_value* %6, i32 %7, %struct.real_value* %8, %struct.real_value* %9), !dbg !545
  store i8 %call, i8* %retval, align 1, !dbg !546
  br label %return, !dbg !546

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  %10 = load i32, i32* %code, align 4, !dbg !547
  switch i32 %10, label %sw.default [
    i32 63, label %sw.bb
    i32 64, label %sw.bb7
    i32 65, label %sw.bb9
    i32 75, label %sw.bb11
    i32 80, label %sw.bb13
    i32 81, label %sw.bb23
    i32 79, label %sw.bb35
    i32 82, label %sw.bb41
    i32 77, label %sw.bb44
  ], !dbg !548

sw.bb:                                            ; preds = %if.end
  %11 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !549
  %12 = load %struct.real_value*, %struct.real_value** %op0.addr, align 8, !dbg !551
  %13 = load %struct.real_value*, %struct.real_value** %op1.addr, align 8, !dbg !552
  %call6 = call zeroext i8 @do_add(%struct.real_value* %11, %struct.real_value* %12, %struct.real_value* %13, i32 0), !dbg !553
  store i8 %call6, i8* %retval, align 1, !dbg !554
  br label %return, !dbg !554

sw.bb7:                                           ; preds = %if.end
  %14 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !555
  %15 = load %struct.real_value*, %struct.real_value** %op0.addr, align 8, !dbg !556
  %16 = load %struct.real_value*, %struct.real_value** %op1.addr, align 8, !dbg !557
  %call8 = call zeroext i8 @do_add(%struct.real_value* %14, %struct.real_value* %15, %struct.real_value* %16, i32 1), !dbg !558
  store i8 %call8, i8* %retval, align 1, !dbg !559
  br label %return, !dbg !559

sw.bb9:                                           ; preds = %if.end
  %17 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !560
  %18 = load %struct.real_value*, %struct.real_value** %op0.addr, align 8, !dbg !561
  %19 = load %struct.real_value*, %struct.real_value** %op1.addr, align 8, !dbg !562
  %call10 = call zeroext i8 @do_multiply(%struct.real_value* %17, %struct.real_value* %18, %struct.real_value* %19), !dbg !563
  store i8 %call10, i8* %retval, align 1, !dbg !564
  br label %return, !dbg !564

sw.bb11:                                          ; preds = %if.end
  %20 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !565
  %21 = load %struct.real_value*, %struct.real_value** %op0.addr, align 8, !dbg !566
  %22 = load %struct.real_value*, %struct.real_value** %op1.addr, align 8, !dbg !567
  %call12 = call zeroext i8 @do_divide(%struct.real_value* %20, %struct.real_value* %21, %struct.real_value* %22), !dbg !568
  store i8 %call12, i8* %retval, align 1, !dbg !569
  br label %return, !dbg !569

sw.bb13:                                          ; preds = %if.end
  %23 = load %struct.real_value*, %struct.real_value** %op1.addr, align 8, !dbg !570
  %24 = bitcast %struct.real_value* %23 to i32*, !dbg !572
  %bf.load14 = load i32, i32* %24, align 8, !dbg !572
  %bf.clear15 = and i32 %bf.load14, 3, !dbg !572
  %cmp = icmp eq i32 %bf.clear15, 3, !dbg !573
  br i1 %cmp, label %if.then16, label %if.else, !dbg !574

if.then16:                                        ; preds = %sw.bb13
  %25 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !575
  %26 = load %struct.real_value*, %struct.real_value** %op1.addr, align 8, !dbg !576
  %27 = bitcast %struct.real_value* %25 to i8*, !dbg !577
  %28 = bitcast %struct.real_value* %26 to i8*, !dbg !577
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %27, i8* align 8 %28, i64 32, i1 false), !dbg !577
  br label %if.end22, !dbg !578

if.else:                                          ; preds = %sw.bb13
  %29 = load %struct.real_value*, %struct.real_value** %op0.addr, align 8, !dbg !579
  %30 = load %struct.real_value*, %struct.real_value** %op1.addr, align 8, !dbg !581
  %call17 = call i32 @do_compare(%struct.real_value* %29, %struct.real_value* %30, i32 -1), !dbg !582
  %cmp18 = icmp slt i32 %call17, 0, !dbg !583
  br i1 %cmp18, label %if.then19, label %if.else20, !dbg !584

if.then19:                                        ; preds = %if.else
  %31 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !585
  %32 = load %struct.real_value*, %struct.real_value** %op0.addr, align 8, !dbg !586
  %33 = bitcast %struct.real_value* %31 to i8*, !dbg !587
  %34 = bitcast %struct.real_value* %32 to i8*, !dbg !587
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %33, i8* align 8 %34, i64 32, i1 false), !dbg !587
  br label %if.end21, !dbg !588

if.else20:                                        ; preds = %if.else
  %35 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !589
  %36 = load %struct.real_value*, %struct.real_value** %op1.addr, align 8, !dbg !590
  %37 = bitcast %struct.real_value* %35 to i8*, !dbg !591
  %38 = bitcast %struct.real_value* %36 to i8*, !dbg !591
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %38, i64 32, i1 false), !dbg !591
  br label %if.end21

if.end21:                                         ; preds = %if.else20, %if.then19
  br label %if.end22

if.end22:                                         ; preds = %if.end21, %if.then16
  br label %sw.epilog, !dbg !592

sw.bb23:                                          ; preds = %if.end
  %39 = load %struct.real_value*, %struct.real_value** %op1.addr, align 8, !dbg !593
  %40 = bitcast %struct.real_value* %39 to i32*, !dbg !595
  %bf.load24 = load i32, i32* %40, align 8, !dbg !595
  %bf.clear25 = and i32 %bf.load24, 3, !dbg !595
  %cmp26 = icmp eq i32 %bf.clear25, 3, !dbg !596
  br i1 %cmp26, label %if.then27, label %if.else28, !dbg !597

if.then27:                                        ; preds = %sw.bb23
  %41 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !598
  %42 = load %struct.real_value*, %struct.real_value** %op1.addr, align 8, !dbg !599
  %43 = bitcast %struct.real_value* %41 to i8*, !dbg !600
  %44 = bitcast %struct.real_value* %42 to i8*, !dbg !600
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %43, i8* align 8 %44, i64 32, i1 false), !dbg !600
  br label %if.end34, !dbg !601

if.else28:                                        ; preds = %sw.bb23
  %45 = load %struct.real_value*, %struct.real_value** %op0.addr, align 8, !dbg !602
  %46 = load %struct.real_value*, %struct.real_value** %op1.addr, align 8, !dbg !604
  %call29 = call i32 @do_compare(%struct.real_value* %45, %struct.real_value* %46, i32 1), !dbg !605
  %cmp30 = icmp slt i32 %call29, 0, !dbg !606
  br i1 %cmp30, label %if.then31, label %if.else32, !dbg !607

if.then31:                                        ; preds = %if.else28
  %47 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !608
  %48 = load %struct.real_value*, %struct.real_value** %op1.addr, align 8, !dbg !609
  %49 = bitcast %struct.real_value* %47 to i8*, !dbg !610
  %50 = bitcast %struct.real_value* %48 to i8*, !dbg !610
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %49, i8* align 8 %50, i64 32, i1 false), !dbg !610
  br label %if.end33, !dbg !611

if.else32:                                        ; preds = %if.else28
  %51 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !612
  %52 = load %struct.real_value*, %struct.real_value** %op0.addr, align 8, !dbg !613
  %53 = bitcast %struct.real_value* %51 to i8*, !dbg !614
  %54 = bitcast %struct.real_value* %52 to i8*, !dbg !614
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %53, i8* align 8 %54, i64 32, i1 false), !dbg !614
  br label %if.end33

if.end33:                                         ; preds = %if.else32, %if.then31
  br label %if.end34

if.end34:                                         ; preds = %if.end33, %if.then27
  br label %sw.epilog, !dbg !615

sw.bb35:                                          ; preds = %if.end
  %55 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !616
  %56 = load %struct.real_value*, %struct.real_value** %op0.addr, align 8, !dbg !617
  %57 = bitcast %struct.real_value* %55 to i8*, !dbg !618
  %58 = bitcast %struct.real_value* %56 to i8*, !dbg !618
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %57, i8* align 8 %58, i64 32, i1 false), !dbg !618
  %59 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !619
  %60 = bitcast %struct.real_value* %59 to i32*, !dbg !620
  %bf.load36 = load i32, i32* %60, align 8, !dbg !621
  %bf.lshr37 = lshr i32 %bf.load36, 3, !dbg !621
  %bf.clear38 = and i32 %bf.lshr37, 1, !dbg !621
  %xor = xor i32 %bf.clear38, 1, !dbg !621
  %bf.load39 = load i32, i32* %60, align 8, !dbg !621
  %bf.value = and i32 %xor, 1, !dbg !621
  %bf.shl = shl i32 %bf.value, 3, !dbg !621
  %bf.clear40 = and i32 %bf.load39, -9, !dbg !621
  %bf.set = or i32 %bf.clear40, %bf.shl, !dbg !621
  store i32 %bf.set, i32* %60, align 8, !dbg !621
  br label %sw.epilog, !dbg !622

sw.bb41:                                          ; preds = %if.end
  %61 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !623
  %62 = load %struct.real_value*, %struct.real_value** %op0.addr, align 8, !dbg !624
  %63 = bitcast %struct.real_value* %61 to i8*, !dbg !625
  %64 = bitcast %struct.real_value* %62 to i8*, !dbg !625
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %63, i8* align 8 %64, i64 32, i1 false), !dbg !625
  %65 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !626
  %66 = bitcast %struct.real_value* %65 to i32*, !dbg !627
  %bf.load42 = load i32, i32* %66, align 8, !dbg !628
  %bf.clear43 = and i32 %bf.load42, -9, !dbg !628
  store i32 %bf.clear43, i32* %66, align 8, !dbg !628
  br label %sw.epilog, !dbg !629

sw.bb44:                                          ; preds = %if.end
  %67 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !630
  %68 = load %struct.real_value*, %struct.real_value** %op0.addr, align 8, !dbg !631
  call void @do_fix_trunc(%struct.real_value* %67, %struct.real_value* %68), !dbg !632
  br label %sw.epilog, !dbg !633

sw.default:                                       ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 1055, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !634
  br label %sw.epilog, !dbg !635

sw.epilog:                                        ; preds = %sw.default, %sw.bb44, %sw.bb41, %sw.bb35, %if.end34, %if.end22
  store i8 0, i8* %retval, align 1, !dbg !636
  br label %return, !dbg !636

return:                                           ; preds = %sw.epilog, %sw.bb11, %sw.bb9, %sw.bb7, %sw.bb, %if.then
  %69 = load i8, i8* %retval, align 1, !dbg !637
  ret i8 %69, !dbg !637
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local zeroext i8 @decimal_real_arithmetic(%struct.real_value*, i32, %struct.real_value*, %struct.real_value*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @do_add(%struct.real_value* %r, %struct.real_value* %a, %struct.real_value* %b, i32 %subtract_p) #0 !dbg !638 {
entry:
  %retval = alloca i8, align 1
  %r.addr = alloca %struct.real_value*, align 8
  %a.addr = alloca %struct.real_value*, align 8
  %b.addr = alloca %struct.real_value*, align 8
  %subtract_p.addr = alloca i32, align 4
  %dexp = alloca i32, align 4
  %sign = alloca i32, align 4
  %exp = alloca i32, align 4
  %t = alloca %struct.real_value, align 8
  %inexact = alloca i8, align 1
  %t26 = alloca %struct.real_value*, align 8
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !641, metadata !DIExpression()), !dbg !642
  store %struct.real_value* %a, %struct.real_value** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %a.addr, metadata !643, metadata !DIExpression()), !dbg !644
  store %struct.real_value* %b, %struct.real_value** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %b.addr, metadata !645, metadata !DIExpression()), !dbg !646
  store i32 %subtract_p, i32* %subtract_p.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %subtract_p.addr, metadata !647, metadata !DIExpression()), !dbg !648
  call void @llvm.dbg.declare(metadata i32* %dexp, metadata !649, metadata !DIExpression()), !dbg !650
  call void @llvm.dbg.declare(metadata i32* %sign, metadata !651, metadata !DIExpression()), !dbg !652
  call void @llvm.dbg.declare(metadata i32* %exp, metadata !653, metadata !DIExpression()), !dbg !654
  call void @llvm.dbg.declare(metadata %struct.real_value* %t, metadata !655, metadata !DIExpression()), !dbg !656
  call void @llvm.dbg.declare(metadata i8* %inexact, metadata !657, metadata !DIExpression()), !dbg !658
  store i8 0, i8* %inexact, align 1, !dbg !658
  %0 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !659
  %1 = bitcast %struct.real_value* %0 to i32*, !dbg !660
  %bf.load = load i32, i32* %1, align 8, !dbg !660
  %bf.lshr = lshr i32 %bf.load, 3, !dbg !660
  %bf.clear = and i32 %bf.lshr, 1, !dbg !660
  store i32 %bf.clear, i32* %sign, align 4, !dbg !661
  %2 = load i32, i32* %sign, align 4, !dbg !662
  %3 = load %struct.real_value*, %struct.real_value** %b.addr, align 8, !dbg !663
  %4 = bitcast %struct.real_value* %3 to i32*, !dbg !664
  %bf.load1 = load i32, i32* %4, align 8, !dbg !664
  %bf.lshr2 = lshr i32 %bf.load1, 3, !dbg !664
  %bf.clear3 = and i32 %bf.lshr2, 1, !dbg !664
  %xor = xor i32 %2, %bf.clear3, !dbg !665
  %5 = load i32, i32* %subtract_p.addr, align 4, !dbg !666
  %xor4 = xor i32 %xor, %5, !dbg !667
  store i32 %xor4, i32* %subtract_p.addr, align 4, !dbg !668
  %6 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !669
  %7 = bitcast %struct.real_value* %6 to i32*, !dbg !669
  %bf.load5 = load i32, i32* %7, align 8, !dbg !669
  %bf.clear6 = and i32 %bf.load5, 3, !dbg !669
  %shl = shl i32 %bf.clear6, 2, !dbg !669
  %8 = load %struct.real_value*, %struct.real_value** %b.addr, align 8, !dbg !669
  %9 = bitcast %struct.real_value* %8 to i32*, !dbg !669
  %bf.load7 = load i32, i32* %9, align 8, !dbg !669
  %bf.clear8 = and i32 %bf.load7, 3, !dbg !669
  %or = or i32 %shl, %bf.clear8, !dbg !669
  switch i32 %or, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb9
    i32 2, label %sw.bb9
    i32 3, label %sw.bb9
    i32 7, label %sw.bb9
    i32 11, label %sw.bb9
    i32 15, label %sw.bb9
    i32 6, label %sw.bb9
    i32 4, label %sw.bb13
    i32 8, label %sw.bb13
    i32 12, label %sw.bb13
    i32 13, label %sw.bb13
    i32 14, label %sw.bb13
    i32 9, label %sw.bb13
    i32 10, label %sw.bb14
    i32 5, label %sw.bb16
  ], !dbg !670

sw.bb:                                            ; preds = %entry
  %10 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !671
  %11 = load i32, i32* %sign, align 4, !dbg !673
  %12 = load i32, i32* %subtract_p.addr, align 4, !dbg !674
  %tobool = icmp ne i32 %12, 0, !dbg !675
  %lnot = xor i1 %tobool, true, !dbg !675
  %lnot.ext = zext i1 %lnot to i32, !dbg !675
  %and = and i32 %11, %lnot.ext, !dbg !676
  call void @get_zero(%struct.real_value* %10, i32 %and), !dbg !677
  store i8 0, i8* %retval, align 1, !dbg !678
  br label %return, !dbg !678

sw.bb9:                                           ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry
  %13 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !679
  %14 = load %struct.real_value*, %struct.real_value** %b.addr, align 8, !dbg !680
  %15 = bitcast %struct.real_value* %13 to i8*, !dbg !681
  %16 = bitcast %struct.real_value* %14 to i8*, !dbg !681
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %15, i8* align 8 %16, i64 32, i1 false), !dbg !681
  %17 = load i32, i32* %sign, align 4, !dbg !682
  %18 = load i32, i32* %subtract_p.addr, align 4, !dbg !683
  %xor10 = xor i32 %17, %18, !dbg !684
  %19 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !685
  %20 = bitcast %struct.real_value* %19 to i32*, !dbg !686
  %bf.load11 = load i32, i32* %20, align 8, !dbg !687
  %bf.value = and i32 %xor10, 1, !dbg !687
  %bf.shl = shl i32 %bf.value, 3, !dbg !687
  %bf.clear12 = and i32 %bf.load11, -9, !dbg !687
  %bf.set = or i32 %bf.clear12, %bf.shl, !dbg !687
  store i32 %bf.set, i32* %20, align 8, !dbg !687
  store i8 0, i8* %retval, align 1, !dbg !688
  br label %return, !dbg !688

sw.bb13:                                          ; preds = %entry, %entry, %entry, %entry, %entry, %entry
  %21 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !689
  %22 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !690
  %23 = bitcast %struct.real_value* %21 to i8*, !dbg !691
  %24 = bitcast %struct.real_value* %22 to i8*, !dbg !691
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %23, i8* align 8 %24, i64 32, i1 false), !dbg !691
  store i8 0, i8* %retval, align 1, !dbg !692
  br label %return, !dbg !692

sw.bb14:                                          ; preds = %entry
  %25 = load i32, i32* %subtract_p.addr, align 4, !dbg !693
  %tobool15 = icmp ne i32 %25, 0, !dbg !693
  br i1 %tobool15, label %if.then, label %if.else, !dbg !695

if.then:                                          ; preds = %sw.bb14
  %26 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !696
  call void @get_canonical_qnan(%struct.real_value* %26, i32 0), !dbg !697
  br label %if.end, !dbg !697

if.else:                                          ; preds = %sw.bb14
  %27 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !698
  %28 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !699
  %29 = bitcast %struct.real_value* %27 to i8*, !dbg !700
  %30 = bitcast %struct.real_value* %28 to i8*, !dbg !700
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 32, i1 false), !dbg !700
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  store i8 0, i8* %retval, align 1, !dbg !701
  br label %return, !dbg !701

sw.bb16:                                          ; preds = %entry
  br label %sw.epilog, !dbg !702

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 581, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !703
  br label %sw.epilog, !dbg !704

sw.epilog:                                        ; preds = %sw.default, %sw.bb16
  %31 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !705
  %32 = bitcast %struct.real_value* %31 to i32*, !dbg !705
  %bf.load17 = load i32, i32* %32, align 8, !dbg !705
  %bf.lshr18 = lshr i32 %bf.load17, 6, !dbg !705
  %xor19 = xor i32 %bf.lshr18, 33554432, !dbg !705
  %sub = sub nsw i32 %xor19, 33554432, !dbg !705
  %33 = load %struct.real_value*, %struct.real_value** %b.addr, align 8, !dbg !706
  %34 = bitcast %struct.real_value* %33 to i32*, !dbg !706
  %bf.load20 = load i32, i32* %34, align 8, !dbg !706
  %bf.lshr21 = lshr i32 %bf.load20, 6, !dbg !706
  %xor22 = xor i32 %bf.lshr21, 33554432, !dbg !706
  %sub23 = sub nsw i32 %xor22, 33554432, !dbg !706
  %sub24 = sub nsw i32 %sub, %sub23, !dbg !707
  store i32 %sub24, i32* %dexp, align 4, !dbg !708
  %35 = load i32, i32* %dexp, align 4, !dbg !709
  %cmp = icmp slt i32 %35, 0, !dbg !711
  br i1 %cmp, label %if.then25, label %if.end29, !dbg !712

if.then25:                                        ; preds = %sw.epilog
  call void @llvm.dbg.declare(metadata %struct.real_value** %t26, metadata !713, metadata !DIExpression()), !dbg !715
  %36 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !716
  store %struct.real_value* %36, %struct.real_value** %t26, align 8, !dbg !717
  %37 = load %struct.real_value*, %struct.real_value** %b.addr, align 8, !dbg !718
  store %struct.real_value* %37, %struct.real_value** %a.addr, align 8, !dbg !719
  %38 = load %struct.real_value*, %struct.real_value** %t26, align 8, !dbg !720
  store %struct.real_value* %38, %struct.real_value** %b.addr, align 8, !dbg !721
  %39 = load i32, i32* %dexp, align 4, !dbg !722
  %sub27 = sub nsw i32 0, %39, !dbg !723
  store i32 %sub27, i32* %dexp, align 4, !dbg !724
  %40 = load i32, i32* %subtract_p.addr, align 4, !dbg !725
  %41 = load i32, i32* %sign, align 4, !dbg !726
  %xor28 = xor i32 %41, %40, !dbg !726
  store i32 %xor28, i32* %sign, align 4, !dbg !726
  br label %if.end29, !dbg !727

if.end29:                                         ; preds = %if.then25, %sw.epilog
  %42 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !728
  %43 = bitcast %struct.real_value* %42 to i32*, !dbg !728
  %bf.load30 = load i32, i32* %43, align 8, !dbg !728
  %bf.lshr31 = lshr i32 %bf.load30, 6, !dbg !728
  %xor32 = xor i32 %bf.lshr31, 33554432, !dbg !728
  %sub33 = sub nsw i32 %xor32, 33554432, !dbg !728
  store i32 %sub33, i32* %exp, align 4, !dbg !729
  %44 = load i32, i32* %dexp, align 4, !dbg !730
  %cmp34 = icmp sgt i32 %44, 0, !dbg !732
  br i1 %cmp34, label %if.then35, label %if.end47, !dbg !733

if.then35:                                        ; preds = %if.end29
  %45 = load i32, i32* %dexp, align 4, !dbg !734
  %cmp36 = icmp sge i32 %45, 192, !dbg !737
  br i1 %cmp36, label %if.then37, label %if.end43, !dbg !738

if.then37:                                        ; preds = %if.then35
  %46 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !739
  %47 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !741
  %48 = bitcast %struct.real_value* %46 to i8*, !dbg !742
  %49 = bitcast %struct.real_value* %47 to i8*, !dbg !742
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %48, i8* align 8 %49, i64 32, i1 false), !dbg !742
  %50 = load i32, i32* %sign, align 4, !dbg !743
  %51 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !744
  %52 = bitcast %struct.real_value* %51 to i32*, !dbg !745
  %bf.load38 = load i32, i32* %52, align 8, !dbg !746
  %bf.value39 = and i32 %50, 1, !dbg !746
  %bf.shl40 = shl i32 %bf.value39, 3, !dbg !746
  %bf.clear41 = and i32 %bf.load38, -9, !dbg !746
  %bf.set42 = or i32 %bf.clear41, %bf.shl40, !dbg !746
  store i32 %bf.set42, i32* %52, align 8, !dbg !746
  store i8 1, i8* %retval, align 1, !dbg !747
  br label %return, !dbg !747

if.end43:                                         ; preds = %if.then35
  %53 = load %struct.real_value*, %struct.real_value** %b.addr, align 8, !dbg !748
  %54 = load i32, i32* %dexp, align 4, !dbg !749
  %call = call zeroext i8 @sticky_rshift_significand(%struct.real_value* %t, %struct.real_value* %53, i32 %54), !dbg !750
  %conv = zext i8 %call to i32, !dbg !750
  %55 = load i8, i8* %inexact, align 1, !dbg !751
  %conv44 = zext i8 %55 to i32, !dbg !751
  %or45 = or i32 %conv44, %conv, !dbg !751
  %conv46 = trunc i32 %or45 to i8, !dbg !751
  store i8 %conv46, i8* %inexact, align 1, !dbg !751
  store %struct.real_value* %t, %struct.real_value** %b.addr, align 8, !dbg !752
  br label %if.end47, !dbg !753

if.end47:                                         ; preds = %if.end43, %if.end29
  %56 = load i32, i32* %subtract_p.addr, align 4, !dbg !754
  %tobool48 = icmp ne i32 %56, 0, !dbg !754
  br i1 %tobool48, label %if.then49, label %if.else56, !dbg !756

if.then49:                                        ; preds = %if.end47
  %57 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !757
  %58 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !760
  %59 = load %struct.real_value*, %struct.real_value** %b.addr, align 8, !dbg !761
  %60 = load i8, i8* %inexact, align 1, !dbg !762
  %conv50 = zext i8 %60 to i32, !dbg !762
  %call51 = call zeroext i8 @sub_significands(%struct.real_value* %57, %struct.real_value* %58, %struct.real_value* %59, i32 %conv50), !dbg !763
  %tobool52 = icmp ne i8 %call51, 0, !dbg !763
  br i1 %tobool52, label %if.then53, label %if.end55, !dbg !764

if.then53:                                        ; preds = %if.then49
  %61 = load i32, i32* %sign, align 4, !dbg !765
  %xor54 = xor i32 %61, 1, !dbg !765
  store i32 %xor54, i32* %sign, align 4, !dbg !765
  %62 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !767
  %63 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !768
  call void @neg_significand(%struct.real_value* %62, %struct.real_value* %63), !dbg !769
  br label %if.end55, !dbg !770

if.end55:                                         ; preds = %if.then53, %if.then49
  br label %if.end71, !dbg !771

if.else56:                                        ; preds = %if.end47
  %64 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !772
  %65 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !775
  %66 = load %struct.real_value*, %struct.real_value** %b.addr, align 8, !dbg !776
  %call57 = call zeroext i8 @add_significands(%struct.real_value* %64, %struct.real_value* %65, %struct.real_value* %66), !dbg !777
  %tobool58 = icmp ne i8 %call57, 0, !dbg !777
  br i1 %tobool58, label %if.then59, label %if.end70, !dbg !778

if.then59:                                        ; preds = %if.else56
  %67 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !779
  %68 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !781
  %call60 = call zeroext i8 @sticky_rshift_significand(%struct.real_value* %67, %struct.real_value* %68, i32 1), !dbg !782
  %conv61 = zext i8 %call60 to i32, !dbg !782
  %69 = load i8, i8* %inexact, align 1, !dbg !783
  %conv62 = zext i8 %69 to i32, !dbg !783
  %or63 = or i32 %conv62, %conv61, !dbg !783
  %conv64 = trunc i32 %or63 to i8, !dbg !783
  store i8 %conv64, i8* %inexact, align 1, !dbg !783
  %70 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !784
  %sig = getelementptr inbounds %struct.real_value, %struct.real_value* %70, i32 0, i32 1, !dbg !785
  %arrayidx = getelementptr inbounds [3 x i64], [3 x i64]* %sig, i64 0, i64 2, !dbg !784
  %71 = load i64, i64* %arrayidx, align 8, !dbg !786
  %or65 = or i64 %71, -9223372036854775808, !dbg !786
  store i64 %or65, i64* %arrayidx, align 8, !dbg !786
  %72 = load i32, i32* %exp, align 4, !dbg !787
  %inc = add nsw i32 %72, 1, !dbg !787
  store i32 %inc, i32* %exp, align 4, !dbg !787
  %cmp66 = icmp sgt i32 %inc, 33554431, !dbg !789
  br i1 %cmp66, label %if.then68, label %if.end69, !dbg !790

if.then68:                                        ; preds = %if.then59
  %73 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !791
  %74 = load i32, i32* %sign, align 4, !dbg !793
  call void @get_inf(%struct.real_value* %73, i32 %74), !dbg !794
  store i8 1, i8* %retval, align 1, !dbg !795
  br label %return, !dbg !795

if.end69:                                         ; preds = %if.then59
  br label %if.end70, !dbg !796

if.end70:                                         ; preds = %if.end69, %if.else56
  br label %if.end71

if.end71:                                         ; preds = %if.end70, %if.end55
  %75 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !797
  %76 = bitcast %struct.real_value* %75 to i32*, !dbg !798
  %bf.load72 = load i32, i32* %76, align 8, !dbg !799
  %bf.clear73 = and i32 %bf.load72, -4, !dbg !799
  %bf.set74 = or i32 %bf.clear73, 1, !dbg !799
  store i32 %bf.set74, i32* %76, align 8, !dbg !799
  %77 = load i32, i32* %sign, align 4, !dbg !800
  %78 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !801
  %79 = bitcast %struct.real_value* %78 to i32*, !dbg !802
  %bf.load75 = load i32, i32* %79, align 8, !dbg !803
  %bf.value76 = and i32 %77, 1, !dbg !803
  %bf.shl77 = shl i32 %bf.value76, 3, !dbg !803
  %bf.clear78 = and i32 %bf.load75, -9, !dbg !803
  %bf.set79 = or i32 %bf.clear78, %bf.shl77, !dbg !803
  store i32 %bf.set79, i32* %79, align 8, !dbg !803
  %80 = load i32, i32* %exp, align 4, !dbg !804
  %and80 = and i32 %80, 67108863, !dbg !804
  %81 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !804
  %82 = bitcast %struct.real_value* %81 to i32*, !dbg !804
  %bf.load81 = load i32, i32* %82, align 8, !dbg !804
  %bf.value82 = and i32 %and80, 67108863, !dbg !804
  %bf.shl83 = shl i32 %bf.value82, 6, !dbg !804
  %bf.clear84 = and i32 %bf.load81, 63, !dbg !804
  %bf.set85 = or i32 %bf.clear84, %bf.shl83, !dbg !804
  store i32 %bf.set85, i32* %82, align 8, !dbg !804
  %83 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !805
  %84 = bitcast %struct.real_value* %83 to i32*, !dbg !806
  %bf.load86 = load i32, i32* %84, align 8, !dbg !807
  %bf.clear87 = and i32 %bf.load86, -17, !dbg !807
  store i32 %bf.clear87, i32* %84, align 8, !dbg !807
  %85 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !808
  %86 = bitcast %struct.real_value* %85 to i32*, !dbg !809
  %bf.load88 = load i32, i32* %86, align 8, !dbg !810
  %bf.clear89 = and i32 %bf.load88, -33, !dbg !810
  store i32 %bf.clear89, i32* %86, align 8, !dbg !810
  %87 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !811
  %88 = bitcast %struct.real_value* %87 to i32*, !dbg !812
  %bf.load90 = load i32, i32* %88, align 8, !dbg !813
  %bf.clear91 = and i32 %bf.load90, -5, !dbg !813
  store i32 %bf.clear91, i32* %88, align 8, !dbg !813
  %89 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !814
  call void @normalize(%struct.real_value* %89), !dbg !815
  %90 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !816
  %91 = bitcast %struct.real_value* %90 to i32*, !dbg !818
  %bf.load92 = load i32, i32* %91, align 8, !dbg !818
  %bf.clear93 = and i32 %bf.load92, 3, !dbg !818
  %cmp94 = icmp eq i32 %bf.clear93, 0, !dbg !819
  br i1 %cmp94, label %if.then96, label %if.else99, !dbg !820

if.then96:                                        ; preds = %if.end71
  %92 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !821
  %93 = bitcast %struct.real_value* %92 to i32*, !dbg !822
  %bf.load97 = load i32, i32* %93, align 8, !dbg !823
  %bf.clear98 = and i32 %bf.load97, -9, !dbg !823
  store i32 %bf.clear98, i32* %93, align 8, !dbg !823
  br label %if.end104, !dbg !821

if.else99:                                        ; preds = %if.end71
  %94 = load i8, i8* %inexact, align 1, !dbg !824
  %conv100 = zext i8 %94 to i64, !dbg !824
  %95 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !825
  %sig101 = getelementptr inbounds %struct.real_value, %struct.real_value* %95, i32 0, i32 1, !dbg !826
  %arrayidx102 = getelementptr inbounds [3 x i64], [3 x i64]* %sig101, i64 0, i64 0, !dbg !825
  %96 = load i64, i64* %arrayidx102, align 8, !dbg !827
  %or103 = or i64 %96, %conv100, !dbg !827
  store i64 %or103, i64* %arrayidx102, align 8, !dbg !827
  br label %if.end104

if.end104:                                        ; preds = %if.else99, %if.then96
  %97 = load i8, i8* %inexact, align 1, !dbg !828
  store i8 %97, i8* %retval, align 1, !dbg !829
  br label %return, !dbg !829

return:                                           ; preds = %if.end104, %if.then68, %if.then37, %if.end, %sw.bb13, %sw.bb9, %sw.bb
  %98 = load i8, i8* %retval, align 1, !dbg !830
  ret i8 %98, !dbg !830
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @do_multiply(%struct.real_value* %r, %struct.real_value* %a, %struct.real_value* %b) #0 !dbg !831 {
entry:
  %retval = alloca i8, align 1
  %r.addr = alloca %struct.real_value*, align 8
  %a.addr = alloca %struct.real_value*, align 8
  %b.addr = alloca %struct.real_value*, align 8
  %u = alloca %struct.real_value, align 8
  %t = alloca %struct.real_value, align 8
  %rr = alloca %struct.real_value*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %sign = alloca i32, align 4
  %inexact = alloca i8, align 1
  %ai = alloca i64, align 8
  %exp = alloca i32, align 4
  %bi = alloca i64, align 8
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !834, metadata !DIExpression()), !dbg !835
  store %struct.real_value* %a, %struct.real_value** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %a.addr, metadata !836, metadata !DIExpression()), !dbg !837
  store %struct.real_value* %b, %struct.real_value** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %b.addr, metadata !838, metadata !DIExpression()), !dbg !839
  call void @llvm.dbg.declare(metadata %struct.real_value* %u, metadata !840, metadata !DIExpression()), !dbg !841
  call void @llvm.dbg.declare(metadata %struct.real_value* %t, metadata !842, metadata !DIExpression()), !dbg !843
  call void @llvm.dbg.declare(metadata %struct.real_value** %rr, metadata !844, metadata !DIExpression()), !dbg !845
  call void @llvm.dbg.declare(metadata i32* %i, metadata !846, metadata !DIExpression()), !dbg !847
  call void @llvm.dbg.declare(metadata i32* %j, metadata !848, metadata !DIExpression()), !dbg !849
  call void @llvm.dbg.declare(metadata i32* %k, metadata !850, metadata !DIExpression()), !dbg !851
  call void @llvm.dbg.declare(metadata i32* %sign, metadata !852, metadata !DIExpression()), !dbg !853
  %0 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !854
  %1 = bitcast %struct.real_value* %0 to i32*, !dbg !855
  %bf.load = load i32, i32* %1, align 8, !dbg !855
  %bf.lshr = lshr i32 %bf.load, 3, !dbg !855
  %bf.clear = and i32 %bf.lshr, 1, !dbg !855
  %2 = load %struct.real_value*, %struct.real_value** %b.addr, align 8, !dbg !856
  %3 = bitcast %struct.real_value* %2 to i32*, !dbg !857
  %bf.load1 = load i32, i32* %3, align 8, !dbg !857
  %bf.lshr2 = lshr i32 %bf.load1, 3, !dbg !857
  %bf.clear3 = and i32 %bf.lshr2, 1, !dbg !857
  %xor = xor i32 %bf.clear, %bf.clear3, !dbg !858
  store i32 %xor, i32* %sign, align 4, !dbg !853
  call void @llvm.dbg.declare(metadata i8* %inexact, metadata !859, metadata !DIExpression()), !dbg !860
  store i8 0, i8* %inexact, align 1, !dbg !860
  %4 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !861
  %5 = bitcast %struct.real_value* %4 to i32*, !dbg !861
  %bf.load4 = load i32, i32* %5, align 8, !dbg !861
  %bf.clear5 = and i32 %bf.load4, 3, !dbg !861
  %shl = shl i32 %bf.clear5, 2, !dbg !861
  %6 = load %struct.real_value*, %struct.real_value** %b.addr, align 8, !dbg !861
  %7 = bitcast %struct.real_value* %6 to i32*, !dbg !861
  %bf.load6 = load i32, i32* %7, align 8, !dbg !861
  %bf.clear7 = and i32 %bf.load6, 3, !dbg !861
  %or = or i32 %shl, %bf.clear7, !dbg !861
  switch i32 %or, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb
    i32 4, label %sw.bb
    i32 3, label %sw.bb8
    i32 7, label %sw.bb8
    i32 11, label %sw.bb8
    i32 15, label %sw.bb8
    i32 12, label %sw.bb11
    i32 13, label %sw.bb11
    i32 14, label %sw.bb11
    i32 2, label %sw.bb17
    i32 8, label %sw.bb17
    i32 10, label %sw.bb18
    i32 6, label %sw.bb18
    i32 9, label %sw.bb18
    i32 5, label %sw.bb19
  ], !dbg !862

sw.bb:                                            ; preds = %entry, %entry, %entry
  %8 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !863
  %9 = load i32, i32* %sign, align 4, !dbg !865
  call void @get_zero(%struct.real_value* %8, i32 %9), !dbg !866
  store i8 0, i8* %retval, align 1, !dbg !867
  br label %return, !dbg !867

sw.bb8:                                           ; preds = %entry, %entry, %entry, %entry
  %10 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !868
  %11 = load %struct.real_value*, %struct.real_value** %b.addr, align 8, !dbg !869
  %12 = bitcast %struct.real_value* %10 to i8*, !dbg !870
  %13 = bitcast %struct.real_value* %11 to i8*, !dbg !870
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %12, i8* align 8 %13, i64 32, i1 false), !dbg !870
  %14 = load i32, i32* %sign, align 4, !dbg !871
  %15 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !872
  %16 = bitcast %struct.real_value* %15 to i32*, !dbg !873
  %bf.load9 = load i32, i32* %16, align 8, !dbg !874
  %bf.value = and i32 %14, 1, !dbg !874
  %bf.shl = shl i32 %bf.value, 3, !dbg !874
  %bf.clear10 = and i32 %bf.load9, -9, !dbg !874
  %bf.set = or i32 %bf.clear10, %bf.shl, !dbg !874
  store i32 %bf.set, i32* %16, align 8, !dbg !874
  store i8 0, i8* %retval, align 1, !dbg !875
  br label %return, !dbg !875

sw.bb11:                                          ; preds = %entry, %entry, %entry
  %17 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !876
  %18 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !877
  %19 = bitcast %struct.real_value* %17 to i8*, !dbg !878
  %20 = bitcast %struct.real_value* %18 to i8*, !dbg !878
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* align 8 %20, i64 32, i1 false), !dbg !878
  %21 = load i32, i32* %sign, align 4, !dbg !879
  %22 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !880
  %23 = bitcast %struct.real_value* %22 to i32*, !dbg !881
  %bf.load12 = load i32, i32* %23, align 8, !dbg !882
  %bf.value13 = and i32 %21, 1, !dbg !882
  %bf.shl14 = shl i32 %bf.value13, 3, !dbg !882
  %bf.clear15 = and i32 %bf.load12, -9, !dbg !882
  %bf.set16 = or i32 %bf.clear15, %bf.shl14, !dbg !882
  store i32 %bf.set16, i32* %23, align 8, !dbg !882
  store i8 0, i8* %retval, align 1, !dbg !883
  br label %return, !dbg !883

sw.bb17:                                          ; preds = %entry, %entry
  %24 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !884
  %25 = load i32, i32* %sign, align 4, !dbg !885
  call void @get_canonical_qnan(%struct.real_value* %24, i32 %25), !dbg !886
  store i8 0, i8* %retval, align 1, !dbg !887
  br label %return, !dbg !887

sw.bb18:                                          ; preds = %entry, %entry, %entry
  %26 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !888
  %27 = load i32, i32* %sign, align 4, !dbg !889
  call void @get_inf(%struct.real_value* %26, i32 %27), !dbg !890
  store i8 0, i8* %retval, align 1, !dbg !891
  br label %return, !dbg !891

sw.bb19:                                          ; preds = %entry
  br label %sw.epilog, !dbg !892

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 716, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !893
  br label %sw.epilog, !dbg !894

sw.epilog:                                        ; preds = %sw.default, %sw.bb19
  %28 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !895
  %29 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !897
  %cmp = icmp eq %struct.real_value* %28, %29, !dbg !898
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !899

lor.lhs.false:                                    ; preds = %sw.epilog
  %30 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !900
  %31 = load %struct.real_value*, %struct.real_value** %b.addr, align 8, !dbg !901
  %cmp20 = icmp eq %struct.real_value* %30, %31, !dbg !902
  br i1 %cmp20, label %if.then, label %if.else, !dbg !903

if.then:                                          ; preds = %lor.lhs.false, %sw.epilog
  store %struct.real_value* %t, %struct.real_value** %rr, align 8, !dbg !904
  br label %if.end, !dbg !905

if.else:                                          ; preds = %lor.lhs.false
  %32 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !906
  store %struct.real_value* %32, %struct.real_value** %rr, align 8, !dbg !907
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %33 = load %struct.real_value*, %struct.real_value** %rr, align 8, !dbg !908
  call void @get_zero(%struct.real_value* %33, i32 0), !dbg !909
  store i32 0, i32* %i, align 4, !dbg !910
  br label %for.cond, !dbg !912

for.cond:                                         ; preds = %for.inc84, %if.end
  %34 = load i32, i32* %i, align 4, !dbg !913
  %cmp21 = icmp ult i32 %34, 6, !dbg !915
  br i1 %cmp21, label %for.body, label %for.end86, !dbg !916

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i64* %ai, metadata !917, metadata !DIExpression()), !dbg !919
  %35 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !920
  %sig = getelementptr inbounds %struct.real_value, %struct.real_value* %35, i32 0, i32 1, !dbg !921
  %36 = load i32, i32* %i, align 4, !dbg !922
  %div = udiv i32 %36, 2, !dbg !923
  %idxprom = zext i32 %div to i64, !dbg !920
  %arrayidx = getelementptr inbounds [3 x i64], [3 x i64]* %sig, i64 0, i64 %idxprom, !dbg !920
  %37 = load i64, i64* %arrayidx, align 8, !dbg !920
  store i64 %37, i64* %ai, align 8, !dbg !919
  %38 = load i32, i32* %i, align 4, !dbg !924
  %and = and i32 %38, 1, !dbg !926
  %tobool = icmp ne i32 %and, 0, !dbg !926
  br i1 %tobool, label %if.then22, label %if.else23, !dbg !927

if.then22:                                        ; preds = %for.body
  %39 = load i64, i64* %ai, align 8, !dbg !928
  %shr = lshr i64 %39, 32, !dbg !928
  store i64 %shr, i64* %ai, align 8, !dbg !928
  br label %if.end25, !dbg !929

if.else23:                                        ; preds = %for.body
  %40 = load i64, i64* %ai, align 8, !dbg !930
  %and24 = and i64 %40, 4294967295, !dbg !930
  store i64 %and24, i64* %ai, align 8, !dbg !930
  br label %if.end25

if.end25:                                         ; preds = %if.else23, %if.then22
  %41 = load i64, i64* %ai, align 8, !dbg !931
  %cmp26 = icmp eq i64 %41, 0, !dbg !933
  br i1 %cmp26, label %if.then27, label %if.end28, !dbg !934

if.then27:                                        ; preds = %if.end25
  br label %for.inc84, !dbg !935

if.end28:                                         ; preds = %if.end25
  store i32 0, i32* %j, align 4, !dbg !936
  br label %for.cond29, !dbg !938

for.cond29:                                       ; preds = %for.inc82, %if.end28
  %42 = load i32, i32* %j, align 4, !dbg !939
  %cmp30 = icmp ult i32 %42, 2, !dbg !941
  br i1 %cmp30, label %for.body31, label %for.end83, !dbg !942

for.body31:                                       ; preds = %for.cond29
  call void @llvm.dbg.declare(metadata i32* %exp, metadata !943, metadata !DIExpression()), !dbg !945
  %43 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !946
  %44 = bitcast %struct.real_value* %43 to i32*, !dbg !946
  %bf.load32 = load i32, i32* %44, align 8, !dbg !946
  %bf.lshr33 = lshr i32 %bf.load32, 6, !dbg !946
  %xor34 = xor i32 %bf.lshr33, 33554432, !dbg !946
  %sub = sub nsw i32 %xor34, 33554432, !dbg !946
  %45 = load i32, i32* %i, align 4, !dbg !947
  %sub35 = sub i32 5, %45, !dbg !948
  %mul = mul i32 %sub35, 32, !dbg !949
  %sub36 = sub i32 %sub, %mul, !dbg !950
  %46 = load %struct.real_value*, %struct.real_value** %b.addr, align 8, !dbg !951
  %47 = bitcast %struct.real_value* %46 to i32*, !dbg !951
  %bf.load37 = load i32, i32* %47, align 8, !dbg !951
  %bf.lshr38 = lshr i32 %bf.load37, 6, !dbg !951
  %xor39 = xor i32 %bf.lshr38, 33554432, !dbg !951
  %sub40 = sub nsw i32 %xor39, 33554432, !dbg !951
  %48 = load i32, i32* %j, align 4, !dbg !952
  %sub41 = sub i32 1, %48, !dbg !953
  %mul42 = mul i32 %sub41, 32, !dbg !954
  %sub43 = sub i32 %sub40, %mul42, !dbg !955
  %add = add i32 %sub36, %sub43, !dbg !956
  store i32 %add, i32* %exp, align 4, !dbg !945
  %49 = load i32, i32* %exp, align 4, !dbg !957
  %cmp44 = icmp sgt i32 %49, 33554431, !dbg !959
  br i1 %cmp44, label %if.then45, label %if.end46, !dbg !960

if.then45:                                        ; preds = %for.body31
  %50 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !961
  %51 = load i32, i32* %sign, align 4, !dbg !963
  call void @get_inf(%struct.real_value* %50, i32 %51), !dbg !964
  store i8 1, i8* %retval, align 1, !dbg !965
  br label %return, !dbg !965

if.end46:                                         ; preds = %for.body31
  %52 = load i32, i32* %exp, align 4, !dbg !966
  %cmp47 = icmp slt i32 %52, -33554431, !dbg !968
  br i1 %cmp47, label %if.then48, label %if.end49, !dbg !969

if.then48:                                        ; preds = %if.end46
  store i8 1, i8* %inexact, align 1, !dbg !970
  br label %for.inc82, !dbg !972

if.end49:                                         ; preds = %if.end46
  %53 = bitcast %struct.real_value* %u to i8*, !dbg !973
  call void @llvm.memset.p0i8.i64(i8* align 8 %53, i8 0, i64 32, i1 false), !dbg !973
  %54 = bitcast %struct.real_value* %u to i32*, !dbg !974
  %bf.load50 = load i32, i32* %54, align 8, !dbg !975
  %bf.clear51 = and i32 %bf.load50, -4, !dbg !975
  %bf.set52 = or i32 %bf.clear51, 1, !dbg !975
  store i32 %bf.set52, i32* %54, align 8, !dbg !975
  %55 = load i32, i32* %exp, align 4, !dbg !976
  %and53 = and i32 %55, 67108863, !dbg !976
  %56 = bitcast %struct.real_value* %u to i32*, !dbg !976
  %bf.load54 = load i32, i32* %56, align 8, !dbg !976
  %bf.value55 = and i32 %and53, 67108863, !dbg !976
  %bf.shl56 = shl i32 %bf.value55, 6, !dbg !976
  %bf.clear57 = and i32 %bf.load54, 63, !dbg !976
  %bf.set58 = or i32 %bf.clear57, %bf.shl56, !dbg !976
  store i32 %bf.set58, i32* %56, align 8, !dbg !976
  %57 = load i32, i32* %j, align 4, !dbg !977
  store i32 %57, i32* %k, align 4, !dbg !979
  br label %for.cond59, !dbg !980

for.cond59:                                       ; preds = %for.inc, %if.end49
  %58 = load i32, i32* %k, align 4, !dbg !981
  %cmp60 = icmp ult i32 %58, 6, !dbg !983
  br i1 %cmp60, label %for.body61, label %for.end, !dbg !984

for.body61:                                       ; preds = %for.cond59
  call void @llvm.dbg.declare(metadata i64* %bi, metadata !985, metadata !DIExpression()), !dbg !987
  %59 = load %struct.real_value*, %struct.real_value** %b.addr, align 8, !dbg !988
  %sig62 = getelementptr inbounds %struct.real_value, %struct.real_value* %59, i32 0, i32 1, !dbg !989
  %60 = load i32, i32* %k, align 4, !dbg !990
  %div63 = udiv i32 %60, 2, !dbg !991
  %idxprom64 = zext i32 %div63 to i64, !dbg !988
  %arrayidx65 = getelementptr inbounds [3 x i64], [3 x i64]* %sig62, i64 0, i64 %idxprom64, !dbg !988
  %61 = load i64, i64* %arrayidx65, align 8, !dbg !988
  store i64 %61, i64* %bi, align 8, !dbg !987
  %62 = load i32, i32* %k, align 4, !dbg !992
  %and66 = and i32 %62, 1, !dbg !994
  %tobool67 = icmp ne i32 %and66, 0, !dbg !994
  br i1 %tobool67, label %if.then68, label %if.else70, !dbg !995

if.then68:                                        ; preds = %for.body61
  %63 = load i64, i64* %bi, align 8, !dbg !996
  %shr69 = lshr i64 %63, 32, !dbg !996
  store i64 %shr69, i64* %bi, align 8, !dbg !996
  br label %if.end72, !dbg !997

if.else70:                                        ; preds = %for.body61
  %64 = load i64, i64* %bi, align 8, !dbg !998
  %and71 = and i64 %64, 4294967295, !dbg !998
  store i64 %and71, i64* %bi, align 8, !dbg !998
  br label %if.end72

if.end72:                                         ; preds = %if.else70, %if.then68
  %65 = load i64, i64* %ai, align 8, !dbg !999
  %66 = load i64, i64* %bi, align 8, !dbg !1000
  %mul73 = mul i64 %65, %66, !dbg !1001
  %sig74 = getelementptr inbounds %struct.real_value, %struct.real_value* %u, i32 0, i32 1, !dbg !1002
  %67 = load i32, i32* %k, align 4, !dbg !1003
  %div75 = udiv i32 %67, 2, !dbg !1004
  %idxprom76 = zext i32 %div75 to i64, !dbg !1005
  %arrayidx77 = getelementptr inbounds [3 x i64], [3 x i64]* %sig74, i64 0, i64 %idxprom76, !dbg !1005
  store i64 %mul73, i64* %arrayidx77, align 8, !dbg !1006
  br label %for.inc, !dbg !1007

for.inc:                                          ; preds = %if.end72
  %68 = load i32, i32* %k, align 4, !dbg !1008
  %add78 = add i32 %68, 2, !dbg !1008
  store i32 %add78, i32* %k, align 4, !dbg !1008
  br label %for.cond59, !dbg !1009, !llvm.loop !1010

for.end:                                          ; preds = %for.cond59
  call void @normalize(%struct.real_value* %u), !dbg !1012
  %69 = load %struct.real_value*, %struct.real_value** %rr, align 8, !dbg !1013
  %70 = load %struct.real_value*, %struct.real_value** %rr, align 8, !dbg !1014
  %call = call zeroext i8 @do_add(%struct.real_value* %69, %struct.real_value* %70, %struct.real_value* %u, i32 0), !dbg !1015
  %conv = zext i8 %call to i32, !dbg !1015
  %71 = load i8, i8* %inexact, align 1, !dbg !1016
  %conv79 = zext i8 %71 to i32, !dbg !1016
  %or80 = or i32 %conv79, %conv, !dbg !1016
  %conv81 = trunc i32 %or80 to i8, !dbg !1016
  store i8 %conv81, i8* %inexact, align 1, !dbg !1016
  br label %for.inc82, !dbg !1017

for.inc82:                                        ; preds = %for.end, %if.then48
  %72 = load i32, i32* %j, align 4, !dbg !1018
  %inc = add i32 %72, 1, !dbg !1018
  store i32 %inc, i32* %j, align 4, !dbg !1018
  br label %for.cond29, !dbg !1019, !llvm.loop !1020

for.end83:                                        ; preds = %for.cond29
  br label %for.inc84, !dbg !1022

for.inc84:                                        ; preds = %for.end83, %if.then27
  %73 = load i32, i32* %i, align 4, !dbg !1023
  %inc85 = add i32 %73, 1, !dbg !1023
  store i32 %inc85, i32* %i, align 4, !dbg !1023
  br label %for.cond, !dbg !1024, !llvm.loop !1025

for.end86:                                        ; preds = %for.cond
  %74 = load i32, i32* %sign, align 4, !dbg !1027
  %75 = load %struct.real_value*, %struct.real_value** %rr, align 8, !dbg !1028
  %76 = bitcast %struct.real_value* %75 to i32*, !dbg !1029
  %bf.load87 = load i32, i32* %76, align 8, !dbg !1030
  %bf.value88 = and i32 %74, 1, !dbg !1030
  %bf.shl89 = shl i32 %bf.value88, 3, !dbg !1030
  %bf.clear90 = and i32 %bf.load87, -9, !dbg !1030
  %bf.set91 = or i32 %bf.clear90, %bf.shl89, !dbg !1030
  store i32 %bf.set91, i32* %76, align 8, !dbg !1030
  %77 = load %struct.real_value*, %struct.real_value** %rr, align 8, !dbg !1031
  %78 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1033
  %cmp92 = icmp ne %struct.real_value* %77, %78, !dbg !1034
  br i1 %cmp92, label %if.then94, label %if.end95, !dbg !1035

if.then94:                                        ; preds = %for.end86
  %79 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1036
  %80 = bitcast %struct.real_value* %79 to i8*, !dbg !1037
  %81 = bitcast %struct.real_value* %t to i8*, !dbg !1037
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %80, i8* align 8 %81, i64 32, i1 false), !dbg !1037
  br label %if.end95, !dbg !1038

if.end95:                                         ; preds = %if.then94, %for.end86
  %82 = load i8, i8* %inexact, align 1, !dbg !1039
  store i8 %82, i8* %retval, align 1, !dbg !1040
  br label %return, !dbg !1040

return:                                           ; preds = %if.end95, %if.then45, %sw.bb18, %sw.bb17, %sw.bb11, %sw.bb8, %sw.bb
  %83 = load i8, i8* %retval, align 1, !dbg !1041
  ret i8 %83, !dbg !1041
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @do_divide(%struct.real_value* %r, %struct.real_value* %a, %struct.real_value* %b) #0 !dbg !1042 {
entry:
  %retval = alloca i8, align 1
  %r.addr = alloca %struct.real_value*, align 8
  %a.addr = alloca %struct.real_value*, align 8
  %b.addr = alloca %struct.real_value*, align 8
  %exp = alloca i32, align 4
  %sign = alloca i32, align 4
  %t = alloca %struct.real_value, align 8
  %rr = alloca %struct.real_value*, align 8
  %inexact = alloca i8, align 1
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !1043, metadata !DIExpression()), !dbg !1044
  store %struct.real_value* %a, %struct.real_value** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %a.addr, metadata !1045, metadata !DIExpression()), !dbg !1046
  store %struct.real_value* %b, %struct.real_value** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %b.addr, metadata !1047, metadata !DIExpression()), !dbg !1048
  call void @llvm.dbg.declare(metadata i32* %exp, metadata !1049, metadata !DIExpression()), !dbg !1050
  call void @llvm.dbg.declare(metadata i32* %sign, metadata !1051, metadata !DIExpression()), !dbg !1052
  %0 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !1053
  %1 = bitcast %struct.real_value* %0 to i32*, !dbg !1054
  %bf.load = load i32, i32* %1, align 8, !dbg !1054
  %bf.lshr = lshr i32 %bf.load, 3, !dbg !1054
  %bf.clear = and i32 %bf.lshr, 1, !dbg !1054
  %2 = load %struct.real_value*, %struct.real_value** %b.addr, align 8, !dbg !1055
  %3 = bitcast %struct.real_value* %2 to i32*, !dbg !1056
  %bf.load1 = load i32, i32* %3, align 8, !dbg !1056
  %bf.lshr2 = lshr i32 %bf.load1, 3, !dbg !1056
  %bf.clear3 = and i32 %bf.lshr2, 1, !dbg !1056
  %xor = xor i32 %bf.clear, %bf.clear3, !dbg !1057
  store i32 %xor, i32* %sign, align 4, !dbg !1052
  call void @llvm.dbg.declare(metadata %struct.real_value* %t, metadata !1058, metadata !DIExpression()), !dbg !1059
  call void @llvm.dbg.declare(metadata %struct.real_value** %rr, metadata !1060, metadata !DIExpression()), !dbg !1061
  call void @llvm.dbg.declare(metadata i8* %inexact, metadata !1062, metadata !DIExpression()), !dbg !1063
  %4 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !1064
  %5 = bitcast %struct.real_value* %4 to i32*, !dbg !1064
  %bf.load4 = load i32, i32* %5, align 8, !dbg !1064
  %bf.clear5 = and i32 %bf.load4, 3, !dbg !1064
  %shl = shl i32 %bf.clear5, 2, !dbg !1064
  %6 = load %struct.real_value*, %struct.real_value** %b.addr, align 8, !dbg !1064
  %7 = bitcast %struct.real_value* %6 to i32*, !dbg !1064
  %bf.load6 = load i32, i32* %7, align 8, !dbg !1064
  %bf.clear7 = and i32 %bf.load6, 3, !dbg !1064
  %or = or i32 %shl, %bf.clear7, !dbg !1064
  switch i32 %or, label %sw.default [
    i32 0, label %sw.bb
    i32 10, label %sw.bb
    i32 1, label %sw.bb8
    i32 2, label %sw.bb8
    i32 6, label %sw.bb8
    i32 4, label %sw.bb9
    i32 8, label %sw.bb9
    i32 3, label %sw.bb10
    i32 7, label %sw.bb10
    i32 11, label %sw.bb10
    i32 15, label %sw.bb10
    i32 12, label %sw.bb13
    i32 13, label %sw.bb13
    i32 14, label %sw.bb13
    i32 9, label %sw.bb19
    i32 5, label %sw.bb20
  ], !dbg !1065

sw.bb:                                            ; preds = %entry, %entry
  %8 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1066
  %9 = load i32, i32* %sign, align 4, !dbg !1068
  call void @get_canonical_qnan(%struct.real_value* %8, i32 %9), !dbg !1069
  store i8 0, i8* %retval, align 1, !dbg !1070
  br label %return, !dbg !1070

sw.bb8:                                           ; preds = %entry, %entry, %entry
  %10 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1071
  %11 = load i32, i32* %sign, align 4, !dbg !1072
  call void @get_zero(%struct.real_value* %10, i32 %11), !dbg !1073
  store i8 0, i8* %retval, align 1, !dbg !1074
  br label %return, !dbg !1074

sw.bb9:                                           ; preds = %entry, %entry
  %12 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1075
  %13 = load i32, i32* %sign, align 4, !dbg !1076
  call void @get_inf(%struct.real_value* %12, i32 %13), !dbg !1077
  store i8 0, i8* %retval, align 1, !dbg !1078
  br label %return, !dbg !1078

sw.bb10:                                          ; preds = %entry, %entry, %entry, %entry
  %14 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1079
  %15 = load %struct.real_value*, %struct.real_value** %b.addr, align 8, !dbg !1080
  %16 = bitcast %struct.real_value* %14 to i8*, !dbg !1081
  %17 = bitcast %struct.real_value* %15 to i8*, !dbg !1081
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 %17, i64 32, i1 false), !dbg !1081
  %18 = load i32, i32* %sign, align 4, !dbg !1082
  %19 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1083
  %20 = bitcast %struct.real_value* %19 to i32*, !dbg !1084
  %bf.load11 = load i32, i32* %20, align 8, !dbg !1085
  %bf.value = and i32 %18, 1, !dbg !1085
  %bf.shl = shl i32 %bf.value, 3, !dbg !1085
  %bf.clear12 = and i32 %bf.load11, -9, !dbg !1085
  %bf.set = or i32 %bf.clear12, %bf.shl, !dbg !1085
  store i32 %bf.set, i32* %20, align 8, !dbg !1085
  store i8 0, i8* %retval, align 1, !dbg !1086
  br label %return, !dbg !1086

sw.bb13:                                          ; preds = %entry, %entry, %entry
  %21 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1087
  %22 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !1088
  %23 = bitcast %struct.real_value* %21 to i8*, !dbg !1089
  %24 = bitcast %struct.real_value* %22 to i8*, !dbg !1089
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %23, i8* align 8 %24, i64 32, i1 false), !dbg !1089
  %25 = load i32, i32* %sign, align 4, !dbg !1090
  %26 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1091
  %27 = bitcast %struct.real_value* %26 to i32*, !dbg !1092
  %bf.load14 = load i32, i32* %27, align 8, !dbg !1093
  %bf.value15 = and i32 %25, 1, !dbg !1093
  %bf.shl16 = shl i32 %bf.value15, 3, !dbg !1093
  %bf.clear17 = and i32 %bf.load14, -9, !dbg !1093
  %bf.set18 = or i32 %bf.clear17, %bf.shl16, !dbg !1093
  store i32 %bf.set18, i32* %27, align 8, !dbg !1093
  store i8 0, i8* %retval, align 1, !dbg !1094
  br label %return, !dbg !1094

sw.bb19:                                          ; preds = %entry
  %28 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1095
  %29 = load i32, i32* %sign, align 4, !dbg !1096
  call void @get_inf(%struct.real_value* %28, i32 %29), !dbg !1097
  store i8 0, i8* %retval, align 1, !dbg !1098
  br label %return, !dbg !1098

sw.bb20:                                          ; preds = %entry
  br label %sw.epilog, !dbg !1099

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 858, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !1100
  br label %sw.epilog, !dbg !1101

sw.epilog:                                        ; preds = %sw.default, %sw.bb20
  %30 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1102
  %31 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !1104
  %cmp = icmp eq %struct.real_value* %30, %31, !dbg !1105
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !1106

lor.lhs.false:                                    ; preds = %sw.epilog
  %32 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1107
  %33 = load %struct.real_value*, %struct.real_value** %b.addr, align 8, !dbg !1108
  %cmp21 = icmp eq %struct.real_value* %32, %33, !dbg !1109
  br i1 %cmp21, label %if.then, label %if.else, !dbg !1110

if.then:                                          ; preds = %lor.lhs.false, %sw.epilog
  store %struct.real_value* %t, %struct.real_value** %rr, align 8, !dbg !1111
  br label %if.end, !dbg !1112

if.else:                                          ; preds = %lor.lhs.false
  %34 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1113
  store %struct.real_value* %34, %struct.real_value** %rr, align 8, !dbg !1114
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %35 = load %struct.real_value*, %struct.real_value** %rr, align 8, !dbg !1115
  call void @get_zero(%struct.real_value* %35, i32 0), !dbg !1116
  %36 = load %struct.real_value*, %struct.real_value** %rr, align 8, !dbg !1117
  %37 = bitcast %struct.real_value* %36 to i32*, !dbg !1118
  %bf.load22 = load i32, i32* %37, align 8, !dbg !1119
  %bf.clear23 = and i32 %bf.load22, -4, !dbg !1119
  %bf.set24 = or i32 %bf.clear23, 1, !dbg !1119
  store i32 %bf.set24, i32* %37, align 8, !dbg !1119
  %38 = load i32, i32* %sign, align 4, !dbg !1120
  %39 = load %struct.real_value*, %struct.real_value** %rr, align 8, !dbg !1121
  %40 = bitcast %struct.real_value* %39 to i32*, !dbg !1122
  %bf.load25 = load i32, i32* %40, align 8, !dbg !1123
  %bf.value26 = and i32 %38, 1, !dbg !1123
  %bf.shl27 = shl i32 %bf.value26, 3, !dbg !1123
  %bf.clear28 = and i32 %bf.load25, -9, !dbg !1123
  %bf.set29 = or i32 %bf.clear28, %bf.shl27, !dbg !1123
  store i32 %bf.set29, i32* %40, align 8, !dbg !1123
  %41 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !1124
  %42 = bitcast %struct.real_value* %41 to i32*, !dbg !1124
  %bf.load30 = load i32, i32* %42, align 8, !dbg !1124
  %bf.lshr31 = lshr i32 %bf.load30, 6, !dbg !1124
  %xor32 = xor i32 %bf.lshr31, 33554432, !dbg !1124
  %sub = sub nsw i32 %xor32, 33554432, !dbg !1124
  %43 = load %struct.real_value*, %struct.real_value** %b.addr, align 8, !dbg !1125
  %44 = bitcast %struct.real_value* %43 to i32*, !dbg !1125
  %bf.load33 = load i32, i32* %44, align 8, !dbg !1125
  %bf.lshr34 = lshr i32 %bf.load33, 6, !dbg !1125
  %xor35 = xor i32 %bf.lshr34, 33554432, !dbg !1125
  %sub36 = sub nsw i32 %xor35, 33554432, !dbg !1125
  %sub37 = sub nsw i32 %sub, %sub36, !dbg !1126
  %add = add nsw i32 %sub37, 1, !dbg !1127
  store i32 %add, i32* %exp, align 4, !dbg !1128
  %45 = load i32, i32* %exp, align 4, !dbg !1129
  %cmp38 = icmp sgt i32 %45, 33554431, !dbg !1131
  br i1 %cmp38, label %if.then39, label %if.end40, !dbg !1132

if.then39:                                        ; preds = %if.end
  %46 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1133
  %47 = load i32, i32* %sign, align 4, !dbg !1135
  call void @get_inf(%struct.real_value* %46, i32 %47), !dbg !1136
  store i8 1, i8* %retval, align 1, !dbg !1137
  br label %return, !dbg !1137

if.end40:                                         ; preds = %if.end
  %48 = load i32, i32* %exp, align 4, !dbg !1138
  %cmp41 = icmp slt i32 %48, -33554431, !dbg !1140
  br i1 %cmp41, label %if.then42, label %if.end43, !dbg !1141

if.then42:                                        ; preds = %if.end40
  %49 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1142
  %50 = load i32, i32* %sign, align 4, !dbg !1144
  call void @get_zero(%struct.real_value* %49, i32 %50), !dbg !1145
  store i8 1, i8* %retval, align 1, !dbg !1146
  br label %return, !dbg !1146

if.end43:                                         ; preds = %if.end40
  %51 = load i32, i32* %exp, align 4, !dbg !1147
  %and = and i32 %51, 67108863, !dbg !1147
  %52 = load %struct.real_value*, %struct.real_value** %rr, align 8, !dbg !1147
  %53 = bitcast %struct.real_value* %52 to i32*, !dbg !1147
  %bf.load44 = load i32, i32* %53, align 8, !dbg !1147
  %bf.value45 = and i32 %and, 67108863, !dbg !1147
  %bf.shl46 = shl i32 %bf.value45, 6, !dbg !1147
  %bf.clear47 = and i32 %bf.load44, 63, !dbg !1147
  %bf.set48 = or i32 %bf.clear47, %bf.shl46, !dbg !1147
  store i32 %bf.set48, i32* %53, align 8, !dbg !1147
  %54 = load %struct.real_value*, %struct.real_value** %rr, align 8, !dbg !1148
  %55 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !1149
  %56 = load %struct.real_value*, %struct.real_value** %b.addr, align 8, !dbg !1150
  %call = call zeroext i8 @div_significands(%struct.real_value* %54, %struct.real_value* %55, %struct.real_value* %56), !dbg !1151
  store i8 %call, i8* %inexact, align 1, !dbg !1152
  %57 = load %struct.real_value*, %struct.real_value** %rr, align 8, !dbg !1153
  call void @normalize(%struct.real_value* %57), !dbg !1154
  %58 = load i8, i8* %inexact, align 1, !dbg !1155
  %conv = zext i8 %58 to i64, !dbg !1155
  %59 = load %struct.real_value*, %struct.real_value** %rr, align 8, !dbg !1156
  %sig = getelementptr inbounds %struct.real_value, %struct.real_value* %59, i32 0, i32 1, !dbg !1157
  %arrayidx = getelementptr inbounds [3 x i64], [3 x i64]* %sig, i64 0, i64 0, !dbg !1156
  %60 = load i64, i64* %arrayidx, align 8, !dbg !1158
  %or49 = or i64 %60, %conv, !dbg !1158
  store i64 %or49, i64* %arrayidx, align 8, !dbg !1158
  %61 = load %struct.real_value*, %struct.real_value** %rr, align 8, !dbg !1159
  %62 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1161
  %cmp50 = icmp ne %struct.real_value* %61, %62, !dbg !1162
  br i1 %cmp50, label %if.then52, label %if.end53, !dbg !1163

if.then52:                                        ; preds = %if.end43
  %63 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1164
  %64 = bitcast %struct.real_value* %63 to i8*, !dbg !1165
  %65 = bitcast %struct.real_value* %t to i8*, !dbg !1165
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %64, i8* align 8 %65, i64 32, i1 false), !dbg !1165
  br label %if.end53, !dbg !1166

if.end53:                                         ; preds = %if.then52, %if.end43
  %66 = load i8, i8* %inexact, align 1, !dbg !1167
  store i8 %66, i8* %retval, align 1, !dbg !1168
  br label %return, !dbg !1168

return:                                           ; preds = %if.end53, %if.then42, %if.then39, %sw.bb19, %sw.bb13, %sw.bb10, %sw.bb9, %sw.bb8, %sw.bb
  %67 = load i8, i8* %retval, align 1, !dbg !1169
  ret i8 %67, !dbg !1169
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @do_compare(%struct.real_value* %a, %struct.real_value* %b, i32 %nan_result) #0 !dbg !1170 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca %struct.real_value*, align 8
  %b.addr = alloca %struct.real_value*, align 8
  %nan_result.addr = alloca i32, align 4
  %ret = alloca i32, align 4
  store %struct.real_value* %a, %struct.real_value** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %a.addr, metadata !1173, metadata !DIExpression()), !dbg !1174
  store %struct.real_value* %b, %struct.real_value** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %b.addr, metadata !1175, metadata !DIExpression()), !dbg !1176
  store i32 %nan_result, i32* %nan_result.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nan_result.addr, metadata !1177, metadata !DIExpression()), !dbg !1178
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !1179, metadata !DIExpression()), !dbg !1180
  %0 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !1181
  %1 = bitcast %struct.real_value* %0 to i32*, !dbg !1181
  %bf.load = load i32, i32* %1, align 8, !dbg !1181
  %bf.clear = and i32 %bf.load, 3, !dbg !1181
  %shl = shl i32 %bf.clear, 2, !dbg !1181
  %2 = load %struct.real_value*, %struct.real_value** %b.addr, align 8, !dbg !1181
  %3 = bitcast %struct.real_value* %2 to i32*, !dbg !1181
  %bf.load1 = load i32, i32* %3, align 8, !dbg !1181
  %bf.clear2 = and i32 %bf.load1, 3, !dbg !1181
  %or = or i32 %shl, %bf.clear2, !dbg !1181
  switch i32 %or, label %sw.default [
    i32 0, label %sw.bb
    i32 4, label %sw.bb3
    i32 8, label %sw.bb6
    i32 9, label %sw.bb6
    i32 10, label %sw.bb11
    i32 1, label %sw.bb20
    i32 2, label %sw.bb28
    i32 6, label %sw.bb28
    i32 3, label %sw.bb34
    i32 7, label %sw.bb34
    i32 11, label %sw.bb34
    i32 15, label %sw.bb34
    i32 12, label %sw.bb34
    i32 13, label %sw.bb34
    i32 14, label %sw.bb34
    i32 5, label %sw.bb35
  ], !dbg !1182

sw.bb:                                            ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !1183
  br label %return, !dbg !1183

sw.bb3:                                           ; preds = %entry
  %4 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !1185
  %5 = bitcast %struct.real_value* %4 to i32*, !dbg !1187
  %bf.load4 = load i32, i32* %5, align 8, !dbg !1187
  %bf.lshr = lshr i32 %bf.load4, 2, !dbg !1187
  %bf.clear5 = and i32 %bf.lshr, 1, !dbg !1187
  %tobool = icmp ne i32 %bf.clear5, 0, !dbg !1185
  br i1 %tobool, label %if.then, label %if.end, !dbg !1188

if.then:                                          ; preds = %sw.bb3
  %6 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !1189
  %7 = load %struct.real_value*, %struct.real_value** %b.addr, align 8, !dbg !1190
  %8 = load i32, i32* %nan_result.addr, align 4, !dbg !1191
  %call = call i32 @decimal_do_compare(%struct.real_value* %6, %struct.real_value* %7, i32 %8), !dbg !1192
  store i32 %call, i32* %retval, align 4, !dbg !1193
  br label %return, !dbg !1193

if.end:                                           ; preds = %sw.bb3
  br label %sw.bb6, !dbg !1187

sw.bb6:                                           ; preds = %entry, %entry, %if.end
  %9 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !1194
  %10 = bitcast %struct.real_value* %9 to i32*, !dbg !1195
  %bf.load7 = load i32, i32* %10, align 8, !dbg !1195
  %bf.lshr8 = lshr i32 %bf.load7, 3, !dbg !1195
  %bf.clear9 = and i32 %bf.lshr8, 1, !dbg !1195
  %tobool10 = icmp ne i32 %bf.clear9, 0, !dbg !1194
  %11 = zext i1 %tobool10 to i64, !dbg !1194
  %cond = select i1 %tobool10, i32 -1, i32 1, !dbg !1194
  store i32 %cond, i32* %retval, align 4, !dbg !1196
  br label %return, !dbg !1196

sw.bb11:                                          ; preds = %entry
  %12 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !1197
  %13 = bitcast %struct.real_value* %12 to i32*, !dbg !1198
  %bf.load12 = load i32, i32* %13, align 8, !dbg !1198
  %bf.lshr13 = lshr i32 %bf.load12, 3, !dbg !1198
  %bf.clear14 = and i32 %bf.lshr13, 1, !dbg !1198
  %sub = sub nsw i32 0, %bf.clear14, !dbg !1199
  %14 = load %struct.real_value*, %struct.real_value** %b.addr, align 8, !dbg !1200
  %15 = bitcast %struct.real_value* %14 to i32*, !dbg !1201
  %bf.load15 = load i32, i32* %15, align 8, !dbg !1201
  %bf.lshr16 = lshr i32 %bf.load15, 3, !dbg !1201
  %bf.clear17 = and i32 %bf.lshr16, 1, !dbg !1201
  %sub18 = sub nsw i32 0, %bf.clear17, !dbg !1202
  %sub19 = sub nsw i32 %sub, %sub18, !dbg !1203
  store i32 %sub19, i32* %retval, align 4, !dbg !1204
  br label %return, !dbg !1204

sw.bb20:                                          ; preds = %entry
  %16 = load %struct.real_value*, %struct.real_value** %b.addr, align 8, !dbg !1205
  %17 = bitcast %struct.real_value* %16 to i32*, !dbg !1207
  %bf.load21 = load i32, i32* %17, align 8, !dbg !1207
  %bf.lshr22 = lshr i32 %bf.load21, 2, !dbg !1207
  %bf.clear23 = and i32 %bf.lshr22, 1, !dbg !1207
  %tobool24 = icmp ne i32 %bf.clear23, 0, !dbg !1205
  br i1 %tobool24, label %if.then25, label %if.end27, !dbg !1208

if.then25:                                        ; preds = %sw.bb20
  %18 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !1209
  %19 = load %struct.real_value*, %struct.real_value** %b.addr, align 8, !dbg !1210
  %20 = load i32, i32* %nan_result.addr, align 4, !dbg !1211
  %call26 = call i32 @decimal_do_compare(%struct.real_value* %18, %struct.real_value* %19, i32 %20), !dbg !1212
  store i32 %call26, i32* %retval, align 4, !dbg !1213
  br label %return, !dbg !1213

if.end27:                                         ; preds = %sw.bb20
  br label %sw.bb28, !dbg !1207

sw.bb28:                                          ; preds = %entry, %entry, %if.end27
  %21 = load %struct.real_value*, %struct.real_value** %b.addr, align 8, !dbg !1214
  %22 = bitcast %struct.real_value* %21 to i32*, !dbg !1215
  %bf.load29 = load i32, i32* %22, align 8, !dbg !1215
  %bf.lshr30 = lshr i32 %bf.load29, 3, !dbg !1215
  %bf.clear31 = and i32 %bf.lshr30, 1, !dbg !1215
  %tobool32 = icmp ne i32 %bf.clear31, 0, !dbg !1214
  %23 = zext i1 %tobool32 to i64, !dbg !1214
  %cond33 = select i1 %tobool32, i32 1, i32 -1, !dbg !1214
  store i32 %cond33, i32* %retval, align 4, !dbg !1216
  br label %return, !dbg !1216

sw.bb34:                                          ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry
  %24 = load i32, i32* %nan_result.addr, align 4, !dbg !1217
  store i32 %24, i32* %retval, align 4, !dbg !1218
  br label %return, !dbg !1218

sw.bb35:                                          ; preds = %entry
  br label %sw.epilog, !dbg !1219

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 945, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !1220
  br label %sw.epilog, !dbg !1221

sw.epilog:                                        ; preds = %sw.default, %sw.bb35
  %25 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !1222
  %26 = bitcast %struct.real_value* %25 to i32*, !dbg !1224
  %bf.load36 = load i32, i32* %26, align 8, !dbg !1224
  %bf.lshr37 = lshr i32 %bf.load36, 3, !dbg !1224
  %bf.clear38 = and i32 %bf.lshr37, 1, !dbg !1224
  %27 = load %struct.real_value*, %struct.real_value** %b.addr, align 8, !dbg !1225
  %28 = bitcast %struct.real_value* %27 to i32*, !dbg !1226
  %bf.load39 = load i32, i32* %28, align 8, !dbg !1226
  %bf.lshr40 = lshr i32 %bf.load39, 3, !dbg !1226
  %bf.clear41 = and i32 %bf.lshr40, 1, !dbg !1226
  %cmp = icmp ne i32 %bf.clear38, %bf.clear41, !dbg !1227
  br i1 %cmp, label %if.then42, label %if.end52, !dbg !1228

if.then42:                                        ; preds = %sw.epilog
  %29 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !1229
  %30 = bitcast %struct.real_value* %29 to i32*, !dbg !1230
  %bf.load43 = load i32, i32* %30, align 8, !dbg !1230
  %bf.lshr44 = lshr i32 %bf.load43, 3, !dbg !1230
  %bf.clear45 = and i32 %bf.lshr44, 1, !dbg !1230
  %sub46 = sub nsw i32 0, %bf.clear45, !dbg !1231
  %31 = load %struct.real_value*, %struct.real_value** %b.addr, align 8, !dbg !1232
  %32 = bitcast %struct.real_value* %31 to i32*, !dbg !1233
  %bf.load47 = load i32, i32* %32, align 8, !dbg !1233
  %bf.lshr48 = lshr i32 %bf.load47, 3, !dbg !1233
  %bf.clear49 = and i32 %bf.lshr48, 1, !dbg !1233
  %sub50 = sub nsw i32 0, %bf.clear49, !dbg !1234
  %sub51 = sub nsw i32 %sub46, %sub50, !dbg !1235
  store i32 %sub51, i32* %retval, align 4, !dbg !1236
  br label %return, !dbg !1236

if.end52:                                         ; preds = %sw.epilog
  %33 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !1237
  %34 = bitcast %struct.real_value* %33 to i32*, !dbg !1239
  %bf.load53 = load i32, i32* %34, align 8, !dbg !1239
  %bf.lshr54 = lshr i32 %bf.load53, 2, !dbg !1239
  %bf.clear55 = and i32 %bf.lshr54, 1, !dbg !1239
  %tobool56 = icmp ne i32 %bf.clear55, 0, !dbg !1237
  br i1 %tobool56, label %if.then61, label %lor.lhs.false, !dbg !1240

lor.lhs.false:                                    ; preds = %if.end52
  %35 = load %struct.real_value*, %struct.real_value** %b.addr, align 8, !dbg !1241
  %36 = bitcast %struct.real_value* %35 to i32*, !dbg !1242
  %bf.load57 = load i32, i32* %36, align 8, !dbg !1242
  %bf.lshr58 = lshr i32 %bf.load57, 2, !dbg !1242
  %bf.clear59 = and i32 %bf.lshr58, 1, !dbg !1242
  %tobool60 = icmp ne i32 %bf.clear59, 0, !dbg !1241
  br i1 %tobool60, label %if.then61, label %if.end63, !dbg !1243

if.then61:                                        ; preds = %lor.lhs.false, %if.end52
  %37 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !1244
  %38 = load %struct.real_value*, %struct.real_value** %b.addr, align 8, !dbg !1245
  %39 = load i32, i32* %nan_result.addr, align 4, !dbg !1246
  %call62 = call i32 @decimal_do_compare(%struct.real_value* %37, %struct.real_value* %38, i32 %39), !dbg !1247
  store i32 %call62, i32* %retval, align 4, !dbg !1248
  br label %return, !dbg !1248

if.end63:                                         ; preds = %lor.lhs.false
  %40 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !1249
  %41 = bitcast %struct.real_value* %40 to i32*, !dbg !1249
  %bf.load64 = load i32, i32* %41, align 8, !dbg !1249
  %bf.lshr65 = lshr i32 %bf.load64, 6, !dbg !1249
  %xor = xor i32 %bf.lshr65, 33554432, !dbg !1249
  %sub66 = sub nsw i32 %xor, 33554432, !dbg !1249
  %42 = load %struct.real_value*, %struct.real_value** %b.addr, align 8, !dbg !1251
  %43 = bitcast %struct.real_value* %42 to i32*, !dbg !1251
  %bf.load67 = load i32, i32* %43, align 8, !dbg !1251
  %bf.lshr68 = lshr i32 %bf.load67, 6, !dbg !1251
  %xor69 = xor i32 %bf.lshr68, 33554432, !dbg !1251
  %sub70 = sub nsw i32 %xor69, 33554432, !dbg !1251
  %cmp71 = icmp sgt i32 %sub66, %sub70, !dbg !1252
  br i1 %cmp71, label %if.then72, label %if.else, !dbg !1253

if.then72:                                        ; preds = %if.end63
  store i32 1, i32* %ret, align 4, !dbg !1254
  br label %if.end86, !dbg !1255

if.else:                                          ; preds = %if.end63
  %44 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !1256
  %45 = bitcast %struct.real_value* %44 to i32*, !dbg !1256
  %bf.load73 = load i32, i32* %45, align 8, !dbg !1256
  %bf.lshr74 = lshr i32 %bf.load73, 6, !dbg !1256
  %xor75 = xor i32 %bf.lshr74, 33554432, !dbg !1256
  %sub76 = sub nsw i32 %xor75, 33554432, !dbg !1256
  %46 = load %struct.real_value*, %struct.real_value** %b.addr, align 8, !dbg !1258
  %47 = bitcast %struct.real_value* %46 to i32*, !dbg !1258
  %bf.load77 = load i32, i32* %47, align 8, !dbg !1258
  %bf.lshr78 = lshr i32 %bf.load77, 6, !dbg !1258
  %xor79 = xor i32 %bf.lshr78, 33554432, !dbg !1258
  %sub80 = sub nsw i32 %xor79, 33554432, !dbg !1258
  %cmp81 = icmp slt i32 %sub76, %sub80, !dbg !1259
  br i1 %cmp81, label %if.then82, label %if.else83, !dbg !1260

if.then82:                                        ; preds = %if.else
  store i32 -1, i32* %ret, align 4, !dbg !1261
  br label %if.end85, !dbg !1262

if.else83:                                        ; preds = %if.else
  %48 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !1263
  %49 = load %struct.real_value*, %struct.real_value** %b.addr, align 8, !dbg !1264
  %call84 = call i32 @cmp_significands(%struct.real_value* %48, %struct.real_value* %49), !dbg !1265
  store i32 %call84, i32* %ret, align 4, !dbg !1266
  br label %if.end85

if.end85:                                         ; preds = %if.else83, %if.then82
  br label %if.end86

if.end86:                                         ; preds = %if.end85, %if.then72
  %50 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !1267
  %51 = bitcast %struct.real_value* %50 to i32*, !dbg !1268
  %bf.load87 = load i32, i32* %51, align 8, !dbg !1268
  %bf.lshr88 = lshr i32 %bf.load87, 3, !dbg !1268
  %bf.clear89 = and i32 %bf.lshr88, 1, !dbg !1268
  %tobool90 = icmp ne i32 %bf.clear89, 0, !dbg !1267
  br i1 %tobool90, label %cond.true, label %cond.false, !dbg !1267

cond.true:                                        ; preds = %if.end86
  %52 = load i32, i32* %ret, align 4, !dbg !1269
  %sub91 = sub nsw i32 0, %52, !dbg !1270
  br label %cond.end, !dbg !1267

cond.false:                                       ; preds = %if.end86
  %53 = load i32, i32* %ret, align 4, !dbg !1271
  br label %cond.end, !dbg !1267

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond92 = phi i32 [ %sub91, %cond.true ], [ %53, %cond.false ], !dbg !1267
  store i32 %cond92, i32* %retval, align 4, !dbg !1272
  br label %return, !dbg !1272

return:                                           ; preds = %cond.end, %if.then61, %if.then42, %sw.bb34, %sw.bb28, %if.then25, %sw.bb11, %sw.bb6, %if.then, %sw.bb
  %54 = load i32, i32* %retval, align 4, !dbg !1273
  ret i32 %54, !dbg !1273
}

; Function Attrs: noinline nounwind uwtable
define internal void @do_fix_trunc(%struct.real_value* %r, %struct.real_value* %a) #0 !dbg !1274 {
entry:
  %r.addr = alloca %struct.real_value*, align 8
  %a.addr = alloca %struct.real_value*, align 8
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !1277, metadata !DIExpression()), !dbg !1278
  store %struct.real_value* %a, %struct.real_value** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %a.addr, metadata !1279, metadata !DIExpression()), !dbg !1280
  %0 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1281
  %1 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !1282
  %2 = bitcast %struct.real_value* %0 to i8*, !dbg !1283
  %3 = bitcast %struct.real_value* %1 to i8*, !dbg !1283
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2, i8* align 8 %3, i64 32, i1 false), !dbg !1283
  %4 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1284
  %5 = bitcast %struct.real_value* %4 to i32*, !dbg !1285
  %bf.load = load i32, i32* %5, align 8, !dbg !1285
  %bf.clear = and i32 %bf.load, 3, !dbg !1285
  switch i32 %bf.clear, label %sw.default [
    i32 0, label %sw.bb
    i32 2, label %sw.bb
    i32 3, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !1286

sw.bb:                                            ; preds = %entry, %entry, %entry
  br label %sw.epilog, !dbg !1287

sw.bb1:                                           ; preds = %entry
  %6 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1289
  %7 = bitcast %struct.real_value* %6 to i32*, !dbg !1291
  %bf.load2 = load i32, i32* %7, align 8, !dbg !1291
  %bf.lshr = lshr i32 %bf.load2, 2, !dbg !1291
  %bf.clear3 = and i32 %bf.lshr, 1, !dbg !1291
  %tobool = icmp ne i32 %bf.clear3, 0, !dbg !1289
  br i1 %tobool, label %if.then, label %if.end, !dbg !1292

if.then:                                          ; preds = %sw.bb1
  %8 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1293
  %9 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !1295
  call void @decimal_do_fix_trunc(%struct.real_value* %8, %struct.real_value* %9), !dbg !1296
  br label %sw.epilog, !dbg !1297

if.end:                                           ; preds = %sw.bb1
  %10 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1298
  %11 = bitcast %struct.real_value* %10 to i32*, !dbg !1298
  %bf.load4 = load i32, i32* %11, align 8, !dbg !1298
  %bf.lshr5 = lshr i32 %bf.load4, 6, !dbg !1298
  %xor = xor i32 %bf.lshr5, 33554432, !dbg !1298
  %sub = sub nsw i32 %xor, 33554432, !dbg !1298
  %cmp = icmp sle i32 %sub, 0, !dbg !1300
  br i1 %cmp, label %if.then6, label %if.else, !dbg !1301

if.then6:                                         ; preds = %if.end
  %12 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1302
  %13 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1303
  %14 = bitcast %struct.real_value* %13 to i32*, !dbg !1304
  %bf.load7 = load i32, i32* %14, align 8, !dbg !1304
  %bf.lshr8 = lshr i32 %bf.load7, 3, !dbg !1304
  %bf.clear9 = and i32 %bf.lshr8, 1, !dbg !1304
  call void @get_zero(%struct.real_value* %12, i32 %bf.clear9), !dbg !1305
  br label %if.end22, !dbg !1305

if.else:                                          ; preds = %if.end
  %15 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1306
  %16 = bitcast %struct.real_value* %15 to i32*, !dbg !1306
  %bf.load10 = load i32, i32* %16, align 8, !dbg !1306
  %bf.lshr11 = lshr i32 %bf.load10, 6, !dbg !1306
  %xor12 = xor i32 %bf.lshr11, 33554432, !dbg !1306
  %sub13 = sub nsw i32 %xor12, 33554432, !dbg !1306
  %cmp14 = icmp slt i32 %sub13, 192, !dbg !1308
  br i1 %cmp14, label %if.then15, label %if.end21, !dbg !1309

if.then15:                                        ; preds = %if.else
  %17 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1310
  %18 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1311
  %19 = bitcast %struct.real_value* %18 to i32*, !dbg !1311
  %bf.load16 = load i32, i32* %19, align 8, !dbg !1311
  %bf.lshr17 = lshr i32 %bf.load16, 6, !dbg !1311
  %xor18 = xor i32 %bf.lshr17, 33554432, !dbg !1311
  %sub19 = sub nsw i32 %xor18, 33554432, !dbg !1311
  %sub20 = sub nsw i32 192, %sub19, !dbg !1312
  call void @clear_significand_below(%struct.real_value* %17, i32 %sub20), !dbg !1313
  br label %if.end21, !dbg !1313

if.end21:                                         ; preds = %if.then15, %if.else
  br label %if.end22

if.end22:                                         ; preds = %if.end21, %if.then6
  br label %sw.epilog, !dbg !1314

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 991, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !1315
  br label %sw.epilog, !dbg !1316

sw.epilog:                                        ; preds = %if.then, %sw.default, %if.end22, %sw.bb
  ret void, !dbg !1317
}

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @real_arithmetic2(%struct.real_value* noalias sret %agg.result, i32 %icode, %struct.real_value* %op0, %struct.real_value* %op1) #0 !dbg !1318 {
entry:
  %icode.addr = alloca i32, align 4
  %op0.addr = alloca %struct.real_value*, align 8
  %op1.addr = alloca %struct.real_value*, align 8
  store i32 %icode, i32* %icode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %icode.addr, metadata !1321, metadata !DIExpression()), !dbg !1322
  store %struct.real_value* %op0, %struct.real_value** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %op0.addr, metadata !1323, metadata !DIExpression()), !dbg !1324
  store %struct.real_value* %op1, %struct.real_value** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %op1.addr, metadata !1325, metadata !DIExpression()), !dbg !1326
  call void @llvm.dbg.declare(metadata %struct.real_value* %agg.result, metadata !1327, metadata !DIExpression()), !dbg !1328
  %0 = load i32, i32* %icode.addr, align 4, !dbg !1329
  %1 = load %struct.real_value*, %struct.real_value** %op0.addr, align 8, !dbg !1330
  %2 = load %struct.real_value*, %struct.real_value** %op1.addr, align 8, !dbg !1331
  %call = call zeroext i8 @real_arithmetic(%struct.real_value* %agg.result, i32 %0, %struct.real_value* %1, %struct.real_value* %2), !dbg !1332
  ret void, !dbg !1333
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @real_compare(i32 %icode, %struct.real_value* %op0, %struct.real_value* %op1) #0 !dbg !1334 {
entry:
  %retval = alloca i8, align 1
  %icode.addr = alloca i32, align 4
  %op0.addr = alloca %struct.real_value*, align 8
  %op1.addr = alloca %struct.real_value*, align 8
  %code = alloca i32, align 4
  store i32 %icode, i32* %icode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %icode.addr, metadata !1337, metadata !DIExpression()), !dbg !1338
  store %struct.real_value* %op0, %struct.real_value** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %op0.addr, metadata !1339, metadata !DIExpression()), !dbg !1340
  store %struct.real_value* %op1, %struct.real_value** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %op1.addr, metadata !1341, metadata !DIExpression()), !dbg !1342
  call void @llvm.dbg.declare(metadata i32* %code, metadata !1343, metadata !DIExpression()), !dbg !1344
  %0 = load i32, i32* %icode.addr, align 4, !dbg !1345
  store i32 %0, i32* %code, align 4, !dbg !1344
  %1 = load i32, i32* %code, align 4, !dbg !1346
  switch i32 %1, label %sw.default [
    i32 97, label %sw.bb
    i32 98, label %sw.bb2
    i32 99, label %sw.bb7
    i32 100, label %sw.bb12
    i32 101, label %sw.bb17
    i32 102, label %sw.bb22
    i32 103, label %sw.bb27
    i32 104, label %sw.bb35
    i32 105, label %sw.bb45
    i32 106, label %sw.bb50
    i32 107, label %sw.bb55
    i32 108, label %sw.bb60
    i32 109, label %sw.bb65
    i32 110, label %sw.bb70
  ], !dbg !1347

sw.bb:                                            ; preds = %entry
  %2 = load %struct.real_value*, %struct.real_value** %op0.addr, align 8, !dbg !1348
  %3 = load %struct.real_value*, %struct.real_value** %op1.addr, align 8, !dbg !1350
  %call = call i32 @do_compare(%struct.real_value* %2, %struct.real_value* %3, i32 1), !dbg !1351
  %cmp = icmp slt i32 %call, 0, !dbg !1352
  %conv = zext i1 %cmp to i32, !dbg !1352
  %conv1 = trunc i32 %conv to i8, !dbg !1351
  store i8 %conv1, i8* %retval, align 1, !dbg !1353
  br label %return, !dbg !1353

sw.bb2:                                           ; preds = %entry
  %4 = load %struct.real_value*, %struct.real_value** %op0.addr, align 8, !dbg !1354
  %5 = load %struct.real_value*, %struct.real_value** %op1.addr, align 8, !dbg !1355
  %call3 = call i32 @do_compare(%struct.real_value* %4, %struct.real_value* %5, i32 1), !dbg !1356
  %cmp4 = icmp sle i32 %call3, 0, !dbg !1357
  %conv5 = zext i1 %cmp4 to i32, !dbg !1357
  %conv6 = trunc i32 %conv5 to i8, !dbg !1356
  store i8 %conv6, i8* %retval, align 1, !dbg !1358
  br label %return, !dbg !1358

sw.bb7:                                           ; preds = %entry
  %6 = load %struct.real_value*, %struct.real_value** %op0.addr, align 8, !dbg !1359
  %7 = load %struct.real_value*, %struct.real_value** %op1.addr, align 8, !dbg !1360
  %call8 = call i32 @do_compare(%struct.real_value* %6, %struct.real_value* %7, i32 -1), !dbg !1361
  %cmp9 = icmp sgt i32 %call8, 0, !dbg !1362
  %conv10 = zext i1 %cmp9 to i32, !dbg !1362
  %conv11 = trunc i32 %conv10 to i8, !dbg !1361
  store i8 %conv11, i8* %retval, align 1, !dbg !1363
  br label %return, !dbg !1363

sw.bb12:                                          ; preds = %entry
  %8 = load %struct.real_value*, %struct.real_value** %op0.addr, align 8, !dbg !1364
  %9 = load %struct.real_value*, %struct.real_value** %op1.addr, align 8, !dbg !1365
  %call13 = call i32 @do_compare(%struct.real_value* %8, %struct.real_value* %9, i32 -1), !dbg !1366
  %cmp14 = icmp sge i32 %call13, 0, !dbg !1367
  %conv15 = zext i1 %cmp14 to i32, !dbg !1367
  %conv16 = trunc i32 %conv15 to i8, !dbg !1366
  store i8 %conv16, i8* %retval, align 1, !dbg !1368
  br label %return, !dbg !1368

sw.bb17:                                          ; preds = %entry
  %10 = load %struct.real_value*, %struct.real_value** %op0.addr, align 8, !dbg !1369
  %11 = load %struct.real_value*, %struct.real_value** %op1.addr, align 8, !dbg !1370
  %call18 = call i32 @do_compare(%struct.real_value* %10, %struct.real_value* %11, i32 -1), !dbg !1371
  %cmp19 = icmp eq i32 %call18, 0, !dbg !1372
  %conv20 = zext i1 %cmp19 to i32, !dbg !1372
  %conv21 = trunc i32 %conv20 to i8, !dbg !1371
  store i8 %conv21, i8* %retval, align 1, !dbg !1373
  br label %return, !dbg !1373

sw.bb22:                                          ; preds = %entry
  %12 = load %struct.real_value*, %struct.real_value** %op0.addr, align 8, !dbg !1374
  %13 = load %struct.real_value*, %struct.real_value** %op1.addr, align 8, !dbg !1375
  %call23 = call i32 @do_compare(%struct.real_value* %12, %struct.real_value* %13, i32 -1), !dbg !1376
  %cmp24 = icmp ne i32 %call23, 0, !dbg !1377
  %conv25 = zext i1 %cmp24 to i32, !dbg !1377
  %conv26 = trunc i32 %conv25 to i8, !dbg !1376
  store i8 %conv26, i8* %retval, align 1, !dbg !1378
  br label %return, !dbg !1378

sw.bb27:                                          ; preds = %entry
  %14 = load %struct.real_value*, %struct.real_value** %op0.addr, align 8, !dbg !1379
  %15 = bitcast %struct.real_value* %14 to i32*, !dbg !1380
  %bf.load = load i32, i32* %15, align 8, !dbg !1380
  %bf.clear = and i32 %bf.load, 3, !dbg !1380
  %cmp28 = icmp eq i32 %bf.clear, 3, !dbg !1381
  br i1 %cmp28, label %lor.end, label %lor.rhs, !dbg !1382

lor.rhs:                                          ; preds = %sw.bb27
  %16 = load %struct.real_value*, %struct.real_value** %op1.addr, align 8, !dbg !1383
  %17 = bitcast %struct.real_value* %16 to i32*, !dbg !1384
  %bf.load30 = load i32, i32* %17, align 8, !dbg !1384
  %bf.clear31 = and i32 %bf.load30, 3, !dbg !1384
  %cmp32 = icmp eq i32 %bf.clear31, 3, !dbg !1385
  br label %lor.end, !dbg !1382

lor.end:                                          ; preds = %lor.rhs, %sw.bb27
  %18 = phi i1 [ true, %sw.bb27 ], [ %cmp32, %lor.rhs ]
  %lor.ext = zext i1 %18 to i32, !dbg !1382
  %conv34 = trunc i32 %lor.ext to i8, !dbg !1379
  store i8 %conv34, i8* %retval, align 1, !dbg !1386
  br label %return, !dbg !1386

sw.bb35:                                          ; preds = %entry
  %19 = load %struct.real_value*, %struct.real_value** %op0.addr, align 8, !dbg !1387
  %20 = bitcast %struct.real_value* %19 to i32*, !dbg !1388
  %bf.load36 = load i32, i32* %20, align 8, !dbg !1388
  %bf.clear37 = and i32 %bf.load36, 3, !dbg !1388
  %cmp38 = icmp ne i32 %bf.clear37, 3, !dbg !1389
  br i1 %cmp38, label %land.rhs, label %land.end, !dbg !1390

land.rhs:                                         ; preds = %sw.bb35
  %21 = load %struct.real_value*, %struct.real_value** %op1.addr, align 8, !dbg !1391
  %22 = bitcast %struct.real_value* %21 to i32*, !dbg !1392
  %bf.load40 = load i32, i32* %22, align 8, !dbg !1392
  %bf.clear41 = and i32 %bf.load40, 3, !dbg !1392
  %cmp42 = icmp ne i32 %bf.clear41, 3, !dbg !1393
  br label %land.end

land.end:                                         ; preds = %land.rhs, %sw.bb35
  %23 = phi i1 [ false, %sw.bb35 ], [ %cmp42, %land.rhs ], !dbg !1394
  %land.ext = zext i1 %23 to i32, !dbg !1390
  %conv44 = trunc i32 %land.ext to i8, !dbg !1387
  store i8 %conv44, i8* %retval, align 1, !dbg !1395
  br label %return, !dbg !1395

sw.bb45:                                          ; preds = %entry
  %24 = load %struct.real_value*, %struct.real_value** %op0.addr, align 8, !dbg !1396
  %25 = load %struct.real_value*, %struct.real_value** %op1.addr, align 8, !dbg !1397
  %call46 = call i32 @do_compare(%struct.real_value* %24, %struct.real_value* %25, i32 -1), !dbg !1398
  %cmp47 = icmp slt i32 %call46, 0, !dbg !1399
  %conv48 = zext i1 %cmp47 to i32, !dbg !1399
  %conv49 = trunc i32 %conv48 to i8, !dbg !1398
  store i8 %conv49, i8* %retval, align 1, !dbg !1400
  br label %return, !dbg !1400

sw.bb50:                                          ; preds = %entry
  %26 = load %struct.real_value*, %struct.real_value** %op0.addr, align 8, !dbg !1401
  %27 = load %struct.real_value*, %struct.real_value** %op1.addr, align 8, !dbg !1402
  %call51 = call i32 @do_compare(%struct.real_value* %26, %struct.real_value* %27, i32 -1), !dbg !1403
  %cmp52 = icmp sle i32 %call51, 0, !dbg !1404
  %conv53 = zext i1 %cmp52 to i32, !dbg !1404
  %conv54 = trunc i32 %conv53 to i8, !dbg !1403
  store i8 %conv54, i8* %retval, align 1, !dbg !1405
  br label %return, !dbg !1405

sw.bb55:                                          ; preds = %entry
  %28 = load %struct.real_value*, %struct.real_value** %op0.addr, align 8, !dbg !1406
  %29 = load %struct.real_value*, %struct.real_value** %op1.addr, align 8, !dbg !1407
  %call56 = call i32 @do_compare(%struct.real_value* %28, %struct.real_value* %29, i32 1), !dbg !1408
  %cmp57 = icmp sgt i32 %call56, 0, !dbg !1409
  %conv58 = zext i1 %cmp57 to i32, !dbg !1409
  %conv59 = trunc i32 %conv58 to i8, !dbg !1408
  store i8 %conv59, i8* %retval, align 1, !dbg !1410
  br label %return, !dbg !1410

sw.bb60:                                          ; preds = %entry
  %30 = load %struct.real_value*, %struct.real_value** %op0.addr, align 8, !dbg !1411
  %31 = load %struct.real_value*, %struct.real_value** %op1.addr, align 8, !dbg !1412
  %call61 = call i32 @do_compare(%struct.real_value* %30, %struct.real_value* %31, i32 1), !dbg !1413
  %cmp62 = icmp sge i32 %call61, 0, !dbg !1414
  %conv63 = zext i1 %cmp62 to i32, !dbg !1414
  %conv64 = trunc i32 %conv63 to i8, !dbg !1413
  store i8 %conv64, i8* %retval, align 1, !dbg !1415
  br label %return, !dbg !1415

sw.bb65:                                          ; preds = %entry
  %32 = load %struct.real_value*, %struct.real_value** %op0.addr, align 8, !dbg !1416
  %33 = load %struct.real_value*, %struct.real_value** %op1.addr, align 8, !dbg !1417
  %call66 = call i32 @do_compare(%struct.real_value* %32, %struct.real_value* %33, i32 0), !dbg !1418
  %cmp67 = icmp eq i32 %call66, 0, !dbg !1419
  %conv68 = zext i1 %cmp67 to i32, !dbg !1419
  %conv69 = trunc i32 %conv68 to i8, !dbg !1418
  store i8 %conv69, i8* %retval, align 1, !dbg !1420
  br label %return, !dbg !1420

sw.bb70:                                          ; preds = %entry
  %34 = load %struct.real_value*, %struct.real_value** %op0.addr, align 8, !dbg !1421
  %35 = load %struct.real_value*, %struct.real_value** %op1.addr, align 8, !dbg !1422
  %call71 = call i32 @do_compare(%struct.real_value* %34, %struct.real_value* %35, i32 0), !dbg !1423
  %cmp72 = icmp ne i32 %call71, 0, !dbg !1424
  %conv73 = zext i1 %cmp72 to i32, !dbg !1424
  %conv74 = trunc i32 %conv73 to i8, !dbg !1423
  store i8 %conv74, i8* %retval, align 1, !dbg !1425
  br label %return, !dbg !1425

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 1109, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !1426
  br label %sw.epilog, !dbg !1427

sw.epilog:                                        ; preds = %sw.default
  store i8 0, i8* %retval, align 1, !dbg !1428
  br label %return, !dbg !1428

return:                                           ; preds = %sw.epilog, %sw.bb70, %sw.bb65, %sw.bb60, %sw.bb55, %sw.bb50, %sw.bb45, %land.end, %lor.end, %sw.bb22, %sw.bb17, %sw.bb12, %sw.bb7, %sw.bb2, %sw.bb
  %36 = load i8, i8* %retval, align 1, !dbg !1429
  ret i8 %36, !dbg !1429
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @real_exponent(%struct.real_value* %r) #0 !dbg !1430 {
entry:
  %retval = alloca i32, align 4
  %r.addr = alloca %struct.real_value*, align 8
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !1433, metadata !DIExpression()), !dbg !1434
  %0 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1435
  %1 = bitcast %struct.real_value* %0 to i32*, !dbg !1436
  %bf.load = load i32, i32* %1, align 8, !dbg !1436
  %bf.clear = and i32 %bf.load, 3, !dbg !1436
  switch i32 %bf.clear, label %sw.default [
    i32 0, label %sw.bb
    i32 2, label %sw.bb1
    i32 3, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !1437

sw.bb:                                            ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !1438
  br label %return, !dbg !1438

sw.bb1:                                           ; preds = %entry, %entry
  store i32 2147483647, i32* %retval, align 4, !dbg !1440
  br label %return, !dbg !1440

sw.bb2:                                           ; preds = %entry
  %2 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1441
  %3 = bitcast %struct.real_value* %2 to i32*, !dbg !1441
  %bf.load3 = load i32, i32* %3, align 8, !dbg !1441
  %bf.lshr = lshr i32 %bf.load3, 6, !dbg !1441
  %xor = xor i32 %bf.lshr, 33554432, !dbg !1441
  %sub = sub nsw i32 %xor, 33554432, !dbg !1441
  store i32 %sub, i32* %retval, align 4, !dbg !1442
  br label %return, !dbg !1442

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 1131, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !1443
  br label %sw.epilog, !dbg !1444

sw.epilog:                                        ; preds = %sw.default
  store i32 0, i32* %retval, align 4, !dbg !1445
  br label %return, !dbg !1445

return:                                           ; preds = %sw.epilog, %sw.bb2, %sw.bb1, %sw.bb
  %4 = load i32, i32* %retval, align 4, !dbg !1446
  ret i32 %4, !dbg !1446
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @real_ldexp(%struct.real_value* %r, %struct.real_value* %op0, i32 %exp) #0 !dbg !1447 {
entry:
  %r.addr = alloca %struct.real_value*, align 8
  %op0.addr = alloca %struct.real_value*, align 8
  %exp.addr = alloca i32, align 4
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !1450, metadata !DIExpression()), !dbg !1451
  store %struct.real_value* %op0, %struct.real_value** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %op0.addr, metadata !1452, metadata !DIExpression()), !dbg !1453
  store i32 %exp, i32* %exp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %exp.addr, metadata !1454, metadata !DIExpression()), !dbg !1455
  %0 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1456
  %1 = load %struct.real_value*, %struct.real_value** %op0.addr, align 8, !dbg !1457
  %2 = bitcast %struct.real_value* %0 to i8*, !dbg !1458
  %3 = bitcast %struct.real_value* %1 to i8*, !dbg !1458
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2, i8* align 8 %3, i64 32, i1 false), !dbg !1458
  %4 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1459
  %5 = bitcast %struct.real_value* %4 to i32*, !dbg !1460
  %bf.load = load i32, i32* %5, align 8, !dbg !1460
  %bf.clear = and i32 %bf.load, 3, !dbg !1460
  switch i32 %bf.clear, label %sw.default [
    i32 0, label %sw.bb
    i32 2, label %sw.bb
    i32 3, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !1461

sw.bb:                                            ; preds = %entry, %entry, %entry
  br label %sw.epilog, !dbg !1462

sw.bb1:                                           ; preds = %entry
  %6 = load %struct.real_value*, %struct.real_value** %op0.addr, align 8, !dbg !1464
  %7 = bitcast %struct.real_value* %6 to i32*, !dbg !1464
  %bf.load2 = load i32, i32* %7, align 8, !dbg !1464
  %bf.lshr = lshr i32 %bf.load2, 6, !dbg !1464
  %xor = xor i32 %bf.lshr, 33554432, !dbg !1464
  %sub = sub nsw i32 %xor, 33554432, !dbg !1464
  %8 = load i32, i32* %exp.addr, align 4, !dbg !1465
  %add = add nsw i32 %8, %sub, !dbg !1465
  store i32 %add, i32* %exp.addr, align 4, !dbg !1465
  %9 = load i32, i32* %exp.addr, align 4, !dbg !1466
  %cmp = icmp sgt i32 %9, 33554431, !dbg !1468
  br i1 %cmp, label %if.then, label %if.else, !dbg !1469

if.then:                                          ; preds = %sw.bb1
  %10 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1470
  %11 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1471
  %12 = bitcast %struct.real_value* %11 to i32*, !dbg !1472
  %bf.load3 = load i32, i32* %12, align 8, !dbg !1472
  %bf.lshr4 = lshr i32 %bf.load3, 3, !dbg !1472
  %bf.clear5 = and i32 %bf.lshr4, 1, !dbg !1472
  call void @get_inf(%struct.real_value* %10, i32 %bf.clear5), !dbg !1473
  br label %if.end14, !dbg !1473

if.else:                                          ; preds = %sw.bb1
  %13 = load i32, i32* %exp.addr, align 4, !dbg !1474
  %cmp6 = icmp slt i32 %13, -33554431, !dbg !1476
  br i1 %cmp6, label %if.then7, label %if.else11, !dbg !1477

if.then7:                                         ; preds = %if.else
  %14 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1478
  %15 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1479
  %16 = bitcast %struct.real_value* %15 to i32*, !dbg !1480
  %bf.load8 = load i32, i32* %16, align 8, !dbg !1480
  %bf.lshr9 = lshr i32 %bf.load8, 3, !dbg !1480
  %bf.clear10 = and i32 %bf.lshr9, 1, !dbg !1480
  call void @get_zero(%struct.real_value* %14, i32 %bf.clear10), !dbg !1481
  br label %if.end, !dbg !1481

if.else11:                                        ; preds = %if.else
  %17 = load i32, i32* %exp.addr, align 4, !dbg !1482
  %and = and i32 %17, 67108863, !dbg !1482
  %18 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1482
  %19 = bitcast %struct.real_value* %18 to i32*, !dbg !1482
  %bf.load12 = load i32, i32* %19, align 8, !dbg !1482
  %bf.value = and i32 %and, 67108863, !dbg !1482
  %bf.shl = shl i32 %bf.value, 6, !dbg !1482
  %bf.clear13 = and i32 %bf.load12, 63, !dbg !1482
  %bf.set = or i32 %bf.clear13, %bf.shl, !dbg !1482
  store i32 %bf.set, i32* %19, align 8, !dbg !1482
  br label %if.end

if.end:                                           ; preds = %if.else11, %if.then7
  br label %if.end14

if.end14:                                         ; preds = %if.end, %if.then
  br label %sw.epilog, !dbg !1483

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 1162, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !1484
  br label %sw.epilog, !dbg !1485

sw.epilog:                                        ; preds = %sw.default, %if.end14, %sw.bb
  ret void, !dbg !1486
}

; Function Attrs: noinline nounwind uwtable
define internal void @get_inf(%struct.real_value* %r, i32 %sign) #0 !dbg !1487 {
entry:
  %r.addr = alloca %struct.real_value*, align 8
  %sign.addr = alloca i32, align 4
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !1490, metadata !DIExpression()), !dbg !1491
  store i32 %sign, i32* %sign.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %sign.addr, metadata !1492, metadata !DIExpression()), !dbg !1493
  %0 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1494
  %1 = bitcast %struct.real_value* %0 to i8*, !dbg !1495
  call void @llvm.memset.p0i8.i64(i8* align 8 %1, i8 0, i64 32, i1 false), !dbg !1495
  %2 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1496
  %3 = bitcast %struct.real_value* %2 to i32*, !dbg !1497
  %bf.load = load i32, i32* %3, align 8, !dbg !1498
  %bf.clear = and i32 %bf.load, -4, !dbg !1498
  %bf.set = or i32 %bf.clear, 2, !dbg !1498
  store i32 %bf.set, i32* %3, align 8, !dbg !1498
  %4 = load i32, i32* %sign.addr, align 4, !dbg !1499
  %5 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1500
  %6 = bitcast %struct.real_value* %5 to i32*, !dbg !1501
  %bf.load1 = load i32, i32* %6, align 8, !dbg !1502
  %bf.value = and i32 %4, 1, !dbg !1502
  %bf.shl = shl i32 %bf.value, 3, !dbg !1502
  %bf.clear2 = and i32 %bf.load1, -9, !dbg !1502
  %bf.set3 = or i32 %bf.clear2, %bf.shl, !dbg !1502
  store i32 %bf.set3, i32* %6, align 8, !dbg !1502
  ret void, !dbg !1503
}

; Function Attrs: noinline nounwind uwtable
define internal void @get_zero(%struct.real_value* %r, i32 %sign) #0 !dbg !1504 {
entry:
  %r.addr = alloca %struct.real_value*, align 8
  %sign.addr = alloca i32, align 4
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !1505, metadata !DIExpression()), !dbg !1506
  store i32 %sign, i32* %sign.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %sign.addr, metadata !1507, metadata !DIExpression()), !dbg !1508
  %0 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1509
  %1 = bitcast %struct.real_value* %0 to i8*, !dbg !1510
  call void @llvm.memset.p0i8.i64(i8* align 8 %1, i8 0, i64 32, i1 false), !dbg !1510
  %2 = load i32, i32* %sign.addr, align 4, !dbg !1511
  %3 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1512
  %4 = bitcast %struct.real_value* %3 to i32*, !dbg !1513
  %bf.load = load i32, i32* %4, align 8, !dbg !1514
  %bf.value = and i32 %2, 1, !dbg !1514
  %bf.shl = shl i32 %bf.value, 3, !dbg !1514
  %bf.clear = and i32 %bf.load, -9, !dbg !1514
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !1514
  store i32 %bf.set, i32* %4, align 8, !dbg !1514
  ret void, !dbg !1515
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @real_isinf(%struct.real_value* %r) #0 !dbg !1516 {
entry:
  %r.addr = alloca %struct.real_value*, align 8
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !1519, metadata !DIExpression()), !dbg !1520
  %0 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1521
  %1 = bitcast %struct.real_value* %0 to i32*, !dbg !1522
  %bf.load = load i32, i32* %1, align 8, !dbg !1522
  %bf.clear = and i32 %bf.load, 3, !dbg !1522
  %cmp = icmp eq i32 %bf.clear, 2, !dbg !1523
  %conv = zext i1 %cmp to i32, !dbg !1523
  %conv1 = trunc i32 %conv to i8, !dbg !1524
  ret i8 %conv1, !dbg !1525
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @real_isnan(%struct.real_value* %r) #0 !dbg !1526 {
entry:
  %r.addr = alloca %struct.real_value*, align 8
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !1527, metadata !DIExpression()), !dbg !1528
  %0 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1529
  %1 = bitcast %struct.real_value* %0 to i32*, !dbg !1530
  %bf.load = load i32, i32* %1, align 8, !dbg !1530
  %bf.clear = and i32 %bf.load, 3, !dbg !1530
  %cmp = icmp eq i32 %bf.clear, 3, !dbg !1531
  %conv = zext i1 %cmp to i32, !dbg !1531
  %conv1 = trunc i32 %conv to i8, !dbg !1532
  ret i8 %conv1, !dbg !1533
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @real_isfinite(%struct.real_value* %r) #0 !dbg !1534 {
entry:
  %r.addr = alloca %struct.real_value*, align 8
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !1535, metadata !DIExpression()), !dbg !1536
  %0 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1537
  %1 = bitcast %struct.real_value* %0 to i32*, !dbg !1538
  %bf.load = load i32, i32* %1, align 8, !dbg !1538
  %bf.clear = and i32 %bf.load, 3, !dbg !1538
  %cmp = icmp ne i32 %bf.clear, 3, !dbg !1539
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !1540

land.rhs:                                         ; preds = %entry
  %2 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1541
  %3 = bitcast %struct.real_value* %2 to i32*, !dbg !1542
  %bf.load1 = load i32, i32* %3, align 8, !dbg !1542
  %bf.clear2 = and i32 %bf.load1, 3, !dbg !1542
  %cmp3 = icmp ne i32 %bf.clear2, 2, !dbg !1543
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp3, %land.rhs ], !dbg !1544
  %land.ext = zext i1 %4 to i32, !dbg !1540
  %conv = trunc i32 %land.ext to i8, !dbg !1545
  ret i8 %conv, !dbg !1546
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @real_isneg(%struct.real_value* %r) #0 !dbg !1547 {
entry:
  %r.addr = alloca %struct.real_value*, align 8
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !1548, metadata !DIExpression()), !dbg !1549
  %0 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1550
  %1 = bitcast %struct.real_value* %0 to i32*, !dbg !1551
  %bf.load = load i32, i32* %1, align 8, !dbg !1551
  %bf.lshr = lshr i32 %bf.load, 3, !dbg !1551
  %bf.clear = and i32 %bf.lshr, 1, !dbg !1551
  %conv = trunc i32 %bf.clear to i8, !dbg !1550
  ret i8 %conv, !dbg !1552
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @real_isnegzero(%struct.real_value* %r) #0 !dbg !1553 {
entry:
  %r.addr = alloca %struct.real_value*, align 8
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !1554, metadata !DIExpression()), !dbg !1555
  %0 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1556
  %1 = bitcast %struct.real_value* %0 to i32*, !dbg !1557
  %bf.load = load i32, i32* %1, align 8, !dbg !1557
  %bf.lshr = lshr i32 %bf.load, 3, !dbg !1557
  %bf.clear = and i32 %bf.lshr, 1, !dbg !1557
  %tobool = icmp ne i32 %bf.clear, 0, !dbg !1556
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !1558

land.rhs:                                         ; preds = %entry
  %2 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1559
  %3 = bitcast %struct.real_value* %2 to i32*, !dbg !1560
  %bf.load1 = load i32, i32* %3, align 8, !dbg !1560
  %bf.clear2 = and i32 %bf.load1, 3, !dbg !1560
  %cmp = icmp eq i32 %bf.clear2, 0, !dbg !1561
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !1562
  %land.ext = zext i1 %4 to i32, !dbg !1558
  %conv = trunc i32 %land.ext to i8, !dbg !1556
  ret i8 %conv, !dbg !1563
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @real_identical(%struct.real_value* %a, %struct.real_value* %b) #0 !dbg !1564 {
entry:
  %retval = alloca i8, align 1
  %a.addr = alloca %struct.real_value*, align 8
  %b.addr = alloca %struct.real_value*, align 8
  %i = alloca i32, align 4
  store %struct.real_value* %a, %struct.real_value** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %a.addr, metadata !1567, metadata !DIExpression()), !dbg !1568
  store %struct.real_value* %b, %struct.real_value** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %b.addr, metadata !1569, metadata !DIExpression()), !dbg !1570
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1571, metadata !DIExpression()), !dbg !1572
  %0 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !1573
  %1 = bitcast %struct.real_value* %0 to i32*, !dbg !1575
  %bf.load = load i32, i32* %1, align 8, !dbg !1575
  %bf.clear = and i32 %bf.load, 3, !dbg !1575
  %2 = load %struct.real_value*, %struct.real_value** %b.addr, align 8, !dbg !1576
  %3 = bitcast %struct.real_value* %2 to i32*, !dbg !1577
  %bf.load1 = load i32, i32* %3, align 8, !dbg !1577
  %bf.clear2 = and i32 %bf.load1, 3, !dbg !1577
  %cmp = icmp ne i32 %bf.clear, %bf.clear2, !dbg !1578
  br i1 %cmp, label %if.then, label %if.end, !dbg !1579

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !1580
  br label %return, !dbg !1580

if.end:                                           ; preds = %entry
  %4 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !1581
  %5 = bitcast %struct.real_value* %4 to i32*, !dbg !1583
  %bf.load3 = load i32, i32* %5, align 8, !dbg !1583
  %bf.lshr = lshr i32 %bf.load3, 3, !dbg !1583
  %bf.clear4 = and i32 %bf.lshr, 1, !dbg !1583
  %6 = load %struct.real_value*, %struct.real_value** %b.addr, align 8, !dbg !1584
  %7 = bitcast %struct.real_value* %6 to i32*, !dbg !1585
  %bf.load5 = load i32, i32* %7, align 8, !dbg !1585
  %bf.lshr6 = lshr i32 %bf.load5, 3, !dbg !1585
  %bf.clear7 = and i32 %bf.lshr6, 1, !dbg !1585
  %cmp8 = icmp ne i32 %bf.clear4, %bf.clear7, !dbg !1586
  br i1 %cmp8, label %if.then9, label %if.end10, !dbg !1587

if.then9:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !1588
  br label %return, !dbg !1588

if.end10:                                         ; preds = %if.end
  %8 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !1589
  %9 = bitcast %struct.real_value* %8 to i32*, !dbg !1590
  %bf.load11 = load i32, i32* %9, align 8, !dbg !1590
  %bf.clear12 = and i32 %bf.load11, 3, !dbg !1590
  switch i32 %bf.clear12, label %sw.default [
    i32 0, label %sw.bb
    i32 2, label %sw.bb
    i32 1, label %sw.bb13
    i32 3, label %sw.bb32
  ], !dbg !1591

sw.bb:                                            ; preds = %if.end10, %if.end10
  store i8 1, i8* %retval, align 1, !dbg !1592
  br label %return, !dbg !1592

sw.bb13:                                          ; preds = %if.end10
  %10 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !1594
  %11 = bitcast %struct.real_value* %10 to i32*, !dbg !1596
  %bf.load14 = load i32, i32* %11, align 8, !dbg !1596
  %bf.lshr15 = lshr i32 %bf.load14, 2, !dbg !1596
  %bf.clear16 = and i32 %bf.lshr15, 1, !dbg !1596
  %12 = load %struct.real_value*, %struct.real_value** %b.addr, align 8, !dbg !1597
  %13 = bitcast %struct.real_value* %12 to i32*, !dbg !1598
  %bf.load17 = load i32, i32* %13, align 8, !dbg !1598
  %bf.lshr18 = lshr i32 %bf.load17, 2, !dbg !1598
  %bf.clear19 = and i32 %bf.lshr18, 1, !dbg !1598
  %cmp20 = icmp ne i32 %bf.clear16, %bf.clear19, !dbg !1599
  br i1 %cmp20, label %if.then21, label %if.end22, !dbg !1600

if.then21:                                        ; preds = %sw.bb13
  store i8 0, i8* %retval, align 1, !dbg !1601
  br label %return, !dbg !1601

if.end22:                                         ; preds = %sw.bb13
  %14 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !1602
  %15 = bitcast %struct.real_value* %14 to i32*, !dbg !1602
  %bf.load23 = load i32, i32* %15, align 8, !dbg !1602
  %bf.lshr24 = lshr i32 %bf.load23, 6, !dbg !1602
  %xor = xor i32 %bf.lshr24, 33554432, !dbg !1602
  %sub = sub nsw i32 %xor, 33554432, !dbg !1602
  %16 = load %struct.real_value*, %struct.real_value** %b.addr, align 8, !dbg !1604
  %17 = bitcast %struct.real_value* %16 to i32*, !dbg !1604
  %bf.load25 = load i32, i32* %17, align 8, !dbg !1604
  %bf.lshr26 = lshr i32 %bf.load25, 6, !dbg !1604
  %xor27 = xor i32 %bf.lshr26, 33554432, !dbg !1604
  %sub28 = sub nsw i32 %xor27, 33554432, !dbg !1604
  %cmp29 = icmp ne i32 %sub, %sub28, !dbg !1605
  br i1 %cmp29, label %if.then30, label %if.end31, !dbg !1606

if.then30:                                        ; preds = %if.end22
  store i8 0, i8* %retval, align 1, !dbg !1607
  br label %return, !dbg !1607

if.end31:                                         ; preds = %if.end22
  br label %sw.epilog, !dbg !1608

sw.bb32:                                          ; preds = %if.end10
  %18 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !1609
  %19 = bitcast %struct.real_value* %18 to i32*, !dbg !1611
  %bf.load33 = load i32, i32* %19, align 8, !dbg !1611
  %bf.lshr34 = lshr i32 %bf.load33, 4, !dbg !1611
  %bf.clear35 = and i32 %bf.lshr34, 1, !dbg !1611
  %20 = load %struct.real_value*, %struct.real_value** %b.addr, align 8, !dbg !1612
  %21 = bitcast %struct.real_value* %20 to i32*, !dbg !1613
  %bf.load36 = load i32, i32* %21, align 8, !dbg !1613
  %bf.lshr37 = lshr i32 %bf.load36, 4, !dbg !1613
  %bf.clear38 = and i32 %bf.lshr37, 1, !dbg !1613
  %cmp39 = icmp ne i32 %bf.clear35, %bf.clear38, !dbg !1614
  br i1 %cmp39, label %if.then40, label %if.end41, !dbg !1615

if.then40:                                        ; preds = %sw.bb32
  store i8 0, i8* %retval, align 1, !dbg !1616
  br label %return, !dbg !1616

if.end41:                                         ; preds = %sw.bb32
  %22 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !1617
  %23 = bitcast %struct.real_value* %22 to i32*, !dbg !1619
  %bf.load42 = load i32, i32* %23, align 8, !dbg !1619
  %bf.lshr43 = lshr i32 %bf.load42, 5, !dbg !1619
  %bf.clear44 = and i32 %bf.lshr43, 1, !dbg !1619
  %tobool = icmp ne i32 %bf.clear44, 0, !dbg !1617
  br i1 %tobool, label %if.then49, label %lor.lhs.false, !dbg !1620

lor.lhs.false:                                    ; preds = %if.end41
  %24 = load %struct.real_value*, %struct.real_value** %b.addr, align 8, !dbg !1621
  %25 = bitcast %struct.real_value* %24 to i32*, !dbg !1622
  %bf.load45 = load i32, i32* %25, align 8, !dbg !1622
  %bf.lshr46 = lshr i32 %bf.load45, 5, !dbg !1622
  %bf.clear47 = and i32 %bf.lshr46, 1, !dbg !1622
  %tobool48 = icmp ne i32 %bf.clear47, 0, !dbg !1621
  br i1 %tobool48, label %if.then49, label %if.end58, !dbg !1623

if.then49:                                        ; preds = %lor.lhs.false, %if.end41
  %26 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !1624
  %27 = bitcast %struct.real_value* %26 to i32*, !dbg !1625
  %bf.load50 = load i32, i32* %27, align 8, !dbg !1625
  %bf.lshr51 = lshr i32 %bf.load50, 5, !dbg !1625
  %bf.clear52 = and i32 %bf.lshr51, 1, !dbg !1625
  %28 = load %struct.real_value*, %struct.real_value** %b.addr, align 8, !dbg !1626
  %29 = bitcast %struct.real_value* %28 to i32*, !dbg !1627
  %bf.load53 = load i32, i32* %29, align 8, !dbg !1627
  %bf.lshr54 = lshr i32 %bf.load53, 5, !dbg !1627
  %bf.clear55 = and i32 %bf.lshr54, 1, !dbg !1627
  %cmp56 = icmp eq i32 %bf.clear52, %bf.clear55, !dbg !1628
  %conv = zext i1 %cmp56 to i32, !dbg !1628
  %conv57 = trunc i32 %conv to i8, !dbg !1624
  store i8 %conv57, i8* %retval, align 1, !dbg !1629
  br label %return, !dbg !1629

if.end58:                                         ; preds = %lor.lhs.false
  br label %sw.epilog, !dbg !1630

sw.default:                                       ; preds = %if.end10
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 1240, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !1631
  br label %sw.epilog, !dbg !1632

sw.epilog:                                        ; preds = %sw.default, %if.end58, %if.end31
  store i32 0, i32* %i, align 4, !dbg !1633
  br label %for.cond, !dbg !1635

for.cond:                                         ; preds = %for.inc, %sw.epilog
  %30 = load i32, i32* %i, align 4, !dbg !1636
  %cmp59 = icmp slt i32 %30, 3, !dbg !1638
  br i1 %cmp59, label %for.body, label %for.end, !dbg !1639

for.body:                                         ; preds = %for.cond
  %31 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !1640
  %sig = getelementptr inbounds %struct.real_value, %struct.real_value* %31, i32 0, i32 1, !dbg !1642
  %32 = load i32, i32* %i, align 4, !dbg !1643
  %idxprom = sext i32 %32 to i64, !dbg !1640
  %arrayidx = getelementptr inbounds [3 x i64], [3 x i64]* %sig, i64 0, i64 %idxprom, !dbg !1640
  %33 = load i64, i64* %arrayidx, align 8, !dbg !1640
  %34 = load %struct.real_value*, %struct.real_value** %b.addr, align 8, !dbg !1644
  %sig61 = getelementptr inbounds %struct.real_value, %struct.real_value* %34, i32 0, i32 1, !dbg !1645
  %35 = load i32, i32* %i, align 4, !dbg !1646
  %idxprom62 = sext i32 %35 to i64, !dbg !1644
  %arrayidx63 = getelementptr inbounds [3 x i64], [3 x i64]* %sig61, i64 0, i64 %idxprom62, !dbg !1644
  %36 = load i64, i64* %arrayidx63, align 8, !dbg !1644
  %cmp64 = icmp ne i64 %33, %36, !dbg !1647
  br i1 %cmp64, label %if.then66, label %if.end67, !dbg !1648

if.then66:                                        ; preds = %for.body
  store i8 0, i8* %retval, align 1, !dbg !1649
  br label %return, !dbg !1649

if.end67:                                         ; preds = %for.body
  br label %for.inc, !dbg !1650

for.inc:                                          ; preds = %if.end67
  %37 = load i32, i32* %i, align 4, !dbg !1651
  %inc = add nsw i32 %37, 1, !dbg !1651
  store i32 %inc, i32* %i, align 4, !dbg !1651
  br label %for.cond, !dbg !1652, !llvm.loop !1653

for.end:                                          ; preds = %for.cond
  store i8 1, i8* %retval, align 1, !dbg !1655
  br label %return, !dbg !1655

return:                                           ; preds = %for.end, %if.then66, %if.then49, %if.then40, %if.then30, %if.then21, %sw.bb, %if.then9, %if.then
  %38 = load i8, i8* %retval, align 1, !dbg !1656
  ret i8 %38, !dbg !1656
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @exact_real_inverse(i32 %mode, %struct.real_value* %r) #0 !dbg !1657 {
entry:
  %retval = alloca i8, align 1
  %mode.addr = alloca i32, align 4
  %r.addr = alloca %struct.real_value*, align 8
  %one = alloca %struct.real_value*, align 8
  %u = alloca %struct.real_value, align 8
  %i = alloca i32, align 4
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !1660, metadata !DIExpression()), !dbg !1661
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !1662, metadata !DIExpression()), !dbg !1663
  call void @llvm.dbg.declare(metadata %struct.real_value** %one, metadata !1664, metadata !DIExpression()), !dbg !1665
  %call = call %struct.real_value* @real_digit(i32 1), !dbg !1666
  store %struct.real_value* %call, %struct.real_value** %one, align 8, !dbg !1665
  call void @llvm.dbg.declare(metadata %struct.real_value* %u, metadata !1667, metadata !DIExpression()), !dbg !1668
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1669, metadata !DIExpression()), !dbg !1670
  %0 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1671
  %1 = bitcast %struct.real_value* %0 to i32*, !dbg !1673
  %bf.load = load i32, i32* %1, align 8, !dbg !1673
  %bf.clear = and i32 %bf.load, 3, !dbg !1673
  %cmp = icmp ne i32 %bf.clear, 1, !dbg !1674
  br i1 %cmp, label %if.then, label %if.end, !dbg !1675

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !1676
  br label %return, !dbg !1676

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !1677
  br label %for.cond, !dbg !1679

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i32, i32* %i, align 4, !dbg !1680
  %cmp1 = icmp slt i32 %2, 2, !dbg !1682
  br i1 %cmp1, label %for.body, label %for.end, !dbg !1683

for.body:                                         ; preds = %for.cond
  %3 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1684
  %sig = getelementptr inbounds %struct.real_value, %struct.real_value* %3, i32 0, i32 1, !dbg !1686
  %4 = load i32, i32* %i, align 4, !dbg !1687
  %idxprom = sext i32 %4 to i64, !dbg !1684
  %arrayidx = getelementptr inbounds [3 x i64], [3 x i64]* %sig, i64 0, i64 %idxprom, !dbg !1684
  %5 = load i64, i64* %arrayidx, align 8, !dbg !1684
  %cmp2 = icmp ne i64 %5, 0, !dbg !1688
  br i1 %cmp2, label %if.then3, label %if.end4, !dbg !1689

if.then3:                                         ; preds = %for.body
  store i8 0, i8* %retval, align 1, !dbg !1690
  br label %return, !dbg !1690

if.end4:                                          ; preds = %for.body
  br label %for.inc, !dbg !1691

for.inc:                                          ; preds = %if.end4
  %6 = load i32, i32* %i, align 4, !dbg !1692
  %inc = add nsw i32 %6, 1, !dbg !1692
  store i32 %inc, i32* %i, align 4, !dbg !1692
  br label %for.cond, !dbg !1693, !llvm.loop !1694

for.end:                                          ; preds = %for.cond
  %7 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1696
  %sig5 = getelementptr inbounds %struct.real_value, %struct.real_value* %7, i32 0, i32 1, !dbg !1698
  %arrayidx6 = getelementptr inbounds [3 x i64], [3 x i64]* %sig5, i64 0, i64 2, !dbg !1696
  %8 = load i64, i64* %arrayidx6, align 8, !dbg !1696
  %cmp7 = icmp ne i64 %8, -9223372036854775808, !dbg !1699
  br i1 %cmp7, label %if.then8, label %if.end9, !dbg !1700

if.then8:                                         ; preds = %for.end
  store i8 0, i8* %retval, align 1, !dbg !1701
  br label %return, !dbg !1701

if.end9:                                          ; preds = %for.end
  %9 = load %struct.real_value*, %struct.real_value** %one, align 8, !dbg !1702
  %10 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1703
  %call10 = call zeroext i8 @do_divide(%struct.real_value* %u, %struct.real_value* %9, %struct.real_value* %10), !dbg !1704
  %11 = load i32, i32* %mode.addr, align 4, !dbg !1705
  call void @real_convert(%struct.real_value* %u, i32 %11, %struct.real_value* %u), !dbg !1706
  %12 = bitcast %struct.real_value* %u to i32*, !dbg !1707
  %bf.load11 = load i32, i32* %12, align 8, !dbg !1707
  %bf.clear12 = and i32 %bf.load11, 3, !dbg !1707
  %cmp13 = icmp ne i32 %bf.clear12, 1, !dbg !1709
  br i1 %cmp13, label %if.then14, label %if.end15, !dbg !1710

if.then14:                                        ; preds = %if.end9
  store i8 0, i8* %retval, align 1, !dbg !1711
  br label %return, !dbg !1711

if.end15:                                         ; preds = %if.end9
  store i32 0, i32* %i, align 4, !dbg !1712
  br label %for.cond16, !dbg !1714

for.cond16:                                       ; preds = %for.inc25, %if.end15
  %13 = load i32, i32* %i, align 4, !dbg !1715
  %cmp17 = icmp slt i32 %13, 2, !dbg !1717
  br i1 %cmp17, label %for.body18, label %for.end27, !dbg !1718

for.body18:                                       ; preds = %for.cond16
  %sig19 = getelementptr inbounds %struct.real_value, %struct.real_value* %u, i32 0, i32 1, !dbg !1719
  %14 = load i32, i32* %i, align 4, !dbg !1721
  %idxprom20 = sext i32 %14 to i64, !dbg !1722
  %arrayidx21 = getelementptr inbounds [3 x i64], [3 x i64]* %sig19, i64 0, i64 %idxprom20, !dbg !1722
  %15 = load i64, i64* %arrayidx21, align 8, !dbg !1722
  %cmp22 = icmp ne i64 %15, 0, !dbg !1723
  br i1 %cmp22, label %if.then23, label %if.end24, !dbg !1724

if.then23:                                        ; preds = %for.body18
  store i8 0, i8* %retval, align 1, !dbg !1725
  br label %return, !dbg !1725

if.end24:                                         ; preds = %for.body18
  br label %for.inc25, !dbg !1726

for.inc25:                                        ; preds = %if.end24
  %16 = load i32, i32* %i, align 4, !dbg !1727
  %inc26 = add nsw i32 %16, 1, !dbg !1727
  store i32 %inc26, i32* %i, align 4, !dbg !1727
  br label %for.cond16, !dbg !1728, !llvm.loop !1729

for.end27:                                        ; preds = %for.cond16
  %sig28 = getelementptr inbounds %struct.real_value, %struct.real_value* %u, i32 0, i32 1, !dbg !1731
  %arrayidx29 = getelementptr inbounds [3 x i64], [3 x i64]* %sig28, i64 0, i64 2, !dbg !1733
  %17 = load i64, i64* %arrayidx29, align 8, !dbg !1733
  %cmp30 = icmp ne i64 %17, -9223372036854775808, !dbg !1734
  br i1 %cmp30, label %if.then31, label %if.end32, !dbg !1735

if.then31:                                        ; preds = %for.end27
  store i8 0, i8* %retval, align 1, !dbg !1736
  br label %return, !dbg !1736

if.end32:                                         ; preds = %for.end27
  %18 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1737
  %19 = bitcast %struct.real_value* %18 to i8*, !dbg !1738
  %20 = bitcast %struct.real_value* %u to i8*, !dbg !1738
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* align 8 %20, i64 32, i1 false), !dbg !1738
  store i8 1, i8* %retval, align 1, !dbg !1739
  br label %return, !dbg !1739

return:                                           ; preds = %if.end32, %if.then31, %if.then23, %if.then14, %if.then8, %if.then3, %if.then
  %21 = load i8, i8* %retval, align 1, !dbg !1740
  ret i8 %21, !dbg !1740
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.real_value* @real_digit(i32 %n) #0 !dbg !510 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !1741, metadata !DIExpression()), !dbg !1742
  %0 = load i32, i32* %n.addr, align 4, !dbg !1743
  %cmp = icmp sge i32 %0, 0, !dbg !1743
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !1743

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 2302, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !1743
  br label %cond.end, !dbg !1743

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !1743

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !1743
  %1 = load i32, i32* %n.addr, align 4, !dbg !1744
  %cmp1 = icmp sle i32 %1, 9, !dbg !1744
  br i1 %cmp1, label %cond.false3, label %cond.true2, !dbg !1744

cond.true2:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 2303, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !1744
  br label %cond.end4, !dbg !1744

cond.false3:                                      ; preds = %cond.end
  br label %cond.end4, !dbg !1744

cond.end4:                                        ; preds = %cond.false3, %cond.true2
  %cond5 = phi i32 [ 0, %cond.true2 ], [ 0, %cond.false3 ], !dbg !1744
  %2 = load i32, i32* %n.addr, align 4, !dbg !1745
  %cmp6 = icmp sgt i32 %2, 0, !dbg !1747
  br i1 %cmp6, label %land.lhs.true, label %if.end, !dbg !1748

land.lhs.true:                                    ; preds = %cond.end4
  %3 = load i32, i32* %n.addr, align 4, !dbg !1749
  %idxprom = sext i32 %3 to i64, !dbg !1750
  %arrayidx = getelementptr inbounds [10 x %struct.real_value], [10 x %struct.real_value]* @real_digit.num, i64 0, i64 %idxprom, !dbg !1750
  %4 = bitcast %struct.real_value* %arrayidx to i32*, !dbg !1751
  %bf.load = load i32, i32* %4, align 16, !dbg !1751
  %bf.clear = and i32 %bf.load, 3, !dbg !1751
  %cmp7 = icmp eq i32 %bf.clear, 0, !dbg !1752
  br i1 %cmp7, label %if.then, label %if.end, !dbg !1753

if.then:                                          ; preds = %land.lhs.true
  %5 = load i32, i32* %n.addr, align 4, !dbg !1754
  %idxprom8 = sext i32 %5 to i64, !dbg !1755
  %arrayidx9 = getelementptr inbounds [10 x %struct.real_value], [10 x %struct.real_value]* @real_digit.num, i64 0, i64 %idxprom8, !dbg !1755
  %6 = load i32, i32* %n.addr, align 4, !dbg !1756
  %conv = sext i32 %6 to i64, !dbg !1756
  call void @real_from_integer(%struct.real_value* %arrayidx9, i32 0, i64 %conv, i64 0, i32 1), !dbg !1757
  br label %if.end, !dbg !1757

if.end:                                           ; preds = %if.then, %land.lhs.true, %cond.end4
  %7 = load i32, i32* %n.addr, align 4, !dbg !1758
  %idxprom10 = sext i32 %7 to i64, !dbg !1759
  %arrayidx11 = getelementptr inbounds [10 x %struct.real_value], [10 x %struct.real_value]* @real_digit.num, i64 0, i64 %idxprom10, !dbg !1759
  ret %struct.real_value* %arrayidx11, !dbg !1760
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @real_convert(%struct.real_value* %r, i32 %mode, %struct.real_value* %a) #0 !dbg !1761 {
entry:
  %r.addr = alloca %struct.real_value*, align 8
  %mode.addr = alloca i32, align 4
  %a.addr = alloca %struct.real_value*, align 8
  %fmt = alloca %struct.real_format*, align 8
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !1764, metadata !DIExpression()), !dbg !1765
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !1766, metadata !DIExpression()), !dbg !1767
  store %struct.real_value* %a, %struct.real_value** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %a.addr, metadata !1768, metadata !DIExpression()), !dbg !1769
  call void @llvm.dbg.declare(metadata %struct.real_format** %fmt, metadata !1770, metadata !DIExpression()), !dbg !1771
  %0 = load i32, i32* %mode.addr, align 4, !dbg !1772
  %idxprom = zext i32 %0 to i64, !dbg !1772
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !1772
  %1 = load i8, i8* %arrayidx, align 1, !dbg !1772
  %conv = zext i8 %1 to i32, !dbg !1772
  %cmp = icmp eq i32 %conv, 9, !dbg !1772
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !1772

cond.true:                                        ; preds = %entry
  %2 = load i32, i32* %mode.addr, align 4, !dbg !1772
  %sub = sub i32 %2, 42, !dbg !1772
  %add = add i32 %sub, 4, !dbg !1772
  br label %cond.end, !dbg !1772

cond.false:                                       ; preds = %entry
  %3 = load i32, i32* %mode.addr, align 4, !dbg !1772
  %sub2 = sub i32 %3, 38, !dbg !1772
  br label %cond.end, !dbg !1772

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add, %cond.true ], [ %sub2, %cond.false ], !dbg !1772
  %idxprom3 = zext i32 %cond to i64, !dbg !1772
  %arrayidx4 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom3, !dbg !1772
  %4 = load %struct.real_format*, %struct.real_format** %arrayidx4, align 8, !dbg !1772
  store %struct.real_format* %4, %struct.real_format** %fmt, align 8, !dbg !1773
  %5 = load %struct.real_format*, %struct.real_format** %fmt, align 8, !dbg !1774
  %tobool = icmp ne %struct.real_format* %5, null, !dbg !1774
  br i1 %tobool, label %cond.false6, label %cond.true5, !dbg !1774

cond.true5:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 2741, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !1774
  br label %cond.end7, !dbg !1774

cond.false6:                                      ; preds = %cond.end
  br label %cond.end7, !dbg !1774

cond.end7:                                        ; preds = %cond.false6, %cond.true5
  %cond8 = phi i32 [ 0, %cond.true5 ], [ 0, %cond.false6 ], !dbg !1774
  %6 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1775
  %7 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !1776
  %8 = bitcast %struct.real_value* %6 to i8*, !dbg !1777
  %9 = bitcast %struct.real_value* %7 to i8*, !dbg !1777
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 32, i1 false), !dbg !1777
  %10 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !1778
  %11 = bitcast %struct.real_value* %10 to i32*, !dbg !1780
  %bf.load = load i32, i32* %11, align 8, !dbg !1780
  %bf.lshr = lshr i32 %bf.load, 2, !dbg !1780
  %bf.clear = and i32 %bf.lshr, 1, !dbg !1780
  %tobool9 = icmp ne i32 %bf.clear, 0, !dbg !1778
  br i1 %tobool9, label %if.then, label %lor.lhs.false, !dbg !1781

lor.lhs.false:                                    ; preds = %cond.end7
  %12 = load %struct.real_format*, %struct.real_format** %fmt, align 8, !dbg !1782
  %b = getelementptr inbounds %struct.real_format, %struct.real_format* %12, i32 0, i32 2, !dbg !1783
  %13 = load i32, i32* %b, align 8, !dbg !1783
  %cmp10 = icmp eq i32 %13, 10, !dbg !1784
  br i1 %cmp10, label %if.then, label %if.end, !dbg !1785

if.then:                                          ; preds = %lor.lhs.false, %cond.end7
  %14 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1786
  %15 = load i32, i32* %mode.addr, align 4, !dbg !1787
  %16 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !1788
  call void @decimal_real_convert(%struct.real_value* %14, i32 %15, %struct.real_value* %16), !dbg !1789
  br label %if.end, !dbg !1789

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %17 = load %struct.real_format*, %struct.real_format** %fmt, align 8, !dbg !1790
  %18 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1791
  call void @round_for_format(%struct.real_format* %17, %struct.real_value* %18), !dbg !1792
  %19 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1793
  %20 = bitcast %struct.real_value* %19 to i32*, !dbg !1795
  %bf.load12 = load i32, i32* %20, align 8, !dbg !1795
  %bf.clear13 = and i32 %bf.load12, 3, !dbg !1795
  %cmp14 = icmp eq i32 %bf.clear13, 1, !dbg !1796
  br i1 %cmp14, label %if.then16, label %if.end17, !dbg !1797

if.then16:                                        ; preds = %if.end
  %21 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1798
  call void @normalize(%struct.real_value* %21), !dbg !1799
  br label %if.end17, !dbg !1799

if.end17:                                         ; preds = %if.then16, %if.end
  ret void, !dbg !1800
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @real_can_shorten_arithmetic(i32 %imode, i32 %tmode) #0 !dbg !1801 {
entry:
  %imode.addr = alloca i32, align 4
  %tmode.addr = alloca i32, align 4
  %tfmt = alloca %struct.real_format*, align 8
  %ifmt = alloca %struct.real_format*, align 8
  store i32 %imode, i32* %imode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %imode.addr, metadata !1804, metadata !DIExpression()), !dbg !1805
  store i32 %tmode, i32* %tmode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %tmode.addr, metadata !1806, metadata !DIExpression()), !dbg !1807
  call void @llvm.dbg.declare(metadata %struct.real_format** %tfmt, metadata !1808, metadata !DIExpression()), !dbg !1809
  call void @llvm.dbg.declare(metadata %struct.real_format** %ifmt, metadata !1810, metadata !DIExpression()), !dbg !1811
  %0 = load i32, i32* %tmode.addr, align 4, !dbg !1812
  %idxprom = zext i32 %0 to i64, !dbg !1812
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !1812
  %1 = load i8, i8* %arrayidx, align 1, !dbg !1812
  %conv = zext i8 %1 to i32, !dbg !1812
  %cmp = icmp eq i32 %conv, 9, !dbg !1812
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !1812

cond.true:                                        ; preds = %entry
  %2 = load i32, i32* %tmode.addr, align 4, !dbg !1812
  %sub = sub i32 %2, 42, !dbg !1812
  %add = add i32 %sub, 4, !dbg !1812
  br label %cond.end, !dbg !1812

cond.false:                                       ; preds = %entry
  %3 = load i32, i32* %tmode.addr, align 4, !dbg !1812
  %sub2 = sub i32 %3, 38, !dbg !1812
  br label %cond.end, !dbg !1812

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add, %cond.true ], [ %sub2, %cond.false ], !dbg !1812
  %idxprom3 = zext i32 %cond to i64, !dbg !1812
  %arrayidx4 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom3, !dbg !1812
  %4 = load %struct.real_format*, %struct.real_format** %arrayidx4, align 8, !dbg !1812
  store %struct.real_format* %4, %struct.real_format** %tfmt, align 8, !dbg !1813
  %5 = load i32, i32* %imode.addr, align 4, !dbg !1814
  %idxprom5 = zext i32 %5 to i64, !dbg !1814
  %arrayidx6 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom5, !dbg !1814
  %6 = load i8, i8* %arrayidx6, align 1, !dbg !1814
  %conv7 = zext i8 %6 to i32, !dbg !1814
  %cmp8 = icmp eq i32 %conv7, 9, !dbg !1814
  br i1 %cmp8, label %cond.true10, label %cond.false13, !dbg !1814

cond.true10:                                      ; preds = %cond.end
  %7 = load i32, i32* %imode.addr, align 4, !dbg !1814
  %sub11 = sub i32 %7, 42, !dbg !1814
  %add12 = add i32 %sub11, 4, !dbg !1814
  br label %cond.end15, !dbg !1814

cond.false13:                                     ; preds = %cond.end
  %8 = load i32, i32* %imode.addr, align 4, !dbg !1814
  %sub14 = sub i32 %8, 38, !dbg !1814
  br label %cond.end15, !dbg !1814

cond.end15:                                       ; preds = %cond.false13, %cond.true10
  %cond16 = phi i32 [ %add12, %cond.true10 ], [ %sub14, %cond.false13 ], !dbg !1814
  %idxprom17 = zext i32 %cond16 to i64, !dbg !1814
  %arrayidx18 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom17, !dbg !1814
  %9 = load %struct.real_format*, %struct.real_format** %arrayidx18, align 8, !dbg !1814
  store %struct.real_format* %9, %struct.real_format** %ifmt, align 8, !dbg !1815
  %10 = load %struct.real_format*, %struct.real_format** %ifmt, align 8, !dbg !1816
  %b = getelementptr inbounds %struct.real_format, %struct.real_format* %10, i32 0, i32 2, !dbg !1817
  %11 = load i32, i32* %b, align 8, !dbg !1817
  %12 = load %struct.real_format*, %struct.real_format** %tfmt, align 8, !dbg !1818
  %b19 = getelementptr inbounds %struct.real_format, %struct.real_format* %12, i32 0, i32 2, !dbg !1819
  %13 = load i32, i32* %b19, align 8, !dbg !1819
  %cmp20 = icmp eq i32 %11, %13, !dbg !1820
  br i1 %cmp20, label %land.lhs.true, label %land.end416, !dbg !1821

land.lhs.true:                                    ; preds = %cond.end15
  %14 = load %struct.real_format*, %struct.real_format** %ifmt, align 8, !dbg !1822
  %p = getelementptr inbounds %struct.real_format, %struct.real_format* %14, i32 0, i32 3, !dbg !1823
  %15 = load i32, i32* %p, align 4, !dbg !1823
  %16 = load %struct.real_format*, %struct.real_format** %tfmt, align 8, !dbg !1824
  %p22 = getelementptr inbounds %struct.real_format, %struct.real_format* %16, i32 0, i32 3, !dbg !1825
  %17 = load i32, i32* %p22, align 4, !dbg !1825
  %mul = mul nsw i32 2, %17, !dbg !1826
  %cmp23 = icmp sgt i32 %15, %mul, !dbg !1827
  br i1 %cmp23, label %land.lhs.true25, label %land.end416, !dbg !1828

land.lhs.true25:                                  ; preds = %land.lhs.true
  %18 = load %struct.real_format*, %struct.real_format** %ifmt, align 8, !dbg !1829
  %emin = getelementptr inbounds %struct.real_format, %struct.real_format* %18, i32 0, i32 5, !dbg !1830
  %19 = load i32, i32* %emin, align 4, !dbg !1830
  %20 = load %struct.real_format*, %struct.real_format** %tfmt, align 8, !dbg !1831
  %emin26 = getelementptr inbounds %struct.real_format, %struct.real_format* %20, i32 0, i32 5, !dbg !1832
  %21 = load i32, i32* %emin26, align 4, !dbg !1832
  %mul27 = mul nsw i32 2, %21, !dbg !1833
  %22 = load %struct.real_format*, %struct.real_format** %tfmt, align 8, !dbg !1834
  %p28 = getelementptr inbounds %struct.real_format, %struct.real_format* %22, i32 0, i32 3, !dbg !1835
  %23 = load i32, i32* %p28, align 4, !dbg !1835
  %sub29 = sub nsw i32 %mul27, %23, !dbg !1836
  %sub30 = sub nsw i32 %sub29, 2, !dbg !1837
  %cmp31 = icmp slt i32 %19, %sub30, !dbg !1838
  br i1 %cmp31, label %land.lhs.true33, label %land.end416, !dbg !1839

land.lhs.true33:                                  ; preds = %land.lhs.true25
  %24 = load %struct.real_format*, %struct.real_format** %ifmt, align 8, !dbg !1840
  %emin34 = getelementptr inbounds %struct.real_format, %struct.real_format* %24, i32 0, i32 5, !dbg !1841
  %25 = load i32, i32* %emin34, align 4, !dbg !1841
  %26 = load %struct.real_format*, %struct.real_format** %tfmt, align 8, !dbg !1842
  %emin35 = getelementptr inbounds %struct.real_format, %struct.real_format* %26, i32 0, i32 5, !dbg !1843
  %27 = load i32, i32* %emin35, align 4, !dbg !1843
  %28 = load %struct.real_format*, %struct.real_format** %tfmt, align 8, !dbg !1844
  %emax = getelementptr inbounds %struct.real_format, %struct.real_format* %28, i32 0, i32 6, !dbg !1845
  %29 = load i32, i32* %emax, align 8, !dbg !1845
  %sub36 = sub nsw i32 %27, %29, !dbg !1846
  %30 = load %struct.real_format*, %struct.real_format** %tfmt, align 8, !dbg !1847
  %p37 = getelementptr inbounds %struct.real_format, %struct.real_format* %30, i32 0, i32 3, !dbg !1848
  %31 = load i32, i32* %p37, align 4, !dbg !1848
  %sub38 = sub nsw i32 %sub36, %31, !dbg !1849
  %sub39 = sub nsw i32 %sub38, 2, !dbg !1850
  %cmp40 = icmp slt i32 %25, %sub39, !dbg !1851
  br i1 %cmp40, label %land.lhs.true42, label %land.end416, !dbg !1852

land.lhs.true42:                                  ; preds = %land.lhs.true33
  %32 = load %struct.real_format*, %struct.real_format** %ifmt, align 8, !dbg !1853
  %emax43 = getelementptr inbounds %struct.real_format, %struct.real_format* %32, i32 0, i32 6, !dbg !1854
  %33 = load i32, i32* %emax43, align 8, !dbg !1854
  %34 = load %struct.real_format*, %struct.real_format** %tfmt, align 8, !dbg !1855
  %emax44 = getelementptr inbounds %struct.real_format, %struct.real_format* %34, i32 0, i32 6, !dbg !1856
  %35 = load i32, i32* %emax44, align 8, !dbg !1856
  %mul45 = mul nsw i32 2, %35, !dbg !1857
  %add46 = add nsw i32 %mul45, 2, !dbg !1858
  %cmp47 = icmp sgt i32 %33, %add46, !dbg !1859
  br i1 %cmp47, label %land.lhs.true49, label %land.end416, !dbg !1860

land.lhs.true49:                                  ; preds = %land.lhs.true42
  %36 = load %struct.real_format*, %struct.real_format** %ifmt, align 8, !dbg !1861
  %emax50 = getelementptr inbounds %struct.real_format, %struct.real_format* %36, i32 0, i32 6, !dbg !1862
  %37 = load i32, i32* %emax50, align 8, !dbg !1862
  %38 = load %struct.real_format*, %struct.real_format** %tfmt, align 8, !dbg !1863
  %emax51 = getelementptr inbounds %struct.real_format, %struct.real_format* %38, i32 0, i32 6, !dbg !1864
  %39 = load i32, i32* %emax51, align 8, !dbg !1864
  %40 = load %struct.real_format*, %struct.real_format** %tfmt, align 8, !dbg !1865
  %emin52 = getelementptr inbounds %struct.real_format, %struct.real_format* %40, i32 0, i32 5, !dbg !1866
  %41 = load i32, i32* %emin52, align 4, !dbg !1866
  %sub53 = sub nsw i32 %39, %41, !dbg !1867
  %42 = load %struct.real_format*, %struct.real_format** %tfmt, align 8, !dbg !1868
  %p54 = getelementptr inbounds %struct.real_format, %struct.real_format* %42, i32 0, i32 3, !dbg !1869
  %43 = load i32, i32* %p54, align 4, !dbg !1869
  %add55 = add nsw i32 %sub53, %43, !dbg !1870
  %add56 = add nsw i32 %add55, 2, !dbg !1871
  %cmp57 = icmp sgt i32 %37, %add56, !dbg !1872
  br i1 %cmp57, label %land.lhs.true59, label %land.end416, !dbg !1873

land.lhs.true59:                                  ; preds = %land.lhs.true49
  %44 = load %struct.real_format*, %struct.real_format** %ifmt, align 8, !dbg !1874
  %round_towards_zero = getelementptr inbounds %struct.real_format, %struct.real_format* %44, i32 0, i32 9, !dbg !1875
  %45 = load i8, i8* %round_towards_zero, align 4, !dbg !1875
  %conv60 = zext i8 %45 to i32, !dbg !1874
  %46 = load %struct.real_format*, %struct.real_format** %tfmt, align 8, !dbg !1876
  %round_towards_zero61 = getelementptr inbounds %struct.real_format, %struct.real_format* %46, i32 0, i32 9, !dbg !1877
  %47 = load i8, i8* %round_towards_zero61, align 4, !dbg !1877
  %conv62 = zext i8 %47 to i32, !dbg !1876
  %cmp63 = icmp eq i32 %conv60, %conv62, !dbg !1878
  br i1 %cmp63, label %land.lhs.true65, label %land.end416, !dbg !1879

land.lhs.true65:                                  ; preds = %land.lhs.true59
  %48 = load %struct.real_format*, %struct.real_format** %ifmt, align 8, !dbg !1880
  %has_sign_dependent_rounding = getelementptr inbounds %struct.real_format, %struct.real_format* %48, i32 0, i32 10, !dbg !1881
  %49 = load i8, i8* %has_sign_dependent_rounding, align 1, !dbg !1881
  %conv66 = zext i8 %49 to i32, !dbg !1880
  %50 = load %struct.real_format*, %struct.real_format** %tfmt, align 8, !dbg !1882
  %has_sign_dependent_rounding67 = getelementptr inbounds %struct.real_format, %struct.real_format* %50, i32 0, i32 10, !dbg !1883
  %51 = load i8, i8* %has_sign_dependent_rounding67, align 1, !dbg !1883
  %conv68 = zext i8 %51 to i32, !dbg !1882
  %cmp69 = icmp eq i32 %conv66, %conv68, !dbg !1884
  br i1 %cmp69, label %land.lhs.true71, label %land.end416, !dbg !1885

land.lhs.true71:                                  ; preds = %land.lhs.true65
  %52 = load %struct.real_format*, %struct.real_format** %ifmt, align 8, !dbg !1886
  %has_nans = getelementptr inbounds %struct.real_format, %struct.real_format* %52, i32 0, i32 11, !dbg !1887
  %53 = load i8, i8* %has_nans, align 2, !dbg !1887
  %conv72 = zext i8 %53 to i32, !dbg !1886
  %54 = load %struct.real_format*, %struct.real_format** %tfmt, align 8, !dbg !1888
  %has_nans73 = getelementptr inbounds %struct.real_format, %struct.real_format* %54, i32 0, i32 11, !dbg !1889
  %55 = load i8, i8* %has_nans73, align 2, !dbg !1889
  %conv74 = zext i8 %55 to i32, !dbg !1888
  %cmp75 = icmp sge i32 %conv72, %conv74, !dbg !1890
  br i1 %cmp75, label %land.lhs.true77, label %land.end416, !dbg !1891

land.lhs.true77:                                  ; preds = %land.lhs.true71
  %56 = load %struct.real_format*, %struct.real_format** %ifmt, align 8, !dbg !1892
  %has_inf = getelementptr inbounds %struct.real_format, %struct.real_format* %56, i32 0, i32 12, !dbg !1893
  %57 = load i8, i8* %has_inf, align 1, !dbg !1893
  %conv78 = zext i8 %57 to i32, !dbg !1892
  %58 = load %struct.real_format*, %struct.real_format** %tfmt, align 8, !dbg !1894
  %has_inf79 = getelementptr inbounds %struct.real_format, %struct.real_format* %58, i32 0, i32 12, !dbg !1895
  %59 = load i8, i8* %has_inf79, align 1, !dbg !1895
  %conv80 = zext i8 %59 to i32, !dbg !1894
  %cmp81 = icmp sge i32 %conv78, %conv80, !dbg !1896
  br i1 %cmp81, label %land.lhs.true83, label %land.end416, !dbg !1897

land.lhs.true83:                                  ; preds = %land.lhs.true77
  %60 = load %struct.real_format*, %struct.real_format** %ifmt, align 8, !dbg !1898
  %has_signed_zero = getelementptr inbounds %struct.real_format, %struct.real_format* %60, i32 0, i32 14, !dbg !1899
  %61 = load i8, i8* %has_signed_zero, align 1, !dbg !1899
  %conv84 = zext i8 %61 to i32, !dbg !1898
  %62 = load %struct.real_format*, %struct.real_format** %tfmt, align 8, !dbg !1900
  %has_signed_zero85 = getelementptr inbounds %struct.real_format, %struct.real_format* %62, i32 0, i32 14, !dbg !1901
  %63 = load i8, i8* %has_signed_zero85, align 1, !dbg !1901
  %conv86 = zext i8 %63 to i32, !dbg !1900
  %cmp87 = icmp sge i32 %conv84, %conv86, !dbg !1902
  br i1 %cmp87, label %land.lhs.true89, label %land.end416, !dbg !1903

land.lhs.true89:                                  ; preds = %land.lhs.true83
  %64 = load i32, i32* %tmode.addr, align 4, !dbg !1904
  %idxprom90 = zext i32 %64 to i64, !dbg !1904
  %arrayidx91 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom90, !dbg !1904
  %65 = load i8, i8* %arrayidx91, align 1, !dbg !1904
  %conv92 = zext i8 %65 to i32, !dbg !1904
  %cmp93 = icmp eq i32 %conv92, 8, !dbg !1904
  br i1 %cmp93, label %land.lhs.true112, label %lor.lhs.false, !dbg !1904

lor.lhs.false:                                    ; preds = %land.lhs.true89
  %66 = load i32, i32* %tmode.addr, align 4, !dbg !1904
  %idxprom95 = zext i32 %66 to i64, !dbg !1904
  %arrayidx96 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom95, !dbg !1904
  %67 = load i8, i8* %arrayidx96, align 1, !dbg !1904
  %conv97 = zext i8 %67 to i32, !dbg !1904
  %cmp98 = icmp eq i32 %conv97, 9, !dbg !1904
  br i1 %cmp98, label %land.lhs.true112, label %lor.lhs.false100, !dbg !1904

lor.lhs.false100:                                 ; preds = %lor.lhs.false
  %68 = load i32, i32* %tmode.addr, align 4, !dbg !1904
  %idxprom101 = zext i32 %68 to i64, !dbg !1904
  %arrayidx102 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom101, !dbg !1904
  %69 = load i8, i8* %arrayidx102, align 1, !dbg !1904
  %conv103 = zext i8 %69 to i32, !dbg !1904
  %cmp104 = icmp eq i32 %conv103, 11, !dbg !1904
  br i1 %cmp104, label %land.lhs.true112, label %lor.lhs.false106, !dbg !1904

lor.lhs.false106:                                 ; preds = %lor.lhs.false100
  %70 = load i32, i32* %tmode.addr, align 4, !dbg !1904
  %idxprom107 = zext i32 %70 to i64, !dbg !1904
  %arrayidx108 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom107, !dbg !1904
  %71 = load i8, i8* %arrayidx108, align 1, !dbg !1904
  %conv109 = zext i8 %71 to i32, !dbg !1904
  %cmp110 = icmp eq i32 %conv109, 17, !dbg !1904
  br i1 %cmp110, label %land.lhs.true112, label %land.rhs, !dbg !1904

land.lhs.true112:                                 ; preds = %lor.lhs.false106, %lor.lhs.false100, %lor.lhs.false, %land.lhs.true89
  %72 = load i32, i32* %tmode.addr, align 4, !dbg !1904
  %idxprom113 = zext i32 %72 to i64, !dbg !1904
  %arrayidx114 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom113, !dbg !1904
  %73 = load i8, i8* %arrayidx114, align 1, !dbg !1904
  %conv115 = zext i8 %73 to i32, !dbg !1904
  %cmp116 = icmp eq i32 %conv115, 8, !dbg !1904
  br i1 %cmp116, label %cond.true124, label %lor.lhs.false118, !dbg !1904

lor.lhs.false118:                                 ; preds = %land.lhs.true112
  %74 = load i32, i32* %tmode.addr, align 4, !dbg !1904
  %idxprom119 = zext i32 %74 to i64, !dbg !1904
  %arrayidx120 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom119, !dbg !1904
  %75 = load i8, i8* %arrayidx120, align 1, !dbg !1904
  %conv121 = zext i8 %75 to i32, !dbg !1904
  %cmp122 = icmp eq i32 %conv121, 9, !dbg !1904
  br i1 %cmp122, label %cond.true124, label %cond.false125, !dbg !1904

cond.true124:                                     ; preds = %lor.lhs.false118, %land.lhs.true112
  %76 = load i32, i32* %tmode.addr, align 4, !dbg !1904
  br label %cond.end129, !dbg !1904

cond.false125:                                    ; preds = %lor.lhs.false118
  %77 = load i32, i32* %tmode.addr, align 4, !dbg !1904
  %idxprom126 = zext i32 %77 to i64, !dbg !1904
  %arrayidx127 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom126, !dbg !1904
  %78 = load i8, i8* %arrayidx127, align 1, !dbg !1904
  %conv128 = zext i8 %78 to i32, !dbg !1904
  br label %cond.end129, !dbg !1904

cond.end129:                                      ; preds = %cond.false125, %cond.true124
  %cond130 = phi i32 [ %76, %cond.true124 ], [ %conv128, %cond.false125 ], !dbg !1904
  %idxprom131 = zext i32 %cond130 to i64, !dbg !1904
  %arrayidx132 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom131, !dbg !1904
  %79 = load i8, i8* %arrayidx132, align 1, !dbg !1904
  %conv133 = zext i8 %79 to i32, !dbg !1904
  %cmp134 = icmp eq i32 %conv133, 9, !dbg !1904
  br i1 %cmp134, label %cond.true136, label %cond.false157, !dbg !1904

cond.true136:                                     ; preds = %cond.end129
  %80 = load i32, i32* %tmode.addr, align 4, !dbg !1904
  %idxprom137 = zext i32 %80 to i64, !dbg !1904
  %arrayidx138 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom137, !dbg !1904
  %81 = load i8, i8* %arrayidx138, align 1, !dbg !1904
  %conv139 = zext i8 %81 to i32, !dbg !1904
  %cmp140 = icmp eq i32 %conv139, 8, !dbg !1904
  br i1 %cmp140, label %cond.true148, label %lor.lhs.false142, !dbg !1904

lor.lhs.false142:                                 ; preds = %cond.true136
  %82 = load i32, i32* %tmode.addr, align 4, !dbg !1904
  %idxprom143 = zext i32 %82 to i64, !dbg !1904
  %arrayidx144 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom143, !dbg !1904
  %83 = load i8, i8* %arrayidx144, align 1, !dbg !1904
  %conv145 = zext i8 %83 to i32, !dbg !1904
  %cmp146 = icmp eq i32 %conv145, 9, !dbg !1904
  br i1 %cmp146, label %cond.true148, label %cond.false149, !dbg !1904

cond.true148:                                     ; preds = %lor.lhs.false142, %cond.true136
  %84 = load i32, i32* %tmode.addr, align 4, !dbg !1904
  br label %cond.end153, !dbg !1904

cond.false149:                                    ; preds = %lor.lhs.false142
  %85 = load i32, i32* %tmode.addr, align 4, !dbg !1904
  %idxprom150 = zext i32 %85 to i64, !dbg !1904
  %arrayidx151 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom150, !dbg !1904
  %86 = load i8, i8* %arrayidx151, align 1, !dbg !1904
  %conv152 = zext i8 %86 to i32, !dbg !1904
  br label %cond.end153, !dbg !1904

cond.end153:                                      ; preds = %cond.false149, %cond.true148
  %cond154 = phi i32 [ %84, %cond.true148 ], [ %conv152, %cond.false149 ], !dbg !1904
  %sub155 = sub i32 %cond154, 42, !dbg !1904
  %add156 = add i32 %sub155, 4, !dbg !1904
  br label %cond.end177, !dbg !1904

cond.false157:                                    ; preds = %cond.end129
  %87 = load i32, i32* %tmode.addr, align 4, !dbg !1904
  %idxprom158 = zext i32 %87 to i64, !dbg !1904
  %arrayidx159 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom158, !dbg !1904
  %88 = load i8, i8* %arrayidx159, align 1, !dbg !1904
  %conv160 = zext i8 %88 to i32, !dbg !1904
  %cmp161 = icmp eq i32 %conv160, 8, !dbg !1904
  br i1 %cmp161, label %cond.true169, label %lor.lhs.false163, !dbg !1904

lor.lhs.false163:                                 ; preds = %cond.false157
  %89 = load i32, i32* %tmode.addr, align 4, !dbg !1904
  %idxprom164 = zext i32 %89 to i64, !dbg !1904
  %arrayidx165 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom164, !dbg !1904
  %90 = load i8, i8* %arrayidx165, align 1, !dbg !1904
  %conv166 = zext i8 %90 to i32, !dbg !1904
  %cmp167 = icmp eq i32 %conv166, 9, !dbg !1904
  br i1 %cmp167, label %cond.true169, label %cond.false170, !dbg !1904

cond.true169:                                     ; preds = %lor.lhs.false163, %cond.false157
  %91 = load i32, i32* %tmode.addr, align 4, !dbg !1904
  br label %cond.end174, !dbg !1904

cond.false170:                                    ; preds = %lor.lhs.false163
  %92 = load i32, i32* %tmode.addr, align 4, !dbg !1904
  %idxprom171 = zext i32 %92 to i64, !dbg !1904
  %arrayidx172 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom171, !dbg !1904
  %93 = load i8, i8* %arrayidx172, align 1, !dbg !1904
  %conv173 = zext i8 %93 to i32, !dbg !1904
  br label %cond.end174, !dbg !1904

cond.end174:                                      ; preds = %cond.false170, %cond.true169
  %cond175 = phi i32 [ %91, %cond.true169 ], [ %conv173, %cond.false170 ], !dbg !1904
  %sub176 = sub i32 %cond175, 38, !dbg !1904
  br label %cond.end177, !dbg !1904

cond.end177:                                      ; preds = %cond.end174, %cond.end153
  %cond178 = phi i32 [ %add156, %cond.end153 ], [ %sub176, %cond.end174 ], !dbg !1904
  %idxprom179 = zext i32 %cond178 to i64, !dbg !1904
  %arrayidx180 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom179, !dbg !1904
  %94 = load %struct.real_format*, %struct.real_format** %arrayidx180, align 8, !dbg !1904
  %pnan = getelementptr inbounds %struct.real_format, %struct.real_format* %94, i32 0, i32 4, !dbg !1904
  %95 = load i32, i32* %pnan, align 8, !dbg !1904
  %96 = load i32, i32* %tmode.addr, align 4, !dbg !1904
  %idxprom181 = zext i32 %96 to i64, !dbg !1904
  %arrayidx182 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom181, !dbg !1904
  %97 = load i8, i8* %arrayidx182, align 1, !dbg !1904
  %conv183 = zext i8 %97 to i32, !dbg !1904
  %cmp184 = icmp eq i32 %conv183, 8, !dbg !1904
  br i1 %cmp184, label %cond.true192, label %lor.lhs.false186, !dbg !1904

lor.lhs.false186:                                 ; preds = %cond.end177
  %98 = load i32, i32* %tmode.addr, align 4, !dbg !1904
  %idxprom187 = zext i32 %98 to i64, !dbg !1904
  %arrayidx188 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom187, !dbg !1904
  %99 = load i8, i8* %arrayidx188, align 1, !dbg !1904
  %conv189 = zext i8 %99 to i32, !dbg !1904
  %cmp190 = icmp eq i32 %conv189, 9, !dbg !1904
  br i1 %cmp190, label %cond.true192, label %cond.false193, !dbg !1904

cond.true192:                                     ; preds = %lor.lhs.false186, %cond.end177
  %100 = load i32, i32* %tmode.addr, align 4, !dbg !1904
  br label %cond.end197, !dbg !1904

cond.false193:                                    ; preds = %lor.lhs.false186
  %101 = load i32, i32* %tmode.addr, align 4, !dbg !1904
  %idxprom194 = zext i32 %101 to i64, !dbg !1904
  %arrayidx195 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom194, !dbg !1904
  %102 = load i8, i8* %arrayidx195, align 1, !dbg !1904
  %conv196 = zext i8 %102 to i32, !dbg !1904
  br label %cond.end197, !dbg !1904

cond.end197:                                      ; preds = %cond.false193, %cond.true192
  %cond198 = phi i32 [ %100, %cond.true192 ], [ %conv196, %cond.false193 ], !dbg !1904
  %idxprom199 = zext i32 %cond198 to i64, !dbg !1904
  %arrayidx200 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom199, !dbg !1904
  %103 = load i8, i8* %arrayidx200, align 1, !dbg !1904
  %conv201 = zext i8 %103 to i32, !dbg !1904
  %cmp202 = icmp eq i32 %conv201, 9, !dbg !1904
  br i1 %cmp202, label %cond.true204, label %cond.false225, !dbg !1904

cond.true204:                                     ; preds = %cond.end197
  %104 = load i32, i32* %tmode.addr, align 4, !dbg !1904
  %idxprom205 = zext i32 %104 to i64, !dbg !1904
  %arrayidx206 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom205, !dbg !1904
  %105 = load i8, i8* %arrayidx206, align 1, !dbg !1904
  %conv207 = zext i8 %105 to i32, !dbg !1904
  %cmp208 = icmp eq i32 %conv207, 8, !dbg !1904
  br i1 %cmp208, label %cond.true216, label %lor.lhs.false210, !dbg !1904

lor.lhs.false210:                                 ; preds = %cond.true204
  %106 = load i32, i32* %tmode.addr, align 4, !dbg !1904
  %idxprom211 = zext i32 %106 to i64, !dbg !1904
  %arrayidx212 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom211, !dbg !1904
  %107 = load i8, i8* %arrayidx212, align 1, !dbg !1904
  %conv213 = zext i8 %107 to i32, !dbg !1904
  %cmp214 = icmp eq i32 %conv213, 9, !dbg !1904
  br i1 %cmp214, label %cond.true216, label %cond.false217, !dbg !1904

cond.true216:                                     ; preds = %lor.lhs.false210, %cond.true204
  %108 = load i32, i32* %tmode.addr, align 4, !dbg !1904
  br label %cond.end221, !dbg !1904

cond.false217:                                    ; preds = %lor.lhs.false210
  %109 = load i32, i32* %tmode.addr, align 4, !dbg !1904
  %idxprom218 = zext i32 %109 to i64, !dbg !1904
  %arrayidx219 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom218, !dbg !1904
  %110 = load i8, i8* %arrayidx219, align 1, !dbg !1904
  %conv220 = zext i8 %110 to i32, !dbg !1904
  br label %cond.end221, !dbg !1904

cond.end221:                                      ; preds = %cond.false217, %cond.true216
  %cond222 = phi i32 [ %108, %cond.true216 ], [ %conv220, %cond.false217 ], !dbg !1904
  %sub223 = sub i32 %cond222, 42, !dbg !1904
  %add224 = add i32 %sub223, 4, !dbg !1904
  br label %cond.end245, !dbg !1904

cond.false225:                                    ; preds = %cond.end197
  %111 = load i32, i32* %tmode.addr, align 4, !dbg !1904
  %idxprom226 = zext i32 %111 to i64, !dbg !1904
  %arrayidx227 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom226, !dbg !1904
  %112 = load i8, i8* %arrayidx227, align 1, !dbg !1904
  %conv228 = zext i8 %112 to i32, !dbg !1904
  %cmp229 = icmp eq i32 %conv228, 8, !dbg !1904
  br i1 %cmp229, label %cond.true237, label %lor.lhs.false231, !dbg !1904

lor.lhs.false231:                                 ; preds = %cond.false225
  %113 = load i32, i32* %tmode.addr, align 4, !dbg !1904
  %idxprom232 = zext i32 %113 to i64, !dbg !1904
  %arrayidx233 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom232, !dbg !1904
  %114 = load i8, i8* %arrayidx233, align 1, !dbg !1904
  %conv234 = zext i8 %114 to i32, !dbg !1904
  %cmp235 = icmp eq i32 %conv234, 9, !dbg !1904
  br i1 %cmp235, label %cond.true237, label %cond.false238, !dbg !1904

cond.true237:                                     ; preds = %lor.lhs.false231, %cond.false225
  %115 = load i32, i32* %tmode.addr, align 4, !dbg !1904
  br label %cond.end242, !dbg !1904

cond.false238:                                    ; preds = %lor.lhs.false231
  %116 = load i32, i32* %tmode.addr, align 4, !dbg !1904
  %idxprom239 = zext i32 %116 to i64, !dbg !1904
  %arrayidx240 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom239, !dbg !1904
  %117 = load i8, i8* %arrayidx240, align 1, !dbg !1904
  %conv241 = zext i8 %117 to i32, !dbg !1904
  br label %cond.end242, !dbg !1904

cond.end242:                                      ; preds = %cond.false238, %cond.true237
  %cond243 = phi i32 [ %115, %cond.true237 ], [ %conv241, %cond.false238 ], !dbg !1904
  %sub244 = sub i32 %cond243, 38, !dbg !1904
  br label %cond.end245, !dbg !1904

cond.end245:                                      ; preds = %cond.end242, %cond.end221
  %cond246 = phi i32 [ %add224, %cond.end221 ], [ %sub244, %cond.end242 ], !dbg !1904
  %idxprom247 = zext i32 %cond246 to i64, !dbg !1904
  %arrayidx248 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom247, !dbg !1904
  %118 = load %struct.real_format*, %struct.real_format** %arrayidx248, align 8, !dbg !1904
  %p249 = getelementptr inbounds %struct.real_format, %struct.real_format* %118, i32 0, i32 3, !dbg !1904
  %119 = load i32, i32* %p249, align 4, !dbg !1904
  %cmp250 = icmp slt i32 %95, %119, !dbg !1904
  br i1 %cmp250, label %land.end416, label %land.rhs, !dbg !1905

land.rhs:                                         ; preds = %cond.end245, %lor.lhs.false106
  %120 = load i32, i32* %imode.addr, align 4, !dbg !1906
  %idxprom252 = zext i32 %120 to i64, !dbg !1906
  %arrayidx253 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom252, !dbg !1906
  %121 = load i8, i8* %arrayidx253, align 1, !dbg !1906
  %conv254 = zext i8 %121 to i32, !dbg !1906
  %cmp255 = icmp eq i32 %conv254, 8, !dbg !1906
  br i1 %cmp255, label %land.rhs275, label %lor.lhs.false257, !dbg !1906

lor.lhs.false257:                                 ; preds = %land.rhs
  %122 = load i32, i32* %imode.addr, align 4, !dbg !1906
  %idxprom258 = zext i32 %122 to i64, !dbg !1906
  %arrayidx259 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom258, !dbg !1906
  %123 = load i8, i8* %arrayidx259, align 1, !dbg !1906
  %conv260 = zext i8 %123 to i32, !dbg !1906
  %cmp261 = icmp eq i32 %conv260, 9, !dbg !1906
  br i1 %cmp261, label %land.rhs275, label %lor.lhs.false263, !dbg !1906

lor.lhs.false263:                                 ; preds = %lor.lhs.false257
  %124 = load i32, i32* %imode.addr, align 4, !dbg !1906
  %idxprom264 = zext i32 %124 to i64, !dbg !1906
  %arrayidx265 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom264, !dbg !1906
  %125 = load i8, i8* %arrayidx265, align 1, !dbg !1906
  %conv266 = zext i8 %125 to i32, !dbg !1906
  %cmp267 = icmp eq i32 %conv266, 11, !dbg !1906
  br i1 %cmp267, label %land.rhs275, label %lor.lhs.false269, !dbg !1906

lor.lhs.false269:                                 ; preds = %lor.lhs.false263
  %126 = load i32, i32* %imode.addr, align 4, !dbg !1906
  %idxprom270 = zext i32 %126 to i64, !dbg !1906
  %arrayidx271 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom270, !dbg !1906
  %127 = load i8, i8* %arrayidx271, align 1, !dbg !1906
  %conv272 = zext i8 %127 to i32, !dbg !1906
  %cmp273 = icmp eq i32 %conv272, 17, !dbg !1906
  br i1 %cmp273, label %land.rhs275, label %land.end, !dbg !1906

land.rhs275:                                      ; preds = %lor.lhs.false269, %lor.lhs.false263, %lor.lhs.false257, %land.rhs
  %128 = load i32, i32* %imode.addr, align 4, !dbg !1906
  %idxprom276 = zext i32 %128 to i64, !dbg !1906
  %arrayidx277 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom276, !dbg !1906
  %129 = load i8, i8* %arrayidx277, align 1, !dbg !1906
  %conv278 = zext i8 %129 to i32, !dbg !1906
  %cmp279 = icmp eq i32 %conv278, 8, !dbg !1906
  br i1 %cmp279, label %cond.true287, label %lor.lhs.false281, !dbg !1906

lor.lhs.false281:                                 ; preds = %land.rhs275
  %130 = load i32, i32* %imode.addr, align 4, !dbg !1906
  %idxprom282 = zext i32 %130 to i64, !dbg !1906
  %arrayidx283 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom282, !dbg !1906
  %131 = load i8, i8* %arrayidx283, align 1, !dbg !1906
  %conv284 = zext i8 %131 to i32, !dbg !1906
  %cmp285 = icmp eq i32 %conv284, 9, !dbg !1906
  br i1 %cmp285, label %cond.true287, label %cond.false288, !dbg !1906

cond.true287:                                     ; preds = %lor.lhs.false281, %land.rhs275
  %132 = load i32, i32* %imode.addr, align 4, !dbg !1906
  br label %cond.end292, !dbg !1906

cond.false288:                                    ; preds = %lor.lhs.false281
  %133 = load i32, i32* %imode.addr, align 4, !dbg !1906
  %idxprom289 = zext i32 %133 to i64, !dbg !1906
  %arrayidx290 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom289, !dbg !1906
  %134 = load i8, i8* %arrayidx290, align 1, !dbg !1906
  %conv291 = zext i8 %134 to i32, !dbg !1906
  br label %cond.end292, !dbg !1906

cond.end292:                                      ; preds = %cond.false288, %cond.true287
  %cond293 = phi i32 [ %132, %cond.true287 ], [ %conv291, %cond.false288 ], !dbg !1906
  %idxprom294 = zext i32 %cond293 to i64, !dbg !1906
  %arrayidx295 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom294, !dbg !1906
  %135 = load i8, i8* %arrayidx295, align 1, !dbg !1906
  %conv296 = zext i8 %135 to i32, !dbg !1906
  %cmp297 = icmp eq i32 %conv296, 9, !dbg !1906
  br i1 %cmp297, label %cond.true299, label %cond.false320, !dbg !1906

cond.true299:                                     ; preds = %cond.end292
  %136 = load i32, i32* %imode.addr, align 4, !dbg !1906
  %idxprom300 = zext i32 %136 to i64, !dbg !1906
  %arrayidx301 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom300, !dbg !1906
  %137 = load i8, i8* %arrayidx301, align 1, !dbg !1906
  %conv302 = zext i8 %137 to i32, !dbg !1906
  %cmp303 = icmp eq i32 %conv302, 8, !dbg !1906
  br i1 %cmp303, label %cond.true311, label %lor.lhs.false305, !dbg !1906

lor.lhs.false305:                                 ; preds = %cond.true299
  %138 = load i32, i32* %imode.addr, align 4, !dbg !1906
  %idxprom306 = zext i32 %138 to i64, !dbg !1906
  %arrayidx307 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom306, !dbg !1906
  %139 = load i8, i8* %arrayidx307, align 1, !dbg !1906
  %conv308 = zext i8 %139 to i32, !dbg !1906
  %cmp309 = icmp eq i32 %conv308, 9, !dbg !1906
  br i1 %cmp309, label %cond.true311, label %cond.false312, !dbg !1906

cond.true311:                                     ; preds = %lor.lhs.false305, %cond.true299
  %140 = load i32, i32* %imode.addr, align 4, !dbg !1906
  br label %cond.end316, !dbg !1906

cond.false312:                                    ; preds = %lor.lhs.false305
  %141 = load i32, i32* %imode.addr, align 4, !dbg !1906
  %idxprom313 = zext i32 %141 to i64, !dbg !1906
  %arrayidx314 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom313, !dbg !1906
  %142 = load i8, i8* %arrayidx314, align 1, !dbg !1906
  %conv315 = zext i8 %142 to i32, !dbg !1906
  br label %cond.end316, !dbg !1906

cond.end316:                                      ; preds = %cond.false312, %cond.true311
  %cond317 = phi i32 [ %140, %cond.true311 ], [ %conv315, %cond.false312 ], !dbg !1906
  %sub318 = sub i32 %cond317, 42, !dbg !1906
  %add319 = add i32 %sub318, 4, !dbg !1906
  br label %cond.end340, !dbg !1906

cond.false320:                                    ; preds = %cond.end292
  %143 = load i32, i32* %imode.addr, align 4, !dbg !1906
  %idxprom321 = zext i32 %143 to i64, !dbg !1906
  %arrayidx322 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom321, !dbg !1906
  %144 = load i8, i8* %arrayidx322, align 1, !dbg !1906
  %conv323 = zext i8 %144 to i32, !dbg !1906
  %cmp324 = icmp eq i32 %conv323, 8, !dbg !1906
  br i1 %cmp324, label %cond.true332, label %lor.lhs.false326, !dbg !1906

lor.lhs.false326:                                 ; preds = %cond.false320
  %145 = load i32, i32* %imode.addr, align 4, !dbg !1906
  %idxprom327 = zext i32 %145 to i64, !dbg !1906
  %arrayidx328 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom327, !dbg !1906
  %146 = load i8, i8* %arrayidx328, align 1, !dbg !1906
  %conv329 = zext i8 %146 to i32, !dbg !1906
  %cmp330 = icmp eq i32 %conv329, 9, !dbg !1906
  br i1 %cmp330, label %cond.true332, label %cond.false333, !dbg !1906

cond.true332:                                     ; preds = %lor.lhs.false326, %cond.false320
  %147 = load i32, i32* %imode.addr, align 4, !dbg !1906
  br label %cond.end337, !dbg !1906

cond.false333:                                    ; preds = %lor.lhs.false326
  %148 = load i32, i32* %imode.addr, align 4, !dbg !1906
  %idxprom334 = zext i32 %148 to i64, !dbg !1906
  %arrayidx335 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom334, !dbg !1906
  %149 = load i8, i8* %arrayidx335, align 1, !dbg !1906
  %conv336 = zext i8 %149 to i32, !dbg !1906
  br label %cond.end337, !dbg !1906

cond.end337:                                      ; preds = %cond.false333, %cond.true332
  %cond338 = phi i32 [ %147, %cond.true332 ], [ %conv336, %cond.false333 ], !dbg !1906
  %sub339 = sub i32 %cond338, 38, !dbg !1906
  br label %cond.end340, !dbg !1906

cond.end340:                                      ; preds = %cond.end337, %cond.end316
  %cond341 = phi i32 [ %add319, %cond.end316 ], [ %sub339, %cond.end337 ], !dbg !1906
  %idxprom342 = zext i32 %cond341 to i64, !dbg !1906
  %arrayidx343 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom342, !dbg !1906
  %150 = load %struct.real_format*, %struct.real_format** %arrayidx343, align 8, !dbg !1906
  %pnan344 = getelementptr inbounds %struct.real_format, %struct.real_format* %150, i32 0, i32 4, !dbg !1906
  %151 = load i32, i32* %pnan344, align 8, !dbg !1906
  %152 = load i32, i32* %imode.addr, align 4, !dbg !1906
  %idxprom345 = zext i32 %152 to i64, !dbg !1906
  %arrayidx346 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom345, !dbg !1906
  %153 = load i8, i8* %arrayidx346, align 1, !dbg !1906
  %conv347 = zext i8 %153 to i32, !dbg !1906
  %cmp348 = icmp eq i32 %conv347, 8, !dbg !1906
  br i1 %cmp348, label %cond.true356, label %lor.lhs.false350, !dbg !1906

lor.lhs.false350:                                 ; preds = %cond.end340
  %154 = load i32, i32* %imode.addr, align 4, !dbg !1906
  %idxprom351 = zext i32 %154 to i64, !dbg !1906
  %arrayidx352 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom351, !dbg !1906
  %155 = load i8, i8* %arrayidx352, align 1, !dbg !1906
  %conv353 = zext i8 %155 to i32, !dbg !1906
  %cmp354 = icmp eq i32 %conv353, 9, !dbg !1906
  br i1 %cmp354, label %cond.true356, label %cond.false357, !dbg !1906

cond.true356:                                     ; preds = %lor.lhs.false350, %cond.end340
  %156 = load i32, i32* %imode.addr, align 4, !dbg !1906
  br label %cond.end361, !dbg !1906

cond.false357:                                    ; preds = %lor.lhs.false350
  %157 = load i32, i32* %imode.addr, align 4, !dbg !1906
  %idxprom358 = zext i32 %157 to i64, !dbg !1906
  %arrayidx359 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom358, !dbg !1906
  %158 = load i8, i8* %arrayidx359, align 1, !dbg !1906
  %conv360 = zext i8 %158 to i32, !dbg !1906
  br label %cond.end361, !dbg !1906

cond.end361:                                      ; preds = %cond.false357, %cond.true356
  %cond362 = phi i32 [ %156, %cond.true356 ], [ %conv360, %cond.false357 ], !dbg !1906
  %idxprom363 = zext i32 %cond362 to i64, !dbg !1906
  %arrayidx364 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom363, !dbg !1906
  %159 = load i8, i8* %arrayidx364, align 1, !dbg !1906
  %conv365 = zext i8 %159 to i32, !dbg !1906
  %cmp366 = icmp eq i32 %conv365, 9, !dbg !1906
  br i1 %cmp366, label %cond.true368, label %cond.false389, !dbg !1906

cond.true368:                                     ; preds = %cond.end361
  %160 = load i32, i32* %imode.addr, align 4, !dbg !1906
  %idxprom369 = zext i32 %160 to i64, !dbg !1906
  %arrayidx370 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom369, !dbg !1906
  %161 = load i8, i8* %arrayidx370, align 1, !dbg !1906
  %conv371 = zext i8 %161 to i32, !dbg !1906
  %cmp372 = icmp eq i32 %conv371, 8, !dbg !1906
  br i1 %cmp372, label %cond.true380, label %lor.lhs.false374, !dbg !1906

lor.lhs.false374:                                 ; preds = %cond.true368
  %162 = load i32, i32* %imode.addr, align 4, !dbg !1906
  %idxprom375 = zext i32 %162 to i64, !dbg !1906
  %arrayidx376 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom375, !dbg !1906
  %163 = load i8, i8* %arrayidx376, align 1, !dbg !1906
  %conv377 = zext i8 %163 to i32, !dbg !1906
  %cmp378 = icmp eq i32 %conv377, 9, !dbg !1906
  br i1 %cmp378, label %cond.true380, label %cond.false381, !dbg !1906

cond.true380:                                     ; preds = %lor.lhs.false374, %cond.true368
  %164 = load i32, i32* %imode.addr, align 4, !dbg !1906
  br label %cond.end385, !dbg !1906

cond.false381:                                    ; preds = %lor.lhs.false374
  %165 = load i32, i32* %imode.addr, align 4, !dbg !1906
  %idxprom382 = zext i32 %165 to i64, !dbg !1906
  %arrayidx383 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom382, !dbg !1906
  %166 = load i8, i8* %arrayidx383, align 1, !dbg !1906
  %conv384 = zext i8 %166 to i32, !dbg !1906
  br label %cond.end385, !dbg !1906

cond.end385:                                      ; preds = %cond.false381, %cond.true380
  %cond386 = phi i32 [ %164, %cond.true380 ], [ %conv384, %cond.false381 ], !dbg !1906
  %sub387 = sub i32 %cond386, 42, !dbg !1906
  %add388 = add i32 %sub387, 4, !dbg !1906
  br label %cond.end409, !dbg !1906

cond.false389:                                    ; preds = %cond.end361
  %167 = load i32, i32* %imode.addr, align 4, !dbg !1906
  %idxprom390 = zext i32 %167 to i64, !dbg !1906
  %arrayidx391 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom390, !dbg !1906
  %168 = load i8, i8* %arrayidx391, align 1, !dbg !1906
  %conv392 = zext i8 %168 to i32, !dbg !1906
  %cmp393 = icmp eq i32 %conv392, 8, !dbg !1906
  br i1 %cmp393, label %cond.true401, label %lor.lhs.false395, !dbg !1906

lor.lhs.false395:                                 ; preds = %cond.false389
  %169 = load i32, i32* %imode.addr, align 4, !dbg !1906
  %idxprom396 = zext i32 %169 to i64, !dbg !1906
  %arrayidx397 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom396, !dbg !1906
  %170 = load i8, i8* %arrayidx397, align 1, !dbg !1906
  %conv398 = zext i8 %170 to i32, !dbg !1906
  %cmp399 = icmp eq i32 %conv398, 9, !dbg !1906
  br i1 %cmp399, label %cond.true401, label %cond.false402, !dbg !1906

cond.true401:                                     ; preds = %lor.lhs.false395, %cond.false389
  %171 = load i32, i32* %imode.addr, align 4, !dbg !1906
  br label %cond.end406, !dbg !1906

cond.false402:                                    ; preds = %lor.lhs.false395
  %172 = load i32, i32* %imode.addr, align 4, !dbg !1906
  %idxprom403 = zext i32 %172 to i64, !dbg !1906
  %arrayidx404 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom403, !dbg !1906
  %173 = load i8, i8* %arrayidx404, align 1, !dbg !1906
  %conv405 = zext i8 %173 to i32, !dbg !1906
  br label %cond.end406, !dbg !1906

cond.end406:                                      ; preds = %cond.false402, %cond.true401
  %cond407 = phi i32 [ %171, %cond.true401 ], [ %conv405, %cond.false402 ], !dbg !1906
  %sub408 = sub i32 %cond407, 38, !dbg !1906
  br label %cond.end409, !dbg !1906

cond.end409:                                      ; preds = %cond.end406, %cond.end385
  %cond410 = phi i32 [ %add388, %cond.end385 ], [ %sub408, %cond.end406 ], !dbg !1906
  %idxprom411 = zext i32 %cond410 to i64, !dbg !1906
  %arrayidx412 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom411, !dbg !1906
  %174 = load %struct.real_format*, %struct.real_format** %arrayidx412, align 8, !dbg !1906
  %p413 = getelementptr inbounds %struct.real_format, %struct.real_format* %174, i32 0, i32 3, !dbg !1906
  %175 = load i32, i32* %p413, align 4, !dbg !1906
  %cmp414 = icmp slt i32 %151, %175, !dbg !1906
  br label %land.end

land.end:                                         ; preds = %cond.end409, %lor.lhs.false269
  %176 = phi i1 [ false, %lor.lhs.false269 ], [ %cmp414, %cond.end409 ], !dbg !1907
  %lnot = xor i1 %176, true, !dbg !1908
  br label %land.end416

land.end416:                                      ; preds = %land.end, %cond.end245, %land.lhs.true83, %land.lhs.true77, %land.lhs.true71, %land.lhs.true65, %land.lhs.true59, %land.lhs.true49, %land.lhs.true42, %land.lhs.true33, %land.lhs.true25, %land.lhs.true, %cond.end15
  %177 = phi i1 [ false, %cond.end245 ], [ false, %land.lhs.true83 ], [ false, %land.lhs.true77 ], [ false, %land.lhs.true71 ], [ false, %land.lhs.true65 ], [ false, %land.lhs.true59 ], [ false, %land.lhs.true49 ], [ false, %land.lhs.true42 ], [ false, %land.lhs.true33 ], [ false, %land.lhs.true25 ], [ false, %land.lhs.true ], [ false, %cond.end15 ], [ %lnot, %land.end ], !dbg !1907
  %land.ext = zext i1 %177 to i32, !dbg !1905
  %conv417 = trunc i32 %land.ext to i8, !dbg !1909
  ret i8 %conv417, !dbg !1910
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @real_to_integer(%struct.real_value* %r) #0 !dbg !1911 {
entry:
  %retval = alloca i64, align 8
  %r.addr = alloca %struct.real_value*, align 8
  %i = alloca i64, align 8
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !1914, metadata !DIExpression()), !dbg !1915
  call void @llvm.dbg.declare(metadata i64* %i, metadata !1916, metadata !DIExpression()), !dbg !1917
  %0 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1918
  %1 = bitcast %struct.real_value* %0 to i32*, !dbg !1919
  %bf.load = load i32, i32* %1, align 8, !dbg !1919
  %bf.clear = and i32 %bf.load, 3, !dbg !1919
  switch i32 %bf.clear, label %sw.default [
    i32 0, label %sw.bb
    i32 2, label %sw.bb1
    i32 3, label %sw.bb1
    i32 1, label %sw.bb4
  ], !dbg !1920

sw.bb:                                            ; preds = %entry
  br label %underflow, !dbg !1921

underflow:                                        ; preds = %if.then13, %sw.bb
  call void @llvm.dbg.label(metadata !1922), !dbg !1924
  store i64 0, i64* %retval, align 8, !dbg !1925
  br label %return, !dbg !1925

sw.bb1:                                           ; preds = %entry, %entry
  br label %overflow, !dbg !1925

overflow:                                         ; preds = %if.then20, %sw.bb1
  call void @llvm.dbg.label(metadata !1926), !dbg !1927
  store i64 -9223372036854775808, i64* %i, align 8, !dbg !1928
  %2 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1929
  %3 = bitcast %struct.real_value* %2 to i32*, !dbg !1931
  %bf.load2 = load i32, i32* %3, align 8, !dbg !1931
  %bf.lshr = lshr i32 %bf.load2, 3, !dbg !1931
  %bf.clear3 = and i32 %bf.lshr, 1, !dbg !1931
  %tobool = icmp ne i32 %bf.clear3, 0, !dbg !1929
  br i1 %tobool, label %if.end, label %if.then, !dbg !1932

if.then:                                          ; preds = %overflow
  %4 = load i64, i64* %i, align 8, !dbg !1933
  %dec = add i64 %4, -1, !dbg !1933
  store i64 %dec, i64* %i, align 8, !dbg !1933
  br label %if.end, !dbg !1934

if.end:                                           ; preds = %if.then, %overflow
  %5 = load i64, i64* %i, align 8, !dbg !1935
  store i64 %5, i64* %retval, align 8, !dbg !1936
  br label %return, !dbg !1936

sw.bb4:                                           ; preds = %entry
  %6 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1937
  %7 = bitcast %struct.real_value* %6 to i32*, !dbg !1939
  %bf.load5 = load i32, i32* %7, align 8, !dbg !1939
  %bf.lshr6 = lshr i32 %bf.load5, 2, !dbg !1939
  %bf.clear7 = and i32 %bf.lshr6, 1, !dbg !1939
  %tobool8 = icmp ne i32 %bf.clear7, 0, !dbg !1937
  br i1 %tobool8, label %if.then9, label %if.end10, !dbg !1940

if.then9:                                         ; preds = %sw.bb4
  %8 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1941
  %call = call i64 @decimal_real_to_integer(%struct.real_value* %8), !dbg !1942
  store i64 %call, i64* %retval, align 8, !dbg !1943
  br label %return, !dbg !1943

if.end10:                                         ; preds = %sw.bb4
  %9 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1944
  %10 = bitcast %struct.real_value* %9 to i32*, !dbg !1944
  %bf.load11 = load i32, i32* %10, align 8, !dbg !1944
  %bf.lshr12 = lshr i32 %bf.load11, 6, !dbg !1944
  %xor = xor i32 %bf.lshr12, 33554432, !dbg !1944
  %sub = sub nsw i32 %xor, 33554432, !dbg !1944
  %cmp = icmp sle i32 %sub, 0, !dbg !1946
  br i1 %cmp, label %if.then13, label %if.end14, !dbg !1947

if.then13:                                        ; preds = %if.end10
  br label %underflow, !dbg !1948

if.end14:                                         ; preds = %if.end10
  %11 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1949
  %12 = bitcast %struct.real_value* %11 to i32*, !dbg !1949
  %bf.load15 = load i32, i32* %12, align 8, !dbg !1949
  %bf.lshr16 = lshr i32 %bf.load15, 6, !dbg !1949
  %xor17 = xor i32 %bf.lshr16, 33554432, !dbg !1949
  %sub18 = sub nsw i32 %xor17, 33554432, !dbg !1949
  %cmp19 = icmp sgt i32 %sub18, 64, !dbg !1951
  br i1 %cmp19, label %if.then20, label %if.end21, !dbg !1952

if.then20:                                        ; preds = %if.end14
  br label %overflow, !dbg !1953

if.end21:                                         ; preds = %if.end14
  %13 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1954
  %sig = getelementptr inbounds %struct.real_value, %struct.real_value* %13, i32 0, i32 1, !dbg !1956
  %arrayidx = getelementptr inbounds [3 x i64], [3 x i64]* %sig, i64 0, i64 2, !dbg !1954
  %14 = load i64, i64* %arrayidx, align 8, !dbg !1954
  store i64 %14, i64* %i, align 8, !dbg !1957
  %15 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1958
  %16 = bitcast %struct.real_value* %15 to i32*, !dbg !1958
  %bf.load22 = load i32, i32* %16, align 8, !dbg !1958
  %bf.lshr23 = lshr i32 %bf.load22, 6, !dbg !1958
  %xor24 = xor i32 %bf.lshr23, 33554432, !dbg !1958
  %sub25 = sub nsw i32 %xor24, 33554432, !dbg !1958
  %sub26 = sub nsw i32 64, %sub25, !dbg !1959
  %17 = load i64, i64* %i, align 8, !dbg !1960
  %sh_prom = zext i32 %sub26 to i64, !dbg !1960
  %shr = lshr i64 %17, %sh_prom, !dbg !1960
  store i64 %shr, i64* %i, align 8, !dbg !1960
  %18 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1961
  %19 = bitcast %struct.real_value* %18 to i32*, !dbg !1963
  %bf.load27 = load i32, i32* %19, align 8, !dbg !1963
  %bf.lshr28 = lshr i32 %bf.load27, 3, !dbg !1963
  %bf.clear29 = and i32 %bf.lshr28, 1, !dbg !1963
  %tobool30 = icmp ne i32 %bf.clear29, 0, !dbg !1961
  br i1 %tobool30, label %if.then31, label %if.end33, !dbg !1964

if.then31:                                        ; preds = %if.end21
  %20 = load i64, i64* %i, align 8, !dbg !1965
  %sub32 = sub i64 0, %20, !dbg !1966
  store i64 %sub32, i64* %i, align 8, !dbg !1967
  br label %if.end33, !dbg !1968

if.end33:                                         ; preds = %if.then31, %if.end21
  %21 = load i64, i64* %i, align 8, !dbg !1969
  store i64 %21, i64* %retval, align 8, !dbg !1970
  br label %return, !dbg !1970

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 1367, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !1971
  br label %sw.epilog, !dbg !1972

sw.epilog:                                        ; preds = %sw.default
  store i64 0, i64* %retval, align 8, !dbg !1973
  br label %return, !dbg !1973

return:                                           ; preds = %sw.epilog, %if.end33, %if.then9, %if.end, %underflow
  %22 = load i64, i64* %retval, align 8, !dbg !1974
  ret i64 %22, !dbg !1974
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

declare dso_local i64 @decimal_real_to_integer(%struct.real_value*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @real_to_integer2(i64* %plow, i64* %phigh, %struct.real_value* %r) #0 !dbg !1975 {
entry:
  %plow.addr = alloca i64*, align 8
  %phigh.addr = alloca i64*, align 8
  %r.addr = alloca %struct.real_value*, align 8
  %t = alloca %struct.real_value, align 8
  %low = alloca i64, align 8
  %high = alloca i64, align 8
  %exp = alloca i32, align 4
  store i64* %plow, i64** %plow.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %plow.addr, metadata !1978, metadata !DIExpression()), !dbg !1979
  store i64* %phigh, i64** %phigh.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %phigh.addr, metadata !1980, metadata !DIExpression()), !dbg !1981
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !1982, metadata !DIExpression()), !dbg !1983
  call void @llvm.dbg.declare(metadata %struct.real_value* %t, metadata !1984, metadata !DIExpression()), !dbg !1985
  call void @llvm.dbg.declare(metadata i64* %low, metadata !1986, metadata !DIExpression()), !dbg !1987
  call void @llvm.dbg.declare(metadata i64* %high, metadata !1988, metadata !DIExpression()), !dbg !1989
  call void @llvm.dbg.declare(metadata i32* %exp, metadata !1990, metadata !DIExpression()), !dbg !1991
  %0 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !1992
  %1 = bitcast %struct.real_value* %0 to i32*, !dbg !1993
  %bf.load = load i32, i32* %1, align 8, !dbg !1993
  %bf.clear = and i32 %bf.load, 3, !dbg !1993
  switch i32 %bf.clear, label %sw.default [
    i32 0, label %sw.bb
    i32 2, label %sw.bb1
    i32 3, label %sw.bb1
    i32 1, label %sw.bb4
  ], !dbg !1994

sw.bb:                                            ; preds = %entry
  br label %underflow, !dbg !1995

underflow:                                        ; preds = %if.then13, %sw.bb
  call void @llvm.dbg.label(metadata !1996), !dbg !1998
  store i64 0, i64* %high, align 8, !dbg !1999
  store i64 0, i64* %low, align 8, !dbg !2000
  br label %sw.epilog, !dbg !2001

sw.bb1:                                           ; preds = %entry, %entry
  br label %overflow, !dbg !2001

overflow:                                         ; preds = %if.then16, %sw.bb1
  call void @llvm.dbg.label(metadata !2002), !dbg !2003
  store i64 -9223372036854775808, i64* %high, align 8, !dbg !2004
  %2 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !2005
  %3 = bitcast %struct.real_value* %2 to i32*, !dbg !2007
  %bf.load2 = load i32, i32* %3, align 8, !dbg !2007
  %bf.lshr = lshr i32 %bf.load2, 3, !dbg !2007
  %bf.clear3 = and i32 %bf.lshr, 1, !dbg !2007
  %tobool = icmp ne i32 %bf.clear3, 0, !dbg !2005
  br i1 %tobool, label %if.then, label %if.else, !dbg !2008

if.then:                                          ; preds = %overflow
  store i64 0, i64* %low, align 8, !dbg !2009
  br label %if.end, !dbg !2010

if.else:                                          ; preds = %overflow
  %4 = load i64, i64* %high, align 8, !dbg !2011
  %dec = add nsw i64 %4, -1, !dbg !2011
  store i64 %dec, i64* %high, align 8, !dbg !2011
  store i64 -1, i64* %low, align 8, !dbg !2013
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %sw.epilog, !dbg !2014

sw.bb4:                                           ; preds = %entry
  %5 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !2015
  %6 = bitcast %struct.real_value* %5 to i32*, !dbg !2017
  %bf.load5 = load i32, i32* %6, align 8, !dbg !2017
  %bf.lshr6 = lshr i32 %bf.load5, 2, !dbg !2017
  %bf.clear7 = and i32 %bf.lshr6, 1, !dbg !2017
  %tobool8 = icmp ne i32 %bf.clear7, 0, !dbg !2015
  br i1 %tobool8, label %if.then9, label %if.end10, !dbg !2018

if.then9:                                         ; preds = %sw.bb4
  %7 = load i64*, i64** %plow.addr, align 8, !dbg !2019
  %8 = load i64*, i64** %phigh.addr, align 8, !dbg !2021
  %9 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !2022
  call void @decimal_real_to_integer2(i64* %7, i64* %8, %struct.real_value* %9), !dbg !2023
  br label %return, !dbg !2024

if.end10:                                         ; preds = %sw.bb4
  %10 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !2025
  %11 = bitcast %struct.real_value* %10 to i32*, !dbg !2025
  %bf.load11 = load i32, i32* %11, align 8, !dbg !2025
  %bf.lshr12 = lshr i32 %bf.load11, 6, !dbg !2025
  %xor = xor i32 %bf.lshr12, 33554432, !dbg !2025
  %sub = sub nsw i32 %xor, 33554432, !dbg !2025
  store i32 %sub, i32* %exp, align 4, !dbg !2026
  %12 = load i32, i32* %exp, align 4, !dbg !2027
  %cmp = icmp sle i32 %12, 0, !dbg !2029
  br i1 %cmp, label %if.then13, label %if.end14, !dbg !2030

if.then13:                                        ; preds = %if.end10
  br label %underflow, !dbg !2031

if.end14:                                         ; preds = %if.end10
  %13 = load i32, i32* %exp, align 4, !dbg !2032
  %cmp15 = icmp sgt i32 %13, 128, !dbg !2034
  br i1 %cmp15, label %if.then16, label %if.end17, !dbg !2035

if.then16:                                        ; preds = %if.end14
  br label %overflow, !dbg !2036

if.end17:                                         ; preds = %if.end14
  %14 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !2037
  %15 = load i32, i32* %exp, align 4, !dbg !2038
  %sub18 = sub nsw i32 128, %15, !dbg !2039
  call void @rshift_significand(%struct.real_value* %t, %struct.real_value* %14, i32 %sub18), !dbg !2040
  %sig = getelementptr inbounds %struct.real_value, %struct.real_value* %t, i32 0, i32 1, !dbg !2041
  %arrayidx = getelementptr inbounds [3 x i64], [3 x i64]* %sig, i64 0, i64 2, !dbg !2044
  %16 = load i64, i64* %arrayidx, align 8, !dbg !2044
  store i64 %16, i64* %high, align 8, !dbg !2045
  %sig19 = getelementptr inbounds %struct.real_value, %struct.real_value* %t, i32 0, i32 1, !dbg !2046
  %arrayidx20 = getelementptr inbounds [3 x i64], [3 x i64]* %sig19, i64 0, i64 1, !dbg !2047
  %17 = load i64, i64* %arrayidx20, align 8, !dbg !2047
  store i64 %17, i64* %low, align 8, !dbg !2048
  %18 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !2049
  %19 = bitcast %struct.real_value* %18 to i32*, !dbg !2051
  %bf.load21 = load i32, i32* %19, align 8, !dbg !2051
  %bf.lshr22 = lshr i32 %bf.load21, 3, !dbg !2051
  %bf.clear23 = and i32 %bf.lshr22, 1, !dbg !2051
  %tobool24 = icmp ne i32 %bf.clear23, 0, !dbg !2049
  br i1 %tobool24, label %if.then25, label %if.end32, !dbg !2052

if.then25:                                        ; preds = %if.end17
  %20 = load i64, i64* %low, align 8, !dbg !2053
  %cmp26 = icmp eq i64 %20, 0, !dbg !2056
  br i1 %cmp26, label %if.then27, label %if.else29, !dbg !2057

if.then27:                                        ; preds = %if.then25
  %21 = load i64, i64* %high, align 8, !dbg !2058
  %sub28 = sub nsw i64 0, %21, !dbg !2059
  store i64 %sub28, i64* %high, align 8, !dbg !2060
  br label %if.end31, !dbg !2061

if.else29:                                        ; preds = %if.then25
  %22 = load i64, i64* %low, align 8, !dbg !2062
  %sub30 = sub nsw i64 0, %22, !dbg !2063
  store i64 %sub30, i64* %low, align 8, !dbg !2064
  %23 = load i64, i64* %high, align 8, !dbg !2065
  %neg = xor i64 %23, -1, !dbg !2066
  store i64 %neg, i64* %high, align 8, !dbg !2067
  br label %if.end31

if.end31:                                         ; preds = %if.else29, %if.then27
  br label %if.end32, !dbg !2068

if.end32:                                         ; preds = %if.end31, %if.end17
  br label %sw.epilog, !dbg !2069

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 1449, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2070
  br label %sw.epilog, !dbg !2071

sw.epilog:                                        ; preds = %sw.default, %if.end32, %if.end, %underflow
  %24 = load i64, i64* %low, align 8, !dbg !2072
  %25 = load i64*, i64** %plow.addr, align 8, !dbg !2073
  store i64 %24, i64* %25, align 8, !dbg !2074
  %26 = load i64, i64* %high, align 8, !dbg !2075
  %27 = load i64*, i64** %phigh.addr, align 8, !dbg !2076
  store i64 %26, i64* %27, align 8, !dbg !2077
  br label %return, !dbg !2078

return:                                           ; preds = %sw.epilog, %if.then9
  ret void, !dbg !2078
}

declare dso_local void @decimal_real_to_integer2(i64*, i64*, %struct.real_value*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @rshift_significand(%struct.real_value* %r, %struct.real_value* %a, i32 %n) #0 !dbg !2079 {
entry:
  %r.addr = alloca %struct.real_value*, align 8
  %a.addr = alloca %struct.real_value*, align 8
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %ofs = alloca i32, align 4
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !2082, metadata !DIExpression()), !dbg !2083
  store %struct.real_value* %a, %struct.real_value** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %a.addr, metadata !2084, metadata !DIExpression()), !dbg !2085
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !2086, metadata !DIExpression()), !dbg !2087
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2088, metadata !DIExpression()), !dbg !2089
  call void @llvm.dbg.declare(metadata i32* %ofs, metadata !2090, metadata !DIExpression()), !dbg !2091
  %0 = load i32, i32* %n.addr, align 4, !dbg !2092
  %div = udiv i32 %0, 64, !dbg !2093
  store i32 %div, i32* %ofs, align 4, !dbg !2091
  %1 = load i32, i32* %n.addr, align 4, !dbg !2094
  %and = and i32 %1, 63, !dbg !2094
  store i32 %and, i32* %n.addr, align 4, !dbg !2094
  %2 = load i32, i32* %n.addr, align 4, !dbg !2095
  %cmp = icmp ne i32 %2, 0, !dbg !2097
  br i1 %cmp, label %if.then, label %if.else, !dbg !2098

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !2099
  br label %for.cond, !dbg !2102

for.cond:                                         ; preds = %for.inc, %if.then
  %3 = load i32, i32* %i, align 4, !dbg !2103
  %cmp1 = icmp ult i32 %3, 3, !dbg !2105
  br i1 %cmp1, label %for.body, label %for.end, !dbg !2106

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %ofs, align 4, !dbg !2107
  %5 = load i32, i32* %i, align 4, !dbg !2109
  %add = add i32 %4, %5, !dbg !2110
  %cmp2 = icmp uge i32 %add, 3, !dbg !2111
  br i1 %cmp2, label %cond.true, label %cond.false, !dbg !2107

cond.true:                                        ; preds = %for.body
  br label %cond.end, !dbg !2107

cond.false:                                       ; preds = %for.body
  %6 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !2112
  %sig = getelementptr inbounds %struct.real_value, %struct.real_value* %6, i32 0, i32 1, !dbg !2113
  %7 = load i32, i32* %ofs, align 4, !dbg !2114
  %8 = load i32, i32* %i, align 4, !dbg !2115
  %add3 = add i32 %7, %8, !dbg !2116
  %idxprom = zext i32 %add3 to i64, !dbg !2112
  %arrayidx = getelementptr inbounds [3 x i64], [3 x i64]* %sig, i64 0, i64 %idxprom, !dbg !2112
  %9 = load i64, i64* %arrayidx, align 8, !dbg !2112
  br label %cond.end, !dbg !2107

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 0, %cond.true ], [ %9, %cond.false ], !dbg !2107
  %10 = load i32, i32* %n.addr, align 4, !dbg !2117
  %sh_prom = zext i32 %10 to i64, !dbg !2118
  %shr = lshr i64 %cond, %sh_prom, !dbg !2118
  %11 = load i32, i32* %ofs, align 4, !dbg !2119
  %12 = load i32, i32* %i, align 4, !dbg !2120
  %add4 = add i32 %11, %12, !dbg !2121
  %add5 = add i32 %add4, 1, !dbg !2122
  %cmp6 = icmp uge i32 %add5, 3, !dbg !2123
  br i1 %cmp6, label %cond.true7, label %cond.false8, !dbg !2119

cond.true7:                                       ; preds = %cond.end
  br label %cond.end14, !dbg !2119

cond.false8:                                      ; preds = %cond.end
  %13 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !2124
  %sig9 = getelementptr inbounds %struct.real_value, %struct.real_value* %13, i32 0, i32 1, !dbg !2125
  %14 = load i32, i32* %ofs, align 4, !dbg !2126
  %15 = load i32, i32* %i, align 4, !dbg !2127
  %add10 = add i32 %14, %15, !dbg !2128
  %add11 = add i32 %add10, 1, !dbg !2129
  %idxprom12 = zext i32 %add11 to i64, !dbg !2124
  %arrayidx13 = getelementptr inbounds [3 x i64], [3 x i64]* %sig9, i64 0, i64 %idxprom12, !dbg !2124
  %16 = load i64, i64* %arrayidx13, align 8, !dbg !2124
  br label %cond.end14, !dbg !2119

cond.end14:                                       ; preds = %cond.false8, %cond.true7
  %cond15 = phi i64 [ 0, %cond.true7 ], [ %16, %cond.false8 ], !dbg !2119
  %17 = load i32, i32* %n.addr, align 4, !dbg !2130
  %sub = sub i32 64, %17, !dbg !2131
  %sh_prom16 = zext i32 %sub to i64, !dbg !2132
  %shl = shl i64 %cond15, %sh_prom16, !dbg !2132
  %or = or i64 %shr, %shl, !dbg !2133
  %18 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !2134
  %sig17 = getelementptr inbounds %struct.real_value, %struct.real_value* %18, i32 0, i32 1, !dbg !2135
  %19 = load i32, i32* %i, align 4, !dbg !2136
  %idxprom18 = zext i32 %19 to i64, !dbg !2134
  %arrayidx19 = getelementptr inbounds [3 x i64], [3 x i64]* %sig17, i64 0, i64 %idxprom18, !dbg !2134
  store i64 %or, i64* %arrayidx19, align 8, !dbg !2137
  br label %for.inc, !dbg !2138

for.inc:                                          ; preds = %cond.end14
  %20 = load i32, i32* %i, align 4, !dbg !2139
  %inc = add i32 %20, 1, !dbg !2139
  store i32 %inc, i32* %i, align 4, !dbg !2139
  br label %for.cond, !dbg !2140, !llvm.loop !2141

for.end:                                          ; preds = %for.cond
  br label %if.end, !dbg !2143

if.else:                                          ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !2144
  br label %for.cond20, !dbg !2147

for.cond20:                                       ; preds = %for.inc31, %if.else
  %21 = load i32, i32* %ofs, align 4, !dbg !2148
  %22 = load i32, i32* %i, align 4, !dbg !2150
  %add21 = add i32 %21, %22, !dbg !2151
  %cmp22 = icmp ult i32 %add21, 3, !dbg !2152
  br i1 %cmp22, label %for.body23, label %for.end33, !dbg !2153

for.body23:                                       ; preds = %for.cond20
  %23 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !2154
  %sig24 = getelementptr inbounds %struct.real_value, %struct.real_value* %23, i32 0, i32 1, !dbg !2155
  %24 = load i32, i32* %ofs, align 4, !dbg !2156
  %25 = load i32, i32* %i, align 4, !dbg !2157
  %add25 = add i32 %24, %25, !dbg !2158
  %idxprom26 = zext i32 %add25 to i64, !dbg !2154
  %arrayidx27 = getelementptr inbounds [3 x i64], [3 x i64]* %sig24, i64 0, i64 %idxprom26, !dbg !2154
  %26 = load i64, i64* %arrayidx27, align 8, !dbg !2154
  %27 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !2159
  %sig28 = getelementptr inbounds %struct.real_value, %struct.real_value* %27, i32 0, i32 1, !dbg !2160
  %28 = load i32, i32* %i, align 4, !dbg !2161
  %idxprom29 = zext i32 %28 to i64, !dbg !2159
  %arrayidx30 = getelementptr inbounds [3 x i64], [3 x i64]* %sig28, i64 0, i64 %idxprom29, !dbg !2159
  store i64 %26, i64* %arrayidx30, align 8, !dbg !2162
  br label %for.inc31, !dbg !2159

for.inc31:                                        ; preds = %for.body23
  %29 = load i32, i32* %i, align 4, !dbg !2163
  %inc32 = add i32 %29, 1, !dbg !2163
  store i32 %inc32, i32* %i, align 4, !dbg !2163
  br label %for.cond20, !dbg !2164, !llvm.loop !2165

for.end33:                                        ; preds = %for.cond20
  br label %for.cond34, !dbg !2167

for.cond34:                                       ; preds = %for.inc40, %for.end33
  %30 = load i32, i32* %i, align 4, !dbg !2168
  %cmp35 = icmp ult i32 %30, 3, !dbg !2171
  br i1 %cmp35, label %for.body36, label %for.end42, !dbg !2172

for.body36:                                       ; preds = %for.cond34
  %31 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !2173
  %sig37 = getelementptr inbounds %struct.real_value, %struct.real_value* %31, i32 0, i32 1, !dbg !2174
  %32 = load i32, i32* %i, align 4, !dbg !2175
  %idxprom38 = zext i32 %32 to i64, !dbg !2173
  %arrayidx39 = getelementptr inbounds [3 x i64], [3 x i64]* %sig37, i64 0, i64 %idxprom38, !dbg !2173
  store i64 0, i64* %arrayidx39, align 8, !dbg !2176
  br label %for.inc40, !dbg !2173

for.inc40:                                        ; preds = %for.body36
  %33 = load i32, i32* %i, align 4, !dbg !2177
  %inc41 = add i32 %33, 1, !dbg !2177
  store i32 %inc41, i32* %i, align 4, !dbg !2177
  br label %for.cond34, !dbg !2178, !llvm.loop !2179

for.end42:                                        ; preds = %for.cond34
  br label %if.end

if.end:                                           ; preds = %for.end42, %for.end
  ret void, !dbg !2181
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @real_to_decimal_for_mode(i8* %str, %struct.real_value* %r_orig, i64 %buf_size, i64 %digits, i32 %crop_trailing_zeros, i32 %mode) #0 !dbg !2182 {
entry:
  %str.addr = alloca i8*, align 8
  %r_orig.addr = alloca %struct.real_value*, align 8
  %buf_size.addr = alloca i64, align 8
  %digits.addr = alloca i64, align 8
  %crop_trailing_zeros.addr = alloca i32, align 4
  %mode.addr = alloca i32, align 4
  %fmt = alloca %struct.real_format*, align 8
  %one = alloca %struct.real_value*, align 8
  %ten = alloca %struct.real_value*, align 8
  %r = alloca %struct.real_value, align 8
  %pten = alloca %struct.real_value, align 8
  %u = alloca %struct.real_value, align 8
  %v = alloca %struct.real_value, align 8
  %dec_exp = alloca i32, align 4
  %cmp_one = alloca i32, align 4
  %digit = alloca i32, align 4
  %max_digits = alloca i64, align 8
  %p = alloca i8*, align 8
  %first = alloca i8*, align 8
  %last = alloca i8*, align 8
  %sign = alloca i8, align 1
  %round_up = alloca i8, align 1
  %m = alloca i32, align 4
  %t = alloca %struct.real_value, align 8
  %ptentwo = alloca %struct.real_value*, align 8
  %m143 = alloca i32, align 4
  %ptentwo171 = alloca %struct.real_value*, align 8
  %ptenmtwo = alloca %struct.real_value*, align 8
  store i8* %str, i8** %str.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !2189, metadata !DIExpression()), !dbg !2190
  store %struct.real_value* %r_orig, %struct.real_value** %r_orig.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r_orig.addr, metadata !2191, metadata !DIExpression()), !dbg !2192
  store i64 %buf_size, i64* %buf_size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %buf_size.addr, metadata !2193, metadata !DIExpression()), !dbg !2194
  store i64 %digits, i64* %digits.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %digits.addr, metadata !2195, metadata !DIExpression()), !dbg !2196
  store i32 %crop_trailing_zeros, i32* %crop_trailing_zeros.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %crop_trailing_zeros.addr, metadata !2197, metadata !DIExpression()), !dbg !2198
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !2199, metadata !DIExpression()), !dbg !2200
  call void @llvm.dbg.declare(metadata %struct.real_format** %fmt, metadata !2201, metadata !DIExpression()), !dbg !2202
  store %struct.real_format* null, %struct.real_format** %fmt, align 8, !dbg !2202
  call void @llvm.dbg.declare(metadata %struct.real_value** %one, metadata !2203, metadata !DIExpression()), !dbg !2204
  call void @llvm.dbg.declare(metadata %struct.real_value** %ten, metadata !2205, metadata !DIExpression()), !dbg !2206
  call void @llvm.dbg.declare(metadata %struct.real_value* %r, metadata !2207, metadata !DIExpression()), !dbg !2208
  call void @llvm.dbg.declare(metadata %struct.real_value* %pten, metadata !2209, metadata !DIExpression()), !dbg !2210
  call void @llvm.dbg.declare(metadata %struct.real_value* %u, metadata !2211, metadata !DIExpression()), !dbg !2212
  call void @llvm.dbg.declare(metadata %struct.real_value* %v, metadata !2213, metadata !DIExpression()), !dbg !2214
  call void @llvm.dbg.declare(metadata i32* %dec_exp, metadata !2215, metadata !DIExpression()), !dbg !2216
  call void @llvm.dbg.declare(metadata i32* %cmp_one, metadata !2217, metadata !DIExpression()), !dbg !2218
  call void @llvm.dbg.declare(metadata i32* %digit, metadata !2219, metadata !DIExpression()), !dbg !2220
  call void @llvm.dbg.declare(metadata i64* %max_digits, metadata !2221, metadata !DIExpression()), !dbg !2222
  call void @llvm.dbg.declare(metadata i8** %p, metadata !2223, metadata !DIExpression()), !dbg !2224
  call void @llvm.dbg.declare(metadata i8** %first, metadata !2225, metadata !DIExpression()), !dbg !2226
  call void @llvm.dbg.declare(metadata i8** %last, metadata !2227, metadata !DIExpression()), !dbg !2228
  call void @llvm.dbg.declare(metadata i8* %sign, metadata !2229, metadata !DIExpression()), !dbg !2230
  call void @llvm.dbg.declare(metadata i8* %round_up, metadata !2231, metadata !DIExpression()), !dbg !2232
  %0 = load i32, i32* %mode.addr, align 4, !dbg !2233
  %cmp = icmp ne i32 %0, 0, !dbg !2235
  br i1 %cmp, label %if.then, label %if.end, !dbg !2236

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %mode.addr, align 4, !dbg !2237
  %idxprom = zext i32 %1 to i64, !dbg !2237
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !2237
  %2 = load i8, i8* %arrayidx, align 1, !dbg !2237
  %conv = zext i8 %2 to i32, !dbg !2237
  %cmp1 = icmp eq i32 %conv, 9, !dbg !2237
  br i1 %cmp1, label %cond.true, label %cond.false, !dbg !2237

cond.true:                                        ; preds = %if.then
  %3 = load i32, i32* %mode.addr, align 4, !dbg !2237
  %sub = sub i32 %3, 42, !dbg !2237
  %add = add i32 %sub, 4, !dbg !2237
  br label %cond.end, !dbg !2237

cond.false:                                       ; preds = %if.then
  %4 = load i32, i32* %mode.addr, align 4, !dbg !2237
  %sub3 = sub i32 %4, 38, !dbg !2237
  br label %cond.end, !dbg !2237

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add, %cond.true ], [ %sub3, %cond.false ], !dbg !2237
  %idxprom4 = zext i32 %cond to i64, !dbg !2237
  %arrayidx5 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom4, !dbg !2237
  %5 = load %struct.real_format*, %struct.real_format** %arrayidx5, align 8, !dbg !2237
  store %struct.real_format* %5, %struct.real_format** %fmt, align 8, !dbg !2239
  %6 = load %struct.real_format*, %struct.real_format** %fmt, align 8, !dbg !2240
  %tobool = icmp ne %struct.real_format* %6, null, !dbg !2240
  br i1 %tobool, label %cond.false7, label %cond.true6, !dbg !2240

cond.true6:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 1517, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2240
  br label %cond.end8, !dbg !2240

cond.false7:                                      ; preds = %cond.end
  br label %cond.end8, !dbg !2240

cond.end8:                                        ; preds = %cond.false7, %cond.true6
  %cond9 = phi i32 [ 0, %cond.true6 ], [ 0, %cond.false7 ], !dbg !2240
  br label %if.end, !dbg !2241

if.end:                                           ; preds = %cond.end8, %entry
  %7 = load %struct.real_value*, %struct.real_value** %r_orig.addr, align 8, !dbg !2242
  %8 = bitcast %struct.real_value* %r to i8*, !dbg !2243
  %9 = bitcast %struct.real_value* %7 to i8*, !dbg !2243
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 32, i1 false), !dbg !2243
  %10 = bitcast %struct.real_value* %r to i32*, !dbg !2244
  %bf.load = load i32, i32* %10, align 8, !dbg !2244
  %bf.clear = and i32 %bf.load, 3, !dbg !2244
  switch i32 %bf.clear, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb14
    i32 2, label %sw.bb15
    i32 3, label %sw.bb22
  ], !dbg !2245

sw.bb:                                            ; preds = %if.end
  %11 = load i8*, i8** %str.addr, align 8, !dbg !2246
  %12 = bitcast %struct.real_value* %r to i32*, !dbg !2248
  %bf.load10 = load i32, i32* %12, align 8, !dbg !2248
  %bf.lshr = lshr i32 %bf.load10, 3, !dbg !2248
  %bf.clear11 = and i32 %bf.lshr, 1, !dbg !2248
  %tobool12 = icmp ne i32 %bf.clear11, 0, !dbg !2249
  %13 = zext i1 %tobool12 to i64, !dbg !2249
  %cond13 = select i1 %tobool12, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), !dbg !2249
  %call = call i8* @strcpy(i8* %11, i8* %cond13), !dbg !2250
  br label %return, !dbg !2251

sw.bb14:                                          ; preds = %if.end
  br label %sw.epilog, !dbg !2252

sw.bb15:                                          ; preds = %if.end
  %14 = load i8*, i8** %str.addr, align 8, !dbg !2253
  %15 = bitcast %struct.real_value* %r to i32*, !dbg !2254
  %bf.load16 = load i32, i32* %15, align 8, !dbg !2254
  %bf.lshr17 = lshr i32 %bf.load16, 3, !dbg !2254
  %bf.clear18 = and i32 %bf.lshr17, 1, !dbg !2254
  %tobool19 = icmp ne i32 %bf.clear18, 0, !dbg !2255
  %16 = zext i1 %tobool19 to i64, !dbg !2255
  %cond20 = select i1 %tobool19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0), !dbg !2255
  %call21 = call i8* @strcpy(i8* %14, i8* %cond20), !dbg !2256
  br label %return, !dbg !2257

sw.bb22:                                          ; preds = %if.end
  %17 = load i8*, i8** %str.addr, align 8, !dbg !2258
  %18 = load %struct.real_value*, %struct.real_value** %r_orig.addr, align 8, !dbg !2259
  %19 = bitcast %struct.real_value* %18 to i32*, !dbg !2260
  %bf.load23 = load i32, i32* %19, align 8, !dbg !2260
  %bf.lshr24 = lshr i32 %bf.load23, 3, !dbg !2260
  %bf.clear25 = and i32 %bf.lshr24, 1, !dbg !2260
  %tobool26 = icmp ne i32 %bf.clear25, 0, !dbg !2259
  %20 = zext i1 %tobool26 to i64, !dbg !2259
  %cond27 = select i1 %tobool26, i32 45, i32 43, !dbg !2259
  %21 = load %struct.real_value*, %struct.real_value** %r_orig.addr, align 8, !dbg !2261
  %22 = bitcast %struct.real_value* %21 to i32*, !dbg !2262
  %bf.load28 = load i32, i32* %22, align 8, !dbg !2262
  %bf.lshr29 = lshr i32 %bf.load28, 4, !dbg !2262
  %bf.clear30 = and i32 %bf.lshr29, 1, !dbg !2262
  %tobool31 = icmp ne i32 %bf.clear30, 0, !dbg !2261
  %23 = zext i1 %tobool31 to i64, !dbg !2261
  %cond32 = select i1 %tobool31, i32 83, i32 81, !dbg !2261
  %call33 = call i32 (i8*, i8*, ...) @sprintf(i8* %17, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i64 0, i64 0), i32 %cond27, i32 %cond32), !dbg !2263
  br label %return, !dbg !2264

sw.default:                                       ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 1537, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2265
  br label %sw.epilog, !dbg !2266

sw.epilog:                                        ; preds = %sw.default, %sw.bb14
  %24 = bitcast %struct.real_value* %r to i32*, !dbg !2267
  %bf.load34 = load i32, i32* %24, align 8, !dbg !2267
  %bf.lshr35 = lshr i32 %bf.load34, 2, !dbg !2267
  %bf.clear36 = and i32 %bf.lshr35, 1, !dbg !2267
  %tobool37 = icmp ne i32 %bf.clear36, 0, !dbg !2269
  br i1 %tobool37, label %if.then38, label %if.end39, !dbg !2270

if.then38:                                        ; preds = %sw.epilog
  %25 = load i8*, i8** %str.addr, align 8, !dbg !2271
  %26 = load i64, i64* %buf_size.addr, align 8, !dbg !2273
  %27 = load i64, i64* %digits.addr, align 8, !dbg !2274
  %28 = load i32, i32* %crop_trailing_zeros.addr, align 4, !dbg !2275
  call void @decimal_real_to_decimal(i8* %25, %struct.real_value* %r, i64 %26, i64 %27, i32 %28), !dbg !2276
  br label %return, !dbg !2277

if.end39:                                         ; preds = %sw.epilog
  store i64 57, i64* %max_digits, align 8, !dbg !2278
  %29 = load i64, i64* %digits.addr, align 8, !dbg !2279
  %cmp40 = icmp eq i64 %29, 0, !dbg !2281
  br i1 %cmp40, label %if.then44, label %lor.lhs.false, !dbg !2282

lor.lhs.false:                                    ; preds = %if.end39
  %30 = load i64, i64* %digits.addr, align 8, !dbg !2283
  %31 = load i64, i64* %max_digits, align 8, !dbg !2284
  %cmp42 = icmp ugt i64 %30, %31, !dbg !2285
  br i1 %cmp42, label %if.then44, label %if.end45, !dbg !2286

if.then44:                                        ; preds = %lor.lhs.false, %if.end39
  %32 = load i64, i64* %max_digits, align 8, !dbg !2287
  store i64 %32, i64* %digits.addr, align 8, !dbg !2288
  br label %if.end45, !dbg !2289

if.end45:                                         ; preds = %if.then44, %lor.lhs.false
  %33 = bitcast %struct.real_value* %r to i32*, !dbg !2290
  %bf.load46 = load i32, i32* %33, align 8, !dbg !2290
  %bf.lshr47 = lshr i32 %bf.load46, 6, !dbg !2290
  %xor = xor i32 %bf.lshr47, 33554432, !dbg !2290
  %sub48 = sub nsw i32 %xor, 33554432, !dbg !2290
  %conv49 = sitofp i32 %sub48 to double, !dbg !2290
  %mul = fmul double %conv49, 0x3FD34413509F79FF, !dbg !2291
  %conv50 = fptosi double %mul to i32, !dbg !2290
  store i32 %conv50, i32* %dec_exp, align 4, !dbg !2292
  store i64 1, i64* %max_digits, align 8, !dbg !2293
  br label %for.cond, !dbg !2295

for.cond:                                         ; preds = %for.inc, %if.end45
  %34 = load i32, i32* %dec_exp, align 4, !dbg !2296
  %tobool51 = icmp ne i32 %34, 0, !dbg !2298
  br i1 %tobool51, label %for.body, label %for.end, !dbg !2298

for.body:                                         ; preds = %for.cond
  %35 = load i32, i32* %dec_exp, align 4, !dbg !2299
  %div = sdiv i32 %35, 10, !dbg !2299
  store i32 %div, i32* %dec_exp, align 4, !dbg !2299
  br label %for.inc, !dbg !2300

for.inc:                                          ; preds = %for.body
  %36 = load i64, i64* %max_digits, align 8, !dbg !2301
  %inc = add i64 %36, 1, !dbg !2301
  store i64 %inc, i64* %max_digits, align 8, !dbg !2301
  br label %for.cond, !dbg !2302, !llvm.loop !2303

for.end:                                          ; preds = %for.cond
  %37 = load i64, i64* %buf_size.addr, align 8, !dbg !2305
  %sub52 = sub i64 %37, 1, !dbg !2306
  %sub53 = sub i64 %sub52, 1, !dbg !2307
  %sub54 = sub i64 %sub53, 2, !dbg !2308
  %38 = load i64, i64* %max_digits, align 8, !dbg !2309
  %sub55 = sub i64 %sub54, %38, !dbg !2310
  %sub56 = sub i64 %sub55, 1, !dbg !2311
  store i64 %sub56, i64* %max_digits, align 8, !dbg !2312
  %39 = load i64, i64* %max_digits, align 8, !dbg !2313
  %40 = load i64, i64* %buf_size.addr, align 8, !dbg !2313
  %cmp57 = icmp ule i64 %39, %40, !dbg !2313
  br i1 %cmp57, label %cond.false60, label %cond.true59, !dbg !2313

cond.true59:                                      ; preds = %for.end
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 1560, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2313
  br label %cond.end61, !dbg !2313

cond.false60:                                     ; preds = %for.end
  br label %cond.end61, !dbg !2313

cond.end61:                                       ; preds = %cond.false60, %cond.true59
  %cond62 = phi i32 [ 0, %cond.true59 ], [ 0, %cond.false60 ], !dbg !2313
  %41 = load i64, i64* %digits.addr, align 8, !dbg !2314
  %42 = load i64, i64* %max_digits, align 8, !dbg !2316
  %cmp63 = icmp ugt i64 %41, %42, !dbg !2317
  br i1 %cmp63, label %if.then65, label %if.end66, !dbg !2318

if.then65:                                        ; preds = %cond.end61
  %43 = load i64, i64* %max_digits, align 8, !dbg !2319
  store i64 %43, i64* %digits.addr, align 8, !dbg !2320
  br label %if.end66, !dbg !2321

if.end66:                                         ; preds = %if.then65, %cond.end61
  %call67 = call %struct.real_value* @real_digit(i32 1), !dbg !2322
  store %struct.real_value* %call67, %struct.real_value** %one, align 8, !dbg !2323
  %call68 = call %struct.real_value* @ten_to_ptwo(i32 0), !dbg !2324
  store %struct.real_value* %call68, %struct.real_value** %ten, align 8, !dbg !2325
  %44 = bitcast %struct.real_value* %r to i32*, !dbg !2326
  %bf.load69 = load i32, i32* %44, align 8, !dbg !2326
  %bf.lshr70 = lshr i32 %bf.load69, 3, !dbg !2326
  %bf.clear71 = and i32 %bf.lshr70, 1, !dbg !2326
  %conv72 = trunc i32 %bf.clear71 to i8, !dbg !2327
  store i8 %conv72, i8* %sign, align 1, !dbg !2328
  %45 = bitcast %struct.real_value* %r to i32*, !dbg !2329
  %bf.load73 = load i32, i32* %45, align 8, !dbg !2330
  %bf.clear74 = and i32 %bf.load73, -9, !dbg !2330
  store i32 %bf.clear74, i32* %45, align 8, !dbg !2330
  store i32 0, i32* %dec_exp, align 4, !dbg !2331
  %46 = load %struct.real_value*, %struct.real_value** %one, align 8, !dbg !2332
  %47 = bitcast %struct.real_value* %pten to i8*, !dbg !2333
  %48 = bitcast %struct.real_value* %46 to i8*, !dbg !2333
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %47, i8* align 8 %48, i64 32, i1 false), !dbg !2333
  %49 = load %struct.real_value*, %struct.real_value** %one, align 8, !dbg !2334
  %call75 = call i32 @do_compare(%struct.real_value* %r, %struct.real_value* %49, i32 0), !dbg !2335
  store i32 %call75, i32* %cmp_one, align 4, !dbg !2336
  %50 = load i32, i32* %cmp_one, align 4, !dbg !2337
  %cmp76 = icmp sgt i32 %50, 0, !dbg !2339
  br i1 %cmp76, label %if.then78, label %if.end139, !dbg !2340

if.then78:                                        ; preds = %if.end66
  call void @llvm.dbg.declare(metadata i32* %m, metadata !2341, metadata !DIExpression()), !dbg !2343
  %51 = bitcast %struct.real_value* %u to i8*, !dbg !2344
  %52 = bitcast %struct.real_value* %r to i8*, !dbg !2344
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %51, i8* align 8 %52, i64 32, i1 false), !dbg !2344
  %53 = bitcast %struct.real_value* %u to i32*, !dbg !2345
  %bf.load79 = load i32, i32* %53, align 8, !dbg !2345
  %bf.clear80 = and i32 %bf.load79, 63, !dbg !2345
  %bf.set = or i32 %bf.clear80, 12224, !dbg !2345
  store i32 %bf.set, i32* %53, align 8, !dbg !2345
  %54 = load i64, i64* %max_digits, align 8, !dbg !2346
  %call81 = call i32 @floor_log2(i64 %54), !dbg !2347
  store i32 %call81, i32* %m, align 4, !dbg !2348
  br label %do.body, !dbg !2349

do.body:                                          ; preds = %do.cond, %if.then78
  call void @llvm.dbg.declare(metadata %struct.real_value* %t, metadata !2350, metadata !DIExpression()), !dbg !2352
  %55 = load i32, i32* %m, align 4, !dbg !2353
  %call82 = call %struct.real_value* @ten_to_ptwo(i32 %55), !dbg !2354
  %call83 = call zeroext i8 @do_divide(%struct.real_value* %t, %struct.real_value* %u, %struct.real_value* %call82), !dbg !2355
  call void @do_fix_trunc(%struct.real_value* %v, %struct.real_value* %t), !dbg !2356
  %call84 = call i32 @cmp_significands(%struct.real_value* %v, %struct.real_value* %t), !dbg !2357
  %cmp85 = icmp eq i32 %call84, 0, !dbg !2359
  br i1 %cmp85, label %if.then87, label %if.end89, !dbg !2360

if.then87:                                        ; preds = %do.body
  %56 = bitcast %struct.real_value* %u to i8*, !dbg !2361
  %57 = bitcast %struct.real_value* %t to i8*, !dbg !2361
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %56, i8* align 8 %57, i64 32, i1 false), !dbg !2361
  %58 = load i32, i32* %m, align 4, !dbg !2363
  %shl = shl i32 1, %58, !dbg !2364
  %59 = load i32, i32* %dec_exp, align 4, !dbg !2365
  %add88 = add nsw i32 %59, %shl, !dbg !2365
  store i32 %add88, i32* %dec_exp, align 4, !dbg !2365
  br label %if.end89, !dbg !2366

if.end89:                                         ; preds = %if.then87, %do.body
  br label %do.cond, !dbg !2367

do.cond:                                          ; preds = %if.end89
  %60 = load i32, i32* %m, align 4, !dbg !2368
  %dec = add nsw i32 %60, -1, !dbg !2368
  store i32 %dec, i32* %m, align 4, !dbg !2368
  %cmp90 = icmp sge i32 %dec, 0, !dbg !2369
  br i1 %cmp90, label %do.body, label %do.end, !dbg !2367, !llvm.loop !2370

do.end:                                           ; preds = %do.cond
  %61 = bitcast %struct.real_value* %u to i32*, !dbg !2372
  %bf.load92 = load i32, i32* %61, align 8, !dbg !2372
  %bf.lshr93 = lshr i32 %bf.load92, 6, !dbg !2372
  %xor94 = xor i32 %bf.lshr93, 33554432, !dbg !2372
  %sub95 = sub nsw i32 %xor94, 33554432, !dbg !2372
  %62 = bitcast %struct.real_value* %r to i32*, !dbg !2372
  %bf.load96 = load i32, i32* %62, align 8, !dbg !2372
  %bf.lshr97 = lshr i32 %bf.load96, 6, !dbg !2372
  %xor98 = xor i32 %bf.lshr97, 33554432, !dbg !2372
  %sub99 = sub nsw i32 %xor98, 33554432, !dbg !2372
  %add100 = add nsw i32 %sub95, %sub99, !dbg !2372
  %sub101 = sub nsw i32 %add100, 191, !dbg !2372
  %and = and i32 %sub101, 67108863, !dbg !2372
  %63 = bitcast %struct.real_value* %u to i32*, !dbg !2372
  %bf.load102 = load i32, i32* %63, align 8, !dbg !2372
  %bf.value = and i32 %and, 67108863, !dbg !2372
  %bf.shl = shl i32 %bf.value, 6, !dbg !2372
  %bf.clear103 = and i32 %bf.load102, 63, !dbg !2372
  %bf.set104 = or i32 %bf.clear103, %bf.shl, !dbg !2372
  store i32 %bf.set104, i32* %63, align 8, !dbg !2372
  %64 = bitcast %struct.real_value* %r to i8*, !dbg !2373
  %65 = bitcast %struct.real_value* %u to i8*, !dbg !2373
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %64, i8* align 8 %65, i64 32, i1 false), !dbg !2373
  %66 = bitcast %struct.real_value* %r to i32*, !dbg !2374
  %bf.load105 = load i32, i32* %66, align 8, !dbg !2374
  %bf.lshr106 = lshr i32 %bf.load105, 6, !dbg !2374
  %xor107 = xor i32 %bf.lshr106, 33554432, !dbg !2374
  %sub108 = sub nsw i32 %xor107, 33554432, !dbg !2374
  %cmp109 = icmp sgt i32 %sub108, 0, !dbg !2376
  br i1 %cmp109, label %if.then111, label %if.else, !dbg !2377

if.then111:                                       ; preds = %do.end
  %67 = bitcast %struct.real_value* %r to i32*, !dbg !2378
  %bf.load112 = load i32, i32* %67, align 8, !dbg !2378
  %bf.lshr113 = lshr i32 %bf.load112, 6, !dbg !2378
  %xor114 = xor i32 %bf.lshr113, 33554432, !dbg !2378
  %sub115 = sub nsw i32 %xor114, 33554432, !dbg !2378
  %conv116 = sitofp i32 %sub115 to double, !dbg !2378
  %mul117 = fmul double %conv116, 0x3FD34413509F79FF, !dbg !2380
  %conv118 = fptosi double %mul117 to i32, !dbg !2381
  %conv119 = sext i32 %conv118 to i64, !dbg !2381
  %call120 = call i32 @floor_log2(i64 %conv119), !dbg !2382
  %add121 = add nsw i32 %call120, 1, !dbg !2383
  store i32 %add121, i32* %m, align 4, !dbg !2384
  br label %do.body122, !dbg !2385

do.body122:                                       ; preds = %do.cond133, %if.then111
  call void @llvm.dbg.declare(metadata %struct.real_value** %ptentwo, metadata !2386, metadata !DIExpression()), !dbg !2388
  %68 = load i32, i32* %m, align 4, !dbg !2389
  %call123 = call %struct.real_value* @ten_to_ptwo(i32 %68), !dbg !2390
  store %struct.real_value* %call123, %struct.real_value** %ptentwo, align 8, !dbg !2388
  %69 = load %struct.real_value*, %struct.real_value** %ptentwo, align 8, !dbg !2391
  %call124 = call i32 @do_compare(%struct.real_value* %u, %struct.real_value* %69, i32 0), !dbg !2393
  %cmp125 = icmp sge i32 %call124, 0, !dbg !2394
  br i1 %cmp125, label %if.then127, label %if.end132, !dbg !2395

if.then127:                                       ; preds = %do.body122
  %70 = load %struct.real_value*, %struct.real_value** %ptentwo, align 8, !dbg !2396
  %call128 = call zeroext i8 @do_divide(%struct.real_value* %u, %struct.real_value* %u, %struct.real_value* %70), !dbg !2398
  %71 = load %struct.real_value*, %struct.real_value** %ptentwo, align 8, !dbg !2399
  %call129 = call zeroext i8 @do_multiply(%struct.real_value* %pten, %struct.real_value* %pten, %struct.real_value* %71), !dbg !2400
  %72 = load i32, i32* %m, align 4, !dbg !2401
  %shl130 = shl i32 1, %72, !dbg !2402
  %73 = load i32, i32* %dec_exp, align 4, !dbg !2403
  %add131 = add nsw i32 %73, %shl130, !dbg !2403
  store i32 %add131, i32* %dec_exp, align 4, !dbg !2403
  br label %if.end132, !dbg !2404

if.end132:                                        ; preds = %if.then127, %do.body122
  br label %do.cond133, !dbg !2405

do.cond133:                                       ; preds = %if.end132
  %74 = load i32, i32* %m, align 4, !dbg !2406
  %dec134 = add nsw i32 %74, -1, !dbg !2406
  store i32 %dec134, i32* %m, align 4, !dbg !2406
  %cmp135 = icmp sge i32 %dec134, 0, !dbg !2407
  br i1 %cmp135, label %do.body122, label %do.end137, !dbg !2405, !llvm.loop !2408

do.end137:                                        ; preds = %do.cond133
  br label %if.end138, !dbg !2410

if.else:                                          ; preds = %do.end
  store i32 -1, i32* %cmp_one, align 4, !dbg !2411
  br label %if.end138

if.end138:                                        ; preds = %if.else, %do.end137
  br label %if.end139, !dbg !2412

if.end139:                                        ; preds = %if.end138, %if.end66
  %75 = load i32, i32* %cmp_one, align 4, !dbg !2413
  %cmp140 = icmp slt i32 %75, 0, !dbg !2415
  br i1 %cmp140, label %if.then142, label %if.end189, !dbg !2416

if.then142:                                       ; preds = %if.end139
  call void @llvm.dbg.declare(metadata i32* %m143, metadata !2417, metadata !DIExpression()), !dbg !2419
  %76 = bitcast %struct.real_value* %v to i8*, !dbg !2420
  %77 = bitcast %struct.real_value* %r to i8*, !dbg !2420
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %76, i8* align 8 %77, i64 32, i1 false), !dbg !2420
  br label %while.body, !dbg !2421

while.body:                                       ; preds = %if.then142, %if.end157
  %sig = getelementptr inbounds %struct.real_value, %struct.real_value* %v, i32 0, i32 1, !dbg !2422
  %arrayidx144 = getelementptr inbounds [3 x i64], [3 x i64]* %sig, i64 0, i64 0, !dbg !2425
  %78 = load i64, i64* %arrayidx144, align 8, !dbg !2425
  %and145 = and i64 %78, 7, !dbg !2426
  %tobool146 = icmp ne i64 %and145, 0, !dbg !2426
  br i1 %tobool146, label %if.then147, label %if.end148, !dbg !2427

if.then147:                                       ; preds = %while.body
  br label %while.end, !dbg !2428

if.end148:                                        ; preds = %while.body
  %79 = load %struct.real_value*, %struct.real_value** %ten, align 8, !dbg !2429
  %call149 = call zeroext i8 @do_multiply(%struct.real_value* %u, %struct.real_value* %v, %struct.real_value* %79), !dbg !2430
  %80 = bitcast %struct.real_value* %u to i32*, !dbg !2431
  %bf.load150 = load i32, i32* %80, align 8, !dbg !2431
  %bf.lshr151 = lshr i32 %bf.load150, 6, !dbg !2431
  %xor152 = xor i32 %bf.lshr151, 33554432, !dbg !2431
  %sub153 = sub nsw i32 %xor152, 33554432, !dbg !2431
  %cmp154 = icmp sgt i32 %sub153, 0, !dbg !2433
  br i1 %cmp154, label %if.then156, label %if.end157, !dbg !2434

if.then156:                                       ; preds = %if.end148
  br label %while.end, !dbg !2435

if.end157:                                        ; preds = %if.end148
  %81 = bitcast %struct.real_value* %v to i8*, !dbg !2436
  %82 = bitcast %struct.real_value* %u to i8*, !dbg !2436
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %81, i8* align 8 %82, i64 32, i1 false), !dbg !2436
  %83 = load i32, i32* %dec_exp, align 4, !dbg !2437
  %sub158 = sub nsw i32 %83, 1, !dbg !2437
  store i32 %sub158, i32* %dec_exp, align 4, !dbg !2437
  br label %while.body, !dbg !2421, !llvm.loop !2438

while.end:                                        ; preds = %if.then156, %if.then147
  %84 = bitcast %struct.real_value* %r to i8*, !dbg !2440
  %85 = bitcast %struct.real_value* %v to i8*, !dbg !2440
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %84, i8* align 8 %85, i64 32, i1 false), !dbg !2440
  %86 = bitcast %struct.real_value* %r to i32*, !dbg !2441
  %bf.load159 = load i32, i32* %86, align 8, !dbg !2441
  %bf.lshr160 = lshr i32 %bf.load159, 6, !dbg !2441
  %xor161 = xor i32 %bf.lshr160, 33554432, !dbg !2441
  %sub162 = sub nsw i32 %xor161, 33554432, !dbg !2441
  %sub163 = sub nsw i32 0, %sub162, !dbg !2442
  %conv164 = sitofp i32 %sub163 to double, !dbg !2442
  %mul165 = fmul double %conv164, 0x3FD34413509F79FF, !dbg !2443
  %conv166 = fptosi double %mul165 to i32, !dbg !2444
  %conv167 = sext i32 %conv166 to i64, !dbg !2444
  %call168 = call i32 @floor_log2(i64 %conv167), !dbg !2445
  %add169 = add nsw i32 %call168, 1, !dbg !2446
  store i32 %add169, i32* %m143, align 4, !dbg !2447
  br label %do.body170, !dbg !2448

do.body170:                                       ; preds = %do.cond183, %while.end
  call void @llvm.dbg.declare(metadata %struct.real_value** %ptentwo171, metadata !2449, metadata !DIExpression()), !dbg !2451
  %87 = load i32, i32* %m143, align 4, !dbg !2452
  %call172 = call %struct.real_value* @ten_to_ptwo(i32 %87), !dbg !2453
  store %struct.real_value* %call172, %struct.real_value** %ptentwo171, align 8, !dbg !2451
  call void @llvm.dbg.declare(metadata %struct.real_value** %ptenmtwo, metadata !2454, metadata !DIExpression()), !dbg !2455
  %88 = load i32, i32* %m143, align 4, !dbg !2456
  %call173 = call %struct.real_value* @ten_to_mptwo(i32 %88), !dbg !2457
  store %struct.real_value* %call173, %struct.real_value** %ptenmtwo, align 8, !dbg !2455
  %89 = load %struct.real_value*, %struct.real_value** %ptenmtwo, align 8, !dbg !2458
  %call174 = call i32 @do_compare(%struct.real_value* %v, %struct.real_value* %89, i32 0), !dbg !2460
  %cmp175 = icmp sle i32 %call174, 0, !dbg !2461
  br i1 %cmp175, label %if.then177, label %if.end182, !dbg !2462

if.then177:                                       ; preds = %do.body170
  %90 = load %struct.real_value*, %struct.real_value** %ptentwo171, align 8, !dbg !2463
  %call178 = call zeroext i8 @do_multiply(%struct.real_value* %v, %struct.real_value* %v, %struct.real_value* %90), !dbg !2465
  %91 = load %struct.real_value*, %struct.real_value** %ptentwo171, align 8, !dbg !2466
  %call179 = call zeroext i8 @do_multiply(%struct.real_value* %pten, %struct.real_value* %pten, %struct.real_value* %91), !dbg !2467
  %92 = load i32, i32* %m143, align 4, !dbg !2468
  %shl180 = shl i32 1, %92, !dbg !2469
  %93 = load i32, i32* %dec_exp, align 4, !dbg !2470
  %sub181 = sub nsw i32 %93, %shl180, !dbg !2470
  store i32 %sub181, i32* %dec_exp, align 4, !dbg !2470
  br label %if.end182, !dbg !2471

if.end182:                                        ; preds = %if.then177, %do.body170
  br label %do.cond183, !dbg !2472

do.cond183:                                       ; preds = %if.end182
  %94 = load i32, i32* %m143, align 4, !dbg !2473
  %dec184 = add nsw i32 %94, -1, !dbg !2473
  store i32 %dec184, i32* %m143, align 4, !dbg !2473
  %cmp185 = icmp sge i32 %dec184, 0, !dbg !2474
  br i1 %cmp185, label %do.body170, label %do.end187, !dbg !2472, !llvm.loop !2475

do.end187:                                        ; preds = %do.cond183
  %95 = load %struct.real_value*, %struct.real_value** %one, align 8, !dbg !2477
  %call188 = call zeroext i8 @do_divide(%struct.real_value* %pten, %struct.real_value* %95, %struct.real_value* %pten), !dbg !2478
  br label %if.end189, !dbg !2479

if.end189:                                        ; preds = %do.end187, %if.end139
  %96 = load i8*, i8** %str.addr, align 8, !dbg !2480
  store i8* %96, i8** %p, align 8, !dbg !2481
  %97 = load i8, i8* %sign, align 1, !dbg !2482
  %tobool190 = icmp ne i8 %97, 0, !dbg !2482
  br i1 %tobool190, label %if.then191, label %if.end192, !dbg !2484

if.then191:                                       ; preds = %if.end189
  %98 = load i8*, i8** %p, align 8, !dbg !2485
  %incdec.ptr = getelementptr inbounds i8, i8* %98, i32 1, !dbg !2485
  store i8* %incdec.ptr, i8** %p, align 8, !dbg !2485
  store i8 45, i8* %98, align 1, !dbg !2486
  br label %if.end192, !dbg !2487

if.end192:                                        ; preds = %if.then191, %if.end189
  %99 = load i8*, i8** %p, align 8, !dbg !2488
  %incdec.ptr193 = getelementptr inbounds i8, i8* %99, i32 1, !dbg !2488
  store i8* %incdec.ptr193, i8** %p, align 8, !dbg !2488
  store i8* %99, i8** %first, align 8, !dbg !2489
  %call194 = call i64 @rtd_divmod(%struct.real_value* %r, %struct.real_value* %pten), !dbg !2490
  %conv195 = trunc i64 %call194 to i32, !dbg !2490
  store i32 %conv195, i32* %digit, align 4, !dbg !2491
  %100 = load i32, i32* %digit, align 4, !dbg !2492
  %cmp196 = icmp eq i32 %100, 0, !dbg !2494
  br i1 %cmp196, label %land.lhs.true, label %if.end211, !dbg !2495

land.lhs.true:                                    ; preds = %if.end192
  %call198 = call i32 @cmp_significand_0(%struct.real_value* %r), !dbg !2496
  %tobool199 = icmp ne i32 %call198, 0, !dbg !2496
  br i1 %tobool199, label %if.then200, label %if.end211, !dbg !2497

if.then200:                                       ; preds = %land.lhs.true
  %101 = load %struct.real_value*, %struct.real_value** %ten, align 8, !dbg !2498
  %call201 = call zeroext i8 @do_multiply(%struct.real_value* %r, %struct.real_value* %r, %struct.real_value* %101), !dbg !2500
  %call202 = call i64 @rtd_divmod(%struct.real_value* %r, %struct.real_value* %pten), !dbg !2501
  %conv203 = trunc i64 %call202 to i32, !dbg !2501
  store i32 %conv203, i32* %digit, align 4, !dbg !2502
  %102 = load i32, i32* %dec_exp, align 4, !dbg !2503
  %sub204 = sub nsw i32 %102, 1, !dbg !2503
  store i32 %sub204, i32* %dec_exp, align 4, !dbg !2503
  %103 = load i32, i32* %digit, align 4, !dbg !2504
  %cmp205 = icmp ne i32 %103, 0, !dbg !2504
  br i1 %cmp205, label %cond.false208, label %cond.true207, !dbg !2504

cond.true207:                                     ; preds = %if.then200
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 1703, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2504
  br label %cond.end209, !dbg !2504

cond.false208:                                    ; preds = %if.then200
  br label %cond.end209, !dbg !2504

cond.end209:                                      ; preds = %cond.false208, %cond.true207
  %cond210 = phi i32 [ 0, %cond.true207 ], [ 0, %cond.false208 ], !dbg !2504
  br label %if.end211, !dbg !2505

if.end211:                                        ; preds = %cond.end209, %land.lhs.true, %if.end192
  %104 = load i32, i32* %digit, align 4, !dbg !2506
  %cmp212 = icmp eq i32 %104, 10, !dbg !2508
  br i1 %cmp212, label %if.then214, label %if.else223, !dbg !2509

if.then214:                                       ; preds = %if.end211
  %105 = load i8*, i8** %p, align 8, !dbg !2510
  %incdec.ptr215 = getelementptr inbounds i8, i8* %105, i32 1, !dbg !2510
  store i8* %incdec.ptr215, i8** %p, align 8, !dbg !2510
  store i8 49, i8* %105, align 1, !dbg !2512
  %106 = load i64, i64* %digits.addr, align 8, !dbg !2513
  %dec216 = add i64 %106, -1, !dbg !2513
  store i64 %dec216, i64* %digits.addr, align 8, !dbg !2513
  %cmp217 = icmp ugt i64 %dec216, 0, !dbg !2515
  br i1 %cmp217, label %if.then219, label %if.end221, !dbg !2516

if.then219:                                       ; preds = %if.then214
  %107 = load i8*, i8** %p, align 8, !dbg !2517
  %incdec.ptr220 = getelementptr inbounds i8, i8* %107, i32 1, !dbg !2517
  store i8* %incdec.ptr220, i8** %p, align 8, !dbg !2517
  store i8 48, i8* %107, align 1, !dbg !2518
  br label %if.end221, !dbg !2519

if.end221:                                        ; preds = %if.then219, %if.then214
  %108 = load i32, i32* %dec_exp, align 4, !dbg !2520
  %add222 = add nsw i32 %108, 1, !dbg !2520
  store i32 %add222, i32* %dec_exp, align 4, !dbg !2520
  br label %if.end233, !dbg !2521

if.else223:                                       ; preds = %if.end211
  %109 = load i32, i32* %digit, align 4, !dbg !2522
  %cmp224 = icmp sle i32 %109, 10, !dbg !2522
  br i1 %cmp224, label %cond.false227, label %cond.true226, !dbg !2522

cond.true226:                                     ; preds = %if.else223
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 1716, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2522
  br label %cond.end228, !dbg !2522

cond.false227:                                    ; preds = %if.else223
  br label %cond.end228, !dbg !2522

cond.end228:                                      ; preds = %cond.false227, %cond.true226
  %cond229 = phi i32 [ 0, %cond.true226 ], [ 0, %cond.false227 ], !dbg !2522
  %110 = load i32, i32* %digit, align 4, !dbg !2524
  %add230 = add nsw i32 %110, 48, !dbg !2525
  %conv231 = trunc i32 %add230 to i8, !dbg !2524
  %111 = load i8*, i8** %p, align 8, !dbg !2526
  %incdec.ptr232 = getelementptr inbounds i8, i8* %111, i32 1, !dbg !2526
  store i8* %incdec.ptr232, i8** %p, align 8, !dbg !2526
  store i8 %conv231, i8* %111, align 1, !dbg !2527
  br label %if.end233

if.end233:                                        ; preds = %cond.end228, %if.end221
  br label %while.cond, !dbg !2528

while.cond:                                       ; preds = %while.body237, %if.end233
  %112 = load i64, i64* %digits.addr, align 8, !dbg !2529
  %dec234 = add i64 %112, -1, !dbg !2529
  store i64 %dec234, i64* %digits.addr, align 8, !dbg !2529
  %cmp235 = icmp ugt i64 %dec234, 0, !dbg !2530
  br i1 %cmp235, label %while.body237, label %while.end244, !dbg !2528

while.body237:                                    ; preds = %while.cond
  %113 = load %struct.real_value*, %struct.real_value** %ten, align 8, !dbg !2531
  %call238 = call zeroext i8 @do_multiply(%struct.real_value* %r, %struct.real_value* %r, %struct.real_value* %113), !dbg !2533
  %call239 = call i64 @rtd_divmod(%struct.real_value* %r, %struct.real_value* %pten), !dbg !2534
  %conv240 = trunc i64 %call239 to i32, !dbg !2534
  store i32 %conv240, i32* %digit, align 4, !dbg !2535
  %114 = load i32, i32* %digit, align 4, !dbg !2536
  %add241 = add nsw i32 %114, 48, !dbg !2537
  %conv242 = trunc i32 %add241 to i8, !dbg !2536
  %115 = load i8*, i8** %p, align 8, !dbg !2538
  %incdec.ptr243 = getelementptr inbounds i8, i8* %115, i32 1, !dbg !2538
  store i8* %incdec.ptr243, i8** %p, align 8, !dbg !2538
  store i8 %conv242, i8* %115, align 1, !dbg !2539
  br label %while.cond, !dbg !2528, !llvm.loop !2540

while.end244:                                     ; preds = %while.cond
  %116 = load i8*, i8** %p, align 8, !dbg !2542
  store i8* %116, i8** %last, align 8, !dbg !2543
  %117 = load %struct.real_value*, %struct.real_value** %ten, align 8, !dbg !2544
  %call245 = call zeroext i8 @do_multiply(%struct.real_value* %r, %struct.real_value* %r, %struct.real_value* %117), !dbg !2545
  %call246 = call i64 @rtd_divmod(%struct.real_value* %r, %struct.real_value* %pten), !dbg !2546
  %conv247 = trunc i64 %call246 to i32, !dbg !2546
  store i32 %conv247, i32* %digit, align 4, !dbg !2547
  %118 = load %struct.real_format*, %struct.real_format** %fmt, align 8, !dbg !2548
  %tobool248 = icmp ne %struct.real_format* %118, null, !dbg !2548
  br i1 %tobool248, label %land.lhs.true249, label %if.else261, !dbg !2550

land.lhs.true249:                                 ; preds = %while.end244
  %119 = load %struct.real_format*, %struct.real_format** %fmt, align 8, !dbg !2551
  %round_towards_zero = getelementptr inbounds %struct.real_format, %struct.real_format* %119, i32 0, i32 9, !dbg !2552
  %120 = load i8, i8* %round_towards_zero, align 4, !dbg !2552
  %conv250 = zext i8 %120 to i32, !dbg !2551
  %tobool251 = icmp ne i32 %conv250, 0, !dbg !2551
  br i1 %tobool251, label %if.then252, label %if.else261, !dbg !2553

if.then252:                                       ; preds = %land.lhs.true249
  %call253 = call i32 @cmp_significand_0(%struct.real_value* %r), !dbg !2554
  %tobool254 = icmp ne i32 %call253, 0, !dbg !2554
  br i1 %tobool254, label %if.then255, label %if.end257, !dbg !2557

if.then255:                                       ; preds = %if.then252
  %121 = load i32, i32* %digit, align 4, !dbg !2558
  %inc256 = add nsw i32 %121, 1, !dbg !2558
  store i32 %inc256, i32* %digit, align 4, !dbg !2558
  br label %if.end257, !dbg !2559

if.end257:                                        ; preds = %if.then255, %if.then252
  %122 = load i32, i32* %digit, align 4, !dbg !2560
  %cmp258 = icmp sgt i32 %122, 0, !dbg !2561
  %conv259 = zext i1 %cmp258 to i32, !dbg !2561
  %conv260 = trunc i32 %conv259 to i8, !dbg !2560
  store i8 %conv260, i8* %round_up, align 1, !dbg !2562
  br label %if.end283, !dbg !2563

if.else261:                                       ; preds = %land.lhs.true249, %while.end244
  %123 = load i32, i32* %digit, align 4, !dbg !2564
  %cmp262 = icmp eq i32 %123, 5, !dbg !2567
  br i1 %cmp262, label %if.then264, label %if.end279, !dbg !2568

if.then264:                                       ; preds = %if.else261
  %call265 = call i32 @cmp_significand_0(%struct.real_value* %r), !dbg !2569
  %tobool266 = icmp ne i32 %call265, 0, !dbg !2569
  br i1 %tobool266, label %if.then267, label %if.else269, !dbg !2572

if.then267:                                       ; preds = %if.then264
  %124 = load i32, i32* %digit, align 4, !dbg !2573
  %inc268 = add nsw i32 %124, 1, !dbg !2573
  store i32 %inc268, i32* %digit, align 4, !dbg !2573
  br label %if.end278, !dbg !2574

if.else269:                                       ; preds = %if.then264
  %125 = load i8*, i8** %p, align 8, !dbg !2575
  %arrayidx270 = getelementptr inbounds i8, i8* %125, i64 -1, !dbg !2575
  %126 = load i8, i8* %arrayidx270, align 1, !dbg !2575
  %conv271 = sext i8 %126 to i32, !dbg !2575
  %sub272 = sub nsw i32 %conv271, 48, !dbg !2577
  %and273 = and i32 %sub272, 1, !dbg !2578
  %tobool274 = icmp ne i32 %and273, 0, !dbg !2578
  br i1 %tobool274, label %if.then275, label %if.end277, !dbg !2579

if.then275:                                       ; preds = %if.else269
  %127 = load i32, i32* %digit, align 4, !dbg !2580
  %inc276 = add nsw i32 %127, 1, !dbg !2580
  store i32 %inc276, i32* %digit, align 4, !dbg !2580
  br label %if.end277, !dbg !2581

if.end277:                                        ; preds = %if.then275, %if.else269
  br label %if.end278

if.end278:                                        ; preds = %if.end277, %if.then267
  br label %if.end279, !dbg !2582

if.end279:                                        ; preds = %if.end278, %if.else261
  %128 = load i32, i32* %digit, align 4, !dbg !2583
  %cmp280 = icmp sgt i32 %128, 5, !dbg !2584
  %conv281 = zext i1 %cmp280 to i32, !dbg !2584
  %conv282 = trunc i32 %conv281 to i8, !dbg !2583
  store i8 %conv282, i8* %round_up, align 1, !dbg !2585
  br label %if.end283

if.end283:                                        ; preds = %if.end279, %if.end257
  %129 = load i8, i8* %round_up, align 1, !dbg !2586
  %tobool284 = icmp ne i8 %129, 0, !dbg !2586
  br i1 %tobool284, label %if.then285, label %if.end306, !dbg !2588

if.then285:                                       ; preds = %if.end283
  br label %while.cond286, !dbg !2589

while.cond286:                                    ; preds = %if.end298, %if.then285
  %130 = load i8*, i8** %p, align 8, !dbg !2591
  %131 = load i8*, i8** %first, align 8, !dbg !2592
  %cmp287 = icmp ugt i8* %130, %131, !dbg !2593
  br i1 %cmp287, label %while.body289, label %while.end299, !dbg !2589

while.body289:                                    ; preds = %while.cond286
  %132 = load i8*, i8** %p, align 8, !dbg !2594
  %incdec.ptr290 = getelementptr inbounds i8, i8* %132, i32 -1, !dbg !2594
  store i8* %incdec.ptr290, i8** %p, align 8, !dbg !2594
  %133 = load i8, i8* %incdec.ptr290, align 1, !dbg !2596
  %conv291 = sext i8 %133 to i32, !dbg !2596
  store i32 %conv291, i32* %digit, align 4, !dbg !2597
  %134 = load i32, i32* %digit, align 4, !dbg !2598
  %cmp292 = icmp eq i32 %134, 57, !dbg !2600
  br i1 %cmp292, label %if.then294, label %if.else295, !dbg !2601

if.then294:                                       ; preds = %while.body289
  %135 = load i8*, i8** %p, align 8, !dbg !2602
  store i8 48, i8* %135, align 1, !dbg !2603
  br label %if.end298, !dbg !2604

if.else295:                                       ; preds = %while.body289
  %136 = load i32, i32* %digit, align 4, !dbg !2605
  %add296 = add nsw i32 %136, 1, !dbg !2607
  %conv297 = trunc i32 %add296 to i8, !dbg !2605
  %137 = load i8*, i8** %p, align 8, !dbg !2608
  store i8 %conv297, i8* %137, align 1, !dbg !2609
  br label %while.end299, !dbg !2610

if.end298:                                        ; preds = %if.then294
  br label %while.cond286, !dbg !2589, !llvm.loop !2611

while.end299:                                     ; preds = %if.else295, %while.cond286
  %138 = load i8*, i8** %p, align 8, !dbg !2613
  %139 = load i8*, i8** %first, align 8, !dbg !2615
  %cmp300 = icmp eq i8* %138, %139, !dbg !2616
  br i1 %cmp300, label %if.then302, label %if.end305, !dbg !2617

if.then302:                                       ; preds = %while.end299
  %140 = load i8*, i8** %first, align 8, !dbg !2618
  %arrayidx303 = getelementptr inbounds i8, i8* %140, i64 1, !dbg !2618
  store i8 49, i8* %arrayidx303, align 1, !dbg !2620
  %141 = load i32, i32* %dec_exp, align 4, !dbg !2621
  %inc304 = add nsw i32 %141, 1, !dbg !2621
  store i32 %inc304, i32* %dec_exp, align 4, !dbg !2621
  br label %if.end305, !dbg !2622

if.end305:                                        ; preds = %if.then302, %while.end299
  br label %if.end306, !dbg !2623

if.end306:                                        ; preds = %if.end305, %if.end283
  %142 = load i8*, i8** %first, align 8, !dbg !2624
  %arrayidx307 = getelementptr inbounds i8, i8* %142, i64 1, !dbg !2624
  %143 = load i8, i8* %arrayidx307, align 1, !dbg !2624
  %144 = load i8*, i8** %first, align 8, !dbg !2625
  %arrayidx308 = getelementptr inbounds i8, i8* %144, i64 0, !dbg !2625
  store i8 %143, i8* %arrayidx308, align 1, !dbg !2626
  %145 = load i8*, i8** %first, align 8, !dbg !2627
  %arrayidx309 = getelementptr inbounds i8, i8* %145, i64 1, !dbg !2627
  store i8 46, i8* %arrayidx309, align 1, !dbg !2628
  %146 = load i32, i32* %crop_trailing_zeros.addr, align 4, !dbg !2629
  %tobool310 = icmp ne i32 %146, 0, !dbg !2629
  br i1 %tobool310, label %if.then311, label %if.end322, !dbg !2631

if.then311:                                       ; preds = %if.end306
  br label %while.cond312, !dbg !2632

while.cond312:                                    ; preds = %while.body319, %if.then311
  %147 = load i8*, i8** %last, align 8, !dbg !2633
  %148 = load i8*, i8** %first, align 8, !dbg !2634
  %add.ptr = getelementptr inbounds i8, i8* %148, i64 3, !dbg !2635
  %cmp313 = icmp ugt i8* %147, %add.ptr, !dbg !2636
  br i1 %cmp313, label %land.rhs, label %land.end, !dbg !2637

land.rhs:                                         ; preds = %while.cond312
  %149 = load i8*, i8** %last, align 8, !dbg !2638
  %arrayidx315 = getelementptr inbounds i8, i8* %149, i64 -1, !dbg !2638
  %150 = load i8, i8* %arrayidx315, align 1, !dbg !2638
  %conv316 = sext i8 %150 to i32, !dbg !2638
  %cmp317 = icmp eq i32 %conv316, 48, !dbg !2639
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond312
  %151 = phi i1 [ false, %while.cond312 ], [ %cmp317, %land.rhs ], !dbg !2640
  br i1 %151, label %while.body319, label %while.end321, !dbg !2632

while.body319:                                    ; preds = %land.end
  %152 = load i8*, i8** %last, align 8, !dbg !2641
  %incdec.ptr320 = getelementptr inbounds i8, i8* %152, i32 -1, !dbg !2641
  store i8* %incdec.ptr320, i8** %last, align 8, !dbg !2641
  br label %while.cond312, !dbg !2632, !llvm.loop !2642

while.end321:                                     ; preds = %land.end
  br label %if.end322, !dbg !2632

if.end322:                                        ; preds = %while.end321, %if.end306
  %153 = load i8*, i8** %last, align 8, !dbg !2643
  %154 = load i32, i32* %dec_exp, align 4, !dbg !2644
  %call323 = call i32 (i8*, i8*, ...) @sprintf(i8* %153, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i64 0, i64 0), i32 %154), !dbg !2645
  br label %return, !dbg !2646

return:                                           ; preds = %if.end322, %if.then38, %sw.bb22, %sw.bb15, %sw.bb
  ret void, !dbg !2646
}

declare dso_local i8* @strcpy(i8*, i8*) #2

declare dso_local i32 @sprintf(i8*, i8*, ...) #2

declare dso_local void @decimal_real_to_decimal(i8*, %struct.real_value*, i64, i64, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.real_value* @ten_to_ptwo(i32 %n) #0 !dbg !499 {
entry:
  %n.addr = alloca i32, align 4
  %t = alloca i64, align 8
  %i = alloca i32, align 4
  %t12 = alloca %struct.real_value*, align 8
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !2647, metadata !DIExpression()), !dbg !2648
  %0 = load i32, i32* %n.addr, align 4, !dbg !2649
  %cmp = icmp sge i32 %0, 0, !dbg !2649
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !2649

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 2254, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2649
  br label %cond.end, !dbg !2649

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2649

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !2649
  %1 = load i32, i32* %n.addr, align 4, !dbg !2650
  %cmp1 = icmp slt i32 %1, 26, !dbg !2650
  br i1 %cmp1, label %cond.false3, label %cond.true2, !dbg !2650

cond.true2:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 2255, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2650
  br label %cond.end4, !dbg !2650

cond.false3:                                      ; preds = %cond.end
  br label %cond.end4, !dbg !2650

cond.end4:                                        ; preds = %cond.false3, %cond.true2
  %cond5 = phi i32 [ 0, %cond.true2 ], [ 0, %cond.false3 ], !dbg !2650
  %2 = load i32, i32* %n.addr, align 4, !dbg !2651
  %idxprom = sext i32 %2 to i64, !dbg !2653
  %arrayidx = getelementptr inbounds [26 x %struct.real_value], [26 x %struct.real_value]* @ten_to_ptwo.tens, i64 0, i64 %idxprom, !dbg !2653
  %3 = bitcast %struct.real_value* %arrayidx to i32*, !dbg !2654
  %bf.load = load i32, i32* %3, align 16, !dbg !2654
  %bf.clear = and i32 %bf.load, 3, !dbg !2654
  %cmp6 = icmp eq i32 %bf.clear, 0, !dbg !2655
  br i1 %cmp6, label %if.then, label %if.end16, !dbg !2656

if.then:                                          ; preds = %cond.end4
  %4 = load i32, i32* %n.addr, align 4, !dbg !2657
  %cmp7 = icmp slt i32 %4, 5, !dbg !2660
  br i1 %cmp7, label %if.then8, label %if.else, !dbg !2661

if.then8:                                         ; preds = %if.then
  call void @llvm.dbg.declare(metadata i64* %t, metadata !2662, metadata !DIExpression()), !dbg !2664
  store i64 10, i64* %t, align 8, !dbg !2664
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2665, metadata !DIExpression()), !dbg !2666
  store i32 0, i32* %i, align 4, !dbg !2667
  br label %for.cond, !dbg !2669

for.cond:                                         ; preds = %for.inc, %if.then8
  %5 = load i32, i32* %i, align 4, !dbg !2670
  %6 = load i32, i32* %n.addr, align 4, !dbg !2672
  %cmp9 = icmp slt i32 %5, %6, !dbg !2673
  br i1 %cmp9, label %for.body, label %for.end, !dbg !2674

for.body:                                         ; preds = %for.cond
  %7 = load i64, i64* %t, align 8, !dbg !2675
  %8 = load i64, i64* %t, align 8, !dbg !2676
  %mul = mul nsw i64 %8, %7, !dbg !2676
  store i64 %mul, i64* %t, align 8, !dbg !2676
  br label %for.inc, !dbg !2677

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4, !dbg !2678
  %inc = add nsw i32 %9, 1, !dbg !2678
  store i32 %inc, i32* %i, align 4, !dbg !2678
  br label %for.cond, !dbg !2679, !llvm.loop !2680

for.end:                                          ; preds = %for.cond
  %10 = load i32, i32* %n.addr, align 4, !dbg !2682
  %idxprom10 = sext i32 %10 to i64, !dbg !2683
  %arrayidx11 = getelementptr inbounds [26 x %struct.real_value], [26 x %struct.real_value]* @ten_to_ptwo.tens, i64 0, i64 %idxprom10, !dbg !2683
  %11 = load i64, i64* %t, align 8, !dbg !2684
  call void @real_from_integer(%struct.real_value* %arrayidx11, i32 0, i64 %11, i64 0, i32 1), !dbg !2685
  br label %if.end, !dbg !2686

if.else:                                          ; preds = %if.then
  call void @llvm.dbg.declare(metadata %struct.real_value** %t12, metadata !2687, metadata !DIExpression()), !dbg !2689
  %12 = load i32, i32* %n.addr, align 4, !dbg !2690
  %sub = sub nsw i32 %12, 1, !dbg !2691
  %call = call %struct.real_value* @ten_to_ptwo(i32 %sub), !dbg !2692
  store %struct.real_value* %call, %struct.real_value** %t12, align 8, !dbg !2689
  %13 = load i32, i32* %n.addr, align 4, !dbg !2693
  %idxprom13 = sext i32 %13 to i64, !dbg !2694
  %arrayidx14 = getelementptr inbounds [26 x %struct.real_value], [26 x %struct.real_value]* @ten_to_ptwo.tens, i64 0, i64 %idxprom13, !dbg !2694
  %14 = load %struct.real_value*, %struct.real_value** %t12, align 8, !dbg !2695
  %15 = load %struct.real_value*, %struct.real_value** %t12, align 8, !dbg !2696
  %call15 = call zeroext i8 @do_multiply(%struct.real_value* %arrayidx14, %struct.real_value* %14, %struct.real_value* %15), !dbg !2697
  br label %if.end

if.end:                                           ; preds = %if.else, %for.end
  br label %if.end16, !dbg !2698

if.end16:                                         ; preds = %if.end, %cond.end4
  %16 = load i32, i32* %n.addr, align 4, !dbg !2699
  %idxprom17 = sext i32 %16 to i64, !dbg !2700
  %arrayidx18 = getelementptr inbounds [26 x %struct.real_value], [26 x %struct.real_value]* @ten_to_ptwo.tens, i64 0, i64 %idxprom17, !dbg !2700
  ret %struct.real_value* %arrayidx18, !dbg !2701
}

declare dso_local i32 @floor_log2(i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @cmp_significands(%struct.real_value* %a, %struct.real_value* %b) #0 !dbg !2702 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca %struct.real_value*, align 8
  %b.addr = alloca %struct.real_value*, align 8
  %i = alloca i32, align 4
  %ai = alloca i64, align 8
  %bi = alloca i64, align 8
  store %struct.real_value* %a, %struct.real_value** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %a.addr, metadata !2705, metadata !DIExpression()), !dbg !2706
  store %struct.real_value* %b, %struct.real_value** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %b.addr, metadata !2707, metadata !DIExpression()), !dbg !2708
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2709, metadata !DIExpression()), !dbg !2710
  store i32 2, i32* %i, align 4, !dbg !2711
  br label %for.cond, !dbg !2713

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !2714
  %cmp = icmp sge i32 %0, 0, !dbg !2716
  br i1 %cmp, label %for.body, label %for.end, !dbg !2717

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i64* %ai, metadata !2718, metadata !DIExpression()), !dbg !2720
  %1 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !2721
  %sig = getelementptr inbounds %struct.real_value, %struct.real_value* %1, i32 0, i32 1, !dbg !2722
  %2 = load i32, i32* %i, align 4, !dbg !2723
  %idxprom = sext i32 %2 to i64, !dbg !2721
  %arrayidx = getelementptr inbounds [3 x i64], [3 x i64]* %sig, i64 0, i64 %idxprom, !dbg !2721
  %3 = load i64, i64* %arrayidx, align 8, !dbg !2721
  store i64 %3, i64* %ai, align 8, !dbg !2720
  call void @llvm.dbg.declare(metadata i64* %bi, metadata !2724, metadata !DIExpression()), !dbg !2725
  %4 = load %struct.real_value*, %struct.real_value** %b.addr, align 8, !dbg !2726
  %sig1 = getelementptr inbounds %struct.real_value, %struct.real_value* %4, i32 0, i32 1, !dbg !2727
  %5 = load i32, i32* %i, align 4, !dbg !2728
  %idxprom2 = sext i32 %5 to i64, !dbg !2726
  %arrayidx3 = getelementptr inbounds [3 x i64], [3 x i64]* %sig1, i64 0, i64 %idxprom2, !dbg !2726
  %6 = load i64, i64* %arrayidx3, align 8, !dbg !2726
  store i64 %6, i64* %bi, align 8, !dbg !2725
  %7 = load i64, i64* %ai, align 8, !dbg !2729
  %8 = load i64, i64* %bi, align 8, !dbg !2731
  %cmp4 = icmp ugt i64 %7, %8, !dbg !2732
  br i1 %cmp4, label %if.then, label %if.end, !dbg !2733

if.then:                                          ; preds = %for.body
  store i32 1, i32* %retval, align 4, !dbg !2734
  br label %return, !dbg !2734

if.end:                                           ; preds = %for.body
  %9 = load i64, i64* %ai, align 8, !dbg !2735
  %10 = load i64, i64* %bi, align 8, !dbg !2737
  %cmp5 = icmp ult i64 %9, %10, !dbg !2738
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !2739

if.then6:                                         ; preds = %if.end
  store i32 -1, i32* %retval, align 4, !dbg !2740
  br label %return, !dbg !2740

if.end7:                                          ; preds = %if.end
  br label %for.inc, !dbg !2741

for.inc:                                          ; preds = %if.end7
  %11 = load i32, i32* %i, align 4, !dbg !2742
  %dec = add nsw i32 %11, -1, !dbg !2742
  store i32 %dec, i32* %i, align 4, !dbg !2742
  br label %for.cond, !dbg !2743, !llvm.loop !2744

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4, !dbg !2746
  br label %return, !dbg !2746

return:                                           ; preds = %for.end, %if.then6, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !2747
  ret i32 %12, !dbg !2747
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.real_value* @ten_to_mptwo(i32 %n) #0 !dbg !507 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !2748, metadata !DIExpression()), !dbg !2749
  %0 = load i32, i32* %n.addr, align 4, !dbg !2750
  %cmp = icmp sge i32 %0, 0, !dbg !2750
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !2750

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 2286, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2750
  br label %cond.end, !dbg !2750

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2750

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !2750
  %1 = load i32, i32* %n.addr, align 4, !dbg !2751
  %cmp1 = icmp slt i32 %1, 26, !dbg !2751
  br i1 %cmp1, label %cond.false3, label %cond.true2, !dbg !2751

cond.true2:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 2287, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2751
  br label %cond.end4, !dbg !2751

cond.false3:                                      ; preds = %cond.end
  br label %cond.end4, !dbg !2751

cond.end4:                                        ; preds = %cond.false3, %cond.true2
  %cond5 = phi i32 [ 0, %cond.true2 ], [ 0, %cond.false3 ], !dbg !2751
  %2 = load i32, i32* %n.addr, align 4, !dbg !2752
  %idxprom = sext i32 %2 to i64, !dbg !2754
  %arrayidx = getelementptr inbounds [26 x %struct.real_value], [26 x %struct.real_value]* @ten_to_mptwo.tens, i64 0, i64 %idxprom, !dbg !2754
  %3 = bitcast %struct.real_value* %arrayidx to i32*, !dbg !2755
  %bf.load = load i32, i32* %3, align 16, !dbg !2755
  %bf.clear = and i32 %bf.load, 3, !dbg !2755
  %cmp6 = icmp eq i32 %bf.clear, 0, !dbg !2756
  br i1 %cmp6, label %if.then, label %if.end, !dbg !2757

if.then:                                          ; preds = %cond.end4
  %4 = load i32, i32* %n.addr, align 4, !dbg !2758
  %idxprom7 = sext i32 %4 to i64, !dbg !2759
  %arrayidx8 = getelementptr inbounds [26 x %struct.real_value], [26 x %struct.real_value]* @ten_to_mptwo.tens, i64 0, i64 %idxprom7, !dbg !2759
  %call = call %struct.real_value* @real_digit(i32 1), !dbg !2760
  %5 = load i32, i32* %n.addr, align 4, !dbg !2761
  %call9 = call %struct.real_value* @ten_to_ptwo(i32 %5), !dbg !2762
  %call10 = call zeroext i8 @do_divide(%struct.real_value* %arrayidx8, %struct.real_value* %call, %struct.real_value* %call9), !dbg !2763
  br label %if.end, !dbg !2763

if.end:                                           ; preds = %if.then, %cond.end4
  %6 = load i32, i32* %n.addr, align 4, !dbg !2764
  %idxprom11 = sext i32 %6 to i64, !dbg !2765
  %arrayidx12 = getelementptr inbounds [26 x %struct.real_value], [26 x %struct.real_value]* @ten_to_mptwo.tens, i64 0, i64 %idxprom11, !dbg !2765
  ret %struct.real_value* %arrayidx12, !dbg !2766
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @rtd_divmod(%struct.real_value* %num, %struct.real_value* %den) #0 !dbg !2767 {
entry:
  %retval = alloca i64, align 8
  %num.addr = alloca %struct.real_value*, align 8
  %den.addr = alloca %struct.real_value*, align 8
  %q = alloca i64, align 8
  %msb = alloca i64, align 8
  %expn = alloca i32, align 4
  %expd = alloca i32, align 4
  store %struct.real_value* %num, %struct.real_value** %num.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %num.addr, metadata !2770, metadata !DIExpression()), !dbg !2771
  store %struct.real_value* %den, %struct.real_value** %den.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %den.addr, metadata !2772, metadata !DIExpression()), !dbg !2773
  call void @llvm.dbg.declare(metadata i64* %q, metadata !2774, metadata !DIExpression()), !dbg !2775
  call void @llvm.dbg.declare(metadata i64* %msb, metadata !2776, metadata !DIExpression()), !dbg !2777
  call void @llvm.dbg.declare(metadata i32* %expn, metadata !2778, metadata !DIExpression()), !dbg !2779
  %0 = load %struct.real_value*, %struct.real_value** %num.addr, align 8, !dbg !2780
  %1 = bitcast %struct.real_value* %0 to i32*, !dbg !2780
  %bf.load = load i32, i32* %1, align 8, !dbg !2780
  %bf.lshr = lshr i32 %bf.load, 6, !dbg !2780
  %xor = xor i32 %bf.lshr, 33554432, !dbg !2780
  %sub = sub nsw i32 %xor, 33554432, !dbg !2780
  store i32 %sub, i32* %expn, align 4, !dbg !2779
  call void @llvm.dbg.declare(metadata i32* %expd, metadata !2781, metadata !DIExpression()), !dbg !2782
  %2 = load %struct.real_value*, %struct.real_value** %den.addr, align 8, !dbg !2783
  %3 = bitcast %struct.real_value* %2 to i32*, !dbg !2783
  %bf.load1 = load i32, i32* %3, align 8, !dbg !2783
  %bf.lshr2 = lshr i32 %bf.load1, 6, !dbg !2783
  %xor3 = xor i32 %bf.lshr2, 33554432, !dbg !2783
  %sub4 = sub nsw i32 %xor3, 33554432, !dbg !2783
  store i32 %sub4, i32* %expd, align 4, !dbg !2782
  %4 = load i32, i32* %expn, align 4, !dbg !2784
  %5 = load i32, i32* %expd, align 4, !dbg !2786
  %cmp = icmp slt i32 %4, %5, !dbg !2787
  br i1 %cmp, label %if.then, label %if.end, !dbg !2788

if.then:                                          ; preds = %entry
  store i64 0, i64* %retval, align 8, !dbg !2789
  br label %return, !dbg !2789

if.end:                                           ; preds = %entry
  store i64 0, i64* %msb, align 8, !dbg !2790
  store i64 0, i64* %q, align 8, !dbg !2791
  br label %start, !dbg !2792

6:                                                ; No predecessors!
  br label %do.body, !dbg !2793

do.body:                                          ; preds = %do.cond, %6
  %7 = load %struct.real_value*, %struct.real_value** %num.addr, align 8, !dbg !2794
  %sig = getelementptr inbounds %struct.real_value, %struct.real_value* %7, i32 0, i32 1, !dbg !2796
  %arrayidx = getelementptr inbounds [3 x i64], [3 x i64]* %sig, i64 0, i64 2, !dbg !2794
  %8 = load i64, i64* %arrayidx, align 8, !dbg !2794
  %and = and i64 %8, -9223372036854775808, !dbg !2797
  store i64 %and, i64* %msb, align 8, !dbg !2798
  %9 = load i64, i64* %q, align 8, !dbg !2799
  %shl = shl i64 %9, 1, !dbg !2799
  store i64 %shl, i64* %q, align 8, !dbg !2799
  %10 = load %struct.real_value*, %struct.real_value** %num.addr, align 8, !dbg !2800
  %11 = load %struct.real_value*, %struct.real_value** %num.addr, align 8, !dbg !2801
  call void @lshift_significand_1(%struct.real_value* %10, %struct.real_value* %11), !dbg !2802
  br label %start, !dbg !2802

start:                                            ; preds = %do.body, %if.end
  call void @llvm.dbg.label(metadata !2803), !dbg !2804
  %12 = load i64, i64* %msb, align 8, !dbg !2805
  %tobool = icmp ne i64 %12, 0, !dbg !2805
  br i1 %tobool, label %if.then6, label %lor.lhs.false, !dbg !2807

lor.lhs.false:                                    ; preds = %start
  %13 = load %struct.real_value*, %struct.real_value** %num.addr, align 8, !dbg !2808
  %14 = load %struct.real_value*, %struct.real_value** %den.addr, align 8, !dbg !2809
  %call = call i32 @cmp_significands(%struct.real_value* %13, %struct.real_value* %14), !dbg !2810
  %cmp5 = icmp sge i32 %call, 0, !dbg !2811
  br i1 %cmp5, label %if.then6, label %if.end8, !dbg !2812

if.then6:                                         ; preds = %lor.lhs.false, %start
  %15 = load %struct.real_value*, %struct.real_value** %num.addr, align 8, !dbg !2813
  %16 = load %struct.real_value*, %struct.real_value** %num.addr, align 8, !dbg !2815
  %17 = load %struct.real_value*, %struct.real_value** %den.addr, align 8, !dbg !2816
  %call7 = call zeroext i8 @sub_significands(%struct.real_value* %15, %struct.real_value* %16, %struct.real_value* %17, i32 0), !dbg !2817
  %18 = load i64, i64* %q, align 8, !dbg !2818
  %or = or i64 %18, 1, !dbg !2818
  store i64 %or, i64* %q, align 8, !dbg !2818
  br label %if.end8, !dbg !2819

if.end8:                                          ; preds = %if.then6, %lor.lhs.false
  br label %do.cond, !dbg !2820

do.cond:                                          ; preds = %if.end8
  %19 = load i32, i32* %expn, align 4, !dbg !2821
  %dec = add nsw i32 %19, -1, !dbg !2821
  store i32 %dec, i32* %expn, align 4, !dbg !2821
  %20 = load i32, i32* %expd, align 4, !dbg !2822
  %cmp9 = icmp sge i32 %dec, %20, !dbg !2823
  br i1 %cmp9, label %do.body, label %do.end, !dbg !2820, !llvm.loop !2824

do.end:                                           ; preds = %do.cond
  %21 = load i32, i32* %expd, align 4, !dbg !2826
  %and10 = and i32 %21, 67108863, !dbg !2826
  %22 = load %struct.real_value*, %struct.real_value** %num.addr, align 8, !dbg !2826
  %23 = bitcast %struct.real_value* %22 to i32*, !dbg !2826
  %bf.load11 = load i32, i32* %23, align 8, !dbg !2826
  %bf.value = and i32 %and10, 67108863, !dbg !2826
  %bf.shl = shl i32 %bf.value, 6, !dbg !2826
  %bf.clear = and i32 %bf.load11, 63, !dbg !2826
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !2826
  store i32 %bf.set, i32* %23, align 8, !dbg !2826
  %24 = load %struct.real_value*, %struct.real_value** %num.addr, align 8, !dbg !2827
  call void @normalize(%struct.real_value* %24), !dbg !2828
  %25 = load i64, i64* %q, align 8, !dbg !2829
  store i64 %25, i64* %retval, align 8, !dbg !2830
  br label %return, !dbg !2830

return:                                           ; preds = %do.end, %if.then
  %26 = load i64, i64* %retval, align 8, !dbg !2831
  ret i64 %26, !dbg !2831
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @cmp_significand_0(%struct.real_value* %a) #0 !dbg !2832 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca %struct.real_value*, align 8
  %i = alloca i32, align 4
  store %struct.real_value* %a, %struct.real_value** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %a.addr, metadata !2833, metadata !DIExpression()), !dbg !2834
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2835, metadata !DIExpression()), !dbg !2836
  store i32 2, i32* %i, align 4, !dbg !2837
  br label %for.cond, !dbg !2839

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !2840
  %cmp = icmp sge i32 %0, 0, !dbg !2842
  br i1 %cmp, label %for.body, label %for.end, !dbg !2843

for.body:                                         ; preds = %for.cond
  %1 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !2844
  %sig = getelementptr inbounds %struct.real_value, %struct.real_value* %1, i32 0, i32 1, !dbg !2846
  %2 = load i32, i32* %i, align 4, !dbg !2847
  %idxprom = sext i32 %2 to i64, !dbg !2844
  %arrayidx = getelementptr inbounds [3 x i64], [3 x i64]* %sig, i64 0, i64 %idxprom, !dbg !2844
  %3 = load i64, i64* %arrayidx, align 8, !dbg !2844
  %tobool = icmp ne i64 %3, 0, !dbg !2844
  br i1 %tobool, label %if.then, label %if.end, !dbg !2848

if.then:                                          ; preds = %for.body
  store i32 1, i32* %retval, align 4, !dbg !2849
  br label %return, !dbg !2849

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !2850

for.inc:                                          ; preds = %if.end
  %4 = load i32, i32* %i, align 4, !dbg !2851
  %dec = add nsw i32 %4, -1, !dbg !2851
  store i32 %dec, i32* %i, align 4, !dbg !2851
  br label %for.cond, !dbg !2852, !llvm.loop !2853

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4, !dbg !2855
  br label %return, !dbg !2855

return:                                           ; preds = %for.end, %if.then
  %5 = load i32, i32* %retval, align 4, !dbg !2856
  ret i32 %5, !dbg !2856
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @real_to_decimal(i8* %str, %struct.real_value* %r_orig, i64 %buf_size, i64 %digits, i32 %crop_trailing_zeros) #0 !dbg !2857 {
entry:
  %str.addr = alloca i8*, align 8
  %r_orig.addr = alloca %struct.real_value*, align 8
  %buf_size.addr = alloca i64, align 8
  %digits.addr = alloca i64, align 8
  %crop_trailing_zeros.addr = alloca i32, align 4
  store i8* %str, i8** %str.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !2860, metadata !DIExpression()), !dbg !2861
  store %struct.real_value* %r_orig, %struct.real_value** %r_orig.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r_orig.addr, metadata !2862, metadata !DIExpression()), !dbg !2863
  store i64 %buf_size, i64* %buf_size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %buf_size.addr, metadata !2864, metadata !DIExpression()), !dbg !2865
  store i64 %digits, i64* %digits.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %digits.addr, metadata !2866, metadata !DIExpression()), !dbg !2867
  store i32 %crop_trailing_zeros, i32* %crop_trailing_zeros.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %crop_trailing_zeros.addr, metadata !2868, metadata !DIExpression()), !dbg !2869
  %0 = load i8*, i8** %str.addr, align 8, !dbg !2870
  %1 = load %struct.real_value*, %struct.real_value** %r_orig.addr, align 8, !dbg !2871
  %2 = load i64, i64* %buf_size.addr, align 8, !dbg !2872
  %3 = load i64, i64* %digits.addr, align 8, !dbg !2873
  %4 = load i32, i32* %crop_trailing_zeros.addr, align 4, !dbg !2874
  call void @real_to_decimal_for_mode(i8* %0, %struct.real_value* %1, i64 %2, i64 %3, i32 %4, i32 0), !dbg !2875
  ret void, !dbg !2876
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @real_to_hexadecimal(i8* %str, %struct.real_value* %r, i64 %buf_size, i64 %digits, i32 %crop_trailing_zeros) #0 !dbg !2877 {
entry:
  %str.addr = alloca i8*, align 8
  %r.addr = alloca %struct.real_value*, align 8
  %buf_size.addr = alloca i64, align 8
  %digits.addr = alloca i64, align 8
  %crop_trailing_zeros.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %exp = alloca i32, align 4
  %p = alloca i8*, align 8
  %first = alloca i8*, align 8
  %exp_buf = alloca [16 x i8], align 16
  %max_digits = alloca i64, align 8
  store i8* %str, i8** %str.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !2878, metadata !DIExpression()), !dbg !2879
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !2880, metadata !DIExpression()), !dbg !2881
  store i64 %buf_size, i64* %buf_size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %buf_size.addr, metadata !2882, metadata !DIExpression()), !dbg !2883
  store i64 %digits, i64* %digits.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %digits.addr, metadata !2884, metadata !DIExpression()), !dbg !2885
  store i32 %crop_trailing_zeros, i32* %crop_trailing_zeros.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %crop_trailing_zeros.addr, metadata !2886, metadata !DIExpression()), !dbg !2887
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2888, metadata !DIExpression()), !dbg !2889
  call void @llvm.dbg.declare(metadata i32* %j, metadata !2890, metadata !DIExpression()), !dbg !2891
  call void @llvm.dbg.declare(metadata i32* %exp, metadata !2892, metadata !DIExpression()), !dbg !2893
  %0 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !2894
  %1 = bitcast %struct.real_value* %0 to i32*, !dbg !2894
  %bf.load = load i32, i32* %1, align 8, !dbg !2894
  %bf.lshr = lshr i32 %bf.load, 6, !dbg !2894
  %xor = xor i32 %bf.lshr, 33554432, !dbg !2894
  %sub = sub nsw i32 %xor, 33554432, !dbg !2894
  store i32 %sub, i32* %exp, align 4, !dbg !2893
  call void @llvm.dbg.declare(metadata i8** %p, metadata !2895, metadata !DIExpression()), !dbg !2896
  call void @llvm.dbg.declare(metadata i8** %first, metadata !2897, metadata !DIExpression()), !dbg !2898
  call void @llvm.dbg.declare(metadata [16 x i8]* %exp_buf, metadata !2899, metadata !DIExpression()), !dbg !2903
  call void @llvm.dbg.declare(metadata i64* %max_digits, metadata !2904, metadata !DIExpression()), !dbg !2905
  %2 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !2906
  %3 = bitcast %struct.real_value* %2 to i32*, !dbg !2907
  %bf.load1 = load i32, i32* %3, align 8, !dbg !2907
  %bf.clear = and i32 %bf.load1, 3, !dbg !2907
  switch i32 %bf.clear, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb2
    i32 2, label %sw.bb3
    i32 3, label %sw.bb7
  ], !dbg !2908

sw.bb:                                            ; preds = %entry
  store i32 0, i32* %exp, align 4, !dbg !2909
  br label %sw.epilog, !dbg !2911

sw.bb2:                                           ; preds = %entry
  br label %sw.epilog, !dbg !2912

sw.bb3:                                           ; preds = %entry
  %4 = load i8*, i8** %str.addr, align 8, !dbg !2913
  %5 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !2914
  %6 = bitcast %struct.real_value* %5 to i32*, !dbg !2915
  %bf.load4 = load i32, i32* %6, align 8, !dbg !2915
  %bf.lshr5 = lshr i32 %bf.load4, 3, !dbg !2915
  %bf.clear6 = and i32 %bf.lshr5, 1, !dbg !2915
  %tobool = icmp ne i32 %bf.clear6, 0, !dbg !2914
  %7 = zext i1 %tobool to i64, !dbg !2914
  %cond = select i1 %tobool, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0), !dbg !2914
  %call = call i8* @strcpy(i8* %4, i8* %cond), !dbg !2916
  br label %return, !dbg !2917

sw.bb7:                                           ; preds = %entry
  %8 = load i8*, i8** %str.addr, align 8, !dbg !2918
  %9 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !2919
  %10 = bitcast %struct.real_value* %9 to i32*, !dbg !2920
  %bf.load8 = load i32, i32* %10, align 8, !dbg !2920
  %bf.lshr9 = lshr i32 %bf.load8, 3, !dbg !2920
  %bf.clear10 = and i32 %bf.lshr9, 1, !dbg !2920
  %tobool11 = icmp ne i32 %bf.clear10, 0, !dbg !2919
  %11 = zext i1 %tobool11 to i64, !dbg !2919
  %cond12 = select i1 %tobool11, i32 45, i32 43, !dbg !2919
  %12 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !2921
  %13 = bitcast %struct.real_value* %12 to i32*, !dbg !2922
  %bf.load13 = load i32, i32* %13, align 8, !dbg !2922
  %bf.lshr14 = lshr i32 %bf.load13, 4, !dbg !2922
  %bf.clear15 = and i32 %bf.lshr14, 1, !dbg !2922
  %tobool16 = icmp ne i32 %bf.clear15, 0, !dbg !2921
  %14 = zext i1 %tobool16 to i64, !dbg !2921
  %cond17 = select i1 %tobool16, i32 83, i32 81, !dbg !2921
  %call18 = call i32 (i8*, i8*, ...) @sprintf(i8* %8, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i64 0, i64 0), i32 %cond12, i32 %cond17), !dbg !2923
  br label %return, !dbg !2924

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 1844, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2925
  br label %sw.epilog, !dbg !2926

sw.epilog:                                        ; preds = %sw.default, %sw.bb2, %sw.bb
  %15 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !2927
  %16 = bitcast %struct.real_value* %15 to i32*, !dbg !2929
  %bf.load19 = load i32, i32* %16, align 8, !dbg !2929
  %bf.lshr20 = lshr i32 %bf.load19, 2, !dbg !2929
  %bf.clear21 = and i32 %bf.lshr20, 1, !dbg !2929
  %tobool22 = icmp ne i32 %bf.clear21, 0, !dbg !2927
  br i1 %tobool22, label %if.then, label %if.end, !dbg !2930

if.then:                                          ; preds = %sw.epilog
  %17 = load i8*, i8** %str.addr, align 8, !dbg !2931
  %call23 = call i8* @strcpy(i8* %17, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0)), !dbg !2933
  br label %return, !dbg !2934

if.end:                                           ; preds = %sw.epilog
  %18 = load i64, i64* %digits.addr, align 8, !dbg !2935
  %cmp = icmp eq i64 %18, 0, !dbg !2937
  br i1 %cmp, label %if.then24, label %if.end25, !dbg !2938

if.then24:                                        ; preds = %if.end
  store i64 48, i64* %digits.addr, align 8, !dbg !2939
  br label %if.end25, !dbg !2940

if.end25:                                         ; preds = %if.then24, %if.end
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %exp_buf, i64 0, i64 0, !dbg !2941
  %19 = load i32, i32* %exp, align 4, !dbg !2942
  %call26 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i64 0, i64 0), i32 %19), !dbg !2943
  %20 = load i64, i64* %buf_size.addr, align 8, !dbg !2944
  %arraydecay27 = getelementptr inbounds [16 x i8], [16 x i8]* %exp_buf, i64 0, i64 0, !dbg !2945
  %call28 = call i64 @strlen(i8* %arraydecay27), !dbg !2946
  %sub29 = sub i64 %20, %call28, !dbg !2947
  %21 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !2948
  %22 = bitcast %struct.real_value* %21 to i32*, !dbg !2949
  %bf.load30 = load i32, i32* %22, align 8, !dbg !2949
  %bf.lshr31 = lshr i32 %bf.load30, 3, !dbg !2949
  %bf.clear32 = and i32 %bf.lshr31, 1, !dbg !2949
  %conv = zext i32 %bf.clear32 to i64, !dbg !2948
  %sub33 = sub i64 %sub29, %conv, !dbg !2950
  %sub34 = sub i64 %sub33, 4, !dbg !2951
  %sub35 = sub i64 %sub34, 1, !dbg !2952
  store i64 %sub35, i64* %max_digits, align 8, !dbg !2953
  %23 = load i64, i64* %max_digits, align 8, !dbg !2954
  %24 = load i64, i64* %buf_size.addr, align 8, !dbg !2954
  %cmp36 = icmp ule i64 %23, %24, !dbg !2954
  br i1 %cmp36, label %cond.false, label %cond.true, !dbg !2954

cond.true:                                        ; preds = %if.end25
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 1861, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2954
  br label %cond.end, !dbg !2954

cond.false:                                       ; preds = %if.end25
  br label %cond.end, !dbg !2954

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond38 = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !2954
  %25 = load i64, i64* %digits.addr, align 8, !dbg !2955
  %26 = load i64, i64* %max_digits, align 8, !dbg !2957
  %cmp39 = icmp ugt i64 %25, %26, !dbg !2958
  br i1 %cmp39, label %if.then41, label %if.end42, !dbg !2959

if.then41:                                        ; preds = %cond.end
  %27 = load i64, i64* %max_digits, align 8, !dbg !2960
  store i64 %27, i64* %digits.addr, align 8, !dbg !2961
  br label %if.end42, !dbg !2962

if.end42:                                         ; preds = %if.then41, %cond.end
  %28 = load i8*, i8** %str.addr, align 8, !dbg !2963
  store i8* %28, i8** %p, align 8, !dbg !2964
  %29 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !2965
  %30 = bitcast %struct.real_value* %29 to i32*, !dbg !2967
  %bf.load43 = load i32, i32* %30, align 8, !dbg !2967
  %bf.lshr44 = lshr i32 %bf.load43, 3, !dbg !2967
  %bf.clear45 = and i32 %bf.lshr44, 1, !dbg !2967
  %tobool46 = icmp ne i32 %bf.clear45, 0, !dbg !2965
  br i1 %tobool46, label %if.then47, label %if.end48, !dbg !2968

if.then47:                                        ; preds = %if.end42
  %31 = load i8*, i8** %p, align 8, !dbg !2969
  %incdec.ptr = getelementptr inbounds i8, i8* %31, i32 1, !dbg !2969
  store i8* %incdec.ptr, i8** %p, align 8, !dbg !2969
  store i8 45, i8* %31, align 1, !dbg !2970
  br label %if.end48, !dbg !2971

if.end48:                                         ; preds = %if.then47, %if.end42
  %32 = load i8*, i8** %p, align 8, !dbg !2972
  %incdec.ptr49 = getelementptr inbounds i8, i8* %32, i32 1, !dbg !2972
  store i8* %incdec.ptr49, i8** %p, align 8, !dbg !2972
  store i8 48, i8* %32, align 1, !dbg !2973
  %33 = load i8*, i8** %p, align 8, !dbg !2974
  %incdec.ptr50 = getelementptr inbounds i8, i8* %33, i32 1, !dbg !2974
  store i8* %incdec.ptr50, i8** %p, align 8, !dbg !2974
  store i8 120, i8* %33, align 1, !dbg !2975
  %34 = load i8*, i8** %p, align 8, !dbg !2976
  %incdec.ptr51 = getelementptr inbounds i8, i8* %34, i32 1, !dbg !2976
  store i8* %incdec.ptr51, i8** %p, align 8, !dbg !2976
  store i8 48, i8* %34, align 1, !dbg !2977
  %35 = load i8*, i8** %p, align 8, !dbg !2978
  %incdec.ptr52 = getelementptr inbounds i8, i8* %35, i32 1, !dbg !2978
  store i8* %incdec.ptr52, i8** %p, align 8, !dbg !2978
  store i8 46, i8* %35, align 1, !dbg !2979
  %36 = load i8*, i8** %p, align 8, !dbg !2980
  store i8* %36, i8** %first, align 8, !dbg !2981
  store i32 2, i32* %i, align 4, !dbg !2982
  br label %for.cond, !dbg !2984

for.cond:                                         ; preds = %for.inc66, %if.end48
  %37 = load i32, i32* %i, align 4, !dbg !2985
  %cmp53 = icmp sge i32 %37, 0, !dbg !2987
  br i1 %cmp53, label %for.body, label %for.end68, !dbg !2988

for.body:                                         ; preds = %for.cond
  store i32 60, i32* %j, align 4, !dbg !2989
  br label %for.cond55, !dbg !2991

for.cond55:                                       ; preds = %for.inc, %for.body
  %38 = load i32, i32* %j, align 4, !dbg !2992
  %cmp56 = icmp sge i32 %38, 0, !dbg !2994
  br i1 %cmp56, label %for.body58, label %for.end, !dbg !2995

for.body58:                                       ; preds = %for.cond55
  %39 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !2996
  %sig = getelementptr inbounds %struct.real_value, %struct.real_value* %39, i32 0, i32 1, !dbg !2998
  %40 = load i32, i32* %i, align 4, !dbg !2999
  %idxprom = sext i32 %40 to i64, !dbg !2996
  %arrayidx = getelementptr inbounds [3 x i64], [3 x i64]* %sig, i64 0, i64 %idxprom, !dbg !2996
  %41 = load i64, i64* %arrayidx, align 8, !dbg !2996
  %42 = load i32, i32* %j, align 4, !dbg !3000
  %sh_prom = zext i32 %42 to i64, !dbg !3001
  %shr = lshr i64 %41, %sh_prom, !dbg !3001
  %and = and i64 %shr, 15, !dbg !3002
  %arrayidx59 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.10, i64 0, i64 %and, !dbg !3003
  %43 = load i8, i8* %arrayidx59, align 1, !dbg !3003
  %44 = load i8*, i8** %p, align 8, !dbg !3004
  %incdec.ptr60 = getelementptr inbounds i8, i8* %44, i32 1, !dbg !3004
  store i8* %incdec.ptr60, i8** %p, align 8, !dbg !3004
  store i8 %43, i8* %44, align 1, !dbg !3005
  %45 = load i64, i64* %digits.addr, align 8, !dbg !3006
  %dec = add i64 %45, -1, !dbg !3006
  store i64 %dec, i64* %digits.addr, align 8, !dbg !3006
  %cmp61 = icmp eq i64 %dec, 0, !dbg !3008
  br i1 %cmp61, label %if.then63, label %if.end64, !dbg !3009

if.then63:                                        ; preds = %for.body58
  br label %out, !dbg !3010

if.end64:                                         ; preds = %for.body58
  br label %for.inc, !dbg !3011

for.inc:                                          ; preds = %if.end64
  %46 = load i32, i32* %j, align 4, !dbg !3012
  %sub65 = sub nsw i32 %46, 4, !dbg !3012
  store i32 %sub65, i32* %j, align 4, !dbg !3012
  br label %for.cond55, !dbg !3013, !llvm.loop !3014

for.end:                                          ; preds = %for.cond55
  br label %for.inc66, !dbg !3015

for.inc66:                                        ; preds = %for.end
  %47 = load i32, i32* %i, align 4, !dbg !3016
  %dec67 = add nsw i32 %47, -1, !dbg !3016
  store i32 %dec67, i32* %i, align 4, !dbg !3016
  br label %for.cond, !dbg !3017, !llvm.loop !3018

for.end68:                                        ; preds = %for.cond
  br label %out, !dbg !3019

out:                                              ; preds = %for.end68, %if.then63
  call void @llvm.dbg.label(metadata !3020), !dbg !3021
  %48 = load i32, i32* %crop_trailing_zeros.addr, align 4, !dbg !3022
  %tobool69 = icmp ne i32 %48, 0, !dbg !3022
  br i1 %tobool69, label %if.then70, label %if.end78, !dbg !3024

if.then70:                                        ; preds = %out
  br label %while.cond, !dbg !3025

while.cond:                                       ; preds = %while.body, %if.then70
  %49 = load i8*, i8** %p, align 8, !dbg !3026
  %50 = load i8*, i8** %first, align 8, !dbg !3027
  %add.ptr = getelementptr inbounds i8, i8* %50, i64 1, !dbg !3028
  %cmp71 = icmp ugt i8* %49, %add.ptr, !dbg !3029
  br i1 %cmp71, label %land.rhs, label %land.end, !dbg !3030

land.rhs:                                         ; preds = %while.cond
  %51 = load i8*, i8** %p, align 8, !dbg !3031
  %arrayidx73 = getelementptr inbounds i8, i8* %51, i64 -1, !dbg !3031
  %52 = load i8, i8* %arrayidx73, align 1, !dbg !3031
  %conv74 = sext i8 %52 to i32, !dbg !3031
  %cmp75 = icmp eq i32 %conv74, 48, !dbg !3032
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %53 = phi i1 [ false, %while.cond ], [ %cmp75, %land.rhs ], !dbg !3033
  br i1 %53, label %while.body, label %while.end, !dbg !3025

while.body:                                       ; preds = %land.end
  %54 = load i8*, i8** %p, align 8, !dbg !3034
  %incdec.ptr77 = getelementptr inbounds i8, i8* %54, i32 -1, !dbg !3034
  store i8* %incdec.ptr77, i8** %p, align 8, !dbg !3034
  br label %while.cond, !dbg !3025, !llvm.loop !3035

while.end:                                        ; preds = %land.end
  br label %if.end78, !dbg !3025

if.end78:                                         ; preds = %while.end, %out
  %55 = load i8*, i8** %p, align 8, !dbg !3036
  %56 = load i32, i32* %exp, align 4, !dbg !3037
  %call79 = call i32 (i8*, i8*, ...) @sprintf(i8* %55, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i64 0, i64 0), i32 %56), !dbg !3038
  br label %return, !dbg !3039

return:                                           ; preds = %if.end78, %if.then, %sw.bb7, %sw.bb3
  ret void, !dbg !3039
}

declare dso_local i64 @strlen(i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @real_from_string(%struct.real_value* %r, i8* %str) #0 !dbg !3040 {
entry:
  %retval = alloca i32, align 4
  %r.addr = alloca %struct.real_value*, align 8
  %str.addr = alloca i8*, align 8
  %exp = alloca i32, align 4
  %sign = alloca i8, align 1
  %pos = alloca i32, align 4
  %d = alloca i32, align 4
  %exp_neg = alloca i8, align 1
  %ten = alloca %struct.real_value*, align 8
  %d171 = alloca i32, align 4
  %exp_neg251 = alloca i8, align 1
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !3045, metadata !DIExpression()), !dbg !3046
  store i8* %str, i8** %str.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !3047, metadata !DIExpression()), !dbg !3048
  call void @llvm.dbg.declare(metadata i32* %exp, metadata !3049, metadata !DIExpression()), !dbg !3050
  store i32 0, i32* %exp, align 4, !dbg !3050
  call void @llvm.dbg.declare(metadata i8* %sign, metadata !3051, metadata !DIExpression()), !dbg !3052
  store i8 0, i8* %sign, align 1, !dbg !3052
  %0 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3053
  call void @get_zero(%struct.real_value* %0, i32 0), !dbg !3054
  %1 = load i8*, i8** %str.addr, align 8, !dbg !3055
  %2 = load i8, i8* %1, align 1, !dbg !3057
  %conv = sext i8 %2 to i32, !dbg !3057
  %cmp = icmp eq i32 %conv, 45, !dbg !3058
  br i1 %cmp, label %if.then, label %if.else, !dbg !3059

if.then:                                          ; preds = %entry
  store i8 1, i8* %sign, align 1, !dbg !3060
  %3 = load i8*, i8** %str.addr, align 8, !dbg !3062
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1, !dbg !3062
  store i8* %incdec.ptr, i8** %str.addr, align 8, !dbg !3062
  br label %if.end7, !dbg !3063

if.else:                                          ; preds = %entry
  %4 = load i8*, i8** %str.addr, align 8, !dbg !3064
  %5 = load i8, i8* %4, align 1, !dbg !3066
  %conv2 = sext i8 %5 to i32, !dbg !3066
  %cmp3 = icmp eq i32 %conv2, 43, !dbg !3067
  br i1 %cmp3, label %if.then5, label %if.end, !dbg !3068

if.then5:                                         ; preds = %if.else
  %6 = load i8*, i8** %str.addr, align 8, !dbg !3069
  %incdec.ptr6 = getelementptr inbounds i8, i8* %6, i32 1, !dbg !3069
  store i8* %incdec.ptr6, i8** %str.addr, align 8, !dbg !3069
  br label %if.end, !dbg !3070

if.end:                                           ; preds = %if.then5, %if.else
  br label %if.end7

if.end7:                                          ; preds = %if.end, %if.then
  %7 = load i8*, i8** %str.addr, align 8, !dbg !3071
  %call = call i32 @strncmp(i8* %7, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i64 0, i64 0), i64 4), !dbg !3073
  %tobool = icmp ne i32 %call, 0, !dbg !3073
  br i1 %tobool, label %if.else10, label %if.then8, !dbg !3074

if.then8:                                         ; preds = %if.end7
  %8 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3075
  %9 = load i8, i8* %sign, align 1, !dbg !3077
  %conv9 = zext i8 %9 to i32, !dbg !3077
  call void @get_canonical_qnan(%struct.real_value* %8, i32 %conv9), !dbg !3078
  store i32 0, i32* %retval, align 4, !dbg !3079
  br label %return, !dbg !3079

if.else10:                                        ; preds = %if.end7
  %10 = load i8*, i8** %str.addr, align 8, !dbg !3080
  %call11 = call i32 @strncmp(i8* %10, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i64 0, i64 0), i64 4), !dbg !3082
  %tobool12 = icmp ne i32 %call11, 0, !dbg !3082
  br i1 %tobool12, label %if.else15, label %if.then13, !dbg !3083

if.then13:                                        ; preds = %if.else10
  %11 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3084
  %12 = load i8, i8* %sign, align 1, !dbg !3086
  %conv14 = zext i8 %12 to i32, !dbg !3086
  call void @get_canonical_snan(%struct.real_value* %11, i32 %conv14), !dbg !3087
  store i32 0, i32* %retval, align 4, !dbg !3088
  br label %return, !dbg !3088

if.else15:                                        ; preds = %if.else10
  %13 = load i8*, i8** %str.addr, align 8, !dbg !3089
  %call16 = call i32 @strncmp(i8* %13, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i64 0, i64 0), i64 3), !dbg !3091
  %tobool17 = icmp ne i32 %call16, 0, !dbg !3091
  br i1 %tobool17, label %if.end20, label %if.then18, !dbg !3092

if.then18:                                        ; preds = %if.else15
  %14 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3093
  %15 = load i8, i8* %sign, align 1, !dbg !3095
  %conv19 = zext i8 %15 to i32, !dbg !3095
  call void @get_inf(%struct.real_value* %14, i32 %conv19), !dbg !3096
  store i32 0, i32* %retval, align 4, !dbg !3097
  br label %return, !dbg !3097

if.end20:                                         ; preds = %if.else15
  br label %if.end21

if.end21:                                         ; preds = %if.end20
  br label %if.end22

if.end22:                                         ; preds = %if.end21
  %16 = load i8*, i8** %str.addr, align 8, !dbg !3098
  %arrayidx = getelementptr inbounds i8, i8* %16, i64 0, !dbg !3098
  %17 = load i8, i8* %arrayidx, align 1, !dbg !3098
  %conv23 = sext i8 %17 to i32, !dbg !3098
  %cmp24 = icmp eq i32 %conv23, 48, !dbg !3100
  br i1 %cmp24, label %land.lhs.true, label %if.else169, !dbg !3101

land.lhs.true:                                    ; preds = %if.end22
  %18 = load i8*, i8** %str.addr, align 8, !dbg !3102
  %arrayidx26 = getelementptr inbounds i8, i8* %18, i64 1, !dbg !3102
  %19 = load i8, i8* %arrayidx26, align 1, !dbg !3102
  %conv27 = sext i8 %19 to i32, !dbg !3102
  %cmp28 = icmp eq i32 %conv27, 120, !dbg !3103
  br i1 %cmp28, label %if.then34, label %lor.lhs.false, !dbg !3104

lor.lhs.false:                                    ; preds = %land.lhs.true
  %20 = load i8*, i8** %str.addr, align 8, !dbg !3105
  %arrayidx30 = getelementptr inbounds i8, i8* %20, i64 1, !dbg !3105
  %21 = load i8, i8* %arrayidx30, align 1, !dbg !3105
  %conv31 = sext i8 %21 to i32, !dbg !3105
  %cmp32 = icmp eq i32 %conv31, 88, !dbg !3106
  br i1 %cmp32, label %if.then34, label %if.else169, !dbg !3107

if.then34:                                        ; preds = %lor.lhs.false, %land.lhs.true
  call void @llvm.dbg.declare(metadata i32* %pos, metadata !3108, metadata !DIExpression()), !dbg !3110
  store i32 188, i32* %pos, align 4, !dbg !3110
  call void @llvm.dbg.declare(metadata i32* %d, metadata !3111, metadata !DIExpression()), !dbg !3112
  %22 = load i8*, i8** %str.addr, align 8, !dbg !3113
  %add.ptr = getelementptr inbounds i8, i8* %22, i64 2, !dbg !3113
  store i8* %add.ptr, i8** %str.addr, align 8, !dbg !3113
  br label %while.cond, !dbg !3114

while.cond:                                       ; preds = %while.body, %if.then34
  %23 = load i8*, i8** %str.addr, align 8, !dbg !3115
  %24 = load i8, i8* %23, align 1, !dbg !3116
  %conv35 = sext i8 %24 to i32, !dbg !3116
  %cmp36 = icmp eq i32 %conv35, 48, !dbg !3117
  br i1 %cmp36, label %while.body, label %while.end, !dbg !3114

while.body:                                       ; preds = %while.cond
  %25 = load i8*, i8** %str.addr, align 8, !dbg !3118
  %incdec.ptr38 = getelementptr inbounds i8, i8* %25, i32 1, !dbg !3118
  store i8* %incdec.ptr38, i8** %str.addr, align 8, !dbg !3118
  br label %while.cond, !dbg !3114, !llvm.loop !3119

while.end:                                        ; preds = %while.cond
  br label %while.body40, !dbg !3120

while.body40:                                     ; preds = %while.end, %if.end60
  %26 = load i8*, i8** %str.addr, align 8, !dbg !3121
  %27 = load i8, i8* %26, align 1, !dbg !3121
  %idxprom = zext i8 %27 to i64, !dbg !3121
  %arrayidx41 = getelementptr inbounds [256 x i8], [256 x i8]* @_hex_value, i64 0, i64 %idxprom, !dbg !3121
  %28 = load i8, i8* %arrayidx41, align 1, !dbg !3121
  %conv42 = zext i8 %28 to i32, !dbg !3121
  store i32 %conv42, i32* %d, align 4, !dbg !3123
  %29 = load i32, i32* %d, align 4, !dbg !3124
  %cmp43 = icmp eq i32 %29, 99, !dbg !3126
  br i1 %cmp43, label %if.then45, label %if.end46, !dbg !3127

if.then45:                                        ; preds = %while.body40
  br label %while.end62, !dbg !3128

if.end46:                                         ; preds = %while.body40
  %30 = load i32, i32* %pos, align 4, !dbg !3129
  %cmp47 = icmp sge i32 %30, 0, !dbg !3131
  br i1 %cmp47, label %if.then49, label %if.else53, !dbg !3132

if.then49:                                        ; preds = %if.end46
  %31 = load i32, i32* %d, align 4, !dbg !3133
  %conv50 = sext i32 %31 to i64, !dbg !3135
  %32 = load i32, i32* %pos, align 4, !dbg !3136
  %rem = srem i32 %32, 64, !dbg !3137
  %sh_prom = zext i32 %rem to i64, !dbg !3138
  %shl = shl i64 %conv50, %sh_prom, !dbg !3138
  %33 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3139
  %sig = getelementptr inbounds %struct.real_value, %struct.real_value* %33, i32 0, i32 1, !dbg !3140
  %34 = load i32, i32* %pos, align 4, !dbg !3141
  %div = sdiv i32 %34, 64, !dbg !3142
  %idxprom51 = sext i32 %div to i64, !dbg !3139
  %arrayidx52 = getelementptr inbounds [3 x i64], [3 x i64]* %sig, i64 0, i64 %idxprom51, !dbg !3139
  %35 = load i64, i64* %arrayidx52, align 8, !dbg !3143
  %or = or i64 %35, %shl, !dbg !3143
  store i64 %or, i64* %arrayidx52, align 8, !dbg !3143
  %36 = load i32, i32* %pos, align 4, !dbg !3144
  %sub = sub nsw i32 %36, 4, !dbg !3144
  store i32 %sub, i32* %pos, align 4, !dbg !3144
  br label %if.end60, !dbg !3145

if.else53:                                        ; preds = %if.end46
  %37 = load i32, i32* %d, align 4, !dbg !3146
  %tobool54 = icmp ne i32 %37, 0, !dbg !3146
  br i1 %tobool54, label %if.then55, label %if.end59, !dbg !3148

if.then55:                                        ; preds = %if.else53
  %38 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3149
  %sig56 = getelementptr inbounds %struct.real_value, %struct.real_value* %38, i32 0, i32 1, !dbg !3150
  %arrayidx57 = getelementptr inbounds [3 x i64], [3 x i64]* %sig56, i64 0, i64 0, !dbg !3149
  %39 = load i64, i64* %arrayidx57, align 8, !dbg !3151
  %or58 = or i64 %39, 1, !dbg !3151
  store i64 %or58, i64* %arrayidx57, align 8, !dbg !3151
  br label %if.end59, !dbg !3149

if.end59:                                         ; preds = %if.then55, %if.else53
  br label %if.end60

if.end60:                                         ; preds = %if.end59, %if.then49
  %40 = load i32, i32* %exp, align 4, !dbg !3152
  %add = add nsw i32 %40, 4, !dbg !3152
  store i32 %add, i32* %exp, align 4, !dbg !3152
  %41 = load i8*, i8** %str.addr, align 8, !dbg !3153
  %incdec.ptr61 = getelementptr inbounds i8, i8* %41, i32 1, !dbg !3153
  store i8* %incdec.ptr61, i8** %str.addr, align 8, !dbg !3153
  br label %while.body40, !dbg !3120, !llvm.loop !3154

while.end62:                                      ; preds = %if.then45
  %42 = load i8*, i8** %str.addr, align 8, !dbg !3156
  %43 = load i8, i8* %42, align 1, !dbg !3158
  %conv63 = sext i8 %43 to i32, !dbg !3158
  %cmp64 = icmp eq i32 %conv63, 46, !dbg !3159
  br i1 %cmp64, label %if.then66, label %if.end112, !dbg !3160

if.then66:                                        ; preds = %while.end62
  %44 = load i8*, i8** %str.addr, align 8, !dbg !3161
  %incdec.ptr67 = getelementptr inbounds i8, i8* %44, i32 1, !dbg !3161
  store i8* %incdec.ptr67, i8** %str.addr, align 8, !dbg !3161
  %45 = load i32, i32* %pos, align 4, !dbg !3163
  %cmp68 = icmp eq i32 %45, 188, !dbg !3165
  br i1 %cmp68, label %if.then70, label %if.end79, !dbg !3166

if.then70:                                        ; preds = %if.then66
  br label %while.cond71, !dbg !3167

while.cond71:                                     ; preds = %while.body75, %if.then70
  %46 = load i8*, i8** %str.addr, align 8, !dbg !3169
  %47 = load i8, i8* %46, align 1, !dbg !3170
  %conv72 = sext i8 %47 to i32, !dbg !3170
  %cmp73 = icmp eq i32 %conv72, 48, !dbg !3171
  br i1 %cmp73, label %while.body75, label %while.end78, !dbg !3167

while.body75:                                     ; preds = %while.cond71
  %48 = load i8*, i8** %str.addr, align 8, !dbg !3172
  %incdec.ptr76 = getelementptr inbounds i8, i8* %48, i32 1, !dbg !3172
  store i8* %incdec.ptr76, i8** %str.addr, align 8, !dbg !3172
  %49 = load i32, i32* %exp, align 4, !dbg !3173
  %sub77 = sub nsw i32 %49, 4, !dbg !3173
  store i32 %sub77, i32* %exp, align 4, !dbg !3173
  br label %while.cond71, !dbg !3167, !llvm.loop !3174

while.end78:                                      ; preds = %while.cond71
  br label %if.end79, !dbg !3176

if.end79:                                         ; preds = %while.end78, %if.then66
  br label %while.body81, !dbg !3177

while.body81:                                     ; preds = %if.end79, %if.end109
  %50 = load i8*, i8** %str.addr, align 8, !dbg !3178
  %51 = load i8, i8* %50, align 1, !dbg !3178
  %idxprom82 = zext i8 %51 to i64, !dbg !3178
  %arrayidx83 = getelementptr inbounds [256 x i8], [256 x i8]* @_hex_value, i64 0, i64 %idxprom82, !dbg !3178
  %52 = load i8, i8* %arrayidx83, align 1, !dbg !3178
  %conv84 = zext i8 %52 to i32, !dbg !3178
  store i32 %conv84, i32* %d, align 4, !dbg !3180
  %53 = load i32, i32* %d, align 4, !dbg !3181
  %cmp85 = icmp eq i32 %53, 99, !dbg !3183
  br i1 %cmp85, label %if.then87, label %if.end88, !dbg !3184

if.then87:                                        ; preds = %while.body81
  br label %while.end111, !dbg !3185

if.end88:                                         ; preds = %while.body81
  %54 = load i32, i32* %pos, align 4, !dbg !3186
  %cmp89 = icmp sge i32 %54, 0, !dbg !3188
  br i1 %cmp89, label %if.then91, label %if.else102, !dbg !3189

if.then91:                                        ; preds = %if.end88
  %55 = load i32, i32* %d, align 4, !dbg !3190
  %conv92 = sext i32 %55 to i64, !dbg !3192
  %56 = load i32, i32* %pos, align 4, !dbg !3193
  %rem93 = srem i32 %56, 64, !dbg !3194
  %sh_prom94 = zext i32 %rem93 to i64, !dbg !3195
  %shl95 = shl i64 %conv92, %sh_prom94, !dbg !3195
  %57 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3196
  %sig96 = getelementptr inbounds %struct.real_value, %struct.real_value* %57, i32 0, i32 1, !dbg !3197
  %58 = load i32, i32* %pos, align 4, !dbg !3198
  %div97 = sdiv i32 %58, 64, !dbg !3199
  %idxprom98 = sext i32 %div97 to i64, !dbg !3196
  %arrayidx99 = getelementptr inbounds [3 x i64], [3 x i64]* %sig96, i64 0, i64 %idxprom98, !dbg !3196
  %59 = load i64, i64* %arrayidx99, align 8, !dbg !3200
  %or100 = or i64 %59, %shl95, !dbg !3200
  store i64 %or100, i64* %arrayidx99, align 8, !dbg !3200
  %60 = load i32, i32* %pos, align 4, !dbg !3201
  %sub101 = sub nsw i32 %60, 4, !dbg !3201
  store i32 %sub101, i32* %pos, align 4, !dbg !3201
  br label %if.end109, !dbg !3202

if.else102:                                       ; preds = %if.end88
  %61 = load i32, i32* %d, align 4, !dbg !3203
  %tobool103 = icmp ne i32 %61, 0, !dbg !3203
  br i1 %tobool103, label %if.then104, label %if.end108, !dbg !3205

if.then104:                                       ; preds = %if.else102
  %62 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3206
  %sig105 = getelementptr inbounds %struct.real_value, %struct.real_value* %62, i32 0, i32 1, !dbg !3207
  %arrayidx106 = getelementptr inbounds [3 x i64], [3 x i64]* %sig105, i64 0, i64 0, !dbg !3206
  %63 = load i64, i64* %arrayidx106, align 8, !dbg !3208
  %or107 = or i64 %63, 1, !dbg !3208
  store i64 %or107, i64* %arrayidx106, align 8, !dbg !3208
  br label %if.end108, !dbg !3206

if.end108:                                        ; preds = %if.then104, %if.else102
  br label %if.end109

if.end109:                                        ; preds = %if.end108, %if.then91
  %64 = load i8*, i8** %str.addr, align 8, !dbg !3209
  %incdec.ptr110 = getelementptr inbounds i8, i8* %64, i32 1, !dbg !3209
  store i8* %incdec.ptr110, i8** %str.addr, align 8, !dbg !3209
  br label %while.body81, !dbg !3177, !llvm.loop !3210

while.end111:                                     ; preds = %if.then87
  br label %if.end112, !dbg !3212

if.end112:                                        ; preds = %while.end111, %while.end62
  %65 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3213
  %call113 = call i32 @cmp_significand_0(%struct.real_value* %65), !dbg !3215
  %tobool114 = icmp ne i32 %call113, 0, !dbg !3215
  br i1 %tobool114, label %if.end116, label %if.then115, !dbg !3216

if.then115:                                       ; preds = %if.end112
  br label %is_a_zero, !dbg !3217

if.end116:                                        ; preds = %if.end112
  %66 = load i8*, i8** %str.addr, align 8, !dbg !3218
  %67 = load i8, i8* %66, align 1, !dbg !3220
  %conv117 = sext i8 %67 to i32, !dbg !3220
  %cmp118 = icmp eq i32 %conv117, 112, !dbg !3221
  br i1 %cmp118, label %if.then124, label %lor.lhs.false120, !dbg !3222

lor.lhs.false120:                                 ; preds = %if.end116
  %68 = load i8*, i8** %str.addr, align 8, !dbg !3223
  %69 = load i8, i8* %68, align 1, !dbg !3224
  %conv121 = sext i8 %69 to i32, !dbg !3224
  %cmp122 = icmp eq i32 %conv121, 80, !dbg !3225
  br i1 %cmp122, label %if.then124, label %if.end164, !dbg !3226

if.then124:                                       ; preds = %lor.lhs.false120, %if.end116
  call void @llvm.dbg.declare(metadata i8* %exp_neg, metadata !3227, metadata !DIExpression()), !dbg !3229
  store i8 0, i8* %exp_neg, align 1, !dbg !3229
  %70 = load i8*, i8** %str.addr, align 8, !dbg !3230
  %incdec.ptr125 = getelementptr inbounds i8, i8* %70, i32 1, !dbg !3230
  store i8* %incdec.ptr125, i8** %str.addr, align 8, !dbg !3230
  %71 = load i8*, i8** %str.addr, align 8, !dbg !3231
  %72 = load i8, i8* %71, align 1, !dbg !3233
  %conv126 = sext i8 %72 to i32, !dbg !3233
  %cmp127 = icmp eq i32 %conv126, 45, !dbg !3234
  br i1 %cmp127, label %if.then129, label %if.else131, !dbg !3235

if.then129:                                       ; preds = %if.then124
  store i8 1, i8* %exp_neg, align 1, !dbg !3236
  %73 = load i8*, i8** %str.addr, align 8, !dbg !3238
  %incdec.ptr130 = getelementptr inbounds i8, i8* %73, i32 1, !dbg !3238
  store i8* %incdec.ptr130, i8** %str.addr, align 8, !dbg !3238
  br label %if.end138, !dbg !3239

if.else131:                                       ; preds = %if.then124
  %74 = load i8*, i8** %str.addr, align 8, !dbg !3240
  %75 = load i8, i8* %74, align 1, !dbg !3242
  %conv132 = sext i8 %75 to i32, !dbg !3242
  %cmp133 = icmp eq i32 %conv132, 43, !dbg !3243
  br i1 %cmp133, label %if.then135, label %if.end137, !dbg !3244

if.then135:                                       ; preds = %if.else131
  %76 = load i8*, i8** %str.addr, align 8, !dbg !3245
  %incdec.ptr136 = getelementptr inbounds i8, i8* %76, i32 1, !dbg !3245
  store i8* %incdec.ptr136, i8** %str.addr, align 8, !dbg !3245
  br label %if.end137, !dbg !3246

if.end137:                                        ; preds = %if.then135, %if.else131
  br label %if.end138

if.end138:                                        ; preds = %if.end137, %if.then129
  store i32 0, i32* %d, align 4, !dbg !3247
  br label %while.cond139, !dbg !3248

while.cond139:                                    ; preds = %if.end156, %if.end138
  %77 = load i8*, i8** %str.addr, align 8, !dbg !3249
  %78 = load i8, i8* %77, align 1, !dbg !3249
  %conv140 = sext i8 %78 to i32, !dbg !3249
  %and = and i32 %conv140, 255, !dbg !3249
  %idxprom141 = sext i32 %and to i64, !dbg !3249
  %arrayidx142 = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom141, !dbg !3249
  %79 = load i16, i16* %arrayidx142, align 2, !dbg !3249
  %conv143 = zext i16 %79 to i32, !dbg !3249
  %and144 = and i32 %conv143, 4, !dbg !3249
  %tobool145 = icmp ne i32 %and144, 0, !dbg !3248
  br i1 %tobool145, label %while.body146, label %while.end158, !dbg !3248

while.body146:                                    ; preds = %while.cond139
  %80 = load i32, i32* %d, align 4, !dbg !3250
  %mul = mul nsw i32 %80, 10, !dbg !3250
  store i32 %mul, i32* %d, align 4, !dbg !3250
  %81 = load i8*, i8** %str.addr, align 8, !dbg !3252
  %82 = load i8, i8* %81, align 1, !dbg !3253
  %conv147 = sext i8 %82 to i32, !dbg !3253
  %sub148 = sub nsw i32 %conv147, 48, !dbg !3254
  %83 = load i32, i32* %d, align 4, !dbg !3255
  %add149 = add nsw i32 %83, %sub148, !dbg !3255
  store i32 %add149, i32* %d, align 4, !dbg !3255
  %84 = load i32, i32* %d, align 4, !dbg !3256
  %cmp150 = icmp sgt i32 %84, 33554431, !dbg !3258
  br i1 %cmp150, label %if.then152, label %if.end156, !dbg !3259

if.then152:                                       ; preds = %while.body146
  %85 = load i8, i8* %exp_neg, align 1, !dbg !3260
  %tobool153 = icmp ne i8 %85, 0, !dbg !3260
  br i1 %tobool153, label %if.then154, label %if.else155, !dbg !3263

if.then154:                                       ; preds = %if.then152
  br label %underflow, !dbg !3264

if.else155:                                       ; preds = %if.then152
  br label %overflow, !dbg !3265

if.end156:                                        ; preds = %while.body146
  %86 = load i8*, i8** %str.addr, align 8, !dbg !3266
  %incdec.ptr157 = getelementptr inbounds i8, i8* %86, i32 1, !dbg !3266
  store i8* %incdec.ptr157, i8** %str.addr, align 8, !dbg !3266
  br label %while.cond139, !dbg !3248, !llvm.loop !3267

while.end158:                                     ; preds = %while.cond139
  %87 = load i8, i8* %exp_neg, align 1, !dbg !3269
  %tobool159 = icmp ne i8 %87, 0, !dbg !3269
  br i1 %tobool159, label %if.then160, label %if.end162, !dbg !3271

if.then160:                                       ; preds = %while.end158
  %88 = load i32, i32* %d, align 4, !dbg !3272
  %sub161 = sub nsw i32 0, %88, !dbg !3273
  store i32 %sub161, i32* %d, align 4, !dbg !3274
  br label %if.end162, !dbg !3275

if.end162:                                        ; preds = %if.then160, %while.end158
  %89 = load i32, i32* %d, align 4, !dbg !3276
  %90 = load i32, i32* %exp, align 4, !dbg !3277
  %add163 = add nsw i32 %90, %89, !dbg !3277
  store i32 %add163, i32* %exp, align 4, !dbg !3277
  br label %if.end164, !dbg !3278

if.end164:                                        ; preds = %if.end162, %lor.lhs.false120
  %91 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3279
  %92 = bitcast %struct.real_value* %91 to i32*, !dbg !3280
  %bf.load = load i32, i32* %92, align 8, !dbg !3281
  %bf.clear = and i32 %bf.load, -4, !dbg !3281
  %bf.set = or i32 %bf.clear, 1, !dbg !3281
  store i32 %bf.set, i32* %92, align 8, !dbg !3281
  %93 = load i32, i32* %exp, align 4, !dbg !3282
  %and165 = and i32 %93, 67108863, !dbg !3282
  %94 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3282
  %95 = bitcast %struct.real_value* %94 to i32*, !dbg !3282
  %bf.load166 = load i32, i32* %95, align 8, !dbg !3282
  %bf.value = and i32 %and165, 67108863, !dbg !3282
  %bf.shl = shl i32 %bf.value, 6, !dbg !3282
  %bf.clear167 = and i32 %bf.load166, 63, !dbg !3282
  %bf.set168 = or i32 %bf.clear167, %bf.shl, !dbg !3282
  store i32 %bf.set168, i32* %95, align 8, !dbg !3282
  %96 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3283
  call void @normalize(%struct.real_value* %96), !dbg !3284
  br label %if.end297, !dbg !3285

if.else169:                                       ; preds = %lor.lhs.false, %if.end22
  call void @llvm.dbg.declare(metadata %struct.real_value** %ten, metadata !3286, metadata !DIExpression()), !dbg !3288
  %call170 = call %struct.real_value* @ten_to_ptwo(i32 0), !dbg !3289
  store %struct.real_value* %call170, %struct.real_value** %ten, align 8, !dbg !3288
  call void @llvm.dbg.declare(metadata i32* %d171, metadata !3290, metadata !DIExpression()), !dbg !3291
  br label %while.cond172, !dbg !3292

while.cond172:                                    ; preds = %while.body176, %if.else169
  %97 = load i8*, i8** %str.addr, align 8, !dbg !3293
  %98 = load i8, i8* %97, align 1, !dbg !3294
  %conv173 = sext i8 %98 to i32, !dbg !3294
  %cmp174 = icmp eq i32 %conv173, 48, !dbg !3295
  br i1 %cmp174, label %while.body176, label %while.end178, !dbg !3292

while.body176:                                    ; preds = %while.cond172
  %99 = load i8*, i8** %str.addr, align 8, !dbg !3296
  %incdec.ptr177 = getelementptr inbounds i8, i8* %99, i32 1, !dbg !3296
  store i8* %incdec.ptr177, i8** %str.addr, align 8, !dbg !3296
  br label %while.cond172, !dbg !3292, !llvm.loop !3297

while.end178:                                     ; preds = %while.cond172
  br label %while.cond179, !dbg !3298

while.cond179:                                    ; preds = %if.end196, %while.end178
  %100 = load i8*, i8** %str.addr, align 8, !dbg !3299
  %101 = load i8, i8* %100, align 1, !dbg !3299
  %conv180 = sext i8 %101 to i32, !dbg !3299
  %and181 = and i32 %conv180, 255, !dbg !3299
  %idxprom182 = sext i32 %and181 to i64, !dbg !3299
  %arrayidx183 = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom182, !dbg !3299
  %102 = load i16, i16* %arrayidx183, align 2, !dbg !3299
  %conv184 = zext i16 %102 to i32, !dbg !3299
  %and185 = and i32 %conv184, 4, !dbg !3299
  %tobool186 = icmp ne i32 %and185, 0, !dbg !3298
  br i1 %tobool186, label %while.body187, label %while.end197, !dbg !3298

while.body187:                                    ; preds = %while.cond179
  %103 = load i8*, i8** %str.addr, align 8, !dbg !3300
  %incdec.ptr188 = getelementptr inbounds i8, i8* %103, i32 1, !dbg !3300
  store i8* %incdec.ptr188, i8** %str.addr, align 8, !dbg !3300
  %104 = load i8, i8* %103, align 1, !dbg !3302
  %conv189 = sext i8 %104 to i32, !dbg !3302
  %sub190 = sub nsw i32 %conv189, 48, !dbg !3303
  store i32 %sub190, i32* %d171, align 4, !dbg !3304
  %105 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3305
  %106 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3306
  %107 = load %struct.real_value*, %struct.real_value** %ten, align 8, !dbg !3307
  %call191 = call zeroext i8 @do_multiply(%struct.real_value* %105, %struct.real_value* %106, %struct.real_value* %107), !dbg !3308
  %108 = load i32, i32* %d171, align 4, !dbg !3309
  %tobool192 = icmp ne i32 %108, 0, !dbg !3309
  br i1 %tobool192, label %if.then193, label %if.end196, !dbg !3311

if.then193:                                       ; preds = %while.body187
  %109 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3312
  %110 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3313
  %111 = load i32, i32* %d171, align 4, !dbg !3314
  %call194 = call %struct.real_value* @real_digit(i32 %111), !dbg !3315
  %call195 = call zeroext i8 @do_add(%struct.real_value* %109, %struct.real_value* %110, %struct.real_value* %call194, i32 0), !dbg !3316
  br label %if.end196, !dbg !3316

if.end196:                                        ; preds = %if.then193, %while.body187
  br label %while.cond179, !dbg !3298, !llvm.loop !3317

while.end197:                                     ; preds = %while.cond179
  %112 = load i8*, i8** %str.addr, align 8, !dbg !3319
  %113 = load i8, i8* %112, align 1, !dbg !3321
  %conv198 = sext i8 %113 to i32, !dbg !3321
  %cmp199 = icmp eq i32 %conv198, 46, !dbg !3322
  br i1 %cmp199, label %if.then201, label %if.end236, !dbg !3323

if.then201:                                       ; preds = %while.end197
  %114 = load i8*, i8** %str.addr, align 8, !dbg !3324
  %incdec.ptr202 = getelementptr inbounds i8, i8* %114, i32 1, !dbg !3324
  store i8* %incdec.ptr202, i8** %str.addr, align 8, !dbg !3324
  %115 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3326
  %116 = bitcast %struct.real_value* %115 to i32*, !dbg !3328
  %bf.load203 = load i32, i32* %116, align 8, !dbg !3328
  %bf.clear204 = and i32 %bf.load203, 3, !dbg !3328
  %cmp205 = icmp eq i32 %bf.clear204, 0, !dbg !3329
  br i1 %cmp205, label %if.then207, label %if.end215, !dbg !3330

if.then207:                                       ; preds = %if.then201
  br label %while.cond208, !dbg !3331

while.cond208:                                    ; preds = %while.body212, %if.then207
  %117 = load i8*, i8** %str.addr, align 8, !dbg !3333
  %118 = load i8, i8* %117, align 1, !dbg !3334
  %conv209 = sext i8 %118 to i32, !dbg !3334
  %cmp210 = icmp eq i32 %conv209, 48, !dbg !3335
  br i1 %cmp210, label %while.body212, label %while.end214, !dbg !3331

while.body212:                                    ; preds = %while.cond208
  %119 = load i8*, i8** %str.addr, align 8, !dbg !3336
  %incdec.ptr213 = getelementptr inbounds i8, i8* %119, i32 1, !dbg !3336
  store i8* %incdec.ptr213, i8** %str.addr, align 8, !dbg !3336
  %120 = load i32, i32* %exp, align 4, !dbg !3337
  %dec = add nsw i32 %120, -1, !dbg !3337
  store i32 %dec, i32* %exp, align 4, !dbg !3337
  br label %while.cond208, !dbg !3331, !llvm.loop !3338

while.end214:                                     ; preds = %while.cond208
  br label %if.end215, !dbg !3339

if.end215:                                        ; preds = %while.end214, %if.then201
  br label %while.cond216, !dbg !3340

while.cond216:                                    ; preds = %if.end233, %if.end215
  %121 = load i8*, i8** %str.addr, align 8, !dbg !3341
  %122 = load i8, i8* %121, align 1, !dbg !3341
  %conv217 = sext i8 %122 to i32, !dbg !3341
  %and218 = and i32 %conv217, 255, !dbg !3341
  %idxprom219 = sext i32 %and218 to i64, !dbg !3341
  %arrayidx220 = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom219, !dbg !3341
  %123 = load i16, i16* %arrayidx220, align 2, !dbg !3341
  %conv221 = zext i16 %123 to i32, !dbg !3341
  %and222 = and i32 %conv221, 4, !dbg !3341
  %tobool223 = icmp ne i32 %and222, 0, !dbg !3340
  br i1 %tobool223, label %while.body224, label %while.end235, !dbg !3340

while.body224:                                    ; preds = %while.cond216
  %124 = load i8*, i8** %str.addr, align 8, !dbg !3342
  %incdec.ptr225 = getelementptr inbounds i8, i8* %124, i32 1, !dbg !3342
  store i8* %incdec.ptr225, i8** %str.addr, align 8, !dbg !3342
  %125 = load i8, i8* %124, align 1, !dbg !3344
  %conv226 = sext i8 %125 to i32, !dbg !3344
  %sub227 = sub nsw i32 %conv226, 48, !dbg !3345
  store i32 %sub227, i32* %d171, align 4, !dbg !3346
  %126 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3347
  %127 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3348
  %128 = load %struct.real_value*, %struct.real_value** %ten, align 8, !dbg !3349
  %call228 = call zeroext i8 @do_multiply(%struct.real_value* %126, %struct.real_value* %127, %struct.real_value* %128), !dbg !3350
  %129 = load i32, i32* %d171, align 4, !dbg !3351
  %tobool229 = icmp ne i32 %129, 0, !dbg !3351
  br i1 %tobool229, label %if.then230, label %if.end233, !dbg !3353

if.then230:                                       ; preds = %while.body224
  %130 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3354
  %131 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3355
  %132 = load i32, i32* %d171, align 4, !dbg !3356
  %call231 = call %struct.real_value* @real_digit(i32 %132), !dbg !3357
  %call232 = call zeroext i8 @do_add(%struct.real_value* %130, %struct.real_value* %131, %struct.real_value* %call231, i32 0), !dbg !3358
  br label %if.end233, !dbg !3358

if.end233:                                        ; preds = %if.then230, %while.body224
  %133 = load i32, i32* %exp, align 4, !dbg !3359
  %dec234 = add nsw i32 %133, -1, !dbg !3359
  store i32 %dec234, i32* %exp, align 4, !dbg !3359
  br label %while.cond216, !dbg !3340, !llvm.loop !3360

while.end235:                                     ; preds = %while.cond216
  br label %if.end236, !dbg !3362

if.end236:                                        ; preds = %while.end235, %while.end197
  %134 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3363
  %135 = bitcast %struct.real_value* %134 to i32*, !dbg !3365
  %bf.load237 = load i32, i32* %135, align 8, !dbg !3365
  %bf.clear238 = and i32 %bf.load237, 3, !dbg !3365
  %cmp239 = icmp eq i32 %bf.clear238, 0, !dbg !3366
  br i1 %cmp239, label %if.then241, label %if.end242, !dbg !3367

if.then241:                                       ; preds = %if.end236
  br label %is_a_zero, !dbg !3368

if.end242:                                        ; preds = %if.end236
  %136 = load i8*, i8** %str.addr, align 8, !dbg !3369
  %137 = load i8, i8* %136, align 1, !dbg !3371
  %conv243 = sext i8 %137 to i32, !dbg !3371
  %cmp244 = icmp eq i32 %conv243, 101, !dbg !3372
  br i1 %cmp244, label %if.then250, label %lor.lhs.false246, !dbg !3373

lor.lhs.false246:                                 ; preds = %if.end242
  %138 = load i8*, i8** %str.addr, align 8, !dbg !3374
  %139 = load i8, i8* %138, align 1, !dbg !3375
  %conv247 = sext i8 %139 to i32, !dbg !3375
  %cmp248 = icmp eq i32 %conv247, 69, !dbg !3376
  br i1 %cmp248, label %if.then250, label %if.end293, !dbg !3377

if.then250:                                       ; preds = %lor.lhs.false246, %if.end242
  call void @llvm.dbg.declare(metadata i8* %exp_neg251, metadata !3378, metadata !DIExpression()), !dbg !3380
  store i8 0, i8* %exp_neg251, align 1, !dbg !3380
  %140 = load i8*, i8** %str.addr, align 8, !dbg !3381
  %incdec.ptr252 = getelementptr inbounds i8, i8* %140, i32 1, !dbg !3381
  store i8* %incdec.ptr252, i8** %str.addr, align 8, !dbg !3381
  %141 = load i8*, i8** %str.addr, align 8, !dbg !3382
  %142 = load i8, i8* %141, align 1, !dbg !3384
  %conv253 = sext i8 %142 to i32, !dbg !3384
  %cmp254 = icmp eq i32 %conv253, 45, !dbg !3385
  br i1 %cmp254, label %if.then256, label %if.else258, !dbg !3386

if.then256:                                       ; preds = %if.then250
  store i8 1, i8* %exp_neg251, align 1, !dbg !3387
  %143 = load i8*, i8** %str.addr, align 8, !dbg !3389
  %incdec.ptr257 = getelementptr inbounds i8, i8* %143, i32 1, !dbg !3389
  store i8* %incdec.ptr257, i8** %str.addr, align 8, !dbg !3389
  br label %if.end265, !dbg !3390

if.else258:                                       ; preds = %if.then250
  %144 = load i8*, i8** %str.addr, align 8, !dbg !3391
  %145 = load i8, i8* %144, align 1, !dbg !3393
  %conv259 = sext i8 %145 to i32, !dbg !3393
  %cmp260 = icmp eq i32 %conv259, 43, !dbg !3394
  br i1 %cmp260, label %if.then262, label %if.end264, !dbg !3395

if.then262:                                       ; preds = %if.else258
  %146 = load i8*, i8** %str.addr, align 8, !dbg !3396
  %incdec.ptr263 = getelementptr inbounds i8, i8* %146, i32 1, !dbg !3396
  store i8* %incdec.ptr263, i8** %str.addr, align 8, !dbg !3396
  br label %if.end264, !dbg !3397

if.end264:                                        ; preds = %if.then262, %if.else258
  br label %if.end265

if.end265:                                        ; preds = %if.end264, %if.then256
  store i32 0, i32* %d171, align 4, !dbg !3398
  br label %while.cond266, !dbg !3399

while.cond266:                                    ; preds = %if.end285, %if.end265
  %147 = load i8*, i8** %str.addr, align 8, !dbg !3400
  %148 = load i8, i8* %147, align 1, !dbg !3400
  %conv267 = sext i8 %148 to i32, !dbg !3400
  %and268 = and i32 %conv267, 255, !dbg !3400
  %idxprom269 = sext i32 %and268 to i64, !dbg !3400
  %arrayidx270 = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom269, !dbg !3400
  %149 = load i16, i16* %arrayidx270, align 2, !dbg !3400
  %conv271 = zext i16 %149 to i32, !dbg !3400
  %and272 = and i32 %conv271, 4, !dbg !3400
  %tobool273 = icmp ne i32 %and272, 0, !dbg !3399
  br i1 %tobool273, label %while.body274, label %while.end287, !dbg !3399

while.body274:                                    ; preds = %while.cond266
  %150 = load i32, i32* %d171, align 4, !dbg !3401
  %mul275 = mul nsw i32 %150, 10, !dbg !3401
  store i32 %mul275, i32* %d171, align 4, !dbg !3401
  %151 = load i8*, i8** %str.addr, align 8, !dbg !3403
  %152 = load i8, i8* %151, align 1, !dbg !3404
  %conv276 = sext i8 %152 to i32, !dbg !3404
  %sub277 = sub nsw i32 %conv276, 48, !dbg !3405
  %153 = load i32, i32* %d171, align 4, !dbg !3406
  %add278 = add nsw i32 %153, %sub277, !dbg !3406
  store i32 %add278, i32* %d171, align 4, !dbg !3406
  %154 = load i32, i32* %d171, align 4, !dbg !3407
  %cmp279 = icmp sgt i32 %154, 33554431, !dbg !3409
  br i1 %cmp279, label %if.then281, label %if.end285, !dbg !3410

if.then281:                                       ; preds = %while.body274
  %155 = load i8, i8* %exp_neg251, align 1, !dbg !3411
  %tobool282 = icmp ne i8 %155, 0, !dbg !3411
  br i1 %tobool282, label %if.then283, label %if.else284, !dbg !3414

if.then283:                                       ; preds = %if.then281
  br label %underflow, !dbg !3415

if.else284:                                       ; preds = %if.then281
  br label %overflow, !dbg !3416

if.end285:                                        ; preds = %while.body274
  %156 = load i8*, i8** %str.addr, align 8, !dbg !3417
  %incdec.ptr286 = getelementptr inbounds i8, i8* %156, i32 1, !dbg !3417
  store i8* %incdec.ptr286, i8** %str.addr, align 8, !dbg !3417
  br label %while.cond266, !dbg !3399, !llvm.loop !3418

while.end287:                                     ; preds = %while.cond266
  %157 = load i8, i8* %exp_neg251, align 1, !dbg !3420
  %tobool288 = icmp ne i8 %157, 0, !dbg !3420
  br i1 %tobool288, label %if.then289, label %if.end291, !dbg !3422

if.then289:                                       ; preds = %while.end287
  %158 = load i32, i32* %d171, align 4, !dbg !3423
  %sub290 = sub nsw i32 0, %158, !dbg !3424
  store i32 %sub290, i32* %d171, align 4, !dbg !3425
  br label %if.end291, !dbg !3426

if.end291:                                        ; preds = %if.then289, %while.end287
  %159 = load i32, i32* %d171, align 4, !dbg !3427
  %160 = load i32, i32* %exp, align 4, !dbg !3428
  %add292 = add nsw i32 %160, %159, !dbg !3428
  store i32 %add292, i32* %exp, align 4, !dbg !3428
  br label %if.end293, !dbg !3429

if.end293:                                        ; preds = %if.end291, %lor.lhs.false246
  %161 = load i32, i32* %exp, align 4, !dbg !3430
  %tobool294 = icmp ne i32 %161, 0, !dbg !3430
  br i1 %tobool294, label %if.then295, label %if.end296, !dbg !3432

if.then295:                                       ; preds = %if.end293
  %162 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3433
  %163 = load i32, i32* %exp, align 4, !dbg !3434
  call void @times_pten(%struct.real_value* %162, i32 %163), !dbg !3435
  br label %if.end296, !dbg !3435

if.end296:                                        ; preds = %if.then295, %if.end293
  br label %if.end297

if.end297:                                        ; preds = %if.end296, %if.end164
  %164 = load i8, i8* %sign, align 1, !dbg !3436
  %conv298 = zext i8 %164 to i32, !dbg !3436
  %165 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3437
  %166 = bitcast %struct.real_value* %165 to i32*, !dbg !3438
  %bf.load299 = load i32, i32* %166, align 8, !dbg !3439
  %bf.value300 = and i32 %conv298, 1, !dbg !3439
  %bf.shl301 = shl i32 %bf.value300, 3, !dbg !3439
  %bf.clear302 = and i32 %bf.load299, -9, !dbg !3439
  %bf.set303 = or i32 %bf.clear302, %bf.shl301, !dbg !3439
  store i32 %bf.set303, i32* %166, align 8, !dbg !3439
  store i32 0, i32* %retval, align 4, !dbg !3440
  br label %return, !dbg !3440

is_a_zero:                                        ; preds = %if.then241, %if.then115
  call void @llvm.dbg.label(metadata !3441), !dbg !3442
  %167 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3443
  %168 = load i8, i8* %sign, align 1, !dbg !3444
  %conv304 = zext i8 %168 to i32, !dbg !3444
  call void @get_zero(%struct.real_value* %167, i32 %conv304), !dbg !3445
  store i32 0, i32* %retval, align 4, !dbg !3446
  br label %return, !dbg !3446

underflow:                                        ; preds = %if.then283, %if.then154
  call void @llvm.dbg.label(metadata !3447), !dbg !3448
  %169 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3449
  %170 = load i8, i8* %sign, align 1, !dbg !3450
  %conv305 = zext i8 %170 to i32, !dbg !3450
  call void @get_zero(%struct.real_value* %169, i32 %conv305), !dbg !3451
  store i32 -1, i32* %retval, align 4, !dbg !3452
  br label %return, !dbg !3452

overflow:                                         ; preds = %if.else284, %if.else155
  call void @llvm.dbg.label(metadata !3453), !dbg !3454
  %171 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3455
  %172 = load i8, i8* %sign, align 1, !dbg !3456
  %conv306 = zext i8 %172 to i32, !dbg !3456
  call void @get_inf(%struct.real_value* %171, i32 %conv306), !dbg !3457
  store i32 1, i32* %retval, align 4, !dbg !3458
  br label %return, !dbg !3458

return:                                           ; preds = %overflow, %underflow, %is_a_zero, %if.end297, %if.then18, %if.then13, %if.then8
  %173 = load i32, i32* %retval, align 4, !dbg !3459
  ret i32 %173, !dbg !3459
}

declare dso_local i32 @strncmp(i8*, i8*, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal void @get_canonical_qnan(%struct.real_value* %r, i32 %sign) #0 !dbg !3460 {
entry:
  %r.addr = alloca %struct.real_value*, align 8
  %sign.addr = alloca i32, align 4
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !3461, metadata !DIExpression()), !dbg !3462
  store i32 %sign, i32* %sign.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %sign.addr, metadata !3463, metadata !DIExpression()), !dbg !3464
  %0 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3465
  %1 = bitcast %struct.real_value* %0 to i8*, !dbg !3466
  call void @llvm.memset.p0i8.i64(i8* align 8 %1, i8 0, i64 32, i1 false), !dbg !3466
  %2 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3467
  %3 = bitcast %struct.real_value* %2 to i32*, !dbg !3468
  %bf.load = load i32, i32* %3, align 8, !dbg !3469
  %bf.clear = and i32 %bf.load, -4, !dbg !3469
  %bf.set = or i32 %bf.clear, 3, !dbg !3469
  store i32 %bf.set, i32* %3, align 8, !dbg !3469
  %4 = load i32, i32* %sign.addr, align 4, !dbg !3470
  %5 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3471
  %6 = bitcast %struct.real_value* %5 to i32*, !dbg !3472
  %bf.load1 = load i32, i32* %6, align 8, !dbg !3473
  %bf.value = and i32 %4, 1, !dbg !3473
  %bf.shl = shl i32 %bf.value, 3, !dbg !3473
  %bf.clear2 = and i32 %bf.load1, -9, !dbg !3473
  %bf.set3 = or i32 %bf.clear2, %bf.shl, !dbg !3473
  store i32 %bf.set3, i32* %6, align 8, !dbg !3473
  %7 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3474
  %8 = bitcast %struct.real_value* %7 to i32*, !dbg !3475
  %bf.load4 = load i32, i32* %8, align 8, !dbg !3476
  %bf.clear5 = and i32 %bf.load4, -33, !dbg !3476
  %bf.set6 = or i32 %bf.clear5, 32, !dbg !3476
  store i32 %bf.set6, i32* %8, align 8, !dbg !3476
  ret void, !dbg !3477
}

; Function Attrs: noinline nounwind uwtable
define internal void @get_canonical_snan(%struct.real_value* %r, i32 %sign) #0 !dbg !3478 {
entry:
  %r.addr = alloca %struct.real_value*, align 8
  %sign.addr = alloca i32, align 4
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !3479, metadata !DIExpression()), !dbg !3480
  store i32 %sign, i32* %sign.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %sign.addr, metadata !3481, metadata !DIExpression()), !dbg !3482
  %0 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3483
  %1 = bitcast %struct.real_value* %0 to i8*, !dbg !3484
  call void @llvm.memset.p0i8.i64(i8* align 8 %1, i8 0, i64 32, i1 false), !dbg !3484
  %2 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3485
  %3 = bitcast %struct.real_value* %2 to i32*, !dbg !3486
  %bf.load = load i32, i32* %3, align 8, !dbg !3487
  %bf.clear = and i32 %bf.load, -4, !dbg !3487
  %bf.set = or i32 %bf.clear, 3, !dbg !3487
  store i32 %bf.set, i32* %3, align 8, !dbg !3487
  %4 = load i32, i32* %sign.addr, align 4, !dbg !3488
  %5 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3489
  %6 = bitcast %struct.real_value* %5 to i32*, !dbg !3490
  %bf.load1 = load i32, i32* %6, align 8, !dbg !3491
  %bf.value = and i32 %4, 1, !dbg !3491
  %bf.shl = shl i32 %bf.value, 3, !dbg !3491
  %bf.clear2 = and i32 %bf.load1, -9, !dbg !3491
  %bf.set3 = or i32 %bf.clear2, %bf.shl, !dbg !3491
  store i32 %bf.set3, i32* %6, align 8, !dbg !3491
  %7 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3492
  %8 = bitcast %struct.real_value* %7 to i32*, !dbg !3493
  %bf.load4 = load i32, i32* %8, align 8, !dbg !3494
  %bf.clear5 = and i32 %bf.load4, -17, !dbg !3494
  %bf.set6 = or i32 %bf.clear5, 16, !dbg !3494
  store i32 %bf.set6, i32* %8, align 8, !dbg !3494
  %9 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3495
  %10 = bitcast %struct.real_value* %9 to i32*, !dbg !3496
  %bf.load7 = load i32, i32* %10, align 8, !dbg !3497
  %bf.clear8 = and i32 %bf.load7, -33, !dbg !3497
  %bf.set9 = or i32 %bf.clear8, 32, !dbg !3497
  store i32 %bf.set9, i32* %10, align 8, !dbg !3497
  ret void, !dbg !3498
}

; Function Attrs: noinline nounwind uwtable
define internal void @normalize(%struct.real_value* %r) #0 !dbg !3499 {
entry:
  %r.addr = alloca %struct.real_value*, align 8
  %shift = alloca i32, align 4
  %exp = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !3502, metadata !DIExpression()), !dbg !3503
  call void @llvm.dbg.declare(metadata i32* %shift, metadata !3504, metadata !DIExpression()), !dbg !3505
  store i32 0, i32* %shift, align 4, !dbg !3505
  call void @llvm.dbg.declare(metadata i32* %exp, metadata !3506, metadata !DIExpression()), !dbg !3507
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3508, metadata !DIExpression()), !dbg !3509
  call void @llvm.dbg.declare(metadata i32* %j, metadata !3510, metadata !DIExpression()), !dbg !3511
  %0 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3512
  %1 = bitcast %struct.real_value* %0 to i32*, !dbg !3514
  %bf.load = load i32, i32* %1, align 8, !dbg !3514
  %bf.lshr = lshr i32 %bf.load, 2, !dbg !3514
  %bf.clear = and i32 %bf.lshr, 1, !dbg !3514
  %tobool = icmp ne i32 %bf.clear, 0, !dbg !3512
  br i1 %tobool, label %if.then, label %if.end, !dbg !3515

if.then:                                          ; preds = %entry
  br label %if.end44, !dbg !3516

if.end:                                           ; preds = %entry
  store i32 2, i32* %i, align 4, !dbg !3517
  br label %for.cond, !dbg !3519

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i32, i32* %i, align 4, !dbg !3520
  %cmp = icmp sge i32 %2, 0, !dbg !3522
  br i1 %cmp, label %for.body, label %for.end, !dbg !3523

for.body:                                         ; preds = %for.cond
  %3 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3524
  %sig = getelementptr inbounds %struct.real_value, %struct.real_value* %3, i32 0, i32 1, !dbg !3526
  %4 = load i32, i32* %i, align 4, !dbg !3527
  %idxprom = sext i32 %4 to i64, !dbg !3524
  %arrayidx = getelementptr inbounds [3 x i64], [3 x i64]* %sig, i64 0, i64 %idxprom, !dbg !3524
  %5 = load i64, i64* %arrayidx, align 8, !dbg !3524
  %cmp1 = icmp eq i64 %5, 0, !dbg !3528
  br i1 %cmp1, label %if.then2, label %if.else, !dbg !3529

if.then2:                                         ; preds = %for.body
  %6 = load i32, i32* %shift, align 4, !dbg !3530
  %add = add nsw i32 %6, 64, !dbg !3530
  store i32 %add, i32* %shift, align 4, !dbg !3530
  br label %if.end3, !dbg !3531

if.else:                                          ; preds = %for.body
  br label %for.end, !dbg !3532

if.end3:                                          ; preds = %if.then2
  br label %for.inc, !dbg !3533

for.inc:                                          ; preds = %if.end3
  %7 = load i32, i32* %i, align 4, !dbg !3534
  %dec = add nsw i32 %7, -1, !dbg !3534
  store i32 %dec, i32* %i, align 4, !dbg !3534
  br label %for.cond, !dbg !3535, !llvm.loop !3536

for.end:                                          ; preds = %if.else, %for.cond
  %8 = load i32, i32* %i, align 4, !dbg !3538
  %cmp4 = icmp slt i32 %8, 0, !dbg !3540
  br i1 %cmp4, label %if.then5, label %if.end10, !dbg !3541

if.then5:                                         ; preds = %for.end
  %9 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3542
  %10 = bitcast %struct.real_value* %9 to i32*, !dbg !3544
  %bf.load6 = load i32, i32* %10, align 8, !dbg !3545
  %bf.clear7 = and i32 %bf.load6, -4, !dbg !3545
  store i32 %bf.clear7, i32* %10, align 8, !dbg !3545
  %11 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3546
  %12 = bitcast %struct.real_value* %11 to i32*, !dbg !3546
  %bf.load8 = load i32, i32* %12, align 8, !dbg !3546
  %bf.clear9 = and i32 %bf.load8, 63, !dbg !3546
  store i32 %bf.clear9, i32* %12, align 8, !dbg !3546
  br label %if.end44, !dbg !3547

if.end10:                                         ; preds = %for.end
  store i32 0, i32* %j, align 4, !dbg !3548
  br label %for.cond11, !dbg !3550

for.cond11:                                       ; preds = %for.inc18, %if.end10
  %13 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3551
  %sig12 = getelementptr inbounds %struct.real_value, %struct.real_value* %13, i32 0, i32 1, !dbg !3554
  %14 = load i32, i32* %i, align 4, !dbg !3555
  %idxprom13 = sext i32 %14 to i64, !dbg !3551
  %arrayidx14 = getelementptr inbounds [3 x i64], [3 x i64]* %sig12, i64 0, i64 %idxprom13, !dbg !3551
  %15 = load i64, i64* %arrayidx14, align 8, !dbg !3551
  %16 = load i32, i32* %j, align 4, !dbg !3556
  %sub = sub nsw i32 63, %16, !dbg !3557
  %sh_prom = zext i32 %sub to i64, !dbg !3558
  %shl = shl i64 1, %sh_prom, !dbg !3558
  %and = and i64 %15, %shl, !dbg !3559
  %tobool15 = icmp ne i64 %and, 0, !dbg !3559
  br i1 %tobool15, label %if.then16, label %if.end17, !dbg !3560

if.then16:                                        ; preds = %for.cond11
  br label %for.end19, !dbg !3561

if.end17:                                         ; preds = %for.cond11
  br label %for.inc18, !dbg !3562

for.inc18:                                        ; preds = %if.end17
  %17 = load i32, i32* %j, align 4, !dbg !3563
  %inc = add nsw i32 %17, 1, !dbg !3563
  store i32 %inc, i32* %j, align 4, !dbg !3563
  br label %for.cond11, !dbg !3564, !llvm.loop !3565

for.end19:                                        ; preds = %if.then16
  %18 = load i32, i32* %j, align 4, !dbg !3568
  %19 = load i32, i32* %shift, align 4, !dbg !3569
  %add20 = add nsw i32 %19, %18, !dbg !3569
  store i32 %add20, i32* %shift, align 4, !dbg !3569
  %20 = load i32, i32* %shift, align 4, !dbg !3570
  %cmp21 = icmp sgt i32 %20, 0, !dbg !3572
  br i1 %cmp21, label %if.then22, label %if.end44, !dbg !3573

if.then22:                                        ; preds = %for.end19
  %21 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3574
  %22 = bitcast %struct.real_value* %21 to i32*, !dbg !3574
  %bf.load23 = load i32, i32* %22, align 8, !dbg !3574
  %bf.lshr24 = lshr i32 %bf.load23, 6, !dbg !3574
  %xor = xor i32 %bf.lshr24, 33554432, !dbg !3574
  %sub25 = sub nsw i32 %xor, 33554432, !dbg !3574
  %23 = load i32, i32* %shift, align 4, !dbg !3576
  %sub26 = sub nsw i32 %sub25, %23, !dbg !3577
  store i32 %sub26, i32* %exp, align 4, !dbg !3578
  %24 = load i32, i32* %exp, align 4, !dbg !3579
  %cmp27 = icmp sgt i32 %24, 33554431, !dbg !3581
  br i1 %cmp27, label %if.then28, label %if.else32, !dbg !3582

if.then28:                                        ; preds = %if.then22
  %25 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3583
  %26 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3584
  %27 = bitcast %struct.real_value* %26 to i32*, !dbg !3585
  %bf.load29 = load i32, i32* %27, align 8, !dbg !3585
  %bf.lshr30 = lshr i32 %bf.load29, 3, !dbg !3585
  %bf.clear31 = and i32 %bf.lshr30, 1, !dbg !3585
  call void @get_inf(%struct.real_value* %25, i32 %bf.clear31), !dbg !3586
  br label %if.end43, !dbg !3586

if.else32:                                        ; preds = %if.then22
  %28 = load i32, i32* %exp, align 4, !dbg !3587
  %cmp33 = icmp slt i32 %28, -33554431, !dbg !3589
  br i1 %cmp33, label %if.then34, label %if.else38, !dbg !3590

if.then34:                                        ; preds = %if.else32
  %29 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3591
  %30 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3592
  %31 = bitcast %struct.real_value* %30 to i32*, !dbg !3593
  %bf.load35 = load i32, i32* %31, align 8, !dbg !3593
  %bf.lshr36 = lshr i32 %bf.load35, 3, !dbg !3593
  %bf.clear37 = and i32 %bf.lshr36, 1, !dbg !3593
  call void @get_zero(%struct.real_value* %29, i32 %bf.clear37), !dbg !3594
  br label %if.end42, !dbg !3594

if.else38:                                        ; preds = %if.else32
  %32 = load i32, i32* %exp, align 4, !dbg !3595
  %and39 = and i32 %32, 67108863, !dbg !3595
  %33 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3595
  %34 = bitcast %struct.real_value* %33 to i32*, !dbg !3595
  %bf.load40 = load i32, i32* %34, align 8, !dbg !3595
  %bf.value = and i32 %and39, 67108863, !dbg !3595
  %bf.shl = shl i32 %bf.value, 6, !dbg !3595
  %bf.clear41 = and i32 %bf.load40, 63, !dbg !3595
  %bf.set = or i32 %bf.clear41, %bf.shl, !dbg !3595
  store i32 %bf.set, i32* %34, align 8, !dbg !3595
  %35 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3597
  %36 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3598
  %37 = load i32, i32* %shift, align 4, !dbg !3599
  call void @lshift_significand(%struct.real_value* %35, %struct.real_value* %36, i32 %37), !dbg !3600
  br label %if.end42

if.end42:                                         ; preds = %if.else38, %if.then34
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %if.then28
  br label %if.end44, !dbg !3601

if.end44:                                         ; preds = %if.then, %if.then5, %if.end43, %for.end19
  ret void, !dbg !3602
}

; Function Attrs: noinline nounwind uwtable
define internal void @times_pten(%struct.real_value* %r, i32 %exp) #0 !dbg !3603 {
entry:
  %r.addr = alloca %struct.real_value*, align 8
  %exp.addr = alloca i32, align 4
  %pten = alloca %struct.real_value, align 8
  %rr = alloca %struct.real_value*, align 8
  %negative = alloca i8, align 1
  %i = alloca i32, align 4
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !3604, metadata !DIExpression()), !dbg !3605
  store i32 %exp, i32* %exp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %exp.addr, metadata !3606, metadata !DIExpression()), !dbg !3607
  call void @llvm.dbg.declare(metadata %struct.real_value* %pten, metadata !3608, metadata !DIExpression()), !dbg !3609
  call void @llvm.dbg.declare(metadata %struct.real_value** %rr, metadata !3610, metadata !DIExpression()), !dbg !3611
  call void @llvm.dbg.declare(metadata i8* %negative, metadata !3612, metadata !DIExpression()), !dbg !3613
  %0 = load i32, i32* %exp.addr, align 4, !dbg !3614
  %cmp = icmp slt i32 %0, 0, !dbg !3615
  %conv = zext i1 %cmp to i32, !dbg !3615
  %conv1 = trunc i32 %conv to i8, !dbg !3616
  store i8 %conv1, i8* %negative, align 1, !dbg !3613
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3617, metadata !DIExpression()), !dbg !3618
  %1 = load i8, i8* %negative, align 1, !dbg !3619
  %tobool = icmp ne i8 %1, 0, !dbg !3619
  br i1 %tobool, label %if.then, label %if.else, !dbg !3621

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %exp.addr, align 4, !dbg !3622
  %sub = sub nsw i32 0, %2, !dbg !3624
  store i32 %sub, i32* %exp.addr, align 4, !dbg !3625
  %call = call %struct.real_value* @real_digit(i32 1), !dbg !3626
  %3 = bitcast %struct.real_value* %pten to i8*, !dbg !3627
  %4 = bitcast %struct.real_value* %call to i8*, !dbg !3627
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 32, i1 false), !dbg !3627
  store %struct.real_value* %pten, %struct.real_value** %rr, align 8, !dbg !3628
  br label %if.end, !dbg !3629

if.else:                                          ; preds = %entry
  %5 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3630
  store %struct.real_value* %5, %struct.real_value** %rr, align 8, !dbg !3631
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  store i32 0, i32* %i, align 4, !dbg !3632
  br label %for.cond, !dbg !3634

for.cond:                                         ; preds = %for.inc, %if.end
  %6 = load i32, i32* %exp.addr, align 4, !dbg !3635
  %cmp2 = icmp sgt i32 %6, 0, !dbg !3637
  br i1 %cmp2, label %for.body, label %for.end, !dbg !3638

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %exp.addr, align 4, !dbg !3639
  %and = and i32 %7, 1, !dbg !3641
  %tobool4 = icmp ne i32 %and, 0, !dbg !3641
  br i1 %tobool4, label %if.then5, label %if.end8, !dbg !3642

if.then5:                                         ; preds = %for.body
  %8 = load %struct.real_value*, %struct.real_value** %rr, align 8, !dbg !3643
  %9 = load %struct.real_value*, %struct.real_value** %rr, align 8, !dbg !3644
  %10 = load i32, i32* %i, align 4, !dbg !3645
  %call6 = call %struct.real_value* @ten_to_ptwo(i32 %10), !dbg !3646
  %call7 = call zeroext i8 @do_multiply(%struct.real_value* %8, %struct.real_value* %9, %struct.real_value* %call6), !dbg !3647
  br label %if.end8, !dbg !3647

if.end8:                                          ; preds = %if.then5, %for.body
  br label %for.inc, !dbg !3648

for.inc:                                          ; preds = %if.end8
  %11 = load i32, i32* %i, align 4, !dbg !3649
  %inc = add nsw i32 %11, 1, !dbg !3649
  store i32 %inc, i32* %i, align 4, !dbg !3649
  %12 = load i32, i32* %exp.addr, align 4, !dbg !3650
  %shr = ashr i32 %12, 1, !dbg !3650
  store i32 %shr, i32* %exp.addr, align 4, !dbg !3650
  br label %for.cond, !dbg !3651, !llvm.loop !3652

for.end:                                          ; preds = %for.cond
  %13 = load i8, i8* %negative, align 1, !dbg !3654
  %tobool9 = icmp ne i8 %13, 0, !dbg !3654
  br i1 %tobool9, label %if.then10, label %if.end12, !dbg !3656

if.then10:                                        ; preds = %for.end
  %14 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3657
  %15 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3658
  %call11 = call zeroext i8 @do_divide(%struct.real_value* %14, %struct.real_value* %15, %struct.real_value* %pten), !dbg !3659
  br label %if.end12, !dbg !3659

if.end12:                                         ; preds = %if.then10, %for.end
  ret void, !dbg !3660
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @real_from_string2(%struct.real_value* noalias sret %agg.result, i8* %s, i32 %mode) #0 !dbg !3661 {
entry:
  %s.addr = alloca i8*, align 8
  %mode.addr = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s.addr, metadata !3664, metadata !DIExpression()), !dbg !3665
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !3666, metadata !DIExpression()), !dbg !3667
  call void @llvm.dbg.declare(metadata %struct.real_value* %agg.result, metadata !3668, metadata !DIExpression()), !dbg !3669
  %0 = load i8*, i8** %s.addr, align 8, !dbg !3670
  %call = call i32 @real_from_string(%struct.real_value* %agg.result, i8* %0), !dbg !3671
  %1 = load i32, i32* %mode.addr, align 4, !dbg !3672
  %cmp = icmp ne i32 %1, 0, !dbg !3674
  br i1 %cmp, label %if.then, label %if.end, !dbg !3675

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %mode.addr, align 4, !dbg !3676
  call void @real_convert(%struct.real_value* %agg.result, i32 %2, %struct.real_value* %agg.result), !dbg !3677
  br label %if.end, !dbg !3677

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !3678
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @real_from_string3(%struct.real_value* %r, i8* %s, i32 %mode) #0 !dbg !3679 {
entry:
  %r.addr = alloca %struct.real_value*, align 8
  %s.addr = alloca i8*, align 8
  %mode.addr = alloca i32, align 4
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !3682, metadata !DIExpression()), !dbg !3683
  store i8* %s, i8** %s.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s.addr, metadata !3684, metadata !DIExpression()), !dbg !3685
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !3686, metadata !DIExpression()), !dbg !3687
  %0 = load i32, i32* %mode.addr, align 4, !dbg !3688
  %idxprom = zext i32 %0 to i64, !dbg !3688
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !3688
  %1 = load i8, i8* %arrayidx, align 1, !dbg !3688
  %conv = zext i8 %1 to i32, !dbg !3688
  %cmp = icmp eq i32 %conv, 9, !dbg !3688
  br i1 %cmp, label %if.then, label %if.else, !dbg !3690

if.then:                                          ; preds = %entry
  %2 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3691
  %3 = load i8*, i8** %s.addr, align 8, !dbg !3692
  call void @decimal_real_from_string(%struct.real_value* %2, i8* %3), !dbg !3693
  br label %if.end, !dbg !3693

if.else:                                          ; preds = %entry
  %4 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3694
  %5 = load i8*, i8** %s.addr, align 8, !dbg !3695
  %call = call i32 @real_from_string(%struct.real_value* %4, i8* %5), !dbg !3696
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %6 = load i32, i32* %mode.addr, align 4, !dbg !3697
  %cmp2 = icmp ne i32 %6, 0, !dbg !3699
  br i1 %cmp2, label %if.then4, label %if.end5, !dbg !3700

if.then4:                                         ; preds = %if.end
  %7 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3701
  %8 = load i32, i32* %mode.addr, align 4, !dbg !3702
  %9 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3703
  call void @real_convert(%struct.real_value* %7, i32 %8, %struct.real_value* %9), !dbg !3704
  br label %if.end5, !dbg !3704

if.end5:                                          ; preds = %if.then4, %if.end
  ret void, !dbg !3705
}

declare dso_local void @decimal_real_from_string(%struct.real_value*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @real_from_integer(%struct.real_value* %r, i32 %mode, i64 %low, i64 %high, i32 %unsigned_p) #0 !dbg !3706 {
entry:
  %r.addr = alloca %struct.real_value*, align 8
  %mode.addr = alloca i32, align 4
  %low.addr = alloca i64, align 8
  %high.addr = alloca i64, align 8
  %unsigned_p.addr = alloca i32, align 4
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !3709, metadata !DIExpression()), !dbg !3710
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !3711, metadata !DIExpression()), !dbg !3712
  store i64 %low, i64* %low.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %low.addr, metadata !3713, metadata !DIExpression()), !dbg !3714
  store i64 %high, i64* %high.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %high.addr, metadata !3715, metadata !DIExpression()), !dbg !3716
  store i32 %unsigned_p, i32* %unsigned_p.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %unsigned_p.addr, metadata !3717, metadata !DIExpression()), !dbg !3718
  %0 = load i64, i64* %low.addr, align 8, !dbg !3719
  %cmp = icmp eq i64 %0, 0, !dbg !3721
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !3722

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* %high.addr, align 8, !dbg !3723
  %cmp1 = icmp eq i64 %1, 0, !dbg !3724
  br i1 %cmp1, label %if.then, label %if.else, !dbg !3725

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3726
  call void @get_zero(%struct.real_value* %2, i32 0), !dbg !3727
  br label %if.end19, !dbg !3727

if.else:                                          ; preds = %land.lhs.true, %entry
  %3 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3728
  %4 = bitcast %struct.real_value* %3 to i8*, !dbg !3730
  call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 32, i1 false), !dbg !3730
  %5 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3731
  %6 = bitcast %struct.real_value* %5 to i32*, !dbg !3732
  %bf.load = load i32, i32* %6, align 8, !dbg !3733
  %bf.clear = and i32 %bf.load, -4, !dbg !3733
  %bf.set = or i32 %bf.clear, 1, !dbg !3733
  store i32 %bf.set, i32* %6, align 8, !dbg !3733
  %7 = load i64, i64* %high.addr, align 8, !dbg !3734
  %cmp2 = icmp slt i64 %7, 0, !dbg !3735
  br i1 %cmp2, label %land.rhs, label %land.end, !dbg !3736

land.rhs:                                         ; preds = %if.else
  %8 = load i32, i32* %unsigned_p.addr, align 4, !dbg !3737
  %tobool = icmp ne i32 %8, 0, !dbg !3738
  %lnot = xor i1 %tobool, true, !dbg !3738
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.else
  %9 = phi i1 [ false, %if.else ], [ %lnot, %land.rhs ], !dbg !3739
  %land.ext = zext i1 %9 to i32, !dbg !3736
  %10 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3740
  %11 = bitcast %struct.real_value* %10 to i32*, !dbg !3741
  %bf.load3 = load i32, i32* %11, align 8, !dbg !3742
  %bf.value = and i32 %land.ext, 1, !dbg !3742
  %bf.shl = shl i32 %bf.value, 3, !dbg !3742
  %bf.clear4 = and i32 %bf.load3, -9, !dbg !3742
  %bf.set5 = or i32 %bf.clear4, %bf.shl, !dbg !3742
  store i32 %bf.set5, i32* %11, align 8, !dbg !3742
  %12 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3743
  %13 = bitcast %struct.real_value* %12 to i32*, !dbg !3743
  %bf.load6 = load i32, i32* %13, align 8, !dbg !3743
  %bf.clear7 = and i32 %bf.load6, 63, !dbg !3743
  %bf.set8 = or i32 %bf.clear7, 8192, !dbg !3743
  store i32 %bf.set8, i32* %13, align 8, !dbg !3743
  %14 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3744
  %15 = bitcast %struct.real_value* %14 to i32*, !dbg !3746
  %bf.load9 = load i32, i32* %15, align 8, !dbg !3746
  %bf.lshr = lshr i32 %bf.load9, 3, !dbg !3746
  %bf.clear10 = and i32 %bf.lshr, 1, !dbg !3746
  %tobool11 = icmp ne i32 %bf.clear10, 0, !dbg !3744
  br i1 %tobool11, label %if.then12, label %if.end16, !dbg !3747

if.then12:                                        ; preds = %land.end
  %16 = load i64, i64* %high.addr, align 8, !dbg !3748
  %neg = xor i64 %16, -1, !dbg !3750
  store i64 %neg, i64* %high.addr, align 8, !dbg !3751
  %17 = load i64, i64* %low.addr, align 8, !dbg !3752
  %cmp13 = icmp eq i64 %17, 0, !dbg !3754
  br i1 %cmp13, label %if.then14, label %if.else15, !dbg !3755

if.then14:                                        ; preds = %if.then12
  %18 = load i64, i64* %high.addr, align 8, !dbg !3756
  %add = add nsw i64 %18, 1, !dbg !3756
  store i64 %add, i64* %high.addr, align 8, !dbg !3756
  br label %if.end, !dbg !3757

if.else15:                                        ; preds = %if.then12
  %19 = load i64, i64* %low.addr, align 8, !dbg !3758
  %sub = sub i64 0, %19, !dbg !3759
  store i64 %sub, i64* %low.addr, align 8, !dbg !3760
  br label %if.end

if.end:                                           ; preds = %if.else15, %if.then14
  br label %if.end16, !dbg !3761

if.end16:                                         ; preds = %if.end, %land.end
  %20 = load i64, i64* %high.addr, align 8, !dbg !3762
  %21 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3765
  %sig = getelementptr inbounds %struct.real_value, %struct.real_value* %21, i32 0, i32 1, !dbg !3766
  %arrayidx = getelementptr inbounds [3 x i64], [3 x i64]* %sig, i64 0, i64 2, !dbg !3765
  store i64 %20, i64* %arrayidx, align 8, !dbg !3767
  %22 = load i64, i64* %low.addr, align 8, !dbg !3768
  %23 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3769
  %sig17 = getelementptr inbounds %struct.real_value, %struct.real_value* %23, i32 0, i32 1, !dbg !3770
  %arrayidx18 = getelementptr inbounds [3 x i64], [3 x i64]* %sig17, i64 0, i64 1, !dbg !3769
  store i64 %22, i64* %arrayidx18, align 8, !dbg !3771
  %24 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3772
  call void @normalize(%struct.real_value* %24), !dbg !3773
  br label %if.end19

if.end19:                                         ; preds = %if.end16, %if.then
  %25 = load i32, i32* %mode.addr, align 4, !dbg !3774
  %idxprom = zext i32 %25 to i64, !dbg !3774
  %arrayidx20 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !3774
  %26 = load i8, i8* %arrayidx20, align 1, !dbg !3774
  %conv = zext i8 %26 to i32, !dbg !3774
  %cmp21 = icmp eq i32 %conv, 9, !dbg !3774
  br i1 %cmp21, label %if.then23, label %if.else24, !dbg !3776

if.then23:                                        ; preds = %if.end19
  %27 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3777
  call void @decimal_from_integer(%struct.real_value* %27), !dbg !3778
  br label %if.end29, !dbg !3778

if.else24:                                        ; preds = %if.end19
  %28 = load i32, i32* %mode.addr, align 4, !dbg !3779
  %cmp25 = icmp ne i32 %28, 0, !dbg !3781
  br i1 %cmp25, label %if.then27, label %if.end28, !dbg !3782

if.then27:                                        ; preds = %if.else24
  %29 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3783
  %30 = load i32, i32* %mode.addr, align 4, !dbg !3784
  %31 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3785
  call void @real_convert(%struct.real_value* %29, i32 %30, %struct.real_value* %31), !dbg !3786
  br label %if.end28, !dbg !3786

if.end28:                                         ; preds = %if.then27, %if.else24
  br label %if.end29

if.end29:                                         ; preds = %if.end28, %if.then23
  ret void, !dbg !3787
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal void @decimal_from_integer(%struct.real_value* %r) #0 !dbg !3788 {
entry:
  %r.addr = alloca %struct.real_value*, align 8
  %str = alloca [256 x i8], align 16
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !3789, metadata !DIExpression()), !dbg !3790
  call void @llvm.dbg.declare(metadata [256 x i8]* %str, metadata !3791, metadata !DIExpression()), !dbg !3795
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %str, i64 0, i64 0, !dbg !3796
  %0 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3797
  call void @decimal_integer_string(i8* %arraydecay, %struct.real_value* %0, i64 255), !dbg !3798
  %1 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3799
  %arraydecay1 = getelementptr inbounds [256 x i8], [256 x i8]* %str, i64 0, i64 0, !dbg !3800
  call void @decimal_real_from_string(%struct.real_value* %1, i8* %arraydecay1), !dbg !3801
  ret void, !dbg !3802
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.real_value* @dconst_e_ptr() #0 !dbg !2 {
entry:
  %i = alloca i32, align 4
  %bf.load = load i32, i32* getelementptr inbounds (%struct.real_value, %struct.real_value* @dconst_e_ptr.value, i32 0, i32 0), align 8, !dbg !3803
  %bf.clear = and i32 %bf.load, 3, !dbg !3803
  %cmp = icmp eq i32 %bf.clear, 0, !dbg !3805
  br i1 %cmp, label %if.then, label %if.end, !dbg !3806

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3807, metadata !DIExpression()), !dbg !3809
  %bf.load1 = load i32, i32* getelementptr inbounds (%struct.real_value, %struct.real_value* @dconst_e_ptr.value, i32 0, i32 0), align 8, !dbg !3810
  %bf.clear2 = and i32 %bf.load1, -4, !dbg !3810
  store i32 %bf.clear2, i32* getelementptr inbounds (%struct.real_value, %struct.real_value* @dconst_e_ptr.value, i32 0, i32 0), align 8, !dbg !3810
  %bf.load3 = load i32, i32* getelementptr inbounds (%struct.real_value, %struct.real_value* @dconst_e_ptr.value, i32 0, i32 0), align 8, !dbg !3811
  %bf.clear4 = and i32 %bf.load3, -5, !dbg !3811
  store i32 %bf.clear4, i32* getelementptr inbounds (%struct.real_value, %struct.real_value* @dconst_e_ptr.value, i32 0, i32 0), align 8, !dbg !3811
  %bf.load5 = load i32, i32* getelementptr inbounds (%struct.real_value, %struct.real_value* @dconst_e_ptr.value, i32 0, i32 0), align 8, !dbg !3812
  %bf.clear6 = and i32 %bf.load5, -9, !dbg !3812
  store i32 %bf.clear6, i32* getelementptr inbounds (%struct.real_value, %struct.real_value* @dconst_e_ptr.value, i32 0, i32 0), align 8, !dbg !3812
  %bf.load7 = load i32, i32* getelementptr inbounds (%struct.real_value, %struct.real_value* @dconst_e_ptr.value, i32 0, i32 0), align 8, !dbg !3813
  %bf.clear8 = and i32 %bf.load7, -17, !dbg !3813
  store i32 %bf.clear8, i32* getelementptr inbounds (%struct.real_value, %struct.real_value* @dconst_e_ptr.value, i32 0, i32 0), align 8, !dbg !3813
  %bf.load9 = load i32, i32* getelementptr inbounds (%struct.real_value, %struct.real_value* @dconst_e_ptr.value, i32 0, i32 0), align 8, !dbg !3814
  %bf.clear10 = and i32 %bf.load9, -33, !dbg !3814
  store i32 %bf.clear10, i32* getelementptr inbounds (%struct.real_value, %struct.real_value* @dconst_e_ptr.value, i32 0, i32 0), align 8, !dbg !3814
  %bf.load11 = load i32, i32* getelementptr inbounds (%struct.real_value, %struct.real_value* @dconst_e_ptr.value, i32 0, i32 0), align 8, !dbg !3815
  %bf.clear12 = and i32 %bf.load11, 63, !dbg !3815
  store i32 %bf.clear12, i32* getelementptr inbounds (%struct.real_value, %struct.real_value* @dconst_e_ptr.value, i32 0, i32 0), align 8, !dbg !3815
  store i64 3, i64* getelementptr inbounds (%struct.real_value, %struct.real_value* @dconst_e_ptr.value, i32 0, i32 1, i64 0), align 8, !dbg !3816
  store i32 1, i32* %i, align 4, !dbg !3817
  br label %for.cond, !dbg !3819

for.cond:                                         ; preds = %for.inc, %if.then
  %0 = load i32, i32* %i, align 4, !dbg !3820
  %cmp13 = icmp slt i32 %0, 3, !dbg !3822
  br i1 %cmp13, label %for.body, label %for.end, !dbg !3823

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4, !dbg !3824
  %idxprom = sext i32 %1 to i64, !dbg !3825
  %arrayidx = getelementptr inbounds [3 x i64], [3 x i64]* getelementptr inbounds (%struct.real_value, %struct.real_value* @dconst_e_ptr.value, i32 0, i32 1), i64 0, i64 %idxprom, !dbg !3825
  store i64 0, i64* %arrayidx, align 8, !dbg !3826
  br label %for.inc, !dbg !3825

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4, !dbg !3827
  %inc = add nsw i32 %2, 1, !dbg !3827
  store i32 %inc, i32* %i, align 4, !dbg !3827
  br label %for.cond, !dbg !3828, !llvm.loop !3829

for.end:                                          ; preds = %for.cond
  br label %if.end, !dbg !3831

if.end:                                           ; preds = %for.end, %entry
  ret %struct.real_value* @dconst_e_ptr.value, !dbg !3832
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.real_value* @dconst_third_ptr() #0 !dbg !405 {
entry:
  %bf.load = load i32, i32* getelementptr inbounds (%struct.real_value, %struct.real_value* @dconst_third_ptr.value, i32 0, i32 0), align 8, !dbg !3833
  %bf.clear = and i32 %bf.load, 3, !dbg !3833
  %cmp = icmp eq i32 %bf.clear, 0, !dbg !3835
  br i1 %cmp, label %if.then, label %if.end, !dbg !3836

if.then:                                          ; preds = %entry
  %call = call %struct.real_value* @real_digit(i32 3), !dbg !3837
  %call1 = call zeroext i8 @real_arithmetic(%struct.real_value* @dconst_third_ptr.value, i32 75, %struct.real_value* @dconst1, %struct.real_value* %call), !dbg !3839
  br label %if.end, !dbg !3840

if.end:                                           ; preds = %if.then, %entry
  ret %struct.real_value* @dconst_third_ptr.value, !dbg !3841
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.real_value* @dconst_sqrt2_ptr() #0 !dbg !409 {
entry:
  %i = alloca i32, align 4
  %bf.load = load i32, i32* getelementptr inbounds (%struct.real_value, %struct.real_value* @dconst_sqrt2_ptr.value, i32 0, i32 0), align 8, !dbg !3842
  %bf.clear = and i32 %bf.load, 3, !dbg !3842
  %cmp = icmp eq i32 %bf.clear, 0, !dbg !3844
  br i1 %cmp, label %if.then, label %if.end, !dbg !3845

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3846, metadata !DIExpression()), !dbg !3848
  %bf.load1 = load i32, i32* getelementptr inbounds (%struct.real_value, %struct.real_value* @dconst_sqrt2_ptr.value, i32 0, i32 0), align 8, !dbg !3849
  %bf.clear2 = and i32 %bf.load1, -4, !dbg !3849
  store i32 %bf.clear2, i32* getelementptr inbounds (%struct.real_value, %struct.real_value* @dconst_sqrt2_ptr.value, i32 0, i32 0), align 8, !dbg !3849
  %bf.load3 = load i32, i32* getelementptr inbounds (%struct.real_value, %struct.real_value* @dconst_sqrt2_ptr.value, i32 0, i32 0), align 8, !dbg !3850
  %bf.clear4 = and i32 %bf.load3, -5, !dbg !3850
  store i32 %bf.clear4, i32* getelementptr inbounds (%struct.real_value, %struct.real_value* @dconst_sqrt2_ptr.value, i32 0, i32 0), align 8, !dbg !3850
  %bf.load5 = load i32, i32* getelementptr inbounds (%struct.real_value, %struct.real_value* @dconst_sqrt2_ptr.value, i32 0, i32 0), align 8, !dbg !3851
  %bf.clear6 = and i32 %bf.load5, -9, !dbg !3851
  store i32 %bf.clear6, i32* getelementptr inbounds (%struct.real_value, %struct.real_value* @dconst_sqrt2_ptr.value, i32 0, i32 0), align 8, !dbg !3851
  %bf.load7 = load i32, i32* getelementptr inbounds (%struct.real_value, %struct.real_value* @dconst_sqrt2_ptr.value, i32 0, i32 0), align 8, !dbg !3852
  %bf.clear8 = and i32 %bf.load7, -17, !dbg !3852
  store i32 %bf.clear8, i32* getelementptr inbounds (%struct.real_value, %struct.real_value* @dconst_sqrt2_ptr.value, i32 0, i32 0), align 8, !dbg !3852
  %bf.load9 = load i32, i32* getelementptr inbounds (%struct.real_value, %struct.real_value* @dconst_sqrt2_ptr.value, i32 0, i32 0), align 8, !dbg !3853
  %bf.clear10 = and i32 %bf.load9, -33, !dbg !3853
  store i32 %bf.clear10, i32* getelementptr inbounds (%struct.real_value, %struct.real_value* @dconst_sqrt2_ptr.value, i32 0, i32 0), align 8, !dbg !3853
  %bf.load11 = load i32, i32* getelementptr inbounds (%struct.real_value, %struct.real_value* @dconst_sqrt2_ptr.value, i32 0, i32 0), align 8, !dbg !3854
  %bf.clear12 = and i32 %bf.load11, 63, !dbg !3854
  store i32 %bf.clear12, i32* getelementptr inbounds (%struct.real_value, %struct.real_value* @dconst_sqrt2_ptr.value, i32 0, i32 0), align 8, !dbg !3854
  store i64 3, i64* getelementptr inbounds (%struct.real_value, %struct.real_value* @dconst_sqrt2_ptr.value, i32 0, i32 1, i64 0), align 8, !dbg !3855
  store i32 1, i32* %i, align 4, !dbg !3856
  br label %for.cond, !dbg !3858

for.cond:                                         ; preds = %for.inc, %if.then
  %0 = load i32, i32* %i, align 4, !dbg !3859
  %cmp13 = icmp slt i32 %0, 3, !dbg !3861
  br i1 %cmp13, label %for.body, label %for.end, !dbg !3862

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4, !dbg !3863
  %idxprom = sext i32 %1 to i64, !dbg !3864
  %arrayidx = getelementptr inbounds [3 x i64], [3 x i64]* getelementptr inbounds (%struct.real_value, %struct.real_value* @dconst_sqrt2_ptr.value, i32 0, i32 1), i64 0, i64 %idxprom, !dbg !3864
  store i64 0, i64* %arrayidx, align 8, !dbg !3865
  br label %for.inc, !dbg !3864

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4, !dbg !3866
  %inc = add nsw i32 %2, 1, !dbg !3866
  store i32 %inc, i32* %i, align 4, !dbg !3866
  br label %for.cond, !dbg !3867, !llvm.loop !3868

for.end:                                          ; preds = %for.cond
  br label %if.end, !dbg !3870

if.end:                                           ; preds = %for.end, %entry
  ret %struct.real_value* @dconst_sqrt2_ptr.value, !dbg !3871
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @real_inf(%struct.real_value* %r) #0 !dbg !3872 {
entry:
  %r.addr = alloca %struct.real_value*, align 8
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !3873, metadata !DIExpression()), !dbg !3874
  %0 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3875
  call void @get_inf(%struct.real_value* %0, i32 0), !dbg !3876
  ret void, !dbg !3877
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @real_nan(%struct.real_value* %r, i8* %str, i32 %quiet, i32 %mode) #0 !dbg !3878 {
entry:
  %retval = alloca i8, align 1
  %r.addr = alloca %struct.real_value*, align 8
  %str.addr = alloca i8*, align 8
  %quiet.addr = alloca i32, align 4
  %mode.addr = alloca i32, align 4
  %fmt = alloca %struct.real_format*, align 8
  %base = alloca i32, align 4
  %d = alloca i32, align 4
  %u = alloca %struct.real_value, align 8
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !3881, metadata !DIExpression()), !dbg !3882
  store i8* %str, i8** %str.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !3883, metadata !DIExpression()), !dbg !3884
  store i32 %quiet, i32* %quiet.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %quiet.addr, metadata !3885, metadata !DIExpression()), !dbg !3886
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !3887, metadata !DIExpression()), !dbg !3888
  call void @llvm.dbg.declare(metadata %struct.real_format** %fmt, metadata !3889, metadata !DIExpression()), !dbg !3890
  %0 = load i32, i32* %mode.addr, align 4, !dbg !3891
  %idxprom = zext i32 %0 to i64, !dbg !3891
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !3891
  %1 = load i8, i8* %arrayidx, align 1, !dbg !3891
  %conv = zext i8 %1 to i32, !dbg !3891
  %cmp = icmp eq i32 %conv, 9, !dbg !3891
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !3891

cond.true:                                        ; preds = %entry
  %2 = load i32, i32* %mode.addr, align 4, !dbg !3891
  %sub = sub i32 %2, 42, !dbg !3891
  %add = add i32 %sub, 4, !dbg !3891
  br label %cond.end, !dbg !3891

cond.false:                                       ; preds = %entry
  %3 = load i32, i32* %mode.addr, align 4, !dbg !3891
  %sub2 = sub i32 %3, 38, !dbg !3891
  br label %cond.end, !dbg !3891

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add, %cond.true ], [ %sub2, %cond.false ], !dbg !3891
  %idxprom3 = zext i32 %cond to i64, !dbg !3891
  %arrayidx4 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom3, !dbg !3891
  %4 = load %struct.real_format*, %struct.real_format** %arrayidx4, align 8, !dbg !3891
  store %struct.real_format* %4, %struct.real_format** %fmt, align 8, !dbg !3892
  %5 = load %struct.real_format*, %struct.real_format** %fmt, align 8, !dbg !3893
  %tobool = icmp ne %struct.real_format* %5, null, !dbg !3893
  br i1 %tobool, label %cond.false6, label %cond.true5, !dbg !3893

cond.true5:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 2467, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3893
  br label %cond.end7, !dbg !3893

cond.false6:                                      ; preds = %cond.end
  br label %cond.end7, !dbg !3893

cond.end7:                                        ; preds = %cond.false6, %cond.true5
  %cond8 = phi i32 [ 0, %cond.true5 ], [ 0, %cond.false6 ], !dbg !3893
  %6 = load i8*, i8** %str.addr, align 8, !dbg !3894
  %7 = load i8, i8* %6, align 1, !dbg !3896
  %conv9 = sext i8 %7 to i32, !dbg !3896
  %cmp10 = icmp eq i32 %conv9, 0, !dbg !3897
  br i1 %cmp10, label %if.then, label %if.else14, !dbg !3898

if.then:                                          ; preds = %cond.end7
  %8 = load i32, i32* %quiet.addr, align 4, !dbg !3899
  %tobool12 = icmp ne i32 %8, 0, !dbg !3899
  br i1 %tobool12, label %if.then13, label %if.else, !dbg !3902

if.then13:                                        ; preds = %if.then
  %9 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3903
  call void @get_canonical_qnan(%struct.real_value* %9, i32 0), !dbg !3904
  br label %if.end, !dbg !3904

if.else:                                          ; preds = %if.then
  %10 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3905
  call void @get_canonical_snan(%struct.real_value* %10, i32 0), !dbg !3906
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then13
  br label %if.end77, !dbg !3907

if.else14:                                        ; preds = %cond.end7
  call void @llvm.dbg.declare(metadata i32* %base, metadata !3908, metadata !DIExpression()), !dbg !3910
  store i32 10, i32* %base, align 4, !dbg !3910
  call void @llvm.dbg.declare(metadata i32* %d, metadata !3911, metadata !DIExpression()), !dbg !3912
  %11 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3913
  %12 = bitcast %struct.real_value* %11 to i8*, !dbg !3914
  call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 32, i1 false), !dbg !3914
  %13 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3915
  %14 = bitcast %struct.real_value* %13 to i32*, !dbg !3916
  %bf.load = load i32, i32* %14, align 8, !dbg !3917
  %bf.clear = and i32 %bf.load, -4, !dbg !3917
  %bf.set = or i32 %bf.clear, 3, !dbg !3917
  store i32 %bf.set, i32* %14, align 8, !dbg !3917
  br label %while.cond, !dbg !3918

while.cond:                                       ; preds = %while.body, %if.else14
  %15 = load i8*, i8** %str.addr, align 8, !dbg !3919
  %16 = load i8, i8* %15, align 1, !dbg !3919
  %conv15 = sext i8 %16 to i32, !dbg !3919
  %and = and i32 %conv15, 255, !dbg !3919
  %idxprom16 = sext i32 %and to i64, !dbg !3919
  %arrayidx17 = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom16, !dbg !3919
  %17 = load i16, i16* %arrayidx17, align 2, !dbg !3919
  %conv18 = zext i16 %17 to i32, !dbg !3919
  %and19 = and i32 %conv18, 64, !dbg !3919
  %tobool20 = icmp ne i32 %and19, 0, !dbg !3918
  br i1 %tobool20, label %while.body, label %while.end, !dbg !3918

while.body:                                       ; preds = %while.cond
  %18 = load i8*, i8** %str.addr, align 8, !dbg !3920
  %incdec.ptr = getelementptr inbounds i8, i8* %18, i32 1, !dbg !3920
  store i8* %incdec.ptr, i8** %str.addr, align 8, !dbg !3920
  br label %while.cond, !dbg !3918, !llvm.loop !3921

while.end:                                        ; preds = %while.cond
  %19 = load i8*, i8** %str.addr, align 8, !dbg !3922
  %20 = load i8, i8* %19, align 1, !dbg !3924
  %conv21 = sext i8 %20 to i32, !dbg !3924
  %cmp22 = icmp eq i32 %conv21, 45, !dbg !3925
  br i1 %cmp22, label %if.then24, label %if.else26, !dbg !3926

if.then24:                                        ; preds = %while.end
  %21 = load i8*, i8** %str.addr, align 8, !dbg !3927
  %incdec.ptr25 = getelementptr inbounds i8, i8* %21, i32 1, !dbg !3927
  store i8* %incdec.ptr25, i8** %str.addr, align 8, !dbg !3927
  br label %if.end33, !dbg !3928

if.else26:                                        ; preds = %while.end
  %22 = load i8*, i8** %str.addr, align 8, !dbg !3929
  %23 = load i8, i8* %22, align 1, !dbg !3931
  %conv27 = sext i8 %23 to i32, !dbg !3931
  %cmp28 = icmp eq i32 %conv27, 43, !dbg !3932
  br i1 %cmp28, label %if.then30, label %if.end32, !dbg !3933

if.then30:                                        ; preds = %if.else26
  %24 = load i8*, i8** %str.addr, align 8, !dbg !3934
  %incdec.ptr31 = getelementptr inbounds i8, i8* %24, i32 1, !dbg !3934
  store i8* %incdec.ptr31, i8** %str.addr, align 8, !dbg !3934
  br label %if.end32, !dbg !3935

if.end32:                                         ; preds = %if.then30, %if.else26
  br label %if.end33

if.end33:                                         ; preds = %if.end32, %if.then24
  %25 = load i8*, i8** %str.addr, align 8, !dbg !3936
  %26 = load i8, i8* %25, align 1, !dbg !3938
  %conv34 = sext i8 %26 to i32, !dbg !3938
  %cmp35 = icmp eq i32 %conv34, 48, !dbg !3939
  br i1 %cmp35, label %if.then37, label %if.end49, !dbg !3940

if.then37:                                        ; preds = %if.end33
  %27 = load i8*, i8** %str.addr, align 8, !dbg !3941
  %incdec.ptr38 = getelementptr inbounds i8, i8* %27, i32 1, !dbg !3941
  store i8* %incdec.ptr38, i8** %str.addr, align 8, !dbg !3941
  %28 = load i8*, i8** %str.addr, align 8, !dbg !3943
  %29 = load i8, i8* %28, align 1, !dbg !3945
  %conv39 = sext i8 %29 to i32, !dbg !3945
  %cmp40 = icmp eq i32 %conv39, 120, !dbg !3946
  br i1 %cmp40, label %if.then45, label %lor.lhs.false, !dbg !3947

lor.lhs.false:                                    ; preds = %if.then37
  %30 = load i8*, i8** %str.addr, align 8, !dbg !3948
  %31 = load i8, i8* %30, align 1, !dbg !3949
  %conv42 = sext i8 %31 to i32, !dbg !3949
  %cmp43 = icmp eq i32 %conv42, 88, !dbg !3950
  br i1 %cmp43, label %if.then45, label %if.else47, !dbg !3951

if.then45:                                        ; preds = %lor.lhs.false, %if.then37
  store i32 16, i32* %base, align 4, !dbg !3952
  %32 = load i8*, i8** %str.addr, align 8, !dbg !3954
  %incdec.ptr46 = getelementptr inbounds i8, i8* %32, i32 1, !dbg !3954
  store i8* %incdec.ptr46, i8** %str.addr, align 8, !dbg !3954
  br label %if.end48, !dbg !3955

if.else47:                                        ; preds = %lor.lhs.false
  store i32 8, i32* %base, align 4, !dbg !3956
  br label %if.end48

if.end48:                                         ; preds = %if.else47, %if.then45
  br label %if.end49, !dbg !3957

if.end49:                                         ; preds = %if.end48, %if.end33
  br label %while.cond50, !dbg !3958

while.cond50:                                     ; preds = %sw.epilog, %if.end49
  %33 = load i8*, i8** %str.addr, align 8, !dbg !3959
  %34 = load i8, i8* %33, align 1, !dbg !3959
  %idxprom51 = zext i8 %34 to i64, !dbg !3959
  %arrayidx52 = getelementptr inbounds [256 x i8], [256 x i8]* @_hex_value, i64 0, i64 %idxprom51, !dbg !3959
  %35 = load i8, i8* %arrayidx52, align 1, !dbg !3959
  %conv53 = zext i8 %35 to i32, !dbg !3959
  store i32 %conv53, i32* %d, align 4, !dbg !3960
  %36 = load i32, i32* %base, align 4, !dbg !3961
  %cmp54 = icmp slt i32 %conv53, %36, !dbg !3962
  br i1 %cmp54, label %while.body56, label %while.end63, !dbg !3958

while.body56:                                     ; preds = %while.cond50
  call void @llvm.dbg.declare(metadata %struct.real_value* %u, metadata !3963, metadata !DIExpression()), !dbg !3965
  %37 = load i32, i32* %base, align 4, !dbg !3966
  switch i32 %37, label %sw.default [
    i32 8, label %sw.bb
    i32 16, label %sw.bb57
    i32 10, label %sw.bb58
  ], !dbg !3967

sw.bb:                                            ; preds = %while.body56
  %38 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3968
  %39 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3970
  call void @lshift_significand(%struct.real_value* %38, %struct.real_value* %39, i32 3), !dbg !3971
  br label %sw.epilog, !dbg !3972

sw.bb57:                                          ; preds = %while.body56
  %40 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3973
  %41 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3974
  call void @lshift_significand(%struct.real_value* %40, %struct.real_value* %41, i32 4), !dbg !3975
  br label %sw.epilog, !dbg !3976

sw.bb58:                                          ; preds = %while.body56
  %42 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3977
  call void @lshift_significand_1(%struct.real_value* %u, %struct.real_value* %42), !dbg !3978
  %43 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3979
  %44 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3980
  call void @lshift_significand(%struct.real_value* %43, %struct.real_value* %44, i32 3), !dbg !3981
  %45 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3982
  %46 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3983
  %call = call zeroext i8 @add_significands(%struct.real_value* %45, %struct.real_value* %46, %struct.real_value* %u), !dbg !3984
  br label %sw.epilog, !dbg !3985

sw.default:                                       ; preds = %while.body56
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 2521, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3986
  br label %sw.epilog, !dbg !3987

sw.epilog:                                        ; preds = %sw.default, %sw.bb58, %sw.bb57, %sw.bb
  call void @get_zero(%struct.real_value* %u, i32 0), !dbg !3988
  %47 = load i32, i32* %d, align 4, !dbg !3989
  %conv59 = sext i32 %47 to i64, !dbg !3989
  %sig = getelementptr inbounds %struct.real_value, %struct.real_value* %u, i32 0, i32 1, !dbg !3990
  %arrayidx60 = getelementptr inbounds [3 x i64], [3 x i64]* %sig, i64 0, i64 0, !dbg !3991
  store i64 %conv59, i64* %arrayidx60, align 8, !dbg !3992
  %48 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3993
  %49 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !3994
  %call61 = call zeroext i8 @add_significands(%struct.real_value* %48, %struct.real_value* %49, %struct.real_value* %u), !dbg !3995
  %50 = load i8*, i8** %str.addr, align 8, !dbg !3996
  %incdec.ptr62 = getelementptr inbounds i8, i8* %50, i32 1, !dbg !3996
  store i8* %incdec.ptr62, i8** %str.addr, align 8, !dbg !3996
  br label %while.cond50, !dbg !3958, !llvm.loop !3997

while.end63:                                      ; preds = %while.cond50
  %51 = load i8*, i8** %str.addr, align 8, !dbg !3999
  %52 = load i8, i8* %51, align 1, !dbg !4001
  %conv64 = sext i8 %52 to i32, !dbg !4001
  %cmp65 = icmp ne i32 %conv64, 0, !dbg !4002
  br i1 %cmp65, label %if.then67, label %if.end68, !dbg !4003

if.then67:                                        ; preds = %while.end63
  store i8 0, i8* %retval, align 1, !dbg !4004
  br label %return, !dbg !4004

if.end68:                                         ; preds = %while.end63
  %53 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4005
  %54 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4006
  %55 = load %struct.real_format*, %struct.real_format** %fmt, align 8, !dbg !4007
  %pnan = getelementptr inbounds %struct.real_format, %struct.real_format* %55, i32 0, i32 4, !dbg !4008
  %56 = load i32, i32* %pnan, align 8, !dbg !4008
  %sub69 = sub nsw i32 192, %56, !dbg !4009
  call void @lshift_significand(%struct.real_value* %53, %struct.real_value* %54, i32 %sub69), !dbg !4010
  %57 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4011
  %sig70 = getelementptr inbounds %struct.real_value, %struct.real_value* %57, i32 0, i32 1, !dbg !4012
  %arrayidx71 = getelementptr inbounds [3 x i64], [3 x i64]* %sig70, i64 0, i64 2, !dbg !4011
  %58 = load i64, i64* %arrayidx71, align 8, !dbg !4013
  %and72 = and i64 %58, 9223372036854775807, !dbg !4013
  store i64 %and72, i64* %arrayidx71, align 8, !dbg !4013
  %59 = load i32, i32* %quiet.addr, align 4, !dbg !4014
  %tobool73 = icmp ne i32 %59, 0, !dbg !4015
  %lnot = xor i1 %tobool73, true, !dbg !4015
  %lnot.ext = zext i1 %lnot to i32, !dbg !4015
  %60 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4016
  %61 = bitcast %struct.real_value* %60 to i32*, !dbg !4017
  %bf.load74 = load i32, i32* %61, align 8, !dbg !4018
  %bf.value = and i32 %lnot.ext, 1, !dbg !4018
  %bf.shl = shl i32 %bf.value, 4, !dbg !4018
  %bf.clear75 = and i32 %bf.load74, -17, !dbg !4018
  %bf.set76 = or i32 %bf.clear75, %bf.shl, !dbg !4018
  store i32 %bf.set76, i32* %61, align 8, !dbg !4018
  br label %if.end77

if.end77:                                         ; preds = %if.end68, %if.end
  store i8 1, i8* %retval, align 1, !dbg !4019
  br label %return, !dbg !4019

return:                                           ; preds = %if.end77, %if.then67
  %62 = load i8, i8* %retval, align 1, !dbg !4020
  ret i8 %62, !dbg !4020
}

; Function Attrs: noinline nounwind uwtable
define internal void @lshift_significand(%struct.real_value* %r, %struct.real_value* %a, i32 %n) #0 !dbg !4021 {
entry:
  %r.addr = alloca %struct.real_value*, align 8
  %a.addr = alloca %struct.real_value*, align 8
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %ofs = alloca i32, align 4
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !4022, metadata !DIExpression()), !dbg !4023
  store %struct.real_value* %a, %struct.real_value** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %a.addr, metadata !4024, metadata !DIExpression()), !dbg !4025
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !4026, metadata !DIExpression()), !dbg !4027
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4028, metadata !DIExpression()), !dbg !4029
  call void @llvm.dbg.declare(metadata i32* %ofs, metadata !4030, metadata !DIExpression()), !dbg !4031
  %0 = load i32, i32* %n.addr, align 4, !dbg !4032
  %div = udiv i32 %0, 64, !dbg !4033
  store i32 %div, i32* %ofs, align 4, !dbg !4031
  %1 = load i32, i32* %n.addr, align 4, !dbg !4034
  %and = and i32 %1, 63, !dbg !4034
  store i32 %and, i32* %n.addr, align 4, !dbg !4034
  %2 = load i32, i32* %n.addr, align 4, !dbg !4035
  %cmp = icmp eq i32 %2, 0, !dbg !4037
  br i1 %cmp, label %if.then, label %if.else, !dbg !4038

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !4039
  br label %for.cond, !dbg !4042

for.cond:                                         ; preds = %for.inc, %if.then
  %3 = load i32, i32* %ofs, align 4, !dbg !4043
  %4 = load i32, i32* %i, align 4, !dbg !4045
  %add = add i32 %3, %4, !dbg !4046
  %cmp1 = icmp ult i32 %add, 3, !dbg !4047
  br i1 %cmp1, label %for.body, label %for.end, !dbg !4048

for.body:                                         ; preds = %for.cond
  %5 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !4049
  %sig = getelementptr inbounds %struct.real_value, %struct.real_value* %5, i32 0, i32 1, !dbg !4050
  %6 = load i32, i32* %i, align 4, !dbg !4051
  %sub = sub i32 2, %6, !dbg !4052
  %7 = load i32, i32* %ofs, align 4, !dbg !4053
  %sub2 = sub i32 %sub, %7, !dbg !4054
  %idxprom = zext i32 %sub2 to i64, !dbg !4049
  %arrayidx = getelementptr inbounds [3 x i64], [3 x i64]* %sig, i64 0, i64 %idxprom, !dbg !4049
  %8 = load i64, i64* %arrayidx, align 8, !dbg !4049
  %9 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4055
  %sig3 = getelementptr inbounds %struct.real_value, %struct.real_value* %9, i32 0, i32 1, !dbg !4056
  %10 = load i32, i32* %i, align 4, !dbg !4057
  %sub4 = sub i32 2, %10, !dbg !4058
  %idxprom5 = zext i32 %sub4 to i64, !dbg !4055
  %arrayidx6 = getelementptr inbounds [3 x i64], [3 x i64]* %sig3, i64 0, i64 %idxprom5, !dbg !4055
  store i64 %8, i64* %arrayidx6, align 8, !dbg !4059
  br label %for.inc, !dbg !4055

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4, !dbg !4060
  %inc = add i32 %11, 1, !dbg !4060
  store i32 %inc, i32* %i, align 4, !dbg !4060
  br label %for.cond, !dbg !4061, !llvm.loop !4062

for.end:                                          ; preds = %for.cond
  br label %for.cond7, !dbg !4064

for.cond7:                                        ; preds = %for.inc14, %for.end
  %12 = load i32, i32* %i, align 4, !dbg !4065
  %cmp8 = icmp ult i32 %12, 3, !dbg !4068
  br i1 %cmp8, label %for.body9, label %for.end16, !dbg !4069

for.body9:                                        ; preds = %for.cond7
  %13 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4070
  %sig10 = getelementptr inbounds %struct.real_value, %struct.real_value* %13, i32 0, i32 1, !dbg !4071
  %14 = load i32, i32* %i, align 4, !dbg !4072
  %sub11 = sub i32 2, %14, !dbg !4073
  %idxprom12 = zext i32 %sub11 to i64, !dbg !4070
  %arrayidx13 = getelementptr inbounds [3 x i64], [3 x i64]* %sig10, i64 0, i64 %idxprom12, !dbg !4070
  store i64 0, i64* %arrayidx13, align 8, !dbg !4074
  br label %for.inc14, !dbg !4070

for.inc14:                                        ; preds = %for.body9
  %15 = load i32, i32* %i, align 4, !dbg !4075
  %inc15 = add i32 %15, 1, !dbg !4075
  store i32 %inc15, i32* %i, align 4, !dbg !4075
  br label %for.cond7, !dbg !4076, !llvm.loop !4077

for.end16:                                        ; preds = %for.cond7
  br label %if.end, !dbg !4079

if.else:                                          ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !4080
  br label %for.cond17, !dbg !4082

for.cond17:                                       ; preds = %for.inc46, %if.else
  %16 = load i32, i32* %i, align 4, !dbg !4083
  %cmp18 = icmp ult i32 %16, 3, !dbg !4085
  br i1 %cmp18, label %for.body19, label %for.end48, !dbg !4086

for.body19:                                       ; preds = %for.cond17
  %17 = load i32, i32* %ofs, align 4, !dbg !4087
  %18 = load i32, i32* %i, align 4, !dbg !4089
  %add20 = add i32 %17, %18, !dbg !4090
  %cmp21 = icmp uge i32 %add20, 3, !dbg !4091
  br i1 %cmp21, label %cond.true, label %cond.false, !dbg !4087

cond.true:                                        ; preds = %for.body19
  br label %cond.end, !dbg !4087

cond.false:                                       ; preds = %for.body19
  %19 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !4092
  %sig22 = getelementptr inbounds %struct.real_value, %struct.real_value* %19, i32 0, i32 1, !dbg !4093
  %20 = load i32, i32* %i, align 4, !dbg !4094
  %sub23 = sub i32 2, %20, !dbg !4095
  %21 = load i32, i32* %ofs, align 4, !dbg !4096
  %sub24 = sub i32 %sub23, %21, !dbg !4097
  %idxprom25 = zext i32 %sub24 to i64, !dbg !4092
  %arrayidx26 = getelementptr inbounds [3 x i64], [3 x i64]* %sig22, i64 0, i64 %idxprom25, !dbg !4092
  %22 = load i64, i64* %arrayidx26, align 8, !dbg !4092
  br label %cond.end, !dbg !4087

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 0, %cond.true ], [ %22, %cond.false ], !dbg !4087
  %23 = load i32, i32* %n.addr, align 4, !dbg !4098
  %sh_prom = zext i32 %23 to i64, !dbg !4099
  %shl = shl i64 %cond, %sh_prom, !dbg !4099
  %24 = load i32, i32* %ofs, align 4, !dbg !4100
  %25 = load i32, i32* %i, align 4, !dbg !4101
  %add27 = add i32 %24, %25, !dbg !4102
  %add28 = add i32 %add27, 1, !dbg !4103
  %cmp29 = icmp uge i32 %add28, 3, !dbg !4104
  br i1 %cmp29, label %cond.true30, label %cond.false31, !dbg !4100

cond.true30:                                      ; preds = %cond.end
  br label %cond.end38, !dbg !4100

cond.false31:                                     ; preds = %cond.end
  %26 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !4105
  %sig32 = getelementptr inbounds %struct.real_value, %struct.real_value* %26, i32 0, i32 1, !dbg !4106
  %27 = load i32, i32* %i, align 4, !dbg !4107
  %sub33 = sub i32 2, %27, !dbg !4108
  %28 = load i32, i32* %ofs, align 4, !dbg !4109
  %sub34 = sub i32 %sub33, %28, !dbg !4110
  %sub35 = sub i32 %sub34, 1, !dbg !4111
  %idxprom36 = zext i32 %sub35 to i64, !dbg !4105
  %arrayidx37 = getelementptr inbounds [3 x i64], [3 x i64]* %sig32, i64 0, i64 %idxprom36, !dbg !4105
  %29 = load i64, i64* %arrayidx37, align 8, !dbg !4105
  br label %cond.end38, !dbg !4100

cond.end38:                                       ; preds = %cond.false31, %cond.true30
  %cond39 = phi i64 [ 0, %cond.true30 ], [ %29, %cond.false31 ], !dbg !4100
  %30 = load i32, i32* %n.addr, align 4, !dbg !4112
  %sub40 = sub i32 64, %30, !dbg !4113
  %sh_prom41 = zext i32 %sub40 to i64, !dbg !4114
  %shr = lshr i64 %cond39, %sh_prom41, !dbg !4114
  %or = or i64 %shl, %shr, !dbg !4115
  %31 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4116
  %sig42 = getelementptr inbounds %struct.real_value, %struct.real_value* %31, i32 0, i32 1, !dbg !4117
  %32 = load i32, i32* %i, align 4, !dbg !4118
  %sub43 = sub i32 2, %32, !dbg !4119
  %idxprom44 = zext i32 %sub43 to i64, !dbg !4116
  %arrayidx45 = getelementptr inbounds [3 x i64], [3 x i64]* %sig42, i64 0, i64 %idxprom44, !dbg !4116
  store i64 %or, i64* %arrayidx45, align 8, !dbg !4120
  br label %for.inc46, !dbg !4121

for.inc46:                                        ; preds = %cond.end38
  %33 = load i32, i32* %i, align 4, !dbg !4122
  %inc47 = add i32 %33, 1, !dbg !4122
  store i32 %inc47, i32* %i, align 4, !dbg !4122
  br label %for.cond17, !dbg !4123, !llvm.loop !4124

for.end48:                                        ; preds = %for.cond17
  br label %if.end

if.end:                                           ; preds = %for.end48, %for.end16
  ret void, !dbg !4126
}

; Function Attrs: noinline nounwind uwtable
define internal void @lshift_significand_1(%struct.real_value* %r, %struct.real_value* %a) #0 !dbg !4127 {
entry:
  %r.addr = alloca %struct.real_value*, align 8
  %a.addr = alloca %struct.real_value*, align 8
  %i = alloca i32, align 4
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !4128, metadata !DIExpression()), !dbg !4129
  store %struct.real_value* %a, %struct.real_value** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %a.addr, metadata !4130, metadata !DIExpression()), !dbg !4131
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4132, metadata !DIExpression()), !dbg !4133
  store i32 2, i32* %i, align 4, !dbg !4134
  br label %for.cond, !dbg !4136

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !4137
  %cmp = icmp ugt i32 %0, 0, !dbg !4139
  br i1 %cmp, label %for.body, label %for.end, !dbg !4140

for.body:                                         ; preds = %for.cond
  %1 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !4141
  %sig = getelementptr inbounds %struct.real_value, %struct.real_value* %1, i32 0, i32 1, !dbg !4142
  %2 = load i32, i32* %i, align 4, !dbg !4143
  %idxprom = zext i32 %2 to i64, !dbg !4141
  %arrayidx = getelementptr inbounds [3 x i64], [3 x i64]* %sig, i64 0, i64 %idxprom, !dbg !4141
  %3 = load i64, i64* %arrayidx, align 8, !dbg !4141
  %shl = shl i64 %3, 1, !dbg !4144
  %4 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !4145
  %sig1 = getelementptr inbounds %struct.real_value, %struct.real_value* %4, i32 0, i32 1, !dbg !4146
  %5 = load i32, i32* %i, align 4, !dbg !4147
  %sub = sub i32 %5, 1, !dbg !4148
  %idxprom2 = zext i32 %sub to i64, !dbg !4145
  %arrayidx3 = getelementptr inbounds [3 x i64], [3 x i64]* %sig1, i64 0, i64 %idxprom2, !dbg !4145
  %6 = load i64, i64* %arrayidx3, align 8, !dbg !4145
  %shr = lshr i64 %6, 63, !dbg !4149
  %or = or i64 %shl, %shr, !dbg !4150
  %7 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4151
  %sig4 = getelementptr inbounds %struct.real_value, %struct.real_value* %7, i32 0, i32 1, !dbg !4152
  %8 = load i32, i32* %i, align 4, !dbg !4153
  %idxprom5 = zext i32 %8 to i64, !dbg !4151
  %arrayidx6 = getelementptr inbounds [3 x i64], [3 x i64]* %sig4, i64 0, i64 %idxprom5, !dbg !4151
  store i64 %or, i64* %arrayidx6, align 8, !dbg !4154
  br label %for.inc, !dbg !4151

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4, !dbg !4155
  %dec = add i32 %9, -1, !dbg !4155
  store i32 %dec, i32* %i, align 4, !dbg !4155
  br label %for.cond, !dbg !4156, !llvm.loop !4157

for.end:                                          ; preds = %for.cond
  %10 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !4159
  %sig7 = getelementptr inbounds %struct.real_value, %struct.real_value* %10, i32 0, i32 1, !dbg !4160
  %arrayidx8 = getelementptr inbounds [3 x i64], [3 x i64]* %sig7, i64 0, i64 0, !dbg !4159
  %11 = load i64, i64* %arrayidx8, align 8, !dbg !4159
  %shl9 = shl i64 %11, 1, !dbg !4161
  %12 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4162
  %sig10 = getelementptr inbounds %struct.real_value, %struct.real_value* %12, i32 0, i32 1, !dbg !4163
  %arrayidx11 = getelementptr inbounds [3 x i64], [3 x i64]* %sig10, i64 0, i64 0, !dbg !4162
  store i64 %shl9, i64* %arrayidx11, align 8, !dbg !4164
  ret void, !dbg !4165
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @add_significands(%struct.real_value* %r, %struct.real_value* %a, %struct.real_value* %b) #0 !dbg !4166 {
entry:
  %r.addr = alloca %struct.real_value*, align 8
  %a.addr = alloca %struct.real_value*, align 8
  %b.addr = alloca %struct.real_value*, align 8
  %carry = alloca i8, align 1
  %i = alloca i32, align 4
  %ai = alloca i64, align 8
  %ri = alloca i64, align 8
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !4167, metadata !DIExpression()), !dbg !4168
  store %struct.real_value* %a, %struct.real_value** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %a.addr, metadata !4169, metadata !DIExpression()), !dbg !4170
  store %struct.real_value* %b, %struct.real_value** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %b.addr, metadata !4171, metadata !DIExpression()), !dbg !4172
  call void @llvm.dbg.declare(metadata i8* %carry, metadata !4173, metadata !DIExpression()), !dbg !4174
  store i8 0, i8* %carry, align 1, !dbg !4174
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4175, metadata !DIExpression()), !dbg !4176
  store i32 0, i32* %i, align 4, !dbg !4177
  br label %for.cond, !dbg !4179

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !4180
  %cmp = icmp slt i32 %0, 3, !dbg !4182
  br i1 %cmp, label %for.body, label %for.end, !dbg !4183

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i64* %ai, metadata !4184, metadata !DIExpression()), !dbg !4186
  %1 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !4187
  %sig = getelementptr inbounds %struct.real_value, %struct.real_value* %1, i32 0, i32 1, !dbg !4188
  %2 = load i32, i32* %i, align 4, !dbg !4189
  %idxprom = sext i32 %2 to i64, !dbg !4187
  %arrayidx = getelementptr inbounds [3 x i64], [3 x i64]* %sig, i64 0, i64 %idxprom, !dbg !4187
  %3 = load i64, i64* %arrayidx, align 8, !dbg !4187
  store i64 %3, i64* %ai, align 8, !dbg !4186
  call void @llvm.dbg.declare(metadata i64* %ri, metadata !4190, metadata !DIExpression()), !dbg !4191
  %4 = load i64, i64* %ai, align 8, !dbg !4192
  %5 = load %struct.real_value*, %struct.real_value** %b.addr, align 8, !dbg !4193
  %sig1 = getelementptr inbounds %struct.real_value, %struct.real_value* %5, i32 0, i32 1, !dbg !4194
  %6 = load i32, i32* %i, align 4, !dbg !4195
  %idxprom2 = sext i32 %6 to i64, !dbg !4193
  %arrayidx3 = getelementptr inbounds [3 x i64], [3 x i64]* %sig1, i64 0, i64 %idxprom2, !dbg !4193
  %7 = load i64, i64* %arrayidx3, align 8, !dbg !4193
  %add = add i64 %4, %7, !dbg !4196
  store i64 %add, i64* %ri, align 8, !dbg !4191
  %8 = load i8, i8* %carry, align 1, !dbg !4197
  %tobool = icmp ne i8 %8, 0, !dbg !4197
  br i1 %tobool, label %if.then, label %if.else, !dbg !4199

if.then:                                          ; preds = %for.body
  %9 = load i64, i64* %ri, align 8, !dbg !4200
  %10 = load i64, i64* %ai, align 8, !dbg !4202
  %cmp4 = icmp ult i64 %9, %10, !dbg !4203
  %conv = zext i1 %cmp4 to i32, !dbg !4203
  %conv5 = trunc i32 %conv to i8, !dbg !4200
  store i8 %conv5, i8* %carry, align 1, !dbg !4204
  %11 = load i64, i64* %ri, align 8, !dbg !4205
  %inc = add i64 %11, 1, !dbg !4205
  store i64 %inc, i64* %ri, align 8, !dbg !4205
  %cmp6 = icmp eq i64 %inc, 0, !dbg !4206
  %conv7 = zext i1 %cmp6 to i32, !dbg !4206
  %12 = load i8, i8* %carry, align 1, !dbg !4207
  %conv8 = zext i8 %12 to i32, !dbg !4207
  %or = or i32 %conv8, %conv7, !dbg !4207
  %conv9 = trunc i32 %or to i8, !dbg !4207
  store i8 %conv9, i8* %carry, align 1, !dbg !4207
  br label %if.end, !dbg !4208

if.else:                                          ; preds = %for.body
  %13 = load i64, i64* %ri, align 8, !dbg !4209
  %14 = load i64, i64* %ai, align 8, !dbg !4210
  %cmp10 = icmp ult i64 %13, %14, !dbg !4211
  %conv11 = zext i1 %cmp10 to i32, !dbg !4211
  %conv12 = trunc i32 %conv11 to i8, !dbg !4209
  store i8 %conv12, i8* %carry, align 1, !dbg !4212
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %15 = load i64, i64* %ri, align 8, !dbg !4213
  %16 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4214
  %sig13 = getelementptr inbounds %struct.real_value, %struct.real_value* %16, i32 0, i32 1, !dbg !4215
  %17 = load i32, i32* %i, align 4, !dbg !4216
  %idxprom14 = sext i32 %17 to i64, !dbg !4214
  %arrayidx15 = getelementptr inbounds [3 x i64], [3 x i64]* %sig13, i64 0, i64 %idxprom14, !dbg !4214
  store i64 %15, i64* %arrayidx15, align 8, !dbg !4217
  br label %for.inc, !dbg !4218

for.inc:                                          ; preds = %if.end
  %18 = load i32, i32* %i, align 4, !dbg !4219
  %inc16 = add nsw i32 %18, 1, !dbg !4219
  store i32 %inc16, i32* %i, align 4, !dbg !4219
  br label %for.cond, !dbg !4220, !llvm.loop !4221

for.end:                                          ; preds = %for.cond
  %19 = load i8, i8* %carry, align 1, !dbg !4223
  ret i8 %19, !dbg !4224
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @real_maxval(%struct.real_value* %r, i32 %sign, i32 %mode) #0 !dbg !4225 {
entry:
  %r.addr = alloca %struct.real_value*, align 8
  %sign.addr = alloca i32, align 4
  %mode.addr = alloca i32, align 4
  %fmt = alloca %struct.real_format*, align 8
  %np2 = alloca i32, align 4
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !4228, metadata !DIExpression()), !dbg !4229
  store i32 %sign, i32* %sign.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %sign.addr, metadata !4230, metadata !DIExpression()), !dbg !4231
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !4232, metadata !DIExpression()), !dbg !4233
  call void @llvm.dbg.declare(metadata %struct.real_format** %fmt, metadata !4234, metadata !DIExpression()), !dbg !4235
  call void @llvm.dbg.declare(metadata i32* %np2, metadata !4236, metadata !DIExpression()), !dbg !4237
  %0 = load i32, i32* %mode.addr, align 4, !dbg !4238
  %idxprom = zext i32 %0 to i64, !dbg !4238
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !4238
  %1 = load i8, i8* %arrayidx, align 1, !dbg !4238
  %conv = zext i8 %1 to i32, !dbg !4238
  %cmp = icmp eq i32 %conv, 9, !dbg !4238
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !4238

cond.true:                                        ; preds = %entry
  %2 = load i32, i32* %mode.addr, align 4, !dbg !4238
  %sub = sub i32 %2, 42, !dbg !4238
  %add = add i32 %sub, 4, !dbg !4238
  br label %cond.end, !dbg !4238

cond.false:                                       ; preds = %entry
  %3 = load i32, i32* %mode.addr, align 4, !dbg !4238
  %sub2 = sub i32 %3, 38, !dbg !4238
  br label %cond.end, !dbg !4238

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add, %cond.true ], [ %sub2, %cond.false ], !dbg !4238
  %idxprom3 = zext i32 %cond to i64, !dbg !4238
  %arrayidx4 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom3, !dbg !4238
  %4 = load %struct.real_format*, %struct.real_format** %arrayidx4, align 8, !dbg !4238
  store %struct.real_format* %4, %struct.real_format** %fmt, align 8, !dbg !4239
  %5 = load %struct.real_format*, %struct.real_format** %fmt, align 8, !dbg !4240
  %tobool = icmp ne %struct.real_format* %5, null, !dbg !4240
  br i1 %tobool, label %cond.false6, label %cond.true5, !dbg !4240

cond.true5:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 2559, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4240
  br label %cond.end7, !dbg !4240

cond.false6:                                      ; preds = %cond.end
  br label %cond.end7, !dbg !4240

cond.end7:                                        ; preds = %cond.false6, %cond.true5
  %cond8 = phi i32 [ 0, %cond.true5 ], [ 0, %cond.false6 ], !dbg !4240
  %6 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4241
  %7 = bitcast %struct.real_value* %6 to i8*, !dbg !4242
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 32, i1 false), !dbg !4242
  %8 = load %struct.real_format*, %struct.real_format** %fmt, align 8, !dbg !4243
  %b = getelementptr inbounds %struct.real_format, %struct.real_format* %8, i32 0, i32 2, !dbg !4245
  %9 = load i32, i32* %b, align 8, !dbg !4245
  %cmp9 = icmp eq i32 %9, 10, !dbg !4246
  br i1 %cmp9, label %if.then, label %if.else, !dbg !4247

if.then:                                          ; preds = %cond.end7
  %10 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4248
  %11 = load i32, i32* %sign.addr, align 4, !dbg !4249
  %12 = load i32, i32* %mode.addr, align 4, !dbg !4250
  call void @decimal_real_maxval(%struct.real_value* %10, i32 %11, i32 %12), !dbg !4251
  br label %if.end27, !dbg !4251

if.else:                                          ; preds = %cond.end7
  %13 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4252
  %14 = bitcast %struct.real_value* %13 to i32*, !dbg !4254
  %bf.load = load i32, i32* %14, align 8, !dbg !4255
  %bf.clear = and i32 %bf.load, -4, !dbg !4255
  %bf.set = or i32 %bf.clear, 1, !dbg !4255
  store i32 %bf.set, i32* %14, align 8, !dbg !4255
  %15 = load i32, i32* %sign.addr, align 4, !dbg !4256
  %16 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4257
  %17 = bitcast %struct.real_value* %16 to i32*, !dbg !4258
  %bf.load11 = load i32, i32* %17, align 8, !dbg !4259
  %bf.value = and i32 %15, 1, !dbg !4259
  %bf.shl = shl i32 %bf.value, 3, !dbg !4259
  %bf.clear12 = and i32 %bf.load11, -9, !dbg !4259
  %bf.set13 = or i32 %bf.clear12, %bf.shl, !dbg !4259
  store i32 %bf.set13, i32* %17, align 8, !dbg !4259
  %18 = load %struct.real_format*, %struct.real_format** %fmt, align 8, !dbg !4260
  %emax = getelementptr inbounds %struct.real_format, %struct.real_format* %18, i32 0, i32 6, !dbg !4260
  %19 = load i32, i32* %emax, align 8, !dbg !4260
  %and = and i32 %19, 67108863, !dbg !4260
  %20 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4260
  %21 = bitcast %struct.real_value* %20 to i32*, !dbg !4260
  %bf.load14 = load i32, i32* %21, align 8, !dbg !4260
  %bf.value15 = and i32 %and, 67108863, !dbg !4260
  %bf.shl16 = shl i32 %bf.value15, 6, !dbg !4260
  %bf.clear17 = and i32 %bf.load14, 63, !dbg !4260
  %bf.set18 = or i32 %bf.clear17, %bf.shl16, !dbg !4260
  store i32 %bf.set18, i32* %21, align 8, !dbg !4260
  %22 = load %struct.real_format*, %struct.real_format** %fmt, align 8, !dbg !4261
  %p = getelementptr inbounds %struct.real_format, %struct.real_format* %22, i32 0, i32 3, !dbg !4262
  %23 = load i32, i32* %p, align 4, !dbg !4262
  %sub19 = sub nsw i32 192, %23, !dbg !4263
  store i32 %sub19, i32* %np2, align 4, !dbg !4264
  %24 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4265
  %sig = getelementptr inbounds %struct.real_value, %struct.real_value* %24, i32 0, i32 1, !dbg !4266
  %arraydecay = getelementptr inbounds [3 x i64], [3 x i64]* %sig, i64 0, i64 0, !dbg !4267
  %25 = bitcast i64* %arraydecay to i8*, !dbg !4267
  call void @llvm.memset.p0i8.i64(i8* align 8 %25, i8 -1, i64 24, i1 false), !dbg !4267
  %26 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4268
  %27 = load i32, i32* %np2, align 4, !dbg !4269
  call void @clear_significand_below(%struct.real_value* %26, i32 %27), !dbg !4270
  %28 = load %struct.real_format*, %struct.real_format** %fmt, align 8, !dbg !4271
  %pnan = getelementptr inbounds %struct.real_format, %struct.real_format* %28, i32 0, i32 4, !dbg !4273
  %29 = load i32, i32* %pnan, align 8, !dbg !4273
  %30 = load %struct.real_format*, %struct.real_format** %fmt, align 8, !dbg !4274
  %p20 = getelementptr inbounds %struct.real_format, %struct.real_format* %30, i32 0, i32 3, !dbg !4275
  %31 = load i32, i32* %p20, align 4, !dbg !4275
  %cmp21 = icmp slt i32 %29, %31, !dbg !4276
  br i1 %cmp21, label %if.then23, label %if.end, !dbg !4277

if.then23:                                        ; preds = %if.else
  %32 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4278
  %33 = load %struct.real_format*, %struct.real_format** %fmt, align 8, !dbg !4279
  %pnan24 = getelementptr inbounds %struct.real_format, %struct.real_format* %33, i32 0, i32 4, !dbg !4280
  %34 = load i32, i32* %pnan24, align 8, !dbg !4280
  %sub25 = sub nsw i32 192, %34, !dbg !4281
  %sub26 = sub nsw i32 %sub25, 1, !dbg !4282
  call void @clear_significand_bit(%struct.real_value* %32, i32 %sub26), !dbg !4283
  br label %if.end, !dbg !4283

if.end:                                           ; preds = %if.then23, %if.else
  br label %if.end27

if.end27:                                         ; preds = %if.end, %if.then
  ret void, !dbg !4284
}

declare dso_local void @decimal_real_maxval(%struct.real_value*, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @clear_significand_below(%struct.real_value* %r, i32 %n) #0 !dbg !4285 {
entry:
  %r.addr = alloca %struct.real_value*, align 8
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %w = alloca i32, align 4
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !4288, metadata !DIExpression()), !dbg !4289
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !4290, metadata !DIExpression()), !dbg !4291
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4292, metadata !DIExpression()), !dbg !4293
  call void @llvm.dbg.declare(metadata i32* %w, metadata !4294, metadata !DIExpression()), !dbg !4295
  %0 = load i32, i32* %n.addr, align 4, !dbg !4296
  %div = udiv i32 %0, 64, !dbg !4297
  store i32 %div, i32* %w, align 4, !dbg !4295
  store i32 0, i32* %i, align 4, !dbg !4298
  br label %for.cond, !dbg !4300

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4, !dbg !4301
  %2 = load i32, i32* %w, align 4, !dbg !4303
  %cmp = icmp slt i32 %1, %2, !dbg !4304
  br i1 %cmp, label %for.body, label %for.end, !dbg !4305

for.body:                                         ; preds = %for.cond
  %3 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4306
  %sig = getelementptr inbounds %struct.real_value, %struct.real_value* %3, i32 0, i32 1, !dbg !4307
  %4 = load i32, i32* %i, align 4, !dbg !4308
  %idxprom = sext i32 %4 to i64, !dbg !4306
  %arrayidx = getelementptr inbounds [3 x i64], [3 x i64]* %sig, i64 0, i64 %idxprom, !dbg !4306
  store i64 0, i64* %arrayidx, align 8, !dbg !4309
  br label %for.inc, !dbg !4306

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4, !dbg !4310
  %inc = add nsw i32 %5, 1, !dbg !4310
  store i32 %inc, i32* %i, align 4, !dbg !4310
  br label %for.cond, !dbg !4311, !llvm.loop !4312

for.end:                                          ; preds = %for.cond
  %6 = load i32, i32* %n.addr, align 4, !dbg !4314
  %rem = urem i32 %6, 64, !dbg !4315
  %sh_prom = zext i32 %rem to i64, !dbg !4316
  %shl = shl i64 1, %sh_prom, !dbg !4316
  %sub = sub i64 %shl, 1, !dbg !4317
  %neg = xor i64 %sub, -1, !dbg !4318
  %7 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4319
  %sig1 = getelementptr inbounds %struct.real_value, %struct.real_value* %7, i32 0, i32 1, !dbg !4320
  %8 = load i32, i32* %w, align 4, !dbg !4321
  %idxprom2 = sext i32 %8 to i64, !dbg !4319
  %arrayidx3 = getelementptr inbounds [3 x i64], [3 x i64]* %sig1, i64 0, i64 %idxprom2, !dbg !4319
  %9 = load i64, i64* %arrayidx3, align 8, !dbg !4322
  %and = and i64 %9, %neg, !dbg !4322
  store i64 %and, i64* %arrayidx3, align 8, !dbg !4322
  ret void, !dbg !4323
}

; Function Attrs: noinline nounwind uwtable
define internal void @clear_significand_bit(%struct.real_value* %r, i32 %n) #0 !dbg !4324 {
entry:
  %r.addr = alloca %struct.real_value*, align 8
  %n.addr = alloca i32, align 4
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !4325, metadata !DIExpression()), !dbg !4326
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !4327, metadata !DIExpression()), !dbg !4328
  %0 = load i32, i32* %n.addr, align 4, !dbg !4329
  %rem = urem i32 %0, 64, !dbg !4330
  %sh_prom = zext i32 %rem to i64, !dbg !4331
  %shl = shl i64 1, %sh_prom, !dbg !4331
  %neg = xor i64 %shl, -1, !dbg !4332
  %1 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4333
  %sig = getelementptr inbounds %struct.real_value, %struct.real_value* %1, i32 0, i32 1, !dbg !4334
  %2 = load i32, i32* %n.addr, align 4, !dbg !4335
  %div = udiv i32 %2, 64, !dbg !4336
  %idxprom = zext i32 %div to i64, !dbg !4333
  %arrayidx = getelementptr inbounds [3 x i64], [3 x i64]* %sig, i64 0, i64 %idxprom, !dbg !4333
  %3 = load i64, i64* %arrayidx, align 8, !dbg !4337
  %and = and i64 %3, %neg, !dbg !4337
  store i64 %and, i64* %arrayidx, align 8, !dbg !4337
  ret void, !dbg !4338
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @real_2expN(%struct.real_value* %r, i32 %n, i32 %fmode) #0 !dbg !4339 {
entry:
  %r.addr = alloca %struct.real_value*, align 8
  %n.addr = alloca i32, align 4
  %fmode.addr = alloca i32, align 4
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !4340, metadata !DIExpression()), !dbg !4341
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !4342, metadata !DIExpression()), !dbg !4343
  store i32 %fmode, i32* %fmode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fmode.addr, metadata !4344, metadata !DIExpression()), !dbg !4345
  %0 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4346
  %1 = bitcast %struct.real_value* %0 to i8*, !dbg !4347
  call void @llvm.memset.p0i8.i64(i8* align 8 %1, i8 0, i64 32, i1 false), !dbg !4347
  %2 = load i32, i32* %n.addr, align 4, !dbg !4348
  %inc = add nsw i32 %2, 1, !dbg !4348
  store i32 %inc, i32* %n.addr, align 4, !dbg !4348
  %3 = load i32, i32* %n.addr, align 4, !dbg !4349
  %cmp = icmp sgt i32 %3, 33554431, !dbg !4351
  br i1 %cmp, label %if.then, label %if.else, !dbg !4352

if.then:                                          ; preds = %entry
  %4 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4353
  %5 = bitcast %struct.real_value* %4 to i32*, !dbg !4354
  %bf.load = load i32, i32* %5, align 8, !dbg !4355
  %bf.clear = and i32 %bf.load, -4, !dbg !4355
  %bf.set = or i32 %bf.clear, 2, !dbg !4355
  store i32 %bf.set, i32* %5, align 8, !dbg !4355
  br label %if.end10, !dbg !4353

if.else:                                          ; preds = %entry
  %6 = load i32, i32* %n.addr, align 4, !dbg !4356
  %cmp1 = icmp slt i32 %6, -33554431, !dbg !4358
  br i1 %cmp1, label %if.then2, label %if.else3, !dbg !4359

if.then2:                                         ; preds = %if.else
  br label %if.end, !dbg !4359

if.else3:                                         ; preds = %if.else
  %7 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4360
  %8 = bitcast %struct.real_value* %7 to i32*, !dbg !4362
  %bf.load4 = load i32, i32* %8, align 8, !dbg !4363
  %bf.clear5 = and i32 %bf.load4, -4, !dbg !4363
  %bf.set6 = or i32 %bf.clear5, 1, !dbg !4363
  store i32 %bf.set6, i32* %8, align 8, !dbg !4363
  %9 = load i32, i32* %n.addr, align 4, !dbg !4364
  %and = and i32 %9, 67108863, !dbg !4364
  %10 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4364
  %11 = bitcast %struct.real_value* %10 to i32*, !dbg !4364
  %bf.load7 = load i32, i32* %11, align 8, !dbg !4364
  %bf.value = and i32 %and, 67108863, !dbg !4364
  %bf.shl = shl i32 %bf.value, 6, !dbg !4364
  %bf.clear8 = and i32 %bf.load7, 63, !dbg !4364
  %bf.set9 = or i32 %bf.clear8, %bf.shl, !dbg !4364
  store i32 %bf.set9, i32* %11, align 8, !dbg !4364
  %12 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4365
  %sig = getelementptr inbounds %struct.real_value, %struct.real_value* %12, i32 0, i32 1, !dbg !4366
  %arrayidx = getelementptr inbounds [3 x i64], [3 x i64]* %sig, i64 0, i64 2, !dbg !4365
  store i64 -9223372036854775808, i64* %arrayidx, align 8, !dbg !4367
  br label %if.end

if.end:                                           ; preds = %if.else3, %if.then2
  br label %if.end10

if.end10:                                         ; preds = %if.end, %if.then
  %13 = load i32, i32* %fmode.addr, align 4, !dbg !4368
  %idxprom = zext i32 %13 to i64, !dbg !4368
  %arrayidx11 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !4368
  %14 = load i8, i8* %arrayidx11, align 1, !dbg !4368
  %conv = zext i8 %14 to i32, !dbg !4368
  %cmp12 = icmp eq i32 %conv, 9, !dbg !4368
  br i1 %cmp12, label %if.then14, label %if.end15, !dbg !4370

if.then14:                                        ; preds = %if.end10
  %15 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4371
  %16 = load i32, i32* %fmode.addr, align 4, !dbg !4372
  %17 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4373
  call void @decimal_real_convert(%struct.real_value* %15, i32 %16, %struct.real_value* %17), !dbg !4374
  br label %if.end15, !dbg !4374

if.end15:                                         ; preds = %if.then14, %if.end10
  ret void, !dbg !4375
}

declare dso_local void @decimal_real_convert(%struct.real_value*, i32, %struct.real_value*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @round_for_format(%struct.real_format* %fmt, %struct.real_value* %r) #0 !dbg !4376 {
entry:
  %fmt.addr = alloca %struct.real_format*, align 8
  %r.addr = alloca %struct.real_value*, align 8
  %p2 = alloca i32, align 4
  %np2 = alloca i32, align 4
  %i = alloca i32, align 4
  %w = alloca i32, align 4
  %emin2m1 = alloca i32, align 4
  %emax2 = alloca i32, align 4
  %round_up = alloca i8, align 1
  %diff = alloca i32, align 4
  %sticky = alloca i64, align 8
  %guard = alloca i8, align 1
  %lsb = alloca i8, align 1
  %u = alloca %struct.real_value, align 8
  store %struct.real_format* %fmt, %struct.real_format** %fmt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_format** %fmt.addr, metadata !4379, metadata !DIExpression()), !dbg !4380
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !4381, metadata !DIExpression()), !dbg !4382
  call void @llvm.dbg.declare(metadata i32* %p2, metadata !4383, metadata !DIExpression()), !dbg !4384
  call void @llvm.dbg.declare(metadata i32* %np2, metadata !4385, metadata !DIExpression()), !dbg !4386
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4387, metadata !DIExpression()), !dbg !4388
  call void @llvm.dbg.declare(metadata i32* %w, metadata !4389, metadata !DIExpression()), !dbg !4390
  call void @llvm.dbg.declare(metadata i32* %emin2m1, metadata !4391, metadata !DIExpression()), !dbg !4392
  call void @llvm.dbg.declare(metadata i32* %emax2, metadata !4393, metadata !DIExpression()), !dbg !4394
  call void @llvm.dbg.declare(metadata i8* %round_up, metadata !4395, metadata !DIExpression()), !dbg !4396
  store i8 0, i8* %round_up, align 1, !dbg !4396
  %0 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4397
  %1 = bitcast %struct.real_value* %0 to i32*, !dbg !4399
  %bf.load = load i32, i32* %1, align 8, !dbg !4399
  %bf.lshr = lshr i32 %bf.load, 2, !dbg !4399
  %bf.clear = and i32 %bf.lshr, 1, !dbg !4399
  %tobool = icmp ne i32 %bf.clear, 0, !dbg !4397
  br i1 %tobool, label %if.then, label %if.end2, !dbg !4400

if.then:                                          ; preds = %entry
  %2 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !4401
  %b = getelementptr inbounds %struct.real_format, %struct.real_format* %2, i32 0, i32 2, !dbg !4404
  %3 = load i32, i32* %b, align 8, !dbg !4404
  %cmp = icmp eq i32 %3, 10, !dbg !4405
  br i1 %cmp, label %if.then1, label %if.end, !dbg !4406

if.then1:                                         ; preds = %if.then
  %4 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !4407
  %5 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4409
  call void @decimal_round_for_format(%struct.real_format* %4, %struct.real_value* %5), !dbg !4410
  br label %return, !dbg !4411

if.end:                                           ; preds = %if.then
  %6 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4412
  %7 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4413
  call void @decimal_real_convert(%struct.real_value* %6, i32 39, %struct.real_value* %7), !dbg !4414
  br label %if.end2, !dbg !4415

if.end2:                                          ; preds = %if.end, %entry
  %8 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !4416
  %p = getelementptr inbounds %struct.real_format, %struct.real_format* %8, i32 0, i32 3, !dbg !4417
  %9 = load i32, i32* %p, align 4, !dbg !4417
  store i32 %9, i32* %p2, align 4, !dbg !4418
  %10 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !4419
  %emin = getelementptr inbounds %struct.real_format, %struct.real_format* %10, i32 0, i32 5, !dbg !4420
  %11 = load i32, i32* %emin, align 4, !dbg !4420
  %sub = sub nsw i32 %11, 1, !dbg !4421
  store i32 %sub, i32* %emin2m1, align 4, !dbg !4422
  %12 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !4423
  %emax = getelementptr inbounds %struct.real_format, %struct.real_format* %12, i32 0, i32 6, !dbg !4424
  %13 = load i32, i32* %emax, align 8, !dbg !4424
  store i32 %13, i32* %emax2, align 4, !dbg !4425
  %14 = load i32, i32* %p2, align 4, !dbg !4426
  %sub3 = sub nsw i32 192, %14, !dbg !4427
  store i32 %sub3, i32* %np2, align 4, !dbg !4428
  %15 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4429
  %16 = bitcast %struct.real_value* %15 to i32*, !dbg !4430
  %bf.load4 = load i32, i32* %16, align 8, !dbg !4430
  %bf.clear5 = and i32 %bf.load4, 3, !dbg !4430
  switch i32 %bf.clear5, label %sw.default [
    i32 0, label %sw.bb
    i32 2, label %sw.bb17
    i32 3, label %sw.bb18
    i32 1, label %sw.bb19
  ], !dbg !4431

underflow:                                        ; preds = %if.then118, %if.then47, %if.then38
  call void @llvm.dbg.label(metadata !4432), !dbg !4434
  %17 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4435
  %18 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4436
  %19 = bitcast %struct.real_value* %18 to i32*, !dbg !4437
  %bf.load6 = load i32, i32* %19, align 8, !dbg !4437
  %bf.lshr7 = lshr i32 %bf.load6, 3, !dbg !4437
  %bf.clear8 = and i32 %bf.lshr7, 1, !dbg !4437
  call void @get_zero(%struct.real_value* %17, i32 %bf.clear8), !dbg !4438
  br label %sw.bb, !dbg !4438

sw.bb:                                            ; preds = %if.end2, %underflow
  %20 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !4439
  %has_signed_zero = getelementptr inbounds %struct.real_format, %struct.real_format* %20, i32 0, i32 14, !dbg !4441
  %21 = load i8, i8* %has_signed_zero, align 1, !dbg !4441
  %tobool9 = icmp ne i8 %21, 0, !dbg !4439
  br i1 %tobool9, label %if.end13, label %if.then10, !dbg !4442

if.then10:                                        ; preds = %sw.bb
  %22 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4443
  %23 = bitcast %struct.real_value* %22 to i32*, !dbg !4444
  %bf.load11 = load i32, i32* %23, align 8, !dbg !4445
  %bf.clear12 = and i32 %bf.load11, -9, !dbg !4445
  store i32 %bf.clear12, i32* %23, align 8, !dbg !4445
  br label %if.end13, !dbg !4443

if.end13:                                         ; preds = %if.then10, %sw.bb
  br label %return, !dbg !4446

overflow:                                         ; preds = %if.then106, %if.then24
  call void @llvm.dbg.label(metadata !4447), !dbg !4448
  %24 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4449
  %25 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4450
  %26 = bitcast %struct.real_value* %25 to i32*, !dbg !4451
  %bf.load14 = load i32, i32* %26, align 8, !dbg !4451
  %bf.lshr15 = lshr i32 %bf.load14, 3, !dbg !4451
  %bf.clear16 = and i32 %bf.lshr15, 1, !dbg !4451
  call void @get_inf(%struct.real_value* %24, i32 %bf.clear16), !dbg !4452
  br label %sw.bb17, !dbg !4452

sw.bb17:                                          ; preds = %if.end2, %overflow
  br label %return, !dbg !4453

sw.bb18:                                          ; preds = %if.end2
  %27 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4454
  %28 = load i32, i32* %np2, align 4, !dbg !4455
  call void @clear_significand_below(%struct.real_value* %27, i32 %28), !dbg !4456
  br label %return, !dbg !4457

sw.bb19:                                          ; preds = %if.end2
  br label %sw.epilog, !dbg !4458

sw.default:                                       ; preds = %if.end2
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 2656, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4459
  br label %sw.epilog, !dbg !4460

sw.epilog:                                        ; preds = %sw.default, %sw.bb19
  %29 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4461
  %30 = bitcast %struct.real_value* %29 to i32*, !dbg !4461
  %bf.load20 = load i32, i32* %30, align 8, !dbg !4461
  %bf.lshr21 = lshr i32 %bf.load20, 6, !dbg !4461
  %xor = xor i32 %bf.lshr21, 33554432, !dbg !4461
  %sub22 = sub nsw i32 %xor, 33554432, !dbg !4461
  %31 = load i32, i32* %emax2, align 4, !dbg !4463
  %cmp23 = icmp sgt i32 %sub22, %31, !dbg !4464
  br i1 %cmp23, label %if.then24, label %if.else, !dbg !4465

if.then24:                                        ; preds = %sw.epilog
  br label %overflow, !dbg !4466

if.else:                                          ; preds = %sw.epilog
  %32 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4467
  %33 = bitcast %struct.real_value* %32 to i32*, !dbg !4467
  %bf.load25 = load i32, i32* %33, align 8, !dbg !4467
  %bf.lshr26 = lshr i32 %bf.load25, 6, !dbg !4467
  %xor27 = xor i32 %bf.lshr26, 33554432, !dbg !4467
  %sub28 = sub nsw i32 %xor27, 33554432, !dbg !4467
  %34 = load i32, i32* %emin2m1, align 4, !dbg !4469
  %cmp29 = icmp sle i32 %sub28, %34, !dbg !4470
  br i1 %cmp29, label %if.then30, label %if.end57, !dbg !4471

if.then30:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata i32* %diff, metadata !4472, metadata !DIExpression()), !dbg !4474
  %35 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !4475
  %has_denorm = getelementptr inbounds %struct.real_format, %struct.real_format* %35, i32 0, i32 13, !dbg !4477
  %36 = load i8, i8* %has_denorm, align 8, !dbg !4477
  %tobool31 = icmp ne i8 %36, 0, !dbg !4475
  br i1 %tobool31, label %if.else40, label %if.then32, !dbg !4478

if.then32:                                        ; preds = %if.then30
  %37 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4479
  %38 = bitcast %struct.real_value* %37 to i32*, !dbg !4479
  %bf.load33 = load i32, i32* %38, align 8, !dbg !4479
  %bf.lshr34 = lshr i32 %bf.load33, 6, !dbg !4479
  %xor35 = xor i32 %bf.lshr34, 33554432, !dbg !4479
  %sub36 = sub nsw i32 %xor35, 33554432, !dbg !4479
  %39 = load i32, i32* %emin2m1, align 4, !dbg !4482
  %cmp37 = icmp slt i32 %sub36, %39, !dbg !4483
  br i1 %cmp37, label %if.then38, label %if.end39, !dbg !4484

if.then38:                                        ; preds = %if.then32
  br label %underflow, !dbg !4485

if.end39:                                         ; preds = %if.then32
  br label %if.end56, !dbg !4486

if.else40:                                        ; preds = %if.then30
  %40 = load i32, i32* %emin2m1, align 4, !dbg !4487
  %41 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4489
  %42 = bitcast %struct.real_value* %41 to i32*, !dbg !4489
  %bf.load41 = load i32, i32* %42, align 8, !dbg !4489
  %bf.lshr42 = lshr i32 %bf.load41, 6, !dbg !4489
  %xor43 = xor i32 %bf.lshr42, 33554432, !dbg !4489
  %sub44 = sub nsw i32 %xor43, 33554432, !dbg !4489
  %sub45 = sub nsw i32 %40, %sub44, !dbg !4490
  %add = add nsw i32 %sub45, 1, !dbg !4491
  store i32 %add, i32* %diff, align 4, !dbg !4492
  %43 = load i32, i32* %diff, align 4, !dbg !4493
  %44 = load i32, i32* %p2, align 4, !dbg !4495
  %cmp46 = icmp sgt i32 %43, %44, !dbg !4496
  br i1 %cmp46, label %if.then47, label %if.end48, !dbg !4497

if.then47:                                        ; preds = %if.else40
  br label %underflow, !dbg !4498

if.end48:                                         ; preds = %if.else40
  %45 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4499
  %46 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4500
  %47 = load i32, i32* %diff, align 4, !dbg !4501
  %call = call zeroext i8 @sticky_rshift_significand(%struct.real_value* %45, %struct.real_value* %46, i32 %47), !dbg !4502
  %conv = zext i8 %call to i64, !dbg !4502
  %48 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4503
  %sig = getelementptr inbounds %struct.real_value, %struct.real_value* %48, i32 0, i32 1, !dbg !4504
  %arrayidx = getelementptr inbounds [3 x i64], [3 x i64]* %sig, i64 0, i64 0, !dbg !4503
  %49 = load i64, i64* %arrayidx, align 8, !dbg !4505
  %or = or i64 %49, %conv, !dbg !4505
  store i64 %or, i64* %arrayidx, align 8, !dbg !4505
  %50 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4506
  %51 = bitcast %struct.real_value* %50 to i32*, !dbg !4506
  %bf.load49 = load i32, i32* %51, align 8, !dbg !4506
  %bf.lshr50 = lshr i32 %bf.load49, 6, !dbg !4506
  %xor51 = xor i32 %bf.lshr50, 33554432, !dbg !4506
  %sub52 = sub nsw i32 %xor51, 33554432, !dbg !4506
  %52 = load i32, i32* %diff, align 4, !dbg !4506
  %add53 = add nsw i32 %sub52, %52, !dbg !4506
  %and = and i32 %add53, 67108863, !dbg !4506
  %53 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4506
  %54 = bitcast %struct.real_value* %53 to i32*, !dbg !4506
  %bf.load54 = load i32, i32* %54, align 8, !dbg !4506
  %bf.value = and i32 %and, 67108863, !dbg !4506
  %bf.shl = shl i32 %bf.value, 6, !dbg !4506
  %bf.clear55 = and i32 %bf.load54, 63, !dbg !4506
  %bf.set = or i32 %bf.clear55, %bf.shl, !dbg !4506
  store i32 %bf.set, i32* %54, align 8, !dbg !4506
  br label %if.end56

if.end56:                                         ; preds = %if.end48, %if.end39
  br label %if.end57, !dbg !4507

if.end57:                                         ; preds = %if.end56, %if.else
  br label %if.end58

if.end58:                                         ; preds = %if.end57
  %55 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !4508
  %round_towards_zero = getelementptr inbounds %struct.real_format, %struct.real_format* %55, i32 0, i32 9, !dbg !4510
  %56 = load i8, i8* %round_towards_zero, align 4, !dbg !4510
  %tobool59 = icmp ne i8 %56, 0, !dbg !4508
  br i1 %tobool59, label %if.end83, label %if.then60, !dbg !4511

if.then60:                                        ; preds = %if.end58
  call void @llvm.dbg.declare(metadata i64* %sticky, metadata !4512, metadata !DIExpression()), !dbg !4514
  call void @llvm.dbg.declare(metadata i8* %guard, metadata !4515, metadata !DIExpression()), !dbg !4516
  call void @llvm.dbg.declare(metadata i8* %lsb, metadata !4517, metadata !DIExpression()), !dbg !4518
  store i64 0, i64* %sticky, align 8, !dbg !4519
  store i32 0, i32* %i, align 4, !dbg !4520
  %57 = load i32, i32* %np2, align 4, !dbg !4522
  %sub61 = sub nsw i32 %57, 1, !dbg !4523
  %div = sdiv i32 %sub61, 64, !dbg !4524
  store i32 %div, i32* %w, align 4, !dbg !4525
  br label %for.cond, !dbg !4526

for.cond:                                         ; preds = %for.inc, %if.then60
  %58 = load i32, i32* %i, align 4, !dbg !4527
  %59 = load i32, i32* %w, align 4, !dbg !4529
  %cmp62 = icmp slt i32 %58, %59, !dbg !4530
  br i1 %cmp62, label %for.body, label %for.end, !dbg !4531

for.body:                                         ; preds = %for.cond
  %60 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4532
  %sig64 = getelementptr inbounds %struct.real_value, %struct.real_value* %60, i32 0, i32 1, !dbg !4533
  %61 = load i32, i32* %i, align 4, !dbg !4534
  %idxprom = sext i32 %61 to i64, !dbg !4532
  %arrayidx65 = getelementptr inbounds [3 x i64], [3 x i64]* %sig64, i64 0, i64 %idxprom, !dbg !4532
  %62 = load i64, i64* %arrayidx65, align 8, !dbg !4532
  %63 = load i64, i64* %sticky, align 8, !dbg !4535
  %or66 = or i64 %63, %62, !dbg !4535
  store i64 %or66, i64* %sticky, align 8, !dbg !4535
  br label %for.inc, !dbg !4536

for.inc:                                          ; preds = %for.body
  %64 = load i32, i32* %i, align 4, !dbg !4537
  %inc = add nsw i32 %64, 1, !dbg !4537
  store i32 %inc, i32* %i, align 4, !dbg !4537
  br label %for.cond, !dbg !4538, !llvm.loop !4539

for.end:                                          ; preds = %for.cond
  %65 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4541
  %sig67 = getelementptr inbounds %struct.real_value, %struct.real_value* %65, i32 0, i32 1, !dbg !4542
  %66 = load i32, i32* %w, align 4, !dbg !4543
  %idxprom68 = sext i32 %66 to i64, !dbg !4541
  %arrayidx69 = getelementptr inbounds [3 x i64], [3 x i64]* %sig67, i64 0, i64 %idxprom68, !dbg !4541
  %67 = load i64, i64* %arrayidx69, align 8, !dbg !4541
  %68 = load i32, i32* %np2, align 4, !dbg !4544
  %sub70 = sub nsw i32 %68, 1, !dbg !4545
  %rem = srem i32 %sub70, 64, !dbg !4546
  %sh_prom = zext i32 %rem to i64, !dbg !4547
  %shl = shl i64 1, %sh_prom, !dbg !4547
  %sub71 = sub i64 %shl, 1, !dbg !4548
  %and72 = and i64 %67, %sub71, !dbg !4549
  %69 = load i64, i64* %sticky, align 8, !dbg !4550
  %or73 = or i64 %69, %and72, !dbg !4550
  store i64 %or73, i64* %sticky, align 8, !dbg !4550
  %70 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4551
  %71 = load i32, i32* %np2, align 4, !dbg !4552
  %sub74 = sub nsw i32 %71, 1, !dbg !4553
  %call75 = call zeroext i8 @test_significand_bit(%struct.real_value* %70, i32 %sub74), !dbg !4554
  store i8 %call75, i8* %guard, align 1, !dbg !4555
  %72 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4556
  %73 = load i32, i32* %np2, align 4, !dbg !4557
  %call76 = call zeroext i8 @test_significand_bit(%struct.real_value* %72, i32 %73), !dbg !4558
  store i8 %call76, i8* %lsb, align 1, !dbg !4559
  %74 = load i8, i8* %guard, align 1, !dbg !4560
  %conv77 = zext i8 %74 to i32, !dbg !4560
  %tobool78 = icmp ne i32 %conv77, 0, !dbg !4560
  br i1 %tobool78, label %land.rhs, label %land.end, !dbg !4561

land.rhs:                                         ; preds = %for.end
  %75 = load i64, i64* %sticky, align 8, !dbg !4562
  %tobool79 = icmp ne i64 %75, 0, !dbg !4562
  br i1 %tobool79, label %lor.end, label %lor.rhs, !dbg !4563

lor.rhs:                                          ; preds = %land.rhs
  %76 = load i8, i8* %lsb, align 1, !dbg !4564
  %conv80 = zext i8 %76 to i32, !dbg !4564
  %tobool81 = icmp ne i32 %conv80, 0, !dbg !4563
  br label %lor.end, !dbg !4563

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %77 = phi i1 [ true, %land.rhs ], [ %tobool81, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %for.end
  %78 = phi i1 [ false, %for.end ], [ %77, %lor.end ], !dbg !4565
  %land.ext = zext i1 %78 to i32, !dbg !4561
  %conv82 = trunc i32 %land.ext to i8, !dbg !4560
  store i8 %conv82, i8* %round_up, align 1, !dbg !4566
  br label %if.end83, !dbg !4567

if.end83:                                         ; preds = %land.end, %if.end58
  %79 = load i8, i8* %round_up, align 1, !dbg !4568
  %tobool84 = icmp ne i8 %79, 0, !dbg !4568
  br i1 %tobool84, label %if.then85, label %if.end111, !dbg !4570

if.then85:                                        ; preds = %if.end83
  call void @llvm.dbg.declare(metadata %struct.real_value* %u, metadata !4571, metadata !DIExpression()), !dbg !4573
  call void @get_zero(%struct.real_value* %u, i32 0), !dbg !4574
  %80 = load i32, i32* %np2, align 4, !dbg !4575
  call void @set_significand_bit(%struct.real_value* %u, i32 %80), !dbg !4576
  %81 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4577
  %82 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4579
  %call86 = call zeroext i8 @add_significands(%struct.real_value* %81, %struct.real_value* %82, %struct.real_value* %u), !dbg !4580
  %tobool87 = icmp ne i8 %call86, 0, !dbg !4580
  br i1 %tobool87, label %if.then88, label %if.end110, !dbg !4581

if.then88:                                        ; preds = %if.then85
  %83 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4582
  %84 = bitcast %struct.real_value* %83 to i32*, !dbg !4582
  %bf.load89 = load i32, i32* %84, align 8, !dbg !4582
  %bf.lshr90 = lshr i32 %bf.load89, 6, !dbg !4582
  %xor91 = xor i32 %bf.lshr90, 33554432, !dbg !4582
  %sub92 = sub nsw i32 %xor91, 33554432, !dbg !4582
  %add93 = add nsw i32 %sub92, 1, !dbg !4582
  %and94 = and i32 %add93, 67108863, !dbg !4582
  %85 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4582
  %86 = bitcast %struct.real_value* %85 to i32*, !dbg !4582
  %bf.load95 = load i32, i32* %86, align 8, !dbg !4582
  %bf.value96 = and i32 %and94, 67108863, !dbg !4582
  %bf.shl97 = shl i32 %bf.value96, 6, !dbg !4582
  %bf.clear98 = and i32 %bf.load95, 63, !dbg !4582
  %bf.set99 = or i32 %bf.clear98, %bf.shl97, !dbg !4582
  store i32 %bf.set99, i32* %86, align 8, !dbg !4582
  %87 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4584
  %88 = bitcast %struct.real_value* %87 to i32*, !dbg !4584
  %bf.load100 = load i32, i32* %88, align 8, !dbg !4584
  %bf.lshr101 = lshr i32 %bf.load100, 6, !dbg !4584
  %xor102 = xor i32 %bf.lshr101, 33554432, !dbg !4584
  %sub103 = sub nsw i32 %xor102, 33554432, !dbg !4584
  %89 = load i32, i32* %emax2, align 4, !dbg !4586
  %cmp104 = icmp sgt i32 %sub103, %89, !dbg !4587
  br i1 %cmp104, label %if.then106, label %if.end107, !dbg !4588

if.then106:                                       ; preds = %if.then88
  br label %overflow, !dbg !4589

if.end107:                                        ; preds = %if.then88
  %90 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4590
  %sig108 = getelementptr inbounds %struct.real_value, %struct.real_value* %90, i32 0, i32 1, !dbg !4591
  %arrayidx109 = getelementptr inbounds [3 x i64], [3 x i64]* %sig108, i64 0, i64 2, !dbg !4590
  store i64 -9223372036854775808, i64* %arrayidx109, align 8, !dbg !4592
  br label %if.end110, !dbg !4593

if.end110:                                        ; preds = %if.end107, %if.then85
  br label %if.end111, !dbg !4594

if.end111:                                        ; preds = %if.end110, %if.end83
  %91 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4595
  %92 = bitcast %struct.real_value* %91 to i32*, !dbg !4595
  %bf.load112 = load i32, i32* %92, align 8, !dbg !4595
  %bf.lshr113 = lshr i32 %bf.load112, 6, !dbg !4595
  %xor114 = xor i32 %bf.lshr113, 33554432, !dbg !4595
  %sub115 = sub nsw i32 %xor114, 33554432, !dbg !4595
  %93 = load i32, i32* %emin2m1, align 4, !dbg !4597
  %cmp116 = icmp sle i32 %sub115, %93, !dbg !4598
  br i1 %cmp116, label %if.then118, label %if.end119, !dbg !4599

if.then118:                                       ; preds = %if.end111
  br label %underflow, !dbg !4600

if.end119:                                        ; preds = %if.end111
  %94 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4601
  %95 = load i32, i32* %np2, align 4, !dbg !4602
  call void @clear_significand_below(%struct.real_value* %94, i32 %95), !dbg !4603
  br label %return, !dbg !4604

return:                                           ; preds = %if.end119, %sw.bb18, %sw.bb17, %if.end13, %if.then1
  ret void, !dbg !4604
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @real_value_truncate(%struct.real_value* noalias sret %agg.result, i32 %mode, %struct.real_value* byval(%struct.real_value) align 8 %a) #0 !dbg !4605 {
entry:
  %mode.addr = alloca i32, align 4
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !4608, metadata !DIExpression()), !dbg !4609
  call void @llvm.dbg.declare(metadata %struct.real_value* %a, metadata !4610, metadata !DIExpression()), !dbg !4611
  call void @llvm.dbg.declare(metadata %struct.real_value* %agg.result, metadata !4612, metadata !DIExpression()), !dbg !4613
  %0 = load i32, i32* %mode.addr, align 4, !dbg !4614
  call void @real_convert(%struct.real_value* %agg.result, i32 %0, %struct.real_value* %a), !dbg !4615
  ret void, !dbg !4616
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @exact_real_truncate(i32 %mode, %struct.real_value* %a) #0 !dbg !4617 {
entry:
  %retval = alloca i8, align 1
  %mode.addr = alloca i32, align 4
  %a.addr = alloca %struct.real_value*, align 8
  %fmt = alloca %struct.real_format*, align 8
  %t = alloca %struct.real_value, align 8
  %emin2m1 = alloca i32, align 4
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !4620, metadata !DIExpression()), !dbg !4621
  store %struct.real_value* %a, %struct.real_value** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %a.addr, metadata !4622, metadata !DIExpression()), !dbg !4623
  call void @llvm.dbg.declare(metadata %struct.real_format** %fmt, metadata !4624, metadata !DIExpression()), !dbg !4625
  call void @llvm.dbg.declare(metadata %struct.real_value* %t, metadata !4626, metadata !DIExpression()), !dbg !4627
  call void @llvm.dbg.declare(metadata i32* %emin2m1, metadata !4628, metadata !DIExpression()), !dbg !4629
  %0 = load i32, i32* %mode.addr, align 4, !dbg !4630
  %idxprom = zext i32 %0 to i64, !dbg !4630
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !4630
  %1 = load i8, i8* %arrayidx, align 1, !dbg !4630
  %conv = zext i8 %1 to i32, !dbg !4630
  %cmp = icmp eq i32 %conv, 9, !dbg !4630
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !4630

cond.true:                                        ; preds = %entry
  %2 = load i32, i32* %mode.addr, align 4, !dbg !4630
  %sub = sub i32 %2, 42, !dbg !4630
  %add = add i32 %sub, 4, !dbg !4630
  br label %cond.end, !dbg !4630

cond.false:                                       ; preds = %entry
  %3 = load i32, i32* %mode.addr, align 4, !dbg !4630
  %sub2 = sub i32 %3, 38, !dbg !4630
  br label %cond.end, !dbg !4630

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add, %cond.true ], [ %sub2, %cond.false ], !dbg !4630
  %idxprom3 = zext i32 %cond to i64, !dbg !4630
  %arrayidx4 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom3, !dbg !4630
  %4 = load %struct.real_format*, %struct.real_format** %arrayidx4, align 8, !dbg !4630
  store %struct.real_format* %4, %struct.real_format** %fmt, align 8, !dbg !4631
  %5 = load %struct.real_format*, %struct.real_format** %fmt, align 8, !dbg !4632
  %tobool = icmp ne %struct.real_format* %5, null, !dbg !4632
  br i1 %tobool, label %cond.false6, label %cond.true5, !dbg !4632

cond.true5:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 2775, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4632
  br label %cond.end7, !dbg !4632

cond.false6:                                      ; preds = %cond.end
  br label %cond.end7, !dbg !4632

cond.end7:                                        ; preds = %cond.false6, %cond.true5
  %cond8 = phi i32 [ 0, %cond.true5 ], [ 0, %cond.false6 ], !dbg !4632
  %6 = load %struct.real_format*, %struct.real_format** %fmt, align 8, !dbg !4633
  %emin = getelementptr inbounds %struct.real_format, %struct.real_format* %6, i32 0, i32 5, !dbg !4634
  %7 = load i32, i32* %emin, align 4, !dbg !4634
  %sub9 = sub nsw i32 %7, 1, !dbg !4635
  store i32 %sub9, i32* %emin2m1, align 4, !dbg !4636
  %8 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !4637
  %9 = bitcast %struct.real_value* %8 to i32*, !dbg !4637
  %bf.load = load i32, i32* %9, align 8, !dbg !4637
  %bf.lshr = lshr i32 %bf.load, 6, !dbg !4637
  %xor = xor i32 %bf.lshr, 33554432, !dbg !4637
  %sub10 = sub nsw i32 %xor, 33554432, !dbg !4637
  %10 = load i32, i32* %emin2m1, align 4, !dbg !4639
  %cmp11 = icmp sle i32 %sub10, %10, !dbg !4640
  br i1 %cmp11, label %if.then, label %if.end, !dbg !4641

if.then:                                          ; preds = %cond.end7
  store i8 0, i8* %retval, align 1, !dbg !4642
  br label %return, !dbg !4642

if.end:                                           ; preds = %cond.end7
  %11 = load i32, i32* %mode.addr, align 4, !dbg !4643
  %12 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !4644
  call void @real_convert(%struct.real_value* %t, i32 %11, %struct.real_value* %12), !dbg !4645
  %13 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !4646
  %call = call zeroext i8 @real_identical(%struct.real_value* %t, %struct.real_value* %13), !dbg !4647
  store i8 %call, i8* %retval, align 1, !dbg !4648
  br label %return, !dbg !4648

return:                                           ; preds = %if.end, %if.then
  %14 = load i8, i8* %retval, align 1, !dbg !4649
  ret i8 %14, !dbg !4649
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @real_to_target_fmt(i64* %buf, %struct.real_value* %r_orig, %struct.real_format* %fmt) #0 !dbg !4650 {
entry:
  %buf.addr = alloca i64*, align 8
  %r_orig.addr = alloca %struct.real_value*, align 8
  %fmt.addr = alloca %struct.real_format*, align 8
  %r = alloca %struct.real_value, align 8
  %buf1 = alloca i64, align 8
  store i64* %buf, i64** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %buf.addr, metadata !4653, metadata !DIExpression()), !dbg !4654
  store %struct.real_value* %r_orig, %struct.real_value** %r_orig.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r_orig.addr, metadata !4655, metadata !DIExpression()), !dbg !4656
  store %struct.real_format* %fmt, %struct.real_format** %fmt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_format** %fmt.addr, metadata !4657, metadata !DIExpression()), !dbg !4658
  call void @llvm.dbg.declare(metadata %struct.real_value* %r, metadata !4659, metadata !DIExpression()), !dbg !4660
  call void @llvm.dbg.declare(metadata i64* %buf1, metadata !4661, metadata !DIExpression()), !dbg !4662
  %0 = load %struct.real_value*, %struct.real_value** %r_orig.addr, align 8, !dbg !4663
  %1 = bitcast %struct.real_value* %r to i8*, !dbg !4664
  %2 = bitcast %struct.real_value* %0 to i8*, !dbg !4664
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 32, i1 false), !dbg !4664
  %3 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !4665
  call void @round_for_format(%struct.real_format* %3, %struct.real_value* %r), !dbg !4666
  %4 = load i64*, i64** %buf.addr, align 8, !dbg !4667
  %tobool = icmp ne i64* %4, null, !dbg !4667
  br i1 %tobool, label %if.end, label %if.then, !dbg !4669

if.then:                                          ; preds = %entry
  store i64* %buf1, i64** %buf.addr, align 8, !dbg !4670
  br label %if.end, !dbg !4671

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !4672
  %encode = getelementptr inbounds %struct.real_format, %struct.real_format* %5, i32 0, i32 0, !dbg !4673
  %6 = load void (%struct.real_format*, i64*, %struct.real_value*)*, void (%struct.real_format*, i64*, %struct.real_value*)** %encode, align 8, !dbg !4673
  %7 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !4674
  %8 = load i64*, i64** %buf.addr, align 8, !dbg !4675
  call void %6(%struct.real_format* %7, i64* %8, %struct.real_value* %r), !dbg !4676
  %9 = load i64*, i64** %buf.addr, align 8, !dbg !4677
  %10 = load i64, i64* %9, align 8, !dbg !4678
  ret i64 %10, !dbg !4679
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @real_to_target(i64* %buf, %struct.real_value* %r, i32 %mode) #0 !dbg !4680 {
entry:
  %buf.addr = alloca i64*, align 8
  %r.addr = alloca %struct.real_value*, align 8
  %mode.addr = alloca i32, align 4
  %fmt = alloca %struct.real_format*, align 8
  store i64* %buf, i64** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %buf.addr, metadata !4683, metadata !DIExpression()), !dbg !4684
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !4685, metadata !DIExpression()), !dbg !4686
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !4687, metadata !DIExpression()), !dbg !4688
  call void @llvm.dbg.declare(metadata %struct.real_format** %fmt, metadata !4689, metadata !DIExpression()), !dbg !4690
  %0 = load i32, i32* %mode.addr, align 4, !dbg !4691
  %idxprom = zext i32 %0 to i64, !dbg !4691
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !4691
  %1 = load i8, i8* %arrayidx, align 1, !dbg !4691
  %conv = zext i8 %1 to i32, !dbg !4691
  %cmp = icmp eq i32 %conv, 9, !dbg !4691
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !4691

cond.true:                                        ; preds = %entry
  %2 = load i32, i32* %mode.addr, align 4, !dbg !4691
  %sub = sub i32 %2, 42, !dbg !4691
  %add = add i32 %sub, 4, !dbg !4691
  br label %cond.end, !dbg !4691

cond.false:                                       ; preds = %entry
  %3 = load i32, i32* %mode.addr, align 4, !dbg !4691
  %sub2 = sub i32 %3, 38, !dbg !4691
  br label %cond.end, !dbg !4691

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add, %cond.true ], [ %sub2, %cond.false ], !dbg !4691
  %idxprom3 = zext i32 %cond to i64, !dbg !4691
  %arrayidx4 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom3, !dbg !4691
  %4 = load %struct.real_format*, %struct.real_format** %arrayidx4, align 8, !dbg !4691
  store %struct.real_format* %4, %struct.real_format** %fmt, align 8, !dbg !4692
  %5 = load %struct.real_format*, %struct.real_format** %fmt, align 8, !dbg !4693
  %tobool = icmp ne %struct.real_format* %5, null, !dbg !4693
  br i1 %tobool, label %cond.false6, label %cond.true5, !dbg !4693

cond.true5:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 2818, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4693
  br label %cond.end7, !dbg !4693

cond.false6:                                      ; preds = %cond.end
  br label %cond.end7, !dbg !4693

cond.end7:                                        ; preds = %cond.false6, %cond.true5
  %cond8 = phi i32 [ 0, %cond.true5 ], [ 0, %cond.false6 ], !dbg !4693
  %6 = load i64*, i64** %buf.addr, align 8, !dbg !4694
  %7 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4695
  %8 = load %struct.real_format*, %struct.real_format** %fmt, align 8, !dbg !4696
  %call = call i64 @real_to_target_fmt(i64* %6, %struct.real_value* %7, %struct.real_format* %8), !dbg !4697
  ret i64 %call, !dbg !4698
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @real_from_target_fmt(%struct.real_value* %r, i64* %buf, %struct.real_format* %fmt) #0 !dbg !4699 {
entry:
  %r.addr = alloca %struct.real_value*, align 8
  %buf.addr = alloca i64*, align 8
  %fmt.addr = alloca %struct.real_format*, align 8
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !4702, metadata !DIExpression()), !dbg !4703
  store i64* %buf, i64** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %buf.addr, metadata !4704, metadata !DIExpression()), !dbg !4705
  store %struct.real_format* %fmt, %struct.real_format** %fmt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_format** %fmt.addr, metadata !4706, metadata !DIExpression()), !dbg !4707
  %0 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !4708
  %decode = getelementptr inbounds %struct.real_format, %struct.real_format* %0, i32 0, i32 1, !dbg !4709
  %1 = load void (%struct.real_format*, %struct.real_value*, i64*)*, void (%struct.real_format*, %struct.real_value*, i64*)** %decode, align 8, !dbg !4709
  %2 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !4710
  %3 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4711
  %4 = load i64*, i64** %buf.addr, align 8, !dbg !4712
  call void %1(%struct.real_format* %2, %struct.real_value* %3, i64* %4), !dbg !4713
  ret void, !dbg !4714
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @real_from_target(%struct.real_value* %r, i64* %buf, i32 %mode) #0 !dbg !4715 {
entry:
  %r.addr = alloca %struct.real_value*, align 8
  %buf.addr = alloca i64*, align 8
  %mode.addr = alloca i32, align 4
  %fmt = alloca %struct.real_format*, align 8
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !4718, metadata !DIExpression()), !dbg !4719
  store i64* %buf, i64** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %buf.addr, metadata !4720, metadata !DIExpression()), !dbg !4721
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !4722, metadata !DIExpression()), !dbg !4723
  call void @llvm.dbg.declare(metadata %struct.real_format** %fmt, metadata !4724, metadata !DIExpression()), !dbg !4725
  %0 = load i32, i32* %mode.addr, align 4, !dbg !4726
  %idxprom = zext i32 %0 to i64, !dbg !4726
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !4726
  %1 = load i8, i8* %arrayidx, align 1, !dbg !4726
  %conv = zext i8 %1 to i32, !dbg !4726
  %cmp = icmp eq i32 %conv, 9, !dbg !4726
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !4726

cond.true:                                        ; preds = %entry
  %2 = load i32, i32* %mode.addr, align 4, !dbg !4726
  %sub = sub i32 %2, 42, !dbg !4726
  %add = add i32 %sub, 4, !dbg !4726
  br label %cond.end, !dbg !4726

cond.false:                                       ; preds = %entry
  %3 = load i32, i32* %mode.addr, align 4, !dbg !4726
  %sub2 = sub i32 %3, 38, !dbg !4726
  br label %cond.end, !dbg !4726

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add, %cond.true ], [ %sub2, %cond.false ], !dbg !4726
  %idxprom3 = zext i32 %cond to i64, !dbg !4726
  %arrayidx4 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom3, !dbg !4726
  %4 = load %struct.real_format*, %struct.real_format** %arrayidx4, align 8, !dbg !4726
  store %struct.real_format* %4, %struct.real_format** %fmt, align 8, !dbg !4727
  %5 = load %struct.real_format*, %struct.real_format** %fmt, align 8, !dbg !4728
  %tobool = icmp ne %struct.real_format* %5, null, !dbg !4728
  br i1 %tobool, label %cond.false6, label %cond.true5, !dbg !4728

cond.true5:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 2842, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4728
  br label %cond.end7, !dbg !4728

cond.false6:                                      ; preds = %cond.end
  br label %cond.end7, !dbg !4728

cond.end7:                                        ; preds = %cond.false6, %cond.true5
  %cond8 = phi i32 [ 0, %cond.true5 ], [ 0, %cond.false6 ], !dbg !4728
  %6 = load %struct.real_format*, %struct.real_format** %fmt, align 8, !dbg !4729
  %decode = getelementptr inbounds %struct.real_format, %struct.real_format* %6, i32 0, i32 1, !dbg !4730
  %7 = load void (%struct.real_format*, %struct.real_value*, i64*)*, void (%struct.real_format*, %struct.real_value*, i64*)** %decode, align 8, !dbg !4730
  %8 = load %struct.real_format*, %struct.real_format** %fmt, align 8, !dbg !4731
  %9 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4732
  %10 = load i64*, i64** %buf.addr, align 8, !dbg !4733
  call void %7(%struct.real_format* %8, %struct.real_value* %9, i64* %10), !dbg !4734
  ret void, !dbg !4735
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @significand_size(i32 %mode) #0 !dbg !4736 {
entry:
  %retval = alloca i32, align 4
  %mode.addr = alloca i32, align 4
  %fmt = alloca %struct.real_format*, align 8
  %log2_10 = alloca double, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !4739, metadata !DIExpression()), !dbg !4740
  call void @llvm.dbg.declare(metadata %struct.real_format** %fmt, metadata !4741, metadata !DIExpression()), !dbg !4742
  %0 = load i32, i32* %mode.addr, align 4, !dbg !4743
  %idxprom = zext i32 %0 to i64, !dbg !4743
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !4743
  %1 = load i8, i8* %arrayidx, align 1, !dbg !4743
  %conv = zext i8 %1 to i32, !dbg !4743
  %cmp = icmp eq i32 %conv, 9, !dbg !4743
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !4743

cond.true:                                        ; preds = %entry
  %2 = load i32, i32* %mode.addr, align 4, !dbg !4743
  %sub = sub i32 %2, 42, !dbg !4743
  %add = add i32 %sub, 4, !dbg !4743
  br label %cond.end, !dbg !4743

cond.false:                                       ; preds = %entry
  %3 = load i32, i32* %mode.addr, align 4, !dbg !4743
  %sub2 = sub i32 %3, 38, !dbg !4743
  br label %cond.end, !dbg !4743

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add, %cond.true ], [ %sub2, %cond.false ], !dbg !4743
  %idxprom3 = zext i32 %cond to i64, !dbg !4743
  %arrayidx4 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom3, !dbg !4743
  %4 = load %struct.real_format*, %struct.real_format** %arrayidx4, align 8, !dbg !4743
  store %struct.real_format* %4, %struct.real_format** %fmt, align 8, !dbg !4744
  %5 = load %struct.real_format*, %struct.real_format** %fmt, align 8, !dbg !4745
  %cmp5 = icmp eq %struct.real_format* %5, null, !dbg !4747
  br i1 %cmp5, label %if.then, label %if.end, !dbg !4748

if.then:                                          ; preds = %cond.end
  store i32 0, i32* %retval, align 4, !dbg !4749
  br label %return, !dbg !4749

if.end:                                           ; preds = %cond.end
  %6 = load %struct.real_format*, %struct.real_format** %fmt, align 8, !dbg !4750
  %b = getelementptr inbounds %struct.real_format, %struct.real_format* %6, i32 0, i32 2, !dbg !4752
  %7 = load i32, i32* %b, align 8, !dbg !4752
  %cmp7 = icmp eq i32 %7, 10, !dbg !4753
  br i1 %cmp7, label %if.then9, label %if.end12, !dbg !4754

if.then9:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata double* %log2_10, metadata !4755, metadata !DIExpression()), !dbg !4758
  store double 0x400A934F0A294EAE, double* %log2_10, align 8, !dbg !4758
  %8 = load %struct.real_format*, %struct.real_format** %fmt, align 8, !dbg !4759
  %p = getelementptr inbounds %struct.real_format, %struct.real_format* %8, i32 0, i32 3, !dbg !4760
  %9 = load i32, i32* %p, align 4, !dbg !4760
  %conv10 = sitofp i32 %9 to double, !dbg !4759
  %10 = load double, double* %log2_10, align 8, !dbg !4761
  %mul = fmul double %conv10, %10, !dbg !4762
  %conv11 = fptosi double %mul to i32, !dbg !4759
  store i32 %conv11, i32* %retval, align 4, !dbg !4763
  br label %return, !dbg !4763

if.end12:                                         ; preds = %if.end
  %11 = load %struct.real_format*, %struct.real_format** %fmt, align 8, !dbg !4764
  %p13 = getelementptr inbounds %struct.real_format, %struct.real_format* %11, i32 0, i32 3, !dbg !4765
  %12 = load i32, i32* %p13, align 4, !dbg !4765
  store i32 %12, i32* %retval, align 4, !dbg !4766
  br label %return, !dbg !4766

return:                                           ; preds = %if.end12, %if.then9, %if.then
  %13 = load i32, i32* %retval, align 4, !dbg !4767
  ret i32 %13, !dbg !4767
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @real_hash(%struct.real_value* %r) #0 !dbg !4768 {
entry:
  %retval = alloca i32, align 4
  %r.addr = alloca %struct.real_value*, align 8
  %h = alloca i32, align 4
  %i = alloca i64, align 8
  %s = alloca i64, align 8
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !4771, metadata !DIExpression()), !dbg !4772
  call void @llvm.dbg.declare(metadata i32* %h, metadata !4773, metadata !DIExpression()), !dbg !4774
  call void @llvm.dbg.declare(metadata i64* %i, metadata !4775, metadata !DIExpression()), !dbg !4776
  %0 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4777
  %1 = bitcast %struct.real_value* %0 to i32*, !dbg !4778
  %bf.load = load i32, i32* %1, align 8, !dbg !4778
  %bf.clear = and i32 %bf.load, 3, !dbg !4778
  %2 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4779
  %3 = bitcast %struct.real_value* %2 to i32*, !dbg !4780
  %bf.load1 = load i32, i32* %3, align 8, !dbg !4780
  %bf.lshr = lshr i32 %bf.load1, 3, !dbg !4780
  %bf.clear2 = and i32 %bf.lshr, 1, !dbg !4780
  %shl = shl i32 %bf.clear2, 2, !dbg !4781
  %or = or i32 %bf.clear, %shl, !dbg !4782
  store i32 %or, i32* %h, align 4, !dbg !4783
  %4 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4784
  %5 = bitcast %struct.real_value* %4 to i32*, !dbg !4785
  %bf.load3 = load i32, i32* %5, align 8, !dbg !4785
  %bf.clear4 = and i32 %bf.load3, 3, !dbg !4785
  switch i32 %bf.clear4, label %sw.default [
    i32 0, label %sw.bb
    i32 2, label %sw.bb
    i32 1, label %sw.bb5
    i32 3, label %sw.bb10
  ], !dbg !4786

sw.bb:                                            ; preds = %entry, %entry
  %6 = load i32, i32* %h, align 4, !dbg !4787
  store i32 %6, i32* %retval, align 4, !dbg !4789
  br label %return, !dbg !4789

sw.bb5:                                           ; preds = %entry
  %7 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4790
  %8 = bitcast %struct.real_value* %7 to i32*, !dbg !4790
  %bf.load6 = load i32, i32* %8, align 8, !dbg !4790
  %bf.lshr7 = lshr i32 %bf.load6, 6, !dbg !4790
  %xor = xor i32 %bf.lshr7, 33554432, !dbg !4790
  %sub = sub nsw i32 %xor, 33554432, !dbg !4790
  %shl8 = shl i32 %sub, 3, !dbg !4791
  %9 = load i32, i32* %h, align 4, !dbg !4792
  %or9 = or i32 %9, %shl8, !dbg !4792
  store i32 %or9, i32* %h, align 4, !dbg !4792
  br label %sw.epilog, !dbg !4793

sw.bb10:                                          ; preds = %entry
  %10 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4794
  %11 = bitcast %struct.real_value* %10 to i32*, !dbg !4796
  %bf.load11 = load i32, i32* %11, align 8, !dbg !4796
  %bf.lshr12 = lshr i32 %bf.load11, 4, !dbg !4796
  %bf.clear13 = and i32 %bf.lshr12, 1, !dbg !4796
  %tobool = icmp ne i32 %bf.clear13, 0, !dbg !4794
  br i1 %tobool, label %if.then, label %if.end, !dbg !4797

if.then:                                          ; preds = %sw.bb10
  %12 = load i32, i32* %h, align 4, !dbg !4798
  %xor14 = xor i32 %12, -1, !dbg !4798
  store i32 %xor14, i32* %h, align 4, !dbg !4798
  br label %if.end, !dbg !4799

if.end:                                           ; preds = %if.then, %sw.bb10
  %13 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4800
  %14 = bitcast %struct.real_value* %13 to i32*, !dbg !4802
  %bf.load15 = load i32, i32* %14, align 8, !dbg !4802
  %bf.lshr16 = lshr i32 %bf.load15, 5, !dbg !4802
  %bf.clear17 = and i32 %bf.lshr16, 1, !dbg !4802
  %tobool18 = icmp ne i32 %bf.clear17, 0, !dbg !4800
  br i1 %tobool18, label %if.then19, label %if.end20, !dbg !4803

if.then19:                                        ; preds = %if.end
  %15 = load i32, i32* %h, align 4, !dbg !4804
  store i32 %15, i32* %retval, align 4, !dbg !4805
  br label %return, !dbg !4805

if.end20:                                         ; preds = %if.end
  br label %sw.epilog, !dbg !4806

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 2901, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4807
  br label %sw.epilog, !dbg !4808

sw.epilog:                                        ; preds = %sw.default, %if.end20, %sw.bb5
  store i64 0, i64* %i, align 8, !dbg !4809
  br label %for.cond, !dbg !4812

for.cond:                                         ; preds = %for.inc, %sw.epilog
  %16 = load i64, i64* %i, align 8, !dbg !4813
  %cmp = icmp ult i64 %16, 3, !dbg !4815
  br i1 %cmp, label %for.body, label %for.end, !dbg !4816

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i64* %s, metadata !4817, metadata !DIExpression()), !dbg !4819
  %17 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4820
  %sig = getelementptr inbounds %struct.real_value, %struct.real_value* %17, i32 0, i32 1, !dbg !4821
  %18 = load i64, i64* %i, align 8, !dbg !4822
  %arrayidx = getelementptr inbounds [3 x i64], [3 x i64]* %sig, i64 0, i64 %18, !dbg !4820
  %19 = load i64, i64* %arrayidx, align 8, !dbg !4820
  store i64 %19, i64* %s, align 8, !dbg !4819
  %20 = load i64, i64* %s, align 8, !dbg !4823
  %21 = load i64, i64* %s, align 8, !dbg !4824
  %shr = lshr i64 %21, 32, !dbg !4825
  %xor21 = xor i64 %20, %shr, !dbg !4826
  %22 = load i32, i32* %h, align 4, !dbg !4827
  %conv = zext i32 %22 to i64, !dbg !4827
  %xor22 = xor i64 %conv, %xor21, !dbg !4827
  %conv23 = trunc i64 %xor22 to i32, !dbg !4827
  store i32 %conv23, i32* %h, align 4, !dbg !4827
  br label %for.inc, !dbg !4828

for.inc:                                          ; preds = %for.body
  %23 = load i64, i64* %i, align 8, !dbg !4829
  %inc = add i64 %23, 1, !dbg !4829
  store i64 %inc, i64* %i, align 8, !dbg !4829
  br label %for.cond, !dbg !4830, !llvm.loop !4831

for.end:                                          ; preds = %for.cond
  %24 = load i32, i32* %h, align 4, !dbg !4833
  store i32 %24, i32* %retval, align 4, !dbg !4834
  br label %return, !dbg !4834

return:                                           ; preds = %for.end, %if.then19, %sw.bb
  %25 = load i32, i32* %retval, align 4, !dbg !4835
  ret i32 %25, !dbg !4835
}

; Function Attrs: noinline nounwind uwtable
define internal void @encode_ieee_single(%struct.real_format* %fmt, i64* %buf, %struct.real_value* %r) #0 !dbg !4836 {
entry:
  %fmt.addr = alloca %struct.real_format*, align 8
  %buf.addr = alloca i64*, align 8
  %r.addr = alloca %struct.real_value*, align 8
  %image = alloca i64, align 8
  %sig = alloca i64, align 8
  %exp = alloca i64, align 8
  %sign = alloca i64, align 8
  %denormal = alloca i8, align 1
  store %struct.real_format* %fmt, %struct.real_format** %fmt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_format** %fmt.addr, metadata !4837, metadata !DIExpression()), !dbg !4838
  store i64* %buf, i64** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %buf.addr, metadata !4839, metadata !DIExpression()), !dbg !4840
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !4841, metadata !DIExpression()), !dbg !4842
  call void @llvm.dbg.declare(metadata i64* %image, metadata !4843, metadata !DIExpression()), !dbg !4844
  call void @llvm.dbg.declare(metadata i64* %sig, metadata !4845, metadata !DIExpression()), !dbg !4846
  call void @llvm.dbg.declare(metadata i64* %exp, metadata !4847, metadata !DIExpression()), !dbg !4848
  call void @llvm.dbg.declare(metadata i64* %sign, metadata !4849, metadata !DIExpression()), !dbg !4850
  %0 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4851
  %1 = bitcast %struct.real_value* %0 to i32*, !dbg !4852
  %bf.load = load i32, i32* %1, align 8, !dbg !4852
  %bf.lshr = lshr i32 %bf.load, 3, !dbg !4852
  %bf.clear = and i32 %bf.lshr, 1, !dbg !4852
  %conv = zext i32 %bf.clear to i64, !dbg !4851
  store i64 %conv, i64* %sign, align 8, !dbg !4850
  call void @llvm.dbg.declare(metadata i8* %denormal, metadata !4853, metadata !DIExpression()), !dbg !4854
  %2 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4855
  %sig1 = getelementptr inbounds %struct.real_value, %struct.real_value* %2, i32 0, i32 1, !dbg !4856
  %arrayidx = getelementptr inbounds [3 x i64], [3 x i64]* %sig1, i64 0, i64 2, !dbg !4855
  %3 = load i64, i64* %arrayidx, align 8, !dbg !4855
  %and = and i64 %3, -9223372036854775808, !dbg !4857
  %cmp = icmp eq i64 %and, 0, !dbg !4858
  %conv2 = zext i1 %cmp to i32, !dbg !4858
  %conv3 = trunc i32 %conv2 to i8, !dbg !4859
  store i8 %conv3, i8* %denormal, align 1, !dbg !4854
  %4 = load i64, i64* %sign, align 8, !dbg !4860
  %shl = shl i64 %4, 31, !dbg !4861
  store i64 %shl, i64* %image, align 8, !dbg !4862
  %5 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4863
  %sig4 = getelementptr inbounds %struct.real_value, %struct.real_value* %5, i32 0, i32 1, !dbg !4864
  %arrayidx5 = getelementptr inbounds [3 x i64], [3 x i64]* %sig4, i64 0, i64 2, !dbg !4863
  %6 = load i64, i64* %arrayidx5, align 8, !dbg !4863
  %shr = lshr i64 %6, 40, !dbg !4865
  %and6 = and i64 %shr, 8388607, !dbg !4866
  store i64 %and6, i64* %sig, align 8, !dbg !4867
  %7 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4868
  %8 = bitcast %struct.real_value* %7 to i32*, !dbg !4869
  %bf.load7 = load i32, i32* %8, align 8, !dbg !4869
  %bf.clear8 = and i32 %bf.load7, 3, !dbg !4869
  switch i32 %bf.clear8, label %sw.default [
    i32 0, label %sw.bb
    i32 2, label %sw.bb9
    i32 3, label %sw.bb11
    i32 1, label %sw.bb43
  ], !dbg !4870

sw.bb:                                            ; preds = %entry
  br label %sw.epilog, !dbg !4871

sw.bb9:                                           ; preds = %entry
  %9 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !4873
  %has_inf = getelementptr inbounds %struct.real_format, %struct.real_format* %9, i32 0, i32 12, !dbg !4875
  %10 = load i8, i8* %has_inf, align 1, !dbg !4875
  %tobool = icmp ne i8 %10, 0, !dbg !4873
  br i1 %tobool, label %if.then, label %if.else, !dbg !4876

if.then:                                          ; preds = %sw.bb9
  %11 = load i64, i64* %image, align 8, !dbg !4877
  %or = or i64 %11, 2139095040, !dbg !4877
  store i64 %or, i64* %image, align 8, !dbg !4877
  br label %if.end, !dbg !4878

if.else:                                          ; preds = %sw.bb9
  %12 = load i64, i64* %image, align 8, !dbg !4879
  %or10 = or i64 %12, 2147483647, !dbg !4879
  store i64 %or10, i64* %image, align 8, !dbg !4879
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %sw.epilog, !dbg !4880

sw.bb11:                                          ; preds = %entry
  %13 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !4881
  %has_nans = getelementptr inbounds %struct.real_format, %struct.real_format* %13, i32 0, i32 11, !dbg !4883
  %14 = load i8, i8* %has_nans, align 2, !dbg !4883
  %tobool12 = icmp ne i8 %14, 0, !dbg !4881
  br i1 %tobool12, label %if.then13, label %if.else40, !dbg !4884

if.then13:                                        ; preds = %sw.bb11
  %15 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4885
  %16 = bitcast %struct.real_value* %15 to i32*, !dbg !4888
  %bf.load14 = load i32, i32* %16, align 8, !dbg !4888
  %bf.lshr15 = lshr i32 %bf.load14, 5, !dbg !4888
  %bf.clear16 = and i32 %bf.lshr15, 1, !dbg !4888
  %tobool17 = icmp ne i32 %bf.clear16, 0, !dbg !4885
  br i1 %tobool17, label %if.then18, label %if.end22, !dbg !4889

if.then18:                                        ; preds = %if.then13
  %17 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !4890
  %canonical_nan_lsbs_set = getelementptr inbounds %struct.real_format, %struct.real_format* %17, i32 0, i32 16, !dbg !4891
  %18 = load i8, i8* %canonical_nan_lsbs_set, align 1, !dbg !4891
  %conv19 = zext i8 %18 to i32, !dbg !4890
  %tobool20 = icmp ne i32 %conv19, 0, !dbg !4890
  %19 = zext i1 %tobool20 to i64, !dbg !4890
  %cond = select i1 %tobool20, i32 4194303, i32 0, !dbg !4890
  %conv21 = sext i32 %cond to i64, !dbg !4892
  store i64 %conv21, i64* %sig, align 8, !dbg !4893
  br label %if.end22, !dbg !4894

if.end22:                                         ; preds = %if.then18, %if.then13
  %20 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4895
  %21 = bitcast %struct.real_value* %20 to i32*, !dbg !4897
  %bf.load23 = load i32, i32* %21, align 8, !dbg !4897
  %bf.lshr24 = lshr i32 %bf.load23, 4, !dbg !4897
  %bf.clear25 = and i32 %bf.lshr24, 1, !dbg !4897
  %22 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !4898
  %qnan_msb_set = getelementptr inbounds %struct.real_format, %struct.real_format* %22, i32 0, i32 15, !dbg !4899
  %23 = load i8, i8* %qnan_msb_set, align 2, !dbg !4899
  %conv26 = zext i8 %23 to i32, !dbg !4898
  %cmp27 = icmp eq i32 %bf.clear25, %conv26, !dbg !4900
  br i1 %cmp27, label %if.then29, label %if.else31, !dbg !4901

if.then29:                                        ; preds = %if.end22
  %24 = load i64, i64* %sig, align 8, !dbg !4902
  %and30 = and i64 %24, -4194305, !dbg !4902
  store i64 %and30, i64* %sig, align 8, !dbg !4902
  br label %if.end33, !dbg !4903

if.else31:                                        ; preds = %if.end22
  %25 = load i64, i64* %sig, align 8, !dbg !4904
  %or32 = or i64 %25, 4194304, !dbg !4904
  store i64 %or32, i64* %sig, align 8, !dbg !4904
  br label %if.end33

if.end33:                                         ; preds = %if.else31, %if.then29
  %26 = load i64, i64* %sig, align 8, !dbg !4905
  %cmp34 = icmp eq i64 %26, 0, !dbg !4907
  br i1 %cmp34, label %if.then36, label %if.end37, !dbg !4908

if.then36:                                        ; preds = %if.end33
  store i64 2097152, i64* %sig, align 8, !dbg !4909
  br label %if.end37, !dbg !4910

if.end37:                                         ; preds = %if.then36, %if.end33
  %27 = load i64, i64* %image, align 8, !dbg !4911
  %or38 = or i64 %27, 2139095040, !dbg !4911
  store i64 %or38, i64* %image, align 8, !dbg !4911
  %28 = load i64, i64* %sig, align 8, !dbg !4912
  %29 = load i64, i64* %image, align 8, !dbg !4913
  %or39 = or i64 %29, %28, !dbg !4913
  store i64 %or39, i64* %image, align 8, !dbg !4913
  br label %if.end42, !dbg !4914

if.else40:                                        ; preds = %sw.bb11
  %30 = load i64, i64* %image, align 8, !dbg !4915
  %or41 = or i64 %30, 2147483647, !dbg !4915
  store i64 %or41, i64* %image, align 8, !dbg !4915
  br label %if.end42

if.end42:                                         ; preds = %if.else40, %if.end37
  br label %sw.epilog, !dbg !4916

sw.bb43:                                          ; preds = %entry
  %31 = load i8, i8* %denormal, align 1, !dbg !4917
  %tobool44 = icmp ne i8 %31, 0, !dbg !4917
  br i1 %tobool44, label %if.then45, label %if.else46, !dbg !4919

if.then45:                                        ; preds = %sw.bb43
  store i64 0, i64* %exp, align 8, !dbg !4920
  br label %if.end51, !dbg !4921

if.else46:                                        ; preds = %sw.bb43
  %32 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4922
  %33 = bitcast %struct.real_value* %32 to i32*, !dbg !4922
  %bf.load47 = load i32, i32* %33, align 8, !dbg !4922
  %bf.lshr48 = lshr i32 %bf.load47, 6, !dbg !4922
  %xor = xor i32 %bf.lshr48, 33554432, !dbg !4922
  %sub = sub nsw i32 %xor, 33554432, !dbg !4922
  %add = add nsw i32 %sub, 127, !dbg !4923
  %sub49 = sub nsw i32 %add, 1, !dbg !4924
  %conv50 = sext i32 %sub49 to i64, !dbg !4922
  store i64 %conv50, i64* %exp, align 8, !dbg !4925
  br label %if.end51

if.end51:                                         ; preds = %if.else46, %if.then45
  %34 = load i64, i64* %exp, align 8, !dbg !4926
  %shl52 = shl i64 %34, 23, !dbg !4927
  %35 = load i64, i64* %image, align 8, !dbg !4928
  %or53 = or i64 %35, %shl52, !dbg !4928
  store i64 %or53, i64* %image, align 8, !dbg !4928
  %36 = load i64, i64* %sig, align 8, !dbg !4929
  %37 = load i64, i64* %image, align 8, !dbg !4930
  %or54 = or i64 %37, %36, !dbg !4930
  store i64 %or54, i64* %image, align 8, !dbg !4930
  br label %sw.epilog, !dbg !4931

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 2979, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4932
  br label %sw.epilog, !dbg !4933

sw.epilog:                                        ; preds = %sw.default, %if.end51, %if.end42, %if.end, %sw.bb
  %38 = load i64, i64* %image, align 8, !dbg !4934
  %39 = load i64*, i64** %buf.addr, align 8, !dbg !4935
  %arrayidx55 = getelementptr inbounds i64, i64* %39, i64 0, !dbg !4935
  store i64 %38, i64* %arrayidx55, align 8, !dbg !4936
  ret void, !dbg !4937
}

; Function Attrs: noinline nounwind uwtable
define internal void @decode_ieee_single(%struct.real_format* %fmt, %struct.real_value* %r, i64* %buf) #0 !dbg !4938 {
entry:
  %fmt.addr = alloca %struct.real_format*, align 8
  %r.addr = alloca %struct.real_value*, align 8
  %buf.addr = alloca i64*, align 8
  %image = alloca i64, align 8
  %sign = alloca i8, align 1
  %exp = alloca i32, align 4
  store %struct.real_format* %fmt, %struct.real_format** %fmt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_format** %fmt.addr, metadata !4939, metadata !DIExpression()), !dbg !4940
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !4941, metadata !DIExpression()), !dbg !4942
  store i64* %buf, i64** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %buf.addr, metadata !4943, metadata !DIExpression()), !dbg !4944
  call void @llvm.dbg.declare(metadata i64* %image, metadata !4945, metadata !DIExpression()), !dbg !4946
  %0 = load i64*, i64** %buf.addr, align 8, !dbg !4947
  %arrayidx = getelementptr inbounds i64, i64* %0, i64 0, !dbg !4947
  %1 = load i64, i64* %arrayidx, align 8, !dbg !4947
  %and = and i64 %1, 4294967295, !dbg !4948
  store i64 %and, i64* %image, align 8, !dbg !4946
  call void @llvm.dbg.declare(metadata i8* %sign, metadata !4949, metadata !DIExpression()), !dbg !4950
  %2 = load i64, i64* %image, align 8, !dbg !4951
  %shr = lshr i64 %2, 31, !dbg !4952
  %and1 = and i64 %shr, 1, !dbg !4953
  %conv = trunc i64 %and1 to i8, !dbg !4954
  store i8 %conv, i8* %sign, align 1, !dbg !4950
  call void @llvm.dbg.declare(metadata i32* %exp, metadata !4955, metadata !DIExpression()), !dbg !4956
  %3 = load i64, i64* %image, align 8, !dbg !4957
  %shr2 = lshr i64 %3, 23, !dbg !4958
  %and3 = and i64 %shr2, 255, !dbg !4959
  %conv4 = trunc i64 %and3 to i32, !dbg !4960
  store i32 %conv4, i32* %exp, align 4, !dbg !4956
  %4 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4961
  %5 = bitcast %struct.real_value* %4 to i8*, !dbg !4962
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 32, i1 false), !dbg !4962
  %6 = load i64, i64* %image, align 8, !dbg !4963
  %shl = shl i64 %6, 40, !dbg !4963
  store i64 %shl, i64* %image, align 8, !dbg !4963
  %7 = load i64, i64* %image, align 8, !dbg !4964
  %and5 = and i64 %7, 9223372036854775807, !dbg !4964
  store i64 %and5, i64* %image, align 8, !dbg !4964
  %8 = load i32, i32* %exp, align 4, !dbg !4965
  %cmp = icmp eq i32 %8, 0, !dbg !4967
  br i1 %cmp, label %if.then, label %if.else28, !dbg !4968

if.then:                                          ; preds = %entry
  %9 = load i64, i64* %image, align 8, !dbg !4969
  %tobool = icmp ne i64 %9, 0, !dbg !4969
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !4972

land.lhs.true:                                    ; preds = %if.then
  %10 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !4973
  %has_denorm = getelementptr inbounds %struct.real_format, %struct.real_format* %10, i32 0, i32 13, !dbg !4974
  %11 = load i8, i8* %has_denorm, align 8, !dbg !4974
  %conv7 = zext i8 %11 to i32, !dbg !4973
  %tobool8 = icmp ne i32 %conv7, 0, !dbg !4973
  br i1 %tobool8, label %if.then9, label %if.else, !dbg !4975

if.then9:                                         ; preds = %land.lhs.true
  %12 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4976
  %13 = bitcast %struct.real_value* %12 to i32*, !dbg !4978
  %bf.load = load i32, i32* %13, align 8, !dbg !4979
  %bf.clear = and i32 %bf.load, -4, !dbg !4979
  %bf.set = or i32 %bf.clear, 1, !dbg !4979
  store i32 %bf.set, i32* %13, align 8, !dbg !4979
  %14 = load i8, i8* %sign, align 1, !dbg !4980
  %conv10 = zext i8 %14 to i32, !dbg !4980
  %15 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4981
  %16 = bitcast %struct.real_value* %15 to i32*, !dbg !4982
  %bf.load11 = load i32, i32* %16, align 8, !dbg !4983
  %bf.value = and i32 %conv10, 1, !dbg !4983
  %bf.shl = shl i32 %bf.value, 3, !dbg !4983
  %bf.clear12 = and i32 %bf.load11, -9, !dbg !4983
  %bf.set13 = or i32 %bf.clear12, %bf.shl, !dbg !4983
  store i32 %bf.set13, i32* %16, align 8, !dbg !4983
  %17 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4984
  %18 = bitcast %struct.real_value* %17 to i32*, !dbg !4984
  %bf.load14 = load i32, i32* %18, align 8, !dbg !4984
  %bf.clear15 = and i32 %bf.load14, 63, !dbg !4984
  %bf.set16 = or i32 %bf.clear15, -8064, !dbg !4984
  store i32 %bf.set16, i32* %18, align 8, !dbg !4984
  %19 = load i64, i64* %image, align 8, !dbg !4985
  %shl17 = shl i64 %19, 1, !dbg !4986
  %20 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4987
  %sig = getelementptr inbounds %struct.real_value, %struct.real_value* %20, i32 0, i32 1, !dbg !4988
  %arrayidx18 = getelementptr inbounds [3 x i64], [3 x i64]* %sig, i64 0, i64 2, !dbg !4987
  store i64 %shl17, i64* %arrayidx18, align 8, !dbg !4989
  %21 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4990
  call void @normalize(%struct.real_value* %21), !dbg !4991
  br label %if.end27, !dbg !4992

if.else:                                          ; preds = %land.lhs.true, %if.then
  %22 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !4993
  %has_signed_zero = getelementptr inbounds %struct.real_format, %struct.real_format* %22, i32 0, i32 14, !dbg !4995
  %23 = load i8, i8* %has_signed_zero, align 1, !dbg !4995
  %tobool19 = icmp ne i8 %23, 0, !dbg !4993
  br i1 %tobool19, label %if.then20, label %if.end, !dbg !4996

if.then20:                                        ; preds = %if.else
  %24 = load i8, i8* %sign, align 1, !dbg !4997
  %conv21 = zext i8 %24 to i32, !dbg !4997
  %25 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !4998
  %26 = bitcast %struct.real_value* %25 to i32*, !dbg !4999
  %bf.load22 = load i32, i32* %26, align 8, !dbg !5000
  %bf.value23 = and i32 %conv21, 1, !dbg !5000
  %bf.shl24 = shl i32 %bf.value23, 3, !dbg !5000
  %bf.clear25 = and i32 %bf.load22, -9, !dbg !5000
  %bf.set26 = or i32 %bf.clear25, %bf.shl24, !dbg !5000
  store i32 %bf.set26, i32* %26, align 8, !dbg !5000
  br label %if.end, !dbg !4998

if.end:                                           ; preds = %if.then20, %if.else
  br label %if.end27

if.end27:                                         ; preds = %if.end, %if.then9
  br label %if.end89, !dbg !5001

if.else28:                                        ; preds = %entry
  %27 = load i32, i32* %exp, align 4, !dbg !5002
  %cmp29 = icmp eq i32 %27, 255, !dbg !5004
  br i1 %cmp29, label %land.lhs.true31, label %if.else70, !dbg !5005

land.lhs.true31:                                  ; preds = %if.else28
  %28 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !5006
  %has_nans = getelementptr inbounds %struct.real_format, %struct.real_format* %28, i32 0, i32 11, !dbg !5007
  %29 = load i8, i8* %has_nans, align 2, !dbg !5007
  %conv32 = zext i8 %29 to i32, !dbg !5006
  %tobool33 = icmp ne i32 %conv32, 0, !dbg !5006
  br i1 %tobool33, label %if.then36, label %lor.lhs.false, !dbg !5008

lor.lhs.false:                                    ; preds = %land.lhs.true31
  %30 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !5009
  %has_inf = getelementptr inbounds %struct.real_format, %struct.real_format* %30, i32 0, i32 12, !dbg !5010
  %31 = load i8, i8* %has_inf, align 1, !dbg !5010
  %conv34 = zext i8 %31 to i32, !dbg !5009
  %tobool35 = icmp ne i32 %conv34, 0, !dbg !5009
  br i1 %tobool35, label %if.then36, label %if.else70, !dbg !5011

if.then36:                                        ; preds = %lor.lhs.false, %land.lhs.true31
  %32 = load i64, i64* %image, align 8, !dbg !5012
  %tobool37 = icmp ne i64 %32, 0, !dbg !5012
  br i1 %tobool37, label %if.then38, label %if.else59, !dbg !5015

if.then38:                                        ; preds = %if.then36
  %33 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5016
  %34 = bitcast %struct.real_value* %33 to i32*, !dbg !5018
  %bf.load39 = load i32, i32* %34, align 8, !dbg !5019
  %bf.clear40 = and i32 %bf.load39, -4, !dbg !5019
  %bf.set41 = or i32 %bf.clear40, 3, !dbg !5019
  store i32 %bf.set41, i32* %34, align 8, !dbg !5019
  %35 = load i8, i8* %sign, align 1, !dbg !5020
  %conv42 = zext i8 %35 to i32, !dbg !5020
  %36 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5021
  %37 = bitcast %struct.real_value* %36 to i32*, !dbg !5022
  %bf.load43 = load i32, i32* %37, align 8, !dbg !5023
  %bf.value44 = and i32 %conv42, 1, !dbg !5023
  %bf.shl45 = shl i32 %bf.value44, 3, !dbg !5023
  %bf.clear46 = and i32 %bf.load43, -9, !dbg !5023
  %bf.set47 = or i32 %bf.clear46, %bf.shl45, !dbg !5023
  store i32 %bf.set47, i32* %37, align 8, !dbg !5023
  %38 = load i64, i64* %image, align 8, !dbg !5024
  %shr48 = lshr i64 %38, 62, !dbg !5025
  %and49 = and i64 %shr48, 1, !dbg !5026
  %39 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !5027
  %qnan_msb_set = getelementptr inbounds %struct.real_format, %struct.real_format* %39, i32 0, i32 15, !dbg !5028
  %40 = load i8, i8* %qnan_msb_set, align 2, !dbg !5028
  %conv50 = zext i8 %40 to i64, !dbg !5027
  %xor = xor i64 %and49, %conv50, !dbg !5029
  %conv51 = trunc i64 %xor to i32, !dbg !5030
  %41 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5031
  %42 = bitcast %struct.real_value* %41 to i32*, !dbg !5032
  %bf.load52 = load i32, i32* %42, align 8, !dbg !5033
  %bf.value53 = and i32 %conv51, 1, !dbg !5033
  %bf.shl54 = shl i32 %bf.value53, 4, !dbg !5033
  %bf.clear55 = and i32 %bf.load52, -17, !dbg !5033
  %bf.set56 = or i32 %bf.clear55, %bf.shl54, !dbg !5033
  store i32 %bf.set56, i32* %42, align 8, !dbg !5033
  %43 = load i64, i64* %image, align 8, !dbg !5034
  %44 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5035
  %sig57 = getelementptr inbounds %struct.real_value, %struct.real_value* %44, i32 0, i32 1, !dbg !5036
  %arrayidx58 = getelementptr inbounds [3 x i64], [3 x i64]* %sig57, i64 0, i64 2, !dbg !5035
  store i64 %43, i64* %arrayidx58, align 8, !dbg !5037
  br label %if.end69, !dbg !5038

if.else59:                                        ; preds = %if.then36
  %45 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5039
  %46 = bitcast %struct.real_value* %45 to i32*, !dbg !5041
  %bf.load60 = load i32, i32* %46, align 8, !dbg !5042
  %bf.clear61 = and i32 %bf.load60, -4, !dbg !5042
  %bf.set62 = or i32 %bf.clear61, 2, !dbg !5042
  store i32 %bf.set62, i32* %46, align 8, !dbg !5042
  %47 = load i8, i8* %sign, align 1, !dbg !5043
  %conv63 = zext i8 %47 to i32, !dbg !5043
  %48 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5044
  %49 = bitcast %struct.real_value* %48 to i32*, !dbg !5045
  %bf.load64 = load i32, i32* %49, align 8, !dbg !5046
  %bf.value65 = and i32 %conv63, 1, !dbg !5046
  %bf.shl66 = shl i32 %bf.value65, 3, !dbg !5046
  %bf.clear67 = and i32 %bf.load64, -9, !dbg !5046
  %bf.set68 = or i32 %bf.clear67, %bf.shl66, !dbg !5046
  store i32 %bf.set68, i32* %49, align 8, !dbg !5046
  br label %if.end69

if.end69:                                         ; preds = %if.else59, %if.then38
  br label %if.end88, !dbg !5047

if.else70:                                        ; preds = %lor.lhs.false, %if.else28
  %50 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5048
  %51 = bitcast %struct.real_value* %50 to i32*, !dbg !5050
  %bf.load71 = load i32, i32* %51, align 8, !dbg !5051
  %bf.clear72 = and i32 %bf.load71, -4, !dbg !5051
  %bf.set73 = or i32 %bf.clear72, 1, !dbg !5051
  store i32 %bf.set73, i32* %51, align 8, !dbg !5051
  %52 = load i8, i8* %sign, align 1, !dbg !5052
  %conv74 = zext i8 %52 to i32, !dbg !5052
  %53 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5053
  %54 = bitcast %struct.real_value* %53 to i32*, !dbg !5054
  %bf.load75 = load i32, i32* %54, align 8, !dbg !5055
  %bf.value76 = and i32 %conv74, 1, !dbg !5055
  %bf.shl77 = shl i32 %bf.value76, 3, !dbg !5055
  %bf.clear78 = and i32 %bf.load75, -9, !dbg !5055
  %bf.set79 = or i32 %bf.clear78, %bf.shl77, !dbg !5055
  store i32 %bf.set79, i32* %54, align 8, !dbg !5055
  %55 = load i32, i32* %exp, align 4, !dbg !5056
  %sub = sub nsw i32 %55, 127, !dbg !5056
  %add = add nsw i32 %sub, 1, !dbg !5056
  %and80 = and i32 %add, 67108863, !dbg !5056
  %56 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5056
  %57 = bitcast %struct.real_value* %56 to i32*, !dbg !5056
  %bf.load81 = load i32, i32* %57, align 8, !dbg !5056
  %bf.value82 = and i32 %and80, 67108863, !dbg !5056
  %bf.shl83 = shl i32 %bf.value82, 6, !dbg !5056
  %bf.clear84 = and i32 %bf.load81, 63, !dbg !5056
  %bf.set85 = or i32 %bf.clear84, %bf.shl83, !dbg !5056
  store i32 %bf.set85, i32* %57, align 8, !dbg !5056
  %58 = load i64, i64* %image, align 8, !dbg !5057
  %or = or i64 %58, -9223372036854775808, !dbg !5058
  %59 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5059
  %sig86 = getelementptr inbounds %struct.real_value, %struct.real_value* %59, i32 0, i32 1, !dbg !5060
  %arrayidx87 = getelementptr inbounds [3 x i64], [3 x i64]* %sig86, i64 0, i64 2, !dbg !5059
  store i64 %or, i64* %arrayidx87, align 8, !dbg !5061
  br label %if.end88

if.end88:                                         ; preds = %if.else70, %if.end69
  br label %if.end89

if.end89:                                         ; preds = %if.end88, %if.end27
  ret void, !dbg !5062
}

; Function Attrs: noinline nounwind uwtable
define internal void @encode_ieee_double(%struct.real_format* %fmt, i64* %buf, %struct.real_value* %r) #0 !dbg !5063 {
entry:
  %fmt.addr = alloca %struct.real_format*, align 8
  %buf.addr = alloca i64*, align 8
  %r.addr = alloca %struct.real_value*, align 8
  %image_lo = alloca i64, align 8
  %image_hi = alloca i64, align 8
  %sig_lo = alloca i64, align 8
  %sig_hi = alloca i64, align 8
  %exp = alloca i64, align 8
  %denormal = alloca i8, align 1
  store %struct.real_format* %fmt, %struct.real_format** %fmt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_format** %fmt.addr, metadata !5064, metadata !DIExpression()), !dbg !5065
  store i64* %buf, i64** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %buf.addr, metadata !5066, metadata !DIExpression()), !dbg !5067
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !5068, metadata !DIExpression()), !dbg !5069
  call void @llvm.dbg.declare(metadata i64* %image_lo, metadata !5070, metadata !DIExpression()), !dbg !5071
  call void @llvm.dbg.declare(metadata i64* %image_hi, metadata !5072, metadata !DIExpression()), !dbg !5073
  call void @llvm.dbg.declare(metadata i64* %sig_lo, metadata !5074, metadata !DIExpression()), !dbg !5075
  call void @llvm.dbg.declare(metadata i64* %sig_hi, metadata !5076, metadata !DIExpression()), !dbg !5077
  call void @llvm.dbg.declare(metadata i64* %exp, metadata !5078, metadata !DIExpression()), !dbg !5079
  call void @llvm.dbg.declare(metadata i8* %denormal, metadata !5080, metadata !DIExpression()), !dbg !5081
  %0 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5082
  %sig = getelementptr inbounds %struct.real_value, %struct.real_value* %0, i32 0, i32 1, !dbg !5083
  %arrayidx = getelementptr inbounds [3 x i64], [3 x i64]* %sig, i64 0, i64 2, !dbg !5082
  %1 = load i64, i64* %arrayidx, align 8, !dbg !5082
  %and = and i64 %1, -9223372036854775808, !dbg !5084
  %cmp = icmp eq i64 %and, 0, !dbg !5085
  %conv = zext i1 %cmp to i32, !dbg !5085
  %conv1 = trunc i32 %conv to i8, !dbg !5086
  store i8 %conv1, i8* %denormal, align 1, !dbg !5081
  %2 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5087
  %3 = bitcast %struct.real_value* %2 to i32*, !dbg !5088
  %bf.load = load i32, i32* %3, align 8, !dbg !5088
  %bf.lshr = lshr i32 %bf.load, 3, !dbg !5088
  %bf.clear = and i32 %bf.lshr, 1, !dbg !5088
  %shl = shl i32 %bf.clear, 31, !dbg !5089
  %conv2 = sext i32 %shl to i64, !dbg !5087
  store i64 %conv2, i64* %image_hi, align 8, !dbg !5090
  store i64 0, i64* %image_lo, align 8, !dbg !5091
  %4 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5092
  %sig3 = getelementptr inbounds %struct.real_value, %struct.real_value* %4, i32 0, i32 1, !dbg !5095
  %arrayidx4 = getelementptr inbounds [3 x i64], [3 x i64]* %sig3, i64 0, i64 2, !dbg !5092
  %5 = load i64, i64* %arrayidx4, align 8, !dbg !5092
  store i64 %5, i64* %sig_hi, align 8, !dbg !5096
  %6 = load i64, i64* %sig_hi, align 8, !dbg !5097
  %shr = lshr i64 %6, 11, !dbg !5098
  %and5 = and i64 %shr, 4294967295, !dbg !5099
  store i64 %and5, i64* %sig_lo, align 8, !dbg !5100
  %7 = load i64, i64* %sig_hi, align 8, !dbg !5101
  %shr6 = lshr i64 %7, 12, !dbg !5102
  %shr7 = lshr i64 %shr6, 31, !dbg !5103
  %and8 = and i64 %shr7, 1048575, !dbg !5104
  store i64 %and8, i64* %sig_hi, align 8, !dbg !5105
  %8 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5106
  %9 = bitcast %struct.real_value* %8 to i32*, !dbg !5107
  %bf.load9 = load i32, i32* %9, align 8, !dbg !5107
  %bf.clear10 = and i32 %bf.load9, 3, !dbg !5107
  switch i32 %bf.clear10, label %sw.default [
    i32 0, label %sw.bb
    i32 2, label %sw.bb11
    i32 3, label %sw.bb13
    i32 1, label %sw.bb48
  ], !dbg !5108

sw.bb:                                            ; preds = %entry
  br label %sw.epilog, !dbg !5109

sw.bb11:                                          ; preds = %entry
  %10 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !5111
  %has_inf = getelementptr inbounds %struct.real_format, %struct.real_format* %10, i32 0, i32 12, !dbg !5113
  %11 = load i8, i8* %has_inf, align 1, !dbg !5113
  %tobool = icmp ne i8 %11, 0, !dbg !5111
  br i1 %tobool, label %if.then, label %if.else, !dbg !5114

if.then:                                          ; preds = %sw.bb11
  %12 = load i64, i64* %image_hi, align 8, !dbg !5115
  %or = or i64 %12, 2146435072, !dbg !5115
  store i64 %or, i64* %image_hi, align 8, !dbg !5115
  br label %if.end, !dbg !5116

if.else:                                          ; preds = %sw.bb11
  %13 = load i64, i64* %image_hi, align 8, !dbg !5117
  %or12 = or i64 %13, 2147483647, !dbg !5117
  store i64 %or12, i64* %image_hi, align 8, !dbg !5117
  store i64 4294967295, i64* %image_lo, align 8, !dbg !5119
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %sw.epilog, !dbg !5120

sw.bb13:                                          ; preds = %entry
  %14 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !5121
  %has_nans = getelementptr inbounds %struct.real_format, %struct.real_format* %14, i32 0, i32 11, !dbg !5123
  %15 = load i8, i8* %has_nans, align 2, !dbg !5123
  %tobool14 = icmp ne i8 %15, 0, !dbg !5121
  br i1 %tobool14, label %if.then15, label %if.else45, !dbg !5124

if.then15:                                        ; preds = %sw.bb13
  %16 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5125
  %17 = bitcast %struct.real_value* %16 to i32*, !dbg !5128
  %bf.load16 = load i32, i32* %17, align 8, !dbg !5128
  %bf.lshr17 = lshr i32 %bf.load16, 5, !dbg !5128
  %bf.clear18 = and i32 %bf.lshr17, 1, !dbg !5128
  %tobool19 = icmp ne i32 %bf.clear18, 0, !dbg !5125
  br i1 %tobool19, label %if.then20, label %if.end25, !dbg !5129

if.then20:                                        ; preds = %if.then15
  %18 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !5130
  %canonical_nan_lsbs_set = getelementptr inbounds %struct.real_format, %struct.real_format* %18, i32 0, i32 16, !dbg !5133
  %19 = load i8, i8* %canonical_nan_lsbs_set, align 1, !dbg !5133
  %tobool21 = icmp ne i8 %19, 0, !dbg !5130
  br i1 %tobool21, label %if.then22, label %if.else23, !dbg !5134

if.then22:                                        ; preds = %if.then20
  store i64 524287, i64* %sig_hi, align 8, !dbg !5135
  store i64 4294967295, i64* %sig_lo, align 8, !dbg !5137
  br label %if.end24, !dbg !5138

if.else23:                                        ; preds = %if.then20
  store i64 0, i64* %sig_hi, align 8, !dbg !5139
  store i64 0, i64* %sig_lo, align 8, !dbg !5141
  br label %if.end24

if.end24:                                         ; preds = %if.else23, %if.then22
  br label %if.end25, !dbg !5142

if.end25:                                         ; preds = %if.end24, %if.then15
  %20 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5143
  %21 = bitcast %struct.real_value* %20 to i32*, !dbg !5145
  %bf.load26 = load i32, i32* %21, align 8, !dbg !5145
  %bf.lshr27 = lshr i32 %bf.load26, 4, !dbg !5145
  %bf.clear28 = and i32 %bf.lshr27, 1, !dbg !5145
  %22 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !5146
  %qnan_msb_set = getelementptr inbounds %struct.real_format, %struct.real_format* %22, i32 0, i32 15, !dbg !5147
  %23 = load i8, i8* %qnan_msb_set, align 2, !dbg !5147
  %conv29 = zext i8 %23 to i32, !dbg !5146
  %cmp30 = icmp eq i32 %bf.clear28, %conv29, !dbg !5148
  br i1 %cmp30, label %if.then32, label %if.else34, !dbg !5149

if.then32:                                        ; preds = %if.end25
  %24 = load i64, i64* %sig_hi, align 8, !dbg !5150
  %and33 = and i64 %24, -524289, !dbg !5150
  store i64 %and33, i64* %sig_hi, align 8, !dbg !5150
  br label %if.end36, !dbg !5151

if.else34:                                        ; preds = %if.end25
  %25 = load i64, i64* %sig_hi, align 8, !dbg !5152
  %or35 = or i64 %25, 524288, !dbg !5152
  store i64 %or35, i64* %sig_hi, align 8, !dbg !5152
  br label %if.end36

if.end36:                                         ; preds = %if.else34, %if.then32
  %26 = load i64, i64* %sig_hi, align 8, !dbg !5153
  %cmp37 = icmp eq i64 %26, 0, !dbg !5155
  br i1 %cmp37, label %land.lhs.true, label %if.end42, !dbg !5156

land.lhs.true:                                    ; preds = %if.end36
  %27 = load i64, i64* %sig_lo, align 8, !dbg !5157
  %cmp39 = icmp eq i64 %27, 0, !dbg !5158
  br i1 %cmp39, label %if.then41, label %if.end42, !dbg !5159

if.then41:                                        ; preds = %land.lhs.true
  store i64 262144, i64* %sig_hi, align 8, !dbg !5160
  br label %if.end42, !dbg !5161

if.end42:                                         ; preds = %if.then41, %land.lhs.true, %if.end36
  %28 = load i64, i64* %image_hi, align 8, !dbg !5162
  %or43 = or i64 %28, 2146435072, !dbg !5162
  store i64 %or43, i64* %image_hi, align 8, !dbg !5162
  %29 = load i64, i64* %sig_hi, align 8, !dbg !5163
  %30 = load i64, i64* %image_hi, align 8, !dbg !5164
  %or44 = or i64 %30, %29, !dbg !5164
  store i64 %or44, i64* %image_hi, align 8, !dbg !5164
  %31 = load i64, i64* %sig_lo, align 8, !dbg !5165
  store i64 %31, i64* %image_lo, align 8, !dbg !5166
  br label %if.end47, !dbg !5167

if.else45:                                        ; preds = %sw.bb13
  %32 = load i64, i64* %image_hi, align 8, !dbg !5168
  %or46 = or i64 %32, 2147483647, !dbg !5168
  store i64 %or46, i64* %image_hi, align 8, !dbg !5168
  store i64 4294967295, i64* %image_lo, align 8, !dbg !5170
  br label %if.end47

if.end47:                                         ; preds = %if.else45, %if.end42
  br label %sw.epilog, !dbg !5171

sw.bb48:                                          ; preds = %entry
  %33 = load i8, i8* %denormal, align 1, !dbg !5172
  %tobool49 = icmp ne i8 %33, 0, !dbg !5172
  br i1 %tobool49, label %if.then50, label %if.else51, !dbg !5174

if.then50:                                        ; preds = %sw.bb48
  store i64 0, i64* %exp, align 8, !dbg !5175
  br label %if.end56, !dbg !5176

if.else51:                                        ; preds = %sw.bb48
  %34 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5177
  %35 = bitcast %struct.real_value* %34 to i32*, !dbg !5177
  %bf.load52 = load i32, i32* %35, align 8, !dbg !5177
  %bf.lshr53 = lshr i32 %bf.load52, 6, !dbg !5177
  %xor = xor i32 %bf.lshr53, 33554432, !dbg !5177
  %sub = sub nsw i32 %xor, 33554432, !dbg !5177
  %add = add nsw i32 %sub, 1023, !dbg !5178
  %sub54 = sub nsw i32 %add, 1, !dbg !5179
  %conv55 = sext i32 %sub54 to i64, !dbg !5177
  store i64 %conv55, i64* %exp, align 8, !dbg !5180
  br label %if.end56

if.end56:                                         ; preds = %if.else51, %if.then50
  %36 = load i64, i64* %exp, align 8, !dbg !5181
  %shl57 = shl i64 %36, 20, !dbg !5182
  %37 = load i64, i64* %image_hi, align 8, !dbg !5183
  %or58 = or i64 %37, %shl57, !dbg !5183
  store i64 %or58, i64* %image_hi, align 8, !dbg !5183
  %38 = load i64, i64* %sig_hi, align 8, !dbg !5184
  %39 = load i64, i64* %image_hi, align 8, !dbg !5185
  %or59 = or i64 %39, %38, !dbg !5185
  store i64 %or59, i64* %image_hi, align 8, !dbg !5185
  %40 = load i64, i64* %sig_lo, align 8, !dbg !5186
  store i64 %40, i64* %image_lo, align 8, !dbg !5187
  br label %sw.epilog, !dbg !5188

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 3224, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5189
  br label %sw.epilog, !dbg !5190

sw.epilog:                                        ; preds = %sw.default, %if.end56, %if.end47, %if.end, %sw.bb
  %41 = load i64, i64* %image_lo, align 8, !dbg !5191
  %42 = load i64*, i64** %buf.addr, align 8, !dbg !5193
  %arrayidx60 = getelementptr inbounds i64, i64* %42, i64 0, !dbg !5193
  store i64 %41, i64* %arrayidx60, align 8, !dbg !5194
  %43 = load i64, i64* %image_hi, align 8, !dbg !5195
  %44 = load i64*, i64** %buf.addr, align 8, !dbg !5196
  %arrayidx61 = getelementptr inbounds i64, i64* %44, i64 1, !dbg !5196
  store i64 %43, i64* %arrayidx61, align 8, !dbg !5197
  ret void, !dbg !5198
}

; Function Attrs: noinline nounwind uwtable
define internal void @decode_ieee_double(%struct.real_format* %fmt, %struct.real_value* %r, i64* %buf) #0 !dbg !5199 {
entry:
  %fmt.addr = alloca %struct.real_format*, align 8
  %r.addr = alloca %struct.real_value*, align 8
  %buf.addr = alloca i64*, align 8
  %image_hi = alloca i64, align 8
  %image_lo = alloca i64, align 8
  %sign = alloca i8, align 1
  %exp = alloca i32, align 4
  store %struct.real_format* %fmt, %struct.real_format** %fmt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_format** %fmt.addr, metadata !5200, metadata !DIExpression()), !dbg !5201
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !5202, metadata !DIExpression()), !dbg !5203
  store i64* %buf, i64** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %buf.addr, metadata !5204, metadata !DIExpression()), !dbg !5205
  call void @llvm.dbg.declare(metadata i64* %image_hi, metadata !5206, metadata !DIExpression()), !dbg !5207
  call void @llvm.dbg.declare(metadata i64* %image_lo, metadata !5208, metadata !DIExpression()), !dbg !5209
  call void @llvm.dbg.declare(metadata i8* %sign, metadata !5210, metadata !DIExpression()), !dbg !5211
  call void @llvm.dbg.declare(metadata i32* %exp, metadata !5212, metadata !DIExpression()), !dbg !5213
  %0 = load i64*, i64** %buf.addr, align 8, !dbg !5214
  %arrayidx = getelementptr inbounds i64, i64* %0, i64 0, !dbg !5214
  %1 = load i64, i64* %arrayidx, align 8, !dbg !5214
  store i64 %1, i64* %image_lo, align 8, !dbg !5216
  %2 = load i64*, i64** %buf.addr, align 8, !dbg !5217
  %arrayidx1 = getelementptr inbounds i64, i64* %2, i64 1, !dbg !5217
  %3 = load i64, i64* %arrayidx1, align 8, !dbg !5217
  store i64 %3, i64* %image_hi, align 8, !dbg !5218
  %4 = load i64, i64* %image_lo, align 8, !dbg !5219
  %and = and i64 %4, 4294967295, !dbg !5219
  store i64 %and, i64* %image_lo, align 8, !dbg !5219
  %5 = load i64, i64* %image_hi, align 8, !dbg !5220
  %and2 = and i64 %5, 4294967295, !dbg !5220
  store i64 %and2, i64* %image_hi, align 8, !dbg !5220
  %6 = load i64, i64* %image_hi, align 8, !dbg !5221
  %shr = lshr i64 %6, 31, !dbg !5222
  %and3 = and i64 %shr, 1, !dbg !5223
  %conv = trunc i64 %and3 to i8, !dbg !5224
  store i8 %conv, i8* %sign, align 1, !dbg !5225
  %7 = load i64, i64* %image_hi, align 8, !dbg !5226
  %shr4 = lshr i64 %7, 20, !dbg !5227
  %and5 = and i64 %shr4, 2047, !dbg !5228
  %conv6 = trunc i64 %and5 to i32, !dbg !5229
  store i32 %conv6, i32* %exp, align 4, !dbg !5230
  %8 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5231
  %9 = bitcast %struct.real_value* %8 to i8*, !dbg !5232
  call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 32, i1 false), !dbg !5232
  %10 = load i64, i64* %image_hi, align 8, !dbg !5233
  %shl = shl i64 %10, 11, !dbg !5233
  store i64 %shl, i64* %image_hi, align 8, !dbg !5233
  %11 = load i64, i64* %image_lo, align 8, !dbg !5234
  %shr7 = lshr i64 %11, 21, !dbg !5235
  %12 = load i64, i64* %image_hi, align 8, !dbg !5236
  %or = or i64 %12, %shr7, !dbg !5236
  store i64 %or, i64* %image_hi, align 8, !dbg !5236
  %13 = load i64, i64* %image_hi, align 8, !dbg !5237
  %and8 = and i64 %13, 2147483647, !dbg !5237
  store i64 %and8, i64* %image_hi, align 8, !dbg !5237
  %14 = load i64, i64* %image_lo, align 8, !dbg !5238
  %shl9 = shl i64 %14, 11, !dbg !5238
  store i64 %shl9, i64* %image_lo, align 8, !dbg !5238
  %15 = load i32, i32* %exp, align 4, !dbg !5239
  %cmp = icmp eq i32 %15, 0, !dbg !5241
  br i1 %cmp, label %if.then, label %if.else36, !dbg !5242

if.then:                                          ; preds = %entry
  %16 = load i64, i64* %image_hi, align 8, !dbg !5243
  %tobool = icmp ne i64 %16, 0, !dbg !5243
  br i1 %tobool, label %land.lhs.true, label %lor.lhs.false, !dbg !5246

lor.lhs.false:                                    ; preds = %if.then
  %17 = load i64, i64* %image_lo, align 8, !dbg !5247
  %tobool11 = icmp ne i64 %17, 0, !dbg !5247
  br i1 %tobool11, label %land.lhs.true, label %if.else, !dbg !5248

land.lhs.true:                                    ; preds = %lor.lhs.false, %if.then
  %18 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !5249
  %has_denorm = getelementptr inbounds %struct.real_format, %struct.real_format* %18, i32 0, i32 13, !dbg !5250
  %19 = load i8, i8* %has_denorm, align 8, !dbg !5250
  %conv12 = zext i8 %19 to i32, !dbg !5249
  %tobool13 = icmp ne i32 %conv12, 0, !dbg !5249
  br i1 %tobool13, label %if.then14, label %if.else, !dbg !5251

if.then14:                                        ; preds = %land.lhs.true
  %20 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5252
  %21 = bitcast %struct.real_value* %20 to i32*, !dbg !5254
  %bf.load = load i32, i32* %21, align 8, !dbg !5255
  %bf.clear = and i32 %bf.load, -4, !dbg !5255
  %bf.set = or i32 %bf.clear, 1, !dbg !5255
  store i32 %bf.set, i32* %21, align 8, !dbg !5255
  %22 = load i8, i8* %sign, align 1, !dbg !5256
  %conv15 = zext i8 %22 to i32, !dbg !5256
  %23 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5257
  %24 = bitcast %struct.real_value* %23 to i32*, !dbg !5258
  %bf.load16 = load i32, i32* %24, align 8, !dbg !5259
  %bf.value = and i32 %conv15, 1, !dbg !5259
  %bf.shl = shl i32 %bf.value, 3, !dbg !5259
  %bf.clear17 = and i32 %bf.load16, -9, !dbg !5259
  %bf.set18 = or i32 %bf.clear17, %bf.shl, !dbg !5259
  store i32 %bf.set18, i32* %24, align 8, !dbg !5259
  %25 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5260
  %26 = bitcast %struct.real_value* %25 to i32*, !dbg !5260
  %bf.load19 = load i32, i32* %26, align 8, !dbg !5260
  %bf.clear20 = and i32 %bf.load19, 63, !dbg !5260
  %bf.set21 = or i32 %bf.clear20, -65408, !dbg !5260
  store i32 %bf.set21, i32* %26, align 8, !dbg !5260
  %27 = load i64, i64* %image_hi, align 8, !dbg !5261
  %shl22 = shl i64 %27, 31, !dbg !5264
  %shl23 = shl i64 %shl22, 2, !dbg !5265
  %28 = load i64, i64* %image_lo, align 8, !dbg !5266
  %shl24 = shl i64 %28, 1, !dbg !5267
  %or25 = or i64 %shl23, %shl24, !dbg !5268
  store i64 %or25, i64* %image_hi, align 8, !dbg !5269
  %29 = load i64, i64* %image_hi, align 8, !dbg !5270
  %30 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5271
  %sig = getelementptr inbounds %struct.real_value, %struct.real_value* %30, i32 0, i32 1, !dbg !5272
  %arrayidx26 = getelementptr inbounds [3 x i64], [3 x i64]* %sig, i64 0, i64 2, !dbg !5271
  store i64 %29, i64* %arrayidx26, align 8, !dbg !5273
  %31 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5274
  call void @normalize(%struct.real_value* %31), !dbg !5275
  br label %if.end35, !dbg !5276

if.else:                                          ; preds = %land.lhs.true, %lor.lhs.false
  %32 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !5277
  %has_signed_zero = getelementptr inbounds %struct.real_format, %struct.real_format* %32, i32 0, i32 14, !dbg !5279
  %33 = load i8, i8* %has_signed_zero, align 1, !dbg !5279
  %tobool27 = icmp ne i8 %33, 0, !dbg !5277
  br i1 %tobool27, label %if.then28, label %if.end, !dbg !5280

if.then28:                                        ; preds = %if.else
  %34 = load i8, i8* %sign, align 1, !dbg !5281
  %conv29 = zext i8 %34 to i32, !dbg !5281
  %35 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5282
  %36 = bitcast %struct.real_value* %35 to i32*, !dbg !5283
  %bf.load30 = load i32, i32* %36, align 8, !dbg !5284
  %bf.value31 = and i32 %conv29, 1, !dbg !5284
  %bf.shl32 = shl i32 %bf.value31, 3, !dbg !5284
  %bf.clear33 = and i32 %bf.load30, -9, !dbg !5284
  %bf.set34 = or i32 %bf.clear33, %bf.shl32, !dbg !5284
  store i32 %bf.set34, i32* %36, align 8, !dbg !5284
  br label %if.end, !dbg !5282

if.end:                                           ; preds = %if.then28, %if.else
  br label %if.end35

if.end35:                                         ; preds = %if.end, %if.then14
  br label %if.end107, !dbg !5285

if.else36:                                        ; preds = %entry
  %37 = load i32, i32* %exp, align 4, !dbg !5286
  %cmp37 = icmp eq i32 %37, 2047, !dbg !5288
  br i1 %cmp37, label %land.lhs.true39, label %if.else84, !dbg !5289

land.lhs.true39:                                  ; preds = %if.else36
  %38 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !5290
  %has_nans = getelementptr inbounds %struct.real_format, %struct.real_format* %38, i32 0, i32 11, !dbg !5291
  %39 = load i8, i8* %has_nans, align 2, !dbg !5291
  %conv40 = zext i8 %39 to i32, !dbg !5290
  %tobool41 = icmp ne i32 %conv40, 0, !dbg !5290
  br i1 %tobool41, label %if.then45, label %lor.lhs.false42, !dbg !5292

lor.lhs.false42:                                  ; preds = %land.lhs.true39
  %40 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !5293
  %has_inf = getelementptr inbounds %struct.real_format, %struct.real_format* %40, i32 0, i32 12, !dbg !5294
  %41 = load i8, i8* %has_inf, align 1, !dbg !5294
  %conv43 = zext i8 %41 to i32, !dbg !5293
  %tobool44 = icmp ne i32 %conv43, 0, !dbg !5293
  br i1 %tobool44, label %if.then45, label %if.else84, !dbg !5295

if.then45:                                        ; preds = %lor.lhs.false42, %land.lhs.true39
  %42 = load i64, i64* %image_hi, align 8, !dbg !5296
  %tobool46 = icmp ne i64 %42, 0, !dbg !5296
  br i1 %tobool46, label %if.then49, label %lor.lhs.false47, !dbg !5299

lor.lhs.false47:                                  ; preds = %if.then45
  %43 = load i64, i64* %image_lo, align 8, !dbg !5300
  %tobool48 = icmp ne i64 %43, 0, !dbg !5300
  br i1 %tobool48, label %if.then49, label %if.else73, !dbg !5301

if.then49:                                        ; preds = %lor.lhs.false47, %if.then45
  %44 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5302
  %45 = bitcast %struct.real_value* %44 to i32*, !dbg !5304
  %bf.load50 = load i32, i32* %45, align 8, !dbg !5305
  %bf.clear51 = and i32 %bf.load50, -4, !dbg !5305
  %bf.set52 = or i32 %bf.clear51, 3, !dbg !5305
  store i32 %bf.set52, i32* %45, align 8, !dbg !5305
  %46 = load i8, i8* %sign, align 1, !dbg !5306
  %conv53 = zext i8 %46 to i32, !dbg !5306
  %47 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5307
  %48 = bitcast %struct.real_value* %47 to i32*, !dbg !5308
  %bf.load54 = load i32, i32* %48, align 8, !dbg !5309
  %bf.value55 = and i32 %conv53, 1, !dbg !5309
  %bf.shl56 = shl i32 %bf.value55, 3, !dbg !5309
  %bf.clear57 = and i32 %bf.load54, -9, !dbg !5309
  %bf.set58 = or i32 %bf.clear57, %bf.shl56, !dbg !5309
  store i32 %bf.set58, i32* %48, align 8, !dbg !5309
  %49 = load i64, i64* %image_hi, align 8, !dbg !5310
  %shr59 = lshr i64 %49, 30, !dbg !5311
  %and60 = and i64 %shr59, 1, !dbg !5312
  %50 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !5313
  %qnan_msb_set = getelementptr inbounds %struct.real_format, %struct.real_format* %50, i32 0, i32 15, !dbg !5314
  %51 = load i8, i8* %qnan_msb_set, align 2, !dbg !5314
  %conv61 = zext i8 %51 to i64, !dbg !5313
  %xor = xor i64 %and60, %conv61, !dbg !5315
  %conv62 = trunc i64 %xor to i32, !dbg !5316
  %52 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5317
  %53 = bitcast %struct.real_value* %52 to i32*, !dbg !5318
  %bf.load63 = load i32, i32* %53, align 8, !dbg !5319
  %bf.value64 = and i32 %conv62, 1, !dbg !5319
  %bf.shl65 = shl i32 %bf.value64, 4, !dbg !5319
  %bf.clear66 = and i32 %bf.load63, -17, !dbg !5319
  %bf.set67 = or i32 %bf.clear66, %bf.shl65, !dbg !5319
  store i32 %bf.set67, i32* %53, align 8, !dbg !5319
  %54 = load i64, i64* %image_hi, align 8, !dbg !5320
  %shl68 = shl i64 %54, 31, !dbg !5322
  %shl69 = shl i64 %shl68, 1, !dbg !5323
  %55 = load i64, i64* %image_lo, align 8, !dbg !5324
  %or70 = or i64 %shl69, %55, !dbg !5325
  %56 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5326
  %sig71 = getelementptr inbounds %struct.real_value, %struct.real_value* %56, i32 0, i32 1, !dbg !5327
  %arrayidx72 = getelementptr inbounds [3 x i64], [3 x i64]* %sig71, i64 0, i64 2, !dbg !5326
  store i64 %or70, i64* %arrayidx72, align 8, !dbg !5328
  br label %if.end83, !dbg !5329

if.else73:                                        ; preds = %lor.lhs.false47
  %57 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5330
  %58 = bitcast %struct.real_value* %57 to i32*, !dbg !5332
  %bf.load74 = load i32, i32* %58, align 8, !dbg !5333
  %bf.clear75 = and i32 %bf.load74, -4, !dbg !5333
  %bf.set76 = or i32 %bf.clear75, 2, !dbg !5333
  store i32 %bf.set76, i32* %58, align 8, !dbg !5333
  %59 = load i8, i8* %sign, align 1, !dbg !5334
  %conv77 = zext i8 %59 to i32, !dbg !5334
  %60 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5335
  %61 = bitcast %struct.real_value* %60 to i32*, !dbg !5336
  %bf.load78 = load i32, i32* %61, align 8, !dbg !5337
  %bf.value79 = and i32 %conv77, 1, !dbg !5337
  %bf.shl80 = shl i32 %bf.value79, 3, !dbg !5337
  %bf.clear81 = and i32 %bf.load78, -9, !dbg !5337
  %bf.set82 = or i32 %bf.clear81, %bf.shl80, !dbg !5337
  store i32 %bf.set82, i32* %61, align 8, !dbg !5337
  br label %if.end83

if.end83:                                         ; preds = %if.else73, %if.then49
  br label %if.end106, !dbg !5338

if.else84:                                        ; preds = %lor.lhs.false42, %if.else36
  %62 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5339
  %63 = bitcast %struct.real_value* %62 to i32*, !dbg !5341
  %bf.load85 = load i32, i32* %63, align 8, !dbg !5342
  %bf.clear86 = and i32 %bf.load85, -4, !dbg !5342
  %bf.set87 = or i32 %bf.clear86, 1, !dbg !5342
  store i32 %bf.set87, i32* %63, align 8, !dbg !5342
  %64 = load i8, i8* %sign, align 1, !dbg !5343
  %conv88 = zext i8 %64 to i32, !dbg !5343
  %65 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5344
  %66 = bitcast %struct.real_value* %65 to i32*, !dbg !5345
  %bf.load89 = load i32, i32* %66, align 8, !dbg !5346
  %bf.value90 = and i32 %conv88, 1, !dbg !5346
  %bf.shl91 = shl i32 %bf.value90, 3, !dbg !5346
  %bf.clear92 = and i32 %bf.load89, -9, !dbg !5346
  %bf.set93 = or i32 %bf.clear92, %bf.shl91, !dbg !5346
  store i32 %bf.set93, i32* %66, align 8, !dbg !5346
  %67 = load i32, i32* %exp, align 4, !dbg !5347
  %sub = sub nsw i32 %67, 1023, !dbg !5347
  %add = add nsw i32 %sub, 1, !dbg !5347
  %and94 = and i32 %add, 67108863, !dbg !5347
  %68 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5347
  %69 = bitcast %struct.real_value* %68 to i32*, !dbg !5347
  %bf.load95 = load i32, i32* %69, align 8, !dbg !5347
  %bf.value96 = and i32 %and94, 67108863, !dbg !5347
  %bf.shl97 = shl i32 %bf.value96, 6, !dbg !5347
  %bf.clear98 = and i32 %bf.load95, 63, !dbg !5347
  %bf.set99 = or i32 %bf.clear98, %bf.shl97, !dbg !5347
  store i32 %bf.set99, i32* %69, align 8, !dbg !5347
  %70 = load i64, i64* %image_hi, align 8, !dbg !5348
  %shl100 = shl i64 %70, 31, !dbg !5350
  %shl101 = shl i64 %shl100, 1, !dbg !5351
  %71 = load i64, i64* %image_lo, align 8, !dbg !5352
  %or102 = or i64 %shl101, %71, !dbg !5353
  %or103 = or i64 %or102, -9223372036854775808, !dbg !5354
  %72 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5355
  %sig104 = getelementptr inbounds %struct.real_value, %struct.real_value* %72, i32 0, i32 1, !dbg !5356
  %arrayidx105 = getelementptr inbounds [3 x i64], [3 x i64]* %sig104, i64 0, i64 2, !dbg !5355
  store i64 %or103, i64* %arrayidx105, align 8, !dbg !5357
  br label %if.end106

if.end106:                                        ; preds = %if.else84, %if.end83
  br label %if.end107

if.end107:                                        ; preds = %if.end106, %if.end35
  ret void, !dbg !5358
}

; Function Attrs: noinline nounwind uwtable
define internal void @encode_ieee_extended_motorola(%struct.real_format* %fmt, i64* %buf, %struct.real_value* %r) #0 !dbg !5359 {
entry:
  %fmt.addr = alloca %struct.real_format*, align 8
  %buf.addr = alloca i64*, align 8
  %r.addr = alloca %struct.real_value*, align 8
  %intermed = alloca [3 x i64], align 16
  store %struct.real_format* %fmt, %struct.real_format** %fmt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_format** %fmt.addr, metadata !5360, metadata !DIExpression()), !dbg !5361
  store i64* %buf, i64** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %buf.addr, metadata !5362, metadata !DIExpression()), !dbg !5363
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !5364, metadata !DIExpression()), !dbg !5365
  call void @llvm.dbg.declare(metadata [3 x i64]* %intermed, metadata !5366, metadata !DIExpression()), !dbg !5368
  %0 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !5369
  %arraydecay = getelementptr inbounds [3 x i64], [3 x i64]* %intermed, i64 0, i64 0, !dbg !5370
  %1 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5371
  call void @encode_ieee_extended(%struct.real_format* %0, i64* %arraydecay, %struct.real_value* %1), !dbg !5372
  %arrayidx = getelementptr inbounds [3 x i64], [3 x i64]* %intermed, i64 0, i64 2, !dbg !5373
  %2 = load i64, i64* %arrayidx, align 16, !dbg !5373
  %shl = shl i64 %2, 16, !dbg !5374
  %3 = load i64*, i64** %buf.addr, align 8, !dbg !5375
  %arrayidx1 = getelementptr inbounds i64, i64* %3, i64 0, !dbg !5375
  store i64 %shl, i64* %arrayidx1, align 8, !dbg !5376
  %arrayidx2 = getelementptr inbounds [3 x i64], [3 x i64]* %intermed, i64 0, i64 1, !dbg !5377
  %4 = load i64, i64* %arrayidx2, align 8, !dbg !5377
  %5 = load i64*, i64** %buf.addr, align 8, !dbg !5378
  %arrayidx3 = getelementptr inbounds i64, i64* %5, i64 1, !dbg !5378
  store i64 %4, i64* %arrayidx3, align 8, !dbg !5379
  %arrayidx4 = getelementptr inbounds [3 x i64], [3 x i64]* %intermed, i64 0, i64 0, !dbg !5380
  %6 = load i64, i64* %arrayidx4, align 16, !dbg !5380
  %7 = load i64*, i64** %buf.addr, align 8, !dbg !5381
  %arrayidx5 = getelementptr inbounds i64, i64* %7, i64 2, !dbg !5381
  store i64 %6, i64* %arrayidx5, align 8, !dbg !5382
  ret void, !dbg !5383
}

; Function Attrs: noinline nounwind uwtable
define internal void @decode_ieee_extended_motorola(%struct.real_format* %fmt, %struct.real_value* %r, i64* %buf) #0 !dbg !5384 {
entry:
  %fmt.addr = alloca %struct.real_format*, align 8
  %r.addr = alloca %struct.real_value*, align 8
  %buf.addr = alloca i64*, align 8
  %intermed = alloca [3 x i64], align 16
  store %struct.real_format* %fmt, %struct.real_format** %fmt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_format** %fmt.addr, metadata !5385, metadata !DIExpression()), !dbg !5386
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !5387, metadata !DIExpression()), !dbg !5388
  store i64* %buf, i64** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %buf.addr, metadata !5389, metadata !DIExpression()), !dbg !5390
  call void @llvm.dbg.declare(metadata [3 x i64]* %intermed, metadata !5391, metadata !DIExpression()), !dbg !5392
  %0 = load i64*, i64** %buf.addr, align 8, !dbg !5393
  %arrayidx = getelementptr inbounds i64, i64* %0, i64 2, !dbg !5393
  %1 = load i64, i64* %arrayidx, align 8, !dbg !5393
  %arrayidx1 = getelementptr inbounds [3 x i64], [3 x i64]* %intermed, i64 0, i64 0, !dbg !5394
  store i64 %1, i64* %arrayidx1, align 16, !dbg !5395
  %2 = load i64*, i64** %buf.addr, align 8, !dbg !5396
  %arrayidx2 = getelementptr inbounds i64, i64* %2, i64 1, !dbg !5396
  %3 = load i64, i64* %arrayidx2, align 8, !dbg !5396
  %arrayidx3 = getelementptr inbounds [3 x i64], [3 x i64]* %intermed, i64 0, i64 1, !dbg !5397
  store i64 %3, i64* %arrayidx3, align 8, !dbg !5398
  %4 = load i64*, i64** %buf.addr, align 8, !dbg !5399
  %arrayidx4 = getelementptr inbounds i64, i64* %4, i64 0, !dbg !5399
  %5 = load i64, i64* %arrayidx4, align 8, !dbg !5399
  %shr = lshr i64 %5, 16, !dbg !5400
  %arrayidx5 = getelementptr inbounds [3 x i64], [3 x i64]* %intermed, i64 0, i64 2, !dbg !5401
  store i64 %shr, i64* %arrayidx5, align 16, !dbg !5402
  %6 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !5403
  %7 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5404
  %arraydecay = getelementptr inbounds [3 x i64], [3 x i64]* %intermed, i64 0, i64 0, !dbg !5405
  call void @decode_ieee_extended(%struct.real_format* %6, %struct.real_value* %7, i64* %arraydecay), !dbg !5406
  ret void, !dbg !5407
}

; Function Attrs: noinline nounwind uwtable
define internal void @encode_ieee_extended_intel_96(%struct.real_format* %fmt, i64* %buf, %struct.real_value* %r) #0 !dbg !5408 {
entry:
  %fmt.addr = alloca %struct.real_format*, align 8
  %buf.addr = alloca i64*, align 8
  %r.addr = alloca %struct.real_value*, align 8
  store %struct.real_format* %fmt, %struct.real_format** %fmt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_format** %fmt.addr, metadata !5409, metadata !DIExpression()), !dbg !5410
  store i64* %buf, i64** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %buf.addr, metadata !5411, metadata !DIExpression()), !dbg !5412
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !5413, metadata !DIExpression()), !dbg !5414
  %0 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !5415
  %1 = load i64*, i64** %buf.addr, align 8, !dbg !5417
  %2 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5418
  call void @encode_ieee_extended(%struct.real_format* %0, i64* %1, %struct.real_value* %2), !dbg !5419
  ret void, !dbg !5420
}

; Function Attrs: noinline nounwind uwtable
define internal void @decode_ieee_extended_intel_96(%struct.real_format* %fmt, %struct.real_value* %r, i64* %buf) #0 !dbg !5421 {
entry:
  %fmt.addr = alloca %struct.real_format*, align 8
  %r.addr = alloca %struct.real_value*, align 8
  %buf.addr = alloca i64*, align 8
  store %struct.real_format* %fmt, %struct.real_format** %fmt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_format** %fmt.addr, metadata !5422, metadata !DIExpression()), !dbg !5423
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !5424, metadata !DIExpression()), !dbg !5425
  store i64* %buf, i64** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %buf.addr, metadata !5426, metadata !DIExpression()), !dbg !5427
  %0 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !5428
  %1 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5430
  %2 = load i64*, i64** %buf.addr, align 8, !dbg !5431
  call void @decode_ieee_extended(%struct.real_format* %0, %struct.real_value* %1, i64* %2), !dbg !5432
  ret void, !dbg !5433
}

; Function Attrs: noinline nounwind uwtable
define internal void @encode_ieee_extended_intel_128(%struct.real_format* %fmt, i64* %buf, %struct.real_value* %r) #0 !dbg !5434 {
entry:
  %fmt.addr = alloca %struct.real_format*, align 8
  %buf.addr = alloca i64*, align 8
  %r.addr = alloca %struct.real_value*, align 8
  store %struct.real_format* %fmt, %struct.real_format** %fmt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_format** %fmt.addr, metadata !5435, metadata !DIExpression()), !dbg !5436
  store i64* %buf, i64** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %buf.addr, metadata !5437, metadata !DIExpression()), !dbg !5438
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !5439, metadata !DIExpression()), !dbg !5440
  %0 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !5441
  %1 = load i64*, i64** %buf.addr, align 8, !dbg !5442
  %2 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5443
  call void @encode_ieee_extended_intel_96(%struct.real_format* %0, i64* %1, %struct.real_value* %2), !dbg !5444
  %3 = load i64*, i64** %buf.addr, align 8, !dbg !5445
  %arrayidx = getelementptr inbounds i64, i64* %3, i64 3, !dbg !5445
  store i64 0, i64* %arrayidx, align 8, !dbg !5446
  ret void, !dbg !5447
}

; Function Attrs: noinline nounwind uwtable
define internal void @decode_ieee_extended_intel_128(%struct.real_format* %fmt, %struct.real_value* %r, i64* %buf) #0 !dbg !5448 {
entry:
  %fmt.addr = alloca %struct.real_format*, align 8
  %r.addr = alloca %struct.real_value*, align 8
  %buf.addr = alloca i64*, align 8
  store %struct.real_format* %fmt, %struct.real_format** %fmt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_format** %fmt.addr, metadata !5449, metadata !DIExpression()), !dbg !5450
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !5451, metadata !DIExpression()), !dbg !5452
  store i64* %buf, i64** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %buf.addr, metadata !5453, metadata !DIExpression()), !dbg !5454
  %0 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !5455
  %1 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5456
  %2 = load i64*, i64** %buf.addr, align 8, !dbg !5457
  call void @decode_ieee_extended_intel_96(%struct.real_format* %0, %struct.real_value* %1, i64* %2), !dbg !5458
  ret void, !dbg !5459
}

; Function Attrs: noinline nounwind uwtable
define internal void @encode_ibm_extended(%struct.real_format* %fmt, i64* %buf, %struct.real_value* %r) #0 !dbg !5460 {
entry:
  %fmt.addr = alloca %struct.real_format*, align 8
  %buf.addr = alloca i64*, align 8
  %r.addr = alloca %struct.real_value*, align 8
  %u = alloca %struct.real_value, align 8
  %normr = alloca %struct.real_value, align 8
  %v = alloca %struct.real_value, align 8
  %base_fmt = alloca %struct.real_format*, align 8
  store %struct.real_format* %fmt, %struct.real_format** %fmt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_format** %fmt.addr, metadata !5461, metadata !DIExpression()), !dbg !5462
  store i64* %buf, i64** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %buf.addr, metadata !5463, metadata !DIExpression()), !dbg !5464
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !5465, metadata !DIExpression()), !dbg !5466
  call void @llvm.dbg.declare(metadata %struct.real_value* %u, metadata !5467, metadata !DIExpression()), !dbg !5468
  call void @llvm.dbg.declare(metadata %struct.real_value* %normr, metadata !5469, metadata !DIExpression()), !dbg !5470
  call void @llvm.dbg.declare(metadata %struct.real_value* %v, metadata !5471, metadata !DIExpression()), !dbg !5472
  call void @llvm.dbg.declare(metadata %struct.real_format** %base_fmt, metadata !5473, metadata !DIExpression()), !dbg !5474
  %0 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !5475
  %qnan_msb_set = getelementptr inbounds %struct.real_format, %struct.real_format* %0, i32 0, i32 15, !dbg !5476
  %1 = load i8, i8* %qnan_msb_set, align 2, !dbg !5476
  %conv = zext i8 %1 to i32, !dbg !5475
  %tobool = icmp ne i32 %conv, 0, !dbg !5475
  %2 = zext i1 %tobool to i64, !dbg !5475
  %cond = select i1 %tobool, %struct.real_format* @ieee_double_format, %struct.real_format* @mips_double_format, !dbg !5475
  store %struct.real_format* %cond, %struct.real_format** %base_fmt, align 8, !dbg !5477
  %3 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5478
  %4 = bitcast %struct.real_value* %normr to i8*, !dbg !5479
  %5 = bitcast %struct.real_value* %3 to i8*, !dbg !5479
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 32, i1 false), !dbg !5479
  %6 = bitcast %struct.real_value* %normr to i32*, !dbg !5480
  %bf.load = load i32, i32* %6, align 8, !dbg !5480
  %bf.clear = and i32 %bf.load, 3, !dbg !5480
  %cmp = icmp eq i32 %bf.clear, 1, !dbg !5482
  br i1 %cmp, label %if.then, label %if.end, !dbg !5483

if.then:                                          ; preds = %entry
  call void @normalize(%struct.real_value* %normr), !dbg !5484
  br label %if.end, !dbg !5484

if.end:                                           ; preds = %if.then, %entry
  %7 = bitcast %struct.real_value* %u to i8*, !dbg !5485
  %8 = bitcast %struct.real_value* %normr to i8*, !dbg !5485
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 %8, i64 32, i1 false), !dbg !5485
  %9 = load %struct.real_format*, %struct.real_format** %base_fmt, align 8, !dbg !5486
  call void @round_for_format(%struct.real_format* %9, %struct.real_value* %u), !dbg !5487
  %10 = load %struct.real_format*, %struct.real_format** %base_fmt, align 8, !dbg !5488
  %11 = load i64*, i64** %buf.addr, align 8, !dbg !5489
  %arrayidx = getelementptr inbounds i64, i64* %11, i64 0, !dbg !5489
  call void @encode_ieee_double(%struct.real_format* %10, i64* %arrayidx, %struct.real_value* %u), !dbg !5490
  %12 = bitcast %struct.real_value* %u to i32*, !dbg !5491
  %bf.load2 = load i32, i32* %12, align 8, !dbg !5491
  %bf.clear3 = and i32 %bf.load2, 3, !dbg !5491
  %cmp4 = icmp eq i32 %bf.clear3, 1, !dbg !5493
  br i1 %cmp4, label %if.then6, label %if.else, !dbg !5494

if.then6:                                         ; preds = %if.end
  %call = call zeroext i8 @do_add(%struct.real_value* %v, %struct.real_value* %normr, %struct.real_value* %u, i32 1), !dbg !5495
  %13 = load %struct.real_format*, %struct.real_format** %base_fmt, align 8, !dbg !5497
  call void @round_for_format(%struct.real_format* %13, %struct.real_value* %v), !dbg !5498
  %14 = load %struct.real_format*, %struct.real_format** %base_fmt, align 8, !dbg !5499
  %15 = load i64*, i64** %buf.addr, align 8, !dbg !5500
  %arrayidx7 = getelementptr inbounds i64, i64* %15, i64 2, !dbg !5500
  call void @encode_ieee_double(%struct.real_format* %14, i64* %arrayidx7, %struct.real_value* %v), !dbg !5501
  br label %if.end10, !dbg !5502

if.else:                                          ; preds = %if.end
  %16 = load i64*, i64** %buf.addr, align 8, !dbg !5503
  %arrayidx8 = getelementptr inbounds i64, i64* %16, i64 2, !dbg !5503
  store i64 0, i64* %arrayidx8, align 8, !dbg !5505
  %17 = load i64*, i64** %buf.addr, align 8, !dbg !5506
  %arrayidx9 = getelementptr inbounds i64, i64* %17, i64 3, !dbg !5506
  store i64 0, i64* %arrayidx9, align 8, !dbg !5507
  br label %if.end10

if.end10:                                         ; preds = %if.else, %if.then6
  ret void, !dbg !5508
}

; Function Attrs: noinline nounwind uwtable
define internal void @decode_ibm_extended(%struct.real_format* %fmt, %struct.real_value* %r, i64* %buf) #0 !dbg !5509 {
entry:
  %fmt.addr = alloca %struct.real_format*, align 8
  %r.addr = alloca %struct.real_value*, align 8
  %buf.addr = alloca i64*, align 8
  %u = alloca %struct.real_value, align 8
  %v = alloca %struct.real_value, align 8
  %base_fmt = alloca %struct.real_format*, align 8
  store %struct.real_format* %fmt, %struct.real_format** %fmt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_format** %fmt.addr, metadata !5510, metadata !DIExpression()), !dbg !5511
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !5512, metadata !DIExpression()), !dbg !5513
  store i64* %buf, i64** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %buf.addr, metadata !5514, metadata !DIExpression()), !dbg !5515
  call void @llvm.dbg.declare(metadata %struct.real_value* %u, metadata !5516, metadata !DIExpression()), !dbg !5517
  call void @llvm.dbg.declare(metadata %struct.real_value* %v, metadata !5518, metadata !DIExpression()), !dbg !5519
  call void @llvm.dbg.declare(metadata %struct.real_format** %base_fmt, metadata !5520, metadata !DIExpression()), !dbg !5521
  %0 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !5522
  %qnan_msb_set = getelementptr inbounds %struct.real_format, %struct.real_format* %0, i32 0, i32 15, !dbg !5523
  %1 = load i8, i8* %qnan_msb_set, align 2, !dbg !5523
  %conv = zext i8 %1 to i32, !dbg !5522
  %tobool = icmp ne i32 %conv, 0, !dbg !5522
  %2 = zext i1 %tobool to i64, !dbg !5522
  %cond = select i1 %tobool, %struct.real_format* @ieee_double_format, %struct.real_format* @mips_double_format, !dbg !5522
  store %struct.real_format* %cond, %struct.real_format** %base_fmt, align 8, !dbg !5524
  %3 = load %struct.real_format*, %struct.real_format** %base_fmt, align 8, !dbg !5525
  %4 = load i64*, i64** %buf.addr, align 8, !dbg !5526
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !5526
  call void @decode_ieee_double(%struct.real_format* %3, %struct.real_value* %u, i64* %arrayidx), !dbg !5527
  %5 = bitcast %struct.real_value* %u to i32*, !dbg !5528
  %bf.load = load i32, i32* %5, align 8, !dbg !5528
  %bf.clear = and i32 %bf.load, 3, !dbg !5528
  %cmp = icmp ne i32 %bf.clear, 0, !dbg !5530
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !5531

land.lhs.true:                                    ; preds = %entry
  %6 = bitcast %struct.real_value* %u to i32*, !dbg !5532
  %bf.load2 = load i32, i32* %6, align 8, !dbg !5532
  %bf.clear3 = and i32 %bf.load2, 3, !dbg !5532
  %cmp4 = icmp ne i32 %bf.clear3, 2, !dbg !5533
  br i1 %cmp4, label %land.lhs.true6, label %if.else, !dbg !5534

land.lhs.true6:                                   ; preds = %land.lhs.true
  %7 = bitcast %struct.real_value* %u to i32*, !dbg !5535
  %bf.load7 = load i32, i32* %7, align 8, !dbg !5535
  %bf.clear8 = and i32 %bf.load7, 3, !dbg !5535
  %cmp9 = icmp ne i32 %bf.clear8, 3, !dbg !5536
  br i1 %cmp9, label %if.then, label %if.else, !dbg !5537

if.then:                                          ; preds = %land.lhs.true6
  %8 = load %struct.real_format*, %struct.real_format** %base_fmt, align 8, !dbg !5538
  %9 = load i64*, i64** %buf.addr, align 8, !dbg !5540
  %arrayidx11 = getelementptr inbounds i64, i64* %9, i64 2, !dbg !5540
  call void @decode_ieee_double(%struct.real_format* %8, %struct.real_value* %v, i64* %arrayidx11), !dbg !5541
  %10 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5542
  %call = call zeroext i8 @do_add(%struct.real_value* %10, %struct.real_value* %u, %struct.real_value* %v, i32 0), !dbg !5543
  br label %if.end, !dbg !5544

if.else:                                          ; preds = %land.lhs.true6, %land.lhs.true, %entry
  %11 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5545
  %12 = bitcast %struct.real_value* %11 to i8*, !dbg !5546
  %13 = bitcast %struct.real_value* %u to i8*, !dbg !5546
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %12, i8* align 8 %13, i64 32, i1 false), !dbg !5546
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !5547
}

; Function Attrs: noinline nounwind uwtable
define internal void @encode_ieee_quad(%struct.real_format* %fmt, i64* %buf, %struct.real_value* %r) #0 !dbg !5548 {
entry:
  %fmt.addr = alloca %struct.real_format*, align 8
  %buf.addr = alloca i64*, align 8
  %r.addr = alloca %struct.real_value*, align 8
  %image3 = alloca i64, align 8
  %image2 = alloca i64, align 8
  %image1 = alloca i64, align 8
  %image0 = alloca i64, align 8
  %exp = alloca i64, align 8
  %denormal = alloca i8, align 1
  %u = alloca %struct.real_value, align 8
  store %struct.real_format* %fmt, %struct.real_format** %fmt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_format** %fmt.addr, metadata !5549, metadata !DIExpression()), !dbg !5550
  store i64* %buf, i64** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %buf.addr, metadata !5551, metadata !DIExpression()), !dbg !5552
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !5553, metadata !DIExpression()), !dbg !5554
  call void @llvm.dbg.declare(metadata i64* %image3, metadata !5555, metadata !DIExpression()), !dbg !5556
  call void @llvm.dbg.declare(metadata i64* %image2, metadata !5557, metadata !DIExpression()), !dbg !5558
  call void @llvm.dbg.declare(metadata i64* %image1, metadata !5559, metadata !DIExpression()), !dbg !5560
  call void @llvm.dbg.declare(metadata i64* %image0, metadata !5561, metadata !DIExpression()), !dbg !5562
  call void @llvm.dbg.declare(metadata i64* %exp, metadata !5563, metadata !DIExpression()), !dbg !5564
  call void @llvm.dbg.declare(metadata i8* %denormal, metadata !5565, metadata !DIExpression()), !dbg !5566
  %0 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5567
  %sig = getelementptr inbounds %struct.real_value, %struct.real_value* %0, i32 0, i32 1, !dbg !5568
  %arrayidx = getelementptr inbounds [3 x i64], [3 x i64]* %sig, i64 0, i64 2, !dbg !5567
  %1 = load i64, i64* %arrayidx, align 8, !dbg !5567
  %and = and i64 %1, -9223372036854775808, !dbg !5569
  %cmp = icmp eq i64 %and, 0, !dbg !5570
  %conv = zext i1 %cmp to i32, !dbg !5570
  %conv1 = trunc i32 %conv to i8, !dbg !5571
  store i8 %conv1, i8* %denormal, align 1, !dbg !5566
  call void @llvm.dbg.declare(metadata %struct.real_value* %u, metadata !5572, metadata !DIExpression()), !dbg !5573
  %2 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5574
  %3 = bitcast %struct.real_value* %2 to i32*, !dbg !5575
  %bf.load = load i32, i32* %3, align 8, !dbg !5575
  %bf.lshr = lshr i32 %bf.load, 3, !dbg !5575
  %bf.clear = and i32 %bf.lshr, 1, !dbg !5575
  %shl = shl i32 %bf.clear, 31, !dbg !5576
  %conv2 = sext i32 %shl to i64, !dbg !5574
  store i64 %conv2, i64* %image3, align 8, !dbg !5577
  store i64 0, i64* %image2, align 8, !dbg !5578
  store i64 0, i64* %image1, align 8, !dbg !5579
  store i64 0, i64* %image0, align 8, !dbg !5580
  %4 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5581
  call void @rshift_significand(%struct.real_value* %u, %struct.real_value* %4, i32 79), !dbg !5582
  %5 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5583
  %6 = bitcast %struct.real_value* %5 to i32*, !dbg !5584
  %bf.load3 = load i32, i32* %6, align 8, !dbg !5584
  %bf.clear4 = and i32 %bf.load3, 3, !dbg !5584
  switch i32 %bf.clear4, label %sw.default [
    i32 0, label %sw.bb
    i32 2, label %sw.bb5
    i32 3, label %sw.bb7
    i32 1, label %sw.bb56
  ], !dbg !5585

sw.bb:                                            ; preds = %entry
  br label %sw.epilog, !dbg !5586

sw.bb5:                                           ; preds = %entry
  %7 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !5588
  %has_inf = getelementptr inbounds %struct.real_format, %struct.real_format* %7, i32 0, i32 12, !dbg !5590
  %8 = load i8, i8* %has_inf, align 1, !dbg !5590
  %tobool = icmp ne i8 %8, 0, !dbg !5588
  br i1 %tobool, label %if.then, label %if.else, !dbg !5591

if.then:                                          ; preds = %sw.bb5
  %9 = load i64, i64* %image3, align 8, !dbg !5592
  %or = or i64 %9, 2147418112, !dbg !5592
  store i64 %or, i64* %image3, align 8, !dbg !5592
  br label %if.end, !dbg !5593

if.else:                                          ; preds = %sw.bb5
  %10 = load i64, i64* %image3, align 8, !dbg !5594
  %or6 = or i64 %10, 2147483647, !dbg !5594
  store i64 %or6, i64* %image3, align 8, !dbg !5594
  store i64 4294967295, i64* %image2, align 8, !dbg !5596
  store i64 4294967295, i64* %image1, align 8, !dbg !5597
  store i64 4294967295, i64* %image0, align 8, !dbg !5598
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %sw.epilog, !dbg !5599

sw.bb7:                                           ; preds = %entry
  %11 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !5600
  %has_nans = getelementptr inbounds %struct.real_format, %struct.real_format* %11, i32 0, i32 11, !dbg !5602
  %12 = load i8, i8* %has_nans, align 2, !dbg !5602
  %tobool8 = icmp ne i8 %12, 0, !dbg !5600
  br i1 %tobool8, label %if.then9, label %if.else53, !dbg !5603

if.then9:                                         ; preds = %sw.bb7
  %13 = load i64, i64* %image3, align 8, !dbg !5604
  %or10 = or i64 %13, 2147418112, !dbg !5604
  store i64 %or10, i64* %image3, align 8, !dbg !5604
  %14 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5606
  %15 = bitcast %struct.real_value* %14 to i32*, !dbg !5608
  %bf.load11 = load i32, i32* %15, align 8, !dbg !5608
  %bf.lshr12 = lshr i32 %bf.load11, 5, !dbg !5608
  %bf.clear13 = and i32 %bf.lshr12, 1, !dbg !5608
  %tobool14 = icmp ne i32 %bf.clear13, 0, !dbg !5606
  br i1 %tobool14, label %if.then15, label %if.else20, !dbg !5609

if.then15:                                        ; preds = %if.then9
  %16 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !5610
  %canonical_nan_lsbs_set = getelementptr inbounds %struct.real_format, %struct.real_format* %16, i32 0, i32 16, !dbg !5613
  %17 = load i8, i8* %canonical_nan_lsbs_set, align 1, !dbg !5613
  %tobool16 = icmp ne i8 %17, 0, !dbg !5610
  br i1 %tobool16, label %if.then17, label %if.end19, !dbg !5614

if.then17:                                        ; preds = %if.then15
  %18 = load i64, i64* %image3, align 8, !dbg !5615
  %or18 = or i64 %18, 32767, !dbg !5615
  store i64 %or18, i64* %image3, align 8, !dbg !5615
  store i64 4294967295, i64* %image0, align 8, !dbg !5617
  store i64 4294967295, i64* %image1, align 8, !dbg !5618
  store i64 4294967295, i64* %image2, align 8, !dbg !5619
  br label %if.end19, !dbg !5620

if.end19:                                         ; preds = %if.then17, %if.then15
  br label %if.end32, !dbg !5621

if.else20:                                        ; preds = %if.then9
  %sig21 = getelementptr inbounds %struct.real_value, %struct.real_value* %u, i32 0, i32 1, !dbg !5622
  %arrayidx22 = getelementptr inbounds [3 x i64], [3 x i64]* %sig21, i64 0, i64 0, !dbg !5625
  %19 = load i64, i64* %arrayidx22, align 8, !dbg !5625
  store i64 %19, i64* %image0, align 8, !dbg !5626
  %20 = load i64, i64* %image0, align 8, !dbg !5627
  %shr = lshr i64 %20, 31, !dbg !5628
  %shr23 = lshr i64 %shr, 1, !dbg !5629
  store i64 %shr23, i64* %image1, align 8, !dbg !5630
  %sig24 = getelementptr inbounds %struct.real_value, %struct.real_value* %u, i32 0, i32 1, !dbg !5631
  %arrayidx25 = getelementptr inbounds [3 x i64], [3 x i64]* %sig24, i64 0, i64 1, !dbg !5632
  %21 = load i64, i64* %arrayidx25, align 8, !dbg !5632
  store i64 %21, i64* %image2, align 8, !dbg !5633
  %22 = load i64, i64* %image2, align 8, !dbg !5634
  %shr26 = lshr i64 %22, 31, !dbg !5635
  %shr27 = lshr i64 %shr26, 1, !dbg !5636
  %and28 = and i64 %shr27, 65535, !dbg !5637
  %23 = load i64, i64* %image3, align 8, !dbg !5638
  %or29 = or i64 %23, %and28, !dbg !5638
  store i64 %or29, i64* %image3, align 8, !dbg !5638
  %24 = load i64, i64* %image0, align 8, !dbg !5639
  %and30 = and i64 %24, 4294967295, !dbg !5639
  store i64 %and30, i64* %image0, align 8, !dbg !5639
  %25 = load i64, i64* %image2, align 8, !dbg !5640
  %and31 = and i64 %25, 4294967295, !dbg !5640
  store i64 %and31, i64* %image2, align 8, !dbg !5640
  br label %if.end32

if.end32:                                         ; preds = %if.else20, %if.end19
  %26 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5641
  %27 = bitcast %struct.real_value* %26 to i32*, !dbg !5643
  %bf.load33 = load i32, i32* %27, align 8, !dbg !5643
  %bf.lshr34 = lshr i32 %bf.load33, 4, !dbg !5643
  %bf.clear35 = and i32 %bf.lshr34, 1, !dbg !5643
  %28 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !5644
  %qnan_msb_set = getelementptr inbounds %struct.real_format, %struct.real_format* %28, i32 0, i32 15, !dbg !5645
  %29 = load i8, i8* %qnan_msb_set, align 2, !dbg !5645
  %conv36 = zext i8 %29 to i32, !dbg !5644
  %cmp37 = icmp eq i32 %bf.clear35, %conv36, !dbg !5646
  br i1 %cmp37, label %if.then39, label %if.else41, !dbg !5647

if.then39:                                        ; preds = %if.end32
  %30 = load i64, i64* %image3, align 8, !dbg !5648
  %and40 = and i64 %30, -32769, !dbg !5648
  store i64 %and40, i64* %image3, align 8, !dbg !5648
  br label %if.end43, !dbg !5649

if.else41:                                        ; preds = %if.end32
  %31 = load i64, i64* %image3, align 8, !dbg !5650
  %or42 = or i64 %31, 32768, !dbg !5650
  store i64 %or42, i64* %image3, align 8, !dbg !5650
  br label %if.end43

if.end43:                                         ; preds = %if.else41, %if.then39
  %32 = load i64, i64* %image3, align 8, !dbg !5651
  %and44 = and i64 %32, 65535, !dbg !5653
  %33 = load i64, i64* %image2, align 8, !dbg !5654
  %or45 = or i64 %and44, %33, !dbg !5655
  %34 = load i64, i64* %image1, align 8, !dbg !5656
  %or46 = or i64 %or45, %34, !dbg !5657
  %35 = load i64, i64* %image0, align 8, !dbg !5658
  %or47 = or i64 %or46, %35, !dbg !5659
  %cmp48 = icmp eq i64 %or47, 0, !dbg !5660
  br i1 %cmp48, label %if.then50, label %if.end52, !dbg !5661

if.then50:                                        ; preds = %if.end43
  %36 = load i64, i64* %image3, align 8, !dbg !5662
  %or51 = or i64 %36, 16384, !dbg !5662
  store i64 %or51, i64* %image3, align 8, !dbg !5662
  br label %if.end52, !dbg !5663

if.end52:                                         ; preds = %if.then50, %if.end43
  br label %if.end55, !dbg !5664

if.else53:                                        ; preds = %sw.bb7
  %37 = load i64, i64* %image3, align 8, !dbg !5665
  %or54 = or i64 %37, 2147483647, !dbg !5665
  store i64 %or54, i64* %image3, align 8, !dbg !5665
  store i64 4294967295, i64* %image2, align 8, !dbg !5667
  store i64 4294967295, i64* %image1, align 8, !dbg !5668
  store i64 4294967295, i64* %image0, align 8, !dbg !5669
  br label %if.end55

if.end55:                                         ; preds = %if.else53, %if.end52
  br label %sw.epilog, !dbg !5670

sw.bb56:                                          ; preds = %entry
  %38 = load i8, i8* %denormal, align 1, !dbg !5671
  %tobool57 = icmp ne i8 %38, 0, !dbg !5671
  br i1 %tobool57, label %if.then58, label %if.else59, !dbg !5673

if.then58:                                        ; preds = %sw.bb56
  store i64 0, i64* %exp, align 8, !dbg !5674
  br label %if.end64, !dbg !5675

if.else59:                                        ; preds = %sw.bb56
  %39 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5676
  %40 = bitcast %struct.real_value* %39 to i32*, !dbg !5676
  %bf.load60 = load i32, i32* %40, align 8, !dbg !5676
  %bf.lshr61 = lshr i32 %bf.load60, 6, !dbg !5676
  %xor = xor i32 %bf.lshr61, 33554432, !dbg !5676
  %sub = sub nsw i32 %xor, 33554432, !dbg !5676
  %add = add nsw i32 %sub, 16383, !dbg !5677
  %sub62 = sub nsw i32 %add, 1, !dbg !5678
  %conv63 = sext i32 %sub62 to i64, !dbg !5676
  store i64 %conv63, i64* %exp, align 8, !dbg !5679
  br label %if.end64

if.end64:                                         ; preds = %if.else59, %if.then58
  %41 = load i64, i64* %exp, align 8, !dbg !5680
  %shl65 = shl i64 %41, 16, !dbg !5681
  %42 = load i64, i64* %image3, align 8, !dbg !5682
  %or66 = or i64 %42, %shl65, !dbg !5682
  store i64 %or66, i64* %image3, align 8, !dbg !5682
  %sig67 = getelementptr inbounds %struct.real_value, %struct.real_value* %u, i32 0, i32 1, !dbg !5683
  %arrayidx68 = getelementptr inbounds [3 x i64], [3 x i64]* %sig67, i64 0, i64 0, !dbg !5686
  %43 = load i64, i64* %arrayidx68, align 8, !dbg !5686
  store i64 %43, i64* %image0, align 8, !dbg !5687
  %44 = load i64, i64* %image0, align 8, !dbg !5688
  %shr69 = lshr i64 %44, 31, !dbg !5689
  %shr70 = lshr i64 %shr69, 1, !dbg !5690
  store i64 %shr70, i64* %image1, align 8, !dbg !5691
  %sig71 = getelementptr inbounds %struct.real_value, %struct.real_value* %u, i32 0, i32 1, !dbg !5692
  %arrayidx72 = getelementptr inbounds [3 x i64], [3 x i64]* %sig71, i64 0, i64 1, !dbg !5693
  %45 = load i64, i64* %arrayidx72, align 8, !dbg !5693
  store i64 %45, i64* %image2, align 8, !dbg !5694
  %46 = load i64, i64* %image2, align 8, !dbg !5695
  %shr73 = lshr i64 %46, 31, !dbg !5696
  %shr74 = lshr i64 %shr73, 1, !dbg !5697
  %and75 = and i64 %shr74, 65535, !dbg !5698
  %47 = load i64, i64* %image3, align 8, !dbg !5699
  %or76 = or i64 %47, %and75, !dbg !5699
  store i64 %or76, i64* %image3, align 8, !dbg !5699
  %48 = load i64, i64* %image0, align 8, !dbg !5700
  %and77 = and i64 %48, 4294967295, !dbg !5700
  store i64 %and77, i64* %image0, align 8, !dbg !5700
  %49 = load i64, i64* %image2, align 8, !dbg !5701
  %and78 = and i64 %49, 4294967295, !dbg !5701
  store i64 %and78, i64* %image2, align 8, !dbg !5701
  br label %sw.epilog, !dbg !5702

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 4008, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5703
  br label %sw.epilog, !dbg !5704

sw.epilog:                                        ; preds = %sw.default, %if.end64, %if.end55, %if.end, %sw.bb
  %50 = load i64, i64* %image0, align 8, !dbg !5705
  %51 = load i64*, i64** %buf.addr, align 8, !dbg !5708
  %arrayidx79 = getelementptr inbounds i64, i64* %51, i64 0, !dbg !5708
  store i64 %50, i64* %arrayidx79, align 8, !dbg !5709
  %52 = load i64, i64* %image1, align 8, !dbg !5710
  %53 = load i64*, i64** %buf.addr, align 8, !dbg !5711
  %arrayidx80 = getelementptr inbounds i64, i64* %53, i64 1, !dbg !5711
  store i64 %52, i64* %arrayidx80, align 8, !dbg !5712
  %54 = load i64, i64* %image2, align 8, !dbg !5713
  %55 = load i64*, i64** %buf.addr, align 8, !dbg !5714
  %arrayidx81 = getelementptr inbounds i64, i64* %55, i64 2, !dbg !5714
  store i64 %54, i64* %arrayidx81, align 8, !dbg !5715
  %56 = load i64, i64* %image3, align 8, !dbg !5716
  %57 = load i64*, i64** %buf.addr, align 8, !dbg !5717
  %arrayidx82 = getelementptr inbounds i64, i64* %57, i64 3, !dbg !5717
  store i64 %56, i64* %arrayidx82, align 8, !dbg !5718
  ret void, !dbg !5719
}

; Function Attrs: noinline nounwind uwtable
define internal void @decode_ieee_quad(%struct.real_format* %fmt, %struct.real_value* %r, i64* %buf) #0 !dbg !5720 {
entry:
  %fmt.addr = alloca %struct.real_format*, align 8
  %r.addr = alloca %struct.real_value*, align 8
  %buf.addr = alloca i64*, align 8
  %image3 = alloca i64, align 8
  %image2 = alloca i64, align 8
  %image1 = alloca i64, align 8
  %image0 = alloca i64, align 8
  %sign = alloca i8, align 1
  %exp = alloca i32, align 4
  store %struct.real_format* %fmt, %struct.real_format** %fmt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_format** %fmt.addr, metadata !5721, metadata !DIExpression()), !dbg !5722
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !5723, metadata !DIExpression()), !dbg !5724
  store i64* %buf, i64** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %buf.addr, metadata !5725, metadata !DIExpression()), !dbg !5726
  call void @llvm.dbg.declare(metadata i64* %image3, metadata !5727, metadata !DIExpression()), !dbg !5728
  call void @llvm.dbg.declare(metadata i64* %image2, metadata !5729, metadata !DIExpression()), !dbg !5730
  call void @llvm.dbg.declare(metadata i64* %image1, metadata !5731, metadata !DIExpression()), !dbg !5732
  call void @llvm.dbg.declare(metadata i64* %image0, metadata !5733, metadata !DIExpression()), !dbg !5734
  call void @llvm.dbg.declare(metadata i8* %sign, metadata !5735, metadata !DIExpression()), !dbg !5736
  call void @llvm.dbg.declare(metadata i32* %exp, metadata !5737, metadata !DIExpression()), !dbg !5738
  %0 = load i64*, i64** %buf.addr, align 8, !dbg !5739
  %arrayidx = getelementptr inbounds i64, i64* %0, i64 0, !dbg !5739
  %1 = load i64, i64* %arrayidx, align 8, !dbg !5739
  store i64 %1, i64* %image0, align 8, !dbg !5742
  %2 = load i64*, i64** %buf.addr, align 8, !dbg !5743
  %arrayidx1 = getelementptr inbounds i64, i64* %2, i64 1, !dbg !5743
  %3 = load i64, i64* %arrayidx1, align 8, !dbg !5743
  store i64 %3, i64* %image1, align 8, !dbg !5744
  %4 = load i64*, i64** %buf.addr, align 8, !dbg !5745
  %arrayidx2 = getelementptr inbounds i64, i64* %4, i64 2, !dbg !5745
  %5 = load i64, i64* %arrayidx2, align 8, !dbg !5745
  store i64 %5, i64* %image2, align 8, !dbg !5746
  %6 = load i64*, i64** %buf.addr, align 8, !dbg !5747
  %arrayidx3 = getelementptr inbounds i64, i64* %6, i64 3, !dbg !5747
  %7 = load i64, i64* %arrayidx3, align 8, !dbg !5747
  store i64 %7, i64* %image3, align 8, !dbg !5748
  %8 = load i64, i64* %image0, align 8, !dbg !5749
  %and = and i64 %8, 4294967295, !dbg !5749
  store i64 %and, i64* %image0, align 8, !dbg !5749
  %9 = load i64, i64* %image1, align 8, !dbg !5750
  %and4 = and i64 %9, 4294967295, !dbg !5750
  store i64 %and4, i64* %image1, align 8, !dbg !5750
  %10 = load i64, i64* %image2, align 8, !dbg !5751
  %and5 = and i64 %10, 4294967295, !dbg !5751
  store i64 %and5, i64* %image2, align 8, !dbg !5751
  %11 = load i64, i64* %image3, align 8, !dbg !5752
  %shr = lshr i64 %11, 31, !dbg !5753
  %and6 = and i64 %shr, 1, !dbg !5754
  %conv = trunc i64 %and6 to i8, !dbg !5755
  store i8 %conv, i8* %sign, align 1, !dbg !5756
  %12 = load i64, i64* %image3, align 8, !dbg !5757
  %shr7 = lshr i64 %12, 16, !dbg !5758
  %and8 = and i64 %shr7, 32767, !dbg !5759
  %conv9 = trunc i64 %and8 to i32, !dbg !5760
  store i32 %conv9, i32* %exp, align 4, !dbg !5761
  %13 = load i64, i64* %image3, align 8, !dbg !5762
  %and10 = and i64 %13, 65535, !dbg !5762
  store i64 %and10, i64* %image3, align 8, !dbg !5762
  %14 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5763
  %15 = bitcast %struct.real_value* %14 to i8*, !dbg !5764
  call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 32, i1 false), !dbg !5764
  %16 = load i32, i32* %exp, align 4, !dbg !5765
  %cmp = icmp eq i32 %16, 0, !dbg !5767
  br i1 %cmp, label %if.then, label %if.else41, !dbg !5768

if.then:                                          ; preds = %entry
  %17 = load i64, i64* %image3, align 8, !dbg !5769
  %18 = load i64, i64* %image2, align 8, !dbg !5772
  %or = or i64 %17, %18, !dbg !5773
  %19 = load i64, i64* %image1, align 8, !dbg !5774
  %or12 = or i64 %or, %19, !dbg !5775
  %20 = load i64, i64* %image0, align 8, !dbg !5776
  %or13 = or i64 %or12, %20, !dbg !5777
  %tobool = icmp ne i64 %or13, 0, !dbg !5777
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !5778

land.lhs.true:                                    ; preds = %if.then
  %21 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !5779
  %has_denorm = getelementptr inbounds %struct.real_format, %struct.real_format* %21, i32 0, i32 13, !dbg !5780
  %22 = load i8, i8* %has_denorm, align 8, !dbg !5780
  %conv14 = zext i8 %22 to i32, !dbg !5779
  %tobool15 = icmp ne i32 %conv14, 0, !dbg !5779
  br i1 %tobool15, label %if.then16, label %if.else, !dbg !5781

if.then16:                                        ; preds = %land.lhs.true
  %23 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5782
  %24 = bitcast %struct.real_value* %23 to i32*, !dbg !5784
  %bf.load = load i32, i32* %24, align 8, !dbg !5785
  %bf.clear = and i32 %bf.load, -4, !dbg !5785
  %bf.set = or i32 %bf.clear, 1, !dbg !5785
  store i32 %bf.set, i32* %24, align 8, !dbg !5785
  %25 = load i8, i8* %sign, align 1, !dbg !5786
  %conv17 = zext i8 %25 to i32, !dbg !5786
  %26 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5787
  %27 = bitcast %struct.real_value* %26 to i32*, !dbg !5788
  %bf.load18 = load i32, i32* %27, align 8, !dbg !5789
  %bf.value = and i32 %conv17, 1, !dbg !5789
  %bf.shl = shl i32 %bf.value, 3, !dbg !5789
  %bf.clear19 = and i32 %bf.load18, -9, !dbg !5789
  %bf.set20 = or i32 %bf.clear19, %bf.shl, !dbg !5789
  store i32 %bf.set20, i32* %27, align 8, !dbg !5789
  %28 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5790
  %29 = bitcast %struct.real_value* %28 to i32*, !dbg !5790
  %bf.load21 = load i32, i32* %29, align 8, !dbg !5790
  %bf.clear22 = and i32 %bf.load21, 63, !dbg !5790
  %bf.set23 = or i32 %bf.clear22, -1043328, !dbg !5790
  store i32 %bf.set23, i32* %29, align 8, !dbg !5790
  %30 = load i64, i64* %image1, align 8, !dbg !5791
  %shl = shl i64 %30, 31, !dbg !5794
  %shl24 = shl i64 %shl, 1, !dbg !5795
  %31 = load i64, i64* %image0, align 8, !dbg !5796
  %or25 = or i64 %shl24, %31, !dbg !5797
  %32 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5798
  %sig = getelementptr inbounds %struct.real_value, %struct.real_value* %32, i32 0, i32 1, !dbg !5799
  %arrayidx26 = getelementptr inbounds [3 x i64], [3 x i64]* %sig, i64 0, i64 0, !dbg !5798
  store i64 %or25, i64* %arrayidx26, align 8, !dbg !5800
  %33 = load i64, i64* %image3, align 8, !dbg !5801
  %shl27 = shl i64 %33, 31, !dbg !5802
  %shl28 = shl i64 %shl27, 1, !dbg !5803
  %34 = load i64, i64* %image2, align 8, !dbg !5804
  %or29 = or i64 %shl28, %34, !dbg !5805
  %35 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5806
  %sig30 = getelementptr inbounds %struct.real_value, %struct.real_value* %35, i32 0, i32 1, !dbg !5807
  %arrayidx31 = getelementptr inbounds [3 x i64], [3 x i64]* %sig30, i64 0, i64 1, !dbg !5806
  store i64 %or29, i64* %arrayidx31, align 8, !dbg !5808
  %36 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5809
  call void @normalize(%struct.real_value* %36), !dbg !5810
  br label %if.end40, !dbg !5811

if.else:                                          ; preds = %land.lhs.true, %if.then
  %37 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !5812
  %has_signed_zero = getelementptr inbounds %struct.real_format, %struct.real_format* %37, i32 0, i32 14, !dbg !5814
  %38 = load i8, i8* %has_signed_zero, align 1, !dbg !5814
  %tobool32 = icmp ne i8 %38, 0, !dbg !5812
  br i1 %tobool32, label %if.then33, label %if.end, !dbg !5815

if.then33:                                        ; preds = %if.else
  %39 = load i8, i8* %sign, align 1, !dbg !5816
  %conv34 = zext i8 %39 to i32, !dbg !5816
  %40 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5817
  %41 = bitcast %struct.real_value* %40 to i32*, !dbg !5818
  %bf.load35 = load i32, i32* %41, align 8, !dbg !5819
  %bf.value36 = and i32 %conv34, 1, !dbg !5819
  %bf.shl37 = shl i32 %bf.value36, 3, !dbg !5819
  %bf.clear38 = and i32 %bf.load35, -9, !dbg !5819
  %bf.set39 = or i32 %bf.clear38, %bf.shl37, !dbg !5819
  store i32 %bf.set39, i32* %41, align 8, !dbg !5819
  br label %if.end, !dbg !5817

if.end:                                           ; preds = %if.then33, %if.else
  br label %if.end40

if.end40:                                         ; preds = %if.end, %if.then16
  br label %if.end124, !dbg !5820

if.else41:                                        ; preds = %entry
  %42 = load i32, i32* %exp, align 4, !dbg !5821
  %cmp42 = icmp eq i32 %42, 32767, !dbg !5823
  br i1 %cmp42, label %land.lhs.true44, label %if.else94, !dbg !5824

land.lhs.true44:                                  ; preds = %if.else41
  %43 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !5825
  %has_nans = getelementptr inbounds %struct.real_format, %struct.real_format* %43, i32 0, i32 11, !dbg !5826
  %44 = load i8, i8* %has_nans, align 2, !dbg !5826
  %conv45 = zext i8 %44 to i32, !dbg !5825
  %tobool46 = icmp ne i32 %conv45, 0, !dbg !5825
  br i1 %tobool46, label %if.then49, label %lor.lhs.false, !dbg !5827

lor.lhs.false:                                    ; preds = %land.lhs.true44
  %45 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !5828
  %has_inf = getelementptr inbounds %struct.real_format, %struct.real_format* %45, i32 0, i32 12, !dbg !5829
  %46 = load i8, i8* %has_inf, align 1, !dbg !5829
  %conv47 = zext i8 %46 to i32, !dbg !5828
  %tobool48 = icmp ne i32 %conv47, 0, !dbg !5828
  br i1 %tobool48, label %if.then49, label %if.else94, !dbg !5830

if.then49:                                        ; preds = %lor.lhs.false, %land.lhs.true44
  %47 = load i64, i64* %image3, align 8, !dbg !5831
  %48 = load i64, i64* %image2, align 8, !dbg !5834
  %or50 = or i64 %47, %48, !dbg !5835
  %49 = load i64, i64* %image1, align 8, !dbg !5836
  %or51 = or i64 %or50, %49, !dbg !5837
  %50 = load i64, i64* %image0, align 8, !dbg !5838
  %or52 = or i64 %or51, %50, !dbg !5839
  %tobool53 = icmp ne i64 %or52, 0, !dbg !5839
  br i1 %tobool53, label %if.then54, label %if.else83, !dbg !5840

if.then54:                                        ; preds = %if.then49
  %51 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5841
  %52 = bitcast %struct.real_value* %51 to i32*, !dbg !5843
  %bf.load55 = load i32, i32* %52, align 8, !dbg !5844
  %bf.clear56 = and i32 %bf.load55, -4, !dbg !5844
  %bf.set57 = or i32 %bf.clear56, 3, !dbg !5844
  store i32 %bf.set57, i32* %52, align 8, !dbg !5844
  %53 = load i8, i8* %sign, align 1, !dbg !5845
  %conv58 = zext i8 %53 to i32, !dbg !5845
  %54 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5846
  %55 = bitcast %struct.real_value* %54 to i32*, !dbg !5847
  %bf.load59 = load i32, i32* %55, align 8, !dbg !5848
  %bf.value60 = and i32 %conv58, 1, !dbg !5848
  %bf.shl61 = shl i32 %bf.value60, 3, !dbg !5848
  %bf.clear62 = and i32 %bf.load59, -9, !dbg !5848
  %bf.set63 = or i32 %bf.clear62, %bf.shl61, !dbg !5848
  store i32 %bf.set63, i32* %55, align 8, !dbg !5848
  %56 = load i64, i64* %image3, align 8, !dbg !5849
  %shr64 = lshr i64 %56, 15, !dbg !5850
  %and65 = and i64 %shr64, 1, !dbg !5851
  %57 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !5852
  %qnan_msb_set = getelementptr inbounds %struct.real_format, %struct.real_format* %57, i32 0, i32 15, !dbg !5853
  %58 = load i8, i8* %qnan_msb_set, align 2, !dbg !5853
  %conv66 = zext i8 %58 to i64, !dbg !5852
  %xor = xor i64 %and65, %conv66, !dbg !5854
  %conv67 = trunc i64 %xor to i32, !dbg !5855
  %59 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5856
  %60 = bitcast %struct.real_value* %59 to i32*, !dbg !5857
  %bf.load68 = load i32, i32* %60, align 8, !dbg !5858
  %bf.value69 = and i32 %conv67, 1, !dbg !5858
  %bf.shl70 = shl i32 %bf.value69, 4, !dbg !5858
  %bf.clear71 = and i32 %bf.load68, -17, !dbg !5858
  %bf.set72 = or i32 %bf.clear71, %bf.shl70, !dbg !5858
  store i32 %bf.set72, i32* %60, align 8, !dbg !5858
  %61 = load i64, i64* %image1, align 8, !dbg !5859
  %shl73 = shl i64 %61, 31, !dbg !5862
  %shl74 = shl i64 %shl73, 1, !dbg !5863
  %62 = load i64, i64* %image0, align 8, !dbg !5864
  %or75 = or i64 %shl74, %62, !dbg !5865
  %63 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5866
  %sig76 = getelementptr inbounds %struct.real_value, %struct.real_value* %63, i32 0, i32 1, !dbg !5867
  %arrayidx77 = getelementptr inbounds [3 x i64], [3 x i64]* %sig76, i64 0, i64 0, !dbg !5866
  store i64 %or75, i64* %arrayidx77, align 8, !dbg !5868
  %64 = load i64, i64* %image3, align 8, !dbg !5869
  %shl78 = shl i64 %64, 31, !dbg !5870
  %shl79 = shl i64 %shl78, 1, !dbg !5871
  %65 = load i64, i64* %image2, align 8, !dbg !5872
  %or80 = or i64 %shl79, %65, !dbg !5873
  %66 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5874
  %sig81 = getelementptr inbounds %struct.real_value, %struct.real_value* %66, i32 0, i32 1, !dbg !5875
  %arrayidx82 = getelementptr inbounds [3 x i64], [3 x i64]* %sig81, i64 0, i64 1, !dbg !5874
  store i64 %or80, i64* %arrayidx82, align 8, !dbg !5876
  %67 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5877
  %68 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5878
  call void @lshift_significand(%struct.real_value* %67, %struct.real_value* %68, i32 79), !dbg !5879
  br label %if.end93, !dbg !5880

if.else83:                                        ; preds = %if.then49
  %69 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5881
  %70 = bitcast %struct.real_value* %69 to i32*, !dbg !5883
  %bf.load84 = load i32, i32* %70, align 8, !dbg !5884
  %bf.clear85 = and i32 %bf.load84, -4, !dbg !5884
  %bf.set86 = or i32 %bf.clear85, 2, !dbg !5884
  store i32 %bf.set86, i32* %70, align 8, !dbg !5884
  %71 = load i8, i8* %sign, align 1, !dbg !5885
  %conv87 = zext i8 %71 to i32, !dbg !5885
  %72 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5886
  %73 = bitcast %struct.real_value* %72 to i32*, !dbg !5887
  %bf.load88 = load i32, i32* %73, align 8, !dbg !5888
  %bf.value89 = and i32 %conv87, 1, !dbg !5888
  %bf.shl90 = shl i32 %bf.value89, 3, !dbg !5888
  %bf.clear91 = and i32 %bf.load88, -9, !dbg !5888
  %bf.set92 = or i32 %bf.clear91, %bf.shl90, !dbg !5888
  store i32 %bf.set92, i32* %73, align 8, !dbg !5888
  br label %if.end93

if.end93:                                         ; preds = %if.else83, %if.then54
  br label %if.end123, !dbg !5889

if.else94:                                        ; preds = %lor.lhs.false, %if.else41
  %74 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5890
  %75 = bitcast %struct.real_value* %74 to i32*, !dbg !5892
  %bf.load95 = load i32, i32* %75, align 8, !dbg !5893
  %bf.clear96 = and i32 %bf.load95, -4, !dbg !5893
  %bf.set97 = or i32 %bf.clear96, 1, !dbg !5893
  store i32 %bf.set97, i32* %75, align 8, !dbg !5893
  %76 = load i8, i8* %sign, align 1, !dbg !5894
  %conv98 = zext i8 %76 to i32, !dbg !5894
  %77 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5895
  %78 = bitcast %struct.real_value* %77 to i32*, !dbg !5896
  %bf.load99 = load i32, i32* %78, align 8, !dbg !5897
  %bf.value100 = and i32 %conv98, 1, !dbg !5897
  %bf.shl101 = shl i32 %bf.value100, 3, !dbg !5897
  %bf.clear102 = and i32 %bf.load99, -9, !dbg !5897
  %bf.set103 = or i32 %bf.clear102, %bf.shl101, !dbg !5897
  store i32 %bf.set103, i32* %78, align 8, !dbg !5897
  %79 = load i32, i32* %exp, align 4, !dbg !5898
  %sub = sub nsw i32 %79, 16383, !dbg !5898
  %add = add nsw i32 %sub, 1, !dbg !5898
  %and104 = and i32 %add, 67108863, !dbg !5898
  %80 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5898
  %81 = bitcast %struct.real_value* %80 to i32*, !dbg !5898
  %bf.load105 = load i32, i32* %81, align 8, !dbg !5898
  %bf.value106 = and i32 %and104, 67108863, !dbg !5898
  %bf.shl107 = shl i32 %bf.value106, 6, !dbg !5898
  %bf.clear108 = and i32 %bf.load105, 63, !dbg !5898
  %bf.set109 = or i32 %bf.clear108, %bf.shl107, !dbg !5898
  store i32 %bf.set109, i32* %81, align 8, !dbg !5898
  %82 = load i64, i64* %image1, align 8, !dbg !5899
  %shl110 = shl i64 %82, 31, !dbg !5902
  %shl111 = shl i64 %shl110, 1, !dbg !5903
  %83 = load i64, i64* %image0, align 8, !dbg !5904
  %or112 = or i64 %shl111, %83, !dbg !5905
  %84 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5906
  %sig113 = getelementptr inbounds %struct.real_value, %struct.real_value* %84, i32 0, i32 1, !dbg !5907
  %arrayidx114 = getelementptr inbounds [3 x i64], [3 x i64]* %sig113, i64 0, i64 0, !dbg !5906
  store i64 %or112, i64* %arrayidx114, align 8, !dbg !5908
  %85 = load i64, i64* %image3, align 8, !dbg !5909
  %shl115 = shl i64 %85, 31, !dbg !5910
  %shl116 = shl i64 %shl115, 1, !dbg !5911
  %86 = load i64, i64* %image2, align 8, !dbg !5912
  %or117 = or i64 %shl116, %86, !dbg !5913
  %87 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5914
  %sig118 = getelementptr inbounds %struct.real_value, %struct.real_value* %87, i32 0, i32 1, !dbg !5915
  %arrayidx119 = getelementptr inbounds [3 x i64], [3 x i64]* %sig118, i64 0, i64 1, !dbg !5914
  store i64 %or117, i64* %arrayidx119, align 8, !dbg !5916
  %88 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5917
  %89 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5918
  call void @lshift_significand(%struct.real_value* %88, %struct.real_value* %89, i32 79), !dbg !5919
  %90 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5920
  %sig120 = getelementptr inbounds %struct.real_value, %struct.real_value* %90, i32 0, i32 1, !dbg !5921
  %arrayidx121 = getelementptr inbounds [3 x i64], [3 x i64]* %sig120, i64 0, i64 2, !dbg !5920
  %91 = load i64, i64* %arrayidx121, align 8, !dbg !5922
  %or122 = or i64 %91, -9223372036854775808, !dbg !5922
  store i64 %or122, i64* %arrayidx121, align 8, !dbg !5922
  br label %if.end123

if.end123:                                        ; preds = %if.else94, %if.end93
  br label %if.end124

if.end124:                                        ; preds = %if.end123, %if.end40
  ret void, !dbg !5923
}

; Function Attrs: noinline nounwind uwtable
define internal void @encode_vax_f(%struct.real_format* %fmt, i64* %buf, %struct.real_value* %r) #0 !dbg !5924 {
entry:
  %fmt.addr = alloca %struct.real_format*, align 8
  %buf.addr = alloca i64*, align 8
  %r.addr = alloca %struct.real_value*, align 8
  %sign = alloca i64, align 8
  %exp = alloca i64, align 8
  %sig = alloca i64, align 8
  %image = alloca i64, align 8
  store %struct.real_format* %fmt, %struct.real_format** %fmt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_format** %fmt.addr, metadata !5925, metadata !DIExpression()), !dbg !5926
  store i64* %buf, i64** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %buf.addr, metadata !5927, metadata !DIExpression()), !dbg !5928
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !5929, metadata !DIExpression()), !dbg !5930
  call void @llvm.dbg.declare(metadata i64* %sign, metadata !5931, metadata !DIExpression()), !dbg !5932
  call void @llvm.dbg.declare(metadata i64* %exp, metadata !5933, metadata !DIExpression()), !dbg !5934
  call void @llvm.dbg.declare(metadata i64* %sig, metadata !5935, metadata !DIExpression()), !dbg !5936
  call void @llvm.dbg.declare(metadata i64* %image, metadata !5937, metadata !DIExpression()), !dbg !5938
  %0 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5939
  %1 = bitcast %struct.real_value* %0 to i32*, !dbg !5940
  %bf.load = load i32, i32* %1, align 8, !dbg !5940
  %bf.lshr = lshr i32 %bf.load, 3, !dbg !5940
  %bf.clear = and i32 %bf.lshr, 1, !dbg !5940
  %shl = shl i32 %bf.clear, 15, !dbg !5941
  %conv = sext i32 %shl to i64, !dbg !5939
  store i64 %conv, i64* %sign, align 8, !dbg !5942
  %2 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5943
  %3 = bitcast %struct.real_value* %2 to i32*, !dbg !5944
  %bf.load1 = load i32, i32* %3, align 8, !dbg !5944
  %bf.clear2 = and i32 %bf.load1, 3, !dbg !5944
  switch i32 %bf.clear2, label %sw.default [
    i32 0, label %sw.bb
    i32 2, label %sw.bb3
    i32 3, label %sw.bb3
    i32 1, label %sw.bb4
  ], !dbg !5945

sw.bb:                                            ; preds = %entry
  store i64 0, i64* %image, align 8, !dbg !5946
  br label %sw.epilog, !dbg !5948

sw.bb3:                                           ; preds = %entry, %entry
  %4 = load i64, i64* %sign, align 8, !dbg !5949
  %or = or i64 4294934527, %4, !dbg !5950
  store i64 %or, i64* %image, align 8, !dbg !5951
  br label %sw.epilog, !dbg !5952

sw.bb4:                                           ; preds = %entry
  %5 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5953
  %sig5 = getelementptr inbounds %struct.real_value, %struct.real_value* %5, i32 0, i32 1, !dbg !5954
  %arrayidx = getelementptr inbounds [3 x i64], [3 x i64]* %sig5, i64 0, i64 2, !dbg !5953
  %6 = load i64, i64* %arrayidx, align 8, !dbg !5953
  %shr = lshr i64 %6, 40, !dbg !5955
  %and = and i64 %shr, 8388607, !dbg !5956
  store i64 %and, i64* %sig, align 8, !dbg !5957
  %7 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5958
  %8 = bitcast %struct.real_value* %7 to i32*, !dbg !5958
  %bf.load6 = load i32, i32* %8, align 8, !dbg !5958
  %bf.lshr7 = lshr i32 %bf.load6, 6, !dbg !5958
  %xor = xor i32 %bf.lshr7, 33554432, !dbg !5958
  %sub = sub nsw i32 %xor, 33554432, !dbg !5958
  %add = add nsw i32 %sub, 128, !dbg !5959
  %conv8 = sext i32 %add to i64, !dbg !5958
  store i64 %conv8, i64* %exp, align 8, !dbg !5960
  %9 = load i64, i64* %sig, align 8, !dbg !5961
  %shl9 = shl i64 %9, 16, !dbg !5962
  %and10 = and i64 %shl9, 4294901760, !dbg !5963
  store i64 %and10, i64* %image, align 8, !dbg !5964
  %10 = load i64, i64* %sign, align 8, !dbg !5965
  %11 = load i64, i64* %image, align 8, !dbg !5966
  %or11 = or i64 %11, %10, !dbg !5966
  store i64 %or11, i64* %image, align 8, !dbg !5966
  %12 = load i64, i64* %exp, align 8, !dbg !5967
  %shl12 = shl i64 %12, 7, !dbg !5968
  %13 = load i64, i64* %image, align 8, !dbg !5969
  %or13 = or i64 %13, %shl12, !dbg !5969
  store i64 %or13, i64* %image, align 8, !dbg !5969
  %14 = load i64, i64* %sig, align 8, !dbg !5970
  %shr14 = lshr i64 %14, 16, !dbg !5971
  %15 = load i64, i64* %image, align 8, !dbg !5972
  %or15 = or i64 %15, %shr14, !dbg !5972
  store i64 %or15, i64* %image, align 8, !dbg !5972
  br label %sw.epilog, !dbg !5973

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 4231, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5974
  br label %sw.epilog, !dbg !5975

sw.epilog:                                        ; preds = %sw.default, %sw.bb4, %sw.bb3, %sw.bb
  %16 = load i64, i64* %image, align 8, !dbg !5976
  %17 = load i64*, i64** %buf.addr, align 8, !dbg !5977
  %arrayidx16 = getelementptr inbounds i64, i64* %17, i64 0, !dbg !5977
  store i64 %16, i64* %arrayidx16, align 8, !dbg !5978
  ret void, !dbg !5979
}

; Function Attrs: noinline nounwind uwtable
define internal void @decode_vax_f(%struct.real_format* %fmt, %struct.real_value* %r, i64* %buf) #0 !dbg !5980 {
entry:
  %fmt.addr = alloca %struct.real_format*, align 8
  %r.addr = alloca %struct.real_value*, align 8
  %buf.addr = alloca i64*, align 8
  %image = alloca i64, align 8
  %exp = alloca i32, align 4
  store %struct.real_format* %fmt, %struct.real_format** %fmt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_format** %fmt.addr, metadata !5981, metadata !DIExpression()), !dbg !5982
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !5983, metadata !DIExpression()), !dbg !5984
  store i64* %buf, i64** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %buf.addr, metadata !5985, metadata !DIExpression()), !dbg !5986
  call void @llvm.dbg.declare(metadata i64* %image, metadata !5987, metadata !DIExpression()), !dbg !5988
  %0 = load i64*, i64** %buf.addr, align 8, !dbg !5989
  %arrayidx = getelementptr inbounds i64, i64* %0, i64 0, !dbg !5989
  %1 = load i64, i64* %arrayidx, align 8, !dbg !5989
  %and = and i64 %1, 4294967295, !dbg !5990
  store i64 %and, i64* %image, align 8, !dbg !5988
  call void @llvm.dbg.declare(metadata i32* %exp, metadata !5991, metadata !DIExpression()), !dbg !5992
  %2 = load i64, i64* %image, align 8, !dbg !5993
  %shr = lshr i64 %2, 7, !dbg !5994
  %and1 = and i64 %shr, 255, !dbg !5995
  %conv = trunc i64 %and1 to i32, !dbg !5996
  store i32 %conv, i32* %exp, align 4, !dbg !5992
  %3 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !5997
  %4 = bitcast %struct.real_value* %3 to i8*, !dbg !5998
  call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 32, i1 false), !dbg !5998
  %5 = load i32, i32* %exp, align 4, !dbg !5999
  %cmp = icmp ne i32 %5, 0, !dbg !6001
  br i1 %cmp, label %if.then, label %if.end, !dbg !6002

if.then:                                          ; preds = %entry
  %6 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6003
  %7 = bitcast %struct.real_value* %6 to i32*, !dbg !6005
  %bf.load = load i32, i32* %7, align 8, !dbg !6006
  %bf.clear = and i32 %bf.load, -4, !dbg !6006
  %bf.set = or i32 %bf.clear, 1, !dbg !6006
  store i32 %bf.set, i32* %7, align 8, !dbg !6006
  %8 = load i64, i64* %image, align 8, !dbg !6007
  %shr3 = lshr i64 %8, 15, !dbg !6008
  %and4 = and i64 %shr3, 1, !dbg !6009
  %conv5 = trunc i64 %and4 to i32, !dbg !6010
  %9 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6011
  %10 = bitcast %struct.real_value* %9 to i32*, !dbg !6012
  %bf.load6 = load i32, i32* %10, align 8, !dbg !6013
  %bf.value = and i32 %conv5, 1, !dbg !6013
  %bf.shl = shl i32 %bf.value, 3, !dbg !6013
  %bf.clear7 = and i32 %bf.load6, -9, !dbg !6013
  %bf.set8 = or i32 %bf.clear7, %bf.shl, !dbg !6013
  store i32 %bf.set8, i32* %10, align 8, !dbg !6013
  %11 = load i32, i32* %exp, align 4, !dbg !6014
  %sub = sub nsw i32 %11, 128, !dbg !6014
  %and9 = and i32 %sub, 67108863, !dbg !6014
  %12 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6014
  %13 = bitcast %struct.real_value* %12 to i32*, !dbg !6014
  %bf.load10 = load i32, i32* %13, align 8, !dbg !6014
  %bf.value11 = and i32 %and9, 67108863, !dbg !6014
  %bf.shl12 = shl i32 %bf.value11, 6, !dbg !6014
  %bf.clear13 = and i32 %bf.load10, 63, !dbg !6014
  %bf.set14 = or i32 %bf.clear13, %bf.shl12, !dbg !6014
  store i32 %bf.set14, i32* %13, align 8, !dbg !6014
  %14 = load i64, i64* %image, align 8, !dbg !6015
  %and15 = and i64 %14, 127, !dbg !6016
  %shl = shl i64 %and15, 16, !dbg !6017
  %15 = load i64, i64* %image, align 8, !dbg !6018
  %shr16 = lshr i64 %15, 16, !dbg !6019
  %and17 = and i64 %shr16, 65535, !dbg !6020
  %or = or i64 %shl, %and17, !dbg !6021
  store i64 %or, i64* %image, align 8, !dbg !6022
  %16 = load i64, i64* %image, align 8, !dbg !6023
  %shl18 = shl i64 %16, 40, !dbg !6024
  %or19 = or i64 %shl18, -9223372036854775808, !dbg !6025
  %17 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6026
  %sig = getelementptr inbounds %struct.real_value, %struct.real_value* %17, i32 0, i32 1, !dbg !6027
  %arrayidx20 = getelementptr inbounds [3 x i64], [3 x i64]* %sig, i64 0, i64 2, !dbg !6026
  store i64 %or19, i64* %arrayidx20, align 8, !dbg !6028
  br label %if.end, !dbg !6029

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !6030
}

; Function Attrs: noinline nounwind uwtable
define internal void @encode_vax_d(%struct.real_format* %fmt, i64* %buf, %struct.real_value* %r) #0 !dbg !6031 {
entry:
  %fmt.addr = alloca %struct.real_format*, align 8
  %buf.addr = alloca i64*, align 8
  %r.addr = alloca %struct.real_value*, align 8
  %image0 = alloca i64, align 8
  %image1 = alloca i64, align 8
  %sign = alloca i64, align 8
  store %struct.real_format* %fmt, %struct.real_format** %fmt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_format** %fmt.addr, metadata !6032, metadata !DIExpression()), !dbg !6033
  store i64* %buf, i64** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %buf.addr, metadata !6034, metadata !DIExpression()), !dbg !6035
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !6036, metadata !DIExpression()), !dbg !6037
  call void @llvm.dbg.declare(metadata i64* %image0, metadata !6038, metadata !DIExpression()), !dbg !6039
  call void @llvm.dbg.declare(metadata i64* %image1, metadata !6040, metadata !DIExpression()), !dbg !6041
  call void @llvm.dbg.declare(metadata i64* %sign, metadata !6042, metadata !DIExpression()), !dbg !6043
  %0 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6044
  %1 = bitcast %struct.real_value* %0 to i32*, !dbg !6045
  %bf.load = load i32, i32* %1, align 8, !dbg !6045
  %bf.lshr = lshr i32 %bf.load, 3, !dbg !6045
  %bf.clear = and i32 %bf.lshr, 1, !dbg !6045
  %shl = shl i32 %bf.clear, 15, !dbg !6046
  %conv = sext i32 %shl to i64, !dbg !6044
  store i64 %conv, i64* %sign, align 8, !dbg !6043
  %2 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6047
  %3 = bitcast %struct.real_value* %2 to i32*, !dbg !6048
  %bf.load1 = load i32, i32* %3, align 8, !dbg !6048
  %bf.clear2 = and i32 %bf.load1, 3, !dbg !6048
  switch i32 %bf.clear2, label %sw.default [
    i32 0, label %sw.bb
    i32 2, label %sw.bb3
    i32 3, label %sw.bb3
    i32 1, label %sw.bb4
  ], !dbg !6049

sw.bb:                                            ; preds = %entry
  store i64 0, i64* %image1, align 8, !dbg !6050
  store i64 0, i64* %image0, align 8, !dbg !6052
  br label %sw.epilog, !dbg !6053

sw.bb3:                                           ; preds = %entry, %entry
  %4 = load i64, i64* %sign, align 8, !dbg !6054
  %or = or i64 4294934527, %4, !dbg !6055
  store i64 %or, i64* %image0, align 8, !dbg !6056
  store i64 4294967295, i64* %image1, align 8, !dbg !6057
  br label %sw.epilog, !dbg !6058

sw.bb4:                                           ; preds = %entry
  %5 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6059
  %sig = getelementptr inbounds %struct.real_value, %struct.real_value* %5, i32 0, i32 1, !dbg !6062
  %arrayidx = getelementptr inbounds [3 x i64], [3 x i64]* %sig, i64 0, i64 2, !dbg !6059
  %6 = load i64, i64* %arrayidx, align 8, !dbg !6059
  store i64 %6, i64* %image0, align 8, !dbg !6063
  %7 = load i64, i64* %image0, align 8, !dbg !6064
  %shr = lshr i64 %7, 8, !dbg !6065
  %and = and i64 %shr, 4294967295, !dbg !6066
  store i64 %and, i64* %image1, align 8, !dbg !6067
  %8 = load i64, i64* %image0, align 8, !dbg !6068
  %shr5 = lshr i64 %8, 9, !dbg !6069
  %shr6 = lshr i64 %shr5, 31, !dbg !6070
  %and7 = and i64 %shr6, 8388607, !dbg !6071
  store i64 %and7, i64* %image0, align 8, !dbg !6072
  %9 = load i64, i64* %image0, align 8, !dbg !6073
  %shl8 = shl i64 %9, 16, !dbg !6074
  %10 = load i64, i64* %image0, align 8, !dbg !6075
  %shr9 = lshr i64 %10, 16, !dbg !6076
  %or10 = or i64 %shl8, %shr9, !dbg !6077
  %and11 = and i64 %or10, 4294901887, !dbg !6078
  store i64 %and11, i64* %image0, align 8, !dbg !6079
  %11 = load i64, i64* %image1, align 8, !dbg !6080
  %shl12 = shl i64 %11, 16, !dbg !6081
  %12 = load i64, i64* %image1, align 8, !dbg !6082
  %shr13 = lshr i64 %12, 16, !dbg !6083
  %or14 = or i64 %shl12, %shr13, !dbg !6084
  %and15 = and i64 %or14, 4294967295, !dbg !6085
  store i64 %and15, i64* %image1, align 8, !dbg !6086
  %13 = load i64, i64* %sign, align 8, !dbg !6087
  %14 = load i64, i64* %image0, align 8, !dbg !6088
  %or16 = or i64 %14, %13, !dbg !6088
  store i64 %or16, i64* %image0, align 8, !dbg !6088
  %15 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6089
  %16 = bitcast %struct.real_value* %15 to i32*, !dbg !6089
  %bf.load17 = load i32, i32* %16, align 8, !dbg !6089
  %bf.lshr18 = lshr i32 %bf.load17, 6, !dbg !6089
  %xor = xor i32 %bf.lshr18, 33554432, !dbg !6089
  %sub = sub nsw i32 %xor, 33554432, !dbg !6089
  %add = add nsw i32 %sub, 128, !dbg !6090
  %shl19 = shl i32 %add, 7, !dbg !6091
  %conv20 = sext i32 %shl19 to i64, !dbg !6092
  %17 = load i64, i64* %image0, align 8, !dbg !6093
  %or21 = or i64 %17, %conv20, !dbg !6093
  store i64 %or21, i64* %image0, align 8, !dbg !6093
  br label %sw.epilog, !dbg !6094

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 4302, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6095
  br label %sw.epilog, !dbg !6096

sw.epilog:                                        ; preds = %sw.default, %sw.bb4, %sw.bb3, %sw.bb
  %18 = load i64, i64* %image0, align 8, !dbg !6097
  %19 = load i64*, i64** %buf.addr, align 8, !dbg !6099
  %arrayidx22 = getelementptr inbounds i64, i64* %19, i64 0, !dbg !6099
  store i64 %18, i64* %arrayidx22, align 8, !dbg !6100
  %20 = load i64, i64* %image1, align 8, !dbg !6101
  %21 = load i64*, i64** %buf.addr, align 8, !dbg !6102
  %arrayidx23 = getelementptr inbounds i64, i64* %21, i64 1, !dbg !6102
  store i64 %20, i64* %arrayidx23, align 8, !dbg !6103
  ret void, !dbg !6104
}

; Function Attrs: noinline nounwind uwtable
define internal void @decode_vax_d(%struct.real_format* %fmt, %struct.real_value* %r, i64* %buf) #0 !dbg !6105 {
entry:
  %fmt.addr = alloca %struct.real_format*, align 8
  %r.addr = alloca %struct.real_value*, align 8
  %buf.addr = alloca i64*, align 8
  %image0 = alloca i64, align 8
  %image1 = alloca i64, align 8
  %exp = alloca i32, align 4
  store %struct.real_format* %fmt, %struct.real_format** %fmt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_format** %fmt.addr, metadata !6106, metadata !DIExpression()), !dbg !6107
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !6108, metadata !DIExpression()), !dbg !6109
  store i64* %buf, i64** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %buf.addr, metadata !6110, metadata !DIExpression()), !dbg !6111
  call void @llvm.dbg.declare(metadata i64* %image0, metadata !6112, metadata !DIExpression()), !dbg !6113
  call void @llvm.dbg.declare(metadata i64* %image1, metadata !6114, metadata !DIExpression()), !dbg !6115
  call void @llvm.dbg.declare(metadata i32* %exp, metadata !6116, metadata !DIExpression()), !dbg !6117
  %0 = load i64*, i64** %buf.addr, align 8, !dbg !6118
  %arrayidx = getelementptr inbounds i64, i64* %0, i64 0, !dbg !6118
  %1 = load i64, i64* %arrayidx, align 8, !dbg !6118
  store i64 %1, i64* %image0, align 8, !dbg !6120
  %2 = load i64*, i64** %buf.addr, align 8, !dbg !6121
  %arrayidx1 = getelementptr inbounds i64, i64* %2, i64 1, !dbg !6121
  %3 = load i64, i64* %arrayidx1, align 8, !dbg !6121
  store i64 %3, i64* %image1, align 8, !dbg !6122
  %4 = load i64, i64* %image0, align 8, !dbg !6123
  %and = and i64 %4, 4294967295, !dbg !6123
  store i64 %and, i64* %image0, align 8, !dbg !6123
  %5 = load i64, i64* %image1, align 8, !dbg !6124
  %and2 = and i64 %5, 4294967295, !dbg !6124
  store i64 %and2, i64* %image1, align 8, !dbg !6124
  %6 = load i64, i64* %image0, align 8, !dbg !6125
  %shr = lshr i64 %6, 7, !dbg !6126
  %and3 = and i64 %shr, 255, !dbg !6127
  %conv = trunc i64 %and3 to i32, !dbg !6128
  store i32 %conv, i32* %exp, align 4, !dbg !6129
  %7 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6130
  %8 = bitcast %struct.real_value* %7 to i8*, !dbg !6131
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 32, i1 false), !dbg !6131
  %9 = load i32, i32* %exp, align 4, !dbg !6132
  %cmp = icmp ne i32 %9, 0, !dbg !6134
  br i1 %cmp, label %if.then, label %if.end, !dbg !6135

if.then:                                          ; preds = %entry
  %10 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6136
  %11 = bitcast %struct.real_value* %10 to i32*, !dbg !6138
  %bf.load = load i32, i32* %11, align 8, !dbg !6139
  %bf.clear = and i32 %bf.load, -4, !dbg !6139
  %bf.set = or i32 %bf.clear, 1, !dbg !6139
  store i32 %bf.set, i32* %11, align 8, !dbg !6139
  %12 = load i64, i64* %image0, align 8, !dbg !6140
  %shr5 = lshr i64 %12, 15, !dbg !6141
  %and6 = and i64 %shr5, 1, !dbg !6142
  %conv7 = trunc i64 %and6 to i32, !dbg !6143
  %13 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6144
  %14 = bitcast %struct.real_value* %13 to i32*, !dbg !6145
  %bf.load8 = load i32, i32* %14, align 8, !dbg !6146
  %bf.value = and i32 %conv7, 1, !dbg !6146
  %bf.shl = shl i32 %bf.value, 3, !dbg !6146
  %bf.clear9 = and i32 %bf.load8, -9, !dbg !6146
  %bf.set10 = or i32 %bf.clear9, %bf.shl, !dbg !6146
  store i32 %bf.set10, i32* %14, align 8, !dbg !6146
  %15 = load i32, i32* %exp, align 4, !dbg !6147
  %sub = sub nsw i32 %15, 128, !dbg !6147
  %and11 = and i32 %sub, 67108863, !dbg !6147
  %16 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6147
  %17 = bitcast %struct.real_value* %16 to i32*, !dbg !6147
  %bf.load12 = load i32, i32* %17, align 8, !dbg !6147
  %bf.value13 = and i32 %and11, 67108863, !dbg !6147
  %bf.shl14 = shl i32 %bf.value13, 6, !dbg !6147
  %bf.clear15 = and i32 %bf.load12, 63, !dbg !6147
  %bf.set16 = or i32 %bf.clear15, %bf.shl14, !dbg !6147
  store i32 %bf.set16, i32* %17, align 8, !dbg !6147
  %18 = load i64, i64* %image0, align 8, !dbg !6148
  %and17 = and i64 %18, 127, !dbg !6149
  %shl = shl i64 %and17, 16, !dbg !6150
  %19 = load i64, i64* %image0, align 8, !dbg !6151
  %shr18 = lshr i64 %19, 16, !dbg !6152
  %and19 = and i64 %shr18, 65535, !dbg !6153
  %or = or i64 %shl, %and19, !dbg !6154
  store i64 %or, i64* %image0, align 8, !dbg !6155
  %20 = load i64, i64* %image1, align 8, !dbg !6156
  %and20 = and i64 %20, 65535, !dbg !6157
  %shl21 = shl i64 %and20, 16, !dbg !6158
  %21 = load i64, i64* %image1, align 8, !dbg !6159
  %shr22 = lshr i64 %21, 16, !dbg !6160
  %and23 = and i64 %shr22, 65535, !dbg !6161
  %or24 = or i64 %shl21, %and23, !dbg !6162
  store i64 %or24, i64* %image1, align 8, !dbg !6163
  %22 = load i64, i64* %image0, align 8, !dbg !6164
  %shl25 = shl i64 %22, 31, !dbg !6167
  %shl26 = shl i64 %shl25, 1, !dbg !6168
  %23 = load i64, i64* %image1, align 8, !dbg !6169
  %or27 = or i64 %shl26, %23, !dbg !6170
  store i64 %or27, i64* %image0, align 8, !dbg !6171
  %24 = load i64, i64* %image0, align 8, !dbg !6172
  %shl28 = shl i64 %24, 8, !dbg !6172
  store i64 %shl28, i64* %image0, align 8, !dbg !6172
  %25 = load i64, i64* %image0, align 8, !dbg !6173
  %or29 = or i64 %25, -9223372036854775808, !dbg !6173
  store i64 %or29, i64* %image0, align 8, !dbg !6173
  %26 = load i64, i64* %image0, align 8, !dbg !6174
  %27 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6175
  %sig = getelementptr inbounds %struct.real_value, %struct.real_value* %27, i32 0, i32 1, !dbg !6176
  %arrayidx30 = getelementptr inbounds [3 x i64], [3 x i64]* %sig, i64 0, i64 2, !dbg !6175
  store i64 %26, i64* %arrayidx30, align 8, !dbg !6177
  br label %if.end, !dbg !6178

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !6179
}

; Function Attrs: noinline nounwind uwtable
define internal void @encode_vax_g(%struct.real_format* %fmt, i64* %buf, %struct.real_value* %r) #0 !dbg !6180 {
entry:
  %fmt.addr = alloca %struct.real_format*, align 8
  %buf.addr = alloca i64*, align 8
  %r.addr = alloca %struct.real_value*, align 8
  %image0 = alloca i64, align 8
  %image1 = alloca i64, align 8
  %sign = alloca i64, align 8
  store %struct.real_format* %fmt, %struct.real_format** %fmt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_format** %fmt.addr, metadata !6181, metadata !DIExpression()), !dbg !6182
  store i64* %buf, i64** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %buf.addr, metadata !6183, metadata !DIExpression()), !dbg !6184
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !6185, metadata !DIExpression()), !dbg !6186
  call void @llvm.dbg.declare(metadata i64* %image0, metadata !6187, metadata !DIExpression()), !dbg !6188
  call void @llvm.dbg.declare(metadata i64* %image1, metadata !6189, metadata !DIExpression()), !dbg !6190
  call void @llvm.dbg.declare(metadata i64* %sign, metadata !6191, metadata !DIExpression()), !dbg !6192
  %0 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6193
  %1 = bitcast %struct.real_value* %0 to i32*, !dbg !6194
  %bf.load = load i32, i32* %1, align 8, !dbg !6194
  %bf.lshr = lshr i32 %bf.load, 3, !dbg !6194
  %bf.clear = and i32 %bf.lshr, 1, !dbg !6194
  %shl = shl i32 %bf.clear, 15, !dbg !6195
  %conv = sext i32 %shl to i64, !dbg !6193
  store i64 %conv, i64* %sign, align 8, !dbg !6192
  %2 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6196
  %3 = bitcast %struct.real_value* %2 to i32*, !dbg !6197
  %bf.load1 = load i32, i32* %3, align 8, !dbg !6197
  %bf.clear2 = and i32 %bf.load1, 3, !dbg !6197
  switch i32 %bf.clear2, label %sw.default [
    i32 0, label %sw.bb
    i32 2, label %sw.bb3
    i32 3, label %sw.bb3
    i32 1, label %sw.bb4
  ], !dbg !6198

sw.bb:                                            ; preds = %entry
  store i64 0, i64* %image1, align 8, !dbg !6199
  store i64 0, i64* %image0, align 8, !dbg !6201
  br label %sw.epilog, !dbg !6202

sw.bb3:                                           ; preds = %entry, %entry
  %4 = load i64, i64* %sign, align 8, !dbg !6203
  %or = or i64 4294934527, %4, !dbg !6204
  store i64 %or, i64* %image0, align 8, !dbg !6205
  store i64 4294967295, i64* %image1, align 8, !dbg !6206
  br label %sw.epilog, !dbg !6207

sw.bb4:                                           ; preds = %entry
  %5 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6208
  %sig = getelementptr inbounds %struct.real_value, %struct.real_value* %5, i32 0, i32 1, !dbg !6211
  %arrayidx = getelementptr inbounds [3 x i64], [3 x i64]* %sig, i64 0, i64 2, !dbg !6208
  %6 = load i64, i64* %arrayidx, align 8, !dbg !6208
  store i64 %6, i64* %image0, align 8, !dbg !6212
  %7 = load i64, i64* %image0, align 8, !dbg !6213
  %shr = lshr i64 %7, 11, !dbg !6214
  %and = and i64 %shr, 4294967295, !dbg !6215
  store i64 %and, i64* %image1, align 8, !dbg !6216
  %8 = load i64, i64* %image0, align 8, !dbg !6217
  %shr5 = lshr i64 %8, 12, !dbg !6218
  %shr6 = lshr i64 %shr5, 31, !dbg !6219
  %and7 = and i64 %shr6, 1048575, !dbg !6220
  store i64 %and7, i64* %image0, align 8, !dbg !6221
  %9 = load i64, i64* %image0, align 8, !dbg !6222
  %shl8 = shl i64 %9, 16, !dbg !6223
  %10 = load i64, i64* %image0, align 8, !dbg !6224
  %shr9 = lshr i64 %10, 16, !dbg !6225
  %or10 = or i64 %shl8, %shr9, !dbg !6226
  %and11 = and i64 %or10, 4294901775, !dbg !6227
  store i64 %and11, i64* %image0, align 8, !dbg !6228
  %11 = load i64, i64* %image1, align 8, !dbg !6229
  %shl12 = shl i64 %11, 16, !dbg !6230
  %12 = load i64, i64* %image1, align 8, !dbg !6231
  %shr13 = lshr i64 %12, 16, !dbg !6232
  %or14 = or i64 %shl12, %shr13, !dbg !6233
  %and15 = and i64 %or14, 4294967295, !dbg !6234
  store i64 %and15, i64* %image1, align 8, !dbg !6235
  %13 = load i64, i64* %sign, align 8, !dbg !6236
  %14 = load i64, i64* %image0, align 8, !dbg !6237
  %or16 = or i64 %14, %13, !dbg !6237
  store i64 %or16, i64* %image0, align 8, !dbg !6237
  %15 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6238
  %16 = bitcast %struct.real_value* %15 to i32*, !dbg !6238
  %bf.load17 = load i32, i32* %16, align 8, !dbg !6238
  %bf.lshr18 = lshr i32 %bf.load17, 6, !dbg !6238
  %xor = xor i32 %bf.lshr18, 33554432, !dbg !6238
  %sub = sub nsw i32 %xor, 33554432, !dbg !6238
  %add = add nsw i32 %sub, 1024, !dbg !6239
  %shl19 = shl i32 %add, 4, !dbg !6240
  %conv20 = sext i32 %shl19 to i64, !dbg !6241
  %17 = load i64, i64* %image0, align 8, !dbg !6242
  %or21 = or i64 %17, %conv20, !dbg !6242
  store i64 %or21, i64* %image0, align 8, !dbg !6242
  br label %sw.epilog, !dbg !6243

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 4402, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6244
  br label %sw.epilog, !dbg !6245

sw.epilog:                                        ; preds = %sw.default, %sw.bb4, %sw.bb3, %sw.bb
  %18 = load i64, i64* %image0, align 8, !dbg !6246
  %19 = load i64*, i64** %buf.addr, align 8, !dbg !6248
  %arrayidx22 = getelementptr inbounds i64, i64* %19, i64 0, !dbg !6248
  store i64 %18, i64* %arrayidx22, align 8, !dbg !6249
  %20 = load i64, i64* %image1, align 8, !dbg !6250
  %21 = load i64*, i64** %buf.addr, align 8, !dbg !6251
  %arrayidx23 = getelementptr inbounds i64, i64* %21, i64 1, !dbg !6251
  store i64 %20, i64* %arrayidx23, align 8, !dbg !6252
  ret void, !dbg !6253
}

; Function Attrs: noinline nounwind uwtable
define internal void @decode_vax_g(%struct.real_format* %fmt, %struct.real_value* %r, i64* %buf) #0 !dbg !6254 {
entry:
  %fmt.addr = alloca %struct.real_format*, align 8
  %r.addr = alloca %struct.real_value*, align 8
  %buf.addr = alloca i64*, align 8
  %image0 = alloca i64, align 8
  %image1 = alloca i64, align 8
  %exp = alloca i32, align 4
  store %struct.real_format* %fmt, %struct.real_format** %fmt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_format** %fmt.addr, metadata !6255, metadata !DIExpression()), !dbg !6256
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !6257, metadata !DIExpression()), !dbg !6258
  store i64* %buf, i64** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %buf.addr, metadata !6259, metadata !DIExpression()), !dbg !6260
  call void @llvm.dbg.declare(metadata i64* %image0, metadata !6261, metadata !DIExpression()), !dbg !6262
  call void @llvm.dbg.declare(metadata i64* %image1, metadata !6263, metadata !DIExpression()), !dbg !6264
  call void @llvm.dbg.declare(metadata i32* %exp, metadata !6265, metadata !DIExpression()), !dbg !6266
  %0 = load i64*, i64** %buf.addr, align 8, !dbg !6267
  %arrayidx = getelementptr inbounds i64, i64* %0, i64 0, !dbg !6267
  %1 = load i64, i64* %arrayidx, align 8, !dbg !6267
  store i64 %1, i64* %image0, align 8, !dbg !6269
  %2 = load i64*, i64** %buf.addr, align 8, !dbg !6270
  %arrayidx1 = getelementptr inbounds i64, i64* %2, i64 1, !dbg !6270
  %3 = load i64, i64* %arrayidx1, align 8, !dbg !6270
  store i64 %3, i64* %image1, align 8, !dbg !6271
  %4 = load i64, i64* %image0, align 8, !dbg !6272
  %and = and i64 %4, 4294967295, !dbg !6272
  store i64 %and, i64* %image0, align 8, !dbg !6272
  %5 = load i64, i64* %image1, align 8, !dbg !6273
  %and2 = and i64 %5, 4294967295, !dbg !6273
  store i64 %and2, i64* %image1, align 8, !dbg !6273
  %6 = load i64, i64* %image0, align 8, !dbg !6274
  %shr = lshr i64 %6, 4, !dbg !6275
  %and3 = and i64 %shr, 2047, !dbg !6276
  %conv = trunc i64 %and3 to i32, !dbg !6277
  store i32 %conv, i32* %exp, align 4, !dbg !6278
  %7 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6279
  %8 = bitcast %struct.real_value* %7 to i8*, !dbg !6280
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 32, i1 false), !dbg !6280
  %9 = load i32, i32* %exp, align 4, !dbg !6281
  %cmp = icmp ne i32 %9, 0, !dbg !6283
  br i1 %cmp, label %if.then, label %if.end, !dbg !6284

if.then:                                          ; preds = %entry
  %10 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6285
  %11 = bitcast %struct.real_value* %10 to i32*, !dbg !6287
  %bf.load = load i32, i32* %11, align 8, !dbg !6288
  %bf.clear = and i32 %bf.load, -4, !dbg !6288
  %bf.set = or i32 %bf.clear, 1, !dbg !6288
  store i32 %bf.set, i32* %11, align 8, !dbg !6288
  %12 = load i64, i64* %image0, align 8, !dbg !6289
  %shr5 = lshr i64 %12, 15, !dbg !6290
  %and6 = and i64 %shr5, 1, !dbg !6291
  %conv7 = trunc i64 %and6 to i32, !dbg !6292
  %13 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6293
  %14 = bitcast %struct.real_value* %13 to i32*, !dbg !6294
  %bf.load8 = load i32, i32* %14, align 8, !dbg !6295
  %bf.value = and i32 %conv7, 1, !dbg !6295
  %bf.shl = shl i32 %bf.value, 3, !dbg !6295
  %bf.clear9 = and i32 %bf.load8, -9, !dbg !6295
  %bf.set10 = or i32 %bf.clear9, %bf.shl, !dbg !6295
  store i32 %bf.set10, i32* %14, align 8, !dbg !6295
  %15 = load i32, i32* %exp, align 4, !dbg !6296
  %sub = sub nsw i32 %15, 1024, !dbg !6296
  %and11 = and i32 %sub, 67108863, !dbg !6296
  %16 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6296
  %17 = bitcast %struct.real_value* %16 to i32*, !dbg !6296
  %bf.load12 = load i32, i32* %17, align 8, !dbg !6296
  %bf.value13 = and i32 %and11, 67108863, !dbg !6296
  %bf.shl14 = shl i32 %bf.value13, 6, !dbg !6296
  %bf.clear15 = and i32 %bf.load12, 63, !dbg !6296
  %bf.set16 = or i32 %bf.clear15, %bf.shl14, !dbg !6296
  store i32 %bf.set16, i32* %17, align 8, !dbg !6296
  %18 = load i64, i64* %image0, align 8, !dbg !6297
  %and17 = and i64 %18, 15, !dbg !6298
  %shl = shl i64 %and17, 16, !dbg !6299
  %19 = load i64, i64* %image0, align 8, !dbg !6300
  %shr18 = lshr i64 %19, 16, !dbg !6301
  %and19 = and i64 %shr18, 65535, !dbg !6302
  %or = or i64 %shl, %and19, !dbg !6303
  store i64 %or, i64* %image0, align 8, !dbg !6304
  %20 = load i64, i64* %image1, align 8, !dbg !6305
  %and20 = and i64 %20, 65535, !dbg !6306
  %shl21 = shl i64 %and20, 16, !dbg !6307
  %21 = load i64, i64* %image1, align 8, !dbg !6308
  %shr22 = lshr i64 %21, 16, !dbg !6309
  %and23 = and i64 %shr22, 65535, !dbg !6310
  %or24 = or i64 %shl21, %and23, !dbg !6311
  store i64 %or24, i64* %image1, align 8, !dbg !6312
  %22 = load i64, i64* %image0, align 8, !dbg !6313
  %shl25 = shl i64 %22, 31, !dbg !6316
  %shl26 = shl i64 %shl25, 1, !dbg !6317
  %23 = load i64, i64* %image1, align 8, !dbg !6318
  %or27 = or i64 %shl26, %23, !dbg !6319
  store i64 %or27, i64* %image0, align 8, !dbg !6320
  %24 = load i64, i64* %image0, align 8, !dbg !6321
  %shl28 = shl i64 %24, 11, !dbg !6321
  store i64 %shl28, i64* %image0, align 8, !dbg !6321
  %25 = load i64, i64* %image0, align 8, !dbg !6322
  %or29 = or i64 %25, -9223372036854775808, !dbg !6322
  store i64 %or29, i64* %image0, align 8, !dbg !6322
  %26 = load i64, i64* %image0, align 8, !dbg !6323
  %27 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6324
  %sig = getelementptr inbounds %struct.real_value, %struct.real_value* %27, i32 0, i32 1, !dbg !6325
  %arrayidx30 = getelementptr inbounds [3 x i64], [3 x i64]* %sig, i64 0, i64 2, !dbg !6324
  store i64 %26, i64* %arrayidx30, align 8, !dbg !6326
  br label %if.end, !dbg !6327

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !6328
}

; Function Attrs: noinline nounwind uwtable
define internal void @encode_decimal_single(%struct.real_format* %fmt, i64* %buf, %struct.real_value* %r) #0 !dbg !6329 {
entry:
  %fmt.addr = alloca %struct.real_format*, align 8
  %buf.addr = alloca i64*, align 8
  %r.addr = alloca %struct.real_value*, align 8
  store %struct.real_format* %fmt, %struct.real_format** %fmt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_format** %fmt.addr, metadata !6330, metadata !DIExpression()), !dbg !6331
  store i64* %buf, i64** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %buf.addr, metadata !6332, metadata !DIExpression()), !dbg !6333
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !6334, metadata !DIExpression()), !dbg !6335
  %0 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !6336
  %1 = load i64*, i64** %buf.addr, align 8, !dbg !6337
  %2 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6338
  call void @encode_decimal32(%struct.real_format* %0, i64* %1, %struct.real_value* %2), !dbg !6339
  ret void, !dbg !6340
}

; Function Attrs: noinline nounwind uwtable
define internal void @decode_decimal_single(%struct.real_format* %fmt, %struct.real_value* %r, i64* %buf) #0 !dbg !6341 {
entry:
  %fmt.addr = alloca %struct.real_format*, align 8
  %r.addr = alloca %struct.real_value*, align 8
  %buf.addr = alloca i64*, align 8
  store %struct.real_format* %fmt, %struct.real_format** %fmt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_format** %fmt.addr, metadata !6342, metadata !DIExpression()), !dbg !6343
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !6344, metadata !DIExpression()), !dbg !6345
  store i64* %buf, i64** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %buf.addr, metadata !6346, metadata !DIExpression()), !dbg !6347
  %0 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !6348
  %1 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6349
  %2 = load i64*, i64** %buf.addr, align 8, !dbg !6350
  call void @decode_decimal32(%struct.real_format* %0, %struct.real_value* %1, i64* %2), !dbg !6351
  ret void, !dbg !6352
}

; Function Attrs: noinline nounwind uwtable
define internal void @encode_decimal_double(%struct.real_format* %fmt, i64* %buf, %struct.real_value* %r) #0 !dbg !6353 {
entry:
  %fmt.addr = alloca %struct.real_format*, align 8
  %buf.addr = alloca i64*, align 8
  %r.addr = alloca %struct.real_value*, align 8
  store %struct.real_format* %fmt, %struct.real_format** %fmt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_format** %fmt.addr, metadata !6354, metadata !DIExpression()), !dbg !6355
  store i64* %buf, i64** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %buf.addr, metadata !6356, metadata !DIExpression()), !dbg !6357
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !6358, metadata !DIExpression()), !dbg !6359
  %0 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !6360
  %1 = load i64*, i64** %buf.addr, align 8, !dbg !6361
  %2 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6362
  call void @encode_decimal64(%struct.real_format* %0, i64* %1, %struct.real_value* %2), !dbg !6363
  ret void, !dbg !6364
}

; Function Attrs: noinline nounwind uwtable
define internal void @decode_decimal_double(%struct.real_format* %fmt, %struct.real_value* %r, i64* %buf) #0 !dbg !6365 {
entry:
  %fmt.addr = alloca %struct.real_format*, align 8
  %r.addr = alloca %struct.real_value*, align 8
  %buf.addr = alloca i64*, align 8
  store %struct.real_format* %fmt, %struct.real_format** %fmt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_format** %fmt.addr, metadata !6366, metadata !DIExpression()), !dbg !6367
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !6368, metadata !DIExpression()), !dbg !6369
  store i64* %buf, i64** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %buf.addr, metadata !6370, metadata !DIExpression()), !dbg !6371
  %0 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !6372
  %1 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6373
  %2 = load i64*, i64** %buf.addr, align 8, !dbg !6374
  call void @decode_decimal64(%struct.real_format* %0, %struct.real_value* %1, i64* %2), !dbg !6375
  ret void, !dbg !6376
}

; Function Attrs: noinline nounwind uwtable
define internal void @encode_decimal_quad(%struct.real_format* %fmt, i64* %buf, %struct.real_value* %r) #0 !dbg !6377 {
entry:
  %fmt.addr = alloca %struct.real_format*, align 8
  %buf.addr = alloca i64*, align 8
  %r.addr = alloca %struct.real_value*, align 8
  store %struct.real_format* %fmt, %struct.real_format** %fmt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_format** %fmt.addr, metadata !6378, metadata !DIExpression()), !dbg !6379
  store i64* %buf, i64** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %buf.addr, metadata !6380, metadata !DIExpression()), !dbg !6381
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !6382, metadata !DIExpression()), !dbg !6383
  %0 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !6384
  %1 = load i64*, i64** %buf.addr, align 8, !dbg !6385
  %2 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6386
  call void @encode_decimal128(%struct.real_format* %0, i64* %1, %struct.real_value* %2), !dbg !6387
  ret void, !dbg !6388
}

; Function Attrs: noinline nounwind uwtable
define internal void @decode_decimal_quad(%struct.real_format* %fmt, %struct.real_value* %r, i64* %buf) #0 !dbg !6389 {
entry:
  %fmt.addr = alloca %struct.real_format*, align 8
  %r.addr = alloca %struct.real_value*, align 8
  %buf.addr = alloca i64*, align 8
  store %struct.real_format* %fmt, %struct.real_format** %fmt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_format** %fmt.addr, metadata !6390, metadata !DIExpression()), !dbg !6391
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !6392, metadata !DIExpression()), !dbg !6393
  store i64* %buf, i64** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %buf.addr, metadata !6394, metadata !DIExpression()), !dbg !6395
  %0 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !6396
  %1 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6397
  %2 = load i64*, i64** %buf.addr, align 8, !dbg !6398
  call void @decode_decimal128(%struct.real_format* %0, %struct.real_value* %1, i64* %2), !dbg !6399
  ret void, !dbg !6400
}

; Function Attrs: noinline nounwind uwtable
define internal void @encode_ieee_half(%struct.real_format* %fmt, i64* %buf, %struct.real_value* %r) #0 !dbg !6401 {
entry:
  %fmt.addr = alloca %struct.real_format*, align 8
  %buf.addr = alloca i64*, align 8
  %r.addr = alloca %struct.real_value*, align 8
  %image = alloca i64, align 8
  %sig = alloca i64, align 8
  %exp = alloca i64, align 8
  %sign = alloca i64, align 8
  %denormal = alloca i8, align 1
  store %struct.real_format* %fmt, %struct.real_format** %fmt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_format** %fmt.addr, metadata !6402, metadata !DIExpression()), !dbg !6403
  store i64* %buf, i64** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %buf.addr, metadata !6404, metadata !DIExpression()), !dbg !6405
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !6406, metadata !DIExpression()), !dbg !6407
  call void @llvm.dbg.declare(metadata i64* %image, metadata !6408, metadata !DIExpression()), !dbg !6409
  call void @llvm.dbg.declare(metadata i64* %sig, metadata !6410, metadata !DIExpression()), !dbg !6411
  call void @llvm.dbg.declare(metadata i64* %exp, metadata !6412, metadata !DIExpression()), !dbg !6413
  call void @llvm.dbg.declare(metadata i64* %sign, metadata !6414, metadata !DIExpression()), !dbg !6415
  %0 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6416
  %1 = bitcast %struct.real_value* %0 to i32*, !dbg !6417
  %bf.load = load i32, i32* %1, align 8, !dbg !6417
  %bf.lshr = lshr i32 %bf.load, 3, !dbg !6417
  %bf.clear = and i32 %bf.lshr, 1, !dbg !6417
  %conv = zext i32 %bf.clear to i64, !dbg !6416
  store i64 %conv, i64* %sign, align 8, !dbg !6415
  call void @llvm.dbg.declare(metadata i8* %denormal, metadata !6418, metadata !DIExpression()), !dbg !6419
  %2 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6420
  %sig1 = getelementptr inbounds %struct.real_value, %struct.real_value* %2, i32 0, i32 1, !dbg !6421
  %arrayidx = getelementptr inbounds [3 x i64], [3 x i64]* %sig1, i64 0, i64 2, !dbg !6420
  %3 = load i64, i64* %arrayidx, align 8, !dbg !6420
  %and = and i64 %3, -9223372036854775808, !dbg !6422
  %cmp = icmp eq i64 %and, 0, !dbg !6423
  %conv2 = zext i1 %cmp to i32, !dbg !6423
  %conv3 = trunc i32 %conv2 to i8, !dbg !6424
  store i8 %conv3, i8* %denormal, align 1, !dbg !6419
  %4 = load i64, i64* %sign, align 8, !dbg !6425
  %shl = shl i64 %4, 15, !dbg !6426
  store i64 %shl, i64* %image, align 8, !dbg !6427
  %5 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6428
  %sig4 = getelementptr inbounds %struct.real_value, %struct.real_value* %5, i32 0, i32 1, !dbg !6429
  %arrayidx5 = getelementptr inbounds [3 x i64], [3 x i64]* %sig4, i64 0, i64 2, !dbg !6428
  %6 = load i64, i64* %arrayidx5, align 8, !dbg !6428
  %shr = lshr i64 %6, 53, !dbg !6430
  %and6 = and i64 %shr, 1023, !dbg !6431
  store i64 %and6, i64* %sig, align 8, !dbg !6432
  %7 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6433
  %8 = bitcast %struct.real_value* %7 to i32*, !dbg !6434
  %bf.load7 = load i32, i32* %8, align 8, !dbg !6434
  %bf.clear8 = and i32 %bf.load7, 3, !dbg !6434
  switch i32 %bf.clear8, label %sw.default [
    i32 0, label %sw.bb
    i32 2, label %sw.bb9
    i32 3, label %sw.bb11
    i32 1, label %sw.bb43
  ], !dbg !6435

sw.bb:                                            ; preds = %entry
  br label %sw.epilog, !dbg !6436

sw.bb9:                                           ; preds = %entry
  %9 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !6438
  %has_inf = getelementptr inbounds %struct.real_format, %struct.real_format* %9, i32 0, i32 12, !dbg !6440
  %10 = load i8, i8* %has_inf, align 1, !dbg !6440
  %tobool = icmp ne i8 %10, 0, !dbg !6438
  br i1 %tobool, label %if.then, label %if.else, !dbg !6441

if.then:                                          ; preds = %sw.bb9
  %11 = load i64, i64* %image, align 8, !dbg !6442
  %or = or i64 %11, 31744, !dbg !6442
  store i64 %or, i64* %image, align 8, !dbg !6442
  br label %if.end, !dbg !6443

if.else:                                          ; preds = %sw.bb9
  %12 = load i64, i64* %image, align 8, !dbg !6444
  %or10 = or i64 %12, 32767, !dbg !6444
  store i64 %or10, i64* %image, align 8, !dbg !6444
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %sw.epilog, !dbg !6445

sw.bb11:                                          ; preds = %entry
  %13 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !6446
  %has_nans = getelementptr inbounds %struct.real_format, %struct.real_format* %13, i32 0, i32 11, !dbg !6448
  %14 = load i8, i8* %has_nans, align 2, !dbg !6448
  %tobool12 = icmp ne i8 %14, 0, !dbg !6446
  br i1 %tobool12, label %if.then13, label %if.else40, !dbg !6449

if.then13:                                        ; preds = %sw.bb11
  %15 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6450
  %16 = bitcast %struct.real_value* %15 to i32*, !dbg !6453
  %bf.load14 = load i32, i32* %16, align 8, !dbg !6453
  %bf.lshr15 = lshr i32 %bf.load14, 5, !dbg !6453
  %bf.clear16 = and i32 %bf.lshr15, 1, !dbg !6453
  %tobool17 = icmp ne i32 %bf.clear16, 0, !dbg !6450
  br i1 %tobool17, label %if.then18, label %if.end22, !dbg !6454

if.then18:                                        ; preds = %if.then13
  %17 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !6455
  %canonical_nan_lsbs_set = getelementptr inbounds %struct.real_format, %struct.real_format* %17, i32 0, i32 16, !dbg !6456
  %18 = load i8, i8* %canonical_nan_lsbs_set, align 1, !dbg !6456
  %conv19 = zext i8 %18 to i32, !dbg !6455
  %tobool20 = icmp ne i32 %conv19, 0, !dbg !6455
  %19 = zext i1 %tobool20 to i64, !dbg !6455
  %cond = select i1 %tobool20, i32 511, i32 0, !dbg !6455
  %conv21 = sext i32 %cond to i64, !dbg !6457
  store i64 %conv21, i64* %sig, align 8, !dbg !6458
  br label %if.end22, !dbg !6459

if.end22:                                         ; preds = %if.then18, %if.then13
  %20 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6460
  %21 = bitcast %struct.real_value* %20 to i32*, !dbg !6462
  %bf.load23 = load i32, i32* %21, align 8, !dbg !6462
  %bf.lshr24 = lshr i32 %bf.load23, 4, !dbg !6462
  %bf.clear25 = and i32 %bf.lshr24, 1, !dbg !6462
  %22 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !6463
  %qnan_msb_set = getelementptr inbounds %struct.real_format, %struct.real_format* %22, i32 0, i32 15, !dbg !6464
  %23 = load i8, i8* %qnan_msb_set, align 2, !dbg !6464
  %conv26 = zext i8 %23 to i32, !dbg !6463
  %cmp27 = icmp eq i32 %bf.clear25, %conv26, !dbg !6465
  br i1 %cmp27, label %if.then29, label %if.else31, !dbg !6466

if.then29:                                        ; preds = %if.end22
  %24 = load i64, i64* %sig, align 8, !dbg !6467
  %and30 = and i64 %24, -513, !dbg !6467
  store i64 %and30, i64* %sig, align 8, !dbg !6467
  br label %if.end33, !dbg !6468

if.else31:                                        ; preds = %if.end22
  %25 = load i64, i64* %sig, align 8, !dbg !6469
  %or32 = or i64 %25, 512, !dbg !6469
  store i64 %or32, i64* %sig, align 8, !dbg !6469
  br label %if.end33

if.end33:                                         ; preds = %if.else31, %if.then29
  %26 = load i64, i64* %sig, align 8, !dbg !6470
  %cmp34 = icmp eq i64 %26, 0, !dbg !6472
  br i1 %cmp34, label %if.then36, label %if.end37, !dbg !6473

if.then36:                                        ; preds = %if.end33
  store i64 256, i64* %sig, align 8, !dbg !6474
  br label %if.end37, !dbg !6475

if.end37:                                         ; preds = %if.then36, %if.end33
  %27 = load i64, i64* %image, align 8, !dbg !6476
  %or38 = or i64 %27, 31744, !dbg !6476
  store i64 %or38, i64* %image, align 8, !dbg !6476
  %28 = load i64, i64* %sig, align 8, !dbg !6477
  %29 = load i64, i64* %image, align 8, !dbg !6478
  %or39 = or i64 %29, %28, !dbg !6478
  store i64 %or39, i64* %image, align 8, !dbg !6478
  br label %if.end42, !dbg !6479

if.else40:                                        ; preds = %sw.bb11
  %30 = load i64, i64* %image, align 8, !dbg !6480
  %or41 = or i64 %30, 1023, !dbg !6480
  store i64 %or41, i64* %image, align 8, !dbg !6480
  br label %if.end42

if.end42:                                         ; preds = %if.else40, %if.end37
  br label %sw.epilog, !dbg !6481

sw.bb43:                                          ; preds = %entry
  %31 = load i8, i8* %denormal, align 1, !dbg !6482
  %tobool44 = icmp ne i8 %31, 0, !dbg !6482
  br i1 %tobool44, label %if.then45, label %if.else46, !dbg !6484

if.then45:                                        ; preds = %sw.bb43
  store i64 0, i64* %exp, align 8, !dbg !6485
  br label %if.end51, !dbg !6486

if.else46:                                        ; preds = %sw.bb43
  %32 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6487
  %33 = bitcast %struct.real_value* %32 to i32*, !dbg !6487
  %bf.load47 = load i32, i32* %33, align 8, !dbg !6487
  %bf.lshr48 = lshr i32 %bf.load47, 6, !dbg !6487
  %xor = xor i32 %bf.lshr48, 33554432, !dbg !6487
  %sub = sub nsw i32 %xor, 33554432, !dbg !6487
  %add = add nsw i32 %sub, 15, !dbg !6488
  %sub49 = sub nsw i32 %add, 1, !dbg !6489
  %conv50 = sext i32 %sub49 to i64, !dbg !6487
  store i64 %conv50, i64* %exp, align 8, !dbg !6490
  br label %if.end51

if.end51:                                         ; preds = %if.else46, %if.then45
  %34 = load i64, i64* %exp, align 8, !dbg !6491
  %shl52 = shl i64 %34, 10, !dbg !6492
  %35 = load i64, i64* %image, align 8, !dbg !6493
  %or53 = or i64 %35, %shl52, !dbg !6493
  store i64 %or53, i64* %image, align 8, !dbg !6493
  %36 = load i64, i64* %sig, align 8, !dbg !6494
  %37 = load i64, i64* %image, align 8, !dbg !6495
  %or54 = or i64 %37, %36, !dbg !6495
  store i64 %or54, i64* %image, align 8, !dbg !6495
  br label %sw.epilog, !dbg !6496

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 4697, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6497
  br label %sw.epilog, !dbg !6498

sw.epilog:                                        ; preds = %sw.default, %if.end51, %if.end42, %if.end, %sw.bb
  %38 = load i64, i64* %image, align 8, !dbg !6499
  %39 = load i64*, i64** %buf.addr, align 8, !dbg !6500
  %arrayidx55 = getelementptr inbounds i64, i64* %39, i64 0, !dbg !6500
  store i64 %38, i64* %arrayidx55, align 8, !dbg !6501
  ret void, !dbg !6502
}

; Function Attrs: noinline nounwind uwtable
define internal void @decode_ieee_half(%struct.real_format* %fmt, %struct.real_value* %r, i64* %buf) #0 !dbg !6503 {
entry:
  %fmt.addr = alloca %struct.real_format*, align 8
  %r.addr = alloca %struct.real_value*, align 8
  %buf.addr = alloca i64*, align 8
  %image = alloca i64, align 8
  %sign = alloca i8, align 1
  %exp = alloca i32, align 4
  store %struct.real_format* %fmt, %struct.real_format** %fmt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_format** %fmt.addr, metadata !6504, metadata !DIExpression()), !dbg !6505
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !6506, metadata !DIExpression()), !dbg !6507
  store i64* %buf, i64** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %buf.addr, metadata !6508, metadata !DIExpression()), !dbg !6509
  call void @llvm.dbg.declare(metadata i64* %image, metadata !6510, metadata !DIExpression()), !dbg !6511
  %0 = load i64*, i64** %buf.addr, align 8, !dbg !6512
  %arrayidx = getelementptr inbounds i64, i64* %0, i64 0, !dbg !6512
  %1 = load i64, i64* %arrayidx, align 8, !dbg !6512
  %and = and i64 %1, 65535, !dbg !6513
  store i64 %and, i64* %image, align 8, !dbg !6511
  call void @llvm.dbg.declare(metadata i8* %sign, metadata !6514, metadata !DIExpression()), !dbg !6515
  %2 = load i64, i64* %image, align 8, !dbg !6516
  %shr = lshr i64 %2, 15, !dbg !6517
  %and1 = and i64 %shr, 1, !dbg !6518
  %conv = trunc i64 %and1 to i8, !dbg !6519
  store i8 %conv, i8* %sign, align 1, !dbg !6515
  call void @llvm.dbg.declare(metadata i32* %exp, metadata !6520, metadata !DIExpression()), !dbg !6521
  %3 = load i64, i64* %image, align 8, !dbg !6522
  %shr2 = lshr i64 %3, 10, !dbg !6523
  %and3 = and i64 %shr2, 31, !dbg !6524
  %conv4 = trunc i64 %and3 to i32, !dbg !6525
  store i32 %conv4, i32* %exp, align 4, !dbg !6521
  %4 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6526
  %5 = bitcast %struct.real_value* %4 to i8*, !dbg !6527
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 32, i1 false), !dbg !6527
  %6 = load i64, i64* %image, align 8, !dbg !6528
  %shl = shl i64 %6, 53, !dbg !6528
  store i64 %shl, i64* %image, align 8, !dbg !6528
  %7 = load i64, i64* %image, align 8, !dbg !6529
  %and5 = and i64 %7, 9223372036854775807, !dbg !6529
  store i64 %and5, i64* %image, align 8, !dbg !6529
  %8 = load i32, i32* %exp, align 4, !dbg !6530
  %cmp = icmp eq i32 %8, 0, !dbg !6532
  br i1 %cmp, label %if.then, label %if.else28, !dbg !6533

if.then:                                          ; preds = %entry
  %9 = load i64, i64* %image, align 8, !dbg !6534
  %tobool = icmp ne i64 %9, 0, !dbg !6534
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !6537

land.lhs.true:                                    ; preds = %if.then
  %10 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !6538
  %has_denorm = getelementptr inbounds %struct.real_format, %struct.real_format* %10, i32 0, i32 13, !dbg !6539
  %11 = load i8, i8* %has_denorm, align 8, !dbg !6539
  %conv7 = zext i8 %11 to i32, !dbg !6538
  %tobool8 = icmp ne i32 %conv7, 0, !dbg !6538
  br i1 %tobool8, label %if.then9, label %if.else, !dbg !6540

if.then9:                                         ; preds = %land.lhs.true
  %12 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6541
  %13 = bitcast %struct.real_value* %12 to i32*, !dbg !6543
  %bf.load = load i32, i32* %13, align 8, !dbg !6544
  %bf.clear = and i32 %bf.load, -4, !dbg !6544
  %bf.set = or i32 %bf.clear, 1, !dbg !6544
  store i32 %bf.set, i32* %13, align 8, !dbg !6544
  %14 = load i8, i8* %sign, align 1, !dbg !6545
  %conv10 = zext i8 %14 to i32, !dbg !6545
  %15 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6546
  %16 = bitcast %struct.real_value* %15 to i32*, !dbg !6547
  %bf.load11 = load i32, i32* %16, align 8, !dbg !6548
  %bf.value = and i32 %conv10, 1, !dbg !6548
  %bf.shl = shl i32 %bf.value, 3, !dbg !6548
  %bf.clear12 = and i32 %bf.load11, -9, !dbg !6548
  %bf.set13 = or i32 %bf.clear12, %bf.shl, !dbg !6548
  store i32 %bf.set13, i32* %16, align 8, !dbg !6548
  %17 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6549
  %18 = bitcast %struct.real_value* %17 to i32*, !dbg !6549
  %bf.load14 = load i32, i32* %18, align 8, !dbg !6549
  %bf.clear15 = and i32 %bf.load14, 63, !dbg !6549
  %bf.set16 = or i32 %bf.clear15, -896, !dbg !6549
  store i32 %bf.set16, i32* %18, align 8, !dbg !6549
  %19 = load i64, i64* %image, align 8, !dbg !6550
  %shl17 = shl i64 %19, 1, !dbg !6551
  %20 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6552
  %sig = getelementptr inbounds %struct.real_value, %struct.real_value* %20, i32 0, i32 1, !dbg !6553
  %arrayidx18 = getelementptr inbounds [3 x i64], [3 x i64]* %sig, i64 0, i64 2, !dbg !6552
  store i64 %shl17, i64* %arrayidx18, align 8, !dbg !6554
  %21 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6555
  call void @normalize(%struct.real_value* %21), !dbg !6556
  br label %if.end27, !dbg !6557

if.else:                                          ; preds = %land.lhs.true, %if.then
  %22 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !6558
  %has_signed_zero = getelementptr inbounds %struct.real_format, %struct.real_format* %22, i32 0, i32 14, !dbg !6560
  %23 = load i8, i8* %has_signed_zero, align 1, !dbg !6560
  %tobool19 = icmp ne i8 %23, 0, !dbg !6558
  br i1 %tobool19, label %if.then20, label %if.end, !dbg !6561

if.then20:                                        ; preds = %if.else
  %24 = load i8, i8* %sign, align 1, !dbg !6562
  %conv21 = zext i8 %24 to i32, !dbg !6562
  %25 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6563
  %26 = bitcast %struct.real_value* %25 to i32*, !dbg !6564
  %bf.load22 = load i32, i32* %26, align 8, !dbg !6565
  %bf.value23 = and i32 %conv21, 1, !dbg !6565
  %bf.shl24 = shl i32 %bf.value23, 3, !dbg !6565
  %bf.clear25 = and i32 %bf.load22, -9, !dbg !6565
  %bf.set26 = or i32 %bf.clear25, %bf.shl24, !dbg !6565
  store i32 %bf.set26, i32* %26, align 8, !dbg !6565
  br label %if.end, !dbg !6563

if.end:                                           ; preds = %if.then20, %if.else
  br label %if.end27

if.end27:                                         ; preds = %if.end, %if.then9
  br label %if.end89, !dbg !6566

if.else28:                                        ; preds = %entry
  %27 = load i32, i32* %exp, align 4, !dbg !6567
  %cmp29 = icmp eq i32 %27, 31, !dbg !6569
  br i1 %cmp29, label %land.lhs.true31, label %if.else70, !dbg !6570

land.lhs.true31:                                  ; preds = %if.else28
  %28 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !6571
  %has_nans = getelementptr inbounds %struct.real_format, %struct.real_format* %28, i32 0, i32 11, !dbg !6572
  %29 = load i8, i8* %has_nans, align 2, !dbg !6572
  %conv32 = zext i8 %29 to i32, !dbg !6571
  %tobool33 = icmp ne i32 %conv32, 0, !dbg !6571
  br i1 %tobool33, label %if.then36, label %lor.lhs.false, !dbg !6573

lor.lhs.false:                                    ; preds = %land.lhs.true31
  %30 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !6574
  %has_inf = getelementptr inbounds %struct.real_format, %struct.real_format* %30, i32 0, i32 12, !dbg !6575
  %31 = load i8, i8* %has_inf, align 1, !dbg !6575
  %conv34 = zext i8 %31 to i32, !dbg !6574
  %tobool35 = icmp ne i32 %conv34, 0, !dbg !6574
  br i1 %tobool35, label %if.then36, label %if.else70, !dbg !6576

if.then36:                                        ; preds = %lor.lhs.false, %land.lhs.true31
  %32 = load i64, i64* %image, align 8, !dbg !6577
  %tobool37 = icmp ne i64 %32, 0, !dbg !6577
  br i1 %tobool37, label %if.then38, label %if.else59, !dbg !6580

if.then38:                                        ; preds = %if.then36
  %33 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6581
  %34 = bitcast %struct.real_value* %33 to i32*, !dbg !6583
  %bf.load39 = load i32, i32* %34, align 8, !dbg !6584
  %bf.clear40 = and i32 %bf.load39, -4, !dbg !6584
  %bf.set41 = or i32 %bf.clear40, 3, !dbg !6584
  store i32 %bf.set41, i32* %34, align 8, !dbg !6584
  %35 = load i8, i8* %sign, align 1, !dbg !6585
  %conv42 = zext i8 %35 to i32, !dbg !6585
  %36 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6586
  %37 = bitcast %struct.real_value* %36 to i32*, !dbg !6587
  %bf.load43 = load i32, i32* %37, align 8, !dbg !6588
  %bf.value44 = and i32 %conv42, 1, !dbg !6588
  %bf.shl45 = shl i32 %bf.value44, 3, !dbg !6588
  %bf.clear46 = and i32 %bf.load43, -9, !dbg !6588
  %bf.set47 = or i32 %bf.clear46, %bf.shl45, !dbg !6588
  store i32 %bf.set47, i32* %37, align 8, !dbg !6588
  %38 = load i64, i64* %image, align 8, !dbg !6589
  %shr48 = lshr i64 %38, 62, !dbg !6590
  %and49 = and i64 %shr48, 1, !dbg !6591
  %39 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !6592
  %qnan_msb_set = getelementptr inbounds %struct.real_format, %struct.real_format* %39, i32 0, i32 15, !dbg !6593
  %40 = load i8, i8* %qnan_msb_set, align 2, !dbg !6593
  %conv50 = zext i8 %40 to i64, !dbg !6592
  %xor = xor i64 %and49, %conv50, !dbg !6594
  %conv51 = trunc i64 %xor to i32, !dbg !6595
  %41 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6596
  %42 = bitcast %struct.real_value* %41 to i32*, !dbg !6597
  %bf.load52 = load i32, i32* %42, align 8, !dbg !6598
  %bf.value53 = and i32 %conv51, 1, !dbg !6598
  %bf.shl54 = shl i32 %bf.value53, 4, !dbg !6598
  %bf.clear55 = and i32 %bf.load52, -17, !dbg !6598
  %bf.set56 = or i32 %bf.clear55, %bf.shl54, !dbg !6598
  store i32 %bf.set56, i32* %42, align 8, !dbg !6598
  %43 = load i64, i64* %image, align 8, !dbg !6599
  %44 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6600
  %sig57 = getelementptr inbounds %struct.real_value, %struct.real_value* %44, i32 0, i32 1, !dbg !6601
  %arrayidx58 = getelementptr inbounds [3 x i64], [3 x i64]* %sig57, i64 0, i64 2, !dbg !6600
  store i64 %43, i64* %arrayidx58, align 8, !dbg !6602
  br label %if.end69, !dbg !6603

if.else59:                                        ; preds = %if.then36
  %45 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6604
  %46 = bitcast %struct.real_value* %45 to i32*, !dbg !6606
  %bf.load60 = load i32, i32* %46, align 8, !dbg !6607
  %bf.clear61 = and i32 %bf.load60, -4, !dbg !6607
  %bf.set62 = or i32 %bf.clear61, 2, !dbg !6607
  store i32 %bf.set62, i32* %46, align 8, !dbg !6607
  %47 = load i8, i8* %sign, align 1, !dbg !6608
  %conv63 = zext i8 %47 to i32, !dbg !6608
  %48 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6609
  %49 = bitcast %struct.real_value* %48 to i32*, !dbg !6610
  %bf.load64 = load i32, i32* %49, align 8, !dbg !6611
  %bf.value65 = and i32 %conv63, 1, !dbg !6611
  %bf.shl66 = shl i32 %bf.value65, 3, !dbg !6611
  %bf.clear67 = and i32 %bf.load64, -9, !dbg !6611
  %bf.set68 = or i32 %bf.clear67, %bf.shl66, !dbg !6611
  store i32 %bf.set68, i32* %49, align 8, !dbg !6611
  br label %if.end69

if.end69:                                         ; preds = %if.else59, %if.then38
  br label %if.end88, !dbg !6612

if.else70:                                        ; preds = %lor.lhs.false, %if.else28
  %50 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6613
  %51 = bitcast %struct.real_value* %50 to i32*, !dbg !6615
  %bf.load71 = load i32, i32* %51, align 8, !dbg !6616
  %bf.clear72 = and i32 %bf.load71, -4, !dbg !6616
  %bf.set73 = or i32 %bf.clear72, 1, !dbg !6616
  store i32 %bf.set73, i32* %51, align 8, !dbg !6616
  %52 = load i8, i8* %sign, align 1, !dbg !6617
  %conv74 = zext i8 %52 to i32, !dbg !6617
  %53 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6618
  %54 = bitcast %struct.real_value* %53 to i32*, !dbg !6619
  %bf.load75 = load i32, i32* %54, align 8, !dbg !6620
  %bf.value76 = and i32 %conv74, 1, !dbg !6620
  %bf.shl77 = shl i32 %bf.value76, 3, !dbg !6620
  %bf.clear78 = and i32 %bf.load75, -9, !dbg !6620
  %bf.set79 = or i32 %bf.clear78, %bf.shl77, !dbg !6620
  store i32 %bf.set79, i32* %54, align 8, !dbg !6620
  %55 = load i32, i32* %exp, align 4, !dbg !6621
  %sub = sub nsw i32 %55, 15, !dbg !6621
  %add = add nsw i32 %sub, 1, !dbg !6621
  %and80 = and i32 %add, 67108863, !dbg !6621
  %56 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6621
  %57 = bitcast %struct.real_value* %56 to i32*, !dbg !6621
  %bf.load81 = load i32, i32* %57, align 8, !dbg !6621
  %bf.value82 = and i32 %and80, 67108863, !dbg !6621
  %bf.shl83 = shl i32 %bf.value82, 6, !dbg !6621
  %bf.clear84 = and i32 %bf.load81, 63, !dbg !6621
  %bf.set85 = or i32 %bf.clear84, %bf.shl83, !dbg !6621
  store i32 %bf.set85, i32* %57, align 8, !dbg !6621
  %58 = load i64, i64* %image, align 8, !dbg !6622
  %or = or i64 %58, -9223372036854775808, !dbg !6623
  %59 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6624
  %sig86 = getelementptr inbounds %struct.real_value, %struct.real_value* %59, i32 0, i32 1, !dbg !6625
  %arrayidx87 = getelementptr inbounds [3 x i64], [3 x i64]* %sig86, i64 0, i64 2, !dbg !6624
  store i64 %or, i64* %arrayidx87, align 8, !dbg !6626
  br label %if.end88

if.end88:                                         ; preds = %if.else70, %if.end69
  br label %if.end89

if.end89:                                         ; preds = %if.end88, %if.end27
  ret void, !dbg !6627
}

; Function Attrs: noinline nounwind uwtable
define internal void @encode_internal(%struct.real_format* %fmt, i64* %buf, %struct.real_value* %r) #0 !dbg !6628 {
entry:
  %fmt.addr = alloca %struct.real_format*, align 8
  %buf.addr = alloca i64*, align 8
  %r.addr = alloca %struct.real_value*, align 8
  store %struct.real_format* %fmt, %struct.real_format** %fmt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_format** %fmt.addr, metadata !6629, metadata !DIExpression()), !dbg !6630
  store i64* %buf, i64** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %buf.addr, metadata !6631, metadata !DIExpression()), !dbg !6632
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !6633, metadata !DIExpression()), !dbg !6634
  %0 = load i64*, i64** %buf.addr, align 8, !dbg !6635
  %1 = bitcast i64* %0 to i8*, !dbg !6636
  %2 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6637
  %3 = bitcast %struct.real_value* %2 to i8*, !dbg !6636
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %3, i64 32, i1 false), !dbg !6636
  ret void, !dbg !6638
}

; Function Attrs: noinline nounwind uwtable
define internal void @decode_internal(%struct.real_format* %fmt, %struct.real_value* %r, i64* %buf) #0 !dbg !6639 {
entry:
  %fmt.addr = alloca %struct.real_format*, align 8
  %r.addr = alloca %struct.real_value*, align 8
  %buf.addr = alloca i64*, align 8
  store %struct.real_format* %fmt, %struct.real_format** %fmt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_format** %fmt.addr, metadata !6640, metadata !DIExpression()), !dbg !6641
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !6642, metadata !DIExpression()), !dbg !6643
  store i64* %buf, i64** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %buf.addr, metadata !6644, metadata !DIExpression()), !dbg !6645
  %0 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6646
  %1 = bitcast %struct.real_value* %0 to i8*, !dbg !6647
  %2 = load i64*, i64** %buf.addr, align 8, !dbg !6648
  %3 = bitcast i64* %2 to i8*, !dbg !6647
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %3, i64 32, i1 false), !dbg !6647
  ret void, !dbg !6649
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @real_sqrt(%struct.real_value* %r, i32 %mode, %struct.real_value* %x) #0 !dbg !492 {
entry:
  %retval = alloca i8, align 1
  %r.addr = alloca %struct.real_value*, align 8
  %mode.addr = alloca i32, align 4
  %x.addr = alloca %struct.real_value*, align 8
  %h = alloca %struct.real_value, align 8
  %t = alloca %struct.real_value, align 8
  %i = alloca %struct.real_value, align 8
  %iter = alloca i32, align 4
  %exp = alloca i32, align 4
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !6650, metadata !DIExpression()), !dbg !6651
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !6652, metadata !DIExpression()), !dbg !6653
  store %struct.real_value* %x, %struct.real_value** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %x.addr, metadata !6654, metadata !DIExpression()), !dbg !6655
  call void @llvm.dbg.declare(metadata %struct.real_value* %h, metadata !6656, metadata !DIExpression()), !dbg !6657
  call void @llvm.dbg.declare(metadata %struct.real_value* %t, metadata !6658, metadata !DIExpression()), !dbg !6659
  call void @llvm.dbg.declare(metadata %struct.real_value* %i, metadata !6660, metadata !DIExpression()), !dbg !6661
  call void @llvm.dbg.declare(metadata i32* %iter, metadata !6662, metadata !DIExpression()), !dbg !6663
  call void @llvm.dbg.declare(metadata i32* %exp, metadata !6664, metadata !DIExpression()), !dbg !6665
  %0 = load %struct.real_value*, %struct.real_value** %x.addr, align 8, !dbg !6666
  %call = call zeroext i8 @real_isnegzero(%struct.real_value* %0), !dbg !6668
  %tobool = icmp ne i8 %call, 0, !dbg !6668
  br i1 %tobool, label %if.then, label %if.end, !dbg !6669

if.then:                                          ; preds = %entry
  %1 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6670
  %2 = load %struct.real_value*, %struct.real_value** %x.addr, align 8, !dbg !6672
  %3 = bitcast %struct.real_value* %1 to i8*, !dbg !6673
  %4 = bitcast %struct.real_value* %2 to i8*, !dbg !6673
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 32, i1 false), !dbg !6673
  store i8 0, i8* %retval, align 1, !dbg !6674
  br label %return, !dbg !6674

if.end:                                           ; preds = %entry
  %5 = load %struct.real_value*, %struct.real_value** %x.addr, align 8, !dbg !6675
  %call1 = call zeroext i8 @real_isneg(%struct.real_value* %5), !dbg !6677
  %tobool2 = icmp ne i8 %call1, 0, !dbg !6677
  br i1 %tobool2, label %if.then3, label %if.end4, !dbg !6678

if.then3:                                         ; preds = %if.end
  %6 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6679
  call void @get_canonical_qnan(%struct.real_value* %6, i32 0), !dbg !6681
  store i8 0, i8* %retval, align 1, !dbg !6682
  br label %return, !dbg !6682

if.end4:                                          ; preds = %if.end
  %7 = load %struct.real_value*, %struct.real_value** %x.addr, align 8, !dbg !6683
  %call5 = call zeroext i8 @real_isfinite(%struct.real_value* %7), !dbg !6685
  %tobool6 = icmp ne i8 %call5, 0, !dbg !6685
  br i1 %tobool6, label %if.end8, label %if.then7, !dbg !6686

if.then7:                                         ; preds = %if.end4
  %8 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6687
  %9 = load %struct.real_value*, %struct.real_value** %x.addr, align 8, !dbg !6689
  %10 = bitcast %struct.real_value* %8 to i8*, !dbg !6690
  %11 = bitcast %struct.real_value* %9 to i8*, !dbg !6690
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 32, i1 false), !dbg !6690
  store i8 0, i8* %retval, align 1, !dbg !6691
  br label %return, !dbg !6691

if.end8:                                          ; preds = %if.end4
  %12 = load i8, i8* @real_sqrt.init, align 1, !dbg !6692
  %tobool9 = icmp ne i8 %12, 0, !dbg !6692
  br i1 %tobool9, label %if.end12, label %if.then10, !dbg !6694

if.then10:                                        ; preds = %if.end8
  %call11 = call zeroext i8 @do_add(%struct.real_value* @real_sqrt.halfthree, %struct.real_value* @dconst1, %struct.real_value* @dconsthalf, i32 0), !dbg !6695
  store i8 1, i8* @real_sqrt.init, align 1, !dbg !6697
  br label %if.end12, !dbg !6698

if.end12:                                         ; preds = %if.then10, %if.end8
  %13 = load %struct.real_value*, %struct.real_value** %x.addr, align 8, !dbg !6699
  %call13 = call i32 @real_exponent(%struct.real_value* %13), !dbg !6700
  store i32 %call13, i32* %exp, align 4, !dbg !6701
  %14 = load i32, i32* %exp, align 4, !dbg !6702
  %sub = sub nsw i32 0, %14, !dbg !6703
  %div = sdiv i32 %sub, 2, !dbg !6704
  call void @real_ldexp(%struct.real_value* %i, %struct.real_value* @dconst1, i32 %div), !dbg !6705
  store i32 0, i32* %iter, align 4, !dbg !6706
  br label %for.cond, !dbg !6708

for.cond:                                         ; preds = %for.inc, %if.end12
  %15 = load i32, i32* %iter, align 4, !dbg !6709
  %cmp = icmp slt i32 %15, 16, !dbg !6711
  br i1 %cmp, label %for.body, label %for.end, !dbg !6712

for.body:                                         ; preds = %for.cond
  %16 = load %struct.real_value*, %struct.real_value** %x.addr, align 8, !dbg !6713
  %call14 = call zeroext i8 @do_multiply(%struct.real_value* %t, %struct.real_value* %16, %struct.real_value* %i), !dbg !6715
  %call15 = call zeroext i8 @do_multiply(%struct.real_value* %h, %struct.real_value* %t, %struct.real_value* %i), !dbg !6716
  %call16 = call zeroext i8 @do_multiply(%struct.real_value* %t, %struct.real_value* %h, %struct.real_value* @dconsthalf), !dbg !6717
  %call17 = call zeroext i8 @do_add(%struct.real_value* %h, %struct.real_value* @real_sqrt.halfthree, %struct.real_value* %t, i32 1), !dbg !6718
  %call18 = call zeroext i8 @do_multiply(%struct.real_value* %t, %struct.real_value* %i, %struct.real_value* %h), !dbg !6719
  %17 = load i32, i32* %iter, align 4, !dbg !6720
  %cmp19 = icmp sge i32 %17, 6, !dbg !6722
  br i1 %cmp19, label %land.lhs.true, label %if.end23, !dbg !6723

land.lhs.true:                                    ; preds = %for.body
  %call20 = call zeroext i8 @real_identical(%struct.real_value* %i, %struct.real_value* %t), !dbg !6724
  %conv = zext i8 %call20 to i32, !dbg !6724
  %tobool21 = icmp ne i32 %conv, 0, !dbg !6724
  br i1 %tobool21, label %if.then22, label %if.end23, !dbg !6725

if.then22:                                        ; preds = %land.lhs.true
  br label %for.end, !dbg !6726

if.end23:                                         ; preds = %land.lhs.true, %for.body
  %18 = bitcast %struct.real_value* %i to i8*, !dbg !6727
  %19 = bitcast %struct.real_value* %t to i8*, !dbg !6727
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %18, i8* align 8 %19, i64 32, i1 false), !dbg !6727
  br label %for.inc, !dbg !6728

for.inc:                                          ; preds = %if.end23
  %20 = load i32, i32* %iter, align 4, !dbg !6729
  %inc = add nsw i32 %20, 1, !dbg !6729
  store i32 %inc, i32* %iter, align 4, !dbg !6729
  br label %for.cond, !dbg !6730, !llvm.loop !6731

for.end:                                          ; preds = %if.then22, %for.cond
  %21 = load %struct.real_value*, %struct.real_value** %x.addr, align 8, !dbg !6733
  %call24 = call zeroext i8 @do_multiply(%struct.real_value* %t, %struct.real_value* %21, %struct.real_value* %i), !dbg !6734
  %call25 = call zeroext i8 @do_multiply(%struct.real_value* %h, %struct.real_value* %t, %struct.real_value* %i), !dbg !6735
  %call26 = call zeroext i8 @do_add(%struct.real_value* %i, %struct.real_value* @dconst1, %struct.real_value* %h, i32 1), !dbg !6736
  %call27 = call zeroext i8 @do_multiply(%struct.real_value* %h, %struct.real_value* %t, %struct.real_value* %i), !dbg !6737
  %call28 = call zeroext i8 @do_multiply(%struct.real_value* %i, %struct.real_value* @dconsthalf, %struct.real_value* %h), !dbg !6738
  %call29 = call zeroext i8 @do_add(%struct.real_value* %h, %struct.real_value* %t, %struct.real_value* %i, i32 0), !dbg !6739
  %22 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6740
  %23 = load i32, i32* %mode.addr, align 4, !dbg !6741
  call void @real_convert(%struct.real_value* %22, i32 %23, %struct.real_value* %h), !dbg !6742
  store i8 1, i8* %retval, align 1, !dbg !6743
  br label %return, !dbg !6743

return:                                           ; preds = %for.end, %if.then7, %if.then3, %if.then
  %24 = load i8, i8* %retval, align 1, !dbg !6744
  ret i8 %24, !dbg !6744
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @real_powi(%struct.real_value* %r, i32 %mode, %struct.real_value* %x, i64 %n) #0 !dbg !6745 {
entry:
  %retval = alloca i8, align 1
  %r.addr = alloca %struct.real_value*, align 8
  %mode.addr = alloca i32, align 4
  %x.addr = alloca %struct.real_value*, align 8
  %n.addr = alloca i64, align 8
  %bit = alloca i64, align 8
  %t = alloca %struct.real_value, align 8
  %inexact = alloca i8, align 1
  %init = alloca i8, align 1
  %neg = alloca i8, align 1
  %i = alloca i32, align 4
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !6748, metadata !DIExpression()), !dbg !6749
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !6750, metadata !DIExpression()), !dbg !6751
  store %struct.real_value* %x, %struct.real_value** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %x.addr, metadata !6752, metadata !DIExpression()), !dbg !6753
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !6754, metadata !DIExpression()), !dbg !6755
  call void @llvm.dbg.declare(metadata i64* %bit, metadata !6756, metadata !DIExpression()), !dbg !6757
  call void @llvm.dbg.declare(metadata %struct.real_value* %t, metadata !6758, metadata !DIExpression()), !dbg !6759
  call void @llvm.dbg.declare(metadata i8* %inexact, metadata !6760, metadata !DIExpression()), !dbg !6761
  store i8 0, i8* %inexact, align 1, !dbg !6761
  call void @llvm.dbg.declare(metadata i8* %init, metadata !6762, metadata !DIExpression()), !dbg !6763
  store i8 0, i8* %init, align 1, !dbg !6763
  call void @llvm.dbg.declare(metadata i8* %neg, metadata !6764, metadata !DIExpression()), !dbg !6765
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6766, metadata !DIExpression()), !dbg !6767
  %0 = load i64, i64* %n.addr, align 8, !dbg !6768
  %cmp = icmp eq i64 %0, 0, !dbg !6770
  br i1 %cmp, label %if.then, label %if.else, !dbg !6771

if.then:                                          ; preds = %entry
  %1 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6772
  %2 = bitcast %struct.real_value* %1 to i8*, !dbg !6774
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2, i8* align 8 bitcast (%struct.real_value* @dconst1 to i8*), i64 32, i1 false), !dbg !6774
  store i8 0, i8* %retval, align 1, !dbg !6775
  br label %return, !dbg !6775

if.else:                                          ; preds = %entry
  %3 = load i64, i64* %n.addr, align 8, !dbg !6776
  %cmp1 = icmp slt i64 %3, 0, !dbg !6778
  br i1 %cmp1, label %if.then2, label %if.else3, !dbg !6779

if.then2:                                         ; preds = %if.else
  store i8 1, i8* %neg, align 1, !dbg !6780
  %4 = load i64, i64* %n.addr, align 8, !dbg !6782
  %sub = sub nsw i64 0, %4, !dbg !6783
  store i64 %sub, i64* %n.addr, align 8, !dbg !6784
  br label %if.end, !dbg !6785

if.else3:                                         ; preds = %if.else
  store i8 0, i8* %neg, align 1, !dbg !6786
  br label %if.end

if.end:                                           ; preds = %if.else3, %if.then2
  br label %if.end4

if.end4:                                          ; preds = %if.end
  %5 = load %struct.real_value*, %struct.real_value** %x.addr, align 8, !dbg !6787
  %6 = bitcast %struct.real_value* %t to i8*, !dbg !6788
  %7 = bitcast %struct.real_value* %5 to i8*, !dbg !6788
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 32, i1 false), !dbg !6788
  store i64 -9223372036854775808, i64* %bit, align 8, !dbg !6789
  store i32 0, i32* %i, align 4, !dbg !6790
  br label %for.cond, !dbg !6792

for.cond:                                         ; preds = %for.inc, %if.end4
  %8 = load i32, i32* %i, align 4, !dbg !6793
  %cmp5 = icmp slt i32 %8, 64, !dbg !6795
  br i1 %cmp5, label %for.body, label %for.end, !dbg !6796

for.body:                                         ; preds = %for.cond
  %9 = load i8, i8* %init, align 1, !dbg !6797
  %tobool = icmp ne i8 %9, 0, !dbg !6797
  br i1 %tobool, label %if.then6, label %if.else17, !dbg !6800

if.then6:                                         ; preds = %for.body
  %call = call zeroext i8 @do_multiply(%struct.real_value* %t, %struct.real_value* %t, %struct.real_value* %t), !dbg !6801
  %conv = zext i8 %call to i32, !dbg !6801
  %10 = load i8, i8* %inexact, align 1, !dbg !6803
  %conv7 = zext i8 %10 to i32, !dbg !6803
  %or = or i32 %conv7, %conv, !dbg !6803
  %conv8 = trunc i32 %or to i8, !dbg !6803
  store i8 %conv8, i8* %inexact, align 1, !dbg !6803
  %11 = load i64, i64* %n.addr, align 8, !dbg !6804
  %12 = load i64, i64* %bit, align 8, !dbg !6806
  %and = and i64 %11, %12, !dbg !6807
  %tobool9 = icmp ne i64 %and, 0, !dbg !6807
  br i1 %tobool9, label %if.then10, label %if.end16, !dbg !6808

if.then10:                                        ; preds = %if.then6
  %13 = load %struct.real_value*, %struct.real_value** %x.addr, align 8, !dbg !6809
  %call11 = call zeroext i8 @do_multiply(%struct.real_value* %t, %struct.real_value* %t, %struct.real_value* %13), !dbg !6810
  %conv12 = zext i8 %call11 to i32, !dbg !6810
  %14 = load i8, i8* %inexact, align 1, !dbg !6811
  %conv13 = zext i8 %14 to i32, !dbg !6811
  %or14 = or i32 %conv13, %conv12, !dbg !6811
  %conv15 = trunc i32 %or14 to i8, !dbg !6811
  store i8 %conv15, i8* %inexact, align 1, !dbg !6811
  br label %if.end16, !dbg !6812

if.end16:                                         ; preds = %if.then10, %if.then6
  br label %if.end22, !dbg !6813

if.else17:                                        ; preds = %for.body
  %15 = load i64, i64* %n.addr, align 8, !dbg !6814
  %16 = load i64, i64* %bit, align 8, !dbg !6816
  %and18 = and i64 %15, %16, !dbg !6817
  %tobool19 = icmp ne i64 %and18, 0, !dbg !6817
  br i1 %tobool19, label %if.then20, label %if.end21, !dbg !6818

if.then20:                                        ; preds = %if.else17
  store i8 1, i8* %init, align 1, !dbg !6819
  br label %if.end21, !dbg !6820

if.end21:                                         ; preds = %if.then20, %if.else17
  br label %if.end22

if.end22:                                         ; preds = %if.end21, %if.end16
  %17 = load i64, i64* %bit, align 8, !dbg !6821
  %shr = lshr i64 %17, 1, !dbg !6821
  store i64 %shr, i64* %bit, align 8, !dbg !6821
  br label %for.inc, !dbg !6822

for.inc:                                          ; preds = %if.end22
  %18 = load i32, i32* %i, align 4, !dbg !6823
  %inc = add nsw i32 %18, 1, !dbg !6823
  store i32 %inc, i32* %i, align 4, !dbg !6823
  br label %for.cond, !dbg !6824, !llvm.loop !6825

for.end:                                          ; preds = %for.cond
  %19 = load i8, i8* %neg, align 1, !dbg !6827
  %tobool23 = icmp ne i8 %19, 0, !dbg !6827
  br i1 %tobool23, label %if.then24, label %if.end30, !dbg !6829

if.then24:                                        ; preds = %for.end
  %call25 = call zeroext i8 @do_divide(%struct.real_value* %t, %struct.real_value* @dconst1, %struct.real_value* %t), !dbg !6830
  %conv26 = zext i8 %call25 to i32, !dbg !6830
  %20 = load i8, i8* %inexact, align 1, !dbg !6831
  %conv27 = zext i8 %20 to i32, !dbg !6831
  %or28 = or i32 %conv27, %conv26, !dbg !6831
  %conv29 = trunc i32 %or28 to i8, !dbg !6831
  store i8 %conv29, i8* %inexact, align 1, !dbg !6831
  br label %if.end30, !dbg !6832

if.end30:                                         ; preds = %if.then24, %for.end
  %21 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6833
  %22 = load i32, i32* %mode.addr, align 4, !dbg !6834
  call void @real_convert(%struct.real_value* %21, i32 %22, %struct.real_value* %t), !dbg !6835
  %23 = load i8, i8* %inexact, align 1, !dbg !6836
  store i8 %23, i8* %retval, align 1, !dbg !6837
  br label %return, !dbg !6837

return:                                           ; preds = %if.end30, %if.then
  %24 = load i8, i8* %retval, align 1, !dbg !6838
  ret i8 %24, !dbg !6838
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @real_trunc(%struct.real_value* %r, i32 %mode, %struct.real_value* %x) #0 !dbg !6839 {
entry:
  %r.addr = alloca %struct.real_value*, align 8
  %mode.addr = alloca i32, align 4
  %x.addr = alloca %struct.real_value*, align 8
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !6840, metadata !DIExpression()), !dbg !6841
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !6842, metadata !DIExpression()), !dbg !6843
  store %struct.real_value* %x, %struct.real_value** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %x.addr, metadata !6844, metadata !DIExpression()), !dbg !6845
  %0 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6846
  %1 = load %struct.real_value*, %struct.real_value** %x.addr, align 8, !dbg !6847
  call void @do_fix_trunc(%struct.real_value* %0, %struct.real_value* %1), !dbg !6848
  %2 = load i32, i32* %mode.addr, align 4, !dbg !6849
  %cmp = icmp ne i32 %2, 0, !dbg !6851
  br i1 %cmp, label %if.then, label %if.end, !dbg !6852

if.then:                                          ; preds = %entry
  %3 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6853
  %4 = load i32, i32* %mode.addr, align 4, !dbg !6854
  %5 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6855
  call void @real_convert(%struct.real_value* %3, i32 %4, %struct.real_value* %5), !dbg !6856
  br label %if.end, !dbg !6856

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !6857
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @real_floor(%struct.real_value* %r, i32 %mode, %struct.real_value* %x) #0 !dbg !6858 {
entry:
  %r.addr = alloca %struct.real_value*, align 8
  %mode.addr = alloca i32, align 4
  %x.addr = alloca %struct.real_value*, align 8
  %t = alloca %struct.real_value, align 8
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !6859, metadata !DIExpression()), !dbg !6860
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !6861, metadata !DIExpression()), !dbg !6862
  store %struct.real_value* %x, %struct.real_value** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %x.addr, metadata !6863, metadata !DIExpression()), !dbg !6864
  call void @llvm.dbg.declare(metadata %struct.real_value* %t, metadata !6865, metadata !DIExpression()), !dbg !6866
  %0 = load %struct.real_value*, %struct.real_value** %x.addr, align 8, !dbg !6867
  call void @do_fix_trunc(%struct.real_value* %t, %struct.real_value* %0), !dbg !6868
  %1 = load %struct.real_value*, %struct.real_value** %x.addr, align 8, !dbg !6869
  %call = call zeroext i8 @real_identical(%struct.real_value* %t, %struct.real_value* %1), !dbg !6871
  %tobool = icmp ne i8 %call, 0, !dbg !6871
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !6872

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.real_value*, %struct.real_value** %x.addr, align 8, !dbg !6873
  %3 = bitcast %struct.real_value* %2 to i32*, !dbg !6874
  %bf.load = load i32, i32* %3, align 8, !dbg !6874
  %bf.lshr = lshr i32 %bf.load, 3, !dbg !6874
  %bf.clear = and i32 %bf.lshr, 1, !dbg !6874
  %tobool1 = icmp ne i32 %bf.clear, 0, !dbg !6873
  br i1 %tobool1, label %if.then, label %if.end, !dbg !6875

if.then:                                          ; preds = %land.lhs.true
  %call2 = call zeroext i8 @do_add(%struct.real_value* %t, %struct.real_value* %t, %struct.real_value* @dconstm1, i32 0), !dbg !6876
  br label %if.end, !dbg !6876

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %4 = load i32, i32* %mode.addr, align 4, !dbg !6877
  %cmp = icmp ne i32 %4, 0, !dbg !6879
  br i1 %cmp, label %if.then3, label %if.else, !dbg !6880

if.then3:                                         ; preds = %if.end
  %5 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6881
  %6 = load i32, i32* %mode.addr, align 4, !dbg !6882
  call void @real_convert(%struct.real_value* %5, i32 %6, %struct.real_value* %t), !dbg !6883
  br label %if.end4, !dbg !6883

if.else:                                          ; preds = %if.end
  %7 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6884
  %8 = bitcast %struct.real_value* %7 to i8*, !dbg !6885
  %9 = bitcast %struct.real_value* %t to i8*, !dbg !6885
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 32, i1 false), !dbg !6885
  br label %if.end4

if.end4:                                          ; preds = %if.else, %if.then3
  ret void, !dbg !6886
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @real_ceil(%struct.real_value* %r, i32 %mode, %struct.real_value* %x) #0 !dbg !6887 {
entry:
  %r.addr = alloca %struct.real_value*, align 8
  %mode.addr = alloca i32, align 4
  %x.addr = alloca %struct.real_value*, align 8
  %t = alloca %struct.real_value, align 8
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !6888, metadata !DIExpression()), !dbg !6889
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !6890, metadata !DIExpression()), !dbg !6891
  store %struct.real_value* %x, %struct.real_value** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %x.addr, metadata !6892, metadata !DIExpression()), !dbg !6893
  call void @llvm.dbg.declare(metadata %struct.real_value* %t, metadata !6894, metadata !DIExpression()), !dbg !6895
  %0 = load %struct.real_value*, %struct.real_value** %x.addr, align 8, !dbg !6896
  call void @do_fix_trunc(%struct.real_value* %t, %struct.real_value* %0), !dbg !6897
  %1 = load %struct.real_value*, %struct.real_value** %x.addr, align 8, !dbg !6898
  %call = call zeroext i8 @real_identical(%struct.real_value* %t, %struct.real_value* %1), !dbg !6900
  %tobool = icmp ne i8 %call, 0, !dbg !6900
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !6901

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.real_value*, %struct.real_value** %x.addr, align 8, !dbg !6902
  %3 = bitcast %struct.real_value* %2 to i32*, !dbg !6903
  %bf.load = load i32, i32* %3, align 8, !dbg !6903
  %bf.lshr = lshr i32 %bf.load, 3, !dbg !6903
  %bf.clear = and i32 %bf.lshr, 1, !dbg !6903
  %tobool1 = icmp ne i32 %bf.clear, 0, !dbg !6902
  br i1 %tobool1, label %if.end, label %if.then, !dbg !6904

if.then:                                          ; preds = %land.lhs.true
  %call2 = call zeroext i8 @do_add(%struct.real_value* %t, %struct.real_value* %t, %struct.real_value* @dconst1, i32 0), !dbg !6905
  br label %if.end, !dbg !6905

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %4 = load i32, i32* %mode.addr, align 4, !dbg !6906
  %cmp = icmp ne i32 %4, 0, !dbg !6908
  br i1 %cmp, label %if.then3, label %if.else, !dbg !6909

if.then3:                                         ; preds = %if.end
  %5 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6910
  %6 = load i32, i32* %mode.addr, align 4, !dbg !6911
  call void @real_convert(%struct.real_value* %5, i32 %6, %struct.real_value* %t), !dbg !6912
  br label %if.end4, !dbg !6912

if.else:                                          ; preds = %if.end
  %7 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6913
  %8 = bitcast %struct.real_value* %7 to i8*, !dbg !6914
  %9 = bitcast %struct.real_value* %t to i8*, !dbg !6914
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 32, i1 false), !dbg !6914
  br label %if.end4

if.end4:                                          ; preds = %if.else, %if.then3
  ret void, !dbg !6915
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @real_round(%struct.real_value* %r, i32 %mode, %struct.real_value* %x) #0 !dbg !6916 {
entry:
  %r.addr = alloca %struct.real_value*, align 8
  %mode.addr = alloca i32, align 4
  %x.addr = alloca %struct.real_value*, align 8
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !6917, metadata !DIExpression()), !dbg !6918
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !6919, metadata !DIExpression()), !dbg !6920
  store %struct.real_value* %x, %struct.real_value** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %x.addr, metadata !6921, metadata !DIExpression()), !dbg !6922
  %0 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6923
  %1 = load %struct.real_value*, %struct.real_value** %x.addr, align 8, !dbg !6924
  %2 = load %struct.real_value*, %struct.real_value** %x.addr, align 8, !dbg !6925
  %3 = bitcast %struct.real_value* %2 to i32*, !dbg !6926
  %bf.load = load i32, i32* %3, align 8, !dbg !6926
  %bf.lshr = lshr i32 %bf.load, 3, !dbg !6926
  %bf.clear = and i32 %bf.lshr, 1, !dbg !6926
  %call = call zeroext i8 @do_add(%struct.real_value* %0, %struct.real_value* %1, %struct.real_value* @dconsthalf, i32 %bf.clear), !dbg !6927
  %4 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6928
  %5 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6929
  call void @do_fix_trunc(%struct.real_value* %4, %struct.real_value* %5), !dbg !6930
  %6 = load i32, i32* %mode.addr, align 4, !dbg !6931
  %cmp = icmp ne i32 %6, 0, !dbg !6933
  br i1 %cmp, label %if.then, label %if.end, !dbg !6934

if.then:                                          ; preds = %entry
  %7 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6935
  %8 = load i32, i32* %mode.addr, align 4, !dbg !6936
  %9 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6937
  call void @real_convert(%struct.real_value* %7, i32 %8, %struct.real_value* %9), !dbg !6938
  br label %if.end, !dbg !6938

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !6939
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @real_copysign(%struct.real_value* %r, %struct.real_value* %x) #0 !dbg !6940 {
entry:
  %r.addr = alloca %struct.real_value*, align 8
  %x.addr = alloca %struct.real_value*, align 8
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !6941, metadata !DIExpression()), !dbg !6942
  store %struct.real_value* %x, %struct.real_value** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %x.addr, metadata !6943, metadata !DIExpression()), !dbg !6944
  %0 = load %struct.real_value*, %struct.real_value** %x.addr, align 8, !dbg !6945
  %1 = bitcast %struct.real_value* %0 to i32*, !dbg !6946
  %bf.load = load i32, i32* %1, align 8, !dbg !6946
  %bf.lshr = lshr i32 %bf.load, 3, !dbg !6946
  %bf.clear = and i32 %bf.lshr, 1, !dbg !6946
  %2 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !6947
  %3 = bitcast %struct.real_value* %2 to i32*, !dbg !6948
  %bf.load1 = load i32, i32* %3, align 8, !dbg !6949
  %bf.value = and i32 %bf.clear, 1, !dbg !6949
  %bf.shl = shl i32 %bf.value, 3, !dbg !6949
  %bf.clear2 = and i32 %bf.load1, -9, !dbg !6949
  %bf.set = or i32 %bf.clear2, %bf.shl, !dbg !6949
  store i32 %bf.set, i32* %3, align 8, !dbg !6949
  ret void, !dbg !6950
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @real_isinteger(%struct.real_value* %c, i32 %mode) #0 !dbg !6951 {
entry:
  %c.addr = alloca %struct.real_value*, align 8
  %mode.addr = alloca i32, align 4
  %cint = alloca %struct.real_value, align 8
  store %struct.real_value* %c, %struct.real_value** %c.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %c.addr, metadata !6954, metadata !DIExpression()), !dbg !6955
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !6956, metadata !DIExpression()), !dbg !6957
  call void @llvm.dbg.declare(metadata %struct.real_value* %cint, metadata !6958, metadata !DIExpression()), !dbg !6959
  %0 = load i32, i32* %mode.addr, align 4, !dbg !6960
  %1 = load %struct.real_value*, %struct.real_value** %c.addr, align 8, !dbg !6961
  call void @real_trunc(%struct.real_value* %cint, i32 %0, %struct.real_value* %1), !dbg !6962
  %2 = load %struct.real_value*, %struct.real_value** %c.addr, align 8, !dbg !6963
  %call = call zeroext i8 @real_identical(%struct.real_value* %2, %struct.real_value* %cint), !dbg !6964
  ret i8 %call, !dbg !6965
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @get_max_float(%struct.real_format* %fmt, i8* %buf, i64 %len) #0 !dbg !6966 {
entry:
  %fmt.addr = alloca %struct.real_format*, align 8
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %p = alloca i8*, align 8
  store %struct.real_format* %fmt, %struct.real_format** %fmt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_format** %fmt.addr, metadata !6969, metadata !DIExpression()), !dbg !6970
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !6971, metadata !DIExpression()), !dbg !6972
  store i64 %len, i64* %len.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %len.addr, metadata !6973, metadata !DIExpression()), !dbg !6974
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6975, metadata !DIExpression()), !dbg !6976
  call void @llvm.dbg.declare(metadata i32* %n, metadata !6977, metadata !DIExpression()), !dbg !6978
  call void @llvm.dbg.declare(metadata i8** %p, metadata !6979, metadata !DIExpression()), !dbg !6980
  %0 = load i8*, i8** %buf.addr, align 8, !dbg !6981
  %call = call i8* @strcpy(i8* %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i64 0, i64 0)), !dbg !6982
  %1 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !6983
  %p1 = getelementptr inbounds %struct.real_format, %struct.real_format* %1, i32 0, i32 3, !dbg !6984
  %2 = load i32, i32* %p1, align 4, !dbg !6984
  store i32 %2, i32* %n, align 4, !dbg !6985
  store i32 0, i32* %i, align 4, !dbg !6986
  %3 = load i8*, i8** %buf.addr, align 8, !dbg !6988
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 4, !dbg !6989
  store i8* %add.ptr, i8** %p, align 8, !dbg !6990
  br label %for.cond, !dbg !6991

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4, !dbg !6992
  %add = add nsw i32 %4, 3, !dbg !6994
  %5 = load i32, i32* %n, align 4, !dbg !6995
  %cmp = icmp slt i32 %add, %5, !dbg !6996
  br i1 %cmp, label %for.body, label %for.end, !dbg !6997

for.body:                                         ; preds = %for.cond
  %6 = load i8*, i8** %p, align 8, !dbg !6998
  %incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1, !dbg !6998
  store i8* %incdec.ptr, i8** %p, align 8, !dbg !6998
  store i8 102, i8* %6, align 1, !dbg !6999
  br label %for.inc, !dbg !7000

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4, !dbg !7001
  %add2 = add nsw i32 %7, 4, !dbg !7001
  store i32 %add2, i32* %i, align 4, !dbg !7001
  br label %for.cond, !dbg !7002, !llvm.loop !7003

for.end:                                          ; preds = %for.cond
  %8 = load i32, i32* %i, align 4, !dbg !7005
  %9 = load i32, i32* %n, align 4, !dbg !7007
  %cmp3 = icmp slt i32 %8, %9, !dbg !7008
  br i1 %cmp3, label %if.then, label %if.end, !dbg !7009

if.then:                                          ; preds = %for.end
  %10 = load i32, i32* %n, align 4, !dbg !7010
  %11 = load i32, i32* %i, align 4, !dbg !7011
  %sub = sub nsw i32 %10, %11, !dbg !7012
  %idxprom = sext i32 %sub to i64, !dbg !7013
  %arrayidx = getelementptr inbounds [5 x i8], [5 x i8]* @.str.15, i64 0, i64 %idxprom, !dbg !7013
  %12 = load i8, i8* %arrayidx, align 1, !dbg !7013
  %13 = load i8*, i8** %p, align 8, !dbg !7014
  %incdec.ptr4 = getelementptr inbounds i8, i8* %13, i32 1, !dbg !7014
  store i8* %incdec.ptr4, i8** %p, align 8, !dbg !7014
  store i8 %12, i8* %13, align 1, !dbg !7015
  br label %if.end, !dbg !7016

if.end:                                           ; preds = %if.then, %for.end
  %14 = load i8*, i8** %p, align 8, !dbg !7017
  %15 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !7018
  %emax = getelementptr inbounds %struct.real_format, %struct.real_format* %15, i32 0, i32 6, !dbg !7019
  %16 = load i32, i32* %emax, align 8, !dbg !7019
  %call5 = call i32 (i8*, i8*, ...) @sprintf(i8* %14, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.16, i64 0, i64 0), i32 %16), !dbg !7020
  %17 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !7021
  %pnan = getelementptr inbounds %struct.real_format, %struct.real_format* %17, i32 0, i32 4, !dbg !7023
  %18 = load i32, i32* %pnan, align 8, !dbg !7023
  %19 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !7024
  %p6 = getelementptr inbounds %struct.real_format, %struct.real_format* %19, i32 0, i32 3, !dbg !7025
  %20 = load i32, i32* %p6, align 4, !dbg !7025
  %cmp7 = icmp slt i32 %18, %20, !dbg !7026
  br i1 %cmp7, label %if.then8, label %if.end16, !dbg !7027

if.then8:                                         ; preds = %if.end
  %21 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !7028
  %pnan9 = getelementptr inbounds %struct.real_format, %struct.real_format* %21, i32 0, i32 4, !dbg !7030
  %22 = load i32, i32* %pnan9, align 8, !dbg !7030
  %rem = srem i32 %22, 4, !dbg !7031
  %idxprom10 = sext i32 %rem to i64, !dbg !7032
  %arrayidx11 = getelementptr inbounds [5 x i8], [5 x i8]* @.str.17, i64 0, i64 %idxprom10, !dbg !7032
  %23 = load i8, i8* %arrayidx11, align 1, !dbg !7032
  %24 = load i8*, i8** %buf.addr, align 8, !dbg !7033
  %25 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !7034
  %pnan12 = getelementptr inbounds %struct.real_format, %struct.real_format* %25, i32 0, i32 4, !dbg !7035
  %26 = load i32, i32* %pnan12, align 8, !dbg !7035
  %div = sdiv i32 %26, 4, !dbg !7036
  %add13 = add nsw i32 4, %div, !dbg !7037
  %idxprom14 = sext i32 %add13 to i64, !dbg !7033
  %arrayidx15 = getelementptr inbounds i8, i8* %24, i64 %idxprom14, !dbg !7033
  store i8 %23, i8* %arrayidx15, align 1, !dbg !7038
  br label %if.end16, !dbg !7039

if.end16:                                         ; preds = %if.then8, %if.end
  %27 = load i8*, i8** %buf.addr, align 8, !dbg !7040
  %call17 = call i64 @strlen(i8* %27), !dbg !7040
  %28 = load i64, i64* %len.addr, align 8, !dbg !7040
  %cmp18 = icmp ult i64 %call17, %28, !dbg !7040
  br i1 %cmp18, label %cond.false, label %cond.true, !dbg !7040

cond.true:                                        ; preds = %if.end16
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 5174, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7040
  br label %cond.end, !dbg !7040

cond.false:                                       ; preds = %if.end16
  br label %cond.end, !dbg !7040

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7040
  ret void, !dbg !7041
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @sticky_rshift_significand(%struct.real_value* %r, %struct.real_value* %a, i32 %n) #0 !dbg !7042 {
entry:
  %r.addr = alloca %struct.real_value*, align 8
  %a.addr = alloca %struct.real_value*, align 8
  %n.addr = alloca i32, align 4
  %sticky = alloca i64, align 8
  %i = alloca i32, align 4
  %ofs = alloca i32, align 4
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !7045, metadata !DIExpression()), !dbg !7046
  store %struct.real_value* %a, %struct.real_value** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %a.addr, metadata !7047, metadata !DIExpression()), !dbg !7048
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !7049, metadata !DIExpression()), !dbg !7050
  call void @llvm.dbg.declare(metadata i64* %sticky, metadata !7051, metadata !DIExpression()), !dbg !7052
  store i64 0, i64* %sticky, align 8, !dbg !7052
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7053, metadata !DIExpression()), !dbg !7054
  call void @llvm.dbg.declare(metadata i32* %ofs, metadata !7055, metadata !DIExpression()), !dbg !7056
  store i32 0, i32* %ofs, align 4, !dbg !7056
  %0 = load i32, i32* %n.addr, align 4, !dbg !7057
  %cmp = icmp uge i32 %0, 64, !dbg !7059
  br i1 %cmp, label %if.then, label %if.end, !dbg !7060

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !7061
  %1 = load i32, i32* %n.addr, align 4, !dbg !7064
  %div = udiv i32 %1, 64, !dbg !7065
  store i32 %div, i32* %ofs, align 4, !dbg !7066
  br label %for.cond, !dbg !7067

for.cond:                                         ; preds = %for.inc, %if.then
  %2 = load i32, i32* %i, align 4, !dbg !7068
  %3 = load i32, i32* %ofs, align 4, !dbg !7070
  %cmp1 = icmp ult i32 %2, %3, !dbg !7071
  br i1 %cmp1, label %for.body, label %for.end, !dbg !7072

for.body:                                         ; preds = %for.cond
  %4 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !7073
  %sig = getelementptr inbounds %struct.real_value, %struct.real_value* %4, i32 0, i32 1, !dbg !7074
  %5 = load i32, i32* %i, align 4, !dbg !7075
  %idxprom = zext i32 %5 to i64, !dbg !7073
  %arrayidx = getelementptr inbounds [3 x i64], [3 x i64]* %sig, i64 0, i64 %idxprom, !dbg !7073
  %6 = load i64, i64* %arrayidx, align 8, !dbg !7073
  %7 = load i64, i64* %sticky, align 8, !dbg !7076
  %or = or i64 %7, %6, !dbg !7076
  store i64 %or, i64* %sticky, align 8, !dbg !7076
  br label %for.inc, !dbg !7077

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4, !dbg !7078
  %inc = add i32 %8, 1, !dbg !7078
  store i32 %inc, i32* %i, align 4, !dbg !7078
  br label %for.cond, !dbg !7079, !llvm.loop !7080

for.end:                                          ; preds = %for.cond
  %9 = load i32, i32* %n.addr, align 4, !dbg !7082
  %and = and i32 %9, 63, !dbg !7082
  store i32 %and, i32* %n.addr, align 4, !dbg !7082
  br label %if.end, !dbg !7083

if.end:                                           ; preds = %for.end, %entry
  %10 = load i32, i32* %n.addr, align 4, !dbg !7084
  %cmp2 = icmp ne i32 %10, 0, !dbg !7086
  br i1 %cmp2, label %if.then3, label %if.else, !dbg !7087

if.then3:                                         ; preds = %if.end
  %11 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !7088
  %sig4 = getelementptr inbounds %struct.real_value, %struct.real_value* %11, i32 0, i32 1, !dbg !7090
  %12 = load i32, i32* %ofs, align 4, !dbg !7091
  %idxprom5 = zext i32 %12 to i64, !dbg !7088
  %arrayidx6 = getelementptr inbounds [3 x i64], [3 x i64]* %sig4, i64 0, i64 %idxprom5, !dbg !7088
  %13 = load i64, i64* %arrayidx6, align 8, !dbg !7088
  %14 = load i32, i32* %n.addr, align 4, !dbg !7092
  %sh_prom = zext i32 %14 to i64, !dbg !7093
  %shl = shl i64 1, %sh_prom, !dbg !7093
  %sub = sub i64 %shl, 1, !dbg !7094
  %and7 = and i64 %13, %sub, !dbg !7095
  %15 = load i64, i64* %sticky, align 8, !dbg !7096
  %or8 = or i64 %15, %and7, !dbg !7096
  store i64 %or8, i64* %sticky, align 8, !dbg !7096
  store i32 0, i32* %i, align 4, !dbg !7097
  br label %for.cond9, !dbg !7099

for.cond9:                                        ; preds = %for.inc37, %if.then3
  %16 = load i32, i32* %i, align 4, !dbg !7100
  %cmp10 = icmp ult i32 %16, 3, !dbg !7102
  br i1 %cmp10, label %for.body11, label %for.end39, !dbg !7103

for.body11:                                       ; preds = %for.cond9
  %17 = load i32, i32* %ofs, align 4, !dbg !7104
  %18 = load i32, i32* %i, align 4, !dbg !7106
  %add = add i32 %17, %18, !dbg !7107
  %cmp12 = icmp uge i32 %add, 3, !dbg !7108
  br i1 %cmp12, label %cond.true, label %cond.false, !dbg !7104

cond.true:                                        ; preds = %for.body11
  br label %cond.end, !dbg !7104

cond.false:                                       ; preds = %for.body11
  %19 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !7109
  %sig13 = getelementptr inbounds %struct.real_value, %struct.real_value* %19, i32 0, i32 1, !dbg !7110
  %20 = load i32, i32* %ofs, align 4, !dbg !7111
  %21 = load i32, i32* %i, align 4, !dbg !7112
  %add14 = add i32 %20, %21, !dbg !7113
  %idxprom15 = zext i32 %add14 to i64, !dbg !7109
  %arrayidx16 = getelementptr inbounds [3 x i64], [3 x i64]* %sig13, i64 0, i64 %idxprom15, !dbg !7109
  %22 = load i64, i64* %arrayidx16, align 8, !dbg !7109
  br label %cond.end, !dbg !7104

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 0, %cond.true ], [ %22, %cond.false ], !dbg !7104
  %23 = load i32, i32* %n.addr, align 4, !dbg !7114
  %sh_prom17 = zext i32 %23 to i64, !dbg !7115
  %shr = lshr i64 %cond, %sh_prom17, !dbg !7115
  %24 = load i32, i32* %ofs, align 4, !dbg !7116
  %25 = load i32, i32* %i, align 4, !dbg !7117
  %add18 = add i32 %24, %25, !dbg !7118
  %add19 = add i32 %add18, 1, !dbg !7119
  %cmp20 = icmp uge i32 %add19, 3, !dbg !7120
  br i1 %cmp20, label %cond.true21, label %cond.false22, !dbg !7116

cond.true21:                                      ; preds = %cond.end
  br label %cond.end28, !dbg !7116

cond.false22:                                     ; preds = %cond.end
  %26 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !7121
  %sig23 = getelementptr inbounds %struct.real_value, %struct.real_value* %26, i32 0, i32 1, !dbg !7122
  %27 = load i32, i32* %ofs, align 4, !dbg !7123
  %28 = load i32, i32* %i, align 4, !dbg !7124
  %add24 = add i32 %27, %28, !dbg !7125
  %add25 = add i32 %add24, 1, !dbg !7126
  %idxprom26 = zext i32 %add25 to i64, !dbg !7121
  %arrayidx27 = getelementptr inbounds [3 x i64], [3 x i64]* %sig23, i64 0, i64 %idxprom26, !dbg !7121
  %29 = load i64, i64* %arrayidx27, align 8, !dbg !7121
  br label %cond.end28, !dbg !7116

cond.end28:                                       ; preds = %cond.false22, %cond.true21
  %cond29 = phi i64 [ 0, %cond.true21 ], [ %29, %cond.false22 ], !dbg !7116
  %30 = load i32, i32* %n.addr, align 4, !dbg !7127
  %sub30 = sub i32 64, %30, !dbg !7128
  %sh_prom31 = zext i32 %sub30 to i64, !dbg !7129
  %shl32 = shl i64 %cond29, %sh_prom31, !dbg !7129
  %or33 = or i64 %shr, %shl32, !dbg !7130
  %31 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !7131
  %sig34 = getelementptr inbounds %struct.real_value, %struct.real_value* %31, i32 0, i32 1, !dbg !7132
  %32 = load i32, i32* %i, align 4, !dbg !7133
  %idxprom35 = zext i32 %32 to i64, !dbg !7131
  %arrayidx36 = getelementptr inbounds [3 x i64], [3 x i64]* %sig34, i64 0, i64 %idxprom35, !dbg !7131
  store i64 %or33, i64* %arrayidx36, align 8, !dbg !7134
  br label %for.inc37, !dbg !7135

for.inc37:                                        ; preds = %cond.end28
  %33 = load i32, i32* %i, align 4, !dbg !7136
  %inc38 = add i32 %33, 1, !dbg !7136
  store i32 %inc38, i32* %i, align 4, !dbg !7136
  br label %for.cond9, !dbg !7137, !llvm.loop !7138

for.end39:                                        ; preds = %for.cond9
  br label %if.end63, !dbg !7140

if.else:                                          ; preds = %if.end
  store i32 0, i32* %i, align 4, !dbg !7141
  br label %for.cond40, !dbg !7144

for.cond40:                                       ; preds = %for.inc51, %if.else
  %34 = load i32, i32* %ofs, align 4, !dbg !7145
  %35 = load i32, i32* %i, align 4, !dbg !7147
  %add41 = add i32 %34, %35, !dbg !7148
  %cmp42 = icmp ult i32 %add41, 3, !dbg !7149
  br i1 %cmp42, label %for.body43, label %for.end53, !dbg !7150

for.body43:                                       ; preds = %for.cond40
  %36 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !7151
  %sig44 = getelementptr inbounds %struct.real_value, %struct.real_value* %36, i32 0, i32 1, !dbg !7152
  %37 = load i32, i32* %ofs, align 4, !dbg !7153
  %38 = load i32, i32* %i, align 4, !dbg !7154
  %add45 = add i32 %37, %38, !dbg !7155
  %idxprom46 = zext i32 %add45 to i64, !dbg !7151
  %arrayidx47 = getelementptr inbounds [3 x i64], [3 x i64]* %sig44, i64 0, i64 %idxprom46, !dbg !7151
  %39 = load i64, i64* %arrayidx47, align 8, !dbg !7151
  %40 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !7156
  %sig48 = getelementptr inbounds %struct.real_value, %struct.real_value* %40, i32 0, i32 1, !dbg !7157
  %41 = load i32, i32* %i, align 4, !dbg !7158
  %idxprom49 = zext i32 %41 to i64, !dbg !7156
  %arrayidx50 = getelementptr inbounds [3 x i64], [3 x i64]* %sig48, i64 0, i64 %idxprom49, !dbg !7156
  store i64 %39, i64* %arrayidx50, align 8, !dbg !7159
  br label %for.inc51, !dbg !7156

for.inc51:                                        ; preds = %for.body43
  %42 = load i32, i32* %i, align 4, !dbg !7160
  %inc52 = add i32 %42, 1, !dbg !7160
  store i32 %inc52, i32* %i, align 4, !dbg !7160
  br label %for.cond40, !dbg !7161, !llvm.loop !7162

for.end53:                                        ; preds = %for.cond40
  br label %for.cond54, !dbg !7164

for.cond54:                                       ; preds = %for.inc60, %for.end53
  %43 = load i32, i32* %i, align 4, !dbg !7165
  %cmp55 = icmp ult i32 %43, 3, !dbg !7168
  br i1 %cmp55, label %for.body56, label %for.end62, !dbg !7169

for.body56:                                       ; preds = %for.cond54
  %44 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !7170
  %sig57 = getelementptr inbounds %struct.real_value, %struct.real_value* %44, i32 0, i32 1, !dbg !7171
  %45 = load i32, i32* %i, align 4, !dbg !7172
  %idxprom58 = zext i32 %45 to i64, !dbg !7170
  %arrayidx59 = getelementptr inbounds [3 x i64], [3 x i64]* %sig57, i64 0, i64 %idxprom58, !dbg !7170
  store i64 0, i64* %arrayidx59, align 8, !dbg !7173
  br label %for.inc60, !dbg !7170

for.inc60:                                        ; preds = %for.body56
  %46 = load i32, i32* %i, align 4, !dbg !7174
  %inc61 = add i32 %46, 1, !dbg !7174
  store i32 %inc61, i32* %i, align 4, !dbg !7174
  br label %for.cond54, !dbg !7175, !llvm.loop !7176

for.end62:                                        ; preds = %for.cond54
  br label %if.end63

if.end63:                                         ; preds = %for.end62, %for.end39
  %47 = load i64, i64* %sticky, align 8, !dbg !7178
  %cmp64 = icmp ne i64 %47, 0, !dbg !7179
  %conv = zext i1 %cmp64 to i32, !dbg !7179
  %conv65 = trunc i32 %conv to i8, !dbg !7178
  ret i8 %conv65, !dbg !7180
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @sub_significands(%struct.real_value* %r, %struct.real_value* %a, %struct.real_value* %b, i32 %carry) #0 !dbg !7181 {
entry:
  %r.addr = alloca %struct.real_value*, align 8
  %a.addr = alloca %struct.real_value*, align 8
  %b.addr = alloca %struct.real_value*, align 8
  %carry.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %ai = alloca i64, align 8
  %ri = alloca i64, align 8
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !7182, metadata !DIExpression()), !dbg !7183
  store %struct.real_value* %a, %struct.real_value** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %a.addr, metadata !7184, metadata !DIExpression()), !dbg !7185
  store %struct.real_value* %b, %struct.real_value** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %b.addr, metadata !7186, metadata !DIExpression()), !dbg !7187
  store i32 %carry, i32* %carry.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %carry.addr, metadata !7188, metadata !DIExpression()), !dbg !7189
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7190, metadata !DIExpression()), !dbg !7191
  store i32 0, i32* %i, align 4, !dbg !7192
  br label %for.cond, !dbg !7194

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !7195
  %cmp = icmp slt i32 %0, 3, !dbg !7197
  br i1 %cmp, label %for.body, label %for.end, !dbg !7198

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i64* %ai, metadata !7199, metadata !DIExpression()), !dbg !7201
  %1 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !7202
  %sig = getelementptr inbounds %struct.real_value, %struct.real_value* %1, i32 0, i32 1, !dbg !7203
  %2 = load i32, i32* %i, align 4, !dbg !7204
  %idxprom = sext i32 %2 to i64, !dbg !7202
  %arrayidx = getelementptr inbounds [3 x i64], [3 x i64]* %sig, i64 0, i64 %idxprom, !dbg !7202
  %3 = load i64, i64* %arrayidx, align 8, !dbg !7202
  store i64 %3, i64* %ai, align 8, !dbg !7201
  call void @llvm.dbg.declare(metadata i64* %ri, metadata !7205, metadata !DIExpression()), !dbg !7206
  %4 = load i64, i64* %ai, align 8, !dbg !7207
  %5 = load %struct.real_value*, %struct.real_value** %b.addr, align 8, !dbg !7208
  %sig1 = getelementptr inbounds %struct.real_value, %struct.real_value* %5, i32 0, i32 1, !dbg !7209
  %6 = load i32, i32* %i, align 4, !dbg !7210
  %idxprom2 = sext i32 %6 to i64, !dbg !7208
  %arrayidx3 = getelementptr inbounds [3 x i64], [3 x i64]* %sig1, i64 0, i64 %idxprom2, !dbg !7208
  %7 = load i64, i64* %arrayidx3, align 8, !dbg !7208
  %sub = sub i64 %4, %7, !dbg !7211
  store i64 %sub, i64* %ri, align 8, !dbg !7206
  %8 = load i32, i32* %carry.addr, align 4, !dbg !7212
  %tobool = icmp ne i32 %8, 0, !dbg !7212
  br i1 %tobool, label %if.then, label %if.else, !dbg !7214

if.then:                                          ; preds = %for.body
  %9 = load i64, i64* %ri, align 8, !dbg !7215
  %10 = load i64, i64* %ai, align 8, !dbg !7217
  %cmp4 = icmp ugt i64 %9, %10, !dbg !7218
  %conv = zext i1 %cmp4 to i32, !dbg !7218
  store i32 %conv, i32* %carry.addr, align 4, !dbg !7219
  %11 = load i64, i64* %ri, align 8, !dbg !7220
  %dec = add i64 %11, -1, !dbg !7220
  store i64 %dec, i64* %ri, align 8, !dbg !7220
  %neg = xor i64 %dec, -1, !dbg !7221
  %cmp5 = icmp eq i64 %neg, 0, !dbg !7222
  %conv6 = zext i1 %cmp5 to i32, !dbg !7222
  %12 = load i32, i32* %carry.addr, align 4, !dbg !7223
  %or = or i32 %12, %conv6, !dbg !7223
  store i32 %or, i32* %carry.addr, align 4, !dbg !7223
  br label %if.end, !dbg !7224

if.else:                                          ; preds = %for.body
  %13 = load i64, i64* %ri, align 8, !dbg !7225
  %14 = load i64, i64* %ai, align 8, !dbg !7226
  %cmp7 = icmp ugt i64 %13, %14, !dbg !7227
  %conv8 = zext i1 %cmp7 to i32, !dbg !7227
  store i32 %conv8, i32* %carry.addr, align 4, !dbg !7228
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %15 = load i64, i64* %ri, align 8, !dbg !7229
  %16 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !7230
  %sig9 = getelementptr inbounds %struct.real_value, %struct.real_value* %16, i32 0, i32 1, !dbg !7231
  %17 = load i32, i32* %i, align 4, !dbg !7232
  %idxprom10 = sext i32 %17 to i64, !dbg !7230
  %arrayidx11 = getelementptr inbounds [3 x i64], [3 x i64]* %sig9, i64 0, i64 %idxprom10, !dbg !7230
  store i64 %15, i64* %arrayidx11, align 8, !dbg !7233
  br label %for.inc, !dbg !7234

for.inc:                                          ; preds = %if.end
  %18 = load i32, i32* %i, align 4, !dbg !7235
  %inc = add nsw i32 %18, 1, !dbg !7235
  store i32 %inc, i32* %i, align 4, !dbg !7235
  br label %for.cond, !dbg !7236, !llvm.loop !7237

for.end:                                          ; preds = %for.cond
  %19 = load i32, i32* %carry.addr, align 4, !dbg !7239
  %conv12 = trunc i32 %19 to i8, !dbg !7239
  ret i8 %conv12, !dbg !7240
}

; Function Attrs: noinline nounwind uwtable
define internal void @neg_significand(%struct.real_value* %r, %struct.real_value* %a) #0 !dbg !7241 {
entry:
  %r.addr = alloca %struct.real_value*, align 8
  %a.addr = alloca %struct.real_value*, align 8
  %carry = alloca i8, align 1
  %i = alloca i32, align 4
  %ri = alloca i64, align 8
  %ai = alloca i64, align 8
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !7242, metadata !DIExpression()), !dbg !7243
  store %struct.real_value* %a, %struct.real_value** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %a.addr, metadata !7244, metadata !DIExpression()), !dbg !7245
  call void @llvm.dbg.declare(metadata i8* %carry, metadata !7246, metadata !DIExpression()), !dbg !7247
  store i8 1, i8* %carry, align 1, !dbg !7247
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7248, metadata !DIExpression()), !dbg !7249
  store i32 0, i32* %i, align 4, !dbg !7250
  br label %for.cond, !dbg !7252

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !7253
  %cmp = icmp slt i32 %0, 3, !dbg !7255
  br i1 %cmp, label %for.body, label %for.end, !dbg !7256

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i64* %ri, metadata !7257, metadata !DIExpression()), !dbg !7259
  call void @llvm.dbg.declare(metadata i64* %ai, metadata !7260, metadata !DIExpression()), !dbg !7261
  %1 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !7262
  %sig = getelementptr inbounds %struct.real_value, %struct.real_value* %1, i32 0, i32 1, !dbg !7263
  %2 = load i32, i32* %i, align 4, !dbg !7264
  %idxprom = sext i32 %2 to i64, !dbg !7262
  %arrayidx = getelementptr inbounds [3 x i64], [3 x i64]* %sig, i64 0, i64 %idxprom, !dbg !7262
  %3 = load i64, i64* %arrayidx, align 8, !dbg !7262
  store i64 %3, i64* %ai, align 8, !dbg !7261
  %4 = load i8, i8* %carry, align 1, !dbg !7265
  %tobool = icmp ne i8 %4, 0, !dbg !7265
  br i1 %tobool, label %if.then, label %if.else3, !dbg !7267

if.then:                                          ; preds = %for.body
  %5 = load i64, i64* %ai, align 8, !dbg !7268
  %tobool1 = icmp ne i64 %5, 0, !dbg !7268
  br i1 %tobool1, label %if.then2, label %if.else, !dbg !7271

if.then2:                                         ; preds = %if.then
  %6 = load i64, i64* %ai, align 8, !dbg !7272
  %sub = sub i64 0, %6, !dbg !7274
  store i64 %sub, i64* %ri, align 8, !dbg !7275
  store i8 0, i8* %carry, align 1, !dbg !7276
  br label %if.end, !dbg !7277

if.else:                                          ; preds = %if.then
  %7 = load i64, i64* %ai, align 8, !dbg !7278
  store i64 %7, i64* %ri, align 8, !dbg !7279
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then2
  br label %if.end4, !dbg !7280

if.else3:                                         ; preds = %for.body
  %8 = load i64, i64* %ai, align 8, !dbg !7281
  %neg = xor i64 %8, -1, !dbg !7282
  store i64 %neg, i64* %ri, align 8, !dbg !7283
  br label %if.end4

if.end4:                                          ; preds = %if.else3, %if.end
  %9 = load i64, i64* %ri, align 8, !dbg !7284
  %10 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !7285
  %sig5 = getelementptr inbounds %struct.real_value, %struct.real_value* %10, i32 0, i32 1, !dbg !7286
  %11 = load i32, i32* %i, align 4, !dbg !7287
  %idxprom6 = sext i32 %11 to i64, !dbg !7285
  %arrayidx7 = getelementptr inbounds [3 x i64], [3 x i64]* %sig5, i64 0, i64 %idxprom6, !dbg !7285
  store i64 %9, i64* %arrayidx7, align 8, !dbg !7288
  br label %for.inc, !dbg !7289

for.inc:                                          ; preds = %if.end4
  %12 = load i32, i32* %i, align 4, !dbg !7290
  %inc = add nsw i32 %12, 1, !dbg !7290
  store i32 %inc, i32* %i, align 4, !dbg !7290
  br label %for.cond, !dbg !7291, !llvm.loop !7292

for.end:                                          ; preds = %for.cond
  ret void, !dbg !7294
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @div_significands(%struct.real_value* %r, %struct.real_value* %a, %struct.real_value* %b) #0 !dbg !7295 {
entry:
  %r.addr = alloca %struct.real_value*, align 8
  %a.addr = alloca %struct.real_value*, align 8
  %b.addr = alloca %struct.real_value*, align 8
  %u = alloca %struct.real_value, align 8
  %i = alloca i32, align 4
  %bit = alloca i32, align 4
  %msb = alloca i64, align 8
  %inexact = alloca i64, align 8
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !7296, metadata !DIExpression()), !dbg !7297
  store %struct.real_value* %a, %struct.real_value** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %a.addr, metadata !7298, metadata !DIExpression()), !dbg !7299
  store %struct.real_value* %b, %struct.real_value** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %b.addr, metadata !7300, metadata !DIExpression()), !dbg !7301
  call void @llvm.dbg.declare(metadata %struct.real_value* %u, metadata !7302, metadata !DIExpression()), !dbg !7303
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7304, metadata !DIExpression()), !dbg !7305
  call void @llvm.dbg.declare(metadata i32* %bit, metadata !7306, metadata !DIExpression()), !dbg !7307
  store i32 191, i32* %bit, align 4, !dbg !7307
  call void @llvm.dbg.declare(metadata i64* %msb, metadata !7308, metadata !DIExpression()), !dbg !7309
  call void @llvm.dbg.declare(metadata i64* %inexact, metadata !7310, metadata !DIExpression()), !dbg !7311
  %0 = load %struct.real_value*, %struct.real_value** %a.addr, align 8, !dbg !7312
  %1 = bitcast %struct.real_value* %u to i8*, !dbg !7313
  %2 = bitcast %struct.real_value* %0 to i8*, !dbg !7313
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 32, i1 false), !dbg !7313
  %3 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !7314
  %sig = getelementptr inbounds %struct.real_value, %struct.real_value* %3, i32 0, i32 1, !dbg !7315
  %arraydecay = getelementptr inbounds [3 x i64], [3 x i64]* %sig, i64 0, i64 0, !dbg !7316
  %4 = bitcast i64* %arraydecay to i8*, !dbg !7316
  call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 24, i1 false), !dbg !7316
  store i64 0, i64* %msb, align 8, !dbg !7317
  br label %start, !dbg !7318

5:                                                ; No predecessors!
  br label %do.body, !dbg !7319

do.body:                                          ; preds = %do.cond, %5
  %sig1 = getelementptr inbounds %struct.real_value, %struct.real_value* %u, i32 0, i32 1, !dbg !7320
  %arrayidx = getelementptr inbounds [3 x i64], [3 x i64]* %sig1, i64 0, i64 2, !dbg !7322
  %6 = load i64, i64* %arrayidx, align 8, !dbg !7322
  %and = and i64 %6, -9223372036854775808, !dbg !7323
  store i64 %and, i64* %msb, align 8, !dbg !7324
  call void @lshift_significand_1(%struct.real_value* %u, %struct.real_value* %u), !dbg !7325
  br label %start, !dbg !7325

start:                                            ; preds = %do.body, %entry
  call void @llvm.dbg.label(metadata !7326), !dbg !7327
  %7 = load i64, i64* %msb, align 8, !dbg !7328
  %tobool = icmp ne i64 %7, 0, !dbg !7328
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !7330

lor.lhs.false:                                    ; preds = %start
  %8 = load %struct.real_value*, %struct.real_value** %b.addr, align 8, !dbg !7331
  %call = call i32 @cmp_significands(%struct.real_value* %u, %struct.real_value* %8), !dbg !7332
  %cmp = icmp sge i32 %call, 0, !dbg !7333
  br i1 %cmp, label %if.then, label %if.end, !dbg !7334

if.then:                                          ; preds = %lor.lhs.false, %start
  %9 = load %struct.real_value*, %struct.real_value** %b.addr, align 8, !dbg !7335
  %call2 = call zeroext i8 @sub_significands(%struct.real_value* %u, %struct.real_value* %u, %struct.real_value* %9, i32 0), !dbg !7337
  %10 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !7338
  %11 = load i32, i32* %bit, align 4, !dbg !7339
  call void @set_significand_bit(%struct.real_value* %10, i32 %11), !dbg !7340
  br label %if.end, !dbg !7341

if.end:                                           ; preds = %if.then, %lor.lhs.false
  br label %do.cond, !dbg !7342

do.cond:                                          ; preds = %if.end
  %12 = load i32, i32* %bit, align 4, !dbg !7343
  %dec = add nsw i32 %12, -1, !dbg !7343
  store i32 %dec, i32* %bit, align 4, !dbg !7343
  %cmp3 = icmp sge i32 %dec, 0, !dbg !7344
  br i1 %cmp3, label %do.body, label %do.end, !dbg !7342, !llvm.loop !7345

do.end:                                           ; preds = %do.cond
  store i32 0, i32* %i, align 4, !dbg !7347
  store i64 0, i64* %inexact, align 8, !dbg !7349
  br label %for.cond, !dbg !7350

for.cond:                                         ; preds = %for.inc, %do.end
  %13 = load i32, i32* %i, align 4, !dbg !7351
  %cmp4 = icmp slt i32 %13, 3, !dbg !7353
  br i1 %cmp4, label %for.body, label %for.end, !dbg !7354

for.body:                                         ; preds = %for.cond
  %sig5 = getelementptr inbounds %struct.real_value, %struct.real_value* %u, i32 0, i32 1, !dbg !7355
  %14 = load i32, i32* %i, align 4, !dbg !7356
  %idxprom = sext i32 %14 to i64, !dbg !7357
  %arrayidx6 = getelementptr inbounds [3 x i64], [3 x i64]* %sig5, i64 0, i64 %idxprom, !dbg !7357
  %15 = load i64, i64* %arrayidx6, align 8, !dbg !7357
  %16 = load i64, i64* %inexact, align 8, !dbg !7358
  %or = or i64 %16, %15, !dbg !7358
  store i64 %or, i64* %inexact, align 8, !dbg !7358
  br label %for.inc, !dbg !7359

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %i, align 4, !dbg !7360
  %inc = add nsw i32 %17, 1, !dbg !7360
  store i32 %inc, i32* %i, align 4, !dbg !7360
  br label %for.cond, !dbg !7361, !llvm.loop !7362

for.end:                                          ; preds = %for.cond
  %18 = load i64, i64* %inexact, align 8, !dbg !7364
  %cmp7 = icmp ne i64 %18, 0, !dbg !7365
  %conv = zext i1 %cmp7 to i32, !dbg !7365
  %conv8 = trunc i32 %conv to i8, !dbg !7364
  ret i8 %conv8, !dbg !7366
}

; Function Attrs: noinline nounwind uwtable
define internal void @set_significand_bit(%struct.real_value* %r, i32 %n) #0 !dbg !7367 {
entry:
  %r.addr = alloca %struct.real_value*, align 8
  %n.addr = alloca i32, align 4
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !7368, metadata !DIExpression()), !dbg !7369
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !7370, metadata !DIExpression()), !dbg !7371
  %0 = load i32, i32* %n.addr, align 4, !dbg !7372
  %rem = urem i32 %0, 64, !dbg !7373
  %sh_prom = zext i32 %rem to i64, !dbg !7374
  %shl = shl i64 1, %sh_prom, !dbg !7374
  %1 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !7375
  %sig = getelementptr inbounds %struct.real_value, %struct.real_value* %1, i32 0, i32 1, !dbg !7376
  %2 = load i32, i32* %n.addr, align 4, !dbg !7377
  %div = udiv i32 %2, 64, !dbg !7378
  %idxprom = zext i32 %div to i64, !dbg !7375
  %arrayidx = getelementptr inbounds [3 x i64], [3 x i64]* %sig, i64 0, i64 %idxprom, !dbg !7375
  %3 = load i64, i64* %arrayidx, align 8, !dbg !7379
  %or = or i64 %3, %shl, !dbg !7379
  store i64 %or, i64* %arrayidx, align 8, !dbg !7379
  ret void, !dbg !7380
}

declare dso_local i32 @decimal_do_compare(%struct.real_value*, %struct.real_value*, i32) #2

declare dso_local void @decimal_do_fix_trunc(%struct.real_value*, %struct.real_value*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @decimal_integer_string(i8* %str, %struct.real_value* %r_orig, i64 %buf_size) #0 !dbg !7381 {
entry:
  %str.addr = alloca i8*, align 8
  %r_orig.addr = alloca %struct.real_value*, align 8
  %buf_size.addr = alloca i64, align 8
  %dec_exp = alloca i32, align 4
  %digit = alloca i32, align 4
  %digits = alloca i32, align 4
  %r = alloca %struct.real_value, align 8
  %pten = alloca %struct.real_value, align 8
  %p = alloca i8*, align 8
  %sign = alloca i8, align 1
  store i8* %str, i8** %str.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !7384, metadata !DIExpression()), !dbg !7385
  store %struct.real_value* %r_orig, %struct.real_value** %r_orig.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r_orig.addr, metadata !7386, metadata !DIExpression()), !dbg !7387
  store i64 %buf_size, i64* %buf_size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %buf_size.addr, metadata !7388, metadata !DIExpression()), !dbg !7389
  call void @llvm.dbg.declare(metadata i32* %dec_exp, metadata !7390, metadata !DIExpression()), !dbg !7391
  call void @llvm.dbg.declare(metadata i32* %digit, metadata !7392, metadata !DIExpression()), !dbg !7393
  call void @llvm.dbg.declare(metadata i32* %digits, metadata !7394, metadata !DIExpression()), !dbg !7395
  call void @llvm.dbg.declare(metadata %struct.real_value* %r, metadata !7396, metadata !DIExpression()), !dbg !7397
  call void @llvm.dbg.declare(metadata %struct.real_value* %pten, metadata !7398, metadata !DIExpression()), !dbg !7399
  call void @llvm.dbg.declare(metadata i8** %p, metadata !7400, metadata !DIExpression()), !dbg !7401
  call void @llvm.dbg.declare(metadata i8* %sign, metadata !7402, metadata !DIExpression()), !dbg !7403
  %0 = load %struct.real_value*, %struct.real_value** %r_orig.addr, align 8, !dbg !7404
  %1 = bitcast %struct.real_value* %r to i8*, !dbg !7405
  %2 = bitcast %struct.real_value* %0 to i8*, !dbg !7405
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 32, i1 false), !dbg !7405
  %3 = bitcast %struct.real_value* %r to i32*, !dbg !7406
  %bf.load = load i32, i32* %3, align 8, !dbg !7406
  %bf.clear = and i32 %bf.load, 3, !dbg !7406
  %cmp = icmp eq i32 %bf.clear, 0, !dbg !7408
  br i1 %cmp, label %if.then, label %if.end, !dbg !7409

if.then:                                          ; preds = %entry
  %4 = load i8*, i8** %str.addr, align 8, !dbg !7410
  %call = call i8* @strcpy(i8* %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18, i64 0, i64 0)), !dbg !7412
  br label %return, !dbg !7413

if.end:                                           ; preds = %entry
  %5 = bitcast %struct.real_value* %r to i32*, !dbg !7414
  %bf.load1 = load i32, i32* %5, align 8, !dbg !7414
  %bf.lshr = lshr i32 %bf.load1, 3, !dbg !7414
  %bf.clear2 = and i32 %bf.lshr, 1, !dbg !7414
  %conv = trunc i32 %bf.clear2 to i8, !dbg !7415
  store i8 %conv, i8* %sign, align 1, !dbg !7416
  %6 = bitcast %struct.real_value* %r to i32*, !dbg !7417
  %bf.load3 = load i32, i32* %6, align 8, !dbg !7418
  %bf.clear4 = and i32 %bf.load3, -9, !dbg !7418
  store i32 %bf.clear4, i32* %6, align 8, !dbg !7418
  %7 = bitcast %struct.real_value* %r to i32*, !dbg !7419
  %bf.load5 = load i32, i32* %7, align 8, !dbg !7419
  %bf.lshr6 = lshr i32 %bf.load5, 6, !dbg !7419
  %xor = xor i32 %bf.lshr6, 33554432, !dbg !7419
  %sub = sub nsw i32 %xor, 33554432, !dbg !7419
  %conv7 = sitofp i32 %sub to double, !dbg !7419
  %mul = fmul double %conv7, 0x3FD34413509F79FF, !dbg !7420
  %conv8 = fptosi double %mul to i32, !dbg !7419
  store i32 %conv8, i32* %dec_exp, align 4, !dbg !7421
  %8 = load i32, i32* %dec_exp, align 4, !dbg !7422
  %add = add nsw i32 %8, 1, !dbg !7423
  store i32 %add, i32* %digits, align 4, !dbg !7424
  %9 = load i32, i32* %digits, align 4, !dbg !7425
  %add9 = add nsw i32 %9, 2, !dbg !7425
  %10 = load i64, i64* %buf_size.addr, align 8, !dbg !7425
  %conv10 = trunc i64 %10 to i32, !dbg !7425
  %cmp11 = icmp slt i32 %add9, %conv10, !dbg !7425
  br i1 %cmp11, label %cond.false, label %cond.true, !dbg !7425

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 2214, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7425
  br label %cond.end, !dbg !7425

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !7425

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7425
  %call13 = call %struct.real_value* @real_digit(i32 1), !dbg !7426
  %11 = bitcast %struct.real_value* %pten to i8*, !dbg !7427
  %12 = bitcast %struct.real_value* %call13 to i8*, !dbg !7427
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* align 8 %12, i64 32, i1 false), !dbg !7427
  %13 = load i32, i32* %dec_exp, align 4, !dbg !7428
  call void @times_pten(%struct.real_value* %pten, i32 %13), !dbg !7429
  %14 = load i8*, i8** %str.addr, align 8, !dbg !7430
  store i8* %14, i8** %p, align 8, !dbg !7431
  %15 = load i8, i8* %sign, align 1, !dbg !7432
  %tobool = icmp ne i8 %15, 0, !dbg !7432
  br i1 %tobool, label %if.then14, label %if.end15, !dbg !7434

if.then14:                                        ; preds = %cond.end
  %16 = load i8*, i8** %p, align 8, !dbg !7435
  %incdec.ptr = getelementptr inbounds i8, i8* %16, i32 1, !dbg !7435
  store i8* %incdec.ptr, i8** %p, align 8, !dbg !7435
  store i8 45, i8* %16, align 1, !dbg !7436
  br label %if.end15, !dbg !7437

if.end15:                                         ; preds = %if.then14, %cond.end
  %call16 = call i64 @rtd_divmod(%struct.real_value* %r, %struct.real_value* %pten), !dbg !7438
  %conv17 = trunc i64 %call16 to i32, !dbg !7438
  store i32 %conv17, i32* %digit, align 4, !dbg !7439
  %17 = load i32, i32* %digit, align 4, !dbg !7440
  %cmp18 = icmp sge i32 %17, 0, !dbg !7440
  br i1 %cmp18, label %land.lhs.true, label %cond.true22, !dbg !7440

land.lhs.true:                                    ; preds = %if.end15
  %18 = load i32, i32* %digit, align 4, !dbg !7440
  %cmp20 = icmp sle i32 %18, 9, !dbg !7440
  br i1 %cmp20, label %cond.false23, label %cond.true22, !dbg !7440

cond.true22:                                      ; preds = %land.lhs.true, %if.end15
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 2224, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7440
  br label %cond.end24, !dbg !7440

cond.false23:                                     ; preds = %land.lhs.true
  br label %cond.end24, !dbg !7440

cond.end24:                                       ; preds = %cond.false23, %cond.true22
  %cond25 = phi i32 [ 0, %cond.true22 ], [ 0, %cond.false23 ], !dbg !7440
  %19 = load i32, i32* %digit, align 4, !dbg !7441
  %add26 = add nsw i32 %19, 48, !dbg !7442
  %conv27 = trunc i32 %add26 to i8, !dbg !7441
  %20 = load i8*, i8** %p, align 8, !dbg !7443
  %incdec.ptr28 = getelementptr inbounds i8, i8* %20, i32 1, !dbg !7443
  store i8* %incdec.ptr28, i8** %p, align 8, !dbg !7443
  store i8 %conv27, i8* %20, align 1, !dbg !7444
  br label %while.cond, !dbg !7445

while.cond:                                       ; preds = %while.body, %cond.end24
  %21 = load i32, i32* %digits, align 4, !dbg !7446
  %dec = add nsw i32 %21, -1, !dbg !7446
  store i32 %dec, i32* %digits, align 4, !dbg !7446
  %cmp29 = icmp sgt i32 %dec, 0, !dbg !7447
  br i1 %cmp29, label %while.body, label %while.end, !dbg !7445

while.body:                                       ; preds = %while.cond
  call void @times_pten(%struct.real_value* %r, i32 1), !dbg !7448
  %call31 = call i64 @rtd_divmod(%struct.real_value* %r, %struct.real_value* %pten), !dbg !7450
  %conv32 = trunc i64 %call31 to i32, !dbg !7450
  store i32 %conv32, i32* %digit, align 4, !dbg !7451
  %22 = load i32, i32* %digit, align 4, !dbg !7452
  %add33 = add nsw i32 %22, 48, !dbg !7453
  %conv34 = trunc i32 %add33 to i8, !dbg !7452
  %23 = load i8*, i8** %p, align 8, !dbg !7454
  %incdec.ptr35 = getelementptr inbounds i8, i8* %23, i32 1, !dbg !7454
  store i8* %incdec.ptr35, i8** %p, align 8, !dbg !7454
  store i8 %conv34, i8* %23, align 1, !dbg !7455
  br label %while.cond, !dbg !7445, !llvm.loop !7456

while.end:                                        ; preds = %while.cond
  %24 = load i8*, i8** %p, align 8, !dbg !7458
  %incdec.ptr36 = getelementptr inbounds i8, i8* %24, i32 1, !dbg !7458
  store i8* %incdec.ptr36, i8** %p, align 8, !dbg !7458
  store i8 46, i8* %24, align 1, !dbg !7459
  %25 = load i8*, i8** %p, align 8, !dbg !7460
  %incdec.ptr37 = getelementptr inbounds i8, i8* %25, i32 1, !dbg !7460
  store i8* %incdec.ptr37, i8** %p, align 8, !dbg !7460
  store i8 0, i8* %25, align 1, !dbg !7461
  br label %return, !dbg !7462

return:                                           ; preds = %while.end, %if.then
  ret void, !dbg !7462
}

declare dso_local void @decimal_round_for_format(%struct.real_format*, %struct.real_value*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @test_significand_bit(%struct.real_value* %r, i32 %n) #0 !dbg !7463 {
entry:
  %r.addr = alloca %struct.real_value*, align 8
  %n.addr = alloca i32, align 4
  %t = alloca i32, align 4
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !7466, metadata !DIExpression()), !dbg !7467
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !7468, metadata !DIExpression()), !dbg !7469
  call void @llvm.dbg.declare(metadata i32* %t, metadata !7470, metadata !DIExpression()), !dbg !7471
  %0 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !7472
  %sig = getelementptr inbounds %struct.real_value, %struct.real_value* %0, i32 0, i32 1, !dbg !7473
  %1 = load i32, i32* %n.addr, align 4, !dbg !7474
  %div = udiv i32 %1, 64, !dbg !7475
  %idxprom = zext i32 %div to i64, !dbg !7472
  %arrayidx = getelementptr inbounds [3 x i64], [3 x i64]* %sig, i64 0, i64 %idxprom, !dbg !7472
  %2 = load i64, i64* %arrayidx, align 8, !dbg !7472
  %3 = load i32, i32* %n.addr, align 4, !dbg !7476
  %rem = urem i32 %3, 64, !dbg !7477
  %sh_prom = zext i32 %rem to i64, !dbg !7478
  %shr = lshr i64 %2, %sh_prom, !dbg !7478
  %and = and i64 %shr, 1, !dbg !7479
  %conv = trunc i64 %and to i32, !dbg !7480
  store i32 %conv, i32* %t, align 4, !dbg !7471
  %4 = load i32, i32* %t, align 4, !dbg !7481
  %conv1 = trunc i32 %4 to i8, !dbg !7481
  ret i8 %conv1, !dbg !7482
}

; Function Attrs: noinline nounwind uwtable
define internal void @encode_ieee_extended(%struct.real_format* %fmt, i64* %buf, %struct.real_value* %r) #0 !dbg !7483 {
entry:
  %fmt.addr = alloca %struct.real_format*, align 8
  %buf.addr = alloca i64*, align 8
  %r.addr = alloca %struct.real_value*, align 8
  %image_hi = alloca i64, align 8
  %sig_hi = alloca i64, align 8
  %sig_lo = alloca i64, align 8
  %denormal = alloca i8, align 1
  %exp = alloca i32, align 4
  store %struct.real_format* %fmt, %struct.real_format** %fmt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_format** %fmt.addr, metadata !7484, metadata !DIExpression()), !dbg !7485
  store i64* %buf, i64** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %buf.addr, metadata !7486, metadata !DIExpression()), !dbg !7487
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !7488, metadata !DIExpression()), !dbg !7489
  call void @llvm.dbg.declare(metadata i64* %image_hi, metadata !7490, metadata !DIExpression()), !dbg !7491
  call void @llvm.dbg.declare(metadata i64* %sig_hi, metadata !7492, metadata !DIExpression()), !dbg !7493
  call void @llvm.dbg.declare(metadata i64* %sig_lo, metadata !7494, metadata !DIExpression()), !dbg !7495
  call void @llvm.dbg.declare(metadata i8* %denormal, metadata !7496, metadata !DIExpression()), !dbg !7497
  %0 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !7498
  %sig = getelementptr inbounds %struct.real_value, %struct.real_value* %0, i32 0, i32 1, !dbg !7499
  %arrayidx = getelementptr inbounds [3 x i64], [3 x i64]* %sig, i64 0, i64 2, !dbg !7498
  %1 = load i64, i64* %arrayidx, align 8, !dbg !7498
  %and = and i64 %1, -9223372036854775808, !dbg !7500
  %cmp = icmp eq i64 %and, 0, !dbg !7501
  %conv = zext i1 %cmp to i32, !dbg !7501
  %conv1 = trunc i32 %conv to i8, !dbg !7502
  store i8 %conv1, i8* %denormal, align 1, !dbg !7497
  %2 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !7503
  %3 = bitcast %struct.real_value* %2 to i32*, !dbg !7504
  %bf.load = load i32, i32* %3, align 8, !dbg !7504
  %bf.lshr = lshr i32 %bf.load, 3, !dbg !7504
  %bf.clear = and i32 %bf.lshr, 1, !dbg !7504
  %shl = shl i32 %bf.clear, 15, !dbg !7505
  %conv2 = sext i32 %shl to i64, !dbg !7503
  store i64 %conv2, i64* %image_hi, align 8, !dbg !7506
  store i64 0, i64* %sig_lo, align 8, !dbg !7507
  store i64 0, i64* %sig_hi, align 8, !dbg !7508
  %4 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !7509
  %5 = bitcast %struct.real_value* %4 to i32*, !dbg !7510
  %bf.load3 = load i32, i32* %5, align 8, !dbg !7510
  %bf.clear4 = and i32 %bf.load3, 3, !dbg !7510
  switch i32 %bf.clear4, label %sw.default [
    i32 0, label %sw.bb
    i32 2, label %sw.bb5
    i32 3, label %sw.bb7
    i32 1, label %sw.bb47
  ], !dbg !7511

sw.bb:                                            ; preds = %entry
  br label %sw.epilog, !dbg !7512

sw.bb5:                                           ; preds = %entry
  %6 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !7514
  %has_inf = getelementptr inbounds %struct.real_format, %struct.real_format* %6, i32 0, i32 12, !dbg !7516
  %7 = load i8, i8* %has_inf, align 1, !dbg !7516
  %tobool = icmp ne i8 %7, 0, !dbg !7514
  br i1 %tobool, label %if.then, label %if.else, !dbg !7517

if.then:                                          ; preds = %sw.bb5
  %8 = load i64, i64* %image_hi, align 8, !dbg !7518
  %or = or i64 %8, 32767, !dbg !7518
  store i64 %or, i64* %image_hi, align 8, !dbg !7518
  store i64 2147483648, i64* %sig_hi, align 8, !dbg !7520
  br label %if.end, !dbg !7521

if.else:                                          ; preds = %sw.bb5
  %9 = load i64, i64* %image_hi, align 8, !dbg !7522
  %or6 = or i64 %9, 32767, !dbg !7522
  store i64 %or6, i64* %image_hi, align 8, !dbg !7522
  store i64 4294967295, i64* %sig_hi, align 8, !dbg !7524
  store i64 4294967295, i64* %sig_lo, align 8, !dbg !7525
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %sw.epilog, !dbg !7526

sw.bb7:                                           ; preds = %entry
  %10 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !7527
  %has_nans = getelementptr inbounds %struct.real_format, %struct.real_format* %10, i32 0, i32 11, !dbg !7529
  %11 = load i8, i8* %has_nans, align 2, !dbg !7529
  %tobool8 = icmp ne i8 %11, 0, !dbg !7527
  br i1 %tobool8, label %if.then9, label %if.else44, !dbg !7530

if.then9:                                         ; preds = %sw.bb7
  %12 = load i64, i64* %image_hi, align 8, !dbg !7531
  %or10 = or i64 %12, 32767, !dbg !7531
  store i64 %or10, i64* %image_hi, align 8, !dbg !7531
  %13 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !7533
  %14 = bitcast %struct.real_value* %13 to i32*, !dbg !7535
  %bf.load11 = load i32, i32* %14, align 8, !dbg !7535
  %bf.lshr12 = lshr i32 %bf.load11, 5, !dbg !7535
  %bf.clear13 = and i32 %bf.lshr12, 1, !dbg !7535
  %tobool14 = icmp ne i32 %bf.clear13, 0, !dbg !7533
  br i1 %tobool14, label %if.then15, label %if.else19, !dbg !7536

if.then15:                                        ; preds = %if.then9
  %15 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !7537
  %canonical_nan_lsbs_set = getelementptr inbounds %struct.real_format, %struct.real_format* %15, i32 0, i32 16, !dbg !7540
  %16 = load i8, i8* %canonical_nan_lsbs_set, align 1, !dbg !7540
  %tobool16 = icmp ne i8 %16, 0, !dbg !7537
  br i1 %tobool16, label %if.then17, label %if.end18, !dbg !7541

if.then17:                                        ; preds = %if.then15
  store i64 1073741823, i64* %sig_hi, align 8, !dbg !7542
  store i64 4294967295, i64* %sig_lo, align 8, !dbg !7544
  br label %if.end18, !dbg !7545

if.end18:                                         ; preds = %if.then17, %if.then15
  br label %if.end24, !dbg !7546

if.else19:                                        ; preds = %if.then9
  %17 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !7547
  %sig20 = getelementptr inbounds %struct.real_value, %struct.real_value* %17, i32 0, i32 1, !dbg !7550
  %arrayidx21 = getelementptr inbounds [3 x i64], [3 x i64]* %sig20, i64 0, i64 2, !dbg !7547
  %18 = load i64, i64* %arrayidx21, align 8, !dbg !7547
  store i64 %18, i64* %sig_lo, align 8, !dbg !7551
  %19 = load i64, i64* %sig_lo, align 8, !dbg !7552
  %shr = lshr i64 %19, 31, !dbg !7553
  %shr22 = lshr i64 %shr, 1, !dbg !7554
  store i64 %shr22, i64* %sig_hi, align 8, !dbg !7555
  %20 = load i64, i64* %sig_lo, align 8, !dbg !7556
  %and23 = and i64 %20, 4294967295, !dbg !7556
  store i64 %and23, i64* %sig_lo, align 8, !dbg !7556
  br label %if.end24

if.end24:                                         ; preds = %if.else19, %if.end18
  %21 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !7557
  %22 = bitcast %struct.real_value* %21 to i32*, !dbg !7559
  %bf.load25 = load i32, i32* %22, align 8, !dbg !7559
  %bf.lshr26 = lshr i32 %bf.load25, 4, !dbg !7559
  %bf.clear27 = and i32 %bf.lshr26, 1, !dbg !7559
  %23 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !7560
  %qnan_msb_set = getelementptr inbounds %struct.real_format, %struct.real_format* %23, i32 0, i32 15, !dbg !7561
  %24 = load i8, i8* %qnan_msb_set, align 2, !dbg !7561
  %conv28 = zext i8 %24 to i32, !dbg !7560
  %cmp29 = icmp eq i32 %bf.clear27, %conv28, !dbg !7562
  br i1 %cmp29, label %if.then31, label %if.else33, !dbg !7563

if.then31:                                        ; preds = %if.end24
  %25 = load i64, i64* %sig_hi, align 8, !dbg !7564
  %and32 = and i64 %25, -1073741825, !dbg !7564
  store i64 %and32, i64* %sig_hi, align 8, !dbg !7564
  br label %if.end35, !dbg !7565

if.else33:                                        ; preds = %if.end24
  %26 = load i64, i64* %sig_hi, align 8, !dbg !7566
  %or34 = or i64 %26, 1073741824, !dbg !7566
  store i64 %or34, i64* %sig_hi, align 8, !dbg !7566
  br label %if.end35

if.end35:                                         ; preds = %if.else33, %if.then31
  %27 = load i64, i64* %sig_hi, align 8, !dbg !7567
  %and36 = and i64 %27, 2147483647, !dbg !7569
  %cmp37 = icmp eq i64 %and36, 0, !dbg !7570
  br i1 %cmp37, label %land.lhs.true, label %if.end42, !dbg !7571

land.lhs.true:                                    ; preds = %if.end35
  %28 = load i64, i64* %sig_lo, align 8, !dbg !7572
  %cmp39 = icmp eq i64 %28, 0, !dbg !7573
  br i1 %cmp39, label %if.then41, label %if.end42, !dbg !7574

if.then41:                                        ; preds = %land.lhs.true
  store i64 536870912, i64* %sig_hi, align 8, !dbg !7575
  br label %if.end42, !dbg !7576

if.end42:                                         ; preds = %if.then41, %land.lhs.true, %if.end35
  %29 = load i64, i64* %sig_hi, align 8, !dbg !7577
  %or43 = or i64 %29, 2147483648, !dbg !7577
  store i64 %or43, i64* %sig_hi, align 8, !dbg !7577
  br label %if.end46, !dbg !7578

if.else44:                                        ; preds = %sw.bb7
  %30 = load i64, i64* %image_hi, align 8, !dbg !7579
  %or45 = or i64 %30, 32767, !dbg !7579
  store i64 %or45, i64* %image_hi, align 8, !dbg !7579
  store i64 4294967295, i64* %sig_hi, align 8, !dbg !7581
  store i64 4294967295, i64* %sig_lo, align 8, !dbg !7582
  br label %if.end46

if.end46:                                         ; preds = %if.else44, %if.end42
  br label %sw.epilog, !dbg !7583

sw.bb47:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %exp, metadata !7584, metadata !DIExpression()), !dbg !7586
  %31 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !7587
  %32 = bitcast %struct.real_value* %31 to i32*, !dbg !7587
  %bf.load48 = load i32, i32* %32, align 8, !dbg !7587
  %bf.lshr49 = lshr i32 %bf.load48, 6, !dbg !7587
  %xor = xor i32 %bf.lshr49, 33554432, !dbg !7587
  %sub = sub nsw i32 %xor, 33554432, !dbg !7587
  store i32 %sub, i32* %exp, align 4, !dbg !7586
  %33 = load i8, i8* %denormal, align 1, !dbg !7588
  %tobool50 = icmp ne i8 %33, 0, !dbg !7588
  br i1 %tobool50, label %if.then51, label %if.else52, !dbg !7590

if.then51:                                        ; preds = %sw.bb47
  store i32 0, i32* %exp, align 4, !dbg !7591
  br label %if.end55, !dbg !7592

if.else52:                                        ; preds = %sw.bb47
  %34 = load i32, i32* %exp, align 4, !dbg !7593
  %add = add nsw i32 %34, 16382, !dbg !7593
  store i32 %add, i32* %exp, align 4, !dbg !7593
  %35 = load i32, i32* %exp, align 4, !dbg !7595
  %cmp53 = icmp sge i32 %35, 0, !dbg !7595
  br i1 %cmp53, label %cond.false, label %cond.true, !dbg !7595

cond.true:                                        ; preds = %if.else52
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 3481, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7595
  br label %cond.end, !dbg !7595

cond.false:                                       ; preds = %if.else52
  br label %cond.end, !dbg !7595

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7595
  br label %if.end55

if.end55:                                         ; preds = %cond.end, %if.then51
  %36 = load i32, i32* %exp, align 4, !dbg !7596
  %conv56 = sext i32 %36 to i64, !dbg !7596
  %37 = load i64, i64* %image_hi, align 8, !dbg !7597
  %or57 = or i64 %37, %conv56, !dbg !7597
  store i64 %or57, i64* %image_hi, align 8, !dbg !7597
  %38 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !7598
  %sig58 = getelementptr inbounds %struct.real_value, %struct.real_value* %38, i32 0, i32 1, !dbg !7601
  %arrayidx59 = getelementptr inbounds [3 x i64], [3 x i64]* %sig58, i64 0, i64 2, !dbg !7598
  %39 = load i64, i64* %arrayidx59, align 8, !dbg !7598
  store i64 %39, i64* %sig_lo, align 8, !dbg !7602
  %40 = load i64, i64* %sig_lo, align 8, !dbg !7603
  %shr60 = lshr i64 %40, 31, !dbg !7604
  %shr61 = lshr i64 %shr60, 1, !dbg !7605
  store i64 %shr61, i64* %sig_hi, align 8, !dbg !7606
  %41 = load i64, i64* %sig_lo, align 8, !dbg !7607
  %and62 = and i64 %41, 4294967295, !dbg !7607
  store i64 %and62, i64* %sig_lo, align 8, !dbg !7607
  br label %sw.epilog, !dbg !7608

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 3500, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7609
  br label %sw.epilog, !dbg !7610

sw.epilog:                                        ; preds = %sw.default, %if.end55, %if.end46, %if.end, %sw.bb
  %42 = load i64, i64* %sig_lo, align 8, !dbg !7611
  %43 = load i64*, i64** %buf.addr, align 8, !dbg !7612
  %arrayidx63 = getelementptr inbounds i64, i64* %43, i64 0, !dbg !7612
  store i64 %42, i64* %arrayidx63, align 8, !dbg !7613
  %44 = load i64, i64* %sig_hi, align 8, !dbg !7614
  %45 = load i64*, i64** %buf.addr, align 8, !dbg !7615
  %arrayidx64 = getelementptr inbounds i64, i64* %45, i64 1, !dbg !7615
  store i64 %44, i64* %arrayidx64, align 8, !dbg !7616
  %46 = load i64, i64* %image_hi, align 8, !dbg !7617
  %47 = load i64*, i64** %buf.addr, align 8, !dbg !7618
  %arrayidx65 = getelementptr inbounds i64, i64* %47, i64 2, !dbg !7618
  store i64 %46, i64* %arrayidx65, align 8, !dbg !7619
  ret void, !dbg !7620
}

; Function Attrs: noinline nounwind uwtable
define internal void @decode_ieee_extended(%struct.real_format* %fmt, %struct.real_value* %r, i64* %buf) #0 !dbg !7621 {
entry:
  %fmt.addr = alloca %struct.real_format*, align 8
  %r.addr = alloca %struct.real_value*, align 8
  %buf.addr = alloca i64*, align 8
  %image_hi = alloca i64, align 8
  %sig_hi = alloca i64, align 8
  %sig_lo = alloca i64, align 8
  %sign = alloca i8, align 1
  %exp = alloca i32, align 4
  store %struct.real_format* %fmt, %struct.real_format** %fmt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_format** %fmt.addr, metadata !7622, metadata !DIExpression()), !dbg !7623
  store %struct.real_value* %r, %struct.real_value** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value** %r.addr, metadata !7624, metadata !DIExpression()), !dbg !7625
  store i64* %buf, i64** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %buf.addr, metadata !7626, metadata !DIExpression()), !dbg !7627
  call void @llvm.dbg.declare(metadata i64* %image_hi, metadata !7628, metadata !DIExpression()), !dbg !7629
  call void @llvm.dbg.declare(metadata i64* %sig_hi, metadata !7630, metadata !DIExpression()), !dbg !7631
  call void @llvm.dbg.declare(metadata i64* %sig_lo, metadata !7632, metadata !DIExpression()), !dbg !7633
  call void @llvm.dbg.declare(metadata i8* %sign, metadata !7634, metadata !DIExpression()), !dbg !7635
  call void @llvm.dbg.declare(metadata i32* %exp, metadata !7636, metadata !DIExpression()), !dbg !7637
  %0 = load i64*, i64** %buf.addr, align 8, !dbg !7638
  %arrayidx = getelementptr inbounds i64, i64* %0, i64 0, !dbg !7638
  %1 = load i64, i64* %arrayidx, align 8, !dbg !7638
  store i64 %1, i64* %sig_lo, align 8, !dbg !7639
  %2 = load i64*, i64** %buf.addr, align 8, !dbg !7640
  %arrayidx1 = getelementptr inbounds i64, i64* %2, i64 1, !dbg !7640
  %3 = load i64, i64* %arrayidx1, align 8, !dbg !7640
  store i64 %3, i64* %sig_hi, align 8, !dbg !7641
  %4 = load i64*, i64** %buf.addr, align 8, !dbg !7642
  %arrayidx2 = getelementptr inbounds i64, i64* %4, i64 2, !dbg !7642
  %5 = load i64, i64* %arrayidx2, align 8, !dbg !7642
  store i64 %5, i64* %image_hi, align 8, !dbg !7643
  %6 = load i64, i64* %sig_lo, align 8, !dbg !7644
  %and = and i64 %6, 4294967295, !dbg !7644
  store i64 %and, i64* %sig_lo, align 8, !dbg !7644
  %7 = load i64, i64* %sig_hi, align 8, !dbg !7645
  %and3 = and i64 %7, 4294967295, !dbg !7645
  store i64 %and3, i64* %sig_hi, align 8, !dbg !7645
  %8 = load i64, i64* %image_hi, align 8, !dbg !7646
  %and4 = and i64 %8, 4294967295, !dbg !7646
  store i64 %and4, i64* %image_hi, align 8, !dbg !7646
  %9 = load i64, i64* %image_hi, align 8, !dbg !7647
  %shr = lshr i64 %9, 15, !dbg !7648
  %and5 = and i64 %shr, 1, !dbg !7649
  %conv = trunc i64 %and5 to i8, !dbg !7650
  store i8 %conv, i8* %sign, align 1, !dbg !7651
  %10 = load i64, i64* %image_hi, align 8, !dbg !7652
  %and6 = and i64 %10, 32767, !dbg !7653
  %conv7 = trunc i64 %and6 to i32, !dbg !7652
  store i32 %conv7, i32* %exp, align 4, !dbg !7654
  %11 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !7655
  %12 = bitcast %struct.real_value* %11 to i8*, !dbg !7656
  call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 32, i1 false), !dbg !7656
  %13 = load i32, i32* %exp, align 4, !dbg !7657
  %cmp = icmp eq i32 %13, 0, !dbg !7659
  br i1 %cmp, label %if.then, label %if.else34, !dbg !7660

if.then:                                          ; preds = %entry
  %14 = load i64, i64* %sig_hi, align 8, !dbg !7661
  %tobool = icmp ne i64 %14, 0, !dbg !7661
  br i1 %tobool, label %land.lhs.true, label %lor.lhs.false, !dbg !7664

lor.lhs.false:                                    ; preds = %if.then
  %15 = load i64, i64* %sig_lo, align 8, !dbg !7665
  %tobool9 = icmp ne i64 %15, 0, !dbg !7665
  br i1 %tobool9, label %land.lhs.true, label %if.else, !dbg !7666

land.lhs.true:                                    ; preds = %lor.lhs.false, %if.then
  %16 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !7667
  %has_denorm = getelementptr inbounds %struct.real_format, %struct.real_format* %16, i32 0, i32 13, !dbg !7668
  %17 = load i8, i8* %has_denorm, align 8, !dbg !7668
  %conv10 = zext i8 %17 to i32, !dbg !7667
  %tobool11 = icmp ne i32 %conv10, 0, !dbg !7667
  br i1 %tobool11, label %if.then12, label %if.else, !dbg !7669

if.then12:                                        ; preds = %land.lhs.true
  %18 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !7670
  %19 = bitcast %struct.real_value* %18 to i32*, !dbg !7672
  %bf.load = load i32, i32* %19, align 8, !dbg !7673
  %bf.clear = and i32 %bf.load, -4, !dbg !7673
  %bf.set = or i32 %bf.clear, 1, !dbg !7673
  store i32 %bf.set, i32* %19, align 8, !dbg !7673
  %20 = load i8, i8* %sign, align 1, !dbg !7674
  %conv13 = zext i8 %20 to i32, !dbg !7674
  %21 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !7675
  %22 = bitcast %struct.real_value* %21 to i32*, !dbg !7676
  %bf.load14 = load i32, i32* %22, align 8, !dbg !7677
  %bf.value = and i32 %conv13, 1, !dbg !7677
  %bf.shl = shl i32 %bf.value, 3, !dbg !7677
  %bf.clear15 = and i32 %bf.load14, -9, !dbg !7677
  %bf.set16 = or i32 %bf.clear15, %bf.shl, !dbg !7677
  store i32 %bf.set16, i32* %22, align 8, !dbg !7677
  %23 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !7678
  %emin = getelementptr inbounds %struct.real_format, %struct.real_format* %23, i32 0, i32 5, !dbg !7678
  %24 = load i32, i32* %emin, align 4, !dbg !7678
  %and17 = and i32 %24, 67108863, !dbg !7678
  %25 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !7678
  %26 = bitcast %struct.real_value* %25 to i32*, !dbg !7678
  %bf.load18 = load i32, i32* %26, align 8, !dbg !7678
  %bf.value19 = and i32 %and17, 67108863, !dbg !7678
  %bf.shl20 = shl i32 %bf.value19, 6, !dbg !7678
  %bf.clear21 = and i32 %bf.load18, 63, !dbg !7678
  %bf.set22 = or i32 %bf.clear21, %bf.shl20, !dbg !7678
  store i32 %bf.set22, i32* %26, align 8, !dbg !7678
  %27 = load i64, i64* %sig_hi, align 8, !dbg !7679
  %shl = shl i64 %27, 31, !dbg !7681
  %shl23 = shl i64 %shl, 1, !dbg !7682
  %28 = load i64, i64* %sig_lo, align 8, !dbg !7683
  %or = or i64 %shl23, %28, !dbg !7684
  %29 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !7685
  %sig = getelementptr inbounds %struct.real_value, %struct.real_value* %29, i32 0, i32 1, !dbg !7686
  %arrayidx24 = getelementptr inbounds [3 x i64], [3 x i64]* %sig, i64 0, i64 2, !dbg !7685
  store i64 %or, i64* %arrayidx24, align 8, !dbg !7687
  %30 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !7688
  call void @normalize(%struct.real_value* %30), !dbg !7689
  br label %if.end33, !dbg !7690

if.else:                                          ; preds = %land.lhs.true, %lor.lhs.false
  %31 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !7691
  %has_signed_zero = getelementptr inbounds %struct.real_format, %struct.real_format* %31, i32 0, i32 14, !dbg !7693
  %32 = load i8, i8* %has_signed_zero, align 1, !dbg !7693
  %tobool25 = icmp ne i8 %32, 0, !dbg !7691
  br i1 %tobool25, label %if.then26, label %if.end, !dbg !7694

if.then26:                                        ; preds = %if.else
  %33 = load i8, i8* %sign, align 1, !dbg !7695
  %conv27 = zext i8 %33 to i32, !dbg !7695
  %34 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !7696
  %35 = bitcast %struct.real_value* %34 to i32*, !dbg !7697
  %bf.load28 = load i32, i32* %35, align 8, !dbg !7698
  %bf.value29 = and i32 %conv27, 1, !dbg !7698
  %bf.shl30 = shl i32 %bf.value29, 3, !dbg !7698
  %bf.clear31 = and i32 %bf.load28, -9, !dbg !7698
  %bf.set32 = or i32 %bf.clear31, %bf.shl30, !dbg !7698
  store i32 %bf.set32, i32* %35, align 8, !dbg !7698
  br label %if.end, !dbg !7696

if.end:                                           ; preds = %if.then26, %if.else
  br label %if.end33

if.end33:                                         ; preds = %if.end, %if.then12
  br label %if.end105, !dbg !7699

if.else34:                                        ; preds = %entry
  %36 = load i32, i32* %exp, align 4, !dbg !7700
  %cmp35 = icmp eq i32 %36, 32767, !dbg !7702
  br i1 %cmp35, label %land.lhs.true37, label %if.else83, !dbg !7703

land.lhs.true37:                                  ; preds = %if.else34
  %37 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !7704
  %has_nans = getelementptr inbounds %struct.real_format, %struct.real_format* %37, i32 0, i32 11, !dbg !7705
  %38 = load i8, i8* %has_nans, align 2, !dbg !7705
  %conv38 = zext i8 %38 to i32, !dbg !7704
  %tobool39 = icmp ne i32 %conv38, 0, !dbg !7704
  br i1 %tobool39, label %if.then43, label %lor.lhs.false40, !dbg !7706

lor.lhs.false40:                                  ; preds = %land.lhs.true37
  %39 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !7707
  %has_inf = getelementptr inbounds %struct.real_format, %struct.real_format* %39, i32 0, i32 12, !dbg !7708
  %40 = load i8, i8* %has_inf, align 1, !dbg !7708
  %conv41 = zext i8 %40 to i32, !dbg !7707
  %tobool42 = icmp ne i32 %conv41, 0, !dbg !7707
  br i1 %tobool42, label %if.then43, label %if.else83, !dbg !7709

if.then43:                                        ; preds = %lor.lhs.false40, %land.lhs.true37
  %41 = load i64, i64* %sig_hi, align 8, !dbg !7710
  %and44 = and i64 %41, 2147483647, !dbg !7710
  store i64 %and44, i64* %sig_hi, align 8, !dbg !7710
  %42 = load i64, i64* %sig_hi, align 8, !dbg !7712
  %tobool45 = icmp ne i64 %42, 0, !dbg !7712
  br i1 %tobool45, label %if.then48, label %lor.lhs.false46, !dbg !7714

lor.lhs.false46:                                  ; preds = %if.then43
  %43 = load i64, i64* %sig_lo, align 8, !dbg !7715
  %tobool47 = icmp ne i64 %43, 0, !dbg !7715
  br i1 %tobool47, label %if.then48, label %if.else72, !dbg !7716

if.then48:                                        ; preds = %lor.lhs.false46, %if.then43
  %44 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !7717
  %45 = bitcast %struct.real_value* %44 to i32*, !dbg !7719
  %bf.load49 = load i32, i32* %45, align 8, !dbg !7720
  %bf.clear50 = and i32 %bf.load49, -4, !dbg !7720
  %bf.set51 = or i32 %bf.clear50, 3, !dbg !7720
  store i32 %bf.set51, i32* %45, align 8, !dbg !7720
  %46 = load i8, i8* %sign, align 1, !dbg !7721
  %conv52 = zext i8 %46 to i32, !dbg !7721
  %47 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !7722
  %48 = bitcast %struct.real_value* %47 to i32*, !dbg !7723
  %bf.load53 = load i32, i32* %48, align 8, !dbg !7724
  %bf.value54 = and i32 %conv52, 1, !dbg !7724
  %bf.shl55 = shl i32 %bf.value54, 3, !dbg !7724
  %bf.clear56 = and i32 %bf.load53, -9, !dbg !7724
  %bf.set57 = or i32 %bf.clear56, %bf.shl55, !dbg !7724
  store i32 %bf.set57, i32* %48, align 8, !dbg !7724
  %49 = load i64, i64* %sig_hi, align 8, !dbg !7725
  %shr58 = lshr i64 %49, 30, !dbg !7726
  %and59 = and i64 %shr58, 1, !dbg !7727
  %50 = load %struct.real_format*, %struct.real_format** %fmt.addr, align 8, !dbg !7728
  %qnan_msb_set = getelementptr inbounds %struct.real_format, %struct.real_format* %50, i32 0, i32 15, !dbg !7729
  %51 = load i8, i8* %qnan_msb_set, align 2, !dbg !7729
  %conv60 = zext i8 %51 to i64, !dbg !7728
  %xor = xor i64 %and59, %conv60, !dbg !7730
  %conv61 = trunc i64 %xor to i32, !dbg !7731
  %52 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !7732
  %53 = bitcast %struct.real_value* %52 to i32*, !dbg !7733
  %bf.load62 = load i32, i32* %53, align 8, !dbg !7734
  %bf.value63 = and i32 %conv61, 1, !dbg !7734
  %bf.shl64 = shl i32 %bf.value63, 4, !dbg !7734
  %bf.clear65 = and i32 %bf.load62, -17, !dbg !7734
  %bf.set66 = or i32 %bf.clear65, %bf.shl64, !dbg !7734
  store i32 %bf.set66, i32* %53, align 8, !dbg !7734
  %54 = load i64, i64* %sig_hi, align 8, !dbg !7735
  %shl67 = shl i64 %54, 31, !dbg !7737
  %shl68 = shl i64 %shl67, 1, !dbg !7738
  %55 = load i64, i64* %sig_lo, align 8, !dbg !7739
  %or69 = or i64 %shl68, %55, !dbg !7740
  %56 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !7741
  %sig70 = getelementptr inbounds %struct.real_value, %struct.real_value* %56, i32 0, i32 1, !dbg !7742
  %arrayidx71 = getelementptr inbounds [3 x i64], [3 x i64]* %sig70, i64 0, i64 2, !dbg !7741
  store i64 %or69, i64* %arrayidx71, align 8, !dbg !7743
  br label %if.end82, !dbg !7744

if.else72:                                        ; preds = %lor.lhs.false46
  %57 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !7745
  %58 = bitcast %struct.real_value* %57 to i32*, !dbg !7747
  %bf.load73 = load i32, i32* %58, align 8, !dbg !7748
  %bf.clear74 = and i32 %bf.load73, -4, !dbg !7748
  %bf.set75 = or i32 %bf.clear74, 2, !dbg !7748
  store i32 %bf.set75, i32* %58, align 8, !dbg !7748
  %59 = load i8, i8* %sign, align 1, !dbg !7749
  %conv76 = zext i8 %59 to i32, !dbg !7749
  %60 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !7750
  %61 = bitcast %struct.real_value* %60 to i32*, !dbg !7751
  %bf.load77 = load i32, i32* %61, align 8, !dbg !7752
  %bf.value78 = and i32 %conv76, 1, !dbg !7752
  %bf.shl79 = shl i32 %bf.value78, 3, !dbg !7752
  %bf.clear80 = and i32 %bf.load77, -9, !dbg !7752
  %bf.set81 = or i32 %bf.clear80, %bf.shl79, !dbg !7752
  store i32 %bf.set81, i32* %61, align 8, !dbg !7752
  br label %if.end82

if.end82:                                         ; preds = %if.else72, %if.then48
  br label %if.end104, !dbg !7753

if.else83:                                        ; preds = %lor.lhs.false40, %if.else34
  %62 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !7754
  %63 = bitcast %struct.real_value* %62 to i32*, !dbg !7756
  %bf.load84 = load i32, i32* %63, align 8, !dbg !7757
  %bf.clear85 = and i32 %bf.load84, -4, !dbg !7757
  %bf.set86 = or i32 %bf.clear85, 1, !dbg !7757
  store i32 %bf.set86, i32* %63, align 8, !dbg !7757
  %64 = load i8, i8* %sign, align 1, !dbg !7758
  %conv87 = zext i8 %64 to i32, !dbg !7758
  %65 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !7759
  %66 = bitcast %struct.real_value* %65 to i32*, !dbg !7760
  %bf.load88 = load i32, i32* %66, align 8, !dbg !7761
  %bf.value89 = and i32 %conv87, 1, !dbg !7761
  %bf.shl90 = shl i32 %bf.value89, 3, !dbg !7761
  %bf.clear91 = and i32 %bf.load88, -9, !dbg !7761
  %bf.set92 = or i32 %bf.clear91, %bf.shl90, !dbg !7761
  store i32 %bf.set92, i32* %66, align 8, !dbg !7761
  %67 = load i32, i32* %exp, align 4, !dbg !7762
  %sub = sub nsw i32 %67, 16383, !dbg !7762
  %add = add nsw i32 %sub, 1, !dbg !7762
  %and93 = and i32 %add, 67108863, !dbg !7762
  %68 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !7762
  %69 = bitcast %struct.real_value* %68 to i32*, !dbg !7762
  %bf.load94 = load i32, i32* %69, align 8, !dbg !7762
  %bf.value95 = and i32 %and93, 67108863, !dbg !7762
  %bf.shl96 = shl i32 %bf.value95, 6, !dbg !7762
  %bf.clear97 = and i32 %bf.load94, 63, !dbg !7762
  %bf.set98 = or i32 %bf.clear97, %bf.shl96, !dbg !7762
  store i32 %bf.set98, i32* %69, align 8, !dbg !7762
  %70 = load i64, i64* %sig_hi, align 8, !dbg !7763
  %shl99 = shl i64 %70, 31, !dbg !7765
  %shl100 = shl i64 %shl99, 1, !dbg !7766
  %71 = load i64, i64* %sig_lo, align 8, !dbg !7767
  %or101 = or i64 %shl100, %71, !dbg !7768
  %72 = load %struct.real_value*, %struct.real_value** %r.addr, align 8, !dbg !7769
  %sig102 = getelementptr inbounds %struct.real_value, %struct.real_value* %72, i32 0, i32 1, !dbg !7770
  %arrayidx103 = getelementptr inbounds [3 x i64], [3 x i64]* %sig102, i64 0, i64 2, !dbg !7769
  store i64 %or101, i64* %arrayidx103, align 8, !dbg !7771
  br label %if.end104

if.end104:                                        ; preds = %if.else83, %if.end82
  br label %if.end105

if.end105:                                        ; preds = %if.end104, %if.end33
  ret void, !dbg !7772
}

declare dso_local void @encode_decimal32(%struct.real_format*, i64*, %struct.real_value*) #2

declare dso_local void @decode_decimal32(%struct.real_format*, %struct.real_value*, i64*) #2

declare dso_local void @encode_decimal64(%struct.real_format*, i64*, %struct.real_value*) #2

declare dso_local void @decode_decimal64(%struct.real_format*, %struct.real_value*, i64*) #2

declare dso_local void @encode_decimal128(%struct.real_format*, i64*, %struct.real_value*) #2

declare dso_local void @decode_decimal128(%struct.real_format*, %struct.real_value*, i64*) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!23}
!llvm.module.flags = !{!514, !515, !516}
!llvm.ident = !{!517}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "value", scope: !2, file: !3, line: 2342, type: !8, isLocal: true, isDefinition: true)
!2 = distinct !DISubprogram(name: "dconst_e_ptr", scope: !3, file: !3, line: 2340, type: !4, scopeLine: 2341, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !406)
!3 = !DIFile(filename: "real.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !DISubroutineType(types: !5)
!5 = !{!6}
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!7 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !8)
!8 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !9, line: 52, size: 256, elements: !10)
!9 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!10 = !{!11, !13, !14, !15, !16, !17, !18}
!11 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !8, file: !9, line: 56, baseType: !12, size: 2, flags: DIFlagBitField, extraData: i64 0)
!12 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!13 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !8, file: !9, line: 57, baseType: !12, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!14 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !8, file: !9, line: 58, baseType: !12, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!15 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !8, file: !9, line: 59, baseType: !12, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!16 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !8, file: !9, line: 60, baseType: !12, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!17 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !8, file: !9, line: 61, baseType: !12, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!18 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !8, file: !9, line: 62, baseType: !19, size: 192, offset: 64)
!19 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 192, elements: !21)
!20 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!21 = !{!22}
!22 = !DISubrange(count: 3)
!23 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !24, retainedTypes: !397, globals: !402, splitDebugInlining: false, nameTableKind: None)
!24 = !{!25, !220, !226, !354, !376}
!25 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !26, line: 39, baseType: !12, size: 32, elements: !27)
!26 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!27 = !{!28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133, !134, !135, !136, !137, !138, !139, !140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219}
!28 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!29 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!30 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!31 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!32 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!33 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!34 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!35 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!36 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!37 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!38 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!39 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!40 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!41 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!42 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!43 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!44 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!45 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!46 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!47 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!48 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!49 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!50 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!51 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!52 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!53 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!54 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!55 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!56 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!57 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!58 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!59 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!60 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!61 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!62 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!63 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!64 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!65 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!66 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!67 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!68 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!69 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!70 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!71 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!72 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!73 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!74 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!75 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!76 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!77 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!78 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!79 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!80 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!81 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!82 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!83 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!84 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!85 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!86 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!87 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!88 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!89 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!90 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!91 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!92 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!93 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!94 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!95 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!96 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!97 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!98 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!99 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!100 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!101 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!102 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!103 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!104 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!105 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!106 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!107 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!108 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!109 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!110 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!111 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!112 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!113 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!114 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!115 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!116 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!117 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!118 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!119 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!120 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!121 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!122 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!123 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!124 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!125 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!126 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!127 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!128 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!129 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!130 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!131 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!132 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!133 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!134 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!135 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!136 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!137 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!138 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!139 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!140 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!141 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!142 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!143 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!144 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!145 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!146 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!147 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!148 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!149 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!150 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!151 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!152 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!153 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!154 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!155 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!156 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!157 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!158 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!159 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!160 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!161 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!162 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!163 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!164 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!165 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!166 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!167 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!168 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!169 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!170 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!171 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!172 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!173 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!174 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!175 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!176 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!177 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!178 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!179 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!180 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!181 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!182 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!183 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!184 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!185 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!186 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!187 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!188 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!189 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!190 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!191 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!192 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!193 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!194 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!195 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!196 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!197 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!198 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!199 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!200 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!201 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!202 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!203 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!204 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!205 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!206 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!207 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!208 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!209 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!210 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!211 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!212 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!213 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!214 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!215 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!216 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!217 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!218 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!219 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!220 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "real_value_class", file: !9, line: 39, baseType: !12, size: 32, elements: !221)
!221 = !{!222, !223, !224, !225}
!222 = !DIEnumerator(name: "rvc_zero", value: 0, isUnsigned: true)
!223 = !DIEnumerator(name: "rvc_normal", value: 1, isUnsigned: true)
!224 = !DIEnumerator(name: "rvc_inf", value: 2, isUnsigned: true)
!225 = !DIEnumerator(name: "rvc_nan", value: 3, isUnsigned: true)
!226 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !227, line: 7, baseType: !12, size: 32, elements: !228)
!227 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!228 = !{!229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !334, !335, !336, !337, !338, !339, !340, !341, !342, !343, !344, !345, !346, !347, !348, !349, !350, !351, !352, !353}
!229 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!230 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!231 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!232 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!233 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!234 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!235 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!236 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!237 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!238 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!239 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!240 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!241 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!242 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!243 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!244 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!245 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!246 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!247 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!248 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!249 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!250 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!251 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!252 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!253 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!254 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!255 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!256 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!257 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!258 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!259 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!260 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!261 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!262 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!263 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!264 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!265 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!266 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!267 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!268 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!269 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!270 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!271 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!272 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!273 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!274 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!275 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!276 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!277 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!278 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!279 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!280 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!281 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!282 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!283 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!284 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!285 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!286 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!287 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!288 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!289 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!290 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!291 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!292 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!293 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!294 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!295 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!296 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!297 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!298 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!299 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!300 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!301 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!302 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!303 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!304 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!305 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!306 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!307 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!308 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!309 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!310 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!311 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!312 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!313 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!314 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!315 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!316 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!317 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!318 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!319 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!320 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!321 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!322 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!323 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!324 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!325 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!326 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!327 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!328 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!329 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!330 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!331 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!332 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!333 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!334 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!335 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!336 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!337 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!338 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!339 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!340 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!341 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!342 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!343 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!344 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!345 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!346 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!347 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!348 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!349 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!350 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!351 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!352 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!353 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!354 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "mode_class", file: !355, line: 36, baseType: !12, size: 32, elements: !356)
!355 = !DIFile(filename: "./machmode.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!356 = !{!357, !358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375}
!357 = !DIEnumerator(name: "MODE_RANDOM", value: 0, isUnsigned: true)
!358 = !DIEnumerator(name: "MODE_CC", value: 1, isUnsigned: true)
!359 = !DIEnumerator(name: "MODE_INT", value: 2, isUnsigned: true)
!360 = !DIEnumerator(name: "MODE_PARTIAL_INT", value: 3, isUnsigned: true)
!361 = !DIEnumerator(name: "MODE_FRACT", value: 4, isUnsigned: true)
!362 = !DIEnumerator(name: "MODE_UFRACT", value: 5, isUnsigned: true)
!363 = !DIEnumerator(name: "MODE_ACCUM", value: 6, isUnsigned: true)
!364 = !DIEnumerator(name: "MODE_UACCUM", value: 7, isUnsigned: true)
!365 = !DIEnumerator(name: "MODE_FLOAT", value: 8, isUnsigned: true)
!366 = !DIEnumerator(name: "MODE_DECIMAL_FLOAT", value: 9, isUnsigned: true)
!367 = !DIEnumerator(name: "MODE_COMPLEX_INT", value: 10, isUnsigned: true)
!368 = !DIEnumerator(name: "MODE_COMPLEX_FLOAT", value: 11, isUnsigned: true)
!369 = !DIEnumerator(name: "MODE_VECTOR_INT", value: 12, isUnsigned: true)
!370 = !DIEnumerator(name: "MODE_VECTOR_FRACT", value: 13, isUnsigned: true)
!371 = !DIEnumerator(name: "MODE_VECTOR_UFRACT", value: 14, isUnsigned: true)
!372 = !DIEnumerator(name: "MODE_VECTOR_ACCUM", value: 15, isUnsigned: true)
!373 = !DIEnumerator(name: "MODE_VECTOR_UACCUM", value: 16, isUnsigned: true)
!374 = !DIEnumerator(name: "MODE_VECTOR_FLOAT", value: 17, isUnsigned: true)
!375 = !DIEnumerator(name: "MAX_MODE_CLASS", value: 18, isUnsigned: true)
!376 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !377, line: 57, baseType: !12, size: 32, elements: !378)
!377 = !DIFile(filename: "./include/safe-ctype.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!378 = !{!379, !380, !381, !382, !383, !384, !385, !386, !387, !388, !389, !390, !391, !392, !393, !394, !395, !396}
!379 = !DIEnumerator(name: "_sch_isblank", value: 1, isUnsigned: true)
!380 = !DIEnumerator(name: "_sch_iscntrl", value: 2, isUnsigned: true)
!381 = !DIEnumerator(name: "_sch_isdigit", value: 4, isUnsigned: true)
!382 = !DIEnumerator(name: "_sch_islower", value: 8, isUnsigned: true)
!383 = !DIEnumerator(name: "_sch_isprint", value: 16, isUnsigned: true)
!384 = !DIEnumerator(name: "_sch_ispunct", value: 32, isUnsigned: true)
!385 = !DIEnumerator(name: "_sch_isspace", value: 64, isUnsigned: true)
!386 = !DIEnumerator(name: "_sch_isupper", value: 128, isUnsigned: true)
!387 = !DIEnumerator(name: "_sch_isxdigit", value: 256, isUnsigned: true)
!388 = !DIEnumerator(name: "_sch_isidst", value: 512, isUnsigned: true)
!389 = !DIEnumerator(name: "_sch_isvsp", value: 1024, isUnsigned: true)
!390 = !DIEnumerator(name: "_sch_isnvsp", value: 2048, isUnsigned: true)
!391 = !DIEnumerator(name: "_sch_isalpha", value: 136, isUnsigned: true)
!392 = !DIEnumerator(name: "_sch_isalnum", value: 140, isUnsigned: true)
!393 = !DIEnumerator(name: "_sch_isidnum", value: 516, isUnsigned: true)
!394 = !DIEnumerator(name: "_sch_isgraph", value: 172, isUnsigned: true)
!395 = !DIEnumerator(name: "_sch_iscppsp", value: 3072, isUnsigned: true)
!396 = !DIEnumerator(name: "_sch_isbasic", value: 3088, isUnsigned: true)
!397 = !{!25, !12, !398, !20, !354, !226, !399, !400, !401}
!398 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!399 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!400 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!401 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!402 = !{!0, !403, !407, !410, !444, !446, !448, !450, !452, !454, !456, !458, !460, !462, !464, !466, !468, !470, !472, !474, !476, !478, !480, !482, !484, !486, !488, !490, !495, !497, !505, !508}
!403 = !DIGlobalVariableExpression(var: !404, expr: !DIExpression())
!404 = distinct !DIGlobalVariable(name: "value", scope: !405, file: !3, line: 2390, type: !8, isLocal: true, isDefinition: true)
!405 = distinct !DISubprogram(name: "dconst_third_ptr", scope: !3, file: !3, line: 2388, type: !4, scopeLine: 2389, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !406)
!406 = !{}
!407 = !DIGlobalVariableExpression(var: !408, expr: !DIExpression())
!408 = distinct !DIGlobalVariable(name: "value", scope: !409, file: !3, line: 2406, type: !8, isLocal: true, isDefinition: true)
!409 = distinct !DISubprogram(name: "dconst_sqrt2_ptr", scope: !3, file: !3, line: 2404, type: !4, scopeLine: 2405, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !406)
!410 = !DIGlobalVariableExpression(var: !411, expr: !DIExpression())
!411 = distinct !DIGlobalVariable(name: "ieee_single_format", scope: !23, file: !3, line: 3035, type: !412, isLocal: false, isDefinition: true)
!412 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !413)
!413 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_format", file: !9, line: 124, size: 448, elements: !414)
!414 = !{!415, !422, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443}
!415 = !DIDerivedType(tag: DW_TAG_member, name: "encode", scope: !413, file: !9, line: 127, baseType: !416, size: 64)
!416 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !417, size: 64)
!417 = !DISubroutineType(types: !418)
!418 = !{null, !419, !420, !6}
!419 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !412, size: 64)
!420 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !421, size: 64)
!421 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!422 = !DIDerivedType(tag: DW_TAG_member, name: "decode", scope: !413, file: !9, line: 129, baseType: !423, size: 64, offset: 64)
!423 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !424, size: 64)
!424 = !DISubroutineType(types: !425)
!425 = !{null, !419, !426, !427}
!426 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8, size: 64)
!427 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !428, size: 64)
!428 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !421)
!429 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !413, file: !9, line: 133, baseType: !398, size: 32, offset: 128)
!430 = !DIDerivedType(tag: DW_TAG_member, name: "p", scope: !413, file: !9, line: 136, baseType: !398, size: 32, offset: 160)
!431 = !DIDerivedType(tag: DW_TAG_member, name: "pnan", scope: !413, file: !9, line: 139, baseType: !398, size: 32, offset: 192)
!432 = !DIDerivedType(tag: DW_TAG_member, name: "emin", scope: !413, file: !9, line: 142, baseType: !398, size: 32, offset: 224)
!433 = !DIDerivedType(tag: DW_TAG_member, name: "emax", scope: !413, file: !9, line: 145, baseType: !398, size: 32, offset: 256)
!434 = !DIDerivedType(tag: DW_TAG_member, name: "signbit_ro", scope: !413, file: !9, line: 149, baseType: !398, size: 32, offset: 288)
!435 = !DIDerivedType(tag: DW_TAG_member, name: "signbit_rw", scope: !413, file: !9, line: 153, baseType: !398, size: 32, offset: 320)
!436 = !DIDerivedType(tag: DW_TAG_member, name: "round_towards_zero", scope: !413, file: !9, line: 156, baseType: !399, size: 8, offset: 352)
!437 = !DIDerivedType(tag: DW_TAG_member, name: "has_sign_dependent_rounding", scope: !413, file: !9, line: 157, baseType: !399, size: 8, offset: 360)
!438 = !DIDerivedType(tag: DW_TAG_member, name: "has_nans", scope: !413, file: !9, line: 160, baseType: !399, size: 8, offset: 368)
!439 = !DIDerivedType(tag: DW_TAG_member, name: "has_inf", scope: !413, file: !9, line: 161, baseType: !399, size: 8, offset: 376)
!440 = !DIDerivedType(tag: DW_TAG_member, name: "has_denorm", scope: !413, file: !9, line: 162, baseType: !399, size: 8, offset: 384)
!441 = !DIDerivedType(tag: DW_TAG_member, name: "has_signed_zero", scope: !413, file: !9, line: 163, baseType: !399, size: 8, offset: 392)
!442 = !DIDerivedType(tag: DW_TAG_member, name: "qnan_msb_set", scope: !413, file: !9, line: 164, baseType: !399, size: 8, offset: 400)
!443 = !DIDerivedType(tag: DW_TAG_member, name: "canonical_nan_lsbs_set", scope: !413, file: !9, line: 165, baseType: !399, size: 8, offset: 408)
!444 = !DIGlobalVariableExpression(var: !445, expr: !DIExpression())
!445 = distinct !DIGlobalVariable(name: "mips_single_format", scope: !23, file: !3, line: 3056, type: !412, isLocal: false, isDefinition: true)
!446 = !DIGlobalVariableExpression(var: !447, expr: !DIExpression())
!447 = distinct !DIGlobalVariable(name: "motorola_single_format", scope: !23, file: !3, line: 3077, type: !412, isLocal: false, isDefinition: true)
!448 = !DIGlobalVariableExpression(var: !449, expr: !DIExpression())
!449 = distinct !DIGlobalVariable(name: "spu_single_format", scope: !23, file: !3, line: 3109, type: !412, isLocal: false, isDefinition: true)
!450 = !DIGlobalVariableExpression(var: !451, expr: !DIExpression())
!451 = distinct !DIGlobalVariable(name: "ieee_double_format", scope: !23, file: !3, line: 3318, type: !412, isLocal: false, isDefinition: true)
!452 = !DIGlobalVariableExpression(var: !453, expr: !DIExpression())
!453 = distinct !DIGlobalVariable(name: "mips_double_format", scope: !23, file: !3, line: 3339, type: !412, isLocal: false, isDefinition: true)
!454 = !DIGlobalVariableExpression(var: !455, expr: !DIExpression())
!455 = distinct !DIGlobalVariable(name: "motorola_double_format", scope: !23, file: !3, line: 3360, type: !412, isLocal: false, isDefinition: true)
!456 = !DIGlobalVariableExpression(var: !457, expr: !DIExpression())
!457 = distinct !DIGlobalVariable(name: "ieee_extended_motorola_format", scope: !23, file: !3, line: 3699, type: !412, isLocal: false, isDefinition: true)
!458 = !DIGlobalVariableExpression(var: !459, expr: !DIExpression())
!459 = distinct !DIGlobalVariable(name: "ieee_extended_intel_96_format", scope: !23, file: !3, line: 3720, type: !412, isLocal: false, isDefinition: true)
!460 = !DIGlobalVariableExpression(var: !461, expr: !DIExpression())
!461 = distinct !DIGlobalVariable(name: "ieee_extended_intel_128_format", scope: !23, file: !3, line: 3741, type: !412, isLocal: false, isDefinition: true)
!462 = !DIGlobalVariableExpression(var: !463, expr: !DIExpression())
!463 = distinct !DIGlobalVariable(name: "ieee_extended_intel_96_round_53_format", scope: !23, file: !3, line: 3764, type: !412, isLocal: false, isDefinition: true)
!464 = !DIGlobalVariableExpression(var: !465, expr: !DIExpression())
!465 = distinct !DIGlobalVariable(name: "ibm_extended_format", scope: !23, file: !3, line: 3852, type: !412, isLocal: false, isDefinition: true)
!466 = !DIGlobalVariableExpression(var: !467, expr: !DIExpression())
!467 = distinct !DIGlobalVariable(name: "mips_extended_format", scope: !23, file: !3, line: 3873, type: !412, isLocal: false, isDefinition: true)
!468 = !DIGlobalVariableExpression(var: !469, expr: !DIExpression())
!469 = distinct !DIGlobalVariable(name: "ieee_quad_format", scope: !23, file: !3, line: 4136, type: !412, isLocal: false, isDefinition: true)
!470 = !DIGlobalVariableExpression(var: !471, expr: !DIExpression())
!471 = distinct !DIGlobalVariable(name: "mips_quad_format", scope: !23, file: !3, line: 4157, type: !412, isLocal: false, isDefinition: true)
!472 = !DIGlobalVariableExpression(var: !473, expr: !DIExpression())
!473 = distinct !DIGlobalVariable(name: "vax_f_format", scope: !23, file: !3, line: 4457, type: !412, isLocal: false, isDefinition: true)
!474 = !DIGlobalVariableExpression(var: !475, expr: !DIExpression())
!475 = distinct !DIGlobalVariable(name: "vax_d_format", scope: !23, file: !3, line: 4478, type: !412, isLocal: false, isDefinition: true)
!476 = !DIGlobalVariableExpression(var: !477, expr: !DIExpression())
!477 = distinct !DIGlobalVariable(name: "vax_g_format", scope: !23, file: !3, line: 4499, type: !412, isLocal: false, isDefinition: true)
!478 = !DIGlobalVariableExpression(var: !479, expr: !DIExpression())
!479 = distinct !DIGlobalVariable(name: "decimal_single_format", scope: !23, file: !3, line: 4575, type: !412, isLocal: false, isDefinition: true)
!480 = !DIGlobalVariableExpression(var: !481, expr: !DIExpression())
!481 = distinct !DIGlobalVariable(name: "decimal_double_format", scope: !23, file: !3, line: 4597, type: !412, isLocal: false, isDefinition: true)
!482 = !DIGlobalVariableExpression(var: !483, expr: !DIExpression())
!483 = distinct !DIGlobalVariable(name: "decimal_quad_format", scope: !23, file: !3, line: 4619, type: !412, isLocal: false, isDefinition: true)
!484 = !DIGlobalVariableExpression(var: !485, expr: !DIExpression())
!485 = distinct !DIGlobalVariable(name: "ieee_half_format", scope: !23, file: !3, line: 4756, type: !412, isLocal: false, isDefinition: true)
!486 = !DIGlobalVariableExpression(var: !487, expr: !DIExpression())
!487 = distinct !DIGlobalVariable(name: "arm_half_format", scope: !23, file: !3, line: 4780, type: !412, isLocal: false, isDefinition: true)
!488 = !DIGlobalVariableExpression(var: !489, expr: !DIExpression())
!489 = distinct !DIGlobalVariable(name: "real_internal_format", scope: !23, file: !3, line: 4825, type: !412, isLocal: false, isDefinition: true)
!490 = !DIGlobalVariableExpression(var: !491, expr: !DIExpression())
!491 = distinct !DIGlobalVariable(name: "halfthree", scope: !492, file: !3, line: 4856, type: !8, isLocal: true, isDefinition: true)
!492 = distinct !DISubprogram(name: "real_sqrt", scope: !3, file: !3, line: 4853, type: !493, scopeLine: 4855, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !406)
!493 = !DISubroutineType(types: !494)
!494 = !{!399, !426, !226, !6}
!495 = !DIGlobalVariableExpression(var: !496, expr: !DIExpression())
!496 = distinct !DIGlobalVariable(name: "init", scope: !492, file: !3, line: 4857, type: !399, isLocal: true, isDefinition: true)
!497 = !DIGlobalVariableExpression(var: !498, expr: !DIExpression())
!498 = distinct !DIGlobalVariable(name: "tens", scope: !499, file: !3, line: 2252, type: !502, isLocal: true, isDefinition: true)
!499 = distinct !DISubprogram(name: "ten_to_ptwo", scope: !3, file: !3, line: 2250, type: !500, scopeLine: 2251, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!500 = !DISubroutineType(types: !501)
!501 = !{!6, !398}
!502 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 6656, elements: !503)
!503 = !{!504}
!504 = !DISubrange(count: 26)
!505 = !DIGlobalVariableExpression(var: !506, expr: !DIExpression())
!506 = distinct !DIGlobalVariable(name: "tens", scope: !507, file: !3, line: 2284, type: !502, isLocal: true, isDefinition: true)
!507 = distinct !DISubprogram(name: "ten_to_mptwo", scope: !3, file: !3, line: 2282, type: !500, scopeLine: 2283, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!508 = !DIGlobalVariableExpression(var: !509, expr: !DIExpression())
!509 = distinct !DIGlobalVariable(name: "num", scope: !510, file: !3, line: 2300, type: !511, isLocal: true, isDefinition: true)
!510 = distinct !DISubprogram(name: "real_digit", scope: !3, file: !3, line: 2298, type: !500, scopeLine: 2299, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!511 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 2560, elements: !512)
!512 = !{!513}
!513 = !DISubrange(count: 10)
!514 = !{i32 7, !"Dwarf Version", i32 4}
!515 = !{i32 2, !"Debug Info Version", i32 3}
!516 = !{i32 1, !"wchar_size", i32 4}
!517 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!518 = distinct !DISubprogram(name: "real_arithmetic", scope: !3, file: !3, line: 1000, type: !519, scopeLine: 1002, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !406)
!519 = !DISubroutineType(types: !520)
!520 = !{!399, !426, !398, !6, !6}
!521 = !DILocalVariable(name: "r", arg: 1, scope: !518, file: !3, line: 1000, type: !426)
!522 = !DILocation(line: 1000, column: 35, scope: !518)
!523 = !DILocalVariable(name: "icode", arg: 2, scope: !518, file: !3, line: 1000, type: !398)
!524 = !DILocation(line: 1000, column: 42, scope: !518)
!525 = !DILocalVariable(name: "op0", arg: 3, scope: !518, file: !3, line: 1000, type: !6)
!526 = !DILocation(line: 1000, column: 72, scope: !518)
!527 = !DILocalVariable(name: "op1", arg: 4, scope: !518, file: !3, line: 1001, type: !6)
!528 = !DILocation(line: 1001, column: 27, scope: !518)
!529 = !DILocalVariable(name: "code", scope: !518, file: !3, line: 1003, type: !25)
!530 = !DILocation(line: 1003, column: 18, scope: !518)
!531 = !DILocation(line: 1003, column: 42, scope: !518)
!532 = !DILocation(line: 1005, column: 7, scope: !533)
!533 = distinct !DILexicalBlock(scope: !518, file: !3, line: 1005, column: 7)
!534 = !DILocation(line: 1005, column: 12, scope: !533)
!535 = !DILocation(line: 1005, column: 20, scope: !533)
!536 = !DILocation(line: 1005, column: 24, scope: !533)
!537 = !DILocation(line: 1005, column: 28, scope: !533)
!538 = !DILocation(line: 1005, column: 31, scope: !533)
!539 = !DILocation(line: 1005, column: 36, scope: !533)
!540 = !DILocation(line: 1005, column: 7, scope: !518)
!541 = !DILocation(line: 1006, column: 37, scope: !533)
!542 = !DILocation(line: 1006, column: 40, scope: !533)
!543 = !DILocation(line: 1006, column: 46, scope: !533)
!544 = !DILocation(line: 1006, column: 51, scope: !533)
!545 = !DILocation(line: 1006, column: 12, scope: !533)
!546 = !DILocation(line: 1006, column: 5, scope: !533)
!547 = !DILocation(line: 1008, column: 11, scope: !518)
!548 = !DILocation(line: 1008, column: 3, scope: !518)
!549 = !DILocation(line: 1011, column: 22, scope: !550)
!550 = distinct !DILexicalBlock(scope: !518, file: !3, line: 1009, column: 5)
!551 = !DILocation(line: 1011, column: 25, scope: !550)
!552 = !DILocation(line: 1011, column: 30, scope: !550)
!553 = !DILocation(line: 1011, column: 14, scope: !550)
!554 = !DILocation(line: 1011, column: 7, scope: !550)
!555 = !DILocation(line: 1014, column: 22, scope: !550)
!556 = !DILocation(line: 1014, column: 25, scope: !550)
!557 = !DILocation(line: 1014, column: 30, scope: !550)
!558 = !DILocation(line: 1014, column: 14, scope: !550)
!559 = !DILocation(line: 1014, column: 7, scope: !550)
!560 = !DILocation(line: 1017, column: 27, scope: !550)
!561 = !DILocation(line: 1017, column: 30, scope: !550)
!562 = !DILocation(line: 1017, column: 35, scope: !550)
!563 = !DILocation(line: 1017, column: 14, scope: !550)
!564 = !DILocation(line: 1017, column: 7, scope: !550)
!565 = !DILocation(line: 1020, column: 25, scope: !550)
!566 = !DILocation(line: 1020, column: 28, scope: !550)
!567 = !DILocation(line: 1020, column: 33, scope: !550)
!568 = !DILocation(line: 1020, column: 14, scope: !550)
!569 = !DILocation(line: 1020, column: 7, scope: !550)
!570 = !DILocation(line: 1023, column: 11, scope: !571)
!571 = distinct !DILexicalBlock(scope: !550, file: !3, line: 1023, column: 11)
!572 = !DILocation(line: 1023, column: 16, scope: !571)
!573 = !DILocation(line: 1023, column: 19, scope: !571)
!574 = !DILocation(line: 1023, column: 11, scope: !550)
!575 = !DILocation(line: 1024, column: 3, scope: !571)
!576 = !DILocation(line: 1024, column: 8, scope: !571)
!577 = !DILocation(line: 1024, column: 7, scope: !571)
!578 = !DILocation(line: 1024, column: 2, scope: !571)
!579 = !DILocation(line: 1025, column: 28, scope: !580)
!580 = distinct !DILexicalBlock(scope: !571, file: !3, line: 1025, column: 16)
!581 = !DILocation(line: 1025, column: 33, scope: !580)
!582 = !DILocation(line: 1025, column: 16, scope: !580)
!583 = !DILocation(line: 1025, column: 42, scope: !580)
!584 = !DILocation(line: 1025, column: 16, scope: !571)
!585 = !DILocation(line: 1026, column: 3, scope: !580)
!586 = !DILocation(line: 1026, column: 8, scope: !580)
!587 = !DILocation(line: 1026, column: 7, scope: !580)
!588 = !DILocation(line: 1026, column: 2, scope: !580)
!589 = !DILocation(line: 1028, column: 3, scope: !580)
!590 = !DILocation(line: 1028, column: 8, scope: !580)
!591 = !DILocation(line: 1028, column: 7, scope: !580)
!592 = !DILocation(line: 1029, column: 7, scope: !550)
!593 = !DILocation(line: 1032, column: 11, scope: !594)
!594 = distinct !DILexicalBlock(scope: !550, file: !3, line: 1032, column: 11)
!595 = !DILocation(line: 1032, column: 16, scope: !594)
!596 = !DILocation(line: 1032, column: 19, scope: !594)
!597 = !DILocation(line: 1032, column: 11, scope: !550)
!598 = !DILocation(line: 1033, column: 3, scope: !594)
!599 = !DILocation(line: 1033, column: 8, scope: !594)
!600 = !DILocation(line: 1033, column: 7, scope: !594)
!601 = !DILocation(line: 1033, column: 2, scope: !594)
!602 = !DILocation(line: 1034, column: 28, scope: !603)
!603 = distinct !DILexicalBlock(scope: !594, file: !3, line: 1034, column: 16)
!604 = !DILocation(line: 1034, column: 33, scope: !603)
!605 = !DILocation(line: 1034, column: 16, scope: !603)
!606 = !DILocation(line: 1034, column: 41, scope: !603)
!607 = !DILocation(line: 1034, column: 16, scope: !594)
!608 = !DILocation(line: 1035, column: 3, scope: !603)
!609 = !DILocation(line: 1035, column: 8, scope: !603)
!610 = !DILocation(line: 1035, column: 7, scope: !603)
!611 = !DILocation(line: 1035, column: 2, scope: !603)
!612 = !DILocation(line: 1037, column: 3, scope: !603)
!613 = !DILocation(line: 1037, column: 8, scope: !603)
!614 = !DILocation(line: 1037, column: 7, scope: !603)
!615 = !DILocation(line: 1038, column: 7, scope: !550)
!616 = !DILocation(line: 1041, column: 8, scope: !550)
!617 = !DILocation(line: 1041, column: 13, scope: !550)
!618 = !DILocation(line: 1041, column: 12, scope: !550)
!619 = !DILocation(line: 1042, column: 7, scope: !550)
!620 = !DILocation(line: 1042, column: 10, scope: !550)
!621 = !DILocation(line: 1042, column: 15, scope: !550)
!622 = !DILocation(line: 1043, column: 7, scope: !550)
!623 = !DILocation(line: 1046, column: 8, scope: !550)
!624 = !DILocation(line: 1046, column: 13, scope: !550)
!625 = !DILocation(line: 1046, column: 12, scope: !550)
!626 = !DILocation(line: 1047, column: 7, scope: !550)
!627 = !DILocation(line: 1047, column: 10, scope: !550)
!628 = !DILocation(line: 1047, column: 15, scope: !550)
!629 = !DILocation(line: 1048, column: 7, scope: !550)
!630 = !DILocation(line: 1051, column: 21, scope: !550)
!631 = !DILocation(line: 1051, column: 24, scope: !550)
!632 = !DILocation(line: 1051, column: 7, scope: !550)
!633 = !DILocation(line: 1052, column: 7, scope: !550)
!634 = !DILocation(line: 1055, column: 7, scope: !550)
!635 = !DILocation(line: 1056, column: 5, scope: !550)
!636 = !DILocation(line: 1057, column: 3, scope: !518)
!637 = !DILocation(line: 1058, column: 1, scope: !518)
!638 = distinct !DISubprogram(name: "do_add", scope: !3, file: !3, line: 524, type: !639, scopeLine: 526, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!639 = !DISubroutineType(types: !640)
!640 = !{!399, !426, !6, !6, !398}
!641 = !DILocalVariable(name: "r", arg: 1, scope: !638, file: !3, line: 524, type: !426)
!642 = !DILocation(line: 524, column: 26, scope: !638)
!643 = !DILocalVariable(name: "a", arg: 2, scope: !638, file: !3, line: 524, type: !6)
!644 = !DILocation(line: 524, column: 52, scope: !638)
!645 = !DILocalVariable(name: "b", arg: 3, scope: !638, file: !3, line: 525, type: !6)
!646 = !DILocation(line: 525, column: 25, scope: !638)
!647 = !DILocalVariable(name: "subtract_p", arg: 4, scope: !638, file: !3, line: 525, type: !398)
!648 = !DILocation(line: 525, column: 32, scope: !638)
!649 = !DILocalVariable(name: "dexp", scope: !638, file: !3, line: 527, type: !398)
!650 = !DILocation(line: 527, column: 7, scope: !638)
!651 = !DILocalVariable(name: "sign", scope: !638, file: !3, line: 527, type: !398)
!652 = !DILocation(line: 527, column: 13, scope: !638)
!653 = !DILocalVariable(name: "exp", scope: !638, file: !3, line: 527, type: !398)
!654 = !DILocation(line: 527, column: 19, scope: !638)
!655 = !DILocalVariable(name: "t", scope: !638, file: !3, line: 528, type: !8)
!656 = !DILocation(line: 528, column: 19, scope: !638)
!657 = !DILocalVariable(name: "inexact", scope: !638, file: !3, line: 529, type: !399)
!658 = !DILocation(line: 529, column: 8, scope: !638)
!659 = !DILocation(line: 532, column: 10, scope: !638)
!660 = !DILocation(line: 532, column: 13, scope: !638)
!661 = !DILocation(line: 532, column: 8, scope: !638)
!662 = !DILocation(line: 533, column: 17, scope: !638)
!663 = !DILocation(line: 533, column: 24, scope: !638)
!664 = !DILocation(line: 533, column: 27, scope: !638)
!665 = !DILocation(line: 533, column: 22, scope: !638)
!666 = !DILocation(line: 533, column: 35, scope: !638)
!667 = !DILocation(line: 533, column: 33, scope: !638)
!668 = !DILocation(line: 533, column: 14, scope: !638)
!669 = !DILocation(line: 535, column: 11, scope: !638)
!670 = !DILocation(line: 535, column: 3, scope: !638)
!671 = !DILocation(line: 539, column: 17, scope: !672)
!672 = distinct !DILexicalBlock(scope: !638, file: !3, line: 536, column: 5)
!673 = !DILocation(line: 539, column: 20, scope: !672)
!674 = !DILocation(line: 539, column: 28, scope: !672)
!675 = !DILocation(line: 539, column: 27, scope: !672)
!676 = !DILocation(line: 539, column: 25, scope: !672)
!677 = !DILocation(line: 539, column: 7, scope: !672)
!678 = !DILocation(line: 540, column: 7, scope: !672)
!679 = !DILocation(line: 552, column: 8, scope: !672)
!680 = !DILocation(line: 552, column: 13, scope: !672)
!681 = !DILocation(line: 552, column: 12, scope: !672)
!682 = !DILocation(line: 553, column: 17, scope: !672)
!683 = !DILocation(line: 553, column: 24, scope: !672)
!684 = !DILocation(line: 553, column: 22, scope: !672)
!685 = !DILocation(line: 553, column: 7, scope: !672)
!686 = !DILocation(line: 553, column: 10, scope: !672)
!687 = !DILocation(line: 553, column: 15, scope: !672)
!688 = !DILocation(line: 554, column: 7, scope: !672)
!689 = !DILocation(line: 565, column: 8, scope: !672)
!690 = !DILocation(line: 565, column: 13, scope: !672)
!691 = !DILocation(line: 565, column: 12, scope: !672)
!692 = !DILocation(line: 566, column: 7, scope: !672)
!693 = !DILocation(line: 569, column: 11, scope: !694)
!694 = distinct !DILexicalBlock(scope: !672, file: !3, line: 569, column: 11)
!695 = !DILocation(line: 569, column: 11, scope: !672)
!696 = !DILocation(line: 571, column: 22, scope: !694)
!697 = !DILocation(line: 571, column: 2, scope: !694)
!698 = !DILocation(line: 574, column: 3, scope: !694)
!699 = !DILocation(line: 574, column: 8, scope: !694)
!700 = !DILocation(line: 574, column: 7, scope: !694)
!701 = !DILocation(line: 575, column: 7, scope: !672)
!702 = !DILocation(line: 578, column: 7, scope: !672)
!703 = !DILocation(line: 581, column: 7, scope: !672)
!704 = !DILocation(line: 582, column: 5, scope: !672)
!705 = !DILocation(line: 585, column: 10, scope: !638)
!706 = !DILocation(line: 585, column: 25, scope: !638)
!707 = !DILocation(line: 585, column: 23, scope: !638)
!708 = !DILocation(line: 585, column: 8, scope: !638)
!709 = !DILocation(line: 586, column: 7, scope: !710)
!710 = distinct !DILexicalBlock(scope: !638, file: !3, line: 586, column: 7)
!711 = !DILocation(line: 586, column: 12, scope: !710)
!712 = !DILocation(line: 586, column: 7, scope: !638)
!713 = !DILocalVariable(name: "t", scope: !714, file: !3, line: 588, type: !6)
!714 = distinct !DILexicalBlock(scope: !710, file: !3, line: 587, column: 5)
!715 = !DILocation(line: 588, column: 30, scope: !714)
!716 = !DILocation(line: 589, column: 11, scope: !714)
!717 = !DILocation(line: 589, column: 9, scope: !714)
!718 = !DILocation(line: 589, column: 18, scope: !714)
!719 = !DILocation(line: 589, column: 16, scope: !714)
!720 = !DILocation(line: 589, column: 25, scope: !714)
!721 = !DILocation(line: 589, column: 23, scope: !714)
!722 = !DILocation(line: 590, column: 15, scope: !714)
!723 = !DILocation(line: 590, column: 14, scope: !714)
!724 = !DILocation(line: 590, column: 12, scope: !714)
!725 = !DILocation(line: 591, column: 15, scope: !714)
!726 = !DILocation(line: 591, column: 12, scope: !714)
!727 = !DILocation(line: 592, column: 5, scope: !714)
!728 = !DILocation(line: 593, column: 9, scope: !638)
!729 = !DILocation(line: 593, column: 7, scope: !638)
!730 = !DILocation(line: 597, column: 7, scope: !731)
!731 = distinct !DILexicalBlock(scope: !638, file: !3, line: 597, column: 7)
!732 = !DILocation(line: 597, column: 12, scope: !731)
!733 = !DILocation(line: 597, column: 7, scope: !638)
!734 = !DILocation(line: 601, column: 11, scope: !735)
!735 = distinct !DILexicalBlock(scope: !736, file: !3, line: 601, column: 11)
!736 = distinct !DILexicalBlock(scope: !731, file: !3, line: 598, column: 5)
!737 = !DILocation(line: 601, column: 16, scope: !735)
!738 = !DILocation(line: 601, column: 11, scope: !736)
!739 = !DILocation(line: 603, column: 5, scope: !740)
!740 = distinct !DILexicalBlock(scope: !735, file: !3, line: 602, column: 2)
!741 = !DILocation(line: 603, column: 10, scope: !740)
!742 = !DILocation(line: 603, column: 9, scope: !740)
!743 = !DILocation(line: 604, column: 14, scope: !740)
!744 = !DILocation(line: 604, column: 4, scope: !740)
!745 = !DILocation(line: 604, column: 7, scope: !740)
!746 = !DILocation(line: 604, column: 12, scope: !740)
!747 = !DILocation(line: 605, column: 4, scope: !740)
!748 = !DILocation(line: 608, column: 49, scope: !736)
!749 = !DILocation(line: 608, column: 52, scope: !736)
!750 = !DILocation(line: 608, column: 18, scope: !736)
!751 = !DILocation(line: 608, column: 15, scope: !736)
!752 = !DILocation(line: 609, column: 9, scope: !736)
!753 = !DILocation(line: 610, column: 5, scope: !736)
!754 = !DILocation(line: 612, column: 7, scope: !755)
!755 = distinct !DILexicalBlock(scope: !638, file: !3, line: 612, column: 7)
!756 = !DILocation(line: 612, column: 7, scope: !638)
!757 = !DILocation(line: 614, column: 29, scope: !758)
!758 = distinct !DILexicalBlock(scope: !759, file: !3, line: 614, column: 11)
!759 = distinct !DILexicalBlock(scope: !755, file: !3, line: 613, column: 5)
!760 = !DILocation(line: 614, column: 32, scope: !758)
!761 = !DILocation(line: 614, column: 35, scope: !758)
!762 = !DILocation(line: 614, column: 38, scope: !758)
!763 = !DILocation(line: 614, column: 11, scope: !758)
!764 = !DILocation(line: 614, column: 11, scope: !759)
!765 = !DILocation(line: 620, column: 9, scope: !766)
!766 = distinct !DILexicalBlock(scope: !758, file: !3, line: 615, column: 2)
!767 = !DILocation(line: 621, column: 21, scope: !766)
!768 = !DILocation(line: 621, column: 24, scope: !766)
!769 = !DILocation(line: 621, column: 4, scope: !766)
!770 = !DILocation(line: 622, column: 2, scope: !766)
!771 = !DILocation(line: 623, column: 5, scope: !759)
!772 = !DILocation(line: 626, column: 29, scope: !773)
!773 = distinct !DILexicalBlock(scope: !774, file: !3, line: 626, column: 11)
!774 = distinct !DILexicalBlock(scope: !755, file: !3, line: 625, column: 5)
!775 = !DILocation(line: 626, column: 32, scope: !773)
!776 = !DILocation(line: 626, column: 35, scope: !773)
!777 = !DILocation(line: 626, column: 11, scope: !773)
!778 = !DILocation(line: 626, column: 11, scope: !774)
!779 = !DILocation(line: 631, column: 42, scope: !780)
!780 = distinct !DILexicalBlock(scope: !773, file: !3, line: 627, column: 2)
!781 = !DILocation(line: 631, column: 45, scope: !780)
!782 = !DILocation(line: 631, column: 15, scope: !780)
!783 = !DILocation(line: 631, column: 12, scope: !780)
!784 = !DILocation(line: 632, column: 4, scope: !780)
!785 = !DILocation(line: 632, column: 7, scope: !780)
!786 = !DILocation(line: 632, column: 20, scope: !780)
!787 = !DILocation(line: 633, column: 8, scope: !788)
!788 = distinct !DILexicalBlock(scope: !780, file: !3, line: 633, column: 8)
!789 = !DILocation(line: 633, column: 14, scope: !788)
!790 = !DILocation(line: 633, column: 8, scope: !780)
!791 = !DILocation(line: 635, column: 17, scope: !792)
!792 = distinct !DILexicalBlock(scope: !788, file: !3, line: 634, column: 6)
!793 = !DILocation(line: 635, column: 20, scope: !792)
!794 = !DILocation(line: 635, column: 8, scope: !792)
!795 = !DILocation(line: 636, column: 8, scope: !792)
!796 = !DILocation(line: 638, column: 2, scope: !780)
!797 = !DILocation(line: 641, column: 3, scope: !638)
!798 = !DILocation(line: 641, column: 6, scope: !638)
!799 = !DILocation(line: 641, column: 9, scope: !638)
!800 = !DILocation(line: 642, column: 13, scope: !638)
!801 = !DILocation(line: 642, column: 3, scope: !638)
!802 = !DILocation(line: 642, column: 6, scope: !638)
!803 = !DILocation(line: 642, column: 11, scope: !638)
!804 = !DILocation(line: 643, column: 3, scope: !638)
!805 = !DILocation(line: 645, column: 3, scope: !638)
!806 = !DILocation(line: 645, column: 6, scope: !638)
!807 = !DILocation(line: 645, column: 17, scope: !638)
!808 = !DILocation(line: 646, column: 3, scope: !638)
!809 = !DILocation(line: 646, column: 6, scope: !638)
!810 = !DILocation(line: 646, column: 16, scope: !638)
!811 = !DILocation(line: 647, column: 3, scope: !638)
!812 = !DILocation(line: 647, column: 6, scope: !638)
!813 = !DILocation(line: 647, column: 14, scope: !638)
!814 = !DILocation(line: 650, column: 14, scope: !638)
!815 = !DILocation(line: 650, column: 3, scope: !638)
!816 = !DILocation(line: 654, column: 7, scope: !817)
!817 = distinct !DILexicalBlock(scope: !638, file: !3, line: 654, column: 7)
!818 = !DILocation(line: 654, column: 10, scope: !817)
!819 = !DILocation(line: 654, column: 13, scope: !817)
!820 = !DILocation(line: 654, column: 7, scope: !638)
!821 = !DILocation(line: 655, column: 5, scope: !817)
!822 = !DILocation(line: 655, column: 8, scope: !817)
!823 = !DILocation(line: 655, column: 13, scope: !817)
!824 = !DILocation(line: 657, column: 18, scope: !817)
!825 = !DILocation(line: 657, column: 5, scope: !817)
!826 = !DILocation(line: 657, column: 8, scope: !817)
!827 = !DILocation(line: 657, column: 15, scope: !817)
!828 = !DILocation(line: 659, column: 10, scope: !638)
!829 = !DILocation(line: 659, column: 3, scope: !638)
!830 = !DILocation(line: 660, column: 1, scope: !638)
!831 = distinct !DISubprogram(name: "do_multiply", scope: !3, file: !3, line: 665, type: !832, scopeLine: 667, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!832 = !DISubroutineType(types: !833)
!833 = !{!399, !426, !6, !6}
!834 = !DILocalVariable(name: "r", arg: 1, scope: !831, file: !3, line: 665, type: !426)
!835 = !DILocation(line: 665, column: 31, scope: !831)
!836 = !DILocalVariable(name: "a", arg: 2, scope: !831, file: !3, line: 665, type: !6)
!837 = !DILocation(line: 665, column: 57, scope: !831)
!838 = !DILocalVariable(name: "b", arg: 3, scope: !831, file: !3, line: 666, type: !6)
!839 = !DILocation(line: 666, column: 30, scope: !831)
!840 = !DILocalVariable(name: "u", scope: !831, file: !3, line: 668, type: !8)
!841 = !DILocation(line: 668, column: 19, scope: !831)
!842 = !DILocalVariable(name: "t", scope: !831, file: !3, line: 668, type: !8)
!843 = !DILocation(line: 668, column: 22, scope: !831)
!844 = !DILocalVariable(name: "rr", scope: !831, file: !3, line: 668, type: !426)
!845 = !DILocation(line: 668, column: 26, scope: !831)
!846 = !DILocalVariable(name: "i", scope: !831, file: !3, line: 669, type: !12)
!847 = !DILocation(line: 669, column: 16, scope: !831)
!848 = !DILocalVariable(name: "j", scope: !831, file: !3, line: 669, type: !12)
!849 = !DILocation(line: 669, column: 19, scope: !831)
!850 = !DILocalVariable(name: "k", scope: !831, file: !3, line: 669, type: !12)
!851 = !DILocation(line: 669, column: 22, scope: !831)
!852 = !DILocalVariable(name: "sign", scope: !831, file: !3, line: 670, type: !398)
!853 = !DILocation(line: 670, column: 7, scope: !831)
!854 = !DILocation(line: 670, column: 14, scope: !831)
!855 = !DILocation(line: 670, column: 17, scope: !831)
!856 = !DILocation(line: 670, column: 24, scope: !831)
!857 = !DILocation(line: 670, column: 27, scope: !831)
!858 = !DILocation(line: 670, column: 22, scope: !831)
!859 = !DILocalVariable(name: "inexact", scope: !831, file: !3, line: 671, type: !399)
!860 = !DILocation(line: 671, column: 8, scope: !831)
!861 = !DILocation(line: 673, column: 11, scope: !831)
!862 = !DILocation(line: 673, column: 3, scope: !831)
!863 = !DILocation(line: 679, column: 17, scope: !864)
!864 = distinct !DILexicalBlock(scope: !831, file: !3, line: 674, column: 5)
!865 = !DILocation(line: 679, column: 20, scope: !864)
!866 = !DILocation(line: 679, column: 7, scope: !864)
!867 = !DILocation(line: 680, column: 7, scope: !864)
!868 = !DILocation(line: 687, column: 8, scope: !864)
!869 = !DILocation(line: 687, column: 13, scope: !864)
!870 = !DILocation(line: 687, column: 12, scope: !864)
!871 = !DILocation(line: 688, column: 17, scope: !864)
!872 = !DILocation(line: 688, column: 7, scope: !864)
!873 = !DILocation(line: 688, column: 10, scope: !864)
!874 = !DILocation(line: 688, column: 15, scope: !864)
!875 = !DILocation(line: 689, column: 7, scope: !864)
!876 = !DILocation(line: 695, column: 8, scope: !864)
!877 = !DILocation(line: 695, column: 13, scope: !864)
!878 = !DILocation(line: 695, column: 12, scope: !864)
!879 = !DILocation(line: 696, column: 17, scope: !864)
!880 = !DILocation(line: 696, column: 7, scope: !864)
!881 = !DILocation(line: 696, column: 10, scope: !864)
!882 = !DILocation(line: 696, column: 15, scope: !864)
!883 = !DILocation(line: 697, column: 7, scope: !864)
!884 = !DILocation(line: 702, column: 27, scope: !864)
!885 = !DILocation(line: 702, column: 30, scope: !864)
!886 = !DILocation(line: 702, column: 7, scope: !864)
!887 = !DILocation(line: 703, column: 7, scope: !864)
!888 = !DILocation(line: 709, column: 16, scope: !864)
!889 = !DILocation(line: 709, column: 19, scope: !864)
!890 = !DILocation(line: 709, column: 7, scope: !864)
!891 = !DILocation(line: 710, column: 7, scope: !864)
!892 = !DILocation(line: 713, column: 7, scope: !864)
!893 = !DILocation(line: 716, column: 7, scope: !864)
!894 = !DILocation(line: 717, column: 5, scope: !864)
!895 = !DILocation(line: 719, column: 7, scope: !896)
!896 = distinct !DILexicalBlock(scope: !831, file: !3, line: 719, column: 7)
!897 = !DILocation(line: 719, column: 12, scope: !896)
!898 = !DILocation(line: 719, column: 9, scope: !896)
!899 = !DILocation(line: 719, column: 14, scope: !896)
!900 = !DILocation(line: 719, column: 17, scope: !896)
!901 = !DILocation(line: 719, column: 22, scope: !896)
!902 = !DILocation(line: 719, column: 19, scope: !896)
!903 = !DILocation(line: 719, column: 7, scope: !831)
!904 = !DILocation(line: 720, column: 8, scope: !896)
!905 = !DILocation(line: 720, column: 5, scope: !896)
!906 = !DILocation(line: 722, column: 10, scope: !896)
!907 = !DILocation(line: 722, column: 8, scope: !896)
!908 = !DILocation(line: 723, column: 13, scope: !831)
!909 = !DILocation(line: 723, column: 3, scope: !831)
!910 = !DILocation(line: 743, column: 10, scope: !911)
!911 = distinct !DILexicalBlock(scope: !831, file: !3, line: 743, column: 3)
!912 = !DILocation(line: 743, column: 8, scope: !911)
!913 = !DILocation(line: 743, column: 15, scope: !914)
!914 = distinct !DILexicalBlock(scope: !911, file: !3, line: 743, column: 3)
!915 = !DILocation(line: 743, column: 17, scope: !914)
!916 = !DILocation(line: 743, column: 3, scope: !911)
!917 = !DILocalVariable(name: "ai", scope: !918, file: !3, line: 745, type: !20)
!918 = distinct !DILexicalBlock(scope: !914, file: !3, line: 744, column: 5)
!919 = !DILocation(line: 745, column: 21, scope: !918)
!920 = !DILocation(line: 745, column: 26, scope: !918)
!921 = !DILocation(line: 745, column: 29, scope: !918)
!922 = !DILocation(line: 745, column: 33, scope: !918)
!923 = !DILocation(line: 745, column: 35, scope: !918)
!924 = !DILocation(line: 746, column: 11, scope: !925)
!925 = distinct !DILexicalBlock(scope: !918, file: !3, line: 746, column: 11)
!926 = !DILocation(line: 746, column: 13, scope: !925)
!927 = !DILocation(line: 746, column: 11, scope: !918)
!928 = !DILocation(line: 747, column: 5, scope: !925)
!929 = !DILocation(line: 747, column: 2, scope: !925)
!930 = !DILocation(line: 749, column: 5, scope: !925)
!931 = !DILocation(line: 751, column: 11, scope: !932)
!932 = distinct !DILexicalBlock(scope: !918, file: !3, line: 751, column: 11)
!933 = !DILocation(line: 751, column: 14, scope: !932)
!934 = !DILocation(line: 751, column: 11, scope: !918)
!935 = !DILocation(line: 752, column: 2, scope: !932)
!936 = !DILocation(line: 754, column: 14, scope: !937)
!937 = distinct !DILexicalBlock(scope: !918, file: !3, line: 754, column: 7)
!938 = !DILocation(line: 754, column: 12, scope: !937)
!939 = !DILocation(line: 754, column: 19, scope: !940)
!940 = distinct !DILexicalBlock(scope: !937, file: !3, line: 754, column: 7)
!941 = !DILocation(line: 754, column: 21, scope: !940)
!942 = !DILocation(line: 754, column: 7, scope: !937)
!943 = !DILocalVariable(name: "exp", scope: !944, file: !3, line: 756, type: !398)
!944 = distinct !DILexicalBlock(scope: !940, file: !3, line: 755, column: 2)
!945 = !DILocation(line: 756, column: 8, scope: !944)
!946 = !DILocation(line: 756, column: 15, scope: !944)
!947 = !DILocation(line: 756, column: 41, scope: !944)
!948 = !DILocation(line: 756, column: 40, scope: !944)
!949 = !DILocation(line: 756, column: 43, scope: !944)
!950 = !DILocation(line: 756, column: 28, scope: !944)
!951 = !DILocation(line: 757, column: 11, scope: !944)
!952 = !DILocation(line: 757, column: 29, scope: !944)
!953 = !DILocation(line: 757, column: 28, scope: !944)
!954 = !DILocation(line: 757, column: 31, scope: !944)
!955 = !DILocation(line: 757, column: 24, scope: !944)
!956 = !DILocation(line: 757, column: 8, scope: !944)
!957 = !DILocation(line: 759, column: 8, scope: !958)
!958 = distinct !DILexicalBlock(scope: !944, file: !3, line: 759, column: 8)
!959 = !DILocation(line: 759, column: 12, scope: !958)
!960 = !DILocation(line: 759, column: 8, scope: !944)
!961 = !DILocation(line: 761, column: 17, scope: !962)
!962 = distinct !DILexicalBlock(scope: !958, file: !3, line: 760, column: 6)
!963 = !DILocation(line: 761, column: 20, scope: !962)
!964 = !DILocation(line: 761, column: 8, scope: !962)
!965 = !DILocation(line: 762, column: 8, scope: !962)
!966 = !DILocation(line: 764, column: 8, scope: !967)
!967 = distinct !DILexicalBlock(scope: !944, file: !3, line: 764, column: 8)
!968 = !DILocation(line: 764, column: 12, scope: !967)
!969 = !DILocation(line: 764, column: 8, scope: !944)
!970 = !DILocation(line: 767, column: 16, scope: !971)
!971 = distinct !DILexicalBlock(scope: !967, file: !3, line: 765, column: 6)
!972 = !DILocation(line: 768, column: 8, scope: !971)
!973 = !DILocation(line: 771, column: 4, scope: !944)
!974 = !DILocation(line: 772, column: 6, scope: !944)
!975 = !DILocation(line: 772, column: 9, scope: !944)
!976 = !DILocation(line: 773, column: 4, scope: !944)
!977 = !DILocation(line: 775, column: 13, scope: !978)
!978 = distinct !DILexicalBlock(scope: !944, file: !3, line: 775, column: 4)
!979 = !DILocation(line: 775, column: 11, scope: !978)
!980 = !DILocation(line: 775, column: 9, scope: !978)
!981 = !DILocation(line: 775, column: 16, scope: !982)
!982 = distinct !DILexicalBlock(scope: !978, file: !3, line: 775, column: 4)
!983 = !DILocation(line: 775, column: 18, scope: !982)
!984 = !DILocation(line: 775, column: 4, scope: !978)
!985 = !DILocalVariable(name: "bi", scope: !986, file: !3, line: 777, type: !20)
!986 = distinct !DILexicalBlock(scope: !982, file: !3, line: 776, column: 6)
!987 = !DILocation(line: 777, column: 22, scope: !986)
!988 = !DILocation(line: 777, column: 27, scope: !986)
!989 = !DILocation(line: 777, column: 30, scope: !986)
!990 = !DILocation(line: 777, column: 34, scope: !986)
!991 = !DILocation(line: 777, column: 36, scope: !986)
!992 = !DILocation(line: 778, column: 12, scope: !993)
!993 = distinct !DILexicalBlock(scope: !986, file: !3, line: 778, column: 12)
!994 = !DILocation(line: 778, column: 14, scope: !993)
!995 = !DILocation(line: 778, column: 12, scope: !986)
!996 = !DILocation(line: 779, column: 6, scope: !993)
!997 = !DILocation(line: 779, column: 3, scope: !993)
!998 = !DILocation(line: 781, column: 6, scope: !993)
!999 = !DILocation(line: 783, column: 23, scope: !986)
!1000 = !DILocation(line: 783, column: 28, scope: !986)
!1001 = !DILocation(line: 783, column: 26, scope: !986)
!1002 = !DILocation(line: 783, column: 10, scope: !986)
!1003 = !DILocation(line: 783, column: 14, scope: !986)
!1004 = !DILocation(line: 783, column: 16, scope: !986)
!1005 = !DILocation(line: 783, column: 8, scope: !986)
!1006 = !DILocation(line: 783, column: 21, scope: !986)
!1007 = !DILocation(line: 784, column: 6, scope: !986)
!1008 = !DILocation(line: 775, column: 33, scope: !982)
!1009 = !DILocation(line: 775, column: 4, scope: !982)
!1010 = distinct !{!1010, !984, !1011}
!1011 = !DILocation(line: 784, column: 6, scope: !978)
!1012 = !DILocation(line: 786, column: 4, scope: !944)
!1013 = !DILocation(line: 787, column: 23, scope: !944)
!1014 = !DILocation(line: 787, column: 27, scope: !944)
!1015 = !DILocation(line: 787, column: 15, scope: !944)
!1016 = !DILocation(line: 787, column: 12, scope: !944)
!1017 = !DILocation(line: 788, column: 2, scope: !944)
!1018 = !DILocation(line: 754, column: 26, scope: !940)
!1019 = !DILocation(line: 754, column: 7, scope: !940)
!1020 = distinct !{!1020, !942, !1021}
!1021 = !DILocation(line: 788, column: 2, scope: !937)
!1022 = !DILocation(line: 789, column: 5, scope: !918)
!1023 = !DILocation(line: 743, column: 30, scope: !914)
!1024 = !DILocation(line: 743, column: 3, scope: !914)
!1025 = distinct !{!1025, !916, !1026}
!1026 = !DILocation(line: 789, column: 5, scope: !911)
!1027 = !DILocation(line: 791, column: 14, scope: !831)
!1028 = !DILocation(line: 791, column: 3, scope: !831)
!1029 = !DILocation(line: 791, column: 7, scope: !831)
!1030 = !DILocation(line: 791, column: 12, scope: !831)
!1031 = !DILocation(line: 792, column: 7, scope: !1032)
!1032 = distinct !DILexicalBlock(scope: !831, file: !3, line: 792, column: 7)
!1033 = !DILocation(line: 792, column: 13, scope: !1032)
!1034 = !DILocation(line: 792, column: 10, scope: !1032)
!1035 = !DILocation(line: 792, column: 7, scope: !831)
!1036 = !DILocation(line: 793, column: 6, scope: !1032)
!1037 = !DILocation(line: 793, column: 10, scope: !1032)
!1038 = !DILocation(line: 793, column: 5, scope: !1032)
!1039 = !DILocation(line: 795, column: 10, scope: !831)
!1040 = !DILocation(line: 795, column: 3, scope: !831)
!1041 = !DILocation(line: 796, column: 1, scope: !831)
!1042 = distinct !DISubprogram(name: "do_divide", scope: !3, file: !3, line: 801, type: !832, scopeLine: 803, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!1043 = !DILocalVariable(name: "r", arg: 1, scope: !1042, file: !3, line: 801, type: !426)
!1044 = !DILocation(line: 801, column: 29, scope: !1042)
!1045 = !DILocalVariable(name: "a", arg: 2, scope: !1042, file: !3, line: 801, type: !6)
!1046 = !DILocation(line: 801, column: 55, scope: !1042)
!1047 = !DILocalVariable(name: "b", arg: 3, scope: !1042, file: !3, line: 802, type: !6)
!1048 = !DILocation(line: 802, column: 28, scope: !1042)
!1049 = !DILocalVariable(name: "exp", scope: !1042, file: !3, line: 804, type: !398)
!1050 = !DILocation(line: 804, column: 7, scope: !1042)
!1051 = !DILocalVariable(name: "sign", scope: !1042, file: !3, line: 804, type: !398)
!1052 = !DILocation(line: 804, column: 12, scope: !1042)
!1053 = !DILocation(line: 804, column: 19, scope: !1042)
!1054 = !DILocation(line: 804, column: 22, scope: !1042)
!1055 = !DILocation(line: 804, column: 29, scope: !1042)
!1056 = !DILocation(line: 804, column: 32, scope: !1042)
!1057 = !DILocation(line: 804, column: 27, scope: !1042)
!1058 = !DILocalVariable(name: "t", scope: !1042, file: !3, line: 805, type: !8)
!1059 = !DILocation(line: 805, column: 19, scope: !1042)
!1060 = !DILocalVariable(name: "rr", scope: !1042, file: !3, line: 805, type: !426)
!1061 = !DILocation(line: 805, column: 23, scope: !1042)
!1062 = !DILocalVariable(name: "inexact", scope: !1042, file: !3, line: 806, type: !399)
!1063 = !DILocation(line: 806, column: 8, scope: !1042)
!1064 = !DILocation(line: 808, column: 11, scope: !1042)
!1065 = !DILocation(line: 808, column: 3, scope: !1042)
!1066 = !DILocation(line: 814, column: 27, scope: !1067)
!1067 = distinct !DILexicalBlock(scope: !1042, file: !3, line: 809, column: 5)
!1068 = !DILocation(line: 814, column: 30, scope: !1067)
!1069 = !DILocation(line: 814, column: 7, scope: !1067)
!1070 = !DILocation(line: 815, column: 7, scope: !1067)
!1071 = !DILocation(line: 822, column: 17, scope: !1067)
!1072 = !DILocation(line: 822, column: 20, scope: !1067)
!1073 = !DILocation(line: 822, column: 7, scope: !1067)
!1074 = !DILocation(line: 823, column: 7, scope: !1067)
!1075 = !DILocation(line: 829, column: 16, scope: !1067)
!1076 = !DILocation(line: 829, column: 19, scope: !1067)
!1077 = !DILocation(line: 829, column: 7, scope: !1067)
!1078 = !DILocation(line: 830, column: 7, scope: !1067)
!1079 = !DILocation(line: 837, column: 8, scope: !1067)
!1080 = !DILocation(line: 837, column: 13, scope: !1067)
!1081 = !DILocation(line: 837, column: 12, scope: !1067)
!1082 = !DILocation(line: 838, column: 17, scope: !1067)
!1083 = !DILocation(line: 838, column: 7, scope: !1067)
!1084 = !DILocation(line: 838, column: 10, scope: !1067)
!1085 = !DILocation(line: 838, column: 15, scope: !1067)
!1086 = !DILocation(line: 839, column: 7, scope: !1067)
!1087 = !DILocation(line: 845, column: 8, scope: !1067)
!1088 = !DILocation(line: 845, column: 13, scope: !1067)
!1089 = !DILocation(line: 845, column: 12, scope: !1067)
!1090 = !DILocation(line: 846, column: 17, scope: !1067)
!1091 = !DILocation(line: 846, column: 7, scope: !1067)
!1092 = !DILocation(line: 846, column: 10, scope: !1067)
!1093 = !DILocation(line: 846, column: 15, scope: !1067)
!1094 = !DILocation(line: 847, column: 7, scope: !1067)
!1095 = !DILocation(line: 851, column: 16, scope: !1067)
!1096 = !DILocation(line: 851, column: 19, scope: !1067)
!1097 = !DILocation(line: 851, column: 7, scope: !1067)
!1098 = !DILocation(line: 852, column: 7, scope: !1067)
!1099 = !DILocation(line: 855, column: 7, scope: !1067)
!1100 = !DILocation(line: 858, column: 7, scope: !1067)
!1101 = !DILocation(line: 859, column: 5, scope: !1067)
!1102 = !DILocation(line: 861, column: 7, scope: !1103)
!1103 = distinct !DILexicalBlock(scope: !1042, file: !3, line: 861, column: 7)
!1104 = !DILocation(line: 861, column: 12, scope: !1103)
!1105 = !DILocation(line: 861, column: 9, scope: !1103)
!1106 = !DILocation(line: 861, column: 14, scope: !1103)
!1107 = !DILocation(line: 861, column: 17, scope: !1103)
!1108 = !DILocation(line: 861, column: 22, scope: !1103)
!1109 = !DILocation(line: 861, column: 19, scope: !1103)
!1110 = !DILocation(line: 861, column: 7, scope: !1042)
!1111 = !DILocation(line: 862, column: 8, scope: !1103)
!1112 = !DILocation(line: 862, column: 5, scope: !1103)
!1113 = !DILocation(line: 864, column: 10, scope: !1103)
!1114 = !DILocation(line: 864, column: 8, scope: !1103)
!1115 = !DILocation(line: 867, column: 13, scope: !1042)
!1116 = !DILocation(line: 867, column: 3, scope: !1042)
!1117 = !DILocation(line: 868, column: 3, scope: !1042)
!1118 = !DILocation(line: 868, column: 7, scope: !1042)
!1119 = !DILocation(line: 868, column: 10, scope: !1042)
!1120 = !DILocation(line: 869, column: 14, scope: !1042)
!1121 = !DILocation(line: 869, column: 3, scope: !1042)
!1122 = !DILocation(line: 869, column: 7, scope: !1042)
!1123 = !DILocation(line: 869, column: 12, scope: !1042)
!1124 = !DILocation(line: 871, column: 9, scope: !1042)
!1125 = !DILocation(line: 871, column: 24, scope: !1042)
!1126 = !DILocation(line: 871, column: 22, scope: !1042)
!1127 = !DILocation(line: 871, column: 37, scope: !1042)
!1128 = !DILocation(line: 871, column: 7, scope: !1042)
!1129 = !DILocation(line: 872, column: 7, scope: !1130)
!1130 = distinct !DILexicalBlock(scope: !1042, file: !3, line: 872, column: 7)
!1131 = !DILocation(line: 872, column: 11, scope: !1130)
!1132 = !DILocation(line: 872, column: 7, scope: !1042)
!1133 = !DILocation(line: 874, column: 16, scope: !1134)
!1134 = distinct !DILexicalBlock(scope: !1130, file: !3, line: 873, column: 5)
!1135 = !DILocation(line: 874, column: 19, scope: !1134)
!1136 = !DILocation(line: 874, column: 7, scope: !1134)
!1137 = !DILocation(line: 875, column: 7, scope: !1134)
!1138 = !DILocation(line: 877, column: 7, scope: !1139)
!1139 = distinct !DILexicalBlock(scope: !1042, file: !3, line: 877, column: 7)
!1140 = !DILocation(line: 877, column: 11, scope: !1139)
!1141 = !DILocation(line: 877, column: 7, scope: !1042)
!1142 = !DILocation(line: 879, column: 17, scope: !1143)
!1143 = distinct !DILexicalBlock(scope: !1139, file: !3, line: 878, column: 5)
!1144 = !DILocation(line: 879, column: 20, scope: !1143)
!1145 = !DILocation(line: 879, column: 7, scope: !1143)
!1146 = !DILocation(line: 880, column: 7, scope: !1143)
!1147 = !DILocation(line: 882, column: 3, scope: !1042)
!1148 = !DILocation(line: 884, column: 31, scope: !1042)
!1149 = !DILocation(line: 884, column: 35, scope: !1042)
!1150 = !DILocation(line: 884, column: 38, scope: !1042)
!1151 = !DILocation(line: 884, column: 13, scope: !1042)
!1152 = !DILocation(line: 884, column: 11, scope: !1042)
!1153 = !DILocation(line: 887, column: 14, scope: !1042)
!1154 = !DILocation(line: 887, column: 3, scope: !1042)
!1155 = !DILocation(line: 888, column: 17, scope: !1042)
!1156 = !DILocation(line: 888, column: 3, scope: !1042)
!1157 = !DILocation(line: 888, column: 7, scope: !1042)
!1158 = !DILocation(line: 888, column: 14, scope: !1042)
!1159 = !DILocation(line: 890, column: 7, scope: !1160)
!1160 = distinct !DILexicalBlock(scope: !1042, file: !3, line: 890, column: 7)
!1161 = !DILocation(line: 890, column: 13, scope: !1160)
!1162 = !DILocation(line: 890, column: 10, scope: !1160)
!1163 = !DILocation(line: 890, column: 7, scope: !1042)
!1164 = !DILocation(line: 891, column: 6, scope: !1160)
!1165 = !DILocation(line: 891, column: 10, scope: !1160)
!1166 = !DILocation(line: 891, column: 5, scope: !1160)
!1167 = !DILocation(line: 893, column: 10, scope: !1042)
!1168 = !DILocation(line: 893, column: 3, scope: !1042)
!1169 = !DILocation(line: 894, column: 1, scope: !1042)
!1170 = distinct !DISubprogram(name: "do_compare", scope: !3, file: !3, line: 900, type: !1171, scopeLine: 902, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!1171 = !DISubroutineType(types: !1172)
!1172 = !{!398, !6, !6, !398}
!1173 = !DILocalVariable(name: "a", arg: 1, scope: !1170, file: !3, line: 900, type: !6)
!1174 = !DILocation(line: 900, column: 36, scope: !1170)
!1175 = !DILocalVariable(name: "b", arg: 2, scope: !1170, file: !3, line: 900, type: !6)
!1176 = !DILocation(line: 900, column: 62, scope: !1170)
!1177 = !DILocalVariable(name: "nan_result", arg: 3, scope: !1170, file: !3, line: 901, type: !398)
!1178 = !DILocation(line: 901, column: 10, scope: !1170)
!1179 = !DILocalVariable(name: "ret", scope: !1170, file: !3, line: 903, type: !398)
!1180 = !DILocation(line: 903, column: 7, scope: !1170)
!1181 = !DILocation(line: 905, column: 11, scope: !1170)
!1182 = !DILocation(line: 905, column: 3, scope: !1170)
!1183 = !DILocation(line: 909, column: 7, scope: !1184)
!1184 = distinct !DILexicalBlock(scope: !1170, file: !3, line: 906, column: 5)
!1185 = !DILocation(line: 913, column: 11, scope: !1186)
!1186 = distinct !DILexicalBlock(scope: !1184, file: !3, line: 913, column: 11)
!1187 = !DILocation(line: 913, column: 14, scope: !1186)
!1188 = !DILocation(line: 913, column: 11, scope: !1184)
!1189 = !DILocation(line: 914, column: 29, scope: !1186)
!1190 = !DILocation(line: 914, column: 32, scope: !1186)
!1191 = !DILocation(line: 914, column: 35, scope: !1186)
!1192 = !DILocation(line: 914, column: 9, scope: !1186)
!1193 = !DILocation(line: 914, column: 2, scope: !1186)
!1194 = !DILocation(line: 918, column: 15, scope: !1184)
!1195 = !DILocation(line: 918, column: 18, scope: !1184)
!1196 = !DILocation(line: 918, column: 7, scope: !1184)
!1197 = !DILocation(line: 921, column: 15, scope: !1184)
!1198 = !DILocation(line: 921, column: 18, scope: !1184)
!1199 = !DILocation(line: 921, column: 14, scope: !1184)
!1200 = !DILocation(line: 921, column: 26, scope: !1184)
!1201 = !DILocation(line: 921, column: 29, scope: !1184)
!1202 = !DILocation(line: 921, column: 25, scope: !1184)
!1203 = !DILocation(line: 921, column: 23, scope: !1184)
!1204 = !DILocation(line: 921, column: 7, scope: !1184)
!1205 = !DILocation(line: 925, column: 11, scope: !1206)
!1206 = distinct !DILexicalBlock(scope: !1184, file: !3, line: 925, column: 11)
!1207 = !DILocation(line: 925, column: 14, scope: !1206)
!1208 = !DILocation(line: 925, column: 11, scope: !1184)
!1209 = !DILocation(line: 926, column: 29, scope: !1206)
!1210 = !DILocation(line: 926, column: 32, scope: !1206)
!1211 = !DILocation(line: 926, column: 35, scope: !1206)
!1212 = !DILocation(line: 926, column: 9, scope: !1206)
!1213 = !DILocation(line: 926, column: 2, scope: !1206)
!1214 = !DILocation(line: 930, column: 15, scope: !1184)
!1215 = !DILocation(line: 930, column: 18, scope: !1184)
!1216 = !DILocation(line: 930, column: 7, scope: !1184)
!1217 = !DILocation(line: 939, column: 14, scope: !1184)
!1218 = !DILocation(line: 939, column: 7, scope: !1184)
!1219 = !DILocation(line: 942, column: 7, scope: !1184)
!1220 = !DILocation(line: 945, column: 7, scope: !1184)
!1221 = !DILocation(line: 946, column: 5, scope: !1184)
!1222 = !DILocation(line: 948, column: 7, scope: !1223)
!1223 = distinct !DILexicalBlock(scope: !1170, file: !3, line: 948, column: 7)
!1224 = !DILocation(line: 948, column: 10, scope: !1223)
!1225 = !DILocation(line: 948, column: 18, scope: !1223)
!1226 = !DILocation(line: 948, column: 21, scope: !1223)
!1227 = !DILocation(line: 948, column: 15, scope: !1223)
!1228 = !DILocation(line: 948, column: 7, scope: !1170)
!1229 = !DILocation(line: 949, column: 13, scope: !1223)
!1230 = !DILocation(line: 949, column: 16, scope: !1223)
!1231 = !DILocation(line: 949, column: 12, scope: !1223)
!1232 = !DILocation(line: 949, column: 24, scope: !1223)
!1233 = !DILocation(line: 949, column: 27, scope: !1223)
!1234 = !DILocation(line: 949, column: 23, scope: !1223)
!1235 = !DILocation(line: 949, column: 21, scope: !1223)
!1236 = !DILocation(line: 949, column: 5, scope: !1223)
!1237 = !DILocation(line: 951, column: 7, scope: !1238)
!1238 = distinct !DILexicalBlock(scope: !1170, file: !3, line: 951, column: 7)
!1239 = !DILocation(line: 951, column: 10, scope: !1238)
!1240 = !DILocation(line: 951, column: 18, scope: !1238)
!1241 = !DILocation(line: 951, column: 21, scope: !1238)
!1242 = !DILocation(line: 951, column: 24, scope: !1238)
!1243 = !DILocation(line: 951, column: 7, scope: !1170)
!1244 = !DILocation(line: 952, column: 32, scope: !1238)
!1245 = !DILocation(line: 952, column: 35, scope: !1238)
!1246 = !DILocation(line: 952, column: 38, scope: !1238)
!1247 = !DILocation(line: 952, column: 12, scope: !1238)
!1248 = !DILocation(line: 952, column: 5, scope: !1238)
!1249 = !DILocation(line: 954, column: 7, scope: !1250)
!1250 = distinct !DILexicalBlock(scope: !1170, file: !3, line: 954, column: 7)
!1251 = !DILocation(line: 954, column: 22, scope: !1250)
!1252 = !DILocation(line: 954, column: 20, scope: !1250)
!1253 = !DILocation(line: 954, column: 7, scope: !1170)
!1254 = !DILocation(line: 955, column: 9, scope: !1250)
!1255 = !DILocation(line: 955, column: 5, scope: !1250)
!1256 = !DILocation(line: 956, column: 12, scope: !1257)
!1257 = distinct !DILexicalBlock(scope: !1250, file: !3, line: 956, column: 12)
!1258 = !DILocation(line: 956, column: 27, scope: !1257)
!1259 = !DILocation(line: 956, column: 25, scope: !1257)
!1260 = !DILocation(line: 956, column: 12, scope: !1250)
!1261 = !DILocation(line: 957, column: 9, scope: !1257)
!1262 = !DILocation(line: 957, column: 5, scope: !1257)
!1263 = !DILocation(line: 959, column: 29, scope: !1257)
!1264 = !DILocation(line: 959, column: 32, scope: !1257)
!1265 = !DILocation(line: 959, column: 11, scope: !1257)
!1266 = !DILocation(line: 959, column: 9, scope: !1257)
!1267 = !DILocation(line: 961, column: 11, scope: !1170)
!1268 = !DILocation(line: 961, column: 14, scope: !1170)
!1269 = !DILocation(line: 961, column: 22, scope: !1170)
!1270 = !DILocation(line: 961, column: 21, scope: !1170)
!1271 = !DILocation(line: 961, column: 28, scope: !1170)
!1272 = !DILocation(line: 961, column: 3, scope: !1170)
!1273 = !DILocation(line: 962, column: 1, scope: !1170)
!1274 = distinct !DISubprogram(name: "do_fix_trunc", scope: !3, file: !3, line: 967, type: !1275, scopeLine: 968, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!1275 = !DISubroutineType(types: !1276)
!1276 = !{null, !426, !6}
!1277 = !DILocalVariable(name: "r", arg: 1, scope: !1274, file: !3, line: 967, type: !426)
!1278 = !DILocation(line: 967, column: 32, scope: !1274)
!1279 = !DILocalVariable(name: "a", arg: 2, scope: !1274, file: !3, line: 967, type: !6)
!1280 = !DILocation(line: 967, column: 58, scope: !1274)
!1281 = !DILocation(line: 969, column: 4, scope: !1274)
!1282 = !DILocation(line: 969, column: 9, scope: !1274)
!1283 = !DILocation(line: 969, column: 8, scope: !1274)
!1284 = !DILocation(line: 971, column: 11, scope: !1274)
!1285 = !DILocation(line: 971, column: 14, scope: !1274)
!1286 = !DILocation(line: 971, column: 3, scope: !1274)
!1287 = !DILocation(line: 976, column: 7, scope: !1288)
!1288 = distinct !DILexicalBlock(scope: !1274, file: !3, line: 972, column: 5)
!1289 = !DILocation(line: 979, column: 11, scope: !1290)
!1290 = distinct !DILexicalBlock(scope: !1288, file: !3, line: 979, column: 11)
!1291 = !DILocation(line: 979, column: 14, scope: !1290)
!1292 = !DILocation(line: 979, column: 11, scope: !1288)
!1293 = !DILocation(line: 981, column: 26, scope: !1294)
!1294 = distinct !DILexicalBlock(scope: !1290, file: !3, line: 980, column: 2)
!1295 = !DILocation(line: 981, column: 29, scope: !1294)
!1296 = !DILocation(line: 981, column: 4, scope: !1294)
!1297 = !DILocation(line: 982, column: 4, scope: !1294)
!1298 = !DILocation(line: 984, column: 11, scope: !1299)
!1299 = distinct !DILexicalBlock(scope: !1288, file: !3, line: 984, column: 11)
!1300 = !DILocation(line: 984, column: 24, scope: !1299)
!1301 = !DILocation(line: 984, column: 11, scope: !1288)
!1302 = !DILocation(line: 985, column: 12, scope: !1299)
!1303 = !DILocation(line: 985, column: 15, scope: !1299)
!1304 = !DILocation(line: 985, column: 18, scope: !1299)
!1305 = !DILocation(line: 985, column: 2, scope: !1299)
!1306 = !DILocation(line: 986, column: 16, scope: !1307)
!1307 = distinct !DILexicalBlock(scope: !1299, file: !3, line: 986, column: 16)
!1308 = !DILocation(line: 986, column: 29, scope: !1307)
!1309 = !DILocation(line: 986, column: 16, scope: !1299)
!1310 = !DILocation(line: 987, column: 27, scope: !1307)
!1311 = !DILocation(line: 987, column: 49, scope: !1307)
!1312 = !DILocation(line: 987, column: 47, scope: !1307)
!1313 = !DILocation(line: 987, column: 2, scope: !1307)
!1314 = !DILocation(line: 988, column: 7, scope: !1288)
!1315 = !DILocation(line: 991, column: 7, scope: !1288)
!1316 = !DILocation(line: 992, column: 5, scope: !1288)
!1317 = !DILocation(line: 993, column: 1, scope: !1274)
!1318 = distinct !DISubprogram(name: "real_arithmetic2", scope: !3, file: !3, line: 1063, type: !1319, scopeLine: 1065, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !406)
!1319 = !DISubroutineType(types: !1320)
!1320 = !{!8, !398, !6, !6}
!1321 = !DILocalVariable(name: "icode", arg: 1, scope: !1318, file: !3, line: 1063, type: !398)
!1322 = !DILocation(line: 1063, column: 23, scope: !1318)
!1323 = !DILocalVariable(name: "op0", arg: 2, scope: !1318, file: !3, line: 1063, type: !6)
!1324 = !DILocation(line: 1063, column: 53, scope: !1318)
!1325 = !DILocalVariable(name: "op1", arg: 3, scope: !1318, file: !3, line: 1064, type: !6)
!1326 = !DILocation(line: 1064, column: 28, scope: !1318)
!1327 = !DILocalVariable(name: "r", scope: !1318, file: !3, line: 1066, type: !8)
!1328 = !DILocation(line: 1066, column: 19, scope: !1318)
!1329 = !DILocation(line: 1067, column: 24, scope: !1318)
!1330 = !DILocation(line: 1067, column: 31, scope: !1318)
!1331 = !DILocation(line: 1067, column: 36, scope: !1318)
!1332 = !DILocation(line: 1067, column: 3, scope: !1318)
!1333 = !DILocation(line: 1068, column: 3, scope: !1318)
!1334 = distinct !DISubprogram(name: "real_compare", scope: !3, file: !3, line: 1072, type: !1335, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !406)
!1335 = !DISubroutineType(types: !1336)
!1336 = !{!399, !398, !6, !6}
!1337 = !DILocalVariable(name: "icode", arg: 1, scope: !1334, file: !3, line: 1072, type: !398)
!1338 = !DILocation(line: 1072, column: 19, scope: !1334)
!1339 = !DILocalVariable(name: "op0", arg: 2, scope: !1334, file: !3, line: 1072, type: !6)
!1340 = !DILocation(line: 1072, column: 49, scope: !1334)
!1341 = !DILocalVariable(name: "op1", arg: 3, scope: !1334, file: !3, line: 1073, type: !6)
!1342 = !DILocation(line: 1073, column: 31, scope: !1334)
!1343 = !DILocalVariable(name: "code", scope: !1334, file: !3, line: 1075, type: !25)
!1344 = !DILocation(line: 1075, column: 18, scope: !1334)
!1345 = !DILocation(line: 1075, column: 42, scope: !1334)
!1346 = !DILocation(line: 1077, column: 11, scope: !1334)
!1347 = !DILocation(line: 1077, column: 3, scope: !1334)
!1348 = !DILocation(line: 1080, column: 26, scope: !1349)
!1349 = distinct !DILexicalBlock(scope: !1334, file: !3, line: 1078, column: 5)
!1350 = !DILocation(line: 1080, column: 31, scope: !1349)
!1351 = !DILocation(line: 1080, column: 14, scope: !1349)
!1352 = !DILocation(line: 1080, column: 39, scope: !1349)
!1353 = !DILocation(line: 1080, column: 7, scope: !1349)
!1354 = !DILocation(line: 1082, column: 26, scope: !1349)
!1355 = !DILocation(line: 1082, column: 31, scope: !1349)
!1356 = !DILocation(line: 1082, column: 14, scope: !1349)
!1357 = !DILocation(line: 1082, column: 39, scope: !1349)
!1358 = !DILocation(line: 1082, column: 7, scope: !1349)
!1359 = !DILocation(line: 1084, column: 26, scope: !1349)
!1360 = !DILocation(line: 1084, column: 31, scope: !1349)
!1361 = !DILocation(line: 1084, column: 14, scope: !1349)
!1362 = !DILocation(line: 1084, column: 40, scope: !1349)
!1363 = !DILocation(line: 1084, column: 7, scope: !1349)
!1364 = !DILocation(line: 1086, column: 26, scope: !1349)
!1365 = !DILocation(line: 1086, column: 31, scope: !1349)
!1366 = !DILocation(line: 1086, column: 14, scope: !1349)
!1367 = !DILocation(line: 1086, column: 40, scope: !1349)
!1368 = !DILocation(line: 1086, column: 7, scope: !1349)
!1369 = !DILocation(line: 1088, column: 26, scope: !1349)
!1370 = !DILocation(line: 1088, column: 31, scope: !1349)
!1371 = !DILocation(line: 1088, column: 14, scope: !1349)
!1372 = !DILocation(line: 1088, column: 40, scope: !1349)
!1373 = !DILocation(line: 1088, column: 7, scope: !1349)
!1374 = !DILocation(line: 1090, column: 26, scope: !1349)
!1375 = !DILocation(line: 1090, column: 31, scope: !1349)
!1376 = !DILocation(line: 1090, column: 14, scope: !1349)
!1377 = !DILocation(line: 1090, column: 40, scope: !1349)
!1378 = !DILocation(line: 1090, column: 7, scope: !1349)
!1379 = !DILocation(line: 1092, column: 14, scope: !1349)
!1380 = !DILocation(line: 1092, column: 19, scope: !1349)
!1381 = !DILocation(line: 1092, column: 22, scope: !1349)
!1382 = !DILocation(line: 1092, column: 33, scope: !1349)
!1383 = !DILocation(line: 1092, column: 36, scope: !1349)
!1384 = !DILocation(line: 1092, column: 41, scope: !1349)
!1385 = !DILocation(line: 1092, column: 44, scope: !1349)
!1386 = !DILocation(line: 1092, column: 7, scope: !1349)
!1387 = !DILocation(line: 1094, column: 14, scope: !1349)
!1388 = !DILocation(line: 1094, column: 19, scope: !1349)
!1389 = !DILocation(line: 1094, column: 22, scope: !1349)
!1390 = !DILocation(line: 1094, column: 33, scope: !1349)
!1391 = !DILocation(line: 1094, column: 36, scope: !1349)
!1392 = !DILocation(line: 1094, column: 41, scope: !1349)
!1393 = !DILocation(line: 1094, column: 44, scope: !1349)
!1394 = !DILocation(line: 0, scope: !1349)
!1395 = !DILocation(line: 1094, column: 7, scope: !1349)
!1396 = !DILocation(line: 1096, column: 26, scope: !1349)
!1397 = !DILocation(line: 1096, column: 31, scope: !1349)
!1398 = !DILocation(line: 1096, column: 14, scope: !1349)
!1399 = !DILocation(line: 1096, column: 40, scope: !1349)
!1400 = !DILocation(line: 1096, column: 7, scope: !1349)
!1401 = !DILocation(line: 1098, column: 26, scope: !1349)
!1402 = !DILocation(line: 1098, column: 31, scope: !1349)
!1403 = !DILocation(line: 1098, column: 14, scope: !1349)
!1404 = !DILocation(line: 1098, column: 40, scope: !1349)
!1405 = !DILocation(line: 1098, column: 7, scope: !1349)
!1406 = !DILocation(line: 1100, column: 26, scope: !1349)
!1407 = !DILocation(line: 1100, column: 31, scope: !1349)
!1408 = !DILocation(line: 1100, column: 14, scope: !1349)
!1409 = !DILocation(line: 1100, column: 39, scope: !1349)
!1410 = !DILocation(line: 1100, column: 7, scope: !1349)
!1411 = !DILocation(line: 1102, column: 26, scope: !1349)
!1412 = !DILocation(line: 1102, column: 31, scope: !1349)
!1413 = !DILocation(line: 1102, column: 14, scope: !1349)
!1414 = !DILocation(line: 1102, column: 39, scope: !1349)
!1415 = !DILocation(line: 1102, column: 7, scope: !1349)
!1416 = !DILocation(line: 1104, column: 26, scope: !1349)
!1417 = !DILocation(line: 1104, column: 31, scope: !1349)
!1418 = !DILocation(line: 1104, column: 14, scope: !1349)
!1419 = !DILocation(line: 1104, column: 39, scope: !1349)
!1420 = !DILocation(line: 1104, column: 7, scope: !1349)
!1421 = !DILocation(line: 1106, column: 26, scope: !1349)
!1422 = !DILocation(line: 1106, column: 31, scope: !1349)
!1423 = !DILocation(line: 1106, column: 14, scope: !1349)
!1424 = !DILocation(line: 1106, column: 39, scope: !1349)
!1425 = !DILocation(line: 1106, column: 7, scope: !1349)
!1426 = !DILocation(line: 1109, column: 7, scope: !1349)
!1427 = !DILocation(line: 1110, column: 5, scope: !1349)
!1428 = !DILocation(line: 1112, column: 5, scope: !1334)
!1429 = !DILocation(line: 1114, column: 1, scope: !1334)
!1430 = distinct !DISubprogram(name: "real_exponent", scope: !3, file: !3, line: 1119, type: !1431, scopeLine: 1120, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !406)
!1431 = !DISubroutineType(types: !1432)
!1432 = !{!398, !6}
!1433 = !DILocalVariable(name: "r", arg: 1, scope: !1430, file: !3, line: 1119, type: !6)
!1434 = !DILocation(line: 1119, column: 39, scope: !1430)
!1435 = !DILocation(line: 1121, column: 11, scope: !1430)
!1436 = !DILocation(line: 1121, column: 14, scope: !1430)
!1437 = !DILocation(line: 1121, column: 3, scope: !1430)
!1438 = !DILocation(line: 1124, column: 7, scope: !1439)
!1439 = distinct !DILexicalBlock(scope: !1430, file: !3, line: 1122, column: 5)
!1440 = !DILocation(line: 1127, column: 7, scope: !1439)
!1441 = !DILocation(line: 1129, column: 14, scope: !1439)
!1442 = !DILocation(line: 1129, column: 7, scope: !1439)
!1443 = !DILocation(line: 1131, column: 7, scope: !1439)
!1444 = !DILocation(line: 1132, column: 5, scope: !1439)
!1445 = !DILocation(line: 1134, column: 5, scope: !1430)
!1446 = !DILocation(line: 1136, column: 1, scope: !1430)
!1447 = distinct !DISubprogram(name: "real_ldexp", scope: !3, file: !3, line: 1141, type: !1448, scopeLine: 1142, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !406)
!1448 = !DISubroutineType(types: !1449)
!1449 = !{null, !426, !6, !398}
!1450 = !DILocalVariable(name: "r", arg: 1, scope: !1447, file: !3, line: 1141, type: !426)
!1451 = !DILocation(line: 1141, column: 30, scope: !1447)
!1452 = !DILocalVariable(name: "op0", arg: 2, scope: !1447, file: !3, line: 1141, type: !6)
!1453 = !DILocation(line: 1141, column: 56, scope: !1447)
!1454 = !DILocalVariable(name: "exp", arg: 3, scope: !1447, file: !3, line: 1141, type: !398)
!1455 = !DILocation(line: 1141, column: 65, scope: !1447)
!1456 = !DILocation(line: 1143, column: 4, scope: !1447)
!1457 = !DILocation(line: 1143, column: 9, scope: !1447)
!1458 = !DILocation(line: 1143, column: 8, scope: !1447)
!1459 = !DILocation(line: 1144, column: 11, scope: !1447)
!1460 = !DILocation(line: 1144, column: 14, scope: !1447)
!1461 = !DILocation(line: 1144, column: 3, scope: !1447)
!1462 = !DILocation(line: 1149, column: 7, scope: !1463)
!1463 = distinct !DILexicalBlock(scope: !1447, file: !3, line: 1145, column: 5)
!1464 = !DILocation(line: 1152, column: 14, scope: !1463)
!1465 = !DILocation(line: 1152, column: 11, scope: !1463)
!1466 = !DILocation(line: 1153, column: 11, scope: !1467)
!1467 = distinct !DILexicalBlock(scope: !1463, file: !3, line: 1153, column: 11)
!1468 = !DILocation(line: 1153, column: 15, scope: !1467)
!1469 = !DILocation(line: 1153, column: 11, scope: !1463)
!1470 = !DILocation(line: 1154, column: 11, scope: !1467)
!1471 = !DILocation(line: 1154, column: 14, scope: !1467)
!1472 = !DILocation(line: 1154, column: 17, scope: !1467)
!1473 = !DILocation(line: 1154, column: 2, scope: !1467)
!1474 = !DILocation(line: 1155, column: 16, scope: !1475)
!1475 = distinct !DILexicalBlock(scope: !1467, file: !3, line: 1155, column: 16)
!1476 = !DILocation(line: 1155, column: 20, scope: !1475)
!1477 = !DILocation(line: 1155, column: 16, scope: !1467)
!1478 = !DILocation(line: 1156, column: 12, scope: !1475)
!1479 = !DILocation(line: 1156, column: 15, scope: !1475)
!1480 = !DILocation(line: 1156, column: 18, scope: !1475)
!1481 = !DILocation(line: 1156, column: 2, scope: !1475)
!1482 = !DILocation(line: 1158, column: 2, scope: !1475)
!1483 = !DILocation(line: 1159, column: 7, scope: !1463)
!1484 = !DILocation(line: 1162, column: 7, scope: !1463)
!1485 = !DILocation(line: 1163, column: 5, scope: !1463)
!1486 = !DILocation(line: 1164, column: 1, scope: !1447)
!1487 = distinct !DISubprogram(name: "get_inf", scope: !3, file: !3, line: 155, type: !1488, scopeLine: 156, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!1488 = !DISubroutineType(types: !1489)
!1489 = !{null, !426, !398}
!1490 = !DILocalVariable(name: "r", arg: 1, scope: !1487, file: !3, line: 155, type: !426)
!1491 = !DILocation(line: 155, column: 27, scope: !1487)
!1492 = !DILocalVariable(name: "sign", arg: 2, scope: !1487, file: !3, line: 155, type: !398)
!1493 = !DILocation(line: 155, column: 34, scope: !1487)
!1494 = !DILocation(line: 157, column: 11, scope: !1487)
!1495 = !DILocation(line: 157, column: 3, scope: !1487)
!1496 = !DILocation(line: 158, column: 3, scope: !1487)
!1497 = !DILocation(line: 158, column: 6, scope: !1487)
!1498 = !DILocation(line: 158, column: 9, scope: !1487)
!1499 = !DILocation(line: 159, column: 13, scope: !1487)
!1500 = !DILocation(line: 159, column: 3, scope: !1487)
!1501 = !DILocation(line: 159, column: 6, scope: !1487)
!1502 = !DILocation(line: 159, column: 11, scope: !1487)
!1503 = !DILocation(line: 160, column: 1, scope: !1487)
!1504 = distinct !DISubprogram(name: "get_zero", scope: !3, file: !3, line: 127, type: !1488, scopeLine: 128, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!1505 = !DILocalVariable(name: "r", arg: 1, scope: !1504, file: !3, line: 127, type: !426)
!1506 = !DILocation(line: 127, column: 28, scope: !1504)
!1507 = !DILocalVariable(name: "sign", arg: 2, scope: !1504, file: !3, line: 127, type: !398)
!1508 = !DILocation(line: 127, column: 35, scope: !1504)
!1509 = !DILocation(line: 129, column: 11, scope: !1504)
!1510 = !DILocation(line: 129, column: 3, scope: !1504)
!1511 = !DILocation(line: 130, column: 13, scope: !1504)
!1512 = !DILocation(line: 130, column: 3, scope: !1504)
!1513 = !DILocation(line: 130, column: 6, scope: !1504)
!1514 = !DILocation(line: 130, column: 11, scope: !1504)
!1515 = !DILocation(line: 131, column: 1, scope: !1504)
!1516 = distinct !DISubprogram(name: "real_isinf", scope: !3, file: !3, line: 1169, type: !1517, scopeLine: 1170, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !406)
!1517 = !DISubroutineType(types: !1518)
!1518 = !{!399, !6}
!1519 = !DILocalVariable(name: "r", arg: 1, scope: !1516, file: !3, line: 1169, type: !6)
!1520 = !DILocation(line: 1169, column: 36, scope: !1516)
!1521 = !DILocation(line: 1171, column: 11, scope: !1516)
!1522 = !DILocation(line: 1171, column: 14, scope: !1516)
!1523 = !DILocation(line: 1171, column: 17, scope: !1516)
!1524 = !DILocation(line: 1171, column: 10, scope: !1516)
!1525 = !DILocation(line: 1171, column: 3, scope: !1516)
!1526 = distinct !DISubprogram(name: "real_isnan", scope: !3, file: !3, line: 1177, type: !1517, scopeLine: 1178, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !406)
!1527 = !DILocalVariable(name: "r", arg: 1, scope: !1526, file: !3, line: 1177, type: !6)
!1528 = !DILocation(line: 1177, column: 36, scope: !1526)
!1529 = !DILocation(line: 1179, column: 11, scope: !1526)
!1530 = !DILocation(line: 1179, column: 14, scope: !1526)
!1531 = !DILocation(line: 1179, column: 17, scope: !1526)
!1532 = !DILocation(line: 1179, column: 10, scope: !1526)
!1533 = !DILocation(line: 1179, column: 3, scope: !1526)
!1534 = distinct !DISubprogram(name: "real_isfinite", scope: !3, file: !3, line: 1185, type: !1517, scopeLine: 1186, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !406)
!1535 = !DILocalVariable(name: "r", arg: 1, scope: !1534, file: !3, line: 1185, type: !6)
!1536 = !DILocation(line: 1185, column: 39, scope: !1534)
!1537 = !DILocation(line: 1187, column: 11, scope: !1534)
!1538 = !DILocation(line: 1187, column: 14, scope: !1534)
!1539 = !DILocation(line: 1187, column: 17, scope: !1534)
!1540 = !DILocation(line: 1187, column: 29, scope: !1534)
!1541 = !DILocation(line: 1187, column: 33, scope: !1534)
!1542 = !DILocation(line: 1187, column: 36, scope: !1534)
!1543 = !DILocation(line: 1187, column: 39, scope: !1534)
!1544 = !DILocation(line: 0, scope: !1534)
!1545 = !DILocation(line: 1187, column: 10, scope: !1534)
!1546 = !DILocation(line: 1187, column: 3, scope: !1534)
!1547 = distinct !DISubprogram(name: "real_isneg", scope: !3, file: !3, line: 1193, type: !1517, scopeLine: 1194, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !406)
!1548 = !DILocalVariable(name: "r", arg: 1, scope: !1547, file: !3, line: 1193, type: !6)
!1549 = !DILocation(line: 1193, column: 36, scope: !1547)
!1550 = !DILocation(line: 1195, column: 10, scope: !1547)
!1551 = !DILocation(line: 1195, column: 13, scope: !1547)
!1552 = !DILocation(line: 1195, column: 3, scope: !1547)
!1553 = distinct !DISubprogram(name: "real_isnegzero", scope: !3, file: !3, line: 1201, type: !1517, scopeLine: 1202, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !406)
!1554 = !DILocalVariable(name: "r", arg: 1, scope: !1553, file: !3, line: 1201, type: !6)
!1555 = !DILocation(line: 1201, column: 40, scope: !1553)
!1556 = !DILocation(line: 1203, column: 10, scope: !1553)
!1557 = !DILocation(line: 1203, column: 13, scope: !1553)
!1558 = !DILocation(line: 1203, column: 18, scope: !1553)
!1559 = !DILocation(line: 1203, column: 21, scope: !1553)
!1560 = !DILocation(line: 1203, column: 24, scope: !1553)
!1561 = !DILocation(line: 1203, column: 27, scope: !1553)
!1562 = !DILocation(line: 0, scope: !1553)
!1563 = !DILocation(line: 1203, column: 3, scope: !1553)
!1564 = distinct !DISubprogram(name: "real_identical", scope: !3, file: !3, line: 1209, type: !1565, scopeLine: 1210, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !406)
!1565 = !DISubroutineType(types: !1566)
!1566 = !{!399, !6, !6}
!1567 = !DILocalVariable(name: "a", arg: 1, scope: !1564, file: !3, line: 1209, type: !6)
!1568 = !DILocation(line: 1209, column: 40, scope: !1564)
!1569 = !DILocalVariable(name: "b", arg: 2, scope: !1564, file: !3, line: 1209, type: !6)
!1570 = !DILocation(line: 1209, column: 66, scope: !1564)
!1571 = !DILocalVariable(name: "i", scope: !1564, file: !3, line: 1211, type: !398)
!1572 = !DILocation(line: 1211, column: 7, scope: !1564)
!1573 = !DILocation(line: 1213, column: 7, scope: !1574)
!1574 = distinct !DILexicalBlock(scope: !1564, file: !3, line: 1213, column: 7)
!1575 = !DILocation(line: 1213, column: 10, scope: !1574)
!1576 = !DILocation(line: 1213, column: 16, scope: !1574)
!1577 = !DILocation(line: 1213, column: 19, scope: !1574)
!1578 = !DILocation(line: 1213, column: 13, scope: !1574)
!1579 = !DILocation(line: 1213, column: 7, scope: !1564)
!1580 = !DILocation(line: 1214, column: 5, scope: !1574)
!1581 = !DILocation(line: 1215, column: 7, scope: !1582)
!1582 = distinct !DILexicalBlock(scope: !1564, file: !3, line: 1215, column: 7)
!1583 = !DILocation(line: 1215, column: 10, scope: !1582)
!1584 = !DILocation(line: 1215, column: 18, scope: !1582)
!1585 = !DILocation(line: 1215, column: 21, scope: !1582)
!1586 = !DILocation(line: 1215, column: 15, scope: !1582)
!1587 = !DILocation(line: 1215, column: 7, scope: !1564)
!1588 = !DILocation(line: 1216, column: 5, scope: !1582)
!1589 = !DILocation(line: 1218, column: 11, scope: !1564)
!1590 = !DILocation(line: 1218, column: 14, scope: !1564)
!1591 = !DILocation(line: 1218, column: 3, scope: !1564)
!1592 = !DILocation(line: 1222, column: 7, scope: !1593)
!1593 = distinct !DILexicalBlock(scope: !1564, file: !3, line: 1219, column: 5)
!1594 = !DILocation(line: 1225, column: 11, scope: !1595)
!1595 = distinct !DILexicalBlock(scope: !1593, file: !3, line: 1225, column: 11)
!1596 = !DILocation(line: 1225, column: 14, scope: !1595)
!1597 = !DILocation(line: 1225, column: 25, scope: !1595)
!1598 = !DILocation(line: 1225, column: 28, scope: !1595)
!1599 = !DILocation(line: 1225, column: 22, scope: !1595)
!1600 = !DILocation(line: 1225, column: 11, scope: !1593)
!1601 = !DILocation(line: 1226, column: 9, scope: !1595)
!1602 = !DILocation(line: 1227, column: 11, scope: !1603)
!1603 = distinct !DILexicalBlock(scope: !1593, file: !3, line: 1227, column: 11)
!1604 = !DILocation(line: 1227, column: 27, scope: !1603)
!1605 = !DILocation(line: 1227, column: 24, scope: !1603)
!1606 = !DILocation(line: 1227, column: 11, scope: !1593)
!1607 = !DILocation(line: 1228, column: 2, scope: !1603)
!1608 = !DILocation(line: 1229, column: 7, scope: !1593)
!1609 = !DILocation(line: 1232, column: 11, scope: !1610)
!1610 = distinct !DILexicalBlock(scope: !1593, file: !3, line: 1232, column: 11)
!1611 = !DILocation(line: 1232, column: 14, scope: !1610)
!1612 = !DILocation(line: 1232, column: 28, scope: !1610)
!1613 = !DILocation(line: 1232, column: 31, scope: !1610)
!1614 = !DILocation(line: 1232, column: 25, scope: !1610)
!1615 = !DILocation(line: 1232, column: 11, scope: !1593)
!1616 = !DILocation(line: 1233, column: 2, scope: !1610)
!1617 = !DILocation(line: 1235, column: 11, scope: !1618)
!1618 = distinct !DILexicalBlock(scope: !1593, file: !3, line: 1235, column: 11)
!1619 = !DILocation(line: 1235, column: 14, scope: !1618)
!1620 = !DILocation(line: 1235, column: 24, scope: !1618)
!1621 = !DILocation(line: 1235, column: 27, scope: !1618)
!1622 = !DILocation(line: 1235, column: 30, scope: !1618)
!1623 = !DILocation(line: 1235, column: 11, scope: !1593)
!1624 = !DILocation(line: 1236, column: 9, scope: !1618)
!1625 = !DILocation(line: 1236, column: 12, scope: !1618)
!1626 = !DILocation(line: 1236, column: 25, scope: !1618)
!1627 = !DILocation(line: 1236, column: 28, scope: !1618)
!1628 = !DILocation(line: 1236, column: 22, scope: !1618)
!1629 = !DILocation(line: 1236, column: 2, scope: !1618)
!1630 = !DILocation(line: 1237, column: 7, scope: !1593)
!1631 = !DILocation(line: 1240, column: 7, scope: !1593)
!1632 = !DILocation(line: 1241, column: 5, scope: !1593)
!1633 = !DILocation(line: 1243, column: 10, scope: !1634)
!1634 = distinct !DILexicalBlock(scope: !1564, file: !3, line: 1243, column: 3)
!1635 = !DILocation(line: 1243, column: 8, scope: !1634)
!1636 = !DILocation(line: 1243, column: 15, scope: !1637)
!1637 = distinct !DILexicalBlock(scope: !1634, file: !3, line: 1243, column: 3)
!1638 = !DILocation(line: 1243, column: 17, scope: !1637)
!1639 = !DILocation(line: 1243, column: 3, scope: !1634)
!1640 = !DILocation(line: 1244, column: 9, scope: !1641)
!1641 = distinct !DILexicalBlock(scope: !1637, file: !3, line: 1244, column: 9)
!1642 = !DILocation(line: 1244, column: 12, scope: !1641)
!1643 = !DILocation(line: 1244, column: 16, scope: !1641)
!1644 = !DILocation(line: 1244, column: 22, scope: !1641)
!1645 = !DILocation(line: 1244, column: 25, scope: !1641)
!1646 = !DILocation(line: 1244, column: 29, scope: !1641)
!1647 = !DILocation(line: 1244, column: 19, scope: !1641)
!1648 = !DILocation(line: 1244, column: 9, scope: !1637)
!1649 = !DILocation(line: 1245, column: 7, scope: !1641)
!1650 = !DILocation(line: 1244, column: 30, scope: !1641)
!1651 = !DILocation(line: 1243, column: 26, scope: !1637)
!1652 = !DILocation(line: 1243, column: 3, scope: !1637)
!1653 = distinct !{!1653, !1639, !1654}
!1654 = !DILocation(line: 1245, column: 14, scope: !1634)
!1655 = !DILocation(line: 1247, column: 3, scope: !1564)
!1656 = !DILocation(line: 1248, column: 1, scope: !1564)
!1657 = distinct !DISubprogram(name: "exact_real_inverse", scope: !3, file: !3, line: 1254, type: !1658, scopeLine: 1255, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !406)
!1658 = !DISubroutineType(types: !1659)
!1659 = !{!399, !226, !426}
!1660 = !DILocalVariable(name: "mode", arg: 1, scope: !1657, file: !3, line: 1254, type: !226)
!1661 = !DILocation(line: 1254, column: 39, scope: !1657)
!1662 = !DILocalVariable(name: "r", arg: 2, scope: !1657, file: !3, line: 1254, type: !426)
!1663 = !DILocation(line: 1254, column: 62, scope: !1657)
!1664 = !DILocalVariable(name: "one", scope: !1657, file: !3, line: 1256, type: !6)
!1665 = !DILocation(line: 1256, column: 26, scope: !1657)
!1666 = !DILocation(line: 1256, column: 32, scope: !1657)
!1667 = !DILocalVariable(name: "u", scope: !1657, file: !3, line: 1257, type: !8)
!1668 = !DILocation(line: 1257, column: 19, scope: !1657)
!1669 = !DILocalVariable(name: "i", scope: !1657, file: !3, line: 1258, type: !398)
!1670 = !DILocation(line: 1258, column: 7, scope: !1657)
!1671 = !DILocation(line: 1260, column: 7, scope: !1672)
!1672 = distinct !DILexicalBlock(scope: !1657, file: !3, line: 1260, column: 7)
!1673 = !DILocation(line: 1260, column: 10, scope: !1672)
!1674 = !DILocation(line: 1260, column: 13, scope: !1672)
!1675 = !DILocation(line: 1260, column: 7, scope: !1657)
!1676 = !DILocation(line: 1261, column: 5, scope: !1672)
!1677 = !DILocation(line: 1264, column: 10, scope: !1678)
!1678 = distinct !DILexicalBlock(scope: !1657, file: !3, line: 1264, column: 3)
!1679 = !DILocation(line: 1264, column: 8, scope: !1678)
!1680 = !DILocation(line: 1264, column: 15, scope: !1681)
!1681 = distinct !DILexicalBlock(scope: !1678, file: !3, line: 1264, column: 3)
!1682 = !DILocation(line: 1264, column: 17, scope: !1681)
!1683 = !DILocation(line: 1264, column: 3, scope: !1678)
!1684 = !DILocation(line: 1265, column: 9, scope: !1685)
!1685 = distinct !DILexicalBlock(scope: !1681, file: !3, line: 1265, column: 9)
!1686 = !DILocation(line: 1265, column: 12, scope: !1685)
!1687 = !DILocation(line: 1265, column: 16, scope: !1685)
!1688 = !DILocation(line: 1265, column: 19, scope: !1685)
!1689 = !DILocation(line: 1265, column: 9, scope: !1681)
!1690 = !DILocation(line: 1266, column: 7, scope: !1685)
!1691 = !DILocation(line: 1265, column: 22, scope: !1685)
!1692 = !DILocation(line: 1264, column: 28, scope: !1681)
!1693 = !DILocation(line: 1264, column: 3, scope: !1681)
!1694 = distinct !{!1694, !1683, !1695}
!1695 = !DILocation(line: 1266, column: 14, scope: !1678)
!1696 = !DILocation(line: 1267, column: 7, scope: !1697)
!1697 = distinct !DILexicalBlock(scope: !1657, file: !3, line: 1267, column: 7)
!1698 = !DILocation(line: 1267, column: 10, scope: !1697)
!1699 = !DILocation(line: 1267, column: 23, scope: !1697)
!1700 = !DILocation(line: 1267, column: 7, scope: !1657)
!1701 = !DILocation(line: 1268, column: 5, scope: !1697)
!1702 = !DILocation(line: 1271, column: 18, scope: !1657)
!1703 = !DILocation(line: 1271, column: 23, scope: !1657)
!1704 = !DILocation(line: 1271, column: 3, scope: !1657)
!1705 = !DILocation(line: 1272, column: 21, scope: !1657)
!1706 = !DILocation(line: 1272, column: 3, scope: !1657)
!1707 = !DILocation(line: 1275, column: 9, scope: !1708)
!1708 = distinct !DILexicalBlock(scope: !1657, file: !3, line: 1275, column: 7)
!1709 = !DILocation(line: 1275, column: 12, scope: !1708)
!1710 = !DILocation(line: 1275, column: 7, scope: !1657)
!1711 = !DILocation(line: 1276, column: 5, scope: !1708)
!1712 = !DILocation(line: 1277, column: 10, scope: !1713)
!1713 = distinct !DILexicalBlock(scope: !1657, file: !3, line: 1277, column: 3)
!1714 = !DILocation(line: 1277, column: 8, scope: !1713)
!1715 = !DILocation(line: 1277, column: 15, scope: !1716)
!1716 = distinct !DILexicalBlock(scope: !1713, file: !3, line: 1277, column: 3)
!1717 = !DILocation(line: 1277, column: 17, scope: !1716)
!1718 = !DILocation(line: 1277, column: 3, scope: !1713)
!1719 = !DILocation(line: 1278, column: 11, scope: !1720)
!1720 = distinct !DILexicalBlock(scope: !1716, file: !3, line: 1278, column: 9)
!1721 = !DILocation(line: 1278, column: 15, scope: !1720)
!1722 = !DILocation(line: 1278, column: 9, scope: !1720)
!1723 = !DILocation(line: 1278, column: 18, scope: !1720)
!1724 = !DILocation(line: 1278, column: 9, scope: !1716)
!1725 = !DILocation(line: 1279, column: 7, scope: !1720)
!1726 = !DILocation(line: 1278, column: 21, scope: !1720)
!1727 = !DILocation(line: 1277, column: 28, scope: !1716)
!1728 = !DILocation(line: 1277, column: 3, scope: !1716)
!1729 = distinct !{!1729, !1718, !1730}
!1730 = !DILocation(line: 1279, column: 14, scope: !1713)
!1731 = !DILocation(line: 1280, column: 9, scope: !1732)
!1732 = distinct !DILexicalBlock(scope: !1657, file: !3, line: 1280, column: 7)
!1733 = !DILocation(line: 1280, column: 7, scope: !1732)
!1734 = !DILocation(line: 1280, column: 22, scope: !1732)
!1735 = !DILocation(line: 1280, column: 7, scope: !1657)
!1736 = !DILocation(line: 1281, column: 5, scope: !1732)
!1737 = !DILocation(line: 1283, column: 4, scope: !1657)
!1738 = !DILocation(line: 1283, column: 8, scope: !1657)
!1739 = !DILocation(line: 1284, column: 3, scope: !1657)
!1740 = !DILocation(line: 1285, column: 1, scope: !1657)
!1741 = !DILocalVariable(name: "n", arg: 1, scope: !510, file: !3, line: 2298, type: !398)
!1742 = !DILocation(line: 2298, column: 17, scope: !510)
!1743 = !DILocation(line: 2302, column: 3, scope: !510)
!1744 = !DILocation(line: 2303, column: 3, scope: !510)
!1745 = !DILocation(line: 2305, column: 7, scope: !1746)
!1746 = distinct !DILexicalBlock(scope: !510, file: !3, line: 2305, column: 7)
!1747 = !DILocation(line: 2305, column: 9, scope: !1746)
!1748 = !DILocation(line: 2305, column: 13, scope: !1746)
!1749 = !DILocation(line: 2305, column: 20, scope: !1746)
!1750 = !DILocation(line: 2305, column: 16, scope: !1746)
!1751 = !DILocation(line: 2305, column: 23, scope: !1746)
!1752 = !DILocation(line: 2305, column: 26, scope: !1746)
!1753 = !DILocation(line: 2305, column: 7, scope: !510)
!1754 = !DILocation(line: 2306, column: 29, scope: !1746)
!1755 = !DILocation(line: 2306, column: 25, scope: !1746)
!1756 = !DILocation(line: 2306, column: 43, scope: !1746)
!1757 = !DILocation(line: 2306, column: 5, scope: !1746)
!1758 = !DILocation(line: 2308, column: 15, scope: !510)
!1759 = !DILocation(line: 2308, column: 11, scope: !510)
!1760 = !DILocation(line: 2308, column: 3, scope: !510)
!1761 = distinct !DISubprogram(name: "real_convert", scope: !3, file: !3, line: 2735, type: !1762, scopeLine: 2737, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !406)
!1762 = !DISubroutineType(types: !1763)
!1763 = !{null, !426, !226, !6}
!1764 = !DILocalVariable(name: "r", arg: 1, scope: !1761, file: !3, line: 2735, type: !426)
!1765 = !DILocation(line: 2735, column: 32, scope: !1761)
!1766 = !DILocalVariable(name: "mode", arg: 2, scope: !1761, file: !3, line: 2735, type: !226)
!1767 = !DILocation(line: 2735, column: 53, scope: !1761)
!1768 = !DILocalVariable(name: "a", arg: 3, scope: !1761, file: !3, line: 2736, type: !6)
!1769 = !DILocation(line: 2736, column: 31, scope: !1761)
!1770 = !DILocalVariable(name: "fmt", scope: !1761, file: !3, line: 2738, type: !419)
!1771 = !DILocation(line: 2738, column: 29, scope: !1761)
!1772 = !DILocation(line: 2740, column: 9, scope: !1761)
!1773 = !DILocation(line: 2740, column: 7, scope: !1761)
!1774 = !DILocation(line: 2741, column: 3, scope: !1761)
!1775 = !DILocation(line: 2743, column: 4, scope: !1761)
!1776 = !DILocation(line: 2743, column: 9, scope: !1761)
!1777 = !DILocation(line: 2743, column: 8, scope: !1761)
!1778 = !DILocation(line: 2745, column: 7, scope: !1779)
!1779 = distinct !DILexicalBlock(scope: !1761, file: !3, line: 2745, column: 7)
!1780 = !DILocation(line: 2745, column: 10, scope: !1779)
!1781 = !DILocation(line: 2745, column: 18, scope: !1779)
!1782 = !DILocation(line: 2745, column: 21, scope: !1779)
!1783 = !DILocation(line: 2745, column: 26, scope: !1779)
!1784 = !DILocation(line: 2745, column: 28, scope: !1779)
!1785 = !DILocation(line: 2745, column: 7, scope: !1761)
!1786 = !DILocation(line: 2746, column: 27, scope: !1779)
!1787 = !DILocation(line: 2746, column: 30, scope: !1779)
!1788 = !DILocation(line: 2746, column: 36, scope: !1779)
!1789 = !DILocation(line: 2746, column: 5, scope: !1779)
!1790 = !DILocation(line: 2748, column: 21, scope: !1761)
!1791 = !DILocation(line: 2748, column: 26, scope: !1761)
!1792 = !DILocation(line: 2748, column: 3, scope: !1761)
!1793 = !DILocation(line: 2751, column: 7, scope: !1794)
!1794 = distinct !DILexicalBlock(scope: !1761, file: !3, line: 2751, column: 7)
!1795 = !DILocation(line: 2751, column: 10, scope: !1794)
!1796 = !DILocation(line: 2751, column: 13, scope: !1794)
!1797 = !DILocation(line: 2751, column: 7, scope: !1761)
!1798 = !DILocation(line: 2752, column: 16, scope: !1794)
!1799 = !DILocation(line: 2752, column: 5, scope: !1794)
!1800 = !DILocation(line: 2753, column: 1, scope: !1761)
!1801 = distinct !DISubprogram(name: "real_can_shorten_arithmetic", scope: !3, file: !3, line: 1292, type: !1802, scopeLine: 1293, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !406)
!1802 = !DISubroutineType(types: !1803)
!1803 = !{!399, !226, !226}
!1804 = !DILocalVariable(name: "imode", arg: 1, scope: !1801, file: !3, line: 1292, type: !226)
!1805 = !DILocation(line: 1292, column: 48, scope: !1801)
!1806 = !DILocalVariable(name: "tmode", arg: 2, scope: !1801, file: !3, line: 1292, type: !226)
!1807 = !DILocation(line: 1292, column: 73, scope: !1801)
!1808 = !DILocalVariable(name: "tfmt", scope: !1801, file: !3, line: 1294, type: !419)
!1809 = !DILocation(line: 1294, column: 29, scope: !1801)
!1810 = !DILocalVariable(name: "ifmt", scope: !1801, file: !3, line: 1294, type: !419)
!1811 = !DILocation(line: 1294, column: 36, scope: !1801)
!1812 = !DILocation(line: 1295, column: 10, scope: !1801)
!1813 = !DILocation(line: 1295, column: 8, scope: !1801)
!1814 = !DILocation(line: 1296, column: 10, scope: !1801)
!1815 = !DILocation(line: 1296, column: 8, scope: !1801)
!1816 = !DILocation(line: 1300, column: 11, scope: !1801)
!1817 = !DILocation(line: 1300, column: 17, scope: !1801)
!1818 = !DILocation(line: 1300, column: 22, scope: !1801)
!1819 = !DILocation(line: 1300, column: 28, scope: !1801)
!1820 = !DILocation(line: 1300, column: 19, scope: !1801)
!1821 = !DILocation(line: 1301, column: 4, scope: !1801)
!1822 = !DILocation(line: 1301, column: 7, scope: !1801)
!1823 = !DILocation(line: 1301, column: 13, scope: !1801)
!1824 = !DILocation(line: 1301, column: 21, scope: !1801)
!1825 = !DILocation(line: 1301, column: 27, scope: !1801)
!1826 = !DILocation(line: 1301, column: 19, scope: !1801)
!1827 = !DILocation(line: 1301, column: 15, scope: !1801)
!1828 = !DILocation(line: 1302, column: 4, scope: !1801)
!1829 = !DILocation(line: 1302, column: 7, scope: !1801)
!1830 = !DILocation(line: 1302, column: 13, scope: !1801)
!1831 = !DILocation(line: 1302, column: 24, scope: !1801)
!1832 = !DILocation(line: 1302, column: 30, scope: !1801)
!1833 = !DILocation(line: 1302, column: 22, scope: !1801)
!1834 = !DILocation(line: 1302, column: 37, scope: !1801)
!1835 = !DILocation(line: 1302, column: 43, scope: !1801)
!1836 = !DILocation(line: 1302, column: 35, scope: !1801)
!1837 = !DILocation(line: 1302, column: 45, scope: !1801)
!1838 = !DILocation(line: 1302, column: 18, scope: !1801)
!1839 = !DILocation(line: 1303, column: 4, scope: !1801)
!1840 = !DILocation(line: 1303, column: 7, scope: !1801)
!1841 = !DILocation(line: 1303, column: 13, scope: !1801)
!1842 = !DILocation(line: 1303, column: 20, scope: !1801)
!1843 = !DILocation(line: 1303, column: 26, scope: !1801)
!1844 = !DILocation(line: 1303, column: 33, scope: !1801)
!1845 = !DILocation(line: 1303, column: 39, scope: !1801)
!1846 = !DILocation(line: 1303, column: 31, scope: !1801)
!1847 = !DILocation(line: 1303, column: 46, scope: !1801)
!1848 = !DILocation(line: 1303, column: 52, scope: !1801)
!1849 = !DILocation(line: 1303, column: 44, scope: !1801)
!1850 = !DILocation(line: 1303, column: 54, scope: !1801)
!1851 = !DILocation(line: 1303, column: 18, scope: !1801)
!1852 = !DILocation(line: 1304, column: 4, scope: !1801)
!1853 = !DILocation(line: 1304, column: 7, scope: !1801)
!1854 = !DILocation(line: 1304, column: 13, scope: !1801)
!1855 = !DILocation(line: 1304, column: 24, scope: !1801)
!1856 = !DILocation(line: 1304, column: 30, scope: !1801)
!1857 = !DILocation(line: 1304, column: 22, scope: !1801)
!1858 = !DILocation(line: 1304, column: 35, scope: !1801)
!1859 = !DILocation(line: 1304, column: 18, scope: !1801)
!1860 = !DILocation(line: 1305, column: 4, scope: !1801)
!1861 = !DILocation(line: 1305, column: 7, scope: !1801)
!1862 = !DILocation(line: 1305, column: 13, scope: !1801)
!1863 = !DILocation(line: 1305, column: 20, scope: !1801)
!1864 = !DILocation(line: 1305, column: 26, scope: !1801)
!1865 = !DILocation(line: 1305, column: 33, scope: !1801)
!1866 = !DILocation(line: 1305, column: 39, scope: !1801)
!1867 = !DILocation(line: 1305, column: 31, scope: !1801)
!1868 = !DILocation(line: 1305, column: 46, scope: !1801)
!1869 = !DILocation(line: 1305, column: 52, scope: !1801)
!1870 = !DILocation(line: 1305, column: 44, scope: !1801)
!1871 = !DILocation(line: 1305, column: 54, scope: !1801)
!1872 = !DILocation(line: 1305, column: 18, scope: !1801)
!1873 = !DILocation(line: 1306, column: 4, scope: !1801)
!1874 = !DILocation(line: 1306, column: 7, scope: !1801)
!1875 = !DILocation(line: 1306, column: 13, scope: !1801)
!1876 = !DILocation(line: 1306, column: 35, scope: !1801)
!1877 = !DILocation(line: 1306, column: 41, scope: !1801)
!1878 = !DILocation(line: 1306, column: 32, scope: !1801)
!1879 = !DILocation(line: 1307, column: 4, scope: !1801)
!1880 = !DILocation(line: 1307, column: 8, scope: !1801)
!1881 = !DILocation(line: 1307, column: 14, scope: !1801)
!1882 = !DILocation(line: 1308, column: 11, scope: !1801)
!1883 = !DILocation(line: 1308, column: 17, scope: !1801)
!1884 = !DILocation(line: 1308, column: 8, scope: !1801)
!1885 = !DILocation(line: 1309, column: 4, scope: !1801)
!1886 = !DILocation(line: 1309, column: 7, scope: !1801)
!1887 = !DILocation(line: 1309, column: 13, scope: !1801)
!1888 = !DILocation(line: 1309, column: 25, scope: !1801)
!1889 = !DILocation(line: 1309, column: 31, scope: !1801)
!1890 = !DILocation(line: 1309, column: 22, scope: !1801)
!1891 = !DILocation(line: 1310, column: 4, scope: !1801)
!1892 = !DILocation(line: 1310, column: 7, scope: !1801)
!1893 = !DILocation(line: 1310, column: 13, scope: !1801)
!1894 = !DILocation(line: 1310, column: 24, scope: !1801)
!1895 = !DILocation(line: 1310, column: 30, scope: !1801)
!1896 = !DILocation(line: 1310, column: 21, scope: !1801)
!1897 = !DILocation(line: 1311, column: 4, scope: !1801)
!1898 = !DILocation(line: 1311, column: 7, scope: !1801)
!1899 = !DILocation(line: 1311, column: 13, scope: !1801)
!1900 = !DILocation(line: 1311, column: 32, scope: !1801)
!1901 = !DILocation(line: 1311, column: 38, scope: !1801)
!1902 = !DILocation(line: 1311, column: 29, scope: !1801)
!1903 = !DILocation(line: 1312, column: 4, scope: !1801)
!1904 = !DILocation(line: 1312, column: 8, scope: !1801)
!1905 = !DILocation(line: 1313, column: 4, scope: !1801)
!1906 = !DILocation(line: 1313, column: 8, scope: !1801)
!1907 = !DILocation(line: 0, scope: !1801)
!1908 = !DILocation(line: 1313, column: 7, scope: !1801)
!1909 = !DILocation(line: 1300, column: 10, scope: !1801)
!1910 = !DILocation(line: 1300, column: 3, scope: !1801)
!1911 = distinct !DISubprogram(name: "real_to_integer", scope: !3, file: !3, line: 1319, type: !1912, scopeLine: 1320, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !406)
!1912 = !DISubroutineType(types: !1913)
!1913 = !{!421, !6}
!1914 = !DILocalVariable(name: "r", arg: 1, scope: !1911, file: !3, line: 1319, type: !6)
!1915 = !DILocation(line: 1319, column: 41, scope: !1911)
!1916 = !DILocalVariable(name: "i", scope: !1911, file: !3, line: 1321, type: !20)
!1917 = !DILocation(line: 1321, column: 26, scope: !1911)
!1918 = !DILocation(line: 1323, column: 11, scope: !1911)
!1919 = !DILocation(line: 1323, column: 14, scope: !1911)
!1920 = !DILocation(line: 1323, column: 3, scope: !1911)
!1921 = !DILocation(line: 1324, column: 5, scope: !1911)
!1922 = !DILabel(scope: !1923, name: "underflow", file: !3, line: 1326)
!1923 = distinct !DILexicalBlock(scope: !1911, file: !3, line: 1324, column: 5)
!1924 = !DILocation(line: 1326, column: 5, scope: !1923)
!1925 = !DILocation(line: 1327, column: 7, scope: !1923)
!1926 = !DILabel(scope: !1923, name: "overflow", file: !3, line: 1331)
!1927 = !DILocation(line: 1331, column: 5, scope: !1923)
!1928 = !DILocation(line: 1332, column: 9, scope: !1923)
!1929 = !DILocation(line: 1333, column: 12, scope: !1930)
!1930 = distinct !DILexicalBlock(scope: !1923, file: !3, line: 1333, column: 11)
!1931 = !DILocation(line: 1333, column: 15, scope: !1930)
!1932 = !DILocation(line: 1333, column: 11, scope: !1923)
!1933 = !DILocation(line: 1334, column: 3, scope: !1930)
!1934 = !DILocation(line: 1334, column: 2, scope: !1930)
!1935 = !DILocation(line: 1335, column: 14, scope: !1923)
!1936 = !DILocation(line: 1335, column: 7, scope: !1923)
!1937 = !DILocation(line: 1338, column: 11, scope: !1938)
!1938 = distinct !DILexicalBlock(scope: !1923, file: !3, line: 1338, column: 11)
!1939 = !DILocation(line: 1338, column: 14, scope: !1938)
!1940 = !DILocation(line: 1338, column: 11, scope: !1923)
!1941 = !DILocation(line: 1339, column: 34, scope: !1938)
!1942 = !DILocation(line: 1339, column: 9, scope: !1938)
!1943 = !DILocation(line: 1339, column: 2, scope: !1938)
!1944 = !DILocation(line: 1341, column: 11, scope: !1945)
!1945 = distinct !DILexicalBlock(scope: !1923, file: !3, line: 1341, column: 11)
!1946 = !DILocation(line: 1341, column: 24, scope: !1945)
!1947 = !DILocation(line: 1341, column: 11, scope: !1923)
!1948 = !DILocation(line: 1342, column: 2, scope: !1945)
!1949 = !DILocation(line: 1347, column: 11, scope: !1950)
!1950 = distinct !DILexicalBlock(scope: !1923, file: !3, line: 1347, column: 11)
!1951 = !DILocation(line: 1347, column: 24, scope: !1950)
!1952 = !DILocation(line: 1347, column: 11, scope: !1923)
!1953 = !DILocation(line: 1348, column: 2, scope: !1950)
!1954 = !DILocation(line: 1351, column: 6, scope: !1955)
!1955 = distinct !DILexicalBlock(scope: !1923, file: !3, line: 1350, column: 11)
!1956 = !DILocation(line: 1351, column: 9, scope: !1955)
!1957 = !DILocation(line: 1351, column: 4, scope: !1955)
!1958 = !DILocation(line: 1360, column: 38, scope: !1923)
!1959 = !DILocation(line: 1360, column: 36, scope: !1923)
!1960 = !DILocation(line: 1360, column: 9, scope: !1923)
!1961 = !DILocation(line: 1362, column: 11, scope: !1962)
!1962 = distinct !DILexicalBlock(scope: !1923, file: !3, line: 1362, column: 11)
!1963 = !DILocation(line: 1362, column: 14, scope: !1962)
!1964 = !DILocation(line: 1362, column: 11, scope: !1923)
!1965 = !DILocation(line: 1363, column: 7, scope: !1962)
!1966 = !DILocation(line: 1363, column: 6, scope: !1962)
!1967 = !DILocation(line: 1363, column: 4, scope: !1962)
!1968 = !DILocation(line: 1363, column: 2, scope: !1962)
!1969 = !DILocation(line: 1364, column: 14, scope: !1923)
!1970 = !DILocation(line: 1364, column: 7, scope: !1923)
!1971 = !DILocation(line: 1367, column: 7, scope: !1923)
!1972 = !DILocation(line: 1368, column: 5, scope: !1923)
!1973 = !DILocation(line: 1370, column: 5, scope: !1911)
!1974 = !DILocation(line: 1372, column: 1, scope: !1911)
!1975 = distinct !DISubprogram(name: "real_to_integer2", scope: !3, file: !3, line: 1377, type: !1976, scopeLine: 1379, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !406)
!1976 = !DISubroutineType(types: !1977)
!1977 = !{null, !420, !420, !6}
!1978 = !DILocalVariable(name: "plow", arg: 1, scope: !1975, file: !3, line: 1377, type: !420)
!1979 = !DILocation(line: 1377, column: 34, scope: !1975)
!1980 = !DILocalVariable(name: "phigh", arg: 2, scope: !1975, file: !3, line: 1377, type: !420)
!1981 = !DILocation(line: 1377, column: 55, scope: !1975)
!1982 = !DILocalVariable(name: "r", arg: 3, scope: !1975, file: !3, line: 1378, type: !6)
!1983 = !DILocation(line: 1378, column: 28, scope: !1975)
!1984 = !DILocalVariable(name: "t", scope: !1975, file: !3, line: 1380, type: !8)
!1985 = !DILocation(line: 1380, column: 19, scope: !1975)
!1986 = !DILocalVariable(name: "low", scope: !1975, file: !3, line: 1381, type: !421)
!1987 = !DILocation(line: 1381, column: 17, scope: !1975)
!1988 = !DILocalVariable(name: "high", scope: !1975, file: !3, line: 1381, type: !421)
!1989 = !DILocation(line: 1381, column: 22, scope: !1975)
!1990 = !DILocalVariable(name: "exp", scope: !1975, file: !3, line: 1382, type: !398)
!1991 = !DILocation(line: 1382, column: 7, scope: !1975)
!1992 = !DILocation(line: 1384, column: 11, scope: !1975)
!1993 = !DILocation(line: 1384, column: 14, scope: !1975)
!1994 = !DILocation(line: 1384, column: 3, scope: !1975)
!1995 = !DILocation(line: 1385, column: 5, scope: !1975)
!1996 = !DILabel(scope: !1997, name: "underflow", file: !3, line: 1387)
!1997 = distinct !DILexicalBlock(scope: !1975, file: !3, line: 1385, column: 5)
!1998 = !DILocation(line: 1387, column: 5, scope: !1997)
!1999 = !DILocation(line: 1388, column: 18, scope: !1997)
!2000 = !DILocation(line: 1388, column: 11, scope: !1997)
!2001 = !DILocation(line: 1389, column: 7, scope: !1997)
!2002 = !DILabel(scope: !1997, name: "overflow", file: !3, line: 1393)
!2003 = !DILocation(line: 1393, column: 5, scope: !1997)
!2004 = !DILocation(line: 1394, column: 12, scope: !1997)
!2005 = !DILocation(line: 1395, column: 11, scope: !2006)
!2006 = distinct !DILexicalBlock(scope: !1997, file: !3, line: 1395, column: 11)
!2007 = !DILocation(line: 1395, column: 14, scope: !2006)
!2008 = !DILocation(line: 1395, column: 11, scope: !1997)
!2009 = !DILocation(line: 1396, column: 6, scope: !2006)
!2010 = !DILocation(line: 1396, column: 2, scope: !2006)
!2011 = !DILocation(line: 1399, column: 8, scope: !2012)
!2012 = distinct !DILexicalBlock(scope: !2006, file: !3, line: 1398, column: 2)
!2013 = !DILocation(line: 1400, column: 8, scope: !2012)
!2014 = !DILocation(line: 1402, column: 7, scope: !1997)
!2015 = !DILocation(line: 1405, column: 11, scope: !2016)
!2016 = distinct !DILexicalBlock(scope: !1997, file: !3, line: 1405, column: 11)
!2017 = !DILocation(line: 1405, column: 14, scope: !2016)
!2018 = !DILocation(line: 1405, column: 11, scope: !1997)
!2019 = !DILocation(line: 1407, column: 30, scope: !2020)
!2020 = distinct !DILexicalBlock(scope: !2016, file: !3, line: 1406, column: 2)
!2021 = !DILocation(line: 1407, column: 36, scope: !2020)
!2022 = !DILocation(line: 1407, column: 43, scope: !2020)
!2023 = !DILocation(line: 1407, column: 4, scope: !2020)
!2024 = !DILocation(line: 1408, column: 4, scope: !2020)
!2025 = !DILocation(line: 1411, column: 13, scope: !1997)
!2026 = !DILocation(line: 1411, column: 11, scope: !1997)
!2027 = !DILocation(line: 1412, column: 11, scope: !2028)
!2028 = distinct !DILexicalBlock(scope: !1997, file: !3, line: 1412, column: 11)
!2029 = !DILocation(line: 1412, column: 15, scope: !2028)
!2030 = !DILocation(line: 1412, column: 11, scope: !1997)
!2031 = !DILocation(line: 1413, column: 2, scope: !2028)
!2032 = !DILocation(line: 1418, column: 11, scope: !2033)
!2033 = distinct !DILexicalBlock(scope: !1997, file: !3, line: 1418, column: 11)
!2034 = !DILocation(line: 1418, column: 15, scope: !2033)
!2035 = !DILocation(line: 1418, column: 11, scope: !1997)
!2036 = !DILocation(line: 1419, column: 2, scope: !2033)
!2037 = !DILocation(line: 1421, column: 31, scope: !1997)
!2038 = !DILocation(line: 1421, column: 61, scope: !1997)
!2039 = !DILocation(line: 1421, column: 59, scope: !1997)
!2040 = !DILocation(line: 1421, column: 7, scope: !1997)
!2041 = !DILocation(line: 1424, column: 13, scope: !2042)
!2042 = distinct !DILexicalBlock(scope: !2043, file: !3, line: 1423, column: 2)
!2043 = distinct !DILexicalBlock(scope: !1997, file: !3, line: 1422, column: 11)
!2044 = !DILocation(line: 1424, column: 11, scope: !2042)
!2045 = !DILocation(line: 1424, column: 9, scope: !2042)
!2046 = !DILocation(line: 1425, column: 12, scope: !2042)
!2047 = !DILocation(line: 1425, column: 10, scope: !2042)
!2048 = !DILocation(line: 1425, column: 8, scope: !2042)
!2049 = !DILocation(line: 1439, column: 11, scope: !2050)
!2050 = distinct !DILexicalBlock(scope: !1997, file: !3, line: 1439, column: 11)
!2051 = !DILocation(line: 1439, column: 14, scope: !2050)
!2052 = !DILocation(line: 1439, column: 11, scope: !1997)
!2053 = !DILocation(line: 1441, column: 8, scope: !2054)
!2054 = distinct !DILexicalBlock(scope: !2055, file: !3, line: 1441, column: 8)
!2055 = distinct !DILexicalBlock(scope: !2050, file: !3, line: 1440, column: 2)
!2056 = !DILocation(line: 1441, column: 12, scope: !2054)
!2057 = !DILocation(line: 1441, column: 8, scope: !2055)
!2058 = !DILocation(line: 1442, column: 14, scope: !2054)
!2059 = !DILocation(line: 1442, column: 13, scope: !2054)
!2060 = !DILocation(line: 1442, column: 11, scope: !2054)
!2061 = !DILocation(line: 1442, column: 6, scope: !2054)
!2062 = !DILocation(line: 1444, column: 13, scope: !2054)
!2063 = !DILocation(line: 1444, column: 12, scope: !2054)
!2064 = !DILocation(line: 1444, column: 10, scope: !2054)
!2065 = !DILocation(line: 1444, column: 26, scope: !2054)
!2066 = !DILocation(line: 1444, column: 25, scope: !2054)
!2067 = !DILocation(line: 1444, column: 23, scope: !2054)
!2068 = !DILocation(line: 1445, column: 2, scope: !2055)
!2069 = !DILocation(line: 1446, column: 7, scope: !1997)
!2070 = !DILocation(line: 1449, column: 7, scope: !1997)
!2071 = !DILocation(line: 1450, column: 5, scope: !1997)
!2072 = !DILocation(line: 1452, column: 11, scope: !1975)
!2073 = !DILocation(line: 1452, column: 4, scope: !1975)
!2074 = !DILocation(line: 1452, column: 9, scope: !1975)
!2075 = !DILocation(line: 1453, column: 12, scope: !1975)
!2076 = !DILocation(line: 1453, column: 4, scope: !1975)
!2077 = !DILocation(line: 1453, column: 10, scope: !1975)
!2078 = !DILocation(line: 1454, column: 1, scope: !1975)
!2079 = distinct !DISubprogram(name: "rshift_significand", scope: !3, file: !3, line: 206, type: !2080, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!2080 = !DISubroutineType(types: !2081)
!2081 = !{null, !426, !6, !12}
!2082 = !DILocalVariable(name: "r", arg: 1, scope: !2079, file: !3, line: 206, type: !426)
!2083 = !DILocation(line: 206, column: 38, scope: !2079)
!2084 = !DILocalVariable(name: "a", arg: 2, scope: !2079, file: !3, line: 206, type: !6)
!2085 = !DILocation(line: 206, column: 64, scope: !2079)
!2086 = !DILocalVariable(name: "n", arg: 3, scope: !2079, file: !3, line: 207, type: !12)
!2087 = !DILocation(line: 207, column: 20, scope: !2079)
!2088 = !DILocalVariable(name: "i", scope: !2079, file: !3, line: 209, type: !12)
!2089 = !DILocation(line: 209, column: 16, scope: !2079)
!2090 = !DILocalVariable(name: "ofs", scope: !2079, file: !3, line: 209, type: !12)
!2091 = !DILocation(line: 209, column: 19, scope: !2079)
!2092 = !DILocation(line: 209, column: 25, scope: !2079)
!2093 = !DILocation(line: 209, column: 27, scope: !2079)
!2094 = !DILocation(line: 211, column: 5, scope: !2079)
!2095 = !DILocation(line: 212, column: 7, scope: !2096)
!2096 = distinct !DILexicalBlock(scope: !2079, file: !3, line: 212, column: 7)
!2097 = !DILocation(line: 212, column: 9, scope: !2096)
!2098 = !DILocation(line: 212, column: 7, scope: !2079)
!2099 = !DILocation(line: 214, column: 14, scope: !2100)
!2100 = distinct !DILexicalBlock(scope: !2101, file: !3, line: 214, column: 7)
!2101 = distinct !DILexicalBlock(scope: !2096, file: !3, line: 213, column: 5)
!2102 = !DILocation(line: 214, column: 12, scope: !2100)
!2103 = !DILocation(line: 214, column: 19, scope: !2104)
!2104 = distinct !DILexicalBlock(scope: !2100, file: !3, line: 214, column: 7)
!2105 = !DILocation(line: 214, column: 21, scope: !2104)
!2106 = !DILocation(line: 214, column: 7, scope: !2100)
!2107 = !DILocation(line: 217, column: 11, scope: !2108)
!2108 = distinct !DILexicalBlock(scope: !2104, file: !3, line: 215, column: 2)
!2109 = !DILocation(line: 217, column: 17, scope: !2108)
!2110 = !DILocation(line: 217, column: 15, scope: !2108)
!2111 = !DILocation(line: 217, column: 19, scope: !2108)
!2112 = !DILocation(line: 217, column: 34, scope: !2108)
!2113 = !DILocation(line: 217, column: 37, scope: !2108)
!2114 = !DILocation(line: 217, column: 41, scope: !2108)
!2115 = !DILocation(line: 217, column: 47, scope: !2108)
!2116 = !DILocation(line: 217, column: 45, scope: !2108)
!2117 = !DILocation(line: 217, column: 54, scope: !2108)
!2118 = !DILocation(line: 217, column: 51, scope: !2108)
!2119 = !DILocation(line: 218, column: 13, scope: !2108)
!2120 = !DILocation(line: 218, column: 19, scope: !2108)
!2121 = !DILocation(line: 218, column: 17, scope: !2108)
!2122 = !DILocation(line: 218, column: 21, scope: !2108)
!2123 = !DILocation(line: 218, column: 25, scope: !2108)
!2124 = !DILocation(line: 218, column: 40, scope: !2108)
!2125 = !DILocation(line: 218, column: 43, scope: !2108)
!2126 = !DILocation(line: 218, column: 47, scope: !2108)
!2127 = !DILocation(line: 218, column: 53, scope: !2108)
!2128 = !DILocation(line: 218, column: 51, scope: !2108)
!2129 = !DILocation(line: 218, column: 55, scope: !2108)
!2130 = !DILocation(line: 219, column: 30, scope: !2108)
!2131 = !DILocation(line: 219, column: 28, scope: !2108)
!2132 = !DILocation(line: 219, column: 5, scope: !2108)
!2133 = !DILocation(line: 218, column: 9, scope: !2108)
!2134 = !DILocation(line: 216, column: 4, scope: !2108)
!2135 = !DILocation(line: 216, column: 7, scope: !2108)
!2136 = !DILocation(line: 216, column: 11, scope: !2108)
!2137 = !DILocation(line: 217, column: 6, scope: !2108)
!2138 = !DILocation(line: 220, column: 2, scope: !2108)
!2139 = !DILocation(line: 214, column: 30, scope: !2104)
!2140 = !DILocation(line: 214, column: 7, scope: !2104)
!2141 = distinct !{!2141, !2106, !2142}
!2142 = !DILocation(line: 220, column: 2, scope: !2100)
!2143 = !DILocation(line: 221, column: 5, scope: !2101)
!2144 = !DILocation(line: 224, column: 14, scope: !2145)
!2145 = distinct !DILexicalBlock(scope: !2146, file: !3, line: 224, column: 7)
!2146 = distinct !DILexicalBlock(scope: !2096, file: !3, line: 223, column: 5)
!2147 = !DILocation(line: 224, column: 12, scope: !2145)
!2148 = !DILocation(line: 224, column: 19, scope: !2149)
!2149 = distinct !DILexicalBlock(scope: !2145, file: !3, line: 224, column: 7)
!2150 = !DILocation(line: 224, column: 25, scope: !2149)
!2151 = !DILocation(line: 224, column: 23, scope: !2149)
!2152 = !DILocation(line: 224, column: 27, scope: !2149)
!2153 = !DILocation(line: 224, column: 7, scope: !2145)
!2154 = !DILocation(line: 225, column: 14, scope: !2149)
!2155 = !DILocation(line: 225, column: 17, scope: !2149)
!2156 = !DILocation(line: 225, column: 21, scope: !2149)
!2157 = !DILocation(line: 225, column: 27, scope: !2149)
!2158 = !DILocation(line: 225, column: 25, scope: !2149)
!2159 = !DILocation(line: 225, column: 2, scope: !2149)
!2160 = !DILocation(line: 225, column: 5, scope: !2149)
!2161 = !DILocation(line: 225, column: 9, scope: !2149)
!2162 = !DILocation(line: 225, column: 12, scope: !2149)
!2163 = !DILocation(line: 224, column: 36, scope: !2149)
!2164 = !DILocation(line: 224, column: 7, scope: !2149)
!2165 = distinct !{!2165, !2153, !2166}
!2166 = !DILocation(line: 225, column: 28, scope: !2145)
!2167 = !DILocation(line: 226, column: 7, scope: !2146)
!2168 = !DILocation(line: 226, column: 14, scope: !2169)
!2169 = distinct !DILexicalBlock(scope: !2170, file: !3, line: 226, column: 7)
!2170 = distinct !DILexicalBlock(scope: !2146, file: !3, line: 226, column: 7)
!2171 = !DILocation(line: 226, column: 16, scope: !2169)
!2172 = !DILocation(line: 226, column: 7, scope: !2170)
!2173 = !DILocation(line: 227, column: 2, scope: !2169)
!2174 = !DILocation(line: 227, column: 5, scope: !2169)
!2175 = !DILocation(line: 227, column: 9, scope: !2169)
!2176 = !DILocation(line: 227, column: 12, scope: !2169)
!2177 = !DILocation(line: 226, column: 25, scope: !2169)
!2178 = !DILocation(line: 226, column: 7, scope: !2169)
!2179 = distinct !{!2179, !2172, !2180}
!2180 = !DILocation(line: 227, column: 14, scope: !2170)
!2181 = !DILocation(line: 229, column: 1, scope: !2079)
!2182 = distinct !DISubprogram(name: "real_to_decimal_for_mode", scope: !3, file: !3, line: 1501, type: !2183, scopeLine: 1504, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !406)
!2183 = !DISubroutineType(types: !2184)
!2184 = !{null, !2185, !6, !2187, !2187, !398, !226}
!2185 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2186, size: 64)
!2186 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!2187 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !2188, line: 46, baseType: !20)
!2188 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!2189 = !DILocalVariable(name: "str", arg: 1, scope: !2182, file: !3, line: 1501, type: !2185)
!2190 = !DILocation(line: 1501, column: 33, scope: !2182)
!2191 = !DILocalVariable(name: "r_orig", arg: 2, scope: !2182, file: !3, line: 1501, type: !6)
!2192 = !DILocation(line: 1501, column: 61, scope: !2182)
!2193 = !DILocalVariable(name: "buf_size", arg: 3, scope: !2182, file: !3, line: 1502, type: !2187)
!2194 = !DILocation(line: 1502, column: 13, scope: !2182)
!2195 = !DILocalVariable(name: "digits", arg: 4, scope: !2182, file: !3, line: 1502, type: !2187)
!2196 = !DILocation(line: 1502, column: 30, scope: !2182)
!2197 = !DILocalVariable(name: "crop_trailing_zeros", arg: 5, scope: !2182, file: !3, line: 1503, type: !398)
!2198 = !DILocation(line: 1503, column: 10, scope: !2182)
!2199 = !DILocalVariable(name: "mode", arg: 6, scope: !2182, file: !3, line: 1503, type: !226)
!2200 = !DILocation(line: 1503, column: 49, scope: !2182)
!2201 = !DILocalVariable(name: "fmt", scope: !2182, file: !3, line: 1505, type: !419)
!2202 = !DILocation(line: 1505, column: 29, scope: !2182)
!2203 = !DILocalVariable(name: "one", scope: !2182, file: !3, line: 1506, type: !6)
!2204 = !DILocation(line: 1506, column: 26, scope: !2182)
!2205 = !DILocalVariable(name: "ten", scope: !2182, file: !3, line: 1506, type: !6)
!2206 = !DILocation(line: 1506, column: 32, scope: !2182)
!2207 = !DILocalVariable(name: "r", scope: !2182, file: !3, line: 1507, type: !8)
!2208 = !DILocation(line: 1507, column: 19, scope: !2182)
!2209 = !DILocalVariable(name: "pten", scope: !2182, file: !3, line: 1507, type: !8)
!2210 = !DILocation(line: 1507, column: 22, scope: !2182)
!2211 = !DILocalVariable(name: "u", scope: !2182, file: !3, line: 1507, type: !8)
!2212 = !DILocation(line: 1507, column: 28, scope: !2182)
!2213 = !DILocalVariable(name: "v", scope: !2182, file: !3, line: 1507, type: !8)
!2214 = !DILocation(line: 1507, column: 31, scope: !2182)
!2215 = !DILocalVariable(name: "dec_exp", scope: !2182, file: !3, line: 1508, type: !398)
!2216 = !DILocation(line: 1508, column: 7, scope: !2182)
!2217 = !DILocalVariable(name: "cmp_one", scope: !2182, file: !3, line: 1508, type: !398)
!2218 = !DILocation(line: 1508, column: 16, scope: !2182)
!2219 = !DILocalVariable(name: "digit", scope: !2182, file: !3, line: 1508, type: !398)
!2220 = !DILocation(line: 1508, column: 25, scope: !2182)
!2221 = !DILocalVariable(name: "max_digits", scope: !2182, file: !3, line: 1509, type: !2187)
!2222 = !DILocation(line: 1509, column: 10, scope: !2182)
!2223 = !DILocalVariable(name: "p", scope: !2182, file: !3, line: 1510, type: !2185)
!2224 = !DILocation(line: 1510, column: 9, scope: !2182)
!2225 = !DILocalVariable(name: "first", scope: !2182, file: !3, line: 1510, type: !2185)
!2226 = !DILocation(line: 1510, column: 13, scope: !2182)
!2227 = !DILocalVariable(name: "last", scope: !2182, file: !3, line: 1510, type: !2185)
!2228 = !DILocation(line: 1510, column: 21, scope: !2182)
!2229 = !DILocalVariable(name: "sign", scope: !2182, file: !3, line: 1511, type: !399)
!2230 = !DILocation(line: 1511, column: 8, scope: !2182)
!2231 = !DILocalVariable(name: "round_up", scope: !2182, file: !3, line: 1512, type: !399)
!2232 = !DILocation(line: 1512, column: 8, scope: !2182)
!2233 = !DILocation(line: 1514, column: 7, scope: !2234)
!2234 = distinct !DILexicalBlock(scope: !2182, file: !3, line: 1514, column: 7)
!2235 = !DILocation(line: 1514, column: 12, scope: !2234)
!2236 = !DILocation(line: 1514, column: 7, scope: !2182)
!2237 = !DILocation(line: 1516, column: 12, scope: !2238)
!2238 = distinct !DILexicalBlock(scope: !2234, file: !3, line: 1515, column: 4)
!2239 = !DILocation(line: 1516, column: 10, scope: !2238)
!2240 = !DILocation(line: 1517, column: 6, scope: !2238)
!2241 = !DILocation(line: 1518, column: 4, scope: !2238)
!2242 = !DILocation(line: 1520, column: 8, scope: !2182)
!2243 = !DILocation(line: 1520, column: 7, scope: !2182)
!2244 = !DILocation(line: 1521, column: 13, scope: !2182)
!2245 = !DILocation(line: 1521, column: 3, scope: !2182)
!2246 = !DILocation(line: 1524, column: 15, scope: !2247)
!2247 = distinct !DILexicalBlock(scope: !2182, file: !3, line: 1522, column: 5)
!2248 = !DILocation(line: 1524, column: 23, scope: !2247)
!2249 = !DILocation(line: 1524, column: 21, scope: !2247)
!2250 = !DILocation(line: 1524, column: 7, scope: !2247)
!2251 = !DILocation(line: 1525, column: 7, scope: !2247)
!2252 = !DILocation(line: 1527, column: 7, scope: !2247)
!2253 = !DILocation(line: 1529, column: 15, scope: !2247)
!2254 = !DILocation(line: 1529, column: 23, scope: !2247)
!2255 = !DILocation(line: 1529, column: 21, scope: !2247)
!2256 = !DILocation(line: 1529, column: 7, scope: !2247)
!2257 = !DILocation(line: 1530, column: 7, scope: !2247)
!2258 = !DILocation(line: 1533, column: 16, scope: !2247)
!2259 = !DILocation(line: 1533, column: 33, scope: !2247)
!2260 = !DILocation(line: 1533, column: 41, scope: !2247)
!2261 = !DILocation(line: 1534, column: 10, scope: !2247)
!2262 = !DILocation(line: 1534, column: 18, scope: !2247)
!2263 = !DILocation(line: 1533, column: 7, scope: !2247)
!2264 = !DILocation(line: 1535, column: 7, scope: !2247)
!2265 = !DILocation(line: 1537, column: 7, scope: !2247)
!2266 = !DILocation(line: 1538, column: 5, scope: !2247)
!2267 = !DILocation(line: 1540, column: 9, scope: !2268)
!2268 = distinct !DILexicalBlock(scope: !2182, file: !3, line: 1540, column: 7)
!2269 = !DILocation(line: 1540, column: 7, scope: !2268)
!2270 = !DILocation(line: 1540, column: 7, scope: !2182)
!2271 = !DILocation(line: 1542, column: 32, scope: !2272)
!2272 = distinct !DILexicalBlock(scope: !2268, file: !3, line: 1541, column: 5)
!2273 = !DILocation(line: 1542, column: 41, scope: !2272)
!2274 = !DILocation(line: 1542, column: 51, scope: !2272)
!2275 = !DILocation(line: 1542, column: 59, scope: !2272)
!2276 = !DILocation(line: 1542, column: 7, scope: !2272)
!2277 = !DILocation(line: 1543, column: 7, scope: !2272)
!2278 = !DILocation(line: 1547, column: 14, scope: !2182)
!2279 = !DILocation(line: 1548, column: 7, scope: !2280)
!2280 = distinct !DILexicalBlock(scope: !2182, file: !3, line: 1548, column: 7)
!2281 = !DILocation(line: 1548, column: 14, scope: !2280)
!2282 = !DILocation(line: 1548, column: 19, scope: !2280)
!2283 = !DILocation(line: 1548, column: 22, scope: !2280)
!2284 = !DILocation(line: 1548, column: 31, scope: !2280)
!2285 = !DILocation(line: 1548, column: 29, scope: !2280)
!2286 = !DILocation(line: 1548, column: 7, scope: !2182)
!2287 = !DILocation(line: 1549, column: 14, scope: !2280)
!2288 = !DILocation(line: 1549, column: 12, scope: !2280)
!2289 = !DILocation(line: 1549, column: 5, scope: !2280)
!2290 = !DILocation(line: 1554, column: 13, scope: !2182)
!2291 = !DILocation(line: 1554, column: 27, scope: !2182)
!2292 = !DILocation(line: 1554, column: 11, scope: !2182)
!2293 = !DILocation(line: 1555, column: 19, scope: !2294)
!2294 = distinct !DILexicalBlock(scope: !2182, file: !3, line: 1555, column: 3)
!2295 = !DILocation(line: 1555, column: 8, scope: !2294)
!2296 = !DILocation(line: 1555, column: 24, scope: !2297)
!2297 = distinct !DILexicalBlock(scope: !2294, file: !3, line: 1555, column: 3)
!2298 = !DILocation(line: 1555, column: 3, scope: !2294)
!2299 = !DILocation(line: 1556, column: 13, scope: !2297)
!2300 = !DILocation(line: 1556, column: 5, scope: !2297)
!2301 = !DILocation(line: 1555, column: 44, scope: !2297)
!2302 = !DILocation(line: 1555, column: 3, scope: !2297)
!2303 = distinct !{!2303, !2298, !2304}
!2304 = !DILocation(line: 1556, column: 16, scope: !2294)
!2305 = !DILocation(line: 1559, column: 16, scope: !2182)
!2306 = !DILocation(line: 1559, column: 25, scope: !2182)
!2307 = !DILocation(line: 1559, column: 29, scope: !2182)
!2308 = !DILocation(line: 1559, column: 33, scope: !2182)
!2309 = !DILocation(line: 1559, column: 39, scope: !2182)
!2310 = !DILocation(line: 1559, column: 37, scope: !2182)
!2311 = !DILocation(line: 1559, column: 50, scope: !2182)
!2312 = !DILocation(line: 1559, column: 14, scope: !2182)
!2313 = !DILocation(line: 1560, column: 3, scope: !2182)
!2314 = !DILocation(line: 1561, column: 7, scope: !2315)
!2315 = distinct !DILexicalBlock(scope: !2182, file: !3, line: 1561, column: 7)
!2316 = !DILocation(line: 1561, column: 16, scope: !2315)
!2317 = !DILocation(line: 1561, column: 14, scope: !2315)
!2318 = !DILocation(line: 1561, column: 7, scope: !2182)
!2319 = !DILocation(line: 1562, column: 14, scope: !2315)
!2320 = !DILocation(line: 1562, column: 12, scope: !2315)
!2321 = !DILocation(line: 1562, column: 5, scope: !2315)
!2322 = !DILocation(line: 1564, column: 9, scope: !2182)
!2323 = !DILocation(line: 1564, column: 7, scope: !2182)
!2324 = !DILocation(line: 1565, column: 9, scope: !2182)
!2325 = !DILocation(line: 1565, column: 7, scope: !2182)
!2326 = !DILocation(line: 1567, column: 12, scope: !2182)
!2327 = !DILocation(line: 1567, column: 10, scope: !2182)
!2328 = !DILocation(line: 1567, column: 8, scope: !2182)
!2329 = !DILocation(line: 1568, column: 5, scope: !2182)
!2330 = !DILocation(line: 1568, column: 10, scope: !2182)
!2331 = !DILocation(line: 1570, column: 11, scope: !2182)
!2332 = !DILocation(line: 1571, column: 11, scope: !2182)
!2333 = !DILocation(line: 1571, column: 10, scope: !2182)
!2334 = !DILocation(line: 1573, column: 29, scope: !2182)
!2335 = !DILocation(line: 1573, column: 13, scope: !2182)
!2336 = !DILocation(line: 1573, column: 11, scope: !2182)
!2337 = !DILocation(line: 1574, column: 7, scope: !2338)
!2338 = distinct !DILexicalBlock(scope: !2182, file: !3, line: 1574, column: 7)
!2339 = !DILocation(line: 1574, column: 15, scope: !2338)
!2340 = !DILocation(line: 1574, column: 7, scope: !2182)
!2341 = !DILocalVariable(name: "m", scope: !2342, file: !3, line: 1576, type: !398)
!2342 = distinct !DILexicalBlock(scope: !2338, file: !3, line: 1575, column: 5)
!2343 = !DILocation(line: 1576, column: 11, scope: !2342)
!2344 = !DILocation(line: 1581, column: 11, scope: !2342)
!2345 = !DILocation(line: 1582, column: 7, scope: !2342)
!2346 = !DILocation(line: 1585, column: 23, scope: !2342)
!2347 = !DILocation(line: 1585, column: 11, scope: !2342)
!2348 = !DILocation(line: 1585, column: 9, scope: !2342)
!2349 = !DILocation(line: 1591, column: 7, scope: !2342)
!2350 = !DILocalVariable(name: "t", scope: !2351, file: !3, line: 1593, type: !8)
!2351 = distinct !DILexicalBlock(scope: !2342, file: !3, line: 1592, column: 2)
!2352 = !DILocation(line: 1593, column: 20, scope: !2351)
!2353 = !DILocation(line: 1595, column: 36, scope: !2351)
!2354 = !DILocation(line: 1595, column: 23, scope: !2351)
!2355 = !DILocation(line: 1595, column: 4, scope: !2351)
!2356 = !DILocation(line: 1596, column: 4, scope: !2351)
!2357 = !DILocation(line: 1597, column: 8, scope: !2358)
!2358 = distinct !DILexicalBlock(scope: !2351, file: !3, line: 1597, column: 8)
!2359 = !DILocation(line: 1597, column: 34, scope: !2358)
!2360 = !DILocation(line: 1597, column: 8, scope: !2351)
!2361 = !DILocation(line: 1599, column: 12, scope: !2362)
!2362 = distinct !DILexicalBlock(scope: !2358, file: !3, line: 1598, column: 6)
!2363 = !DILocation(line: 1600, column: 24, scope: !2362)
!2364 = !DILocation(line: 1600, column: 21, scope: !2362)
!2365 = !DILocation(line: 1600, column: 16, scope: !2362)
!2366 = !DILocation(line: 1601, column: 6, scope: !2362)
!2367 = !DILocation(line: 1602, column: 2, scope: !2351)
!2368 = !DILocation(line: 1603, column: 14, scope: !2342)
!2369 = !DILocation(line: 1603, column: 18, scope: !2342)
!2370 = distinct !{!2370, !2349, !2371}
!2371 = !DILocation(line: 1603, column: 22, scope: !2342)
!2372 = !DILocation(line: 1606, column: 7, scope: !2342)
!2373 = !DILocation(line: 1608, column: 11, scope: !2342)
!2374 = !DILocation(line: 1613, column: 11, scope: !2375)
!2375 = distinct !DILexicalBlock(scope: !2342, file: !3, line: 1613, column: 11)
!2376 = !DILocation(line: 1613, column: 25, scope: !2375)
!2377 = !DILocation(line: 1613, column: 11, scope: !2342)
!2378 = !DILocation(line: 1615, column: 26, scope: !2379)
!2379 = distinct !DILexicalBlock(scope: !2375, file: !3, line: 1614, column: 2)
!2380 = !DILocation(line: 1615, column: 40, scope: !2379)
!2381 = !DILocation(line: 1615, column: 20, scope: !2379)
!2382 = !DILocation(line: 1615, column: 8, scope: !2379)
!2383 = !DILocation(line: 1615, column: 54, scope: !2379)
!2384 = !DILocation(line: 1615, column: 6, scope: !2379)
!2385 = !DILocation(line: 1616, column: 4, scope: !2379)
!2386 = !DILocalVariable(name: "ptentwo", scope: !2387, file: !3, line: 1618, type: !6)
!2387 = distinct !DILexicalBlock(scope: !2379, file: !3, line: 1617, column: 6)
!2388 = !DILocation(line: 1618, column: 31, scope: !2387)
!2389 = !DILocation(line: 1618, column: 54, scope: !2387)
!2390 = !DILocation(line: 1618, column: 41, scope: !2387)
!2391 = !DILocation(line: 1619, column: 28, scope: !2392)
!2392 = distinct !DILexicalBlock(scope: !2387, file: !3, line: 1619, column: 12)
!2393 = !DILocation(line: 1619, column: 12, scope: !2392)
!2394 = !DILocation(line: 1619, column: 40, scope: !2392)
!2395 = !DILocation(line: 1619, column: 12, scope: !2387)
!2396 = !DILocation(line: 1621, column: 31, scope: !2397)
!2397 = distinct !DILexicalBlock(scope: !2392, file: !3, line: 1620, column: 10)
!2398 = !DILocation(line: 1621, column: 12, scope: !2397)
!2399 = !DILocation(line: 1622, column: 39, scope: !2397)
!2400 = !DILocation(line: 1622, column: 12, scope: !2397)
!2401 = !DILocation(line: 1623, column: 28, scope: !2397)
!2402 = !DILocation(line: 1623, column: 25, scope: !2397)
!2403 = !DILocation(line: 1623, column: 20, scope: !2397)
!2404 = !DILocation(line: 1624, column: 10, scope: !2397)
!2405 = !DILocation(line: 1625, column: 6, scope: !2387)
!2406 = !DILocation(line: 1626, column: 18, scope: !2379)
!2407 = !DILocation(line: 1626, column: 22, scope: !2379)
!2408 = distinct !{!2408, !2385, !2409}
!2409 = !DILocation(line: 1626, column: 26, scope: !2379)
!2410 = !DILocation(line: 1627, column: 2, scope: !2379)
!2411 = !DILocation(line: 1632, column: 10, scope: !2375)
!2412 = !DILocation(line: 1633, column: 5, scope: !2342)
!2413 = !DILocation(line: 1634, column: 7, scope: !2414)
!2414 = distinct !DILexicalBlock(scope: !2182, file: !3, line: 1634, column: 7)
!2415 = !DILocation(line: 1634, column: 15, scope: !2414)
!2416 = !DILocation(line: 1634, column: 7, scope: !2182)
!2417 = !DILocalVariable(name: "m", scope: !2418, file: !3, line: 1636, type: !398)
!2418 = distinct !DILexicalBlock(scope: !2414, file: !3, line: 1635, column: 5)
!2419 = !DILocation(line: 1636, column: 11, scope: !2418)
!2420 = !DILocation(line: 1641, column: 11, scope: !2418)
!2421 = !DILocation(line: 1642, column: 7, scope: !2418)
!2422 = !DILocation(line: 1645, column: 10, scope: !2423)
!2423 = distinct !DILexicalBlock(scope: !2424, file: !3, line: 1645, column: 8)
!2424 = distinct !DILexicalBlock(scope: !2418, file: !3, line: 1643, column: 2)
!2425 = !DILocation(line: 1645, column: 8, scope: !2423)
!2426 = !DILocation(line: 1645, column: 17, scope: !2423)
!2427 = !DILocation(line: 1645, column: 8, scope: !2424)
!2428 = !DILocation(line: 1646, column: 6, scope: !2423)
!2429 = !DILocation(line: 1648, column: 25, scope: !2424)
!2430 = !DILocation(line: 1648, column: 4, scope: !2424)
!2431 = !DILocation(line: 1651, column: 8, scope: !2432)
!2432 = distinct !DILexicalBlock(scope: !2424, file: !3, line: 1651, column: 8)
!2433 = !DILocation(line: 1651, column: 22, scope: !2432)
!2434 = !DILocation(line: 1651, column: 8, scope: !2424)
!2435 = !DILocation(line: 1652, column: 6, scope: !2432)
!2436 = !DILocation(line: 1654, column: 8, scope: !2424)
!2437 = !DILocation(line: 1655, column: 12, scope: !2424)
!2438 = distinct !{!2438, !2421, !2439}
!2439 = !DILocation(line: 1656, column: 2, scope: !2418)
!2440 = !DILocation(line: 1657, column: 11, scope: !2418)
!2441 = !DILocation(line: 1662, column: 30, scope: !2418)
!2442 = !DILocation(line: 1662, column: 29, scope: !2418)
!2443 = !DILocation(line: 1662, column: 44, scope: !2418)
!2444 = !DILocation(line: 1662, column: 23, scope: !2418)
!2445 = !DILocation(line: 1662, column: 11, scope: !2418)
!2446 = !DILocation(line: 1662, column: 58, scope: !2418)
!2447 = !DILocation(line: 1662, column: 9, scope: !2418)
!2448 = !DILocation(line: 1663, column: 7, scope: !2418)
!2449 = !DILocalVariable(name: "ptentwo", scope: !2450, file: !3, line: 1665, type: !6)
!2450 = distinct !DILexicalBlock(scope: !2418, file: !3, line: 1664, column: 2)
!2451 = !DILocation(line: 1665, column: 27, scope: !2450)
!2452 = !DILocation(line: 1665, column: 50, scope: !2450)
!2453 = !DILocation(line: 1665, column: 37, scope: !2450)
!2454 = !DILocalVariable(name: "ptenmtwo", scope: !2450, file: !3, line: 1666, type: !6)
!2455 = !DILocation(line: 1666, column: 27, scope: !2450)
!2456 = !DILocation(line: 1666, column: 52, scope: !2450)
!2457 = !DILocation(line: 1666, column: 38, scope: !2450)
!2458 = !DILocation(line: 1668, column: 24, scope: !2459)
!2459 = distinct !DILexicalBlock(scope: !2450, file: !3, line: 1668, column: 8)
!2460 = !DILocation(line: 1668, column: 8, scope: !2459)
!2461 = !DILocation(line: 1668, column: 37, scope: !2459)
!2462 = !DILocation(line: 1668, column: 8, scope: !2450)
!2463 = !DILocation(line: 1670, column: 29, scope: !2464)
!2464 = distinct !DILexicalBlock(scope: !2459, file: !3, line: 1669, column: 6)
!2465 = !DILocation(line: 1670, column: 8, scope: !2464)
!2466 = !DILocation(line: 1671, column: 35, scope: !2464)
!2467 = !DILocation(line: 1671, column: 8, scope: !2464)
!2468 = !DILocation(line: 1672, column: 24, scope: !2464)
!2469 = !DILocation(line: 1672, column: 21, scope: !2464)
!2470 = !DILocation(line: 1672, column: 16, scope: !2464)
!2471 = !DILocation(line: 1673, column: 6, scope: !2464)
!2472 = !DILocation(line: 1674, column: 2, scope: !2450)
!2473 = !DILocation(line: 1675, column: 14, scope: !2418)
!2474 = !DILocation(line: 1675, column: 18, scope: !2418)
!2475 = distinct !{!2475, !2448, !2476}
!2476 = !DILocation(line: 1675, column: 22, scope: !2418)
!2477 = !DILocation(line: 1678, column: 25, scope: !2418)
!2478 = !DILocation(line: 1678, column: 7, scope: !2418)
!2479 = !DILocation(line: 1679, column: 5, scope: !2418)
!2480 = !DILocation(line: 1681, column: 7, scope: !2182)
!2481 = !DILocation(line: 1681, column: 5, scope: !2182)
!2482 = !DILocation(line: 1682, column: 7, scope: !2483)
!2483 = distinct !DILexicalBlock(scope: !2182, file: !3, line: 1682, column: 7)
!2484 = !DILocation(line: 1682, column: 7, scope: !2182)
!2485 = !DILocation(line: 1683, column: 7, scope: !2483)
!2486 = !DILocation(line: 1683, column: 10, scope: !2483)
!2487 = !DILocation(line: 1683, column: 5, scope: !2483)
!2488 = !DILocation(line: 1684, column: 12, scope: !2182)
!2489 = !DILocation(line: 1684, column: 9, scope: !2182)
!2490 = !DILocation(line: 1694, column: 11, scope: !2182)
!2491 = !DILocation(line: 1694, column: 9, scope: !2182)
!2492 = !DILocation(line: 1697, column: 7, scope: !2493)
!2493 = distinct !DILexicalBlock(scope: !2182, file: !3, line: 1697, column: 7)
!2494 = !DILocation(line: 1697, column: 13, scope: !2493)
!2495 = !DILocation(line: 1697, column: 18, scope: !2493)
!2496 = !DILocation(line: 1697, column: 21, scope: !2493)
!2497 = !DILocation(line: 1697, column: 7, scope: !2182)
!2498 = !DILocation(line: 1700, column: 28, scope: !2499)
!2499 = distinct !DILexicalBlock(scope: !2493, file: !3, line: 1698, column: 5)
!2500 = !DILocation(line: 1700, column: 7, scope: !2499)
!2501 = !DILocation(line: 1701, column: 15, scope: !2499)
!2502 = !DILocation(line: 1701, column: 13, scope: !2499)
!2503 = !DILocation(line: 1702, column: 15, scope: !2499)
!2504 = !DILocation(line: 1703, column: 7, scope: !2499)
!2505 = !DILocation(line: 1704, column: 5, scope: !2499)
!2506 = !DILocation(line: 1707, column: 7, scope: !2507)
!2507 = distinct !DILexicalBlock(scope: !2182, file: !3, line: 1707, column: 7)
!2508 = !DILocation(line: 1707, column: 13, scope: !2507)
!2509 = !DILocation(line: 1707, column: 7, scope: !2182)
!2510 = !DILocation(line: 1709, column: 9, scope: !2511)
!2511 = distinct !DILexicalBlock(scope: !2507, file: !3, line: 1708, column: 5)
!2512 = !DILocation(line: 1709, column: 12, scope: !2511)
!2513 = !DILocation(line: 1710, column: 11, scope: !2514)
!2514 = distinct !DILexicalBlock(scope: !2511, file: !3, line: 1710, column: 11)
!2515 = !DILocation(line: 1710, column: 20, scope: !2514)
!2516 = !DILocation(line: 1710, column: 11, scope: !2511)
!2517 = !DILocation(line: 1711, column: 4, scope: !2514)
!2518 = !DILocation(line: 1711, column: 7, scope: !2514)
!2519 = !DILocation(line: 1711, column: 2, scope: !2514)
!2520 = !DILocation(line: 1712, column: 15, scope: !2511)
!2521 = !DILocation(line: 1713, column: 5, scope: !2511)
!2522 = !DILocation(line: 1716, column: 7, scope: !2523)
!2523 = distinct !DILexicalBlock(scope: !2507, file: !3, line: 1715, column: 5)
!2524 = !DILocation(line: 1717, column: 14, scope: !2523)
!2525 = !DILocation(line: 1717, column: 20, scope: !2523)
!2526 = !DILocation(line: 1717, column: 9, scope: !2523)
!2527 = !DILocation(line: 1717, column: 12, scope: !2523)
!2528 = !DILocation(line: 1721, column: 3, scope: !2182)
!2529 = !DILocation(line: 1721, column: 10, scope: !2182)
!2530 = !DILocation(line: 1721, column: 19, scope: !2182)
!2531 = !DILocation(line: 1723, column: 28, scope: !2532)
!2532 = distinct !DILexicalBlock(scope: !2182, file: !3, line: 1722, column: 5)
!2533 = !DILocation(line: 1723, column: 7, scope: !2532)
!2534 = !DILocation(line: 1724, column: 15, scope: !2532)
!2535 = !DILocation(line: 1724, column: 13, scope: !2532)
!2536 = !DILocation(line: 1725, column: 14, scope: !2532)
!2537 = !DILocation(line: 1725, column: 20, scope: !2532)
!2538 = !DILocation(line: 1725, column: 9, scope: !2532)
!2539 = !DILocation(line: 1725, column: 12, scope: !2532)
!2540 = distinct !{!2540, !2528, !2541}
!2541 = !DILocation(line: 1726, column: 5, scope: !2182)
!2542 = !DILocation(line: 1727, column: 10, scope: !2182)
!2543 = !DILocation(line: 1727, column: 8, scope: !2182)
!2544 = !DILocation(line: 1730, column: 24, scope: !2182)
!2545 = !DILocation(line: 1730, column: 3, scope: !2182)
!2546 = !DILocation(line: 1731, column: 11, scope: !2182)
!2547 = !DILocation(line: 1731, column: 9, scope: !2182)
!2548 = !DILocation(line: 1734, column: 7, scope: !2549)
!2549 = distinct !DILexicalBlock(scope: !2182, file: !3, line: 1734, column: 7)
!2550 = !DILocation(line: 1734, column: 11, scope: !2549)
!2551 = !DILocation(line: 1734, column: 14, scope: !2549)
!2552 = !DILocation(line: 1734, column: 19, scope: !2549)
!2553 = !DILocation(line: 1734, column: 7, scope: !2182)
!2554 = !DILocation(line: 1738, column: 11, scope: !2555)
!2555 = distinct !DILexicalBlock(scope: !2556, file: !3, line: 1738, column: 11)
!2556 = distinct !DILexicalBlock(scope: !2549, file: !3, line: 1735, column: 5)
!2557 = !DILocation(line: 1738, column: 11, scope: !2556)
!2558 = !DILocation(line: 1739, column: 7, scope: !2555)
!2559 = !DILocation(line: 1739, column: 2, scope: !2555)
!2560 = !DILocation(line: 1740, column: 18, scope: !2556)
!2561 = !DILocation(line: 1740, column: 24, scope: !2556)
!2562 = !DILocation(line: 1740, column: 16, scope: !2556)
!2563 = !DILocation(line: 1741, column: 5, scope: !2556)
!2564 = !DILocation(line: 1744, column: 11, scope: !2565)
!2565 = distinct !DILexicalBlock(scope: !2566, file: !3, line: 1744, column: 11)
!2566 = distinct !DILexicalBlock(scope: !2549, file: !3, line: 1743, column: 5)
!2567 = !DILocation(line: 1744, column: 17, scope: !2565)
!2568 = !DILocation(line: 1744, column: 11, scope: !2566)
!2569 = !DILocation(line: 1748, column: 8, scope: !2570)
!2570 = distinct !DILexicalBlock(scope: !2571, file: !3, line: 1748, column: 8)
!2571 = distinct !DILexicalBlock(scope: !2565, file: !3, line: 1745, column: 2)
!2572 = !DILocation(line: 1748, column: 8, scope: !2571)
!2573 = !DILocation(line: 1749, column: 11, scope: !2570)
!2574 = !DILocation(line: 1749, column: 6, scope: !2570)
!2575 = !DILocation(line: 1751, column: 14, scope: !2576)
!2576 = distinct !DILexicalBlock(scope: !2570, file: !3, line: 1751, column: 13)
!2577 = !DILocation(line: 1751, column: 20, scope: !2576)
!2578 = !DILocation(line: 1751, column: 27, scope: !2576)
!2579 = !DILocation(line: 1751, column: 13, scope: !2570)
!2580 = !DILocation(line: 1752, column: 11, scope: !2576)
!2581 = !DILocation(line: 1752, column: 6, scope: !2576)
!2582 = !DILocation(line: 1753, column: 2, scope: !2571)
!2583 = !DILocation(line: 1755, column: 18, scope: !2566)
!2584 = !DILocation(line: 1755, column: 24, scope: !2566)
!2585 = !DILocation(line: 1755, column: 16, scope: !2566)
!2586 = !DILocation(line: 1758, column: 7, scope: !2587)
!2587 = distinct !DILexicalBlock(scope: !2182, file: !3, line: 1758, column: 7)
!2588 = !DILocation(line: 1758, column: 7, scope: !2182)
!2589 = !DILocation(line: 1760, column: 7, scope: !2590)
!2590 = distinct !DILexicalBlock(scope: !2587, file: !3, line: 1759, column: 5)
!2591 = !DILocation(line: 1760, column: 14, scope: !2590)
!2592 = !DILocation(line: 1760, column: 18, scope: !2590)
!2593 = !DILocation(line: 1760, column: 16, scope: !2590)
!2594 = !DILocation(line: 1762, column: 13, scope: !2595)
!2595 = distinct !DILexicalBlock(scope: !2590, file: !3, line: 1761, column: 2)
!2596 = !DILocation(line: 1762, column: 12, scope: !2595)
!2597 = !DILocation(line: 1762, column: 10, scope: !2595)
!2598 = !DILocation(line: 1763, column: 8, scope: !2599)
!2599 = distinct !DILexicalBlock(scope: !2595, file: !3, line: 1763, column: 8)
!2600 = !DILocation(line: 1763, column: 14, scope: !2599)
!2601 = !DILocation(line: 1763, column: 8, scope: !2595)
!2602 = !DILocation(line: 1764, column: 7, scope: !2599)
!2603 = !DILocation(line: 1764, column: 9, scope: !2599)
!2604 = !DILocation(line: 1764, column: 6, scope: !2599)
!2605 = !DILocation(line: 1767, column: 13, scope: !2606)
!2606 = distinct !DILexicalBlock(scope: !2599, file: !3, line: 1766, column: 6)
!2607 = !DILocation(line: 1767, column: 19, scope: !2606)
!2608 = !DILocation(line: 1767, column: 9, scope: !2606)
!2609 = !DILocation(line: 1767, column: 11, scope: !2606)
!2610 = !DILocation(line: 1768, column: 8, scope: !2606)
!2611 = distinct !{!2611, !2589, !2612}
!2612 = !DILocation(line: 1770, column: 2, scope: !2590)
!2613 = !DILocation(line: 1774, column: 11, scope: !2614)
!2614 = distinct !DILexicalBlock(scope: !2590, file: !3, line: 1774, column: 11)
!2615 = !DILocation(line: 1774, column: 16, scope: !2614)
!2616 = !DILocation(line: 1774, column: 13, scope: !2614)
!2617 = !DILocation(line: 1774, column: 11, scope: !2590)
!2618 = !DILocation(line: 1776, column: 4, scope: !2619)
!2619 = distinct !DILexicalBlock(scope: !2614, file: !3, line: 1775, column: 2)
!2620 = !DILocation(line: 1776, column: 13, scope: !2619)
!2621 = !DILocation(line: 1777, column: 11, scope: !2619)
!2622 = !DILocation(line: 1778, column: 2, scope: !2619)
!2623 = !DILocation(line: 1779, column: 5, scope: !2590)
!2624 = !DILocation(line: 1782, column: 14, scope: !2182)
!2625 = !DILocation(line: 1782, column: 3, scope: !2182)
!2626 = !DILocation(line: 1782, column: 12, scope: !2182)
!2627 = !DILocation(line: 1783, column: 3, scope: !2182)
!2628 = !DILocation(line: 1783, column: 12, scope: !2182)
!2629 = !DILocation(line: 1786, column: 7, scope: !2630)
!2630 = distinct !DILexicalBlock(scope: !2182, file: !3, line: 1786, column: 7)
!2631 = !DILocation(line: 1786, column: 7, scope: !2182)
!2632 = !DILocation(line: 1787, column: 5, scope: !2630)
!2633 = !DILocation(line: 1787, column: 12, scope: !2630)
!2634 = !DILocation(line: 1787, column: 19, scope: !2630)
!2635 = !DILocation(line: 1787, column: 25, scope: !2630)
!2636 = !DILocation(line: 1787, column: 17, scope: !2630)
!2637 = !DILocation(line: 1787, column: 29, scope: !2630)
!2638 = !DILocation(line: 1787, column: 32, scope: !2630)
!2639 = !DILocation(line: 1787, column: 41, scope: !2630)
!2640 = !DILocation(line: 0, scope: !2630)
!2641 = !DILocation(line: 1788, column: 11, scope: !2630)
!2642 = distinct !{!2642, !2632, !2641}
!2643 = !DILocation(line: 1791, column: 12, scope: !2182)
!2644 = !DILocation(line: 1791, column: 26, scope: !2182)
!2645 = !DILocation(line: 1791, column: 3, scope: !2182)
!2646 = !DILocation(line: 1802, column: 1, scope: !2182)
!2647 = !DILocalVariable(name: "n", arg: 1, scope: !499, file: !3, line: 2250, type: !398)
!2648 = !DILocation(line: 2250, column: 18, scope: !499)
!2649 = !DILocation(line: 2254, column: 3, scope: !499)
!2650 = !DILocation(line: 2255, column: 3, scope: !499)
!2651 = !DILocation(line: 2257, column: 12, scope: !2652)
!2652 = distinct !DILexicalBlock(scope: !499, file: !3, line: 2257, column: 7)
!2653 = !DILocation(line: 2257, column: 7, scope: !2652)
!2654 = !DILocation(line: 2257, column: 15, scope: !2652)
!2655 = !DILocation(line: 2257, column: 18, scope: !2652)
!2656 = !DILocation(line: 2257, column: 7, scope: !499)
!2657 = !DILocation(line: 2259, column: 11, scope: !2658)
!2658 = distinct !DILexicalBlock(scope: !2659, file: !3, line: 2259, column: 11)
!2659 = distinct !DILexicalBlock(scope: !2652, file: !3, line: 2258, column: 5)
!2660 = !DILocation(line: 2259, column: 13, scope: !2658)
!2661 = !DILocation(line: 2259, column: 11, scope: !2659)
!2662 = !DILocalVariable(name: "t", scope: !2663, file: !3, line: 2261, type: !421)
!2663 = distinct !DILexicalBlock(scope: !2658, file: !3, line: 2260, column: 2)
!2664 = !DILocation(line: 2261, column: 18, scope: !2663)
!2665 = !DILocalVariable(name: "i", scope: !2663, file: !3, line: 2262, type: !398)
!2666 = !DILocation(line: 2262, column: 8, scope: !2663)
!2667 = !DILocation(line: 2264, column: 11, scope: !2668)
!2668 = distinct !DILexicalBlock(scope: !2663, file: !3, line: 2264, column: 4)
!2669 = !DILocation(line: 2264, column: 9, scope: !2668)
!2670 = !DILocation(line: 2264, column: 16, scope: !2671)
!2671 = distinct !DILexicalBlock(scope: !2668, file: !3, line: 2264, column: 4)
!2672 = !DILocation(line: 2264, column: 20, scope: !2671)
!2673 = !DILocation(line: 2264, column: 18, scope: !2671)
!2674 = !DILocation(line: 2264, column: 4, scope: !2668)
!2675 = !DILocation(line: 2265, column: 11, scope: !2671)
!2676 = !DILocation(line: 2265, column: 8, scope: !2671)
!2677 = !DILocation(line: 2265, column: 6, scope: !2671)
!2678 = !DILocation(line: 2264, column: 23, scope: !2671)
!2679 = !DILocation(line: 2264, column: 4, scope: !2671)
!2680 = distinct !{!2680, !2674, !2681}
!2681 = !DILocation(line: 2265, column: 11, scope: !2668)
!2682 = !DILocation(line: 2267, column: 29, scope: !2663)
!2683 = !DILocation(line: 2267, column: 24, scope: !2663)
!2684 = !DILocation(line: 2267, column: 43, scope: !2663)
!2685 = !DILocation(line: 2267, column: 4, scope: !2663)
!2686 = !DILocation(line: 2268, column: 2, scope: !2663)
!2687 = !DILocalVariable(name: "t", scope: !2688, file: !3, line: 2271, type: !6)
!2688 = distinct !DILexicalBlock(scope: !2658, file: !3, line: 2270, column: 2)
!2689 = !DILocation(line: 2271, column: 27, scope: !2688)
!2690 = !DILocation(line: 2271, column: 44, scope: !2688)
!2691 = !DILocation(line: 2271, column: 46, scope: !2688)
!2692 = !DILocation(line: 2271, column: 31, scope: !2688)
!2693 = !DILocation(line: 2272, column: 23, scope: !2688)
!2694 = !DILocation(line: 2272, column: 18, scope: !2688)
!2695 = !DILocation(line: 2272, column: 27, scope: !2688)
!2696 = !DILocation(line: 2272, column: 30, scope: !2688)
!2697 = !DILocation(line: 2272, column: 4, scope: !2688)
!2698 = !DILocation(line: 2274, column: 5, scope: !2659)
!2699 = !DILocation(line: 2276, column: 16, scope: !499)
!2700 = !DILocation(line: 2276, column: 11, scope: !499)
!2701 = !DILocation(line: 2276, column: 3, scope: !499)
!2702 = distinct !DISubprogram(name: "cmp_significands", scope: !3, file: !3, line: 360, type: !2703, scopeLine: 361, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!2703 = !DISubroutineType(types: !2704)
!2704 = !{!398, !6, !6}
!2705 = !DILocalVariable(name: "a", arg: 1, scope: !2702, file: !3, line: 360, type: !6)
!2706 = !DILocation(line: 360, column: 42, scope: !2702)
!2707 = !DILocalVariable(name: "b", arg: 2, scope: !2702, file: !3, line: 360, type: !6)
!2708 = !DILocation(line: 360, column: 68, scope: !2702)
!2709 = !DILocalVariable(name: "i", scope: !2702, file: !3, line: 362, type: !398)
!2710 = !DILocation(line: 362, column: 7, scope: !2702)
!2711 = !DILocation(line: 364, column: 10, scope: !2712)
!2712 = distinct !DILexicalBlock(scope: !2702, file: !3, line: 364, column: 3)
!2713 = !DILocation(line: 364, column: 8, scope: !2712)
!2714 = !DILocation(line: 364, column: 23, scope: !2715)
!2715 = distinct !DILexicalBlock(scope: !2712, file: !3, line: 364, column: 3)
!2716 = !DILocation(line: 364, column: 25, scope: !2715)
!2717 = !DILocation(line: 364, column: 3, scope: !2712)
!2718 = !DILocalVariable(name: "ai", scope: !2719, file: !3, line: 366, type: !20)
!2719 = distinct !DILexicalBlock(scope: !2715, file: !3, line: 365, column: 5)
!2720 = !DILocation(line: 366, column: 21, scope: !2719)
!2721 = !DILocation(line: 366, column: 26, scope: !2719)
!2722 = !DILocation(line: 366, column: 29, scope: !2719)
!2723 = !DILocation(line: 366, column: 33, scope: !2719)
!2724 = !DILocalVariable(name: "bi", scope: !2719, file: !3, line: 367, type: !20)
!2725 = !DILocation(line: 367, column: 21, scope: !2719)
!2726 = !DILocation(line: 367, column: 26, scope: !2719)
!2727 = !DILocation(line: 367, column: 29, scope: !2719)
!2728 = !DILocation(line: 367, column: 33, scope: !2719)
!2729 = !DILocation(line: 369, column: 11, scope: !2730)
!2730 = distinct !DILexicalBlock(scope: !2719, file: !3, line: 369, column: 11)
!2731 = !DILocation(line: 369, column: 16, scope: !2730)
!2732 = !DILocation(line: 369, column: 14, scope: !2730)
!2733 = !DILocation(line: 369, column: 11, scope: !2719)
!2734 = !DILocation(line: 370, column: 2, scope: !2730)
!2735 = !DILocation(line: 371, column: 11, scope: !2736)
!2736 = distinct !DILexicalBlock(scope: !2719, file: !3, line: 371, column: 11)
!2737 = !DILocation(line: 371, column: 16, scope: !2736)
!2738 = !DILocation(line: 371, column: 14, scope: !2736)
!2739 = !DILocation(line: 371, column: 11, scope: !2719)
!2740 = !DILocation(line: 372, column: 2, scope: !2736)
!2741 = !DILocation(line: 373, column: 5, scope: !2719)
!2742 = !DILocation(line: 364, column: 31, scope: !2715)
!2743 = !DILocation(line: 364, column: 3, scope: !2715)
!2744 = distinct !{!2744, !2717, !2745}
!2745 = !DILocation(line: 373, column: 5, scope: !2712)
!2746 = !DILocation(line: 375, column: 3, scope: !2702)
!2747 = !DILocation(line: 376, column: 1, scope: !2702)
!2748 = !DILocalVariable(name: "n", arg: 1, scope: !507, file: !3, line: 2282, type: !398)
!2749 = !DILocation(line: 2282, column: 19, scope: !507)
!2750 = !DILocation(line: 2286, column: 3, scope: !507)
!2751 = !DILocation(line: 2287, column: 3, scope: !507)
!2752 = !DILocation(line: 2289, column: 12, scope: !2753)
!2753 = distinct !DILexicalBlock(scope: !507, file: !3, line: 2289, column: 7)
!2754 = !DILocation(line: 2289, column: 7, scope: !2753)
!2755 = !DILocation(line: 2289, column: 15, scope: !2753)
!2756 = !DILocation(line: 2289, column: 18, scope: !2753)
!2757 = !DILocation(line: 2289, column: 7, scope: !507)
!2758 = !DILocation(line: 2290, column: 22, scope: !2753)
!2759 = !DILocation(line: 2290, column: 17, scope: !2753)
!2760 = !DILocation(line: 2290, column: 26, scope: !2753)
!2761 = !DILocation(line: 2290, column: 55, scope: !2753)
!2762 = !DILocation(line: 2290, column: 42, scope: !2753)
!2763 = !DILocation(line: 2290, column: 5, scope: !2753)
!2764 = !DILocation(line: 2292, column: 16, scope: !507)
!2765 = !DILocation(line: 2292, column: 11, scope: !507)
!2766 = !DILocation(line: 2292, column: 3, scope: !507)
!2767 = distinct !DISubprogram(name: "rtd_divmod", scope: !3, file: !3, line: 1462, type: !2768, scopeLine: 1463, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!2768 = !DISubroutineType(types: !2769)
!2769 = !{!20, !426, !426}
!2770 = !DILocalVariable(name: "num", arg: 1, scope: !2767, file: !3, line: 1462, type: !426)
!2771 = !DILocation(line: 1462, column: 30, scope: !2767)
!2772 = !DILocalVariable(name: "den", arg: 2, scope: !2767, file: !3, line: 1462, type: !426)
!2773 = !DILocation(line: 1462, column: 52, scope: !2767)
!2774 = !DILocalVariable(name: "q", scope: !2767, file: !3, line: 1464, type: !20)
!2775 = !DILocation(line: 1464, column: 17, scope: !2767)
!2776 = !DILocalVariable(name: "msb", scope: !2767, file: !3, line: 1464, type: !20)
!2777 = !DILocation(line: 1464, column: 20, scope: !2767)
!2778 = !DILocalVariable(name: "expn", scope: !2767, file: !3, line: 1465, type: !398)
!2779 = !DILocation(line: 1465, column: 7, scope: !2767)
!2780 = !DILocation(line: 1465, column: 14, scope: !2767)
!2781 = !DILocalVariable(name: "expd", scope: !2767, file: !3, line: 1465, type: !398)
!2782 = !DILocation(line: 1465, column: 30, scope: !2767)
!2783 = !DILocation(line: 1465, column: 37, scope: !2767)
!2784 = !DILocation(line: 1467, column: 7, scope: !2785)
!2785 = distinct !DILexicalBlock(scope: !2767, file: !3, line: 1467, column: 7)
!2786 = !DILocation(line: 1467, column: 14, scope: !2785)
!2787 = !DILocation(line: 1467, column: 12, scope: !2785)
!2788 = !DILocation(line: 1467, column: 7, scope: !2767)
!2789 = !DILocation(line: 1468, column: 5, scope: !2785)
!2790 = !DILocation(line: 1470, column: 11, scope: !2767)
!2791 = !DILocation(line: 1470, column: 5, scope: !2767)
!2792 = !DILocation(line: 1471, column: 3, scope: !2767)
!2793 = !DILocation(line: 1472, column: 3, scope: !2767)
!2794 = !DILocation(line: 1474, column: 13, scope: !2795)
!2795 = distinct !DILexicalBlock(scope: !2767, file: !3, line: 1473, column: 5)
!2796 = !DILocation(line: 1474, column: 18, scope: !2795)
!2797 = !DILocation(line: 1474, column: 31, scope: !2795)
!2798 = !DILocation(line: 1474, column: 11, scope: !2795)
!2799 = !DILocation(line: 1475, column: 9, scope: !2795)
!2800 = !DILocation(line: 1476, column: 29, scope: !2795)
!2801 = !DILocation(line: 1476, column: 34, scope: !2795)
!2802 = !DILocation(line: 1476, column: 7, scope: !2795)
!2803 = !DILabel(scope: !2795, name: "start", file: !3, line: 1477)
!2804 = !DILocation(line: 1477, column: 5, scope: !2795)
!2805 = !DILocation(line: 1478, column: 11, scope: !2806)
!2806 = distinct !DILexicalBlock(scope: !2795, file: !3, line: 1478, column: 11)
!2807 = !DILocation(line: 1478, column: 15, scope: !2806)
!2808 = !DILocation(line: 1478, column: 36, scope: !2806)
!2809 = !DILocation(line: 1478, column: 41, scope: !2806)
!2810 = !DILocation(line: 1478, column: 18, scope: !2806)
!2811 = !DILocation(line: 1478, column: 46, scope: !2806)
!2812 = !DILocation(line: 1478, column: 11, scope: !2795)
!2813 = !DILocation(line: 1480, column: 22, scope: !2814)
!2814 = distinct !DILexicalBlock(scope: !2806, file: !3, line: 1479, column: 2)
!2815 = !DILocation(line: 1480, column: 27, scope: !2814)
!2816 = !DILocation(line: 1480, column: 32, scope: !2814)
!2817 = !DILocation(line: 1480, column: 4, scope: !2814)
!2818 = !DILocation(line: 1481, column: 6, scope: !2814)
!2819 = !DILocation(line: 1482, column: 2, scope: !2814)
!2820 = !DILocation(line: 1483, column: 5, scope: !2795)
!2821 = !DILocation(line: 1484, column: 10, scope: !2767)
!2822 = !DILocation(line: 1484, column: 20, scope: !2767)
!2823 = !DILocation(line: 1484, column: 17, scope: !2767)
!2824 = distinct !{!2824, !2793, !2825}
!2825 = !DILocation(line: 1484, column: 24, scope: !2767)
!2826 = !DILocation(line: 1486, column: 3, scope: !2767)
!2827 = !DILocation(line: 1487, column: 14, scope: !2767)
!2828 = !DILocation(line: 1487, column: 3, scope: !2767)
!2829 = !DILocation(line: 1489, column: 10, scope: !2767)
!2830 = !DILocation(line: 1489, column: 3, scope: !2767)
!2831 = !DILocation(line: 1490, column: 1, scope: !2767)
!2832 = distinct !DISubprogram(name: "cmp_significand_0", scope: !3, file: !3, line: 381, type: !1431, scopeLine: 382, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!2833 = !DILocalVariable(name: "a", arg: 1, scope: !2832, file: !3, line: 381, type: !6)
!2834 = !DILocation(line: 381, column: 43, scope: !2832)
!2835 = !DILocalVariable(name: "i", scope: !2832, file: !3, line: 383, type: !398)
!2836 = !DILocation(line: 383, column: 7, scope: !2832)
!2837 = !DILocation(line: 385, column: 10, scope: !2838)
!2838 = distinct !DILexicalBlock(scope: !2832, file: !3, line: 385, column: 3)
!2839 = !DILocation(line: 385, column: 8, scope: !2838)
!2840 = !DILocation(line: 385, column: 23, scope: !2841)
!2841 = distinct !DILexicalBlock(scope: !2838, file: !3, line: 385, column: 3)
!2842 = !DILocation(line: 385, column: 25, scope: !2841)
!2843 = !DILocation(line: 385, column: 3, scope: !2838)
!2844 = !DILocation(line: 386, column: 9, scope: !2845)
!2845 = distinct !DILexicalBlock(scope: !2841, file: !3, line: 386, column: 9)
!2846 = !DILocation(line: 386, column: 12, scope: !2845)
!2847 = !DILocation(line: 386, column: 16, scope: !2845)
!2848 = !DILocation(line: 386, column: 9, scope: !2841)
!2849 = !DILocation(line: 387, column: 7, scope: !2845)
!2850 = !DILocation(line: 386, column: 17, scope: !2845)
!2851 = !DILocation(line: 385, column: 31, scope: !2841)
!2852 = !DILocation(line: 385, column: 3, scope: !2841)
!2853 = distinct !{!2853, !2843, !2854}
!2854 = !DILocation(line: 387, column: 14, scope: !2838)
!2855 = !DILocation(line: 389, column: 3, scope: !2832)
!2856 = !DILocation(line: 390, column: 1, scope: !2832)
!2857 = distinct !DISubprogram(name: "real_to_decimal", scope: !3, file: !3, line: 1807, type: !2858, scopeLine: 1809, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !406)
!2858 = !DISubroutineType(types: !2859)
!2859 = !{null, !2185, !6, !2187, !2187, !398}
!2860 = !DILocalVariable(name: "str", arg: 1, scope: !2857, file: !3, line: 1807, type: !2185)
!2861 = !DILocation(line: 1807, column: 24, scope: !2857)
!2862 = !DILocalVariable(name: "r_orig", arg: 2, scope: !2857, file: !3, line: 1807, type: !6)
!2863 = !DILocation(line: 1807, column: 52, scope: !2857)
!2864 = !DILocalVariable(name: "buf_size", arg: 3, scope: !2857, file: !3, line: 1807, type: !2187)
!2865 = !DILocation(line: 1807, column: 67, scope: !2857)
!2866 = !DILocalVariable(name: "digits", arg: 4, scope: !2857, file: !3, line: 1808, type: !2187)
!2867 = !DILocation(line: 1808, column: 11, scope: !2857)
!2868 = !DILocalVariable(name: "crop_trailing_zeros", arg: 5, scope: !2857, file: !3, line: 1808, type: !398)
!2869 = !DILocation(line: 1808, column: 23, scope: !2857)
!2870 = !DILocation(line: 1810, column: 29, scope: !2857)
!2871 = !DILocation(line: 1810, column: 34, scope: !2857)
!2872 = !DILocation(line: 1810, column: 42, scope: !2857)
!2873 = !DILocation(line: 1811, column: 8, scope: !2857)
!2874 = !DILocation(line: 1811, column: 16, scope: !2857)
!2875 = !DILocation(line: 1810, column: 3, scope: !2857)
!2876 = !DILocation(line: 1812, column: 1, scope: !2857)
!2877 = distinct !DISubprogram(name: "real_to_hexadecimal", scope: !3, file: !3, line: 1820, type: !2858, scopeLine: 1822, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !406)
!2878 = !DILocalVariable(name: "str", arg: 1, scope: !2877, file: !3, line: 1820, type: !2185)
!2879 = !DILocation(line: 1820, column: 28, scope: !2877)
!2880 = !DILocalVariable(name: "r", arg: 2, scope: !2877, file: !3, line: 1820, type: !6)
!2881 = !DILocation(line: 1820, column: 56, scope: !2877)
!2882 = !DILocalVariable(name: "buf_size", arg: 3, scope: !2877, file: !3, line: 1820, type: !2187)
!2883 = !DILocation(line: 1820, column: 66, scope: !2877)
!2884 = !DILocalVariable(name: "digits", arg: 4, scope: !2877, file: !3, line: 1821, type: !2187)
!2885 = !DILocation(line: 1821, column: 15, scope: !2877)
!2886 = !DILocalVariable(name: "crop_trailing_zeros", arg: 5, scope: !2877, file: !3, line: 1821, type: !398)
!2887 = !DILocation(line: 1821, column: 27, scope: !2877)
!2888 = !DILocalVariable(name: "i", scope: !2877, file: !3, line: 1823, type: !398)
!2889 = !DILocation(line: 1823, column: 7, scope: !2877)
!2890 = !DILocalVariable(name: "j", scope: !2877, file: !3, line: 1823, type: !398)
!2891 = !DILocation(line: 1823, column: 10, scope: !2877)
!2892 = !DILocalVariable(name: "exp", scope: !2877, file: !3, line: 1823, type: !398)
!2893 = !DILocation(line: 1823, column: 13, scope: !2877)
!2894 = !DILocation(line: 1823, column: 19, scope: !2877)
!2895 = !DILocalVariable(name: "p", scope: !2877, file: !3, line: 1824, type: !2185)
!2896 = !DILocation(line: 1824, column: 9, scope: !2877)
!2897 = !DILocalVariable(name: "first", scope: !2877, file: !3, line: 1824, type: !2185)
!2898 = !DILocation(line: 1824, column: 13, scope: !2877)
!2899 = !DILocalVariable(name: "exp_buf", scope: !2877, file: !3, line: 1825, type: !2900)
!2900 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2186, size: 128, elements: !2901)
!2901 = !{!2902}
!2902 = !DISubrange(count: 16)
!2903 = !DILocation(line: 1825, column: 8, scope: !2877)
!2904 = !DILocalVariable(name: "max_digits", scope: !2877, file: !3, line: 1826, type: !2187)
!2905 = !DILocation(line: 1826, column: 10, scope: !2877)
!2906 = !DILocation(line: 1828, column: 11, scope: !2877)
!2907 = !DILocation(line: 1828, column: 14, scope: !2877)
!2908 = !DILocation(line: 1828, column: 3, scope: !2877)
!2909 = !DILocation(line: 1831, column: 11, scope: !2910)
!2910 = distinct !DILexicalBlock(scope: !2877, file: !3, line: 1829, column: 5)
!2911 = !DILocation(line: 1832, column: 7, scope: !2910)
!2912 = !DILocation(line: 1834, column: 7, scope: !2910)
!2913 = !DILocation(line: 1836, column: 15, scope: !2910)
!2914 = !DILocation(line: 1836, column: 21, scope: !2910)
!2915 = !DILocation(line: 1836, column: 24, scope: !2910)
!2916 = !DILocation(line: 1836, column: 7, scope: !2910)
!2917 = !DILocation(line: 1837, column: 7, scope: !2910)
!2918 = !DILocation(line: 1840, column: 16, scope: !2910)
!2919 = !DILocation(line: 1840, column: 33, scope: !2910)
!2920 = !DILocation(line: 1840, column: 36, scope: !2910)
!2921 = !DILocation(line: 1841, column: 10, scope: !2910)
!2922 = !DILocation(line: 1841, column: 13, scope: !2910)
!2923 = !DILocation(line: 1840, column: 7, scope: !2910)
!2924 = !DILocation(line: 1842, column: 7, scope: !2910)
!2925 = !DILocation(line: 1844, column: 7, scope: !2910)
!2926 = !DILocation(line: 1845, column: 5, scope: !2910)
!2927 = !DILocation(line: 1847, column: 7, scope: !2928)
!2928 = distinct !DILexicalBlock(scope: !2877, file: !3, line: 1847, column: 7)
!2929 = !DILocation(line: 1847, column: 10, scope: !2928)
!2930 = !DILocation(line: 1847, column: 7, scope: !2877)
!2931 = !DILocation(line: 1850, column: 15, scope: !2932)
!2932 = distinct !DILexicalBlock(scope: !2928, file: !3, line: 1848, column: 5)
!2933 = !DILocation(line: 1850, column: 7, scope: !2932)
!2934 = !DILocation(line: 1851, column: 7, scope: !2932)
!2935 = !DILocation(line: 1854, column: 7, scope: !2936)
!2936 = distinct !DILexicalBlock(scope: !2877, file: !3, line: 1854, column: 7)
!2937 = !DILocation(line: 1854, column: 14, scope: !2936)
!2938 = !DILocation(line: 1854, column: 7, scope: !2877)
!2939 = !DILocation(line: 1855, column: 12, scope: !2936)
!2940 = !DILocation(line: 1855, column: 5, scope: !2936)
!2941 = !DILocation(line: 1859, column: 12, scope: !2877)
!2942 = !DILocation(line: 1859, column: 29, scope: !2877)
!2943 = !DILocation(line: 1859, column: 3, scope: !2877)
!2944 = !DILocation(line: 1860, column: 16, scope: !2877)
!2945 = !DILocation(line: 1860, column: 35, scope: !2877)
!2946 = !DILocation(line: 1860, column: 27, scope: !2877)
!2947 = !DILocation(line: 1860, column: 25, scope: !2877)
!2948 = !DILocation(line: 1860, column: 46, scope: !2877)
!2949 = !DILocation(line: 1860, column: 49, scope: !2877)
!2950 = !DILocation(line: 1860, column: 44, scope: !2877)
!2951 = !DILocation(line: 1860, column: 54, scope: !2877)
!2952 = !DILocation(line: 1860, column: 58, scope: !2877)
!2953 = !DILocation(line: 1860, column: 14, scope: !2877)
!2954 = !DILocation(line: 1861, column: 3, scope: !2877)
!2955 = !DILocation(line: 1862, column: 7, scope: !2956)
!2956 = distinct !DILexicalBlock(scope: !2877, file: !3, line: 1862, column: 7)
!2957 = !DILocation(line: 1862, column: 16, scope: !2956)
!2958 = !DILocation(line: 1862, column: 14, scope: !2956)
!2959 = !DILocation(line: 1862, column: 7, scope: !2877)
!2960 = !DILocation(line: 1863, column: 14, scope: !2956)
!2961 = !DILocation(line: 1863, column: 12, scope: !2956)
!2962 = !DILocation(line: 1863, column: 5, scope: !2956)
!2963 = !DILocation(line: 1865, column: 7, scope: !2877)
!2964 = !DILocation(line: 1865, column: 5, scope: !2877)
!2965 = !DILocation(line: 1866, column: 7, scope: !2966)
!2966 = distinct !DILexicalBlock(scope: !2877, file: !3, line: 1866, column: 7)
!2967 = !DILocation(line: 1866, column: 10, scope: !2966)
!2968 = !DILocation(line: 1866, column: 7, scope: !2877)
!2969 = !DILocation(line: 1867, column: 7, scope: !2966)
!2970 = !DILocation(line: 1867, column: 10, scope: !2966)
!2971 = !DILocation(line: 1867, column: 5, scope: !2966)
!2972 = !DILocation(line: 1868, column: 5, scope: !2877)
!2973 = !DILocation(line: 1868, column: 8, scope: !2877)
!2974 = !DILocation(line: 1869, column: 5, scope: !2877)
!2975 = !DILocation(line: 1869, column: 8, scope: !2877)
!2976 = !DILocation(line: 1870, column: 5, scope: !2877)
!2977 = !DILocation(line: 1870, column: 8, scope: !2877)
!2978 = !DILocation(line: 1871, column: 5, scope: !2877)
!2979 = !DILocation(line: 1871, column: 8, scope: !2877)
!2980 = !DILocation(line: 1872, column: 11, scope: !2877)
!2981 = !DILocation(line: 1872, column: 9, scope: !2877)
!2982 = !DILocation(line: 1874, column: 10, scope: !2983)
!2983 = distinct !DILexicalBlock(scope: !2877, file: !3, line: 1874, column: 3)
!2984 = !DILocation(line: 1874, column: 8, scope: !2983)
!2985 = !DILocation(line: 1874, column: 23, scope: !2986)
!2986 = distinct !DILexicalBlock(scope: !2983, file: !3, line: 1874, column: 3)
!2987 = !DILocation(line: 1874, column: 25, scope: !2986)
!2988 = !DILocation(line: 1874, column: 3, scope: !2983)
!2989 = !DILocation(line: 1875, column: 12, scope: !2990)
!2990 = distinct !DILexicalBlock(scope: !2986, file: !3, line: 1875, column: 5)
!2991 = !DILocation(line: 1875, column: 10, scope: !2990)
!2992 = !DILocation(line: 1875, column: 38, scope: !2993)
!2993 = distinct !DILexicalBlock(scope: !2990, file: !3, line: 1875, column: 5)
!2994 = !DILocation(line: 1875, column: 40, scope: !2993)
!2995 = !DILocation(line: 1875, column: 5, scope: !2990)
!2996 = !DILocation(line: 1877, column: 29, scope: !2997)
!2997 = distinct !DILexicalBlock(scope: !2993, file: !3, line: 1876, column: 7)
!2998 = !DILocation(line: 1877, column: 32, scope: !2997)
!2999 = !DILocation(line: 1877, column: 36, scope: !2997)
!3000 = !DILocation(line: 1877, column: 42, scope: !2997)
!3001 = !DILocation(line: 1877, column: 39, scope: !2997)
!3002 = !DILocation(line: 1877, column: 45, scope: !2997)
!3003 = !DILocation(line: 1877, column: 9, scope: !2997)
!3004 = !DILocation(line: 1877, column: 4, scope: !2997)
!3005 = !DILocation(line: 1877, column: 7, scope: !2997)
!3006 = !DILocation(line: 1878, column: 6, scope: !3007)
!3007 = distinct !DILexicalBlock(scope: !2997, file: !3, line: 1878, column: 6)
!3008 = !DILocation(line: 1878, column: 15, scope: !3007)
!3009 = !DILocation(line: 1878, column: 6, scope: !2997)
!3010 = !DILocation(line: 1879, column: 4, scope: !3007)
!3011 = !DILocation(line: 1880, column: 7, scope: !2997)
!3012 = !DILocation(line: 1875, column: 48, scope: !2993)
!3013 = !DILocation(line: 1875, column: 5, scope: !2993)
!3014 = distinct !{!3014, !2995, !3015}
!3015 = !DILocation(line: 1880, column: 7, scope: !2990)
!3016 = !DILocation(line: 1874, column: 31, scope: !2986)
!3017 = !DILocation(line: 1874, column: 3, scope: !2986)
!3018 = distinct !{!3018, !2988, !3019}
!3019 = !DILocation(line: 1880, column: 7, scope: !2983)
!3020 = !DILabel(scope: !2877, name: "out", file: !3, line: 1882)
!3021 = !DILocation(line: 1882, column: 2, scope: !2877)
!3022 = !DILocation(line: 1883, column: 7, scope: !3023)
!3023 = distinct !DILexicalBlock(scope: !2877, file: !3, line: 1883, column: 7)
!3024 = !DILocation(line: 1883, column: 7, scope: !2877)
!3025 = !DILocation(line: 1884, column: 5, scope: !3023)
!3026 = !DILocation(line: 1884, column: 12, scope: !3023)
!3027 = !DILocation(line: 1884, column: 16, scope: !3023)
!3028 = !DILocation(line: 1884, column: 22, scope: !3023)
!3029 = !DILocation(line: 1884, column: 14, scope: !3023)
!3030 = !DILocation(line: 1884, column: 26, scope: !3023)
!3031 = !DILocation(line: 1884, column: 29, scope: !3023)
!3032 = !DILocation(line: 1884, column: 35, scope: !3023)
!3033 = !DILocation(line: 0, scope: !3023)
!3034 = !DILocation(line: 1885, column: 8, scope: !3023)
!3035 = distinct !{!3035, !3025, !3034}
!3036 = !DILocation(line: 1887, column: 12, scope: !2877)
!3037 = !DILocation(line: 1887, column: 23, scope: !2877)
!3038 = !DILocation(line: 1887, column: 3, scope: !2877)
!3039 = !DILocation(line: 1888, column: 1, scope: !2877)
!3040 = distinct !DISubprogram(name: "real_from_string", scope: !3, file: !3, line: 1895, type: !3041, scopeLine: 1896, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !406)
!3041 = !DISubroutineType(types: !3042)
!3042 = !{!398, !426, !3043}
!3043 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3044, size: 64)
!3044 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2186)
!3045 = !DILocalVariable(name: "r", arg: 1, scope: !3040, file: !3, line: 1895, type: !426)
!3046 = !DILocation(line: 1895, column: 36, scope: !3040)
!3047 = !DILocalVariable(name: "str", arg: 2, scope: !3040, file: !3, line: 1895, type: !3043)
!3048 = !DILocation(line: 1895, column: 51, scope: !3040)
!3049 = !DILocalVariable(name: "exp", scope: !3040, file: !3, line: 1897, type: !398)
!3050 = !DILocation(line: 1897, column: 7, scope: !3040)
!3051 = !DILocalVariable(name: "sign", scope: !3040, file: !3, line: 1898, type: !399)
!3052 = !DILocation(line: 1898, column: 8, scope: !3040)
!3053 = !DILocation(line: 1900, column: 13, scope: !3040)
!3054 = !DILocation(line: 1900, column: 3, scope: !3040)
!3055 = !DILocation(line: 1902, column: 8, scope: !3056)
!3056 = distinct !DILexicalBlock(scope: !3040, file: !3, line: 1902, column: 7)
!3057 = !DILocation(line: 1902, column: 7, scope: !3056)
!3058 = !DILocation(line: 1902, column: 12, scope: !3056)
!3059 = !DILocation(line: 1902, column: 7, scope: !3040)
!3060 = !DILocation(line: 1904, column: 12, scope: !3061)
!3061 = distinct !DILexicalBlock(scope: !3056, file: !3, line: 1903, column: 5)
!3062 = !DILocation(line: 1905, column: 10, scope: !3061)
!3063 = !DILocation(line: 1906, column: 5, scope: !3061)
!3064 = !DILocation(line: 1907, column: 13, scope: !3065)
!3065 = distinct !DILexicalBlock(scope: !3056, file: !3, line: 1907, column: 12)
!3066 = !DILocation(line: 1907, column: 12, scope: !3065)
!3067 = !DILocation(line: 1907, column: 17, scope: !3065)
!3068 = !DILocation(line: 1907, column: 12, scope: !3056)
!3069 = !DILocation(line: 1908, column: 8, scope: !3065)
!3070 = !DILocation(line: 1908, column: 5, scope: !3065)
!3071 = !DILocation(line: 1910, column: 17, scope: !3072)
!3072 = distinct !DILexicalBlock(scope: !3040, file: !3, line: 1910, column: 7)
!3073 = !DILocation(line: 1910, column: 8, scope: !3072)
!3074 = !DILocation(line: 1910, column: 7, scope: !3040)
!3075 = !DILocation(line: 1912, column: 27, scope: !3076)
!3076 = distinct !DILexicalBlock(scope: !3072, file: !3, line: 1911, column: 5)
!3077 = !DILocation(line: 1912, column: 30, scope: !3076)
!3078 = !DILocation(line: 1912, column: 7, scope: !3076)
!3079 = !DILocation(line: 1913, column: 7, scope: !3076)
!3080 = !DILocation(line: 1915, column: 22, scope: !3081)
!3081 = distinct !DILexicalBlock(scope: !3072, file: !3, line: 1915, column: 12)
!3082 = !DILocation(line: 1915, column: 13, scope: !3081)
!3083 = !DILocation(line: 1915, column: 12, scope: !3072)
!3084 = !DILocation(line: 1917, column: 27, scope: !3085)
!3085 = distinct !DILexicalBlock(scope: !3081, file: !3, line: 1916, column: 5)
!3086 = !DILocation(line: 1917, column: 30, scope: !3085)
!3087 = !DILocation(line: 1917, column: 7, scope: !3085)
!3088 = !DILocation(line: 1918, column: 7, scope: !3085)
!3089 = !DILocation(line: 1920, column: 22, scope: !3090)
!3090 = distinct !DILexicalBlock(scope: !3081, file: !3, line: 1920, column: 12)
!3091 = !DILocation(line: 1920, column: 13, scope: !3090)
!3092 = !DILocation(line: 1920, column: 12, scope: !3081)
!3093 = !DILocation(line: 1922, column: 16, scope: !3094)
!3094 = distinct !DILexicalBlock(scope: !3090, file: !3, line: 1921, column: 5)
!3095 = !DILocation(line: 1922, column: 19, scope: !3094)
!3096 = !DILocation(line: 1922, column: 7, scope: !3094)
!3097 = !DILocation(line: 1923, column: 7, scope: !3094)
!3098 = !DILocation(line: 1926, column: 7, scope: !3099)
!3099 = distinct !DILexicalBlock(scope: !3040, file: !3, line: 1926, column: 7)
!3100 = !DILocation(line: 1926, column: 14, scope: !3099)
!3101 = !DILocation(line: 1926, column: 21, scope: !3099)
!3102 = !DILocation(line: 1926, column: 25, scope: !3099)
!3103 = !DILocation(line: 1926, column: 32, scope: !3099)
!3104 = !DILocation(line: 1926, column: 39, scope: !3099)
!3105 = !DILocation(line: 1926, column: 42, scope: !3099)
!3106 = !DILocation(line: 1926, column: 49, scope: !3099)
!3107 = !DILocation(line: 1926, column: 7, scope: !3040)
!3108 = !DILocalVariable(name: "pos", scope: !3109, file: !3, line: 1929, type: !398)
!3109 = distinct !DILexicalBlock(scope: !3099, file: !3, line: 1927, column: 5)
!3110 = !DILocation(line: 1929, column: 11, scope: !3109)
!3111 = !DILocalVariable(name: "d", scope: !3109, file: !3, line: 1929, type: !398)
!3112 = !DILocation(line: 1929, column: 39, scope: !3109)
!3113 = !DILocation(line: 1931, column: 11, scope: !3109)
!3114 = !DILocation(line: 1933, column: 7, scope: !3109)
!3115 = !DILocation(line: 1933, column: 15, scope: !3109)
!3116 = !DILocation(line: 1933, column: 14, scope: !3109)
!3117 = !DILocation(line: 1933, column: 19, scope: !3109)
!3118 = !DILocation(line: 1934, column: 5, scope: !3109)
!3119 = distinct !{!3119, !3114, !3118}
!3120 = !DILocation(line: 1935, column: 7, scope: !3109)
!3121 = !DILocation(line: 1937, column: 8, scope: !3122)
!3122 = distinct !DILexicalBlock(scope: !3109, file: !3, line: 1936, column: 2)
!3123 = !DILocation(line: 1937, column: 6, scope: !3122)
!3124 = !DILocation(line: 1938, column: 8, scope: !3125)
!3125 = distinct !DILexicalBlock(scope: !3122, file: !3, line: 1938, column: 8)
!3126 = !DILocation(line: 1938, column: 10, scope: !3125)
!3127 = !DILocation(line: 1938, column: 8, scope: !3122)
!3128 = !DILocation(line: 1939, column: 6, scope: !3125)
!3129 = !DILocation(line: 1940, column: 8, scope: !3130)
!3130 = distinct !DILexicalBlock(scope: !3122, file: !3, line: 1940, column: 8)
!3131 = !DILocation(line: 1940, column: 12, scope: !3130)
!3132 = !DILocation(line: 1940, column: 8, scope: !3122)
!3133 = !DILocation(line: 1943, column: 22, scope: !3134)
!3134 = distinct !DILexicalBlock(scope: !3130, file: !3, line: 1941, column: 6)
!3135 = !DILocation(line: 1943, column: 6, scope: !3134)
!3136 = !DILocation(line: 1943, column: 28, scope: !3134)
!3137 = !DILocation(line: 1943, column: 32, scope: !3134)
!3138 = !DILocation(line: 1943, column: 24, scope: !3134)
!3139 = !DILocation(line: 1942, column: 8, scope: !3134)
!3140 = !DILocation(line: 1942, column: 11, scope: !3134)
!3141 = !DILocation(line: 1942, column: 15, scope: !3134)
!3142 = !DILocation(line: 1942, column: 19, scope: !3134)
!3143 = !DILocation(line: 1943, column: 3, scope: !3134)
!3144 = !DILocation(line: 1944, column: 12, scope: !3134)
!3145 = !DILocation(line: 1945, column: 6, scope: !3134)
!3146 = !DILocation(line: 1946, column: 13, scope: !3147)
!3147 = distinct !DILexicalBlock(scope: !3130, file: !3, line: 1946, column: 13)
!3148 = !DILocation(line: 1946, column: 13, scope: !3130)
!3149 = !DILocation(line: 1949, column: 6, scope: !3147)
!3150 = !DILocation(line: 1949, column: 9, scope: !3147)
!3151 = !DILocation(line: 1949, column: 16, scope: !3147)
!3152 = !DILocation(line: 1950, column: 8, scope: !3122)
!3153 = !DILocation(line: 1951, column: 7, scope: !3122)
!3154 = distinct !{!3154, !3120, !3155}
!3155 = !DILocation(line: 1952, column: 2, scope: !3109)
!3156 = !DILocation(line: 1953, column: 12, scope: !3157)
!3157 = distinct !DILexicalBlock(scope: !3109, file: !3, line: 1953, column: 11)
!3158 = !DILocation(line: 1953, column: 11, scope: !3157)
!3159 = !DILocation(line: 1953, column: 16, scope: !3157)
!3160 = !DILocation(line: 1953, column: 11, scope: !3109)
!3161 = !DILocation(line: 1955, column: 7, scope: !3162)
!3162 = distinct !DILexicalBlock(scope: !3157, file: !3, line: 1954, column: 2)
!3163 = !DILocation(line: 1956, column: 8, scope: !3164)
!3164 = distinct !DILexicalBlock(scope: !3162, file: !3, line: 1956, column: 8)
!3165 = !DILocation(line: 1956, column: 12, scope: !3164)
!3166 = !DILocation(line: 1956, column: 8, scope: !3162)
!3167 = !DILocation(line: 1958, column: 8, scope: !3168)
!3168 = distinct !DILexicalBlock(scope: !3164, file: !3, line: 1957, column: 6)
!3169 = !DILocation(line: 1958, column: 16, scope: !3168)
!3170 = !DILocation(line: 1958, column: 15, scope: !3168)
!3171 = !DILocation(line: 1958, column: 20, scope: !3168)
!3172 = !DILocation(line: 1959, column: 6, scope: !3168)
!3173 = !DILocation(line: 1959, column: 14, scope: !3168)
!3174 = distinct !{!3174, !3167, !3175}
!3175 = !DILocation(line: 1959, column: 17, scope: !3168)
!3176 = !DILocation(line: 1960, column: 6, scope: !3168)
!3177 = !DILocation(line: 1961, column: 4, scope: !3162)
!3178 = !DILocation(line: 1963, column: 12, scope: !3179)
!3179 = distinct !DILexicalBlock(scope: !3162, file: !3, line: 1962, column: 6)
!3180 = !DILocation(line: 1963, column: 10, scope: !3179)
!3181 = !DILocation(line: 1964, column: 12, scope: !3182)
!3182 = distinct !DILexicalBlock(scope: !3179, file: !3, line: 1964, column: 12)
!3183 = !DILocation(line: 1964, column: 14, scope: !3182)
!3184 = !DILocation(line: 1964, column: 12, scope: !3179)
!3185 = !DILocation(line: 1965, column: 3, scope: !3182)
!3186 = !DILocation(line: 1966, column: 12, scope: !3187)
!3187 = distinct !DILexicalBlock(scope: !3179, file: !3, line: 1966, column: 12)
!3188 = !DILocation(line: 1966, column: 16, scope: !3187)
!3189 = !DILocation(line: 1966, column: 12, scope: !3179)
!3190 = !DILocation(line: 1969, column: 26, scope: !3191)
!3191 = distinct !DILexicalBlock(scope: !3187, file: !3, line: 1967, column: 3)
!3192 = !DILocation(line: 1969, column: 10, scope: !3191)
!3193 = !DILocation(line: 1969, column: 32, scope: !3191)
!3194 = !DILocation(line: 1969, column: 36, scope: !3191)
!3195 = !DILocation(line: 1969, column: 28, scope: !3191)
!3196 = !DILocation(line: 1968, column: 5, scope: !3191)
!3197 = !DILocation(line: 1968, column: 8, scope: !3191)
!3198 = !DILocation(line: 1968, column: 12, scope: !3191)
!3199 = !DILocation(line: 1968, column: 16, scope: !3191)
!3200 = !DILocation(line: 1969, column: 7, scope: !3191)
!3201 = !DILocation(line: 1970, column: 9, scope: !3191)
!3202 = !DILocation(line: 1971, column: 3, scope: !3191)
!3203 = !DILocation(line: 1972, column: 17, scope: !3204)
!3204 = distinct !DILexicalBlock(scope: !3187, file: !3, line: 1972, column: 17)
!3205 = !DILocation(line: 1972, column: 17, scope: !3187)
!3206 = !DILocation(line: 1975, column: 3, scope: !3204)
!3207 = !DILocation(line: 1975, column: 6, scope: !3204)
!3208 = !DILocation(line: 1975, column: 13, scope: !3204)
!3209 = !DILocation(line: 1976, column: 11, scope: !3179)
!3210 = distinct !{!3210, !3177, !3211}
!3211 = !DILocation(line: 1977, column: 6, scope: !3162)
!3212 = !DILocation(line: 1978, column: 2, scope: !3162)
!3213 = !DILocation(line: 1981, column: 31, scope: !3214)
!3214 = distinct !DILexicalBlock(scope: !3109, file: !3, line: 1981, column: 11)
!3215 = !DILocation(line: 1981, column: 12, scope: !3214)
!3216 = !DILocation(line: 1981, column: 11, scope: !3109)
!3217 = !DILocation(line: 1982, column: 2, scope: !3214)
!3218 = !DILocation(line: 1984, column: 12, scope: !3219)
!3219 = distinct !DILexicalBlock(scope: !3109, file: !3, line: 1984, column: 11)
!3220 = !DILocation(line: 1984, column: 11, scope: !3219)
!3221 = !DILocation(line: 1984, column: 16, scope: !3219)
!3222 = !DILocation(line: 1984, column: 23, scope: !3219)
!3223 = !DILocation(line: 1984, column: 27, scope: !3219)
!3224 = !DILocation(line: 1984, column: 26, scope: !3219)
!3225 = !DILocation(line: 1984, column: 31, scope: !3219)
!3226 = !DILocation(line: 1984, column: 11, scope: !3109)
!3227 = !DILocalVariable(name: "exp_neg", scope: !3228, file: !3, line: 1986, type: !399)
!3228 = distinct !DILexicalBlock(scope: !3219, file: !3, line: 1985, column: 2)
!3229 = !DILocation(line: 1986, column: 9, scope: !3228)
!3230 = !DILocation(line: 1988, column: 7, scope: !3228)
!3231 = !DILocation(line: 1989, column: 9, scope: !3232)
!3232 = distinct !DILexicalBlock(scope: !3228, file: !3, line: 1989, column: 8)
!3233 = !DILocation(line: 1989, column: 8, scope: !3232)
!3234 = !DILocation(line: 1989, column: 13, scope: !3232)
!3235 = !DILocation(line: 1989, column: 8, scope: !3228)
!3236 = !DILocation(line: 1991, column: 16, scope: !3237)
!3237 = distinct !DILexicalBlock(scope: !3232, file: !3, line: 1990, column: 6)
!3238 = !DILocation(line: 1992, column: 11, scope: !3237)
!3239 = !DILocation(line: 1993, column: 6, scope: !3237)
!3240 = !DILocation(line: 1994, column: 14, scope: !3241)
!3241 = distinct !DILexicalBlock(scope: !3232, file: !3, line: 1994, column: 13)
!3242 = !DILocation(line: 1994, column: 13, scope: !3241)
!3243 = !DILocation(line: 1994, column: 18, scope: !3241)
!3244 = !DILocation(line: 1994, column: 13, scope: !3232)
!3245 = !DILocation(line: 1995, column: 9, scope: !3241)
!3246 = !DILocation(line: 1995, column: 6, scope: !3241)
!3247 = !DILocation(line: 1997, column: 6, scope: !3228)
!3248 = !DILocation(line: 1998, column: 4, scope: !3228)
!3249 = !DILocation(line: 1998, column: 11, scope: !3228)
!3250 = !DILocation(line: 2000, column: 10, scope: !3251)
!3251 = distinct !DILexicalBlock(scope: !3228, file: !3, line: 1999, column: 6)
!3252 = !DILocation(line: 2001, column: 14, scope: !3251)
!3253 = !DILocation(line: 2001, column: 13, scope: !3251)
!3254 = !DILocation(line: 2001, column: 18, scope: !3251)
!3255 = !DILocation(line: 2001, column: 10, scope: !3251)
!3256 = !DILocation(line: 2002, column: 12, scope: !3257)
!3257 = distinct !DILexicalBlock(scope: !3251, file: !3, line: 2002, column: 12)
!3258 = !DILocation(line: 2002, column: 14, scope: !3257)
!3259 = !DILocation(line: 2002, column: 12, scope: !3251)
!3260 = !DILocation(line: 2005, column: 9, scope: !3261)
!3261 = distinct !DILexicalBlock(scope: !3262, file: !3, line: 2005, column: 9)
!3262 = distinct !DILexicalBlock(scope: !3257, file: !3, line: 2003, column: 3)
!3263 = !DILocation(line: 2005, column: 9, scope: !3262)
!3264 = !DILocation(line: 2006, column: 7, scope: !3261)
!3265 = !DILocation(line: 2008, column: 7, scope: !3261)
!3266 = !DILocation(line: 2010, column: 11, scope: !3251)
!3267 = distinct !{!3267, !3248, !3268}
!3268 = !DILocation(line: 2011, column: 6, scope: !3228)
!3269 = !DILocation(line: 2012, column: 8, scope: !3270)
!3270 = distinct !DILexicalBlock(scope: !3228, file: !3, line: 2012, column: 8)
!3271 = !DILocation(line: 2012, column: 8, scope: !3228)
!3272 = !DILocation(line: 2013, column: 11, scope: !3270)
!3273 = !DILocation(line: 2013, column: 10, scope: !3270)
!3274 = !DILocation(line: 2013, column: 8, scope: !3270)
!3275 = !DILocation(line: 2013, column: 6, scope: !3270)
!3276 = !DILocation(line: 2015, column: 11, scope: !3228)
!3277 = !DILocation(line: 2015, column: 8, scope: !3228)
!3278 = !DILocation(line: 2016, column: 2, scope: !3228)
!3279 = !DILocation(line: 2018, column: 7, scope: !3109)
!3280 = !DILocation(line: 2018, column: 10, scope: !3109)
!3281 = !DILocation(line: 2018, column: 13, scope: !3109)
!3282 = !DILocation(line: 2019, column: 7, scope: !3109)
!3283 = !DILocation(line: 2021, column: 18, scope: !3109)
!3284 = !DILocation(line: 2021, column: 7, scope: !3109)
!3285 = !DILocation(line: 2022, column: 5, scope: !3109)
!3286 = !DILocalVariable(name: "ten", scope: !3287, file: !3, line: 2026, type: !6)
!3287 = distinct !DILexicalBlock(scope: !3099, file: !3, line: 2024, column: 5)
!3288 = !DILocation(line: 2026, column: 30, scope: !3287)
!3289 = !DILocation(line: 2026, column: 36, scope: !3287)
!3290 = !DILocalVariable(name: "d", scope: !3287, file: !3, line: 2027, type: !398)
!3291 = !DILocation(line: 2027, column: 11, scope: !3287)
!3292 = !DILocation(line: 2029, column: 7, scope: !3287)
!3293 = !DILocation(line: 2029, column: 15, scope: !3287)
!3294 = !DILocation(line: 2029, column: 14, scope: !3287)
!3295 = !DILocation(line: 2029, column: 19, scope: !3287)
!3296 = !DILocation(line: 2030, column: 5, scope: !3287)
!3297 = distinct !{!3297, !3292, !3296}
!3298 = !DILocation(line: 2031, column: 7, scope: !3287)
!3299 = !DILocation(line: 2031, column: 14, scope: !3287)
!3300 = !DILocation(line: 2033, column: 12, scope: !3301)
!3301 = distinct !DILexicalBlock(scope: !3287, file: !3, line: 2032, column: 2)
!3302 = !DILocation(line: 2033, column: 8, scope: !3301)
!3303 = !DILocation(line: 2033, column: 15, scope: !3301)
!3304 = !DILocation(line: 2033, column: 6, scope: !3301)
!3305 = !DILocation(line: 2034, column: 17, scope: !3301)
!3306 = !DILocation(line: 2034, column: 20, scope: !3301)
!3307 = !DILocation(line: 2034, column: 23, scope: !3301)
!3308 = !DILocation(line: 2034, column: 4, scope: !3301)
!3309 = !DILocation(line: 2035, column: 8, scope: !3310)
!3310 = distinct !DILexicalBlock(scope: !3301, file: !3, line: 2035, column: 8)
!3311 = !DILocation(line: 2035, column: 8, scope: !3301)
!3312 = !DILocation(line: 2036, column: 14, scope: !3310)
!3313 = !DILocation(line: 2036, column: 17, scope: !3310)
!3314 = !DILocation(line: 2036, column: 32, scope: !3310)
!3315 = !DILocation(line: 2036, column: 20, scope: !3310)
!3316 = !DILocation(line: 2036, column: 6, scope: !3310)
!3317 = distinct !{!3317, !3298, !3318}
!3318 = !DILocation(line: 2037, column: 2, scope: !3287)
!3319 = !DILocation(line: 2038, column: 12, scope: !3320)
!3320 = distinct !DILexicalBlock(scope: !3287, file: !3, line: 2038, column: 11)
!3321 = !DILocation(line: 2038, column: 11, scope: !3320)
!3322 = !DILocation(line: 2038, column: 16, scope: !3320)
!3323 = !DILocation(line: 2038, column: 11, scope: !3287)
!3324 = !DILocation(line: 2040, column: 7, scope: !3325)
!3325 = distinct !DILexicalBlock(scope: !3320, file: !3, line: 2039, column: 2)
!3326 = !DILocation(line: 2041, column: 8, scope: !3327)
!3327 = distinct !DILexicalBlock(scope: !3325, file: !3, line: 2041, column: 8)
!3328 = !DILocation(line: 2041, column: 11, scope: !3327)
!3329 = !DILocation(line: 2041, column: 14, scope: !3327)
!3330 = !DILocation(line: 2041, column: 8, scope: !3325)
!3331 = !DILocation(line: 2043, column: 8, scope: !3332)
!3332 = distinct !DILexicalBlock(scope: !3327, file: !3, line: 2042, column: 6)
!3333 = !DILocation(line: 2043, column: 16, scope: !3332)
!3334 = !DILocation(line: 2043, column: 15, scope: !3332)
!3335 = !DILocation(line: 2043, column: 20, scope: !3332)
!3336 = !DILocation(line: 2044, column: 6, scope: !3332)
!3337 = !DILocation(line: 2044, column: 13, scope: !3332)
!3338 = distinct !{!3338, !3331, !3337}
!3339 = !DILocation(line: 2045, column: 6, scope: !3332)
!3340 = !DILocation(line: 2046, column: 4, scope: !3325)
!3341 = !DILocation(line: 2046, column: 11, scope: !3325)
!3342 = !DILocation(line: 2048, column: 16, scope: !3343)
!3343 = distinct !DILexicalBlock(scope: !3325, file: !3, line: 2047, column: 6)
!3344 = !DILocation(line: 2048, column: 12, scope: !3343)
!3345 = !DILocation(line: 2048, column: 19, scope: !3343)
!3346 = !DILocation(line: 2048, column: 10, scope: !3343)
!3347 = !DILocation(line: 2049, column: 21, scope: !3343)
!3348 = !DILocation(line: 2049, column: 24, scope: !3343)
!3349 = !DILocation(line: 2049, column: 27, scope: !3343)
!3350 = !DILocation(line: 2049, column: 8, scope: !3343)
!3351 = !DILocation(line: 2050, column: 12, scope: !3352)
!3352 = distinct !DILexicalBlock(scope: !3343, file: !3, line: 2050, column: 12)
!3353 = !DILocation(line: 2050, column: 12, scope: !3343)
!3354 = !DILocation(line: 2051, column: 18, scope: !3352)
!3355 = !DILocation(line: 2051, column: 21, scope: !3352)
!3356 = !DILocation(line: 2051, column: 36, scope: !3352)
!3357 = !DILocation(line: 2051, column: 24, scope: !3352)
!3358 = !DILocation(line: 2051, column: 10, scope: !3352)
!3359 = !DILocation(line: 2052, column: 11, scope: !3343)
!3360 = distinct !{!3360, !3340, !3361}
!3361 = !DILocation(line: 2053, column: 6, scope: !3325)
!3362 = !DILocation(line: 2054, column: 2, scope: !3325)
!3363 = !DILocation(line: 2057, column: 11, scope: !3364)
!3364 = distinct !DILexicalBlock(scope: !3287, file: !3, line: 2057, column: 11)
!3365 = !DILocation(line: 2057, column: 14, scope: !3364)
!3366 = !DILocation(line: 2057, column: 17, scope: !3364)
!3367 = !DILocation(line: 2057, column: 11, scope: !3287)
!3368 = !DILocation(line: 2058, column: 2, scope: !3364)
!3369 = !DILocation(line: 2060, column: 12, scope: !3370)
!3370 = distinct !DILexicalBlock(scope: !3287, file: !3, line: 2060, column: 11)
!3371 = !DILocation(line: 2060, column: 11, scope: !3370)
!3372 = !DILocation(line: 2060, column: 16, scope: !3370)
!3373 = !DILocation(line: 2060, column: 23, scope: !3370)
!3374 = !DILocation(line: 2060, column: 27, scope: !3370)
!3375 = !DILocation(line: 2060, column: 26, scope: !3370)
!3376 = !DILocation(line: 2060, column: 31, scope: !3370)
!3377 = !DILocation(line: 2060, column: 11, scope: !3287)
!3378 = !DILocalVariable(name: "exp_neg", scope: !3379, file: !3, line: 2062, type: !399)
!3379 = distinct !DILexicalBlock(scope: !3370, file: !3, line: 2061, column: 2)
!3380 = !DILocation(line: 2062, column: 9, scope: !3379)
!3381 = !DILocation(line: 2064, column: 7, scope: !3379)
!3382 = !DILocation(line: 2065, column: 9, scope: !3383)
!3383 = distinct !DILexicalBlock(scope: !3379, file: !3, line: 2065, column: 8)
!3384 = !DILocation(line: 2065, column: 8, scope: !3383)
!3385 = !DILocation(line: 2065, column: 13, scope: !3383)
!3386 = !DILocation(line: 2065, column: 8, scope: !3379)
!3387 = !DILocation(line: 2067, column: 16, scope: !3388)
!3388 = distinct !DILexicalBlock(scope: !3383, file: !3, line: 2066, column: 6)
!3389 = !DILocation(line: 2068, column: 11, scope: !3388)
!3390 = !DILocation(line: 2069, column: 6, scope: !3388)
!3391 = !DILocation(line: 2070, column: 14, scope: !3392)
!3392 = distinct !DILexicalBlock(scope: !3383, file: !3, line: 2070, column: 13)
!3393 = !DILocation(line: 2070, column: 13, scope: !3392)
!3394 = !DILocation(line: 2070, column: 18, scope: !3392)
!3395 = !DILocation(line: 2070, column: 13, scope: !3383)
!3396 = !DILocation(line: 2071, column: 9, scope: !3392)
!3397 = !DILocation(line: 2071, column: 6, scope: !3392)
!3398 = !DILocation(line: 2073, column: 6, scope: !3379)
!3399 = !DILocation(line: 2074, column: 4, scope: !3379)
!3400 = !DILocation(line: 2074, column: 11, scope: !3379)
!3401 = !DILocation(line: 2076, column: 10, scope: !3402)
!3402 = distinct !DILexicalBlock(scope: !3379, file: !3, line: 2075, column: 6)
!3403 = !DILocation(line: 2077, column: 14, scope: !3402)
!3404 = !DILocation(line: 2077, column: 13, scope: !3402)
!3405 = !DILocation(line: 2077, column: 18, scope: !3402)
!3406 = !DILocation(line: 2077, column: 10, scope: !3402)
!3407 = !DILocation(line: 2078, column: 12, scope: !3408)
!3408 = distinct !DILexicalBlock(scope: !3402, file: !3, line: 2078, column: 12)
!3409 = !DILocation(line: 2078, column: 14, scope: !3408)
!3410 = !DILocation(line: 2078, column: 12, scope: !3402)
!3411 = !DILocation(line: 2081, column: 9, scope: !3412)
!3412 = distinct !DILexicalBlock(scope: !3413, file: !3, line: 2081, column: 9)
!3413 = distinct !DILexicalBlock(scope: !3408, file: !3, line: 2079, column: 3)
!3414 = !DILocation(line: 2081, column: 9, scope: !3413)
!3415 = !DILocation(line: 2082, column: 7, scope: !3412)
!3416 = !DILocation(line: 2084, column: 7, scope: !3412)
!3417 = !DILocation(line: 2086, column: 11, scope: !3402)
!3418 = distinct !{!3418, !3399, !3419}
!3419 = !DILocation(line: 2087, column: 6, scope: !3379)
!3420 = !DILocation(line: 2088, column: 8, scope: !3421)
!3421 = distinct !DILexicalBlock(scope: !3379, file: !3, line: 2088, column: 8)
!3422 = !DILocation(line: 2088, column: 8, scope: !3379)
!3423 = !DILocation(line: 2089, column: 11, scope: !3421)
!3424 = !DILocation(line: 2089, column: 10, scope: !3421)
!3425 = !DILocation(line: 2089, column: 8, scope: !3421)
!3426 = !DILocation(line: 2089, column: 6, scope: !3421)
!3427 = !DILocation(line: 2090, column: 11, scope: !3379)
!3428 = !DILocation(line: 2090, column: 8, scope: !3379)
!3429 = !DILocation(line: 2091, column: 2, scope: !3379)
!3430 = !DILocation(line: 2093, column: 11, scope: !3431)
!3431 = distinct !DILexicalBlock(scope: !3287, file: !3, line: 2093, column: 11)
!3432 = !DILocation(line: 2093, column: 11, scope: !3287)
!3433 = !DILocation(line: 2094, column: 14, scope: !3431)
!3434 = !DILocation(line: 2094, column: 17, scope: !3431)
!3435 = !DILocation(line: 2094, column: 2, scope: !3431)
!3436 = !DILocation(line: 2097, column: 13, scope: !3040)
!3437 = !DILocation(line: 2097, column: 3, scope: !3040)
!3438 = !DILocation(line: 2097, column: 6, scope: !3040)
!3439 = !DILocation(line: 2097, column: 11, scope: !3040)
!3440 = !DILocation(line: 2098, column: 3, scope: !3040)
!3441 = !DILabel(scope: !3040, name: "is_a_zero", file: !3, line: 2100)
!3442 = !DILocation(line: 2100, column: 2, scope: !3040)
!3443 = !DILocation(line: 2101, column: 13, scope: !3040)
!3444 = !DILocation(line: 2101, column: 16, scope: !3040)
!3445 = !DILocation(line: 2101, column: 3, scope: !3040)
!3446 = !DILocation(line: 2102, column: 3, scope: !3040)
!3447 = !DILabel(scope: !3040, name: "underflow", file: !3, line: 2104)
!3448 = !DILocation(line: 2104, column: 2, scope: !3040)
!3449 = !DILocation(line: 2105, column: 13, scope: !3040)
!3450 = !DILocation(line: 2105, column: 16, scope: !3040)
!3451 = !DILocation(line: 2105, column: 3, scope: !3040)
!3452 = !DILocation(line: 2106, column: 3, scope: !3040)
!3453 = !DILabel(scope: !3040, name: "overflow", file: !3, line: 2108)
!3454 = !DILocation(line: 2108, column: 2, scope: !3040)
!3455 = !DILocation(line: 2109, column: 12, scope: !3040)
!3456 = !DILocation(line: 2109, column: 15, scope: !3040)
!3457 = !DILocation(line: 2109, column: 3, scope: !3040)
!3458 = !DILocation(line: 2110, column: 3, scope: !3040)
!3459 = !DILocation(line: 2111, column: 1, scope: !3040)
!3460 = distinct !DISubprogram(name: "get_canonical_qnan", scope: !3, file: !3, line: 136, type: !1488, scopeLine: 137, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!3461 = !DILocalVariable(name: "r", arg: 1, scope: !3460, file: !3, line: 136, type: !426)
!3462 = !DILocation(line: 136, column: 38, scope: !3460)
!3463 = !DILocalVariable(name: "sign", arg: 2, scope: !3460, file: !3, line: 136, type: !398)
!3464 = !DILocation(line: 136, column: 45, scope: !3460)
!3465 = !DILocation(line: 138, column: 11, scope: !3460)
!3466 = !DILocation(line: 138, column: 3, scope: !3460)
!3467 = !DILocation(line: 139, column: 3, scope: !3460)
!3468 = !DILocation(line: 139, column: 6, scope: !3460)
!3469 = !DILocation(line: 139, column: 9, scope: !3460)
!3470 = !DILocation(line: 140, column: 13, scope: !3460)
!3471 = !DILocation(line: 140, column: 3, scope: !3460)
!3472 = !DILocation(line: 140, column: 6, scope: !3460)
!3473 = !DILocation(line: 140, column: 11, scope: !3460)
!3474 = !DILocation(line: 141, column: 3, scope: !3460)
!3475 = !DILocation(line: 141, column: 6, scope: !3460)
!3476 = !DILocation(line: 141, column: 16, scope: !3460)
!3477 = !DILocation(line: 142, column: 1, scope: !3460)
!3478 = distinct !DISubprogram(name: "get_canonical_snan", scope: !3, file: !3, line: 145, type: !1488, scopeLine: 146, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!3479 = !DILocalVariable(name: "r", arg: 1, scope: !3478, file: !3, line: 145, type: !426)
!3480 = !DILocation(line: 145, column: 38, scope: !3478)
!3481 = !DILocalVariable(name: "sign", arg: 2, scope: !3478, file: !3, line: 145, type: !398)
!3482 = !DILocation(line: 145, column: 45, scope: !3478)
!3483 = !DILocation(line: 147, column: 11, scope: !3478)
!3484 = !DILocation(line: 147, column: 3, scope: !3478)
!3485 = !DILocation(line: 148, column: 3, scope: !3478)
!3486 = !DILocation(line: 148, column: 6, scope: !3478)
!3487 = !DILocation(line: 148, column: 9, scope: !3478)
!3488 = !DILocation(line: 149, column: 13, scope: !3478)
!3489 = !DILocation(line: 149, column: 3, scope: !3478)
!3490 = !DILocation(line: 149, column: 6, scope: !3478)
!3491 = !DILocation(line: 149, column: 11, scope: !3478)
!3492 = !DILocation(line: 150, column: 3, scope: !3478)
!3493 = !DILocation(line: 150, column: 6, scope: !3478)
!3494 = !DILocation(line: 150, column: 17, scope: !3478)
!3495 = !DILocation(line: 151, column: 3, scope: !3478)
!3496 = !DILocation(line: 151, column: 6, scope: !3478)
!3497 = !DILocation(line: 151, column: 16, scope: !3478)
!3498 = !DILocation(line: 152, column: 1, scope: !3478)
!3499 = distinct !DISubprogram(name: "normalize", scope: !3, file: !3, line: 476, type: !3500, scopeLine: 477, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!3500 = !DISubroutineType(types: !3501)
!3501 = !{null, !426}
!3502 = !DILocalVariable(name: "r", arg: 1, scope: !3499, file: !3, line: 476, type: !426)
!3503 = !DILocation(line: 476, column: 29, scope: !3499)
!3504 = !DILocalVariable(name: "shift", scope: !3499, file: !3, line: 478, type: !398)
!3505 = !DILocation(line: 478, column: 7, scope: !3499)
!3506 = !DILocalVariable(name: "exp", scope: !3499, file: !3, line: 478, type: !398)
!3507 = !DILocation(line: 478, column: 18, scope: !3499)
!3508 = !DILocalVariable(name: "i", scope: !3499, file: !3, line: 479, type: !398)
!3509 = !DILocation(line: 479, column: 7, scope: !3499)
!3510 = !DILocalVariable(name: "j", scope: !3499, file: !3, line: 479, type: !398)
!3511 = !DILocation(line: 479, column: 10, scope: !3499)
!3512 = !DILocation(line: 481, column: 7, scope: !3513)
!3513 = distinct !DILexicalBlock(scope: !3499, file: !3, line: 481, column: 7)
!3514 = !DILocation(line: 481, column: 10, scope: !3513)
!3515 = !DILocation(line: 481, column: 7, scope: !3499)
!3516 = !DILocation(line: 482, column: 5, scope: !3513)
!3517 = !DILocation(line: 485, column: 10, scope: !3518)
!3518 = distinct !DILexicalBlock(scope: !3499, file: !3, line: 485, column: 3)
!3519 = !DILocation(line: 485, column: 8, scope: !3518)
!3520 = !DILocation(line: 485, column: 23, scope: !3521)
!3521 = distinct !DILexicalBlock(scope: !3518, file: !3, line: 485, column: 3)
!3522 = !DILocation(line: 485, column: 25, scope: !3521)
!3523 = !DILocation(line: 485, column: 3, scope: !3518)
!3524 = !DILocation(line: 486, column: 9, scope: !3525)
!3525 = distinct !DILexicalBlock(scope: !3521, file: !3, line: 486, column: 9)
!3526 = !DILocation(line: 486, column: 12, scope: !3525)
!3527 = !DILocation(line: 486, column: 16, scope: !3525)
!3528 = !DILocation(line: 486, column: 19, scope: !3525)
!3529 = !DILocation(line: 486, column: 9, scope: !3521)
!3530 = !DILocation(line: 487, column: 13, scope: !3525)
!3531 = !DILocation(line: 487, column: 7, scope: !3525)
!3532 = !DILocation(line: 489, column: 7, scope: !3525)
!3533 = !DILocation(line: 486, column: 22, scope: !3525)
!3534 = !DILocation(line: 485, column: 32, scope: !3521)
!3535 = !DILocation(line: 485, column: 3, scope: !3521)
!3536 = distinct !{!3536, !3523, !3537}
!3537 = !DILocation(line: 489, column: 7, scope: !3518)
!3538 = !DILocation(line: 492, column: 7, scope: !3539)
!3539 = distinct !DILexicalBlock(scope: !3499, file: !3, line: 492, column: 7)
!3540 = !DILocation(line: 492, column: 9, scope: !3539)
!3541 = !DILocation(line: 492, column: 7, scope: !3499)
!3542 = !DILocation(line: 494, column: 7, scope: !3543)
!3543 = distinct !DILexicalBlock(scope: !3539, file: !3, line: 493, column: 5)
!3544 = !DILocation(line: 494, column: 10, scope: !3543)
!3545 = !DILocation(line: 494, column: 13, scope: !3543)
!3546 = !DILocation(line: 495, column: 7, scope: !3543)
!3547 = !DILocation(line: 496, column: 7, scope: !3543)
!3548 = !DILocation(line: 500, column: 10, scope: !3549)
!3549 = distinct !DILexicalBlock(scope: !3499, file: !3, line: 500, column: 3)
!3550 = !DILocation(line: 500, column: 8, scope: !3549)
!3551 = !DILocation(line: 501, column: 9, scope: !3552)
!3552 = distinct !DILexicalBlock(scope: !3553, file: !3, line: 501, column: 9)
!3553 = distinct !DILexicalBlock(scope: !3549, file: !3, line: 500, column: 3)
!3554 = !DILocation(line: 501, column: 12, scope: !3552)
!3555 = !DILocation(line: 501, column: 16, scope: !3552)
!3556 = !DILocation(line: 501, column: 68, scope: !3552)
!3557 = !DILocation(line: 501, column: 66, scope: !3552)
!3558 = !DILocation(line: 501, column: 39, scope: !3552)
!3559 = !DILocation(line: 501, column: 19, scope: !3552)
!3560 = !DILocation(line: 501, column: 9, scope: !3553)
!3561 = !DILocation(line: 502, column: 7, scope: !3552)
!3562 = !DILocation(line: 501, column: 70, scope: !3552)
!3563 = !DILocation(line: 500, column: 18, scope: !3553)
!3564 = !DILocation(line: 500, column: 3, scope: !3553)
!3565 = distinct !{!3565, !3566, !3567}
!3566 = !DILocation(line: 500, column: 3, scope: !3549)
!3567 = !DILocation(line: 502, column: 7, scope: !3549)
!3568 = !DILocation(line: 503, column: 12, scope: !3499)
!3569 = !DILocation(line: 503, column: 9, scope: !3499)
!3570 = !DILocation(line: 505, column: 7, scope: !3571)
!3571 = distinct !DILexicalBlock(scope: !3499, file: !3, line: 505, column: 7)
!3572 = !DILocation(line: 505, column: 13, scope: !3571)
!3573 = !DILocation(line: 505, column: 7, scope: !3499)
!3574 = !DILocation(line: 507, column: 13, scope: !3575)
!3575 = distinct !DILexicalBlock(scope: !3571, file: !3, line: 506, column: 5)
!3576 = !DILocation(line: 507, column: 28, scope: !3575)
!3577 = !DILocation(line: 507, column: 26, scope: !3575)
!3578 = !DILocation(line: 507, column: 11, scope: !3575)
!3579 = !DILocation(line: 508, column: 11, scope: !3580)
!3580 = distinct !DILexicalBlock(scope: !3575, file: !3, line: 508, column: 11)
!3581 = !DILocation(line: 508, column: 15, scope: !3580)
!3582 = !DILocation(line: 508, column: 11, scope: !3575)
!3583 = !DILocation(line: 509, column: 11, scope: !3580)
!3584 = !DILocation(line: 509, column: 14, scope: !3580)
!3585 = !DILocation(line: 509, column: 17, scope: !3580)
!3586 = !DILocation(line: 509, column: 2, scope: !3580)
!3587 = !DILocation(line: 510, column: 16, scope: !3588)
!3588 = distinct !DILexicalBlock(scope: !3580, file: !3, line: 510, column: 16)
!3589 = !DILocation(line: 510, column: 20, scope: !3588)
!3590 = !DILocation(line: 510, column: 16, scope: !3580)
!3591 = !DILocation(line: 511, column: 12, scope: !3588)
!3592 = !DILocation(line: 511, column: 15, scope: !3588)
!3593 = !DILocation(line: 511, column: 18, scope: !3588)
!3594 = !DILocation(line: 511, column: 2, scope: !3588)
!3595 = !DILocation(line: 514, column: 4, scope: !3596)
!3596 = distinct !DILexicalBlock(scope: !3588, file: !3, line: 513, column: 2)
!3597 = !DILocation(line: 515, column: 24, scope: !3596)
!3598 = !DILocation(line: 515, column: 27, scope: !3596)
!3599 = !DILocation(line: 515, column: 30, scope: !3596)
!3600 = !DILocation(line: 515, column: 4, scope: !3596)
!3601 = !DILocation(line: 517, column: 5, scope: !3575)
!3602 = !DILocation(line: 518, column: 1, scope: !3499)
!3603 = distinct !DISubprogram(name: "times_pten", scope: !3, file: !3, line: 2314, type: !1488, scopeLine: 2315, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!3604 = !DILocalVariable(name: "r", arg: 1, scope: !3603, file: !3, line: 2314, type: !426)
!3605 = !DILocation(line: 2314, column: 30, scope: !3603)
!3606 = !DILocalVariable(name: "exp", arg: 2, scope: !3603, file: !3, line: 2314, type: !398)
!3607 = !DILocation(line: 2314, column: 37, scope: !3603)
!3608 = !DILocalVariable(name: "pten", scope: !3603, file: !3, line: 2316, type: !8)
!3609 = !DILocation(line: 2316, column: 19, scope: !3603)
!3610 = !DILocalVariable(name: "rr", scope: !3603, file: !3, line: 2316, type: !426)
!3611 = !DILocation(line: 2316, column: 26, scope: !3603)
!3612 = !DILocalVariable(name: "negative", scope: !3603, file: !3, line: 2317, type: !399)
!3613 = !DILocation(line: 2317, column: 8, scope: !3603)
!3614 = !DILocation(line: 2317, column: 20, scope: !3603)
!3615 = !DILocation(line: 2317, column: 24, scope: !3603)
!3616 = !DILocation(line: 2317, column: 19, scope: !3603)
!3617 = !DILocalVariable(name: "i", scope: !3603, file: !3, line: 2318, type: !398)
!3618 = !DILocation(line: 2318, column: 7, scope: !3603)
!3619 = !DILocation(line: 2320, column: 7, scope: !3620)
!3620 = distinct !DILexicalBlock(scope: !3603, file: !3, line: 2320, column: 7)
!3621 = !DILocation(line: 2320, column: 7, scope: !3603)
!3622 = !DILocation(line: 2322, column: 14, scope: !3623)
!3623 = distinct !DILexicalBlock(scope: !3620, file: !3, line: 2321, column: 5)
!3624 = !DILocation(line: 2322, column: 13, scope: !3623)
!3625 = !DILocation(line: 2322, column: 11, scope: !3623)
!3626 = !DILocation(line: 2323, column: 15, scope: !3623)
!3627 = !DILocation(line: 2323, column: 14, scope: !3623)
!3628 = !DILocation(line: 2324, column: 10, scope: !3623)
!3629 = !DILocation(line: 2325, column: 5, scope: !3623)
!3630 = !DILocation(line: 2327, column: 10, scope: !3620)
!3631 = !DILocation(line: 2327, column: 8, scope: !3620)
!3632 = !DILocation(line: 2329, column: 10, scope: !3633)
!3633 = distinct !DILexicalBlock(scope: !3603, file: !3, line: 2329, column: 3)
!3634 = !DILocation(line: 2329, column: 8, scope: !3633)
!3635 = !DILocation(line: 2329, column: 15, scope: !3636)
!3636 = distinct !DILexicalBlock(scope: !3633, file: !3, line: 2329, column: 3)
!3637 = !DILocation(line: 2329, column: 19, scope: !3636)
!3638 = !DILocation(line: 2329, column: 3, scope: !3633)
!3639 = !DILocation(line: 2330, column: 9, scope: !3640)
!3640 = distinct !DILexicalBlock(scope: !3636, file: !3, line: 2330, column: 9)
!3641 = !DILocation(line: 2330, column: 13, scope: !3640)
!3642 = !DILocation(line: 2330, column: 9, scope: !3636)
!3643 = !DILocation(line: 2331, column: 20, scope: !3640)
!3644 = !DILocation(line: 2331, column: 24, scope: !3640)
!3645 = !DILocation(line: 2331, column: 41, scope: !3640)
!3646 = !DILocation(line: 2331, column: 28, scope: !3640)
!3647 = !DILocation(line: 2331, column: 7, scope: !3640)
!3648 = !DILocation(line: 2330, column: 15, scope: !3640)
!3649 = !DILocation(line: 2329, column: 24, scope: !3636)
!3650 = !DILocation(line: 2329, column: 33, scope: !3636)
!3651 = !DILocation(line: 2329, column: 3, scope: !3636)
!3652 = distinct !{!3652, !3638, !3653}
!3653 = !DILocation(line: 2331, column: 43, scope: !3633)
!3654 = !DILocation(line: 2333, column: 7, scope: !3655)
!3655 = distinct !DILexicalBlock(scope: !3603, file: !3, line: 2333, column: 7)
!3656 = !DILocation(line: 2333, column: 7, scope: !3603)
!3657 = !DILocation(line: 2334, column: 16, scope: !3655)
!3658 = !DILocation(line: 2334, column: 19, scope: !3655)
!3659 = !DILocation(line: 2334, column: 5, scope: !3655)
!3660 = !DILocation(line: 2335, column: 1, scope: !3603)
!3661 = distinct !DISubprogram(name: "real_from_string2", scope: !3, file: !3, line: 2116, type: !3662, scopeLine: 2117, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !406)
!3662 = !DISubroutineType(types: !3663)
!3663 = !{!8, !3043, !226}
!3664 = !DILocalVariable(name: "s", arg: 1, scope: !3661, file: !3, line: 2116, type: !3043)
!3665 = !DILocation(line: 2116, column: 32, scope: !3661)
!3666 = !DILocalVariable(name: "mode", arg: 2, scope: !3661, file: !3, line: 2116, type: !226)
!3667 = !DILocation(line: 2116, column: 53, scope: !3661)
!3668 = !DILocalVariable(name: "r", scope: !3661, file: !3, line: 2118, type: !8)
!3669 = !DILocation(line: 2118, column: 19, scope: !3661)
!3670 = !DILocation(line: 2120, column: 25, scope: !3661)
!3671 = !DILocation(line: 2120, column: 3, scope: !3661)
!3672 = !DILocation(line: 2121, column: 7, scope: !3673)
!3673 = distinct !DILexicalBlock(scope: !3661, file: !3, line: 2121, column: 7)
!3674 = !DILocation(line: 2121, column: 12, scope: !3673)
!3675 = !DILocation(line: 2121, column: 7, scope: !3661)
!3676 = !DILocation(line: 2122, column: 23, scope: !3673)
!3677 = !DILocation(line: 2122, column: 5, scope: !3673)
!3678 = !DILocation(line: 2124, column: 3, scope: !3661)
!3679 = distinct !DISubprogram(name: "real_from_string3", scope: !3, file: !3, line: 2130, type: !3680, scopeLine: 2131, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !406)
!3680 = !DISubroutineType(types: !3681)
!3681 = !{null, !426, !3043, !226}
!3682 = !DILocalVariable(name: "r", arg: 1, scope: !3679, file: !3, line: 2130, type: !426)
!3683 = !DILocation(line: 2130, column: 37, scope: !3679)
!3684 = !DILocalVariable(name: "s", arg: 2, scope: !3679, file: !3, line: 2130, type: !3043)
!3685 = !DILocation(line: 2130, column: 52, scope: !3679)
!3686 = !DILocalVariable(name: "mode", arg: 3, scope: !3679, file: !3, line: 2130, type: !226)
!3687 = !DILocation(line: 2130, column: 73, scope: !3679)
!3688 = !DILocation(line: 2132, column: 7, scope: !3689)
!3689 = distinct !DILexicalBlock(scope: !3679, file: !3, line: 2132, column: 7)
!3690 = !DILocation(line: 2132, column: 7, scope: !3679)
!3691 = !DILocation(line: 2133, column: 31, scope: !3689)
!3692 = !DILocation(line: 2133, column: 34, scope: !3689)
!3693 = !DILocation(line: 2133, column: 5, scope: !3689)
!3694 = !DILocation(line: 2135, column: 23, scope: !3689)
!3695 = !DILocation(line: 2135, column: 26, scope: !3689)
!3696 = !DILocation(line: 2135, column: 5, scope: !3689)
!3697 = !DILocation(line: 2137, column: 7, scope: !3698)
!3698 = distinct !DILexicalBlock(scope: !3679, file: !3, line: 2137, column: 7)
!3699 = !DILocation(line: 2137, column: 12, scope: !3698)
!3700 = !DILocation(line: 2137, column: 7, scope: !3679)
!3701 = !DILocation(line: 2138, column: 19, scope: !3698)
!3702 = !DILocation(line: 2138, column: 22, scope: !3698)
!3703 = !DILocation(line: 2138, column: 28, scope: !3698)
!3704 = !DILocation(line: 2138, column: 5, scope: !3698)
!3705 = !DILocation(line: 2139, column: 1, scope: !3679)
!3706 = distinct !DISubprogram(name: "real_from_integer", scope: !3, file: !3, line: 2144, type: !3707, scopeLine: 2147, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !406)
!3707 = !DISubroutineType(types: !3708)
!3708 = !{null, !426, !226, !20, !421, !398}
!3709 = !DILocalVariable(name: "r", arg: 1, scope: !3706, file: !3, line: 2144, type: !426)
!3710 = !DILocation(line: 2144, column: 37, scope: !3706)
!3711 = !DILocalVariable(name: "mode", arg: 2, scope: !3706, file: !3, line: 2144, type: !226)
!3712 = !DILocation(line: 2144, column: 58, scope: !3706)
!3713 = !DILocalVariable(name: "low", arg: 3, scope: !3706, file: !3, line: 2145, type: !20)
!3714 = !DILocation(line: 2145, column: 29, scope: !3706)
!3715 = !DILocalVariable(name: "high", arg: 4, scope: !3706, file: !3, line: 2145, type: !421)
!3716 = !DILocation(line: 2145, column: 48, scope: !3706)
!3717 = !DILocalVariable(name: "unsigned_p", arg: 5, scope: !3706, file: !3, line: 2146, type: !398)
!3718 = !DILocation(line: 2146, column: 10, scope: !3706)
!3719 = !DILocation(line: 2148, column: 7, scope: !3720)
!3720 = distinct !DILexicalBlock(scope: !3706, file: !3, line: 2148, column: 7)
!3721 = !DILocation(line: 2148, column: 11, scope: !3720)
!3722 = !DILocation(line: 2148, column: 16, scope: !3720)
!3723 = !DILocation(line: 2148, column: 19, scope: !3720)
!3724 = !DILocation(line: 2148, column: 24, scope: !3720)
!3725 = !DILocation(line: 2148, column: 7, scope: !3706)
!3726 = !DILocation(line: 2149, column: 15, scope: !3720)
!3727 = !DILocation(line: 2149, column: 5, scope: !3720)
!3728 = !DILocation(line: 2152, column: 15, scope: !3729)
!3729 = distinct !DILexicalBlock(scope: !3720, file: !3, line: 2151, column: 5)
!3730 = !DILocation(line: 2152, column: 7, scope: !3729)
!3731 = !DILocation(line: 2153, column: 7, scope: !3729)
!3732 = !DILocation(line: 2153, column: 10, scope: !3729)
!3733 = !DILocation(line: 2153, column: 13, scope: !3729)
!3734 = !DILocation(line: 2154, column: 17, scope: !3729)
!3735 = !DILocation(line: 2154, column: 22, scope: !3729)
!3736 = !DILocation(line: 2154, column: 26, scope: !3729)
!3737 = !DILocation(line: 2154, column: 30, scope: !3729)
!3738 = !DILocation(line: 2154, column: 29, scope: !3729)
!3739 = !DILocation(line: 0, scope: !3729)
!3740 = !DILocation(line: 2154, column: 7, scope: !3729)
!3741 = !DILocation(line: 2154, column: 10, scope: !3729)
!3742 = !DILocation(line: 2154, column: 15, scope: !3729)
!3743 = !DILocation(line: 2155, column: 7, scope: !3729)
!3744 = !DILocation(line: 2157, column: 11, scope: !3745)
!3745 = distinct !DILexicalBlock(scope: !3729, file: !3, line: 2157, column: 11)
!3746 = !DILocation(line: 2157, column: 14, scope: !3745)
!3747 = !DILocation(line: 2157, column: 11, scope: !3729)
!3748 = !DILocation(line: 2159, column: 12, scope: !3749)
!3749 = distinct !DILexicalBlock(scope: !3745, file: !3, line: 2158, column: 2)
!3750 = !DILocation(line: 2159, column: 11, scope: !3749)
!3751 = !DILocation(line: 2159, column: 9, scope: !3749)
!3752 = !DILocation(line: 2160, column: 8, scope: !3753)
!3753 = distinct !DILexicalBlock(scope: !3749, file: !3, line: 2160, column: 8)
!3754 = !DILocation(line: 2160, column: 12, scope: !3753)
!3755 = !DILocation(line: 2160, column: 8, scope: !3749)
!3756 = !DILocation(line: 2161, column: 11, scope: !3753)
!3757 = !DILocation(line: 2161, column: 6, scope: !3753)
!3758 = !DILocation(line: 2163, column: 13, scope: !3753)
!3759 = !DILocation(line: 2163, column: 12, scope: !3753)
!3760 = !DILocation(line: 2163, column: 10, scope: !3753)
!3761 = !DILocation(line: 2164, column: 2, scope: !3749)
!3762 = !DILocation(line: 2168, column: 22, scope: !3763)
!3763 = distinct !DILexicalBlock(scope: !3764, file: !3, line: 2167, column: 2)
!3764 = distinct !DILexicalBlock(scope: !3729, file: !3, line: 2166, column: 11)
!3765 = !DILocation(line: 2168, column: 4, scope: !3763)
!3766 = !DILocation(line: 2168, column: 7, scope: !3763)
!3767 = !DILocation(line: 2168, column: 20, scope: !3763)
!3768 = !DILocation(line: 2169, column: 22, scope: !3763)
!3769 = !DILocation(line: 2169, column: 4, scope: !3763)
!3770 = !DILocation(line: 2169, column: 7, scope: !3763)
!3771 = !DILocation(line: 2169, column: 20, scope: !3763)
!3772 = !DILocation(line: 2180, column: 18, scope: !3729)
!3773 = !DILocation(line: 2180, column: 7, scope: !3729)
!3774 = !DILocation(line: 2183, column: 7, scope: !3775)
!3775 = distinct !DILexicalBlock(scope: !3706, file: !3, line: 2183, column: 7)
!3776 = !DILocation(line: 2183, column: 7, scope: !3706)
!3777 = !DILocation(line: 2184, column: 27, scope: !3775)
!3778 = !DILocation(line: 2184, column: 5, scope: !3775)
!3779 = !DILocation(line: 2185, column: 12, scope: !3780)
!3780 = distinct !DILexicalBlock(scope: !3775, file: !3, line: 2185, column: 12)
!3781 = !DILocation(line: 2185, column: 17, scope: !3780)
!3782 = !DILocation(line: 2185, column: 12, scope: !3775)
!3783 = !DILocation(line: 2186, column: 19, scope: !3780)
!3784 = !DILocation(line: 2186, column: 22, scope: !3780)
!3785 = !DILocation(line: 2186, column: 28, scope: !3780)
!3786 = !DILocation(line: 2186, column: 5, scope: !3780)
!3787 = !DILocation(line: 2187, column: 1, scope: !3706)
!3788 = distinct !DISubprogram(name: "decimal_from_integer", scope: !3, file: !3, line: 2239, type: !3500, scopeLine: 2240, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!3789 = !DILocalVariable(name: "r", arg: 1, scope: !3788, file: !3, line: 2239, type: !426)
!3790 = !DILocation(line: 2239, column: 40, scope: !3788)
!3791 = !DILocalVariable(name: "str", scope: !3788, file: !3, line: 2241, type: !3792)
!3792 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2186, size: 2048, elements: !3793)
!3793 = !{!3794}
!3794 = !DISubrange(count: 256)
!3795 = !DILocation(line: 2241, column: 8, scope: !3788)
!3796 = !DILocation(line: 2243, column: 27, scope: !3788)
!3797 = !DILocation(line: 2243, column: 32, scope: !3788)
!3798 = !DILocation(line: 2243, column: 3, scope: !3788)
!3799 = !DILocation(line: 2244, column: 29, scope: !3788)
!3800 = !DILocation(line: 2244, column: 32, scope: !3788)
!3801 = !DILocation(line: 2244, column: 3, scope: !3788)
!3802 = !DILocation(line: 2245, column: 1, scope: !3788)
!3803 = !DILocation(line: 2346, column: 13, scope: !3804)
!3804 = distinct !DILexicalBlock(scope: !2, file: !3, line: 2346, column: 7)
!3805 = !DILocation(line: 2346, column: 16, scope: !3804)
!3806 = !DILocation(line: 2346, column: 7, scope: !2)
!3807 = !DILocalVariable(name: "i", scope: !3808, file: !3, line: 2363, type: !398)
!3808 = distinct !DILexicalBlock(scope: !3804, file: !3, line: 2347, column: 5)
!3809 = !DILocation(line: 2363, column: 11, scope: !3808)
!3810 = !DILocation(line: 2364, column: 16, scope: !3808)
!3811 = !DILocation(line: 2365, column: 21, scope: !3808)
!3812 = !DILocation(line: 2366, column: 18, scope: !3808)
!3813 = !DILocation(line: 2367, column: 24, scope: !3808)
!3814 = !DILocation(line: 2368, column: 23, scope: !3808)
!3815 = !DILocation(line: 2369, column: 18, scope: !3808)
!3816 = !DILocation(line: 2370, column: 20, scope: !3808)
!3817 = !DILocation(line: 2371, column: 12, scope: !3818)
!3818 = distinct !DILexicalBlock(scope: !3808, file: !3, line: 2371, column: 7)
!3819 = !DILocation(line: 2371, column: 11, scope: !3818)
!3820 = !DILocation(line: 2371, column: 15, scope: !3821)
!3821 = distinct !DILexicalBlock(scope: !3818, file: !3, line: 2371, column: 7)
!3822 = !DILocation(line: 2371, column: 16, scope: !3821)
!3823 = !DILocation(line: 2371, column: 7, scope: !3818)
!3824 = !DILocation(line: 2371, column: 38, scope: !3821)
!3825 = !DILocation(line: 2371, column: 28, scope: !3821)
!3826 = !DILocation(line: 2371, column: 41, scope: !3821)
!3827 = !DILocation(line: 2371, column: 24, scope: !3821)
!3828 = !DILocation(line: 2371, column: 7, scope: !3821)
!3829 = distinct !{!3829, !3823, !3830}
!3830 = !DILocation(line: 2371, column: 43, scope: !3818)
!3831 = !DILocation(line: 2381, column: 5, scope: !3808)
!3832 = !DILocation(line: 2382, column: 3, scope: !2)
!3833 = !DILocation(line: 2394, column: 13, scope: !3834)
!3834 = distinct !DILexicalBlock(scope: !405, file: !3, line: 2394, column: 7)
!3835 = !DILocation(line: 2394, column: 16, scope: !3834)
!3836 = !DILocation(line: 2394, column: 7, scope: !405)
!3837 = !DILocation(line: 2396, column: 53, scope: !3838)
!3838 = distinct !DILexicalBlock(scope: !3834, file: !3, line: 2395, column: 5)
!3839 = !DILocation(line: 2396, column: 7, scope: !3838)
!3840 = !DILocation(line: 2397, column: 5, scope: !3838)
!3841 = !DILocation(line: 2398, column: 3, scope: !405)
!3842 = !DILocation(line: 2410, column: 13, scope: !3843)
!3843 = distinct !DILexicalBlock(scope: !409, file: !3, line: 2410, column: 7)
!3844 = !DILocation(line: 2410, column: 16, scope: !3843)
!3845 = !DILocation(line: 2410, column: 7, scope: !409)
!3846 = !DILocalVariable(name: "i", scope: !3847, file: !3, line: 2427, type: !398)
!3847 = distinct !DILexicalBlock(scope: !3843, file: !3, line: 2411, column: 5)
!3848 = !DILocation(line: 2427, column: 11, scope: !3847)
!3849 = !DILocation(line: 2428, column: 16, scope: !3847)
!3850 = !DILocation(line: 2429, column: 21, scope: !3847)
!3851 = !DILocation(line: 2430, column: 18, scope: !3847)
!3852 = !DILocation(line: 2431, column: 24, scope: !3847)
!3853 = !DILocation(line: 2432, column: 23, scope: !3847)
!3854 = !DILocation(line: 2433, column: 18, scope: !3847)
!3855 = !DILocation(line: 2434, column: 20, scope: !3847)
!3856 = !DILocation(line: 2435, column: 12, scope: !3857)
!3857 = distinct !DILexicalBlock(scope: !3847, file: !3, line: 2435, column: 7)
!3858 = !DILocation(line: 2435, column: 11, scope: !3857)
!3859 = !DILocation(line: 2435, column: 15, scope: !3860)
!3860 = distinct !DILexicalBlock(scope: !3857, file: !3, line: 2435, column: 7)
!3861 = !DILocation(line: 2435, column: 16, scope: !3860)
!3862 = !DILocation(line: 2435, column: 7, scope: !3857)
!3863 = !DILocation(line: 2435, column: 38, scope: !3860)
!3864 = !DILocation(line: 2435, column: 28, scope: !3860)
!3865 = !DILocation(line: 2435, column: 41, scope: !3860)
!3866 = !DILocation(line: 2435, column: 24, scope: !3860)
!3867 = !DILocation(line: 2435, column: 7, scope: !3860)
!3868 = distinct !{!3868, !3862, !3869}
!3869 = !DILocation(line: 2435, column: 43, scope: !3857)
!3870 = !DILocation(line: 2443, column: 5, scope: !3847)
!3871 = !DILocation(line: 2444, column: 3, scope: !409)
!3872 = distinct !DISubprogram(name: "real_inf", scope: !3, file: !3, line: 2450, type: !3500, scopeLine: 2451, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !406)
!3873 = !DILocalVariable(name: "r", arg: 1, scope: !3872, file: !3, line: 2450, type: !426)
!3874 = !DILocation(line: 2450, column: 28, scope: !3872)
!3875 = !DILocation(line: 2452, column: 12, scope: !3872)
!3876 = !DILocation(line: 2452, column: 3, scope: !3872)
!3877 = !DILocation(line: 2453, column: 1, scope: !3872)
!3878 = distinct !DISubprogram(name: "real_nan", scope: !3, file: !3, line: 2461, type: !3879, scopeLine: 2463, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !406)
!3879 = !DISubroutineType(types: !3880)
!3880 = !{!399, !426, !3043, !398, !226}
!3881 = !DILocalVariable(name: "r", arg: 1, scope: !3878, file: !3, line: 2461, type: !426)
!3882 = !DILocation(line: 2461, column: 28, scope: !3878)
!3883 = !DILocalVariable(name: "str", arg: 2, scope: !3878, file: !3, line: 2461, type: !3043)
!3884 = !DILocation(line: 2461, column: 43, scope: !3878)
!3885 = !DILocalVariable(name: "quiet", arg: 3, scope: !3878, file: !3, line: 2461, type: !398)
!3886 = !DILocation(line: 2461, column: 52, scope: !3878)
!3887 = !DILocalVariable(name: "mode", arg: 4, scope: !3878, file: !3, line: 2462, type: !226)
!3888 = !DILocation(line: 2462, column: 22, scope: !3878)
!3889 = !DILocalVariable(name: "fmt", scope: !3878, file: !3, line: 2464, type: !419)
!3890 = !DILocation(line: 2464, column: 29, scope: !3878)
!3891 = !DILocation(line: 2466, column: 9, scope: !3878)
!3892 = !DILocation(line: 2466, column: 7, scope: !3878)
!3893 = !DILocation(line: 2467, column: 3, scope: !3878)
!3894 = !DILocation(line: 2469, column: 8, scope: !3895)
!3895 = distinct !DILexicalBlock(scope: !3878, file: !3, line: 2469, column: 7)
!3896 = !DILocation(line: 2469, column: 7, scope: !3895)
!3897 = !DILocation(line: 2469, column: 12, scope: !3895)
!3898 = !DILocation(line: 2469, column: 7, scope: !3878)
!3899 = !DILocation(line: 2471, column: 11, scope: !3900)
!3900 = distinct !DILexicalBlock(scope: !3901, file: !3, line: 2471, column: 11)
!3901 = distinct !DILexicalBlock(scope: !3895, file: !3, line: 2470, column: 5)
!3902 = !DILocation(line: 2471, column: 11, scope: !3901)
!3903 = !DILocation(line: 2472, column: 22, scope: !3900)
!3904 = !DILocation(line: 2472, column: 2, scope: !3900)
!3905 = !DILocation(line: 2474, column: 22, scope: !3900)
!3906 = !DILocation(line: 2474, column: 2, scope: !3900)
!3907 = !DILocation(line: 2475, column: 5, scope: !3901)
!3908 = !DILocalVariable(name: "base", scope: !3909, file: !3, line: 2478, type: !398)
!3909 = distinct !DILexicalBlock(scope: !3895, file: !3, line: 2477, column: 5)
!3910 = !DILocation(line: 2478, column: 11, scope: !3909)
!3911 = !DILocalVariable(name: "d", scope: !3909, file: !3, line: 2478, type: !398)
!3912 = !DILocation(line: 2478, column: 22, scope: !3909)
!3913 = !DILocation(line: 2480, column: 15, scope: !3909)
!3914 = !DILocation(line: 2480, column: 7, scope: !3909)
!3915 = !DILocation(line: 2481, column: 7, scope: !3909)
!3916 = !DILocation(line: 2481, column: 10, scope: !3909)
!3917 = !DILocation(line: 2481, column: 13, scope: !3909)
!3918 = !DILocation(line: 2485, column: 7, scope: !3909)
!3919 = !DILocation(line: 2485, column: 14, scope: !3909)
!3920 = !DILocation(line: 2486, column: 5, scope: !3909)
!3921 = distinct !{!3921, !3918, !3920}
!3922 = !DILocation(line: 2487, column: 12, scope: !3923)
!3923 = distinct !DILexicalBlock(scope: !3909, file: !3, line: 2487, column: 11)
!3924 = !DILocation(line: 2487, column: 11, scope: !3923)
!3925 = !DILocation(line: 2487, column: 16, scope: !3923)
!3926 = !DILocation(line: 2487, column: 11, scope: !3909)
!3927 = !DILocation(line: 2488, column: 5, scope: !3923)
!3928 = !DILocation(line: 2488, column: 2, scope: !3923)
!3929 = !DILocation(line: 2489, column: 17, scope: !3930)
!3930 = distinct !DILexicalBlock(scope: !3923, file: !3, line: 2489, column: 16)
!3931 = !DILocation(line: 2489, column: 16, scope: !3930)
!3932 = !DILocation(line: 2489, column: 21, scope: !3930)
!3933 = !DILocation(line: 2489, column: 16, scope: !3923)
!3934 = !DILocation(line: 2490, column: 5, scope: !3930)
!3935 = !DILocation(line: 2490, column: 2, scope: !3930)
!3936 = !DILocation(line: 2491, column: 12, scope: !3937)
!3937 = distinct !DILexicalBlock(scope: !3909, file: !3, line: 2491, column: 11)
!3938 = !DILocation(line: 2491, column: 11, scope: !3937)
!3939 = !DILocation(line: 2491, column: 16, scope: !3937)
!3940 = !DILocation(line: 2491, column: 11, scope: !3909)
!3941 = !DILocation(line: 2493, column: 7, scope: !3942)
!3942 = distinct !DILexicalBlock(scope: !3937, file: !3, line: 2492, column: 2)
!3943 = !DILocation(line: 2494, column: 9, scope: !3944)
!3944 = distinct !DILexicalBlock(scope: !3942, file: !3, line: 2494, column: 8)
!3945 = !DILocation(line: 2494, column: 8, scope: !3944)
!3946 = !DILocation(line: 2494, column: 13, scope: !3944)
!3947 = !DILocation(line: 2494, column: 20, scope: !3944)
!3948 = !DILocation(line: 2494, column: 24, scope: !3944)
!3949 = !DILocation(line: 2494, column: 23, scope: !3944)
!3950 = !DILocation(line: 2494, column: 28, scope: !3944)
!3951 = !DILocation(line: 2494, column: 8, scope: !3942)
!3952 = !DILocation(line: 2496, column: 13, scope: !3953)
!3953 = distinct !DILexicalBlock(scope: !3944, file: !3, line: 2495, column: 6)
!3954 = !DILocation(line: 2497, column: 11, scope: !3953)
!3955 = !DILocation(line: 2498, column: 6, scope: !3953)
!3956 = !DILocation(line: 2500, column: 11, scope: !3944)
!3957 = !DILocation(line: 2501, column: 2, scope: !3942)
!3958 = !DILocation(line: 2503, column: 7, scope: !3909)
!3959 = !DILocation(line: 2503, column: 19, scope: !3909)
!3960 = !DILocation(line: 2503, column: 17, scope: !3909)
!3961 = !DILocation(line: 2503, column: 39, scope: !3909)
!3962 = !DILocation(line: 2503, column: 37, scope: !3909)
!3963 = !DILocalVariable(name: "u", scope: !3964, file: !3, line: 2505, type: !8)
!3964 = distinct !DILexicalBlock(scope: !3909, file: !3, line: 2504, column: 2)
!3965 = !DILocation(line: 2505, column: 20, scope: !3964)
!3966 = !DILocation(line: 2507, column: 12, scope: !3964)
!3967 = !DILocation(line: 2507, column: 4, scope: !3964)
!3968 = !DILocation(line: 2510, column: 28, scope: !3969)
!3969 = distinct !DILexicalBlock(scope: !3964, file: !3, line: 2508, column: 6)
!3970 = !DILocation(line: 2510, column: 31, scope: !3969)
!3971 = !DILocation(line: 2510, column: 8, scope: !3969)
!3972 = !DILocation(line: 2511, column: 8, scope: !3969)
!3973 = !DILocation(line: 2513, column: 28, scope: !3969)
!3974 = !DILocation(line: 2513, column: 31, scope: !3969)
!3975 = !DILocation(line: 2513, column: 8, scope: !3969)
!3976 = !DILocation(line: 2514, column: 8, scope: !3969)
!3977 = !DILocation(line: 2516, column: 34, scope: !3969)
!3978 = !DILocation(line: 2516, column: 8, scope: !3969)
!3979 = !DILocation(line: 2517, column: 28, scope: !3969)
!3980 = !DILocation(line: 2517, column: 31, scope: !3969)
!3981 = !DILocation(line: 2517, column: 8, scope: !3969)
!3982 = !DILocation(line: 2518, column: 26, scope: !3969)
!3983 = !DILocation(line: 2518, column: 29, scope: !3969)
!3984 = !DILocation(line: 2518, column: 8, scope: !3969)
!3985 = !DILocation(line: 2519, column: 8, scope: !3969)
!3986 = !DILocation(line: 2521, column: 8, scope: !3969)
!3987 = !DILocation(line: 2522, column: 6, scope: !3969)
!3988 = !DILocation(line: 2524, column: 4, scope: !3964)
!3989 = !DILocation(line: 2525, column: 15, scope: !3964)
!3990 = !DILocation(line: 2525, column: 6, scope: !3964)
!3991 = !DILocation(line: 2525, column: 4, scope: !3964)
!3992 = !DILocation(line: 2525, column: 13, scope: !3964)
!3993 = !DILocation(line: 2526, column: 22, scope: !3964)
!3994 = !DILocation(line: 2526, column: 25, scope: !3964)
!3995 = !DILocation(line: 2526, column: 4, scope: !3964)
!3996 = !DILocation(line: 2528, column: 7, scope: !3964)
!3997 = distinct !{!3997, !3958, !3998}
!3998 = !DILocation(line: 2529, column: 2, scope: !3909)
!3999 = !DILocation(line: 2532, column: 12, scope: !4000)
!4000 = distinct !DILexicalBlock(scope: !3909, file: !3, line: 2532, column: 11)
!4001 = !DILocation(line: 2532, column: 11, scope: !4000)
!4002 = !DILocation(line: 2532, column: 16, scope: !4000)
!4003 = !DILocation(line: 2532, column: 11, scope: !3909)
!4004 = !DILocation(line: 2533, column: 2, scope: !4000)
!4005 = !DILocation(line: 2537, column: 27, scope: !3909)
!4006 = !DILocation(line: 2537, column: 30, scope: !3909)
!4007 = !DILocation(line: 2537, column: 52, scope: !3909)
!4008 = !DILocation(line: 2537, column: 57, scope: !3909)
!4009 = !DILocation(line: 2537, column: 50, scope: !3909)
!4010 = !DILocation(line: 2537, column: 7, scope: !3909)
!4011 = !DILocation(line: 2540, column: 7, scope: !3909)
!4012 = !DILocation(line: 2540, column: 10, scope: !3909)
!4013 = !DILocation(line: 2540, column: 23, scope: !3909)
!4014 = !DILocation(line: 2543, column: 24, scope: !3909)
!4015 = !DILocation(line: 2543, column: 23, scope: !3909)
!4016 = !DILocation(line: 2543, column: 7, scope: !3909)
!4017 = !DILocation(line: 2543, column: 10, scope: !3909)
!4018 = !DILocation(line: 2543, column: 21, scope: !3909)
!4019 = !DILocation(line: 2546, column: 3, scope: !3878)
!4020 = !DILocation(line: 2547, column: 1, scope: !3878)
!4021 = distinct !DISubprogram(name: "lshift_significand", scope: !3, file: !3, line: 235, type: !2080, scopeLine: 237, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!4022 = !DILocalVariable(name: "r", arg: 1, scope: !4021, file: !3, line: 235, type: !426)
!4023 = !DILocation(line: 235, column: 38, scope: !4021)
!4024 = !DILocalVariable(name: "a", arg: 2, scope: !4021, file: !3, line: 235, type: !6)
!4025 = !DILocation(line: 235, column: 64, scope: !4021)
!4026 = !DILocalVariable(name: "n", arg: 3, scope: !4021, file: !3, line: 236, type: !12)
!4027 = !DILocation(line: 236, column: 20, scope: !4021)
!4028 = !DILocalVariable(name: "i", scope: !4021, file: !3, line: 238, type: !12)
!4029 = !DILocation(line: 238, column: 16, scope: !4021)
!4030 = !DILocalVariable(name: "ofs", scope: !4021, file: !3, line: 238, type: !12)
!4031 = !DILocation(line: 238, column: 19, scope: !4021)
!4032 = !DILocation(line: 238, column: 25, scope: !4021)
!4033 = !DILocation(line: 238, column: 27, scope: !4021)
!4034 = !DILocation(line: 240, column: 5, scope: !4021)
!4035 = !DILocation(line: 241, column: 7, scope: !4036)
!4036 = distinct !DILexicalBlock(scope: !4021, file: !3, line: 241, column: 7)
!4037 = !DILocation(line: 241, column: 9, scope: !4036)
!4038 = !DILocation(line: 241, column: 7, scope: !4021)
!4039 = !DILocation(line: 243, column: 14, scope: !4040)
!4040 = distinct !DILexicalBlock(scope: !4041, file: !3, line: 243, column: 7)
!4041 = distinct !DILexicalBlock(scope: !4036, file: !3, line: 242, column: 5)
!4042 = !DILocation(line: 243, column: 12, scope: !4040)
!4043 = !DILocation(line: 243, column: 19, scope: !4044)
!4044 = distinct !DILexicalBlock(scope: !4040, file: !3, line: 243, column: 7)
!4045 = !DILocation(line: 243, column: 25, scope: !4044)
!4046 = !DILocation(line: 243, column: 23, scope: !4044)
!4047 = !DILocation(line: 243, column: 27, scope: !4044)
!4048 = !DILocation(line: 243, column: 7, scope: !4040)
!4049 = !DILocation(line: 244, column: 22, scope: !4044)
!4050 = !DILocation(line: 244, column: 25, scope: !4044)
!4051 = !DILocation(line: 244, column: 37, scope: !4044)
!4052 = !DILocation(line: 244, column: 36, scope: !4044)
!4053 = !DILocation(line: 244, column: 39, scope: !4044)
!4054 = !DILocation(line: 244, column: 38, scope: !4044)
!4055 = !DILocation(line: 244, column: 2, scope: !4044)
!4056 = !DILocation(line: 244, column: 5, scope: !4044)
!4057 = !DILocation(line: 244, column: 17, scope: !4044)
!4058 = !DILocation(line: 244, column: 16, scope: !4044)
!4059 = !DILocation(line: 244, column: 20, scope: !4044)
!4060 = !DILocation(line: 243, column: 36, scope: !4044)
!4061 = !DILocation(line: 243, column: 7, scope: !4044)
!4062 = distinct !{!4062, !4048, !4063}
!4063 = !DILocation(line: 244, column: 42, scope: !4040)
!4064 = !DILocation(line: 245, column: 7, scope: !4041)
!4065 = !DILocation(line: 245, column: 14, scope: !4066)
!4066 = distinct !DILexicalBlock(scope: !4067, file: !3, line: 245, column: 7)
!4067 = distinct !DILexicalBlock(scope: !4041, file: !3, line: 245, column: 7)
!4068 = !DILocation(line: 245, column: 16, scope: !4066)
!4069 = !DILocation(line: 245, column: 7, scope: !4067)
!4070 = !DILocation(line: 246, column: 2, scope: !4066)
!4071 = !DILocation(line: 246, column: 5, scope: !4066)
!4072 = !DILocation(line: 246, column: 17, scope: !4066)
!4073 = !DILocation(line: 246, column: 16, scope: !4066)
!4074 = !DILocation(line: 246, column: 20, scope: !4066)
!4075 = !DILocation(line: 245, column: 25, scope: !4066)
!4076 = !DILocation(line: 245, column: 7, scope: !4066)
!4077 = distinct !{!4077, !4069, !4078}
!4078 = !DILocation(line: 246, column: 22, scope: !4067)
!4079 = !DILocation(line: 247, column: 5, scope: !4041)
!4080 = !DILocation(line: 249, column: 12, scope: !4081)
!4081 = distinct !DILexicalBlock(scope: !4036, file: !3, line: 249, column: 5)
!4082 = !DILocation(line: 249, column: 10, scope: !4081)
!4083 = !DILocation(line: 249, column: 17, scope: !4084)
!4084 = distinct !DILexicalBlock(scope: !4081, file: !3, line: 249, column: 5)
!4085 = !DILocation(line: 249, column: 19, scope: !4084)
!4086 = !DILocation(line: 249, column: 5, scope: !4081)
!4087 = !DILocation(line: 252, column: 9, scope: !4088)
!4088 = distinct !DILexicalBlock(scope: !4084, file: !3, line: 250, column: 7)
!4089 = !DILocation(line: 252, column: 15, scope: !4088)
!4090 = !DILocation(line: 252, column: 13, scope: !4088)
!4091 = !DILocation(line: 252, column: 17, scope: !4088)
!4092 = !DILocation(line: 252, column: 32, scope: !4088)
!4093 = !DILocation(line: 252, column: 35, scope: !4088)
!4094 = !DILocation(line: 252, column: 47, scope: !4088)
!4095 = !DILocation(line: 252, column: 46, scope: !4088)
!4096 = !DILocation(line: 252, column: 49, scope: !4088)
!4097 = !DILocation(line: 252, column: 48, scope: !4088)
!4098 = !DILocation(line: 252, column: 58, scope: !4088)
!4099 = !DILocation(line: 252, column: 55, scope: !4088)
!4100 = !DILocation(line: 253, column: 11, scope: !4088)
!4101 = !DILocation(line: 253, column: 17, scope: !4088)
!4102 = !DILocation(line: 253, column: 15, scope: !4088)
!4103 = !DILocation(line: 253, column: 19, scope: !4088)
!4104 = !DILocation(line: 253, column: 23, scope: !4088)
!4105 = !DILocation(line: 253, column: 38, scope: !4088)
!4106 = !DILocation(line: 253, column: 41, scope: !4088)
!4107 = !DILocation(line: 253, column: 53, scope: !4088)
!4108 = !DILocation(line: 253, column: 52, scope: !4088)
!4109 = !DILocation(line: 253, column: 55, scope: !4088)
!4110 = !DILocation(line: 253, column: 54, scope: !4088)
!4111 = !DILocation(line: 253, column: 58, scope: !4088)
!4112 = !DILocation(line: 254, column: 28, scope: !4088)
!4113 = !DILocation(line: 254, column: 26, scope: !4088)
!4114 = !DILocation(line: 254, column: 3, scope: !4088)
!4115 = !DILocation(line: 253, column: 7, scope: !4088)
!4116 = !DILocation(line: 251, column: 2, scope: !4088)
!4117 = !DILocation(line: 251, column: 5, scope: !4088)
!4118 = !DILocation(line: 251, column: 17, scope: !4088)
!4119 = !DILocation(line: 251, column: 16, scope: !4088)
!4120 = !DILocation(line: 252, column: 4, scope: !4088)
!4121 = !DILocation(line: 255, column: 7, scope: !4088)
!4122 = !DILocation(line: 249, column: 28, scope: !4084)
!4123 = !DILocation(line: 249, column: 5, scope: !4084)
!4124 = distinct !{!4124, !4086, !4125}
!4125 = !DILocation(line: 255, column: 7, scope: !4081)
!4126 = !DILocation(line: 256, column: 1, scope: !4021)
!4127 = distinct !DISubprogram(name: "lshift_significand_1", scope: !3, file: !3, line: 261, type: !1275, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!4128 = !DILocalVariable(name: "r", arg: 1, scope: !4127, file: !3, line: 261, type: !426)
!4129 = !DILocation(line: 261, column: 40, scope: !4127)
!4130 = !DILocalVariable(name: "a", arg: 2, scope: !4127, file: !3, line: 261, type: !6)
!4131 = !DILocation(line: 261, column: 66, scope: !4127)
!4132 = !DILocalVariable(name: "i", scope: !4127, file: !3, line: 263, type: !12)
!4133 = !DILocation(line: 263, column: 16, scope: !4127)
!4134 = !DILocation(line: 265, column: 10, scope: !4135)
!4135 = distinct !DILexicalBlock(scope: !4127, file: !3, line: 265, column: 3)
!4136 = !DILocation(line: 265, column: 8, scope: !4135)
!4137 = !DILocation(line: 265, column: 23, scope: !4138)
!4138 = distinct !DILexicalBlock(scope: !4135, file: !3, line: 265, column: 3)
!4139 = !DILocation(line: 265, column: 25, scope: !4138)
!4140 = !DILocation(line: 265, column: 3, scope: !4135)
!4141 = !DILocation(line: 266, column: 18, scope: !4138)
!4142 = !DILocation(line: 266, column: 21, scope: !4138)
!4143 = !DILocation(line: 266, column: 25, scope: !4138)
!4144 = !DILocation(line: 266, column: 28, scope: !4138)
!4145 = !DILocation(line: 266, column: 37, scope: !4138)
!4146 = !DILocation(line: 266, column: 40, scope: !4138)
!4147 = !DILocation(line: 266, column: 44, scope: !4138)
!4148 = !DILocation(line: 266, column: 45, scope: !4138)
!4149 = !DILocation(line: 266, column: 49, scope: !4138)
!4150 = !DILocation(line: 266, column: 34, scope: !4138)
!4151 = !DILocation(line: 266, column: 5, scope: !4138)
!4152 = !DILocation(line: 266, column: 8, scope: !4138)
!4153 = !DILocation(line: 266, column: 12, scope: !4138)
!4154 = !DILocation(line: 266, column: 15, scope: !4138)
!4155 = !DILocation(line: 265, column: 30, scope: !4138)
!4156 = !DILocation(line: 265, column: 3, scope: !4138)
!4157 = distinct !{!4157, !4140, !4158}
!4158 = !DILocation(line: 266, column: 76, scope: !4135)
!4159 = !DILocation(line: 267, column: 15, scope: !4127)
!4160 = !DILocation(line: 267, column: 18, scope: !4127)
!4161 = !DILocation(line: 267, column: 25, scope: !4127)
!4162 = !DILocation(line: 267, column: 3, scope: !4127)
!4163 = !DILocation(line: 267, column: 6, scope: !4127)
!4164 = !DILocation(line: 267, column: 13, scope: !4127)
!4165 = !DILocation(line: 268, column: 1, scope: !4127)
!4166 = distinct !DISubprogram(name: "add_significands", scope: !3, file: !3, line: 274, type: !832, scopeLine: 276, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!4167 = !DILocalVariable(name: "r", arg: 1, scope: !4166, file: !3, line: 274, type: !426)
!4168 = !DILocation(line: 274, column: 36, scope: !4166)
!4169 = !DILocalVariable(name: "a", arg: 2, scope: !4166, file: !3, line: 274, type: !6)
!4170 = !DILocation(line: 274, column: 62, scope: !4166)
!4171 = !DILocalVariable(name: "b", arg: 3, scope: !4166, file: !3, line: 275, type: !6)
!4172 = !DILocation(line: 275, column: 28, scope: !4166)
!4173 = !DILocalVariable(name: "carry", scope: !4166, file: !3, line: 277, type: !399)
!4174 = !DILocation(line: 277, column: 8, scope: !4166)
!4175 = !DILocalVariable(name: "i", scope: !4166, file: !3, line: 278, type: !398)
!4176 = !DILocation(line: 278, column: 7, scope: !4166)
!4177 = !DILocation(line: 280, column: 10, scope: !4178)
!4178 = distinct !DILexicalBlock(scope: !4166, file: !3, line: 280, column: 3)
!4179 = !DILocation(line: 280, column: 8, scope: !4178)
!4180 = !DILocation(line: 280, column: 15, scope: !4181)
!4181 = distinct !DILexicalBlock(scope: !4178, file: !3, line: 280, column: 3)
!4182 = !DILocation(line: 280, column: 17, scope: !4181)
!4183 = !DILocation(line: 280, column: 3, scope: !4178)
!4184 = !DILocalVariable(name: "ai", scope: !4185, file: !3, line: 282, type: !20)
!4185 = distinct !DILexicalBlock(scope: !4181, file: !3, line: 281, column: 5)
!4186 = !DILocation(line: 282, column: 21, scope: !4185)
!4187 = !DILocation(line: 282, column: 26, scope: !4185)
!4188 = !DILocation(line: 282, column: 29, scope: !4185)
!4189 = !DILocation(line: 282, column: 33, scope: !4185)
!4190 = !DILocalVariable(name: "ri", scope: !4185, file: !3, line: 283, type: !20)
!4191 = !DILocation(line: 283, column: 21, scope: !4185)
!4192 = !DILocation(line: 283, column: 26, scope: !4185)
!4193 = !DILocation(line: 283, column: 31, scope: !4185)
!4194 = !DILocation(line: 283, column: 34, scope: !4185)
!4195 = !DILocation(line: 283, column: 38, scope: !4185)
!4196 = !DILocation(line: 283, column: 29, scope: !4185)
!4197 = !DILocation(line: 285, column: 11, scope: !4198)
!4198 = distinct !DILexicalBlock(scope: !4185, file: !3, line: 285, column: 11)
!4199 = !DILocation(line: 285, column: 11, scope: !4185)
!4200 = !DILocation(line: 287, column: 12, scope: !4201)
!4201 = distinct !DILexicalBlock(scope: !4198, file: !3, line: 286, column: 2)
!4202 = !DILocation(line: 287, column: 17, scope: !4201)
!4203 = !DILocation(line: 287, column: 15, scope: !4201)
!4204 = !DILocation(line: 287, column: 10, scope: !4201)
!4205 = !DILocation(line: 288, column: 13, scope: !4201)
!4206 = !DILocation(line: 288, column: 18, scope: !4201)
!4207 = !DILocation(line: 288, column: 10, scope: !4201)
!4208 = !DILocation(line: 289, column: 2, scope: !4201)
!4209 = !DILocation(line: 291, column: 10, scope: !4198)
!4210 = !DILocation(line: 291, column: 15, scope: !4198)
!4211 = !DILocation(line: 291, column: 13, scope: !4198)
!4212 = !DILocation(line: 291, column: 8, scope: !4198)
!4213 = !DILocation(line: 293, column: 19, scope: !4185)
!4214 = !DILocation(line: 293, column: 7, scope: !4185)
!4215 = !DILocation(line: 293, column: 10, scope: !4185)
!4216 = !DILocation(line: 293, column: 14, scope: !4185)
!4217 = !DILocation(line: 293, column: 17, scope: !4185)
!4218 = !DILocation(line: 294, column: 5, scope: !4185)
!4219 = !DILocation(line: 280, column: 26, scope: !4181)
!4220 = !DILocation(line: 280, column: 3, scope: !4181)
!4221 = distinct !{!4221, !4183, !4222}
!4222 = !DILocation(line: 294, column: 5, scope: !4178)
!4223 = !DILocation(line: 296, column: 10, scope: !4166)
!4224 = !DILocation(line: 296, column: 3, scope: !4166)
!4225 = distinct !DISubprogram(name: "real_maxval", scope: !3, file: !3, line: 2553, type: !4226, scopeLine: 2554, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !406)
!4226 = !DISubroutineType(types: !4227)
!4227 = !{null, !426, !398, !226}
!4228 = !DILocalVariable(name: "r", arg: 1, scope: !4225, file: !3, line: 2553, type: !426)
!4229 = !DILocation(line: 2553, column: 31, scope: !4225)
!4230 = !DILocalVariable(name: "sign", arg: 2, scope: !4225, file: !3, line: 2553, type: !398)
!4231 = !DILocation(line: 2553, column: 38, scope: !4225)
!4232 = !DILocalVariable(name: "mode", arg: 3, scope: !4225, file: !3, line: 2553, type: !226)
!4233 = !DILocation(line: 2553, column: 62, scope: !4225)
!4234 = !DILocalVariable(name: "fmt", scope: !4225, file: !3, line: 2555, type: !419)
!4235 = !DILocation(line: 2555, column: 29, scope: !4225)
!4236 = !DILocalVariable(name: "np2", scope: !4225, file: !3, line: 2556, type: !398)
!4237 = !DILocation(line: 2556, column: 7, scope: !4225)
!4238 = !DILocation(line: 2558, column: 9, scope: !4225)
!4239 = !DILocation(line: 2558, column: 7, scope: !4225)
!4240 = !DILocation(line: 2559, column: 3, scope: !4225)
!4241 = !DILocation(line: 2560, column: 11, scope: !4225)
!4242 = !DILocation(line: 2560, column: 3, scope: !4225)
!4243 = !DILocation(line: 2562, column: 7, scope: !4244)
!4244 = distinct !DILexicalBlock(scope: !4225, file: !3, line: 2562, column: 7)
!4245 = !DILocation(line: 2562, column: 12, scope: !4244)
!4246 = !DILocation(line: 2562, column: 14, scope: !4244)
!4247 = !DILocation(line: 2562, column: 7, scope: !4225)
!4248 = !DILocation(line: 2563, column: 26, scope: !4244)
!4249 = !DILocation(line: 2563, column: 29, scope: !4244)
!4250 = !DILocation(line: 2563, column: 35, scope: !4244)
!4251 = !DILocation(line: 2563, column: 5, scope: !4244)
!4252 = !DILocation(line: 2566, column: 7, scope: !4253)
!4253 = distinct !DILexicalBlock(scope: !4244, file: !3, line: 2565, column: 5)
!4254 = !DILocation(line: 2566, column: 10, scope: !4253)
!4255 = !DILocation(line: 2566, column: 13, scope: !4253)
!4256 = !DILocation(line: 2567, column: 17, scope: !4253)
!4257 = !DILocation(line: 2567, column: 7, scope: !4253)
!4258 = !DILocation(line: 2567, column: 10, scope: !4253)
!4259 = !DILocation(line: 2567, column: 15, scope: !4253)
!4260 = !DILocation(line: 2568, column: 7, scope: !4253)
!4261 = !DILocation(line: 2570, column: 32, scope: !4253)
!4262 = !DILocation(line: 2570, column: 37, scope: !4253)
!4263 = !DILocation(line: 2570, column: 30, scope: !4253)
!4264 = !DILocation(line: 2570, column: 11, scope: !4253)
!4265 = !DILocation(line: 2571, column: 15, scope: !4253)
!4266 = !DILocation(line: 2571, column: 18, scope: !4253)
!4267 = !DILocation(line: 2571, column: 7, scope: !4253)
!4268 = !DILocation(line: 2572, column: 32, scope: !4253)
!4269 = !DILocation(line: 2572, column: 35, scope: !4253)
!4270 = !DILocation(line: 2572, column: 7, scope: !4253)
!4271 = !DILocation(line: 2574, column: 11, scope: !4272)
!4272 = distinct !DILexicalBlock(scope: !4253, file: !3, line: 2574, column: 11)
!4273 = !DILocation(line: 2574, column: 16, scope: !4272)
!4274 = !DILocation(line: 2574, column: 23, scope: !4272)
!4275 = !DILocation(line: 2574, column: 28, scope: !4272)
!4276 = !DILocation(line: 2574, column: 21, scope: !4272)
!4277 = !DILocation(line: 2574, column: 11, scope: !4253)
!4278 = !DILocation(line: 2581, column: 25, scope: !4272)
!4279 = !DILocation(line: 2581, column: 47, scope: !4272)
!4280 = !DILocation(line: 2581, column: 52, scope: !4272)
!4281 = !DILocation(line: 2581, column: 45, scope: !4272)
!4282 = !DILocation(line: 2581, column: 57, scope: !4272)
!4283 = !DILocation(line: 2581, column: 2, scope: !4272)
!4284 = !DILocation(line: 2583, column: 1, scope: !4225)
!4285 = distinct !DISubprogram(name: "clear_significand_below", scope: !3, file: !3, line: 425, type: !4286, scopeLine: 426, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!4286 = !DISubroutineType(types: !4287)
!4287 = !{null, !426, !12}
!4288 = !DILocalVariable(name: "r", arg: 1, scope: !4285, file: !3, line: 425, type: !426)
!4289 = !DILocation(line: 425, column: 43, scope: !4285)
!4290 = !DILocalVariable(name: "n", arg: 2, scope: !4285, file: !3, line: 425, type: !12)
!4291 = !DILocation(line: 425, column: 59, scope: !4285)
!4292 = !DILocalVariable(name: "i", scope: !4285, file: !3, line: 427, type: !398)
!4293 = !DILocation(line: 427, column: 7, scope: !4285)
!4294 = !DILocalVariable(name: "w", scope: !4285, file: !3, line: 427, type: !398)
!4295 = !DILocation(line: 427, column: 10, scope: !4285)
!4296 = !DILocation(line: 427, column: 14, scope: !4285)
!4297 = !DILocation(line: 427, column: 16, scope: !4285)
!4298 = !DILocation(line: 429, column: 10, scope: !4299)
!4299 = distinct !DILexicalBlock(scope: !4285, file: !3, line: 429, column: 3)
!4300 = !DILocation(line: 429, column: 8, scope: !4299)
!4301 = !DILocation(line: 429, column: 15, scope: !4302)
!4302 = distinct !DILexicalBlock(scope: !4299, file: !3, line: 429, column: 3)
!4303 = !DILocation(line: 429, column: 19, scope: !4302)
!4304 = !DILocation(line: 429, column: 17, scope: !4302)
!4305 = !DILocation(line: 429, column: 3, scope: !4299)
!4306 = !DILocation(line: 430, column: 5, scope: !4302)
!4307 = !DILocation(line: 430, column: 8, scope: !4302)
!4308 = !DILocation(line: 430, column: 12, scope: !4302)
!4309 = !DILocation(line: 430, column: 15, scope: !4302)
!4310 = !DILocation(line: 429, column: 22, scope: !4302)
!4311 = !DILocation(line: 429, column: 3, scope: !4302)
!4312 = distinct !{!4312, !4305, !4313}
!4313 = !DILocation(line: 430, column: 17, scope: !4299)
!4314 = !DILocation(line: 432, column: 40, scope: !4285)
!4315 = !DILocation(line: 432, column: 42, scope: !4285)
!4316 = !DILocation(line: 432, column: 36, scope: !4285)
!4317 = !DILocation(line: 432, column: 65, scope: !4285)
!4318 = !DILocation(line: 432, column: 16, scope: !4285)
!4319 = !DILocation(line: 432, column: 3, scope: !4285)
!4320 = !DILocation(line: 432, column: 6, scope: !4285)
!4321 = !DILocation(line: 432, column: 10, scope: !4285)
!4322 = !DILocation(line: 432, column: 13, scope: !4285)
!4323 = !DILocation(line: 433, column: 1, scope: !4285)
!4324 = distinct !DISubprogram(name: "clear_significand_bit", scope: !3, file: !3, line: 404, type: !4286, scopeLine: 405, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!4325 = !DILocalVariable(name: "r", arg: 1, scope: !4324, file: !3, line: 404, type: !426)
!4326 = !DILocation(line: 404, column: 41, scope: !4324)
!4327 = !DILocalVariable(name: "n", arg: 2, scope: !4324, file: !3, line: 404, type: !12)
!4328 = !DILocation(line: 404, column: 57, scope: !4324)
!4329 = !DILocation(line: 407, column: 31, scope: !4324)
!4330 = !DILocation(line: 407, column: 33, scope: !4324)
!4331 = !DILocation(line: 407, column: 27, scope: !4324)
!4332 = !DILocation(line: 407, column: 8, scope: !4324)
!4333 = !DILocation(line: 406, column: 3, scope: !4324)
!4334 = !DILocation(line: 406, column: 6, scope: !4324)
!4335 = !DILocation(line: 406, column: 10, scope: !4324)
!4336 = !DILocation(line: 406, column: 12, scope: !4324)
!4337 = !DILocation(line: 407, column: 5, scope: !4324)
!4338 = !DILocation(line: 408, column: 1, scope: !4324)
!4339 = distinct !DISubprogram(name: "real_2expN", scope: !3, file: !3, line: 2588, type: !4226, scopeLine: 2589, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !406)
!4340 = !DILocalVariable(name: "r", arg: 1, scope: !4339, file: !3, line: 2588, type: !426)
!4341 = !DILocation(line: 2588, column: 30, scope: !4339)
!4342 = !DILocalVariable(name: "n", arg: 2, scope: !4339, file: !3, line: 2588, type: !398)
!4343 = !DILocation(line: 2588, column: 37, scope: !4339)
!4344 = !DILocalVariable(name: "fmode", arg: 3, scope: !4339, file: !3, line: 2588, type: !226)
!4345 = !DILocation(line: 2588, column: 58, scope: !4339)
!4346 = !DILocation(line: 2590, column: 11, scope: !4339)
!4347 = !DILocation(line: 2590, column: 3, scope: !4339)
!4348 = !DILocation(line: 2592, column: 4, scope: !4339)
!4349 = !DILocation(line: 2593, column: 7, scope: !4350)
!4350 = distinct !DILexicalBlock(scope: !4339, file: !3, line: 2593, column: 7)
!4351 = !DILocation(line: 2593, column: 9, scope: !4350)
!4352 = !DILocation(line: 2593, column: 7, scope: !4339)
!4353 = !DILocation(line: 2594, column: 5, scope: !4350)
!4354 = !DILocation(line: 2594, column: 8, scope: !4350)
!4355 = !DILocation(line: 2594, column: 11, scope: !4350)
!4356 = !DILocation(line: 2595, column: 12, scope: !4357)
!4357 = distinct !DILexicalBlock(scope: !4350, file: !3, line: 2595, column: 12)
!4358 = !DILocation(line: 2595, column: 14, scope: !4357)
!4359 = !DILocation(line: 2595, column: 12, scope: !4350)
!4360 = !DILocation(line: 2599, column: 7, scope: !4361)
!4361 = distinct !DILexicalBlock(scope: !4357, file: !3, line: 2598, column: 5)
!4362 = !DILocation(line: 2599, column: 10, scope: !4361)
!4363 = !DILocation(line: 2599, column: 13, scope: !4361)
!4364 = !DILocation(line: 2600, column: 7, scope: !4361)
!4365 = !DILocation(line: 2601, column: 7, scope: !4361)
!4366 = !DILocation(line: 2601, column: 10, scope: !4361)
!4367 = !DILocation(line: 2601, column: 23, scope: !4361)
!4368 = !DILocation(line: 2603, column: 7, scope: !4369)
!4369 = distinct !DILexicalBlock(scope: !4339, file: !3, line: 2603, column: 7)
!4370 = !DILocation(line: 2603, column: 7, scope: !4339)
!4371 = !DILocation(line: 2604, column: 27, scope: !4369)
!4372 = !DILocation(line: 2604, column: 30, scope: !4369)
!4373 = !DILocation(line: 2604, column: 37, scope: !4369)
!4374 = !DILocation(line: 2604, column: 5, scope: !4369)
!4375 = !DILocation(line: 2605, column: 1, scope: !4339)
!4376 = distinct !DISubprogram(name: "round_for_format", scope: !3, file: !3, line: 2609, type: !4377, scopeLine: 2610, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!4377 = !DISubroutineType(types: !4378)
!4378 = !{null, !419, !426}
!4379 = !DILocalVariable(name: "fmt", arg: 1, scope: !4376, file: !3, line: 2609, type: !419)
!4380 = !DILocation(line: 2609, column: 45, scope: !4376)
!4381 = !DILocalVariable(name: "r", arg: 2, scope: !4376, file: !3, line: 2609, type: !426)
!4382 = !DILocation(line: 2609, column: 67, scope: !4376)
!4383 = !DILocalVariable(name: "p2", scope: !4376, file: !3, line: 2611, type: !398)
!4384 = !DILocation(line: 2611, column: 7, scope: !4376)
!4385 = !DILocalVariable(name: "np2", scope: !4376, file: !3, line: 2611, type: !398)
!4386 = !DILocation(line: 2611, column: 11, scope: !4376)
!4387 = !DILocalVariable(name: "i", scope: !4376, file: !3, line: 2611, type: !398)
!4388 = !DILocation(line: 2611, column: 16, scope: !4376)
!4389 = !DILocalVariable(name: "w", scope: !4376, file: !3, line: 2611, type: !398)
!4390 = !DILocation(line: 2611, column: 19, scope: !4376)
!4391 = !DILocalVariable(name: "emin2m1", scope: !4376, file: !3, line: 2612, type: !398)
!4392 = !DILocation(line: 2612, column: 7, scope: !4376)
!4393 = !DILocalVariable(name: "emax2", scope: !4376, file: !3, line: 2612, type: !398)
!4394 = !DILocation(line: 2612, column: 16, scope: !4376)
!4395 = !DILocalVariable(name: "round_up", scope: !4376, file: !3, line: 2613, type: !399)
!4396 = !DILocation(line: 2613, column: 8, scope: !4376)
!4397 = !DILocation(line: 2615, column: 7, scope: !4398)
!4398 = distinct !DILexicalBlock(scope: !4376, file: !3, line: 2615, column: 7)
!4399 = !DILocation(line: 2615, column: 10, scope: !4398)
!4400 = !DILocation(line: 2615, column: 7, scope: !4376)
!4401 = !DILocation(line: 2617, column: 11, scope: !4402)
!4402 = distinct !DILexicalBlock(scope: !4403, file: !3, line: 2617, column: 11)
!4403 = distinct !DILexicalBlock(scope: !4398, file: !3, line: 2616, column: 5)
!4404 = !DILocation(line: 2617, column: 16, scope: !4402)
!4405 = !DILocation(line: 2617, column: 18, scope: !4402)
!4406 = !DILocation(line: 2617, column: 11, scope: !4403)
!4407 = !DILocation(line: 2619, column: 30, scope: !4408)
!4408 = distinct !DILexicalBlock(scope: !4402, file: !3, line: 2618, column: 2)
!4409 = !DILocation(line: 2619, column: 35, scope: !4408)
!4410 = !DILocation(line: 2619, column: 4, scope: !4408)
!4411 = !DILocation(line: 2620, column: 4, scope: !4408)
!4412 = !DILocation(line: 2626, column: 29, scope: !4403)
!4413 = !DILocation(line: 2626, column: 40, scope: !4403)
!4414 = !DILocation(line: 2626, column: 7, scope: !4403)
!4415 = !DILocation(line: 2627, column: 5, scope: !4403)
!4416 = !DILocation(line: 2629, column: 8, scope: !4376)
!4417 = !DILocation(line: 2629, column: 13, scope: !4376)
!4418 = !DILocation(line: 2629, column: 6, scope: !4376)
!4419 = !DILocation(line: 2630, column: 13, scope: !4376)
!4420 = !DILocation(line: 2630, column: 18, scope: !4376)
!4421 = !DILocation(line: 2630, column: 23, scope: !4376)
!4422 = !DILocation(line: 2630, column: 11, scope: !4376)
!4423 = !DILocation(line: 2631, column: 11, scope: !4376)
!4424 = !DILocation(line: 2631, column: 16, scope: !4376)
!4425 = !DILocation(line: 2631, column: 9, scope: !4376)
!4426 = !DILocation(line: 2633, column: 28, scope: !4376)
!4427 = !DILocation(line: 2633, column: 26, scope: !4376)
!4428 = !DILocation(line: 2633, column: 7, scope: !4376)
!4429 = !DILocation(line: 2634, column: 11, scope: !4376)
!4430 = !DILocation(line: 2634, column: 14, scope: !4376)
!4431 = !DILocation(line: 2634, column: 3, scope: !4376)
!4432 = !DILabel(scope: !4433, name: "underflow", file: !3, line: 2636)
!4433 = distinct !DILexicalBlock(scope: !4376, file: !3, line: 2635, column: 5)
!4434 = !DILocation(line: 2636, column: 5, scope: !4433)
!4435 = !DILocation(line: 2637, column: 17, scope: !4433)
!4436 = !DILocation(line: 2637, column: 20, scope: !4433)
!4437 = !DILocation(line: 2637, column: 23, scope: !4433)
!4438 = !DILocation(line: 2637, column: 7, scope: !4433)
!4439 = !DILocation(line: 2639, column: 12, scope: !4440)
!4440 = distinct !DILexicalBlock(scope: !4433, file: !3, line: 2639, column: 11)
!4441 = !DILocation(line: 2639, column: 17, scope: !4440)
!4442 = !DILocation(line: 2639, column: 11, scope: !4433)
!4443 = !DILocation(line: 2640, column: 2, scope: !4440)
!4444 = !DILocation(line: 2640, column: 5, scope: !4440)
!4445 = !DILocation(line: 2640, column: 10, scope: !4440)
!4446 = !DILocation(line: 2641, column: 7, scope: !4433)
!4447 = !DILabel(scope: !4433, name: "overflow", file: !3, line: 2643)
!4448 = !DILocation(line: 2643, column: 5, scope: !4433)
!4449 = !DILocation(line: 2644, column: 16, scope: !4433)
!4450 = !DILocation(line: 2644, column: 19, scope: !4433)
!4451 = !DILocation(line: 2644, column: 22, scope: !4433)
!4452 = !DILocation(line: 2644, column: 7, scope: !4433)
!4453 = !DILocation(line: 2646, column: 7, scope: !4433)
!4454 = !DILocation(line: 2649, column: 32, scope: !4433)
!4455 = !DILocation(line: 2649, column: 35, scope: !4433)
!4456 = !DILocation(line: 2649, column: 7, scope: !4433)
!4457 = !DILocation(line: 2650, column: 7, scope: !4433)
!4458 = !DILocation(line: 2653, column: 7, scope: !4433)
!4459 = !DILocation(line: 2656, column: 7, scope: !4433)
!4460 = !DILocation(line: 2657, column: 5, scope: !4433)
!4461 = !DILocation(line: 2661, column: 7, scope: !4462)
!4462 = distinct !DILexicalBlock(scope: !4376, file: !3, line: 2661, column: 7)
!4463 = !DILocation(line: 2661, column: 22, scope: !4462)
!4464 = !DILocation(line: 2661, column: 20, scope: !4462)
!4465 = !DILocation(line: 2661, column: 7, scope: !4376)
!4466 = !DILocation(line: 2662, column: 5, scope: !4462)
!4467 = !DILocation(line: 2663, column: 12, scope: !4468)
!4468 = distinct !DILexicalBlock(scope: !4462, file: !3, line: 2663, column: 12)
!4469 = !DILocation(line: 2663, column: 28, scope: !4468)
!4470 = !DILocation(line: 2663, column: 25, scope: !4468)
!4471 = !DILocation(line: 2663, column: 12, scope: !4462)
!4472 = !DILocalVariable(name: "diff", scope: !4473, file: !3, line: 2665, type: !398)
!4473 = distinct !DILexicalBlock(scope: !4468, file: !3, line: 2664, column: 5)
!4474 = !DILocation(line: 2665, column: 11, scope: !4473)
!4475 = !DILocation(line: 2667, column: 12, scope: !4476)
!4476 = distinct !DILexicalBlock(scope: !4473, file: !3, line: 2667, column: 11)
!4477 = !DILocation(line: 2667, column: 17, scope: !4476)
!4478 = !DILocation(line: 2667, column: 11, scope: !4473)
!4479 = !DILocation(line: 2670, column: 8, scope: !4480)
!4480 = distinct !DILexicalBlock(scope: !4481, file: !3, line: 2670, column: 8)
!4481 = distinct !DILexicalBlock(scope: !4476, file: !3, line: 2668, column: 2)
!4482 = !DILocation(line: 2670, column: 23, scope: !4480)
!4483 = !DILocation(line: 2670, column: 21, scope: !4480)
!4484 = !DILocation(line: 2670, column: 8, scope: !4481)
!4485 = !DILocation(line: 2671, column: 6, scope: !4480)
!4486 = !DILocation(line: 2672, column: 2, scope: !4481)
!4487 = !DILocation(line: 2675, column: 11, scope: !4488)
!4488 = distinct !DILexicalBlock(scope: !4476, file: !3, line: 2674, column: 2)
!4489 = !DILocation(line: 2675, column: 21, scope: !4488)
!4490 = !DILocation(line: 2675, column: 19, scope: !4488)
!4491 = !DILocation(line: 2675, column: 34, scope: !4488)
!4492 = !DILocation(line: 2675, column: 9, scope: !4488)
!4493 = !DILocation(line: 2676, column: 8, scope: !4494)
!4494 = distinct !DILexicalBlock(scope: !4488, file: !3, line: 2676, column: 8)
!4495 = !DILocation(line: 2676, column: 15, scope: !4494)
!4496 = !DILocation(line: 2676, column: 13, scope: !4494)
!4497 = !DILocation(line: 2676, column: 8, scope: !4488)
!4498 = !DILocation(line: 2677, column: 6, scope: !4494)
!4499 = !DILocation(line: 2680, column: 44, scope: !4488)
!4500 = !DILocation(line: 2680, column: 47, scope: !4488)
!4501 = !DILocation(line: 2680, column: 50, scope: !4488)
!4502 = !DILocation(line: 2680, column: 17, scope: !4488)
!4503 = !DILocation(line: 2680, column: 4, scope: !4488)
!4504 = !DILocation(line: 2680, column: 7, scope: !4488)
!4505 = !DILocation(line: 2680, column: 14, scope: !4488)
!4506 = !DILocation(line: 2681, column: 4, scope: !4488)
!4507 = !DILocation(line: 2683, column: 5, scope: !4473)
!4508 = !DILocation(line: 2685, column: 8, scope: !4509)
!4509 = distinct !DILexicalBlock(scope: !4376, file: !3, line: 2685, column: 7)
!4510 = !DILocation(line: 2685, column: 13, scope: !4509)
!4511 = !DILocation(line: 2685, column: 7, scope: !4376)
!4512 = !DILocalVariable(name: "sticky", scope: !4513, file: !3, line: 2690, type: !20)
!4513 = distinct !DILexicalBlock(scope: !4509, file: !3, line: 2686, column: 5)
!4514 = !DILocation(line: 2690, column: 21, scope: !4513)
!4515 = !DILocalVariable(name: "guard", scope: !4513, file: !3, line: 2691, type: !399)
!4516 = !DILocation(line: 2691, column: 12, scope: !4513)
!4517 = !DILocalVariable(name: "lsb", scope: !4513, file: !3, line: 2691, type: !399)
!4518 = !DILocation(line: 2691, column: 19, scope: !4513)
!4519 = !DILocation(line: 2693, column: 14, scope: !4513)
!4520 = !DILocation(line: 2694, column: 14, scope: !4521)
!4521 = distinct !DILexicalBlock(scope: !4513, file: !3, line: 2694, column: 7)
!4522 = !DILocation(line: 2694, column: 24, scope: !4521)
!4523 = !DILocation(line: 2694, column: 28, scope: !4521)
!4524 = !DILocation(line: 2694, column: 33, scope: !4521)
!4525 = !DILocation(line: 2694, column: 21, scope: !4521)
!4526 = !DILocation(line: 2694, column: 12, scope: !4521)
!4527 = !DILocation(line: 2694, column: 55, scope: !4528)
!4528 = distinct !DILexicalBlock(scope: !4521, file: !3, line: 2694, column: 7)
!4529 = !DILocation(line: 2694, column: 59, scope: !4528)
!4530 = !DILocation(line: 2694, column: 57, scope: !4528)
!4531 = !DILocation(line: 2694, column: 7, scope: !4521)
!4532 = !DILocation(line: 2695, column: 12, scope: !4528)
!4533 = !DILocation(line: 2695, column: 15, scope: !4528)
!4534 = !DILocation(line: 2695, column: 19, scope: !4528)
!4535 = !DILocation(line: 2695, column: 9, scope: !4528)
!4536 = !DILocation(line: 2695, column: 2, scope: !4528)
!4537 = !DILocation(line: 2694, column: 62, scope: !4528)
!4538 = !DILocation(line: 2694, column: 7, scope: !4528)
!4539 = distinct !{!4539, !4531, !4540}
!4540 = !DILocation(line: 2695, column: 20, scope: !4521)
!4541 = !DILocation(line: 2696, column: 17, scope: !4513)
!4542 = !DILocation(line: 2696, column: 20, scope: !4513)
!4543 = !DILocation(line: 2696, column: 24, scope: !4513)
!4544 = !DILocation(line: 2697, column: 29, scope: !4513)
!4545 = !DILocation(line: 2697, column: 33, scope: !4513)
!4546 = !DILocation(line: 2697, column: 38, scope: !4513)
!4547 = !DILocation(line: 2697, column: 24, scope: !4513)
!4548 = !DILocation(line: 2697, column: 61, scope: !4513)
!4549 = !DILocation(line: 2697, column: 3, scope: !4513)
!4550 = !DILocation(line: 2696, column: 14, scope: !4513)
!4551 = !DILocation(line: 2699, column: 37, scope: !4513)
!4552 = !DILocation(line: 2699, column: 40, scope: !4513)
!4553 = !DILocation(line: 2699, column: 44, scope: !4513)
!4554 = !DILocation(line: 2699, column: 15, scope: !4513)
!4555 = !DILocation(line: 2699, column: 13, scope: !4513)
!4556 = !DILocation(line: 2700, column: 35, scope: !4513)
!4557 = !DILocation(line: 2700, column: 38, scope: !4513)
!4558 = !DILocation(line: 2700, column: 13, scope: !4513)
!4559 = !DILocation(line: 2700, column: 11, scope: !4513)
!4560 = !DILocation(line: 2703, column: 18, scope: !4513)
!4561 = !DILocation(line: 2703, column: 24, scope: !4513)
!4562 = !DILocation(line: 2703, column: 28, scope: !4513)
!4563 = !DILocation(line: 2703, column: 35, scope: !4513)
!4564 = !DILocation(line: 2703, column: 38, scope: !4513)
!4565 = !DILocation(line: 0, scope: !4513)
!4566 = !DILocation(line: 2703, column: 16, scope: !4513)
!4567 = !DILocation(line: 2704, column: 5, scope: !4513)
!4568 = !DILocation(line: 2706, column: 7, scope: !4569)
!4569 = distinct !DILexicalBlock(scope: !4376, file: !3, line: 2706, column: 7)
!4570 = !DILocation(line: 2706, column: 7, scope: !4376)
!4571 = !DILocalVariable(name: "u", scope: !4572, file: !3, line: 2708, type: !8)
!4572 = distinct !DILexicalBlock(scope: !4569, file: !3, line: 2707, column: 5)
!4573 = !DILocation(line: 2708, column: 23, scope: !4572)
!4574 = !DILocation(line: 2709, column: 7, scope: !4572)
!4575 = !DILocation(line: 2710, column: 32, scope: !4572)
!4576 = !DILocation(line: 2710, column: 7, scope: !4572)
!4577 = !DILocation(line: 2712, column: 29, scope: !4578)
!4578 = distinct !DILexicalBlock(scope: !4572, file: !3, line: 2712, column: 11)
!4579 = !DILocation(line: 2712, column: 32, scope: !4578)
!4580 = !DILocation(line: 2712, column: 11, scope: !4578)
!4581 = !DILocation(line: 2712, column: 11, scope: !4572)
!4582 = !DILocation(line: 2717, column: 4, scope: !4583)
!4583 = distinct !DILexicalBlock(scope: !4578, file: !3, line: 2713, column: 2)
!4584 = !DILocation(line: 2718, column: 8, scope: !4585)
!4585 = distinct !DILexicalBlock(scope: !4583, file: !3, line: 2718, column: 8)
!4586 = !DILocation(line: 2718, column: 23, scope: !4585)
!4587 = !DILocation(line: 2718, column: 21, scope: !4585)
!4588 = !DILocation(line: 2718, column: 8, scope: !4583)
!4589 = !DILocation(line: 2719, column: 6, scope: !4585)
!4590 = !DILocation(line: 2720, column: 4, scope: !4583)
!4591 = !DILocation(line: 2720, column: 7, scope: !4583)
!4592 = !DILocation(line: 2720, column: 20, scope: !4583)
!4593 = !DILocation(line: 2721, column: 2, scope: !4583)
!4594 = !DILocation(line: 2722, column: 5, scope: !4572)
!4595 = !DILocation(line: 2725, column: 7, scope: !4596)
!4596 = distinct !DILexicalBlock(scope: !4376, file: !3, line: 2725, column: 7)
!4597 = !DILocation(line: 2725, column: 23, scope: !4596)
!4598 = !DILocation(line: 2725, column: 20, scope: !4596)
!4599 = !DILocation(line: 2725, column: 7, scope: !4376)
!4600 = !DILocation(line: 2726, column: 5, scope: !4596)
!4601 = !DILocation(line: 2729, column: 28, scope: !4376)
!4602 = !DILocation(line: 2729, column: 31, scope: !4376)
!4603 = !DILocation(line: 2729, column: 3, scope: !4376)
!4604 = !DILocation(line: 2730, column: 1, scope: !4376)
!4605 = distinct !DISubprogram(name: "real_value_truncate", scope: !3, file: !3, line: 2758, type: !4606, scopeLine: 2759, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !406)
!4606 = !DISubroutineType(types: !4607)
!4607 = !{!8, !226, !8}
!4608 = !DILocalVariable(name: "mode", arg: 1, scope: !4605, file: !3, line: 2758, type: !226)
!4609 = !DILocation(line: 2758, column: 40, scope: !4605)
!4610 = !DILocalVariable(name: "a", arg: 2, scope: !4605, file: !3, line: 2758, type: !8)
!4611 = !DILocation(line: 2758, column: 62, scope: !4605)
!4612 = !DILocalVariable(name: "r", scope: !4605, file: !3, line: 2760, type: !8)
!4613 = !DILocation(line: 2760, column: 19, scope: !4605)
!4614 = !DILocation(line: 2761, column: 21, scope: !4605)
!4615 = !DILocation(line: 2761, column: 3, scope: !4605)
!4616 = !DILocation(line: 2762, column: 3, scope: !4605)
!4617 = distinct !DISubprogram(name: "exact_real_truncate", scope: !3, file: !3, line: 2768, type: !4618, scopeLine: 2769, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !406)
!4618 = !DISubroutineType(types: !4619)
!4619 = !{!399, !226, !6}
!4620 = !DILocalVariable(name: "mode", arg: 1, scope: !4617, file: !3, line: 2768, type: !226)
!4621 = !DILocation(line: 2768, column: 40, scope: !4617)
!4622 = !DILocalVariable(name: "a", arg: 2, scope: !4617, file: !3, line: 2768, type: !6)
!4623 = !DILocation(line: 2768, column: 69, scope: !4617)
!4624 = !DILocalVariable(name: "fmt", scope: !4617, file: !3, line: 2770, type: !419)
!4625 = !DILocation(line: 2770, column: 29, scope: !4617)
!4626 = !DILocalVariable(name: "t", scope: !4617, file: !3, line: 2771, type: !8)
!4627 = !DILocation(line: 2771, column: 19, scope: !4617)
!4628 = !DILocalVariable(name: "emin2m1", scope: !4617, file: !3, line: 2772, type: !398)
!4629 = !DILocation(line: 2772, column: 7, scope: !4617)
!4630 = !DILocation(line: 2774, column: 9, scope: !4617)
!4631 = !DILocation(line: 2774, column: 7, scope: !4617)
!4632 = !DILocation(line: 2775, column: 3, scope: !4617)
!4633 = !DILocation(line: 2778, column: 13, scope: !4617)
!4634 = !DILocation(line: 2778, column: 18, scope: !4617)
!4635 = !DILocation(line: 2778, column: 23, scope: !4617)
!4636 = !DILocation(line: 2778, column: 11, scope: !4617)
!4637 = !DILocation(line: 2779, column: 7, scope: !4638)
!4638 = distinct !DILexicalBlock(scope: !4617, file: !3, line: 2779, column: 7)
!4639 = !DILocation(line: 2779, column: 23, scope: !4638)
!4640 = !DILocation(line: 2779, column: 20, scope: !4638)
!4641 = !DILocation(line: 2779, column: 7, scope: !4617)
!4642 = !DILocation(line: 2780, column: 5, scope: !4638)
!4643 = !DILocation(line: 2783, column: 21, scope: !4617)
!4644 = !DILocation(line: 2783, column: 27, scope: !4617)
!4645 = !DILocation(line: 2783, column: 3, scope: !4617)
!4646 = !DILocation(line: 2784, column: 30, scope: !4617)
!4647 = !DILocation(line: 2784, column: 10, scope: !4617)
!4648 = !DILocation(line: 2784, column: 3, scope: !4617)
!4649 = !DILocation(line: 2785, column: 1, scope: !4617)
!4650 = distinct !DISubprogram(name: "real_to_target_fmt", scope: !3, file: !3, line: 2794, type: !4651, scopeLine: 2796, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !406)
!4651 = !DISubroutineType(types: !4652)
!4652 = !{!421, !420, !6, !419}
!4653 = !DILocalVariable(name: "buf", arg: 1, scope: !4650, file: !3, line: 2794, type: !420)
!4654 = !DILocation(line: 2794, column: 27, scope: !4650)
!4655 = !DILocalVariable(name: "r_orig", arg: 2, scope: !4650, file: !3, line: 2794, type: !6)
!4656 = !DILocation(line: 2794, column: 55, scope: !4650)
!4657 = !DILocalVariable(name: "fmt", arg: 3, scope: !4650, file: !3, line: 2795, type: !419)
!4658 = !DILocation(line: 2795, column: 33, scope: !4650)
!4659 = !DILocalVariable(name: "r", scope: !4650, file: !3, line: 2797, type: !8)
!4660 = !DILocation(line: 2797, column: 19, scope: !4650)
!4661 = !DILocalVariable(name: "buf1", scope: !4650, file: !3, line: 2798, type: !421)
!4662 = !DILocation(line: 2798, column: 8, scope: !4650)
!4663 = !DILocation(line: 2800, column: 8, scope: !4650)
!4664 = !DILocation(line: 2800, column: 7, scope: !4650)
!4665 = !DILocation(line: 2801, column: 21, scope: !4650)
!4666 = !DILocation(line: 2801, column: 3, scope: !4650)
!4667 = !DILocation(line: 2803, column: 8, scope: !4668)
!4668 = distinct !DILexicalBlock(scope: !4650, file: !3, line: 2803, column: 7)
!4669 = !DILocation(line: 2803, column: 7, scope: !4650)
!4670 = !DILocation(line: 2804, column: 9, scope: !4668)
!4671 = !DILocation(line: 2804, column: 5, scope: !4668)
!4672 = !DILocation(line: 2805, column: 5, scope: !4650)
!4673 = !DILocation(line: 2805, column: 10, scope: !4650)
!4674 = !DILocation(line: 2805, column: 19, scope: !4650)
!4675 = !DILocation(line: 2805, column: 24, scope: !4650)
!4676 = !DILocation(line: 2805, column: 3, scope: !4650)
!4677 = !DILocation(line: 2807, column: 11, scope: !4650)
!4678 = !DILocation(line: 2807, column: 10, scope: !4650)
!4679 = !DILocation(line: 2807, column: 3, scope: !4650)
!4680 = distinct !DISubprogram(name: "real_to_target", scope: !3, file: !3, line: 2813, type: !4681, scopeLine: 2814, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !406)
!4681 = !DISubroutineType(types: !4682)
!4682 = !{!421, !420, !6, !226}
!4683 = !DILocalVariable(name: "buf", arg: 1, scope: !4680, file: !3, line: 2813, type: !420)
!4684 = !DILocation(line: 2813, column: 23, scope: !4680)
!4685 = !DILocalVariable(name: "r", arg: 2, scope: !4680, file: !3, line: 2813, type: !6)
!4686 = !DILocation(line: 2813, column: 51, scope: !4680)
!4687 = !DILocalVariable(name: "mode", arg: 3, scope: !4680, file: !3, line: 2813, type: !226)
!4688 = !DILocation(line: 2813, column: 72, scope: !4680)
!4689 = !DILocalVariable(name: "fmt", scope: !4680, file: !3, line: 2815, type: !419)
!4690 = !DILocation(line: 2815, column: 29, scope: !4680)
!4691 = !DILocation(line: 2817, column: 9, scope: !4680)
!4692 = !DILocation(line: 2817, column: 7, scope: !4680)
!4693 = !DILocation(line: 2818, column: 3, scope: !4680)
!4694 = !DILocation(line: 2820, column: 30, scope: !4680)
!4695 = !DILocation(line: 2820, column: 35, scope: !4680)
!4696 = !DILocation(line: 2820, column: 38, scope: !4680)
!4697 = !DILocation(line: 2820, column: 10, scope: !4680)
!4698 = !DILocation(line: 2820, column: 3, scope: !4680)
!4699 = distinct !DISubprogram(name: "real_from_target_fmt", scope: !3, file: !3, line: 2828, type: !4700, scopeLine: 2830, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !406)
!4700 = !DISubroutineType(types: !4701)
!4701 = !{null, !426, !427, !419}
!4702 = !DILocalVariable(name: "r", arg: 1, scope: !4699, file: !3, line: 2828, type: !426)
!4703 = !DILocation(line: 2828, column: 40, scope: !4699)
!4704 = !DILocalVariable(name: "buf", arg: 2, scope: !4699, file: !3, line: 2828, type: !427)
!4705 = !DILocation(line: 2828, column: 55, scope: !4699)
!4706 = !DILocalVariable(name: "fmt", arg: 3, scope: !4699, file: !3, line: 2829, type: !419)
!4707 = !DILocation(line: 2829, column: 35, scope: !4699)
!4708 = !DILocation(line: 2831, column: 5, scope: !4699)
!4709 = !DILocation(line: 2831, column: 10, scope: !4699)
!4710 = !DILocation(line: 2831, column: 19, scope: !4699)
!4711 = !DILocation(line: 2831, column: 24, scope: !4699)
!4712 = !DILocation(line: 2831, column: 27, scope: !4699)
!4713 = !DILocation(line: 2831, column: 3, scope: !4699)
!4714 = !DILocation(line: 2832, column: 1, scope: !4699)
!4715 = distinct !DISubprogram(name: "real_from_target", scope: !3, file: !3, line: 2837, type: !4716, scopeLine: 2838, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !406)
!4716 = !DISubroutineType(types: !4717)
!4717 = !{null, !426, !427, !226}
!4718 = !DILocalVariable(name: "r", arg: 1, scope: !4715, file: !3, line: 2837, type: !426)
!4719 = !DILocation(line: 2837, column: 36, scope: !4715)
!4720 = !DILocalVariable(name: "buf", arg: 2, scope: !4715, file: !3, line: 2837, type: !427)
!4721 = !DILocation(line: 2837, column: 51, scope: !4715)
!4722 = !DILocalVariable(name: "mode", arg: 3, scope: !4715, file: !3, line: 2837, type: !226)
!4723 = !DILocation(line: 2837, column: 74, scope: !4715)
!4724 = !DILocalVariable(name: "fmt", scope: !4715, file: !3, line: 2839, type: !419)
!4725 = !DILocation(line: 2839, column: 29, scope: !4715)
!4726 = !DILocation(line: 2841, column: 9, scope: !4715)
!4727 = !DILocation(line: 2841, column: 7, scope: !4715)
!4728 = !DILocation(line: 2842, column: 3, scope: !4715)
!4729 = !DILocation(line: 2844, column: 5, scope: !4715)
!4730 = !DILocation(line: 2844, column: 10, scope: !4715)
!4731 = !DILocation(line: 2844, column: 19, scope: !4715)
!4732 = !DILocation(line: 2844, column: 24, scope: !4715)
!4733 = !DILocation(line: 2844, column: 27, scope: !4715)
!4734 = !DILocation(line: 2844, column: 3, scope: !4715)
!4735 = !DILocation(line: 2845, column: 1, scope: !4715)
!4736 = distinct !DISubprogram(name: "significand_size", scope: !3, file: !3, line: 2852, type: !4737, scopeLine: 2853, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !406)
!4737 = !DISubroutineType(types: !4738)
!4738 = !{!398, !226}
!4739 = !DILocalVariable(name: "mode", arg: 1, scope: !4736, file: !3, line: 2852, type: !226)
!4740 = !DILocation(line: 2852, column: 37, scope: !4736)
!4741 = !DILocalVariable(name: "fmt", scope: !4736, file: !3, line: 2854, type: !419)
!4742 = !DILocation(line: 2854, column: 29, scope: !4736)
!4743 = !DILocation(line: 2856, column: 9, scope: !4736)
!4744 = !DILocation(line: 2856, column: 7, scope: !4736)
!4745 = !DILocation(line: 2857, column: 7, scope: !4746)
!4746 = distinct !DILexicalBlock(scope: !4736, file: !3, line: 2857, column: 7)
!4747 = !DILocation(line: 2857, column: 11, scope: !4746)
!4748 = !DILocation(line: 2857, column: 7, scope: !4736)
!4749 = !DILocation(line: 2858, column: 5, scope: !4746)
!4750 = !DILocation(line: 2860, column: 7, scope: !4751)
!4751 = distinct !DILexicalBlock(scope: !4736, file: !3, line: 2860, column: 7)
!4752 = !DILocation(line: 2860, column: 12, scope: !4751)
!4753 = !DILocation(line: 2860, column: 14, scope: !4751)
!4754 = !DILocation(line: 2860, column: 7, scope: !4736)
!4755 = !DILocalVariable(name: "log2_10", scope: !4756, file: !3, line: 2866, type: !4757)
!4756 = distinct !DILexicalBlock(scope: !4751, file: !3, line: 2861, column: 5)
!4757 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!4758 = !DILocation(line: 2866, column: 14, scope: !4756)
!4759 = !DILocation(line: 2867, column: 14, scope: !4756)
!4760 = !DILocation(line: 2867, column: 19, scope: !4756)
!4761 = !DILocation(line: 2867, column: 23, scope: !4756)
!4762 = !DILocation(line: 2867, column: 21, scope: !4756)
!4763 = !DILocation(line: 2867, column: 7, scope: !4756)
!4764 = !DILocation(line: 2869, column: 10, scope: !4736)
!4765 = !DILocation(line: 2869, column: 15, scope: !4736)
!4766 = !DILocation(line: 2869, column: 3, scope: !4736)
!4767 = !DILocation(line: 2870, column: 1, scope: !4736)
!4768 = distinct !DISubprogram(name: "real_hash", scope: !3, file: !3, line: 2877, type: !4769, scopeLine: 2878, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !406)
!4769 = !DISubroutineType(types: !4770)
!4770 = !{!12, !6}
!4771 = !DILocalVariable(name: "r", arg: 1, scope: !4768, file: !3, line: 2877, type: !6)
!4772 = !DILocation(line: 2877, column: 35, scope: !4768)
!4773 = !DILocalVariable(name: "h", scope: !4768, file: !3, line: 2879, type: !12)
!4774 = !DILocation(line: 2879, column: 16, scope: !4768)
!4775 = !DILocalVariable(name: "i", scope: !4768, file: !3, line: 2880, type: !2187)
!4776 = !DILocation(line: 2880, column: 10, scope: !4768)
!4777 = !DILocation(line: 2882, column: 7, scope: !4768)
!4778 = !DILocation(line: 2882, column: 10, scope: !4768)
!4779 = !DILocation(line: 2882, column: 16, scope: !4768)
!4780 = !DILocation(line: 2882, column: 19, scope: !4768)
!4781 = !DILocation(line: 2882, column: 24, scope: !4768)
!4782 = !DILocation(line: 2882, column: 13, scope: !4768)
!4783 = !DILocation(line: 2882, column: 5, scope: !4768)
!4784 = !DILocation(line: 2883, column: 11, scope: !4768)
!4785 = !DILocation(line: 2883, column: 14, scope: !4768)
!4786 = !DILocation(line: 2883, column: 3, scope: !4768)
!4787 = !DILocation(line: 2887, column: 14, scope: !4788)
!4788 = distinct !DILexicalBlock(scope: !4768, file: !3, line: 2884, column: 5)
!4789 = !DILocation(line: 2887, column: 7, scope: !4788)
!4790 = !DILocation(line: 2890, column: 12, scope: !4788)
!4791 = !DILocation(line: 2890, column: 25, scope: !4788)
!4792 = !DILocation(line: 2890, column: 9, scope: !4788)
!4793 = !DILocation(line: 2891, column: 7, scope: !4788)
!4794 = !DILocation(line: 2894, column: 11, scope: !4795)
!4795 = distinct !DILexicalBlock(scope: !4788, file: !3, line: 2894, column: 11)
!4796 = !DILocation(line: 2894, column: 14, scope: !4795)
!4797 = !DILocation(line: 2894, column: 11, scope: !4788)
!4798 = !DILocation(line: 2895, column: 4, scope: !4795)
!4799 = !DILocation(line: 2895, column: 2, scope: !4795)
!4800 = !DILocation(line: 2896, column: 11, scope: !4801)
!4801 = distinct !DILexicalBlock(scope: !4788, file: !3, line: 2896, column: 11)
!4802 = !DILocation(line: 2896, column: 14, scope: !4801)
!4803 = !DILocation(line: 2896, column: 11, scope: !4788)
!4804 = !DILocation(line: 2897, column: 9, scope: !4801)
!4805 = !DILocation(line: 2897, column: 2, scope: !4801)
!4806 = !DILocation(line: 2898, column: 7, scope: !4788)
!4807 = !DILocation(line: 2901, column: 7, scope: !4788)
!4808 = !DILocation(line: 2902, column: 5, scope: !4788)
!4809 = !DILocation(line: 2905, column: 12, scope: !4810)
!4810 = distinct !DILexicalBlock(scope: !4811, file: !3, line: 2905, column: 5)
!4811 = distinct !DILexicalBlock(scope: !4768, file: !3, line: 2904, column: 7)
!4812 = !DILocation(line: 2905, column: 10, scope: !4810)
!4813 = !DILocation(line: 2905, column: 17, scope: !4814)
!4814 = distinct !DILexicalBlock(scope: !4810, file: !3, line: 2905, column: 5)
!4815 = !DILocation(line: 2905, column: 19, scope: !4814)
!4816 = !DILocation(line: 2905, column: 5, scope: !4810)
!4817 = !DILocalVariable(name: "s", scope: !4818, file: !3, line: 2907, type: !20)
!4818 = distinct !DILexicalBlock(scope: !4814, file: !3, line: 2906, column: 7)
!4819 = !DILocation(line: 2907, column: 16, scope: !4818)
!4820 = !DILocation(line: 2907, column: 20, scope: !4818)
!4821 = !DILocation(line: 2907, column: 23, scope: !4818)
!4822 = !DILocation(line: 2907, column: 27, scope: !4818)
!4823 = !DILocation(line: 2908, column: 7, scope: !4818)
!4824 = !DILocation(line: 2908, column: 12, scope: !4818)
!4825 = !DILocation(line: 2908, column: 14, scope: !4818)
!4826 = !DILocation(line: 2908, column: 9, scope: !4818)
!4827 = !DILocation(line: 2908, column: 4, scope: !4818)
!4828 = !DILocation(line: 2909, column: 7, scope: !4818)
!4829 = !DILocation(line: 2905, column: 28, scope: !4814)
!4830 = !DILocation(line: 2905, column: 5, scope: !4814)
!4831 = distinct !{!4831, !4816, !4832}
!4832 = !DILocation(line: 2909, column: 7, scope: !4810)
!4833 = !DILocation(line: 2914, column: 10, scope: !4768)
!4834 = !DILocation(line: 2914, column: 3, scope: !4768)
!4835 = !DILocation(line: 2915, column: 1, scope: !4768)
!4836 = distinct !DISubprogram(name: "encode_ieee_single", scope: !3, file: !3, line: 2925, type: !417, scopeLine: 2927, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!4837 = !DILocalVariable(name: "fmt", arg: 1, scope: !4836, file: !3, line: 2925, type: !419)
!4838 = !DILocation(line: 2925, column: 47, scope: !4836)
!4839 = !DILocalVariable(name: "buf", arg: 2, scope: !4836, file: !3, line: 2925, type: !420)
!4840 = !DILocation(line: 2925, column: 58, scope: !4836)
!4841 = !DILocalVariable(name: "r", arg: 3, scope: !4836, file: !3, line: 2926, type: !6)
!4842 = !DILocation(line: 2926, column: 30, scope: !4836)
!4843 = !DILocalVariable(name: "image", scope: !4836, file: !3, line: 2928, type: !20)
!4844 = !DILocation(line: 2928, column: 17, scope: !4836)
!4845 = !DILocalVariable(name: "sig", scope: !4836, file: !3, line: 2928, type: !20)
!4846 = !DILocation(line: 2928, column: 24, scope: !4836)
!4847 = !DILocalVariable(name: "exp", scope: !4836, file: !3, line: 2928, type: !20)
!4848 = !DILocation(line: 2928, column: 29, scope: !4836)
!4849 = !DILocalVariable(name: "sign", scope: !4836, file: !3, line: 2929, type: !20)
!4850 = !DILocation(line: 2929, column: 17, scope: !4836)
!4851 = !DILocation(line: 2929, column: 24, scope: !4836)
!4852 = !DILocation(line: 2929, column: 27, scope: !4836)
!4853 = !DILocalVariable(name: "denormal", scope: !4836, file: !3, line: 2930, type: !399)
!4854 = !DILocation(line: 2930, column: 8, scope: !4836)
!4855 = !DILocation(line: 2930, column: 20, scope: !4836)
!4856 = !DILocation(line: 2930, column: 23, scope: !4836)
!4857 = !DILocation(line: 2930, column: 36, scope: !4836)
!4858 = !DILocation(line: 2930, column: 47, scope: !4836)
!4859 = !DILocation(line: 2930, column: 19, scope: !4836)
!4860 = !DILocation(line: 2932, column: 11, scope: !4836)
!4861 = !DILocation(line: 2932, column: 16, scope: !4836)
!4862 = !DILocation(line: 2932, column: 9, scope: !4836)
!4863 = !DILocation(line: 2933, column: 10, scope: !4836)
!4864 = !DILocation(line: 2933, column: 13, scope: !4836)
!4865 = !DILocation(line: 2933, column: 26, scope: !4836)
!4866 = !DILocation(line: 2933, column: 56, scope: !4836)
!4867 = !DILocation(line: 2933, column: 7, scope: !4836)
!4868 = !DILocation(line: 2935, column: 11, scope: !4836)
!4869 = !DILocation(line: 2935, column: 14, scope: !4836)
!4870 = !DILocation(line: 2935, column: 3, scope: !4836)
!4871 = !DILocation(line: 2938, column: 7, scope: !4872)
!4872 = distinct !DILexicalBlock(scope: !4836, file: !3, line: 2936, column: 5)
!4873 = !DILocation(line: 2941, column: 11, scope: !4874)
!4874 = distinct !DILexicalBlock(scope: !4872, file: !3, line: 2941, column: 11)
!4875 = !DILocation(line: 2941, column: 16, scope: !4874)
!4876 = !DILocation(line: 2941, column: 11, scope: !4872)
!4877 = !DILocation(line: 2942, column: 8, scope: !4874)
!4878 = !DILocation(line: 2942, column: 2, scope: !4874)
!4879 = !DILocation(line: 2944, column: 8, scope: !4874)
!4880 = !DILocation(line: 2945, column: 7, scope: !4872)
!4881 = !DILocation(line: 2948, column: 11, scope: !4882)
!4882 = distinct !DILexicalBlock(scope: !4872, file: !3, line: 2948, column: 11)
!4883 = !DILocation(line: 2948, column: 16, scope: !4882)
!4884 = !DILocation(line: 2948, column: 11, scope: !4872)
!4885 = !DILocation(line: 2950, column: 8, scope: !4886)
!4886 = distinct !DILexicalBlock(scope: !4887, file: !3, line: 2950, column: 8)
!4887 = distinct !DILexicalBlock(scope: !4882, file: !3, line: 2949, column: 2)
!4888 = !DILocation(line: 2950, column: 11, scope: !4886)
!4889 = !DILocation(line: 2950, column: 8, scope: !4887)
!4890 = !DILocation(line: 2951, column: 13, scope: !4886)
!4891 = !DILocation(line: 2951, column: 18, scope: !4886)
!4892 = !DILocation(line: 2951, column: 12, scope: !4886)
!4893 = !DILocation(line: 2951, column: 10, scope: !4886)
!4894 = !DILocation(line: 2951, column: 6, scope: !4886)
!4895 = !DILocation(line: 2952, column: 8, scope: !4896)
!4896 = distinct !DILexicalBlock(scope: !4887, file: !3, line: 2952, column: 8)
!4897 = !DILocation(line: 2952, column: 11, scope: !4896)
!4898 = !DILocation(line: 2952, column: 25, scope: !4896)
!4899 = !DILocation(line: 2952, column: 30, scope: !4896)
!4900 = !DILocation(line: 2952, column: 22, scope: !4896)
!4901 = !DILocation(line: 2952, column: 8, scope: !4887)
!4902 = !DILocation(line: 2953, column: 10, scope: !4896)
!4903 = !DILocation(line: 2953, column: 6, scope: !4896)
!4904 = !DILocation(line: 2955, column: 10, scope: !4896)
!4905 = !DILocation(line: 2956, column: 8, scope: !4906)
!4906 = distinct !DILexicalBlock(scope: !4887, file: !3, line: 2956, column: 8)
!4907 = !DILocation(line: 2956, column: 12, scope: !4906)
!4908 = !DILocation(line: 2956, column: 8, scope: !4887)
!4909 = !DILocation(line: 2957, column: 10, scope: !4906)
!4910 = !DILocation(line: 2957, column: 6, scope: !4906)
!4911 = !DILocation(line: 2959, column: 10, scope: !4887)
!4912 = !DILocation(line: 2960, column: 13, scope: !4887)
!4913 = !DILocation(line: 2960, column: 10, scope: !4887)
!4914 = !DILocation(line: 2961, column: 2, scope: !4887)
!4915 = !DILocation(line: 2963, column: 8, scope: !4882)
!4916 = !DILocation(line: 2964, column: 7, scope: !4872)
!4917 = !DILocation(line: 2970, column: 11, scope: !4918)
!4918 = distinct !DILexicalBlock(scope: !4872, file: !3, line: 2970, column: 11)
!4919 = !DILocation(line: 2970, column: 11, scope: !4872)
!4920 = !DILocation(line: 2971, column: 6, scope: !4918)
!4921 = !DILocation(line: 2971, column: 2, scope: !4918)
!4922 = !DILocation(line: 2973, column: 13, scope: !4918)
!4923 = !DILocation(line: 2973, column: 26, scope: !4918)
!4924 = !DILocation(line: 2973, column: 32, scope: !4918)
!4925 = !DILocation(line: 2973, column: 11, scope: !4918)
!4926 = !DILocation(line: 2974, column: 16, scope: !4872)
!4927 = !DILocation(line: 2974, column: 20, scope: !4872)
!4928 = !DILocation(line: 2974, column: 13, scope: !4872)
!4929 = !DILocation(line: 2975, column: 16, scope: !4872)
!4930 = !DILocation(line: 2975, column: 13, scope: !4872)
!4931 = !DILocation(line: 2976, column: 7, scope: !4872)
!4932 = !DILocation(line: 2979, column: 7, scope: !4872)
!4933 = !DILocation(line: 2980, column: 5, scope: !4872)
!4934 = !DILocation(line: 2982, column: 12, scope: !4836)
!4935 = !DILocation(line: 2982, column: 3, scope: !4836)
!4936 = !DILocation(line: 2982, column: 10, scope: !4836)
!4937 = !DILocation(line: 2983, column: 1, scope: !4836)
!4938 = distinct !DISubprogram(name: "decode_ieee_single", scope: !3, file: !3, line: 2986, type: !424, scopeLine: 2988, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!4939 = !DILocalVariable(name: "fmt", arg: 1, scope: !4938, file: !3, line: 2986, type: !419)
!4940 = !DILocation(line: 2986, column: 47, scope: !4938)
!4941 = !DILocalVariable(name: "r", arg: 2, scope: !4938, file: !3, line: 2986, type: !426)
!4942 = !DILocation(line: 2986, column: 69, scope: !4938)
!4943 = !DILocalVariable(name: "buf", arg: 3, scope: !4938, file: !3, line: 2987, type: !427)
!4944 = !DILocation(line: 2987, column: 19, scope: !4938)
!4945 = !DILocalVariable(name: "image", scope: !4938, file: !3, line: 2989, type: !20)
!4946 = !DILocation(line: 2989, column: 17, scope: !4938)
!4947 = !DILocation(line: 2989, column: 25, scope: !4938)
!4948 = !DILocation(line: 2989, column: 32, scope: !4938)
!4949 = !DILocalVariable(name: "sign", scope: !4938, file: !3, line: 2990, type: !399)
!4950 = !DILocation(line: 2990, column: 8, scope: !4938)
!4951 = !DILocation(line: 2990, column: 16, scope: !4938)
!4952 = !DILocation(line: 2990, column: 22, scope: !4938)
!4953 = !DILocation(line: 2990, column: 29, scope: !4938)
!4954 = !DILocation(line: 2990, column: 15, scope: !4938)
!4955 = !DILocalVariable(name: "exp", scope: !4938, file: !3, line: 2991, type: !398)
!4956 = !DILocation(line: 2991, column: 7, scope: !4938)
!4957 = !DILocation(line: 2991, column: 14, scope: !4938)
!4958 = !DILocation(line: 2991, column: 20, scope: !4938)
!4959 = !DILocation(line: 2991, column: 27, scope: !4938)
!4960 = !DILocation(line: 2991, column: 13, scope: !4938)
!4961 = !DILocation(line: 2993, column: 11, scope: !4938)
!4962 = !DILocation(line: 2993, column: 3, scope: !4938)
!4963 = !DILocation(line: 2994, column: 9, scope: !4938)
!4964 = !DILocation(line: 2995, column: 9, scope: !4938)
!4965 = !DILocation(line: 2997, column: 7, scope: !4966)
!4966 = distinct !DILexicalBlock(scope: !4938, file: !3, line: 2997, column: 7)
!4967 = !DILocation(line: 2997, column: 11, scope: !4966)
!4968 = !DILocation(line: 2997, column: 7, scope: !4938)
!4969 = !DILocation(line: 2999, column: 11, scope: !4970)
!4970 = distinct !DILexicalBlock(scope: !4971, file: !3, line: 2999, column: 11)
!4971 = distinct !DILexicalBlock(scope: !4966, file: !3, line: 2998, column: 5)
!4972 = !DILocation(line: 2999, column: 17, scope: !4970)
!4973 = !DILocation(line: 2999, column: 20, scope: !4970)
!4974 = !DILocation(line: 2999, column: 25, scope: !4970)
!4975 = !DILocation(line: 2999, column: 11, scope: !4971)
!4976 = !DILocation(line: 3001, column: 4, scope: !4977)
!4977 = distinct !DILexicalBlock(scope: !4970, file: !3, line: 3000, column: 2)
!4978 = !DILocation(line: 3001, column: 7, scope: !4977)
!4979 = !DILocation(line: 3001, column: 10, scope: !4977)
!4980 = !DILocation(line: 3002, column: 14, scope: !4977)
!4981 = !DILocation(line: 3002, column: 4, scope: !4977)
!4982 = !DILocation(line: 3002, column: 7, scope: !4977)
!4983 = !DILocation(line: 3002, column: 12, scope: !4977)
!4984 = !DILocation(line: 3003, column: 4, scope: !4977)
!4985 = !DILocation(line: 3004, column: 22, scope: !4977)
!4986 = !DILocation(line: 3004, column: 28, scope: !4977)
!4987 = !DILocation(line: 3004, column: 4, scope: !4977)
!4988 = !DILocation(line: 3004, column: 7, scope: !4977)
!4989 = !DILocation(line: 3004, column: 20, scope: !4977)
!4990 = !DILocation(line: 3005, column: 15, scope: !4977)
!4991 = !DILocation(line: 3005, column: 4, scope: !4977)
!4992 = !DILocation(line: 3006, column: 2, scope: !4977)
!4993 = !DILocation(line: 3007, column: 16, scope: !4994)
!4994 = distinct !DILexicalBlock(scope: !4970, file: !3, line: 3007, column: 16)
!4995 = !DILocation(line: 3007, column: 21, scope: !4994)
!4996 = !DILocation(line: 3007, column: 16, scope: !4970)
!4997 = !DILocation(line: 3008, column: 12, scope: !4994)
!4998 = !DILocation(line: 3008, column: 2, scope: !4994)
!4999 = !DILocation(line: 3008, column: 5, scope: !4994)
!5000 = !DILocation(line: 3008, column: 10, scope: !4994)
!5001 = !DILocation(line: 3009, column: 5, scope: !4971)
!5002 = !DILocation(line: 3010, column: 12, scope: !5003)
!5003 = distinct !DILexicalBlock(scope: !4966, file: !3, line: 3010, column: 12)
!5004 = !DILocation(line: 3010, column: 16, scope: !5003)
!5005 = !DILocation(line: 3010, column: 23, scope: !5003)
!5006 = !DILocation(line: 3010, column: 27, scope: !5003)
!5007 = !DILocation(line: 3010, column: 32, scope: !5003)
!5008 = !DILocation(line: 3010, column: 41, scope: !5003)
!5009 = !DILocation(line: 3010, column: 44, scope: !5003)
!5010 = !DILocation(line: 3010, column: 49, scope: !5003)
!5011 = !DILocation(line: 3010, column: 12, scope: !4966)
!5012 = !DILocation(line: 3012, column: 11, scope: !5013)
!5013 = distinct !DILexicalBlock(scope: !5014, file: !3, line: 3012, column: 11)
!5014 = distinct !DILexicalBlock(scope: !5003, file: !3, line: 3011, column: 5)
!5015 = !DILocation(line: 3012, column: 11, scope: !5014)
!5016 = !DILocation(line: 3014, column: 4, scope: !5017)
!5017 = distinct !DILexicalBlock(scope: !5013, file: !3, line: 3013, column: 2)
!5018 = !DILocation(line: 3014, column: 7, scope: !5017)
!5019 = !DILocation(line: 3014, column: 10, scope: !5017)
!5020 = !DILocation(line: 3015, column: 14, scope: !5017)
!5021 = !DILocation(line: 3015, column: 4, scope: !5017)
!5022 = !DILocation(line: 3015, column: 7, scope: !5017)
!5023 = !DILocation(line: 3015, column: 12, scope: !5017)
!5024 = !DILocation(line: 3016, column: 23, scope: !5017)
!5025 = !DILocation(line: 3016, column: 29, scope: !5017)
!5026 = !DILocation(line: 3016, column: 58, scope: !5017)
!5027 = !DILocation(line: 3017, column: 9, scope: !5017)
!5028 = !DILocation(line: 3017, column: 14, scope: !5017)
!5029 = !DILocation(line: 3017, column: 7, scope: !5017)
!5030 = !DILocation(line: 3016, column: 20, scope: !5017)
!5031 = !DILocation(line: 3016, column: 4, scope: !5017)
!5032 = !DILocation(line: 3016, column: 7, scope: !5017)
!5033 = !DILocation(line: 3016, column: 18, scope: !5017)
!5034 = !DILocation(line: 3018, column: 22, scope: !5017)
!5035 = !DILocation(line: 3018, column: 4, scope: !5017)
!5036 = !DILocation(line: 3018, column: 7, scope: !5017)
!5037 = !DILocation(line: 3018, column: 20, scope: !5017)
!5038 = !DILocation(line: 3019, column: 2, scope: !5017)
!5039 = !DILocation(line: 3022, column: 4, scope: !5040)
!5040 = distinct !DILexicalBlock(scope: !5013, file: !3, line: 3021, column: 2)
!5041 = !DILocation(line: 3022, column: 7, scope: !5040)
!5042 = !DILocation(line: 3022, column: 10, scope: !5040)
!5043 = !DILocation(line: 3023, column: 14, scope: !5040)
!5044 = !DILocation(line: 3023, column: 4, scope: !5040)
!5045 = !DILocation(line: 3023, column: 7, scope: !5040)
!5046 = !DILocation(line: 3023, column: 12, scope: !5040)
!5047 = !DILocation(line: 3025, column: 5, scope: !5014)
!5048 = !DILocation(line: 3028, column: 7, scope: !5049)
!5049 = distinct !DILexicalBlock(scope: !5003, file: !3, line: 3027, column: 5)
!5050 = !DILocation(line: 3028, column: 10, scope: !5049)
!5051 = !DILocation(line: 3028, column: 13, scope: !5049)
!5052 = !DILocation(line: 3029, column: 17, scope: !5049)
!5053 = !DILocation(line: 3029, column: 7, scope: !5049)
!5054 = !DILocation(line: 3029, column: 10, scope: !5049)
!5055 = !DILocation(line: 3029, column: 15, scope: !5049)
!5056 = !DILocation(line: 3030, column: 7, scope: !5049)
!5057 = !DILocation(line: 3031, column: 25, scope: !5049)
!5058 = !DILocation(line: 3031, column: 31, scope: !5049)
!5059 = !DILocation(line: 3031, column: 7, scope: !5049)
!5060 = !DILocation(line: 3031, column: 10, scope: !5049)
!5061 = !DILocation(line: 3031, column: 23, scope: !5049)
!5062 = !DILocation(line: 3033, column: 1, scope: !4938)
!5063 = distinct !DISubprogram(name: "encode_ieee_double", scope: !3, file: !3, line: 3138, type: !417, scopeLine: 3140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!5064 = !DILocalVariable(name: "fmt", arg: 1, scope: !5063, file: !3, line: 3138, type: !419)
!5065 = !DILocation(line: 3138, column: 47, scope: !5063)
!5066 = !DILocalVariable(name: "buf", arg: 2, scope: !5063, file: !3, line: 3138, type: !420)
!5067 = !DILocation(line: 3138, column: 58, scope: !5063)
!5068 = !DILocalVariable(name: "r", arg: 3, scope: !5063, file: !3, line: 3139, type: !6)
!5069 = !DILocation(line: 3139, column: 30, scope: !5063)
!5070 = !DILocalVariable(name: "image_lo", scope: !5063, file: !3, line: 3141, type: !20)
!5071 = !DILocation(line: 3141, column: 17, scope: !5063)
!5072 = !DILocalVariable(name: "image_hi", scope: !5063, file: !3, line: 3141, type: !20)
!5073 = !DILocation(line: 3141, column: 27, scope: !5063)
!5074 = !DILocalVariable(name: "sig_lo", scope: !5063, file: !3, line: 3141, type: !20)
!5075 = !DILocation(line: 3141, column: 37, scope: !5063)
!5076 = !DILocalVariable(name: "sig_hi", scope: !5063, file: !3, line: 3141, type: !20)
!5077 = !DILocation(line: 3141, column: 45, scope: !5063)
!5078 = !DILocalVariable(name: "exp", scope: !5063, file: !3, line: 3141, type: !20)
!5079 = !DILocation(line: 3141, column: 53, scope: !5063)
!5080 = !DILocalVariable(name: "denormal", scope: !5063, file: !3, line: 3142, type: !399)
!5081 = !DILocation(line: 3142, column: 8, scope: !5063)
!5082 = !DILocation(line: 3142, column: 20, scope: !5063)
!5083 = !DILocation(line: 3142, column: 23, scope: !5063)
!5084 = !DILocation(line: 3142, column: 36, scope: !5063)
!5085 = !DILocation(line: 3142, column: 47, scope: !5063)
!5086 = !DILocation(line: 3142, column: 19, scope: !5063)
!5087 = !DILocation(line: 3144, column: 14, scope: !5063)
!5088 = !DILocation(line: 3144, column: 17, scope: !5063)
!5089 = !DILocation(line: 3144, column: 22, scope: !5063)
!5090 = !DILocation(line: 3144, column: 12, scope: !5063)
!5091 = !DILocation(line: 3145, column: 12, scope: !5063)
!5092 = !DILocation(line: 3149, column: 16, scope: !5093)
!5093 = distinct !DILexicalBlock(scope: !5094, file: !3, line: 3148, column: 5)
!5094 = distinct !DILexicalBlock(scope: !5063, file: !3, line: 3147, column: 7)
!5095 = !DILocation(line: 3149, column: 19, scope: !5093)
!5096 = !DILocation(line: 3149, column: 14, scope: !5093)
!5097 = !DILocation(line: 3150, column: 17, scope: !5093)
!5098 = !DILocation(line: 3150, column: 24, scope: !5093)
!5099 = !DILocation(line: 3150, column: 38, scope: !5093)
!5100 = !DILocation(line: 3150, column: 14, scope: !5093)
!5101 = !DILocation(line: 3151, column: 17, scope: !5093)
!5102 = !DILocation(line: 3151, column: 24, scope: !5093)
!5103 = !DILocation(line: 3151, column: 41, scope: !5093)
!5104 = !DILocation(line: 3151, column: 48, scope: !5093)
!5105 = !DILocation(line: 3151, column: 14, scope: !5093)
!5106 = !DILocation(line: 3161, column: 11, scope: !5063)
!5107 = !DILocation(line: 3161, column: 14, scope: !5063)
!5108 = !DILocation(line: 3161, column: 3, scope: !5063)
!5109 = !DILocation(line: 3164, column: 7, scope: !5110)
!5110 = distinct !DILexicalBlock(scope: !5063, file: !3, line: 3162, column: 5)
!5111 = !DILocation(line: 3167, column: 11, scope: !5112)
!5112 = distinct !DILexicalBlock(scope: !5110, file: !3, line: 3167, column: 11)
!5113 = !DILocation(line: 3167, column: 16, scope: !5112)
!5114 = !DILocation(line: 3167, column: 11, scope: !5110)
!5115 = !DILocation(line: 3168, column: 11, scope: !5112)
!5116 = !DILocation(line: 3168, column: 2, scope: !5112)
!5117 = !DILocation(line: 3171, column: 13, scope: !5118)
!5118 = distinct !DILexicalBlock(scope: !5112, file: !3, line: 3170, column: 2)
!5119 = !DILocation(line: 3172, column: 13, scope: !5118)
!5120 = !DILocation(line: 3174, column: 7, scope: !5110)
!5121 = !DILocation(line: 3177, column: 11, scope: !5122)
!5122 = distinct !DILexicalBlock(scope: !5110, file: !3, line: 3177, column: 11)
!5123 = !DILocation(line: 3177, column: 16, scope: !5122)
!5124 = !DILocation(line: 3177, column: 11, scope: !5110)
!5125 = !DILocation(line: 3179, column: 8, scope: !5126)
!5126 = distinct !DILexicalBlock(scope: !5127, file: !3, line: 3179, column: 8)
!5127 = distinct !DILexicalBlock(scope: !5122, file: !3, line: 3178, column: 2)
!5128 = !DILocation(line: 3179, column: 11, scope: !5126)
!5129 = !DILocation(line: 3179, column: 8, scope: !5127)
!5130 = !DILocation(line: 3181, column: 12, scope: !5131)
!5131 = distinct !DILexicalBlock(scope: !5132, file: !3, line: 3181, column: 12)
!5132 = distinct !DILexicalBlock(scope: !5126, file: !3, line: 3180, column: 6)
!5133 = !DILocation(line: 3181, column: 17, scope: !5131)
!5134 = !DILocation(line: 3181, column: 12, scope: !5132)
!5135 = !DILocation(line: 3183, column: 12, scope: !5136)
!5136 = distinct !DILexicalBlock(scope: !5131, file: !3, line: 3182, column: 3)
!5137 = !DILocation(line: 3184, column: 12, scope: !5136)
!5138 = !DILocation(line: 3185, column: 3, scope: !5136)
!5139 = !DILocation(line: 3188, column: 12, scope: !5140)
!5140 = distinct !DILexicalBlock(scope: !5131, file: !3, line: 3187, column: 3)
!5141 = !DILocation(line: 3189, column: 12, scope: !5140)
!5142 = !DILocation(line: 3191, column: 6, scope: !5132)
!5143 = !DILocation(line: 3192, column: 8, scope: !5144)
!5144 = distinct !DILexicalBlock(scope: !5127, file: !3, line: 3192, column: 8)
!5145 = !DILocation(line: 3192, column: 11, scope: !5144)
!5146 = !DILocation(line: 3192, column: 25, scope: !5144)
!5147 = !DILocation(line: 3192, column: 30, scope: !5144)
!5148 = !DILocation(line: 3192, column: 22, scope: !5144)
!5149 = !DILocation(line: 3192, column: 8, scope: !5127)
!5150 = !DILocation(line: 3193, column: 13, scope: !5144)
!5151 = !DILocation(line: 3193, column: 6, scope: !5144)
!5152 = !DILocation(line: 3195, column: 13, scope: !5144)
!5153 = !DILocation(line: 3196, column: 8, scope: !5154)
!5154 = distinct !DILexicalBlock(scope: !5127, file: !3, line: 3196, column: 8)
!5155 = !DILocation(line: 3196, column: 15, scope: !5154)
!5156 = !DILocation(line: 3196, column: 20, scope: !5154)
!5157 = !DILocation(line: 3196, column: 23, scope: !5154)
!5158 = !DILocation(line: 3196, column: 30, scope: !5154)
!5159 = !DILocation(line: 3196, column: 8, scope: !5127)
!5160 = !DILocation(line: 3197, column: 13, scope: !5154)
!5161 = !DILocation(line: 3197, column: 6, scope: !5154)
!5162 = !DILocation(line: 3199, column: 13, scope: !5127)
!5163 = !DILocation(line: 3200, column: 16, scope: !5127)
!5164 = !DILocation(line: 3200, column: 13, scope: !5127)
!5165 = !DILocation(line: 3201, column: 15, scope: !5127)
!5166 = !DILocation(line: 3201, column: 13, scope: !5127)
!5167 = !DILocation(line: 3202, column: 2, scope: !5127)
!5168 = !DILocation(line: 3205, column: 13, scope: !5169)
!5169 = distinct !DILexicalBlock(scope: !5122, file: !3, line: 3204, column: 2)
!5170 = !DILocation(line: 3206, column: 13, scope: !5169)
!5171 = !DILocation(line: 3208, column: 7, scope: !5110)
!5172 = !DILocation(line: 3214, column: 11, scope: !5173)
!5173 = distinct !DILexicalBlock(scope: !5110, file: !3, line: 3214, column: 11)
!5174 = !DILocation(line: 3214, column: 11, scope: !5110)
!5175 = !DILocation(line: 3215, column: 6, scope: !5173)
!5176 = !DILocation(line: 3215, column: 2, scope: !5173)
!5177 = !DILocation(line: 3217, column: 8, scope: !5173)
!5178 = !DILocation(line: 3217, column: 21, scope: !5173)
!5179 = !DILocation(line: 3217, column: 28, scope: !5173)
!5180 = !DILocation(line: 3217, column: 6, scope: !5173)
!5181 = !DILocation(line: 3218, column: 19, scope: !5110)
!5182 = !DILocation(line: 3218, column: 23, scope: !5110)
!5183 = !DILocation(line: 3218, column: 16, scope: !5110)
!5184 = !DILocation(line: 3219, column: 19, scope: !5110)
!5185 = !DILocation(line: 3219, column: 16, scope: !5110)
!5186 = !DILocation(line: 3220, column: 18, scope: !5110)
!5187 = !DILocation(line: 3220, column: 16, scope: !5110)
!5188 = !DILocation(line: 3221, column: 7, scope: !5110)
!5189 = !DILocation(line: 3224, column: 7, scope: !5110)
!5190 = !DILocation(line: 3225, column: 5, scope: !5110)
!5191 = !DILocation(line: 3230, column: 14, scope: !5192)
!5192 = distinct !DILexicalBlock(scope: !5063, file: !3, line: 3227, column: 7)
!5193 = !DILocation(line: 3230, column: 5, scope: !5192)
!5194 = !DILocation(line: 3230, column: 12, scope: !5192)
!5195 = !DILocation(line: 3230, column: 33, scope: !5192)
!5196 = !DILocation(line: 3230, column: 24, scope: !5192)
!5197 = !DILocation(line: 3230, column: 31, scope: !5192)
!5198 = !DILocation(line: 3231, column: 1, scope: !5063)
!5199 = distinct !DISubprogram(name: "decode_ieee_double", scope: !3, file: !3, line: 3234, type: !424, scopeLine: 3236, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!5200 = !DILocalVariable(name: "fmt", arg: 1, scope: !5199, file: !3, line: 3234, type: !419)
!5201 = !DILocation(line: 3234, column: 47, scope: !5199)
!5202 = !DILocalVariable(name: "r", arg: 2, scope: !5199, file: !3, line: 3234, type: !426)
!5203 = !DILocation(line: 3234, column: 69, scope: !5199)
!5204 = !DILocalVariable(name: "buf", arg: 3, scope: !5199, file: !3, line: 3235, type: !427)
!5205 = !DILocation(line: 3235, column: 19, scope: !5199)
!5206 = !DILocalVariable(name: "image_hi", scope: !5199, file: !3, line: 3237, type: !20)
!5207 = !DILocation(line: 3237, column: 17, scope: !5199)
!5208 = !DILocalVariable(name: "image_lo", scope: !5199, file: !3, line: 3237, type: !20)
!5209 = !DILocation(line: 3237, column: 27, scope: !5199)
!5210 = !DILocalVariable(name: "sign", scope: !5199, file: !3, line: 3238, type: !399)
!5211 = !DILocation(line: 3238, column: 8, scope: !5199)
!5212 = !DILocalVariable(name: "exp", scope: !5199, file: !3, line: 3239, type: !398)
!5213 = !DILocation(line: 3239, column: 7, scope: !5199)
!5214 = !DILocation(line: 3244, column: 16, scope: !5215)
!5215 = distinct !DILexicalBlock(scope: !5199, file: !3, line: 3241, column: 7)
!5216 = !DILocation(line: 3244, column: 14, scope: !5215)
!5217 = !DILocation(line: 3244, column: 35, scope: !5215)
!5218 = !DILocation(line: 3244, column: 33, scope: !5215)
!5219 = !DILocation(line: 3245, column: 12, scope: !5199)
!5220 = !DILocation(line: 3246, column: 12, scope: !5199)
!5221 = !DILocation(line: 3248, column: 11, scope: !5199)
!5222 = !DILocation(line: 3248, column: 20, scope: !5199)
!5223 = !DILocation(line: 3248, column: 27, scope: !5199)
!5224 = !DILocation(line: 3248, column: 10, scope: !5199)
!5225 = !DILocation(line: 3248, column: 8, scope: !5199)
!5226 = !DILocation(line: 3249, column: 10, scope: !5199)
!5227 = !DILocation(line: 3249, column: 19, scope: !5199)
!5228 = !DILocation(line: 3249, column: 26, scope: !5199)
!5229 = !DILocation(line: 3249, column: 9, scope: !5199)
!5230 = !DILocation(line: 3249, column: 7, scope: !5199)
!5231 = !DILocation(line: 3251, column: 11, scope: !5199)
!5232 = !DILocation(line: 3251, column: 3, scope: !5199)
!5233 = !DILocation(line: 3253, column: 12, scope: !5199)
!5234 = !DILocation(line: 3254, column: 15, scope: !5199)
!5235 = !DILocation(line: 3254, column: 24, scope: !5199)
!5236 = !DILocation(line: 3254, column: 12, scope: !5199)
!5237 = !DILocation(line: 3255, column: 12, scope: !5199)
!5238 = !DILocation(line: 3256, column: 12, scope: !5199)
!5239 = !DILocation(line: 3258, column: 7, scope: !5240)
!5240 = distinct !DILexicalBlock(scope: !5199, file: !3, line: 3258, column: 7)
!5241 = !DILocation(line: 3258, column: 11, scope: !5240)
!5242 = !DILocation(line: 3258, column: 7, scope: !5199)
!5243 = !DILocation(line: 3260, column: 12, scope: !5244)
!5244 = distinct !DILexicalBlock(scope: !5245, file: !3, line: 3260, column: 11)
!5245 = distinct !DILexicalBlock(scope: !5240, file: !3, line: 3259, column: 5)
!5246 = !DILocation(line: 3260, column: 21, scope: !5244)
!5247 = !DILocation(line: 3260, column: 24, scope: !5244)
!5248 = !DILocation(line: 3260, column: 34, scope: !5244)
!5249 = !DILocation(line: 3260, column: 37, scope: !5244)
!5250 = !DILocation(line: 3260, column: 42, scope: !5244)
!5251 = !DILocation(line: 3260, column: 11, scope: !5245)
!5252 = !DILocation(line: 3262, column: 4, scope: !5253)
!5253 = distinct !DILexicalBlock(scope: !5244, file: !3, line: 3261, column: 2)
!5254 = !DILocation(line: 3262, column: 7, scope: !5253)
!5255 = !DILocation(line: 3262, column: 10, scope: !5253)
!5256 = !DILocation(line: 3263, column: 14, scope: !5253)
!5257 = !DILocation(line: 3263, column: 4, scope: !5253)
!5258 = !DILocation(line: 3263, column: 7, scope: !5253)
!5259 = !DILocation(line: 3263, column: 12, scope: !5253)
!5260 = !DILocation(line: 3264, column: 4, scope: !5253)
!5261 = !DILocation(line: 3274, column: 20, scope: !5262)
!5262 = distinct !DILexicalBlock(scope: !5263, file: !3, line: 3273, column: 6)
!5263 = distinct !DILexicalBlock(scope: !5253, file: !3, line: 3265, column: 8)
!5264 = !DILocation(line: 3274, column: 29, scope: !5262)
!5265 = !DILocation(line: 3274, column: 35, scope: !5262)
!5266 = !DILocation(line: 3274, column: 44, scope: !5262)
!5267 = !DILocation(line: 3274, column: 53, scope: !5262)
!5268 = !DILocation(line: 3274, column: 41, scope: !5262)
!5269 = !DILocation(line: 3274, column: 17, scope: !5262)
!5270 = !DILocation(line: 3275, column: 26, scope: !5262)
!5271 = !DILocation(line: 3275, column: 8, scope: !5262)
!5272 = !DILocation(line: 3275, column: 11, scope: !5262)
!5273 = !DILocation(line: 3275, column: 24, scope: !5262)
!5274 = !DILocation(line: 3277, column: 15, scope: !5253)
!5275 = !DILocation(line: 3277, column: 4, scope: !5253)
!5276 = !DILocation(line: 3278, column: 2, scope: !5253)
!5277 = !DILocation(line: 3279, column: 16, scope: !5278)
!5278 = distinct !DILexicalBlock(scope: !5244, file: !3, line: 3279, column: 16)
!5279 = !DILocation(line: 3279, column: 21, scope: !5278)
!5280 = !DILocation(line: 3279, column: 16, scope: !5244)
!5281 = !DILocation(line: 3280, column: 12, scope: !5278)
!5282 = !DILocation(line: 3280, column: 2, scope: !5278)
!5283 = !DILocation(line: 3280, column: 5, scope: !5278)
!5284 = !DILocation(line: 3280, column: 10, scope: !5278)
!5285 = !DILocation(line: 3281, column: 5, scope: !5245)
!5286 = !DILocation(line: 3282, column: 12, scope: !5287)
!5287 = distinct !DILexicalBlock(scope: !5240, file: !3, line: 3282, column: 12)
!5288 = !DILocation(line: 3282, column: 16, scope: !5287)
!5289 = !DILocation(line: 3282, column: 24, scope: !5287)
!5290 = !DILocation(line: 3282, column: 28, scope: !5287)
!5291 = !DILocation(line: 3282, column: 33, scope: !5287)
!5292 = !DILocation(line: 3282, column: 42, scope: !5287)
!5293 = !DILocation(line: 3282, column: 45, scope: !5287)
!5294 = !DILocation(line: 3282, column: 50, scope: !5287)
!5295 = !DILocation(line: 3282, column: 12, scope: !5240)
!5296 = !DILocation(line: 3284, column: 11, scope: !5297)
!5297 = distinct !DILexicalBlock(scope: !5298, file: !3, line: 3284, column: 11)
!5298 = distinct !DILexicalBlock(scope: !5287, file: !3, line: 3283, column: 5)
!5299 = !DILocation(line: 3284, column: 20, scope: !5297)
!5300 = !DILocation(line: 3284, column: 23, scope: !5297)
!5301 = !DILocation(line: 3284, column: 11, scope: !5298)
!5302 = !DILocation(line: 3286, column: 4, scope: !5303)
!5303 = distinct !DILexicalBlock(scope: !5297, file: !3, line: 3285, column: 2)
!5304 = !DILocation(line: 3286, column: 7, scope: !5303)
!5305 = !DILocation(line: 3286, column: 10, scope: !5303)
!5306 = !DILocation(line: 3287, column: 14, scope: !5303)
!5307 = !DILocation(line: 3287, column: 4, scope: !5303)
!5308 = !DILocation(line: 3287, column: 7, scope: !5303)
!5309 = !DILocation(line: 3287, column: 12, scope: !5303)
!5310 = !DILocation(line: 3288, column: 22, scope: !5303)
!5311 = !DILocation(line: 3288, column: 31, scope: !5303)
!5312 = !DILocation(line: 3288, column: 38, scope: !5303)
!5313 = !DILocation(line: 3288, column: 45, scope: !5303)
!5314 = !DILocation(line: 3288, column: 50, scope: !5303)
!5315 = !DILocation(line: 3288, column: 43, scope: !5303)
!5316 = !DILocation(line: 3288, column: 20, scope: !5303)
!5317 = !DILocation(line: 3288, column: 4, scope: !5303)
!5318 = !DILocation(line: 3288, column: 7, scope: !5303)
!5319 = !DILocation(line: 3288, column: 18, scope: !5303)
!5320 = !DILocation(line: 3295, column: 25, scope: !5321)
!5321 = distinct !DILexicalBlock(scope: !5303, file: !3, line: 3289, column: 8)
!5322 = !DILocation(line: 3295, column: 34, scope: !5321)
!5323 = !DILocation(line: 3295, column: 40, scope: !5321)
!5324 = !DILocation(line: 3295, column: 48, scope: !5321)
!5325 = !DILocation(line: 3295, column: 46, scope: !5321)
!5326 = !DILocation(line: 3295, column: 6, scope: !5321)
!5327 = !DILocation(line: 3295, column: 9, scope: !5321)
!5328 = !DILocation(line: 3295, column: 22, scope: !5321)
!5329 = !DILocation(line: 3296, column: 2, scope: !5303)
!5330 = !DILocation(line: 3299, column: 4, scope: !5331)
!5331 = distinct !DILexicalBlock(scope: !5297, file: !3, line: 3298, column: 2)
!5332 = !DILocation(line: 3299, column: 7, scope: !5331)
!5333 = !DILocation(line: 3299, column: 10, scope: !5331)
!5334 = !DILocation(line: 3300, column: 14, scope: !5331)
!5335 = !DILocation(line: 3300, column: 4, scope: !5331)
!5336 = !DILocation(line: 3300, column: 7, scope: !5331)
!5337 = !DILocation(line: 3300, column: 12, scope: !5331)
!5338 = !DILocation(line: 3302, column: 5, scope: !5298)
!5339 = !DILocation(line: 3305, column: 7, scope: !5340)
!5340 = distinct !DILexicalBlock(scope: !5287, file: !3, line: 3304, column: 5)
!5341 = !DILocation(line: 3305, column: 10, scope: !5340)
!5342 = !DILocation(line: 3305, column: 13, scope: !5340)
!5343 = !DILocation(line: 3306, column: 17, scope: !5340)
!5344 = !DILocation(line: 3306, column: 7, scope: !5340)
!5345 = !DILocation(line: 3306, column: 10, scope: !5340)
!5346 = !DILocation(line: 3306, column: 15, scope: !5340)
!5347 = !DILocation(line: 3307, column: 7, scope: !5340)
!5348 = !DILocation(line: 3314, column: 21, scope: !5349)
!5349 = distinct !DILexicalBlock(scope: !5340, file: !3, line: 3308, column: 11)
!5350 = !DILocation(line: 3314, column: 30, scope: !5349)
!5351 = !DILocation(line: 3314, column: 36, scope: !5349)
!5352 = !DILocation(line: 3314, column: 44, scope: !5349)
!5353 = !DILocation(line: 3314, column: 42, scope: !5349)
!5354 = !DILocation(line: 3314, column: 53, scope: !5349)
!5355 = !DILocation(line: 3314, column: 2, scope: !5349)
!5356 = !DILocation(line: 3314, column: 5, scope: !5349)
!5357 = !DILocation(line: 3314, column: 18, scope: !5349)
!5358 = !DILocation(line: 3316, column: 1, scope: !5199)
!5359 = distinct !DISubprogram(name: "encode_ieee_extended_motorola", scope: !3, file: !3, line: 3509, type: !417, scopeLine: 3511, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!5360 = !DILocalVariable(name: "fmt", arg: 1, scope: !5359, file: !3, line: 3509, type: !419)
!5361 = !DILocation(line: 3509, column: 58, scope: !5359)
!5362 = !DILocalVariable(name: "buf", arg: 2, scope: !5359, file: !3, line: 3509, type: !420)
!5363 = !DILocation(line: 3509, column: 69, scope: !5359)
!5364 = !DILocalVariable(name: "r", arg: 3, scope: !5359, file: !3, line: 3510, type: !6)
!5365 = !DILocation(line: 3510, column: 34, scope: !5359)
!5366 = !DILocalVariable(name: "intermed", scope: !5359, file: !3, line: 3512, type: !5367)
!5367 = !DICompositeType(tag: DW_TAG_array_type, baseType: !421, size: 192, elements: !21)
!5368 = !DILocation(line: 3512, column: 8, scope: !5359)
!5369 = !DILocation(line: 3513, column: 25, scope: !5359)
!5370 = !DILocation(line: 3513, column: 30, scope: !5359)
!5371 = !DILocation(line: 3513, column: 40, scope: !5359)
!5372 = !DILocation(line: 3513, column: 3, scope: !5359)
!5373 = !DILocation(line: 3521, column: 12, scope: !5359)
!5374 = !DILocation(line: 3521, column: 24, scope: !5359)
!5375 = !DILocation(line: 3521, column: 3, scope: !5359)
!5376 = !DILocation(line: 3521, column: 10, scope: !5359)
!5377 = !DILocation(line: 3522, column: 12, scope: !5359)
!5378 = !DILocation(line: 3522, column: 3, scope: !5359)
!5379 = !DILocation(line: 3522, column: 10, scope: !5359)
!5380 = !DILocation(line: 3523, column: 12, scope: !5359)
!5381 = !DILocation(line: 3523, column: 3, scope: !5359)
!5382 = !DILocation(line: 3523, column: 10, scope: !5359)
!5383 = !DILocation(line: 3524, column: 1, scope: !5359)
!5384 = distinct !DISubprogram(name: "decode_ieee_extended_motorola", scope: !3, file: !3, line: 3650, type: !424, scopeLine: 3652, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!5385 = !DILocalVariable(name: "fmt", arg: 1, scope: !5384, file: !3, line: 3650, type: !419)
!5386 = !DILocation(line: 3650, column: 58, scope: !5384)
!5387 = !DILocalVariable(name: "r", arg: 2, scope: !5384, file: !3, line: 3650, type: !426)
!5388 = !DILocation(line: 3650, column: 80, scope: !5384)
!5389 = !DILocalVariable(name: "buf", arg: 3, scope: !5384, file: !3, line: 3651, type: !427)
!5390 = !DILocation(line: 3651, column: 23, scope: !5384)
!5391 = !DILocalVariable(name: "intermed", scope: !5384, file: !3, line: 3653, type: !5367)
!5392 = !DILocation(line: 3653, column: 8, scope: !5384)
!5393 = !DILocation(line: 3658, column: 17, scope: !5384)
!5394 = !DILocation(line: 3658, column: 3, scope: !5384)
!5395 = !DILocation(line: 3658, column: 15, scope: !5384)
!5396 = !DILocation(line: 3659, column: 17, scope: !5384)
!5397 = !DILocation(line: 3659, column: 3, scope: !5384)
!5398 = !DILocation(line: 3659, column: 15, scope: !5384)
!5399 = !DILocation(line: 3660, column: 32, scope: !5384)
!5400 = !DILocation(line: 3660, column: 39, scope: !5384)
!5401 = !DILocation(line: 3660, column: 3, scope: !5384)
!5402 = !DILocation(line: 3660, column: 15, scope: !5384)
!5403 = !DILocation(line: 3662, column: 25, scope: !5384)
!5404 = !DILocation(line: 3662, column: 30, scope: !5384)
!5405 = !DILocation(line: 3662, column: 33, scope: !5384)
!5406 = !DILocation(line: 3662, column: 3, scope: !5384)
!5407 = !DILocation(line: 3663, column: 1, scope: !5384)
!5408 = distinct !DISubprogram(name: "encode_ieee_extended_intel_96", scope: !3, file: !3, line: 3529, type: !417, scopeLine: 3531, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!5409 = !DILocalVariable(name: "fmt", arg: 1, scope: !5408, file: !3, line: 3529, type: !419)
!5410 = !DILocation(line: 3529, column: 58, scope: !5408)
!5411 = !DILocalVariable(name: "buf", arg: 2, scope: !5408, file: !3, line: 3529, type: !420)
!5412 = !DILocation(line: 3529, column: 69, scope: !5408)
!5413 = !DILocalVariable(name: "r", arg: 3, scope: !5408, file: !3, line: 3530, type: !6)
!5414 = !DILocation(line: 3530, column: 34, scope: !5408)
!5415 = !DILocation(line: 3545, column: 27, scope: !5416)
!5416 = distinct !DILexicalBlock(scope: !5408, file: !3, line: 3532, column: 7)
!5417 = !DILocation(line: 3545, column: 32, scope: !5416)
!5418 = !DILocation(line: 3545, column: 37, scope: !5416)
!5419 = !DILocation(line: 3545, column: 5, scope: !5416)
!5420 = !DILocation(line: 3546, column: 1, scope: !5408)
!5421 = distinct !DISubprogram(name: "decode_ieee_extended_intel_96", scope: !3, file: !3, line: 3668, type: !424, scopeLine: 3670, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!5422 = !DILocalVariable(name: "fmt", arg: 1, scope: !5421, file: !3, line: 3668, type: !419)
!5423 = !DILocation(line: 3668, column: 58, scope: !5421)
!5424 = !DILocalVariable(name: "r", arg: 2, scope: !5421, file: !3, line: 3668, type: !426)
!5425 = !DILocation(line: 3668, column: 80, scope: !5421)
!5426 = !DILocalVariable(name: "buf", arg: 3, scope: !5421, file: !3, line: 3669, type: !427)
!5427 = !DILocation(line: 3669, column: 23, scope: !5421)
!5428 = !DILocation(line: 3686, column: 27, scope: !5429)
!5429 = distinct !DILexicalBlock(scope: !5421, file: !3, line: 3671, column: 7)
!5430 = !DILocation(line: 3686, column: 32, scope: !5429)
!5431 = !DILocation(line: 3686, column: 35, scope: !5429)
!5432 = !DILocation(line: 3686, column: 5, scope: !5429)
!5433 = !DILocation(line: 3687, column: 1, scope: !5421)
!5434 = distinct !DISubprogram(name: "encode_ieee_extended_intel_128", scope: !3, file: !3, line: 3551, type: !417, scopeLine: 3553, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!5435 = !DILocalVariable(name: "fmt", arg: 1, scope: !5434, file: !3, line: 3551, type: !419)
!5436 = !DILocation(line: 3551, column: 59, scope: !5434)
!5437 = !DILocalVariable(name: "buf", arg: 2, scope: !5434, file: !3, line: 3551, type: !420)
!5438 = !DILocation(line: 3551, column: 70, scope: !5434)
!5439 = !DILocalVariable(name: "r", arg: 3, scope: !5434, file: !3, line: 3552, type: !6)
!5440 = !DILocation(line: 3552, column: 28, scope: !5434)
!5441 = !DILocation(line: 3555, column: 34, scope: !5434)
!5442 = !DILocation(line: 3555, column: 39, scope: !5434)
!5443 = !DILocation(line: 3555, column: 44, scope: !5434)
!5444 = !DILocation(line: 3555, column: 3, scope: !5434)
!5445 = !DILocation(line: 3556, column: 3, scope: !5434)
!5446 = !DILocation(line: 3556, column: 10, scope: !5434)
!5447 = !DILocation(line: 3557, column: 1, scope: !5434)
!5448 = distinct !DISubprogram(name: "decode_ieee_extended_intel_128", scope: !3, file: !3, line: 3692, type: !424, scopeLine: 3694, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!5449 = !DILocalVariable(name: "fmt", arg: 1, scope: !5448, file: !3, line: 3692, type: !419)
!5450 = !DILocation(line: 3692, column: 59, scope: !5448)
!5451 = !DILocalVariable(name: "r", arg: 2, scope: !5448, file: !3, line: 3692, type: !426)
!5452 = !DILocation(line: 3692, column: 81, scope: !5448)
!5453 = !DILocalVariable(name: "buf", arg: 3, scope: !5448, file: !3, line: 3693, type: !427)
!5454 = !DILocation(line: 3693, column: 17, scope: !5448)
!5455 = !DILocation(line: 3696, column: 34, scope: !5448)
!5456 = !DILocation(line: 3696, column: 39, scope: !5448)
!5457 = !DILocation(line: 3696, column: 42, scope: !5448)
!5458 = !DILocation(line: 3696, column: 3, scope: !5448)
!5459 = !DILocation(line: 3697, column: 1, scope: !5448)
!5460 = distinct !DISubprogram(name: "encode_ibm_extended", scope: !3, file: !3, line: 3799, type: !417, scopeLine: 3801, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!5461 = !DILocalVariable(name: "fmt", arg: 1, scope: !5460, file: !3, line: 3799, type: !419)
!5462 = !DILocation(line: 3799, column: 48, scope: !5460)
!5463 = !DILocalVariable(name: "buf", arg: 2, scope: !5460, file: !3, line: 3799, type: !420)
!5464 = !DILocation(line: 3799, column: 59, scope: !5460)
!5465 = !DILocalVariable(name: "r", arg: 3, scope: !5460, file: !3, line: 3800, type: !6)
!5466 = !DILocation(line: 3800, column: 31, scope: !5460)
!5467 = !DILocalVariable(name: "u", scope: !5460, file: !3, line: 3802, type: !8)
!5468 = !DILocation(line: 3802, column: 19, scope: !5460)
!5469 = !DILocalVariable(name: "normr", scope: !5460, file: !3, line: 3802, type: !8)
!5470 = !DILocation(line: 3802, column: 22, scope: !5460)
!5471 = !DILocalVariable(name: "v", scope: !5460, file: !3, line: 3802, type: !8)
!5472 = !DILocation(line: 3802, column: 29, scope: !5460)
!5473 = !DILocalVariable(name: "base_fmt", scope: !5460, file: !3, line: 3803, type: !419)
!5474 = !DILocation(line: 3803, column: 29, scope: !5460)
!5475 = !DILocation(line: 3805, column: 14, scope: !5460)
!5476 = !DILocation(line: 3805, column: 19, scope: !5460)
!5477 = !DILocation(line: 3805, column: 12, scope: !5460)
!5478 = !DILocation(line: 3808, column: 12, scope: !5460)
!5479 = !DILocation(line: 3808, column: 11, scope: !5460)
!5480 = !DILocation(line: 3809, column: 13, scope: !5481)
!5481 = distinct !DILexicalBlock(scope: !5460, file: !3, line: 3809, column: 7)
!5482 = !DILocation(line: 3809, column: 16, scope: !5481)
!5483 = !DILocation(line: 3809, column: 7, scope: !5460)
!5484 = !DILocation(line: 3810, column: 5, scope: !5481)
!5485 = !DILocation(line: 3813, column: 7, scope: !5460)
!5486 = !DILocation(line: 3814, column: 21, scope: !5460)
!5487 = !DILocation(line: 3814, column: 3, scope: !5460)
!5488 = !DILocation(line: 3815, column: 23, scope: !5460)
!5489 = !DILocation(line: 3815, column: 34, scope: !5460)
!5490 = !DILocation(line: 3815, column: 3, scope: !5460)
!5491 = !DILocation(line: 3817, column: 9, scope: !5492)
!5492 = distinct !DILexicalBlock(scope: !5460, file: !3, line: 3817, column: 7)
!5493 = !DILocation(line: 3817, column: 12, scope: !5492)
!5494 = !DILocation(line: 3817, column: 7, scope: !5460)
!5495 = !DILocation(line: 3819, column: 7, scope: !5496)
!5496 = distinct !DILexicalBlock(scope: !5492, file: !3, line: 3818, column: 5)
!5497 = !DILocation(line: 3821, column: 25, scope: !5496)
!5498 = !DILocation(line: 3821, column: 7, scope: !5496)
!5499 = !DILocation(line: 3822, column: 27, scope: !5496)
!5500 = !DILocation(line: 3822, column: 38, scope: !5496)
!5501 = !DILocation(line: 3822, column: 7, scope: !5496)
!5502 = !DILocation(line: 3823, column: 5, scope: !5496)
!5503 = !DILocation(line: 3828, column: 7, scope: !5504)
!5504 = distinct !DILexicalBlock(scope: !5492, file: !3, line: 3825, column: 5)
!5505 = !DILocation(line: 3828, column: 14, scope: !5504)
!5506 = !DILocation(line: 3829, column: 7, scope: !5504)
!5507 = !DILocation(line: 3829, column: 14, scope: !5504)
!5508 = !DILocation(line: 3831, column: 1, scope: !5460)
!5509 = distinct !DISubprogram(name: "decode_ibm_extended", scope: !3, file: !3, line: 3834, type: !424, scopeLine: 3836, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!5510 = !DILocalVariable(name: "fmt", arg: 1, scope: !5509, file: !3, line: 3834, type: !419)
!5511 = !DILocation(line: 3834, column: 48, scope: !5509)
!5512 = !DILocalVariable(name: "r", arg: 2, scope: !5509, file: !3, line: 3834, type: !426)
!5513 = !DILocation(line: 3834, column: 87, scope: !5509)
!5514 = !DILocalVariable(name: "buf", arg: 3, scope: !5509, file: !3, line: 3835, type: !427)
!5515 = !DILocation(line: 3835, column: 20, scope: !5509)
!5516 = !DILocalVariable(name: "u", scope: !5509, file: !3, line: 3837, type: !8)
!5517 = !DILocation(line: 3837, column: 19, scope: !5509)
!5518 = !DILocalVariable(name: "v", scope: !5509, file: !3, line: 3837, type: !8)
!5519 = !DILocation(line: 3837, column: 22, scope: !5509)
!5520 = !DILocalVariable(name: "base_fmt", scope: !5509, file: !3, line: 3838, type: !419)
!5521 = !DILocation(line: 3838, column: 29, scope: !5509)
!5522 = !DILocation(line: 3840, column: 14, scope: !5509)
!5523 = !DILocation(line: 3840, column: 19, scope: !5509)
!5524 = !DILocation(line: 3840, column: 12, scope: !5509)
!5525 = !DILocation(line: 3841, column: 23, scope: !5509)
!5526 = !DILocation(line: 3841, column: 38, scope: !5509)
!5527 = !DILocation(line: 3841, column: 3, scope: !5509)
!5528 = !DILocation(line: 3843, column: 9, scope: !5529)
!5529 = distinct !DILexicalBlock(scope: !5509, file: !3, line: 3843, column: 7)
!5530 = !DILocation(line: 3843, column: 12, scope: !5529)
!5531 = !DILocation(line: 3843, column: 24, scope: !5529)
!5532 = !DILocation(line: 3843, column: 29, scope: !5529)
!5533 = !DILocation(line: 3843, column: 32, scope: !5529)
!5534 = !DILocation(line: 3843, column: 43, scope: !5529)
!5535 = !DILocation(line: 3843, column: 48, scope: !5529)
!5536 = !DILocation(line: 3843, column: 51, scope: !5529)
!5537 = !DILocation(line: 3843, column: 7, scope: !5509)
!5538 = !DILocation(line: 3845, column: 27, scope: !5539)
!5539 = distinct !DILexicalBlock(scope: !5529, file: !3, line: 3844, column: 5)
!5540 = !DILocation(line: 3845, column: 42, scope: !5539)
!5541 = !DILocation(line: 3845, column: 7, scope: !5539)
!5542 = !DILocation(line: 3846, column: 15, scope: !5539)
!5543 = !DILocation(line: 3846, column: 7, scope: !5539)
!5544 = !DILocation(line: 3847, column: 5, scope: !5539)
!5545 = !DILocation(line: 3849, column: 6, scope: !5529)
!5546 = !DILocation(line: 3849, column: 10, scope: !5529)
!5547 = !DILocation(line: 3850, column: 1, scope: !5509)
!5548 = distinct !DISubprogram(name: "encode_ieee_quad", scope: !3, file: !3, line: 3903, type: !417, scopeLine: 3905, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!5549 = !DILocalVariable(name: "fmt", arg: 1, scope: !5548, file: !3, line: 3903, type: !419)
!5550 = !DILocation(line: 3903, column: 45, scope: !5548)
!5551 = !DILocalVariable(name: "buf", arg: 2, scope: !5548, file: !3, line: 3903, type: !420)
!5552 = !DILocation(line: 3903, column: 56, scope: !5548)
!5553 = !DILocalVariable(name: "r", arg: 3, scope: !5548, file: !3, line: 3904, type: !6)
!5554 = !DILocation(line: 3904, column: 28, scope: !5548)
!5555 = !DILocalVariable(name: "image3", scope: !5548, file: !3, line: 3906, type: !20)
!5556 = !DILocation(line: 3906, column: 17, scope: !5548)
!5557 = !DILocalVariable(name: "image2", scope: !5548, file: !3, line: 3906, type: !20)
!5558 = !DILocation(line: 3906, column: 25, scope: !5548)
!5559 = !DILocalVariable(name: "image1", scope: !5548, file: !3, line: 3906, type: !20)
!5560 = !DILocation(line: 3906, column: 33, scope: !5548)
!5561 = !DILocalVariable(name: "image0", scope: !5548, file: !3, line: 3906, type: !20)
!5562 = !DILocation(line: 3906, column: 41, scope: !5548)
!5563 = !DILocalVariable(name: "exp", scope: !5548, file: !3, line: 3906, type: !20)
!5564 = !DILocation(line: 3906, column: 49, scope: !5548)
!5565 = !DILocalVariable(name: "denormal", scope: !5548, file: !3, line: 3907, type: !399)
!5566 = !DILocation(line: 3907, column: 8, scope: !5548)
!5567 = !DILocation(line: 3907, column: 20, scope: !5548)
!5568 = !DILocation(line: 3907, column: 23, scope: !5548)
!5569 = !DILocation(line: 3907, column: 36, scope: !5548)
!5570 = !DILocation(line: 3907, column: 47, scope: !5548)
!5571 = !DILocation(line: 3907, column: 19, scope: !5548)
!5572 = !DILocalVariable(name: "u", scope: !5548, file: !3, line: 3908, type: !8)
!5573 = !DILocation(line: 3908, column: 19, scope: !5548)
!5574 = !DILocation(line: 3910, column: 12, scope: !5548)
!5575 = !DILocation(line: 3910, column: 15, scope: !5548)
!5576 = !DILocation(line: 3910, column: 20, scope: !5548)
!5577 = !DILocation(line: 3910, column: 10, scope: !5548)
!5578 = !DILocation(line: 3911, column: 10, scope: !5548)
!5579 = !DILocation(line: 3912, column: 10, scope: !5548)
!5580 = !DILocation(line: 3913, column: 10, scope: !5548)
!5581 = !DILocation(line: 3915, column: 27, scope: !5548)
!5582 = !DILocation(line: 3915, column: 3, scope: !5548)
!5583 = !DILocation(line: 3917, column: 11, scope: !5548)
!5584 = !DILocation(line: 3917, column: 14, scope: !5548)
!5585 = !DILocation(line: 3917, column: 3, scope: !5548)
!5586 = !DILocation(line: 3920, column: 7, scope: !5587)
!5587 = distinct !DILexicalBlock(scope: !5548, file: !3, line: 3918, column: 5)
!5588 = !DILocation(line: 3923, column: 11, scope: !5589)
!5589 = distinct !DILexicalBlock(scope: !5587, file: !3, line: 3923, column: 11)
!5590 = !DILocation(line: 3923, column: 16, scope: !5589)
!5591 = !DILocation(line: 3923, column: 11, scope: !5587)
!5592 = !DILocation(line: 3924, column: 9, scope: !5589)
!5593 = !DILocation(line: 3924, column: 2, scope: !5589)
!5594 = !DILocation(line: 3927, column: 11, scope: !5595)
!5595 = distinct !DILexicalBlock(scope: !5589, file: !3, line: 3926, column: 2)
!5596 = !DILocation(line: 3928, column: 11, scope: !5595)
!5597 = !DILocation(line: 3929, column: 11, scope: !5595)
!5598 = !DILocation(line: 3930, column: 11, scope: !5595)
!5599 = !DILocation(line: 3932, column: 7, scope: !5587)
!5600 = !DILocation(line: 3935, column: 11, scope: !5601)
!5601 = distinct !DILexicalBlock(scope: !5587, file: !3, line: 3935, column: 11)
!5602 = !DILocation(line: 3935, column: 16, scope: !5601)
!5603 = !DILocation(line: 3935, column: 11, scope: !5587)
!5604 = !DILocation(line: 3937, column: 11, scope: !5605)
!5605 = distinct !DILexicalBlock(scope: !5601, file: !3, line: 3936, column: 2)
!5606 = !DILocation(line: 3939, column: 8, scope: !5607)
!5607 = distinct !DILexicalBlock(scope: !5605, file: !3, line: 3939, column: 8)
!5608 = !DILocation(line: 3939, column: 11, scope: !5607)
!5609 = !DILocation(line: 3939, column: 8, scope: !5605)
!5610 = !DILocation(line: 3941, column: 12, scope: !5611)
!5611 = distinct !DILexicalBlock(scope: !5612, file: !3, line: 3941, column: 12)
!5612 = distinct !DILexicalBlock(scope: !5607, file: !3, line: 3940, column: 6)
!5613 = !DILocation(line: 3941, column: 17, scope: !5611)
!5614 = !DILocation(line: 3941, column: 12, scope: !5612)
!5615 = !DILocation(line: 3943, column: 12, scope: !5616)
!5616 = distinct !DILexicalBlock(scope: !5611, file: !3, line: 3942, column: 3)
!5617 = !DILocation(line: 3944, column: 30, scope: !5616)
!5618 = !DILocation(line: 3944, column: 21, scope: !5616)
!5619 = !DILocation(line: 3944, column: 12, scope: !5616)
!5620 = !DILocation(line: 3945, column: 3, scope: !5616)
!5621 = !DILocation(line: 3946, column: 6, scope: !5612)
!5622 = !DILocation(line: 3956, column: 19, scope: !5623)
!5623 = distinct !DILexicalBlock(scope: !5624, file: !3, line: 3955, column: 6)
!5624 = distinct !DILexicalBlock(scope: !5607, file: !3, line: 3947, column: 13)
!5625 = !DILocation(line: 3956, column: 17, scope: !5623)
!5626 = !DILocation(line: 3956, column: 15, scope: !5623)
!5627 = !DILocation(line: 3957, column: 17, scope: !5623)
!5628 = !DILocation(line: 3957, column: 24, scope: !5623)
!5629 = !DILocation(line: 3957, column: 30, scope: !5623)
!5630 = !DILocation(line: 3957, column: 15, scope: !5623)
!5631 = !DILocation(line: 3958, column: 19, scope: !5623)
!5632 = !DILocation(line: 3958, column: 17, scope: !5623)
!5633 = !DILocation(line: 3958, column: 15, scope: !5623)
!5634 = !DILocation(line: 3959, column: 19, scope: !5623)
!5635 = !DILocation(line: 3959, column: 26, scope: !5623)
!5636 = !DILocation(line: 3959, column: 32, scope: !5623)
!5637 = !DILocation(line: 3959, column: 38, scope: !5623)
!5638 = !DILocation(line: 3959, column: 15, scope: !5623)
!5639 = !DILocation(line: 3960, column: 15, scope: !5623)
!5640 = !DILocation(line: 3961, column: 15, scope: !5623)
!5641 = !DILocation(line: 3963, column: 8, scope: !5642)
!5642 = distinct !DILexicalBlock(scope: !5605, file: !3, line: 3963, column: 8)
!5643 = !DILocation(line: 3963, column: 11, scope: !5642)
!5644 = !DILocation(line: 3963, column: 25, scope: !5642)
!5645 = !DILocation(line: 3963, column: 30, scope: !5642)
!5646 = !DILocation(line: 3963, column: 22, scope: !5642)
!5647 = !DILocation(line: 3963, column: 8, scope: !5605)
!5648 = !DILocation(line: 3964, column: 13, scope: !5642)
!5649 = !DILocation(line: 3964, column: 6, scope: !5642)
!5650 = !DILocation(line: 3966, column: 13, scope: !5642)
!5651 = !DILocation(line: 3967, column: 10, scope: !5652)
!5652 = distinct !DILexicalBlock(scope: !5605, file: !3, line: 3967, column: 8)
!5653 = !DILocation(line: 3967, column: 17, scope: !5652)
!5654 = !DILocation(line: 3967, column: 29, scope: !5652)
!5655 = !DILocation(line: 3967, column: 27, scope: !5652)
!5656 = !DILocation(line: 3967, column: 38, scope: !5652)
!5657 = !DILocation(line: 3967, column: 36, scope: !5652)
!5658 = !DILocation(line: 3967, column: 47, scope: !5652)
!5659 = !DILocation(line: 3967, column: 45, scope: !5652)
!5660 = !DILocation(line: 3967, column: 55, scope: !5652)
!5661 = !DILocation(line: 3967, column: 8, scope: !5605)
!5662 = !DILocation(line: 3968, column: 13, scope: !5652)
!5663 = !DILocation(line: 3968, column: 6, scope: !5652)
!5664 = !DILocation(line: 3969, column: 2, scope: !5605)
!5665 = !DILocation(line: 3972, column: 11, scope: !5666)
!5666 = distinct !DILexicalBlock(scope: !5601, file: !3, line: 3971, column: 2)
!5667 = !DILocation(line: 3973, column: 11, scope: !5666)
!5668 = !DILocation(line: 3974, column: 11, scope: !5666)
!5669 = !DILocation(line: 3975, column: 11, scope: !5666)
!5670 = !DILocation(line: 3977, column: 7, scope: !5587)
!5671 = !DILocation(line: 3983, column: 11, scope: !5672)
!5672 = distinct !DILexicalBlock(scope: !5587, file: !3, line: 3983, column: 11)
!5673 = !DILocation(line: 3983, column: 11, scope: !5587)
!5674 = !DILocation(line: 3984, column: 6, scope: !5672)
!5675 = !DILocation(line: 3984, column: 2, scope: !5672)
!5676 = !DILocation(line: 3986, column: 8, scope: !5672)
!5677 = !DILocation(line: 3986, column: 21, scope: !5672)
!5678 = !DILocation(line: 3986, column: 29, scope: !5672)
!5679 = !DILocation(line: 3986, column: 6, scope: !5672)
!5680 = !DILocation(line: 3987, column: 17, scope: !5587)
!5681 = !DILocation(line: 3987, column: 21, scope: !5587)
!5682 = !DILocation(line: 3987, column: 14, scope: !5587)
!5683 = !DILocation(line: 3998, column: 15, scope: !5684)
!5684 = distinct !DILexicalBlock(scope: !5685, file: !3, line: 3997, column: 2)
!5685 = distinct !DILexicalBlock(scope: !5587, file: !3, line: 3989, column: 11)
!5686 = !DILocation(line: 3998, column: 13, scope: !5684)
!5687 = !DILocation(line: 3998, column: 11, scope: !5684)
!5688 = !DILocation(line: 3999, column: 13, scope: !5684)
!5689 = !DILocation(line: 3999, column: 20, scope: !5684)
!5690 = !DILocation(line: 3999, column: 26, scope: !5684)
!5691 = !DILocation(line: 3999, column: 11, scope: !5684)
!5692 = !DILocation(line: 4000, column: 15, scope: !5684)
!5693 = !DILocation(line: 4000, column: 13, scope: !5684)
!5694 = !DILocation(line: 4000, column: 11, scope: !5684)
!5695 = !DILocation(line: 4001, column: 15, scope: !5684)
!5696 = !DILocation(line: 4001, column: 22, scope: !5684)
!5697 = !DILocation(line: 4001, column: 28, scope: !5684)
!5698 = !DILocation(line: 4001, column: 34, scope: !5684)
!5699 = !DILocation(line: 4001, column: 11, scope: !5684)
!5700 = !DILocation(line: 4002, column: 11, scope: !5684)
!5701 = !DILocation(line: 4003, column: 11, scope: !5684)
!5702 = !DILocation(line: 4005, column: 7, scope: !5587)
!5703 = !DILocation(line: 4008, column: 7, scope: !5587)
!5704 = !DILocation(line: 4009, column: 5, scope: !5587)
!5705 = !DILocation(line: 4020, column: 16, scope: !5706)
!5706 = distinct !DILexicalBlock(scope: !5707, file: !3, line: 4019, column: 5)
!5707 = distinct !DILexicalBlock(scope: !5548, file: !3, line: 4011, column: 7)
!5708 = !DILocation(line: 4020, column: 7, scope: !5706)
!5709 = !DILocation(line: 4020, column: 14, scope: !5706)
!5710 = !DILocation(line: 4021, column: 16, scope: !5706)
!5711 = !DILocation(line: 4021, column: 7, scope: !5706)
!5712 = !DILocation(line: 4021, column: 14, scope: !5706)
!5713 = !DILocation(line: 4022, column: 16, scope: !5706)
!5714 = !DILocation(line: 4022, column: 7, scope: !5706)
!5715 = !DILocation(line: 4022, column: 14, scope: !5706)
!5716 = !DILocation(line: 4023, column: 16, scope: !5706)
!5717 = !DILocation(line: 4023, column: 7, scope: !5706)
!5718 = !DILocation(line: 4023, column: 14, scope: !5706)
!5719 = !DILocation(line: 4025, column: 1, scope: !5548)
!5720 = distinct !DISubprogram(name: "decode_ieee_quad", scope: !3, file: !3, line: 4028, type: !424, scopeLine: 4030, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!5721 = !DILocalVariable(name: "fmt", arg: 1, scope: !5720, file: !3, line: 4028, type: !419)
!5722 = !DILocation(line: 4028, column: 45, scope: !5720)
!5723 = !DILocalVariable(name: "r", arg: 2, scope: !5720, file: !3, line: 4028, type: !426)
!5724 = !DILocation(line: 4028, column: 67, scope: !5720)
!5725 = !DILocalVariable(name: "buf", arg: 3, scope: !5720, file: !3, line: 4029, type: !427)
!5726 = !DILocation(line: 4029, column: 17, scope: !5720)
!5727 = !DILocalVariable(name: "image3", scope: !5720, file: !3, line: 4031, type: !20)
!5728 = !DILocation(line: 4031, column: 17, scope: !5720)
!5729 = !DILocalVariable(name: "image2", scope: !5720, file: !3, line: 4031, type: !20)
!5730 = !DILocation(line: 4031, column: 25, scope: !5720)
!5731 = !DILocalVariable(name: "image1", scope: !5720, file: !3, line: 4031, type: !20)
!5732 = !DILocation(line: 4031, column: 33, scope: !5720)
!5733 = !DILocalVariable(name: "image0", scope: !5720, file: !3, line: 4031, type: !20)
!5734 = !DILocation(line: 4031, column: 41, scope: !5720)
!5735 = !DILocalVariable(name: "sign", scope: !5720, file: !3, line: 4032, type: !399)
!5736 = !DILocation(line: 4032, column: 8, scope: !5720)
!5737 = !DILocalVariable(name: "exp", scope: !5720, file: !3, line: 4033, type: !398)
!5738 = !DILocation(line: 4033, column: 7, scope: !5720)
!5739 = !DILocation(line: 4044, column: 16, scope: !5740)
!5740 = distinct !DILexicalBlock(scope: !5741, file: !3, line: 4043, column: 5)
!5741 = distinct !DILexicalBlock(scope: !5720, file: !3, line: 4035, column: 7)
!5742 = !DILocation(line: 4044, column: 14, scope: !5740)
!5743 = !DILocation(line: 4045, column: 16, scope: !5740)
!5744 = !DILocation(line: 4045, column: 14, scope: !5740)
!5745 = !DILocation(line: 4046, column: 16, scope: !5740)
!5746 = !DILocation(line: 4046, column: 14, scope: !5740)
!5747 = !DILocation(line: 4047, column: 16, scope: !5740)
!5748 = !DILocation(line: 4047, column: 14, scope: !5740)
!5749 = !DILocation(line: 4049, column: 10, scope: !5720)
!5750 = !DILocation(line: 4050, column: 10, scope: !5720)
!5751 = !DILocation(line: 4051, column: 10, scope: !5720)
!5752 = !DILocation(line: 4053, column: 11, scope: !5720)
!5753 = !DILocation(line: 4053, column: 18, scope: !5720)
!5754 = !DILocation(line: 4053, column: 25, scope: !5720)
!5755 = !DILocation(line: 4053, column: 10, scope: !5720)
!5756 = !DILocation(line: 4053, column: 8, scope: !5720)
!5757 = !DILocation(line: 4054, column: 10, scope: !5720)
!5758 = !DILocation(line: 4054, column: 17, scope: !5720)
!5759 = !DILocation(line: 4054, column: 24, scope: !5720)
!5760 = !DILocation(line: 4054, column: 9, scope: !5720)
!5761 = !DILocation(line: 4054, column: 7, scope: !5720)
!5762 = !DILocation(line: 4055, column: 10, scope: !5720)
!5763 = !DILocation(line: 4057, column: 11, scope: !5720)
!5764 = !DILocation(line: 4057, column: 3, scope: !5720)
!5765 = !DILocation(line: 4059, column: 7, scope: !5766)
!5766 = distinct !DILexicalBlock(scope: !5720, file: !3, line: 4059, column: 7)
!5767 = !DILocation(line: 4059, column: 11, scope: !5766)
!5768 = !DILocation(line: 4059, column: 7, scope: !5720)
!5769 = !DILocation(line: 4061, column: 12, scope: !5770)
!5770 = distinct !DILexicalBlock(scope: !5771, file: !3, line: 4061, column: 11)
!5771 = distinct !DILexicalBlock(scope: !5766, file: !3, line: 4060, column: 5)
!5772 = !DILocation(line: 4061, column: 21, scope: !5770)
!5773 = !DILocation(line: 4061, column: 19, scope: !5770)
!5774 = !DILocation(line: 4061, column: 30, scope: !5770)
!5775 = !DILocation(line: 4061, column: 28, scope: !5770)
!5776 = !DILocation(line: 4061, column: 39, scope: !5770)
!5777 = !DILocation(line: 4061, column: 37, scope: !5770)
!5778 = !DILocation(line: 4061, column: 47, scope: !5770)
!5779 = !DILocation(line: 4061, column: 50, scope: !5770)
!5780 = !DILocation(line: 4061, column: 55, scope: !5770)
!5781 = !DILocation(line: 4061, column: 11, scope: !5771)
!5782 = !DILocation(line: 4063, column: 4, scope: !5783)
!5783 = distinct !DILexicalBlock(scope: !5770, file: !3, line: 4062, column: 2)
!5784 = !DILocation(line: 4063, column: 7, scope: !5783)
!5785 = !DILocation(line: 4063, column: 10, scope: !5783)
!5786 = !DILocation(line: 4064, column: 14, scope: !5783)
!5787 = !DILocation(line: 4064, column: 4, scope: !5783)
!5788 = !DILocation(line: 4064, column: 7, scope: !5783)
!5789 = !DILocation(line: 4064, column: 12, scope: !5783)
!5790 = !DILocation(line: 4066, column: 4, scope: !5783)
!5791 = !DILocation(line: 4076, column: 21, scope: !5792)
!5792 = distinct !DILexicalBlock(scope: !5793, file: !3, line: 4075, column: 6)
!5793 = distinct !DILexicalBlock(scope: !5783, file: !3, line: 4067, column: 8)
!5794 = !DILocation(line: 4076, column: 28, scope: !5792)
!5795 = !DILocation(line: 4076, column: 34, scope: !5792)
!5796 = !DILocation(line: 4076, column: 42, scope: !5792)
!5797 = !DILocation(line: 4076, column: 40, scope: !5792)
!5798 = !DILocation(line: 4076, column: 8, scope: !5792)
!5799 = !DILocation(line: 4076, column: 11, scope: !5792)
!5800 = !DILocation(line: 4076, column: 18, scope: !5792)
!5801 = !DILocation(line: 4077, column: 21, scope: !5792)
!5802 = !DILocation(line: 4077, column: 28, scope: !5792)
!5803 = !DILocation(line: 4077, column: 34, scope: !5792)
!5804 = !DILocation(line: 4077, column: 42, scope: !5792)
!5805 = !DILocation(line: 4077, column: 40, scope: !5792)
!5806 = !DILocation(line: 4077, column: 8, scope: !5792)
!5807 = !DILocation(line: 4077, column: 11, scope: !5792)
!5808 = !DILocation(line: 4077, column: 18, scope: !5792)
!5809 = !DILocation(line: 4080, column: 15, scope: !5783)
!5810 = !DILocation(line: 4080, column: 4, scope: !5783)
!5811 = !DILocation(line: 4081, column: 2, scope: !5783)
!5812 = !DILocation(line: 4082, column: 16, scope: !5813)
!5813 = distinct !DILexicalBlock(scope: !5770, file: !3, line: 4082, column: 16)
!5814 = !DILocation(line: 4082, column: 21, scope: !5813)
!5815 = !DILocation(line: 4082, column: 16, scope: !5770)
!5816 = !DILocation(line: 4083, column: 12, scope: !5813)
!5817 = !DILocation(line: 4083, column: 2, scope: !5813)
!5818 = !DILocation(line: 4083, column: 5, scope: !5813)
!5819 = !DILocation(line: 4083, column: 10, scope: !5813)
!5820 = !DILocation(line: 4084, column: 5, scope: !5771)
!5821 = !DILocation(line: 4085, column: 12, scope: !5822)
!5822 = distinct !DILexicalBlock(scope: !5766, file: !3, line: 4085, column: 12)
!5823 = !DILocation(line: 4085, column: 16, scope: !5822)
!5824 = !DILocation(line: 4085, column: 25, scope: !5822)
!5825 = !DILocation(line: 4085, column: 29, scope: !5822)
!5826 = !DILocation(line: 4085, column: 34, scope: !5822)
!5827 = !DILocation(line: 4085, column: 43, scope: !5822)
!5828 = !DILocation(line: 4085, column: 46, scope: !5822)
!5829 = !DILocation(line: 4085, column: 51, scope: !5822)
!5830 = !DILocation(line: 4085, column: 12, scope: !5766)
!5831 = !DILocation(line: 4087, column: 11, scope: !5832)
!5832 = distinct !DILexicalBlock(scope: !5833, file: !3, line: 4087, column: 11)
!5833 = distinct !DILexicalBlock(scope: !5822, file: !3, line: 4086, column: 5)
!5834 = !DILocation(line: 4087, column: 20, scope: !5832)
!5835 = !DILocation(line: 4087, column: 18, scope: !5832)
!5836 = !DILocation(line: 4087, column: 29, scope: !5832)
!5837 = !DILocation(line: 4087, column: 27, scope: !5832)
!5838 = !DILocation(line: 4087, column: 38, scope: !5832)
!5839 = !DILocation(line: 4087, column: 36, scope: !5832)
!5840 = !DILocation(line: 4087, column: 11, scope: !5833)
!5841 = !DILocation(line: 4089, column: 4, scope: !5842)
!5842 = distinct !DILexicalBlock(scope: !5832, file: !3, line: 4088, column: 2)
!5843 = !DILocation(line: 4089, column: 7, scope: !5842)
!5844 = !DILocation(line: 4089, column: 10, scope: !5842)
!5845 = !DILocation(line: 4090, column: 14, scope: !5842)
!5846 = !DILocation(line: 4090, column: 4, scope: !5842)
!5847 = !DILocation(line: 4090, column: 7, scope: !5842)
!5848 = !DILocation(line: 4090, column: 12, scope: !5842)
!5849 = !DILocation(line: 4091, column: 22, scope: !5842)
!5850 = !DILocation(line: 4091, column: 29, scope: !5842)
!5851 = !DILocation(line: 4091, column: 36, scope: !5842)
!5852 = !DILocation(line: 4091, column: 43, scope: !5842)
!5853 = !DILocation(line: 4091, column: 48, scope: !5842)
!5854 = !DILocation(line: 4091, column: 41, scope: !5842)
!5855 = !DILocation(line: 4091, column: 20, scope: !5842)
!5856 = !DILocation(line: 4091, column: 4, scope: !5842)
!5857 = !DILocation(line: 4091, column: 7, scope: !5842)
!5858 = !DILocation(line: 4091, column: 18, scope: !5842)
!5859 = !DILocation(line: 4102, column: 21, scope: !5860)
!5860 = distinct !DILexicalBlock(scope: !5861, file: !3, line: 4101, column: 6)
!5861 = distinct !DILexicalBlock(scope: !5842, file: !3, line: 4093, column: 8)
!5862 = !DILocation(line: 4102, column: 28, scope: !5860)
!5863 = !DILocation(line: 4102, column: 34, scope: !5860)
!5864 = !DILocation(line: 4102, column: 42, scope: !5860)
!5865 = !DILocation(line: 4102, column: 40, scope: !5860)
!5866 = !DILocation(line: 4102, column: 8, scope: !5860)
!5867 = !DILocation(line: 4102, column: 11, scope: !5860)
!5868 = !DILocation(line: 4102, column: 18, scope: !5860)
!5869 = !DILocation(line: 4103, column: 21, scope: !5860)
!5870 = !DILocation(line: 4103, column: 28, scope: !5860)
!5871 = !DILocation(line: 4103, column: 34, scope: !5860)
!5872 = !DILocation(line: 4103, column: 42, scope: !5860)
!5873 = !DILocation(line: 4103, column: 40, scope: !5860)
!5874 = !DILocation(line: 4103, column: 8, scope: !5860)
!5875 = !DILocation(line: 4103, column: 11, scope: !5860)
!5876 = !DILocation(line: 4103, column: 18, scope: !5860)
!5877 = !DILocation(line: 4105, column: 24, scope: !5842)
!5878 = !DILocation(line: 4105, column: 27, scope: !5842)
!5879 = !DILocation(line: 4105, column: 4, scope: !5842)
!5880 = !DILocation(line: 4106, column: 2, scope: !5842)
!5881 = !DILocation(line: 4109, column: 4, scope: !5882)
!5882 = distinct !DILexicalBlock(scope: !5832, file: !3, line: 4108, column: 2)
!5883 = !DILocation(line: 4109, column: 7, scope: !5882)
!5884 = !DILocation(line: 4109, column: 10, scope: !5882)
!5885 = !DILocation(line: 4110, column: 14, scope: !5882)
!5886 = !DILocation(line: 4110, column: 4, scope: !5882)
!5887 = !DILocation(line: 4110, column: 7, scope: !5882)
!5888 = !DILocation(line: 4110, column: 12, scope: !5882)
!5889 = !DILocation(line: 4112, column: 5, scope: !5833)
!5890 = !DILocation(line: 4115, column: 7, scope: !5891)
!5891 = distinct !DILexicalBlock(scope: !5822, file: !3, line: 4114, column: 5)
!5892 = !DILocation(line: 4115, column: 10, scope: !5891)
!5893 = !DILocation(line: 4115, column: 13, scope: !5891)
!5894 = !DILocation(line: 4116, column: 17, scope: !5891)
!5895 = !DILocation(line: 4116, column: 7, scope: !5891)
!5896 = !DILocation(line: 4116, column: 10, scope: !5891)
!5897 = !DILocation(line: 4116, column: 15, scope: !5891)
!5898 = !DILocation(line: 4117, column: 7, scope: !5891)
!5899 = !DILocation(line: 4128, column: 17, scope: !5900)
!5900 = distinct !DILexicalBlock(scope: !5901, file: !3, line: 4127, column: 2)
!5901 = distinct !DILexicalBlock(scope: !5891, file: !3, line: 4119, column: 11)
!5902 = !DILocation(line: 4128, column: 24, scope: !5900)
!5903 = !DILocation(line: 4128, column: 30, scope: !5900)
!5904 = !DILocation(line: 4128, column: 38, scope: !5900)
!5905 = !DILocation(line: 4128, column: 36, scope: !5900)
!5906 = !DILocation(line: 4128, column: 4, scope: !5900)
!5907 = !DILocation(line: 4128, column: 7, scope: !5900)
!5908 = !DILocation(line: 4128, column: 14, scope: !5900)
!5909 = !DILocation(line: 4129, column: 17, scope: !5900)
!5910 = !DILocation(line: 4129, column: 24, scope: !5900)
!5911 = !DILocation(line: 4129, column: 30, scope: !5900)
!5912 = !DILocation(line: 4129, column: 38, scope: !5900)
!5913 = !DILocation(line: 4129, column: 36, scope: !5900)
!5914 = !DILocation(line: 4129, column: 4, scope: !5900)
!5915 = !DILocation(line: 4129, column: 7, scope: !5900)
!5916 = !DILocation(line: 4129, column: 14, scope: !5900)
!5917 = !DILocation(line: 4131, column: 27, scope: !5891)
!5918 = !DILocation(line: 4131, column: 30, scope: !5891)
!5919 = !DILocation(line: 4131, column: 7, scope: !5891)
!5920 = !DILocation(line: 4132, column: 7, scope: !5891)
!5921 = !DILocation(line: 4132, column: 10, scope: !5891)
!5922 = !DILocation(line: 4132, column: 23, scope: !5891)
!5923 = !DILocation(line: 4134, column: 1, scope: !5720)
!5924 = distinct !DISubprogram(name: "encode_vax_f", scope: !3, file: !3, line: 4202, type: !417, scopeLine: 4204, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!5925 = !DILocalVariable(name: "fmt", arg: 1, scope: !5924, file: !3, line: 4202, type: !419)
!5926 = !DILocation(line: 4202, column: 41, scope: !5924)
!5927 = !DILocalVariable(name: "buf", arg: 2, scope: !5924, file: !3, line: 4202, type: !420)
!5928 = !DILocation(line: 4202, column: 69, scope: !5924)
!5929 = !DILocalVariable(name: "r", arg: 3, scope: !5924, file: !3, line: 4203, type: !6)
!5930 = !DILocation(line: 4203, column: 31, scope: !5924)
!5931 = !DILocalVariable(name: "sign", scope: !5924, file: !3, line: 4205, type: !20)
!5932 = !DILocation(line: 4205, column: 17, scope: !5924)
!5933 = !DILocalVariable(name: "exp", scope: !5924, file: !3, line: 4205, type: !20)
!5934 = !DILocation(line: 4205, column: 23, scope: !5924)
!5935 = !DILocalVariable(name: "sig", scope: !5924, file: !3, line: 4205, type: !20)
!5936 = !DILocation(line: 4205, column: 28, scope: !5924)
!5937 = !DILocalVariable(name: "image", scope: !5924, file: !3, line: 4205, type: !20)
!5938 = !DILocation(line: 4205, column: 33, scope: !5924)
!5939 = !DILocation(line: 4207, column: 10, scope: !5924)
!5940 = !DILocation(line: 4207, column: 13, scope: !5924)
!5941 = !DILocation(line: 4207, column: 18, scope: !5924)
!5942 = !DILocation(line: 4207, column: 8, scope: !5924)
!5943 = !DILocation(line: 4209, column: 11, scope: !5924)
!5944 = !DILocation(line: 4209, column: 14, scope: !5924)
!5945 = !DILocation(line: 4209, column: 3, scope: !5924)
!5946 = !DILocation(line: 4212, column: 13, scope: !5947)
!5947 = distinct !DILexicalBlock(scope: !5924, file: !3, line: 4210, column: 5)
!5948 = !DILocation(line: 4213, column: 7, scope: !5947)
!5949 = !DILocation(line: 4217, column: 28, scope: !5947)
!5950 = !DILocation(line: 4217, column: 26, scope: !5947)
!5951 = !DILocation(line: 4217, column: 13, scope: !5947)
!5952 = !DILocation(line: 4218, column: 7, scope: !5947)
!5953 = !DILocation(line: 4221, column: 14, scope: !5947)
!5954 = !DILocation(line: 4221, column: 17, scope: !5947)
!5955 = !DILocation(line: 4221, column: 30, scope: !5947)
!5956 = !DILocation(line: 4221, column: 60, scope: !5947)
!5957 = !DILocation(line: 4221, column: 11, scope: !5947)
!5958 = !DILocation(line: 4222, column: 13, scope: !5947)
!5959 = !DILocation(line: 4222, column: 26, scope: !5947)
!5960 = !DILocation(line: 4222, column: 11, scope: !5947)
!5961 = !DILocation(line: 4224, column: 16, scope: !5947)
!5962 = !DILocation(line: 4224, column: 20, scope: !5947)
!5963 = !DILocation(line: 4224, column: 27, scope: !5947)
!5964 = !DILocation(line: 4224, column: 13, scope: !5947)
!5965 = !DILocation(line: 4225, column: 16, scope: !5947)
!5966 = !DILocation(line: 4225, column: 13, scope: !5947)
!5967 = !DILocation(line: 4226, column: 16, scope: !5947)
!5968 = !DILocation(line: 4226, column: 20, scope: !5947)
!5969 = !DILocation(line: 4226, column: 13, scope: !5947)
!5970 = !DILocation(line: 4227, column: 16, scope: !5947)
!5971 = !DILocation(line: 4227, column: 20, scope: !5947)
!5972 = !DILocation(line: 4227, column: 13, scope: !5947)
!5973 = !DILocation(line: 4228, column: 7, scope: !5947)
!5974 = !DILocation(line: 4231, column: 7, scope: !5947)
!5975 = !DILocation(line: 4232, column: 5, scope: !5947)
!5976 = !DILocation(line: 4234, column: 12, scope: !5924)
!5977 = !DILocation(line: 4234, column: 3, scope: !5924)
!5978 = !DILocation(line: 4234, column: 10, scope: !5924)
!5979 = !DILocation(line: 4235, column: 1, scope: !5924)
!5980 = distinct !DISubprogram(name: "decode_vax_f", scope: !3, file: !3, line: 4238, type: !424, scopeLine: 4240, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!5981 = !DILocalVariable(name: "fmt", arg: 1, scope: !5980, file: !3, line: 4238, type: !419)
!5982 = !DILocation(line: 4238, column: 41, scope: !5980)
!5983 = !DILocalVariable(name: "r", arg: 2, scope: !5980, file: !3, line: 4239, type: !426)
!5984 = !DILocation(line: 4239, column: 25, scope: !5980)
!5985 = !DILocalVariable(name: "buf", arg: 3, scope: !5980, file: !3, line: 4239, type: !427)
!5986 = !DILocation(line: 4239, column: 40, scope: !5980)
!5987 = !DILocalVariable(name: "image", scope: !5980, file: !3, line: 4241, type: !20)
!5988 = !DILocation(line: 4241, column: 17, scope: !5980)
!5989 = !DILocation(line: 4241, column: 25, scope: !5980)
!5990 = !DILocation(line: 4241, column: 32, scope: !5980)
!5991 = !DILocalVariable(name: "exp", scope: !5980, file: !3, line: 4242, type: !398)
!5992 = !DILocation(line: 4242, column: 7, scope: !5980)
!5993 = !DILocation(line: 4242, column: 14, scope: !5980)
!5994 = !DILocation(line: 4242, column: 20, scope: !5980)
!5995 = !DILocation(line: 4242, column: 26, scope: !5980)
!5996 = !DILocation(line: 4242, column: 13, scope: !5980)
!5997 = !DILocation(line: 4244, column: 11, scope: !5980)
!5998 = !DILocation(line: 4244, column: 3, scope: !5980)
!5999 = !DILocation(line: 4246, column: 7, scope: !6000)
!6000 = distinct !DILexicalBlock(scope: !5980, file: !3, line: 4246, column: 7)
!6001 = !DILocation(line: 4246, column: 11, scope: !6000)
!6002 = !DILocation(line: 4246, column: 7, scope: !5980)
!6003 = !DILocation(line: 4248, column: 7, scope: !6004)
!6004 = distinct !DILexicalBlock(scope: !6000, file: !3, line: 4247, column: 5)
!6005 = !DILocation(line: 4248, column: 10, scope: !6004)
!6006 = !DILocation(line: 4248, column: 13, scope: !6004)
!6007 = !DILocation(line: 4249, column: 18, scope: !6004)
!6008 = !DILocation(line: 4249, column: 24, scope: !6004)
!6009 = !DILocation(line: 4249, column: 31, scope: !6004)
!6010 = !DILocation(line: 4249, column: 17, scope: !6004)
!6011 = !DILocation(line: 4249, column: 7, scope: !6004)
!6012 = !DILocation(line: 4249, column: 10, scope: !6004)
!6013 = !DILocation(line: 4249, column: 15, scope: !6004)
!6014 = !DILocation(line: 4250, column: 7, scope: !6004)
!6015 = !DILocation(line: 4252, column: 17, scope: !6004)
!6016 = !DILocation(line: 4252, column: 23, scope: !6004)
!6017 = !DILocation(line: 4252, column: 31, scope: !6004)
!6018 = !DILocation(line: 4252, column: 42, scope: !6004)
!6019 = !DILocation(line: 4252, column: 48, scope: !6004)
!6020 = !DILocation(line: 4252, column: 55, scope: !6004)
!6021 = !DILocation(line: 4252, column: 38, scope: !6004)
!6022 = !DILocation(line: 4252, column: 13, scope: !6004)
!6023 = !DILocation(line: 4253, column: 26, scope: !6004)
!6024 = !DILocation(line: 4253, column: 32, scope: !6004)
!6025 = !DILocation(line: 4253, column: 62, scope: !6004)
!6026 = !DILocation(line: 4253, column: 7, scope: !6004)
!6027 = !DILocation(line: 4253, column: 10, scope: !6004)
!6028 = !DILocation(line: 4253, column: 23, scope: !6004)
!6029 = !DILocation(line: 4254, column: 5, scope: !6004)
!6030 = !DILocation(line: 4255, column: 1, scope: !5980)
!6031 = distinct !DISubprogram(name: "encode_vax_d", scope: !3, file: !3, line: 4258, type: !417, scopeLine: 4260, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!6032 = !DILocalVariable(name: "fmt", arg: 1, scope: !6031, file: !3, line: 4258, type: !419)
!6033 = !DILocation(line: 4258, column: 41, scope: !6031)
!6034 = !DILocalVariable(name: "buf", arg: 2, scope: !6031, file: !3, line: 4258, type: !420)
!6035 = !DILocation(line: 4258, column: 69, scope: !6031)
!6036 = !DILocalVariable(name: "r", arg: 3, scope: !6031, file: !3, line: 4259, type: !6)
!6037 = !DILocation(line: 4259, column: 31, scope: !6031)
!6038 = !DILocalVariable(name: "image0", scope: !6031, file: !3, line: 4261, type: !20)
!6039 = !DILocation(line: 4261, column: 17, scope: !6031)
!6040 = !DILocalVariable(name: "image1", scope: !6031, file: !3, line: 4261, type: !20)
!6041 = !DILocation(line: 4261, column: 25, scope: !6031)
!6042 = !DILocalVariable(name: "sign", scope: !6031, file: !3, line: 4261, type: !20)
!6043 = !DILocation(line: 4261, column: 33, scope: !6031)
!6044 = !DILocation(line: 4261, column: 40, scope: !6031)
!6045 = !DILocation(line: 4261, column: 43, scope: !6031)
!6046 = !DILocation(line: 4261, column: 48, scope: !6031)
!6047 = !DILocation(line: 4263, column: 11, scope: !6031)
!6048 = !DILocation(line: 4263, column: 14, scope: !6031)
!6049 = !DILocation(line: 4263, column: 3, scope: !6031)
!6050 = !DILocation(line: 4266, column: 23, scope: !6051)
!6051 = distinct !DILexicalBlock(scope: !6031, file: !3, line: 4264, column: 5)
!6052 = !DILocation(line: 4266, column: 14, scope: !6051)
!6053 = !DILocation(line: 4267, column: 7, scope: !6051)
!6054 = !DILocation(line: 4271, column: 29, scope: !6051)
!6055 = !DILocation(line: 4271, column: 27, scope: !6051)
!6056 = !DILocation(line: 4271, column: 14, scope: !6051)
!6057 = !DILocation(line: 4272, column: 14, scope: !6051)
!6058 = !DILocation(line: 4273, column: 7, scope: !6051)
!6059 = !DILocation(line: 4279, column: 13, scope: !6060)
!6060 = distinct !DILexicalBlock(scope: !6061, file: !3, line: 4278, column: 2)
!6061 = distinct !DILexicalBlock(scope: !6051, file: !3, line: 4277, column: 11)
!6062 = !DILocation(line: 4279, column: 16, scope: !6060)
!6063 = !DILocation(line: 4279, column: 11, scope: !6060)
!6064 = !DILocation(line: 4280, column: 14, scope: !6060)
!6065 = !DILocation(line: 4280, column: 21, scope: !6060)
!6066 = !DILocation(line: 4280, column: 35, scope: !6060)
!6067 = !DILocation(line: 4280, column: 11, scope: !6060)
!6068 = !DILocation(line: 4281, column: 14, scope: !6060)
!6069 = !DILocation(line: 4281, column: 21, scope: !6060)
!6070 = !DILocation(line: 4281, column: 38, scope: !6060)
!6071 = !DILocation(line: 4281, column: 45, scope: !6060)
!6072 = !DILocation(line: 4281, column: 11, scope: !6060)
!6073 = !DILocation(line: 4293, column: 18, scope: !6051)
!6074 = !DILocation(line: 4293, column: 25, scope: !6051)
!6075 = !DILocation(line: 4293, column: 35, scope: !6051)
!6076 = !DILocation(line: 4293, column: 42, scope: !6051)
!6077 = !DILocation(line: 4293, column: 32, scope: !6051)
!6078 = !DILocation(line: 4293, column: 50, scope: !6051)
!6079 = !DILocation(line: 4293, column: 14, scope: !6051)
!6080 = !DILocation(line: 4294, column: 18, scope: !6051)
!6081 = !DILocation(line: 4294, column: 25, scope: !6051)
!6082 = !DILocation(line: 4294, column: 35, scope: !6051)
!6083 = !DILocation(line: 4294, column: 42, scope: !6051)
!6084 = !DILocation(line: 4294, column: 32, scope: !6051)
!6085 = !DILocation(line: 4294, column: 50, scope: !6051)
!6086 = !DILocation(line: 4294, column: 14, scope: !6051)
!6087 = !DILocation(line: 4297, column: 17, scope: !6051)
!6088 = !DILocation(line: 4297, column: 14, scope: !6051)
!6089 = !DILocation(line: 4298, column: 18, scope: !6051)
!6090 = !DILocation(line: 4298, column: 31, scope: !6051)
!6091 = !DILocation(line: 4298, column: 38, scope: !6051)
!6092 = !DILocation(line: 4298, column: 17, scope: !6051)
!6093 = !DILocation(line: 4298, column: 14, scope: !6051)
!6094 = !DILocation(line: 4299, column: 7, scope: !6051)
!6095 = !DILocation(line: 4302, column: 7, scope: !6051)
!6096 = !DILocation(line: 4303, column: 5, scope: !6051)
!6097 = !DILocation(line: 4308, column: 14, scope: !6098)
!6098 = distinct !DILexicalBlock(scope: !6031, file: !3, line: 4305, column: 7)
!6099 = !DILocation(line: 4308, column: 5, scope: !6098)
!6100 = !DILocation(line: 4308, column: 12, scope: !6098)
!6101 = !DILocation(line: 4308, column: 31, scope: !6098)
!6102 = !DILocation(line: 4308, column: 22, scope: !6098)
!6103 = !DILocation(line: 4308, column: 29, scope: !6098)
!6104 = !DILocation(line: 4309, column: 1, scope: !6031)
!6105 = distinct !DISubprogram(name: "decode_vax_d", scope: !3, file: !3, line: 4312, type: !424, scopeLine: 4314, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!6106 = !DILocalVariable(name: "fmt", arg: 1, scope: !6105, file: !3, line: 4312, type: !419)
!6107 = !DILocation(line: 4312, column: 41, scope: !6105)
!6108 = !DILocalVariable(name: "r", arg: 2, scope: !6105, file: !3, line: 4313, type: !426)
!6109 = !DILocation(line: 4313, column: 25, scope: !6105)
!6110 = !DILocalVariable(name: "buf", arg: 3, scope: !6105, file: !3, line: 4313, type: !427)
!6111 = !DILocation(line: 4313, column: 40, scope: !6105)
!6112 = !DILocalVariable(name: "image0", scope: !6105, file: !3, line: 4315, type: !20)
!6113 = !DILocation(line: 4315, column: 17, scope: !6105)
!6114 = !DILocalVariable(name: "image1", scope: !6105, file: !3, line: 4315, type: !20)
!6115 = !DILocation(line: 4315, column: 25, scope: !6105)
!6116 = !DILocalVariable(name: "exp", scope: !6105, file: !3, line: 4316, type: !398)
!6117 = !DILocation(line: 4316, column: 7, scope: !6105)
!6118 = !DILocation(line: 4321, column: 14, scope: !6119)
!6119 = distinct !DILexicalBlock(scope: !6105, file: !3, line: 4318, column: 7)
!6120 = !DILocation(line: 4321, column: 12, scope: !6119)
!6121 = !DILocation(line: 4321, column: 31, scope: !6119)
!6122 = !DILocation(line: 4321, column: 29, scope: !6119)
!6123 = !DILocation(line: 4322, column: 10, scope: !6105)
!6124 = !DILocation(line: 4323, column: 10, scope: !6105)
!6125 = !DILocation(line: 4325, column: 10, scope: !6105)
!6126 = !DILocation(line: 4325, column: 17, scope: !6105)
!6127 = !DILocation(line: 4325, column: 23, scope: !6105)
!6128 = !DILocation(line: 4325, column: 9, scope: !6105)
!6129 = !DILocation(line: 4325, column: 7, scope: !6105)
!6130 = !DILocation(line: 4327, column: 11, scope: !6105)
!6131 = !DILocation(line: 4327, column: 3, scope: !6105)
!6132 = !DILocation(line: 4329, column: 7, scope: !6133)
!6133 = distinct !DILexicalBlock(scope: !6105, file: !3, line: 4329, column: 7)
!6134 = !DILocation(line: 4329, column: 11, scope: !6133)
!6135 = !DILocation(line: 4329, column: 7, scope: !6105)
!6136 = !DILocation(line: 4331, column: 7, scope: !6137)
!6137 = distinct !DILexicalBlock(scope: !6133, file: !3, line: 4330, column: 5)
!6138 = !DILocation(line: 4331, column: 10, scope: !6137)
!6139 = !DILocation(line: 4331, column: 13, scope: !6137)
!6140 = !DILocation(line: 4332, column: 18, scope: !6137)
!6141 = !DILocation(line: 4332, column: 25, scope: !6137)
!6142 = !DILocation(line: 4332, column: 32, scope: !6137)
!6143 = !DILocation(line: 4332, column: 17, scope: !6137)
!6144 = !DILocation(line: 4332, column: 7, scope: !6137)
!6145 = !DILocation(line: 4332, column: 10, scope: !6137)
!6146 = !DILocation(line: 4332, column: 15, scope: !6137)
!6147 = !DILocation(line: 4333, column: 7, scope: !6137)
!6148 = !DILocation(line: 4337, column: 18, scope: !6137)
!6149 = !DILocation(line: 4337, column: 25, scope: !6137)
!6150 = !DILocation(line: 4337, column: 33, scope: !6137)
!6151 = !DILocation(line: 4337, column: 44, scope: !6137)
!6152 = !DILocation(line: 4337, column: 51, scope: !6137)
!6153 = !DILocation(line: 4337, column: 58, scope: !6137)
!6154 = !DILocation(line: 4337, column: 40, scope: !6137)
!6155 = !DILocation(line: 4337, column: 14, scope: !6137)
!6156 = !DILocation(line: 4338, column: 18, scope: !6137)
!6157 = !DILocation(line: 4338, column: 25, scope: !6137)
!6158 = !DILocation(line: 4338, column: 35, scope: !6137)
!6159 = !DILocation(line: 4338, column: 46, scope: !6137)
!6160 = !DILocation(line: 4338, column: 53, scope: !6137)
!6161 = !DILocation(line: 4338, column: 60, scope: !6137)
!6162 = !DILocation(line: 4338, column: 42, scope: !6137)
!6163 = !DILocation(line: 4338, column: 14, scope: !6137)
!6164 = !DILocation(line: 4342, column: 14, scope: !6165)
!6165 = distinct !DILexicalBlock(scope: !6166, file: !3, line: 4341, column: 2)
!6166 = distinct !DILexicalBlock(scope: !6137, file: !3, line: 4340, column: 11)
!6167 = !DILocation(line: 4342, column: 21, scope: !6165)
!6168 = !DILocation(line: 4342, column: 27, scope: !6165)
!6169 = !DILocation(line: 4342, column: 35, scope: !6165)
!6170 = !DILocation(line: 4342, column: 33, scope: !6165)
!6171 = !DILocation(line: 4342, column: 11, scope: !6165)
!6172 = !DILocation(line: 4343, column: 11, scope: !6165)
!6173 = !DILocation(line: 4344, column: 11, scope: !6165)
!6174 = !DILocation(line: 4345, column: 22, scope: !6165)
!6175 = !DILocation(line: 4345, column: 4, scope: !6165)
!6176 = !DILocation(line: 4345, column: 7, scope: !6165)
!6177 = !DILocation(line: 4345, column: 20, scope: !6165)
!6178 = !DILocation(line: 4354, column: 5, scope: !6137)
!6179 = !DILocation(line: 4355, column: 1, scope: !6105)
!6180 = distinct !DISubprogram(name: "encode_vax_g", scope: !3, file: !3, line: 4358, type: !417, scopeLine: 4360, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!6181 = !DILocalVariable(name: "fmt", arg: 1, scope: !6180, file: !3, line: 4358, type: !419)
!6182 = !DILocation(line: 4358, column: 41, scope: !6180)
!6183 = !DILocalVariable(name: "buf", arg: 2, scope: !6180, file: !3, line: 4358, type: !420)
!6184 = !DILocation(line: 4358, column: 69, scope: !6180)
!6185 = !DILocalVariable(name: "r", arg: 3, scope: !6180, file: !3, line: 4359, type: !6)
!6186 = !DILocation(line: 4359, column: 31, scope: !6180)
!6187 = !DILocalVariable(name: "image0", scope: !6180, file: !3, line: 4361, type: !20)
!6188 = !DILocation(line: 4361, column: 17, scope: !6180)
!6189 = !DILocalVariable(name: "image1", scope: !6180, file: !3, line: 4361, type: !20)
!6190 = !DILocation(line: 4361, column: 25, scope: !6180)
!6191 = !DILocalVariable(name: "sign", scope: !6180, file: !3, line: 4361, type: !20)
!6192 = !DILocation(line: 4361, column: 33, scope: !6180)
!6193 = !DILocation(line: 4361, column: 40, scope: !6180)
!6194 = !DILocation(line: 4361, column: 43, scope: !6180)
!6195 = !DILocation(line: 4361, column: 48, scope: !6180)
!6196 = !DILocation(line: 4363, column: 11, scope: !6180)
!6197 = !DILocation(line: 4363, column: 14, scope: !6180)
!6198 = !DILocation(line: 4363, column: 3, scope: !6180)
!6199 = !DILocation(line: 4366, column: 23, scope: !6200)
!6200 = distinct !DILexicalBlock(scope: !6180, file: !3, line: 4364, column: 5)
!6201 = !DILocation(line: 4366, column: 14, scope: !6200)
!6202 = !DILocation(line: 4367, column: 7, scope: !6200)
!6203 = !DILocation(line: 4371, column: 29, scope: !6200)
!6204 = !DILocation(line: 4371, column: 27, scope: !6200)
!6205 = !DILocation(line: 4371, column: 14, scope: !6200)
!6206 = !DILocation(line: 4372, column: 14, scope: !6200)
!6207 = !DILocation(line: 4373, column: 7, scope: !6200)
!6208 = !DILocation(line: 4379, column: 13, scope: !6209)
!6209 = distinct !DILexicalBlock(scope: !6210, file: !3, line: 4378, column: 2)
!6210 = distinct !DILexicalBlock(scope: !6200, file: !3, line: 4377, column: 11)
!6211 = !DILocation(line: 4379, column: 16, scope: !6209)
!6212 = !DILocation(line: 4379, column: 11, scope: !6209)
!6213 = !DILocation(line: 4380, column: 14, scope: !6209)
!6214 = !DILocation(line: 4380, column: 21, scope: !6209)
!6215 = !DILocation(line: 4380, column: 35, scope: !6209)
!6216 = !DILocation(line: 4380, column: 11, scope: !6209)
!6217 = !DILocation(line: 4381, column: 14, scope: !6209)
!6218 = !DILocation(line: 4381, column: 21, scope: !6209)
!6219 = !DILocation(line: 4381, column: 38, scope: !6209)
!6220 = !DILocation(line: 4381, column: 45, scope: !6209)
!6221 = !DILocation(line: 4381, column: 11, scope: !6209)
!6222 = !DILocation(line: 4393, column: 18, scope: !6200)
!6223 = !DILocation(line: 4393, column: 25, scope: !6200)
!6224 = !DILocation(line: 4393, column: 35, scope: !6200)
!6225 = !DILocation(line: 4393, column: 42, scope: !6200)
!6226 = !DILocation(line: 4393, column: 32, scope: !6200)
!6227 = !DILocation(line: 4393, column: 50, scope: !6200)
!6228 = !DILocation(line: 4393, column: 14, scope: !6200)
!6229 = !DILocation(line: 4394, column: 18, scope: !6200)
!6230 = !DILocation(line: 4394, column: 25, scope: !6200)
!6231 = !DILocation(line: 4394, column: 35, scope: !6200)
!6232 = !DILocation(line: 4394, column: 42, scope: !6200)
!6233 = !DILocation(line: 4394, column: 32, scope: !6200)
!6234 = !DILocation(line: 4394, column: 50, scope: !6200)
!6235 = !DILocation(line: 4394, column: 14, scope: !6200)
!6236 = !DILocation(line: 4397, column: 17, scope: !6200)
!6237 = !DILocation(line: 4397, column: 14, scope: !6200)
!6238 = !DILocation(line: 4398, column: 18, scope: !6200)
!6239 = !DILocation(line: 4398, column: 31, scope: !6200)
!6240 = !DILocation(line: 4398, column: 39, scope: !6200)
!6241 = !DILocation(line: 4398, column: 17, scope: !6200)
!6242 = !DILocation(line: 4398, column: 14, scope: !6200)
!6243 = !DILocation(line: 4399, column: 7, scope: !6200)
!6244 = !DILocation(line: 4402, column: 7, scope: !6200)
!6245 = !DILocation(line: 4403, column: 5, scope: !6200)
!6246 = !DILocation(line: 4408, column: 14, scope: !6247)
!6247 = distinct !DILexicalBlock(scope: !6180, file: !3, line: 4405, column: 7)
!6248 = !DILocation(line: 4408, column: 5, scope: !6247)
!6249 = !DILocation(line: 4408, column: 12, scope: !6247)
!6250 = !DILocation(line: 4408, column: 31, scope: !6247)
!6251 = !DILocation(line: 4408, column: 22, scope: !6247)
!6252 = !DILocation(line: 4408, column: 29, scope: !6247)
!6253 = !DILocation(line: 4409, column: 1, scope: !6180)
!6254 = distinct !DISubprogram(name: "decode_vax_g", scope: !3, file: !3, line: 4412, type: !424, scopeLine: 4414, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!6255 = !DILocalVariable(name: "fmt", arg: 1, scope: !6254, file: !3, line: 4412, type: !419)
!6256 = !DILocation(line: 4412, column: 41, scope: !6254)
!6257 = !DILocalVariable(name: "r", arg: 2, scope: !6254, file: !3, line: 4413, type: !426)
!6258 = !DILocation(line: 4413, column: 25, scope: !6254)
!6259 = !DILocalVariable(name: "buf", arg: 3, scope: !6254, file: !3, line: 4413, type: !427)
!6260 = !DILocation(line: 4413, column: 40, scope: !6254)
!6261 = !DILocalVariable(name: "image0", scope: !6254, file: !3, line: 4415, type: !20)
!6262 = !DILocation(line: 4415, column: 17, scope: !6254)
!6263 = !DILocalVariable(name: "image1", scope: !6254, file: !3, line: 4415, type: !20)
!6264 = !DILocation(line: 4415, column: 25, scope: !6254)
!6265 = !DILocalVariable(name: "exp", scope: !6254, file: !3, line: 4416, type: !398)
!6266 = !DILocation(line: 4416, column: 7, scope: !6254)
!6267 = !DILocation(line: 4421, column: 14, scope: !6268)
!6268 = distinct !DILexicalBlock(scope: !6254, file: !3, line: 4418, column: 7)
!6269 = !DILocation(line: 4421, column: 12, scope: !6268)
!6270 = !DILocation(line: 4421, column: 31, scope: !6268)
!6271 = !DILocation(line: 4421, column: 29, scope: !6268)
!6272 = !DILocation(line: 4422, column: 10, scope: !6254)
!6273 = !DILocation(line: 4423, column: 10, scope: !6254)
!6274 = !DILocation(line: 4425, column: 10, scope: !6254)
!6275 = !DILocation(line: 4425, column: 17, scope: !6254)
!6276 = !DILocation(line: 4425, column: 23, scope: !6254)
!6277 = !DILocation(line: 4425, column: 9, scope: !6254)
!6278 = !DILocation(line: 4425, column: 7, scope: !6254)
!6279 = !DILocation(line: 4427, column: 11, scope: !6254)
!6280 = !DILocation(line: 4427, column: 3, scope: !6254)
!6281 = !DILocation(line: 4429, column: 7, scope: !6282)
!6282 = distinct !DILexicalBlock(scope: !6254, file: !3, line: 4429, column: 7)
!6283 = !DILocation(line: 4429, column: 11, scope: !6282)
!6284 = !DILocation(line: 4429, column: 7, scope: !6254)
!6285 = !DILocation(line: 4431, column: 7, scope: !6286)
!6286 = distinct !DILexicalBlock(scope: !6282, file: !3, line: 4430, column: 5)
!6287 = !DILocation(line: 4431, column: 10, scope: !6286)
!6288 = !DILocation(line: 4431, column: 13, scope: !6286)
!6289 = !DILocation(line: 4432, column: 18, scope: !6286)
!6290 = !DILocation(line: 4432, column: 25, scope: !6286)
!6291 = !DILocation(line: 4432, column: 32, scope: !6286)
!6292 = !DILocation(line: 4432, column: 17, scope: !6286)
!6293 = !DILocation(line: 4432, column: 7, scope: !6286)
!6294 = !DILocation(line: 4432, column: 10, scope: !6286)
!6295 = !DILocation(line: 4432, column: 15, scope: !6286)
!6296 = !DILocation(line: 4433, column: 7, scope: !6286)
!6297 = !DILocation(line: 4437, column: 18, scope: !6286)
!6298 = !DILocation(line: 4437, column: 25, scope: !6286)
!6299 = !DILocation(line: 4437, column: 32, scope: !6286)
!6300 = !DILocation(line: 4437, column: 43, scope: !6286)
!6301 = !DILocation(line: 4437, column: 50, scope: !6286)
!6302 = !DILocation(line: 4437, column: 57, scope: !6286)
!6303 = !DILocation(line: 4437, column: 39, scope: !6286)
!6304 = !DILocation(line: 4437, column: 14, scope: !6286)
!6305 = !DILocation(line: 4438, column: 18, scope: !6286)
!6306 = !DILocation(line: 4438, column: 25, scope: !6286)
!6307 = !DILocation(line: 4438, column: 35, scope: !6286)
!6308 = !DILocation(line: 4438, column: 46, scope: !6286)
!6309 = !DILocation(line: 4438, column: 53, scope: !6286)
!6310 = !DILocation(line: 4438, column: 60, scope: !6286)
!6311 = !DILocation(line: 4438, column: 42, scope: !6286)
!6312 = !DILocation(line: 4438, column: 14, scope: !6286)
!6313 = !DILocation(line: 4442, column: 14, scope: !6314)
!6314 = distinct !DILexicalBlock(scope: !6315, file: !3, line: 4441, column: 2)
!6315 = distinct !DILexicalBlock(scope: !6286, file: !3, line: 4440, column: 11)
!6316 = !DILocation(line: 4442, column: 21, scope: !6314)
!6317 = !DILocation(line: 4442, column: 27, scope: !6314)
!6318 = !DILocation(line: 4442, column: 35, scope: !6314)
!6319 = !DILocation(line: 4442, column: 33, scope: !6314)
!6320 = !DILocation(line: 4442, column: 11, scope: !6314)
!6321 = !DILocation(line: 4443, column: 11, scope: !6314)
!6322 = !DILocation(line: 4444, column: 11, scope: !6314)
!6323 = !DILocation(line: 4445, column: 22, scope: !6314)
!6324 = !DILocation(line: 4445, column: 4, scope: !6314)
!6325 = !DILocation(line: 4445, column: 7, scope: !6314)
!6326 = !DILocation(line: 4445, column: 20, scope: !6314)
!6327 = !DILocation(line: 4454, column: 5, scope: !6286)
!6328 = !DILocation(line: 4455, column: 1, scope: !6254)
!6329 = distinct !DISubprogram(name: "encode_decimal_single", scope: !3, file: !3, line: 4522, type: !417, scopeLine: 4525, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!6330 = !DILocalVariable(name: "fmt", arg: 1, scope: !6329, file: !3, line: 4522, type: !419)
!6331 = !DILocation(line: 4522, column: 50, scope: !6329)
!6332 = !DILocalVariable(name: "buf", arg: 2, scope: !6329, file: !3, line: 4523, type: !420)
!6333 = !DILocation(line: 4523, column: 30, scope: !6329)
!6334 = !DILocalVariable(name: "r", arg: 3, scope: !6329, file: !3, line: 4524, type: !6)
!6335 = !DILocation(line: 4524, column: 33, scope: !6329)
!6336 = !DILocation(line: 4526, column: 21, scope: !6329)
!6337 = !DILocation(line: 4526, column: 26, scope: !6329)
!6338 = !DILocation(line: 4526, column: 31, scope: !6329)
!6339 = !DILocation(line: 4526, column: 3, scope: !6329)
!6340 = !DILocation(line: 4527, column: 1, scope: !6329)
!6341 = distinct !DISubprogram(name: "decode_decimal_single", scope: !3, file: !3, line: 4531, type: !424, scopeLine: 4534, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!6342 = !DILocalVariable(name: "fmt", arg: 1, scope: !6341, file: !3, line: 4531, type: !419)
!6343 = !DILocation(line: 4531, column: 50, scope: !6341)
!6344 = !DILocalVariable(name: "r", arg: 2, scope: !6341, file: !3, line: 4532, type: !426)
!6345 = !DILocation(line: 4532, column: 27, scope: !6341)
!6346 = !DILocalVariable(name: "buf", arg: 3, scope: !6341, file: !3, line: 4533, type: !427)
!6347 = !DILocation(line: 4533, column: 22, scope: !6341)
!6348 = !DILocation(line: 4535, column: 21, scope: !6341)
!6349 = !DILocation(line: 4535, column: 26, scope: !6341)
!6350 = !DILocation(line: 4535, column: 29, scope: !6341)
!6351 = !DILocation(line: 4535, column: 3, scope: !6341)
!6352 = !DILocation(line: 4536, column: 1, scope: !6341)
!6353 = distinct !DISubprogram(name: "encode_decimal_double", scope: !3, file: !3, line: 4540, type: !417, scopeLine: 4543, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!6354 = !DILocalVariable(name: "fmt", arg: 1, scope: !6353, file: !3, line: 4540, type: !419)
!6355 = !DILocation(line: 4540, column: 50, scope: !6353)
!6356 = !DILocalVariable(name: "buf", arg: 2, scope: !6353, file: !3, line: 4541, type: !420)
!6357 = !DILocation(line: 4541, column: 16, scope: !6353)
!6358 = !DILocalVariable(name: "r", arg: 3, scope: !6353, file: !3, line: 4542, type: !6)
!6359 = !DILocation(line: 4542, column: 33, scope: !6353)
!6360 = !DILocation(line: 4544, column: 21, scope: !6353)
!6361 = !DILocation(line: 4544, column: 26, scope: !6353)
!6362 = !DILocation(line: 4544, column: 31, scope: !6353)
!6363 = !DILocation(line: 4544, column: 3, scope: !6353)
!6364 = !DILocation(line: 4545, column: 1, scope: !6353)
!6365 = distinct !DISubprogram(name: "decode_decimal_double", scope: !3, file: !3, line: 4549, type: !424, scopeLine: 4552, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!6366 = !DILocalVariable(name: "fmt", arg: 1, scope: !6365, file: !3, line: 4549, type: !419)
!6367 = !DILocation(line: 4549, column: 50, scope: !6365)
!6368 = !DILocalVariable(name: "r", arg: 2, scope: !6365, file: !3, line: 4550, type: !426)
!6369 = !DILocation(line: 4550, column: 27, scope: !6365)
!6370 = !DILocalVariable(name: "buf", arg: 3, scope: !6365, file: !3, line: 4551, type: !427)
!6371 = !DILocation(line: 4551, column: 22, scope: !6365)
!6372 = !DILocation(line: 4553, column: 21, scope: !6365)
!6373 = !DILocation(line: 4553, column: 26, scope: !6365)
!6374 = !DILocation(line: 4553, column: 29, scope: !6365)
!6375 = !DILocation(line: 4553, column: 3, scope: !6365)
!6376 = !DILocation(line: 4554, column: 1, scope: !6365)
!6377 = distinct !DISubprogram(name: "encode_decimal_quad", scope: !3, file: !3, line: 4558, type: !417, scopeLine: 4561, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!6378 = !DILocalVariable(name: "fmt", arg: 1, scope: !6377, file: !3, line: 4558, type: !419)
!6379 = !DILocation(line: 4558, column: 48, scope: !6377)
!6380 = !DILocalVariable(name: "buf", arg: 2, scope: !6377, file: !3, line: 4559, type: !420)
!6381 = !DILocation(line: 4559, column: 14, scope: !6377)
!6382 = !DILocalVariable(name: "r", arg: 3, scope: !6377, file: !3, line: 4560, type: !6)
!6383 = !DILocation(line: 4560, column: 31, scope: !6377)
!6384 = !DILocation(line: 4562, column: 22, scope: !6377)
!6385 = !DILocation(line: 4562, column: 27, scope: !6377)
!6386 = !DILocation(line: 4562, column: 32, scope: !6377)
!6387 = !DILocation(line: 4562, column: 3, scope: !6377)
!6388 = !DILocation(line: 4563, column: 1, scope: !6377)
!6389 = distinct !DISubprogram(name: "decode_decimal_quad", scope: !3, file: !3, line: 4567, type: !424, scopeLine: 4570, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!6390 = !DILocalVariable(name: "fmt", arg: 1, scope: !6389, file: !3, line: 4567, type: !419)
!6391 = !DILocation(line: 4567, column: 48, scope: !6389)
!6392 = !DILocalVariable(name: "r", arg: 2, scope: !6389, file: !3, line: 4568, type: !426)
!6393 = !DILocation(line: 4568, column: 25, scope: !6389)
!6394 = !DILocalVariable(name: "buf", arg: 3, scope: !6389, file: !3, line: 4569, type: !427)
!6395 = !DILocation(line: 4569, column: 20, scope: !6389)
!6396 = !DILocation(line: 4571, column: 22, scope: !6389)
!6397 = !DILocation(line: 4571, column: 27, scope: !6389)
!6398 = !DILocation(line: 4571, column: 30, scope: !6389)
!6399 = !DILocation(line: 4571, column: 3, scope: !6389)
!6400 = !DILocation(line: 4572, column: 1, scope: !6389)
!6401 = distinct !DISubprogram(name: "encode_ieee_half", scope: !3, file: !3, line: 4643, type: !417, scopeLine: 4645, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!6402 = !DILocalVariable(name: "fmt", arg: 1, scope: !6401, file: !3, line: 4643, type: !419)
!6403 = !DILocation(line: 4643, column: 45, scope: !6401)
!6404 = !DILocalVariable(name: "buf", arg: 2, scope: !6401, file: !3, line: 4643, type: !420)
!6405 = !DILocation(line: 4643, column: 56, scope: !6401)
!6406 = !DILocalVariable(name: "r", arg: 3, scope: !6401, file: !3, line: 4644, type: !6)
!6407 = !DILocation(line: 4644, column: 28, scope: !6401)
!6408 = !DILocalVariable(name: "image", scope: !6401, file: !3, line: 4646, type: !20)
!6409 = !DILocation(line: 4646, column: 17, scope: !6401)
!6410 = !DILocalVariable(name: "sig", scope: !6401, file: !3, line: 4646, type: !20)
!6411 = !DILocation(line: 4646, column: 24, scope: !6401)
!6412 = !DILocalVariable(name: "exp", scope: !6401, file: !3, line: 4646, type: !20)
!6413 = !DILocation(line: 4646, column: 29, scope: !6401)
!6414 = !DILocalVariable(name: "sign", scope: !6401, file: !3, line: 4647, type: !20)
!6415 = !DILocation(line: 4647, column: 17, scope: !6401)
!6416 = !DILocation(line: 4647, column: 24, scope: !6401)
!6417 = !DILocation(line: 4647, column: 27, scope: !6401)
!6418 = !DILocalVariable(name: "denormal", scope: !6401, file: !3, line: 4648, type: !399)
!6419 = !DILocation(line: 4648, column: 8, scope: !6401)
!6420 = !DILocation(line: 4648, column: 20, scope: !6401)
!6421 = !DILocation(line: 4648, column: 23, scope: !6401)
!6422 = !DILocation(line: 4648, column: 36, scope: !6401)
!6423 = !DILocation(line: 4648, column: 47, scope: !6401)
!6424 = !DILocation(line: 4648, column: 19, scope: !6401)
!6425 = !DILocation(line: 4650, column: 11, scope: !6401)
!6426 = !DILocation(line: 4650, column: 16, scope: !6401)
!6427 = !DILocation(line: 4650, column: 9, scope: !6401)
!6428 = !DILocation(line: 4651, column: 10, scope: !6401)
!6429 = !DILocation(line: 4651, column: 13, scope: !6401)
!6430 = !DILocation(line: 4651, column: 26, scope: !6401)
!6431 = !DILocation(line: 4651, column: 56, scope: !6401)
!6432 = !DILocation(line: 4651, column: 7, scope: !6401)
!6433 = !DILocation(line: 4653, column: 11, scope: !6401)
!6434 = !DILocation(line: 4653, column: 14, scope: !6401)
!6435 = !DILocation(line: 4653, column: 3, scope: !6401)
!6436 = !DILocation(line: 4656, column: 7, scope: !6437)
!6437 = distinct !DILexicalBlock(scope: !6401, file: !3, line: 4654, column: 5)
!6438 = !DILocation(line: 4659, column: 11, scope: !6439)
!6439 = distinct !DILexicalBlock(scope: !6437, file: !3, line: 4659, column: 11)
!6440 = !DILocation(line: 4659, column: 16, scope: !6439)
!6441 = !DILocation(line: 4659, column: 11, scope: !6437)
!6442 = !DILocation(line: 4660, column: 8, scope: !6439)
!6443 = !DILocation(line: 4660, column: 2, scope: !6439)
!6444 = !DILocation(line: 4662, column: 8, scope: !6439)
!6445 = !DILocation(line: 4663, column: 7, scope: !6437)
!6446 = !DILocation(line: 4666, column: 11, scope: !6447)
!6447 = distinct !DILexicalBlock(scope: !6437, file: !3, line: 4666, column: 11)
!6448 = !DILocation(line: 4666, column: 16, scope: !6447)
!6449 = !DILocation(line: 4666, column: 11, scope: !6437)
!6450 = !DILocation(line: 4668, column: 8, scope: !6451)
!6451 = distinct !DILexicalBlock(scope: !6452, file: !3, line: 4668, column: 8)
!6452 = distinct !DILexicalBlock(scope: !6447, file: !3, line: 4667, column: 2)
!6453 = !DILocation(line: 4668, column: 11, scope: !6451)
!6454 = !DILocation(line: 4668, column: 8, scope: !6452)
!6455 = !DILocation(line: 4669, column: 13, scope: !6451)
!6456 = !DILocation(line: 4669, column: 18, scope: !6451)
!6457 = !DILocation(line: 4669, column: 12, scope: !6451)
!6458 = !DILocation(line: 4669, column: 10, scope: !6451)
!6459 = !DILocation(line: 4669, column: 6, scope: !6451)
!6460 = !DILocation(line: 4670, column: 8, scope: !6461)
!6461 = distinct !DILexicalBlock(scope: !6452, file: !3, line: 4670, column: 8)
!6462 = !DILocation(line: 4670, column: 11, scope: !6461)
!6463 = !DILocation(line: 4670, column: 25, scope: !6461)
!6464 = !DILocation(line: 4670, column: 30, scope: !6461)
!6465 = !DILocation(line: 4670, column: 22, scope: !6461)
!6466 = !DILocation(line: 4670, column: 8, scope: !6452)
!6467 = !DILocation(line: 4671, column: 10, scope: !6461)
!6468 = !DILocation(line: 4671, column: 6, scope: !6461)
!6469 = !DILocation(line: 4673, column: 10, scope: !6461)
!6470 = !DILocation(line: 4674, column: 8, scope: !6471)
!6471 = distinct !DILexicalBlock(scope: !6452, file: !3, line: 4674, column: 8)
!6472 = !DILocation(line: 4674, column: 12, scope: !6471)
!6473 = !DILocation(line: 4674, column: 8, scope: !6452)
!6474 = !DILocation(line: 4675, column: 10, scope: !6471)
!6475 = !DILocation(line: 4675, column: 6, scope: !6471)
!6476 = !DILocation(line: 4677, column: 10, scope: !6452)
!6477 = !DILocation(line: 4678, column: 13, scope: !6452)
!6478 = !DILocation(line: 4678, column: 10, scope: !6452)
!6479 = !DILocation(line: 4679, column: 2, scope: !6452)
!6480 = !DILocation(line: 4681, column: 8, scope: !6447)
!6481 = !DILocation(line: 4682, column: 7, scope: !6437)
!6482 = !DILocation(line: 4688, column: 11, scope: !6483)
!6483 = distinct !DILexicalBlock(scope: !6437, file: !3, line: 4688, column: 11)
!6484 = !DILocation(line: 4688, column: 11, scope: !6437)
!6485 = !DILocation(line: 4689, column: 6, scope: !6483)
!6486 = !DILocation(line: 4689, column: 2, scope: !6483)
!6487 = !DILocation(line: 4691, column: 8, scope: !6483)
!6488 = !DILocation(line: 4691, column: 21, scope: !6483)
!6489 = !DILocation(line: 4691, column: 26, scope: !6483)
!6490 = !DILocation(line: 4691, column: 6, scope: !6483)
!6491 = !DILocation(line: 4692, column: 16, scope: !6437)
!6492 = !DILocation(line: 4692, column: 20, scope: !6437)
!6493 = !DILocation(line: 4692, column: 13, scope: !6437)
!6494 = !DILocation(line: 4693, column: 16, scope: !6437)
!6495 = !DILocation(line: 4693, column: 13, scope: !6437)
!6496 = !DILocation(line: 4694, column: 7, scope: !6437)
!6497 = !DILocation(line: 4697, column: 7, scope: !6437)
!6498 = !DILocation(line: 4698, column: 5, scope: !6437)
!6499 = !DILocation(line: 4700, column: 12, scope: !6401)
!6500 = !DILocation(line: 4700, column: 3, scope: !6401)
!6501 = !DILocation(line: 4700, column: 10, scope: !6401)
!6502 = !DILocation(line: 4701, column: 1, scope: !6401)
!6503 = distinct !DISubprogram(name: "decode_ieee_half", scope: !3, file: !3, line: 4706, type: !424, scopeLine: 4708, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!6504 = !DILocalVariable(name: "fmt", arg: 1, scope: !6503, file: !3, line: 4706, type: !419)
!6505 = !DILocation(line: 4706, column: 45, scope: !6503)
!6506 = !DILocalVariable(name: "r", arg: 2, scope: !6503, file: !3, line: 4706, type: !426)
!6507 = !DILocation(line: 4706, column: 67, scope: !6503)
!6508 = !DILocalVariable(name: "buf", arg: 3, scope: !6503, file: !3, line: 4707, type: !427)
!6509 = !DILocation(line: 4707, column: 17, scope: !6503)
!6510 = !DILocalVariable(name: "image", scope: !6503, file: !3, line: 4709, type: !20)
!6511 = !DILocation(line: 4709, column: 17, scope: !6503)
!6512 = !DILocation(line: 4709, column: 25, scope: !6503)
!6513 = !DILocation(line: 4709, column: 32, scope: !6503)
!6514 = !DILocalVariable(name: "sign", scope: !6503, file: !3, line: 4710, type: !399)
!6515 = !DILocation(line: 4710, column: 8, scope: !6503)
!6516 = !DILocation(line: 4710, column: 16, scope: !6503)
!6517 = !DILocation(line: 4710, column: 22, scope: !6503)
!6518 = !DILocation(line: 4710, column: 29, scope: !6503)
!6519 = !DILocation(line: 4710, column: 15, scope: !6503)
!6520 = !DILocalVariable(name: "exp", scope: !6503, file: !3, line: 4711, type: !398)
!6521 = !DILocation(line: 4711, column: 7, scope: !6503)
!6522 = !DILocation(line: 4711, column: 14, scope: !6503)
!6523 = !DILocation(line: 4711, column: 20, scope: !6503)
!6524 = !DILocation(line: 4711, column: 27, scope: !6503)
!6525 = !DILocation(line: 4711, column: 13, scope: !6503)
!6526 = !DILocation(line: 4713, column: 11, scope: !6503)
!6527 = !DILocation(line: 4713, column: 3, scope: !6503)
!6528 = !DILocation(line: 4714, column: 9, scope: !6503)
!6529 = !DILocation(line: 4715, column: 9, scope: !6503)
!6530 = !DILocation(line: 4717, column: 7, scope: !6531)
!6531 = distinct !DILexicalBlock(scope: !6503, file: !3, line: 4717, column: 7)
!6532 = !DILocation(line: 4717, column: 11, scope: !6531)
!6533 = !DILocation(line: 4717, column: 7, scope: !6503)
!6534 = !DILocation(line: 4719, column: 11, scope: !6535)
!6535 = distinct !DILexicalBlock(scope: !6536, file: !3, line: 4719, column: 11)
!6536 = distinct !DILexicalBlock(scope: !6531, file: !3, line: 4718, column: 5)
!6537 = !DILocation(line: 4719, column: 17, scope: !6535)
!6538 = !DILocation(line: 4719, column: 20, scope: !6535)
!6539 = !DILocation(line: 4719, column: 25, scope: !6535)
!6540 = !DILocation(line: 4719, column: 11, scope: !6536)
!6541 = !DILocation(line: 4721, column: 4, scope: !6542)
!6542 = distinct !DILexicalBlock(scope: !6535, file: !3, line: 4720, column: 2)
!6543 = !DILocation(line: 4721, column: 7, scope: !6542)
!6544 = !DILocation(line: 4721, column: 10, scope: !6542)
!6545 = !DILocation(line: 4722, column: 14, scope: !6542)
!6546 = !DILocation(line: 4722, column: 4, scope: !6542)
!6547 = !DILocation(line: 4722, column: 7, scope: !6542)
!6548 = !DILocation(line: 4722, column: 12, scope: !6542)
!6549 = !DILocation(line: 4723, column: 4, scope: !6542)
!6550 = !DILocation(line: 4724, column: 22, scope: !6542)
!6551 = !DILocation(line: 4724, column: 28, scope: !6542)
!6552 = !DILocation(line: 4724, column: 4, scope: !6542)
!6553 = !DILocation(line: 4724, column: 7, scope: !6542)
!6554 = !DILocation(line: 4724, column: 20, scope: !6542)
!6555 = !DILocation(line: 4725, column: 15, scope: !6542)
!6556 = !DILocation(line: 4725, column: 4, scope: !6542)
!6557 = !DILocation(line: 4726, column: 2, scope: !6542)
!6558 = !DILocation(line: 4727, column: 16, scope: !6559)
!6559 = distinct !DILexicalBlock(scope: !6535, file: !3, line: 4727, column: 16)
!6560 = !DILocation(line: 4727, column: 21, scope: !6559)
!6561 = !DILocation(line: 4727, column: 16, scope: !6535)
!6562 = !DILocation(line: 4728, column: 12, scope: !6559)
!6563 = !DILocation(line: 4728, column: 2, scope: !6559)
!6564 = !DILocation(line: 4728, column: 5, scope: !6559)
!6565 = !DILocation(line: 4728, column: 10, scope: !6559)
!6566 = !DILocation(line: 4729, column: 5, scope: !6536)
!6567 = !DILocation(line: 4730, column: 12, scope: !6568)
!6568 = distinct !DILexicalBlock(scope: !6531, file: !3, line: 4730, column: 12)
!6569 = !DILocation(line: 4730, column: 16, scope: !6568)
!6570 = !DILocation(line: 4730, column: 22, scope: !6568)
!6571 = !DILocation(line: 4730, column: 26, scope: !6568)
!6572 = !DILocation(line: 4730, column: 31, scope: !6568)
!6573 = !DILocation(line: 4730, column: 40, scope: !6568)
!6574 = !DILocation(line: 4730, column: 43, scope: !6568)
!6575 = !DILocation(line: 4730, column: 48, scope: !6568)
!6576 = !DILocation(line: 4730, column: 12, scope: !6531)
!6577 = !DILocation(line: 4732, column: 11, scope: !6578)
!6578 = distinct !DILexicalBlock(scope: !6579, file: !3, line: 4732, column: 11)
!6579 = distinct !DILexicalBlock(scope: !6568, file: !3, line: 4731, column: 5)
!6580 = !DILocation(line: 4732, column: 11, scope: !6579)
!6581 = !DILocation(line: 4734, column: 4, scope: !6582)
!6582 = distinct !DILexicalBlock(scope: !6578, file: !3, line: 4733, column: 2)
!6583 = !DILocation(line: 4734, column: 7, scope: !6582)
!6584 = !DILocation(line: 4734, column: 10, scope: !6582)
!6585 = !DILocation(line: 4735, column: 14, scope: !6582)
!6586 = !DILocation(line: 4735, column: 4, scope: !6582)
!6587 = !DILocation(line: 4735, column: 7, scope: !6582)
!6588 = !DILocation(line: 4735, column: 12, scope: !6582)
!6589 = !DILocation(line: 4736, column: 23, scope: !6582)
!6590 = !DILocation(line: 4736, column: 29, scope: !6582)
!6591 = !DILocation(line: 4736, column: 58, scope: !6582)
!6592 = !DILocation(line: 4737, column: 9, scope: !6582)
!6593 = !DILocation(line: 4737, column: 14, scope: !6582)
!6594 = !DILocation(line: 4737, column: 7, scope: !6582)
!6595 = !DILocation(line: 4736, column: 20, scope: !6582)
!6596 = !DILocation(line: 4736, column: 4, scope: !6582)
!6597 = !DILocation(line: 4736, column: 7, scope: !6582)
!6598 = !DILocation(line: 4736, column: 18, scope: !6582)
!6599 = !DILocation(line: 4738, column: 22, scope: !6582)
!6600 = !DILocation(line: 4738, column: 4, scope: !6582)
!6601 = !DILocation(line: 4738, column: 7, scope: !6582)
!6602 = !DILocation(line: 4738, column: 20, scope: !6582)
!6603 = !DILocation(line: 4739, column: 2, scope: !6582)
!6604 = !DILocation(line: 4742, column: 4, scope: !6605)
!6605 = distinct !DILexicalBlock(scope: !6578, file: !3, line: 4741, column: 2)
!6606 = !DILocation(line: 4742, column: 7, scope: !6605)
!6607 = !DILocation(line: 4742, column: 10, scope: !6605)
!6608 = !DILocation(line: 4743, column: 14, scope: !6605)
!6609 = !DILocation(line: 4743, column: 4, scope: !6605)
!6610 = !DILocation(line: 4743, column: 7, scope: !6605)
!6611 = !DILocation(line: 4743, column: 12, scope: !6605)
!6612 = !DILocation(line: 4745, column: 5, scope: !6579)
!6613 = !DILocation(line: 4748, column: 7, scope: !6614)
!6614 = distinct !DILexicalBlock(scope: !6568, file: !3, line: 4747, column: 5)
!6615 = !DILocation(line: 4748, column: 10, scope: !6614)
!6616 = !DILocation(line: 4748, column: 13, scope: !6614)
!6617 = !DILocation(line: 4749, column: 17, scope: !6614)
!6618 = !DILocation(line: 4749, column: 7, scope: !6614)
!6619 = !DILocation(line: 4749, column: 10, scope: !6614)
!6620 = !DILocation(line: 4749, column: 15, scope: !6614)
!6621 = !DILocation(line: 4750, column: 7, scope: !6614)
!6622 = !DILocation(line: 4751, column: 25, scope: !6614)
!6623 = !DILocation(line: 4751, column: 31, scope: !6614)
!6624 = !DILocation(line: 4751, column: 7, scope: !6614)
!6625 = !DILocation(line: 4751, column: 10, scope: !6614)
!6626 = !DILocation(line: 4751, column: 23, scope: !6614)
!6627 = !DILocation(line: 4753, column: 1, scope: !6503)
!6628 = distinct !DISubprogram(name: "encode_internal", scope: !3, file: !3, line: 4812, type: !417, scopeLine: 4814, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!6629 = !DILocalVariable(name: "fmt", arg: 1, scope: !6628, file: !3, line: 4812, type: !419)
!6630 = !DILocation(line: 4812, column: 44, scope: !6628)
!6631 = !DILocalVariable(name: "buf", arg: 2, scope: !6628, file: !3, line: 4812, type: !420)
!6632 = !DILocation(line: 4812, column: 72, scope: !6628)
!6633 = !DILocalVariable(name: "r", arg: 3, scope: !6628, file: !3, line: 4813, type: !6)
!6634 = !DILocation(line: 4813, column: 27, scope: !6628)
!6635 = !DILocation(line: 4815, column: 11, scope: !6628)
!6636 = !DILocation(line: 4815, column: 3, scope: !6628)
!6637 = !DILocation(line: 4815, column: 16, scope: !6628)
!6638 = !DILocation(line: 4816, column: 1, scope: !6628)
!6639 = distinct !DISubprogram(name: "decode_internal", scope: !3, file: !3, line: 4819, type: !424, scopeLine: 4821, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!6640 = !DILocalVariable(name: "fmt", arg: 1, scope: !6639, file: !3, line: 4819, type: !419)
!6641 = !DILocation(line: 4819, column: 44, scope: !6639)
!6642 = !DILocalVariable(name: "r", arg: 2, scope: !6639, file: !3, line: 4820, type: !426)
!6643 = !DILocation(line: 4820, column: 21, scope: !6639)
!6644 = !DILocalVariable(name: "buf", arg: 3, scope: !6639, file: !3, line: 4820, type: !427)
!6645 = !DILocation(line: 4820, column: 36, scope: !6639)
!6646 = !DILocation(line: 4822, column: 11, scope: !6639)
!6647 = !DILocation(line: 4822, column: 3, scope: !6639)
!6648 = !DILocation(line: 4822, column: 14, scope: !6639)
!6649 = !DILocation(line: 4823, column: 1, scope: !6639)
!6650 = !DILocalVariable(name: "r", arg: 1, scope: !492, file: !3, line: 4853, type: !426)
!6651 = !DILocation(line: 4853, column: 29, scope: !492)
!6652 = !DILocalVariable(name: "mode", arg: 2, scope: !492, file: !3, line: 4853, type: !226)
!6653 = !DILocation(line: 4853, column: 50, scope: !492)
!6654 = !DILocalVariable(name: "x", arg: 3, scope: !492, file: !3, line: 4854, type: !6)
!6655 = !DILocation(line: 4854, column: 28, scope: !492)
!6656 = !DILocalVariable(name: "h", scope: !492, file: !3, line: 4858, type: !8)
!6657 = !DILocation(line: 4858, column: 19, scope: !492)
!6658 = !DILocalVariable(name: "t", scope: !492, file: !3, line: 4858, type: !8)
!6659 = !DILocation(line: 4858, column: 22, scope: !492)
!6660 = !DILocalVariable(name: "i", scope: !492, file: !3, line: 4858, type: !8)
!6661 = !DILocation(line: 4858, column: 25, scope: !492)
!6662 = !DILocalVariable(name: "iter", scope: !492, file: !3, line: 4859, type: !398)
!6663 = !DILocation(line: 4859, column: 7, scope: !492)
!6664 = !DILocalVariable(name: "exp", scope: !492, file: !3, line: 4859, type: !398)
!6665 = !DILocation(line: 4859, column: 13, scope: !492)
!6666 = !DILocation(line: 4862, column: 23, scope: !6667)
!6667 = distinct !DILexicalBlock(scope: !492, file: !3, line: 4862, column: 7)
!6668 = !DILocation(line: 4862, column: 7, scope: !6667)
!6669 = !DILocation(line: 4862, column: 7, scope: !492)
!6670 = !DILocation(line: 4864, column: 8, scope: !6671)
!6671 = distinct !DILexicalBlock(scope: !6667, file: !3, line: 4863, column: 5)
!6672 = !DILocation(line: 4864, column: 13, scope: !6671)
!6673 = !DILocation(line: 4864, column: 12, scope: !6671)
!6674 = !DILocation(line: 4865, column: 7, scope: !6671)
!6675 = !DILocation(line: 4869, column: 19, scope: !6676)
!6676 = distinct !DILexicalBlock(scope: !492, file: !3, line: 4869, column: 7)
!6677 = !DILocation(line: 4869, column: 7, scope: !6676)
!6678 = !DILocation(line: 4869, column: 7, scope: !492)
!6679 = !DILocation(line: 4871, column: 27, scope: !6680)
!6680 = distinct !DILexicalBlock(scope: !6676, file: !3, line: 4870, column: 5)
!6681 = !DILocation(line: 4871, column: 7, scope: !6680)
!6682 = !DILocation(line: 4872, column: 7, scope: !6680)
!6683 = !DILocation(line: 4876, column: 23, scope: !6684)
!6684 = distinct !DILexicalBlock(scope: !492, file: !3, line: 4876, column: 7)
!6685 = !DILocation(line: 4876, column: 8, scope: !6684)
!6686 = !DILocation(line: 4876, column: 7, scope: !492)
!6687 = !DILocation(line: 4878, column: 8, scope: !6688)
!6688 = distinct !DILexicalBlock(scope: !6684, file: !3, line: 4877, column: 5)
!6689 = !DILocation(line: 4878, column: 13, scope: !6688)
!6690 = !DILocation(line: 4878, column: 12, scope: !6688)
!6691 = !DILocation(line: 4879, column: 7, scope: !6688)
!6692 = !DILocation(line: 4882, column: 8, scope: !6693)
!6693 = distinct !DILexicalBlock(scope: !492, file: !3, line: 4882, column: 7)
!6694 = !DILocation(line: 4882, column: 7, scope: !492)
!6695 = !DILocation(line: 4884, column: 7, scope: !6696)
!6696 = distinct !DILexicalBlock(scope: !6693, file: !3, line: 4883, column: 5)
!6697 = !DILocation(line: 4885, column: 12, scope: !6696)
!6698 = !DILocation(line: 4886, column: 5, scope: !6696)
!6699 = !DILocation(line: 4889, column: 24, scope: !492)
!6700 = !DILocation(line: 4889, column: 9, scope: !492)
!6701 = !DILocation(line: 4889, column: 7, scope: !492)
!6702 = !DILocation(line: 4890, column: 30, scope: !492)
!6703 = !DILocation(line: 4890, column: 29, scope: !492)
!6704 = !DILocation(line: 4890, column: 33, scope: !492)
!6705 = !DILocation(line: 4890, column: 3, scope: !492)
!6706 = !DILocation(line: 4893, column: 13, scope: !6707)
!6707 = distinct !DILexicalBlock(scope: !492, file: !3, line: 4893, column: 3)
!6708 = !DILocation(line: 4893, column: 8, scope: !6707)
!6709 = !DILocation(line: 4893, column: 18, scope: !6710)
!6710 = distinct !DILexicalBlock(scope: !6707, file: !3, line: 4893, column: 3)
!6711 = !DILocation(line: 4893, column: 23, scope: !6710)
!6712 = !DILocation(line: 4893, column: 3, scope: !6707)
!6713 = !DILocation(line: 4896, column: 24, scope: !6714)
!6714 = distinct !DILexicalBlock(scope: !6710, file: !3, line: 4894, column: 5)
!6715 = !DILocation(line: 4896, column: 7, scope: !6714)
!6716 = !DILocation(line: 4897, column: 7, scope: !6714)
!6717 = !DILocation(line: 4898, column: 7, scope: !6714)
!6718 = !DILocation(line: 4899, column: 7, scope: !6714)
!6719 = !DILocation(line: 4900, column: 7, scope: !6714)
!6720 = !DILocation(line: 4903, column: 11, scope: !6721)
!6721 = distinct !DILexicalBlock(scope: !6714, file: !3, line: 4903, column: 11)
!6722 = !DILocation(line: 4903, column: 16, scope: !6721)
!6723 = !DILocation(line: 4903, column: 21, scope: !6721)
!6724 = !DILocation(line: 4903, column: 24, scope: !6721)
!6725 = !DILocation(line: 4903, column: 11, scope: !6714)
!6726 = !DILocation(line: 4904, column: 2, scope: !6721)
!6727 = !DILocation(line: 4907, column: 11, scope: !6714)
!6728 = !DILocation(line: 4908, column: 5, scope: !6714)
!6729 = !DILocation(line: 4893, column: 33, scope: !6710)
!6730 = !DILocation(line: 4893, column: 3, scope: !6710)
!6731 = distinct !{!6731, !6712, !6732}
!6732 = !DILocation(line: 4908, column: 5, scope: !6707)
!6733 = !DILocation(line: 4911, column: 20, scope: !492)
!6734 = !DILocation(line: 4911, column: 3, scope: !492)
!6735 = !DILocation(line: 4912, column: 3, scope: !492)
!6736 = !DILocation(line: 4913, column: 3, scope: !492)
!6737 = !DILocation(line: 4914, column: 3, scope: !492)
!6738 = !DILocation(line: 4915, column: 3, scope: !492)
!6739 = !DILocation(line: 4916, column: 3, scope: !492)
!6740 = !DILocation(line: 4920, column: 17, scope: !492)
!6741 = !DILocation(line: 4920, column: 20, scope: !492)
!6742 = !DILocation(line: 4920, column: 3, scope: !492)
!6743 = !DILocation(line: 4921, column: 3, scope: !492)
!6744 = !DILocation(line: 4922, column: 1, scope: !492)
!6745 = distinct !DISubprogram(name: "real_powi", scope: !3, file: !3, line: 4931, type: !6746, scopeLine: 4933, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !406)
!6746 = !DISubroutineType(types: !6747)
!6747 = !{!399, !426, !226, !6, !421}
!6748 = !DILocalVariable(name: "r", arg: 1, scope: !6745, file: !3, line: 4931, type: !426)
!6749 = !DILocation(line: 4931, column: 29, scope: !6745)
!6750 = !DILocalVariable(name: "mode", arg: 2, scope: !6745, file: !3, line: 4931, type: !226)
!6751 = !DILocation(line: 4931, column: 50, scope: !6745)
!6752 = !DILocalVariable(name: "x", arg: 3, scope: !6745, file: !3, line: 4932, type: !6)
!6753 = !DILocation(line: 4932, column: 28, scope: !6745)
!6754 = !DILocalVariable(name: "n", arg: 4, scope: !6745, file: !3, line: 4932, type: !421)
!6755 = !DILocation(line: 4932, column: 45, scope: !6745)
!6756 = !DILocalVariable(name: "bit", scope: !6745, file: !3, line: 4934, type: !20)
!6757 = !DILocation(line: 4934, column: 26, scope: !6745)
!6758 = !DILocalVariable(name: "t", scope: !6745, file: !3, line: 4935, type: !8)
!6759 = !DILocation(line: 4935, column: 19, scope: !6745)
!6760 = !DILocalVariable(name: "inexact", scope: !6745, file: !3, line: 4936, type: !399)
!6761 = !DILocation(line: 4936, column: 8, scope: !6745)
!6762 = !DILocalVariable(name: "init", scope: !6745, file: !3, line: 4937, type: !399)
!6763 = !DILocation(line: 4937, column: 8, scope: !6745)
!6764 = !DILocalVariable(name: "neg", scope: !6745, file: !3, line: 4938, type: !399)
!6765 = !DILocation(line: 4938, column: 8, scope: !6745)
!6766 = !DILocalVariable(name: "i", scope: !6745, file: !3, line: 4939, type: !398)
!6767 = !DILocation(line: 4939, column: 7, scope: !6745)
!6768 = !DILocation(line: 4941, column: 7, scope: !6769)
!6769 = distinct !DILexicalBlock(scope: !6745, file: !3, line: 4941, column: 7)
!6770 = !DILocation(line: 4941, column: 9, scope: !6769)
!6771 = !DILocation(line: 4941, column: 7, scope: !6745)
!6772 = !DILocation(line: 4943, column: 8, scope: !6773)
!6773 = distinct !DILexicalBlock(scope: !6769, file: !3, line: 4942, column: 5)
!6774 = !DILocation(line: 4943, column: 12, scope: !6773)
!6775 = !DILocation(line: 4944, column: 7, scope: !6773)
!6776 = !DILocation(line: 4946, column: 12, scope: !6777)
!6777 = distinct !DILexicalBlock(scope: !6769, file: !3, line: 4946, column: 12)
!6778 = !DILocation(line: 4946, column: 14, scope: !6777)
!6779 = !DILocation(line: 4946, column: 12, scope: !6769)
!6780 = !DILocation(line: 4949, column: 11, scope: !6781)
!6781 = distinct !DILexicalBlock(scope: !6777, file: !3, line: 4947, column: 5)
!6782 = !DILocation(line: 4950, column: 12, scope: !6781)
!6783 = !DILocation(line: 4950, column: 11, scope: !6781)
!6784 = !DILocation(line: 4950, column: 9, scope: !6781)
!6785 = !DILocation(line: 4951, column: 5, scope: !6781)
!6786 = !DILocation(line: 4953, column: 9, scope: !6777)
!6787 = !DILocation(line: 4955, column: 8, scope: !6745)
!6788 = !DILocation(line: 4955, column: 7, scope: !6745)
!6789 = !DILocation(line: 4956, column: 7, scope: !6745)
!6790 = !DILocation(line: 4957, column: 10, scope: !6791)
!6791 = distinct !DILexicalBlock(scope: !6745, file: !3, line: 4957, column: 3)
!6792 = !DILocation(line: 4957, column: 8, scope: !6791)
!6793 = !DILocation(line: 4957, column: 15, scope: !6794)
!6794 = distinct !DILexicalBlock(scope: !6791, file: !3, line: 4957, column: 3)
!6795 = !DILocation(line: 4957, column: 17, scope: !6794)
!6796 = !DILocation(line: 4957, column: 3, scope: !6791)
!6797 = !DILocation(line: 4959, column: 11, scope: !6798)
!6798 = distinct !DILexicalBlock(scope: !6799, file: !3, line: 4959, column: 11)
!6799 = distinct !DILexicalBlock(scope: !6794, file: !3, line: 4958, column: 5)
!6800 = !DILocation(line: 4959, column: 11, scope: !6799)
!6801 = !DILocation(line: 4961, column: 15, scope: !6802)
!6802 = distinct !DILexicalBlock(scope: !6798, file: !3, line: 4960, column: 2)
!6803 = !DILocation(line: 4961, column: 12, scope: !6802)
!6804 = !DILocation(line: 4962, column: 8, scope: !6805)
!6805 = distinct !DILexicalBlock(scope: !6802, file: !3, line: 4962, column: 8)
!6806 = !DILocation(line: 4962, column: 12, scope: !6805)
!6807 = !DILocation(line: 4962, column: 10, scope: !6805)
!6808 = !DILocation(line: 4962, column: 8, scope: !6802)
!6809 = !DILocation(line: 4963, column: 38, scope: !6805)
!6810 = !DILocation(line: 4963, column: 17, scope: !6805)
!6811 = !DILocation(line: 4963, column: 14, scope: !6805)
!6812 = !DILocation(line: 4963, column: 6, scope: !6805)
!6813 = !DILocation(line: 4964, column: 2, scope: !6802)
!6814 = !DILocation(line: 4965, column: 16, scope: !6815)
!6815 = distinct !DILexicalBlock(scope: !6798, file: !3, line: 4965, column: 16)
!6816 = !DILocation(line: 4965, column: 20, scope: !6815)
!6817 = !DILocation(line: 4965, column: 18, scope: !6815)
!6818 = !DILocation(line: 4965, column: 16, scope: !6798)
!6819 = !DILocation(line: 4966, column: 7, scope: !6815)
!6820 = !DILocation(line: 4966, column: 2, scope: !6815)
!6821 = !DILocation(line: 4967, column: 11, scope: !6799)
!6822 = !DILocation(line: 4968, column: 5, scope: !6799)
!6823 = !DILocation(line: 4957, column: 44, scope: !6794)
!6824 = !DILocation(line: 4957, column: 3, scope: !6794)
!6825 = distinct !{!6825, !6796, !6826}
!6826 = !DILocation(line: 4968, column: 5, scope: !6791)
!6827 = !DILocation(line: 4970, column: 7, scope: !6828)
!6828 = distinct !DILexicalBlock(scope: !6745, file: !3, line: 4970, column: 7)
!6829 = !DILocation(line: 4970, column: 7, scope: !6745)
!6830 = !DILocation(line: 4971, column: 16, scope: !6828)
!6831 = !DILocation(line: 4971, column: 13, scope: !6828)
!6832 = !DILocation(line: 4971, column: 5, scope: !6828)
!6833 = !DILocation(line: 4973, column: 17, scope: !6745)
!6834 = !DILocation(line: 4973, column: 20, scope: !6745)
!6835 = !DILocation(line: 4973, column: 3, scope: !6745)
!6836 = !DILocation(line: 4974, column: 10, scope: !6745)
!6837 = !DILocation(line: 4974, column: 3, scope: !6745)
!6838 = !DILocation(line: 4975, column: 1, scope: !6745)
!6839 = distinct !DISubprogram(name: "real_trunc", scope: !3, file: !3, line: 4981, type: !1762, scopeLine: 4983, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !406)
!6840 = !DILocalVariable(name: "r", arg: 1, scope: !6839, file: !3, line: 4981, type: !426)
!6841 = !DILocation(line: 4981, column: 30, scope: !6839)
!6842 = !DILocalVariable(name: "mode", arg: 2, scope: !6839, file: !3, line: 4981, type: !226)
!6843 = !DILocation(line: 4981, column: 51, scope: !6839)
!6844 = !DILocalVariable(name: "x", arg: 3, scope: !6839, file: !3, line: 4982, type: !6)
!6845 = !DILocation(line: 4982, column: 29, scope: !6839)
!6846 = !DILocation(line: 4984, column: 17, scope: !6839)
!6847 = !DILocation(line: 4984, column: 20, scope: !6839)
!6848 = !DILocation(line: 4984, column: 3, scope: !6839)
!6849 = !DILocation(line: 4985, column: 7, scope: !6850)
!6850 = distinct !DILexicalBlock(scope: !6839, file: !3, line: 4985, column: 7)
!6851 = !DILocation(line: 4985, column: 12, scope: !6850)
!6852 = !DILocation(line: 4985, column: 7, scope: !6839)
!6853 = !DILocation(line: 4986, column: 19, scope: !6850)
!6854 = !DILocation(line: 4986, column: 22, scope: !6850)
!6855 = !DILocation(line: 4986, column: 28, scope: !6850)
!6856 = !DILocation(line: 4986, column: 5, scope: !6850)
!6857 = !DILocation(line: 4987, column: 1, scope: !6839)
!6858 = distinct !DISubprogram(name: "real_floor", scope: !3, file: !3, line: 4993, type: !1762, scopeLine: 4995, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !406)
!6859 = !DILocalVariable(name: "r", arg: 1, scope: !6858, file: !3, line: 4993, type: !426)
!6860 = !DILocation(line: 4993, column: 30, scope: !6858)
!6861 = !DILocalVariable(name: "mode", arg: 2, scope: !6858, file: !3, line: 4993, type: !226)
!6862 = !DILocation(line: 4993, column: 51, scope: !6858)
!6863 = !DILocalVariable(name: "x", arg: 3, scope: !6858, file: !3, line: 4994, type: !6)
!6864 = !DILocation(line: 4994, column: 29, scope: !6858)
!6865 = !DILocalVariable(name: "t", scope: !6858, file: !3, line: 4996, type: !8)
!6866 = !DILocation(line: 4996, column: 19, scope: !6858)
!6867 = !DILocation(line: 4998, column: 21, scope: !6858)
!6868 = !DILocation(line: 4998, column: 3, scope: !6858)
!6869 = !DILocation(line: 4999, column: 29, scope: !6870)
!6870 = distinct !DILexicalBlock(scope: !6858, file: !3, line: 4999, column: 7)
!6871 = !DILocation(line: 4999, column: 9, scope: !6870)
!6872 = !DILocation(line: 4999, column: 32, scope: !6870)
!6873 = !DILocation(line: 4999, column: 35, scope: !6870)
!6874 = !DILocation(line: 4999, column: 38, scope: !6870)
!6875 = !DILocation(line: 4999, column: 7, scope: !6858)
!6876 = !DILocation(line: 5000, column: 5, scope: !6870)
!6877 = !DILocation(line: 5001, column: 7, scope: !6878)
!6878 = distinct !DILexicalBlock(scope: !6858, file: !3, line: 5001, column: 7)
!6879 = !DILocation(line: 5001, column: 12, scope: !6878)
!6880 = !DILocation(line: 5001, column: 7, scope: !6858)
!6881 = !DILocation(line: 5002, column: 19, scope: !6878)
!6882 = !DILocation(line: 5002, column: 22, scope: !6878)
!6883 = !DILocation(line: 5002, column: 5, scope: !6878)
!6884 = !DILocation(line: 5004, column: 6, scope: !6878)
!6885 = !DILocation(line: 5004, column: 10, scope: !6878)
!6886 = !DILocation(line: 5005, column: 1, scope: !6858)
!6887 = distinct !DISubprogram(name: "real_ceil", scope: !3, file: !3, line: 5011, type: !1762, scopeLine: 5013, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !406)
!6888 = !DILocalVariable(name: "r", arg: 1, scope: !6887, file: !3, line: 5011, type: !426)
!6889 = !DILocation(line: 5011, column: 29, scope: !6887)
!6890 = !DILocalVariable(name: "mode", arg: 2, scope: !6887, file: !3, line: 5011, type: !226)
!6891 = !DILocation(line: 5011, column: 50, scope: !6887)
!6892 = !DILocalVariable(name: "x", arg: 3, scope: !6887, file: !3, line: 5012, type: !6)
!6893 = !DILocation(line: 5012, column: 28, scope: !6887)
!6894 = !DILocalVariable(name: "t", scope: !6887, file: !3, line: 5014, type: !8)
!6895 = !DILocation(line: 5014, column: 19, scope: !6887)
!6896 = !DILocation(line: 5016, column: 21, scope: !6887)
!6897 = !DILocation(line: 5016, column: 3, scope: !6887)
!6898 = !DILocation(line: 5017, column: 29, scope: !6899)
!6899 = distinct !DILexicalBlock(scope: !6887, file: !3, line: 5017, column: 7)
!6900 = !DILocation(line: 5017, column: 9, scope: !6899)
!6901 = !DILocation(line: 5017, column: 32, scope: !6899)
!6902 = !DILocation(line: 5017, column: 37, scope: !6899)
!6903 = !DILocation(line: 5017, column: 40, scope: !6899)
!6904 = !DILocation(line: 5017, column: 7, scope: !6887)
!6905 = !DILocation(line: 5018, column: 5, scope: !6899)
!6906 = !DILocation(line: 5019, column: 7, scope: !6907)
!6907 = distinct !DILexicalBlock(scope: !6887, file: !3, line: 5019, column: 7)
!6908 = !DILocation(line: 5019, column: 12, scope: !6907)
!6909 = !DILocation(line: 5019, column: 7, scope: !6887)
!6910 = !DILocation(line: 5020, column: 19, scope: !6907)
!6911 = !DILocation(line: 5020, column: 22, scope: !6907)
!6912 = !DILocation(line: 5020, column: 5, scope: !6907)
!6913 = !DILocation(line: 5022, column: 6, scope: !6907)
!6914 = !DILocation(line: 5022, column: 10, scope: !6907)
!6915 = !DILocation(line: 5023, column: 1, scope: !6887)
!6916 = distinct !DISubprogram(name: "real_round", scope: !3, file: !3, line: 5029, type: !1762, scopeLine: 5031, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !406)
!6917 = !DILocalVariable(name: "r", arg: 1, scope: !6916, file: !3, line: 5029, type: !426)
!6918 = !DILocation(line: 5029, column: 30, scope: !6916)
!6919 = !DILocalVariable(name: "mode", arg: 2, scope: !6916, file: !3, line: 5029, type: !226)
!6920 = !DILocation(line: 5029, column: 51, scope: !6916)
!6921 = !DILocalVariable(name: "x", arg: 3, scope: !6916, file: !3, line: 5030, type: !6)
!6922 = !DILocation(line: 5030, column: 29, scope: !6916)
!6923 = !DILocation(line: 5032, column: 11, scope: !6916)
!6924 = !DILocation(line: 5032, column: 14, scope: !6916)
!6925 = !DILocation(line: 5032, column: 30, scope: !6916)
!6926 = !DILocation(line: 5032, column: 33, scope: !6916)
!6927 = !DILocation(line: 5032, column: 3, scope: !6916)
!6928 = !DILocation(line: 5033, column: 17, scope: !6916)
!6929 = !DILocation(line: 5033, column: 20, scope: !6916)
!6930 = !DILocation(line: 5033, column: 3, scope: !6916)
!6931 = !DILocation(line: 5034, column: 7, scope: !6932)
!6932 = distinct !DILexicalBlock(scope: !6916, file: !3, line: 5034, column: 7)
!6933 = !DILocation(line: 5034, column: 12, scope: !6932)
!6934 = !DILocation(line: 5034, column: 7, scope: !6916)
!6935 = !DILocation(line: 5035, column: 19, scope: !6932)
!6936 = !DILocation(line: 5035, column: 22, scope: !6932)
!6937 = !DILocation(line: 5035, column: 28, scope: !6932)
!6938 = !DILocation(line: 5035, column: 5, scope: !6932)
!6939 = !DILocation(line: 5036, column: 1, scope: !6916)
!6940 = distinct !DISubprogram(name: "real_copysign", scope: !3, file: !3, line: 5041, type: !1275, scopeLine: 5042, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !406)
!6941 = !DILocalVariable(name: "r", arg: 1, scope: !6940, file: !3, line: 5041, type: !426)
!6942 = !DILocation(line: 5041, column: 33, scope: !6940)
!6943 = !DILocalVariable(name: "x", arg: 2, scope: !6940, file: !3, line: 5041, type: !6)
!6944 = !DILocation(line: 5041, column: 59, scope: !6940)
!6945 = !DILocation(line: 5043, column: 13, scope: !6940)
!6946 = !DILocation(line: 5043, column: 16, scope: !6940)
!6947 = !DILocation(line: 5043, column: 3, scope: !6940)
!6948 = !DILocation(line: 5043, column: 6, scope: !6940)
!6949 = !DILocation(line: 5043, column: 11, scope: !6940)
!6950 = !DILocation(line: 5044, column: 1, scope: !6940)
!6951 = distinct !DISubprogram(name: "real_isinteger", scope: !3, file: !3, line: 5137, type: !6952, scopeLine: 5138, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !406)
!6952 = !DISubroutineType(types: !6953)
!6953 = !{!399, !6, !226}
!6954 = !DILocalVariable(name: "c", arg: 1, scope: !6951, file: !3, line: 5137, type: !6)
!6955 = !DILocation(line: 5137, column: 40, scope: !6951)
!6956 = !DILocalVariable(name: "mode", arg: 2, scope: !6951, file: !3, line: 5137, type: !226)
!6957 = !DILocation(line: 5137, column: 61, scope: !6951)
!6958 = !DILocalVariable(name: "cint", scope: !6951, file: !3, line: 5139, type: !8)
!6959 = !DILocation(line: 5139, column: 19, scope: !6951)
!6960 = !DILocation(line: 5141, column: 22, scope: !6951)
!6961 = !DILocation(line: 5141, column: 28, scope: !6951)
!6962 = !DILocation(line: 5141, column: 3, scope: !6951)
!6963 = !DILocation(line: 5142, column: 26, scope: !6951)
!6964 = !DILocation(line: 5142, column: 10, scope: !6951)
!6965 = !DILocation(line: 5142, column: 3, scope: !6951)
!6966 = distinct !DISubprogram(name: "get_max_float", scope: !3, file: !3, line: 5151, type: !6967, scopeLine: 5152, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !406)
!6967 = !DISubroutineType(types: !6968)
!6968 = !{null, !419, !2185, !2187}
!6969 = !DILocalVariable(name: "fmt", arg: 1, scope: !6966, file: !3, line: 5151, type: !419)
!6970 = !DILocation(line: 5151, column: 42, scope: !6966)
!6971 = !DILocalVariable(name: "buf", arg: 2, scope: !6966, file: !3, line: 5151, type: !2185)
!6972 = !DILocation(line: 5151, column: 53, scope: !6966)
!6973 = !DILocalVariable(name: "len", arg: 3, scope: !6966, file: !3, line: 5151, type: !2187)
!6974 = !DILocation(line: 5151, column: 65, scope: !6966)
!6975 = !DILocalVariable(name: "i", scope: !6966, file: !3, line: 5153, type: !398)
!6976 = !DILocation(line: 5153, column: 7, scope: !6966)
!6977 = !DILocalVariable(name: "n", scope: !6966, file: !3, line: 5153, type: !398)
!6978 = !DILocation(line: 5153, column: 10, scope: !6966)
!6979 = !DILocalVariable(name: "p", scope: !6966, file: !3, line: 5154, type: !2185)
!6980 = !DILocation(line: 5154, column: 9, scope: !6966)
!6981 = !DILocation(line: 5156, column: 11, scope: !6966)
!6982 = !DILocation(line: 5156, column: 3, scope: !6966)
!6983 = !DILocation(line: 5157, column: 7, scope: !6966)
!6984 = !DILocation(line: 5157, column: 12, scope: !6966)
!6985 = !DILocation(line: 5157, column: 5, scope: !6966)
!6986 = !DILocation(line: 5158, column: 10, scope: !6987)
!6987 = distinct !DILexicalBlock(scope: !6966, file: !3, line: 5158, column: 3)
!6988 = !DILocation(line: 5158, column: 19, scope: !6987)
!6989 = !DILocation(line: 5158, column: 23, scope: !6987)
!6990 = !DILocation(line: 5158, column: 17, scope: !6987)
!6991 = !DILocation(line: 5158, column: 8, scope: !6987)
!6992 = !DILocation(line: 5158, column: 28, scope: !6993)
!6993 = distinct !DILexicalBlock(scope: !6987, file: !3, line: 5158, column: 3)
!6994 = !DILocation(line: 5158, column: 30, scope: !6993)
!6995 = !DILocation(line: 5158, column: 36, scope: !6993)
!6996 = !DILocation(line: 5158, column: 34, scope: !6993)
!6997 = !DILocation(line: 5158, column: 3, scope: !6987)
!6998 = !DILocation(line: 5159, column: 7, scope: !6993)
!6999 = !DILocation(line: 5159, column: 10, scope: !6993)
!7000 = !DILocation(line: 5159, column: 5, scope: !6993)
!7001 = !DILocation(line: 5158, column: 41, scope: !6993)
!7002 = !DILocation(line: 5158, column: 3, scope: !6993)
!7003 = distinct !{!7003, !6997, !7004}
!7004 = !DILocation(line: 5159, column: 12, scope: !6987)
!7005 = !DILocation(line: 5160, column: 7, scope: !7006)
!7006 = distinct !DILexicalBlock(scope: !6966, file: !3, line: 5160, column: 7)
!7007 = !DILocation(line: 5160, column: 11, scope: !7006)
!7008 = !DILocation(line: 5160, column: 9, scope: !7006)
!7009 = !DILocation(line: 5160, column: 7, scope: !6966)
!7010 = !DILocation(line: 5161, column: 19, scope: !7006)
!7011 = !DILocation(line: 5161, column: 23, scope: !7006)
!7012 = !DILocation(line: 5161, column: 21, scope: !7006)
!7013 = !DILocation(line: 5161, column: 12, scope: !7006)
!7014 = !DILocation(line: 5161, column: 7, scope: !7006)
!7015 = !DILocation(line: 5161, column: 10, scope: !7006)
!7016 = !DILocation(line: 5161, column: 5, scope: !7006)
!7017 = !DILocation(line: 5162, column: 12, scope: !6966)
!7018 = !DILocation(line: 5162, column: 22, scope: !6966)
!7019 = !DILocation(line: 5162, column: 27, scope: !6966)
!7020 = !DILocation(line: 5162, column: 3, scope: !6966)
!7021 = !DILocation(line: 5163, column: 7, scope: !7022)
!7022 = distinct !DILexicalBlock(scope: !6966, file: !3, line: 5163, column: 7)
!7023 = !DILocation(line: 5163, column: 12, scope: !7022)
!7024 = !DILocation(line: 5163, column: 19, scope: !7022)
!7025 = !DILocation(line: 5163, column: 24, scope: !7022)
!7026 = !DILocation(line: 5163, column: 17, scope: !7022)
!7027 = !DILocation(line: 5163, column: 7, scope: !6966)
!7028 = !DILocation(line: 5171, column: 39, scope: !7029)
!7029 = distinct !DILexicalBlock(scope: !7022, file: !3, line: 5164, column: 5)
!7030 = !DILocation(line: 5171, column: 44, scope: !7029)
!7031 = !DILocation(line: 5171, column: 49, scope: !7029)
!7032 = !DILocation(line: 5171, column: 32, scope: !7029)
!7033 = !DILocation(line: 5171, column: 7, scope: !7029)
!7034 = !DILocation(line: 5171, column: 15, scope: !7029)
!7035 = !DILocation(line: 5171, column: 20, scope: !7029)
!7036 = !DILocation(line: 5171, column: 25, scope: !7029)
!7037 = !DILocation(line: 5171, column: 13, scope: !7029)
!7038 = !DILocation(line: 5171, column: 30, scope: !7029)
!7039 = !DILocation(line: 5172, column: 5, scope: !7029)
!7040 = !DILocation(line: 5174, column: 3, scope: !6966)
!7041 = !DILocation(line: 5175, column: 1, scope: !6966)
!7042 = distinct !DISubprogram(name: "sticky_rshift_significand", scope: !3, file: !3, line: 167, type: !7043, scopeLine: 169, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!7043 = !DISubroutineType(types: !7044)
!7044 = !{!399, !426, !6, !12}
!7045 = !DILocalVariable(name: "r", arg: 1, scope: !7042, file: !3, line: 167, type: !426)
!7046 = !DILocation(line: 167, column: 45, scope: !7042)
!7047 = !DILocalVariable(name: "a", arg: 2, scope: !7042, file: !3, line: 167, type: !6)
!7048 = !DILocation(line: 167, column: 71, scope: !7042)
!7049 = !DILocalVariable(name: "n", arg: 3, scope: !7042, file: !3, line: 168, type: !12)
!7050 = !DILocation(line: 168, column: 20, scope: !7042)
!7051 = !DILocalVariable(name: "sticky", scope: !7042, file: !3, line: 170, type: !20)
!7052 = !DILocation(line: 170, column: 17, scope: !7042)
!7053 = !DILocalVariable(name: "i", scope: !7042, file: !3, line: 171, type: !12)
!7054 = !DILocation(line: 171, column: 16, scope: !7042)
!7055 = !DILocalVariable(name: "ofs", scope: !7042, file: !3, line: 171, type: !12)
!7056 = !DILocation(line: 171, column: 19, scope: !7042)
!7057 = !DILocation(line: 173, column: 7, scope: !7058)
!7058 = distinct !DILexicalBlock(scope: !7042, file: !3, line: 173, column: 7)
!7059 = !DILocation(line: 173, column: 9, scope: !7058)
!7060 = !DILocation(line: 173, column: 7, scope: !7042)
!7061 = !DILocation(line: 175, column: 14, scope: !7062)
!7062 = distinct !DILexicalBlock(scope: !7063, file: !3, line: 175, column: 7)
!7063 = distinct !DILexicalBlock(scope: !7058, file: !3, line: 174, column: 5)
!7064 = !DILocation(line: 175, column: 25, scope: !7062)
!7065 = !DILocation(line: 175, column: 27, scope: !7062)
!7066 = !DILocation(line: 175, column: 23, scope: !7062)
!7067 = !DILocation(line: 175, column: 12, scope: !7062)
!7068 = !DILocation(line: 175, column: 49, scope: !7069)
!7069 = distinct !DILexicalBlock(scope: !7062, file: !3, line: 175, column: 7)
!7070 = !DILocation(line: 175, column: 53, scope: !7069)
!7071 = !DILocation(line: 175, column: 51, scope: !7069)
!7072 = !DILocation(line: 175, column: 7, scope: !7062)
!7073 = !DILocation(line: 176, column: 12, scope: !7069)
!7074 = !DILocation(line: 176, column: 15, scope: !7069)
!7075 = !DILocation(line: 176, column: 19, scope: !7069)
!7076 = !DILocation(line: 176, column: 9, scope: !7069)
!7077 = !DILocation(line: 176, column: 2, scope: !7069)
!7078 = !DILocation(line: 175, column: 58, scope: !7069)
!7079 = !DILocation(line: 175, column: 7, scope: !7069)
!7080 = distinct !{!7080, !7072, !7081}
!7081 = !DILocation(line: 176, column: 20, scope: !7062)
!7082 = !DILocation(line: 177, column: 9, scope: !7063)
!7083 = !DILocation(line: 178, column: 5, scope: !7063)
!7084 = !DILocation(line: 180, column: 7, scope: !7085)
!7085 = distinct !DILexicalBlock(scope: !7042, file: !3, line: 180, column: 7)
!7086 = !DILocation(line: 180, column: 9, scope: !7085)
!7087 = !DILocation(line: 180, column: 7, scope: !7042)
!7088 = !DILocation(line: 182, column: 17, scope: !7089)
!7089 = distinct !DILexicalBlock(scope: !7085, file: !3, line: 181, column: 5)
!7090 = !DILocation(line: 182, column: 20, scope: !7089)
!7091 = !DILocation(line: 182, column: 24, scope: !7089)
!7092 = !DILocation(line: 182, column: 53, scope: !7089)
!7093 = !DILocation(line: 182, column: 50, scope: !7089)
!7094 = !DILocation(line: 182, column: 56, scope: !7089)
!7095 = !DILocation(line: 182, column: 29, scope: !7089)
!7096 = !DILocation(line: 182, column: 14, scope: !7089)
!7097 = !DILocation(line: 183, column: 14, scope: !7098)
!7098 = distinct !DILexicalBlock(scope: !7089, file: !3, line: 183, column: 7)
!7099 = !DILocation(line: 183, column: 12, scope: !7098)
!7100 = !DILocation(line: 183, column: 19, scope: !7101)
!7101 = distinct !DILexicalBlock(scope: !7098, file: !3, line: 183, column: 7)
!7102 = !DILocation(line: 183, column: 21, scope: !7101)
!7103 = !DILocation(line: 183, column: 7, scope: !7098)
!7104 = !DILocation(line: 186, column: 11, scope: !7105)
!7105 = distinct !DILexicalBlock(scope: !7101, file: !3, line: 184, column: 2)
!7106 = !DILocation(line: 186, column: 17, scope: !7105)
!7107 = !DILocation(line: 186, column: 15, scope: !7105)
!7108 = !DILocation(line: 186, column: 19, scope: !7105)
!7109 = !DILocation(line: 186, column: 34, scope: !7105)
!7110 = !DILocation(line: 186, column: 37, scope: !7105)
!7111 = !DILocation(line: 186, column: 41, scope: !7105)
!7112 = !DILocation(line: 186, column: 47, scope: !7105)
!7113 = !DILocation(line: 186, column: 45, scope: !7105)
!7114 = !DILocation(line: 186, column: 54, scope: !7105)
!7115 = !DILocation(line: 186, column: 51, scope: !7105)
!7116 = !DILocation(line: 187, column: 13, scope: !7105)
!7117 = !DILocation(line: 187, column: 19, scope: !7105)
!7118 = !DILocation(line: 187, column: 17, scope: !7105)
!7119 = !DILocation(line: 187, column: 21, scope: !7105)
!7120 = !DILocation(line: 187, column: 25, scope: !7105)
!7121 = !DILocation(line: 187, column: 40, scope: !7105)
!7122 = !DILocation(line: 187, column: 43, scope: !7105)
!7123 = !DILocation(line: 187, column: 47, scope: !7105)
!7124 = !DILocation(line: 187, column: 53, scope: !7105)
!7125 = !DILocation(line: 187, column: 51, scope: !7105)
!7126 = !DILocation(line: 187, column: 55, scope: !7105)
!7127 = !DILocation(line: 188, column: 30, scope: !7105)
!7128 = !DILocation(line: 188, column: 28, scope: !7105)
!7129 = !DILocation(line: 188, column: 5, scope: !7105)
!7130 = !DILocation(line: 187, column: 9, scope: !7105)
!7131 = !DILocation(line: 185, column: 4, scope: !7105)
!7132 = !DILocation(line: 185, column: 7, scope: !7105)
!7133 = !DILocation(line: 185, column: 11, scope: !7105)
!7134 = !DILocation(line: 186, column: 6, scope: !7105)
!7135 = !DILocation(line: 189, column: 2, scope: !7105)
!7136 = !DILocation(line: 183, column: 30, scope: !7101)
!7137 = !DILocation(line: 183, column: 7, scope: !7101)
!7138 = distinct !{!7138, !7103, !7139}
!7139 = !DILocation(line: 189, column: 2, scope: !7098)
!7140 = !DILocation(line: 190, column: 5, scope: !7089)
!7141 = !DILocation(line: 193, column: 14, scope: !7142)
!7142 = distinct !DILexicalBlock(scope: !7143, file: !3, line: 193, column: 7)
!7143 = distinct !DILexicalBlock(scope: !7085, file: !3, line: 192, column: 5)
!7144 = !DILocation(line: 193, column: 12, scope: !7142)
!7145 = !DILocation(line: 193, column: 19, scope: !7146)
!7146 = distinct !DILexicalBlock(scope: !7142, file: !3, line: 193, column: 7)
!7147 = !DILocation(line: 193, column: 25, scope: !7146)
!7148 = !DILocation(line: 193, column: 23, scope: !7146)
!7149 = !DILocation(line: 193, column: 27, scope: !7146)
!7150 = !DILocation(line: 193, column: 7, scope: !7142)
!7151 = !DILocation(line: 194, column: 14, scope: !7146)
!7152 = !DILocation(line: 194, column: 17, scope: !7146)
!7153 = !DILocation(line: 194, column: 21, scope: !7146)
!7154 = !DILocation(line: 194, column: 27, scope: !7146)
!7155 = !DILocation(line: 194, column: 25, scope: !7146)
!7156 = !DILocation(line: 194, column: 2, scope: !7146)
!7157 = !DILocation(line: 194, column: 5, scope: !7146)
!7158 = !DILocation(line: 194, column: 9, scope: !7146)
!7159 = !DILocation(line: 194, column: 12, scope: !7146)
!7160 = !DILocation(line: 193, column: 36, scope: !7146)
!7161 = !DILocation(line: 193, column: 7, scope: !7146)
!7162 = distinct !{!7162, !7150, !7163}
!7163 = !DILocation(line: 194, column: 28, scope: !7142)
!7164 = !DILocation(line: 195, column: 7, scope: !7143)
!7165 = !DILocation(line: 195, column: 14, scope: !7166)
!7166 = distinct !DILexicalBlock(scope: !7167, file: !3, line: 195, column: 7)
!7167 = distinct !DILexicalBlock(scope: !7143, file: !3, line: 195, column: 7)
!7168 = !DILocation(line: 195, column: 16, scope: !7166)
!7169 = !DILocation(line: 195, column: 7, scope: !7167)
!7170 = !DILocation(line: 196, column: 2, scope: !7166)
!7171 = !DILocation(line: 196, column: 5, scope: !7166)
!7172 = !DILocation(line: 196, column: 9, scope: !7166)
!7173 = !DILocation(line: 196, column: 12, scope: !7166)
!7174 = !DILocation(line: 195, column: 25, scope: !7166)
!7175 = !DILocation(line: 195, column: 7, scope: !7166)
!7176 = distinct !{!7176, !7169, !7177}
!7177 = !DILocation(line: 196, column: 14, scope: !7167)
!7178 = !DILocation(line: 199, column: 10, scope: !7042)
!7179 = !DILocation(line: 199, column: 17, scope: !7042)
!7180 = !DILocation(line: 199, column: 3, scope: !7042)
!7181 = distinct !DISubprogram(name: "sub_significands", scope: !3, file: !3, line: 304, type: !639, scopeLine: 306, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!7182 = !DILocalVariable(name: "r", arg: 1, scope: !7181, file: !3, line: 304, type: !426)
!7183 = !DILocation(line: 304, column: 36, scope: !7181)
!7184 = !DILocalVariable(name: "a", arg: 2, scope: !7181, file: !3, line: 304, type: !6)
!7185 = !DILocation(line: 304, column: 62, scope: !7181)
!7186 = !DILocalVariable(name: "b", arg: 3, scope: !7181, file: !3, line: 305, type: !6)
!7187 = !DILocation(line: 305, column: 28, scope: !7181)
!7188 = !DILocalVariable(name: "carry", arg: 4, scope: !7181, file: !3, line: 305, type: !398)
!7189 = !DILocation(line: 305, column: 35, scope: !7181)
!7190 = !DILocalVariable(name: "i", scope: !7181, file: !3, line: 307, type: !398)
!7191 = !DILocation(line: 307, column: 7, scope: !7181)
!7192 = !DILocation(line: 309, column: 10, scope: !7193)
!7193 = distinct !DILexicalBlock(scope: !7181, file: !3, line: 309, column: 3)
!7194 = !DILocation(line: 309, column: 8, scope: !7193)
!7195 = !DILocation(line: 309, column: 15, scope: !7196)
!7196 = distinct !DILexicalBlock(scope: !7193, file: !3, line: 309, column: 3)
!7197 = !DILocation(line: 309, column: 17, scope: !7196)
!7198 = !DILocation(line: 309, column: 3, scope: !7193)
!7199 = !DILocalVariable(name: "ai", scope: !7200, file: !3, line: 311, type: !20)
!7200 = distinct !DILexicalBlock(scope: !7196, file: !3, line: 310, column: 5)
!7201 = !DILocation(line: 311, column: 21, scope: !7200)
!7202 = !DILocation(line: 311, column: 26, scope: !7200)
!7203 = !DILocation(line: 311, column: 29, scope: !7200)
!7204 = !DILocation(line: 311, column: 33, scope: !7200)
!7205 = !DILocalVariable(name: "ri", scope: !7200, file: !3, line: 312, type: !20)
!7206 = !DILocation(line: 312, column: 21, scope: !7200)
!7207 = !DILocation(line: 312, column: 26, scope: !7200)
!7208 = !DILocation(line: 312, column: 31, scope: !7200)
!7209 = !DILocation(line: 312, column: 34, scope: !7200)
!7210 = !DILocation(line: 312, column: 38, scope: !7200)
!7211 = !DILocation(line: 312, column: 29, scope: !7200)
!7212 = !DILocation(line: 314, column: 11, scope: !7213)
!7213 = distinct !DILexicalBlock(scope: !7200, file: !3, line: 314, column: 11)
!7214 = !DILocation(line: 314, column: 11, scope: !7200)
!7215 = !DILocation(line: 316, column: 12, scope: !7216)
!7216 = distinct !DILexicalBlock(scope: !7213, file: !3, line: 315, column: 2)
!7217 = !DILocation(line: 316, column: 17, scope: !7216)
!7218 = !DILocation(line: 316, column: 15, scope: !7216)
!7219 = !DILocation(line: 316, column: 10, scope: !7216)
!7220 = !DILocation(line: 317, column: 14, scope: !7216)
!7221 = !DILocation(line: 317, column: 13, scope: !7216)
!7222 = !DILocation(line: 317, column: 19, scope: !7216)
!7223 = !DILocation(line: 317, column: 10, scope: !7216)
!7224 = !DILocation(line: 318, column: 2, scope: !7216)
!7225 = !DILocation(line: 320, column: 10, scope: !7213)
!7226 = !DILocation(line: 320, column: 15, scope: !7213)
!7227 = !DILocation(line: 320, column: 13, scope: !7213)
!7228 = !DILocation(line: 320, column: 8, scope: !7213)
!7229 = !DILocation(line: 322, column: 19, scope: !7200)
!7230 = !DILocation(line: 322, column: 7, scope: !7200)
!7231 = !DILocation(line: 322, column: 10, scope: !7200)
!7232 = !DILocation(line: 322, column: 14, scope: !7200)
!7233 = !DILocation(line: 322, column: 17, scope: !7200)
!7234 = !DILocation(line: 323, column: 5, scope: !7200)
!7235 = !DILocation(line: 309, column: 26, scope: !7196)
!7236 = !DILocation(line: 309, column: 3, scope: !7196)
!7237 = distinct !{!7237, !7198, !7238}
!7238 = !DILocation(line: 323, column: 5, scope: !7193)
!7239 = !DILocation(line: 325, column: 10, scope: !7181)
!7240 = !DILocation(line: 325, column: 3, scope: !7181)
!7241 = distinct !DISubprogram(name: "neg_significand", scope: !3, file: !3, line: 331, type: !1275, scopeLine: 332, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!7242 = !DILocalVariable(name: "r", arg: 1, scope: !7241, file: !3, line: 331, type: !426)
!7243 = !DILocation(line: 331, column: 35, scope: !7241)
!7244 = !DILocalVariable(name: "a", arg: 2, scope: !7241, file: !3, line: 331, type: !6)
!7245 = !DILocation(line: 331, column: 61, scope: !7241)
!7246 = !DILocalVariable(name: "carry", scope: !7241, file: !3, line: 333, type: !399)
!7247 = !DILocation(line: 333, column: 8, scope: !7241)
!7248 = !DILocalVariable(name: "i", scope: !7241, file: !3, line: 334, type: !398)
!7249 = !DILocation(line: 334, column: 7, scope: !7241)
!7250 = !DILocation(line: 336, column: 10, scope: !7251)
!7251 = distinct !DILexicalBlock(scope: !7241, file: !3, line: 336, column: 3)
!7252 = !DILocation(line: 336, column: 8, scope: !7251)
!7253 = !DILocation(line: 336, column: 15, scope: !7254)
!7254 = distinct !DILexicalBlock(scope: !7251, file: !3, line: 336, column: 3)
!7255 = !DILocation(line: 336, column: 17, scope: !7254)
!7256 = !DILocation(line: 336, column: 3, scope: !7251)
!7257 = !DILocalVariable(name: "ri", scope: !7258, file: !3, line: 338, type: !20)
!7258 = distinct !DILexicalBlock(scope: !7254, file: !3, line: 337, column: 5)
!7259 = !DILocation(line: 338, column: 21, scope: !7258)
!7260 = !DILocalVariable(name: "ai", scope: !7258, file: !3, line: 338, type: !20)
!7261 = !DILocation(line: 338, column: 25, scope: !7258)
!7262 = !DILocation(line: 338, column: 30, scope: !7258)
!7263 = !DILocation(line: 338, column: 33, scope: !7258)
!7264 = !DILocation(line: 338, column: 37, scope: !7258)
!7265 = !DILocation(line: 340, column: 11, scope: !7266)
!7266 = distinct !DILexicalBlock(scope: !7258, file: !3, line: 340, column: 11)
!7267 = !DILocation(line: 340, column: 11, scope: !7258)
!7268 = !DILocation(line: 342, column: 8, scope: !7269)
!7269 = distinct !DILexicalBlock(scope: !7270, file: !3, line: 342, column: 8)
!7270 = distinct !DILexicalBlock(scope: !7266, file: !3, line: 341, column: 2)
!7271 = !DILocation(line: 342, column: 8, scope: !7270)
!7272 = !DILocation(line: 344, column: 14, scope: !7273)
!7273 = distinct !DILexicalBlock(scope: !7269, file: !3, line: 343, column: 6)
!7274 = !DILocation(line: 344, column: 13, scope: !7273)
!7275 = !DILocation(line: 344, column: 11, scope: !7273)
!7276 = !DILocation(line: 345, column: 14, scope: !7273)
!7277 = !DILocation(line: 346, column: 6, scope: !7273)
!7278 = !DILocation(line: 348, column: 11, scope: !7269)
!7279 = !DILocation(line: 348, column: 9, scope: !7269)
!7280 = !DILocation(line: 349, column: 2, scope: !7270)
!7281 = !DILocation(line: 351, column: 8, scope: !7266)
!7282 = !DILocation(line: 351, column: 7, scope: !7266)
!7283 = !DILocation(line: 351, column: 5, scope: !7266)
!7284 = !DILocation(line: 353, column: 19, scope: !7258)
!7285 = !DILocation(line: 353, column: 7, scope: !7258)
!7286 = !DILocation(line: 353, column: 10, scope: !7258)
!7287 = !DILocation(line: 353, column: 14, scope: !7258)
!7288 = !DILocation(line: 353, column: 17, scope: !7258)
!7289 = !DILocation(line: 354, column: 5, scope: !7258)
!7290 = !DILocation(line: 336, column: 26, scope: !7254)
!7291 = !DILocation(line: 336, column: 3, scope: !7254)
!7292 = distinct !{!7292, !7256, !7293}
!7293 = !DILocation(line: 354, column: 5, scope: !7251)
!7294 = !DILocation(line: 355, column: 1, scope: !7241)
!7295 = distinct !DISubprogram(name: "div_significands", scope: !3, file: !3, line: 439, type: !832, scopeLine: 441, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!7296 = !DILocalVariable(name: "r", arg: 1, scope: !7295, file: !3, line: 439, type: !426)
!7297 = !DILocation(line: 439, column: 36, scope: !7295)
!7298 = !DILocalVariable(name: "a", arg: 2, scope: !7295, file: !3, line: 439, type: !6)
!7299 = !DILocation(line: 439, column: 62, scope: !7295)
!7300 = !DILocalVariable(name: "b", arg: 3, scope: !7295, file: !3, line: 440, type: !6)
!7301 = !DILocation(line: 440, column: 28, scope: !7295)
!7302 = !DILocalVariable(name: "u", scope: !7295, file: !3, line: 442, type: !8)
!7303 = !DILocation(line: 442, column: 19, scope: !7295)
!7304 = !DILocalVariable(name: "i", scope: !7295, file: !3, line: 443, type: !398)
!7305 = !DILocation(line: 443, column: 7, scope: !7295)
!7306 = !DILocalVariable(name: "bit", scope: !7295, file: !3, line: 443, type: !398)
!7307 = !DILocation(line: 443, column: 10, scope: !7295)
!7308 = !DILocalVariable(name: "msb", scope: !7295, file: !3, line: 444, type: !20)
!7309 = !DILocation(line: 444, column: 17, scope: !7295)
!7310 = !DILocalVariable(name: "inexact", scope: !7295, file: !3, line: 444, type: !20)
!7311 = !DILocation(line: 444, column: 22, scope: !7295)
!7312 = !DILocation(line: 446, column: 8, scope: !7295)
!7313 = !DILocation(line: 446, column: 7, scope: !7295)
!7314 = !DILocation(line: 447, column: 11, scope: !7295)
!7315 = !DILocation(line: 447, column: 14, scope: !7295)
!7316 = !DILocation(line: 447, column: 3, scope: !7295)
!7317 = !DILocation(line: 449, column: 7, scope: !7295)
!7318 = !DILocation(line: 450, column: 3, scope: !7295)
!7319 = !DILocation(line: 451, column: 3, scope: !7295)
!7320 = !DILocation(line: 453, column: 15, scope: !7321)
!7321 = distinct !DILexicalBlock(scope: !7295, file: !3, line: 452, column: 5)
!7322 = !DILocation(line: 453, column: 13, scope: !7321)
!7323 = !DILocation(line: 453, column: 28, scope: !7321)
!7324 = !DILocation(line: 453, column: 11, scope: !7321)
!7325 = !DILocation(line: 454, column: 7, scope: !7321)
!7326 = !DILabel(scope: !7321, name: "start", file: !3, line: 455)
!7327 = !DILocation(line: 455, column: 5, scope: !7321)
!7328 = !DILocation(line: 456, column: 11, scope: !7329)
!7329 = distinct !DILexicalBlock(scope: !7321, file: !3, line: 456, column: 11)
!7330 = !DILocation(line: 456, column: 15, scope: !7329)
!7331 = !DILocation(line: 456, column: 40, scope: !7329)
!7332 = !DILocation(line: 456, column: 18, scope: !7329)
!7333 = !DILocation(line: 456, column: 43, scope: !7329)
!7334 = !DILocation(line: 456, column: 11, scope: !7321)
!7335 = !DILocation(line: 458, column: 30, scope: !7336)
!7336 = distinct !DILexicalBlock(scope: !7329, file: !3, line: 457, column: 2)
!7337 = !DILocation(line: 458, column: 4, scope: !7336)
!7338 = !DILocation(line: 459, column: 25, scope: !7336)
!7339 = !DILocation(line: 459, column: 28, scope: !7336)
!7340 = !DILocation(line: 459, column: 4, scope: !7336)
!7341 = !DILocation(line: 460, column: 2, scope: !7336)
!7342 = !DILocation(line: 461, column: 5, scope: !7321)
!7343 = !DILocation(line: 462, column: 10, scope: !7295)
!7344 = !DILocation(line: 462, column: 16, scope: !7295)
!7345 = distinct !{!7345, !7319, !7346}
!7346 = !DILocation(line: 462, column: 20, scope: !7295)
!7347 = !DILocation(line: 464, column: 10, scope: !7348)
!7348 = distinct !DILexicalBlock(scope: !7295, file: !3, line: 464, column: 3)
!7349 = !DILocation(line: 464, column: 23, scope: !7348)
!7350 = !DILocation(line: 464, column: 8, scope: !7348)
!7351 = !DILocation(line: 464, column: 28, scope: !7352)
!7352 = distinct !DILexicalBlock(scope: !7348, file: !3, line: 464, column: 3)
!7353 = !DILocation(line: 464, column: 30, scope: !7352)
!7354 = !DILocation(line: 464, column: 3, scope: !7348)
!7355 = !DILocation(line: 465, column: 18, scope: !7352)
!7356 = !DILocation(line: 465, column: 22, scope: !7352)
!7357 = !DILocation(line: 465, column: 16, scope: !7352)
!7358 = !DILocation(line: 465, column: 13, scope: !7352)
!7359 = !DILocation(line: 465, column: 5, scope: !7352)
!7360 = !DILocation(line: 464, column: 40, scope: !7352)
!7361 = !DILocation(line: 464, column: 3, scope: !7352)
!7362 = distinct !{!7362, !7354, !7363}
!7363 = !DILocation(line: 465, column: 23, scope: !7348)
!7364 = !DILocation(line: 467, column: 10, scope: !7295)
!7365 = !DILocation(line: 467, column: 18, scope: !7295)
!7366 = !DILocation(line: 467, column: 3, scope: !7295)
!7367 = distinct !DISubprogram(name: "set_significand_bit", scope: !3, file: !3, line: 395, type: !4286, scopeLine: 396, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!7368 = !DILocalVariable(name: "r", arg: 1, scope: !7367, file: !3, line: 395, type: !426)
!7369 = !DILocation(line: 395, column: 39, scope: !7367)
!7370 = !DILocalVariable(name: "n", arg: 2, scope: !7367, file: !3, line: 395, type: !12)
!7371 = !DILocation(line: 395, column: 55, scope: !7367)
!7372 = !DILocation(line: 398, column: 29, scope: !7367)
!7373 = !DILocation(line: 398, column: 31, scope: !7367)
!7374 = !DILocation(line: 398, column: 25, scope: !7367)
!7375 = !DILocation(line: 397, column: 3, scope: !7367)
!7376 = !DILocation(line: 397, column: 6, scope: !7367)
!7377 = !DILocation(line: 397, column: 10, scope: !7367)
!7378 = !DILocation(line: 397, column: 12, scope: !7367)
!7379 = !DILocation(line: 398, column: 5, scope: !7367)
!7380 = !DILocation(line: 399, column: 1, scope: !7367)
!7381 = distinct !DISubprogram(name: "decimal_integer_string", scope: !3, file: !3, line: 2193, type: !7382, scopeLine: 2195, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!7382 = !DISubroutineType(types: !7383)
!7383 = !{null, !2185, !6, !2187}
!7384 = !DILocalVariable(name: "str", arg: 1, scope: !7381, file: !3, line: 2193, type: !2185)
!7385 = !DILocation(line: 2193, column: 31, scope: !7381)
!7386 = !DILocalVariable(name: "r_orig", arg: 2, scope: !7381, file: !3, line: 2193, type: !6)
!7387 = !DILocation(line: 2193, column: 59, scope: !7381)
!7388 = !DILocalVariable(name: "buf_size", arg: 3, scope: !7381, file: !3, line: 2194, type: !2187)
!7389 = !DILocation(line: 2194, column: 11, scope: !7381)
!7390 = !DILocalVariable(name: "dec_exp", scope: !7381, file: !3, line: 2196, type: !398)
!7391 = !DILocation(line: 2196, column: 7, scope: !7381)
!7392 = !DILocalVariable(name: "digit", scope: !7381, file: !3, line: 2196, type: !398)
!7393 = !DILocation(line: 2196, column: 16, scope: !7381)
!7394 = !DILocalVariable(name: "digits", scope: !7381, file: !3, line: 2196, type: !398)
!7395 = !DILocation(line: 2196, column: 23, scope: !7381)
!7396 = !DILocalVariable(name: "r", scope: !7381, file: !3, line: 2197, type: !8)
!7397 = !DILocation(line: 2197, column: 19, scope: !7381)
!7398 = !DILocalVariable(name: "pten", scope: !7381, file: !3, line: 2197, type: !8)
!7399 = !DILocation(line: 2197, column: 22, scope: !7381)
!7400 = !DILocalVariable(name: "p", scope: !7381, file: !3, line: 2198, type: !2185)
!7401 = !DILocation(line: 2198, column: 9, scope: !7381)
!7402 = !DILocalVariable(name: "sign", scope: !7381, file: !3, line: 2199, type: !399)
!7403 = !DILocation(line: 2199, column: 8, scope: !7381)
!7404 = !DILocation(line: 2201, column: 8, scope: !7381)
!7405 = !DILocation(line: 2201, column: 7, scope: !7381)
!7406 = !DILocation(line: 2203, column: 9, scope: !7407)
!7407 = distinct !DILexicalBlock(scope: !7381, file: !3, line: 2203, column: 7)
!7408 = !DILocation(line: 2203, column: 12, scope: !7407)
!7409 = !DILocation(line: 2203, column: 7, scope: !7381)
!7410 = !DILocation(line: 2205, column: 15, scope: !7411)
!7411 = distinct !DILexicalBlock(scope: !7407, file: !3, line: 2204, column: 5)
!7412 = !DILocation(line: 2205, column: 7, scope: !7411)
!7413 = !DILocation(line: 2206, column: 7, scope: !7411)
!7414 = !DILocation(line: 2209, column: 12, scope: !7381)
!7415 = !DILocation(line: 2209, column: 10, scope: !7381)
!7416 = !DILocation(line: 2209, column: 8, scope: !7381)
!7417 = !DILocation(line: 2210, column: 5, scope: !7381)
!7418 = !DILocation(line: 2210, column: 10, scope: !7381)
!7419 = !DILocation(line: 2212, column: 13, scope: !7381)
!7420 = !DILocation(line: 2212, column: 27, scope: !7381)
!7421 = !DILocation(line: 2212, column: 11, scope: !7381)
!7422 = !DILocation(line: 2213, column: 12, scope: !7381)
!7423 = !DILocation(line: 2213, column: 20, scope: !7381)
!7424 = !DILocation(line: 2213, column: 10, scope: !7381)
!7425 = !DILocation(line: 2214, column: 3, scope: !7381)
!7426 = !DILocation(line: 2216, column: 11, scope: !7381)
!7427 = !DILocation(line: 2216, column: 10, scope: !7381)
!7428 = !DILocation(line: 2217, column: 22, scope: !7381)
!7429 = !DILocation(line: 2217, column: 3, scope: !7381)
!7430 = !DILocation(line: 2219, column: 7, scope: !7381)
!7431 = !DILocation(line: 2219, column: 5, scope: !7381)
!7432 = !DILocation(line: 2220, column: 7, scope: !7433)
!7433 = distinct !DILexicalBlock(scope: !7381, file: !3, line: 2220, column: 7)
!7434 = !DILocation(line: 2220, column: 7, scope: !7381)
!7435 = !DILocation(line: 2221, column: 7, scope: !7433)
!7436 = !DILocation(line: 2221, column: 10, scope: !7433)
!7437 = !DILocation(line: 2221, column: 5, scope: !7433)
!7438 = !DILocation(line: 2223, column: 11, scope: !7381)
!7439 = !DILocation(line: 2223, column: 9, scope: !7381)
!7440 = !DILocation(line: 2224, column: 3, scope: !7381)
!7441 = !DILocation(line: 2225, column: 10, scope: !7381)
!7442 = !DILocation(line: 2225, column: 16, scope: !7381)
!7443 = !DILocation(line: 2225, column: 5, scope: !7381)
!7444 = !DILocation(line: 2225, column: 8, scope: !7381)
!7445 = !DILocation(line: 2226, column: 3, scope: !7381)
!7446 = !DILocation(line: 2226, column: 10, scope: !7381)
!7447 = !DILocation(line: 2226, column: 19, scope: !7381)
!7448 = !DILocation(line: 2228, column: 7, scope: !7449)
!7449 = distinct !DILexicalBlock(scope: !7381, file: !3, line: 2227, column: 5)
!7450 = !DILocation(line: 2229, column: 15, scope: !7449)
!7451 = !DILocation(line: 2229, column: 13, scope: !7449)
!7452 = !DILocation(line: 2230, column: 14, scope: !7449)
!7453 = !DILocation(line: 2230, column: 20, scope: !7449)
!7454 = !DILocation(line: 2230, column: 9, scope: !7449)
!7455 = !DILocation(line: 2230, column: 12, scope: !7449)
!7456 = distinct !{!7456, !7445, !7457}
!7457 = !DILocation(line: 2231, column: 5, scope: !7381)
!7458 = !DILocation(line: 2232, column: 5, scope: !7381)
!7459 = !DILocation(line: 2232, column: 8, scope: !7381)
!7460 = !DILocation(line: 2233, column: 5, scope: !7381)
!7461 = !DILocation(line: 2233, column: 8, scope: !7381)
!7462 = !DILocation(line: 2234, column: 1, scope: !7381)
!7463 = distinct !DISubprogram(name: "test_significand_bit", scope: !3, file: !3, line: 413, type: !7464, scopeLine: 414, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!7464 = !DISubroutineType(types: !7465)
!7465 = !{!399, !426, !12}
!7466 = !DILocalVariable(name: "r", arg: 1, scope: !7463, file: !3, line: 413, type: !426)
!7467 = !DILocation(line: 413, column: 40, scope: !7463)
!7468 = !DILocalVariable(name: "n", arg: 2, scope: !7463, file: !3, line: 413, type: !12)
!7469 = !DILocation(line: 413, column: 56, scope: !7463)
!7470 = !DILocalVariable(name: "t", scope: !7463, file: !3, line: 418, type: !398)
!7471 = !DILocation(line: 418, column: 7, scope: !7463)
!7472 = !DILocation(line: 418, column: 12, scope: !7463)
!7473 = !DILocation(line: 418, column: 15, scope: !7463)
!7474 = !DILocation(line: 418, column: 19, scope: !7463)
!7475 = !DILocation(line: 418, column: 21, scope: !7463)
!7476 = !DILocation(line: 418, column: 47, scope: !7463)
!7477 = !DILocation(line: 418, column: 49, scope: !7463)
!7478 = !DILocation(line: 418, column: 43, scope: !7463)
!7479 = !DILocation(line: 418, column: 72, scope: !7463)
!7480 = !DILocation(line: 418, column: 11, scope: !7463)
!7481 = !DILocation(line: 419, column: 10, scope: !7463)
!7482 = !DILocation(line: 419, column: 3, scope: !7463)
!7483 = distinct !DISubprogram(name: "encode_ieee_extended", scope: !3, file: !3, line: 3390, type: !417, scopeLine: 3392, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!7484 = !DILocalVariable(name: "fmt", arg: 1, scope: !7483, file: !3, line: 3390, type: !419)
!7485 = !DILocation(line: 3390, column: 49, scope: !7483)
!7486 = !DILocalVariable(name: "buf", arg: 2, scope: !7483, file: !3, line: 3390, type: !420)
!7487 = !DILocation(line: 3390, column: 60, scope: !7483)
!7488 = !DILocalVariable(name: "r", arg: 3, scope: !7483, file: !3, line: 3391, type: !6)
!7489 = !DILocation(line: 3391, column: 32, scope: !7483)
!7490 = !DILocalVariable(name: "image_hi", scope: !7483, file: !3, line: 3393, type: !20)
!7491 = !DILocation(line: 3393, column: 17, scope: !7483)
!7492 = !DILocalVariable(name: "sig_hi", scope: !7483, file: !3, line: 3393, type: !20)
!7493 = !DILocation(line: 3393, column: 27, scope: !7483)
!7494 = !DILocalVariable(name: "sig_lo", scope: !7483, file: !3, line: 3393, type: !20)
!7495 = !DILocation(line: 3393, column: 35, scope: !7483)
!7496 = !DILocalVariable(name: "denormal", scope: !7483, file: !3, line: 3394, type: !399)
!7497 = !DILocation(line: 3394, column: 8, scope: !7483)
!7498 = !DILocation(line: 3394, column: 20, scope: !7483)
!7499 = !DILocation(line: 3394, column: 23, scope: !7483)
!7500 = !DILocation(line: 3394, column: 36, scope: !7483)
!7501 = !DILocation(line: 3394, column: 47, scope: !7483)
!7502 = !DILocation(line: 3394, column: 19, scope: !7483)
!7503 = !DILocation(line: 3396, column: 14, scope: !7483)
!7504 = !DILocation(line: 3396, column: 17, scope: !7483)
!7505 = !DILocation(line: 3396, column: 22, scope: !7483)
!7506 = !DILocation(line: 3396, column: 12, scope: !7483)
!7507 = !DILocation(line: 3397, column: 19, scope: !7483)
!7508 = !DILocation(line: 3397, column: 10, scope: !7483)
!7509 = !DILocation(line: 3399, column: 11, scope: !7483)
!7510 = !DILocation(line: 3399, column: 14, scope: !7483)
!7511 = !DILocation(line: 3399, column: 3, scope: !7483)
!7512 = !DILocation(line: 3402, column: 7, scope: !7513)
!7513 = distinct !DILexicalBlock(scope: !7483, file: !3, line: 3400, column: 5)
!7514 = !DILocation(line: 3405, column: 11, scope: !7515)
!7515 = distinct !DILexicalBlock(scope: !7513, file: !3, line: 3405, column: 11)
!7516 = !DILocation(line: 3405, column: 16, scope: !7515)
!7517 = !DILocation(line: 3405, column: 11, scope: !7513)
!7518 = !DILocation(line: 3407, column: 13, scope: !7519)
!7519 = distinct !DILexicalBlock(scope: !7515, file: !3, line: 3406, column: 2)
!7520 = !DILocation(line: 3412, column: 11, scope: !7519)
!7521 = !DILocation(line: 3413, column: 2, scope: !7519)
!7522 = !DILocation(line: 3416, column: 13, scope: !7523)
!7523 = distinct !DILexicalBlock(scope: !7515, file: !3, line: 3415, column: 2)
!7524 = !DILocation(line: 3417, column: 20, scope: !7523)
!7525 = !DILocation(line: 3417, column: 11, scope: !7523)
!7526 = !DILocation(line: 3419, column: 7, scope: !7513)
!7527 = !DILocation(line: 3422, column: 11, scope: !7528)
!7528 = distinct !DILexicalBlock(scope: !7513, file: !3, line: 3422, column: 11)
!7529 = !DILocation(line: 3422, column: 16, scope: !7528)
!7530 = !DILocation(line: 3422, column: 11, scope: !7513)
!7531 = !DILocation(line: 3424, column: 13, scope: !7532)
!7532 = distinct !DILexicalBlock(scope: !7528, file: !3, line: 3423, column: 2)
!7533 = !DILocation(line: 3425, column: 8, scope: !7534)
!7534 = distinct !DILexicalBlock(scope: !7532, file: !3, line: 3425, column: 8)
!7535 = !DILocation(line: 3425, column: 11, scope: !7534)
!7536 = !DILocation(line: 3425, column: 8, scope: !7532)
!7537 = !DILocation(line: 3427, column: 12, scope: !7538)
!7538 = distinct !DILexicalBlock(scope: !7539, file: !3, line: 3427, column: 12)
!7539 = distinct !DILexicalBlock(scope: !7534, file: !3, line: 3426, column: 6)
!7540 = !DILocation(line: 3427, column: 17, scope: !7538)
!7541 = !DILocation(line: 3427, column: 12, scope: !7539)
!7542 = !DILocation(line: 3429, column: 12, scope: !7543)
!7543 = distinct !DILexicalBlock(scope: !7538, file: !3, line: 3428, column: 3)
!7544 = !DILocation(line: 3430, column: 12, scope: !7543)
!7545 = !DILocation(line: 3431, column: 3, scope: !7543)
!7546 = !DILocation(line: 3432, column: 6, scope: !7539)
!7547 = !DILocation(line: 3440, column: 17, scope: !7548)
!7548 = distinct !DILexicalBlock(scope: !7549, file: !3, line: 3439, column: 6)
!7549 = distinct !DILexicalBlock(scope: !7534, file: !3, line: 3433, column: 13)
!7550 = !DILocation(line: 3440, column: 20, scope: !7548)
!7551 = !DILocation(line: 3440, column: 15, scope: !7548)
!7552 = !DILocation(line: 3441, column: 17, scope: !7548)
!7553 = !DILocation(line: 3441, column: 24, scope: !7548)
!7554 = !DILocation(line: 3441, column: 30, scope: !7548)
!7555 = !DILocation(line: 3441, column: 15, scope: !7548)
!7556 = !DILocation(line: 3442, column: 15, scope: !7548)
!7557 = !DILocation(line: 3444, column: 8, scope: !7558)
!7558 = distinct !DILexicalBlock(scope: !7532, file: !3, line: 3444, column: 8)
!7559 = !DILocation(line: 3444, column: 11, scope: !7558)
!7560 = !DILocation(line: 3444, column: 25, scope: !7558)
!7561 = !DILocation(line: 3444, column: 30, scope: !7558)
!7562 = !DILocation(line: 3444, column: 22, scope: !7558)
!7563 = !DILocation(line: 3444, column: 8, scope: !7532)
!7564 = !DILocation(line: 3445, column: 13, scope: !7558)
!7565 = !DILocation(line: 3445, column: 6, scope: !7558)
!7566 = !DILocation(line: 3447, column: 13, scope: !7558)
!7567 = !DILocation(line: 3448, column: 9, scope: !7568)
!7568 = distinct !DILexicalBlock(scope: !7532, file: !3, line: 3448, column: 8)
!7569 = !DILocation(line: 3448, column: 16, scope: !7568)
!7570 = !DILocation(line: 3448, column: 30, scope: !7568)
!7571 = !DILocation(line: 3448, column: 35, scope: !7568)
!7572 = !DILocation(line: 3448, column: 38, scope: !7568)
!7573 = !DILocation(line: 3448, column: 45, scope: !7568)
!7574 = !DILocation(line: 3448, column: 8, scope: !7532)
!7575 = !DILocation(line: 3449, column: 13, scope: !7568)
!7576 = !DILocation(line: 3449, column: 6, scope: !7568)
!7577 = !DILocation(line: 3454, column: 11, scope: !7532)
!7578 = !DILocation(line: 3455, column: 2, scope: !7532)
!7579 = !DILocation(line: 3458, column: 13, scope: !7580)
!7580 = distinct !DILexicalBlock(scope: !7528, file: !3, line: 3457, column: 2)
!7581 = !DILocation(line: 3459, column: 20, scope: !7580)
!7582 = !DILocation(line: 3459, column: 11, scope: !7580)
!7583 = !DILocation(line: 3461, column: 7, scope: !7513)
!7584 = !DILocalVariable(name: "exp", scope: !7585, file: !3, line: 3465, type: !398)
!7585 = distinct !DILexicalBlock(scope: !7513, file: !3, line: 3464, column: 7)
!7586 = !DILocation(line: 3465, column: 6, scope: !7585)
!7587 = !DILocation(line: 3465, column: 12, scope: !7585)
!7588 = !DILocation(line: 3476, column: 6, scope: !7589)
!7589 = distinct !DILexicalBlock(scope: !7585, file: !3, line: 3476, column: 6)
!7590 = !DILocation(line: 3476, column: 6, scope: !7585)
!7591 = !DILocation(line: 3477, column: 8, scope: !7589)
!7592 = !DILocation(line: 3477, column: 4, scope: !7589)
!7593 = !DILocation(line: 3480, column: 10, scope: !7594)
!7594 = distinct !DILexicalBlock(scope: !7589, file: !3, line: 3479, column: 4)
!7595 = !DILocation(line: 3481, column: 6, scope: !7594)
!7596 = !DILocation(line: 3483, column: 14, scope: !7585)
!7597 = !DILocation(line: 3483, column: 11, scope: !7585)
!7598 = !DILocation(line: 3492, column: 15, scope: !7599)
!7599 = distinct !DILexicalBlock(scope: !7600, file: !3, line: 3491, column: 4)
!7600 = distinct !DILexicalBlock(scope: !7585, file: !3, line: 3485, column: 6)
!7601 = !DILocation(line: 3492, column: 18, scope: !7599)
!7602 = !DILocation(line: 3492, column: 13, scope: !7599)
!7603 = !DILocation(line: 3493, column: 15, scope: !7599)
!7604 = !DILocation(line: 3493, column: 22, scope: !7599)
!7605 = !DILocation(line: 3493, column: 28, scope: !7599)
!7606 = !DILocation(line: 3493, column: 13, scope: !7599)
!7607 = !DILocation(line: 3494, column: 13, scope: !7599)
!7608 = !DILocation(line: 3497, column: 7, scope: !7513)
!7609 = !DILocation(line: 3500, column: 7, scope: !7513)
!7610 = !DILocation(line: 3501, column: 5, scope: !7513)
!7611 = !DILocation(line: 3503, column: 12, scope: !7483)
!7612 = !DILocation(line: 3503, column: 3, scope: !7483)
!7613 = !DILocation(line: 3503, column: 10, scope: !7483)
!7614 = !DILocation(line: 3503, column: 29, scope: !7483)
!7615 = !DILocation(line: 3503, column: 20, scope: !7483)
!7616 = !DILocation(line: 3503, column: 27, scope: !7483)
!7617 = !DILocation(line: 3503, column: 46, scope: !7483)
!7618 = !DILocation(line: 3503, column: 37, scope: !7483)
!7619 = !DILocation(line: 3503, column: 44, scope: !7483)
!7620 = !DILocation(line: 3504, column: 1, scope: !7483)
!7621 = distinct !DISubprogram(name: "decode_ieee_extended", scope: !3, file: !3, line: 3563, type: !424, scopeLine: 3565, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !406)
!7622 = !DILocalVariable(name: "fmt", arg: 1, scope: !7621, file: !3, line: 3563, type: !419)
!7623 = !DILocation(line: 3563, column: 49, scope: !7621)
!7624 = !DILocalVariable(name: "r", arg: 2, scope: !7621, file: !3, line: 3563, type: !426)
!7625 = !DILocation(line: 3563, column: 71, scope: !7621)
!7626 = !DILocalVariable(name: "buf", arg: 3, scope: !7621, file: !3, line: 3564, type: !427)
!7627 = !DILocation(line: 3564, column: 21, scope: !7621)
!7628 = !DILocalVariable(name: "image_hi", scope: !7621, file: !3, line: 3566, type: !20)
!7629 = !DILocation(line: 3566, column: 17, scope: !7621)
!7630 = !DILocalVariable(name: "sig_hi", scope: !7621, file: !3, line: 3566, type: !20)
!7631 = !DILocation(line: 3566, column: 27, scope: !7621)
!7632 = !DILocalVariable(name: "sig_lo", scope: !7621, file: !3, line: 3566, type: !20)
!7633 = !DILocation(line: 3566, column: 35, scope: !7621)
!7634 = !DILocalVariable(name: "sign", scope: !7621, file: !3, line: 3567, type: !399)
!7635 = !DILocation(line: 3567, column: 8, scope: !7621)
!7636 = !DILocalVariable(name: "exp", scope: !7621, file: !3, line: 3568, type: !398)
!7637 = !DILocation(line: 3568, column: 7, scope: !7621)
!7638 = !DILocation(line: 3570, column: 12, scope: !7621)
!7639 = !DILocation(line: 3570, column: 10, scope: !7621)
!7640 = !DILocation(line: 3570, column: 29, scope: !7621)
!7641 = !DILocation(line: 3570, column: 27, scope: !7621)
!7642 = !DILocation(line: 3570, column: 48, scope: !7621)
!7643 = !DILocation(line: 3570, column: 46, scope: !7621)
!7644 = !DILocation(line: 3571, column: 10, scope: !7621)
!7645 = !DILocation(line: 3572, column: 10, scope: !7621)
!7646 = !DILocation(line: 3573, column: 12, scope: !7621)
!7647 = !DILocation(line: 3575, column: 11, scope: !7621)
!7648 = !DILocation(line: 3575, column: 20, scope: !7621)
!7649 = !DILocation(line: 3575, column: 27, scope: !7621)
!7650 = !DILocation(line: 3575, column: 10, scope: !7621)
!7651 = !DILocation(line: 3575, column: 8, scope: !7621)
!7652 = !DILocation(line: 3576, column: 9, scope: !7621)
!7653 = !DILocation(line: 3576, column: 18, scope: !7621)
!7654 = !DILocation(line: 3576, column: 7, scope: !7621)
!7655 = !DILocation(line: 3578, column: 11, scope: !7621)
!7656 = !DILocation(line: 3578, column: 3, scope: !7621)
!7657 = !DILocation(line: 3580, column: 7, scope: !7658)
!7658 = distinct !DILexicalBlock(scope: !7621, file: !3, line: 3580, column: 7)
!7659 = !DILocation(line: 3580, column: 11, scope: !7658)
!7660 = !DILocation(line: 3580, column: 7, scope: !7621)
!7661 = !DILocation(line: 3582, column: 12, scope: !7662)
!7662 = distinct !DILexicalBlock(scope: !7663, file: !3, line: 3582, column: 11)
!7663 = distinct !DILexicalBlock(scope: !7658, file: !3, line: 3581, column: 5)
!7664 = !DILocation(line: 3582, column: 19, scope: !7662)
!7665 = !DILocation(line: 3582, column: 22, scope: !7662)
!7666 = !DILocation(line: 3582, column: 30, scope: !7662)
!7667 = !DILocation(line: 3582, column: 33, scope: !7662)
!7668 = !DILocation(line: 3582, column: 38, scope: !7662)
!7669 = !DILocation(line: 3582, column: 11, scope: !7663)
!7670 = !DILocation(line: 3584, column: 4, scope: !7671)
!7671 = distinct !DILexicalBlock(scope: !7662, file: !3, line: 3583, column: 2)
!7672 = !DILocation(line: 3584, column: 7, scope: !7671)
!7673 = !DILocation(line: 3584, column: 10, scope: !7671)
!7674 = !DILocation(line: 3585, column: 14, scope: !7671)
!7675 = !DILocation(line: 3585, column: 4, scope: !7671)
!7676 = !DILocation(line: 3585, column: 7, scope: !7671)
!7677 = !DILocation(line: 3585, column: 12, scope: !7671)
!7678 = !DILocation(line: 3592, column: 4, scope: !7671)
!7679 = !DILocation(line: 3599, column: 25, scope: !7680)
!7680 = distinct !DILexicalBlock(scope: !7671, file: !3, line: 3593, column: 8)
!7681 = !DILocation(line: 3599, column: 32, scope: !7680)
!7682 = !DILocation(line: 3599, column: 38, scope: !7680)
!7683 = !DILocation(line: 3599, column: 46, scope: !7680)
!7684 = !DILocation(line: 3599, column: 44, scope: !7680)
!7685 = !DILocation(line: 3599, column: 6, scope: !7680)
!7686 = !DILocation(line: 3599, column: 9, scope: !7680)
!7687 = !DILocation(line: 3599, column: 22, scope: !7680)
!7688 = !DILocation(line: 3601, column: 15, scope: !7671)
!7689 = !DILocation(line: 3601, column: 4, scope: !7671)
!7690 = !DILocation(line: 3602, column: 2, scope: !7671)
!7691 = !DILocation(line: 3603, column: 16, scope: !7692)
!7692 = distinct !DILexicalBlock(scope: !7662, file: !3, line: 3603, column: 16)
!7693 = !DILocation(line: 3603, column: 21, scope: !7692)
!7694 = !DILocation(line: 3603, column: 16, scope: !7662)
!7695 = !DILocation(line: 3604, column: 12, scope: !7692)
!7696 = !DILocation(line: 3604, column: 2, scope: !7692)
!7697 = !DILocation(line: 3604, column: 5, scope: !7692)
!7698 = !DILocation(line: 3604, column: 10, scope: !7692)
!7699 = !DILocation(line: 3605, column: 5, scope: !7663)
!7700 = !DILocation(line: 3606, column: 12, scope: !7701)
!7701 = distinct !DILexicalBlock(scope: !7658, file: !3, line: 3606, column: 12)
!7702 = !DILocation(line: 3606, column: 16, scope: !7701)
!7703 = !DILocation(line: 3606, column: 25, scope: !7701)
!7704 = !DILocation(line: 3606, column: 29, scope: !7701)
!7705 = !DILocation(line: 3606, column: 34, scope: !7701)
!7706 = !DILocation(line: 3606, column: 43, scope: !7701)
!7707 = !DILocation(line: 3606, column: 46, scope: !7701)
!7708 = !DILocation(line: 3606, column: 51, scope: !7701)
!7709 = !DILocation(line: 3606, column: 12, scope: !7658)
!7710 = !DILocation(line: 3611, column: 14, scope: !7711)
!7711 = distinct !DILexicalBlock(scope: !7701, file: !3, line: 3607, column: 5)
!7712 = !DILocation(line: 3613, column: 11, scope: !7713)
!7713 = distinct !DILexicalBlock(scope: !7711, file: !3, line: 3613, column: 11)
!7714 = !DILocation(line: 3613, column: 18, scope: !7713)
!7715 = !DILocation(line: 3613, column: 21, scope: !7713)
!7716 = !DILocation(line: 3613, column: 11, scope: !7711)
!7717 = !DILocation(line: 3615, column: 4, scope: !7718)
!7718 = distinct !DILexicalBlock(scope: !7713, file: !3, line: 3614, column: 2)
!7719 = !DILocation(line: 3615, column: 7, scope: !7718)
!7720 = !DILocation(line: 3615, column: 10, scope: !7718)
!7721 = !DILocation(line: 3616, column: 14, scope: !7718)
!7722 = !DILocation(line: 3616, column: 4, scope: !7718)
!7723 = !DILocation(line: 3616, column: 7, scope: !7718)
!7724 = !DILocation(line: 3616, column: 12, scope: !7718)
!7725 = !DILocation(line: 3617, column: 22, scope: !7718)
!7726 = !DILocation(line: 3617, column: 29, scope: !7718)
!7727 = !DILocation(line: 3617, column: 36, scope: !7718)
!7728 = !DILocation(line: 3617, column: 43, scope: !7718)
!7729 = !DILocation(line: 3617, column: 48, scope: !7718)
!7730 = !DILocation(line: 3617, column: 41, scope: !7718)
!7731 = !DILocation(line: 3617, column: 20, scope: !7718)
!7732 = !DILocation(line: 3617, column: 4, scope: !7718)
!7733 = !DILocation(line: 3617, column: 7, scope: !7718)
!7734 = !DILocation(line: 3617, column: 18, scope: !7718)
!7735 = !DILocation(line: 3624, column: 25, scope: !7736)
!7736 = distinct !DILexicalBlock(scope: !7718, file: !3, line: 3618, column: 8)
!7737 = !DILocation(line: 3624, column: 32, scope: !7736)
!7738 = !DILocation(line: 3624, column: 38, scope: !7736)
!7739 = !DILocation(line: 3624, column: 46, scope: !7736)
!7740 = !DILocation(line: 3624, column: 44, scope: !7736)
!7741 = !DILocation(line: 3624, column: 6, scope: !7736)
!7742 = !DILocation(line: 3624, column: 9, scope: !7736)
!7743 = !DILocation(line: 3624, column: 22, scope: !7736)
!7744 = !DILocation(line: 3625, column: 2, scope: !7718)
!7745 = !DILocation(line: 3628, column: 4, scope: !7746)
!7746 = distinct !DILexicalBlock(scope: !7713, file: !3, line: 3627, column: 2)
!7747 = !DILocation(line: 3628, column: 7, scope: !7746)
!7748 = !DILocation(line: 3628, column: 10, scope: !7746)
!7749 = !DILocation(line: 3629, column: 14, scope: !7746)
!7750 = !DILocation(line: 3629, column: 4, scope: !7746)
!7751 = !DILocation(line: 3629, column: 7, scope: !7746)
!7752 = !DILocation(line: 3629, column: 12, scope: !7746)
!7753 = !DILocation(line: 3631, column: 5, scope: !7711)
!7754 = !DILocation(line: 3634, column: 7, scope: !7755)
!7755 = distinct !DILexicalBlock(scope: !7701, file: !3, line: 3633, column: 5)
!7756 = !DILocation(line: 3634, column: 10, scope: !7755)
!7757 = !DILocation(line: 3634, column: 13, scope: !7755)
!7758 = !DILocation(line: 3635, column: 17, scope: !7755)
!7759 = !DILocation(line: 3635, column: 7, scope: !7755)
!7760 = !DILocation(line: 3635, column: 10, scope: !7755)
!7761 = !DILocation(line: 3635, column: 15, scope: !7755)
!7762 = !DILocation(line: 3636, column: 7, scope: !7755)
!7763 = !DILocation(line: 3643, column: 21, scope: !7764)
!7764 = distinct !DILexicalBlock(scope: !7755, file: !3, line: 3637, column: 11)
!7765 = !DILocation(line: 3643, column: 28, scope: !7764)
!7766 = !DILocation(line: 3643, column: 34, scope: !7764)
!7767 = !DILocation(line: 3643, column: 42, scope: !7764)
!7768 = !DILocation(line: 3643, column: 40, scope: !7764)
!7769 = !DILocation(line: 3643, column: 2, scope: !7764)
!7770 = !DILocation(line: 3643, column: 5, scope: !7764)
!7771 = !DILocation(line: 3643, column: 18, scope: !7764)
!7772 = !DILocation(line: 3645, column: 1, scope: !7621)
