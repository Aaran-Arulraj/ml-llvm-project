; ModuleID = 'cgraphunit.c'
source_filename = "cgraphunit.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.cgraph_node = type { %union.tree_node*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.htab*, i8*, %struct.VEC_ipa_opt_pass_heap*, %struct.cgraph_local_info, %struct.cgraph_global_info, %struct.cgraph_rtl_info, %struct.cgraph_clone_info, %struct.cgraph_thunk_info, i64, i32, i32, i32, i16 }
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type { %struct.unnamed_section }
%struct.unnamed_section = type { %struct.section_common, void (i8*)*, i8*, %union.section* }
%struct.section_common = type { i32 }
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type opaque
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type opaque
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type opaque
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.cgraph_edge = type { i64, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_edge*, %union.gimple_statement_d*, i8*, i32, i32, i32, i32, i16, i8 }
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.VEC_ipa_opt_pass_heap = type { %struct.VEC_ipa_opt_pass_base }
%struct.VEC_ipa_opt_pass_base = type { i32, i32, [1 x %struct.ipa_opt_pass_d*] }
%struct.ipa_opt_pass_d = type { %struct.opt_pass, void ()*, void (%struct.cgraph_node_set_def*)*, void ()*, void (%struct.cgraph_node*)*, void (%struct.cgraph_node*, %union.gimple_statement_d**)*, i32, i32 (%struct.cgraph_node*)*, void (%struct.varpool_node*)* }
%struct.opt_pass = type { i32, i8*, i8 ()*, i32 ()*, %struct.opt_pass*, %struct.opt_pass*, i32, i32, i32, i32, i32, i32, i32 }
%struct.cgraph_node_set_def = type { %struct.htab*, %struct.VEC_cgraph_node_ptr_gc*, i8* }
%struct.VEC_cgraph_node_ptr_gc = type { %struct.VEC_cgraph_node_ptr_base }
%struct.VEC_cgraph_node_ptr_base = type { i32, i32, [1 x %struct.cgraph_node*] }
%struct.varpool_node = type { %union.tree_node*, %struct.varpool_node*, %struct.varpool_node*, %struct.varpool_node*, i32, i8 }
%struct.cgraph_local_info = type { %struct.lto_file_decl_data*, %struct.inline_summary, i8 }
%struct.lto_file_decl_data = type opaque
%struct.inline_summary = type { i64, i32, i32, i32, i32 }
%struct.cgraph_global_info = type { i64, i64, %struct.cgraph_node*, i32, i32, i32, i8 }
%struct.cgraph_rtl_info = type { i32 }
%struct.cgraph_clone_info = type { %struct.VEC_ipa_replace_map_p_gc*, %struct.bitmap_head_def*, %struct.bitmap_head_def* }
%struct.VEC_ipa_replace_map_p_gc = type { %struct.VEC_ipa_replace_map_p_base }
%struct.VEC_ipa_replace_map_p_base = type { i32, i32, [1 x %struct.ipa_replace_map*] }
%struct.ipa_replace_map = type { %union.tree_node*, %union.tree_node*, i8, i8 }
%struct.cgraph_thunk_info = type { i64, i64, %union.tree_node*, i8, i8, i8 }
%struct.simple_ipa_opt_pass = type { %struct.opt_pass }
%struct.gcc_debug_hooks = type { void (i8*)*, void (i8*)*, void ()*, void (i32, i8*)*, void (i32, i8*)*, void (i32, i8*)*, void (i32)*, void (i32, i32)*, void (i32, i32)*, i8 (%union.tree_node*)*, void (i32, i8*, i32, i8)*, void (i32, i8*)*, void (i32, i8*)*, void (i32, i8*)*, void (%union.tree_node*)*, void (i32)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, i32)*, void (%union.tree_node*, %union.tree_node*, %union.tree_node*, i8)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%struct.rtx_def*)*, void (i32)*, void (%struct.rtx_def*)*, void ()*, void (%union.tree_node*)*, void (%union.tree_node*, i32)*, void (%struct.rtx_def*, %struct.rtx_def*)*, void (i32)*, void (%union.tree_node*, %union.tree_node*)*, i32 }
%struct.diagnostic_context = type { %struct.pretty_print_info*, [12 x i32], i8, i8, [870 x i32], i8, i8, void (%struct.diagnostic_context*, %struct.diagnostic_info*)*, void (%struct.diagnostic_context*, %struct.diagnostic_info*)*, void (i8*, [1 x %struct.__va_list_tag]*)*, %union.tree_node*, %struct.line_map*, i32, i8 }
%struct.pretty_print_info = type { %struct.output_buffer*, i8*, i32, i32, i32, %struct.pp_wrapping_mode_t, i8 (%struct.pretty_print_info*, %struct.text_info*, i8*, i32, i8, i8, i8)*, i8, i8, i8 }
%struct.output_buffer = type { %struct.obstack, %struct.obstack, %struct.obstack*, %struct.chunk_info*, %struct._IO_FILE*, i32, [128 x i8] }
%struct.chunk_info = type { %struct.chunk_info*, [60 x i8*] }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.pp_wrapping_mode_t = type { i32, i32 }
%struct.text_info = type { i8*, [1 x %struct.__va_list_tag]*, i32, i32*, %union.tree_node** }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.diagnostic_info = type { %struct.text_info, i32, i32, %union.tree_node*, i32, i32 }
%struct.line_map = type { i8*, i32, i32, i32, i8, i8, i8 }
%struct.gcc_target = type { %struct.asm_out, %struct.sched, %struct.vectorize, i32, void ()*, i8 (i64, i8*, i32)*, void ()*, i32 ()*, i32 ()*, i32 ()*, i32 ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %struct.attribute_spec*, i32 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void ()*, %union.tree_node* (i32, i8)*, %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32)*, %union.tree_node* (i32, %union.tree_node*, i8*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, i8)*, %union.tree_node* (i32, i8, i8)*, i8* (%union.tree_node*)*, void ()*, i32 (%union.tree_node*, i8*, i32)*, i8 ()*, i32 ()*, i8 (i8)*, i8 ()*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, i8 (i32, %struct.rtx_def*, i8)*, i8 (i32, %struct.rtx_def*)*, i64, i64, i8 (%struct.rtx_def*)*, i8 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*, i32)*, i8* (i8*)*, i64 (i32)*, i32 (i32)*, i32 (i32, i32)*, i8 (i32)*, %struct.addr_space, i8 (i32)*, i8 (i32)*, i8 (%struct.rtx_def*, i32, i32, i32*, i8)*, i32 (%struct.rtx_def*, i8)*, %struct.rtx_def* (%struct.rtx_def*)*, i32 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, void (%union.tree_node*)*, i8 (i32*, i32*)*, i32 (i32, i32)*, void ()*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, i8* (i64*)*, i8* (i8*, i64)*, i8* (i32)*, i8 ()*, %struct.rtx_def* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i32 (%union.tree_node*)*, void (i8*, %struct.rtx_def*, i32)*, i8 (%struct.stdarg_info*, %union.gimple_statement_d*)*, %union.tree_node* ()*, %union.tree_node* ()*, i8* (%struct.rtx_def*)*, i8 (%union.tree_node*)*, i64, %struct.calls, i8* (%union.tree_node*, %union.tree_node*)*, i8* (i32, %union.tree_node*)*, i8* (i32, %union.tree_node*, %union.tree_node*)*, i8* (%union.tree_node*)*, i8* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i32* ()*, i32 (i8, %struct.rtx_def*, i32, i32, %struct.secondary_reload_info*)*, void ()*, void ()*, i8 (i32)*, i32 ()*, i8 ()*, i8 (i32, i32)*, %struct.c, %struct.cxx, %struct.emutls, %struct.target_option_hooks, void (%struct.bitmap_head_def*)*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.asm_out = type { i8*, i8*, i8*, %struct.asm_int_op, %struct.asm_int_op, i8 (%struct.rtx_def*, i32, i32)*, void (%struct._IO_FILE*, i8*)*, void (%struct._IO_FILE*, %union.tree_node*)*, void (%struct._IO_FILE*, %union.tree_node*, i32, i32)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, %struct.rtx_def*)*, void (%struct._IO_FILE*, i8*, i64)*, i8 (%struct.rtx_def*)*, void (%union.tree_node*, i32)*, void (%struct._IO_FILE*, i64)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, i64)*, void ()*, void (i8*, i32, %union.tree_node*)*, i32 ()*, %union.section* (%union.tree_node*, i32, i64)*, %union.section* (i32, %struct.rtx_def*, i64)*, void (%union.tree_node*, i32)*, %union.section* (%union.tree_node*)*, void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i64, i64, %union.tree_node*)*, i8 (%union.tree_node*, i64, i64, %union.tree_node*)*, void ()*, void ()*, void ()*, void (%struct.rtx_def*)*, void (i8*)*, i32 (i32, i8*)*, i8*, void (%struct.rtx_def*)*, void (%struct._IO_FILE*, i32, %struct.rtx_def*)*, void (%struct._IO_FILE*, %struct.rtx_def*, %struct.rtx_def**, i32)*, void (%struct._IO_FILE*)* }
%struct.asm_int_op = type { i8*, i8*, i8*, i8* }
%struct.sched = type { i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)*, i32 ()*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, void (%struct.rtx_def*, %struct.rtx_def*)*, void ()*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, void ()*, void ()*, i32 ()*, i32 (%struct.rtx_def*)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32, i32, i32*)*, i8 (%struct._dep*, i32, i32)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def*, i32, i32)*, void ()*, i8* ()*, void (i8*, i8)*, void (i8*)*, void (i8*)*, void (i8*)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def**)*, i8 (i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, i8 (%struct.rtx_def*)*, void (%struct.spec_info_def*)*, i32 (%struct.rtx_def*)*, i32 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i32 (%struct.ddg*)* }
%struct._dep = type opaque
%struct.spec_info_def = type opaque
%struct.ddg = type opaque
%struct.vectorize = type { %union.tree_node* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (i32, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i32 (i8)*, i8 (%union.tree_node*, i8)*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (i32, %union.tree_node*, i32, i8)* }
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.addr_space = type { i32 (i8)*, i32 (i8)*, i8 (i32, i8)*, i8 (i32, %struct.rtx_def*, i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32, i8)*, i8 (i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %union.tree_node*, %union.tree_node*)* }
%struct.stdarg_info = type opaque
%struct.calls = type { i32 (%union.tree_node*, i32, i32*, %union.tree_node*, i32)*, i8 (%union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, i32)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, %struct.rtx_def* ()*, void (%struct.ix86_args*, i32, %union.tree_node*, i32*, i32)*, i8 (%struct.ix86_args*)*, i8 (%struct.ix86_args*)*, i8 (%union.tree_node*)*, i8 (i32, %union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i32 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i8* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, %union.tree_node*, i8)*, %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, i8 ()*, %struct.rtx_def* (%union.tree_node*, i8)*, void (%struct.rtx_def*, %union.tree_node*, %struct.rtx_def*)*, %struct.rtx_def* (%struct.rtx_def*)* }
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.secondary_reload_info = type { i32, i32, %struct.secondary_reload_info*, i32 }
%struct.c = type { i32 (i8)* }
%struct.cxx = type { %union.tree_node* ()*, i8 ()*, %union.tree_node* (%union.tree_node*)*, i8 ()*, i32 (%union.tree_node*, i32)*, i8 ()*, i8 ()*, void (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void (%union.tree_node*)* }
%struct.emutls = type { i8*, i8*, i8*, i8*, i8*, i8*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i8, i8 }
%struct.target_option_hooks = type { i8 (%union.tree_node*, %union.tree_node*, %union.tree_node*, i32)*, void (%struct.cl_target_option*)*, void (%struct.cl_target_option*)*, void (%struct._IO_FILE*, i32, %struct.cl_target_option*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)* }
%struct.cl_target_option = type { i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8 }
%struct.ggc_root_tab = type { i8*, i64, i64, void (i8*)*, void (i8*)* }
%struct.cgraph_asm_node = type { %struct.cgraph_asm_node*, %union.tree_node*, i32 }
%struct.gimple_stmt_iterator = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_d*, %struct.basic_block_def* }
%struct.pointer_set_t = type opaque
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }
%struct.cgraph_order_sort = type { i32, %union.anon.0 }
%union.anon.0 = type { %struct.cgraph_node* }
%struct.VEC_cgraph_edge_p_heap = type { %struct.VEC_cgraph_edge_p_base }
%struct.VEC_cgraph_edge_p_base = type { i32, i32, [1 x %struct.cgraph_edge*] }
%struct.tree_ssa_name = type { %struct.tree_common, %union.tree_node*, %union.gimple_statement_d*, i32, %struct.ptr_info_def*, %struct.ssa_use_operand_d }
%struct.ptr_info_def = type { %struct.pt_solution }
%struct.gimple_statement_with_memory_ops_base = type { %struct.gimple_statement_with_ops_base, %union.tree_node*, %union.tree_node* }
%struct.gimple_statement_with_ops_base = type { %struct.gimple_statement_base, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.VEC_tree_heap = type { %struct.VEC_tree_base }
%struct.tree_identifier = type { %struct.tree_common, %struct.ht_identifier }
%struct.ht_identifier = type { i8*, i32, i32 }
%struct.tree_block = type { %struct.tree_common, i32, i32, %union.tree_node*, %struct.VEC_tree_gc*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_type_symtab, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_type* }
%union.tree_type_symtab = type { i8* }
%struct.lang_type = type opaque

@tree_contains_struct = external dso_local global [191 x [64 x i8]], align 16
@flag_keep_inline_functions = external dso_local global i32, align 4
@.str = private unnamed_addr constant [14 x i8] c"always_inline\00", align 1
@optimize = external dso_local global i32, align 4
@flag_whole_program = external dso_local global i32, align 4
@flag_lto = external dso_local global i32, align 4
@flag_whopr = external dso_local global i32, align 4
@cgraph_new_nodes = external dso_local global %struct.cgraph_node*, align 8
@cgraph_state = external dso_local global i32, align 4
@current_function_decl = external dso_local global %union.tree_node*, align 8
@pass_early_local_passes = external dso_local global %struct.simple_ipa_opt_pass, align 8
@.str.1 = private unnamed_addr constant [13 x i8] c"cgraphunit.c\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@cgraph_max_pid = external dso_local global i32, align 4
@debug_hooks = external dso_local global %struct.gcc_debug_hooks*, align 8
@warn_unused_parameter = external dso_local global i32, align 4
@cfun = external dso_local global %struct.function*, align 8
@global_dc = external dso_local global %struct.diagnostic_context*, align 8
@timevar_enable = external dso_local global i8, align 1
@.str.3 = private unnamed_addr constant [30 x i8] c"aux field set for edge %s->%s\00", align 1
@.str.4 = private unnamed_addr constant [28 x i8] c"Execution count is negative\00", align 1
@.str.5 = private unnamed_addr constant [32 x i8] c"Externally visible inline clone\00", align 1
@.str.6 = private unnamed_addr constant [32 x i8] c"Inline clone with address taken\00", align 1
@.str.7 = private unnamed_addr constant [23 x i8] c"Inline clone is needed\00", align 1
@.str.8 = private unnamed_addr constant [30 x i8] c"caller edge count is negative\00", align 1
@.str.9 = private unnamed_addr constant [34 x i8] c"caller edge frequency is negative\00", align 1
@.str.10 = private unnamed_addr constant [35 x i8] c"caller edge frequency is too large\00", align 1
@.str.11 = private unnamed_addr constant [55 x i8] c"caller edge frequency %i does not match BB freqency %i\00", align 1
@.str.12 = private unnamed_addr constant [28 x i8] c"inlined_to pointer is wrong\00", align 1
@.str.13 = private unnamed_addr constant [24 x i8] c"multiple inline callers\00", align 1
@.str.14 = private unnamed_addr constant [45 x i8] c"inlined_to pointer set for noninline callers\00", align 1
@.str.15 = private unnamed_addr constant [52 x i8] c"inlined_to pointer is set but no predecessors found\00", align 1
@.str.16 = private unnamed_addr constant [36 x i8] c"inlined_to pointer refers to itself\00", align 1
@.str.17 = private unnamed_addr constant [30 x i8] c"node not found in cgraph_hash\00", align 1
@.str.18 = private unnamed_addr constant [24 x i8] c"node has wrong clone_of\00", align 1
@.str.19 = private unnamed_addr constant [26 x i8] c"node has wrong clone list\00", align 1
@.str.20 = private unnamed_addr constant [42 x i8] c"node is in clone list but it is not clone\00", align 1
@.str.21 = private unnamed_addr constant [34 x i8] c"node has wrong prev_clone pointer\00", align 1
@.str.22 = private unnamed_addr constant [39 x i8] c"double linked list of clones corrupted\00", align 1
@flag_wpa = external dso_local global i32, align 4
@.str.23 = private unnamed_addr constant [18 x i8] c"shared call_stmt:\00", align 1
@.str.24 = private unnamed_addr constant [32 x i8] c"edge points to same body alias:\00", align 1
@.str.25 = private unnamed_addr constant [34 x i8] c"edge points to wrong declaration:\00", align 1
@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str.26 = private unnamed_addr constant [13 x i8] c" Instead of:\00", align 1
@.str.27 = private unnamed_addr constant [38 x i8] c"missing callgraph edge for call stmt:\00", align 1
@.str.28 = private unnamed_addr constant [43 x i8] c"edge %s->%s has no corresponding call_stmt\00", align 1
@.str.29 = private unnamed_addr constant [26 x i8] c"verify_cgraph_node failed\00", align 1
@cgraph_nodes = external dso_local global %struct.cgraph_node*, align 8
@quiet_flag = external dso_local global i32, align 4
@.str.30 = private unnamed_addr constant [29 x i8] c"\0AAnalyzing compilation unit\0A\00", align 1
@cgraph_global_info_ready = external dso_local global i8, align 1
@pre_ipa_mem_report = external dso_local global i32, align 4
@.str.31 = private unnamed_addr constant [31 x i8] c"Memory consumption before IPA\0A\00", align 1
@.str.32 = private unnamed_addr constant [42 x i8] c"Performing interprocedural optimizations\0A\00", align 1
@dump_file = external dso_local global %struct._IO_FILE*, align 8
@cgraph_dump_file = internal global %struct._IO_FILE* null, align 8, !dbg !0
@.str.33 = private unnamed_addr constant [11 x i8] c"Optimized \00", align 1
@post_ipa_mem_report = external dso_local global i32, align 4
@.str.34 = private unnamed_addr constant [30 x i8] c"Memory consumption after IPA\0A\00", align 1
@.str.35 = private unnamed_addr constant [23 x i8] c"Assembling functions:\0A\00", align 1
@flag_toplevel_reorder = external dso_local global i32, align 4
@.str.36 = private unnamed_addr constant [8 x i8] c"\0AFinal \00", align 1
@cgraph_build_static_cdtor.counter = internal global i32 0, align 4, !dbg !3411
@.str.37 = private unnamed_addr constant [11 x i8] c"%c_%.5d_%d\00", align 1
@input_location = external dso_local global i32, align 4
@global_trees = external dso_local global [131 x %union.tree_node*], align 16
@targetm = external dso_local global %struct.gcc_target, align 8
@.str.38 = private unnamed_addr constant [34 x i8] c"updating call of %s/%i -> %s/%i: \00", align 1
@dump_flags = external dso_local global i32, align 4
@.str.39 = private unnamed_addr constant [14 x i8] c"  updated to:\00", align 1
@.str.40 = private unnamed_addr constant [22 x i8] c"Materializing clones\0A\00", align 1
@.str.41 = private unnamed_addr constant [19 x i8] c"clonning %s to %s\0A\00", align 1
@.str.42 = private unnamed_addr constant [17 x i8] c"   replace map: \00", align 1
@.str.43 = private unnamed_addr constant [5 x i8] c" -> \00", align 1
@.str.44 = private unnamed_addr constant [6 x i8] c"%s%s;\00", align 1
@.str.45 = private unnamed_addr constant [10 x i8] c"(replace)\00", align 1
@.str.46 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.47 = private unnamed_addr constant [6 x i8] c"(ref)\00", align 1
@.str.48 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.49 = private unnamed_addr constant [18 x i8] c"   args_to_skip: \00", align 1
@.str.50 = private unnamed_addr constant [26 x i8] c"   combined_args_to_skip:\00", align 1
@.str.51 = private unnamed_addr constant [21 x i8] c"Updating call sites\0A\00", align 1
@.str.52 = private unnamed_addr constant [41 x i8] c"Materialization Call site updates done.\0A\00", align 1
@vtable_entry_type = internal global %union.tree_node* null, align 8, !dbg !3435
@static_dtors = internal global %struct.VEC_tree_gc* null, align 8, !dbg !3433
@static_ctors = internal global %struct.VEC_tree_gc* null, align 8, !dbg !3431
@gt_ggc_r_gt_cgraphunit_h = dso_local constant [4 x %struct.ggc_root_tab] [%struct.ggc_root_tab { i8* bitcast (%union.tree_node** @vtable_entry_type to i8*), i64 1, i64 8, void (i8*)* @gt_ggc_mx_lang_tree_node, void (i8*)* @gt_pch_nx_lang_tree_node }, %struct.ggc_root_tab { i8* bitcast (%struct.VEC_tree_gc** @static_dtors to i8*), i64 1, i64 8, void (i8*)* @gt_ggc_mx_VEC_tree_gc, void (i8*)* @gt_pch_nx_VEC_tree_gc }, %struct.ggc_root_tab { i8* bitcast (%struct.VEC_tree_gc** @static_ctors to i8*), i64 1, i64 8, void (i8*)* @gt_ggc_mx_VEC_tree_gc, void (i8*)* @gt_pch_nx_VEC_tree_gc }, %struct.ggc_root_tab zeroinitializer], align 16, !dbg !3417
@cgraph_nodes_queue = external dso_local global %struct.cgraph_node*, align 8
@gimple_ops_offset_ = external dso_local constant [0 x i64], align 8
@.str.53 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@gss_for_code_ = external dso_local constant [0 x i32], align 4
@cgraph_analyze_functions.first_analyzed = internal global %struct.cgraph_node* null, align 8, !dbg !3437
@cgraph_analyze_functions.first_analyzed_var = internal global %struct.varpool_node* null, align 8, !dbg !3440
@varpool_nodes = external dso_local global %struct.varpool_node*, align 8
@.str.54 = private unnamed_addr constant [22 x i8] c"Initial entry points:\00", align 1
@.str.55 = private unnamed_addr constant [4 x i8] c" %s\00", align 1
@.str.56 = private unnamed_addr constant [19 x i8] c"Unit entry points:\00", align 1
@.str.57 = private unnamed_addr constant [11 x i8] c"\0A\0AInitial \00", align 1
@.str.58 = private unnamed_addr constant [23 x i8] c"\0AReclaiming functions:\00", align 1
@.str.59 = private unnamed_addr constant [13 x i8] c"\0A\0AReclaimed \00", align 1
@.str.60 = private unnamed_addr constant [19 x i8] c"externally_visible\00", align 1
@.str.61 = private unnamed_addr constant [68 x i8] c"%<externally_visible%> attribute have effect only on public objects\00", align 1
@cgraph_function_flags_ready = external dso_local global i8, align 1
@integer_types = external dso_local global [11 x %union.tree_node*], align 16
@asm_out_file = external dso_local global %struct._IO_FILE*, align 8
@.str.62 = private unnamed_addr constant [7 x i8] c"retval\00", align 1
@.str.63 = private unnamed_addr constant [5 x i8] c"vptr\00", align 1
@.str.64 = private unnamed_addr constant [11 x i8] c"vtableaddr\00", align 1
@sizetype_tab = external dso_local global [4 x %union.tree_node*], align 16
@.str.65 = private unnamed_addr constant [12 x i8] c"vcalloffset\00", align 1
@.str.66 = private unnamed_addr constant [7 x i8] c"offset\00", align 1
@.str.67 = private unnamed_addr constant [4 x i8] c"ptr\00", align 1
@.str.68 = private unnamed_addr constant [14 x i8] c"adjusted_this\00", align 1
@.str.69 = private unnamed_addr constant [16 x i8] c"./basic-block.h\00", align 1
@in_lto_p = external dso_local global i8, align 1
@all_small_ipa_passes = external dso_local global %struct.opt_pass*, align 8
@all_regular_ipa_passes = external dso_local global %struct.opt_pass*, align 8
@all_lto_gen_passes = external dso_local global %struct.opt_pass*, align 8
@flag_ltrans = external dso_local global i32, align 4
@cgraph_order = external dso_local global i32, align 4
@varpool_nodes_queue = external dso_local global %struct.varpool_node*, align 8
@cgraph_asm_nodes = external dso_local global %struct.cgraph_asm_node*, align 8
@cgraph_n_nodes = external dso_local global i32, align 4

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @cgraph_decide_is_function_needed(%struct.cgraph_node* %node, %union.tree_node* %decl) #0 !dbg !3496 {
entry:
  %retval = alloca i8, align 1
  %node.addr = alloca %struct.cgraph_node*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !3499, metadata !DIExpression()), !dbg !3500
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !3501, metadata !DIExpression()), !dbg !3502
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3503
  %local = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 18, !dbg !3505
  %externally_visible = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local, i32 0, i32 2, !dbg !3506
  %bf.load = load i8, i8* %externally_visible, align 8, !dbg !3506
  %bf.lshr = lshr i8 %bf.load, 1, !dbg !3506
  %bf.clear = and i8 %bf.lshr, 1, !dbg !3506
  %bf.cast = zext i8 %bf.clear to i32, !dbg !3506
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !3503
  br i1 %tobool, label %if.then, label %if.end, !dbg !3507

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !3508
  br label %return, !dbg !3508

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3509
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !3509
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !3509
  %bf.load1 = load i64, i64* %2, align 8, !dbg !3509
  %bf.clear2 = and i64 %bf.load1, 65535, !dbg !3509
  %bf.cast3 = trunc i64 %bf.clear2 to i32, !dbg !3509
  %idxprom = zext i32 %bf.cast3 to i64, !dbg !3509
  %arrayidx = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom, !dbg !3509
  %arrayidx4 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx, i64 0, i64 13, !dbg !3509
  %3 = load i8, i8* %arrayidx4, align 1, !dbg !3509
  %conv = zext i8 %3 to i32, !dbg !3509
  %tobool5 = icmp ne i32 %conv, 0, !dbg !3509
  br i1 %tobool5, label %land.lhs.true, label %if.end15, !dbg !3509

land.lhs.true:                                    ; preds = %if.end
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3509
  %decl_with_vis = bitcast %union.tree_node* %4 to %struct.tree_decl_with_vis*, !dbg !3509
  %assembler_name = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 1, !dbg !3509
  %5 = load %union.tree_node*, %union.tree_node** %assembler_name, align 8, !dbg !3509
  %cmp = icmp ne %union.tree_node* %5, null, !dbg !3509
  br i1 %cmp, label %land.lhs.true7, label %if.end15, !dbg !3511

land.lhs.true7:                                   ; preds = %land.lhs.true
  %6 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3512
  %call = call %union.tree_node* @decl_assembler_name(%union.tree_node* %6), !dbg !3512
  %base8 = bitcast %union.tree_node* %call to %struct.tree_base*, !dbg !3512
  %7 = bitcast %struct.tree_base* %base8 to i64*, !dbg !3512
  %bf.load9 = load i64, i64* %7, align 8, !dbg !3512
  %bf.lshr10 = lshr i64 %bf.load9, 26, !dbg !3512
  %bf.clear11 = and i64 %bf.lshr10, 1, !dbg !3512
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !3512
  %tobool13 = icmp ne i32 %bf.cast12, 0, !dbg !3512
  br i1 %tobool13, label %if.then14, label %if.end15, !dbg !3513

if.then14:                                        ; preds = %land.lhs.true7
  store i8 1, i8* %retval, align 1, !dbg !3514
  br label %return, !dbg !3514

if.end15:                                         ; preds = %land.lhs.true7, %land.lhs.true, %if.end
  %8 = load i32, i32* @flag_keep_inline_functions, align 4, !dbg !3515
  %tobool16 = icmp ne i32 %8, 0, !dbg !3515
  br i1 %tobool16, label %land.lhs.true17, label %if.end33, !dbg !3517

land.lhs.true17:                                  ; preds = %if.end15
  %9 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3518
  %function_decl = bitcast %union.tree_node* %9 to %struct.tree_function_decl*, !dbg !3518
  %declared_inline_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !3518
  %bf.load18 = load i32, i32* %declared_inline_flag, align 8, !dbg !3518
  %bf.lshr19 = lshr i32 %bf.load18, 21, !dbg !3518
  %bf.clear20 = and i32 %bf.lshr19, 1, !dbg !3518
  %tobool21 = icmp ne i32 %bf.clear20, 0, !dbg !3518
  br i1 %tobool21, label %land.lhs.true22, label %if.end33, !dbg !3519

land.lhs.true22:                                  ; preds = %land.lhs.true17
  %10 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3520
  %decl_common = bitcast %union.tree_node* %10 to %struct.tree_decl_common*, !dbg !3520
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !3520
  %11 = bitcast i40* %decl_flag_1 to i64*, !dbg !3520
  %bf.load23 = load i64, i64* %11, align 8, !dbg !3520
  %bf.lshr24 = lshr i64 %bf.load23, 25, !dbg !3520
  %bf.clear25 = and i64 %bf.lshr24, 1, !dbg !3520
  %bf.cast26 = trunc i64 %bf.clear25 to i32, !dbg !3520
  %tobool27 = icmp ne i32 %bf.cast26, 0, !dbg !3520
  br i1 %tobool27, label %if.end33, label %land.lhs.true28, !dbg !3521

land.lhs.true28:                                  ; preds = %land.lhs.true22
  %12 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3522
  %decl_common29 = bitcast %union.tree_node* %12 to %struct.tree_decl_common*, !dbg !3522
  %attributes = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common29, i32 0, i32 6, !dbg !3522
  %13 = load %union.tree_node*, %union.tree_node** %attributes, align 8, !dbg !3522
  %call30 = call %union.tree_node* @lookup_attribute(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), %union.tree_node* %13), !dbg !3523
  %tobool31 = icmp ne %union.tree_node* %call30, null, !dbg !3523
  br i1 %tobool31, label %if.end33, label %if.then32, !dbg !3524

if.then32:                                        ; preds = %land.lhs.true28
  store i8 1, i8* %retval, align 1, !dbg !3525
  br label %return, !dbg !3525

if.end33:                                         ; preds = %land.lhs.true28, %land.lhs.true22, %land.lhs.true17, %if.end15
  %14 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3526
  %needed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %14, i32 0, i32 27, !dbg !3528
  %bf.load34 = load i16, i16* %needed, align 4, !dbg !3528
  %bf.clear35 = and i16 %bf.load34, 1, !dbg !3528
  %bf.cast36 = zext i16 %bf.clear35 to i32, !dbg !3528
  %tobool37 = icmp ne i32 %bf.cast36, 0, !dbg !3526
  br i1 %tobool37, label %if.then38, label %if.end39, !dbg !3529

if.then38:                                        ; preds = %if.end33
  store i8 1, i8* %retval, align 1, !dbg !3530
  br label %return, !dbg !3530

if.end39:                                         ; preds = %if.end33
  %15 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3531
  %base40 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !3531
  %16 = bitcast %struct.tree_base* %base40 to i64*, !dbg !3531
  %bf.load41 = load i64, i64* %16, align 8, !dbg !3531
  %bf.lshr42 = lshr i64 %bf.load41, 27, !dbg !3531
  %bf.clear43 = and i64 %bf.lshr42, 1, !dbg !3531
  %bf.cast44 = trunc i64 %bf.clear43 to i32, !dbg !3531
  %tobool45 = icmp ne i32 %bf.cast44, 0, !dbg !3531
  br i1 %tobool45, label %land.lhs.true63, label %lor.lhs.false, !dbg !3533

lor.lhs.false:                                    ; preds = %if.end39
  %17 = load i32, i32* @optimize, align 4, !dbg !3534
  %tobool46 = icmp ne i32 %17, 0, !dbg !3534
  br i1 %tobool46, label %if.end84, label %land.lhs.true47, !dbg !3535

land.lhs.true47:                                  ; preds = %lor.lhs.false
  %18 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3536
  %local48 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %18, i32 0, i32 18, !dbg !3537
  %disregard_inline_limits = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local48, i32 0, i32 2, !dbg !3538
  %bf.load49 = load i8, i8* %disregard_inline_limits, align 8, !dbg !3538
  %bf.lshr50 = lshr i8 %bf.load49, 4, !dbg !3538
  %bf.clear51 = and i8 %bf.lshr50, 1, !dbg !3538
  %bf.cast52 = zext i8 %bf.clear51 to i32, !dbg !3538
  %tobool53 = icmp ne i32 %bf.cast52, 0, !dbg !3536
  br i1 %tobool53, label %if.end84, label %land.lhs.true54, !dbg !3539

land.lhs.true54:                                  ; preds = %land.lhs.true47
  %19 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3540
  %function_decl55 = bitcast %union.tree_node* %19 to %struct.tree_function_decl*, !dbg !3540
  %declared_inline_flag56 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl55, i32 0, i32 5, !dbg !3540
  %bf.load57 = load i32, i32* %declared_inline_flag56, align 8, !dbg !3540
  %bf.lshr58 = lshr i32 %bf.load57, 21, !dbg !3540
  %bf.clear59 = and i32 %bf.lshr58, 1, !dbg !3540
  %tobool60 = icmp ne i32 %bf.clear59, 0, !dbg !3540
  br i1 %tobool60, label %if.end84, label %land.lhs.true61, !dbg !3541

land.lhs.true61:                                  ; preds = %land.lhs.true54
  %20 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3542
  %origin = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %20, i32 0, i32 5, !dbg !3543
  %21 = load %struct.cgraph_node*, %struct.cgraph_node** %origin, align 8, !dbg !3543
  %tobool62 = icmp ne %struct.cgraph_node* %21, null, !dbg !3542
  br i1 %tobool62, label %if.end84, label %land.lhs.true63, !dbg !3544

land.lhs.true63:                                  ; preds = %land.lhs.true61, %if.end39
  %22 = load i32, i32* @flag_whole_program, align 4, !dbg !3545
  %tobool64 = icmp ne i32 %22, 0, !dbg !3545
  br i1 %tobool64, label %if.end84, label %land.lhs.true65, !dbg !3546

land.lhs.true65:                                  ; preds = %land.lhs.true63
  %23 = load i32, i32* @flag_lto, align 4, !dbg !3547
  %tobool66 = icmp ne i32 %23, 0, !dbg !3547
  br i1 %tobool66, label %if.end84, label %land.lhs.true67, !dbg !3548

land.lhs.true67:                                  ; preds = %land.lhs.true65
  %24 = load i32, i32* @flag_whopr, align 4, !dbg !3549
  %tobool68 = icmp ne i32 %24, 0, !dbg !3549
  br i1 %tobool68, label %if.end84, label %land.lhs.true69, !dbg !3550

land.lhs.true69:                                  ; preds = %land.lhs.true67
  %25 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3551
  %decl_with_vis70 = bitcast %union.tree_node* %25 to %struct.tree_decl_with_vis*, !dbg !3551
  %comdat_flag = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis70, i32 0, i32 4, !dbg !3551
  %26 = bitcast i24* %comdat_flag to i32*, !dbg !3551
  %bf.load71 = load i32, i32* %26, align 8, !dbg !3551
  %bf.lshr72 = lshr i32 %bf.load71, 9, !dbg !3551
  %bf.clear73 = and i32 %bf.lshr72, 1, !dbg !3551
  %tobool74 = icmp ne i32 %bf.clear73, 0, !dbg !3551
  br i1 %tobool74, label %if.end84, label %land.lhs.true75, !dbg !3552

land.lhs.true75:                                  ; preds = %land.lhs.true69
  %27 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3553
  %decl_common76 = bitcast %union.tree_node* %27 to %struct.tree_decl_common*, !dbg !3553
  %decl_flag_177 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common76, i32 0, i32 2, !dbg !3553
  %28 = bitcast i40* %decl_flag_177 to i64*, !dbg !3553
  %bf.load78 = load i64, i64* %28, align 8, !dbg !3553
  %bf.lshr79 = lshr i64 %bf.load78, 25, !dbg !3553
  %bf.clear80 = and i64 %bf.lshr79, 1, !dbg !3553
  %bf.cast81 = trunc i64 %bf.clear80 to i32, !dbg !3553
  %tobool82 = icmp ne i32 %bf.cast81, 0, !dbg !3553
  br i1 %tobool82, label %if.end84, label %if.then83, !dbg !3554

if.then83:                                        ; preds = %land.lhs.true75
  store i8 1, i8* %retval, align 1, !dbg !3555
  br label %return, !dbg !3555

if.end84:                                         ; preds = %land.lhs.true75, %land.lhs.true69, %land.lhs.true67, %land.lhs.true65, %land.lhs.true63, %land.lhs.true61, %land.lhs.true54, %land.lhs.true47, %lor.lhs.false
  %29 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3556
  %function_decl85 = bitcast %union.tree_node* %29 to %struct.tree_function_decl*, !dbg !3556
  %static_ctor_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl85, i32 0, i32 5, !dbg !3556
  %bf.load86 = load i32, i32* %static_ctor_flag, align 8, !dbg !3556
  %bf.lshr87 = lshr i32 %bf.load86, 13, !dbg !3556
  %bf.clear88 = and i32 %bf.lshr87, 1, !dbg !3556
  %tobool89 = icmp ne i32 %bf.clear88, 0, !dbg !3556
  br i1 %tobool89, label %if.then96, label %lor.lhs.false90, !dbg !3558

lor.lhs.false90:                                  ; preds = %if.end84
  %30 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3559
  %function_decl91 = bitcast %union.tree_node* %30 to %struct.tree_function_decl*, !dbg !3559
  %static_dtor_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl91, i32 0, i32 5, !dbg !3559
  %bf.load92 = load i32, i32* %static_dtor_flag, align 8, !dbg !3559
  %bf.lshr93 = lshr i32 %bf.load92, 14, !dbg !3559
  %bf.clear94 = and i32 %bf.lshr93, 1, !dbg !3559
  %tobool95 = icmp ne i32 %bf.clear94, 0, !dbg !3559
  br i1 %tobool95, label %if.then96, label %if.end97, !dbg !3560

if.then96:                                        ; preds = %lor.lhs.false90, %if.end84
  store i8 1, i8* %retval, align 1, !dbg !3561
  br label %return, !dbg !3561

if.end97:                                         ; preds = %lor.lhs.false90
  store i8 0, i8* %retval, align 1, !dbg !3562
  br label %return, !dbg !3562

return:                                           ; preds = %if.end97, %if.then96, %if.then83, %if.then38, %if.then32, %if.then14, %if.then
  %31 = load i8, i8* %retval, align 1, !dbg !3563
  ret i8 %31, !dbg !3563
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local %union.tree_node* @decl_assembler_name(%union.tree_node*) #2

declare dso_local %union.tree_node* @lookup_attribute(i8*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @cgraph_process_new_functions() #0 !dbg !3564 {
entry:
  %output = alloca i8, align 1
  %fndecl = alloca %union.tree_node*, align 8
  %node = alloca %struct.cgraph_node*, align 8
  call void @llvm.dbg.declare(metadata i8* %output, metadata !3565, metadata !DIExpression()), !dbg !3566
  store i8 0, i8* %output, align 1, !dbg !3566
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl, metadata !3567, metadata !DIExpression()), !dbg !3568
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node, metadata !3569, metadata !DIExpression()), !dbg !3570
  br label %while.cond, !dbg !3571

while.cond:                                       ; preds = %sw.epilog, %entry
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_new_nodes, align 8, !dbg !3572
  %tobool = icmp ne %struct.cgraph_node* %0, null, !dbg !3571
  br i1 %tobool, label %while.body, label %while.end, !dbg !3571

while.body:                                       ; preds = %while.cond
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_new_nodes, align 8, !dbg !3573
  store %struct.cgraph_node* %1, %struct.cgraph_node** %node, align 8, !dbg !3575
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3576
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %2, i32 0, i32 0, !dbg !3577
  %3 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !3577
  store %union.tree_node* %3, %union.tree_node** %fndecl, align 8, !dbg !3578
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_new_nodes, align 8, !dbg !3579
  %next_needed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %4, i32 0, i32 8, !dbg !3580
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %next_needed, align 8, !dbg !3580
  store %struct.cgraph_node* %5, %struct.cgraph_node** @cgraph_new_nodes, align 8, !dbg !3581
  %6 = load i32, i32* @cgraph_state, align 4, !dbg !3582
  switch i32 %6, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb2
    i32 2, label %sw.bb2
    i32 3, label %sw.bb11
  ], !dbg !3583

sw.bb:                                            ; preds = %while.body
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3584
  %next_needed1 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %7, i32 0, i32 8, !dbg !3586
  store %struct.cgraph_node* null, %struct.cgraph_node** %next_needed1, align 8, !dbg !3587
  %8 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !3588
  call void @cgraph_finalize_function(%union.tree_node* %8, i8 zeroext 0), !dbg !3589
  %9 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3590
  call void @cgraph_mark_reachable_node(%struct.cgraph_node* %9), !dbg !3591
  store i8 1, i8* %output, align 1, !dbg !3592
  br label %sw.epilog, !dbg !3593

sw.bb2:                                           ; preds = %while.body, %while.body
  call void @gimple_register_cfg_hooks(), !dbg !3594
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3595
  %analyzed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %10, i32 0, i32 27, !dbg !3597
  %bf.load = load i16, i16* %analyzed, align 4, !dbg !3597
  %bf.lshr = lshr i16 %bf.load, 5, !dbg !3597
  %bf.clear = and i16 %bf.lshr, 1, !dbg !3597
  %bf.cast = zext i16 %bf.clear to i32, !dbg !3597
  %tobool3 = icmp ne i32 %bf.cast, 0, !dbg !3595
  br i1 %tobool3, label %if.end, label %if.then, !dbg !3598

if.then:                                          ; preds = %sw.bb2
  %11 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3599
  call void @cgraph_analyze_function(%struct.cgraph_node* %11), !dbg !3600
  br label %if.end, !dbg !3600

if.end:                                           ; preds = %if.then, %sw.bb2
  %12 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !3601
  %function_decl = bitcast %union.tree_node* %12 to %struct.tree_function_decl*, !dbg !3601
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !3601
  %13 = load %struct.function*, %struct.function** %f, align 8, !dbg !3601
  call void @push_cfun(%struct.function* %13), !dbg !3602
  %14 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !3603
  store %union.tree_node* %14, %union.tree_node** @current_function_decl, align 8, !dbg !3604
  %15 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3605
  %call = call i32 @compute_inline_parameters(%struct.cgraph_node* %15), !dbg !3606
  %16 = load i32, i32* @cgraph_state, align 4, !dbg !3607
  %cmp = icmp eq i32 %16, 2, !dbg !3609
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !3610

land.lhs.true:                                    ; preds = %if.end
  %17 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !3611
  %function_decl4 = bitcast %union.tree_node* %17 to %struct.tree_function_decl*, !dbg !3611
  %f5 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl4, i32 0, i32 1, !dbg !3611
  %18 = load %struct.function*, %struct.function** %f5, align 8, !dbg !3611
  %call6 = call zeroext i8 @gimple_in_ssa_p(%struct.function* %18), !dbg !3612
  %tobool7 = icmp ne i8 %call6, 0, !dbg !3612
  br i1 %tobool7, label %lor.lhs.false, label %if.then9, !dbg !3613

lor.lhs.false:                                    ; preds = %land.lhs.true, %if.end
  %19 = load i32, i32* @optimize, align 4, !dbg !3614
  %tobool8 = icmp ne i32 %19, 0, !dbg !3614
  br i1 %tobool8, label %if.end10, label %if.then9, !dbg !3615

if.then9:                                         ; preds = %lor.lhs.false, %land.lhs.true
  %20 = load %struct.opt_pass*, %struct.opt_pass** getelementptr inbounds (%struct.simple_ipa_opt_pass, %struct.simple_ipa_opt_pass* @pass_early_local_passes, i32 0, i32 0, i32 4), align 8, !dbg !3616
  call void @execute_pass_list(%struct.opt_pass* %20), !dbg !3617
  br label %if.end10, !dbg !3617

if.end10:                                         ; preds = %if.then9, %lor.lhs.false
  call void @free_dominance_info(i32 2), !dbg !3618
  call void @free_dominance_info(i32 1), !dbg !3619
  call void @pop_cfun(), !dbg !3620
  store %union.tree_node* null, %union.tree_node** @current_function_decl, align 8, !dbg !3621
  br label %sw.epilog, !dbg !3622

sw.bb11:                                          ; preds = %while.body
  %21 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3623
  %process = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %21, i32 0, i32 27, !dbg !3624
  %bf.load12 = load i16, i16* %process, align 4, !dbg !3625
  %bf.clear13 = and i16 %bf.load12, -65, !dbg !3625
  store i16 %bf.clear13, i16* %process, align 4, !dbg !3625
  %22 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3626
  call void @cgraph_expand_function(%struct.cgraph_node* %22), !dbg !3627
  br label %sw.epilog, !dbg !3628

sw.default:                                       ; preds = %while.body
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0), i32 450, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !3629
  br label %sw.epilog, !dbg !3630

sw.epilog:                                        ; preds = %sw.default, %sw.bb11, %if.end10, %sw.bb
  %23 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3631
  call void @cgraph_call_function_insertion_hooks(%struct.cgraph_node* %23), !dbg !3632
  br label %while.cond, !dbg !3571, !llvm.loop !3633

while.end:                                        ; preds = %while.cond
  %24 = load i8, i8* %output, align 1, !dbg !3635
  ret i8 %24, !dbg !3636
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @cgraph_finalize_function(%union.tree_node* %decl, i8 zeroext %nested) #0 !dbg !3637 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %nested.addr = alloca i8, align 1
  %node = alloca %struct.cgraph_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !3640, metadata !DIExpression()), !dbg !3641
  store i8 %nested, i8* %nested.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %nested.addr, metadata !3642, metadata !DIExpression()), !dbg !3643
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node, metadata !3644, metadata !DIExpression()), !dbg !3645
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3646
  %call = call %struct.cgraph_node* @cgraph_node(%union.tree_node* %0), !dbg !3647
  store %struct.cgraph_node* %call, %struct.cgraph_node** %node, align 8, !dbg !3645
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3648
  %local = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %1, i32 0, i32 18, !dbg !3650
  %finalized = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local, i32 0, i32 2, !dbg !3651
  %bf.load = load i8, i8* %finalized, align 8, !dbg !3651
  %bf.lshr = lshr i8 %bf.load, 2, !dbg !3651
  %bf.clear = and i8 %bf.lshr, 1, !dbg !3651
  %bf.cast = zext i8 %bf.clear to i32, !dbg !3651
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !3648
  br i1 %tobool, label %if.then, label %if.end, !dbg !3652

if.then:                                          ; preds = %entry
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3653
  call void @cgraph_reset_node(%struct.cgraph_node* %2), !dbg !3654
  br label %if.end, !dbg !3654

if.end:                                           ; preds = %if.then, %entry
  %3 = load i32, i32* @cgraph_max_pid, align 4, !dbg !3655
  %inc = add nsw i32 %3, 1, !dbg !3655
  store i32 %inc, i32* @cgraph_max_pid, align 4, !dbg !3655
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3656
  %pid = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %4, i32 0, i32 26, !dbg !3657
  store i32 %3, i32* %pid, align 8, !dbg !3658
  %5 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3659
  call void @notice_global_symbol(%union.tree_node* %5), !dbg !3660
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3661
  %local1 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %6, i32 0, i32 18, !dbg !3662
  %finalized2 = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local1, i32 0, i32 2, !dbg !3663
  %bf.load3 = load i8, i8* %finalized2, align 8, !dbg !3664
  %bf.clear4 = and i8 %bf.load3, -5, !dbg !3664
  %bf.set = or i8 %bf.clear4, 4, !dbg !3664
  store i8 %bf.set, i8* %finalized2, align 8, !dbg !3664
  %7 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3665
  %function_decl = bitcast %union.tree_node* %7 to %struct.tree_function_decl*, !dbg !3665
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !3665
  %8 = load %struct.function*, %struct.function** %f, align 8, !dbg !3665
  %cfg = getelementptr inbounds %struct.function, %struct.function* %8, i32 0, i32 1, !dbg !3666
  %9 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3666
  %cmp = icmp ne %struct.control_flow_graph* %9, null, !dbg !3667
  %conv = zext i1 %cmp to i32, !dbg !3667
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3668
  %lowered = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %10, i32 0, i32 27, !dbg !3669
  %11 = trunc i32 %conv to i16, !dbg !3670
  %bf.load5 = load i16, i16* %lowered, align 4, !dbg !3670
  %bf.value = and i16 %11, 1, !dbg !3670
  %bf.shl = shl i16 %bf.value, 4, !dbg !3670
  %bf.clear6 = and i16 %bf.load5, -17, !dbg !3670
  %bf.set7 = or i16 %bf.clear6, %bf.shl, !dbg !3670
  store i16 %bf.set7, i16* %lowered, align 4, !dbg !3670
  %bf.result.cast = zext i16 %bf.value to i32, !dbg !3670
  %12 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3671
  %finalized_by_frontend = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %12, i32 0, i32 27, !dbg !3672
  %bf.load8 = load i16, i16* %finalized_by_frontend, align 4, !dbg !3673
  %bf.clear9 = and i16 %bf.load8, -257, !dbg !3673
  %bf.set10 = or i16 %bf.clear9, 256, !dbg !3673
  store i16 %bf.set10, i16* %finalized_by_frontend, align 4, !dbg !3673
  %13 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3674
  %decl11 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %13, i32 0, i32 0, !dbg !3675
  %14 = load %union.tree_node*, %union.tree_node** %decl11, align 8, !dbg !3675
  call void @record_cdtor_fn(%union.tree_node* %14), !dbg !3676
  %15 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3677
  %16 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3679
  %call12 = call zeroext i8 @cgraph_decide_is_function_needed(%struct.cgraph_node* %15, %union.tree_node* %16), !dbg !3680
  %tobool13 = icmp ne i8 %call12, 0, !dbg !3680
  br i1 %tobool13, label %if.then14, label %if.end15, !dbg !3681

if.then14:                                        ; preds = %if.end
  %17 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3682
  call void @cgraph_mark_needed_node(%struct.cgraph_node* %17), !dbg !3683
  br label %if.end15, !dbg !3683

if.end15:                                         ; preds = %if.then14, %if.end
  %18 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3684
  %base = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !3684
  %19 = bitcast %struct.tree_base* %base to i64*, !dbg !3684
  %bf.load16 = load i64, i64* %19, align 8, !dbg !3684
  %bf.lshr17 = lshr i64 %bf.load16, 27, !dbg !3684
  %bf.clear18 = and i64 %bf.lshr17, 1, !dbg !3684
  %bf.cast19 = trunc i64 %bf.clear18 to i32, !dbg !3684
  %tobool20 = icmp ne i32 %bf.cast19, 0, !dbg !3684
  br i1 %tobool20, label %land.lhs.true, label %if.end32, !dbg !3686

land.lhs.true:                                    ; preds = %if.end15
  %20 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3687
  %decl_with_vis = bitcast %union.tree_node* %20 to %struct.tree_decl_with_vis*, !dbg !3687
  %comdat_flag = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !3687
  %21 = bitcast i24* %comdat_flag to i32*, !dbg !3687
  %bf.load21 = load i32, i32* %21, align 8, !dbg !3687
  %bf.lshr22 = lshr i32 %bf.load21, 9, !dbg !3687
  %bf.clear23 = and i32 %bf.lshr22, 1, !dbg !3687
  %tobool24 = icmp ne i32 %bf.clear23, 0, !dbg !3687
  br i1 %tobool24, label %if.end32, label %land.lhs.true25, !dbg !3688

land.lhs.true25:                                  ; preds = %land.lhs.true
  %22 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3689
  %decl_common = bitcast %union.tree_node* %22 to %struct.tree_decl_common*, !dbg !3689
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !3689
  %23 = bitcast i40* %decl_flag_1 to i64*, !dbg !3689
  %bf.load26 = load i64, i64* %23, align 8, !dbg !3689
  %bf.lshr27 = lshr i64 %bf.load26, 25, !dbg !3689
  %bf.clear28 = and i64 %bf.lshr27, 1, !dbg !3689
  %bf.cast29 = trunc i64 %bf.clear28 to i32, !dbg !3689
  %tobool30 = icmp ne i32 %bf.cast29, 0, !dbg !3689
  br i1 %tobool30, label %if.end32, label %if.then31, !dbg !3690

if.then31:                                        ; preds = %land.lhs.true25
  %24 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3691
  call void @cgraph_mark_reachable_node(%struct.cgraph_node* %24), !dbg !3692
  br label %if.end32, !dbg !3692

if.end32:                                         ; preds = %if.then31, %land.lhs.true25, %land.lhs.true, %if.end15
  %25 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3693
  %base33 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !3693
  %26 = bitcast %struct.tree_base* %base33 to i64*, !dbg !3693
  %bf.load34 = load i64, i64* %26, align 8, !dbg !3693
  %bf.lshr35 = lshr i64 %bf.load34, 22, !dbg !3693
  %bf.clear36 = and i64 %bf.lshr35, 1, !dbg !3693
  %bf.cast37 = trunc i64 %bf.clear36 to i32, !dbg !3693
  %tobool38 = icmp ne i32 %bf.cast37, 0, !dbg !3693
  br i1 %tobool38, label %if.end40, label %if.then39, !dbg !3695

if.then39:                                        ; preds = %if.end32
  %27 = load %struct.gcc_debug_hooks*, %struct.gcc_debug_hooks** @debug_hooks, align 8, !dbg !3696
  %deferred_inline_function = getelementptr inbounds %struct.gcc_debug_hooks, %struct.gcc_debug_hooks* %27, i32 0, i32 20, !dbg !3697
  %28 = load void (%union.tree_node*)*, void (%union.tree_node*)** %deferred_inline_function, align 8, !dbg !3697
  %29 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3698
  call void %28(%union.tree_node* %29), !dbg !3699
  br label %if.end40, !dbg !3699

if.end40:                                         ; preds = %if.then39, %if.end32
  %30 = load i32, i32* @warn_unused_parameter, align 4, !dbg !3700
  %tobool41 = icmp ne i32 %30, 0, !dbg !3700
  br i1 %tobool41, label %if.then42, label %if.end43, !dbg !3702

if.then42:                                        ; preds = %if.end40
  %31 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3703
  call void @do_warn_unused_parameter(%union.tree_node* %31), !dbg !3704
  br label %if.end43, !dbg !3704

if.end43:                                         ; preds = %if.then42, %if.end40
  %32 = load i8, i8* %nested.addr, align 1, !dbg !3705
  %tobool44 = icmp ne i8 %32, 0, !dbg !3705
  br i1 %tobool44, label %if.end46, label %if.then45, !dbg !3707

if.then45:                                        ; preds = %if.end43
  call void @ggc_collect(), !dbg !3708
  br label %if.end46, !dbg !3708

if.end46:                                         ; preds = %if.then45, %if.end43
  ret void, !dbg !3709
}

declare dso_local void @cgraph_mark_reachable_node(%struct.cgraph_node*) #2

declare dso_local void @gimple_register_cfg_hooks() #2

; Function Attrs: noinline nounwind uwtable
define internal void @cgraph_analyze_function(%struct.cgraph_node* %node) #0 !dbg !3710 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  %save = alloca %union.tree_node*, align 8
  %decl = alloca %union.tree_node*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !3711, metadata !DIExpression()), !dbg !3712
  call void @llvm.dbg.declare(metadata %union.tree_node** %save, metadata !3713, metadata !DIExpression()), !dbg !3714
  %0 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !3715
  store %union.tree_node* %0, %union.tree_node** %save, align 8, !dbg !3714
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !3716, metadata !DIExpression()), !dbg !3717
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3718
  %decl1 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %1, i32 0, i32 0, !dbg !3719
  %2 = load %union.tree_node*, %union.tree_node** %decl1, align 8, !dbg !3719
  store %union.tree_node* %2, %union.tree_node** %decl, align 8, !dbg !3717
  %3 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !3720
  store %union.tree_node* %3, %union.tree_node** @current_function_decl, align 8, !dbg !3721
  %4 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !3722
  %function_decl = bitcast %union.tree_node* %4 to %struct.tree_function_decl*, !dbg !3722
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !3722
  %5 = load %struct.function*, %struct.function** %f, align 8, !dbg !3722
  call void @push_cfun(%struct.function* %5), !dbg !3723
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3724
  %decl2 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %6, i32 0, i32 0, !dbg !3725
  %7 = load %union.tree_node*, %union.tree_node** %decl2, align 8, !dbg !3725
  call void @assign_assembler_name_if_neeeded(%union.tree_node* %7), !dbg !3726
  %8 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !3727
  %call = call %struct.gimple_seq_d* @gimple_body(%union.tree_node* %8), !dbg !3729
  %tobool = icmp ne %struct.gimple_seq_d* %call, null, !dbg !3729
  br i1 %tobool, label %if.end, label %if.then, !dbg !3730

if.then:                                          ; preds = %entry
  %9 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !3731
  call void @gimplify_function_tree(%union.tree_node* %9), !dbg !3732
  br label %if.end, !dbg !3732

if.end:                                           ; preds = %if.then, %entry
  %10 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !3733
  call void @dump_function(i32 5, %union.tree_node* %10), !dbg !3734
  %11 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3735
  call void @cgraph_lower_function(%struct.cgraph_node* %11), !dbg !3736
  %12 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3737
  %analyzed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %12, i32 0, i32 27, !dbg !3738
  %bf.load = load i16, i16* %analyzed, align 4, !dbg !3739
  %bf.clear = and i16 %bf.load, -33, !dbg !3739
  %bf.set = or i16 %bf.clear, 32, !dbg !3739
  store i16 %bf.set, i16* %analyzed, align 4, !dbg !3739
  call void @pop_cfun(), !dbg !3740
  %13 = load %union.tree_node*, %union.tree_node** %save, align 8, !dbg !3741
  store %union.tree_node* %13, %union.tree_node** @current_function_decl, align 8, !dbg !3742
  ret void, !dbg !3743
}

declare dso_local void @push_cfun(%struct.function*) #2

declare dso_local i32 @compute_inline_parameters(%struct.cgraph_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_in_ssa_p(%struct.function* %fun) #0 !dbg !3744 {
entry:
  %fun.addr = alloca %struct.function*, align 8
  store %struct.function* %fun, %struct.function** %fun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fun.addr, metadata !3750, metadata !DIExpression()), !dbg !3751
  %0 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !3752
  %tobool = icmp ne %struct.function* %0, null, !dbg !3752
  br i1 %tobool, label %land.lhs.true, label %land.end, !dbg !3753

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !3754
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %1, i32 0, i32 3, !dbg !3755
  %2 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !3755
  %tobool1 = icmp ne %struct.gimple_df* %2, null, !dbg !3754
  br i1 %tobool1, label %land.rhs, label %land.end, !dbg !3756

land.rhs:                                         ; preds = %land.lhs.true
  %3 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !3757
  %gimple_df2 = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 3, !dbg !3758
  %4 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df2, align 8, !dbg !3758
  %in_ssa_p = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %4, i32 0, i32 10, !dbg !3759
  %bf.load = load i8, i8* %in_ssa_p, align 8, !dbg !3759
  %bf.clear = and i8 %bf.load, 1, !dbg !3759
  %bf.cast = zext i8 %bf.clear to i32, !dbg !3759
  %tobool3 = icmp ne i32 %bf.cast, 0, !dbg !3756
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %5 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %tobool3, %land.rhs ], !dbg !3760
  %land.ext = zext i1 %5 to i32, !dbg !3756
  %conv = trunc i32 %land.ext to i8, !dbg !3752
  ret i8 %conv, !dbg !3761
}

declare dso_local void @execute_pass_list(%struct.opt_pass*) #2

declare dso_local void @free_dominance_info(i32) #2

declare dso_local void @pop_cfun() #2

; Function Attrs: noinline nounwind uwtable
define internal void @cgraph_expand_function(%struct.cgraph_node* %node) #0 !dbg !3762 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  %decl = alloca %union.tree_node*, align 8
  %alias = alloca %struct.cgraph_node*, align 8
  %next = alloca %struct.cgraph_node*, align 8
  %saved_alias = alloca i8, align 1
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !3763, metadata !DIExpression()), !dbg !3764
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !3765, metadata !DIExpression()), !dbg !3766
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3767
  %decl1 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 0, !dbg !3768
  %1 = load %union.tree_node*, %union.tree_node** %decl1, align 8, !dbg !3768
  store %union.tree_node* %1, %union.tree_node** %decl, align 8, !dbg !3766
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3769
  %global = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %2, i32 0, i32 19, !dbg !3769
  %inlined_to = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global, i32 0, i32 2, !dbg !3769
  %3 = load %struct.cgraph_node*, %struct.cgraph_node** %inlined_to, align 8, !dbg !3769
  %tobool = icmp ne %struct.cgraph_node* %3, null, !dbg !3769
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3769

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0), i32 1554, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !3769
  br label %cond.end, !dbg !3769

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3769

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3769
  %4 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !3770
  call void @announce_function(%union.tree_node* %4), !dbg !3771
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3772
  %process = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %5, i32 0, i32 27, !dbg !3773
  %bf.load = load i16, i16* %process, align 4, !dbg !3774
  %bf.clear = and i16 %bf.load, -65, !dbg !3774
  store i16 %bf.clear, i16* %process, align 4, !dbg !3774
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3775
  %lowered = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %6, i32 0, i32 27, !dbg !3775
  %bf.load2 = load i16, i16* %lowered, align 4, !dbg !3775
  %bf.lshr = lshr i16 %bf.load2, 4, !dbg !3775
  %bf.clear3 = and i16 %bf.lshr, 1, !dbg !3775
  %bf.cast = zext i16 %bf.clear3 to i32, !dbg !3775
  %tobool4 = icmp ne i32 %bf.cast, 0, !dbg !3775
  br i1 %tobool4, label %cond.false6, label %cond.true5, !dbg !3775

cond.true5:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0), i32 1559, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !3775
  br label %cond.end7, !dbg !3775

cond.false6:                                      ; preds = %cond.end
  br label %cond.end7, !dbg !3775

cond.end7:                                        ; preds = %cond.false6, %cond.true5
  %cond8 = phi i32 [ 0, %cond.true5 ], [ 0, %cond.false6 ], !dbg !3775
  %7 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !3776
  call void @tree_rest_of_compilation(%union.tree_node* %7), !dbg !3777
  %8 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !3778
  %base = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !3778
  %9 = bitcast %struct.tree_base* %base to i64*, !dbg !3778
  %bf.load9 = load i64, i64* %9, align 8, !dbg !3778
  %bf.lshr10 = lshr i64 %bf.load9, 22, !dbg !3778
  %bf.clear11 = and i64 %bf.lshr10, 1, !dbg !3778
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !3778
  %tobool13 = icmp ne i32 %bf.cast12, 0, !dbg !3778
  br i1 %tobool13, label %cond.false15, label %cond.true14, !dbg !3778

cond.true14:                                      ; preds = %cond.end7
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0), i32 1565, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !3778
  br label %cond.end16, !dbg !3778

cond.false15:                                     ; preds = %cond.end7
  br label %cond.end16, !dbg !3778

cond.end16:                                       ; preds = %cond.false15, %cond.true14
  %cond17 = phi i32 [ 0, %cond.true14 ], [ 0, %cond.false15 ], !dbg !3778
  store %union.tree_node* null, %union.tree_node** @current_function_decl, align 8, !dbg !3779
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3780
  %same_body = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %10, i32 0, i32 13, !dbg !3782
  %11 = load %struct.cgraph_node*, %struct.cgraph_node** %same_body, align 8, !dbg !3782
  %tobool18 = icmp ne %struct.cgraph_node* %11, null, !dbg !3780
  br i1 %tobool18, label %if.then, label %if.end43, !dbg !3783

if.then:                                          ; preds = %cond.end16
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %alias, metadata !3784, metadata !DIExpression()), !dbg !3786
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %next, metadata !3787, metadata !DIExpression()), !dbg !3788
  call void @llvm.dbg.declare(metadata i8* %saved_alias, metadata !3789, metadata !DIExpression()), !dbg !3790
  %12 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3791
  %alias19 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %12, i32 0, i32 27, !dbg !3792
  %bf.load20 = load i16, i16* %alias19, align 4, !dbg !3792
  %bf.lshr21 = lshr i16 %bf.load20, 7, !dbg !3792
  %bf.clear22 = and i16 %bf.lshr21, 1, !dbg !3792
  %bf.cast23 = zext i16 %bf.clear22 to i32, !dbg !3792
  %conv = trunc i32 %bf.cast23 to i8, !dbg !3791
  store i8 %conv, i8* %saved_alias, align 1, !dbg !3790
  %13 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3793
  %same_body24 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %13, i32 0, i32 13, !dbg !3795
  %14 = load %struct.cgraph_node*, %struct.cgraph_node** %same_body24, align 8, !dbg !3795
  store %struct.cgraph_node* %14, %struct.cgraph_node** %alias, align 8, !dbg !3796
  br label %for.cond, !dbg !3797

for.cond:                                         ; preds = %for.inc, %if.then
  %15 = load %struct.cgraph_node*, %struct.cgraph_node** %alias, align 8, !dbg !3798
  %tobool25 = icmp ne %struct.cgraph_node* %15, null, !dbg !3798
  br i1 %tobool25, label %land.rhs, label %land.end, !dbg !3800

land.rhs:                                         ; preds = %for.cond
  %16 = load %struct.cgraph_node*, %struct.cgraph_node** %alias, align 8, !dbg !3801
  %next26 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %16, i32 0, i32 3, !dbg !3802
  %17 = load %struct.cgraph_node*, %struct.cgraph_node** %next26, align 8, !dbg !3802
  %tobool27 = icmp ne %struct.cgraph_node* %17, null, !dbg !3800
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %18 = phi i1 [ false, %for.cond ], [ %tobool27, %land.rhs ], !dbg !3803
  br i1 %18, label %for.body, label %for.end, !dbg !3804

for.body:                                         ; preds = %land.end
  br label %for.inc, !dbg !3804

for.inc:                                          ; preds = %for.body
  %19 = load %struct.cgraph_node*, %struct.cgraph_node** %alias, align 8, !dbg !3805
  %next28 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %19, i32 0, i32 3, !dbg !3806
  %20 = load %struct.cgraph_node*, %struct.cgraph_node** %next28, align 8, !dbg !3806
  store %struct.cgraph_node* %20, %struct.cgraph_node** %alias, align 8, !dbg !3807
  br label %for.cond, !dbg !3808, !llvm.loop !3809

for.end:                                          ; preds = %land.end
  br label %for.cond29, !dbg !3811

for.cond29:                                       ; preds = %for.inc37, %for.end
  %21 = load %struct.cgraph_node*, %struct.cgraph_node** %alias, align 8, !dbg !3812
  %tobool30 = icmp ne %struct.cgraph_node* %21, null, !dbg !3815
  br i1 %tobool30, label %for.body31, label %for.end38, !dbg !3815

for.body31:                                       ; preds = %for.cond29
  %22 = load %struct.cgraph_node*, %struct.cgraph_node** %alias, align 8, !dbg !3816
  %previous = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %22, i32 0, i32 4, !dbg !3818
  %23 = load %struct.cgraph_node*, %struct.cgraph_node** %previous, align 8, !dbg !3818
  store %struct.cgraph_node* %23, %struct.cgraph_node** %next, align 8, !dbg !3819
  %24 = load %struct.cgraph_node*, %struct.cgraph_node** %alias, align 8, !dbg !3820
  %thunk = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %24, i32 0, i32 22, !dbg !3822
  %thunk_p = getelementptr inbounds %struct.cgraph_thunk_info, %struct.cgraph_thunk_info* %thunk, i32 0, i32 5, !dbg !3823
  %25 = load i8, i8* %thunk_p, align 2, !dbg !3823
  %tobool32 = icmp ne i8 %25, 0, !dbg !3820
  br i1 %tobool32, label %if.else, label %if.then33, !dbg !3824

if.then33:                                        ; preds = %for.body31
  %26 = load %struct.cgraph_node*, %struct.cgraph_node** %alias, align 8, !dbg !3825
  %decl34 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %26, i32 0, i32 0, !dbg !3826
  %27 = load %union.tree_node*, %union.tree_node** %decl34, align 8, !dbg !3826
  %28 = load %struct.cgraph_node*, %struct.cgraph_node** %alias, align 8, !dbg !3827
  %thunk35 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %28, i32 0, i32 22, !dbg !3827
  %alias36 = getelementptr inbounds %struct.cgraph_thunk_info, %struct.cgraph_thunk_info* %thunk35, i32 0, i32 2, !dbg !3827
  %29 = load %union.tree_node*, %union.tree_node** %alias36, align 8, !dbg !3827
  %call = call %union.tree_node* @decl_assembler_name(%union.tree_node* %29), !dbg !3827
  call void @assemble_alias(%union.tree_node* %27, %union.tree_node* %call), !dbg !3828
  br label %if.end, !dbg !3828

if.else:                                          ; preds = %for.body31
  %30 = load %struct.cgraph_node*, %struct.cgraph_node** %alias, align 8, !dbg !3829
  call void @assemble_thunk(%struct.cgraph_node* %30), !dbg !3830
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then33
  br label %for.inc37, !dbg !3831

for.inc37:                                        ; preds = %if.end
  %31 = load %struct.cgraph_node*, %struct.cgraph_node** %next, align 8, !dbg !3832
  store %struct.cgraph_node* %31, %struct.cgraph_node** %alias, align 8, !dbg !3833
  br label %for.cond29, !dbg !3834, !llvm.loop !3835

for.end38:                                        ; preds = %for.cond29
  %32 = load i8, i8* %saved_alias, align 1, !dbg !3837
  %conv39 = zext i8 %32 to i32, !dbg !3837
  %33 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3838
  %alias40 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %33, i32 0, i32 27, !dbg !3839
  %34 = trunc i32 %conv39 to i16, !dbg !3840
  %bf.load41 = load i16, i16* %alias40, align 4, !dbg !3840
  %bf.value = and i16 %34, 1, !dbg !3840
  %bf.shl = shl i16 %bf.value, 7, !dbg !3840
  %bf.clear42 = and i16 %bf.load41, -129, !dbg !3840
  %bf.set = or i16 %bf.clear42, %bf.shl, !dbg !3840
  store i16 %bf.set, i16* %alias40, align 4, !dbg !3840
  %bf.result.cast = zext i16 %bf.value to i32, !dbg !3840
  br label %if.end43, !dbg !3841

if.end43:                                         ; preds = %for.end38, %cond.end16
  %35 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !3842
  %call44 = call zeroext i8 @cgraph_preserve_function_body_p(%union.tree_node* %35), !dbg !3842
  %tobool45 = icmp ne i8 %call44, 0, !dbg !3842
  br i1 %tobool45, label %cond.true46, label %cond.false47, !dbg !3842

cond.true46:                                      ; preds = %if.end43
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0), i32 1587, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !3842
  br label %cond.end48, !dbg !3842

cond.false47:                                     ; preds = %if.end43
  br label %cond.end48, !dbg !3842

cond.end48:                                       ; preds = %cond.false47, %cond.true46
  %cond49 = phi i32 [ 0, %cond.true46 ], [ 0, %cond.false47 ], !dbg !3842
  %36 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3843
  call void @cgraph_release_function_body(%struct.cgraph_node* %36), !dbg !3844
  %37 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3845
  call void @cgraph_node_remove_callees(%struct.cgraph_node* %37), !dbg !3846
  store i8 1, i8* @cgraph_function_flags_ready, align 1, !dbg !3847
  ret void, !dbg !3848
}

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

declare dso_local void @cgraph_call_function_insertion_hooks(%struct.cgraph_node*) #2

declare dso_local %struct.cgraph_node* @cgraph_node(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @cgraph_reset_node(%struct.cgraph_node* %node) #0 !dbg !3849 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  %n = alloca %struct.cgraph_node*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !3850, metadata !DIExpression()), !dbg !3851
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3852
  %process = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 27, !dbg !3852
  %bf.load = load i16, i16* %process, align 4, !dbg !3852
  %bf.lshr = lshr i16 %bf.load, 6, !dbg !3852
  %bf.clear = and i16 %bf.lshr, 1, !dbg !3852
  %bf.cast = zext i16 %bf.clear to i32, !dbg !3852
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !3852
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3852

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0), i32 476, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !3852
  br label %cond.end, !dbg !3852

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3852

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3852
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3853
  %local = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %1, i32 0, i32 18, !dbg !3854
  %2 = bitcast %struct.cgraph_local_info* %local to i8*, !dbg !3855
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 40, i1 false), !dbg !3855
  %3 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3856
  %global = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %3, i32 0, i32 19, !dbg !3857
  %4 = bitcast %struct.cgraph_global_info* %global to i8*, !dbg !3858
  call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 40, i1 false), !dbg !3858
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3859
  %rtl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %5, i32 0, i32 20, !dbg !3860
  %6 = bitcast %struct.cgraph_rtl_info* %rtl to i8*, !dbg !3861
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 4, i1 false), !dbg !3861
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3862
  %analyzed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %7, i32 0, i32 27, !dbg !3863
  %bf.load1 = load i16, i16* %analyzed, align 4, !dbg !3864
  %bf.clear2 = and i16 %bf.load1, -33, !dbg !3864
  store i16 %bf.clear2, i16* %analyzed, align 4, !dbg !3864
  %8 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3865
  %local3 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %8, i32 0, i32 18, !dbg !3866
  %redefined_extern_inline = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local3, i32 0, i32 2, !dbg !3867
  %bf.load4 = load i8, i8* %redefined_extern_inline, align 8, !dbg !3868
  %bf.clear5 = and i8 %bf.load4, -33, !dbg !3868
  %bf.set = or i8 %bf.clear5, 32, !dbg !3868
  store i8 %bf.set, i8* %redefined_extern_inline, align 8, !dbg !3868
  %9 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3869
  %local6 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %9, i32 0, i32 18, !dbg !3870
  %finalized = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local6, i32 0, i32 2, !dbg !3871
  %bf.load7 = load i8, i8* %finalized, align 8, !dbg !3872
  %bf.clear8 = and i8 %bf.load7, -5, !dbg !3872
  store i8 %bf.clear8, i8* %finalized, align 8, !dbg !3872
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3873
  call void @cgraph_node_remove_callees(%struct.cgraph_node* %10), !dbg !3874
  %11 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3875
  %reachable = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %11, i32 0, i32 27, !dbg !3877
  %bf.load9 = load i16, i16* %reachable, align 4, !dbg !3877
  %bf.lshr10 = lshr i16 %bf.load9, 3, !dbg !3877
  %bf.clear11 = and i16 %bf.lshr10, 1, !dbg !3877
  %bf.cast12 = zext i16 %bf.clear11 to i32, !dbg !3877
  %tobool13 = icmp ne i32 %bf.cast12, 0, !dbg !3875
  br i1 %tobool13, label %if.then, label %if.end22, !dbg !3878

if.then:                                          ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %n, metadata !3879, metadata !DIExpression()), !dbg !3881
  %12 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_nodes_queue, align 8, !dbg !3882
  store %struct.cgraph_node* %12, %struct.cgraph_node** %n, align 8, !dbg !3884
  br label %for.cond, !dbg !3885

for.cond:                                         ; preds = %for.inc, %if.then
  %13 = load %struct.cgraph_node*, %struct.cgraph_node** %n, align 8, !dbg !3886
  %tobool14 = icmp ne %struct.cgraph_node* %13, null, !dbg !3888
  br i1 %tobool14, label %for.body, label %for.end, !dbg !3888

for.body:                                         ; preds = %for.cond
  %14 = load %struct.cgraph_node*, %struct.cgraph_node** %n, align 8, !dbg !3889
  %15 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3891
  %cmp = icmp eq %struct.cgraph_node* %14, %15, !dbg !3892
  br i1 %cmp, label %if.then15, label %if.end, !dbg !3893

if.then15:                                        ; preds = %for.body
  br label %for.end, !dbg !3894

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !3891

for.inc:                                          ; preds = %if.end
  %16 = load %struct.cgraph_node*, %struct.cgraph_node** %n, align 8, !dbg !3895
  %next_needed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %16, i32 0, i32 8, !dbg !3896
  %17 = load %struct.cgraph_node*, %struct.cgraph_node** %next_needed, align 8, !dbg !3896
  store %struct.cgraph_node* %17, %struct.cgraph_node** %n, align 8, !dbg !3897
  br label %for.cond, !dbg !3898, !llvm.loop !3899

for.end:                                          ; preds = %if.then15, %for.cond
  %18 = load %struct.cgraph_node*, %struct.cgraph_node** %n, align 8, !dbg !3901
  %tobool16 = icmp ne %struct.cgraph_node* %18, null, !dbg !3901
  br i1 %tobool16, label %if.end21, label %if.then17, !dbg !3903

if.then17:                                        ; preds = %for.end
  %19 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3904
  %reachable18 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %19, i32 0, i32 27, !dbg !3905
  %bf.load19 = load i16, i16* %reachable18, align 4, !dbg !3906
  %bf.clear20 = and i16 %bf.load19, -9, !dbg !3906
  store i16 %bf.clear20, i16* %reachable18, align 4, !dbg !3906
  br label %if.end21, !dbg !3904

if.end21:                                         ; preds = %if.then17, %for.end
  br label %if.end22, !dbg !3907

if.end22:                                         ; preds = %if.end21, %cond.end
  ret void, !dbg !3908
}

declare dso_local void @notice_global_symbol(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @record_cdtor_fn(%union.tree_node* %fndecl) #0 !dbg !3909 {
entry:
  %fndecl.addr = alloca %union.tree_node*, align 8
  %node = alloca %struct.cgraph_node*, align 8
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !3912, metadata !DIExpression()), !dbg !3913
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node, metadata !3914, metadata !DIExpression()), !dbg !3915
  %0 = load i8, i8* getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 112), align 1, !dbg !3916
  %conv = zext i8 %0 to i32, !dbg !3918
  %tobool = icmp ne i32 %conv, 0, !dbg !3918
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !3919

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !3920
  %function_decl = bitcast %union.tree_node* %1 to %struct.tree_function_decl*, !dbg !3920
  %static_ctor_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !3920
  %bf.load = load i32, i32* %static_ctor_flag, align 8, !dbg !3920
  %bf.lshr = lshr i32 %bf.load, 13, !dbg !3920
  %bf.clear = and i32 %bf.lshr, 1, !dbg !3920
  %tobool1 = icmp ne i32 %bf.clear, 0, !dbg !3920
  br i1 %tobool1, label %if.end, label %land.lhs.true, !dbg !3921

land.lhs.true:                                    ; preds = %lor.lhs.false
  %2 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !3922
  %function_decl2 = bitcast %union.tree_node* %2 to %struct.tree_function_decl*, !dbg !3922
  %static_dtor_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl2, i32 0, i32 5, !dbg !3922
  %bf.load3 = load i32, i32* %static_dtor_flag, align 8, !dbg !3922
  %bf.lshr4 = lshr i32 %bf.load3, 14, !dbg !3922
  %bf.clear5 = and i32 %bf.lshr4, 1, !dbg !3922
  %tobool6 = icmp ne i32 %bf.clear5, 0, !dbg !3922
  br i1 %tobool6, label %if.end, label %if.then, !dbg !3923

if.then:                                          ; preds = %land.lhs.true, %entry
  br label %return, !dbg !3924

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  %3 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !3925
  %function_decl7 = bitcast %union.tree_node* %3 to %struct.tree_function_decl*, !dbg !3925
  %static_ctor_flag8 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl7, i32 0, i32 5, !dbg !3925
  %bf.load9 = load i32, i32* %static_ctor_flag8, align 8, !dbg !3925
  %bf.lshr10 = lshr i32 %bf.load9, 13, !dbg !3925
  %bf.clear11 = and i32 %bf.lshr10, 1, !dbg !3925
  %tobool12 = icmp ne i32 %bf.clear11, 0, !dbg !3925
  br i1 %tobool12, label %if.then13, label %if.end18, !dbg !3927

if.then13:                                        ; preds = %if.end
  %4 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !3928
  %call = call %union.tree_node** @VEC_tree_gc_safe_push(%struct.VEC_tree_gc** @static_ctors, %union.tree_node* %4), !dbg !3928
  %5 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !3930
  %function_decl14 = bitcast %union.tree_node* %5 to %struct.tree_function_decl*, !dbg !3930
  %static_ctor_flag15 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl14, i32 0, i32 5, !dbg !3930
  %bf.load16 = load i32, i32* %static_ctor_flag15, align 8, !dbg !3931
  %bf.clear17 = and i32 %bf.load16, -8193, !dbg !3931
  store i32 %bf.clear17, i32* %static_ctor_flag15, align 8, !dbg !3931
  br label %if.end18, !dbg !3932

if.end18:                                         ; preds = %if.then13, %if.end
  %6 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !3933
  %function_decl19 = bitcast %union.tree_node* %6 to %struct.tree_function_decl*, !dbg !3933
  %static_dtor_flag20 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl19, i32 0, i32 5, !dbg !3933
  %bf.load21 = load i32, i32* %static_dtor_flag20, align 8, !dbg !3933
  %bf.lshr22 = lshr i32 %bf.load21, 14, !dbg !3933
  %bf.clear23 = and i32 %bf.lshr22, 1, !dbg !3933
  %tobool24 = icmp ne i32 %bf.clear23, 0, !dbg !3933
  br i1 %tobool24, label %if.then25, label %if.end31, !dbg !3935

if.then25:                                        ; preds = %if.end18
  %7 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !3936
  %call26 = call %union.tree_node** @VEC_tree_gc_safe_push(%struct.VEC_tree_gc** @static_dtors, %union.tree_node* %7), !dbg !3936
  %8 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !3938
  %function_decl27 = bitcast %union.tree_node* %8 to %struct.tree_function_decl*, !dbg !3938
  %static_dtor_flag28 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl27, i32 0, i32 5, !dbg !3938
  %bf.load29 = load i32, i32* %static_dtor_flag28, align 8, !dbg !3939
  %bf.clear30 = and i32 %bf.load29, -16385, !dbg !3939
  store i32 %bf.clear30, i32* %static_dtor_flag28, align 8, !dbg !3939
  br label %if.end31, !dbg !3940

if.end31:                                         ; preds = %if.then25, %if.end18
  %9 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !3941
  %call32 = call %struct.cgraph_node* @cgraph_node(%union.tree_node* %9), !dbg !3942
  store %struct.cgraph_node* %call32, %struct.cgraph_node** %node, align 8, !dbg !3943
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3944
  %local = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %10, i32 0, i32 18, !dbg !3945
  %disregard_inline_limits = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local, i32 0, i32 2, !dbg !3946
  %bf.load33 = load i8, i8* %disregard_inline_limits, align 8, !dbg !3947
  %bf.clear34 = and i8 %bf.load33, -17, !dbg !3947
  %bf.set = or i8 %bf.clear34, 16, !dbg !3947
  store i8 %bf.set, i8* %disregard_inline_limits, align 8, !dbg !3947
  %11 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3948
  call void @cgraph_mark_reachable_node(%struct.cgraph_node* %11), !dbg !3949
  br label %return, !dbg !3950

return:                                           ; preds = %if.end31, %if.then
  ret void, !dbg !3950
}

declare dso_local void @cgraph_mark_needed_node(%struct.cgraph_node*) #2

declare dso_local void @do_warn_unused_parameter(%union.tree_node*) #2

declare dso_local void @ggc_collect() #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @cgraph_mark_if_needed(%union.tree_node* %decl) #0 !dbg !3951 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %node = alloca %struct.cgraph_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !3952, metadata !DIExpression()), !dbg !3953
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node, metadata !3954, metadata !DIExpression()), !dbg !3955
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3956
  %call = call %struct.cgraph_node* @cgraph_node(%union.tree_node* %0), !dbg !3957
  store %struct.cgraph_node* %call, %struct.cgraph_node** %node, align 8, !dbg !3955
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3958
  %local = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %1, i32 0, i32 18, !dbg !3960
  %finalized = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local, i32 0, i32 2, !dbg !3961
  %bf.load = load i8, i8* %finalized, align 8, !dbg !3961
  %bf.lshr = lshr i8 %bf.load, 2, !dbg !3961
  %bf.clear = and i8 %bf.lshr, 1, !dbg !3961
  %bf.cast = zext i8 %bf.clear to i32, !dbg !3961
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !3958
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !3962

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3963
  %3 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3964
  %call1 = call zeroext i8 @cgraph_decide_is_function_needed(%struct.cgraph_node* %2, %union.tree_node* %3), !dbg !3965
  %conv = zext i8 %call1 to i32, !dbg !3965
  %tobool2 = icmp ne i32 %conv, 0, !dbg !3965
  br i1 %tobool2, label %if.then, label %if.end, !dbg !3966

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3967
  call void @cgraph_mark_needed_node(%struct.cgraph_node* %4), !dbg !3968
  br label %if.end, !dbg !3968

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void, !dbg !3969
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @verify_cgraph_node(%struct.cgraph_node* %node) #0 !dbg !3970 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  %e = alloca %struct.cgraph_edge*, align 8
  %this_cfun = alloca %struct.function*, align 8
  %saved_cfun = alloca %struct.function*, align 8
  %this_block = alloca %struct.basic_block_def*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %error_found = alloca i8, align 1
  %n = alloca %struct.cgraph_node*, align 8
  %n147 = alloca %struct.cgraph_node*, align 8
  %visited_nodes = alloca %struct.pointer_set_t*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %decl239 = alloca %union.tree_node*, align 8
  %e247 = alloca %struct.cgraph_edge*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !3971, metadata !DIExpression()), !dbg !3972
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %e, metadata !3973, metadata !DIExpression()), !dbg !3974
  call void @llvm.dbg.declare(metadata %struct.function** %this_cfun, metadata !3975, metadata !DIExpression()), !dbg !3976
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3977
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 0, !dbg !3977
  %1 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !3977
  %function_decl = bitcast %union.tree_node* %1 to %struct.tree_function_decl*, !dbg !3977
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !3977
  %2 = load %struct.function*, %struct.function** %f, align 8, !dbg !3977
  store %struct.function* %2, %struct.function** %this_cfun, align 8, !dbg !3976
  call void @llvm.dbg.declare(metadata %struct.function** %saved_cfun, metadata !3978, metadata !DIExpression()), !dbg !3979
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3980
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !3980
  store %struct.function* %add.ptr, %struct.function** %saved_cfun, align 8, !dbg !3979
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %this_block, metadata !3981, metadata !DIExpression()), !dbg !3982
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !3983, metadata !DIExpression()), !dbg !3990
  call void @llvm.dbg.declare(metadata i8* %error_found, metadata !3991, metadata !DIExpression()), !dbg !3992
  store i8 0, i8* %error_found, align 1, !dbg !3992
  %4 = load %struct.diagnostic_context*, %struct.diagnostic_context** @global_dc, align 8, !dbg !3993
  %diagnostic_count = getelementptr inbounds %struct.diagnostic_context, %struct.diagnostic_context* %4, i32 0, i32 1, !dbg !3993
  %arrayidx = getelementptr inbounds [12 x i32], [12 x i32]* %diagnostic_count, i64 0, i64 4, !dbg !3993
  %5 = load i32, i32* %arrayidx, align 8, !dbg !3993
  %tobool = icmp ne i32 %5, 0, !dbg !3993
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !3995

lor.lhs.false:                                    ; preds = %entry
  %6 = load %struct.diagnostic_context*, %struct.diagnostic_context** @global_dc, align 8, !dbg !3996
  %diagnostic_count1 = getelementptr inbounds %struct.diagnostic_context, %struct.diagnostic_context* %6, i32 0, i32 1, !dbg !3996
  %arrayidx2 = getelementptr inbounds [12 x i32], [12 x i32]* %diagnostic_count1, i64 0, i64 5, !dbg !3996
  %7 = load i32, i32* %arrayidx2, align 4, !dbg !3996
  %tobool3 = icmp ne i32 %7, 0, !dbg !3996
  br i1 %tobool3, label %if.then, label %if.end, !dbg !3997

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %do.end327, !dbg !3998

if.end:                                           ; preds = %lor.lhs.false
  br label %do.body, !dbg !3999

do.body:                                          ; preds = %if.end
  %8 = load i8, i8* @timevar_enable, align 1, !dbg !4000
  %tobool4 = icmp ne i8 %8, 0, !dbg !4000
  br i1 %tobool4, label %if.then5, label %if.end6, !dbg !4003

if.then5:                                         ; preds = %do.body
  call void @timevar_push_1(i32 110), !dbg !4000
  br label %if.end6, !dbg !4000

if.end6:                                          ; preds = %if.then5, %do.body
  br label %do.end, !dbg !4003

do.end:                                           ; preds = %if.end6
  %9 = load %struct.function*, %struct.function** %this_cfun, align 8, !dbg !4004
  call void @set_cfun(%struct.function* %9), !dbg !4005
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4006
  %callees = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %10, i32 0, i32 1, !dbg !4008
  %11 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callees, align 8, !dbg !4008
  store %struct.cgraph_edge* %11, %struct.cgraph_edge** %e, align 8, !dbg !4009
  br label %for.cond, !dbg !4010

for.cond:                                         ; preds = %for.inc, %do.end
  %12 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4011
  %tobool7 = icmp ne %struct.cgraph_edge* %12, null, !dbg !4013
  br i1 %tobool7, label %for.body, label %for.end, !dbg !4013

for.body:                                         ; preds = %for.cond
  %13 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4014
  %aux = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %13, i32 0, i32 8, !dbg !4016
  %14 = load i8*, i8** %aux, align 8, !dbg !4016
  %tobool8 = icmp ne i8* %14, null, !dbg !4014
  br i1 %tobool8, label %if.then9, label %if.end13, !dbg !4017

if.then9:                                         ; preds = %for.body
  %15 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4018
  %caller = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %15, i32 0, i32 1, !dbg !4020
  %16 = load %struct.cgraph_node*, %struct.cgraph_node** %caller, align 8, !dbg !4020
  %call = call i8* @cgraph_node_name(%struct.cgraph_node* %16), !dbg !4021
  %call10 = call i8* @identifier_to_locale(i8* %call), !dbg !4022
  %17 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4023
  %callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %17, i32 0, i32 2, !dbg !4024
  %18 = load %struct.cgraph_node*, %struct.cgraph_node** %callee, align 8, !dbg !4024
  %call11 = call i8* @cgraph_node_name(%struct.cgraph_node* %18), !dbg !4025
  %call12 = call i8* @identifier_to_locale(i8* %call11), !dbg !4026
  call void (i8*, ...) @error(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.3, i64 0, i64 0), i8* %call10, i8* %call12), !dbg !4027
  store i8 1, i8* %error_found, align 1, !dbg !4028
  br label %if.end13, !dbg !4029

if.end13:                                         ; preds = %if.then9, %for.body
  br label %for.inc, !dbg !4016

for.inc:                                          ; preds = %if.end13
  %19 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4030
  %next_callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %19, i32 0, i32 6, !dbg !4031
  %20 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_callee, align 8, !dbg !4031
  store %struct.cgraph_edge* %20, %struct.cgraph_edge** %e, align 8, !dbg !4032
  br label %for.cond, !dbg !4033, !llvm.loop !4034

for.end:                                          ; preds = %for.cond
  %21 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4036
  %count = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %21, i32 0, i32 23, !dbg !4038
  %22 = load i64, i64* %count, align 8, !dbg !4038
  %cmp = icmp slt i64 %22, 0, !dbg !4039
  br i1 %cmp, label %if.then14, label %if.end15, !dbg !4040

if.then14:                                        ; preds = %for.end
  call void (i8*, ...) @error(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.4, i64 0, i64 0)), !dbg !4041
  store i8 1, i8* %error_found, align 1, !dbg !4043
  br label %if.end15, !dbg !4044

if.end15:                                         ; preds = %if.then14, %for.end
  %23 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4045
  %global = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %23, i32 0, i32 19, !dbg !4047
  %inlined_to = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global, i32 0, i32 2, !dbg !4048
  %24 = load %struct.cgraph_node*, %struct.cgraph_node** %inlined_to, align 8, !dbg !4048
  %tobool16 = icmp ne %struct.cgraph_node* %24, null, !dbg !4045
  br i1 %tobool16, label %land.lhs.true, label %if.end19, !dbg !4049

land.lhs.true:                                    ; preds = %if.end15
  %25 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4050
  %local = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %25, i32 0, i32 18, !dbg !4051
  %externally_visible = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local, i32 0, i32 2, !dbg !4052
  %bf.load = load i8, i8* %externally_visible, align 8, !dbg !4052
  %bf.lshr = lshr i8 %bf.load, 1, !dbg !4052
  %bf.clear = and i8 %bf.lshr, 1, !dbg !4052
  %bf.cast = zext i8 %bf.clear to i32, !dbg !4052
  %tobool17 = icmp ne i32 %bf.cast, 0, !dbg !4050
  br i1 %tobool17, label %if.then18, label %if.end19, !dbg !4053

if.then18:                                        ; preds = %land.lhs.true
  call void (i8*, ...) @error(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.5, i64 0, i64 0)), !dbg !4054
  store i8 1, i8* %error_found, align 1, !dbg !4056
  br label %if.end19, !dbg !4057

if.end19:                                         ; preds = %if.then18, %land.lhs.true, %if.end15
  %26 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4058
  %global20 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %26, i32 0, i32 19, !dbg !4060
  %inlined_to21 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global20, i32 0, i32 2, !dbg !4061
  %27 = load %struct.cgraph_node*, %struct.cgraph_node** %inlined_to21, align 8, !dbg !4061
  %tobool22 = icmp ne %struct.cgraph_node* %27, null, !dbg !4058
  br i1 %tobool22, label %land.lhs.true23, label %if.end30, !dbg !4062

land.lhs.true23:                                  ; preds = %if.end19
  %28 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4063
  %address_taken = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %28, i32 0, i32 27, !dbg !4064
  %bf.load24 = load i16, i16* %address_taken, align 4, !dbg !4064
  %bf.lshr25 = lshr i16 %bf.load24, 1, !dbg !4064
  %bf.clear26 = and i16 %bf.lshr25, 1, !dbg !4064
  %bf.cast27 = zext i16 %bf.clear26 to i32, !dbg !4064
  %tobool28 = icmp ne i32 %bf.cast27, 0, !dbg !4063
  br i1 %tobool28, label %if.then29, label %if.end30, !dbg !4065

if.then29:                                        ; preds = %land.lhs.true23
  call void (i8*, ...) @error(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.6, i64 0, i64 0)), !dbg !4066
  store i8 1, i8* %error_found, align 1, !dbg !4068
  br label %if.end30, !dbg !4069

if.end30:                                         ; preds = %if.then29, %land.lhs.true23, %if.end19
  %29 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4070
  %global31 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %29, i32 0, i32 19, !dbg !4072
  %inlined_to32 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global31, i32 0, i32 2, !dbg !4073
  %30 = load %struct.cgraph_node*, %struct.cgraph_node** %inlined_to32, align 8, !dbg !4073
  %tobool33 = icmp ne %struct.cgraph_node* %30, null, !dbg !4070
  br i1 %tobool33, label %land.lhs.true34, label %if.end40, !dbg !4074

land.lhs.true34:                                  ; preds = %if.end30
  %31 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4075
  %needed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %31, i32 0, i32 27, !dbg !4076
  %bf.load35 = load i16, i16* %needed, align 4, !dbg !4076
  %bf.clear36 = and i16 %bf.load35, 1, !dbg !4076
  %bf.cast37 = zext i16 %bf.clear36 to i32, !dbg !4076
  %tobool38 = icmp ne i32 %bf.cast37, 0, !dbg !4075
  br i1 %tobool38, label %if.then39, label %if.end40, !dbg !4077

if.then39:                                        ; preds = %land.lhs.true34
  call void (i8*, ...) @error(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0)), !dbg !4078
  store i8 1, i8* %error_found, align 1, !dbg !4080
  br label %if.end40, !dbg !4081

if.end40:                                         ; preds = %if.then39, %land.lhs.true34, %if.end30
  %32 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4082
  %callers = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %32, i32 0, i32 2, !dbg !4084
  %33 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callers, align 8, !dbg !4084
  store %struct.cgraph_edge* %33, %struct.cgraph_edge** %e, align 8, !dbg !4085
  br label %for.cond41, !dbg !4086

for.cond41:                                       ; preds = %for.inc106, %if.end40
  %34 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4087
  %tobool42 = icmp ne %struct.cgraph_edge* %34, null, !dbg !4089
  br i1 %tobool42, label %for.body43, label %for.end108, !dbg !4089

for.body43:                                       ; preds = %for.cond41
  %35 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4090
  %count44 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %35, i32 0, i32 0, !dbg !4093
  %36 = load i64, i64* %count44, align 8, !dbg !4093
  %cmp45 = icmp slt i64 %36, 0, !dbg !4094
  br i1 %cmp45, label %if.then46, label %if.end47, !dbg !4095

if.then46:                                        ; preds = %for.body43
  call void (i8*, ...) @error(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.8, i64 0, i64 0)), !dbg !4096
  store i8 1, i8* %error_found, align 1, !dbg !4098
  br label %if.end47, !dbg !4099

if.end47:                                         ; preds = %if.then46, %for.body43
  %37 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4100
  %frequency = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %37, i32 0, i32 11, !dbg !4102
  %38 = load i32, i32* %frequency, align 8, !dbg !4102
  %cmp48 = icmp slt i32 %38, 0, !dbg !4103
  br i1 %cmp48, label %if.then49, label %if.end50, !dbg !4104

if.then49:                                        ; preds = %if.end47
  call void (i8*, ...) @error(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.9, i64 0, i64 0)), !dbg !4105
  store i8 1, i8* %error_found, align 1, !dbg !4107
  br label %if.end50, !dbg !4108

if.end50:                                         ; preds = %if.then49, %if.end47
  %39 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4109
  %frequency51 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %39, i32 0, i32 11, !dbg !4111
  %40 = load i32, i32* %frequency51, align 8, !dbg !4111
  %cmp52 = icmp sgt i32 %40, 100000, !dbg !4112
  br i1 %cmp52, label %if.then53, label %if.end54, !dbg !4113

if.then53:                                        ; preds = %if.end50
  call void (i8*, ...) @error(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.10, i64 0, i64 0)), !dbg !4114
  store i8 1, i8* %error_found, align 1, !dbg !4116
  br label %if.end54, !dbg !4117

if.end54:                                         ; preds = %if.then53, %if.end50
  %41 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4118
  %caller55 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %41, i32 0, i32 1, !dbg !4120
  %42 = load %struct.cgraph_node*, %struct.cgraph_node** %caller55, align 8, !dbg !4120
  %decl56 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %42, i32 0, i32 0, !dbg !4121
  %43 = load %union.tree_node*, %union.tree_node** %decl56, align 8, !dbg !4121
  %call57 = call zeroext i8 @gimple_has_body_p(%union.tree_node* %43), !dbg !4122
  %conv = zext i8 %call57 to i32, !dbg !4122
  %tobool58 = icmp ne i32 %conv, 0, !dbg !4122
  br i1 %tobool58, label %land.lhs.true59, label %if.end79, !dbg !4123

land.lhs.true59:                                  ; preds = %if.end54
  %44 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4124
  %caller60 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %44, i32 0, i32 1, !dbg !4125
  %45 = load %struct.cgraph_node*, %struct.cgraph_node** %caller60, align 8, !dbg !4125
  %global61 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %45, i32 0, i32 19, !dbg !4126
  %inlined_to62 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global61, i32 0, i32 2, !dbg !4127
  %46 = load %struct.cgraph_node*, %struct.cgraph_node** %inlined_to62, align 8, !dbg !4127
  %tobool63 = icmp ne %struct.cgraph_node* %46, null, !dbg !4124
  br i1 %tobool63, label %if.end79, label %land.lhs.true64, !dbg !4128

land.lhs.true64:                                  ; preds = %land.lhs.true59
  %47 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4129
  %frequency65 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %47, i32 0, i32 11, !dbg !4130
  %48 = load i32, i32* %frequency65, align 8, !dbg !4130
  %49 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4131
  %caller66 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %49, i32 0, i32 1, !dbg !4132
  %50 = load %struct.cgraph_node*, %struct.cgraph_node** %caller66, align 8, !dbg !4132
  %decl67 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %50, i32 0, i32 0, !dbg !4133
  %51 = load %union.tree_node*, %union.tree_node** %decl67, align 8, !dbg !4133
  %52 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4134
  %call_stmt = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %52, i32 0, i32 7, !dbg !4135
  %53 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt, align 8, !dbg !4135
  %call68 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %53), !dbg !4136
  %call69 = call i32 @compute_call_stmt_bb_frequency(%union.tree_node* %51, %struct.basic_block_def* %call68), !dbg !4137
  %cmp70 = icmp ne i32 %48, %call69, !dbg !4138
  br i1 %cmp70, label %if.then72, label %if.end79, !dbg !4139

if.then72:                                        ; preds = %land.lhs.true64
  %54 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4140
  %frequency73 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %54, i32 0, i32 11, !dbg !4142
  %55 = load i32, i32* %frequency73, align 8, !dbg !4142
  %56 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4143
  %caller74 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %56, i32 0, i32 1, !dbg !4144
  %57 = load %struct.cgraph_node*, %struct.cgraph_node** %caller74, align 8, !dbg !4144
  %decl75 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %57, i32 0, i32 0, !dbg !4145
  %58 = load %union.tree_node*, %union.tree_node** %decl75, align 8, !dbg !4145
  %59 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4146
  %call_stmt76 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %59, i32 0, i32 7, !dbg !4147
  %60 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt76, align 8, !dbg !4147
  %call77 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %60), !dbg !4148
  %call78 = call i32 @compute_call_stmt_bb_frequency(%union.tree_node* %58, %struct.basic_block_def* %call77), !dbg !4149
  call void (i8*, ...) @error(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.11, i64 0, i64 0), i32 %55, i32 %call78), !dbg !4150
  store i8 1, i8* %error_found, align 1, !dbg !4151
  br label %if.end79, !dbg !4152

if.end79:                                         ; preds = %if.then72, %land.lhs.true64, %land.lhs.true59, %if.end54
  %61 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4153
  %inline_failed = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %61, i32 0, i32 9, !dbg !4155
  %62 = load i32, i32* %inline_failed, align 8, !dbg !4155
  %tobool80 = icmp ne i32 %62, 0, !dbg !4153
  br i1 %tobool80, label %if.else, label %if.then81, !dbg !4156

if.then81:                                        ; preds = %if.end79
  %63 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4157
  %global82 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %63, i32 0, i32 19, !dbg !4160
  %inlined_to83 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global82, i32 0, i32 2, !dbg !4161
  %64 = load %struct.cgraph_node*, %struct.cgraph_node** %inlined_to83, align 8, !dbg !4161
  %65 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4162
  %caller84 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %65, i32 0, i32 1, !dbg !4163
  %66 = load %struct.cgraph_node*, %struct.cgraph_node** %caller84, align 8, !dbg !4163
  %global85 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %66, i32 0, i32 19, !dbg !4164
  %inlined_to86 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global85, i32 0, i32 2, !dbg !4165
  %67 = load %struct.cgraph_node*, %struct.cgraph_node** %inlined_to86, align 8, !dbg !4165
  %tobool87 = icmp ne %struct.cgraph_node* %67, null, !dbg !4162
  br i1 %tobool87, label %cond.true, label %cond.false, !dbg !4162

cond.true:                                        ; preds = %if.then81
  %68 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4166
  %caller88 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %68, i32 0, i32 1, !dbg !4167
  %69 = load %struct.cgraph_node*, %struct.cgraph_node** %caller88, align 8, !dbg !4167
  %global89 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %69, i32 0, i32 19, !dbg !4168
  %inlined_to90 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global89, i32 0, i32 2, !dbg !4169
  %70 = load %struct.cgraph_node*, %struct.cgraph_node** %inlined_to90, align 8, !dbg !4169
  br label %cond.end, !dbg !4162

cond.false:                                       ; preds = %if.then81
  %71 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4170
  %caller91 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %71, i32 0, i32 1, !dbg !4171
  %72 = load %struct.cgraph_node*, %struct.cgraph_node** %caller91, align 8, !dbg !4171
  br label %cond.end, !dbg !4162

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.cgraph_node* [ %70, %cond.true ], [ %72, %cond.false ], !dbg !4162
  %cmp92 = icmp ne %struct.cgraph_node* %64, %cond, !dbg !4172
  br i1 %cmp92, label %if.then94, label %if.end95, !dbg !4173

if.then94:                                        ; preds = %cond.end
  call void (i8*, ...) @error(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.12, i64 0, i64 0)), !dbg !4174
  store i8 1, i8* %error_found, align 1, !dbg !4176
  br label %if.end95, !dbg !4177

if.end95:                                         ; preds = %if.then94, %cond.end
  %73 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4178
  %callers96 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %73, i32 0, i32 2, !dbg !4180
  %74 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callers96, align 8, !dbg !4180
  %next_caller = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %74, i32 0, i32 4, !dbg !4181
  %75 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_caller, align 8, !dbg !4181
  %tobool97 = icmp ne %struct.cgraph_edge* %75, null, !dbg !4178
  br i1 %tobool97, label %if.then98, label %if.end99, !dbg !4182

if.then98:                                        ; preds = %if.end95
  call void (i8*, ...) @error(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.13, i64 0, i64 0)), !dbg !4183
  store i8 1, i8* %error_found, align 1, !dbg !4185
  br label %if.end99, !dbg !4186

if.end99:                                         ; preds = %if.then98, %if.end95
  br label %if.end105, !dbg !4187

if.else:                                          ; preds = %if.end79
  %76 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4188
  %global100 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %76, i32 0, i32 19, !dbg !4190
  %inlined_to101 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global100, i32 0, i32 2, !dbg !4191
  %77 = load %struct.cgraph_node*, %struct.cgraph_node** %inlined_to101, align 8, !dbg !4191
  %tobool102 = icmp ne %struct.cgraph_node* %77, null, !dbg !4188
  br i1 %tobool102, label %if.then103, label %if.end104, !dbg !4192

if.then103:                                       ; preds = %if.else
  call void (i8*, ...) @error(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.14, i64 0, i64 0)), !dbg !4193
  store i8 1, i8* %error_found, align 1, !dbg !4195
  br label %if.end104, !dbg !4196

if.end104:                                        ; preds = %if.then103, %if.else
  br label %if.end105

if.end105:                                        ; preds = %if.end104, %if.end99
  br label %for.inc106, !dbg !4197

for.inc106:                                       ; preds = %if.end105
  %78 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4198
  %next_caller107 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %78, i32 0, i32 4, !dbg !4199
  %79 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_caller107, align 8, !dbg !4199
  store %struct.cgraph_edge* %79, %struct.cgraph_edge** %e, align 8, !dbg !4200
  br label %for.cond41, !dbg !4201, !llvm.loop !4202

for.end108:                                       ; preds = %for.cond41
  %80 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4204
  %callers109 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %80, i32 0, i32 2, !dbg !4206
  %81 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callers109, align 8, !dbg !4206
  %tobool110 = icmp ne %struct.cgraph_edge* %81, null, !dbg !4204
  br i1 %tobool110, label %if.end116, label %land.lhs.true111, !dbg !4207

land.lhs.true111:                                 ; preds = %for.end108
  %82 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4208
  %global112 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %82, i32 0, i32 19, !dbg !4209
  %inlined_to113 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global112, i32 0, i32 2, !dbg !4210
  %83 = load %struct.cgraph_node*, %struct.cgraph_node** %inlined_to113, align 8, !dbg !4210
  %tobool114 = icmp ne %struct.cgraph_node* %83, null, !dbg !4208
  br i1 %tobool114, label %if.then115, label %if.end116, !dbg !4211

if.then115:                                       ; preds = %land.lhs.true111
  call void (i8*, ...) @error(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.15, i64 0, i64 0)), !dbg !4212
  store i8 1, i8* %error_found, align 1, !dbg !4214
  br label %if.end116, !dbg !4215

if.end116:                                        ; preds = %if.then115, %land.lhs.true111, %for.end108
  %84 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4216
  %global117 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %84, i32 0, i32 19, !dbg !4218
  %inlined_to118 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global117, i32 0, i32 2, !dbg !4219
  %85 = load %struct.cgraph_node*, %struct.cgraph_node** %inlined_to118, align 8, !dbg !4219
  %86 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4220
  %cmp119 = icmp eq %struct.cgraph_node* %85, %86, !dbg !4221
  br i1 %cmp119, label %if.then121, label %if.end122, !dbg !4222

if.then121:                                       ; preds = %if.end116
  call void (i8*, ...) @error(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.16, i64 0, i64 0)), !dbg !4223
  store i8 1, i8* %error_found, align 1, !dbg !4225
  br label %if.end122, !dbg !4226

if.end122:                                        ; preds = %if.then121, %if.end116
  %87 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4227
  %decl123 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %87, i32 0, i32 0, !dbg !4229
  %88 = load %union.tree_node*, %union.tree_node** %decl123, align 8, !dbg !4229
  %call124 = call %struct.cgraph_node* @cgraph_node(%union.tree_node* %88), !dbg !4230
  %tobool125 = icmp ne %struct.cgraph_node* %call124, null, !dbg !4230
  br i1 %tobool125, label %if.end127, label %if.then126, !dbg !4231

if.then126:                                       ; preds = %if.end122
  call void (i8*, ...) @error(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.17, i64 0, i64 0)), !dbg !4232
  store i8 1, i8* %error_found, align 1, !dbg !4234
  br label %if.end127, !dbg !4235

if.end127:                                        ; preds = %if.then126, %if.end122
  %89 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4236
  %clone_of = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %89, i32 0, i32 12, !dbg !4238
  %90 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of, align 8, !dbg !4238
  %tobool128 = icmp ne %struct.cgraph_node* %90, null, !dbg !4236
  br i1 %tobool128, label %if.then129, label %if.end143, !dbg !4239

if.then129:                                       ; preds = %if.end127
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %n, metadata !4240, metadata !DIExpression()), !dbg !4242
  %91 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4243
  %clone_of130 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %91, i32 0, i32 12, !dbg !4245
  %92 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of130, align 8, !dbg !4245
  %clones = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %92, i32 0, i32 11, !dbg !4246
  %93 = load %struct.cgraph_node*, %struct.cgraph_node** %clones, align 8, !dbg !4246
  store %struct.cgraph_node* %93, %struct.cgraph_node** %n, align 8, !dbg !4247
  br label %for.cond131, !dbg !4248

for.cond131:                                      ; preds = %for.inc138, %if.then129
  %94 = load %struct.cgraph_node*, %struct.cgraph_node** %n, align 8, !dbg !4249
  %tobool132 = icmp ne %struct.cgraph_node* %94, null, !dbg !4251
  br i1 %tobool132, label %for.body133, label %for.end139, !dbg !4251

for.body133:                                      ; preds = %for.cond131
  %95 = load %struct.cgraph_node*, %struct.cgraph_node** %n, align 8, !dbg !4252
  %96 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4254
  %cmp134 = icmp eq %struct.cgraph_node* %95, %96, !dbg !4255
  br i1 %cmp134, label %if.then136, label %if.end137, !dbg !4256

if.then136:                                       ; preds = %for.body133
  br label %for.end139, !dbg !4257

if.end137:                                        ; preds = %for.body133
  br label %for.inc138, !dbg !4254

for.inc138:                                       ; preds = %if.end137
  %97 = load %struct.cgraph_node*, %struct.cgraph_node** %n, align 8, !dbg !4258
  %next_sibling_clone = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %97, i32 0, i32 9, !dbg !4259
  %98 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone, align 8, !dbg !4259
  store %struct.cgraph_node* %98, %struct.cgraph_node** %n, align 8, !dbg !4260
  br label %for.cond131, !dbg !4261, !llvm.loop !4262

for.end139:                                       ; preds = %if.then136, %for.cond131
  %99 = load %struct.cgraph_node*, %struct.cgraph_node** %n, align 8, !dbg !4264
  %tobool140 = icmp ne %struct.cgraph_node* %99, null, !dbg !4264
  br i1 %tobool140, label %if.end142, label %if.then141, !dbg !4266

if.then141:                                       ; preds = %for.end139
  call void (i8*, ...) @error(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.18, i64 0, i64 0)), !dbg !4267
  store i8 1, i8* %error_found, align 1, !dbg !4269
  br label %if.end142, !dbg !4270

if.end142:                                        ; preds = %if.then141, %for.end139
  br label %if.end143, !dbg !4271

if.end143:                                        ; preds = %if.end142, %if.end127
  %100 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4272
  %clones144 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %100, i32 0, i32 11, !dbg !4274
  %101 = load %struct.cgraph_node*, %struct.cgraph_node** %clones144, align 8, !dbg !4274
  %tobool145 = icmp ne %struct.cgraph_node* %101, null, !dbg !4272
  br i1 %tobool145, label %if.then146, label %if.end163, !dbg !4275

if.then146:                                       ; preds = %if.end143
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %n147, metadata !4276, metadata !DIExpression()), !dbg !4278
  %102 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4279
  %clones148 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %102, i32 0, i32 11, !dbg !4281
  %103 = load %struct.cgraph_node*, %struct.cgraph_node** %clones148, align 8, !dbg !4281
  store %struct.cgraph_node* %103, %struct.cgraph_node** %n147, align 8, !dbg !4282
  br label %for.cond149, !dbg !4283

for.cond149:                                      ; preds = %for.inc157, %if.then146
  %104 = load %struct.cgraph_node*, %struct.cgraph_node** %n147, align 8, !dbg !4284
  %tobool150 = icmp ne %struct.cgraph_node* %104, null, !dbg !4286
  br i1 %tobool150, label %for.body151, label %for.end159, !dbg !4286

for.body151:                                      ; preds = %for.cond149
  %105 = load %struct.cgraph_node*, %struct.cgraph_node** %n147, align 8, !dbg !4287
  %clone_of152 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %105, i32 0, i32 12, !dbg !4289
  %106 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of152, align 8, !dbg !4289
  %107 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4290
  %cmp153 = icmp ne %struct.cgraph_node* %106, %107, !dbg !4291
  br i1 %cmp153, label %if.then155, label %if.end156, !dbg !4292

if.then155:                                       ; preds = %for.body151
  br label %for.end159, !dbg !4293

if.end156:                                        ; preds = %for.body151
  br label %for.inc157, !dbg !4290

for.inc157:                                       ; preds = %if.end156
  %108 = load %struct.cgraph_node*, %struct.cgraph_node** %n147, align 8, !dbg !4294
  %next_sibling_clone158 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %108, i32 0, i32 9, !dbg !4295
  %109 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone158, align 8, !dbg !4295
  store %struct.cgraph_node* %109, %struct.cgraph_node** %n147, align 8, !dbg !4296
  br label %for.cond149, !dbg !4297, !llvm.loop !4298

for.end159:                                       ; preds = %if.then155, %for.cond149
  %110 = load %struct.cgraph_node*, %struct.cgraph_node** %n147, align 8, !dbg !4300
  %tobool160 = icmp ne %struct.cgraph_node* %110, null, !dbg !4300
  br i1 %tobool160, label %if.then161, label %if.end162, !dbg !4302

if.then161:                                       ; preds = %for.end159
  call void (i8*, ...) @error(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.19, i64 0, i64 0)), !dbg !4303
  store i8 1, i8* %error_found, align 1, !dbg !4305
  br label %if.end162, !dbg !4306

if.end162:                                        ; preds = %if.then161, %for.end159
  br label %if.end163, !dbg !4307

if.end163:                                        ; preds = %if.end162, %if.end143
  %111 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4308
  %prev_sibling_clone = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %111, i32 0, i32 10, !dbg !4310
  %112 = load %struct.cgraph_node*, %struct.cgraph_node** %prev_sibling_clone, align 8, !dbg !4310
  %tobool164 = icmp ne %struct.cgraph_node* %112, null, !dbg !4308
  br i1 %tobool164, label %land.lhs.true168, label %lor.lhs.false165, !dbg !4311

lor.lhs.false165:                                 ; preds = %if.end163
  %113 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4312
  %next_sibling_clone166 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %113, i32 0, i32 9, !dbg !4313
  %114 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone166, align 8, !dbg !4313
  %tobool167 = icmp ne %struct.cgraph_node* %114, null, !dbg !4312
  br i1 %tobool167, label %land.lhs.true168, label %if.end172, !dbg !4314

land.lhs.true168:                                 ; preds = %lor.lhs.false165, %if.end163
  %115 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4315
  %clone_of169 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %115, i32 0, i32 12, !dbg !4316
  %116 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of169, align 8, !dbg !4316
  %tobool170 = icmp ne %struct.cgraph_node* %116, null, !dbg !4315
  br i1 %tobool170, label %if.end172, label %if.then171, !dbg !4317

if.then171:                                       ; preds = %land.lhs.true168
  call void (i8*, ...) @error(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.20, i64 0, i64 0)), !dbg !4318
  store i8 1, i8* %error_found, align 1, !dbg !4320
  br label %if.end172, !dbg !4321

if.end172:                                        ; preds = %if.then171, %land.lhs.true168, %lor.lhs.false165
  %117 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4322
  %prev_sibling_clone173 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %117, i32 0, i32 10, !dbg !4324
  %118 = load %struct.cgraph_node*, %struct.cgraph_node** %prev_sibling_clone173, align 8, !dbg !4324
  %tobool174 = icmp ne %struct.cgraph_node* %118, null, !dbg !4322
  br i1 %tobool174, label %if.end184, label %land.lhs.true175, !dbg !4325

land.lhs.true175:                                 ; preds = %if.end172
  %119 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4326
  %clone_of176 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %119, i32 0, i32 12, !dbg !4327
  %120 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of176, align 8, !dbg !4327
  %tobool177 = icmp ne %struct.cgraph_node* %120, null, !dbg !4326
  br i1 %tobool177, label %land.lhs.true178, label %if.end184, !dbg !4328

land.lhs.true178:                                 ; preds = %land.lhs.true175
  %121 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4329
  %clone_of179 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %121, i32 0, i32 12, !dbg !4330
  %122 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of179, align 8, !dbg !4330
  %clones180 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %122, i32 0, i32 11, !dbg !4331
  %123 = load %struct.cgraph_node*, %struct.cgraph_node** %clones180, align 8, !dbg !4331
  %124 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4332
  %cmp181 = icmp ne %struct.cgraph_node* %123, %124, !dbg !4333
  br i1 %cmp181, label %if.then183, label %if.end184, !dbg !4334

if.then183:                                       ; preds = %land.lhs.true178
  call void (i8*, ...) @error(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.21, i64 0, i64 0)), !dbg !4335
  store i8 1, i8* %error_found, align 1, !dbg !4337
  br label %if.end184, !dbg !4338

if.end184:                                        ; preds = %if.then183, %land.lhs.true178, %land.lhs.true175, %if.end172
  %125 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4339
  %prev_sibling_clone185 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %125, i32 0, i32 10, !dbg !4341
  %126 = load %struct.cgraph_node*, %struct.cgraph_node** %prev_sibling_clone185, align 8, !dbg !4341
  %tobool186 = icmp ne %struct.cgraph_node* %126, null, !dbg !4339
  br i1 %tobool186, label %land.lhs.true187, label %if.end193, !dbg !4342

land.lhs.true187:                                 ; preds = %if.end184
  %127 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4343
  %prev_sibling_clone188 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %127, i32 0, i32 10, !dbg !4344
  %128 = load %struct.cgraph_node*, %struct.cgraph_node** %prev_sibling_clone188, align 8, !dbg !4344
  %next_sibling_clone189 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %128, i32 0, i32 9, !dbg !4345
  %129 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone189, align 8, !dbg !4345
  %130 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4346
  %cmp190 = icmp ne %struct.cgraph_node* %129, %130, !dbg !4347
  br i1 %cmp190, label %if.then192, label %if.end193, !dbg !4348

if.then192:                                       ; preds = %land.lhs.true187
  call void (i8*, ...) @error(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.22, i64 0, i64 0)), !dbg !4349
  store i8 1, i8* %error_found, align 1, !dbg !4351
  br label %if.end193, !dbg !4352

if.end193:                                        ; preds = %if.then192, %land.lhs.true187, %if.end184
  %131 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4353
  %analyzed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %131, i32 0, i32 27, !dbg !4355
  %bf.load194 = load i16, i16* %analyzed, align 4, !dbg !4355
  %bf.lshr195 = lshr i16 %bf.load194, 5, !dbg !4355
  %bf.clear196 = and i16 %bf.lshr195, 1, !dbg !4355
  %bf.cast197 = zext i16 %bf.clear196 to i32, !dbg !4355
  %tobool198 = icmp ne i32 %bf.cast197, 0, !dbg !4353
  br i1 %tobool198, label %land.lhs.true199, label %if.end319, !dbg !4356

land.lhs.true199:                                 ; preds = %if.end193
  %132 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4357
  %decl200 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %132, i32 0, i32 0, !dbg !4358
  %133 = load %union.tree_node*, %union.tree_node** %decl200, align 8, !dbg !4358
  %call201 = call zeroext i8 @gimple_has_body_p(%union.tree_node* %133), !dbg !4359
  %conv202 = zext i8 %call201 to i32, !dbg !4359
  %tobool203 = icmp ne i32 %conv202, 0, !dbg !4359
  br i1 %tobool203, label %land.lhs.true204, label %if.end319, !dbg !4360

land.lhs.true204:                                 ; preds = %land.lhs.true199
  %134 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4361
  %decl205 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %134, i32 0, i32 0, !dbg !4361
  %135 = load %union.tree_node*, %union.tree_node** %decl205, align 8, !dbg !4361
  %base = bitcast %union.tree_node* %135 to %struct.tree_base*, !dbg !4361
  %136 = bitcast %struct.tree_base* %base to i64*, !dbg !4361
  %bf.load206 = load i64, i64* %136, align 8, !dbg !4361
  %bf.lshr207 = lshr i64 %bf.load206, 22, !dbg !4361
  %bf.clear208 = and i64 %bf.lshr207, 1, !dbg !4361
  %bf.cast209 = trunc i64 %bf.clear208 to i32, !dbg !4361
  %tobool210 = icmp ne i32 %bf.cast209, 0, !dbg !4361
  br i1 %tobool210, label %if.end319, label %land.lhs.true211, !dbg !4362

land.lhs.true211:                                 ; preds = %land.lhs.true204
  %137 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4363
  %decl212 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %137, i32 0, i32 0, !dbg !4363
  %138 = load %union.tree_node*, %union.tree_node** %decl212, align 8, !dbg !4363
  %decl_common = bitcast %union.tree_node* %138 to %struct.tree_decl_common*, !dbg !4363
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !4363
  %139 = bitcast i40* %decl_flag_1 to i64*, !dbg !4363
  %bf.load213 = load i64, i64* %139, align 8, !dbg !4363
  %bf.lshr214 = lshr i64 %bf.load213, 25, !dbg !4363
  %bf.clear215 = and i64 %bf.lshr214, 1, !dbg !4363
  %bf.cast216 = trunc i64 %bf.clear215 to i32, !dbg !4363
  %tobool217 = icmp ne i32 %bf.cast216, 0, !dbg !4363
  br i1 %tobool217, label %lor.lhs.false218, label %land.lhs.true222, !dbg !4364

lor.lhs.false218:                                 ; preds = %land.lhs.true211
  %140 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4365
  %global219 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %140, i32 0, i32 19, !dbg !4366
  %inlined_to220 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global219, i32 0, i32 2, !dbg !4367
  %141 = load %struct.cgraph_node*, %struct.cgraph_node** %inlined_to220, align 8, !dbg !4367
  %tobool221 = icmp ne %struct.cgraph_node* %141, null, !dbg !4365
  br i1 %tobool221, label %land.lhs.true222, label %if.end319, !dbg !4368

land.lhs.true222:                                 ; preds = %lor.lhs.false218, %land.lhs.true211
  %142 = load i32, i32* @flag_wpa, align 4, !dbg !4369
  %tobool223 = icmp ne i32 %142, 0, !dbg !4369
  br i1 %tobool223, label %if.end319, label %if.then224, !dbg !4370

if.then224:                                       ; preds = %land.lhs.true222
  %143 = load %struct.function*, %struct.function** %this_cfun, align 8, !dbg !4371
  %cfg = getelementptr inbounds %struct.function, %struct.function* %143, i32 0, i32 1, !dbg !4374
  %144 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4374
  %tobool225 = icmp ne %struct.control_flow_graph* %144, null, !dbg !4371
  br i1 %tobool225, label %if.then226, label %if.else293, !dbg !4375

if.then226:                                       ; preds = %if.then224
  call void @llvm.dbg.declare(metadata %struct.pointer_set_t** %visited_nodes, metadata !4376, metadata !DIExpression()), !dbg !4380
  %call227 = call %struct.pointer_set_t* @pointer_set_create(), !dbg !4381
  store %struct.pointer_set_t* %call227, %struct.pointer_set_t** %visited_nodes, align 8, !dbg !4380
  %145 = load %struct.function*, %struct.function** %this_cfun, align 8, !dbg !4382
  %cfg228 = getelementptr inbounds %struct.function, %struct.function* %145, i32 0, i32 1, !dbg !4382
  %146 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg228, align 8, !dbg !4382
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %146, i32 0, i32 0, !dbg !4382
  %147 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4382
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %147, i32 0, i32 6, !dbg !4382
  %148 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !4382
  store %struct.basic_block_def* %148, %struct.basic_block_def** %this_block, align 8, !dbg !4382
  br label %for.cond229, !dbg !4382

for.cond229:                                      ; preds = %for.inc290, %if.then226
  %149 = load %struct.basic_block_def*, %struct.basic_block_def** %this_block, align 8, !dbg !4384
  %150 = load %struct.function*, %struct.function** %this_cfun, align 8, !dbg !4384
  %cfg230 = getelementptr inbounds %struct.function, %struct.function* %150, i32 0, i32 1, !dbg !4384
  %151 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg230, align 8, !dbg !4384
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %151, i32 0, i32 1, !dbg !4384
  %152 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !4384
  %cmp231 = icmp ne %struct.basic_block_def* %149, %152, !dbg !4384
  br i1 %cmp231, label %for.body233, label %for.end292, !dbg !4382

for.body233:                                      ; preds = %for.cond229
  %153 = load %struct.basic_block_def*, %struct.basic_block_def** %this_block, align 8, !dbg !4386
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %153), !dbg !4388
  %154 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4388
  %155 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4388
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %154, i8* align 8 %155, i64 24, i1 false), !dbg !4388
  br label %for.cond234, !dbg !4389

for.cond234:                                      ; preds = %for.inc288, %for.body233
  %call235 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4390
  %tobool236 = icmp ne i8 %call235, 0, !dbg !4392
  %lnot = xor i1 %tobool236, true, !dbg !4392
  br i1 %lnot, label %for.body237, label %for.end289, !dbg !4393

for.body237:                                      ; preds = %for.cond234
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !4394, metadata !DIExpression()), !dbg !4396
  %call238 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4397
  store %union.gimple_statement_d* %call238, %union.gimple_statement_d** %stmt, align 8, !dbg !4396
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl239, metadata !4398, metadata !DIExpression()), !dbg !4399
  %156 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4400
  %call240 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %156), !dbg !4402
  %conv241 = zext i8 %call240 to i32, !dbg !4402
  %tobool242 = icmp ne i32 %conv241, 0, !dbg !4402
  br i1 %tobool242, label %land.lhs.true243, label %if.end287, !dbg !4403

land.lhs.true243:                                 ; preds = %for.body237
  %157 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4404
  %call244 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %157), !dbg !4405
  store %union.tree_node* %call244, %union.tree_node** %decl239, align 8, !dbg !4406
  %tobool245 = icmp ne %union.tree_node* %call244, null, !dbg !4406
  br i1 %tobool245, label %if.then246, label %if.end287, !dbg !4407

if.then246:                                       ; preds = %land.lhs.true243
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %e247, metadata !4408, metadata !DIExpression()), !dbg !4410
  %158 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4411
  %159 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4412
  %call248 = call %struct.cgraph_edge* @cgraph_edge(%struct.cgraph_node* %158, %union.gimple_statement_d* %159), !dbg !4413
  store %struct.cgraph_edge* %call248, %struct.cgraph_edge** %e247, align 8, !dbg !4410
  %160 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e247, align 8, !dbg !4414
  %tobool249 = icmp ne %struct.cgraph_edge* %160, null, !dbg !4414
  br i1 %tobool249, label %if.then250, label %if.else285, !dbg !4416

if.then250:                                       ; preds = %if.then246
  %161 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e247, align 8, !dbg !4417
  %aux251 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %161, i32 0, i32 8, !dbg !4420
  %162 = load i8*, i8** %aux251, align 8, !dbg !4420
  %tobool252 = icmp ne i8* %162, null, !dbg !4417
  br i1 %tobool252, label %if.then253, label %if.end254, !dbg !4421

if.then253:                                       ; preds = %if.then250
  call void (i8*, ...) @error(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.23, i64 0, i64 0)), !dbg !4422
  %163 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4424
  call void @debug_gimple_stmt(%union.gimple_statement_d* %163), !dbg !4425
  store i8 1, i8* %error_found, align 1, !dbg !4426
  br label %if.end254, !dbg !4427

if.end254:                                        ; preds = %if.then253, %if.then250
  %164 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e247, align 8, !dbg !4428
  %callee255 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %164, i32 0, i32 2, !dbg !4430
  %165 = load %struct.cgraph_node*, %struct.cgraph_node** %callee255, align 8, !dbg !4430
  %same_body_alias = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %165, i32 0, i32 27, !dbg !4431
  %bf.load256 = load i16, i16* %same_body_alias, align 4, !dbg !4431
  %bf.lshr257 = lshr i16 %bf.load256, 9, !dbg !4431
  %bf.clear258 = and i16 %bf.lshr257, 1, !dbg !4431
  %bf.cast259 = zext i16 %bf.clear258 to i32, !dbg !4431
  %tobool260 = icmp ne i32 %bf.cast259, 0, !dbg !4428
  br i1 %tobool260, label %if.then261, label %if.else264, !dbg !4432

if.then261:                                       ; preds = %if.end254
  call void (i8*, ...) @error(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.24, i64 0, i64 0)), !dbg !4433
  %166 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e247, align 8, !dbg !4435
  %callee262 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %166, i32 0, i32 2, !dbg !4436
  %167 = load %struct.cgraph_node*, %struct.cgraph_node** %callee262, align 8, !dbg !4436
  %decl263 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %167, i32 0, i32 0, !dbg !4437
  %168 = load %union.tree_node*, %union.tree_node** %decl263, align 8, !dbg !4437
  call void @debug_tree(%union.tree_node* %168), !dbg !4438
  store i8 1, i8* %error_found, align 1, !dbg !4439
  br label %if.end283, !dbg !4440

if.else264:                                       ; preds = %if.end254
  %169 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4441
  %global265 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %169, i32 0, i32 19, !dbg !4443
  %inlined_to266 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global265, i32 0, i32 2, !dbg !4444
  %170 = load %struct.cgraph_node*, %struct.cgraph_node** %inlined_to266, align 8, !dbg !4444
  %tobool267 = icmp ne %struct.cgraph_node* %170, null, !dbg !4441
  br i1 %tobool267, label %if.end282, label %land.lhs.true268, !dbg !4445

land.lhs.true268:                                 ; preds = %if.else264
  %171 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e247, align 8, !dbg !4446
  %callee269 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %171, i32 0, i32 2, !dbg !4447
  %172 = load %struct.cgraph_node*, %struct.cgraph_node** %callee269, align 8, !dbg !4447
  %global270 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %172, i32 0, i32 19, !dbg !4448
  %inlined_to271 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global270, i32 0, i32 2, !dbg !4449
  %173 = load %struct.cgraph_node*, %struct.cgraph_node** %inlined_to271, align 8, !dbg !4449
  %tobool272 = icmp ne %struct.cgraph_node* %173, null, !dbg !4446
  br i1 %tobool272, label %if.end282, label %land.lhs.true273, !dbg !4450

land.lhs.true273:                                 ; preds = %land.lhs.true268
  %174 = load %union.tree_node*, %union.tree_node** %decl239, align 8, !dbg !4451
  %call274 = call %struct.cgraph_node* @cgraph_node(%union.tree_node* %174), !dbg !4452
  %175 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e247, align 8, !dbg !4453
  %callee275 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %175, i32 0, i32 2, !dbg !4454
  %176 = load %struct.cgraph_node*, %struct.cgraph_node** %callee275, align 8, !dbg !4454
  %call276 = call zeroext i8 @clone_of_p(%struct.cgraph_node* %call274, %struct.cgraph_node* %176), !dbg !4455
  %tobool277 = icmp ne i8 %call276, 0, !dbg !4455
  br i1 %tobool277, label %if.end282, label %if.then278, !dbg !4456

if.then278:                                       ; preds = %land.lhs.true273
  call void (i8*, ...) @error(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.25, i64 0, i64 0)), !dbg !4457
  %177 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e247, align 8, !dbg !4459
  %callee279 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %177, i32 0, i32 2, !dbg !4460
  %178 = load %struct.cgraph_node*, %struct.cgraph_node** %callee279, align 8, !dbg !4460
  %decl280 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %178, i32 0, i32 0, !dbg !4461
  %179 = load %union.tree_node*, %union.tree_node** %decl280, align 8, !dbg !4461
  call void @debug_tree(%union.tree_node* %179), !dbg !4462
  %180 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !4463
  %call281 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %180, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.26, i64 0, i64 0)), !dbg !4464
  %181 = load %union.tree_node*, %union.tree_node** %decl239, align 8, !dbg !4465
  call void @debug_tree(%union.tree_node* %181), !dbg !4466
  store i8 1, i8* %error_found, align 1, !dbg !4467
  br label %if.end282, !dbg !4468

if.end282:                                        ; preds = %if.then278, %land.lhs.true273, %land.lhs.true268, %if.else264
  br label %if.end283

if.end283:                                        ; preds = %if.end282, %if.then261
  %182 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e247, align 8, !dbg !4469
  %aux284 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %182, i32 0, i32 8, !dbg !4470
  store i8* inttoptr (i64 1 to i8*), i8** %aux284, align 8, !dbg !4471
  br label %if.end286, !dbg !4472

if.else285:                                       ; preds = %if.then246
  call void (i8*, ...) @error(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.27, i64 0, i64 0)), !dbg !4473
  %183 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4475
  call void @debug_gimple_stmt(%union.gimple_statement_d* %183), !dbg !4476
  store i8 1, i8* %error_found, align 1, !dbg !4477
  br label %if.end286

if.end286:                                        ; preds = %if.else285, %if.end283
  br label %if.end287, !dbg !4478

if.end287:                                        ; preds = %if.end286, %land.lhs.true243, %for.body237
  br label %for.inc288, !dbg !4479

for.inc288:                                       ; preds = %if.end287
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !4480
  br label %for.cond234, !dbg !4481, !llvm.loop !4482

for.end289:                                       ; preds = %for.cond234
  br label %for.inc290, !dbg !4483

for.inc290:                                       ; preds = %for.end289
  %184 = load %struct.basic_block_def*, %struct.basic_block_def** %this_block, align 8, !dbg !4384
  %next_bb291 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %184, i32 0, i32 6, !dbg !4384
  %185 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb291, align 8, !dbg !4384
  store %struct.basic_block_def* %185, %struct.basic_block_def** %this_block, align 8, !dbg !4384
  br label %for.cond229, !dbg !4384, !llvm.loop !4484

for.end292:                                       ; preds = %for.cond229
  %186 = load %struct.pointer_set_t*, %struct.pointer_set_t** %visited_nodes, align 8, !dbg !4486
  call void @pointer_set_destroy(%struct.pointer_set_t* %186), !dbg !4487
  br label %if.end294, !dbg !4488

if.else293:                                       ; preds = %if.then224
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0), i32 792, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !4489
  br label %if.end294

if.end294:                                        ; preds = %if.else293, %for.end292
  %187 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4490
  %callees295 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %187, i32 0, i32 1, !dbg !4492
  %188 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callees295, align 8, !dbg !4492
  store %struct.cgraph_edge* %188, %struct.cgraph_edge** %e, align 8, !dbg !4493
  br label %for.cond296, !dbg !4494

for.cond296:                                      ; preds = %for.inc316, %if.end294
  %189 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4495
  %tobool297 = icmp ne %struct.cgraph_edge* %189, null, !dbg !4497
  br i1 %tobool297, label %for.body298, label %for.end318, !dbg !4497

for.body298:                                      ; preds = %for.cond296
  %190 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4498
  %aux299 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %190, i32 0, i32 8, !dbg !4501
  %191 = load i8*, i8** %aux299, align 8, !dbg !4501
  %tobool300 = icmp ne i8* %191, null, !dbg !4498
  br i1 %tobool300, label %if.end314, label %land.lhs.true301, !dbg !4502

land.lhs.true301:                                 ; preds = %for.body298
  %192 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4503
  %indirect_call = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %192, i32 0, i32 14, !dbg !4504
  %bf.load302 = load i8, i8* %indirect_call, align 2, !dbg !4504
  %bf.clear303 = and i8 %bf.load302, 1, !dbg !4504
  %bf.cast304 = zext i8 %bf.clear303 to i32, !dbg !4504
  %tobool305 = icmp ne i32 %bf.cast304, 0, !dbg !4503
  br i1 %tobool305, label %if.end314, label %if.then306, !dbg !4505

if.then306:                                       ; preds = %land.lhs.true301
  %193 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4506
  %caller307 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %193, i32 0, i32 1, !dbg !4508
  %194 = load %struct.cgraph_node*, %struct.cgraph_node** %caller307, align 8, !dbg !4508
  %call308 = call i8* @cgraph_node_name(%struct.cgraph_node* %194), !dbg !4509
  %call309 = call i8* @identifier_to_locale(i8* %call308), !dbg !4510
  %195 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4511
  %callee310 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %195, i32 0, i32 2, !dbg !4512
  %196 = load %struct.cgraph_node*, %struct.cgraph_node** %callee310, align 8, !dbg !4512
  %call311 = call i8* @cgraph_node_name(%struct.cgraph_node* %196), !dbg !4513
  %call312 = call i8* @identifier_to_locale(i8* %call311), !dbg !4514
  call void (i8*, ...) @error(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.28, i64 0, i64 0), i8* %call309, i8* %call312), !dbg !4515
  %197 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4516
  %call_stmt313 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %197, i32 0, i32 7, !dbg !4517
  %198 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt313, align 8, !dbg !4517
  call void @debug_gimple_stmt(%union.gimple_statement_d* %198), !dbg !4518
  store i8 1, i8* %error_found, align 1, !dbg !4519
  br label %if.end314, !dbg !4520

if.end314:                                        ; preds = %if.then306, %land.lhs.true301, %for.body298
  %199 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4521
  %aux315 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %199, i32 0, i32 8, !dbg !4522
  store i8* null, i8** %aux315, align 8, !dbg !4523
  br label %for.inc316, !dbg !4524

for.inc316:                                       ; preds = %if.end314
  %200 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4525
  %next_callee317 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %200, i32 0, i32 6, !dbg !4526
  %201 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_callee317, align 8, !dbg !4526
  store %struct.cgraph_edge* %201, %struct.cgraph_edge** %e, align 8, !dbg !4527
  br label %for.cond296, !dbg !4528, !llvm.loop !4529

for.end318:                                       ; preds = %for.cond296
  br label %if.end319, !dbg !4531

if.end319:                                        ; preds = %for.end318, %land.lhs.true222, %lor.lhs.false218, %land.lhs.true204, %land.lhs.true199, %if.end193
  %202 = load i8, i8* %error_found, align 1, !dbg !4532
  %tobool320 = icmp ne i8 %202, 0, !dbg !4532
  br i1 %tobool320, label %if.then321, label %if.end322, !dbg !4534

if.then321:                                       ; preds = %if.end319
  %203 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !4535
  %204 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4537
  call void @dump_cgraph_node(%struct._IO_FILE* %203, %struct.cgraph_node* %204), !dbg !4538
  call void (i8*, ...) @internal_error(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.29, i64 0, i64 0)), !dbg !4539
  br label %if.end322, !dbg !4540

if.end322:                                        ; preds = %if.then321, %if.end319
  %205 = load %struct.function*, %struct.function** %saved_cfun, align 8, !dbg !4541
  call void @set_cfun(%struct.function* %205), !dbg !4542
  br label %do.body323, !dbg !4543

do.body323:                                       ; preds = %if.end322
  %206 = load i8, i8* @timevar_enable, align 1, !dbg !4544
  %tobool324 = icmp ne i8 %206, 0, !dbg !4544
  br i1 %tobool324, label %if.then325, label %if.end326, !dbg !4547

if.then325:                                       ; preds = %do.body323
  call void @timevar_pop_1(i32 110), !dbg !4544
  br label %if.end326, !dbg !4544

if.end326:                                        ; preds = %if.then325, %do.body323
  br label %do.end327, !dbg !4547

do.end327:                                        ; preds = %if.then, %if.end326
  ret void, !dbg !4548
}

declare dso_local void @timevar_push_1(i32) #2

declare dso_local void @set_cfun(%struct.function*) #2

declare dso_local void @error(i8*, ...) #2

declare dso_local i8* @identifier_to_locale(i8*) #2

declare dso_local i8* @cgraph_node_name(%struct.cgraph_node*) #2

declare dso_local zeroext i8 @gimple_has_body_p(%union.tree_node*) #2

declare dso_local i32 @compute_call_stmt_bb_frequency(%union.tree_node*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %g) #0 !dbg !4549 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !4553, metadata !DIExpression()), !dbg !4554
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4555
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !4556
  %bb = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 4, !dbg !4557
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4557
  ret %struct.basic_block_def* %1, !dbg !4558
}

declare dso_local %struct.pointer_set_t* @pointer_set_create() #2

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_start_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !4559 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4562, metadata !DIExpression()), !dbg !4563
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !4564, metadata !DIExpression()), !dbg !4565
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !4566, metadata !DIExpression()), !dbg !4567
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4568
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !4569
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !4570
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !4571
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %1), !dbg !4572
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !4573
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !4574
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !4575
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !4576
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !4577
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4578
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !4579
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !4580
  ret void, !dbg !4581
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !4582 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !4585, metadata !DIExpression()), !dbg !4586
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !4587
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !4587
  %cmp = icmp eq %struct.gimple_seq_node_d* %0, null, !dbg !4588
  %conv = zext i1 %cmp to i32, !dbg !4588
  %conv1 = trunc i32 %conv to i8, !dbg !4589
  ret i8 %conv1, !dbg !4590
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !4591 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !4594, metadata !DIExpression()), !dbg !4595
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !4596
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !4596
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i32 0, i32 0, !dbg !4597
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4597
  ret %union.gimple_statement_d* %1, !dbg !4598
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_call(%union.gimple_statement_d* %gs) #0 !dbg !4599 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4602, metadata !DIExpression()), !dbg !4603
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4604
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !4605
  %cmp = icmp eq i32 %call, 8, !dbg !4606
  %conv = zext i1 %cmp to i32, !dbg !4606
  %conv1 = trunc i32 %conv to i8, !dbg !4605
  ret i8 %conv1, !dbg !4607
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %gs) #0 !dbg !4608 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4611, metadata !DIExpression()), !dbg !4612
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr, metadata !4613, metadata !DIExpression()), !dbg !4614
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4615
  %call = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %0), !dbg !4616
  store %union.tree_node* %call, %union.tree_node** %addr, align 8, !dbg !4614
  %1 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !4617
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !4617
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !4617
  %bf.load = load i64, i64* %2, align 8, !dbg !4617
  %bf.clear = and i64 %bf.load, 65535, !dbg !4617
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4617
  %cmp = icmp eq i32 %bf.cast, 121, !dbg !4619
  br i1 %cmp, label %if.then, label %if.end, !dbg !4620

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !4621
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !4621
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !4621
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !4621
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !4621
  store %union.tree_node* %4, %union.tree_node** %retval, align 8, !dbg !4622
  br label %return, !dbg !4622

if.end:                                           ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4623
  br label %return, !dbg !4623

return:                                           ; preds = %if.end, %if.then
  %5 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !4624
  ret %union.tree_node* %5, !dbg !4624
}

declare dso_local %struct.cgraph_edge* @cgraph_edge(%struct.cgraph_node*, %union.gimple_statement_d*) #2

declare dso_local void @debug_gimple_stmt(%union.gimple_statement_d*) #2

declare dso_local void @debug_tree(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @clone_of_p(%struct.cgraph_node* %node, %struct.cgraph_node* %node2) #0 !dbg !4625 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  %node2.addr = alloca %struct.cgraph_node*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !4628, metadata !DIExpression()), !dbg !4629
  store %struct.cgraph_node* %node2, %struct.cgraph_node** %node2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node2.addr, metadata !4630, metadata !DIExpression()), !dbg !4631
  br label %while.cond, !dbg !4632

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4633
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %node2.addr, align 8, !dbg !4634
  %cmp = icmp ne %struct.cgraph_node* %0, %1, !dbg !4635
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !4636

land.rhs:                                         ; preds = %while.cond
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %node2.addr, align 8, !dbg !4637
  %tobool = icmp ne %struct.cgraph_node* %2, null, !dbg !4636
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %3 = phi i1 [ false, %while.cond ], [ %tobool, %land.rhs ], !dbg !4638
  br i1 %3, label %while.body, label %while.end, !dbg !4632

while.body:                                       ; preds = %land.end
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %node2.addr, align 8, !dbg !4639
  %clone_of = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %4, i32 0, i32 12, !dbg !4640
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of, align 8, !dbg !4640
  store %struct.cgraph_node* %5, %struct.cgraph_node** %node2.addr, align 8, !dbg !4641
  br label %while.cond, !dbg !4632, !llvm.loop !4642

while.end:                                        ; preds = %land.end
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %node2.addr, align 8, !dbg !4643
  %cmp1 = icmp ne %struct.cgraph_node* %6, null, !dbg !4644
  %conv = zext i1 %cmp1 to i32, !dbg !4644
  %conv2 = trunc i32 %conv to i8, !dbg !4643
  ret i8 %conv2, !dbg !4645
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_next(%struct.gimple_stmt_iterator* %i) #0 !dbg !4646 {
entry:
  %i.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %i.addr, metadata !4650, metadata !DIExpression()), !dbg !4651
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !4652
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %0, i32 0, i32 0, !dbg !4653
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !4653
  %next = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 2, !dbg !4654
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %next, align 8, !dbg !4654
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !4655
  %ptr1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %3, i32 0, i32 0, !dbg !4656
  store %struct.gimple_seq_node_d* %2, %struct.gimple_seq_node_d** %ptr1, align 8, !dbg !4657
  ret void, !dbg !4658
}

declare dso_local void @pointer_set_destroy(%struct.pointer_set_t*) #2

declare dso_local void @dump_cgraph_node(%struct._IO_FILE*, %struct.cgraph_node*) #2

declare dso_local void @internal_error(i8*, ...) #2

declare dso_local void @timevar_pop_1(i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @verify_cgraph() #0 !dbg !4659 {
entry:
  %node = alloca %struct.cgraph_node*, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node, metadata !4660, metadata !DIExpression()), !dbg !4661
  %0 = load %struct.diagnostic_context*, %struct.diagnostic_context** @global_dc, align 8, !dbg !4662
  %diagnostic_count = getelementptr inbounds %struct.diagnostic_context, %struct.diagnostic_context* %0, i32 0, i32 1, !dbg !4662
  %arrayidx = getelementptr inbounds [12 x i32], [12 x i32]* %diagnostic_count, i64 0, i64 5, !dbg !4662
  %1 = load i32, i32* %arrayidx, align 4, !dbg !4662
  %tobool = icmp ne i32 %1, 0, !dbg !4662
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !4664

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.diagnostic_context*, %struct.diagnostic_context** @global_dc, align 8, !dbg !4665
  %diagnostic_count1 = getelementptr inbounds %struct.diagnostic_context, %struct.diagnostic_context* %2, i32 0, i32 1, !dbg !4665
  %arrayidx2 = getelementptr inbounds [12 x i32], [12 x i32]* %diagnostic_count1, i64 0, i64 4, !dbg !4665
  %3 = load i32, i32* %arrayidx2, align 8, !dbg !4665
  %tobool3 = icmp ne i32 %3, 0, !dbg !4665
  br i1 %tobool3, label %if.then, label %if.end, !dbg !4666

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %for.end, !dbg !4667

if.end:                                           ; preds = %lor.lhs.false
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_nodes, align 8, !dbg !4668
  store %struct.cgraph_node* %4, %struct.cgraph_node** %node, align 8, !dbg !4670
  br label %for.cond, !dbg !4671

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4672
  %tobool4 = icmp ne %struct.cgraph_node* %5, null, !dbg !4674
  br i1 %tobool4, label %for.body, label %for.end, !dbg !4674

for.body:                                         ; preds = %for.cond
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4675
  call void @verify_cgraph_node(%struct.cgraph_node* %6), !dbg !4676
  br label %for.inc, !dbg !4676

for.inc:                                          ; preds = %for.body
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4677
  %next = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %7, i32 0, i32 3, !dbg !4678
  %8 = load %struct.cgraph_node*, %struct.cgraph_node** %next, align 8, !dbg !4678
  store %struct.cgraph_node* %8, %struct.cgraph_node** %node, align 8, !dbg !4679
  br label %for.cond, !dbg !4680, !llvm.loop !4681

for.end:                                          ; preds = %if.then, %for.cond
  ret void, !dbg !4683
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @cgraph_finalize_compilation_unit() #0 !dbg !4684 {
entry:
  br label %do.body, !dbg !4685

do.body:                                          ; preds = %entry
  %0 = load i8, i8* @timevar_enable, align 1, !dbg !4686
  %tobool = icmp ne i8 %0, 0, !dbg !4686
  br i1 %tobool, label %if.then, label %if.end, !dbg !4689

if.then:                                          ; preds = %do.body
  call void @timevar_push_1(i32 4), !dbg !4686
  br label %if.end, !dbg !4686

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end, !dbg !4689

do.end:                                           ; preds = %if.end
  call void @finalize_size_functions(), !dbg !4690
  call void @cgraph_build_cdtor_fns(), !dbg !4691
  call void @finish_aliases_1(), !dbg !4692
  %1 = load i32, i32* @quiet_flag, align 4, !dbg !4693
  %tobool1 = icmp ne i32 %1, 0, !dbg !4693
  br i1 %tobool1, label %if.end4, label %if.then2, !dbg !4695

if.then2:                                         ; preds = %do.end
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !4696
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.30, i64 0, i64 0)), !dbg !4698
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !4699
  %call3 = call i32 @fflush(%struct._IO_FILE* %3), !dbg !4700
  br label %if.end4, !dbg !4701

if.end4:                                          ; preds = %if.then2, %do.end
  call void @cgraph_analyze_functions(), !dbg !4702
  call void @finish_aliases_1(), !dbg !4703
  call void @cgraph_analyze_functions(), !dbg !4704
  call void @cgraph_optimize(), !dbg !4705
  br label %do.body5, !dbg !4706

do.body5:                                         ; preds = %if.end4
  %4 = load i8, i8* @timevar_enable, align 1, !dbg !4707
  %tobool6 = icmp ne i8 %4, 0, !dbg !4707
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !4710

if.then7:                                         ; preds = %do.body5
  call void @timevar_pop_1(i32 4), !dbg !4707
  br label %if.end8, !dbg !4707

if.end8:                                          ; preds = %if.then7, %do.body5
  br label %do.end9, !dbg !4710

do.end9:                                          ; preds = %if.end8
  ret void, !dbg !4711
}

declare dso_local void @finalize_size_functions() #2

; Function Attrs: noinline nounwind uwtable
define internal void @cgraph_build_cdtor_fns() #0 !dbg !4712 {
entry:
  %0 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** @static_ctors, align 8, !dbg !4713
  %tobool = icmp ne %struct.VEC_tree_gc* %0, null, !dbg !4713
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4713

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** @static_ctors, align 8, !dbg !4713
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %1, i32 0, i32 0, !dbg !4713
  br label %cond.end, !dbg !4713

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4713

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4713
  %call = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !4713
  %cmp = icmp eq i32 %call, 0, !dbg !4713
  br i1 %cmp, label %if.end, label %if.then, !dbg !4715

if.then:                                          ; preds = %cond.end
  %2 = load i8, i8* getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 112), align 1, !dbg !4716
  %tobool1 = icmp ne i8 %2, 0, !dbg !4716
  br i1 %tobool1, label %cond.true2, label %cond.false3, !dbg !4716

cond.true2:                                       ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0), i32 291, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !4716
  br label %cond.end4, !dbg !4716

cond.false3:                                      ; preds = %if.then
  br label %cond.end4, !dbg !4716

cond.end4:                                        ; preds = %cond.false3, %cond.true2
  %cond5 = phi i32 [ 0, %cond.true2 ], [ 0, %cond.false3 ], !dbg !4716
  %3 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** @static_ctors, align 8, !dbg !4718
  %tobool6 = icmp ne %struct.VEC_tree_gc* %3, null, !dbg !4718
  br i1 %tobool6, label %cond.true7, label %cond.false9, !dbg !4718

cond.true7:                                       ; preds = %cond.end4
  %4 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** @static_ctors, align 8, !dbg !4718
  %base8 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %4, i32 0, i32 0, !dbg !4718
  br label %cond.end10, !dbg !4718

cond.false9:                                      ; preds = %cond.end4
  br label %cond.end10, !dbg !4718

cond.end10:                                       ; preds = %cond.false9, %cond.true7
  %cond11 = phi %struct.VEC_tree_base* [ %base8, %cond.true7 ], [ null, %cond.false9 ], !dbg !4718
  %call12 = call %union.tree_node** @VEC_tree_base_address(%struct.VEC_tree_base* %cond11), !dbg !4718
  %5 = bitcast %union.tree_node** %call12 to i8*, !dbg !4718
  %6 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** @static_ctors, align 8, !dbg !4719
  %tobool13 = icmp ne %struct.VEC_tree_gc* %6, null, !dbg !4719
  br i1 %tobool13, label %cond.true14, label %cond.false16, !dbg !4719

cond.true14:                                      ; preds = %cond.end10
  %7 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** @static_ctors, align 8, !dbg !4719
  %base15 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %7, i32 0, i32 0, !dbg !4719
  br label %cond.end17, !dbg !4719

cond.false16:                                     ; preds = %cond.end10
  br label %cond.end17, !dbg !4719

cond.end17:                                       ; preds = %cond.false16, %cond.true14
  %cond18 = phi %struct.VEC_tree_base* [ %base15, %cond.true14 ], [ null, %cond.false16 ], !dbg !4719
  %call19 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond18), !dbg !4719
  %conv = zext i32 %call19 to i64, !dbg !4719
  call void @spec_qsort(i8* %5, i64 %conv, i64 8, i32 (i8*, i8*)* @compare_ctor), !dbg !4720
  %8 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** @static_ctors, align 8, !dbg !4721
  %tobool20 = icmp ne %struct.VEC_tree_gc* %8, null, !dbg !4721
  br i1 %tobool20, label %cond.true21, label %cond.false23, !dbg !4721

cond.true21:                                      ; preds = %cond.end17
  %9 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** @static_ctors, align 8, !dbg !4721
  %base22 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %9, i32 0, i32 0, !dbg !4721
  br label %cond.end24, !dbg !4721

cond.false23:                                     ; preds = %cond.end17
  br label %cond.end24, !dbg !4721

cond.end24:                                       ; preds = %cond.false23, %cond.true21
  %cond25 = phi %struct.VEC_tree_base* [ %base22, %cond.true21 ], [ null, %cond.false23 ], !dbg !4721
  %call26 = call %union.tree_node** @VEC_tree_base_address(%struct.VEC_tree_base* %cond25), !dbg !4721
  %10 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** @static_ctors, align 8, !dbg !4722
  %tobool27 = icmp ne %struct.VEC_tree_gc* %10, null, !dbg !4722
  br i1 %tobool27, label %cond.true28, label %cond.false30, !dbg !4722

cond.true28:                                      ; preds = %cond.end24
  %11 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** @static_ctors, align 8, !dbg !4722
  %base29 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %11, i32 0, i32 0, !dbg !4722
  br label %cond.end31, !dbg !4722

cond.false30:                                     ; preds = %cond.end24
  br label %cond.end31, !dbg !4722

cond.end31:                                       ; preds = %cond.false30, %cond.true28
  %cond32 = phi %struct.VEC_tree_base* [ %base29, %cond.true28 ], [ null, %cond.false30 ], !dbg !4722
  %call33 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond32), !dbg !4722
  %conv34 = zext i32 %call33 to i64, !dbg !4722
  call void @build_cdtor(i8 zeroext 1, %union.tree_node** %call26, i64 %conv34), !dbg !4723
  %12 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** @static_ctors, align 8, !dbg !4724
  %tobool35 = icmp ne %struct.VEC_tree_gc* %12, null, !dbg !4724
  br i1 %tobool35, label %cond.true36, label %cond.false38, !dbg !4724

cond.true36:                                      ; preds = %cond.end31
  %13 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** @static_ctors, align 8, !dbg !4724
  %base37 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %13, i32 0, i32 0, !dbg !4724
  br label %cond.end39, !dbg !4724

cond.false38:                                     ; preds = %cond.end31
  br label %cond.end39, !dbg !4724

cond.end39:                                       ; preds = %cond.false38, %cond.true36
  %cond40 = phi %struct.VEC_tree_base* [ %base37, %cond.true36 ], [ null, %cond.false38 ], !dbg !4724
  call void @VEC_tree_base_truncate(%struct.VEC_tree_base* %cond40, i32 0), !dbg !4724
  br label %if.end, !dbg !4725

if.end:                                           ; preds = %cond.end39, %cond.end
  %14 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** @static_dtors, align 8, !dbg !4726
  %tobool41 = icmp ne %struct.VEC_tree_gc* %14, null, !dbg !4726
  br i1 %tobool41, label %cond.true42, label %cond.false44, !dbg !4726

cond.true42:                                      ; preds = %if.end
  %15 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** @static_dtors, align 8, !dbg !4726
  %base43 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %15, i32 0, i32 0, !dbg !4726
  br label %cond.end45, !dbg !4726

cond.false44:                                     ; preds = %if.end
  br label %cond.end45, !dbg !4726

cond.end45:                                       ; preds = %cond.false44, %cond.true42
  %cond46 = phi %struct.VEC_tree_base* [ %base43, %cond.true42 ], [ null, %cond.false44 ], !dbg !4726
  %call47 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond46), !dbg !4726
  %cmp48 = icmp eq i32 %call47, 0, !dbg !4726
  br i1 %cmp48, label %if.end92, label %if.then50, !dbg !4728

if.then50:                                        ; preds = %cond.end45
  %16 = load i8, i8* getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 112), align 1, !dbg !4729
  %tobool51 = icmp ne i8 %16, 0, !dbg !4729
  br i1 %tobool51, label %cond.true52, label %cond.false53, !dbg !4729

cond.true52:                                      ; preds = %if.then50
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0), i32 311, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !4729
  br label %cond.end54, !dbg !4729

cond.false53:                                     ; preds = %if.then50
  br label %cond.end54, !dbg !4729

cond.end54:                                       ; preds = %cond.false53, %cond.true52
  %cond55 = phi i32 [ 0, %cond.true52 ], [ 0, %cond.false53 ], !dbg !4729
  %17 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** @static_dtors, align 8, !dbg !4731
  %tobool56 = icmp ne %struct.VEC_tree_gc* %17, null, !dbg !4731
  br i1 %tobool56, label %cond.true57, label %cond.false59, !dbg !4731

cond.true57:                                      ; preds = %cond.end54
  %18 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** @static_dtors, align 8, !dbg !4731
  %base58 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %18, i32 0, i32 0, !dbg !4731
  br label %cond.end60, !dbg !4731

cond.false59:                                     ; preds = %cond.end54
  br label %cond.end60, !dbg !4731

cond.end60:                                       ; preds = %cond.false59, %cond.true57
  %cond61 = phi %struct.VEC_tree_base* [ %base58, %cond.true57 ], [ null, %cond.false59 ], !dbg !4731
  %call62 = call %union.tree_node** @VEC_tree_base_address(%struct.VEC_tree_base* %cond61), !dbg !4731
  %19 = bitcast %union.tree_node** %call62 to i8*, !dbg !4731
  %20 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** @static_dtors, align 8, !dbg !4732
  %tobool63 = icmp ne %struct.VEC_tree_gc* %20, null, !dbg !4732
  br i1 %tobool63, label %cond.true64, label %cond.false66, !dbg !4732

cond.true64:                                      ; preds = %cond.end60
  %21 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** @static_dtors, align 8, !dbg !4732
  %base65 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %21, i32 0, i32 0, !dbg !4732
  br label %cond.end67, !dbg !4732

cond.false66:                                     ; preds = %cond.end60
  br label %cond.end67, !dbg !4732

cond.end67:                                       ; preds = %cond.false66, %cond.true64
  %cond68 = phi %struct.VEC_tree_base* [ %base65, %cond.true64 ], [ null, %cond.false66 ], !dbg !4732
  %call69 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond68), !dbg !4732
  %conv70 = zext i32 %call69 to i64, !dbg !4732
  call void @spec_qsort(i8* %19, i64 %conv70, i64 8, i32 (i8*, i8*)* @compare_dtor), !dbg !4733
  %22 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** @static_dtors, align 8, !dbg !4734
  %tobool71 = icmp ne %struct.VEC_tree_gc* %22, null, !dbg !4734
  br i1 %tobool71, label %cond.true72, label %cond.false74, !dbg !4734

cond.true72:                                      ; preds = %cond.end67
  %23 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** @static_dtors, align 8, !dbg !4734
  %base73 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %23, i32 0, i32 0, !dbg !4734
  br label %cond.end75, !dbg !4734

cond.false74:                                     ; preds = %cond.end67
  br label %cond.end75, !dbg !4734

cond.end75:                                       ; preds = %cond.false74, %cond.true72
  %cond76 = phi %struct.VEC_tree_base* [ %base73, %cond.true72 ], [ null, %cond.false74 ], !dbg !4734
  %call77 = call %union.tree_node** @VEC_tree_base_address(%struct.VEC_tree_base* %cond76), !dbg !4734
  %24 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** @static_dtors, align 8, !dbg !4735
  %tobool78 = icmp ne %struct.VEC_tree_gc* %24, null, !dbg !4735
  br i1 %tobool78, label %cond.true79, label %cond.false81, !dbg !4735

cond.true79:                                      ; preds = %cond.end75
  %25 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** @static_dtors, align 8, !dbg !4735
  %base80 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %25, i32 0, i32 0, !dbg !4735
  br label %cond.end82, !dbg !4735

cond.false81:                                     ; preds = %cond.end75
  br label %cond.end82, !dbg !4735

cond.end82:                                       ; preds = %cond.false81, %cond.true79
  %cond83 = phi %struct.VEC_tree_base* [ %base80, %cond.true79 ], [ null, %cond.false81 ], !dbg !4735
  %call84 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond83), !dbg !4735
  %conv85 = zext i32 %call84 to i64, !dbg !4735
  call void @build_cdtor(i8 zeroext 0, %union.tree_node** %call77, i64 %conv85), !dbg !4736
  %26 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** @static_dtors, align 8, !dbg !4737
  %tobool86 = icmp ne %struct.VEC_tree_gc* %26, null, !dbg !4737
  br i1 %tobool86, label %cond.true87, label %cond.false89, !dbg !4737

cond.true87:                                      ; preds = %cond.end82
  %27 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** @static_dtors, align 8, !dbg !4737
  %base88 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %27, i32 0, i32 0, !dbg !4737
  br label %cond.end90, !dbg !4737

cond.false89:                                     ; preds = %cond.end82
  br label %cond.end90, !dbg !4737

cond.end90:                                       ; preds = %cond.false89, %cond.true87
  %cond91 = phi %struct.VEC_tree_base* [ %base88, %cond.true87 ], [ null, %cond.false89 ], !dbg !4737
  call void @VEC_tree_base_truncate(%struct.VEC_tree_base* %cond91, i32 0), !dbg !4737
  br label %if.end92, !dbg !4738

if.end92:                                         ; preds = %cond.end90, %cond.end45
  ret void, !dbg !4739
}

declare dso_local void @finish_aliases_1() #2

declare dso_local i32 @fflush(%struct._IO_FILE*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @cgraph_analyze_functions() #0 !dbg !3439 {
entry:
  %first_processed = alloca %struct.cgraph_node*, align 8
  %node = alloca %struct.cgraph_node*, align 8
  %next = alloca %struct.cgraph_node*, align 8
  %edge = alloca %struct.cgraph_edge*, align 8
  %decl = alloca %union.tree_node*, align 8
  %origin_node = alloca %struct.cgraph_node*, align 8
  %decl82 = alloca %union.tree_node*, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %first_processed, metadata !4740, metadata !DIExpression()), !dbg !4741
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_analyze_functions.first_analyzed, align 8, !dbg !4742
  store %struct.cgraph_node* %0, %struct.cgraph_node** %first_processed, align 8, !dbg !4741
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node, metadata !4743, metadata !DIExpression()), !dbg !4744
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %next, metadata !4745, metadata !DIExpression()), !dbg !4746
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %first_processed, align 8, !dbg !4747
  %2 = load %struct.varpool_node*, %struct.varpool_node** @cgraph_analyze_functions.first_analyzed_var, align 8, !dbg !4748
  call void @process_function_and_variable_attributes(%struct.cgraph_node* %1, %struct.varpool_node* %2), !dbg !4749
  %3 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_nodes, align 8, !dbg !4750
  store %struct.cgraph_node* %3, %struct.cgraph_node** %first_processed, align 8, !dbg !4751
  %4 = load %struct.varpool_node*, %struct.varpool_node** @varpool_nodes, align 8, !dbg !4752
  store %struct.varpool_node* %4, %struct.varpool_node** @cgraph_analyze_functions.first_analyzed_var, align 8, !dbg !4753
  %call = call zeroext i8 @varpool_analyze_pending_decls(), !dbg !4754
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !4755
  %tobool = icmp ne %struct._IO_FILE* %5, null, !dbg !4755
  br i1 %tobool, label %if.then, label %if.end8, !dbg !4757

if.then:                                          ; preds = %entry
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !4758
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.54, i64 0, i64 0)), !dbg !4760
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_nodes, align 8, !dbg !4761
  store %struct.cgraph_node* %7, %struct.cgraph_node** %node, align 8, !dbg !4763
  br label %for.cond, !dbg !4764

for.cond:                                         ; preds = %for.inc, %if.then
  %8 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4765
  %9 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_analyze_functions.first_analyzed, align 8, !dbg !4767
  %cmp = icmp ne %struct.cgraph_node* %8, %9, !dbg !4768
  br i1 %cmp, label %for.body, label %for.end, !dbg !4769

for.body:                                         ; preds = %for.cond
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4770
  %needed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %10, i32 0, i32 27, !dbg !4772
  %bf.load = load i16, i16* %needed, align 4, !dbg !4772
  %bf.clear = and i16 %bf.load, 1, !dbg !4772
  %bf.cast = zext i16 %bf.clear to i32, !dbg !4772
  %tobool2 = icmp ne i32 %bf.cast, 0, !dbg !4770
  br i1 %tobool2, label %if.then3, label %if.end, !dbg !4773

if.then3:                                         ; preds = %for.body
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !4774
  %12 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4775
  %call4 = call i8* @cgraph_node_name(%struct.cgraph_node* %12), !dbg !4776
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.55, i64 0, i64 0), i8* %call4), !dbg !4777
  br label %if.end, !dbg !4777

if.end:                                           ; preds = %if.then3, %for.body
  br label %for.inc, !dbg !4772

for.inc:                                          ; preds = %if.end
  %13 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4778
  %next6 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %13, i32 0, i32 3, !dbg !4779
  %14 = load %struct.cgraph_node*, %struct.cgraph_node** %next6, align 8, !dbg !4779
  store %struct.cgraph_node* %14, %struct.cgraph_node** %node, align 8, !dbg !4780
  br label %for.cond, !dbg !4781, !llvm.loop !4782

for.end:                                          ; preds = %for.cond
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !4784
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %15, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.48, i64 0, i64 0)), !dbg !4785
  br label %if.end8, !dbg !4786

if.end8:                                          ; preds = %for.end, %entry
  %call9 = call zeroext i8 @cgraph_process_new_functions(), !dbg !4787
  br label %while.cond, !dbg !4788

while.cond:                                       ; preds = %if.end52, %if.then14, %if.end8
  %16 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_nodes_queue, align 8, !dbg !4789
  %tobool10 = icmp ne %struct.cgraph_node* %16, null, !dbg !4788
  br i1 %tobool10, label %while.body, label %while.end, !dbg !4788

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %edge, metadata !4790, metadata !DIExpression()), !dbg !4792
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !4793, metadata !DIExpression()), !dbg !4794
  %17 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_nodes_queue, align 8, !dbg !4795
  %decl11 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %17, i32 0, i32 0, !dbg !4796
  %18 = load %union.tree_node*, %union.tree_node** %decl11, align 8, !dbg !4796
  store %union.tree_node* %18, %union.tree_node** %decl, align 8, !dbg !4794
  %19 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_nodes_queue, align 8, !dbg !4797
  store %struct.cgraph_node* %19, %struct.cgraph_node** %node, align 8, !dbg !4798
  %20 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_nodes_queue, align 8, !dbg !4799
  %next_needed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %20, i32 0, i32 8, !dbg !4800
  %21 = load %struct.cgraph_node*, %struct.cgraph_node** %next_needed, align 8, !dbg !4800
  store %struct.cgraph_node* %21, %struct.cgraph_node** @cgraph_nodes_queue, align 8, !dbg !4801
  %22 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4802
  %next_needed12 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %22, i32 0, i32 8, !dbg !4803
  store %struct.cgraph_node* null, %struct.cgraph_node** %next_needed12, align 8, !dbg !4804
  %23 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4805
  %function_decl = bitcast %union.tree_node* %23 to %struct.tree_function_decl*, !dbg !4805
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !4805
  %24 = load %struct.function*, %struct.function** %f, align 8, !dbg !4805
  %tobool13 = icmp ne %struct.function* %24, null, !dbg !4805
  br i1 %tobool13, label %if.end15, label %if.then14, !dbg !4807

if.then14:                                        ; preds = %while.body
  %25 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4808
  call void @cgraph_reset_node(%struct.cgraph_node* %25), !dbg !4810
  br label %while.cond, !dbg !4811, !llvm.loop !4812

if.end15:                                         ; preds = %while.body
  %26 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4814
  %analyzed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %26, i32 0, i32 27, !dbg !4816
  %bf.load16 = load i16, i16* %analyzed, align 4, !dbg !4816
  %bf.lshr = lshr i16 %bf.load16, 5, !dbg !4816
  %bf.clear17 = and i16 %bf.lshr, 1, !dbg !4816
  %bf.cast18 = zext i16 %bf.clear17 to i32, !dbg !4816
  %tobool19 = icmp ne i32 %bf.cast18, 0, !dbg !4814
  br i1 %tobool19, label %if.end21, label %if.then20, !dbg !4817

if.then20:                                        ; preds = %if.end15
  %27 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4818
  call void @cgraph_analyze_function(%struct.cgraph_node* %27), !dbg !4819
  br label %if.end21, !dbg !4819

if.end21:                                         ; preds = %if.then20, %if.end15
  %28 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4820
  %callees = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %28, i32 0, i32 1, !dbg !4822
  %29 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callees, align 8, !dbg !4822
  store %struct.cgraph_edge* %29, %struct.cgraph_edge** %edge, align 8, !dbg !4823
  br label %for.cond22, !dbg !4824

for.cond22:                                       ; preds = %for.inc33, %if.end21
  %30 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !4825
  %tobool23 = icmp ne %struct.cgraph_edge* %30, null, !dbg !4827
  br i1 %tobool23, label %for.body24, label %for.end34, !dbg !4827

for.body24:                                       ; preds = %for.cond22
  %31 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !4828
  %callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %31, i32 0, i32 2, !dbg !4830
  %32 = load %struct.cgraph_node*, %struct.cgraph_node** %callee, align 8, !dbg !4830
  %reachable = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %32, i32 0, i32 27, !dbg !4831
  %bf.load25 = load i16, i16* %reachable, align 4, !dbg !4831
  %bf.lshr26 = lshr i16 %bf.load25, 3, !dbg !4831
  %bf.clear27 = and i16 %bf.lshr26, 1, !dbg !4831
  %bf.cast28 = zext i16 %bf.clear27 to i32, !dbg !4831
  %tobool29 = icmp ne i32 %bf.cast28, 0, !dbg !4828
  br i1 %tobool29, label %if.end32, label %if.then30, !dbg !4832

if.then30:                                        ; preds = %for.body24
  %33 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !4833
  %callee31 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %33, i32 0, i32 2, !dbg !4834
  %34 = load %struct.cgraph_node*, %struct.cgraph_node** %callee31, align 8, !dbg !4834
  call void @cgraph_mark_reachable_node(%struct.cgraph_node* %34), !dbg !4835
  br label %if.end32, !dbg !4835

if.end32:                                         ; preds = %if.then30, %for.body24
  br label %for.inc33, !dbg !4831

for.inc33:                                        ; preds = %if.end32
  %35 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !4836
  %next_callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %35, i32 0, i32 6, !dbg !4837
  %36 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_callee, align 8, !dbg !4837
  store %struct.cgraph_edge* %36, %struct.cgraph_edge** %edge, align 8, !dbg !4838
  br label %for.cond22, !dbg !4839, !llvm.loop !4840

for.end34:                                        ; preds = %for.cond22
  %37 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4842
  %same_comdat_group = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %37, i32 0, i32 14, !dbg !4844
  %38 = load %struct.cgraph_node*, %struct.cgraph_node** %same_comdat_group, align 8, !dbg !4844
  %tobool35 = icmp ne %struct.cgraph_node* %38, null, !dbg !4842
  br i1 %tobool35, label %if.then36, label %if.end44, !dbg !4845

if.then36:                                        ; preds = %for.end34
  %39 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4846
  %same_comdat_group37 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %39, i32 0, i32 14, !dbg !4849
  %40 = load %struct.cgraph_node*, %struct.cgraph_node** %same_comdat_group37, align 8, !dbg !4849
  store %struct.cgraph_node* %40, %struct.cgraph_node** %next, align 8, !dbg !4850
  br label %for.cond38, !dbg !4851

for.cond38:                                       ; preds = %for.inc41, %if.then36
  %41 = load %struct.cgraph_node*, %struct.cgraph_node** %next, align 8, !dbg !4852
  %42 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4854
  %cmp39 = icmp ne %struct.cgraph_node* %41, %42, !dbg !4855
  br i1 %cmp39, label %for.body40, label %for.end43, !dbg !4856

for.body40:                                       ; preds = %for.cond38
  %43 = load %struct.cgraph_node*, %struct.cgraph_node** %next, align 8, !dbg !4857
  call void @cgraph_mark_reachable_node(%struct.cgraph_node* %43), !dbg !4858
  br label %for.inc41, !dbg !4858

for.inc41:                                        ; preds = %for.body40
  %44 = load %struct.cgraph_node*, %struct.cgraph_node** %next, align 8, !dbg !4859
  %same_comdat_group42 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %44, i32 0, i32 14, !dbg !4860
  %45 = load %struct.cgraph_node*, %struct.cgraph_node** %same_comdat_group42, align 8, !dbg !4860
  store %struct.cgraph_node* %45, %struct.cgraph_node** %next, align 8, !dbg !4861
  br label %for.cond38, !dbg !4862, !llvm.loop !4863

for.end43:                                        ; preds = %for.cond38
  br label %if.end44, !dbg !4865

if.end44:                                         ; preds = %for.end43, %for.end34
  %46 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4866
  %decl_common = bitcast %union.tree_node* %46 to %struct.tree_decl_common*, !dbg !4866
  %abstract_origin = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 7, !dbg !4866
  %47 = load %union.tree_node*, %union.tree_node** %abstract_origin, align 8, !dbg !4866
  %tobool45 = icmp ne %union.tree_node* %47, null, !dbg !4866
  br i1 %tobool45, label %if.then46, label %if.end52, !dbg !4868

if.then46:                                        ; preds = %if.end44
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %origin_node, metadata !4869, metadata !DIExpression()), !dbg !4871
  %48 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4872
  %decl_common47 = bitcast %union.tree_node* %48 to %struct.tree_decl_common*, !dbg !4872
  %abstract_origin48 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common47, i32 0, i32 7, !dbg !4872
  %49 = load %union.tree_node*, %union.tree_node** %abstract_origin48, align 8, !dbg !4872
  %call49 = call %struct.cgraph_node* @cgraph_node(%union.tree_node* %49), !dbg !4873
  store %struct.cgraph_node* %call49, %struct.cgraph_node** %origin_node, align 8, !dbg !4871
  %50 = load %struct.cgraph_node*, %struct.cgraph_node** %origin_node, align 8, !dbg !4874
  %abstract_and_needed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %50, i32 0, i32 27, !dbg !4875
  %bf.load50 = load i16, i16* %abstract_and_needed, align 4, !dbg !4876
  %bf.clear51 = and i16 %bf.load50, -5, !dbg !4876
  %bf.set = or i16 %bf.clear51, 4, !dbg !4876
  store i16 %bf.set, i16* %abstract_and_needed, align 4, !dbg !4876
  br label %if.end52, !dbg !4877

if.end52:                                         ; preds = %if.then46, %if.end44
  %51 = load %struct.cgraph_node*, %struct.cgraph_node** %first_processed, align 8, !dbg !4878
  %52 = load %struct.varpool_node*, %struct.varpool_node** @cgraph_analyze_functions.first_analyzed_var, align 8, !dbg !4879
  call void @process_function_and_variable_attributes(%struct.cgraph_node* %51, %struct.varpool_node* %52), !dbg !4880
  %53 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_nodes, align 8, !dbg !4881
  store %struct.cgraph_node* %53, %struct.cgraph_node** %first_processed, align 8, !dbg !4882
  %54 = load %struct.varpool_node*, %struct.varpool_node** @varpool_nodes, align 8, !dbg !4883
  store %struct.varpool_node* %54, %struct.varpool_node** @cgraph_analyze_functions.first_analyzed_var, align 8, !dbg !4884
  %call53 = call zeroext i8 @varpool_analyze_pending_decls(), !dbg !4885
  %call54 = call zeroext i8 @cgraph_process_new_functions(), !dbg !4886
  br label %while.cond, !dbg !4788, !llvm.loop !4812

while.end:                                        ; preds = %while.cond
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !4887
  %tobool55 = icmp ne %struct._IO_FILE* %55, null, !dbg !4887
  br i1 %tobool55, label %if.then56, label %if.end74, !dbg !4889

if.then56:                                        ; preds = %while.end
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !4890
  %call57 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %56, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.56, i64 0, i64 0)), !dbg !4892
  %57 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_nodes, align 8, !dbg !4893
  store %struct.cgraph_node* %57, %struct.cgraph_node** %node, align 8, !dbg !4895
  br label %for.cond58, !dbg !4896

for.cond58:                                       ; preds = %for.inc70, %if.then56
  %58 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4897
  %59 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_analyze_functions.first_analyzed, align 8, !dbg !4899
  %cmp59 = icmp ne %struct.cgraph_node* %58, %59, !dbg !4900
  br i1 %cmp59, label %for.body60, label %for.end72, !dbg !4901

for.body60:                                       ; preds = %for.cond58
  %60 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4902
  %needed61 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %60, i32 0, i32 27, !dbg !4904
  %bf.load62 = load i16, i16* %needed61, align 4, !dbg !4904
  %bf.clear63 = and i16 %bf.load62, 1, !dbg !4904
  %bf.cast64 = zext i16 %bf.clear63 to i32, !dbg !4904
  %tobool65 = icmp ne i32 %bf.cast64, 0, !dbg !4902
  br i1 %tobool65, label %if.then66, label %if.end69, !dbg !4905

if.then66:                                        ; preds = %for.body60
  %61 = load %struct._IO_FILE*, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !4906
  %62 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4907
  %call67 = call i8* @cgraph_node_name(%struct.cgraph_node* %62), !dbg !4908
  %call68 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %61, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.55, i64 0, i64 0), i8* %call67), !dbg !4909
  br label %if.end69, !dbg !4909

if.end69:                                         ; preds = %if.then66, %for.body60
  br label %for.inc70, !dbg !4904

for.inc70:                                        ; preds = %if.end69
  %63 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4910
  %next71 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %63, i32 0, i32 3, !dbg !4911
  %64 = load %struct.cgraph_node*, %struct.cgraph_node** %next71, align 8, !dbg !4911
  store %struct.cgraph_node* %64, %struct.cgraph_node** %node, align 8, !dbg !4912
  br label %for.cond58, !dbg !4913, !llvm.loop !4914

for.end72:                                        ; preds = %for.cond58
  %65 = load %struct._IO_FILE*, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !4916
  %call73 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %65, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.57, i64 0, i64 0)), !dbg !4917
  %66 = load %struct._IO_FILE*, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !4918
  call void @dump_cgraph(%struct._IO_FILE* %66), !dbg !4919
  br label %if.end74, !dbg !4920

if.end74:                                         ; preds = %for.end72, %while.end
  %67 = load %struct._IO_FILE*, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !4921
  %tobool75 = icmp ne %struct._IO_FILE* %67, null, !dbg !4921
  br i1 %tobool75, label %if.then76, label %if.end78, !dbg !4923

if.then76:                                        ; preds = %if.end74
  %68 = load %struct._IO_FILE*, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !4924
  %call77 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %68, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.58, i64 0, i64 0)), !dbg !4925
  br label %if.end78, !dbg !4925

if.end78:                                         ; preds = %if.then76, %if.end74
  %69 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_nodes, align 8, !dbg !4926
  store %struct.cgraph_node* %69, %struct.cgraph_node** %node, align 8, !dbg !4928
  br label %for.cond79, !dbg !4929

for.cond79:                                       ; preds = %for.inc138, %if.end78
  %70 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4930
  %71 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_analyze_functions.first_analyzed, align 8, !dbg !4932
  %cmp80 = icmp ne %struct.cgraph_node* %70, %71, !dbg !4933
  br i1 %cmp80, label %for.body81, label %for.end139, !dbg !4934

for.body81:                                       ; preds = %for.cond79
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl82, metadata !4935, metadata !DIExpression()), !dbg !4937
  %72 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4938
  %decl83 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %72, i32 0, i32 0, !dbg !4939
  %73 = load %union.tree_node*, %union.tree_node** %decl83, align 8, !dbg !4939
  store %union.tree_node* %73, %union.tree_node** %decl82, align 8, !dbg !4937
  %74 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4940
  %next84 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %74, i32 0, i32 3, !dbg !4941
  %75 = load %struct.cgraph_node*, %struct.cgraph_node** %next84, align 8, !dbg !4941
  store %struct.cgraph_node* %75, %struct.cgraph_node** %next, align 8, !dbg !4942
  %76 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4943
  %local = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %76, i32 0, i32 18, !dbg !4945
  %finalized = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local, i32 0, i32 2, !dbg !4946
  %bf.load85 = load i8, i8* %finalized, align 8, !dbg !4946
  %bf.lshr86 = lshr i8 %bf.load85, 2, !dbg !4946
  %bf.clear87 = and i8 %bf.lshr86, 1, !dbg !4946
  %bf.cast88 = zext i8 %bf.clear87 to i32, !dbg !4946
  %tobool89 = icmp ne i32 %bf.cast88, 0, !dbg !4943
  br i1 %tobool89, label %land.lhs.true, label %if.end93, !dbg !4947

land.lhs.true:                                    ; preds = %for.body81
  %77 = load %union.tree_node*, %union.tree_node** %decl82, align 8, !dbg !4948
  %call90 = call zeroext i8 @gimple_has_body_p(%union.tree_node* %77), !dbg !4949
  %tobool91 = icmp ne i8 %call90, 0, !dbg !4949
  br i1 %tobool91, label %if.end93, label %if.then92, !dbg !4950

if.then92:                                        ; preds = %land.lhs.true
  %78 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4951
  call void @cgraph_reset_node(%struct.cgraph_node* %78), !dbg !4952
  br label %if.end93, !dbg !4952

if.end93:                                         ; preds = %if.then92, %land.lhs.true, %for.body81
  %79 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4953
  %reachable94 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %79, i32 0, i32 27, !dbg !4955
  %bf.load95 = load i16, i16* %reachable94, align 4, !dbg !4955
  %bf.lshr96 = lshr i16 %bf.load95, 3, !dbg !4955
  %bf.clear97 = and i16 %bf.lshr96, 1, !dbg !4955
  %bf.cast98 = zext i16 %bf.clear97 to i32, !dbg !4955
  %tobool99 = icmp ne i32 %bf.cast98, 0, !dbg !4953
  br i1 %tobool99, label %if.else, label %land.lhs.true100, !dbg !4956

land.lhs.true100:                                 ; preds = %if.end93
  %80 = load %union.tree_node*, %union.tree_node** %decl82, align 8, !dbg !4957
  %call101 = call zeroext i8 @gimple_has_body_p(%union.tree_node* %80), !dbg !4958
  %conv = zext i8 %call101 to i32, !dbg !4958
  %tobool102 = icmp ne i32 %conv, 0, !dbg !4958
  br i1 %tobool102, label %if.then103, label %if.else, !dbg !4959

if.then103:                                       ; preds = %land.lhs.true100
  %81 = load %struct._IO_FILE*, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !4960
  %tobool104 = icmp ne %struct._IO_FILE* %81, null, !dbg !4960
  br i1 %tobool104, label %if.then105, label %if.end108, !dbg !4963

if.then105:                                       ; preds = %if.then103
  %82 = load %struct._IO_FILE*, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !4964
  %83 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4965
  %call106 = call i8* @cgraph_node_name(%struct.cgraph_node* %83), !dbg !4966
  %call107 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %82, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.55, i64 0, i64 0), i8* %call106), !dbg !4967
  br label %if.end108, !dbg !4967

if.end108:                                        ; preds = %if.then105, %if.then103
  %84 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4968
  call void @cgraph_remove_node(%struct.cgraph_node* %84), !dbg !4969
  br label %for.inc138, !dbg !4970

if.else:                                          ; preds = %land.lhs.true100, %if.end93
  %85 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4971
  %next_needed109 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %85, i32 0, i32 8, !dbg !4972
  store %struct.cgraph_node* null, %struct.cgraph_node** %next_needed109, align 8, !dbg !4973
  br label %if.end110

if.end110:                                        ; preds = %if.else
  %86 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4974
  %local111 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %86, i32 0, i32 18, !dbg !4974
  %finalized112 = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local111, i32 0, i32 2, !dbg !4974
  %bf.load113 = load i8, i8* %finalized112, align 8, !dbg !4974
  %bf.lshr114 = lshr i8 %bf.load113, 2, !dbg !4974
  %bf.clear115 = and i8 %bf.lshr114, 1, !dbg !4974
  %bf.cast116 = zext i8 %bf.clear115 to i32, !dbg !4974
  %tobool117 = icmp ne i32 %bf.cast116, 0, !dbg !4974
  br i1 %tobool117, label %lor.lhs.false, label %cond.false, !dbg !4974

lor.lhs.false:                                    ; preds = %if.end110
  %87 = load %union.tree_node*, %union.tree_node** %decl82, align 8, !dbg !4974
  %call118 = call zeroext i8 @gimple_has_body_p(%union.tree_node* %87), !dbg !4974
  %conv119 = zext i8 %call118 to i32, !dbg !4974
  %tobool120 = icmp ne i32 %conv119, 0, !dbg !4974
  br i1 %tobool120, label %cond.false, label %cond.true, !dbg !4974

cond.true:                                        ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0), i32 1060, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !4974
  br label %cond.end, !dbg !4974

cond.false:                                       ; preds = %lor.lhs.false, %if.end110
  br label %cond.end, !dbg !4974

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4974
  %88 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4975
  %analyzed121 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %88, i32 0, i32 27, !dbg !4975
  %bf.load122 = load i16, i16* %analyzed121, align 4, !dbg !4975
  %bf.lshr123 = lshr i16 %bf.load122, 5, !dbg !4975
  %bf.clear124 = and i16 %bf.lshr123, 1, !dbg !4975
  %bf.cast125 = zext i16 %bf.clear124 to i32, !dbg !4975
  %89 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4975
  %local126 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %89, i32 0, i32 18, !dbg !4975
  %finalized127 = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local126, i32 0, i32 2, !dbg !4975
  %bf.load128 = load i8, i8* %finalized127, align 8, !dbg !4975
  %bf.lshr129 = lshr i8 %bf.load128, 2, !dbg !4975
  %bf.clear130 = and i8 %bf.lshr129, 1, !dbg !4975
  %bf.cast131 = zext i8 %bf.clear130 to i32, !dbg !4975
  %cmp132 = icmp eq i32 %bf.cast125, %bf.cast131, !dbg !4975
  br i1 %cmp132, label %cond.false135, label %cond.true134, !dbg !4975

cond.true134:                                     ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0), i32 1061, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !4975
  br label %cond.end136, !dbg !4975

cond.false135:                                    ; preds = %cond.end
  br label %cond.end136, !dbg !4975

cond.end136:                                      ; preds = %cond.false135, %cond.true134
  %cond137 = phi i32 [ 0, %cond.true134 ], [ 0, %cond.false135 ], !dbg !4975
  br label %for.inc138, !dbg !4976

for.inc138:                                       ; preds = %cond.end136, %if.end108
  %90 = load %struct.cgraph_node*, %struct.cgraph_node** %next, align 8, !dbg !4977
  store %struct.cgraph_node* %90, %struct.cgraph_node** %node, align 8, !dbg !4978
  br label %for.cond79, !dbg !4979, !llvm.loop !4980

for.end139:                                       ; preds = %for.cond79
  %91 = load %struct._IO_FILE*, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !4982
  %tobool140 = icmp ne %struct._IO_FILE* %91, null, !dbg !4982
  br i1 %tobool140, label %if.then141, label %if.end143, !dbg !4984

if.then141:                                       ; preds = %for.end139
  %92 = load %struct._IO_FILE*, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !4985
  %call142 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %92, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.59, i64 0, i64 0)), !dbg !4987
  %93 = load %struct._IO_FILE*, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !4988
  call void @dump_cgraph(%struct._IO_FILE* %93), !dbg !4989
  br label %if.end143, !dbg !4990

if.end143:                                        ; preds = %if.then141, %for.end139
  %94 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_nodes, align 8, !dbg !4991
  store %struct.cgraph_node* %94, %struct.cgraph_node** @cgraph_analyze_functions.first_analyzed, align 8, !dbg !4992
  call void @ggc_collect(), !dbg !4993
  ret void, !dbg !4994
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @cgraph_optimize() #0 !dbg !4995 {
entry:
  %0 = load %struct.diagnostic_context*, %struct.diagnostic_context** @global_dc, align 8, !dbg !4996
  %diagnostic_count = getelementptr inbounds %struct.diagnostic_context, %struct.diagnostic_context* %0, i32 0, i32 1, !dbg !4996
  %arrayidx = getelementptr inbounds [12 x i32], [12 x i32]* %diagnostic_count, i64 0, i64 4, !dbg !4996
  %1 = load i32, i32* %arrayidx, align 8, !dbg !4996
  %tobool = icmp ne i32 %1, 0, !dbg !4996
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !4998

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.diagnostic_context*, %struct.diagnostic_context** @global_dc, align 8, !dbg !4999
  %diagnostic_count1 = getelementptr inbounds %struct.diagnostic_context, %struct.diagnostic_context* %2, i32 0, i32 1, !dbg !4999
  %arrayidx2 = getelementptr inbounds [12 x i32], [12 x i32]* %diagnostic_count1, i64 0, i64 5, !dbg !4999
  %3 = load i32, i32* %arrayidx2, align 4, !dbg !4999
  %tobool3 = icmp ne i32 %3, 0, !dbg !4999
  br i1 %tobool3, label %if.then, label %if.end, !dbg !5000

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %if.end62, !dbg !5001

if.end:                                           ; preds = %lor.lhs.false
  %call = call zeroext i8 @varpool_analyze_pending_decls(), !dbg !5002
  br label %do.body, !dbg !5003

do.body:                                          ; preds = %if.end
  %4 = load i8, i8* @timevar_enable, align 1, !dbg !5004
  %tobool4 = icmp ne i8 %4, 0, !dbg !5004
  br i1 %tobool4, label %if.then5, label %if.end6, !dbg !5007

if.then5:                                         ; preds = %do.body
  call void @timevar_push_1(i32 5), !dbg !5004
  br label %if.end6, !dbg !5004

if.end6:                                          ; preds = %if.then5, %do.body
  br label %do.end, !dbg !5007

do.end:                                           ; preds = %if.end6
  %5 = load i32, i32* @pre_ipa_mem_report, align 4, !dbg !5008
  %tobool7 = icmp ne i32 %5, 0, !dbg !5008
  br i1 %tobool7, label %if.then8, label %if.end10, !dbg !5010

if.then8:                                         ; preds = %do.end
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !5011
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.31, i64 0, i64 0)), !dbg !5013
  call void @dump_memory_report(i8 zeroext 0), !dbg !5014
  br label %if.end10, !dbg !5015

if.end10:                                         ; preds = %if.then8, %do.end
  %7 = load i32, i32* @quiet_flag, align 4, !dbg !5016
  %tobool11 = icmp ne i32 %7, 0, !dbg !5016
  br i1 %tobool11, label %if.end14, label %if.then12, !dbg !5018

if.then12:                                        ; preds = %if.end10
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !5019
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.32, i64 0, i64 0)), !dbg !5020
  br label %if.end14, !dbg !5020

if.end14:                                         ; preds = %if.then12, %if.end10
  store i32 1, i32* @cgraph_state, align 4, !dbg !5021
  %9 = load %struct.diagnostic_context*, %struct.diagnostic_context** @global_dc, align 8, !dbg !5022
  %diagnostic_count15 = getelementptr inbounds %struct.diagnostic_context, %struct.diagnostic_context* %9, i32 0, i32 1, !dbg !5022
  %arrayidx16 = getelementptr inbounds [12 x i32], [12 x i32]* %diagnostic_count15, i64 0, i64 4, !dbg !5022
  %10 = load i32, i32* %arrayidx16, align 8, !dbg !5022
  %cmp = icmp eq i32 %10, 0, !dbg !5024
  br i1 %cmp, label %land.lhs.true, label %if.end21, !dbg !5025

land.lhs.true:                                    ; preds = %if.end14
  %11 = load %struct.diagnostic_context*, %struct.diagnostic_context** @global_dc, align 8, !dbg !5026
  %diagnostic_count17 = getelementptr inbounds %struct.diagnostic_context, %struct.diagnostic_context* %11, i32 0, i32 1, !dbg !5026
  %arrayidx18 = getelementptr inbounds [12 x i32], [12 x i32]* %diagnostic_count17, i64 0, i64 5, !dbg !5026
  %12 = load i32, i32* %arrayidx18, align 4, !dbg !5026
  %cmp19 = icmp eq i32 %12, 0, !dbg !5027
  br i1 %cmp19, label %if.then20, label %if.end21, !dbg !5028

if.then20:                                        ; preds = %land.lhs.true
  call void @ipa_passes(), !dbg !5029
  br label %if.end21, !dbg !5029

if.end21:                                         ; preds = %if.then20, %land.lhs.true, %if.end14
  %13 = load %struct.diagnostic_context*, %struct.diagnostic_context** @global_dc, align 8, !dbg !5030
  %diagnostic_count22 = getelementptr inbounds %struct.diagnostic_context, %struct.diagnostic_context* %13, i32 0, i32 1, !dbg !5030
  %arrayidx23 = getelementptr inbounds [12 x i32], [12 x i32]* %diagnostic_count22, i64 0, i64 4, !dbg !5030
  %14 = load i32, i32* %arrayidx23, align 8, !dbg !5030
  %tobool24 = icmp ne i32 %14, 0, !dbg !5030
  br i1 %tobool24, label %if.then29, label %lor.lhs.false25, !dbg !5032

lor.lhs.false25:                                  ; preds = %if.end21
  %15 = load %struct.diagnostic_context*, %struct.diagnostic_context** @global_dc, align 8, !dbg !5033
  %diagnostic_count26 = getelementptr inbounds %struct.diagnostic_context, %struct.diagnostic_context* %15, i32 0, i32 1, !dbg !5033
  %arrayidx27 = getelementptr inbounds [12 x i32], [12 x i32]* %diagnostic_count26, i64 0, i64 5, !dbg !5033
  %16 = load i32, i32* %arrayidx27, align 4, !dbg !5033
  %tobool28 = icmp ne i32 %16, 0, !dbg !5033
  br i1 %tobool28, label %if.then29, label %if.end35, !dbg !5034

if.then29:                                        ; preds = %lor.lhs.false25, %if.end21
  br label %do.body30, !dbg !5035

do.body30:                                        ; preds = %if.then29
  %17 = load i8, i8* @timevar_enable, align 1, !dbg !5037
  %tobool31 = icmp ne i8 %17, 0, !dbg !5037
  br i1 %tobool31, label %if.then32, label %if.end33, !dbg !5040

if.then32:                                        ; preds = %do.body30
  call void @timevar_pop_1(i32 5), !dbg !5037
  br label %if.end33, !dbg !5037

if.end33:                                         ; preds = %if.then32, %do.body30
  br label %do.end34, !dbg !5040

do.end34:                                         ; preds = %if.end33
  br label %if.end62, !dbg !5041

if.end35:                                         ; preds = %lor.lhs.false25
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5042
  %call36 = call zeroext i8 @cgraph_remove_unreachable_nodes(i8 zeroext 0, %struct._IO_FILE* %18), !dbg !5043
  store i8 1, i8* @cgraph_global_info_ready, align 1, !dbg !5044
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !5045
  %tobool37 = icmp ne %struct._IO_FILE* %19, null, !dbg !5045
  br i1 %tobool37, label %if.then38, label %if.end40, !dbg !5047

if.then38:                                        ; preds = %if.end35
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !5048
  %call39 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %20, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.33, i64 0, i64 0)), !dbg !5050
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !5051
  call void @dump_cgraph(%struct._IO_FILE* %21), !dbg !5052
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !5053
  call void @dump_varpool(%struct._IO_FILE* %22), !dbg !5054
  br label %if.end40, !dbg !5055

if.end40:                                         ; preds = %if.then38, %if.end35
  %23 = load i32, i32* @post_ipa_mem_report, align 4, !dbg !5056
  %tobool41 = icmp ne i32 %23, 0, !dbg !5056
  br i1 %tobool41, label %if.then42, label %if.end44, !dbg !5058

if.then42:                                        ; preds = %if.end40
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !5059
  %call43 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %24, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.34, i64 0, i64 0)), !dbg !5061
  call void @dump_memory_report(i8 zeroext 0), !dbg !5062
  br label %if.end44, !dbg !5063

if.end44:                                         ; preds = %if.then42, %if.end40
  br label %do.body45, !dbg !5064

do.body45:                                        ; preds = %if.end44
  %25 = load i8, i8* @timevar_enable, align 1, !dbg !5065
  %tobool46 = icmp ne i8 %25, 0, !dbg !5065
  br i1 %tobool46, label %if.then47, label %if.end48, !dbg !5068

if.then47:                                        ; preds = %do.body45
  call void @timevar_pop_1(i32 5), !dbg !5065
  br label %if.end48, !dbg !5065

if.end48:                                         ; preds = %if.then47, %do.body45
  br label %do.end49, !dbg !5068

do.end49:                                         ; preds = %if.end48
  %26 = load %struct.gcc_debug_hooks*, %struct.gcc_debug_hooks** @debug_hooks, align 8, !dbg !5069
  %assembly_start = getelementptr inbounds %struct.gcc_debug_hooks, %struct.gcc_debug_hooks* %26, i32 0, i32 2, !dbg !5070
  %27 = load void ()*, void ()** %assembly_start, align 8, !dbg !5070
  call void %27(), !dbg !5071
  %28 = load i32, i32* @quiet_flag, align 4, !dbg !5072
  %tobool50 = icmp ne i32 %28, 0, !dbg !5072
  br i1 %tobool50, label %if.end53, label %if.then51, !dbg !5074

if.then51:                                        ; preds = %do.end49
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !5075
  %call52 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %29, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35, i64 0, i64 0)), !dbg !5076
  br label %if.end53, !dbg !5076

if.end53:                                         ; preds = %if.then51, %do.end49
  call void @cgraph_materialize_all_clones(), !dbg !5077
  call void @cgraph_mark_functions_to_output(), !dbg !5078
  store i32 3, i32* @cgraph_state, align 4, !dbg !5079
  %30 = load i32, i32* @flag_toplevel_reorder, align 4, !dbg !5080
  %tobool54 = icmp ne i32 %30, 0, !dbg !5080
  br i1 %tobool54, label %if.else, label %if.then55, !dbg !5082

if.then55:                                        ; preds = %if.end53
  call void @cgraph_output_in_order(), !dbg !5083
  br label %if.end57, !dbg !5083

if.else:                                          ; preds = %if.end53
  call void @cgraph_output_pending_asms(), !dbg !5084
  call void @cgraph_expand_all_functions(), !dbg !5086
  call void @varpool_remove_unreferenced_decls(), !dbg !5087
  %call56 = call zeroext i8 @varpool_assemble_pending_decls(), !dbg !5088
  br label %if.end57

if.end57:                                         ; preds = %if.else, %if.then55
  %call58 = call zeroext i8 @cgraph_process_new_functions(), !dbg !5089
  store i32 4, i32* @cgraph_state, align 4, !dbg !5090
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !5091
  %tobool59 = icmp ne %struct._IO_FILE* %31, null, !dbg !5091
  br i1 %tobool59, label %if.then60, label %if.end62, !dbg !5093

if.then60:                                        ; preds = %if.end57
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !5094
  %call61 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %32, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.36, i64 0, i64 0)), !dbg !5096
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !5097
  call void @dump_cgraph(%struct._IO_FILE* %33), !dbg !5098
  br label %if.end62, !dbg !5099

if.end62:                                         ; preds = %if.then, %do.end34, %if.then60, %if.end57
  ret void, !dbg !5100
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @cgraph_inline_p(%struct.cgraph_edge* %e, i32* %reason) #0 !dbg !5101 {
entry:
  %e.addr = alloca %struct.cgraph_edge*, align 8
  %reason.addr = alloca i32*, align 8
  store %struct.cgraph_edge* %e, %struct.cgraph_edge** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %e.addr, metadata !5105, metadata !DIExpression()), !dbg !5106
  store i32* %reason, i32** %reason.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %reason.addr, metadata !5107, metadata !DIExpression()), !dbg !5108
  %0 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !5109
  %inline_failed = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %0, i32 0, i32 9, !dbg !5110
  %1 = load i32, i32* %inline_failed, align 8, !dbg !5110
  %2 = load i32*, i32** %reason.addr, align 8, !dbg !5111
  store i32 %1, i32* %2, align 4, !dbg !5112
  %3 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !5113
  %inline_failed1 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %3, i32 0, i32 9, !dbg !5114
  %4 = load i32, i32* %inline_failed1, align 8, !dbg !5114
  %tobool = icmp ne i32 %4, 0, !dbg !5115
  %lnot = xor i1 %tobool, true, !dbg !5115
  %lnot.ext = zext i1 %lnot to i32, !dbg !5115
  %conv = trunc i32 %lnot.ext to i8, !dbg !5115
  ret i8 %conv, !dbg !5116
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @cgraph_preserve_function_body_p(%union.tree_node* %decl) #0 !dbg !5117 {
entry:
  %retval = alloca i8, align 1
  %decl.addr = alloca %union.tree_node*, align 8
  %node = alloca %struct.cgraph_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !5120, metadata !DIExpression()), !dbg !5121
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node, metadata !5122, metadata !DIExpression()), !dbg !5123
  %0 = load i8, i8* @cgraph_global_info_ready, align 1, !dbg !5124
  %tobool = icmp ne i8 %0, 0, !dbg !5124
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !5124

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0), i32 1765, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !5124
  br label %cond.end, !dbg !5124

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5124

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5124
  %1 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5125
  %call = call %struct.cgraph_node* @cgraph_node(%union.tree_node* %1), !dbg !5126
  store %struct.cgraph_node* %call, %struct.cgraph_node** %node, align 8, !dbg !5127
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5128
  %clones = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %2, i32 0, i32 11, !dbg !5130
  %3 = load %struct.cgraph_node*, %struct.cgraph_node** %clones, align 8, !dbg !5130
  %tobool1 = icmp ne %struct.cgraph_node* %3, null, !dbg !5128
  br i1 %tobool1, label %if.then, label %if.end, !dbg !5131

if.then:                                          ; preds = %cond.end
  store i8 1, i8* %retval, align 1, !dbg !5132
  br label %return, !dbg !5132

if.end:                                           ; preds = %cond.end
  store i8 0, i8* %retval, align 1, !dbg !5133
  br label %return, !dbg !5133

return:                                           ; preds = %if.end, %if.then
  %4 = load i8, i8* %retval, align 1, !dbg !5134
  ret i8 %4, !dbg !5134
}

declare dso_local zeroext i8 @varpool_analyze_pending_decls() #2

declare dso_local void @dump_memory_report(i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal void @ipa_passes() #0 !dbg !5135 {
entry:
  call void @set_cfun(%struct.function* null), !dbg !5136
  store %union.tree_node* null, %union.tree_node** @current_function_decl, align 8, !dbg !5137
  call void @gimple_register_cfg_hooks(), !dbg !5138
  call void @bitmap_obstack_initialize(%struct.bitmap_obstack* null), !dbg !5139
  %call = call i32 @invoke_plugin_callbacks(i32 16, i8* null), !dbg !5140
  %0 = load i8, i8* @in_lto_p, align 1, !dbg !5141
  %tobool = icmp ne i8 %0, 0, !dbg !5141
  br i1 %tobool, label %if.end, label %if.then, !dbg !5143

if.then:                                          ; preds = %entry
  %1 = load %struct.opt_pass*, %struct.opt_pass** @all_small_ipa_passes, align 8, !dbg !5144
  call void @execute_ipa_pass_list(%struct.opt_pass* %1), !dbg !5145
  br label %if.end, !dbg !5145

if.end:                                           ; preds = %if.then, %entry
  %2 = load i32, i32* @cgraph_state, align 4, !dbg !5146
  %cmp = icmp ult i32 %2, 2, !dbg !5148
  br i1 %cmp, label %if.then1, label %if.end2, !dbg !5149

if.then1:                                         ; preds = %if.end
  store i32 2, i32* @cgraph_state, align 4, !dbg !5150
  br label %if.end2, !dbg !5151

if.end2:                                          ; preds = %if.then1, %if.end
  %3 = load i8, i8* @in_lto_p, align 1, !dbg !5152
  %tobool3 = icmp ne i8 %3, 0, !dbg !5152
  br i1 %tobool3, label %if.end6, label %if.then4, !dbg !5154

if.then4:                                         ; preds = %if.end2
  call void @coverage_finish(), !dbg !5155
  call void @set_cfun(%struct.function* null), !dbg !5157
  store %union.tree_node* null, %union.tree_node** @current_function_decl, align 8, !dbg !5158
  %call5 = call zeroext i8 @cgraph_process_new_functions(), !dbg !5159
  %4 = load %struct.opt_pass*, %struct.opt_pass** @all_regular_ipa_passes, align 8, !dbg !5160
  %5 = bitcast %struct.opt_pass* %4 to %struct.ipa_opt_pass_d*, !dbg !5161
  call void @execute_ipa_summary_passes(%struct.ipa_opt_pass_d* %5), !dbg !5162
  br label %if.end6, !dbg !5163

if.end6:                                          ; preds = %if.then4, %if.end2
  %6 = load %struct.opt_pass*, %struct.opt_pass** @all_lto_gen_passes, align 8, !dbg !5164
  %7 = bitcast %struct.opt_pass* %6 to %struct.ipa_opt_pass_d*, !dbg !5165
  call void @execute_ipa_summary_passes(%struct.ipa_opt_pass_d* %7), !dbg !5166
  %8 = load i8, i8* @in_lto_p, align 1, !dbg !5167
  %tobool7 = icmp ne i8 %8, 0, !dbg !5167
  br i1 %tobool7, label %if.end9, label %if.then8, !dbg !5169

if.then8:                                         ; preds = %if.end6
  call void @ipa_write_summaries(), !dbg !5170
  br label %if.end9, !dbg !5170

if.end9:                                          ; preds = %if.then8, %if.end6
  %9 = load i32, i32* @flag_ltrans, align 4, !dbg !5171
  %tobool10 = icmp ne i32 %9, 0, !dbg !5171
  br i1 %tobool10, label %if.end12, label %if.then11, !dbg !5173

if.then11:                                        ; preds = %if.end9
  %10 = load %struct.opt_pass*, %struct.opt_pass** @all_regular_ipa_passes, align 8, !dbg !5174
  call void @execute_ipa_pass_list(%struct.opt_pass* %10), !dbg !5175
  br label %if.end12, !dbg !5175

if.end12:                                         ; preds = %if.then11, %if.end9
  %call13 = call i32 @invoke_plugin_callbacks(i32 17, i8* null), !dbg !5176
  call void @bitmap_obstack_release(%struct.bitmap_obstack* null), !dbg !5177
  ret void, !dbg !5178
}

declare dso_local zeroext i8 @cgraph_remove_unreachable_nodes(i8 zeroext, %struct._IO_FILE*) #2

declare dso_local void @dump_cgraph(%struct._IO_FILE*) #2

declare dso_local void @dump_varpool(%struct._IO_FILE*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @cgraph_materialize_all_clones() #0 !dbg !5179 {
entry:
  %node = alloca %struct.cgraph_node*, align 8
  %stabilized = alloca i8, align 1
  %i = alloca i32, align 4
  %replace_info = alloca %struct.ipa_replace_map*, align 8
  %e = alloca %struct.cgraph_edge*, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node, metadata !5180, metadata !DIExpression()), !dbg !5181
  call void @llvm.dbg.declare(metadata i8* %stabilized, metadata !5182, metadata !DIExpression()), !dbg !5183
  store i8 0, i8* %stabilized, align 1, !dbg !5183
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !5184
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !5184
  br i1 %tobool, label %if.then, label %if.end, !dbg !5186

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !5187
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.40, i64 0, i64 0)), !dbg !5188
  br label %if.end, !dbg !5188

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond, !dbg !5189

while.cond:                                       ; preds = %for.end72, %if.end
  %2 = load i8, i8* %stabilized, align 1, !dbg !5190
  %tobool1 = icmp ne i8 %2, 0, !dbg !5191
  %lnot = xor i1 %tobool1, true, !dbg !5191
  br i1 %lnot, label %while.body, label %while.end, !dbg !5189

while.body:                                       ; preds = %while.cond
  store i8 1, i8* %stabilized, align 1, !dbg !5192
  %3 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_nodes, align 8, !dbg !5194
  store %struct.cgraph_node* %3, %struct.cgraph_node** %node, align 8, !dbg !5196
  br label %for.cond, !dbg !5197

for.cond:                                         ; preds = %for.inc71, %while.body
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5198
  %tobool2 = icmp ne %struct.cgraph_node* %4, null, !dbg !5200
  br i1 %tobool2, label %for.body, label %for.end72, !dbg !5200

for.body:                                         ; preds = %for.cond
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5201
  %clone_of = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %5, i32 0, i32 12, !dbg !5204
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of, align 8, !dbg !5204
  %tobool3 = icmp ne %struct.cgraph_node* %6, null, !dbg !5201
  br i1 %tobool3, label %land.lhs.true, label %if.end70, !dbg !5205

land.lhs.true:                                    ; preds = %for.body
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5206
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %7, i32 0, i32 0, !dbg !5207
  %8 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5207
  %9 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5208
  %clone_of4 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %9, i32 0, i32 12, !dbg !5209
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of4, align 8, !dbg !5209
  %decl5 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %10, i32 0, i32 0, !dbg !5210
  %11 = load %union.tree_node*, %union.tree_node** %decl5, align 8, !dbg !5210
  %cmp = icmp ne %union.tree_node* %8, %11, !dbg !5211
  br i1 %cmp, label %land.lhs.true6, label %if.end70, !dbg !5212

land.lhs.true6:                                   ; preds = %land.lhs.true
  %12 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5213
  %decl7 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %12, i32 0, i32 0, !dbg !5214
  %13 = load %union.tree_node*, %union.tree_node** %decl7, align 8, !dbg !5214
  %call8 = call zeroext i8 @gimple_has_body_p(%union.tree_node* %13), !dbg !5215
  %tobool9 = icmp ne i8 %call8, 0, !dbg !5215
  br i1 %tobool9, label %if.end70, label %if.then10, !dbg !5216

if.then10:                                        ; preds = %land.lhs.true6
  %14 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5217
  %clone_of11 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %14, i32 0, i32 12, !dbg !5220
  %15 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of11, align 8, !dbg !5220
  %decl12 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %15, i32 0, i32 0, !dbg !5221
  %16 = load %union.tree_node*, %union.tree_node** %decl12, align 8, !dbg !5221
  %call13 = call zeroext i8 @gimple_has_body_p(%union.tree_node* %16), !dbg !5222
  %tobool14 = icmp ne i8 %call13, 0, !dbg !5222
  br i1 %tobool14, label %if.then15, label %if.else, !dbg !5223

if.then15:                                        ; preds = %if.then10
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !5224
  %tobool16 = icmp ne %struct._IO_FILE* %17, null, !dbg !5224
  br i1 %tobool16, label %if.then17, label %if.end68, !dbg !5227

if.then17:                                        ; preds = %if.then15
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !5228
  %19 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5230
  %clone_of18 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %19, i32 0, i32 12, !dbg !5231
  %20 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of18, align 8, !dbg !5231
  %call19 = call i8* @cgraph_node_name(%struct.cgraph_node* %20), !dbg !5232
  %21 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5233
  %call20 = call i8* @cgraph_node_name(%struct.cgraph_node* %21), !dbg !5234
  %call21 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.41, i64 0, i64 0), i8* %call19, i8* %call20), !dbg !5235
  %22 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5236
  %clone = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %22, i32 0, i32 21, !dbg !5238
  %tree_map = getelementptr inbounds %struct.cgraph_clone_info, %struct.cgraph_clone_info* %clone, i32 0, i32 0, !dbg !5239
  %23 = load %struct.VEC_ipa_replace_map_p_gc*, %struct.VEC_ipa_replace_map_p_gc** %tree_map, align 8, !dbg !5239
  %tobool22 = icmp ne %struct.VEC_ipa_replace_map_p_gc* %23, null, !dbg !5236
  br i1 %tobool22, label %if.then23, label %if.end53, !dbg !5240

if.then23:                                        ; preds = %if.then17
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5241, metadata !DIExpression()), !dbg !5243
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !5244
  %call24 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %24, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.42, i64 0, i64 0)), !dbg !5245
  store i32 0, i32* %i, align 4, !dbg !5246
  br label %for.cond25, !dbg !5248

for.cond25:                                       ; preds = %for.inc, %if.then23
  %25 = load i32, i32* %i, align 4, !dbg !5249
  %26 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5251
  %clone26 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %26, i32 0, i32 21, !dbg !5251
  %tree_map27 = getelementptr inbounds %struct.cgraph_clone_info, %struct.cgraph_clone_info* %clone26, i32 0, i32 0, !dbg !5251
  %27 = load %struct.VEC_ipa_replace_map_p_gc*, %struct.VEC_ipa_replace_map_p_gc** %tree_map27, align 8, !dbg !5251
  %tobool28 = icmp ne %struct.VEC_ipa_replace_map_p_gc* %27, null, !dbg !5251
  br i1 %tobool28, label %cond.true, label %cond.false, !dbg !5251

cond.true:                                        ; preds = %for.cond25
  %28 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5251
  %clone29 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %28, i32 0, i32 21, !dbg !5251
  %tree_map30 = getelementptr inbounds %struct.cgraph_clone_info, %struct.cgraph_clone_info* %clone29, i32 0, i32 0, !dbg !5251
  %29 = load %struct.VEC_ipa_replace_map_p_gc*, %struct.VEC_ipa_replace_map_p_gc** %tree_map30, align 8, !dbg !5251
  %base = getelementptr inbounds %struct.VEC_ipa_replace_map_p_gc, %struct.VEC_ipa_replace_map_p_gc* %29, i32 0, i32 0, !dbg !5251
  br label %cond.end, !dbg !5251

cond.false:                                       ; preds = %for.cond25
  br label %cond.end, !dbg !5251

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ipa_replace_map_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5251
  %call31 = call i32 @VEC_ipa_replace_map_p_base_length(%struct.VEC_ipa_replace_map_p_base* %cond), !dbg !5251
  %cmp32 = icmp ult i32 %25, %call31, !dbg !5252
  br i1 %cmp32, label %for.body33, label %for.end, !dbg !5253

for.body33:                                       ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %struct.ipa_replace_map** %replace_info, metadata !5254, metadata !DIExpression()), !dbg !5256
  %30 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5257
  %clone34 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %30, i32 0, i32 21, !dbg !5257
  %tree_map35 = getelementptr inbounds %struct.cgraph_clone_info, %struct.cgraph_clone_info* %clone34, i32 0, i32 0, !dbg !5257
  %31 = load %struct.VEC_ipa_replace_map_p_gc*, %struct.VEC_ipa_replace_map_p_gc** %tree_map35, align 8, !dbg !5257
  %tobool36 = icmp ne %struct.VEC_ipa_replace_map_p_gc* %31, null, !dbg !5257
  br i1 %tobool36, label %cond.true37, label %cond.false41, !dbg !5257

cond.true37:                                      ; preds = %for.body33
  %32 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5257
  %clone38 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %32, i32 0, i32 21, !dbg !5257
  %tree_map39 = getelementptr inbounds %struct.cgraph_clone_info, %struct.cgraph_clone_info* %clone38, i32 0, i32 0, !dbg !5257
  %33 = load %struct.VEC_ipa_replace_map_p_gc*, %struct.VEC_ipa_replace_map_p_gc** %tree_map39, align 8, !dbg !5257
  %base40 = getelementptr inbounds %struct.VEC_ipa_replace_map_p_gc, %struct.VEC_ipa_replace_map_p_gc* %33, i32 0, i32 0, !dbg !5257
  br label %cond.end42, !dbg !5257

cond.false41:                                     ; preds = %for.body33
  br label %cond.end42, !dbg !5257

cond.end42:                                       ; preds = %cond.false41, %cond.true37
  %cond43 = phi %struct.VEC_ipa_replace_map_p_base* [ %base40, %cond.true37 ], [ null, %cond.false41 ], !dbg !5257
  %34 = load i32, i32* %i, align 4, !dbg !5257
  %call44 = call %struct.ipa_replace_map* @VEC_ipa_replace_map_p_base_index(%struct.VEC_ipa_replace_map_p_base* %cond43, i32 %34), !dbg !5257
  store %struct.ipa_replace_map* %call44, %struct.ipa_replace_map** %replace_info, align 8, !dbg !5258
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !5259
  %36 = load %struct.ipa_replace_map*, %struct.ipa_replace_map** %replace_info, align 8, !dbg !5260
  %old_tree = getelementptr inbounds %struct.ipa_replace_map, %struct.ipa_replace_map* %36, i32 0, i32 0, !dbg !5261
  %37 = load %union.tree_node*, %union.tree_node** %old_tree, align 8, !dbg !5261
  call void @print_generic_expr(%struct._IO_FILE* %35, %union.tree_node* %37, i32 0), !dbg !5262
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !5263
  %call45 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %38, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.43, i64 0, i64 0)), !dbg !5264
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !5265
  %40 = load %struct.ipa_replace_map*, %struct.ipa_replace_map** %replace_info, align 8, !dbg !5266
  %new_tree = getelementptr inbounds %struct.ipa_replace_map, %struct.ipa_replace_map* %40, i32 0, i32 1, !dbg !5267
  %41 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5267
  call void @print_generic_expr(%struct._IO_FILE* %39, %union.tree_node* %41, i32 0), !dbg !5268
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !5269
  %43 = load %struct.ipa_replace_map*, %struct.ipa_replace_map** %replace_info, align 8, !dbg !5270
  %replace_p = getelementptr inbounds %struct.ipa_replace_map, %struct.ipa_replace_map* %43, i32 0, i32 2, !dbg !5271
  %44 = load i8, i8* %replace_p, align 8, !dbg !5271
  %conv = zext i8 %44 to i32, !dbg !5270
  %tobool46 = icmp ne i32 %conv, 0, !dbg !5270
  %45 = zext i1 %tobool46 to i64, !dbg !5270
  %cond47 = select i1 %tobool46, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.45, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.46, i64 0, i64 0), !dbg !5270
  %46 = load %struct.ipa_replace_map*, %struct.ipa_replace_map** %replace_info, align 8, !dbg !5272
  %ref_p = getelementptr inbounds %struct.ipa_replace_map, %struct.ipa_replace_map* %46, i32 0, i32 3, !dbg !5273
  %47 = load i8, i8* %ref_p, align 1, !dbg !5273
  %conv48 = zext i8 %47 to i32, !dbg !5272
  %tobool49 = icmp ne i32 %conv48, 0, !dbg !5272
  %48 = zext i1 %tobool49 to i64, !dbg !5272
  %cond50 = select i1 %tobool49, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.47, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.46, i64 0, i64 0), !dbg !5272
  %call51 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %42, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.44, i64 0, i64 0), i8* %cond47, i8* %cond50), !dbg !5274
  br label %for.inc, !dbg !5275

for.inc:                                          ; preds = %cond.end42
  %49 = load i32, i32* %i, align 4, !dbg !5276
  %inc = add i32 %49, 1, !dbg !5276
  store i32 %inc, i32* %i, align 4, !dbg !5276
  br label %for.cond25, !dbg !5277, !llvm.loop !5278

for.end:                                          ; preds = %cond.end
  %50 = load %struct._IO_FILE*, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !5280
  %call52 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %50, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.48, i64 0, i64 0)), !dbg !5281
  br label %if.end53, !dbg !5282

if.end53:                                         ; preds = %for.end, %if.then17
  %51 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5283
  %clone54 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %51, i32 0, i32 21, !dbg !5285
  %args_to_skip = getelementptr inbounds %struct.cgraph_clone_info, %struct.cgraph_clone_info* %clone54, i32 0, i32 1, !dbg !5286
  %52 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %args_to_skip, align 8, !dbg !5286
  %tobool55 = icmp ne %struct.bitmap_head_def* %52, null, !dbg !5283
  br i1 %tobool55, label %if.then56, label %if.end60, !dbg !5287

if.then56:                                        ; preds = %if.end53
  %53 = load %struct._IO_FILE*, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !5288
  %call57 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %53, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.49, i64 0, i64 0)), !dbg !5290
  %54 = load %struct._IO_FILE*, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !5291
  %55 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5291
  %clone58 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %55, i32 0, i32 21, !dbg !5291
  %args_to_skip59 = getelementptr inbounds %struct.cgraph_clone_info, %struct.cgraph_clone_info* %clone58, i32 0, i32 1, !dbg !5291
  %56 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %args_to_skip59, align 8, !dbg !5291
  call void @bitmap_print(%struct._IO_FILE* %54, %struct.bitmap_head_def* %56, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.46, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.48, i64 0, i64 0)), !dbg !5291
  br label %if.end60, !dbg !5292

if.end60:                                         ; preds = %if.then56, %if.end53
  %57 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5293
  %clone61 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %57, i32 0, i32 21, !dbg !5295
  %args_to_skip62 = getelementptr inbounds %struct.cgraph_clone_info, %struct.cgraph_clone_info* %clone61, i32 0, i32 1, !dbg !5296
  %58 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %args_to_skip62, align 8, !dbg !5296
  %tobool63 = icmp ne %struct.bitmap_head_def* %58, null, !dbg !5293
  br i1 %tobool63, label %if.then64, label %if.end67, !dbg !5297

if.then64:                                        ; preds = %if.end60
  %59 = load %struct._IO_FILE*, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !5298
  %call65 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %59, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.50, i64 0, i64 0)), !dbg !5300
  %60 = load %struct._IO_FILE*, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !5301
  %61 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5301
  %clone66 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %61, i32 0, i32 21, !dbg !5301
  %combined_args_to_skip = getelementptr inbounds %struct.cgraph_clone_info, %struct.cgraph_clone_info* %clone66, i32 0, i32 2, !dbg !5301
  %62 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %combined_args_to_skip, align 8, !dbg !5301
  call void @bitmap_print(%struct._IO_FILE* %60, %struct.bitmap_head_def* %62, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.46, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.48, i64 0, i64 0)), !dbg !5301
  br label %if.end67, !dbg !5302

if.end67:                                         ; preds = %if.then64, %if.end60
  br label %if.end68, !dbg !5303

if.end68:                                         ; preds = %if.end67, %if.then15
  %63 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5304
  call void @cgraph_materialize_clone(%struct.cgraph_node* %63), !dbg !5305
  br label %if.end69, !dbg !5306

if.else:                                          ; preds = %if.then10
  store i8 0, i8* %stabilized, align 1, !dbg !5307
  br label %if.end69

if.end69:                                         ; preds = %if.else, %if.end68
  br label %if.end70, !dbg !5308

if.end70:                                         ; preds = %if.end69, %land.lhs.true6, %land.lhs.true, %for.body
  br label %for.inc71, !dbg !5309

for.inc71:                                        ; preds = %if.end70
  %64 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5310
  %next = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %64, i32 0, i32 3, !dbg !5311
  %65 = load %struct.cgraph_node*, %struct.cgraph_node** %next, align 8, !dbg !5311
  store %struct.cgraph_node* %65, %struct.cgraph_node** %node, align 8, !dbg !5312
  br label %for.cond, !dbg !5313, !llvm.loop !5314

for.end72:                                        ; preds = %for.cond
  br label %while.cond, !dbg !5189, !llvm.loop !5316

while.end:                                        ; preds = %while.cond
  %66 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_nodes, align 8, !dbg !5318
  store %struct.cgraph_node* %66, %struct.cgraph_node** %node, align 8, !dbg !5320
  br label %for.cond73, !dbg !5321

for.cond73:                                       ; preds = %for.inc81, %while.end
  %67 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5322
  %tobool74 = icmp ne %struct.cgraph_node* %67, null, !dbg !5324
  br i1 %tobool74, label %for.body75, label %for.end83, !dbg !5324

for.body75:                                       ; preds = %for.cond73
  %68 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5325
  %analyzed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %68, i32 0, i32 27, !dbg !5327
  %bf.load = load i16, i16* %analyzed, align 4, !dbg !5327
  %bf.lshr = lshr i16 %bf.load, 5, !dbg !5327
  %bf.clear = and i16 %bf.lshr, 1, !dbg !5327
  %bf.cast = zext i16 %bf.clear to i32, !dbg !5327
  %tobool76 = icmp ne i32 %bf.cast, 0, !dbg !5325
  br i1 %tobool76, label %if.end80, label %land.lhs.true77, !dbg !5328

land.lhs.true77:                                  ; preds = %for.body75
  %69 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5329
  %callees = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %69, i32 0, i32 1, !dbg !5330
  %70 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callees, align 8, !dbg !5330
  %tobool78 = icmp ne %struct.cgraph_edge* %70, null, !dbg !5329
  br i1 %tobool78, label %if.then79, label %if.end80, !dbg !5331

if.then79:                                        ; preds = %land.lhs.true77
  %71 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5332
  call void @cgraph_node_remove_callees(%struct.cgraph_node* %71), !dbg !5333
  br label %if.end80, !dbg !5333

if.end80:                                         ; preds = %if.then79, %land.lhs.true77, %for.body75
  br label %for.inc81, !dbg !5330

for.inc81:                                        ; preds = %if.end80
  %72 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5334
  %next82 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %72, i32 0, i32 3, !dbg !5335
  %73 = load %struct.cgraph_node*, %struct.cgraph_node** %next82, align 8, !dbg !5335
  store %struct.cgraph_node* %73, %struct.cgraph_node** %node, align 8, !dbg !5336
  br label %for.cond73, !dbg !5337, !llvm.loop !5338

for.end83:                                        ; preds = %for.cond73
  %74 = load %struct._IO_FILE*, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !5340
  %tobool84 = icmp ne %struct._IO_FILE* %74, null, !dbg !5340
  br i1 %tobool84, label %if.then85, label %if.end87, !dbg !5342

if.then85:                                        ; preds = %for.end83
  %75 = load %struct._IO_FILE*, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !5343
  %call86 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %75, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.51, i64 0, i64 0)), !dbg !5344
  br label %if.end87, !dbg !5344

if.end87:                                         ; preds = %if.then85, %for.end83
  %76 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_nodes, align 8, !dbg !5345
  store %struct.cgraph_node* %76, %struct.cgraph_node** %node, align 8, !dbg !5347
  br label %for.cond88, !dbg !5348

for.cond88:                                       ; preds = %for.inc116, %if.end87
  %77 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5349
  %tobool89 = icmp ne %struct.cgraph_node* %77, null, !dbg !5351
  br i1 %tobool89, label %for.body90, label %for.end118, !dbg !5351

for.body90:                                       ; preds = %for.cond88
  %78 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5352
  %analyzed91 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %78, i32 0, i32 27, !dbg !5354
  %bf.load92 = load i16, i16* %analyzed91, align 4, !dbg !5354
  %bf.lshr93 = lshr i16 %bf.load92, 5, !dbg !5354
  %bf.clear94 = and i16 %bf.lshr93, 1, !dbg !5354
  %bf.cast95 = zext i16 %bf.clear94 to i32, !dbg !5354
  %tobool96 = icmp ne i32 %bf.cast95, 0, !dbg !5352
  br i1 %tobool96, label %land.lhs.true97, label %if.end115, !dbg !5355

land.lhs.true97:                                  ; preds = %for.body90
  %79 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5356
  %clone_of98 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %79, i32 0, i32 12, !dbg !5357
  %80 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of98, align 8, !dbg !5357
  %tobool99 = icmp ne %struct.cgraph_node* %80, null, !dbg !5356
  br i1 %tobool99, label %if.end115, label %land.lhs.true100, !dbg !5358

land.lhs.true100:                                 ; preds = %land.lhs.true97
  %81 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5359
  %decl101 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %81, i32 0, i32 0, !dbg !5360
  %82 = load %union.tree_node*, %union.tree_node** %decl101, align 8, !dbg !5360
  %call102 = call zeroext i8 @gimple_has_body_p(%union.tree_node* %82), !dbg !5361
  %conv103 = zext i8 %call102 to i32, !dbg !5361
  %tobool104 = icmp ne i32 %conv103, 0, !dbg !5361
  br i1 %tobool104, label %if.then105, label %if.end115, !dbg !5362

if.then105:                                       ; preds = %land.lhs.true100
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %e, metadata !5363, metadata !DIExpression()), !dbg !5365
  %83 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5366
  %decl106 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %83, i32 0, i32 0, !dbg !5367
  %84 = load %union.tree_node*, %union.tree_node** %decl106, align 8, !dbg !5367
  store %union.tree_node* %84, %union.tree_node** @current_function_decl, align 8, !dbg !5368
  %85 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5369
  %decl107 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %85, i32 0, i32 0, !dbg !5369
  %86 = load %union.tree_node*, %union.tree_node** %decl107, align 8, !dbg !5369
  %function_decl = bitcast %union.tree_node* %86 to %struct.tree_function_decl*, !dbg !5369
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !5369
  %87 = load %struct.function*, %struct.function** %f, align 8, !dbg !5369
  call void @push_cfun(%struct.function* %87), !dbg !5370
  %88 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5371
  %callees108 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %88, i32 0, i32 1, !dbg !5373
  %89 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callees108, align 8, !dbg !5373
  store %struct.cgraph_edge* %89, %struct.cgraph_edge** %e, align 8, !dbg !5374
  br label %for.cond109, !dbg !5375

for.cond109:                                      ; preds = %for.inc113, %if.then105
  %90 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !5376
  %tobool110 = icmp ne %struct.cgraph_edge* %90, null, !dbg !5378
  br i1 %tobool110, label %for.body111, label %for.end114, !dbg !5378

for.body111:                                      ; preds = %for.cond109
  %91 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !5379
  %call112 = call %union.gimple_statement_d* @cgraph_redirect_edge_call_stmt_to_callee(%struct.cgraph_edge* %91), !dbg !5380
  br label %for.inc113, !dbg !5380

for.inc113:                                       ; preds = %for.body111
  %92 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !5381
  %next_callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %92, i32 0, i32 6, !dbg !5382
  %93 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_callee, align 8, !dbg !5382
  store %struct.cgraph_edge* %93, %struct.cgraph_edge** %e, align 8, !dbg !5383
  br label %for.cond109, !dbg !5384, !llvm.loop !5385

for.end114:                                       ; preds = %for.cond109
  call void @pop_cfun(), !dbg !5387
  store %union.tree_node* null, %union.tree_node** @current_function_decl, align 8, !dbg !5388
  br label %if.end115, !dbg !5389

if.end115:                                        ; preds = %for.end114, %land.lhs.true100, %land.lhs.true97, %for.body90
  br label %for.inc116, !dbg !5390

for.inc116:                                       ; preds = %if.end115
  %94 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5391
  %next117 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %94, i32 0, i32 3, !dbg !5392
  %95 = load %struct.cgraph_node*, %struct.cgraph_node** %next117, align 8, !dbg !5392
  store %struct.cgraph_node* %95, %struct.cgraph_node** %node, align 8, !dbg !5393
  br label %for.cond88, !dbg !5394, !llvm.loop !5395

for.end118:                                       ; preds = %for.cond88
  %96 = load %struct._IO_FILE*, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !5397
  %tobool119 = icmp ne %struct._IO_FILE* %96, null, !dbg !5397
  br i1 %tobool119, label %if.then120, label %if.end122, !dbg !5399

if.then120:                                       ; preds = %for.end118
  %97 = load %struct._IO_FILE*, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !5400
  %call121 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %97, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.52, i64 0, i64 0)), !dbg !5401
  br label %if.end122, !dbg !5401

if.end122:                                        ; preds = %if.then120, %for.end118
  %98 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_nodes, align 8, !dbg !5402
  store %struct.cgraph_node* %98, %struct.cgraph_node** %node, align 8, !dbg !5404
  br label %for.cond123, !dbg !5405

for.cond123:                                      ; preds = %for.inc128, %if.end122
  %99 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5406
  %tobool124 = icmp ne %struct.cgraph_node* %99, null, !dbg !5408
  br i1 %tobool124, label %for.body125, label %for.end130, !dbg !5408

for.body125:                                      ; preds = %for.cond123
  %100 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5409
  %clone126 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %100, i32 0, i32 21, !dbg !5410
  %combined_args_to_skip127 = getelementptr inbounds %struct.cgraph_clone_info, %struct.cgraph_clone_info* %clone126, i32 0, i32 2, !dbg !5411
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %combined_args_to_skip127, align 8, !dbg !5412
  br label %for.inc128, !dbg !5409

for.inc128:                                       ; preds = %for.body125
  %101 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5413
  %next129 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %101, i32 0, i32 3, !dbg !5414
  %102 = load %struct.cgraph_node*, %struct.cgraph_node** %next129, align 8, !dbg !5414
  store %struct.cgraph_node* %102, %struct.cgraph_node** %node, align 8, !dbg !5415
  br label %for.cond123, !dbg !5416, !llvm.loop !5417

for.end130:                                       ; preds = %for.cond123
  %103 = load %struct._IO_FILE*, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !5419
  %call131 = call zeroext i8 @cgraph_remove_unreachable_nodes(i8 zeroext 0, %struct._IO_FILE* %103), !dbg !5420
  ret void, !dbg !5421
}

; Function Attrs: noinline nounwind uwtable
define internal void @cgraph_mark_functions_to_output() #0 !dbg !5422 {
entry:
  %node = alloca %struct.cgraph_node*, align 8
  %decl = alloca %union.tree_node*, align 8
  %e = alloca %struct.cgraph_edge*, align 8
  %next = alloca %struct.cgraph_node*, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node, metadata !5423, metadata !DIExpression()), !dbg !5424
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_nodes, align 8, !dbg !5425
  store %struct.cgraph_node* %0, %struct.cgraph_node** %node, align 8, !dbg !5427
  br label %for.cond, !dbg !5428

for.cond:                                         ; preds = %for.inc88, %entry
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5429
  %tobool = icmp ne %struct.cgraph_node* %1, null, !dbg !5431
  br i1 %tobool, label %for.body, label %for.end90, !dbg !5431

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !5432, metadata !DIExpression()), !dbg !5434
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5435
  %decl1 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %2, i32 0, i32 0, !dbg !5436
  %3 = load %union.tree_node*, %union.tree_node** %decl1, align 8, !dbg !5436
  store %union.tree_node* %3, %union.tree_node** %decl, align 8, !dbg !5434
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %e, metadata !5437, metadata !DIExpression()), !dbg !5438
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5439
  %process = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %4, i32 0, i32 27, !dbg !5439
  %bf.load = load i16, i16* %process, align 4, !dbg !5439
  %bf.lshr = lshr i16 %bf.load, 6, !dbg !5439
  %bf.clear = and i16 %bf.lshr, 1, !dbg !5439
  %bf.cast = zext i16 %bf.clear to i32, !dbg !5439
  %tobool2 = icmp ne i32 %bf.cast, 0, !dbg !5439
  br i1 %tobool2, label %lor.lhs.false, label %cond.false, !dbg !5439

lor.lhs.false:                                    ; preds = %for.body
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5439
  %same_comdat_group = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %5, i32 0, i32 14, !dbg !5439
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %same_comdat_group, align 8, !dbg !5439
  %tobool3 = icmp ne %struct.cgraph_node* %6, null, !dbg !5439
  br i1 %tobool3, label %cond.false, label %cond.true, !dbg !5439

cond.true:                                        ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0), i32 1134, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !5439
  br label %cond.end, !dbg !5439

cond.false:                                       ; preds = %lor.lhs.false, %for.body
  br label %cond.end, !dbg !5439

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5439
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5440
  %process4 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %7, i32 0, i32 27, !dbg !5442
  %bf.load5 = load i16, i16* %process4, align 4, !dbg !5442
  %bf.lshr6 = lshr i16 %bf.load5, 6, !dbg !5442
  %bf.clear7 = and i16 %bf.lshr6, 1, !dbg !5442
  %bf.cast8 = zext i16 %bf.clear7 to i32, !dbg !5442
  %tobool9 = icmp ne i32 %bf.cast8, 0, !dbg !5440
  br i1 %tobool9, label %if.then, label %if.end, !dbg !5443

if.then:                                          ; preds = %cond.end
  br label %for.inc88, !dbg !5444

if.end:                                           ; preds = %cond.end
  %8 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5445
  %callers = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %8, i32 0, i32 2, !dbg !5447
  %9 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callers, align 8, !dbg !5447
  store %struct.cgraph_edge* %9, %struct.cgraph_edge** %e, align 8, !dbg !5448
  br label %for.cond10, !dbg !5449

for.cond10:                                       ; preds = %for.inc, %if.end
  %10 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !5450
  %tobool11 = icmp ne %struct.cgraph_edge* %10, null, !dbg !5452
  br i1 %tobool11, label %for.body12, label %for.end, !dbg !5452

for.body12:                                       ; preds = %for.cond10
  %11 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !5453
  %inline_failed = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %11, i32 0, i32 9, !dbg !5455
  %12 = load i32, i32* %inline_failed, align 8, !dbg !5455
  %tobool13 = icmp ne i32 %12, 0, !dbg !5453
  br i1 %tobool13, label %if.then14, label %if.end15, !dbg !5456

if.then14:                                        ; preds = %for.body12
  br label %for.end, !dbg !5457

if.end15:                                         ; preds = %for.body12
  br label %for.inc, !dbg !5455

for.inc:                                          ; preds = %if.end15
  %13 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !5458
  %next_caller = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %13, i32 0, i32 4, !dbg !5459
  %14 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_caller, align 8, !dbg !5459
  store %struct.cgraph_edge* %14, %struct.cgraph_edge** %e, align 8, !dbg !5460
  br label %for.cond10, !dbg !5461, !llvm.loop !5462

for.end:                                          ; preds = %if.then14, %for.cond10
  %15 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5464
  %analyzed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %15, i32 0, i32 27, !dbg !5466
  %bf.load16 = load i16, i16* %analyzed, align 4, !dbg !5466
  %bf.lshr17 = lshr i16 %bf.load16, 5, !dbg !5466
  %bf.clear18 = and i16 %bf.lshr17, 1, !dbg !5466
  %bf.cast19 = zext i16 %bf.clear18 to i32, !dbg !5466
  %tobool20 = icmp ne i32 %bf.cast19, 0, !dbg !5464
  br i1 %tobool20, label %land.lhs.true, label %if.else, !dbg !5467

land.lhs.true:                                    ; preds = %for.end
  %16 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5468
  %global = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %16, i32 0, i32 19, !dbg !5469
  %inlined_to = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global, i32 0, i32 2, !dbg !5470
  %17 = load %struct.cgraph_node*, %struct.cgraph_node** %inlined_to, align 8, !dbg !5470
  %tobool21 = icmp ne %struct.cgraph_node* %17, null, !dbg !5468
  br i1 %tobool21, label %if.else, label %land.lhs.true22, !dbg !5471

land.lhs.true22:                                  ; preds = %land.lhs.true
  %18 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5472
  %needed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %18, i32 0, i32 27, !dbg !5473
  %bf.load23 = load i16, i16* %needed, align 4, !dbg !5473
  %bf.clear24 = and i16 %bf.load23, 1, !dbg !5473
  %bf.cast25 = zext i16 %bf.clear24 to i32, !dbg !5473
  %tobool26 = icmp ne i32 %bf.cast25, 0, !dbg !5472
  br i1 %tobool26, label %land.lhs.true35, label %lor.lhs.false27, !dbg !5474

lor.lhs.false27:                                  ; preds = %land.lhs.true22
  %19 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !5475
  %tobool28 = icmp ne %struct.cgraph_edge* %19, null, !dbg !5475
  br i1 %tobool28, label %land.lhs.true29, label %if.else, !dbg !5476

land.lhs.true29:                                  ; preds = %lor.lhs.false27
  %20 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5477
  %reachable = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %20, i32 0, i32 27, !dbg !5478
  %bf.load30 = load i16, i16* %reachable, align 4, !dbg !5478
  %bf.lshr31 = lshr i16 %bf.load30, 3, !dbg !5478
  %bf.clear32 = and i16 %bf.lshr31, 1, !dbg !5478
  %bf.cast33 = zext i16 %bf.clear32 to i32, !dbg !5478
  %tobool34 = icmp ne i32 %bf.cast33, 0, !dbg !5477
  br i1 %tobool34, label %land.lhs.true35, label %if.else, !dbg !5479

land.lhs.true35:                                  ; preds = %land.lhs.true29, %land.lhs.true22
  %21 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5480
  %base = bitcast %union.tree_node* %21 to %struct.tree_base*, !dbg !5480
  %22 = bitcast %struct.tree_base* %base to i64*, !dbg !5480
  %bf.load36 = load i64, i64* %22, align 8, !dbg !5480
  %bf.lshr37 = lshr i64 %bf.load36, 22, !dbg !5480
  %bf.clear38 = and i64 %bf.lshr37, 1, !dbg !5480
  %bf.cast39 = trunc i64 %bf.clear38 to i32, !dbg !5480
  %tobool40 = icmp ne i32 %bf.cast39, 0, !dbg !5480
  br i1 %tobool40, label %if.else, label %land.lhs.true41, !dbg !5481

land.lhs.true41:                                  ; preds = %land.lhs.true35
  %23 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5482
  %decl_common = bitcast %union.tree_node* %23 to %struct.tree_decl_common*, !dbg !5482
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !5482
  %24 = bitcast i40* %decl_flag_1 to i64*, !dbg !5482
  %bf.load42 = load i64, i64* %24, align 8, !dbg !5482
  %bf.lshr43 = lshr i64 %bf.load42, 25, !dbg !5482
  %bf.clear44 = and i64 %bf.lshr43, 1, !dbg !5482
  %bf.cast45 = trunc i64 %bf.clear44 to i32, !dbg !5482
  %tobool46 = icmp ne i32 %bf.cast45, 0, !dbg !5482
  br i1 %tobool46, label %if.else, label %if.then47, !dbg !5483

if.then47:                                        ; preds = %land.lhs.true41
  %25 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5484
  %process48 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %25, i32 0, i32 27, !dbg !5486
  %bf.load49 = load i16, i16* %process48, align 4, !dbg !5487
  %bf.clear50 = and i16 %bf.load49, -65, !dbg !5487
  %bf.set = or i16 %bf.clear50, 64, !dbg !5487
  store i16 %bf.set, i16* %process48, align 4, !dbg !5487
  %26 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5488
  %same_comdat_group51 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %26, i32 0, i32 14, !dbg !5490
  %27 = load %struct.cgraph_node*, %struct.cgraph_node** %same_comdat_group51, align 8, !dbg !5490
  %tobool52 = icmp ne %struct.cgraph_node* %27, null, !dbg !5488
  br i1 %tobool52, label %if.then53, label %if.end64, !dbg !5491

if.then53:                                        ; preds = %if.then47
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %next, metadata !5492, metadata !DIExpression()), !dbg !5494
  %28 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5495
  %same_comdat_group54 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %28, i32 0, i32 14, !dbg !5497
  %29 = load %struct.cgraph_node*, %struct.cgraph_node** %same_comdat_group54, align 8, !dbg !5497
  store %struct.cgraph_node* %29, %struct.cgraph_node** %next, align 8, !dbg !5498
  br label %for.cond55, !dbg !5499

for.cond55:                                       ; preds = %for.inc61, %if.then53
  %30 = load %struct.cgraph_node*, %struct.cgraph_node** %next, align 8, !dbg !5500
  %31 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5502
  %cmp = icmp ne %struct.cgraph_node* %30, %31, !dbg !5503
  br i1 %cmp, label %for.body56, label %for.end63, !dbg !5504

for.body56:                                       ; preds = %for.cond55
  %32 = load %struct.cgraph_node*, %struct.cgraph_node** %next, align 8, !dbg !5505
  %process57 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %32, i32 0, i32 27, !dbg !5506
  %bf.load58 = load i16, i16* %process57, align 4, !dbg !5507
  %bf.clear59 = and i16 %bf.load58, -65, !dbg !5507
  %bf.set60 = or i16 %bf.clear59, 64, !dbg !5507
  store i16 %bf.set60, i16* %process57, align 4, !dbg !5507
  br label %for.inc61, !dbg !5505

for.inc61:                                        ; preds = %for.body56
  %33 = load %struct.cgraph_node*, %struct.cgraph_node** %next, align 8, !dbg !5508
  %same_comdat_group62 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %33, i32 0, i32 14, !dbg !5509
  %34 = load %struct.cgraph_node*, %struct.cgraph_node** %same_comdat_group62, align 8, !dbg !5509
  store %struct.cgraph_node* %34, %struct.cgraph_node** %next, align 8, !dbg !5510
  br label %for.cond55, !dbg !5511, !llvm.loop !5512

for.end63:                                        ; preds = %for.cond55
  br label %if.end64, !dbg !5514

if.end64:                                         ; preds = %for.end63, %if.then47
  br label %if.end87, !dbg !5515

if.else:                                          ; preds = %land.lhs.true41, %land.lhs.true35, %land.lhs.true29, %lor.lhs.false27, %land.lhs.true, %for.end
  %35 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5516
  %same_comdat_group65 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %35, i32 0, i32 14, !dbg !5518
  %36 = load %struct.cgraph_node*, %struct.cgraph_node** %same_comdat_group65, align 8, !dbg !5518
  %tobool66 = icmp ne %struct.cgraph_node* %36, null, !dbg !5516
  br i1 %tobool66, label %if.then67, label %if.else68, !dbg !5519

if.then67:                                        ; preds = %if.else
  br label %if.end86, !dbg !5520

if.else68:                                        ; preds = %if.else
  %37 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5522
  %global69 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %37, i32 0, i32 19, !dbg !5522
  %inlined_to70 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global69, i32 0, i32 2, !dbg !5522
  %38 = load %struct.cgraph_node*, %struct.cgraph_node** %inlined_to70, align 8, !dbg !5522
  %tobool71 = icmp ne %struct.cgraph_node* %38, null, !dbg !5522
  br i1 %tobool71, label %cond.false83, label %lor.lhs.false72, !dbg !5522

lor.lhs.false72:                                  ; preds = %if.else68
  %39 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5522
  %call = call zeroext i8 @gimple_has_body_p(%union.tree_node* %39), !dbg !5522
  %tobool73 = icmp ne i8 %call, 0, !dbg !5522
  br i1 %tobool73, label %lor.lhs.false74, label %cond.false83, !dbg !5522

lor.lhs.false74:                                  ; preds = %lor.lhs.false72
  %40 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5522
  %decl_common75 = bitcast %union.tree_node* %40 to %struct.tree_decl_common*, !dbg !5522
  %decl_flag_176 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common75, i32 0, i32 2, !dbg !5522
  %41 = bitcast i40* %decl_flag_176 to i64*, !dbg !5522
  %bf.load77 = load i64, i64* %41, align 8, !dbg !5522
  %bf.lshr78 = lshr i64 %bf.load77, 25, !dbg !5522
  %bf.clear79 = and i64 %bf.lshr78, 1, !dbg !5522
  %bf.cast80 = trunc i64 %bf.clear79 to i32, !dbg !5522
  %tobool81 = icmp ne i32 %bf.cast80, 0, !dbg !5522
  br i1 %tobool81, label %cond.false83, label %cond.true82, !dbg !5522

cond.true82:                                      ; preds = %lor.lhs.false74
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0), i32 1182, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !5522
  br label %cond.end84, !dbg !5522

cond.false83:                                     ; preds = %lor.lhs.false74, %lor.lhs.false72, %if.else68
  br label %cond.end84, !dbg !5522

cond.end84:                                       ; preds = %cond.false83, %cond.true82
  %cond85 = phi i32 [ 0, %cond.true82 ], [ 0, %cond.false83 ], !dbg !5522
  br label %if.end86

if.end86:                                         ; preds = %cond.end84, %if.then67
  br label %if.end87

if.end87:                                         ; preds = %if.end86, %if.end64
  br label %for.inc88, !dbg !5524

for.inc88:                                        ; preds = %if.end87, %if.then
  %42 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5525
  %next89 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %42, i32 0, i32 3, !dbg !5526
  %43 = load %struct.cgraph_node*, %struct.cgraph_node** %next89, align 8, !dbg !5526
  store %struct.cgraph_node* %43, %struct.cgraph_node** %node, align 8, !dbg !5527
  br label %for.cond, !dbg !5528, !llvm.loop !5529

for.end90:                                        ; preds = %for.cond
  ret void, !dbg !5531
}

; Function Attrs: noinline nounwind uwtable
define internal void @cgraph_output_in_order() #0 !dbg !5532 {
entry:
  %max = alloca i32, align 4
  %nodes = alloca %struct.cgraph_order_sort*, align 8
  %i = alloca i32, align 4
  %pf = alloca %struct.cgraph_node*, align 8
  %pv = alloca %struct.varpool_node*, align 8
  %pa = alloca %struct.cgraph_asm_node*, align 8
  call void @llvm.dbg.declare(metadata i32* %max, metadata !5533, metadata !DIExpression()), !dbg !5534
  call void @llvm.dbg.declare(metadata %struct.cgraph_order_sort** %nodes, metadata !5535, metadata !DIExpression()), !dbg !5536
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5537, metadata !DIExpression()), !dbg !5538
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %pf, metadata !5539, metadata !DIExpression()), !dbg !5540
  call void @llvm.dbg.declare(metadata %struct.varpool_node** %pv, metadata !5541, metadata !DIExpression()), !dbg !5542
  call void @llvm.dbg.declare(metadata %struct.cgraph_asm_node** %pa, metadata !5543, metadata !DIExpression()), !dbg !5544
  %0 = load i32, i32* @cgraph_order, align 4, !dbg !5545
  store i32 %0, i32* %max, align 4, !dbg !5546
  %1 = load i32, i32* %max, align 4, !dbg !5547
  %conv = sext i32 %1 to i64, !dbg !5547
  %call = call i8* @xcalloc(i64 %conv, i64 16), !dbg !5547
  %2 = bitcast i8* %call to %struct.cgraph_order_sort*, !dbg !5547
  store %struct.cgraph_order_sort* %2, %struct.cgraph_order_sort** %nodes, align 8, !dbg !5548
  %call1 = call zeroext i8 @varpool_analyze_pending_decls(), !dbg !5549
  %3 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_nodes, align 8, !dbg !5550
  store %struct.cgraph_node* %3, %struct.cgraph_node** %pf, align 8, !dbg !5552
  br label %for.cond, !dbg !5553

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %pf, align 8, !dbg !5554
  %tobool = icmp ne %struct.cgraph_node* %4, null, !dbg !5556
  br i1 %tobool, label %for.body, label %for.end, !dbg !5556

for.body:                                         ; preds = %for.cond
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %pf, align 8, !dbg !5557
  %process = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %5, i32 0, i32 27, !dbg !5560
  %bf.load = load i16, i16* %process, align 4, !dbg !5560
  %bf.lshr = lshr i16 %bf.load, 6, !dbg !5560
  %bf.clear = and i16 %bf.lshr, 1, !dbg !5560
  %bf.cast = zext i16 %bf.clear to i32, !dbg !5560
  %tobool2 = icmp ne i32 %bf.cast, 0, !dbg !5557
  br i1 %tobool2, label %if.then, label %if.end, !dbg !5561

if.then:                                          ; preds = %for.body
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %pf, align 8, !dbg !5562
  %order = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %6, i32 0, i32 25, !dbg !5564
  %7 = load i32, i32* %order, align 4, !dbg !5564
  store i32 %7, i32* %i, align 4, !dbg !5565
  %8 = load %struct.cgraph_order_sort*, %struct.cgraph_order_sort** %nodes, align 8, !dbg !5566
  %9 = load i32, i32* %i, align 4, !dbg !5566
  %idxprom = sext i32 %9 to i64, !dbg !5566
  %arrayidx = getelementptr inbounds %struct.cgraph_order_sort, %struct.cgraph_order_sort* %8, i64 %idxprom, !dbg !5566
  %kind = getelementptr inbounds %struct.cgraph_order_sort, %struct.cgraph_order_sort* %arrayidx, i32 0, i32 0, !dbg !5566
  %10 = load i32, i32* %kind, align 8, !dbg !5566
  %cmp = icmp eq i32 %10, 0, !dbg !5566
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5566

cond.true:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0), i32 1697, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !5566
  br label %cond.end, !dbg !5566

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !5566

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5566
  %11 = load %struct.cgraph_order_sort*, %struct.cgraph_order_sort** %nodes, align 8, !dbg !5567
  %12 = load i32, i32* %i, align 4, !dbg !5568
  %idxprom4 = sext i32 %12 to i64, !dbg !5567
  %arrayidx5 = getelementptr inbounds %struct.cgraph_order_sort, %struct.cgraph_order_sort* %11, i64 %idxprom4, !dbg !5567
  %kind6 = getelementptr inbounds %struct.cgraph_order_sort, %struct.cgraph_order_sort* %arrayidx5, i32 0, i32 0, !dbg !5569
  store i32 1, i32* %kind6, align 8, !dbg !5570
  %13 = load %struct.cgraph_node*, %struct.cgraph_node** %pf, align 8, !dbg !5571
  %14 = load %struct.cgraph_order_sort*, %struct.cgraph_order_sort** %nodes, align 8, !dbg !5572
  %15 = load i32, i32* %i, align 4, !dbg !5573
  %idxprom7 = sext i32 %15 to i64, !dbg !5572
  %arrayidx8 = getelementptr inbounds %struct.cgraph_order_sort, %struct.cgraph_order_sort* %14, i64 %idxprom7, !dbg !5572
  %u = getelementptr inbounds %struct.cgraph_order_sort, %struct.cgraph_order_sort* %arrayidx8, i32 0, i32 1, !dbg !5574
  %f = bitcast %union.anon.0* %u to %struct.cgraph_node**, !dbg !5575
  store %struct.cgraph_node* %13, %struct.cgraph_node** %f, align 8, !dbg !5576
  br label %if.end, !dbg !5577

if.end:                                           ; preds = %cond.end, %for.body
  br label %for.inc, !dbg !5578

for.inc:                                          ; preds = %if.end
  %16 = load %struct.cgraph_node*, %struct.cgraph_node** %pf, align 8, !dbg !5579
  %next = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %16, i32 0, i32 3, !dbg !5580
  %17 = load %struct.cgraph_node*, %struct.cgraph_node** %next, align 8, !dbg !5580
  store %struct.cgraph_node* %17, %struct.cgraph_node** %pf, align 8, !dbg !5581
  br label %for.cond, !dbg !5582, !llvm.loop !5583

for.end:                                          ; preds = %for.cond
  %18 = load %struct.varpool_node*, %struct.varpool_node** @varpool_nodes_queue, align 8, !dbg !5585
  store %struct.varpool_node* %18, %struct.varpool_node** %pv, align 8, !dbg !5587
  br label %for.cond9, !dbg !5588

for.cond9:                                        ; preds = %for.inc28, %for.end
  %19 = load %struct.varpool_node*, %struct.varpool_node** %pv, align 8, !dbg !5589
  %tobool10 = icmp ne %struct.varpool_node* %19, null, !dbg !5591
  br i1 %tobool10, label %for.body11, label %for.end29, !dbg !5591

for.body11:                                       ; preds = %for.cond9
  %20 = load %struct.varpool_node*, %struct.varpool_node** %pv, align 8, !dbg !5592
  %order12 = getelementptr inbounds %struct.varpool_node, %struct.varpool_node* %20, i32 0, i32 4, !dbg !5594
  %21 = load i32, i32* %order12, align 8, !dbg !5594
  store i32 %21, i32* %i, align 4, !dbg !5595
  %22 = load %struct.cgraph_order_sort*, %struct.cgraph_order_sort** %nodes, align 8, !dbg !5596
  %23 = load i32, i32* %i, align 4, !dbg !5596
  %idxprom13 = sext i32 %23 to i64, !dbg !5596
  %arrayidx14 = getelementptr inbounds %struct.cgraph_order_sort, %struct.cgraph_order_sort* %22, i64 %idxprom13, !dbg !5596
  %kind15 = getelementptr inbounds %struct.cgraph_order_sort, %struct.cgraph_order_sort* %arrayidx14, i32 0, i32 0, !dbg !5596
  %24 = load i32, i32* %kind15, align 8, !dbg !5596
  %cmp16 = icmp eq i32 %24, 0, !dbg !5596
  br i1 %cmp16, label %cond.false19, label %cond.true18, !dbg !5596

cond.true18:                                      ; preds = %for.body11
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0), i32 1706, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !5596
  br label %cond.end20, !dbg !5596

cond.false19:                                     ; preds = %for.body11
  br label %cond.end20, !dbg !5596

cond.end20:                                       ; preds = %cond.false19, %cond.true18
  %cond21 = phi i32 [ 0, %cond.true18 ], [ 0, %cond.false19 ], !dbg !5596
  %25 = load %struct.cgraph_order_sort*, %struct.cgraph_order_sort** %nodes, align 8, !dbg !5597
  %26 = load i32, i32* %i, align 4, !dbg !5598
  %idxprom22 = sext i32 %26 to i64, !dbg !5597
  %arrayidx23 = getelementptr inbounds %struct.cgraph_order_sort, %struct.cgraph_order_sort* %25, i64 %idxprom22, !dbg !5597
  %kind24 = getelementptr inbounds %struct.cgraph_order_sort, %struct.cgraph_order_sort* %arrayidx23, i32 0, i32 0, !dbg !5599
  store i32 2, i32* %kind24, align 8, !dbg !5600
  %27 = load %struct.varpool_node*, %struct.varpool_node** %pv, align 8, !dbg !5601
  %28 = load %struct.cgraph_order_sort*, %struct.cgraph_order_sort** %nodes, align 8, !dbg !5602
  %29 = load i32, i32* %i, align 4, !dbg !5603
  %idxprom25 = sext i32 %29 to i64, !dbg !5602
  %arrayidx26 = getelementptr inbounds %struct.cgraph_order_sort, %struct.cgraph_order_sort* %28, i64 %idxprom25, !dbg !5602
  %u27 = getelementptr inbounds %struct.cgraph_order_sort, %struct.cgraph_order_sort* %arrayidx26, i32 0, i32 1, !dbg !5604
  %v = bitcast %union.anon.0* %u27 to %struct.varpool_node**, !dbg !5605
  store %struct.varpool_node* %27, %struct.varpool_node** %v, align 8, !dbg !5606
  br label %for.inc28, !dbg !5607

for.inc28:                                        ; preds = %cond.end20
  %30 = load %struct.varpool_node*, %struct.varpool_node** %pv, align 8, !dbg !5608
  %next_needed = getelementptr inbounds %struct.varpool_node, %struct.varpool_node* %30, i32 0, i32 2, !dbg !5609
  %31 = load %struct.varpool_node*, %struct.varpool_node** %next_needed, align 8, !dbg !5609
  store %struct.varpool_node* %31, %struct.varpool_node** %pv, align 8, !dbg !5610
  br label %for.cond9, !dbg !5611, !llvm.loop !5612

for.end29:                                        ; preds = %for.cond9
  %32 = load %struct.cgraph_asm_node*, %struct.cgraph_asm_node** @cgraph_asm_nodes, align 8, !dbg !5614
  store %struct.cgraph_asm_node* %32, %struct.cgraph_asm_node** %pa, align 8, !dbg !5616
  br label %for.cond30, !dbg !5617

for.cond30:                                       ; preds = %for.inc49, %for.end29
  %33 = load %struct.cgraph_asm_node*, %struct.cgraph_asm_node** %pa, align 8, !dbg !5618
  %tobool31 = icmp ne %struct.cgraph_asm_node* %33, null, !dbg !5620
  br i1 %tobool31, label %for.body32, label %for.end51, !dbg !5620

for.body32:                                       ; preds = %for.cond30
  %34 = load %struct.cgraph_asm_node*, %struct.cgraph_asm_node** %pa, align 8, !dbg !5621
  %order33 = getelementptr inbounds %struct.cgraph_asm_node, %struct.cgraph_asm_node* %34, i32 0, i32 2, !dbg !5623
  %35 = load i32, i32* %order33, align 8, !dbg !5623
  store i32 %35, i32* %i, align 4, !dbg !5624
  %36 = load %struct.cgraph_order_sort*, %struct.cgraph_order_sort** %nodes, align 8, !dbg !5625
  %37 = load i32, i32* %i, align 4, !dbg !5625
  %idxprom34 = sext i32 %37 to i64, !dbg !5625
  %arrayidx35 = getelementptr inbounds %struct.cgraph_order_sort, %struct.cgraph_order_sort* %36, i64 %idxprom34, !dbg !5625
  %kind36 = getelementptr inbounds %struct.cgraph_order_sort, %struct.cgraph_order_sort* %arrayidx35, i32 0, i32 0, !dbg !5625
  %38 = load i32, i32* %kind36, align 8, !dbg !5625
  %cmp37 = icmp eq i32 %38, 0, !dbg !5625
  br i1 %cmp37, label %cond.false40, label %cond.true39, !dbg !5625

cond.true39:                                      ; preds = %for.body32
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0), i32 1714, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !5625
  br label %cond.end41, !dbg !5625

cond.false40:                                     ; preds = %for.body32
  br label %cond.end41, !dbg !5625

cond.end41:                                       ; preds = %cond.false40, %cond.true39
  %cond42 = phi i32 [ 0, %cond.true39 ], [ 0, %cond.false40 ], !dbg !5625
  %39 = load %struct.cgraph_order_sort*, %struct.cgraph_order_sort** %nodes, align 8, !dbg !5626
  %40 = load i32, i32* %i, align 4, !dbg !5627
  %idxprom43 = sext i32 %40 to i64, !dbg !5626
  %arrayidx44 = getelementptr inbounds %struct.cgraph_order_sort, %struct.cgraph_order_sort* %39, i64 %idxprom43, !dbg !5626
  %kind45 = getelementptr inbounds %struct.cgraph_order_sort, %struct.cgraph_order_sort* %arrayidx44, i32 0, i32 0, !dbg !5628
  store i32 3, i32* %kind45, align 8, !dbg !5629
  %41 = load %struct.cgraph_asm_node*, %struct.cgraph_asm_node** %pa, align 8, !dbg !5630
  %42 = load %struct.cgraph_order_sort*, %struct.cgraph_order_sort** %nodes, align 8, !dbg !5631
  %43 = load i32, i32* %i, align 4, !dbg !5632
  %idxprom46 = sext i32 %43 to i64, !dbg !5631
  %arrayidx47 = getelementptr inbounds %struct.cgraph_order_sort, %struct.cgraph_order_sort* %42, i64 %idxprom46, !dbg !5631
  %u48 = getelementptr inbounds %struct.cgraph_order_sort, %struct.cgraph_order_sort* %arrayidx47, i32 0, i32 1, !dbg !5633
  %a = bitcast %union.anon.0* %u48 to %struct.cgraph_asm_node**, !dbg !5634
  store %struct.cgraph_asm_node* %41, %struct.cgraph_asm_node** %a, align 8, !dbg !5635
  br label %for.inc49, !dbg !5636

for.inc49:                                        ; preds = %cond.end41
  %44 = load %struct.cgraph_asm_node*, %struct.cgraph_asm_node** %pa, align 8, !dbg !5637
  %next50 = getelementptr inbounds %struct.cgraph_asm_node, %struct.cgraph_asm_node* %44, i32 0, i32 0, !dbg !5638
  %45 = load %struct.cgraph_asm_node*, %struct.cgraph_asm_node** %next50, align 8, !dbg !5638
  store %struct.cgraph_asm_node* %45, %struct.cgraph_asm_node** %pa, align 8, !dbg !5639
  br label %for.cond30, !dbg !5640, !llvm.loop !5641

for.end51:                                        ; preds = %for.cond30
  store i32 0, i32* %i, align 4, !dbg !5643
  br label %for.cond52, !dbg !5645

for.cond52:                                       ; preds = %for.inc67, %for.end51
  %46 = load i32, i32* %i, align 4, !dbg !5646
  %47 = load i32, i32* %max, align 4, !dbg !5648
  %cmp53 = icmp slt i32 %46, %47, !dbg !5649
  br i1 %cmp53, label %for.body55, label %for.end68, !dbg !5650

for.body55:                                       ; preds = %for.cond52
  %48 = load %struct.cgraph_order_sort*, %struct.cgraph_order_sort** %nodes, align 8, !dbg !5651
  %49 = load i32, i32* %i, align 4, !dbg !5654
  %idxprom56 = sext i32 %49 to i64, !dbg !5651
  %arrayidx57 = getelementptr inbounds %struct.cgraph_order_sort, %struct.cgraph_order_sort* %48, i64 %idxprom56, !dbg !5651
  %kind58 = getelementptr inbounds %struct.cgraph_order_sort, %struct.cgraph_order_sort* %arrayidx57, i32 0, i32 0, !dbg !5655
  %50 = load i32, i32* %kind58, align 8, !dbg !5655
  %cmp59 = icmp eq i32 %50, 2, !dbg !5656
  br i1 %cmp59, label %if.then61, label %if.end66, !dbg !5657

if.then61:                                        ; preds = %for.body55
  %51 = load %struct.cgraph_order_sort*, %struct.cgraph_order_sort** %nodes, align 8, !dbg !5658
  %52 = load i32, i32* %i, align 4, !dbg !5660
  %idxprom62 = sext i32 %52 to i64, !dbg !5658
  %arrayidx63 = getelementptr inbounds %struct.cgraph_order_sort, %struct.cgraph_order_sort* %51, i64 %idxprom62, !dbg !5658
  %u64 = getelementptr inbounds %struct.cgraph_order_sort, %struct.cgraph_order_sort* %arrayidx63, i32 0, i32 1, !dbg !5661
  %v65 = bitcast %union.anon.0* %u64 to %struct.varpool_node**, !dbg !5662
  %53 = load %struct.varpool_node*, %struct.varpool_node** %v65, align 8, !dbg !5662
  call void @varpool_mark_needed_node(%struct.varpool_node* %53), !dbg !5663
  br label %if.end66, !dbg !5664

if.end66:                                         ; preds = %if.then61, %for.body55
  br label %for.inc67, !dbg !5665

for.inc67:                                        ; preds = %if.end66
  %54 = load i32, i32* %i, align 4, !dbg !5666
  %inc = add nsw i32 %54, 1, !dbg !5666
  store i32 %inc, i32* %i, align 4, !dbg !5666
  br label %for.cond52, !dbg !5667, !llvm.loop !5668

for.end68:                                        ; preds = %for.cond52
  call void @varpool_empty_needed_queue(), !dbg !5670
  store i32 0, i32* %i, align 4, !dbg !5671
  br label %for.cond69, !dbg !5673

for.cond69:                                       ; preds = %for.inc99, %for.end68
  %55 = load i32, i32* %i, align 4, !dbg !5674
  %56 = load i32, i32* %max, align 4, !dbg !5676
  %cmp70 = icmp slt i32 %55, %56, !dbg !5677
  br i1 %cmp70, label %for.body72, label %for.end101, !dbg !5678

for.body72:                                       ; preds = %for.cond69
  %57 = load %struct.cgraph_order_sort*, %struct.cgraph_order_sort** %nodes, align 8, !dbg !5679
  %58 = load i32, i32* %i, align 4, !dbg !5681
  %idxprom73 = sext i32 %58 to i64, !dbg !5679
  %arrayidx74 = getelementptr inbounds %struct.cgraph_order_sort, %struct.cgraph_order_sort* %57, i64 %idxprom73, !dbg !5679
  %kind75 = getelementptr inbounds %struct.cgraph_order_sort, %struct.cgraph_order_sort* %arrayidx74, i32 0, i32 0, !dbg !5682
  %59 = load i32, i32* %kind75, align 8, !dbg !5682
  switch i32 %59, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb87
    i32 3, label %sw.bb93
    i32 0, label %sw.bb98
  ], !dbg !5683

sw.bb:                                            ; preds = %for.body72
  %60 = load %struct.cgraph_order_sort*, %struct.cgraph_order_sort** %nodes, align 8, !dbg !5684
  %61 = load i32, i32* %i, align 4, !dbg !5686
  %idxprom76 = sext i32 %61 to i64, !dbg !5684
  %arrayidx77 = getelementptr inbounds %struct.cgraph_order_sort, %struct.cgraph_order_sort* %60, i64 %idxprom76, !dbg !5684
  %u78 = getelementptr inbounds %struct.cgraph_order_sort, %struct.cgraph_order_sort* %arrayidx77, i32 0, i32 1, !dbg !5687
  %f79 = bitcast %union.anon.0* %u78 to %struct.cgraph_node**, !dbg !5688
  %62 = load %struct.cgraph_node*, %struct.cgraph_node** %f79, align 8, !dbg !5688
  %process80 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %62, i32 0, i32 27, !dbg !5689
  %bf.load81 = load i16, i16* %process80, align 4, !dbg !5690
  %bf.clear82 = and i16 %bf.load81, -65, !dbg !5690
  store i16 %bf.clear82, i16* %process80, align 4, !dbg !5690
  %63 = load %struct.cgraph_order_sort*, %struct.cgraph_order_sort** %nodes, align 8, !dbg !5691
  %64 = load i32, i32* %i, align 4, !dbg !5692
  %idxprom83 = sext i32 %64 to i64, !dbg !5691
  %arrayidx84 = getelementptr inbounds %struct.cgraph_order_sort, %struct.cgraph_order_sort* %63, i64 %idxprom83, !dbg !5691
  %u85 = getelementptr inbounds %struct.cgraph_order_sort, %struct.cgraph_order_sort* %arrayidx84, i32 0, i32 1, !dbg !5693
  %f86 = bitcast %union.anon.0* %u85 to %struct.cgraph_node**, !dbg !5694
  %65 = load %struct.cgraph_node*, %struct.cgraph_node** %f86, align 8, !dbg !5694
  call void @cgraph_expand_function(%struct.cgraph_node* %65), !dbg !5695
  br label %sw.epilog, !dbg !5696

sw.bb87:                                          ; preds = %for.body72
  %66 = load %struct.cgraph_order_sort*, %struct.cgraph_order_sort** %nodes, align 8, !dbg !5697
  %67 = load i32, i32* %i, align 4, !dbg !5698
  %idxprom88 = sext i32 %67 to i64, !dbg !5697
  %arrayidx89 = getelementptr inbounds %struct.cgraph_order_sort, %struct.cgraph_order_sort* %66, i64 %idxprom88, !dbg !5697
  %u90 = getelementptr inbounds %struct.cgraph_order_sort, %struct.cgraph_order_sort* %arrayidx89, i32 0, i32 1, !dbg !5699
  %v91 = bitcast %union.anon.0* %u90 to %struct.varpool_node**, !dbg !5700
  %68 = load %struct.varpool_node*, %struct.varpool_node** %v91, align 8, !dbg !5700
  %call92 = call zeroext i8 @varpool_assemble_decl(%struct.varpool_node* %68), !dbg !5701
  br label %sw.epilog, !dbg !5702

sw.bb93:                                          ; preds = %for.body72
  %69 = load %struct.cgraph_order_sort*, %struct.cgraph_order_sort** %nodes, align 8, !dbg !5703
  %70 = load i32, i32* %i, align 4, !dbg !5704
  %idxprom94 = sext i32 %70 to i64, !dbg !5703
  %arrayidx95 = getelementptr inbounds %struct.cgraph_order_sort, %struct.cgraph_order_sort* %69, i64 %idxprom94, !dbg !5703
  %u96 = getelementptr inbounds %struct.cgraph_order_sort, %struct.cgraph_order_sort* %arrayidx95, i32 0, i32 1, !dbg !5705
  %a97 = bitcast %union.anon.0* %u96 to %struct.cgraph_asm_node**, !dbg !5706
  %71 = load %struct.cgraph_asm_node*, %struct.cgraph_asm_node** %a97, align 8, !dbg !5706
  %asm_str = getelementptr inbounds %struct.cgraph_asm_node, %struct.cgraph_asm_node* %71, i32 0, i32 1, !dbg !5707
  %72 = load %union.tree_node*, %union.tree_node** %asm_str, align 8, !dbg !5707
  call void @assemble_asm(%union.tree_node* %72), !dbg !5708
  br label %sw.epilog, !dbg !5709

sw.bb98:                                          ; preds = %for.body72
  br label %sw.epilog, !dbg !5710

sw.default:                                       ; preds = %for.body72
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0), i32 1750, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !5711
  br label %sw.epilog, !dbg !5712

sw.epilog:                                        ; preds = %sw.default, %sw.bb98, %sw.bb93, %sw.bb87, %sw.bb
  br label %for.inc99, !dbg !5713

for.inc99:                                        ; preds = %sw.epilog
  %73 = load i32, i32* %i, align 4, !dbg !5714
  %inc100 = add nsw i32 %73, 1, !dbg !5714
  store i32 %inc100, i32* %i, align 4, !dbg !5714
  br label %for.cond69, !dbg !5715, !llvm.loop !5716

for.end101:                                       ; preds = %for.cond69
  store %struct.cgraph_asm_node* null, %struct.cgraph_asm_node** @cgraph_asm_nodes, align 8, !dbg !5718
  %74 = load %struct.cgraph_order_sort*, %struct.cgraph_order_sort** %nodes, align 8, !dbg !5719
  %75 = bitcast %struct.cgraph_order_sort* %74 to i8*, !dbg !5719
  call void @free(i8* %75), !dbg !5720
  ret void, !dbg !5721
}

; Function Attrs: noinline nounwind uwtable
define internal void @cgraph_output_pending_asms() #0 !dbg !5722 {
entry:
  %can = alloca %struct.cgraph_asm_node*, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_asm_node** %can, metadata !5723, metadata !DIExpression()), !dbg !5724
  %0 = load %struct.diagnostic_context*, %struct.diagnostic_context** @global_dc, align 8, !dbg !5725
  %diagnostic_count = getelementptr inbounds %struct.diagnostic_context, %struct.diagnostic_context* %0, i32 0, i32 1, !dbg !5725
  %arrayidx = getelementptr inbounds [12 x i32], [12 x i32]* %diagnostic_count, i64 0, i64 4, !dbg !5725
  %1 = load i32, i32* %arrayidx, align 8, !dbg !5725
  %tobool = icmp ne i32 %1, 0, !dbg !5725
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !5727

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.diagnostic_context*, %struct.diagnostic_context** @global_dc, align 8, !dbg !5728
  %diagnostic_count1 = getelementptr inbounds %struct.diagnostic_context, %struct.diagnostic_context* %2, i32 0, i32 1, !dbg !5728
  %arrayidx2 = getelementptr inbounds [12 x i32], [12 x i32]* %diagnostic_count1, i64 0, i64 5, !dbg !5728
  %3 = load i32, i32* %arrayidx2, align 4, !dbg !5728
  %tobool3 = icmp ne i32 %3, 0, !dbg !5728
  br i1 %tobool3, label %if.then, label %if.end, !dbg !5729

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %return, !dbg !5730

if.end:                                           ; preds = %lor.lhs.false
  %4 = load %struct.cgraph_asm_node*, %struct.cgraph_asm_node** @cgraph_asm_nodes, align 8, !dbg !5731
  store %struct.cgraph_asm_node* %4, %struct.cgraph_asm_node** %can, align 8, !dbg !5733
  br label %for.cond, !dbg !5734

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load %struct.cgraph_asm_node*, %struct.cgraph_asm_node** %can, align 8, !dbg !5735
  %tobool4 = icmp ne %struct.cgraph_asm_node* %5, null, !dbg !5737
  br i1 %tobool4, label %for.body, label %for.end, !dbg !5737

for.body:                                         ; preds = %for.cond
  %6 = load %struct.cgraph_asm_node*, %struct.cgraph_asm_node** %can, align 8, !dbg !5738
  %asm_str = getelementptr inbounds %struct.cgraph_asm_node, %struct.cgraph_asm_node* %6, i32 0, i32 1, !dbg !5739
  %7 = load %union.tree_node*, %union.tree_node** %asm_str, align 8, !dbg !5739
  call void @assemble_asm(%union.tree_node* %7), !dbg !5740
  br label %for.inc, !dbg !5740

for.inc:                                          ; preds = %for.body
  %8 = load %struct.cgraph_asm_node*, %struct.cgraph_asm_node** %can, align 8, !dbg !5741
  %next = getelementptr inbounds %struct.cgraph_asm_node, %struct.cgraph_asm_node* %8, i32 0, i32 0, !dbg !5742
  %9 = load %struct.cgraph_asm_node*, %struct.cgraph_asm_node** %next, align 8, !dbg !5742
  store %struct.cgraph_asm_node* %9, %struct.cgraph_asm_node** %can, align 8, !dbg !5743
  br label %for.cond, !dbg !5744, !llvm.loop !5745

for.end:                                          ; preds = %for.cond
  store %struct.cgraph_asm_node* null, %struct.cgraph_asm_node** @cgraph_asm_nodes, align 8, !dbg !5747
  br label %return, !dbg !5748

return:                                           ; preds = %for.end, %if.then
  ret void, !dbg !5748
}

; Function Attrs: noinline nounwind uwtable
define internal void @cgraph_expand_all_functions() #0 !dbg !5749 {
entry:
  %node = alloca %struct.cgraph_node*, align 8
  %order = alloca %struct.cgraph_node**, align 8
  %order_pos = alloca i32, align 4
  %new_order_pos = alloca i32, align 4
  %i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node, metadata !5750, metadata !DIExpression()), !dbg !5751
  call void @llvm.dbg.declare(metadata %struct.cgraph_node*** %order, metadata !5752, metadata !DIExpression()), !dbg !5753
  %0 = load i32, i32* @cgraph_n_nodes, align 4, !dbg !5754
  %conv = sext i32 %0 to i64, !dbg !5754
  %call = call i8* @xcalloc(i64 %conv, i64 8), !dbg !5754
  %1 = bitcast i8* %call to %struct.cgraph_node**, !dbg !5754
  store %struct.cgraph_node** %1, %struct.cgraph_node*** %order, align 8, !dbg !5753
  call void @llvm.dbg.declare(metadata i32* %order_pos, metadata !5755, metadata !DIExpression()), !dbg !5756
  call void @llvm.dbg.declare(metadata i32* %new_order_pos, metadata !5757, metadata !DIExpression()), !dbg !5758
  store i32 0, i32* %new_order_pos, align 4, !dbg !5758
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5759, metadata !DIExpression()), !dbg !5760
  %2 = load %struct.cgraph_node**, %struct.cgraph_node*** %order, align 8, !dbg !5761
  %call1 = call i32 @cgraph_postorder(%struct.cgraph_node** %2), !dbg !5762
  store i32 %call1, i32* %order_pos, align 4, !dbg !5763
  %3 = load i32, i32* %order_pos, align 4, !dbg !5764
  %4 = load i32, i32* @cgraph_n_nodes, align 4, !dbg !5764
  %cmp = icmp eq i32 %3, %4, !dbg !5764
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5764

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0), i32 1626, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !5764
  br label %cond.end, !dbg !5764

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5764

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5764
  store i32 0, i32* %i, align 4, !dbg !5765
  br label %for.cond, !dbg !5767

for.cond:                                         ; preds = %for.inc, %cond.end
  %5 = load i32, i32* %i, align 4, !dbg !5768
  %6 = load i32, i32* %order_pos, align 4, !dbg !5770
  %cmp3 = icmp slt i32 %5, %6, !dbg !5771
  br i1 %cmp3, label %for.body, label %for.end, !dbg !5772

for.body:                                         ; preds = %for.cond
  %7 = load %struct.cgraph_node**, %struct.cgraph_node*** %order, align 8, !dbg !5773
  %8 = load i32, i32* %i, align 4, !dbg !5775
  %idxprom = sext i32 %8 to i64, !dbg !5773
  %arrayidx = getelementptr inbounds %struct.cgraph_node*, %struct.cgraph_node** %7, i64 %idxprom, !dbg !5773
  %9 = load %struct.cgraph_node*, %struct.cgraph_node** %arrayidx, align 8, !dbg !5773
  %process = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %9, i32 0, i32 27, !dbg !5776
  %bf.load = load i16, i16* %process, align 4, !dbg !5776
  %bf.lshr = lshr i16 %bf.load, 6, !dbg !5776
  %bf.clear = and i16 %bf.lshr, 1, !dbg !5776
  %bf.cast = zext i16 %bf.clear to i32, !dbg !5776
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !5773
  br i1 %tobool, label %if.then, label %if.end, !dbg !5777

if.then:                                          ; preds = %for.body
  %10 = load %struct.cgraph_node**, %struct.cgraph_node*** %order, align 8, !dbg !5778
  %11 = load i32, i32* %i, align 4, !dbg !5779
  %idxprom5 = sext i32 %11 to i64, !dbg !5778
  %arrayidx6 = getelementptr inbounds %struct.cgraph_node*, %struct.cgraph_node** %10, i64 %idxprom5, !dbg !5778
  %12 = load %struct.cgraph_node*, %struct.cgraph_node** %arrayidx6, align 8, !dbg !5778
  %13 = load %struct.cgraph_node**, %struct.cgraph_node*** %order, align 8, !dbg !5780
  %14 = load i32, i32* %new_order_pos, align 4, !dbg !5781
  %inc = add nsw i32 %14, 1, !dbg !5781
  store i32 %inc, i32* %new_order_pos, align 4, !dbg !5781
  %idxprom7 = sext i32 %14 to i64, !dbg !5780
  %arrayidx8 = getelementptr inbounds %struct.cgraph_node*, %struct.cgraph_node** %13, i64 %idxprom7, !dbg !5780
  store %struct.cgraph_node* %12, %struct.cgraph_node** %arrayidx8, align 8, !dbg !5782
  br label %if.end, !dbg !5780

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !5776

for.inc:                                          ; preds = %if.end
  %15 = load i32, i32* %i, align 4, !dbg !5783
  %inc9 = add nsw i32 %15, 1, !dbg !5783
  store i32 %inc9, i32* %i, align 4, !dbg !5783
  br label %for.cond, !dbg !5784, !llvm.loop !5785

for.end:                                          ; preds = %for.cond
  %16 = load i32, i32* %new_order_pos, align 4, !dbg !5787
  %sub = sub nsw i32 %16, 1, !dbg !5789
  store i32 %sub, i32* %i, align 4, !dbg !5790
  br label %for.cond10, !dbg !5791

for.cond10:                                       ; preds = %for.inc36, %for.end
  %17 = load i32, i32* %i, align 4, !dbg !5792
  %cmp11 = icmp sge i32 %17, 0, !dbg !5794
  br i1 %cmp11, label %for.body13, label %for.end37, !dbg !5795

for.body13:                                       ; preds = %for.cond10
  %18 = load %struct.cgraph_node**, %struct.cgraph_node*** %order, align 8, !dbg !5796
  %19 = load i32, i32* %i, align 4, !dbg !5798
  %idxprom14 = sext i32 %19 to i64, !dbg !5796
  %arrayidx15 = getelementptr inbounds %struct.cgraph_node*, %struct.cgraph_node** %18, i64 %idxprom14, !dbg !5796
  %20 = load %struct.cgraph_node*, %struct.cgraph_node** %arrayidx15, align 8, !dbg !5796
  store %struct.cgraph_node* %20, %struct.cgraph_node** %node, align 8, !dbg !5799
  %21 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5800
  %process16 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %21, i32 0, i32 27, !dbg !5802
  %bf.load17 = load i16, i16* %process16, align 4, !dbg !5802
  %bf.lshr18 = lshr i16 %bf.load17, 6, !dbg !5802
  %bf.clear19 = and i16 %bf.lshr18, 1, !dbg !5802
  %bf.cast20 = zext i16 %bf.clear19 to i32, !dbg !5802
  %tobool21 = icmp ne i32 %bf.cast20, 0, !dbg !5800
  br i1 %tobool21, label %if.then22, label %if.end35, !dbg !5803

if.then22:                                        ; preds = %for.body13
  %22 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5804
  %reachable = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %22, i32 0, i32 27, !dbg !5804
  %bf.load23 = load i16, i16* %reachable, align 4, !dbg !5804
  %bf.lshr24 = lshr i16 %bf.load23, 3, !dbg !5804
  %bf.clear25 = and i16 %bf.lshr24, 1, !dbg !5804
  %bf.cast26 = zext i16 %bf.clear25 to i32, !dbg !5804
  %tobool27 = icmp ne i32 %bf.cast26, 0, !dbg !5804
  br i1 %tobool27, label %cond.false29, label %cond.true28, !dbg !5804

cond.true28:                                      ; preds = %if.then22
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0), i32 1639, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !5804
  br label %cond.end30, !dbg !5804

cond.false29:                                     ; preds = %if.then22
  br label %cond.end30, !dbg !5804

cond.end30:                                       ; preds = %cond.false29, %cond.true28
  %cond31 = phi i32 [ 0, %cond.true28 ], [ 0, %cond.false29 ], !dbg !5804
  %23 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5806
  %process32 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %23, i32 0, i32 27, !dbg !5807
  %bf.load33 = load i16, i16* %process32, align 4, !dbg !5808
  %bf.clear34 = and i16 %bf.load33, -65, !dbg !5808
  store i16 %bf.clear34, i16* %process32, align 4, !dbg !5808
  %24 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5809
  call void @cgraph_expand_function(%struct.cgraph_node* %24), !dbg !5810
  br label %if.end35, !dbg !5811

if.end35:                                         ; preds = %cond.end30, %for.body13
  br label %for.inc36, !dbg !5812

for.inc36:                                        ; preds = %if.end35
  %25 = load i32, i32* %i, align 4, !dbg !5813
  %dec = add nsw i32 %25, -1, !dbg !5813
  store i32 %dec, i32* %i, align 4, !dbg !5813
  br label %for.cond10, !dbg !5814, !llvm.loop !5815

for.end37:                                        ; preds = %for.cond10
  %call38 = call zeroext i8 @cgraph_process_new_functions(), !dbg !5817
  %26 = load %struct.cgraph_node**, %struct.cgraph_node*** %order, align 8, !dbg !5818
  %27 = bitcast %struct.cgraph_node** %26 to i8*, !dbg !5818
  call void @free(i8* %27), !dbg !5819
  ret void, !dbg !5820
}

declare dso_local void @varpool_remove_unreferenced_decls() #2

declare dso_local zeroext i8 @varpool_assemble_pending_decls() #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @cgraph_build_static_cdtor(i8 signext %which, %union.tree_node* %body, i32 %priority) #0 !dbg !3413 {
entry:
  %which.addr = alloca i8, align 1
  %body.addr = alloca %union.tree_node*, align 8
  %priority.addr = alloca i32, align 4
  %which_buf = alloca [16 x i8], align 16
  %decl = alloca %union.tree_node*, align 8
  %name = alloca %union.tree_node*, align 8
  %resdecl = alloca %union.tree_node*, align 8
  store i8 %which, i8* %which.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %which.addr, metadata !5821, metadata !DIExpression()), !dbg !5822
  store %union.tree_node* %body, %union.tree_node** %body.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %body.addr, metadata !5823, metadata !DIExpression()), !dbg !5824
  store i32 %priority, i32* %priority.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %priority.addr, metadata !5825, metadata !DIExpression()), !dbg !5826
  call void @llvm.dbg.declare(metadata [16 x i8]* %which_buf, metadata !5827, metadata !DIExpression()), !dbg !5831
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !5832, metadata !DIExpression()), !dbg !5833
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !5834, metadata !DIExpression()), !dbg !5835
  call void @llvm.dbg.declare(metadata %union.tree_node** %resdecl, metadata !5836, metadata !DIExpression()), !dbg !5837
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %which_buf, i64 0, i64 0, !dbg !5838
  %0 = load i8, i8* %which.addr, align 1, !dbg !5839
  %conv = sext i8 %0 to i32, !dbg !5839
  %1 = load i32, i32* %priority.addr, align 4, !dbg !5840
  %2 = load i32, i32* @cgraph_build_static_cdtor.counter, align 4, !dbg !5841
  %inc = add nsw i32 %2, 1, !dbg !5841
  store i32 %inc, i32* @cgraph_build_static_cdtor.counter, align 4, !dbg !5841
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.37, i64 0, i64 0), i32 %conv, i32 %1, i32 %2), !dbg !5842
  %arraydecay1 = getelementptr inbounds [16 x i8], [16 x i8]* %which_buf, i64 0, i64 0, !dbg !5843
  %call2 = call %union.tree_node* @get_file_function_name(i8* %arraydecay1), !dbg !5844
  store %union.tree_node* %call2, %union.tree_node** %name, align 8, !dbg !5845
  %3 = load i32, i32* @input_location, align 4, !dbg !5846
  %4 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !5846
  %5 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !5846
  %6 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 55), align 8, !dbg !5846
  %call3 = call %union.tree_node* @build_function_type(%union.tree_node* %5, %union.tree_node* %6), !dbg !5846
  %call4 = call %union.tree_node* @build_decl_stat(i32 %3, i32 29, %union.tree_node* %4, %union.tree_node* %call3), !dbg !5846
  store %union.tree_node* %call4, %union.tree_node** %decl, align 8, !dbg !5847
  %7 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5848
  store %union.tree_node* %7, %union.tree_node** @current_function_decl, align 8, !dbg !5849
  %8 = load i32, i32* @input_location, align 4, !dbg !5850
  %9 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !5850
  %call5 = call %union.tree_node* @build_decl_stat(i32 %8, i32 36, %union.tree_node* null, %union.tree_node* %9), !dbg !5850
  store %union.tree_node* %call5, %union.tree_node** %resdecl, align 8, !dbg !5851
  %10 = load %union.tree_node*, %union.tree_node** %resdecl, align 8, !dbg !5852
  %decl_common = bitcast %union.tree_node* %10 to %struct.tree_decl_common*, !dbg !5852
  %artificial_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !5852
  %11 = bitcast i40* %artificial_flag to i64*, !dbg !5852
  %bf.load = load i64, i64* %11, align 8, !dbg !5853
  %bf.clear = and i64 %bf.load, -4097, !dbg !5853
  %bf.set = or i64 %bf.clear, 4096, !dbg !5853
  store i64 %bf.set, i64* %11, align 8, !dbg !5853
  %12 = load %union.tree_node*, %union.tree_node** %resdecl, align 8, !dbg !5854
  %13 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5855
  %decl_non_common = bitcast %union.tree_node* %13 to %struct.tree_decl_non_common*, !dbg !5855
  %result = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 3, !dbg !5855
  store %union.tree_node* %12, %union.tree_node** %result, align 8, !dbg !5856
  %14 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5857
  %15 = load %union.tree_node*, %union.tree_node** %resdecl, align 8, !dbg !5858
  %decl_minimal = bitcast %union.tree_node* %15 to %struct.tree_decl_minimal*, !dbg !5858
  %context = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 4, !dbg !5858
  store %union.tree_node* %14, %union.tree_node** %context, align 8, !dbg !5859
  %16 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5860
  call void @allocate_struct_function(%union.tree_node* %16, i8 zeroext 0), !dbg !5861
  %17 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5862
  %base = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !5862
  %18 = bitcast %struct.tree_base* %base to i64*, !dbg !5862
  %bf.load6 = load i64, i64* %18, align 8, !dbg !5863
  %bf.clear7 = and i64 %bf.load6, -67108865, !dbg !5863
  %bf.set8 = or i64 %bf.clear7, 67108864, !dbg !5863
  store i64 %bf.set8, i64* %18, align 8, !dbg !5863
  %19 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5864
  %base9 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !5864
  %20 = bitcast %struct.tree_base* %base9 to i64*, !dbg !5864
  %bf.load10 = load i64, i64* %20, align 8, !dbg !5865
  %bf.clear11 = and i64 %bf.load10, -16777217, !dbg !5865
  %bf.set12 = or i64 %bf.clear11, 16777216, !dbg !5865
  store i64 %bf.set12, i64* %20, align 8, !dbg !5865
  %21 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5866
  %decl_common13 = bitcast %union.tree_node* %21 to %struct.tree_decl_common*, !dbg !5866
  %artificial_flag14 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common13, i32 0, i32 2, !dbg !5866
  %22 = bitcast i40* %artificial_flag14 to i64*, !dbg !5866
  %bf.load15 = load i64, i64* %22, align 8, !dbg !5867
  %bf.clear16 = and i64 %bf.load15, -4097, !dbg !5867
  %bf.set17 = or i64 %bf.clear16, 4096, !dbg !5867
  store i64 %bf.set17, i64* %22, align 8, !dbg !5867
  %23 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5868
  %function_decl = bitcast %union.tree_node* %23 to %struct.tree_function_decl*, !dbg !5868
  %no_instrument_function_entry_exit = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !5868
  %bf.load18 = load i32, i32* %no_instrument_function_entry_exit, align 8, !dbg !5869
  %bf.clear19 = and i32 %bf.load18, -16777217, !dbg !5869
  %bf.set20 = or i32 %bf.clear19, 16777216, !dbg !5869
  store i32 %bf.set20, i32* %no_instrument_function_entry_exit, align 8, !dbg !5869
  %24 = load %union.tree_node*, %union.tree_node** %body.addr, align 8, !dbg !5870
  %25 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5871
  %decl_non_common21 = bitcast %union.tree_node* %25 to %struct.tree_decl_non_common*, !dbg !5871
  %saved_tree = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common21, i32 0, i32 1, !dbg !5871
  store %union.tree_node* %24, %union.tree_node** %saved_tree, align 8, !dbg !5872
  %26 = load i8, i8* getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 112), align 1, !dbg !5873
  %tobool = icmp ne i8 %26, 0, !dbg !5875
  br i1 %tobool, label %if.end, label %if.then, !dbg !5876

if.then:                                          ; preds = %entry
  %27 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5877
  %base22 = bitcast %union.tree_node* %27 to %struct.tree_base*, !dbg !5877
  %28 = bitcast %struct.tree_base* %base22 to i64*, !dbg !5877
  %bf.load23 = load i64, i64* %28, align 8, !dbg !5879
  %bf.clear24 = and i64 %bf.load23, -134217729, !dbg !5879
  %bf.set25 = or i64 %bf.clear24, 134217728, !dbg !5879
  store i64 %bf.set25, i64* %28, align 8, !dbg !5879
  %29 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5880
  %decl_common26 = bitcast %union.tree_node* %29 to %struct.tree_decl_common*, !dbg !5880
  %preserve_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common26, i32 0, i32 2, !dbg !5880
  %30 = bitcast i40* %preserve_flag to i64*, !dbg !5880
  %bf.load27 = load i64, i64* %30, align 8, !dbg !5881
  %bf.clear28 = and i64 %bf.load27, -8193, !dbg !5881
  %bf.set29 = or i64 %bf.clear28, 8192, !dbg !5881
  store i64 %bf.set29, i64* %30, align 8, !dbg !5881
  br label %if.end, !dbg !5882

if.end:                                           ; preds = %if.then, %entry
  %31 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5883
  %function_decl30 = bitcast %union.tree_node* %31 to %struct.tree_function_decl*, !dbg !5883
  %uninlinable = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl30, i32 0, i32 5, !dbg !5883
  %bf.load31 = load i32, i32* %uninlinable, align 8, !dbg !5884
  %bf.clear32 = and i32 %bf.load31, -32769, !dbg !5884
  %bf.set33 = or i32 %bf.clear32, 32768, !dbg !5884
  store i32 %bf.set33, i32* %uninlinable, align 8, !dbg !5884
  %call34 = call %union.tree_node* @make_node_stat(i32 4), !dbg !5885
  %32 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5886
  %decl_common35 = bitcast %union.tree_node* %32 to %struct.tree_decl_common*, !dbg !5886
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common35, i32 0, i32 5, !dbg !5886
  store %union.tree_node* %call34, %union.tree_node** %initial, align 8, !dbg !5887
  %33 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5888
  %decl_common36 = bitcast %union.tree_node* %33 to %struct.tree_decl_common*, !dbg !5888
  %initial37 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common36, i32 0, i32 5, !dbg !5888
  %34 = load %union.tree_node*, %union.tree_node** %initial37, align 8, !dbg !5888
  %base38 = bitcast %union.tree_node* %34 to %struct.tree_base*, !dbg !5888
  %35 = bitcast %struct.tree_base* %base38 to i64*, !dbg !5888
  %bf.load39 = load i64, i64* %35, align 8, !dbg !5889
  %bf.clear40 = and i64 %bf.load39, -16777217, !dbg !5889
  %bf.set41 = or i64 %bf.clear40, 16777216, !dbg !5889
  store i64 %bf.set41, i64* %35, align 8, !dbg !5889
  %36 = load i32, i32* @input_location, align 4, !dbg !5890
  %37 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5891
  %decl_minimal42 = bitcast %union.tree_node* %37 to %struct.tree_decl_minimal*, !dbg !5891
  %locus = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal42, i32 0, i32 1, !dbg !5891
  store i32 %36, i32* %locus, align 8, !dbg !5892
  %38 = load i32, i32* @input_location, align 4, !dbg !5893
  %39 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5894
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %39, i64 0, !dbg !5894
  %function_end_locus = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 16, !dbg !5895
  store i32 %38, i32* %function_end_locus, align 4, !dbg !5896
  %40 = load i8, i8* %which.addr, align 1, !dbg !5897
  %conv43 = sext i8 %40 to i32, !dbg !5897
  switch i32 %conv43, label %sw.default [
    i32 73, label %sw.bb
    i32 68, label %sw.bb49
  ], !dbg !5898

sw.bb:                                            ; preds = %if.end
  %41 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5899
  %function_decl44 = bitcast %union.tree_node* %41 to %struct.tree_function_decl*, !dbg !5899
  %static_ctor_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl44, i32 0, i32 5, !dbg !5899
  %bf.load45 = load i32, i32* %static_ctor_flag, align 8, !dbg !5901
  %bf.clear46 = and i32 %bf.load45, -8193, !dbg !5901
  %bf.set47 = or i32 %bf.clear46, 8192, !dbg !5901
  store i32 %bf.set47, i32* %static_ctor_flag, align 8, !dbg !5901
  %42 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5902
  %43 = load i32, i32* %priority.addr, align 4, !dbg !5903
  %conv48 = trunc i32 %43 to i16, !dbg !5903
  call void @decl_init_priority_insert(%union.tree_node* %42, i16 zeroext %conv48), !dbg !5904
  br label %sw.epilog, !dbg !5905

sw.bb49:                                          ; preds = %if.end
  %44 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5906
  %function_decl50 = bitcast %union.tree_node* %44 to %struct.tree_function_decl*, !dbg !5906
  %static_dtor_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl50, i32 0, i32 5, !dbg !5906
  %bf.load51 = load i32, i32* %static_dtor_flag, align 8, !dbg !5907
  %bf.clear52 = and i32 %bf.load51, -16385, !dbg !5907
  %bf.set53 = or i32 %bf.clear52, 16384, !dbg !5907
  store i32 %bf.set53, i32* %static_dtor_flag, align 8, !dbg !5907
  %45 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5908
  %46 = load i32, i32* %priority.addr, align 4, !dbg !5909
  %conv54 = trunc i32 %46 to i16, !dbg !5909
  call void @decl_fini_priority_insert(%union.tree_node* %45, i16 zeroext %conv54), !dbg !5910
  br label %sw.epilog, !dbg !5911

sw.default:                                       ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0), i32 1985, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !5912
  br label %sw.epilog, !dbg !5913

sw.epilog:                                        ; preds = %sw.default, %sw.bb49, %sw.bb
  %47 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5914
  call void @gimplify_function_tree(%union.tree_node* %47), !dbg !5915
  %48 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5916
  call void @cgraph_add_new_function(%union.tree_node* %48, i8 zeroext 0), !dbg !5917
  %49 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5918
  %call55 = call %struct.cgraph_node* @cgraph_node(%union.tree_node* %49), !dbg !5919
  call void @cgraph_mark_needed_node(%struct.cgraph_node* %call55), !dbg !5920
  call void @set_cfun(%struct.function* null), !dbg !5921
  ret void, !dbg !5922
}

declare dso_local i32 @sprintf(i8*, i8*, ...) #2

declare dso_local %union.tree_node* @get_file_function_name(i8*) #2

declare dso_local %union.tree_node* @build_decl_stat(i32, i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @build_function_type(%union.tree_node*, %union.tree_node*) #2

declare dso_local void @allocate_struct_function(%union.tree_node*, i8 zeroext) #2

declare dso_local %union.tree_node* @make_node_stat(i32) #2

declare dso_local void @decl_init_priority_insert(%union.tree_node*, i16 zeroext) #2

declare dso_local void @decl_fini_priority_insert(%union.tree_node*, i16 zeroext) #2

declare dso_local void @gimplify_function_tree(%union.tree_node*) #2

declare dso_local void @cgraph_add_new_function(%union.tree_node*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @init_cgraph() #0 !dbg !5923 {
entry:
  %call = call %struct._IO_FILE* @dump_begin(i32 1, i32* null), !dbg !5924
  store %struct._IO_FILE* %call, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !5925
  ret void, !dbg !5926
}

declare dso_local %struct._IO_FILE* @dump_begin(i32, i32*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.cgraph_node* @cgraph_function_versioning(%struct.cgraph_node* %old_version_node, %struct.VEC_cgraph_edge_p_heap* %redirect_callers, %struct.VEC_ipa_replace_map_p_gc* %tree_map, %struct.bitmap_head_def* %args_to_skip) #0 !dbg !5927 {
entry:
  %retval = alloca %struct.cgraph_node*, align 8
  %old_version_node.addr = alloca %struct.cgraph_node*, align 8
  %redirect_callers.addr = alloca %struct.VEC_cgraph_edge_p_heap*, align 8
  %tree_map.addr = alloca %struct.VEC_ipa_replace_map_p_gc*, align 8
  %args_to_skip.addr = alloca %struct.bitmap_head_def*, align 8
  %old_decl = alloca %union.tree_node*, align 8
  %new_version_node = alloca %struct.cgraph_node*, align 8
  %new_decl = alloca %union.tree_node*, align 8
  store %struct.cgraph_node* %old_version_node, %struct.cgraph_node** %old_version_node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %old_version_node.addr, metadata !5942, metadata !DIExpression()), !dbg !5943
  store %struct.VEC_cgraph_edge_p_heap* %redirect_callers, %struct.VEC_cgraph_edge_p_heap** %redirect_callers.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_cgraph_edge_p_heap** %redirect_callers.addr, metadata !5944, metadata !DIExpression()), !dbg !5945
  store %struct.VEC_ipa_replace_map_p_gc* %tree_map, %struct.VEC_ipa_replace_map_p_gc** %tree_map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_replace_map_p_gc** %tree_map.addr, metadata !5946, metadata !DIExpression()), !dbg !5947
  store %struct.bitmap_head_def* %args_to_skip, %struct.bitmap_head_def** %args_to_skip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %args_to_skip.addr, metadata !5948, metadata !DIExpression()), !dbg !5949
  call void @llvm.dbg.declare(metadata %union.tree_node** %old_decl, metadata !5950, metadata !DIExpression()), !dbg !5951
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %old_version_node.addr, align 8, !dbg !5952
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 0, !dbg !5953
  %1 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5953
  store %union.tree_node* %1, %union.tree_node** %old_decl, align 8, !dbg !5951
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %new_version_node, metadata !5954, metadata !DIExpression()), !dbg !5955
  store %struct.cgraph_node* null, %struct.cgraph_node** %new_version_node, align 8, !dbg !5955
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_decl, metadata !5956, metadata !DIExpression()), !dbg !5957
  %2 = load %union.tree_node*, %union.tree_node** %old_decl, align 8, !dbg !5958
  %call = call zeroext i8 @tree_versionable_function_p(%union.tree_node* %2), !dbg !5960
  %tobool = icmp ne i8 %call, 0, !dbg !5960
  br i1 %tobool, label %if.end, label %if.then, !dbg !5961

if.then:                                          ; preds = %entry
  store %struct.cgraph_node* null, %struct.cgraph_node** %retval, align 8, !dbg !5962
  br label %return, !dbg !5962

if.end:                                           ; preds = %entry
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %args_to_skip.addr, align 8, !dbg !5963
  %tobool1 = icmp ne %struct.bitmap_head_def* %3, null, !dbg !5963
  br i1 %tobool1, label %if.else, label %if.then2, !dbg !5965

if.then2:                                         ; preds = %if.end
  %4 = load %union.tree_node*, %union.tree_node** %old_decl, align 8, !dbg !5966
  %call3 = call %union.tree_node* @copy_node_stat(%union.tree_node* %4), !dbg !5966
  store %union.tree_node* %call3, %union.tree_node** %new_decl, align 8, !dbg !5967
  br label %if.end5, !dbg !5968

if.else:                                          ; preds = %if.end
  %5 = load %union.tree_node*, %union.tree_node** %old_decl, align 8, !dbg !5969
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %args_to_skip.addr, align 8, !dbg !5970
  %call4 = call %union.tree_node* @build_function_decl_skip_args(%union.tree_node* %5, %struct.bitmap_head_def* %6), !dbg !5971
  store %union.tree_node* %call4, %union.tree_node** %new_decl, align 8, !dbg !5972
  br label %if.end5

if.end5:                                          ; preds = %if.else, %if.then2
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** %old_version_node.addr, align 8, !dbg !5973
  %8 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !5974
  %9 = load %struct.VEC_cgraph_edge_p_heap*, %struct.VEC_cgraph_edge_p_heap** %redirect_callers.addr, align 8, !dbg !5975
  %call6 = call %struct.cgraph_node* @cgraph_copy_node_for_versioning(%struct.cgraph_node* %7, %union.tree_node* %8, %struct.VEC_cgraph_edge_p_heap* %9), !dbg !5976
  store %struct.cgraph_node* %call6, %struct.cgraph_node** %new_version_node, align 8, !dbg !5977
  %10 = load %union.tree_node*, %union.tree_node** %old_decl, align 8, !dbg !5978
  %11 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !5979
  %12 = load %struct.VEC_ipa_replace_map_p_gc*, %struct.VEC_ipa_replace_map_p_gc** %tree_map.addr, align 8, !dbg !5980
  %13 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %args_to_skip.addr, align 8, !dbg !5981
  call void @tree_function_versioning(%union.tree_node* %10, %union.tree_node* %11, %struct.VEC_ipa_replace_map_p_gc* %12, i8 zeroext 0, %struct.bitmap_head_def* %13), !dbg !5982
  %14 = load %struct.cgraph_node*, %struct.cgraph_node** %new_version_node, align 8, !dbg !5983
  %decl7 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %14, i32 0, i32 0, !dbg !5984
  %15 = load %union.tree_node*, %union.tree_node** %decl7, align 8, !dbg !5984
  call void @cgraph_make_decl_local(%union.tree_node* %15), !dbg !5985
  %16 = load %struct.cgraph_node*, %struct.cgraph_node** %new_version_node, align 8, !dbg !5986
  %decl8 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %16, i32 0, i32 0, !dbg !5986
  %17 = load %union.tree_node*, %union.tree_node** %decl8, align 8, !dbg !5986
  %decl_common = bitcast %union.tree_node* %17 to %struct.tree_decl_common*, !dbg !5986
  %virtual_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !5986
  %18 = bitcast i40* %virtual_flag to i64*, !dbg !5986
  %bf.load = load i64, i64* %18, align 8, !dbg !5987
  %bf.clear = and i64 %bf.load, -513, !dbg !5987
  store i64 %bf.clear, i64* %18, align 8, !dbg !5987
  %19 = load %struct.cgraph_node*, %struct.cgraph_node** %new_version_node, align 8, !dbg !5988
  %local = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %19, i32 0, i32 18, !dbg !5989
  %externally_visible = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local, i32 0, i32 2, !dbg !5990
  %bf.load9 = load i8, i8* %externally_visible, align 8, !dbg !5991
  %bf.clear10 = and i8 %bf.load9, -3, !dbg !5991
  store i8 %bf.clear10, i8* %externally_visible, align 8, !dbg !5991
  %20 = load %struct.cgraph_node*, %struct.cgraph_node** %new_version_node, align 8, !dbg !5992
  %local11 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %20, i32 0, i32 18, !dbg !5993
  %local12 = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local11, i32 0, i32 2, !dbg !5994
  %bf.load13 = load i8, i8* %local12, align 8, !dbg !5995
  %bf.clear14 = and i8 %bf.load13, -2, !dbg !5995
  %bf.set = or i8 %bf.clear14, 1, !dbg !5995
  store i8 %bf.set, i8* %local12, align 8, !dbg !5995
  %21 = load %struct.cgraph_node*, %struct.cgraph_node** %new_version_node, align 8, !dbg !5996
  %lowered = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %21, i32 0, i32 27, !dbg !5997
  %bf.load15 = load i16, i16* %lowered, align 4, !dbg !5998
  %bf.clear16 = and i16 %bf.load15, -17, !dbg !5998
  %bf.set17 = or i16 %bf.clear16, 16, !dbg !5998
  store i16 %bf.set17, i16* %lowered, align 4, !dbg !5998
  %22 = load %struct.cgraph_node*, %struct.cgraph_node** %new_version_node, align 8, !dbg !5999
  call void @update_call_expr(%struct.cgraph_node* %22), !dbg !6000
  %23 = load %struct.cgraph_node*, %struct.cgraph_node** %new_version_node, align 8, !dbg !6001
  call void @cgraph_call_function_insertion_hooks(%struct.cgraph_node* %23), !dbg !6002
  %24 = load %struct.cgraph_node*, %struct.cgraph_node** %new_version_node, align 8, !dbg !6003
  store %struct.cgraph_node* %24, %struct.cgraph_node** %retval, align 8, !dbg !6004
  br label %return, !dbg !6004

return:                                           ; preds = %if.end5, %if.then
  %25 = load %struct.cgraph_node*, %struct.cgraph_node** %retval, align 8, !dbg !6005
  ret %struct.cgraph_node* %25, !dbg !6005
}

declare dso_local zeroext i8 @tree_versionable_function_p(%union.tree_node*) #2

declare dso_local %union.tree_node* @copy_node_stat(%union.tree_node*) #2

declare dso_local %union.tree_node* @build_function_decl_skip_args(%union.tree_node*, %struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.cgraph_node* @cgraph_copy_node_for_versioning(%struct.cgraph_node* %old_version, %union.tree_node* %new_decl, %struct.VEC_cgraph_edge_p_heap* %redirect_callers) #0 !dbg !6006 {
entry:
  %old_version.addr = alloca %struct.cgraph_node*, align 8
  %new_decl.addr = alloca %union.tree_node*, align 8
  %redirect_callers.addr = alloca %struct.VEC_cgraph_edge_p_heap*, align 8
  %new_version = alloca %struct.cgraph_node*, align 8
  %e = alloca %struct.cgraph_edge*, align 8
  %new_e = alloca %struct.cgraph_edge*, align 8
  %next_callee = alloca %struct.cgraph_edge*, align 8
  %i = alloca i32, align 4
  store %struct.cgraph_node* %old_version, %struct.cgraph_node** %old_version.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %old_version.addr, metadata !6009, metadata !DIExpression()), !dbg !6010
  store %union.tree_node* %new_decl, %union.tree_node** %new_decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_decl.addr, metadata !6011, metadata !DIExpression()), !dbg !6012
  store %struct.VEC_cgraph_edge_p_heap* %redirect_callers, %struct.VEC_cgraph_edge_p_heap** %redirect_callers.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_cgraph_edge_p_heap** %redirect_callers.addr, metadata !6013, metadata !DIExpression()), !dbg !6014
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %new_version, metadata !6015, metadata !DIExpression()), !dbg !6016
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %e, metadata !6017, metadata !DIExpression()), !dbg !6018
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %new_e, metadata !6019, metadata !DIExpression()), !dbg !6020
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %next_callee, metadata !6021, metadata !DIExpression()), !dbg !6022
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6023, metadata !DIExpression()), !dbg !6024
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %old_version.addr, align 8, !dbg !6025
  %tobool = icmp ne %struct.cgraph_node* %0, null, !dbg !6025
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6025

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0), i32 2039, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !6025
  br label %cond.end, !dbg !6025

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6025

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6025
  %1 = load %union.tree_node*, %union.tree_node** %new_decl.addr, align 8, !dbg !6026
  %call = call %struct.cgraph_node* @cgraph_node(%union.tree_node* %1), !dbg !6027
  store %struct.cgraph_node* %call, %struct.cgraph_node** %new_version, align 8, !dbg !6028
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %new_version, align 8, !dbg !6029
  %analyzed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %2, i32 0, i32 27, !dbg !6030
  %bf.load = load i16, i16* %analyzed, align 4, !dbg !6031
  %bf.clear = and i16 %bf.load, -33, !dbg !6031
  %bf.set = or i16 %bf.clear, 32, !dbg !6031
  store i16 %bf.set, i16* %analyzed, align 4, !dbg !6031
  %3 = load %struct.cgraph_node*, %struct.cgraph_node** %new_version, align 8, !dbg !6032
  %local = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %3, i32 0, i32 18, !dbg !6033
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %old_version.addr, align 8, !dbg !6034
  %local1 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %4, i32 0, i32 18, !dbg !6035
  %5 = bitcast %struct.cgraph_local_info* %local to i8*, !dbg !6035
  %6 = bitcast %struct.cgraph_local_info* %local1 to i8*, !dbg !6035
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 %6, i64 40, i1 false), !dbg !6035
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** %new_version, align 8, !dbg !6036
  %global = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %7, i32 0, i32 19, !dbg !6037
  %8 = load %struct.cgraph_node*, %struct.cgraph_node** %old_version.addr, align 8, !dbg !6038
  %global2 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %8, i32 0, i32 19, !dbg !6039
  %9 = bitcast %struct.cgraph_global_info* %global to i8*, !dbg !6039
  %10 = bitcast %struct.cgraph_global_info* %global2 to i8*, !dbg !6039
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 40, i1 false), !dbg !6039
  %11 = load %struct.cgraph_node*, %struct.cgraph_node** %new_version, align 8, !dbg !6040
  %rtl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %11, i32 0, i32 20, !dbg !6041
  %12 = load %struct.cgraph_node*, %struct.cgraph_node** %new_version, align 8, !dbg !6042
  %rtl3 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %12, i32 0, i32 20, !dbg !6043
  %13 = bitcast %struct.cgraph_rtl_info* %rtl to i8*, !dbg !6043
  %14 = bitcast %struct.cgraph_rtl_info* %rtl3 to i8*, !dbg !6043
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 4, i1 false), !dbg !6043
  %15 = load %struct.cgraph_node*, %struct.cgraph_node** %new_version, align 8, !dbg !6044
  %reachable = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %15, i32 0, i32 27, !dbg !6045
  %bf.load4 = load i16, i16* %reachable, align 4, !dbg !6046
  %bf.clear5 = and i16 %bf.load4, -9, !dbg !6046
  %bf.set6 = or i16 %bf.clear5, 8, !dbg !6046
  store i16 %bf.set6, i16* %reachable, align 4, !dbg !6046
  %16 = load %struct.cgraph_node*, %struct.cgraph_node** %old_version.addr, align 8, !dbg !6047
  %count = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %16, i32 0, i32 23, !dbg !6048
  %17 = load i64, i64* %count, align 8, !dbg !6048
  %18 = load %struct.cgraph_node*, %struct.cgraph_node** %new_version, align 8, !dbg !6049
  %count7 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %18, i32 0, i32 23, !dbg !6050
  store i64 %17, i64* %count7, align 8, !dbg !6051
  %19 = load %struct.cgraph_node*, %struct.cgraph_node** %old_version.addr, align 8, !dbg !6052
  %callees = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %19, i32 0, i32 1, !dbg !6054
  %20 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callees, align 8, !dbg !6054
  store %struct.cgraph_edge* %20, %struct.cgraph_edge** %e, align 8, !dbg !6055
  br label %for.cond, !dbg !6056

for.cond:                                         ; preds = %for.inc, %cond.end
  %21 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !6057
  %tobool8 = icmp ne %struct.cgraph_edge* %21, null, !dbg !6059
  br i1 %tobool8, label %for.body, label %for.end, !dbg !6059

for.body:                                         ; preds = %for.cond
  %22 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !6060
  %23 = load %struct.cgraph_node*, %struct.cgraph_node** %new_version, align 8, !dbg !6062
  %24 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !6063
  %call_stmt = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %24, i32 0, i32 7, !dbg !6064
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt, align 8, !dbg !6064
  %26 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !6065
  %lto_stmt_uid = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %26, i32 0, i32 10, !dbg !6066
  %27 = load i32, i32* %lto_stmt_uid, align 4, !dbg !6066
  %28 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !6067
  %frequency = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %28, i32 0, i32 11, !dbg !6068
  %29 = load i32, i32* %frequency, align 8, !dbg !6068
  %30 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !6069
  %loop_nest = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %30, i32 0, i32 13, !dbg !6070
  %31 = load i16, i16* %loop_nest, align 8, !dbg !6070
  %conv = zext i16 %31 to i32, !dbg !6069
  %call9 = call %struct.cgraph_edge* @cgraph_clone_edge(%struct.cgraph_edge* %22, %struct.cgraph_node* %23, %union.gimple_statement_d* %25, i32 %27, i64 0, i32 %29, i32 %conv, i8 zeroext 1), !dbg !6071
  store %struct.cgraph_edge* %call9, %struct.cgraph_edge** %new_e, align 8, !dbg !6072
  %32 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !6073
  %count10 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %32, i32 0, i32 0, !dbg !6074
  %33 = load i64, i64* %count10, align 8, !dbg !6074
  %34 = load %struct.cgraph_edge*, %struct.cgraph_edge** %new_e, align 8, !dbg !6075
  %count11 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %34, i32 0, i32 0, !dbg !6076
  store i64 %33, i64* %count11, align 8, !dbg !6077
  br label %for.inc, !dbg !6078

for.inc:                                          ; preds = %for.body
  %35 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !6079
  %next_callee12 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %35, i32 0, i32 6, !dbg !6080
  %36 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_callee12, align 8, !dbg !6080
  store %struct.cgraph_edge* %36, %struct.cgraph_edge** %e, align 8, !dbg !6081
  br label %for.cond, !dbg !6082, !llvm.loop !6083

for.end:                                          ; preds = %for.cond
  %37 = load %struct.cgraph_node*, %struct.cgraph_node** %new_version, align 8, !dbg !6085
  %callees13 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %37, i32 0, i32 1, !dbg !6087
  %38 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callees13, align 8, !dbg !6087
  store %struct.cgraph_edge* %38, %struct.cgraph_edge** %e, align 8, !dbg !6088
  br label %for.cond14, !dbg !6089

for.cond14:                                       ; preds = %for.inc22, %for.end
  %39 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !6090
  %tobool15 = icmp ne %struct.cgraph_edge* %39, null, !dbg !6092
  br i1 %tobool15, label %for.body16, label %for.end23, !dbg !6092

for.body16:                                       ; preds = %for.cond14
  %40 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !6093
  %next_callee17 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %40, i32 0, i32 6, !dbg !6095
  %41 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_callee17, align 8, !dbg !6095
  store %struct.cgraph_edge* %41, %struct.cgraph_edge** %next_callee, align 8, !dbg !6096
  %42 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !6097
  %callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %42, i32 0, i32 2, !dbg !6099
  %43 = load %struct.cgraph_node*, %struct.cgraph_node** %callee, align 8, !dbg !6099
  %44 = load %struct.cgraph_node*, %struct.cgraph_node** %old_version.addr, align 8, !dbg !6100
  %cmp = icmp eq %struct.cgraph_node* %43, %44, !dbg !6101
  br i1 %cmp, label %if.then, label %if.end, !dbg !6102

if.then:                                          ; preds = %for.body16
  %45 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !6103
  %46 = load %struct.cgraph_node*, %struct.cgraph_node** %new_version, align 8, !dbg !6104
  call void @cgraph_redirect_edge_callee(%struct.cgraph_edge* %45, %struct.cgraph_node* %46), !dbg !6105
  br label %if.end, !dbg !6105

if.end:                                           ; preds = %if.then, %for.body16
  %47 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_callee, align 8, !dbg !6106
  %tobool19 = icmp ne %struct.cgraph_edge* %47, null, !dbg !6106
  br i1 %tobool19, label %if.end21, label %if.then20, !dbg !6108

if.then20:                                        ; preds = %if.end
  br label %for.end23, !dbg !6109

if.end21:                                         ; preds = %if.end
  br label %for.inc22, !dbg !6110

for.inc22:                                        ; preds = %if.end21
  %48 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_callee, align 8, !dbg !6111
  store %struct.cgraph_edge* %48, %struct.cgraph_edge** %e, align 8, !dbg !6112
  br label %for.cond14, !dbg !6113, !llvm.loop !6114

for.end23:                                        ; preds = %if.then20, %for.cond14
  store i32 0, i32* %i, align 4, !dbg !6116
  br label %for.cond24, !dbg !6118

for.cond24:                                       ; preds = %for.inc33, %for.end23
  %49 = load %struct.VEC_cgraph_edge_p_heap*, %struct.VEC_cgraph_edge_p_heap** %redirect_callers.addr, align 8, !dbg !6119
  %tobool25 = icmp ne %struct.VEC_cgraph_edge_p_heap* %49, null, !dbg !6119
  br i1 %tobool25, label %cond.true26, label %cond.false27, !dbg !6119

cond.true26:                                      ; preds = %for.cond24
  %50 = load %struct.VEC_cgraph_edge_p_heap*, %struct.VEC_cgraph_edge_p_heap** %redirect_callers.addr, align 8, !dbg !6119
  %base = getelementptr inbounds %struct.VEC_cgraph_edge_p_heap, %struct.VEC_cgraph_edge_p_heap* %50, i32 0, i32 0, !dbg !6119
  br label %cond.end28, !dbg !6119

cond.false27:                                     ; preds = %for.cond24
  br label %cond.end28, !dbg !6119

cond.end28:                                       ; preds = %cond.false27, %cond.true26
  %cond29 = phi %struct.VEC_cgraph_edge_p_base* [ %base, %cond.true26 ], [ null, %cond.false27 ], !dbg !6119
  %51 = load i32, i32* %i, align 4, !dbg !6119
  %call30 = call i32 @VEC_cgraph_edge_p_base_iterate(%struct.VEC_cgraph_edge_p_base* %cond29, i32 %51, %struct.cgraph_edge** %e), !dbg !6119
  %tobool31 = icmp ne i32 %call30, 0, !dbg !6121
  br i1 %tobool31, label %for.body32, label %for.end34, !dbg !6121

for.body32:                                       ; preds = %cond.end28
  %52 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !6122
  %53 = load %struct.cgraph_node*, %struct.cgraph_node** %new_version, align 8, !dbg !6124
  call void @cgraph_redirect_edge_callee(%struct.cgraph_edge* %52, %struct.cgraph_node* %53), !dbg !6125
  br label %for.inc33, !dbg !6126

for.inc33:                                        ; preds = %for.body32
  %54 = load i32, i32* %i, align 4, !dbg !6127
  %inc = add i32 %54, 1, !dbg !6127
  store i32 %inc, i32* %i, align 4, !dbg !6127
  br label %for.cond24, !dbg !6128, !llvm.loop !6129

for.end34:                                        ; preds = %cond.end28
  %55 = load %struct.cgraph_node*, %struct.cgraph_node** %new_version, align 8, !dbg !6131
  ret %struct.cgraph_node* %55, !dbg !6132
}

declare dso_local void @tree_function_versioning(%union.tree_node*, %union.tree_node*, %struct.VEC_ipa_replace_map_p_gc*, i8 zeroext, %struct.bitmap_head_def*) #2

declare dso_local void @cgraph_make_decl_local(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @update_call_expr(%struct.cgraph_node* %new_version) #0 !dbg !6133 {
entry:
  %new_version.addr = alloca %struct.cgraph_node*, align 8
  %e = alloca %struct.cgraph_edge*, align 8
  %inner_function = alloca %struct.function*, align 8
  store %struct.cgraph_node* %new_version, %struct.cgraph_node** %new_version.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %new_version.addr, metadata !6134, metadata !DIExpression()), !dbg !6135
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %e, metadata !6136, metadata !DIExpression()), !dbg !6137
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %new_version.addr, align 8, !dbg !6138
  %tobool = icmp ne %struct.cgraph_node* %0, null, !dbg !6138
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6138

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0), i32 2010, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !6138
  br label %cond.end, !dbg !6138

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6138

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6138
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %new_version.addr, align 8, !dbg !6139
  %callers = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %1, i32 0, i32 2, !dbg !6141
  %2 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callers, align 8, !dbg !6141
  store %struct.cgraph_edge* %2, %struct.cgraph_edge** %e, align 8, !dbg !6142
  br label %for.cond, !dbg !6143

for.cond:                                         ; preds = %for.inc, %cond.end
  %3 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !6144
  %tobool1 = icmp ne %struct.cgraph_edge* %3, null, !dbg !6146
  br i1 %tobool1, label %for.body, label %for.end, !dbg !6146

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.function** %inner_function, metadata !6147, metadata !DIExpression()), !dbg !6149
  %4 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !6150
  %caller = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %4, i32 0, i32 1, !dbg !6150
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %caller, align 8, !dbg !6150
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %5, i32 0, i32 0, !dbg !6150
  %6 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6150
  %function_decl = bitcast %union.tree_node* %6 to %struct.tree_function_decl*, !dbg !6150
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !6150
  %7 = load %struct.function*, %struct.function** %f, align 8, !dbg !6150
  store %struct.function* %7, %struct.function** %inner_function, align 8, !dbg !6149
  %8 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !6151
  %call_stmt = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %8, i32 0, i32 7, !dbg !6152
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt, align 8, !dbg !6152
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %new_version.addr, align 8, !dbg !6153
  %decl2 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %10, i32 0, i32 0, !dbg !6154
  %11 = load %union.tree_node*, %union.tree_node** %decl2, align 8, !dbg !6154
  call void @gimple_call_set_fndecl(%union.gimple_statement_d* %9, %union.tree_node* %11), !dbg !6155
  %12 = load %struct.function*, %struct.function** %inner_function, align 8, !dbg !6156
  %13 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !6157
  %call_stmt3 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %13, i32 0, i32 7, !dbg !6158
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt3, align 8, !dbg !6158
  %call = call zeroext i8 @maybe_clean_eh_stmt_fn(%struct.function* %12, %union.gimple_statement_d* %14), !dbg !6159
  br label %for.inc, !dbg !6160

for.inc:                                          ; preds = %for.body
  %15 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !6161
  %next_caller = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %15, i32 0, i32 4, !dbg !6162
  %16 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_caller, align 8, !dbg !6162
  store %struct.cgraph_edge* %16, %struct.cgraph_edge** %e, align 8, !dbg !6163
  br label %for.cond, !dbg !6164, !llvm.loop !6165

for.end:                                          ; preds = %for.cond
  ret void, !dbg !6167
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.cgraph_node* @save_inline_function_body(%struct.cgraph_node* %node) #0 !dbg !6168 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  %first_clone = alloca %struct.cgraph_node*, align 8
  %n = alloca %struct.cgraph_node*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !6171, metadata !DIExpression()), !dbg !6172
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %first_clone, metadata !6173, metadata !DIExpression()), !dbg !6174
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %n, metadata !6175, metadata !DIExpression()), !dbg !6176
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6177
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6177
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %1, i32 0, i32 0, !dbg !6177
  %2 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6177
  %call = call %struct.cgraph_node* @cgraph_node(%union.tree_node* %2), !dbg !6177
  %cmp = icmp eq %struct.cgraph_node* %0, %call, !dbg !6177
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6177

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0), i32 2152, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !6177
  br label %cond.end, !dbg !6177

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6177

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6177
  %3 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6178
  call void @cgraph_lower_function(%struct.cgraph_node* %3), !dbg !6179
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6180
  %clones = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %4, i32 0, i32 11, !dbg !6181
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %clones, align 8, !dbg !6181
  store %struct.cgraph_node* %5, %struct.cgraph_node** %first_clone, align 8, !dbg !6182
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6183
  %decl1 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %6, i32 0, i32 0, !dbg !6183
  %7 = load %union.tree_node*, %union.tree_node** %decl1, align 8, !dbg !6183
  %call2 = call %union.tree_node* @copy_node_stat(%union.tree_node* %7), !dbg !6183
  %8 = load %struct.cgraph_node*, %struct.cgraph_node** %first_clone, align 8, !dbg !6184
  %decl3 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %8, i32 0, i32 0, !dbg !6185
  store %union.tree_node* %call2, %union.tree_node** %decl3, align 8, !dbg !6186
  %9 = load %struct.cgraph_node*, %struct.cgraph_node** %first_clone, align 8, !dbg !6187
  call void @cgraph_insert_node_to_hashtable(%struct.cgraph_node* %9), !dbg !6188
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %first_clone, align 8, !dbg !6189
  %11 = load %struct.cgraph_node*, %struct.cgraph_node** %first_clone, align 8, !dbg !6189
  %decl4 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %11, i32 0, i32 0, !dbg !6189
  %12 = load %union.tree_node*, %union.tree_node** %decl4, align 8, !dbg !6189
  %call5 = call %struct.cgraph_node* @cgraph_node(%union.tree_node* %12), !dbg !6189
  %cmp6 = icmp eq %struct.cgraph_node* %10, %call5, !dbg !6189
  br i1 %cmp6, label %cond.false8, label %cond.true7, !dbg !6189

cond.true7:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0), i32 2160, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !6189
  br label %cond.end9, !dbg !6189

cond.false8:                                      ; preds = %cond.end
  br label %cond.end9, !dbg !6189

cond.end9:                                        ; preds = %cond.false8, %cond.true7
  %cond10 = phi i32 [ 0, %cond.true7 ], [ 0, %cond.false8 ], !dbg !6189
  %13 = load %struct.cgraph_node*, %struct.cgraph_node** %first_clone, align 8, !dbg !6190
  %next_sibling_clone = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %13, i32 0, i32 9, !dbg !6192
  %14 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone, align 8, !dbg !6192
  %tobool = icmp ne %struct.cgraph_node* %14, null, !dbg !6190
  br i1 %tobool, label %if.then, label %if.end33, !dbg !6193

if.then:                                          ; preds = %cond.end9
  %15 = load %struct.cgraph_node*, %struct.cgraph_node** %first_clone, align 8, !dbg !6194
  %next_sibling_clone11 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %15, i32 0, i32 9, !dbg !6197
  %16 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone11, align 8, !dbg !6197
  store %struct.cgraph_node* %16, %struct.cgraph_node** %n, align 8, !dbg !6198
  br label %for.cond, !dbg !6199

for.cond:                                         ; preds = %for.inc, %if.then
  %17 = load %struct.cgraph_node*, %struct.cgraph_node** %n, align 8, !dbg !6200
  %next_sibling_clone12 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %17, i32 0, i32 9, !dbg !6202
  %18 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone12, align 8, !dbg !6202
  %tobool13 = icmp ne %struct.cgraph_node* %18, null, !dbg !6203
  br i1 %tobool13, label %for.body, label %for.end, !dbg !6203

for.body:                                         ; preds = %for.cond
  %19 = load %struct.cgraph_node*, %struct.cgraph_node** %first_clone, align 8, !dbg !6204
  %20 = load %struct.cgraph_node*, %struct.cgraph_node** %n, align 8, !dbg !6205
  %clone_of = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %20, i32 0, i32 12, !dbg !6206
  store %struct.cgraph_node* %19, %struct.cgraph_node** %clone_of, align 8, !dbg !6207
  br label %for.inc, !dbg !6205

for.inc:                                          ; preds = %for.body
  %21 = load %struct.cgraph_node*, %struct.cgraph_node** %n, align 8, !dbg !6208
  %next_sibling_clone14 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %21, i32 0, i32 9, !dbg !6209
  %22 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone14, align 8, !dbg !6209
  store %struct.cgraph_node* %22, %struct.cgraph_node** %n, align 8, !dbg !6210
  br label %for.cond, !dbg !6211, !llvm.loop !6212

for.end:                                          ; preds = %for.cond
  %23 = load %struct.cgraph_node*, %struct.cgraph_node** %first_clone, align 8, !dbg !6214
  %24 = load %struct.cgraph_node*, %struct.cgraph_node** %n, align 8, !dbg !6215
  %clone_of15 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %24, i32 0, i32 12, !dbg !6216
  store %struct.cgraph_node* %23, %struct.cgraph_node** %clone_of15, align 8, !dbg !6217
  %25 = load %struct.cgraph_node*, %struct.cgraph_node** %first_clone, align 8, !dbg !6218
  %clones16 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %25, i32 0, i32 11, !dbg !6219
  %26 = load %struct.cgraph_node*, %struct.cgraph_node** %clones16, align 8, !dbg !6219
  %27 = load %struct.cgraph_node*, %struct.cgraph_node** %n, align 8, !dbg !6220
  %next_sibling_clone17 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %27, i32 0, i32 9, !dbg !6221
  store %struct.cgraph_node* %26, %struct.cgraph_node** %next_sibling_clone17, align 8, !dbg !6222
  %28 = load %struct.cgraph_node*, %struct.cgraph_node** %first_clone, align 8, !dbg !6223
  %clones18 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %28, i32 0, i32 11, !dbg !6225
  %29 = load %struct.cgraph_node*, %struct.cgraph_node** %clones18, align 8, !dbg !6225
  %tobool19 = icmp ne %struct.cgraph_node* %29, null, !dbg !6223
  br i1 %tobool19, label %if.then20, label %if.end, !dbg !6226

if.then20:                                        ; preds = %for.end
  %30 = load %struct.cgraph_node*, %struct.cgraph_node** %n, align 8, !dbg !6227
  %31 = load %struct.cgraph_node*, %struct.cgraph_node** %first_clone, align 8, !dbg !6228
  %clones21 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %31, i32 0, i32 11, !dbg !6229
  %32 = load %struct.cgraph_node*, %struct.cgraph_node** %clones21, align 8, !dbg !6229
  %prev_sibling_clone = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %32, i32 0, i32 10, !dbg !6230
  store %struct.cgraph_node* %30, %struct.cgraph_node** %prev_sibling_clone, align 8, !dbg !6231
  br label %if.end, !dbg !6228

if.end:                                           ; preds = %if.then20, %for.end
  %33 = load %struct.cgraph_node*, %struct.cgraph_node** %first_clone, align 8, !dbg !6232
  %next_sibling_clone22 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %33, i32 0, i32 9, !dbg !6233
  %34 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone22, align 8, !dbg !6233
  %35 = load %struct.cgraph_node*, %struct.cgraph_node** %first_clone, align 8, !dbg !6234
  %clones23 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %35, i32 0, i32 11, !dbg !6235
  store %struct.cgraph_node* %34, %struct.cgraph_node** %clones23, align 8, !dbg !6236
  %36 = load %struct.cgraph_node*, %struct.cgraph_node** %first_clone, align 8, !dbg !6237
  %next_sibling_clone24 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %36, i32 0, i32 9, !dbg !6238
  %37 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone24, align 8, !dbg !6238
  %prev_sibling_clone25 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %37, i32 0, i32 10, !dbg !6239
  store %struct.cgraph_node* null, %struct.cgraph_node** %prev_sibling_clone25, align 8, !dbg !6240
  %38 = load %struct.cgraph_node*, %struct.cgraph_node** %first_clone, align 8, !dbg !6241
  %next_sibling_clone26 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %38, i32 0, i32 9, !dbg !6242
  store %struct.cgraph_node* null, %struct.cgraph_node** %next_sibling_clone26, align 8, !dbg !6243
  %39 = load %struct.cgraph_node*, %struct.cgraph_node** %first_clone, align 8, !dbg !6244
  %prev_sibling_clone27 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %39, i32 0, i32 10, !dbg !6244
  %40 = load %struct.cgraph_node*, %struct.cgraph_node** %prev_sibling_clone27, align 8, !dbg !6244
  %tobool28 = icmp ne %struct.cgraph_node* %40, null, !dbg !6244
  br i1 %tobool28, label %cond.true29, label %cond.false30, !dbg !6244

cond.true29:                                      ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0), i32 2172, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !6244
  br label %cond.end31, !dbg !6244

cond.false30:                                     ; preds = %if.end
  br label %cond.end31, !dbg !6244

cond.end31:                                       ; preds = %cond.false30, %cond.true29
  %cond32 = phi i32 [ 0, %cond.true29 ], [ 0, %cond.false30 ], !dbg !6244
  br label %if.end33, !dbg !6245

if.end33:                                         ; preds = %cond.end31, %cond.end9
  %41 = load %struct.cgraph_node*, %struct.cgraph_node** %first_clone, align 8, !dbg !6246
  %clone_of34 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %41, i32 0, i32 12, !dbg !6247
  store %struct.cgraph_node* null, %struct.cgraph_node** %clone_of34, align 8, !dbg !6248
  %42 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6249
  %clones35 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %42, i32 0, i32 11, !dbg !6250
  store %struct.cgraph_node* null, %struct.cgraph_node** %clones35, align 8, !dbg !6251
  %43 = load %struct.cgraph_node*, %struct.cgraph_node** %first_clone, align 8, !dbg !6252
  %clones36 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %43, i32 0, i32 11, !dbg !6254
  %44 = load %struct.cgraph_node*, %struct.cgraph_node** %clones36, align 8, !dbg !6254
  %tobool37 = icmp ne %struct.cgraph_node* %44, null, !dbg !6252
  br i1 %tobool37, label %if.then38, label %if.end72, !dbg !6255

if.then38:                                        ; preds = %if.end33
  %45 = load %struct.cgraph_node*, %struct.cgraph_node** %first_clone, align 8, !dbg !6256
  %clones39 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %45, i32 0, i32 11, !dbg !6258
  %46 = load %struct.cgraph_node*, %struct.cgraph_node** %clones39, align 8, !dbg !6258
  store %struct.cgraph_node* %46, %struct.cgraph_node** %n, align 8, !dbg !6259
  br label %for.cond40, !dbg !6260

for.cond40:                                       ; preds = %if.end70, %if.then38
  %47 = load %struct.cgraph_node*, %struct.cgraph_node** %n, align 8, !dbg !6261
  %48 = load %struct.cgraph_node*, %struct.cgraph_node** %first_clone, align 8, !dbg !6263
  %cmp41 = icmp ne %struct.cgraph_node* %47, %48, !dbg !6264
  br i1 %cmp41, label %for.body42, label %for.end71, !dbg !6265

for.body42:                                       ; preds = %for.cond40
  %49 = load %struct.cgraph_node*, %struct.cgraph_node** %n, align 8, !dbg !6266
  %decl43 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %49, i32 0, i32 0, !dbg !6266
  %50 = load %union.tree_node*, %union.tree_node** %decl43, align 8, !dbg !6266
  %51 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6266
  %decl44 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %51, i32 0, i32 0, !dbg !6266
  %52 = load %union.tree_node*, %union.tree_node** %decl44, align 8, !dbg !6266
  %cmp45 = icmp eq %union.tree_node* %50, %52, !dbg !6266
  br i1 %cmp45, label %cond.false47, label %cond.true46, !dbg !6266

cond.true46:                                      ; preds = %for.body42
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0), i32 2180, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !6266
  br label %cond.end48, !dbg !6266

cond.false47:                                     ; preds = %for.body42
  br label %cond.end48, !dbg !6266

cond.end48:                                       ; preds = %cond.false47, %cond.true46
  %cond49 = phi i32 [ 0, %cond.true46 ], [ 0, %cond.false47 ], !dbg !6266
  %53 = load %struct.cgraph_node*, %struct.cgraph_node** %first_clone, align 8, !dbg !6268
  %decl50 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %53, i32 0, i32 0, !dbg !6269
  %54 = load %union.tree_node*, %union.tree_node** %decl50, align 8, !dbg !6269
  %55 = load %struct.cgraph_node*, %struct.cgraph_node** %n, align 8, !dbg !6270
  %decl51 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %55, i32 0, i32 0, !dbg !6271
  store %union.tree_node* %54, %union.tree_node** %decl51, align 8, !dbg !6272
  %56 = load %struct.cgraph_node*, %struct.cgraph_node** %n, align 8, !dbg !6273
  %clones52 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %56, i32 0, i32 11, !dbg !6275
  %57 = load %struct.cgraph_node*, %struct.cgraph_node** %clones52, align 8, !dbg !6275
  %tobool53 = icmp ne %struct.cgraph_node* %57, null, !dbg !6273
  br i1 %tobool53, label %if.then54, label %if.else, !dbg !6276

if.then54:                                        ; preds = %cond.end48
  %58 = load %struct.cgraph_node*, %struct.cgraph_node** %n, align 8, !dbg !6277
  %clones55 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %58, i32 0, i32 11, !dbg !6278
  %59 = load %struct.cgraph_node*, %struct.cgraph_node** %clones55, align 8, !dbg !6278
  store %struct.cgraph_node* %59, %struct.cgraph_node** %n, align 8, !dbg !6279
  br label %if.end70, !dbg !6280

if.else:                                          ; preds = %cond.end48
  %60 = load %struct.cgraph_node*, %struct.cgraph_node** %n, align 8, !dbg !6281
  %next_sibling_clone56 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %60, i32 0, i32 9, !dbg !6283
  %61 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone56, align 8, !dbg !6283
  %tobool57 = icmp ne %struct.cgraph_node* %61, null, !dbg !6281
  br i1 %tobool57, label %if.then58, label %if.else60, !dbg !6284

if.then58:                                        ; preds = %if.else
  %62 = load %struct.cgraph_node*, %struct.cgraph_node** %n, align 8, !dbg !6285
  %next_sibling_clone59 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %62, i32 0, i32 9, !dbg !6286
  %63 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone59, align 8, !dbg !6286
  store %struct.cgraph_node* %63, %struct.cgraph_node** %n, align 8, !dbg !6287
  br label %if.end69, !dbg !6288

if.else60:                                        ; preds = %if.else
  br label %while.cond, !dbg !6289

while.cond:                                       ; preds = %while.body, %if.else60
  %64 = load %struct.cgraph_node*, %struct.cgraph_node** %n, align 8, !dbg !6291
  %65 = load %struct.cgraph_node*, %struct.cgraph_node** %first_clone, align 8, !dbg !6292
  %cmp61 = icmp ne %struct.cgraph_node* %64, %65, !dbg !6293
  br i1 %cmp61, label %land.rhs, label %land.end, !dbg !6294

land.rhs:                                         ; preds = %while.cond
  %66 = load %struct.cgraph_node*, %struct.cgraph_node** %n, align 8, !dbg !6295
  %next_sibling_clone62 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %66, i32 0, i32 9, !dbg !6296
  %67 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone62, align 8, !dbg !6296
  %tobool63 = icmp ne %struct.cgraph_node* %67, null, !dbg !6297
  %lnot = xor i1 %tobool63, true, !dbg !6297
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %68 = phi i1 [ false, %while.cond ], [ %lnot, %land.rhs ], !dbg !6298
  br i1 %68, label %while.body, label %while.end, !dbg !6289

while.body:                                       ; preds = %land.end
  %69 = load %struct.cgraph_node*, %struct.cgraph_node** %n, align 8, !dbg !6299
  %clone_of64 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %69, i32 0, i32 12, !dbg !6300
  %70 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of64, align 8, !dbg !6300
  store %struct.cgraph_node* %70, %struct.cgraph_node** %n, align 8, !dbg !6301
  br label %while.cond, !dbg !6289, !llvm.loop !6302

while.end:                                        ; preds = %land.end
  %71 = load %struct.cgraph_node*, %struct.cgraph_node** %n, align 8, !dbg !6303
  %72 = load %struct.cgraph_node*, %struct.cgraph_node** %first_clone, align 8, !dbg !6305
  %cmp65 = icmp ne %struct.cgraph_node* %71, %72, !dbg !6306
  br i1 %cmp65, label %if.then66, label %if.end68, !dbg !6307

if.then66:                                        ; preds = %while.end
  %73 = load %struct.cgraph_node*, %struct.cgraph_node** %n, align 8, !dbg !6308
  %next_sibling_clone67 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %73, i32 0, i32 9, !dbg !6309
  %74 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone67, align 8, !dbg !6309
  store %struct.cgraph_node* %74, %struct.cgraph_node** %n, align 8, !dbg !6310
  br label %if.end68, !dbg !6311

if.end68:                                         ; preds = %if.then66, %while.end
  br label %if.end69

if.end69:                                         ; preds = %if.end68, %if.then58
  br label %if.end70

if.end70:                                         ; preds = %if.end69, %if.then54
  br label %for.cond40, !dbg !6312, !llvm.loop !6313

for.end71:                                        ; preds = %for.cond40
  br label %if.end72, !dbg !6314

if.end72:                                         ; preds = %for.end71, %if.end33
  %75 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6315
  %decl73 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %75, i32 0, i32 0, !dbg !6316
  %76 = load %union.tree_node*, %union.tree_node** %decl73, align 8, !dbg !6316
  %77 = load %struct.cgraph_node*, %struct.cgraph_node** %first_clone, align 8, !dbg !6317
  %decl74 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %77, i32 0, i32 0, !dbg !6318
  %78 = load %union.tree_node*, %union.tree_node** %decl74, align 8, !dbg !6318
  call void @tree_function_versioning(%union.tree_node* %76, %union.tree_node* %78, %struct.VEC_ipa_replace_map_p_gc* null, i8 zeroext 1, %struct.bitmap_head_def* null), !dbg !6319
  %79 = load %struct.cgraph_node*, %struct.cgraph_node** %first_clone, align 8, !dbg !6320
  %decl75 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %79, i32 0, i32 0, !dbg !6320
  %80 = load %union.tree_node*, %union.tree_node** %decl75, align 8, !dbg !6320
  %decl_common = bitcast %union.tree_node* %80 to %struct.tree_decl_common*, !dbg !6320
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !6320
  %81 = bitcast i40* %decl_flag_1 to i64*, !dbg !6320
  %bf.load = load i64, i64* %81, align 8, !dbg !6321
  %bf.clear = and i64 %bf.load, -33554433, !dbg !6321
  store i64 %bf.clear, i64* %81, align 8, !dbg !6321
  %82 = load %struct.cgraph_node*, %struct.cgraph_node** %first_clone, align 8, !dbg !6322
  %decl76 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %82, i32 0, i32 0, !dbg !6322
  %83 = load %union.tree_node*, %union.tree_node** %decl76, align 8, !dbg !6322
  %decl_with_vis = bitcast %union.tree_node* %83 to %struct.tree_decl_with_vis*, !dbg !6322
  %comdat_group = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 3, !dbg !6322
  store %union.tree_node* null, %union.tree_node** %comdat_group, align 8, !dbg !6323
  %84 = load %struct.cgraph_node*, %struct.cgraph_node** %first_clone, align 8, !dbg !6324
  %decl77 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %84, i32 0, i32 0, !dbg !6324
  %85 = load %union.tree_node*, %union.tree_node** %decl77, align 8, !dbg !6324
  %base = bitcast %union.tree_node* %85 to %struct.tree_base*, !dbg !6324
  %86 = bitcast %struct.tree_base* %base to i64*, !dbg !6324
  %bf.load78 = load i64, i64* %86, align 8, !dbg !6325
  %bf.clear79 = and i64 %bf.load78, -134217729, !dbg !6325
  store i64 %bf.clear79, i64* %86, align 8, !dbg !6325
  %87 = load %struct.cgraph_node*, %struct.cgraph_node** %first_clone, align 8, !dbg !6326
  %decl80 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %87, i32 0, i32 0, !dbg !6326
  %88 = load %union.tree_node*, %union.tree_node** %decl80, align 8, !dbg !6326
  %decl_with_vis81 = bitcast %union.tree_node* %88 to %struct.tree_decl_with_vis*, !dbg !6326
  %comdat_flag = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis81, i32 0, i32 4, !dbg !6326
  %89 = bitcast i24* %comdat_flag to i32*, !dbg !6326
  %bf.load82 = load i32, i32* %89, align 8, !dbg !6327
  %bf.clear83 = and i32 %bf.load82, -513, !dbg !6327
  store i32 %bf.clear83, i32* %89, align 8, !dbg !6327
  %90 = load %struct.cgraph_node*, %struct.cgraph_node** %first_clone, align 8, !dbg !6328
  %ipa_transforms_to_apply = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %90, i32 0, i32 17, !dbg !6328
  call void @VEC_ipa_opt_pass_heap_free(%struct.VEC_ipa_opt_pass_heap** %ipa_transforms_to_apply), !dbg !6328
  %91 = load %struct.cgraph_node*, %struct.cgraph_node** %first_clone, align 8, !dbg !6329
  %ipa_transforms_to_apply84 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %91, i32 0, i32 17, !dbg !6330
  store %struct.VEC_ipa_opt_pass_heap* null, %struct.VEC_ipa_opt_pass_heap** %ipa_transforms_to_apply84, align 8, !dbg !6331
  %92 = load %struct.cgraph_node*, %struct.cgraph_node** %first_clone, align 8, !dbg !6332
  ret %struct.cgraph_node* %92, !dbg !6333
}

; Function Attrs: noinline nounwind uwtable
define internal void @cgraph_lower_function(%struct.cgraph_node* %node) #0 !dbg !6334 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !6335, metadata !DIExpression()), !dbg !6336
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6337
  %lowered = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 27, !dbg !6339
  %bf.load = load i16, i16* %lowered, align 4, !dbg !6339
  %bf.lshr = lshr i16 %bf.load, 4, !dbg !6339
  %bf.clear = and i16 %bf.lshr, 1, !dbg !6339
  %bf.cast = zext i16 %bf.clear to i32, !dbg !6339
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !6337
  br i1 %tobool, label %if.then, label %if.end, !dbg !6340

if.then:                                          ; preds = %entry
  br label %return, !dbg !6341

if.end:                                           ; preds = %entry
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6342
  %nested = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %1, i32 0, i32 6, !dbg !6344
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %nested, align 8, !dbg !6344
  %tobool1 = icmp ne %struct.cgraph_node* %2, null, !dbg !6342
  br i1 %tobool1, label %if.then2, label %if.end3, !dbg !6345

if.then2:                                         ; preds = %if.end
  %3 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6346
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %3, i32 0, i32 0, !dbg !6347
  %4 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6347
  call void @lower_nested_functions(%union.tree_node* %4), !dbg !6348
  br label %if.end3, !dbg !6348

if.end3:                                          ; preds = %if.then2, %if.end
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6349
  %nested4 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %5, i32 0, i32 6, !dbg !6349
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %nested4, align 8, !dbg !6349
  %tobool5 = icmp ne %struct.cgraph_node* %6, null, !dbg !6349
  br i1 %tobool5, label %cond.true, label %cond.false, !dbg !6349

cond.true:                                        ; preds = %if.end3
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0), i32 511, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !6349
  br label %cond.end, !dbg !6349

cond.false:                                       ; preds = %if.end3
  br label %cond.end, !dbg !6349

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6349
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6350
  %decl6 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %7, i32 0, i32 0, !dbg !6351
  %8 = load %union.tree_node*, %union.tree_node** %decl6, align 8, !dbg !6351
  call void @tree_lowering_passes(%union.tree_node* %8), !dbg !6352
  %9 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6353
  %lowered7 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %9, i32 0, i32 27, !dbg !6354
  %bf.load8 = load i16, i16* %lowered7, align 4, !dbg !6355
  %bf.clear9 = and i16 %bf.load8, -17, !dbg !6355
  %bf.set = or i16 %bf.clear9, 16, !dbg !6355
  store i16 %bf.set, i16* %lowered7, align 4, !dbg !6355
  br label %return, !dbg !6356

return:                                           ; preds = %cond.end, %if.then
  ret void, !dbg !6356
}

declare dso_local void @cgraph_insert_node_to_hashtable(%struct.cgraph_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_ipa_opt_pass_heap_free(%struct.VEC_ipa_opt_pass_heap** %vec_) #0 !dbg !6357 {
entry:
  %vec_.addr = alloca %struct.VEC_ipa_opt_pass_heap**, align 8
  store %struct.VEC_ipa_opt_pass_heap** %vec_, %struct.VEC_ipa_opt_pass_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_opt_pass_heap*** %vec_.addr, metadata !6361, metadata !DIExpression()), !dbg !6362
  %0 = load %struct.VEC_ipa_opt_pass_heap**, %struct.VEC_ipa_opt_pass_heap*** %vec_.addr, align 8, !dbg !6363
  %1 = load %struct.VEC_ipa_opt_pass_heap*, %struct.VEC_ipa_opt_pass_heap** %0, align 8, !dbg !6363
  %tobool = icmp ne %struct.VEC_ipa_opt_pass_heap* %1, null, !dbg !6363
  br i1 %tobool, label %if.then, label %if.end, !dbg !6362

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_ipa_opt_pass_heap**, %struct.VEC_ipa_opt_pass_heap*** %vec_.addr, align 8, !dbg !6363
  %3 = load %struct.VEC_ipa_opt_pass_heap*, %struct.VEC_ipa_opt_pass_heap** %2, align 8, !dbg !6363
  %4 = bitcast %struct.VEC_ipa_opt_pass_heap* %3 to i8*, !dbg !6363
  call void @free(i8* %4), !dbg !6363
  br label %if.end, !dbg !6363

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_ipa_opt_pass_heap**, %struct.VEC_ipa_opt_pass_heap*** %vec_.addr, align 8, !dbg !6362
  store %struct.VEC_ipa_opt_pass_heap* null, %struct.VEC_ipa_opt_pass_heap** %5, align 8, !dbg !6362
  ret void, !dbg !6362
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.gimple_statement_d* @cgraph_redirect_edge_call_stmt_to_callee(%struct.cgraph_edge* %e) #0 !dbg !6365 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %e.addr = alloca %struct.cgraph_edge*, align 8
  %decl = alloca %union.tree_node*, align 8
  %new_stmt = alloca %union.gimple_statement_d*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.cgraph_edge* %e, %struct.cgraph_edge** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %e.addr, metadata !6368, metadata !DIExpression()), !dbg !6369
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !6370, metadata !DIExpression()), !dbg !6371
  %0 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !6372
  %call_stmt = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %0, i32 0, i32 7, !dbg !6373
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt, align 8, !dbg !6373
  %call = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %1), !dbg !6374
  store %union.tree_node* %call, %union.tree_node** %decl, align 8, !dbg !6371
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %new_stmt, metadata !6375, metadata !DIExpression()), !dbg !6376
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !6377, metadata !DIExpression()), !dbg !6378
  %2 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6379
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !6379
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !6381

lor.lhs.false:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6382
  %4 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !6383
  %callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %4, i32 0, i32 2, !dbg !6384
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %callee, align 8, !dbg !6384
  %decl1 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %5, i32 0, i32 0, !dbg !6385
  %6 = load %union.tree_node*, %union.tree_node** %decl1, align 8, !dbg !6385
  %cmp = icmp eq %union.tree_node* %3, %6, !dbg !6386
  br i1 %cmp, label %if.then, label %lor.lhs.false2, !dbg !6387

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %7 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6388
  %call3 = call %struct.cgraph_node* @cgraph_get_node(%union.tree_node* %7), !dbg !6389
  %8 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !6390
  %callee4 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %8, i32 0, i32 2, !dbg !6391
  %9 = load %struct.cgraph_node*, %struct.cgraph_node** %callee4, align 8, !dbg !6391
  %decl5 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %9, i32 0, i32 0, !dbg !6392
  %10 = load %union.tree_node*, %union.tree_node** %decl5, align 8, !dbg !6392
  %call6 = call %struct.cgraph_node* @cgraph_get_node(%union.tree_node* %10), !dbg !6393
  %cmp7 = icmp eq %struct.cgraph_node* %call3, %call6, !dbg !6394
  br i1 %cmp7, label %if.then, label %if.end, !dbg !6395

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  %11 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !6396
  %call_stmt8 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %11, i32 0, i32 7, !dbg !6397
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt8, align 8, !dbg !6397
  store %union.gimple_statement_d* %12, %union.gimple_statement_d** %retval, align 8, !dbg !6398
  br label %return, !dbg !6398

if.end:                                           ; preds = %lor.lhs.false2
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !6399
  %tobool9 = icmp ne %struct._IO_FILE* %13, null, !dbg !6399
  br i1 %tobool9, label %if.then10, label %if.end19, !dbg !6401

if.then10:                                        ; preds = %if.end
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !6402
  %15 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !6404
  %caller = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %15, i32 0, i32 1, !dbg !6405
  %16 = load %struct.cgraph_node*, %struct.cgraph_node** %caller, align 8, !dbg !6405
  %call11 = call i8* @cgraph_node_name(%struct.cgraph_node* %16), !dbg !6406
  %17 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !6407
  %caller12 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %17, i32 0, i32 1, !dbg !6408
  %18 = load %struct.cgraph_node*, %struct.cgraph_node** %caller12, align 8, !dbg !6408
  %uid = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %18, i32 0, i32 24, !dbg !6409
  %19 = load i32, i32* %uid, align 8, !dbg !6409
  %20 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !6410
  %callee13 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %20, i32 0, i32 2, !dbg !6411
  %21 = load %struct.cgraph_node*, %struct.cgraph_node** %callee13, align 8, !dbg !6411
  %call14 = call i8* @cgraph_node_name(%struct.cgraph_node* %21), !dbg !6412
  %22 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !6413
  %callee15 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %22, i32 0, i32 2, !dbg !6414
  %23 = load %struct.cgraph_node*, %struct.cgraph_node** %callee15, align 8, !dbg !6414
  %uid16 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %23, i32 0, i32 24, !dbg !6415
  %24 = load i32, i32* %uid16, align 8, !dbg !6415
  %call17 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.38, i64 0, i64 0), i8* %call11, i32 %19, i8* %call14, i32 %24), !dbg !6416
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !6417
  %26 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !6418
  %call_stmt18 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %26, i32 0, i32 7, !dbg !6419
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt18, align 8, !dbg !6419
  %28 = load i32, i32* @dump_flags, align 4, !dbg !6420
  call void @print_gimple_stmt(%struct._IO_FILE* %25, %union.gimple_statement_d* %27, i32 0, i32 %28), !dbg !6421
  br label %if.end19, !dbg !6422

if.end19:                                         ; preds = %if.then10, %if.end
  %29 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !6423
  %callee20 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %29, i32 0, i32 2, !dbg !6425
  %30 = load %struct.cgraph_node*, %struct.cgraph_node** %callee20, align 8, !dbg !6425
  %clone = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %30, i32 0, i32 21, !dbg !6426
  %combined_args_to_skip = getelementptr inbounds %struct.cgraph_clone_info, %struct.cgraph_clone_info* %clone, i32 0, i32 2, !dbg !6427
  %31 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %combined_args_to_skip, align 8, !dbg !6427
  %tobool21 = icmp ne %struct.bitmap_head_def* %31, null, !dbg !6423
  br i1 %tobool21, label %if.then22, label %if.else, !dbg !6428

if.then22:                                        ; preds = %if.end19
  %32 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !6429
  %call_stmt23 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %32, i32 0, i32 7, !dbg !6430
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt23, align 8, !dbg !6430
  %34 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !6431
  %callee24 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %34, i32 0, i32 2, !dbg !6432
  %35 = load %struct.cgraph_node*, %struct.cgraph_node** %callee24, align 8, !dbg !6432
  %clone25 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %35, i32 0, i32 21, !dbg !6433
  %combined_args_to_skip26 = getelementptr inbounds %struct.cgraph_clone_info, %struct.cgraph_clone_info* %clone25, i32 0, i32 2, !dbg !6434
  %36 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %combined_args_to_skip26, align 8, !dbg !6434
  %call27 = call %union.gimple_statement_d* @gimple_call_copy_skip_args(%union.gimple_statement_d* %33, %struct.bitmap_head_def* %36), !dbg !6435
  store %union.gimple_statement_d* %call27, %union.gimple_statement_d** %new_stmt, align 8, !dbg !6436
  br label %if.end29, !dbg !6437

if.else:                                          ; preds = %if.end19
  %37 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !6438
  %call_stmt28 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %37, i32 0, i32 7, !dbg !6439
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt28, align 8, !dbg !6439
  store %union.gimple_statement_d* %38, %union.gimple_statement_d** %new_stmt, align 8, !dbg !6440
  br label %if.end29

if.end29:                                         ; preds = %if.else, %if.then22
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !6441
  %call30 = call %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %39), !dbg !6443
  %tobool31 = icmp ne %union.tree_node* %call30, null, !dbg !6443
  br i1 %tobool31, label %land.lhs.true, label %if.end36, !dbg !6444

land.lhs.true:                                    ; preds = %if.end29
  %40 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !6445
  %call32 = call %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %40), !dbg !6445
  %base = bitcast %union.tree_node* %call32 to %struct.tree_base*, !dbg !6445
  %41 = bitcast %struct.tree_base* %base to i64*, !dbg !6445
  %bf.load = load i64, i64* %41, align 8, !dbg !6445
  %bf.clear = and i64 %bf.load, 65535, !dbg !6445
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6445
  %cmp33 = icmp eq i32 %bf.cast, 141, !dbg !6446
  br i1 %cmp33, label %if.then34, label %if.end36, !dbg !6447

if.then34:                                        ; preds = %land.lhs.true
  %42 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !6448
  %43 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !6449
  %call35 = call %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %43), !dbg !6449
  %ssa_name = bitcast %union.tree_node* %call35 to %struct.tree_ssa_name*, !dbg !6449
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !6449
  store %union.gimple_statement_d* %42, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6450
  br label %if.end36, !dbg !6449

if.end36:                                         ; preds = %if.then34, %land.lhs.true, %if.end29
  %44 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !6451
  %45 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !6452
  %callee37 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %45, i32 0, i32 2, !dbg !6453
  %46 = load %struct.cgraph_node*, %struct.cgraph_node** %callee37, align 8, !dbg !6453
  %decl38 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %46, i32 0, i32 0, !dbg !6454
  %47 = load %union.tree_node*, %union.tree_node** %decl38, align 8, !dbg !6454
  call void @gimple_call_set_fndecl(%union.gimple_statement_d* %44, %union.tree_node* %47), !dbg !6455
  %48 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !6456
  %call_stmt39 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %48, i32 0, i32 7, !dbg !6457
  %49 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt39, align 8, !dbg !6457
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp, %union.gimple_statement_d* %49), !dbg !6458
  %50 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !6458
  %51 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !6458
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %50, i8* align 8 %51, i64 24, i1 false), !dbg !6458
  %52 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !6459
  call void @gsi_replace(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %52, i8 zeroext 1), !dbg !6460
  %53 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !6461
  %call_stmt40 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %53, i32 0, i32 7, !dbg !6462
  %54 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt40, align 8, !dbg !6462
  %55 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !6463
  %call41 = call zeroext i8 @maybe_clean_or_replace_eh_stmt(%union.gimple_statement_d* %54, %union.gimple_statement_d* %55), !dbg !6464
  %56 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !6465
  %caller42 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %56, i32 0, i32 1, !dbg !6466
  %57 = load %struct.cgraph_node*, %struct.cgraph_node** %caller42, align 8, !dbg !6466
  %58 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !6467
  %call_stmt43 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %58, i32 0, i32 7, !dbg !6468
  %59 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt43, align 8, !dbg !6468
  %60 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !6469
  call void @cgraph_set_call_stmt_including_clones(%struct.cgraph_node* %57, %union.gimple_statement_d* %59, %union.gimple_statement_d* %60), !dbg !6470
  %61 = load %struct._IO_FILE*, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !6471
  %tobool44 = icmp ne %struct._IO_FILE* %61, null, !dbg !6471
  br i1 %tobool44, label %if.then45, label %if.end48, !dbg !6473

if.then45:                                        ; preds = %if.end36
  %62 = load %struct._IO_FILE*, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !6474
  %call46 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %62, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.39, i64 0, i64 0)), !dbg !6476
  %63 = load %struct._IO_FILE*, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !6477
  %64 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !6478
  %call_stmt47 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %64, i32 0, i32 7, !dbg !6479
  %65 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt47, align 8, !dbg !6479
  %66 = load i32, i32* @dump_flags, align 4, !dbg !6480
  call void @print_gimple_stmt(%struct._IO_FILE* %63, %union.gimple_statement_d* %65, i32 0, i32 %66), !dbg !6481
  br label %if.end48, !dbg !6482

if.end48:                                         ; preds = %if.then45, %if.end36
  %67 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !6483
  store %union.gimple_statement_d* %67, %union.gimple_statement_d** %retval, align 8, !dbg !6484
  br label %return, !dbg !6484

return:                                           ; preds = %if.end48, %if.then
  %68 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !6485
  ret %union.gimple_statement_d* %68, !dbg !6485
}

declare dso_local %struct.cgraph_node* @cgraph_get_node(%union.tree_node*) #2

declare dso_local void @print_gimple_stmt(%struct._IO_FILE*, %union.gimple_statement_d*, i32, i32) #2

declare dso_local %union.gimple_statement_d* @gimple_call_copy_skip_args(%union.gimple_statement_d*, %struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %g) #0 !dbg !6486 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6487, metadata !DIExpression()), !dbg !6488
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6489
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !6491
  %tobool = icmp ne i8 %call, 0, !dbg !6491
  br i1 %tobool, label %if.end, label %if.then, !dbg !6492

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6493
  br label %return, !dbg !6493

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6494
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !6495
  %vdef = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 1, !dbg !6496
  %2 = load %union.tree_node*, %union.tree_node** %vdef, align 8, !dbg !6496
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !6497
  br label %return, !dbg !6497

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6498
  ret %union.tree_node* %3, !dbg !6498
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_call_set_fndecl(%union.gimple_statement_d* %gs, %union.tree_node* %decl) #0 !dbg !6499 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6502, metadata !DIExpression()), !dbg !6503
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !6504, metadata !DIExpression()), !dbg !6505
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6506
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6507
  %call = call i32 @gimple_location(%union.gimple_statement_d* %1), !dbg !6508
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6509
  %call1 = call %union.tree_node* @build_fold_addr_expr_loc(i32 %call, %union.tree_node* %2), !dbg !6510
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 1, %union.tree_node* %call1), !dbg !6511
  ret void, !dbg !6512
}

declare dso_local void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret, %union.gimple_statement_d*) #2

declare dso_local void @gsi_replace(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i8 zeroext) #2

declare dso_local zeroext i8 @maybe_clean_or_replace_eh_stmt(%union.gimple_statement_d*, %union.gimple_statement_d*) #2

declare dso_local void @cgraph_set_call_stmt_including_clones(%struct.cgraph_node*, %union.gimple_statement_d*, %union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ipa_replace_map_p_base_length(%struct.VEC_ipa_replace_map_p_base* %vec_) #0 !dbg !6513 {
entry:
  %vec_.addr = alloca %struct.VEC_ipa_replace_map_p_base*, align 8
  store %struct.VEC_ipa_replace_map_p_base* %vec_, %struct.VEC_ipa_replace_map_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_replace_map_p_base** %vec_.addr, metadata !6518, metadata !DIExpression()), !dbg !6519
  %0 = load %struct.VEC_ipa_replace_map_p_base*, %struct.VEC_ipa_replace_map_p_base** %vec_.addr, align 8, !dbg !6519
  %tobool = icmp ne %struct.VEC_ipa_replace_map_p_base* %0, null, !dbg !6519
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6519

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_ipa_replace_map_p_base*, %struct.VEC_ipa_replace_map_p_base** %vec_.addr, align 8, !dbg !6519
  %num = getelementptr inbounds %struct.VEC_ipa_replace_map_p_base, %struct.VEC_ipa_replace_map_p_base* %1, i32 0, i32 0, !dbg !6519
  %2 = load i32, i32* %num, align 8, !dbg !6519
  br label %cond.end, !dbg !6519

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6519

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !6519
  ret i32 %cond, !dbg !6519
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ipa_replace_map* @VEC_ipa_replace_map_p_base_index(%struct.VEC_ipa_replace_map_p_base* %vec_, i32 %ix_) #0 !dbg !6520 {
entry:
  %vec_.addr = alloca %struct.VEC_ipa_replace_map_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_ipa_replace_map_p_base* %vec_, %struct.VEC_ipa_replace_map_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_replace_map_p_base** %vec_.addr, metadata !6523, metadata !DIExpression()), !dbg !6524
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6525, metadata !DIExpression()), !dbg !6524
  %0 = load %struct.VEC_ipa_replace_map_p_base*, %struct.VEC_ipa_replace_map_p_base** %vec_.addr, align 8, !dbg !6524
  %tobool = icmp ne %struct.VEC_ipa_replace_map_p_base* %0, null, !dbg !6524
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !6524

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6524
  %2 = load %struct.VEC_ipa_replace_map_p_base*, %struct.VEC_ipa_replace_map_p_base** %vec_.addr, align 8, !dbg !6524
  %num = getelementptr inbounds %struct.VEC_ipa_replace_map_p_base, %struct.VEC_ipa_replace_map_p_base* %2, i32 0, i32 0, !dbg !6524
  %3 = load i32, i32* %num, align 8, !dbg !6524
  %cmp = icmp ult i32 %1, %3, !dbg !6524
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !6526
  %land.ext = zext i1 %4 to i32, !dbg !6524
  %5 = load %struct.VEC_ipa_replace_map_p_base*, %struct.VEC_ipa_replace_map_p_base** %vec_.addr, align 8, !dbg !6524
  %vec = getelementptr inbounds %struct.VEC_ipa_replace_map_p_base, %struct.VEC_ipa_replace_map_p_base* %5, i32 0, i32 2, !dbg !6524
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !6524
  %idxprom = zext i32 %6 to i64, !dbg !6524
  %arrayidx = getelementptr inbounds [1 x %struct.ipa_replace_map*], [1 x %struct.ipa_replace_map*]* %vec, i64 0, i64 %idxprom, !dbg !6524
  %7 = load %struct.ipa_replace_map*, %struct.ipa_replace_map** %arrayidx, align 8, !dbg !6524
  ret %struct.ipa_replace_map* %7, !dbg !6524
}

declare dso_local void @print_generic_expr(%struct._IO_FILE*, %union.tree_node*, i32) #2

declare dso_local void @bitmap_print(%struct._IO_FILE*, %struct.bitmap_head_def*, i8*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @cgraph_materialize_clone(%struct.cgraph_node* %node) #0 !dbg !6527 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !6528, metadata !DIExpression()), !dbg !6529
  call void @bitmap_obstack_initialize(%struct.bitmap_obstack* null), !dbg !6530
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6531
  %clone_of = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 12, !dbg !6532
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of, align 8, !dbg !6532
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %1, i32 0, i32 0, !dbg !6533
  %2 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6533
  %3 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6534
  %decl1 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %3, i32 0, i32 0, !dbg !6535
  %4 = load %union.tree_node*, %union.tree_node** %decl1, align 8, !dbg !6535
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6536
  %clone = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %5, i32 0, i32 21, !dbg !6537
  %tree_map = getelementptr inbounds %struct.cgraph_clone_info, %struct.cgraph_clone_info* %clone, i32 0, i32 0, !dbg !6538
  %6 = load %struct.VEC_ipa_replace_map_p_gc*, %struct.VEC_ipa_replace_map_p_gc** %tree_map, align 8, !dbg !6538
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6539
  %clone2 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %7, i32 0, i32 21, !dbg !6540
  %args_to_skip = getelementptr inbounds %struct.cgraph_clone_info, %struct.cgraph_clone_info* %clone2, i32 0, i32 1, !dbg !6541
  %8 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %args_to_skip, align 8, !dbg !6541
  call void @tree_function_versioning(%union.tree_node* %2, %union.tree_node* %4, %struct.VEC_ipa_replace_map_p_gc* %6, i8 zeroext 1, %struct.bitmap_head_def* %8), !dbg !6542
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !6543
  %tobool = icmp ne %struct._IO_FILE* %9, null, !dbg !6543
  br i1 %tobool, label %if.then, label %if.end, !dbg !6545

if.then:                                          ; preds = %entry
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6546
  %clone_of3 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %10, i32 0, i32 12, !dbg !6548
  %11 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of3, align 8, !dbg !6548
  %decl4 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %11, i32 0, i32 0, !dbg !6549
  %12 = load %union.tree_node*, %union.tree_node** %decl4, align 8, !dbg !6549
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !6550
  %14 = load i32, i32* @dump_flags, align 4, !dbg !6551
  call void @dump_function_to_file(%union.tree_node* %12, %struct._IO_FILE* %13, i32 %14), !dbg !6552
  %15 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6553
  %decl5 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %15, i32 0, i32 0, !dbg !6554
  %16 = load %union.tree_node*, %union.tree_node** %decl5, align 8, !dbg !6554
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @cgraph_dump_file, align 8, !dbg !6555
  %18 = load i32, i32* @dump_flags, align 4, !dbg !6556
  call void @dump_function_to_file(%union.tree_node* %16, %struct._IO_FILE* %17, i32 %18), !dbg !6557
  br label %if.end, !dbg !6558

if.end:                                           ; preds = %if.then, %entry
  %19 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6559
  %next_sibling_clone = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %19, i32 0, i32 9, !dbg !6561
  %20 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone, align 8, !dbg !6561
  %tobool6 = icmp ne %struct.cgraph_node* %20, null, !dbg !6559
  br i1 %tobool6, label %if.then7, label %if.end10, !dbg !6562

if.then7:                                         ; preds = %if.end
  %21 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6563
  %prev_sibling_clone = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %21, i32 0, i32 10, !dbg !6564
  %22 = load %struct.cgraph_node*, %struct.cgraph_node** %prev_sibling_clone, align 8, !dbg !6564
  %23 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6565
  %next_sibling_clone8 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %23, i32 0, i32 9, !dbg !6566
  %24 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone8, align 8, !dbg !6566
  %prev_sibling_clone9 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %24, i32 0, i32 10, !dbg !6567
  store %struct.cgraph_node* %22, %struct.cgraph_node** %prev_sibling_clone9, align 8, !dbg !6568
  br label %if.end10, !dbg !6565

if.end10:                                         ; preds = %if.then7, %if.end
  %25 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6569
  %prev_sibling_clone11 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %25, i32 0, i32 10, !dbg !6571
  %26 = load %struct.cgraph_node*, %struct.cgraph_node** %prev_sibling_clone11, align 8, !dbg !6571
  %tobool12 = icmp ne %struct.cgraph_node* %26, null, !dbg !6569
  br i1 %tobool12, label %if.then13, label %if.else, !dbg !6572

if.then13:                                        ; preds = %if.end10
  %27 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6573
  %next_sibling_clone14 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %27, i32 0, i32 9, !dbg !6574
  %28 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone14, align 8, !dbg !6574
  %29 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6575
  %prev_sibling_clone15 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %29, i32 0, i32 10, !dbg !6576
  %30 = load %struct.cgraph_node*, %struct.cgraph_node** %prev_sibling_clone15, align 8, !dbg !6576
  %next_sibling_clone16 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %30, i32 0, i32 9, !dbg !6577
  store %struct.cgraph_node* %28, %struct.cgraph_node** %next_sibling_clone16, align 8, !dbg !6578
  br label %if.end19, !dbg !6575

if.else:                                          ; preds = %if.end10
  %31 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6579
  %next_sibling_clone17 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %31, i32 0, i32 9, !dbg !6580
  %32 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone17, align 8, !dbg !6580
  %33 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6581
  %clone_of18 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %33, i32 0, i32 12, !dbg !6582
  %34 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of18, align 8, !dbg !6582
  %clones = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %34, i32 0, i32 11, !dbg !6583
  store %struct.cgraph_node* %32, %struct.cgraph_node** %clones, align 8, !dbg !6584
  br label %if.end19

if.end19:                                         ; preds = %if.else, %if.then13
  %35 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6585
  %next_sibling_clone20 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %35, i32 0, i32 9, !dbg !6586
  store %struct.cgraph_node* null, %struct.cgraph_node** %next_sibling_clone20, align 8, !dbg !6587
  %36 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6588
  %prev_sibling_clone21 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %36, i32 0, i32 10, !dbg !6589
  store %struct.cgraph_node* null, %struct.cgraph_node** %prev_sibling_clone21, align 8, !dbg !6590
  %37 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6591
  %clone_of22 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %37, i32 0, i32 12, !dbg !6593
  %38 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of22, align 8, !dbg !6593
  %analyzed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %38, i32 0, i32 27, !dbg !6594
  %bf.load = load i16, i16* %analyzed, align 4, !dbg !6594
  %bf.lshr = lshr i16 %bf.load, 5, !dbg !6594
  %bf.clear = and i16 %bf.lshr, 1, !dbg !6594
  %bf.cast = zext i16 %bf.clear to i32, !dbg !6594
  %tobool23 = icmp ne i32 %bf.cast, 0, !dbg !6591
  br i1 %tobool23, label %if.end29, label %land.lhs.true, !dbg !6595

land.lhs.true:                                    ; preds = %if.end19
  %39 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6596
  %clone_of24 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %39, i32 0, i32 12, !dbg !6597
  %40 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of24, align 8, !dbg !6597
  %clones25 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %40, i32 0, i32 11, !dbg !6598
  %41 = load %struct.cgraph_node*, %struct.cgraph_node** %clones25, align 8, !dbg !6598
  %tobool26 = icmp ne %struct.cgraph_node* %41, null, !dbg !6596
  br i1 %tobool26, label %if.end29, label %if.then27, !dbg !6599

if.then27:                                        ; preds = %land.lhs.true
  %42 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6600
  %clone_of28 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %42, i32 0, i32 12, !dbg !6601
  %43 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of28, align 8, !dbg !6601
  call void @cgraph_remove_node(%struct.cgraph_node* %43), !dbg !6602
  br label %if.end29, !dbg !6602

if.end29:                                         ; preds = %if.then27, %land.lhs.true, %if.end19
  %44 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6603
  %clone_of30 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %44, i32 0, i32 12, !dbg !6604
  store %struct.cgraph_node* null, %struct.cgraph_node** %clone_of30, align 8, !dbg !6605
  call void @bitmap_obstack_release(%struct.bitmap_obstack* null), !dbg !6606
  ret void, !dbg !6607
}

declare dso_local void @cgraph_node_remove_callees(%struct.cgraph_node*) #2

declare dso_local void @gt_ggc_mx_lang_tree_node(i8*) #2

declare dso_local void @gt_pch_nx_lang_tree_node(i8*) #2

declare dso_local void @gt_ggc_mx_VEC_tree_gc(i8*) #2

declare dso_local void @gt_pch_nx_VEC_tree_gc(i8*) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_gc_safe_push(%struct.VEC_tree_gc** %vec_, %union.tree_node* %obj_) #0 !dbg !6608 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_gc**, align 8
  %obj_.addr = alloca %union.tree_node*, align 8
  store %struct.VEC_tree_gc** %vec_, %struct.VEC_tree_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_gc*** %vec_.addr, metadata !6612, metadata !DIExpression()), !dbg !6613
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !6614, metadata !DIExpression()), !dbg !6613
  %0 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !6613
  %call = call i32 @VEC_tree_gc_reserve(%struct.VEC_tree_gc** %0, i32 1), !dbg !6613
  %1 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !6613
  %2 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %1, align 8, !dbg !6613
  %tobool = icmp ne %struct.VEC_tree_gc* %2, null, !dbg !6613
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6613

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !6613
  %4 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %3, align 8, !dbg !6613
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %4, i32 0, i32 0, !dbg !6613
  br label %cond.end, !dbg !6613

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6613

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6613
  %5 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !6613
  %call1 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond, %union.tree_node* %5), !dbg !6613
  ret %union.tree_node** %call1, !dbg !6613
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_gc_reserve(%struct.VEC_tree_gc** %vec_, i32 %alloc_) #0 !dbg !6615 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_gc**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_tree_gc** %vec_, %struct.VEC_tree_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_gc*** %vec_.addr, metadata !6618, metadata !DIExpression()), !dbg !6619
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6620, metadata !DIExpression()), !dbg !6619
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !6621, metadata !DIExpression()), !dbg !6619
  %0 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !6619
  %1 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %0, align 8, !dbg !6619
  %tobool = icmp ne %struct.VEC_tree_gc* %1, null, !dbg !6619
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6619

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !6619
  %3 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %2, align 8, !dbg !6619
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %3, i32 0, i32 0, !dbg !6619
  br label %cond.end, !dbg !6619

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6619

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6619
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !6619
  %call = call i32 @VEC_tree_base_space(%struct.VEC_tree_base* %cond, i32 %4), !dbg !6619
  %tobool1 = icmp ne i32 %call, 0, !dbg !6619
  %lnot = xor i1 %tobool1, true, !dbg !6619
  %lnot.ext = zext i1 %lnot to i32, !dbg !6619
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !6619
  %5 = load i32, i32* %extend, align 4, !dbg !6622
  %tobool2 = icmp ne i32 %5, 0, !dbg !6622
  br i1 %tobool2, label %if.then, label %if.end, !dbg !6619

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !6622
  %7 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %6, align 8, !dbg !6622
  %8 = bitcast %struct.VEC_tree_gc* %7 to i8*, !dbg !6622
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !6622
  %call3 = call i8* @vec_gc_p_reserve(i8* %8, i32 %9), !dbg !6622
  %10 = bitcast i8* %call3 to %struct.VEC_tree_gc*, !dbg !6622
  %11 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !6622
  store %struct.VEC_tree_gc* %10, %struct.VEC_tree_gc** %11, align 8, !dbg !6622
  br label %if.end, !dbg !6622

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !6619
  ret i32 %12, !dbg !6619
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %vec_, %union.tree_node* %obj_) #0 !dbg !6624 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %obj_.addr = alloca %union.tree_node*, align 8
  %slot_ = alloca %union.tree_node**, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !6628, metadata !DIExpression()), !dbg !6629
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !6630, metadata !DIExpression()), !dbg !6629
  call void @llvm.dbg.declare(metadata %union.tree_node*** %slot_, metadata !6631, metadata !DIExpression()), !dbg !6629
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6629
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %0, i32 0, i32 0, !dbg !6629
  %1 = load i32, i32* %num, align 8, !dbg !6629
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6629
  %alloc = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 1, !dbg !6629
  %3 = load i32, i32* %alloc, align 4, !dbg !6629
  %cmp = icmp ult i32 %1, %3, !dbg !6629
  %conv = zext i1 %cmp to i32, !dbg !6629
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6629
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 2, !dbg !6629
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6629
  %num1 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 0, !dbg !6629
  %6 = load i32, i32* %num1, align 8, !dbg !6629
  %inc = add i32 %6, 1, !dbg !6629
  store i32 %inc, i32* %num1, align 8, !dbg !6629
  %idxprom = zext i32 %6 to i64, !dbg !6629
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !6629
  store %union.tree_node** %arrayidx, %union.tree_node*** %slot_, align 8, !dbg !6629
  %7 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !6629
  %8 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !6629
  store %union.tree_node* %7, %union.tree_node** %8, align 8, !dbg !6629
  %9 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !6629
  ret %union.tree_node** %9, !dbg !6629
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_space(%struct.VEC_tree_base* %vec_, i32 %alloc_) #0 !dbg !6632 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !6635, metadata !DIExpression()), !dbg !6636
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6637, metadata !DIExpression()), !dbg !6636
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !6636
  %cmp = icmp sge i32 %0, 0, !dbg !6636
  %conv = zext i1 %cmp to i32, !dbg !6636
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6636
  %tobool = icmp ne %struct.VEC_tree_base* %1, null, !dbg !6636
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6636

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6636
  %alloc = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 1, !dbg !6636
  %3 = load i32, i32* %alloc, align 4, !dbg !6636
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6636
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 0, !dbg !6636
  %5 = load i32, i32* %num, align 8, !dbg !6636
  %sub = sub i32 %3, %5, !dbg !6636
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !6636
  %cmp1 = icmp uge i32 %sub, %6, !dbg !6636
  %conv2 = zext i1 %cmp1 to i32, !dbg !6636
  br label %cond.end, !dbg !6636

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !6636
  %tobool3 = icmp ne i32 %7, 0, !dbg !6636
  %lnot = xor i1 %tobool3, true, !dbg !6636
  %lnot.ext = zext i1 %lnot to i32, !dbg !6636
  br label %cond.end, !dbg !6636

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !6636
  ret i32 %cond, !dbg !6636
}

declare dso_local i8* @vec_gc_p_reserve(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) #0 !dbg !6638 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6644, metadata !DIExpression()), !dbg !6645
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6646
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !6647
  %1 = load i32, i32* %flags, align 8, !dbg !6647
  %and = and i32 %1, 512, !dbg !6648
  %tobool = icmp ne i32 %and, 0, !dbg !6648
  br i1 %tobool, label %cond.false, label %land.lhs.true, !dbg !6649

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6650
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !6651
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !6652
  %3 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !6652
  %tobool1 = icmp ne %struct.gimple_bb_info* %3, null, !dbg !6650
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !6653

cond.true:                                        ; preds = %land.lhs.true
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6654
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !6655
  %gimple3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.gimple_bb_info**, !dbg !6656
  %5 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple3, align 8, !dbg !6656
  %seq = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %5, i32 0, i32 0, !dbg !6657
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6657
  br label %cond.end, !dbg !6653

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !6653

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_d* [ %6, %cond.true ], [ null, %cond.false ], !dbg !6653
  ret %struct.gimple_seq_d* %cond, !dbg !6658
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %s) #0 !dbg !6659 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !6665, metadata !DIExpression()), !dbg !6666
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !6667
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !6667
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6667

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !6668
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 0, !dbg !6669
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !6669
  br label %cond.end, !dbg !6667

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6667

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !6667
  ret %struct.gimple_seq_node_d* %cond, !dbg !6670
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_code(%union.gimple_statement_d* %g) #0 !dbg !6671 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6674, metadata !DIExpression()), !dbg !6675
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6676
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !6677
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !6678
  %bf.load = load i32, i32* %1, align 8, !dbg !6678
  %bf.clear = and i32 %bf.load, 255, !dbg !6678
  ret i32 %bf.clear, !dbg !6679
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %gs) #0 !dbg !6680 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6681, metadata !DIExpression()), !dbg !6682
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6683
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !6684
  ret %union.tree_node* %call, !dbg !6685
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !6686 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6689, metadata !DIExpression()), !dbg !6690
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !6691, metadata !DIExpression()), !dbg !6692
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6693
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !6695
  %tobool = icmp ne i8 %call, 0, !dbg !6695
  br i1 %tobool, label %if.then, label %if.else, !dbg !6696

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6697
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !6699
  %2 = load i32, i32* %i.addr, align 4, !dbg !6700
  %idxprom = zext i32 %2 to i64, !dbg !6699
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idxprom, !dbg !6699
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6699
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !6701
  br label %return, !dbg !6701

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6702
  br label %return, !dbg !6702

return:                                           ; preds = %if.else, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6703
  ret %union.tree_node* %4, !dbg !6703
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #0 !dbg !6704 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6705, metadata !DIExpression()), !dbg !6706
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6707
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6708
  %cmp = icmp uge i32 %call, 1, !dbg !6709
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !6710

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6711
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !6712
  %cmp2 = icmp ule i32 %call1, 9, !dbg !6713
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !6714
  %land.ext = zext i1 %2 to i32, !dbg !6710
  %conv = trunc i32 %land.ext to i8, !dbg !6708
  ret i8 %conv, !dbg !6715
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #0 !dbg !6716 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %off = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6719, metadata !DIExpression()), !dbg !6720
  call void @llvm.dbg.declare(metadata i64* %off, metadata !6721, metadata !DIExpression()), !dbg !6722
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6723
  %call = call i32 @gimple_statement_structure(%union.gimple_statement_d* %0), !dbg !6724
  %idxprom = zext i32 %call to i64, !dbg !6725
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* @gimple_ops_offset_, i64 0, i64 %idxprom, !dbg !6725
  %1 = load i64, i64* %arrayidx, align 8, !dbg !6725
  store i64 %1, i64* %off, align 8, !dbg !6726
  %2 = load i64, i64* %off, align 8, !dbg !6727
  %cmp = icmp ne i64 %2, 0, !dbg !6727
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6727

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.53, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !6727
  br label %cond.end, !dbg !6727

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6727

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6727
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6728
  %4 = bitcast %union.gimple_statement_d* %3 to i8*, !dbg !6729
  %5 = load i64, i64* %off, align 8, !dbg !6730
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !6731
  %6 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !6732
  ret %union.tree_node** %6, !dbg !6733
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #0 !dbg !6734 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6737, metadata !DIExpression()), !dbg !6738
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6739
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6740
  %call1 = call i32 @gss_for_code(i32 %call), !dbg !6741
  ret i32 %call1, !dbg !6742
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gss_for_code(i32 %code) #0 !dbg !6743 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !6746, metadata !DIExpression()), !dbg !6747
  %0 = load i32, i32* %code.addr, align 4, !dbg !6748
  %idxprom = zext i32 %0 to i64, !dbg !6749
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @gss_for_code_, i64 0, i64 %idxprom, !dbg !6749
  %1 = load i32, i32* %arrayidx, align 4, !dbg !6749
  ret i32 %1, !dbg !6750
}

declare dso_local void @assign_assembler_name_if_neeeded(%union.tree_node*) #2

declare dso_local %struct.gimple_seq_d* @gimple_body(%union.tree_node*) #2

declare dso_local void @dump_function(i32, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_length(%struct.VEC_tree_base* %vec_) #0 !dbg !6751 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !6756, metadata !DIExpression()), !dbg !6757
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6757
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !6757
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6757

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6757
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %1, i32 0, i32 0, !dbg !6757
  %2 = load i32, i32* %num, align 8, !dbg !6757
  br label %cond.end, !dbg !6757

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6757

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !6757
  ret i32 %cond, !dbg !6757
}

declare dso_local void @spec_qsort(i8*, i64, i64, i32 (i8*, i8*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_base_address(%struct.VEC_tree_base* %vec_) #0 !dbg !6758 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !6761, metadata !DIExpression()), !dbg !6762
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6762
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !6762
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6762

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6762
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %1, i32 0, i32 2, !dbg !6762
  %arraydecay = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 0, !dbg !6762
  br label %cond.end, !dbg !6762

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6762

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node** [ %arraydecay, %cond.true ], [ null, %cond.false ], !dbg !6762
  ret %union.tree_node** %cond, !dbg !6762
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @compare_ctor(i8* %p1, i8* %p2) #0 !dbg !6763 {
entry:
  %retval = alloca i32, align 4
  %p1.addr = alloca i8*, align 8
  %p2.addr = alloca i8*, align 8
  %f1 = alloca %union.tree_node*, align 8
  %f2 = alloca %union.tree_node*, align 8
  %priority1 = alloca i32, align 4
  %priority2 = alloca i32, align 4
  store i8* %p1, i8** %p1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p1.addr, metadata !6764, metadata !DIExpression()), !dbg !6765
  store i8* %p2, i8** %p2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p2.addr, metadata !6766, metadata !DIExpression()), !dbg !6767
  call void @llvm.dbg.declare(metadata %union.tree_node** %f1, metadata !6768, metadata !DIExpression()), !dbg !6769
  call void @llvm.dbg.declare(metadata %union.tree_node** %f2, metadata !6770, metadata !DIExpression()), !dbg !6771
  call void @llvm.dbg.declare(metadata i32* %priority1, metadata !6772, metadata !DIExpression()), !dbg !6773
  call void @llvm.dbg.declare(metadata i32* %priority2, metadata !6774, metadata !DIExpression()), !dbg !6775
  %0 = load i8*, i8** %p1.addr, align 8, !dbg !6776
  %1 = bitcast i8* %0 to %union.tree_node**, !dbg !6777
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !6778
  store %union.tree_node* %2, %union.tree_node** %f1, align 8, !dbg !6779
  %3 = load i8*, i8** %p2.addr, align 8, !dbg !6780
  %4 = bitcast i8* %3 to %union.tree_node**, !dbg !6781
  %5 = load %union.tree_node*, %union.tree_node** %4, align 8, !dbg !6782
  store %union.tree_node* %5, %union.tree_node** %f2, align 8, !dbg !6783
  %6 = load %union.tree_node*, %union.tree_node** %f1, align 8, !dbg !6784
  %call = call zeroext i16 @decl_init_priority_lookup(%union.tree_node* %6), !dbg !6784
  %conv = zext i16 %call to i32, !dbg !6784
  store i32 %conv, i32* %priority1, align 4, !dbg !6785
  %7 = load %union.tree_node*, %union.tree_node** %f2, align 8, !dbg !6786
  %call1 = call zeroext i16 @decl_init_priority_lookup(%union.tree_node* %7), !dbg !6786
  %conv2 = zext i16 %call1 to i32, !dbg !6786
  store i32 %conv2, i32* %priority2, align 4, !dbg !6787
  %8 = load i32, i32* %priority1, align 4, !dbg !6788
  %9 = load i32, i32* %priority2, align 4, !dbg !6790
  %cmp = icmp slt i32 %8, %9, !dbg !6791
  br i1 %cmp, label %if.then, label %if.else, !dbg !6792

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4, !dbg !6793
  br label %return, !dbg !6793

if.else:                                          ; preds = %entry
  %10 = load i32, i32* %priority1, align 4, !dbg !6794
  %11 = load i32, i32* %priority2, align 4, !dbg !6796
  %cmp4 = icmp sgt i32 %10, %11, !dbg !6797
  br i1 %cmp4, label %if.then6, label %if.else7, !dbg !6798

if.then6:                                         ; preds = %if.else
  store i32 1, i32* %retval, align 4, !dbg !6799
  br label %return, !dbg !6799

if.else7:                                         ; preds = %if.else
  %12 = load i8*, i8** %p1.addr, align 8, !dbg !6800
  %13 = bitcast i8* %12 to %union.tree_node**, !dbg !6801
  %14 = load i8*, i8** %p2.addr, align 8, !dbg !6802
  %15 = bitcast i8* %14 to %union.tree_node**, !dbg !6803
  %sub.ptr.lhs.cast = ptrtoint %union.tree_node** %13 to i64, !dbg !6804
  %sub.ptr.rhs.cast = ptrtoint %union.tree_node** %15 to i64, !dbg !6804
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !6804
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8, !dbg !6804
  %conv8 = trunc i64 %sub.ptr.div to i32, !dbg !6801
  store i32 %conv8, i32* %retval, align 4, !dbg !6805
  br label %return, !dbg !6805

return:                                           ; preds = %if.else7, %if.then6, %if.then
  %16 = load i32, i32* %retval, align 4, !dbg !6806
  ret i32 %16, !dbg !6806
}

; Function Attrs: noinline nounwind uwtable
define internal void @build_cdtor(i8 zeroext %ctor_p, %union.tree_node** %cdtors, i64 %len) #0 !dbg !6807 {
entry:
  %ctor_p.addr = alloca i8, align 1
  %cdtors.addr = alloca %union.tree_node**, align 8
  %len.addr = alloca i64, align 8
  %i = alloca i64, align 8
  %body = alloca %union.tree_node*, align 8
  %fn = alloca %union.tree_node*, align 8
  %priority = alloca i16, align 2
  %p = alloca i16, align 2
  store i8 %ctor_p, i8* %ctor_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ctor_p.addr, metadata !6810, metadata !DIExpression()), !dbg !6811
  store %union.tree_node** %cdtors, %union.tree_node*** %cdtors.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %cdtors.addr, metadata !6812, metadata !DIExpression()), !dbg !6813
  store i64 %len, i64* %len.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %len.addr, metadata !6814, metadata !DIExpression()), !dbg !6815
  call void @llvm.dbg.declare(metadata i64* %i, metadata !6816, metadata !DIExpression()), !dbg !6817
  store i64 0, i64* %i, align 8, !dbg !6818
  br label %while.cond, !dbg !6819

while.cond:                                       ; preds = %cond.end19, %entry
  %0 = load i64, i64* %i, align 8, !dbg !6820
  %1 = load i64, i64* %len.addr, align 8, !dbg !6821
  %cmp = icmp ult i64 %0, %1, !dbg !6822
  br i1 %cmp, label %while.body, label %while.end, !dbg !6819

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %body, metadata !6823, metadata !DIExpression()), !dbg !6825
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !6826, metadata !DIExpression()), !dbg !6827
  call void @llvm.dbg.declare(metadata i16* %priority, metadata !6828, metadata !DIExpression()), !dbg !6830
  store i16 0, i16* %priority, align 2, !dbg !6831
  store %union.tree_node* null, %union.tree_node** %body, align 8, !dbg !6832
  br label %do.body, !dbg !6833

do.body:                                          ; preds = %do.cond, %while.body
  call void @llvm.dbg.declare(metadata i16* %p, metadata !6834, metadata !DIExpression()), !dbg !6836
  %2 = load %union.tree_node**, %union.tree_node*** %cdtors.addr, align 8, !dbg !6837
  %3 = load i64, i64* %i, align 8, !dbg !6838
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %2, i64 %3, !dbg !6837
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6837
  store %union.tree_node* %4, %union.tree_node** %fn, align 8, !dbg !6839
  %5 = load i8, i8* %ctor_p.addr, align 1, !dbg !6840
  %conv = zext i8 %5 to i32, !dbg !6840
  %tobool = icmp ne i32 %conv, 0, !dbg !6840
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6840

cond.true:                                        ; preds = %do.body
  %6 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !6841
  %call = call zeroext i16 @decl_init_priority_lookup(%union.tree_node* %6), !dbg !6841
  %conv1 = zext i16 %call to i32, !dbg !6841
  br label %cond.end, !dbg !6840

cond.false:                                       ; preds = %do.body
  %7 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !6842
  %call2 = call zeroext i16 @decl_fini_priority_lookup(%union.tree_node* %7), !dbg !6842
  %conv3 = zext i16 %call2 to i32, !dbg !6842
  br label %cond.end, !dbg !6840

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv1, %cond.true ], [ %conv3, %cond.false ], !dbg !6840
  %conv4 = trunc i32 %cond to i16, !dbg !6840
  store i16 %conv4, i16* %p, align 2, !dbg !6843
  %8 = load %union.tree_node*, %union.tree_node** %body, align 8, !dbg !6844
  %tobool5 = icmp ne %union.tree_node* %8, null, !dbg !6844
  br i1 %tobool5, label %if.else, label %if.then, !dbg !6846

if.then:                                          ; preds = %cond.end
  %9 = load i16, i16* %p, align 2, !dbg !6847
  store i16 %9, i16* %priority, align 2, !dbg !6848
  br label %if.end11, !dbg !6849

if.else:                                          ; preds = %cond.end
  %10 = load i16, i16* %p, align 2, !dbg !6850
  %conv6 = zext i16 %10 to i32, !dbg !6850
  %11 = load i16, i16* %priority, align 2, !dbg !6852
  %conv7 = zext i16 %11 to i32, !dbg !6852
  %cmp8 = icmp ne i32 %conv6, %conv7, !dbg !6853
  br i1 %cmp8, label %if.then10, label %if.end, !dbg !6854

if.then10:                                        ; preds = %if.else
  br label %do.end, !dbg !6855

if.end:                                           ; preds = %if.else
  br label %if.end11

if.end11:                                         ; preds = %if.end, %if.then
  %12 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !6856
  %call12 = call %union.tree_node* @build_function_call_expr(i32 0, %union.tree_node* %12, %union.tree_node* null), !dbg !6857
  call void @append_to_statement_list(%union.tree_node* %call12, %union.tree_node** %body), !dbg !6858
  %13 = load i64, i64* %i, align 8, !dbg !6859
  %inc = add i64 %13, 1, !dbg !6859
  store i64 %inc, i64* %i, align 8, !dbg !6859
  br label %do.cond, !dbg !6860

do.cond:                                          ; preds = %if.end11
  %14 = load i64, i64* %i, align 8, !dbg !6861
  %15 = load i64, i64* %len.addr, align 8, !dbg !6862
  %cmp13 = icmp ult i64 %14, %15, !dbg !6863
  br i1 %cmp13, label %do.body, label %do.end, !dbg !6860, !llvm.loop !6864

do.end:                                           ; preds = %do.cond, %if.then10
  %16 = load %union.tree_node*, %union.tree_node** %body, align 8, !dbg !6866
  %cmp15 = icmp ne %union.tree_node* %16, null, !dbg !6866
  br i1 %cmp15, label %cond.false18, label %cond.true17, !dbg !6866

cond.true17:                                      ; preds = %do.end
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0), i32 223, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !6866
  br label %cond.end19, !dbg !6866

cond.false18:                                     ; preds = %do.end
  br label %cond.end19, !dbg !6866

cond.end19:                                       ; preds = %cond.false18, %cond.true17
  %cond20 = phi i32 [ 0, %cond.true17 ], [ 0, %cond.false18 ], !dbg !6866
  %17 = load i8, i8* %ctor_p.addr, align 1, !dbg !6867
  %conv21 = zext i8 %17 to i32, !dbg !6867
  %tobool22 = icmp ne i32 %conv21, 0, !dbg !6867
  %18 = zext i1 %tobool22 to i64, !dbg !6867
  %cond23 = select i1 %tobool22, i32 73, i32 68, !dbg !6867
  %conv24 = trunc i32 %cond23 to i8, !dbg !6867
  %19 = load %union.tree_node*, %union.tree_node** %body, align 8, !dbg !6868
  %20 = load i16, i16* %priority, align 2, !dbg !6869
  %conv25 = zext i16 %20 to i32, !dbg !6869
  call void @cgraph_build_static_cdtor(i8 signext %conv24, %union.tree_node* %19, i32 %conv25), !dbg !6870
  br label %while.cond, !dbg !6819, !llvm.loop !6871

while.end:                                        ; preds = %while.cond
  ret void, !dbg !6873
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_tree_base_truncate(%struct.VEC_tree_base* %vec_, i32 %size_) #0 !dbg !6874 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %size_.addr = alloca i32, align 4
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !6877, metadata !DIExpression()), !dbg !6878
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !6879, metadata !DIExpression()), !dbg !6878
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6878
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !6878
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6878

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6878
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %1, i32 0, i32 0, !dbg !6878
  %2 = load i32, i32* %num, align 8, !dbg !6878
  %3 = load i32, i32* %size_.addr, align 4, !dbg !6878
  %cmp = icmp uge i32 %2, %3, !dbg !6878
  %conv = zext i1 %cmp to i32, !dbg !6878
  br label %cond.end, !dbg !6878

cond.false:                                       ; preds = %entry
  %4 = load i32, i32* %size_.addr, align 4, !dbg !6878
  %tobool1 = icmp ne i32 %4, 0, !dbg !6878
  %lnot = xor i1 %tobool1, true, !dbg !6878
  %lnot.ext = zext i1 %lnot to i32, !dbg !6878
  br label %cond.end, !dbg !6878

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !6878
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6880
  %tobool2 = icmp ne %struct.VEC_tree_base* %5, null, !dbg !6880
  br i1 %tobool2, label %if.then, label %if.end, !dbg !6878

if.then:                                          ; preds = %cond.end
  %6 = load i32, i32* %size_.addr, align 4, !dbg !6880
  %7 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6880
  %num3 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %7, i32 0, i32 0, !dbg !6880
  store i32 %6, i32* %num3, align 8, !dbg !6880
  br label %if.end, !dbg !6880

if.end:                                           ; preds = %if.then, %cond.end
  ret void, !dbg !6878
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @compare_dtor(i8* %p1, i8* %p2) #0 !dbg !6882 {
entry:
  %retval = alloca i32, align 4
  %p1.addr = alloca i8*, align 8
  %p2.addr = alloca i8*, align 8
  %f1 = alloca %union.tree_node*, align 8
  %f2 = alloca %union.tree_node*, align 8
  %priority1 = alloca i32, align 4
  %priority2 = alloca i32, align 4
  store i8* %p1, i8** %p1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p1.addr, metadata !6883, metadata !DIExpression()), !dbg !6884
  store i8* %p2, i8** %p2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p2.addr, metadata !6885, metadata !DIExpression()), !dbg !6886
  call void @llvm.dbg.declare(metadata %union.tree_node** %f1, metadata !6887, metadata !DIExpression()), !dbg !6888
  call void @llvm.dbg.declare(metadata %union.tree_node** %f2, metadata !6889, metadata !DIExpression()), !dbg !6890
  call void @llvm.dbg.declare(metadata i32* %priority1, metadata !6891, metadata !DIExpression()), !dbg !6892
  call void @llvm.dbg.declare(metadata i32* %priority2, metadata !6893, metadata !DIExpression()), !dbg !6894
  %0 = load i8*, i8** %p1.addr, align 8, !dbg !6895
  %1 = bitcast i8* %0 to %union.tree_node**, !dbg !6896
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !6897
  store %union.tree_node* %2, %union.tree_node** %f1, align 8, !dbg !6898
  %3 = load i8*, i8** %p2.addr, align 8, !dbg !6899
  %4 = bitcast i8* %3 to %union.tree_node**, !dbg !6900
  %5 = load %union.tree_node*, %union.tree_node** %4, align 8, !dbg !6901
  store %union.tree_node* %5, %union.tree_node** %f2, align 8, !dbg !6902
  %6 = load %union.tree_node*, %union.tree_node** %f1, align 8, !dbg !6903
  %call = call zeroext i16 @decl_fini_priority_lookup(%union.tree_node* %6), !dbg !6903
  %conv = zext i16 %call to i32, !dbg !6903
  store i32 %conv, i32* %priority1, align 4, !dbg !6904
  %7 = load %union.tree_node*, %union.tree_node** %f2, align 8, !dbg !6905
  %call1 = call zeroext i16 @decl_fini_priority_lookup(%union.tree_node* %7), !dbg !6905
  %conv2 = zext i16 %call1 to i32, !dbg !6905
  store i32 %conv2, i32* %priority2, align 4, !dbg !6906
  %8 = load i32, i32* %priority1, align 4, !dbg !6907
  %9 = load i32, i32* %priority2, align 4, !dbg !6909
  %cmp = icmp slt i32 %8, %9, !dbg !6910
  br i1 %cmp, label %if.then, label %if.else, !dbg !6911

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4, !dbg !6912
  br label %return, !dbg !6912

if.else:                                          ; preds = %entry
  %10 = load i32, i32* %priority1, align 4, !dbg !6913
  %11 = load i32, i32* %priority2, align 4, !dbg !6915
  %cmp4 = icmp sgt i32 %10, %11, !dbg !6916
  br i1 %cmp4, label %if.then6, label %if.else7, !dbg !6917

if.then6:                                         ; preds = %if.else
  store i32 1, i32* %retval, align 4, !dbg !6918
  br label %return, !dbg !6918

if.else7:                                         ; preds = %if.else
  %12 = load i8*, i8** %p1.addr, align 8, !dbg !6919
  %13 = bitcast i8* %12 to %union.tree_node**, !dbg !6920
  %14 = load i8*, i8** %p2.addr, align 8, !dbg !6921
  %15 = bitcast i8* %14 to %union.tree_node**, !dbg !6922
  %sub.ptr.lhs.cast = ptrtoint %union.tree_node** %13 to i64, !dbg !6923
  %sub.ptr.rhs.cast = ptrtoint %union.tree_node** %15 to i64, !dbg !6923
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !6923
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8, !dbg !6923
  %conv8 = trunc i64 %sub.ptr.div to i32, !dbg !6920
  store i32 %conv8, i32* %retval, align 4, !dbg !6924
  br label %return, !dbg !6924

return:                                           ; preds = %if.else7, %if.then6, %if.then
  %16 = load i32, i32* %retval, align 4, !dbg !6925
  ret i32 %16, !dbg !6925
}

declare dso_local zeroext i16 @decl_init_priority_lookup(%union.tree_node*) #2

declare dso_local zeroext i16 @decl_fini_priority_lookup(%union.tree_node*) #2

declare dso_local void @append_to_statement_list(%union.tree_node*, %union.tree_node**) #2

declare dso_local %union.tree_node* @build_function_call_expr(i32, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @process_function_and_variable_attributes(%struct.cgraph_node* %first, %struct.varpool_node* %first_var) #0 !dbg !6926 {
entry:
  %first.addr = alloca %struct.cgraph_node*, align 8
  %first_var.addr = alloca %struct.varpool_node*, align 8
  %node = alloca %struct.cgraph_node*, align 8
  %vnode = alloca %struct.varpool_node*, align 8
  %decl = alloca %union.tree_node*, align 8
  %decl35 = alloca %union.tree_node*, align 8
  store %struct.cgraph_node* %first, %struct.cgraph_node** %first.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %first.addr, metadata !6929, metadata !DIExpression()), !dbg !6930
  store %struct.varpool_node* %first_var, %struct.varpool_node** %first_var.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.varpool_node** %first_var.addr, metadata !6931, metadata !DIExpression()), !dbg !6932
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node, metadata !6933, metadata !DIExpression()), !dbg !6934
  call void @llvm.dbg.declare(metadata %struct.varpool_node** %vnode, metadata !6935, metadata !DIExpression()), !dbg !6936
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_nodes, align 8, !dbg !6937
  store %struct.cgraph_node* %0, %struct.cgraph_node** %node, align 8, !dbg !6939
  br label %for.cond, !dbg !6940

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !6941
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %first.addr, align 8, !dbg !6943
  %cmp = icmp ne %struct.cgraph_node* %1, %2, !dbg !6944
  br i1 %cmp, label %for.body, label %for.end, !dbg !6945

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !6946, metadata !DIExpression()), !dbg !6948
  %3 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !6949
  %decl1 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %3, i32 0, i32 0, !dbg !6950
  %4 = load %union.tree_node*, %union.tree_node** %decl1, align 8, !dbg !6950
  store %union.tree_node* %4, %union.tree_node** %decl, align 8, !dbg !6948
  %5 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6951
  %decl_common = bitcast %union.tree_node* %5 to %struct.tree_decl_common*, !dbg !6951
  %preserve_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !6951
  %6 = bitcast i40* %preserve_flag to i64*, !dbg !6951
  %bf.load = load i64, i64* %6, align 8, !dbg !6951
  %bf.lshr = lshr i64 %bf.load, 13, !dbg !6951
  %bf.clear = and i64 %bf.lshr, 1, !dbg !6951
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6951
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !6951
  br i1 %tobool, label %if.then, label %if.end8, !dbg !6953

if.then:                                          ; preds = %for.body
  %7 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6954
  call void @mark_decl_referenced(%union.tree_node* %7), !dbg !6956
  %8 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !6957
  %local = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %8, i32 0, i32 18, !dbg !6959
  %finalized = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local, i32 0, i32 2, !dbg !6960
  %bf.load2 = load i8, i8* %finalized, align 8, !dbg !6960
  %bf.lshr3 = lshr i8 %bf.load2, 2, !dbg !6960
  %bf.clear4 = and i8 %bf.lshr3, 1, !dbg !6960
  %bf.cast5 = zext i8 %bf.clear4 to i32, !dbg !6960
  %tobool6 = icmp ne i32 %bf.cast5, 0, !dbg !6957
  br i1 %tobool6, label %if.then7, label %if.end, !dbg !6961

if.then7:                                         ; preds = %if.then
  %9 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !6962
  call void @cgraph_mark_needed_node(%struct.cgraph_node* %9), !dbg !6963
  br label %if.end, !dbg !6963

if.end:                                           ; preds = %if.then7, %if.then
  br label %if.end8, !dbg !6964

if.end8:                                          ; preds = %if.end, %for.body
  %10 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6965
  %decl_common9 = bitcast %union.tree_node* %10 to %struct.tree_decl_common*, !dbg !6965
  %attributes = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common9, i32 0, i32 6, !dbg !6965
  %11 = load %union.tree_node*, %union.tree_node** %attributes, align 8, !dbg !6965
  %call = call %union.tree_node* @lookup_attribute(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.60, i64 0, i64 0), %union.tree_node* %11), !dbg !6967
  %tobool10 = icmp ne %union.tree_node* %call, null, !dbg !6967
  br i1 %tobool10, label %if.then11, label %if.end31, !dbg !6968

if.then11:                                        ; preds = %if.end8
  %12 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !6969
  %decl12 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %12, i32 0, i32 0, !dbg !6969
  %13 = load %union.tree_node*, %union.tree_node** %decl12, align 8, !dbg !6969
  %base = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !6969
  %14 = bitcast %struct.tree_base* %base to i64*, !dbg !6969
  %bf.load13 = load i64, i64* %14, align 8, !dbg !6969
  %bf.lshr14 = lshr i64 %bf.load13, 27, !dbg !6969
  %bf.clear15 = and i64 %bf.lshr14, 1, !dbg !6969
  %bf.cast16 = trunc i64 %bf.clear15 to i32, !dbg !6969
  %tobool17 = icmp ne i32 %bf.cast16, 0, !dbg !6969
  br i1 %tobool17, label %if.else, label %if.then18, !dbg !6972

if.then18:                                        ; preds = %if.then11
  %15 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !6973
  %decl19 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %15, i32 0, i32 0, !dbg !6973
  %16 = load %union.tree_node*, %union.tree_node** %decl19, align 8, !dbg !6973
  %decl_minimal = bitcast %union.tree_node* %16 to %struct.tree_decl_minimal*, !dbg !6973
  %locus = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 1, !dbg !6973
  %17 = load i32, i32* %locus, align 8, !dbg !6973
  %call20 = call zeroext i8 (i32, i32, i8*, ...) @warning_at(i32 %17, i32 45, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.61, i64 0, i64 0)), !dbg !6974
  br label %if.end30, !dbg !6974

if.else:                                          ; preds = %if.then11
  %18 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !6975
  %local21 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %18, i32 0, i32 18, !dbg !6977
  %finalized22 = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local21, i32 0, i32 2, !dbg !6978
  %bf.load23 = load i8, i8* %finalized22, align 8, !dbg !6978
  %bf.lshr24 = lshr i8 %bf.load23, 2, !dbg !6978
  %bf.clear25 = and i8 %bf.lshr24, 1, !dbg !6978
  %bf.cast26 = zext i8 %bf.clear25 to i32, !dbg !6978
  %tobool27 = icmp ne i32 %bf.cast26, 0, !dbg !6975
  br i1 %tobool27, label %if.then28, label %if.end29, !dbg !6979

if.then28:                                        ; preds = %if.else
  %19 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !6980
  call void @cgraph_mark_needed_node(%struct.cgraph_node* %19), !dbg !6981
  br label %if.end29, !dbg !6981

if.end29:                                         ; preds = %if.then28, %if.else
  br label %if.end30

if.end30:                                         ; preds = %if.end29, %if.then18
  br label %if.end31, !dbg !6982

if.end31:                                         ; preds = %if.end30, %if.end8
  br label %for.inc, !dbg !6983

for.inc:                                          ; preds = %if.end31
  %20 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !6984
  %next = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %20, i32 0, i32 3, !dbg !6985
  %21 = load %struct.cgraph_node*, %struct.cgraph_node** %next, align 8, !dbg !6985
  store %struct.cgraph_node* %21, %struct.cgraph_node** %node, align 8, !dbg !6986
  br label %for.cond, !dbg !6987, !llvm.loop !6988

for.end:                                          ; preds = %for.cond
  %22 = load %struct.varpool_node*, %struct.varpool_node** @varpool_nodes, align 8, !dbg !6990
  store %struct.varpool_node* %22, %struct.varpool_node** %vnode, align 8, !dbg !6992
  br label %for.cond32, !dbg !6993

for.cond32:                                       ; preds = %for.inc84, %for.end
  %23 = load %struct.varpool_node*, %struct.varpool_node** %vnode, align 8, !dbg !6994
  %24 = load %struct.varpool_node*, %struct.varpool_node** %first_var.addr, align 8, !dbg !6996
  %cmp33 = icmp ne %struct.varpool_node* %23, %24, !dbg !6997
  br i1 %cmp33, label %for.body34, label %for.end86, !dbg !6998

for.body34:                                       ; preds = %for.cond32
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl35, metadata !6999, metadata !DIExpression()), !dbg !7001
  %25 = load %struct.varpool_node*, %struct.varpool_node** %vnode, align 8, !dbg !7002
  %decl36 = getelementptr inbounds %struct.varpool_node, %struct.varpool_node* %25, i32 0, i32 0, !dbg !7003
  %26 = load %union.tree_node*, %union.tree_node** %decl36, align 8, !dbg !7003
  store %union.tree_node* %26, %union.tree_node** %decl35, align 8, !dbg !7001
  %27 = load %union.tree_node*, %union.tree_node** %decl35, align 8, !dbg !7004
  %decl_common37 = bitcast %union.tree_node* %27 to %struct.tree_decl_common*, !dbg !7004
  %preserve_flag38 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common37, i32 0, i32 2, !dbg !7004
  %28 = bitcast i40* %preserve_flag38 to i64*, !dbg !7004
  %bf.load39 = load i64, i64* %28, align 8, !dbg !7004
  %bf.lshr40 = lshr i64 %bf.load39, 13, !dbg !7004
  %bf.clear41 = and i64 %bf.lshr40, 1, !dbg !7004
  %bf.cast42 = trunc i64 %bf.clear41 to i32, !dbg !7004
  %tobool43 = icmp ne i32 %bf.cast42, 0, !dbg !7004
  br i1 %tobool43, label %if.then44, label %if.end55, !dbg !7006

if.then44:                                        ; preds = %for.body34
  %29 = load %union.tree_node*, %union.tree_node** %decl35, align 8, !dbg !7007
  call void @mark_decl_referenced(%union.tree_node* %29), !dbg !7009
  %30 = load %struct.varpool_node*, %struct.varpool_node** %vnode, align 8, !dbg !7010
  %force_output = getelementptr inbounds %struct.varpool_node, %struct.varpool_node* %30, i32 0, i32 5, !dbg !7011
  %bf.load45 = load i8, i8* %force_output, align 4, !dbg !7012
  %bf.clear46 = and i8 %bf.load45, -3, !dbg !7012
  %bf.set = or i8 %bf.clear46, 2, !dbg !7012
  store i8 %bf.set, i8* %force_output, align 4, !dbg !7012
  %31 = load %struct.varpool_node*, %struct.varpool_node** %vnode, align 8, !dbg !7013
  %finalized47 = getelementptr inbounds %struct.varpool_node, %struct.varpool_node* %31, i32 0, i32 5, !dbg !7015
  %bf.load48 = load i8, i8* %finalized47, align 4, !dbg !7015
  %bf.lshr49 = lshr i8 %bf.load48, 3, !dbg !7015
  %bf.clear50 = and i8 %bf.lshr49, 1, !dbg !7015
  %bf.cast51 = zext i8 %bf.clear50 to i32, !dbg !7015
  %tobool52 = icmp ne i32 %bf.cast51, 0, !dbg !7013
  br i1 %tobool52, label %if.then53, label %if.end54, !dbg !7016

if.then53:                                        ; preds = %if.then44
  %32 = load %struct.varpool_node*, %struct.varpool_node** %vnode, align 8, !dbg !7017
  call void @varpool_mark_needed_node(%struct.varpool_node* %32), !dbg !7018
  br label %if.end54, !dbg !7018

if.end54:                                         ; preds = %if.then53, %if.then44
  br label %if.end55, !dbg !7019

if.end55:                                         ; preds = %if.end54, %for.body34
  %33 = load %union.tree_node*, %union.tree_node** %decl35, align 8, !dbg !7020
  %decl_common56 = bitcast %union.tree_node* %33 to %struct.tree_decl_common*, !dbg !7020
  %attributes57 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common56, i32 0, i32 6, !dbg !7020
  %34 = load %union.tree_node*, %union.tree_node** %attributes57, align 8, !dbg !7020
  %call58 = call %union.tree_node* @lookup_attribute(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.60, i64 0, i64 0), %union.tree_node* %34), !dbg !7022
  %tobool59 = icmp ne %union.tree_node* %call58, null, !dbg !7022
  br i1 %tobool59, label %if.then60, label %if.end83, !dbg !7023

if.then60:                                        ; preds = %if.end55
  %35 = load %struct.varpool_node*, %struct.varpool_node** %vnode, align 8, !dbg !7024
  %decl61 = getelementptr inbounds %struct.varpool_node, %struct.varpool_node* %35, i32 0, i32 0, !dbg !7024
  %36 = load %union.tree_node*, %union.tree_node** %decl61, align 8, !dbg !7024
  %base62 = bitcast %union.tree_node* %36 to %struct.tree_base*, !dbg !7024
  %37 = bitcast %struct.tree_base* %base62 to i64*, !dbg !7024
  %bf.load63 = load i64, i64* %37, align 8, !dbg !7024
  %bf.lshr64 = lshr i64 %bf.load63, 27, !dbg !7024
  %bf.clear65 = and i64 %bf.lshr64, 1, !dbg !7024
  %bf.cast66 = trunc i64 %bf.clear65 to i32, !dbg !7024
  %tobool67 = icmp ne i32 %bf.cast66, 0, !dbg !7024
  br i1 %tobool67, label %if.else73, label %if.then68, !dbg !7027

if.then68:                                        ; preds = %if.then60
  %38 = load %struct.varpool_node*, %struct.varpool_node** %vnode, align 8, !dbg !7028
  %decl69 = getelementptr inbounds %struct.varpool_node, %struct.varpool_node* %38, i32 0, i32 0, !dbg !7028
  %39 = load %union.tree_node*, %union.tree_node** %decl69, align 8, !dbg !7028
  %decl_minimal70 = bitcast %union.tree_node* %39 to %struct.tree_decl_minimal*, !dbg !7028
  %locus71 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal70, i32 0, i32 1, !dbg !7028
  %40 = load i32, i32* %locus71, align 8, !dbg !7028
  %call72 = call zeroext i8 (i32, i32, i8*, ...) @warning_at(i32 %40, i32 45, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.61, i64 0, i64 0)), !dbg !7029
  br label %if.end82, !dbg !7029

if.else73:                                        ; preds = %if.then60
  %41 = load %struct.varpool_node*, %struct.varpool_node** %vnode, align 8, !dbg !7030
  %finalized74 = getelementptr inbounds %struct.varpool_node, %struct.varpool_node* %41, i32 0, i32 5, !dbg !7032
  %bf.load75 = load i8, i8* %finalized74, align 4, !dbg !7032
  %bf.lshr76 = lshr i8 %bf.load75, 3, !dbg !7032
  %bf.clear77 = and i8 %bf.lshr76, 1, !dbg !7032
  %bf.cast78 = zext i8 %bf.clear77 to i32, !dbg !7032
  %tobool79 = icmp ne i32 %bf.cast78, 0, !dbg !7030
  br i1 %tobool79, label %if.then80, label %if.end81, !dbg !7033

if.then80:                                        ; preds = %if.else73
  %42 = load %struct.varpool_node*, %struct.varpool_node** %vnode, align 8, !dbg !7034
  call void @varpool_mark_needed_node(%struct.varpool_node* %42), !dbg !7035
  br label %if.end81, !dbg !7035

if.end81:                                         ; preds = %if.then80, %if.else73
  br label %if.end82

if.end82:                                         ; preds = %if.end81, %if.then68
  br label %if.end83, !dbg !7036

if.end83:                                         ; preds = %if.end82, %if.end55
  br label %for.inc84, !dbg !7037

for.inc84:                                        ; preds = %if.end83
  %43 = load %struct.varpool_node*, %struct.varpool_node** %vnode, align 8, !dbg !7038
  %next85 = getelementptr inbounds %struct.varpool_node, %struct.varpool_node* %43, i32 0, i32 1, !dbg !7039
  %44 = load %struct.varpool_node*, %struct.varpool_node** %next85, align 8, !dbg !7039
  store %struct.varpool_node* %44, %struct.varpool_node** %vnode, align 8, !dbg !7040
  br label %for.cond32, !dbg !7041, !llvm.loop !7042

for.end86:                                        ; preds = %for.cond32
  ret void, !dbg !7044
}

declare dso_local void @cgraph_remove_node(%struct.cgraph_node*) #2

declare dso_local void @mark_decl_referenced(%union.tree_node*) #2

declare dso_local zeroext i8 @warning_at(i32, i32, i8*, ...) #2

declare dso_local void @varpool_mark_needed_node(%struct.varpool_node*) #2

declare dso_local void @announce_function(%union.tree_node*) #2

declare dso_local void @tree_rest_of_compilation(%union.tree_node*) #2

declare dso_local void @assemble_alias(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @assemble_thunk(%struct.cgraph_node* %node) #0 !dbg !7045 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  %this_adjusting = alloca i8, align 1
  %fixed_offset = alloca i64, align 8
  %virtual_value = alloca i64, align 8
  %virtual_offset = alloca %union.tree_node*, align 8
  %alias = alloca %union.tree_node*, align 8
  %thunk_fndecl = alloca %union.tree_node*, align 8
  %a = alloca %union.tree_node*, align 8
  %fnname = alloca i8*, align 8
  %fn_block = alloca %union.tree_node*, align 8
  %restype = alloca %union.tree_node*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %then_bb = alloca %struct.basic_block_def*, align 8
  %else_bb = alloca %struct.basic_block_def*, align 8
  %return_bb = alloca %struct.basic_block_def*, align 8
  %bsi = alloca %struct.gimple_stmt_iterator, align 8
  %nargs = alloca i32, align 4
  %arg = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %resdecl = alloca %union.tree_node*, align 8
  %restmp = alloca %union.tree_node*, align 8
  %vargs = alloca %struct.VEC_tree_heap*, align 8
  %call18 = alloca %union.gimple_statement_d*, align 8
  %ret = alloca %union.gimple_statement_d*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %true_label = alloca %union.tree_node*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %tmp140 = alloca %struct.gimple_stmt_iterator, align 8
  %stmt145 = alloca %union.gimple_statement_d*, align 8
  %tmp146 = alloca %struct.gimple_stmt_iterator, align 8
  %tmp151 = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !7046, metadata !DIExpression()), !dbg !7047
  call void @llvm.dbg.declare(metadata i8* %this_adjusting, metadata !7048, metadata !DIExpression()), !dbg !7049
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !7050
  %thunk = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 22, !dbg !7051
  %this_adjusting1 = getelementptr inbounds %struct.cgraph_thunk_info, %struct.cgraph_thunk_info* %thunk, i32 0, i32 3, !dbg !7052
  %1 = load i8, i8* %this_adjusting1, align 8, !dbg !7052
  store i8 %1, i8* %this_adjusting, align 1, !dbg !7049
  call void @llvm.dbg.declare(metadata i64* %fixed_offset, metadata !7053, metadata !DIExpression()), !dbg !7054
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !7055
  %thunk2 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %2, i32 0, i32 22, !dbg !7056
  %fixed_offset3 = getelementptr inbounds %struct.cgraph_thunk_info, %struct.cgraph_thunk_info* %thunk2, i32 0, i32 0, !dbg !7057
  %3 = load i64, i64* %fixed_offset3, align 8, !dbg !7057
  store i64 %3, i64* %fixed_offset, align 8, !dbg !7054
  call void @llvm.dbg.declare(metadata i64* %virtual_value, metadata !7058, metadata !DIExpression()), !dbg !7059
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !7060
  %thunk4 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %4, i32 0, i32 22, !dbg !7061
  %virtual_value5 = getelementptr inbounds %struct.cgraph_thunk_info, %struct.cgraph_thunk_info* %thunk4, i32 0, i32 1, !dbg !7062
  %5 = load i64, i64* %virtual_value5, align 8, !dbg !7062
  store i64 %5, i64* %virtual_value, align 8, !dbg !7059
  call void @llvm.dbg.declare(metadata %union.tree_node** %virtual_offset, metadata !7063, metadata !DIExpression()), !dbg !7064
  store %union.tree_node* null, %union.tree_node** %virtual_offset, align 8, !dbg !7064
  call void @llvm.dbg.declare(metadata %union.tree_node** %alias, metadata !7065, metadata !DIExpression()), !dbg !7066
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !7067
  %thunk6 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %6, i32 0, i32 22, !dbg !7068
  %alias7 = getelementptr inbounds %struct.cgraph_thunk_info, %struct.cgraph_thunk_info* %thunk6, i32 0, i32 2, !dbg !7069
  %7 = load %union.tree_node*, %union.tree_node** %alias7, align 8, !dbg !7069
  store %union.tree_node* %7, %union.tree_node** %alias, align 8, !dbg !7066
  call void @llvm.dbg.declare(metadata %union.tree_node** %thunk_fndecl, metadata !7070, metadata !DIExpression()), !dbg !7071
  %8 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !7072
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %8, i32 0, i32 0, !dbg !7073
  %9 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7073
  store %union.tree_node* %9, %union.tree_node** %thunk_fndecl, align 8, !dbg !7071
  call void @llvm.dbg.declare(metadata %union.tree_node** %a, metadata !7074, metadata !DIExpression()), !dbg !7075
  %10 = load %union.tree_node*, %union.tree_node** %thunk_fndecl, align 8, !dbg !7076
  %decl_non_common = bitcast %union.tree_node* %10 to %struct.tree_decl_non_common*, !dbg !7076
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 2, !dbg !7076
  %11 = load %union.tree_node*, %union.tree_node** %arguments, align 8, !dbg !7076
  store %union.tree_node* %11, %union.tree_node** %a, align 8, !dbg !7075
  %12 = load %union.tree_node*, %union.tree_node** %thunk_fndecl, align 8, !dbg !7077
  store %union.tree_node* %12, %union.tree_node** @current_function_decl, align 8, !dbg !7078
  %13 = load i8, i8* %this_adjusting, align 1, !dbg !7079
  %conv = zext i8 %13 to i32, !dbg !7079
  %tobool = icmp ne i32 %conv, 0, !dbg !7079
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !7081

land.lhs.true:                                    ; preds = %entry
  %14 = load i8 (%union.tree_node*, i64, i64, %union.tree_node*)*, i8 (%union.tree_node*, i64, i64, %union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 0, i32 28), align 8, !dbg !7082
  %15 = load %union.tree_node*, %union.tree_node** %thunk_fndecl, align 8, !dbg !7083
  %16 = load i64, i64* %fixed_offset, align 8, !dbg !7084
  %17 = load i64, i64* %virtual_value, align 8, !dbg !7085
  %18 = load %union.tree_node*, %union.tree_node** %alias, align 8, !dbg !7086
  %call = call zeroext i8 %14(%union.tree_node* %15, i64 %16, i64 %17, %union.tree_node* %18), !dbg !7087
  %conv8 = zext i8 %call to i32, !dbg !7087
  %tobool9 = icmp ne i32 %conv8, 0, !dbg !7087
  br i1 %tobool9, label %if.then, label %if.else, !dbg !7088

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i8** %fnname, metadata !7089, metadata !DIExpression()), !dbg !7091
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn_block, metadata !7092, metadata !DIExpression()), !dbg !7093
  %19 = load %union.tree_node*, %union.tree_node** %thunk_fndecl, align 8, !dbg !7094
  %decl_minimal = bitcast %union.tree_node* %19 to %struct.tree_decl_minimal*, !dbg !7094
  %locus = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 1, !dbg !7094
  %20 = load i32, i32* %locus, align 8, !dbg !7094
  %21 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !7094
  %call10 = call %union.tree_node* @build_decl_stat(i32 %20, i32 36, %union.tree_node* null, %union.tree_node* %21), !dbg !7094
  %22 = load %union.tree_node*, %union.tree_node** %thunk_fndecl, align 8, !dbg !7095
  %decl_non_common11 = bitcast %union.tree_node* %22 to %struct.tree_decl_non_common*, !dbg !7095
  %result = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common11, i32 0, i32 3, !dbg !7095
  store %union.tree_node* %call10, %union.tree_node** %result, align 8, !dbg !7096
  %23 = load %union.tree_node*, %union.tree_node** %thunk_fndecl, align 8, !dbg !7097
  %call12 = call %union.tree_node* @decl_assembler_name(%union.tree_node* %23), !dbg !7097
  %identifier = bitcast %union.tree_node* %call12 to %struct.tree_identifier*, !dbg !7097
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !7097
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 0, !dbg !7097
  %24 = load i8*, i8** %str, align 8, !dbg !7097
  store i8* %24, i8** %fnname, align 8, !dbg !7098
  %call13 = call %union.tree_node* @make_node_stat(i32 4), !dbg !7099
  store %union.tree_node* %call13, %union.tree_node** %fn_block, align 8, !dbg !7100
  %25 = load %union.tree_node*, %union.tree_node** %a, align 8, !dbg !7101
  %26 = load %union.tree_node*, %union.tree_node** %fn_block, align 8, !dbg !7102
  %block = bitcast %union.tree_node* %26 to %struct.tree_block*, !dbg !7102
  %vars = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block, i32 0, i32 3, !dbg !7102
  store %union.tree_node* %25, %union.tree_node** %vars, align 8, !dbg !7103
  %27 = load %union.tree_node*, %union.tree_node** %fn_block, align 8, !dbg !7104
  %28 = load %union.tree_node*, %union.tree_node** %thunk_fndecl, align 8, !dbg !7105
  %decl_common = bitcast %union.tree_node* %28 to %struct.tree_decl_common*, !dbg !7105
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 5, !dbg !7105
  store %union.tree_node* %27, %union.tree_node** %initial, align 8, !dbg !7106
  %29 = load %union.tree_node*, %union.tree_node** %thunk_fndecl, align 8, !dbg !7107
  call void @init_function_start(%union.tree_node* %29), !dbg !7108
  %30 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7109
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %30, i64 0, !dbg !7109
  %is_thunk = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 20, !dbg !7110
  %bf.load = load i32, i32* %is_thunk, align 8, !dbg !7111
  %bf.clear = and i32 %bf.load, -1073741825, !dbg !7111
  %bf.set = or i32 %bf.clear, 1073741824, !dbg !7111
  store i32 %bf.set, i32* %is_thunk, align 8, !dbg !7111
  %31 = load %union.tree_node*, %union.tree_node** %thunk_fndecl, align 8, !dbg !7112
  %32 = load i8*, i8** %fnname, align 8, !dbg !7113
  call void @assemble_start_function(%union.tree_node* %31, i8* %32), !dbg !7114
  %33 = load void (%struct._IO_FILE*, %union.tree_node*, i64, i64, %union.tree_node*)*, void (%struct._IO_FILE*, %union.tree_node*, i64, i64, %union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 0, i32 27), align 8, !dbg !7115
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !7116
  %35 = load %union.tree_node*, %union.tree_node** %thunk_fndecl, align 8, !dbg !7117
  %36 = load i64, i64* %fixed_offset, align 8, !dbg !7118
  %37 = load i64, i64* %virtual_value, align 8, !dbg !7119
  %38 = load %union.tree_node*, %union.tree_node** %alias, align 8, !dbg !7120
  call void %33(%struct._IO_FILE* %34, %union.tree_node* %35, i64 %36, i64 %37, %union.tree_node* %38), !dbg !7121
  %39 = load %union.tree_node*, %union.tree_node** %thunk_fndecl, align 8, !dbg !7122
  %40 = load i8*, i8** %fnname, align 8, !dbg !7123
  call void @assemble_end_function(%union.tree_node* %39, i8* %40), !dbg !7124
  call void @init_insn_lengths(), !dbg !7125
  %41 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7126
  %add.ptr14 = getelementptr inbounds %struct.function, %struct.function* %41, i64 0, !dbg !7126
  call void @free_after_compilation(%struct.function* %add.ptr14), !dbg !7127
  call void @set_cfun(%struct.function* null), !dbg !7128
  %42 = load %union.tree_node*, %union.tree_node** %thunk_fndecl, align 8, !dbg !7129
  %base = bitcast %union.tree_node* %42 to %struct.tree_base*, !dbg !7129
  %43 = bitcast %struct.tree_base* %base to i64*, !dbg !7129
  %bf.load15 = load i64, i64* %43, align 8, !dbg !7130
  %bf.clear16 = and i64 %bf.load15, -4194305, !dbg !7130
  %bf.set17 = or i64 %bf.clear16, 4194304, !dbg !7130
  store i64 %bf.set17, i64* %43, align 8, !dbg !7130
  br label %if.end157, !dbg !7131

if.else:                                          ; preds = %land.lhs.true, %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %restype, metadata !7132, metadata !DIExpression()), !dbg !7134
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !7135, metadata !DIExpression()), !dbg !7136
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %then_bb, metadata !7137, metadata !DIExpression()), !dbg !7138
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %else_bb, metadata !7139, metadata !DIExpression()), !dbg !7140
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %return_bb, metadata !7141, metadata !DIExpression()), !dbg !7142
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %bsi, metadata !7143, metadata !DIExpression()), !dbg !7144
  call void @llvm.dbg.declare(metadata i32* %nargs, metadata !7145, metadata !DIExpression()), !dbg !7146
  store i32 0, i32* %nargs, align 4, !dbg !7146
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !7147, metadata !DIExpression()), !dbg !7148
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7149, metadata !DIExpression()), !dbg !7150
  call void @llvm.dbg.declare(metadata %union.tree_node** %resdecl, metadata !7151, metadata !DIExpression()), !dbg !7152
  call void @llvm.dbg.declare(metadata %union.tree_node** %restmp, metadata !7153, metadata !DIExpression()), !dbg !7154
  store %union.tree_node* null, %union.tree_node** %restmp, align 8, !dbg !7154
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %vargs, metadata !7155, metadata !DIExpression()), !dbg !7156
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %call18, metadata !7157, metadata !DIExpression()), !dbg !7158
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %ret, metadata !7159, metadata !DIExpression()), !dbg !7160
  %44 = load %union.tree_node*, %union.tree_node** %thunk_fndecl, align 8, !dbg !7161
  %decl_common19 = bitcast %union.tree_node* %44 to %struct.tree_decl_common*, !dbg !7161
  %ignored_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common19, i32 0, i32 2, !dbg !7161
  %45 = bitcast i40* %ignored_flag to i64*, !dbg !7161
  %bf.load20 = load i64, i64* %45, align 8, !dbg !7162
  %bf.clear21 = and i64 %bf.load20, -1025, !dbg !7162
  %bf.set22 = or i64 %bf.clear21, 1024, !dbg !7162
  store i64 %bf.set22, i64* %45, align 8, !dbg !7162
  call void @bitmap_obstack_initialize(%struct.bitmap_obstack* null), !dbg !7163
  %46 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !7164
  %thunk23 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %46, i32 0, i32 22, !dbg !7166
  %virtual_offset_p = getelementptr inbounds %struct.cgraph_thunk_info, %struct.cgraph_thunk_info* %thunk23, i32 0, i32 4, !dbg !7167
  %47 = load i8, i8* %virtual_offset_p, align 1, !dbg !7167
  %tobool24 = icmp ne i8 %47, 0, !dbg !7164
  br i1 %tobool24, label %if.then25, label %if.end, !dbg !7168

if.then25:                                        ; preds = %if.else
  %48 = load i64, i64* %virtual_value, align 8, !dbg !7169
  %call26 = call %union.tree_node* @size_int_kind(i64 %48, i32 0), !dbg !7169
  store %union.tree_node* %call26, %union.tree_node** %virtual_offset, align 8, !dbg !7170
  br label %if.end, !dbg !7171

if.end:                                           ; preds = %if.then25, %if.else
  %49 = load %union.tree_node*, %union.tree_node** %thunk_fndecl, align 8, !dbg !7172
  %common = bitcast %union.tree_node* %49 to %struct.tree_common*, !dbg !7172
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7172
  %50 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7172
  %common27 = bitcast %union.tree_node* %50 to %struct.tree_common*, !dbg !7172
  %type28 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common27, i32 0, i32 2, !dbg !7172
  %51 = load %union.tree_node*, %union.tree_node** %type28, align 8, !dbg !7172
  store %union.tree_node* %51, %union.tree_node** %restype, align 8, !dbg !7173
  %52 = load %union.tree_node*, %union.tree_node** %thunk_fndecl, align 8, !dbg !7174
  %decl_non_common29 = bitcast %union.tree_node* %52 to %struct.tree_decl_non_common*, !dbg !7174
  %result30 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common29, i32 0, i32 3, !dbg !7174
  %53 = load %union.tree_node*, %union.tree_node** %result30, align 8, !dbg !7174
  %cmp = icmp eq %union.tree_node* %53, null, !dbg !7176
  br i1 %cmp, label %if.then32, label %if.else45, !dbg !7177

if.then32:                                        ; preds = %if.end
  %54 = load i32, i32* @input_location, align 4, !dbg !7178
  %55 = load %union.tree_node*, %union.tree_node** %restype, align 8, !dbg !7178
  %call33 = call %union.tree_node* @build_decl_stat(i32 %54, i32 36, %union.tree_node* null, %union.tree_node* %55), !dbg !7178
  store %union.tree_node* %call33, %union.tree_node** %resdecl, align 8, !dbg !7180
  %56 = load %union.tree_node*, %union.tree_node** %resdecl, align 8, !dbg !7181
  %decl_common34 = bitcast %union.tree_node* %56 to %struct.tree_decl_common*, !dbg !7181
  %artificial_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common34, i32 0, i32 2, !dbg !7181
  %57 = bitcast i40* %artificial_flag to i64*, !dbg !7181
  %bf.load35 = load i64, i64* %57, align 8, !dbg !7182
  %bf.clear36 = and i64 %bf.load35, -4097, !dbg !7182
  %bf.set37 = or i64 %bf.clear36, 4096, !dbg !7182
  store i64 %bf.set37, i64* %57, align 8, !dbg !7182
  %58 = load %union.tree_node*, %union.tree_node** %resdecl, align 8, !dbg !7183
  %decl_common38 = bitcast %union.tree_node* %58 to %struct.tree_decl_common*, !dbg !7183
  %ignored_flag39 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common38, i32 0, i32 2, !dbg !7183
  %59 = bitcast i40* %ignored_flag39 to i64*, !dbg !7183
  %bf.load40 = load i64, i64* %59, align 8, !dbg !7184
  %bf.clear41 = and i64 %bf.load40, -1025, !dbg !7184
  %bf.set42 = or i64 %bf.clear41, 1024, !dbg !7184
  store i64 %bf.set42, i64* %59, align 8, !dbg !7184
  %60 = load %union.tree_node*, %union.tree_node** %resdecl, align 8, !dbg !7185
  %61 = load %union.tree_node*, %union.tree_node** %thunk_fndecl, align 8, !dbg !7186
  %decl_non_common43 = bitcast %union.tree_node* %61 to %struct.tree_decl_non_common*, !dbg !7186
  %result44 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common43, i32 0, i32 3, !dbg !7186
  store %union.tree_node* %60, %union.tree_node** %result44, align 8, !dbg !7187
  br label %if.end48, !dbg !7188

if.else45:                                        ; preds = %if.end
  %62 = load %union.tree_node*, %union.tree_node** %thunk_fndecl, align 8, !dbg !7189
  %decl_non_common46 = bitcast %union.tree_node* %62 to %struct.tree_decl_non_common*, !dbg !7189
  %result47 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common46, i32 0, i32 3, !dbg !7189
  %63 = load %union.tree_node*, %union.tree_node** %result47, align 8, !dbg !7189
  store %union.tree_node* %63, %union.tree_node** %resdecl, align 8, !dbg !7190
  br label %if.end48

if.end48:                                         ; preds = %if.else45, %if.then32
  %64 = load %union.tree_node*, %union.tree_node** %thunk_fndecl, align 8, !dbg !7191
  %call49 = call %struct.basic_block_def* @init_lowered_empty_function(%union.tree_node* %64), !dbg !7192
  store %struct.basic_block_def* %call49, %struct.basic_block_def** %return_bb, align 8, !dbg !7193
  store %struct.basic_block_def* %call49, %struct.basic_block_def** %else_bb, align 8, !dbg !7194
  store %struct.basic_block_def* %call49, %struct.basic_block_def** %then_bb, align 8, !dbg !7195
  store %struct.basic_block_def* %call49, %struct.basic_block_def** %bb, align 8, !dbg !7196
  %65 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7197
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %65), !dbg !7198
  %66 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !7198
  %67 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !7198
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %66, i8* align 8 %67, i64 24, i1 false), !dbg !7198
  %68 = load %union.tree_node*, %union.tree_node** %restype, align 8, !dbg !7199
  %base50 = bitcast %union.tree_node* %68 to %struct.tree_base*, !dbg !7199
  %69 = bitcast %struct.tree_base* %base50 to i64*, !dbg !7199
  %bf.load51 = load i64, i64* %69, align 8, !dbg !7199
  %bf.clear52 = and i64 %bf.load51, 65535, !dbg !7199
  %bf.cast = trunc i64 %bf.clear52 to i32, !dbg !7199
  %cmp53 = icmp eq i32 %bf.cast, 19, !dbg !7199
  br i1 %cmp53, label %if.end70, label %if.then55, !dbg !7201

if.then55:                                        ; preds = %if.end48
  %70 = load %union.tree_node*, %union.tree_node** %restype, align 8, !dbg !7202
  %call56 = call zeroext i8 @is_gimple_reg_type(%union.tree_node* %70), !dbg !7205
  %tobool57 = icmp ne i8 %call56, 0, !dbg !7205
  br i1 %tobool57, label %if.else67, label %if.then58, !dbg !7206

if.then58:                                        ; preds = %if.then55
  %71 = load %union.tree_node*, %union.tree_node** %resdecl, align 8, !dbg !7207
  store %union.tree_node* %71, %union.tree_node** %restmp, align 8, !dbg !7209
  %72 = load %union.tree_node*, %union.tree_node** %restmp, align 8, !dbg !7210
  %73 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7210
  %add.ptr59 = getelementptr inbounds %struct.function, %struct.function* %73, i64 0, !dbg !7210
  %local_decls = getelementptr inbounds %struct.function, %struct.function* %add.ptr59, i32 0, i32 9, !dbg !7210
  %74 = load %union.tree_node*, %union.tree_node** %local_decls, align 8, !dbg !7210
  %call60 = call %union.tree_node* @tree_cons_stat(%union.tree_node* null, %union.tree_node* %72, %union.tree_node* %74), !dbg !7210
  %75 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7211
  %add.ptr61 = getelementptr inbounds %struct.function, %struct.function* %75, i64 0, !dbg !7211
  %local_decls62 = getelementptr inbounds %struct.function, %struct.function* %add.ptr61, i32 0, i32 9, !dbg !7212
  store %union.tree_node* %call60, %union.tree_node** %local_decls62, align 8, !dbg !7213
  %76 = load %union.tree_node*, %union.tree_node** %restmp, align 8, !dbg !7214
  %77 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !7215
  %decl_common63 = bitcast %union.tree_node* %77 to %struct.tree_decl_common*, !dbg !7215
  %initial64 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common63, i32 0, i32 5, !dbg !7215
  %78 = load %union.tree_node*, %union.tree_node** %initial64, align 8, !dbg !7215
  %block65 = bitcast %union.tree_node* %78 to %struct.tree_block*, !dbg !7215
  %vars66 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block65, i32 0, i32 3, !dbg !7215
  store %union.tree_node* %76, %union.tree_node** %vars66, align 8, !dbg !7216
  br label %if.end69, !dbg !7217

if.else67:                                        ; preds = %if.then55
  %79 = load %union.tree_node*, %union.tree_node** %restype, align 8, !dbg !7218
  %call68 = call %union.tree_node* @create_tmp_var_raw(%union.tree_node* %79, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.62, i64 0, i64 0)), !dbg !7219
  store %union.tree_node* %call68, %union.tree_node** %restmp, align 8, !dbg !7220
  br label %if.end69

if.end69:                                         ; preds = %if.else67, %if.then58
  br label %if.end70, !dbg !7221

if.end70:                                         ; preds = %if.end69, %if.end48
  %80 = load %union.tree_node*, %union.tree_node** %a, align 8, !dbg !7222
  store %union.tree_node* %80, %union.tree_node** %arg, align 8, !dbg !7224
  br label %for.cond, !dbg !7225

for.cond:                                         ; preds = %for.inc, %if.end70
  %81 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !7226
  %tobool71 = icmp ne %union.tree_node* %81, null, !dbg !7228
  br i1 %tobool71, label %for.body, label %for.end, !dbg !7228

for.body:                                         ; preds = %for.cond
  %82 = load i32, i32* %nargs, align 4, !dbg !7229
  %inc = add nsw i32 %82, 1, !dbg !7229
  store i32 %inc, i32* %nargs, align 4, !dbg !7229
  br label %for.inc, !dbg !7230

for.inc:                                          ; preds = %for.body
  %83 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !7231
  %common72 = bitcast %union.tree_node* %83 to %struct.tree_common*, !dbg !7231
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common72, i32 0, i32 1, !dbg !7231
  %84 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !7231
  store %union.tree_node* %84, %union.tree_node** %arg, align 8, !dbg !7232
  br label %for.cond, !dbg !7233, !llvm.loop !7234

for.end:                                          ; preds = %for.cond
  %85 = load i32, i32* %nargs, align 4, !dbg !7236
  %call73 = call %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 %85), !dbg !7236
  store %struct.VEC_tree_heap* %call73, %struct.VEC_tree_heap** %vargs, align 8, !dbg !7237
  %86 = load i8, i8* %this_adjusting, align 1, !dbg !7238
  %tobool74 = icmp ne i8 %86, 0, !dbg !7238
  br i1 %tobool74, label %if.then75, label %if.else80, !dbg !7240

if.then75:                                        ; preds = %for.end
  %87 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vargs, align 8, !dbg !7241
  %tobool76 = icmp ne %struct.VEC_tree_heap* %87, null, !dbg !7241
  br i1 %tobool76, label %cond.true, label %cond.false, !dbg !7241

cond.true:                                        ; preds = %if.then75
  %88 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vargs, align 8, !dbg !7241
  %base77 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %88, i32 0, i32 0, !dbg !7241
  br label %cond.end, !dbg !7241

cond.false:                                       ; preds = %if.then75
  br label %cond.end, !dbg !7241

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base77, %cond.true ], [ null, %cond.false ], !dbg !7241
  %89 = load %union.tree_node*, %union.tree_node** %a, align 8, !dbg !7241
  %90 = load i64, i64* %fixed_offset, align 8, !dbg !7241
  %91 = load %union.tree_node*, %union.tree_node** %virtual_offset, align 8, !dbg !7241
  %call78 = call %union.tree_node* @thunk_adjust(%struct.gimple_stmt_iterator* %bsi, %union.tree_node* %89, i8 zeroext 1, i64 %90, %union.tree_node* %91), !dbg !7241
  %call79 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond, %union.tree_node* %call78), !dbg !7241
  br label %if.end88, !dbg !7241

if.else80:                                        ; preds = %for.end
  %92 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vargs, align 8, !dbg !7242
  %tobool81 = icmp ne %struct.VEC_tree_heap* %92, null, !dbg !7242
  br i1 %tobool81, label %cond.true82, label %cond.false84, !dbg !7242

cond.true82:                                      ; preds = %if.else80
  %93 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vargs, align 8, !dbg !7242
  %base83 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %93, i32 0, i32 0, !dbg !7242
  br label %cond.end85, !dbg !7242

cond.false84:                                     ; preds = %if.else80
  br label %cond.end85, !dbg !7242

cond.end85:                                       ; preds = %cond.false84, %cond.true82
  %cond86 = phi %struct.VEC_tree_base* [ %base83, %cond.true82 ], [ null, %cond.false84 ], !dbg !7242
  %94 = load %union.tree_node*, %union.tree_node** %a, align 8, !dbg !7242
  %call87 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond86, %union.tree_node* %94), !dbg !7242
  br label %if.end88

if.end88:                                         ; preds = %cond.end85, %cond.end
  store i32 1, i32* %i, align 4, !dbg !7243
  %95 = load %union.tree_node*, %union.tree_node** %a, align 8, !dbg !7245
  %common89 = bitcast %union.tree_node* %95 to %struct.tree_common*, !dbg !7245
  %chain90 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common89, i32 0, i32 1, !dbg !7245
  %96 = load %union.tree_node*, %union.tree_node** %chain90, align 8, !dbg !7245
  store %union.tree_node* %96, %union.tree_node** %arg, align 8, !dbg !7246
  br label %for.cond91, !dbg !7247

for.cond91:                                       ; preds = %for.inc102, %if.end88
  %97 = load i32, i32* %i, align 4, !dbg !7248
  %98 = load i32, i32* %nargs, align 4, !dbg !7250
  %cmp92 = icmp slt i32 %97, %98, !dbg !7251
  br i1 %cmp92, label %for.body94, label %for.end106, !dbg !7252

for.body94:                                       ; preds = %for.cond91
  %99 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vargs, align 8, !dbg !7253
  %tobool95 = icmp ne %struct.VEC_tree_heap* %99, null, !dbg !7253
  br i1 %tobool95, label %cond.true96, label %cond.false98, !dbg !7253

cond.true96:                                      ; preds = %for.body94
  %100 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vargs, align 8, !dbg !7253
  %base97 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %100, i32 0, i32 0, !dbg !7253
  br label %cond.end99, !dbg !7253

cond.false98:                                     ; preds = %for.body94
  br label %cond.end99, !dbg !7253

cond.end99:                                       ; preds = %cond.false98, %cond.true96
  %cond100 = phi %struct.VEC_tree_base* [ %base97, %cond.true96 ], [ null, %cond.false98 ], !dbg !7253
  %101 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !7253
  %call101 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond100, %union.tree_node* %101), !dbg !7253
  br label %for.inc102, !dbg !7253

for.inc102:                                       ; preds = %cond.end99
  %102 = load i32, i32* %i, align 4, !dbg !7254
  %inc103 = add nsw i32 %102, 1, !dbg !7254
  store i32 %inc103, i32* %i, align 4, !dbg !7254
  %103 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !7255
  %common104 = bitcast %union.tree_node* %103 to %struct.tree_common*, !dbg !7255
  %chain105 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common104, i32 0, i32 1, !dbg !7255
  %104 = load %union.tree_node*, %union.tree_node** %chain105, align 8, !dbg !7255
  store %union.tree_node* %104, %union.tree_node** %arg, align 8, !dbg !7256
  br label %for.cond91, !dbg !7257, !llvm.loop !7258

for.end106:                                       ; preds = %for.cond91
  %105 = load %union.tree_node*, %union.tree_node** %alias, align 8, !dbg !7260
  %call107 = call %union.tree_node* @build_fold_addr_expr_loc(i32 0, %union.tree_node* %105), !dbg !7261
  %106 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vargs, align 8, !dbg !7262
  %call108 = call %union.gimple_statement_d* @gimple_build_call_vec(%union.tree_node* %call107, %struct.VEC_tree_heap* %106), !dbg !7263
  store %union.gimple_statement_d* %call108, %union.gimple_statement_d** %call18, align 8, !dbg !7264
  call void @VEC_tree_heap_free(%struct.VEC_tree_heap** %vargs), !dbg !7265
  %107 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call18, align 8, !dbg !7266
  call void @gimple_call_set_cannot_inline(%union.gimple_statement_d* %107, i8 zeroext 1), !dbg !7267
  %108 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call18, align 8, !dbg !7268
  call void @gimple_call_set_from_thunk(%union.gimple_statement_d* %108, i8 zeroext 1), !dbg !7269
  %109 = load %union.tree_node*, %union.tree_node** %restmp, align 8, !dbg !7270
  %tobool109 = icmp ne %union.tree_node* %109, null, !dbg !7270
  br i1 %tobool109, label %if.then110, label %if.end111, !dbg !7272

if.then110:                                       ; preds = %for.end106
  %110 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call18, align 8, !dbg !7273
  %111 = load %union.tree_node*, %union.tree_node** %restmp, align 8, !dbg !7274
  call void @gimple_call_set_lhs(%union.gimple_statement_d* %110, %union.tree_node* %111), !dbg !7275
  br label %if.end111, !dbg !7275

if.end111:                                        ; preds = %if.then110, %for.end106
  %112 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call18, align 8, !dbg !7276
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %bsi, %union.gimple_statement_d* %112, i32 0), !dbg !7277
  %113 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call18, align 8, !dbg !7278
  call void @mark_symbols_for_renaming(%union.gimple_statement_d* %113), !dbg !7279
  %114 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call18, align 8, !dbg !7280
  call void @find_referenced_vars_in(%union.gimple_statement_d* %114), !dbg !7281
  %115 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call18, align 8, !dbg !7282
  call void @update_stmt(%union.gimple_statement_d* %115), !dbg !7283
  %116 = load %union.tree_node*, %union.tree_node** %restmp, align 8, !dbg !7284
  %tobool112 = icmp ne %union.tree_node* %116, null, !dbg !7284
  br i1 %tobool112, label %land.lhs.true113, label %if.else153, !dbg !7286

land.lhs.true113:                                 ; preds = %if.end111
  %117 = load i8, i8* %this_adjusting, align 1, !dbg !7287
  %tobool114 = icmp ne i8 %117, 0, !dbg !7287
  br i1 %tobool114, label %if.else153, label %if.then115, !dbg !7288

if.then115:                                       ; preds = %land.lhs.true113
  call void @llvm.dbg.declare(metadata %union.tree_node** %true_label, metadata !7289, metadata !DIExpression()), !dbg !7291
  store %union.tree_node* null, %union.tree_node** %true_label, align 8, !dbg !7291
  %118 = load %union.tree_node*, %union.tree_node** %restmp, align 8, !dbg !7292
  %common116 = bitcast %union.tree_node* %118 to %struct.tree_common*, !dbg !7292
  %type117 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common116, i32 0, i32 2, !dbg !7292
  %119 = load %union.tree_node*, %union.tree_node** %type117, align 8, !dbg !7292
  %base118 = bitcast %union.tree_node* %119 to %struct.tree_base*, !dbg !7292
  %120 = bitcast %struct.tree_base* %base118 to i64*, !dbg !7292
  %bf.load119 = load i64, i64* %120, align 8, !dbg !7292
  %bf.clear120 = and i64 %bf.load119, 65535, !dbg !7292
  %bf.cast121 = trunc i64 %bf.clear120 to i32, !dbg !7292
  %cmp122 = icmp eq i32 %bf.cast121, 10, !dbg !7294
  br i1 %cmp122, label %if.then124, label %if.end141, !dbg !7295

if.then124:                                       ; preds = %if.then115
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !7296, metadata !DIExpression()), !dbg !7298
  %121 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7299
  %call125 = call %struct.basic_block_def* @create_basic_block(i8* null, i8* null, %struct.basic_block_def* %121), !dbg !7300
  store %struct.basic_block_def* %call125, %struct.basic_block_def** %then_bb, align 8, !dbg !7301
  %122 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !7302
  %call126 = call %struct.basic_block_def* @create_basic_block(i8* null, i8* null, %struct.basic_block_def* %122), !dbg !7303
  store %struct.basic_block_def* %call126, %struct.basic_block_def** %return_bb, align 8, !dbg !7304
  %123 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !7305
  %call127 = call %struct.basic_block_def* @create_basic_block(i8* null, i8* null, %struct.basic_block_def* %123), !dbg !7306
  store %struct.basic_block_def* %call127, %struct.basic_block_def** %else_bb, align 8, !dbg !7307
  %124 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7308
  %call128 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %124), !dbg !7309
  call void @remove_edge(%struct.edge_def* %call128), !dbg !7310
  %125 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !7311
  %call129 = call %union.tree_node* @gimple_block_label(%struct.basic_block_def* %125), !dbg !7312
  store %union.tree_node* %call129, %union.tree_node** %true_label, align 8, !dbg !7313
  %126 = load %union.tree_node*, %union.tree_node** %restmp, align 8, !dbg !7314
  %127 = load %union.tree_node*, %union.tree_node** %restmp, align 8, !dbg !7315
  %common130 = bitcast %union.tree_node* %127 to %struct.tree_common*, !dbg !7315
  %type131 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common130, i32 0, i32 2, !dbg !7315
  %128 = load %union.tree_node*, %union.tree_node** %type131, align 8, !dbg !7315
  %129 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !7315
  %call132 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %128, %union.tree_node* %129), !dbg !7315
  %call133 = call %union.gimple_statement_d* @gimple_build_cond(i32 102, %union.tree_node* %126, %union.tree_node* %call132, %union.tree_node* null, %union.tree_node* null), !dbg !7316
  store %union.gimple_statement_d* %call133, %union.gimple_statement_d** %stmt, align 8, !dbg !7317
  %130 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7318
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %bsi, %union.gimple_statement_d* %130, i32 0), !dbg !7319
  %131 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7320
  %132 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !7321
  %call134 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %131, %struct.basic_block_def* %132, i32 1024), !dbg !7322
  %133 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7323
  %134 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !7324
  %call135 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %133, %struct.basic_block_def* %134, i32 2048), !dbg !7325
  %135 = load %struct.basic_block_def*, %struct.basic_block_def** %return_bb, align 8, !dbg !7326
  %136 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7327
  %add.ptr136 = getelementptr inbounds %struct.function, %struct.function* %136, i64 0, !dbg !7327
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr136, i32 0, i32 1, !dbg !7327
  %137 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !7327
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %137, i32 0, i32 1, !dbg !7327
  %138 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !7327
  %call137 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %135, %struct.basic_block_def* %138, i32 0), !dbg !7328
  %139 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !7329
  %140 = load %struct.basic_block_def*, %struct.basic_block_def** %return_bb, align 8, !dbg !7330
  %call138 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %139, %struct.basic_block_def* %140, i32 1), !dbg !7331
  %141 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !7332
  %142 = load %struct.basic_block_def*, %struct.basic_block_def** %return_bb, align 8, !dbg !7333
  %call139 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %141, %struct.basic_block_def* %142, i32 1), !dbg !7334
  %143 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !7335
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tmp140, %struct.basic_block_def* %143), !dbg !7336
  %144 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !7336
  %145 = bitcast %struct.gimple_stmt_iterator* %tmp140 to i8*, !dbg !7336
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %144, i8* align 8 %145, i64 24, i1 false), !dbg !7336
  br label %if.end141, !dbg !7337

if.end141:                                        ; preds = %if.then124, %if.then115
  %146 = load %union.tree_node*, %union.tree_node** %restmp, align 8, !dbg !7338
  %147 = load i64, i64* %fixed_offset, align 8, !dbg !7339
  %148 = load %union.tree_node*, %union.tree_node** %virtual_offset, align 8, !dbg !7340
  %call142 = call %union.tree_node* @thunk_adjust(%struct.gimple_stmt_iterator* %bsi, %union.tree_node* %146, i8 zeroext 0, i64 %147, %union.tree_node* %148), !dbg !7341
  store %union.tree_node* %call142, %union.tree_node** %restmp, align 8, !dbg !7342
  %149 = load %union.tree_node*, %union.tree_node** %true_label, align 8, !dbg !7343
  %tobool143 = icmp ne %union.tree_node* %149, null, !dbg !7343
  br i1 %tobool143, label %if.then144, label %if.end152, !dbg !7345

if.then144:                                       ; preds = %if.end141
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt145, metadata !7346, metadata !DIExpression()), !dbg !7348
  %150 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !7349
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tmp146, %struct.basic_block_def* %150), !dbg !7350
  %151 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !7350
  %152 = bitcast %struct.gimple_stmt_iterator* %tmp146 to i8*, !dbg !7350
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %151, i8* align 8 %152, i64 24, i1 false), !dbg !7350
  %153 = load %union.tree_node*, %union.tree_node** %restmp, align 8, !dbg !7351
  %154 = load %union.tree_node*, %union.tree_node** %restmp, align 8, !dbg !7351
  %common147 = bitcast %union.tree_node* %154 to %struct.tree_common*, !dbg !7351
  %type148 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common147, i32 0, i32 2, !dbg !7351
  %155 = load %union.tree_node*, %union.tree_node** %type148, align 8, !dbg !7351
  %156 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !7351
  %call149 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %155, %union.tree_node* %156), !dbg !7351
  %call150 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %153, %union.tree_node* %call149), !dbg !7351
  store %union.gimple_statement_d* %call150, %union.gimple_statement_d** %stmt145, align 8, !dbg !7352
  %157 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt145, align 8, !dbg !7353
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %bsi, %union.gimple_statement_d* %157, i32 0), !dbg !7354
  %158 = load %struct.basic_block_def*, %struct.basic_block_def** %return_bb, align 8, !dbg !7355
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tmp151, %struct.basic_block_def* %158), !dbg !7356
  %159 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !7356
  %160 = bitcast %struct.gimple_stmt_iterator* %tmp151 to i8*, !dbg !7356
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %159, i8* align 8 %160, i64 24, i1 false), !dbg !7356
  br label %if.end152, !dbg !7357

if.end152:                                        ; preds = %if.then144, %if.end141
  br label %if.end154, !dbg !7358

if.else153:                                       ; preds = %land.lhs.true113, %if.end111
  %161 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call18, align 8, !dbg !7359
  call void @gimple_call_set_tail(%union.gimple_statement_d* %161, i8 zeroext 1), !dbg !7360
  br label %if.end154

if.end154:                                        ; preds = %if.else153, %if.end152
  %162 = load %union.tree_node*, %union.tree_node** %restmp, align 8, !dbg !7361
  %call155 = call %union.gimple_statement_d* @gimple_build_return(%union.tree_node* %162), !dbg !7362
  store %union.gimple_statement_d* %call155, %union.gimple_statement_d** %ret, align 8, !dbg !7363
  %163 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ret, align 8, !dbg !7364
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %bsi, %union.gimple_statement_d* %163, i32 0), !dbg !7365
  %call156 = call zeroext i8 @delete_unreachable_blocks(), !dbg !7366
  call void @update_ssa(i32 2048), !dbg !7367
  %164 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !7368
  call void @cgraph_remove_same_body_alias(%struct.cgraph_node* %164), !dbg !7369
  %165 = load %union.tree_node*, %union.tree_node** %thunk_fndecl, align 8, !dbg !7370
  call void @mark_decl_referenced(%union.tree_node* %165), !dbg !7371
  %166 = load %union.tree_node*, %union.tree_node** %thunk_fndecl, align 8, !dbg !7372
  call void @cgraph_add_new_function(%union.tree_node* %166, i8 zeroext 1), !dbg !7373
  call void @bitmap_obstack_release(%struct.bitmap_obstack* null), !dbg !7374
  br label %if.end157

if.end157:                                        ; preds = %if.end154, %if.then
  store %union.tree_node* null, %union.tree_node** @current_function_decl, align 8, !dbg !7375
  ret void, !dbg !7376
}

declare dso_local void @cgraph_release_function_body(%struct.cgraph_node*) #2

declare dso_local void @init_function_start(%union.tree_node*) #2

declare dso_local void @assemble_start_function(%union.tree_node*, i8*) #2

declare dso_local void @assemble_end_function(%union.tree_node*, i8*) #2

declare dso_local void @init_insn_lengths() #2

declare dso_local void @free_after_compilation(%struct.function*) #2

declare dso_local void @bitmap_obstack_initialize(%struct.bitmap_obstack*) #2

declare dso_local %union.tree_node* @size_int_kind(i64, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @init_lowered_empty_function(%union.tree_node* %decl) #0 !dbg !7377 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !7380, metadata !DIExpression()), !dbg !7381
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !7382, metadata !DIExpression()), !dbg !7383
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7384
  store %union.tree_node* %0, %union.tree_node** @current_function_decl, align 8, !dbg !7385
  %1 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7386
  call void @allocate_struct_function(%union.tree_node* %1, i8 zeroext 0), !dbg !7387
  call void @gimple_register_cfg_hooks(), !dbg !7388
  call void @init_empty_tree_cfg(), !dbg !7389
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7390
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !7390
  call void @init_tree_ssa(%struct.function* %add.ptr), !dbg !7391
  call void @init_ssa_operands(), !dbg !7392
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7393
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !7393
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 3, !dbg !7394
  %4 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !7394
  %in_ssa_p = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %4, i32 0, i32 10, !dbg !7395
  %bf.load = load i8, i8* %in_ssa_p, align 8, !dbg !7396
  %bf.clear = and i8 %bf.load, -2, !dbg !7396
  %bf.set = or i8 %bf.clear, 1, !dbg !7396
  store i8 %bf.set, i8* %in_ssa_p, align 8, !dbg !7396
  %call = call %union.tree_node* @make_node_stat(i32 4), !dbg !7397
  %5 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7398
  %decl_common = bitcast %union.tree_node* %5 to %struct.tree_decl_common*, !dbg !7398
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 5, !dbg !7398
  store %union.tree_node* %call, %union.tree_node** %initial, align 8, !dbg !7399
  %6 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !7400
  %7 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7401
  %decl_non_common = bitcast %union.tree_node* %7 to %struct.tree_decl_non_common*, !dbg !7401
  %saved_tree = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 1, !dbg !7401
  store %union.tree_node* %6, %union.tree_node** %saved_tree, align 8, !dbg !7402
  %8 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7403
  %add.ptr2 = getelementptr inbounds %struct.function, %struct.function* %8, i64 0, !dbg !7403
  %curr_properties = getelementptr inbounds %struct.function, %struct.function* %add.ptr2, i32 0, i32 17, !dbg !7404
  %9 = load i32, i32* %curr_properties, align 8, !dbg !7405
  %or = or i32 %9, 62, !dbg !7405
  store i32 %or, i32* %curr_properties, align 8, !dbg !7405
  %10 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7406
  %add.ptr3 = getelementptr inbounds %struct.function, %struct.function* %10, i64 0, !dbg !7406
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr3, i32 0, i32 1, !dbg !7406
  %11 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !7406
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %11, i32 0, i32 0, !dbg !7406
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !7406
  %call4 = call %struct.basic_block_def* @create_basic_block(i8* null, i8* null, %struct.basic_block_def* %12), !dbg !7407
  store %struct.basic_block_def* %call4, %struct.basic_block_def** %bb, align 8, !dbg !7408
  %13 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7409
  %add.ptr5 = getelementptr inbounds %struct.function, %struct.function* %13, i64 0, !dbg !7409
  %cfg6 = getelementptr inbounds %struct.function, %struct.function* %add.ptr5, i32 0, i32 1, !dbg !7409
  %14 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg6, align 8, !dbg !7409
  %x_entry_block_ptr7 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %14, i32 0, i32 0, !dbg !7409
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr7, align 8, !dbg !7409
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7410
  %call8 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %15, %struct.basic_block_def* %16, i32 0), !dbg !7411
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7412
  %18 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7413
  %add.ptr9 = getelementptr inbounds %struct.function, %struct.function* %18, i64 0, !dbg !7413
  %cfg10 = getelementptr inbounds %struct.function, %struct.function* %add.ptr9, i32 0, i32 1, !dbg !7413
  %19 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg10, align 8, !dbg !7413
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %19, i32 0, i32 1, !dbg !7413
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !7413
  %call11 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %17, %struct.basic_block_def* %20, i32 0), !dbg !7414
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7415
  ret %struct.basic_block_def* %21, !dbg !7416
}

declare dso_local zeroext i8 @is_gimple_reg_type(%union.tree_node*) #2

declare dso_local %union.tree_node* @tree_cons_stat(%union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @create_tmp_var_raw(%union.tree_node*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 %alloc_) #0 !dbg !7417 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7420, metadata !DIExpression()), !dbg !7421
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !7421
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !7421
  %1 = bitcast i8* %call to %struct.VEC_tree_heap*, !dbg !7421
  ret %struct.VEC_tree_heap* %1, !dbg !7421
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @thunk_adjust(%struct.gimple_stmt_iterator* %bsi, %union.tree_node* %ptr, i8 zeroext %this_adjusting, i64 %fixed_offset, %union.tree_node* %virtual_offset) #0 !dbg !7422 {
entry:
  %bsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %ptr.addr = alloca %union.tree_node*, align 8
  %this_adjusting.addr = alloca i8, align 1
  %fixed_offset.addr = alloca i64, align 8
  %virtual_offset.addr = alloca %union.tree_node*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %ret = alloca %union.tree_node*, align 8
  %vtabletmp = alloca %union.tree_node*, align 8
  %vtabletmp2 = alloca %union.tree_node*, align 8
  %vtabletmp3 = alloca %union.tree_node*, align 8
  %offsettmp = alloca %union.tree_node*, align 8
  %vfunc_type = alloca %union.tree_node*, align 8
  %ptrtmp = alloca %union.tree_node*, align 8
  store %struct.gimple_stmt_iterator* %bsi, %struct.gimple_stmt_iterator** %bsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %bsi.addr, metadata !7425, metadata !DIExpression()), !dbg !7426
  store %union.tree_node* %ptr, %union.tree_node** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ptr.addr, metadata !7427, metadata !DIExpression()), !dbg !7428
  store i8 %this_adjusting, i8* %this_adjusting.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %this_adjusting.addr, metadata !7429, metadata !DIExpression()), !dbg !7430
  store i64 %fixed_offset, i64* %fixed_offset.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %fixed_offset.addr, metadata !7431, metadata !DIExpression()), !dbg !7432
  store %union.tree_node* %virtual_offset, %union.tree_node** %virtual_offset.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %virtual_offset.addr, metadata !7433, metadata !DIExpression()), !dbg !7434
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !7435, metadata !DIExpression()), !dbg !7436
  call void @llvm.dbg.declare(metadata %union.tree_node** %ret, metadata !7437, metadata !DIExpression()), !dbg !7438
  %0 = load i8, i8* %this_adjusting.addr, align 1, !dbg !7439
  %conv = zext i8 %0 to i32, !dbg !7439
  %tobool = icmp ne i32 %conv, 0, !dbg !7439
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !7441

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* %fixed_offset.addr, align 8, !dbg !7442
  %cmp = icmp ne i64 %1, 0, !dbg !7443
  br i1 %cmp, label %if.then, label %if.end, !dbg !7444

if.then:                                          ; preds = %land.lhs.true
  %2 = load %union.tree_node*, %union.tree_node** %ptr.addr, align 8, !dbg !7445
  %3 = load i32, i32* @input_location, align 4, !dbg !7445
  %4 = load %union.tree_node*, %union.tree_node** %ptr.addr, align 8, !dbg !7445
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !7445
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7445
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7445
  %6 = load %union.tree_node*, %union.tree_node** %ptr.addr, align 8, !dbg !7445
  %7 = load i64, i64* %fixed_offset.addr, align 8, !dbg !7445
  %call = call %union.tree_node* @size_int_kind(i64 %7, i32 0), !dbg !7445
  %call2 = call %union.tree_node* @fold_build2_stat_loc(i32 %3, i32 66, %union.tree_node* %5, %union.tree_node* %6, %union.tree_node* %call), !dbg !7445
  %call3 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %2, %union.tree_node* %call2), !dbg !7445
  store %union.gimple_statement_d* %call3, %union.gimple_statement_d** %stmt, align 8, !dbg !7447
  %8 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %bsi.addr, align 8, !dbg !7448
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7449
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %8, %union.gimple_statement_d* %9, i32 0), !dbg !7450
  br label %if.end, !dbg !7451

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %10 = load %union.tree_node*, %union.tree_node** %virtual_offset.addr, align 8, !dbg !7452
  %tobool4 = icmp ne %union.tree_node* %10, null, !dbg !7452
  br i1 %tobool4, label %if.then5, label %if.end50, !dbg !7454

if.then5:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %vtabletmp, metadata !7455, metadata !DIExpression()), !dbg !7457
  call void @llvm.dbg.declare(metadata %union.tree_node** %vtabletmp2, metadata !7458, metadata !DIExpression()), !dbg !7459
  call void @llvm.dbg.declare(metadata %union.tree_node** %vtabletmp3, metadata !7460, metadata !DIExpression()), !dbg !7461
  call void @llvm.dbg.declare(metadata %union.tree_node** %offsettmp, metadata !7462, metadata !DIExpression()), !dbg !7463
  %11 = load %union.tree_node*, %union.tree_node** @vtable_entry_type, align 8, !dbg !7464
  %tobool6 = icmp ne %union.tree_node* %11, null, !dbg !7464
  br i1 %tobool6, label %if.end13, label %if.then7, !dbg !7466

if.then7:                                         ; preds = %if.then5
  call void @llvm.dbg.declare(metadata %union.tree_node** %vfunc_type, metadata !7467, metadata !DIExpression()), !dbg !7469
  %call8 = call %union.tree_node* @make_node_stat(i32 20), !dbg !7470
  store %union.tree_node* %call8, %union.tree_node** %vfunc_type, align 8, !dbg !7469
  %12 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !7471
  %13 = load %union.tree_node*, %union.tree_node** %vfunc_type, align 8, !dbg !7472
  %common9 = bitcast %union.tree_node* %13 to %struct.tree_common*, !dbg !7472
  %type10 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common9, i32 0, i32 2, !dbg !7472
  store %union.tree_node* %12, %union.tree_node** %type10, align 8, !dbg !7473
  %14 = load %union.tree_node*, %union.tree_node** %vfunc_type, align 8, !dbg !7474
  %type11 = bitcast %union.tree_node* %14 to %struct.tree_type*, !dbg !7474
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type11, i32 0, i32 1, !dbg !7474
  store %union.tree_node* null, %union.tree_node** %values, align 8, !dbg !7475
  %15 = load %union.tree_node*, %union.tree_node** %vfunc_type, align 8, !dbg !7476
  call void @layout_type(%union.tree_node* %15), !dbg !7477
  %16 = load %union.tree_node*, %union.tree_node** %vfunc_type, align 8, !dbg !7478
  %call12 = call %union.tree_node* @build_pointer_type(%union.tree_node* %16), !dbg !7479
  store %union.tree_node* %call12, %union.tree_node** @vtable_entry_type, align 8, !dbg !7480
  br label %if.end13, !dbg !7481

if.end13:                                         ; preds = %if.then7, %if.then5
  %17 = load %union.tree_node*, %union.tree_node** @vtable_entry_type, align 8, !dbg !7482
  %call14 = call %union.tree_node* @build_pointer_type(%union.tree_node* %17), !dbg !7483
  %call15 = call %union.tree_node* @build_pointer_type(%union.tree_node* %call14), !dbg !7484
  %call16 = call %union.tree_node* @create_tmp_var(%union.tree_node* %call15, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.63, i64 0, i64 0)), !dbg !7485
  store %union.tree_node* %call16, %union.tree_node** %vtabletmp, align 8, !dbg !7486
  %18 = load %union.tree_node*, %union.tree_node** %vtabletmp, align 8, !dbg !7487
  %19 = load %union.tree_node*, %union.tree_node** %vtabletmp, align 8, !dbg !7487
  %common17 = bitcast %union.tree_node* %19 to %struct.tree_common*, !dbg !7487
  %type18 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common17, i32 0, i32 2, !dbg !7487
  %20 = load %union.tree_node*, %union.tree_node** %type18, align 8, !dbg !7487
  %21 = load %union.tree_node*, %union.tree_node** %ptr.addr, align 8, !dbg !7487
  %call19 = call %union.tree_node* @build1_stat(i32 116, %union.tree_node* %20, %union.tree_node* %21), !dbg !7487
  %call20 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %18, %union.tree_node* %call19), !dbg !7487
  store %union.gimple_statement_d* %call20, %union.gimple_statement_d** %stmt, align 8, !dbg !7488
  %22 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %bsi.addr, align 8, !dbg !7489
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7490
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %22, %union.gimple_statement_d* %23, i32 0), !dbg !7491
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7492
  call void @mark_symbols_for_renaming(%union.gimple_statement_d* %24), !dbg !7493
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7494
  call void @find_referenced_vars_in(%union.gimple_statement_d* %25), !dbg !7495
  %26 = load %union.tree_node*, %union.tree_node** %vtabletmp, align 8, !dbg !7496
  %common21 = bitcast %union.tree_node* %26 to %struct.tree_common*, !dbg !7496
  %type22 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common21, i32 0, i32 2, !dbg !7496
  %27 = load %union.tree_node*, %union.tree_node** %type22, align 8, !dbg !7496
  %common23 = bitcast %union.tree_node* %27 to %struct.tree_common*, !dbg !7496
  %type24 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common23, i32 0, i32 2, !dbg !7496
  %28 = load %union.tree_node*, %union.tree_node** %type24, align 8, !dbg !7496
  %call25 = call %union.tree_node* @create_tmp_var(%union.tree_node* %28, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.64, i64 0, i64 0)), !dbg !7497
  store %union.tree_node* %call25, %union.tree_node** %vtabletmp2, align 8, !dbg !7498
  %29 = load %union.tree_node*, %union.tree_node** %vtabletmp2, align 8, !dbg !7499
  %30 = load %union.tree_node*, %union.tree_node** %vtabletmp2, align 8, !dbg !7499
  %common26 = bitcast %union.tree_node* %30 to %struct.tree_common*, !dbg !7499
  %type27 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common26, i32 0, i32 2, !dbg !7499
  %31 = load %union.tree_node*, %union.tree_node** %type27, align 8, !dbg !7499
  %32 = load %union.tree_node*, %union.tree_node** %vtabletmp, align 8, !dbg !7499
  %call28 = call %union.tree_node* @build1_stat(i32 47, %union.tree_node* %31, %union.tree_node* %32), !dbg !7499
  %call29 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %29, %union.tree_node* %call28), !dbg !7499
  store %union.gimple_statement_d* %call29, %union.gimple_statement_d** %stmt, align 8, !dbg !7500
  %33 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %bsi.addr, align 8, !dbg !7501
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7502
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %33, %union.gimple_statement_d* %34, i32 0), !dbg !7503
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7504
  call void @mark_symbols_for_renaming(%union.gimple_statement_d* %35), !dbg !7505
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7506
  call void @find_referenced_vars_in(%union.gimple_statement_d* %36), !dbg !7507
  %37 = load %union.tree_node*, %union.tree_node** %vtabletmp2, align 8, !dbg !7508
  %38 = load i32, i32* @input_location, align 4, !dbg !7508
  %39 = load %union.tree_node*, %union.tree_node** %vtabletmp2, align 8, !dbg !7508
  %common30 = bitcast %union.tree_node* %39 to %struct.tree_common*, !dbg !7508
  %type31 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common30, i32 0, i32 2, !dbg !7508
  %40 = load %union.tree_node*, %union.tree_node** %type31, align 8, !dbg !7508
  %41 = load %union.tree_node*, %union.tree_node** %vtabletmp2, align 8, !dbg !7508
  %42 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !7508
  %43 = load %union.tree_node*, %union.tree_node** %virtual_offset.addr, align 8, !dbg !7508
  %call32 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %42, %union.tree_node* %43), !dbg !7508
  %call33 = call %union.tree_node* @fold_build2_stat_loc(i32 %38, i32 66, %union.tree_node* %40, %union.tree_node* %41, %union.tree_node* %call32), !dbg !7508
  %call34 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %37, %union.tree_node* %call33), !dbg !7508
  store %union.gimple_statement_d* %call34, %union.gimple_statement_d** %stmt, align 8, !dbg !7509
  %44 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %bsi.addr, align 8, !dbg !7510
  %45 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7511
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %44, %union.gimple_statement_d* %45, i32 0), !dbg !7512
  %46 = load %union.tree_node*, %union.tree_node** %vtabletmp2, align 8, !dbg !7513
  %common35 = bitcast %union.tree_node* %46 to %struct.tree_common*, !dbg !7513
  %type36 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common35, i32 0, i32 2, !dbg !7513
  %47 = load %union.tree_node*, %union.tree_node** %type36, align 8, !dbg !7513
  %common37 = bitcast %union.tree_node* %47 to %struct.tree_common*, !dbg !7513
  %type38 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common37, i32 0, i32 2, !dbg !7513
  %48 = load %union.tree_node*, %union.tree_node** %type38, align 8, !dbg !7513
  %call39 = call %union.tree_node* @create_tmp_var(%union.tree_node* %48, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.65, i64 0, i64 0)), !dbg !7514
  store %union.tree_node* %call39, %union.tree_node** %vtabletmp3, align 8, !dbg !7515
  %49 = load %union.tree_node*, %union.tree_node** %vtabletmp3, align 8, !dbg !7516
  %50 = load %union.tree_node*, %union.tree_node** %vtabletmp3, align 8, !dbg !7516
  %common40 = bitcast %union.tree_node* %50 to %struct.tree_common*, !dbg !7516
  %type41 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common40, i32 0, i32 2, !dbg !7516
  %51 = load %union.tree_node*, %union.tree_node** %type41, align 8, !dbg !7516
  %52 = load %union.tree_node*, %union.tree_node** %vtabletmp2, align 8, !dbg !7516
  %call42 = call %union.tree_node* @build1_stat(i32 47, %union.tree_node* %51, %union.tree_node* %52), !dbg !7516
  %call43 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %49, %union.tree_node* %call42), !dbg !7516
  store %union.gimple_statement_d* %call43, %union.gimple_statement_d** %stmt, align 8, !dbg !7517
  %53 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %bsi.addr, align 8, !dbg !7518
  %54 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7519
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %53, %union.gimple_statement_d* %54, i32 0), !dbg !7520
  %55 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7521
  call void @mark_symbols_for_renaming(%union.gimple_statement_d* %55), !dbg !7522
  %56 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7523
  call void @find_referenced_vars_in(%union.gimple_statement_d* %56), !dbg !7524
  %57 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !7525
  %call44 = call %union.tree_node* @create_tmp_var(%union.tree_node* %57, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.66, i64 0, i64 0)), !dbg !7526
  store %union.tree_node* %call44, %union.tree_node** %offsettmp, align 8, !dbg !7527
  %58 = load %union.tree_node*, %union.tree_node** %offsettmp, align 8, !dbg !7528
  %59 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !7528
  %60 = load %union.tree_node*, %union.tree_node** %vtabletmp3, align 8, !dbg !7528
  %call45 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %59, %union.tree_node* %60), !dbg !7528
  %call46 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %58, %union.tree_node* %call45), !dbg !7528
  store %union.gimple_statement_d* %call46, %union.gimple_statement_d** %stmt, align 8, !dbg !7529
  %61 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %bsi.addr, align 8, !dbg !7530
  %62 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7531
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %61, %union.gimple_statement_d* %62, i32 0), !dbg !7532
  %63 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7533
  call void @mark_symbols_for_renaming(%union.gimple_statement_d* %63), !dbg !7534
  %64 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7535
  call void @find_referenced_vars_in(%union.gimple_statement_d* %64), !dbg !7536
  %65 = load i32, i32* @input_location, align 4, !dbg !7537
  %66 = load %union.tree_node*, %union.tree_node** %ptr.addr, align 8, !dbg !7537
  %common47 = bitcast %union.tree_node* %66 to %struct.tree_common*, !dbg !7537
  %type48 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common47, i32 0, i32 2, !dbg !7537
  %67 = load %union.tree_node*, %union.tree_node** %type48, align 8, !dbg !7537
  %68 = load %union.tree_node*, %union.tree_node** %ptr.addr, align 8, !dbg !7537
  %69 = load %union.tree_node*, %union.tree_node** %offsettmp, align 8, !dbg !7537
  %call49 = call %union.tree_node* @fold_build2_stat_loc(i32 %65, i32 66, %union.tree_node* %67, %union.tree_node* %68, %union.tree_node* %69), !dbg !7537
  store %union.tree_node* %call49, %union.tree_node** %ptr.addr, align 8, !dbg !7538
  br label %if.end50, !dbg !7539

if.end50:                                         ; preds = %if.end13, %if.end
  %70 = load i8, i8* %this_adjusting.addr, align 1, !dbg !7540
  %tobool51 = icmp ne i8 %70, 0, !dbg !7540
  br i1 %tobool51, label %if.end68, label %land.lhs.true52, !dbg !7542

land.lhs.true52:                                  ; preds = %if.end50
  %71 = load i64, i64* %fixed_offset.addr, align 8, !dbg !7543
  %cmp53 = icmp ne i64 %71, 0, !dbg !7544
  br i1 %cmp53, label %if.then55, label %if.end68, !dbg !7545

if.then55:                                        ; preds = %land.lhs.true52
  call void @llvm.dbg.declare(metadata %union.tree_node** %ptrtmp, metadata !7546, metadata !DIExpression()), !dbg !7548
  %72 = load %union.tree_node*, %union.tree_node** %ptr.addr, align 8, !dbg !7549
  %base = bitcast %union.tree_node* %72 to %struct.tree_base*, !dbg !7549
  %73 = bitcast %struct.tree_base* %base to i64*, !dbg !7549
  %bf.load = load i64, i64* %73, align 8, !dbg !7549
  %bf.clear = and i64 %bf.load, 65535, !dbg !7549
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7549
  %cmp56 = icmp eq i32 %bf.cast, 32, !dbg !7551
  br i1 %cmp56, label %if.then58, label %if.else, !dbg !7552

if.then58:                                        ; preds = %if.then55
  %74 = load %union.tree_node*, %union.tree_node** %ptr.addr, align 8, !dbg !7553
  store %union.tree_node* %74, %union.tree_node** %ptrtmp, align 8, !dbg !7554
  br label %if.end63, !dbg !7555

if.else:                                          ; preds = %if.then55
  %75 = load %union.tree_node*, %union.tree_node** %ptr.addr, align 8, !dbg !7556
  %common59 = bitcast %union.tree_node* %75 to %struct.tree_common*, !dbg !7556
  %type60 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common59, i32 0, i32 2, !dbg !7556
  %76 = load %union.tree_node*, %union.tree_node** %type60, align 8, !dbg !7556
  %call61 = call %union.tree_node* @create_tmp_var(%union.tree_node* %76, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.67, i64 0, i64 0)), !dbg !7558
  store %union.tree_node* %call61, %union.tree_node** %ptrtmp, align 8, !dbg !7559
  %77 = load %union.tree_node*, %union.tree_node** %ptrtmp, align 8, !dbg !7560
  %78 = load %union.tree_node*, %union.tree_node** %ptr.addr, align 8, !dbg !7560
  %call62 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %77, %union.tree_node* %78), !dbg !7560
  store %union.gimple_statement_d* %call62, %union.gimple_statement_d** %stmt, align 8, !dbg !7561
  %79 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %bsi.addr, align 8, !dbg !7562
  %80 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7563
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %79, %union.gimple_statement_d* %80, i32 0), !dbg !7564
  %81 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7565
  call void @mark_symbols_for_renaming(%union.gimple_statement_d* %81), !dbg !7566
  %82 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7567
  call void @find_referenced_vars_in(%union.gimple_statement_d* %82), !dbg !7568
  br label %if.end63

if.end63:                                         ; preds = %if.else, %if.then58
  %83 = load i32, i32* @input_location, align 4, !dbg !7569
  %84 = load %union.tree_node*, %union.tree_node** %ptrtmp, align 8, !dbg !7569
  %common64 = bitcast %union.tree_node* %84 to %struct.tree_common*, !dbg !7569
  %type65 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common64, i32 0, i32 2, !dbg !7569
  %85 = load %union.tree_node*, %union.tree_node** %type65, align 8, !dbg !7569
  %86 = load %union.tree_node*, %union.tree_node** %ptrtmp, align 8, !dbg !7569
  %87 = load i64, i64* %fixed_offset.addr, align 8, !dbg !7569
  %call66 = call %union.tree_node* @size_int_kind(i64 %87, i32 0), !dbg !7569
  %call67 = call %union.tree_node* @fold_build2_stat_loc(i32 %83, i32 66, %union.tree_node* %85, %union.tree_node* %86, %union.tree_node* %call66), !dbg !7569
  store %union.tree_node* %call67, %union.tree_node** %ptr.addr, align 8, !dbg !7570
  br label %if.end68, !dbg !7571

if.end68:                                         ; preds = %if.end63, %land.lhs.true52, %if.end50
  %88 = load %union.tree_node*, %union.tree_node** %ptr.addr, align 8, !dbg !7572
  %common69 = bitcast %union.tree_node* %88 to %struct.tree_common*, !dbg !7572
  %type70 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common69, i32 0, i32 2, !dbg !7572
  %89 = load %union.tree_node*, %union.tree_node** %type70, align 8, !dbg !7572
  %call71 = call %union.tree_node* @create_tmp_var(%union.tree_node* %89, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.68, i64 0, i64 0)), !dbg !7573
  store %union.tree_node* %call71, %union.tree_node** %ret, align 8, !dbg !7574
  %90 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !7575
  %91 = load %union.tree_node*, %union.tree_node** %ptr.addr, align 8, !dbg !7575
  %call72 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %90, %union.tree_node* %91), !dbg !7575
  store %union.gimple_statement_d* %call72, %union.gimple_statement_d** %stmt, align 8, !dbg !7576
  %92 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7577
  call void @mark_symbols_for_renaming(%union.gimple_statement_d* %92), !dbg !7578
  %93 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7579
  call void @find_referenced_vars_in(%union.gimple_statement_d* %93), !dbg !7580
  %94 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %bsi.addr, align 8, !dbg !7581
  %95 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7582
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %94, %union.gimple_statement_d* %95, i32 0), !dbg !7583
  %96 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !7584
  ret %union.tree_node* %96, !dbg !7585
}

declare dso_local %union.gimple_statement_d* @gimple_build_call_vec(%union.tree_node*, %struct.VEC_tree_heap*) #2

declare dso_local %union.tree_node* @build_fold_addr_expr_loc(i32, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_tree_heap_free(%struct.VEC_tree_heap** %vec_) #0 !dbg !7586 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !7590, metadata !DIExpression()), !dbg !7591
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !7592
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %0, align 8, !dbg !7592
  %tobool = icmp ne %struct.VEC_tree_heap* %1, null, !dbg !7592
  br i1 %tobool, label %if.then, label %if.end, !dbg !7591

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !7592
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %2, align 8, !dbg !7592
  %4 = bitcast %struct.VEC_tree_heap* %3 to i8*, !dbg !7592
  call void @free(i8* %4), !dbg !7592
  br label %if.end, !dbg !7592

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !7591
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** %5, align 8, !dbg !7591
  ret void, !dbg !7591
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_call_set_cannot_inline(%union.gimple_statement_d* %s, i8 zeroext %inlinable_p) #0 !dbg !7594 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  %inlinable_p.addr = alloca i8, align 1
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !7597, metadata !DIExpression()), !dbg !7598
  store i8 %inlinable_p, i8* %inlinable_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %inlinable_p.addr, metadata !7599, metadata !DIExpression()), !dbg !7600
  %0 = load i8, i8* %inlinable_p.addr, align 1, !dbg !7601
  %tobool = icmp ne i8 %0, 0, !dbg !7601
  br i1 %tobool, label %if.then, label %if.else, !dbg !7603

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7604
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !7605
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !7606
  %bf.load = load i32, i32* %2, align 8, !dbg !7607
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !7607
  %or = or i32 %bf.lshr, 1, !dbg !7607
  %bf.load1 = load i32, i32* %2, align 8, !dbg !7607
  %bf.value = and i32 %or, 65535, !dbg !7607
  %bf.shl = shl i32 %bf.value, 16, !dbg !7607
  %bf.clear = and i32 %bf.load1, 65535, !dbg !7607
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !7607
  store i32 %bf.set, i32* %2, align 8, !dbg !7607
  br label %if.end, !dbg !7604

if.else:                                          ; preds = %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7608
  %gsbase2 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_base*, !dbg !7609
  %4 = bitcast %struct.gimple_statement_base* %gsbase2 to i32*, !dbg !7610
  %bf.load3 = load i32, i32* %4, align 8, !dbg !7611
  %bf.lshr4 = lshr i32 %bf.load3, 16, !dbg !7611
  %and = and i32 %bf.lshr4, -2, !dbg !7611
  %bf.load5 = load i32, i32* %4, align 8, !dbg !7611
  %bf.value6 = and i32 %and, 65535, !dbg !7611
  %bf.shl7 = shl i32 %bf.value6, 16, !dbg !7611
  %bf.clear8 = and i32 %bf.load5, 65535, !dbg !7611
  %bf.set9 = or i32 %bf.clear8, %bf.shl7, !dbg !7611
  store i32 %bf.set9, i32* %4, align 8, !dbg !7611
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !7612
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_call_set_from_thunk(%union.gimple_statement_d* %s, i8 zeroext %from_thunk_p) #0 !dbg !7613 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  %from_thunk_p.addr = alloca i8, align 1
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !7614, metadata !DIExpression()), !dbg !7615
  store i8 %from_thunk_p, i8* %from_thunk_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %from_thunk_p.addr, metadata !7616, metadata !DIExpression()), !dbg !7617
  %0 = load i8, i8* %from_thunk_p.addr, align 1, !dbg !7618
  %tobool = icmp ne i8 %0, 0, !dbg !7618
  br i1 %tobool, label %if.then, label %if.else, !dbg !7620

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7621
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !7622
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !7623
  %bf.load = load i32, i32* %2, align 8, !dbg !7624
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !7624
  %or = or i32 %bf.lshr, 2, !dbg !7624
  %bf.load1 = load i32, i32* %2, align 8, !dbg !7624
  %bf.value = and i32 %or, 65535, !dbg !7624
  %bf.shl = shl i32 %bf.value, 16, !dbg !7624
  %bf.clear = and i32 %bf.load1, 65535, !dbg !7624
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !7624
  store i32 %bf.set, i32* %2, align 8, !dbg !7624
  br label %if.end, !dbg !7621

if.else:                                          ; preds = %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7625
  %gsbase2 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_base*, !dbg !7626
  %4 = bitcast %struct.gimple_statement_base* %gsbase2 to i32*, !dbg !7627
  %bf.load3 = load i32, i32* %4, align 8, !dbg !7628
  %bf.lshr4 = lshr i32 %bf.load3, 16, !dbg !7628
  %and = and i32 %bf.lshr4, -3, !dbg !7628
  %bf.load5 = load i32, i32* %4, align 8, !dbg !7628
  %bf.value6 = and i32 %and, 65535, !dbg !7628
  %bf.shl7 = shl i32 %bf.value6, 16, !dbg !7628
  %bf.clear8 = and i32 %bf.load5, 65535, !dbg !7628
  %bf.set9 = or i32 %bf.clear8, %bf.shl7, !dbg !7628
  store i32 %bf.set9, i32* %4, align 8, !dbg !7628
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !7629
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_call_set_lhs(%union.gimple_statement_d* %gs, %union.tree_node* %lhs) #0 !dbg !7630 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %lhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7631, metadata !DIExpression()), !dbg !7632
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !7633, metadata !DIExpression()), !dbg !7634
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7635
  %1 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !7636
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 0, %union.tree_node* %1), !dbg !7637
  %2 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !7638
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !7638
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !7640

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !7641
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !7641
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !7641
  %bf.load = load i64, i64* %4, align 8, !dbg !7641
  %bf.clear = and i64 %bf.load, 65535, !dbg !7641
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7641
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !7642
  br i1 %cmp, label %if.then, label %if.end, !dbg !7643

if.then:                                          ; preds = %land.lhs.true
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7644
  %6 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !7645
  %ssa_name = bitcast %union.tree_node* %6 to %struct.tree_ssa_name*, !dbg !7645
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !7645
  store %union.gimple_statement_d* %5, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7646
  br label %if.end, !dbg !7645

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void, !dbg !7647
}

declare dso_local void @gsi_insert_after(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) #2

declare dso_local void @mark_symbols_for_renaming(%union.gimple_statement_d*) #2

declare dso_local void @find_referenced_vars_in(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @update_stmt(%union.gimple_statement_d* %s) #0 !dbg !7648 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !7651, metadata !DIExpression()), !dbg !7652
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7653
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !7655
  %tobool = icmp ne i8 %call, 0, !dbg !7655
  br i1 %tobool, label %if.then, label %if.end, !dbg !7656

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7657
  call void @gimple_set_modified(%union.gimple_statement_d* %1, i8 zeroext 1), !dbg !7659
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7660
  call void @update_stmt_operands(%union.gimple_statement_d* %2), !dbg !7661
  br label %if.end, !dbg !7662

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !7663
}

declare dso_local %struct.basic_block_def* @create_basic_block(i8*, i8*, %struct.basic_block_def*) #2

declare dso_local void @remove_edge(%struct.edge_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %bb) #0 !dbg !7664 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !7667, metadata !DIExpression()), !dbg !7668
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7669
  %call = call zeroext i8 @single_succ_p(%struct.basic_block_def* %0), !dbg !7669
  %tobool = icmp ne i8 %call, 0, !dbg !7669
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !7669

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.69, i64 0, i64 0), i32 645, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !7669
  br label %cond.end, !dbg !7669

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7669

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7669
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7670
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 1, !dbg !7670
  %2 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !7670
  %tobool1 = icmp ne %struct.VEC_edge_gc* %2, null, !dbg !7670
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !7670

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7670
  %succs3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 1, !dbg !7670
  %4 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs3, align 8, !dbg !7670
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %4, i32 0, i32 0, !dbg !7670
  br label %cond.end5, !dbg !7670

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !7670

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_edge_base* [ %base, %cond.true2 ], [ null, %cond.false4 ], !dbg !7670
  %call7 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond6, i32 0), !dbg !7670
  ret %struct.edge_def* %call7, !dbg !7671
}

declare dso_local %union.tree_node* @gimple_block_label(%struct.basic_block_def*) #2

declare dso_local %union.gimple_statement_d* @gimple_build_cond(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @fold_convert_loc(i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %struct.edge_def* @make_edge(%struct.basic_block_def*, %struct.basic_block_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_last_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !7672 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !7673, metadata !DIExpression()), !dbg !7674
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !7675, metadata !DIExpression()), !dbg !7676
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !7677, metadata !DIExpression()), !dbg !7678
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7679
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !7680
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !7681
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !7682
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %1), !dbg !7683
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !7684
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !7685
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !7686
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !7687
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !7688
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7689
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !7690
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !7691
  ret void, !dbg !7692
}

declare dso_local %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_call_set_tail(%union.gimple_statement_d* %s, i8 zeroext %tail_p) #0 !dbg !7693 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  %tail_p.addr = alloca i8, align 1
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !7694, metadata !DIExpression()), !dbg !7695
  store i8 %tail_p, i8* %tail_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %tail_p.addr, metadata !7696, metadata !DIExpression()), !dbg !7697
  %0 = load i8, i8* %tail_p.addr, align 1, !dbg !7698
  %tobool = icmp ne i8 %0, 0, !dbg !7698
  br i1 %tobool, label %if.then, label %if.else, !dbg !7700

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7701
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !7702
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !7703
  %bf.load = load i32, i32* %2, align 8, !dbg !7704
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !7704
  %or = or i32 %bf.lshr, 8, !dbg !7704
  %bf.load1 = load i32, i32* %2, align 8, !dbg !7704
  %bf.value = and i32 %or, 65535, !dbg !7704
  %bf.shl = shl i32 %bf.value, 16, !dbg !7704
  %bf.clear = and i32 %bf.load1, 65535, !dbg !7704
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !7704
  store i32 %bf.set, i32* %2, align 8, !dbg !7704
  br label %if.end, !dbg !7701

if.else:                                          ; preds = %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7705
  %gsbase2 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_base*, !dbg !7706
  %4 = bitcast %struct.gimple_statement_base* %gsbase2 to i32*, !dbg !7707
  %bf.load3 = load i32, i32* %4, align 8, !dbg !7708
  %bf.lshr4 = lshr i32 %bf.load3, 16, !dbg !7708
  %and = and i32 %bf.lshr4, -9, !dbg !7708
  %bf.load5 = load i32, i32* %4, align 8, !dbg !7708
  %bf.value6 = and i32 %and, 65535, !dbg !7708
  %bf.shl7 = shl i32 %bf.value6, 16, !dbg !7708
  %bf.clear8 = and i32 %bf.load5, 65535, !dbg !7708
  %bf.set9 = or i32 %bf.clear8, %bf.shl7, !dbg !7708
  store i32 %bf.set9, i32* %4, align 8, !dbg !7708
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !7709
}

declare dso_local %union.gimple_statement_d* @gimple_build_return(%union.tree_node*) #2

declare dso_local zeroext i8 @delete_unreachable_blocks() #2

declare dso_local void @update_ssa(i32) #2

declare dso_local void @cgraph_remove_same_body_alias(%struct.cgraph_node*) #2

declare dso_local void @bitmap_obstack_release(%struct.bitmap_obstack*) #2

declare dso_local void @init_empty_tree_cfg() #2

declare dso_local void @init_tree_ssa(%struct.function*) #2

declare dso_local void @init_ssa_operands() #2

declare dso_local i8* @vec_heap_p_reserve_exact(i8*, i32) #2

declare dso_local %union.tree_node* @fold_build2_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local void @layout_type(%union.tree_node*) #2

declare dso_local %union.tree_node* @build_pointer_type(%union.tree_node*) #2

declare dso_local %union.tree_node* @create_tmp_var(%union.tree_node*, i8*) #2

declare dso_local %union.tree_node* @build1_stat(i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_op(%union.gimple_statement_d* %gs, i32 %i, %union.tree_node* %op) #0 !dbg !7710 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  %op.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7713, metadata !DIExpression()), !dbg !7714
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !7715, metadata !DIExpression()), !dbg !7716
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !7717, metadata !DIExpression()), !dbg !7718
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7719
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !7719
  %conv = zext i8 %call to i32, !dbg !7719
  %tobool = icmp ne i32 %conv, 0, !dbg !7719
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !7719

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %i.addr, align 4, !dbg !7719
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7719
  %call1 = call i32 @gimple_num_ops(%union.gimple_statement_d* %2), !dbg !7719
  %cmp = icmp ult i32 %1, %call1, !dbg !7719
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !7719

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.53, i64 0, i64 0), i32 1665, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !7719
  br label %cond.end, !dbg !7719

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !7719

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7719
  %3 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !7720
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7721
  %call3 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %4), !dbg !7722
  %5 = load i32, i32* %i.addr, align 4, !dbg !7723
  %idxprom = zext i32 %5 to i64, !dbg !7722
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call3, i64 %idxprom, !dbg !7722
  store %union.tree_node* %3, %union.tree_node** %arrayidx, align 8, !dbg !7724
  ret void, !dbg !7725
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #0 !dbg !7726 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7729, metadata !DIExpression()), !dbg !7730
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7731
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !7732
  %num_ops = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 3, !dbg !7733
  %1 = load i32, i32* %num_ops, align 4, !dbg !7733
  ret i32 %1, !dbg !7734
}

declare dso_local void @gimple_set_modified(%union.gimple_statement_d*, i8 zeroext) #2

declare dso_local void @update_stmt_operands(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_succ_p(%struct.basic_block_def* %bb) #0 !dbg !7735 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !7738, metadata !DIExpression()), !dbg !7739
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7740
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 1, !dbg !7740
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !7740
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !7740
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7740

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7740
  %succs1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 1, !dbg !7740
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs1, align 8, !dbg !7740
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !7740
  br label %cond.end, !dbg !7740

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7740

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7740
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !7740
  %cmp = icmp eq i32 %call, 1, !dbg !7741
  %conv = zext i1 %cmp to i32, !dbg !7741
  %conv2 = trunc i32 %conv to i8, !dbg !7740
  ret i8 %conv2, !dbg !7742
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %vec_, i32 %ix_) #0 !dbg !7743 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !7748, metadata !DIExpression()), !dbg !7749
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !7750, metadata !DIExpression()), !dbg !7749
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !7749
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !7749
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !7749

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !7749
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !7749
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !7749
  %3 = load i32, i32* %num, align 8, !dbg !7749
  %cmp = icmp ult i32 %1, %3, !dbg !7749
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !7751
  %land.ext = zext i1 %4 to i32, !dbg !7749
  %5 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !7749
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %5, i32 0, i32 2, !dbg !7749
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !7749
  %idxprom = zext i32 %6 to i64, !dbg !7749
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !7749
  %7 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !7749
  ret %struct.edge_def* %7, !dbg !7749
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_length(%struct.VEC_edge_base* %vec_) #0 !dbg !7752 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !7755, metadata !DIExpression()), !dbg !7756
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !7756
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !7756
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7756

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !7756
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %1, i32 0, i32 0, !dbg !7756
  %2 = load i32, i32* %num, align 8, !dbg !7756
  br label %cond.end, !dbg !7756

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7756

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !7756
  ret i32 %cond, !dbg !7756
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %s) #0 !dbg !7757 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !7758, metadata !DIExpression()), !dbg !7759
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !7760
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !7760
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7760

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !7761
  %last = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 1, !dbg !7762
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %last, align 8, !dbg !7762
  br label %cond.end, !dbg !7760

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7760

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !7760
  ret %struct.gimple_seq_node_d* %cond, !dbg !7763
}

declare dso_local i32 @invoke_plugin_callbacks(i32, i8*) #2

declare dso_local void @execute_ipa_pass_list(%struct.opt_pass*) #2

declare dso_local void @coverage_finish() #2

declare dso_local void @execute_ipa_summary_passes(%struct.ipa_opt_pass_d*) #2

declare dso_local void @ipa_write_summaries() #2

declare dso_local i8* @xcalloc(i64, i64) #2

declare dso_local void @varpool_empty_needed_queue() #2

declare dso_local zeroext i8 @varpool_assemble_decl(%struct.varpool_node*) #2

declare dso_local void @assemble_asm(%union.tree_node*) #2

declare dso_local i32 @cgraph_postorder(%struct.cgraph_node**) #2

declare dso_local %struct.cgraph_edge* @cgraph_clone_edge(%struct.cgraph_edge*, %struct.cgraph_node*, %union.gimple_statement_d*, i32, i64, i32, i32, i8 zeroext) #2

declare dso_local void @cgraph_redirect_edge_callee(%struct.cgraph_edge*, %struct.cgraph_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_cgraph_edge_p_base_iterate(%struct.VEC_cgraph_edge_p_base* %vec_, i32 %ix_, %struct.cgraph_edge** %ptr) #0 !dbg !7764 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_cgraph_edge_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.cgraph_edge**, align 8
  store %struct.VEC_cgraph_edge_p_base* %vec_, %struct.VEC_cgraph_edge_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_cgraph_edge_p_base** %vec_.addr, metadata !7770, metadata !DIExpression()), !dbg !7771
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !7772, metadata !DIExpression()), !dbg !7771
  store %struct.cgraph_edge** %ptr, %struct.cgraph_edge*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge*** %ptr.addr, metadata !7773, metadata !DIExpression()), !dbg !7771
  %0 = load %struct.VEC_cgraph_edge_p_base*, %struct.VEC_cgraph_edge_p_base** %vec_.addr, align 8, !dbg !7774
  %tobool = icmp ne %struct.VEC_cgraph_edge_p_base* %0, null, !dbg !7774
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !7774

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !7774
  %2 = load %struct.VEC_cgraph_edge_p_base*, %struct.VEC_cgraph_edge_p_base** %vec_.addr, align 8, !dbg !7774
  %num = getelementptr inbounds %struct.VEC_cgraph_edge_p_base, %struct.VEC_cgraph_edge_p_base* %2, i32 0, i32 0, !dbg !7774
  %3 = load i32, i32* %num, align 8, !dbg !7774
  %cmp = icmp ult i32 %1, %3, !dbg !7774
  br i1 %cmp, label %if.then, label %if.else, !dbg !7771

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_cgraph_edge_p_base*, %struct.VEC_cgraph_edge_p_base** %vec_.addr, align 8, !dbg !7776
  %vec = getelementptr inbounds %struct.VEC_cgraph_edge_p_base, %struct.VEC_cgraph_edge_p_base* %4, i32 0, i32 2, !dbg !7776
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !7776
  %idxprom = zext i32 %5 to i64, !dbg !7776
  %arrayidx = getelementptr inbounds [1 x %struct.cgraph_edge*], [1 x %struct.cgraph_edge*]* %vec, i64 0, i64 %idxprom, !dbg !7776
  %6 = load %struct.cgraph_edge*, %struct.cgraph_edge** %arrayidx, align 8, !dbg !7776
  %7 = load %struct.cgraph_edge**, %struct.cgraph_edge*** %ptr.addr, align 8, !dbg !7776
  store %struct.cgraph_edge* %6, %struct.cgraph_edge** %7, align 8, !dbg !7776
  store i32 1, i32* %retval, align 4, !dbg !7776
  br label %return, !dbg !7776

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.cgraph_edge**, %struct.cgraph_edge*** %ptr.addr, align 8, !dbg !7778
  store %struct.cgraph_edge* null, %struct.cgraph_edge** %8, align 8, !dbg !7778
  store i32 0, i32* %retval, align 4, !dbg !7778
  br label %return, !dbg !7778

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !7771
  ret i32 %9, !dbg !7771
}

declare dso_local zeroext i8 @maybe_clean_eh_stmt_fn(%struct.function*, %union.gimple_statement_d*) #2

declare dso_local void @lower_nested_functions(%union.tree_node*) #2

declare dso_local void @tree_lowering_passes(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) #0 !dbg !7780 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !7781, metadata !DIExpression()), !dbg !7782
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7783
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !7784
  %cmp = icmp uge i32 %call, 6, !dbg !7785
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !7786

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7787
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !7788
  %cmp2 = icmp ule i32 %call1, 9, !dbg !7789
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !7790
  %land.ext = zext i1 %2 to i32, !dbg !7786
  %conv = trunc i32 %land.ext to i8, !dbg !7784
  ret i8 %conv, !dbg !7791
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_location(%union.gimple_statement_d* %g) #0 !dbg !7792 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !7795, metadata !DIExpression()), !dbg !7796
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7797
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !7798
  %location = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 2, !dbg !7799
  %1 = load i32, i32* %location, align 8, !dbg !7799
  ret i32 %1, !dbg !7800
}

declare dso_local void @dump_function_to_file(%union.tree_node*, %struct._IO_FILE*, i32) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!3492, !3493, !3494}
!llvm.ident = !{!3495}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "cgraph_dump_file", scope: !2, file: !3, line: 146, type: !3442, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !1820, globals: !3410, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "cgraphunit.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !134, !329, !335, !340, !345, !363, !370, !377, !400, !407, !583, !620, !627, !631, !647, !781, !795, !809, !848, !874, !1748, !1762, !1769, !1774, !1787, !1814}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !6, line: 7, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133}
!9 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!25 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!26 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!27 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!28 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!29 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!30 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!31 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!32 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!33 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!34 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!35 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!36 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!37 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!38 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!39 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!40 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!41 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!42 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!43 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!44 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!45 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!46 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!47 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!48 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!49 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!50 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!51 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!52 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!53 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!54 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!55 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!56 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!57 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!58 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!59 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!60 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!61 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!62 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!63 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!64 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!65 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!66 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!67 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!68 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!69 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!70 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!71 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!72 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!73 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!74 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!75 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!76 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!77 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!78 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!79 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!80 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!81 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!82 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!83 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!84 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!85 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!86 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!87 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!88 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!89 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!90 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!91 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!92 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!93 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!94 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!95 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!133 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!134 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !135, line: 39, baseType: !7, size: 32, elements: !136)
!135 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!136 = !{!137, !138, !139, !140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328}
!137 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!139 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!140 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!141 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!142 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!143 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!144 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!145 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!146 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!147 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!148 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!149 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!150 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!151 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!152 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!153 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!154 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!155 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!156 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!157 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!158 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!159 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!160 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!161 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!162 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!163 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!164 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!165 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!166 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!167 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!168 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!169 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!170 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!171 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!172 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!173 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!174 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!175 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!176 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!177 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!178 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!179 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!180 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!181 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!182 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!183 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!184 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!185 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!186 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!187 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!188 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!189 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!190 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!191 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!192 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!193 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!194 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!195 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!196 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!197 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!198 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!199 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!200 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!201 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!202 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!203 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!204 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!205 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!206 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!207 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!208 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!209 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!210 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!211 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!212 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!213 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!214 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!215 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!216 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!217 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!218 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!219 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!220 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!221 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!222 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!223 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!224 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!225 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!226 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!227 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!228 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!229 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!230 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!231 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!232 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!233 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!234 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!235 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!236 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!237 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!238 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!239 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!240 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!241 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!242 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!243 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!244 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!245 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!246 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!247 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!248 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!249 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!250 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!251 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!252 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!253 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!254 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!255 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!256 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!257 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!258 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!259 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!260 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!261 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!262 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!263 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!264 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!265 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!266 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!267 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!268 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!269 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!270 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!271 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!272 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!273 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!274 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!275 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!276 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!277 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!278 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!279 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!280 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!281 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!282 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!283 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!284 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!285 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!286 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!287 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!288 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!289 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!290 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!291 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!292 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!293 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!294 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!295 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!296 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!297 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!298 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!299 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!300 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!301 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!302 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!303 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!304 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!305 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!306 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!307 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!308 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!309 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!310 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!311 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!312 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!313 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!314 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!315 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!316 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!317 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!318 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!319 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!320 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!321 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!322 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!323 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!324 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!325 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!326 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!327 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!328 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!329 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !330, line: 363, baseType: !7, size: 32, elements: !331)
!330 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!331 = !{!332, !333, !334}
!332 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!333 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!334 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!335 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !330, line: 355, baseType: !7, size: 32, elements: !336)
!336 = !{!337, !338, !339}
!337 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!338 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!339 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!340 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !341, line: 474, baseType: !7, size: 32, elements: !342)
!341 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!342 = !{!343, !344}
!343 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!344 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!345 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !135, line: 280, baseType: !7, size: 32, elements: !346)
!346 = !{!347, !348, !349, !350, !351, !352, !353, !354, !355, !356, !357, !358, !359, !360, !361, !362}
!347 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!348 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!349 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!350 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!351 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!352 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!353 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!354 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!355 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!356 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!357 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!358 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!359 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!360 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!361 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!362 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!363 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !135, line: 1817, baseType: !7, size: 32, elements: !364)
!364 = !{!365, !366, !367, !368, !369}
!365 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!366 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!367 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!368 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!369 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!370 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !135, line: 1805, baseType: !7, size: 32, elements: !371)
!371 = !{!372, !373, !374, !375, !376}
!372 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!373 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!374 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!375 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!376 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!377 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !378, line: 309, baseType: !7, size: 32, elements: !379)
!378 = !DIFile(filename: "./cgraph.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!379 = !{!380, !381, !382, !383, !384, !385, !386, !387, !388, !389, !390, !391, !392, !393, !394, !395, !396, !397, !398, !399}
!380 = !DIEnumerator(name: "CIF_OK", value: 0, isUnsigned: true)
!381 = !DIEnumerator(name: "CIF_UNSPECIFIED", value: 1, isUnsigned: true)
!382 = !DIEnumerator(name: "CIF_FUNCTION_NOT_CONSIDERED", value: 2, isUnsigned: true)
!383 = !DIEnumerator(name: "CIF_BODY_NOT_AVAILABLE", value: 3, isUnsigned: true)
!384 = !DIEnumerator(name: "CIF_REDEFINED_EXTERN_INLINE", value: 4, isUnsigned: true)
!385 = !DIEnumerator(name: "CIF_FUNCTION_NOT_INLINABLE", value: 5, isUnsigned: true)
!386 = !DIEnumerator(name: "CIF_FUNCTION_NOT_INLINE_CANDIDATE", value: 6, isUnsigned: true)
!387 = !DIEnumerator(name: "CIF_LARGE_FUNCTION_GROWTH_LIMIT", value: 7, isUnsigned: true)
!388 = !DIEnumerator(name: "CIF_LARGE_STACK_FRAME_GROWTH_LIMIT", value: 8, isUnsigned: true)
!389 = !DIEnumerator(name: "CIF_MAX_INLINE_INSNS_SINGLE_LIMIT", value: 9, isUnsigned: true)
!390 = !DIEnumerator(name: "CIF_MAX_INLINE_INSNS_AUTO_LIMIT", value: 10, isUnsigned: true)
!391 = !DIEnumerator(name: "CIF_INLINE_UNIT_GROWTH_LIMIT", value: 11, isUnsigned: true)
!392 = !DIEnumerator(name: "CIF_RECURSIVE_INLINING", value: 12, isUnsigned: true)
!393 = !DIEnumerator(name: "CIF_UNLIKELY_CALL", value: 13, isUnsigned: true)
!394 = !DIEnumerator(name: "CIF_NOT_DECLARED_INLINED", value: 14, isUnsigned: true)
!395 = !DIEnumerator(name: "CIF_OPTIMIZING_FOR_SIZE", value: 15, isUnsigned: true)
!396 = !DIEnumerator(name: "CIF_TARGET_OPTION_MISMATCH", value: 16, isUnsigned: true)
!397 = !DIEnumerator(name: "CIF_MISMATCHED_ARGUMENTS", value: 17, isUnsigned: true)
!398 = !DIEnumerator(name: "CIF_ORIGINALLY_INDIRECT_CALL", value: 18, isUnsigned: true)
!399 = !DIEnumerator(name: "CIF_N_REASONS", value: 19, isUnsigned: true)
!400 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_pass_type", file: !401, line: 104, baseType: !7, size: 32, elements: !402)
!401 = !DIFile(filename: "./tree-pass.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!402 = !{!403, !404, !405, !406}
!403 = !DIEnumerator(name: "GIMPLE_PASS", value: 0, isUnsigned: true)
!404 = !DIEnumerator(name: "RTL_PASS", value: 1, isUnsigned: true)
!405 = !DIEnumerator(name: "SIMPLE_IPA_PASS", value: 2, isUnsigned: true)
!406 = !DIEnumerator(name: "IPA_PASS", value: 3, isUnsigned: true)
!407 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !408, line: 74, baseType: !7, size: 32, elements: !409)
!408 = !DIFile(filename: "./timevar.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!409 = !{!410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575, !576, !577, !578, !579, !580, !581, !582}
!410 = !DIEnumerator(name: "TV_NONE", value: 0, isUnsigned: true)
!411 = !DIEnumerator(name: "TV_TOTAL", value: 1, isUnsigned: true)
!412 = !DIEnumerator(name: "TV_GC", value: 2, isUnsigned: true)
!413 = !DIEnumerator(name: "TV_DUMP", value: 3, isUnsigned: true)
!414 = !DIEnumerator(name: "TV_CGRAPH", value: 4, isUnsigned: true)
!415 = !DIEnumerator(name: "TV_CGRAPHOPT", value: 5, isUnsigned: true)
!416 = !DIEnumerator(name: "TV_IPA_CONSTANT_PROP", value: 6, isUnsigned: true)
!417 = !DIEnumerator(name: "TV_IPA_LTO_GIMPLE_IO", value: 7, isUnsigned: true)
!418 = !DIEnumerator(name: "TV_IPA_LTO_DECL_IO", value: 8, isUnsigned: true)
!419 = !DIEnumerator(name: "TV_IPA_LTO_CGRAPH_IO", value: 9, isUnsigned: true)
!420 = !DIEnumerator(name: "TV_LTO", value: 10, isUnsigned: true)
!421 = !DIEnumerator(name: "TV_WHOPR_WPA", value: 11, isUnsigned: true)
!422 = !DIEnumerator(name: "TV_WHOPR_WPA_IO", value: 12, isUnsigned: true)
!423 = !DIEnumerator(name: "TV_WHOPR_LTRANS", value: 13, isUnsigned: true)
!424 = !DIEnumerator(name: "TV_WHOPR_WPA_FIXUP", value: 14, isUnsigned: true)
!425 = !DIEnumerator(name: "TV_WHOPR_WPA_LTRANS_EXEC", value: 15, isUnsigned: true)
!426 = !DIEnumerator(name: "TV_IPA_REFERENCE", value: 16, isUnsigned: true)
!427 = !DIEnumerator(name: "TV_IPA_PURE_CONST", value: 17, isUnsigned: true)
!428 = !DIEnumerator(name: "TV_IPA_TYPE_ESCAPE", value: 18, isUnsigned: true)
!429 = !DIEnumerator(name: "TV_IPA_PTA", value: 19, isUnsigned: true)
!430 = !DIEnumerator(name: "TV_IPA_SRA", value: 20, isUnsigned: true)
!431 = !DIEnumerator(name: "TV_IPA_FREE_LANG_DATA", value: 21, isUnsigned: true)
!432 = !DIEnumerator(name: "TV_CFG", value: 22, isUnsigned: true)
!433 = !DIEnumerator(name: "TV_CLEANUP_CFG", value: 23, isUnsigned: true)
!434 = !DIEnumerator(name: "TV_CFG_VERIFY", value: 24, isUnsigned: true)
!435 = !DIEnumerator(name: "TV_DELETE_TRIVIALLY_DEAD", value: 25, isUnsigned: true)
!436 = !DIEnumerator(name: "TV_LIFE", value: 26, isUnsigned: true)
!437 = !DIEnumerator(name: "TV_LIFE_UPDATE", value: 27, isUnsigned: true)
!438 = !DIEnumerator(name: "TV_DF_SCAN", value: 28, isUnsigned: true)
!439 = !DIEnumerator(name: "TV_DF_MD", value: 29, isUnsigned: true)
!440 = !DIEnumerator(name: "TV_DF_RD", value: 30, isUnsigned: true)
!441 = !DIEnumerator(name: "TV_DF_LR", value: 31, isUnsigned: true)
!442 = !DIEnumerator(name: "TV_DF_LIVE", value: 32, isUnsigned: true)
!443 = !DIEnumerator(name: "TV_DF_UREC", value: 33, isUnsigned: true)
!444 = !DIEnumerator(name: "TV_DF_CHAIN", value: 34, isUnsigned: true)
!445 = !DIEnumerator(name: "TV_DF_BYTE_LR", value: 35, isUnsigned: true)
!446 = !DIEnumerator(name: "TV_DF_NOTE", value: 36, isUnsigned: true)
!447 = !DIEnumerator(name: "TV_REG_STATS", value: 37, isUnsigned: true)
!448 = !DIEnumerator(name: "TV_ALIAS_ANALYSIS", value: 38, isUnsigned: true)
!449 = !DIEnumerator(name: "TV_ALIAS_STMT_WALK", value: 39, isUnsigned: true)
!450 = !DIEnumerator(name: "TV_REG_SCAN", value: 40, isUnsigned: true)
!451 = !DIEnumerator(name: "TV_REBUILD_JUMP", value: 41, isUnsigned: true)
!452 = !DIEnumerator(name: "TV_CPP", value: 42, isUnsigned: true)
!453 = !DIEnumerator(name: "TV_LEX", value: 43, isUnsigned: true)
!454 = !DIEnumerator(name: "TV_PARSE", value: 44, isUnsigned: true)
!455 = !DIEnumerator(name: "TV_NAME_LOOKUP", value: 45, isUnsigned: true)
!456 = !DIEnumerator(name: "TV_INLINE_HEURISTICS", value: 46, isUnsigned: true)
!457 = !DIEnumerator(name: "TV_INTEGRATION", value: 47, isUnsigned: true)
!458 = !DIEnumerator(name: "TV_TREE_GIMPLIFY", value: 48, isUnsigned: true)
!459 = !DIEnumerator(name: "TV_TREE_EH", value: 49, isUnsigned: true)
!460 = !DIEnumerator(name: "TV_TREE_CFG", value: 50, isUnsigned: true)
!461 = !DIEnumerator(name: "TV_TREE_CLEANUP_CFG", value: 51, isUnsigned: true)
!462 = !DIEnumerator(name: "TV_TREE_VRP", value: 52, isUnsigned: true)
!463 = !DIEnumerator(name: "TV_TREE_COPY_PROP", value: 53, isUnsigned: true)
!464 = !DIEnumerator(name: "TV_TREE_STORE_COPY_PROP", value: 54, isUnsigned: true)
!465 = !DIEnumerator(name: "TV_FIND_REFERENCED_VARS", value: 55, isUnsigned: true)
!466 = !DIEnumerator(name: "TV_TREE_PTA", value: 56, isUnsigned: true)
!467 = !DIEnumerator(name: "TV_TREE_INSERT_PHI_NODES", value: 57, isUnsigned: true)
!468 = !DIEnumerator(name: "TV_TREE_SSA_REWRITE_BLOCKS", value: 58, isUnsigned: true)
!469 = !DIEnumerator(name: "TV_TREE_SSA_OTHER", value: 59, isUnsigned: true)
!470 = !DIEnumerator(name: "TV_TREE_SSA_INCREMENTAL", value: 60, isUnsigned: true)
!471 = !DIEnumerator(name: "TV_TREE_OPS", value: 61, isUnsigned: true)
!472 = !DIEnumerator(name: "TV_TREE_SSA_DOMINATOR_OPTS", value: 62, isUnsigned: true)
!473 = !DIEnumerator(name: "TV_TREE_SRA", value: 63, isUnsigned: true)
!474 = !DIEnumerator(name: "TV_TREE_STORE_CCP", value: 64, isUnsigned: true)
!475 = !DIEnumerator(name: "TV_TREE_CCP", value: 65, isUnsigned: true)
!476 = !DIEnumerator(name: "TV_TREE_PHI_CPROP", value: 66, isUnsigned: true)
!477 = !DIEnumerator(name: "TV_TREE_SPLIT_EDGES", value: 67, isUnsigned: true)
!478 = !DIEnumerator(name: "TV_TREE_REASSOC", value: 68, isUnsigned: true)
!479 = !DIEnumerator(name: "TV_TREE_PRE", value: 69, isUnsigned: true)
!480 = !DIEnumerator(name: "TV_TREE_REDPHI", value: 70, isUnsigned: true)
!481 = !DIEnumerator(name: "TV_TREE_FRE", value: 71, isUnsigned: true)
!482 = !DIEnumerator(name: "TV_TREE_SINK", value: 72, isUnsigned: true)
!483 = !DIEnumerator(name: "TV_TREE_PHIOPT", value: 73, isUnsigned: true)
!484 = !DIEnumerator(name: "TV_TREE_FORWPROP", value: 74, isUnsigned: true)
!485 = !DIEnumerator(name: "TV_TREE_PHIPROP", value: 75, isUnsigned: true)
!486 = !DIEnumerator(name: "TV_TREE_DCE", value: 76, isUnsigned: true)
!487 = !DIEnumerator(name: "TV_TREE_CD_DCE", value: 77, isUnsigned: true)
!488 = !DIEnumerator(name: "TV_TREE_CALL_CDCE", value: 78, isUnsigned: true)
!489 = !DIEnumerator(name: "TV_TREE_DSE", value: 79, isUnsigned: true)
!490 = !DIEnumerator(name: "TV_TREE_MERGE_PHI", value: 80, isUnsigned: true)
!491 = !DIEnumerator(name: "TV_TREE_LOOP", value: 81, isUnsigned: true)
!492 = !DIEnumerator(name: "TV_TREE_LOOP_BOUNDS", value: 82, isUnsigned: true)
!493 = !DIEnumerator(name: "TV_LIM", value: 83, isUnsigned: true)
!494 = !DIEnumerator(name: "TV_TREE_LOOP_IVCANON", value: 84, isUnsigned: true)
!495 = !DIEnumerator(name: "TV_SCEV_CONST", value: 85, isUnsigned: true)
!496 = !DIEnumerator(name: "TV_TREE_LOOP_UNSWITCH", value: 86, isUnsigned: true)
!497 = !DIEnumerator(name: "TV_COMPLETE_UNROLL", value: 87, isUnsigned: true)
!498 = !DIEnumerator(name: "TV_TREE_PARALLELIZE_LOOPS", value: 88, isUnsigned: true)
!499 = !DIEnumerator(name: "TV_TREE_VECTORIZATION", value: 89, isUnsigned: true)
!500 = !DIEnumerator(name: "TV_TREE_SLP_VECTORIZATION", value: 90, isUnsigned: true)
!501 = !DIEnumerator(name: "TV_GRAPHITE_TRANSFORMS", value: 91, isUnsigned: true)
!502 = !DIEnumerator(name: "TV_GRAPHITE_DATA_DEPS", value: 92, isUnsigned: true)
!503 = !DIEnumerator(name: "TV_GRAPHITE_CODE_GEN", value: 93, isUnsigned: true)
!504 = !DIEnumerator(name: "TV_TREE_LINEAR_TRANSFORM", value: 94, isUnsigned: true)
!505 = !DIEnumerator(name: "TV_TREE_LOOP_DISTRIBUTION", value: 95, isUnsigned: true)
!506 = !DIEnumerator(name: "TV_CHECK_DATA_DEPS", value: 96, isUnsigned: true)
!507 = !DIEnumerator(name: "TV_TREE_PREFETCH", value: 97, isUnsigned: true)
!508 = !DIEnumerator(name: "TV_TREE_LOOP_IVOPTS", value: 98, isUnsigned: true)
!509 = !DIEnumerator(name: "TV_PREDCOM", value: 99, isUnsigned: true)
!510 = !DIEnumerator(name: "TV_TREE_LOOP_INIT", value: 100, isUnsigned: true)
!511 = !DIEnumerator(name: "TV_TREE_LOOP_FINI", value: 101, isUnsigned: true)
!512 = !DIEnumerator(name: "TV_TREE_CH", value: 102, isUnsigned: true)
!513 = !DIEnumerator(name: "TV_TREE_SSA_UNCPROP", value: 103, isUnsigned: true)
!514 = !DIEnumerator(name: "TV_TREE_SSA_TO_NORMAL", value: 104, isUnsigned: true)
!515 = !DIEnumerator(name: "TV_TREE_NRV", value: 105, isUnsigned: true)
!516 = !DIEnumerator(name: "TV_TREE_COPY_RENAME", value: 106, isUnsigned: true)
!517 = !DIEnumerator(name: "TV_TREE_SSA_VERIFY", value: 107, isUnsigned: true)
!518 = !DIEnumerator(name: "TV_TREE_STMT_VERIFY", value: 108, isUnsigned: true)
!519 = !DIEnumerator(name: "TV_TREE_SWITCH_CONVERSION", value: 109, isUnsigned: true)
!520 = !DIEnumerator(name: "TV_CGRAPH_VERIFY", value: 110, isUnsigned: true)
!521 = !DIEnumerator(name: "TV_DOM_FRONTIERS", value: 111, isUnsigned: true)
!522 = !DIEnumerator(name: "TV_DOMINANCE", value: 112, isUnsigned: true)
!523 = !DIEnumerator(name: "TV_CONTROL_DEPENDENCES", value: 113, isUnsigned: true)
!524 = !DIEnumerator(name: "TV_OVERLOAD", value: 114, isUnsigned: true)
!525 = !DIEnumerator(name: "TV_TEMPLATE_INSTANTIATION", value: 115, isUnsigned: true)
!526 = !DIEnumerator(name: "TV_EXPAND", value: 116, isUnsigned: true)
!527 = !DIEnumerator(name: "TV_VARCONST", value: 117, isUnsigned: true)
!528 = !DIEnumerator(name: "TV_LOWER_SUBREG", value: 118, isUnsigned: true)
!529 = !DIEnumerator(name: "TV_JUMP", value: 119, isUnsigned: true)
!530 = !DIEnumerator(name: "TV_FWPROP", value: 120, isUnsigned: true)
!531 = !DIEnumerator(name: "TV_CSE", value: 121, isUnsigned: true)
!532 = !DIEnumerator(name: "TV_DCE", value: 122, isUnsigned: true)
!533 = !DIEnumerator(name: "TV_DSE1", value: 123, isUnsigned: true)
!534 = !DIEnumerator(name: "TV_DSE2", value: 124, isUnsigned: true)
!535 = !DIEnumerator(name: "TV_LOOP", value: 125, isUnsigned: true)
!536 = !DIEnumerator(name: "TV_LOOP_MOVE_INVARIANTS", value: 126, isUnsigned: true)
!537 = !DIEnumerator(name: "TV_LOOP_UNSWITCH", value: 127, isUnsigned: true)
!538 = !DIEnumerator(name: "TV_LOOP_UNROLL", value: 128, isUnsigned: true)
!539 = !DIEnumerator(name: "TV_LOOP_DOLOOP", value: 129, isUnsigned: true)
!540 = !DIEnumerator(name: "TV_CPROP", value: 130, isUnsigned: true)
!541 = !DIEnumerator(name: "TV_PRE", value: 131, isUnsigned: true)
!542 = !DIEnumerator(name: "TV_HOIST", value: 132, isUnsigned: true)
!543 = !DIEnumerator(name: "TV_LSM", value: 133, isUnsigned: true)
!544 = !DIEnumerator(name: "TV_TRACER", value: 134, isUnsigned: true)
!545 = !DIEnumerator(name: "TV_WEB", value: 135, isUnsigned: true)
!546 = !DIEnumerator(name: "TV_AUTO_INC_DEC", value: 136, isUnsigned: true)
!547 = !DIEnumerator(name: "TV_CSE2", value: 137, isUnsigned: true)
!548 = !DIEnumerator(name: "TV_BRANCH_PROB", value: 138, isUnsigned: true)
!549 = !DIEnumerator(name: "TV_VPT", value: 139, isUnsigned: true)
!550 = !DIEnumerator(name: "TV_COMBINE", value: 140, isUnsigned: true)
!551 = !DIEnumerator(name: "TV_IFCVT", value: 141, isUnsigned: true)
!552 = !DIEnumerator(name: "TV_REGMOVE", value: 142, isUnsigned: true)
!553 = !DIEnumerator(name: "TV_MODE_SWITCH", value: 143, isUnsigned: true)
!554 = !DIEnumerator(name: "TV_SMS", value: 144, isUnsigned: true)
!555 = !DIEnumerator(name: "TV_SCHED", value: 145, isUnsigned: true)
!556 = !DIEnumerator(name: "TV_LOCAL_ALLOC", value: 146, isUnsigned: true)
!557 = !DIEnumerator(name: "TV_GLOBAL_ALLOC", value: 147, isUnsigned: true)
!558 = !DIEnumerator(name: "TV_IRA", value: 148, isUnsigned: true)
!559 = !DIEnumerator(name: "TV_RELOAD", value: 149, isUnsigned: true)
!560 = !DIEnumerator(name: "TV_RELOAD_CSE_REGS", value: 150, isUnsigned: true)
!561 = !DIEnumerator(name: "TV_SEQABSTR", value: 151, isUnsigned: true)
!562 = !DIEnumerator(name: "TV_GCSE_AFTER_RELOAD", value: 152, isUnsigned: true)
!563 = !DIEnumerator(name: "TV_THREAD_PROLOGUE_AND_EPILOGUE", value: 153, isUnsigned: true)
!564 = !DIEnumerator(name: "TV_IFCVT2", value: 154, isUnsigned: true)
!565 = !DIEnumerator(name: "TV_COMBINE_STACK_ADJUST", value: 155, isUnsigned: true)
!566 = !DIEnumerator(name: "TV_PEEPHOLE2", value: 156, isUnsigned: true)
!567 = !DIEnumerator(name: "TV_RENAME_REGISTERS", value: 157, isUnsigned: true)
!568 = !DIEnumerator(name: "TV_CPROP_REGISTERS", value: 158, isUnsigned: true)
!569 = !DIEnumerator(name: "TV_SCHED2", value: 159, isUnsigned: true)
!570 = !DIEnumerator(name: "TV_MACH_DEP", value: 160, isUnsigned: true)
!571 = !DIEnumerator(name: "TV_DBR_SCHED", value: 161, isUnsigned: true)
!572 = !DIEnumerator(name: "TV_REORDER_BLOCKS", value: 162, isUnsigned: true)
!573 = !DIEnumerator(name: "TV_SHORTEN_BRANCH", value: 163, isUnsigned: true)
!574 = !DIEnumerator(name: "TV_REG_STACK", value: 164, isUnsigned: true)
!575 = !DIEnumerator(name: "TV_FINAL", value: 165, isUnsigned: true)
!576 = !DIEnumerator(name: "TV_SYMOUT", value: 166, isUnsigned: true)
!577 = !DIEnumerator(name: "TV_VAR_TRACKING", value: 167, isUnsigned: true)
!578 = !DIEnumerator(name: "TV_TREE_IFCOMBINE", value: 168, isUnsigned: true)
!579 = !DIEnumerator(name: "TV_PLUGIN_INIT", value: 169, isUnsigned: true)
!580 = !DIEnumerator(name: "TV_PLUGIN_RUN", value: 170, isUnsigned: true)
!581 = !DIEnumerator(name: "TV_REST_OF_COMPILATION", value: 171, isUnsigned: true)
!582 = !DIEnumerator(name: "TIMEVAR_LAST", value: 172, isUnsigned: true)
!583 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_node_structure_enum", file: !135, line: 630, baseType: !7, size: 32, elements: !584)
!584 = !{!585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619}
!585 = !DIEnumerator(name: "TS_BASE", value: 0, isUnsigned: true)
!586 = !DIEnumerator(name: "TS_COMMON", value: 1, isUnsigned: true)
!587 = !DIEnumerator(name: "TS_INT_CST", value: 2, isUnsigned: true)
!588 = !DIEnumerator(name: "TS_REAL_CST", value: 3, isUnsigned: true)
!589 = !DIEnumerator(name: "TS_FIXED_CST", value: 4, isUnsigned: true)
!590 = !DIEnumerator(name: "TS_VECTOR", value: 5, isUnsigned: true)
!591 = !DIEnumerator(name: "TS_STRING", value: 6, isUnsigned: true)
!592 = !DIEnumerator(name: "TS_COMPLEX", value: 7, isUnsigned: true)
!593 = !DIEnumerator(name: "TS_IDENTIFIER", value: 8, isUnsigned: true)
!594 = !DIEnumerator(name: "TS_DECL_MINIMAL", value: 9, isUnsigned: true)
!595 = !DIEnumerator(name: "TS_DECL_COMMON", value: 10, isUnsigned: true)
!596 = !DIEnumerator(name: "TS_DECL_WRTL", value: 11, isUnsigned: true)
!597 = !DIEnumerator(name: "TS_DECL_NON_COMMON", value: 12, isUnsigned: true)
!598 = !DIEnumerator(name: "TS_DECL_WITH_VIS", value: 13, isUnsigned: true)
!599 = !DIEnumerator(name: "TS_FIELD_DECL", value: 14, isUnsigned: true)
!600 = !DIEnumerator(name: "TS_VAR_DECL", value: 15, isUnsigned: true)
!601 = !DIEnumerator(name: "TS_PARM_DECL", value: 16, isUnsigned: true)
!602 = !DIEnumerator(name: "TS_LABEL_DECL", value: 17, isUnsigned: true)
!603 = !DIEnumerator(name: "TS_RESULT_DECL", value: 18, isUnsigned: true)
!604 = !DIEnumerator(name: "TS_CONST_DECL", value: 19, isUnsigned: true)
!605 = !DIEnumerator(name: "TS_TYPE_DECL", value: 20, isUnsigned: true)
!606 = !DIEnumerator(name: "TS_FUNCTION_DECL", value: 21, isUnsigned: true)
!607 = !DIEnumerator(name: "TS_TYPE", value: 22, isUnsigned: true)
!608 = !DIEnumerator(name: "TS_LIST", value: 23, isUnsigned: true)
!609 = !DIEnumerator(name: "TS_VEC", value: 24, isUnsigned: true)
!610 = !DIEnumerator(name: "TS_EXP", value: 25, isUnsigned: true)
!611 = !DIEnumerator(name: "TS_SSA_NAME", value: 26, isUnsigned: true)
!612 = !DIEnumerator(name: "TS_BLOCK", value: 27, isUnsigned: true)
!613 = !DIEnumerator(name: "TS_BINFO", value: 28, isUnsigned: true)
!614 = !DIEnumerator(name: "TS_STATEMENT_LIST", value: 29, isUnsigned: true)
!615 = !DIEnumerator(name: "TS_CONSTRUCTOR", value: 30, isUnsigned: true)
!616 = !DIEnumerator(name: "TS_OMP_CLAUSE", value: 31, isUnsigned: true)
!617 = !DIEnumerator(name: "TS_OPTIMIZATION", value: 32, isUnsigned: true)
!618 = !DIEnumerator(name: "TS_TARGET_OPTION", value: 33, isUnsigned: true)
!619 = !DIEnumerator(name: "LAST_TS_ENUM", value: 34, isUnsigned: true)
!620 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "cgraph_state", file: !378, line: 407, baseType: !7, size: 32, elements: !621)
!621 = !{!622, !623, !624, !625, !626}
!622 = !DIEnumerator(name: "CGRAPH_STATE_CONSTRUCTION", value: 0, isUnsigned: true)
!623 = !DIEnumerator(name: "CGRAPH_STATE_IPA", value: 1, isUnsigned: true)
!624 = !DIEnumerator(name: "CGRAPH_STATE_IPA_SSA", value: 2, isUnsigned: true)
!625 = !DIEnumerator(name: "CGRAPH_STATE_EXPANSION", value: 3, isUnsigned: true)
!626 = !DIEnumerator(name: "CGRAPH_STATE_FINISHED", value: 4, isUnsigned: true)
!627 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "cdi_direction", file: !330, line: 912, baseType: !7, size: 32, elements: !628)
!628 = !{!629, !630}
!629 = !DIEnumerator(name: "CDI_DOMINATORS", value: 1, isUnsigned: true)
!630 = !DIEnumerator(name: "CDI_POST_DOMINATORS", value: 2, isUnsigned: true)
!631 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !632, line: 29, baseType: !7, size: 32, elements: !633)
!632 = !DIFile(filename: "./diagnostic.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!633 = !{!634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646}
!634 = !DIEnumerator(name: "DK_UNSPECIFIED", value: 0, isUnsigned: true)
!635 = !DIEnumerator(name: "DK_IGNORED", value: 1, isUnsigned: true)
!636 = !DIEnumerator(name: "DK_FATAL", value: 2, isUnsigned: true)
!637 = !DIEnumerator(name: "DK_ICE", value: 3, isUnsigned: true)
!638 = !DIEnumerator(name: "DK_ERROR", value: 4, isUnsigned: true)
!639 = !DIEnumerator(name: "DK_SORRY", value: 5, isUnsigned: true)
!640 = !DIEnumerator(name: "DK_WARNING", value: 6, isUnsigned: true)
!641 = !DIEnumerator(name: "DK_ANACHRONISM", value: 7, isUnsigned: true)
!642 = !DIEnumerator(name: "DK_NOTE", value: 8, isUnsigned: true)
!643 = !DIEnumerator(name: "DK_DEBUG", value: 9, isUnsigned: true)
!644 = !DIEnumerator(name: "DK_PEDWARN", value: 10, isUnsigned: true)
!645 = !DIEnumerator(name: "DK_PERMERROR", value: 11, isUnsigned: true)
!646 = !DIEnumerator(name: "DK_LAST_DIAGNOSTIC_KIND", value: 12, isUnsigned: true)
!647 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_index", file: !135, line: 3410, baseType: !7, size: 32, elements: !648)
!648 = !{!649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743, !744, !745, !746, !747, !748, !749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760, !761, !762, !763, !764, !765, !766, !767, !768, !769, !770, !771, !772, !773, !774, !775, !776, !777, !778, !779, !780}
!649 = !DIEnumerator(name: "TI_ERROR_MARK", value: 0, isUnsigned: true)
!650 = !DIEnumerator(name: "TI_INTQI_TYPE", value: 1, isUnsigned: true)
!651 = !DIEnumerator(name: "TI_INTHI_TYPE", value: 2, isUnsigned: true)
!652 = !DIEnumerator(name: "TI_INTSI_TYPE", value: 3, isUnsigned: true)
!653 = !DIEnumerator(name: "TI_INTDI_TYPE", value: 4, isUnsigned: true)
!654 = !DIEnumerator(name: "TI_INTTI_TYPE", value: 5, isUnsigned: true)
!655 = !DIEnumerator(name: "TI_UINTQI_TYPE", value: 6, isUnsigned: true)
!656 = !DIEnumerator(name: "TI_UINTHI_TYPE", value: 7, isUnsigned: true)
!657 = !DIEnumerator(name: "TI_UINTSI_TYPE", value: 8, isUnsigned: true)
!658 = !DIEnumerator(name: "TI_UINTDI_TYPE", value: 9, isUnsigned: true)
!659 = !DIEnumerator(name: "TI_UINTTI_TYPE", value: 10, isUnsigned: true)
!660 = !DIEnumerator(name: "TI_UINT32_TYPE", value: 11, isUnsigned: true)
!661 = !DIEnumerator(name: "TI_UINT64_TYPE", value: 12, isUnsigned: true)
!662 = !DIEnumerator(name: "TI_INTEGER_ZERO", value: 13, isUnsigned: true)
!663 = !DIEnumerator(name: "TI_INTEGER_ONE", value: 14, isUnsigned: true)
!664 = !DIEnumerator(name: "TI_INTEGER_MINUS_ONE", value: 15, isUnsigned: true)
!665 = !DIEnumerator(name: "TI_NULL_POINTER", value: 16, isUnsigned: true)
!666 = !DIEnumerator(name: "TI_SIZE_ZERO", value: 17, isUnsigned: true)
!667 = !DIEnumerator(name: "TI_SIZE_ONE", value: 18, isUnsigned: true)
!668 = !DIEnumerator(name: "TI_BITSIZE_ZERO", value: 19, isUnsigned: true)
!669 = !DIEnumerator(name: "TI_BITSIZE_ONE", value: 20, isUnsigned: true)
!670 = !DIEnumerator(name: "TI_BITSIZE_UNIT", value: 21, isUnsigned: true)
!671 = !DIEnumerator(name: "TI_PUBLIC", value: 22, isUnsigned: true)
!672 = !DIEnumerator(name: "TI_PROTECTED", value: 23, isUnsigned: true)
!673 = !DIEnumerator(name: "TI_PRIVATE", value: 24, isUnsigned: true)
!674 = !DIEnumerator(name: "TI_BOOLEAN_FALSE", value: 25, isUnsigned: true)
!675 = !DIEnumerator(name: "TI_BOOLEAN_TRUE", value: 26, isUnsigned: true)
!676 = !DIEnumerator(name: "TI_COMPLEX_INTEGER_TYPE", value: 27, isUnsigned: true)
!677 = !DIEnumerator(name: "TI_COMPLEX_FLOAT_TYPE", value: 28, isUnsigned: true)
!678 = !DIEnumerator(name: "TI_COMPLEX_DOUBLE_TYPE", value: 29, isUnsigned: true)
!679 = !DIEnumerator(name: "TI_COMPLEX_LONG_DOUBLE_TYPE", value: 30, isUnsigned: true)
!680 = !DIEnumerator(name: "TI_FLOAT_TYPE", value: 31, isUnsigned: true)
!681 = !DIEnumerator(name: "TI_DOUBLE_TYPE", value: 32, isUnsigned: true)
!682 = !DIEnumerator(name: "TI_LONG_DOUBLE_TYPE", value: 33, isUnsigned: true)
!683 = !DIEnumerator(name: "TI_FLOAT_PTR_TYPE", value: 34, isUnsigned: true)
!684 = !DIEnumerator(name: "TI_DOUBLE_PTR_TYPE", value: 35, isUnsigned: true)
!685 = !DIEnumerator(name: "TI_LONG_DOUBLE_PTR_TYPE", value: 36, isUnsigned: true)
!686 = !DIEnumerator(name: "TI_INTEGER_PTR_TYPE", value: 37, isUnsigned: true)
!687 = !DIEnumerator(name: "TI_VOID_TYPE", value: 38, isUnsigned: true)
!688 = !DIEnumerator(name: "TI_PTR_TYPE", value: 39, isUnsigned: true)
!689 = !DIEnumerator(name: "TI_CONST_PTR_TYPE", value: 40, isUnsigned: true)
!690 = !DIEnumerator(name: "TI_SIZE_TYPE", value: 41, isUnsigned: true)
!691 = !DIEnumerator(name: "TI_PID_TYPE", value: 42, isUnsigned: true)
!692 = !DIEnumerator(name: "TI_PTRDIFF_TYPE", value: 43, isUnsigned: true)
!693 = !DIEnumerator(name: "TI_VA_LIST_TYPE", value: 44, isUnsigned: true)
!694 = !DIEnumerator(name: "TI_VA_LIST_GPR_COUNTER_FIELD", value: 45, isUnsigned: true)
!695 = !DIEnumerator(name: "TI_VA_LIST_FPR_COUNTER_FIELD", value: 46, isUnsigned: true)
!696 = !DIEnumerator(name: "TI_BOOLEAN_TYPE", value: 47, isUnsigned: true)
!697 = !DIEnumerator(name: "TI_FILEPTR_TYPE", value: 48, isUnsigned: true)
!698 = !DIEnumerator(name: "TI_DFLOAT32_TYPE", value: 49, isUnsigned: true)
!699 = !DIEnumerator(name: "TI_DFLOAT64_TYPE", value: 50, isUnsigned: true)
!700 = !DIEnumerator(name: "TI_DFLOAT128_TYPE", value: 51, isUnsigned: true)
!701 = !DIEnumerator(name: "TI_DFLOAT32_PTR_TYPE", value: 52, isUnsigned: true)
!702 = !DIEnumerator(name: "TI_DFLOAT64_PTR_TYPE", value: 53, isUnsigned: true)
!703 = !DIEnumerator(name: "TI_DFLOAT128_PTR_TYPE", value: 54, isUnsigned: true)
!704 = !DIEnumerator(name: "TI_VOID_LIST_NODE", value: 55, isUnsigned: true)
!705 = !DIEnumerator(name: "TI_MAIN_IDENTIFIER", value: 56, isUnsigned: true)
!706 = !DIEnumerator(name: "TI_SAT_SFRACT_TYPE", value: 57, isUnsigned: true)
!707 = !DIEnumerator(name: "TI_SAT_FRACT_TYPE", value: 58, isUnsigned: true)
!708 = !DIEnumerator(name: "TI_SAT_LFRACT_TYPE", value: 59, isUnsigned: true)
!709 = !DIEnumerator(name: "TI_SAT_LLFRACT_TYPE", value: 60, isUnsigned: true)
!710 = !DIEnumerator(name: "TI_SAT_USFRACT_TYPE", value: 61, isUnsigned: true)
!711 = !DIEnumerator(name: "TI_SAT_UFRACT_TYPE", value: 62, isUnsigned: true)
!712 = !DIEnumerator(name: "TI_SAT_ULFRACT_TYPE", value: 63, isUnsigned: true)
!713 = !DIEnumerator(name: "TI_SAT_ULLFRACT_TYPE", value: 64, isUnsigned: true)
!714 = !DIEnumerator(name: "TI_SFRACT_TYPE", value: 65, isUnsigned: true)
!715 = !DIEnumerator(name: "TI_FRACT_TYPE", value: 66, isUnsigned: true)
!716 = !DIEnumerator(name: "TI_LFRACT_TYPE", value: 67, isUnsigned: true)
!717 = !DIEnumerator(name: "TI_LLFRACT_TYPE", value: 68, isUnsigned: true)
!718 = !DIEnumerator(name: "TI_USFRACT_TYPE", value: 69, isUnsigned: true)
!719 = !DIEnumerator(name: "TI_UFRACT_TYPE", value: 70, isUnsigned: true)
!720 = !DIEnumerator(name: "TI_ULFRACT_TYPE", value: 71, isUnsigned: true)
!721 = !DIEnumerator(name: "TI_ULLFRACT_TYPE", value: 72, isUnsigned: true)
!722 = !DIEnumerator(name: "TI_SAT_SACCUM_TYPE", value: 73, isUnsigned: true)
!723 = !DIEnumerator(name: "TI_SAT_ACCUM_TYPE", value: 74, isUnsigned: true)
!724 = !DIEnumerator(name: "TI_SAT_LACCUM_TYPE", value: 75, isUnsigned: true)
!725 = !DIEnumerator(name: "TI_SAT_LLACCUM_TYPE", value: 76, isUnsigned: true)
!726 = !DIEnumerator(name: "TI_SAT_USACCUM_TYPE", value: 77, isUnsigned: true)
!727 = !DIEnumerator(name: "TI_SAT_UACCUM_TYPE", value: 78, isUnsigned: true)
!728 = !DIEnumerator(name: "TI_SAT_ULACCUM_TYPE", value: 79, isUnsigned: true)
!729 = !DIEnumerator(name: "TI_SAT_ULLACCUM_TYPE", value: 80, isUnsigned: true)
!730 = !DIEnumerator(name: "TI_SACCUM_TYPE", value: 81, isUnsigned: true)
!731 = !DIEnumerator(name: "TI_ACCUM_TYPE", value: 82, isUnsigned: true)
!732 = !DIEnumerator(name: "TI_LACCUM_TYPE", value: 83, isUnsigned: true)
!733 = !DIEnumerator(name: "TI_LLACCUM_TYPE", value: 84, isUnsigned: true)
!734 = !DIEnumerator(name: "TI_USACCUM_TYPE", value: 85, isUnsigned: true)
!735 = !DIEnumerator(name: "TI_UACCUM_TYPE", value: 86, isUnsigned: true)
!736 = !DIEnumerator(name: "TI_ULACCUM_TYPE", value: 87, isUnsigned: true)
!737 = !DIEnumerator(name: "TI_ULLACCUM_TYPE", value: 88, isUnsigned: true)
!738 = !DIEnumerator(name: "TI_QQ_TYPE", value: 89, isUnsigned: true)
!739 = !DIEnumerator(name: "TI_HQ_TYPE", value: 90, isUnsigned: true)
!740 = !DIEnumerator(name: "TI_SQ_TYPE", value: 91, isUnsigned: true)
!741 = !DIEnumerator(name: "TI_DQ_TYPE", value: 92, isUnsigned: true)
!742 = !DIEnumerator(name: "TI_TQ_TYPE", value: 93, isUnsigned: true)
!743 = !DIEnumerator(name: "TI_UQQ_TYPE", value: 94, isUnsigned: true)
!744 = !DIEnumerator(name: "TI_UHQ_TYPE", value: 95, isUnsigned: true)
!745 = !DIEnumerator(name: "TI_USQ_TYPE", value: 96, isUnsigned: true)
!746 = !DIEnumerator(name: "TI_UDQ_TYPE", value: 97, isUnsigned: true)
!747 = !DIEnumerator(name: "TI_UTQ_TYPE", value: 98, isUnsigned: true)
!748 = !DIEnumerator(name: "TI_SAT_QQ_TYPE", value: 99, isUnsigned: true)
!749 = !DIEnumerator(name: "TI_SAT_HQ_TYPE", value: 100, isUnsigned: true)
!750 = !DIEnumerator(name: "TI_SAT_SQ_TYPE", value: 101, isUnsigned: true)
!751 = !DIEnumerator(name: "TI_SAT_DQ_TYPE", value: 102, isUnsigned: true)
!752 = !DIEnumerator(name: "TI_SAT_TQ_TYPE", value: 103, isUnsigned: true)
!753 = !DIEnumerator(name: "TI_SAT_UQQ_TYPE", value: 104, isUnsigned: true)
!754 = !DIEnumerator(name: "TI_SAT_UHQ_TYPE", value: 105, isUnsigned: true)
!755 = !DIEnumerator(name: "TI_SAT_USQ_TYPE", value: 106, isUnsigned: true)
!756 = !DIEnumerator(name: "TI_SAT_UDQ_TYPE", value: 107, isUnsigned: true)
!757 = !DIEnumerator(name: "TI_SAT_UTQ_TYPE", value: 108, isUnsigned: true)
!758 = !DIEnumerator(name: "TI_HA_TYPE", value: 109, isUnsigned: true)
!759 = !DIEnumerator(name: "TI_SA_TYPE", value: 110, isUnsigned: true)
!760 = !DIEnumerator(name: "TI_DA_TYPE", value: 111, isUnsigned: true)
!761 = !DIEnumerator(name: "TI_TA_TYPE", value: 112, isUnsigned: true)
!762 = !DIEnumerator(name: "TI_UHA_TYPE", value: 113, isUnsigned: true)
!763 = !DIEnumerator(name: "TI_USA_TYPE", value: 114, isUnsigned: true)
!764 = !DIEnumerator(name: "TI_UDA_TYPE", value: 115, isUnsigned: true)
!765 = !DIEnumerator(name: "TI_UTA_TYPE", value: 116, isUnsigned: true)
!766 = !DIEnumerator(name: "TI_SAT_HA_TYPE", value: 117, isUnsigned: true)
!767 = !DIEnumerator(name: "TI_SAT_SA_TYPE", value: 118, isUnsigned: true)
!768 = !DIEnumerator(name: "TI_SAT_DA_TYPE", value: 119, isUnsigned: true)
!769 = !DIEnumerator(name: "TI_SAT_TA_TYPE", value: 120, isUnsigned: true)
!770 = !DIEnumerator(name: "TI_SAT_UHA_TYPE", value: 121, isUnsigned: true)
!771 = !DIEnumerator(name: "TI_SAT_USA_TYPE", value: 122, isUnsigned: true)
!772 = !DIEnumerator(name: "TI_SAT_UDA_TYPE", value: 123, isUnsigned: true)
!773 = !DIEnumerator(name: "TI_SAT_UTA_TYPE", value: 124, isUnsigned: true)
!774 = !DIEnumerator(name: "TI_OPTIMIZATION_DEFAULT", value: 125, isUnsigned: true)
!775 = !DIEnumerator(name: "TI_OPTIMIZATION_CURRENT", value: 126, isUnsigned: true)
!776 = !DIEnumerator(name: "TI_TARGET_OPTION_DEFAULT", value: 127, isUnsigned: true)
!777 = !DIEnumerator(name: "TI_TARGET_OPTION_CURRENT", value: 128, isUnsigned: true)
!778 = !DIEnumerator(name: "TI_CURRENT_TARGET_PRAGMA", value: 129, isUnsigned: true)
!779 = !DIEnumerator(name: "TI_CURRENT_OPTIMIZE_PRAGMA", value: 130, isUnsigned: true)
!780 = !DIEnumerator(name: "TI_MAX", value: 131, isUnsigned: true)
!781 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_dump_index", file: !401, line: 30, baseType: !7, size: 32, elements: !782)
!782 = !{!783, !784, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794}
!783 = !DIEnumerator(name: "TDI_none", value: 0, isUnsigned: true)
!784 = !DIEnumerator(name: "TDI_cgraph", value: 1, isUnsigned: true)
!785 = !DIEnumerator(name: "TDI_tu", value: 2, isUnsigned: true)
!786 = !DIEnumerator(name: "TDI_class", value: 3, isUnsigned: true)
!787 = !DIEnumerator(name: "TDI_original", value: 4, isUnsigned: true)
!788 = !DIEnumerator(name: "TDI_generic", value: 5, isUnsigned: true)
!789 = !DIEnumerator(name: "TDI_nested", value: 6, isUnsigned: true)
!790 = !DIEnumerator(name: "TDI_vcg", value: 7, isUnsigned: true)
!791 = !DIEnumerator(name: "TDI_tree_all", value: 8, isUnsigned: true)
!792 = !DIEnumerator(name: "TDI_rtl_all", value: 9, isUnsigned: true)
!793 = !DIEnumerator(name: "TDI_ipa_all", value: 10, isUnsigned: true)
!794 = !DIEnumerator(name: "TDI_end", value: 11, isUnsigned: true)
!795 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "bb_flags", file: !330, line: 295, baseType: !7, size: 32, elements: !796)
!796 = !{!797, !798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808}
!797 = !DIEnumerator(name: "BB_NEW", value: 1, isUnsigned: true)
!798 = !DIEnumerator(name: "BB_REACHABLE", value: 2, isUnsigned: true)
!799 = !DIEnumerator(name: "BB_IRREDUCIBLE_LOOP", value: 4, isUnsigned: true)
!800 = !DIEnumerator(name: "BB_SUPERBLOCK", value: 8, isUnsigned: true)
!801 = !DIEnumerator(name: "BB_DISABLE_SCHEDULE", value: 16, isUnsigned: true)
!802 = !DIEnumerator(name: "BB_HOT_PARTITION", value: 32, isUnsigned: true)
!803 = !DIEnumerator(name: "BB_COLD_PARTITION", value: 64, isUnsigned: true)
!804 = !DIEnumerator(name: "BB_DUPLICATED", value: 128, isUnsigned: true)
!805 = !DIEnumerator(name: "BB_NON_LOCAL_GOTO_TARGET", value: 256, isUnsigned: true)
!806 = !DIEnumerator(name: "BB_RTL", value: 512, isUnsigned: true)
!807 = !DIEnumerator(name: "BB_FORWARDER_BLOCK", value: 1024, isUnsigned: true)
!808 = !DIEnumerator(name: "BB_NONTHREADABLE_BLOCK", value: 2048, isUnsigned: true)
!809 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !810, line: 51, baseType: !7, size: 32, elements: !811)
!810 = !DIFile(filename: "./gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!811 = !{!812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826, !827, !828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845, !846, !847}
!812 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!813 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!814 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!815 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!816 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!817 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!818 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!819 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!820 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!821 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!822 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!823 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!824 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!825 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!826 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!827 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!828 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!829 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!830 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!831 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!832 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!833 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!834 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!835 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!836 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!837 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!838 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!839 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!840 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!841 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!842 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!843 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!844 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!845 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!846 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!847 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!848 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !810, line: 727, baseType: !7, size: 32, elements: !849)
!849 = !{!850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860, !861, !862, !863, !864, !865, !866, !867, !868, !869, !870, !871, !872, !873}
!850 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!851 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!852 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!853 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!854 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!855 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!856 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!857 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!858 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!859 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!860 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!861 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!862 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!863 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!864 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!865 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!866 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!867 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!868 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!869 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!870 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!871 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!872 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!873 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!874 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_code", file: !875, line: 723, baseType: !7, size: 32, elements: !876)
!875 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!876 = !{!877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902, !903, !904, !905, !906, !907, !908, !909, !910, !911, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !926, !927, !928, !929, !930, !931, !932, !933, !934, !935, !936, !937, !938, !939, !940, !941, !942, !943, !944, !945, !946, !947, !948, !949, !950, !951, !952, !953, !954, !955, !956, !957, !958, !959, !960, !961, !962, !963, !964, !965, !966, !967, !968, !969, !970, !971, !972, !973, !974, !975, !976, !977, !978, !979, !980, !981, !982, !983, !984, !985, !986, !987, !988, !989, !990, !991, !992, !993, !994, !995, !996, !997, !998, !999, !1000, !1001, !1002, !1003, !1004, !1005, !1006, !1007, !1008, !1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018, !1019, !1020, !1021, !1022, !1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1032, !1033, !1034, !1035, !1036, !1037, !1038, !1039, !1040, !1041, !1042, !1043, !1044, !1045, !1046, !1047, !1048, !1049, !1050, !1051, !1052, !1053, !1054, !1055, !1056, !1057, !1058, !1059, !1060, !1061, !1062, !1063, !1064, !1065, !1066, !1067, !1068, !1069, !1070, !1071, !1072, !1073, !1074, !1075, !1076, !1077, !1078, !1079, !1080, !1081, !1082, !1083, !1084, !1085, !1086, !1087, !1088, !1089, !1090, !1091, !1092, !1093, !1094, !1095, !1096, !1097, !1098, !1099, !1100, !1101, !1102, !1103, !1104, !1105, !1106, !1107, !1108, !1109, !1110, !1111, !1112, !1113, !1114, !1115, !1116, !1117, !1118, !1119, !1120, !1121, !1122, !1123, !1124, !1125, !1126, !1127, !1128, !1129, !1130, !1131, !1132, !1133, !1134, !1135, !1136, !1137, !1138, !1139, !1140, !1141, !1142, !1143, !1144, !1145, !1146, !1147, !1148, !1149, !1150, !1151, !1152, !1153, !1154, !1155, !1156, !1157, !1158, !1159, !1160, !1161, !1162, !1163, !1164, !1165, !1166, !1167, !1168, !1169, !1170, !1171, !1172, !1173, !1174, !1175, !1176, !1177, !1178, !1179, !1180, !1181, !1182, !1183, !1184, !1185, !1186, !1187, !1188, !1189, !1190, !1191, !1192, !1193, !1194, !1195, !1196, !1197, !1198, !1199, !1200, !1201, !1202, !1203, !1204, !1205, !1206, !1207, !1208, !1209, !1210, !1211, !1212, !1213, !1214, !1215, !1216, !1217, !1218, !1219, !1220, !1221, !1222, !1223, !1224, !1225, !1226, !1227, !1228, !1229, !1230, !1231, !1232, !1233, !1234, !1235, !1236, !1237, !1238, !1239, !1240, !1241, !1242, !1243, !1244, !1245, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273, !1274, !1275, !1276, !1277, !1278, !1279, !1280, !1281, !1282, !1283, !1284, !1285, !1286, !1287, !1288, !1289, !1290, !1291, !1292, !1293, !1294, !1295, !1296, !1297, !1298, !1299, !1300, !1301, !1302, !1303, !1304, !1305, !1306, !1307, !1308, !1309, !1310, !1311, !1312, !1313, !1314, !1315, !1316, !1317, !1318, !1319, !1320, !1321, !1322, !1323, !1324, !1325, !1326, !1327, !1328, !1329, !1330, !1331, !1332, !1333, !1334, !1335, !1336, !1337, !1338, !1339, !1340, !1341, !1342, !1343, !1344, !1345, !1346, !1347, !1348, !1349, !1350, !1351, !1352, !1353, !1354, !1355, !1356, !1357, !1358, !1359, !1360, !1361, !1362, !1363, !1364, !1365, !1366, !1367, !1368, !1369, !1370, !1371, !1372, !1373, !1374, !1375, !1376, !1377, !1378, !1379, !1380, !1381, !1382, !1383, !1384, !1385, !1386, !1387, !1388, !1389, !1390, !1391, !1392, !1393, !1394, !1395, !1396, !1397, !1398, !1399, !1400, !1401, !1402, !1403, !1404, !1405, !1406, !1407, !1408, !1409, !1410, !1411, !1412, !1413, !1414, !1415, !1416, !1417, !1418, !1419, !1420, !1421, !1422, !1423, !1424, !1425, !1426, !1427, !1428, !1429, !1430, !1431, !1432, !1433, !1434, !1435, !1436, !1437, !1438, !1439, !1440, !1441, !1442, !1443, !1444, !1445, !1446, !1447, !1448, !1449, !1450, !1451, !1452, !1453, !1454, !1455, !1456, !1457, !1458, !1459, !1460, !1461, !1462, !1463, !1464, !1465, !1466, !1467, !1468, !1469, !1470, !1471, !1472, !1473, !1474, !1475, !1476, !1477, !1478, !1479, !1480, !1481, !1482, !1483, !1484, !1485, !1486, !1487, !1488, !1489, !1490, !1491, !1492, !1493, !1494, !1495, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510, !1511, !1512, !1513, !1514, !1515, !1516, !1517, !1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540, !1541, !1542, !1543, !1544, !1545, !1546, !1547, !1548, !1549, !1550, !1551, !1552, !1553, !1554, !1555, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565, !1566, !1567, !1568, !1569, !1570, !1571, !1572, !1573, !1574, !1575, !1576, !1577, !1578, !1579, !1580, !1581, !1582, !1583, !1584, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594, !1595, !1596, !1597, !1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631, !1632, !1633, !1634, !1635, !1636, !1637, !1638, !1639, !1640, !1641, !1642, !1643, !1644, !1645, !1646, !1647, !1648, !1649, !1650, !1651, !1652, !1653, !1654, !1655, !1656, !1657, !1658, !1659, !1660, !1661, !1662, !1663, !1664, !1665, !1666, !1667, !1668, !1669, !1670, !1671, !1672, !1673, !1674, !1675, !1676, !1677, !1678, !1679, !1680, !1681, !1682, !1683, !1684, !1685, !1686, !1687, !1688, !1689, !1690, !1691, !1692, !1693, !1694, !1695, !1696, !1697, !1698, !1699, !1700, !1701, !1702, !1703, !1704, !1705, !1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726, !1727, !1728, !1729, !1730, !1731, !1732, !1733, !1734, !1735, !1736, !1737, !1738, !1739, !1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747}
!877 = !DIEnumerator(name: "OPT__help", value: 0, isUnsigned: true)
!878 = !DIEnumerator(name: "OPT__help_", value: 1, isUnsigned: true)
!879 = !DIEnumerator(name: "OPT__output_pch_", value: 2, isUnsigned: true)
!880 = !DIEnumerator(name: "OPT__param", value: 3, isUnsigned: true)
!881 = !DIEnumerator(name: "OPT__target_help", value: 4, isUnsigned: true)
!882 = !DIEnumerator(name: "OPT__version", value: 5, isUnsigned: true)
!883 = !DIEnumerator(name: "OPT_A", value: 6, isUnsigned: true)
!884 = !DIEnumerator(name: "OPT_C", value: 7, isUnsigned: true)
!885 = !DIEnumerator(name: "OPT_CC", value: 8, isUnsigned: true)
!886 = !DIEnumerator(name: "OPT_D", value: 9, isUnsigned: true)
!887 = !DIEnumerator(name: "OPT_E", value: 10, isUnsigned: true)
!888 = !DIEnumerator(name: "OPT_F", value: 11, isUnsigned: true)
!889 = !DIEnumerator(name: "OPT_G", value: 12, isUnsigned: true)
!890 = !DIEnumerator(name: "OPT_H", value: 13, isUnsigned: true)
!891 = !DIEnumerator(name: "OPT_I", value: 14, isUnsigned: true)
!892 = !DIEnumerator(name: "OPT_J", value: 15, isUnsigned: true)
!893 = !DIEnumerator(name: "OPT_M", value: 16, isUnsigned: true)
!894 = !DIEnumerator(name: "OPT_MD", value: 17, isUnsigned: true)
!895 = !DIEnumerator(name: "OPT_MD_", value: 18, isUnsigned: true)
!896 = !DIEnumerator(name: "OPT_MF", value: 19, isUnsigned: true)
!897 = !DIEnumerator(name: "OPT_MG", value: 20, isUnsigned: true)
!898 = !DIEnumerator(name: "OPT_MM", value: 21, isUnsigned: true)
!899 = !DIEnumerator(name: "OPT_MMD", value: 22, isUnsigned: true)
!900 = !DIEnumerator(name: "OPT_MMD_", value: 23, isUnsigned: true)
!901 = !DIEnumerator(name: "OPT_MP", value: 24, isUnsigned: true)
!902 = !DIEnumerator(name: "OPT_MQ", value: 25, isUnsigned: true)
!903 = !DIEnumerator(name: "OPT_MT", value: 26, isUnsigned: true)
!904 = !DIEnumerator(name: "OPT_O", value: 27, isUnsigned: true)
!905 = !DIEnumerator(name: "OPT_Os", value: 28, isUnsigned: true)
!906 = !DIEnumerator(name: "OPT_P", value: 29, isUnsigned: true)
!907 = !DIEnumerator(name: "OPT_U", value: 30, isUnsigned: true)
!908 = !DIEnumerator(name: "OPT_W", value: 31, isUnsigned: true)
!909 = !DIEnumerator(name: "OPT_Wabi", value: 32, isUnsigned: true)
!910 = !DIEnumerator(name: "OPT_Waddress", value: 33, isUnsigned: true)
!911 = !DIEnumerator(name: "OPT_Waggregate_return", value: 34, isUnsigned: true)
!912 = !DIEnumerator(name: "OPT_Waliasing", value: 35, isUnsigned: true)
!913 = !DIEnumerator(name: "OPT_Walign_commons", value: 36, isUnsigned: true)
!914 = !DIEnumerator(name: "OPT_Wall", value: 37, isUnsigned: true)
!915 = !DIEnumerator(name: "OPT_Wall_deprecation", value: 38, isUnsigned: true)
!916 = !DIEnumerator(name: "OPT_Wall_javadoc", value: 39, isUnsigned: true)
!917 = !DIEnumerator(name: "OPT_Wampersand", value: 40, isUnsigned: true)
!918 = !DIEnumerator(name: "OPT_Warray_bounds", value: 41, isUnsigned: true)
!919 = !DIEnumerator(name: "OPT_Warray_temporaries", value: 42, isUnsigned: true)
!920 = !DIEnumerator(name: "OPT_Wassert_identifier", value: 43, isUnsigned: true)
!921 = !DIEnumerator(name: "OPT_Wassign_intercept", value: 44, isUnsigned: true)
!922 = !DIEnumerator(name: "OPT_Wattributes", value: 45, isUnsigned: true)
!923 = !DIEnumerator(name: "OPT_Wbad_function_cast", value: 46, isUnsigned: true)
!924 = !DIEnumerator(name: "OPT_Wboxing", value: 47, isUnsigned: true)
!925 = !DIEnumerator(name: "OPT_Wbuiltin_macro_redefined", value: 48, isUnsigned: true)
!926 = !DIEnumerator(name: "OPT_Wc___compat", value: 49, isUnsigned: true)
!927 = !DIEnumerator(name: "OPT_Wc__0x_compat", value: 50, isUnsigned: true)
!928 = !DIEnumerator(name: "OPT_Wcast_align", value: 51, isUnsigned: true)
!929 = !DIEnumerator(name: "OPT_Wcast_qual", value: 52, isUnsigned: true)
!930 = !DIEnumerator(name: "OPT_Wchar_concat", value: 53, isUnsigned: true)
!931 = !DIEnumerator(name: "OPT_Wchar_subscripts", value: 54, isUnsigned: true)
!932 = !DIEnumerator(name: "OPT_Wcharacter_truncation", value: 55, isUnsigned: true)
!933 = !DIEnumerator(name: "OPT_Wclobbered", value: 56, isUnsigned: true)
!934 = !DIEnumerator(name: "OPT_Wcomment", value: 57, isUnsigned: true)
!935 = !DIEnumerator(name: "OPT_Wcomments", value: 58, isUnsigned: true)
!936 = !DIEnumerator(name: "OPT_Wcondition_assign", value: 59, isUnsigned: true)
!937 = !DIEnumerator(name: "OPT_Wconstructor_name", value: 60, isUnsigned: true)
!938 = !DIEnumerator(name: "OPT_Wconversion", value: 61, isUnsigned: true)
!939 = !DIEnumerator(name: "OPT_Wconversion_null", value: 62, isUnsigned: true)
!940 = !DIEnumerator(name: "OPT_Wcoverage_mismatch", value: 63, isUnsigned: true)
!941 = !DIEnumerator(name: "OPT_Wctor_dtor_privacy", value: 64, isUnsigned: true)
!942 = !DIEnumerator(name: "OPT_Wdeclaration_after_statement", value: 65, isUnsigned: true)
!943 = !DIEnumerator(name: "OPT_Wdep_ann", value: 66, isUnsigned: true)
!944 = !DIEnumerator(name: "OPT_Wdeprecated", value: 67, isUnsigned: true)
!945 = !DIEnumerator(name: "OPT_Wdeprecated_declarations", value: 68, isUnsigned: true)
!946 = !DIEnumerator(name: "OPT_Wdisabled_optimization", value: 69, isUnsigned: true)
!947 = !DIEnumerator(name: "OPT_Wdiscouraged", value: 70, isUnsigned: true)
!948 = !DIEnumerator(name: "OPT_Wdiv_by_zero", value: 71, isUnsigned: true)
!949 = !DIEnumerator(name: "OPT_Weffc__", value: 72, isUnsigned: true)
!950 = !DIEnumerator(name: "OPT_Wempty_block", value: 73, isUnsigned: true)
!951 = !DIEnumerator(name: "OPT_Wempty_body", value: 74, isUnsigned: true)
!952 = !DIEnumerator(name: "OPT_Wendif_labels", value: 75, isUnsigned: true)
!953 = !DIEnumerator(name: "OPT_Wenum_compare", value: 76, isUnsigned: true)
!954 = !DIEnumerator(name: "OPT_Wenum_identifier", value: 77, isUnsigned: true)
!955 = !DIEnumerator(name: "OPT_Wenum_switch", value: 78, isUnsigned: true)
!956 = !DIEnumerator(name: "OPT_Werror", value: 79, isUnsigned: true)
!957 = !DIEnumerator(name: "OPT_Werror_implicit_function_declaration", value: 80, isUnsigned: true)
!958 = !DIEnumerator(name: "OPT_Werror_", value: 81, isUnsigned: true)
!959 = !DIEnumerator(name: "OPT_Wextra", value: 82, isUnsigned: true)
!960 = !DIEnumerator(name: "OPT_Wextraneous_semicolon", value: 83, isUnsigned: true)
!961 = !DIEnumerator(name: "OPT_Wfallthrough", value: 84, isUnsigned: true)
!962 = !DIEnumerator(name: "OPT_Wfatal_errors", value: 85, isUnsigned: true)
!963 = !DIEnumerator(name: "OPT_Wfield_hiding", value: 86, isUnsigned: true)
!964 = !DIEnumerator(name: "OPT_Wfinal_bound", value: 87, isUnsigned: true)
!965 = !DIEnumerator(name: "OPT_Wfinally", value: 88, isUnsigned: true)
!966 = !DIEnumerator(name: "OPT_Wfloat_equal", value: 89, isUnsigned: true)
!967 = !DIEnumerator(name: "OPT_Wforbidden", value: 90, isUnsigned: true)
!968 = !DIEnumerator(name: "OPT_Wformat", value: 91, isUnsigned: true)
!969 = !DIEnumerator(name: "OPT_Wformat_contains_nul", value: 92, isUnsigned: true)
!970 = !DIEnumerator(name: "OPT_Wformat_extra_args", value: 93, isUnsigned: true)
!971 = !DIEnumerator(name: "OPT_Wformat_nonliteral", value: 94, isUnsigned: true)
!972 = !DIEnumerator(name: "OPT_Wformat_security", value: 95, isUnsigned: true)
!973 = !DIEnumerator(name: "OPT_Wformat_y2k", value: 96, isUnsigned: true)
!974 = !DIEnumerator(name: "OPT_Wformat_zero_length", value: 97, isUnsigned: true)
!975 = !DIEnumerator(name: "OPT_Wformat_", value: 98, isUnsigned: true)
!976 = !DIEnumerator(name: "OPT_Wframe_larger_than_", value: 99, isUnsigned: true)
!977 = !DIEnumerator(name: "OPT_Whiding", value: 100, isUnsigned: true)
!978 = !DIEnumerator(name: "OPT_Wignored_qualifiers", value: 101, isUnsigned: true)
!979 = !DIEnumerator(name: "OPT_Wimplicit", value: 102, isUnsigned: true)
!980 = !DIEnumerator(name: "OPT_Wimplicit_function_declaration", value: 103, isUnsigned: true)
!981 = !DIEnumerator(name: "OPT_Wimplicit_int", value: 104, isUnsigned: true)
!982 = !DIEnumerator(name: "OPT_Wimplicit_interface", value: 105, isUnsigned: true)
!983 = !DIEnumerator(name: "OPT_Wimplicit_procedure", value: 106, isUnsigned: true)
!984 = !DIEnumerator(name: "OPT_Wimport", value: 107, isUnsigned: true)
!985 = !DIEnumerator(name: "OPT_Windirect_static", value: 108, isUnsigned: true)
!986 = !DIEnumerator(name: "OPT_Winit_self", value: 109, isUnsigned: true)
!987 = !DIEnumerator(name: "OPT_Winline", value: 110, isUnsigned: true)
!988 = !DIEnumerator(name: "OPT_Wint_to_pointer_cast", value: 111, isUnsigned: true)
!989 = !DIEnumerator(name: "OPT_Wintf_annotation", value: 112, isUnsigned: true)
!990 = !DIEnumerator(name: "OPT_Wintf_non_inherited", value: 113, isUnsigned: true)
!991 = !DIEnumerator(name: "OPT_Wintrinsic_shadow", value: 114, isUnsigned: true)
!992 = !DIEnumerator(name: "OPT_Wintrinsics_std", value: 115, isUnsigned: true)
!993 = !DIEnumerator(name: "OPT_Winvalid_offsetof", value: 116, isUnsigned: true)
!994 = !DIEnumerator(name: "OPT_Winvalid_pch", value: 117, isUnsigned: true)
!995 = !DIEnumerator(name: "OPT_Wjavadoc", value: 118, isUnsigned: true)
!996 = !DIEnumerator(name: "OPT_Wjump_misses_init", value: 119, isUnsigned: true)
!997 = !DIEnumerator(name: "OPT_Wlarger_than_", value: 120, isUnsigned: true)
!998 = !DIEnumerator(name: "OPT_Wlarger_than_eq", value: 121, isUnsigned: true)
!999 = !DIEnumerator(name: "OPT_Wline_truncation", value: 122, isUnsigned: true)
!1000 = !DIEnumerator(name: "OPT_Wlocal_hiding", value: 123, isUnsigned: true)
!1001 = !DIEnumerator(name: "OPT_Wlogical_op", value: 124, isUnsigned: true)
!1002 = !DIEnumerator(name: "OPT_Wlong_long", value: 125, isUnsigned: true)
!1003 = !DIEnumerator(name: "OPT_Wmain", value: 126, isUnsigned: true)
!1004 = !DIEnumerator(name: "OPT_Wmasked_catch_block", value: 127, isUnsigned: true)
!1005 = !DIEnumerator(name: "OPT_Wmissing_braces", value: 128, isUnsigned: true)
!1006 = !DIEnumerator(name: "OPT_Wmissing_declarations", value: 129, isUnsigned: true)
!1007 = !DIEnumerator(name: "OPT_Wmissing_field_initializers", value: 130, isUnsigned: true)
!1008 = !DIEnumerator(name: "OPT_Wmissing_format_attribute", value: 131, isUnsigned: true)
!1009 = !DIEnumerator(name: "OPT_Wmissing_include_dirs", value: 132, isUnsigned: true)
!1010 = !DIEnumerator(name: "OPT_Wmissing_noreturn", value: 133, isUnsigned: true)
!1011 = !DIEnumerator(name: "OPT_Wmissing_parameter_type", value: 134, isUnsigned: true)
!1012 = !DIEnumerator(name: "OPT_Wmissing_prototypes", value: 135, isUnsigned: true)
!1013 = !DIEnumerator(name: "OPT_Wmudflap", value: 136, isUnsigned: true)
!1014 = !DIEnumerator(name: "OPT_Wmultichar", value: 137, isUnsigned: true)
!1015 = !DIEnumerator(name: "OPT_Wnested_externs", value: 138, isUnsigned: true)
!1016 = !DIEnumerator(name: "OPT_Wnls", value: 139, isUnsigned: true)
!1017 = !DIEnumerator(name: "OPT_Wno_effect_assign", value: 140, isUnsigned: true)
!1018 = !DIEnumerator(name: "OPT_Wnon_template_friend", value: 141, isUnsigned: true)
!1019 = !DIEnumerator(name: "OPT_Wnon_virtual_dtor", value: 142, isUnsigned: true)
!1020 = !DIEnumerator(name: "OPT_Wnonnull", value: 143, isUnsigned: true)
!1021 = !DIEnumerator(name: "OPT_Wnormalized_", value: 144, isUnsigned: true)
!1022 = !DIEnumerator(name: "OPT_Wnull", value: 145, isUnsigned: true)
!1023 = !DIEnumerator(name: "OPT_Wold_style_cast", value: 146, isUnsigned: true)
!1024 = !DIEnumerator(name: "OPT_Wold_style_declaration", value: 147, isUnsigned: true)
!1025 = !DIEnumerator(name: "OPT_Wold_style_definition", value: 148, isUnsigned: true)
!1026 = !DIEnumerator(name: "OPT_Wout_of_date", value: 149, isUnsigned: true)
!1027 = !DIEnumerator(name: "OPT_Wover_ann", value: 150, isUnsigned: true)
!1028 = !DIEnumerator(name: "OPT_Woverflow", value: 151, isUnsigned: true)
!1029 = !DIEnumerator(name: "OPT_Woverlength_strings", value: 152, isUnsigned: true)
!1030 = !DIEnumerator(name: "OPT_Woverloaded_virtual", value: 153, isUnsigned: true)
!1031 = !DIEnumerator(name: "OPT_Woverride_init", value: 154, isUnsigned: true)
!1032 = !DIEnumerator(name: "OPT_Wpacked", value: 155, isUnsigned: true)
!1033 = !DIEnumerator(name: "OPT_Wpacked_bitfield_compat", value: 156, isUnsigned: true)
!1034 = !DIEnumerator(name: "OPT_Wpadded", value: 157, isUnsigned: true)
!1035 = !DIEnumerator(name: "OPT_Wparam_assign", value: 158, isUnsigned: true)
!1036 = !DIEnumerator(name: "OPT_Wparentheses", value: 159, isUnsigned: true)
!1037 = !DIEnumerator(name: "OPT_Wpkg_default_method", value: 160, isUnsigned: true)
!1038 = !DIEnumerator(name: "OPT_Wpmf_conversions", value: 161, isUnsigned: true)
!1039 = !DIEnumerator(name: "OPT_Wpointer_arith", value: 162, isUnsigned: true)
!1040 = !DIEnumerator(name: "OPT_Wpointer_sign", value: 163, isUnsigned: true)
!1041 = !DIEnumerator(name: "OPT_Wpointer_to_int_cast", value: 164, isUnsigned: true)
!1042 = !DIEnumerator(name: "OPT_Wpragmas", value: 165, isUnsigned: true)
!1043 = !DIEnumerator(name: "OPT_Wprotocol", value: 166, isUnsigned: true)
!1044 = !DIEnumerator(name: "OPT_Wpsabi", value: 167, isUnsigned: true)
!1045 = !DIEnumerator(name: "OPT_Wraw", value: 168, isUnsigned: true)
!1046 = !DIEnumerator(name: "OPT_Wredundant_decls", value: 169, isUnsigned: true)
!1047 = !DIEnumerator(name: "OPT_Wredundant_modifiers", value: 170, isUnsigned: true)
!1048 = !DIEnumerator(name: "OPT_Wreorder", value: 171, isUnsigned: true)
!1049 = !DIEnumerator(name: "OPT_Wreturn_type", value: 172, isUnsigned: true)
!1050 = !DIEnumerator(name: "OPT_Wselector", value: 173, isUnsigned: true)
!1051 = !DIEnumerator(name: "OPT_Wsequence_point", value: 174, isUnsigned: true)
!1052 = !DIEnumerator(name: "OPT_Wserial", value: 175, isUnsigned: true)
!1053 = !DIEnumerator(name: "OPT_Wshadow", value: 176, isUnsigned: true)
!1054 = !DIEnumerator(name: "OPT_Wsign_compare", value: 177, isUnsigned: true)
!1055 = !DIEnumerator(name: "OPT_Wsign_conversion", value: 178, isUnsigned: true)
!1056 = !DIEnumerator(name: "OPT_Wsign_promo", value: 179, isUnsigned: true)
!1057 = !DIEnumerator(name: "OPT_Wspecial_param_hiding", value: 180, isUnsigned: true)
!1058 = !DIEnumerator(name: "OPT_Wstack_protector", value: 181, isUnsigned: true)
!1059 = !DIEnumerator(name: "OPT_Wstatic_access", value: 182, isUnsigned: true)
!1060 = !DIEnumerator(name: "OPT_Wstatic_receiver", value: 183, isUnsigned: true)
!1061 = !DIEnumerator(name: "OPT_Wstrict_aliasing", value: 184, isUnsigned: true)
!1062 = !DIEnumerator(name: "OPT_Wstrict_aliasing_", value: 185, isUnsigned: true)
!1063 = !DIEnumerator(name: "OPT_Wstrict_null_sentinel", value: 186, isUnsigned: true)
!1064 = !DIEnumerator(name: "OPT_Wstrict_overflow", value: 187, isUnsigned: true)
!1065 = !DIEnumerator(name: "OPT_Wstrict_overflow_", value: 188, isUnsigned: true)
!1066 = !DIEnumerator(name: "OPT_Wstrict_prototypes", value: 189, isUnsigned: true)
!1067 = !DIEnumerator(name: "OPT_Wstrict_selector_match", value: 190, isUnsigned: true)
!1068 = !DIEnumerator(name: "OPT_Wsuppress", value: 191, isUnsigned: true)
!1069 = !DIEnumerator(name: "OPT_Wsurprising", value: 192, isUnsigned: true)
!1070 = !DIEnumerator(name: "OPT_Wswitch", value: 193, isUnsigned: true)
!1071 = !DIEnumerator(name: "OPT_Wswitch_default", value: 194, isUnsigned: true)
!1072 = !DIEnumerator(name: "OPT_Wswitch_enum", value: 195, isUnsigned: true)
!1073 = !DIEnumerator(name: "OPT_Wsync_nand", value: 196, isUnsigned: true)
!1074 = !DIEnumerator(name: "OPT_Wsynth", value: 197, isUnsigned: true)
!1075 = !DIEnumerator(name: "OPT_Wsynthetic_access", value: 198, isUnsigned: true)
!1076 = !DIEnumerator(name: "OPT_Wsystem_headers", value: 199, isUnsigned: true)
!1077 = !DIEnumerator(name: "OPT_Wtabs", value: 200, isUnsigned: true)
!1078 = !DIEnumerator(name: "OPT_Wtasks", value: 201, isUnsigned: true)
!1079 = !DIEnumerator(name: "OPT_Wtraditional", value: 202, isUnsigned: true)
!1080 = !DIEnumerator(name: "OPT_Wtraditional_conversion", value: 203, isUnsigned: true)
!1081 = !DIEnumerator(name: "OPT_Wtrigraphs", value: 204, isUnsigned: true)
!1082 = !DIEnumerator(name: "OPT_Wtype_hiding", value: 205, isUnsigned: true)
!1083 = !DIEnumerator(name: "OPT_Wtype_limits", value: 206, isUnsigned: true)
!1084 = !DIEnumerator(name: "OPT_Wuncheck", value: 207, isUnsigned: true)
!1085 = !DIEnumerator(name: "OPT_Wundeclared_selector", value: 208, isUnsigned: true)
!1086 = !DIEnumerator(name: "OPT_Wundef", value: 209, isUnsigned: true)
!1087 = !DIEnumerator(name: "OPT_Wunderflow", value: 210, isUnsigned: true)
!1088 = !DIEnumerator(name: "OPT_Wuninitialized", value: 211, isUnsigned: true)
!1089 = !DIEnumerator(name: "OPT_Wunknown_pragmas", value: 212, isUnsigned: true)
!1090 = !DIEnumerator(name: "OPT_Wunnecessary_else", value: 213, isUnsigned: true)
!1091 = !DIEnumerator(name: "OPT_Wunqualified_field", value: 214, isUnsigned: true)
!1092 = !DIEnumerator(name: "OPT_Wunreachable_code", value: 215, isUnsigned: true)
!1093 = !DIEnumerator(name: "OPT_Wunsafe_loop_optimizations", value: 216, isUnsigned: true)
!1094 = !DIEnumerator(name: "OPT_Wunsuffixed_float_constants", value: 217, isUnsigned: true)
!1095 = !DIEnumerator(name: "OPT_Wunused", value: 218, isUnsigned: true)
!1096 = !DIEnumerator(name: "OPT_Wunused_argument", value: 219, isUnsigned: true)
!1097 = !DIEnumerator(name: "OPT_Wunused_function", value: 220, isUnsigned: true)
!1098 = !DIEnumerator(name: "OPT_Wunused_import", value: 221, isUnsigned: true)
!1099 = !DIEnumerator(name: "OPT_Wunused_label", value: 222, isUnsigned: true)
!1100 = !DIEnumerator(name: "OPT_Wunused_local", value: 223, isUnsigned: true)
!1101 = !DIEnumerator(name: "OPT_Wunused_macros", value: 224, isUnsigned: true)
!1102 = !DIEnumerator(name: "OPT_Wunused_parameter", value: 225, isUnsigned: true)
!1103 = !DIEnumerator(name: "OPT_Wunused_private", value: 226, isUnsigned: true)
!1104 = !DIEnumerator(name: "OPT_Wunused_result", value: 227, isUnsigned: true)
!1105 = !DIEnumerator(name: "OPT_Wunused_thrown", value: 228, isUnsigned: true)
!1106 = !DIEnumerator(name: "OPT_Wunused_value", value: 229, isUnsigned: true)
!1107 = !DIEnumerator(name: "OPT_Wunused_variable", value: 230, isUnsigned: true)
!1108 = !DIEnumerator(name: "OPT_Wuseless_type_check", value: 231, isUnsigned: true)
!1109 = !DIEnumerator(name: "OPT_Wvarargs_cast", value: 232, isUnsigned: true)
!1110 = !DIEnumerator(name: "OPT_Wvariadic_macros", value: 233, isUnsigned: true)
!1111 = !DIEnumerator(name: "OPT_Wvla", value: 234, isUnsigned: true)
!1112 = !DIEnumerator(name: "OPT_Wvolatile_register_var", value: 235, isUnsigned: true)
!1113 = !DIEnumerator(name: "OPT_Wwarning_token", value: 236, isUnsigned: true)
!1114 = !DIEnumerator(name: "OPT_Wwrite_strings", value: 237, isUnsigned: true)
!1115 = !DIEnumerator(name: "OPT_ansi", value: 238, isUnsigned: true)
!1116 = !DIEnumerator(name: "OPT_aux_info", value: 239, isUnsigned: true)
!1117 = !DIEnumerator(name: "OPT_aux_info_", value: 240, isUnsigned: true)
!1118 = !DIEnumerator(name: "OPT_auxbase", value: 241, isUnsigned: true)
!1119 = !DIEnumerator(name: "OPT_auxbase_strip", value: 242, isUnsigned: true)
!1120 = !DIEnumerator(name: "OPT_cpp", value: 243, isUnsigned: true)
!1121 = !DIEnumerator(name: "OPT_d", value: 244, isUnsigned: true)
!1122 = !DIEnumerator(name: "OPT_dumpbase", value: 245, isUnsigned: true)
!1123 = !DIEnumerator(name: "OPT_dumpdir", value: 246, isUnsigned: true)
!1124 = !DIEnumerator(name: "OPT_fCLASSPATH_", value: 247, isUnsigned: true)
!1125 = !DIEnumerator(name: "OPT_fPIC", value: 248, isUnsigned: true)
!1126 = !DIEnumerator(name: "OPT_fPIE", value: 249, isUnsigned: true)
!1127 = !DIEnumerator(name: "OPT_fRTS_", value: 250, isUnsigned: true)
!1128 = !DIEnumerator(name: "OPT_fabi_version_", value: 251, isUnsigned: true)
!1129 = !DIEnumerator(name: "OPT_faccess_control", value: 252, isUnsigned: true)
!1130 = !DIEnumerator(name: "OPT_falign_commons", value: 253, isUnsigned: true)
!1131 = !DIEnumerator(name: "OPT_falign_functions", value: 254, isUnsigned: true)
!1132 = !DIEnumerator(name: "OPT_falign_functions_", value: 255, isUnsigned: true)
!1133 = !DIEnumerator(name: "OPT_falign_jumps", value: 256, isUnsigned: true)
!1134 = !DIEnumerator(name: "OPT_falign_jumps_", value: 257, isUnsigned: true)
!1135 = !DIEnumerator(name: "OPT_falign_labels", value: 258, isUnsigned: true)
!1136 = !DIEnumerator(name: "OPT_falign_labels_", value: 259, isUnsigned: true)
!1137 = !DIEnumerator(name: "OPT_falign_loops", value: 260, isUnsigned: true)
!1138 = !DIEnumerator(name: "OPT_falign_loops_", value: 261, isUnsigned: true)
!1139 = !DIEnumerator(name: "OPT_fall_intrinsics", value: 262, isUnsigned: true)
!1140 = !DIEnumerator(name: "OPT_fall_virtual", value: 263, isUnsigned: true)
!1141 = !DIEnumerator(name: "OPT_fallow_leading_underscore", value: 264, isUnsigned: true)
!1142 = !DIEnumerator(name: "OPT_falt_external_templates", value: 265, isUnsigned: true)
!1143 = !DIEnumerator(name: "OPT_fargument_alias", value: 266, isUnsigned: true)
!1144 = !DIEnumerator(name: "OPT_fargument_noalias", value: 267, isUnsigned: true)
!1145 = !DIEnumerator(name: "OPT_fargument_noalias_anything", value: 268, isUnsigned: true)
!1146 = !DIEnumerator(name: "OPT_fargument_noalias_global", value: 269, isUnsigned: true)
!1147 = !DIEnumerator(name: "OPT_fasm", value: 270, isUnsigned: true)
!1148 = !DIEnumerator(name: "OPT_fassert", value: 271, isUnsigned: true)
!1149 = !DIEnumerator(name: "OPT_fassociative_math", value: 272, isUnsigned: true)
!1150 = !DIEnumerator(name: "OPT_fassume_compiled", value: 273, isUnsigned: true)
!1151 = !DIEnumerator(name: "OPT_fassume_compiled_", value: 274, isUnsigned: true)
!1152 = !DIEnumerator(name: "OPT_fasynchronous_unwind_tables", value: 275, isUnsigned: true)
!1153 = !DIEnumerator(name: "OPT_fauto_inc_dec", value: 276, isUnsigned: true)
!1154 = !DIEnumerator(name: "OPT_fautomatic", value: 277, isUnsigned: true)
!1155 = !DIEnumerator(name: "OPT_faux_classpath", value: 278, isUnsigned: true)
!1156 = !DIEnumerator(name: "OPT_fbackslash", value: 279, isUnsigned: true)
!1157 = !DIEnumerator(name: "OPT_fbacktrace", value: 280, isUnsigned: true)
!1158 = !DIEnumerator(name: "OPT_fblas_matmul_limit_", value: 281, isUnsigned: true)
!1159 = !DIEnumerator(name: "OPT_fbootclasspath_", value: 282, isUnsigned: true)
!1160 = !DIEnumerator(name: "OPT_fbootstrap_classes", value: 283, isUnsigned: true)
!1161 = !DIEnumerator(name: "OPT_fbounds_check", value: 284, isUnsigned: true)
!1162 = !DIEnumerator(name: "OPT_fbranch_count_reg", value: 285, isUnsigned: true)
!1163 = !DIEnumerator(name: "OPT_fbranch_probabilities", value: 286, isUnsigned: true)
!1164 = !DIEnumerator(name: "OPT_fbranch_target_load_optimize", value: 287, isUnsigned: true)
!1165 = !DIEnumerator(name: "OPT_fbranch_target_load_optimize2", value: 288, isUnsigned: true)
!1166 = !DIEnumerator(name: "OPT_fbtr_bb_exclusive", value: 289, isUnsigned: true)
!1167 = !DIEnumerator(name: "OPT_fbuiltin", value: 290, isUnsigned: true)
!1168 = !DIEnumerator(name: "OPT_fbuiltin_", value: 291, isUnsigned: true)
!1169 = !DIEnumerator(name: "OPT_fcall_saved_", value: 292, isUnsigned: true)
!1170 = !DIEnumerator(name: "OPT_fcall_used_", value: 293, isUnsigned: true)
!1171 = !DIEnumerator(name: "OPT_fcaller_saves", value: 294, isUnsigned: true)
!1172 = !DIEnumerator(name: "OPT_fcheck_array_temporaries", value: 295, isUnsigned: true)
!1173 = !DIEnumerator(name: "OPT_fcheck_data_deps", value: 296, isUnsigned: true)
!1174 = !DIEnumerator(name: "OPT_fcheck_new", value: 297, isUnsigned: true)
!1175 = !DIEnumerator(name: "OPT_fcheck_references", value: 298, isUnsigned: true)
!1176 = !DIEnumerator(name: "OPT_fcheck_", value: 299, isUnsigned: true)
!1177 = !DIEnumerator(name: "OPT_fclasspath_", value: 300, isUnsigned: true)
!1178 = !DIEnumerator(name: "OPT_fcommon", value: 301, isUnsigned: true)
!1179 = !DIEnumerator(name: "OPT_fcompare_debug_second", value: 302, isUnsigned: true)
!1180 = !DIEnumerator(name: "OPT_fcompare_debug_", value: 303, isUnsigned: true)
!1181 = !DIEnumerator(name: "OPT_fcompile_resource_", value: 304, isUnsigned: true)
!1182 = !DIEnumerator(name: "OPT_fcond_mismatch", value: 305, isUnsigned: true)
!1183 = !DIEnumerator(name: "OPT_fconserve_space", value: 306, isUnsigned: true)
!1184 = !DIEnumerator(name: "OPT_fconserve_stack", value: 307, isUnsigned: true)
!1185 = !DIEnumerator(name: "OPT_fconstant_string_class_", value: 308, isUnsigned: true)
!1186 = !DIEnumerator(name: "OPT_fconvert_big_endian", value: 309, isUnsigned: true)
!1187 = !DIEnumerator(name: "OPT_fconvert_little_endian", value: 310, isUnsigned: true)
!1188 = !DIEnumerator(name: "OPT_fconvert_native", value: 311, isUnsigned: true)
!1189 = !DIEnumerator(name: "OPT_fconvert_swap", value: 312, isUnsigned: true)
!1190 = !DIEnumerator(name: "OPT_fcprop_registers", value: 313, isUnsigned: true)
!1191 = !DIEnumerator(name: "OPT_fcray_pointer", value: 314, isUnsigned: true)
!1192 = !DIEnumerator(name: "OPT_fcrossjumping", value: 315, isUnsigned: true)
!1193 = !DIEnumerator(name: "OPT_fcse_follow_jumps", value: 316, isUnsigned: true)
!1194 = !DIEnumerator(name: "OPT_fcse_skip_blocks", value: 317, isUnsigned: true)
!1195 = !DIEnumerator(name: "OPT_fcx_fortran_rules", value: 318, isUnsigned: true)
!1196 = !DIEnumerator(name: "OPT_fcx_limited_range", value: 319, isUnsigned: true)
!1197 = !DIEnumerator(name: "OPT_fd_lines_as_code", value: 320, isUnsigned: true)
!1198 = !DIEnumerator(name: "OPT_fd_lines_as_comments", value: 321, isUnsigned: true)
!1199 = !DIEnumerator(name: "OPT_fdata_sections", value: 322, isUnsigned: true)
!1200 = !DIEnumerator(name: "OPT_fdbg_cnt_list", value: 323, isUnsigned: true)
!1201 = !DIEnumerator(name: "OPT_fdbg_cnt_", value: 324, isUnsigned: true)
!1202 = !DIEnumerator(name: "OPT_fdce", value: 325, isUnsigned: true)
!1203 = !DIEnumerator(name: "OPT_fdebug_prefix_map_", value: 326, isUnsigned: true)
!1204 = !DIEnumerator(name: "OPT_fdeduce_init_list", value: 327, isUnsigned: true)
!1205 = !DIEnumerator(name: "OPT_fdefault_double_8", value: 328, isUnsigned: true)
!1206 = !DIEnumerator(name: "OPT_fdefault_inline", value: 329, isUnsigned: true)
!1207 = !DIEnumerator(name: "OPT_fdefault_integer_8", value: 330, isUnsigned: true)
!1208 = !DIEnumerator(name: "OPT_fdefault_real_8", value: 331, isUnsigned: true)
!1209 = !DIEnumerator(name: "OPT_fdefer_pop", value: 332, isUnsigned: true)
!1210 = !DIEnumerator(name: "OPT_fdelayed_branch", value: 333, isUnsigned: true)
!1211 = !DIEnumerator(name: "OPT_fdelete_null_pointer_checks", value: 334, isUnsigned: true)
!1212 = !DIEnumerator(name: "OPT_fdiagnostics_show_location_", value: 335, isUnsigned: true)
!1213 = !DIEnumerator(name: "OPT_fdiagnostics_show_option", value: 336, isUnsigned: true)
!1214 = !DIEnumerator(name: "OPT_fdirectives_only", value: 337, isUnsigned: true)
!1215 = !DIEnumerator(name: "OPT_fdisable_assertions", value: 338, isUnsigned: true)
!1216 = !DIEnumerator(name: "OPT_fdisable_assertions_", value: 339, isUnsigned: true)
!1217 = !DIEnumerator(name: "OPT_fdollar_ok", value: 340, isUnsigned: true)
!1218 = !DIEnumerator(name: "OPT_fdollars_in_identifiers", value: 341, isUnsigned: true)
!1219 = !DIEnumerator(name: "OPT_fdse", value: 342, isUnsigned: true)
!1220 = !DIEnumerator(name: "OPT_fdump_", value: 343, isUnsigned: true)
!1221 = !DIEnumerator(name: "OPT_fdump_core", value: 344, isUnsigned: true)
!1222 = !DIEnumerator(name: "OPT_fdump_final_insns_", value: 345, isUnsigned: true)
!1223 = !DIEnumerator(name: "OPT_fdump_noaddr", value: 346, isUnsigned: true)
!1224 = !DIEnumerator(name: "OPT_fdump_parse_tree", value: 347, isUnsigned: true)
!1225 = !DIEnumerator(name: "OPT_fdump_unnumbered", value: 348, isUnsigned: true)
!1226 = !DIEnumerator(name: "OPT_fdump_unnumbered_links", value: 349, isUnsigned: true)
!1227 = !DIEnumerator(name: "OPT_fdwarf2_cfi_asm", value: 350, isUnsigned: true)
!1228 = !DIEnumerator(name: "OPT_fearly_inlining", value: 351, isUnsigned: true)
!1229 = !DIEnumerator(name: "OPT_felide_constructors", value: 352, isUnsigned: true)
!1230 = !DIEnumerator(name: "OPT_feliminate_dwarf2_dups", value: 353, isUnsigned: true)
!1231 = !DIEnumerator(name: "OPT_feliminate_unused_debug_symbols", value: 354, isUnsigned: true)
!1232 = !DIEnumerator(name: "OPT_feliminate_unused_debug_types", value: 355, isUnsigned: true)
!1233 = !DIEnumerator(name: "OPT_femit_class_debug_always", value: 356, isUnsigned: true)
!1234 = !DIEnumerator(name: "OPT_femit_class_file", value: 357, isUnsigned: true)
!1235 = !DIEnumerator(name: "OPT_femit_class_files", value: 358, isUnsigned: true)
!1236 = !DIEnumerator(name: "OPT_femit_struct_debug_baseonly", value: 359, isUnsigned: true)
!1237 = !DIEnumerator(name: "OPT_femit_struct_debug_detailed_", value: 360, isUnsigned: true)
!1238 = !DIEnumerator(name: "OPT_femit_struct_debug_reduced", value: 361, isUnsigned: true)
!1239 = !DIEnumerator(name: "OPT_fenable_assertions", value: 362, isUnsigned: true)
!1240 = !DIEnumerator(name: "OPT_fenable_assertions_", value: 363, isUnsigned: true)
!1241 = !DIEnumerator(name: "OPT_fenable_icf_debug", value: 364, isUnsigned: true)
!1242 = !DIEnumerator(name: "OPT_fencoding_", value: 365, isUnsigned: true)
!1243 = !DIEnumerator(name: "OPT_fenforce_eh_specs", value: 366, isUnsigned: true)
!1244 = !DIEnumerator(name: "OPT_fenum_int_equiv", value: 367, isUnsigned: true)
!1245 = !DIEnumerator(name: "OPT_fexceptions", value: 368, isUnsigned: true)
!1246 = !DIEnumerator(name: "OPT_fexcess_precision_", value: 369, isUnsigned: true)
!1247 = !DIEnumerator(name: "OPT_fexec_charset_", value: 370, isUnsigned: true)
!1248 = !DIEnumerator(name: "OPT_fexpensive_optimizations", value: 371, isUnsigned: true)
!1249 = !DIEnumerator(name: "OPT_fextdirs_", value: 372, isUnsigned: true)
!1250 = !DIEnumerator(name: "OPT_fextended_identifiers", value: 373, isUnsigned: true)
!1251 = !DIEnumerator(name: "OPT_fexternal_blas", value: 374, isUnsigned: true)
!1252 = !DIEnumerator(name: "OPT_fexternal_templates", value: 375, isUnsigned: true)
!1253 = !DIEnumerator(name: "OPT_ff2c", value: 376, isUnsigned: true)
!1254 = !DIEnumerator(name: "OPT_ffast_math", value: 377, isUnsigned: true)
!1255 = !DIEnumerator(name: "OPT_ffilelist_file", value: 378, isUnsigned: true)
!1256 = !DIEnumerator(name: "OPT_ffinite_math_only", value: 379, isUnsigned: true)
!1257 = !DIEnumerator(name: "OPT_ffixed_", value: 380, isUnsigned: true)
!1258 = !DIEnumerator(name: "OPT_ffixed_form", value: 381, isUnsigned: true)
!1259 = !DIEnumerator(name: "OPT_ffixed_line_length_", value: 382, isUnsigned: true)
!1260 = !DIEnumerator(name: "OPT_ffixed_line_length_none", value: 383, isUnsigned: true)
!1261 = !DIEnumerator(name: "OPT_ffloat_store", value: 384, isUnsigned: true)
!1262 = !DIEnumerator(name: "OPT_ffor_scope", value: 385, isUnsigned: true)
!1263 = !DIEnumerator(name: "OPT_fforce_addr", value: 386, isUnsigned: true)
!1264 = !DIEnumerator(name: "OPT_fforce_classes_archive_check", value: 387, isUnsigned: true)
!1265 = !DIEnumerator(name: "OPT_fforward_propagate", value: 388, isUnsigned: true)
!1266 = !DIEnumerator(name: "OPT_ffpe_trap_", value: 389, isUnsigned: true)
!1267 = !DIEnumerator(name: "OPT_ffree_form", value: 390, isUnsigned: true)
!1268 = !DIEnumerator(name: "OPT_ffree_line_length_", value: 391, isUnsigned: true)
!1269 = !DIEnumerator(name: "OPT_ffree_line_length_none", value: 392, isUnsigned: true)
!1270 = !DIEnumerator(name: "OPT_ffreestanding", value: 393, isUnsigned: true)
!1271 = !DIEnumerator(name: "OPT_ffriend_injection", value: 394, isUnsigned: true)
!1272 = !DIEnumerator(name: "OPT_ffunction_cse", value: 395, isUnsigned: true)
!1273 = !DIEnumerator(name: "OPT_ffunction_sections", value: 396, isUnsigned: true)
!1274 = !DIEnumerator(name: "OPT_fgcse", value: 397, isUnsigned: true)
!1275 = !DIEnumerator(name: "OPT_fgcse_after_reload", value: 398, isUnsigned: true)
!1276 = !DIEnumerator(name: "OPT_fgcse_las", value: 399, isUnsigned: true)
!1277 = !DIEnumerator(name: "OPT_fgcse_lm", value: 400, isUnsigned: true)
!1278 = !DIEnumerator(name: "OPT_fgcse_sm", value: 401, isUnsigned: true)
!1279 = !DIEnumerator(name: "OPT_fgnu_keywords", value: 402, isUnsigned: true)
!1280 = !DIEnumerator(name: "OPT_fgnu_runtime", value: 403, isUnsigned: true)
!1281 = !DIEnumerator(name: "OPT_fgnu89_inline", value: 404, isUnsigned: true)
!1282 = !DIEnumerator(name: "OPT_fgraphite", value: 405, isUnsigned: true)
!1283 = !DIEnumerator(name: "OPT_fgraphite_identity", value: 406, isUnsigned: true)
!1284 = !DIEnumerator(name: "OPT_fguess_branch_probability", value: 407, isUnsigned: true)
!1285 = !DIEnumerator(name: "OPT_fguiding_decls", value: 408, isUnsigned: true)
!1286 = !DIEnumerator(name: "OPT_fhandle_exceptions", value: 409, isUnsigned: true)
!1287 = !DIEnumerator(name: "OPT_fhash_synchronization", value: 410, isUnsigned: true)
!1288 = !DIEnumerator(name: "OPT_fhelp", value: 411, isUnsigned: true)
!1289 = !DIEnumerator(name: "OPT_fhelp_", value: 412, isUnsigned: true)
!1290 = !DIEnumerator(name: "OPT_fhonor_std", value: 413, isUnsigned: true)
!1291 = !DIEnumerator(name: "OPT_fhosted", value: 414, isUnsigned: true)
!1292 = !DIEnumerator(name: "OPT_fhuge_objects", value: 415, isUnsigned: true)
!1293 = !DIEnumerator(name: "OPT_fident", value: 416, isUnsigned: true)
!1294 = !DIEnumerator(name: "OPT_fif_conversion", value: 417, isUnsigned: true)
!1295 = !DIEnumerator(name: "OPT_fif_conversion2", value: 418, isUnsigned: true)
!1296 = !DIEnumerator(name: "OPT_fimplement_inlines", value: 419, isUnsigned: true)
!1297 = !DIEnumerator(name: "OPT_fimplicit_inline_templates", value: 420, isUnsigned: true)
!1298 = !DIEnumerator(name: "OPT_fimplicit_none", value: 421, isUnsigned: true)
!1299 = !DIEnumerator(name: "OPT_fimplicit_templates", value: 422, isUnsigned: true)
!1300 = !DIEnumerator(name: "OPT_findirect_classes", value: 423, isUnsigned: true)
!1301 = !DIEnumerator(name: "OPT_findirect_dispatch", value: 424, isUnsigned: true)
!1302 = !DIEnumerator(name: "OPT_findirect_inlining", value: 425, isUnsigned: true)
!1303 = !DIEnumerator(name: "OPT_finhibit_size_directive", value: 426, isUnsigned: true)
!1304 = !DIEnumerator(name: "OPT_finit_character_", value: 427, isUnsigned: true)
!1305 = !DIEnumerator(name: "OPT_finit_integer_", value: 428, isUnsigned: true)
!1306 = !DIEnumerator(name: "OPT_finit_local_zero", value: 429, isUnsigned: true)
!1307 = !DIEnumerator(name: "OPT_finit_logical_", value: 430, isUnsigned: true)
!1308 = !DIEnumerator(name: "OPT_finit_real_", value: 431, isUnsigned: true)
!1309 = !DIEnumerator(name: "OPT_finline", value: 432, isUnsigned: true)
!1310 = !DIEnumerator(name: "OPT_finline_functions", value: 433, isUnsigned: true)
!1311 = !DIEnumerator(name: "OPT_finline_functions_called_once", value: 434, isUnsigned: true)
!1312 = !DIEnumerator(name: "OPT_finline_limit_", value: 435, isUnsigned: true)
!1313 = !DIEnumerator(name: "OPT_finline_limit_eq", value: 436, isUnsigned: true)
!1314 = !DIEnumerator(name: "OPT_finline_small_functions", value: 437, isUnsigned: true)
!1315 = !DIEnumerator(name: "OPT_finput_charset_", value: 438, isUnsigned: true)
!1316 = !DIEnumerator(name: "OPT_finstrument_functions", value: 439, isUnsigned: true)
!1317 = !DIEnumerator(name: "OPT_finstrument_functions_exclude_file_list_", value: 440, isUnsigned: true)
!1318 = !DIEnumerator(name: "OPT_finstrument_functions_exclude_function_list_", value: 441, isUnsigned: true)
!1319 = !DIEnumerator(name: "OPT_fintrinsic_modules_path", value: 442, isUnsigned: true)
!1320 = !DIEnumerator(name: "OPT_fipa_cp", value: 443, isUnsigned: true)
!1321 = !DIEnumerator(name: "OPT_fipa_cp_clone", value: 444, isUnsigned: true)
!1322 = !DIEnumerator(name: "OPT_fipa_matrix_reorg", value: 445, isUnsigned: true)
!1323 = !DIEnumerator(name: "OPT_fipa_pta", value: 446, isUnsigned: true)
!1324 = !DIEnumerator(name: "OPT_fipa_pure_const", value: 447, isUnsigned: true)
!1325 = !DIEnumerator(name: "OPT_fipa_reference", value: 448, isUnsigned: true)
!1326 = !DIEnumerator(name: "OPT_fipa_sra", value: 449, isUnsigned: true)
!1327 = !DIEnumerator(name: "OPT_fipa_struct_reorg", value: 450, isUnsigned: true)
!1328 = !DIEnumerator(name: "OPT_fipa_type_escape", value: 451, isUnsigned: true)
!1329 = !DIEnumerator(name: "OPT_fira_algorithm_", value: 452, isUnsigned: true)
!1330 = !DIEnumerator(name: "OPT_fira_coalesce", value: 453, isUnsigned: true)
!1331 = !DIEnumerator(name: "OPT_fira_loop_pressure", value: 454, isUnsigned: true)
!1332 = !DIEnumerator(name: "OPT_fira_region_", value: 455, isUnsigned: true)
!1333 = !DIEnumerator(name: "OPT_fira_share_save_slots", value: 456, isUnsigned: true)
!1334 = !DIEnumerator(name: "OPT_fira_share_spill_slots", value: 457, isUnsigned: true)
!1335 = !DIEnumerator(name: "OPT_fira_verbose_", value: 458, isUnsigned: true)
!1336 = !DIEnumerator(name: "OPT_fivopts", value: 459, isUnsigned: true)
!1337 = !DIEnumerator(name: "OPT_fjni", value: 460, isUnsigned: true)
!1338 = !DIEnumerator(name: "OPT_fjump_tables", value: 461, isUnsigned: true)
!1339 = !DIEnumerator(name: "OPT_fkeep_inline_functions", value: 462, isUnsigned: true)
!1340 = !DIEnumerator(name: "OPT_fkeep_static_consts", value: 463, isUnsigned: true)
!1341 = !DIEnumerator(name: "OPT_flabels_ok", value: 464, isUnsigned: true)
!1342 = !DIEnumerator(name: "OPT_flax_vector_conversions", value: 465, isUnsigned: true)
!1343 = !DIEnumerator(name: "OPT_fleading_underscore", value: 466, isUnsigned: true)
!1344 = !DIEnumerator(name: "OPT_floop_block", value: 467, isUnsigned: true)
!1345 = !DIEnumerator(name: "OPT_floop_interchange", value: 468, isUnsigned: true)
!1346 = !DIEnumerator(name: "OPT_floop_optimize", value: 469, isUnsigned: true)
!1347 = !DIEnumerator(name: "OPT_floop_parallelize_all", value: 470, isUnsigned: true)
!1348 = !DIEnumerator(name: "OPT_floop_strip_mine", value: 471, isUnsigned: true)
!1349 = !DIEnumerator(name: "OPT_flto", value: 472, isUnsigned: true)
!1350 = !DIEnumerator(name: "OPT_flto_compression_level_", value: 473, isUnsigned: true)
!1351 = !DIEnumerator(name: "OPT_flto_report", value: 474, isUnsigned: true)
!1352 = !DIEnumerator(name: "OPT_fltrans", value: 475, isUnsigned: true)
!1353 = !DIEnumerator(name: "OPT_fltrans_output_list_", value: 476, isUnsigned: true)
!1354 = !DIEnumerator(name: "OPT_fmath_errno", value: 477, isUnsigned: true)
!1355 = !DIEnumerator(name: "OPT_fmax_array_constructor_", value: 478, isUnsigned: true)
!1356 = !DIEnumerator(name: "OPT_fmax_errors_", value: 479, isUnsigned: true)
!1357 = !DIEnumerator(name: "OPT_fmax_identifier_length_", value: 480, isUnsigned: true)
!1358 = !DIEnumerator(name: "OPT_fmax_stack_var_size_", value: 481, isUnsigned: true)
!1359 = !DIEnumerator(name: "OPT_fmax_subrecord_length_", value: 482, isUnsigned: true)
!1360 = !DIEnumerator(name: "OPT_fmem_report", value: 483, isUnsigned: true)
!1361 = !DIEnumerator(name: "OPT_fmerge_all_constants", value: 484, isUnsigned: true)
!1362 = !DIEnumerator(name: "OPT_fmerge_constants", value: 485, isUnsigned: true)
!1363 = !DIEnumerator(name: "OPT_fmerge_debug_strings", value: 486, isUnsigned: true)
!1364 = !DIEnumerator(name: "OPT_fmessage_length_", value: 487, isUnsigned: true)
!1365 = !DIEnumerator(name: "OPT_fmodule_private", value: 488, isUnsigned: true)
!1366 = !DIEnumerator(name: "OPT_fmodulo_sched", value: 489, isUnsigned: true)
!1367 = !DIEnumerator(name: "OPT_fmodulo_sched_allow_regmoves", value: 490, isUnsigned: true)
!1368 = !DIEnumerator(name: "OPT_fmove_loop_invariants", value: 491, isUnsigned: true)
!1369 = !DIEnumerator(name: "OPT_fms_extensions", value: 492, isUnsigned: true)
!1370 = !DIEnumerator(name: "OPT_fmudflap", value: 493, isUnsigned: true)
!1371 = !DIEnumerator(name: "OPT_fmudflapir", value: 494, isUnsigned: true)
!1372 = !DIEnumerator(name: "OPT_fmudflapth", value: 495, isUnsigned: true)
!1373 = !DIEnumerator(name: "OPT_fname_mangling_version_", value: 496, isUnsigned: true)
!1374 = !DIEnumerator(name: "OPT_fnew_abi", value: 497, isUnsigned: true)
!1375 = !DIEnumerator(name: "OPT_fnext_runtime", value: 498, isUnsigned: true)
!1376 = !DIEnumerator(name: "OPT_fnil_receivers", value: 499, isUnsigned: true)
!1377 = !DIEnumerator(name: "OPT_fnon_call_exceptions", value: 500, isUnsigned: true)
!1378 = !DIEnumerator(name: "OPT_fnonansi_builtins", value: 501, isUnsigned: true)
!1379 = !DIEnumerator(name: "OPT_fnonnull_objects", value: 502, isUnsigned: true)
!1380 = !DIEnumerator(name: "OPT_fobjc_call_cxx_cdtors", value: 503, isUnsigned: true)
!1381 = !DIEnumerator(name: "OPT_fobjc_direct_dispatch", value: 504, isUnsigned: true)
!1382 = !DIEnumerator(name: "OPT_fobjc_exceptions", value: 505, isUnsigned: true)
!1383 = !DIEnumerator(name: "OPT_fobjc_gc", value: 506, isUnsigned: true)
!1384 = !DIEnumerator(name: "OPT_fobjc_sjlj_exceptions", value: 507, isUnsigned: true)
!1385 = !DIEnumerator(name: "OPT_fomit_frame_pointer", value: 508, isUnsigned: true)
!1386 = !DIEnumerator(name: "OPT_fopenmp", value: 509, isUnsigned: true)
!1387 = !DIEnumerator(name: "OPT_foperator_names", value: 510, isUnsigned: true)
!1388 = !DIEnumerator(name: "OPT_foptimize_register_move", value: 511, isUnsigned: true)
!1389 = !DIEnumerator(name: "OPT_foptimize_sibling_calls", value: 512, isUnsigned: true)
!1390 = !DIEnumerator(name: "OPT_foptimize_static_class_initialization", value: 513, isUnsigned: true)
!1391 = !DIEnumerator(name: "OPT_foptional_diags", value: 514, isUnsigned: true)
!1392 = !DIEnumerator(name: "OPT_foutput_class_dir_", value: 515, isUnsigned: true)
!1393 = !DIEnumerator(name: "OPT_fpack_derived", value: 516, isUnsigned: true)
!1394 = !DIEnumerator(name: "OPT_fpack_struct", value: 517, isUnsigned: true)
!1395 = !DIEnumerator(name: "OPT_fpack_struct_", value: 518, isUnsigned: true)
!1396 = !DIEnumerator(name: "OPT_fpcc_struct_return", value: 519, isUnsigned: true)
!1397 = !DIEnumerator(name: "OPT_fpch_deps", value: 520, isUnsigned: true)
!1398 = !DIEnumerator(name: "OPT_fpch_preprocess", value: 521, isUnsigned: true)
!1399 = !DIEnumerator(name: "OPT_fpeel_loops", value: 522, isUnsigned: true)
!1400 = !DIEnumerator(name: "OPT_fpeephole", value: 523, isUnsigned: true)
!1401 = !DIEnumerator(name: "OPT_fpeephole2", value: 524, isUnsigned: true)
!1402 = !DIEnumerator(name: "OPT_fpermissive", value: 525, isUnsigned: true)
!1403 = !DIEnumerator(name: "OPT_fpic", value: 526, isUnsigned: true)
!1404 = !DIEnumerator(name: "OPT_fpie", value: 527, isUnsigned: true)
!1405 = !DIEnumerator(name: "OPT_fplugin_arg_", value: 528, isUnsigned: true)
!1406 = !DIEnumerator(name: "OPT_fplugin_", value: 529, isUnsigned: true)
!1407 = !DIEnumerator(name: "OPT_fpost_ipa_mem_report", value: 530, isUnsigned: true)
!1408 = !DIEnumerator(name: "OPT_fpre_ipa_mem_report", value: 531, isUnsigned: true)
!1409 = !DIEnumerator(name: "OPT_fpredictive_commoning", value: 532, isUnsigned: true)
!1410 = !DIEnumerator(name: "OPT_fprefetch_loop_arrays", value: 533, isUnsigned: true)
!1411 = !DIEnumerator(name: "OPT_fpreprocessed", value: 534, isUnsigned: true)
!1412 = !DIEnumerator(name: "OPT_fpretty_templates", value: 535, isUnsigned: true)
!1413 = !DIEnumerator(name: "OPT_fprofile", value: 536, isUnsigned: true)
!1414 = !DIEnumerator(name: "OPT_fprofile_arcs", value: 537, isUnsigned: true)
!1415 = !DIEnumerator(name: "OPT_fprofile_correction", value: 538, isUnsigned: true)
!1416 = !DIEnumerator(name: "OPT_fprofile_dir_", value: 539, isUnsigned: true)
!1417 = !DIEnumerator(name: "OPT_fprofile_generate", value: 540, isUnsigned: true)
!1418 = !DIEnumerator(name: "OPT_fprofile_generate_", value: 541, isUnsigned: true)
!1419 = !DIEnumerator(name: "OPT_fprofile_use", value: 542, isUnsigned: true)
!1420 = !DIEnumerator(name: "OPT_fprofile_use_", value: 543, isUnsigned: true)
!1421 = !DIEnumerator(name: "OPT_fprofile_values", value: 544, isUnsigned: true)
!1422 = !DIEnumerator(name: "OPT_fprotect_parens", value: 545, isUnsigned: true)
!1423 = !DIEnumerator(name: "OPT_frandom_seed", value: 546, isUnsigned: true)
!1424 = !DIEnumerator(name: "OPT_frandom_seed_", value: 547, isUnsigned: true)
!1425 = !DIEnumerator(name: "OPT_frange_check", value: 548, isUnsigned: true)
!1426 = !DIEnumerator(name: "OPT_freciprocal_math", value: 549, isUnsigned: true)
!1427 = !DIEnumerator(name: "OPT_frecord_gcc_switches", value: 550, isUnsigned: true)
!1428 = !DIEnumerator(name: "OPT_frecord_marker_4", value: 551, isUnsigned: true)
!1429 = !DIEnumerator(name: "OPT_frecord_marker_8", value: 552, isUnsigned: true)
!1430 = !DIEnumerator(name: "OPT_frecursive", value: 553, isUnsigned: true)
!1431 = !DIEnumerator(name: "OPT_freduced_reflection", value: 554, isUnsigned: true)
!1432 = !DIEnumerator(name: "OPT_freg_struct_return", value: 555, isUnsigned: true)
!1433 = !DIEnumerator(name: "OPT_fregmove", value: 556, isUnsigned: true)
!1434 = !DIEnumerator(name: "OPT_frename_registers", value: 557, isUnsigned: true)
!1435 = !DIEnumerator(name: "OPT_freorder_blocks", value: 558, isUnsigned: true)
!1436 = !DIEnumerator(name: "OPT_freorder_blocks_and_partition", value: 559, isUnsigned: true)
!1437 = !DIEnumerator(name: "OPT_freorder_functions", value: 560, isUnsigned: true)
!1438 = !DIEnumerator(name: "OPT_frepack_arrays", value: 561, isUnsigned: true)
!1439 = !DIEnumerator(name: "OPT_freplace_objc_classes", value: 562, isUnsigned: true)
!1440 = !DIEnumerator(name: "OPT_frepo", value: 563, isUnsigned: true)
!1441 = !DIEnumerator(name: "OPT_frerun_cse_after_loop", value: 564, isUnsigned: true)
!1442 = !DIEnumerator(name: "OPT_frerun_loop_opt", value: 565, isUnsigned: true)
!1443 = !DIEnumerator(name: "OPT_freschedule_modulo_scheduled_loops", value: 566, isUnsigned: true)
!1444 = !DIEnumerator(name: "OPT_fresolution", value: 567, isUnsigned: true)
!1445 = !DIEnumerator(name: "OPT_frounding_math", value: 568, isUnsigned: true)
!1446 = !DIEnumerator(name: "OPT_frtti", value: 569, isUnsigned: true)
!1447 = !DIEnumerator(name: "OPT_fsaw_java_file", value: 570, isUnsigned: true)
!1448 = !DIEnumerator(name: "OPT_fsched_critical_path_heuristic", value: 571, isUnsigned: true)
!1449 = !DIEnumerator(name: "OPT_fsched_dep_count_heuristic", value: 572, isUnsigned: true)
!1450 = !DIEnumerator(name: "OPT_fsched_group_heuristic", value: 573, isUnsigned: true)
!1451 = !DIEnumerator(name: "OPT_fsched_interblock", value: 574, isUnsigned: true)
!1452 = !DIEnumerator(name: "OPT_fsched_last_insn_heuristic", value: 575, isUnsigned: true)
!1453 = !DIEnumerator(name: "OPT_fsched_pressure", value: 576, isUnsigned: true)
!1454 = !DIEnumerator(name: "OPT_fsched_rank_heuristic", value: 577, isUnsigned: true)
!1455 = !DIEnumerator(name: "OPT_fsched_spec", value: 578, isUnsigned: true)
!1456 = !DIEnumerator(name: "OPT_fsched_spec_insn_heuristic", value: 579, isUnsigned: true)
!1457 = !DIEnumerator(name: "OPT_fsched_spec_load", value: 580, isUnsigned: true)
!1458 = !DIEnumerator(name: "OPT_fsched_spec_load_dangerous", value: 581, isUnsigned: true)
!1459 = !DIEnumerator(name: "OPT_fsched_stalled_insns", value: 582, isUnsigned: true)
!1460 = !DIEnumerator(name: "OPT_fsched_stalled_insns_dep", value: 583, isUnsigned: true)
!1461 = !DIEnumerator(name: "OPT_fsched_stalled_insns_dep_", value: 584, isUnsigned: true)
!1462 = !DIEnumerator(name: "OPT_fsched_stalled_insns_", value: 585, isUnsigned: true)
!1463 = !DIEnumerator(name: "OPT_fsched_verbose_", value: 586, isUnsigned: true)
!1464 = !DIEnumerator(name: "OPT_fsched2_use_superblocks", value: 587, isUnsigned: true)
!1465 = !DIEnumerator(name: "OPT_fsched2_use_traces", value: 588, isUnsigned: true)
!1466 = !DIEnumerator(name: "OPT_fschedule_insns", value: 589, isUnsigned: true)
!1467 = !DIEnumerator(name: "OPT_fschedule_insns2", value: 590, isUnsigned: true)
!1468 = !DIEnumerator(name: "OPT_fsecond_underscore", value: 591, isUnsigned: true)
!1469 = !DIEnumerator(name: "OPT_fsection_anchors", value: 592, isUnsigned: true)
!1470 = !DIEnumerator(name: "OPT_fsee", value: 593, isUnsigned: true)
!1471 = !DIEnumerator(name: "OPT_fsel_sched_pipelining", value: 594, isUnsigned: true)
!1472 = !DIEnumerator(name: "OPT_fsel_sched_pipelining_outer_loops", value: 595, isUnsigned: true)
!1473 = !DIEnumerator(name: "OPT_fsel_sched_reschedule_pipelined", value: 596, isUnsigned: true)
!1474 = !DIEnumerator(name: "OPT_fselective_scheduling", value: 597, isUnsigned: true)
!1475 = !DIEnumerator(name: "OPT_fselective_scheduling2", value: 598, isUnsigned: true)
!1476 = !DIEnumerator(name: "OPT_fshort_double", value: 599, isUnsigned: true)
!1477 = !DIEnumerator(name: "OPT_fshort_enums", value: 600, isUnsigned: true)
!1478 = !DIEnumerator(name: "OPT_fshort_wchar", value: 601, isUnsigned: true)
!1479 = !DIEnumerator(name: "OPT_fshow_column", value: 602, isUnsigned: true)
!1480 = !DIEnumerator(name: "OPT_fsign_zero", value: 603, isUnsigned: true)
!1481 = !DIEnumerator(name: "OPT_fsignaling_nans", value: 604, isUnsigned: true)
!1482 = !DIEnumerator(name: "OPT_fsigned_bitfields", value: 605, isUnsigned: true)
!1483 = !DIEnumerator(name: "OPT_fsigned_char", value: 606, isUnsigned: true)
!1484 = !DIEnumerator(name: "OPT_fsigned_zeros", value: 607, isUnsigned: true)
!1485 = !DIEnumerator(name: "OPT_fsingle_precision_constant", value: 608, isUnsigned: true)
!1486 = !DIEnumerator(name: "OPT_fsource_filename_", value: 609, isUnsigned: true)
!1487 = !DIEnumerator(name: "OPT_fsource_", value: 610, isUnsigned: true)
!1488 = !DIEnumerator(name: "OPT_fsplit_ivs_in_unroller", value: 611, isUnsigned: true)
!1489 = !DIEnumerator(name: "OPT_fsplit_wide_types", value: 612, isUnsigned: true)
!1490 = !DIEnumerator(name: "OPT_fsquangle", value: 613, isUnsigned: true)
!1491 = !DIEnumerator(name: "OPT_fstack_check", value: 614, isUnsigned: true)
!1492 = !DIEnumerator(name: "OPT_fstack_check_", value: 615, isUnsigned: true)
!1493 = !DIEnumerator(name: "OPT_fstack_limit", value: 616, isUnsigned: true)
!1494 = !DIEnumerator(name: "OPT_fstack_limit_register_", value: 617, isUnsigned: true)
!1495 = !DIEnumerator(name: "OPT_fstack_limit_symbol_", value: 618, isUnsigned: true)
!1496 = !DIEnumerator(name: "OPT_fstack_protector", value: 619, isUnsigned: true)
!1497 = !DIEnumerator(name: "OPT_fstack_protector_all", value: 620, isUnsigned: true)
!1498 = !DIEnumerator(name: "OPT_fstats", value: 621, isUnsigned: true)
!1499 = !DIEnumerator(name: "OPT_fstore_check", value: 622, isUnsigned: true)
!1500 = !DIEnumerator(name: "OPT_fstrength_reduce", value: 623, isUnsigned: true)
!1501 = !DIEnumerator(name: "OPT_fstrict_aliasing", value: 624, isUnsigned: true)
!1502 = !DIEnumerator(name: "OPT_fstrict_overflow", value: 625, isUnsigned: true)
!1503 = !DIEnumerator(name: "OPT_fstrict_prototype", value: 626, isUnsigned: true)
!1504 = !DIEnumerator(name: "OPT_fsyntax_only", value: 627, isUnsigned: true)
!1505 = !DIEnumerator(name: "OPT_ftabstop_", value: 628, isUnsigned: true)
!1506 = !DIEnumerator(name: "OPT_ftarget_help", value: 629, isUnsigned: true)
!1507 = !DIEnumerator(name: "OPT_ftarget_", value: 630, isUnsigned: true)
!1508 = !DIEnumerator(name: "OPT_ftemplate_depth_", value: 631, isUnsigned: true)
!1509 = !DIEnumerator(name: "OPT_ftemplate_depth_eq", value: 632, isUnsigned: true)
!1510 = !DIEnumerator(name: "OPT_ftest_coverage", value: 633, isUnsigned: true)
!1511 = !DIEnumerator(name: "OPT_fthis_is_variable", value: 634, isUnsigned: true)
!1512 = !DIEnumerator(name: "OPT_fthread_jumps", value: 635, isUnsigned: true)
!1513 = !DIEnumerator(name: "OPT_fthreadsafe_statics", value: 636, isUnsigned: true)
!1514 = !DIEnumerator(name: "OPT_ftime_report", value: 637, isUnsigned: true)
!1515 = !DIEnumerator(name: "OPT_ftls_model_", value: 638, isUnsigned: true)
!1516 = !DIEnumerator(name: "OPT_ftoplevel_reorder", value: 639, isUnsigned: true)
!1517 = !DIEnumerator(name: "OPT_ftracer", value: 640, isUnsigned: true)
!1518 = !DIEnumerator(name: "OPT_ftrapping_math", value: 641, isUnsigned: true)
!1519 = !DIEnumerator(name: "OPT_ftrapv", value: 642, isUnsigned: true)
!1520 = !DIEnumerator(name: "OPT_ftree_builtin_call_dce", value: 643, isUnsigned: true)
!1521 = !DIEnumerator(name: "OPT_ftree_ccp", value: 644, isUnsigned: true)
!1522 = !DIEnumerator(name: "OPT_ftree_ch", value: 645, isUnsigned: true)
!1523 = !DIEnumerator(name: "OPT_ftree_copy_prop", value: 646, isUnsigned: true)
!1524 = !DIEnumerator(name: "OPT_ftree_copyrename", value: 647, isUnsigned: true)
!1525 = !DIEnumerator(name: "OPT_ftree_cselim", value: 648, isUnsigned: true)
!1526 = !DIEnumerator(name: "OPT_ftree_dce", value: 649, isUnsigned: true)
!1527 = !DIEnumerator(name: "OPT_ftree_dominator_opts", value: 650, isUnsigned: true)
!1528 = !DIEnumerator(name: "OPT_ftree_dse", value: 651, isUnsigned: true)
!1529 = !DIEnumerator(name: "OPT_ftree_forwprop", value: 652, isUnsigned: true)
!1530 = !DIEnumerator(name: "OPT_ftree_fre", value: 653, isUnsigned: true)
!1531 = !DIEnumerator(name: "OPT_ftree_loop_distribution", value: 654, isUnsigned: true)
!1532 = !DIEnumerator(name: "OPT_ftree_loop_im", value: 655, isUnsigned: true)
!1533 = !DIEnumerator(name: "OPT_ftree_loop_ivcanon", value: 656, isUnsigned: true)
!1534 = !DIEnumerator(name: "OPT_ftree_loop_linear", value: 657, isUnsigned: true)
!1535 = !DIEnumerator(name: "OPT_ftree_loop_optimize", value: 658, isUnsigned: true)
!1536 = !DIEnumerator(name: "OPT_ftree_lrs", value: 659, isUnsigned: true)
!1537 = !DIEnumerator(name: "OPT_ftree_parallelize_loops_", value: 660, isUnsigned: true)
!1538 = !DIEnumerator(name: "OPT_ftree_phiprop", value: 661, isUnsigned: true)
!1539 = !DIEnumerator(name: "OPT_ftree_pre", value: 662, isUnsigned: true)
!1540 = !DIEnumerator(name: "OPT_ftree_pta", value: 663, isUnsigned: true)
!1541 = !DIEnumerator(name: "OPT_ftree_reassoc", value: 664, isUnsigned: true)
!1542 = !DIEnumerator(name: "OPT_ftree_salias", value: 665, isUnsigned: true)
!1543 = !DIEnumerator(name: "OPT_ftree_scev_cprop", value: 666, isUnsigned: true)
!1544 = !DIEnumerator(name: "OPT_ftree_sink", value: 667, isUnsigned: true)
!1545 = !DIEnumerator(name: "OPT_ftree_slp_vectorize", value: 668, isUnsigned: true)
!1546 = !DIEnumerator(name: "OPT_ftree_sra", value: 669, isUnsigned: true)
!1547 = !DIEnumerator(name: "OPT_ftree_store_ccp", value: 670, isUnsigned: true)
!1548 = !DIEnumerator(name: "OPT_ftree_store_copy_prop", value: 671, isUnsigned: true)
!1549 = !DIEnumerator(name: "OPT_ftree_switch_conversion", value: 672, isUnsigned: true)
!1550 = !DIEnumerator(name: "OPT_ftree_ter", value: 673, isUnsigned: true)
!1551 = !DIEnumerator(name: "OPT_ftree_vect_loop_version", value: 674, isUnsigned: true)
!1552 = !DIEnumerator(name: "OPT_ftree_vectorize", value: 675, isUnsigned: true)
!1553 = !DIEnumerator(name: "OPT_ftree_vectorizer_verbose_", value: 676, isUnsigned: true)
!1554 = !DIEnumerator(name: "OPT_ftree_vrp", value: 677, isUnsigned: true)
!1555 = !DIEnumerator(name: "OPT_funderscoring", value: 678, isUnsigned: true)
!1556 = !DIEnumerator(name: "OPT_funit_at_a_time", value: 679, isUnsigned: true)
!1557 = !DIEnumerator(name: "OPT_funroll_all_loops", value: 680, isUnsigned: true)
!1558 = !DIEnumerator(name: "OPT_funroll_loops", value: 681, isUnsigned: true)
!1559 = !DIEnumerator(name: "OPT_funsafe_loop_optimizations", value: 682, isUnsigned: true)
!1560 = !DIEnumerator(name: "OPT_funsafe_math_optimizations", value: 683, isUnsigned: true)
!1561 = !DIEnumerator(name: "OPT_funsigned_bitfields", value: 684, isUnsigned: true)
!1562 = !DIEnumerator(name: "OPT_funsigned_char", value: 685, isUnsigned: true)
!1563 = !DIEnumerator(name: "OPT_funswitch_loops", value: 686, isUnsigned: true)
!1564 = !DIEnumerator(name: "OPT_funwind_tables", value: 687, isUnsigned: true)
!1565 = !DIEnumerator(name: "OPT_fuse_atomic_builtins", value: 688, isUnsigned: true)
!1566 = !DIEnumerator(name: "OPT_fuse_boehm_gc", value: 689, isUnsigned: true)
!1567 = !DIEnumerator(name: "OPT_fuse_cxa_atexit", value: 690, isUnsigned: true)
!1568 = !DIEnumerator(name: "OPT_fuse_cxa_get_exception_ptr", value: 691, isUnsigned: true)
!1569 = !DIEnumerator(name: "OPT_fuse_divide_subroutine", value: 692, isUnsigned: true)
!1570 = !DIEnumerator(name: "OPT_fuse_linker_plugin", value: 693, isUnsigned: true)
!1571 = !DIEnumerator(name: "OPT_fvar_tracking", value: 694, isUnsigned: true)
!1572 = !DIEnumerator(name: "OPT_fvar_tracking_assignments", value: 695, isUnsigned: true)
!1573 = !DIEnumerator(name: "OPT_fvar_tracking_assignments_toggle", value: 696, isUnsigned: true)
!1574 = !DIEnumerator(name: "OPT_fvar_tracking_uninit", value: 697, isUnsigned: true)
!1575 = !DIEnumerator(name: "OPT_fvariable_expansion_in_unroller", value: 698, isUnsigned: true)
!1576 = !DIEnumerator(name: "OPT_fvect_cost_model", value: 699, isUnsigned: true)
!1577 = !DIEnumerator(name: "OPT_fverbose_asm", value: 700, isUnsigned: true)
!1578 = !DIEnumerator(name: "OPT_fversion", value: 701, isUnsigned: true)
!1579 = !DIEnumerator(name: "OPT_fvisibility_inlines_hidden", value: 702, isUnsigned: true)
!1580 = !DIEnumerator(name: "OPT_fvisibility_ms_compat", value: 703, isUnsigned: true)
!1581 = !DIEnumerator(name: "OPT_fvisibility_", value: 704, isUnsigned: true)
!1582 = !DIEnumerator(name: "OPT_fvpt", value: 705, isUnsigned: true)
!1583 = !DIEnumerator(name: "OPT_fvtable_gc", value: 706, isUnsigned: true)
!1584 = !DIEnumerator(name: "OPT_fvtable_thunks", value: 707, isUnsigned: true)
!1585 = !DIEnumerator(name: "OPT_fweak", value: 708, isUnsigned: true)
!1586 = !DIEnumerator(name: "OPT_fweb", value: 709, isUnsigned: true)
!1587 = !DIEnumerator(name: "OPT_fwhole_file", value: 710, isUnsigned: true)
!1588 = !DIEnumerator(name: "OPT_fwhole_program", value: 711, isUnsigned: true)
!1589 = !DIEnumerator(name: "OPT_fwhopr", value: 712, isUnsigned: true)
!1590 = !DIEnumerator(name: "OPT_fwide_exec_charset_", value: 713, isUnsigned: true)
!1591 = !DIEnumerator(name: "OPT_fworking_directory", value: 714, isUnsigned: true)
!1592 = !DIEnumerator(name: "OPT_fwpa", value: 715, isUnsigned: true)
!1593 = !DIEnumerator(name: "OPT_fwrapv", value: 716, isUnsigned: true)
!1594 = !DIEnumerator(name: "OPT_fxref", value: 717, isUnsigned: true)
!1595 = !DIEnumerator(name: "OPT_fzero_initialized_in_bss", value: 718, isUnsigned: true)
!1596 = !DIEnumerator(name: "OPT_fzero_link", value: 719, isUnsigned: true)
!1597 = !DIEnumerator(name: "OPT_g", value: 720, isUnsigned: true)
!1598 = !DIEnumerator(name: "OPT_gant", value: 721, isUnsigned: true)
!1599 = !DIEnumerator(name: "OPT_gcoff", value: 722, isUnsigned: true)
!1600 = !DIEnumerator(name: "OPT_gdwarfplus", value: 723, isUnsigned: true)
!1601 = !DIEnumerator(name: "OPT_gdwarf_", value: 724, isUnsigned: true)
!1602 = !DIEnumerator(name: "OPT_gen_decls", value: 725, isUnsigned: true)
!1603 = !DIEnumerator(name: "OPT_ggdb", value: 726, isUnsigned: true)
!1604 = !DIEnumerator(name: "OPT_gnat", value: 727, isUnsigned: true)
!1605 = !DIEnumerator(name: "OPT_gnatO", value: 728, isUnsigned: true)
!1606 = !DIEnumerator(name: "OPT_gno_strict_dwarf", value: 729, isUnsigned: true)
!1607 = !DIEnumerator(name: "OPT_gstabs", value: 730, isUnsigned: true)
!1608 = !DIEnumerator(name: "OPT_gstabs_", value: 731, isUnsigned: true)
!1609 = !DIEnumerator(name: "OPT_gstrict_dwarf", value: 732, isUnsigned: true)
!1610 = !DIEnumerator(name: "OPT_gtoggle", value: 733, isUnsigned: true)
!1611 = !DIEnumerator(name: "OPT_gvms", value: 734, isUnsigned: true)
!1612 = !DIEnumerator(name: "OPT_gxcoff", value: 735, isUnsigned: true)
!1613 = !DIEnumerator(name: "OPT_gxcoff_", value: 736, isUnsigned: true)
!1614 = !DIEnumerator(name: "OPT_idirafter", value: 737, isUnsigned: true)
!1615 = !DIEnumerator(name: "OPT_imacros", value: 738, isUnsigned: true)
!1616 = !DIEnumerator(name: "OPT_imultilib", value: 739, isUnsigned: true)
!1617 = !DIEnumerator(name: "OPT_include", value: 740, isUnsigned: true)
!1618 = !DIEnumerator(name: "OPT_iprefix", value: 741, isUnsigned: true)
!1619 = !DIEnumerator(name: "OPT_iquote", value: 742, isUnsigned: true)
!1620 = !DIEnumerator(name: "OPT_isysroot", value: 743, isUnsigned: true)
!1621 = !DIEnumerator(name: "OPT_isystem", value: 744, isUnsigned: true)
!1622 = !DIEnumerator(name: "OPT_iwithprefix", value: 745, isUnsigned: true)
!1623 = !DIEnumerator(name: "OPT_iwithprefixbefore", value: 746, isUnsigned: true)
!1624 = !DIEnumerator(name: "OPT_lang_asm", value: 747, isUnsigned: true)
!1625 = !DIEnumerator(name: "OPT_lang_objc", value: 748, isUnsigned: true)
!1626 = !DIEnumerator(name: "OPT_m128bit_long_double", value: 749, isUnsigned: true)
!1627 = !DIEnumerator(name: "OPT_m32", value: 750, isUnsigned: true)
!1628 = !DIEnumerator(name: "OPT_m3dnow", value: 751, isUnsigned: true)
!1629 = !DIEnumerator(name: "OPT_m3dnowa", value: 752, isUnsigned: true)
!1630 = !DIEnumerator(name: "OPT_m64", value: 753, isUnsigned: true)
!1631 = !DIEnumerator(name: "OPT_m80387", value: 754, isUnsigned: true)
!1632 = !DIEnumerator(name: "OPT_m96bit_long_double", value: 755, isUnsigned: true)
!1633 = !DIEnumerator(name: "OPT_mabi_", value: 756, isUnsigned: true)
!1634 = !DIEnumerator(name: "OPT_mabm", value: 757, isUnsigned: true)
!1635 = !DIEnumerator(name: "OPT_maccumulate_outgoing_args", value: 758, isUnsigned: true)
!1636 = !DIEnumerator(name: "OPT_maes", value: 759, isUnsigned: true)
!1637 = !DIEnumerator(name: "OPT_malign_double", value: 760, isUnsigned: true)
!1638 = !DIEnumerator(name: "OPT_malign_functions_", value: 761, isUnsigned: true)
!1639 = !DIEnumerator(name: "OPT_malign_jumps_", value: 762, isUnsigned: true)
!1640 = !DIEnumerator(name: "OPT_malign_loops_", value: 763, isUnsigned: true)
!1641 = !DIEnumerator(name: "OPT_malign_stringops", value: 764, isUnsigned: true)
!1642 = !DIEnumerator(name: "OPT_march_", value: 765, isUnsigned: true)
!1643 = !DIEnumerator(name: "OPT_masm_", value: 766, isUnsigned: true)
!1644 = !DIEnumerator(name: "OPT_mavx", value: 767, isUnsigned: true)
!1645 = !DIEnumerator(name: "OPT_mbranch_cost_", value: 768, isUnsigned: true)
!1646 = !DIEnumerator(name: "OPT_mcld", value: 769, isUnsigned: true)
!1647 = !DIEnumerator(name: "OPT_mcmodel_", value: 770, isUnsigned: true)
!1648 = !DIEnumerator(name: "OPT_mcrc32", value: 771, isUnsigned: true)
!1649 = !DIEnumerator(name: "OPT_mcx16", value: 772, isUnsigned: true)
!1650 = !DIEnumerator(name: "OPT_mfancy_math_387", value: 773, isUnsigned: true)
!1651 = !DIEnumerator(name: "OPT_mfma", value: 774, isUnsigned: true)
!1652 = !DIEnumerator(name: "OPT_mfma4", value: 775, isUnsigned: true)
!1653 = !DIEnumerator(name: "OPT_mforce_drap", value: 776, isUnsigned: true)
!1654 = !DIEnumerator(name: "OPT_mfp_ret_in_387", value: 777, isUnsigned: true)
!1655 = !DIEnumerator(name: "OPT_mfpmath_", value: 778, isUnsigned: true)
!1656 = !DIEnumerator(name: "OPT_mfused_madd", value: 779, isUnsigned: true)
!1657 = !DIEnumerator(name: "OPT_mglibc", value: 780, isUnsigned: true)
!1658 = !DIEnumerator(name: "OPT_mhard_float", value: 781, isUnsigned: true)
!1659 = !DIEnumerator(name: "OPT_mieee_fp", value: 782, isUnsigned: true)
!1660 = !DIEnumerator(name: "OPT_mincoming_stack_boundary_", value: 783, isUnsigned: true)
!1661 = !DIEnumerator(name: "OPT_minline_all_stringops", value: 784, isUnsigned: true)
!1662 = !DIEnumerator(name: "OPT_minline_stringops_dynamically", value: 785, isUnsigned: true)
!1663 = !DIEnumerator(name: "OPT_mintel_syntax", value: 786, isUnsigned: true)
!1664 = !DIEnumerator(name: "OPT_mlarge_data_threshold_", value: 787, isUnsigned: true)
!1665 = !DIEnumerator(name: "OPT_mlwp", value: 788, isUnsigned: true)
!1666 = !DIEnumerator(name: "OPT_mmmx", value: 789, isUnsigned: true)
!1667 = !DIEnumerator(name: "OPT_mmovbe", value: 790, isUnsigned: true)
!1668 = !DIEnumerator(name: "OPT_mms_bitfields", value: 791, isUnsigned: true)
!1669 = !DIEnumerator(name: "OPT_mno_align_stringops", value: 792, isUnsigned: true)
!1670 = !DIEnumerator(name: "OPT_mno_fancy_math_387", value: 793, isUnsigned: true)
!1671 = !DIEnumerator(name: "OPT_mno_push_args", value: 794, isUnsigned: true)
!1672 = !DIEnumerator(name: "OPT_mno_red_zone", value: 795, isUnsigned: true)
!1673 = !DIEnumerator(name: "OPT_mno_sse4", value: 796, isUnsigned: true)
!1674 = !DIEnumerator(name: "OPT_momit_leaf_frame_pointer", value: 797, isUnsigned: true)
!1675 = !DIEnumerator(name: "OPT_mpc", value: 798, isUnsigned: true)
!1676 = !DIEnumerator(name: "OPT_mpclmul", value: 799, isUnsigned: true)
!1677 = !DIEnumerator(name: "OPT_mpopcnt", value: 800, isUnsigned: true)
!1678 = !DIEnumerator(name: "OPT_mpreferred_stack_boundary_", value: 801, isUnsigned: true)
!1679 = !DIEnumerator(name: "OPT_mpush_args", value: 802, isUnsigned: true)
!1680 = !DIEnumerator(name: "OPT_mrecip", value: 803, isUnsigned: true)
!1681 = !DIEnumerator(name: "OPT_mred_zone", value: 804, isUnsigned: true)
!1682 = !DIEnumerator(name: "OPT_mregparm_", value: 805, isUnsigned: true)
!1683 = !DIEnumerator(name: "OPT_mrtd", value: 806, isUnsigned: true)
!1684 = !DIEnumerator(name: "OPT_msahf", value: 807, isUnsigned: true)
!1685 = !DIEnumerator(name: "OPT_msoft_float", value: 808, isUnsigned: true)
!1686 = !DIEnumerator(name: "OPT_msse", value: 809, isUnsigned: true)
!1687 = !DIEnumerator(name: "OPT_msse2", value: 810, isUnsigned: true)
!1688 = !DIEnumerator(name: "OPT_msse2avx", value: 811, isUnsigned: true)
!1689 = !DIEnumerator(name: "OPT_msse3", value: 812, isUnsigned: true)
!1690 = !DIEnumerator(name: "OPT_msse4", value: 813, isUnsigned: true)
!1691 = !DIEnumerator(name: "OPT_msse4_1", value: 814, isUnsigned: true)
!1692 = !DIEnumerator(name: "OPT_msse4_2", value: 815, isUnsigned: true)
!1693 = !DIEnumerator(name: "OPT_msse4a", value: 816, isUnsigned: true)
!1694 = !DIEnumerator(name: "OPT_msseregparm", value: 817, isUnsigned: true)
!1695 = !DIEnumerator(name: "OPT_mssse3", value: 818, isUnsigned: true)
!1696 = !DIEnumerator(name: "OPT_mstack_arg_probe", value: 819, isUnsigned: true)
!1697 = !DIEnumerator(name: "OPT_mstackrealign", value: 820, isUnsigned: true)
!1698 = !DIEnumerator(name: "OPT_mstringop_strategy_", value: 821, isUnsigned: true)
!1699 = !DIEnumerator(name: "OPT_mtls_dialect_", value: 822, isUnsigned: true)
!1700 = !DIEnumerator(name: "OPT_mtls_direct_seg_refs", value: 823, isUnsigned: true)
!1701 = !DIEnumerator(name: "OPT_mtune_", value: 824, isUnsigned: true)
!1702 = !DIEnumerator(name: "OPT_muclibc", value: 825, isUnsigned: true)
!1703 = !DIEnumerator(name: "OPT_mveclibabi_", value: 826, isUnsigned: true)
!1704 = !DIEnumerator(name: "OPT_mxop", value: 827, isUnsigned: true)
!1705 = !DIEnumerator(name: "OPT_nocpp", value: 828, isUnsigned: true)
!1706 = !DIEnumerator(name: "OPT_nostdinc", value: 829, isUnsigned: true)
!1707 = !DIEnumerator(name: "OPT_nostdinc__", value: 830, isUnsigned: true)
!1708 = !DIEnumerator(name: "OPT_nostdlib", value: 831, isUnsigned: true)
!1709 = !DIEnumerator(name: "OPT_o", value: 832, isUnsigned: true)
!1710 = !DIEnumerator(name: "OPT_p", value: 833, isUnsigned: true)
!1711 = !DIEnumerator(name: "OPT_pedantic", value: 834, isUnsigned: true)
!1712 = !DIEnumerator(name: "OPT_pedantic_errors", value: 835, isUnsigned: true)
!1713 = !DIEnumerator(name: "OPT_pie", value: 836, isUnsigned: true)
!1714 = !DIEnumerator(name: "OPT_print_objc_runtime_info", value: 837, isUnsigned: true)
!1715 = !DIEnumerator(name: "OPT_print_pch_checksum", value: 838, isUnsigned: true)
!1716 = !DIEnumerator(name: "OPT_quiet", value: 839, isUnsigned: true)
!1717 = !DIEnumerator(name: "OPT_remap", value: 840, isUnsigned: true)
!1718 = !DIEnumerator(name: "OPT_shared", value: 841, isUnsigned: true)
!1719 = !DIEnumerator(name: "OPT_static_libgfortran", value: 842, isUnsigned: true)
!1720 = !DIEnumerator(name: "OPT_std_c__0x", value: 843, isUnsigned: true)
!1721 = !DIEnumerator(name: "OPT_std_c__98", value: 844, isUnsigned: true)
!1722 = !DIEnumerator(name: "OPT_std_c89", value: 845, isUnsigned: true)
!1723 = !DIEnumerator(name: "OPT_std_c90", value: 846, isUnsigned: true)
!1724 = !DIEnumerator(name: "OPT_std_c99", value: 847, isUnsigned: true)
!1725 = !DIEnumerator(name: "OPT_std_c9x", value: 848, isUnsigned: true)
!1726 = !DIEnumerator(name: "OPT_std_f2003", value: 849, isUnsigned: true)
!1727 = !DIEnumerator(name: "OPT_std_f2008", value: 850, isUnsigned: true)
!1728 = !DIEnumerator(name: "OPT_std_f95", value: 851, isUnsigned: true)
!1729 = !DIEnumerator(name: "OPT_std_gnu", value: 852, isUnsigned: true)
!1730 = !DIEnumerator(name: "OPT_std_gnu__0x", value: 853, isUnsigned: true)
!1731 = !DIEnumerator(name: "OPT_std_gnu__98", value: 854, isUnsigned: true)
!1732 = !DIEnumerator(name: "OPT_std_gnu89", value: 855, isUnsigned: true)
!1733 = !DIEnumerator(name: "OPT_std_gnu90", value: 856, isUnsigned: true)
!1734 = !DIEnumerator(name: "OPT_std_gnu99", value: 857, isUnsigned: true)
!1735 = !DIEnumerator(name: "OPT_std_gnu9x", value: 858, isUnsigned: true)
!1736 = !DIEnumerator(name: "OPT_std_iso9899_1990", value: 859, isUnsigned: true)
!1737 = !DIEnumerator(name: "OPT_std_iso9899_199409", value: 860, isUnsigned: true)
!1738 = !DIEnumerator(name: "OPT_std_iso9899_1999", value: 861, isUnsigned: true)
!1739 = !DIEnumerator(name: "OPT_std_iso9899_199x", value: 862, isUnsigned: true)
!1740 = !DIEnumerator(name: "OPT_std_legacy", value: 863, isUnsigned: true)
!1741 = !DIEnumerator(name: "OPT_traditional_cpp", value: 864, isUnsigned: true)
!1742 = !DIEnumerator(name: "OPT_trigraphs", value: 865, isUnsigned: true)
!1743 = !DIEnumerator(name: "OPT_undef", value: 866, isUnsigned: true)
!1744 = !DIEnumerator(name: "OPT_v", value: 867, isUnsigned: true)
!1745 = !DIEnumerator(name: "OPT_version", value: 868, isUnsigned: true)
!1746 = !DIEnumerator(name: "OPT_w", value: 869, isUnsigned: true)
!1747 = !DIEnumerator(name: "N_OPTS", value: 870, isUnsigned: true)
!1748 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "integer_type_kind", file: !135, line: 3745, baseType: !7, size: 32, elements: !1749)
!1749 = !{!1750, !1751, !1752, !1753, !1754, !1755, !1756, !1757, !1758, !1759, !1760, !1761}
!1750 = !DIEnumerator(name: "itk_char", value: 0, isUnsigned: true)
!1751 = !DIEnumerator(name: "itk_signed_char", value: 1, isUnsigned: true)
!1752 = !DIEnumerator(name: "itk_unsigned_char", value: 2, isUnsigned: true)
!1753 = !DIEnumerator(name: "itk_short", value: 3, isUnsigned: true)
!1754 = !DIEnumerator(name: "itk_unsigned_short", value: 4, isUnsigned: true)
!1755 = !DIEnumerator(name: "itk_int", value: 5, isUnsigned: true)
!1756 = !DIEnumerator(name: "itk_unsigned_int", value: 6, isUnsigned: true)
!1757 = !DIEnumerator(name: "itk_long", value: 7, isUnsigned: true)
!1758 = !DIEnumerator(name: "itk_unsigned_long", value: 8, isUnsigned: true)
!1759 = !DIEnumerator(name: "itk_long_long", value: 9, isUnsigned: true)
!1760 = !DIEnumerator(name: "itk_unsigned_long_long", value: 10, isUnsigned: true)
!1761 = !DIEnumerator(name: "itk_none", value: 11, isUnsigned: true)
!1762 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "size_type_kind", file: !135, line: 4288, baseType: !7, size: 32, elements: !1763)
!1763 = !{!1764, !1765, !1766, !1767, !1768}
!1764 = !DIEnumerator(name: "SIZETYPE", value: 0, isUnsigned: true)
!1765 = !DIEnumerator(name: "SSIZETYPE", value: 1, isUnsigned: true)
!1766 = !DIEnumerator(name: "BITSIZETYPE", value: 2, isUnsigned: true)
!1767 = !DIEnumerator(name: "SBITSIZETYPE", value: 3, isUnsigned: true)
!1768 = !DIEnumerator(name: "TYPE_KIND_LAST", value: 4, isUnsigned: true)
!1769 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gsi_iterator_update", file: !810, line: 4603, baseType: !7, size: 32, elements: !1770)
!1770 = !{!1771, !1772, !1773}
!1771 = !DIEnumerator(name: "GSI_NEW_STMT", value: 0, isUnsigned: true)
!1772 = !DIEnumerator(name: "GSI_SAME_STMT", value: 1, isUnsigned: true)
!1773 = !DIEnumerator(name: "GSI_CONTINUE_LINKING", value: 2, isUnsigned: true)
!1774 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gf_mask", file: !810, line: 100, baseType: !7, size: 32, elements: !1775)
!1775 = !{!1776, !1777, !1778, !1779, !1780, !1781, !1782, !1783, !1784, !1785, !1786}
!1776 = !DIEnumerator(name: "GF_ASM_INPUT", value: 1, isUnsigned: true)
!1777 = !DIEnumerator(name: "GF_ASM_VOLATILE", value: 2, isUnsigned: true)
!1778 = !DIEnumerator(name: "GF_CALL_CANNOT_INLINE", value: 1, isUnsigned: true)
!1779 = !DIEnumerator(name: "GF_CALL_FROM_THUNK", value: 2, isUnsigned: true)
!1780 = !DIEnumerator(name: "GF_CALL_RETURN_SLOT_OPT", value: 4, isUnsigned: true)
!1781 = !DIEnumerator(name: "GF_CALL_TAILCALL", value: 8, isUnsigned: true)
!1782 = !DIEnumerator(name: "GF_CALL_VA_ARG_PACK", value: 16, isUnsigned: true)
!1783 = !DIEnumerator(name: "GF_OMP_PARALLEL_COMBINED", value: 1, isUnsigned: true)
!1784 = !DIEnumerator(name: "GF_OMP_RETURN_NOWAIT", value: 1, isUnsigned: true)
!1785 = !DIEnumerator(name: "GF_OMP_SECTION_LAST", value: 1, isUnsigned: true)
!1786 = !DIEnumerator(name: "GF_PREDICT_TAKEN", value: 32768, isUnsigned: true)
!1787 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "plugin_event", file: !1788, line: 33, baseType: !7, size: 32, elements: !1789)
!1788 = !DIFile(filename: "./gcc-plugin.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1789 = !{!1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800, !1801, !1802, !1803, !1804, !1805, !1806, !1807, !1808, !1809, !1810, !1811, !1812, !1813}
!1790 = !DIEnumerator(name: "PLUGIN_PASS_MANAGER_SETUP", value: 0, isUnsigned: true)
!1791 = !DIEnumerator(name: "PLUGIN_FINISH_TYPE", value: 1, isUnsigned: true)
!1792 = !DIEnumerator(name: "PLUGIN_FINISH_UNIT", value: 2, isUnsigned: true)
!1793 = !DIEnumerator(name: "PLUGIN_PRE_GENERICIZE", value: 3, isUnsigned: true)
!1794 = !DIEnumerator(name: "PLUGIN_FINISH", value: 4, isUnsigned: true)
!1795 = !DIEnumerator(name: "PLUGIN_INFO", value: 5, isUnsigned: true)
!1796 = !DIEnumerator(name: "PLUGIN_GGC_START", value: 6, isUnsigned: true)
!1797 = !DIEnumerator(name: "PLUGIN_GGC_MARKING", value: 7, isUnsigned: true)
!1798 = !DIEnumerator(name: "PLUGIN_GGC_END", value: 8, isUnsigned: true)
!1799 = !DIEnumerator(name: "PLUGIN_REGISTER_GGC_ROOTS", value: 9, isUnsigned: true)
!1800 = !DIEnumerator(name: "PLUGIN_REGISTER_GGC_CACHES", value: 10, isUnsigned: true)
!1801 = !DIEnumerator(name: "PLUGIN_ATTRIBUTES", value: 11, isUnsigned: true)
!1802 = !DIEnumerator(name: "PLUGIN_START_UNIT", value: 12, isUnsigned: true)
!1803 = !DIEnumerator(name: "PLUGIN_PRAGMAS", value: 13, isUnsigned: true)
!1804 = !DIEnumerator(name: "PLUGIN_ALL_PASSES_START", value: 14, isUnsigned: true)
!1805 = !DIEnumerator(name: "PLUGIN_ALL_PASSES_END", value: 15, isUnsigned: true)
!1806 = !DIEnumerator(name: "PLUGIN_ALL_IPA_PASSES_START", value: 16, isUnsigned: true)
!1807 = !DIEnumerator(name: "PLUGIN_ALL_IPA_PASSES_END", value: 17, isUnsigned: true)
!1808 = !DIEnumerator(name: "PLUGIN_OVERRIDE_GATE", value: 18, isUnsigned: true)
!1809 = !DIEnumerator(name: "PLUGIN_PASS_EXECUTION", value: 19, isUnsigned: true)
!1810 = !DIEnumerator(name: "PLUGIN_EARLY_GIMPLE_PASSES_START", value: 20, isUnsigned: true)
!1811 = !DIEnumerator(name: "PLUGIN_EARLY_GIMPLE_PASSES_END", value: 21, isUnsigned: true)
!1812 = !DIEnumerator(name: "PLUGIN_NEW_PASS", value: 22, isUnsigned: true)
!1813 = !DIEnumerator(name: "PLUGIN_EVENT_FIRST_DYNAMIC", value: 23, isUnsigned: true)
!1814 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "cgraph_order_sort_kind", file: !3, line: 1652, baseType: !7, size: 32, elements: !1815)
!1815 = !{!1816, !1817, !1818, !1819}
!1816 = !DIEnumerator(name: "ORDER_UNDEFINED", value: 0, isUnsigned: true)
!1817 = !DIEnumerator(name: "ORDER_FUNCTION", value: 1, isUnsigned: true)
!1818 = !DIEnumerator(name: "ORDER_VAR", value: 2, isUnsigned: true)
!1819 = !DIEnumerator(name: "ORDER_ASM", value: 3, isUnsigned: true)
!1820 = !{!134, !1821, !2105, !1918, !2679, !7, !2153, !3154, !2187, !2090, !3156, !1951, !2025, !3158, !3163, !3392, !3408, !3409}
!1821 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !1822, line: 56, baseType: !1823)
!1822 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1823 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1824, size: 64)
!1824 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !135, line: 3371, size: 1792, elements: !1825)
!1825 = !{!1826, !1859, !1865, !1878, !1897, !1908, !1913, !1924, !1930, !1944, !1956, !1994, !2490, !2518, !2535, !2536, !2541, !2550, !2556, !2561, !2565, !2569, !2806, !2853, !2859, !2865, !2872, !2885, !2899, !2916, !2928, !2950, !2965, !3136}
!1826 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1824, file: !135, line: 3372, baseType: !1827, size: 64)
!1827 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !135, line: 360, size: 64, elements: !1828)
!1828 = !{!1829, !1830, !1831, !1832, !1833, !1834, !1835, !1836, !1837, !1838, !1839, !1840, !1841, !1842, !1843, !1844, !1845, !1846, !1847, !1848, !1849, !1850, !1851, !1852, !1853, !1854, !1855, !1856, !1857, !1858}
!1829 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1827, file: !135, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1830 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !1827, file: !135, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !1827, file: !135, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1832 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !1827, file: !135, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1833 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !1827, file: !135, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !1827, file: !135, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1835 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !1827, file: !135, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1836 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !1827, file: !135, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1837 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !1827, file: !135, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !1827, file: !135, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !1827, file: !135, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1840 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !1827, file: !135, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !1827, file: !135, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !1827, file: !135, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !1827, file: !135, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1844 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !1827, file: !135, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1845 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !1827, file: !135, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1846 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !1827, file: !135, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1827, file: !135, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!1848 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1827, file: !135, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!1849 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1827, file: !135, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!1850 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1827, file: !135, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1827, file: !135, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!1852 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1827, file: !135, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!1853 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1827, file: !135, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1827, file: !135, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!1855 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !1827, file: !135, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!1856 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !1827, file: !135, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !1827, file: !135, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !1827, file: !135, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1824, file: !135, line: 3373, baseType: !1860, size: 192)
!1860 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !135, line: 402, size: 192, elements: !1861)
!1861 = !{!1862, !1863, !1864}
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1860, file: !135, line: 403, baseType: !1827, size: 64)
!1863 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !1860, file: !135, line: 404, baseType: !1821, size: 64, offset: 64)
!1864 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1860, file: !135, line: 405, baseType: !1821, size: 64, offset: 128)
!1865 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1824, file: !135, line: 3374, baseType: !1866, size: 320)
!1866 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !135, line: 1384, size: 320, elements: !1867)
!1867 = !{!1868, !1869}
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1866, file: !135, line: 1385, baseType: !1860, size: 192)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1866, file: !135, line: 1386, baseType: !1870, size: 128, offset: 192)
!1870 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !1871, line: 58, baseType: !1872)
!1871 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1872 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1871, line: 54, size: 128, elements: !1873)
!1873 = !{!1874, !1876}
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1872, file: !1871, line: 56, baseType: !1875, size: 64)
!1875 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1872, file: !1871, line: 57, baseType: !1877, size: 64, offset: 64)
!1877 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !1824, file: !135, line: 3375, baseType: !1879, size: 256)
!1879 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !135, line: 1397, size: 256, elements: !1880)
!1880 = !{!1881, !1882}
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1879, file: !135, line: 1398, baseType: !1860, size: 192)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !1879, file: !135, line: 1399, baseType: !1883, size: 64, offset: 192)
!1883 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1884, size: 64)
!1884 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !1885, line: 52, size: 256, elements: !1886)
!1885 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1886 = !{!1887, !1888, !1889, !1890, !1891, !1892, !1893}
!1887 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !1884, file: !1885, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1888 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !1884, file: !1885, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !1884, file: !1885, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !1884, file: !1885, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1884, file: !1885, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !1884, file: !1885, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !1884, file: !1885, line: 62, baseType: !1894, size: 192, offset: 64)
!1894 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1875, size: 192, elements: !1895)
!1895 = !{!1896}
!1896 = !DISubrange(count: 3)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !1824, file: !135, line: 3376, baseType: !1898, size: 256)
!1898 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !135, line: 1408, size: 256, elements: !1899)
!1899 = !{!1900, !1901}
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1898, file: !135, line: 1409, baseType: !1860, size: 192)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !1898, file: !135, line: 1410, baseType: !1902, size: 64, offset: 192)
!1902 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1903, size: 64)
!1903 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !1904, line: 27, size: 192, elements: !1905)
!1904 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1905 = !{!1906, !1907}
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1903, file: !1904, line: 29, baseType: !1870, size: 128)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1903, file: !1904, line: 30, baseType: !5, size: 32, offset: 128)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !1824, file: !135, line: 3377, baseType: !1909, size: 256)
!1909 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !135, line: 1437, size: 256, elements: !1910)
!1910 = !{!1911, !1912}
!1911 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1909, file: !135, line: 1438, baseType: !1860, size: 192)
!1912 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1909, file: !135, line: 1439, baseType: !1821, size: 64, offset: 192)
!1913 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1824, file: !135, line: 3378, baseType: !1914, size: 256)
!1914 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !135, line: 1418, size: 256, elements: !1915)
!1915 = !{!1916, !1917, !1919}
!1916 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1914, file: !135, line: 1419, baseType: !1860, size: 192)
!1917 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1914, file: !135, line: 1420, baseType: !1918, size: 32, offset: 192)
!1918 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!1919 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1914, file: !135, line: 1421, baseType: !1920, size: 8, offset: 224)
!1920 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1921, size: 8, elements: !1922)
!1921 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!1922 = !{!1923}
!1923 = !DISubrange(count: 1)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !1824, file: !135, line: 3379, baseType: !1925, size: 320)
!1925 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !135, line: 1428, size: 320, elements: !1926)
!1926 = !{!1927, !1928, !1929}
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1925, file: !135, line: 1429, baseType: !1860, size: 192)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !1925, file: !135, line: 1430, baseType: !1821, size: 64, offset: 192)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !1925, file: !135, line: 1431, baseType: !1821, size: 64, offset: 256)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !1824, file: !135, line: 3380, baseType: !1931, size: 320)
!1931 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !135, line: 1460, size: 320, elements: !1932)
!1932 = !{!1933, !1934}
!1933 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1931, file: !135, line: 1461, baseType: !1860, size: 192)
!1934 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1931, file: !135, line: 1462, baseType: !1935, size: 128, offset: 192)
!1935 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !1936, line: 31, size: 128, elements: !1937)
!1936 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1937 = !{!1938, !1942, !1943}
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1935, file: !1936, line: 32, baseType: !1939, size: 64)
!1939 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1940, size: 64)
!1940 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1941)
!1941 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1935, file: !1936, line: 33, baseType: !7, size: 32, offset: 64)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !1935, file: !1936, line: 34, baseType: !7, size: 32, offset: 96)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !1824, file: !135, line: 3381, baseType: !1945, size: 384)
!1945 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !135, line: 2507, size: 384, elements: !1946)
!1946 = !{!1947, !1948, !1953, !1954, !1955}
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1945, file: !135, line: 2508, baseType: !1860, size: 192)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1945, file: !135, line: 2509, baseType: !1949, size: 32, offset: 192)
!1949 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !1950, line: 58, baseType: !1951)
!1950 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1951 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !1952, line: 44, baseType: !7)
!1952 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1953 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1945, file: !135, line: 2510, baseType: !7, size: 32, offset: 224)
!1954 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1945, file: !135, line: 2511, baseType: !1821, size: 64, offset: 256)
!1955 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1945, file: !135, line: 2512, baseType: !1821, size: 64, offset: 320)
!1956 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !1824, file: !135, line: 3382, baseType: !1957, size: 896)
!1957 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !135, line: 2652, size: 896, elements: !1958)
!1958 = !{!1959, !1960, !1961, !1962, !1963, !1964, !1965, !1966, !1967, !1968, !1969, !1970, !1971, !1972, !1973, !1974, !1975, !1976, !1977, !1978, !1979, !1980, !1981, !1982, !1983, !1984, !1985, !1986, !1987, !1988, !1989, !1990, !1991}
!1959 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1957, file: !135, line: 2653, baseType: !1945, size: 384)
!1960 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1957, file: !135, line: 2654, baseType: !1821, size: 64, offset: 384)
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1957, file: !135, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!1962 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !1957, file: !135, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!1963 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !1957, file: !135, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!1964 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !1957, file: !135, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!1965 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1957, file: !135, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!1966 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !1957, file: !135, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!1967 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !1957, file: !135, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!1968 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !1957, file: !135, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!1969 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1957, file: !135, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1957, file: !135, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!1971 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1957, file: !135, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!1972 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1957, file: !135, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!1973 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1957, file: !135, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!1974 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1957, file: !135, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1957, file: !135, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !1957, file: !135, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!1977 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !1957, file: !135, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!1978 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !1957, file: !135, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!1979 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !1957, file: !135, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!1980 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !1957, file: !135, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!1981 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !1957, file: !135, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!1982 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !1957, file: !135, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!1983 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !1957, file: !135, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!1984 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !1957, file: !135, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!1985 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !1957, file: !135, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!1986 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1957, file: !135, line: 2703, baseType: !7, size: 32, offset: 512)
!1987 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1957, file: !135, line: 2705, baseType: !1821, size: 64, offset: 576)
!1988 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1957, file: !135, line: 2706, baseType: !1821, size: 64, offset: 640)
!1989 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1957, file: !135, line: 2707, baseType: !1821, size: 64, offset: 704)
!1990 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1957, file: !135, line: 2708, baseType: !1821, size: 64, offset: 768)
!1991 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1957, file: !135, line: 2711, baseType: !1992, size: 64, offset: 832)
!1992 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1993, size: 64)
!1993 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !135, line: 2711, flags: DIFlagFwdDecl)
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !1824, file: !135, line: 3383, baseType: !1995, size: 960)
!1995 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !135, line: 2756, size: 960, elements: !1996)
!1996 = !{!1997, !1998}
!1997 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1995, file: !135, line: 2757, baseType: !1957, size: 896)
!1998 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1995, file: !135, line: 2758, baseType: !1999, size: 64, offset: 896)
!1999 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !1822, line: 50, baseType: !2000)
!2000 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2001, size: 64)
!2001 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !2002, line: 240, size: 384, elements: !2003)
!2002 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2003 = !{!2004, !2005, !2006, !2007, !2008, !2009, !2010, !2011, !2012, !2013, !2014}
!2004 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2001, file: !2002, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!2005 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2001, file: !2002, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!2006 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !2001, file: !2002, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!2007 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !2001, file: !2002, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!2008 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !2001, file: !2002, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!2009 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !2001, file: !2002, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!2010 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !2001, file: !2002, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!2011 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !2001, file: !2002, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!2012 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !2001, file: !2002, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!2013 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !2001, file: !2002, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!2014 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !2001, file: !2002, line: 321, baseType: !2015, size: 320, offset: 64)
!2015 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !2002, line: 315, size: 320, elements: !2016)
!2016 = !{!2017, !2423, !2425, !2488, !2489}
!2017 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !2015, file: !2002, line: 316, baseType: !2018, size: 64)
!2018 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2019, size: 64, elements: !1922)
!2019 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !2002, line: 183, baseType: !2020)
!2020 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !2002, line: 166, size: 64, elements: !2021)
!2021 = !{!2022, !2023, !2024, !2027, !2028, !2036, !2037, !2049, !2052, !2114, !2115, !2400, !2413, !2420}
!2022 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !2020, file: !2002, line: 168, baseType: !1918, size: 32)
!2023 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !2020, file: !2002, line: 169, baseType: !7, size: 32)
!2024 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !2020, file: !2002, line: 170, baseType: !2025, size: 64)
!2025 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2026, size: 64)
!2026 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1921)
!2027 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !2020, file: !2002, line: 171, baseType: !1999, size: 64)
!2028 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !2020, file: !2002, line: 172, baseType: !2029, size: 64)
!2029 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !1822, line: 53, baseType: !2030)
!2030 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2031, size: 64)
!2031 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !2002, line: 359, size: 128, elements: !2032)
!2032 = !{!2033, !2034}
!2033 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !2031, file: !2002, line: 360, baseType: !1918, size: 32)
!2034 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !2031, file: !2002, line: 361, baseType: !2035, size: 64, offset: 64)
!2035 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1999, size: 64, elements: !1922)
!2036 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !2020, file: !2002, line: 173, baseType: !5, size: 32)
!2037 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !2020, file: !2002, line: 174, baseType: !2038, size: 32)
!2038 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !2002, line: 133, baseType: !2039)
!2039 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2002, line: 115, size: 32, elements: !2040)
!2040 = !{!2041, !2042, !2043, !2044, !2045, !2046, !2047, !2048}
!2041 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !2039, file: !2002, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!2042 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !2039, file: !2002, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!2043 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !2039, file: !2002, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!2044 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !2039, file: !2002, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!2045 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !2039, file: !2002, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!2046 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !2039, file: !2002, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!2047 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !2039, file: !2002, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!2048 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !2039, file: !2002, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!2049 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !2020, file: !2002, line: 175, baseType: !2050, size: 64)
!2050 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2051, size: 64)
!2051 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !2002, line: 175, flags: DIFlagFwdDecl)
!2052 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !2020, file: !2002, line: 176, baseType: !2053, size: 64)
!2053 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2054, size: 64)
!2054 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !2055, line: 75, size: 256, elements: !2056)
!2055 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2056 = !{!2057, !2071, !2072, !2073}
!2057 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !2054, file: !2055, line: 76, baseType: !2058, size: 64)
!2058 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2059, size: 64)
!2059 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !2055, line: 68, baseType: !2060)
!2060 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !2055, line: 63, size: 320, elements: !2061)
!2061 = !{!2062, !2064, !2065, !2066}
!2062 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2060, file: !2055, line: 64, baseType: !2063, size: 64)
!2063 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2060, size: 64)
!2064 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2060, file: !2055, line: 65, baseType: !2063, size: 64, offset: 64)
!2065 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !2060, file: !2055, line: 66, baseType: !7, size: 32, offset: 128)
!2066 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !2060, file: !2055, line: 67, baseType: !2067, size: 128, offset: 192)
!2067 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2068, size: 128, elements: !2069)
!2068 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !2055, line: 29, baseType: !1875)
!2069 = !{!2070}
!2070 = !DISubrange(count: 2)
!2071 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !2054, file: !2055, line: 77, baseType: !2058, size: 64, offset: 64)
!2072 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !2054, file: !2055, line: 78, baseType: !7, size: 32, offset: 128)
!2073 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !2054, file: !2055, line: 79, baseType: !2074, size: 64, offset: 192)
!2074 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2075, size: 64)
!2075 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !2055, line: 49, baseType: !2076)
!2076 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !2055, line: 45, size: 832, elements: !2077)
!2077 = !{!2078, !2079, !2080}
!2078 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !2076, file: !2055, line: 46, baseType: !2063, size: 64)
!2079 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !2076, file: !2055, line: 47, baseType: !2053, size: 64, offset: 64)
!2080 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !2076, file: !2055, line: 48, baseType: !2081, size: 704, offset: 128)
!2081 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !2082, line: 164, size: 704, elements: !2083)
!2082 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2083 = !{!2084, !2085, !2096, !2097, !2098, !2099, !2100, !2101, !2106, !2110, !2111, !2112, !2113}
!2084 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !2081, file: !2082, line: 166, baseType: !1877, size: 64)
!2085 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !2081, file: !2082, line: 167, baseType: !2086, size: 64, offset: 64)
!2086 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2087, size: 64)
!2087 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !2082, line: 157, size: 192, elements: !2088)
!2088 = !{!2089, !2091, !2092}
!2089 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !2087, file: !2082, line: 159, baseType: !2090, size: 64)
!2090 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1921, size: 64)
!2091 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2087, file: !2082, line: 160, baseType: !2086, size: 64, offset: 64)
!2092 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !2087, file: !2082, line: 161, baseType: !2093, size: 32, offset: 128)
!2093 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1921, size: 32, elements: !2094)
!2094 = !{!2095}
!2095 = !DISubrange(count: 4)
!2096 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !2081, file: !2082, line: 168, baseType: !2090, size: 64, offset: 128)
!2097 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !2081, file: !2082, line: 169, baseType: !2090, size: 64, offset: 192)
!2098 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !2081, file: !2082, line: 170, baseType: !2090, size: 64, offset: 256)
!2099 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !2081, file: !2082, line: 171, baseType: !1877, size: 64, offset: 320)
!2100 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !2081, file: !2082, line: 172, baseType: !1918, size: 32, offset: 384)
!2101 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !2081, file: !2082, line: 176, baseType: !2102, size: 64, offset: 448)
!2102 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2103, size: 64)
!2103 = !DISubroutineType(types: !2104)
!2104 = !{!2086, !2105, !1877}
!2105 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!2106 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !2081, file: !2082, line: 177, baseType: !2107, size: 64, offset: 512)
!2107 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2108, size: 64)
!2108 = !DISubroutineType(types: !2109)
!2109 = !{null, !2105, !2086}
!2110 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !2081, file: !2082, line: 178, baseType: !2105, size: 64, offset: 576)
!2111 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !2081, file: !2082, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!2112 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !2081, file: !2082, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!2113 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !2081, file: !2082, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!2114 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !2020, file: !2002, line: 177, baseType: !1821, size: 64)
!2115 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !2020, file: !2002, line: 178, baseType: !2116, size: 64)
!2116 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2117, size: 64)
!2117 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !330, line: 217, size: 832, elements: !2118)
!2118 = !{!2119, !2365, !2366, !2367, !2370, !2374, !2375, !2376, !2394, !2395, !2396, !2397, !2398, !2399}
!2119 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !2117, file: !330, line: 219, baseType: !2120, size: 64)
!2120 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2121, size: 64)
!2121 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !330, line: 151, baseType: !2122)
!2122 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !330, line: 151, size: 128, elements: !2123)
!2123 = !{!2124}
!2124 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2122, file: !330, line: 151, baseType: !2125, size: 128)
!2125 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !330, line: 150, baseType: !2126)
!2126 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !330, line: 150, size: 128, elements: !2127)
!2127 = !{!2128, !2129, !2130}
!2128 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2126, file: !330, line: 150, baseType: !7, size: 32)
!2129 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2126, file: !330, line: 150, baseType: !7, size: 32, offset: 32)
!2130 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2126, file: !330, line: 150, baseType: !2131, size: 64, offset: 64)
!2131 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2132, size: 64, elements: !1922)
!2132 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !1822, line: 108, baseType: !2133)
!2133 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2134, size: 64)
!2134 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !330, line: 122, size: 512, elements: !2135)
!2135 = !{!2136, !2137, !2138, !2357, !2358, !2359, !2360, !2361, !2362, !2363}
!2136 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !2134, file: !330, line: 124, baseType: !2116, size: 64)
!2137 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !2134, file: !330, line: 125, baseType: !2116, size: 64, offset: 64)
!2138 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !2134, file: !330, line: 131, baseType: !2139, size: 64, offset: 128)
!2139 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !330, line: 128, size: 64, elements: !2140)
!2140 = !{!2141, !2356}
!2141 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !2139, file: !330, line: 129, baseType: !2142, size: 64)
!2142 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !1822, line: 66, baseType: !2143)
!2143 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2144, size: 64)
!2144 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !810, line: 143, size: 192, elements: !2145)
!2145 = !{!2146, !2354, !2355}
!2146 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !2144, file: !810, line: 145, baseType: !2147, size: 64)
!2147 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !1822, line: 69, baseType: !2148)
!2148 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2149, size: 64)
!2149 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !810, line: 136, size: 192, elements: !2150)
!2150 = !{!2151, !2352, !2353}
!2151 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2149, file: !810, line: 137, baseType: !2152, size: 64)
!2152 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !1822, line: 58, baseType: !2153)
!2153 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2154, size: 64)
!2154 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !810, line: 737, size: 768, elements: !2155)
!2155 = !{!2156, !2173, !2207, !2213, !2218, !2223, !2230, !2236, !2242, !2247, !2261, !2266, !2272, !2277, !2287, !2292, !2310, !2317, !2324, !2330, !2335, !2341, !2347}
!2156 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2154, file: !810, line: 738, baseType: !2157, size: 256)
!2157 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !810, line: 271, size: 256, elements: !2158)
!2158 = !{!2159, !2160, !2161, !2162, !2163, !2164, !2165, !2166, !2167, !2168, !2169, !2170, !2171, !2172}
!2159 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2157, file: !810, line: 274, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!2160 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !2157, file: !810, line: 277, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!2161 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !2157, file: !810, line: 281, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!2162 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !2157, file: !810, line: 284, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!2163 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !2157, file: !810, line: 291, baseType: !7, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!2164 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !2157, file: !810, line: 295, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!2165 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !2157, file: !810, line: 298, baseType: !7, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!2166 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !2157, file: !810, line: 301, baseType: !7, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!2167 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !2157, file: !810, line: 307, baseType: !7, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!2168 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2157, file: !810, line: 312, baseType: !7, size: 32, offset: 32)
!2169 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !2157, file: !810, line: 316, baseType: !1949, size: 32, offset: 64)
!2170 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !2157, file: !810, line: 319, baseType: !7, size: 32, offset: 96)
!2171 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !2157, file: !810, line: 323, baseType: !2116, size: 64, offset: 128)
!2172 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2157, file: !810, line: 327, baseType: !1821, size: 64, offset: 192)
!2173 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !2154, file: !810, line: 739, baseType: !2174, size: 448)
!2174 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !810, line: 350, size: 448, elements: !2175)
!2175 = !{!2176, !2205}
!2176 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !2174, file: !810, line: 353, baseType: !2177, size: 384)
!2177 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !810, line: 333, size: 384, elements: !2178)
!2178 = !{!2179, !2180, !2188}
!2179 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2177, file: !810, line: 336, baseType: !2157, size: 256)
!2180 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !2177, file: !810, line: 343, baseType: !2181, size: 64, offset: 256)
!2181 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2182, size: 64)
!2182 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !2183, line: 37, size: 128, elements: !2184)
!2183 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2184 = !{!2185, !2186}
!2185 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2182, file: !2183, line: 39, baseType: !2181, size: 64)
!2186 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !2182, file: !2183, line: 40, baseType: !2187, size: 64, offset: 64)
!2187 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1821, size: 64)
!2188 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !2177, file: !810, line: 344, baseType: !2189, size: 64, offset: 320)
!2189 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2190, size: 64)
!2190 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !2183, line: 45, size: 320, elements: !2191)
!2191 = !{!2192, !2193}
!2192 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2190, file: !2183, line: 47, baseType: !2189, size: 64)
!2193 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !2190, file: !2183, line: 48, baseType: !2194, size: 256, offset: 64)
!2194 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !135, line: 1883, size: 256, elements: !2195)
!2195 = !{!2196, !2198, !2199, !2204}
!2196 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2194, file: !135, line: 1884, baseType: !2197, size: 64)
!2197 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2194, size: 64)
!2198 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2194, file: !135, line: 1885, baseType: !2197, size: 64, offset: 64)
!2199 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !2194, file: !135, line: 1891, baseType: !2200, size: 64, offset: 128)
!2200 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2194, file: !135, line: 1891, size: 64, elements: !2201)
!2201 = !{!2202, !2203}
!2202 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2200, file: !135, line: 1891, baseType: !2152, size: 64)
!2203 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !2200, file: !135, line: 1891, baseType: !1821, size: 64)
!2204 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !2194, file: !135, line: 1892, baseType: !2187, size: 64, offset: 192)
!2205 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2174, file: !810, line: 359, baseType: !2206, size: 64, offset: 384)
!2206 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1821, size: 64, elements: !1922)
!2207 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !2154, file: !810, line: 740, baseType: !2208, size: 512)
!2208 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !810, line: 365, size: 512, elements: !2209)
!2209 = !{!2210, !2211, !2212}
!2210 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !2208, file: !810, line: 368, baseType: !2177, size: 384)
!2211 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !2208, file: !810, line: 373, baseType: !1821, size: 64, offset: 384)
!2212 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !2208, file: !810, line: 374, baseType: !1821, size: 64, offset: 448)
!2213 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !2154, file: !810, line: 741, baseType: !2214, size: 576)
!2214 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !810, line: 380, size: 576, elements: !2215)
!2215 = !{!2216, !2217}
!2216 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !2214, file: !810, line: 383, baseType: !2208, size: 512)
!2217 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2214, file: !810, line: 389, baseType: !2206, size: 64, offset: 512)
!2218 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2154, file: !810, line: 742, baseType: !2219, size: 320)
!2219 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !810, line: 395, size: 320, elements: !2220)
!2220 = !{!2221, !2222}
!2221 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2219, file: !810, line: 397, baseType: !2157, size: 256)
!2222 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !2219, file: !810, line: 400, baseType: !2142, size: 64, offset: 256)
!2223 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !2154, file: !810, line: 743, baseType: !2224, size: 448)
!2224 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !810, line: 406, size: 448, elements: !2225)
!2225 = !{!2226, !2227, !2228, !2229}
!2226 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2224, file: !810, line: 408, baseType: !2157, size: 256)
!2227 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2224, file: !810, line: 412, baseType: !1821, size: 64, offset: 256)
!2228 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2224, file: !810, line: 420, baseType: !1821, size: 64, offset: 320)
!2229 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !2224, file: !810, line: 423, baseType: !2142, size: 64, offset: 384)
!2230 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !2154, file: !810, line: 744, baseType: !2231, size: 384)
!2231 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !810, line: 429, size: 384, elements: !2232)
!2232 = !{!2233, !2234, !2235}
!2233 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2231, file: !810, line: 431, baseType: !2157, size: 256)
!2234 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !2231, file: !810, line: 434, baseType: !1821, size: 64, offset: 256)
!2235 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !2231, file: !810, line: 437, baseType: !2142, size: 64, offset: 320)
!2236 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !2154, file: !810, line: 745, baseType: !2237, size: 384)
!2237 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !810, line: 443, size: 384, elements: !2238)
!2238 = !{!2239, !2240, !2241}
!2239 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2237, file: !810, line: 445, baseType: !2157, size: 256)
!2240 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !2237, file: !810, line: 449, baseType: !1821, size: 64, offset: 256)
!2241 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !2237, file: !810, line: 453, baseType: !2142, size: 64, offset: 320)
!2242 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !2154, file: !810, line: 746, baseType: !2243, size: 320)
!2243 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !810, line: 459, size: 320, elements: !2244)
!2244 = !{!2245, !2246}
!2245 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2243, file: !810, line: 461, baseType: !2157, size: 256)
!2246 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !2243, file: !810, line: 464, baseType: !1821, size: 64, offset: 256)
!2247 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !2154, file: !810, line: 747, baseType: !2248, size: 768)
!2248 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !810, line: 469, size: 768, elements: !2249)
!2249 = !{!2250, !2251, !2252, !2253, !2254}
!2250 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2248, file: !810, line: 471, baseType: !2157, size: 256)
!2251 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !2248, file: !810, line: 474, baseType: !7, size: 32, offset: 256)
!2252 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !2248, file: !810, line: 475, baseType: !7, size: 32, offset: 288)
!2253 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !2248, file: !810, line: 478, baseType: !1821, size: 64, offset: 320)
!2254 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !2248, file: !810, line: 481, baseType: !2255, size: 384, offset: 384)
!2255 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2256, size: 384, elements: !1922)
!2256 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !135, line: 1917, size: 384, elements: !2257)
!2257 = !{!2258, !2259, !2260}
!2258 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !2256, file: !135, line: 1920, baseType: !2194, size: 256)
!2259 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !2256, file: !135, line: 1921, baseType: !1821, size: 64, offset: 256)
!2260 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2256, file: !135, line: 1922, baseType: !1949, size: 32, offset: 320)
!2261 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !2154, file: !810, line: 748, baseType: !2262, size: 320)
!2262 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !810, line: 487, size: 320, elements: !2263)
!2263 = !{!2264, !2265}
!2264 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2262, file: !810, line: 490, baseType: !2157, size: 256)
!2265 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !2262, file: !810, line: 494, baseType: !1918, size: 32, offset: 256)
!2266 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !2154, file: !810, line: 749, baseType: !2267, size: 384)
!2267 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !810, line: 500, size: 384, elements: !2268)
!2268 = !{!2269, !2270, !2271}
!2269 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2267, file: !810, line: 502, baseType: !2157, size: 256)
!2270 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !2267, file: !810, line: 506, baseType: !2142, size: 64, offset: 256)
!2271 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !2267, file: !810, line: 510, baseType: !2142, size: 64, offset: 320)
!2272 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !2154, file: !810, line: 750, baseType: !2273, size: 320)
!2273 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !810, line: 529, size: 320, elements: !2274)
!2274 = !{!2275, !2276}
!2275 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2273, file: !810, line: 531, baseType: !2157, size: 256)
!2276 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !2273, file: !810, line: 540, baseType: !2142, size: 64, offset: 256)
!2277 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !2154, file: !810, line: 751, baseType: !2278, size: 704)
!2278 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !810, line: 546, size: 704, elements: !2279)
!2279 = !{!2280, !2281, !2282, !2283, !2284, !2285, !2286}
!2280 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !2278, file: !810, line: 549, baseType: !2208, size: 512)
!2281 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !2278, file: !810, line: 553, baseType: !2025, size: 64, offset: 512)
!2282 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !2278, file: !810, line: 557, baseType: !1941, size: 8, offset: 576)
!2283 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !2278, file: !810, line: 558, baseType: !1941, size: 8, offset: 584)
!2284 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !2278, file: !810, line: 559, baseType: !1941, size: 8, offset: 592)
!2285 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !2278, file: !810, line: 560, baseType: !1941, size: 8, offset: 600)
!2286 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2278, file: !810, line: 566, baseType: !2206, size: 64, offset: 640)
!2287 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !2154, file: !810, line: 752, baseType: !2288, size: 384)
!2288 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !810, line: 571, size: 384, elements: !2289)
!2289 = !{!2290, !2291}
!2290 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2288, file: !810, line: 573, baseType: !2219, size: 320)
!2291 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2288, file: !810, line: 577, baseType: !1821, size: 64, offset: 320)
!2292 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !2154, file: !810, line: 753, baseType: !2293, size: 576)
!2293 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !810, line: 600, size: 576, elements: !2294)
!2294 = !{!2295, !2296, !2297, !2300, !2309}
!2295 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2293, file: !810, line: 602, baseType: !2219, size: 320)
!2296 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2293, file: !810, line: 605, baseType: !1821, size: 64, offset: 320)
!2297 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !2293, file: !810, line: 609, baseType: !2298, size: 64, offset: 384)
!2298 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !2299, line: 46, baseType: !1875)
!2299 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!2300 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !2293, file: !810, line: 612, baseType: !2301, size: 64, offset: 448)
!2301 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2302, size: 64)
!2302 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !810, line: 581, size: 320, elements: !2303)
!2303 = !{!2304, !2305, !2306, !2307, !2308}
!2304 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !2302, file: !810, line: 583, baseType: !134, size: 32)
!2305 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2302, file: !810, line: 586, baseType: !1821, size: 64, offset: 64)
!2306 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !2302, file: !810, line: 589, baseType: !1821, size: 64, offset: 128)
!2307 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !2302, file: !810, line: 592, baseType: !1821, size: 64, offset: 192)
!2308 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !2302, file: !810, line: 595, baseType: !1821, size: 64, offset: 256)
!2309 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !2293, file: !810, line: 616, baseType: !2142, size: 64, offset: 512)
!2310 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !2154, file: !810, line: 754, baseType: !2311, size: 512)
!2311 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !810, line: 622, size: 512, elements: !2312)
!2312 = !{!2313, !2314, !2315, !2316}
!2313 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2311, file: !810, line: 624, baseType: !2219, size: 320)
!2314 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2311, file: !810, line: 628, baseType: !1821, size: 64, offset: 320)
!2315 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !2311, file: !810, line: 632, baseType: !1821, size: 64, offset: 384)
!2316 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !2311, file: !810, line: 636, baseType: !1821, size: 64, offset: 448)
!2317 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !2154, file: !810, line: 755, baseType: !2318, size: 704)
!2318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !810, line: 642, size: 704, elements: !2319)
!2319 = !{!2320, !2321, !2322, !2323}
!2320 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !2318, file: !810, line: 644, baseType: !2311, size: 512)
!2321 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !2318, file: !810, line: 648, baseType: !1821, size: 64, offset: 512)
!2322 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !2318, file: !810, line: 652, baseType: !1821, size: 64, offset: 576)
!2323 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !2318, file: !810, line: 653, baseType: !1821, size: 64, offset: 640)
!2324 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !2154, file: !810, line: 756, baseType: !2325, size: 448)
!2325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !810, line: 663, size: 448, elements: !2326)
!2326 = !{!2327, !2328, !2329}
!2327 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2325, file: !810, line: 665, baseType: !2219, size: 320)
!2328 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2325, file: !810, line: 668, baseType: !1821, size: 64, offset: 320)
!2329 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !2325, file: !810, line: 673, baseType: !1821, size: 64, offset: 384)
!2330 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !2154, file: !810, line: 757, baseType: !2331, size: 384)
!2331 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !810, line: 694, size: 384, elements: !2332)
!2332 = !{!2333, !2334}
!2333 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2331, file: !810, line: 696, baseType: !2219, size: 320)
!2334 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2331, file: !810, line: 699, baseType: !1821, size: 64, offset: 320)
!2335 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !2154, file: !810, line: 758, baseType: !2336, size: 384)
!2336 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !810, line: 681, size: 384, elements: !2337)
!2337 = !{!2338, !2339, !2340}
!2338 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2336, file: !810, line: 683, baseType: !2157, size: 256)
!2339 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !2336, file: !810, line: 686, baseType: !1821, size: 64, offset: 256)
!2340 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !2336, file: !810, line: 689, baseType: !1821, size: 64, offset: 320)
!2341 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !2154, file: !810, line: 759, baseType: !2342, size: 384)
!2342 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !810, line: 707, size: 384, elements: !2343)
!2343 = !{!2344, !2345, !2346}
!2344 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2342, file: !810, line: 709, baseType: !2157, size: 256)
!2345 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !2342, file: !810, line: 712, baseType: !1821, size: 64, offset: 256)
!2346 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !2342, file: !810, line: 712, baseType: !1821, size: 64, offset: 320)
!2347 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !2154, file: !810, line: 760, baseType: !2348, size: 320)
!2348 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !810, line: 718, size: 320, elements: !2349)
!2349 = !{!2350, !2351}
!2350 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2348, file: !810, line: 720, baseType: !2157, size: 256)
!2351 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2348, file: !810, line: 723, baseType: !1821, size: 64, offset: 256)
!2352 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2149, file: !810, line: 138, baseType: !2148, size: 64, offset: 64)
!2353 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2149, file: !810, line: 139, baseType: !2148, size: 64, offset: 128)
!2354 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !2144, file: !810, line: 146, baseType: !2147, size: 64, offset: 64)
!2355 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !2144, file: !810, line: 152, baseType: !2142, size: 64, offset: 128)
!2356 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !2139, file: !330, line: 130, baseType: !1999, size: 64)
!2357 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2134, file: !330, line: 134, baseType: !2105, size: 64, offset: 192)
!2358 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !2134, file: !330, line: 137, baseType: !1821, size: 64, offset: 256)
!2359 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !2134, file: !330, line: 138, baseType: !1949, size: 32, offset: 320)
!2360 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !2134, file: !330, line: 142, baseType: !7, size: 32, offset: 352)
!2361 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2134, file: !330, line: 144, baseType: !1918, size: 32, offset: 384)
!2362 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !2134, file: !330, line: 145, baseType: !1918, size: 32, offset: 416)
!2363 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !2134, file: !330, line: 146, baseType: !2364, size: 64, offset: 448)
!2364 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !330, line: 119, baseType: !1877)
!2365 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !2117, file: !330, line: 220, baseType: !2120, size: 64, offset: 64)
!2366 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2117, file: !330, line: 223, baseType: !2105, size: 64, offset: 128)
!2367 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !2117, file: !330, line: 226, baseType: !2368, size: 64, offset: 192)
!2368 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2369, size: 64)
!2369 = !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !330, line: 185, flags: DIFlagFwdDecl)
!2370 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !2117, file: !330, line: 229, baseType: !2371, size: 128, offset: 256)
!2371 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2372, size: 128, elements: !2069)
!2372 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2373, size: 64)
!2373 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !330, line: 229, flags: DIFlagFwdDecl)
!2374 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !2117, file: !330, line: 232, baseType: !2116, size: 64, offset: 384)
!2375 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !2117, file: !330, line: 233, baseType: !2116, size: 64, offset: 448)
!2376 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !2117, file: !330, line: 238, baseType: !2377, size: 64, offset: 512)
!2377 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !330, line: 235, size: 64, elements: !2378)
!2378 = !{!2379, !2385}
!2379 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !2377, file: !330, line: 236, baseType: !2380, size: 64)
!2380 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2381, size: 64)
!2381 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !330, line: 273, size: 128, elements: !2382)
!2382 = !{!2383, !2384}
!2383 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !2381, file: !330, line: 275, baseType: !2142, size: 64)
!2384 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !2381, file: !330, line: 278, baseType: !2142, size: 64, offset: 64)
!2385 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !2377, file: !330, line: 237, baseType: !2386, size: 64)
!2386 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2387, size: 64)
!2387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !330, line: 259, size: 320, elements: !2388)
!2388 = !{!2389, !2390, !2391, !2392, !2393}
!2389 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !2387, file: !330, line: 261, baseType: !1999, size: 64)
!2390 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !2387, file: !330, line: 262, baseType: !1999, size: 64, offset: 64)
!2391 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !2387, file: !330, line: 266, baseType: !1999, size: 64, offset: 128)
!2392 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !2387, file: !330, line: 267, baseType: !1999, size: 64, offset: 192)
!2393 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !2387, file: !330, line: 270, baseType: !1918, size: 32, offset: 256)
!2394 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !2117, file: !330, line: 241, baseType: !2364, size: 64, offset: 576)
!2395 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2117, file: !330, line: 244, baseType: !1918, size: 32, offset: 640)
!2396 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !2117, file: !330, line: 247, baseType: !1918, size: 32, offset: 672)
!2397 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !2117, file: !330, line: 250, baseType: !1918, size: 32, offset: 704)
!2398 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !2117, file: !330, line: 253, baseType: !1918, size: 32, offset: 736)
!2399 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2117, file: !330, line: 256, baseType: !1918, size: 32, offset: 768)
!2400 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !2020, file: !2002, line: 179, baseType: !2401, size: 64)
!2401 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2402, size: 64)
!2402 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !2002, line: 150, baseType: !2403)
!2403 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !2002, line: 142, size: 320, elements: !2404)
!2404 = !{!2405, !2406, !2407, !2408, !2411, !2412}
!2405 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !2403, file: !2002, line: 144, baseType: !1821, size: 64)
!2406 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2403, file: !2002, line: 145, baseType: !1999, size: 64, offset: 64)
!2407 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2403, file: !2002, line: 146, baseType: !1999, size: 64, offset: 128)
!2408 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2403, file: !2002, line: 147, baseType: !2409, size: 32, offset: 192)
!2409 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !2410, line: 31, baseType: !1918)
!2410 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2411 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2403, file: !2002, line: 148, baseType: !7, size: 32, offset: 224)
!2412 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !2403, file: !2002, line: 149, baseType: !1941, size: 8, offset: 256)
!2413 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !2020, file: !2002, line: 180, baseType: !2414, size: 64)
!2414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2415, size: 64)
!2415 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !2002, line: 162, baseType: !2416)
!2416 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !2002, line: 159, size: 128, elements: !2417)
!2417 = !{!2418, !2419}
!2418 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2416, file: !2002, line: 160, baseType: !1821, size: 64)
!2419 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2416, file: !2002, line: 161, baseType: !1877, size: 64, offset: 64)
!2420 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !2020, file: !2002, line: 181, baseType: !2421, size: 64)
!2421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2422, size: 64)
!2422 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !2002, line: 181, flags: DIFlagFwdDecl)
!2423 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !2015, file: !2002, line: 317, baseType: !2424, size: 64)
!2424 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1877, size: 64, elements: !1922)
!2425 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !2015, file: !2002, line: 318, baseType: !2426, size: 320)
!2426 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !2002, line: 188, size: 320, elements: !2427)
!2427 = !{!2428, !2430, !2487}
!2428 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !2426, file: !2002, line: 190, baseType: !2429, size: 192)
!2429 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2019, size: 192, elements: !1895)
!2430 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2426, file: !2002, line: 193, baseType: !2431, size: 64, offset: 192)
!2431 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2432, size: 64)
!2432 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !2002, line: 206, size: 320, elements: !2433)
!2433 = !{!2434, !2472, !2473, !2474, !2486}
!2434 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !2432, file: !2002, line: 208, baseType: !2435, size: 64)
!2435 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2436, size: 64)
!2436 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !1822, line: 62, baseType: !2437)
!2437 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !2438, line: 538, size: 256, elements: !2439)
!2438 = !DIFile(filename: "./output.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2439 = !{!2440, !2444, !2450, !2463}
!2440 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2437, file: !2438, line: 539, baseType: !2441, size: 32)
!2441 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "section_common", file: !2438, line: 482, size: 32, elements: !2442)
!2442 = !{!2443}
!2443 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2441, file: !2438, line: 484, baseType: !7, size: 32)
!2444 = !DIDerivedType(tag: DW_TAG_member, name: "named", scope: !2437, file: !2438, line: 540, baseType: !2445, size: 192)
!2445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "named_section", file: !2438, line: 488, size: 192, elements: !2446)
!2446 = !{!2447, !2448, !2449}
!2447 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2445, file: !2438, line: 489, baseType: !2441, size: 32)
!2448 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2445, file: !2438, line: 492, baseType: !2025, size: 64, offset: 64)
!2449 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2445, file: !2438, line: 496, baseType: !1821, size: 64, offset: 128)
!2450 = !DIDerivedType(tag: DW_TAG_member, name: "unnamed", scope: !2437, file: !2438, line: 541, baseType: !2451, size: 256)
!2451 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "unnamed_section", file: !2438, line: 504, size: 256, elements: !2452)
!2452 = !{!2453, !2454, !2461, !2462}
!2453 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2451, file: !2438, line: 505, baseType: !2441, size: 32)
!2454 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !2451, file: !2438, line: 509, baseType: !2455, size: 64, offset: 64)
!2455 = !DIDerivedType(tag: DW_TAG_typedef, name: "unnamed_section_callback", file: !2438, line: 501, baseType: !2456)
!2456 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2457, size: 64)
!2457 = !DISubroutineType(types: !2458)
!2458 = !{null, !2459}
!2459 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2460, size: 64)
!2460 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!2461 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !2451, file: !2438, line: 510, baseType: !2459, size: 64, offset: 128)
!2462 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2451, file: !2438, line: 513, baseType: !2435, size: 64, offset: 192)
!2463 = !DIDerivedType(tag: DW_TAG_member, name: "noswitch", scope: !2437, file: !2438, line: 542, baseType: !2464, size: 128)
!2464 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "noswitch_section", file: !2438, line: 530, size: 128, elements: !2465)
!2465 = !{!2466, !2467}
!2466 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2464, file: !2438, line: 531, baseType: !2441, size: 32)
!2467 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !2464, file: !2438, line: 534, baseType: !2468, size: 64, offset: 64)
!2468 = !DIDerivedType(tag: DW_TAG_typedef, name: "noswitch_section_callback", file: !2438, line: 525, baseType: !2469)
!2469 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2470, size: 64)
!2470 = !DISubroutineType(types: !2471)
!2471 = !{!1941, !1821, !2025, !1875, !1875}
!2472 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !2432, file: !2002, line: 211, baseType: !7, size: 32, offset: 64)
!2473 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2432, file: !2002, line: 214, baseType: !1877, size: 64, offset: 128)
!2474 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !2432, file: !2002, line: 224, baseType: !2475, size: 64, offset: 192)
!2475 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2476, size: 64)
!2476 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !2002, line: 202, baseType: !2477)
!2477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !2002, line: 202, size: 128, elements: !2478)
!2478 = !{!2479}
!2479 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2477, file: !2002, line: 202, baseType: !2480, size: 128)
!2480 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !2002, line: 200, baseType: !2481)
!2481 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !2002, line: 200, size: 128, elements: !2482)
!2482 = !{!2483, !2484, !2485}
!2483 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2481, file: !2002, line: 200, baseType: !7, size: 32)
!2484 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2481, file: !2002, line: 200, baseType: !7, size: 32, offset: 32)
!2485 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2481, file: !2002, line: 200, baseType: !2035, size: 64, offset: 64)
!2486 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !2432, file: !2002, line: 234, baseType: !2475, size: 64, offset: 256)
!2487 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2426, file: !2002, line: 197, baseType: !1877, size: 64, offset: 256)
!2488 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !2015, file: !2002, line: 319, baseType: !1884, size: 256)
!2489 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !2015, file: !2002, line: 320, baseType: !1903, size: 192)
!2490 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !1824, file: !135, line: 3384, baseType: !2491, size: 1472)
!2491 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !135, line: 3114, size: 1472, elements: !2492)
!2492 = !{!2493, !2514, !2515, !2516, !2517}
!2493 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2491, file: !135, line: 3115, baseType: !2494, size: 1216)
!2494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !135, line: 2984, size: 1216, elements: !2495)
!2495 = !{!2496, !2497, !2498, !2499, !2500, !2501, !2502, !2503, !2504, !2505, !2506, !2507, !2508, !2509, !2510, !2511, !2512, !2513}
!2496 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2494, file: !135, line: 2985, baseType: !1995, size: 960)
!2497 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !2494, file: !135, line: 2986, baseType: !1821, size: 64, offset: 960)
!2498 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !2494, file: !135, line: 2987, baseType: !1821, size: 64, offset: 1024)
!2499 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !2494, file: !135, line: 2988, baseType: !1821, size: 64, offset: 1088)
!2500 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !2494, file: !135, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!2501 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !2494, file: !135, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!2502 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !2494, file: !135, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!2503 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !2494, file: !135, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!2504 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !2494, file: !135, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!2505 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !2494, file: !135, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!2506 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !2494, file: !135, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!2507 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !2494, file: !135, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!2508 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !2494, file: !135, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!2509 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !2494, file: !135, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!2510 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !2494, file: !135, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!2511 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !2494, file: !135, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!2512 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !2494, file: !135, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!2513 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !2494, file: !135, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!2514 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !2491, file: !135, line: 3117, baseType: !1821, size: 64, offset: 1216)
!2515 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !2491, file: !135, line: 3119, baseType: !1821, size: 64, offset: 1280)
!2516 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !2491, file: !135, line: 3121, baseType: !1821, size: 64, offset: 1344)
!2517 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !2491, file: !135, line: 3123, baseType: !1821, size: 64, offset: 1408)
!2518 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !1824, file: !135, line: 3385, baseType: !2519, size: 1088)
!2519 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !135, line: 2874, size: 1088, elements: !2520)
!2520 = !{!2521, !2522, !2523}
!2521 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2519, file: !135, line: 2875, baseType: !1995, size: 960)
!2522 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !2519, file: !135, line: 2876, baseType: !1999, size: 64, offset: 960)
!2523 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2519, file: !135, line: 2877, baseType: !2524, size: 64, offset: 1024)
!2524 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2525, size: 64)
!2525 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !2526, line: 172, size: 128, elements: !2527)
!2526 = !DIFile(filename: "./tree-flow.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2527 = !{!2528, !2529, !2530, !2531, !2532, !2533, !2534}
!2528 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !2525, file: !2526, line: 174, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!2529 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !2525, file: !2526, line: 178, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!2530 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !2525, file: !2526, line: 183, baseType: !7, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!2531 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !2525, file: !2526, line: 187, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2532 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !2525, file: !2526, line: 192, baseType: !7, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2533 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !2525, file: !2526, line: 195, baseType: !7, size: 32, offset: 32)
!2534 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !2525, file: !2526, line: 199, baseType: !1821, size: 64, offset: 64)
!2535 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !1824, file: !135, line: 3386, baseType: !2494, size: 1216)
!2536 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !1824, file: !135, line: 3387, baseType: !2537, size: 1280)
!2537 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !135, line: 3093, size: 1280, elements: !2538)
!2538 = !{!2539, !2540}
!2539 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2537, file: !135, line: 3094, baseType: !2494, size: 1216)
!2540 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2537, file: !135, line: 3095, baseType: !2524, size: 64, offset: 1216)
!2541 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !1824, file: !135, line: 3388, baseType: !2542, size: 1216)
!2542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !135, line: 2824, size: 1216, elements: !2543)
!2543 = !{!2544, !2545, !2546, !2547, !2548, !2549}
!2544 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2542, file: !135, line: 2825, baseType: !1957, size: 896)
!2545 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2542, file: !135, line: 2827, baseType: !1821, size: 64, offset: 896)
!2546 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !2542, file: !135, line: 2828, baseType: !1821, size: 64, offset: 960)
!2547 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !2542, file: !135, line: 2829, baseType: !1821, size: 64, offset: 1024)
!2548 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !2542, file: !135, line: 2830, baseType: !1821, size: 64, offset: 1088)
!2549 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !2542, file: !135, line: 2831, baseType: !1821, size: 64, offset: 1152)
!2550 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !1824, file: !135, line: 3389, baseType: !2551, size: 1024)
!2551 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !135, line: 2850, size: 1024, elements: !2552)
!2552 = !{!2553, !2554, !2555}
!2553 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2551, file: !135, line: 2851, baseType: !1995, size: 960)
!2554 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !2551, file: !135, line: 2852, baseType: !1918, size: 32, offset: 960)
!2555 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !2551, file: !135, line: 2853, baseType: !1918, size: 32, offset: 992)
!2556 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !1824, file: !135, line: 3390, baseType: !2557, size: 1024)
!2557 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !135, line: 2857, size: 1024, elements: !2558)
!2558 = !{!2559, !2560}
!2559 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2557, file: !135, line: 2858, baseType: !1995, size: 960)
!2560 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2557, file: !135, line: 2859, baseType: !2524, size: 64, offset: 960)
!2561 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !1824, file: !135, line: 3391, baseType: !2562, size: 960)
!2562 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !135, line: 2862, size: 960, elements: !2563)
!2563 = !{!2564}
!2564 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2562, file: !135, line: 2863, baseType: !1995, size: 960)
!2565 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !1824, file: !135, line: 3392, baseType: !2566, size: 1472)
!2566 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !135, line: 3304, size: 1472, elements: !2567)
!2567 = !{!2568}
!2568 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2566, file: !135, line: 3305, baseType: !2491, size: 1472)
!2569 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !1824, file: !135, line: 3393, baseType: !2570, size: 1792)
!2570 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !135, line: 3248, size: 1792, elements: !2571)
!2571 = !{!2572, !2573, !2785, !2786, !2787, !2788, !2789, !2790, !2791, !2792, !2793, !2794, !2795, !2796, !2797, !2798, !2799, !2800, !2801, !2802, !2803, !2804, !2805}
!2572 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2570, file: !135, line: 3249, baseType: !2491, size: 1472)
!2573 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !2570, file: !135, line: 3251, baseType: !2574, size: 64, offset: 1472)
!2574 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2575, size: 64)
!2575 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !2576, line: 463, size: 1152, elements: !2577)
!2576 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2577 = !{!2578, !2581, !2612, !2613, !2726, !2729, !2730, !2731, !2732, !2733, !2734, !2758, !2761, !2762, !2763, !2764, !2765, !2766, !2767, !2768, !2769, !2770, !2771, !2772, !2773, !2774, !2775, !2776, !2777, !2778, !2779, !2780, !2781, !2782, !2783, !2784}
!2578 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !2575, file: !2576, line: 464, baseType: !2579, size: 64)
!2579 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2580, size: 64)
!2580 = !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !2576, line: 464, flags: DIFlagFwdDecl)
!2581 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !2575, file: !2576, line: 467, baseType: !2582, size: 64, offset: 64)
!2582 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2583, size: 64)
!2583 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !330, line: 374, size: 640, elements: !2584)
!2584 = !{!2585, !2587, !2588, !2601, !2602, !2603, !2604, !2605, !2606, !2608, !2610, !2611}
!2585 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !2583, file: !330, line: 377, baseType: !2586, size: 64)
!2586 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !1822, line: 111, baseType: !2116)
!2587 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !2583, file: !330, line: 378, baseType: !2586, size: 64, offset: 64)
!2588 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !2583, file: !330, line: 381, baseType: !2589, size: 64, offset: 128)
!2589 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2590, size: 64)
!2590 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !330, line: 282, baseType: !2591)
!2591 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !330, line: 282, size: 128, elements: !2592)
!2592 = !{!2593}
!2593 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2591, file: !330, line: 282, baseType: !2594, size: 128)
!2594 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !330, line: 281, baseType: !2595)
!2595 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !330, line: 281, size: 128, elements: !2596)
!2596 = !{!2597, !2598, !2599}
!2597 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2595, file: !330, line: 281, baseType: !7, size: 32)
!2598 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2595, file: !330, line: 281, baseType: !7, size: 32, offset: 32)
!2599 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2595, file: !330, line: 281, baseType: !2600, size: 64, offset: 64)
!2600 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2586, size: 64, elements: !1922)
!2601 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !2583, file: !330, line: 384, baseType: !1918, size: 32, offset: 192)
!2602 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !2583, file: !330, line: 387, baseType: !1918, size: 32, offset: 224)
!2603 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !2583, file: !330, line: 390, baseType: !1918, size: 32, offset: 256)
!2604 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !2583, file: !330, line: 394, baseType: !2589, size: 64, offset: 320)
!2605 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !2583, file: !330, line: 396, baseType: !329, size: 32, offset: 384)
!2606 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !2583, file: !330, line: 399, baseType: !2607, size: 64, offset: 416)
!2607 = !DICompositeType(tag: DW_TAG_array_type, baseType: !335, size: 64, elements: !2069)
!2608 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !2583, file: !330, line: 402, baseType: !2609, size: 64, offset: 480)
!2609 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !2069)
!2610 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !2583, file: !330, line: 406, baseType: !1918, size: 32, offset: 544)
!2611 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !2583, file: !330, line: 409, baseType: !1918, size: 32, offset: 576)
!2612 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !2575, file: !2576, line: 470, baseType: !2143, size: 64, offset: 128)
!2613 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !2575, file: !2576, line: 473, baseType: !2614, size: 64, offset: 192)
!2614 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2615, size: 64)
!2615 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !2526, line: 39, size: 1152, elements: !2616)
!2616 = !{!2617, !2665, !2678, !2690, !2691, !2703, !2704, !2708, !2709, !2710, !2711, !2712}
!2617 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !2615, file: !2526, line: 41, baseType: !2618, size: 64)
!2618 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !2619, line: 144, baseType: !2620)
!2619 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2620 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2621, size: 64)
!2621 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !2619, line: 100, size: 896, elements: !2622)
!2622 = !{!2623, !2629, !2634, !2639, !2641, !2642, !2643, !2644, !2645, !2646, !2651, !2653, !2654, !2659, !2664}
!2623 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !2621, file: !2619, line: 102, baseType: !2624, size: 64)
!2624 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !2619, line: 52, baseType: !2625)
!2625 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2626, size: 64)
!2626 = !DISubroutineType(types: !2627)
!2627 = !{!2628, !2459}
!2628 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !2619, line: 47, baseType: !7)
!2629 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !2621, file: !2619, line: 105, baseType: !2630, size: 64, offset: 64)
!2630 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !2619, line: 59, baseType: !2631)
!2631 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2632, size: 64)
!2632 = !DISubroutineType(types: !2633)
!2633 = !{!1918, !2459, !2459}
!2634 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !2621, file: !2619, line: 108, baseType: !2635, size: 64, offset: 128)
!2635 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !2619, line: 63, baseType: !2636)
!2636 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2637, size: 64)
!2637 = !DISubroutineType(types: !2638)
!2638 = !{null, !2105}
!2639 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !2621, file: !2619, line: 111, baseType: !2640, size: 64, offset: 192)
!2640 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2105, size: 64)
!2641 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2621, file: !2619, line: 114, baseType: !2298, size: 64, offset: 256)
!2642 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !2621, file: !2619, line: 117, baseType: !2298, size: 64, offset: 320)
!2643 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !2621, file: !2619, line: 120, baseType: !2298, size: 64, offset: 384)
!2644 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !2621, file: !2619, line: 124, baseType: !7, size: 32, offset: 448)
!2645 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !2621, file: !2619, line: 128, baseType: !7, size: 32, offset: 480)
!2646 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !2621, file: !2619, line: 131, baseType: !2647, size: 64, offset: 512)
!2647 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !2619, line: 75, baseType: !2648)
!2648 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2649, size: 64)
!2649 = !DISubroutineType(types: !2650)
!2650 = !{!2105, !2298, !2298}
!2651 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !2621, file: !2619, line: 132, baseType: !2652, size: 64, offset: 576)
!2652 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !2619, line: 78, baseType: !2636)
!2653 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !2621, file: !2619, line: 135, baseType: !2105, size: 64, offset: 640)
!2654 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !2621, file: !2619, line: 136, baseType: !2655, size: 64, offset: 704)
!2655 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !2619, line: 82, baseType: !2656)
!2656 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2657, size: 64)
!2657 = !DISubroutineType(types: !2658)
!2658 = !{!2105, !2105, !2298, !2298}
!2659 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !2621, file: !2619, line: 137, baseType: !2660, size: 64, offset: 768)
!2660 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !2619, line: 83, baseType: !2661)
!2661 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2662, size: 64)
!2662 = !DISubroutineType(types: !2663)
!2663 = !{null, !2105, !2105}
!2664 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !2621, file: !2619, line: 141, baseType: !7, size: 32, offset: 832)
!2665 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !2615, file: !2526, line: 48, baseType: !2666, size: 64, offset: 64)
!2666 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2667, size: 64)
!2667 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !810, line: 35, baseType: !2668)
!2668 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !810, line: 35, size: 128, elements: !2669)
!2669 = !{!2670}
!2670 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2668, file: !810, line: 35, baseType: !2671, size: 128)
!2671 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !810, line: 33, baseType: !2672)
!2672 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !810, line: 33, size: 128, elements: !2673)
!2673 = !{!2674, !2675, !2676}
!2674 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2672, file: !810, line: 33, baseType: !7, size: 32)
!2675 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2672, file: !810, line: 33, baseType: !7, size: 32, offset: 32)
!2676 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2672, file: !810, line: 33, baseType: !2677, size: 64, offset: 64)
!2677 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2152, size: 64, elements: !1922)
!2678 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !2615, file: !2526, line: 51, baseType: !2679, size: 64, offset: 128)
!2679 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2680, size: 64)
!2680 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !135, line: 183, baseType: !2681)
!2681 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !135, line: 183, size: 128, elements: !2682)
!2682 = !{!2683}
!2683 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2681, file: !135, line: 183, baseType: !2684, size: 128)
!2684 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !135, line: 182, baseType: !2685)
!2685 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !135, line: 182, size: 128, elements: !2686)
!2686 = !{!2687, !2688, !2689}
!2687 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2685, file: !135, line: 182, baseType: !7, size: 32)
!2688 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2685, file: !135, line: 182, baseType: !7, size: 32, offset: 32)
!2689 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2685, file: !135, line: 182, baseType: !2206, size: 64, offset: 64)
!2690 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !2615, file: !2526, line: 54, baseType: !1821, size: 64, offset: 192)
!2691 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !2615, file: !2526, line: 57, baseType: !2692, size: 128, offset: 256)
!2692 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !2693, line: 31, size: 128, elements: !2694)
!2693 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2694 = !{!2695, !2696, !2697, !2698, !2699, !2700, !2701}
!2695 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !2692, file: !2693, line: 35, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!2696 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !2692, file: !2693, line: 39, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!2697 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !2692, file: !2693, line: 42, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!2698 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !2692, file: !2693, line: 46, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!2699 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !2692, file: !2693, line: 50, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2700 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !2692, file: !2693, line: 53, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2701 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2692, file: !2693, line: 56, baseType: !2702, size: 64, offset: 64)
!2702 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !1822, line: 47, baseType: !2053)
!2703 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !2615, file: !2526, line: 60, baseType: !2692, size: 128, offset: 384)
!2704 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !2615, file: !2526, line: 64, baseType: !2705, size: 64, offset: 512)
!2705 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2706, size: 64)
!2706 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !2707, line: 33, flags: DIFlagFwdDecl)
!2707 = !DIFile(filename: "./pointer-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2708 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !2615, file: !2526, line: 67, baseType: !1821, size: 64, offset: 576)
!2709 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !2615, file: !2526, line: 73, baseType: !2618, size: 64, offset: 640)
!2710 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !2615, file: !2526, line: 77, baseType: !2702, size: 64, offset: 704)
!2711 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !2615, file: !2526, line: 80, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!2712 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !2615, file: !2526, line: 82, baseType: !2713, size: 320, offset: 832)
!2713 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !2183, line: 62, size: 320, elements: !2714)
!2714 = !{!2715, !2721, !2722, !2723, !2724, !2725}
!2715 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !2713, file: !2183, line: 63, baseType: !2716, size: 64)
!2716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2717, size: 64)
!2717 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !2183, line: 56, size: 128, elements: !2718)
!2718 = !{!2719, !2720}
!2719 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2717, file: !2183, line: 57, baseType: !2716, size: 64)
!2720 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !2717, file: !2183, line: 58, baseType: !1920, size: 8, offset: 64)
!2721 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !2713, file: !2183, line: 64, baseType: !7, size: 32, offset: 64)
!2722 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !2713, file: !2183, line: 66, baseType: !7, size: 32, offset: 96)
!2723 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !2713, file: !2183, line: 68, baseType: !1941, size: 8, offset: 128)
!2724 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !2713, file: !2183, line: 70, baseType: !2181, size: 64, offset: 192)
!2725 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !2713, file: !2183, line: 71, baseType: !2189, size: 64, offset: 256)
!2726 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !2575, file: !2576, line: 476, baseType: !2727, size: 64, offset: 256)
!2727 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2728, size: 64)
!2728 = !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !2576, line: 476, flags: DIFlagFwdDecl)
!2729 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !2575, file: !2576, line: 479, baseType: !2618, size: 64, offset: 320)
!2730 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2575, file: !2576, line: 484, baseType: !1821, size: 64, offset: 384)
!2731 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !2575, file: !2576, line: 488, baseType: !1821, size: 64, offset: 448)
!2732 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !2575, file: !2576, line: 493, baseType: !1821, size: 64, offset: 512)
!2733 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !2575, file: !2576, line: 496, baseType: !1821, size: 64, offset: 576)
!2734 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !2575, file: !2576, line: 501, baseType: !2735, size: 64, offset: 640)
!2735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2736, size: 64)
!2736 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !341, line: 2355, size: 576, elements: !2737)
!2737 = !{!2738, !2741, !2742, !2743, !2744, !2746, !2747, !2752, !2753, !2754, !2755, !2756, !2757}
!2738 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !2736, file: !341, line: 2356, baseType: !2739, size: 64)
!2739 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2740, size: 64)
!2740 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !341, line: 2356, flags: DIFlagFwdDecl)
!2741 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !2736, file: !341, line: 2357, baseType: !2025, size: 64, offset: 64)
!2742 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !2736, file: !341, line: 2358, baseType: !1918, size: 32, offset: 128)
!2743 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !2736, file: !341, line: 2359, baseType: !1918, size: 32, offset: 160)
!2744 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !2736, file: !341, line: 2360, baseType: !2745, size: 128, offset: 192)
!2745 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1918, size: 128, elements: !2094)
!2746 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !2736, file: !341, line: 2364, baseType: !1918, size: 32, offset: 320)
!2747 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !2736, file: !341, line: 2367, baseType: !2748, size: 128, offset: 384)
!2748 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !341, line: 2349, size: 128, elements: !2749)
!2749 = !{!2750, !2751}
!2750 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !2748, file: !341, line: 2351, baseType: !1999, size: 64)
!2751 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2748, file: !341, line: 2352, baseType: !1877, size: 64, offset: 64)
!2752 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !2736, file: !341, line: 2371, baseType: !340, size: 32, offset: 512)
!2753 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !2736, file: !341, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!2754 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !2736, file: !341, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!2755 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !2736, file: !341, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!2756 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !2736, file: !341, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!2757 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !2736, file: !341, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!2758 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !2575, file: !2576, line: 504, baseType: !2759, size: 64, offset: 704)
!2759 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2760, size: 64)
!2760 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !2576, line: 504, flags: DIFlagFwdDecl)
!2761 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !2575, file: !2576, line: 507, baseType: !2618, size: 64, offset: 768)
!2762 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !2575, file: !2576, line: 510, baseType: !1918, size: 32, offset: 832)
!2763 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !2575, file: !2576, line: 513, baseType: !1918, size: 32, offset: 864)
!2764 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !2575, file: !2576, line: 516, baseType: !1949, size: 32, offset: 896)
!2765 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !2575, file: !2576, line: 519, baseType: !1949, size: 32, offset: 928)
!2766 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !2575, file: !2576, line: 522, baseType: !7, size: 32, offset: 960)
!2767 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !2575, file: !2576, line: 523, baseType: !7, size: 32, offset: 992)
!2768 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !2575, file: !2576, line: 528, baseType: !2025, size: 64, offset: 1024)
!2769 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !2575, file: !2576, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!2770 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !2575, file: !2576, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!2771 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !2575, file: !2576, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!2772 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !2575, file: !2576, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!2773 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !2575, file: !2576, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!2774 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !2575, file: !2576, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!2775 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !2575, file: !2576, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!2776 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !2575, file: !2576, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!2777 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !2575, file: !2576, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!2778 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !2575, file: !2576, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!2779 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !2575, file: !2576, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!2780 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !2575, file: !2576, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!2781 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !2575, file: !2576, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!2782 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !2575, file: !2576, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!2783 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !2575, file: !2576, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!2784 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !2575, file: !2576, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!2785 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !2570, file: !135, line: 3254, baseType: !1821, size: 64, offset: 1536)
!2786 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !2570, file: !135, line: 3257, baseType: !1821, size: 64, offset: 1600)
!2787 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !2570, file: !135, line: 3258, baseType: !1821, size: 64, offset: 1664)
!2788 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !2570, file: !135, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!2789 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !2570, file: !135, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!2790 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !2570, file: !135, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!2791 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !2570, file: !135, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!2792 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !2570, file: !135, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!2793 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !2570, file: !135, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!2794 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !2570, file: !135, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!2795 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !2570, file: !135, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!2796 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !2570, file: !135, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!2797 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !2570, file: !135, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!2798 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !2570, file: !135, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!2799 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !2570, file: !135, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!2800 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !2570, file: !135, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!2801 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !2570, file: !135, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!2802 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !2570, file: !135, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!2803 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !2570, file: !135, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!2804 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !2570, file: !135, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!2805 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !2570, file: !135, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!2806 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1824, file: !135, line: 3394, baseType: !2807, size: 1344)
!2807 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !135, line: 2279, size: 1344, elements: !2808)
!2808 = !{!2809, !2810, !2811, !2812, !2813, !2814, !2815, !2816, !2817, !2818, !2819, !2820, !2821, !2822, !2823, !2824, !2825, !2826, !2827, !2828, !2829, !2830, !2831, !2832, !2833, !2834, !2842, !2843, !2844, !2845, !2846, !2847, !2848, !2849, !2850}
!2809 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2807, file: !135, line: 2280, baseType: !1860, size: 192)
!2810 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !2807, file: !135, line: 2281, baseType: !1821, size: 64, offset: 192)
!2811 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2807, file: !135, line: 2282, baseType: !1821, size: 64, offset: 256)
!2812 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !2807, file: !135, line: 2283, baseType: !1821, size: 64, offset: 320)
!2813 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !2807, file: !135, line: 2284, baseType: !1821, size: 64, offset: 384)
!2814 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2807, file: !135, line: 2285, baseType: !7, size: 32, offset: 448)
!2815 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !2807, file: !135, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!2816 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !2807, file: !135, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!2817 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !2807, file: !135, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!2818 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !2807, file: !135, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!2819 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !2807, file: !135, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!2820 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !2807, file: !135, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!2821 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2807, file: !135, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!2822 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !2807, file: !135, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!2823 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !2807, file: !135, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!2824 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !2807, file: !135, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!2825 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !2807, file: !135, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!2826 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !2807, file: !135, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!2827 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !2807, file: !135, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!2828 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !2807, file: !135, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!2829 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !2807, file: !135, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!2830 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2807, file: !135, line: 2305, baseType: !7, size: 32, offset: 512)
!2831 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !2807, file: !135, line: 2306, baseType: !2409, size: 32, offset: 544)
!2832 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !2807, file: !135, line: 2307, baseType: !1821, size: 64, offset: 576)
!2833 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !2807, file: !135, line: 2308, baseType: !1821, size: 64, offset: 640)
!2834 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !2807, file: !135, line: 2314, baseType: !2835, size: 64, offset: 704)
!2835 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !135, line: 2309, size: 64, elements: !2836)
!2836 = !{!2837, !2838, !2839}
!2837 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !2835, file: !135, line: 2310, baseType: !1918, size: 32)
!2838 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !2835, file: !135, line: 2311, baseType: !2025, size: 64)
!2839 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !2835, file: !135, line: 2312, baseType: !2840, size: 64)
!2840 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2841, size: 64)
!2841 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !135, line: 2277, flags: DIFlagFwdDecl)
!2842 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2807, file: !135, line: 2315, baseType: !1821, size: 64, offset: 768)
!2843 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !2807, file: !135, line: 2316, baseType: !1821, size: 64, offset: 832)
!2844 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !2807, file: !135, line: 2317, baseType: !1821, size: 64, offset: 896)
!2845 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !2807, file: !135, line: 2318, baseType: !1821, size: 64, offset: 960)
!2846 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !2807, file: !135, line: 2319, baseType: !1821, size: 64, offset: 1024)
!2847 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !2807, file: !135, line: 2320, baseType: !1821, size: 64, offset: 1088)
!2848 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !2807, file: !135, line: 2321, baseType: !1821, size: 64, offset: 1152)
!2849 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !2807, file: !135, line: 2322, baseType: !1821, size: 64, offset: 1216)
!2850 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !2807, file: !135, line: 2324, baseType: !2851, size: 64, offset: 1280)
!2851 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2852, size: 64)
!2852 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !135, line: 2324, flags: DIFlagFwdDecl)
!2853 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !1824, file: !135, line: 3395, baseType: !2854, size: 320)
!2854 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !135, line: 1469, size: 320, elements: !2855)
!2855 = !{!2856, !2857, !2858}
!2856 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2854, file: !135, line: 1470, baseType: !1860, size: 192)
!2857 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !2854, file: !135, line: 1471, baseType: !1821, size: 64, offset: 192)
!2858 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2854, file: !135, line: 1472, baseType: !1821, size: 64, offset: 256)
!2859 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1824, file: !135, line: 3396, baseType: !2860, size: 320)
!2860 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !135, line: 1482, size: 320, elements: !2861)
!2861 = !{!2862, !2863, !2864}
!2862 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2860, file: !135, line: 1483, baseType: !1860, size: 192)
!2863 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !2860, file: !135, line: 1484, baseType: !1918, size: 32, offset: 192)
!2864 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !2860, file: !135, line: 1485, baseType: !2206, size: 64, offset: 256)
!2865 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !1824, file: !135, line: 3397, baseType: !2866, size: 384)
!2866 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !135, line: 1829, size: 384, elements: !2867)
!2867 = !{!2868, !2869, !2870, !2871}
!2868 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2866, file: !135, line: 1830, baseType: !1860, size: 192)
!2869 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2866, file: !135, line: 1831, baseType: !1949, size: 32, offset: 192)
!2870 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2866, file: !135, line: 1832, baseType: !1821, size: 64, offset: 256)
!2871 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !2866, file: !135, line: 1835, baseType: !2206, size: 64, offset: 320)
!2872 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1824, file: !135, line: 3398, baseType: !2873, size: 704)
!2873 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !135, line: 1898, size: 704, elements: !2874)
!2874 = !{!2875, !2876, !2877, !2878, !2879, !2884}
!2875 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2873, file: !135, line: 1899, baseType: !1860, size: 192)
!2876 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !2873, file: !135, line: 1902, baseType: !1821, size: 64, offset: 192)
!2877 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !2873, file: !135, line: 1905, baseType: !2152, size: 64, offset: 256)
!2878 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !2873, file: !135, line: 1908, baseType: !7, size: 32, offset: 320)
!2879 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !2873, file: !135, line: 1911, baseType: !2880, size: 64, offset: 384)
!2880 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2881, size: 64)
!2881 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !2526, line: 117, size: 128, elements: !2882)
!2882 = !{!2883}
!2883 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !2881, file: !2526, line: 120, baseType: !2692, size: 128)
!2884 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !2873, file: !135, line: 1914, baseType: !2194, size: 256, offset: 448)
!2885 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1824, file: !135, line: 3399, baseType: !2886, size: 704)
!2886 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !135, line: 2008, size: 704, elements: !2887)
!2887 = !{!2888, !2889, !2890, !2891, !2892, !2893, !2894, !2895, !2896, !2897, !2898}
!2888 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2886, file: !135, line: 2009, baseType: !1860, size: 192)
!2889 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !2886, file: !135, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!2890 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !2886, file: !135, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!2891 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2886, file: !135, line: 2014, baseType: !1949, size: 32, offset: 224)
!2892 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2886, file: !135, line: 2016, baseType: !1821, size: 64, offset: 256)
!2893 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !2886, file: !135, line: 2017, baseType: !2679, size: 64, offset: 320)
!2894 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !2886, file: !135, line: 2019, baseType: !1821, size: 64, offset: 384)
!2895 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !2886, file: !135, line: 2020, baseType: !1821, size: 64, offset: 448)
!2896 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !2886, file: !135, line: 2021, baseType: !1821, size: 64, offset: 512)
!2897 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !2886, file: !135, line: 2022, baseType: !1821, size: 64, offset: 576)
!2898 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !2886, file: !135, line: 2023, baseType: !1821, size: 64, offset: 640)
!2899 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1824, file: !135, line: 3400, baseType: !2900, size: 832)
!2900 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !135, line: 2430, size: 832, elements: !2901)
!2901 = !{!2902, !2903, !2904, !2905, !2906, !2907, !2908, !2909, !2910, !2911}
!2902 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2900, file: !135, line: 2431, baseType: !1860, size: 192)
!2903 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2900, file: !135, line: 2433, baseType: !1821, size: 64, offset: 192)
!2904 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !2900, file: !135, line: 2434, baseType: !1821, size: 64, offset: 256)
!2905 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !2900, file: !135, line: 2435, baseType: !1821, size: 64, offset: 320)
!2906 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !2900, file: !135, line: 2436, baseType: !1821, size: 64, offset: 384)
!2907 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !2900, file: !135, line: 2437, baseType: !2679, size: 64, offset: 448)
!2908 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !2900, file: !135, line: 2438, baseType: !1821, size: 64, offset: 512)
!2909 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !2900, file: !135, line: 2440, baseType: !1821, size: 64, offset: 576)
!2910 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !2900, file: !135, line: 2441, baseType: !1821, size: 64, offset: 640)
!2911 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !2900, file: !135, line: 2443, baseType: !2912, size: 128, offset: 704)
!2912 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !135, line: 182, baseType: !2913)
!2913 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !135, line: 182, size: 128, elements: !2914)
!2914 = !{!2915}
!2915 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2913, file: !135, line: 182, baseType: !2684, size: 128)
!2916 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !1824, file: !135, line: 3401, baseType: !2917, size: 320)
!2917 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !135, line: 3327, size: 320, elements: !2918)
!2918 = !{!2919, !2920, !2927}
!2919 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2917, file: !135, line: 3329, baseType: !1860, size: 192)
!2920 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !2917, file: !135, line: 3330, baseType: !2921, size: 64, offset: 192)
!2921 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2922, size: 64)
!2922 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !135, line: 3320, size: 192, elements: !2923)
!2923 = !{!2924, !2925, !2926}
!2924 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2922, file: !135, line: 3322, baseType: !2921, size: 64)
!2925 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2922, file: !135, line: 3323, baseType: !2921, size: 64, offset: 64)
!2926 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2922, file: !135, line: 3324, baseType: !1821, size: 64, offset: 128)
!2927 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !2917, file: !135, line: 3331, baseType: !2921, size: 64, offset: 256)
!2928 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !1824, file: !135, line: 3402, baseType: !2929, size: 256)
!2929 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !135, line: 1540, size: 256, elements: !2930)
!2930 = !{!2931, !2932}
!2931 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2929, file: !135, line: 1541, baseType: !1860, size: 192)
!2932 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !2929, file: !135, line: 1542, baseType: !2933, size: 64, offset: 192)
!2933 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2934, size: 64)
!2934 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !135, line: 1538, baseType: !2935)
!2935 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !135, line: 1538, size: 192, elements: !2936)
!2936 = !{!2937}
!2937 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2935, file: !135, line: 1538, baseType: !2938, size: 192)
!2938 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !135, line: 1537, baseType: !2939)
!2939 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !135, line: 1537, size: 192, elements: !2940)
!2940 = !{!2941, !2942, !2943}
!2941 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2939, file: !135, line: 1537, baseType: !7, size: 32)
!2942 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2939, file: !135, line: 1537, baseType: !7, size: 32, offset: 32)
!2943 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2939, file: !135, line: 1537, baseType: !2944, size: 128, offset: 64)
!2944 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2945, size: 128, elements: !1922)
!2945 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !135, line: 1535, baseType: !2946)
!2946 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !135, line: 1532, size: 128, elements: !2947)
!2947 = !{!2948, !2949}
!2948 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2946, file: !135, line: 1533, baseType: !1821, size: 64)
!2949 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2946, file: !135, line: 1534, baseType: !1821, size: 64, offset: 64)
!2950 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !1824, file: !135, line: 3403, baseType: !2951, size: 512)
!2951 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !135, line: 1938, size: 512, elements: !2952)
!2952 = !{!2953, !2954, !2955, !2956, !2962, !2963, !2964}
!2953 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2951, file: !135, line: 1939, baseType: !1860, size: 192)
!2954 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2951, file: !135, line: 1940, baseType: !1949, size: 32, offset: 192)
!2955 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2951, file: !135, line: 1941, baseType: !345, size: 32, offset: 224)
!2956 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !2951, file: !135, line: 1946, baseType: !2957, size: 32, offset: 256)
!2957 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !135, line: 1942, size: 32, elements: !2958)
!2958 = !{!2959, !2960, !2961}
!2959 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !2957, file: !135, line: 1943, baseType: !363, size: 32)
!2960 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !2957, file: !135, line: 1944, baseType: !370, size: 32)
!2961 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !2957, file: !135, line: 1945, baseType: !134, size: 32)
!2962 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !2951, file: !135, line: 1950, baseType: !2142, size: 64, offset: 320)
!2963 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !2951, file: !135, line: 1951, baseType: !2142, size: 64, offset: 384)
!2964 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !2951, file: !135, line: 1953, baseType: !2206, size: 64, offset: 448)
!2965 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !1824, file: !135, line: 3404, baseType: !2966, size: 1664)
!2966 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !135, line: 3337, size: 1664, elements: !2967)
!2967 = !{!2968, !2969}
!2968 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2966, file: !135, line: 3338, baseType: !1860, size: 192)
!2969 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2966, file: !135, line: 3341, baseType: !2970, size: 1472, offset: 192)
!2970 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !875, line: 410, size: 1472, elements: !2971)
!2971 = !{!2972, !2973, !2974, !2975, !2976, !2977, !2978, !2979, !2980, !2982, !2983, !2984, !2985, !2986, !2987, !2988, !2989, !2990, !2991, !2992, !2993, !2994, !2995, !2996, !2997, !2998, !2999, !3000, !3001, !3002, !3003, !3004, !3005, !3006, !3007, !3008, !3009, !3010, !3011, !3012, !3013, !3014, !3015, !3016, !3017, !3018, !3019, !3020, !3021, !3022, !3023, !3024, !3025, !3026, !3027, !3028, !3029, !3030, !3031, !3032, !3033, !3034, !3035, !3036, !3037, !3038, !3039, !3040, !3041, !3042, !3043, !3044, !3045, !3046, !3047, !3048, !3049, !3050, !3051, !3052, !3053, !3054, !3055, !3056, !3057, !3058, !3059, !3060, !3061, !3062, !3063, !3064, !3065, !3066, !3067, !3068, !3069, !3070, !3071, !3072, !3073, !3074, !3075, !3076, !3077, !3078, !3079, !3080, !3081, !3082, !3083, !3084, !3085, !3086, !3087, !3088, !3089, !3090, !3091, !3092, !3093, !3094, !3095, !3096, !3097, !3098, !3099, !3100, !3101, !3102, !3103, !3104, !3105, !3106, !3107, !3108, !3109, !3110, !3111, !3112, !3113, !3114, !3115, !3116, !3117, !3118, !3119, !3120, !3121, !3122, !3123, !3124, !3125, !3126, !3127, !3128, !3129, !3130, !3131, !3132, !3133, !3134, !3135}
!2972 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !2970, file: !875, line: 412, baseType: !1918, size: 32)
!2973 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !2970, file: !875, line: 413, baseType: !1918, size: 32, offset: 32)
!2974 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !2970, file: !875, line: 414, baseType: !1918, size: 32, offset: 64)
!2975 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !2970, file: !875, line: 415, baseType: !1918, size: 32, offset: 96)
!2976 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !2970, file: !875, line: 416, baseType: !1918, size: 32, offset: 128)
!2977 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !2970, file: !875, line: 417, baseType: !1918, size: 32, offset: 160)
!2978 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !2970, file: !875, line: 418, baseType: !1941, size: 8, offset: 192)
!2979 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !2970, file: !875, line: 419, baseType: !1941, size: 8, offset: 200)
!2980 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !2970, file: !875, line: 420, baseType: !2981, size: 8, offset: 208)
!2981 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!2982 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !2970, file: !875, line: 421, baseType: !2981, size: 8, offset: 216)
!2983 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !2970, file: !875, line: 422, baseType: !2981, size: 8, offset: 224)
!2984 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !2970, file: !875, line: 423, baseType: !2981, size: 8, offset: 232)
!2985 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !2970, file: !875, line: 424, baseType: !2981, size: 8, offset: 240)
!2986 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !2970, file: !875, line: 425, baseType: !2981, size: 8, offset: 248)
!2987 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !2970, file: !875, line: 426, baseType: !2981, size: 8, offset: 256)
!2988 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !2970, file: !875, line: 427, baseType: !2981, size: 8, offset: 264)
!2989 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !2970, file: !875, line: 428, baseType: !2981, size: 8, offset: 272)
!2990 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !2970, file: !875, line: 429, baseType: !2981, size: 8, offset: 280)
!2991 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !2970, file: !875, line: 430, baseType: !2981, size: 8, offset: 288)
!2992 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !2970, file: !875, line: 431, baseType: !2981, size: 8, offset: 296)
!2993 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !2970, file: !875, line: 432, baseType: !2981, size: 8, offset: 304)
!2994 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !2970, file: !875, line: 433, baseType: !2981, size: 8, offset: 312)
!2995 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !2970, file: !875, line: 434, baseType: !2981, size: 8, offset: 320)
!2996 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !2970, file: !875, line: 435, baseType: !2981, size: 8, offset: 328)
!2997 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !2970, file: !875, line: 436, baseType: !2981, size: 8, offset: 336)
!2998 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !2970, file: !875, line: 437, baseType: !2981, size: 8, offset: 344)
!2999 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !2970, file: !875, line: 438, baseType: !2981, size: 8, offset: 352)
!3000 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !2970, file: !875, line: 439, baseType: !2981, size: 8, offset: 360)
!3001 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !2970, file: !875, line: 440, baseType: !2981, size: 8, offset: 368)
!3002 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !2970, file: !875, line: 441, baseType: !2981, size: 8, offset: 376)
!3003 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !2970, file: !875, line: 442, baseType: !2981, size: 8, offset: 384)
!3004 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !2970, file: !875, line: 443, baseType: !2981, size: 8, offset: 392)
!3005 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !2970, file: !875, line: 444, baseType: !2981, size: 8, offset: 400)
!3006 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !2970, file: !875, line: 445, baseType: !2981, size: 8, offset: 408)
!3007 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !2970, file: !875, line: 446, baseType: !2981, size: 8, offset: 416)
!3008 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !2970, file: !875, line: 447, baseType: !2981, size: 8, offset: 424)
!3009 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !2970, file: !875, line: 448, baseType: !2981, size: 8, offset: 432)
!3010 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !2970, file: !875, line: 449, baseType: !2981, size: 8, offset: 440)
!3011 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !2970, file: !875, line: 450, baseType: !2981, size: 8, offset: 448)
!3012 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !2970, file: !875, line: 451, baseType: !2981, size: 8, offset: 456)
!3013 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !2970, file: !875, line: 452, baseType: !2981, size: 8, offset: 464)
!3014 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !2970, file: !875, line: 453, baseType: !2981, size: 8, offset: 472)
!3015 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !2970, file: !875, line: 454, baseType: !2981, size: 8, offset: 480)
!3016 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !2970, file: !875, line: 455, baseType: !2981, size: 8, offset: 488)
!3017 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !2970, file: !875, line: 456, baseType: !2981, size: 8, offset: 496)
!3018 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !2970, file: !875, line: 457, baseType: !2981, size: 8, offset: 504)
!3019 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !2970, file: !875, line: 458, baseType: !2981, size: 8, offset: 512)
!3020 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !2970, file: !875, line: 459, baseType: !2981, size: 8, offset: 520)
!3021 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !2970, file: !875, line: 460, baseType: !2981, size: 8, offset: 528)
!3022 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !2970, file: !875, line: 461, baseType: !2981, size: 8, offset: 536)
!3023 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !2970, file: !875, line: 462, baseType: !2981, size: 8, offset: 544)
!3024 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !2970, file: !875, line: 463, baseType: !2981, size: 8, offset: 552)
!3025 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !2970, file: !875, line: 464, baseType: !2981, size: 8, offset: 560)
!3026 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !2970, file: !875, line: 465, baseType: !2981, size: 8, offset: 568)
!3027 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !2970, file: !875, line: 466, baseType: !2981, size: 8, offset: 576)
!3028 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !2970, file: !875, line: 467, baseType: !2981, size: 8, offset: 584)
!3029 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !2970, file: !875, line: 468, baseType: !2981, size: 8, offset: 592)
!3030 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !2970, file: !875, line: 469, baseType: !2981, size: 8, offset: 600)
!3031 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !2970, file: !875, line: 470, baseType: !2981, size: 8, offset: 608)
!3032 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !2970, file: !875, line: 471, baseType: !2981, size: 8, offset: 616)
!3033 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !2970, file: !875, line: 472, baseType: !2981, size: 8, offset: 624)
!3034 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !2970, file: !875, line: 473, baseType: !2981, size: 8, offset: 632)
!3035 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !2970, file: !875, line: 474, baseType: !2981, size: 8, offset: 640)
!3036 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !2970, file: !875, line: 475, baseType: !2981, size: 8, offset: 648)
!3037 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !2970, file: !875, line: 476, baseType: !2981, size: 8, offset: 656)
!3038 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !2970, file: !875, line: 477, baseType: !2981, size: 8, offset: 664)
!3039 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !2970, file: !875, line: 478, baseType: !2981, size: 8, offset: 672)
!3040 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !2970, file: !875, line: 479, baseType: !2981, size: 8, offset: 680)
!3041 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !2970, file: !875, line: 480, baseType: !2981, size: 8, offset: 688)
!3042 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !2970, file: !875, line: 481, baseType: !2981, size: 8, offset: 696)
!3043 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !2970, file: !875, line: 482, baseType: !2981, size: 8, offset: 704)
!3044 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !2970, file: !875, line: 483, baseType: !2981, size: 8, offset: 712)
!3045 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !2970, file: !875, line: 484, baseType: !2981, size: 8, offset: 720)
!3046 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !2970, file: !875, line: 485, baseType: !2981, size: 8, offset: 728)
!3047 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !2970, file: !875, line: 486, baseType: !2981, size: 8, offset: 736)
!3048 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !2970, file: !875, line: 487, baseType: !2981, size: 8, offset: 744)
!3049 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !2970, file: !875, line: 488, baseType: !2981, size: 8, offset: 752)
!3050 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !2970, file: !875, line: 489, baseType: !2981, size: 8, offset: 760)
!3051 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !2970, file: !875, line: 490, baseType: !2981, size: 8, offset: 768)
!3052 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !2970, file: !875, line: 491, baseType: !2981, size: 8, offset: 776)
!3053 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !2970, file: !875, line: 492, baseType: !2981, size: 8, offset: 784)
!3054 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !2970, file: !875, line: 493, baseType: !2981, size: 8, offset: 792)
!3055 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !2970, file: !875, line: 494, baseType: !2981, size: 8, offset: 800)
!3056 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !2970, file: !875, line: 495, baseType: !2981, size: 8, offset: 808)
!3057 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !2970, file: !875, line: 496, baseType: !2981, size: 8, offset: 816)
!3058 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !2970, file: !875, line: 497, baseType: !2981, size: 8, offset: 824)
!3059 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !2970, file: !875, line: 498, baseType: !2981, size: 8, offset: 832)
!3060 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !2970, file: !875, line: 499, baseType: !2981, size: 8, offset: 840)
!3061 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !2970, file: !875, line: 500, baseType: !2981, size: 8, offset: 848)
!3062 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !2970, file: !875, line: 501, baseType: !2981, size: 8, offset: 856)
!3063 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !2970, file: !875, line: 502, baseType: !2981, size: 8, offset: 864)
!3064 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !2970, file: !875, line: 503, baseType: !2981, size: 8, offset: 872)
!3065 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !2970, file: !875, line: 504, baseType: !2981, size: 8, offset: 880)
!3066 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !2970, file: !875, line: 505, baseType: !2981, size: 8, offset: 888)
!3067 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !2970, file: !875, line: 506, baseType: !2981, size: 8, offset: 896)
!3068 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !2970, file: !875, line: 507, baseType: !2981, size: 8, offset: 904)
!3069 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !2970, file: !875, line: 508, baseType: !2981, size: 8, offset: 912)
!3070 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !2970, file: !875, line: 509, baseType: !2981, size: 8, offset: 920)
!3071 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !2970, file: !875, line: 510, baseType: !2981, size: 8, offset: 928)
!3072 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !2970, file: !875, line: 511, baseType: !2981, size: 8, offset: 936)
!3073 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !2970, file: !875, line: 512, baseType: !2981, size: 8, offset: 944)
!3074 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !2970, file: !875, line: 513, baseType: !2981, size: 8, offset: 952)
!3075 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !2970, file: !875, line: 514, baseType: !2981, size: 8, offset: 960)
!3076 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !2970, file: !875, line: 515, baseType: !2981, size: 8, offset: 968)
!3077 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !2970, file: !875, line: 516, baseType: !2981, size: 8, offset: 976)
!3078 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !2970, file: !875, line: 517, baseType: !2981, size: 8, offset: 984)
!3079 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !2970, file: !875, line: 518, baseType: !2981, size: 8, offset: 992)
!3080 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !2970, file: !875, line: 519, baseType: !2981, size: 8, offset: 1000)
!3081 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !2970, file: !875, line: 520, baseType: !2981, size: 8, offset: 1008)
!3082 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !2970, file: !875, line: 521, baseType: !2981, size: 8, offset: 1016)
!3083 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !2970, file: !875, line: 522, baseType: !2981, size: 8, offset: 1024)
!3084 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !2970, file: !875, line: 523, baseType: !2981, size: 8, offset: 1032)
!3085 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !2970, file: !875, line: 524, baseType: !2981, size: 8, offset: 1040)
!3086 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !2970, file: !875, line: 525, baseType: !2981, size: 8, offset: 1048)
!3087 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !2970, file: !875, line: 526, baseType: !2981, size: 8, offset: 1056)
!3088 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !2970, file: !875, line: 527, baseType: !2981, size: 8, offset: 1064)
!3089 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !2970, file: !875, line: 528, baseType: !2981, size: 8, offset: 1072)
!3090 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !2970, file: !875, line: 529, baseType: !2981, size: 8, offset: 1080)
!3091 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !2970, file: !875, line: 530, baseType: !2981, size: 8, offset: 1088)
!3092 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !2970, file: !875, line: 531, baseType: !2981, size: 8, offset: 1096)
!3093 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !2970, file: !875, line: 532, baseType: !2981, size: 8, offset: 1104)
!3094 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !2970, file: !875, line: 533, baseType: !2981, size: 8, offset: 1112)
!3095 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !2970, file: !875, line: 534, baseType: !2981, size: 8, offset: 1120)
!3096 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !2970, file: !875, line: 535, baseType: !2981, size: 8, offset: 1128)
!3097 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !2970, file: !875, line: 536, baseType: !2981, size: 8, offset: 1136)
!3098 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !2970, file: !875, line: 537, baseType: !2981, size: 8, offset: 1144)
!3099 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !2970, file: !875, line: 538, baseType: !2981, size: 8, offset: 1152)
!3100 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !2970, file: !875, line: 539, baseType: !2981, size: 8, offset: 1160)
!3101 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !2970, file: !875, line: 540, baseType: !2981, size: 8, offset: 1168)
!3102 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !2970, file: !875, line: 541, baseType: !2981, size: 8, offset: 1176)
!3103 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !2970, file: !875, line: 542, baseType: !2981, size: 8, offset: 1184)
!3104 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !2970, file: !875, line: 543, baseType: !2981, size: 8, offset: 1192)
!3105 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !2970, file: !875, line: 544, baseType: !2981, size: 8, offset: 1200)
!3106 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !2970, file: !875, line: 545, baseType: !2981, size: 8, offset: 1208)
!3107 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !2970, file: !875, line: 546, baseType: !2981, size: 8, offset: 1216)
!3108 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !2970, file: !875, line: 547, baseType: !2981, size: 8, offset: 1224)
!3109 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !2970, file: !875, line: 548, baseType: !2981, size: 8, offset: 1232)
!3110 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !2970, file: !875, line: 549, baseType: !2981, size: 8, offset: 1240)
!3111 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !2970, file: !875, line: 550, baseType: !2981, size: 8, offset: 1248)
!3112 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !2970, file: !875, line: 551, baseType: !2981, size: 8, offset: 1256)
!3113 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !2970, file: !875, line: 552, baseType: !2981, size: 8, offset: 1264)
!3114 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !2970, file: !875, line: 553, baseType: !2981, size: 8, offset: 1272)
!3115 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !2970, file: !875, line: 554, baseType: !2981, size: 8, offset: 1280)
!3116 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !2970, file: !875, line: 555, baseType: !2981, size: 8, offset: 1288)
!3117 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !2970, file: !875, line: 556, baseType: !2981, size: 8, offset: 1296)
!3118 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !2970, file: !875, line: 557, baseType: !2981, size: 8, offset: 1304)
!3119 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !2970, file: !875, line: 558, baseType: !2981, size: 8, offset: 1312)
!3120 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !2970, file: !875, line: 559, baseType: !2981, size: 8, offset: 1320)
!3121 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !2970, file: !875, line: 560, baseType: !2981, size: 8, offset: 1328)
!3122 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !2970, file: !875, line: 561, baseType: !2981, size: 8, offset: 1336)
!3123 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !2970, file: !875, line: 562, baseType: !2981, size: 8, offset: 1344)
!3124 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !2970, file: !875, line: 563, baseType: !2981, size: 8, offset: 1352)
!3125 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !2970, file: !875, line: 564, baseType: !2981, size: 8, offset: 1360)
!3126 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !2970, file: !875, line: 565, baseType: !2981, size: 8, offset: 1368)
!3127 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !2970, file: !875, line: 566, baseType: !2981, size: 8, offset: 1376)
!3128 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !2970, file: !875, line: 567, baseType: !2981, size: 8, offset: 1384)
!3129 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !2970, file: !875, line: 568, baseType: !2981, size: 8, offset: 1392)
!3130 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !2970, file: !875, line: 569, baseType: !2981, size: 8, offset: 1400)
!3131 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !2970, file: !875, line: 570, baseType: !2981, size: 8, offset: 1408)
!3132 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !2970, file: !875, line: 571, baseType: !2981, size: 8, offset: 1416)
!3133 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !2970, file: !875, line: 572, baseType: !2981, size: 8, offset: 1424)
!3134 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !2970, file: !875, line: 573, baseType: !2981, size: 8, offset: 1432)
!3135 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !2970, file: !875, line: 574, baseType: !2981, size: 8, offset: 1440)
!3136 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !1824, file: !135, line: 3405, baseType: !3137, size: 384)
!3137 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !135, line: 3352, size: 384, elements: !3138)
!3138 = !{!3139, !3140}
!3139 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3137, file: !135, line: 3353, baseType: !1860, size: 192)
!3140 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !3137, file: !135, line: 3356, baseType: !3141, size: 192, offset: 192)
!3141 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !875, line: 578, size: 192, elements: !3142)
!3142 = !{!3143, !3144, !3145, !3146, !3147, !3148, !3149, !3150, !3151, !3152, !3153}
!3143 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !3141, file: !875, line: 580, baseType: !1918, size: 32)
!3144 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !3141, file: !875, line: 581, baseType: !1918, size: 32, offset: 32)
!3145 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !3141, file: !875, line: 582, baseType: !1918, size: 32, offset: 64)
!3146 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !3141, file: !875, line: 583, baseType: !1918, size: 32, offset: 96)
!3147 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !3141, file: !875, line: 584, baseType: !1941, size: 8, offset: 128)
!3148 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !3141, file: !875, line: 585, baseType: !1941, size: 8, offset: 136)
!3149 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !3141, file: !875, line: 586, baseType: !1941, size: 8, offset: 144)
!3150 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !3141, file: !875, line: 587, baseType: !1941, size: 8, offset: 152)
!3151 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !3141, file: !875, line: 588, baseType: !1941, size: 8, offset: 160)
!3152 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !3141, file: !875, line: 589, baseType: !1941, size: 8, offset: 168)
!3153 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !3141, file: !875, line: 590, baseType: !1941, size: 8, offset: 176)
!3154 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3155, size: 64)
!3155 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2154)
!3156 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3157, size: 64)
!3157 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1821)
!3158 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3159, size: 64)
!3159 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_heap", file: !135, line: 184, baseType: !3160)
!3160 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_heap", file: !135, line: 184, size: 128, elements: !3161)
!3161 = !{!3162}
!3162 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3160, file: !135, line: 184, baseType: !2684, size: 128)
!3163 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3164, size: 64)
!3164 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_opt_pass_d", file: !401, line: 173, size: 1152, elements: !3165)
!3165 = !{!3166, !3190, !3194, !3358, !3359, !3363, !3368, !3369, !3373}
!3166 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !3164, file: !401, line: 175, baseType: !3167, size: 640)
!3167 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "opt_pass", file: !401, line: 114, size: 640, elements: !3168)
!3168 = !{!3169, !3170, !3171, !3175, !3179, !3181, !3182, !3183, !3185, !3186, !3187, !3188, !3189}
!3169 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !3167, file: !401, line: 117, baseType: !400, size: 32)
!3170 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3167, file: !401, line: 121, baseType: !2025, size: 64, offset: 64)
!3171 = !DIDerivedType(tag: DW_TAG_member, name: "gate", scope: !3167, file: !401, line: 125, baseType: !3172, size: 64, offset: 128)
!3172 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3173, size: 64)
!3173 = !DISubroutineType(types: !3174)
!3174 = !{!1941}
!3175 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !3167, file: !401, line: 130, baseType: !3176, size: 64, offset: 192)
!3176 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3177, size: 64)
!3177 = !DISubroutineType(types: !3178)
!3178 = !{!7}
!3179 = !DIDerivedType(tag: DW_TAG_member, name: "sub", scope: !3167, file: !401, line: 133, baseType: !3180, size: 64, offset: 256)
!3180 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3167, size: 64)
!3181 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3167, file: !401, line: 136, baseType: !3180, size: 64, offset: 320)
!3182 = !DIDerivedType(tag: DW_TAG_member, name: "static_pass_number", scope: !3167, file: !401, line: 139, baseType: !1918, size: 32, offset: 384)
!3183 = !DIDerivedType(tag: DW_TAG_member, name: "tv_id", scope: !3167, file: !401, line: 143, baseType: !3184, size: 32, offset: 416)
!3184 = !DIDerivedType(tag: DW_TAG_typedef, name: "timevar_id_t", file: !408, line: 80, baseType: !407)
!3185 = !DIDerivedType(tag: DW_TAG_member, name: "properties_required", scope: !3167, file: !401, line: 146, baseType: !7, size: 32, offset: 448)
!3186 = !DIDerivedType(tag: DW_TAG_member, name: "properties_provided", scope: !3167, file: !401, line: 147, baseType: !7, size: 32, offset: 480)
!3187 = !DIDerivedType(tag: DW_TAG_member, name: "properties_destroyed", scope: !3167, file: !401, line: 148, baseType: !7, size: 32, offset: 512)
!3188 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_start", scope: !3167, file: !401, line: 151, baseType: !7, size: 32, offset: 544)
!3189 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_finish", scope: !3167, file: !401, line: 152, baseType: !7, size: 32, offset: 576)
!3190 = !DIDerivedType(tag: DW_TAG_member, name: "generate_summary", scope: !3164, file: !401, line: 179, baseType: !3191, size: 64, offset: 640)
!3191 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3192, size: 64)
!3192 = !DISubroutineType(types: !3193)
!3193 = !{null}
!3194 = !DIDerivedType(tag: DW_TAG_member, name: "write_summary", scope: !3164, file: !401, line: 182, baseType: !3195, size: 64, offset: 704)
!3195 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3196, size: 64)
!3196 = !DISubroutineType(types: !3197)
!3197 = !{null, !3198}
!3198 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3199, size: 64)
!3199 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_node_set_def", file: !378, line: 276, size: 192, elements: !3200)
!3200 = !{!3201, !3202, !3357}
!3201 = !DIDerivedType(tag: DW_TAG_member, name: "hashtab", scope: !3199, file: !378, line: 278, baseType: !2618, size: 64)
!3202 = !DIDerivedType(tag: DW_TAG_member, name: "nodes", scope: !3199, file: !378, line: 279, baseType: !3203, size: 64, offset: 64)
!3203 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3204, size: 64)
!3204 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_cgraph_node_ptr_gc", file: !378, line: 272, baseType: !3205)
!3205 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_cgraph_node_ptr_gc", file: !378, line: 272, size: 128, elements: !3206)
!3206 = !{!3207}
!3207 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3205, file: !378, line: 272, baseType: !3208, size: 128)
!3208 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_cgraph_node_ptr_base", file: !378, line: 270, baseType: !3209)
!3209 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_cgraph_node_ptr_base", file: !378, line: 270, size: 128, elements: !3210)
!3210 = !{!3211, !3212, !3213}
!3211 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3209, file: !378, line: 270, baseType: !7, size: 32)
!3212 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3209, file: !378, line: 270, baseType: !7, size: 32, offset: 32)
!3213 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3209, file: !378, line: 270, baseType: !3214, size: 64, offset: 64)
!3214 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3215, size: 64, elements: !1922)
!3215 = !DIDerivedType(tag: DW_TAG_typedef, name: "cgraph_node_ptr", file: !378, line: 268, baseType: !3216)
!3216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3217, size: 64)
!3217 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_node", file: !378, line: 181, size: 2496, elements: !3218)
!3218 = !{!3219, !3220, !3243, !3244, !3245, !3246, !3247, !3248, !3249, !3250, !3251, !3252, !3253, !3254, !3255, !3256, !3257, !3258, !3272, !3294, !3304, !3308, !3334, !3343, !3344, !3345, !3346, !3347, !3348, !3349, !3350, !3351, !3352, !3353, !3354, !3355, !3356}
!3219 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !3217, file: !378, line: 182, baseType: !1821, size: 64)
!3220 = !DIDerivedType(tag: DW_TAG_member, name: "callees", scope: !3217, file: !378, line: 183, baseType: !3221, size: 64, offset: 64)
!3221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3222, size: 64)
!3222 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_edge", file: !378, line: 314, size: 768, elements: !3223)
!3223 = !{!3224, !3225, !3226, !3227, !3228, !3229, !3230, !3231, !3232, !3233, !3235, !3236, !3237, !3238, !3240, !3241, !3242}
!3224 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !3222, file: !378, line: 316, baseType: !2364, size: 64)
!3225 = !DIDerivedType(tag: DW_TAG_member, name: "caller", scope: !3222, file: !378, line: 317, baseType: !3216, size: 64, offset: 64)
!3226 = !DIDerivedType(tag: DW_TAG_member, name: "callee", scope: !3222, file: !378, line: 318, baseType: !3216, size: 64, offset: 128)
!3227 = !DIDerivedType(tag: DW_TAG_member, name: "prev_caller", scope: !3222, file: !378, line: 319, baseType: !3221, size: 64, offset: 192)
!3228 = !DIDerivedType(tag: DW_TAG_member, name: "next_caller", scope: !3222, file: !378, line: 320, baseType: !3221, size: 64, offset: 256)
!3229 = !DIDerivedType(tag: DW_TAG_member, name: "prev_callee", scope: !3222, file: !378, line: 321, baseType: !3221, size: 64, offset: 320)
!3230 = !DIDerivedType(tag: DW_TAG_member, name: "next_callee", scope: !3222, file: !378, line: 322, baseType: !3221, size: 64, offset: 384)
!3231 = !DIDerivedType(tag: DW_TAG_member, name: "call_stmt", scope: !3222, file: !378, line: 323, baseType: !2152, size: 64, offset: 448)
!3232 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !3222, file: !378, line: 324, baseType: !2105, size: 64, offset: 512)
!3233 = !DIDerivedType(tag: DW_TAG_member, name: "inline_failed", scope: !3222, file: !378, line: 327, baseType: !3234, size: 32, offset: 576)
!3234 = !DIDerivedType(tag: DW_TAG_typedef, name: "cgraph_inline_failed_t", file: !378, line: 312, baseType: !377)
!3235 = !DIDerivedType(tag: DW_TAG_member, name: "lto_stmt_uid", scope: !3222, file: !378, line: 330, baseType: !7, size: 32, offset: 608)
!3236 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !3222, file: !378, line: 334, baseType: !1918, size: 32, offset: 640)
!3237 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !3222, file: !378, line: 336, baseType: !1918, size: 32, offset: 672)
!3238 = !DIDerivedType(tag: DW_TAG_member, name: "loop_nest", scope: !3222, file: !378, line: 338, baseType: !3239, size: 16, offset: 704)
!3239 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!3240 = !DIDerivedType(tag: DW_TAG_member, name: "indirect_call", scope: !3222, file: !378, line: 340, baseType: !7, size: 1, offset: 720, flags: DIFlagBitField, extraData: i64 720)
!3241 = !DIDerivedType(tag: DW_TAG_member, name: "call_stmt_cannot_inline_p", scope: !3222, file: !378, line: 342, baseType: !7, size: 1, offset: 721, flags: DIFlagBitField, extraData: i64 720)
!3242 = !DIDerivedType(tag: DW_TAG_member, name: "can_throw_external", scope: !3222, file: !378, line: 344, baseType: !7, size: 1, offset: 722, flags: DIFlagBitField, extraData: i64 720)
!3243 = !DIDerivedType(tag: DW_TAG_member, name: "callers", scope: !3217, file: !378, line: 184, baseType: !3221, size: 64, offset: 128)
!3244 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3217, file: !378, line: 185, baseType: !3216, size: 64, offset: 192)
!3245 = !DIDerivedType(tag: DW_TAG_member, name: "previous", scope: !3217, file: !378, line: 186, baseType: !3216, size: 64, offset: 256)
!3246 = !DIDerivedType(tag: DW_TAG_member, name: "origin", scope: !3217, file: !378, line: 188, baseType: !3216, size: 64, offset: 320)
!3247 = !DIDerivedType(tag: DW_TAG_member, name: "nested", scope: !3217, file: !378, line: 190, baseType: !3216, size: 64, offset: 384)
!3248 = !DIDerivedType(tag: DW_TAG_member, name: "next_nested", scope: !3217, file: !378, line: 192, baseType: !3216, size: 64, offset: 448)
!3249 = !DIDerivedType(tag: DW_TAG_member, name: "next_needed", scope: !3217, file: !378, line: 194, baseType: !3216, size: 64, offset: 512)
!3250 = !DIDerivedType(tag: DW_TAG_member, name: "next_sibling_clone", scope: !3217, file: !378, line: 196, baseType: !3216, size: 64, offset: 576)
!3251 = !DIDerivedType(tag: DW_TAG_member, name: "prev_sibling_clone", scope: !3217, file: !378, line: 197, baseType: !3216, size: 64, offset: 640)
!3252 = !DIDerivedType(tag: DW_TAG_member, name: "clones", scope: !3217, file: !378, line: 198, baseType: !3216, size: 64, offset: 704)
!3253 = !DIDerivedType(tag: DW_TAG_member, name: "clone_of", scope: !3217, file: !378, line: 199, baseType: !3216, size: 64, offset: 768)
!3254 = !DIDerivedType(tag: DW_TAG_member, name: "same_body", scope: !3217, file: !378, line: 202, baseType: !3216, size: 64, offset: 832)
!3255 = !DIDerivedType(tag: DW_TAG_member, name: "same_comdat_group", scope: !3217, file: !378, line: 204, baseType: !3216, size: 64, offset: 896)
!3256 = !DIDerivedType(tag: DW_TAG_member, name: "call_site_hash", scope: !3217, file: !378, line: 207, baseType: !2618, size: 64, offset: 960)
!3257 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !3217, file: !378, line: 209, baseType: !2105, size: 64, offset: 1024)
!3258 = !DIDerivedType(tag: DW_TAG_member, name: "ipa_transforms_to_apply", scope: !3217, file: !378, line: 214, baseType: !3259, size: 64, offset: 1088)
!3259 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3260, size: 64)
!3260 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_opt_pass_heap", file: !2576, line: 177, baseType: !3261)
!3261 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_opt_pass_heap", file: !2576, line: 177, size: 128, elements: !3262)
!3262 = !{!3263}
!3263 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3261, file: !2576, line: 177, baseType: !3264, size: 128)
!3264 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_opt_pass_base", file: !2576, line: 176, baseType: !3265)
!3265 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_opt_pass_base", file: !2576, line: 176, size: 128, elements: !3266)
!3266 = !{!3267, !3268, !3269}
!3267 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3265, file: !2576, line: 176, baseType: !7, size: 32)
!3268 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3265, file: !2576, line: 176, baseType: !7, size: 32, offset: 32)
!3269 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3265, file: !2576, line: 176, baseType: !3270, size: 64, offset: 64)
!3270 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3271, size: 64, elements: !1922)
!3271 = !DIDerivedType(tag: DW_TAG_typedef, name: "ipa_opt_pass", file: !2576, line: 174, baseType: !3163)
!3272 = !DIDerivedType(tag: DW_TAG_member, name: "local", scope: !3217, file: !378, line: 216, baseType: !3273, size: 320, offset: 1152)
!3273 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_local_info", file: !378, line: 88, size: 320, elements: !3274)
!3274 = !{!3275, !3278, !3286, !3287, !3288, !3289, !3290, !3291, !3292, !3293}
!3275 = !DIDerivedType(tag: DW_TAG_member, name: "lto_file_data", scope: !3273, file: !378, line: 90, baseType: !3276, size: 64)
!3276 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3277, size: 64)
!3277 = !DICompositeType(tag: DW_TAG_structure_type, name: "lto_file_decl_data", file: !378, line: 51, flags: DIFlagFwdDecl)
!3278 = !DIDerivedType(tag: DW_TAG_member, name: "inline_summary", scope: !3273, file: !378, line: 92, baseType: !3279, size: 192, offset: 64)
!3279 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "inline_summary", file: !378, line: 57, size: 192, elements: !3280)
!3280 = !{!3281, !3282, !3283, !3284, !3285}
!3281 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_self_stack_size", scope: !3279, file: !378, line: 60, baseType: !1877, size: 64)
!3282 = !DIDerivedType(tag: DW_TAG_member, name: "self_size", scope: !3279, file: !378, line: 63, baseType: !1918, size: 32, offset: 64)
!3283 = !DIDerivedType(tag: DW_TAG_member, name: "size_inlining_benefit", scope: !3279, file: !378, line: 65, baseType: !1918, size: 32, offset: 96)
!3284 = !DIDerivedType(tag: DW_TAG_member, name: "self_time", scope: !3279, file: !378, line: 67, baseType: !1918, size: 32, offset: 128)
!3285 = !DIDerivedType(tag: DW_TAG_member, name: "time_inlining_benefit", scope: !3279, file: !378, line: 69, baseType: !1918, size: 32, offset: 160)
!3286 = !DIDerivedType(tag: DW_TAG_member, name: "local", scope: !3273, file: !378, line: 96, baseType: !7, size: 1, offset: 256, flags: DIFlagBitField, extraData: i64 256)
!3287 = !DIDerivedType(tag: DW_TAG_member, name: "externally_visible", scope: !3273, file: !378, line: 99, baseType: !7, size: 1, offset: 257, flags: DIFlagBitField, extraData: i64 256)
!3288 = !DIDerivedType(tag: DW_TAG_member, name: "finalized", scope: !3273, file: !378, line: 102, baseType: !7, size: 1, offset: 258, flags: DIFlagBitField, extraData: i64 256)
!3289 = !DIDerivedType(tag: DW_TAG_member, name: "inlinable", scope: !3273, file: !378, line: 105, baseType: !7, size: 1, offset: 259, flags: DIFlagBitField, extraData: i64 256)
!3290 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !3273, file: !378, line: 108, baseType: !7, size: 1, offset: 260, flags: DIFlagBitField, extraData: i64 256)
!3291 = !DIDerivedType(tag: DW_TAG_member, name: "redefined_extern_inline", scope: !3273, file: !378, line: 112, baseType: !7, size: 1, offset: 261, flags: DIFlagBitField, extraData: i64 256)
!3292 = !DIDerivedType(tag: DW_TAG_member, name: "for_functions_valid", scope: !3273, file: !378, line: 116, baseType: !7, size: 1, offset: 262, flags: DIFlagBitField, extraData: i64 256)
!3293 = !DIDerivedType(tag: DW_TAG_member, name: "vtable_method", scope: !3273, file: !378, line: 120, baseType: !7, size: 1, offset: 263, flags: DIFlagBitField, extraData: i64 256)
!3294 = !DIDerivedType(tag: DW_TAG_member, name: "global", scope: !3217, file: !378, line: 217, baseType: !3295, size: 320, offset: 1472)
!3295 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_global_info", file: !378, line: 126, size: 320, elements: !3296)
!3296 = !{!3297, !3298, !3299, !3300, !3301, !3302, !3303}
!3297 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_stack_size", scope: !3295, file: !378, line: 128, baseType: !1877, size: 64)
!3298 = !DIDerivedType(tag: DW_TAG_member, name: "stack_frame_offset", scope: !3295, file: !378, line: 130, baseType: !1877, size: 64, offset: 64)
!3299 = !DIDerivedType(tag: DW_TAG_member, name: "inlined_to", scope: !3295, file: !378, line: 134, baseType: !3216, size: 64, offset: 128)
!3300 = !DIDerivedType(tag: DW_TAG_member, name: "time", scope: !3295, file: !378, line: 137, baseType: !1918, size: 32, offset: 192)
!3301 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3295, file: !378, line: 138, baseType: !1918, size: 32, offset: 224)
!3302 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_growth", scope: !3295, file: !378, line: 141, baseType: !1918, size: 32, offset: 256)
!3303 = !DIDerivedType(tag: DW_TAG_member, name: "inlined", scope: !3295, file: !378, line: 144, baseType: !1941, size: 8, offset: 288)
!3304 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !3217, file: !378, line: 218, baseType: !3305, size: 32, offset: 1792)
!3305 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_rtl_info", file: !378, line: 150, size: 32, elements: !3306)
!3306 = !{!3307}
!3307 = !DIDerivedType(tag: DW_TAG_member, name: "preferred_incoming_stack_boundary", scope: !3305, file: !378, line: 151, baseType: !7, size: 32)
!3308 = !DIDerivedType(tag: DW_TAG_member, name: "clone", scope: !3217, file: !378, line: 219, baseType: !3309, size: 192, offset: 1856)
!3309 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_clone_info", file: !378, line: 171, size: 192, elements: !3310)
!3310 = !{!3311, !3332, !3333}
!3311 = !DIDerivedType(tag: DW_TAG_member, name: "tree_map", scope: !3309, file: !378, line: 173, baseType: !3312, size: 64)
!3312 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3313, size: 64)
!3313 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_replace_map_p_gc", file: !378, line: 169, baseType: !3314)
!3314 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_replace_map_p_gc", file: !378, line: 169, size: 128, elements: !3315)
!3315 = !{!3316}
!3316 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3314, file: !378, line: 169, baseType: !3317, size: 128)
!3317 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_replace_map_p_base", file: !378, line: 168, baseType: !3318)
!3318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_replace_map_p_base", file: !378, line: 168, size: 128, elements: !3319)
!3319 = !{!3320, !3321, !3322}
!3320 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3318, file: !378, line: 168, baseType: !7, size: 32)
!3321 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3318, file: !378, line: 168, baseType: !7, size: 32, offset: 32)
!3322 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3318, file: !378, line: 168, baseType: !3323, size: 64, offset: 64)
!3323 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3324, size: 64, elements: !1922)
!3324 = !DIDerivedType(tag: DW_TAG_typedef, name: "ipa_replace_map_p", file: !378, line: 167, baseType: !3325)
!3325 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3326, size: 64)
!3326 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_replace_map", file: !378, line: 156, size: 192, elements: !3327)
!3327 = !{!3328, !3329, !3330, !3331}
!3328 = !DIDerivedType(tag: DW_TAG_member, name: "old_tree", scope: !3326, file: !378, line: 159, baseType: !1821, size: 64)
!3329 = !DIDerivedType(tag: DW_TAG_member, name: "new_tree", scope: !3326, file: !378, line: 161, baseType: !1821, size: 64, offset: 64)
!3330 = !DIDerivedType(tag: DW_TAG_member, name: "replace_p", scope: !3326, file: !378, line: 163, baseType: !1941, size: 8, offset: 128)
!3331 = !DIDerivedType(tag: DW_TAG_member, name: "ref_p", scope: !3326, file: !378, line: 165, baseType: !1941, size: 8, offset: 136)
!3332 = !DIDerivedType(tag: DW_TAG_member, name: "args_to_skip", scope: !3309, file: !378, line: 174, baseType: !2702, size: 64, offset: 64)
!3333 = !DIDerivedType(tag: DW_TAG_member, name: "combined_args_to_skip", scope: !3309, file: !378, line: 175, baseType: !2702, size: 64, offset: 128)
!3334 = !DIDerivedType(tag: DW_TAG_member, name: "thunk", scope: !3217, file: !378, line: 220, baseType: !3335, size: 256, offset: 2048)
!3335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_thunk_info", file: !378, line: 74, size: 256, elements: !3336)
!3336 = !{!3337, !3338, !3339, !3340, !3341, !3342}
!3337 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_offset", scope: !3335, file: !378, line: 76, baseType: !1877, size: 64)
!3338 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_value", scope: !3335, file: !378, line: 77, baseType: !1877, size: 64, offset: 64)
!3339 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !3335, file: !378, line: 78, baseType: !1821, size: 64, offset: 128)
!3340 = !DIDerivedType(tag: DW_TAG_member, name: "this_adjusting", scope: !3335, file: !378, line: 79, baseType: !1941, size: 8, offset: 192)
!3341 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_offset_p", scope: !3335, file: !378, line: 80, baseType: !1941, size: 8, offset: 200)
!3342 = !DIDerivedType(tag: DW_TAG_member, name: "thunk_p", scope: !3335, file: !378, line: 82, baseType: !1941, size: 8, offset: 208)
!3343 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !3217, file: !378, line: 223, baseType: !2364, size: 64, offset: 2304)
!3344 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !3217, file: !378, line: 225, baseType: !1918, size: 32, offset: 2368)
!3345 = !DIDerivedType(tag: DW_TAG_member, name: "order", scope: !3217, file: !378, line: 227, baseType: !1918, size: 32, offset: 2400)
!3346 = !DIDerivedType(tag: DW_TAG_member, name: "pid", scope: !3217, file: !378, line: 231, baseType: !1918, size: 32, offset: 2432)
!3347 = !DIDerivedType(tag: DW_TAG_member, name: "needed", scope: !3217, file: !378, line: 238, baseType: !7, size: 1, offset: 2464, flags: DIFlagBitField, extraData: i64 2464)
!3348 = !DIDerivedType(tag: DW_TAG_member, name: "address_taken", scope: !3217, file: !378, line: 241, baseType: !7, size: 1, offset: 2465, flags: DIFlagBitField, extraData: i64 2464)
!3349 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_and_needed", scope: !3217, file: !378, line: 244, baseType: !7, size: 1, offset: 2466, flags: DIFlagBitField, extraData: i64 2464)
!3350 = !DIDerivedType(tag: DW_TAG_member, name: "reachable", scope: !3217, file: !378, line: 251, baseType: !7, size: 1, offset: 2467, flags: DIFlagBitField, extraData: i64 2464)
!3351 = !DIDerivedType(tag: DW_TAG_member, name: "lowered", scope: !3217, file: !378, line: 253, baseType: !7, size: 1, offset: 2468, flags: DIFlagBitField, extraData: i64 2464)
!3352 = !DIDerivedType(tag: DW_TAG_member, name: "analyzed", scope: !3217, file: !378, line: 256, baseType: !7, size: 1, offset: 2469, flags: DIFlagBitField, extraData: i64 2464)
!3353 = !DIDerivedType(tag: DW_TAG_member, name: "process", scope: !3217, file: !378, line: 258, baseType: !7, size: 1, offset: 2470, flags: DIFlagBitField, extraData: i64 2464)
!3354 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !3217, file: !378, line: 260, baseType: !7, size: 1, offset: 2471, flags: DIFlagBitField, extraData: i64 2464)
!3355 = !DIDerivedType(tag: DW_TAG_member, name: "finalized_by_frontend", scope: !3217, file: !378, line: 262, baseType: !7, size: 1, offset: 2472, flags: DIFlagBitField, extraData: i64 2464)
!3356 = !DIDerivedType(tag: DW_TAG_member, name: "same_body_alias", scope: !3217, file: !378, line: 265, baseType: !7, size: 1, offset: 2473, flags: DIFlagBitField, extraData: i64 2464)
!3357 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !3199, file: !378, line: 280, baseType: !2105, size: 64, offset: 128)
!3358 = !DIDerivedType(tag: DW_TAG_member, name: "read_summary", scope: !3164, file: !401, line: 187, baseType: !3191, size: 64, offset: 768)
!3359 = !DIDerivedType(tag: DW_TAG_member, name: "function_read_summary", scope: !3164, file: !401, line: 188, baseType: !3360, size: 64, offset: 832)
!3360 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3361, size: 64)
!3361 = !DISubroutineType(types: !3362)
!3362 = !{null, !3216}
!3363 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_fixup", scope: !3164, file: !401, line: 191, baseType: !3364, size: 64, offset: 896)
!3364 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3365, size: 64)
!3365 = !DISubroutineType(types: !3366)
!3366 = !{null, !3216, !3367}
!3367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2152, size: 64)
!3368 = !DIDerivedType(tag: DW_TAG_member, name: "function_transform_todo_flags_start", scope: !3164, file: !401, line: 195, baseType: !7, size: 32, offset: 960)
!3369 = !DIDerivedType(tag: DW_TAG_member, name: "function_transform", scope: !3164, file: !401, line: 196, baseType: !3370, size: 64, offset: 1024)
!3370 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3371, size: 64)
!3371 = !DISubroutineType(types: !3372)
!3372 = !{!7, !3216}
!3373 = !DIDerivedType(tag: DW_TAG_member, name: "variable_transform", scope: !3164, file: !401, line: 197, baseType: !3374, size: 64, offset: 1088)
!3374 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3375, size: 64)
!3375 = !DISubroutineType(types: !3376)
!3376 = !{null, !3377}
!3377 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3378, size: 64)
!3378 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "varpool_node", file: !378, line: 358, size: 320, elements: !3379)
!3379 = !{!3380, !3381, !3382, !3383, !3384, !3385, !3386, !3387, !3388, !3389, !3390, !3391}
!3380 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !3378, file: !378, line: 359, baseType: !1821, size: 64)
!3381 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3378, file: !378, line: 361, baseType: !3377, size: 64, offset: 64)
!3382 = !DIDerivedType(tag: DW_TAG_member, name: "next_needed", scope: !3378, file: !378, line: 363, baseType: !3377, size: 64, offset: 128)
!3383 = !DIDerivedType(tag: DW_TAG_member, name: "extra_name", scope: !3378, file: !378, line: 366, baseType: !3377, size: 64, offset: 192)
!3384 = !DIDerivedType(tag: DW_TAG_member, name: "order", scope: !3378, file: !378, line: 368, baseType: !1918, size: 32, offset: 256)
!3385 = !DIDerivedType(tag: DW_TAG_member, name: "needed", scope: !3378, file: !378, line: 372, baseType: !7, size: 1, offset: 288, flags: DIFlagBitField, extraData: i64 288)
!3386 = !DIDerivedType(tag: DW_TAG_member, name: "force_output", scope: !3378, file: !378, line: 375, baseType: !7, size: 1, offset: 289, flags: DIFlagBitField, extraData: i64 288)
!3387 = !DIDerivedType(tag: DW_TAG_member, name: "analyzed", scope: !3378, file: !378, line: 378, baseType: !7, size: 1, offset: 290, flags: DIFlagBitField, extraData: i64 288)
!3388 = !DIDerivedType(tag: DW_TAG_member, name: "finalized", scope: !3378, file: !378, line: 380, baseType: !7, size: 1, offset: 291, flags: DIFlagBitField, extraData: i64 288)
!3389 = !DIDerivedType(tag: DW_TAG_member, name: "output", scope: !3378, file: !378, line: 382, baseType: !7, size: 1, offset: 292, flags: DIFlagBitField, extraData: i64 288)
!3390 = !DIDerivedType(tag: DW_TAG_member, name: "externally_visible", scope: !3378, file: !378, line: 384, baseType: !7, size: 1, offset: 293, flags: DIFlagBitField, extraData: i64 288)
!3391 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !3378, file: !378, line: 387, baseType: !7, size: 1, offset: 294, flags: DIFlagBitField, extraData: i64 288)
!3392 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3393, size: 64)
!3393 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_order_sort", file: !3, line: 1660, size: 128, elements: !3394)
!3394 = !{!3395, !3396}
!3395 = !DIDerivedType(tag: DW_TAG_member, name: "kind", scope: !3393, file: !3, line: 1662, baseType: !1814, size: 32)
!3396 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !3393, file: !3, line: 1668, baseType: !3397, size: 64, offset: 64)
!3397 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !3393, file: !3, line: 1663, size: 64, elements: !3398)
!3398 = !{!3399, !3400, !3401}
!3399 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !3397, file: !3, line: 1665, baseType: !3216, size: 64)
!3400 = !DIDerivedType(tag: DW_TAG_member, name: "v", scope: !3397, file: !3, line: 1666, baseType: !3377, size: 64)
!3401 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !3397, file: !3, line: 1667, baseType: !3402, size: 64)
!3402 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3403, size: 64)
!3403 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_asm_node", file: !378, line: 392, size: 192, elements: !3404)
!3404 = !{!3405, !3406, !3407}
!3405 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3403, file: !378, line: 394, baseType: !3402, size: 64)
!3406 = !DIDerivedType(tag: DW_TAG_member, name: "asm_str", scope: !3403, file: !378, line: 396, baseType: !1821, size: 64, offset: 64)
!3407 = !DIDerivedType(tag: DW_TAG_member, name: "order", scope: !3403, file: !378, line: 398, baseType: !1918, size: 32, offset: 128)
!3408 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3216, size: 64)
!3409 = !DIDerivedType(tag: DW_TAG_typedef, name: "cgraph_edge_p", file: !378, line: 350, baseType: !3221)
!3410 = !{!3411, !3417, !0, !3431, !3433, !3435, !3437, !3440}
!3411 = !DIGlobalVariableExpression(var: !3412, expr: !DIExpression())
!3412 = distinct !DIGlobalVariable(name: "counter", scope: !3413, file: !3, line: 1934, type: !1918, isLocal: true, isDefinition: true)
!3413 = distinct !DISubprogram(name: "cgraph_build_static_cdtor", scope: !3, file: !3, line: 1932, type: !3414, scopeLine: 1933, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!3414 = !DISubroutineType(types: !3415)
!3415 = !{null, !1921, !1821, !1918}
!3416 = !{}
!3417 = !DIGlobalVariableExpression(var: !3418, expr: !DIExpression())
!3418 = distinct !DIGlobalVariable(name: "gt_ggc_r_gt_cgraphunit_h", scope: !2, file: !3419, line: 24, type: !3420, isLocal: false, isDefinition: true)
!3419 = !DIFile(filename: "./gt-cgraphunit.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3420 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3421, size: 1280, elements: !2094)
!3421 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3422)
!3422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ggc_root_tab", file: !3423, line: 69, size: 320, elements: !3424)
!3423 = !DIFile(filename: "./ggc.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3424 = !{!3425, !3426, !3427, !3428, !3430}
!3425 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3422, file: !3423, line: 70, baseType: !2105, size: 64)
!3426 = !DIDerivedType(tag: DW_TAG_member, name: "nelt", scope: !3422, file: !3423, line: 71, baseType: !2298, size: 64, offset: 64)
!3427 = !DIDerivedType(tag: DW_TAG_member, name: "stride", scope: !3422, file: !3423, line: 72, baseType: !2298, size: 64, offset: 128)
!3428 = !DIDerivedType(tag: DW_TAG_member, name: "cb", scope: !3422, file: !3423, line: 73, baseType: !3429, size: 64, offset: 192)
!3429 = !DIDerivedType(tag: DW_TAG_typedef, name: "gt_pointer_walker", file: !3423, line: 65, baseType: !2636)
!3430 = !DIDerivedType(tag: DW_TAG_member, name: "pchw", scope: !3422, file: !3423, line: 74, baseType: !3429, size: 64, offset: 256)
!3431 = !DIGlobalVariableExpression(var: !3432, expr: !DIExpression())
!3432 = distinct !DIGlobalVariable(name: "static_ctors", scope: !2, file: !3, line: 149, type: !2679, isLocal: true, isDefinition: true)
!3433 = !DIGlobalVariableExpression(var: !3434, expr: !DIExpression())
!3434 = distinct !DIGlobalVariable(name: "static_dtors", scope: !2, file: !3, line: 151, type: !2679, isLocal: true, isDefinition: true)
!3435 = !DIGlobalVariableExpression(var: !3436, expr: !DIExpression())
!3436 = distinct !DIGlobalVariable(name: "vtable_entry_type", scope: !2, file: !3, line: 154, type: !1821, isLocal: true, isDefinition: true)
!3437 = !DIGlobalVariableExpression(var: !3438, expr: !DIExpression())
!3438 = distinct !DIGlobalVariable(name: "first_analyzed", scope: !3439, file: !3, line: 953, type: !3216, isLocal: true, isDefinition: true)
!3439 = distinct !DISubprogram(name: "cgraph_analyze_functions", scope: !3, file: !3, line: 949, type: !3192, scopeLine: 950, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!3440 = !DIGlobalVariableExpression(var: !3441, expr: !DIExpression())
!3441 = distinct !DIGlobalVariable(name: "first_analyzed_var", scope: !3439, file: !3, line: 955, type: !3377, isLocal: true, isDefinition: true)
!3442 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3443, size: 64)
!3443 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3444, line: 7, baseType: !3445)
!3444 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!3445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3446, line: 49, size: 1728, elements: !3447)
!3446 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!3447 = !{!3448, !3449, !3450, !3451, !3452, !3453, !3454, !3455, !3456, !3457, !3458, !3459, !3460, !3463, !3465, !3466, !3467, !3470, !3471, !3472, !3473, !3476, !3478, !3481, !3484, !3485, !3486, !3487, !3488}
!3448 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3445, file: !3446, line: 51, baseType: !1918, size: 32)
!3449 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3445, file: !3446, line: 54, baseType: !2090, size: 64, offset: 64)
!3450 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3445, file: !3446, line: 55, baseType: !2090, size: 64, offset: 128)
!3451 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3445, file: !3446, line: 56, baseType: !2090, size: 64, offset: 192)
!3452 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3445, file: !3446, line: 57, baseType: !2090, size: 64, offset: 256)
!3453 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3445, file: !3446, line: 58, baseType: !2090, size: 64, offset: 320)
!3454 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3445, file: !3446, line: 59, baseType: !2090, size: 64, offset: 384)
!3455 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3445, file: !3446, line: 60, baseType: !2090, size: 64, offset: 448)
!3456 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3445, file: !3446, line: 61, baseType: !2090, size: 64, offset: 512)
!3457 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3445, file: !3446, line: 64, baseType: !2090, size: 64, offset: 576)
!3458 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3445, file: !3446, line: 65, baseType: !2090, size: 64, offset: 640)
!3459 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3445, file: !3446, line: 66, baseType: !2090, size: 64, offset: 704)
!3460 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3445, file: !3446, line: 68, baseType: !3461, size: 64, offset: 768)
!3461 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3462, size: 64)
!3462 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !3446, line: 36, flags: DIFlagFwdDecl)
!3463 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3445, file: !3446, line: 70, baseType: !3464, size: 64, offset: 832)
!3464 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3445, size: 64)
!3465 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3445, file: !3446, line: 72, baseType: !1918, size: 32, offset: 896)
!3466 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3445, file: !3446, line: 73, baseType: !1918, size: 32, offset: 928)
!3467 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3445, file: !3446, line: 74, baseType: !3468, size: 64, offset: 960)
!3468 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !3469, line: 152, baseType: !1877)
!3469 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!3470 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3445, file: !3446, line: 77, baseType: !3239, size: 16, offset: 1024)
!3471 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3445, file: !3446, line: 78, baseType: !2981, size: 8, offset: 1040)
!3472 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3445, file: !3446, line: 79, baseType: !1920, size: 8, offset: 1048)
!3473 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3445, file: !3446, line: 81, baseType: !3474, size: 64, offset: 1088)
!3474 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3475, size: 64)
!3475 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !3446, line: 43, baseType: null)
!3476 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3445, file: !3446, line: 89, baseType: !3477, size: 64, offset: 1152)
!3477 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !3469, line: 153, baseType: !1877)
!3478 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3445, file: !3446, line: 91, baseType: !3479, size: 64, offset: 1216)
!3479 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3480, size: 64)
!3480 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !3446, line: 37, flags: DIFlagFwdDecl)
!3481 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3445, file: !3446, line: 92, baseType: !3482, size: 64, offset: 1280)
!3482 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3483, size: 64)
!3483 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !3446, line: 38, flags: DIFlagFwdDecl)
!3484 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3445, file: !3446, line: 93, baseType: !3464, size: 64, offset: 1344)
!3485 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3445, file: !3446, line: 94, baseType: !2105, size: 64, offset: 1408)
!3486 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3445, file: !3446, line: 95, baseType: !2298, size: 64, offset: 1472)
!3487 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3445, file: !3446, line: 96, baseType: !1918, size: 32, offset: 1536)
!3488 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3445, file: !3446, line: 98, baseType: !3489, size: 160, offset: 1568)
!3489 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1921, size: 160, elements: !3490)
!3490 = !{!3491}
!3491 = !DISubrange(count: 20)
!3492 = !{i32 7, !"Dwarf Version", i32 4}
!3493 = !{i32 2, !"Debug Info Version", i32 3}
!3494 = !{i32 1, !"wchar_size", i32 4}
!3495 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!3496 = distinct !DISubprogram(name: "cgraph_decide_is_function_needed", scope: !3, file: !3, line: 335, type: !3497, scopeLine: 336, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!3497 = !DISubroutineType(types: !3498)
!3498 = !{!1941, !3216, !1821}
!3499 = !DILocalVariable(name: "node", arg: 1, scope: !3496, file: !3, line: 335, type: !3216)
!3500 = !DILocation(line: 335, column: 55, scope: !3496)
!3501 = !DILocalVariable(name: "decl", arg: 2, scope: !3496, file: !3, line: 335, type: !1821)
!3502 = !DILocation(line: 335, column: 66, scope: !3496)
!3503 = !DILocation(line: 338, column: 7, scope: !3504)
!3504 = distinct !DILexicalBlock(scope: !3496, file: !3, line: 338, column: 7)
!3505 = !DILocation(line: 338, column: 13, scope: !3504)
!3506 = !DILocation(line: 338, column: 19, scope: !3504)
!3507 = !DILocation(line: 338, column: 7, scope: !3496)
!3508 = !DILocation(line: 339, column: 5, scope: !3504)
!3509 = !DILocation(line: 344, column: 7, scope: !3510)
!3510 = distinct !DILexicalBlock(scope: !3496, file: !3, line: 344, column: 7)
!3511 = !DILocation(line: 345, column: 7, scope: !3510)
!3512 = !DILocation(line: 345, column: 10, scope: !3510)
!3513 = !DILocation(line: 344, column: 7, scope: !3496)
!3514 = !DILocation(line: 346, column: 5, scope: !3510)
!3515 = !DILocation(line: 350, column: 7, scope: !3516)
!3516 = distinct !DILexicalBlock(scope: !3496, file: !3, line: 350, column: 7)
!3517 = !DILocation(line: 351, column: 7, scope: !3516)
!3518 = !DILocation(line: 351, column: 10, scope: !3516)
!3519 = !DILocation(line: 352, column: 7, scope: !3516)
!3520 = !DILocation(line: 352, column: 11, scope: !3516)
!3521 = !DILocation(line: 353, column: 7, scope: !3516)
!3522 = !DILocation(line: 353, column: 46, scope: !3516)
!3523 = !DILocation(line: 353, column: 11, scope: !3516)
!3524 = !DILocation(line: 350, column: 7, scope: !3496)
!3525 = !DILocation(line: 354, column: 6, scope: !3516)
!3526 = !DILocation(line: 359, column: 7, scope: !3527)
!3527 = distinct !DILexicalBlock(scope: !3496, file: !3, line: 359, column: 7)
!3528 = !DILocation(line: 359, column: 13, scope: !3527)
!3529 = !DILocation(line: 359, column: 7, scope: !3496)
!3530 = !DILocation(line: 360, column: 5, scope: !3527)
!3531 = !DILocation(line: 370, column: 9, scope: !3532)
!3532 = distinct !DILexicalBlock(scope: !3496, file: !3, line: 370, column: 7)
!3533 = !DILocation(line: 371, column: 2, scope: !3532)
!3534 = !DILocation(line: 371, column: 7, scope: !3532)
!3535 = !DILocation(line: 371, column: 16, scope: !3532)
!3536 = !DILocation(line: 371, column: 20, scope: !3532)
!3537 = !DILocation(line: 371, column: 26, scope: !3532)
!3538 = !DILocation(line: 371, column: 32, scope: !3532)
!3539 = !DILocation(line: 372, column: 6, scope: !3532)
!3540 = !DILocation(line: 372, column: 10, scope: !3532)
!3541 = !DILocation(line: 373, column: 6, scope: !3532)
!3542 = !DILocation(line: 373, column: 10, scope: !3532)
!3543 = !DILocation(line: 373, column: 16, scope: !3532)
!3544 = !DILocation(line: 374, column: 8, scope: !3532)
!3545 = !DILocation(line: 374, column: 12, scope: !3532)
!3546 = !DILocation(line: 375, column: 8, scope: !3532)
!3547 = !DILocation(line: 375, column: 12, scope: !3532)
!3548 = !DILocation(line: 376, column: 8, scope: !3532)
!3549 = !DILocation(line: 376, column: 12, scope: !3532)
!3550 = !DILocation(line: 377, column: 7, scope: !3532)
!3551 = !DILocation(line: 377, column: 11, scope: !3532)
!3552 = !DILocation(line: 377, column: 30, scope: !3532)
!3553 = !DILocation(line: 377, column: 34, scope: !3532)
!3554 = !DILocation(line: 370, column: 7, scope: !3496)
!3555 = !DILocation(line: 378, column: 5, scope: !3532)
!3556 = !DILocation(line: 382, column: 7, scope: !3557)
!3557 = distinct !DILexicalBlock(scope: !3496, file: !3, line: 382, column: 7)
!3558 = !DILocation(line: 382, column: 38, scope: !3557)
!3559 = !DILocation(line: 382, column: 41, scope: !3557)
!3560 = !DILocation(line: 382, column: 7, scope: !3496)
!3561 = !DILocation(line: 383, column: 5, scope: !3557)
!3562 = !DILocation(line: 385, column: 3, scope: !3496)
!3563 = !DILocation(line: 386, column: 1, scope: !3496)
!3564 = distinct !DISubprogram(name: "cgraph_process_new_functions", scope: !3, file: !3, line: 393, type: !3173, scopeLine: 394, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!3565 = !DILocalVariable(name: "output", scope: !3564, file: !3, line: 395, type: !1941)
!3566 = !DILocation(line: 395, column: 8, scope: !3564)
!3567 = !DILocalVariable(name: "fndecl", scope: !3564, file: !3, line: 396, type: !1821)
!3568 = !DILocation(line: 396, column: 8, scope: !3564)
!3569 = !DILocalVariable(name: "node", scope: !3564, file: !3, line: 397, type: !3216)
!3570 = !DILocation(line: 397, column: 23, scope: !3564)
!3571 = !DILocation(line: 401, column: 3, scope: !3564)
!3572 = !DILocation(line: 401, column: 10, scope: !3564)
!3573 = !DILocation(line: 403, column: 14, scope: !3574)
!3574 = distinct !DILexicalBlock(scope: !3564, file: !3, line: 402, column: 5)
!3575 = !DILocation(line: 403, column: 12, scope: !3574)
!3576 = !DILocation(line: 404, column: 16, scope: !3574)
!3577 = !DILocation(line: 404, column: 22, scope: !3574)
!3578 = !DILocation(line: 404, column: 14, scope: !3574)
!3579 = !DILocation(line: 405, column: 26, scope: !3574)
!3580 = !DILocation(line: 405, column: 44, scope: !3574)
!3581 = !DILocation(line: 405, column: 24, scope: !3574)
!3582 = !DILocation(line: 406, column: 15, scope: !3574)
!3583 = !DILocation(line: 406, column: 7, scope: !3574)
!3584 = !DILocation(line: 412, column: 4, scope: !3585)
!3585 = distinct !DILexicalBlock(scope: !3574, file: !3, line: 407, column: 2)
!3586 = !DILocation(line: 412, column: 10, scope: !3585)
!3587 = !DILocation(line: 412, column: 22, scope: !3585)
!3588 = !DILocation(line: 413, column: 30, scope: !3585)
!3589 = !DILocation(line: 413, column: 4, scope: !3585)
!3590 = !DILocation(line: 414, column: 32, scope: !3585)
!3591 = !DILocation(line: 414, column: 4, scope: !3585)
!3592 = !DILocation(line: 415, column: 11, scope: !3585)
!3593 = !DILocation(line: 416, column: 4, scope: !3585)
!3594 = !DILocation(line: 424, column: 4, scope: !3585)
!3595 = !DILocation(line: 425, column: 9, scope: !3596)
!3596 = distinct !DILexicalBlock(scope: !3585, file: !3, line: 425, column: 8)
!3597 = !DILocation(line: 425, column: 15, scope: !3596)
!3598 = !DILocation(line: 425, column: 8, scope: !3585)
!3599 = !DILocation(line: 426, column: 31, scope: !3596)
!3600 = !DILocation(line: 426, column: 6, scope: !3596)
!3601 = !DILocation(line: 427, column: 15, scope: !3585)
!3602 = !DILocation(line: 427, column: 4, scope: !3585)
!3603 = !DILocation(line: 428, column: 28, scope: !3585)
!3604 = !DILocation(line: 428, column: 26, scope: !3585)
!3605 = !DILocation(line: 429, column: 31, scope: !3585)
!3606 = !DILocation(line: 429, column: 4, scope: !3585)
!3607 = !DILocation(line: 430, column: 9, scope: !3608)
!3608 = distinct !DILexicalBlock(scope: !3585, file: !3, line: 430, column: 8)
!3609 = !DILocation(line: 430, column: 22, scope: !3608)
!3610 = !DILocation(line: 431, column: 8, scope: !3608)
!3611 = !DILocation(line: 431, column: 29, scope: !3608)
!3612 = !DILocation(line: 431, column: 12, scope: !3608)
!3613 = !DILocation(line: 434, column: 8, scope: !3608)
!3614 = !DILocation(line: 434, column: 12, scope: !3608)
!3615 = !DILocation(line: 430, column: 8, scope: !3585)
!3616 = !DILocation(line: 435, column: 54, scope: !3608)
!3617 = !DILocation(line: 435, column: 6, scope: !3608)
!3618 = !DILocation(line: 436, column: 4, scope: !3585)
!3619 = !DILocation(line: 437, column: 4, scope: !3585)
!3620 = !DILocation(line: 438, column: 4, scope: !3585)
!3621 = !DILocation(line: 439, column: 26, scope: !3585)
!3622 = !DILocation(line: 440, column: 4, scope: !3585)
!3623 = !DILocation(line: 445, column: 4, scope: !3585)
!3624 = !DILocation(line: 445, column: 10, scope: !3585)
!3625 = !DILocation(line: 445, column: 18, scope: !3585)
!3626 = !DILocation(line: 446, column: 28, scope: !3585)
!3627 = !DILocation(line: 446, column: 4, scope: !3585)
!3628 = !DILocation(line: 447, column: 4, scope: !3585)
!3629 = !DILocation(line: 450, column: 4, scope: !3585)
!3630 = !DILocation(line: 451, column: 4, scope: !3585)
!3631 = !DILocation(line: 453, column: 45, scope: !3574)
!3632 = !DILocation(line: 453, column: 7, scope: !3574)
!3633 = distinct !{!3633, !3571, !3634}
!3634 = !DILocation(line: 454, column: 5, scope: !3564)
!3635 = !DILocation(line: 455, column: 10, scope: !3564)
!3636 = !DILocation(line: 455, column: 3, scope: !3564)
!3637 = distinct !DISubprogram(name: "cgraph_finalize_function", scope: !3, file: !3, line: 523, type: !3638, scopeLine: 524, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!3638 = !DISubroutineType(types: !3639)
!3639 = !{null, !1821, !1941}
!3640 = !DILocalVariable(name: "decl", arg: 1, scope: !3637, file: !3, line: 523, type: !1821)
!3641 = !DILocation(line: 523, column: 32, scope: !3637)
!3642 = !DILocalVariable(name: "nested", arg: 2, scope: !3637, file: !3, line: 523, type: !1941)
!3643 = !DILocation(line: 523, column: 43, scope: !3637)
!3644 = !DILocalVariable(name: "node", scope: !3637, file: !3, line: 525, type: !3216)
!3645 = !DILocation(line: 525, column: 23, scope: !3637)
!3646 = !DILocation(line: 525, column: 43, scope: !3637)
!3647 = !DILocation(line: 525, column: 30, scope: !3637)
!3648 = !DILocation(line: 527, column: 7, scope: !3649)
!3649 = distinct !DILexicalBlock(scope: !3637, file: !3, line: 527, column: 7)
!3650 = !DILocation(line: 527, column: 13, scope: !3649)
!3651 = !DILocation(line: 527, column: 19, scope: !3649)
!3652 = !DILocation(line: 527, column: 7, scope: !3637)
!3653 = !DILocation(line: 528, column: 24, scope: !3649)
!3654 = !DILocation(line: 528, column: 5, scope: !3649)
!3655 = !DILocation(line: 530, column: 30, scope: !3637)
!3656 = !DILocation(line: 530, column: 3, scope: !3637)
!3657 = !DILocation(line: 530, column: 9, scope: !3637)
!3658 = !DILocation(line: 530, column: 13, scope: !3637)
!3659 = !DILocation(line: 531, column: 25, scope: !3637)
!3660 = !DILocation(line: 531, column: 3, scope: !3637)
!3661 = !DILocation(line: 532, column: 3, scope: !3637)
!3662 = !DILocation(line: 532, column: 9, scope: !3637)
!3663 = !DILocation(line: 532, column: 15, scope: !3637)
!3664 = !DILocation(line: 532, column: 25, scope: !3637)
!3665 = !DILocation(line: 533, column: 19, scope: !3637)
!3666 = !DILocation(line: 533, column: 48, scope: !3637)
!3667 = !DILocation(line: 533, column: 52, scope: !3637)
!3668 = !DILocation(line: 533, column: 3, scope: !3637)
!3669 = !DILocation(line: 533, column: 9, scope: !3637)
!3670 = !DILocation(line: 533, column: 17, scope: !3637)
!3671 = !DILocation(line: 534, column: 3, scope: !3637)
!3672 = !DILocation(line: 534, column: 9, scope: !3637)
!3673 = !DILocation(line: 534, column: 31, scope: !3637)
!3674 = !DILocation(line: 535, column: 20, scope: !3637)
!3675 = !DILocation(line: 535, column: 26, scope: !3637)
!3676 = !DILocation(line: 535, column: 3, scope: !3637)
!3677 = !DILocation(line: 537, column: 41, scope: !3678)
!3678 = distinct !DILexicalBlock(scope: !3637, file: !3, line: 537, column: 7)
!3679 = !DILocation(line: 537, column: 47, scope: !3678)
!3680 = !DILocation(line: 537, column: 7, scope: !3678)
!3681 = !DILocation(line: 537, column: 7, scope: !3637)
!3682 = !DILocation(line: 538, column: 30, scope: !3678)
!3683 = !DILocation(line: 538, column: 5, scope: !3678)
!3684 = !DILocation(line: 543, column: 8, scope: !3685)
!3685 = distinct !DILexicalBlock(scope: !3637, file: !3, line: 543, column: 7)
!3686 = !DILocation(line: 543, column: 27, scope: !3685)
!3687 = !DILocation(line: 543, column: 31, scope: !3685)
!3688 = !DILocation(line: 543, column: 50, scope: !3685)
!3689 = !DILocation(line: 543, column: 54, scope: !3685)
!3690 = !DILocation(line: 543, column: 7, scope: !3637)
!3691 = !DILocation(line: 544, column: 33, scope: !3685)
!3692 = !DILocation(line: 544, column: 5, scope: !3685)
!3693 = !DILocation(line: 547, column: 8, scope: !3694)
!3694 = distinct !DILexicalBlock(scope: !3637, file: !3, line: 547, column: 7)
!3695 = !DILocation(line: 547, column: 7, scope: !3637)
!3696 = !DILocation(line: 548, column: 7, scope: !3694)
!3697 = !DILocation(line: 548, column: 20, scope: !3694)
!3698 = !DILocation(line: 548, column: 47, scope: !3694)
!3699 = !DILocation(line: 548, column: 5, scope: !3694)
!3700 = !DILocation(line: 551, column: 7, scope: !3701)
!3701 = distinct !DILexicalBlock(scope: !3637, file: !3, line: 551, column: 7)
!3702 = !DILocation(line: 551, column: 7, scope: !3637)
!3703 = !DILocation(line: 552, column: 31, scope: !3701)
!3704 = !DILocation(line: 552, column: 5, scope: !3701)
!3705 = !DILocation(line: 554, column: 8, scope: !3706)
!3706 = distinct !DILexicalBlock(scope: !3637, file: !3, line: 554, column: 7)
!3707 = !DILocation(line: 554, column: 7, scope: !3637)
!3708 = !DILocation(line: 555, column: 5, scope: !3706)
!3709 = !DILocation(line: 556, column: 1, scope: !3637)
!3710 = distinct !DISubprogram(name: "cgraph_analyze_function", scope: !3, file: !3, line: 846, type: !3361, scopeLine: 847, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!3711 = !DILocalVariable(name: "node", arg: 1, scope: !3710, file: !3, line: 846, type: !3216)
!3712 = !DILocation(line: 846, column: 46, scope: !3710)
!3713 = !DILocalVariable(name: "save", scope: !3710, file: !3, line: 848, type: !1821)
!3714 = !DILocation(line: 848, column: 8, scope: !3710)
!3715 = !DILocation(line: 848, column: 15, scope: !3710)
!3716 = !DILocalVariable(name: "decl", scope: !3710, file: !3, line: 849, type: !1821)
!3717 = !DILocation(line: 849, column: 8, scope: !3710)
!3718 = !DILocation(line: 849, column: 15, scope: !3710)
!3719 = !DILocation(line: 849, column: 21, scope: !3710)
!3720 = !DILocation(line: 851, column: 27, scope: !3710)
!3721 = !DILocation(line: 851, column: 25, scope: !3710)
!3722 = !DILocation(line: 852, column: 14, scope: !3710)
!3723 = !DILocation(line: 852, column: 3, scope: !3710)
!3724 = !DILocation(line: 854, column: 37, scope: !3710)
!3725 = !DILocation(line: 854, column: 43, scope: !3710)
!3726 = !DILocation(line: 854, column: 3, scope: !3710)
!3727 = !DILocation(line: 860, column: 21, scope: !3728)
!3728 = distinct !DILexicalBlock(scope: !3710, file: !3, line: 860, column: 7)
!3729 = !DILocation(line: 860, column: 8, scope: !3728)
!3730 = !DILocation(line: 860, column: 7, scope: !3710)
!3731 = !DILocation(line: 861, column: 29, scope: !3728)
!3732 = !DILocation(line: 861, column: 5, scope: !3728)
!3733 = !DILocation(line: 862, column: 31, scope: !3710)
!3734 = !DILocation(line: 862, column: 3, scope: !3710)
!3735 = !DILocation(line: 864, column: 26, scope: !3710)
!3736 = !DILocation(line: 864, column: 3, scope: !3710)
!3737 = !DILocation(line: 865, column: 3, scope: !3710)
!3738 = !DILocation(line: 865, column: 9, scope: !3710)
!3739 = !DILocation(line: 865, column: 18, scope: !3710)
!3740 = !DILocation(line: 867, column: 3, scope: !3710)
!3741 = !DILocation(line: 868, column: 27, scope: !3710)
!3742 = !DILocation(line: 868, column: 25, scope: !3710)
!3743 = !DILocation(line: 869, column: 1, scope: !3710)
!3744 = distinct !DISubprogram(name: "gimple_in_ssa_p", scope: !3745, file: !3745, line: 33, type: !3746, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!3745 = !DIFile(filename: "./tree-flow-inline.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3746 = !DISubroutineType(types: !3747)
!3747 = !{!1941, !3748}
!3748 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3749, size: 64)
!3749 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2575)
!3750 = !DILocalVariable(name: "fun", arg: 1, scope: !3744, file: !3745, line: 33, type: !3748)
!3751 = !DILocation(line: 33, column: 41, scope: !3744)
!3752 = !DILocation(line: 35, column: 10, scope: !3744)
!3753 = !DILocation(line: 35, column: 14, scope: !3744)
!3754 = !DILocation(line: 35, column: 17, scope: !3744)
!3755 = !DILocation(line: 35, column: 22, scope: !3744)
!3756 = !DILocation(line: 35, column: 32, scope: !3744)
!3757 = !DILocation(line: 35, column: 35, scope: !3744)
!3758 = !DILocation(line: 35, column: 40, scope: !3744)
!3759 = !DILocation(line: 35, column: 51, scope: !3744)
!3760 = !DILocation(line: 0, scope: !3744)
!3761 = !DILocation(line: 35, column: 3, scope: !3744)
!3762 = distinct !DISubprogram(name: "cgraph_expand_function", scope: !3, file: !3, line: 1549, type: !3361, scopeLine: 1550, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!3763 = !DILocalVariable(name: "node", arg: 1, scope: !3762, file: !3, line: 1549, type: !3216)
!3764 = !DILocation(line: 1549, column: 45, scope: !3762)
!3765 = !DILocalVariable(name: "decl", scope: !3762, file: !3, line: 1551, type: !1821)
!3766 = !DILocation(line: 1551, column: 8, scope: !3762)
!3767 = !DILocation(line: 1551, column: 15, scope: !3762)
!3768 = !DILocation(line: 1551, column: 21, scope: !3762)
!3769 = !DILocation(line: 1554, column: 3, scope: !3762)
!3770 = !DILocation(line: 1556, column: 22, scope: !3762)
!3771 = !DILocation(line: 1556, column: 3, scope: !3762)
!3772 = !DILocation(line: 1557, column: 3, scope: !3762)
!3773 = !DILocation(line: 1557, column: 9, scope: !3762)
!3774 = !DILocation(line: 1557, column: 17, scope: !3762)
!3775 = !DILocation(line: 1559, column: 3, scope: !3762)
!3776 = !DILocation(line: 1562, column: 29, scope: !3762)
!3777 = !DILocation(line: 1562, column: 3, scope: !3762)
!3778 = !DILocation(line: 1565, column: 3, scope: !3762)
!3779 = !DILocation(line: 1566, column: 25, scope: !3762)
!3780 = !DILocation(line: 1567, column: 7, scope: !3781)
!3781 = distinct !DILexicalBlock(scope: !3762, file: !3, line: 1567, column: 7)
!3782 = !DILocation(line: 1567, column: 13, scope: !3781)
!3783 = !DILocation(line: 1567, column: 7, scope: !3762)
!3784 = !DILocalVariable(name: "alias", scope: !3785, file: !3, line: 1569, type: !3216)
!3785 = distinct !DILexicalBlock(scope: !3781, file: !3, line: 1568, column: 5)
!3786 = !DILocation(line: 1569, column: 27, scope: !3785)
!3787 = !DILocalVariable(name: "next", scope: !3785, file: !3, line: 1569, type: !3216)
!3788 = !DILocation(line: 1569, column: 35, scope: !3785)
!3789 = !DILocalVariable(name: "saved_alias", scope: !3785, file: !3, line: 1570, type: !1941)
!3790 = !DILocation(line: 1570, column: 12, scope: !3785)
!3791 = !DILocation(line: 1570, column: 26, scope: !3785)
!3792 = !DILocation(line: 1570, column: 32, scope: !3785)
!3793 = !DILocation(line: 1571, column: 20, scope: !3794)
!3794 = distinct !DILexicalBlock(scope: !3785, file: !3, line: 1571, column: 7)
!3795 = !DILocation(line: 1571, column: 26, scope: !3794)
!3796 = !DILocation(line: 1571, column: 18, scope: !3794)
!3797 = !DILocation(line: 1571, column: 12, scope: !3794)
!3798 = !DILocation(line: 1572, column: 11, scope: !3799)
!3799 = distinct !DILexicalBlock(scope: !3794, file: !3, line: 1571, column: 7)
!3800 = !DILocation(line: 1572, column: 17, scope: !3799)
!3801 = !DILocation(line: 1572, column: 20, scope: !3799)
!3802 = !DILocation(line: 1572, column: 27, scope: !3799)
!3803 = !DILocation(line: 0, scope: !3799)
!3804 = !DILocation(line: 1571, column: 7, scope: !3794)
!3805 = !DILocation(line: 1572, column: 41, scope: !3799)
!3806 = !DILocation(line: 1572, column: 48, scope: !3799)
!3807 = !DILocation(line: 1572, column: 39, scope: !3799)
!3808 = !DILocation(line: 1571, column: 7, scope: !3799)
!3809 = distinct !{!3809, !3804, !3810}
!3810 = !DILocation(line: 1573, column: 9, scope: !3794)
!3811 = !DILocation(line: 1576, column: 7, scope: !3785)
!3812 = !DILocation(line: 1576, column: 14, scope: !3813)
!3813 = distinct !DILexicalBlock(scope: !3814, file: !3, line: 1576, column: 7)
!3814 = distinct !DILexicalBlock(scope: !3785, file: !3, line: 1576, column: 7)
!3815 = !DILocation(line: 1576, column: 7, scope: !3814)
!3816 = !DILocation(line: 1578, column: 11, scope: !3817)
!3817 = distinct !DILexicalBlock(scope: !3813, file: !3, line: 1577, column: 9)
!3818 = !DILocation(line: 1578, column: 18, scope: !3817)
!3819 = !DILocation(line: 1578, column: 9, scope: !3817)
!3820 = !DILocation(line: 1579, column: 9, scope: !3821)
!3821 = distinct !DILexicalBlock(scope: !3817, file: !3, line: 1579, column: 8)
!3822 = !DILocation(line: 1579, column: 16, scope: !3821)
!3823 = !DILocation(line: 1579, column: 22, scope: !3821)
!3824 = !DILocation(line: 1579, column: 8, scope: !3817)
!3825 = !DILocation(line: 1580, column: 22, scope: !3821)
!3826 = !DILocation(line: 1580, column: 29, scope: !3821)
!3827 = !DILocation(line: 1581, column: 8, scope: !3821)
!3828 = !DILocation(line: 1580, column: 6, scope: !3821)
!3829 = !DILocation(line: 1583, column: 22, scope: !3821)
!3830 = !DILocation(line: 1583, column: 6, scope: !3821)
!3831 = !DILocation(line: 1584, column: 2, scope: !3817)
!3832 = !DILocation(line: 1576, column: 29, scope: !3813)
!3833 = !DILocation(line: 1576, column: 27, scope: !3813)
!3834 = !DILocation(line: 1576, column: 7, scope: !3813)
!3835 = distinct !{!3835, !3815, !3836}
!3836 = !DILocation(line: 1584, column: 2, scope: !3814)
!3837 = !DILocation(line: 1585, column: 21, scope: !3785)
!3838 = !DILocation(line: 1585, column: 7, scope: !3785)
!3839 = !DILocation(line: 1585, column: 13, scope: !3785)
!3840 = !DILocation(line: 1585, column: 19, scope: !3785)
!3841 = !DILocation(line: 1586, column: 5, scope: !3785)
!3842 = !DILocation(line: 1587, column: 3, scope: !3762)
!3843 = !DILocation(line: 1588, column: 33, scope: !3762)
!3844 = !DILocation(line: 1588, column: 3, scope: !3762)
!3845 = !DILocation(line: 1591, column: 31, scope: !3762)
!3846 = !DILocation(line: 1591, column: 3, scope: !3762)
!3847 = !DILocation(line: 1593, column: 31, scope: !3762)
!3848 = !DILocation(line: 1594, column: 1, scope: !3762)
!3849 = distinct !DISubprogram(name: "cgraph_reset_node", scope: !3, file: !3, line: 469, type: !3361, scopeLine: 470, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!3850 = !DILocalVariable(name: "node", arg: 1, scope: !3849, file: !3, line: 469, type: !3216)
!3851 = !DILocation(line: 469, column: 40, scope: !3849)
!3852 = !DILocation(line: 476, column: 3, scope: !3849)
!3853 = !DILocation(line: 479, column: 12, scope: !3849)
!3854 = !DILocation(line: 479, column: 18, scope: !3849)
!3855 = !DILocation(line: 479, column: 3, scope: !3849)
!3856 = !DILocation(line: 480, column: 12, scope: !3849)
!3857 = !DILocation(line: 480, column: 18, scope: !3849)
!3858 = !DILocation(line: 480, column: 3, scope: !3849)
!3859 = !DILocation(line: 481, column: 12, scope: !3849)
!3860 = !DILocation(line: 481, column: 18, scope: !3849)
!3861 = !DILocation(line: 481, column: 3, scope: !3849)
!3862 = !DILocation(line: 482, column: 3, scope: !3849)
!3863 = !DILocation(line: 482, column: 9, scope: !3849)
!3864 = !DILocation(line: 482, column: 18, scope: !3849)
!3865 = !DILocation(line: 483, column: 3, scope: !3849)
!3866 = !DILocation(line: 483, column: 9, scope: !3849)
!3867 = !DILocation(line: 483, column: 15, scope: !3849)
!3868 = !DILocation(line: 483, column: 39, scope: !3849)
!3869 = !DILocation(line: 484, column: 3, scope: !3849)
!3870 = !DILocation(line: 484, column: 9, scope: !3849)
!3871 = !DILocation(line: 484, column: 15, scope: !3849)
!3872 = !DILocation(line: 484, column: 25, scope: !3849)
!3873 = !DILocation(line: 486, column: 31, scope: !3849)
!3874 = !DILocation(line: 486, column: 3, scope: !3849)
!3875 = !DILocation(line: 491, column: 7, scope: !3876)
!3876 = distinct !DILexicalBlock(scope: !3849, file: !3, line: 491, column: 7)
!3877 = !DILocation(line: 491, column: 13, scope: !3876)
!3878 = !DILocation(line: 491, column: 7, scope: !3849)
!3879 = !DILocalVariable(name: "n", scope: !3880, file: !3, line: 493, type: !3216)
!3880 = distinct !DILexicalBlock(scope: !3876, file: !3, line: 492, column: 5)
!3881 = !DILocation(line: 493, column: 27, scope: !3880)
!3882 = !DILocation(line: 495, column: 16, scope: !3883)
!3883 = distinct !DILexicalBlock(scope: !3880, file: !3, line: 495, column: 7)
!3884 = !DILocation(line: 495, column: 14, scope: !3883)
!3885 = !DILocation(line: 495, column: 12, scope: !3883)
!3886 = !DILocation(line: 495, column: 36, scope: !3887)
!3887 = distinct !DILexicalBlock(scope: !3883, file: !3, line: 495, column: 7)
!3888 = !DILocation(line: 495, column: 7, scope: !3883)
!3889 = !DILocation(line: 496, column: 6, scope: !3890)
!3890 = distinct !DILexicalBlock(scope: !3887, file: !3, line: 496, column: 6)
!3891 = !DILocation(line: 496, column: 11, scope: !3890)
!3892 = !DILocation(line: 496, column: 8, scope: !3890)
!3893 = !DILocation(line: 496, column: 6, scope: !3887)
!3894 = !DILocation(line: 497, column: 4, scope: !3890)
!3895 = !DILocation(line: 495, column: 43, scope: !3887)
!3896 = !DILocation(line: 495, column: 46, scope: !3887)
!3897 = !DILocation(line: 495, column: 41, scope: !3887)
!3898 = !DILocation(line: 495, column: 7, scope: !3887)
!3899 = distinct !{!3899, !3888, !3900}
!3900 = !DILocation(line: 497, column: 4, scope: !3883)
!3901 = !DILocation(line: 498, column: 12, scope: !3902)
!3902 = distinct !DILexicalBlock(scope: !3880, file: !3, line: 498, column: 11)
!3903 = !DILocation(line: 498, column: 11, scope: !3880)
!3904 = !DILocation(line: 499, column: 2, scope: !3902)
!3905 = !DILocation(line: 499, column: 8, scope: !3902)
!3906 = !DILocation(line: 499, column: 18, scope: !3902)
!3907 = !DILocation(line: 500, column: 5, scope: !3880)
!3908 = !DILocation(line: 501, column: 1, scope: !3849)
!3909 = distinct !DISubprogram(name: "record_cdtor_fn", scope: !3, file: !3, line: 164, type: !3910, scopeLine: 165, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!3910 = !DISubroutineType(types: !3911)
!3911 = !{null, !1821}
!3912 = !DILocalVariable(name: "fndecl", arg: 1, scope: !3909, file: !3, line: 164, type: !1821)
!3913 = !DILocation(line: 164, column: 23, scope: !3909)
!3914 = !DILocalVariable(name: "node", scope: !3909, file: !3, line: 166, type: !3216)
!3915 = !DILocation(line: 166, column: 23, scope: !3909)
!3916 = !DILocation(line: 167, column: 15, scope: !3917)
!3917 = distinct !DILexicalBlock(scope: !3909, file: !3, line: 167, column: 7)
!3918 = !DILocation(line: 167, column: 7, scope: !3917)
!3919 = !DILocation(line: 168, column: 7, scope: !3917)
!3920 = !DILocation(line: 168, column: 12, scope: !3917)
!3921 = !DILocation(line: 169, column: 4, scope: !3917)
!3922 = !DILocation(line: 169, column: 8, scope: !3917)
!3923 = !DILocation(line: 167, column: 7, scope: !3909)
!3924 = !DILocation(line: 170, column: 5, scope: !3917)
!3925 = !DILocation(line: 172, column: 7, scope: !3926)
!3926 = distinct !DILexicalBlock(scope: !3909, file: !3, line: 172, column: 7)
!3927 = !DILocation(line: 172, column: 7, scope: !3909)
!3928 = !DILocation(line: 174, column: 7, scope: !3929)
!3929 = distinct !DILexicalBlock(scope: !3926, file: !3, line: 173, column: 5)
!3930 = !DILocation(line: 175, column: 7, scope: !3929)
!3931 = !DILocation(line: 175, column: 40, scope: !3929)
!3932 = !DILocation(line: 176, column: 5, scope: !3929)
!3933 = !DILocation(line: 177, column: 7, scope: !3934)
!3934 = distinct !DILexicalBlock(scope: !3909, file: !3, line: 177, column: 7)
!3935 = !DILocation(line: 177, column: 7, scope: !3909)
!3936 = !DILocation(line: 179, column: 7, scope: !3937)
!3937 = distinct !DILexicalBlock(scope: !3934, file: !3, line: 178, column: 5)
!3938 = !DILocation(line: 180, column: 7, scope: !3937)
!3939 = !DILocation(line: 180, column: 39, scope: !3937)
!3940 = !DILocation(line: 181, column: 5, scope: !3937)
!3941 = !DILocation(line: 182, column: 23, scope: !3909)
!3942 = !DILocation(line: 182, column: 10, scope: !3909)
!3943 = !DILocation(line: 182, column: 8, scope: !3909)
!3944 = !DILocation(line: 183, column: 3, scope: !3909)
!3945 = !DILocation(line: 183, column: 9, scope: !3909)
!3946 = !DILocation(line: 183, column: 15, scope: !3909)
!3947 = !DILocation(line: 183, column: 39, scope: !3909)
!3948 = !DILocation(line: 184, column: 31, scope: !3909)
!3949 = !DILocation(line: 184, column: 3, scope: !3909)
!3950 = !DILocation(line: 185, column: 1, scope: !3909)
!3951 = distinct !DISubprogram(name: "cgraph_mark_if_needed", scope: !3, file: !3, line: 563, type: !3910, scopeLine: 564, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!3952 = !DILocalVariable(name: "decl", arg: 1, scope: !3951, file: !3, line: 563, type: !1821)
!3953 = !DILocation(line: 563, column: 29, scope: !3951)
!3954 = !DILocalVariable(name: "node", scope: !3951, file: !3, line: 565, type: !3216)
!3955 = !DILocation(line: 565, column: 23, scope: !3951)
!3956 = !DILocation(line: 565, column: 43, scope: !3951)
!3957 = !DILocation(line: 565, column: 30, scope: !3951)
!3958 = !DILocation(line: 566, column: 7, scope: !3959)
!3959 = distinct !DILexicalBlock(scope: !3951, file: !3, line: 566, column: 7)
!3960 = !DILocation(line: 566, column: 13, scope: !3959)
!3961 = !DILocation(line: 566, column: 19, scope: !3959)
!3962 = !DILocation(line: 566, column: 29, scope: !3959)
!3963 = !DILocation(line: 566, column: 66, scope: !3959)
!3964 = !DILocation(line: 566, column: 72, scope: !3959)
!3965 = !DILocation(line: 566, column: 32, scope: !3959)
!3966 = !DILocation(line: 566, column: 7, scope: !3951)
!3967 = !DILocation(line: 567, column: 30, scope: !3959)
!3968 = !DILocation(line: 567, column: 5, scope: !3959)
!3969 = !DILocation(line: 568, column: 1, scope: !3951)
!3970 = distinct !DISubprogram(name: "verify_cgraph_node", scope: !3, file: !3, line: 581, type: !3361, scopeLine: 582, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!3971 = !DILocalVariable(name: "node", arg: 1, scope: !3970, file: !3, line: 581, type: !3216)
!3972 = !DILocation(line: 581, column: 41, scope: !3970)
!3973 = !DILocalVariable(name: "e", scope: !3970, file: !3, line: 583, type: !3221)
!3974 = !DILocation(line: 583, column: 23, scope: !3970)
!3975 = !DILocalVariable(name: "this_cfun", scope: !3970, file: !3, line: 584, type: !2574)
!3976 = !DILocation(line: 584, column: 20, scope: !3970)
!3977 = !DILocation(line: 584, column: 32, scope: !3970)
!3978 = !DILocalVariable(name: "saved_cfun", scope: !3970, file: !3, line: 585, type: !2574)
!3979 = !DILocation(line: 585, column: 20, scope: !3970)
!3980 = !DILocation(line: 585, column: 33, scope: !3970)
!3981 = !DILocalVariable(name: "this_block", scope: !3970, file: !3, line: 586, type: !2586)
!3982 = !DILocation(line: 586, column: 15, scope: !3970)
!3983 = !DILocalVariable(name: "gsi", scope: !3970, file: !3, line: 587, type: !3984)
!3984 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_stmt_iterator", file: !810, line: 265, baseType: !3985)
!3985 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !810, line: 254, size: 192, elements: !3986)
!3986 = !{!3987, !3988, !3989}
!3987 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !3985, file: !810, line: 257, baseType: !2147, size: 64)
!3988 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !3985, file: !810, line: 263, baseType: !2142, size: 64, offset: 64)
!3989 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !3985, file: !810, line: 264, baseType: !2586, size: 64, offset: 128)
!3990 = !DILocation(line: 587, column: 24, scope: !3970)
!3991 = !DILocalVariable(name: "error_found", scope: !3970, file: !3, line: 588, type: !1941)
!3992 = !DILocation(line: 588, column: 8, scope: !3970)
!3993 = !DILocation(line: 590, column: 7, scope: !3994)
!3994 = distinct !DILexicalBlock(scope: !3970, file: !3, line: 590, column: 7)
!3995 = !DILocation(line: 590, column: 18, scope: !3994)
!3996 = !DILocation(line: 590, column: 21, scope: !3994)
!3997 = !DILocation(line: 590, column: 7, scope: !3970)
!3998 = !DILocation(line: 591, column: 5, scope: !3994)
!3999 = !DILocation(line: 593, column: 3, scope: !3970)
!4000 = !DILocation(line: 593, column: 3, scope: !4001)
!4001 = distinct !DILexicalBlock(scope: !4002, file: !3, line: 593, column: 3)
!4002 = distinct !DILexicalBlock(scope: !3970, file: !3, line: 593, column: 3)
!4003 = !DILocation(line: 593, column: 3, scope: !4002)
!4004 = !DILocation(line: 595, column: 13, scope: !3970)
!4005 = !DILocation(line: 595, column: 3, scope: !3970)
!4006 = !DILocation(line: 596, column: 12, scope: !4007)
!4007 = distinct !DILexicalBlock(scope: !3970, file: !3, line: 596, column: 3)
!4008 = !DILocation(line: 596, column: 18, scope: !4007)
!4009 = !DILocation(line: 596, column: 10, scope: !4007)
!4010 = !DILocation(line: 596, column: 8, scope: !4007)
!4011 = !DILocation(line: 596, column: 27, scope: !4012)
!4012 = distinct !DILexicalBlock(scope: !4007, file: !3, line: 596, column: 3)
!4013 = !DILocation(line: 596, column: 3, scope: !4007)
!4014 = !DILocation(line: 597, column: 9, scope: !4015)
!4015 = distinct !DILexicalBlock(scope: !4012, file: !3, line: 597, column: 9)
!4016 = !DILocation(line: 597, column: 12, scope: !4015)
!4017 = !DILocation(line: 597, column: 9, scope: !4012)
!4018 = !DILocation(line: 600, column: 49, scope: !4019)
!4019 = distinct !DILexicalBlock(scope: !4015, file: !3, line: 598, column: 7)
!4020 = !DILocation(line: 600, column: 52, scope: !4019)
!4021 = !DILocation(line: 600, column: 31, scope: !4019)
!4022 = !DILocation(line: 600, column: 9, scope: !4019)
!4023 = !DILocation(line: 601, column: 49, scope: !4019)
!4024 = !DILocation(line: 601, column: 52, scope: !4019)
!4025 = !DILocation(line: 601, column: 31, scope: !4019)
!4026 = !DILocation(line: 601, column: 9, scope: !4019)
!4027 = !DILocation(line: 599, column: 2, scope: !4019)
!4028 = !DILocation(line: 602, column: 14, scope: !4019)
!4029 = !DILocation(line: 603, column: 7, scope: !4019)
!4030 = !DILocation(line: 596, column: 34, scope: !4012)
!4031 = !DILocation(line: 596, column: 37, scope: !4012)
!4032 = !DILocation(line: 596, column: 32, scope: !4012)
!4033 = !DILocation(line: 596, column: 3, scope: !4012)
!4034 = distinct !{!4034, !4013, !4035}
!4035 = !DILocation(line: 603, column: 7, scope: !4007)
!4036 = !DILocation(line: 604, column: 7, scope: !4037)
!4037 = distinct !DILexicalBlock(scope: !3970, file: !3, line: 604, column: 7)
!4038 = !DILocation(line: 604, column: 13, scope: !4037)
!4039 = !DILocation(line: 604, column: 19, scope: !4037)
!4040 = !DILocation(line: 604, column: 7, scope: !3970)
!4041 = !DILocation(line: 606, column: 7, scope: !4042)
!4042 = distinct !DILexicalBlock(scope: !4037, file: !3, line: 605, column: 5)
!4043 = !DILocation(line: 607, column: 19, scope: !4042)
!4044 = !DILocation(line: 608, column: 5, scope: !4042)
!4045 = !DILocation(line: 609, column: 7, scope: !4046)
!4046 = distinct !DILexicalBlock(scope: !3970, file: !3, line: 609, column: 7)
!4047 = !DILocation(line: 609, column: 13, scope: !4046)
!4048 = !DILocation(line: 609, column: 20, scope: !4046)
!4049 = !DILocation(line: 609, column: 31, scope: !4046)
!4050 = !DILocation(line: 609, column: 34, scope: !4046)
!4051 = !DILocation(line: 609, column: 40, scope: !4046)
!4052 = !DILocation(line: 609, column: 46, scope: !4046)
!4053 = !DILocation(line: 609, column: 7, scope: !3970)
!4054 = !DILocation(line: 611, column: 7, scope: !4055)
!4055 = distinct !DILexicalBlock(scope: !4046, file: !3, line: 610, column: 5)
!4056 = !DILocation(line: 612, column: 19, scope: !4055)
!4057 = !DILocation(line: 613, column: 5, scope: !4055)
!4058 = !DILocation(line: 614, column: 7, scope: !4059)
!4059 = distinct !DILexicalBlock(scope: !3970, file: !3, line: 614, column: 7)
!4060 = !DILocation(line: 614, column: 13, scope: !4059)
!4061 = !DILocation(line: 614, column: 20, scope: !4059)
!4062 = !DILocation(line: 614, column: 31, scope: !4059)
!4063 = !DILocation(line: 614, column: 34, scope: !4059)
!4064 = !DILocation(line: 614, column: 40, scope: !4059)
!4065 = !DILocation(line: 614, column: 7, scope: !3970)
!4066 = !DILocation(line: 616, column: 7, scope: !4067)
!4067 = distinct !DILexicalBlock(scope: !4059, file: !3, line: 615, column: 5)
!4068 = !DILocation(line: 617, column: 19, scope: !4067)
!4069 = !DILocation(line: 618, column: 5, scope: !4067)
!4070 = !DILocation(line: 619, column: 7, scope: !4071)
!4071 = distinct !DILexicalBlock(scope: !3970, file: !3, line: 619, column: 7)
!4072 = !DILocation(line: 619, column: 13, scope: !4071)
!4073 = !DILocation(line: 619, column: 20, scope: !4071)
!4074 = !DILocation(line: 619, column: 31, scope: !4071)
!4075 = !DILocation(line: 619, column: 34, scope: !4071)
!4076 = !DILocation(line: 619, column: 40, scope: !4071)
!4077 = !DILocation(line: 619, column: 7, scope: !3970)
!4078 = !DILocation(line: 621, column: 7, scope: !4079)
!4079 = distinct !DILexicalBlock(scope: !4071, file: !3, line: 620, column: 5)
!4080 = !DILocation(line: 622, column: 19, scope: !4079)
!4081 = !DILocation(line: 623, column: 5, scope: !4079)
!4082 = !DILocation(line: 624, column: 12, scope: !4083)
!4083 = distinct !DILexicalBlock(scope: !3970, file: !3, line: 624, column: 3)
!4084 = !DILocation(line: 624, column: 18, scope: !4083)
!4085 = !DILocation(line: 624, column: 10, scope: !4083)
!4086 = !DILocation(line: 624, column: 8, scope: !4083)
!4087 = !DILocation(line: 624, column: 27, scope: !4088)
!4088 = distinct !DILexicalBlock(scope: !4083, file: !3, line: 624, column: 3)
!4089 = !DILocation(line: 624, column: 3, scope: !4083)
!4090 = !DILocation(line: 626, column: 11, scope: !4091)
!4091 = distinct !DILexicalBlock(scope: !4092, file: !3, line: 626, column: 11)
!4092 = distinct !DILexicalBlock(scope: !4088, file: !3, line: 625, column: 5)
!4093 = !DILocation(line: 626, column: 14, scope: !4091)
!4094 = !DILocation(line: 626, column: 20, scope: !4091)
!4095 = !DILocation(line: 626, column: 11, scope: !4092)
!4096 = !DILocation(line: 628, column: 4, scope: !4097)
!4097 = distinct !DILexicalBlock(scope: !4091, file: !3, line: 627, column: 2)
!4098 = !DILocation(line: 629, column: 16, scope: !4097)
!4099 = !DILocation(line: 630, column: 2, scope: !4097)
!4100 = !DILocation(line: 631, column: 11, scope: !4101)
!4101 = distinct !DILexicalBlock(scope: !4092, file: !3, line: 631, column: 11)
!4102 = !DILocation(line: 631, column: 14, scope: !4101)
!4103 = !DILocation(line: 631, column: 24, scope: !4101)
!4104 = !DILocation(line: 631, column: 11, scope: !4092)
!4105 = !DILocation(line: 633, column: 4, scope: !4106)
!4106 = distinct !DILexicalBlock(scope: !4101, file: !3, line: 632, column: 2)
!4107 = !DILocation(line: 634, column: 16, scope: !4106)
!4108 = !DILocation(line: 635, column: 2, scope: !4106)
!4109 = !DILocation(line: 636, column: 11, scope: !4110)
!4110 = distinct !DILexicalBlock(scope: !4092, file: !3, line: 636, column: 11)
!4111 = !DILocation(line: 636, column: 14, scope: !4110)
!4112 = !DILocation(line: 636, column: 24, scope: !4110)
!4113 = !DILocation(line: 636, column: 11, scope: !4092)
!4114 = !DILocation(line: 638, column: 4, scope: !4115)
!4115 = distinct !DILexicalBlock(scope: !4110, file: !3, line: 637, column: 2)
!4116 = !DILocation(line: 639, column: 16, scope: !4115)
!4117 = !DILocation(line: 640, column: 2, scope: !4115)
!4118 = !DILocation(line: 641, column: 30, scope: !4119)
!4119 = distinct !DILexicalBlock(scope: !4092, file: !3, line: 641, column: 11)
!4120 = !DILocation(line: 641, column: 33, scope: !4119)
!4121 = !DILocation(line: 641, column: 41, scope: !4119)
!4122 = !DILocation(line: 641, column: 11, scope: !4119)
!4123 = !DILocation(line: 642, column: 11, scope: !4119)
!4124 = !DILocation(line: 642, column: 15, scope: !4119)
!4125 = !DILocation(line: 642, column: 18, scope: !4119)
!4126 = !DILocation(line: 642, column: 26, scope: !4119)
!4127 = !DILocation(line: 642, column: 33, scope: !4119)
!4128 = !DILocation(line: 643, column: 11, scope: !4119)
!4129 = !DILocation(line: 643, column: 15, scope: !4119)
!4130 = !DILocation(line: 643, column: 18, scope: !4119)
!4131 = !DILocation(line: 644, column: 43, scope: !4119)
!4132 = !DILocation(line: 644, column: 46, scope: !4119)
!4133 = !DILocation(line: 644, column: 54, scope: !4119)
!4134 = !DILocation(line: 645, column: 19, scope: !4119)
!4135 = !DILocation(line: 645, column: 22, scope: !4119)
!4136 = !DILocation(line: 645, column: 8, scope: !4119)
!4137 = !DILocation(line: 644, column: 11, scope: !4119)
!4138 = !DILocation(line: 644, column: 8, scope: !4119)
!4139 = !DILocation(line: 641, column: 11, scope: !4092)
!4140 = !DILocation(line: 648, column: 6, scope: !4141)
!4141 = distinct !DILexicalBlock(scope: !4119, file: !3, line: 646, column: 2)
!4142 = !DILocation(line: 648, column: 9, scope: !4141)
!4143 = !DILocation(line: 649, column: 36, scope: !4141)
!4144 = !DILocation(line: 649, column: 39, scope: !4141)
!4145 = !DILocation(line: 649, column: 47, scope: !4141)
!4146 = !DILocation(line: 650, column: 19, scope: !4141)
!4147 = !DILocation(line: 650, column: 22, scope: !4141)
!4148 = !DILocation(line: 650, column: 8, scope: !4141)
!4149 = !DILocation(line: 649, column: 4, scope: !4141)
!4150 = !DILocation(line: 647, column: 4, scope: !4141)
!4151 = !DILocation(line: 651, column: 16, scope: !4141)
!4152 = !DILocation(line: 652, column: 2, scope: !4141)
!4153 = !DILocation(line: 653, column: 12, scope: !4154)
!4154 = distinct !DILexicalBlock(scope: !4092, file: !3, line: 653, column: 11)
!4155 = !DILocation(line: 653, column: 15, scope: !4154)
!4156 = !DILocation(line: 653, column: 11, scope: !4092)
!4157 = !DILocation(line: 655, column: 8, scope: !4158)
!4158 = distinct !DILexicalBlock(scope: !4159, file: !3, line: 655, column: 8)
!4159 = distinct !DILexicalBlock(scope: !4154, file: !3, line: 654, column: 2)
!4160 = !DILocation(line: 655, column: 14, scope: !4158)
!4161 = !DILocation(line: 655, column: 21, scope: !4158)
!4162 = !DILocation(line: 656, column: 12, scope: !4158)
!4163 = !DILocation(line: 656, column: 15, scope: !4158)
!4164 = !DILocation(line: 656, column: 23, scope: !4158)
!4165 = !DILocation(line: 656, column: 30, scope: !4158)
!4166 = !DILocation(line: 657, column: 7, scope: !4158)
!4167 = !DILocation(line: 657, column: 10, scope: !4158)
!4168 = !DILocation(line: 657, column: 18, scope: !4158)
!4169 = !DILocation(line: 657, column: 25, scope: !4158)
!4170 = !DILocation(line: 657, column: 38, scope: !4158)
!4171 = !DILocation(line: 657, column: 41, scope: !4158)
!4172 = !DILocation(line: 656, column: 8, scope: !4158)
!4173 = !DILocation(line: 655, column: 8, scope: !4159)
!4174 = !DILocation(line: 659, column: 8, scope: !4175)
!4175 = distinct !DILexicalBlock(scope: !4158, file: !3, line: 658, column: 6)
!4176 = !DILocation(line: 660, column: 20, scope: !4175)
!4177 = !DILocation(line: 661, column: 6, scope: !4175)
!4178 = !DILocation(line: 662, column: 8, scope: !4179)
!4179 = distinct !DILexicalBlock(scope: !4159, file: !3, line: 662, column: 8)
!4180 = !DILocation(line: 662, column: 14, scope: !4179)
!4181 = !DILocation(line: 662, column: 23, scope: !4179)
!4182 = !DILocation(line: 662, column: 8, scope: !4159)
!4183 = !DILocation(line: 664, column: 8, scope: !4184)
!4184 = distinct !DILexicalBlock(scope: !4179, file: !3, line: 663, column: 6)
!4185 = !DILocation(line: 665, column: 20, scope: !4184)
!4186 = !DILocation(line: 666, column: 6, scope: !4184)
!4187 = !DILocation(line: 667, column: 2, scope: !4159)
!4188 = !DILocation(line: 669, column: 6, scope: !4189)
!4189 = distinct !DILexicalBlock(scope: !4154, file: !3, line: 669, column: 6)
!4190 = !DILocation(line: 669, column: 12, scope: !4189)
!4191 = !DILocation(line: 669, column: 19, scope: !4189)
!4192 = !DILocation(line: 669, column: 6, scope: !4154)
!4193 = !DILocation(line: 671, column: 6, scope: !4194)
!4194 = distinct !DILexicalBlock(scope: !4189, file: !3, line: 670, column: 4)
!4195 = !DILocation(line: 672, column: 18, scope: !4194)
!4196 = !DILocation(line: 673, column: 4, scope: !4194)
!4197 = !DILocation(line: 674, column: 5, scope: !4092)
!4198 = !DILocation(line: 624, column: 34, scope: !4088)
!4199 = !DILocation(line: 624, column: 37, scope: !4088)
!4200 = !DILocation(line: 624, column: 32, scope: !4088)
!4201 = !DILocation(line: 624, column: 3, scope: !4088)
!4202 = distinct !{!4202, !4089, !4203}
!4203 = !DILocation(line: 674, column: 5, scope: !4083)
!4204 = !DILocation(line: 675, column: 8, scope: !4205)
!4205 = distinct !DILexicalBlock(scope: !3970, file: !3, line: 675, column: 7)
!4206 = !DILocation(line: 675, column: 14, scope: !4205)
!4207 = !DILocation(line: 675, column: 22, scope: !4205)
!4208 = !DILocation(line: 675, column: 25, scope: !4205)
!4209 = !DILocation(line: 675, column: 31, scope: !4205)
!4210 = !DILocation(line: 675, column: 38, scope: !4205)
!4211 = !DILocation(line: 675, column: 7, scope: !3970)
!4212 = !DILocation(line: 677, column: 7, scope: !4213)
!4213 = distinct !DILexicalBlock(scope: !4205, file: !3, line: 676, column: 5)
!4214 = !DILocation(line: 678, column: 19, scope: !4213)
!4215 = !DILocation(line: 679, column: 5, scope: !4213)
!4216 = !DILocation(line: 680, column: 7, scope: !4217)
!4217 = distinct !DILexicalBlock(scope: !3970, file: !3, line: 680, column: 7)
!4218 = !DILocation(line: 680, column: 13, scope: !4217)
!4219 = !DILocation(line: 680, column: 20, scope: !4217)
!4220 = !DILocation(line: 680, column: 34, scope: !4217)
!4221 = !DILocation(line: 680, column: 31, scope: !4217)
!4222 = !DILocation(line: 680, column: 7, scope: !3970)
!4223 = !DILocation(line: 682, column: 7, scope: !4224)
!4224 = distinct !DILexicalBlock(scope: !4217, file: !3, line: 681, column: 5)
!4225 = !DILocation(line: 683, column: 19, scope: !4224)
!4226 = !DILocation(line: 684, column: 5, scope: !4224)
!4227 = !DILocation(line: 686, column: 21, scope: !4228)
!4228 = distinct !DILexicalBlock(scope: !3970, file: !3, line: 686, column: 7)
!4229 = !DILocation(line: 686, column: 27, scope: !4228)
!4230 = !DILocation(line: 686, column: 8, scope: !4228)
!4231 = !DILocation(line: 686, column: 7, scope: !3970)
!4232 = !DILocation(line: 688, column: 7, scope: !4233)
!4233 = distinct !DILexicalBlock(scope: !4228, file: !3, line: 687, column: 5)
!4234 = !DILocation(line: 689, column: 19, scope: !4233)
!4235 = !DILocation(line: 690, column: 5, scope: !4233)
!4236 = !DILocation(line: 692, column: 7, scope: !4237)
!4237 = distinct !DILexicalBlock(scope: !3970, file: !3, line: 692, column: 7)
!4238 = !DILocation(line: 692, column: 13, scope: !4237)
!4239 = !DILocation(line: 692, column: 7, scope: !3970)
!4240 = !DILocalVariable(name: "n", scope: !4241, file: !3, line: 694, type: !3216)
!4241 = distinct !DILexicalBlock(scope: !4237, file: !3, line: 693, column: 5)
!4242 = !DILocation(line: 694, column: 27, scope: !4241)
!4243 = !DILocation(line: 695, column: 16, scope: !4244)
!4244 = distinct !DILexicalBlock(scope: !4241, file: !3, line: 695, column: 7)
!4245 = !DILocation(line: 695, column: 22, scope: !4244)
!4246 = !DILocation(line: 695, column: 32, scope: !4244)
!4247 = !DILocation(line: 695, column: 14, scope: !4244)
!4248 = !DILocation(line: 695, column: 12, scope: !4244)
!4249 = !DILocation(line: 695, column: 40, scope: !4250)
!4250 = distinct !DILexicalBlock(scope: !4244, file: !3, line: 695, column: 7)
!4251 = !DILocation(line: 695, column: 7, scope: !4244)
!4252 = !DILocation(line: 696, column: 13, scope: !4253)
!4253 = distinct !DILexicalBlock(scope: !4250, file: !3, line: 696, column: 13)
!4254 = !DILocation(line: 696, column: 18, scope: !4253)
!4255 = !DILocation(line: 696, column: 15, scope: !4253)
!4256 = !DILocation(line: 696, column: 13, scope: !4250)
!4257 = !DILocation(line: 697, column: 4, scope: !4253)
!4258 = !DILocation(line: 695, column: 47, scope: !4250)
!4259 = !DILocation(line: 695, column: 50, scope: !4250)
!4260 = !DILocation(line: 695, column: 45, scope: !4250)
!4261 = !DILocation(line: 695, column: 7, scope: !4250)
!4262 = distinct !{!4262, !4251, !4263}
!4263 = !DILocation(line: 697, column: 4, scope: !4244)
!4264 = !DILocation(line: 698, column: 12, scope: !4265)
!4265 = distinct !DILexicalBlock(scope: !4241, file: !3, line: 698, column: 11)
!4266 = !DILocation(line: 698, column: 11, scope: !4241)
!4267 = !DILocation(line: 700, column: 4, scope: !4268)
!4268 = distinct !DILexicalBlock(scope: !4265, file: !3, line: 699, column: 2)
!4269 = !DILocation(line: 701, column: 16, scope: !4268)
!4270 = !DILocation(line: 702, column: 2, scope: !4268)
!4271 = !DILocation(line: 703, column: 5, scope: !4241)
!4272 = !DILocation(line: 704, column: 7, scope: !4273)
!4273 = distinct !DILexicalBlock(scope: !3970, file: !3, line: 704, column: 7)
!4274 = !DILocation(line: 704, column: 13, scope: !4273)
!4275 = !DILocation(line: 704, column: 7, scope: !3970)
!4276 = !DILocalVariable(name: "n", scope: !4277, file: !3, line: 706, type: !3216)
!4277 = distinct !DILexicalBlock(scope: !4273, file: !3, line: 705, column: 5)
!4278 = !DILocation(line: 706, column: 27, scope: !4277)
!4279 = !DILocation(line: 707, column: 16, scope: !4280)
!4280 = distinct !DILexicalBlock(scope: !4277, file: !3, line: 707, column: 7)
!4281 = !DILocation(line: 707, column: 22, scope: !4280)
!4282 = !DILocation(line: 707, column: 14, scope: !4280)
!4283 = !DILocation(line: 707, column: 12, scope: !4280)
!4284 = !DILocation(line: 707, column: 30, scope: !4285)
!4285 = distinct !DILexicalBlock(scope: !4280, file: !3, line: 707, column: 7)
!4286 = !DILocation(line: 707, column: 7, scope: !4280)
!4287 = !DILocation(line: 708, column: 13, scope: !4288)
!4288 = distinct !DILexicalBlock(scope: !4285, file: !3, line: 708, column: 13)
!4289 = !DILocation(line: 708, column: 16, scope: !4288)
!4290 = !DILocation(line: 708, column: 28, scope: !4288)
!4291 = !DILocation(line: 708, column: 25, scope: !4288)
!4292 = !DILocation(line: 708, column: 13, scope: !4285)
!4293 = !DILocation(line: 709, column: 4, scope: !4288)
!4294 = !DILocation(line: 707, column: 37, scope: !4285)
!4295 = !DILocation(line: 707, column: 40, scope: !4285)
!4296 = !DILocation(line: 707, column: 35, scope: !4285)
!4297 = !DILocation(line: 707, column: 7, scope: !4285)
!4298 = distinct !{!4298, !4286, !4299}
!4299 = !DILocation(line: 709, column: 4, scope: !4280)
!4300 = !DILocation(line: 710, column: 11, scope: !4301)
!4301 = distinct !DILexicalBlock(scope: !4277, file: !3, line: 710, column: 11)
!4302 = !DILocation(line: 710, column: 11, scope: !4277)
!4303 = !DILocation(line: 712, column: 4, scope: !4304)
!4304 = distinct !DILexicalBlock(scope: !4301, file: !3, line: 711, column: 2)
!4305 = !DILocation(line: 713, column: 16, scope: !4304)
!4306 = !DILocation(line: 714, column: 2, scope: !4304)
!4307 = !DILocation(line: 715, column: 5, scope: !4277)
!4308 = !DILocation(line: 716, column: 8, scope: !4309)
!4309 = distinct !DILexicalBlock(scope: !3970, file: !3, line: 716, column: 7)
!4310 = !DILocation(line: 716, column: 14, scope: !4309)
!4311 = !DILocation(line: 716, column: 33, scope: !4309)
!4312 = !DILocation(line: 716, column: 36, scope: !4309)
!4313 = !DILocation(line: 716, column: 42, scope: !4309)
!4314 = !DILocation(line: 716, column: 62, scope: !4309)
!4315 = !DILocation(line: 716, column: 66, scope: !4309)
!4316 = !DILocation(line: 716, column: 72, scope: !4309)
!4317 = !DILocation(line: 716, column: 7, scope: !3970)
!4318 = !DILocation(line: 718, column: 8, scope: !4319)
!4319 = distinct !DILexicalBlock(scope: !4309, file: !3, line: 717, column: 5)
!4320 = !DILocation(line: 719, column: 20, scope: !4319)
!4321 = !DILocation(line: 720, column: 5, scope: !4319)
!4322 = !DILocation(line: 721, column: 8, scope: !4323)
!4323 = distinct !DILexicalBlock(scope: !3970, file: !3, line: 721, column: 7)
!4324 = !DILocation(line: 721, column: 14, scope: !4323)
!4325 = !DILocation(line: 721, column: 33, scope: !4323)
!4326 = !DILocation(line: 721, column: 36, scope: !4323)
!4327 = !DILocation(line: 721, column: 42, scope: !4323)
!4328 = !DILocation(line: 721, column: 51, scope: !4323)
!4329 = !DILocation(line: 721, column: 54, scope: !4323)
!4330 = !DILocation(line: 721, column: 60, scope: !4323)
!4331 = !DILocation(line: 721, column: 70, scope: !4323)
!4332 = !DILocation(line: 721, column: 80, scope: !4323)
!4333 = !DILocation(line: 721, column: 77, scope: !4323)
!4334 = !DILocation(line: 721, column: 7, scope: !3970)
!4335 = !DILocation(line: 723, column: 7, scope: !4336)
!4336 = distinct !DILexicalBlock(scope: !4323, file: !3, line: 722, column: 5)
!4337 = !DILocation(line: 724, column: 19, scope: !4336)
!4338 = !DILocation(line: 725, column: 5, scope: !4336)
!4339 = !DILocation(line: 726, column: 7, scope: !4340)
!4340 = distinct !DILexicalBlock(scope: !3970, file: !3, line: 726, column: 7)
!4341 = !DILocation(line: 726, column: 13, scope: !4340)
!4342 = !DILocation(line: 726, column: 32, scope: !4340)
!4343 = !DILocation(line: 726, column: 35, scope: !4340)
!4344 = !DILocation(line: 726, column: 41, scope: !4340)
!4345 = !DILocation(line: 726, column: 61, scope: !4340)
!4346 = !DILocation(line: 726, column: 83, scope: !4340)
!4347 = !DILocation(line: 726, column: 80, scope: !4340)
!4348 = !DILocation(line: 726, column: 7, scope: !3970)
!4349 = !DILocation(line: 728, column: 7, scope: !4350)
!4350 = distinct !DILexicalBlock(scope: !4340, file: !3, line: 727, column: 5)
!4351 = !DILocation(line: 729, column: 19, scope: !4350)
!4352 = !DILocation(line: 730, column: 5, scope: !4350)
!4353 = !DILocation(line: 732, column: 7, scope: !4354)
!4354 = distinct !DILexicalBlock(scope: !3970, file: !3, line: 732, column: 7)
!4355 = !DILocation(line: 732, column: 13, scope: !4354)
!4356 = !DILocation(line: 732, column: 22, scope: !4354)
!4357 = !DILocation(line: 732, column: 44, scope: !4354)
!4358 = !DILocation(line: 732, column: 50, scope: !4354)
!4359 = !DILocation(line: 732, column: 25, scope: !4354)
!4360 = !DILocation(line: 733, column: 7, scope: !4354)
!4361 = !DILocation(line: 733, column: 11, scope: !4354)
!4362 = !DILocation(line: 734, column: 7, scope: !4354)
!4363 = !DILocation(line: 734, column: 12, scope: !4354)
!4364 = !DILocation(line: 734, column: 39, scope: !4354)
!4365 = !DILocation(line: 734, column: 42, scope: !4354)
!4366 = !DILocation(line: 734, column: 48, scope: !4354)
!4367 = !DILocation(line: 734, column: 55, scope: !4354)
!4368 = !DILocation(line: 735, column: 7, scope: !4354)
!4369 = !DILocation(line: 735, column: 11, scope: !4354)
!4370 = !DILocation(line: 732, column: 7, scope: !3970)
!4371 = !DILocation(line: 737, column: 11, scope: !4372)
!4372 = distinct !DILexicalBlock(scope: !4373, file: !3, line: 737, column: 11)
!4373 = distinct !DILexicalBlock(scope: !4354, file: !3, line: 736, column: 5)
!4374 = !DILocation(line: 737, column: 22, scope: !4372)
!4375 = !DILocation(line: 737, column: 11, scope: !4373)
!4376 = !DILocalVariable(name: "visited_nodes", scope: !4377, file: !3, line: 741, type: !4378)
!4377 = distinct !DILexicalBlock(scope: !4372, file: !3, line: 738, column: 2)
!4378 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4379, size: 64)
!4379 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_set_t", file: !135, line: 5199, flags: DIFlagFwdDecl)
!4380 = !DILocation(line: 741, column: 26, scope: !4377)
!4381 = !DILocation(line: 741, column: 42, scope: !4377)
!4382 = !DILocation(line: 744, column: 4, scope: !4383)
!4383 = distinct !DILexicalBlock(scope: !4377, file: !3, line: 744, column: 4)
!4384 = !DILocation(line: 744, column: 4, scope: !4385)
!4385 = distinct !DILexicalBlock(scope: !4383, file: !3, line: 744, column: 4)
!4386 = !DILocation(line: 745, column: 31, scope: !4387)
!4387 = distinct !DILexicalBlock(scope: !4385, file: !3, line: 745, column: 6)
!4388 = !DILocation(line: 745, column: 17, scope: !4387)
!4389 = !DILocation(line: 745, column: 11, scope: !4387)
!4390 = !DILocation(line: 746, column: 19, scope: !4391)
!4391 = distinct !DILexicalBlock(scope: !4387, file: !3, line: 745, column: 6)
!4392 = !DILocation(line: 746, column: 18, scope: !4391)
!4393 = !DILocation(line: 745, column: 6, scope: !4387)
!4394 = !DILocalVariable(name: "stmt", scope: !4395, file: !3, line: 749, type: !2152)
!4395 = distinct !DILexicalBlock(scope: !4391, file: !3, line: 748, column: 8)
!4396 = !DILocation(line: 749, column: 10, scope: !4395)
!4397 = !DILocation(line: 749, column: 17, scope: !4395)
!4398 = !DILocalVariable(name: "decl", scope: !4395, file: !3, line: 750, type: !1821)
!4399 = !DILocation(line: 750, column: 8, scope: !4395)
!4400 = !DILocation(line: 751, column: 23, scope: !4401)
!4401 = distinct !DILexicalBlock(scope: !4395, file: !3, line: 751, column: 7)
!4402 = !DILocation(line: 751, column: 7, scope: !4401)
!4403 = !DILocation(line: 751, column: 29, scope: !4401)
!4404 = !DILocation(line: 751, column: 60, scope: !4401)
!4405 = !DILocation(line: 751, column: 40, scope: !4401)
!4406 = !DILocation(line: 751, column: 38, scope: !4401)
!4407 = !DILocation(line: 751, column: 7, scope: !4395)
!4408 = !DILocalVariable(name: "e", scope: !4409, file: !3, line: 753, type: !3221)
!4409 = distinct !DILexicalBlock(scope: !4401, file: !3, line: 752, column: 5)
!4410 = !DILocation(line: 753, column: 27, scope: !4409)
!4411 = !DILocation(line: 753, column: 44, scope: !4409)
!4412 = !DILocation(line: 753, column: 50, scope: !4409)
!4413 = !DILocation(line: 753, column: 31, scope: !4409)
!4414 = !DILocation(line: 754, column: 11, scope: !4415)
!4415 = distinct !DILexicalBlock(scope: !4409, file: !3, line: 754, column: 11)
!4416 = !DILocation(line: 754, column: 11, scope: !4409)
!4417 = !DILocation(line: 756, column: 8, scope: !4418)
!4418 = distinct !DILexicalBlock(scope: !4419, file: !3, line: 756, column: 8)
!4419 = distinct !DILexicalBlock(scope: !4415, file: !3, line: 755, column: 9)
!4420 = !DILocation(line: 756, column: 11, scope: !4418)
!4421 = !DILocation(line: 756, column: 8, scope: !4419)
!4422 = !DILocation(line: 758, column: 8, scope: !4423)
!4423 = distinct !DILexicalBlock(scope: !4418, file: !3, line: 757, column: 6)
!4424 = !DILocation(line: 759, column: 27, scope: !4423)
!4425 = !DILocation(line: 759, column: 8, scope: !4423)
!4426 = !DILocation(line: 760, column: 20, scope: !4423)
!4427 = !DILocation(line: 761, column: 6, scope: !4423)
!4428 = !DILocation(line: 762, column: 8, scope: !4429)
!4429 = distinct !DILexicalBlock(scope: !4419, file: !3, line: 762, column: 8)
!4430 = !DILocation(line: 762, column: 11, scope: !4429)
!4431 = !DILocation(line: 762, column: 19, scope: !4429)
!4432 = !DILocation(line: 762, column: 8, scope: !4419)
!4433 = !DILocation(line: 764, column: 8, scope: !4434)
!4434 = distinct !DILexicalBlock(scope: !4429, file: !3, line: 763, column: 6)
!4435 = !DILocation(line: 765, column: 20, scope: !4434)
!4436 = !DILocation(line: 765, column: 23, scope: !4434)
!4437 = !DILocation(line: 765, column: 31, scope: !4434)
!4438 = !DILocation(line: 765, column: 8, scope: !4434)
!4439 = !DILocation(line: 766, column: 20, scope: !4434)
!4440 = !DILocation(line: 767, column: 6, scope: !4434)
!4441 = !DILocation(line: 768, column: 14, scope: !4442)
!4442 = distinct !DILexicalBlock(scope: !4429, file: !3, line: 768, column: 13)
!4443 = !DILocation(line: 768, column: 20, scope: !4442)
!4444 = !DILocation(line: 768, column: 27, scope: !4442)
!4445 = !DILocation(line: 769, column: 6, scope: !4442)
!4446 = !DILocation(line: 769, column: 10, scope: !4442)
!4447 = !DILocation(line: 769, column: 13, scope: !4442)
!4448 = !DILocation(line: 769, column: 21, scope: !4442)
!4449 = !DILocation(line: 769, column: 28, scope: !4442)
!4450 = !DILocation(line: 770, column: 6, scope: !4442)
!4451 = !DILocation(line: 770, column: 35, scope: !4442)
!4452 = !DILocation(line: 770, column: 22, scope: !4442)
!4453 = !DILocation(line: 770, column: 42, scope: !4442)
!4454 = !DILocation(line: 770, column: 45, scope: !4442)
!4455 = !DILocation(line: 770, column: 10, scope: !4442)
!4456 = !DILocation(line: 768, column: 13, scope: !4429)
!4457 = !DILocation(line: 772, column: 8, scope: !4458)
!4458 = distinct !DILexicalBlock(scope: !4442, file: !3, line: 771, column: 6)
!4459 = !DILocation(line: 773, column: 20, scope: !4458)
!4460 = !DILocation(line: 773, column: 23, scope: !4458)
!4461 = !DILocation(line: 773, column: 31, scope: !4458)
!4462 = !DILocation(line: 773, column: 8, scope: !4458)
!4463 = !DILocation(line: 774, column: 17, scope: !4458)
!4464 = !DILocation(line: 774, column: 8, scope: !4458)
!4465 = !DILocation(line: 775, column: 20, scope: !4458)
!4466 = !DILocation(line: 775, column: 8, scope: !4458)
!4467 = !DILocation(line: 776, column: 20, scope: !4458)
!4468 = !DILocation(line: 777, column: 6, scope: !4458)
!4469 = !DILocation(line: 778, column: 4, scope: !4419)
!4470 = !DILocation(line: 778, column: 7, scope: !4419)
!4471 = !DILocation(line: 778, column: 11, scope: !4419)
!4472 = !DILocation(line: 779, column: 9, scope: !4419)
!4473 = !DILocation(line: 782, column: 4, scope: !4474)
!4474 = distinct !DILexicalBlock(scope: !4415, file: !3, line: 781, column: 9)
!4475 = !DILocation(line: 783, column: 23, scope: !4474)
!4476 = !DILocation(line: 783, column: 4, scope: !4474)
!4477 = !DILocation(line: 784, column: 16, scope: !4474)
!4478 = !DILocation(line: 786, column: 5, scope: !4409)
!4479 = !DILocation(line: 787, column: 8, scope: !4395)
!4480 = !DILocation(line: 747, column: 18, scope: !4391)
!4481 = !DILocation(line: 745, column: 6, scope: !4391)
!4482 = distinct !{!4482, !4393, !4483}
!4483 = !DILocation(line: 787, column: 8, scope: !4387)
!4484 = distinct !{!4484, !4382, !4485}
!4485 = !DILocation(line: 787, column: 8, scope: !4383)
!4486 = !DILocation(line: 788, column: 25, scope: !4377)
!4487 = !DILocation(line: 788, column: 4, scope: !4377)
!4488 = !DILocation(line: 789, column: 2, scope: !4377)
!4489 = !DILocation(line: 792, column: 2, scope: !4372)
!4490 = !DILocation(line: 794, column: 16, scope: !4491)
!4491 = distinct !DILexicalBlock(scope: !4373, file: !3, line: 794, column: 7)
!4492 = !DILocation(line: 794, column: 22, scope: !4491)
!4493 = !DILocation(line: 794, column: 14, scope: !4491)
!4494 = !DILocation(line: 794, column: 12, scope: !4491)
!4495 = !DILocation(line: 794, column: 31, scope: !4496)
!4496 = distinct !DILexicalBlock(scope: !4491, file: !3, line: 794, column: 7)
!4497 = !DILocation(line: 794, column: 7, scope: !4491)
!4498 = !DILocation(line: 796, column: 9, scope: !4499)
!4499 = distinct !DILexicalBlock(scope: !4500, file: !3, line: 796, column: 8)
!4500 = distinct !DILexicalBlock(scope: !4496, file: !3, line: 795, column: 2)
!4501 = !DILocation(line: 796, column: 12, scope: !4499)
!4502 = !DILocation(line: 796, column: 16, scope: !4499)
!4503 = !DILocation(line: 796, column: 20, scope: !4499)
!4504 = !DILocation(line: 796, column: 23, scope: !4499)
!4505 = !DILocation(line: 796, column: 8, scope: !4500)
!4506 = !DILocation(line: 799, column: 48, scope: !4507)
!4507 = distinct !DILexicalBlock(scope: !4499, file: !3, line: 797, column: 6)
!4508 = !DILocation(line: 799, column: 51, scope: !4507)
!4509 = !DILocation(line: 799, column: 30, scope: !4507)
!4510 = !DILocation(line: 799, column: 8, scope: !4507)
!4511 = !DILocation(line: 800, column: 48, scope: !4507)
!4512 = !DILocation(line: 800, column: 51, scope: !4507)
!4513 = !DILocation(line: 800, column: 30, scope: !4507)
!4514 = !DILocation(line: 800, column: 8, scope: !4507)
!4515 = !DILocation(line: 798, column: 8, scope: !4507)
!4516 = !DILocation(line: 801, column: 27, scope: !4507)
!4517 = !DILocation(line: 801, column: 30, scope: !4507)
!4518 = !DILocation(line: 801, column: 8, scope: !4507)
!4519 = !DILocation(line: 802, column: 20, scope: !4507)
!4520 = !DILocation(line: 803, column: 6, scope: !4507)
!4521 = !DILocation(line: 804, column: 4, scope: !4500)
!4522 = !DILocation(line: 804, column: 7, scope: !4500)
!4523 = !DILocation(line: 804, column: 11, scope: !4500)
!4524 = !DILocation(line: 805, column: 2, scope: !4500)
!4525 = !DILocation(line: 794, column: 38, scope: !4496)
!4526 = !DILocation(line: 794, column: 41, scope: !4496)
!4527 = !DILocation(line: 794, column: 36, scope: !4496)
!4528 = !DILocation(line: 794, column: 7, scope: !4496)
!4529 = distinct !{!4529, !4497, !4530}
!4530 = !DILocation(line: 805, column: 2, scope: !4491)
!4531 = !DILocation(line: 806, column: 5, scope: !4373)
!4532 = !DILocation(line: 807, column: 7, scope: !4533)
!4533 = distinct !DILexicalBlock(scope: !3970, file: !3, line: 807, column: 7)
!4534 = !DILocation(line: 807, column: 7, scope: !3970)
!4535 = !DILocation(line: 809, column: 25, scope: !4536)
!4536 = distinct !DILexicalBlock(scope: !4533, file: !3, line: 808, column: 5)
!4537 = !DILocation(line: 809, column: 33, scope: !4536)
!4538 = !DILocation(line: 809, column: 7, scope: !4536)
!4539 = !DILocation(line: 810, column: 7, scope: !4536)
!4540 = !DILocation(line: 811, column: 5, scope: !4536)
!4541 = !DILocation(line: 812, column: 13, scope: !3970)
!4542 = !DILocation(line: 812, column: 3, scope: !3970)
!4543 = !DILocation(line: 813, column: 3, scope: !3970)
!4544 = !DILocation(line: 813, column: 3, scope: !4545)
!4545 = distinct !DILexicalBlock(scope: !4546, file: !3, line: 813, column: 3)
!4546 = distinct !DILexicalBlock(scope: !3970, file: !3, line: 813, column: 3)
!4547 = !DILocation(line: 813, column: 3, scope: !4546)
!4548 = !DILocation(line: 814, column: 1, scope: !3970)
!4549 = distinct !DISubprogram(name: "gimple_bb", scope: !810, file: !810, line: 1112, type: !4550, scopeLine: 1113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!4550 = !DISubroutineType(types: !4551)
!4551 = !{!2116, !4552}
!4552 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !1822, line: 60, baseType: !3154)
!4553 = !DILocalVariable(name: "g", arg: 1, scope: !4549, file: !810, line: 1112, type: !4552)
!4554 = !DILocation(line: 1112, column: 25, scope: !4549)
!4555 = !DILocation(line: 1114, column: 10, scope: !4549)
!4556 = !DILocation(line: 1114, column: 13, scope: !4549)
!4557 = !DILocation(line: 1114, column: 20, scope: !4549)
!4558 = !DILocation(line: 1114, column: 3, scope: !4549)
!4559 = distinct !DISubprogram(name: "gsi_start_bb", scope: !810, file: !810, line: 4418, type: !4560, scopeLine: 4419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!4560 = !DISubroutineType(types: !4561)
!4561 = !{!3984, !2586}
!4562 = !DILocalVariable(name: "bb", arg: 1, scope: !4559, file: !810, line: 4418, type: !2586)
!4563 = !DILocation(line: 4418, column: 27, scope: !4559)
!4564 = !DILocalVariable(name: "i", scope: !4559, file: !810, line: 4420, type: !3984)
!4565 = !DILocation(line: 4420, column: 24, scope: !4559)
!4566 = !DILocalVariable(name: "seq", scope: !4559, file: !810, line: 4421, type: !2142)
!4567 = !DILocation(line: 4421, column: 14, scope: !4559)
!4568 = !DILocation(line: 4423, column: 17, scope: !4559)
!4569 = !DILocation(line: 4423, column: 9, scope: !4559)
!4570 = !DILocation(line: 4423, column: 7, scope: !4559)
!4571 = !DILocation(line: 4424, column: 29, scope: !4559)
!4572 = !DILocation(line: 4424, column: 11, scope: !4559)
!4573 = !DILocation(line: 4424, column: 5, scope: !4559)
!4574 = !DILocation(line: 4424, column: 9, scope: !4559)
!4575 = !DILocation(line: 4425, column: 11, scope: !4559)
!4576 = !DILocation(line: 4425, column: 5, scope: !4559)
!4577 = !DILocation(line: 4425, column: 9, scope: !4559)
!4578 = !DILocation(line: 4426, column: 10, scope: !4559)
!4579 = !DILocation(line: 4426, column: 5, scope: !4559)
!4580 = !DILocation(line: 4426, column: 8, scope: !4559)
!4581 = !DILocation(line: 4428, column: 3, scope: !4559)
!4582 = distinct !DISubprogram(name: "gsi_end_p", scope: !810, file: !810, line: 4467, type: !4583, scopeLine: 4468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!4583 = !DISubroutineType(types: !4584)
!4584 = !{!1941, !3984}
!4585 = !DILocalVariable(name: "i", arg: 1, scope: !4582, file: !810, line: 4467, type: !3984)
!4586 = !DILocation(line: 4467, column: 33, scope: !4582)
!4587 = !DILocation(line: 4469, column: 12, scope: !4582)
!4588 = !DILocation(line: 4469, column: 16, scope: !4582)
!4589 = !DILocation(line: 4469, column: 10, scope: !4582)
!4590 = !DILocation(line: 4469, column: 3, scope: !4582)
!4591 = distinct !DISubprogram(name: "gsi_stmt", scope: !810, file: !810, line: 4501, type: !4592, scopeLine: 4502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!4592 = !DISubroutineType(types: !4593)
!4593 = !{!2152, !3984}
!4594 = !DILocalVariable(name: "i", arg: 1, scope: !4591, file: !810, line: 4501, type: !3984)
!4595 = !DILocation(line: 4501, column: 32, scope: !4591)
!4596 = !DILocation(line: 4503, column: 12, scope: !4591)
!4597 = !DILocation(line: 4503, column: 17, scope: !4591)
!4598 = !DILocation(line: 4503, column: 3, scope: !4591)
!4599 = distinct !DISubprogram(name: "is_gimple_call", scope: !810, file: !810, line: 1870, type: !4600, scopeLine: 1871, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!4600 = !DISubroutineType(types: !4601)
!4601 = !{!1941, !4552}
!4602 = !DILocalVariable(name: "gs", arg: 1, scope: !4599, file: !810, line: 1870, type: !4552)
!4603 = !DILocation(line: 1870, column: 30, scope: !4599)
!4604 = !DILocation(line: 1872, column: 23, scope: !4599)
!4605 = !DILocation(line: 1872, column: 10, scope: !4599)
!4606 = !DILocation(line: 1872, column: 27, scope: !4599)
!4607 = !DILocation(line: 1872, column: 3, scope: !4599)
!4608 = distinct !DISubprogram(name: "gimple_call_fndecl", scope: !810, file: !810, line: 1954, type: !4609, scopeLine: 1955, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!4609 = !DISubroutineType(types: !4610)
!4610 = !{!1821, !4552}
!4611 = !DILocalVariable(name: "gs", arg: 1, scope: !4608, file: !810, line: 1954, type: !4552)
!4612 = !DILocation(line: 1954, column: 34, scope: !4608)
!4613 = !DILocalVariable(name: "addr", scope: !4608, file: !810, line: 1956, type: !1821)
!4614 = !DILocation(line: 1956, column: 8, scope: !4608)
!4615 = !DILocation(line: 1956, column: 31, scope: !4608)
!4616 = !DILocation(line: 1956, column: 15, scope: !4608)
!4617 = !DILocation(line: 1957, column: 7, scope: !4618)
!4618 = distinct !DILexicalBlock(scope: !4608, file: !810, line: 1957, column: 7)
!4619 = !DILocation(line: 1957, column: 24, scope: !4618)
!4620 = !DILocation(line: 1957, column: 7, scope: !4608)
!4621 = !DILocation(line: 1958, column: 12, scope: !4618)
!4622 = !DILocation(line: 1958, column: 5, scope: !4618)
!4623 = !DILocation(line: 1959, column: 3, scope: !4608)
!4624 = !DILocation(line: 1960, column: 1, scope: !4608)
!4625 = distinct !DISubprogram(name: "clone_of_p", scope: !3, file: !3, line: 572, type: !4626, scopeLine: 573, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!4626 = !DISubroutineType(types: !4627)
!4627 = !{!1941, !3216, !3216}
!4628 = !DILocalVariable(name: "node", arg: 1, scope: !4625, file: !3, line: 572, type: !3216)
!4629 = !DILocation(line: 572, column: 33, scope: !4625)
!4630 = !DILocalVariable(name: "node2", arg: 2, scope: !4625, file: !3, line: 572, type: !3216)
!4631 = !DILocation(line: 572, column: 59, scope: !4625)
!4632 = !DILocation(line: 574, column: 3, scope: !4625)
!4633 = !DILocation(line: 574, column: 10, scope: !4625)
!4634 = !DILocation(line: 574, column: 18, scope: !4625)
!4635 = !DILocation(line: 574, column: 15, scope: !4625)
!4636 = !DILocation(line: 574, column: 24, scope: !4625)
!4637 = !DILocation(line: 574, column: 27, scope: !4625)
!4638 = !DILocation(line: 0, scope: !4625)
!4639 = !DILocation(line: 575, column: 13, scope: !4625)
!4640 = !DILocation(line: 575, column: 20, scope: !4625)
!4641 = !DILocation(line: 575, column: 11, scope: !4625)
!4642 = distinct !{!4642, !4632, !4640}
!4643 = !DILocation(line: 576, column: 10, scope: !4625)
!4644 = !DILocation(line: 576, column: 16, scope: !4625)
!4645 = !DILocation(line: 576, column: 3, scope: !4625)
!4646 = distinct !DISubprogram(name: "gsi_next", scope: !810, file: !810, line: 4485, type: !4647, scopeLine: 4486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!4647 = !DISubroutineType(types: !4648)
!4648 = !{null, !4649}
!4649 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3984, size: 64)
!4650 = !DILocalVariable(name: "i", arg: 1, scope: !4646, file: !810, line: 4485, type: !4649)
!4651 = !DILocation(line: 4485, column: 33, scope: !4646)
!4652 = !DILocation(line: 4487, column: 12, scope: !4646)
!4653 = !DILocation(line: 4487, column: 15, scope: !4646)
!4654 = !DILocation(line: 4487, column: 20, scope: !4646)
!4655 = !DILocation(line: 4487, column: 3, scope: !4646)
!4656 = !DILocation(line: 4487, column: 6, scope: !4646)
!4657 = !DILocation(line: 4487, column: 10, scope: !4646)
!4658 = !DILocation(line: 4488, column: 1, scope: !4646)
!4659 = distinct !DISubprogram(name: "verify_cgraph", scope: !3, file: !3, line: 818, type: !3192, scopeLine: 819, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!4660 = !DILocalVariable(name: "node", scope: !4659, file: !3, line: 820, type: !3216)
!4661 = !DILocation(line: 820, column: 23, scope: !4659)
!4662 = !DILocation(line: 822, column: 7, scope: !4663)
!4663 = distinct !DILexicalBlock(scope: !4659, file: !3, line: 822, column: 7)
!4664 = !DILocation(line: 822, column: 18, scope: !4663)
!4665 = !DILocation(line: 822, column: 21, scope: !4663)
!4666 = !DILocation(line: 822, column: 7, scope: !4659)
!4667 = !DILocation(line: 823, column: 5, scope: !4663)
!4668 = !DILocation(line: 825, column: 15, scope: !4669)
!4669 = distinct !DILexicalBlock(scope: !4659, file: !3, line: 825, column: 3)
!4670 = !DILocation(line: 825, column: 13, scope: !4669)
!4671 = !DILocation(line: 825, column: 8, scope: !4669)
!4672 = !DILocation(line: 825, column: 29, scope: !4673)
!4673 = distinct !DILexicalBlock(scope: !4669, file: !3, line: 825, column: 3)
!4674 = !DILocation(line: 825, column: 3, scope: !4669)
!4675 = !DILocation(line: 826, column: 25, scope: !4673)
!4676 = !DILocation(line: 826, column: 5, scope: !4673)
!4677 = !DILocation(line: 825, column: 42, scope: !4673)
!4678 = !DILocation(line: 825, column: 48, scope: !4673)
!4679 = !DILocation(line: 825, column: 40, scope: !4673)
!4680 = !DILocation(line: 825, column: 3, scope: !4673)
!4681 = distinct !{!4681, !4674, !4682}
!4682 = !DILocation(line: 826, column: 29, scope: !4669)
!4683 = !DILocation(line: 827, column: 1, scope: !4659)
!4684 = distinct !DISubprogram(name: "cgraph_finalize_compilation_unit", scope: !3, file: !3, line: 1076, type: !3192, scopeLine: 1077, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!4685 = !DILocation(line: 1078, column: 3, scope: !4684)
!4686 = !DILocation(line: 1078, column: 3, scope: !4687)
!4687 = distinct !DILexicalBlock(scope: !4688, file: !3, line: 1078, column: 3)
!4688 = distinct !DILexicalBlock(scope: !4684, file: !3, line: 1078, column: 3)
!4689 = !DILocation(line: 1078, column: 3, scope: !4688)
!4690 = !DILocation(line: 1084, column: 3, scope: !4684)
!4691 = !DILocation(line: 1088, column: 3, scope: !4684)
!4692 = !DILocation(line: 1091, column: 3, scope: !4684)
!4693 = !DILocation(line: 1093, column: 8, scope: !4694)
!4694 = distinct !DILexicalBlock(scope: !4684, file: !3, line: 1093, column: 7)
!4695 = !DILocation(line: 1093, column: 7, scope: !4684)
!4696 = !DILocation(line: 1095, column: 16, scope: !4697)
!4697 = distinct !DILexicalBlock(scope: !4694, file: !3, line: 1094, column: 5)
!4698 = !DILocation(line: 1095, column: 7, scope: !4697)
!4699 = !DILocation(line: 1096, column: 15, scope: !4697)
!4700 = !DILocation(line: 1096, column: 7, scope: !4697)
!4701 = !DILocation(line: 1097, column: 5, scope: !4697)
!4702 = !DILocation(line: 1101, column: 3, scope: !4684)
!4703 = !DILocation(line: 1104, column: 3, scope: !4684)
!4704 = !DILocation(line: 1107, column: 3, scope: !4684)
!4705 = !DILocation(line: 1110, column: 3, scope: !4684)
!4706 = !DILocation(line: 1112, column: 3, scope: !4684)
!4707 = !DILocation(line: 1112, column: 3, scope: !4708)
!4708 = distinct !DILexicalBlock(scope: !4709, file: !3, line: 1112, column: 3)
!4709 = distinct !DILexicalBlock(scope: !4684, file: !3, line: 1112, column: 3)
!4710 = !DILocation(line: 1112, column: 3, scope: !4709)
!4711 = !DILocation(line: 1113, column: 1, scope: !4684)
!4712 = distinct !DISubprogram(name: "cgraph_build_cdtor_fns", scope: !3, file: !3, line: 287, type: !3192, scopeLine: 288, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!4713 = !DILocation(line: 289, column: 8, scope: !4714)
!4714 = distinct !DILexicalBlock(scope: !4712, file: !3, line: 289, column: 7)
!4715 = !DILocation(line: 289, column: 7, scope: !4712)
!4716 = !DILocation(line: 291, column: 7, scope: !4717)
!4717 = distinct !DILexicalBlock(scope: !4714, file: !3, line: 290, column: 5)
!4718 = !DILocation(line: 293, column: 19, scope: !4717)
!4719 = !DILocation(line: 294, column: 19, scope: !4717)
!4720 = !DILocation(line: 293, column: 7, scope: !4717)
!4721 = !DILocation(line: 304, column: 6, scope: !4717)
!4722 = !DILocation(line: 305, column: 6, scope: !4717)
!4723 = !DILocation(line: 303, column: 7, scope: !4717)
!4724 = !DILocation(line: 306, column: 7, scope: !4717)
!4725 = !DILocation(line: 307, column: 5, scope: !4717)
!4726 = !DILocation(line: 309, column: 8, scope: !4727)
!4727 = distinct !DILexicalBlock(scope: !4712, file: !3, line: 309, column: 7)
!4728 = !DILocation(line: 309, column: 7, scope: !4712)
!4729 = !DILocation(line: 311, column: 7, scope: !4730)
!4730 = distinct !DILexicalBlock(scope: !4727, file: !3, line: 310, column: 5)
!4731 = !DILocation(line: 313, column: 19, scope: !4730)
!4732 = !DILocation(line: 314, column: 19, scope: !4730)
!4733 = !DILocation(line: 313, column: 7, scope: !4730)
!4734 = !DILocation(line: 324, column: 6, scope: !4730)
!4735 = !DILocation(line: 325, column: 6, scope: !4730)
!4736 = !DILocation(line: 323, column: 7, scope: !4730)
!4737 = !DILocation(line: 326, column: 7, scope: !4730)
!4738 = !DILocation(line: 327, column: 5, scope: !4730)
!4739 = !DILocation(line: 328, column: 1, scope: !4712)
!4740 = !DILocalVariable(name: "first_processed", scope: !3439, file: !3, line: 954, type: !3216)
!4741 = !DILocation(line: 954, column: 23, scope: !3439)
!4742 = !DILocation(line: 954, column: 41, scope: !3439)
!4743 = !DILocalVariable(name: "node", scope: !3439, file: !3, line: 956, type: !3216)
!4744 = !DILocation(line: 956, column: 23, scope: !3439)
!4745 = !DILocalVariable(name: "next", scope: !3439, file: !3, line: 956, type: !3216)
!4746 = !DILocation(line: 956, column: 30, scope: !3439)
!4747 = !DILocation(line: 958, column: 45, scope: !3439)
!4748 = !DILocation(line: 959, column: 10, scope: !3439)
!4749 = !DILocation(line: 958, column: 3, scope: !3439)
!4750 = !DILocation(line: 960, column: 21, scope: !3439)
!4751 = !DILocation(line: 960, column: 19, scope: !3439)
!4752 = !DILocation(line: 961, column: 24, scope: !3439)
!4753 = !DILocation(line: 961, column: 22, scope: !3439)
!4754 = !DILocation(line: 962, column: 3, scope: !3439)
!4755 = !DILocation(line: 963, column: 7, scope: !4756)
!4756 = distinct !DILexicalBlock(scope: !3439, file: !3, line: 963, column: 7)
!4757 = !DILocation(line: 963, column: 7, scope: !3439)
!4758 = !DILocation(line: 965, column: 16, scope: !4759)
!4759 = distinct !DILexicalBlock(scope: !4756, file: !3, line: 964, column: 5)
!4760 = !DILocation(line: 965, column: 7, scope: !4759)
!4761 = !DILocation(line: 966, column: 19, scope: !4762)
!4762 = distinct !DILexicalBlock(scope: !4759, file: !3, line: 966, column: 7)
!4763 = !DILocation(line: 966, column: 17, scope: !4762)
!4764 = !DILocation(line: 966, column: 12, scope: !4762)
!4765 = !DILocation(line: 966, column: 33, scope: !4766)
!4766 = distinct !DILexicalBlock(scope: !4762, file: !3, line: 966, column: 7)
!4767 = !DILocation(line: 966, column: 41, scope: !4766)
!4768 = !DILocation(line: 966, column: 38, scope: !4766)
!4769 = !DILocation(line: 966, column: 7, scope: !4762)
!4770 = !DILocation(line: 967, column: 6, scope: !4771)
!4771 = distinct !DILexicalBlock(scope: !4766, file: !3, line: 967, column: 6)
!4772 = !DILocation(line: 967, column: 12, scope: !4771)
!4773 = !DILocation(line: 967, column: 6, scope: !4766)
!4774 = !DILocation(line: 968, column: 13, scope: !4771)
!4775 = !DILocation(line: 968, column: 56, scope: !4771)
!4776 = !DILocation(line: 968, column: 38, scope: !4771)
!4777 = !DILocation(line: 968, column: 4, scope: !4771)
!4778 = !DILocation(line: 966, column: 64, scope: !4766)
!4779 = !DILocation(line: 966, column: 70, scope: !4766)
!4780 = !DILocation(line: 966, column: 62, scope: !4766)
!4781 = !DILocation(line: 966, column: 7, scope: !4766)
!4782 = distinct !{!4782, !4769, !4783}
!4783 = !DILocation(line: 968, column: 61, scope: !4762)
!4784 = !DILocation(line: 969, column: 16, scope: !4759)
!4785 = !DILocation(line: 969, column: 7, scope: !4759)
!4786 = !DILocation(line: 970, column: 5, scope: !4759)
!4787 = !DILocation(line: 971, column: 3, scope: !3439)
!4788 = !DILocation(line: 977, column: 3, scope: !3439)
!4789 = !DILocation(line: 977, column: 10, scope: !3439)
!4790 = !DILocalVariable(name: "edge", scope: !4791, file: !3, line: 979, type: !3221)
!4791 = distinct !DILexicalBlock(scope: !3439, file: !3, line: 978, column: 5)
!4792 = !DILocation(line: 979, column: 27, scope: !4791)
!4793 = !DILocalVariable(name: "decl", scope: !4791, file: !3, line: 980, type: !1821)
!4794 = !DILocation(line: 980, column: 12, scope: !4791)
!4795 = !DILocation(line: 980, column: 19, scope: !4791)
!4796 = !DILocation(line: 980, column: 39, scope: !4791)
!4797 = !DILocation(line: 982, column: 14, scope: !4791)
!4798 = !DILocation(line: 982, column: 12, scope: !4791)
!4799 = !DILocation(line: 983, column: 28, scope: !4791)
!4800 = !DILocation(line: 983, column: 48, scope: !4791)
!4801 = !DILocation(line: 983, column: 26, scope: !4791)
!4802 = !DILocation(line: 984, column: 7, scope: !4791)
!4803 = !DILocation(line: 984, column: 13, scope: !4791)
!4804 = !DILocation(line: 984, column: 25, scope: !4791)
!4805 = !DILocation(line: 989, column: 12, scope: !4806)
!4806 = distinct !DILexicalBlock(scope: !4791, file: !3, line: 989, column: 11)
!4807 = !DILocation(line: 989, column: 11, scope: !4791)
!4808 = !DILocation(line: 991, column: 23, scope: !4809)
!4809 = distinct !DILexicalBlock(scope: !4806, file: !3, line: 990, column: 2)
!4810 = !DILocation(line: 991, column: 4, scope: !4809)
!4811 = !DILocation(line: 992, column: 4, scope: !4809)
!4812 = distinct !{!4812, !4788, !4813}
!4813 = !DILocation(line: 1027, column: 5, scope: !3439)
!4814 = !DILocation(line: 995, column: 12, scope: !4815)
!4815 = distinct !DILexicalBlock(scope: !4791, file: !3, line: 995, column: 11)
!4816 = !DILocation(line: 995, column: 18, scope: !4815)
!4817 = !DILocation(line: 995, column: 11, scope: !4791)
!4818 = !DILocation(line: 996, column: 27, scope: !4815)
!4819 = !DILocation(line: 996, column: 2, scope: !4815)
!4820 = !DILocation(line: 998, column: 19, scope: !4821)
!4821 = distinct !DILexicalBlock(scope: !4791, file: !3, line: 998, column: 7)
!4822 = !DILocation(line: 998, column: 25, scope: !4821)
!4823 = !DILocation(line: 998, column: 17, scope: !4821)
!4824 = !DILocation(line: 998, column: 12, scope: !4821)
!4825 = !DILocation(line: 998, column: 34, scope: !4826)
!4826 = distinct !DILexicalBlock(scope: !4821, file: !3, line: 998, column: 7)
!4827 = !DILocation(line: 998, column: 7, scope: !4821)
!4828 = !DILocation(line: 999, column: 7, scope: !4829)
!4829 = distinct !DILexicalBlock(scope: !4826, file: !3, line: 999, column: 6)
!4830 = !DILocation(line: 999, column: 13, scope: !4829)
!4831 = !DILocation(line: 999, column: 21, scope: !4829)
!4832 = !DILocation(line: 999, column: 6, scope: !4826)
!4833 = !DILocation(line: 1000, column: 32, scope: !4829)
!4834 = !DILocation(line: 1000, column: 38, scope: !4829)
!4835 = !DILocation(line: 1000, column: 4, scope: !4829)
!4836 = !DILocation(line: 998, column: 47, scope: !4826)
!4837 = !DILocation(line: 998, column: 53, scope: !4826)
!4838 = !DILocation(line: 998, column: 45, scope: !4826)
!4839 = !DILocation(line: 998, column: 7, scope: !4826)
!4840 = distinct !{!4840, !4827, !4841}
!4841 = !DILocation(line: 1000, column: 44, scope: !4821)
!4842 = !DILocation(line: 1002, column: 11, scope: !4843)
!4843 = distinct !DILexicalBlock(scope: !4791, file: !3, line: 1002, column: 11)
!4844 = !DILocation(line: 1002, column: 17, scope: !4843)
!4845 = !DILocation(line: 1002, column: 11, scope: !4791)
!4846 = !DILocation(line: 1004, column: 16, scope: !4847)
!4847 = distinct !DILexicalBlock(scope: !4848, file: !3, line: 1004, column: 4)
!4848 = distinct !DILexicalBlock(scope: !4843, file: !3, line: 1003, column: 2)
!4849 = !DILocation(line: 1004, column: 22, scope: !4847)
!4850 = !DILocation(line: 1004, column: 14, scope: !4847)
!4851 = !DILocation(line: 1004, column: 9, scope: !4847)
!4852 = !DILocation(line: 1005, column: 9, scope: !4853)
!4853 = distinct !DILexicalBlock(scope: !4847, file: !3, line: 1004, column: 4)
!4854 = !DILocation(line: 1005, column: 17, scope: !4853)
!4855 = !DILocation(line: 1005, column: 14, scope: !4853)
!4856 = !DILocation(line: 1004, column: 4, scope: !4847)
!4857 = !DILocation(line: 1007, column: 34, scope: !4853)
!4858 = !DILocation(line: 1007, column: 6, scope: !4853)
!4859 = !DILocation(line: 1006, column: 16, scope: !4853)
!4860 = !DILocation(line: 1006, column: 22, scope: !4853)
!4861 = !DILocation(line: 1006, column: 14, scope: !4853)
!4862 = !DILocation(line: 1004, column: 4, scope: !4853)
!4863 = distinct !{!4863, !4856, !4864}
!4864 = !DILocation(line: 1007, column: 38, scope: !4847)
!4865 = !DILocation(line: 1008, column: 2, scope: !4848)
!4866 = !DILocation(line: 1013, column: 11, scope: !4867)
!4867 = distinct !DILexicalBlock(scope: !4791, file: !3, line: 1013, column: 11)
!4868 = !DILocation(line: 1013, column: 11, scope: !4791)
!4869 = !DILocalVariable(name: "origin_node", scope: !4870, file: !3, line: 1015, type: !3216)
!4870 = distinct !DILexicalBlock(scope: !4867, file: !3, line: 1014, column: 2)
!4871 = !DILocation(line: 1015, column: 24, scope: !4870)
!4872 = !DILocation(line: 1015, column: 51, scope: !4870)
!4873 = !DILocation(line: 1015, column: 38, scope: !4870)
!4874 = !DILocation(line: 1016, column: 4, scope: !4870)
!4875 = !DILocation(line: 1016, column: 17, scope: !4870)
!4876 = !DILocation(line: 1016, column: 37, scope: !4870)
!4877 = !DILocation(line: 1017, column: 2, scope: !4870)
!4878 = !DILocation(line: 1021, column: 49, scope: !4791)
!4879 = !DILocation(line: 1022, column: 7, scope: !4791)
!4880 = !DILocation(line: 1021, column: 7, scope: !4791)
!4881 = !DILocation(line: 1023, column: 25, scope: !4791)
!4882 = !DILocation(line: 1023, column: 23, scope: !4791)
!4883 = !DILocation(line: 1024, column: 28, scope: !4791)
!4884 = !DILocation(line: 1024, column: 26, scope: !4791)
!4885 = !DILocation(line: 1025, column: 7, scope: !4791)
!4886 = !DILocation(line: 1026, column: 7, scope: !4791)
!4887 = !DILocation(line: 1030, column: 7, scope: !4888)
!4888 = distinct !DILexicalBlock(scope: !3439, file: !3, line: 1030, column: 7)
!4889 = !DILocation(line: 1030, column: 7, scope: !3439)
!4890 = !DILocation(line: 1032, column: 16, scope: !4891)
!4891 = distinct !DILexicalBlock(scope: !4888, file: !3, line: 1031, column: 5)
!4892 = !DILocation(line: 1032, column: 7, scope: !4891)
!4893 = !DILocation(line: 1033, column: 19, scope: !4894)
!4894 = distinct !DILexicalBlock(scope: !4891, file: !3, line: 1033, column: 7)
!4895 = !DILocation(line: 1033, column: 17, scope: !4894)
!4896 = !DILocation(line: 1033, column: 12, scope: !4894)
!4897 = !DILocation(line: 1033, column: 33, scope: !4898)
!4898 = distinct !DILexicalBlock(scope: !4894, file: !3, line: 1033, column: 7)
!4899 = !DILocation(line: 1033, column: 41, scope: !4898)
!4900 = !DILocation(line: 1033, column: 38, scope: !4898)
!4901 = !DILocation(line: 1033, column: 7, scope: !4894)
!4902 = !DILocation(line: 1034, column: 6, scope: !4903)
!4903 = distinct !DILexicalBlock(scope: !4898, file: !3, line: 1034, column: 6)
!4904 = !DILocation(line: 1034, column: 12, scope: !4903)
!4905 = !DILocation(line: 1034, column: 6, scope: !4898)
!4906 = !DILocation(line: 1035, column: 13, scope: !4903)
!4907 = !DILocation(line: 1035, column: 56, scope: !4903)
!4908 = !DILocation(line: 1035, column: 38, scope: !4903)
!4909 = !DILocation(line: 1035, column: 4, scope: !4903)
!4910 = !DILocation(line: 1033, column: 64, scope: !4898)
!4911 = !DILocation(line: 1033, column: 70, scope: !4898)
!4912 = !DILocation(line: 1033, column: 62, scope: !4898)
!4913 = !DILocation(line: 1033, column: 7, scope: !4898)
!4914 = distinct !{!4914, !4901, !4915}
!4915 = !DILocation(line: 1035, column: 61, scope: !4894)
!4916 = !DILocation(line: 1036, column: 16, scope: !4891)
!4917 = !DILocation(line: 1036, column: 7, scope: !4891)
!4918 = !DILocation(line: 1037, column: 20, scope: !4891)
!4919 = !DILocation(line: 1037, column: 7, scope: !4891)
!4920 = !DILocation(line: 1038, column: 5, scope: !4891)
!4921 = !DILocation(line: 1040, column: 7, scope: !4922)
!4922 = distinct !DILexicalBlock(scope: !3439, file: !3, line: 1040, column: 7)
!4923 = !DILocation(line: 1040, column: 7, scope: !3439)
!4924 = !DILocation(line: 1041, column: 14, scope: !4922)
!4925 = !DILocation(line: 1041, column: 5, scope: !4922)
!4926 = !DILocation(line: 1043, column: 15, scope: !4927)
!4927 = distinct !DILexicalBlock(scope: !3439, file: !3, line: 1043, column: 3)
!4928 = !DILocation(line: 1043, column: 13, scope: !4927)
!4929 = !DILocation(line: 1043, column: 8, scope: !4927)
!4930 = !DILocation(line: 1043, column: 29, scope: !4931)
!4931 = distinct !DILexicalBlock(scope: !4927, file: !3, line: 1043, column: 3)
!4932 = !DILocation(line: 1043, column: 37, scope: !4931)
!4933 = !DILocation(line: 1043, column: 34, scope: !4931)
!4934 = !DILocation(line: 1043, column: 3, scope: !4927)
!4935 = !DILocalVariable(name: "decl", scope: !4936, file: !3, line: 1045, type: !1821)
!4936 = distinct !DILexicalBlock(scope: !4931, file: !3, line: 1044, column: 5)
!4937 = !DILocation(line: 1045, column: 12, scope: !4936)
!4938 = !DILocation(line: 1045, column: 19, scope: !4936)
!4939 = !DILocation(line: 1045, column: 25, scope: !4936)
!4940 = !DILocation(line: 1046, column: 14, scope: !4936)
!4941 = !DILocation(line: 1046, column: 20, scope: !4936)
!4942 = !DILocation(line: 1046, column: 12, scope: !4936)
!4943 = !DILocation(line: 1048, column: 11, scope: !4944)
!4944 = distinct !DILexicalBlock(scope: !4936, file: !3, line: 1048, column: 11)
!4945 = !DILocation(line: 1048, column: 17, scope: !4944)
!4946 = !DILocation(line: 1048, column: 23, scope: !4944)
!4947 = !DILocation(line: 1048, column: 33, scope: !4944)
!4948 = !DILocation(line: 1048, column: 56, scope: !4944)
!4949 = !DILocation(line: 1048, column: 37, scope: !4944)
!4950 = !DILocation(line: 1048, column: 11, scope: !4936)
!4951 = !DILocation(line: 1049, column: 21, scope: !4944)
!4952 = !DILocation(line: 1049, column: 2, scope: !4944)
!4953 = !DILocation(line: 1051, column: 12, scope: !4954)
!4954 = distinct !DILexicalBlock(scope: !4936, file: !3, line: 1051, column: 11)
!4955 = !DILocation(line: 1051, column: 18, scope: !4954)
!4956 = !DILocation(line: 1051, column: 28, scope: !4954)
!4957 = !DILocation(line: 1051, column: 50, scope: !4954)
!4958 = !DILocation(line: 1051, column: 31, scope: !4954)
!4959 = !DILocation(line: 1051, column: 11, scope: !4936)
!4960 = !DILocation(line: 1053, column: 8, scope: !4961)
!4961 = distinct !DILexicalBlock(scope: !4962, file: !3, line: 1053, column: 8)
!4962 = distinct !DILexicalBlock(scope: !4954, file: !3, line: 1052, column: 2)
!4963 = !DILocation(line: 1053, column: 8, scope: !4962)
!4964 = !DILocation(line: 1054, column: 15, scope: !4961)
!4965 = !DILocation(line: 1054, column: 58, scope: !4961)
!4966 = !DILocation(line: 1054, column: 40, scope: !4961)
!4967 = !DILocation(line: 1054, column: 6, scope: !4961)
!4968 = !DILocation(line: 1055, column: 24, scope: !4962)
!4969 = !DILocation(line: 1055, column: 4, scope: !4962)
!4970 = !DILocation(line: 1056, column: 4, scope: !4962)
!4971 = !DILocation(line: 1059, column: 2, scope: !4954)
!4972 = !DILocation(line: 1059, column: 8, scope: !4954)
!4973 = !DILocation(line: 1059, column: 20, scope: !4954)
!4974 = !DILocation(line: 1060, column: 7, scope: !4936)
!4975 = !DILocation(line: 1061, column: 7, scope: !4936)
!4976 = !DILocation(line: 1062, column: 5, scope: !4936)
!4977 = !DILocation(line: 1043, column: 60, scope: !4931)
!4978 = !DILocation(line: 1043, column: 58, scope: !4931)
!4979 = !DILocation(line: 1043, column: 3, scope: !4931)
!4980 = distinct !{!4980, !4934, !4981}
!4981 = !DILocation(line: 1062, column: 5, scope: !4927)
!4982 = !DILocation(line: 1063, column: 7, scope: !4983)
!4983 = distinct !DILexicalBlock(scope: !3439, file: !3, line: 1063, column: 7)
!4984 = !DILocation(line: 1063, column: 7, scope: !3439)
!4985 = !DILocation(line: 1065, column: 16, scope: !4986)
!4986 = distinct !DILexicalBlock(scope: !4983, file: !3, line: 1064, column: 5)
!4987 = !DILocation(line: 1065, column: 7, scope: !4986)
!4988 = !DILocation(line: 1066, column: 20, scope: !4986)
!4989 = !DILocation(line: 1066, column: 7, scope: !4986)
!4990 = !DILocation(line: 1067, column: 5, scope: !4986)
!4991 = !DILocation(line: 1068, column: 20, scope: !3439)
!4992 = !DILocation(line: 1068, column: 18, scope: !3439)
!4993 = !DILocation(line: 1069, column: 3, scope: !3439)
!4994 = !DILocation(line: 1070, column: 1, scope: !3439)
!4995 = distinct !DISubprogram(name: "cgraph_optimize", scope: !3, file: !3, line: 1820, type: !3192, scopeLine: 1821, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!4996 = !DILocation(line: 1822, column: 7, scope: !4997)
!4997 = distinct !DILexicalBlock(scope: !4995, file: !3, line: 1822, column: 7)
!4998 = !DILocation(line: 1822, column: 18, scope: !4997)
!4999 = !DILocation(line: 1822, column: 21, scope: !4997)
!5000 = !DILocation(line: 1822, column: 7, scope: !4995)
!5001 = !DILocation(line: 1823, column: 5, scope: !4997)
!5002 = !DILocation(line: 1831, column: 3, scope: !4995)
!5003 = !DILocation(line: 1833, column: 3, scope: !4995)
!5004 = !DILocation(line: 1833, column: 3, scope: !5005)
!5005 = distinct !DILexicalBlock(scope: !5006, file: !3, line: 1833, column: 3)
!5006 = distinct !DILexicalBlock(scope: !4995, file: !3, line: 1833, column: 3)
!5007 = !DILocation(line: 1833, column: 3, scope: !5006)
!5008 = !DILocation(line: 1834, column: 7, scope: !5009)
!5009 = distinct !DILexicalBlock(scope: !4995, file: !3, line: 1834, column: 7)
!5010 = !DILocation(line: 1834, column: 7, scope: !4995)
!5011 = !DILocation(line: 1836, column: 16, scope: !5012)
!5012 = distinct !DILexicalBlock(scope: !5009, file: !3, line: 1835, column: 5)
!5013 = !DILocation(line: 1836, column: 7, scope: !5012)
!5014 = !DILocation(line: 1837, column: 7, scope: !5012)
!5015 = !DILocation(line: 1838, column: 5, scope: !5012)
!5016 = !DILocation(line: 1839, column: 8, scope: !5017)
!5017 = distinct !DILexicalBlock(scope: !4995, file: !3, line: 1839, column: 7)
!5018 = !DILocation(line: 1839, column: 7, scope: !4995)
!5019 = !DILocation(line: 1840, column: 14, scope: !5017)
!5020 = !DILocation(line: 1840, column: 5, scope: !5017)
!5021 = !DILocation(line: 1841, column: 16, scope: !4995)
!5022 = !DILocation(line: 1844, column: 7, scope: !5023)
!5023 = distinct !DILexicalBlock(scope: !4995, file: !3, line: 1844, column: 7)
!5024 = !DILocation(line: 1844, column: 18, scope: !5023)
!5025 = !DILocation(line: 1844, column: 23, scope: !5023)
!5026 = !DILocation(line: 1844, column: 26, scope: !5023)
!5027 = !DILocation(line: 1844, column: 37, scope: !5023)
!5028 = !DILocation(line: 1844, column: 7, scope: !4995)
!5029 = !DILocation(line: 1845, column: 5, scope: !5023)
!5030 = !DILocation(line: 1848, column: 7, scope: !5031)
!5031 = distinct !DILexicalBlock(scope: !4995, file: !3, line: 1848, column: 7)
!5032 = !DILocation(line: 1848, column: 18, scope: !5031)
!5033 = !DILocation(line: 1848, column: 21, scope: !5031)
!5034 = !DILocation(line: 1848, column: 7, scope: !4995)
!5035 = !DILocation(line: 1850, column: 7, scope: !5036)
!5036 = distinct !DILexicalBlock(scope: !5031, file: !3, line: 1849, column: 5)
!5037 = !DILocation(line: 1850, column: 7, scope: !5038)
!5038 = distinct !DILexicalBlock(scope: !5039, file: !3, line: 1850, column: 7)
!5039 = distinct !DILexicalBlock(scope: !5036, file: !3, line: 1850, column: 7)
!5040 = !DILocation(line: 1850, column: 7, scope: !5039)
!5041 = !DILocation(line: 1851, column: 7, scope: !5036)
!5042 = !DILocation(line: 1856, column: 43, scope: !4995)
!5043 = !DILocation(line: 1856, column: 3, scope: !4995)
!5044 = !DILocation(line: 1857, column: 28, scope: !4995)
!5045 = !DILocation(line: 1858, column: 7, scope: !5046)
!5046 = distinct !DILexicalBlock(scope: !4995, file: !3, line: 1858, column: 7)
!5047 = !DILocation(line: 1858, column: 7, scope: !4995)
!5048 = !DILocation(line: 1860, column: 16, scope: !5049)
!5049 = distinct !DILexicalBlock(scope: !5046, file: !3, line: 1859, column: 5)
!5050 = !DILocation(line: 1860, column: 7, scope: !5049)
!5051 = !DILocation(line: 1861, column: 20, scope: !5049)
!5052 = !DILocation(line: 1861, column: 7, scope: !5049)
!5053 = !DILocation(line: 1862, column: 21, scope: !5049)
!5054 = !DILocation(line: 1862, column: 7, scope: !5049)
!5055 = !DILocation(line: 1863, column: 5, scope: !5049)
!5056 = !DILocation(line: 1864, column: 7, scope: !5057)
!5057 = distinct !DILexicalBlock(scope: !4995, file: !3, line: 1864, column: 7)
!5058 = !DILocation(line: 1864, column: 7, scope: !4995)
!5059 = !DILocation(line: 1866, column: 16, scope: !5060)
!5060 = distinct !DILexicalBlock(scope: !5057, file: !3, line: 1865, column: 5)
!5061 = !DILocation(line: 1866, column: 7, scope: !5060)
!5062 = !DILocation(line: 1867, column: 7, scope: !5060)
!5063 = !DILocation(line: 1868, column: 5, scope: !5060)
!5064 = !DILocation(line: 1869, column: 3, scope: !4995)
!5065 = !DILocation(line: 1869, column: 3, scope: !5066)
!5066 = distinct !DILexicalBlock(scope: !5067, file: !3, line: 1869, column: 3)
!5067 = distinct !DILexicalBlock(scope: !4995, file: !3, line: 1869, column: 3)
!5068 = !DILocation(line: 1869, column: 3, scope: !5067)
!5069 = !DILocation(line: 1872, column: 5, scope: !4995)
!5070 = !DILocation(line: 1872, column: 18, scope: !4995)
!5071 = !DILocation(line: 1872, column: 3, scope: !4995)
!5072 = !DILocation(line: 1873, column: 8, scope: !5073)
!5073 = distinct !DILexicalBlock(scope: !4995, file: !3, line: 1873, column: 7)
!5074 = !DILocation(line: 1873, column: 7, scope: !4995)
!5075 = !DILocation(line: 1874, column: 14, scope: !5073)
!5076 = !DILocation(line: 1874, column: 5, scope: !5073)
!5077 = !DILocation(line: 1879, column: 3, scope: !4995)
!5078 = !DILocation(line: 1880, column: 3, scope: !4995)
!5079 = !DILocation(line: 1882, column: 16, scope: !4995)
!5080 = !DILocation(line: 1883, column: 8, scope: !5081)
!5081 = distinct !DILexicalBlock(scope: !4995, file: !3, line: 1883, column: 7)
!5082 = !DILocation(line: 1883, column: 7, scope: !4995)
!5083 = !DILocation(line: 1884, column: 5, scope: !5081)
!5084 = !DILocation(line: 1887, column: 7, scope: !5085)
!5085 = distinct !DILexicalBlock(scope: !5081, file: !3, line: 1886, column: 5)
!5086 = !DILocation(line: 1889, column: 7, scope: !5085)
!5087 = !DILocation(line: 1890, column: 7, scope: !5085)
!5088 = !DILocation(line: 1892, column: 7, scope: !5085)
!5089 = !DILocation(line: 1894, column: 3, scope: !4995)
!5090 = !DILocation(line: 1895, column: 16, scope: !4995)
!5091 = !DILocation(line: 1897, column: 7, scope: !5092)
!5092 = distinct !DILexicalBlock(scope: !4995, file: !3, line: 1897, column: 7)
!5093 = !DILocation(line: 1897, column: 7, scope: !4995)
!5094 = !DILocation(line: 1899, column: 16, scope: !5095)
!5095 = distinct !DILexicalBlock(scope: !5092, file: !3, line: 1898, column: 5)
!5096 = !DILocation(line: 1899, column: 7, scope: !5095)
!5097 = !DILocation(line: 1900, column: 20, scope: !5095)
!5098 = !DILocation(line: 1900, column: 7, scope: !5095)
!5099 = !DILocation(line: 1901, column: 5, scope: !5095)
!5100 = !DILocation(line: 1923, column: 1, scope: !4995)
!5101 = distinct !DISubprogram(name: "cgraph_inline_p", scope: !3, file: !3, line: 1599, type: !5102, scopeLine: 1600, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!5102 = !DISubroutineType(types: !5103)
!5103 = !{!1941, !3221, !5104}
!5104 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3234, size: 64)
!5105 = !DILocalVariable(name: "e", arg: 1, scope: !5101, file: !3, line: 1599, type: !3221)
!5106 = !DILocation(line: 1599, column: 38, scope: !5101)
!5107 = !DILocalVariable(name: "reason", arg: 2, scope: !5101, file: !3, line: 1599, type: !5104)
!5108 = !DILocation(line: 1599, column: 65, scope: !5101)
!5109 = !DILocation(line: 1601, column: 13, scope: !5101)
!5110 = !DILocation(line: 1601, column: 16, scope: !5101)
!5111 = !DILocation(line: 1601, column: 4, scope: !5101)
!5112 = !DILocation(line: 1601, column: 11, scope: !5101)
!5113 = !DILocation(line: 1602, column: 11, scope: !5101)
!5114 = !DILocation(line: 1602, column: 14, scope: !5101)
!5115 = !DILocation(line: 1602, column: 10, scope: !5101)
!5116 = !DILocation(line: 1602, column: 3, scope: !5101)
!5117 = distinct !DISubprogram(name: "cgraph_preserve_function_body_p", scope: !3, file: !3, line: 1761, type: !5118, scopeLine: 1762, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!5118 = !DISubroutineType(types: !5119)
!5119 = !{!1941, !1821}
!5120 = !DILocalVariable(name: "decl", arg: 1, scope: !5117, file: !3, line: 1761, type: !1821)
!5121 = !DILocation(line: 1761, column: 39, scope: !5117)
!5122 = !DILocalVariable(name: "node", scope: !5117, file: !3, line: 1763, type: !3216)
!5123 = !DILocation(line: 1763, column: 23, scope: !5117)
!5124 = !DILocation(line: 1765, column: 3, scope: !5117)
!5125 = !DILocation(line: 1767, column: 23, scope: !5117)
!5126 = !DILocation(line: 1767, column: 10, scope: !5117)
!5127 = !DILocation(line: 1767, column: 8, scope: !5117)
!5128 = !DILocation(line: 1768, column: 7, scope: !5129)
!5129 = distinct !DILexicalBlock(scope: !5117, file: !3, line: 1768, column: 7)
!5130 = !DILocation(line: 1768, column: 13, scope: !5129)
!5131 = !DILocation(line: 1768, column: 7, scope: !5117)
!5132 = !DILocation(line: 1769, column: 5, scope: !5129)
!5133 = !DILocation(line: 1770, column: 3, scope: !5117)
!5134 = !DILocation(line: 1771, column: 1, scope: !5117)
!5135 = distinct !DISubprogram(name: "ipa_passes", scope: !3, file: !3, line: 1774, type: !3192, scopeLine: 1775, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!5136 = !DILocation(line: 1776, column: 3, scope: !5135)
!5137 = !DILocation(line: 1777, column: 25, scope: !5135)
!5138 = !DILocation(line: 1778, column: 3, scope: !5135)
!5139 = !DILocation(line: 1779, column: 3, scope: !5135)
!5140 = !DILocation(line: 1781, column: 3, scope: !5135)
!5141 = !DILocation(line: 1783, column: 8, scope: !5142)
!5142 = distinct !DILexicalBlock(scope: !5135, file: !3, line: 1783, column: 7)
!5143 = !DILocation(line: 1783, column: 7, scope: !5135)
!5144 = !DILocation(line: 1784, column: 28, scope: !5142)
!5145 = !DILocation(line: 1784, column: 5, scope: !5142)
!5146 = !DILocation(line: 1788, column: 7, scope: !5147)
!5147 = distinct !DILexicalBlock(scope: !5135, file: !3, line: 1788, column: 7)
!5148 = !DILocation(line: 1788, column: 20, scope: !5147)
!5149 = !DILocation(line: 1788, column: 7, scope: !5135)
!5150 = !DILocation(line: 1789, column: 18, scope: !5147)
!5151 = !DILocation(line: 1789, column: 5, scope: !5147)
!5152 = !DILocation(line: 1791, column: 8, scope: !5153)
!5153 = distinct !DILexicalBlock(scope: !5135, file: !3, line: 1791, column: 7)
!5154 = !DILocation(line: 1791, column: 7, scope: !5135)
!5155 = !DILocation(line: 1794, column: 7, scope: !5156)
!5156 = distinct !DILexicalBlock(scope: !5153, file: !3, line: 1792, column: 5)
!5157 = !DILocation(line: 1797, column: 7, scope: !5156)
!5158 = !DILocation(line: 1798, column: 29, scope: !5156)
!5159 = !DILocation(line: 1799, column: 7, scope: !5156)
!5160 = !DILocation(line: 1802, column: 29, scope: !5156)
!5161 = !DILocation(line: 1802, column: 3, scope: !5156)
!5162 = !DILocation(line: 1801, column: 7, scope: !5156)
!5163 = !DILocation(line: 1803, column: 5, scope: !5156)
!5164 = !DILocation(line: 1804, column: 57, scope: !5135)
!5165 = !DILocation(line: 1804, column: 31, scope: !5135)
!5166 = !DILocation(line: 1804, column: 3, scope: !5135)
!5167 = !DILocation(line: 1806, column: 8, scope: !5168)
!5168 = distinct !DILexicalBlock(scope: !5135, file: !3, line: 1806, column: 7)
!5169 = !DILocation(line: 1806, column: 7, scope: !5135)
!5170 = !DILocation(line: 1807, column: 5, scope: !5168)
!5171 = !DILocation(line: 1809, column: 8, scope: !5172)
!5172 = distinct !DILexicalBlock(scope: !5135, file: !3, line: 1809, column: 7)
!5173 = !DILocation(line: 1809, column: 7, scope: !5135)
!5174 = !DILocation(line: 1810, column: 28, scope: !5172)
!5175 = !DILocation(line: 1810, column: 5, scope: !5172)
!5176 = !DILocation(line: 1811, column: 3, scope: !5135)
!5177 = !DILocation(line: 1813, column: 3, scope: !5135)
!5178 = !DILocation(line: 1814, column: 1, scope: !5135)
!5179 = distinct !DISubprogram(name: "cgraph_materialize_all_clones", scope: !3, file: !3, line: 2297, type: !3192, scopeLine: 2298, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!5180 = !DILocalVariable(name: "node", scope: !5179, file: !3, line: 2299, type: !3216)
!5181 = !DILocation(line: 2299, column: 23, scope: !5179)
!5182 = !DILocalVariable(name: "stabilized", scope: !5179, file: !3, line: 2300, type: !1941)
!5183 = !DILocation(line: 2300, column: 8, scope: !5179)
!5184 = !DILocation(line: 2302, column: 7, scope: !5185)
!5185 = distinct !DILexicalBlock(scope: !5179, file: !3, line: 2302, column: 7)
!5186 = !DILocation(line: 2302, column: 7, scope: !5179)
!5187 = !DILocation(line: 2303, column: 14, scope: !5185)
!5188 = !DILocation(line: 2303, column: 5, scope: !5185)
!5189 = !DILocation(line: 2311, column: 3, scope: !5179)
!5190 = !DILocation(line: 2311, column: 11, scope: !5179)
!5191 = !DILocation(line: 2311, column: 10, scope: !5179)
!5192 = !DILocation(line: 2313, column: 18, scope: !5193)
!5193 = distinct !DILexicalBlock(scope: !5179, file: !3, line: 2312, column: 5)
!5194 = !DILocation(line: 2314, column: 19, scope: !5195)
!5195 = distinct !DILexicalBlock(scope: !5193, file: !3, line: 2314, column: 7)
!5196 = !DILocation(line: 2314, column: 17, scope: !5195)
!5197 = !DILocation(line: 2314, column: 12, scope: !5195)
!5198 = !DILocation(line: 2314, column: 33, scope: !5199)
!5199 = distinct !DILexicalBlock(scope: !5195, file: !3, line: 2314, column: 7)
!5200 = !DILocation(line: 2314, column: 7, scope: !5195)
!5201 = !DILocation(line: 2316, column: 8, scope: !5202)
!5202 = distinct !DILexicalBlock(scope: !5203, file: !3, line: 2316, column: 8)
!5203 = distinct !DILexicalBlock(scope: !5199, file: !3, line: 2315, column: 9)
!5204 = !DILocation(line: 2316, column: 14, scope: !5202)
!5205 = !DILocation(line: 2316, column: 23, scope: !5202)
!5206 = !DILocation(line: 2316, column: 26, scope: !5202)
!5207 = !DILocation(line: 2316, column: 32, scope: !5202)
!5208 = !DILocation(line: 2316, column: 40, scope: !5202)
!5209 = !DILocation(line: 2316, column: 46, scope: !5202)
!5210 = !DILocation(line: 2316, column: 56, scope: !5202)
!5211 = !DILocation(line: 2316, column: 37, scope: !5202)
!5212 = !DILocation(line: 2317, column: 8, scope: !5202)
!5213 = !DILocation(line: 2317, column: 31, scope: !5202)
!5214 = !DILocation(line: 2317, column: 37, scope: !5202)
!5215 = !DILocation(line: 2317, column: 12, scope: !5202)
!5216 = !DILocation(line: 2316, column: 8, scope: !5203)
!5217 = !DILocation(line: 2319, column: 31, scope: !5218)
!5218 = distinct !DILexicalBlock(scope: !5219, file: !3, line: 2319, column: 12)
!5219 = distinct !DILexicalBlock(scope: !5202, file: !3, line: 2318, column: 6)
!5220 = !DILocation(line: 2319, column: 37, scope: !5218)
!5221 = !DILocation(line: 2319, column: 47, scope: !5218)
!5222 = !DILocation(line: 2319, column: 12, scope: !5218)
!5223 = !DILocation(line: 2319, column: 12, scope: !5219)
!5224 = !DILocation(line: 2321, column: 9, scope: !5225)
!5225 = distinct !DILexicalBlock(scope: !5226, file: !3, line: 2321, column: 9)
!5226 = distinct !DILexicalBlock(scope: !5218, file: !3, line: 2320, column: 10)
!5227 = !DILocation(line: 2321, column: 9, scope: !5226)
!5228 = !DILocation(line: 2323, column: 18, scope: !5229)
!5229 = distinct !DILexicalBlock(scope: !5225, file: !3, line: 2322, column: 7)
!5230 = !DILocation(line: 2324, column: 29, scope: !5229)
!5231 = !DILocation(line: 2324, column: 35, scope: !5229)
!5232 = !DILocation(line: 2324, column: 11, scope: !5229)
!5233 = !DILocation(line: 2325, column: 29, scope: !5229)
!5234 = !DILocation(line: 2325, column: 11, scope: !5229)
!5235 = !DILocation(line: 2323, column: 9, scope: !5229)
!5236 = !DILocation(line: 2326, column: 13, scope: !5237)
!5237 = distinct !DILexicalBlock(scope: !5229, file: !3, line: 2326, column: 13)
!5238 = !DILocation(line: 2326, column: 19, scope: !5237)
!5239 = !DILocation(line: 2326, column: 25, scope: !5237)
!5240 = !DILocation(line: 2326, column: 13, scope: !5229)
!5241 = !DILocalVariable(name: "i", scope: !5242, file: !3, line: 2328, type: !7)
!5242 = distinct !DILexicalBlock(scope: !5237, file: !3, line: 2327, column: 11)
!5243 = !DILocation(line: 2328, column: 19, scope: !5242)
!5244 = !DILocation(line: 2329, column: 22, scope: !5242)
!5245 = !DILocation(line: 2329, column: 13, scope: !5242)
!5246 = !DILocation(line: 2330, column: 13, scope: !5247)
!5247 = distinct !DILexicalBlock(scope: !5242, file: !3, line: 2330, column: 6)
!5248 = !DILocation(line: 2330, column: 11, scope: !5247)
!5249 = !DILocation(line: 2330, column: 18, scope: !5250)
!5250 = distinct !DILexicalBlock(scope: !5247, file: !3, line: 2330, column: 6)
!5251 = !DILocation(line: 2330, column: 22, scope: !5250)
!5252 = !DILocation(line: 2330, column: 20, scope: !5250)
!5253 = !DILocation(line: 2330, column: 6, scope: !5247)
!5254 = !DILocalVariable(name: "replace_info", scope: !5255, file: !3, line: 2334, type: !3325)
!5255 = distinct !DILexicalBlock(scope: !5250, file: !3, line: 2333, column: 8)
!5256 = !DILocation(line: 2334, column: 34, scope: !5255)
!5257 = !DILocation(line: 2335, column: 25, scope: !5255)
!5258 = !DILocation(line: 2335, column: 23, scope: !5255)
!5259 = !DILocation(line: 2338, column: 30, scope: !5255)
!5260 = !DILocation(line: 2338, column: 48, scope: !5255)
!5261 = !DILocation(line: 2338, column: 62, scope: !5255)
!5262 = !DILocation(line: 2338, column: 10, scope: !5255)
!5263 = !DILocation(line: 2339, column: 19, scope: !5255)
!5264 = !DILocation(line: 2339, column: 10, scope: !5255)
!5265 = !DILocation(line: 2340, column: 30, scope: !5255)
!5266 = !DILocation(line: 2340, column: 48, scope: !5255)
!5267 = !DILocation(line: 2340, column: 62, scope: !5255)
!5268 = !DILocation(line: 2340, column: 10, scope: !5255)
!5269 = !DILocation(line: 2341, column: 19, scope: !5255)
!5270 = !DILocation(line: 2342, column: 18, scope: !5255)
!5271 = !DILocation(line: 2342, column: 32, scope: !5255)
!5272 = !DILocation(line: 2343, column: 12, scope: !5255)
!5273 = !DILocation(line: 2343, column: 26, scope: !5255)
!5274 = !DILocation(line: 2341, column: 10, scope: !5255)
!5275 = !DILocation(line: 2344, column: 8, scope: !5255)
!5276 = !DILocation(line: 2332, column: 14, scope: !5250)
!5277 = !DILocation(line: 2330, column: 6, scope: !5250)
!5278 = distinct !{!5278, !5253, !5279}
!5279 = !DILocation(line: 2344, column: 8, scope: !5247)
!5280 = !DILocation(line: 2345, column: 15, scope: !5242)
!5281 = !DILocation(line: 2345, column: 6, scope: !5242)
!5282 = !DILocation(line: 2346, column: 4, scope: !5242)
!5283 = !DILocation(line: 2347, column: 13, scope: !5284)
!5284 = distinct !DILexicalBlock(scope: !5229, file: !3, line: 2347, column: 13)
!5285 = !DILocation(line: 2347, column: 19, scope: !5284)
!5286 = !DILocation(line: 2347, column: 25, scope: !5284)
!5287 = !DILocation(line: 2347, column: 13, scope: !5229)
!5288 = !DILocation(line: 2349, column: 22, scope: !5289)
!5289 = distinct !DILexicalBlock(scope: !5284, file: !3, line: 2348, column: 4)
!5290 = !DILocation(line: 2349, column: 13, scope: !5289)
!5291 = !DILocation(line: 2350, column: 13, scope: !5289)
!5292 = !DILocation(line: 2351, column: 4, scope: !5289)
!5293 = !DILocation(line: 2352, column: 13, scope: !5294)
!5294 = distinct !DILexicalBlock(scope: !5229, file: !3, line: 2352, column: 13)
!5295 = !DILocation(line: 2352, column: 19, scope: !5294)
!5296 = !DILocation(line: 2352, column: 25, scope: !5294)
!5297 = !DILocation(line: 2352, column: 13, scope: !5229)
!5298 = !DILocation(line: 2354, column: 22, scope: !5299)
!5299 = distinct !DILexicalBlock(scope: !5294, file: !3, line: 2353, column: 4)
!5300 = !DILocation(line: 2354, column: 13, scope: !5299)
!5301 = !DILocation(line: 2355, column: 13, scope: !5299)
!5302 = !DILocation(line: 2356, column: 4, scope: !5299)
!5303 = !DILocation(line: 2357, column: 7, scope: !5229)
!5304 = !DILocation(line: 2358, column: 31, scope: !5226)
!5305 = !DILocation(line: 2358, column: 5, scope: !5226)
!5306 = !DILocation(line: 2359, column: 10, scope: !5226)
!5307 = !DILocation(line: 2361, column: 14, scope: !5218)
!5308 = !DILocation(line: 2362, column: 6, scope: !5219)
!5309 = !DILocation(line: 2363, column: 2, scope: !5203)
!5310 = !DILocation(line: 2314, column: 46, scope: !5199)
!5311 = !DILocation(line: 2314, column: 52, scope: !5199)
!5312 = !DILocation(line: 2314, column: 44, scope: !5199)
!5313 = !DILocation(line: 2314, column: 7, scope: !5199)
!5314 = distinct !{!5314, !5200, !5315}
!5315 = !DILocation(line: 2363, column: 2, scope: !5195)
!5316 = distinct !{!5316, !5189, !5317}
!5317 = !DILocation(line: 2364, column: 5, scope: !5179)
!5318 = !DILocation(line: 2365, column: 15, scope: !5319)
!5319 = distinct !DILexicalBlock(scope: !5179, file: !3, line: 2365, column: 3)
!5320 = !DILocation(line: 2365, column: 13, scope: !5319)
!5321 = !DILocation(line: 2365, column: 8, scope: !5319)
!5322 = !DILocation(line: 2365, column: 29, scope: !5323)
!5323 = distinct !DILexicalBlock(scope: !5319, file: !3, line: 2365, column: 3)
!5324 = !DILocation(line: 2365, column: 3, scope: !5319)
!5325 = !DILocation(line: 2366, column: 10, scope: !5326)
!5326 = distinct !DILexicalBlock(scope: !5323, file: !3, line: 2366, column: 9)
!5327 = !DILocation(line: 2366, column: 16, scope: !5326)
!5328 = !DILocation(line: 2366, column: 25, scope: !5326)
!5329 = !DILocation(line: 2366, column: 28, scope: !5326)
!5330 = !DILocation(line: 2366, column: 34, scope: !5326)
!5331 = !DILocation(line: 2366, column: 9, scope: !5323)
!5332 = !DILocation(line: 2367, column: 35, scope: !5326)
!5333 = !DILocation(line: 2367, column: 7, scope: !5326)
!5334 = !DILocation(line: 2365, column: 42, scope: !5323)
!5335 = !DILocation(line: 2365, column: 48, scope: !5323)
!5336 = !DILocation(line: 2365, column: 40, scope: !5323)
!5337 = !DILocation(line: 2365, column: 3, scope: !5323)
!5338 = distinct !{!5338, !5324, !5339}
!5339 = !DILocation(line: 2367, column: 39, scope: !5319)
!5340 = !DILocation(line: 2368, column: 7, scope: !5341)
!5341 = distinct !DILexicalBlock(scope: !5179, file: !3, line: 2368, column: 7)
!5342 = !DILocation(line: 2368, column: 7, scope: !5179)
!5343 = !DILocation(line: 2369, column: 14, scope: !5341)
!5344 = !DILocation(line: 2369, column: 5, scope: !5341)
!5345 = !DILocation(line: 2370, column: 15, scope: !5346)
!5346 = distinct !DILexicalBlock(scope: !5179, file: !3, line: 2370, column: 3)
!5347 = !DILocation(line: 2370, column: 13, scope: !5346)
!5348 = !DILocation(line: 2370, column: 8, scope: !5346)
!5349 = !DILocation(line: 2370, column: 29, scope: !5350)
!5350 = distinct !DILexicalBlock(scope: !5346, file: !3, line: 2370, column: 3)
!5351 = !DILocation(line: 2370, column: 3, scope: !5346)
!5352 = !DILocation(line: 2371, column: 9, scope: !5353)
!5353 = distinct !DILexicalBlock(scope: !5350, file: !3, line: 2371, column: 9)
!5354 = !DILocation(line: 2371, column: 15, scope: !5353)
!5355 = !DILocation(line: 2371, column: 24, scope: !5353)
!5356 = !DILocation(line: 2371, column: 28, scope: !5353)
!5357 = !DILocation(line: 2371, column: 34, scope: !5353)
!5358 = !DILocation(line: 2372, column: 2, scope: !5353)
!5359 = !DILocation(line: 2372, column: 24, scope: !5353)
!5360 = !DILocation(line: 2372, column: 30, scope: !5353)
!5361 = !DILocation(line: 2372, column: 5, scope: !5353)
!5362 = !DILocation(line: 2371, column: 9, scope: !5350)
!5363 = !DILocalVariable(name: "e", scope: !5364, file: !3, line: 2374, type: !3221)
!5364 = distinct !DILexicalBlock(scope: !5353, file: !3, line: 2373, column: 7)
!5365 = !DILocation(line: 2374, column: 29, scope: !5364)
!5366 = !DILocation(line: 2376, column: 26, scope: !5364)
!5367 = !DILocation(line: 2376, column: 32, scope: !5364)
!5368 = !DILocation(line: 2376, column: 24, scope: !5364)
!5369 = !DILocation(line: 2377, column: 20, scope: !5364)
!5370 = !DILocation(line: 2377, column: 9, scope: !5364)
!5371 = !DILocation(line: 2378, column: 11, scope: !5372)
!5372 = distinct !DILexicalBlock(scope: !5364, file: !3, line: 2378, column: 2)
!5373 = !DILocation(line: 2378, column: 17, scope: !5372)
!5374 = !DILocation(line: 2378, column: 9, scope: !5372)
!5375 = !DILocation(line: 2378, column: 7, scope: !5372)
!5376 = !DILocation(line: 2378, column: 26, scope: !5377)
!5377 = distinct !DILexicalBlock(scope: !5372, file: !3, line: 2378, column: 2)
!5378 = !DILocation(line: 2378, column: 2, scope: !5372)
!5379 = !DILocation(line: 2379, column: 46, scope: !5377)
!5380 = !DILocation(line: 2379, column: 4, scope: !5377)
!5381 = !DILocation(line: 2378, column: 33, scope: !5377)
!5382 = !DILocation(line: 2378, column: 36, scope: !5377)
!5383 = !DILocation(line: 2378, column: 31, scope: !5377)
!5384 = !DILocation(line: 2378, column: 2, scope: !5377)
!5385 = distinct !{!5385, !5378, !5386}
!5386 = !DILocation(line: 2379, column: 47, scope: !5372)
!5387 = !DILocation(line: 2380, column: 2, scope: !5364)
!5388 = !DILocation(line: 2381, column: 24, scope: !5364)
!5389 = !DILocation(line: 2385, column: 7, scope: !5364)
!5390 = !DILocation(line: 2372, column: 34, scope: !5353)
!5391 = !DILocation(line: 2370, column: 42, scope: !5350)
!5392 = !DILocation(line: 2370, column: 48, scope: !5350)
!5393 = !DILocation(line: 2370, column: 40, scope: !5350)
!5394 = !DILocation(line: 2370, column: 3, scope: !5350)
!5395 = distinct !{!5395, !5351, !5396}
!5396 = !DILocation(line: 2385, column: 7, scope: !5346)
!5397 = !DILocation(line: 2386, column: 7, scope: !5398)
!5398 = distinct !DILexicalBlock(scope: !5179, file: !3, line: 2386, column: 7)
!5399 = !DILocation(line: 2386, column: 7, scope: !5179)
!5400 = !DILocation(line: 2387, column: 14, scope: !5398)
!5401 = !DILocation(line: 2387, column: 5, scope: !5398)
!5402 = !DILocation(line: 2391, column: 15, scope: !5403)
!5403 = distinct !DILexicalBlock(scope: !5179, file: !3, line: 2391, column: 3)
!5404 = !DILocation(line: 2391, column: 13, scope: !5403)
!5405 = !DILocation(line: 2391, column: 8, scope: !5403)
!5406 = !DILocation(line: 2391, column: 29, scope: !5407)
!5407 = distinct !DILexicalBlock(scope: !5403, file: !3, line: 2391, column: 3)
!5408 = !DILocation(line: 2391, column: 3, scope: !5403)
!5409 = !DILocation(line: 2392, column: 5, scope: !5407)
!5410 = !DILocation(line: 2392, column: 11, scope: !5407)
!5411 = !DILocation(line: 2392, column: 17, scope: !5407)
!5412 = !DILocation(line: 2392, column: 39, scope: !5407)
!5413 = !DILocation(line: 2391, column: 42, scope: !5407)
!5414 = !DILocation(line: 2391, column: 48, scope: !5407)
!5415 = !DILocation(line: 2391, column: 40, scope: !5407)
!5416 = !DILocation(line: 2391, column: 3, scope: !5407)
!5417 = distinct !{!5417, !5408, !5418}
!5418 = !DILocation(line: 2392, column: 41, scope: !5403)
!5419 = !DILocation(line: 2396, column: 43, scope: !5179)
!5420 = !DILocation(line: 2396, column: 3, scope: !5179)
!5421 = !DILocation(line: 2397, column: 1, scope: !5179)
!5422 = distinct !DISubprogram(name: "cgraph_mark_functions_to_output", scope: !3, file: !3, line: 1119, type: !3192, scopeLine: 1120, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!5423 = !DILocalVariable(name: "node", scope: !5422, file: !3, line: 1121, type: !3216)
!5424 = !DILocation(line: 1121, column: 23, scope: !5422)
!5425 = !DILocation(line: 1129, column: 15, scope: !5426)
!5426 = distinct !DILexicalBlock(scope: !5422, file: !3, line: 1129, column: 3)
!5427 = !DILocation(line: 1129, column: 13, scope: !5426)
!5428 = !DILocation(line: 1129, column: 8, scope: !5426)
!5429 = !DILocation(line: 1129, column: 29, scope: !5430)
!5430 = distinct !DILexicalBlock(scope: !5426, file: !3, line: 1129, column: 3)
!5431 = !DILocation(line: 1129, column: 3, scope: !5426)
!5432 = !DILocalVariable(name: "decl", scope: !5433, file: !3, line: 1131, type: !1821)
!5433 = distinct !DILexicalBlock(scope: !5430, file: !3, line: 1130, column: 5)
!5434 = !DILocation(line: 1131, column: 12, scope: !5433)
!5435 = !DILocation(line: 1131, column: 19, scope: !5433)
!5436 = !DILocation(line: 1131, column: 25, scope: !5433)
!5437 = !DILocalVariable(name: "e", scope: !5433, file: !3, line: 1132, type: !3221)
!5438 = !DILocation(line: 1132, column: 27, scope: !5433)
!5439 = !DILocation(line: 1134, column: 7, scope: !5433)
!5440 = !DILocation(line: 1135, column: 11, scope: !5441)
!5441 = distinct !DILexicalBlock(scope: !5433, file: !3, line: 1135, column: 11)
!5442 = !DILocation(line: 1135, column: 17, scope: !5441)
!5443 = !DILocation(line: 1135, column: 11, scope: !5433)
!5444 = !DILocation(line: 1136, column: 2, scope: !5441)
!5445 = !DILocation(line: 1138, column: 16, scope: !5446)
!5446 = distinct !DILexicalBlock(scope: !5433, file: !3, line: 1138, column: 7)
!5447 = !DILocation(line: 1138, column: 22, scope: !5446)
!5448 = !DILocation(line: 1138, column: 14, scope: !5446)
!5449 = !DILocation(line: 1138, column: 12, scope: !5446)
!5450 = !DILocation(line: 1138, column: 31, scope: !5451)
!5451 = distinct !DILexicalBlock(scope: !5446, file: !3, line: 1138, column: 7)
!5452 = !DILocation(line: 1138, column: 7, scope: !5446)
!5453 = !DILocation(line: 1139, column: 6, scope: !5454)
!5454 = distinct !DILexicalBlock(scope: !5451, file: !3, line: 1139, column: 6)
!5455 = !DILocation(line: 1139, column: 9, scope: !5454)
!5456 = !DILocation(line: 1139, column: 6, scope: !5451)
!5457 = !DILocation(line: 1140, column: 4, scope: !5454)
!5458 = !DILocation(line: 1138, column: 38, scope: !5451)
!5459 = !DILocation(line: 1138, column: 41, scope: !5451)
!5460 = !DILocation(line: 1138, column: 36, scope: !5451)
!5461 = !DILocation(line: 1138, column: 7, scope: !5451)
!5462 = distinct !{!5462, !5452, !5463}
!5463 = !DILocation(line: 1140, column: 4, scope: !5446)
!5464 = !DILocation(line: 1145, column: 11, scope: !5465)
!5465 = distinct !DILexicalBlock(scope: !5433, file: !3, line: 1145, column: 11)
!5466 = !DILocation(line: 1145, column: 17, scope: !5465)
!5467 = !DILocation(line: 1146, column: 4, scope: !5465)
!5468 = !DILocation(line: 1146, column: 8, scope: !5465)
!5469 = !DILocation(line: 1146, column: 14, scope: !5465)
!5470 = !DILocation(line: 1146, column: 21, scope: !5465)
!5471 = !DILocation(line: 1147, column: 4, scope: !5465)
!5472 = !DILocation(line: 1147, column: 8, scope: !5465)
!5473 = !DILocation(line: 1147, column: 14, scope: !5465)
!5474 = !DILocation(line: 1148, column: 8, scope: !5465)
!5475 = !DILocation(line: 1148, column: 12, scope: !5465)
!5476 = !DILocation(line: 1148, column: 14, scope: !5465)
!5477 = !DILocation(line: 1148, column: 17, scope: !5465)
!5478 = !DILocation(line: 1148, column: 23, scope: !5465)
!5479 = !DILocation(line: 1149, column: 4, scope: !5465)
!5480 = !DILocation(line: 1149, column: 8, scope: !5465)
!5481 = !DILocation(line: 1150, column: 4, scope: !5465)
!5482 = !DILocation(line: 1150, column: 8, scope: !5465)
!5483 = !DILocation(line: 1145, column: 11, scope: !5433)
!5484 = !DILocation(line: 1152, column: 4, scope: !5485)
!5485 = distinct !DILexicalBlock(scope: !5465, file: !3, line: 1151, column: 2)
!5486 = !DILocation(line: 1152, column: 10, scope: !5485)
!5487 = !DILocation(line: 1152, column: 18, scope: !5485)
!5488 = !DILocation(line: 1153, column: 8, scope: !5489)
!5489 = distinct !DILexicalBlock(scope: !5485, file: !3, line: 1153, column: 8)
!5490 = !DILocation(line: 1153, column: 14, scope: !5489)
!5491 = !DILocation(line: 1153, column: 8, scope: !5485)
!5492 = !DILocalVariable(name: "next", scope: !5493, file: !3, line: 1155, type: !3216)
!5493 = distinct !DILexicalBlock(scope: !5489, file: !3, line: 1154, column: 6)
!5494 = !DILocation(line: 1155, column: 28, scope: !5493)
!5495 = !DILocation(line: 1156, column: 20, scope: !5496)
!5496 = distinct !DILexicalBlock(scope: !5493, file: !3, line: 1156, column: 8)
!5497 = !DILocation(line: 1156, column: 26, scope: !5496)
!5498 = !DILocation(line: 1156, column: 18, scope: !5496)
!5499 = !DILocation(line: 1156, column: 13, scope: !5496)
!5500 = !DILocation(line: 1157, column: 6, scope: !5501)
!5501 = distinct !DILexicalBlock(scope: !5496, file: !3, line: 1156, column: 8)
!5502 = !DILocation(line: 1157, column: 14, scope: !5501)
!5503 = !DILocation(line: 1157, column: 11, scope: !5501)
!5504 = !DILocation(line: 1156, column: 8, scope: !5496)
!5505 = !DILocation(line: 1159, column: 3, scope: !5501)
!5506 = !DILocation(line: 1159, column: 9, scope: !5501)
!5507 = !DILocation(line: 1159, column: 17, scope: !5501)
!5508 = !DILocation(line: 1158, column: 13, scope: !5501)
!5509 = !DILocation(line: 1158, column: 19, scope: !5501)
!5510 = !DILocation(line: 1158, column: 11, scope: !5501)
!5511 = !DILocation(line: 1156, column: 8, scope: !5501)
!5512 = distinct !{!5512, !5504, !5513}
!5513 = !DILocation(line: 1159, column: 19, scope: !5496)
!5514 = !DILocation(line: 1160, column: 6, scope: !5493)
!5515 = !DILocation(line: 1161, column: 2, scope: !5485)
!5516 = !DILocation(line: 1162, column: 16, scope: !5517)
!5517 = distinct !DILexicalBlock(scope: !5465, file: !3, line: 1162, column: 16)
!5518 = !DILocation(line: 1162, column: 22, scope: !5517)
!5519 = !DILocation(line: 1162, column: 16, scope: !5465)
!5520 = !DILocation(line: 1167, column: 2, scope: !5521)
!5521 = distinct !DILexicalBlock(scope: !5517, file: !3, line: 1163, column: 2)
!5522 = !DILocation(line: 1180, column: 4, scope: !5523)
!5523 = distinct !DILexicalBlock(scope: !5517, file: !3, line: 1169, column: 2)
!5524 = !DILocation(line: 1186, column: 5, scope: !5433)
!5525 = !DILocation(line: 1129, column: 42, scope: !5430)
!5526 = !DILocation(line: 1129, column: 48, scope: !5430)
!5527 = !DILocation(line: 1129, column: 40, scope: !5430)
!5528 = !DILocation(line: 1129, column: 3, scope: !5430)
!5529 = distinct !{!5529, !5431, !5530}
!5530 = !DILocation(line: 1186, column: 5, scope: !5426)
!5531 = !DILocation(line: 1202, column: 1, scope: !5422)
!5532 = distinct !DISubprogram(name: "cgraph_output_in_order", scope: !3, file: !3, line: 1678, type: !3192, scopeLine: 1679, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!5533 = !DILocalVariable(name: "max", scope: !5532, file: !3, line: 1680, type: !1918)
!5534 = !DILocation(line: 1680, column: 7, scope: !5532)
!5535 = !DILocalVariable(name: "nodes", scope: !5532, file: !3, line: 1681, type: !3392)
!5536 = !DILocation(line: 1681, column: 29, scope: !5532)
!5537 = !DILocalVariable(name: "i", scope: !5532, file: !3, line: 1682, type: !1918)
!5538 = !DILocation(line: 1682, column: 7, scope: !5532)
!5539 = !DILocalVariable(name: "pf", scope: !5532, file: !3, line: 1683, type: !3216)
!5540 = !DILocation(line: 1683, column: 23, scope: !5532)
!5541 = !DILocalVariable(name: "pv", scope: !5532, file: !3, line: 1684, type: !3377)
!5542 = !DILocation(line: 1684, column: 24, scope: !5532)
!5543 = !DILocalVariable(name: "pa", scope: !5532, file: !3, line: 1685, type: !3402)
!5544 = !DILocation(line: 1685, column: 27, scope: !5532)
!5545 = !DILocation(line: 1687, column: 9, scope: !5532)
!5546 = !DILocation(line: 1687, column: 7, scope: !5532)
!5547 = !DILocation(line: 1688, column: 11, scope: !5532)
!5548 = !DILocation(line: 1688, column: 9, scope: !5532)
!5549 = !DILocation(line: 1690, column: 3, scope: !5532)
!5550 = !DILocation(line: 1692, column: 13, scope: !5551)
!5551 = distinct !DILexicalBlock(scope: !5532, file: !3, line: 1692, column: 3)
!5552 = !DILocation(line: 1692, column: 11, scope: !5551)
!5553 = !DILocation(line: 1692, column: 8, scope: !5551)
!5554 = !DILocation(line: 1692, column: 27, scope: !5555)
!5555 = distinct !DILexicalBlock(scope: !5551, file: !3, line: 1692, column: 3)
!5556 = !DILocation(line: 1692, column: 3, scope: !5551)
!5557 = !DILocation(line: 1694, column: 11, scope: !5558)
!5558 = distinct !DILexicalBlock(scope: !5559, file: !3, line: 1694, column: 11)
!5559 = distinct !DILexicalBlock(scope: !5555, file: !3, line: 1693, column: 5)
!5560 = !DILocation(line: 1694, column: 15, scope: !5558)
!5561 = !DILocation(line: 1694, column: 11, scope: !5559)
!5562 = !DILocation(line: 1696, column: 8, scope: !5563)
!5563 = distinct !DILexicalBlock(scope: !5558, file: !3, line: 1695, column: 2)
!5564 = !DILocation(line: 1696, column: 12, scope: !5563)
!5565 = !DILocation(line: 1696, column: 6, scope: !5563)
!5566 = !DILocation(line: 1697, column: 4, scope: !5563)
!5567 = !DILocation(line: 1698, column: 4, scope: !5563)
!5568 = !DILocation(line: 1698, column: 10, scope: !5563)
!5569 = !DILocation(line: 1698, column: 13, scope: !5563)
!5570 = !DILocation(line: 1698, column: 18, scope: !5563)
!5571 = !DILocation(line: 1699, column: 19, scope: !5563)
!5572 = !DILocation(line: 1699, column: 4, scope: !5563)
!5573 = !DILocation(line: 1699, column: 10, scope: !5563)
!5574 = !DILocation(line: 1699, column: 13, scope: !5563)
!5575 = !DILocation(line: 1699, column: 15, scope: !5563)
!5576 = !DILocation(line: 1699, column: 17, scope: !5563)
!5577 = !DILocation(line: 1700, column: 2, scope: !5563)
!5578 = !DILocation(line: 1701, column: 5, scope: !5559)
!5579 = !DILocation(line: 1692, column: 36, scope: !5555)
!5580 = !DILocation(line: 1692, column: 40, scope: !5555)
!5581 = !DILocation(line: 1692, column: 34, scope: !5555)
!5582 = !DILocation(line: 1692, column: 3, scope: !5555)
!5583 = distinct !{!5583, !5556, !5584}
!5584 = !DILocation(line: 1701, column: 5, scope: !5551)
!5585 = !DILocation(line: 1703, column: 13, scope: !5586)
!5586 = distinct !DILexicalBlock(scope: !5532, file: !3, line: 1703, column: 3)
!5587 = !DILocation(line: 1703, column: 11, scope: !5586)
!5588 = !DILocation(line: 1703, column: 8, scope: !5586)
!5589 = !DILocation(line: 1703, column: 34, scope: !5590)
!5590 = distinct !DILexicalBlock(scope: !5586, file: !3, line: 1703, column: 3)
!5591 = !DILocation(line: 1703, column: 3, scope: !5586)
!5592 = !DILocation(line: 1705, column: 11, scope: !5593)
!5593 = distinct !DILexicalBlock(scope: !5590, file: !3, line: 1704, column: 5)
!5594 = !DILocation(line: 1705, column: 15, scope: !5593)
!5595 = !DILocation(line: 1705, column: 9, scope: !5593)
!5596 = !DILocation(line: 1706, column: 7, scope: !5593)
!5597 = !DILocation(line: 1707, column: 7, scope: !5593)
!5598 = !DILocation(line: 1707, column: 13, scope: !5593)
!5599 = !DILocation(line: 1707, column: 16, scope: !5593)
!5600 = !DILocation(line: 1707, column: 21, scope: !5593)
!5601 = !DILocation(line: 1708, column: 22, scope: !5593)
!5602 = !DILocation(line: 1708, column: 7, scope: !5593)
!5603 = !DILocation(line: 1708, column: 13, scope: !5593)
!5604 = !DILocation(line: 1708, column: 16, scope: !5593)
!5605 = !DILocation(line: 1708, column: 18, scope: !5593)
!5606 = !DILocation(line: 1708, column: 20, scope: !5593)
!5607 = !DILocation(line: 1709, column: 5, scope: !5593)
!5608 = !DILocation(line: 1703, column: 43, scope: !5590)
!5609 = !DILocation(line: 1703, column: 47, scope: !5590)
!5610 = !DILocation(line: 1703, column: 41, scope: !5590)
!5611 = !DILocation(line: 1703, column: 3, scope: !5590)
!5612 = distinct !{!5612, !5591, !5613}
!5613 = !DILocation(line: 1709, column: 5, scope: !5586)
!5614 = !DILocation(line: 1711, column: 13, scope: !5615)
!5615 = distinct !DILexicalBlock(scope: !5532, file: !3, line: 1711, column: 3)
!5616 = !DILocation(line: 1711, column: 11, scope: !5615)
!5617 = !DILocation(line: 1711, column: 8, scope: !5615)
!5618 = !DILocation(line: 1711, column: 31, scope: !5619)
!5619 = distinct !DILexicalBlock(scope: !5615, file: !3, line: 1711, column: 3)
!5620 = !DILocation(line: 1711, column: 3, scope: !5615)
!5621 = !DILocation(line: 1713, column: 11, scope: !5622)
!5622 = distinct !DILexicalBlock(scope: !5619, file: !3, line: 1712, column: 5)
!5623 = !DILocation(line: 1713, column: 15, scope: !5622)
!5624 = !DILocation(line: 1713, column: 9, scope: !5622)
!5625 = !DILocation(line: 1714, column: 7, scope: !5622)
!5626 = !DILocation(line: 1715, column: 7, scope: !5622)
!5627 = !DILocation(line: 1715, column: 13, scope: !5622)
!5628 = !DILocation(line: 1715, column: 16, scope: !5622)
!5629 = !DILocation(line: 1715, column: 21, scope: !5622)
!5630 = !DILocation(line: 1716, column: 22, scope: !5622)
!5631 = !DILocation(line: 1716, column: 7, scope: !5622)
!5632 = !DILocation(line: 1716, column: 13, scope: !5622)
!5633 = !DILocation(line: 1716, column: 16, scope: !5622)
!5634 = !DILocation(line: 1716, column: 18, scope: !5622)
!5635 = !DILocation(line: 1716, column: 20, scope: !5622)
!5636 = !DILocation(line: 1717, column: 5, scope: !5622)
!5637 = !DILocation(line: 1711, column: 40, scope: !5619)
!5638 = !DILocation(line: 1711, column: 44, scope: !5619)
!5639 = !DILocation(line: 1711, column: 38, scope: !5619)
!5640 = !DILocation(line: 1711, column: 3, scope: !5619)
!5641 = distinct !{!5641, !5620, !5642}
!5642 = !DILocation(line: 1717, column: 5, scope: !5615)
!5643 = !DILocation(line: 1720, column: 10, scope: !5644)
!5644 = distinct !DILexicalBlock(scope: !5532, file: !3, line: 1720, column: 3)
!5645 = !DILocation(line: 1720, column: 8, scope: !5644)
!5646 = !DILocation(line: 1720, column: 15, scope: !5647)
!5647 = distinct !DILexicalBlock(scope: !5644, file: !3, line: 1720, column: 3)
!5648 = !DILocation(line: 1720, column: 19, scope: !5647)
!5649 = !DILocation(line: 1720, column: 17, scope: !5647)
!5650 = !DILocation(line: 1720, column: 3, scope: !5644)
!5651 = !DILocation(line: 1722, column: 11, scope: !5652)
!5652 = distinct !DILexicalBlock(scope: !5653, file: !3, line: 1722, column: 11)
!5653 = distinct !DILexicalBlock(scope: !5647, file: !3, line: 1721, column: 5)
!5654 = !DILocation(line: 1722, column: 17, scope: !5652)
!5655 = !DILocation(line: 1722, column: 20, scope: !5652)
!5656 = !DILocation(line: 1722, column: 25, scope: !5652)
!5657 = !DILocation(line: 1722, column: 11, scope: !5653)
!5658 = !DILocation(line: 1724, column: 30, scope: !5659)
!5659 = distinct !DILexicalBlock(scope: !5652, file: !3, line: 1723, column: 9)
!5660 = !DILocation(line: 1724, column: 36, scope: !5659)
!5661 = !DILocation(line: 1724, column: 39, scope: !5659)
!5662 = !DILocation(line: 1724, column: 41, scope: !5659)
!5663 = !DILocation(line: 1724, column: 4, scope: !5659)
!5664 = !DILocation(line: 1725, column: 2, scope: !5659)
!5665 = !DILocation(line: 1726, column: 5, scope: !5653)
!5666 = !DILocation(line: 1720, column: 24, scope: !5647)
!5667 = !DILocation(line: 1720, column: 3, scope: !5647)
!5668 = distinct !{!5668, !5650, !5669}
!5669 = !DILocation(line: 1726, column: 5, scope: !5644)
!5670 = !DILocation(line: 1727, column: 3, scope: !5532)
!5671 = !DILocation(line: 1729, column: 10, scope: !5672)
!5672 = distinct !DILexicalBlock(scope: !5532, file: !3, line: 1729, column: 3)
!5673 = !DILocation(line: 1729, column: 8, scope: !5672)
!5674 = !DILocation(line: 1729, column: 15, scope: !5675)
!5675 = distinct !DILexicalBlock(scope: !5672, file: !3, line: 1729, column: 3)
!5676 = !DILocation(line: 1729, column: 19, scope: !5675)
!5677 = !DILocation(line: 1729, column: 17, scope: !5675)
!5678 = !DILocation(line: 1729, column: 3, scope: !5672)
!5679 = !DILocation(line: 1731, column: 15, scope: !5680)
!5680 = distinct !DILexicalBlock(scope: !5675, file: !3, line: 1730, column: 5)
!5681 = !DILocation(line: 1731, column: 21, scope: !5680)
!5682 = !DILocation(line: 1731, column: 24, scope: !5680)
!5683 = !DILocation(line: 1731, column: 7, scope: !5680)
!5684 = !DILocation(line: 1734, column: 4, scope: !5685)
!5685 = distinct !DILexicalBlock(scope: !5680, file: !3, line: 1732, column: 2)
!5686 = !DILocation(line: 1734, column: 10, scope: !5685)
!5687 = !DILocation(line: 1734, column: 13, scope: !5685)
!5688 = !DILocation(line: 1734, column: 15, scope: !5685)
!5689 = !DILocation(line: 1734, column: 18, scope: !5685)
!5690 = !DILocation(line: 1734, column: 26, scope: !5685)
!5691 = !DILocation(line: 1735, column: 28, scope: !5685)
!5692 = !DILocation(line: 1735, column: 34, scope: !5685)
!5693 = !DILocation(line: 1735, column: 37, scope: !5685)
!5694 = !DILocation(line: 1735, column: 39, scope: !5685)
!5695 = !DILocation(line: 1735, column: 4, scope: !5685)
!5696 = !DILocation(line: 1736, column: 4, scope: !5685)
!5697 = !DILocation(line: 1739, column: 27, scope: !5685)
!5698 = !DILocation(line: 1739, column: 33, scope: !5685)
!5699 = !DILocation(line: 1739, column: 36, scope: !5685)
!5700 = !DILocation(line: 1739, column: 38, scope: !5685)
!5701 = !DILocation(line: 1739, column: 4, scope: !5685)
!5702 = !DILocation(line: 1740, column: 4, scope: !5685)
!5703 = !DILocation(line: 1743, column: 18, scope: !5685)
!5704 = !DILocation(line: 1743, column: 24, scope: !5685)
!5705 = !DILocation(line: 1743, column: 27, scope: !5685)
!5706 = !DILocation(line: 1743, column: 29, scope: !5685)
!5707 = !DILocation(line: 1743, column: 32, scope: !5685)
!5708 = !DILocation(line: 1743, column: 4, scope: !5685)
!5709 = !DILocation(line: 1744, column: 4, scope: !5685)
!5710 = !DILocation(line: 1747, column: 4, scope: !5685)
!5711 = !DILocation(line: 1750, column: 4, scope: !5685)
!5712 = !DILocation(line: 1751, column: 2, scope: !5685)
!5713 = !DILocation(line: 1752, column: 5, scope: !5680)
!5714 = !DILocation(line: 1729, column: 24, scope: !5675)
!5715 = !DILocation(line: 1729, column: 3, scope: !5675)
!5716 = distinct !{!5716, !5678, !5717}
!5717 = !DILocation(line: 1752, column: 5, scope: !5672)
!5718 = !DILocation(line: 1754, column: 20, scope: !5532)
!5719 = !DILocation(line: 1755, column: 9, scope: !5532)
!5720 = !DILocation(line: 1755, column: 3, scope: !5532)
!5721 = !DILocation(line: 1756, column: 1, scope: !5532)
!5722 = distinct !DISubprogram(name: "cgraph_output_pending_asms", scope: !3, file: !3, line: 832, type: !3192, scopeLine: 833, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!5723 = !DILocalVariable(name: "can", scope: !5722, file: !3, line: 834, type: !3402)
!5724 = !DILocation(line: 834, column: 27, scope: !5722)
!5725 = !DILocation(line: 836, column: 7, scope: !5726)
!5726 = distinct !DILexicalBlock(scope: !5722, file: !3, line: 836, column: 7)
!5727 = !DILocation(line: 836, column: 18, scope: !5726)
!5728 = !DILocation(line: 836, column: 21, scope: !5726)
!5729 = !DILocation(line: 836, column: 7, scope: !5722)
!5730 = !DILocation(line: 837, column: 5, scope: !5726)
!5731 = !DILocation(line: 839, column: 14, scope: !5732)
!5732 = distinct !DILexicalBlock(scope: !5722, file: !3, line: 839, column: 3)
!5733 = !DILocation(line: 839, column: 12, scope: !5732)
!5734 = !DILocation(line: 839, column: 8, scope: !5732)
!5735 = !DILocation(line: 839, column: 32, scope: !5736)
!5736 = distinct !DILexicalBlock(scope: !5732, file: !3, line: 839, column: 3)
!5737 = !DILocation(line: 839, column: 3, scope: !5732)
!5738 = !DILocation(line: 840, column: 19, scope: !5736)
!5739 = !DILocation(line: 840, column: 24, scope: !5736)
!5740 = !DILocation(line: 840, column: 5, scope: !5736)
!5741 = !DILocation(line: 839, column: 43, scope: !5736)
!5742 = !DILocation(line: 839, column: 48, scope: !5736)
!5743 = !DILocation(line: 839, column: 41, scope: !5736)
!5744 = !DILocation(line: 839, column: 3, scope: !5736)
!5745 = distinct !{!5745, !5737, !5746}
!5746 = !DILocation(line: 840, column: 31, scope: !5732)
!5747 = !DILocation(line: 841, column: 20, scope: !5722)
!5748 = !DILocation(line: 842, column: 1, scope: !5722)
!5749 = distinct !DISubprogram(name: "cgraph_expand_all_functions", scope: !3, file: !3, line: 1618, type: !3192, scopeLine: 1619, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!5750 = !DILocalVariable(name: "node", scope: !5749, file: !3, line: 1620, type: !3216)
!5751 = !DILocation(line: 1620, column: 23, scope: !5749)
!5752 = !DILocalVariable(name: "order", scope: !5749, file: !3, line: 1621, type: !3408)
!5753 = !DILocation(line: 1621, column: 24, scope: !5749)
!5754 = !DILocation(line: 1621, column: 32, scope: !5749)
!5755 = !DILocalVariable(name: "order_pos", scope: !5749, file: !3, line: 1622, type: !1918)
!5756 = !DILocation(line: 1622, column: 7, scope: !5749)
!5757 = !DILocalVariable(name: "new_order_pos", scope: !5749, file: !3, line: 1622, type: !1918)
!5758 = !DILocation(line: 1622, column: 18, scope: !5749)
!5759 = !DILocalVariable(name: "i", scope: !5749, file: !3, line: 1623, type: !1918)
!5760 = !DILocation(line: 1623, column: 7, scope: !5749)
!5761 = !DILocation(line: 1625, column: 33, scope: !5749)
!5762 = !DILocation(line: 1625, column: 15, scope: !5749)
!5763 = !DILocation(line: 1625, column: 13, scope: !5749)
!5764 = !DILocation(line: 1626, column: 3, scope: !5749)
!5765 = !DILocation(line: 1630, column: 10, scope: !5766)
!5766 = distinct !DILexicalBlock(scope: !5749, file: !3, line: 1630, column: 3)
!5767 = !DILocation(line: 1630, column: 8, scope: !5766)
!5768 = !DILocation(line: 1630, column: 15, scope: !5769)
!5769 = distinct !DILexicalBlock(scope: !5766, file: !3, line: 1630, column: 3)
!5770 = !DILocation(line: 1630, column: 19, scope: !5769)
!5771 = !DILocation(line: 1630, column: 17, scope: !5769)
!5772 = !DILocation(line: 1630, column: 3, scope: !5766)
!5773 = !DILocation(line: 1631, column: 9, scope: !5774)
!5774 = distinct !DILexicalBlock(scope: !5769, file: !3, line: 1631, column: 9)
!5775 = !DILocation(line: 1631, column: 15, scope: !5774)
!5776 = !DILocation(line: 1631, column: 19, scope: !5774)
!5777 = !DILocation(line: 1631, column: 9, scope: !5769)
!5778 = !DILocation(line: 1632, column: 32, scope: !5774)
!5779 = !DILocation(line: 1632, column: 38, scope: !5774)
!5780 = !DILocation(line: 1632, column: 7, scope: !5774)
!5781 = !DILocation(line: 1632, column: 26, scope: !5774)
!5782 = !DILocation(line: 1632, column: 30, scope: !5774)
!5783 = !DILocation(line: 1630, column: 31, scope: !5769)
!5784 = !DILocation(line: 1630, column: 3, scope: !5769)
!5785 = distinct !{!5785, !5772, !5786}
!5786 = !DILocation(line: 1632, column: 39, scope: !5766)
!5787 = !DILocation(line: 1634, column: 12, scope: !5788)
!5788 = distinct !DILexicalBlock(scope: !5749, file: !3, line: 1634, column: 3)
!5789 = !DILocation(line: 1634, column: 26, scope: !5788)
!5790 = !DILocation(line: 1634, column: 10, scope: !5788)
!5791 = !DILocation(line: 1634, column: 8, scope: !5788)
!5792 = !DILocation(line: 1634, column: 31, scope: !5793)
!5793 = distinct !DILexicalBlock(scope: !5788, file: !3, line: 1634, column: 3)
!5794 = !DILocation(line: 1634, column: 33, scope: !5793)
!5795 = !DILocation(line: 1634, column: 3, scope: !5788)
!5796 = !DILocation(line: 1636, column: 14, scope: !5797)
!5797 = distinct !DILexicalBlock(scope: !5793, file: !3, line: 1635, column: 5)
!5798 = !DILocation(line: 1636, column: 20, scope: !5797)
!5799 = !DILocation(line: 1636, column: 12, scope: !5797)
!5800 = !DILocation(line: 1637, column: 11, scope: !5801)
!5801 = distinct !DILexicalBlock(scope: !5797, file: !3, line: 1637, column: 11)
!5802 = !DILocation(line: 1637, column: 17, scope: !5801)
!5803 = !DILocation(line: 1637, column: 11, scope: !5797)
!5804 = !DILocation(line: 1639, column: 4, scope: !5805)
!5805 = distinct !DILexicalBlock(scope: !5801, file: !3, line: 1638, column: 2)
!5806 = !DILocation(line: 1640, column: 4, scope: !5805)
!5807 = !DILocation(line: 1640, column: 10, scope: !5805)
!5808 = !DILocation(line: 1640, column: 18, scope: !5805)
!5809 = !DILocation(line: 1641, column: 28, scope: !5805)
!5810 = !DILocation(line: 1641, column: 4, scope: !5805)
!5811 = !DILocation(line: 1642, column: 2, scope: !5805)
!5812 = !DILocation(line: 1643, column: 5, scope: !5797)
!5813 = !DILocation(line: 1634, column: 40, scope: !5793)
!5814 = !DILocation(line: 1634, column: 3, scope: !5793)
!5815 = distinct !{!5815, !5795, !5816}
!5816 = !DILocation(line: 1643, column: 5, scope: !5788)
!5817 = !DILocation(line: 1644, column: 3, scope: !5749)
!5818 = !DILocation(line: 1646, column: 9, scope: !5749)
!5819 = !DILocation(line: 1646, column: 3, scope: !5749)
!5820 = !DILocation(line: 1648, column: 1, scope: !5749)
!5821 = !DILocalVariable(name: "which", arg: 1, scope: !3413, file: !3, line: 1932, type: !1921)
!5822 = !DILocation(line: 1932, column: 33, scope: !3413)
!5823 = !DILocalVariable(name: "body", arg: 2, scope: !3413, file: !3, line: 1932, type: !1821)
!5824 = !DILocation(line: 1932, column: 45, scope: !3413)
!5825 = !DILocalVariable(name: "priority", arg: 3, scope: !3413, file: !3, line: 1932, type: !1918)
!5826 = !DILocation(line: 1932, column: 55, scope: !3413)
!5827 = !DILocalVariable(name: "which_buf", scope: !3413, file: !3, line: 1935, type: !5828)
!5828 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1921, size: 128, elements: !5829)
!5829 = !{!5830}
!5830 = !DISubrange(count: 16)
!5831 = !DILocation(line: 1935, column: 8, scope: !3413)
!5832 = !DILocalVariable(name: "decl", scope: !3413, file: !3, line: 1936, type: !1821)
!5833 = !DILocation(line: 1936, column: 8, scope: !3413)
!5834 = !DILocalVariable(name: "name", scope: !3413, file: !3, line: 1936, type: !1821)
!5835 = !DILocation(line: 1936, column: 14, scope: !3413)
!5836 = !DILocalVariable(name: "resdecl", scope: !3413, file: !3, line: 1936, type: !1821)
!5837 = !DILocation(line: 1936, column: 20, scope: !3413)
!5838 = !DILocation(line: 1941, column: 12, scope: !3413)
!5839 = !DILocation(line: 1941, column: 37, scope: !3413)
!5840 = !DILocation(line: 1941, column: 44, scope: !3413)
!5841 = !DILocation(line: 1941, column: 61, scope: !3413)
!5842 = !DILocation(line: 1941, column: 3, scope: !3413)
!5843 = !DILocation(line: 1942, column: 34, scope: !3413)
!5844 = !DILocation(line: 1942, column: 10, scope: !3413)
!5845 = !DILocation(line: 1942, column: 8, scope: !3413)
!5846 = !DILocation(line: 1944, column: 10, scope: !3413)
!5847 = !DILocation(line: 1944, column: 8, scope: !3413)
!5848 = !DILocation(line: 1946, column: 27, scope: !3413)
!5849 = !DILocation(line: 1946, column: 25, scope: !3413)
!5850 = !DILocation(line: 1948, column: 13, scope: !3413)
!5851 = !DILocation(line: 1948, column: 11, scope: !3413)
!5852 = !DILocation(line: 1950, column: 3, scope: !3413)
!5853 = !DILocation(line: 1950, column: 29, scope: !3413)
!5854 = !DILocation(line: 1951, column: 24, scope: !3413)
!5855 = !DILocation(line: 1951, column: 3, scope: !3413)
!5856 = !DILocation(line: 1951, column: 22, scope: !3413)
!5857 = !DILocation(line: 1952, column: 28, scope: !3413)
!5858 = !DILocation(line: 1952, column: 3, scope: !3413)
!5859 = !DILocation(line: 1952, column: 26, scope: !3413)
!5860 = !DILocation(line: 1954, column: 29, scope: !3413)
!5861 = !DILocation(line: 1954, column: 3, scope: !3413)
!5862 = !DILocation(line: 1956, column: 3, scope: !3413)
!5863 = !DILocation(line: 1956, column: 22, scope: !3413)
!5864 = !DILocation(line: 1957, column: 3, scope: !3413)
!5865 = !DILocation(line: 1957, column: 20, scope: !3413)
!5866 = !DILocation(line: 1958, column: 3, scope: !3413)
!5867 = !DILocation(line: 1958, column: 26, scope: !3413)
!5868 = !DILocation(line: 1959, column: 3, scope: !3413)
!5869 = !DILocation(line: 1959, column: 49, scope: !3413)
!5870 = !DILocation(line: 1960, column: 28, scope: !3413)
!5871 = !DILocation(line: 1960, column: 3, scope: !3413)
!5872 = !DILocation(line: 1960, column: 26, scope: !3413)
!5873 = !DILocation(line: 1961, column: 16, scope: !5874)
!5874 = distinct !DILexicalBlock(scope: !3413, file: !3, line: 1961, column: 7)
!5875 = !DILocation(line: 1961, column: 8, scope: !5874)
!5876 = !DILocation(line: 1961, column: 7, scope: !3413)
!5877 = !DILocation(line: 1963, column: 7, scope: !5878)
!5878 = distinct !DILexicalBlock(scope: !5874, file: !3, line: 1962, column: 5)
!5879 = !DILocation(line: 1963, column: 26, scope: !5878)
!5880 = !DILocation(line: 1964, column: 7, scope: !5878)
!5881 = !DILocation(line: 1964, column: 30, scope: !5878)
!5882 = !DILocation(line: 1965, column: 5, scope: !5878)
!5883 = !DILocation(line: 1966, column: 3, scope: !3413)
!5884 = !DILocation(line: 1966, column: 27, scope: !3413)
!5885 = !DILocation(line: 1968, column: 25, scope: !3413)
!5886 = !DILocation(line: 1968, column: 3, scope: !3413)
!5887 = !DILocation(line: 1968, column: 23, scope: !3413)
!5888 = !DILocation(line: 1969, column: 3, scope: !3413)
!5889 = !DILocation(line: 1969, column: 35, scope: !3413)
!5890 = !DILocation(line: 1971, column: 33, scope: !3413)
!5891 = !DILocation(line: 1971, column: 3, scope: !3413)
!5892 = !DILocation(line: 1971, column: 31, scope: !3413)
!5893 = !DILocation(line: 1972, column: 30, scope: !3413)
!5894 = !DILocation(line: 1972, column: 3, scope: !3413)
!5895 = !DILocation(line: 1972, column: 9, scope: !3413)
!5896 = !DILocation(line: 1972, column: 28, scope: !3413)
!5897 = !DILocation(line: 1974, column: 11, scope: !3413)
!5898 = !DILocation(line: 1974, column: 3, scope: !3413)
!5899 = !DILocation(line: 1977, column: 7, scope: !5900)
!5900 = distinct !DILexicalBlock(scope: !3413, file: !3, line: 1975, column: 5)
!5901 = !DILocation(line: 1977, column: 38, scope: !5900)
!5902 = !DILocation(line: 1978, column: 34, scope: !5900)
!5903 = !DILocation(line: 1978, column: 40, scope: !5900)
!5904 = !DILocation(line: 1978, column: 7, scope: !5900)
!5905 = !DILocation(line: 1979, column: 7, scope: !5900)
!5906 = !DILocation(line: 1981, column: 7, scope: !5900)
!5907 = !DILocation(line: 1981, column: 37, scope: !5900)
!5908 = !DILocation(line: 1982, column: 34, scope: !5900)
!5909 = !DILocation(line: 1982, column: 40, scope: !5900)
!5910 = !DILocation(line: 1982, column: 7, scope: !5900)
!5911 = !DILocation(line: 1983, column: 7, scope: !5900)
!5912 = !DILocation(line: 1985, column: 7, scope: !5900)
!5913 = !DILocation(line: 1986, column: 5, scope: !5900)
!5914 = !DILocation(line: 1988, column: 27, scope: !3413)
!5915 = !DILocation(line: 1988, column: 3, scope: !3413)
!5916 = !DILocation(line: 1990, column: 28, scope: !3413)
!5917 = !DILocation(line: 1990, column: 3, scope: !3413)
!5918 = !DILocation(line: 1991, column: 41, scope: !3413)
!5919 = !DILocation(line: 1991, column: 28, scope: !3413)
!5920 = !DILocation(line: 1991, column: 3, scope: !3413)
!5921 = !DILocation(line: 1992, column: 3, scope: !3413)
!5922 = !DILocation(line: 1993, column: 1, scope: !3413)
!5923 = distinct !DISubprogram(name: "init_cgraph", scope: !3, file: !3, line: 1996, type: !3192, scopeLine: 1997, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!5924 = !DILocation(line: 1998, column: 22, scope: !5923)
!5925 = !DILocation(line: 1998, column: 20, scope: !5923)
!5926 = !DILocation(line: 1999, column: 1, scope: !5923)
!5927 = distinct !DISubprogram(name: "cgraph_function_versioning", scope: !3, file: !3, line: 2099, type: !5928, scopeLine: 2103, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!5928 = !DISubroutineType(types: !5929)
!5929 = !{!3216, !3216, !5930, !3312, !2702}
!5930 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5931, size: 64)
!5931 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_cgraph_edge_p_heap", file: !378, line: 353, baseType: !5932)
!5932 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_cgraph_edge_p_heap", file: !378, line: 353, size: 128, elements: !5933)
!5933 = !{!5934}
!5934 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !5932, file: !378, line: 353, baseType: !5935, size: 128)
!5935 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_cgraph_edge_p_base", file: !378, line: 352, baseType: !5936)
!5936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_cgraph_edge_p_base", file: !378, line: 352, size: 128, elements: !5937)
!5937 = !{!5938, !5939, !5940}
!5938 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !5936, file: !378, line: 352, baseType: !7, size: 32)
!5939 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !5936, file: !378, line: 352, baseType: !7, size: 32, offset: 32)
!5940 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !5936, file: !378, line: 352, baseType: !5941, size: 64, offset: 64)
!5941 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3409, size: 64, elements: !1922)
!5942 = !DILocalVariable(name: "old_version_node", arg: 1, scope: !5927, file: !3, line: 2099, type: !3216)
!5943 = !DILocation(line: 2099, column: 49, scope: !5927)
!5944 = !DILocalVariable(name: "redirect_callers", arg: 2, scope: !5927, file: !3, line: 2100, type: !5930)
!5945 = !DILocation(line: 2100, column: 33, scope: !5927)
!5946 = !DILocalVariable(name: "tree_map", arg: 3, scope: !5927, file: !3, line: 2101, type: !3312)
!5947 = !DILocation(line: 2101, column: 36, scope: !5927)
!5948 = !DILocalVariable(name: "args_to_skip", arg: 4, scope: !5927, file: !3, line: 2102, type: !2702)
!5949 = !DILocation(line: 2102, column: 15, scope: !5927)
!5950 = !DILocalVariable(name: "old_decl", scope: !5927, file: !3, line: 2104, type: !1821)
!5951 = !DILocation(line: 2104, column: 8, scope: !5927)
!5952 = !DILocation(line: 2104, column: 19, scope: !5927)
!5953 = !DILocation(line: 2104, column: 37, scope: !5927)
!5954 = !DILocalVariable(name: "new_version_node", scope: !5927, file: !3, line: 2105, type: !3216)
!5955 = !DILocation(line: 2105, column: 23, scope: !5927)
!5956 = !DILocalVariable(name: "new_decl", scope: !5927, file: !3, line: 2106, type: !1821)
!5957 = !DILocation(line: 2106, column: 8, scope: !5927)
!5958 = !DILocation(line: 2108, column: 37, scope: !5959)
!5959 = distinct !DILexicalBlock(scope: !5927, file: !3, line: 2108, column: 7)
!5960 = !DILocation(line: 2108, column: 8, scope: !5959)
!5961 = !DILocation(line: 2108, column: 7, scope: !5927)
!5962 = !DILocation(line: 2109, column: 5, scope: !5959)
!5963 = !DILocation(line: 2113, column: 8, scope: !5964)
!5964 = distinct !DILexicalBlock(scope: !5927, file: !3, line: 2113, column: 7)
!5965 = !DILocation(line: 2113, column: 7, scope: !5927)
!5966 = !DILocation(line: 2114, column: 16, scope: !5964)
!5967 = !DILocation(line: 2114, column: 14, scope: !5964)
!5968 = !DILocation(line: 2114, column: 5, scope: !5964)
!5969 = !DILocation(line: 2116, column: 47, scope: !5964)
!5970 = !DILocation(line: 2116, column: 57, scope: !5964)
!5971 = !DILocation(line: 2116, column: 16, scope: !5964)
!5972 = !DILocation(line: 2116, column: 14, scope: !5964)
!5973 = !DILocation(line: 2121, column: 38, scope: !5927)
!5974 = !DILocation(line: 2121, column: 56, scope: !5927)
!5975 = !DILocation(line: 2122, column: 10, scope: !5927)
!5976 = !DILocation(line: 2121, column: 5, scope: !5927)
!5977 = !DILocation(line: 2120, column: 20, scope: !5927)
!5978 = !DILocation(line: 2125, column: 29, scope: !5927)
!5979 = !DILocation(line: 2125, column: 39, scope: !5927)
!5980 = !DILocation(line: 2125, column: 49, scope: !5927)
!5981 = !DILocation(line: 2125, column: 66, scope: !5927)
!5982 = !DILocation(line: 2125, column: 3, scope: !5927)
!5983 = !DILocation(line: 2132, column: 27, scope: !5927)
!5984 = !DILocation(line: 2132, column: 45, scope: !5927)
!5985 = !DILocation(line: 2132, column: 3, scope: !5927)
!5986 = !DILocation(line: 2133, column: 3, scope: !5927)
!5987 = !DILocation(line: 2133, column: 43, scope: !5927)
!5988 = !DILocation(line: 2134, column: 3, scope: !5927)
!5989 = !DILocation(line: 2134, column: 21, scope: !5927)
!5990 = !DILocation(line: 2134, column: 27, scope: !5927)
!5991 = !DILocation(line: 2134, column: 46, scope: !5927)
!5992 = !DILocation(line: 2135, column: 3, scope: !5927)
!5993 = !DILocation(line: 2135, column: 21, scope: !5927)
!5994 = !DILocation(line: 2135, column: 27, scope: !5927)
!5995 = !DILocation(line: 2135, column: 33, scope: !5927)
!5996 = !DILocation(line: 2136, column: 3, scope: !5927)
!5997 = !DILocation(line: 2136, column: 21, scope: !5927)
!5998 = !DILocation(line: 2136, column: 29, scope: !5927)
!5999 = !DILocation(line: 2139, column: 21, scope: !5927)
!6000 = !DILocation(line: 2139, column: 3, scope: !5927)
!6001 = !DILocation(line: 2141, column: 41, scope: !5927)
!6002 = !DILocation(line: 2141, column: 3, scope: !5927)
!6003 = !DILocation(line: 2142, column: 10, scope: !5927)
!6004 = !DILocation(line: 2142, column: 3, scope: !5927)
!6005 = !DILocation(line: 2143, column: 1, scope: !5927)
!6006 = distinct !DISubprogram(name: "cgraph_copy_node_for_versioning", scope: !3, file: !3, line: 2030, type: !6007, scopeLine: 2033, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!6007 = !DISubroutineType(types: !6008)
!6008 = !{!3216, !3216, !1821, !5930}
!6009 = !DILocalVariable(name: "old_version", arg: 1, scope: !6006, file: !3, line: 2030, type: !3216)
!6010 = !DILocation(line: 2030, column: 54, scope: !6006)
!6011 = !DILocalVariable(name: "new_decl", arg: 2, scope: !6006, file: !3, line: 2031, type: !1821)
!6012 = !DILocation(line: 2031, column: 11, scope: !6006)
!6013 = !DILocalVariable(name: "redirect_callers", arg: 3, scope: !6006, file: !3, line: 2032, type: !5930)
!6014 = !DILocation(line: 2032, column: 31, scope: !6006)
!6015 = !DILocalVariable(name: "new_version", scope: !6006, file: !3, line: 2034, type: !3216)
!6016 = !DILocation(line: 2034, column: 24, scope: !6006)
!6017 = !DILocalVariable(name: "e", scope: !6006, file: !3, line: 2035, type: !3221)
!6018 = !DILocation(line: 2035, column: 24, scope: !6006)
!6019 = !DILocalVariable(name: "new_e", scope: !6006, file: !3, line: 2035, type: !3221)
!6020 = !DILocation(line: 2035, column: 28, scope: !6006)
!6021 = !DILocalVariable(name: "next_callee", scope: !6006, file: !3, line: 2036, type: !3221)
!6022 = !DILocation(line: 2036, column: 24, scope: !6006)
!6023 = !DILocalVariable(name: "i", scope: !6006, file: !3, line: 2037, type: !7)
!6024 = !DILocation(line: 2037, column: 13, scope: !6006)
!6025 = !DILocation(line: 2039, column: 4, scope: !6006)
!6026 = !DILocation(line: 2041, column: 31, scope: !6006)
!6027 = !DILocation(line: 2041, column: 18, scope: !6006)
!6028 = !DILocation(line: 2041, column: 16, scope: !6006)
!6029 = !DILocation(line: 2043, column: 4, scope: !6006)
!6030 = !DILocation(line: 2043, column: 17, scope: !6006)
!6031 = !DILocation(line: 2043, column: 26, scope: !6006)
!6032 = !DILocation(line: 2044, column: 4, scope: !6006)
!6033 = !DILocation(line: 2044, column: 17, scope: !6006)
!6034 = !DILocation(line: 2044, column: 25, scope: !6006)
!6035 = !DILocation(line: 2044, column: 38, scope: !6006)
!6036 = !DILocation(line: 2045, column: 4, scope: !6006)
!6037 = !DILocation(line: 2045, column: 17, scope: !6006)
!6038 = !DILocation(line: 2045, column: 26, scope: !6006)
!6039 = !DILocation(line: 2045, column: 39, scope: !6006)
!6040 = !DILocation(line: 2046, column: 4, scope: !6006)
!6041 = !DILocation(line: 2046, column: 17, scope: !6006)
!6042 = !DILocation(line: 2046, column: 23, scope: !6006)
!6043 = !DILocation(line: 2046, column: 36, scope: !6006)
!6044 = !DILocation(line: 2047, column: 4, scope: !6006)
!6045 = !DILocation(line: 2047, column: 17, scope: !6006)
!6046 = !DILocation(line: 2047, column: 27, scope: !6006)
!6047 = !DILocation(line: 2048, column: 25, scope: !6006)
!6048 = !DILocation(line: 2048, column: 38, scope: !6006)
!6049 = !DILocation(line: 2048, column: 4, scope: !6006)
!6050 = !DILocation(line: 2048, column: 17, scope: !6006)
!6051 = !DILocation(line: 2048, column: 23, scope: !6006)
!6052 = !DILocation(line: 2052, column: 13, scope: !6053)
!6053 = distinct !DILexicalBlock(scope: !6006, file: !3, line: 2052, column: 4)
!6054 = !DILocation(line: 2052, column: 26, scope: !6053)
!6055 = !DILocation(line: 2052, column: 11, scope: !6053)
!6056 = !DILocation(line: 2052, column: 9, scope: !6053)
!6057 = !DILocation(line: 2052, column: 34, scope: !6058)
!6058 = distinct !DILexicalBlock(scope: !6053, file: !3, line: 2052, column: 4)
!6059 = !DILocation(line: 2052, column: 4, scope: !6053)
!6060 = !DILocation(line: 2054, column: 35, scope: !6061)
!6061 = distinct !DILexicalBlock(scope: !6058, file: !3, line: 2053, column: 6)
!6062 = !DILocation(line: 2054, column: 38, scope: !6061)
!6063 = !DILocation(line: 2054, column: 51, scope: !6061)
!6064 = !DILocation(line: 2054, column: 54, scope: !6061)
!6065 = !DILocation(line: 2055, column: 7, scope: !6061)
!6066 = !DILocation(line: 2055, column: 10, scope: !6061)
!6067 = !DILocation(line: 2055, column: 27, scope: !6061)
!6068 = !DILocation(line: 2055, column: 30, scope: !6061)
!6069 = !DILocation(line: 2056, column: 7, scope: !6061)
!6070 = !DILocation(line: 2056, column: 10, scope: !6061)
!6071 = !DILocation(line: 2054, column: 16, scope: !6061)
!6072 = !DILocation(line: 2054, column: 14, scope: !6061)
!6073 = !DILocation(line: 2057, column: 23, scope: !6061)
!6074 = !DILocation(line: 2057, column: 26, scope: !6061)
!6075 = !DILocation(line: 2057, column: 8, scope: !6061)
!6076 = !DILocation(line: 2057, column: 15, scope: !6061)
!6077 = !DILocation(line: 2057, column: 21, scope: !6061)
!6078 = !DILocation(line: 2058, column: 6, scope: !6061)
!6079 = !DILocation(line: 2052, column: 39, scope: !6058)
!6080 = !DILocation(line: 2052, column: 42, scope: !6058)
!6081 = !DILocation(line: 2052, column: 38, scope: !6058)
!6082 = !DILocation(line: 2052, column: 4, scope: !6058)
!6083 = distinct !{!6083, !6059, !6084}
!6084 = !DILocation(line: 2058, column: 6, scope: !6053)
!6085 = !DILocation(line: 2064, column: 13, scope: !6086)
!6086 = distinct !DILexicalBlock(scope: !6006, file: !3, line: 2064, column: 4)
!6087 = !DILocation(line: 2064, column: 26, scope: !6086)
!6088 = !DILocation(line: 2064, column: 11, scope: !6086)
!6089 = !DILocation(line: 2064, column: 9, scope: !6086)
!6090 = !DILocation(line: 2064, column: 36, scope: !6091)
!6091 = distinct !DILexicalBlock(scope: !6086, file: !3, line: 2064, column: 4)
!6092 = !DILocation(line: 2064, column: 4, scope: !6086)
!6093 = !DILocation(line: 2066, column: 22, scope: !6094)
!6094 = distinct !DILexicalBlock(scope: !6091, file: !3, line: 2065, column: 6)
!6095 = !DILocation(line: 2066, column: 25, scope: !6094)
!6096 = !DILocation(line: 2066, column: 20, scope: !6094)
!6097 = !DILocation(line: 2067, column: 12, scope: !6098)
!6098 = distinct !DILexicalBlock(scope: !6094, file: !3, line: 2067, column: 12)
!6099 = !DILocation(line: 2067, column: 15, scope: !6098)
!6100 = !DILocation(line: 2067, column: 25, scope: !6098)
!6101 = !DILocation(line: 2067, column: 22, scope: !6098)
!6102 = !DILocation(line: 2067, column: 12, scope: !6094)
!6103 = !DILocation(line: 2068, column: 32, scope: !6098)
!6104 = !DILocation(line: 2068, column: 35, scope: !6098)
!6105 = !DILocation(line: 2068, column: 3, scope: !6098)
!6106 = !DILocation(line: 2070, column: 13, scope: !6107)
!6107 = distinct !DILexicalBlock(scope: !6094, file: !3, line: 2070, column: 12)
!6108 = !DILocation(line: 2070, column: 12, scope: !6094)
!6109 = !DILocation(line: 2071, column: 3, scope: !6107)
!6110 = !DILocation(line: 2072, column: 6, scope: !6094)
!6111 = !DILocation(line: 2064, column: 43, scope: !6091)
!6112 = !DILocation(line: 2064, column: 41, scope: !6091)
!6113 = !DILocation(line: 2064, column: 4, scope: !6091)
!6114 = distinct !{!6114, !6092, !6115}
!6115 = !DILocation(line: 2072, column: 6, scope: !6086)
!6116 = !DILocation(line: 2073, column: 11, scope: !6117)
!6117 = distinct !DILexicalBlock(scope: !6006, file: !3, line: 2073, column: 4)
!6118 = !DILocation(line: 2073, column: 9, scope: !6117)
!6119 = !DILocation(line: 2073, column: 16, scope: !6120)
!6120 = distinct !DILexicalBlock(scope: !6117, file: !3, line: 2073, column: 4)
!6121 = !DILocation(line: 2073, column: 4, scope: !6117)
!6122 = !DILocation(line: 2077, column: 37, scope: !6123)
!6123 = distinct !DILexicalBlock(scope: !6120, file: !3, line: 2074, column: 6)
!6124 = !DILocation(line: 2077, column: 40, scope: !6123)
!6125 = !DILocation(line: 2077, column: 8, scope: !6123)
!6126 = !DILocation(line: 2078, column: 6, scope: !6123)
!6127 = !DILocation(line: 2073, column: 70, scope: !6120)
!6128 = !DILocation(line: 2073, column: 4, scope: !6120)
!6129 = distinct !{!6129, !6121, !6130}
!6130 = !DILocation(line: 2078, column: 6, scope: !6117)
!6131 = !DILocation(line: 2080, column: 11, scope: !6006)
!6132 = !DILocation(line: 2080, column: 4, scope: !6006)
!6133 = distinct !DISubprogram(name: "update_call_expr", scope: !3, file: !3, line: 2006, type: !3361, scopeLine: 2007, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!6134 = !DILocalVariable(name: "new_version", arg: 1, scope: !6133, file: !3, line: 2006, type: !3216)
!6135 = !DILocation(line: 2006, column: 39, scope: !6133)
!6136 = !DILocalVariable(name: "e", scope: !6133, file: !3, line: 2008, type: !3221)
!6137 = !DILocation(line: 2008, column: 23, scope: !6133)
!6138 = !DILocation(line: 2010, column: 3, scope: !6133)
!6139 = !DILocation(line: 2013, column: 12, scope: !6140)
!6140 = distinct !DILexicalBlock(scope: !6133, file: !3, line: 2013, column: 3)
!6141 = !DILocation(line: 2013, column: 25, scope: !6140)
!6142 = !DILocation(line: 2013, column: 10, scope: !6140)
!6143 = !DILocation(line: 2013, column: 8, scope: !6140)
!6144 = !DILocation(line: 2013, column: 34, scope: !6145)
!6145 = distinct !DILexicalBlock(scope: !6140, file: !3, line: 2013, column: 3)
!6146 = !DILocation(line: 2013, column: 3, scope: !6140)
!6147 = !DILocalVariable(name: "inner_function", scope: !6148, file: !3, line: 2015, type: !2574)
!6148 = distinct !DILexicalBlock(scope: !6145, file: !3, line: 2014, column: 5)
!6149 = !DILocation(line: 2015, column: 24, scope: !6148)
!6150 = !DILocation(line: 2015, column: 41, scope: !6148)
!6151 = !DILocation(line: 2016, column: 31, scope: !6148)
!6152 = !DILocation(line: 2016, column: 34, scope: !6148)
!6153 = !DILocation(line: 2016, column: 45, scope: !6148)
!6154 = !DILocation(line: 2016, column: 58, scope: !6148)
!6155 = !DILocation(line: 2016, column: 7, scope: !6148)
!6156 = !DILocation(line: 2017, column: 31, scope: !6148)
!6157 = !DILocation(line: 2017, column: 47, scope: !6148)
!6158 = !DILocation(line: 2017, column: 50, scope: !6148)
!6159 = !DILocation(line: 2017, column: 7, scope: !6148)
!6160 = !DILocation(line: 2018, column: 5, scope: !6148)
!6161 = !DILocation(line: 2013, column: 41, scope: !6145)
!6162 = !DILocation(line: 2013, column: 44, scope: !6145)
!6163 = !DILocation(line: 2013, column: 39, scope: !6145)
!6164 = !DILocation(line: 2013, column: 3, scope: !6145)
!6165 = distinct !{!6165, !6146, !6166}
!6166 = !DILocation(line: 2018, column: 5, scope: !6140)
!6167 = !DILocation(line: 2019, column: 1, scope: !6133)
!6168 = distinct !DISubprogram(name: "save_inline_function_body", scope: !3, file: !3, line: 2148, type: !6169, scopeLine: 2149, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!6169 = !DISubroutineType(types: !6170)
!6170 = !{!3216, !3216}
!6171 = !DILocalVariable(name: "node", arg: 1, scope: !6168, file: !3, line: 2148, type: !3216)
!6172 = !DILocation(line: 2148, column: 48, scope: !6168)
!6173 = !DILocalVariable(name: "first_clone", scope: !6168, file: !3, line: 2150, type: !3216)
!6174 = !DILocation(line: 2150, column: 23, scope: !6168)
!6175 = !DILocalVariable(name: "n", scope: !6168, file: !3, line: 2150, type: !3216)
!6176 = !DILocation(line: 2150, column: 37, scope: !6168)
!6177 = !DILocation(line: 2152, column: 3, scope: !6168)
!6178 = !DILocation(line: 2154, column: 26, scope: !6168)
!6179 = !DILocation(line: 2154, column: 3, scope: !6168)
!6180 = !DILocation(line: 2156, column: 17, scope: !6168)
!6181 = !DILocation(line: 2156, column: 23, scope: !6168)
!6182 = !DILocation(line: 2156, column: 15, scope: !6168)
!6183 = !DILocation(line: 2158, column: 23, scope: !6168)
!6184 = !DILocation(line: 2158, column: 3, scope: !6168)
!6185 = !DILocation(line: 2158, column: 16, scope: !6168)
!6186 = !DILocation(line: 2158, column: 21, scope: !6168)
!6187 = !DILocation(line: 2159, column: 36, scope: !6168)
!6188 = !DILocation(line: 2159, column: 3, scope: !6168)
!6189 = !DILocation(line: 2160, column: 3, scope: !6168)
!6190 = !DILocation(line: 2161, column: 7, scope: !6191)
!6191 = distinct !DILexicalBlock(scope: !6168, file: !3, line: 2161, column: 7)
!6192 = !DILocation(line: 2161, column: 20, scope: !6191)
!6193 = !DILocation(line: 2161, column: 7, scope: !6168)
!6194 = !DILocation(line: 2163, column: 16, scope: !6195)
!6195 = distinct !DILexicalBlock(scope: !6196, file: !3, line: 2163, column: 7)
!6196 = distinct !DILexicalBlock(scope: !6191, file: !3, line: 2162, column: 5)
!6197 = !DILocation(line: 2163, column: 29, scope: !6195)
!6198 = !DILocation(line: 2163, column: 14, scope: !6195)
!6199 = !DILocation(line: 2163, column: 12, scope: !6195)
!6200 = !DILocation(line: 2163, column: 49, scope: !6201)
!6201 = distinct !DILexicalBlock(scope: !6195, file: !3, line: 2163, column: 7)
!6202 = !DILocation(line: 2163, column: 52, scope: !6201)
!6203 = !DILocation(line: 2163, column: 7, scope: !6195)
!6204 = !DILocation(line: 2164, column: 23, scope: !6201)
!6205 = !DILocation(line: 2164, column: 9, scope: !6201)
!6206 = !DILocation(line: 2164, column: 12, scope: !6201)
!6207 = !DILocation(line: 2164, column: 21, scope: !6201)
!6208 = !DILocation(line: 2163, column: 76, scope: !6201)
!6209 = !DILocation(line: 2163, column: 79, scope: !6201)
!6210 = !DILocation(line: 2163, column: 74, scope: !6201)
!6211 = !DILocation(line: 2163, column: 7, scope: !6201)
!6212 = distinct !{!6212, !6203, !6213}
!6213 = !DILocation(line: 2164, column: 23, scope: !6195)
!6214 = !DILocation(line: 2165, column: 21, scope: !6196)
!6215 = !DILocation(line: 2165, column: 7, scope: !6196)
!6216 = !DILocation(line: 2165, column: 10, scope: !6196)
!6217 = !DILocation(line: 2165, column: 19, scope: !6196)
!6218 = !DILocation(line: 2166, column: 31, scope: !6196)
!6219 = !DILocation(line: 2166, column: 44, scope: !6196)
!6220 = !DILocation(line: 2166, column: 7, scope: !6196)
!6221 = !DILocation(line: 2166, column: 10, scope: !6196)
!6222 = !DILocation(line: 2166, column: 29, scope: !6196)
!6223 = !DILocation(line: 2167, column: 11, scope: !6224)
!6224 = distinct !DILexicalBlock(scope: !6196, file: !3, line: 2167, column: 11)
!6225 = !DILocation(line: 2167, column: 24, scope: !6224)
!6226 = !DILocation(line: 2167, column: 11, scope: !6196)
!6227 = !DILocation(line: 2168, column: 51, scope: !6224)
!6228 = !DILocation(line: 2168, column: 9, scope: !6224)
!6229 = !DILocation(line: 2168, column: 22, scope: !6224)
!6230 = !DILocation(line: 2168, column: 30, scope: !6224)
!6231 = !DILocation(line: 2168, column: 49, scope: !6224)
!6232 = !DILocation(line: 2169, column: 29, scope: !6196)
!6233 = !DILocation(line: 2169, column: 42, scope: !6196)
!6234 = !DILocation(line: 2169, column: 7, scope: !6196)
!6235 = !DILocation(line: 2169, column: 20, scope: !6196)
!6236 = !DILocation(line: 2169, column: 27, scope: !6196)
!6237 = !DILocation(line: 2170, column: 7, scope: !6196)
!6238 = !DILocation(line: 2170, column: 20, scope: !6196)
!6239 = !DILocation(line: 2170, column: 40, scope: !6196)
!6240 = !DILocation(line: 2170, column: 59, scope: !6196)
!6241 = !DILocation(line: 2171, column: 7, scope: !6196)
!6242 = !DILocation(line: 2171, column: 20, scope: !6196)
!6243 = !DILocation(line: 2171, column: 39, scope: !6196)
!6244 = !DILocation(line: 2172, column: 7, scope: !6196)
!6245 = !DILocation(line: 2173, column: 5, scope: !6196)
!6246 = !DILocation(line: 2174, column: 3, scope: !6168)
!6247 = !DILocation(line: 2174, column: 16, scope: !6168)
!6248 = !DILocation(line: 2174, column: 25, scope: !6168)
!6249 = !DILocation(line: 2175, column: 3, scope: !6168)
!6250 = !DILocation(line: 2175, column: 9, scope: !6168)
!6251 = !DILocation(line: 2175, column: 16, scope: !6168)
!6252 = !DILocation(line: 2177, column: 7, scope: !6253)
!6253 = distinct !DILexicalBlock(scope: !6168, file: !3, line: 2177, column: 7)
!6254 = !DILocation(line: 2177, column: 20, scope: !6253)
!6255 = !DILocation(line: 2177, column: 7, scope: !6168)
!6256 = !DILocation(line: 2178, column: 14, scope: !6257)
!6257 = distinct !DILexicalBlock(scope: !6253, file: !3, line: 2178, column: 5)
!6258 = !DILocation(line: 2178, column: 27, scope: !6257)
!6259 = !DILocation(line: 2178, column: 12, scope: !6257)
!6260 = !DILocation(line: 2178, column: 10, scope: !6257)
!6261 = !DILocation(line: 2178, column: 35, scope: !6262)
!6262 = distinct !DILexicalBlock(scope: !6257, file: !3, line: 2178, column: 5)
!6263 = !DILocation(line: 2178, column: 40, scope: !6262)
!6264 = !DILocation(line: 2178, column: 37, scope: !6262)
!6265 = !DILocation(line: 2178, column: 5, scope: !6257)
!6266 = !DILocation(line: 2180, column: 9, scope: !6267)
!6267 = distinct !DILexicalBlock(scope: !6262, file: !3, line: 2179, column: 7)
!6268 = !DILocation(line: 2181, column: 12, scope: !6267)
!6269 = !DILocation(line: 2181, column: 25, scope: !6267)
!6270 = !DILocation(line: 2181, column: 2, scope: !6267)
!6271 = !DILocation(line: 2181, column: 5, scope: !6267)
!6272 = !DILocation(line: 2181, column: 10, scope: !6267)
!6273 = !DILocation(line: 2182, column: 6, scope: !6274)
!6274 = distinct !DILexicalBlock(scope: !6267, file: !3, line: 2182, column: 6)
!6275 = !DILocation(line: 2182, column: 9, scope: !6274)
!6276 = !DILocation(line: 2182, column: 6, scope: !6267)
!6277 = !DILocation(line: 2183, column: 8, scope: !6274)
!6278 = !DILocation(line: 2183, column: 11, scope: !6274)
!6279 = !DILocation(line: 2183, column: 6, scope: !6274)
!6280 = !DILocation(line: 2183, column: 4, scope: !6274)
!6281 = !DILocation(line: 2184, column: 11, scope: !6282)
!6282 = distinct !DILexicalBlock(scope: !6274, file: !3, line: 2184, column: 11)
!6283 = !DILocation(line: 2184, column: 14, scope: !6282)
!6284 = !DILocation(line: 2184, column: 11, scope: !6274)
!6285 = !DILocation(line: 2185, column: 8, scope: !6282)
!6286 = !DILocation(line: 2185, column: 11, scope: !6282)
!6287 = !DILocation(line: 2185, column: 6, scope: !6282)
!6288 = !DILocation(line: 2185, column: 4, scope: !6282)
!6289 = !DILocation(line: 2188, column: 6, scope: !6290)
!6290 = distinct !DILexicalBlock(scope: !6282, file: !3, line: 2187, column: 4)
!6291 = !DILocation(line: 2188, column: 13, scope: !6290)
!6292 = !DILocation(line: 2188, column: 18, scope: !6290)
!6293 = !DILocation(line: 2188, column: 15, scope: !6290)
!6294 = !DILocation(line: 2188, column: 30, scope: !6290)
!6295 = !DILocation(line: 2188, column: 34, scope: !6290)
!6296 = !DILocation(line: 2188, column: 37, scope: !6290)
!6297 = !DILocation(line: 2188, column: 33, scope: !6290)
!6298 = !DILocation(line: 0, scope: !6290)
!6299 = !DILocation(line: 2189, column: 12, scope: !6290)
!6300 = !DILocation(line: 2189, column: 15, scope: !6290)
!6301 = !DILocation(line: 2189, column: 10, scope: !6290)
!6302 = distinct !{!6302, !6289, !6300}
!6303 = !DILocation(line: 2190, column: 10, scope: !6304)
!6304 = distinct !DILexicalBlock(scope: !6290, file: !3, line: 2190, column: 10)
!6305 = !DILocation(line: 2190, column: 15, scope: !6304)
!6306 = !DILocation(line: 2190, column: 12, scope: !6304)
!6307 = !DILocation(line: 2190, column: 10, scope: !6290)
!6308 = !DILocation(line: 2191, column: 12, scope: !6304)
!6309 = !DILocation(line: 2191, column: 15, scope: !6304)
!6310 = !DILocation(line: 2191, column: 10, scope: !6304)
!6311 = !DILocation(line: 2191, column: 8, scope: !6304)
!6312 = !DILocation(line: 2178, column: 5, scope: !6262)
!6313 = distinct !{!6313, !6265, !6314}
!6314 = !DILocation(line: 2193, column: 7, scope: !6257)
!6315 = !DILocation(line: 2196, column: 29, scope: !6168)
!6316 = !DILocation(line: 2196, column: 35, scope: !6168)
!6317 = !DILocation(line: 2196, column: 41, scope: !6168)
!6318 = !DILocation(line: 2196, column: 54, scope: !6168)
!6319 = !DILocation(line: 2196, column: 3, scope: !6168)
!6320 = !DILocation(line: 2198, column: 3, scope: !6168)
!6321 = !DILocation(line: 2198, column: 37, scope: !6168)
!6322 = !DILocation(line: 2199, column: 3, scope: !6168)
!6323 = !DILocation(line: 2199, column: 41, scope: !6168)
!6324 = !DILocation(line: 2200, column: 3, scope: !6168)
!6325 = !DILocation(line: 2200, column: 35, scope: !6168)
!6326 = !DILocation(line: 2201, column: 3, scope: !6168)
!6327 = !DILocation(line: 2201, column: 35, scope: !6168)
!6328 = !DILocation(line: 2202, column: 3, scope: !6168)
!6329 = !DILocation(line: 2204, column: 3, scope: !6168)
!6330 = !DILocation(line: 2204, column: 16, scope: !6168)
!6331 = !DILocation(line: 2204, column: 40, scope: !6168)
!6332 = !DILocation(line: 2209, column: 10, scope: !6168)
!6333 = !DILocation(line: 2209, column: 3, scope: !6168)
!6334 = distinct !DISubprogram(name: "cgraph_lower_function", scope: !3, file: !3, line: 504, type: !3361, scopeLine: 505, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!6335 = !DILocalVariable(name: "node", arg: 1, scope: !6334, file: !3, line: 504, type: !3216)
!6336 = !DILocation(line: 504, column: 44, scope: !6334)
!6337 = !DILocation(line: 506, column: 7, scope: !6338)
!6338 = distinct !DILexicalBlock(scope: !6334, file: !3, line: 506, column: 7)
!6339 = !DILocation(line: 506, column: 13, scope: !6338)
!6340 = !DILocation(line: 506, column: 7, scope: !6334)
!6341 = !DILocation(line: 507, column: 5, scope: !6338)
!6342 = !DILocation(line: 509, column: 7, scope: !6343)
!6343 = distinct !DILexicalBlock(scope: !6334, file: !3, line: 509, column: 7)
!6344 = !DILocation(line: 509, column: 13, scope: !6343)
!6345 = !DILocation(line: 509, column: 7, scope: !6334)
!6346 = !DILocation(line: 510, column: 29, scope: !6343)
!6347 = !DILocation(line: 510, column: 35, scope: !6343)
!6348 = !DILocation(line: 510, column: 5, scope: !6343)
!6349 = !DILocation(line: 511, column: 3, scope: !6334)
!6350 = !DILocation(line: 513, column: 25, scope: !6334)
!6351 = !DILocation(line: 513, column: 31, scope: !6334)
!6352 = !DILocation(line: 513, column: 3, scope: !6334)
!6353 = !DILocation(line: 514, column: 3, scope: !6334)
!6354 = !DILocation(line: 514, column: 9, scope: !6334)
!6355 = !DILocation(line: 514, column: 17, scope: !6334)
!6356 = !DILocation(line: 515, column: 1, scope: !6334)
!6357 = distinct !DISubprogram(name: "VEC_ipa_opt_pass_heap_free", scope: !2576, file: !2576, line: 177, type: !6358, scopeLine: 177, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!6358 = !DISubroutineType(types: !6359)
!6359 = !{null, !6360}
!6360 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3259, size: 64)
!6361 = !DILocalVariable(name: "vec_", arg: 1, scope: !6357, file: !2576, line: 177, type: !6360)
!6362 = !DILocation(line: 177, column: 1, scope: !6357)
!6363 = !DILocation(line: 177, column: 1, scope: !6364)
!6364 = distinct !DILexicalBlock(scope: !6357, file: !2576, line: 177, column: 1)
!6365 = distinct !DISubprogram(name: "cgraph_redirect_edge_call_stmt_to_callee", scope: !3, file: !3, line: 2246, type: !6366, scopeLine: 2247, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!6366 = !DISubroutineType(types: !6367)
!6367 = !{!2152, !3221}
!6368 = !DILocalVariable(name: "e", arg: 1, scope: !6365, file: !3, line: 2246, type: !3221)
!6369 = !DILocation(line: 2246, column: 63, scope: !6365)
!6370 = !DILocalVariable(name: "decl", scope: !6365, file: !3, line: 2248, type: !1821)
!6371 = !DILocation(line: 2248, column: 8, scope: !6365)
!6372 = !DILocation(line: 2248, column: 35, scope: !6365)
!6373 = !DILocation(line: 2248, column: 38, scope: !6365)
!6374 = !DILocation(line: 2248, column: 15, scope: !6365)
!6375 = !DILocalVariable(name: "new_stmt", scope: !6365, file: !3, line: 2249, type: !2152)
!6376 = !DILocation(line: 2249, column: 10, scope: !6365)
!6377 = !DILocalVariable(name: "gsi", scope: !6365, file: !3, line: 2250, type: !3984)
!6378 = !DILocation(line: 2250, column: 24, scope: !6365)
!6379 = !DILocation(line: 2252, column: 8, scope: !6380)
!6380 = distinct !DILexicalBlock(scope: !6365, file: !3, line: 2252, column: 7)
!6381 = !DILocation(line: 2252, column: 13, scope: !6380)
!6382 = !DILocation(line: 2252, column: 16, scope: !6380)
!6383 = !DILocation(line: 2252, column: 24, scope: !6380)
!6384 = !DILocation(line: 2252, column: 27, scope: !6380)
!6385 = !DILocation(line: 2252, column: 35, scope: !6380)
!6386 = !DILocation(line: 2252, column: 21, scope: !6380)
!6387 = !DILocation(line: 2254, column: 7, scope: !6380)
!6388 = !DILocation(line: 2254, column: 27, scope: !6380)
!6389 = !DILocation(line: 2254, column: 10, scope: !6380)
!6390 = !DILocation(line: 2254, column: 53, scope: !6380)
!6391 = !DILocation(line: 2254, column: 56, scope: !6380)
!6392 = !DILocation(line: 2254, column: 64, scope: !6380)
!6393 = !DILocation(line: 2254, column: 36, scope: !6380)
!6394 = !DILocation(line: 2254, column: 33, scope: !6380)
!6395 = !DILocation(line: 2252, column: 7, scope: !6365)
!6396 = !DILocation(line: 2255, column: 12, scope: !6380)
!6397 = !DILocation(line: 2255, column: 15, scope: !6380)
!6398 = !DILocation(line: 2255, column: 5, scope: !6380)
!6399 = !DILocation(line: 2257, column: 7, scope: !6400)
!6400 = distinct !DILexicalBlock(scope: !6365, file: !3, line: 2257, column: 7)
!6401 = !DILocation(line: 2257, column: 7, scope: !6365)
!6402 = !DILocation(line: 2259, column: 16, scope: !6403)
!6403 = distinct !DILexicalBlock(scope: !6400, file: !3, line: 2258, column: 5)
!6404 = !DILocation(line: 2260, column: 27, scope: !6403)
!6405 = !DILocation(line: 2260, column: 30, scope: !6403)
!6406 = !DILocation(line: 2260, column: 9, scope: !6403)
!6407 = !DILocation(line: 2260, column: 39, scope: !6403)
!6408 = !DILocation(line: 2260, column: 42, scope: !6403)
!6409 = !DILocation(line: 2260, column: 50, scope: !6403)
!6410 = !DILocation(line: 2261, column: 27, scope: !6403)
!6411 = !DILocation(line: 2261, column: 30, scope: !6403)
!6412 = !DILocation(line: 2261, column: 9, scope: !6403)
!6413 = !DILocation(line: 2261, column: 39, scope: !6403)
!6414 = !DILocation(line: 2261, column: 42, scope: !6403)
!6415 = !DILocation(line: 2261, column: 50, scope: !6403)
!6416 = !DILocation(line: 2259, column: 7, scope: !6403)
!6417 = !DILocation(line: 2262, column: 26, scope: !6403)
!6418 = !DILocation(line: 2262, column: 44, scope: !6403)
!6419 = !DILocation(line: 2262, column: 47, scope: !6403)
!6420 = !DILocation(line: 2262, column: 61, scope: !6403)
!6421 = !DILocation(line: 2262, column: 7, scope: !6403)
!6422 = !DILocation(line: 2263, column: 5, scope: !6403)
!6423 = !DILocation(line: 2265, column: 7, scope: !6424)
!6424 = distinct !DILexicalBlock(scope: !6365, file: !3, line: 2265, column: 7)
!6425 = !DILocation(line: 2265, column: 10, scope: !6424)
!6426 = !DILocation(line: 2265, column: 18, scope: !6424)
!6427 = !DILocation(line: 2265, column: 24, scope: !6424)
!6428 = !DILocation(line: 2265, column: 7, scope: !6365)
!6429 = !DILocation(line: 2266, column: 44, scope: !6424)
!6430 = !DILocation(line: 2266, column: 47, scope: !6424)
!6431 = !DILocation(line: 2267, column: 12, scope: !6424)
!6432 = !DILocation(line: 2267, column: 15, scope: !6424)
!6433 = !DILocation(line: 2267, column: 23, scope: !6424)
!6434 = !DILocation(line: 2267, column: 29, scope: !6424)
!6435 = !DILocation(line: 2266, column: 16, scope: !6424)
!6436 = !DILocation(line: 2266, column: 14, scope: !6424)
!6437 = !DILocation(line: 2266, column: 5, scope: !6424)
!6438 = !DILocation(line: 2269, column: 16, scope: !6424)
!6439 = !DILocation(line: 2269, column: 19, scope: !6424)
!6440 = !DILocation(line: 2269, column: 14, scope: !6424)
!6441 = !DILocation(line: 2270, column: 20, scope: !6442)
!6442 = distinct !DILexicalBlock(scope: !6365, file: !3, line: 2270, column: 7)
!6443 = !DILocation(line: 2270, column: 7, scope: !6442)
!6444 = !DILocation(line: 2271, column: 7, scope: !6442)
!6445 = !DILocation(line: 2271, column: 10, scope: !6442)
!6446 = !DILocation(line: 2271, column: 45, scope: !6442)
!6447 = !DILocation(line: 2270, column: 7, scope: !6365)
!6448 = !DILocation(line: 2272, column: 50, scope: !6442)
!6449 = !DILocation(line: 2272, column: 5, scope: !6442)
!6450 = !DILocation(line: 2272, column: 48, scope: !6442)
!6451 = !DILocation(line: 2273, column: 27, scope: !6365)
!6452 = !DILocation(line: 2273, column: 37, scope: !6365)
!6453 = !DILocation(line: 2273, column: 40, scope: !6365)
!6454 = !DILocation(line: 2273, column: 48, scope: !6365)
!6455 = !DILocation(line: 2273, column: 3, scope: !6365)
!6456 = !DILocation(line: 2275, column: 23, scope: !6365)
!6457 = !DILocation(line: 2275, column: 26, scope: !6365)
!6458 = !DILocation(line: 2275, column: 9, scope: !6365)
!6459 = !DILocation(line: 2276, column: 22, scope: !6365)
!6460 = !DILocation(line: 2276, column: 3, scope: !6365)
!6461 = !DILocation(line: 2279, column: 35, scope: !6365)
!6462 = !DILocation(line: 2279, column: 38, scope: !6365)
!6463 = !DILocation(line: 2279, column: 49, scope: !6365)
!6464 = !DILocation(line: 2279, column: 3, scope: !6365)
!6465 = !DILocation(line: 2281, column: 42, scope: !6365)
!6466 = !DILocation(line: 2281, column: 45, scope: !6365)
!6467 = !DILocation(line: 2281, column: 53, scope: !6365)
!6468 = !DILocation(line: 2281, column: 56, scope: !6365)
!6469 = !DILocation(line: 2281, column: 67, scope: !6365)
!6470 = !DILocation(line: 2281, column: 3, scope: !6365)
!6471 = !DILocation(line: 2283, column: 7, scope: !6472)
!6472 = distinct !DILexicalBlock(scope: !6365, file: !3, line: 2283, column: 7)
!6473 = !DILocation(line: 2283, column: 7, scope: !6365)
!6474 = !DILocation(line: 2285, column: 16, scope: !6475)
!6475 = distinct !DILexicalBlock(scope: !6472, file: !3, line: 2284, column: 5)
!6476 = !DILocation(line: 2285, column: 7, scope: !6475)
!6477 = !DILocation(line: 2286, column: 26, scope: !6475)
!6478 = !DILocation(line: 2286, column: 44, scope: !6475)
!6479 = !DILocation(line: 2286, column: 47, scope: !6475)
!6480 = !DILocation(line: 2286, column: 61, scope: !6475)
!6481 = !DILocation(line: 2286, column: 7, scope: !6475)
!6482 = !DILocation(line: 2287, column: 5, scope: !6475)
!6483 = !DILocation(line: 2288, column: 10, scope: !6365)
!6484 = !DILocation(line: 2288, column: 3, scope: !6365)
!6485 = !DILocation(line: 2289, column: 1, scope: !6365)
!6486 = distinct !DISubprogram(name: "gimple_vdef", scope: !810, file: !810, line: 1375, type: !4609, scopeLine: 1376, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!6487 = !DILocalVariable(name: "g", arg: 1, scope: !6486, file: !810, line: 1375, type: !4552)
!6488 = !DILocation(line: 1375, column: 27, scope: !6486)
!6489 = !DILocation(line: 1377, column: 28, scope: !6490)
!6490 = distinct !DILexicalBlock(scope: !6486, file: !810, line: 1377, column: 7)
!6491 = !DILocation(line: 1377, column: 8, scope: !6490)
!6492 = !DILocation(line: 1377, column: 7, scope: !6486)
!6493 = !DILocation(line: 1378, column: 5, scope: !6490)
!6494 = !DILocation(line: 1379, column: 10, scope: !6486)
!6495 = !DILocation(line: 1379, column: 13, scope: !6486)
!6496 = !DILocation(line: 1379, column: 23, scope: !6486)
!6497 = !DILocation(line: 1379, column: 3, scope: !6486)
!6498 = !DILocation(line: 1380, column: 1, scope: !6486)
!6499 = distinct !DISubprogram(name: "gimple_call_set_fndecl", scope: !810, file: !810, line: 1942, type: !6500, scopeLine: 1943, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!6500 = !DISubroutineType(types: !6501)
!6501 = !{null, !2152, !1821}
!6502 = !DILocalVariable(name: "gs", arg: 1, scope: !6499, file: !810, line: 1942, type: !2152)
!6503 = !DILocation(line: 1942, column: 32, scope: !6499)
!6504 = !DILocalVariable(name: "decl", arg: 2, scope: !6499, file: !810, line: 1942, type: !1821)
!6505 = !DILocation(line: 1942, column: 41, scope: !6499)
!6506 = !DILocation(line: 1945, column: 18, scope: !6499)
!6507 = !DILocation(line: 1945, column: 68, scope: !6499)
!6508 = !DILocation(line: 1945, column: 51, scope: !6499)
!6509 = !DILocation(line: 1945, column: 73, scope: !6499)
!6510 = !DILocation(line: 1945, column: 25, scope: !6499)
!6511 = !DILocation(line: 1945, column: 3, scope: !6499)
!6512 = !DILocation(line: 1946, column: 1, scope: !6499)
!6513 = distinct !DISubprogram(name: "VEC_ipa_replace_map_p_base_length", scope: !378, file: !378, line: 168, type: !6514, scopeLine: 168, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!6514 = !DISubroutineType(types: !6515)
!6515 = !{!7, !6516}
!6516 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6517, size: 64)
!6517 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3317)
!6518 = !DILocalVariable(name: "vec_", arg: 1, scope: !6513, file: !378, line: 168, type: !6516)
!6519 = !DILocation(line: 168, column: 1, scope: !6513)
!6520 = distinct !DISubprogram(name: "VEC_ipa_replace_map_p_base_index", scope: !378, file: !378, line: 168, type: !6521, scopeLine: 168, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!6521 = !DISubroutineType(types: !6522)
!6522 = !{!3324, !6516, !7}
!6523 = !DILocalVariable(name: "vec_", arg: 1, scope: !6520, file: !378, line: 168, type: !6516)
!6524 = !DILocation(line: 168, column: 1, scope: !6520)
!6525 = !DILocalVariable(name: "ix_", arg: 2, scope: !6520, file: !378, line: 168, type: !7)
!6526 = !DILocation(line: 0, scope: !6520)
!6527 = distinct !DISubprogram(name: "cgraph_materialize_clone", scope: !3, file: !3, line: 2214, type: !3361, scopeLine: 2215, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!6528 = !DILocalVariable(name: "node", arg: 1, scope: !6527, file: !3, line: 2214, type: !3216)
!6529 = !DILocation(line: 2214, column: 47, scope: !6527)
!6530 = !DILocation(line: 2216, column: 3, scope: !6527)
!6531 = !DILocation(line: 2218, column: 29, scope: !6527)
!6532 = !DILocation(line: 2218, column: 35, scope: !6527)
!6533 = !DILocation(line: 2218, column: 45, scope: !6527)
!6534 = !DILocation(line: 2218, column: 51, scope: !6527)
!6535 = !DILocation(line: 2218, column: 57, scope: !6527)
!6536 = !DILocation(line: 2219, column: 10, scope: !6527)
!6537 = !DILocation(line: 2219, column: 16, scope: !6527)
!6538 = !DILocation(line: 2219, column: 22, scope: !6527)
!6539 = !DILocation(line: 2220, column: 8, scope: !6527)
!6540 = !DILocation(line: 2220, column: 14, scope: !6527)
!6541 = !DILocation(line: 2220, column: 20, scope: !6527)
!6542 = !DILocation(line: 2218, column: 3, scope: !6527)
!6543 = !DILocation(line: 2221, column: 7, scope: !6544)
!6544 = distinct !DILexicalBlock(scope: !6527, file: !3, line: 2221, column: 7)
!6545 = !DILocation(line: 2221, column: 7, scope: !6527)
!6546 = !DILocation(line: 2223, column: 30, scope: !6547)
!6547 = distinct !DILexicalBlock(scope: !6544, file: !3, line: 2222, column: 5)
!6548 = !DILocation(line: 2223, column: 36, scope: !6547)
!6549 = !DILocation(line: 2223, column: 46, scope: !6547)
!6550 = !DILocation(line: 2223, column: 52, scope: !6547)
!6551 = !DILocation(line: 2223, column: 70, scope: !6547)
!6552 = !DILocation(line: 2223, column: 7, scope: !6547)
!6553 = !DILocation(line: 2224, column: 30, scope: !6547)
!6554 = !DILocation(line: 2224, column: 36, scope: !6547)
!6555 = !DILocation(line: 2224, column: 42, scope: !6547)
!6556 = !DILocation(line: 2224, column: 60, scope: !6547)
!6557 = !DILocation(line: 2224, column: 7, scope: !6547)
!6558 = !DILocation(line: 2225, column: 5, scope: !6547)
!6559 = !DILocation(line: 2228, column: 7, scope: !6560)
!6560 = distinct !DILexicalBlock(scope: !6527, file: !3, line: 2228, column: 7)
!6561 = !DILocation(line: 2228, column: 13, scope: !6560)
!6562 = !DILocation(line: 2228, column: 7, scope: !6527)
!6563 = !DILocation(line: 2229, column: 52, scope: !6560)
!6564 = !DILocation(line: 2229, column: 58, scope: !6560)
!6565 = !DILocation(line: 2229, column: 5, scope: !6560)
!6566 = !DILocation(line: 2229, column: 11, scope: !6560)
!6567 = !DILocation(line: 2229, column: 31, scope: !6560)
!6568 = !DILocation(line: 2229, column: 50, scope: !6560)
!6569 = !DILocation(line: 2230, column: 7, scope: !6570)
!6570 = distinct !DILexicalBlock(scope: !6527, file: !3, line: 2230, column: 7)
!6571 = !DILocation(line: 2230, column: 13, scope: !6570)
!6572 = !DILocation(line: 2230, column: 7, scope: !6527)
!6573 = !DILocation(line: 2231, column: 52, scope: !6570)
!6574 = !DILocation(line: 2231, column: 58, scope: !6570)
!6575 = !DILocation(line: 2231, column: 5, scope: !6570)
!6576 = !DILocation(line: 2231, column: 11, scope: !6570)
!6577 = !DILocation(line: 2231, column: 31, scope: !6570)
!6578 = !DILocation(line: 2231, column: 50, scope: !6570)
!6579 = !DILocation(line: 2233, column: 30, scope: !6570)
!6580 = !DILocation(line: 2233, column: 36, scope: !6570)
!6581 = !DILocation(line: 2233, column: 5, scope: !6570)
!6582 = !DILocation(line: 2233, column: 11, scope: !6570)
!6583 = !DILocation(line: 2233, column: 21, scope: !6570)
!6584 = !DILocation(line: 2233, column: 28, scope: !6570)
!6585 = !DILocation(line: 2234, column: 3, scope: !6527)
!6586 = !DILocation(line: 2234, column: 9, scope: !6527)
!6587 = !DILocation(line: 2234, column: 28, scope: !6527)
!6588 = !DILocation(line: 2235, column: 3, scope: !6527)
!6589 = !DILocation(line: 2235, column: 9, scope: !6527)
!6590 = !DILocation(line: 2235, column: 28, scope: !6527)
!6591 = !DILocation(line: 2236, column: 8, scope: !6592)
!6592 = distinct !DILexicalBlock(scope: !6527, file: !3, line: 2236, column: 7)
!6593 = !DILocation(line: 2236, column: 14, scope: !6592)
!6594 = !DILocation(line: 2236, column: 24, scope: !6592)
!6595 = !DILocation(line: 2236, column: 33, scope: !6592)
!6596 = !DILocation(line: 2236, column: 37, scope: !6592)
!6597 = !DILocation(line: 2236, column: 43, scope: !6592)
!6598 = !DILocation(line: 2236, column: 53, scope: !6592)
!6599 = !DILocation(line: 2236, column: 7, scope: !6527)
!6600 = !DILocation(line: 2237, column: 25, scope: !6592)
!6601 = !DILocation(line: 2237, column: 31, scope: !6592)
!6602 = !DILocation(line: 2237, column: 5, scope: !6592)
!6603 = !DILocation(line: 2238, column: 3, scope: !6527)
!6604 = !DILocation(line: 2238, column: 9, scope: !6527)
!6605 = !DILocation(line: 2238, column: 18, scope: !6527)
!6606 = !DILocation(line: 2239, column: 3, scope: !6527)
!6607 = !DILocation(line: 2240, column: 1, scope: !6527)
!6608 = distinct !DISubprogram(name: "VEC_tree_gc_safe_push", scope: !135, file: !135, line: 183, type: !6609, scopeLine: 183, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!6609 = !DISubroutineType(types: !6610)
!6610 = !{!2187, !6611, !1821}
!6611 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2679, size: 64)
!6612 = !DILocalVariable(name: "vec_", arg: 1, scope: !6608, file: !135, line: 183, type: !6611)
!6613 = !DILocation(line: 183, column: 1, scope: !6608)
!6614 = !DILocalVariable(name: "obj_", arg: 2, scope: !6608, file: !135, line: 183, type: !1821)
!6615 = distinct !DISubprogram(name: "VEC_tree_gc_reserve", scope: !135, file: !135, line: 183, type: !6616, scopeLine: 183, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!6616 = !DISubroutineType(types: !6617)
!6617 = !{!1918, !6611, !1918}
!6618 = !DILocalVariable(name: "vec_", arg: 1, scope: !6615, file: !135, line: 183, type: !6611)
!6619 = !DILocation(line: 183, column: 1, scope: !6615)
!6620 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6615, file: !135, line: 183, type: !1918)
!6621 = !DILocalVariable(name: "extend", scope: !6615, file: !135, line: 183, type: !1918)
!6622 = !DILocation(line: 183, column: 1, scope: !6623)
!6623 = distinct !DILexicalBlock(scope: !6615, file: !135, line: 183, column: 1)
!6624 = distinct !DISubprogram(name: "VEC_tree_base_quick_push", scope: !135, file: !135, line: 182, type: !6625, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!6625 = !DISubroutineType(types: !6626)
!6626 = !{!2187, !6627, !1821}
!6627 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2684, size: 64)
!6628 = !DILocalVariable(name: "vec_", arg: 1, scope: !6624, file: !135, line: 182, type: !6627)
!6629 = !DILocation(line: 182, column: 1, scope: !6624)
!6630 = !DILocalVariable(name: "obj_", arg: 2, scope: !6624, file: !135, line: 182, type: !1821)
!6631 = !DILocalVariable(name: "slot_", scope: !6624, file: !135, line: 182, type: !2187)
!6632 = distinct !DISubprogram(name: "VEC_tree_base_space", scope: !135, file: !135, line: 182, type: !6633, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!6633 = !DISubroutineType(types: !6634)
!6634 = !{!1918, !6627, !1918}
!6635 = !DILocalVariable(name: "vec_", arg: 1, scope: !6632, file: !135, line: 182, type: !6627)
!6636 = !DILocation(line: 182, column: 1, scope: !6632)
!6637 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6632, file: !135, line: 182, type: !1918)
!6638 = distinct !DISubprogram(name: "bb_seq", scope: !810, file: !810, line: 237, type: !6639, scopeLine: 238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!6639 = !DISubroutineType(types: !6640)
!6640 = !{!2142, !6641}
!6641 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !1822, line: 112, baseType: !6642)
!6642 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6643, size: 64)
!6643 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2117)
!6644 = !DILocalVariable(name: "bb", arg: 1, scope: !6638, file: !810, line: 237, type: !6641)
!6645 = !DILocation(line: 237, column: 27, scope: !6638)
!6646 = !DILocation(line: 239, column: 13, scope: !6638)
!6647 = !DILocation(line: 239, column: 17, scope: !6638)
!6648 = !DILocation(line: 239, column: 23, scope: !6638)
!6649 = !DILocation(line: 239, column: 33, scope: !6638)
!6650 = !DILocation(line: 239, column: 36, scope: !6638)
!6651 = !DILocation(line: 239, column: 40, scope: !6638)
!6652 = !DILocation(line: 239, column: 43, scope: !6638)
!6653 = !DILocation(line: 239, column: 10, scope: !6638)
!6654 = !DILocation(line: 239, column: 53, scope: !6638)
!6655 = !DILocation(line: 239, column: 57, scope: !6638)
!6656 = !DILocation(line: 239, column: 60, scope: !6638)
!6657 = !DILocation(line: 239, column: 68, scope: !6638)
!6658 = !DILocation(line: 239, column: 3, scope: !6638)
!6659 = distinct !DISubprogram(name: "gimple_seq_first", scope: !810, file: !810, line: 159, type: !6660, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!6660 = !DISubroutineType(types: !6661)
!6661 = !{!2147, !6662}
!6662 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple_seq", file: !1822, line: 67, baseType: !6663)
!6663 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6664, size: 64)
!6664 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2144)
!6665 = !DILocalVariable(name: "s", arg: 1, scope: !6659, file: !810, line: 159, type: !6662)
!6666 = !DILocation(line: 159, column: 36, scope: !6659)
!6667 = !DILocation(line: 161, column: 10, scope: !6659)
!6668 = !DILocation(line: 161, column: 14, scope: !6659)
!6669 = !DILocation(line: 161, column: 17, scope: !6659)
!6670 = !DILocation(line: 161, column: 3, scope: !6659)
!6671 = distinct !DISubprogram(name: "gimple_code", scope: !810, file: !810, line: 1052, type: !6672, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!6672 = !DISubroutineType(types: !6673)
!6673 = !{!809, !4552}
!6674 = !DILocalVariable(name: "g", arg: 1, scope: !6671, file: !810, line: 1052, type: !4552)
!6675 = !DILocation(line: 1052, column: 27, scope: !6671)
!6676 = !DILocation(line: 1054, column: 10, scope: !6671)
!6677 = !DILocation(line: 1054, column: 13, scope: !6671)
!6678 = !DILocation(line: 1054, column: 20, scope: !6671)
!6679 = !DILocation(line: 1054, column: 3, scope: !6671)
!6680 = distinct !DISubprogram(name: "gimple_call_fn", scope: !810, file: !810, line: 1911, type: !4609, scopeLine: 1912, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!6681 = !DILocalVariable(name: "gs", arg: 1, scope: !6680, file: !810, line: 1911, type: !4552)
!6682 = !DILocation(line: 1911, column: 30, scope: !6680)
!6683 = !DILocation(line: 1914, column: 21, scope: !6680)
!6684 = !DILocation(line: 1914, column: 10, scope: !6680)
!6685 = !DILocation(line: 1914, column: 3, scope: !6680)
!6686 = distinct !DISubprogram(name: "gimple_op", scope: !810, file: !810, line: 1631, type: !6687, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!6687 = !DISubroutineType(types: !6688)
!6688 = !{!1821, !4552, !7}
!6689 = !DILocalVariable(name: "gs", arg: 1, scope: !6686, file: !810, line: 1631, type: !4552)
!6690 = !DILocation(line: 1631, column: 25, scope: !6686)
!6691 = !DILocalVariable(name: "i", arg: 2, scope: !6686, file: !810, line: 1631, type: !7)
!6692 = !DILocation(line: 1631, column: 38, scope: !6686)
!6693 = !DILocation(line: 1633, column: 23, scope: !6694)
!6694 = distinct !DILexicalBlock(scope: !6686, file: !810, line: 1633, column: 7)
!6695 = !DILocation(line: 1633, column: 7, scope: !6694)
!6696 = !DILocation(line: 1633, column: 7, scope: !6686)
!6697 = !DILocation(line: 1638, column: 26, scope: !6698)
!6698 = distinct !DILexicalBlock(scope: !6694, file: !810, line: 1634, column: 5)
!6699 = !DILocation(line: 1638, column: 14, scope: !6698)
!6700 = !DILocation(line: 1638, column: 50, scope: !6698)
!6701 = !DILocation(line: 1638, column: 7, scope: !6698)
!6702 = !DILocation(line: 1641, column: 5, scope: !6694)
!6703 = !DILocation(line: 1642, column: 1, scope: !6686)
!6704 = distinct !DISubprogram(name: "gimple_has_ops", scope: !810, file: !810, line: 1274, type: !4600, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!6705 = !DILocalVariable(name: "g", arg: 1, scope: !6704, file: !810, line: 1274, type: !4552)
!6706 = !DILocation(line: 1274, column: 30, scope: !6704)
!6707 = !DILocation(line: 1276, column: 23, scope: !6704)
!6708 = !DILocation(line: 1276, column: 10, scope: !6704)
!6709 = !DILocation(line: 1276, column: 26, scope: !6704)
!6710 = !DILocation(line: 1276, column: 41, scope: !6704)
!6711 = !DILocation(line: 1276, column: 57, scope: !6704)
!6712 = !DILocation(line: 1276, column: 44, scope: !6704)
!6713 = !DILocation(line: 1276, column: 60, scope: !6704)
!6714 = !DILocation(line: 0, scope: !6704)
!6715 = !DILocation(line: 1276, column: 3, scope: !6704)
!6716 = distinct !DISubprogram(name: "gimple_ops", scope: !810, file: !810, line: 1614, type: !6717, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!6717 = !DISubroutineType(types: !6718)
!6718 = !{!2187, !2152}
!6719 = !DILocalVariable(name: "gs", arg: 1, scope: !6716, file: !810, line: 1614, type: !2152)
!6720 = !DILocation(line: 1614, column: 20, scope: !6716)
!6721 = !DILocalVariable(name: "off", scope: !6716, file: !810, line: 1616, type: !2298)
!6722 = !DILocation(line: 1616, column: 10, scope: !6716)
!6723 = !DILocation(line: 1621, column: 56, scope: !6716)
!6724 = !DILocation(line: 1621, column: 28, scope: !6716)
!6725 = !DILocation(line: 1621, column: 9, scope: !6716)
!6726 = !DILocation(line: 1621, column: 7, scope: !6716)
!6727 = !DILocation(line: 1622, column: 3, scope: !6716)
!6728 = !DILocation(line: 1624, column: 29, scope: !6716)
!6729 = !DILocation(line: 1624, column: 20, scope: !6716)
!6730 = !DILocation(line: 1624, column: 34, scope: !6716)
!6731 = !DILocation(line: 1624, column: 32, scope: !6716)
!6732 = !DILocation(line: 1624, column: 10, scope: !6716)
!6733 = !DILocation(line: 1624, column: 3, scope: !6716)
!6734 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !810, file: !810, line: 1073, type: !6735, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!6735 = !DISubroutineType(types: !6736)
!6736 = !{!848, !2152}
!6737 = !DILocalVariable(name: "gs", arg: 1, scope: !6734, file: !810, line: 1073, type: !2152)
!6738 = !DILocation(line: 1073, column: 36, scope: !6734)
!6739 = !DILocation(line: 1075, column: 37, scope: !6734)
!6740 = !DILocation(line: 1075, column: 24, scope: !6734)
!6741 = !DILocation(line: 1075, column: 10, scope: !6734)
!6742 = !DILocation(line: 1075, column: 3, scope: !6734)
!6743 = distinct !DISubprogram(name: "gss_for_code", scope: !810, file: !810, line: 1061, type: !6744, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!6744 = !DISubroutineType(types: !6745)
!6745 = !{!848, !809}
!6746 = !DILocalVariable(name: "code", arg: 1, scope: !6743, file: !810, line: 1061, type: !809)
!6747 = !DILocation(line: 1061, column: 32, scope: !6743)
!6748 = !DILocation(line: 1066, column: 24, scope: !6743)
!6749 = !DILocation(line: 1066, column: 10, scope: !6743)
!6750 = !DILocation(line: 1066, column: 3, scope: !6743)
!6751 = distinct !DISubprogram(name: "VEC_tree_base_length", scope: !135, file: !135, line: 182, type: !6752, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!6752 = !DISubroutineType(types: !6753)
!6753 = !{!7, !6754}
!6754 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6755, size: 64)
!6755 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2684)
!6756 = !DILocalVariable(name: "vec_", arg: 1, scope: !6751, file: !135, line: 182, type: !6754)
!6757 = !DILocation(line: 182, column: 1, scope: !6751)
!6758 = distinct !DISubprogram(name: "VEC_tree_base_address", scope: !135, file: !135, line: 182, type: !6759, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!6759 = !DISubroutineType(types: !6760)
!6760 = !{!2187, !6627}
!6761 = !DILocalVariable(name: "vec_", arg: 1, scope: !6758, file: !135, line: 182, type: !6627)
!6762 = !DILocation(line: 182, column: 1, scope: !6758)
!6763 = distinct !DISubprogram(name: "compare_ctor", scope: !3, file: !3, line: 235, type: !2632, scopeLine: 236, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!6764 = !DILocalVariable(name: "p1", arg: 1, scope: !6763, file: !3, line: 235, type: !2459)
!6765 = !DILocation(line: 235, column: 27, scope: !6763)
!6766 = !DILocalVariable(name: "p2", arg: 2, scope: !6763, file: !3, line: 235, type: !2459)
!6767 = !DILocation(line: 235, column: 43, scope: !6763)
!6768 = !DILocalVariable(name: "f1", scope: !6763, file: !3, line: 237, type: !1821)
!6769 = !DILocation(line: 237, column: 8, scope: !6763)
!6770 = !DILocalVariable(name: "f2", scope: !6763, file: !3, line: 238, type: !1821)
!6771 = !DILocation(line: 238, column: 8, scope: !6763)
!6772 = !DILocalVariable(name: "priority1", scope: !6763, file: !3, line: 239, type: !1918)
!6773 = !DILocation(line: 239, column: 7, scope: !6763)
!6774 = !DILocalVariable(name: "priority2", scope: !6763, file: !3, line: 240, type: !1918)
!6775 = !DILocation(line: 240, column: 7, scope: !6763)
!6776 = !DILocation(line: 242, column: 23, scope: !6763)
!6777 = !DILocation(line: 242, column: 9, scope: !6763)
!6778 = !DILocation(line: 242, column: 8, scope: !6763)
!6779 = !DILocation(line: 242, column: 6, scope: !6763)
!6780 = !DILocation(line: 243, column: 23, scope: !6763)
!6781 = !DILocation(line: 243, column: 9, scope: !6763)
!6782 = !DILocation(line: 243, column: 8, scope: !6763)
!6783 = !DILocation(line: 243, column: 6, scope: !6763)
!6784 = !DILocation(line: 244, column: 15, scope: !6763)
!6785 = !DILocation(line: 244, column: 13, scope: !6763)
!6786 = !DILocation(line: 245, column: 15, scope: !6763)
!6787 = !DILocation(line: 245, column: 13, scope: !6763)
!6788 = !DILocation(line: 247, column: 7, scope: !6789)
!6789 = distinct !DILexicalBlock(scope: !6763, file: !3, line: 247, column: 7)
!6790 = !DILocation(line: 247, column: 19, scope: !6789)
!6791 = !DILocation(line: 247, column: 17, scope: !6789)
!6792 = !DILocation(line: 247, column: 7, scope: !6763)
!6793 = !DILocation(line: 248, column: 5, scope: !6789)
!6794 = !DILocation(line: 249, column: 12, scope: !6795)
!6795 = distinct !DILexicalBlock(scope: !6789, file: !3, line: 249, column: 12)
!6796 = !DILocation(line: 249, column: 24, scope: !6795)
!6797 = !DILocation(line: 249, column: 22, scope: !6795)
!6798 = !DILocation(line: 249, column: 12, scope: !6789)
!6799 = !DILocation(line: 250, column: 5, scope: !6795)
!6800 = !DILocation(line: 253, column: 26, scope: !6795)
!6801 = !DILocation(line: 253, column: 12, scope: !6795)
!6802 = !DILocation(line: 253, column: 45, scope: !6795)
!6803 = !DILocation(line: 253, column: 31, scope: !6795)
!6804 = !DILocation(line: 253, column: 29, scope: !6795)
!6805 = !DILocation(line: 253, column: 5, scope: !6795)
!6806 = !DILocation(line: 254, column: 1, scope: !6763)
!6807 = distinct !DISubprogram(name: "build_cdtor", scope: !3, file: !3, line: 193, type: !6808, scopeLine: 194, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!6808 = !DISubroutineType(types: !6809)
!6809 = !{null, !1941, !2187, !2298}
!6810 = !DILocalVariable(name: "ctor_p", arg: 1, scope: !6807, file: !3, line: 193, type: !1941)
!6811 = !DILocation(line: 193, column: 19, scope: !6807)
!6812 = !DILocalVariable(name: "cdtors", arg: 2, scope: !6807, file: !3, line: 193, type: !2187)
!6813 = !DILocation(line: 193, column: 33, scope: !6807)
!6814 = !DILocalVariable(name: "len", arg: 3, scope: !6807, file: !3, line: 193, type: !2298)
!6815 = !DILocation(line: 193, column: 48, scope: !6807)
!6816 = !DILocalVariable(name: "i", scope: !6807, file: !3, line: 195, type: !2298)
!6817 = !DILocation(line: 195, column: 10, scope: !6807)
!6818 = !DILocation(line: 197, column: 5, scope: !6807)
!6819 = !DILocation(line: 198, column: 3, scope: !6807)
!6820 = !DILocation(line: 198, column: 10, scope: !6807)
!6821 = !DILocation(line: 198, column: 14, scope: !6807)
!6822 = !DILocation(line: 198, column: 12, scope: !6807)
!6823 = !DILocalVariable(name: "body", scope: !6824, file: !3, line: 200, type: !1821)
!6824 = distinct !DILexicalBlock(scope: !6807, file: !3, line: 199, column: 5)
!6825 = !DILocation(line: 200, column: 12, scope: !6824)
!6826 = !DILocalVariable(name: "fn", scope: !6824, file: !3, line: 201, type: !1821)
!6827 = !DILocation(line: 201, column: 12, scope: !6824)
!6828 = !DILocalVariable(name: "priority", scope: !6824, file: !3, line: 202, type: !6829)
!6829 = !DIDerivedType(tag: DW_TAG_typedef, name: "priority_type", file: !135, line: 3039, baseType: !3239)
!6830 = !DILocation(line: 202, column: 21, scope: !6824)
!6831 = !DILocation(line: 204, column: 16, scope: !6824)
!6832 = !DILocation(line: 205, column: 12, scope: !6824)
!6833 = !DILocation(line: 208, column: 7, scope: !6824)
!6834 = !DILocalVariable(name: "p", scope: !6835, file: !3, line: 210, type: !6829)
!6835 = distinct !DILexicalBlock(scope: !6824, file: !3, line: 209, column: 2)
!6836 = !DILocation(line: 210, column: 18, scope: !6835)
!6837 = !DILocation(line: 211, column: 9, scope: !6835)
!6838 = !DILocation(line: 211, column: 16, scope: !6835)
!6839 = !DILocation(line: 211, column: 7, scope: !6835)
!6840 = !DILocation(line: 212, column: 8, scope: !6835)
!6841 = !DILocation(line: 212, column: 17, scope: !6835)
!6842 = !DILocation(line: 212, column: 43, scope: !6835)
!6843 = !DILocation(line: 212, column: 6, scope: !6835)
!6844 = !DILocation(line: 213, column: 9, scope: !6845)
!6845 = distinct !DILexicalBlock(scope: !6835, file: !3, line: 213, column: 8)
!6846 = !DILocation(line: 213, column: 8, scope: !6835)
!6847 = !DILocation(line: 214, column: 17, scope: !6845)
!6848 = !DILocation(line: 214, column: 15, scope: !6845)
!6849 = !DILocation(line: 214, column: 6, scope: !6845)
!6850 = !DILocation(line: 215, column: 13, scope: !6851)
!6851 = distinct !DILexicalBlock(scope: !6845, file: !3, line: 215, column: 13)
!6852 = !DILocation(line: 215, column: 18, scope: !6851)
!6853 = !DILocation(line: 215, column: 15, scope: !6851)
!6854 = !DILocation(line: 215, column: 13, scope: !6845)
!6855 = !DILocation(line: 216, column: 6, scope: !6851)
!6856 = !DILocation(line: 218, column: 14, scope: !6835)
!6857 = !DILocation(line: 217, column: 30, scope: !6835)
!6858 = !DILocation(line: 217, column: 4, scope: !6835)
!6859 = !DILocation(line: 220, column: 4, scope: !6835)
!6860 = !DILocation(line: 221, column: 2, scope: !6835)
!6861 = !DILocation(line: 222, column: 14, scope: !6824)
!6862 = !DILocation(line: 222, column: 18, scope: !6824)
!6863 = !DILocation(line: 222, column: 16, scope: !6824)
!6864 = distinct !{!6864, !6833, !6865}
!6865 = !DILocation(line: 222, column: 21, scope: !6824)
!6866 = !DILocation(line: 223, column: 7, scope: !6824)
!6867 = !DILocation(line: 226, column: 34, scope: !6824)
!6868 = !DILocation(line: 226, column: 54, scope: !6824)
!6869 = !DILocation(line: 226, column: 60, scope: !6824)
!6870 = !DILocation(line: 226, column: 7, scope: !6824)
!6871 = distinct !{!6871, !6819, !6872}
!6872 = !DILocation(line: 227, column: 5, scope: !6807)
!6873 = !DILocation(line: 228, column: 1, scope: !6807)
!6874 = distinct !DISubprogram(name: "VEC_tree_base_truncate", scope: !135, file: !135, line: 182, type: !6875, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!6875 = !DISubroutineType(types: !6876)
!6876 = !{null, !6627, !7}
!6877 = !DILocalVariable(name: "vec_", arg: 1, scope: !6874, file: !135, line: 182, type: !6627)
!6878 = !DILocation(line: 182, column: 1, scope: !6874)
!6879 = !DILocalVariable(name: "size_", arg: 2, scope: !6874, file: !135, line: 182, type: !7)
!6880 = !DILocation(line: 182, column: 1, scope: !6881)
!6881 = distinct !DILexicalBlock(scope: !6874, file: !135, line: 182, column: 1)
!6882 = distinct !DISubprogram(name: "compare_dtor", scope: !3, file: !3, line: 261, type: !2632, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!6883 = !DILocalVariable(name: "p1", arg: 1, scope: !6882, file: !3, line: 261, type: !2459)
!6884 = !DILocation(line: 261, column: 27, scope: !6882)
!6885 = !DILocalVariable(name: "p2", arg: 2, scope: !6882, file: !3, line: 261, type: !2459)
!6886 = !DILocation(line: 261, column: 43, scope: !6882)
!6887 = !DILocalVariable(name: "f1", scope: !6882, file: !3, line: 263, type: !1821)
!6888 = !DILocation(line: 263, column: 8, scope: !6882)
!6889 = !DILocalVariable(name: "f2", scope: !6882, file: !3, line: 264, type: !1821)
!6890 = !DILocation(line: 264, column: 8, scope: !6882)
!6891 = !DILocalVariable(name: "priority1", scope: !6882, file: !3, line: 265, type: !1918)
!6892 = !DILocation(line: 265, column: 7, scope: !6882)
!6893 = !DILocalVariable(name: "priority2", scope: !6882, file: !3, line: 266, type: !1918)
!6894 = !DILocation(line: 266, column: 7, scope: !6882)
!6895 = !DILocation(line: 268, column: 23, scope: !6882)
!6896 = !DILocation(line: 268, column: 9, scope: !6882)
!6897 = !DILocation(line: 268, column: 8, scope: !6882)
!6898 = !DILocation(line: 268, column: 6, scope: !6882)
!6899 = !DILocation(line: 269, column: 23, scope: !6882)
!6900 = !DILocation(line: 269, column: 9, scope: !6882)
!6901 = !DILocation(line: 269, column: 8, scope: !6882)
!6902 = !DILocation(line: 269, column: 6, scope: !6882)
!6903 = !DILocation(line: 270, column: 15, scope: !6882)
!6904 = !DILocation(line: 270, column: 13, scope: !6882)
!6905 = !DILocation(line: 271, column: 15, scope: !6882)
!6906 = !DILocation(line: 271, column: 13, scope: !6882)
!6907 = !DILocation(line: 273, column: 7, scope: !6908)
!6908 = distinct !DILexicalBlock(scope: !6882, file: !3, line: 273, column: 7)
!6909 = !DILocation(line: 273, column: 19, scope: !6908)
!6910 = !DILocation(line: 273, column: 17, scope: !6908)
!6911 = !DILocation(line: 273, column: 7, scope: !6882)
!6912 = !DILocation(line: 274, column: 5, scope: !6908)
!6913 = !DILocation(line: 275, column: 12, scope: !6914)
!6914 = distinct !DILexicalBlock(scope: !6908, file: !3, line: 275, column: 12)
!6915 = !DILocation(line: 275, column: 24, scope: !6914)
!6916 = !DILocation(line: 275, column: 22, scope: !6914)
!6917 = !DILocation(line: 275, column: 12, scope: !6908)
!6918 = !DILocation(line: 276, column: 5, scope: !6914)
!6919 = !DILocation(line: 279, column: 26, scope: !6914)
!6920 = !DILocation(line: 279, column: 12, scope: !6914)
!6921 = !DILocation(line: 279, column: 45, scope: !6914)
!6922 = !DILocation(line: 279, column: 31, scope: !6914)
!6923 = !DILocation(line: 279, column: 29, scope: !6914)
!6924 = !DILocation(line: 279, column: 5, scope: !6914)
!6925 = !DILocation(line: 280, column: 1, scope: !6882)
!6926 = distinct !DISubprogram(name: "process_function_and_variable_attributes", scope: !3, file: !3, line: 896, type: !6927, scopeLine: 898, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!6927 = !DISubroutineType(types: !6928)
!6928 = !{null, !3216, !3377}
!6929 = !DILocalVariable(name: "first", arg: 1, scope: !6926, file: !3, line: 896, type: !3216)
!6930 = !DILocation(line: 896, column: 63, scope: !6926)
!6931 = !DILocalVariable(name: "first_var", arg: 2, scope: !6926, file: !3, line: 897, type: !3377)
!6932 = !DILocation(line: 897, column: 64, scope: !6926)
!6933 = !DILocalVariable(name: "node", scope: !6926, file: !3, line: 899, type: !3216)
!6934 = !DILocation(line: 899, column: 23, scope: !6926)
!6935 = !DILocalVariable(name: "vnode", scope: !6926, file: !3, line: 900, type: !3377)
!6936 = !DILocation(line: 900, column: 24, scope: !6926)
!6937 = !DILocation(line: 902, column: 15, scope: !6938)
!6938 = distinct !DILexicalBlock(scope: !6926, file: !3, line: 902, column: 3)
!6939 = !DILocation(line: 902, column: 13, scope: !6938)
!6940 = !DILocation(line: 902, column: 8, scope: !6938)
!6941 = !DILocation(line: 902, column: 29, scope: !6942)
!6942 = distinct !DILexicalBlock(scope: !6938, file: !3, line: 902, column: 3)
!6943 = !DILocation(line: 902, column: 37, scope: !6942)
!6944 = !DILocation(line: 902, column: 34, scope: !6942)
!6945 = !DILocation(line: 902, column: 3, scope: !6938)
!6946 = !DILocalVariable(name: "decl", scope: !6947, file: !3, line: 904, type: !1821)
!6947 = distinct !DILexicalBlock(scope: !6942, file: !3, line: 903, column: 5)
!6948 = !DILocation(line: 904, column: 12, scope: !6947)
!6949 = !DILocation(line: 904, column: 19, scope: !6947)
!6950 = !DILocation(line: 904, column: 25, scope: !6947)
!6951 = !DILocation(line: 905, column: 11, scope: !6952)
!6952 = distinct !DILexicalBlock(scope: !6947, file: !3, line: 905, column: 11)
!6953 = !DILocation(line: 905, column: 11, scope: !6947)
!6954 = !DILocation(line: 907, column: 26, scope: !6955)
!6955 = distinct !DILexicalBlock(scope: !6952, file: !3, line: 906, column: 2)
!6956 = !DILocation(line: 907, column: 4, scope: !6955)
!6957 = !DILocation(line: 908, column: 8, scope: !6958)
!6958 = distinct !DILexicalBlock(scope: !6955, file: !3, line: 908, column: 8)
!6959 = !DILocation(line: 908, column: 14, scope: !6958)
!6960 = !DILocation(line: 908, column: 20, scope: !6958)
!6961 = !DILocation(line: 908, column: 8, scope: !6955)
!6962 = !DILocation(line: 909, column: 32, scope: !6958)
!6963 = !DILocation(line: 909, column: 7, scope: !6958)
!6964 = !DILocation(line: 910, column: 2, scope: !6955)
!6965 = !DILocation(line: 911, column: 51, scope: !6966)
!6966 = distinct !DILexicalBlock(scope: !6947, file: !3, line: 911, column: 11)
!6967 = !DILocation(line: 911, column: 11, scope: !6966)
!6968 = !DILocation(line: 911, column: 11, scope: !6947)
!6969 = !DILocation(line: 913, column: 10, scope: !6970)
!6970 = distinct !DILexicalBlock(scope: !6971, file: !3, line: 913, column: 8)
!6971 = distinct !DILexicalBlock(scope: !6966, file: !3, line: 912, column: 2)
!6972 = !DILocation(line: 913, column: 8, scope: !6971)
!6973 = !DILocation(line: 914, column: 18, scope: !6970)
!6974 = !DILocation(line: 914, column: 6, scope: !6970)
!6975 = !DILocation(line: 917, column: 13, scope: !6976)
!6976 = distinct !DILexicalBlock(scope: !6970, file: !3, line: 917, column: 13)
!6977 = !DILocation(line: 917, column: 19, scope: !6976)
!6978 = !DILocation(line: 917, column: 25, scope: !6976)
!6979 = !DILocation(line: 917, column: 13, scope: !6970)
!6980 = !DILocation(line: 918, column: 32, scope: !6976)
!6981 = !DILocation(line: 918, column: 7, scope: !6976)
!6982 = !DILocation(line: 919, column: 2, scope: !6971)
!6983 = !DILocation(line: 920, column: 5, scope: !6947)
!6984 = !DILocation(line: 902, column: 51, scope: !6942)
!6985 = !DILocation(line: 902, column: 57, scope: !6942)
!6986 = !DILocation(line: 902, column: 49, scope: !6942)
!6987 = !DILocation(line: 902, column: 3, scope: !6942)
!6988 = distinct !{!6988, !6945, !6989}
!6989 = !DILocation(line: 920, column: 5, scope: !6938)
!6990 = !DILocation(line: 921, column: 16, scope: !6991)
!6991 = distinct !DILexicalBlock(scope: !6926, file: !3, line: 921, column: 3)
!6992 = !DILocation(line: 921, column: 14, scope: !6991)
!6993 = !DILocation(line: 921, column: 8, scope: !6991)
!6994 = !DILocation(line: 921, column: 31, scope: !6995)
!6995 = distinct !DILexicalBlock(scope: !6991, file: !3, line: 921, column: 3)
!6996 = !DILocation(line: 921, column: 40, scope: !6995)
!6997 = !DILocation(line: 921, column: 37, scope: !6995)
!6998 = !DILocation(line: 921, column: 3, scope: !6991)
!6999 = !DILocalVariable(name: "decl", scope: !7000, file: !3, line: 923, type: !1821)
!7000 = distinct !DILexicalBlock(scope: !6995, file: !3, line: 922, column: 5)
!7001 = !DILocation(line: 923, column: 12, scope: !7000)
!7002 = !DILocation(line: 923, column: 19, scope: !7000)
!7003 = !DILocation(line: 923, column: 26, scope: !7000)
!7004 = !DILocation(line: 924, column: 11, scope: !7005)
!7005 = distinct !DILexicalBlock(scope: !7000, file: !3, line: 924, column: 11)
!7006 = !DILocation(line: 924, column: 11, scope: !7000)
!7007 = !DILocation(line: 926, column: 26, scope: !7008)
!7008 = distinct !DILexicalBlock(scope: !7005, file: !3, line: 925, column: 2)
!7009 = !DILocation(line: 926, column: 4, scope: !7008)
!7010 = !DILocation(line: 927, column: 4, scope: !7008)
!7011 = !DILocation(line: 927, column: 11, scope: !7008)
!7012 = !DILocation(line: 927, column: 24, scope: !7008)
!7013 = !DILocation(line: 928, column: 8, scope: !7014)
!7014 = distinct !DILexicalBlock(scope: !7008, file: !3, line: 928, column: 8)
!7015 = !DILocation(line: 928, column: 15, scope: !7014)
!7016 = !DILocation(line: 928, column: 8, scope: !7008)
!7017 = !DILocation(line: 929, column: 32, scope: !7014)
!7018 = !DILocation(line: 929, column: 6, scope: !7014)
!7019 = !DILocation(line: 930, column: 2, scope: !7008)
!7020 = !DILocation(line: 931, column: 51, scope: !7021)
!7021 = distinct !DILexicalBlock(scope: !7000, file: !3, line: 931, column: 11)
!7022 = !DILocation(line: 931, column: 11, scope: !7021)
!7023 = !DILocation(line: 931, column: 11, scope: !7000)
!7024 = !DILocation(line: 933, column: 10, scope: !7025)
!7025 = distinct !DILexicalBlock(scope: !7026, file: !3, line: 933, column: 8)
!7026 = distinct !DILexicalBlock(scope: !7021, file: !3, line: 932, column: 2)
!7027 = !DILocation(line: 933, column: 8, scope: !7026)
!7028 = !DILocation(line: 934, column: 18, scope: !7025)
!7029 = !DILocation(line: 934, column: 6, scope: !7025)
!7030 = !DILocation(line: 937, column: 13, scope: !7031)
!7031 = distinct !DILexicalBlock(scope: !7025, file: !3, line: 937, column: 13)
!7032 = !DILocation(line: 937, column: 20, scope: !7031)
!7033 = !DILocation(line: 937, column: 13, scope: !7025)
!7034 = !DILocation(line: 938, column: 32, scope: !7031)
!7035 = !DILocation(line: 938, column: 6, scope: !7031)
!7036 = !DILocation(line: 939, column: 2, scope: !7026)
!7037 = !DILocation(line: 940, column: 5, scope: !7000)
!7038 = !DILocation(line: 921, column: 59, scope: !6995)
!7039 = !DILocation(line: 921, column: 66, scope: !6995)
!7040 = !DILocation(line: 921, column: 57, scope: !6995)
!7041 = !DILocation(line: 921, column: 3, scope: !6995)
!7042 = distinct !{!7042, !6998, !7043}
!7043 = !DILocation(line: 940, column: 5, scope: !6991)
!7044 = !DILocation(line: 941, column: 1, scope: !6926)
!7045 = distinct !DISubprogram(name: "assemble_thunk", scope: !3, file: !3, line: 1370, type: !3361, scopeLine: 1371, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!7046 = !DILocalVariable(name: "node", arg: 1, scope: !7045, file: !3, line: 1370, type: !3216)
!7047 = !DILocation(line: 1370, column: 37, scope: !7045)
!7048 = !DILocalVariable(name: "this_adjusting", scope: !7045, file: !3, line: 1372, type: !1941)
!7049 = !DILocation(line: 1372, column: 8, scope: !7045)
!7050 = !DILocation(line: 1372, column: 25, scope: !7045)
!7051 = !DILocation(line: 1372, column: 31, scope: !7045)
!7052 = !DILocation(line: 1372, column: 37, scope: !7045)
!7053 = !DILocalVariable(name: "fixed_offset", scope: !7045, file: !3, line: 1373, type: !1877)
!7054 = !DILocation(line: 1373, column: 17, scope: !7045)
!7055 = !DILocation(line: 1373, column: 32, scope: !7045)
!7056 = !DILocation(line: 1373, column: 38, scope: !7045)
!7057 = !DILocation(line: 1373, column: 44, scope: !7045)
!7058 = !DILocalVariable(name: "virtual_value", scope: !7045, file: !3, line: 1374, type: !1877)
!7059 = !DILocation(line: 1374, column: 17, scope: !7045)
!7060 = !DILocation(line: 1374, column: 33, scope: !7045)
!7061 = !DILocation(line: 1374, column: 39, scope: !7045)
!7062 = !DILocation(line: 1374, column: 45, scope: !7045)
!7063 = !DILocalVariable(name: "virtual_offset", scope: !7045, file: !3, line: 1375, type: !1821)
!7064 = !DILocation(line: 1375, column: 8, scope: !7045)
!7065 = !DILocalVariable(name: "alias", scope: !7045, file: !3, line: 1376, type: !1821)
!7066 = !DILocation(line: 1376, column: 8, scope: !7045)
!7067 = !DILocation(line: 1376, column: 16, scope: !7045)
!7068 = !DILocation(line: 1376, column: 22, scope: !7045)
!7069 = !DILocation(line: 1376, column: 28, scope: !7045)
!7070 = !DILocalVariable(name: "thunk_fndecl", scope: !7045, file: !3, line: 1377, type: !1821)
!7071 = !DILocation(line: 1377, column: 8, scope: !7045)
!7072 = !DILocation(line: 1377, column: 23, scope: !7045)
!7073 = !DILocation(line: 1377, column: 29, scope: !7045)
!7074 = !DILocalVariable(name: "a", scope: !7045, file: !3, line: 1378, type: !1821)
!7075 = !DILocation(line: 1378, column: 8, scope: !7045)
!7076 = !DILocation(line: 1378, column: 12, scope: !7045)
!7077 = !DILocation(line: 1380, column: 27, scope: !7045)
!7078 = !DILocation(line: 1380, column: 25, scope: !7045)
!7079 = !DILocation(line: 1382, column: 7, scope: !7080)
!7080 = distinct !DILexicalBlock(scope: !7045, file: !3, line: 1382, column: 7)
!7081 = !DILocation(line: 1383, column: 7, scope: !7080)
!7082 = !DILocation(line: 1383, column: 26, scope: !7080)
!7083 = !DILocation(line: 1383, column: 47, scope: !7080)
!7084 = !DILocation(line: 1383, column: 61, scope: !7080)
!7085 = !DILocation(line: 1384, column: 12, scope: !7080)
!7086 = !DILocation(line: 1384, column: 27, scope: !7080)
!7087 = !DILocation(line: 1383, column: 10, scope: !7080)
!7088 = !DILocation(line: 1382, column: 7, scope: !7045)
!7089 = !DILocalVariable(name: "fnname", scope: !7090, file: !3, line: 1386, type: !2025)
!7090 = distinct !DILexicalBlock(scope: !7080, file: !3, line: 1385, column: 5)
!7091 = !DILocation(line: 1386, column: 19, scope: !7090)
!7092 = !DILocalVariable(name: "fn_block", scope: !7090, file: !3, line: 1387, type: !1821)
!7093 = !DILocation(line: 1387, column: 12, scope: !7090)
!7094 = !DILocation(line: 1390, column: 4, scope: !7090)
!7095 = !DILocation(line: 1389, column: 7, scope: !7090)
!7096 = !DILocation(line: 1390, column: 2, scope: !7090)
!7097 = !DILocation(line: 1392, column: 16, scope: !7090)
!7098 = !DILocation(line: 1392, column: 14, scope: !7090)
!7099 = !DILocation(line: 1396, column: 18, scope: !7090)
!7100 = !DILocation(line: 1396, column: 16, scope: !7090)
!7101 = !DILocation(line: 1397, column: 31, scope: !7090)
!7102 = !DILocation(line: 1397, column: 7, scope: !7090)
!7103 = !DILocation(line: 1397, column: 29, scope: !7090)
!7104 = !DILocation(line: 1398, column: 37, scope: !7090)
!7105 = !DILocation(line: 1398, column: 7, scope: !7090)
!7106 = !DILocation(line: 1398, column: 35, scope: !7090)
!7107 = !DILocation(line: 1399, column: 28, scope: !7090)
!7108 = !DILocation(line: 1399, column: 7, scope: !7090)
!7109 = !DILocation(line: 1400, column: 7, scope: !7090)
!7110 = !DILocation(line: 1400, column: 13, scope: !7090)
!7111 = !DILocation(line: 1400, column: 22, scope: !7090)
!7112 = !DILocation(line: 1401, column: 32, scope: !7090)
!7113 = !DILocation(line: 1401, column: 46, scope: !7090)
!7114 = !DILocation(line: 1401, column: 7, scope: !7090)
!7115 = !DILocation(line: 1403, column: 23, scope: !7090)
!7116 = !DILocation(line: 1403, column: 40, scope: !7090)
!7117 = !DILocation(line: 1403, column: 54, scope: !7090)
!7118 = !DILocation(line: 1404, column: 12, scope: !7090)
!7119 = !DILocation(line: 1404, column: 26, scope: !7090)
!7120 = !DILocation(line: 1404, column: 41, scope: !7090)
!7121 = !DILocation(line: 1403, column: 7, scope: !7090)
!7122 = !DILocation(line: 1406, column: 30, scope: !7090)
!7123 = !DILocation(line: 1406, column: 44, scope: !7090)
!7124 = !DILocation(line: 1406, column: 7, scope: !7090)
!7125 = !DILocation(line: 1407, column: 7, scope: !7090)
!7126 = !DILocation(line: 1408, column: 31, scope: !7090)
!7127 = !DILocation(line: 1408, column: 7, scope: !7090)
!7128 = !DILocation(line: 1409, column: 7, scope: !7090)
!7129 = !DILocation(line: 1410, column: 7, scope: !7090)
!7130 = !DILocation(line: 1410, column: 39, scope: !7090)
!7131 = !DILocation(line: 1411, column: 5, scope: !7090)
!7132 = !DILocalVariable(name: "restype", scope: !7133, file: !3, line: 1414, type: !1821)
!7133 = distinct !DILexicalBlock(scope: !7080, file: !3, line: 1413, column: 5)
!7134 = !DILocation(line: 1414, column: 12, scope: !7133)
!7135 = !DILocalVariable(name: "bb", scope: !7133, file: !3, line: 1415, type: !2586)
!7136 = !DILocation(line: 1415, column: 19, scope: !7133)
!7137 = !DILocalVariable(name: "then_bb", scope: !7133, file: !3, line: 1415, type: !2586)
!7138 = !DILocation(line: 1415, column: 23, scope: !7133)
!7139 = !DILocalVariable(name: "else_bb", scope: !7133, file: !3, line: 1415, type: !2586)
!7140 = !DILocation(line: 1415, column: 32, scope: !7133)
!7141 = !DILocalVariable(name: "return_bb", scope: !7133, file: !3, line: 1415, type: !2586)
!7142 = !DILocation(line: 1415, column: 41, scope: !7133)
!7143 = !DILocalVariable(name: "bsi", scope: !7133, file: !3, line: 1416, type: !3984)
!7144 = !DILocation(line: 1416, column: 28, scope: !7133)
!7145 = !DILocalVariable(name: "nargs", scope: !7133, file: !3, line: 1417, type: !1918)
!7146 = !DILocation(line: 1417, column: 11, scope: !7133)
!7147 = !DILocalVariable(name: "arg", scope: !7133, file: !3, line: 1418, type: !1821)
!7148 = !DILocation(line: 1418, column: 12, scope: !7133)
!7149 = !DILocalVariable(name: "i", scope: !7133, file: !3, line: 1419, type: !1918)
!7150 = !DILocation(line: 1419, column: 11, scope: !7133)
!7151 = !DILocalVariable(name: "resdecl", scope: !7133, file: !3, line: 1420, type: !1821)
!7152 = !DILocation(line: 1420, column: 12, scope: !7133)
!7153 = !DILocalVariable(name: "restmp", scope: !7133, file: !3, line: 1421, type: !1821)
!7154 = !DILocation(line: 1421, column: 12, scope: !7133)
!7155 = !DILocalVariable(name: "vargs", scope: !7133, file: !3, line: 1422, type: !3158)
!7156 = !DILocation(line: 1422, column: 24, scope: !7133)
!7157 = !DILocalVariable(name: "call", scope: !7133, file: !3, line: 1424, type: !2152)
!7158 = !DILocation(line: 1424, column: 14, scope: !7133)
!7159 = !DILocalVariable(name: "ret", scope: !7133, file: !3, line: 1425, type: !2152)
!7160 = !DILocation(line: 1425, column: 14, scope: !7133)
!7161 = !DILocation(line: 1427, column: 7, scope: !7133)
!7162 = !DILocation(line: 1427, column: 37, scope: !7133)
!7163 = !DILocation(line: 1428, column: 7, scope: !7133)
!7164 = !DILocation(line: 1430, column: 11, scope: !7165)
!7165 = distinct !DILexicalBlock(scope: !7133, file: !3, line: 1430, column: 11)
!7166 = !DILocation(line: 1430, column: 17, scope: !7165)
!7167 = !DILocation(line: 1430, column: 23, scope: !7165)
!7168 = !DILocation(line: 1430, column: 11, scope: !7133)
!7169 = !DILocation(line: 1431, column: 26, scope: !7165)
!7170 = !DILocation(line: 1431, column: 24, scope: !7165)
!7171 = !DILocation(line: 1431, column: 9, scope: !7165)
!7172 = !DILocation(line: 1434, column: 17, scope: !7133)
!7173 = !DILocation(line: 1434, column: 15, scope: !7133)
!7174 = !DILocation(line: 1435, column: 11, scope: !7175)
!7175 = distinct !DILexicalBlock(scope: !7133, file: !3, line: 1435, column: 11)
!7176 = !DILocation(line: 1435, column: 38, scope: !7175)
!7177 = !DILocation(line: 1435, column: 11, scope: !7133)
!7178 = !DILocation(line: 1437, column: 14, scope: !7179)
!7179 = distinct !DILexicalBlock(scope: !7175, file: !3, line: 1436, column: 2)
!7180 = !DILocation(line: 1437, column: 12, scope: !7179)
!7181 = !DILocation(line: 1438, column: 4, scope: !7179)
!7182 = !DILocation(line: 1438, column: 30, scope: !7179)
!7183 = !DILocation(line: 1439, column: 4, scope: !7179)
!7184 = !DILocation(line: 1439, column: 29, scope: !7179)
!7185 = !DILocation(line: 1440, column: 33, scope: !7179)
!7186 = !DILocation(line: 1440, column: 4, scope: !7179)
!7187 = !DILocation(line: 1440, column: 31, scope: !7179)
!7188 = !DILocation(line: 1441, column: 2, scope: !7179)
!7189 = !DILocation(line: 1443, column: 12, scope: !7175)
!7190 = !DILocation(line: 1443, column: 10, scope: !7175)
!7191 = !DILocation(line: 1445, column: 73, scope: !7133)
!7192 = !DILocation(line: 1445, column: 44, scope: !7133)
!7193 = !DILocation(line: 1445, column: 42, scope: !7133)
!7194 = !DILocation(line: 1445, column: 30, scope: !7133)
!7195 = !DILocation(line: 1445, column: 20, scope: !7133)
!7196 = !DILocation(line: 1445, column: 10, scope: !7133)
!7197 = !DILocation(line: 1447, column: 27, scope: !7133)
!7198 = !DILocation(line: 1447, column: 13, scope: !7133)
!7199 = !DILocation(line: 1450, column: 12, scope: !7200)
!7200 = distinct !DILexicalBlock(scope: !7133, file: !3, line: 1450, column: 11)
!7201 = !DILocation(line: 1450, column: 11, scope: !7133)
!7202 = !DILocation(line: 1452, column: 29, scope: !7203)
!7203 = distinct !DILexicalBlock(scope: !7204, file: !3, line: 1452, column: 8)
!7204 = distinct !DILexicalBlock(scope: !7200, file: !3, line: 1451, column: 2)
!7205 = !DILocation(line: 1452, column: 9, scope: !7203)
!7206 = !DILocation(line: 1452, column: 8, scope: !7204)
!7207 = !DILocation(line: 1454, column: 17, scope: !7208)
!7208 = distinct !DILexicalBlock(scope: !7203, file: !3, line: 1453, column: 6)
!7209 = !DILocation(line: 1454, column: 15, scope: !7208)
!7210 = !DILocation(line: 1455, column: 28, scope: !7208)
!7211 = !DILocation(line: 1455, column: 8, scope: !7208)
!7212 = !DILocation(line: 1455, column: 14, scope: !7208)
!7213 = !DILocation(line: 1455, column: 26, scope: !7208)
!7214 = !DILocation(line: 1456, column: 60, scope: !7208)
!7215 = !DILocation(line: 1456, column: 8, scope: !7208)
!7216 = !DILocation(line: 1456, column: 58, scope: !7208)
!7217 = !DILocation(line: 1457, column: 6, scope: !7208)
!7218 = !DILocation(line: 1459, column: 42, scope: !7203)
!7219 = !DILocation(line: 1459, column: 22, scope: !7203)
!7220 = !DILocation(line: 1459, column: 20, scope: !7203)
!7221 = !DILocation(line: 1460, column: 2, scope: !7204)
!7222 = !DILocation(line: 1462, column: 18, scope: !7223)
!7223 = distinct !DILexicalBlock(scope: !7133, file: !3, line: 1462, column: 7)
!7224 = !DILocation(line: 1462, column: 16, scope: !7223)
!7225 = !DILocation(line: 1462, column: 12, scope: !7223)
!7226 = !DILocation(line: 1462, column: 21, scope: !7227)
!7227 = distinct !DILexicalBlock(scope: !7223, file: !3, line: 1462, column: 7)
!7228 = !DILocation(line: 1462, column: 7, scope: !7223)
!7229 = !DILocation(line: 1463, column: 14, scope: !7227)
!7230 = !DILocation(line: 1463, column: 9, scope: !7227)
!7231 = !DILocation(line: 1462, column: 32, scope: !7227)
!7232 = !DILocation(line: 1462, column: 30, scope: !7227)
!7233 = !DILocation(line: 1462, column: 7, scope: !7227)
!7234 = distinct !{!7234, !7228, !7235}
!7235 = !DILocation(line: 1463, column: 14, scope: !7223)
!7236 = !DILocation(line: 1464, column: 15, scope: !7133)
!7237 = !DILocation(line: 1464, column: 13, scope: !7133)
!7238 = !DILocation(line: 1465, column: 11, scope: !7239)
!7239 = distinct !DILexicalBlock(scope: !7133, file: !3, line: 1465, column: 11)
!7240 = !DILocation(line: 1465, column: 11, scope: !7133)
!7241 = !DILocation(line: 1466, column: 9, scope: !7239)
!7242 = !DILocation(line: 1471, column: 9, scope: !7239)
!7243 = !DILocation(line: 1472, column: 14, scope: !7244)
!7244 = distinct !DILexicalBlock(scope: !7133, file: !3, line: 1472, column: 7)
!7245 = !DILocation(line: 1472, column: 25, scope: !7244)
!7246 = !DILocation(line: 1472, column: 23, scope: !7244)
!7247 = !DILocation(line: 1472, column: 12, scope: !7244)
!7248 = !DILocation(line: 1472, column: 41, scope: !7249)
!7249 = distinct !DILexicalBlock(scope: !7244, file: !3, line: 1472, column: 7)
!7250 = !DILocation(line: 1472, column: 45, scope: !7249)
!7251 = !DILocation(line: 1472, column: 43, scope: !7249)
!7252 = !DILocation(line: 1472, column: 7, scope: !7244)
!7253 = !DILocation(line: 1473, column: 9, scope: !7249)
!7254 = !DILocation(line: 1472, column: 53, scope: !7249)
!7255 = !DILocation(line: 1472, column: 63, scope: !7249)
!7256 = !DILocation(line: 1472, column: 61, scope: !7249)
!7257 = !DILocation(line: 1472, column: 7, scope: !7249)
!7258 = distinct !{!7258, !7252, !7259}
!7259 = !DILocation(line: 1473, column: 9, scope: !7244)
!7260 = !DILocation(line: 1474, column: 66, scope: !7133)
!7261 = !DILocation(line: 1474, column: 37, scope: !7133)
!7262 = !DILocation(line: 1474, column: 74, scope: !7133)
!7263 = !DILocation(line: 1474, column: 14, scope: !7133)
!7264 = !DILocation(line: 1474, column: 12, scope: !7133)
!7265 = !DILocation(line: 1475, column: 7, scope: !7133)
!7266 = !DILocation(line: 1476, column: 38, scope: !7133)
!7267 = !DILocation(line: 1476, column: 7, scope: !7133)
!7268 = !DILocation(line: 1477, column: 35, scope: !7133)
!7269 = !DILocation(line: 1477, column: 7, scope: !7133)
!7270 = !DILocation(line: 1478, column: 11, scope: !7271)
!7271 = distinct !DILexicalBlock(scope: !7133, file: !3, line: 1478, column: 11)
!7272 = !DILocation(line: 1478, column: 11, scope: !7133)
!7273 = !DILocation(line: 1479, column: 30, scope: !7271)
!7274 = !DILocation(line: 1479, column: 36, scope: !7271)
!7275 = !DILocation(line: 1479, column: 9, scope: !7271)
!7276 = !DILocation(line: 1480, column: 31, scope: !7133)
!7277 = !DILocation(line: 1480, column: 7, scope: !7133)
!7278 = !DILocation(line: 1481, column: 34, scope: !7133)
!7279 = !DILocation(line: 1481, column: 7, scope: !7133)
!7280 = !DILocation(line: 1482, column: 32, scope: !7133)
!7281 = !DILocation(line: 1482, column: 7, scope: !7133)
!7282 = !DILocation(line: 1483, column: 20, scope: !7133)
!7283 = !DILocation(line: 1483, column: 7, scope: !7133)
!7284 = !DILocation(line: 1485, column: 11, scope: !7285)
!7285 = distinct !DILexicalBlock(scope: !7133, file: !3, line: 1485, column: 11)
!7286 = !DILocation(line: 1485, column: 18, scope: !7285)
!7287 = !DILocation(line: 1485, column: 22, scope: !7285)
!7288 = !DILocation(line: 1485, column: 11, scope: !7133)
!7289 = !DILocalVariable(name: "true_label", scope: !7290, file: !3, line: 1487, type: !1821)
!7290 = distinct !DILexicalBlock(scope: !7285, file: !3, line: 1486, column: 9)
!7291 = !DILocation(line: 1487, column: 9, scope: !7290)
!7292 = !DILocation(line: 1489, column: 8, scope: !7293)
!7293 = distinct !DILexicalBlock(scope: !7290, file: !3, line: 1489, column: 8)
!7294 = !DILocation(line: 1489, column: 39, scope: !7293)
!7295 = !DILocation(line: 1489, column: 8, scope: !7290)
!7296 = !DILocalVariable(name: "stmt", scope: !7297, file: !3, line: 1491, type: !2152)
!7297 = distinct !DILexicalBlock(scope: !7293, file: !3, line: 1490, column: 6)
!7298 = !DILocation(line: 1491, column: 15, scope: !7297)
!7299 = !DILocation(line: 1496, column: 56, scope: !7297)
!7300 = !DILocation(line: 1496, column: 18, scope: !7297)
!7301 = !DILocation(line: 1496, column: 16, scope: !7297)
!7302 = !DILocation(line: 1497, column: 58, scope: !7297)
!7303 = !DILocation(line: 1497, column: 20, scope: !7297)
!7304 = !DILocation(line: 1497, column: 18, scope: !7297)
!7305 = !DILocation(line: 1498, column: 56, scope: !7297)
!7306 = !DILocation(line: 1498, column: 18, scope: !7297)
!7307 = !DILocation(line: 1498, column: 16, scope: !7297)
!7308 = !DILocation(line: 1499, column: 39, scope: !7297)
!7309 = !DILocation(line: 1499, column: 21, scope: !7297)
!7310 = !DILocation(line: 1499, column: 8, scope: !7297)
!7311 = !DILocation(line: 1500, column: 41, scope: !7297)
!7312 = !DILocation(line: 1500, column: 21, scope: !7297)
!7313 = !DILocation(line: 1500, column: 19, scope: !7297)
!7314 = !DILocation(line: 1501, column: 43, scope: !7297)
!7315 = !DILocation(line: 1502, column: 12, scope: !7297)
!7316 = !DILocation(line: 1501, column: 15, scope: !7297)
!7317 = !DILocation(line: 1501, column: 13, scope: !7297)
!7318 = !DILocation(line: 1505, column: 32, scope: !7297)
!7319 = !DILocation(line: 1505, column: 8, scope: !7297)
!7320 = !DILocation(line: 1506, column: 19, scope: !7297)
!7321 = !DILocation(line: 1506, column: 23, scope: !7297)
!7322 = !DILocation(line: 1506, column: 8, scope: !7297)
!7323 = !DILocation(line: 1507, column: 19, scope: !7297)
!7324 = !DILocation(line: 1507, column: 23, scope: !7297)
!7325 = !DILocation(line: 1507, column: 8, scope: !7297)
!7326 = !DILocation(line: 1508, column: 19, scope: !7297)
!7327 = !DILocation(line: 1508, column: 30, scope: !7297)
!7328 = !DILocation(line: 1508, column: 8, scope: !7297)
!7329 = !DILocation(line: 1509, column: 19, scope: !7297)
!7330 = !DILocation(line: 1509, column: 28, scope: !7297)
!7331 = !DILocation(line: 1509, column: 8, scope: !7297)
!7332 = !DILocation(line: 1510, column: 19, scope: !7297)
!7333 = !DILocation(line: 1510, column: 28, scope: !7297)
!7334 = !DILocation(line: 1510, column: 8, scope: !7297)
!7335 = !DILocation(line: 1511, column: 27, scope: !7297)
!7336 = !DILocation(line: 1511, column: 14, scope: !7297)
!7337 = !DILocation(line: 1512, column: 6, scope: !7297)
!7338 = !DILocation(line: 1514, column: 33, scope: !7290)
!7339 = !DILocation(line: 1515, column: 13, scope: !7290)
!7340 = !DILocation(line: 1515, column: 27, scope: !7290)
!7341 = !DILocation(line: 1514, column: 13, scope: !7290)
!7342 = !DILocation(line: 1514, column: 11, scope: !7290)
!7343 = !DILocation(line: 1516, column: 8, scope: !7344)
!7344 = distinct !DILexicalBlock(scope: !7290, file: !3, line: 1516, column: 8)
!7345 = !DILocation(line: 1516, column: 8, scope: !7290)
!7346 = !DILocalVariable(name: "stmt", scope: !7347, file: !3, line: 1518, type: !2152)
!7347 = distinct !DILexicalBlock(scope: !7344, file: !3, line: 1517, column: 6)
!7348 = !DILocation(line: 1518, column: 15, scope: !7347)
!7349 = !DILocation(line: 1519, column: 27, scope: !7347)
!7350 = !DILocation(line: 1519, column: 14, scope: !7347)
!7351 = !DILocation(line: 1520, column: 15, scope: !7347)
!7352 = !DILocation(line: 1520, column: 13, scope: !7347)
!7353 = !DILocation(line: 1522, column: 32, scope: !7347)
!7354 = !DILocation(line: 1522, column: 8, scope: !7347)
!7355 = !DILocation(line: 1523, column: 27, scope: !7347)
!7356 = !DILocation(line: 1523, column: 14, scope: !7347)
!7357 = !DILocation(line: 1524, column: 6, scope: !7347)
!7358 = !DILocation(line: 1525, column: 2, scope: !7290)
!7359 = !DILocation(line: 1527, column: 31, scope: !7285)
!7360 = !DILocation(line: 1527, column: 9, scope: !7285)
!7361 = !DILocation(line: 1530, column: 34, scope: !7133)
!7362 = !DILocation(line: 1530, column: 13, scope: !7133)
!7363 = !DILocation(line: 1530, column: 11, scope: !7133)
!7364 = !DILocation(line: 1531, column: 31, scope: !7133)
!7365 = !DILocation(line: 1531, column: 7, scope: !7133)
!7366 = !DILocation(line: 1533, column: 7, scope: !7133)
!7367 = !DILocation(line: 1534, column: 7, scope: !7133)
!7368 = !DILocation(line: 1536, column: 38, scope: !7133)
!7369 = !DILocation(line: 1536, column: 7, scope: !7133)
!7370 = !DILocation(line: 1539, column: 29, scope: !7133)
!7371 = !DILocation(line: 1539, column: 7, scope: !7133)
!7372 = !DILocation(line: 1540, column: 32, scope: !7133)
!7373 = !DILocation(line: 1540, column: 7, scope: !7133)
!7374 = !DILocation(line: 1541, column: 7, scope: !7133)
!7375 = !DILocation(line: 1543, column: 25, scope: !7045)
!7376 = !DILocation(line: 1544, column: 1, scope: !7045)
!7377 = distinct !DISubprogram(name: "init_lowered_empty_function", scope: !3, file: !3, line: 1211, type: !7378, scopeLine: 1212, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!7378 = !DISubroutineType(types: !7379)
!7379 = !{!2586, !1821}
!7380 = !DILocalVariable(name: "decl", arg: 1, scope: !7377, file: !3, line: 1211, type: !1821)
!7381 = !DILocation(line: 1211, column: 35, scope: !7377)
!7382 = !DILocalVariable(name: "bb", scope: !7377, file: !3, line: 1213, type: !2586)
!7383 = !DILocation(line: 1213, column: 15, scope: !7377)
!7384 = !DILocation(line: 1215, column: 27, scope: !7377)
!7385 = !DILocation(line: 1215, column: 25, scope: !7377)
!7386 = !DILocation(line: 1216, column: 29, scope: !7377)
!7387 = !DILocation(line: 1216, column: 3, scope: !7377)
!7388 = !DILocation(line: 1217, column: 3, scope: !7377)
!7389 = !DILocation(line: 1218, column: 3, scope: !7377)
!7390 = !DILocation(line: 1219, column: 18, scope: !7377)
!7391 = !DILocation(line: 1219, column: 3, scope: !7377)
!7392 = !DILocation(line: 1220, column: 3, scope: !7377)
!7393 = !DILocation(line: 1221, column: 3, scope: !7377)
!7394 = !DILocation(line: 1221, column: 9, scope: !7377)
!7395 = !DILocation(line: 1221, column: 20, scope: !7377)
!7396 = !DILocation(line: 1221, column: 29, scope: !7377)
!7397 = !DILocation(line: 1222, column: 25, scope: !7377)
!7398 = !DILocation(line: 1222, column: 3, scope: !7377)
!7399 = !DILocation(line: 1222, column: 23, scope: !7377)
!7400 = !DILocation(line: 1224, column: 28, scope: !7377)
!7401 = !DILocation(line: 1224, column: 3, scope: !7377)
!7402 = !DILocation(line: 1224, column: 26, scope: !7377)
!7403 = !DILocation(line: 1225, column: 3, scope: !7377)
!7404 = !DILocation(line: 1225, column: 9, scope: !7377)
!7405 = !DILocation(line: 1225, column: 25, scope: !7377)
!7406 = !DILocation(line: 1230, column: 46, scope: !7377)
!7407 = !DILocation(line: 1230, column: 8, scope: !7377)
!7408 = !DILocation(line: 1230, column: 6, scope: !7377)
!7409 = !DILocation(line: 1231, column: 14, scope: !7377)
!7410 = !DILocation(line: 1231, column: 31, scope: !7377)
!7411 = !DILocation(line: 1231, column: 3, scope: !7377)
!7412 = !DILocation(line: 1232, column: 14, scope: !7377)
!7413 = !DILocation(line: 1232, column: 18, scope: !7377)
!7414 = !DILocation(line: 1232, column: 3, scope: !7377)
!7415 = !DILocation(line: 1234, column: 10, scope: !7377)
!7416 = !DILocation(line: 1234, column: 3, scope: !7377)
!7417 = distinct !DISubprogram(name: "VEC_tree_heap_alloc", scope: !135, file: !135, line: 184, type: !7418, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!7418 = !DISubroutineType(types: !7419)
!7419 = !{!3158, !1918}
!7420 = !DILocalVariable(name: "alloc_", arg: 1, scope: !7417, file: !135, line: 184, type: !1918)
!7421 = !DILocation(line: 184, column: 1, scope: !7417)
!7422 = distinct !DISubprogram(name: "thunk_adjust", scope: !3, file: !3, line: 1243, type: !7423, scopeLine: 1246, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!7423 = !DISubroutineType(types: !7424)
!7424 = !{!1821, !4649, !1821, !1941, !1877, !1821}
!7425 = !DILocalVariable(name: "bsi", arg: 1, scope: !7422, file: !3, line: 1243, type: !4649)
!7426 = !DILocation(line: 1243, column: 38, scope: !7422)
!7427 = !DILocalVariable(name: "ptr", arg: 2, scope: !7422, file: !3, line: 1244, type: !1821)
!7428 = !DILocation(line: 1244, column: 13, scope: !7422)
!7429 = !DILocalVariable(name: "this_adjusting", arg: 3, scope: !7422, file: !3, line: 1244, type: !1941)
!7430 = !DILocation(line: 1244, column: 23, scope: !7422)
!7431 = !DILocalVariable(name: "fixed_offset", arg: 4, scope: !7422, file: !3, line: 1245, type: !1877)
!7432 = !DILocation(line: 1245, column: 22, scope: !7422)
!7433 = !DILocalVariable(name: "virtual_offset", arg: 5, scope: !7422, file: !3, line: 1245, type: !1821)
!7434 = !DILocation(line: 1245, column: 41, scope: !7422)
!7435 = !DILocalVariable(name: "stmt", scope: !7422, file: !3, line: 1247, type: !2152)
!7436 = !DILocation(line: 1247, column: 10, scope: !7422)
!7437 = !DILocalVariable(name: "ret", scope: !7422, file: !3, line: 1248, type: !1821)
!7438 = !DILocation(line: 1248, column: 8, scope: !7422)
!7439 = !DILocation(line: 1250, column: 7, scope: !7440)
!7440 = distinct !DILexicalBlock(scope: !7422, file: !3, line: 1250, column: 7)
!7441 = !DILocation(line: 1251, column: 7, scope: !7440)
!7442 = !DILocation(line: 1251, column: 10, scope: !7440)
!7443 = !DILocation(line: 1251, column: 23, scope: !7440)
!7444 = !DILocation(line: 1250, column: 7, scope: !7422)
!7445 = !DILocation(line: 1253, column: 14, scope: !7446)
!7446 = distinct !DILexicalBlock(scope: !7440, file: !3, line: 1252, column: 5)
!7447 = !DILocation(line: 1253, column: 12, scope: !7446)
!7448 = !DILocation(line: 1258, column: 25, scope: !7446)
!7449 = !DILocation(line: 1258, column: 30, scope: !7446)
!7450 = !DILocation(line: 1258, column: 7, scope: !7446)
!7451 = !DILocation(line: 1259, column: 5, scope: !7446)
!7452 = !DILocation(line: 1263, column: 7, scope: !7453)
!7453 = distinct !DILexicalBlock(scope: !7422, file: !3, line: 1263, column: 7)
!7454 = !DILocation(line: 1263, column: 7, scope: !7422)
!7455 = !DILocalVariable(name: "vtabletmp", scope: !7456, file: !3, line: 1265, type: !1821)
!7456 = distinct !DILexicalBlock(scope: !7453, file: !3, line: 1264, column: 5)
!7457 = !DILocation(line: 1265, column: 12, scope: !7456)
!7458 = !DILocalVariable(name: "vtabletmp2", scope: !7456, file: !3, line: 1266, type: !1821)
!7459 = !DILocation(line: 1266, column: 12, scope: !7456)
!7460 = !DILocalVariable(name: "vtabletmp3", scope: !7456, file: !3, line: 1267, type: !1821)
!7461 = !DILocation(line: 1267, column: 12, scope: !7456)
!7462 = !DILocalVariable(name: "offsettmp", scope: !7456, file: !3, line: 1268, type: !1821)
!7463 = !DILocation(line: 1268, column: 12, scope: !7456)
!7464 = !DILocation(line: 1270, column: 12, scope: !7465)
!7465 = distinct !DILexicalBlock(scope: !7456, file: !3, line: 1270, column: 11)
!7466 = !DILocation(line: 1270, column: 11, scope: !7456)
!7467 = !DILocalVariable(name: "vfunc_type", scope: !7468, file: !3, line: 1272, type: !1821)
!7468 = distinct !DILexicalBlock(scope: !7465, file: !3, line: 1271, column: 2)
!7469 = !DILocation(line: 1272, column: 9, scope: !7468)
!7470 = !DILocation(line: 1272, column: 22, scope: !7468)
!7471 = !DILocation(line: 1273, column: 29, scope: !7468)
!7472 = !DILocation(line: 1273, column: 4, scope: !7468)
!7473 = !DILocation(line: 1273, column: 27, scope: !7468)
!7474 = !DILocation(line: 1274, column: 4, scope: !7468)
!7475 = !DILocation(line: 1274, column: 32, scope: !7468)
!7476 = !DILocation(line: 1275, column: 17, scope: !7468)
!7477 = !DILocation(line: 1275, column: 4, scope: !7468)
!7478 = !DILocation(line: 1277, column: 44, scope: !7468)
!7479 = !DILocation(line: 1277, column: 24, scope: !7468)
!7480 = !DILocation(line: 1277, column: 22, scope: !7468)
!7481 = !DILocation(line: 1278, column: 2, scope: !7468)
!7482 = !DILocation(line: 1282, column: 25, scope: !7456)
!7483 = !DILocation(line: 1282, column: 5, scope: !7456)
!7484 = !DILocation(line: 1281, column: 18, scope: !7456)
!7485 = !DILocation(line: 1281, column: 2, scope: !7456)
!7486 = !DILocation(line: 1280, column: 17, scope: !7456)
!7487 = !DILocation(line: 1285, column: 14, scope: !7456)
!7488 = !DILocation(line: 1285, column: 12, scope: !7456)
!7489 = !DILocation(line: 1288, column: 25, scope: !7456)
!7490 = !DILocation(line: 1288, column: 30, scope: !7456)
!7491 = !DILocation(line: 1288, column: 7, scope: !7456)
!7492 = !DILocation(line: 1289, column: 34, scope: !7456)
!7493 = !DILocation(line: 1289, column: 7, scope: !7456)
!7494 = !DILocation(line: 1290, column: 32, scope: !7456)
!7495 = !DILocation(line: 1290, column: 7, scope: !7456)
!7496 = !DILocation(line: 1293, column: 36, scope: !7456)
!7497 = !DILocation(line: 1293, column: 20, scope: !7456)
!7498 = !DILocation(line: 1293, column: 18, scope: !7456)
!7499 = !DILocation(line: 1295, column: 14, scope: !7456)
!7500 = !DILocation(line: 1295, column: 12, scope: !7456)
!7501 = !DILocation(line: 1298, column: 25, scope: !7456)
!7502 = !DILocation(line: 1298, column: 30, scope: !7456)
!7503 = !DILocation(line: 1298, column: 7, scope: !7456)
!7504 = !DILocation(line: 1299, column: 34, scope: !7456)
!7505 = !DILocation(line: 1299, column: 7, scope: !7456)
!7506 = !DILocation(line: 1300, column: 32, scope: !7456)
!7507 = !DILocation(line: 1300, column: 7, scope: !7456)
!7508 = !DILocation(line: 1303, column: 14, scope: !7456)
!7509 = !DILocation(line: 1303, column: 12, scope: !7456)
!7510 = !DILocation(line: 1310, column: 25, scope: !7456)
!7511 = !DILocation(line: 1310, column: 30, scope: !7456)
!7512 = !DILocation(line: 1310, column: 7, scope: !7456)
!7513 = !DILocation(line: 1313, column: 36, scope: !7456)
!7514 = !DILocation(line: 1313, column: 20, scope: !7456)
!7515 = !DILocation(line: 1313, column: 18, scope: !7456)
!7516 = !DILocation(line: 1315, column: 14, scope: !7456)
!7517 = !DILocation(line: 1315, column: 12, scope: !7456)
!7518 = !DILocation(line: 1319, column: 25, scope: !7456)
!7519 = !DILocation(line: 1319, column: 30, scope: !7456)
!7520 = !DILocation(line: 1319, column: 7, scope: !7456)
!7521 = !DILocation(line: 1320, column: 34, scope: !7456)
!7522 = !DILocation(line: 1320, column: 7, scope: !7456)
!7523 = !DILocation(line: 1321, column: 32, scope: !7456)
!7524 = !DILocation(line: 1321, column: 7, scope: !7456)
!7525 = !DILocation(line: 1324, column: 35, scope: !7456)
!7526 = !DILocation(line: 1324, column: 19, scope: !7456)
!7527 = !DILocation(line: 1324, column: 17, scope: !7456)
!7528 = !DILocation(line: 1325, column: 14, scope: !7456)
!7529 = !DILocation(line: 1325, column: 12, scope: !7456)
!7530 = !DILocation(line: 1326, column: 25, scope: !7456)
!7531 = !DILocation(line: 1326, column: 30, scope: !7456)
!7532 = !DILocation(line: 1326, column: 7, scope: !7456)
!7533 = !DILocation(line: 1327, column: 34, scope: !7456)
!7534 = !DILocation(line: 1327, column: 7, scope: !7456)
!7535 = !DILocation(line: 1328, column: 32, scope: !7456)
!7536 = !DILocation(line: 1328, column: 7, scope: !7456)
!7537 = !DILocation(line: 1331, column: 13, scope: !7456)
!7538 = !DILocation(line: 1331, column: 11, scope: !7456)
!7539 = !DILocation(line: 1334, column: 5, scope: !7456)
!7540 = !DILocation(line: 1336, column: 8, scope: !7541)
!7541 = distinct !DILexicalBlock(scope: !7422, file: !3, line: 1336, column: 7)
!7542 = !DILocation(line: 1337, column: 7, scope: !7541)
!7543 = !DILocation(line: 1337, column: 10, scope: !7541)
!7544 = !DILocation(line: 1337, column: 23, scope: !7541)
!7545 = !DILocation(line: 1336, column: 7, scope: !7422)
!7546 = !DILocalVariable(name: "ptrtmp", scope: !7547, file: !3, line: 1340, type: !1821)
!7547 = distinct !DILexicalBlock(scope: !7541, file: !3, line: 1339, column: 5)
!7548 = !DILocation(line: 1340, column: 12, scope: !7547)
!7549 = !DILocation(line: 1342, column: 11, scope: !7550)
!7550 = distinct !DILexicalBlock(scope: !7547, file: !3, line: 1342, column: 11)
!7551 = !DILocation(line: 1342, column: 27, scope: !7550)
!7552 = !DILocation(line: 1342, column: 11, scope: !7547)
!7553 = !DILocation(line: 1343, column: 18, scope: !7550)
!7554 = !DILocation(line: 1343, column: 16, scope: !7550)
!7555 = !DILocation(line: 1343, column: 9, scope: !7550)
!7556 = !DILocation(line: 1346, column: 36, scope: !7557)
!7557 = distinct !DILexicalBlock(scope: !7550, file: !3, line: 1345, column: 9)
!7558 = !DILocation(line: 1346, column: 20, scope: !7557)
!7559 = !DILocation(line: 1346, column: 18, scope: !7557)
!7560 = !DILocation(line: 1347, column: 18, scope: !7557)
!7561 = !DILocation(line: 1347, column: 16, scope: !7557)
!7562 = !DILocation(line: 1348, column: 22, scope: !7557)
!7563 = !DILocation(line: 1348, column: 27, scope: !7557)
!7564 = !DILocation(line: 1348, column: 4, scope: !7557)
!7565 = !DILocation(line: 1349, column: 31, scope: !7557)
!7566 = !DILocation(line: 1349, column: 4, scope: !7557)
!7567 = !DILocation(line: 1350, column: 29, scope: !7557)
!7568 = !DILocation(line: 1350, column: 4, scope: !7557)
!7569 = !DILocation(line: 1352, column: 13, scope: !7547)
!7570 = !DILocation(line: 1352, column: 11, scope: !7547)
!7571 = !DILocation(line: 1355, column: 5, scope: !7547)
!7572 = !DILocation(line: 1358, column: 25, scope: !7422)
!7573 = !DILocation(line: 1358, column: 9, scope: !7422)
!7574 = !DILocation(line: 1358, column: 7, scope: !7422)
!7575 = !DILocation(line: 1359, column: 10, scope: !7422)
!7576 = !DILocation(line: 1359, column: 8, scope: !7422)
!7577 = !DILocation(line: 1360, column: 30, scope: !7422)
!7578 = !DILocation(line: 1360, column: 3, scope: !7422)
!7579 = !DILocation(line: 1361, column: 28, scope: !7422)
!7580 = !DILocation(line: 1361, column: 3, scope: !7422)
!7581 = !DILocation(line: 1362, column: 21, scope: !7422)
!7582 = !DILocation(line: 1362, column: 26, scope: !7422)
!7583 = !DILocation(line: 1362, column: 3, scope: !7422)
!7584 = !DILocation(line: 1364, column: 10, scope: !7422)
!7585 = !DILocation(line: 1364, column: 3, scope: !7422)
!7586 = distinct !DISubprogram(name: "VEC_tree_heap_free", scope: !135, file: !135, line: 184, type: !7587, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!7587 = !DISubroutineType(types: !7588)
!7588 = !{null, !7589}
!7589 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3158, size: 64)
!7590 = !DILocalVariable(name: "vec_", arg: 1, scope: !7586, file: !135, line: 184, type: !7589)
!7591 = !DILocation(line: 184, column: 1, scope: !7586)
!7592 = !DILocation(line: 184, column: 1, scope: !7593)
!7593 = distinct !DILexicalBlock(scope: !7586, file: !135, line: 184, column: 1)
!7594 = distinct !DISubprogram(name: "gimple_call_set_cannot_inline", scope: !810, file: !810, line: 2081, type: !7595, scopeLine: 2082, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!7595 = !DISubroutineType(types: !7596)
!7596 = !{null, !2152, !1941}
!7597 = !DILocalVariable(name: "s", arg: 1, scope: !7594, file: !810, line: 2081, type: !2152)
!7598 = !DILocation(line: 2081, column: 39, scope: !7594)
!7599 = !DILocalVariable(name: "inlinable_p", arg: 2, scope: !7594, file: !810, line: 2081, type: !1941)
!7600 = !DILocation(line: 2081, column: 47, scope: !7594)
!7601 = !DILocation(line: 2084, column: 7, scope: !7602)
!7602 = distinct !DILexicalBlock(scope: !7594, file: !810, line: 2084, column: 7)
!7603 = !DILocation(line: 2084, column: 7, scope: !7594)
!7604 = !DILocation(line: 2085, column: 5, scope: !7602)
!7605 = !DILocation(line: 2085, column: 8, scope: !7602)
!7606 = !DILocation(line: 2085, column: 15, scope: !7602)
!7607 = !DILocation(line: 2085, column: 23, scope: !7602)
!7608 = !DILocation(line: 2087, column: 5, scope: !7602)
!7609 = !DILocation(line: 2087, column: 8, scope: !7602)
!7610 = !DILocation(line: 2087, column: 15, scope: !7602)
!7611 = !DILocation(line: 2087, column: 23, scope: !7602)
!7612 = !DILocation(line: 2088, column: 1, scope: !7594)
!7613 = distinct !DISubprogram(name: "gimple_call_set_from_thunk", scope: !810, file: !810, line: 2130, type: !7595, scopeLine: 2131, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!7614 = !DILocalVariable(name: "s", arg: 1, scope: !7613, file: !810, line: 2130, type: !2152)
!7615 = !DILocation(line: 2130, column: 36, scope: !7613)
!7616 = !DILocalVariable(name: "from_thunk_p", arg: 2, scope: !7613, file: !810, line: 2130, type: !1941)
!7617 = !DILocation(line: 2130, column: 44, scope: !7613)
!7618 = !DILocation(line: 2133, column: 7, scope: !7619)
!7619 = distinct !DILexicalBlock(scope: !7613, file: !810, line: 2133, column: 7)
!7620 = !DILocation(line: 2133, column: 7, scope: !7613)
!7621 = !DILocation(line: 2134, column: 5, scope: !7619)
!7622 = !DILocation(line: 2134, column: 8, scope: !7619)
!7623 = !DILocation(line: 2134, column: 15, scope: !7619)
!7624 = !DILocation(line: 2134, column: 23, scope: !7619)
!7625 = !DILocation(line: 2136, column: 5, scope: !7619)
!7626 = !DILocation(line: 2136, column: 8, scope: !7619)
!7627 = !DILocation(line: 2136, column: 15, scope: !7619)
!7628 = !DILocation(line: 2136, column: 23, scope: !7619)
!7629 = !DILocation(line: 2137, column: 1, scope: !7613)
!7630 = distinct !DISubprogram(name: "gimple_call_set_lhs", scope: !810, file: !810, line: 1898, type: !6500, scopeLine: 1899, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!7631 = !DILocalVariable(name: "gs", arg: 1, scope: !7630, file: !810, line: 1898, type: !2152)
!7632 = !DILocation(line: 1898, column: 29, scope: !7630)
!7633 = !DILocalVariable(name: "lhs", arg: 2, scope: !7630, file: !810, line: 1898, type: !1821)
!7634 = !DILocation(line: 1898, column: 38, scope: !7630)
!7635 = !DILocation(line: 1901, column: 18, scope: !7630)
!7636 = !DILocation(line: 1901, column: 25, scope: !7630)
!7637 = !DILocation(line: 1901, column: 3, scope: !7630)
!7638 = !DILocation(line: 1902, column: 7, scope: !7639)
!7639 = distinct !DILexicalBlock(scope: !7630, file: !810, line: 1902, column: 7)
!7640 = !DILocation(line: 1902, column: 11, scope: !7639)
!7641 = !DILocation(line: 1902, column: 14, scope: !7639)
!7642 = !DILocation(line: 1902, column: 30, scope: !7639)
!7643 = !DILocation(line: 1902, column: 7, scope: !7630)
!7644 = !DILocation(line: 1903, column: 31, scope: !7639)
!7645 = !DILocation(line: 1903, column: 5, scope: !7639)
!7646 = !DILocation(line: 1903, column: 29, scope: !7639)
!7647 = !DILocation(line: 1904, column: 1, scope: !7630)
!7648 = distinct !DISubprogram(name: "update_stmt", scope: !810, file: !810, line: 1456, type: !7649, scopeLine: 1457, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!7649 = !DISubroutineType(types: !7650)
!7650 = !{null, !2152}
!7651 = !DILocalVariable(name: "s", arg: 1, scope: !7648, file: !810, line: 1456, type: !2152)
!7652 = !DILocation(line: 1456, column: 21, scope: !7648)
!7653 = !DILocation(line: 1458, column: 23, scope: !7654)
!7654 = distinct !DILexicalBlock(scope: !7648, file: !810, line: 1458, column: 7)
!7655 = !DILocation(line: 1458, column: 7, scope: !7654)
!7656 = !DILocation(line: 1458, column: 7, scope: !7648)
!7657 = !DILocation(line: 1460, column: 28, scope: !7658)
!7658 = distinct !DILexicalBlock(scope: !7654, file: !810, line: 1459, column: 5)
!7659 = !DILocation(line: 1460, column: 7, scope: !7658)
!7660 = !DILocation(line: 1461, column: 29, scope: !7658)
!7661 = !DILocation(line: 1461, column: 7, scope: !7658)
!7662 = !DILocation(line: 1462, column: 5, scope: !7658)
!7663 = !DILocation(line: 1463, column: 1, scope: !7648)
!7664 = distinct !DISubprogram(name: "single_succ_edge", scope: !330, file: !330, line: 643, type: !7665, scopeLine: 644, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!7665 = !DISubroutineType(types: !7666)
!7666 = !{!2132, !6641}
!7667 = !DILocalVariable(name: "bb", arg: 1, scope: !7664, file: !330, line: 643, type: !6641)
!7668 = !DILocation(line: 643, column: 37, scope: !7664)
!7669 = !DILocation(line: 645, column: 3, scope: !7664)
!7670 = !DILocation(line: 646, column: 10, scope: !7664)
!7671 = !DILocation(line: 646, column: 3, scope: !7664)
!7672 = distinct !DISubprogram(name: "gsi_last_bb", scope: !810, file: !810, line: 4450, type: !4560, scopeLine: 4451, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!7673 = !DILocalVariable(name: "bb", arg: 1, scope: !7672, file: !810, line: 4450, type: !2586)
!7674 = !DILocation(line: 4450, column: 26, scope: !7672)
!7675 = !DILocalVariable(name: "i", scope: !7672, file: !810, line: 4452, type: !3984)
!7676 = !DILocation(line: 4452, column: 24, scope: !7672)
!7677 = !DILocalVariable(name: "seq", scope: !7672, file: !810, line: 4453, type: !2142)
!7678 = !DILocation(line: 4453, column: 14, scope: !7672)
!7679 = !DILocation(line: 4455, column: 17, scope: !7672)
!7680 = !DILocation(line: 4455, column: 9, scope: !7672)
!7681 = !DILocation(line: 4455, column: 7, scope: !7672)
!7682 = !DILocation(line: 4456, column: 28, scope: !7672)
!7683 = !DILocation(line: 4456, column: 11, scope: !7672)
!7684 = !DILocation(line: 4456, column: 5, scope: !7672)
!7685 = !DILocation(line: 4456, column: 9, scope: !7672)
!7686 = !DILocation(line: 4457, column: 11, scope: !7672)
!7687 = !DILocation(line: 4457, column: 5, scope: !7672)
!7688 = !DILocation(line: 4457, column: 9, scope: !7672)
!7689 = !DILocation(line: 4458, column: 10, scope: !7672)
!7690 = !DILocation(line: 4458, column: 5, scope: !7672)
!7691 = !DILocation(line: 4458, column: 8, scope: !7672)
!7692 = !DILocation(line: 4460, column: 3, scope: !7672)
!7693 = distinct !DISubprogram(name: "gimple_call_set_tail", scope: !810, file: !810, line: 2058, type: !7595, scopeLine: 2059, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!7694 = !DILocalVariable(name: "s", arg: 1, scope: !7693, file: !810, line: 2058, type: !2152)
!7695 = !DILocation(line: 2058, column: 30, scope: !7693)
!7696 = !DILocalVariable(name: "tail_p", arg: 2, scope: !7693, file: !810, line: 2058, type: !1941)
!7697 = !DILocation(line: 2058, column: 38, scope: !7693)
!7698 = !DILocation(line: 2061, column: 7, scope: !7699)
!7699 = distinct !DILexicalBlock(scope: !7693, file: !810, line: 2061, column: 7)
!7700 = !DILocation(line: 2061, column: 7, scope: !7693)
!7701 = !DILocation(line: 2062, column: 5, scope: !7699)
!7702 = !DILocation(line: 2062, column: 8, scope: !7699)
!7703 = !DILocation(line: 2062, column: 15, scope: !7699)
!7704 = !DILocation(line: 2062, column: 23, scope: !7699)
!7705 = !DILocation(line: 2064, column: 5, scope: !7699)
!7706 = !DILocation(line: 2064, column: 8, scope: !7699)
!7707 = !DILocation(line: 2064, column: 15, scope: !7699)
!7708 = !DILocation(line: 2064, column: 23, scope: !7699)
!7709 = !DILocation(line: 2065, column: 1, scope: !7693)
!7710 = distinct !DISubprogram(name: "gimple_set_op", scope: !810, file: !810, line: 1663, type: !7711, scopeLine: 1664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!7711 = !DISubroutineType(types: !7712)
!7712 = !{null, !2152, !7, !1821}
!7713 = !DILocalVariable(name: "gs", arg: 1, scope: !7710, file: !810, line: 1663, type: !2152)
!7714 = !DILocation(line: 1663, column: 23, scope: !7710)
!7715 = !DILocalVariable(name: "i", arg: 2, scope: !7710, file: !810, line: 1663, type: !7)
!7716 = !DILocation(line: 1663, column: 36, scope: !7710)
!7717 = !DILocalVariable(name: "op", arg: 3, scope: !7710, file: !810, line: 1663, type: !1821)
!7718 = !DILocation(line: 1663, column: 44, scope: !7710)
!7719 = !DILocation(line: 1665, column: 3, scope: !7710)
!7720 = !DILocation(line: 1671, column: 24, scope: !7710)
!7721 = !DILocation(line: 1671, column: 15, scope: !7710)
!7722 = !DILocation(line: 1671, column: 3, scope: !7710)
!7723 = !DILocation(line: 1671, column: 19, scope: !7710)
!7724 = !DILocation(line: 1671, column: 22, scope: !7710)
!7725 = !DILocation(line: 1672, column: 1, scope: !7710)
!7726 = distinct !DISubprogram(name: "gimple_num_ops", scope: !810, file: !810, line: 1596, type: !7727, scopeLine: 1597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!7727 = !DISubroutineType(types: !7728)
!7728 = !{!7, !4552}
!7729 = !DILocalVariable(name: "gs", arg: 1, scope: !7726, file: !810, line: 1596, type: !4552)
!7730 = !DILocation(line: 1596, column: 30, scope: !7726)
!7731 = !DILocation(line: 1598, column: 10, scope: !7726)
!7732 = !DILocation(line: 1598, column: 14, scope: !7726)
!7733 = !DILocation(line: 1598, column: 21, scope: !7726)
!7734 = !DILocation(line: 1598, column: 3, scope: !7726)
!7735 = distinct !DISubprogram(name: "single_succ_p", scope: !330, file: !330, line: 626, type: !7736, scopeLine: 627, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!7736 = !DISubroutineType(types: !7737)
!7737 = !{!1941, !6641}
!7738 = !DILocalVariable(name: "bb", arg: 1, scope: !7735, file: !330, line: 626, type: !6641)
!7739 = !DILocation(line: 626, column: 34, scope: !7735)
!7740 = !DILocation(line: 628, column: 10, scope: !7735)
!7741 = !DILocation(line: 628, column: 33, scope: !7735)
!7742 = !DILocation(line: 628, column: 3, scope: !7735)
!7743 = distinct !DISubprogram(name: "VEC_edge_base_index", scope: !330, file: !330, line: 150, type: !7744, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!7744 = !DISubroutineType(types: !7745)
!7745 = !{!2132, !7746, !7}
!7746 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7747, size: 64)
!7747 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2125)
!7748 = !DILocalVariable(name: "vec_", arg: 1, scope: !7743, file: !330, line: 150, type: !7746)
!7749 = !DILocation(line: 150, column: 1, scope: !7743)
!7750 = !DILocalVariable(name: "ix_", arg: 2, scope: !7743, file: !330, line: 150, type: !7)
!7751 = !DILocation(line: 0, scope: !7743)
!7752 = distinct !DISubprogram(name: "VEC_edge_base_length", scope: !330, file: !330, line: 150, type: !7753, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!7753 = !DISubroutineType(types: !7754)
!7754 = !{!7, !7746}
!7755 = !DILocalVariable(name: "vec_", arg: 1, scope: !7752, file: !330, line: 150, type: !7746)
!7756 = !DILocation(line: 150, column: 1, scope: !7752)
!7757 = distinct !DISubprogram(name: "gimple_seq_last", scope: !810, file: !810, line: 178, type: !6660, scopeLine: 179, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!7758 = !DILocalVariable(name: "s", arg: 1, scope: !7757, file: !810, line: 178, type: !6662)
!7759 = !DILocation(line: 178, column: 35, scope: !7757)
!7760 = !DILocation(line: 180, column: 10, scope: !7757)
!7761 = !DILocation(line: 180, column: 14, scope: !7757)
!7762 = !DILocation(line: 180, column: 17, scope: !7757)
!7763 = !DILocation(line: 180, column: 3, scope: !7757)
!7764 = distinct !DISubprogram(name: "VEC_cgraph_edge_p_base_iterate", scope: !378, file: !378, line: 352, type: !7765, scopeLine: 352, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!7765 = !DISubroutineType(types: !7766)
!7766 = !{!1918, !7767, !7, !7769}
!7767 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7768, size: 64)
!7768 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !5935)
!7769 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3409, size: 64)
!7770 = !DILocalVariable(name: "vec_", arg: 1, scope: !7764, file: !378, line: 352, type: !7767)
!7771 = !DILocation(line: 352, column: 1, scope: !7764)
!7772 = !DILocalVariable(name: "ix_", arg: 2, scope: !7764, file: !378, line: 352, type: !7)
!7773 = !DILocalVariable(name: "ptr", arg: 3, scope: !7764, file: !378, line: 352, type: !7769)
!7774 = !DILocation(line: 352, column: 1, scope: !7775)
!7775 = distinct !DILexicalBlock(scope: !7764, file: !378, line: 352, column: 1)
!7776 = !DILocation(line: 352, column: 1, scope: !7777)
!7777 = distinct !DILexicalBlock(scope: !7775, file: !378, line: 352, column: 1)
!7778 = !DILocation(line: 352, column: 1, scope: !7779)
!7779 = distinct !DILexicalBlock(scope: !7775, file: !378, line: 352, column: 1)
!7780 = distinct !DISubprogram(name: "gimple_has_mem_ops", scope: !810, file: !810, line: 1283, type: !4600, scopeLine: 1284, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!7781 = !DILocalVariable(name: "g", arg: 1, scope: !7780, file: !810, line: 1283, type: !4552)
!7782 = !DILocation(line: 1283, column: 34, scope: !7780)
!7783 = !DILocation(line: 1285, column: 23, scope: !7780)
!7784 = !DILocation(line: 1285, column: 10, scope: !7780)
!7785 = !DILocation(line: 1285, column: 26, scope: !7780)
!7786 = !DILocation(line: 1285, column: 43, scope: !7780)
!7787 = !DILocation(line: 1285, column: 59, scope: !7780)
!7788 = !DILocation(line: 1285, column: 46, scope: !7780)
!7789 = !DILocation(line: 1285, column: 62, scope: !7780)
!7790 = !DILocation(line: 0, scope: !7780)
!7791 = !DILocation(line: 1285, column: 3, scope: !7780)
!7792 = distinct !DISubprogram(name: "gimple_location", scope: !810, file: !810, line: 1139, type: !7793, scopeLine: 1140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3416)
!7793 = !DISubroutineType(types: !7794)
!7794 = !{!1949, !4552}
!7795 = !DILocalVariable(name: "g", arg: 1, scope: !7792, file: !810, line: 1139, type: !4552)
!7796 = !DILocation(line: 1139, column: 31, scope: !7792)
!7797 = !DILocation(line: 1141, column: 10, scope: !7792)
!7798 = !DILocation(line: 1141, column: 13, scope: !7792)
!7799 = !DILocation(line: 1141, column: 20, scope: !7792)
!7800 = !DILocation(line: 1141, column: 3, scope: !7792)
