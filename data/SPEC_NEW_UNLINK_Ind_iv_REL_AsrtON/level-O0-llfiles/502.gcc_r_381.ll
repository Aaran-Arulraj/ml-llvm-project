; ModuleID = 'tree-ssa-sccvn.c'
source_filename = "tree-ssa-sccvn.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.VEC_vn_ssa_aux_t_heap = type { %struct.VEC_vn_ssa_aux_t_base }
%struct.VEC_vn_ssa_aux_t_base = type { i32, i32, [1 x %struct.vn_ssa_aux*] }
%struct.vn_ssa_aux = type { %union.tree_node*, %union.tree_node*, i32, i32, i32, i8 }
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type opaque
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type opaque
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type { i32, i32, %struct.basic_block_def*, %struct.basic_block_def*, %struct.lpt_decision, i32, i32, %struct.VEC_loop_p_gc*, %struct.loop*, %struct.loop*, i8*, %union.tree_node*, %struct.double_int, %struct.double_int, i8, i8, i32, %struct.nb_iter_bound*, %struct.loop_exit*, i8, %union.tree_node* }
%struct.lpt_decision = type { i32, i32 }
%struct.VEC_loop_p_gc = type { %struct.VEC_loop_p_base }
%struct.VEC_loop_p_base = type { i32, i32, [1 x %struct.loop*] }
%struct.double_int = type { i64, i64 }
%struct.nb_iter_bound = type { %union.gimple_statement_d*, %struct.double_int, i8, %struct.nb_iter_bound* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.loop_exit = type { %struct.edge_def*, %struct.loop_exit*, %struct.loop_exit*, %struct.loop_exit* }
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type { i32, %struct.VEC_loop_p_gc*, %struct.htab*, %struct.loop* }
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.VEC_vn_reference_op_s_heap = type { %struct.VEC_vn_reference_op_s_base }
%struct.VEC_vn_reference_op_s_base = type { i32, i32, [1 x %struct.vn_reference_op_struct] }
%struct.vn_reference_op_struct = type { i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.vn_tables_s = type { %struct.htab*, %struct.htab*, %struct.htab*, %struct.obstack, %struct.alloc_pool_def*, %struct.alloc_pool_def* }
%struct.alloc_pool_def = type { i8*, i64, %struct.alloc_pool_list_def*, i8*, i64, i64, i64, i64, %struct.alloc_pool_list_def*, i64, i64 }
%struct.alloc_pool_list_def = type { %struct.alloc_pool_list_def* }
%struct.VEC_tree_heap = type { %struct.VEC_tree_base }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.param_info = type { i8*, i32, i8, i32, i32, i8* }
%struct.tree_ssa_name = type { %struct.tree_common, %union.tree_node*, %union.gimple_statement_d*, i32, %struct.ptr_info_def*, %struct.ssa_use_operand_d }
%struct.ptr_info_def = type { %struct.pt_solution }
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }
%struct.vn_constant_s = type { i32, i32, %union.tree_node* }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_type_symtab, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_type* }
%union.tree_type_symtab = type { i8* }
%struct.lang_type = type opaque
%struct.vn_reference_s = type { i32, i32, %union.tree_node*, i32, %union.tree_node*, %struct.VEC_vn_reference_op_s_heap*, %union.tree_node* }
%struct.tree_field_decl = type { %struct.tree_decl_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.ao_ref_s = type { %union.tree_node*, %union.tree_node*, i64, i64, i64, i32, i32 }
%struct.tree_int_cst = type { %struct.tree_common, %struct.double_int }
%struct.tree_constructor = type { %struct.tree_common, %struct.VEC_constructor_elt_gc* }
%struct.VEC_constructor_elt_gc = type { %struct.VEC_constructor_elt_base }
%struct.VEC_constructor_elt_base = type { i32, i32, [1 x %struct.constructor_elt_d] }
%struct.constructor_elt_d = type { %union.tree_node*, %union.tree_node* }
%struct.vn_nary_op_s = type { i32, i32, i32, %union.tree_node*, %union.tree_node*, [4 x %union.tree_node*] }
%struct.VEC_ssa_op_iter_heap = type { %struct.VEC_ssa_op_iter_base }
%struct.VEC_ssa_op_iter_base = type { i32, i32, [1 x %struct.ssa_operand_iterator_d] }
%struct.ssa_operand_iterator_d = type { i8, i32, %struct.def_optype_d*, %struct.use_optype_d*, i32, i32, %union.gimple_statement_d* }
%struct.htab_iterator = type { %struct.htab*, i8**, i8** }
%struct.vn_phi_s = type { i32, i32, %struct.VEC_tree_heap*, %struct.basic_block_def*, %union.tree_node* }
%struct.gimple_statement_with_ops = type { %struct.gimple_statement_with_ops_base, [1 x %union.tree_node*] }
%struct.gimple_statement_with_ops_base = type { %struct.gimple_statement_base, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.gimple_statement_with_memory_ops_base = type { %struct.gimple_statement_with_ops_base, %union.tree_node*, %union.tree_node* }

@vn_ssa_aux_table = internal global %struct.VEC_vn_ssa_aux_t_heap* null, align 8, !dbg !0
@.str = private unnamed_addr constant [17 x i8] c"tree-ssa-sccvn.c\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@vn_ssa_aux_obstack = internal global %struct.obstack zeroinitializer, align 8, !dbg !3031
@VN_TOP = common dso_local global %union.tree_node* null, align 8, !dbg !3023
@tree_code_type = external dso_local constant [0 x i32], align 4
@constant_to_value_id = internal global %struct.htab* null, align 8, !dbg !3010
@constant_value_ids = internal global %struct.bitmap_head_def* null, align 8, !dbg !3012
@global_trees = external dso_local global [131 x %union.tree_node*], align 16
@may_insert = internal global i8 0, align 1, !dbg !3029
@mode_size = external dso_local global [87 x i8], align 16
@shared_lookup_references = internal global %struct.VEC_vn_reference_op_s_heap* null, align 8, !dbg !3033
@current_info = internal global %struct.vn_tables_s* null, align 8, !dbg !3019
@optimistic_info = internal global %struct.vn_tables_s* null, align 8, !dbg !3017
@valid_info = internal global %struct.vn_tables_s* null, align 8, !dbg !3014
@tree_code_length = external dso_local constant [0 x i8], align 1
@shared_lookup_phiargs = internal global %struct.VEC_tree_heap* null, align 8, !dbg !3035
@rpo_numbers = internal global i32* null, align 8, !dbg !3021
@cfun = external dso_local global %struct.function*, align 8
@sccstack = internal global %struct.VEC_tree_heap* null, align 8, !dbg !3027
@current_function_decl = external dso_local global %union.tree_node*, align 8
@dump_file = external dso_local global %struct._IO_FILE*, align 8
@dump_flags = external dso_local global i32, align 4
@.str.2 = private unnamed_addr constant [16 x i8] c"Value numbers:\0A\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c" = \00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@next_value_id = internal global i32 0, align 4, !dbg !3025
@flag_trapping_math = external dso_local global i32, align 4
@flag_finite_math_only = external dso_local global i32, align 4
@flag_signaling_nans = external dso_local global i32, align 4
@flag_trapv = external dso_local global i32, align 4
@.str.5 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@gimple_rhs_class_table = external dso_local constant [0 x i8], align 1
@last_vuse_ptr = internal global %union.tree_node** null, align 8, !dbg !3037
@gimple_ops_offset_ = external dso_local constant [0 x i64], align 8
@gss_for_code_ = external dso_local constant [0 x i32], align 4
@next_dfs_num = internal global i32 0, align 4, !dbg !3039
@.str.6 = private unnamed_addr constant [7 x i8] c"vn_top\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"VN phis\00", align 1
@.str.8 = private unnamed_addr constant [14 x i8] c"VN references\00", align 1
@flag_var_tracking_assignments = external dso_local global i32, align 4
@.str.9 = private unnamed_addr constant [21 x i8] c"./tree-flow-inline.h\00", align 1
@compiler_params = external dso_local global %struct.param_info*, align 8
@.str.10 = private unnamed_addr constant [63 x i8] c"WARNING: Giving up with SCCVN due to SCC size %u exceeding %u\0A\00", align 1
@.str.11 = private unnamed_addr constant [18 x i8] c"SCC consists of: \00", align 1
@.str.12 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.13 = private unnamed_addr constant [15 x i8] c"SCC iterations\00", align 1
@.str.14 = private unnamed_addr constant [17 x i8] c"Value numbering \00", align 1
@.str.15 = private unnamed_addr constant [9 x i8] c" stmt = \00", align 1
@.str.16 = private unnamed_addr constant [5 x i8] c"RHS \00", align 1
@.str.17 = private unnamed_addr constant [16 x i8] c" simplified to \00", align 1
@.str.18 = private unnamed_addr constant [19 x i8] c" has constants %d\0A\00", align 1
@.str.19 = private unnamed_addr constant [25 x i8] c"Setting value number of \00", align 1
@.str.20 = private unnamed_addr constant [5 x i8] c" to \00", align 1
@.str.21 = private unnamed_addr constant [12 x i8] c" (changed)\0A\00", align 1
@.str.22 = private unnamed_addr constant [16 x i8] c"No store match\0A\00", align 1
@.str.23 = private unnamed_addr constant [23 x i8] c"Value numbering store \00", align 1
@.str.24 = private unnamed_addr constant [76 x i8] c"Store matched earlier value,value numbering store vdefs to matching vuses.\0A\00", align 1
@.str.25 = private unnamed_addr constant [16 x i8] c"Inserting name \00", align 1
@.str.26 = private unnamed_addr constant [17 x i8] c" for expression \00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %name) #0 !dbg !3045 {
entry:
  %name.addr = alloca %union.tree_node*, align 8
  %res = alloca %struct.vn_ssa_aux*, align 8
  store %union.tree_node* %name, %union.tree_node** %name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %name.addr, metadata !3049, metadata !DIExpression()), !dbg !3050
  call void @llvm.dbg.declare(metadata %struct.vn_ssa_aux** %res, metadata !3051, metadata !DIExpression()), !dbg !3052
  %0 = load %struct.VEC_vn_ssa_aux_t_heap*, %struct.VEC_vn_ssa_aux_t_heap** @vn_ssa_aux_table, align 8, !dbg !3053
  %tobool = icmp ne %struct.VEC_vn_ssa_aux_t_heap* %0, null, !dbg !3053
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3053

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_vn_ssa_aux_t_heap*, %struct.VEC_vn_ssa_aux_t_heap** @vn_ssa_aux_table, align 8, !dbg !3053
  %base = getelementptr inbounds %struct.VEC_vn_ssa_aux_t_heap, %struct.VEC_vn_ssa_aux_t_heap* %1, i32 0, i32 0, !dbg !3053
  br label %cond.end, !dbg !3053

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3053

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_vn_ssa_aux_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3053
  %2 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !3053
  %ssa_name = bitcast %union.tree_node* %2 to %struct.tree_ssa_name*, !dbg !3053
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !3053
  %3 = load i32, i32* %version, align 8, !dbg !3053
  %call = call %struct.vn_ssa_aux* @VEC_vn_ssa_aux_t_base_index(%struct.VEC_vn_ssa_aux_t_base* %cond, i32 %3), !dbg !3053
  store %struct.vn_ssa_aux* %call, %struct.vn_ssa_aux** %res, align 8, !dbg !3052
  %4 = load %struct.vn_ssa_aux*, %struct.vn_ssa_aux** %res, align 8, !dbg !3054
  %tobool1 = icmp ne %struct.vn_ssa_aux* %4, null, !dbg !3054
  br i1 %tobool1, label %cond.false3, label %cond.true2, !dbg !3054

cond.true2:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3054
  br label %cond.end4, !dbg !3054

cond.false3:                                      ; preds = %cond.end
  br label %cond.end4, !dbg !3054

cond.end4:                                        ; preds = %cond.false3, %cond.true2
  %cond5 = phi i32 [ 0, %cond.true2 ], [ 0, %cond.false3 ], !dbg !3054
  %5 = load %struct.vn_ssa_aux*, %struct.vn_ssa_aux** %res, align 8, !dbg !3055
  ret %struct.vn_ssa_aux* %5, !dbg !3056
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal %struct.vn_ssa_aux* @VEC_vn_ssa_aux_t_base_index(%struct.VEC_vn_ssa_aux_t_base* %vec_, i32 %ix_) #0 !dbg !3057 {
entry:
  %vec_.addr = alloca %struct.VEC_vn_ssa_aux_t_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_vn_ssa_aux_t_base* %vec_, %struct.VEC_vn_ssa_aux_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_ssa_aux_t_base** %vec_.addr, metadata !3062, metadata !DIExpression()), !dbg !3063
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3064, metadata !DIExpression()), !dbg !3063
  %0 = load %struct.VEC_vn_ssa_aux_t_base*, %struct.VEC_vn_ssa_aux_t_base** %vec_.addr, align 8, !dbg !3063
  %tobool = icmp ne %struct.VEC_vn_ssa_aux_t_base* %0, null, !dbg !3063
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !3063

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !3063
  %2 = load %struct.VEC_vn_ssa_aux_t_base*, %struct.VEC_vn_ssa_aux_t_base** %vec_.addr, align 8, !dbg !3063
  %num = getelementptr inbounds %struct.VEC_vn_ssa_aux_t_base, %struct.VEC_vn_ssa_aux_t_base* %2, i32 0, i32 0, !dbg !3063
  %3 = load i32, i32* %num, align 8, !dbg !3063
  %cmp = icmp ult i32 %1, %3, !dbg !3063
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !3065
  %land.ext = zext i1 %4 to i32, !dbg !3063
  %5 = load %struct.VEC_vn_ssa_aux_t_base*, %struct.VEC_vn_ssa_aux_t_base** %vec_.addr, align 8, !dbg !3063
  %vec = getelementptr inbounds %struct.VEC_vn_ssa_aux_t_base, %struct.VEC_vn_ssa_aux_t_base* %5, i32 0, i32 2, !dbg !3063
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !3063
  %idxprom = zext i32 %6 to i64, !dbg !3063
  %arrayidx = getelementptr inbounds [1 x %struct.vn_ssa_aux*], [1 x %struct.vn_ssa_aux*]* %vec, i64 0, i64 %idxprom, !dbg !3063
  %7 = load %struct.vn_ssa_aux*, %struct.vn_ssa_aux** %arrayidx, align 8, !dbg !3063
  ret %struct.vn_ssa_aux* %7, !dbg !3063
}

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.vn_ssa_aux* @VN_INFO_GET(%union.tree_node* %name) #0 !dbg !3066 {
entry:
  %name.addr = alloca %union.tree_node*, align 8
  %newinfo = alloca %struct.vn_ssa_aux*, align 8
  store %union.tree_node* %name, %union.tree_node** %name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %name.addr, metadata !3067, metadata !DIExpression()), !dbg !3068
  call void @llvm.dbg.declare(metadata %struct.vn_ssa_aux** %newinfo, metadata !3069, metadata !DIExpression()), !dbg !3070
  store i64 32, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @vn_ssa_aux_obstack, i32 0, i32 5), align 8, !dbg !3071
  %0 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @vn_ssa_aux_obstack, i32 0, i32 4), align 8, !dbg !3071
  %1 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @vn_ssa_aux_obstack, i32 0, i32 3), align 8, !dbg !3071
  %sub.ptr.lhs.cast = ptrtoint i8* %0 to i64, !dbg !3071
  %sub.ptr.rhs.cast = ptrtoint i8* %1 to i64, !dbg !3071
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !3071
  %2 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @vn_ssa_aux_obstack, i32 0, i32 5), align 8, !dbg !3071
  %cmp = icmp slt i64 %sub.ptr.sub, %2, !dbg !3071
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !3071

cond.true:                                        ; preds = %entry
  %3 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @vn_ssa_aux_obstack, i32 0, i32 5), align 8, !dbg !3071
  %conv = trunc i64 %3 to i32, !dbg !3071
  call void @_obstack_newchunk(%struct.obstack* @vn_ssa_aux_obstack, i32 %conv), !dbg !3071
  br label %cond.end, !dbg !3071

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3071

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3071
  %4 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @vn_ssa_aux_obstack, i32 0, i32 5), align 8, !dbg !3071
  %5 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @vn_ssa_aux_obstack, i32 0, i32 3), align 8, !dbg !3071
  %add.ptr = getelementptr inbounds i8, i8* %5, i64 %4, !dbg !3071
  store i8* %add.ptr, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @vn_ssa_aux_obstack, i32 0, i32 3), align 8, !dbg !3071
  %6 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @vn_ssa_aux_obstack, i32 0, i32 3), align 8, !dbg !3071
  %7 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @vn_ssa_aux_obstack, i32 0, i32 2), align 8, !dbg !3071
  %cmp1 = icmp eq i8* %6, %7, !dbg !3071
  br i1 %cmp1, label %cond.true3, label %cond.false4, !dbg !3071

cond.true3:                                       ; preds = %cond.end
  %bf.load = load i8, i8* getelementptr inbounds (%struct.obstack, %struct.obstack* @vn_ssa_aux_obstack, i32 0, i32 10), align 8, !dbg !3071
  %bf.clear = and i8 %bf.load, -3, !dbg !3071
  %bf.set = or i8 %bf.clear, 2, !dbg !3071
  store i8 %bf.set, i8* getelementptr inbounds (%struct.obstack, %struct.obstack* @vn_ssa_aux_obstack, i32 0, i32 10), align 8, !dbg !3071
  br label %cond.end5, !dbg !3071

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !3071

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !3071
  %8 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @vn_ssa_aux_obstack, i32 0, i32 2), align 8, !dbg !3071
  %sub.ptr.lhs.cast7 = ptrtoint i8* %8 to i64, !dbg !3071
  %sub.ptr.sub8 = sub i64 %sub.ptr.lhs.cast7, 0, !dbg !3071
  store i64 %sub.ptr.sub8, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @vn_ssa_aux_obstack, i32 0, i32 5), align 8, !dbg !3071
  %9 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @vn_ssa_aux_obstack, i32 0, i32 3), align 8, !dbg !3071
  %sub.ptr.lhs.cast9 = ptrtoint i8* %9 to i64, !dbg !3071
  %sub.ptr.sub10 = sub i64 %sub.ptr.lhs.cast9, 0, !dbg !3071
  %10 = load i32, i32* getelementptr inbounds (%struct.obstack, %struct.obstack* @vn_ssa_aux_obstack, i32 0, i32 6), align 8, !dbg !3071
  %conv11 = sext i32 %10 to i64, !dbg !3071
  %add = add nsw i64 %sub.ptr.sub10, %conv11, !dbg !3071
  %11 = load i32, i32* getelementptr inbounds (%struct.obstack, %struct.obstack* @vn_ssa_aux_obstack, i32 0, i32 6), align 8, !dbg !3071
  %neg = xor i32 %11, -1, !dbg !3071
  %conv12 = sext i32 %neg to i64, !dbg !3071
  %and = and i64 %add, %conv12, !dbg !3071
  %12 = inttoptr i64 %and to i8*, !dbg !3071
  store i8* %12, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @vn_ssa_aux_obstack, i32 0, i32 3), align 8, !dbg !3071
  %13 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @vn_ssa_aux_obstack, i32 0, i32 3), align 8, !dbg !3071
  %14 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @vn_ssa_aux_obstack, i32 0, i32 1), align 8, !dbg !3071
  %15 = bitcast %struct._obstack_chunk* %14 to i8*, !dbg !3071
  %sub.ptr.lhs.cast13 = ptrtoint i8* %13 to i64, !dbg !3071
  %sub.ptr.rhs.cast14 = ptrtoint i8* %15 to i64, !dbg !3071
  %sub.ptr.sub15 = sub i64 %sub.ptr.lhs.cast13, %sub.ptr.rhs.cast14, !dbg !3071
  %16 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @vn_ssa_aux_obstack, i32 0, i32 4), align 8, !dbg !3071
  %17 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @vn_ssa_aux_obstack, i32 0, i32 1), align 8, !dbg !3071
  %18 = bitcast %struct._obstack_chunk* %17 to i8*, !dbg !3071
  %sub.ptr.lhs.cast16 = ptrtoint i8* %16 to i64, !dbg !3071
  %sub.ptr.rhs.cast17 = ptrtoint i8* %18 to i64, !dbg !3071
  %sub.ptr.sub18 = sub i64 %sub.ptr.lhs.cast16, %sub.ptr.rhs.cast17, !dbg !3071
  %cmp19 = icmp sgt i64 %sub.ptr.sub15, %sub.ptr.sub18, !dbg !3071
  br i1 %cmp19, label %cond.true21, label %cond.false22, !dbg !3071

cond.true21:                                      ; preds = %cond.end5
  %19 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @vn_ssa_aux_obstack, i32 0, i32 4), align 8, !dbg !3071
  store i8* %19, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @vn_ssa_aux_obstack, i32 0, i32 3), align 8, !dbg !3071
  br label %cond.end23, !dbg !3071

cond.false22:                                     ; preds = %cond.end5
  br label %cond.end23, !dbg !3071

cond.end23:                                       ; preds = %cond.false22, %cond.true21
  %cond24 = phi i8* [ %19, %cond.true21 ], [ null, %cond.false22 ], !dbg !3071
  %20 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @vn_ssa_aux_obstack, i32 0, i32 3), align 8, !dbg !3071
  store i8* %20, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @vn_ssa_aux_obstack, i32 0, i32 2), align 8, !dbg !3071
  %21 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @vn_ssa_aux_obstack, i32 0, i32 5), align 8, !dbg !3071
  %22 = inttoptr i64 %21 to i8*, !dbg !3071
  %23 = bitcast i8* %22 to %struct.vn_ssa_aux*, !dbg !3071
  store %struct.vn_ssa_aux* %23, %struct.vn_ssa_aux** %newinfo, align 8, !dbg !3072
  %24 = load %struct.vn_ssa_aux*, %struct.vn_ssa_aux** %newinfo, align 8, !dbg !3073
  %25 = bitcast %struct.vn_ssa_aux* %24 to i8*, !dbg !3074
  call void @llvm.memset.p0i8.i64(i8* align 8 %25, i8 0, i64 32, i1 false), !dbg !3074
  %26 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !3075
  %ssa_name = bitcast %union.tree_node* %26 to %struct.tree_ssa_name*, !dbg !3075
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !3075
  %27 = load i32, i32* %version, align 8, !dbg !3075
  %28 = load %struct.VEC_vn_ssa_aux_t_heap*, %struct.VEC_vn_ssa_aux_t_heap** @vn_ssa_aux_table, align 8, !dbg !3077
  %tobool = icmp ne %struct.VEC_vn_ssa_aux_t_heap* %28, null, !dbg !3077
  br i1 %tobool, label %cond.true25, label %cond.false26, !dbg !3077

cond.true25:                                      ; preds = %cond.end23
  %29 = load %struct.VEC_vn_ssa_aux_t_heap*, %struct.VEC_vn_ssa_aux_t_heap** @vn_ssa_aux_table, align 8, !dbg !3077
  %base = getelementptr inbounds %struct.VEC_vn_ssa_aux_t_heap, %struct.VEC_vn_ssa_aux_t_heap* %29, i32 0, i32 0, !dbg !3077
  br label %cond.end27, !dbg !3077

cond.false26:                                     ; preds = %cond.end23
  br label %cond.end27, !dbg !3077

cond.end27:                                       ; preds = %cond.false26, %cond.true25
  %cond28 = phi %struct.VEC_vn_ssa_aux_t_base* [ %base, %cond.true25 ], [ null, %cond.false26 ], !dbg !3077
  %call = call i32 @VEC_vn_ssa_aux_t_base_length(%struct.VEC_vn_ssa_aux_t_base* %cond28), !dbg !3077
  %cmp29 = icmp uge i32 %27, %call, !dbg !3078
  br i1 %cmp29, label %if.then, label %if.end, !dbg !3079

if.then:                                          ; preds = %cond.end27
  %30 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !3080
  %ssa_name31 = bitcast %union.tree_node* %30 to %struct.tree_ssa_name*, !dbg !3080
  %version32 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name31, i32 0, i32 3, !dbg !3080
  %31 = load i32, i32* %version32, align 8, !dbg !3080
  %add33 = add i32 %31, 1, !dbg !3080
  call void @VEC_vn_ssa_aux_t_heap_safe_grow(%struct.VEC_vn_ssa_aux_t_heap** @vn_ssa_aux_table, i32 %add33), !dbg !3080
  br label %if.end, !dbg !3080

if.end:                                           ; preds = %if.then, %cond.end27
  %32 = load %struct.VEC_vn_ssa_aux_t_heap*, %struct.VEC_vn_ssa_aux_t_heap** @vn_ssa_aux_table, align 8, !dbg !3081
  %tobool34 = icmp ne %struct.VEC_vn_ssa_aux_t_heap* %32, null, !dbg !3081
  br i1 %tobool34, label %cond.true35, label %cond.false37, !dbg !3081

cond.true35:                                      ; preds = %if.end
  %33 = load %struct.VEC_vn_ssa_aux_t_heap*, %struct.VEC_vn_ssa_aux_t_heap** @vn_ssa_aux_table, align 8, !dbg !3081
  %base36 = getelementptr inbounds %struct.VEC_vn_ssa_aux_t_heap, %struct.VEC_vn_ssa_aux_t_heap* %33, i32 0, i32 0, !dbg !3081
  br label %cond.end38, !dbg !3081

cond.false37:                                     ; preds = %if.end
  br label %cond.end38, !dbg !3081

cond.end38:                                       ; preds = %cond.false37, %cond.true35
  %cond39 = phi %struct.VEC_vn_ssa_aux_t_base* [ %base36, %cond.true35 ], [ null, %cond.false37 ], !dbg !3081
  %34 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !3081
  %ssa_name40 = bitcast %union.tree_node* %34 to %struct.tree_ssa_name*, !dbg !3081
  %version41 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name40, i32 0, i32 3, !dbg !3081
  %35 = load i32, i32* %version41, align 8, !dbg !3081
  %36 = load %struct.vn_ssa_aux*, %struct.vn_ssa_aux** %newinfo, align 8, !dbg !3081
  %call42 = call %struct.vn_ssa_aux* @VEC_vn_ssa_aux_t_base_replace(%struct.VEC_vn_ssa_aux_t_base* %cond39, i32 %35, %struct.vn_ssa_aux* %36), !dbg !3081
  %37 = load %struct.vn_ssa_aux*, %struct.vn_ssa_aux** %newinfo, align 8, !dbg !3082
  ret %struct.vn_ssa_aux* %37, !dbg !3083
}

declare dso_local void @_obstack_newchunk(%struct.obstack*, i32) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_vn_ssa_aux_t_base_length(%struct.VEC_vn_ssa_aux_t_base* %vec_) #0 !dbg !3084 {
entry:
  %vec_.addr = alloca %struct.VEC_vn_ssa_aux_t_base*, align 8
  store %struct.VEC_vn_ssa_aux_t_base* %vec_, %struct.VEC_vn_ssa_aux_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_ssa_aux_t_base** %vec_.addr, metadata !3087, metadata !DIExpression()), !dbg !3088
  %0 = load %struct.VEC_vn_ssa_aux_t_base*, %struct.VEC_vn_ssa_aux_t_base** %vec_.addr, align 8, !dbg !3088
  %tobool = icmp ne %struct.VEC_vn_ssa_aux_t_base* %0, null, !dbg !3088
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3088

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_vn_ssa_aux_t_base*, %struct.VEC_vn_ssa_aux_t_base** %vec_.addr, align 8, !dbg !3088
  %num = getelementptr inbounds %struct.VEC_vn_ssa_aux_t_base, %struct.VEC_vn_ssa_aux_t_base* %1, i32 0, i32 0, !dbg !3088
  %2 = load i32, i32* %num, align 8, !dbg !3088
  br label %cond.end, !dbg !3088

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3088

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !3088
  ret i32 %cond, !dbg !3088
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_vn_ssa_aux_t_heap_safe_grow(%struct.VEC_vn_ssa_aux_t_heap** %vec_, i32 %size_) #0 !dbg !3089 {
entry:
  %vec_.addr = alloca %struct.VEC_vn_ssa_aux_t_heap**, align 8
  %size_.addr = alloca i32, align 4
  store %struct.VEC_vn_ssa_aux_t_heap** %vec_, %struct.VEC_vn_ssa_aux_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_ssa_aux_t_heap*** %vec_.addr, metadata !3093, metadata !DIExpression()), !dbg !3094
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !3095, metadata !DIExpression()), !dbg !3094
  %0 = load i32, i32* %size_.addr, align 4, !dbg !3094
  %cmp = icmp sge i32 %0, 0, !dbg !3094
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !3094

land.rhs:                                         ; preds = %entry
  %1 = load %struct.VEC_vn_ssa_aux_t_heap**, %struct.VEC_vn_ssa_aux_t_heap*** %vec_.addr, align 8, !dbg !3094
  %2 = load %struct.VEC_vn_ssa_aux_t_heap*, %struct.VEC_vn_ssa_aux_t_heap** %1, align 8, !dbg !3094
  %tobool = icmp ne %struct.VEC_vn_ssa_aux_t_heap* %2, null, !dbg !3094
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3094

cond.true:                                        ; preds = %land.rhs
  %3 = load %struct.VEC_vn_ssa_aux_t_heap**, %struct.VEC_vn_ssa_aux_t_heap*** %vec_.addr, align 8, !dbg !3094
  %4 = load %struct.VEC_vn_ssa_aux_t_heap*, %struct.VEC_vn_ssa_aux_t_heap** %3, align 8, !dbg !3094
  %base = getelementptr inbounds %struct.VEC_vn_ssa_aux_t_heap, %struct.VEC_vn_ssa_aux_t_heap* %4, i32 0, i32 0, !dbg !3094
  br label %cond.end, !dbg !3094

cond.false:                                       ; preds = %land.rhs
  br label %cond.end, !dbg !3094

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_vn_ssa_aux_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3094
  %call = call i32 @VEC_vn_ssa_aux_t_base_length(%struct.VEC_vn_ssa_aux_t_base* %cond), !dbg !3094
  %5 = load i32, i32* %size_.addr, align 4, !dbg !3094
  %cmp1 = icmp ule i32 %call, %5, !dbg !3094
  br label %land.end

land.end:                                         ; preds = %cond.end, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %cond.end ], !dbg !3096
  %land.ext = zext i1 %6 to i32, !dbg !3094
  %7 = load %struct.VEC_vn_ssa_aux_t_heap**, %struct.VEC_vn_ssa_aux_t_heap*** %vec_.addr, align 8, !dbg !3094
  %8 = load i32, i32* %size_.addr, align 4, !dbg !3094
  %9 = load %struct.VEC_vn_ssa_aux_t_heap**, %struct.VEC_vn_ssa_aux_t_heap*** %vec_.addr, align 8, !dbg !3094
  %10 = load %struct.VEC_vn_ssa_aux_t_heap*, %struct.VEC_vn_ssa_aux_t_heap** %9, align 8, !dbg !3094
  %tobool2 = icmp ne %struct.VEC_vn_ssa_aux_t_heap* %10, null, !dbg !3094
  br i1 %tobool2, label %cond.true3, label %cond.false10, !dbg !3094

cond.true3:                                       ; preds = %land.end
  %11 = load %struct.VEC_vn_ssa_aux_t_heap**, %struct.VEC_vn_ssa_aux_t_heap*** %vec_.addr, align 8, !dbg !3094
  %12 = load %struct.VEC_vn_ssa_aux_t_heap*, %struct.VEC_vn_ssa_aux_t_heap** %11, align 8, !dbg !3094
  %tobool4 = icmp ne %struct.VEC_vn_ssa_aux_t_heap* %12, null, !dbg !3094
  br i1 %tobool4, label %cond.true5, label %cond.false7, !dbg !3094

cond.true5:                                       ; preds = %cond.true3
  %13 = load %struct.VEC_vn_ssa_aux_t_heap**, %struct.VEC_vn_ssa_aux_t_heap*** %vec_.addr, align 8, !dbg !3094
  %14 = load %struct.VEC_vn_ssa_aux_t_heap*, %struct.VEC_vn_ssa_aux_t_heap** %13, align 8, !dbg !3094
  %base6 = getelementptr inbounds %struct.VEC_vn_ssa_aux_t_heap, %struct.VEC_vn_ssa_aux_t_heap* %14, i32 0, i32 0, !dbg !3094
  br label %cond.end8, !dbg !3094

cond.false7:                                      ; preds = %cond.true3
  br label %cond.end8, !dbg !3094

cond.end8:                                        ; preds = %cond.false7, %cond.true5
  %cond9 = phi %struct.VEC_vn_ssa_aux_t_base* [ %base6, %cond.true5 ], [ null, %cond.false7 ], !dbg !3094
  %num = getelementptr inbounds %struct.VEC_vn_ssa_aux_t_base, %struct.VEC_vn_ssa_aux_t_base* %cond9, i32 0, i32 0, !dbg !3094
  %15 = load i32, i32* %num, align 8, !dbg !3094
  br label %cond.end11, !dbg !3094

cond.false10:                                     ; preds = %land.end
  br label %cond.end11, !dbg !3094

cond.end11:                                       ; preds = %cond.false10, %cond.end8
  %cond12 = phi i32 [ %15, %cond.end8 ], [ 0, %cond.false10 ], !dbg !3094
  %sub = sub nsw i32 %8, %cond12, !dbg !3094
  %call13 = call i32 @VEC_vn_ssa_aux_t_heap_reserve_exact(%struct.VEC_vn_ssa_aux_t_heap** %7, i32 %sub), !dbg !3094
  %16 = load i32, i32* %size_.addr, align 4, !dbg !3094
  %17 = load %struct.VEC_vn_ssa_aux_t_heap**, %struct.VEC_vn_ssa_aux_t_heap*** %vec_.addr, align 8, !dbg !3094
  %18 = load %struct.VEC_vn_ssa_aux_t_heap*, %struct.VEC_vn_ssa_aux_t_heap** %17, align 8, !dbg !3094
  %tobool14 = icmp ne %struct.VEC_vn_ssa_aux_t_heap* %18, null, !dbg !3094
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !3094

cond.true15:                                      ; preds = %cond.end11
  %19 = load %struct.VEC_vn_ssa_aux_t_heap**, %struct.VEC_vn_ssa_aux_t_heap*** %vec_.addr, align 8, !dbg !3094
  %20 = load %struct.VEC_vn_ssa_aux_t_heap*, %struct.VEC_vn_ssa_aux_t_heap** %19, align 8, !dbg !3094
  %base16 = getelementptr inbounds %struct.VEC_vn_ssa_aux_t_heap, %struct.VEC_vn_ssa_aux_t_heap* %20, i32 0, i32 0, !dbg !3094
  br label %cond.end18, !dbg !3094

cond.false17:                                     ; preds = %cond.end11
  br label %cond.end18, !dbg !3094

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_vn_ssa_aux_t_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !3094
  %num20 = getelementptr inbounds %struct.VEC_vn_ssa_aux_t_base, %struct.VEC_vn_ssa_aux_t_base* %cond19, i32 0, i32 0, !dbg !3094
  store i32 %16, i32* %num20, align 8, !dbg !3094
  ret void, !dbg !3094
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.vn_ssa_aux* @VEC_vn_ssa_aux_t_base_replace(%struct.VEC_vn_ssa_aux_t_base* %vec_, i32 %ix_, %struct.vn_ssa_aux* %obj_) #0 !dbg !3097 {
entry:
  %vec_.addr = alloca %struct.VEC_vn_ssa_aux_t_base*, align 8
  %ix_.addr = alloca i32, align 4
  %obj_.addr = alloca %struct.vn_ssa_aux*, align 8
  %old_obj_ = alloca %struct.vn_ssa_aux*, align 8
  store %struct.VEC_vn_ssa_aux_t_base* %vec_, %struct.VEC_vn_ssa_aux_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_ssa_aux_t_base** %vec_.addr, metadata !3101, metadata !DIExpression()), !dbg !3102
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3103, metadata !DIExpression()), !dbg !3102
  store %struct.vn_ssa_aux* %obj_, %struct.vn_ssa_aux** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.vn_ssa_aux** %obj_.addr, metadata !3104, metadata !DIExpression()), !dbg !3102
  call void @llvm.dbg.declare(metadata %struct.vn_ssa_aux** %old_obj_, metadata !3105, metadata !DIExpression()), !dbg !3102
  %0 = load i32, i32* %ix_.addr, align 4, !dbg !3102
  %1 = load %struct.VEC_vn_ssa_aux_t_base*, %struct.VEC_vn_ssa_aux_t_base** %vec_.addr, align 8, !dbg !3102
  %num = getelementptr inbounds %struct.VEC_vn_ssa_aux_t_base, %struct.VEC_vn_ssa_aux_t_base* %1, i32 0, i32 0, !dbg !3102
  %2 = load i32, i32* %num, align 8, !dbg !3102
  %cmp = icmp ult i32 %0, %2, !dbg !3102
  %conv = zext i1 %cmp to i32, !dbg !3102
  %3 = load %struct.VEC_vn_ssa_aux_t_base*, %struct.VEC_vn_ssa_aux_t_base** %vec_.addr, align 8, !dbg !3102
  %vec = getelementptr inbounds %struct.VEC_vn_ssa_aux_t_base, %struct.VEC_vn_ssa_aux_t_base* %3, i32 0, i32 2, !dbg !3102
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !3102
  %idxprom = zext i32 %4 to i64, !dbg !3102
  %arrayidx = getelementptr inbounds [1 x %struct.vn_ssa_aux*], [1 x %struct.vn_ssa_aux*]* %vec, i64 0, i64 %idxprom, !dbg !3102
  %5 = load %struct.vn_ssa_aux*, %struct.vn_ssa_aux** %arrayidx, align 8, !dbg !3102
  store %struct.vn_ssa_aux* %5, %struct.vn_ssa_aux** %old_obj_, align 8, !dbg !3102
  %6 = load %struct.vn_ssa_aux*, %struct.vn_ssa_aux** %obj_.addr, align 8, !dbg !3102
  %7 = load %struct.VEC_vn_ssa_aux_t_base*, %struct.VEC_vn_ssa_aux_t_base** %vec_.addr, align 8, !dbg !3102
  %vec1 = getelementptr inbounds %struct.VEC_vn_ssa_aux_t_base, %struct.VEC_vn_ssa_aux_t_base* %7, i32 0, i32 2, !dbg !3102
  %8 = load i32, i32* %ix_.addr, align 4, !dbg !3102
  %idxprom2 = zext i32 %8 to i64, !dbg !3102
  %arrayidx3 = getelementptr inbounds [1 x %struct.vn_ssa_aux*], [1 x %struct.vn_ssa_aux*]* %vec1, i64 0, i64 %idxprom2, !dbg !3102
  store %struct.vn_ssa_aux* %6, %struct.vn_ssa_aux** %arrayidx3, align 8, !dbg !3102
  %9 = load %struct.vn_ssa_aux*, %struct.vn_ssa_aux** %old_obj_, align 8, !dbg !3102
  ret %struct.vn_ssa_aux* %9, !dbg !3102
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @vn_get_expr_for(%union.tree_node* %name) #0 !dbg !3106 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %name.addr = alloca %union.tree_node*, align 8
  %vn = alloca %struct.vn_ssa_aux*, align 8
  %def_stmt = alloca %union.gimple_statement_d*, align 8
  %expr = alloca %union.tree_node*, align 8
  store %union.tree_node* %name, %union.tree_node** %name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %name.addr, metadata !3109, metadata !DIExpression()), !dbg !3110
  call void @llvm.dbg.declare(metadata %struct.vn_ssa_aux** %vn, metadata !3111, metadata !DIExpression()), !dbg !3112
  %0 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !3113
  %call = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %0), !dbg !3114
  store %struct.vn_ssa_aux* %call, %struct.vn_ssa_aux** %vn, align 8, !dbg !3112
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %def_stmt, metadata !3115, metadata !DIExpression()), !dbg !3116
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr, metadata !3117, metadata !DIExpression()), !dbg !3118
  store %union.tree_node* null, %union.tree_node** %expr, align 8, !dbg !3118
  %1 = load %struct.vn_ssa_aux*, %struct.vn_ssa_aux** %vn, align 8, !dbg !3119
  %valnum = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %1, i32 0, i32 0, !dbg !3121
  %2 = load %union.tree_node*, %union.tree_node** %valnum, align 8, !dbg !3121
  %3 = load %union.tree_node*, %union.tree_node** @VN_TOP, align 8, !dbg !3122
  %cmp = icmp eq %union.tree_node* %2, %3, !dbg !3123
  br i1 %cmp, label %if.then, label %if.end, !dbg !3124

if.then:                                          ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !3125
  store %union.tree_node* %4, %union.tree_node** %retval, align 8, !dbg !3126
  br label %return, !dbg !3126

if.end:                                           ; preds = %entry
  %5 = load %struct.vn_ssa_aux*, %struct.vn_ssa_aux** %vn, align 8, !dbg !3127
  %valnum1 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %5, i32 0, i32 0, !dbg !3127
  %6 = load %union.tree_node*, %union.tree_node** %valnum1, align 8, !dbg !3127
  %base = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !3127
  %7 = bitcast %struct.tree_base* %base to i64*, !dbg !3127
  %bf.load = load i64, i64* %7, align 8, !dbg !3127
  %bf.clear = and i64 %bf.load, 65535, !dbg !3127
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3127
  %cmp2 = icmp ne i32 %bf.cast, 141, !dbg !3129
  br i1 %cmp2, label %if.then3, label %if.end5, !dbg !3130

if.then3:                                         ; preds = %if.end
  %8 = load %struct.vn_ssa_aux*, %struct.vn_ssa_aux** %vn, align 8, !dbg !3131
  %valnum4 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %8, i32 0, i32 0, !dbg !3132
  %9 = load %union.tree_node*, %union.tree_node** %valnum4, align 8, !dbg !3132
  store %union.tree_node* %9, %union.tree_node** %retval, align 8, !dbg !3133
  br label %return, !dbg !3133

if.end5:                                          ; preds = %if.end
  %10 = load %struct.vn_ssa_aux*, %struct.vn_ssa_aux** %vn, align 8, !dbg !3134
  %valnum6 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %10, i32 0, i32 0, !dbg !3135
  %11 = load %union.tree_node*, %union.tree_node** %valnum6, align 8, !dbg !3135
  %call7 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %11), !dbg !3136
  store %struct.vn_ssa_aux* %call7, %struct.vn_ssa_aux** %vn, align 8, !dbg !3137
  %12 = load %struct.vn_ssa_aux*, %struct.vn_ssa_aux** %vn, align 8, !dbg !3138
  %valnum8 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %12, i32 0, i32 0, !dbg !3138
  %13 = load %union.tree_node*, %union.tree_node** %valnum8, align 8, !dbg !3138
  %base9 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !3138
  %14 = bitcast %struct.tree_base* %base9 to i64*, !dbg !3138
  %bf.load10 = load i64, i64* %14, align 8, !dbg !3138
  %bf.clear11 = and i64 %bf.load10, 65535, !dbg !3138
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !3138
  %cmp13 = icmp ne i32 %bf.cast12, 141, !dbg !3140
  br i1 %cmp13, label %if.then14, label %if.end16, !dbg !3141

if.then14:                                        ; preds = %if.end5
  %15 = load %struct.vn_ssa_aux*, %struct.vn_ssa_aux** %vn, align 8, !dbg !3142
  %valnum15 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %15, i32 0, i32 0, !dbg !3143
  %16 = load %union.tree_node*, %union.tree_node** %valnum15, align 8, !dbg !3143
  store %union.tree_node* %16, %union.tree_node** %retval, align 8, !dbg !3144
  br label %return, !dbg !3144

if.end16:                                         ; preds = %if.end5
  %17 = load %struct.vn_ssa_aux*, %struct.vn_ssa_aux** %vn, align 8, !dbg !3145
  %expr17 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %17, i32 0, i32 1, !dbg !3147
  %18 = load %union.tree_node*, %union.tree_node** %expr17, align 8, !dbg !3147
  %cmp18 = icmp ne %union.tree_node* %18, null, !dbg !3148
  br i1 %cmp18, label %if.then19, label %if.end21, !dbg !3149

if.then19:                                        ; preds = %if.end16
  %19 = load %struct.vn_ssa_aux*, %struct.vn_ssa_aux** %vn, align 8, !dbg !3150
  %expr20 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %19, i32 0, i32 1, !dbg !3151
  %20 = load %union.tree_node*, %union.tree_node** %expr20, align 8, !dbg !3151
  store %union.tree_node* %20, %union.tree_node** %retval, align 8, !dbg !3152
  br label %return, !dbg !3152

if.end21:                                         ; preds = %if.end16
  %21 = load %struct.vn_ssa_aux*, %struct.vn_ssa_aux** %vn, align 8, !dbg !3153
  %valnum22 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %21, i32 0, i32 0, !dbg !3153
  %22 = load %union.tree_node*, %union.tree_node** %valnum22, align 8, !dbg !3153
  %ssa_name = bitcast %union.tree_node* %22 to %struct.tree_ssa_name*, !dbg !3153
  %def_stmt23 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !3153
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt23, align 8, !dbg !3153
  store %union.gimple_statement_d* %23, %union.gimple_statement_d** %def_stmt, align 8, !dbg !3154
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !3155
  %call24 = call zeroext i8 @gimple_nop_p(%union.gimple_statement_d* %24), !dbg !3157
  %conv = zext i8 %call24 to i32, !dbg !3157
  %tobool = icmp ne i32 %conv, 0, !dbg !3157
  br i1 %tobool, label %if.then28, label %lor.lhs.false, !dbg !3158

lor.lhs.false:                                    ; preds = %if.end21
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !3159
  %call25 = call i32 @gimple_code(%union.gimple_statement_d* %25), !dbg !3160
  %cmp26 = icmp eq i32 %call25, 16, !dbg !3161
  br i1 %cmp26, label %if.then28, label %if.end30, !dbg !3162

if.then28:                                        ; preds = %lor.lhs.false, %if.end21
  %26 = load %struct.vn_ssa_aux*, %struct.vn_ssa_aux** %vn, align 8, !dbg !3163
  %valnum29 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %26, i32 0, i32 0, !dbg !3164
  %27 = load %union.tree_node*, %union.tree_node** %valnum29, align 8, !dbg !3164
  store %union.tree_node* %27, %union.tree_node** %retval, align 8, !dbg !3165
  br label %return, !dbg !3165

if.end30:                                         ; preds = %lor.lhs.false
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !3166
  %call31 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %28), !dbg !3168
  %tobool32 = icmp ne i8 %call31, 0, !dbg !3168
  br i1 %tobool32, label %if.end35, label %if.then33, !dbg !3169

if.then33:                                        ; preds = %if.end30
  %29 = load %struct.vn_ssa_aux*, %struct.vn_ssa_aux** %vn, align 8, !dbg !3170
  %valnum34 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %29, i32 0, i32 0, !dbg !3171
  %30 = load %union.tree_node*, %union.tree_node** %valnum34, align 8, !dbg !3171
  store %union.tree_node* %30, %union.tree_node** %retval, align 8, !dbg !3172
  br label %return, !dbg !3172

if.end35:                                         ; preds = %if.end30
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !3173
  %call36 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %31), !dbg !3173
  %idxprom = sext i32 %call36 to i64, !dbg !3173
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !3173
  %32 = load i32, i32* %arrayidx, align 4, !dbg !3173
  switch i32 %32, label %sw.default [
    i32 4, label %sw.bb
    i32 6, label %sw.bb62
    i32 7, label %sw.bb67
  ], !dbg !3174

sw.bb:                                            ; preds = %if.end35
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !3175
  %call37 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %33), !dbg !3178
  %cmp38 = icmp eq i32 %call37, 118, !dbg !3179
  br i1 %cmp38, label %land.lhs.true, label %lor.lhs.false40, !dbg !3180

lor.lhs.false40:                                  ; preds = %sw.bb
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !3181
  %call41 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %34), !dbg !3182
  %cmp42 = icmp eq i32 %call41, 43, !dbg !3183
  br i1 %cmp42, label %land.lhs.true, label %lor.lhs.false44, !dbg !3184

lor.lhs.false44:                                  ; preds = %lor.lhs.false40
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !3185
  %call45 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %35), !dbg !3186
  %cmp46 = icmp eq i32 %call45, 44, !dbg !3187
  br i1 %cmp46, label %land.lhs.true, label %if.end61, !dbg !3188

land.lhs.true:                                    ; preds = %lor.lhs.false44, %lor.lhs.false40, %sw.bb
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !3189
  %call48 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %36), !dbg !3189
  %base49 = bitcast %union.tree_node* %call48 to %struct.tree_base*, !dbg !3189
  %37 = bitcast %struct.tree_base* %base49 to i64*, !dbg !3189
  %bf.load50 = load i64, i64* %37, align 8, !dbg !3189
  %bf.clear51 = and i64 %bf.load50, 65535, !dbg !3189
  %bf.cast52 = trunc i64 %bf.clear51 to i32, !dbg !3189
  %cmp53 = icmp eq i32 %bf.cast52, 141, !dbg !3190
  br i1 %cmp53, label %if.then55, label %if.end61, !dbg !3191

if.then55:                                        ; preds = %land.lhs.true
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !3192
  %call56 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %38), !dbg !3192
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !3192
  %call57 = call %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %39), !dbg !3192
  %40 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !3192
  %call58 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %40), !dbg !3192
  %exp = bitcast %union.tree_node* %call58 to %struct.tree_exp*, !dbg !3192
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !3192
  %arrayidx59 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !3192
  %41 = load %union.tree_node*, %union.tree_node** %arrayidx59, align 8, !dbg !3192
  %call60 = call %union.tree_node* @fold_build1_stat_loc(i32 0, i32 %call56, %union.tree_node* %call57, %union.tree_node* %41), !dbg !3192
  store %union.tree_node* %call60, %union.tree_node** %expr, align 8, !dbg !3193
  br label %if.end61, !dbg !3194

if.end61:                                         ; preds = %if.then55, %land.lhs.true, %lor.lhs.false44
  br label %sw.epilog, !dbg !3195

sw.bb62:                                          ; preds = %if.end35
  %42 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !3196
  %call63 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %42), !dbg !3196
  %43 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !3196
  %call64 = call %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %43), !dbg !3196
  %44 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !3196
  %call65 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %44), !dbg !3196
  %call66 = call %union.tree_node* @fold_build1_stat_loc(i32 0, i32 %call63, %union.tree_node* %call64, %union.tree_node* %call65), !dbg !3196
  store %union.tree_node* %call66, %union.tree_node** %expr, align 8, !dbg !3197
  br label %sw.epilog, !dbg !3198

sw.bb67:                                          ; preds = %if.end35
  %45 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !3199
  %call68 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %45), !dbg !3199
  %46 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !3199
  %call69 = call %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %46), !dbg !3199
  %47 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !3199
  %call70 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %47), !dbg !3199
  %48 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !3199
  %call71 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %48), !dbg !3199
  %call72 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 %call68, %union.tree_node* %call69, %union.tree_node* %call70, %union.tree_node* %call71), !dbg !3199
  store %union.tree_node* %call72, %union.tree_node** %expr, align 8, !dbg !3200
  br label %sw.epilog, !dbg !3201

sw.default:                                       ; preds = %if.end35
  br label %sw.epilog, !dbg !3202

sw.epilog:                                        ; preds = %sw.default, %sw.bb67, %sw.bb62, %if.end61
  %49 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !3203
  %cmp73 = icmp eq %union.tree_node* %49, null, !dbg !3205
  br i1 %cmp73, label %if.then75, label %if.end77, !dbg !3206

if.then75:                                        ; preds = %sw.epilog
  %50 = load %struct.vn_ssa_aux*, %struct.vn_ssa_aux** %vn, align 8, !dbg !3207
  %valnum76 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %50, i32 0, i32 0, !dbg !3208
  %51 = load %union.tree_node*, %union.tree_node** %valnum76, align 8, !dbg !3208
  store %union.tree_node* %51, %union.tree_node** %retval, align 8, !dbg !3209
  br label %return, !dbg !3209

if.end77:                                         ; preds = %sw.epilog
  %52 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !3210
  %53 = load %struct.vn_ssa_aux*, %struct.vn_ssa_aux** %vn, align 8, !dbg !3211
  %expr78 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %53, i32 0, i32 1, !dbg !3212
  store %union.tree_node* %52, %union.tree_node** %expr78, align 8, !dbg !3213
  %54 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !3214
  store %union.tree_node* %54, %union.tree_node** %retval, align 8, !dbg !3215
  br label %return, !dbg !3215

return:                                           ; preds = %if.end77, %if.then75, %if.then33, %if.then28, %if.then19, %if.then14, %if.then3, %if.then
  %55 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !3216
  ret %union.tree_node* %55, !dbg !3216
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_nop_p(%union.gimple_statement_d* %g) #0 !dbg !3217 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !3221, metadata !DIExpression()), !dbg !3222
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3223
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !3224
  %cmp = icmp eq i32 %call, 18, !dbg !3225
  %conv = zext i1 %cmp to i32, !dbg !3225
  %conv1 = trunc i32 %conv to i8, !dbg !3224
  ret i8 %conv1, !dbg !3226
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_code(%union.gimple_statement_d* %g) #0 !dbg !3227 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !3230, metadata !DIExpression()), !dbg !3231
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3232
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !3233
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !3234
  %bf.load = load i32, i32* %1, align 8, !dbg !3234
  %bf.clear = and i32 %bf.load, 255, !dbg !3234
  ret i32 %bf.clear, !dbg !3235
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %gs) #0 !dbg !3236 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3237, metadata !DIExpression()), !dbg !3238
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3239
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !3240
  %cmp = icmp eq i32 %call, 6, !dbg !3241
  %conv = zext i1 %cmp to i32, !dbg !3241
  %conv1 = trunc i32 %conv to i8, !dbg !3240
  ret i8 %conv1, !dbg !3242
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %gs) #0 !dbg !3243 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3246, metadata !DIExpression()), !dbg !3247
  call void @llvm.dbg.declare(metadata i32* %code, metadata !3248, metadata !DIExpression()), !dbg !3249
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3250
  %call = call i32 @gimple_expr_code(%union.gimple_statement_d* %0), !dbg !3251
  store i32 %call, i32* %code, align 4, !dbg !3252
  %1 = load i32, i32* %code, align 4, !dbg !3253
  %call1 = call i32 @get_gimple_rhs_class(i32 %1), !dbg !3255
  %cmp = icmp eq i32 %call1, 3, !dbg !3256
  br i1 %cmp, label %if.then, label %if.end, !dbg !3257

if.then:                                          ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3258
  %call2 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %2), !dbg !3258
  %base = bitcast %union.tree_node* %call2 to %struct.tree_base*, !dbg !3258
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !3258
  %bf.load = load i64, i64* %3, align 8, !dbg !3258
  %bf.clear = and i64 %bf.load, 65535, !dbg !3258
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3258
  store i32 %bf.cast, i32* %code, align 4, !dbg !3259
  br label %if.end, !dbg !3260

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %code, align 4, !dbg !3261
  ret i32 %4, !dbg !3262
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %gs) #0 !dbg !3263 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3266, metadata !DIExpression()), !dbg !3267
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3268
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !3269
  ret %union.tree_node* %call, !dbg !3270
}

declare dso_local %union.tree_node* @fold_build1_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %stmt) #0 !dbg !3271 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  %type = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !3272, metadata !DIExpression()), !dbg !3273
  call void @llvm.dbg.declare(metadata i32* %code, metadata !3274, metadata !DIExpression()), !dbg !3275
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3276
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !3277
  store i32 %call, i32* %code, align 4, !dbg !3275
  %1 = load i32, i32* %code, align 4, !dbg !3278
  %cmp = icmp eq i32 %1, 6, !dbg !3280
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !3281

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code, align 4, !dbg !3282
  %cmp1 = icmp eq i32 %2, 8, !dbg !3283
  br i1 %cmp1, label %if.then, label %if.else11, !dbg !3284

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !3285, metadata !DIExpression()), !dbg !3287
  %3 = load i32, i32* %code, align 4, !dbg !3288
  %cmp2 = icmp eq i32 %3, 8, !dbg !3290
  br i1 %cmp2, label %if.then3, label %if.else, !dbg !3291

if.then3:                                         ; preds = %if.then
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3292
  %call4 = call %union.tree_node* @gimple_call_return_type(%union.gimple_statement_d* %4), !dbg !3293
  store %union.tree_node* %call4, %union.tree_node** %type, align 8, !dbg !3294
  br label %if.end, !dbg !3295

if.else:                                          ; preds = %if.then
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3296
  %call5 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %5), !dbg !3297
  switch i32 %call5, label %sw.default [
    i32 66, label %sw.bb
  ], !dbg !3298

sw.bb:                                            ; preds = %if.else
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3299
  %call6 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %6), !dbg !3299
  %common = bitcast %union.tree_node* %call6 to %struct.tree_common*, !dbg !3299
  %type7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3299
  %7 = load %union.tree_node*, %union.tree_node** %type7, align 8, !dbg !3299
  store %union.tree_node* %7, %union.tree_node** %type, align 8, !dbg !3301
  br label %sw.epilog, !dbg !3302

sw.default:                                       ; preds = %if.else
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3303
  %call8 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %8), !dbg !3303
  %common9 = bitcast %union.tree_node* %call8 to %struct.tree_common*, !dbg !3303
  %type10 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common9, i32 0, i32 2, !dbg !3303
  %9 = load %union.tree_node*, %union.tree_node** %type10, align 8, !dbg !3303
  store %union.tree_node* %9, %union.tree_node** %type, align 8, !dbg !3304
  br label %sw.epilog, !dbg !3305

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  br label %if.end

if.end:                                           ; preds = %sw.epilog, %if.then3
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3306
  store %union.tree_node* %10, %union.tree_node** %retval, align 8, !dbg !3307
  br label %return, !dbg !3307

if.else11:                                        ; preds = %lor.lhs.false
  %11 = load i32, i32* %code, align 4, !dbg !3308
  %cmp12 = icmp eq i32 %11, 1, !dbg !3310
  br i1 %cmp12, label %if.then13, label %if.else14, !dbg !3311

if.then13:                                        ; preds = %if.else11
  %12 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !3312
  store %union.tree_node* %12, %union.tree_node** %retval, align 8, !dbg !3313
  br label %return, !dbg !3313

if.else14:                                        ; preds = %if.else11
  %13 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !3314
  store %union.tree_node* %13, %union.tree_node** %retval, align 8, !dbg !3315
  br label %return, !dbg !3315

return:                                           ; preds = %if.else14, %if.then13, %if.end
  %14 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !3316
  ret %union.tree_node* %14, !dbg !3316
}

declare dso_local %union.tree_node* @fold_build2_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %gs) #0 !dbg !3317 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3318, metadata !DIExpression()), !dbg !3319
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3320
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !3322
  %cmp = icmp uge i32 %call, 3, !dbg !3323
  br i1 %cmp, label %if.then, label %if.else, !dbg !3324

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3325
  %call1 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %1, i32 2), !dbg !3326
  store %union.tree_node* %call1, %union.tree_node** %retval, align 8, !dbg !3327
  br label %return, !dbg !3327

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !3328
  br label %return, !dbg !3328

return:                                           ; preds = %if.else, %if.then
  %2 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !3329
  ret %union.tree_node* %2, !dbg !3329
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @get_constant_value_id(%union.tree_node* %constant) #0 !dbg !3330 {
entry:
  %retval = alloca i32, align 4
  %constant.addr = alloca %union.tree_node*, align 8
  %slot = alloca i8**, align 8
  %vc = alloca %struct.vn_constant_s, align 8
  store %union.tree_node* %constant, %union.tree_node** %constant.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %constant.addr, metadata !3333, metadata !DIExpression()), !dbg !3334
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !3335, metadata !DIExpression()), !dbg !3336
  call void @llvm.dbg.declare(metadata %struct.vn_constant_s* %vc, metadata !3337, metadata !DIExpression()), !dbg !3338
  %0 = load %union.tree_node*, %union.tree_node** %constant.addr, align 8, !dbg !3339
  %call = call i32 @vn_hash_constant_with_type(%union.tree_node* %0), !dbg !3340
  %hashcode = getelementptr inbounds %struct.vn_constant_s, %struct.vn_constant_s* %vc, i32 0, i32 1, !dbg !3341
  store i32 %call, i32* %hashcode, align 4, !dbg !3342
  %1 = load %union.tree_node*, %union.tree_node** %constant.addr, align 8, !dbg !3343
  %constant1 = getelementptr inbounds %struct.vn_constant_s, %struct.vn_constant_s* %vc, i32 0, i32 2, !dbg !3344
  store %union.tree_node* %1, %union.tree_node** %constant1, align 8, !dbg !3345
  %2 = load %struct.htab*, %struct.htab** @constant_to_value_id, align 8, !dbg !3346
  %3 = bitcast %struct.vn_constant_s* %vc to i8*, !dbg !3347
  %hashcode2 = getelementptr inbounds %struct.vn_constant_s, %struct.vn_constant_s* %vc, i32 0, i32 1, !dbg !3348
  %4 = load i32, i32* %hashcode2, align 4, !dbg !3348
  %call3 = call i8** @htab_find_slot_with_hash(%struct.htab* %2, i8* %3, i32 %4, i32 0), !dbg !3349
  store i8** %call3, i8*** %slot, align 8, !dbg !3350
  %5 = load i8**, i8*** %slot, align 8, !dbg !3351
  %tobool = icmp ne i8** %5, null, !dbg !3351
  br i1 %tobool, label %if.then, label %if.end, !dbg !3353

if.then:                                          ; preds = %entry
  %6 = load i8**, i8*** %slot, align 8, !dbg !3354
  %7 = load i8*, i8** %6, align 8, !dbg !3355
  %8 = bitcast i8* %7 to %struct.vn_constant_s*, !dbg !3356
  %value_id = getelementptr inbounds %struct.vn_constant_s, %struct.vn_constant_s* %8, i32 0, i32 0, !dbg !3357
  %9 = load i32, i32* %value_id, align 8, !dbg !3357
  store i32 %9, i32* %retval, align 4, !dbg !3358
  br label %return, !dbg !3358

if.end:                                           ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !3359
  br label %return, !dbg !3359

return:                                           ; preds = %if.end, %if.then
  %10 = load i32, i32* %retval, align 4, !dbg !3360
  ret i32 %10, !dbg !3360
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @vn_hash_constant_with_type(%union.tree_node* %constant) #0 !dbg !3361 {
entry:
  %constant.addr = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  store %union.tree_node* %constant, %union.tree_node** %constant.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %constant.addr, metadata !3364, metadata !DIExpression()), !dbg !3365
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !3366, metadata !DIExpression()), !dbg !3367
  %0 = load %union.tree_node*, %union.tree_node** %constant.addr, align 8, !dbg !3368
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !3368
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3368
  %1 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !3368
  store %union.tree_node* %1, %union.tree_node** %type, align 8, !dbg !3367
  %2 = load %union.tree_node*, %union.tree_node** %constant.addr, align 8, !dbg !3369
  %call = call i32 @iterative_hash_expr(%union.tree_node* %2, i32 0), !dbg !3370
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3371
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !3371
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !3371
  %bf.load = load i64, i64* %4, align 8, !dbg !3371
  %bf.clear = and i64 %bf.load, 65535, !dbg !3371
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3371
  %cmp = icmp eq i32 %bf.cast, 6, !dbg !3371
  br i1 %cmp, label %lor.end, label %lor.lhs.false, !dbg !3371

lor.lhs.false:                                    ; preds = %entry
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3371
  %base2 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !3371
  %6 = bitcast %struct.tree_base* %base2 to i64*, !dbg !3371
  %bf.load3 = load i64, i64* %6, align 8, !dbg !3371
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !3371
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !3371
  %cmp6 = icmp eq i32 %bf.cast5, 7, !dbg !3371
  br i1 %cmp6, label %lor.end, label %lor.rhs, !dbg !3371

lor.rhs:                                          ; preds = %lor.lhs.false
  %7 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3371
  %base7 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !3371
  %8 = bitcast %struct.tree_base* %base7 to i64*, !dbg !3371
  %bf.load8 = load i64, i64* %8, align 8, !dbg !3371
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !3371
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !3371
  %cmp11 = icmp eq i32 %bf.cast10, 8, !dbg !3371
  br label %lor.end, !dbg !3371

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %entry
  %9 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %cmp11, %lor.rhs ]
  %lor.ext = zext i1 %9 to i32, !dbg !3371
  %add = add i32 %call, %lor.ext, !dbg !3372
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3373
  %base12 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !3373
  %11 = bitcast %struct.tree_base* %base12 to i64*, !dbg !3373
  %bf.load13 = load i64, i64* %11, align 8, !dbg !3373
  %bf.clear14 = and i64 %bf.load13, 65535, !dbg !3373
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !3373
  %cmp16 = icmp eq i32 %bf.cast15, 6, !dbg !3373
  br i1 %cmp16, label %cond.true, label %lor.lhs.false17, !dbg !3373

lor.lhs.false17:                                  ; preds = %lor.end
  %12 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3373
  %base18 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !3373
  %13 = bitcast %struct.tree_base* %base18 to i64*, !dbg !3373
  %bf.load19 = load i64, i64* %13, align 8, !dbg !3373
  %bf.clear20 = and i64 %bf.load19, 65535, !dbg !3373
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !3373
  %cmp22 = icmp eq i32 %bf.cast21, 7, !dbg !3373
  br i1 %cmp22, label %cond.true, label %lor.lhs.false23, !dbg !3373

lor.lhs.false23:                                  ; preds = %lor.lhs.false17
  %14 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3373
  %base24 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !3373
  %15 = bitcast %struct.tree_base* %base24 to i64*, !dbg !3373
  %bf.load25 = load i64, i64* %15, align 8, !dbg !3373
  %bf.clear26 = and i64 %bf.load25, 65535, !dbg !3373
  %bf.cast27 = trunc i64 %bf.clear26 to i32, !dbg !3373
  %cmp28 = icmp eq i32 %bf.cast27, 8, !dbg !3373
  br i1 %cmp28, label %cond.true, label %cond.false, !dbg !3373

cond.true:                                        ; preds = %lor.lhs.false23, %lor.lhs.false17, %lor.end
  %16 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3374
  %type29 = bitcast %union.tree_node* %16 to %struct.tree_type*, !dbg !3374
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type29, i32 0, i32 6, !dbg !3374
  %bf.load30 = load i32, i32* %precision, align 4, !dbg !3374
  %bf.clear31 = and i32 %bf.load30, 1023, !dbg !3374
  %17 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3375
  %base32 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !3375
  %18 = bitcast %struct.tree_base* %base32 to i64*, !dbg !3375
  %bf.load33 = load i64, i64* %18, align 8, !dbg !3375
  %bf.lshr = lshr i64 %bf.load33, 21, !dbg !3375
  %bf.clear34 = and i64 %bf.lshr, 1, !dbg !3375
  %bf.cast35 = trunc i64 %bf.clear34 to i32, !dbg !3375
  %add36 = add nsw i32 %bf.clear31, %bf.cast35, !dbg !3376
  br label %cond.end, !dbg !3373

cond.false:                                       ; preds = %lor.lhs.false23
  br label %cond.end, !dbg !3373

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add36, %cond.true ], [ 0, %cond.false ], !dbg !3373
  %add37 = add i32 %add, %cond, !dbg !3377
  ret i32 %add37, !dbg !3378
}

declare dso_local i8** @htab_find_slot_with_hash(%struct.htab*, i8*, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @get_or_alloc_constant_value_id(%union.tree_node* %constant) #0 !dbg !3379 {
entry:
  %retval = alloca i32, align 4
  %constant.addr = alloca %union.tree_node*, align 8
  %slot = alloca i8**, align 8
  %vc = alloca %struct.vn_constant_s, align 8
  %vcp = alloca %struct.vn_constant_s*, align 8
  store %union.tree_node* %constant, %union.tree_node** %constant.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %constant.addr, metadata !3380, metadata !DIExpression()), !dbg !3381
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !3382, metadata !DIExpression()), !dbg !3383
  call void @llvm.dbg.declare(metadata %struct.vn_constant_s* %vc, metadata !3384, metadata !DIExpression()), !dbg !3385
  call void @llvm.dbg.declare(metadata %struct.vn_constant_s** %vcp, metadata !3386, metadata !DIExpression()), !dbg !3387
  %0 = load %union.tree_node*, %union.tree_node** %constant.addr, align 8, !dbg !3388
  %call = call i32 @vn_hash_constant_with_type(%union.tree_node* %0), !dbg !3389
  %hashcode = getelementptr inbounds %struct.vn_constant_s, %struct.vn_constant_s* %vc, i32 0, i32 1, !dbg !3390
  store i32 %call, i32* %hashcode, align 4, !dbg !3391
  %1 = load %union.tree_node*, %union.tree_node** %constant.addr, align 8, !dbg !3392
  %constant1 = getelementptr inbounds %struct.vn_constant_s, %struct.vn_constant_s* %vc, i32 0, i32 2, !dbg !3393
  store %union.tree_node* %1, %union.tree_node** %constant1, align 8, !dbg !3394
  %2 = load %struct.htab*, %struct.htab** @constant_to_value_id, align 8, !dbg !3395
  %3 = bitcast %struct.vn_constant_s* %vc to i8*, !dbg !3396
  %hashcode2 = getelementptr inbounds %struct.vn_constant_s, %struct.vn_constant_s* %vc, i32 0, i32 1, !dbg !3397
  %4 = load i32, i32* %hashcode2, align 4, !dbg !3397
  %call3 = call i8** @htab_find_slot_with_hash(%struct.htab* %2, i8* %3, i32 %4, i32 1), !dbg !3398
  store i8** %call3, i8*** %slot, align 8, !dbg !3399
  %5 = load i8**, i8*** %slot, align 8, !dbg !3400
  %6 = load i8*, i8** %5, align 8, !dbg !3402
  %tobool = icmp ne i8* %6, null, !dbg !3402
  br i1 %tobool, label %if.then, label %if.end, !dbg !3403

if.then:                                          ; preds = %entry
  %7 = load i8**, i8*** %slot, align 8, !dbg !3404
  %8 = load i8*, i8** %7, align 8, !dbg !3405
  %9 = bitcast i8* %8 to %struct.vn_constant_s*, !dbg !3406
  %value_id = getelementptr inbounds %struct.vn_constant_s, %struct.vn_constant_s* %9, i32 0, i32 0, !dbg !3407
  %10 = load i32, i32* %value_id, align 8, !dbg !3407
  store i32 %10, i32* %retval, align 4, !dbg !3408
  br label %return, !dbg !3408

if.end:                                           ; preds = %entry
  %call4 = call i8* @xmalloc(i64 16), !dbg !3409
  %11 = bitcast i8* %call4 to %struct.vn_constant_s*, !dbg !3409
  store %struct.vn_constant_s* %11, %struct.vn_constant_s** %vcp, align 8, !dbg !3410
  %hashcode5 = getelementptr inbounds %struct.vn_constant_s, %struct.vn_constant_s* %vc, i32 0, i32 1, !dbg !3411
  %12 = load i32, i32* %hashcode5, align 4, !dbg !3411
  %13 = load %struct.vn_constant_s*, %struct.vn_constant_s** %vcp, align 8, !dbg !3412
  %hashcode6 = getelementptr inbounds %struct.vn_constant_s, %struct.vn_constant_s* %13, i32 0, i32 1, !dbg !3413
  store i32 %12, i32* %hashcode6, align 4, !dbg !3414
  %14 = load %union.tree_node*, %union.tree_node** %constant.addr, align 8, !dbg !3415
  %15 = load %struct.vn_constant_s*, %struct.vn_constant_s** %vcp, align 8, !dbg !3416
  %constant7 = getelementptr inbounds %struct.vn_constant_s, %struct.vn_constant_s* %15, i32 0, i32 2, !dbg !3417
  store %union.tree_node* %14, %union.tree_node** %constant7, align 8, !dbg !3418
  %call8 = call i32 @get_next_value_id(), !dbg !3419
  %16 = load %struct.vn_constant_s*, %struct.vn_constant_s** %vcp, align 8, !dbg !3420
  %value_id9 = getelementptr inbounds %struct.vn_constant_s, %struct.vn_constant_s* %16, i32 0, i32 0, !dbg !3421
  store i32 %call8, i32* %value_id9, align 8, !dbg !3422
  %17 = load %struct.vn_constant_s*, %struct.vn_constant_s** %vcp, align 8, !dbg !3423
  %18 = bitcast %struct.vn_constant_s* %17 to i8*, !dbg !3424
  %19 = load i8**, i8*** %slot, align 8, !dbg !3425
  store i8* %18, i8** %19, align 8, !dbg !3426
  %20 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @constant_value_ids, align 8, !dbg !3427
  %21 = load %struct.vn_constant_s*, %struct.vn_constant_s** %vcp, align 8, !dbg !3428
  %value_id10 = getelementptr inbounds %struct.vn_constant_s, %struct.vn_constant_s* %21, i32 0, i32 0, !dbg !3429
  %22 = load i32, i32* %value_id10, align 8, !dbg !3429
  %call11 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %20, i32 %22), !dbg !3430
  %23 = load %struct.vn_constant_s*, %struct.vn_constant_s** %vcp, align 8, !dbg !3431
  %value_id12 = getelementptr inbounds %struct.vn_constant_s, %struct.vn_constant_s* %23, i32 0, i32 0, !dbg !3432
  %24 = load i32, i32* %value_id12, align 8, !dbg !3432
  store i32 %24, i32* %retval, align 4, !dbg !3433
  br label %return, !dbg !3433

return:                                           ; preds = %if.end, %if.then
  %25 = load i32, i32* %retval, align 4, !dbg !3434
  ret i32 %25, !dbg !3434
}

declare dso_local i8* @xmalloc(i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @get_next_value_id() #0 !dbg !3435 {
entry:
  %0 = load i32, i32* @next_value_id, align 4, !dbg !3438
  %inc = add i32 %0, 1, !dbg !3438
  store i32 %inc, i32* @next_value_id, align 4, !dbg !3438
  ret i32 %0, !dbg !3439
}

declare dso_local zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @value_id_constant_p(i32 %v) #0 !dbg !3440 {
entry:
  %v.addr = alloca i32, align 4
  store i32 %v, i32* %v.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %v.addr, metadata !3443, metadata !DIExpression()), !dbg !3444
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @constant_value_ids, align 8, !dbg !3445
  %1 = load i32, i32* %v.addr, align 4, !dbg !3446
  %call = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %0, i32 %1), !dbg !3447
  %conv = trunc i32 %call to i8, !dbg !3447
  ret i8 %conv, !dbg !3448
}

declare dso_local i32 @bitmap_bit_p(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @vn_reference_compute_hash(%struct.vn_reference_s* %vr1) #0 !dbg !3449 {
entry:
  %vr1.addr = alloca %struct.vn_reference_s*, align 8
  %result = alloca i32, align 4
  %i = alloca i32, align 4
  %vro = alloca %struct.vn_reference_op_struct*, align 8
  store %struct.vn_reference_s* %vr1, %struct.vn_reference_s** %vr1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.vn_reference_s** %vr1.addr, metadata !3453, metadata !DIExpression()), !dbg !3454
  call void @llvm.dbg.declare(metadata i32* %result, metadata !3455, metadata !DIExpression()), !dbg !3456
  store i32 0, i32* %result, align 4, !dbg !3456
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3457, metadata !DIExpression()), !dbg !3458
  call void @llvm.dbg.declare(metadata %struct.vn_reference_op_struct** %vro, metadata !3459, metadata !DIExpression()), !dbg !3462
  store i32 0, i32* %i, align 4, !dbg !3463
  br label %for.cond, !dbg !3465

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr1.addr, align 8, !dbg !3466
  %operands = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %0, i32 0, i32 5, !dbg !3466
  %1 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands, align 8, !dbg !3466
  %tobool = icmp ne %struct.VEC_vn_reference_op_s_heap* %1, null, !dbg !3466
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3466

cond.true:                                        ; preds = %for.cond
  %2 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr1.addr, align 8, !dbg !3466
  %operands1 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %2, i32 0, i32 5, !dbg !3466
  %3 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands1, align 8, !dbg !3466
  %base = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %3, i32 0, i32 0, !dbg !3466
  br label %cond.end, !dbg !3466

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !3466

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_vn_reference_op_s_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3466
  %4 = load i32, i32* %i, align 4, !dbg !3466
  %call = call i32 @VEC_vn_reference_op_s_base_iterate(%struct.VEC_vn_reference_op_s_base* %cond, i32 %4, %struct.vn_reference_op_struct** %vro), !dbg !3466
  %tobool2 = icmp ne i32 %call, 0, !dbg !3468
  br i1 %tobool2, label %for.body, label %for.end, !dbg !3468

for.body:                                         ; preds = %cond.end
  %5 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro, align 8, !dbg !3469
  %6 = load i32, i32* %result, align 4, !dbg !3470
  %call3 = call i32 @vn_reference_op_compute_hash(%struct.vn_reference_op_struct* %5, i32 %6), !dbg !3471
  store i32 %call3, i32* %result, align 4, !dbg !3472
  br label %for.inc, !dbg !3473

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4, !dbg !3474
  %inc = add nsw i32 %7, 1, !dbg !3474
  store i32 %inc, i32* %i, align 4, !dbg !3474
  br label %for.cond, !dbg !3475, !llvm.loop !3476

for.end:                                          ; preds = %cond.end
  %8 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr1.addr, align 8, !dbg !3478
  %vuse = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %8, i32 0, i32 2, !dbg !3480
  %9 = load %union.tree_node*, %union.tree_node** %vuse, align 8, !dbg !3480
  %tobool4 = icmp ne %union.tree_node* %9, null, !dbg !3478
  br i1 %tobool4, label %if.then, label %if.end, !dbg !3481

if.then:                                          ; preds = %for.end
  %10 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr1.addr, align 8, !dbg !3482
  %vuse5 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %10, i32 0, i32 2, !dbg !3482
  %11 = load %union.tree_node*, %union.tree_node** %vuse5, align 8, !dbg !3482
  %ssa_name = bitcast %union.tree_node* %11 to %struct.tree_ssa_name*, !dbg !3482
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !3482
  %12 = load i32, i32* %version, align 8, !dbg !3482
  %13 = load i32, i32* %result, align 4, !dbg !3483
  %add = add i32 %13, %12, !dbg !3483
  store i32 %add, i32* %result, align 4, !dbg !3483
  br label %if.end, !dbg !3484

if.end:                                           ; preds = %if.then, %for.end
  %14 = load i32, i32* %result, align 4, !dbg !3485
  ret i32 %14, !dbg !3486
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_vn_reference_op_s_base_iterate(%struct.VEC_vn_reference_op_s_base* %vec_, i32 %ix_, %struct.vn_reference_op_struct** %ptr) #0 !dbg !3487 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_vn_reference_op_s_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.vn_reference_op_struct**, align 8
  store %struct.VEC_vn_reference_op_s_base* %vec_, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_reference_op_s_base** %vec_.addr, metadata !3492, metadata !DIExpression()), !dbg !3493
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3494, metadata !DIExpression()), !dbg !3493
  store %struct.vn_reference_op_struct** %ptr, %struct.vn_reference_op_struct*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.vn_reference_op_struct*** %ptr.addr, metadata !3495, metadata !DIExpression()), !dbg !3493
  %0 = load %struct.VEC_vn_reference_op_s_base*, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8, !dbg !3496
  %tobool = icmp ne %struct.VEC_vn_reference_op_s_base* %0, null, !dbg !3496
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !3496

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !3496
  %2 = load %struct.VEC_vn_reference_op_s_base*, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8, !dbg !3496
  %num = getelementptr inbounds %struct.VEC_vn_reference_op_s_base, %struct.VEC_vn_reference_op_s_base* %2, i32 0, i32 0, !dbg !3496
  %3 = load i32, i32* %num, align 8, !dbg !3496
  %cmp = icmp ult i32 %1, %3, !dbg !3496
  br i1 %cmp, label %if.then, label %if.else, !dbg !3493

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_vn_reference_op_s_base*, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8, !dbg !3498
  %vec = getelementptr inbounds %struct.VEC_vn_reference_op_s_base, %struct.VEC_vn_reference_op_s_base* %4, i32 0, i32 2, !dbg !3498
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !3498
  %idxprom = zext i32 %5 to i64, !dbg !3498
  %arrayidx = getelementptr inbounds [1 x %struct.vn_reference_op_struct], [1 x %struct.vn_reference_op_struct]* %vec, i64 0, i64 %idxprom, !dbg !3498
  %6 = load %struct.vn_reference_op_struct**, %struct.vn_reference_op_struct*** %ptr.addr, align 8, !dbg !3498
  store %struct.vn_reference_op_struct* %arrayidx, %struct.vn_reference_op_struct** %6, align 8, !dbg !3498
  store i32 1, i32* %retval, align 4, !dbg !3498
  br label %return, !dbg !3498

if.else:                                          ; preds = %land.lhs.true, %entry
  %7 = load %struct.vn_reference_op_struct**, %struct.vn_reference_op_struct*** %ptr.addr, align 8, !dbg !3500
  store %struct.vn_reference_op_struct* null, %struct.vn_reference_op_struct** %7, align 8, !dbg !3500
  store i32 0, i32* %retval, align 4, !dbg !3500
  br label %return, !dbg !3500

return:                                           ; preds = %if.else, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !3493
  ret i32 %8, !dbg !3493
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @vn_reference_op_compute_hash(%struct.vn_reference_op_struct* %vro1, i32 %result) #0 !dbg !3502 {
entry:
  %vro1.addr = alloca %struct.vn_reference_op_struct*, align 8
  %result.addr = alloca i32, align 4
  store %struct.vn_reference_op_struct* %vro1, %struct.vn_reference_op_struct** %vro1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.vn_reference_op_struct** %vro1.addr, metadata !3506, metadata !DIExpression()), !dbg !3507
  store i32 %result, i32* %result.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %result.addr, metadata !3508, metadata !DIExpression()), !dbg !3509
  %0 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro1.addr, align 8, !dbg !3510
  %opcode = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %0, i32 0, i32 0, !dbg !3511
  %1 = load i32, i32* %opcode, align 8, !dbg !3511
  %2 = load i32, i32* %result.addr, align 4, !dbg !3512
  %call = call i32 @iterative_hash_hashval_t(i32 %1, i32 %2), !dbg !3513
  store i32 %call, i32* %result.addr, align 4, !dbg !3514
  %3 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro1.addr, align 8, !dbg !3515
  %op0 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %3, i32 0, i32 2, !dbg !3517
  %4 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !3517
  %tobool = icmp ne %union.tree_node* %4, null, !dbg !3515
  br i1 %tobool, label %if.then, label %if.end, !dbg !3518

if.then:                                          ; preds = %entry
  %5 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro1.addr, align 8, !dbg !3519
  %op01 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %5, i32 0, i32 2, !dbg !3520
  %6 = load %union.tree_node*, %union.tree_node** %op01, align 8, !dbg !3520
  %7 = load i32, i32* %result.addr, align 4, !dbg !3521
  %call2 = call i32 @iterative_hash_expr(%union.tree_node* %6, i32 %7), !dbg !3522
  store i32 %call2, i32* %result.addr, align 4, !dbg !3523
  br label %if.end, !dbg !3524

if.end:                                           ; preds = %if.then, %entry
  %8 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro1.addr, align 8, !dbg !3525
  %op1 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %8, i32 0, i32 3, !dbg !3527
  %9 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !3527
  %tobool3 = icmp ne %union.tree_node* %9, null, !dbg !3525
  br i1 %tobool3, label %if.then4, label %if.end7, !dbg !3528

if.then4:                                         ; preds = %if.end
  %10 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro1.addr, align 8, !dbg !3529
  %op15 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %10, i32 0, i32 3, !dbg !3530
  %11 = load %union.tree_node*, %union.tree_node** %op15, align 8, !dbg !3530
  %12 = load i32, i32* %result.addr, align 4, !dbg !3531
  %call6 = call i32 @iterative_hash_expr(%union.tree_node* %11, i32 %12), !dbg !3532
  store i32 %call6, i32* %result.addr, align 4, !dbg !3533
  br label %if.end7, !dbg !3534

if.end7:                                          ; preds = %if.then4, %if.end
  %13 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro1.addr, align 8, !dbg !3535
  %op2 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %13, i32 0, i32 4, !dbg !3537
  %14 = load %union.tree_node*, %union.tree_node** %op2, align 8, !dbg !3537
  %tobool8 = icmp ne %union.tree_node* %14, null, !dbg !3535
  br i1 %tobool8, label %if.then9, label %if.end12, !dbg !3538

if.then9:                                         ; preds = %if.end7
  %15 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro1.addr, align 8, !dbg !3539
  %op210 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %15, i32 0, i32 4, !dbg !3540
  %16 = load %union.tree_node*, %union.tree_node** %op210, align 8, !dbg !3540
  %17 = load i32, i32* %result.addr, align 4, !dbg !3541
  %call11 = call i32 @iterative_hash_expr(%union.tree_node* %16, i32 %17), !dbg !3542
  store i32 %call11, i32* %result.addr, align 4, !dbg !3543
  br label %if.end12, !dbg !3544

if.end12:                                         ; preds = %if.then9, %if.end7
  %18 = load i32, i32* %result.addr, align 4, !dbg !3545
  ret i32 %18, !dbg !3546
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @vn_reference_eq(i8* %p1, i8* %p2) #0 !dbg !3547 {
entry:
  %retval = alloca i32, align 4
  %p1.addr = alloca i8*, align 8
  %p2.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %vro = alloca %struct.vn_reference_op_struct*, align 8
  %vr1 = alloca %struct.vn_reference_s*, align 8
  %vr2 = alloca %struct.vn_reference_s*, align 8
  store i8* %p1, i8** %p1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p1.addr, metadata !3548, metadata !DIExpression()), !dbg !3549
  store i8* %p2, i8** %p2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p2.addr, metadata !3550, metadata !DIExpression()), !dbg !3551
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3552, metadata !DIExpression()), !dbg !3553
  call void @llvm.dbg.declare(metadata %struct.vn_reference_op_struct** %vro, metadata !3554, metadata !DIExpression()), !dbg !3555
  call void @llvm.dbg.declare(metadata %struct.vn_reference_s** %vr1, metadata !3556, metadata !DIExpression()), !dbg !3558
  %0 = load i8*, i8** %p1.addr, align 8, !dbg !3559
  %1 = bitcast i8* %0 to %struct.vn_reference_s*, !dbg !3560
  store %struct.vn_reference_s* %1, %struct.vn_reference_s** %vr1, align 8, !dbg !3558
  call void @llvm.dbg.declare(metadata %struct.vn_reference_s** %vr2, metadata !3561, metadata !DIExpression()), !dbg !3562
  %2 = load i8*, i8** %p2.addr, align 8, !dbg !3563
  %3 = bitcast i8* %2 to %struct.vn_reference_s*, !dbg !3564
  store %struct.vn_reference_s* %3, %struct.vn_reference_s** %vr2, align 8, !dbg !3562
  %4 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr1, align 8, !dbg !3565
  %hashcode = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %4, i32 0, i32 1, !dbg !3567
  %5 = load i32, i32* %hashcode, align 4, !dbg !3567
  %6 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr2, align 8, !dbg !3568
  %hashcode1 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %6, i32 0, i32 1, !dbg !3569
  %7 = load i32, i32* %hashcode1, align 4, !dbg !3569
  %cmp = icmp ne i32 %5, %7, !dbg !3570
  br i1 %cmp, label %if.then, label %if.end, !dbg !3571

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !3572
  br label %return, !dbg !3572

if.end:                                           ; preds = %entry
  %8 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr1, align 8, !dbg !3573
  %hashcode2 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %8, i32 0, i32 1, !dbg !3575
  %9 = load i32, i32* %hashcode2, align 4, !dbg !3575
  %10 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr2, align 8, !dbg !3576
  %hashcode3 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %10, i32 0, i32 1, !dbg !3577
  %11 = load i32, i32* %hashcode3, align 4, !dbg !3577
  %cmp4 = icmp ne i32 %9, %11, !dbg !3578
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !3579

if.then5:                                         ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !3580
  br label %return, !dbg !3580

if.end6:                                          ; preds = %if.end
  %12 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr1, align 8, !dbg !3581
  %vuse = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %12, i32 0, i32 2, !dbg !3583
  %13 = load %union.tree_node*, %union.tree_node** %vuse, align 8, !dbg !3583
  %14 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr2, align 8, !dbg !3584
  %vuse7 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %14, i32 0, i32 2, !dbg !3585
  %15 = load %union.tree_node*, %union.tree_node** %vuse7, align 8, !dbg !3585
  %cmp8 = icmp ne %union.tree_node* %13, %15, !dbg !3586
  br i1 %cmp8, label %if.then9, label %if.end10, !dbg !3587

if.then9:                                         ; preds = %if.end6
  store i32 0, i32* %retval, align 4, !dbg !3588
  br label %return, !dbg !3588

if.end10:                                         ; preds = %if.end6
  %16 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr1, align 8, !dbg !3589
  %operands = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %16, i32 0, i32 5, !dbg !3591
  %17 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands, align 8, !dbg !3591
  %18 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr2, align 8, !dbg !3592
  %operands11 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %18, i32 0, i32 5, !dbg !3593
  %19 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands11, align 8, !dbg !3593
  %cmp12 = icmp eq %struct.VEC_vn_reference_op_s_heap* %17, %19, !dbg !3594
  br i1 %cmp12, label %if.then13, label %if.end14, !dbg !3595

if.then13:                                        ; preds = %if.end10
  store i32 1, i32* %retval, align 4, !dbg !3596
  br label %return, !dbg !3596

if.end14:                                         ; preds = %if.end10
  %20 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr1, align 8, !dbg !3597
  %operands15 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %20, i32 0, i32 5, !dbg !3597
  %21 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands15, align 8, !dbg !3597
  %tobool = icmp ne %struct.VEC_vn_reference_op_s_heap* %21, null, !dbg !3597
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3597

cond.true:                                        ; preds = %if.end14
  %22 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr1, align 8, !dbg !3597
  %operands16 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %22, i32 0, i32 5, !dbg !3597
  %23 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands16, align 8, !dbg !3597
  %base = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %23, i32 0, i32 0, !dbg !3597
  br label %cond.end, !dbg !3597

cond.false:                                       ; preds = %if.end14
  br label %cond.end, !dbg !3597

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_vn_reference_op_s_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3597
  %call = call i32 @VEC_vn_reference_op_s_base_length(%struct.VEC_vn_reference_op_s_base* %cond), !dbg !3597
  %24 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr2, align 8, !dbg !3599
  %operands17 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %24, i32 0, i32 5, !dbg !3599
  %25 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands17, align 8, !dbg !3599
  %tobool18 = icmp ne %struct.VEC_vn_reference_op_s_heap* %25, null, !dbg !3599
  br i1 %tobool18, label %cond.true19, label %cond.false22, !dbg !3599

cond.true19:                                      ; preds = %cond.end
  %26 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr2, align 8, !dbg !3599
  %operands20 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %26, i32 0, i32 5, !dbg !3599
  %27 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands20, align 8, !dbg !3599
  %base21 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %27, i32 0, i32 0, !dbg !3599
  br label %cond.end23, !dbg !3599

cond.false22:                                     ; preds = %cond.end
  br label %cond.end23, !dbg !3599

cond.end23:                                       ; preds = %cond.false22, %cond.true19
  %cond24 = phi %struct.VEC_vn_reference_op_s_base* [ %base21, %cond.true19 ], [ null, %cond.false22 ], !dbg !3599
  %call25 = call i32 @VEC_vn_reference_op_s_base_length(%struct.VEC_vn_reference_op_s_base* %cond24), !dbg !3599
  %cmp26 = icmp ne i32 %call, %call25, !dbg !3600
  br i1 %cmp26, label %if.then27, label %if.end28, !dbg !3601

if.then27:                                        ; preds = %cond.end23
  store i32 0, i32* %retval, align 4, !dbg !3602
  br label %return, !dbg !3602

if.end28:                                         ; preds = %cond.end23
  store i32 0, i32* %i, align 4, !dbg !3603
  br label %for.cond, !dbg !3605

for.cond:                                         ; preds = %for.inc, %if.end28
  %28 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr1, align 8, !dbg !3606
  %operands29 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %28, i32 0, i32 5, !dbg !3606
  %29 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands29, align 8, !dbg !3606
  %tobool30 = icmp ne %struct.VEC_vn_reference_op_s_heap* %29, null, !dbg !3606
  br i1 %tobool30, label %cond.true31, label %cond.false34, !dbg !3606

cond.true31:                                      ; preds = %for.cond
  %30 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr1, align 8, !dbg !3606
  %operands32 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %30, i32 0, i32 5, !dbg !3606
  %31 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands32, align 8, !dbg !3606
  %base33 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %31, i32 0, i32 0, !dbg !3606
  br label %cond.end35, !dbg !3606

cond.false34:                                     ; preds = %for.cond
  br label %cond.end35, !dbg !3606

cond.end35:                                       ; preds = %cond.false34, %cond.true31
  %cond36 = phi %struct.VEC_vn_reference_op_s_base* [ %base33, %cond.true31 ], [ null, %cond.false34 ], !dbg !3606
  %32 = load i32, i32* %i, align 4, !dbg !3606
  %call37 = call i32 @VEC_vn_reference_op_s_base_iterate(%struct.VEC_vn_reference_op_s_base* %cond36, i32 %32, %struct.vn_reference_op_struct** %vro), !dbg !3606
  %tobool38 = icmp ne i32 %call37, 0, !dbg !3608
  br i1 %tobool38, label %for.body, label %for.end, !dbg !3608

for.body:                                         ; preds = %cond.end35
  %33 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr2, align 8, !dbg !3609
  %operands39 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %33, i32 0, i32 5, !dbg !3609
  %34 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands39, align 8, !dbg !3609
  %tobool40 = icmp ne %struct.VEC_vn_reference_op_s_heap* %34, null, !dbg !3609
  br i1 %tobool40, label %cond.true41, label %cond.false44, !dbg !3609

cond.true41:                                      ; preds = %for.body
  %35 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr2, align 8, !dbg !3609
  %operands42 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %35, i32 0, i32 5, !dbg !3609
  %36 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands42, align 8, !dbg !3609
  %base43 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %36, i32 0, i32 0, !dbg !3609
  br label %cond.end45, !dbg !3609

cond.false44:                                     ; preds = %for.body
  br label %cond.end45, !dbg !3609

cond.end45:                                       ; preds = %cond.false44, %cond.true41
  %cond46 = phi %struct.VEC_vn_reference_op_s_base* [ %base43, %cond.true41 ], [ null, %cond.false44 ], !dbg !3609
  %37 = load i32, i32* %i, align 4, !dbg !3609
  %call47 = call %struct.vn_reference_op_struct* @VEC_vn_reference_op_s_base_index(%struct.VEC_vn_reference_op_s_base* %cond46, i32 %37), !dbg !3609
  %38 = bitcast %struct.vn_reference_op_struct* %call47 to i8*, !dbg !3609
  %39 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro, align 8, !dbg !3611
  %40 = bitcast %struct.vn_reference_op_struct* %39 to i8*, !dbg !3611
  %call48 = call i32 @vn_reference_op_eq(i8* %38, i8* %40), !dbg !3612
  %tobool49 = icmp ne i32 %call48, 0, !dbg !3612
  br i1 %tobool49, label %if.end51, label %if.then50, !dbg !3613

if.then50:                                        ; preds = %cond.end45
  store i32 0, i32* %retval, align 4, !dbg !3614
  br label %return, !dbg !3614

if.end51:                                         ; preds = %cond.end45
  br label %for.inc, !dbg !3615

for.inc:                                          ; preds = %if.end51
  %41 = load i32, i32* %i, align 4, !dbg !3616
  %inc = add nsw i32 %41, 1, !dbg !3616
  store i32 %inc, i32* %i, align 4, !dbg !3616
  br label %for.cond, !dbg !3617, !llvm.loop !3618

for.end:                                          ; preds = %cond.end35
  store i32 1, i32* %retval, align 4, !dbg !3620
  br label %return, !dbg !3620

return:                                           ; preds = %for.end, %if.then50, %if.then27, %if.then13, %if.then9, %if.then5, %if.then
  %42 = load i32, i32* %retval, align 4, !dbg !3621
  ret i32 %42, !dbg !3621
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_vn_reference_op_s_base_length(%struct.VEC_vn_reference_op_s_base* %vec_) #0 !dbg !3622 {
entry:
  %vec_.addr = alloca %struct.VEC_vn_reference_op_s_base*, align 8
  store %struct.VEC_vn_reference_op_s_base* %vec_, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_reference_op_s_base** %vec_.addr, metadata !3627, metadata !DIExpression()), !dbg !3628
  %0 = load %struct.VEC_vn_reference_op_s_base*, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8, !dbg !3628
  %tobool = icmp ne %struct.VEC_vn_reference_op_s_base* %0, null, !dbg !3628
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3628

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_vn_reference_op_s_base*, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8, !dbg !3628
  %num = getelementptr inbounds %struct.VEC_vn_reference_op_s_base, %struct.VEC_vn_reference_op_s_base* %1, i32 0, i32 0, !dbg !3628
  %2 = load i32, i32* %num, align 8, !dbg !3628
  br label %cond.end, !dbg !3628

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3628

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !3628
  ret i32 %cond, !dbg !3628
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @vn_reference_op_eq(i8* %p1, i8* %p2) #0 !dbg !3629 {
entry:
  %p1.addr = alloca i8*, align 8
  %p2.addr = alloca i8*, align 8
  %vro1 = alloca %struct.vn_reference_op_struct*, align 8
  %vro2 = alloca %struct.vn_reference_op_struct*, align 8
  store i8* %p1, i8** %p1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p1.addr, metadata !3630, metadata !DIExpression()), !dbg !3631
  store i8* %p2, i8** %p2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p2.addr, metadata !3632, metadata !DIExpression()), !dbg !3633
  call void @llvm.dbg.declare(metadata %struct.vn_reference_op_struct** %vro1, metadata !3634, metadata !DIExpression()), !dbg !3636
  %0 = load i8*, i8** %p1.addr, align 8, !dbg !3637
  %1 = bitcast i8* %0 to %struct.vn_reference_op_struct*, !dbg !3638
  store %struct.vn_reference_op_struct* %1, %struct.vn_reference_op_struct** %vro1, align 8, !dbg !3636
  call void @llvm.dbg.declare(metadata %struct.vn_reference_op_struct** %vro2, metadata !3639, metadata !DIExpression()), !dbg !3640
  %2 = load i8*, i8** %p2.addr, align 8, !dbg !3641
  %3 = bitcast i8* %2 to %struct.vn_reference_op_struct*, !dbg !3642
  store %struct.vn_reference_op_struct* %3, %struct.vn_reference_op_struct** %vro2, align 8, !dbg !3640
  %4 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro1, align 8, !dbg !3643
  %opcode = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %4, i32 0, i32 0, !dbg !3644
  %5 = load i32, i32* %opcode, align 8, !dbg !3644
  %6 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro2, align 8, !dbg !3645
  %opcode1 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %6, i32 0, i32 0, !dbg !3646
  %7 = load i32, i32* %opcode1, align 8, !dbg !3646
  %cmp = icmp eq i32 %5, %7, !dbg !3647
  br i1 %cmp, label %land.lhs.true, label %land.end, !dbg !3648

land.lhs.true:                                    ; preds = %entry
  %8 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro1, align 8, !dbg !3649
  %type = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %8, i32 0, i32 1, !dbg !3650
  %9 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3650
  %10 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro2, align 8, !dbg !3651
  %type2 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %10, i32 0, i32 1, !dbg !3652
  %11 = load %union.tree_node*, %union.tree_node** %type2, align 8, !dbg !3652
  %call = call zeroext i8 @types_compatible_p(%union.tree_node* %9, %union.tree_node* %11), !dbg !3653
  %conv = zext i8 %call to i32, !dbg !3653
  %tobool = icmp ne i32 %conv, 0, !dbg !3653
  br i1 %tobool, label %land.lhs.true3, label %land.end, !dbg !3654

land.lhs.true3:                                   ; preds = %land.lhs.true
  %12 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro1, align 8, !dbg !3655
  %op0 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %12, i32 0, i32 2, !dbg !3656
  %13 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !3656
  %14 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro2, align 8, !dbg !3657
  %op04 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %14, i32 0, i32 2, !dbg !3658
  %15 = load %union.tree_node*, %union.tree_node** %op04, align 8, !dbg !3658
  %call5 = call zeroext i8 @expressions_equal_p(%union.tree_node* %13, %union.tree_node* %15), !dbg !3659
  %conv6 = zext i8 %call5 to i32, !dbg !3659
  %tobool7 = icmp ne i32 %conv6, 0, !dbg !3659
  br i1 %tobool7, label %land.lhs.true8, label %land.end, !dbg !3660

land.lhs.true8:                                   ; preds = %land.lhs.true3
  %16 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro1, align 8, !dbg !3661
  %op1 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %16, i32 0, i32 3, !dbg !3662
  %17 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !3662
  %18 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro2, align 8, !dbg !3663
  %op19 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %18, i32 0, i32 3, !dbg !3664
  %19 = load %union.tree_node*, %union.tree_node** %op19, align 8, !dbg !3664
  %call10 = call zeroext i8 @expressions_equal_p(%union.tree_node* %17, %union.tree_node* %19), !dbg !3665
  %conv11 = zext i8 %call10 to i32, !dbg !3665
  %tobool12 = icmp ne i32 %conv11, 0, !dbg !3665
  br i1 %tobool12, label %land.rhs, label %land.end, !dbg !3666

land.rhs:                                         ; preds = %land.lhs.true8
  %20 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro1, align 8, !dbg !3667
  %op2 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %20, i32 0, i32 4, !dbg !3668
  %21 = load %union.tree_node*, %union.tree_node** %op2, align 8, !dbg !3668
  %22 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro2, align 8, !dbg !3669
  %op213 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %22, i32 0, i32 4, !dbg !3670
  %23 = load %union.tree_node*, %union.tree_node** %op213, align 8, !dbg !3670
  %call14 = call zeroext i8 @expressions_equal_p(%union.tree_node* %21, %union.tree_node* %23), !dbg !3671
  %conv15 = zext i8 %call14 to i32, !dbg !3671
  %tobool16 = icmp ne i32 %conv15, 0, !dbg !3666
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true8, %land.lhs.true3, %land.lhs.true, %entry
  %24 = phi i1 [ false, %land.lhs.true8 ], [ false, %land.lhs.true3 ], [ false, %land.lhs.true ], [ false, %entry ], [ %tobool16, %land.rhs ], !dbg !3672
  %land.ext = zext i1 %24 to i32, !dbg !3666
  ret i32 %land.ext, !dbg !3673
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.vn_reference_op_struct* @VEC_vn_reference_op_s_base_index(%struct.VEC_vn_reference_op_s_base* %vec_, i32 %ix_) #0 !dbg !3674 {
entry:
  %vec_.addr = alloca %struct.VEC_vn_reference_op_s_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_vn_reference_op_s_base* %vec_, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_reference_op_s_base** %vec_.addr, metadata !3677, metadata !DIExpression()), !dbg !3678
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3679, metadata !DIExpression()), !dbg !3678
  %0 = load %struct.VEC_vn_reference_op_s_base*, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8, !dbg !3678
  %tobool = icmp ne %struct.VEC_vn_reference_op_s_base* %0, null, !dbg !3678
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !3678

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !3678
  %2 = load %struct.VEC_vn_reference_op_s_base*, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8, !dbg !3678
  %num = getelementptr inbounds %struct.VEC_vn_reference_op_s_base, %struct.VEC_vn_reference_op_s_base* %2, i32 0, i32 0, !dbg !3678
  %3 = load i32, i32* %num, align 8, !dbg !3678
  %cmp = icmp ult i32 %1, %3, !dbg !3678
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !3680
  %land.ext = zext i1 %4 to i32, !dbg !3678
  %5 = load %struct.VEC_vn_reference_op_s_base*, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8, !dbg !3678
  %vec = getelementptr inbounds %struct.VEC_vn_reference_op_s_base, %struct.VEC_vn_reference_op_s_base* %5, i32 0, i32 2, !dbg !3678
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !3678
  %idxprom = zext i32 %6 to i64, !dbg !3678
  %arrayidx = getelementptr inbounds [1 x %struct.vn_reference_op_struct], [1 x %struct.vn_reference_op_struct]* %vec, i64 0, i64 %idxprom, !dbg !3678
  ret %struct.vn_reference_op_struct* %arrayidx, !dbg !3678
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @copy_reference_ops_from_ref(%union.tree_node* %ref, %struct.VEC_vn_reference_op_s_heap** %result) #0 !dbg !3681 {
entry:
  %ref.addr = alloca %union.tree_node*, align 8
  %result.addr = alloca %struct.VEC_vn_reference_op_s_heap**, align 8
  %temp = alloca %struct.vn_reference_op_struct, align 8
  %base1 = alloca %union.tree_node*, align 8
  %temp40 = alloca %struct.vn_reference_op_struct, align 8
  store %union.tree_node* %ref, %union.tree_node** %ref.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ref.addr, metadata !3685, metadata !DIExpression()), !dbg !3686
  store %struct.VEC_vn_reference_op_s_heap** %result, %struct.VEC_vn_reference_op_s_heap*** %result.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_reference_op_s_heap*** %result.addr, metadata !3687, metadata !DIExpression()), !dbg !3688
  %0 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !3689
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !3689
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !3689
  %bf.load = load i64, i64* %1, align 8, !dbg !3689
  %bf.clear = and i64 %bf.load, 65535, !dbg !3689
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3689
  %cmp = icmp eq i32 %bf.cast, 152, !dbg !3691
  br i1 %cmp, label %if.then, label %if.end38, !dbg !3692

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.vn_reference_op_struct* %temp, metadata !3693, metadata !DIExpression()), !dbg !3695
  call void @llvm.dbg.declare(metadata %union.tree_node** %base1, metadata !3696, metadata !DIExpression()), !dbg !3697
  %2 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !3698
  %exp = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !3698
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !3698
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !3698
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !3698
  %tobool = icmp ne %union.tree_node* %3, null, !dbg !3698
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3698

cond.true:                                        ; preds = %if.then
  %4 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !3699
  %exp2 = bitcast %union.tree_node* %4 to %struct.tree_exp*, !dbg !3699
  %operands3 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2, i32 0, i32 3, !dbg !3699
  %arrayidx4 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3, i64 0, i64 0, !dbg !3699
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx4, align 8, !dbg !3699
  br label %cond.end, !dbg !3698

cond.false:                                       ; preds = %if.then
  %6 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !3700
  %exp5 = bitcast %union.tree_node* %6 to %struct.tree_exp*, !dbg !3700
  %operands6 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5, i32 0, i32 3, !dbg !3700
  %arrayidx7 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands6, i64 0, i64 1, !dbg !3700
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx7, align 8, !dbg !3700
  br label %cond.end, !dbg !3698

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %5, %cond.true ], [ %7, %cond.false ], !dbg !3698
  store %union.tree_node* %cond, %union.tree_node** %base1, align 8, !dbg !3701
  %8 = load %union.tree_node*, %union.tree_node** %base1, align 8, !dbg !3702
  %tobool8 = icmp ne %union.tree_node* %8, null, !dbg !3702
  br i1 %tobool8, label %if.end, label %if.then9, !dbg !3704

if.then9:                                         ; preds = %cond.end
  %9 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 39), align 8, !dbg !3705
  %call = call %union.tree_node* @build_int_cst(%union.tree_node* %9, i64 0), !dbg !3706
  store %union.tree_node* %call, %union.tree_node** %base1, align 8, !dbg !3707
  br label %if.end, !dbg !3708

if.end:                                           ; preds = %if.then9, %cond.end
  %10 = bitcast %struct.vn_reference_op_struct* %temp to i8*, !dbg !3709
  call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 40, i1 false), !dbg !3709
  %11 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !3710
  %common = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !3710
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3710
  %12 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3710
  %type10 = bitcast %union.tree_node* %12 to %struct.tree_type*, !dbg !3710
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type10, i32 0, i32 16, !dbg !3710
  %13 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !3710
  %type11 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %temp, i32 0, i32 1, !dbg !3711
  store %union.tree_node* %13, %union.tree_node** %type11, align 8, !dbg !3712
  %14 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !3713
  %base12 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !3713
  %15 = bitcast %struct.tree_base* %base12 to i64*, !dbg !3713
  %bf.load13 = load i64, i64* %15, align 8, !dbg !3713
  %bf.clear14 = and i64 %bf.load13, 65535, !dbg !3713
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !3713
  %opcode = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %temp, i32 0, i32 0, !dbg !3714
  store i32 %bf.cast15, i32* %opcode, align 8, !dbg !3715
  %16 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !3716
  %exp16 = bitcast %union.tree_node* %16 to %struct.tree_exp*, !dbg !3716
  %operands17 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp16, i32 0, i32 3, !dbg !3716
  %arrayidx18 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands17, i64 0, i64 2, !dbg !3716
  %17 = load %union.tree_node*, %union.tree_node** %arrayidx18, align 8, !dbg !3716
  %op0 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %temp, i32 0, i32 2, !dbg !3717
  store %union.tree_node* %17, %union.tree_node** %op0, align 8, !dbg !3718
  %18 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !3719
  %exp19 = bitcast %union.tree_node* %18 to %struct.tree_exp*, !dbg !3719
  %operands20 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp19, i32 0, i32 3, !dbg !3719
  %arrayidx21 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands20, i64 0, i64 3, !dbg !3719
  %19 = load %union.tree_node*, %union.tree_node** %arrayidx21, align 8, !dbg !3719
  %op1 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %temp, i32 0, i32 3, !dbg !3720
  store %union.tree_node* %19, %union.tree_node** %op1, align 8, !dbg !3721
  %20 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !3722
  %exp22 = bitcast %union.tree_node* %20 to %struct.tree_exp*, !dbg !3722
  %operands23 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp22, i32 0, i32 3, !dbg !3722
  %arrayidx24 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands23, i64 0, i64 4, !dbg !3722
  %21 = load %union.tree_node*, %union.tree_node** %arrayidx24, align 8, !dbg !3722
  %op2 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %temp, i32 0, i32 4, !dbg !3723
  store %union.tree_node* %21, %union.tree_node** %op2, align 8, !dbg !3724
  %22 = load %struct.VEC_vn_reference_op_s_heap**, %struct.VEC_vn_reference_op_s_heap*** %result.addr, align 8, !dbg !3725
  %call25 = call %struct.vn_reference_op_struct* @VEC_vn_reference_op_s_heap_safe_push(%struct.VEC_vn_reference_op_s_heap** %22, %struct.vn_reference_op_struct* %temp), !dbg !3725
  %23 = bitcast %struct.vn_reference_op_struct* %temp to i8*, !dbg !3726
  call void @llvm.memset.p0i8.i64(i8* align 8 %23, i8 0, i64 40, i1 false), !dbg !3726
  %type26 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %temp, i32 0, i32 1, !dbg !3727
  store %union.tree_node* null, %union.tree_node** %type26, align 8, !dbg !3728
  %24 = load %union.tree_node*, %union.tree_node** %base1, align 8, !dbg !3729
  %base27 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !3729
  %25 = bitcast %struct.tree_base* %base27 to i64*, !dbg !3729
  %bf.load28 = load i64, i64* %25, align 8, !dbg !3729
  %bf.clear29 = and i64 %bf.load28, 65535, !dbg !3729
  %bf.cast30 = trunc i64 %bf.clear29 to i32, !dbg !3729
  %opcode31 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %temp, i32 0, i32 0, !dbg !3730
  store i32 %bf.cast30, i32* %opcode31, align 8, !dbg !3731
  %26 = load %union.tree_node*, %union.tree_node** %base1, align 8, !dbg !3732
  %op032 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %temp, i32 0, i32 2, !dbg !3733
  store %union.tree_node* %26, %union.tree_node** %op032, align 8, !dbg !3734
  %27 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !3735
  %exp33 = bitcast %union.tree_node* %27 to %struct.tree_exp*, !dbg !3735
  %operands34 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp33, i32 0, i32 3, !dbg !3735
  %arrayidx35 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands34, i64 0, i64 5, !dbg !3735
  %28 = load %union.tree_node*, %union.tree_node** %arrayidx35, align 8, !dbg !3735
  %op136 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %temp, i32 0, i32 3, !dbg !3736
  store %union.tree_node* %28, %union.tree_node** %op136, align 8, !dbg !3737
  %29 = load %struct.VEC_vn_reference_op_s_heap**, %struct.VEC_vn_reference_op_s_heap*** %result.addr, align 8, !dbg !3738
  %call37 = call %struct.vn_reference_op_struct* @VEC_vn_reference_op_s_heap_safe_push(%struct.VEC_vn_reference_op_s_heap** %29, %struct.vn_reference_op_struct* %temp), !dbg !3738
  br label %while.end, !dbg !3739

if.end38:                                         ; preds = %entry
  br label %while.cond, !dbg !3740

while.cond:                                       ; preds = %if.end146, %if.end38
  %30 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !3741
  %tobool39 = icmp ne %union.tree_node* %30, null, !dbg !3740
  br i1 %tobool39, label %while.body, label %while.end, !dbg !3740

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.vn_reference_op_struct* %temp40, metadata !3742, metadata !DIExpression()), !dbg !3744
  %31 = bitcast %struct.vn_reference_op_struct* %temp40 to i8*, !dbg !3745
  call void @llvm.memset.p0i8.i64(i8* align 8 %31, i8 0, i64 40, i1 false), !dbg !3745
  %32 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !3746
  %common41 = bitcast %union.tree_node* %32 to %struct.tree_common*, !dbg !3746
  %type42 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common41, i32 0, i32 2, !dbg !3746
  %33 = load %union.tree_node*, %union.tree_node** %type42, align 8, !dbg !3746
  %type43 = bitcast %union.tree_node* %33 to %struct.tree_type*, !dbg !3746
  %main_variant44 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type43, i32 0, i32 16, !dbg !3746
  %34 = load %union.tree_node*, %union.tree_node** %main_variant44, align 8, !dbg !3746
  %type45 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %temp40, i32 0, i32 1, !dbg !3747
  store %union.tree_node* %34, %union.tree_node** %type45, align 8, !dbg !3748
  %35 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !3749
  %base46 = bitcast %union.tree_node* %35 to %struct.tree_base*, !dbg !3749
  %36 = bitcast %struct.tree_base* %base46 to i64*, !dbg !3749
  %bf.load47 = load i64, i64* %36, align 8, !dbg !3749
  %bf.clear48 = and i64 %bf.load47, 65535, !dbg !3749
  %bf.cast49 = trunc i64 %bf.clear48 to i32, !dbg !3749
  %opcode50 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %temp40, i32 0, i32 0, !dbg !3750
  store i32 %bf.cast49, i32* %opcode50, align 8, !dbg !3751
  %opcode51 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %temp40, i32 0, i32 0, !dbg !3752
  %37 = load i32, i32* %opcode51, align 8, !dbg !3752
  switch i32 %37, label %sw.default [
    i32 48, label %sw.bb
    i32 47, label %sw.bb
    i32 49, label %sw.bb52
    i32 42, label %sw.bb57
    i32 41, label %sw.bb66
    i32 46, label %sw.bb107
    i32 45, label %sw.bb107
    i32 28, label %sw.bb116
    i32 23, label %sw.bb116
    i32 26, label %sw.bb116
    i32 27, label %sw.bb116
    i32 24, label %sw.bb116
    i32 51, label %sw.bb116
    i32 32, label %sw.bb116
    i32 34, label %sw.bb116
    i32 33, label %sw.bb116
    i32 36, label %sw.bb116
    i32 141, label %sw.bb116
    i32 121, label %sw.bb118
    i32 44, label %sw.bb124
    i32 43, label %sw.bb124
    i32 118, label %sw.bb124
  ], !dbg !3753

sw.bb:                                            ; preds = %while.body, %while.body
  br label %sw.epilog, !dbg !3754

sw.bb52:                                          ; preds = %while.body
  %38 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !3756
  %exp53 = bitcast %union.tree_node* %38 to %struct.tree_exp*, !dbg !3756
  %operands54 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp53, i32 0, i32 3, !dbg !3756
  %arrayidx55 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands54, i64 0, i64 1, !dbg !3756
  %39 = load %union.tree_node*, %union.tree_node** %arrayidx55, align 8, !dbg !3756
  %op056 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %temp40, i32 0, i32 2, !dbg !3757
  store %union.tree_node* %39, %union.tree_node** %op056, align 8, !dbg !3758
  br label %sw.epilog, !dbg !3759

sw.bb57:                                          ; preds = %while.body
  %40 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !3760
  %exp58 = bitcast %union.tree_node* %40 to %struct.tree_exp*, !dbg !3760
  %operands59 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp58, i32 0, i32 3, !dbg !3760
  %arrayidx60 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands59, i64 0, i64 1, !dbg !3760
  %41 = load %union.tree_node*, %union.tree_node** %arrayidx60, align 8, !dbg !3760
  %op061 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %temp40, i32 0, i32 2, !dbg !3761
  store %union.tree_node* %41, %union.tree_node** %op061, align 8, !dbg !3762
  %42 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !3763
  %exp62 = bitcast %union.tree_node* %42 to %struct.tree_exp*, !dbg !3763
  %operands63 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp62, i32 0, i32 3, !dbg !3763
  %arrayidx64 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands63, i64 0, i64 2, !dbg !3763
  %43 = load %union.tree_node*, %union.tree_node** %arrayidx64, align 8, !dbg !3763
  %op165 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %temp40, i32 0, i32 3, !dbg !3764
  store %union.tree_node* %43, %union.tree_node** %op165, align 8, !dbg !3765
  br label %sw.epilog, !dbg !3766

sw.bb66:                                          ; preds = %while.body
  %type67 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %temp40, i32 0, i32 1, !dbg !3767
  store %union.tree_node* null, %union.tree_node** %type67, align 8, !dbg !3768
  %44 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !3769
  %exp68 = bitcast %union.tree_node* %44 to %struct.tree_exp*, !dbg !3769
  %operands69 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp68, i32 0, i32 3, !dbg !3769
  %arrayidx70 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands69, i64 0, i64 1, !dbg !3769
  %45 = load %union.tree_node*, %union.tree_node** %arrayidx70, align 8, !dbg !3769
  %op071 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %temp40, i32 0, i32 2, !dbg !3770
  store %union.tree_node* %45, %union.tree_node** %op071, align 8, !dbg !3771
  %46 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !3772
  %exp72 = bitcast %union.tree_node* %46 to %struct.tree_exp*, !dbg !3772
  %operands73 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp72, i32 0, i32 3, !dbg !3772
  %arrayidx74 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands73, i64 0, i64 2, !dbg !3772
  %47 = load %union.tree_node*, %union.tree_node** %arrayidx74, align 8, !dbg !3772
  %op175 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %temp40, i32 0, i32 3, !dbg !3773
  store %union.tree_node* %47, %union.tree_node** %op175, align 8, !dbg !3774
  %48 = load i8, i8* @may_insert, align 1, !dbg !3775
  %conv = zext i8 %48 to i32, !dbg !3775
  %tobool76 = icmp ne i32 %conv, 0, !dbg !3775
  br i1 %tobool76, label %land.lhs.true, label %if.end106, !dbg !3777

land.lhs.true:                                    ; preds = %sw.bb66
  %op177 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %temp40, i32 0, i32 3, !dbg !3778
  %49 = load %union.tree_node*, %union.tree_node** %op177, align 8, !dbg !3778
  %cmp78 = icmp eq %union.tree_node* %49, null, !dbg !3779
  br i1 %cmp78, label %land.lhs.true80, label %if.end106, !dbg !3780

land.lhs.true80:                                  ; preds = %land.lhs.true
  %op081 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %temp40, i32 0, i32 2, !dbg !3781
  %50 = load %union.tree_node*, %union.tree_node** %op081, align 8, !dbg !3781
  %decl_minimal = bitcast %union.tree_node* %50 to %struct.tree_decl_minimal*, !dbg !3781
  %context = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 4, !dbg !3781
  %51 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !3781
  %base82 = bitcast %union.tree_node* %51 to %struct.tree_base*, !dbg !3781
  %52 = bitcast %struct.tree_base* %base82 to i64*, !dbg !3781
  %bf.load83 = load i64, i64* %52, align 8, !dbg !3781
  %bf.clear84 = and i64 %bf.load83, 65535, !dbg !3781
  %bf.cast85 = trunc i64 %bf.clear84 to i32, !dbg !3781
  %cmp86 = icmp eq i32 %bf.cast85, 17, !dbg !3782
  br i1 %cmp86, label %land.lhs.true88, label %if.end106, !dbg !3783

land.lhs.true88:                                  ; preds = %land.lhs.true80
  %op089 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %temp40, i32 0, i32 2, !dbg !3784
  %53 = load %union.tree_node*, %union.tree_node** %op089, align 8, !dbg !3784
  %field_decl = bitcast %union.tree_node* %53 to %struct.tree_field_decl*, !dbg !3784
  %offset = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl, i32 0, i32 1, !dbg !3784
  %54 = load %union.tree_node*, %union.tree_node** %offset, align 8, !dbg !3784
  %call90 = call i32 @integer_zerop(%union.tree_node* %54), !dbg !3785
  %tobool91 = icmp ne i32 %call90, 0, !dbg !3785
  br i1 %tobool91, label %land.lhs.true92, label %if.end106, !dbg !3786

land.lhs.true92:                                  ; preds = %land.lhs.true88
  %op093 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %temp40, i32 0, i32 2, !dbg !3787
  %55 = load %union.tree_node*, %union.tree_node** %op093, align 8, !dbg !3787
  %field_decl94 = bitcast %union.tree_node* %55 to %struct.tree_field_decl*, !dbg !3787
  %bit_offset = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl94, i32 0, i32 4, !dbg !3787
  %56 = load %union.tree_node*, %union.tree_node** %bit_offset, align 8, !dbg !3787
  %call95 = call i32 @integer_zerop(%union.tree_node* %56), !dbg !3788
  %tobool96 = icmp ne i32 %call95, 0, !dbg !3788
  br i1 %tobool96, label %land.lhs.true97, label %if.end106, !dbg !3789

land.lhs.true97:                                  ; preds = %land.lhs.true92
  %op098 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %temp40, i32 0, i32 2, !dbg !3790
  %57 = load %union.tree_node*, %union.tree_node** %op098, align 8, !dbg !3790
  %decl_common = bitcast %union.tree_node* %57 to %struct.tree_decl_common*, !dbg !3790
  %size = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 1, !dbg !3790
  %58 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !3790
  %call99 = call i32 @host_integerp(%union.tree_node* %58, i32 0), !dbg !3791
  %tobool100 = icmp ne i32 %call99, 0, !dbg !3791
  br i1 %tobool100, label %if.then101, label %if.end106, !dbg !3792

if.then101:                                       ; preds = %land.lhs.true97
  %op0102 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %temp40, i32 0, i32 2, !dbg !3793
  %59 = load %union.tree_node*, %union.tree_node** %op0102, align 8, !dbg !3793
  %decl_common103 = bitcast %union.tree_node* %59 to %struct.tree_decl_common*, !dbg !3793
  %size104 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common103, i32 0, i32 1, !dbg !3793
  %60 = load %union.tree_node*, %union.tree_node** %size104, align 8, !dbg !3793
  %op0105 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %temp40, i32 0, i32 2, !dbg !3794
  store %union.tree_node* %60, %union.tree_node** %op0105, align 8, !dbg !3795
  br label %if.end106, !dbg !3796

if.end106:                                        ; preds = %if.then101, %land.lhs.true97, %land.lhs.true92, %land.lhs.true88, %land.lhs.true80, %land.lhs.true, %sw.bb66
  br label %sw.epilog, !dbg !3797

sw.bb107:                                         ; preds = %while.body, %while.body
  %61 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !3798
  %exp108 = bitcast %union.tree_node* %61 to %struct.tree_exp*, !dbg !3798
  %operands109 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp108, i32 0, i32 3, !dbg !3798
  %arrayidx110 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands109, i64 0, i64 1, !dbg !3798
  %62 = load %union.tree_node*, %union.tree_node** %arrayidx110, align 8, !dbg !3798
  %op0111 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %temp40, i32 0, i32 2, !dbg !3799
  store %union.tree_node* %62, %union.tree_node** %op0111, align 8, !dbg !3800
  %63 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !3801
  %call112 = call %union.tree_node* @array_ref_low_bound(%union.tree_node* %63), !dbg !3802
  %op1113 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %temp40, i32 0, i32 3, !dbg !3803
  store %union.tree_node* %call112, %union.tree_node** %op1113, align 8, !dbg !3804
  %64 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !3805
  %call114 = call %union.tree_node* @array_ref_element_size(%union.tree_node* %64), !dbg !3806
  %op2115 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %temp40, i32 0, i32 4, !dbg !3807
  store %union.tree_node* %call114, %union.tree_node** %op2115, align 8, !dbg !3808
  br label %sw.epilog, !dbg !3809

sw.bb116:                                         ; preds = %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body
  %65 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !3810
  %op0117 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %temp40, i32 0, i32 2, !dbg !3811
  store %union.tree_node* %65, %union.tree_node** %op0117, align 8, !dbg !3812
  br label %sw.epilog, !dbg !3813

sw.bb118:                                         ; preds = %while.body
  %66 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !3814
  %call119 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %66), !dbg !3816
  %tobool120 = icmp ne i8 %call119, 0, !dbg !3816
  br i1 %tobool120, label %if.then121, label %if.end123, !dbg !3817

if.then121:                                       ; preds = %sw.bb118
  %67 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !3818
  %op0122 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %temp40, i32 0, i32 2, !dbg !3820
  store %union.tree_node* %67, %union.tree_node** %op0122, align 8, !dbg !3821
  br label %sw.epilog, !dbg !3822

if.end123:                                        ; preds = %sw.bb118
  br label %sw.bb124, !dbg !3823

sw.bb124:                                         ; preds = %while.body, %while.body, %while.body, %if.end123
  br label %sw.epilog, !dbg !3824

sw.default:                                       ; preds = %while.body
  call void @fancy_abort(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0), i32 601, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3825
  br label %sw.epilog, !dbg !3826

sw.epilog:                                        ; preds = %sw.default, %sw.bb124, %if.then121, %sw.bb116, %sw.bb107, %if.end106, %sw.bb57, %sw.bb52, %sw.bb
  %68 = load %struct.VEC_vn_reference_op_s_heap**, %struct.VEC_vn_reference_op_s_heap*** %result.addr, align 8, !dbg !3827
  %call125 = call %struct.vn_reference_op_struct* @VEC_vn_reference_op_s_heap_safe_push(%struct.VEC_vn_reference_op_s_heap** %68, %struct.vn_reference_op_struct* %temp40), !dbg !3827
  %69 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !3828
  %base126 = bitcast %union.tree_node* %69 to %struct.tree_base*, !dbg !3828
  %70 = bitcast %struct.tree_base* %base126 to i64*, !dbg !3828
  %bf.load127 = load i64, i64* %70, align 8, !dbg !3828
  %bf.clear128 = and i64 %bf.load127, 65535, !dbg !3828
  %bf.cast129 = trunc i64 %bf.clear128 to i32, !dbg !3828
  %idxprom = sext i32 %bf.cast129 to i64, !dbg !3828
  %arrayidx130 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !3828
  %71 = load i32, i32* %arrayidx130, align 4, !dbg !3828
  %cmp131 = icmp eq i32 %71, 4, !dbg !3828
  br i1 %cmp131, label %if.then142, label %lor.lhs.false, !dbg !3830

lor.lhs.false:                                    ; preds = %sw.epilog
  %72 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !3831
  %base133 = bitcast %union.tree_node* %72 to %struct.tree_base*, !dbg !3831
  %73 = bitcast %struct.tree_base* %base133 to i64*, !dbg !3831
  %bf.load134 = load i64, i64* %73, align 8, !dbg !3831
  %bf.clear135 = and i64 %bf.load134, 65535, !dbg !3831
  %bf.cast136 = trunc i64 %bf.clear135 to i32, !dbg !3831
  %cmp137 = icmp eq i32 %bf.cast136, 121, !dbg !3832
  br i1 %cmp137, label %land.lhs.true139, label %if.else, !dbg !3833

land.lhs.true139:                                 ; preds = %lor.lhs.false
  %74 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !3834
  %call140 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %74), !dbg !3835
  %tobool141 = icmp ne i8 %call140, 0, !dbg !3835
  br i1 %tobool141, label %if.else, label %if.then142, !dbg !3836

if.then142:                                       ; preds = %land.lhs.true139, %sw.epilog
  %75 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !3837
  %exp143 = bitcast %union.tree_node* %75 to %struct.tree_exp*, !dbg !3837
  %operands144 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp143, i32 0, i32 3, !dbg !3837
  %arrayidx145 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands144, i64 0, i64 0, !dbg !3837
  %76 = load %union.tree_node*, %union.tree_node** %arrayidx145, align 8, !dbg !3837
  store %union.tree_node* %76, %union.tree_node** %ref.addr, align 8, !dbg !3838
  br label %if.end146, !dbg !3839

if.else:                                          ; preds = %land.lhs.true139, %lor.lhs.false
  store %union.tree_node* null, %union.tree_node** %ref.addr, align 8, !dbg !3840
  br label %if.end146

if.end146:                                        ; preds = %if.else, %if.then142
  br label %while.cond, !dbg !3740, !llvm.loop !3841

while.end:                                        ; preds = %if.end, %while.cond
  ret void, !dbg !3843
}

declare dso_local %union.tree_node* @build_int_cst(%union.tree_node*, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.vn_reference_op_struct* @VEC_vn_reference_op_s_heap_safe_push(%struct.VEC_vn_reference_op_s_heap** %vec_, %struct.vn_reference_op_struct* %obj_) #0 !dbg !3844 {
entry:
  %vec_.addr = alloca %struct.VEC_vn_reference_op_s_heap**, align 8
  %obj_.addr = alloca %struct.vn_reference_op_struct*, align 8
  store %struct.VEC_vn_reference_op_s_heap** %vec_, %struct.VEC_vn_reference_op_s_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_reference_op_s_heap*** %vec_.addr, metadata !3847, metadata !DIExpression()), !dbg !3848
  store %struct.vn_reference_op_struct* %obj_, %struct.vn_reference_op_struct** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.vn_reference_op_struct** %obj_.addr, metadata !3849, metadata !DIExpression()), !dbg !3848
  %0 = load %struct.VEC_vn_reference_op_s_heap**, %struct.VEC_vn_reference_op_s_heap*** %vec_.addr, align 8, !dbg !3848
  %call = call i32 @VEC_vn_reference_op_s_heap_reserve(%struct.VEC_vn_reference_op_s_heap** %0, i32 1), !dbg !3848
  %1 = load %struct.VEC_vn_reference_op_s_heap**, %struct.VEC_vn_reference_op_s_heap*** %vec_.addr, align 8, !dbg !3848
  %2 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %1, align 8, !dbg !3848
  %tobool = icmp ne %struct.VEC_vn_reference_op_s_heap* %2, null, !dbg !3848
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3848

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_vn_reference_op_s_heap**, %struct.VEC_vn_reference_op_s_heap*** %vec_.addr, align 8, !dbg !3848
  %4 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %3, align 8, !dbg !3848
  %base = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %4, i32 0, i32 0, !dbg !3848
  br label %cond.end, !dbg !3848

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3848

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_vn_reference_op_s_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3848
  %5 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %obj_.addr, align 8, !dbg !3848
  %call1 = call %struct.vn_reference_op_struct* @VEC_vn_reference_op_s_base_quick_push(%struct.VEC_vn_reference_op_s_base* %cond, %struct.vn_reference_op_struct* %5), !dbg !3848
  ret %struct.vn_reference_op_struct* %call1, !dbg !3848
}

declare dso_local i32 @integer_zerop(%union.tree_node*) #2

declare dso_local i32 @host_integerp(%union.tree_node*, i32) #2

declare dso_local %union.tree_node* @array_ref_low_bound(%union.tree_node*) #2

declare dso_local %union.tree_node* @array_ref_element_size(%union.tree_node*) #2

declare dso_local zeroext i8 @is_gimple_min_invariant(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @ao_ref_init_from_vn_reference(%struct.ao_ref_s* %ref, i32 %set, %union.tree_node* %type, %struct.VEC_vn_reference_op_s_heap* %ops) #0 !dbg !3850 {
entry:
  %retval = alloca i8, align 1
  %ref.addr = alloca %struct.ao_ref_s*, align 8
  %set.addr = alloca i32, align 4
  %type.addr = alloca %union.tree_node*, align 8
  %ops.addr = alloca %struct.VEC_vn_reference_op_s_heap*, align 8
  %op = alloca %struct.vn_reference_op_struct*, align 8
  %i = alloca i32, align 4
  %base = alloca %union.tree_node*, align 8
  %op0_p = alloca %union.tree_node**, align 8
  %offset = alloca i64, align 8
  %max_size = alloca i64, align 8
  %size = alloca i64, align 8
  %size_tree = alloca %union.tree_node*, align 8
  %mode = alloca i32, align 4
  %field = alloca %union.tree_node*, align 8
  %hindex = alloca i64, align 8
  store %struct.ao_ref_s* %ref, %struct.ao_ref_s** %ref.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ao_ref_s** %ref.addr, metadata !3864, metadata !DIExpression()), !dbg !3865
  store i32 %set, i32* %set.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %set.addr, metadata !3866, metadata !DIExpression()), !dbg !3867
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !3868, metadata !DIExpression()), !dbg !3869
  store %struct.VEC_vn_reference_op_s_heap* %ops, %struct.VEC_vn_reference_op_s_heap** %ops.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_reference_op_s_heap** %ops.addr, metadata !3870, metadata !DIExpression()), !dbg !3871
  call void @llvm.dbg.declare(metadata %struct.vn_reference_op_struct** %op, metadata !3872, metadata !DIExpression()), !dbg !3873
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3874, metadata !DIExpression()), !dbg !3875
  call void @llvm.dbg.declare(metadata %union.tree_node** %base, metadata !3876, metadata !DIExpression()), !dbg !3877
  store %union.tree_node* null, %union.tree_node** %base, align 8, !dbg !3877
  call void @llvm.dbg.declare(metadata %union.tree_node*** %op0_p, metadata !3878, metadata !DIExpression()), !dbg !3879
  store %union.tree_node** %base, %union.tree_node*** %op0_p, align 8, !dbg !3879
  call void @llvm.dbg.declare(metadata i64* %offset, metadata !3880, metadata !DIExpression()), !dbg !3881
  store i64 0, i64* %offset, align 8, !dbg !3881
  call void @llvm.dbg.declare(metadata i64* %max_size, metadata !3882, metadata !DIExpression()), !dbg !3883
  call void @llvm.dbg.declare(metadata i64* %size, metadata !3884, metadata !DIExpression()), !dbg !3885
  store i64 -1, i64* %size, align 8, !dbg !3885
  call void @llvm.dbg.declare(metadata %union.tree_node** %size_tree, metadata !3886, metadata !DIExpression()), !dbg !3887
  store %union.tree_node* null, %union.tree_node** %size_tree, align 8, !dbg !3887
  %0 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %ops.addr, align 8, !dbg !3888
  %tobool = icmp ne %struct.VEC_vn_reference_op_s_heap* %0, null, !dbg !3888
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3888

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %ops.addr, align 8, !dbg !3888
  %base1 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %1, i32 0, i32 0, !dbg !3888
  br label %cond.end, !dbg !3888

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3888

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_vn_reference_op_s_base* [ %base1, %cond.true ], [ null, %cond.false ], !dbg !3888
  %call = call %struct.vn_reference_op_struct* @VEC_vn_reference_op_s_base_index(%struct.VEC_vn_reference_op_s_base* %cond, i32 0), !dbg !3888
  store %struct.vn_reference_op_struct* %call, %struct.vn_reference_op_struct** %op, align 8, !dbg !3889
  %2 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %op, align 8, !dbg !3890
  %opcode = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %2, i32 0, i32 0, !dbg !3892
  %3 = load i32, i32* %opcode, align 8, !dbg !3892
  %cmp = icmp eq i32 %3, 41, !dbg !3893
  br i1 %cmp, label %if.then, label %if.else8, !dbg !3894

if.then:                                          ; preds = %cond.end
  %4 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %op, align 8, !dbg !3895
  %op0 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %4, i32 0, i32 2, !dbg !3895
  %5 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !3895
  %base2 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !3895
  %6 = bitcast %struct.tree_base* %base2 to i64*, !dbg !3895
  %bf.load = load i64, i64* %6, align 8, !dbg !3895
  %bf.clear = and i64 %bf.load, 65535, !dbg !3895
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3895
  %cmp3 = icmp eq i32 %bf.cast, 23, !dbg !3898
  br i1 %cmp3, label %if.then4, label %if.else, !dbg !3899

if.then4:                                         ; preds = %if.then
  %7 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %op, align 8, !dbg !3900
  %op05 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %7, i32 0, i32 2, !dbg !3901
  %8 = load %union.tree_node*, %union.tree_node** %op05, align 8, !dbg !3901
  store %union.tree_node* %8, %union.tree_node** %size_tree, align 8, !dbg !3902
  br label %if.end, !dbg !3903

if.else:                                          ; preds = %if.then
  %9 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %op, align 8, !dbg !3904
  %op06 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %9, i32 0, i32 2, !dbg !3904
  %10 = load %union.tree_node*, %union.tree_node** %op06, align 8, !dbg !3904
  %decl_common = bitcast %union.tree_node* %10 to %struct.tree_decl_common*, !dbg !3904
  %size7 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 1, !dbg !3904
  %11 = load %union.tree_node*, %union.tree_node** %size7, align 8, !dbg !3904
  store %union.tree_node* %11, %union.tree_node** %size_tree, align 8, !dbg !3905
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then4
  br label %if.end38, !dbg !3906

if.else8:                                         ; preds = %cond.end
  %12 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %op, align 8, !dbg !3907
  %opcode9 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %12, i32 0, i32 0, !dbg !3909
  %13 = load i32, i32* %opcode9, align 8, !dbg !3909
  %cmp10 = icmp eq i32 %13, 42, !dbg !3910
  br i1 %cmp10, label %if.then11, label %if.else13, !dbg !3911

if.then11:                                        ; preds = %if.else8
  %14 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %op, align 8, !dbg !3912
  %op012 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %14, i32 0, i32 2, !dbg !3913
  %15 = load %union.tree_node*, %union.tree_node** %op012, align 8, !dbg !3913
  store %union.tree_node* %15, %union.tree_node** %size_tree, align 8, !dbg !3914
  br label %if.end37, !dbg !3915

if.else13:                                        ; preds = %if.else8
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !3916, metadata !DIExpression()), !dbg !3918
  %16 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3919
  %base14 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !3919
  %17 = bitcast %struct.tree_base* %base14 to i64*, !dbg !3919
  %bf.load15 = load i64, i64* %17, align 8, !dbg !3919
  %bf.clear16 = and i64 %bf.load15, 65535, !dbg !3919
  %bf.cast17 = trunc i64 %bf.clear16 to i32, !dbg !3919
  %cmp18 = icmp eq i32 %bf.cast17, 14, !dbg !3919
  br i1 %cmp18, label %cond.true19, label %cond.false21, !dbg !3919

cond.true19:                                      ; preds = %if.else13
  %18 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3919
  %call20 = call i32 @vector_type_mode(%union.tree_node* %18), !dbg !3919
  br label %cond.end26, !dbg !3919

cond.false21:                                     ; preds = %if.else13
  %19 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3919
  %type22 = bitcast %union.tree_node* %19 to %struct.tree_type*, !dbg !3919
  %mode23 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type22, i32 0, i32 6, !dbg !3919
  %bf.load24 = load i32, i32* %mode23, align 4, !dbg !3919
  %bf.lshr = lshr i32 %bf.load24, 16, !dbg !3919
  %bf.clear25 = and i32 %bf.lshr, 255, !dbg !3919
  br label %cond.end26, !dbg !3919

cond.end26:                                       ; preds = %cond.false21, %cond.true19
  %cond27 = phi i32 [ %call20, %cond.true19 ], [ %bf.clear25, %cond.false21 ], !dbg !3919
  store i32 %cond27, i32* %mode, align 4, !dbg !3918
  %20 = load i32, i32* %mode, align 4, !dbg !3920
  %cmp28 = icmp eq i32 %20, 1, !dbg !3922
  br i1 %cmp28, label %if.then29, label %if.else32, !dbg !3923

if.then29:                                        ; preds = %cond.end26
  %21 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3924
  %type30 = bitcast %union.tree_node* %21 to %struct.tree_type*, !dbg !3924
  %size31 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type30, i32 0, i32 2, !dbg !3924
  %22 = load %union.tree_node*, %union.tree_node** %size31, align 8, !dbg !3924
  store %union.tree_node* %22, %union.tree_node** %size_tree, align 8, !dbg !3925
  br label %if.end36, !dbg !3926

if.else32:                                        ; preds = %cond.end26
  %23 = load i32, i32* %mode, align 4, !dbg !3927
  %idxprom = zext i32 %23 to i64, !dbg !3927
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !3927
  %24 = load i8, i8* %arrayidx, align 1, !dbg !3927
  %conv = zext i8 %24 to i16, !dbg !3927
  %conv33 = zext i16 %conv to i32, !dbg !3927
  %mul = mul nsw i32 %conv33, 8, !dbg !3927
  %conv34 = trunc i32 %mul to i16, !dbg !3927
  %conv35 = zext i16 %conv34 to i64, !dbg !3927
  store i64 %conv35, i64* %size, align 8, !dbg !3928
  br label %if.end36

if.end36:                                         ; preds = %if.else32, %if.then29
  br label %if.end37

if.end37:                                         ; preds = %if.end36, %if.then11
  br label %if.end38

if.end38:                                         ; preds = %if.end37, %if.end
  %25 = load %union.tree_node*, %union.tree_node** %size_tree, align 8, !dbg !3929
  %cmp39 = icmp ne %union.tree_node* %25, null, !dbg !3931
  br i1 %cmp39, label %if.then41, label %if.end48, !dbg !3932

if.then41:                                        ; preds = %if.end38
  %26 = load %union.tree_node*, %union.tree_node** %size_tree, align 8, !dbg !3933
  %call42 = call i32 @host_integerp(%union.tree_node* %26, i32 1), !dbg !3936
  %tobool43 = icmp ne i32 %call42, 0, !dbg !3936
  br i1 %tobool43, label %if.else45, label %if.then44, !dbg !3937

if.then44:                                        ; preds = %if.then41
  store i64 -1, i64* %size, align 8, !dbg !3938
  br label %if.end47, !dbg !3939

if.else45:                                        ; preds = %if.then41
  %27 = load %union.tree_node*, %union.tree_node** %size_tree, align 8, !dbg !3940
  %int_cst = bitcast %union.tree_node* %27 to %struct.tree_int_cst*, !dbg !3940
  %int_cst46 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !3940
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst46, i32 0, i32 0, !dbg !3940
  %28 = load i64, i64* %low, align 8, !dbg !3940
  store i64 %28, i64* %size, align 8, !dbg !3941
  br label %if.end47

if.end47:                                         ; preds = %if.else45, %if.then44
  br label %if.end48, !dbg !3942

if.end48:                                         ; preds = %if.end47, %if.end38
  %29 = load i64, i64* %size, align 8, !dbg !3943
  store i64 %29, i64* %max_size, align 8, !dbg !3944
  store i32 0, i32* %i, align 4, !dbg !3945
  br label %for.cond, !dbg !3947

for.cond:                                         ; preds = %for.inc, %if.end48
  %30 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %ops.addr, align 8, !dbg !3948
  %tobool49 = icmp ne %struct.VEC_vn_reference_op_s_heap* %30, null, !dbg !3948
  br i1 %tobool49, label %cond.true50, label %cond.false52, !dbg !3948

cond.true50:                                      ; preds = %for.cond
  %31 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %ops.addr, align 8, !dbg !3948
  %base51 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %31, i32 0, i32 0, !dbg !3948
  br label %cond.end53, !dbg !3948

cond.false52:                                     ; preds = %for.cond
  br label %cond.end53, !dbg !3948

cond.end53:                                       ; preds = %cond.false52, %cond.true50
  %cond54 = phi %struct.VEC_vn_reference_op_s_base* [ %base51, %cond.true50 ], [ null, %cond.false52 ], !dbg !3948
  %32 = load i32, i32* %i, align 4, !dbg !3948
  %call55 = call i32 @VEC_vn_reference_op_s_base_iterate(%struct.VEC_vn_reference_op_s_base* %cond54, i32 %32, %struct.vn_reference_op_struct** %op), !dbg !3948
  %tobool56 = icmp ne i32 %call55, 0, !dbg !3950
  br i1 %tobool56, label %for.body, label %for.end, !dbg !3950

for.body:                                         ; preds = %cond.end53
  %33 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %op, align 8, !dbg !3951
  %opcode57 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %33, i32 0, i32 0, !dbg !3953
  %34 = load i32, i32* %opcode57, align 8, !dbg !3953
  switch i32 %34, label %sw.default [
    i32 59, label %sw.bb
    i32 121, label %sw.bb
    i32 48, label %sw.bb58
    i32 47, label %sw.bb58
    i32 49, label %sw.bb63
    i32 32, label %sw.bb70
    i32 34, label %sw.bb70
    i32 36, label %sw.bb70
    i32 141, label %sw.bb70
    i32 42, label %sw.bb72
    i32 41, label %sw.bb74
    i32 46, label %sw.bb105
    i32 45, label %sw.bb105
    i32 43, label %sw.bb134
    i32 44, label %sw.bb135
    i32 118, label %sw.bb137
    i32 28, label %sw.bb138
    i32 23, label %sw.bb138
    i32 26, label %sw.bb138
    i32 27, label %sw.bb138
    i32 24, label %sw.bb138
    i32 51, label %sw.bb138
    i32 33, label %sw.bb138
  ], !dbg !3954

sw.bb:                                            ; preds = %for.body, %for.body
  store i8 0, i8* %retval, align 1, !dbg !3955
  br label %return, !dbg !3955

sw.bb58:                                          ; preds = %for.body, %for.body
  %35 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %op, align 8, !dbg !3957
  %opcode59 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %35, i32 0, i32 0, !dbg !3957
  %36 = load i32, i32* %opcode59, align 8, !dbg !3957
  %37 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %op, align 8, !dbg !3957
  %type60 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %37, i32 0, i32 1, !dbg !3957
  %38 = load %union.tree_node*, %union.tree_node** %type60, align 8, !dbg !3957
  %call61 = call %union.tree_node* @build1_stat(i32 %36, %union.tree_node* %38, %union.tree_node* null), !dbg !3957
  %39 = load %union.tree_node**, %union.tree_node*** %op0_p, align 8, !dbg !3958
  store %union.tree_node* %call61, %union.tree_node** %39, align 8, !dbg !3959
  %40 = load %union.tree_node**, %union.tree_node*** %op0_p, align 8, !dbg !3960
  %41 = load %union.tree_node*, %union.tree_node** %40, align 8, !dbg !3960
  %exp = bitcast %union.tree_node* %41 to %struct.tree_exp*, !dbg !3960
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !3960
  %arrayidx62 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !3960
  store %union.tree_node** %arrayidx62, %union.tree_node*** %op0_p, align 8, !dbg !3961
  br label %sw.epilog, !dbg !3962

sw.bb63:                                          ; preds = %for.body
  %42 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %op, align 8, !dbg !3963
  %type64 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %42, i32 0, i32 1, !dbg !3963
  %43 = load %union.tree_node*, %union.tree_node** %type64, align 8, !dbg !3963
  %44 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %op, align 8, !dbg !3963
  %op065 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %44, i32 0, i32 2, !dbg !3963
  %45 = load %union.tree_node*, %union.tree_node** %op065, align 8, !dbg !3963
  %call66 = call %union.tree_node* @build2_stat(i32 49, %union.tree_node* %43, %union.tree_node* null, %union.tree_node* %45), !dbg !3963
  %46 = load %union.tree_node**, %union.tree_node*** %op0_p, align 8, !dbg !3964
  store %union.tree_node* %call66, %union.tree_node** %46, align 8, !dbg !3965
  %47 = load %union.tree_node**, %union.tree_node*** %op0_p, align 8, !dbg !3966
  %48 = load %union.tree_node*, %union.tree_node** %47, align 8, !dbg !3966
  %exp67 = bitcast %union.tree_node* %48 to %struct.tree_exp*, !dbg !3966
  %operands68 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp67, i32 0, i32 3, !dbg !3966
  %arrayidx69 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands68, i64 0, i64 0, !dbg !3966
  store %union.tree_node** %arrayidx69, %union.tree_node*** %op0_p, align 8, !dbg !3967
  br label %sw.epilog, !dbg !3968

sw.bb70:                                          ; preds = %for.body, %for.body, %for.body, %for.body
  %49 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %op, align 8, !dbg !3969
  %op071 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %49, i32 0, i32 2, !dbg !3970
  %50 = load %union.tree_node*, %union.tree_node** %op071, align 8, !dbg !3970
  %51 = load %union.tree_node**, %union.tree_node*** %op0_p, align 8, !dbg !3971
  store %union.tree_node* %50, %union.tree_node** %51, align 8, !dbg !3972
  br label %sw.epilog, !dbg !3973

sw.bb72:                                          ; preds = %for.body
  %52 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %op, align 8, !dbg !3974
  %op1 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %52, i32 0, i32 3, !dbg !3975
  %53 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !3975
  %call73 = call i64 @tree_low_cst(%union.tree_node* %53, i32 0), !dbg !3976
  %54 = load i64, i64* %offset, align 8, !dbg !3977
  %add = add nsw i64 %54, %call73, !dbg !3977
  store i64 %add, i64* %offset, align 8, !dbg !3977
  br label %sw.epilog, !dbg !3978

sw.bb74:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata %union.tree_node** %field, metadata !3979, metadata !DIExpression()), !dbg !3981
  %55 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %op, align 8, !dbg !3982
  %op075 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %55, i32 0, i32 2, !dbg !3983
  %56 = load %union.tree_node*, %union.tree_node** %op075, align 8, !dbg !3983
  store %union.tree_node* %56, %union.tree_node** %field, align 8, !dbg !3981
  %57 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !3984
  %base76 = bitcast %union.tree_node* %57 to %struct.tree_base*, !dbg !3984
  %58 = bitcast %struct.tree_base* %base76 to i64*, !dbg !3984
  %bf.load77 = load i64, i64* %58, align 8, !dbg !3984
  %bf.clear78 = and i64 %bf.load77, 65535, !dbg !3984
  %bf.cast79 = trunc i64 %bf.clear78 to i32, !dbg !3984
  %cmp80 = icmp eq i32 %bf.cast79, 23, !dbg !3986
  br i1 %cmp80, label %if.then82, label %if.else83, !dbg !3987

if.then82:                                        ; preds = %sw.bb74
  br label %if.end104, !dbg !3987

if.else83:                                        ; preds = %sw.bb74
  %59 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %op, align 8, !dbg !3988
  %op184 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %59, i32 0, i32 3, !dbg !3990
  %60 = load %union.tree_node*, %union.tree_node** %op184, align 8, !dbg !3990
  %tobool85 = icmp ne %union.tree_node* %60, null, !dbg !3988
  br i1 %tobool85, label %if.then89, label %lor.lhs.false, !dbg !3991

lor.lhs.false:                                    ; preds = %if.else83
  %61 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !3992
  %field_decl = bitcast %union.tree_node* %61 to %struct.tree_field_decl*, !dbg !3992
  %offset86 = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl, i32 0, i32 1, !dbg !3992
  %62 = load %union.tree_node*, %union.tree_node** %offset86, align 8, !dbg !3992
  %call87 = call i32 @host_integerp(%union.tree_node* %62, i32 1), !dbg !3993
  %tobool88 = icmp ne i32 %call87, 0, !dbg !3993
  br i1 %tobool88, label %if.else90, label %if.then89, !dbg !3994

if.then89:                                        ; preds = %lor.lhs.false, %if.else83
  store i64 -1, i64* %max_size, align 8, !dbg !3995
  br label %if.end103, !dbg !3996

if.else90:                                        ; preds = %lor.lhs.false
  %63 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !3997
  %field_decl91 = bitcast %union.tree_node* %63 to %struct.tree_field_decl*, !dbg !3997
  %offset92 = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl91, i32 0, i32 1, !dbg !3997
  %64 = load %union.tree_node*, %union.tree_node** %offset92, align 8, !dbg !3997
  %int_cst93 = bitcast %union.tree_node* %64 to %struct.tree_int_cst*, !dbg !3997
  %int_cst94 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst93, i32 0, i32 1, !dbg !3997
  %low95 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst94, i32 0, i32 0, !dbg !3997
  %65 = load i64, i64* %low95, align 8, !dbg !3997
  %mul96 = mul i64 %65, 8, !dbg !3999
  %66 = load i64, i64* %offset, align 8, !dbg !4000
  %add97 = add i64 %66, %mul96, !dbg !4000
  store i64 %add97, i64* %offset, align 8, !dbg !4000
  %67 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !4001
  %field_decl98 = bitcast %union.tree_node* %67 to %struct.tree_field_decl*, !dbg !4001
  %bit_offset = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl98, i32 0, i32 4, !dbg !4001
  %68 = load %union.tree_node*, %union.tree_node** %bit_offset, align 8, !dbg !4001
  %int_cst99 = bitcast %union.tree_node* %68 to %struct.tree_int_cst*, !dbg !4001
  %int_cst100 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst99, i32 0, i32 1, !dbg !4001
  %low101 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst100, i32 0, i32 0, !dbg !4001
  %69 = load i64, i64* %low101, align 8, !dbg !4001
  %70 = load i64, i64* %offset, align 8, !dbg !4002
  %add102 = add i64 %70, %69, !dbg !4002
  store i64 %add102, i64* %offset, align 8, !dbg !4002
  br label %if.end103

if.end103:                                        ; preds = %if.else90, %if.then89
  br label %if.end104

if.end104:                                        ; preds = %if.end103, %if.then82
  br label %sw.epilog, !dbg !4003

sw.bb105:                                         ; preds = %for.body, %for.body
  %71 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %op, align 8, !dbg !4004
  %op0106 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %71, i32 0, i32 2, !dbg !4006
  %72 = load %union.tree_node*, %union.tree_node** %op0106, align 8, !dbg !4006
  %call107 = call i32 @host_integerp(%union.tree_node* %72, i32 0), !dbg !4007
  %tobool108 = icmp ne i32 %call107, 0, !dbg !4007
  br i1 %tobool108, label %lor.lhs.false109, label %if.then116, !dbg !4008

lor.lhs.false109:                                 ; preds = %sw.bb105
  %73 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %op, align 8, !dbg !4009
  %op1110 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %73, i32 0, i32 3, !dbg !4010
  %74 = load %union.tree_node*, %union.tree_node** %op1110, align 8, !dbg !4010
  %call111 = call i32 @host_integerp(%union.tree_node* %74, i32 0), !dbg !4011
  %tobool112 = icmp ne i32 %call111, 0, !dbg !4011
  br i1 %tobool112, label %lor.lhs.false113, label %if.then116, !dbg !4012

lor.lhs.false113:                                 ; preds = %lor.lhs.false109
  %75 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %op, align 8, !dbg !4013
  %op2 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %75, i32 0, i32 4, !dbg !4014
  %76 = load %union.tree_node*, %union.tree_node** %op2, align 8, !dbg !4014
  %call114 = call i32 @host_integerp(%union.tree_node* %76, i32 0), !dbg !4015
  %tobool115 = icmp ne i32 %call114, 0, !dbg !4015
  br i1 %tobool115, label %if.else117, label %if.then116, !dbg !4016

if.then116:                                       ; preds = %lor.lhs.false113, %lor.lhs.false109, %sw.bb105
  store i64 -1, i64* %max_size, align 8, !dbg !4017
  br label %if.end133, !dbg !4018

if.else117:                                       ; preds = %lor.lhs.false113
  call void @llvm.dbg.declare(metadata i64* %hindex, metadata !4019, metadata !DIExpression()), !dbg !4021
  %77 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %op, align 8, !dbg !4022
  %op0118 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %77, i32 0, i32 2, !dbg !4022
  %78 = load %union.tree_node*, %union.tree_node** %op0118, align 8, !dbg !4022
  %int_cst119 = bitcast %union.tree_node* %78 to %struct.tree_int_cst*, !dbg !4022
  %int_cst120 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst119, i32 0, i32 1, !dbg !4022
  %low121 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst120, i32 0, i32 0, !dbg !4022
  %79 = load i64, i64* %low121, align 8, !dbg !4022
  store i64 %79, i64* %hindex, align 8, !dbg !4021
  %80 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %op, align 8, !dbg !4023
  %op1122 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %80, i32 0, i32 3, !dbg !4023
  %81 = load %union.tree_node*, %union.tree_node** %op1122, align 8, !dbg !4023
  %int_cst123 = bitcast %union.tree_node* %81 to %struct.tree_int_cst*, !dbg !4023
  %int_cst124 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst123, i32 0, i32 1, !dbg !4023
  %low125 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst124, i32 0, i32 0, !dbg !4023
  %82 = load i64, i64* %low125, align 8, !dbg !4023
  %83 = load i64, i64* %hindex, align 8, !dbg !4024
  %sub = sub i64 %83, %82, !dbg !4024
  store i64 %sub, i64* %hindex, align 8, !dbg !4024
  %84 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %op, align 8, !dbg !4025
  %op2126 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %84, i32 0, i32 4, !dbg !4025
  %85 = load %union.tree_node*, %union.tree_node** %op2126, align 8, !dbg !4025
  %int_cst127 = bitcast %union.tree_node* %85 to %struct.tree_int_cst*, !dbg !4025
  %int_cst128 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst127, i32 0, i32 1, !dbg !4025
  %low129 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst128, i32 0, i32 0, !dbg !4025
  %86 = load i64, i64* %low129, align 8, !dbg !4025
  %87 = load i64, i64* %hindex, align 8, !dbg !4026
  %mul130 = mul i64 %87, %86, !dbg !4026
  store i64 %mul130, i64* %hindex, align 8, !dbg !4026
  %88 = load i64, i64* %hindex, align 8, !dbg !4027
  %mul131 = mul nsw i64 %88, 8, !dbg !4027
  store i64 %mul131, i64* %hindex, align 8, !dbg !4027
  %89 = load i64, i64* %hindex, align 8, !dbg !4028
  %90 = load i64, i64* %offset, align 8, !dbg !4029
  %add132 = add nsw i64 %90, %89, !dbg !4029
  store i64 %add132, i64* %offset, align 8, !dbg !4029
  br label %if.end133

if.end133:                                        ; preds = %if.else117, %if.then116
  br label %sw.epilog, !dbg !4030

sw.bb134:                                         ; preds = %for.body
  br label %sw.epilog, !dbg !4031

sw.bb135:                                         ; preds = %for.body
  %91 = load i64, i64* %size, align 8, !dbg !4032
  %92 = load i64, i64* %offset, align 8, !dbg !4033
  %add136 = add nsw i64 %92, %91, !dbg !4033
  store i64 %add136, i64* %offset, align 8, !dbg !4033
  br label %sw.epilog, !dbg !4034

sw.bb137:                                         ; preds = %for.body
  br label %sw.epilog, !dbg !4035

sw.bb138:                                         ; preds = %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body
  store i8 0, i8* %retval, align 1, !dbg !4036
  br label %return, !dbg !4036

sw.default:                                       ; preds = %for.body
  store i8 0, i8* %retval, align 1, !dbg !4037
  br label %return, !dbg !4037

sw.epilog:                                        ; preds = %sw.bb137, %sw.bb135, %sw.bb134, %if.end133, %if.end104, %sw.bb72, %sw.bb70, %sw.bb63, %sw.bb58
  br label %for.inc, !dbg !4038

for.inc:                                          ; preds = %sw.epilog
  %93 = load i32, i32* %i, align 4, !dbg !4039
  %inc = add i32 %93, 1, !dbg !4039
  store i32 %inc, i32* %i, align 4, !dbg !4039
  br label %for.cond, !dbg !4040, !llvm.loop !4041

for.end:                                          ; preds = %cond.end53
  %94 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !4043
  %cmp139 = icmp eq %union.tree_node* %94, null, !dbg !4045
  br i1 %cmp139, label %if.then141, label %if.end142, !dbg !4046

if.then141:                                       ; preds = %for.end
  store i8 0, i8* %retval, align 1, !dbg !4047
  br label %return, !dbg !4047

if.end142:                                        ; preds = %for.end
  %95 = load %struct.ao_ref_s*, %struct.ao_ref_s** %ref.addr, align 8, !dbg !4048
  %ref143 = getelementptr inbounds %struct.ao_ref_s, %struct.ao_ref_s* %95, i32 0, i32 0, !dbg !4049
  store %union.tree_node* null, %union.tree_node** %ref143, align 8, !dbg !4050
  %96 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !4051
  %97 = load %struct.ao_ref_s*, %struct.ao_ref_s** %ref.addr, align 8, !dbg !4052
  %base144 = getelementptr inbounds %struct.ao_ref_s, %struct.ao_ref_s* %97, i32 0, i32 1, !dbg !4053
  store %union.tree_node* %96, %union.tree_node** %base144, align 8, !dbg !4054
  %98 = load i64, i64* %offset, align 8, !dbg !4055
  %99 = load %struct.ao_ref_s*, %struct.ao_ref_s** %ref.addr, align 8, !dbg !4056
  %offset145 = getelementptr inbounds %struct.ao_ref_s, %struct.ao_ref_s* %99, i32 0, i32 2, !dbg !4057
  store i64 %98, i64* %offset145, align 8, !dbg !4058
  %100 = load i64, i64* %size, align 8, !dbg !4059
  %101 = load %struct.ao_ref_s*, %struct.ao_ref_s** %ref.addr, align 8, !dbg !4060
  %size146 = getelementptr inbounds %struct.ao_ref_s, %struct.ao_ref_s* %101, i32 0, i32 3, !dbg !4061
  store i64 %100, i64* %size146, align 8, !dbg !4062
  %102 = load i64, i64* %max_size, align 8, !dbg !4063
  %103 = load %struct.ao_ref_s*, %struct.ao_ref_s** %ref.addr, align 8, !dbg !4064
  %max_size147 = getelementptr inbounds %struct.ao_ref_s, %struct.ao_ref_s* %103, i32 0, i32 4, !dbg !4065
  store i64 %102, i64* %max_size147, align 8, !dbg !4066
  %104 = load i32, i32* %set.addr, align 4, !dbg !4067
  %105 = load %struct.ao_ref_s*, %struct.ao_ref_s** %ref.addr, align 8, !dbg !4068
  %ref_alias_set = getelementptr inbounds %struct.ao_ref_s, %struct.ao_ref_s* %105, i32 0, i32 5, !dbg !4069
  store i32 %104, i32* %ref_alias_set, align 8, !dbg !4070
  %106 = load %struct.ao_ref_s*, %struct.ao_ref_s** %ref.addr, align 8, !dbg !4071
  %base_alias_set = getelementptr inbounds %struct.ao_ref_s, %struct.ao_ref_s* %106, i32 0, i32 6, !dbg !4072
  store i32 -1, i32* %base_alias_set, align 4, !dbg !4073
  store i8 1, i8* %retval, align 1, !dbg !4074
  br label %return, !dbg !4074

return:                                           ; preds = %if.end142, %if.then141, %sw.default, %sw.bb138, %sw.bb
  %107 = load i8, i8* %retval, align 1, !dbg !4075
  ret i8 %107, !dbg !4075
}

declare dso_local i32 @vector_type_mode(%union.tree_node*) #2

declare dso_local %union.tree_node* @build1_stat(i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @build2_stat(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local i64 @tree_low_cst(%union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @copy_reference_ops_from_call(%union.gimple_statement_d* %call, %struct.VEC_vn_reference_op_s_heap** %result) #0 !dbg !4076 {
entry:
  %call.addr = alloca %union.gimple_statement_d*, align 8
  %result.addr = alloca %struct.VEC_vn_reference_op_s_heap**, align 8
  %temp = alloca %struct.vn_reference_op_struct, align 8
  %i = alloca i32, align 4
  %callarg = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %call.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %call.addr, metadata !4079, metadata !DIExpression()), !dbg !4080
  store %struct.VEC_vn_reference_op_s_heap** %result, %struct.VEC_vn_reference_op_s_heap*** %result.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_reference_op_s_heap*** %result.addr, metadata !4081, metadata !DIExpression()), !dbg !4082
  call void @llvm.dbg.declare(metadata %struct.vn_reference_op_struct* %temp, metadata !4083, metadata !DIExpression()), !dbg !4084
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4085, metadata !DIExpression()), !dbg !4086
  %0 = bitcast %struct.vn_reference_op_struct* %temp to i8*, !dbg !4087
  call void @llvm.memset.p0i8.i64(i8* align 8 %0, i8 0, i64 40, i1 false), !dbg !4087
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call.addr, align 8, !dbg !4088
  %call1 = call %union.tree_node* @gimple_call_return_type(%union.gimple_statement_d* %1), !dbg !4089
  %type = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %temp, i32 0, i32 1, !dbg !4090
  store %union.tree_node* %call1, %union.tree_node** %type, align 8, !dbg !4091
  %opcode = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %temp, i32 0, i32 0, !dbg !4092
  store i32 59, i32* %opcode, align 8, !dbg !4093
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call.addr, align 8, !dbg !4094
  %call2 = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %2), !dbg !4095
  %op0 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %temp, i32 0, i32 2, !dbg !4096
  store %union.tree_node* %call2, %union.tree_node** %op0, align 8, !dbg !4097
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call.addr, align 8, !dbg !4098
  %call3 = call %union.tree_node* @gimple_call_chain(%union.gimple_statement_d* %3), !dbg !4099
  %op1 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %temp, i32 0, i32 3, !dbg !4100
  store %union.tree_node* %call3, %union.tree_node** %op1, align 8, !dbg !4101
  %4 = load %struct.VEC_vn_reference_op_s_heap**, %struct.VEC_vn_reference_op_s_heap*** %result.addr, align 8, !dbg !4102
  %call4 = call %struct.vn_reference_op_struct* @VEC_vn_reference_op_s_heap_safe_push(%struct.VEC_vn_reference_op_s_heap** %4, %struct.vn_reference_op_struct* %temp), !dbg !4102
  store i32 0, i32* %i, align 4, !dbg !4103
  br label %for.cond, !dbg !4105

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load i32, i32* %i, align 4, !dbg !4106
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call.addr, align 8, !dbg !4108
  %call5 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %6), !dbg !4109
  %cmp = icmp ult i32 %5, %call5, !dbg !4110
  br i1 %cmp, label %for.body, label %for.end, !dbg !4111

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %callarg, metadata !4112, metadata !DIExpression()), !dbg !4114
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call.addr, align 8, !dbg !4115
  %8 = load i32, i32* %i, align 4, !dbg !4116
  %call6 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %7, i32 %8), !dbg !4117
  store %union.tree_node* %call6, %union.tree_node** %callarg, align 8, !dbg !4114
  %9 = load %union.tree_node*, %union.tree_node** %callarg, align 8, !dbg !4118
  %10 = load %struct.VEC_vn_reference_op_s_heap**, %struct.VEC_vn_reference_op_s_heap*** %result.addr, align 8, !dbg !4119
  call void @copy_reference_ops_from_ref(%union.tree_node* %9, %struct.VEC_vn_reference_op_s_heap** %10), !dbg !4120
  br label %for.inc, !dbg !4121

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4, !dbg !4122
  %inc = add i32 %11, 1, !dbg !4122
  store i32 %inc, i32* %i, align 4, !dbg !4122
  br label %for.cond, !dbg !4123, !llvm.loop !4124

for.end:                                          ; preds = %for.cond
  ret void, !dbg !4126
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_return_type(%union.gimple_statement_d* %gs) #0 !dbg !4127 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %fn = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4128, metadata !DIExpression()), !dbg !4129
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !4130, metadata !DIExpression()), !dbg !4131
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4132
  %call = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %0), !dbg !4133
  store %union.tree_node* %call, %union.tree_node** %fn, align 8, !dbg !4131
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !4134, metadata !DIExpression()), !dbg !4135
  %1 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !4136
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*, !dbg !4136
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4136
  %2 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !4136
  store %union.tree_node* %2, %union.tree_node** %type, align 8, !dbg !4135
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4137
  %common2 = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !4137
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2, !dbg !4137
  %4 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !4137
  store %union.tree_node* %4, %union.tree_node** %type, align 8, !dbg !4138
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4139
  %common4 = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !4139
  %type5 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 2, !dbg !4139
  %6 = load %union.tree_node*, %union.tree_node** %type5, align 8, !dbg !4139
  ret %union.tree_node* %6, !dbg !4140
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %gs) #0 !dbg !4141 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4142, metadata !DIExpression()), !dbg !4143
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4144
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !4145
  ret %union.tree_node* %call, !dbg !4146
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_chain(%union.gimple_statement_d* %gs) #0 !dbg !4147 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4148, metadata !DIExpression()), !dbg !4149
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4150
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 2), !dbg !4151
  ret %union.tree_node* %call, !dbg !4152
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_call_num_args(%union.gimple_statement_d* %gs) #0 !dbg !4153 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %num_ops = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4156, metadata !DIExpression()), !dbg !4157
  call void @llvm.dbg.declare(metadata i32* %num_ops, metadata !4158, metadata !DIExpression()), !dbg !4159
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4160
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !4161
  store i32 %call, i32* %num_ops, align 4, !dbg !4162
  %1 = load i32, i32* %num_ops, align 4, !dbg !4163
  %sub = sub i32 %1, 3, !dbg !4164
  ret i32 %sub, !dbg !4165
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !4166 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4169, metadata !DIExpression()), !dbg !4170
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !4171, metadata !DIExpression()), !dbg !4172
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4173
  %1 = load i32, i32* %index.addr, align 4, !dbg !4174
  %add = add i32 %1, 3, !dbg !4175
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 %add), !dbg !4176
  ret %union.tree_node* %call, !dbg !4177
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @vn_reference_fold_indirect(%struct.VEC_vn_reference_op_s_heap** %ops, i32* %i_p) #0 !dbg !4178 {
entry:
  %ops.addr = alloca %struct.VEC_vn_reference_op_s_heap**, align 8
  %i_p.addr = alloca i32*, align 8
  %mem = alloca %struct.VEC_vn_reference_op_s_heap*, align 8
  %op = alloca %struct.vn_reference_op_struct*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %aref = alloca %struct.vn_reference_op_struct, align 8
  %dom = alloca %union.tree_node*, align 8
  store %struct.VEC_vn_reference_op_s_heap** %ops, %struct.VEC_vn_reference_op_s_heap*** %ops.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_reference_op_s_heap*** %ops.addr, metadata !4182, metadata !DIExpression()), !dbg !4183
  store i32* %i_p, i32** %i_p.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %i_p.addr, metadata !4184, metadata !DIExpression()), !dbg !4185
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_reference_op_s_heap** %mem, metadata !4186, metadata !DIExpression()), !dbg !4187
  store %struct.VEC_vn_reference_op_s_heap* null, %struct.VEC_vn_reference_op_s_heap** %mem, align 8, !dbg !4187
  call void @llvm.dbg.declare(metadata %struct.vn_reference_op_struct** %op, metadata !4188, metadata !DIExpression()), !dbg !4189
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4190, metadata !DIExpression()), !dbg !4191
  %0 = load i32*, i32** %i_p.addr, align 8, !dbg !4192
  %1 = load i32, i32* %0, align 4, !dbg !4193
  store i32 %1, i32* %i, align 4, !dbg !4191
  call void @llvm.dbg.declare(metadata i32* %j, metadata !4194, metadata !DIExpression()), !dbg !4195
  %2 = load %struct.VEC_vn_reference_op_s_heap**, %struct.VEC_vn_reference_op_s_heap*** %ops.addr, align 8, !dbg !4196
  %3 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %2, align 8, !dbg !4196
  %tobool = icmp ne %struct.VEC_vn_reference_op_s_heap* %3, null, !dbg !4196
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4196

cond.true:                                        ; preds = %entry
  %4 = load %struct.VEC_vn_reference_op_s_heap**, %struct.VEC_vn_reference_op_s_heap*** %ops.addr, align 8, !dbg !4196
  %5 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %4, align 8, !dbg !4196
  %base = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %5, i32 0, i32 0, !dbg !4196
  br label %cond.end, !dbg !4196

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4196

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_vn_reference_op_s_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4196
  %6 = load i32, i32* %i, align 4, !dbg !4196
  %call = call %struct.vn_reference_op_struct* @VEC_vn_reference_op_s_base_index(%struct.VEC_vn_reference_op_s_base* %cond, i32 %6), !dbg !4196
  store %struct.vn_reference_op_struct* %call, %struct.vn_reference_op_struct** %op, align 8, !dbg !4197
  %7 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %op, align 8, !dbg !4198
  %op0 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %7, i32 0, i32 2, !dbg !4198
  %8 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !4198
  %exp = bitcast %union.tree_node* %8 to %struct.tree_exp*, !dbg !4198
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !4198
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !4198
  %9 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !4198
  %common = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !4198
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4198
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4198
  %base1 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !4198
  %11 = bitcast %struct.tree_base* %base1 to i64*, !dbg !4198
  %bf.load = load i64, i64* %11, align 8, !dbg !4198
  %bf.clear = and i64 %bf.load, 65535, !dbg !4198
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4198
  %cmp = icmp eq i32 %bf.cast, 15, !dbg !4200
  br i1 %cmp, label %land.lhs.true, label %if.end43, !dbg !4201

land.lhs.true:                                    ; preds = %cond.end
  %12 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %op, align 8, !dbg !4202
  %op02 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %12, i32 0, i32 2, !dbg !4202
  %13 = load %union.tree_node*, %union.tree_node** %op02, align 8, !dbg !4202
  %common3 = bitcast %union.tree_node* %13 to %struct.tree_common*, !dbg !4202
  %type4 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3, i32 0, i32 2, !dbg !4202
  %14 = load %union.tree_node*, %union.tree_node** %type4, align 8, !dbg !4202
  %common5 = bitcast %union.tree_node* %14 to %struct.tree_common*, !dbg !4202
  %type6 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5, i32 0, i32 2, !dbg !4202
  %15 = load %union.tree_node*, %union.tree_node** %type6, align 8, !dbg !4202
  %base7 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !4202
  %16 = bitcast %struct.tree_base* %base7 to i64*, !dbg !4202
  %bf.load8 = load i64, i64* %16, align 8, !dbg !4202
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !4202
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !4202
  %cmp11 = icmp ne i32 %bf.cast10, 15, !dbg !4203
  br i1 %cmp11, label %if.then, label %if.end43, !dbg !4204

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.vn_reference_op_struct* %aref, metadata !4205, metadata !DIExpression()), !dbg !4207
  call void @llvm.dbg.declare(metadata %union.tree_node** %dom, metadata !4208, metadata !DIExpression()), !dbg !4209
  %17 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %op, align 8, !dbg !4210
  %op012 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %17, i32 0, i32 2, !dbg !4210
  %18 = load %union.tree_node*, %union.tree_node** %op012, align 8, !dbg !4210
  %common13 = bitcast %union.tree_node* %18 to %struct.tree_common*, !dbg !4210
  %type14 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common13, i32 0, i32 2, !dbg !4210
  %19 = load %union.tree_node*, %union.tree_node** %type14, align 8, !dbg !4210
  %common15 = bitcast %union.tree_node* %19 to %struct.tree_common*, !dbg !4210
  %type16 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common15, i32 0, i32 2, !dbg !4210
  %20 = load %union.tree_node*, %union.tree_node** %type16, align 8, !dbg !4210
  %type17 = bitcast %union.tree_node* %20 to %struct.tree_type*, !dbg !4210
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type17, i32 0, i32 16, !dbg !4210
  %21 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !4210
  %type18 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %aref, i32 0, i32 1, !dbg !4211
  store %union.tree_node* %21, %union.tree_node** %type18, align 8, !dbg !4212
  %opcode = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %aref, i32 0, i32 0, !dbg !4213
  store i32 45, i32* %opcode, align 8, !dbg !4214
  %22 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !4215
  %op019 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %aref, i32 0, i32 2, !dbg !4216
  store %union.tree_node* %22, %union.tree_node** %op019, align 8, !dbg !4217
  %23 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %op, align 8, !dbg !4218
  %op020 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %23, i32 0, i32 2, !dbg !4218
  %24 = load %union.tree_node*, %union.tree_node** %op020, align 8, !dbg !4218
  %exp21 = bitcast %union.tree_node* %24 to %struct.tree_exp*, !dbg !4218
  %operands22 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp21, i32 0, i32 3, !dbg !4218
  %arrayidx23 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands22, i64 0, i64 0, !dbg !4218
  %25 = load %union.tree_node*, %union.tree_node** %arrayidx23, align 8, !dbg !4218
  %common24 = bitcast %union.tree_node* %25 to %struct.tree_common*, !dbg !4218
  %type25 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common24, i32 0, i32 2, !dbg !4218
  %26 = load %union.tree_node*, %union.tree_node** %type25, align 8, !dbg !4218
  %type26 = bitcast %union.tree_node* %26 to %struct.tree_type*, !dbg !4218
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type26, i32 0, i32 1, !dbg !4218
  %27 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !4218
  store %union.tree_node* %27, %union.tree_node** %dom, align 8, !dbg !4220
  %tobool27 = icmp ne %union.tree_node* %27, null, !dbg !4220
  br i1 %tobool27, label %land.lhs.true28, label %if.end, !dbg !4221

land.lhs.true28:                                  ; preds = %if.then
  %28 = load %union.tree_node*, %union.tree_node** %dom, align 8, !dbg !4222
  %type29 = bitcast %union.tree_node* %28 to %struct.tree_type*, !dbg !4222
  %minval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type29, i32 0, i32 13, !dbg !4222
  %29 = load %union.tree_node*, %union.tree_node** %minval, align 8, !dbg !4222
  %tobool30 = icmp ne %union.tree_node* %29, null, !dbg !4222
  br i1 %tobool30, label %if.then31, label %if.end, !dbg !4223

if.then31:                                        ; preds = %land.lhs.true28
  %30 = load %union.tree_node*, %union.tree_node** %dom, align 8, !dbg !4224
  %type32 = bitcast %union.tree_node* %30 to %struct.tree_type*, !dbg !4224
  %minval33 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type32, i32 0, i32 13, !dbg !4224
  %31 = load %union.tree_node*, %union.tree_node** %minval33, align 8, !dbg !4224
  %op034 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %aref, i32 0, i32 2, !dbg !4225
  store %union.tree_node* %31, %union.tree_node** %op034, align 8, !dbg !4226
  br label %if.end, !dbg !4227

if.end:                                           ; preds = %if.then31, %land.lhs.true28, %if.then
  %op035 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %aref, i32 0, i32 2, !dbg !4228
  %32 = load %union.tree_node*, %union.tree_node** %op035, align 8, !dbg !4228
  %op1 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %aref, i32 0, i32 3, !dbg !4229
  store %union.tree_node* %32, %union.tree_node** %op1, align 8, !dbg !4230
  %33 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %op, align 8, !dbg !4231
  %op036 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %33, i32 0, i32 2, !dbg !4231
  %34 = load %union.tree_node*, %union.tree_node** %op036, align 8, !dbg !4231
  %common37 = bitcast %union.tree_node* %34 to %struct.tree_common*, !dbg !4231
  %type38 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common37, i32 0, i32 2, !dbg !4231
  %35 = load %union.tree_node*, %union.tree_node** %type38, align 8, !dbg !4231
  %common39 = bitcast %union.tree_node* %35 to %struct.tree_common*, !dbg !4231
  %type40 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common39, i32 0, i32 2, !dbg !4231
  %36 = load %union.tree_node*, %union.tree_node** %type40, align 8, !dbg !4231
  %type41 = bitcast %union.tree_node* %36 to %struct.tree_type*, !dbg !4231
  %size_unit = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type41, i32 0, i32 3, !dbg !4231
  %37 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !4231
  %op2 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %aref, i32 0, i32 4, !dbg !4232
  store %union.tree_node* %37, %union.tree_node** %op2, align 8, !dbg !4233
  %call42 = call %struct.vn_reference_op_struct* @VEC_vn_reference_op_s_heap_safe_push(%struct.VEC_vn_reference_op_s_heap** %mem, %struct.vn_reference_op_struct* %aref), !dbg !4234
  br label %if.end43, !dbg !4235

if.end43:                                         ; preds = %if.end, %land.lhs.true, %cond.end
  %38 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %op, align 8, !dbg !4236
  %op044 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %38, i32 0, i32 2, !dbg !4236
  %39 = load %union.tree_node*, %union.tree_node** %op044, align 8, !dbg !4236
  %exp45 = bitcast %union.tree_node* %39 to %struct.tree_exp*, !dbg !4236
  %operands46 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp45, i32 0, i32 3, !dbg !4236
  %arrayidx47 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands46, i64 0, i64 0, !dbg !4236
  %40 = load %union.tree_node*, %union.tree_node** %arrayidx47, align 8, !dbg !4236
  call void @copy_reference_ops_from_ref(%union.tree_node* %40, %struct.VEC_vn_reference_op_s_heap** %mem), !dbg !4237
  %41 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %mem, align 8, !dbg !4238
  %tobool48 = icmp ne %struct.VEC_vn_reference_op_s_heap* %41, null, !dbg !4238
  br i1 %tobool48, label %cond.true49, label %cond.false51, !dbg !4238

cond.true49:                                      ; preds = %if.end43
  %42 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %mem, align 8, !dbg !4238
  %base50 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %42, i32 0, i32 0, !dbg !4238
  br label %cond.end52, !dbg !4238

cond.false51:                                     ; preds = %if.end43
  br label %cond.end52, !dbg !4238

cond.end52:                                       ; preds = %cond.false51, %cond.true49
  %cond53 = phi %struct.VEC_vn_reference_op_s_base* [ %base50, %cond.true49 ], [ null, %cond.false51 ], !dbg !4238
  %call54 = call i32 @VEC_vn_reference_op_s_base_length(%struct.VEC_vn_reference_op_s_base* %cond53), !dbg !4238
  %cmp55 = icmp eq i32 %call54, 1, !dbg !4240
  br i1 %cmp55, label %if.then56, label %if.else, !dbg !4241

if.then56:                                        ; preds = %cond.end52
  %43 = load %struct.VEC_vn_reference_op_s_heap**, %struct.VEC_vn_reference_op_s_heap*** %ops.addr, align 8, !dbg !4242
  %44 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %43, align 8, !dbg !4242
  %tobool57 = icmp ne %struct.VEC_vn_reference_op_s_heap* %44, null, !dbg !4242
  br i1 %tobool57, label %cond.true58, label %cond.false60, !dbg !4242

cond.true58:                                      ; preds = %if.then56
  %45 = load %struct.VEC_vn_reference_op_s_heap**, %struct.VEC_vn_reference_op_s_heap*** %ops.addr, align 8, !dbg !4242
  %46 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %45, align 8, !dbg !4242
  %base59 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %46, i32 0, i32 0, !dbg !4242
  br label %cond.end61, !dbg !4242

cond.false60:                                     ; preds = %if.then56
  br label %cond.end61, !dbg !4242

cond.end61:                                       ; preds = %cond.false60, %cond.true58
  %cond62 = phi %struct.VEC_vn_reference_op_s_base* [ %base59, %cond.true58 ], [ null, %cond.false60 ], !dbg !4242
  %47 = load i32, i32* %i, align 4, !dbg !4242
  %sub = sub i32 %47, 1, !dbg !4242
  %48 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %mem, align 8, !dbg !4242
  %tobool63 = icmp ne %struct.VEC_vn_reference_op_s_heap* %48, null, !dbg !4242
  br i1 %tobool63, label %cond.true64, label %cond.false66, !dbg !4242

cond.true64:                                      ; preds = %cond.end61
  %49 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %mem, align 8, !dbg !4242
  %base65 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %49, i32 0, i32 0, !dbg !4242
  br label %cond.end67, !dbg !4242

cond.false66:                                     ; preds = %cond.end61
  br label %cond.end67, !dbg !4242

cond.end67:                                       ; preds = %cond.false66, %cond.true64
  %cond68 = phi %struct.VEC_vn_reference_op_s_base* [ %base65, %cond.true64 ], [ null, %cond.false66 ], !dbg !4242
  %call69 = call %struct.vn_reference_op_struct* @VEC_vn_reference_op_s_base_index(%struct.VEC_vn_reference_op_s_base* %cond68, i32 0), !dbg !4242
  %call70 = call %struct.vn_reference_op_struct* @VEC_vn_reference_op_s_base_replace(%struct.VEC_vn_reference_op_s_base* %cond62, i32 %sub, %struct.vn_reference_op_struct* %call69), !dbg !4242
  %50 = load %struct.VEC_vn_reference_op_s_heap**, %struct.VEC_vn_reference_op_s_heap*** %ops.addr, align 8, !dbg !4244
  %51 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %50, align 8, !dbg !4244
  %tobool71 = icmp ne %struct.VEC_vn_reference_op_s_heap* %51, null, !dbg !4244
  br i1 %tobool71, label %cond.true72, label %cond.false74, !dbg !4244

cond.true72:                                      ; preds = %cond.end67
  %52 = load %struct.VEC_vn_reference_op_s_heap**, %struct.VEC_vn_reference_op_s_heap*** %ops.addr, align 8, !dbg !4244
  %53 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %52, align 8, !dbg !4244
  %base73 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %53, i32 0, i32 0, !dbg !4244
  br label %cond.end75, !dbg !4244

cond.false74:                                     ; preds = %cond.end67
  br label %cond.end75, !dbg !4244

cond.end75:                                       ; preds = %cond.false74, %cond.true72
  %cond76 = phi %struct.VEC_vn_reference_op_s_base* [ %base73, %cond.true72 ], [ null, %cond.false74 ], !dbg !4244
  %54 = load i32, i32* %i, align 4, !dbg !4244
  call void @VEC_vn_reference_op_s_base_ordered_remove(%struct.VEC_vn_reference_op_s_base* %cond76, i32 %54), !dbg !4244
  %55 = load i32, i32* %i, align 4, !dbg !4245
  %dec = add i32 %55, -1, !dbg !4245
  store i32 %dec, i32* %i, align 4, !dbg !4245
  br label %if.end167, !dbg !4246

if.else:                                          ; preds = %cond.end52
  %56 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %mem, align 8, !dbg !4247
  %tobool77 = icmp ne %struct.VEC_vn_reference_op_s_heap* %56, null, !dbg !4247
  br i1 %tobool77, label %cond.true78, label %cond.false80, !dbg !4247

cond.true78:                                      ; preds = %if.else
  %57 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %mem, align 8, !dbg !4247
  %base79 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %57, i32 0, i32 0, !dbg !4247
  br label %cond.end81, !dbg !4247

cond.false80:                                     ; preds = %if.else
  br label %cond.end81, !dbg !4247

cond.end81:                                       ; preds = %cond.false80, %cond.true78
  %cond82 = phi %struct.VEC_vn_reference_op_s_base* [ %base79, %cond.true78 ], [ null, %cond.false80 ], !dbg !4247
  %call83 = call i32 @VEC_vn_reference_op_s_base_length(%struct.VEC_vn_reference_op_s_base* %cond82), !dbg !4247
  %cmp84 = icmp eq i32 %call83, 2, !dbg !4249
  br i1 %cmp84, label %if.then85, label %if.else115, !dbg !4250

if.then85:                                        ; preds = %cond.end81
  %58 = load %struct.VEC_vn_reference_op_s_heap**, %struct.VEC_vn_reference_op_s_heap*** %ops.addr, align 8, !dbg !4251
  %59 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %58, align 8, !dbg !4251
  %tobool86 = icmp ne %struct.VEC_vn_reference_op_s_heap* %59, null, !dbg !4251
  br i1 %tobool86, label %cond.true87, label %cond.false89, !dbg !4251

cond.true87:                                      ; preds = %if.then85
  %60 = load %struct.VEC_vn_reference_op_s_heap**, %struct.VEC_vn_reference_op_s_heap*** %ops.addr, align 8, !dbg !4251
  %61 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %60, align 8, !dbg !4251
  %base88 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %61, i32 0, i32 0, !dbg !4251
  br label %cond.end90, !dbg !4251

cond.false89:                                     ; preds = %if.then85
  br label %cond.end90, !dbg !4251

cond.end90:                                       ; preds = %cond.false89, %cond.true87
  %cond91 = phi %struct.VEC_vn_reference_op_s_base* [ %base88, %cond.true87 ], [ null, %cond.false89 ], !dbg !4251
  %62 = load i32, i32* %i, align 4, !dbg !4251
  %sub92 = sub i32 %62, 1, !dbg !4251
  %63 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %mem, align 8, !dbg !4251
  %tobool93 = icmp ne %struct.VEC_vn_reference_op_s_heap* %63, null, !dbg !4251
  br i1 %tobool93, label %cond.true94, label %cond.false96, !dbg !4251

cond.true94:                                      ; preds = %cond.end90
  %64 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %mem, align 8, !dbg !4251
  %base95 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %64, i32 0, i32 0, !dbg !4251
  br label %cond.end97, !dbg !4251

cond.false96:                                     ; preds = %cond.end90
  br label %cond.end97, !dbg !4251

cond.end97:                                       ; preds = %cond.false96, %cond.true94
  %cond98 = phi %struct.VEC_vn_reference_op_s_base* [ %base95, %cond.true94 ], [ null, %cond.false96 ], !dbg !4251
  %call99 = call %struct.vn_reference_op_struct* @VEC_vn_reference_op_s_base_index(%struct.VEC_vn_reference_op_s_base* %cond98, i32 0), !dbg !4251
  %call100 = call %struct.vn_reference_op_struct* @VEC_vn_reference_op_s_base_replace(%struct.VEC_vn_reference_op_s_base* %cond91, i32 %sub92, %struct.vn_reference_op_struct* %call99), !dbg !4251
  %65 = load %struct.VEC_vn_reference_op_s_heap**, %struct.VEC_vn_reference_op_s_heap*** %ops.addr, align 8, !dbg !4253
  %66 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %65, align 8, !dbg !4253
  %tobool101 = icmp ne %struct.VEC_vn_reference_op_s_heap* %66, null, !dbg !4253
  br i1 %tobool101, label %cond.true102, label %cond.false104, !dbg !4253

cond.true102:                                     ; preds = %cond.end97
  %67 = load %struct.VEC_vn_reference_op_s_heap**, %struct.VEC_vn_reference_op_s_heap*** %ops.addr, align 8, !dbg !4253
  %68 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %67, align 8, !dbg !4253
  %base103 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %68, i32 0, i32 0, !dbg !4253
  br label %cond.end105, !dbg !4253

cond.false104:                                    ; preds = %cond.end97
  br label %cond.end105, !dbg !4253

cond.end105:                                      ; preds = %cond.false104, %cond.true102
  %cond106 = phi %struct.VEC_vn_reference_op_s_base* [ %base103, %cond.true102 ], [ null, %cond.false104 ], !dbg !4253
  %69 = load i32, i32* %i, align 4, !dbg !4253
  %70 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %mem, align 8, !dbg !4253
  %tobool107 = icmp ne %struct.VEC_vn_reference_op_s_heap* %70, null, !dbg !4253
  br i1 %tobool107, label %cond.true108, label %cond.false110, !dbg !4253

cond.true108:                                     ; preds = %cond.end105
  %71 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %mem, align 8, !dbg !4253
  %base109 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %71, i32 0, i32 0, !dbg !4253
  br label %cond.end111, !dbg !4253

cond.false110:                                    ; preds = %cond.end105
  br label %cond.end111, !dbg !4253

cond.end111:                                      ; preds = %cond.false110, %cond.true108
  %cond112 = phi %struct.VEC_vn_reference_op_s_base* [ %base109, %cond.true108 ], [ null, %cond.false110 ], !dbg !4253
  %call113 = call %struct.vn_reference_op_struct* @VEC_vn_reference_op_s_base_index(%struct.VEC_vn_reference_op_s_base* %cond112, i32 1), !dbg !4253
  %call114 = call %struct.vn_reference_op_struct* @VEC_vn_reference_op_s_base_replace(%struct.VEC_vn_reference_op_s_base* %cond106, i32 %69, %struct.vn_reference_op_struct* %call113), !dbg !4253
  br label %if.end166, !dbg !4254

if.else115:                                       ; preds = %cond.end81
  %72 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %mem, align 8, !dbg !4255
  %tobool116 = icmp ne %struct.VEC_vn_reference_op_s_heap* %72, null, !dbg !4255
  br i1 %tobool116, label %cond.true117, label %cond.false119, !dbg !4255

cond.true117:                                     ; preds = %if.else115
  %73 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %mem, align 8, !dbg !4255
  %base118 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %73, i32 0, i32 0, !dbg !4255
  br label %cond.end120, !dbg !4255

cond.false119:                                    ; preds = %if.else115
  br label %cond.end120, !dbg !4255

cond.end120:                                      ; preds = %cond.false119, %cond.true117
  %cond121 = phi %struct.VEC_vn_reference_op_s_base* [ %base118, %cond.true117 ], [ null, %cond.false119 ], !dbg !4255
  %call122 = call i32 @VEC_vn_reference_op_s_base_length(%struct.VEC_vn_reference_op_s_base* %cond121), !dbg !4255
  %cmp123 = icmp ugt i32 %call122, 2, !dbg !4257
  br i1 %cmp123, label %if.then124, label %if.else164, !dbg !4258

if.then124:                                       ; preds = %cond.end120
  %74 = load %struct.VEC_vn_reference_op_s_heap**, %struct.VEC_vn_reference_op_s_heap*** %ops.addr, align 8, !dbg !4259
  %75 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %74, align 8, !dbg !4259
  %tobool125 = icmp ne %struct.VEC_vn_reference_op_s_heap* %75, null, !dbg !4259
  br i1 %tobool125, label %cond.true126, label %cond.false128, !dbg !4259

cond.true126:                                     ; preds = %if.then124
  %76 = load %struct.VEC_vn_reference_op_s_heap**, %struct.VEC_vn_reference_op_s_heap*** %ops.addr, align 8, !dbg !4259
  %77 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %76, align 8, !dbg !4259
  %base127 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %77, i32 0, i32 0, !dbg !4259
  br label %cond.end129, !dbg !4259

cond.false128:                                    ; preds = %if.then124
  br label %cond.end129, !dbg !4259

cond.end129:                                      ; preds = %cond.false128, %cond.true126
  %cond130 = phi %struct.VEC_vn_reference_op_s_base* [ %base127, %cond.true126 ], [ null, %cond.false128 ], !dbg !4259
  %78 = load i32, i32* %i, align 4, !dbg !4259
  %sub131 = sub i32 %78, 1, !dbg !4259
  %79 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %mem, align 8, !dbg !4259
  %tobool132 = icmp ne %struct.VEC_vn_reference_op_s_heap* %79, null, !dbg !4259
  br i1 %tobool132, label %cond.true133, label %cond.false135, !dbg !4259

cond.true133:                                     ; preds = %cond.end129
  %80 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %mem, align 8, !dbg !4259
  %base134 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %80, i32 0, i32 0, !dbg !4259
  br label %cond.end136, !dbg !4259

cond.false135:                                    ; preds = %cond.end129
  br label %cond.end136, !dbg !4259

cond.end136:                                      ; preds = %cond.false135, %cond.true133
  %cond137 = phi %struct.VEC_vn_reference_op_s_base* [ %base134, %cond.true133 ], [ null, %cond.false135 ], !dbg !4259
  %call138 = call %struct.vn_reference_op_struct* @VEC_vn_reference_op_s_base_index(%struct.VEC_vn_reference_op_s_base* %cond137, i32 0), !dbg !4259
  %call139 = call %struct.vn_reference_op_struct* @VEC_vn_reference_op_s_base_replace(%struct.VEC_vn_reference_op_s_base* %cond130, i32 %sub131, %struct.vn_reference_op_struct* %call138), !dbg !4259
  %81 = load %struct.VEC_vn_reference_op_s_heap**, %struct.VEC_vn_reference_op_s_heap*** %ops.addr, align 8, !dbg !4261
  %82 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %81, align 8, !dbg !4261
  %tobool140 = icmp ne %struct.VEC_vn_reference_op_s_heap* %82, null, !dbg !4261
  br i1 %tobool140, label %cond.true141, label %cond.false143, !dbg !4261

cond.true141:                                     ; preds = %cond.end136
  %83 = load %struct.VEC_vn_reference_op_s_heap**, %struct.VEC_vn_reference_op_s_heap*** %ops.addr, align 8, !dbg !4261
  %84 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %83, align 8, !dbg !4261
  %base142 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %84, i32 0, i32 0, !dbg !4261
  br label %cond.end144, !dbg !4261

cond.false143:                                    ; preds = %cond.end136
  br label %cond.end144, !dbg !4261

cond.end144:                                      ; preds = %cond.false143, %cond.true141
  %cond145 = phi %struct.VEC_vn_reference_op_s_base* [ %base142, %cond.true141 ], [ null, %cond.false143 ], !dbg !4261
  %85 = load i32, i32* %i, align 4, !dbg !4261
  %86 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %mem, align 8, !dbg !4261
  %tobool146 = icmp ne %struct.VEC_vn_reference_op_s_heap* %86, null, !dbg !4261
  br i1 %tobool146, label %cond.true147, label %cond.false149, !dbg !4261

cond.true147:                                     ; preds = %cond.end144
  %87 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %mem, align 8, !dbg !4261
  %base148 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %87, i32 0, i32 0, !dbg !4261
  br label %cond.end150, !dbg !4261

cond.false149:                                    ; preds = %cond.end144
  br label %cond.end150, !dbg !4261

cond.end150:                                      ; preds = %cond.false149, %cond.true147
  %cond151 = phi %struct.VEC_vn_reference_op_s_base* [ %base148, %cond.true147 ], [ null, %cond.false149 ], !dbg !4261
  %call152 = call %struct.vn_reference_op_struct* @VEC_vn_reference_op_s_base_index(%struct.VEC_vn_reference_op_s_base* %cond151, i32 1), !dbg !4261
  %call153 = call %struct.vn_reference_op_struct* @VEC_vn_reference_op_s_base_replace(%struct.VEC_vn_reference_op_s_base* %cond145, i32 %85, %struct.vn_reference_op_struct* %call152), !dbg !4261
  store i32 2, i32* %j, align 4, !dbg !4262
  br label %for.cond, !dbg !4264

for.cond:                                         ; preds = %for.inc, %cond.end150
  %88 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %mem, align 8, !dbg !4265
  %tobool154 = icmp ne %struct.VEC_vn_reference_op_s_heap* %88, null, !dbg !4265
  br i1 %tobool154, label %cond.true155, label %cond.false157, !dbg !4265

cond.true155:                                     ; preds = %for.cond
  %89 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %mem, align 8, !dbg !4265
  %base156 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %89, i32 0, i32 0, !dbg !4265
  br label %cond.end158, !dbg !4265

cond.false157:                                    ; preds = %for.cond
  br label %cond.end158, !dbg !4265

cond.end158:                                      ; preds = %cond.false157, %cond.true155
  %cond159 = phi %struct.VEC_vn_reference_op_s_base* [ %base156, %cond.true155 ], [ null, %cond.false157 ], !dbg !4265
  %90 = load i32, i32* %j, align 4, !dbg !4265
  %call160 = call i32 @VEC_vn_reference_op_s_base_iterate(%struct.VEC_vn_reference_op_s_base* %cond159, i32 %90, %struct.vn_reference_op_struct** %op), !dbg !4265
  %tobool161 = icmp ne i32 %call160, 0, !dbg !4267
  br i1 %tobool161, label %for.body, label %for.end, !dbg !4267

for.body:                                         ; preds = %cond.end158
  %91 = load %struct.VEC_vn_reference_op_s_heap**, %struct.VEC_vn_reference_op_s_heap*** %ops.addr, align 8, !dbg !4268
  %92 = load i32, i32* %i, align 4, !dbg !4268
  %inc = add i32 %92, 1, !dbg !4268
  store i32 %inc, i32* %i, align 4, !dbg !4268
  %93 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %op, align 8, !dbg !4268
  %call162 = call %struct.vn_reference_op_struct* @VEC_vn_reference_op_s_heap_safe_insert(%struct.VEC_vn_reference_op_s_heap** %91, i32 %inc, %struct.vn_reference_op_struct* %93), !dbg !4268
  br label %for.inc, !dbg !4268

for.inc:                                          ; preds = %for.body
  %94 = load i32, i32* %j, align 4, !dbg !4269
  %inc163 = add i32 %94, 1, !dbg !4269
  store i32 %inc163, i32* %j, align 4, !dbg !4269
  br label %for.cond, !dbg !4270, !llvm.loop !4271

for.end:                                          ; preds = %cond.end158
  br label %if.end165, !dbg !4273

if.else164:                                       ; preds = %cond.end120
  call void @fancy_abort(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0), i32 886, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4274
  br label %if.end165

if.end165:                                        ; preds = %if.else164, %for.end
  br label %if.end166

if.end166:                                        ; preds = %if.end165, %cond.end111
  br label %if.end167

if.end167:                                        ; preds = %if.end166, %cond.end75
  call void @VEC_vn_reference_op_s_heap_free(%struct.VEC_vn_reference_op_s_heap** %mem), !dbg !4275
  %95 = load i32, i32* %i, align 4, !dbg !4276
  %96 = load i32*, i32** %i_p.addr, align 8, !dbg !4277
  store i32 %95, i32* %96, align 4, !dbg !4278
  ret void, !dbg !4279
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.vn_reference_op_struct* @VEC_vn_reference_op_s_base_replace(%struct.VEC_vn_reference_op_s_base* %vec_, i32 %ix_, %struct.vn_reference_op_struct* %obj_) #0 !dbg !4280 {
entry:
  %vec_.addr = alloca %struct.VEC_vn_reference_op_s_base*, align 8
  %ix_.addr = alloca i32, align 4
  %obj_.addr = alloca %struct.vn_reference_op_struct*, align 8
  %slot_ = alloca %struct.vn_reference_op_struct*, align 8
  store %struct.VEC_vn_reference_op_s_base* %vec_, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_reference_op_s_base** %vec_.addr, metadata !4283, metadata !DIExpression()), !dbg !4284
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4285, metadata !DIExpression()), !dbg !4284
  store %struct.vn_reference_op_struct* %obj_, %struct.vn_reference_op_struct** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.vn_reference_op_struct** %obj_.addr, metadata !4286, metadata !DIExpression()), !dbg !4284
  call void @llvm.dbg.declare(metadata %struct.vn_reference_op_struct** %slot_, metadata !4287, metadata !DIExpression()), !dbg !4284
  %0 = load i32, i32* %ix_.addr, align 4, !dbg !4284
  %1 = load %struct.VEC_vn_reference_op_s_base*, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8, !dbg !4284
  %num = getelementptr inbounds %struct.VEC_vn_reference_op_s_base, %struct.VEC_vn_reference_op_s_base* %1, i32 0, i32 0, !dbg !4284
  %2 = load i32, i32* %num, align 8, !dbg !4284
  %cmp = icmp ult i32 %0, %2, !dbg !4284
  %conv = zext i1 %cmp to i32, !dbg !4284
  %3 = load %struct.VEC_vn_reference_op_s_base*, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8, !dbg !4284
  %vec = getelementptr inbounds %struct.VEC_vn_reference_op_s_base, %struct.VEC_vn_reference_op_s_base* %3, i32 0, i32 2, !dbg !4284
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !4284
  %idxprom = zext i32 %4 to i64, !dbg !4284
  %arrayidx = getelementptr inbounds [1 x %struct.vn_reference_op_struct], [1 x %struct.vn_reference_op_struct]* %vec, i64 0, i64 %idxprom, !dbg !4284
  store %struct.vn_reference_op_struct* %arrayidx, %struct.vn_reference_op_struct** %slot_, align 8, !dbg !4284
  %5 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %obj_.addr, align 8, !dbg !4288
  %tobool = icmp ne %struct.vn_reference_op_struct* %5, null, !dbg !4288
  br i1 %tobool, label %if.then, label %if.end, !dbg !4284

if.then:                                          ; preds = %entry
  %6 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %slot_, align 8, !dbg !4288
  %7 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %obj_.addr, align 8, !dbg !4288
  %8 = bitcast %struct.vn_reference_op_struct* %6 to i8*, !dbg !4288
  %9 = bitcast %struct.vn_reference_op_struct* %7 to i8*, !dbg !4288
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 40, i1 false), !dbg !4288
  br label %if.end, !dbg !4288

if.end:                                           ; preds = %if.then, %entry
  %10 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %slot_, align 8, !dbg !4284
  ret %struct.vn_reference_op_struct* %10, !dbg !4284
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_vn_reference_op_s_base_ordered_remove(%struct.VEC_vn_reference_op_s_base* %vec_, i32 %ix_) #0 !dbg !4290 {
entry:
  %vec_.addr = alloca %struct.VEC_vn_reference_op_s_base*, align 8
  %ix_.addr = alloca i32, align 4
  %slot_ = alloca %struct.vn_reference_op_struct*, align 8
  store %struct.VEC_vn_reference_op_s_base* %vec_, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_reference_op_s_base** %vec_.addr, metadata !4293, metadata !DIExpression()), !dbg !4294
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4295, metadata !DIExpression()), !dbg !4294
  call void @llvm.dbg.declare(metadata %struct.vn_reference_op_struct** %slot_, metadata !4296, metadata !DIExpression()), !dbg !4294
  %0 = load i32, i32* %ix_.addr, align 4, !dbg !4294
  %1 = load %struct.VEC_vn_reference_op_s_base*, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8, !dbg !4294
  %num = getelementptr inbounds %struct.VEC_vn_reference_op_s_base, %struct.VEC_vn_reference_op_s_base* %1, i32 0, i32 0, !dbg !4294
  %2 = load i32, i32* %num, align 8, !dbg !4294
  %cmp = icmp ult i32 %0, %2, !dbg !4294
  %conv = zext i1 %cmp to i32, !dbg !4294
  %3 = load %struct.VEC_vn_reference_op_s_base*, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8, !dbg !4294
  %vec = getelementptr inbounds %struct.VEC_vn_reference_op_s_base, %struct.VEC_vn_reference_op_s_base* %3, i32 0, i32 2, !dbg !4294
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !4294
  %idxprom = zext i32 %4 to i64, !dbg !4294
  %arrayidx = getelementptr inbounds [1 x %struct.vn_reference_op_struct], [1 x %struct.vn_reference_op_struct]* %vec, i64 0, i64 %idxprom, !dbg !4294
  store %struct.vn_reference_op_struct* %arrayidx, %struct.vn_reference_op_struct** %slot_, align 8, !dbg !4294
  %5 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %slot_, align 8, !dbg !4294
  %6 = bitcast %struct.vn_reference_op_struct* %5 to i8*, !dbg !4294
  %7 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %slot_, align 8, !dbg !4294
  %add.ptr = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %7, i64 1, !dbg !4294
  %8 = bitcast %struct.vn_reference_op_struct* %add.ptr to i8*, !dbg !4294
  %9 = load %struct.VEC_vn_reference_op_s_base*, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8, !dbg !4294
  %num1 = getelementptr inbounds %struct.VEC_vn_reference_op_s_base, %struct.VEC_vn_reference_op_s_base* %9, i32 0, i32 0, !dbg !4294
  %10 = load i32, i32* %num1, align 8, !dbg !4294
  %dec = add i32 %10, -1, !dbg !4294
  store i32 %dec, i32* %num1, align 8, !dbg !4294
  %11 = load i32, i32* %ix_.addr, align 4, !dbg !4294
  %sub = sub i32 %dec, %11, !dbg !4294
  %conv2 = zext i32 %sub to i64, !dbg !4294
  %mul = mul i64 %conv2, 40, !dbg !4294
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %8, i64 %mul, i1 false), !dbg !4294
  ret void, !dbg !4294
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.vn_reference_op_struct* @VEC_vn_reference_op_s_heap_safe_insert(%struct.VEC_vn_reference_op_s_heap** %vec_, i32 %ix_, %struct.vn_reference_op_struct* %obj_) #0 !dbg !4297 {
entry:
  %vec_.addr = alloca %struct.VEC_vn_reference_op_s_heap**, align 8
  %ix_.addr = alloca i32, align 4
  %obj_.addr = alloca %struct.vn_reference_op_struct*, align 8
  store %struct.VEC_vn_reference_op_s_heap** %vec_, %struct.VEC_vn_reference_op_s_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_reference_op_s_heap*** %vec_.addr, metadata !4300, metadata !DIExpression()), !dbg !4301
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4302, metadata !DIExpression()), !dbg !4301
  store %struct.vn_reference_op_struct* %obj_, %struct.vn_reference_op_struct** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.vn_reference_op_struct** %obj_.addr, metadata !4303, metadata !DIExpression()), !dbg !4301
  %0 = load %struct.VEC_vn_reference_op_s_heap**, %struct.VEC_vn_reference_op_s_heap*** %vec_.addr, align 8, !dbg !4301
  %call = call i32 @VEC_vn_reference_op_s_heap_reserve(%struct.VEC_vn_reference_op_s_heap** %0, i32 1), !dbg !4301
  %1 = load %struct.VEC_vn_reference_op_s_heap**, %struct.VEC_vn_reference_op_s_heap*** %vec_.addr, align 8, !dbg !4301
  %2 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %1, align 8, !dbg !4301
  %tobool = icmp ne %struct.VEC_vn_reference_op_s_heap* %2, null, !dbg !4301
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4301

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_vn_reference_op_s_heap**, %struct.VEC_vn_reference_op_s_heap*** %vec_.addr, align 8, !dbg !4301
  %4 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %3, align 8, !dbg !4301
  %base = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %4, i32 0, i32 0, !dbg !4301
  br label %cond.end, !dbg !4301

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4301

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_vn_reference_op_s_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4301
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !4301
  %6 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %obj_.addr, align 8, !dbg !4301
  %call1 = call %struct.vn_reference_op_struct* @VEC_vn_reference_op_s_base_quick_insert(%struct.VEC_vn_reference_op_s_base* %cond, i32 %5, %struct.vn_reference_op_struct* %6), !dbg !4301
  ret %struct.vn_reference_op_struct* %call1, !dbg !4301
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_vn_reference_op_s_heap_free(%struct.VEC_vn_reference_op_s_heap** %vec_) #0 !dbg !4304 {
entry:
  %vec_.addr = alloca %struct.VEC_vn_reference_op_s_heap**, align 8
  store %struct.VEC_vn_reference_op_s_heap** %vec_, %struct.VEC_vn_reference_op_s_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_reference_op_s_heap*** %vec_.addr, metadata !4307, metadata !DIExpression()), !dbg !4308
  %0 = load %struct.VEC_vn_reference_op_s_heap**, %struct.VEC_vn_reference_op_s_heap*** %vec_.addr, align 8, !dbg !4309
  %1 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %0, align 8, !dbg !4309
  %tobool = icmp ne %struct.VEC_vn_reference_op_s_heap* %1, null, !dbg !4309
  br i1 %tobool, label %if.then, label %if.end, !dbg !4308

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_vn_reference_op_s_heap**, %struct.VEC_vn_reference_op_s_heap*** %vec_.addr, align 8, !dbg !4309
  %3 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %2, align 8, !dbg !4309
  %4 = bitcast %struct.VEC_vn_reference_op_s_heap* %3 to i8*, !dbg !4309
  call void @free(i8* %4), !dbg !4309
  br label %if.end, !dbg !4309

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_vn_reference_op_s_heap**, %struct.VEC_vn_reference_op_s_heap*** %vec_.addr, align 8, !dbg !4308
  store %struct.VEC_vn_reference_op_s_heap* null, %struct.VEC_vn_reference_op_s_heap** %5, align 8, !dbg !4308
  ret void, !dbg !4308
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @vn_reference_lookup_pieces(%union.tree_node* %vuse, i32 %set, %union.tree_node* %type, %struct.VEC_vn_reference_op_s_heap* %operands, %struct.vn_reference_s** %vnresult, i8 zeroext %maywalk) #0 !dbg !4311 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %vuse.addr = alloca %union.tree_node*, align 8
  %set.addr = alloca i32, align 4
  %type.addr = alloca %union.tree_node*, align 8
  %operands.addr = alloca %struct.VEC_vn_reference_op_s_heap*, align 8
  %vnresult.addr = alloca %struct.vn_reference_s**, align 8
  %maywalk.addr = alloca i8, align 1
  %vr1 = alloca %struct.vn_reference_s, align 8
  %tmp = alloca %struct.vn_reference_s*, align 8
  %r = alloca %struct.ao_ref_s, align 8
  store %union.tree_node* %vuse, %union.tree_node** %vuse.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %vuse.addr, metadata !4315, metadata !DIExpression()), !dbg !4316
  store i32 %set, i32* %set.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %set.addr, metadata !4317, metadata !DIExpression()), !dbg !4318
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !4319, metadata !DIExpression()), !dbg !4320
  store %struct.VEC_vn_reference_op_s_heap* %operands, %struct.VEC_vn_reference_op_s_heap** %operands.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_reference_op_s_heap** %operands.addr, metadata !4321, metadata !DIExpression()), !dbg !4322
  store %struct.vn_reference_s** %vnresult, %struct.vn_reference_s*** %vnresult.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.vn_reference_s*** %vnresult.addr, metadata !4323, metadata !DIExpression()), !dbg !4324
  store i8 %maywalk, i8* %maywalk.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %maywalk.addr, metadata !4325, metadata !DIExpression()), !dbg !4326
  call void @llvm.dbg.declare(metadata %struct.vn_reference_s* %vr1, metadata !4327, metadata !DIExpression()), !dbg !4328
  call void @llvm.dbg.declare(metadata %struct.vn_reference_s** %tmp, metadata !4329, metadata !DIExpression()), !dbg !4330
  %0 = load %struct.vn_reference_s**, %struct.vn_reference_s*** %vnresult.addr, align 8, !dbg !4331
  %tobool = icmp ne %struct.vn_reference_s** %0, null, !dbg !4331
  br i1 %tobool, label %if.end, label %if.then, !dbg !4333

if.then:                                          ; preds = %entry
  store %struct.vn_reference_s** %tmp, %struct.vn_reference_s*** %vnresult.addr, align 8, !dbg !4334
  br label %if.end, !dbg !4335

if.end:                                           ; preds = %if.then, %entry
  %1 = load %struct.vn_reference_s**, %struct.vn_reference_s*** %vnresult.addr, align 8, !dbg !4336
  store %struct.vn_reference_s* null, %struct.vn_reference_s** %1, align 8, !dbg !4337
  %2 = load %union.tree_node*, %union.tree_node** %vuse.addr, align 8, !dbg !4338
  %tobool1 = icmp ne %union.tree_node* %2, null, !dbg !4338
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !4338

cond.true:                                        ; preds = %if.end
  %3 = load %union.tree_node*, %union.tree_node** %vuse.addr, align 8, !dbg !4339
  %call = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %3), !dbg !4339
  %valnum = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call, i32 0, i32 0, !dbg !4339
  %4 = load %union.tree_node*, %union.tree_node** %valnum, align 8, !dbg !4339
  br label %cond.end, !dbg !4338

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !4338

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %4, %cond.true ], [ null, %cond.false ], !dbg !4338
  %vuse2 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %vr1, i32 0, i32 2, !dbg !4340
  store %union.tree_node* %cond, %union.tree_node** %vuse2, align 8, !dbg !4341
  %5 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** @shared_lookup_references, align 8, !dbg !4342
  %tobool3 = icmp ne %struct.VEC_vn_reference_op_s_heap* %5, null, !dbg !4342
  br i1 %tobool3, label %cond.true4, label %cond.false5, !dbg !4342

cond.true4:                                       ; preds = %cond.end
  %6 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** @shared_lookup_references, align 8, !dbg !4342
  %base = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %6, i32 0, i32 0, !dbg !4342
  br label %cond.end6, !dbg !4342

cond.false5:                                      ; preds = %cond.end
  br label %cond.end6, !dbg !4342

cond.end6:                                        ; preds = %cond.false5, %cond.true4
  %cond7 = phi %struct.VEC_vn_reference_op_s_base* [ %base, %cond.true4 ], [ null, %cond.false5 ], !dbg !4342
  call void @VEC_vn_reference_op_s_base_truncate(%struct.VEC_vn_reference_op_s_base* %cond7, i32 0), !dbg !4342
  %7 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands.addr, align 8, !dbg !4343
  %tobool8 = icmp ne %struct.VEC_vn_reference_op_s_heap* %7, null, !dbg !4343
  br i1 %tobool8, label %cond.true9, label %cond.false11, !dbg !4343

cond.true9:                                       ; preds = %cond.end6
  %8 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands.addr, align 8, !dbg !4343
  %base10 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %8, i32 0, i32 0, !dbg !4343
  br label %cond.end12, !dbg !4343

cond.false11:                                     ; preds = %cond.end6
  br label %cond.end12, !dbg !4343

cond.end12:                                       ; preds = %cond.false11, %cond.true9
  %cond13 = phi %struct.VEC_vn_reference_op_s_base* [ %base10, %cond.true9 ], [ null, %cond.false11 ], !dbg !4343
  %call14 = call i32 @VEC_vn_reference_op_s_base_length(%struct.VEC_vn_reference_op_s_base* %cond13), !dbg !4343
  call void @VEC_vn_reference_op_s_heap_safe_grow(%struct.VEC_vn_reference_op_s_heap** @shared_lookup_references, i32 %call14), !dbg !4343
  %9 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** @shared_lookup_references, align 8, !dbg !4344
  %tobool15 = icmp ne %struct.VEC_vn_reference_op_s_heap* %9, null, !dbg !4344
  br i1 %tobool15, label %cond.true16, label %cond.false18, !dbg !4344

cond.true16:                                      ; preds = %cond.end12
  %10 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** @shared_lookup_references, align 8, !dbg !4344
  %base17 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %10, i32 0, i32 0, !dbg !4344
  br label %cond.end19, !dbg !4344

cond.false18:                                     ; preds = %cond.end12
  br label %cond.end19, !dbg !4344

cond.end19:                                       ; preds = %cond.false18, %cond.true16
  %cond20 = phi %struct.VEC_vn_reference_op_s_base* [ %base17, %cond.true16 ], [ null, %cond.false18 ], !dbg !4344
  %call21 = call %struct.vn_reference_op_struct* @VEC_vn_reference_op_s_base_address(%struct.VEC_vn_reference_op_s_base* %cond20), !dbg !4344
  %11 = bitcast %struct.vn_reference_op_struct* %call21 to i8*, !dbg !4345
  %12 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands.addr, align 8, !dbg !4346
  %tobool22 = icmp ne %struct.VEC_vn_reference_op_s_heap* %12, null, !dbg !4346
  br i1 %tobool22, label %cond.true23, label %cond.false25, !dbg !4346

cond.true23:                                      ; preds = %cond.end19
  %13 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands.addr, align 8, !dbg !4346
  %base24 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %13, i32 0, i32 0, !dbg !4346
  br label %cond.end26, !dbg !4346

cond.false25:                                     ; preds = %cond.end19
  br label %cond.end26, !dbg !4346

cond.end26:                                       ; preds = %cond.false25, %cond.true23
  %cond27 = phi %struct.VEC_vn_reference_op_s_base* [ %base24, %cond.true23 ], [ null, %cond.false25 ], !dbg !4346
  %call28 = call %struct.vn_reference_op_struct* @VEC_vn_reference_op_s_base_address(%struct.VEC_vn_reference_op_s_base* %cond27), !dbg !4346
  %14 = bitcast %struct.vn_reference_op_struct* %call28 to i8*, !dbg !4345
  %15 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands.addr, align 8, !dbg !4347
  %tobool29 = icmp ne %struct.VEC_vn_reference_op_s_heap* %15, null, !dbg !4347
  br i1 %tobool29, label %cond.true30, label %cond.false32, !dbg !4347

cond.true30:                                      ; preds = %cond.end26
  %16 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands.addr, align 8, !dbg !4347
  %base31 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %16, i32 0, i32 0, !dbg !4347
  br label %cond.end33, !dbg !4347

cond.false32:                                     ; preds = %cond.end26
  br label %cond.end33, !dbg !4347

cond.end33:                                       ; preds = %cond.false32, %cond.true30
  %cond34 = phi %struct.VEC_vn_reference_op_s_base* [ %base31, %cond.true30 ], [ null, %cond.false32 ], !dbg !4347
  %call35 = call i32 @VEC_vn_reference_op_s_base_length(%struct.VEC_vn_reference_op_s_base* %cond34), !dbg !4347
  %conv = zext i32 %call35 to i64, !dbg !4347
  %mul = mul i64 40, %conv, !dbg !4348
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* align 8 %14, i64 %mul, i1 false), !dbg !4345
  %17 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** @shared_lookup_references, align 8, !dbg !4349
  %call36 = call %struct.VEC_vn_reference_op_s_heap* @valueize_refs(%struct.VEC_vn_reference_op_s_heap* %17), !dbg !4350
  store %struct.VEC_vn_reference_op_s_heap* %call36, %struct.VEC_vn_reference_op_s_heap** @shared_lookup_references, align 8, !dbg !4351
  store %struct.VEC_vn_reference_op_s_heap* %call36, %struct.VEC_vn_reference_op_s_heap** %operands.addr, align 8, !dbg !4352
  %operands37 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %vr1, i32 0, i32 5, !dbg !4353
  store %struct.VEC_vn_reference_op_s_heap* %call36, %struct.VEC_vn_reference_op_s_heap** %operands37, align 8, !dbg !4354
  %18 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4355
  %type38 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %vr1, i32 0, i32 4, !dbg !4356
  store %union.tree_node* %18, %union.tree_node** %type38, align 8, !dbg !4357
  %19 = load i32, i32* %set.addr, align 4, !dbg !4358
  %set39 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %vr1, i32 0, i32 3, !dbg !4359
  store i32 %19, i32* %set39, align 8, !dbg !4360
  %call40 = call i32 @vn_reference_compute_hash(%struct.vn_reference_s* %vr1), !dbg !4361
  %hashcode = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %vr1, i32 0, i32 1, !dbg !4362
  store i32 %call40, i32* %hashcode, align 4, !dbg !4363
  %20 = load %struct.vn_reference_s**, %struct.vn_reference_s*** %vnresult.addr, align 8, !dbg !4364
  %call41 = call %union.tree_node* @vn_reference_lookup_1(%struct.vn_reference_s* %vr1, %struct.vn_reference_s** %20), !dbg !4365
  %21 = load %struct.vn_reference_s**, %struct.vn_reference_s*** %vnresult.addr, align 8, !dbg !4366
  %22 = load %struct.vn_reference_s*, %struct.vn_reference_s** %21, align 8, !dbg !4368
  %tobool42 = icmp ne %struct.vn_reference_s* %22, null, !dbg !4368
  br i1 %tobool42, label %if.end61, label %land.lhs.true, !dbg !4369

land.lhs.true:                                    ; preds = %cond.end33
  %23 = load i8, i8* %maywalk.addr, align 1, !dbg !4370
  %conv43 = zext i8 %23 to i32, !dbg !4370
  %tobool44 = icmp ne i32 %conv43, 0, !dbg !4370
  br i1 %tobool44, label %land.lhs.true45, label %if.end61, !dbg !4371

land.lhs.true45:                                  ; preds = %land.lhs.true
  %vuse46 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %vr1, i32 0, i32 2, !dbg !4372
  %24 = load %union.tree_node*, %union.tree_node** %vuse46, align 8, !dbg !4372
  %tobool47 = icmp ne %union.tree_node* %24, null, !dbg !4373
  br i1 %tobool47, label %if.then48, label %if.end61, !dbg !4374

if.then48:                                        ; preds = %land.lhs.true45
  call void @llvm.dbg.declare(metadata %struct.ao_ref_s* %r, metadata !4375, metadata !DIExpression()), !dbg !4377
  %25 = load i32, i32* %set.addr, align 4, !dbg !4378
  %26 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4380
  %operands49 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %vr1, i32 0, i32 5, !dbg !4381
  %27 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands49, align 8, !dbg !4381
  %call50 = call zeroext i8 @ao_ref_init_from_vn_reference(%struct.ao_ref_s* %r, i32 %25, %union.tree_node* %26, %struct.VEC_vn_reference_op_s_heap* %27), !dbg !4382
  %tobool51 = icmp ne i8 %call50, 0, !dbg !4382
  br i1 %tobool51, label %if.then52, label %if.end55, !dbg !4383

if.then52:                                        ; preds = %if.then48
  %vuse53 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %vr1, i32 0, i32 2, !dbg !4384
  %28 = load %union.tree_node*, %union.tree_node** %vuse53, align 8, !dbg !4384
  %29 = bitcast %struct.vn_reference_s* %vr1 to i8*, !dbg !4385
  %call54 = call i8* @walk_non_aliased_vuses(%struct.ao_ref_s* %r, %union.tree_node* %28, i8* (%struct.ao_ref_s*, %union.tree_node*, i8*)* @vn_reference_lookup_2, i8* (%struct.ao_ref_s*, %union.tree_node*, i8*)* @vn_reference_lookup_3, i8* %29), !dbg !4386
  %30 = bitcast i8* %call54 to %struct.vn_reference_s*, !dbg !4387
  %31 = load %struct.vn_reference_s**, %struct.vn_reference_s*** %vnresult.addr, align 8, !dbg !4388
  store %struct.vn_reference_s* %30, %struct.vn_reference_s** %31, align 8, !dbg !4389
  br label %if.end55, !dbg !4390

if.end55:                                         ; preds = %if.then52, %if.then48
  %operands56 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %vr1, i32 0, i32 5, !dbg !4391
  %32 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands56, align 8, !dbg !4391
  %33 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands.addr, align 8, !dbg !4393
  %cmp = icmp ne %struct.VEC_vn_reference_op_s_heap* %32, %33, !dbg !4394
  br i1 %cmp, label %if.then58, label %if.end60, !dbg !4395

if.then58:                                        ; preds = %if.end55
  %operands59 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %vr1, i32 0, i32 5, !dbg !4396
  call void @VEC_vn_reference_op_s_heap_free(%struct.VEC_vn_reference_op_s_heap** %operands59), !dbg !4396
  br label %if.end60, !dbg !4396

if.end60:                                         ; preds = %if.then58, %if.end55
  br label %if.end61, !dbg !4397

if.end61:                                         ; preds = %if.end60, %land.lhs.true45, %land.lhs.true, %cond.end33
  %34 = load %struct.vn_reference_s**, %struct.vn_reference_s*** %vnresult.addr, align 8, !dbg !4398
  %35 = load %struct.vn_reference_s*, %struct.vn_reference_s** %34, align 8, !dbg !4400
  %tobool62 = icmp ne %struct.vn_reference_s* %35, null, !dbg !4400
  br i1 %tobool62, label %if.then63, label %if.end64, !dbg !4401

if.then63:                                        ; preds = %if.end61
  %36 = load %struct.vn_reference_s**, %struct.vn_reference_s*** %vnresult.addr, align 8, !dbg !4402
  %37 = load %struct.vn_reference_s*, %struct.vn_reference_s** %36, align 8, !dbg !4403
  %result = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %37, i32 0, i32 6, !dbg !4404
  %38 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !4404
  store %union.tree_node* %38, %union.tree_node** %retval, align 8, !dbg !4405
  br label %return, !dbg !4405

if.end64:                                         ; preds = %if.end61
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4406
  br label %return, !dbg !4406

return:                                           ; preds = %if.end64, %if.then63
  %39 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !4407
  ret %union.tree_node* %39, !dbg !4407
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_vn_reference_op_s_base_truncate(%struct.VEC_vn_reference_op_s_base* %vec_, i32 %size_) #0 !dbg !4408 {
entry:
  %vec_.addr = alloca %struct.VEC_vn_reference_op_s_base*, align 8
  %size_.addr = alloca i32, align 4
  store %struct.VEC_vn_reference_op_s_base* %vec_, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_reference_op_s_base** %vec_.addr, metadata !4409, metadata !DIExpression()), !dbg !4410
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !4411, metadata !DIExpression()), !dbg !4410
  %0 = load %struct.VEC_vn_reference_op_s_base*, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8, !dbg !4410
  %tobool = icmp ne %struct.VEC_vn_reference_op_s_base* %0, null, !dbg !4410
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4410

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_vn_reference_op_s_base*, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8, !dbg !4410
  %num = getelementptr inbounds %struct.VEC_vn_reference_op_s_base, %struct.VEC_vn_reference_op_s_base* %1, i32 0, i32 0, !dbg !4410
  %2 = load i32, i32* %num, align 8, !dbg !4410
  %3 = load i32, i32* %size_.addr, align 4, !dbg !4410
  %cmp = icmp uge i32 %2, %3, !dbg !4410
  %conv = zext i1 %cmp to i32, !dbg !4410
  br label %cond.end, !dbg !4410

cond.false:                                       ; preds = %entry
  %4 = load i32, i32* %size_.addr, align 4, !dbg !4410
  %tobool1 = icmp ne i32 %4, 0, !dbg !4410
  %lnot = xor i1 %tobool1, true, !dbg !4410
  %lnot.ext = zext i1 %lnot to i32, !dbg !4410
  br label %cond.end, !dbg !4410

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !4410
  %5 = load %struct.VEC_vn_reference_op_s_base*, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8, !dbg !4412
  %tobool2 = icmp ne %struct.VEC_vn_reference_op_s_base* %5, null, !dbg !4412
  br i1 %tobool2, label %if.then, label %if.end, !dbg !4410

if.then:                                          ; preds = %cond.end
  %6 = load i32, i32* %size_.addr, align 4, !dbg !4412
  %7 = load %struct.VEC_vn_reference_op_s_base*, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8, !dbg !4412
  %num3 = getelementptr inbounds %struct.VEC_vn_reference_op_s_base, %struct.VEC_vn_reference_op_s_base* %7, i32 0, i32 0, !dbg !4412
  store i32 %6, i32* %num3, align 8, !dbg !4412
  br label %if.end, !dbg !4412

if.end:                                           ; preds = %if.then, %cond.end
  ret void, !dbg !4410
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_vn_reference_op_s_heap_safe_grow(%struct.VEC_vn_reference_op_s_heap** %vec_, i32 %size_) #0 !dbg !4414 {
entry:
  %vec_.addr = alloca %struct.VEC_vn_reference_op_s_heap**, align 8
  %size_.addr = alloca i32, align 4
  store %struct.VEC_vn_reference_op_s_heap** %vec_, %struct.VEC_vn_reference_op_s_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_reference_op_s_heap*** %vec_.addr, metadata !4417, metadata !DIExpression()), !dbg !4418
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !4419, metadata !DIExpression()), !dbg !4418
  %0 = load i32, i32* %size_.addr, align 4, !dbg !4418
  %cmp = icmp sge i32 %0, 0, !dbg !4418
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !4418

land.rhs:                                         ; preds = %entry
  %1 = load %struct.VEC_vn_reference_op_s_heap**, %struct.VEC_vn_reference_op_s_heap*** %vec_.addr, align 8, !dbg !4418
  %2 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %1, align 8, !dbg !4418
  %tobool = icmp ne %struct.VEC_vn_reference_op_s_heap* %2, null, !dbg !4418
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4418

cond.true:                                        ; preds = %land.rhs
  %3 = load %struct.VEC_vn_reference_op_s_heap**, %struct.VEC_vn_reference_op_s_heap*** %vec_.addr, align 8, !dbg !4418
  %4 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %3, align 8, !dbg !4418
  %base = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %4, i32 0, i32 0, !dbg !4418
  br label %cond.end, !dbg !4418

cond.false:                                       ; preds = %land.rhs
  br label %cond.end, !dbg !4418

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_vn_reference_op_s_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4418
  %call = call i32 @VEC_vn_reference_op_s_base_length(%struct.VEC_vn_reference_op_s_base* %cond), !dbg !4418
  %5 = load i32, i32* %size_.addr, align 4, !dbg !4418
  %cmp1 = icmp ule i32 %call, %5, !dbg !4418
  br label %land.end

land.end:                                         ; preds = %cond.end, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %cond.end ], !dbg !4420
  %land.ext = zext i1 %6 to i32, !dbg !4418
  %7 = load %struct.VEC_vn_reference_op_s_heap**, %struct.VEC_vn_reference_op_s_heap*** %vec_.addr, align 8, !dbg !4418
  %8 = load i32, i32* %size_.addr, align 4, !dbg !4418
  %9 = load %struct.VEC_vn_reference_op_s_heap**, %struct.VEC_vn_reference_op_s_heap*** %vec_.addr, align 8, !dbg !4418
  %10 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %9, align 8, !dbg !4418
  %tobool2 = icmp ne %struct.VEC_vn_reference_op_s_heap* %10, null, !dbg !4418
  br i1 %tobool2, label %cond.true3, label %cond.false10, !dbg !4418

cond.true3:                                       ; preds = %land.end
  %11 = load %struct.VEC_vn_reference_op_s_heap**, %struct.VEC_vn_reference_op_s_heap*** %vec_.addr, align 8, !dbg !4418
  %12 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %11, align 8, !dbg !4418
  %tobool4 = icmp ne %struct.VEC_vn_reference_op_s_heap* %12, null, !dbg !4418
  br i1 %tobool4, label %cond.true5, label %cond.false7, !dbg !4418

cond.true5:                                       ; preds = %cond.true3
  %13 = load %struct.VEC_vn_reference_op_s_heap**, %struct.VEC_vn_reference_op_s_heap*** %vec_.addr, align 8, !dbg !4418
  %14 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %13, align 8, !dbg !4418
  %base6 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %14, i32 0, i32 0, !dbg !4418
  br label %cond.end8, !dbg !4418

cond.false7:                                      ; preds = %cond.true3
  br label %cond.end8, !dbg !4418

cond.end8:                                        ; preds = %cond.false7, %cond.true5
  %cond9 = phi %struct.VEC_vn_reference_op_s_base* [ %base6, %cond.true5 ], [ null, %cond.false7 ], !dbg !4418
  %num = getelementptr inbounds %struct.VEC_vn_reference_op_s_base, %struct.VEC_vn_reference_op_s_base* %cond9, i32 0, i32 0, !dbg !4418
  %15 = load i32, i32* %num, align 8, !dbg !4418
  br label %cond.end11, !dbg !4418

cond.false10:                                     ; preds = %land.end
  br label %cond.end11, !dbg !4418

cond.end11:                                       ; preds = %cond.false10, %cond.end8
  %cond12 = phi i32 [ %15, %cond.end8 ], [ 0, %cond.false10 ], !dbg !4418
  %sub = sub nsw i32 %8, %cond12, !dbg !4418
  %call13 = call i32 @VEC_vn_reference_op_s_heap_reserve_exact(%struct.VEC_vn_reference_op_s_heap** %7, i32 %sub), !dbg !4418
  %16 = load i32, i32* %size_.addr, align 4, !dbg !4418
  %17 = load %struct.VEC_vn_reference_op_s_heap**, %struct.VEC_vn_reference_op_s_heap*** %vec_.addr, align 8, !dbg !4418
  %18 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %17, align 8, !dbg !4418
  %tobool14 = icmp ne %struct.VEC_vn_reference_op_s_heap* %18, null, !dbg !4418
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !4418

cond.true15:                                      ; preds = %cond.end11
  %19 = load %struct.VEC_vn_reference_op_s_heap**, %struct.VEC_vn_reference_op_s_heap*** %vec_.addr, align 8, !dbg !4418
  %20 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %19, align 8, !dbg !4418
  %base16 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %20, i32 0, i32 0, !dbg !4418
  br label %cond.end18, !dbg !4418

cond.false17:                                     ; preds = %cond.end11
  br label %cond.end18, !dbg !4418

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_vn_reference_op_s_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !4418
  %num20 = getelementptr inbounds %struct.VEC_vn_reference_op_s_base, %struct.VEC_vn_reference_op_s_base* %cond19, i32 0, i32 0, !dbg !4418
  store i32 %16, i32* %num20, align 8, !dbg !4418
  ret void, !dbg !4418
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.vn_reference_op_struct* @VEC_vn_reference_op_s_base_address(%struct.VEC_vn_reference_op_s_base* %vec_) #0 !dbg !4421 {
entry:
  %vec_.addr = alloca %struct.VEC_vn_reference_op_s_base*, align 8
  store %struct.VEC_vn_reference_op_s_base* %vec_, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_reference_op_s_base** %vec_.addr, metadata !4424, metadata !DIExpression()), !dbg !4425
  %0 = load %struct.VEC_vn_reference_op_s_base*, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8, !dbg !4425
  %tobool = icmp ne %struct.VEC_vn_reference_op_s_base* %0, null, !dbg !4425
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4425

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_vn_reference_op_s_base*, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8, !dbg !4425
  %vec = getelementptr inbounds %struct.VEC_vn_reference_op_s_base, %struct.VEC_vn_reference_op_s_base* %1, i32 0, i32 2, !dbg !4425
  %arraydecay = getelementptr inbounds [1 x %struct.vn_reference_op_struct], [1 x %struct.vn_reference_op_struct]* %vec, i64 0, i64 0, !dbg !4425
  br label %cond.end, !dbg !4425

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4425

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.vn_reference_op_struct* [ %arraydecay, %cond.true ], [ null, %cond.false ], !dbg !4425
  ret %struct.vn_reference_op_struct* %cond, !dbg !4425
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_vn_reference_op_s_heap* @valueize_refs(%struct.VEC_vn_reference_op_s_heap* %orig) #0 !dbg !4426 {
entry:
  %orig.addr = alloca %struct.VEC_vn_reference_op_s_heap*, align 8
  %vro = alloca %struct.vn_reference_op_struct*, align 8
  %i = alloca i32, align 4
  store %struct.VEC_vn_reference_op_s_heap* %orig, %struct.VEC_vn_reference_op_s_heap** %orig.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_reference_op_s_heap** %orig.addr, metadata !4429, metadata !DIExpression()), !dbg !4430
  call void @llvm.dbg.declare(metadata %struct.vn_reference_op_struct** %vro, metadata !4431, metadata !DIExpression()), !dbg !4432
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4433, metadata !DIExpression()), !dbg !4434
  store i32 0, i32* %i, align 4, !dbg !4435
  br label %for.cond, !dbg !4437

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %orig.addr, align 8, !dbg !4438
  %tobool = icmp ne %struct.VEC_vn_reference_op_s_heap* %0, null, !dbg !4438
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4438

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %orig.addr, align 8, !dbg !4438
  %base = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %1, i32 0, i32 0, !dbg !4438
  br label %cond.end, !dbg !4438

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !4438

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_vn_reference_op_s_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4438
  %2 = load i32, i32* %i, align 4, !dbg !4438
  %call = call i32 @VEC_vn_reference_op_s_base_iterate(%struct.VEC_vn_reference_op_s_base* %cond, i32 %2, %struct.vn_reference_op_struct** %vro), !dbg !4438
  %tobool1 = icmp ne i32 %call, 0, !dbg !4440
  br i1 %tobool1, label %for.body, label %for.end, !dbg !4440

for.body:                                         ; preds = %cond.end
  %3 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro, align 8, !dbg !4441
  %opcode = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %3, i32 0, i32 0, !dbg !4444
  %4 = load i32, i32* %opcode, align 8, !dbg !4444
  %cmp = icmp eq i32 %4, 141, !dbg !4445
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !4446

lor.lhs.false:                                    ; preds = %for.body
  %5 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro, align 8, !dbg !4447
  %op0 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %5, i32 0, i32 2, !dbg !4448
  %6 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !4448
  %tobool2 = icmp ne %union.tree_node* %6, null, !dbg !4447
  br i1 %tobool2, label %land.lhs.true, label %if.end45, !dbg !4449

land.lhs.true:                                    ; preds = %lor.lhs.false
  %7 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro, align 8, !dbg !4450
  %op03 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %7, i32 0, i32 2, !dbg !4450
  %8 = load %union.tree_node*, %union.tree_node** %op03, align 8, !dbg !4450
  %base4 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !4450
  %9 = bitcast %struct.tree_base* %base4 to i64*, !dbg !4450
  %bf.load = load i64, i64* %9, align 8, !dbg !4450
  %bf.clear = and i64 %bf.load, 65535, !dbg !4450
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4450
  %cmp5 = icmp eq i32 %bf.cast, 141, !dbg !4451
  br i1 %cmp5, label %if.then, label %if.end45, !dbg !4452

if.then:                                          ; preds = %land.lhs.true, %for.body
  %10 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro, align 8, !dbg !4453
  %op06 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %10, i32 0, i32 2, !dbg !4453
  %11 = load %union.tree_node*, %union.tree_node** %op06, align 8, !dbg !4453
  %call7 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %11), !dbg !4453
  %valnum = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call7, i32 0, i32 0, !dbg !4453
  %12 = load %union.tree_node*, %union.tree_node** %valnum, align 8, !dbg !4453
  %13 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro, align 8, !dbg !4455
  %op08 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %13, i32 0, i32 2, !dbg !4456
  store %union.tree_node* %12, %union.tree_node** %op08, align 8, !dbg !4457
  %14 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro, align 8, !dbg !4458
  %op09 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %14, i32 0, i32 2, !dbg !4458
  %15 = load %union.tree_node*, %union.tree_node** %op09, align 8, !dbg !4458
  %base10 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !4458
  %16 = bitcast %struct.tree_base* %base10 to i64*, !dbg !4458
  %bf.load11 = load i64, i64* %16, align 8, !dbg !4458
  %bf.clear12 = and i64 %bf.load11, 65535, !dbg !4458
  %bf.cast13 = trunc i64 %bf.clear12 to i32, !dbg !4458
  %cmp14 = icmp ne i32 %bf.cast13, 141, !dbg !4460
  br i1 %cmp14, label %land.lhs.true15, label %if.end, !dbg !4461

land.lhs.true15:                                  ; preds = %if.then
  %17 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro, align 8, !dbg !4462
  %opcode16 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %17, i32 0, i32 0, !dbg !4463
  %18 = load i32, i32* %opcode16, align 8, !dbg !4463
  %cmp17 = icmp eq i32 %18, 141, !dbg !4464
  br i1 %cmp17, label %if.then18, label %if.end, !dbg !4465

if.then18:                                        ; preds = %land.lhs.true15
  %19 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro, align 8, !dbg !4466
  %op019 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %19, i32 0, i32 2, !dbg !4466
  %20 = load %union.tree_node*, %union.tree_node** %op019, align 8, !dbg !4466
  %base20 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !4466
  %21 = bitcast %struct.tree_base* %base20 to i64*, !dbg !4466
  %bf.load21 = load i64, i64* %21, align 8, !dbg !4466
  %bf.clear22 = and i64 %bf.load21, 65535, !dbg !4466
  %bf.cast23 = trunc i64 %bf.clear22 to i32, !dbg !4466
  %22 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro, align 8, !dbg !4467
  %opcode24 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %22, i32 0, i32 0, !dbg !4468
  store i32 %bf.cast23, i32* %opcode24, align 8, !dbg !4469
  br label %if.end, !dbg !4467

if.end:                                           ; preds = %if.then18, %land.lhs.true15, %if.then
  %23 = load i32, i32* %i, align 4, !dbg !4470
  %cmp25 = icmp ugt i32 %23, 0, !dbg !4472
  br i1 %cmp25, label %land.lhs.true26, label %if.end44, !dbg !4473

land.lhs.true26:                                  ; preds = %if.end
  %24 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro, align 8, !dbg !4474
  %op027 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %24, i32 0, i32 2, !dbg !4474
  %25 = load %union.tree_node*, %union.tree_node** %op027, align 8, !dbg !4474
  %base28 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !4474
  %26 = bitcast %struct.tree_base* %base28 to i64*, !dbg !4474
  %bf.load29 = load i64, i64* %26, align 8, !dbg !4474
  %bf.clear30 = and i64 %bf.load29, 65535, !dbg !4474
  %bf.cast31 = trunc i64 %bf.clear30 to i32, !dbg !4474
  %cmp32 = icmp eq i32 %bf.cast31, 121, !dbg !4475
  br i1 %cmp32, label %land.lhs.true33, label %if.end44, !dbg !4476

land.lhs.true33:                                  ; preds = %land.lhs.true26
  %27 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %orig.addr, align 8, !dbg !4477
  %tobool34 = icmp ne %struct.VEC_vn_reference_op_s_heap* %27, null, !dbg !4477
  br i1 %tobool34, label %cond.true35, label %cond.false37, !dbg !4477

cond.true35:                                      ; preds = %land.lhs.true33
  %28 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %orig.addr, align 8, !dbg !4477
  %base36 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %28, i32 0, i32 0, !dbg !4477
  br label %cond.end38, !dbg !4477

cond.false37:                                     ; preds = %land.lhs.true33
  br label %cond.end38, !dbg !4477

cond.end38:                                       ; preds = %cond.false37, %cond.true35
  %cond39 = phi %struct.VEC_vn_reference_op_s_base* [ %base36, %cond.true35 ], [ null, %cond.false37 ], !dbg !4477
  %29 = load i32, i32* %i, align 4, !dbg !4477
  %sub = sub i32 %29, 1, !dbg !4477
  %call40 = call %struct.vn_reference_op_struct* @VEC_vn_reference_op_s_base_index(%struct.VEC_vn_reference_op_s_base* %cond39, i32 %sub), !dbg !4477
  %opcode41 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %call40, i32 0, i32 0, !dbg !4478
  %30 = load i32, i32* %opcode41, align 8, !dbg !4478
  %cmp42 = icmp eq i32 %30, 47, !dbg !4479
  br i1 %cmp42, label %if.then43, label %if.end44, !dbg !4480

if.then43:                                        ; preds = %cond.end38
  call void @vn_reference_fold_indirect(%struct.VEC_vn_reference_op_s_heap** %orig.addr, i32* %i), !dbg !4481
  br label %for.inc, !dbg !4483

if.end44:                                         ; preds = %cond.end38, %land.lhs.true26, %if.end
  br label %if.end45, !dbg !4484

if.end45:                                         ; preds = %if.end44, %land.lhs.true, %lor.lhs.false
  %31 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro, align 8, !dbg !4485
  %op1 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %31, i32 0, i32 3, !dbg !4487
  %32 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !4487
  %tobool46 = icmp ne %union.tree_node* %32, null, !dbg !4485
  br i1 %tobool46, label %land.lhs.true47, label %if.end59, !dbg !4488

land.lhs.true47:                                  ; preds = %if.end45
  %33 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro, align 8, !dbg !4489
  %op148 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %33, i32 0, i32 3, !dbg !4489
  %34 = load %union.tree_node*, %union.tree_node** %op148, align 8, !dbg !4489
  %base49 = bitcast %union.tree_node* %34 to %struct.tree_base*, !dbg !4489
  %35 = bitcast %struct.tree_base* %base49 to i64*, !dbg !4489
  %bf.load50 = load i64, i64* %35, align 8, !dbg !4489
  %bf.clear51 = and i64 %bf.load50, 65535, !dbg !4489
  %bf.cast52 = trunc i64 %bf.clear51 to i32, !dbg !4489
  %cmp53 = icmp eq i32 %bf.cast52, 141, !dbg !4490
  br i1 %cmp53, label %if.then54, label %if.end59, !dbg !4491

if.then54:                                        ; preds = %land.lhs.true47
  %36 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro, align 8, !dbg !4492
  %op155 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %36, i32 0, i32 3, !dbg !4492
  %37 = load %union.tree_node*, %union.tree_node** %op155, align 8, !dbg !4492
  %call56 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %37), !dbg !4492
  %valnum57 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call56, i32 0, i32 0, !dbg !4492
  %38 = load %union.tree_node*, %union.tree_node** %valnum57, align 8, !dbg !4492
  %39 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro, align 8, !dbg !4493
  %op158 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %39, i32 0, i32 3, !dbg !4494
  store %union.tree_node* %38, %union.tree_node** %op158, align 8, !dbg !4495
  br label %if.end59, !dbg !4493

if.end59:                                         ; preds = %if.then54, %land.lhs.true47, %if.end45
  %40 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro, align 8, !dbg !4496
  %op2 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %40, i32 0, i32 4, !dbg !4498
  %41 = load %union.tree_node*, %union.tree_node** %op2, align 8, !dbg !4498
  %tobool60 = icmp ne %union.tree_node* %41, null, !dbg !4496
  br i1 %tobool60, label %land.lhs.true61, label %if.end73, !dbg !4499

land.lhs.true61:                                  ; preds = %if.end59
  %42 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro, align 8, !dbg !4500
  %op262 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %42, i32 0, i32 4, !dbg !4500
  %43 = load %union.tree_node*, %union.tree_node** %op262, align 8, !dbg !4500
  %base63 = bitcast %union.tree_node* %43 to %struct.tree_base*, !dbg !4500
  %44 = bitcast %struct.tree_base* %base63 to i64*, !dbg !4500
  %bf.load64 = load i64, i64* %44, align 8, !dbg !4500
  %bf.clear65 = and i64 %bf.load64, 65535, !dbg !4500
  %bf.cast66 = trunc i64 %bf.clear65 to i32, !dbg !4500
  %cmp67 = icmp eq i32 %bf.cast66, 141, !dbg !4501
  br i1 %cmp67, label %if.then68, label %if.end73, !dbg !4502

if.then68:                                        ; preds = %land.lhs.true61
  %45 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro, align 8, !dbg !4503
  %op269 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %45, i32 0, i32 4, !dbg !4503
  %46 = load %union.tree_node*, %union.tree_node** %op269, align 8, !dbg !4503
  %call70 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %46), !dbg !4503
  %valnum71 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call70, i32 0, i32 0, !dbg !4503
  %47 = load %union.tree_node*, %union.tree_node** %valnum71, align 8, !dbg !4503
  %48 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro, align 8, !dbg !4504
  %op272 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %48, i32 0, i32 4, !dbg !4505
  store %union.tree_node* %47, %union.tree_node** %op272, align 8, !dbg !4506
  br label %if.end73, !dbg !4504

if.end73:                                         ; preds = %if.then68, %land.lhs.true61, %if.end59
  br label %for.inc, !dbg !4507

for.inc:                                          ; preds = %if.end73, %if.then43
  %49 = load i32, i32* %i, align 4, !dbg !4508
  %inc = add i32 %49, 1, !dbg !4508
  store i32 %inc, i32* %i, align 4, !dbg !4508
  br label %for.cond, !dbg !4509, !llvm.loop !4510

for.end:                                          ; preds = %cond.end
  %50 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %orig.addr, align 8, !dbg !4512
  ret %struct.VEC_vn_reference_op_s_heap* %50, !dbg !4513
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @vn_reference_lookup_1(%struct.vn_reference_s* %vr, %struct.vn_reference_s** %vnresult) #0 !dbg !4514 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %vr.addr = alloca %struct.vn_reference_s*, align 8
  %vnresult.addr = alloca %struct.vn_reference_s**, align 8
  %slot = alloca i8**, align 8
  %hash = alloca i32, align 4
  store %struct.vn_reference_s* %vr, %struct.vn_reference_s** %vr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.vn_reference_s** %vr.addr, metadata !4517, metadata !DIExpression()), !dbg !4518
  store %struct.vn_reference_s** %vnresult, %struct.vn_reference_s*** %vnresult.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.vn_reference_s*** %vnresult.addr, metadata !4519, metadata !DIExpression()), !dbg !4520
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !4521, metadata !DIExpression()), !dbg !4522
  call void @llvm.dbg.declare(metadata i32* %hash, metadata !4523, metadata !DIExpression()), !dbg !4524
  %0 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr.addr, align 8, !dbg !4525
  %hashcode = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %0, i32 0, i32 1, !dbg !4526
  %1 = load i32, i32* %hashcode, align 4, !dbg !4526
  store i32 %1, i32* %hash, align 4, !dbg !4527
  %2 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !4528
  %references = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %2, i32 0, i32 2, !dbg !4529
  %3 = load %struct.htab*, %struct.htab** %references, align 8, !dbg !4529
  %4 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr.addr, align 8, !dbg !4530
  %5 = bitcast %struct.vn_reference_s* %4 to i8*, !dbg !4530
  %6 = load i32, i32* %hash, align 4, !dbg !4531
  %call = call i8** @htab_find_slot_with_hash(%struct.htab* %3, i8* %5, i32 %6, i32 0), !dbg !4532
  store i8** %call, i8*** %slot, align 8, !dbg !4533
  %7 = load i8**, i8*** %slot, align 8, !dbg !4534
  %tobool = icmp ne i8** %7, null, !dbg !4534
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !4536

land.lhs.true:                                    ; preds = %entry
  %8 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !4537
  %9 = load %struct.vn_tables_s*, %struct.vn_tables_s** @optimistic_info, align 8, !dbg !4538
  %cmp = icmp eq %struct.vn_tables_s* %8, %9, !dbg !4539
  br i1 %cmp, label %if.then, label %if.end, !dbg !4540

if.then:                                          ; preds = %land.lhs.true
  %10 = load %struct.vn_tables_s*, %struct.vn_tables_s** @valid_info, align 8, !dbg !4541
  %references1 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %10, i32 0, i32 2, !dbg !4542
  %11 = load %struct.htab*, %struct.htab** %references1, align 8, !dbg !4542
  %12 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr.addr, align 8, !dbg !4543
  %13 = bitcast %struct.vn_reference_s* %12 to i8*, !dbg !4543
  %14 = load i32, i32* %hash, align 4, !dbg !4544
  %call2 = call i8** @htab_find_slot_with_hash(%struct.htab* %11, i8* %13, i32 %14, i32 0), !dbg !4545
  store i8** %call2, i8*** %slot, align 8, !dbg !4546
  br label %if.end, !dbg !4547

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %15 = load i8**, i8*** %slot, align 8, !dbg !4548
  %tobool3 = icmp ne i8** %15, null, !dbg !4548
  br i1 %tobool3, label %if.then4, label %if.end8, !dbg !4550

if.then4:                                         ; preds = %if.end
  %16 = load %struct.vn_reference_s**, %struct.vn_reference_s*** %vnresult.addr, align 8, !dbg !4551
  %tobool5 = icmp ne %struct.vn_reference_s** %16, null, !dbg !4551
  br i1 %tobool5, label %if.then6, label %if.end7, !dbg !4554

if.then6:                                         ; preds = %if.then4
  %17 = load i8**, i8*** %slot, align 8, !dbg !4555
  %18 = load i8*, i8** %17, align 8, !dbg !4556
  %19 = bitcast i8* %18 to %struct.vn_reference_s*, !dbg !4557
  %20 = load %struct.vn_reference_s**, %struct.vn_reference_s*** %vnresult.addr, align 8, !dbg !4558
  store %struct.vn_reference_s* %19, %struct.vn_reference_s** %20, align 8, !dbg !4559
  br label %if.end7, !dbg !4560

if.end7:                                          ; preds = %if.then6, %if.then4
  %21 = load i8**, i8*** %slot, align 8, !dbg !4561
  %22 = load i8*, i8** %21, align 8, !dbg !4562
  %23 = bitcast i8* %22 to %struct.vn_reference_s*, !dbg !4563
  %result = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %23, i32 0, i32 6, !dbg !4564
  %24 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !4564
  store %union.tree_node* %24, %union.tree_node** %retval, align 8, !dbg !4565
  br label %return, !dbg !4565

if.end8:                                          ; preds = %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4566
  br label %return, !dbg !4566

return:                                           ; preds = %if.end8, %if.end7
  %25 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !4567
  ret %union.tree_node* %25, !dbg !4567
}

declare dso_local i8* @walk_non_aliased_vuses(%struct.ao_ref_s*, %union.tree_node*, i8* (%struct.ao_ref_s*, %union.tree_node*, i8*)*, i8* (%struct.ao_ref_s*, %union.tree_node*, i8*)*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i8* @vn_reference_lookup_2(%struct.ao_ref_s* %op, %union.tree_node* %vuse, i8* %vr_) #0 !dbg !4568 {
entry:
  %retval = alloca i8*, align 8
  %op.addr = alloca %struct.ao_ref_s*, align 8
  %vuse.addr = alloca %union.tree_node*, align 8
  %vr_.addr = alloca i8*, align 8
  %vr = alloca %struct.vn_reference_s*, align 8
  %slot = alloca i8**, align 8
  %hash = alloca i32, align 4
  store %struct.ao_ref_s* %op, %struct.ao_ref_s** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ao_ref_s** %op.addr, metadata !4571, metadata !DIExpression()), !dbg !4572
  store %union.tree_node* %vuse, %union.tree_node** %vuse.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %vuse.addr, metadata !4573, metadata !DIExpression()), !dbg !4574
  store i8* %vr_, i8** %vr_.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vr_.addr, metadata !4575, metadata !DIExpression()), !dbg !4576
  call void @llvm.dbg.declare(metadata %struct.vn_reference_s** %vr, metadata !4577, metadata !DIExpression()), !dbg !4578
  %0 = load i8*, i8** %vr_.addr, align 8, !dbg !4579
  %1 = bitcast i8* %0 to %struct.vn_reference_s*, !dbg !4580
  store %struct.vn_reference_s* %1, %struct.vn_reference_s** %vr, align 8, !dbg !4578
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !4581, metadata !DIExpression()), !dbg !4582
  call void @llvm.dbg.declare(metadata i32* %hash, metadata !4583, metadata !DIExpression()), !dbg !4584
  %2 = load %union.tree_node**, %union.tree_node*** @last_vuse_ptr, align 8, !dbg !4585
  %tobool = icmp ne %union.tree_node** %2, null, !dbg !4585
  br i1 %tobool, label %if.then, label %if.end, !dbg !4587

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %vuse.addr, align 8, !dbg !4588
  %4 = load %union.tree_node**, %union.tree_node*** @last_vuse_ptr, align 8, !dbg !4589
  store %union.tree_node* %3, %union.tree_node** %4, align 8, !dbg !4590
  br label %if.end, !dbg !4591

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr, align 8, !dbg !4592
  %vuse1 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %5, i32 0, i32 2, !dbg !4594
  %6 = load %union.tree_node*, %union.tree_node** %vuse1, align 8, !dbg !4594
  %tobool2 = icmp ne %union.tree_node* %6, null, !dbg !4592
  br i1 %tobool2, label %if.then3, label %if.end6, !dbg !4595

if.then3:                                         ; preds = %if.end
  %7 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr, align 8, !dbg !4596
  %hashcode = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %7, i32 0, i32 1, !dbg !4597
  %8 = load i32, i32* %hashcode, align 4, !dbg !4597
  %9 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr, align 8, !dbg !4598
  %vuse4 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %9, i32 0, i32 2, !dbg !4598
  %10 = load %union.tree_node*, %union.tree_node** %vuse4, align 8, !dbg !4598
  %ssa_name = bitcast %union.tree_node* %10 to %struct.tree_ssa_name*, !dbg !4598
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !4598
  %11 = load i32, i32* %version, align 8, !dbg !4598
  %sub = sub i32 %8, %11, !dbg !4599
  %12 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr, align 8, !dbg !4600
  %hashcode5 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %12, i32 0, i32 1, !dbg !4601
  store i32 %sub, i32* %hashcode5, align 4, !dbg !4602
  br label %if.end6, !dbg !4600

if.end6:                                          ; preds = %if.then3, %if.end
  %13 = load %union.tree_node*, %union.tree_node** %vuse.addr, align 8, !dbg !4603
  %call = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %13), !dbg !4603
  %valnum = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call, i32 0, i32 0, !dbg !4603
  %14 = load %union.tree_node*, %union.tree_node** %valnum, align 8, !dbg !4603
  %15 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr, align 8, !dbg !4604
  %vuse7 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %15, i32 0, i32 2, !dbg !4605
  store %union.tree_node* %14, %union.tree_node** %vuse7, align 8, !dbg !4606
  %16 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr, align 8, !dbg !4607
  %vuse8 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %16, i32 0, i32 2, !dbg !4609
  %17 = load %union.tree_node*, %union.tree_node** %vuse8, align 8, !dbg !4609
  %tobool9 = icmp ne %union.tree_node* %17, null, !dbg !4607
  br i1 %tobool9, label %if.then10, label %if.end16, !dbg !4610

if.then10:                                        ; preds = %if.end6
  %18 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr, align 8, !dbg !4611
  %hashcode11 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %18, i32 0, i32 1, !dbg !4612
  %19 = load i32, i32* %hashcode11, align 4, !dbg !4612
  %20 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr, align 8, !dbg !4613
  %vuse12 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %20, i32 0, i32 2, !dbg !4613
  %21 = load %union.tree_node*, %union.tree_node** %vuse12, align 8, !dbg !4613
  %ssa_name13 = bitcast %union.tree_node* %21 to %struct.tree_ssa_name*, !dbg !4613
  %version14 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name13, i32 0, i32 3, !dbg !4613
  %22 = load i32, i32* %version14, align 8, !dbg !4613
  %add = add i32 %19, %22, !dbg !4614
  %23 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr, align 8, !dbg !4615
  %hashcode15 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %23, i32 0, i32 1, !dbg !4616
  store i32 %add, i32* %hashcode15, align 4, !dbg !4617
  br label %if.end16, !dbg !4615

if.end16:                                         ; preds = %if.then10, %if.end6
  %24 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr, align 8, !dbg !4618
  %hashcode17 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %24, i32 0, i32 1, !dbg !4619
  %25 = load i32, i32* %hashcode17, align 4, !dbg !4619
  store i32 %25, i32* %hash, align 4, !dbg !4620
  %26 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !4621
  %references = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %26, i32 0, i32 2, !dbg !4622
  %27 = load %struct.htab*, %struct.htab** %references, align 8, !dbg !4622
  %28 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr, align 8, !dbg !4623
  %29 = bitcast %struct.vn_reference_s* %28 to i8*, !dbg !4623
  %30 = load i32, i32* %hash, align 4, !dbg !4624
  %call18 = call i8** @htab_find_slot_with_hash(%struct.htab* %27, i8* %29, i32 %30, i32 0), !dbg !4625
  store i8** %call18, i8*** %slot, align 8, !dbg !4626
  %31 = load i8**, i8*** %slot, align 8, !dbg !4627
  %tobool19 = icmp ne i8** %31, null, !dbg !4627
  br i1 %tobool19, label %if.end23, label %land.lhs.true, !dbg !4629

land.lhs.true:                                    ; preds = %if.end16
  %32 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !4630
  %33 = load %struct.vn_tables_s*, %struct.vn_tables_s** @optimistic_info, align 8, !dbg !4631
  %cmp = icmp eq %struct.vn_tables_s* %32, %33, !dbg !4632
  br i1 %cmp, label %if.then20, label %if.end23, !dbg !4633

if.then20:                                        ; preds = %land.lhs.true
  %34 = load %struct.vn_tables_s*, %struct.vn_tables_s** @valid_info, align 8, !dbg !4634
  %references21 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %34, i32 0, i32 2, !dbg !4635
  %35 = load %struct.htab*, %struct.htab** %references21, align 8, !dbg !4635
  %36 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr, align 8, !dbg !4636
  %37 = bitcast %struct.vn_reference_s* %36 to i8*, !dbg !4636
  %38 = load i32, i32* %hash, align 4, !dbg !4637
  %call22 = call i8** @htab_find_slot_with_hash(%struct.htab* %35, i8* %37, i32 %38, i32 0), !dbg !4638
  store i8** %call22, i8*** %slot, align 8, !dbg !4639
  br label %if.end23, !dbg !4640

if.end23:                                         ; preds = %if.then20, %land.lhs.true, %if.end16
  %39 = load i8**, i8*** %slot, align 8, !dbg !4641
  %tobool24 = icmp ne i8** %39, null, !dbg !4641
  br i1 %tobool24, label %if.then25, label %if.end26, !dbg !4643

if.then25:                                        ; preds = %if.end23
  %40 = load i8**, i8*** %slot, align 8, !dbg !4644
  %41 = load i8*, i8** %40, align 8, !dbg !4645
  store i8* %41, i8** %retval, align 8, !dbg !4646
  br label %return, !dbg !4646

if.end26:                                         ; preds = %if.end23
  store i8* null, i8** %retval, align 8, !dbg !4647
  br label %return, !dbg !4647

return:                                           ; preds = %if.end26, %if.then25
  %42 = load i8*, i8** %retval, align 8, !dbg !4648
  ret i8* %42, !dbg !4648
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @vn_reference_lookup_3(%struct.ao_ref_s* %ref, %union.tree_node* %vuse, i8* %vr_) #0 !dbg !4649 {
entry:
  %retval = alloca i8*, align 8
  %ref.addr = alloca %struct.ao_ref_s*, align 8
  %vuse.addr = alloca %union.tree_node*, align 8
  %vr_.addr = alloca i8*, align 8
  %vr = alloca %struct.vn_reference_s*, align 8
  %def_stmt = alloca %union.gimple_statement_d*, align 8
  %fndecl = alloca %union.tree_node*, align 8
  %base = alloca %union.tree_node*, align 8
  %offset = alloca i64, align 8
  %maxsize = alloca i64, align 8
  %ref2 = alloca %union.tree_node*, align 8
  %base2 = alloca %union.tree_node*, align 8
  %offset236 = alloca i64, align 8
  %size2 = alloca i64, align 8
  %maxsize2 = alloca i64, align 8
  %val = alloca %union.tree_node*, align 8
  %value_id = alloca i32, align 4
  %base295 = alloca %union.tree_node*, align 8
  %offset296 = alloca i64, align 8
  %size297 = alloca i64, align 8
  %maxsize298 = alloca i64, align 8
  %val112 = alloca %union.tree_node*, align 8
  %value_id115 = alloca i32, align 4
  %base2172 = alloca %union.tree_node*, align 8
  %offset2173 = alloca i64, align 8
  %size2174 = alloca i64, align 8
  %maxsize2175 = alloca i64, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %lhs = alloca %struct.VEC_vn_reference_op_s_heap*, align 8
  %rhs = alloca %struct.VEC_vn_reference_op_s_heap*, align 8
  %vro = alloca %struct.vn_reference_op_struct*, align 8
  %r = alloca %struct.ao_ref_s, align 8
  %old = alloca %struct.VEC_vn_reference_op_s_heap*, align 8
  store %struct.ao_ref_s* %ref, %struct.ao_ref_s** %ref.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ao_ref_s** %ref.addr, metadata !4650, metadata !DIExpression()), !dbg !4651
  store %union.tree_node* %vuse, %union.tree_node** %vuse.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %vuse.addr, metadata !4652, metadata !DIExpression()), !dbg !4653
  store i8* %vr_, i8** %vr_.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vr_.addr, metadata !4654, metadata !DIExpression()), !dbg !4655
  call void @llvm.dbg.declare(metadata %struct.vn_reference_s** %vr, metadata !4656, metadata !DIExpression()), !dbg !4657
  %0 = load i8*, i8** %vr_.addr, align 8, !dbg !4658
  %1 = bitcast i8* %0 to %struct.vn_reference_s*, !dbg !4659
  store %struct.vn_reference_s* %1, %struct.vn_reference_s** %vr, align 8, !dbg !4657
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %def_stmt, metadata !4660, metadata !DIExpression()), !dbg !4661
  %2 = load %union.tree_node*, %union.tree_node** %vuse.addr, align 8, !dbg !4662
  %ssa_name = bitcast %union.tree_node* %2 to %struct.tree_ssa_name*, !dbg !4662
  %def_stmt1 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !4662
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt1, align 8, !dbg !4662
  store %union.gimple_statement_d* %3, %union.gimple_statement_d** %def_stmt, align 8, !dbg !4661
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl, metadata !4663, metadata !DIExpression()), !dbg !4664
  call void @llvm.dbg.declare(metadata %union.tree_node** %base, metadata !4665, metadata !DIExpression()), !dbg !4666
  call void @llvm.dbg.declare(metadata i64* %offset, metadata !4667, metadata !DIExpression()), !dbg !4668
  call void @llvm.dbg.declare(metadata i64* %maxsize, metadata !4669, metadata !DIExpression()), !dbg !4670
  %4 = load %struct.ao_ref_s*, %struct.ao_ref_s** %ref.addr, align 8, !dbg !4671
  %call = call %union.tree_node* @ao_ref_base(%struct.ao_ref_s* %4), !dbg !4672
  store %union.tree_node* %call, %union.tree_node** %base, align 8, !dbg !4673
  %5 = load %struct.ao_ref_s*, %struct.ao_ref_s** %ref.addr, align 8, !dbg !4674
  %offset2 = getelementptr inbounds %struct.ao_ref_s, %struct.ao_ref_s* %5, i32 0, i32 2, !dbg !4675
  %6 = load i64, i64* %offset2, align 8, !dbg !4675
  store i64 %6, i64* %offset, align 8, !dbg !4676
  %7 = load %struct.ao_ref_s*, %struct.ao_ref_s** %ref.addr, align 8, !dbg !4677
  %max_size = getelementptr inbounds %struct.ao_ref_s, %struct.ao_ref_s* %7, i32 0, i32 4, !dbg !4678
  %8 = load i64, i64* %max_size, align 8, !dbg !4678
  store i64 %8, i64* %maxsize, align 8, !dbg !4679
  %9 = load i64, i64* %maxsize, align 8, !dbg !4680
  %cmp = icmp eq i64 %9, -1, !dbg !4682
  br i1 %cmp, label %if.then, label %if.end, !dbg !4683

if.then:                                          ; preds = %entry
  store i8* inttoptr (i64 -1 to i8*), i8** %retval, align 8, !dbg !4684
  br label %return, !dbg !4684

if.end:                                           ; preds = %entry
  %10 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr, align 8, !dbg !4685
  %type = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %10, i32 0, i32 4, !dbg !4687
  %11 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4687
  %call3 = call zeroext i8 @is_gimple_reg_type(%union.tree_node* %11), !dbg !4688
  %conv = zext i8 %call3 to i32, !dbg !4688
  %tobool = icmp ne i32 %conv, 0, !dbg !4688
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !4689

land.lhs.true:                                    ; preds = %if.end
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !4690
  %call4 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %12), !dbg !4691
  %conv5 = zext i8 %call4 to i32, !dbg !4691
  %tobool6 = icmp ne i32 %conv5, 0, !dbg !4691
  br i1 %tobool6, label %land.lhs.true7, label %if.else, !dbg !4692

land.lhs.true7:                                   ; preds = %land.lhs.true
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !4693
  %call8 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %13), !dbg !4694
  store %union.tree_node* %call8, %union.tree_node** %fndecl, align 8, !dbg !4695
  %tobool9 = icmp ne %union.tree_node* %call8, null, !dbg !4695
  br i1 %tobool9, label %land.lhs.true10, label %if.else, !dbg !4696

land.lhs.true10:                                  ; preds = %land.lhs.true7
  %14 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !4697
  %function_decl = bitcast %union.tree_node* %14 to %struct.tree_function_decl*, !dbg !4697
  %built_in_class = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !4697
  %bf.load = load i32, i32* %built_in_class, align 8, !dbg !4697
  %bf.lshr = lshr i32 %bf.load, 11, !dbg !4697
  %bf.clear = and i32 %bf.lshr, 3, !dbg !4697
  %cmp11 = icmp eq i32 %bf.clear, 3, !dbg !4698
  br i1 %cmp11, label %land.lhs.true13, label %if.else, !dbg !4699

land.lhs.true13:                                  ; preds = %land.lhs.true10
  %15 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !4700
  %function_decl14 = bitcast %union.tree_node* %15 to %struct.tree_function_decl*, !dbg !4700
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl14, i32 0, i32 5, !dbg !4700
  %bf.load15 = load i32, i32* %function_code, align 8, !dbg !4700
  %bf.clear16 = and i32 %bf.load15, 2047, !dbg !4700
  %cmp17 = icmp eq i32 %bf.clear16, 333, !dbg !4701
  br i1 %cmp17, label %land.lhs.true19, label %if.else, !dbg !4702

land.lhs.true19:                                  ; preds = %land.lhs.true13
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !4703
  %call20 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %16, i32 1), !dbg !4704
  %call21 = call i32 @integer_zerop(%union.tree_node* %call20), !dbg !4705
  %tobool22 = icmp ne i32 %call21, 0, !dbg !4705
  br i1 %tobool22, label %land.lhs.true23, label %if.else, !dbg !4706

land.lhs.true23:                                  ; preds = %land.lhs.true19
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !4707
  %call24 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %17, i32 2), !dbg !4708
  %call25 = call i32 @host_integerp(%union.tree_node* %call24, i32 1), !dbg !4709
  %tobool26 = icmp ne i32 %call25, 0, !dbg !4709
  br i1 %tobool26, label %land.lhs.true27, label %if.else, !dbg !4710

land.lhs.true27:                                  ; preds = %land.lhs.true23
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !4711
  %call28 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %18, i32 0), !dbg !4711
  %base29 = bitcast %union.tree_node* %call28 to %struct.tree_base*, !dbg !4711
  %19 = bitcast %struct.tree_base* %base29 to i64*, !dbg !4711
  %bf.load30 = load i64, i64* %19, align 8, !dbg !4711
  %bf.clear31 = and i64 %bf.load30, 65535, !dbg !4711
  %bf.cast = trunc i64 %bf.clear31 to i32, !dbg !4711
  %cmp32 = icmp eq i32 %bf.cast, 121, !dbg !4712
  br i1 %cmp32, label %if.then34, label %if.else, !dbg !4713

if.then34:                                        ; preds = %land.lhs.true27
  call void @llvm.dbg.declare(metadata %union.tree_node** %ref2, metadata !4714, metadata !DIExpression()), !dbg !4716
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !4717
  %call35 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %20, i32 0), !dbg !4717
  %exp = bitcast %union.tree_node* %call35 to %struct.tree_exp*, !dbg !4717
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !4717
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !4717
  %21 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !4717
  store %union.tree_node* %21, %union.tree_node** %ref2, align 8, !dbg !4716
  call void @llvm.dbg.declare(metadata %union.tree_node** %base2, metadata !4718, metadata !DIExpression()), !dbg !4719
  call void @llvm.dbg.declare(metadata i64* %offset236, metadata !4720, metadata !DIExpression()), !dbg !4721
  call void @llvm.dbg.declare(metadata i64* %size2, metadata !4722, metadata !DIExpression()), !dbg !4723
  call void @llvm.dbg.declare(metadata i64* %maxsize2, metadata !4724, metadata !DIExpression()), !dbg !4725
  %22 = load %union.tree_node*, %union.tree_node** %ref2, align 8, !dbg !4726
  %call37 = call %union.tree_node* @get_ref_base_and_extent(%union.tree_node* %22, i64* %offset236, i64* %size2, i64* %maxsize2), !dbg !4727
  store %union.tree_node* %call37, %union.tree_node** %base2, align 8, !dbg !4728
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !4729
  %call38 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %23, i32 2), !dbg !4729
  %int_cst = bitcast %union.tree_node* %call38 to %struct.tree_int_cst*, !dbg !4729
  %int_cst39 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !4729
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst39, i32 0, i32 0, !dbg !4729
  %24 = load i64, i64* %low, align 8, !dbg !4729
  %mul = mul i64 %24, 8, !dbg !4730
  store i64 %mul, i64* %size2, align 8, !dbg !4731
  %25 = load i64, i64* %size2, align 8, !dbg !4732
  %div = udiv i64 %25, 8, !dbg !4734
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !4735
  %call40 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %26, i32 2), !dbg !4735
  %int_cst41 = bitcast %union.tree_node* %call40 to %struct.tree_int_cst*, !dbg !4735
  %int_cst42 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst41, i32 0, i32 1, !dbg !4735
  %low43 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst42, i32 0, i32 0, !dbg !4735
  %27 = load i64, i64* %low43, align 8, !dbg !4735
  %cmp44 = icmp eq i64 %div, %27, !dbg !4736
  br i1 %cmp44, label %land.lhs.true46, label %if.end67, !dbg !4737

land.lhs.true46:                                  ; preds = %if.then34
  %28 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !4738
  %29 = load %union.tree_node*, %union.tree_node** %base2, align 8, !dbg !4739
  %call47 = call i32 @operand_equal_p(%union.tree_node* %28, %union.tree_node* %29, i32 0), !dbg !4740
  %tobool48 = icmp ne i32 %call47, 0, !dbg !4740
  br i1 %tobool48, label %land.lhs.true49, label %if.end67, !dbg !4741

land.lhs.true49:                                  ; preds = %land.lhs.true46
  %30 = load i64, i64* %offset236, align 8, !dbg !4742
  %31 = load i64, i64* %offset, align 8, !dbg !4743
  %cmp50 = icmp sle i64 %30, %31, !dbg !4744
  br i1 %cmp50, label %land.lhs.true52, label %if.end67, !dbg !4745

land.lhs.true52:                                  ; preds = %land.lhs.true49
  %32 = load i64, i64* %offset236, align 8, !dbg !4746
  %33 = load i64, i64* %size2, align 8, !dbg !4747
  %add = add nsw i64 %32, %33, !dbg !4748
  %34 = load i64, i64* %offset, align 8, !dbg !4749
  %35 = load i64, i64* %maxsize, align 8, !dbg !4750
  %add53 = add nsw i64 %34, %35, !dbg !4751
  %cmp54 = icmp sge i64 %add, %add53, !dbg !4752
  br i1 %cmp54, label %if.then56, label %if.end67, !dbg !4753

if.then56:                                        ; preds = %land.lhs.true52
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !4754, metadata !DIExpression()), !dbg !4756
  %36 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr, align 8, !dbg !4757
  %type57 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %36, i32 0, i32 4, !dbg !4757
  %37 = load %union.tree_node*, %union.tree_node** %type57, align 8, !dbg !4757
  %38 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !4757
  %call58 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %37, %union.tree_node* %38), !dbg !4757
  store %union.tree_node* %call58, %union.tree_node** %val, align 8, !dbg !4756
  call void @llvm.dbg.declare(metadata i32* %value_id, metadata !4758, metadata !DIExpression()), !dbg !4759
  %39 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !4760
  %call59 = call i32 @get_or_alloc_constant_value_id(%union.tree_node* %39), !dbg !4761
  store i32 %call59, i32* %value_id, align 4, !dbg !4759
  %40 = load %union.tree_node*, %union.tree_node** %vuse.addr, align 8, !dbg !4762
  %41 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr, align 8, !dbg !4763
  %set = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %41, i32 0, i32 3, !dbg !4764
  %42 = load i32, i32* %set, align 8, !dbg !4764
  %43 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr, align 8, !dbg !4765
  %type60 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %43, i32 0, i32 4, !dbg !4766
  %44 = load %union.tree_node*, %union.tree_node** %type60, align 8, !dbg !4766
  %45 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr, align 8, !dbg !4767
  %operands61 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %45, i32 0, i32 5, !dbg !4767
  %46 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands61, align 8, !dbg !4767
  %tobool62 = icmp ne %struct.VEC_vn_reference_op_s_heap* %46, null, !dbg !4767
  br i1 %tobool62, label %cond.true, label %cond.false, !dbg !4767

cond.true:                                        ; preds = %if.then56
  %47 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr, align 8, !dbg !4767
  %operands63 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %47, i32 0, i32 5, !dbg !4767
  %48 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands63, align 8, !dbg !4767
  %base64 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %48, i32 0, i32 0, !dbg !4767
  br label %cond.end, !dbg !4767

cond.false:                                       ; preds = %if.then56
  br label %cond.end, !dbg !4767

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_vn_reference_op_s_base* [ %base64, %cond.true ], [ null, %cond.false ], !dbg !4767
  %call65 = call %struct.VEC_vn_reference_op_s_heap* @VEC_vn_reference_op_s_heap_copy(%struct.VEC_vn_reference_op_s_base* %cond), !dbg !4767
  %49 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !4768
  %50 = load i32, i32* %value_id, align 4, !dbg !4769
  %call66 = call %struct.vn_reference_s* @vn_reference_insert_pieces(%union.tree_node* %40, i32 %42, %union.tree_node* %44, %struct.VEC_vn_reference_op_s_heap* %call65, %union.tree_node* %49, i32 %50), !dbg !4770
  %51 = bitcast %struct.vn_reference_s* %call66 to i8*, !dbg !4770
  store i8* %51, i8** %retval, align 8, !dbg !4771
  br label %return, !dbg !4771

if.end67:                                         ; preds = %land.lhs.true52, %land.lhs.true49, %land.lhs.true46, %if.then34
  br label %if.end330, !dbg !4772

if.else:                                          ; preds = %land.lhs.true27, %land.lhs.true23, %land.lhs.true19, %land.lhs.true13, %land.lhs.true10, %land.lhs.true7, %land.lhs.true, %if.end
  %52 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr, align 8, !dbg !4773
  %type68 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %52, i32 0, i32 4, !dbg !4775
  %53 = load %union.tree_node*, %union.tree_node** %type68, align 8, !dbg !4775
  %call69 = call zeroext i8 @is_gimple_reg_type(%union.tree_node* %53), !dbg !4776
  %conv70 = zext i8 %call69 to i32, !dbg !4776
  %tobool71 = icmp ne i32 %conv70, 0, !dbg !4776
  br i1 %tobool71, label %land.lhs.true72, label %if.else130, !dbg !4777

land.lhs.true72:                                  ; preds = %if.else
  %54 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !4778
  %call73 = call zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d* %54), !dbg !4779
  %conv74 = zext i8 %call73 to i32, !dbg !4779
  %tobool75 = icmp ne i32 %conv74, 0, !dbg !4779
  br i1 %tobool75, label %land.lhs.true76, label %if.else130, !dbg !4780

land.lhs.true76:                                  ; preds = %land.lhs.true72
  %55 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !4781
  %call77 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %55), !dbg !4782
  %cmp78 = icmp eq i32 %call77, 51, !dbg !4783
  br i1 %cmp78, label %land.lhs.true80, label %if.else130, !dbg !4784

land.lhs.true80:                                  ; preds = %land.lhs.true76
  %56 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !4785
  %call81 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %56), !dbg !4785
  %constructor = bitcast %union.tree_node* %call81 to %struct.tree_constructor*, !dbg !4785
  %elts = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor, i32 0, i32 1, !dbg !4785
  %57 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !4785
  %tobool82 = icmp ne %struct.VEC_constructor_elt_gc* %57, null, !dbg !4785
  br i1 %tobool82, label %cond.true83, label %cond.false88, !dbg !4785

cond.true83:                                      ; preds = %land.lhs.true80
  %58 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !4785
  %call84 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %58), !dbg !4785
  %constructor85 = bitcast %union.tree_node* %call84 to %struct.tree_constructor*, !dbg !4785
  %elts86 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor85, i32 0, i32 1, !dbg !4785
  %59 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts86, align 8, !dbg !4785
  %base87 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %59, i32 0, i32 0, !dbg !4785
  br label %cond.end89, !dbg !4785

cond.false88:                                     ; preds = %land.lhs.true80
  br label %cond.end89, !dbg !4785

cond.end89:                                       ; preds = %cond.false88, %cond.true83
  %cond90 = phi %struct.VEC_constructor_elt_base* [ %base87, %cond.true83 ], [ null, %cond.false88 ], !dbg !4785
  %call91 = call i32 @VEC_constructor_elt_base_length(%struct.VEC_constructor_elt_base* %cond90), !dbg !4785
  %cmp92 = icmp eq i32 %call91, 0, !dbg !4786
  br i1 %cmp92, label %if.then94, label %if.else130, !dbg !4787

if.then94:                                        ; preds = %cond.end89
  call void @llvm.dbg.declare(metadata %union.tree_node** %base295, metadata !4788, metadata !DIExpression()), !dbg !4790
  call void @llvm.dbg.declare(metadata i64* %offset296, metadata !4791, metadata !DIExpression()), !dbg !4792
  call void @llvm.dbg.declare(metadata i64* %size297, metadata !4793, metadata !DIExpression()), !dbg !4794
  call void @llvm.dbg.declare(metadata i64* %maxsize298, metadata !4795, metadata !DIExpression()), !dbg !4796
  %60 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !4797
  %call99 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %60), !dbg !4798
  %call100 = call %union.tree_node* @get_ref_base_and_extent(%union.tree_node* %call99, i64* %offset296, i64* %size297, i64* %maxsize298), !dbg !4799
  store %union.tree_node* %call100, %union.tree_node** %base295, align 8, !dbg !4800
  %61 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !4801
  %62 = load %union.tree_node*, %union.tree_node** %base295, align 8, !dbg !4803
  %call101 = call i32 @operand_equal_p(%union.tree_node* %61, %union.tree_node* %62, i32 0), !dbg !4804
  %tobool102 = icmp ne i32 %call101, 0, !dbg !4804
  br i1 %tobool102, label %land.lhs.true103, label %if.end129, !dbg !4805

land.lhs.true103:                                 ; preds = %if.then94
  %63 = load i64, i64* %offset296, align 8, !dbg !4806
  %64 = load i64, i64* %offset, align 8, !dbg !4807
  %cmp104 = icmp sle i64 %63, %64, !dbg !4808
  br i1 %cmp104, label %land.lhs.true106, label %if.end129, !dbg !4809

land.lhs.true106:                                 ; preds = %land.lhs.true103
  %65 = load i64, i64* %offset296, align 8, !dbg !4810
  %66 = load i64, i64* %size297, align 8, !dbg !4811
  %add107 = add nsw i64 %65, %66, !dbg !4812
  %67 = load i64, i64* %offset, align 8, !dbg !4813
  %68 = load i64, i64* %maxsize, align 8, !dbg !4814
  %add108 = add nsw i64 %67, %68, !dbg !4815
  %cmp109 = icmp sge i64 %add107, %add108, !dbg !4816
  br i1 %cmp109, label %if.then111, label %if.end129, !dbg !4817

if.then111:                                       ; preds = %land.lhs.true106
  call void @llvm.dbg.declare(metadata %union.tree_node** %val112, metadata !4818, metadata !DIExpression()), !dbg !4820
  %69 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr, align 8, !dbg !4821
  %type113 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %69, i32 0, i32 4, !dbg !4821
  %70 = load %union.tree_node*, %union.tree_node** %type113, align 8, !dbg !4821
  %71 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !4821
  %call114 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %70, %union.tree_node* %71), !dbg !4821
  store %union.tree_node* %call114, %union.tree_node** %val112, align 8, !dbg !4820
  call void @llvm.dbg.declare(metadata i32* %value_id115, metadata !4822, metadata !DIExpression()), !dbg !4823
  %72 = load %union.tree_node*, %union.tree_node** %val112, align 8, !dbg !4824
  %call116 = call i32 @get_or_alloc_constant_value_id(%union.tree_node* %72), !dbg !4825
  store i32 %call116, i32* %value_id115, align 4, !dbg !4823
  %73 = load %union.tree_node*, %union.tree_node** %vuse.addr, align 8, !dbg !4826
  %74 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr, align 8, !dbg !4827
  %set117 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %74, i32 0, i32 3, !dbg !4828
  %75 = load i32, i32* %set117, align 8, !dbg !4828
  %76 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr, align 8, !dbg !4829
  %type118 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %76, i32 0, i32 4, !dbg !4830
  %77 = load %union.tree_node*, %union.tree_node** %type118, align 8, !dbg !4830
  %78 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr, align 8, !dbg !4831
  %operands119 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %78, i32 0, i32 5, !dbg !4831
  %79 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands119, align 8, !dbg !4831
  %tobool120 = icmp ne %struct.VEC_vn_reference_op_s_heap* %79, null, !dbg !4831
  br i1 %tobool120, label %cond.true121, label %cond.false124, !dbg !4831

cond.true121:                                     ; preds = %if.then111
  %80 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr, align 8, !dbg !4831
  %operands122 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %80, i32 0, i32 5, !dbg !4831
  %81 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands122, align 8, !dbg !4831
  %base123 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %81, i32 0, i32 0, !dbg !4831
  br label %cond.end125, !dbg !4831

cond.false124:                                    ; preds = %if.then111
  br label %cond.end125, !dbg !4831

cond.end125:                                      ; preds = %cond.false124, %cond.true121
  %cond126 = phi %struct.VEC_vn_reference_op_s_base* [ %base123, %cond.true121 ], [ null, %cond.false124 ], !dbg !4831
  %call127 = call %struct.VEC_vn_reference_op_s_heap* @VEC_vn_reference_op_s_heap_copy(%struct.VEC_vn_reference_op_s_base* %cond126), !dbg !4831
  %82 = load %union.tree_node*, %union.tree_node** %val112, align 8, !dbg !4832
  %83 = load i32, i32* %value_id115, align 4, !dbg !4833
  %call128 = call %struct.vn_reference_s* @vn_reference_insert_pieces(%union.tree_node* %73, i32 %75, %union.tree_node* %77, %struct.VEC_vn_reference_op_s_heap* %call127, %union.tree_node* %82, i32 %83), !dbg !4834
  %84 = bitcast %struct.vn_reference_s* %call128 to i8*, !dbg !4834
  store i8* %84, i8** %retval, align 8, !dbg !4835
  br label %return, !dbg !4835

if.end129:                                        ; preds = %land.lhs.true106, %land.lhs.true103, %if.then94
  br label %if.end329, !dbg !4836

if.else130:                                       ; preds = %cond.end89, %land.lhs.true76, %land.lhs.true72, %if.else
  %85 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !4837
  %call131 = call zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d* %85), !dbg !4839
  %conv132 = zext i8 %call131 to i32, !dbg !4839
  %tobool133 = icmp ne i32 %conv132, 0, !dbg !4839
  br i1 %tobool133, label %land.lhs.true134, label %if.end328, !dbg !4840

land.lhs.true134:                                 ; preds = %if.else130
  %86 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !4841
  %call135 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %86), !dbg !4841
  %base136 = bitcast %union.tree_node* %call135 to %struct.tree_base*, !dbg !4841
  %87 = bitcast %struct.tree_base* %base136 to i64*, !dbg !4841
  %bf.load137 = load i64, i64* %87, align 8, !dbg !4841
  %bf.clear138 = and i64 %bf.load137, 65535, !dbg !4841
  %bf.cast139 = trunc i64 %bf.clear138 to i32, !dbg !4841
  %idxprom = sext i32 %bf.cast139 to i64, !dbg !4841
  %arrayidx140 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !4841
  %88 = load i32, i32* %arrayidx140, align 4, !dbg !4841
  %cmp141 = icmp eq i32 %88, 3, !dbg !4841
  br i1 %cmp141, label %if.then171, label %lor.lhs.false, !dbg !4842

lor.lhs.false:                                    ; preds = %land.lhs.true134
  %89 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !4843
  %call143 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %89), !dbg !4843
  %base144 = bitcast %union.tree_node* %call143 to %struct.tree_base*, !dbg !4843
  %90 = bitcast %struct.tree_base* %base144 to i64*, !dbg !4843
  %bf.load145 = load i64, i64* %90, align 8, !dbg !4843
  %bf.clear146 = and i64 %bf.load145, 65535, !dbg !4843
  %bf.cast147 = trunc i64 %bf.clear146 to i32, !dbg !4843
  %cmp148 = icmp eq i32 %bf.cast147, 47, !dbg !4843
  br i1 %cmp148, label %if.then171, label %lor.lhs.false150, !dbg !4843

lor.lhs.false150:                                 ; preds = %lor.lhs.false
  %91 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !4843
  %call151 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %91), !dbg !4843
  %base152 = bitcast %union.tree_node* %call151 to %struct.tree_base*, !dbg !4843
  %92 = bitcast %struct.tree_base* %base152 to i64*, !dbg !4843
  %bf.load153 = load i64, i64* %92, align 8, !dbg !4843
  %bf.clear154 = and i64 %bf.load153, 65535, !dbg !4843
  %bf.cast155 = trunc i64 %bf.clear154 to i32, !dbg !4843
  %cmp156 = icmp eq i32 %bf.cast155, 48, !dbg !4843
  br i1 %cmp156, label %if.then171, label %lor.lhs.false158, !dbg !4843

lor.lhs.false158:                                 ; preds = %lor.lhs.false150
  %93 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !4843
  %call159 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %93), !dbg !4843
  %base160 = bitcast %union.tree_node* %call159 to %struct.tree_base*, !dbg !4843
  %94 = bitcast %struct.tree_base* %base160 to i64*, !dbg !4843
  %bf.load161 = load i64, i64* %94, align 8, !dbg !4843
  %bf.clear162 = and i64 %bf.load161, 65535, !dbg !4843
  %bf.cast163 = trunc i64 %bf.clear162 to i32, !dbg !4843
  %cmp164 = icmp eq i32 %bf.cast163, 49, !dbg !4843
  br i1 %cmp164, label %if.then171, label %lor.lhs.false166, !dbg !4844

lor.lhs.false166:                                 ; preds = %lor.lhs.false158
  %95 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !4845
  %call167 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %95), !dbg !4846
  %call168 = call zeroext i8 @handled_component_p(%union.tree_node* %call167), !dbg !4847
  %conv169 = zext i8 %call168 to i32, !dbg !4847
  %tobool170 = icmp ne i32 %conv169, 0, !dbg !4847
  br i1 %tobool170, label %if.then171, label %if.end328, !dbg !4848

if.then171:                                       ; preds = %lor.lhs.false166, %lor.lhs.false158, %lor.lhs.false150, %lor.lhs.false, %land.lhs.true134
  call void @llvm.dbg.declare(metadata %union.tree_node** %base2172, metadata !4849, metadata !DIExpression()), !dbg !4851
  call void @llvm.dbg.declare(metadata i64* %offset2173, metadata !4852, metadata !DIExpression()), !dbg !4853
  call void @llvm.dbg.declare(metadata i64* %size2174, metadata !4854, metadata !DIExpression()), !dbg !4855
  call void @llvm.dbg.declare(metadata i64* %maxsize2175, metadata !4856, metadata !DIExpression()), !dbg !4857
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4858, metadata !DIExpression()), !dbg !4859
  call void @llvm.dbg.declare(metadata i32* %j, metadata !4860, metadata !DIExpression()), !dbg !4861
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_reference_op_s_heap** %lhs, metadata !4862, metadata !DIExpression()), !dbg !4863
  store %struct.VEC_vn_reference_op_s_heap* null, %struct.VEC_vn_reference_op_s_heap** %lhs, align 8, !dbg !4863
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_reference_op_s_heap** %rhs, metadata !4864, metadata !DIExpression()), !dbg !4865
  store %struct.VEC_vn_reference_op_s_heap* null, %struct.VEC_vn_reference_op_s_heap** %rhs, align 8, !dbg !4865
  call void @llvm.dbg.declare(metadata %struct.vn_reference_op_struct** %vro, metadata !4866, metadata !DIExpression()), !dbg !4867
  call void @llvm.dbg.declare(metadata %struct.ao_ref_s* %r, metadata !4868, metadata !DIExpression()), !dbg !4869
  %96 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !4870
  %call176 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %96), !dbg !4871
  %call177 = call %union.tree_node* @get_ref_base_and_extent(%union.tree_node* %call176, i64* %offset2173, i64* %size2174, i64* %maxsize2175), !dbg !4872
  store %union.tree_node* %call177, %union.tree_node** %base2172, align 8, !dbg !4873
  %97 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !4874
  %98 = load %union.tree_node*, %union.tree_node** %base2172, align 8, !dbg !4876
  %call178 = call i32 @operand_equal_p(%union.tree_node* %97, %union.tree_node* %98, i32 0), !dbg !4877
  %tobool179 = icmp ne i32 %call178, 0, !dbg !4877
  br i1 %tobool179, label %lor.lhs.false180, label %if.then188, !dbg !4878

lor.lhs.false180:                                 ; preds = %if.then171
  %99 = load i64, i64* %offset2173, align 8, !dbg !4879
  %100 = load i64, i64* %offset, align 8, !dbg !4880
  %cmp181 = icmp sgt i64 %99, %100, !dbg !4881
  br i1 %cmp181, label %if.then188, label %lor.lhs.false183, !dbg !4882

lor.lhs.false183:                                 ; preds = %lor.lhs.false180
  %101 = load i64, i64* %offset2173, align 8, !dbg !4883
  %102 = load i64, i64* %size2174, align 8, !dbg !4884
  %add184 = add nsw i64 %101, %102, !dbg !4885
  %103 = load i64, i64* %offset, align 8, !dbg !4886
  %104 = load i64, i64* %maxsize, align 8, !dbg !4887
  %add185 = add nsw i64 %103, %104, !dbg !4888
  %cmp186 = icmp slt i64 %add184, %add185, !dbg !4889
  br i1 %cmp186, label %if.then188, label %if.end189, !dbg !4890

if.then188:                                       ; preds = %lor.lhs.false183, %lor.lhs.false180, %if.then171
  store i8* inttoptr (i64 -1 to i8*), i8** %retval, align 8, !dbg !4891
  br label %return, !dbg !4891

if.end189:                                        ; preds = %lor.lhs.false183
  %105 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !4892
  %call190 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %105), !dbg !4893
  call void @copy_reference_ops_from_ref(%union.tree_node* %call190, %struct.VEC_vn_reference_op_s_heap** %lhs), !dbg !4894
  %106 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr, align 8, !dbg !4895
  %operands191 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %106, i32 0, i32 5, !dbg !4895
  %107 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands191, align 8, !dbg !4895
  %tobool192 = icmp ne %struct.VEC_vn_reference_op_s_heap* %107, null, !dbg !4895
  br i1 %tobool192, label %cond.true193, label %cond.false196, !dbg !4895

cond.true193:                                     ; preds = %if.end189
  %108 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr, align 8, !dbg !4895
  %operands194 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %108, i32 0, i32 5, !dbg !4895
  %109 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands194, align 8, !dbg !4895
  %base195 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %109, i32 0, i32 0, !dbg !4895
  br label %cond.end197, !dbg !4895

cond.false196:                                    ; preds = %if.end189
  br label %cond.end197, !dbg !4895

cond.end197:                                      ; preds = %cond.false196, %cond.true193
  %cond198 = phi %struct.VEC_vn_reference_op_s_base* [ %base195, %cond.true193 ], [ null, %cond.false196 ], !dbg !4895
  %call199 = call i32 @VEC_vn_reference_op_s_base_length(%struct.VEC_vn_reference_op_s_base* %cond198), !dbg !4895
  %sub = sub i32 %call199, 1, !dbg !4896
  store i32 %sub, i32* %i, align 4, !dbg !4897
  %110 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %lhs, align 8, !dbg !4898
  %tobool200 = icmp ne %struct.VEC_vn_reference_op_s_heap* %110, null, !dbg !4898
  br i1 %tobool200, label %cond.true201, label %cond.false203, !dbg !4898

cond.true201:                                     ; preds = %cond.end197
  %111 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %lhs, align 8, !dbg !4898
  %base202 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %111, i32 0, i32 0, !dbg !4898
  br label %cond.end204, !dbg !4898

cond.false203:                                    ; preds = %cond.end197
  br label %cond.end204, !dbg !4898

cond.end204:                                      ; preds = %cond.false203, %cond.true201
  %cond205 = phi %struct.VEC_vn_reference_op_s_base* [ %base202, %cond.true201 ], [ null, %cond.false203 ], !dbg !4898
  %call206 = call i32 @VEC_vn_reference_op_s_base_length(%struct.VEC_vn_reference_op_s_base* %cond205), !dbg !4898
  %sub207 = sub i32 %call206, 1, !dbg !4899
  store i32 %sub207, i32* %j, align 4, !dbg !4900
  br label %while.cond, !dbg !4901

while.cond:                                       ; preds = %while.body, %cond.end204
  %112 = load i32, i32* %j, align 4, !dbg !4902
  %cmp208 = icmp sge i32 %112, 0, !dbg !4903
  br i1 %cmp208, label %land.lhs.true210, label %land.end, !dbg !4904

land.lhs.true210:                                 ; preds = %while.cond
  %113 = load i32, i32* %i, align 4, !dbg !4905
  %cmp211 = icmp sge i32 %113, 0, !dbg !4906
  br i1 %cmp211, label %land.rhs, label %land.end, !dbg !4907

land.rhs:                                         ; preds = %land.lhs.true210
  %114 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr, align 8, !dbg !4908
  %operands213 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %114, i32 0, i32 5, !dbg !4908
  %115 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands213, align 8, !dbg !4908
  %tobool214 = icmp ne %struct.VEC_vn_reference_op_s_heap* %115, null, !dbg !4908
  br i1 %tobool214, label %cond.true215, label %cond.false218, !dbg !4908

cond.true215:                                     ; preds = %land.rhs
  %116 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr, align 8, !dbg !4908
  %operands216 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %116, i32 0, i32 5, !dbg !4908
  %117 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands216, align 8, !dbg !4908
  %base217 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %117, i32 0, i32 0, !dbg !4908
  br label %cond.end219, !dbg !4908

cond.false218:                                    ; preds = %land.rhs
  br label %cond.end219, !dbg !4908

cond.end219:                                      ; preds = %cond.false218, %cond.true215
  %cond220 = phi %struct.VEC_vn_reference_op_s_base* [ %base217, %cond.true215 ], [ null, %cond.false218 ], !dbg !4908
  %118 = load i32, i32* %i, align 4, !dbg !4908
  %call221 = call %struct.vn_reference_op_struct* @VEC_vn_reference_op_s_base_index(%struct.VEC_vn_reference_op_s_base* %cond220, i32 %118), !dbg !4908
  %119 = bitcast %struct.vn_reference_op_struct* %call221 to i8*, !dbg !4908
  %120 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %lhs, align 8, !dbg !4909
  %tobool222 = icmp ne %struct.VEC_vn_reference_op_s_heap* %120, null, !dbg !4909
  br i1 %tobool222, label %cond.true223, label %cond.false225, !dbg !4909

cond.true223:                                     ; preds = %cond.end219
  %121 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %lhs, align 8, !dbg !4909
  %base224 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %121, i32 0, i32 0, !dbg !4909
  br label %cond.end226, !dbg !4909

cond.false225:                                    ; preds = %cond.end219
  br label %cond.end226, !dbg !4909

cond.end226:                                      ; preds = %cond.false225, %cond.true223
  %cond227 = phi %struct.VEC_vn_reference_op_s_base* [ %base224, %cond.true223 ], [ null, %cond.false225 ], !dbg !4909
  %122 = load i32, i32* %j, align 4, !dbg !4909
  %call228 = call %struct.vn_reference_op_struct* @VEC_vn_reference_op_s_base_index(%struct.VEC_vn_reference_op_s_base* %cond227, i32 %122), !dbg !4909
  %123 = bitcast %struct.vn_reference_op_struct* %call228 to i8*, !dbg !4909
  %call229 = call i32 @vn_reference_op_eq(i8* %119, i8* %123), !dbg !4910
  %tobool230 = icmp ne i32 %call229, 0, !dbg !4907
  br label %land.end

land.end:                                         ; preds = %cond.end226, %land.lhs.true210, %while.cond
  %124 = phi i1 [ false, %land.lhs.true210 ], [ false, %while.cond ], [ %tobool230, %cond.end226 ], !dbg !4911
  br i1 %124, label %while.body, label %while.end, !dbg !4901

while.body:                                       ; preds = %land.end
  %125 = load i32, i32* %i, align 4, !dbg !4912
  %dec = add nsw i32 %125, -1, !dbg !4912
  store i32 %dec, i32* %i, align 4, !dbg !4912
  %126 = load i32, i32* %j, align 4, !dbg !4914
  %dec231 = add nsw i32 %126, -1, !dbg !4914
  store i32 %dec231, i32* %j, align 4, !dbg !4914
  br label %while.cond, !dbg !4901, !llvm.loop !4915

while.end:                                        ; preds = %land.end
  call void @VEC_vn_reference_op_s_heap_free(%struct.VEC_vn_reference_op_s_heap** %lhs), !dbg !4917
  %127 = load i32, i32* %j, align 4, !dbg !4918
  %cmp232 = icmp ne i32 %127, -1, !dbg !4920
  br i1 %cmp232, label %if.then234, label %if.end235, !dbg !4921

if.then234:                                       ; preds = %while.end
  store i8* inttoptr (i64 -1 to i8*), i8** %retval, align 8, !dbg !4922
  br label %return, !dbg !4922

if.end235:                                        ; preds = %while.end
  %128 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !4923
  %call236 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %128), !dbg !4924
  call void @copy_reference_ops_from_ref(%union.tree_node* %call236, %struct.VEC_vn_reference_op_s_heap** %rhs), !dbg !4925
  %129 = load i32, i32* %i, align 4, !dbg !4926
  %add237 = add nsw i32 %129, 1, !dbg !4928
  %130 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %rhs, align 8, !dbg !4929
  %tobool238 = icmp ne %struct.VEC_vn_reference_op_s_heap* %130, null, !dbg !4929
  br i1 %tobool238, label %cond.true239, label %cond.false241, !dbg !4929

cond.true239:                                     ; preds = %if.end235
  %131 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %rhs, align 8, !dbg !4929
  %base240 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %131, i32 0, i32 0, !dbg !4929
  br label %cond.end242, !dbg !4929

cond.false241:                                    ; preds = %if.end235
  br label %cond.end242, !dbg !4929

cond.end242:                                      ; preds = %cond.false241, %cond.true239
  %cond243 = phi %struct.VEC_vn_reference_op_s_base* [ %base240, %cond.true239 ], [ null, %cond.false241 ], !dbg !4929
  %call244 = call i32 @VEC_vn_reference_op_s_base_length(%struct.VEC_vn_reference_op_s_base* %cond243), !dbg !4929
  %add245 = add i32 %add237, %call244, !dbg !4930
  %132 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr, align 8, !dbg !4931
  %operands246 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %132, i32 0, i32 5, !dbg !4931
  %133 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands246, align 8, !dbg !4931
  %tobool247 = icmp ne %struct.VEC_vn_reference_op_s_heap* %133, null, !dbg !4931
  br i1 %tobool247, label %cond.true248, label %cond.false251, !dbg !4931

cond.true248:                                     ; preds = %cond.end242
  %134 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr, align 8, !dbg !4931
  %operands249 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %134, i32 0, i32 5, !dbg !4931
  %135 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands249, align 8, !dbg !4931
  %base250 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %135, i32 0, i32 0, !dbg !4931
  br label %cond.end252, !dbg !4931

cond.false251:                                    ; preds = %cond.end242
  br label %cond.end252, !dbg !4931

cond.end252:                                      ; preds = %cond.false251, %cond.true248
  %cond253 = phi %struct.VEC_vn_reference_op_s_base* [ %base250, %cond.true248 ], [ null, %cond.false251 ], !dbg !4931
  %call254 = call i32 @VEC_vn_reference_op_s_base_length(%struct.VEC_vn_reference_op_s_base* %cond253), !dbg !4931
  %cmp255 = icmp ugt i32 %add245, %call254, !dbg !4932
  br i1 %cmp255, label %if.then257, label %if.else277, !dbg !4933

if.then257:                                       ; preds = %cond.end252
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_reference_op_s_heap** %old, metadata !4934, metadata !DIExpression()), !dbg !4936
  %136 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr, align 8, !dbg !4937
  %operands258 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %136, i32 0, i32 5, !dbg !4938
  %137 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands258, align 8, !dbg !4938
  store %struct.VEC_vn_reference_op_s_heap* %137, %struct.VEC_vn_reference_op_s_heap** %old, align 8, !dbg !4936
  %138 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr, align 8, !dbg !4939
  %operands259 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %138, i32 0, i32 5, !dbg !4939
  %139 = load i32, i32* %i, align 4, !dbg !4939
  %add260 = add nsw i32 %139, 1, !dbg !4939
  %140 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %rhs, align 8, !dbg !4939
  %tobool261 = icmp ne %struct.VEC_vn_reference_op_s_heap* %140, null, !dbg !4939
  br i1 %tobool261, label %cond.true262, label %cond.false264, !dbg !4939

cond.true262:                                     ; preds = %if.then257
  %141 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %rhs, align 8, !dbg !4939
  %base263 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %141, i32 0, i32 0, !dbg !4939
  br label %cond.end265, !dbg !4939

cond.false264:                                    ; preds = %if.then257
  br label %cond.end265, !dbg !4939

cond.end265:                                      ; preds = %cond.false264, %cond.true262
  %cond266 = phi %struct.VEC_vn_reference_op_s_base* [ %base263, %cond.true262 ], [ null, %cond.false264 ], !dbg !4939
  %call267 = call i32 @VEC_vn_reference_op_s_base_length(%struct.VEC_vn_reference_op_s_base* %cond266), !dbg !4939
  %add268 = add i32 %add260, %call267, !dbg !4939
  call void @VEC_vn_reference_op_s_heap_safe_grow(%struct.VEC_vn_reference_op_s_heap** %operands259, i32 %add268), !dbg !4939
  %142 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %old, align 8, !dbg !4940
  %143 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** @shared_lookup_references, align 8, !dbg !4942
  %cmp269 = icmp eq %struct.VEC_vn_reference_op_s_heap* %142, %143, !dbg !4943
  br i1 %cmp269, label %land.lhs.true271, label %if.end276, !dbg !4944

land.lhs.true271:                                 ; preds = %cond.end265
  %144 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr, align 8, !dbg !4945
  %operands272 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %144, i32 0, i32 5, !dbg !4946
  %145 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands272, align 8, !dbg !4946
  %146 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %old, align 8, !dbg !4947
  %cmp273 = icmp ne %struct.VEC_vn_reference_op_s_heap* %145, %146, !dbg !4948
  br i1 %cmp273, label %if.then275, label %if.end276, !dbg !4949

if.then275:                                       ; preds = %land.lhs.true271
  store %struct.VEC_vn_reference_op_s_heap* null, %struct.VEC_vn_reference_op_s_heap** @shared_lookup_references, align 8, !dbg !4950
  br label %if.end276, !dbg !4951

if.end276:                                        ; preds = %if.then275, %land.lhs.true271, %cond.end265
  br label %if.end295, !dbg !4952

if.else277:                                       ; preds = %cond.end252
  %147 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr, align 8, !dbg !4953
  %operands278 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %147, i32 0, i32 5, !dbg !4953
  %148 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands278, align 8, !dbg !4953
  %tobool279 = icmp ne %struct.VEC_vn_reference_op_s_heap* %148, null, !dbg !4953
  br i1 %tobool279, label %cond.true280, label %cond.false283, !dbg !4953

cond.true280:                                     ; preds = %if.else277
  %149 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr, align 8, !dbg !4953
  %operands281 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %149, i32 0, i32 5, !dbg !4953
  %150 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands281, align 8, !dbg !4953
  %base282 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %150, i32 0, i32 0, !dbg !4953
  br label %cond.end284, !dbg !4953

cond.false283:                                    ; preds = %if.else277
  br label %cond.end284, !dbg !4953

cond.end284:                                      ; preds = %cond.false283, %cond.true280
  %cond285 = phi %struct.VEC_vn_reference_op_s_base* [ %base282, %cond.true280 ], [ null, %cond.false283 ], !dbg !4953
  %151 = load i32, i32* %i, align 4, !dbg !4953
  %add286 = add nsw i32 %151, 1, !dbg !4953
  %152 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %rhs, align 8, !dbg !4953
  %tobool287 = icmp ne %struct.VEC_vn_reference_op_s_heap* %152, null, !dbg !4953
  br i1 %tobool287, label %cond.true288, label %cond.false290, !dbg !4953

cond.true288:                                     ; preds = %cond.end284
  %153 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %rhs, align 8, !dbg !4953
  %base289 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %153, i32 0, i32 0, !dbg !4953
  br label %cond.end291, !dbg !4953

cond.false290:                                    ; preds = %cond.end284
  br label %cond.end291, !dbg !4953

cond.end291:                                      ; preds = %cond.false290, %cond.true288
  %cond292 = phi %struct.VEC_vn_reference_op_s_base* [ %base289, %cond.true288 ], [ null, %cond.false290 ], !dbg !4953
  %call293 = call i32 @VEC_vn_reference_op_s_base_length(%struct.VEC_vn_reference_op_s_base* %cond292), !dbg !4953
  %add294 = add i32 %add286, %call293, !dbg !4953
  call void @VEC_vn_reference_op_s_base_truncate(%struct.VEC_vn_reference_op_s_base* %cond285, i32 %add294), !dbg !4953
  br label %if.end295

if.end295:                                        ; preds = %cond.end291, %if.end276
  store i32 0, i32* %j, align 4, !dbg !4954
  br label %for.cond, !dbg !4956

for.cond:                                         ; preds = %for.inc, %if.end295
  %154 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %rhs, align 8, !dbg !4957
  %tobool296 = icmp ne %struct.VEC_vn_reference_op_s_heap* %154, null, !dbg !4957
  br i1 %tobool296, label %cond.true297, label %cond.false299, !dbg !4957

cond.true297:                                     ; preds = %for.cond
  %155 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %rhs, align 8, !dbg !4957
  %base298 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %155, i32 0, i32 0, !dbg !4957
  br label %cond.end300, !dbg !4957

cond.false299:                                    ; preds = %for.cond
  br label %cond.end300, !dbg !4957

cond.end300:                                      ; preds = %cond.false299, %cond.true297
  %cond301 = phi %struct.VEC_vn_reference_op_s_base* [ %base298, %cond.true297 ], [ null, %cond.false299 ], !dbg !4957
  %156 = load i32, i32* %j, align 4, !dbg !4957
  %call302 = call i32 @VEC_vn_reference_op_s_base_iterate(%struct.VEC_vn_reference_op_s_base* %cond301, i32 %156, %struct.vn_reference_op_struct** %vro), !dbg !4957
  %tobool303 = icmp ne i32 %call302, 0, !dbg !4959
  br i1 %tobool303, label %for.body, label %for.end, !dbg !4959

for.body:                                         ; preds = %cond.end300
  %157 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr, align 8, !dbg !4960
  %operands304 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %157, i32 0, i32 5, !dbg !4960
  %158 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands304, align 8, !dbg !4960
  %tobool305 = icmp ne %struct.VEC_vn_reference_op_s_heap* %158, null, !dbg !4960
  br i1 %tobool305, label %cond.true306, label %cond.false309, !dbg !4960

cond.true306:                                     ; preds = %for.body
  %159 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr, align 8, !dbg !4960
  %operands307 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %159, i32 0, i32 5, !dbg !4960
  %160 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands307, align 8, !dbg !4960
  %base308 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %160, i32 0, i32 0, !dbg !4960
  br label %cond.end310, !dbg !4960

cond.false309:                                    ; preds = %for.body
  br label %cond.end310, !dbg !4960

cond.end310:                                      ; preds = %cond.false309, %cond.true306
  %cond311 = phi %struct.VEC_vn_reference_op_s_base* [ %base308, %cond.true306 ], [ null, %cond.false309 ], !dbg !4960
  %161 = load i32, i32* %i, align 4, !dbg !4960
  %add312 = add nsw i32 %161, 1, !dbg !4960
  %162 = load i32, i32* %j, align 4, !dbg !4960
  %add313 = add nsw i32 %add312, %162, !dbg !4960
  %163 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro, align 8, !dbg !4960
  %call314 = call %struct.vn_reference_op_struct* @VEC_vn_reference_op_s_base_replace(%struct.VEC_vn_reference_op_s_base* %cond311, i32 %add313, %struct.vn_reference_op_struct* %163), !dbg !4960
  br label %for.inc, !dbg !4960

for.inc:                                          ; preds = %cond.end310
  %164 = load i32, i32* %j, align 4, !dbg !4961
  %inc = add nsw i32 %164, 1, !dbg !4961
  store i32 %inc, i32* %j, align 4, !dbg !4961
  br label %for.cond, !dbg !4962, !llvm.loop !4963

for.end:                                          ; preds = %cond.end300
  call void @VEC_vn_reference_op_s_heap_free(%struct.VEC_vn_reference_op_s_heap** %rhs), !dbg !4965
  %165 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr, align 8, !dbg !4966
  %call315 = call i32 @vn_reference_compute_hash(%struct.vn_reference_s* %165), !dbg !4967
  %166 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr, align 8, !dbg !4968
  %hashcode = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %166, i32 0, i32 1, !dbg !4969
  store i32 %call315, i32* %hashcode, align 4, !dbg !4970
  %167 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr, align 8, !dbg !4971
  %set316 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %167, i32 0, i32 3, !dbg !4973
  %168 = load i32, i32* %set316, align 8, !dbg !4973
  %169 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr, align 8, !dbg !4974
  %type317 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %169, i32 0, i32 4, !dbg !4975
  %170 = load %union.tree_node*, %union.tree_node** %type317, align 8, !dbg !4975
  %171 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr, align 8, !dbg !4976
  %operands318 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %171, i32 0, i32 5, !dbg !4977
  %172 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands318, align 8, !dbg !4977
  %call319 = call zeroext i8 @ao_ref_init_from_vn_reference(%struct.ao_ref_s* %r, i32 %168, %union.tree_node* %170, %struct.VEC_vn_reference_op_s_heap* %172), !dbg !4978
  %tobool320 = icmp ne i8 %call319, 0, !dbg !4978
  br i1 %tobool320, label %if.end322, label %if.then321, !dbg !4979

if.then321:                                       ; preds = %for.end
  store i8* inttoptr (i64 -1 to i8*), i8** %retval, align 8, !dbg !4980
  br label %return, !dbg !4980

if.end322:                                        ; preds = %for.end
  %173 = load %struct.ao_ref_s*, %struct.ao_ref_s** %ref.addr, align 8, !dbg !4981
  %size = getelementptr inbounds %struct.ao_ref_s, %struct.ao_ref_s* %173, i32 0, i32 3, !dbg !4983
  %174 = load i64, i64* %size, align 8, !dbg !4983
  %size323 = getelementptr inbounds %struct.ao_ref_s, %struct.ao_ref_s* %r, i32 0, i32 3, !dbg !4984
  %175 = load i64, i64* %size323, align 8, !dbg !4984
  %cmp324 = icmp ne i64 %174, %175, !dbg !4985
  br i1 %cmp324, label %if.then326, label %if.end327, !dbg !4986

if.then326:                                       ; preds = %if.end322
  store i8* inttoptr (i64 -1 to i8*), i8** %retval, align 8, !dbg !4987
  br label %return, !dbg !4987

if.end327:                                        ; preds = %if.end322
  %176 = load %struct.ao_ref_s*, %struct.ao_ref_s** %ref.addr, align 8, !dbg !4988
  %177 = bitcast %struct.ao_ref_s* %176 to i8*, !dbg !4989
  %178 = bitcast %struct.ao_ref_s* %r to i8*, !dbg !4989
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %177, i8* align 8 %178, i64 48, i1 false), !dbg !4989
  store %union.tree_node** null, %union.tree_node*** @last_vuse_ptr, align 8, !dbg !4990
  store i8* null, i8** %retval, align 8, !dbg !4991
  br label %return, !dbg !4991

if.end328:                                        ; preds = %lor.lhs.false166, %if.else130
  br label %if.end329

if.end329:                                        ; preds = %if.end328, %if.end129
  br label %if.end330

if.end330:                                        ; preds = %if.end329, %if.end67
  store i8* inttoptr (i64 -1 to i8*), i8** %retval, align 8, !dbg !4992
  br label %return, !dbg !4992

return:                                           ; preds = %if.end330, %if.end327, %if.then326, %if.then321, %if.then234, %if.then188, %cond.end125, %cond.end, %if.then
  %179 = load i8*, i8** %retval, align 8, !dbg !4993
  ret i8* %179, !dbg !4993
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @vn_reference_lookup(%union.tree_node* %op, %union.tree_node* %vuse, i8 zeroext %maywalk, %struct.vn_reference_s** %vnresult) #0 !dbg !4994 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %op.addr = alloca %union.tree_node*, align 8
  %vuse.addr = alloca %union.tree_node*, align 8
  %maywalk.addr = alloca i8, align 1
  %vnresult.addr = alloca %struct.vn_reference_s**, align 8
  %operands = alloca %struct.VEC_vn_reference_op_s_heap*, align 8
  %vr1 = alloca %struct.vn_reference_s, align 8
  %wvnresult = alloca %struct.vn_reference_s*, align 8
  %r = alloca %struct.ao_ref_s, align 8
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !4997, metadata !DIExpression()), !dbg !4998
  store %union.tree_node* %vuse, %union.tree_node** %vuse.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %vuse.addr, metadata !4999, metadata !DIExpression()), !dbg !5000
  store i8 %maywalk, i8* %maywalk.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %maywalk.addr, metadata !5001, metadata !DIExpression()), !dbg !5002
  store %struct.vn_reference_s** %vnresult, %struct.vn_reference_s*** %vnresult.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.vn_reference_s*** %vnresult.addr, metadata !5003, metadata !DIExpression()), !dbg !5004
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_reference_op_s_heap** %operands, metadata !5005, metadata !DIExpression()), !dbg !5006
  call void @llvm.dbg.declare(metadata %struct.vn_reference_s* %vr1, metadata !5007, metadata !DIExpression()), !dbg !5008
  %0 = load %struct.vn_reference_s**, %struct.vn_reference_s*** %vnresult.addr, align 8, !dbg !5009
  %tobool = icmp ne %struct.vn_reference_s** %0, null, !dbg !5009
  br i1 %tobool, label %if.then, label %if.end, !dbg !5011

if.then:                                          ; preds = %entry
  %1 = load %struct.vn_reference_s**, %struct.vn_reference_s*** %vnresult.addr, align 8, !dbg !5012
  store %struct.vn_reference_s* null, %struct.vn_reference_s** %1, align 8, !dbg !5013
  br label %if.end, !dbg !5014

if.end:                                           ; preds = %if.then, %entry
  %2 = load %union.tree_node*, %union.tree_node** %vuse.addr, align 8, !dbg !5015
  %tobool1 = icmp ne %union.tree_node* %2, null, !dbg !5015
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !5015

cond.true:                                        ; preds = %if.end
  %3 = load %union.tree_node*, %union.tree_node** %vuse.addr, align 8, !dbg !5016
  %call = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %3), !dbg !5016
  %valnum = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call, i32 0, i32 0, !dbg !5016
  %4 = load %union.tree_node*, %union.tree_node** %valnum, align 8, !dbg !5016
  br label %cond.end, !dbg !5015

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !5015

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %4, %cond.true ], [ null, %cond.false ], !dbg !5015
  %vuse2 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %vr1, i32 0, i32 2, !dbg !5017
  store %union.tree_node* %cond, %union.tree_node** %vuse2, align 8, !dbg !5018
  %5 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !5019
  %call3 = call %struct.VEC_vn_reference_op_s_heap* @valueize_shared_reference_ops_from_ref(%union.tree_node* %5), !dbg !5020
  store %struct.VEC_vn_reference_op_s_heap* %call3, %struct.VEC_vn_reference_op_s_heap** %operands, align 8, !dbg !5021
  %operands4 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %vr1, i32 0, i32 5, !dbg !5022
  store %struct.VEC_vn_reference_op_s_heap* %call3, %struct.VEC_vn_reference_op_s_heap** %operands4, align 8, !dbg !5023
  %6 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !5024
  %common = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !5024
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5024
  %7 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5024
  %type5 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %vr1, i32 0, i32 4, !dbg !5025
  store %union.tree_node* %7, %union.tree_node** %type5, align 8, !dbg !5026
  %8 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !5027
  %call6 = call i32 @get_alias_set(%union.tree_node* %8), !dbg !5028
  %set = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %vr1, i32 0, i32 3, !dbg !5029
  store i32 %call6, i32* %set, align 8, !dbg !5030
  %call7 = call i32 @vn_reference_compute_hash(%struct.vn_reference_s* %vr1), !dbg !5031
  %hashcode = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %vr1, i32 0, i32 1, !dbg !5032
  store i32 %call7, i32* %hashcode, align 4, !dbg !5033
  %9 = load i8, i8* %maywalk.addr, align 1, !dbg !5034
  %conv = zext i8 %9 to i32, !dbg !5034
  %tobool8 = icmp ne i32 %conv, 0, !dbg !5034
  br i1 %tobool8, label %land.lhs.true, label %if.end25, !dbg !5036

land.lhs.true:                                    ; preds = %cond.end
  %vuse9 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %vr1, i32 0, i32 2, !dbg !5037
  %10 = load %union.tree_node*, %union.tree_node** %vuse9, align 8, !dbg !5037
  %tobool10 = icmp ne %union.tree_node* %10, null, !dbg !5038
  br i1 %tobool10, label %if.then11, label %if.end25, !dbg !5039

if.then11:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.vn_reference_s** %wvnresult, metadata !5040, metadata !DIExpression()), !dbg !5042
  call void @llvm.dbg.declare(metadata %struct.ao_ref_s* %r, metadata !5043, metadata !DIExpression()), !dbg !5044
  %11 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !5045
  call void @ao_ref_init(%struct.ao_ref_s* %r, %union.tree_node* %11), !dbg !5046
  %vuse12 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %vr1, i32 0, i32 2, !dbg !5047
  %12 = load %union.tree_node*, %union.tree_node** %vuse12, align 8, !dbg !5047
  %13 = bitcast %struct.vn_reference_s* %vr1 to i8*, !dbg !5048
  %call13 = call i8* @walk_non_aliased_vuses(%struct.ao_ref_s* %r, %union.tree_node* %12, i8* (%struct.ao_ref_s*, %union.tree_node*, i8*)* @vn_reference_lookup_2, i8* (%struct.ao_ref_s*, %union.tree_node*, i8*)* @vn_reference_lookup_3, i8* %13), !dbg !5049
  %14 = bitcast i8* %call13 to %struct.vn_reference_s*, !dbg !5050
  store %struct.vn_reference_s* %14, %struct.vn_reference_s** %wvnresult, align 8, !dbg !5051
  %operands14 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %vr1, i32 0, i32 5, !dbg !5052
  %15 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands14, align 8, !dbg !5052
  %16 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands, align 8, !dbg !5054
  %cmp = icmp ne %struct.VEC_vn_reference_op_s_heap* %15, %16, !dbg !5055
  br i1 %cmp, label %if.then16, label %if.end18, !dbg !5056

if.then16:                                        ; preds = %if.then11
  %operands17 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %vr1, i32 0, i32 5, !dbg !5057
  call void @VEC_vn_reference_op_s_heap_free(%struct.VEC_vn_reference_op_s_heap** %operands17), !dbg !5057
  br label %if.end18, !dbg !5057

if.end18:                                         ; preds = %if.then16, %if.then11
  %17 = load %struct.vn_reference_s*, %struct.vn_reference_s** %wvnresult, align 8, !dbg !5058
  %tobool19 = icmp ne %struct.vn_reference_s* %17, null, !dbg !5058
  br i1 %tobool19, label %if.then20, label %if.end24, !dbg !5060

if.then20:                                        ; preds = %if.end18
  %18 = load %struct.vn_reference_s**, %struct.vn_reference_s*** %vnresult.addr, align 8, !dbg !5061
  %tobool21 = icmp ne %struct.vn_reference_s** %18, null, !dbg !5061
  br i1 %tobool21, label %if.then22, label %if.end23, !dbg !5064

if.then22:                                        ; preds = %if.then20
  %19 = load %struct.vn_reference_s*, %struct.vn_reference_s** %wvnresult, align 8, !dbg !5065
  %20 = load %struct.vn_reference_s**, %struct.vn_reference_s*** %vnresult.addr, align 8, !dbg !5066
  store %struct.vn_reference_s* %19, %struct.vn_reference_s** %20, align 8, !dbg !5067
  br label %if.end23, !dbg !5068

if.end23:                                         ; preds = %if.then22, %if.then20
  %21 = load %struct.vn_reference_s*, %struct.vn_reference_s** %wvnresult, align 8, !dbg !5069
  %result = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %21, i32 0, i32 6, !dbg !5070
  %22 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !5070
  store %union.tree_node* %22, %union.tree_node** %retval, align 8, !dbg !5071
  br label %return, !dbg !5071

if.end24:                                         ; preds = %if.end18
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5072
  br label %return, !dbg !5072

if.end25:                                         ; preds = %land.lhs.true, %cond.end
  %23 = load %struct.vn_reference_s**, %struct.vn_reference_s*** %vnresult.addr, align 8, !dbg !5073
  %call26 = call %union.tree_node* @vn_reference_lookup_1(%struct.vn_reference_s* %vr1, %struct.vn_reference_s** %23), !dbg !5074
  store %union.tree_node* %call26, %union.tree_node** %retval, align 8, !dbg !5075
  br label %return, !dbg !5075

return:                                           ; preds = %if.end25, %if.end24, %if.end23
  %24 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5076
  ret %union.tree_node* %24, !dbg !5076
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_vn_reference_op_s_heap* @valueize_shared_reference_ops_from_ref(%union.tree_node* %ref) #0 !dbg !5077 {
entry:
  %retval = alloca %struct.VEC_vn_reference_op_s_heap*, align 8
  %ref.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %ref, %union.tree_node** %ref.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ref.addr, metadata !5080, metadata !DIExpression()), !dbg !5081
  %0 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !5082
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !5082
  br i1 %tobool, label %if.end, label %if.then, !dbg !5084

if.then:                                          ; preds = %entry
  store %struct.VEC_vn_reference_op_s_heap* null, %struct.VEC_vn_reference_op_s_heap** %retval, align 8, !dbg !5085
  br label %return, !dbg !5085

if.end:                                           ; preds = %entry
  %1 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** @shared_lookup_references, align 8, !dbg !5086
  %tobool1 = icmp ne %struct.VEC_vn_reference_op_s_heap* %1, null, !dbg !5086
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !5086

cond.true:                                        ; preds = %if.end
  %2 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** @shared_lookup_references, align 8, !dbg !5086
  %base = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %2, i32 0, i32 0, !dbg !5086
  br label %cond.end, !dbg !5086

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !5086

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_vn_reference_op_s_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5086
  call void @VEC_vn_reference_op_s_base_truncate(%struct.VEC_vn_reference_op_s_base* %cond, i32 0), !dbg !5086
  %3 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !5087
  call void @copy_reference_ops_from_ref(%union.tree_node* %3, %struct.VEC_vn_reference_op_s_heap** @shared_lookup_references), !dbg !5088
  %4 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** @shared_lookup_references, align 8, !dbg !5089
  %call = call %struct.VEC_vn_reference_op_s_heap* @valueize_refs(%struct.VEC_vn_reference_op_s_heap* %4), !dbg !5090
  store %struct.VEC_vn_reference_op_s_heap* %call, %struct.VEC_vn_reference_op_s_heap** @shared_lookup_references, align 8, !dbg !5091
  %5 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** @shared_lookup_references, align 8, !dbg !5092
  store %struct.VEC_vn_reference_op_s_heap* %5, %struct.VEC_vn_reference_op_s_heap** %retval, align 8, !dbg !5093
  br label %return, !dbg !5093

return:                                           ; preds = %cond.end, %if.then
  %6 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %retval, align 8, !dbg !5094
  ret %struct.VEC_vn_reference_op_s_heap* %6, !dbg !5094
}

declare dso_local i32 @get_alias_set(%union.tree_node*) #2

declare dso_local void @ao_ref_init(%struct.ao_ref_s*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.vn_reference_s* @vn_reference_insert(%union.tree_node* %op, %union.tree_node* %result, %union.tree_node* %vuse) #0 !dbg !5095 {
entry:
  %op.addr = alloca %union.tree_node*, align 8
  %result.addr = alloca %union.tree_node*, align 8
  %vuse.addr = alloca %union.tree_node*, align 8
  %slot = alloca i8**, align 8
  %vr1 = alloca %struct.vn_reference_s*, align 8
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !5098, metadata !DIExpression()), !dbg !5099
  store %union.tree_node* %result, %union.tree_node** %result.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %result.addr, metadata !5100, metadata !DIExpression()), !dbg !5101
  store %union.tree_node* %vuse, %union.tree_node** %vuse.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %vuse.addr, metadata !5102, metadata !DIExpression()), !dbg !5103
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !5104, metadata !DIExpression()), !dbg !5105
  call void @llvm.dbg.declare(metadata %struct.vn_reference_s** %vr1, metadata !5106, metadata !DIExpression()), !dbg !5107
  %0 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5108
  %references_pool = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %0, i32 0, i32 5, !dbg !5109
  %1 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** %references_pool, align 8, !dbg !5109
  %call = call i8* @pool_alloc(%struct.alloc_pool_def* %1), !dbg !5110
  %2 = bitcast i8* %call to %struct.vn_reference_s*, !dbg !5111
  store %struct.vn_reference_s* %2, %struct.vn_reference_s** %vr1, align 8, !dbg !5112
  %3 = load %union.tree_node*, %union.tree_node** %result.addr, align 8, !dbg !5113
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !5113
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !5113
  %bf.load = load i64, i64* %4, align 8, !dbg !5113
  %bf.clear = and i64 %bf.load, 65535, !dbg !5113
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5113
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !5115
  br i1 %cmp, label %if.then, label %if.else, !dbg !5116

if.then:                                          ; preds = %entry
  %5 = load %union.tree_node*, %union.tree_node** %result.addr, align 8, !dbg !5117
  %call1 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %5), !dbg !5118
  %value_id = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call1, i32 0, i32 2, !dbg !5119
  %6 = load i32, i32* %value_id, align 8, !dbg !5119
  %7 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr1, align 8, !dbg !5120
  %value_id2 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %7, i32 0, i32 0, !dbg !5121
  store i32 %6, i32* %value_id2, align 8, !dbg !5122
  br label %if.end, !dbg !5120

if.else:                                          ; preds = %entry
  %8 = load %union.tree_node*, %union.tree_node** %result.addr, align 8, !dbg !5123
  %call3 = call i32 @get_or_alloc_constant_value_id(%union.tree_node* %8), !dbg !5124
  %9 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr1, align 8, !dbg !5125
  %value_id4 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %9, i32 0, i32 0, !dbg !5126
  store i32 %call3, i32* %value_id4, align 8, !dbg !5127
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %10 = load %union.tree_node*, %union.tree_node** %vuse.addr, align 8, !dbg !5128
  %tobool = icmp ne %union.tree_node* %10, null, !dbg !5128
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5128

cond.true:                                        ; preds = %if.end
  %11 = load %union.tree_node*, %union.tree_node** %vuse.addr, align 8, !dbg !5129
  %call5 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %11), !dbg !5129
  %valnum = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call5, i32 0, i32 0, !dbg !5129
  %12 = load %union.tree_node*, %union.tree_node** %valnum, align 8, !dbg !5129
  br label %cond.end, !dbg !5128

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !5128

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %12, %cond.true ], [ null, %cond.false ], !dbg !5128
  %13 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr1, align 8, !dbg !5130
  %vuse6 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %13, i32 0, i32 2, !dbg !5131
  store %union.tree_node* %cond, %union.tree_node** %vuse6, align 8, !dbg !5132
  %14 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !5133
  %call7 = call %struct.VEC_vn_reference_op_s_heap* @create_reference_ops_from_ref(%union.tree_node* %14), !dbg !5134
  %call8 = call %struct.VEC_vn_reference_op_s_heap* @valueize_refs(%struct.VEC_vn_reference_op_s_heap* %call7), !dbg !5135
  %15 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr1, align 8, !dbg !5136
  %operands = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %15, i32 0, i32 5, !dbg !5137
  store %struct.VEC_vn_reference_op_s_heap* %call8, %struct.VEC_vn_reference_op_s_heap** %operands, align 8, !dbg !5138
  %16 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !5139
  %common = bitcast %union.tree_node* %16 to %struct.tree_common*, !dbg !5139
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5139
  %17 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5139
  %18 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr1, align 8, !dbg !5140
  %type9 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %18, i32 0, i32 4, !dbg !5141
  store %union.tree_node* %17, %union.tree_node** %type9, align 8, !dbg !5142
  %19 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !5143
  %call10 = call i32 @get_alias_set(%union.tree_node* %19), !dbg !5144
  %20 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr1, align 8, !dbg !5145
  %set = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %20, i32 0, i32 3, !dbg !5146
  store i32 %call10, i32* %set, align 8, !dbg !5147
  %21 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr1, align 8, !dbg !5148
  %call11 = call i32 @vn_reference_compute_hash(%struct.vn_reference_s* %21), !dbg !5149
  %22 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr1, align 8, !dbg !5150
  %hashcode = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %22, i32 0, i32 1, !dbg !5151
  store i32 %call11, i32* %hashcode, align 4, !dbg !5152
  %23 = load %union.tree_node*, %union.tree_node** %result.addr, align 8, !dbg !5153
  %base12 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !5153
  %24 = bitcast %struct.tree_base* %base12 to i64*, !dbg !5153
  %bf.load13 = load i64, i64* %24, align 8, !dbg !5153
  %bf.clear14 = and i64 %bf.load13, 65535, !dbg !5153
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !5153
  %cmp16 = icmp eq i32 %bf.cast15, 141, !dbg !5154
  br i1 %cmp16, label %cond.true17, label %cond.false20, !dbg !5153

cond.true17:                                      ; preds = %cond.end
  %25 = load %union.tree_node*, %union.tree_node** %result.addr, align 8, !dbg !5155
  %call18 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %25), !dbg !5155
  %valnum19 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call18, i32 0, i32 0, !dbg !5155
  %26 = load %union.tree_node*, %union.tree_node** %valnum19, align 8, !dbg !5155
  br label %cond.end21, !dbg !5153

cond.false20:                                     ; preds = %cond.end
  %27 = load %union.tree_node*, %union.tree_node** %result.addr, align 8, !dbg !5156
  br label %cond.end21, !dbg !5153

cond.end21:                                       ; preds = %cond.false20, %cond.true17
  %cond22 = phi %union.tree_node* [ %26, %cond.true17 ], [ %27, %cond.false20 ], !dbg !5153
  %28 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr1, align 8, !dbg !5157
  %result23 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %28, i32 0, i32 6, !dbg !5158
  store %union.tree_node* %cond22, %union.tree_node** %result23, align 8, !dbg !5159
  %29 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5160
  %references = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %29, i32 0, i32 2, !dbg !5161
  %30 = load %struct.htab*, %struct.htab** %references, align 8, !dbg !5161
  %31 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr1, align 8, !dbg !5162
  %32 = bitcast %struct.vn_reference_s* %31 to i8*, !dbg !5162
  %33 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr1, align 8, !dbg !5163
  %hashcode24 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %33, i32 0, i32 1, !dbg !5164
  %34 = load i32, i32* %hashcode24, align 4, !dbg !5164
  %call25 = call i8** @htab_find_slot_with_hash(%struct.htab* %30, i8* %32, i32 %34, i32 1), !dbg !5165
  store i8** %call25, i8*** %slot, align 8, !dbg !5166
  %35 = load i8**, i8*** %slot, align 8, !dbg !5167
  %36 = load i8*, i8** %35, align 8, !dbg !5169
  %tobool26 = icmp ne i8* %36, null, !dbg !5169
  br i1 %tobool26, label %if.then27, label %if.end28, !dbg !5170

if.then27:                                        ; preds = %cond.end21
  %37 = load i8**, i8*** %slot, align 8, !dbg !5171
  %38 = load i8*, i8** %37, align 8, !dbg !5172
  call void @free_reference(i8* %38), !dbg !5173
  br label %if.end28, !dbg !5173

if.end28:                                         ; preds = %if.then27, %cond.end21
  %39 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr1, align 8, !dbg !5174
  %40 = bitcast %struct.vn_reference_s* %39 to i8*, !dbg !5174
  %41 = load i8**, i8*** %slot, align 8, !dbg !5175
  store i8* %40, i8** %41, align 8, !dbg !5176
  %42 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr1, align 8, !dbg !5177
  ret %struct.vn_reference_s* %42, !dbg !5178
}

declare dso_local i8* @pool_alloc(%struct.alloc_pool_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_vn_reference_op_s_heap* @create_reference_ops_from_ref(%union.tree_node* %ref) #0 !dbg !5179 {
entry:
  %ref.addr = alloca %union.tree_node*, align 8
  %result = alloca %struct.VEC_vn_reference_op_s_heap*, align 8
  store %union.tree_node* %ref, %union.tree_node** %ref.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ref.addr, metadata !5180, metadata !DIExpression()), !dbg !5181
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_reference_op_s_heap** %result, metadata !5182, metadata !DIExpression()), !dbg !5183
  store %struct.VEC_vn_reference_op_s_heap* null, %struct.VEC_vn_reference_op_s_heap** %result, align 8, !dbg !5183
  %0 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !5184
  call void @copy_reference_ops_from_ref(%union.tree_node* %0, %struct.VEC_vn_reference_op_s_heap** %result), !dbg !5185
  %1 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %result, align 8, !dbg !5186
  ret %struct.VEC_vn_reference_op_s_heap* %1, !dbg !5187
}

; Function Attrs: noinline nounwind uwtable
define internal void @free_reference(i8* %vp) #0 !dbg !5188 {
entry:
  %vp.addr = alloca i8*, align 8
  %vr = alloca %struct.vn_reference_s*, align 8
  store i8* %vp, i8** %vp.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vp.addr, metadata !5189, metadata !DIExpression()), !dbg !5190
  call void @llvm.dbg.declare(metadata %struct.vn_reference_s** %vr, metadata !5191, metadata !DIExpression()), !dbg !5192
  %0 = load i8*, i8** %vp.addr, align 8, !dbg !5193
  %1 = bitcast i8* %0 to %struct.vn_reference_s*, !dbg !5194
  store %struct.vn_reference_s* %1, %struct.vn_reference_s** %vr, align 8, !dbg !5192
  %2 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr, align 8, !dbg !5195
  %operands = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %2, i32 0, i32 5, !dbg !5195
  call void @VEC_vn_reference_op_s_heap_free(%struct.VEC_vn_reference_op_s_heap** %operands), !dbg !5195
  ret void, !dbg !5196
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.vn_reference_s* @vn_reference_insert_pieces(%union.tree_node* %vuse, i32 %set, %union.tree_node* %type, %struct.VEC_vn_reference_op_s_heap* %operands, %union.tree_node* %result, i32 %value_id) #0 !dbg !5197 {
entry:
  %vuse.addr = alloca %union.tree_node*, align 8
  %set.addr = alloca i32, align 4
  %type.addr = alloca %union.tree_node*, align 8
  %operands.addr = alloca %struct.VEC_vn_reference_op_s_heap*, align 8
  %result.addr = alloca %union.tree_node*, align 8
  %value_id.addr = alloca i32, align 4
  %slot = alloca i8**, align 8
  %vr1 = alloca %struct.vn_reference_s*, align 8
  store %union.tree_node* %vuse, %union.tree_node** %vuse.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %vuse.addr, metadata !5200, metadata !DIExpression()), !dbg !5201
  store i32 %set, i32* %set.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %set.addr, metadata !5202, metadata !DIExpression()), !dbg !5203
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !5204, metadata !DIExpression()), !dbg !5205
  store %struct.VEC_vn_reference_op_s_heap* %operands, %struct.VEC_vn_reference_op_s_heap** %operands.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_reference_op_s_heap** %operands.addr, metadata !5206, metadata !DIExpression()), !dbg !5207
  store %union.tree_node* %result, %union.tree_node** %result.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %result.addr, metadata !5208, metadata !DIExpression()), !dbg !5209
  store i32 %value_id, i32* %value_id.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %value_id.addr, metadata !5210, metadata !DIExpression()), !dbg !5211
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !5212, metadata !DIExpression()), !dbg !5213
  call void @llvm.dbg.declare(metadata %struct.vn_reference_s** %vr1, metadata !5214, metadata !DIExpression()), !dbg !5215
  %0 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5216
  %references_pool = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %0, i32 0, i32 5, !dbg !5217
  %1 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** %references_pool, align 8, !dbg !5217
  %call = call i8* @pool_alloc(%struct.alloc_pool_def* %1), !dbg !5218
  %2 = bitcast i8* %call to %struct.vn_reference_s*, !dbg !5219
  store %struct.vn_reference_s* %2, %struct.vn_reference_s** %vr1, align 8, !dbg !5220
  %3 = load i32, i32* %value_id.addr, align 4, !dbg !5221
  %4 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr1, align 8, !dbg !5222
  %value_id1 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %4, i32 0, i32 0, !dbg !5223
  store i32 %3, i32* %value_id1, align 8, !dbg !5224
  %5 = load %union.tree_node*, %union.tree_node** %vuse.addr, align 8, !dbg !5225
  %tobool = icmp ne %union.tree_node* %5, null, !dbg !5225
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5225

cond.true:                                        ; preds = %entry
  %6 = load %union.tree_node*, %union.tree_node** %vuse.addr, align 8, !dbg !5226
  %call2 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %6), !dbg !5226
  %valnum = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call2, i32 0, i32 0, !dbg !5226
  %7 = load %union.tree_node*, %union.tree_node** %valnum, align 8, !dbg !5226
  br label %cond.end, !dbg !5225

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5225

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %7, %cond.true ], [ null, %cond.false ], !dbg !5225
  %8 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr1, align 8, !dbg !5227
  %vuse3 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %8, i32 0, i32 2, !dbg !5228
  store %union.tree_node* %cond, %union.tree_node** %vuse3, align 8, !dbg !5229
  %9 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands.addr, align 8, !dbg !5230
  %call4 = call %struct.VEC_vn_reference_op_s_heap* @valueize_refs(%struct.VEC_vn_reference_op_s_heap* %9), !dbg !5231
  %10 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr1, align 8, !dbg !5232
  %operands5 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %10, i32 0, i32 5, !dbg !5233
  store %struct.VEC_vn_reference_op_s_heap* %call4, %struct.VEC_vn_reference_op_s_heap** %operands5, align 8, !dbg !5234
  %11 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5235
  %12 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr1, align 8, !dbg !5236
  %type6 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %12, i32 0, i32 4, !dbg !5237
  store %union.tree_node* %11, %union.tree_node** %type6, align 8, !dbg !5238
  %13 = load i32, i32* %set.addr, align 4, !dbg !5239
  %14 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr1, align 8, !dbg !5240
  %set7 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %14, i32 0, i32 3, !dbg !5241
  store i32 %13, i32* %set7, align 8, !dbg !5242
  %15 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr1, align 8, !dbg !5243
  %call8 = call i32 @vn_reference_compute_hash(%struct.vn_reference_s* %15), !dbg !5244
  %16 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr1, align 8, !dbg !5245
  %hashcode = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %16, i32 0, i32 1, !dbg !5246
  store i32 %call8, i32* %hashcode, align 4, !dbg !5247
  %17 = load %union.tree_node*, %union.tree_node** %result.addr, align 8, !dbg !5248
  %tobool9 = icmp ne %union.tree_node* %17, null, !dbg !5248
  br i1 %tobool9, label %land.lhs.true, label %if.end, !dbg !5250

land.lhs.true:                                    ; preds = %cond.end
  %18 = load %union.tree_node*, %union.tree_node** %result.addr, align 8, !dbg !5251
  %base = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !5251
  %19 = bitcast %struct.tree_base* %base to i64*, !dbg !5251
  %bf.load = load i64, i64* %19, align 8, !dbg !5251
  %bf.clear = and i64 %bf.load, 65535, !dbg !5251
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5251
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !5252
  br i1 %cmp, label %if.then, label %if.end, !dbg !5253

if.then:                                          ; preds = %land.lhs.true
  %20 = load %union.tree_node*, %union.tree_node** %result.addr, align 8, !dbg !5254
  %call10 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %20), !dbg !5254
  %valnum11 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call10, i32 0, i32 0, !dbg !5254
  %21 = load %union.tree_node*, %union.tree_node** %valnum11, align 8, !dbg !5254
  store %union.tree_node* %21, %union.tree_node** %result.addr, align 8, !dbg !5255
  br label %if.end, !dbg !5256

if.end:                                           ; preds = %if.then, %land.lhs.true, %cond.end
  %22 = load %union.tree_node*, %union.tree_node** %result.addr, align 8, !dbg !5257
  %23 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr1, align 8, !dbg !5258
  %result12 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %23, i32 0, i32 6, !dbg !5259
  store %union.tree_node* %22, %union.tree_node** %result12, align 8, !dbg !5260
  %24 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5261
  %references = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %24, i32 0, i32 2, !dbg !5262
  %25 = load %struct.htab*, %struct.htab** %references, align 8, !dbg !5262
  %26 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr1, align 8, !dbg !5263
  %27 = bitcast %struct.vn_reference_s* %26 to i8*, !dbg !5263
  %28 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr1, align 8, !dbg !5264
  %hashcode13 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %28, i32 0, i32 1, !dbg !5265
  %29 = load i32, i32* %hashcode13, align 4, !dbg !5265
  %call14 = call i8** @htab_find_slot_with_hash(%struct.htab* %25, i8* %27, i32 %29, i32 1), !dbg !5266
  store i8** %call14, i8*** %slot, align 8, !dbg !5267
  %30 = load i8**, i8*** %slot, align 8, !dbg !5268
  %31 = load i8*, i8** %30, align 8, !dbg !5268
  %tobool15 = icmp ne i8* %31, null, !dbg !5268
  br i1 %tobool15, label %cond.true16, label %cond.false17, !dbg !5268

cond.true16:                                      ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0), i32 1355, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5268
  br label %cond.end18, !dbg !5268

cond.false17:                                     ; preds = %if.end
  br label %cond.end18, !dbg !5268

cond.end18:                                       ; preds = %cond.false17, %cond.true16
  %cond19 = phi i32 [ 0, %cond.true16 ], [ 0, %cond.false17 ], !dbg !5268
  %32 = load i8**, i8*** %slot, align 8, !dbg !5269
  %33 = load i8*, i8** %32, align 8, !dbg !5271
  %tobool20 = icmp ne i8* %33, null, !dbg !5271
  br i1 %tobool20, label %if.then21, label %if.end22, !dbg !5272

if.then21:                                        ; preds = %cond.end18
  %34 = load i8**, i8*** %slot, align 8, !dbg !5273
  %35 = load i8*, i8** %34, align 8, !dbg !5274
  call void @free_reference(i8* %35), !dbg !5275
  br label %if.end22, !dbg !5275

if.end22:                                         ; preds = %if.then21, %cond.end18
  %36 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr1, align 8, !dbg !5276
  %37 = bitcast %struct.vn_reference_s* %36 to i8*, !dbg !5276
  %38 = load i8**, i8*** %slot, align 8, !dbg !5277
  store i8* %37, i8** %38, align 8, !dbg !5278
  %39 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr1, align 8, !dbg !5279
  ret %struct.vn_reference_s* %39, !dbg !5280
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @vn_nary_op_compute_hash(%struct.vn_nary_op_s* %vno1) #0 !dbg !5281 {
entry:
  %vno1.addr = alloca %struct.vn_nary_op_s*, align 8
  %hash = alloca i32, align 4
  %i = alloca i32, align 4
  %temp = alloca %union.tree_node*, align 8
  store %struct.vn_nary_op_s* %vno1, %struct.vn_nary_op_s** %vno1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.vn_nary_op_s** %vno1.addr, metadata !5285, metadata !DIExpression()), !dbg !5286
  call void @llvm.dbg.declare(metadata i32* %hash, metadata !5287, metadata !DIExpression()), !dbg !5288
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5289, metadata !DIExpression()), !dbg !5290
  store i32 0, i32* %i, align 4, !dbg !5291
  br label %for.cond, !dbg !5293

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !5294
  %1 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1.addr, align 8, !dbg !5296
  %length = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %1, i32 0, i32 1, !dbg !5297
  %bf.load = load i32, i32* %length, align 4, !dbg !5297
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !5297
  %cmp = icmp ult i32 %0, %bf.lshr, !dbg !5298
  br i1 %cmp, label %for.body, label %for.end, !dbg !5299

for.body:                                         ; preds = %for.cond
  %2 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1.addr, align 8, !dbg !5300
  %op = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %2, i32 0, i32 5, !dbg !5300
  %3 = load i32, i32* %i, align 4, !dbg !5300
  %idxprom = zext i32 %3 to i64, !dbg !5300
  %arrayidx = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op, i64 0, i64 %idxprom, !dbg !5300
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5300
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !5300
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !5300
  %bf.load1 = load i64, i64* %5, align 8, !dbg !5300
  %bf.clear = and i64 %bf.load1, 65535, !dbg !5300
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5300
  %cmp2 = icmp eq i32 %bf.cast, 141, !dbg !5302
  br i1 %cmp2, label %if.then, label %if.end, !dbg !5303

if.then:                                          ; preds = %for.body
  %6 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1.addr, align 8, !dbg !5304
  %op3 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %6, i32 0, i32 5, !dbg !5304
  %7 = load i32, i32* %i, align 4, !dbg !5304
  %idxprom4 = zext i32 %7 to i64, !dbg !5304
  %arrayidx5 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op3, i64 0, i64 %idxprom4, !dbg !5304
  %8 = load %union.tree_node*, %union.tree_node** %arrayidx5, align 8, !dbg !5304
  %call = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %8), !dbg !5304
  %valnum = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call, i32 0, i32 0, !dbg !5304
  %9 = load %union.tree_node*, %union.tree_node** %valnum, align 8, !dbg !5304
  %10 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1.addr, align 8, !dbg !5305
  %op6 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %10, i32 0, i32 5, !dbg !5306
  %11 = load i32, i32* %i, align 4, !dbg !5307
  %idxprom7 = zext i32 %11 to i64, !dbg !5305
  %arrayidx8 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op6, i64 0, i64 %idxprom7, !dbg !5305
  store %union.tree_node* %9, %union.tree_node** %arrayidx8, align 8, !dbg !5308
  br label %if.end, !dbg !5305

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !5309

for.inc:                                          ; preds = %if.end
  %12 = load i32, i32* %i, align 4, !dbg !5310
  %inc = add i32 %12, 1, !dbg !5310
  store i32 %inc, i32* %i, align 4, !dbg !5310
  br label %for.cond, !dbg !5311, !llvm.loop !5312

for.end:                                          ; preds = %for.cond
  %13 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1.addr, align 8, !dbg !5314
  %length9 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %13, i32 0, i32 1, !dbg !5316
  %bf.load10 = load i32, i32* %length9, align 4, !dbg !5316
  %bf.lshr11 = lshr i32 %bf.load10, 16, !dbg !5316
  %cmp12 = icmp eq i32 %bf.lshr11, 2, !dbg !5317
  br i1 %cmp12, label %land.lhs.true, label %if.end33, !dbg !5318

land.lhs.true:                                    ; preds = %for.end
  %14 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1.addr, align 8, !dbg !5319
  %opcode = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %14, i32 0, i32 1, !dbg !5320
  %bf.load13 = load i32, i32* %opcode, align 4, !dbg !5320
  %bf.clear14 = and i32 %bf.load13, 65535, !dbg !5320
  %call15 = call zeroext i8 @commutative_tree_code(i32 %bf.clear14), !dbg !5321
  %conv = zext i8 %call15 to i32, !dbg !5321
  %tobool = icmp ne i32 %conv, 0, !dbg !5321
  br i1 %tobool, label %land.lhs.true16, label %if.end33, !dbg !5322

land.lhs.true16:                                  ; preds = %land.lhs.true
  %15 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1.addr, align 8, !dbg !5323
  %op17 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %15, i32 0, i32 5, !dbg !5324
  %arrayidx18 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op17, i64 0, i64 0, !dbg !5323
  %16 = load %union.tree_node*, %union.tree_node** %arrayidx18, align 8, !dbg !5323
  %17 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1.addr, align 8, !dbg !5325
  %op19 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %17, i32 0, i32 5, !dbg !5326
  %arrayidx20 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op19, i64 0, i64 1, !dbg !5325
  %18 = load %union.tree_node*, %union.tree_node** %arrayidx20, align 8, !dbg !5325
  %call21 = call zeroext i8 @tree_swap_operands_p(%union.tree_node* %16, %union.tree_node* %18, i8 zeroext 0), !dbg !5327
  %conv22 = zext i8 %call21 to i32, !dbg !5327
  %tobool23 = icmp ne i32 %conv22, 0, !dbg !5327
  br i1 %tobool23, label %if.then24, label %if.end33, !dbg !5328

if.then24:                                        ; preds = %land.lhs.true16
  call void @llvm.dbg.declare(metadata %union.tree_node** %temp, metadata !5329, metadata !DIExpression()), !dbg !5331
  %19 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1.addr, align 8, !dbg !5332
  %op25 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %19, i32 0, i32 5, !dbg !5333
  %arrayidx26 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op25, i64 0, i64 0, !dbg !5332
  %20 = load %union.tree_node*, %union.tree_node** %arrayidx26, align 8, !dbg !5332
  store %union.tree_node* %20, %union.tree_node** %temp, align 8, !dbg !5331
  %21 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1.addr, align 8, !dbg !5334
  %op27 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %21, i32 0, i32 5, !dbg !5335
  %arrayidx28 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op27, i64 0, i64 1, !dbg !5334
  %22 = load %union.tree_node*, %union.tree_node** %arrayidx28, align 8, !dbg !5334
  %23 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1.addr, align 8, !dbg !5336
  %op29 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %23, i32 0, i32 5, !dbg !5337
  %arrayidx30 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op29, i64 0, i64 0, !dbg !5336
  store %union.tree_node* %22, %union.tree_node** %arrayidx30, align 8, !dbg !5338
  %24 = load %union.tree_node*, %union.tree_node** %temp, align 8, !dbg !5339
  %25 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1.addr, align 8, !dbg !5340
  %op31 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %25, i32 0, i32 5, !dbg !5341
  %arrayidx32 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op31, i64 0, i64 1, !dbg !5340
  store %union.tree_node* %24, %union.tree_node** %arrayidx32, align 8, !dbg !5342
  br label %if.end33, !dbg !5343

if.end33:                                         ; preds = %if.then24, %land.lhs.true16, %land.lhs.true, %for.end
  %26 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1.addr, align 8, !dbg !5344
  %opcode34 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %26, i32 0, i32 1, !dbg !5345
  %bf.load35 = load i32, i32* %opcode34, align 4, !dbg !5345
  %bf.clear36 = and i32 %bf.load35, 65535, !dbg !5345
  %call37 = call i32 @iterative_hash_hashval_t(i32 %bf.clear36, i32 0), !dbg !5346
  store i32 %call37, i32* %hash, align 4, !dbg !5347
  store i32 0, i32* %i, align 4, !dbg !5348
  br label %for.cond38, !dbg !5350

for.cond38:                                       ; preds = %for.inc49, %if.end33
  %27 = load i32, i32* %i, align 4, !dbg !5351
  %28 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1.addr, align 8, !dbg !5353
  %length39 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %28, i32 0, i32 1, !dbg !5354
  %bf.load40 = load i32, i32* %length39, align 4, !dbg !5354
  %bf.lshr41 = lshr i32 %bf.load40, 16, !dbg !5354
  %cmp42 = icmp ult i32 %27, %bf.lshr41, !dbg !5355
  br i1 %cmp42, label %for.body44, label %for.end51, !dbg !5356

for.body44:                                       ; preds = %for.cond38
  %29 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1.addr, align 8, !dbg !5357
  %op45 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %29, i32 0, i32 5, !dbg !5358
  %30 = load i32, i32* %i, align 4, !dbg !5359
  %idxprom46 = zext i32 %30 to i64, !dbg !5357
  %arrayidx47 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op45, i64 0, i64 %idxprom46, !dbg !5357
  %31 = load %union.tree_node*, %union.tree_node** %arrayidx47, align 8, !dbg !5357
  %32 = load i32, i32* %hash, align 4, !dbg !5360
  %call48 = call i32 @iterative_hash_expr(%union.tree_node* %31, i32 %32), !dbg !5361
  store i32 %call48, i32* %hash, align 4, !dbg !5362
  br label %for.inc49, !dbg !5363

for.inc49:                                        ; preds = %for.body44
  %33 = load i32, i32* %i, align 4, !dbg !5364
  %inc50 = add i32 %33, 1, !dbg !5364
  store i32 %inc50, i32* %i, align 4, !dbg !5364
  br label %for.cond38, !dbg !5365, !llvm.loop !5366

for.end51:                                        ; preds = %for.cond38
  %34 = load i32, i32* %hash, align 4, !dbg !5368
  ret i32 %34, !dbg !5369
}

declare dso_local zeroext i8 @commutative_tree_code(i32) #2

declare dso_local zeroext i8 @tree_swap_operands_p(%union.tree_node*, %union.tree_node*, i8 zeroext) #2

declare dso_local i32 @iterative_hash_hashval_t(i32, i32) #2

declare dso_local i32 @iterative_hash_expr(%union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @vn_nary_op_eq(i8* %p1, i8* %p2) #0 !dbg !5370 {
entry:
  %retval = alloca i32, align 4
  %p1.addr = alloca i8*, align 8
  %p2.addr = alloca i8*, align 8
  %vno1 = alloca %struct.vn_nary_op_s*, align 8
  %vno2 = alloca %struct.vn_nary_op_s*, align 8
  %i = alloca i32, align 4
  store i8* %p1, i8** %p1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p1.addr, metadata !5371, metadata !DIExpression()), !dbg !5372
  store i8* %p2, i8** %p2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p2.addr, metadata !5373, metadata !DIExpression()), !dbg !5374
  call void @llvm.dbg.declare(metadata %struct.vn_nary_op_s** %vno1, metadata !5375, metadata !DIExpression()), !dbg !5377
  %0 = load i8*, i8** %p1.addr, align 8, !dbg !5378
  %1 = bitcast i8* %0 to %struct.vn_nary_op_s*, !dbg !5379
  store %struct.vn_nary_op_s* %1, %struct.vn_nary_op_s** %vno1, align 8, !dbg !5377
  call void @llvm.dbg.declare(metadata %struct.vn_nary_op_s** %vno2, metadata !5380, metadata !DIExpression()), !dbg !5381
  %2 = load i8*, i8** %p2.addr, align 8, !dbg !5382
  %3 = bitcast i8* %2 to %struct.vn_nary_op_s*, !dbg !5383
  store %struct.vn_nary_op_s* %3, %struct.vn_nary_op_s** %vno2, align 8, !dbg !5381
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5384, metadata !DIExpression()), !dbg !5385
  %4 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !5386
  %hashcode = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %4, i32 0, i32 2, !dbg !5388
  %5 = load i32, i32* %hashcode, align 8, !dbg !5388
  %6 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno2, align 8, !dbg !5389
  %hashcode1 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %6, i32 0, i32 2, !dbg !5390
  %7 = load i32, i32* %hashcode1, align 8, !dbg !5390
  %cmp = icmp ne i32 %5, %7, !dbg !5391
  br i1 %cmp, label %if.then, label %if.end, !dbg !5392

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !5393
  br label %return, !dbg !5393

if.end:                                           ; preds = %entry
  %8 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !5394
  %opcode = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %8, i32 0, i32 1, !dbg !5396
  %bf.load = load i32, i32* %opcode, align 4, !dbg !5396
  %bf.clear = and i32 %bf.load, 65535, !dbg !5396
  %9 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno2, align 8, !dbg !5397
  %opcode2 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %9, i32 0, i32 1, !dbg !5398
  %bf.load3 = load i32, i32* %opcode2, align 4, !dbg !5398
  %bf.clear4 = and i32 %bf.load3, 65535, !dbg !5398
  %cmp5 = icmp ne i32 %bf.clear, %bf.clear4, !dbg !5399
  br i1 %cmp5, label %if.then7, label %lor.lhs.false, !dbg !5400

lor.lhs.false:                                    ; preds = %if.end
  %10 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !5401
  %type = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %10, i32 0, i32 4, !dbg !5402
  %11 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5402
  %12 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno2, align 8, !dbg !5403
  %type6 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %12, i32 0, i32 4, !dbg !5404
  %13 = load %union.tree_node*, %union.tree_node** %type6, align 8, !dbg !5404
  %call = call zeroext i8 @types_compatible_p(%union.tree_node* %11, %union.tree_node* %13), !dbg !5405
  %tobool = icmp ne i8 %call, 0, !dbg !5405
  br i1 %tobool, label %if.end8, label %if.then7, !dbg !5406

if.then7:                                         ; preds = %lor.lhs.false, %if.end
  store i32 0, i32* %retval, align 4, !dbg !5407
  br label %return, !dbg !5407

if.end8:                                          ; preds = %lor.lhs.false
  store i32 0, i32* %i, align 4, !dbg !5408
  br label %for.cond, !dbg !5410

for.cond:                                         ; preds = %for.inc, %if.end8
  %14 = load i32, i32* %i, align 4, !dbg !5411
  %15 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !5413
  %length = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %15, i32 0, i32 1, !dbg !5414
  %bf.load9 = load i32, i32* %length, align 4, !dbg !5414
  %bf.lshr = lshr i32 %bf.load9, 16, !dbg !5414
  %cmp10 = icmp ult i32 %14, %bf.lshr, !dbg !5415
  br i1 %cmp10, label %for.body, label %for.end, !dbg !5416

for.body:                                         ; preds = %for.cond
  %16 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !5417
  %op = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %16, i32 0, i32 5, !dbg !5419
  %17 = load i32, i32* %i, align 4, !dbg !5420
  %idxprom = zext i32 %17 to i64, !dbg !5417
  %arrayidx = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op, i64 0, i64 %idxprom, !dbg !5417
  %18 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5417
  %19 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno2, align 8, !dbg !5421
  %op11 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %19, i32 0, i32 5, !dbg !5422
  %20 = load i32, i32* %i, align 4, !dbg !5423
  %idxprom12 = zext i32 %20 to i64, !dbg !5421
  %arrayidx13 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op11, i64 0, i64 %idxprom12, !dbg !5421
  %21 = load %union.tree_node*, %union.tree_node** %arrayidx13, align 8, !dbg !5421
  %call14 = call zeroext i8 @expressions_equal_p(%union.tree_node* %18, %union.tree_node* %21), !dbg !5424
  %tobool15 = icmp ne i8 %call14, 0, !dbg !5424
  br i1 %tobool15, label %if.end17, label %if.then16, !dbg !5425

if.then16:                                        ; preds = %for.body
  store i32 0, i32* %retval, align 4, !dbg !5426
  br label %return, !dbg !5426

if.end17:                                         ; preds = %for.body
  br label %for.inc, !dbg !5427

for.inc:                                          ; preds = %if.end17
  %22 = load i32, i32* %i, align 4, !dbg !5428
  %inc = add i32 %22, 1, !dbg !5428
  store i32 %inc, i32* %i, align 4, !dbg !5428
  br label %for.cond, !dbg !5429, !llvm.loop !5430

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval, align 4, !dbg !5432
  br label %return, !dbg !5432

return:                                           ; preds = %for.end, %if.then16, %if.then7, %if.then
  %23 = load i32, i32* %retval, align 4, !dbg !5433
  ret i32 %23, !dbg !5433
}

declare dso_local zeroext i8 @types_compatible_p(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @expressions_equal_p(%union.tree_node* %e1, %union.tree_node* %e2) #0 !dbg !5434 {
entry:
  %retval = alloca i8, align 1
  %e1.addr = alloca %union.tree_node*, align 8
  %e2.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %e1, %union.tree_node** %e1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %e1.addr, metadata !5437, metadata !DIExpression()), !dbg !5438
  store %union.tree_node* %e2, %union.tree_node** %e2.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %e2.addr, metadata !5439, metadata !DIExpression()), !dbg !5440
  %0 = load %union.tree_node*, %union.tree_node** %e1.addr, align 8, !dbg !5441
  %1 = load %union.tree_node*, %union.tree_node** %e2.addr, align 8, !dbg !5443
  %cmp = icmp eq %union.tree_node* %0, %1, !dbg !5444
  br i1 %cmp, label %if.then, label %if.end, !dbg !5445

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !5446
  br label %return, !dbg !5446

if.end:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %e1.addr, align 8, !dbg !5447
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !5447
  br i1 %tobool, label %lor.lhs.false, label %if.then2, !dbg !5449

lor.lhs.false:                                    ; preds = %if.end
  %3 = load %union.tree_node*, %union.tree_node** %e2.addr, align 8, !dbg !5450
  %tobool1 = icmp ne %union.tree_node* %3, null, !dbg !5450
  br i1 %tobool1, label %if.end3, label %if.then2, !dbg !5451

if.then2:                                         ; preds = %lor.lhs.false, %if.end
  store i8 0, i8* %retval, align 1, !dbg !5452
  br label %return, !dbg !5452

if.end3:                                          ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %e1.addr, align 8, !dbg !5453
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !5453
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !5453
  %bf.load = load i64, i64* %5, align 8, !dbg !5453
  %bf.clear = and i64 %bf.load, 65535, !dbg !5453
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5453
  %6 = load %union.tree_node*, %union.tree_node** %e2.addr, align 8, !dbg !5455
  %base4 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !5455
  %7 = bitcast %struct.tree_base* %base4 to i64*, !dbg !5455
  %bf.load5 = load i64, i64* %7, align 8, !dbg !5455
  %bf.clear6 = and i64 %bf.load5, 65535, !dbg !5455
  %bf.cast7 = trunc i64 %bf.clear6 to i32, !dbg !5455
  %cmp8 = icmp eq i32 %bf.cast, %bf.cast7, !dbg !5456
  br i1 %cmp8, label %land.lhs.true, label %if.end11, !dbg !5457

land.lhs.true:                                    ; preds = %if.end3
  %8 = load %union.tree_node*, %union.tree_node** %e1.addr, align 8, !dbg !5458
  %9 = load %union.tree_node*, %union.tree_node** %e2.addr, align 8, !dbg !5459
  %call = call i32 @operand_equal_p(%union.tree_node* %8, %union.tree_node* %9, i32 2), !dbg !5460
  %tobool9 = icmp ne i32 %call, 0, !dbg !5460
  br i1 %tobool9, label %if.then10, label %if.end11, !dbg !5461

if.then10:                                        ; preds = %land.lhs.true
  store i8 1, i8* %retval, align 1, !dbg !5462
  br label %return, !dbg !5462

if.end11:                                         ; preds = %land.lhs.true, %if.end3
  store i8 0, i8* %retval, align 1, !dbg !5463
  br label %return, !dbg !5463

return:                                           ; preds = %if.end11, %if.then10, %if.then2, %if.then
  %10 = load i8, i8* %retval, align 1, !dbg !5464
  ret i8 %10, !dbg !5464
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @vn_nary_op_lookup_pieces(i32 %length, i32 %code, %union.tree_node* %type, %union.tree_node* %op0, %union.tree_node* %op1, %union.tree_node* %op2, %union.tree_node* %op3, %struct.vn_nary_op_s** %vnresult) #0 !dbg !5465 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %length.addr = alloca i32, align 4
  %code.addr = alloca i32, align 4
  %type.addr = alloca %union.tree_node*, align 8
  %op0.addr = alloca %union.tree_node*, align 8
  %op1.addr = alloca %union.tree_node*, align 8
  %op2.addr = alloca %union.tree_node*, align 8
  %op3.addr = alloca %union.tree_node*, align 8
  %vnresult.addr = alloca %struct.vn_nary_op_s**, align 8
  %slot = alloca i8**, align 8
  %vno1 = alloca %struct.vn_nary_op_s, align 8
  store i32 %length, i32* %length.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %length.addr, metadata !5469, metadata !DIExpression()), !dbg !5470
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !5471, metadata !DIExpression()), !dbg !5472
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !5473, metadata !DIExpression()), !dbg !5474
  store %union.tree_node* %op0, %union.tree_node** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0.addr, metadata !5475, metadata !DIExpression()), !dbg !5476
  store %union.tree_node* %op1, %union.tree_node** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1.addr, metadata !5477, metadata !DIExpression()), !dbg !5478
  store %union.tree_node* %op2, %union.tree_node** %op2.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op2.addr, metadata !5479, metadata !DIExpression()), !dbg !5480
  store %union.tree_node* %op3, %union.tree_node** %op3.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op3.addr, metadata !5481, metadata !DIExpression()), !dbg !5482
  store %struct.vn_nary_op_s** %vnresult, %struct.vn_nary_op_s*** %vnresult.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.vn_nary_op_s*** %vnresult.addr, metadata !5483, metadata !DIExpression()), !dbg !5484
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !5485, metadata !DIExpression()), !dbg !5486
  call void @llvm.dbg.declare(metadata %struct.vn_nary_op_s* %vno1, metadata !5487, metadata !DIExpression()), !dbg !5488
  %0 = load %struct.vn_nary_op_s**, %struct.vn_nary_op_s*** %vnresult.addr, align 8, !dbg !5489
  %tobool = icmp ne %struct.vn_nary_op_s** %0, null, !dbg !5489
  br i1 %tobool, label %if.then, label %if.end, !dbg !5491

if.then:                                          ; preds = %entry
  %1 = load %struct.vn_nary_op_s**, %struct.vn_nary_op_s*** %vnresult.addr, align 8, !dbg !5492
  store %struct.vn_nary_op_s* null, %struct.vn_nary_op_s** %1, align 8, !dbg !5493
  br label %if.end, !dbg !5494

if.end:                                           ; preds = %if.then, %entry
  %2 = load i32, i32* %code.addr, align 4, !dbg !5495
  %opcode = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %vno1, i32 0, i32 1, !dbg !5496
  %bf.load = load i32, i32* %opcode, align 4, !dbg !5497
  %bf.value = and i32 %2, 65535, !dbg !5497
  %bf.clear = and i32 %bf.load, -65536, !dbg !5497
  %bf.set = or i32 %bf.clear, %bf.value, !dbg !5497
  store i32 %bf.set, i32* %opcode, align 4, !dbg !5497
  %3 = load i32, i32* %length.addr, align 4, !dbg !5498
  %length1 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %vno1, i32 0, i32 1, !dbg !5499
  %bf.load2 = load i32, i32* %length1, align 4, !dbg !5500
  %bf.value3 = and i32 %3, 65535, !dbg !5500
  %bf.shl = shl i32 %bf.value3, 16, !dbg !5500
  %bf.clear4 = and i32 %bf.load2, 65535, !dbg !5500
  %bf.set5 = or i32 %bf.clear4, %bf.shl, !dbg !5500
  store i32 %bf.set5, i32* %length1, align 4, !dbg !5500
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5501
  %type6 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %vno1, i32 0, i32 4, !dbg !5502
  store %union.tree_node* %4, %union.tree_node** %type6, align 8, !dbg !5503
  %5 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !5504
  %op = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %vno1, i32 0, i32 5, !dbg !5505
  %arrayidx = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op, i64 0, i64 0, !dbg !5506
  store %union.tree_node* %5, %union.tree_node** %arrayidx, align 8, !dbg !5507
  %6 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !5508
  %op7 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %vno1, i32 0, i32 5, !dbg !5509
  %arrayidx8 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op7, i64 0, i64 1, !dbg !5510
  store %union.tree_node* %6, %union.tree_node** %arrayidx8, align 8, !dbg !5511
  %7 = load %union.tree_node*, %union.tree_node** %op2.addr, align 8, !dbg !5512
  %op9 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %vno1, i32 0, i32 5, !dbg !5513
  %arrayidx10 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op9, i64 0, i64 2, !dbg !5514
  store %union.tree_node* %7, %union.tree_node** %arrayidx10, align 8, !dbg !5515
  %8 = load %union.tree_node*, %union.tree_node** %op3.addr, align 8, !dbg !5516
  %op11 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %vno1, i32 0, i32 5, !dbg !5517
  %arrayidx12 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op11, i64 0, i64 3, !dbg !5518
  store %union.tree_node* %8, %union.tree_node** %arrayidx12, align 8, !dbg !5519
  %call = call i32 @vn_nary_op_compute_hash(%struct.vn_nary_op_s* %vno1), !dbg !5520
  %hashcode = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %vno1, i32 0, i32 2, !dbg !5521
  store i32 %call, i32* %hashcode, align 8, !dbg !5522
  %9 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5523
  %nary = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %9, i32 0, i32 0, !dbg !5524
  %10 = load %struct.htab*, %struct.htab** %nary, align 8, !dbg !5524
  %11 = bitcast %struct.vn_nary_op_s* %vno1 to i8*, !dbg !5525
  %hashcode13 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %vno1, i32 0, i32 2, !dbg !5526
  %12 = load i32, i32* %hashcode13, align 8, !dbg !5526
  %call14 = call i8** @htab_find_slot_with_hash(%struct.htab* %10, i8* %11, i32 %12, i32 0), !dbg !5527
  store i8** %call14, i8*** %slot, align 8, !dbg !5528
  %13 = load i8**, i8*** %slot, align 8, !dbg !5529
  %tobool15 = icmp ne i8** %13, null, !dbg !5529
  br i1 %tobool15, label %if.end20, label %land.lhs.true, !dbg !5531

land.lhs.true:                                    ; preds = %if.end
  %14 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5532
  %15 = load %struct.vn_tables_s*, %struct.vn_tables_s** @optimistic_info, align 8, !dbg !5533
  %cmp = icmp eq %struct.vn_tables_s* %14, %15, !dbg !5534
  br i1 %cmp, label %if.then16, label %if.end20, !dbg !5535

if.then16:                                        ; preds = %land.lhs.true
  %16 = load %struct.vn_tables_s*, %struct.vn_tables_s** @valid_info, align 8, !dbg !5536
  %nary17 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %16, i32 0, i32 0, !dbg !5537
  %17 = load %struct.htab*, %struct.htab** %nary17, align 8, !dbg !5537
  %18 = bitcast %struct.vn_nary_op_s* %vno1 to i8*, !dbg !5538
  %hashcode18 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %vno1, i32 0, i32 2, !dbg !5539
  %19 = load i32, i32* %hashcode18, align 8, !dbg !5539
  %call19 = call i8** @htab_find_slot_with_hash(%struct.htab* %17, i8* %18, i32 %19, i32 0), !dbg !5540
  store i8** %call19, i8*** %slot, align 8, !dbg !5541
  br label %if.end20, !dbg !5542

if.end20:                                         ; preds = %if.then16, %land.lhs.true, %if.end
  %20 = load i8**, i8*** %slot, align 8, !dbg !5543
  %tobool21 = icmp ne i8** %20, null, !dbg !5543
  br i1 %tobool21, label %if.end23, label %if.then22, !dbg !5545

if.then22:                                        ; preds = %if.end20
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5546
  br label %return, !dbg !5546

if.end23:                                         ; preds = %if.end20
  %21 = load %struct.vn_nary_op_s**, %struct.vn_nary_op_s*** %vnresult.addr, align 8, !dbg !5547
  %tobool24 = icmp ne %struct.vn_nary_op_s** %21, null, !dbg !5547
  br i1 %tobool24, label %if.then25, label %if.end26, !dbg !5549

if.then25:                                        ; preds = %if.end23
  %22 = load i8**, i8*** %slot, align 8, !dbg !5550
  %23 = load i8*, i8** %22, align 8, !dbg !5551
  %24 = bitcast i8* %23 to %struct.vn_nary_op_s*, !dbg !5552
  %25 = load %struct.vn_nary_op_s**, %struct.vn_nary_op_s*** %vnresult.addr, align 8, !dbg !5553
  store %struct.vn_nary_op_s* %24, %struct.vn_nary_op_s** %25, align 8, !dbg !5554
  br label %if.end26, !dbg !5555

if.end26:                                         ; preds = %if.then25, %if.end23
  %26 = load i8**, i8*** %slot, align 8, !dbg !5556
  %27 = load i8*, i8** %26, align 8, !dbg !5557
  %28 = bitcast i8* %27 to %struct.vn_nary_op_s*, !dbg !5558
  %result = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %28, i32 0, i32 3, !dbg !5559
  %29 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !5559
  store %union.tree_node* %29, %union.tree_node** %retval, align 8, !dbg !5560
  br label %return, !dbg !5560

return:                                           ; preds = %if.end26, %if.then22
  %30 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5561
  ret %union.tree_node* %30, !dbg !5561
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @vn_nary_op_lookup(%union.tree_node* %op, %struct.vn_nary_op_s** %vnresult) #0 !dbg !5562 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %op.addr = alloca %union.tree_node*, align 8
  %vnresult.addr = alloca %struct.vn_nary_op_s**, align 8
  %slot = alloca i8**, align 8
  %vno1 = alloca %struct.vn_nary_op_s, align 8
  %i = alloca i32, align 4
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !5565, metadata !DIExpression()), !dbg !5566
  store %struct.vn_nary_op_s** %vnresult, %struct.vn_nary_op_s*** %vnresult.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.vn_nary_op_s*** %vnresult.addr, metadata !5567, metadata !DIExpression()), !dbg !5568
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !5569, metadata !DIExpression()), !dbg !5570
  call void @llvm.dbg.declare(metadata %struct.vn_nary_op_s* %vno1, metadata !5571, metadata !DIExpression()), !dbg !5572
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5573, metadata !DIExpression()), !dbg !5574
  %0 = load %struct.vn_nary_op_s**, %struct.vn_nary_op_s*** %vnresult.addr, align 8, !dbg !5575
  %tobool = icmp ne %struct.vn_nary_op_s** %0, null, !dbg !5575
  br i1 %tobool, label %if.then, label %if.end, !dbg !5577

if.then:                                          ; preds = %entry
  %1 = load %struct.vn_nary_op_s**, %struct.vn_nary_op_s*** %vnresult.addr, align 8, !dbg !5578
  store %struct.vn_nary_op_s* null, %struct.vn_nary_op_s** %1, align 8, !dbg !5579
  br label %if.end, !dbg !5580

if.end:                                           ; preds = %if.then, %entry
  %2 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !5581
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !5581
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !5581
  %bf.load = load i64, i64* %3, align 8, !dbg !5581
  %bf.clear = and i64 %bf.load, 65535, !dbg !5581
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5581
  %opcode = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %vno1, i32 0, i32 1, !dbg !5582
  %bf.load1 = load i32, i32* %opcode, align 4, !dbg !5583
  %bf.value = and i32 %bf.cast, 65535, !dbg !5583
  %bf.clear2 = and i32 %bf.load1, -65536, !dbg !5583
  %bf.set = or i32 %bf.clear2, %bf.value, !dbg !5583
  store i32 %bf.set, i32* %opcode, align 4, !dbg !5583
  %4 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !5584
  %base3 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !5584
  %5 = bitcast %struct.tree_base* %base3 to i64*, !dbg !5584
  %bf.load4 = load i64, i64* %5, align 8, !dbg !5584
  %bf.clear5 = and i64 %bf.load4, 65535, !dbg !5584
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !5584
  %idxprom = sext i32 %bf.cast6 to i64, !dbg !5584
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @tree_code_length, i64 0, i64 %idxprom, !dbg !5584
  %6 = load i8, i8* %arrayidx, align 1, !dbg !5584
  %conv = zext i8 %6 to i32, !dbg !5584
  %length = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %vno1, i32 0, i32 1, !dbg !5585
  %bf.load7 = load i32, i32* %length, align 4, !dbg !5586
  %bf.value8 = and i32 %conv, 65535, !dbg !5586
  %bf.shl = shl i32 %bf.value8, 16, !dbg !5586
  %bf.clear9 = and i32 %bf.load7, 65535, !dbg !5586
  %bf.set10 = or i32 %bf.clear9, %bf.shl, !dbg !5586
  store i32 %bf.set10, i32* %length, align 4, !dbg !5586
  %7 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !5587
  %common = bitcast %union.tree_node* %7 to %struct.tree_common*, !dbg !5587
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5587
  %8 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5587
  %type11 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %vno1, i32 0, i32 4, !dbg !5588
  store %union.tree_node* %8, %union.tree_node** %type11, align 8, !dbg !5589
  store i32 0, i32* %i, align 4, !dbg !5590
  br label %for.cond, !dbg !5592

for.cond:                                         ; preds = %for.inc, %if.end
  %9 = load i32, i32* %i, align 4, !dbg !5593
  %length12 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %vno1, i32 0, i32 1, !dbg !5595
  %bf.load13 = load i32, i32* %length12, align 4, !dbg !5595
  %bf.lshr = lshr i32 %bf.load13, 16, !dbg !5595
  %cmp = icmp ult i32 %9, %bf.lshr, !dbg !5596
  br i1 %cmp, label %for.body, label %for.end, !dbg !5597

for.body:                                         ; preds = %for.cond
  %10 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !5598
  %exp = bitcast %union.tree_node* %10 to %struct.tree_exp*, !dbg !5598
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !5598
  %11 = load i32, i32* %i, align 4, !dbg !5598
  %idxprom15 = zext i32 %11 to i64, !dbg !5598
  %arrayidx16 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 %idxprom15, !dbg !5598
  %12 = load %union.tree_node*, %union.tree_node** %arrayidx16, align 8, !dbg !5598
  %op17 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %vno1, i32 0, i32 5, !dbg !5599
  %13 = load i32, i32* %i, align 4, !dbg !5600
  %idxprom18 = zext i32 %13 to i64, !dbg !5601
  %arrayidx19 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op17, i64 0, i64 %idxprom18, !dbg !5601
  store %union.tree_node* %12, %union.tree_node** %arrayidx19, align 8, !dbg !5602
  br label %for.inc, !dbg !5601

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %i, align 4, !dbg !5603
  %inc = add i32 %14, 1, !dbg !5603
  store i32 %inc, i32* %i, align 4, !dbg !5603
  br label %for.cond, !dbg !5604, !llvm.loop !5605

for.end:                                          ; preds = %for.cond
  %call = call i32 @vn_nary_op_compute_hash(%struct.vn_nary_op_s* %vno1), !dbg !5607
  %hashcode = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %vno1, i32 0, i32 2, !dbg !5608
  store i32 %call, i32* %hashcode, align 8, !dbg !5609
  %15 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5610
  %nary = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %15, i32 0, i32 0, !dbg !5611
  %16 = load %struct.htab*, %struct.htab** %nary, align 8, !dbg !5611
  %17 = bitcast %struct.vn_nary_op_s* %vno1 to i8*, !dbg !5612
  %hashcode20 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %vno1, i32 0, i32 2, !dbg !5613
  %18 = load i32, i32* %hashcode20, align 8, !dbg !5613
  %call21 = call i8** @htab_find_slot_with_hash(%struct.htab* %16, i8* %17, i32 %18, i32 0), !dbg !5614
  store i8** %call21, i8*** %slot, align 8, !dbg !5615
  %19 = load i8**, i8*** %slot, align 8, !dbg !5616
  %tobool22 = icmp ne i8** %19, null, !dbg !5616
  br i1 %tobool22, label %if.end29, label %land.lhs.true, !dbg !5618

land.lhs.true:                                    ; preds = %for.end
  %20 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5619
  %21 = load %struct.vn_tables_s*, %struct.vn_tables_s** @optimistic_info, align 8, !dbg !5620
  %cmp23 = icmp eq %struct.vn_tables_s* %20, %21, !dbg !5621
  br i1 %cmp23, label %if.then25, label %if.end29, !dbg !5622

if.then25:                                        ; preds = %land.lhs.true
  %22 = load %struct.vn_tables_s*, %struct.vn_tables_s** @valid_info, align 8, !dbg !5623
  %nary26 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %22, i32 0, i32 0, !dbg !5624
  %23 = load %struct.htab*, %struct.htab** %nary26, align 8, !dbg !5624
  %24 = bitcast %struct.vn_nary_op_s* %vno1 to i8*, !dbg !5625
  %hashcode27 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %vno1, i32 0, i32 2, !dbg !5626
  %25 = load i32, i32* %hashcode27, align 8, !dbg !5626
  %call28 = call i8** @htab_find_slot_with_hash(%struct.htab* %23, i8* %24, i32 %25, i32 0), !dbg !5627
  store i8** %call28, i8*** %slot, align 8, !dbg !5628
  br label %if.end29, !dbg !5629

if.end29:                                         ; preds = %if.then25, %land.lhs.true, %for.end
  %26 = load i8**, i8*** %slot, align 8, !dbg !5630
  %tobool30 = icmp ne i8** %26, null, !dbg !5630
  br i1 %tobool30, label %if.end32, label %if.then31, !dbg !5632

if.then31:                                        ; preds = %if.end29
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5633
  br label %return, !dbg !5633

if.end32:                                         ; preds = %if.end29
  %27 = load %struct.vn_nary_op_s**, %struct.vn_nary_op_s*** %vnresult.addr, align 8, !dbg !5634
  %tobool33 = icmp ne %struct.vn_nary_op_s** %27, null, !dbg !5634
  br i1 %tobool33, label %if.then34, label %if.end35, !dbg !5636

if.then34:                                        ; preds = %if.end32
  %28 = load i8**, i8*** %slot, align 8, !dbg !5637
  %29 = load i8*, i8** %28, align 8, !dbg !5638
  %30 = bitcast i8* %29 to %struct.vn_nary_op_s*, !dbg !5639
  %31 = load %struct.vn_nary_op_s**, %struct.vn_nary_op_s*** %vnresult.addr, align 8, !dbg !5640
  store %struct.vn_nary_op_s* %30, %struct.vn_nary_op_s** %31, align 8, !dbg !5641
  br label %if.end35, !dbg !5642

if.end35:                                         ; preds = %if.then34, %if.end32
  %32 = load i8**, i8*** %slot, align 8, !dbg !5643
  %33 = load i8*, i8** %32, align 8, !dbg !5644
  %34 = bitcast i8* %33 to %struct.vn_nary_op_s*, !dbg !5645
  %result = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %34, i32 0, i32 3, !dbg !5646
  %35 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !5646
  store %union.tree_node* %35, %union.tree_node** %retval, align 8, !dbg !5647
  br label %return, !dbg !5647

return:                                           ; preds = %if.end35, %if.then31
  %36 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5648
  ret %union.tree_node* %36, !dbg !5648
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @vn_nary_op_lookup_stmt(%union.gimple_statement_d* %stmt, %struct.vn_nary_op_s** %vnresult) #0 !dbg !5649 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %vnresult.addr = alloca %struct.vn_nary_op_s**, align 8
  %slot = alloca i8**, align 8
  %vno1 = alloca %struct.vn_nary_op_s, align 8
  %i = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5652, metadata !DIExpression()), !dbg !5653
  store %struct.vn_nary_op_s** %vnresult, %struct.vn_nary_op_s*** %vnresult.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.vn_nary_op_s*** %vnresult.addr, metadata !5654, metadata !DIExpression()), !dbg !5655
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !5656, metadata !DIExpression()), !dbg !5657
  call void @llvm.dbg.declare(metadata %struct.vn_nary_op_s* %vno1, metadata !5658, metadata !DIExpression()), !dbg !5659
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5660, metadata !DIExpression()), !dbg !5661
  %0 = load %struct.vn_nary_op_s**, %struct.vn_nary_op_s*** %vnresult.addr, align 8, !dbg !5662
  %tobool = icmp ne %struct.vn_nary_op_s** %0, null, !dbg !5662
  br i1 %tobool, label %if.then, label %if.end, !dbg !5664

if.then:                                          ; preds = %entry
  %1 = load %struct.vn_nary_op_s**, %struct.vn_nary_op_s*** %vnresult.addr, align 8, !dbg !5665
  store %struct.vn_nary_op_s* null, %struct.vn_nary_op_s** %1, align 8, !dbg !5666
  br label %if.end, !dbg !5667

if.end:                                           ; preds = %if.then, %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5668
  %call = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %2), !dbg !5669
  %opcode = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %vno1, i32 0, i32 1, !dbg !5670
  %bf.load = load i32, i32* %opcode, align 4, !dbg !5671
  %bf.value = and i32 %call, 65535, !dbg !5671
  %bf.clear = and i32 %bf.load, -65536, !dbg !5671
  %bf.set = or i32 %bf.clear, %bf.value, !dbg !5671
  store i32 %bf.set, i32* %opcode, align 4, !dbg !5671
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5672
  %call1 = call i32 @gimple_num_ops(%union.gimple_statement_d* %3), !dbg !5673
  %sub = sub i32 %call1, 1, !dbg !5674
  %length = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %vno1, i32 0, i32 1, !dbg !5675
  %bf.load2 = load i32, i32* %length, align 4, !dbg !5676
  %bf.value3 = and i32 %sub, 65535, !dbg !5676
  %bf.shl = shl i32 %bf.value3, 16, !dbg !5676
  %bf.clear4 = and i32 %bf.load2, 65535, !dbg !5676
  %bf.set5 = or i32 %bf.clear4, %bf.shl, !dbg !5676
  store i32 %bf.set5, i32* %length, align 4, !dbg !5676
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5677
  %call6 = call %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %4), !dbg !5678
  %type = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %vno1, i32 0, i32 4, !dbg !5679
  store %union.tree_node* %call6, %union.tree_node** %type, align 8, !dbg !5680
  store i32 0, i32* %i, align 4, !dbg !5681
  br label %for.cond, !dbg !5683

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load i32, i32* %i, align 4, !dbg !5684
  %length7 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %vno1, i32 0, i32 1, !dbg !5686
  %bf.load8 = load i32, i32* %length7, align 4, !dbg !5686
  %bf.lshr = lshr i32 %bf.load8, 16, !dbg !5686
  %cmp = icmp ult i32 %5, %bf.lshr, !dbg !5687
  br i1 %cmp, label %for.body, label %for.end, !dbg !5688

for.body:                                         ; preds = %for.cond
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5689
  %7 = load i32, i32* %i, align 4, !dbg !5690
  %add = add i32 %7, 1, !dbg !5691
  %call9 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %6, i32 %add), !dbg !5692
  %op = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %vno1, i32 0, i32 5, !dbg !5693
  %8 = load i32, i32* %i, align 4, !dbg !5694
  %idxprom = zext i32 %8 to i64, !dbg !5695
  %arrayidx = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op, i64 0, i64 %idxprom, !dbg !5695
  store %union.tree_node* %call9, %union.tree_node** %arrayidx, align 8, !dbg !5696
  br label %for.inc, !dbg !5695

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4, !dbg !5697
  %inc = add i32 %9, 1, !dbg !5697
  store i32 %inc, i32* %i, align 4, !dbg !5697
  br label %for.cond, !dbg !5698, !llvm.loop !5699

for.end:                                          ; preds = %for.cond
  %opcode10 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %vno1, i32 0, i32 1, !dbg !5701
  %bf.load11 = load i32, i32* %opcode10, align 4, !dbg !5701
  %bf.clear12 = and i32 %bf.load11, 65535, !dbg !5701
  %cmp13 = icmp eq i32 %bf.clear12, 43, !dbg !5703
  br i1 %cmp13, label %if.then23, label %lor.lhs.false, !dbg !5704

lor.lhs.false:                                    ; preds = %for.end
  %opcode14 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %vno1, i32 0, i32 1, !dbg !5705
  %bf.load15 = load i32, i32* %opcode14, align 4, !dbg !5705
  %bf.clear16 = and i32 %bf.load15, 65535, !dbg !5705
  %cmp17 = icmp eq i32 %bf.clear16, 44, !dbg !5706
  br i1 %cmp17, label %if.then23, label %lor.lhs.false18, !dbg !5707

lor.lhs.false18:                                  ; preds = %lor.lhs.false
  %opcode19 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %vno1, i32 0, i32 1, !dbg !5708
  %bf.load20 = load i32, i32* %opcode19, align 4, !dbg !5708
  %bf.clear21 = and i32 %bf.load20, 65535, !dbg !5708
  %cmp22 = icmp eq i32 %bf.clear21, 118, !dbg !5709
  br i1 %cmp22, label %if.then23, label %if.end29, !dbg !5710

if.then23:                                        ; preds = %lor.lhs.false18, %lor.lhs.false, %for.end
  %op24 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %vno1, i32 0, i32 5, !dbg !5711
  %arrayidx25 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op24, i64 0, i64 0, !dbg !5711
  %10 = load %union.tree_node*, %union.tree_node** %arrayidx25, align 8, !dbg !5711
  %exp = bitcast %union.tree_node* %10 to %struct.tree_exp*, !dbg !5711
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !5711
  %arrayidx26 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !5711
  %11 = load %union.tree_node*, %union.tree_node** %arrayidx26, align 8, !dbg !5711
  %op27 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %vno1, i32 0, i32 5, !dbg !5712
  %arrayidx28 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op27, i64 0, i64 0, !dbg !5713
  store %union.tree_node* %11, %union.tree_node** %arrayidx28, align 8, !dbg !5714
  br label %if.end29, !dbg !5713

if.end29:                                         ; preds = %if.then23, %lor.lhs.false18
  %call30 = call i32 @vn_nary_op_compute_hash(%struct.vn_nary_op_s* %vno1), !dbg !5715
  %hashcode = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %vno1, i32 0, i32 2, !dbg !5716
  store i32 %call30, i32* %hashcode, align 8, !dbg !5717
  %12 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5718
  %nary = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %12, i32 0, i32 0, !dbg !5719
  %13 = load %struct.htab*, %struct.htab** %nary, align 8, !dbg !5719
  %14 = bitcast %struct.vn_nary_op_s* %vno1 to i8*, !dbg !5720
  %hashcode31 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %vno1, i32 0, i32 2, !dbg !5721
  %15 = load i32, i32* %hashcode31, align 8, !dbg !5721
  %call32 = call i8** @htab_find_slot_with_hash(%struct.htab* %13, i8* %14, i32 %15, i32 0), !dbg !5722
  store i8** %call32, i8*** %slot, align 8, !dbg !5723
  %16 = load i8**, i8*** %slot, align 8, !dbg !5724
  %tobool33 = icmp ne i8** %16, null, !dbg !5724
  br i1 %tobool33, label %if.end39, label %land.lhs.true, !dbg !5726

land.lhs.true:                                    ; preds = %if.end29
  %17 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5727
  %18 = load %struct.vn_tables_s*, %struct.vn_tables_s** @optimistic_info, align 8, !dbg !5728
  %cmp34 = icmp eq %struct.vn_tables_s* %17, %18, !dbg !5729
  br i1 %cmp34, label %if.then35, label %if.end39, !dbg !5730

if.then35:                                        ; preds = %land.lhs.true
  %19 = load %struct.vn_tables_s*, %struct.vn_tables_s** @valid_info, align 8, !dbg !5731
  %nary36 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %19, i32 0, i32 0, !dbg !5732
  %20 = load %struct.htab*, %struct.htab** %nary36, align 8, !dbg !5732
  %21 = bitcast %struct.vn_nary_op_s* %vno1 to i8*, !dbg !5733
  %hashcode37 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %vno1, i32 0, i32 2, !dbg !5734
  %22 = load i32, i32* %hashcode37, align 8, !dbg !5734
  %call38 = call i8** @htab_find_slot_with_hash(%struct.htab* %20, i8* %21, i32 %22, i32 0), !dbg !5735
  store i8** %call38, i8*** %slot, align 8, !dbg !5736
  br label %if.end39, !dbg !5737

if.end39:                                         ; preds = %if.then35, %land.lhs.true, %if.end29
  %23 = load i8**, i8*** %slot, align 8, !dbg !5738
  %tobool40 = icmp ne i8** %23, null, !dbg !5738
  br i1 %tobool40, label %if.end42, label %if.then41, !dbg !5740

if.then41:                                        ; preds = %if.end39
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5741
  br label %return, !dbg !5741

if.end42:                                         ; preds = %if.end39
  %24 = load %struct.vn_nary_op_s**, %struct.vn_nary_op_s*** %vnresult.addr, align 8, !dbg !5742
  %tobool43 = icmp ne %struct.vn_nary_op_s** %24, null, !dbg !5742
  br i1 %tobool43, label %if.then44, label %if.end45, !dbg !5744

if.then44:                                        ; preds = %if.end42
  %25 = load i8**, i8*** %slot, align 8, !dbg !5745
  %26 = load i8*, i8** %25, align 8, !dbg !5746
  %27 = bitcast i8* %26 to %struct.vn_nary_op_s*, !dbg !5747
  %28 = load %struct.vn_nary_op_s**, %struct.vn_nary_op_s*** %vnresult.addr, align 8, !dbg !5748
  store %struct.vn_nary_op_s* %27, %struct.vn_nary_op_s** %28, align 8, !dbg !5749
  br label %if.end45, !dbg !5750

if.end45:                                         ; preds = %if.then44, %if.end42
  %29 = load i8**, i8*** %slot, align 8, !dbg !5751
  %30 = load i8*, i8** %29, align 8, !dbg !5752
  %31 = bitcast i8* %30 to %struct.vn_nary_op_s*, !dbg !5753
  %result = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %31, i32 0, i32 3, !dbg !5754
  %32 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !5754
  store %union.tree_node* %32, %union.tree_node** %retval, align 8, !dbg !5755
  br label %return, !dbg !5755

return:                                           ; preds = %if.end45, %if.then41
  %33 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5756
  ret %union.tree_node* %33, !dbg !5756
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #0 !dbg !5757 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5758, metadata !DIExpression()), !dbg !5759
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5760
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !5761
  %num_ops = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 3, !dbg !5762
  %1 = load i32, i32* %num_ops, align 4, !dbg !5762
  ret i32 %1, !dbg !5763
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !5764 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5765, metadata !DIExpression()), !dbg !5766
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !5767, metadata !DIExpression()), !dbg !5768
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5769
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !5771
  %tobool = icmp ne i8 %call, 0, !dbg !5771
  br i1 %tobool, label %if.then, label %if.else, !dbg !5772

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5773
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !5775
  %2 = load i32, i32* %i.addr, align 4, !dbg !5776
  %idxprom = zext i32 %2 to i64, !dbg !5775
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idxprom, !dbg !5775
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5775
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !5777
  br label %return, !dbg !5777

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5778
  br label %return, !dbg !5778

return:                                           ; preds = %if.else, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5779
  ret %union.tree_node* %4, !dbg !5779
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.vn_nary_op_s* @vn_nary_op_insert_pieces(i32 %length, i32 %code, %union.tree_node* %type, %union.tree_node* %op0, %union.tree_node* %op1, %union.tree_node* %op2, %union.tree_node* %op3, %union.tree_node* %result, i32 %value_id) #0 !dbg !5780 {
entry:
  %length.addr = alloca i32, align 4
  %code.addr = alloca i32, align 4
  %type.addr = alloca %union.tree_node*, align 8
  %op0.addr = alloca %union.tree_node*, align 8
  %op1.addr = alloca %union.tree_node*, align 8
  %op2.addr = alloca %union.tree_node*, align 8
  %op3.addr = alloca %union.tree_node*, align 8
  %result.addr = alloca %union.tree_node*, align 8
  %value_id.addr = alloca i32, align 4
  %slot = alloca i8**, align 8
  %vno1 = alloca %struct.vn_nary_op_s*, align 8
  store i32 %length, i32* %length.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %length.addr, metadata !5783, metadata !DIExpression()), !dbg !5784
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !5785, metadata !DIExpression()), !dbg !5786
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !5787, metadata !DIExpression()), !dbg !5788
  store %union.tree_node* %op0, %union.tree_node** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0.addr, metadata !5789, metadata !DIExpression()), !dbg !5790
  store %union.tree_node* %op1, %union.tree_node** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1.addr, metadata !5791, metadata !DIExpression()), !dbg !5792
  store %union.tree_node* %op2, %union.tree_node** %op2.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op2.addr, metadata !5793, metadata !DIExpression()), !dbg !5794
  store %union.tree_node* %op3, %union.tree_node** %op3.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op3.addr, metadata !5795, metadata !DIExpression()), !dbg !5796
  store %union.tree_node* %result, %union.tree_node** %result.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %result.addr, metadata !5797, metadata !DIExpression()), !dbg !5798
  store i32 %value_id, i32* %value_id.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %value_id.addr, metadata !5799, metadata !DIExpression()), !dbg !5800
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !5801, metadata !DIExpression()), !dbg !5802
  call void @llvm.dbg.declare(metadata %struct.vn_nary_op_s** %vno1, metadata !5803, metadata !DIExpression()), !dbg !5804
  %0 = load i32, i32* %length.addr, align 4, !dbg !5805
  %sub = sub i32 4, %0, !dbg !5805
  %conv = zext i32 %sub to i64, !dbg !5805
  %mul = mul i64 8, %conv, !dbg !5805
  %sub1 = sub i64 64, %mul, !dbg !5805
  %1 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5805
  %nary_obstack = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %1, i32 0, i32 3, !dbg !5805
  %temp = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack, i32 0, i32 5, !dbg !5805
  store i64 %sub1, i64* %temp, align 8, !dbg !5805
  %2 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5805
  %nary_obstack2 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %2, i32 0, i32 3, !dbg !5805
  %chunk_limit = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack2, i32 0, i32 4, !dbg !5805
  %3 = load i8*, i8** %chunk_limit, align 8, !dbg !5805
  %4 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5805
  %nary_obstack3 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %4, i32 0, i32 3, !dbg !5805
  %next_free = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack3, i32 0, i32 3, !dbg !5805
  %5 = load i8*, i8** %next_free, align 8, !dbg !5805
  %sub.ptr.lhs.cast = ptrtoint i8* %3 to i64, !dbg !5805
  %sub.ptr.rhs.cast = ptrtoint i8* %5 to i64, !dbg !5805
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !5805
  %6 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5805
  %nary_obstack4 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %6, i32 0, i32 3, !dbg !5805
  %temp5 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack4, i32 0, i32 5, !dbg !5805
  %7 = load i64, i64* %temp5, align 8, !dbg !5805
  %cmp = icmp slt i64 %sub.ptr.sub, %7, !dbg !5805
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !5805

cond.true:                                        ; preds = %entry
  %8 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5805
  %nary_obstack7 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %8, i32 0, i32 3, !dbg !5805
  %9 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5805
  %nary_obstack8 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %9, i32 0, i32 3, !dbg !5805
  %temp9 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack8, i32 0, i32 5, !dbg !5805
  %10 = load i64, i64* %temp9, align 8, !dbg !5805
  %conv10 = trunc i64 %10 to i32, !dbg !5805
  call void @_obstack_newchunk(%struct.obstack* %nary_obstack7, i32 %conv10), !dbg !5805
  br label %cond.end, !dbg !5805

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5805

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5805
  %11 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5805
  %nary_obstack11 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %11, i32 0, i32 3, !dbg !5805
  %temp12 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack11, i32 0, i32 5, !dbg !5805
  %12 = load i64, i64* %temp12, align 8, !dbg !5805
  %13 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5805
  %nary_obstack13 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %13, i32 0, i32 3, !dbg !5805
  %next_free14 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack13, i32 0, i32 3, !dbg !5805
  %14 = load i8*, i8** %next_free14, align 8, !dbg !5805
  %add.ptr = getelementptr inbounds i8, i8* %14, i64 %12, !dbg !5805
  store i8* %add.ptr, i8** %next_free14, align 8, !dbg !5805
  %15 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5805
  %nary_obstack15 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %15, i32 0, i32 3, !dbg !5805
  %next_free16 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack15, i32 0, i32 3, !dbg !5805
  %16 = load i8*, i8** %next_free16, align 8, !dbg !5805
  %17 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5805
  %nary_obstack17 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %17, i32 0, i32 3, !dbg !5805
  %object_base = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack17, i32 0, i32 2, !dbg !5805
  %18 = load i8*, i8** %object_base, align 8, !dbg !5805
  %cmp18 = icmp eq i8* %16, %18, !dbg !5805
  br i1 %cmp18, label %cond.true20, label %cond.false22, !dbg !5805

cond.true20:                                      ; preds = %cond.end
  %19 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5805
  %nary_obstack21 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %19, i32 0, i32 3, !dbg !5805
  %maybe_empty_object = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack21, i32 0, i32 10, !dbg !5805
  %bf.load = load i8, i8* %maybe_empty_object, align 8, !dbg !5805
  %bf.clear = and i8 %bf.load, -3, !dbg !5805
  %bf.set = or i8 %bf.clear, 2, !dbg !5805
  store i8 %bf.set, i8* %maybe_empty_object, align 8, !dbg !5805
  br label %cond.end23, !dbg !5805

cond.false22:                                     ; preds = %cond.end
  br label %cond.end23, !dbg !5805

cond.end23:                                       ; preds = %cond.false22, %cond.true20
  %cond24 = phi i32 [ 0, %cond.true20 ], [ 0, %cond.false22 ], !dbg !5805
  %20 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5805
  %nary_obstack25 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %20, i32 0, i32 3, !dbg !5805
  %object_base26 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack25, i32 0, i32 2, !dbg !5805
  %21 = load i8*, i8** %object_base26, align 8, !dbg !5805
  %sub.ptr.lhs.cast27 = ptrtoint i8* %21 to i64, !dbg !5805
  %sub.ptr.sub28 = sub i64 %sub.ptr.lhs.cast27, 0, !dbg !5805
  %22 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5805
  %nary_obstack29 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %22, i32 0, i32 3, !dbg !5805
  %temp30 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack29, i32 0, i32 5, !dbg !5805
  store i64 %sub.ptr.sub28, i64* %temp30, align 8, !dbg !5805
  %23 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5805
  %nary_obstack31 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %23, i32 0, i32 3, !dbg !5805
  %next_free32 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack31, i32 0, i32 3, !dbg !5805
  %24 = load i8*, i8** %next_free32, align 8, !dbg !5805
  %sub.ptr.lhs.cast33 = ptrtoint i8* %24 to i64, !dbg !5805
  %sub.ptr.sub34 = sub i64 %sub.ptr.lhs.cast33, 0, !dbg !5805
  %25 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5805
  %nary_obstack35 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %25, i32 0, i32 3, !dbg !5805
  %alignment_mask = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack35, i32 0, i32 6, !dbg !5805
  %26 = load i32, i32* %alignment_mask, align 8, !dbg !5805
  %conv36 = sext i32 %26 to i64, !dbg !5805
  %add = add nsw i64 %sub.ptr.sub34, %conv36, !dbg !5805
  %27 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5805
  %nary_obstack37 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %27, i32 0, i32 3, !dbg !5805
  %alignment_mask38 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack37, i32 0, i32 6, !dbg !5805
  %28 = load i32, i32* %alignment_mask38, align 8, !dbg !5805
  %neg = xor i32 %28, -1, !dbg !5805
  %conv39 = sext i32 %neg to i64, !dbg !5805
  %and = and i64 %add, %conv39, !dbg !5805
  %29 = inttoptr i64 %and to i8*, !dbg !5805
  %30 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5805
  %nary_obstack40 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %30, i32 0, i32 3, !dbg !5805
  %next_free41 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack40, i32 0, i32 3, !dbg !5805
  store i8* %29, i8** %next_free41, align 8, !dbg !5805
  %31 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5805
  %nary_obstack42 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %31, i32 0, i32 3, !dbg !5805
  %next_free43 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack42, i32 0, i32 3, !dbg !5805
  %32 = load i8*, i8** %next_free43, align 8, !dbg !5805
  %33 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5805
  %nary_obstack44 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %33, i32 0, i32 3, !dbg !5805
  %chunk = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack44, i32 0, i32 1, !dbg !5805
  %34 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8, !dbg !5805
  %35 = bitcast %struct._obstack_chunk* %34 to i8*, !dbg !5805
  %sub.ptr.lhs.cast45 = ptrtoint i8* %32 to i64, !dbg !5805
  %sub.ptr.rhs.cast46 = ptrtoint i8* %35 to i64, !dbg !5805
  %sub.ptr.sub47 = sub i64 %sub.ptr.lhs.cast45, %sub.ptr.rhs.cast46, !dbg !5805
  %36 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5805
  %nary_obstack48 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %36, i32 0, i32 3, !dbg !5805
  %chunk_limit49 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack48, i32 0, i32 4, !dbg !5805
  %37 = load i8*, i8** %chunk_limit49, align 8, !dbg !5805
  %38 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5805
  %nary_obstack50 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %38, i32 0, i32 3, !dbg !5805
  %chunk51 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack50, i32 0, i32 1, !dbg !5805
  %39 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk51, align 8, !dbg !5805
  %40 = bitcast %struct._obstack_chunk* %39 to i8*, !dbg !5805
  %sub.ptr.lhs.cast52 = ptrtoint i8* %37 to i64, !dbg !5805
  %sub.ptr.rhs.cast53 = ptrtoint i8* %40 to i64, !dbg !5805
  %sub.ptr.sub54 = sub i64 %sub.ptr.lhs.cast52, %sub.ptr.rhs.cast53, !dbg !5805
  %cmp55 = icmp sgt i64 %sub.ptr.sub47, %sub.ptr.sub54, !dbg !5805
  br i1 %cmp55, label %cond.true57, label %cond.false62, !dbg !5805

cond.true57:                                      ; preds = %cond.end23
  %41 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5805
  %nary_obstack58 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %41, i32 0, i32 3, !dbg !5805
  %chunk_limit59 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack58, i32 0, i32 4, !dbg !5805
  %42 = load i8*, i8** %chunk_limit59, align 8, !dbg !5805
  %43 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5805
  %nary_obstack60 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %43, i32 0, i32 3, !dbg !5805
  %next_free61 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack60, i32 0, i32 3, !dbg !5805
  store i8* %42, i8** %next_free61, align 8, !dbg !5805
  br label %cond.end63, !dbg !5805

cond.false62:                                     ; preds = %cond.end23
  br label %cond.end63, !dbg !5805

cond.end63:                                       ; preds = %cond.false62, %cond.true57
  %cond64 = phi i8* [ %42, %cond.true57 ], [ null, %cond.false62 ], !dbg !5805
  %44 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5805
  %nary_obstack65 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %44, i32 0, i32 3, !dbg !5805
  %next_free66 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack65, i32 0, i32 3, !dbg !5805
  %45 = load i8*, i8** %next_free66, align 8, !dbg !5805
  %46 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5805
  %nary_obstack67 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %46, i32 0, i32 3, !dbg !5805
  %object_base68 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack67, i32 0, i32 2, !dbg !5805
  store i8* %45, i8** %object_base68, align 8, !dbg !5805
  %47 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5805
  %nary_obstack69 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %47, i32 0, i32 3, !dbg !5805
  %temp70 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack69, i32 0, i32 5, !dbg !5805
  %48 = load i64, i64* %temp70, align 8, !dbg !5805
  %49 = inttoptr i64 %48 to i8*, !dbg !5805
  %50 = bitcast i8* %49 to %struct.vn_nary_op_s*, !dbg !5806
  store %struct.vn_nary_op_s* %50, %struct.vn_nary_op_s** %vno1, align 8, !dbg !5807
  %51 = load i32, i32* %value_id.addr, align 4, !dbg !5808
  %52 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !5809
  %value_id71 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %52, i32 0, i32 0, !dbg !5810
  store i32 %51, i32* %value_id71, align 8, !dbg !5811
  %53 = load i32, i32* %code.addr, align 4, !dbg !5812
  %54 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !5813
  %opcode = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %54, i32 0, i32 1, !dbg !5814
  %bf.load72 = load i32, i32* %opcode, align 4, !dbg !5815
  %bf.value = and i32 %53, 65535, !dbg !5815
  %bf.clear73 = and i32 %bf.load72, -65536, !dbg !5815
  %bf.set74 = or i32 %bf.clear73, %bf.value, !dbg !5815
  store i32 %bf.set74, i32* %opcode, align 4, !dbg !5815
  %55 = load i32, i32* %length.addr, align 4, !dbg !5816
  %56 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !5817
  %length75 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %56, i32 0, i32 1, !dbg !5818
  %bf.load76 = load i32, i32* %length75, align 4, !dbg !5819
  %bf.value77 = and i32 %55, 65535, !dbg !5819
  %bf.shl = shl i32 %bf.value77, 16, !dbg !5819
  %bf.clear78 = and i32 %bf.load76, 65535, !dbg !5819
  %bf.set79 = or i32 %bf.clear78, %bf.shl, !dbg !5819
  store i32 %bf.set79, i32* %length75, align 4, !dbg !5819
  %57 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5820
  %58 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !5821
  %type80 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %58, i32 0, i32 4, !dbg !5822
  store %union.tree_node* %57, %union.tree_node** %type80, align 8, !dbg !5823
  %59 = load i32, i32* %length.addr, align 4, !dbg !5824
  %cmp81 = icmp uge i32 %59, 1, !dbg !5826
  br i1 %cmp81, label %if.then, label %if.end, !dbg !5827

if.then:                                          ; preds = %cond.end63
  %60 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !5828
  %61 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !5829
  %op = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %61, i32 0, i32 5, !dbg !5830
  %arrayidx = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op, i64 0, i64 0, !dbg !5829
  store %union.tree_node* %60, %union.tree_node** %arrayidx, align 8, !dbg !5831
  br label %if.end, !dbg !5829

if.end:                                           ; preds = %if.then, %cond.end63
  %62 = load i32, i32* %length.addr, align 4, !dbg !5832
  %cmp83 = icmp uge i32 %62, 2, !dbg !5834
  br i1 %cmp83, label %if.then85, label %if.end88, !dbg !5835

if.then85:                                        ; preds = %if.end
  %63 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !5836
  %64 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !5837
  %op86 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %64, i32 0, i32 5, !dbg !5838
  %arrayidx87 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op86, i64 0, i64 1, !dbg !5837
  store %union.tree_node* %63, %union.tree_node** %arrayidx87, align 8, !dbg !5839
  br label %if.end88, !dbg !5837

if.end88:                                         ; preds = %if.then85, %if.end
  %65 = load i32, i32* %length.addr, align 4, !dbg !5840
  %cmp89 = icmp uge i32 %65, 3, !dbg !5842
  br i1 %cmp89, label %if.then91, label %if.end94, !dbg !5843

if.then91:                                        ; preds = %if.end88
  %66 = load %union.tree_node*, %union.tree_node** %op2.addr, align 8, !dbg !5844
  %67 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !5845
  %op92 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %67, i32 0, i32 5, !dbg !5846
  %arrayidx93 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op92, i64 0, i64 2, !dbg !5845
  store %union.tree_node* %66, %union.tree_node** %arrayidx93, align 8, !dbg !5847
  br label %if.end94, !dbg !5845

if.end94:                                         ; preds = %if.then91, %if.end88
  %68 = load i32, i32* %length.addr, align 4, !dbg !5848
  %cmp95 = icmp uge i32 %68, 4, !dbg !5850
  br i1 %cmp95, label %if.then97, label %if.end100, !dbg !5851

if.then97:                                        ; preds = %if.end94
  %69 = load %union.tree_node*, %union.tree_node** %op3.addr, align 8, !dbg !5852
  %70 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !5853
  %op98 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %70, i32 0, i32 5, !dbg !5854
  %arrayidx99 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op98, i64 0, i64 3, !dbg !5853
  store %union.tree_node* %69, %union.tree_node** %arrayidx99, align 8, !dbg !5855
  br label %if.end100, !dbg !5853

if.end100:                                        ; preds = %if.then97, %if.end94
  %71 = load %union.tree_node*, %union.tree_node** %result.addr, align 8, !dbg !5856
  %72 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !5857
  %result101 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %72, i32 0, i32 3, !dbg !5858
  store %union.tree_node* %71, %union.tree_node** %result101, align 8, !dbg !5859
  %73 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !5860
  %call = call i32 @vn_nary_op_compute_hash(%struct.vn_nary_op_s* %73), !dbg !5861
  %74 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !5862
  %hashcode = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %74, i32 0, i32 2, !dbg !5863
  store i32 %call, i32* %hashcode, align 8, !dbg !5864
  %75 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5865
  %nary = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %75, i32 0, i32 0, !dbg !5866
  %76 = load %struct.htab*, %struct.htab** %nary, align 8, !dbg !5866
  %77 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !5867
  %78 = bitcast %struct.vn_nary_op_s* %77 to i8*, !dbg !5867
  %79 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !5868
  %hashcode102 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %79, i32 0, i32 2, !dbg !5869
  %80 = load i32, i32* %hashcode102, align 8, !dbg !5869
  %call103 = call i8** @htab_find_slot_with_hash(%struct.htab* %76, i8* %78, i32 %80, i32 1), !dbg !5870
  store i8** %call103, i8*** %slot, align 8, !dbg !5871
  %81 = load i8**, i8*** %slot, align 8, !dbg !5872
  %82 = load i8*, i8** %81, align 8, !dbg !5872
  %tobool = icmp ne i8* %82, null, !dbg !5872
  br i1 %tobool, label %cond.true104, label %cond.false105, !dbg !5872

cond.true104:                                     ; preds = %if.end100
  call void @fancy_abort(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0), i32 1561, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5872
  br label %cond.end106, !dbg !5872

cond.false105:                                    ; preds = %if.end100
  br label %cond.end106, !dbg !5872

cond.end106:                                      ; preds = %cond.false105, %cond.true104
  %cond107 = phi i32 [ 0, %cond.true104 ], [ 0, %cond.false105 ], !dbg !5872
  %83 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !5873
  %84 = bitcast %struct.vn_nary_op_s* %83 to i8*, !dbg !5873
  %85 = load i8**, i8*** %slot, align 8, !dbg !5874
  store i8* %84, i8** %85, align 8, !dbg !5875
  %86 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !5876
  ret %struct.vn_nary_op_s* %86, !dbg !5877
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.vn_nary_op_s* @vn_nary_op_insert(%union.tree_node* %op, %union.tree_node* %result) #0 !dbg !5878 {
entry:
  %op.addr = alloca %union.tree_node*, align 8
  %result.addr = alloca %union.tree_node*, align 8
  %length = alloca i32, align 4
  %slot = alloca i8**, align 8
  %vno1 = alloca %struct.vn_nary_op_s*, align 8
  %i = alloca i32, align 4
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !5881, metadata !DIExpression()), !dbg !5882
  store %union.tree_node* %result, %union.tree_node** %result.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %result.addr, metadata !5883, metadata !DIExpression()), !dbg !5884
  call void @llvm.dbg.declare(metadata i32* %length, metadata !5885, metadata !DIExpression()), !dbg !5886
  %0 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !5887
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !5887
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !5887
  %bf.load = load i64, i64* %1, align 8, !dbg !5887
  %bf.clear = and i64 %bf.load, 65535, !dbg !5887
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5887
  %idxprom = sext i32 %bf.cast to i64, !dbg !5887
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @tree_code_length, i64 0, i64 %idxprom, !dbg !5887
  %2 = load i8, i8* %arrayidx, align 1, !dbg !5887
  %conv = zext i8 %2 to i32, !dbg !5887
  store i32 %conv, i32* %length, align 4, !dbg !5886
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !5888, metadata !DIExpression()), !dbg !5889
  call void @llvm.dbg.declare(metadata %struct.vn_nary_op_s** %vno1, metadata !5890, metadata !DIExpression()), !dbg !5891
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5892, metadata !DIExpression()), !dbg !5893
  %3 = load i32, i32* %length, align 4, !dbg !5894
  %sub = sub i32 4, %3, !dbg !5894
  %conv1 = zext i32 %sub to i64, !dbg !5894
  %mul = mul i64 8, %conv1, !dbg !5894
  %sub2 = sub i64 64, %mul, !dbg !5894
  %4 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5894
  %nary_obstack = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %4, i32 0, i32 3, !dbg !5894
  %temp = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack, i32 0, i32 5, !dbg !5894
  store i64 %sub2, i64* %temp, align 8, !dbg !5894
  %5 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5894
  %nary_obstack3 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %5, i32 0, i32 3, !dbg !5894
  %chunk_limit = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack3, i32 0, i32 4, !dbg !5894
  %6 = load i8*, i8** %chunk_limit, align 8, !dbg !5894
  %7 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5894
  %nary_obstack4 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %7, i32 0, i32 3, !dbg !5894
  %next_free = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack4, i32 0, i32 3, !dbg !5894
  %8 = load i8*, i8** %next_free, align 8, !dbg !5894
  %sub.ptr.lhs.cast = ptrtoint i8* %6 to i64, !dbg !5894
  %sub.ptr.rhs.cast = ptrtoint i8* %8 to i64, !dbg !5894
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !5894
  %9 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5894
  %nary_obstack5 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %9, i32 0, i32 3, !dbg !5894
  %temp6 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack5, i32 0, i32 5, !dbg !5894
  %10 = load i64, i64* %temp6, align 8, !dbg !5894
  %cmp = icmp slt i64 %sub.ptr.sub, %10, !dbg !5894
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !5894

cond.true:                                        ; preds = %entry
  %11 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5894
  %nary_obstack8 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %11, i32 0, i32 3, !dbg !5894
  %12 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5894
  %nary_obstack9 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %12, i32 0, i32 3, !dbg !5894
  %temp10 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack9, i32 0, i32 5, !dbg !5894
  %13 = load i64, i64* %temp10, align 8, !dbg !5894
  %conv11 = trunc i64 %13 to i32, !dbg !5894
  call void @_obstack_newchunk(%struct.obstack* %nary_obstack8, i32 %conv11), !dbg !5894
  br label %cond.end, !dbg !5894

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5894

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5894
  %14 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5894
  %nary_obstack12 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %14, i32 0, i32 3, !dbg !5894
  %temp13 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack12, i32 0, i32 5, !dbg !5894
  %15 = load i64, i64* %temp13, align 8, !dbg !5894
  %16 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5894
  %nary_obstack14 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %16, i32 0, i32 3, !dbg !5894
  %next_free15 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack14, i32 0, i32 3, !dbg !5894
  %17 = load i8*, i8** %next_free15, align 8, !dbg !5894
  %add.ptr = getelementptr inbounds i8, i8* %17, i64 %15, !dbg !5894
  store i8* %add.ptr, i8** %next_free15, align 8, !dbg !5894
  %18 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5894
  %nary_obstack16 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %18, i32 0, i32 3, !dbg !5894
  %next_free17 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack16, i32 0, i32 3, !dbg !5894
  %19 = load i8*, i8** %next_free17, align 8, !dbg !5894
  %20 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5894
  %nary_obstack18 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %20, i32 0, i32 3, !dbg !5894
  %object_base = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack18, i32 0, i32 2, !dbg !5894
  %21 = load i8*, i8** %object_base, align 8, !dbg !5894
  %cmp19 = icmp eq i8* %19, %21, !dbg !5894
  br i1 %cmp19, label %cond.true21, label %cond.false25, !dbg !5894

cond.true21:                                      ; preds = %cond.end
  %22 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5894
  %nary_obstack22 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %22, i32 0, i32 3, !dbg !5894
  %maybe_empty_object = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack22, i32 0, i32 10, !dbg !5894
  %bf.load23 = load i8, i8* %maybe_empty_object, align 8, !dbg !5894
  %bf.clear24 = and i8 %bf.load23, -3, !dbg !5894
  %bf.set = or i8 %bf.clear24, 2, !dbg !5894
  store i8 %bf.set, i8* %maybe_empty_object, align 8, !dbg !5894
  br label %cond.end26, !dbg !5894

cond.false25:                                     ; preds = %cond.end
  br label %cond.end26, !dbg !5894

cond.end26:                                       ; preds = %cond.false25, %cond.true21
  %cond27 = phi i32 [ 0, %cond.true21 ], [ 0, %cond.false25 ], !dbg !5894
  %23 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5894
  %nary_obstack28 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %23, i32 0, i32 3, !dbg !5894
  %object_base29 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack28, i32 0, i32 2, !dbg !5894
  %24 = load i8*, i8** %object_base29, align 8, !dbg !5894
  %sub.ptr.lhs.cast30 = ptrtoint i8* %24 to i64, !dbg !5894
  %sub.ptr.sub31 = sub i64 %sub.ptr.lhs.cast30, 0, !dbg !5894
  %25 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5894
  %nary_obstack32 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %25, i32 0, i32 3, !dbg !5894
  %temp33 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack32, i32 0, i32 5, !dbg !5894
  store i64 %sub.ptr.sub31, i64* %temp33, align 8, !dbg !5894
  %26 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5894
  %nary_obstack34 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %26, i32 0, i32 3, !dbg !5894
  %next_free35 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack34, i32 0, i32 3, !dbg !5894
  %27 = load i8*, i8** %next_free35, align 8, !dbg !5894
  %sub.ptr.lhs.cast36 = ptrtoint i8* %27 to i64, !dbg !5894
  %sub.ptr.sub37 = sub i64 %sub.ptr.lhs.cast36, 0, !dbg !5894
  %28 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5894
  %nary_obstack38 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %28, i32 0, i32 3, !dbg !5894
  %alignment_mask = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack38, i32 0, i32 6, !dbg !5894
  %29 = load i32, i32* %alignment_mask, align 8, !dbg !5894
  %conv39 = sext i32 %29 to i64, !dbg !5894
  %add = add nsw i64 %sub.ptr.sub37, %conv39, !dbg !5894
  %30 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5894
  %nary_obstack40 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %30, i32 0, i32 3, !dbg !5894
  %alignment_mask41 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack40, i32 0, i32 6, !dbg !5894
  %31 = load i32, i32* %alignment_mask41, align 8, !dbg !5894
  %neg = xor i32 %31, -1, !dbg !5894
  %conv42 = sext i32 %neg to i64, !dbg !5894
  %and = and i64 %add, %conv42, !dbg !5894
  %32 = inttoptr i64 %and to i8*, !dbg !5894
  %33 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5894
  %nary_obstack43 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %33, i32 0, i32 3, !dbg !5894
  %next_free44 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack43, i32 0, i32 3, !dbg !5894
  store i8* %32, i8** %next_free44, align 8, !dbg !5894
  %34 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5894
  %nary_obstack45 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %34, i32 0, i32 3, !dbg !5894
  %next_free46 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack45, i32 0, i32 3, !dbg !5894
  %35 = load i8*, i8** %next_free46, align 8, !dbg !5894
  %36 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5894
  %nary_obstack47 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %36, i32 0, i32 3, !dbg !5894
  %chunk = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack47, i32 0, i32 1, !dbg !5894
  %37 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8, !dbg !5894
  %38 = bitcast %struct._obstack_chunk* %37 to i8*, !dbg !5894
  %sub.ptr.lhs.cast48 = ptrtoint i8* %35 to i64, !dbg !5894
  %sub.ptr.rhs.cast49 = ptrtoint i8* %38 to i64, !dbg !5894
  %sub.ptr.sub50 = sub i64 %sub.ptr.lhs.cast48, %sub.ptr.rhs.cast49, !dbg !5894
  %39 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5894
  %nary_obstack51 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %39, i32 0, i32 3, !dbg !5894
  %chunk_limit52 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack51, i32 0, i32 4, !dbg !5894
  %40 = load i8*, i8** %chunk_limit52, align 8, !dbg !5894
  %41 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5894
  %nary_obstack53 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %41, i32 0, i32 3, !dbg !5894
  %chunk54 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack53, i32 0, i32 1, !dbg !5894
  %42 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk54, align 8, !dbg !5894
  %43 = bitcast %struct._obstack_chunk* %42 to i8*, !dbg !5894
  %sub.ptr.lhs.cast55 = ptrtoint i8* %40 to i64, !dbg !5894
  %sub.ptr.rhs.cast56 = ptrtoint i8* %43 to i64, !dbg !5894
  %sub.ptr.sub57 = sub i64 %sub.ptr.lhs.cast55, %sub.ptr.rhs.cast56, !dbg !5894
  %cmp58 = icmp sgt i64 %sub.ptr.sub50, %sub.ptr.sub57, !dbg !5894
  br i1 %cmp58, label %cond.true60, label %cond.false65, !dbg !5894

cond.true60:                                      ; preds = %cond.end26
  %44 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5894
  %nary_obstack61 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %44, i32 0, i32 3, !dbg !5894
  %chunk_limit62 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack61, i32 0, i32 4, !dbg !5894
  %45 = load i8*, i8** %chunk_limit62, align 8, !dbg !5894
  %46 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5894
  %nary_obstack63 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %46, i32 0, i32 3, !dbg !5894
  %next_free64 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack63, i32 0, i32 3, !dbg !5894
  store i8* %45, i8** %next_free64, align 8, !dbg !5894
  br label %cond.end66, !dbg !5894

cond.false65:                                     ; preds = %cond.end26
  br label %cond.end66, !dbg !5894

cond.end66:                                       ; preds = %cond.false65, %cond.true60
  %cond67 = phi i8* [ %45, %cond.true60 ], [ null, %cond.false65 ], !dbg !5894
  %47 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5894
  %nary_obstack68 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %47, i32 0, i32 3, !dbg !5894
  %next_free69 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack68, i32 0, i32 3, !dbg !5894
  %48 = load i8*, i8** %next_free69, align 8, !dbg !5894
  %49 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5894
  %nary_obstack70 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %49, i32 0, i32 3, !dbg !5894
  %object_base71 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack70, i32 0, i32 2, !dbg !5894
  store i8* %48, i8** %object_base71, align 8, !dbg !5894
  %50 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5894
  %nary_obstack72 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %50, i32 0, i32 3, !dbg !5894
  %temp73 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack72, i32 0, i32 5, !dbg !5894
  %51 = load i64, i64* %temp73, align 8, !dbg !5894
  %52 = inttoptr i64 %51 to i8*, !dbg !5894
  %53 = bitcast i8* %52 to %struct.vn_nary_op_s*, !dbg !5895
  store %struct.vn_nary_op_s* %53, %struct.vn_nary_op_s** %vno1, align 8, !dbg !5896
  %54 = load %union.tree_node*, %union.tree_node** %result.addr, align 8, !dbg !5897
  %call = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %54), !dbg !5898
  %value_id = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call, i32 0, i32 2, !dbg !5899
  %55 = load i32, i32* %value_id, align 8, !dbg !5899
  %56 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !5900
  %value_id74 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %56, i32 0, i32 0, !dbg !5901
  store i32 %55, i32* %value_id74, align 8, !dbg !5902
  %57 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !5903
  %base75 = bitcast %union.tree_node* %57 to %struct.tree_base*, !dbg !5903
  %58 = bitcast %struct.tree_base* %base75 to i64*, !dbg !5903
  %bf.load76 = load i64, i64* %58, align 8, !dbg !5903
  %bf.clear77 = and i64 %bf.load76, 65535, !dbg !5903
  %bf.cast78 = trunc i64 %bf.clear77 to i32, !dbg !5903
  %59 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !5904
  %opcode = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %59, i32 0, i32 1, !dbg !5905
  %bf.load79 = load i32, i32* %opcode, align 4, !dbg !5906
  %bf.value = and i32 %bf.cast78, 65535, !dbg !5906
  %bf.clear80 = and i32 %bf.load79, -65536, !dbg !5906
  %bf.set81 = or i32 %bf.clear80, %bf.value, !dbg !5906
  store i32 %bf.set81, i32* %opcode, align 4, !dbg !5906
  %60 = load i32, i32* %length, align 4, !dbg !5907
  %61 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !5908
  %length82 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %61, i32 0, i32 1, !dbg !5909
  %bf.load83 = load i32, i32* %length82, align 4, !dbg !5910
  %bf.value84 = and i32 %60, 65535, !dbg !5910
  %bf.shl = shl i32 %bf.value84, 16, !dbg !5910
  %bf.clear85 = and i32 %bf.load83, 65535, !dbg !5910
  %bf.set86 = or i32 %bf.clear85, %bf.shl, !dbg !5910
  store i32 %bf.set86, i32* %length82, align 4, !dbg !5910
  %62 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !5911
  %common = bitcast %union.tree_node* %62 to %struct.tree_common*, !dbg !5911
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5911
  %63 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5911
  %64 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !5912
  %type87 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %64, i32 0, i32 4, !dbg !5913
  store %union.tree_node* %63, %union.tree_node** %type87, align 8, !dbg !5914
  store i32 0, i32* %i, align 4, !dbg !5915
  br label %for.cond, !dbg !5917

for.cond:                                         ; preds = %for.inc, %cond.end66
  %65 = load i32, i32* %i, align 4, !dbg !5918
  %66 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !5920
  %length88 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %66, i32 0, i32 1, !dbg !5921
  %bf.load89 = load i32, i32* %length88, align 4, !dbg !5921
  %bf.lshr = lshr i32 %bf.load89, 16, !dbg !5921
  %cmp90 = icmp ult i32 %65, %bf.lshr, !dbg !5922
  br i1 %cmp90, label %for.body, label %for.end, !dbg !5923

for.body:                                         ; preds = %for.cond
  %67 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !5924
  %exp = bitcast %union.tree_node* %67 to %struct.tree_exp*, !dbg !5924
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !5924
  %68 = load i32, i32* %i, align 4, !dbg !5924
  %idxprom92 = zext i32 %68 to i64, !dbg !5924
  %arrayidx93 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 %idxprom92, !dbg !5924
  %69 = load %union.tree_node*, %union.tree_node** %arrayidx93, align 8, !dbg !5924
  %70 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !5925
  %op94 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %70, i32 0, i32 5, !dbg !5926
  %71 = load i32, i32* %i, align 4, !dbg !5927
  %idxprom95 = zext i32 %71 to i64, !dbg !5925
  %arrayidx96 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op94, i64 0, i64 %idxprom95, !dbg !5925
  store %union.tree_node* %69, %union.tree_node** %arrayidx96, align 8, !dbg !5928
  br label %for.inc, !dbg !5925

for.inc:                                          ; preds = %for.body
  %72 = load i32, i32* %i, align 4, !dbg !5929
  %inc = add i32 %72, 1, !dbg !5929
  store i32 %inc, i32* %i, align 4, !dbg !5929
  br label %for.cond, !dbg !5930, !llvm.loop !5931

for.end:                                          ; preds = %for.cond
  %73 = load %union.tree_node*, %union.tree_node** %result.addr, align 8, !dbg !5933
  %74 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !5934
  %result97 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %74, i32 0, i32 3, !dbg !5935
  store %union.tree_node* %73, %union.tree_node** %result97, align 8, !dbg !5936
  %75 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !5937
  %call98 = call i32 @vn_nary_op_compute_hash(%struct.vn_nary_op_s* %75), !dbg !5938
  %76 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !5939
  %hashcode = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %76, i32 0, i32 2, !dbg !5940
  store i32 %call98, i32* %hashcode, align 8, !dbg !5941
  %77 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5942
  %nary = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %77, i32 0, i32 0, !dbg !5943
  %78 = load %struct.htab*, %struct.htab** %nary, align 8, !dbg !5943
  %79 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !5944
  %80 = bitcast %struct.vn_nary_op_s* %79 to i8*, !dbg !5944
  %81 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !5945
  %hashcode99 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %81, i32 0, i32 2, !dbg !5946
  %82 = load i32, i32* %hashcode99, align 8, !dbg !5946
  %call100 = call i8** @htab_find_slot_with_hash(%struct.htab* %78, i8* %80, i32 %82, i32 1), !dbg !5947
  store i8** %call100, i8*** %slot, align 8, !dbg !5948
  %83 = load i8**, i8*** %slot, align 8, !dbg !5949
  %84 = load i8*, i8** %83, align 8, !dbg !5949
  %tobool = icmp ne i8* %84, null, !dbg !5949
  br i1 %tobool, label %cond.true101, label %cond.false102, !dbg !5949

cond.true101:                                     ; preds = %for.end
  call void @fancy_abort(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0), i32 1593, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5949
  br label %cond.end103, !dbg !5949

cond.false102:                                    ; preds = %for.end
  br label %cond.end103, !dbg !5949

cond.end103:                                      ; preds = %cond.false102, %cond.true101
  %cond104 = phi i32 [ 0, %cond.true101 ], [ 0, %cond.false102 ], !dbg !5949
  %85 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !5950
  %86 = bitcast %struct.vn_nary_op_s* %85 to i8*, !dbg !5950
  %87 = load i8**, i8*** %slot, align 8, !dbg !5951
  store i8* %86, i8** %87, align 8, !dbg !5952
  %88 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !5953
  ret %struct.vn_nary_op_s* %88, !dbg !5954
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.vn_nary_op_s* @vn_nary_op_insert_stmt(%union.gimple_statement_d* %stmt, %union.tree_node* %result) #0 !dbg !5955 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %result.addr = alloca %union.tree_node*, align 8
  %length = alloca i32, align 4
  %slot = alloca i8**, align 8
  %vno1 = alloca %struct.vn_nary_op_s*, align 8
  %i = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5958, metadata !DIExpression()), !dbg !5959
  store %union.tree_node* %result, %union.tree_node** %result.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %result.addr, metadata !5960, metadata !DIExpression()), !dbg !5961
  call void @llvm.dbg.declare(metadata i32* %length, metadata !5962, metadata !DIExpression()), !dbg !5963
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5964
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !5965
  %sub = sub i32 %call, 1, !dbg !5966
  store i32 %sub, i32* %length, align 4, !dbg !5963
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !5967, metadata !DIExpression()), !dbg !5968
  call void @llvm.dbg.declare(metadata %struct.vn_nary_op_s** %vno1, metadata !5969, metadata !DIExpression()), !dbg !5970
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5971, metadata !DIExpression()), !dbg !5972
  %1 = load i32, i32* %length, align 4, !dbg !5973
  %sub1 = sub i32 4, %1, !dbg !5973
  %conv = zext i32 %sub1 to i64, !dbg !5973
  %mul = mul i64 8, %conv, !dbg !5973
  %sub2 = sub i64 64, %mul, !dbg !5973
  %2 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5973
  %nary_obstack = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %2, i32 0, i32 3, !dbg !5973
  %temp = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack, i32 0, i32 5, !dbg !5973
  store i64 %sub2, i64* %temp, align 8, !dbg !5973
  %3 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5973
  %nary_obstack3 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %3, i32 0, i32 3, !dbg !5973
  %chunk_limit = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack3, i32 0, i32 4, !dbg !5973
  %4 = load i8*, i8** %chunk_limit, align 8, !dbg !5973
  %5 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5973
  %nary_obstack4 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %5, i32 0, i32 3, !dbg !5973
  %next_free = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack4, i32 0, i32 3, !dbg !5973
  %6 = load i8*, i8** %next_free, align 8, !dbg !5973
  %sub.ptr.lhs.cast = ptrtoint i8* %4 to i64, !dbg !5973
  %sub.ptr.rhs.cast = ptrtoint i8* %6 to i64, !dbg !5973
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !5973
  %7 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5973
  %nary_obstack5 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %7, i32 0, i32 3, !dbg !5973
  %temp6 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack5, i32 0, i32 5, !dbg !5973
  %8 = load i64, i64* %temp6, align 8, !dbg !5973
  %cmp = icmp slt i64 %sub.ptr.sub, %8, !dbg !5973
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !5973

cond.true:                                        ; preds = %entry
  %9 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5973
  %nary_obstack8 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %9, i32 0, i32 3, !dbg !5973
  %10 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5973
  %nary_obstack9 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %10, i32 0, i32 3, !dbg !5973
  %temp10 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack9, i32 0, i32 5, !dbg !5973
  %11 = load i64, i64* %temp10, align 8, !dbg !5973
  %conv11 = trunc i64 %11 to i32, !dbg !5973
  call void @_obstack_newchunk(%struct.obstack* %nary_obstack8, i32 %conv11), !dbg !5973
  br label %cond.end, !dbg !5973

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5973

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5973
  %12 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5973
  %nary_obstack12 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %12, i32 0, i32 3, !dbg !5973
  %temp13 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack12, i32 0, i32 5, !dbg !5973
  %13 = load i64, i64* %temp13, align 8, !dbg !5973
  %14 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5973
  %nary_obstack14 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %14, i32 0, i32 3, !dbg !5973
  %next_free15 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack14, i32 0, i32 3, !dbg !5973
  %15 = load i8*, i8** %next_free15, align 8, !dbg !5973
  %add.ptr = getelementptr inbounds i8, i8* %15, i64 %13, !dbg !5973
  store i8* %add.ptr, i8** %next_free15, align 8, !dbg !5973
  %16 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5973
  %nary_obstack16 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %16, i32 0, i32 3, !dbg !5973
  %next_free17 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack16, i32 0, i32 3, !dbg !5973
  %17 = load i8*, i8** %next_free17, align 8, !dbg !5973
  %18 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5973
  %nary_obstack18 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %18, i32 0, i32 3, !dbg !5973
  %object_base = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack18, i32 0, i32 2, !dbg !5973
  %19 = load i8*, i8** %object_base, align 8, !dbg !5973
  %cmp19 = icmp eq i8* %17, %19, !dbg !5973
  br i1 %cmp19, label %cond.true21, label %cond.false23, !dbg !5973

cond.true21:                                      ; preds = %cond.end
  %20 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5973
  %nary_obstack22 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %20, i32 0, i32 3, !dbg !5973
  %maybe_empty_object = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack22, i32 0, i32 10, !dbg !5973
  %bf.load = load i8, i8* %maybe_empty_object, align 8, !dbg !5973
  %bf.clear = and i8 %bf.load, -3, !dbg !5973
  %bf.set = or i8 %bf.clear, 2, !dbg !5973
  store i8 %bf.set, i8* %maybe_empty_object, align 8, !dbg !5973
  br label %cond.end24, !dbg !5973

cond.false23:                                     ; preds = %cond.end
  br label %cond.end24, !dbg !5973

cond.end24:                                       ; preds = %cond.false23, %cond.true21
  %cond25 = phi i32 [ 0, %cond.true21 ], [ 0, %cond.false23 ], !dbg !5973
  %21 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5973
  %nary_obstack26 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %21, i32 0, i32 3, !dbg !5973
  %object_base27 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack26, i32 0, i32 2, !dbg !5973
  %22 = load i8*, i8** %object_base27, align 8, !dbg !5973
  %sub.ptr.lhs.cast28 = ptrtoint i8* %22 to i64, !dbg !5973
  %sub.ptr.sub29 = sub i64 %sub.ptr.lhs.cast28, 0, !dbg !5973
  %23 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5973
  %nary_obstack30 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %23, i32 0, i32 3, !dbg !5973
  %temp31 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack30, i32 0, i32 5, !dbg !5973
  store i64 %sub.ptr.sub29, i64* %temp31, align 8, !dbg !5973
  %24 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5973
  %nary_obstack32 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %24, i32 0, i32 3, !dbg !5973
  %next_free33 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack32, i32 0, i32 3, !dbg !5973
  %25 = load i8*, i8** %next_free33, align 8, !dbg !5973
  %sub.ptr.lhs.cast34 = ptrtoint i8* %25 to i64, !dbg !5973
  %sub.ptr.sub35 = sub i64 %sub.ptr.lhs.cast34, 0, !dbg !5973
  %26 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5973
  %nary_obstack36 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %26, i32 0, i32 3, !dbg !5973
  %alignment_mask = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack36, i32 0, i32 6, !dbg !5973
  %27 = load i32, i32* %alignment_mask, align 8, !dbg !5973
  %conv37 = sext i32 %27 to i64, !dbg !5973
  %add = add nsw i64 %sub.ptr.sub35, %conv37, !dbg !5973
  %28 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5973
  %nary_obstack38 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %28, i32 0, i32 3, !dbg !5973
  %alignment_mask39 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack38, i32 0, i32 6, !dbg !5973
  %29 = load i32, i32* %alignment_mask39, align 8, !dbg !5973
  %neg = xor i32 %29, -1, !dbg !5973
  %conv40 = sext i32 %neg to i64, !dbg !5973
  %and = and i64 %add, %conv40, !dbg !5973
  %30 = inttoptr i64 %and to i8*, !dbg !5973
  %31 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5973
  %nary_obstack41 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %31, i32 0, i32 3, !dbg !5973
  %next_free42 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack41, i32 0, i32 3, !dbg !5973
  store i8* %30, i8** %next_free42, align 8, !dbg !5973
  %32 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5973
  %nary_obstack43 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %32, i32 0, i32 3, !dbg !5973
  %next_free44 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack43, i32 0, i32 3, !dbg !5973
  %33 = load i8*, i8** %next_free44, align 8, !dbg !5973
  %34 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5973
  %nary_obstack45 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %34, i32 0, i32 3, !dbg !5973
  %chunk = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack45, i32 0, i32 1, !dbg !5973
  %35 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8, !dbg !5973
  %36 = bitcast %struct._obstack_chunk* %35 to i8*, !dbg !5973
  %sub.ptr.lhs.cast46 = ptrtoint i8* %33 to i64, !dbg !5973
  %sub.ptr.rhs.cast47 = ptrtoint i8* %36 to i64, !dbg !5973
  %sub.ptr.sub48 = sub i64 %sub.ptr.lhs.cast46, %sub.ptr.rhs.cast47, !dbg !5973
  %37 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5973
  %nary_obstack49 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %37, i32 0, i32 3, !dbg !5973
  %chunk_limit50 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack49, i32 0, i32 4, !dbg !5973
  %38 = load i8*, i8** %chunk_limit50, align 8, !dbg !5973
  %39 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5973
  %nary_obstack51 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %39, i32 0, i32 3, !dbg !5973
  %chunk52 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack51, i32 0, i32 1, !dbg !5973
  %40 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk52, align 8, !dbg !5973
  %41 = bitcast %struct._obstack_chunk* %40 to i8*, !dbg !5973
  %sub.ptr.lhs.cast53 = ptrtoint i8* %38 to i64, !dbg !5973
  %sub.ptr.rhs.cast54 = ptrtoint i8* %41 to i64, !dbg !5973
  %sub.ptr.sub55 = sub i64 %sub.ptr.lhs.cast53, %sub.ptr.rhs.cast54, !dbg !5973
  %cmp56 = icmp sgt i64 %sub.ptr.sub48, %sub.ptr.sub55, !dbg !5973
  br i1 %cmp56, label %cond.true58, label %cond.false63, !dbg !5973

cond.true58:                                      ; preds = %cond.end24
  %42 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5973
  %nary_obstack59 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %42, i32 0, i32 3, !dbg !5973
  %chunk_limit60 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack59, i32 0, i32 4, !dbg !5973
  %43 = load i8*, i8** %chunk_limit60, align 8, !dbg !5973
  %44 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5973
  %nary_obstack61 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %44, i32 0, i32 3, !dbg !5973
  %next_free62 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack61, i32 0, i32 3, !dbg !5973
  store i8* %43, i8** %next_free62, align 8, !dbg !5973
  br label %cond.end64, !dbg !5973

cond.false63:                                     ; preds = %cond.end24
  br label %cond.end64, !dbg !5973

cond.end64:                                       ; preds = %cond.false63, %cond.true58
  %cond65 = phi i8* [ %43, %cond.true58 ], [ null, %cond.false63 ], !dbg !5973
  %45 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5973
  %nary_obstack66 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %45, i32 0, i32 3, !dbg !5973
  %next_free67 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack66, i32 0, i32 3, !dbg !5973
  %46 = load i8*, i8** %next_free67, align 8, !dbg !5973
  %47 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5973
  %nary_obstack68 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %47, i32 0, i32 3, !dbg !5973
  %object_base69 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack68, i32 0, i32 2, !dbg !5973
  store i8* %46, i8** %object_base69, align 8, !dbg !5973
  %48 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !5973
  %nary_obstack70 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %48, i32 0, i32 3, !dbg !5973
  %temp71 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack70, i32 0, i32 5, !dbg !5973
  %49 = load i64, i64* %temp71, align 8, !dbg !5973
  %50 = inttoptr i64 %49 to i8*, !dbg !5973
  %51 = bitcast i8* %50 to %struct.vn_nary_op_s*, !dbg !5974
  store %struct.vn_nary_op_s* %51, %struct.vn_nary_op_s** %vno1, align 8, !dbg !5975
  %52 = load %union.tree_node*, %union.tree_node** %result.addr, align 8, !dbg !5976
  %call72 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %52), !dbg !5977
  %value_id = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call72, i32 0, i32 2, !dbg !5978
  %53 = load i32, i32* %value_id, align 8, !dbg !5978
  %54 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !5979
  %value_id73 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %54, i32 0, i32 0, !dbg !5980
  store i32 %53, i32* %value_id73, align 8, !dbg !5981
  %55 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5982
  %call74 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %55), !dbg !5983
  %56 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !5984
  %opcode = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %56, i32 0, i32 1, !dbg !5985
  %bf.load75 = load i32, i32* %opcode, align 4, !dbg !5986
  %bf.value = and i32 %call74, 65535, !dbg !5986
  %bf.clear76 = and i32 %bf.load75, -65536, !dbg !5986
  %bf.set77 = or i32 %bf.clear76, %bf.value, !dbg !5986
  store i32 %bf.set77, i32* %opcode, align 4, !dbg !5986
  %57 = load i32, i32* %length, align 4, !dbg !5987
  %58 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !5988
  %length78 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %58, i32 0, i32 1, !dbg !5989
  %bf.load79 = load i32, i32* %length78, align 4, !dbg !5990
  %bf.value80 = and i32 %57, 65535, !dbg !5990
  %bf.shl = shl i32 %bf.value80, 16, !dbg !5990
  %bf.clear81 = and i32 %bf.load79, 65535, !dbg !5990
  %bf.set82 = or i32 %bf.clear81, %bf.shl, !dbg !5990
  store i32 %bf.set82, i32* %length78, align 4, !dbg !5990
  %59 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5991
  %call83 = call %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %59), !dbg !5992
  %60 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !5993
  %type = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %60, i32 0, i32 4, !dbg !5994
  store %union.tree_node* %call83, %union.tree_node** %type, align 8, !dbg !5995
  store i32 0, i32* %i, align 4, !dbg !5996
  br label %for.cond, !dbg !5998

for.cond:                                         ; preds = %for.inc, %cond.end64
  %61 = load i32, i32* %i, align 4, !dbg !5999
  %62 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !6001
  %length84 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %62, i32 0, i32 1, !dbg !6002
  %bf.load85 = load i32, i32* %length84, align 4, !dbg !6002
  %bf.lshr = lshr i32 %bf.load85, 16, !dbg !6002
  %cmp86 = icmp ult i32 %61, %bf.lshr, !dbg !6003
  br i1 %cmp86, label %for.body, label %for.end, !dbg !6004

for.body:                                         ; preds = %for.cond
  %63 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6005
  %64 = load i32, i32* %i, align 4, !dbg !6006
  %add88 = add i32 %64, 1, !dbg !6007
  %call89 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %63, i32 %add88), !dbg !6008
  %65 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !6009
  %op = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %65, i32 0, i32 5, !dbg !6010
  %66 = load i32, i32* %i, align 4, !dbg !6011
  %idxprom = zext i32 %66 to i64, !dbg !6009
  %arrayidx = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op, i64 0, i64 %idxprom, !dbg !6009
  store %union.tree_node* %call89, %union.tree_node** %arrayidx, align 8, !dbg !6012
  br label %for.inc, !dbg !6009

for.inc:                                          ; preds = %for.body
  %67 = load i32, i32* %i, align 4, !dbg !6013
  %inc = add i32 %67, 1, !dbg !6013
  store i32 %inc, i32* %i, align 4, !dbg !6013
  br label %for.cond, !dbg !6014, !llvm.loop !6015

for.end:                                          ; preds = %for.cond
  %68 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !6017
  %opcode90 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %68, i32 0, i32 1, !dbg !6019
  %bf.load91 = load i32, i32* %opcode90, align 4, !dbg !6019
  %bf.clear92 = and i32 %bf.load91, 65535, !dbg !6019
  %cmp93 = icmp eq i32 %bf.clear92, 43, !dbg !6020
  br i1 %cmp93, label %if.then, label %lor.lhs.false, !dbg !6021

lor.lhs.false:                                    ; preds = %for.end
  %69 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !6022
  %opcode95 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %69, i32 0, i32 1, !dbg !6023
  %bf.load96 = load i32, i32* %opcode95, align 4, !dbg !6023
  %bf.clear97 = and i32 %bf.load96, 65535, !dbg !6023
  %cmp98 = icmp eq i32 %bf.clear97, 44, !dbg !6024
  br i1 %cmp98, label %if.then, label %lor.lhs.false100, !dbg !6025

lor.lhs.false100:                                 ; preds = %lor.lhs.false
  %70 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !6026
  %opcode101 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %70, i32 0, i32 1, !dbg !6027
  %bf.load102 = load i32, i32* %opcode101, align 4, !dbg !6027
  %bf.clear103 = and i32 %bf.load102, 65535, !dbg !6027
  %cmp104 = icmp eq i32 %bf.clear103, 118, !dbg !6028
  br i1 %cmp104, label %if.then, label %if.end, !dbg !6029

if.then:                                          ; preds = %lor.lhs.false100, %lor.lhs.false, %for.end
  %71 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !6030
  %op106 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %71, i32 0, i32 5, !dbg !6030
  %arrayidx107 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op106, i64 0, i64 0, !dbg !6030
  %72 = load %union.tree_node*, %union.tree_node** %arrayidx107, align 8, !dbg !6030
  %exp = bitcast %union.tree_node* %72 to %struct.tree_exp*, !dbg !6030
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !6030
  %arrayidx108 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !6030
  %73 = load %union.tree_node*, %union.tree_node** %arrayidx108, align 8, !dbg !6030
  %74 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !6031
  %op109 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %74, i32 0, i32 5, !dbg !6032
  %arrayidx110 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op109, i64 0, i64 0, !dbg !6031
  store %union.tree_node* %73, %union.tree_node** %arrayidx110, align 8, !dbg !6033
  br label %if.end, !dbg !6031

if.end:                                           ; preds = %if.then, %lor.lhs.false100
  %75 = load %union.tree_node*, %union.tree_node** %result.addr, align 8, !dbg !6034
  %76 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !6035
  %result111 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %76, i32 0, i32 3, !dbg !6036
  store %union.tree_node* %75, %union.tree_node** %result111, align 8, !dbg !6037
  %77 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !6038
  %call112 = call i32 @vn_nary_op_compute_hash(%struct.vn_nary_op_s* %77), !dbg !6039
  %78 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !6040
  %hashcode = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %78, i32 0, i32 2, !dbg !6041
  store i32 %call112, i32* %hashcode, align 8, !dbg !6042
  %79 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !6043
  %nary = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %79, i32 0, i32 0, !dbg !6044
  %80 = load %struct.htab*, %struct.htab** %nary, align 8, !dbg !6044
  %81 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !6045
  %82 = bitcast %struct.vn_nary_op_s* %81 to i8*, !dbg !6045
  %83 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !6046
  %hashcode113 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %83, i32 0, i32 2, !dbg !6047
  %84 = load i32, i32* %hashcode113, align 8, !dbg !6047
  %call114 = call i8** @htab_find_slot_with_hash(%struct.htab* %80, i8* %82, i32 %84, i32 1), !dbg !6048
  store i8** %call114, i8*** %slot, align 8, !dbg !6049
  %85 = load i8**, i8*** %slot, align 8, !dbg !6050
  %86 = load i8*, i8** %85, align 8, !dbg !6050
  %tobool = icmp ne i8* %86, null, !dbg !6050
  br i1 %tobool, label %cond.true115, label %cond.false116, !dbg !6050

cond.true115:                                     ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0), i32 1627, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6050
  br label %cond.end117, !dbg !6050

cond.false116:                                    ; preds = %if.end
  br label %cond.end117, !dbg !6050

cond.end117:                                      ; preds = %cond.false116, %cond.true115
  %cond118 = phi i32 [ 0, %cond.true115 ], [ 0, %cond.false116 ], !dbg !6050
  %87 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !6051
  %88 = bitcast %struct.vn_nary_op_s* %87 to i8*, !dbg !6051
  %89 = load i8**, i8*** %slot, align 8, !dbg !6052
  store i8* %88, i8** %89, align 8, !dbg !6053
  %90 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !6054
  ret %struct.vn_nary_op_s* %90, !dbg !6055
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @free_scc_vn() #0 !dbg !6056 {
entry:
  %i = alloca i64, align 8
  %name = alloca %union.tree_node*, align 8
  call void @llvm.dbg.declare(metadata i64* %i, metadata !6059, metadata !DIExpression()), !dbg !6060
  %0 = load %struct.htab*, %struct.htab** @constant_to_value_id, align 8, !dbg !6061
  call void @htab_delete(%struct.htab* %0), !dbg !6062
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @constant_value_ids, align 8, !dbg !6063
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %1), !dbg !6063
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** @constant_value_ids, align 8, !dbg !6063
  call void @VEC_tree_heap_free(%struct.VEC_tree_heap** @shared_lookup_phiargs), !dbg !6064
  call void @VEC_vn_reference_op_s_heap_free(%struct.VEC_vn_reference_op_s_heap** @shared_lookup_references), !dbg !6065
  %2 = load i32*, i32** @rpo_numbers, align 8, !dbg !6066
  %3 = bitcast i32* %2 to i8*, !dbg !6066
  call void @free(i8* %3), !dbg !6066
  store i64 0, i64* %i, align 8, !dbg !6067
  br label %for.cond, !dbg !6069

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i64, i64* %i, align 8, !dbg !6070
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6072
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !6072
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 3, !dbg !6072
  %6 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !6072
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %6, i32 0, i32 2, !dbg !6072
  %7 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !6072
  %tobool = icmp ne %struct.VEC_tree_gc* %7, null, !dbg !6072
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6072

cond.true:                                        ; preds = %for.cond
  %8 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6072
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %8, i64 0, !dbg !6072
  %gimple_df2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 3, !dbg !6072
  %9 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df2, align 8, !dbg !6072
  %ssa_names3 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %9, i32 0, i32 2, !dbg !6072
  %10 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names3, align 8, !dbg !6072
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %10, i32 0, i32 0, !dbg !6072
  br label %cond.end, !dbg !6072

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !6072

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6072
  %call = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !6072
  %conv = zext i32 %call to i64, !dbg !6072
  %cmp = icmp ult i64 %4, %conv, !dbg !6073
  br i1 %cmp, label %for.body, label %for.end, !dbg !6074

for.body:                                         ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !6075, metadata !DIExpression()), !dbg !6077
  %11 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6078
  %add.ptr5 = getelementptr inbounds %struct.function, %struct.function* %11, i64 0, !dbg !6078
  %gimple_df6 = getelementptr inbounds %struct.function, %struct.function* %add.ptr5, i32 0, i32 3, !dbg !6078
  %12 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df6, align 8, !dbg !6078
  %ssa_names7 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %12, i32 0, i32 2, !dbg !6078
  %13 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names7, align 8, !dbg !6078
  %tobool8 = icmp ne %struct.VEC_tree_gc* %13, null, !dbg !6078
  br i1 %tobool8, label %cond.true9, label %cond.false14, !dbg !6078

cond.true9:                                       ; preds = %for.body
  %14 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6078
  %add.ptr10 = getelementptr inbounds %struct.function, %struct.function* %14, i64 0, !dbg !6078
  %gimple_df11 = getelementptr inbounds %struct.function, %struct.function* %add.ptr10, i32 0, i32 3, !dbg !6078
  %15 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df11, align 8, !dbg !6078
  %ssa_names12 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %15, i32 0, i32 2, !dbg !6078
  %16 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names12, align 8, !dbg !6078
  %base13 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %16, i32 0, i32 0, !dbg !6078
  br label %cond.end15, !dbg !6078

cond.false14:                                     ; preds = %for.body
  br label %cond.end15, !dbg !6078

cond.end15:                                       ; preds = %cond.false14, %cond.true9
  %cond16 = phi %struct.VEC_tree_base* [ %base13, %cond.true9 ], [ null, %cond.false14 ], !dbg !6078
  %17 = load i64, i64* %i, align 8, !dbg !6078
  %conv17 = trunc i64 %17 to i32, !dbg !6078
  %call18 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond16, i32 %conv17), !dbg !6078
  store %union.tree_node* %call18, %union.tree_node** %name, align 8, !dbg !6077
  %18 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !6079
  %tobool19 = icmp ne %union.tree_node* %18, null, !dbg !6079
  br i1 %tobool19, label %land.lhs.true, label %if.end, !dbg !6081

land.lhs.true:                                    ; preds = %cond.end15
  %19 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !6082
  %call20 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %19), !dbg !6083
  %needs_insertion = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call20, i32 0, i32 5, !dbg !6084
  %bf.load = load i8, i8* %needs_insertion, align 4, !dbg !6084
  %bf.lshr = lshr i8 %bf.load, 4, !dbg !6084
  %bf.clear = and i8 %bf.lshr, 1, !dbg !6084
  %bf.cast = zext i8 %bf.clear to i32, !dbg !6084
  %tobool21 = icmp ne i32 %bf.cast, 0, !dbg !6083
  br i1 %tobool21, label %if.then, label %if.end, !dbg !6085

if.then:                                          ; preds = %land.lhs.true
  %20 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !6086
  call void @release_ssa_name(%union.tree_node* %20), !dbg !6087
  br label %if.end, !dbg !6087

if.end:                                           ; preds = %if.then, %land.lhs.true, %cond.end15
  br label %for.inc, !dbg !6088

for.inc:                                          ; preds = %if.end
  %21 = load i64, i64* %i, align 8, !dbg !6089
  %inc = add i64 %21, 1, !dbg !6089
  store i64 %inc, i64* %i, align 8, !dbg !6089
  br label %for.cond, !dbg !6090, !llvm.loop !6091

for.end:                                          ; preds = %cond.end
  %22 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @vn_ssa_aux_obstack, i32 0, i32 1), align 8, !dbg !6093
  %23 = bitcast %struct._obstack_chunk* %22 to i8*, !dbg !6093
  %sub.ptr.rhs.cast = ptrtoint i8* %23 to i64, !dbg !6093
  %sub.ptr.sub = sub i64 0, %sub.ptr.rhs.cast, !dbg !6093
  store i64 %sub.ptr.sub, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @vn_ssa_aux_obstack, i32 0, i32 5), align 8, !dbg !6093
  %24 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @vn_ssa_aux_obstack, i32 0, i32 5), align 8, !dbg !6093
  %cmp22 = icmp sgt i64 %24, 0, !dbg !6093
  br i1 %cmp22, label %land.lhs.true24, label %cond.false31, !dbg !6093

land.lhs.true24:                                  ; preds = %for.end
  %25 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @vn_ssa_aux_obstack, i32 0, i32 5), align 8, !dbg !6093
  %26 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @vn_ssa_aux_obstack, i32 0, i32 4), align 8, !dbg !6093
  %27 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @vn_ssa_aux_obstack, i32 0, i32 1), align 8, !dbg !6093
  %28 = bitcast %struct._obstack_chunk* %27 to i8*, !dbg !6093
  %sub.ptr.lhs.cast = ptrtoint i8* %26 to i64, !dbg !6093
  %sub.ptr.rhs.cast25 = ptrtoint i8* %28 to i64, !dbg !6093
  %sub.ptr.sub26 = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast25, !dbg !6093
  %cmp27 = icmp slt i64 %25, %sub.ptr.sub26, !dbg !6093
  br i1 %cmp27, label %cond.true29, label %cond.false31, !dbg !6093

cond.true29:                                      ; preds = %land.lhs.true24
  %29 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @vn_ssa_aux_obstack, i32 0, i32 5), align 8, !dbg !6093
  %30 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @vn_ssa_aux_obstack, i32 0, i32 1), align 8, !dbg !6093
  %31 = bitcast %struct._obstack_chunk* %30 to i8*, !dbg !6093
  %add.ptr30 = getelementptr inbounds i8, i8* %31, i64 %29, !dbg !6093
  store i8* %add.ptr30, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @vn_ssa_aux_obstack, i32 0, i32 2), align 8, !dbg !6093
  store i8* %add.ptr30, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @vn_ssa_aux_obstack, i32 0, i32 3), align 8, !dbg !6093
  %32 = ptrtoint i8* %add.ptr30 to i64, !dbg !6093
  br label %cond.end33, !dbg !6093

cond.false31:                                     ; preds = %land.lhs.true24, %for.end
  %33 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @vn_ssa_aux_obstack, i32 0, i32 5), align 8, !dbg !6093
  %34 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @vn_ssa_aux_obstack, i32 0, i32 1), align 8, !dbg !6093
  %35 = bitcast %struct._obstack_chunk* %34 to i8*, !dbg !6093
  %add.ptr32 = getelementptr inbounds i8, i8* %35, i64 %33, !dbg !6093
  call void @obstack_free(%struct.obstack* @vn_ssa_aux_obstack, i8* %add.ptr32), !dbg !6093
  br label %cond.end33, !dbg !6093

cond.end33:                                       ; preds = %cond.false31, %cond.true29
  %cond34 = phi i64 [ %32, %cond.true29 ], [ 0, %cond.false31 ], !dbg !6093
  call void @VEC_vn_ssa_aux_t_heap_free(%struct.VEC_vn_ssa_aux_t_heap** @vn_ssa_aux_table), !dbg !6094
  call void @VEC_tree_heap_free(%struct.VEC_tree_heap** @sccstack), !dbg !6095
  %36 = load %struct.vn_tables_s*, %struct.vn_tables_s** @valid_info, align 8, !dbg !6096
  call void @free_vn_table(%struct.vn_tables_s* %36), !dbg !6097
  %37 = load %struct.vn_tables_s*, %struct.vn_tables_s** @valid_info, align 8, !dbg !6098
  %38 = bitcast %struct.vn_tables_s* %37 to i8*, !dbg !6098
  call void @free(i8* %38), !dbg !6098
  %39 = load %struct.vn_tables_s*, %struct.vn_tables_s** @optimistic_info, align 8, !dbg !6099
  call void @free_vn_table(%struct.vn_tables_s* %39), !dbg !6100
  %40 = load %struct.vn_tables_s*, %struct.vn_tables_s** @optimistic_info, align 8, !dbg !6101
  %41 = bitcast %struct.vn_tables_s* %40 to i8*, !dbg !6101
  call void @free(i8* %41), !dbg !6101
  ret void, !dbg !6102
}

declare dso_local void @htab_delete(%struct.htab*) #2

declare dso_local void @bitmap_obstack_free(%struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_tree_heap_free(%struct.VEC_tree_heap** %vec_) #0 !dbg !6103 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !6107, metadata !DIExpression()), !dbg !6108
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !6109
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %0, align 8, !dbg !6109
  %tobool = icmp ne %struct.VEC_tree_heap* %1, null, !dbg !6109
  br i1 %tobool, label %if.then, label %if.end, !dbg !6108

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !6109
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %2, align 8, !dbg !6109
  %4 = bitcast %struct.VEC_tree_heap* %3 to i8*, !dbg !6109
  call void @free(i8* %4), !dbg !6109
  br label %if.end, !dbg !6109

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !6108
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** %5, align 8, !dbg !6108
  ret void, !dbg !6108
}

declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_length(%struct.VEC_tree_base* %vec_) #0 !dbg !6111 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !6116, metadata !DIExpression()), !dbg !6117
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6117
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !6117
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6117

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6117
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %1, i32 0, i32 0, !dbg !6117
  %2 = load i32, i32* %num, align 8, !dbg !6117
  br label %cond.end, !dbg !6117

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6117

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !6117
  ret i32 %cond, !dbg !6117
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %vec_, i32 %ix_) #0 !dbg !6118 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !6121, metadata !DIExpression()), !dbg !6122
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6123, metadata !DIExpression()), !dbg !6122
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6122
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !6122
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !6122

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6122
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6122
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 0, !dbg !6122
  %3 = load i32, i32* %num, align 8, !dbg !6122
  %cmp = icmp ult i32 %1, %3, !dbg !6122
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !6124
  %land.ext = zext i1 %4 to i32, !dbg !6122
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6122
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 2, !dbg !6122
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !6122
  %idxprom = zext i32 %6 to i64, !dbg !6122
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !6122
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6122
  ret %union.tree_node* %7, !dbg !6122
}

declare dso_local void @release_ssa_name(%union.tree_node*) #2

declare dso_local void @obstack_free(%struct.obstack*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_vn_ssa_aux_t_heap_free(%struct.VEC_vn_ssa_aux_t_heap** %vec_) #0 !dbg !6125 {
entry:
  %vec_.addr = alloca %struct.VEC_vn_ssa_aux_t_heap**, align 8
  store %struct.VEC_vn_ssa_aux_t_heap** %vec_, %struct.VEC_vn_ssa_aux_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_ssa_aux_t_heap*** %vec_.addr, metadata !6128, metadata !DIExpression()), !dbg !6129
  %0 = load %struct.VEC_vn_ssa_aux_t_heap**, %struct.VEC_vn_ssa_aux_t_heap*** %vec_.addr, align 8, !dbg !6130
  %1 = load %struct.VEC_vn_ssa_aux_t_heap*, %struct.VEC_vn_ssa_aux_t_heap** %0, align 8, !dbg !6130
  %tobool = icmp ne %struct.VEC_vn_ssa_aux_t_heap* %1, null, !dbg !6130
  br i1 %tobool, label %if.then, label %if.end, !dbg !6129

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_vn_ssa_aux_t_heap**, %struct.VEC_vn_ssa_aux_t_heap*** %vec_.addr, align 8, !dbg !6130
  %3 = load %struct.VEC_vn_ssa_aux_t_heap*, %struct.VEC_vn_ssa_aux_t_heap** %2, align 8, !dbg !6130
  %4 = bitcast %struct.VEC_vn_ssa_aux_t_heap* %3 to i8*, !dbg !6130
  call void @free(i8* %4), !dbg !6130
  br label %if.end, !dbg !6130

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_vn_ssa_aux_t_heap**, %struct.VEC_vn_ssa_aux_t_heap*** %vec_.addr, align 8, !dbg !6129
  store %struct.VEC_vn_ssa_aux_t_heap* null, %struct.VEC_vn_ssa_aux_t_heap** %5, align 8, !dbg !6129
  ret void, !dbg !6129
}

; Function Attrs: noinline nounwind uwtable
define internal void @free_vn_table(%struct.vn_tables_s* %table) #0 !dbg !6132 {
entry:
  %table.addr = alloca %struct.vn_tables_s*, align 8
  store %struct.vn_tables_s* %table, %struct.vn_tables_s** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.vn_tables_s** %table.addr, metadata !6135, metadata !DIExpression()), !dbg !6136
  %0 = load %struct.vn_tables_s*, %struct.vn_tables_s** %table.addr, align 8, !dbg !6137
  %phis = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %0, i32 0, i32 1, !dbg !6138
  %1 = load %struct.htab*, %struct.htab** %phis, align 8, !dbg !6138
  call void @htab_delete(%struct.htab* %1), !dbg !6139
  %2 = load %struct.vn_tables_s*, %struct.vn_tables_s** %table.addr, align 8, !dbg !6140
  %nary = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %2, i32 0, i32 0, !dbg !6141
  %3 = load %struct.htab*, %struct.htab** %nary, align 8, !dbg !6141
  call void @htab_delete(%struct.htab* %3), !dbg !6142
  %4 = load %struct.vn_tables_s*, %struct.vn_tables_s** %table.addr, align 8, !dbg !6143
  %references = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %4, i32 0, i32 2, !dbg !6144
  %5 = load %struct.htab*, %struct.htab** %references, align 8, !dbg !6144
  call void @htab_delete(%struct.htab* %5), !dbg !6145
  %6 = load %struct.vn_tables_s*, %struct.vn_tables_s** %table.addr, align 8, !dbg !6146
  %nary_obstack = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %6, i32 0, i32 3, !dbg !6146
  %chunk = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack, i32 0, i32 1, !dbg !6146
  %7 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8, !dbg !6146
  %8 = bitcast %struct._obstack_chunk* %7 to i8*, !dbg !6146
  %sub.ptr.rhs.cast = ptrtoint i8* %8 to i64, !dbg !6146
  %sub.ptr.sub = sub i64 0, %sub.ptr.rhs.cast, !dbg !6146
  %9 = load %struct.vn_tables_s*, %struct.vn_tables_s** %table.addr, align 8, !dbg !6146
  %nary_obstack1 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %9, i32 0, i32 3, !dbg !6146
  %temp = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack1, i32 0, i32 5, !dbg !6146
  store i64 %sub.ptr.sub, i64* %temp, align 8, !dbg !6146
  %10 = load %struct.vn_tables_s*, %struct.vn_tables_s** %table.addr, align 8, !dbg !6146
  %nary_obstack2 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %10, i32 0, i32 3, !dbg !6146
  %temp3 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack2, i32 0, i32 5, !dbg !6146
  %11 = load i64, i64* %temp3, align 8, !dbg !6146
  %cmp = icmp sgt i64 %11, 0, !dbg !6146
  br i1 %cmp, label %land.lhs.true, label %cond.false, !dbg !6146

land.lhs.true:                                    ; preds = %entry
  %12 = load %struct.vn_tables_s*, %struct.vn_tables_s** %table.addr, align 8, !dbg !6146
  %nary_obstack4 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %12, i32 0, i32 3, !dbg !6146
  %temp5 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack4, i32 0, i32 5, !dbg !6146
  %13 = load i64, i64* %temp5, align 8, !dbg !6146
  %14 = load %struct.vn_tables_s*, %struct.vn_tables_s** %table.addr, align 8, !dbg !6146
  %nary_obstack6 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %14, i32 0, i32 3, !dbg !6146
  %chunk_limit = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack6, i32 0, i32 4, !dbg !6146
  %15 = load i8*, i8** %chunk_limit, align 8, !dbg !6146
  %16 = load %struct.vn_tables_s*, %struct.vn_tables_s** %table.addr, align 8, !dbg !6146
  %nary_obstack7 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %16, i32 0, i32 3, !dbg !6146
  %chunk8 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack7, i32 0, i32 1, !dbg !6146
  %17 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk8, align 8, !dbg !6146
  %18 = bitcast %struct._obstack_chunk* %17 to i8*, !dbg !6146
  %sub.ptr.lhs.cast = ptrtoint i8* %15 to i64, !dbg !6146
  %sub.ptr.rhs.cast9 = ptrtoint i8* %18 to i64, !dbg !6146
  %sub.ptr.sub10 = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast9, !dbg !6146
  %cmp11 = icmp slt i64 %13, %sub.ptr.sub10, !dbg !6146
  br i1 %cmp11, label %cond.true, label %cond.false, !dbg !6146

cond.true:                                        ; preds = %land.lhs.true
  %19 = load %struct.vn_tables_s*, %struct.vn_tables_s** %table.addr, align 8, !dbg !6146
  %nary_obstack12 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %19, i32 0, i32 3, !dbg !6146
  %temp13 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack12, i32 0, i32 5, !dbg !6146
  %20 = load i64, i64* %temp13, align 8, !dbg !6146
  %21 = load %struct.vn_tables_s*, %struct.vn_tables_s** %table.addr, align 8, !dbg !6146
  %nary_obstack14 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %21, i32 0, i32 3, !dbg !6146
  %chunk15 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack14, i32 0, i32 1, !dbg !6146
  %22 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk15, align 8, !dbg !6146
  %23 = bitcast %struct._obstack_chunk* %22 to i8*, !dbg !6146
  %add.ptr = getelementptr inbounds i8, i8* %23, i64 %20, !dbg !6146
  %24 = load %struct.vn_tables_s*, %struct.vn_tables_s** %table.addr, align 8, !dbg !6146
  %nary_obstack16 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %24, i32 0, i32 3, !dbg !6146
  %object_base = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack16, i32 0, i32 2, !dbg !6146
  store i8* %add.ptr, i8** %object_base, align 8, !dbg !6146
  %25 = load %struct.vn_tables_s*, %struct.vn_tables_s** %table.addr, align 8, !dbg !6146
  %nary_obstack17 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %25, i32 0, i32 3, !dbg !6146
  %next_free = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack17, i32 0, i32 3, !dbg !6146
  store i8* %add.ptr, i8** %next_free, align 8, !dbg !6146
  %26 = ptrtoint i8* %add.ptr to i64, !dbg !6146
  br label %cond.end, !dbg !6146

cond.false:                                       ; preds = %land.lhs.true, %entry
  %27 = load %struct.vn_tables_s*, %struct.vn_tables_s** %table.addr, align 8, !dbg !6146
  %nary_obstack18 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %27, i32 0, i32 3, !dbg !6146
  %28 = load %struct.vn_tables_s*, %struct.vn_tables_s** %table.addr, align 8, !dbg !6146
  %nary_obstack19 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %28, i32 0, i32 3, !dbg !6146
  %temp20 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack19, i32 0, i32 5, !dbg !6146
  %29 = load i64, i64* %temp20, align 8, !dbg !6146
  %30 = load %struct.vn_tables_s*, %struct.vn_tables_s** %table.addr, align 8, !dbg !6146
  %nary_obstack21 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %30, i32 0, i32 3, !dbg !6146
  %chunk22 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack21, i32 0, i32 1, !dbg !6146
  %31 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk22, align 8, !dbg !6146
  %32 = bitcast %struct._obstack_chunk* %31 to i8*, !dbg !6146
  %add.ptr23 = getelementptr inbounds i8, i8* %32, i64 %29, !dbg !6146
  call void @obstack_free(%struct.obstack* %nary_obstack18, i8* %add.ptr23), !dbg !6146
  br label %cond.end, !dbg !6146

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %26, %cond.true ], [ 0, %cond.false ], !dbg !6146
  %33 = load %struct.vn_tables_s*, %struct.vn_tables_s** %table.addr, align 8, !dbg !6147
  %phis_pool = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %33, i32 0, i32 4, !dbg !6148
  %34 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** %phis_pool, align 8, !dbg !6148
  call void @free_alloc_pool(%struct.alloc_pool_def* %34), !dbg !6149
  %35 = load %struct.vn_tables_s*, %struct.vn_tables_s** %table.addr, align 8, !dbg !6150
  %references_pool = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %35, i32 0, i32 5, !dbg !6151
  %36 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** %references_pool, align 8, !dbg !6151
  call void @free_alloc_pool(%struct.alloc_pool_def* %36), !dbg !6152
  ret void, !dbg !6153
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @run_scc_vn(i8 zeroext %may_insert_arg) #0 !dbg !6154 {
entry:
  %retval = alloca i8, align 1
  %may_insert_arg.addr = alloca i8, align 1
  %i = alloca i64, align 8
  %param = alloca %union.tree_node*, align 8
  %changed = alloca i8, align 1
  %def = alloca %union.tree_node*, align 8
  %name = alloca %union.tree_node*, align 8
  %name61 = alloca %union.tree_node*, align 8
  %info = alloca %struct.vn_ssa_aux*, align 8
  %name119 = alloca %union.tree_node*, align 8
  %info134 = alloca %struct.vn_ssa_aux*, align 8
  %name189 = alloca %union.tree_node*, align 8
  store i8 %may_insert_arg, i8* %may_insert_arg.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %may_insert_arg.addr, metadata !6157, metadata !DIExpression()), !dbg !6158
  call void @llvm.dbg.declare(metadata i64* %i, metadata !6159, metadata !DIExpression()), !dbg !6160
  call void @llvm.dbg.declare(metadata %union.tree_node** %param, metadata !6161, metadata !DIExpression()), !dbg !6162
  call void @llvm.dbg.declare(metadata i8* %changed, metadata !6163, metadata !DIExpression()), !dbg !6164
  store i8 1, i8* %changed, align 1, !dbg !6164
  %0 = load i8, i8* %may_insert_arg.addr, align 1, !dbg !6165
  store i8 %0, i8* @may_insert, align 1, !dbg !6166
  call void @init_scc_vn(), !dbg !6167
  %1 = load %struct.vn_tables_s*, %struct.vn_tables_s** @valid_info, align 8, !dbg !6168
  store %struct.vn_tables_s* %1, %struct.vn_tables_s** @current_info, align 8, !dbg !6169
  %2 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !6170
  %decl_non_common = bitcast %union.tree_node* %2 to %struct.tree_decl_non_common*, !dbg !6170
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 2, !dbg !6170
  %3 = load %union.tree_node*, %union.tree_node** %arguments, align 8, !dbg !6170
  store %union.tree_node* %3, %union.tree_node** %param, align 8, !dbg !6172
  br label %for.cond, !dbg !6173

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %union.tree_node*, %union.tree_node** %param, align 8, !dbg !6174
  %tobool = icmp ne %union.tree_node* %4, null, !dbg !6176
  br i1 %tobool, label %for.body, label %for.end, !dbg !6176

for.body:                                         ; preds = %for.cond
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6177
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !6177
  %6 = load %union.tree_node*, %union.tree_node** %param, align 8, !dbg !6180
  %call = call %union.tree_node* @gimple_default_def(%struct.function* %add.ptr, %union.tree_node* %6), !dbg !6181
  %cmp = icmp ne %union.tree_node* %call, null, !dbg !6182
  br i1 %cmp, label %if.then, label %if.end, !dbg !6183

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata %union.tree_node** %def, metadata !6184, metadata !DIExpression()), !dbg !6186
  %7 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6187
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %7, i64 0, !dbg !6187
  %8 = load %union.tree_node*, %union.tree_node** %param, align 8, !dbg !6188
  %call2 = call %union.tree_node* @gimple_default_def(%struct.function* %add.ptr1, %union.tree_node* %8), !dbg !6189
  store %union.tree_node* %call2, %union.tree_node** %def, align 8, !dbg !6186
  %9 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !6190
  %10 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !6191
  %call3 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %10), !dbg !6192
  %valnum = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call3, i32 0, i32 0, !dbg !6193
  store %union.tree_node* %9, %union.tree_node** %valnum, align 8, !dbg !6194
  br label %if.end, !dbg !6195

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !6196

for.inc:                                          ; preds = %if.end
  %11 = load %union.tree_node*, %union.tree_node** %param, align 8, !dbg !6197
  %common = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !6197
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !6197
  %12 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !6197
  store %union.tree_node* %12, %union.tree_node** %param, align 8, !dbg !6198
  br label %for.cond, !dbg !6199, !llvm.loop !6200

for.end:                                          ; preds = %for.cond
  store i64 1, i64* %i, align 8, !dbg !6202
  br label %for.cond4, !dbg !6204

for.cond4:                                        ; preds = %for.inc41, %for.end
  %13 = load i64, i64* %i, align 8, !dbg !6205
  %14 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6207
  %add.ptr5 = getelementptr inbounds %struct.function, %struct.function* %14, i64 0, !dbg !6207
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr5, i32 0, i32 3, !dbg !6207
  %15 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !6207
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %15, i32 0, i32 2, !dbg !6207
  %16 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !6207
  %tobool6 = icmp ne %struct.VEC_tree_gc* %16, null, !dbg !6207
  br i1 %tobool6, label %cond.true, label %cond.false, !dbg !6207

cond.true:                                        ; preds = %for.cond4
  %17 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6207
  %add.ptr7 = getelementptr inbounds %struct.function, %struct.function* %17, i64 0, !dbg !6207
  %gimple_df8 = getelementptr inbounds %struct.function, %struct.function* %add.ptr7, i32 0, i32 3, !dbg !6207
  %18 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df8, align 8, !dbg !6207
  %ssa_names9 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %18, i32 0, i32 2, !dbg !6207
  %19 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names9, align 8, !dbg !6207
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %19, i32 0, i32 0, !dbg !6207
  br label %cond.end, !dbg !6207

cond.false:                                       ; preds = %for.cond4
  br label %cond.end, !dbg !6207

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6207
  %call10 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !6207
  %conv = zext i32 %call10 to i64, !dbg !6207
  %cmp11 = icmp ult i64 %13, %conv, !dbg !6208
  br i1 %cmp11, label %for.body13, label %for.end42, !dbg !6209

for.body13:                                       ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !6210, metadata !DIExpression()), !dbg !6212
  %20 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6213
  %add.ptr14 = getelementptr inbounds %struct.function, %struct.function* %20, i64 0, !dbg !6213
  %gimple_df15 = getelementptr inbounds %struct.function, %struct.function* %add.ptr14, i32 0, i32 3, !dbg !6213
  %21 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df15, align 8, !dbg !6213
  %ssa_names16 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %21, i32 0, i32 2, !dbg !6213
  %22 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names16, align 8, !dbg !6213
  %tobool17 = icmp ne %struct.VEC_tree_gc* %22, null, !dbg !6213
  br i1 %tobool17, label %cond.true18, label %cond.false23, !dbg !6213

cond.true18:                                      ; preds = %for.body13
  %23 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6213
  %add.ptr19 = getelementptr inbounds %struct.function, %struct.function* %23, i64 0, !dbg !6213
  %gimple_df20 = getelementptr inbounds %struct.function, %struct.function* %add.ptr19, i32 0, i32 3, !dbg !6213
  %24 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df20, align 8, !dbg !6213
  %ssa_names21 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %24, i32 0, i32 2, !dbg !6213
  %25 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names21, align 8, !dbg !6213
  %base22 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %25, i32 0, i32 0, !dbg !6213
  br label %cond.end24, !dbg !6213

cond.false23:                                     ; preds = %for.body13
  br label %cond.end24, !dbg !6213

cond.end24:                                       ; preds = %cond.false23, %cond.true18
  %cond25 = phi %struct.VEC_tree_base* [ %base22, %cond.true18 ], [ null, %cond.false23 ], !dbg !6213
  %26 = load i64, i64* %i, align 8, !dbg !6213
  %conv26 = trunc i64 %26 to i32, !dbg !6213
  %call27 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond25, i32 %conv26), !dbg !6213
  store %union.tree_node* %call27, %union.tree_node** %name, align 8, !dbg !6212
  %27 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !6214
  %tobool28 = icmp ne %union.tree_node* %27, null, !dbg !6214
  br i1 %tobool28, label %land.lhs.true, label %if.end40, !dbg !6216

land.lhs.true:                                    ; preds = %cond.end24
  %28 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !6217
  %call29 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %28), !dbg !6218
  %visited = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call29, i32 0, i32 5, !dbg !6219
  %bf.load = load i8, i8* %visited, align 4, !dbg !6219
  %bf.clear = and i8 %bf.load, 1, !dbg !6219
  %bf.cast = zext i8 %bf.clear to i32, !dbg !6219
  %cmp30 = icmp eq i32 %bf.cast, 0, !dbg !6220
  br i1 %cmp30, label %land.lhs.true32, label %if.end40, !dbg !6221

land.lhs.true32:                                  ; preds = %land.lhs.true
  %29 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !6222
  %call33 = call zeroext i8 @has_zero_uses(%union.tree_node* %29), !dbg !6223
  %tobool34 = icmp ne i8 %call33, 0, !dbg !6223
  br i1 %tobool34, label %if.end40, label %if.then35, !dbg !6224

if.then35:                                        ; preds = %land.lhs.true32
  %30 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !6225
  %call36 = call zeroext i8 @DFS(%union.tree_node* %30), !dbg !6227
  %tobool37 = icmp ne i8 %call36, 0, !dbg !6227
  br i1 %tobool37, label %if.end39, label %if.then38, !dbg !6228

if.then38:                                        ; preds = %if.then35
  call void @free_scc_vn(), !dbg !6229
  store i8 0, i8* @may_insert, align 1, !dbg !6231
  store i8 0, i8* %retval, align 1, !dbg !6232
  br label %return, !dbg !6232

if.end39:                                         ; preds = %if.then35
  br label %if.end40, !dbg !6233

if.end40:                                         ; preds = %if.end39, %land.lhs.true32, %land.lhs.true, %cond.end24
  br label %for.inc41, !dbg !6234

for.inc41:                                        ; preds = %if.end40
  %31 = load i64, i64* %i, align 8, !dbg !6235
  %inc = add i64 %31, 1, !dbg !6235
  store i64 %inc, i64* %i, align 8, !dbg !6235
  br label %for.cond4, !dbg !6236, !llvm.loop !6237

for.end42:                                        ; preds = %cond.end
  store i64 1, i64* %i, align 8, !dbg !6239
  br label %for.cond43, !dbg !6241

for.cond43:                                       ; preds = %for.inc97, %for.end42
  %32 = load i64, i64* %i, align 8, !dbg !6242
  %33 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6244
  %add.ptr44 = getelementptr inbounds %struct.function, %struct.function* %33, i64 0, !dbg !6244
  %gimple_df45 = getelementptr inbounds %struct.function, %struct.function* %add.ptr44, i32 0, i32 3, !dbg !6244
  %34 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df45, align 8, !dbg !6244
  %ssa_names46 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %34, i32 0, i32 2, !dbg !6244
  %35 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names46, align 8, !dbg !6244
  %tobool47 = icmp ne %struct.VEC_tree_gc* %35, null, !dbg !6244
  br i1 %tobool47, label %cond.true48, label %cond.false53, !dbg !6244

cond.true48:                                      ; preds = %for.cond43
  %36 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6244
  %add.ptr49 = getelementptr inbounds %struct.function, %struct.function* %36, i64 0, !dbg !6244
  %gimple_df50 = getelementptr inbounds %struct.function, %struct.function* %add.ptr49, i32 0, i32 3, !dbg !6244
  %37 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df50, align 8, !dbg !6244
  %ssa_names51 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %37, i32 0, i32 2, !dbg !6244
  %38 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names51, align 8, !dbg !6244
  %base52 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %38, i32 0, i32 0, !dbg !6244
  br label %cond.end54, !dbg !6244

cond.false53:                                     ; preds = %for.cond43
  br label %cond.end54, !dbg !6244

cond.end54:                                       ; preds = %cond.false53, %cond.true48
  %cond55 = phi %struct.VEC_tree_base* [ %base52, %cond.true48 ], [ null, %cond.false53 ], !dbg !6244
  %call56 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond55), !dbg !6244
  %conv57 = zext i32 %call56 to i64, !dbg !6244
  %cmp58 = icmp ult i64 %32, %conv57, !dbg !6245
  br i1 %cmp58, label %for.body60, label %for.end99, !dbg !6246

for.body60:                                       ; preds = %cond.end54
  call void @llvm.dbg.declare(metadata %union.tree_node** %name61, metadata !6247, metadata !DIExpression()), !dbg !6249
  %39 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6250
  %add.ptr62 = getelementptr inbounds %struct.function, %struct.function* %39, i64 0, !dbg !6250
  %gimple_df63 = getelementptr inbounds %struct.function, %struct.function* %add.ptr62, i32 0, i32 3, !dbg !6250
  %40 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df63, align 8, !dbg !6250
  %ssa_names64 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %40, i32 0, i32 2, !dbg !6250
  %41 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names64, align 8, !dbg !6250
  %tobool65 = icmp ne %struct.VEC_tree_gc* %41, null, !dbg !6250
  br i1 %tobool65, label %cond.true66, label %cond.false71, !dbg !6250

cond.true66:                                      ; preds = %for.body60
  %42 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6250
  %add.ptr67 = getelementptr inbounds %struct.function, %struct.function* %42, i64 0, !dbg !6250
  %gimple_df68 = getelementptr inbounds %struct.function, %struct.function* %add.ptr67, i32 0, i32 3, !dbg !6250
  %43 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df68, align 8, !dbg !6250
  %ssa_names69 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %43, i32 0, i32 2, !dbg !6250
  %44 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names69, align 8, !dbg !6250
  %base70 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %44, i32 0, i32 0, !dbg !6250
  br label %cond.end72, !dbg !6250

cond.false71:                                     ; preds = %for.body60
  br label %cond.end72, !dbg !6250

cond.end72:                                       ; preds = %cond.false71, %cond.true66
  %cond73 = phi %struct.VEC_tree_base* [ %base70, %cond.true66 ], [ null, %cond.false71 ], !dbg !6250
  %45 = load i64, i64* %i, align 8, !dbg !6250
  %conv74 = trunc i64 %45 to i32, !dbg !6250
  %call75 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond73, i32 %conv74), !dbg !6250
  store %union.tree_node* %call75, %union.tree_node** %name61, align 8, !dbg !6249
  call void @llvm.dbg.declare(metadata %struct.vn_ssa_aux** %info, metadata !6251, metadata !DIExpression()), !dbg !6252
  %46 = load %union.tree_node*, %union.tree_node** %name61, align 8, !dbg !6253
  %tobool76 = icmp ne %union.tree_node* %46, null, !dbg !6253
  br i1 %tobool76, label %if.end78, label %if.then77, !dbg !6255

if.then77:                                        ; preds = %cond.end72
  br label %for.inc97, !dbg !6256

if.end78:                                         ; preds = %cond.end72
  %47 = load %union.tree_node*, %union.tree_node** %name61, align 8, !dbg !6257
  %call79 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %47), !dbg !6258
  store %struct.vn_ssa_aux* %call79, %struct.vn_ssa_aux** %info, align 8, !dbg !6259
  %48 = load %struct.vn_ssa_aux*, %struct.vn_ssa_aux** %info, align 8, !dbg !6260
  %valnum80 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %48, i32 0, i32 0, !dbg !6262
  %49 = load %union.tree_node*, %union.tree_node** %valnum80, align 8, !dbg !6262
  %50 = load %union.tree_node*, %union.tree_node** %name61, align 8, !dbg !6263
  %cmp81 = icmp eq %union.tree_node* %49, %50, !dbg !6264
  br i1 %cmp81, label %if.then86, label %lor.lhs.false, !dbg !6265

lor.lhs.false:                                    ; preds = %if.end78
  %51 = load %struct.vn_ssa_aux*, %struct.vn_ssa_aux** %info, align 8, !dbg !6266
  %valnum83 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %51, i32 0, i32 0, !dbg !6267
  %52 = load %union.tree_node*, %union.tree_node** %valnum83, align 8, !dbg !6267
  %53 = load %union.tree_node*, %union.tree_node** @VN_TOP, align 8, !dbg !6268
  %cmp84 = icmp eq %union.tree_node* %52, %53, !dbg !6269
  br i1 %cmp84, label %if.then86, label %if.else, !dbg !6270

if.then86:                                        ; preds = %lor.lhs.false, %if.end78
  %call87 = call i32 @get_next_value_id(), !dbg !6271
  %54 = load %struct.vn_ssa_aux*, %struct.vn_ssa_aux** %info, align 8, !dbg !6272
  %value_id = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %54, i32 0, i32 2, !dbg !6273
  store i32 %call87, i32* %value_id, align 8, !dbg !6274
  br label %if.end96, !dbg !6272

if.else:                                          ; preds = %lor.lhs.false
  %55 = load %struct.vn_ssa_aux*, %struct.vn_ssa_aux** %info, align 8, !dbg !6275
  %valnum88 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %55, i32 0, i32 0, !dbg !6277
  %56 = load %union.tree_node*, %union.tree_node** %valnum88, align 8, !dbg !6277
  %call89 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %56), !dbg !6278
  %tobool90 = icmp ne i8 %call89, 0, !dbg !6278
  br i1 %tobool90, label %if.then91, label %if.end95, !dbg !6279

if.then91:                                        ; preds = %if.else
  %57 = load %struct.vn_ssa_aux*, %struct.vn_ssa_aux** %info, align 8, !dbg !6280
  %valnum92 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %57, i32 0, i32 0, !dbg !6281
  %58 = load %union.tree_node*, %union.tree_node** %valnum92, align 8, !dbg !6281
  %call93 = call i32 @get_or_alloc_constant_value_id(%union.tree_node* %58), !dbg !6282
  %59 = load %struct.vn_ssa_aux*, %struct.vn_ssa_aux** %info, align 8, !dbg !6283
  %value_id94 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %59, i32 0, i32 2, !dbg !6284
  store i32 %call93, i32* %value_id94, align 8, !dbg !6285
  br label %if.end95, !dbg !6283

if.end95:                                         ; preds = %if.then91, %if.else
  br label %if.end96

if.end96:                                         ; preds = %if.end95, %if.then86
  br label %for.inc97, !dbg !6286

for.inc97:                                        ; preds = %if.end96, %if.then77
  %60 = load i64, i64* %i, align 8, !dbg !6287
  %inc98 = add i64 %60, 1, !dbg !6287
  store i64 %inc98, i64* %i, align 8, !dbg !6287
  br label %for.cond43, !dbg !6288, !llvm.loop !6289

for.end99:                                        ; preds = %cond.end54
  br label %while.cond, !dbg !6291

while.cond:                                       ; preds = %for.end165, %for.end99
  %61 = load i8, i8* %changed, align 1, !dbg !6292
  %tobool100 = icmp ne i8 %61, 0, !dbg !6291
  br i1 %tobool100, label %while.body, label %while.end, !dbg !6291

while.body:                                       ; preds = %while.cond
  store i8 0, i8* %changed, align 1, !dbg !6293
  store i64 1, i64* %i, align 8, !dbg !6295
  br label %for.cond101, !dbg !6297

for.cond101:                                      ; preds = %for.inc163, %while.body
  %62 = load i64, i64* %i, align 8, !dbg !6298
  %63 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6300
  %add.ptr102 = getelementptr inbounds %struct.function, %struct.function* %63, i64 0, !dbg !6300
  %gimple_df103 = getelementptr inbounds %struct.function, %struct.function* %add.ptr102, i32 0, i32 3, !dbg !6300
  %64 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df103, align 8, !dbg !6300
  %ssa_names104 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %64, i32 0, i32 2, !dbg !6300
  %65 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names104, align 8, !dbg !6300
  %tobool105 = icmp ne %struct.VEC_tree_gc* %65, null, !dbg !6300
  br i1 %tobool105, label %cond.true106, label %cond.false111, !dbg !6300

cond.true106:                                     ; preds = %for.cond101
  %66 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6300
  %add.ptr107 = getelementptr inbounds %struct.function, %struct.function* %66, i64 0, !dbg !6300
  %gimple_df108 = getelementptr inbounds %struct.function, %struct.function* %add.ptr107, i32 0, i32 3, !dbg !6300
  %67 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df108, align 8, !dbg !6300
  %ssa_names109 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %67, i32 0, i32 2, !dbg !6300
  %68 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names109, align 8, !dbg !6300
  %base110 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %68, i32 0, i32 0, !dbg !6300
  br label %cond.end112, !dbg !6300

cond.false111:                                    ; preds = %for.cond101
  br label %cond.end112, !dbg !6300

cond.end112:                                      ; preds = %cond.false111, %cond.true106
  %cond113 = phi %struct.VEC_tree_base* [ %base110, %cond.true106 ], [ null, %cond.false111 ], !dbg !6300
  %call114 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond113), !dbg !6300
  %conv115 = zext i32 %call114 to i64, !dbg !6300
  %cmp116 = icmp ult i64 %62, %conv115, !dbg !6301
  br i1 %cmp116, label %for.body118, label %for.end165, !dbg !6302

for.body118:                                      ; preds = %cond.end112
  call void @llvm.dbg.declare(metadata %union.tree_node** %name119, metadata !6303, metadata !DIExpression()), !dbg !6305
  %69 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6306
  %add.ptr120 = getelementptr inbounds %struct.function, %struct.function* %69, i64 0, !dbg !6306
  %gimple_df121 = getelementptr inbounds %struct.function, %struct.function* %add.ptr120, i32 0, i32 3, !dbg !6306
  %70 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df121, align 8, !dbg !6306
  %ssa_names122 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %70, i32 0, i32 2, !dbg !6306
  %71 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names122, align 8, !dbg !6306
  %tobool123 = icmp ne %struct.VEC_tree_gc* %71, null, !dbg !6306
  br i1 %tobool123, label %cond.true124, label %cond.false129, !dbg !6306

cond.true124:                                     ; preds = %for.body118
  %72 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6306
  %add.ptr125 = getelementptr inbounds %struct.function, %struct.function* %72, i64 0, !dbg !6306
  %gimple_df126 = getelementptr inbounds %struct.function, %struct.function* %add.ptr125, i32 0, i32 3, !dbg !6306
  %73 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df126, align 8, !dbg !6306
  %ssa_names127 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %73, i32 0, i32 2, !dbg !6306
  %74 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names127, align 8, !dbg !6306
  %base128 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %74, i32 0, i32 0, !dbg !6306
  br label %cond.end130, !dbg !6306

cond.false129:                                    ; preds = %for.body118
  br label %cond.end130, !dbg !6306

cond.end130:                                      ; preds = %cond.false129, %cond.true124
  %cond131 = phi %struct.VEC_tree_base* [ %base128, %cond.true124 ], [ null, %cond.false129 ], !dbg !6306
  %75 = load i64, i64* %i, align 8, !dbg !6306
  %conv132 = trunc i64 %75 to i32, !dbg !6306
  %call133 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond131, i32 %conv132), !dbg !6306
  store %union.tree_node* %call133, %union.tree_node** %name119, align 8, !dbg !6305
  call void @llvm.dbg.declare(metadata %struct.vn_ssa_aux** %info134, metadata !6307, metadata !DIExpression()), !dbg !6308
  %76 = load %union.tree_node*, %union.tree_node** %name119, align 8, !dbg !6309
  %tobool135 = icmp ne %union.tree_node* %76, null, !dbg !6309
  br i1 %tobool135, label %if.end137, label %if.then136, !dbg !6311

if.then136:                                       ; preds = %cond.end130
  br label %for.inc163, !dbg !6312

if.end137:                                        ; preds = %cond.end130
  %77 = load %union.tree_node*, %union.tree_node** %name119, align 8, !dbg !6313
  %call138 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %77), !dbg !6314
  store %struct.vn_ssa_aux* %call138, %struct.vn_ssa_aux** %info134, align 8, !dbg !6315
  %78 = load %struct.vn_ssa_aux*, %struct.vn_ssa_aux** %info134, align 8, !dbg !6316
  %valnum139 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %78, i32 0, i32 0, !dbg !6316
  %79 = load %union.tree_node*, %union.tree_node** %valnum139, align 8, !dbg !6316
  %base140 = bitcast %union.tree_node* %79 to %struct.tree_base*, !dbg !6316
  %80 = bitcast %struct.tree_base* %base140 to i64*, !dbg !6316
  %bf.load141 = load i64, i64* %80, align 8, !dbg !6316
  %bf.clear142 = and i64 %bf.load141, 65535, !dbg !6316
  %bf.cast143 = trunc i64 %bf.clear142 to i32, !dbg !6316
  %cmp144 = icmp eq i32 %bf.cast143, 141, !dbg !6318
  br i1 %cmp144, label %land.lhs.true146, label %if.end162, !dbg !6319

land.lhs.true146:                                 ; preds = %if.end137
  %81 = load %struct.vn_ssa_aux*, %struct.vn_ssa_aux** %info134, align 8, !dbg !6320
  %valnum147 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %81, i32 0, i32 0, !dbg !6321
  %82 = load %union.tree_node*, %union.tree_node** %valnum147, align 8, !dbg !6321
  %83 = load %union.tree_node*, %union.tree_node** %name119, align 8, !dbg !6322
  %cmp148 = icmp ne %union.tree_node* %82, %83, !dbg !6323
  br i1 %cmp148, label %land.lhs.true150, label %if.end162, !dbg !6324

land.lhs.true150:                                 ; preds = %land.lhs.true146
  %84 = load %struct.vn_ssa_aux*, %struct.vn_ssa_aux** %info134, align 8, !dbg !6325
  %value_id151 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %84, i32 0, i32 2, !dbg !6326
  %85 = load i32, i32* %value_id151, align 8, !dbg !6326
  %86 = load %struct.vn_ssa_aux*, %struct.vn_ssa_aux** %info134, align 8, !dbg !6327
  %valnum152 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %86, i32 0, i32 0, !dbg !6328
  %87 = load %union.tree_node*, %union.tree_node** %valnum152, align 8, !dbg !6328
  %call153 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %87), !dbg !6329
  %value_id154 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call153, i32 0, i32 2, !dbg !6330
  %88 = load i32, i32* %value_id154, align 8, !dbg !6330
  %cmp155 = icmp ne i32 %85, %88, !dbg !6331
  br i1 %cmp155, label %if.then157, label %if.end162, !dbg !6332

if.then157:                                       ; preds = %land.lhs.true150
  store i8 1, i8* %changed, align 1, !dbg !6333
  %89 = load %struct.vn_ssa_aux*, %struct.vn_ssa_aux** %info134, align 8, !dbg !6335
  %valnum158 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %89, i32 0, i32 0, !dbg !6336
  %90 = load %union.tree_node*, %union.tree_node** %valnum158, align 8, !dbg !6336
  %call159 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %90), !dbg !6337
  %value_id160 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call159, i32 0, i32 2, !dbg !6338
  %91 = load i32, i32* %value_id160, align 8, !dbg !6338
  %92 = load %struct.vn_ssa_aux*, %struct.vn_ssa_aux** %info134, align 8, !dbg !6339
  %value_id161 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %92, i32 0, i32 2, !dbg !6340
  store i32 %91, i32* %value_id161, align 8, !dbg !6341
  br label %if.end162, !dbg !6342

if.end162:                                        ; preds = %if.then157, %land.lhs.true150, %land.lhs.true146, %if.end137
  br label %for.inc163, !dbg !6343

for.inc163:                                       ; preds = %if.end162, %if.then136
  %93 = load i64, i64* %i, align 8, !dbg !6344
  %inc164 = add i64 %93, 1, !dbg !6344
  store i64 %inc164, i64* %i, align 8, !dbg !6344
  br label %for.cond101, !dbg !6345, !llvm.loop !6346

for.end165:                                       ; preds = %cond.end112
  br label %while.cond, !dbg !6291, !llvm.loop !6348

while.end:                                        ; preds = %while.cond
  call void @set_hashtable_value_ids(), !dbg !6350
  %94 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6351
  %tobool166 = icmp ne %struct._IO_FILE* %94, null, !dbg !6351
  br i1 %tobool166, label %land.lhs.true167, label %if.end226, !dbg !6353

land.lhs.true167:                                 ; preds = %while.end
  %95 = load i32, i32* @dump_flags, align 4, !dbg !6354
  %and = and i32 %95, 8, !dbg !6355
  %tobool168 = icmp ne i32 %and, 0, !dbg !6355
  br i1 %tobool168, label %if.then169, label %if.end226, !dbg !6356

if.then169:                                       ; preds = %land.lhs.true167
  %96 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6357
  %call170 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %96, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0)), !dbg !6359
  store i64 0, i64* %i, align 8, !dbg !6360
  br label %for.cond171, !dbg !6362

for.cond171:                                      ; preds = %for.inc223, %if.then169
  %97 = load i64, i64* %i, align 8, !dbg !6363
  %98 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6365
  %add.ptr172 = getelementptr inbounds %struct.function, %struct.function* %98, i64 0, !dbg !6365
  %gimple_df173 = getelementptr inbounds %struct.function, %struct.function* %add.ptr172, i32 0, i32 3, !dbg !6365
  %99 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df173, align 8, !dbg !6365
  %ssa_names174 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %99, i32 0, i32 2, !dbg !6365
  %100 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names174, align 8, !dbg !6365
  %tobool175 = icmp ne %struct.VEC_tree_gc* %100, null, !dbg !6365
  br i1 %tobool175, label %cond.true176, label %cond.false181, !dbg !6365

cond.true176:                                     ; preds = %for.cond171
  %101 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6365
  %add.ptr177 = getelementptr inbounds %struct.function, %struct.function* %101, i64 0, !dbg !6365
  %gimple_df178 = getelementptr inbounds %struct.function, %struct.function* %add.ptr177, i32 0, i32 3, !dbg !6365
  %102 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df178, align 8, !dbg !6365
  %ssa_names179 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %102, i32 0, i32 2, !dbg !6365
  %103 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names179, align 8, !dbg !6365
  %base180 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %103, i32 0, i32 0, !dbg !6365
  br label %cond.end182, !dbg !6365

cond.false181:                                    ; preds = %for.cond171
  br label %cond.end182, !dbg !6365

cond.end182:                                      ; preds = %cond.false181, %cond.true176
  %cond183 = phi %struct.VEC_tree_base* [ %base180, %cond.true176 ], [ null, %cond.false181 ], !dbg !6365
  %call184 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond183), !dbg !6365
  %conv185 = zext i32 %call184 to i64, !dbg !6365
  %cmp186 = icmp ult i64 %97, %conv185, !dbg !6366
  br i1 %cmp186, label %for.body188, label %for.end225, !dbg !6367

for.body188:                                      ; preds = %cond.end182
  call void @llvm.dbg.declare(metadata %union.tree_node** %name189, metadata !6368, metadata !DIExpression()), !dbg !6370
  %104 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6371
  %add.ptr190 = getelementptr inbounds %struct.function, %struct.function* %104, i64 0, !dbg !6371
  %gimple_df191 = getelementptr inbounds %struct.function, %struct.function* %add.ptr190, i32 0, i32 3, !dbg !6371
  %105 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df191, align 8, !dbg !6371
  %ssa_names192 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %105, i32 0, i32 2, !dbg !6371
  %106 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names192, align 8, !dbg !6371
  %tobool193 = icmp ne %struct.VEC_tree_gc* %106, null, !dbg !6371
  br i1 %tobool193, label %cond.true194, label %cond.false199, !dbg !6371

cond.true194:                                     ; preds = %for.body188
  %107 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6371
  %add.ptr195 = getelementptr inbounds %struct.function, %struct.function* %107, i64 0, !dbg !6371
  %gimple_df196 = getelementptr inbounds %struct.function, %struct.function* %add.ptr195, i32 0, i32 3, !dbg !6371
  %108 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df196, align 8, !dbg !6371
  %ssa_names197 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %108, i32 0, i32 2, !dbg !6371
  %109 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names197, align 8, !dbg !6371
  %base198 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %109, i32 0, i32 0, !dbg !6371
  br label %cond.end200, !dbg !6371

cond.false199:                                    ; preds = %for.body188
  br label %cond.end200, !dbg !6371

cond.end200:                                      ; preds = %cond.false199, %cond.true194
  %cond201 = phi %struct.VEC_tree_base* [ %base198, %cond.true194 ], [ null, %cond.false199 ], !dbg !6371
  %110 = load i64, i64* %i, align 8, !dbg !6371
  %conv202 = trunc i64 %110 to i32, !dbg !6371
  %call203 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond201, i32 %conv202), !dbg !6371
  store %union.tree_node* %call203, %union.tree_node** %name189, align 8, !dbg !6370
  %111 = load %union.tree_node*, %union.tree_node** %name189, align 8, !dbg !6372
  %tobool204 = icmp ne %union.tree_node* %111, null, !dbg !6372
  br i1 %tobool204, label %land.lhs.true205, label %if.end222, !dbg !6374

land.lhs.true205:                                 ; preds = %cond.end200
  %112 = load %union.tree_node*, %union.tree_node** %name189, align 8, !dbg !6375
  %call206 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %112), !dbg !6376
  %visited207 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call206, i32 0, i32 5, !dbg !6377
  %bf.load208 = load i8, i8* %visited207, align 4, !dbg !6377
  %bf.clear209 = and i8 %bf.load208, 1, !dbg !6377
  %bf.cast210 = zext i8 %bf.clear209 to i32, !dbg !6377
  %tobool211 = icmp ne i32 %bf.cast210, 0, !dbg !6376
  br i1 %tobool211, label %land.lhs.true212, label %if.end222, !dbg !6378

land.lhs.true212:                                 ; preds = %land.lhs.true205
  %113 = load %union.tree_node*, %union.tree_node** %name189, align 8, !dbg !6379
  %call213 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %113), !dbg !6379
  %valnum214 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call213, i32 0, i32 0, !dbg !6379
  %114 = load %union.tree_node*, %union.tree_node** %valnum214, align 8, !dbg !6379
  %115 = load %union.tree_node*, %union.tree_node** %name189, align 8, !dbg !6380
  %cmp215 = icmp ne %union.tree_node* %114, %115, !dbg !6381
  br i1 %cmp215, label %if.then217, label %if.end222, !dbg !6382

if.then217:                                       ; preds = %land.lhs.true212
  %116 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6383
  %117 = load %union.tree_node*, %union.tree_node** %name189, align 8, !dbg !6385
  call void @print_generic_expr(%struct._IO_FILE* %116, %union.tree_node* %117, i32 0), !dbg !6386
  %118 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6387
  %call218 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %118, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0)), !dbg !6388
  %119 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6389
  %120 = load %union.tree_node*, %union.tree_node** %name189, align 8, !dbg !6390
  %call219 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %120), !dbg !6390
  %valnum220 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call219, i32 0, i32 0, !dbg !6390
  %121 = load %union.tree_node*, %union.tree_node** %valnum220, align 8, !dbg !6390
  call void @print_generic_expr(%struct._IO_FILE* %119, %union.tree_node* %121, i32 0), !dbg !6391
  %122 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6392
  %call221 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %122, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !6393
  br label %if.end222, !dbg !6394

if.end222:                                        ; preds = %if.then217, %land.lhs.true212, %land.lhs.true205, %cond.end200
  br label %for.inc223, !dbg !6395

for.inc223:                                       ; preds = %if.end222
  %123 = load i64, i64* %i, align 8, !dbg !6396
  %inc224 = add i64 %123, 1, !dbg !6396
  store i64 %inc224, i64* %i, align 8, !dbg !6396
  br label %for.cond171, !dbg !6397, !llvm.loop !6398

for.end225:                                       ; preds = %cond.end182
  br label %if.end226, !dbg !6400

if.end226:                                        ; preds = %for.end225, %land.lhs.true167, %while.end
  store i8 0, i8* @may_insert, align 1, !dbg !6401
  store i8 1, i8* %retval, align 1, !dbg !6402
  br label %return, !dbg !6402

return:                                           ; preds = %if.end226, %if.then38
  %124 = load i8, i8* %retval, align 1, !dbg !6403
  ret i8 %124, !dbg !6403
}

; Function Attrs: noinline nounwind uwtable
define internal void @init_scc_vn() #0 !dbg !6404 {
entry:
  %i = alloca i64, align 8
  %j = alloca i32, align 4
  %rpo_numbers_temp = alloca i32*, align 8
  %name = alloca %union.tree_node*, align 8
  call void @llvm.dbg.declare(metadata i64* %i, metadata !6405, metadata !DIExpression()), !dbg !6406
  call void @llvm.dbg.declare(metadata i32* %j, metadata !6407, metadata !DIExpression()), !dbg !6408
  call void @llvm.dbg.declare(metadata i32** %rpo_numbers_temp, metadata !6409, metadata !DIExpression()), !dbg !6410
  call void @calculate_dominance_info(i32 1), !dbg !6411
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** @sccstack, align 8, !dbg !6412
  %call = call %struct.htab* @htab_create(i64 23, i32 (i8*)* @vn_constant_hash, i32 (i8*, i8*)* @vn_constant_eq, void (i8*)* @free), !dbg !6413
  store %struct.htab* %call, %struct.htab** @constant_to_value_id, align 8, !dbg !6414
  %call1 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !6415
  store %struct.bitmap_head_def* %call1, %struct.bitmap_head_def** @constant_value_ids, align 8, !dbg !6416
  store i32 1, i32* @next_dfs_num, align 4, !dbg !6417
  store i32 1, i32* @next_value_id, align 4, !dbg !6418
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6419
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !6419
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 3, !dbg !6419
  %1 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !6419
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %1, i32 0, i32 2, !dbg !6419
  %2 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !6419
  %tobool = icmp ne %struct.VEC_tree_gc* %2, null, !dbg !6419
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6419

cond.true:                                        ; preds = %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6419
  %add.ptr2 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !6419
  %gimple_df3 = getelementptr inbounds %struct.function, %struct.function* %add.ptr2, i32 0, i32 3, !dbg !6419
  %4 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df3, align 8, !dbg !6419
  %ssa_names4 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %4, i32 0, i32 2, !dbg !6419
  %5 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names4, align 8, !dbg !6419
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %5, i32 0, i32 0, !dbg !6419
  br label %cond.end, !dbg !6419

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6419

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6419
  %call5 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !6419
  %add = add i32 %call5, 1, !dbg !6419
  %call6 = call %struct.VEC_vn_ssa_aux_t_heap* @VEC_vn_ssa_aux_t_heap_alloc(i32 %add), !dbg !6419
  store %struct.VEC_vn_ssa_aux_t_heap* %call6, %struct.VEC_vn_ssa_aux_t_heap** @vn_ssa_aux_table, align 8, !dbg !6420
  %6 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6421
  %add.ptr7 = getelementptr inbounds %struct.function, %struct.function* %6, i64 0, !dbg !6421
  %gimple_df8 = getelementptr inbounds %struct.function, %struct.function* %add.ptr7, i32 0, i32 3, !dbg !6421
  %7 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df8, align 8, !dbg !6421
  %ssa_names9 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %7, i32 0, i32 2, !dbg !6421
  %8 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names9, align 8, !dbg !6421
  %tobool10 = icmp ne %struct.VEC_tree_gc* %8, null, !dbg !6421
  br i1 %tobool10, label %cond.true11, label %cond.false16, !dbg !6421

cond.true11:                                      ; preds = %cond.end
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6421
  %add.ptr12 = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !6421
  %gimple_df13 = getelementptr inbounds %struct.function, %struct.function* %add.ptr12, i32 0, i32 3, !dbg !6421
  %10 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df13, align 8, !dbg !6421
  %ssa_names14 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %10, i32 0, i32 2, !dbg !6421
  %11 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names14, align 8, !dbg !6421
  %base15 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %11, i32 0, i32 0, !dbg !6421
  br label %cond.end17, !dbg !6421

cond.false16:                                     ; preds = %cond.end
  br label %cond.end17, !dbg !6421

cond.end17:                                       ; preds = %cond.false16, %cond.true11
  %cond18 = phi %struct.VEC_tree_base* [ %base15, %cond.true11 ], [ null, %cond.false16 ], !dbg !6421
  %call19 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond18), !dbg !6421
  %add20 = add i32 %call19, 1, !dbg !6421
  call void @VEC_vn_ssa_aux_t_heap_safe_grow_cleared(%struct.VEC_vn_ssa_aux_t_heap** @vn_ssa_aux_table, i32 %add20), !dbg !6421
  %call21 = call i32 @_obstack_begin(%struct.obstack* @vn_ssa_aux_obstack, i32 0, i32 0, i8* (i64)* @xmalloc, void (i8*)* @free), !dbg !6422
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** @shared_lookup_phiargs, align 8, !dbg !6423
  store %struct.VEC_vn_reference_op_s_heap* null, %struct.VEC_vn_reference_op_s_heap** @shared_lookup_references, align 8, !dbg !6424
  %12 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6425
  %add.ptr22 = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, !dbg !6425
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr22, i32 0, i32 1, !dbg !6425
  %13 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !6425
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %13, i32 0, i32 5, !dbg !6425
  %14 = load i32, i32* %x_last_basic_block, align 8, !dbg !6425
  %add23 = add nsw i32 %14, 2, !dbg !6425
  %conv = sext i32 %add23 to i64, !dbg !6425
  %call24 = call i8* @xcalloc(i64 %conv, i64 4), !dbg !6425
  %15 = bitcast i8* %call24 to i32*, !dbg !6425
  store i32* %15, i32** @rpo_numbers, align 8, !dbg !6426
  %16 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6427
  %add.ptr25 = getelementptr inbounds %struct.function, %struct.function* %16, i64 0, !dbg !6427
  %cfg26 = getelementptr inbounds %struct.function, %struct.function* %add.ptr25, i32 0, i32 1, !dbg !6427
  %17 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg26, align 8, !dbg !6427
  %x_last_basic_block27 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %17, i32 0, i32 5, !dbg !6427
  %18 = load i32, i32* %x_last_basic_block27, align 8, !dbg !6427
  %add28 = add nsw i32 %18, 2, !dbg !6427
  %conv29 = sext i32 %add28 to i64, !dbg !6427
  %call30 = call i8* @xcalloc(i64 %conv29, i64 4), !dbg !6427
  %19 = bitcast i8* %call30 to i32*, !dbg !6427
  store i32* %19, i32** %rpo_numbers_temp, align 8, !dbg !6428
  %20 = load i32*, i32** %rpo_numbers_temp, align 8, !dbg !6429
  %call31 = call i32 @pre_and_rev_post_order_compute(i32* null, i32* %20, i8 zeroext 0), !dbg !6430
  store i32 0, i32* %j, align 4, !dbg !6431
  br label %for.cond, !dbg !6433

for.cond:                                         ; preds = %for.inc, %cond.end17
  %21 = load i32, i32* %j, align 4, !dbg !6434
  %22 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6436
  %add.ptr32 = getelementptr inbounds %struct.function, %struct.function* %22, i64 0, !dbg !6436
  %cfg33 = getelementptr inbounds %struct.function, %struct.function* %add.ptr32, i32 0, i32 1, !dbg !6436
  %23 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg33, align 8, !dbg !6436
  %x_n_basic_blocks = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %23, i32 0, i32 3, !dbg !6436
  %24 = load i32, i32* %x_n_basic_blocks, align 8, !dbg !6436
  %sub = sub nsw i32 %24, 2, !dbg !6437
  %cmp = icmp slt i32 %21, %sub, !dbg !6438
  br i1 %cmp, label %for.body, label %for.end, !dbg !6439

for.body:                                         ; preds = %for.cond
  %25 = load i32, i32* %j, align 4, !dbg !6440
  %26 = load i32*, i32** @rpo_numbers, align 8, !dbg !6441
  %27 = load i32*, i32** %rpo_numbers_temp, align 8, !dbg !6442
  %28 = load i32, i32* %j, align 4, !dbg !6443
  %idxprom = sext i32 %28 to i64, !dbg !6442
  %arrayidx = getelementptr inbounds i32, i32* %27, i64 %idxprom, !dbg !6442
  %29 = load i32, i32* %arrayidx, align 4, !dbg !6442
  %idxprom35 = sext i32 %29 to i64, !dbg !6441
  %arrayidx36 = getelementptr inbounds i32, i32* %26, i64 %idxprom35, !dbg !6441
  store i32 %25, i32* %arrayidx36, align 4, !dbg !6444
  br label %for.inc, !dbg !6441

for.inc:                                          ; preds = %for.body
  %30 = load i32, i32* %j, align 4, !dbg !6445
  %inc = add nsw i32 %30, 1, !dbg !6445
  store i32 %inc, i32* %j, align 4, !dbg !6445
  br label %for.cond, !dbg !6446, !llvm.loop !6447

for.end:                                          ; preds = %for.cond
  %31 = load i32*, i32** %rpo_numbers_temp, align 8, !dbg !6449
  %32 = bitcast i32* %31 to i8*, !dbg !6449
  call void @free(i8* %32), !dbg !6449
  %33 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !6450
  %call37 = call %union.tree_node* @create_tmp_var_raw(%union.tree_node* %33, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i64 0, i64 0)), !dbg !6451
  store %union.tree_node* %call37, %union.tree_node** @VN_TOP, align 8, !dbg !6452
  store i64 0, i64* %i, align 8, !dbg !6453
  br label %for.cond38, !dbg !6455

for.cond38:                                       ; preds = %for.inc74, %for.end
  %34 = load i64, i64* %i, align 8, !dbg !6456
  %35 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6458
  %add.ptr39 = getelementptr inbounds %struct.function, %struct.function* %35, i64 0, !dbg !6458
  %gimple_df40 = getelementptr inbounds %struct.function, %struct.function* %add.ptr39, i32 0, i32 3, !dbg !6458
  %36 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df40, align 8, !dbg !6458
  %ssa_names41 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %36, i32 0, i32 2, !dbg !6458
  %37 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names41, align 8, !dbg !6458
  %tobool42 = icmp ne %struct.VEC_tree_gc* %37, null, !dbg !6458
  br i1 %tobool42, label %cond.true43, label %cond.false48, !dbg !6458

cond.true43:                                      ; preds = %for.cond38
  %38 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6458
  %add.ptr44 = getelementptr inbounds %struct.function, %struct.function* %38, i64 0, !dbg !6458
  %gimple_df45 = getelementptr inbounds %struct.function, %struct.function* %add.ptr44, i32 0, i32 3, !dbg !6458
  %39 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df45, align 8, !dbg !6458
  %ssa_names46 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %39, i32 0, i32 2, !dbg !6458
  %40 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names46, align 8, !dbg !6458
  %base47 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %40, i32 0, i32 0, !dbg !6458
  br label %cond.end49, !dbg !6458

cond.false48:                                     ; preds = %for.cond38
  br label %cond.end49, !dbg !6458

cond.end49:                                       ; preds = %cond.false48, %cond.true43
  %cond50 = phi %struct.VEC_tree_base* [ %base47, %cond.true43 ], [ null, %cond.false48 ], !dbg !6458
  %call51 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond50), !dbg !6458
  %conv52 = zext i32 %call51 to i64, !dbg !6458
  %cmp53 = icmp ult i64 %34, %conv52, !dbg !6459
  br i1 %cmp53, label %for.body55, label %for.end76, !dbg !6460

for.body55:                                       ; preds = %cond.end49
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !6461, metadata !DIExpression()), !dbg !6463
  %41 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6464
  %add.ptr56 = getelementptr inbounds %struct.function, %struct.function* %41, i64 0, !dbg !6464
  %gimple_df57 = getelementptr inbounds %struct.function, %struct.function* %add.ptr56, i32 0, i32 3, !dbg !6464
  %42 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df57, align 8, !dbg !6464
  %ssa_names58 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %42, i32 0, i32 2, !dbg !6464
  %43 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names58, align 8, !dbg !6464
  %tobool59 = icmp ne %struct.VEC_tree_gc* %43, null, !dbg !6464
  br i1 %tobool59, label %cond.true60, label %cond.false65, !dbg !6464

cond.true60:                                      ; preds = %for.body55
  %44 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6464
  %add.ptr61 = getelementptr inbounds %struct.function, %struct.function* %44, i64 0, !dbg !6464
  %gimple_df62 = getelementptr inbounds %struct.function, %struct.function* %add.ptr61, i32 0, i32 3, !dbg !6464
  %45 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df62, align 8, !dbg !6464
  %ssa_names63 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %45, i32 0, i32 2, !dbg !6464
  %46 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names63, align 8, !dbg !6464
  %base64 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %46, i32 0, i32 0, !dbg !6464
  br label %cond.end66, !dbg !6464

cond.false65:                                     ; preds = %for.body55
  br label %cond.end66, !dbg !6464

cond.end66:                                       ; preds = %cond.false65, %cond.true60
  %cond67 = phi %struct.VEC_tree_base* [ %base64, %cond.true60 ], [ null, %cond.false65 ], !dbg !6464
  %47 = load i64, i64* %i, align 8, !dbg !6464
  %conv68 = trunc i64 %47 to i32, !dbg !6464
  %call69 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond67, i32 %conv68), !dbg !6464
  store %union.tree_node* %call69, %union.tree_node** %name, align 8, !dbg !6463
  %48 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !6465
  %tobool70 = icmp ne %union.tree_node* %48, null, !dbg !6465
  br i1 %tobool70, label %if.then, label %if.end, !dbg !6467

if.then:                                          ; preds = %cond.end66
  %49 = load %union.tree_node*, %union.tree_node** @VN_TOP, align 8, !dbg !6468
  %50 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !6470
  %call71 = call %struct.vn_ssa_aux* @VN_INFO_GET(%union.tree_node* %50), !dbg !6471
  %valnum = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call71, i32 0, i32 0, !dbg !6472
  store %union.tree_node* %49, %union.tree_node** %valnum, align 8, !dbg !6473
  %51 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !6474
  %call72 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %51), !dbg !6475
  %expr = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call72, i32 0, i32 1, !dbg !6476
  store %union.tree_node* null, %union.tree_node** %expr, align 8, !dbg !6477
  %52 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !6478
  %call73 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %52), !dbg !6479
  %value_id = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call73, i32 0, i32 2, !dbg !6480
  store i32 0, i32* %value_id, align 8, !dbg !6481
  br label %if.end, !dbg !6482

if.end:                                           ; preds = %if.then, %cond.end66
  br label %for.inc74, !dbg !6483

for.inc74:                                        ; preds = %if.end
  %53 = load i64, i64* %i, align 8, !dbg !6484
  %inc75 = add i64 %53, 1, !dbg !6484
  store i64 %inc75, i64* %i, align 8, !dbg !6484
  br label %for.cond38, !dbg !6485, !llvm.loop !6486

for.end76:                                        ; preds = %cond.end49
  call void @renumber_gimple_stmt_uids(), !dbg !6488
  %call77 = call i8* @xcalloc(i64 1, i64 128), !dbg !6489
  %54 = bitcast i8* %call77 to %struct.vn_tables_s*, !dbg !6489
  store %struct.vn_tables_s* %54, %struct.vn_tables_s** @valid_info, align 8, !dbg !6490
  %55 = load %struct.vn_tables_s*, %struct.vn_tables_s** @valid_info, align 8, !dbg !6491
  call void @allocate_vn_table(%struct.vn_tables_s* %55), !dbg !6492
  %call78 = call i8* @xcalloc(i64 1, i64 128), !dbg !6493
  %56 = bitcast i8* %call78 to %struct.vn_tables_s*, !dbg !6493
  store %struct.vn_tables_s* %56, %struct.vn_tables_s** @optimistic_info, align 8, !dbg !6494
  %57 = load %struct.vn_tables_s*, %struct.vn_tables_s** @optimistic_info, align 8, !dbg !6495
  call void @allocate_vn_table(%struct.vn_tables_s* %57), !dbg !6496
  ret void, !dbg !6497
}

declare dso_local %union.tree_node* @gimple_default_def(%struct.function*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @has_zero_uses(%union.tree_node* %var) #0 !dbg !6498 {
entry:
  %retval = alloca i8, align 1
  %var.addr = alloca %union.tree_node*, align 8
  %ptr = alloca %struct.ssa_use_operand_d*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !6505, metadata !DIExpression()), !dbg !6506
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %ptr, metadata !6507, metadata !DIExpression()), !dbg !6511
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6512
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !6512
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !6512
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !6511
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !6513
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !6515
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !6516
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !6516
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %3, !dbg !6517
  br i1 %cmp, label %if.then, label %if.end, !dbg !6518

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !6519
  br label %return, !dbg !6519

if.end:                                           ; preds = %entry
  %4 = load i32, i32* @flag_var_tracking_assignments, align 4, !dbg !6520
  %tobool = icmp ne i32 %4, 0, !dbg !6520
  br i1 %tobool, label %if.end2, label %if.then1, !dbg !6522

if.then1:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !6523
  br label %return, !dbg !6523

if.end2:                                          ; preds = %if.end
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !6524
  %call = call zeroext i8 @has_zero_uses_1(%struct.ssa_use_operand_d* %5), !dbg !6525
  store i8 %call, i8* %retval, align 1, !dbg !6526
  br label %return, !dbg !6526

return:                                           ; preds = %if.end2, %if.then1, %if.then
  %6 = load i8, i8* %retval, align 1, !dbg !6527
  ret i8 %6, !dbg !6527
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @DFS(%union.tree_node* %name) #0 !dbg !6528 {
entry:
  %retval = alloca i8, align 1
  %name.addr = alloca %union.tree_node*, align 8
  %itervec = alloca %struct.VEC_ssa_op_iter_heap*, align 8
  %namevec = alloca %struct.VEC_tree_heap*, align 8
  %usep = alloca %struct.ssa_use_operand_d*, align 8
  %defstmt = alloca %union.gimple_statement_d*, align 8
  %use = alloca %union.tree_node*, align 8
  %iter = alloca %struct.ssa_operand_iterator_d, align 8
  store %union.tree_node* %name, %union.tree_node** %name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %name.addr, metadata !6531, metadata !DIExpression()), !dbg !6532
  call void @llvm.dbg.declare(metadata %struct.VEC_ssa_op_iter_heap** %itervec, metadata !6533, metadata !DIExpression()), !dbg !6534
  store %struct.VEC_ssa_op_iter_heap* null, %struct.VEC_ssa_op_iter_heap** %itervec, align 8, !dbg !6534
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %namevec, metadata !6535, metadata !DIExpression()), !dbg !6536
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** %namevec, align 8, !dbg !6536
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %usep, metadata !6537, metadata !DIExpression()), !dbg !6538
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %usep, align 8, !dbg !6538
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %defstmt, metadata !6539, metadata !DIExpression()), !dbg !6540
  call void @llvm.dbg.declare(metadata %union.tree_node** %use, metadata !6541, metadata !DIExpression()), !dbg !6542
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %iter, metadata !6543, metadata !DIExpression()), !dbg !6544
  br label %start_over, !dbg !6545

start_over:                                       ; preds = %if.then69, %entry
  call void @llvm.dbg.label(metadata !6546), !dbg !6547
  %0 = load i32, i32* @next_dfs_num, align 4, !dbg !6548
  %inc = add i32 %0, 1, !dbg !6548
  store i32 %inc, i32* @next_dfs_num, align 4, !dbg !6548
  %1 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !6549
  %call = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %1), !dbg !6550
  %dfsnum = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call, i32 0, i32 3, !dbg !6551
  store i32 %0, i32* %dfsnum, align 4, !dbg !6552
  %2 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !6553
  %call1 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %2), !dbg !6554
  %visited = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call1, i32 0, i32 5, !dbg !6555
  %bf.load = load i8, i8* %visited, align 4, !dbg !6556
  %bf.clear = and i8 %bf.load, -2, !dbg !6556
  %bf.set = or i8 %bf.clear, 1, !dbg !6556
  store i8 %bf.set, i8* %visited, align 4, !dbg !6556
  %3 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !6557
  %call2 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %3), !dbg !6558
  %dfsnum3 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call2, i32 0, i32 3, !dbg !6559
  %4 = load i32, i32* %dfsnum3, align 4, !dbg !6559
  %5 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !6560
  %call4 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %5), !dbg !6561
  %low = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call4, i32 0, i32 4, !dbg !6562
  store i32 %4, i32* %low, align 8, !dbg !6563
  %6 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !6564
  %call5 = call %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** @sccstack, %union.tree_node* %6), !dbg !6564
  %7 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !6565
  %call6 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %7), !dbg !6566
  %on_sccstack = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call6, i32 0, i32 5, !dbg !6567
  %bf.load7 = load i8, i8* %on_sccstack, align 4, !dbg !6568
  %bf.clear8 = and i8 %bf.load7, -3, !dbg !6568
  %bf.set9 = or i8 %bf.clear8, 2, !dbg !6568
  store i8 %bf.set9, i8* %on_sccstack, align 4, !dbg !6568
  %8 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !6569
  %ssa_name = bitcast %union.tree_node* %8 to %struct.tree_ssa_name*, !dbg !6569
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !6569
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6569
  store %union.gimple_statement_d* %9, %union.gimple_statement_d** %defstmt, align 8, !dbg !6570
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %defstmt, align 8, !dbg !6571
  %call10 = call zeroext i8 @gimple_nop_p(%union.gimple_statement_d* %10), !dbg !6573
  %tobool = icmp ne i8 %call10, 0, !dbg !6573
  br i1 %tobool, label %if.else15, label %if.then, !dbg !6574

if.then:                                          ; preds = %start_over
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %defstmt, align 8, !dbg !6575
  %call11 = call i32 @gimple_code(%union.gimple_statement_d* %11), !dbg !6578
  %cmp = icmp eq i32 %call11, 16, !dbg !6579
  br i1 %cmp, label %if.then12, label %if.else, !dbg !6580

if.then12:                                        ; preds = %if.then
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %defstmt, align 8, !dbg !6581
  %call13 = call %struct.ssa_use_operand_d* @op_iter_init_phiuse(%struct.ssa_operand_iterator_d* %iter, %union.gimple_statement_d* %12, i32 5), !dbg !6582
  store %struct.ssa_use_operand_d* %call13, %struct.ssa_use_operand_d** %usep, align 8, !dbg !6583
  br label %if.end, !dbg !6584

if.else:                                          ; preds = %if.then
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %defstmt, align 8, !dbg !6585
  %call14 = call %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %iter, %union.gimple_statement_d* %13, i32 5), !dbg !6586
  store %struct.ssa_use_operand_d* %call14, %struct.ssa_use_operand_d** %usep, align 8, !dbg !6587
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then12
  br label %if.end16, !dbg !6588

if.else15:                                        ; preds = %start_over
  call void @clear_and_done_ssa_iter(%struct.ssa_operand_iterator_d* %iter), !dbg !6589
  br label %if.end16

if.end16:                                         ; preds = %if.else15, %if.end
  br label %while.body, !dbg !6590

while.body:                                       ; preds = %if.end16, %if.end116
  %call17 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !6591
  %tobool18 = icmp ne i8 %call17, 0, !dbg !6591
  br i1 %tobool18, label %if.then19, label %if.end56, !dbg !6594

if.then19:                                        ; preds = %while.body
  %14 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !6595
  %call20 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %14), !dbg !6598
  %low21 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call20, i32 0, i32 4, !dbg !6599
  %15 = load i32, i32* %low21, align 8, !dbg !6599
  %16 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !6600
  %call22 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %16), !dbg !6601
  %dfsnum23 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call22, i32 0, i32 3, !dbg !6602
  %17 = load i32, i32* %dfsnum23, align 4, !dbg !6602
  %cmp24 = icmp eq i32 %15, %17, !dbg !6603
  br i1 %cmp24, label %if.then25, label %if.end30, !dbg !6604

if.then25:                                        ; preds = %if.then19
  %18 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !6605
  %call26 = call zeroext i8 @extract_and_process_scc_for_name(%union.tree_node* %18), !dbg !6607
  %tobool27 = icmp ne i8 %call26, 0, !dbg !6607
  br i1 %tobool27, label %if.end29, label %if.then28, !dbg !6608

if.then28:                                        ; preds = %if.then25
  call void @VEC_tree_heap_free(%struct.VEC_tree_heap** %namevec), !dbg !6609
  call void @VEC_ssa_op_iter_heap_free(%struct.VEC_ssa_op_iter_heap** %itervec), !dbg !6611
  store i8 0, i8* %retval, align 1, !dbg !6612
  br label %return, !dbg !6612

if.end29:                                         ; preds = %if.then25
  br label %if.end30, !dbg !6613

if.end30:                                         ; preds = %if.end29, %if.then19
  %19 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %namevec, align 8, !dbg !6614
  %tobool31 = icmp ne %struct.VEC_tree_heap* %19, null, !dbg !6614
  br i1 %tobool31, label %cond.true, label %cond.false, !dbg !6614

cond.true:                                        ; preds = %if.end30
  %20 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %namevec, align 8, !dbg !6614
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %20, i32 0, i32 0, !dbg !6614
  br label %cond.end, !dbg !6614

cond.false:                                       ; preds = %if.end30
  br label %cond.end, !dbg !6614

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6614
  %call32 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !6614
  %cmp33 = icmp eq i32 %call32, 0, !dbg !6614
  br i1 %cmp33, label %if.then34, label %if.end35, !dbg !6616

if.then34:                                        ; preds = %cond.end
  call void @VEC_tree_heap_free(%struct.VEC_tree_heap** %namevec), !dbg !6617
  call void @VEC_ssa_op_iter_heap_free(%struct.VEC_ssa_op_iter_heap** %itervec), !dbg !6619
  store i8 1, i8* %retval, align 1, !dbg !6620
  br label %return, !dbg !6620

if.end35:                                         ; preds = %cond.end
  %21 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !6621
  store %union.tree_node* %21, %union.tree_node** %use, align 8, !dbg !6622
  %22 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %namevec, align 8, !dbg !6623
  %tobool36 = icmp ne %struct.VEC_tree_heap* %22, null, !dbg !6623
  br i1 %tobool36, label %cond.true37, label %cond.false39, !dbg !6623

cond.true37:                                      ; preds = %if.end35
  %23 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %namevec, align 8, !dbg !6623
  %base38 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %23, i32 0, i32 0, !dbg !6623
  br label %cond.end40, !dbg !6623

cond.false39:                                     ; preds = %if.end35
  br label %cond.end40, !dbg !6623

cond.end40:                                       ; preds = %cond.false39, %cond.true37
  %cond41 = phi %struct.VEC_tree_base* [ %base38, %cond.true37 ], [ null, %cond.false39 ], !dbg !6623
  %call42 = call %union.tree_node* @VEC_tree_base_pop(%struct.VEC_tree_base* %cond41), !dbg !6623
  store %union.tree_node* %call42, %union.tree_node** %name.addr, align 8, !dbg !6624
  %24 = bitcast %struct.ssa_operand_iterator_d* %iter to i8*, !dbg !6625
  %25 = load %struct.VEC_ssa_op_iter_heap*, %struct.VEC_ssa_op_iter_heap** %itervec, align 8, !dbg !6626
  %tobool43 = icmp ne %struct.VEC_ssa_op_iter_heap* %25, null, !dbg !6626
  br i1 %tobool43, label %cond.true44, label %cond.false46, !dbg !6626

cond.true44:                                      ; preds = %cond.end40
  %26 = load %struct.VEC_ssa_op_iter_heap*, %struct.VEC_ssa_op_iter_heap** %itervec, align 8, !dbg !6626
  %base45 = getelementptr inbounds %struct.VEC_ssa_op_iter_heap, %struct.VEC_ssa_op_iter_heap* %26, i32 0, i32 0, !dbg !6626
  br label %cond.end47, !dbg !6626

cond.false46:                                     ; preds = %cond.end40
  br label %cond.end47, !dbg !6626

cond.end47:                                       ; preds = %cond.false46, %cond.true44
  %cond48 = phi %struct.VEC_ssa_op_iter_base* [ %base45, %cond.true44 ], [ null, %cond.false46 ], !dbg !6626
  %call49 = call %struct.ssa_operand_iterator_d* @VEC_ssa_op_iter_base_last(%struct.VEC_ssa_op_iter_base* %cond48), !dbg !6626
  %27 = bitcast %struct.ssa_operand_iterator_d* %call49 to i8*, !dbg !6625
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %24, i8* align 8 %27, i64 40, i1 false), !dbg !6625
  %28 = load %struct.VEC_ssa_op_iter_heap*, %struct.VEC_ssa_op_iter_heap** %itervec, align 8, !dbg !6627
  %tobool50 = icmp ne %struct.VEC_ssa_op_iter_heap* %28, null, !dbg !6627
  br i1 %tobool50, label %cond.true51, label %cond.false53, !dbg !6627

cond.true51:                                      ; preds = %cond.end47
  %29 = load %struct.VEC_ssa_op_iter_heap*, %struct.VEC_ssa_op_iter_heap** %itervec, align 8, !dbg !6627
  %base52 = getelementptr inbounds %struct.VEC_ssa_op_iter_heap, %struct.VEC_ssa_op_iter_heap* %29, i32 0, i32 0, !dbg !6627
  br label %cond.end54, !dbg !6627

cond.false53:                                     ; preds = %cond.end47
  br label %cond.end54, !dbg !6627

cond.end54:                                       ; preds = %cond.false53, %cond.true51
  %cond55 = phi %struct.VEC_ssa_op_iter_base* [ %base52, %cond.true51 ], [ null, %cond.false53 ], !dbg !6627
  call void @VEC_ssa_op_iter_base_pop(%struct.VEC_ssa_op_iter_base* %cond55), !dbg !6627
  br label %continue_walking, !dbg !6628

if.end56:                                         ; preds = %while.body
  %30 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %usep, align 8, !dbg !6629
  %call57 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %30), !dbg !6629
  store %union.tree_node* %call57, %union.tree_node** %use, align 8, !dbg !6630
  %31 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !6631
  %base58 = bitcast %union.tree_node* %31 to %struct.tree_base*, !dbg !6631
  %32 = bitcast %struct.tree_base* %base58 to i64*, !dbg !6631
  %bf.load59 = load i64, i64* %32, align 8, !dbg !6631
  %bf.clear60 = and i64 %bf.load59, 65535, !dbg !6631
  %bf.cast = trunc i64 %bf.clear60 to i32, !dbg !6631
  %cmp61 = icmp eq i32 %bf.cast, 141, !dbg !6633
  br i1 %cmp61, label %if.then62, label %if.end116, !dbg !6634

if.then62:                                        ; preds = %if.end56
  %33 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !6635
  %call63 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %33), !dbg !6638
  %visited64 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call63, i32 0, i32 5, !dbg !6639
  %bf.load65 = load i8, i8* %visited64, align 4, !dbg !6639
  %bf.clear66 = and i8 %bf.load65, 1, !dbg !6639
  %bf.cast67 = zext i8 %bf.clear66 to i32, !dbg !6639
  %tobool68 = icmp ne i32 %bf.cast67, 0, !dbg !6640
  br i1 %tobool68, label %if.end87, label %if.then69, !dbg !6641

if.then69:                                        ; preds = %if.then62
  %call70 = call %struct.ssa_operand_iterator_d* @VEC_ssa_op_iter_heap_safe_push(%struct.VEC_ssa_op_iter_heap** %itervec, %struct.ssa_operand_iterator_d* %iter), !dbg !6642
  %34 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !6644
  %call71 = call %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** %namevec, %union.tree_node* %34), !dbg !6644
  %35 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !6645
  store %union.tree_node* %35, %union.tree_node** %name.addr, align 8, !dbg !6646
  br label %start_over, !dbg !6647

continue_walking:                                 ; preds = %cond.end54
  call void @llvm.dbg.label(metadata !6648), !dbg !6649
  %36 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !6650
  %call72 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %36), !dbg !6650
  %low73 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call72, i32 0, i32 4, !dbg !6650
  %37 = load i32, i32* %low73, align 8, !dbg !6650
  %38 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !6650
  %call74 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %38), !dbg !6650
  %low75 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call74, i32 0, i32 4, !dbg !6650
  %39 = load i32, i32* %low75, align 8, !dbg !6650
  %cmp76 = icmp ult i32 %37, %39, !dbg !6650
  br i1 %cmp76, label %cond.true77, label %cond.false80, !dbg !6650

cond.true77:                                      ; preds = %continue_walking
  %40 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !6650
  %call78 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %40), !dbg !6650
  %low79 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call78, i32 0, i32 4, !dbg !6650
  %41 = load i32, i32* %low79, align 8, !dbg !6650
  br label %cond.end83, !dbg !6650

cond.false80:                                     ; preds = %continue_walking
  %42 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !6650
  %call81 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %42), !dbg !6650
  %low82 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call81, i32 0, i32 4, !dbg !6650
  %43 = load i32, i32* %low82, align 8, !dbg !6650
  br label %cond.end83, !dbg !6650

cond.end83:                                       ; preds = %cond.false80, %cond.true77
  %cond84 = phi i32 [ %41, %cond.true77 ], [ %43, %cond.false80 ], !dbg !6650
  %44 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !6651
  %call85 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %44), !dbg !6652
  %low86 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call85, i32 0, i32 4, !dbg !6653
  store i32 %cond84, i32* %low86, align 8, !dbg !6654
  br label %if.end87, !dbg !6655

if.end87:                                         ; preds = %cond.end83, %if.then62
  %45 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !6656
  %call88 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %45), !dbg !6658
  %dfsnum89 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call88, i32 0, i32 3, !dbg !6659
  %46 = load i32, i32* %dfsnum89, align 4, !dbg !6659
  %47 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !6660
  %call90 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %47), !dbg !6661
  %dfsnum91 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call90, i32 0, i32 3, !dbg !6662
  %48 = load i32, i32* %dfsnum91, align 4, !dbg !6662
  %cmp92 = icmp ult i32 %46, %48, !dbg !6663
  br i1 %cmp92, label %land.lhs.true, label %if.end115, !dbg !6664

land.lhs.true:                                    ; preds = %if.end87
  %49 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !6665
  %call93 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %49), !dbg !6666
  %on_sccstack94 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call93, i32 0, i32 5, !dbg !6667
  %bf.load95 = load i8, i8* %on_sccstack94, align 4, !dbg !6667
  %bf.lshr = lshr i8 %bf.load95, 1, !dbg !6667
  %bf.clear96 = and i8 %bf.lshr, 1, !dbg !6667
  %bf.cast97 = zext i8 %bf.clear96 to i32, !dbg !6667
  %tobool98 = icmp ne i32 %bf.cast97, 0, !dbg !6666
  br i1 %tobool98, label %if.then99, label %if.end115, !dbg !6668

if.then99:                                        ; preds = %land.lhs.true
  %50 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !6669
  %call100 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %50), !dbg !6669
  %dfsnum101 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call100, i32 0, i32 3, !dbg !6669
  %51 = load i32, i32* %dfsnum101, align 4, !dbg !6669
  %52 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !6669
  %call102 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %52), !dbg !6669
  %low103 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call102, i32 0, i32 4, !dbg !6669
  %53 = load i32, i32* %low103, align 8, !dbg !6669
  %cmp104 = icmp ult i32 %51, %53, !dbg !6669
  br i1 %cmp104, label %cond.true105, label %cond.false108, !dbg !6669

cond.true105:                                     ; preds = %if.then99
  %54 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !6669
  %call106 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %54), !dbg !6669
  %dfsnum107 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call106, i32 0, i32 3, !dbg !6669
  %55 = load i32, i32* %dfsnum107, align 4, !dbg !6669
  br label %cond.end111, !dbg !6669

cond.false108:                                    ; preds = %if.then99
  %56 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !6669
  %call109 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %56), !dbg !6669
  %low110 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call109, i32 0, i32 4, !dbg !6669
  %57 = load i32, i32* %low110, align 8, !dbg !6669
  br label %cond.end111, !dbg !6669

cond.end111:                                      ; preds = %cond.false108, %cond.true105
  %cond112 = phi i32 [ %55, %cond.true105 ], [ %57, %cond.false108 ], !dbg !6669
  %58 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !6671
  %call113 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %58), !dbg !6672
  %low114 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call113, i32 0, i32 4, !dbg !6673
  store i32 %cond112, i32* %low114, align 8, !dbg !6674
  br label %if.end115, !dbg !6675

if.end115:                                        ; preds = %cond.end111, %land.lhs.true, %if.end87
  br label %if.end116, !dbg !6676

if.end116:                                        ; preds = %if.end115, %if.end56
  %call117 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %iter), !dbg !6677
  store %struct.ssa_use_operand_d* %call117, %struct.ssa_use_operand_d** %usep, align 8, !dbg !6678
  br label %while.body, !dbg !6590, !llvm.loop !6679

return:                                           ; preds = %if.then34, %if.then28
  %59 = load i8, i8* %retval, align 1, !dbg !6681
  ret i8 %59, !dbg !6681
}

; Function Attrs: noinline nounwind uwtable
define internal void @set_hashtable_value_ids() #0 !dbg !6682 {
entry:
  %hi = alloca %struct.htab_iterator, align 8
  %vno = alloca %struct.vn_nary_op_s*, align 8
  %vr = alloca %struct.vn_reference_s*, align 8
  %vp = alloca %struct.vn_phi_s*, align 8
  call void @llvm.dbg.declare(metadata %struct.htab_iterator* %hi, metadata !6683, metadata !DIExpression()), !dbg !6690
  call void @llvm.dbg.declare(metadata %struct.vn_nary_op_s** %vno, metadata !6691, metadata !DIExpression()), !dbg !6692
  call void @llvm.dbg.declare(metadata %struct.vn_reference_s** %vr, metadata !6693, metadata !DIExpression()), !dbg !6694
  call void @llvm.dbg.declare(metadata %struct.vn_phi_s** %vp, metadata !6695, metadata !DIExpression()), !dbg !6696
  %0 = load %struct.vn_tables_s*, %struct.vn_tables_s** @valid_info, align 8, !dbg !6697
  %nary = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %0, i32 0, i32 0, !dbg !6697
  %1 = load %struct.htab*, %struct.htab** %nary, align 8, !dbg !6697
  %call = call i8* @first_htab_element(%struct.htab_iterator* %hi, %struct.htab* %1), !dbg !6697
  %2 = bitcast i8* %call to %struct.vn_nary_op_s*, !dbg !6697
  store %struct.vn_nary_op_s* %2, %struct.vn_nary_op_s** %vno, align 8, !dbg !6697
  br label %for.cond, !dbg !6697

for.cond:                                         ; preds = %for.inc, %entry
  %call1 = call zeroext i8 @end_htab_p(%struct.htab_iterator* %hi), !dbg !6699
  %tobool = icmp ne i8 %call1, 0, !dbg !6699
  %lnot = xor i1 %tobool, true, !dbg !6699
  br i1 %lnot, label %for.body, label %for.end, !dbg !6697

for.body:                                         ; preds = %for.cond
  %3 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno, align 8, !dbg !6701
  %result = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %3, i32 0, i32 3, !dbg !6704
  %4 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !6704
  %tobool2 = icmp ne %union.tree_node* %4, null, !dbg !6701
  br i1 %tobool2, label %if.then, label %if.end16, !dbg !6705

if.then:                                          ; preds = %for.body
  %5 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno, align 8, !dbg !6706
  %result3 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %5, i32 0, i32 3, !dbg !6706
  %6 = load %union.tree_node*, %union.tree_node** %result3, align 8, !dbg !6706
  %base = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !6706
  %7 = bitcast %struct.tree_base* %base to i64*, !dbg !6706
  %bf.load = load i64, i64* %7, align 8, !dbg !6706
  %bf.clear = and i64 %bf.load, 65535, !dbg !6706
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6706
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !6709
  br i1 %cmp, label %if.then4, label %if.else, !dbg !6710

if.then4:                                         ; preds = %if.then
  %8 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno, align 8, !dbg !6711
  %result5 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %8, i32 0, i32 3, !dbg !6712
  %9 = load %union.tree_node*, %union.tree_node** %result5, align 8, !dbg !6712
  %call6 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %9), !dbg !6713
  %value_id = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call6, i32 0, i32 2, !dbg !6714
  %10 = load i32, i32* %value_id, align 8, !dbg !6714
  %11 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno, align 8, !dbg !6715
  %value_id7 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %11, i32 0, i32 0, !dbg !6716
  store i32 %10, i32* %value_id7, align 8, !dbg !6717
  br label %if.end15, !dbg !6715

if.else:                                          ; preds = %if.then
  %12 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno, align 8, !dbg !6718
  %result8 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %12, i32 0, i32 3, !dbg !6720
  %13 = load %union.tree_node*, %union.tree_node** %result8, align 8, !dbg !6720
  %call9 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %13), !dbg !6721
  %tobool10 = icmp ne i8 %call9, 0, !dbg !6721
  br i1 %tobool10, label %if.then11, label %if.end, !dbg !6722

if.then11:                                        ; preds = %if.else
  %14 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno, align 8, !dbg !6723
  %result12 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %14, i32 0, i32 3, !dbg !6724
  %15 = load %union.tree_node*, %union.tree_node** %result12, align 8, !dbg !6724
  %call13 = call i32 @get_or_alloc_constant_value_id(%union.tree_node* %15), !dbg !6725
  %16 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno, align 8, !dbg !6726
  %value_id14 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %16, i32 0, i32 0, !dbg !6727
  store i32 %call13, i32* %value_id14, align 8, !dbg !6728
  br label %if.end, !dbg !6726

if.end:                                           ; preds = %if.then11, %if.else
  br label %if.end15

if.end15:                                         ; preds = %if.end, %if.then4
  br label %if.end16, !dbg !6729

if.end16:                                         ; preds = %if.end15, %for.body
  br label %for.inc, !dbg !6730

for.inc:                                          ; preds = %if.end16
  %call17 = call i8* @next_htab_element(%struct.htab_iterator* %hi), !dbg !6699
  %17 = bitcast i8* %call17 to %struct.vn_nary_op_s*, !dbg !6699
  store %struct.vn_nary_op_s* %17, %struct.vn_nary_op_s** %vno, align 8, !dbg !6699
  br label %for.cond, !dbg !6699, !llvm.loop !6731

for.end:                                          ; preds = %for.cond
  %18 = load %struct.vn_tables_s*, %struct.vn_tables_s** @valid_info, align 8, !dbg !6733
  %phis = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %18, i32 0, i32 1, !dbg !6733
  %19 = load %struct.htab*, %struct.htab** %phis, align 8, !dbg !6733
  %call18 = call i8* @first_htab_element(%struct.htab_iterator* %hi, %struct.htab* %19), !dbg !6733
  %20 = bitcast i8* %call18 to %struct.vn_phi_s*, !dbg !6733
  store %struct.vn_phi_s* %20, %struct.vn_phi_s** %vp, align 8, !dbg !6733
  br label %for.cond19, !dbg !6733

for.cond19:                                       ; preds = %for.inc49, %for.end
  %call20 = call zeroext i8 @end_htab_p(%struct.htab_iterator* %hi), !dbg !6735
  %tobool21 = icmp ne i8 %call20, 0, !dbg !6735
  %lnot22 = xor i1 %tobool21, true, !dbg !6735
  br i1 %lnot22, label %for.body23, label %for.end51, !dbg !6733

for.body23:                                       ; preds = %for.cond19
  %21 = load %struct.vn_phi_s*, %struct.vn_phi_s** %vp, align 8, !dbg !6737
  %result24 = getelementptr inbounds %struct.vn_phi_s, %struct.vn_phi_s* %21, i32 0, i32 4, !dbg !6740
  %22 = load %union.tree_node*, %union.tree_node** %result24, align 8, !dbg !6740
  %tobool25 = icmp ne %union.tree_node* %22, null, !dbg !6737
  br i1 %tobool25, label %if.then26, label %if.end48, !dbg !6741

if.then26:                                        ; preds = %for.body23
  %23 = load %struct.vn_phi_s*, %struct.vn_phi_s** %vp, align 8, !dbg !6742
  %result27 = getelementptr inbounds %struct.vn_phi_s, %struct.vn_phi_s* %23, i32 0, i32 4, !dbg !6742
  %24 = load %union.tree_node*, %union.tree_node** %result27, align 8, !dbg !6742
  %base28 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !6742
  %25 = bitcast %struct.tree_base* %base28 to i64*, !dbg !6742
  %bf.load29 = load i64, i64* %25, align 8, !dbg !6742
  %bf.clear30 = and i64 %bf.load29, 65535, !dbg !6742
  %bf.cast31 = trunc i64 %bf.clear30 to i32, !dbg !6742
  %cmp32 = icmp eq i32 %bf.cast31, 141, !dbg !6745
  br i1 %cmp32, label %if.then33, label %if.else38, !dbg !6746

if.then33:                                        ; preds = %if.then26
  %26 = load %struct.vn_phi_s*, %struct.vn_phi_s** %vp, align 8, !dbg !6747
  %result34 = getelementptr inbounds %struct.vn_phi_s, %struct.vn_phi_s* %26, i32 0, i32 4, !dbg !6748
  %27 = load %union.tree_node*, %union.tree_node** %result34, align 8, !dbg !6748
  %call35 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %27), !dbg !6749
  %value_id36 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call35, i32 0, i32 2, !dbg !6750
  %28 = load i32, i32* %value_id36, align 8, !dbg !6750
  %29 = load %struct.vn_phi_s*, %struct.vn_phi_s** %vp, align 8, !dbg !6751
  %value_id37 = getelementptr inbounds %struct.vn_phi_s, %struct.vn_phi_s* %29, i32 0, i32 0, !dbg !6752
  store i32 %28, i32* %value_id37, align 8, !dbg !6753
  br label %if.end47, !dbg !6751

if.else38:                                        ; preds = %if.then26
  %30 = load %struct.vn_phi_s*, %struct.vn_phi_s** %vp, align 8, !dbg !6754
  %result39 = getelementptr inbounds %struct.vn_phi_s, %struct.vn_phi_s* %30, i32 0, i32 4, !dbg !6756
  %31 = load %union.tree_node*, %union.tree_node** %result39, align 8, !dbg !6756
  %call40 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %31), !dbg !6757
  %tobool41 = icmp ne i8 %call40, 0, !dbg !6757
  br i1 %tobool41, label %if.then42, label %if.end46, !dbg !6758

if.then42:                                        ; preds = %if.else38
  %32 = load %struct.vn_phi_s*, %struct.vn_phi_s** %vp, align 8, !dbg !6759
  %result43 = getelementptr inbounds %struct.vn_phi_s, %struct.vn_phi_s* %32, i32 0, i32 4, !dbg !6760
  %33 = load %union.tree_node*, %union.tree_node** %result43, align 8, !dbg !6760
  %call44 = call i32 @get_or_alloc_constant_value_id(%union.tree_node* %33), !dbg !6761
  %34 = load %struct.vn_phi_s*, %struct.vn_phi_s** %vp, align 8, !dbg !6762
  %value_id45 = getelementptr inbounds %struct.vn_phi_s, %struct.vn_phi_s* %34, i32 0, i32 0, !dbg !6763
  store i32 %call44, i32* %value_id45, align 8, !dbg !6764
  br label %if.end46, !dbg !6762

if.end46:                                         ; preds = %if.then42, %if.else38
  br label %if.end47

if.end47:                                         ; preds = %if.end46, %if.then33
  br label %if.end48, !dbg !6765

if.end48:                                         ; preds = %if.end47, %for.body23
  br label %for.inc49, !dbg !6766

for.inc49:                                        ; preds = %if.end48
  %call50 = call i8* @next_htab_element(%struct.htab_iterator* %hi), !dbg !6735
  %35 = bitcast i8* %call50 to %struct.vn_phi_s*, !dbg !6735
  store %struct.vn_phi_s* %35, %struct.vn_phi_s** %vp, align 8, !dbg !6735
  br label %for.cond19, !dbg !6735, !llvm.loop !6767

for.end51:                                        ; preds = %for.cond19
  %36 = load %struct.vn_tables_s*, %struct.vn_tables_s** @valid_info, align 8, !dbg !6769
  %references = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %36, i32 0, i32 2, !dbg !6769
  %37 = load %struct.htab*, %struct.htab** %references, align 8, !dbg !6769
  %call52 = call i8* @first_htab_element(%struct.htab_iterator* %hi, %struct.htab* %37), !dbg !6769
  %38 = bitcast i8* %call52 to %struct.vn_reference_s*, !dbg !6769
  store %struct.vn_reference_s* %38, %struct.vn_reference_s** %vr, align 8, !dbg !6769
  br label %for.cond53, !dbg !6769

for.cond53:                                       ; preds = %for.inc83, %for.end51
  %call54 = call zeroext i8 @end_htab_p(%struct.htab_iterator* %hi), !dbg !6771
  %tobool55 = icmp ne i8 %call54, 0, !dbg !6771
  %lnot56 = xor i1 %tobool55, true, !dbg !6771
  br i1 %lnot56, label %for.body57, label %for.end85, !dbg !6769

for.body57:                                       ; preds = %for.cond53
  %39 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr, align 8, !dbg !6773
  %result58 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %39, i32 0, i32 6, !dbg !6776
  %40 = load %union.tree_node*, %union.tree_node** %result58, align 8, !dbg !6776
  %tobool59 = icmp ne %union.tree_node* %40, null, !dbg !6773
  br i1 %tobool59, label %if.then60, label %if.end82, !dbg !6777

if.then60:                                        ; preds = %for.body57
  %41 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr, align 8, !dbg !6778
  %result61 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %41, i32 0, i32 6, !dbg !6778
  %42 = load %union.tree_node*, %union.tree_node** %result61, align 8, !dbg !6778
  %base62 = bitcast %union.tree_node* %42 to %struct.tree_base*, !dbg !6778
  %43 = bitcast %struct.tree_base* %base62 to i64*, !dbg !6778
  %bf.load63 = load i64, i64* %43, align 8, !dbg !6778
  %bf.clear64 = and i64 %bf.load63, 65535, !dbg !6778
  %bf.cast65 = trunc i64 %bf.clear64 to i32, !dbg !6778
  %cmp66 = icmp eq i32 %bf.cast65, 141, !dbg !6781
  br i1 %cmp66, label %if.then67, label %if.else72, !dbg !6782

if.then67:                                        ; preds = %if.then60
  %44 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr, align 8, !dbg !6783
  %result68 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %44, i32 0, i32 6, !dbg !6784
  %45 = load %union.tree_node*, %union.tree_node** %result68, align 8, !dbg !6784
  %call69 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %45), !dbg !6785
  %value_id70 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call69, i32 0, i32 2, !dbg !6786
  %46 = load i32, i32* %value_id70, align 8, !dbg !6786
  %47 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr, align 8, !dbg !6787
  %value_id71 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %47, i32 0, i32 0, !dbg !6788
  store i32 %46, i32* %value_id71, align 8, !dbg !6789
  br label %if.end81, !dbg !6787

if.else72:                                        ; preds = %if.then60
  %48 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr, align 8, !dbg !6790
  %result73 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %48, i32 0, i32 6, !dbg !6792
  %49 = load %union.tree_node*, %union.tree_node** %result73, align 8, !dbg !6792
  %call74 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %49), !dbg !6793
  %tobool75 = icmp ne i8 %call74, 0, !dbg !6793
  br i1 %tobool75, label %if.then76, label %if.end80, !dbg !6794

if.then76:                                        ; preds = %if.else72
  %50 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr, align 8, !dbg !6795
  %result77 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %50, i32 0, i32 6, !dbg !6796
  %51 = load %union.tree_node*, %union.tree_node** %result77, align 8, !dbg !6796
  %call78 = call i32 @get_or_alloc_constant_value_id(%union.tree_node* %51), !dbg !6797
  %52 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr, align 8, !dbg !6798
  %value_id79 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %52, i32 0, i32 0, !dbg !6799
  store i32 %call78, i32* %value_id79, align 8, !dbg !6800
  br label %if.end80, !dbg !6798

if.end80:                                         ; preds = %if.then76, %if.else72
  br label %if.end81

if.end81:                                         ; preds = %if.end80, %if.then67
  br label %if.end82, !dbg !6801

if.end82:                                         ; preds = %if.end81, %for.body57
  br label %for.inc83, !dbg !6802

for.inc83:                                        ; preds = %if.end82
  %call84 = call i8* @next_htab_element(%struct.htab_iterator* %hi), !dbg !6771
  %53 = bitcast i8* %call84 to %struct.vn_reference_s*, !dbg !6771
  store %struct.vn_reference_s* %53, %struct.vn_reference_s** %vr, align 8, !dbg !6771
  br label %for.cond53, !dbg !6771, !llvm.loop !6803

for.end85:                                        ; preds = %for.cond53
  ret void, !dbg !6805
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

declare dso_local void @print_generic_expr(%struct._IO_FILE*, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @get_max_value_id() #0 !dbg !6806 {
entry:
  %0 = load i32, i32* @next_value_id, align 4, !dbg !6807
  ret i32 %0, !dbg !6808
}

declare dso_local i32 @operand_equal_p(%union.tree_node*, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @vn_nary_may_trap(%struct.vn_nary_op_s* %nary) #0 !dbg !6809 {
entry:
  %retval = alloca i8, align 1
  %nary.addr = alloca %struct.vn_nary_op_s*, align 8
  %type = alloca %union.tree_node*, align 8
  %rhs2 = alloca %union.tree_node*, align 8
  %honor_nans = alloca i8, align 1
  %honor_snans = alloca i8, align 1
  %fp_operation = alloca i8, align 1
  %honor_trapv = alloca i8, align 1
  %handled = alloca i8, align 1
  %ret = alloca i8, align 1
  %i = alloca i32, align 4
  store %struct.vn_nary_op_s* %nary, %struct.vn_nary_op_s** %nary.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.vn_nary_op_s** %nary.addr, metadata !6812, metadata !DIExpression()), !dbg !6813
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !6814, metadata !DIExpression()), !dbg !6815
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs2, metadata !6816, metadata !DIExpression()), !dbg !6817
  call void @llvm.dbg.declare(metadata i8* %honor_nans, metadata !6818, metadata !DIExpression()), !dbg !6819
  store i8 0, i8* %honor_nans, align 1, !dbg !6819
  call void @llvm.dbg.declare(metadata i8* %honor_snans, metadata !6820, metadata !DIExpression()), !dbg !6821
  store i8 0, i8* %honor_snans, align 1, !dbg !6821
  call void @llvm.dbg.declare(metadata i8* %fp_operation, metadata !6822, metadata !DIExpression()), !dbg !6823
  store i8 0, i8* %fp_operation, align 1, !dbg !6823
  call void @llvm.dbg.declare(metadata i8* %honor_trapv, metadata !6824, metadata !DIExpression()), !dbg !6825
  store i8 0, i8* %honor_trapv, align 1, !dbg !6825
  call void @llvm.dbg.declare(metadata i8* %handled, metadata !6826, metadata !DIExpression()), !dbg !6827
  call void @llvm.dbg.declare(metadata i8* %ret, metadata !6828, metadata !DIExpression()), !dbg !6829
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6830, metadata !DIExpression()), !dbg !6831
  %0 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary.addr, align 8, !dbg !6832
  %opcode = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %0, i32 0, i32 1, !dbg !6832
  %bf.load = load i32, i32* %opcode, align 4, !dbg !6832
  %bf.clear = and i32 %bf.load, 65535, !dbg !6832
  %idxprom = sext i32 %bf.clear to i64, !dbg !6832
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !6832
  %1 = load i32, i32* %arrayidx, align 4, !dbg !6832
  %cmp = icmp eq i32 %1, 5, !dbg !6834
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6835

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary.addr, align 8, !dbg !6836
  %opcode1 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %2, i32 0, i32 1, !dbg !6836
  %bf.load2 = load i32, i32* %opcode1, align 4, !dbg !6836
  %bf.clear3 = and i32 %bf.load2, 65535, !dbg !6836
  %idxprom4 = sext i32 %bf.clear3 to i64, !dbg !6836
  %arrayidx5 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom4, !dbg !6836
  %3 = load i32, i32* %arrayidx5, align 4, !dbg !6836
  %cmp6 = icmp eq i32 %3, 6, !dbg !6837
  br i1 %cmp6, label %if.then, label %lor.lhs.false7, !dbg !6838

lor.lhs.false7:                                   ; preds = %lor.lhs.false
  %4 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary.addr, align 8, !dbg !6839
  %opcode8 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %4, i32 0, i32 1, !dbg !6839
  %bf.load9 = load i32, i32* %opcode8, align 4, !dbg !6839
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !6839
  %idxprom11 = sext i32 %bf.clear10 to i64, !dbg !6839
  %arrayidx12 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom11, !dbg !6839
  %5 = load i32, i32* %arrayidx12, align 4, !dbg !6839
  %cmp13 = icmp eq i32 %5, 7, !dbg !6840
  br i1 %cmp13, label %if.then, label %if.end73, !dbg !6841

if.then:                                          ; preds = %lor.lhs.false7, %lor.lhs.false, %entry
  %6 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary.addr, align 8, !dbg !6842
  %type14 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %6, i32 0, i32 4, !dbg !6844
  %7 = load %union.tree_node*, %union.tree_node** %type14, align 8, !dbg !6844
  store %union.tree_node* %7, %union.tree_node** %type, align 8, !dbg !6845
  %8 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6846
  %base = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !6846
  %9 = bitcast %struct.tree_base* %base to i64*, !dbg !6846
  %bf.load15 = load i64, i64* %9, align 8, !dbg !6846
  %bf.clear16 = and i64 %bf.load15, 65535, !dbg !6846
  %bf.cast = trunc i64 %bf.clear16 to i32, !dbg !6846
  %cmp17 = icmp eq i32 %bf.cast, 9, !dbg !6846
  br i1 %cmp17, label %lor.end, label %lor.rhs, !dbg !6846

lor.rhs:                                          ; preds = %if.then
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6846
  %base18 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !6846
  %11 = bitcast %struct.tree_base* %base18 to i64*, !dbg !6846
  %bf.load19 = load i64, i64* %11, align 8, !dbg !6846
  %bf.clear20 = and i64 %bf.load19, 65535, !dbg !6846
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !6846
  %cmp22 = icmp eq i32 %bf.cast21, 13, !dbg !6846
  br i1 %cmp22, label %land.rhs, label %lor.lhs.false23, !dbg !6846

lor.lhs.false23:                                  ; preds = %lor.rhs
  %12 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6846
  %base24 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !6846
  %13 = bitcast %struct.tree_base* %base24 to i64*, !dbg !6846
  %bf.load25 = load i64, i64* %13, align 8, !dbg !6846
  %bf.clear26 = and i64 %bf.load25, 65535, !dbg !6846
  %bf.cast27 = trunc i64 %bf.clear26 to i32, !dbg !6846
  %cmp28 = icmp eq i32 %bf.cast27, 14, !dbg !6846
  br i1 %cmp28, label %land.rhs, label %land.end, !dbg !6846

land.rhs:                                         ; preds = %lor.lhs.false23, %lor.rhs
  %14 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6846
  %common = bitcast %union.tree_node* %14 to %struct.tree_common*, !dbg !6846
  %type29 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6846
  %15 = load %union.tree_node*, %union.tree_node** %type29, align 8, !dbg !6846
  %base30 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !6846
  %16 = bitcast %struct.tree_base* %base30 to i64*, !dbg !6846
  %bf.load31 = load i64, i64* %16, align 8, !dbg !6846
  %bf.clear32 = and i64 %bf.load31, 65535, !dbg !6846
  %bf.cast33 = trunc i64 %bf.clear32 to i32, !dbg !6846
  %cmp34 = icmp eq i32 %bf.cast33, 9, !dbg !6846
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.lhs.false23
  %17 = phi i1 [ false, %lor.lhs.false23 ], [ %cmp34, %land.rhs ], !dbg !6847
  br label %lor.end, !dbg !6846

lor.end:                                          ; preds = %land.end, %if.then
  %18 = phi i1 [ true, %if.then ], [ %17, %land.end ]
  %lor.ext = zext i1 %18 to i32, !dbg !6846
  %conv = trunc i32 %lor.ext to i8, !dbg !6846
  store i8 %conv, i8* %fp_operation, align 1, !dbg !6848
  %19 = load i8, i8* %fp_operation, align 1, !dbg !6849
  %tobool = icmp ne i8 %19, 0, !dbg !6849
  br i1 %tobool, label %if.then35, label %if.else, !dbg !6851

if.then35:                                        ; preds = %lor.end
  %20 = load i32, i32* @flag_trapping_math, align 4, !dbg !6852
  %tobool36 = icmp ne i32 %20, 0, !dbg !6852
  br i1 %tobool36, label %land.rhs37, label %land.end39, !dbg !6854

land.rhs37:                                       ; preds = %if.then35
  %21 = load i32, i32* @flag_finite_math_only, align 4, !dbg !6855
  %tobool38 = icmp ne i32 %21, 0, !dbg !6856
  %lnot = xor i1 %tobool38, true, !dbg !6856
  br label %land.end39

land.end39:                                       ; preds = %land.rhs37, %if.then35
  %22 = phi i1 [ false, %if.then35 ], [ %lnot, %land.rhs37 ], !dbg !6857
  %land.ext = zext i1 %22 to i32, !dbg !6854
  %conv40 = trunc i32 %land.ext to i8, !dbg !6852
  store i8 %conv40, i8* %honor_nans, align 1, !dbg !6858
  %23 = load i32, i32* @flag_signaling_nans, align 4, !dbg !6859
  %cmp41 = icmp ne i32 %23, 0, !dbg !6860
  %conv42 = zext i1 %cmp41 to i32, !dbg !6860
  %conv43 = trunc i32 %conv42 to i8, !dbg !6859
  store i8 %conv43, i8* %honor_snans, align 1, !dbg !6861
  br label %if.end72, !dbg !6862

if.else:                                          ; preds = %lor.end
  %24 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6863
  %base44 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !6863
  %25 = bitcast %struct.tree_base* %base44 to i64*, !dbg !6863
  %bf.load45 = load i64, i64* %25, align 8, !dbg !6863
  %bf.clear46 = and i64 %bf.load45, 65535, !dbg !6863
  %bf.cast47 = trunc i64 %bf.clear46 to i32, !dbg !6863
  %cmp48 = icmp eq i32 %bf.cast47, 6, !dbg !6863
  br i1 %cmp48, label %land.lhs.true, label %lor.lhs.false50, !dbg !6863

lor.lhs.false50:                                  ; preds = %if.else
  %26 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6863
  %base51 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !6863
  %27 = bitcast %struct.tree_base* %base51 to i64*, !dbg !6863
  %bf.load52 = load i64, i64* %27, align 8, !dbg !6863
  %bf.clear53 = and i64 %bf.load52, 65535, !dbg !6863
  %bf.cast54 = trunc i64 %bf.clear53 to i32, !dbg !6863
  %cmp55 = icmp eq i32 %bf.cast54, 7, !dbg !6863
  br i1 %cmp55, label %land.lhs.true, label %lor.lhs.false57, !dbg !6863

lor.lhs.false57:                                  ; preds = %lor.lhs.false50
  %28 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6863
  %base58 = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !6863
  %29 = bitcast %struct.tree_base* %base58 to i64*, !dbg !6863
  %bf.load59 = load i64, i64* %29, align 8, !dbg !6863
  %bf.clear60 = and i64 %bf.load59, 65535, !dbg !6863
  %bf.cast61 = trunc i64 %bf.clear60 to i32, !dbg !6863
  %cmp62 = icmp eq i32 %bf.cast61, 8, !dbg !6863
  br i1 %cmp62, label %land.lhs.true, label %if.end, !dbg !6865

land.lhs.true:                                    ; preds = %lor.lhs.false57, %lor.lhs.false50, %if.else
  %30 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6866
  %base64 = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !6866
  %31 = bitcast %struct.tree_base* %base64 to i64*, !dbg !6866
  %bf.load65 = load i64, i64* %31, align 8, !dbg !6866
  %bf.lshr = lshr i64 %bf.load65, 21, !dbg !6866
  %bf.clear66 = and i64 %bf.lshr, 1, !dbg !6866
  %bf.cast67 = trunc i64 %bf.clear66 to i32, !dbg !6866
  %tobool68 = icmp ne i32 %bf.cast67, 0, !dbg !6866
  br i1 %tobool68, label %if.end, label %land.lhs.true69, !dbg !6866

land.lhs.true69:                                  ; preds = %land.lhs.true
  %32 = load i32, i32* @flag_trapv, align 4, !dbg !6866
  %tobool70 = icmp ne i32 %32, 0, !dbg !6866
  br i1 %tobool70, label %if.then71, label %if.end, !dbg !6867

if.then71:                                        ; preds = %land.lhs.true69
  store i8 1, i8* %honor_trapv, align 1, !dbg !6868
  br label %if.end, !dbg !6869

if.end:                                           ; preds = %if.then71, %land.lhs.true69, %land.lhs.true, %lor.lhs.false57
  br label %if.end72

if.end72:                                         ; preds = %if.end, %land.end39
  br label %if.end73, !dbg !6870

if.end73:                                         ; preds = %if.end72, %lor.lhs.false7
  %33 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary.addr, align 8, !dbg !6871
  %op = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %33, i32 0, i32 5, !dbg !6872
  %arrayidx74 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op, i64 0, i64 1, !dbg !6871
  %34 = load %union.tree_node*, %union.tree_node** %arrayidx74, align 8, !dbg !6871
  store %union.tree_node* %34, %union.tree_node** %rhs2, align 8, !dbg !6873
  %35 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary.addr, align 8, !dbg !6874
  %opcode75 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %35, i32 0, i32 1, !dbg !6875
  %bf.load76 = load i32, i32* %opcode75, align 4, !dbg !6875
  %bf.clear77 = and i32 %bf.load76, 65535, !dbg !6875
  %36 = load i8, i8* %fp_operation, align 1, !dbg !6876
  %37 = load i8, i8* %honor_trapv, align 1, !dbg !6877
  %38 = load i8, i8* %honor_nans, align 1, !dbg !6878
  %39 = load i8, i8* %honor_snans, align 1, !dbg !6879
  %40 = load %union.tree_node*, %union.tree_node** %rhs2, align 8, !dbg !6880
  %call = call zeroext i8 @operation_could_trap_helper_p(i32 %bf.clear77, i8 zeroext %36, i8 zeroext %37, i8 zeroext %38, i8 zeroext %39, %union.tree_node* %40, i8* %handled), !dbg !6881
  store i8 %call, i8* %ret, align 1, !dbg !6882
  %41 = load i8, i8* %handled, align 1, !dbg !6883
  %conv78 = zext i8 %41 to i32, !dbg !6883
  %tobool79 = icmp ne i32 %conv78, 0, !dbg !6883
  br i1 %tobool79, label %land.lhs.true80, label %if.end84, !dbg !6885

land.lhs.true80:                                  ; preds = %if.end73
  %42 = load i8, i8* %ret, align 1, !dbg !6886
  %conv81 = zext i8 %42 to i32, !dbg !6886
  %tobool82 = icmp ne i32 %conv81, 0, !dbg !6886
  br i1 %tobool82, label %if.then83, label %if.end84, !dbg !6887

if.then83:                                        ; preds = %land.lhs.true80
  store i8 1, i8* %retval, align 1, !dbg !6888
  br label %return, !dbg !6888

if.end84:                                         ; preds = %land.lhs.true80, %if.end73
  store i32 0, i32* %i, align 4, !dbg !6889
  br label %for.cond, !dbg !6891

for.cond:                                         ; preds = %for.inc, %if.end84
  %43 = load i32, i32* %i, align 4, !dbg !6892
  %44 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary.addr, align 8, !dbg !6894
  %length = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %44, i32 0, i32 1, !dbg !6895
  %bf.load85 = load i32, i32* %length, align 4, !dbg !6895
  %bf.lshr86 = lshr i32 %bf.load85, 16, !dbg !6895
  %cmp87 = icmp ult i32 %43, %bf.lshr86, !dbg !6896
  br i1 %cmp87, label %for.body, label %for.end, !dbg !6897

for.body:                                         ; preds = %for.cond
  %45 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary.addr, align 8, !dbg !6898
  %op89 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %45, i32 0, i32 5, !dbg !6900
  %46 = load i32, i32* %i, align 4, !dbg !6901
  %idxprom90 = zext i32 %46 to i64, !dbg !6898
  %arrayidx91 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op89, i64 0, i64 %idxprom90, !dbg !6898
  %47 = load %union.tree_node*, %union.tree_node** %arrayidx91, align 8, !dbg !6898
  %call92 = call zeroext i8 @tree_could_trap_p(%union.tree_node* %47), !dbg !6902
  %tobool93 = icmp ne i8 %call92, 0, !dbg !6902
  br i1 %tobool93, label %if.then94, label %if.end95, !dbg !6903

if.then94:                                        ; preds = %for.body
  store i8 1, i8* %retval, align 1, !dbg !6904
  br label %return, !dbg !6904

if.end95:                                         ; preds = %for.body
  br label %for.inc, !dbg !6905

for.inc:                                          ; preds = %if.end95
  %48 = load i32, i32* %i, align 4, !dbg !6906
  %inc = add i32 %48, 1, !dbg !6906
  store i32 %inc, i32* %i, align 4, !dbg !6906
  br label %for.cond, !dbg !6907, !llvm.loop !6908

for.end:                                          ; preds = %for.cond
  store i8 0, i8* %retval, align 1, !dbg !6910
  br label %return, !dbg !6910

return:                                           ; preds = %for.end, %if.then94, %if.then83
  %49 = load i8, i8* %retval, align 1, !dbg !6911
  ret i8 %49, !dbg !6911
}

declare dso_local zeroext i8 @operation_could_trap_helper_p(i32, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, %union.tree_node*, i8*) #2

declare dso_local zeroext i8 @tree_could_trap_p(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_vn_ssa_aux_t_heap_reserve_exact(%struct.VEC_vn_ssa_aux_t_heap** %vec_, i32 %alloc_) #0 !dbg !6912 {
entry:
  %vec_.addr = alloca %struct.VEC_vn_ssa_aux_t_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_vn_ssa_aux_t_heap** %vec_, %struct.VEC_vn_ssa_aux_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_ssa_aux_t_heap*** %vec_.addr, metadata !6915, metadata !DIExpression()), !dbg !6916
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6917, metadata !DIExpression()), !dbg !6916
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !6918, metadata !DIExpression()), !dbg !6916
  %0 = load %struct.VEC_vn_ssa_aux_t_heap**, %struct.VEC_vn_ssa_aux_t_heap*** %vec_.addr, align 8, !dbg !6916
  %1 = load %struct.VEC_vn_ssa_aux_t_heap*, %struct.VEC_vn_ssa_aux_t_heap** %0, align 8, !dbg !6916
  %tobool = icmp ne %struct.VEC_vn_ssa_aux_t_heap* %1, null, !dbg !6916
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6916

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_vn_ssa_aux_t_heap**, %struct.VEC_vn_ssa_aux_t_heap*** %vec_.addr, align 8, !dbg !6916
  %3 = load %struct.VEC_vn_ssa_aux_t_heap*, %struct.VEC_vn_ssa_aux_t_heap** %2, align 8, !dbg !6916
  %base = getelementptr inbounds %struct.VEC_vn_ssa_aux_t_heap, %struct.VEC_vn_ssa_aux_t_heap* %3, i32 0, i32 0, !dbg !6916
  br label %cond.end, !dbg !6916

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6916

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_vn_ssa_aux_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6916
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !6916
  %call = call i32 @VEC_vn_ssa_aux_t_base_space(%struct.VEC_vn_ssa_aux_t_base* %cond, i32 %4), !dbg !6916
  %tobool1 = icmp ne i32 %call, 0, !dbg !6916
  %lnot = xor i1 %tobool1, true, !dbg !6916
  %lnot.ext = zext i1 %lnot to i32, !dbg !6916
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !6916
  %5 = load i32, i32* %extend, align 4, !dbg !6919
  %tobool2 = icmp ne i32 %5, 0, !dbg !6919
  br i1 %tobool2, label %if.then, label %if.end, !dbg !6916

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_vn_ssa_aux_t_heap**, %struct.VEC_vn_ssa_aux_t_heap*** %vec_.addr, align 8, !dbg !6919
  %7 = load %struct.VEC_vn_ssa_aux_t_heap*, %struct.VEC_vn_ssa_aux_t_heap** %6, align 8, !dbg !6919
  %8 = bitcast %struct.VEC_vn_ssa_aux_t_heap* %7 to i8*, !dbg !6919
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !6919
  %call3 = call i8* @vec_heap_p_reserve_exact(i8* %8, i32 %9), !dbg !6919
  %10 = bitcast i8* %call3 to %struct.VEC_vn_ssa_aux_t_heap*, !dbg !6919
  %11 = load %struct.VEC_vn_ssa_aux_t_heap**, %struct.VEC_vn_ssa_aux_t_heap*** %vec_.addr, align 8, !dbg !6919
  store %struct.VEC_vn_ssa_aux_t_heap* %10, %struct.VEC_vn_ssa_aux_t_heap** %11, align 8, !dbg !6919
  br label %if.end, !dbg !6919

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !6916
  ret i32 %12, !dbg !6916
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_vn_ssa_aux_t_base_space(%struct.VEC_vn_ssa_aux_t_base* %vec_, i32 %alloc_) #0 !dbg !6921 {
entry:
  %vec_.addr = alloca %struct.VEC_vn_ssa_aux_t_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_vn_ssa_aux_t_base* %vec_, %struct.VEC_vn_ssa_aux_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_ssa_aux_t_base** %vec_.addr, metadata !6924, metadata !DIExpression()), !dbg !6925
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6926, metadata !DIExpression()), !dbg !6925
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !6925
  %cmp = icmp sge i32 %0, 0, !dbg !6925
  %conv = zext i1 %cmp to i32, !dbg !6925
  %1 = load %struct.VEC_vn_ssa_aux_t_base*, %struct.VEC_vn_ssa_aux_t_base** %vec_.addr, align 8, !dbg !6925
  %tobool = icmp ne %struct.VEC_vn_ssa_aux_t_base* %1, null, !dbg !6925
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6925

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_vn_ssa_aux_t_base*, %struct.VEC_vn_ssa_aux_t_base** %vec_.addr, align 8, !dbg !6925
  %alloc = getelementptr inbounds %struct.VEC_vn_ssa_aux_t_base, %struct.VEC_vn_ssa_aux_t_base* %2, i32 0, i32 1, !dbg !6925
  %3 = load i32, i32* %alloc, align 4, !dbg !6925
  %4 = load %struct.VEC_vn_ssa_aux_t_base*, %struct.VEC_vn_ssa_aux_t_base** %vec_.addr, align 8, !dbg !6925
  %num = getelementptr inbounds %struct.VEC_vn_ssa_aux_t_base, %struct.VEC_vn_ssa_aux_t_base* %4, i32 0, i32 0, !dbg !6925
  %5 = load i32, i32* %num, align 8, !dbg !6925
  %sub = sub i32 %3, %5, !dbg !6925
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !6925
  %cmp1 = icmp uge i32 %sub, %6, !dbg !6925
  %conv2 = zext i1 %cmp1 to i32, !dbg !6925
  br label %cond.end, !dbg !6925

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !6925
  %tobool3 = icmp ne i32 %7, 0, !dbg !6925
  %lnot = xor i1 %tobool3, true, !dbg !6925
  %lnot.ext = zext i1 %lnot to i32, !dbg !6925
  br label %cond.end, !dbg !6925

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !6925
  ret i32 %cond, !dbg !6925
}

declare dso_local i8* @vec_heap_p_reserve_exact(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_expr_code(%union.gimple_statement_d* %stmt) #0 !dbg !6927 {
entry:
  %retval = alloca i32, align 4
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6928, metadata !DIExpression()), !dbg !6929
  call void @llvm.dbg.declare(metadata i32* %code, metadata !6930, metadata !DIExpression()), !dbg !6931
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6932
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6933
  store i32 %call, i32* %code, align 4, !dbg !6931
  %1 = load i32, i32* %code, align 4, !dbg !6934
  %cmp = icmp eq i32 %1, 6, !dbg !6936
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6937

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code, align 4, !dbg !6938
  %cmp1 = icmp eq i32 %2, 1, !dbg !6939
  br i1 %cmp1, label %if.then, label %if.else, !dbg !6940

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6941
  %gsbase = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_base*, !dbg !6942
  %4 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !6943
  %bf.load = load i32, i32* %4, align 8, !dbg !6943
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !6943
  store i32 %bf.lshr, i32* %retval, align 4, !dbg !6944
  br label %return, !dbg !6944

if.else:                                          ; preds = %lor.lhs.false
  %5 = load i32, i32* %code, align 4, !dbg !6945
  %cmp2 = icmp eq i32 %5, 8, !dbg !6947
  br i1 %cmp2, label %if.then3, label %if.else4, !dbg !6948

if.then3:                                         ; preds = %if.else
  store i32 59, i32* %retval, align 4, !dbg !6949
  br label %return, !dbg !6949

if.else4:                                         ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i64 0, i64 0), i32 1446, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6950
  br label %if.end

if.end:                                           ; preds = %if.else4
  br label %if.end5

if.end5:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !6951
  br label %return, !dbg !6951

return:                                           ; preds = %if.end5, %if.then3, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !6952
  ret i32 %6, !dbg !6952
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_gimple_rhs_class(i32 %code) #0 !dbg !6953 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !6956, metadata !DIExpression()), !dbg !6957
  %0 = load i32, i32* %code.addr, align 4, !dbg !6958
  %idxprom = sext i32 %0 to i64, !dbg !6959
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @gimple_rhs_class_table, i64 0, i64 %idxprom, !dbg !6959
  %1 = load i8, i8* %arrayidx, align 1, !dbg !6959
  %conv = zext i8 %1 to i32, !dbg !6960
  ret i32 %conv, !dbg !6961
}

declare dso_local %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_vn_reference_op_s_heap_reserve(%struct.VEC_vn_reference_op_s_heap** %vec_, i32 %alloc_) #0 !dbg !6962 {
entry:
  %vec_.addr = alloca %struct.VEC_vn_reference_op_s_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_vn_reference_op_s_heap** %vec_, %struct.VEC_vn_reference_op_s_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_reference_op_s_heap*** %vec_.addr, metadata !6965, metadata !DIExpression()), !dbg !6966
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6967, metadata !DIExpression()), !dbg !6966
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !6968, metadata !DIExpression()), !dbg !6966
  %0 = load %struct.VEC_vn_reference_op_s_heap**, %struct.VEC_vn_reference_op_s_heap*** %vec_.addr, align 8, !dbg !6966
  %1 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %0, align 8, !dbg !6966
  %tobool = icmp ne %struct.VEC_vn_reference_op_s_heap* %1, null, !dbg !6966
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6966

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_vn_reference_op_s_heap**, %struct.VEC_vn_reference_op_s_heap*** %vec_.addr, align 8, !dbg !6966
  %3 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %2, align 8, !dbg !6966
  %base = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %3, i32 0, i32 0, !dbg !6966
  br label %cond.end, !dbg !6966

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6966

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_vn_reference_op_s_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6966
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !6966
  %call = call i32 @VEC_vn_reference_op_s_base_space(%struct.VEC_vn_reference_op_s_base* %cond, i32 %4), !dbg !6966
  %tobool1 = icmp ne i32 %call, 0, !dbg !6966
  %lnot = xor i1 %tobool1, true, !dbg !6966
  %lnot.ext = zext i1 %lnot to i32, !dbg !6966
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !6966
  %5 = load i32, i32* %extend, align 4, !dbg !6969
  %tobool2 = icmp ne i32 %5, 0, !dbg !6969
  br i1 %tobool2, label %if.then, label %if.end, !dbg !6966

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_vn_reference_op_s_heap**, %struct.VEC_vn_reference_op_s_heap*** %vec_.addr, align 8, !dbg !6969
  %7 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %6, align 8, !dbg !6969
  %8 = bitcast %struct.VEC_vn_reference_op_s_heap* %7 to i8*, !dbg !6969
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !6969
  %call3 = call i8* @vec_heap_o_reserve(i8* %8, i32 %9, i64 8, i64 40), !dbg !6969
  %10 = bitcast i8* %call3 to %struct.VEC_vn_reference_op_s_heap*, !dbg !6969
  %11 = load %struct.VEC_vn_reference_op_s_heap**, %struct.VEC_vn_reference_op_s_heap*** %vec_.addr, align 8, !dbg !6969
  store %struct.VEC_vn_reference_op_s_heap* %10, %struct.VEC_vn_reference_op_s_heap** %11, align 8, !dbg !6969
  br label %if.end, !dbg !6969

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !6966
  ret i32 %12, !dbg !6966
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.vn_reference_op_struct* @VEC_vn_reference_op_s_base_quick_push(%struct.VEC_vn_reference_op_s_base* %vec_, %struct.vn_reference_op_struct* %obj_) #0 !dbg !6971 {
entry:
  %vec_.addr = alloca %struct.VEC_vn_reference_op_s_base*, align 8
  %obj_.addr = alloca %struct.vn_reference_op_struct*, align 8
  %slot_ = alloca %struct.vn_reference_op_struct*, align 8
  store %struct.VEC_vn_reference_op_s_base* %vec_, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_reference_op_s_base** %vec_.addr, metadata !6974, metadata !DIExpression()), !dbg !6975
  store %struct.vn_reference_op_struct* %obj_, %struct.vn_reference_op_struct** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.vn_reference_op_struct** %obj_.addr, metadata !6976, metadata !DIExpression()), !dbg !6975
  call void @llvm.dbg.declare(metadata %struct.vn_reference_op_struct** %slot_, metadata !6977, metadata !DIExpression()), !dbg !6975
  %0 = load %struct.VEC_vn_reference_op_s_base*, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8, !dbg !6975
  %num = getelementptr inbounds %struct.VEC_vn_reference_op_s_base, %struct.VEC_vn_reference_op_s_base* %0, i32 0, i32 0, !dbg !6975
  %1 = load i32, i32* %num, align 8, !dbg !6975
  %2 = load %struct.VEC_vn_reference_op_s_base*, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8, !dbg !6975
  %alloc = getelementptr inbounds %struct.VEC_vn_reference_op_s_base, %struct.VEC_vn_reference_op_s_base* %2, i32 0, i32 1, !dbg !6975
  %3 = load i32, i32* %alloc, align 4, !dbg !6975
  %cmp = icmp ult i32 %1, %3, !dbg !6975
  %conv = zext i1 %cmp to i32, !dbg !6975
  %4 = load %struct.VEC_vn_reference_op_s_base*, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8, !dbg !6975
  %vec = getelementptr inbounds %struct.VEC_vn_reference_op_s_base, %struct.VEC_vn_reference_op_s_base* %4, i32 0, i32 2, !dbg !6975
  %5 = load %struct.VEC_vn_reference_op_s_base*, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8, !dbg !6975
  %num1 = getelementptr inbounds %struct.VEC_vn_reference_op_s_base, %struct.VEC_vn_reference_op_s_base* %5, i32 0, i32 0, !dbg !6975
  %6 = load i32, i32* %num1, align 8, !dbg !6975
  %inc = add i32 %6, 1, !dbg !6975
  store i32 %inc, i32* %num1, align 8, !dbg !6975
  %idxprom = zext i32 %6 to i64, !dbg !6975
  %arrayidx = getelementptr inbounds [1 x %struct.vn_reference_op_struct], [1 x %struct.vn_reference_op_struct]* %vec, i64 0, i64 %idxprom, !dbg !6975
  store %struct.vn_reference_op_struct* %arrayidx, %struct.vn_reference_op_struct** %slot_, align 8, !dbg !6975
  %7 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %obj_.addr, align 8, !dbg !6978
  %tobool = icmp ne %struct.vn_reference_op_struct* %7, null, !dbg !6978
  br i1 %tobool, label %if.then, label %if.end, !dbg !6975

if.then:                                          ; preds = %entry
  %8 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %slot_, align 8, !dbg !6978
  %9 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %obj_.addr, align 8, !dbg !6978
  %10 = bitcast %struct.vn_reference_op_struct* %8 to i8*, !dbg !6978
  %11 = bitcast %struct.vn_reference_op_struct* %9 to i8*, !dbg !6978
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 40, i1 false), !dbg !6978
  br label %if.end, !dbg !6978

if.end:                                           ; preds = %if.then, %entry
  %12 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %slot_, align 8, !dbg !6975
  ret %struct.vn_reference_op_struct* %12, !dbg !6975
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_vn_reference_op_s_base_space(%struct.VEC_vn_reference_op_s_base* %vec_, i32 %alloc_) #0 !dbg !6980 {
entry:
  %vec_.addr = alloca %struct.VEC_vn_reference_op_s_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_vn_reference_op_s_base* %vec_, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_reference_op_s_base** %vec_.addr, metadata !6983, metadata !DIExpression()), !dbg !6984
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6985, metadata !DIExpression()), !dbg !6984
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !6984
  %cmp = icmp sge i32 %0, 0, !dbg !6984
  %conv = zext i1 %cmp to i32, !dbg !6984
  %1 = load %struct.VEC_vn_reference_op_s_base*, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8, !dbg !6984
  %tobool = icmp ne %struct.VEC_vn_reference_op_s_base* %1, null, !dbg !6984
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6984

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_vn_reference_op_s_base*, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8, !dbg !6984
  %alloc = getelementptr inbounds %struct.VEC_vn_reference_op_s_base, %struct.VEC_vn_reference_op_s_base* %2, i32 0, i32 1, !dbg !6984
  %3 = load i32, i32* %alloc, align 4, !dbg !6984
  %4 = load %struct.VEC_vn_reference_op_s_base*, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8, !dbg !6984
  %num = getelementptr inbounds %struct.VEC_vn_reference_op_s_base, %struct.VEC_vn_reference_op_s_base* %4, i32 0, i32 0, !dbg !6984
  %5 = load i32, i32* %num, align 8, !dbg !6984
  %sub = sub i32 %3, %5, !dbg !6984
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !6984
  %cmp1 = icmp uge i32 %sub, %6, !dbg !6984
  %conv2 = zext i1 %cmp1 to i32, !dbg !6984
  br label %cond.end, !dbg !6984

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !6984
  %tobool3 = icmp ne i32 %7, 0, !dbg !6984
  %lnot = xor i1 %tobool3, true, !dbg !6984
  %lnot.ext = zext i1 %lnot to i32, !dbg !6984
  br label %cond.end, !dbg !6984

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !6984
  ret i32 %cond, !dbg !6984
}

declare dso_local i8* @vec_heap_o_reserve(i8*, i32, i64, i64) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.vn_reference_op_struct* @VEC_vn_reference_op_s_base_quick_insert(%struct.VEC_vn_reference_op_s_base* %vec_, i32 %ix_, %struct.vn_reference_op_struct* %obj_) #0 !dbg !6986 {
entry:
  %vec_.addr = alloca %struct.VEC_vn_reference_op_s_base*, align 8
  %ix_.addr = alloca i32, align 4
  %obj_.addr = alloca %struct.vn_reference_op_struct*, align 8
  %slot_ = alloca %struct.vn_reference_op_struct*, align 8
  store %struct.VEC_vn_reference_op_s_base* %vec_, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_reference_op_s_base** %vec_.addr, metadata !6987, metadata !DIExpression()), !dbg !6988
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6989, metadata !DIExpression()), !dbg !6988
  store %struct.vn_reference_op_struct* %obj_, %struct.vn_reference_op_struct** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.vn_reference_op_struct** %obj_.addr, metadata !6990, metadata !DIExpression()), !dbg !6988
  call void @llvm.dbg.declare(metadata %struct.vn_reference_op_struct** %slot_, metadata !6991, metadata !DIExpression()), !dbg !6988
  %0 = load %struct.VEC_vn_reference_op_s_base*, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8, !dbg !6988
  %num = getelementptr inbounds %struct.VEC_vn_reference_op_s_base, %struct.VEC_vn_reference_op_s_base* %0, i32 0, i32 0, !dbg !6988
  %1 = load i32, i32* %num, align 8, !dbg !6988
  %2 = load %struct.VEC_vn_reference_op_s_base*, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8, !dbg !6988
  %alloc = getelementptr inbounds %struct.VEC_vn_reference_op_s_base, %struct.VEC_vn_reference_op_s_base* %2, i32 0, i32 1, !dbg !6988
  %3 = load i32, i32* %alloc, align 4, !dbg !6988
  %cmp = icmp ult i32 %1, %3, !dbg !6988
  %conv = zext i1 %cmp to i32, !dbg !6988
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !6988
  %5 = load %struct.VEC_vn_reference_op_s_base*, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8, !dbg !6988
  %num1 = getelementptr inbounds %struct.VEC_vn_reference_op_s_base, %struct.VEC_vn_reference_op_s_base* %5, i32 0, i32 0, !dbg !6988
  %6 = load i32, i32* %num1, align 8, !dbg !6988
  %cmp2 = icmp ule i32 %4, %6, !dbg !6988
  %conv3 = zext i1 %cmp2 to i32, !dbg !6988
  %7 = load %struct.VEC_vn_reference_op_s_base*, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8, !dbg !6988
  %vec = getelementptr inbounds %struct.VEC_vn_reference_op_s_base, %struct.VEC_vn_reference_op_s_base* %7, i32 0, i32 2, !dbg !6988
  %8 = load i32, i32* %ix_.addr, align 4, !dbg !6988
  %idxprom = zext i32 %8 to i64, !dbg !6988
  %arrayidx = getelementptr inbounds [1 x %struct.vn_reference_op_struct], [1 x %struct.vn_reference_op_struct]* %vec, i64 0, i64 %idxprom, !dbg !6988
  store %struct.vn_reference_op_struct* %arrayidx, %struct.vn_reference_op_struct** %slot_, align 8, !dbg !6988
  %9 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %slot_, align 8, !dbg !6988
  %add.ptr = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %9, i64 1, !dbg !6988
  %10 = bitcast %struct.vn_reference_op_struct* %add.ptr to i8*, !dbg !6988
  %11 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %slot_, align 8, !dbg !6988
  %12 = bitcast %struct.vn_reference_op_struct* %11 to i8*, !dbg !6988
  %13 = load %struct.VEC_vn_reference_op_s_base*, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8, !dbg !6988
  %num4 = getelementptr inbounds %struct.VEC_vn_reference_op_s_base, %struct.VEC_vn_reference_op_s_base* %13, i32 0, i32 0, !dbg !6988
  %14 = load i32, i32* %num4, align 8, !dbg !6988
  %inc = add i32 %14, 1, !dbg !6988
  store i32 %inc, i32* %num4, align 8, !dbg !6988
  %15 = load i32, i32* %ix_.addr, align 4, !dbg !6988
  %sub = sub i32 %14, %15, !dbg !6988
  %conv5 = zext i32 %sub to i64, !dbg !6988
  %mul = mul i64 %conv5, 40, !dbg !6988
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %12, i64 %mul, i1 false), !dbg !6988
  %16 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %obj_.addr, align 8, !dbg !6992
  %tobool = icmp ne %struct.vn_reference_op_struct* %16, null, !dbg !6992
  br i1 %tobool, label %if.then, label %if.end, !dbg !6988

if.then:                                          ; preds = %entry
  %17 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %slot_, align 8, !dbg !6992
  %18 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %obj_.addr, align 8, !dbg !6992
  %19 = bitcast %struct.vn_reference_op_struct* %17 to i8*, !dbg !6992
  %20 = bitcast %struct.vn_reference_op_struct* %18 to i8*, !dbg !6992
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* align 8 %20, i64 40, i1 false), !dbg !6992
  br label %if.end, !dbg !6992

if.end:                                           ; preds = %if.then, %entry
  %21 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %slot_, align 8, !dbg !6988
  ret %struct.vn_reference_op_struct* %21, !dbg !6988
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_vn_reference_op_s_heap_reserve_exact(%struct.VEC_vn_reference_op_s_heap** %vec_, i32 %alloc_) #0 !dbg !6994 {
entry:
  %vec_.addr = alloca %struct.VEC_vn_reference_op_s_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_vn_reference_op_s_heap** %vec_, %struct.VEC_vn_reference_op_s_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_reference_op_s_heap*** %vec_.addr, metadata !6995, metadata !DIExpression()), !dbg !6996
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6997, metadata !DIExpression()), !dbg !6996
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !6998, metadata !DIExpression()), !dbg !6996
  %0 = load %struct.VEC_vn_reference_op_s_heap**, %struct.VEC_vn_reference_op_s_heap*** %vec_.addr, align 8, !dbg !6996
  %1 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %0, align 8, !dbg !6996
  %tobool = icmp ne %struct.VEC_vn_reference_op_s_heap* %1, null, !dbg !6996
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6996

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_vn_reference_op_s_heap**, %struct.VEC_vn_reference_op_s_heap*** %vec_.addr, align 8, !dbg !6996
  %3 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %2, align 8, !dbg !6996
  %base = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %3, i32 0, i32 0, !dbg !6996
  br label %cond.end, !dbg !6996

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6996

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_vn_reference_op_s_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6996
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !6996
  %call = call i32 @VEC_vn_reference_op_s_base_space(%struct.VEC_vn_reference_op_s_base* %cond, i32 %4), !dbg !6996
  %tobool1 = icmp ne i32 %call, 0, !dbg !6996
  %lnot = xor i1 %tobool1, true, !dbg !6996
  %lnot.ext = zext i1 %lnot to i32, !dbg !6996
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !6996
  %5 = load i32, i32* %extend, align 4, !dbg !6999
  %tobool2 = icmp ne i32 %5, 0, !dbg !6999
  br i1 %tobool2, label %if.then, label %if.end, !dbg !6996

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_vn_reference_op_s_heap**, %struct.VEC_vn_reference_op_s_heap*** %vec_.addr, align 8, !dbg !6999
  %7 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %6, align 8, !dbg !6999
  %8 = bitcast %struct.VEC_vn_reference_op_s_heap* %7 to i8*, !dbg !6999
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !6999
  %call3 = call i8* @vec_heap_o_reserve_exact(i8* %8, i32 %9, i64 8, i64 40), !dbg !6999
  %10 = bitcast i8* %call3 to %struct.VEC_vn_reference_op_s_heap*, !dbg !6999
  %11 = load %struct.VEC_vn_reference_op_s_heap**, %struct.VEC_vn_reference_op_s_heap*** %vec_.addr, align 8, !dbg !6999
  store %struct.VEC_vn_reference_op_s_heap* %10, %struct.VEC_vn_reference_op_s_heap** %11, align 8, !dbg !6999
  br label %if.end, !dbg !6999

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !6996
  ret i32 %12, !dbg !6996
}

declare dso_local i8* @vec_heap_o_reserve_exact(i8*, i32, i64, i64) #2

declare dso_local %union.tree_node* @ao_ref_base(%struct.ao_ref_s*) #2

declare dso_local zeroext i8 @is_gimple_reg_type(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_call(%union.gimple_statement_d* %gs) #0 !dbg !7001 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7002, metadata !DIExpression()), !dbg !7003
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7004
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !7005
  %cmp = icmp eq i32 %call, 8, !dbg !7006
  %conv = zext i1 %cmp to i32, !dbg !7006
  %conv1 = trunc i32 %conv to i8, !dbg !7005
  ret i8 %conv1, !dbg !7007
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %gs) #0 !dbg !7008 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7009, metadata !DIExpression()), !dbg !7010
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr, metadata !7011, metadata !DIExpression()), !dbg !7012
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7013
  %call = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %0), !dbg !7014
  store %union.tree_node* %call, %union.tree_node** %addr, align 8, !dbg !7012
  %1 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !7015
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !7015
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !7015
  %bf.load = load i64, i64* %2, align 8, !dbg !7015
  %bf.clear = and i64 %bf.load, 65535, !dbg !7015
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7015
  %cmp = icmp eq i32 %bf.cast, 121, !dbg !7017
  br i1 %cmp, label %if.then, label %if.end, !dbg !7018

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !7019
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !7019
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !7019
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !7019
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7019
  store %union.tree_node* %4, %union.tree_node** %retval, align 8, !dbg !7020
  br label %return, !dbg !7020

if.end:                                           ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7021
  br label %return, !dbg !7021

return:                                           ; preds = %if.end, %if.then
  %5 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7022
  ret %union.tree_node* %5, !dbg !7022
}

declare dso_local %union.tree_node* @get_ref_base_and_extent(%union.tree_node*, i64*, i64*, i64*) #2

declare dso_local %union.tree_node* @fold_convert_loc(i32, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_vn_reference_op_s_heap* @VEC_vn_reference_op_s_heap_copy(%struct.VEC_vn_reference_op_s_base* %vec_) #0 !dbg !7023 {
entry:
  %vec_.addr = alloca %struct.VEC_vn_reference_op_s_base*, align 8
  %len_ = alloca i64, align 8
  %new_vec_ = alloca %struct.VEC_vn_reference_op_s_heap*, align 8
  store %struct.VEC_vn_reference_op_s_base* %vec_, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_reference_op_s_base** %vec_.addr, metadata !7026, metadata !DIExpression()), !dbg !7027
  call void @llvm.dbg.declare(metadata i64* %len_, metadata !7028, metadata !DIExpression()), !dbg !7027
  %0 = load %struct.VEC_vn_reference_op_s_base*, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8, !dbg !7027
  %tobool = icmp ne %struct.VEC_vn_reference_op_s_base* %0, null, !dbg !7027
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7027

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_vn_reference_op_s_base*, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8, !dbg !7027
  %num = getelementptr inbounds %struct.VEC_vn_reference_op_s_base, %struct.VEC_vn_reference_op_s_base* %1, i32 0, i32 0, !dbg !7027
  %2 = load i32, i32* %num, align 8, !dbg !7027
  br label %cond.end, !dbg !7027

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7027

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !7027
  %conv = zext i32 %cond to i64, !dbg !7027
  store i64 %conv, i64* %len_, align 8, !dbg !7027
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_reference_op_s_heap** %new_vec_, metadata !7029, metadata !DIExpression()), !dbg !7027
  store %struct.VEC_vn_reference_op_s_heap* null, %struct.VEC_vn_reference_op_s_heap** %new_vec_, align 8, !dbg !7027
  %3 = load i64, i64* %len_, align 8, !dbg !7030
  %tobool1 = icmp ne i64 %3, 0, !dbg !7030
  br i1 %tobool1, label %if.then, label %if.end, !dbg !7027

if.then:                                          ; preds = %cond.end
  %4 = load i64, i64* %len_, align 8, !dbg !7032
  %conv2 = trunc i64 %4 to i32, !dbg !7032
  %call = call i8* @vec_heap_o_reserve_exact(i8* null, i32 %conv2, i64 8, i64 40), !dbg !7032
  %5 = bitcast i8* %call to %struct.VEC_vn_reference_op_s_heap*, !dbg !7032
  store %struct.VEC_vn_reference_op_s_heap* %5, %struct.VEC_vn_reference_op_s_heap** %new_vec_, align 8, !dbg !7032
  %6 = load i64, i64* %len_, align 8, !dbg !7032
  %conv3 = trunc i64 %6 to i32, !dbg !7032
  %7 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %new_vec_, align 8, !dbg !7032
  %base = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %7, i32 0, i32 0, !dbg !7032
  %num4 = getelementptr inbounds %struct.VEC_vn_reference_op_s_base, %struct.VEC_vn_reference_op_s_base* %base, i32 0, i32 0, !dbg !7032
  store i32 %conv3, i32* %num4, align 8, !dbg !7032
  %8 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %new_vec_, align 8, !dbg !7032
  %base5 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %8, i32 0, i32 0, !dbg !7032
  %vec = getelementptr inbounds %struct.VEC_vn_reference_op_s_base, %struct.VEC_vn_reference_op_s_base* %base5, i32 0, i32 2, !dbg !7032
  %arraydecay = getelementptr inbounds [1 x %struct.vn_reference_op_struct], [1 x %struct.vn_reference_op_struct]* %vec, i64 0, i64 0, !dbg !7032
  %9 = bitcast %struct.vn_reference_op_struct* %arraydecay to i8*, !dbg !7032
  %10 = load %struct.VEC_vn_reference_op_s_base*, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8, !dbg !7032
  %vec6 = getelementptr inbounds %struct.VEC_vn_reference_op_s_base, %struct.VEC_vn_reference_op_s_base* %10, i32 0, i32 2, !dbg !7032
  %arraydecay7 = getelementptr inbounds [1 x %struct.vn_reference_op_struct], [1 x %struct.vn_reference_op_struct]* %vec6, i64 0, i64 0, !dbg !7032
  %11 = bitcast %struct.vn_reference_op_struct* %arraydecay7 to i8*, !dbg !7032
  %12 = load i64, i64* %len_, align 8, !dbg !7032
  %mul = mul i64 40, %12, !dbg !7032
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %11, i64 %mul, i1 false), !dbg !7032
  br label %if.end, !dbg !7032

if.end:                                           ; preds = %if.then, %cond.end
  %13 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %new_vec_, align 8, !dbg !7027
  ret %struct.VEC_vn_reference_op_s_heap* %13, !dbg !7027
}

declare dso_local zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_constructor_elt_base_length(%struct.VEC_constructor_elt_base* %vec_) #0 !dbg !7034 {
entry:
  %vec_.addr = alloca %struct.VEC_constructor_elt_base*, align 8
  store %struct.VEC_constructor_elt_base* %vec_, %struct.VEC_constructor_elt_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_constructor_elt_base** %vec_.addr, metadata !7039, metadata !DIExpression()), !dbg !7040
  %0 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !7040
  %tobool = icmp ne %struct.VEC_constructor_elt_base* %0, null, !dbg !7040
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7040

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !7040
  %num = getelementptr inbounds %struct.VEC_constructor_elt_base, %struct.VEC_constructor_elt_base* %1, i32 0, i32 0, !dbg !7040
  %2 = load i32, i32* %num, align 8, !dbg !7040
  br label %cond.end, !dbg !7040

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7040

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !7040
  ret i32 %cond, !dbg !7040
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %gs) #0 !dbg !7041 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7042, metadata !DIExpression()), !dbg !7043
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7044
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !7045
  ret %union.tree_node* %call, !dbg !7046
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @handled_component_p(%union.tree_node* %t) #0 !dbg !7047 {
entry:
  %retval = alloca i8, align 1
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !7048, metadata !DIExpression()), !dbg !7049
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7050
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !7050
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !7050
  %bf.load = load i64, i64* %1, align 8, !dbg !7050
  %bf.clear = and i64 %bf.load, 65535, !dbg !7050
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7050
  switch i32 %bf.cast, label %sw.default [
    i32 42, label %sw.bb
    i32 41, label %sw.bb
    i32 45, label %sw.bb
    i32 46, label %sw.bb
    i32 118, label %sw.bb
    i32 43, label %sw.bb
    i32 44, label %sw.bb
  ], !dbg !7051

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i8 1, i8* %retval, align 1, !dbg !7052
  br label %return, !dbg !7052

sw.default:                                       ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !7054
  br label %return, !dbg !7054

return:                                           ; preds = %sw.default, %sw.bb
  %2 = load i8, i8* %retval, align 1, !dbg !7055
  ret i8 %2, !dbg !7055
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #0 !dbg !7056 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !7057, metadata !DIExpression()), !dbg !7058
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7059
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !7060
  %cmp = icmp uge i32 %call, 1, !dbg !7061
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !7062

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7063
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !7064
  %cmp2 = icmp ule i32 %call1, 9, !dbg !7065
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !7066
  %land.ext = zext i1 %2 to i32, !dbg !7062
  %conv = trunc i32 %land.ext to i8, !dbg !7060
  ret i8 %conv, !dbg !7067
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #0 !dbg !7068 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %off = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7071, metadata !DIExpression()), !dbg !7072
  call void @llvm.dbg.declare(metadata i64* %off, metadata !7073, metadata !DIExpression()), !dbg !7074
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7075
  %call = call i32 @gimple_statement_structure(%union.gimple_statement_d* %0), !dbg !7076
  %idxprom = zext i32 %call to i64, !dbg !7077
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* @gimple_ops_offset_, i64 0, i64 %idxprom, !dbg !7077
  %1 = load i64, i64* %arrayidx, align 8, !dbg !7077
  store i64 %1, i64* %off, align 8, !dbg !7078
  %2 = load i64, i64* %off, align 8, !dbg !7079
  %cmp = icmp ne i64 %2, 0, !dbg !7079
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !7079

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7079
  br label %cond.end, !dbg !7079

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7079

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7079
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7080
  %4 = bitcast %union.gimple_statement_d* %3 to i8*, !dbg !7081
  %5 = load i64, i64* %off, align 8, !dbg !7082
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !7083
  %6 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !7084
  ret %union.tree_node** %6, !dbg !7085
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #0 !dbg !7086 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7089, metadata !DIExpression()), !dbg !7090
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7091
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !7092
  %call1 = call i32 @gss_for_code(i32 %call), !dbg !7093
  ret i32 %call1, !dbg !7094
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gss_for_code(i32 %code) #0 !dbg !7095 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !7098, metadata !DIExpression()), !dbg !7099
  %0 = load i32, i32* %code.addr, align 4, !dbg !7100
  %idxprom = zext i32 %0 to i64, !dbg !7101
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @gss_for_code_, i64 0, i64 %idxprom, !dbg !7101
  %1 = load i32, i32* %arrayidx, align 4, !dbg !7101
  ret i32 %1, !dbg !7102
}

declare dso_local void @free_alloc_pool(%struct.alloc_pool_def*) #2

declare dso_local void @calculate_dominance_info(i32) #2

declare dso_local %struct.htab* @htab_create(i64, i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @vn_constant_hash(i8* %p1) #0 !dbg !7103 {
entry:
  %p1.addr = alloca i8*, align 8
  %vc1 = alloca %struct.vn_constant_s*, align 8
  store i8* %p1, i8** %p1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p1.addr, metadata !7104, metadata !DIExpression()), !dbg !7105
  call void @llvm.dbg.declare(metadata %struct.vn_constant_s** %vc1, metadata !7106, metadata !DIExpression()), !dbg !7107
  %0 = load i8*, i8** %p1.addr, align 8, !dbg !7108
  %1 = bitcast i8* %0 to %struct.vn_constant_s*, !dbg !7109
  store %struct.vn_constant_s* %1, %struct.vn_constant_s** %vc1, align 8, !dbg !7107
  %2 = load %struct.vn_constant_s*, %struct.vn_constant_s** %vc1, align 8, !dbg !7110
  %hashcode = getelementptr inbounds %struct.vn_constant_s, %struct.vn_constant_s* %2, i32 0, i32 1, !dbg !7111
  %3 = load i32, i32* %hashcode, align 4, !dbg !7111
  ret i32 %3, !dbg !7112
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @vn_constant_eq(i8* %p1, i8* %p2) #0 !dbg !7113 {
entry:
  %retval = alloca i32, align 4
  %p1.addr = alloca i8*, align 8
  %p2.addr = alloca i8*, align 8
  %vc1 = alloca %struct.vn_constant_s*, align 8
  %vc2 = alloca %struct.vn_constant_s*, align 8
  store i8* %p1, i8** %p1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p1.addr, metadata !7114, metadata !DIExpression()), !dbg !7115
  store i8* %p2, i8** %p2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p2.addr, metadata !7116, metadata !DIExpression()), !dbg !7117
  call void @llvm.dbg.declare(metadata %struct.vn_constant_s** %vc1, metadata !7118, metadata !DIExpression()), !dbg !7119
  %0 = load i8*, i8** %p1.addr, align 8, !dbg !7120
  %1 = bitcast i8* %0 to %struct.vn_constant_s*, !dbg !7121
  store %struct.vn_constant_s* %1, %struct.vn_constant_s** %vc1, align 8, !dbg !7119
  call void @llvm.dbg.declare(metadata %struct.vn_constant_s** %vc2, metadata !7122, metadata !DIExpression()), !dbg !7123
  %2 = load i8*, i8** %p2.addr, align 8, !dbg !7124
  %3 = bitcast i8* %2 to %struct.vn_constant_s*, !dbg !7125
  store %struct.vn_constant_s* %3, %struct.vn_constant_s** %vc2, align 8, !dbg !7123
  %4 = load %struct.vn_constant_s*, %struct.vn_constant_s** %vc1, align 8, !dbg !7126
  %hashcode = getelementptr inbounds %struct.vn_constant_s, %struct.vn_constant_s* %4, i32 0, i32 1, !dbg !7128
  %5 = load i32, i32* %hashcode, align 4, !dbg !7128
  %6 = load %struct.vn_constant_s*, %struct.vn_constant_s** %vc2, align 8, !dbg !7129
  %hashcode1 = getelementptr inbounds %struct.vn_constant_s, %struct.vn_constant_s* %6, i32 0, i32 1, !dbg !7130
  %7 = load i32, i32* %hashcode1, align 4, !dbg !7130
  %cmp = icmp ne i32 %5, %7, !dbg !7131
  br i1 %cmp, label %if.then, label %if.end, !dbg !7132

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !7133
  br label %return, !dbg !7133

if.end:                                           ; preds = %entry
  %8 = load %struct.vn_constant_s*, %struct.vn_constant_s** %vc1, align 8, !dbg !7134
  %constant = getelementptr inbounds %struct.vn_constant_s, %struct.vn_constant_s* %8, i32 0, i32 2, !dbg !7135
  %9 = load %union.tree_node*, %union.tree_node** %constant, align 8, !dbg !7135
  %10 = load %struct.vn_constant_s*, %struct.vn_constant_s** %vc2, align 8, !dbg !7136
  %constant2 = getelementptr inbounds %struct.vn_constant_s, %struct.vn_constant_s* %10, i32 0, i32 2, !dbg !7137
  %11 = load %union.tree_node*, %union.tree_node** %constant2, align 8, !dbg !7137
  %call = call zeroext i8 @vn_constant_eq_with_type(%union.tree_node* %9, %union.tree_node* %11), !dbg !7138
  %conv = zext i8 %call to i32, !dbg !7138
  store i32 %conv, i32* %retval, align 4, !dbg !7139
  br label %return, !dbg !7139

return:                                           ; preds = %if.end, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !7140
  ret i32 %12, !dbg !7140
}

declare dso_local %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_vn_ssa_aux_t_heap* @VEC_vn_ssa_aux_t_heap_alloc(i32 %alloc_) #0 !dbg !7141 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7144, metadata !DIExpression()), !dbg !7145
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !7145
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !7145
  %1 = bitcast i8* %call to %struct.VEC_vn_ssa_aux_t_heap*, !dbg !7145
  ret %struct.VEC_vn_ssa_aux_t_heap* %1, !dbg !7145
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_vn_ssa_aux_t_heap_safe_grow_cleared(%struct.VEC_vn_ssa_aux_t_heap** %vec_, i32 %size_) #0 !dbg !7146 {
entry:
  %vec_.addr = alloca %struct.VEC_vn_ssa_aux_t_heap**, align 8
  %size_.addr = alloca i32, align 4
  %oldsize = alloca i32, align 4
  store %struct.VEC_vn_ssa_aux_t_heap** %vec_, %struct.VEC_vn_ssa_aux_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_ssa_aux_t_heap*** %vec_.addr, metadata !7147, metadata !DIExpression()), !dbg !7148
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !7149, metadata !DIExpression()), !dbg !7148
  call void @llvm.dbg.declare(metadata i32* %oldsize, metadata !7150, metadata !DIExpression()), !dbg !7148
  %0 = load %struct.VEC_vn_ssa_aux_t_heap**, %struct.VEC_vn_ssa_aux_t_heap*** %vec_.addr, align 8, !dbg !7148
  %1 = load %struct.VEC_vn_ssa_aux_t_heap*, %struct.VEC_vn_ssa_aux_t_heap** %0, align 8, !dbg !7148
  %tobool = icmp ne %struct.VEC_vn_ssa_aux_t_heap* %1, null, !dbg !7148
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7148

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_vn_ssa_aux_t_heap**, %struct.VEC_vn_ssa_aux_t_heap*** %vec_.addr, align 8, !dbg !7148
  %3 = load %struct.VEC_vn_ssa_aux_t_heap*, %struct.VEC_vn_ssa_aux_t_heap** %2, align 8, !dbg !7148
  %base = getelementptr inbounds %struct.VEC_vn_ssa_aux_t_heap, %struct.VEC_vn_ssa_aux_t_heap* %3, i32 0, i32 0, !dbg !7148
  br label %cond.end, !dbg !7148

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7148

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_vn_ssa_aux_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7148
  %call = call i32 @VEC_vn_ssa_aux_t_base_length(%struct.VEC_vn_ssa_aux_t_base* %cond), !dbg !7148
  store i32 %call, i32* %oldsize, align 4, !dbg !7148
  %4 = load %struct.VEC_vn_ssa_aux_t_heap**, %struct.VEC_vn_ssa_aux_t_heap*** %vec_.addr, align 8, !dbg !7148
  %5 = load i32, i32* %size_.addr, align 4, !dbg !7148
  call void @VEC_vn_ssa_aux_t_heap_safe_grow(%struct.VEC_vn_ssa_aux_t_heap** %4, i32 %5), !dbg !7148
  %6 = load %struct.VEC_vn_ssa_aux_t_heap**, %struct.VEC_vn_ssa_aux_t_heap*** %vec_.addr, align 8, !dbg !7148
  %7 = load %struct.VEC_vn_ssa_aux_t_heap*, %struct.VEC_vn_ssa_aux_t_heap** %6, align 8, !dbg !7148
  %tobool1 = icmp ne %struct.VEC_vn_ssa_aux_t_heap* %7, null, !dbg !7148
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !7148

cond.true2:                                       ; preds = %cond.end
  %8 = load %struct.VEC_vn_ssa_aux_t_heap**, %struct.VEC_vn_ssa_aux_t_heap*** %vec_.addr, align 8, !dbg !7148
  %9 = load %struct.VEC_vn_ssa_aux_t_heap*, %struct.VEC_vn_ssa_aux_t_heap** %8, align 8, !dbg !7148
  %base3 = getelementptr inbounds %struct.VEC_vn_ssa_aux_t_heap, %struct.VEC_vn_ssa_aux_t_heap* %9, i32 0, i32 0, !dbg !7148
  br label %cond.end5, !dbg !7148

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !7148

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_vn_ssa_aux_t_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !7148
  %call7 = call %struct.vn_ssa_aux** @VEC_vn_ssa_aux_t_base_address(%struct.VEC_vn_ssa_aux_t_base* %cond6), !dbg !7148
  %10 = load i32, i32* %oldsize, align 4, !dbg !7148
  %idxprom = sext i32 %10 to i64, !dbg !7148
  %arrayidx = getelementptr inbounds %struct.vn_ssa_aux*, %struct.vn_ssa_aux** %call7, i64 %idxprom, !dbg !7148
  %11 = bitcast %struct.vn_ssa_aux** %arrayidx to i8*, !dbg !7148
  %12 = load i32, i32* %size_.addr, align 4, !dbg !7148
  %13 = load i32, i32* %oldsize, align 4, !dbg !7148
  %sub = sub nsw i32 %12, %13, !dbg !7148
  %conv = sext i32 %sub to i64, !dbg !7148
  %mul = mul i64 8, %conv, !dbg !7148
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 %mul, i1 false), !dbg !7148
  ret void, !dbg !7148
}

declare dso_local i32 @_obstack_begin(%struct.obstack*, i32, i32, i8* (i64)*, void (i8*)*) #2

declare dso_local i8* @xcalloc(i64, i64) #2

declare dso_local i32 @pre_and_rev_post_order_compute(i32*, i32*, i8 zeroext) #2

declare dso_local %union.tree_node* @create_tmp_var_raw(%union.tree_node*, i8*) #2

declare dso_local void @renumber_gimple_stmt_uids() #2

; Function Attrs: noinline nounwind uwtable
define internal void @allocate_vn_table(%struct.vn_tables_s* %table) #0 !dbg !7151 {
entry:
  %table.addr = alloca %struct.vn_tables_s*, align 8
  store %struct.vn_tables_s* %table, %struct.vn_tables_s** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.vn_tables_s** %table.addr, metadata !7152, metadata !DIExpression()), !dbg !7153
  %call = call %struct.htab* @htab_create(i64 23, i32 (i8*)* @vn_phi_hash, i32 (i8*, i8*)* @vn_phi_eq, void (i8*)* @free_phi), !dbg !7154
  %0 = load %struct.vn_tables_s*, %struct.vn_tables_s** %table.addr, align 8, !dbg !7155
  %phis = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %0, i32 0, i32 1, !dbg !7156
  store %struct.htab* %call, %struct.htab** %phis, align 8, !dbg !7157
  %call1 = call %struct.htab* @htab_create(i64 23, i32 (i8*)* @vn_nary_op_hash, i32 (i8*, i8*)* @vn_nary_op_eq, void (i8*)* null), !dbg !7158
  %1 = load %struct.vn_tables_s*, %struct.vn_tables_s** %table.addr, align 8, !dbg !7159
  %nary = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %1, i32 0, i32 0, !dbg !7160
  store %struct.htab* %call1, %struct.htab** %nary, align 8, !dbg !7161
  %call2 = call %struct.htab* @htab_create(i64 23, i32 (i8*)* @vn_reference_hash, i32 (i8*, i8*)* @vn_reference_eq, void (i8*)* @free_reference), !dbg !7162
  %2 = load %struct.vn_tables_s*, %struct.vn_tables_s** %table.addr, align 8, !dbg !7163
  %references = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %2, i32 0, i32 2, !dbg !7164
  store %struct.htab* %call2, %struct.htab** %references, align 8, !dbg !7165
  %3 = load %struct.vn_tables_s*, %struct.vn_tables_s** %table.addr, align 8, !dbg !7166
  %nary_obstack = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %3, i32 0, i32 3, !dbg !7166
  %call3 = call i32 @_obstack_begin(%struct.obstack* %nary_obstack, i32 0, i32 0, i8* (i64)* @xmalloc, void (i8*)* @free), !dbg !7166
  %call4 = call %struct.alloc_pool_def* @create_alloc_pool(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i64 0, i64 0), i64 32, i64 30), !dbg !7167
  %4 = load %struct.vn_tables_s*, %struct.vn_tables_s** %table.addr, align 8, !dbg !7168
  %phis_pool = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %4, i32 0, i32 4, !dbg !7169
  store %struct.alloc_pool_def* %call4, %struct.alloc_pool_def** %phis_pool, align 8, !dbg !7170
  %call5 = call %struct.alloc_pool_def* @create_alloc_pool(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8, i64 0, i64 0), i64 48, i64 30), !dbg !7171
  %5 = load %struct.vn_tables_s*, %struct.vn_tables_s** %table.addr, align 8, !dbg !7172
  %references_pool = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %5, i32 0, i32 5, !dbg !7173
  store %struct.alloc_pool_def* %call5, %struct.alloc_pool_def** %references_pool, align 8, !dbg !7174
  ret void, !dbg !7175
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @vn_constant_eq_with_type(%union.tree_node* %c1, %union.tree_node* %c2) #0 !dbg !7176 {
entry:
  %c1.addr = alloca %union.tree_node*, align 8
  %c2.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %c1, %union.tree_node** %c1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %c1.addr, metadata !7177, metadata !DIExpression()), !dbg !7178
  store %union.tree_node* %c2, %union.tree_node** %c2.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %c2.addr, metadata !7179, metadata !DIExpression()), !dbg !7180
  %0 = load %union.tree_node*, %union.tree_node** %c1.addr, align 8, !dbg !7181
  %1 = load %union.tree_node*, %union.tree_node** %c2.addr, align 8, !dbg !7182
  %call = call zeroext i8 @expressions_equal_p(%union.tree_node* %0, %union.tree_node* %1), !dbg !7183
  %conv = zext i8 %call to i32, !dbg !7183
  %tobool = icmp ne i32 %conv, 0, !dbg !7183
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !7184

land.rhs:                                         ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %c1.addr, align 8, !dbg !7185
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*, !dbg !7185
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7185
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7185
  %4 = load %union.tree_node*, %union.tree_node** %c2.addr, align 8, !dbg !7186
  %common1 = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !7186
  %type2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1, i32 0, i32 2, !dbg !7186
  %5 = load %union.tree_node*, %union.tree_node** %type2, align 8, !dbg !7186
  %call3 = call zeroext i8 @types_compatible_p(%union.tree_node* %3, %union.tree_node* %5), !dbg !7187
  %conv4 = zext i8 %call3 to i32, !dbg !7187
  %tobool5 = icmp ne i32 %conv4, 0, !dbg !7184
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %tobool5, %land.rhs ], !dbg !7188
  %land.ext = zext i1 %6 to i32, !dbg !7184
  %conv6 = trunc i32 %land.ext to i8, !dbg !7189
  ret i8 %conv6, !dbg !7190
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.vn_ssa_aux** @VEC_vn_ssa_aux_t_base_address(%struct.VEC_vn_ssa_aux_t_base* %vec_) #0 !dbg !7191 {
entry:
  %vec_.addr = alloca %struct.VEC_vn_ssa_aux_t_base*, align 8
  store %struct.VEC_vn_ssa_aux_t_base* %vec_, %struct.VEC_vn_ssa_aux_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_ssa_aux_t_base** %vec_.addr, metadata !7195, metadata !DIExpression()), !dbg !7196
  %0 = load %struct.VEC_vn_ssa_aux_t_base*, %struct.VEC_vn_ssa_aux_t_base** %vec_.addr, align 8, !dbg !7196
  %tobool = icmp ne %struct.VEC_vn_ssa_aux_t_base* %0, null, !dbg !7196
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7196

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_vn_ssa_aux_t_base*, %struct.VEC_vn_ssa_aux_t_base** %vec_.addr, align 8, !dbg !7196
  %vec = getelementptr inbounds %struct.VEC_vn_ssa_aux_t_base, %struct.VEC_vn_ssa_aux_t_base* %1, i32 0, i32 2, !dbg !7196
  %arraydecay = getelementptr inbounds [1 x %struct.vn_ssa_aux*], [1 x %struct.vn_ssa_aux*]* %vec, i64 0, i64 0, !dbg !7196
  br label %cond.end, !dbg !7196

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7196

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.vn_ssa_aux** [ %arraydecay, %cond.true ], [ null, %cond.false ], !dbg !7196
  ret %struct.vn_ssa_aux** %cond, !dbg !7196
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @vn_phi_hash(i8* %p1) #0 !dbg !7197 {
entry:
  %p1.addr = alloca i8*, align 8
  %vp1 = alloca %struct.vn_phi_s*, align 8
  store i8* %p1, i8** %p1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p1.addr, metadata !7198, metadata !DIExpression()), !dbg !7199
  call void @llvm.dbg.declare(metadata %struct.vn_phi_s** %vp1, metadata !7200, metadata !DIExpression()), !dbg !7202
  %0 = load i8*, i8** %p1.addr, align 8, !dbg !7203
  %1 = bitcast i8* %0 to %struct.vn_phi_s*, !dbg !7204
  store %struct.vn_phi_s* %1, %struct.vn_phi_s** %vp1, align 8, !dbg !7202
  %2 = load %struct.vn_phi_s*, %struct.vn_phi_s** %vp1, align 8, !dbg !7205
  %hashcode = getelementptr inbounds %struct.vn_phi_s, %struct.vn_phi_s* %2, i32 0, i32 1, !dbg !7206
  %3 = load i32, i32* %hashcode, align 4, !dbg !7206
  ret i32 %3, !dbg !7207
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @vn_phi_eq(i8* %p1, i8* %p2) #0 !dbg !7208 {
entry:
  %retval = alloca i32, align 4
  %p1.addr = alloca i8*, align 8
  %p2.addr = alloca i8*, align 8
  %vp1 = alloca %struct.vn_phi_s*, align 8
  %vp2 = alloca %struct.vn_phi_s*, align 8
  %i = alloca i32, align 4
  %phi1op = alloca %union.tree_node*, align 8
  %phi2op = alloca %union.tree_node*, align 8
  store i8* %p1, i8** %p1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p1.addr, metadata !7209, metadata !DIExpression()), !dbg !7210
  store i8* %p2, i8** %p2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p2.addr, metadata !7211, metadata !DIExpression()), !dbg !7212
  call void @llvm.dbg.declare(metadata %struct.vn_phi_s** %vp1, metadata !7213, metadata !DIExpression()), !dbg !7214
  %0 = load i8*, i8** %p1.addr, align 8, !dbg !7215
  %1 = bitcast i8* %0 to %struct.vn_phi_s*, !dbg !7216
  store %struct.vn_phi_s* %1, %struct.vn_phi_s** %vp1, align 8, !dbg !7214
  call void @llvm.dbg.declare(metadata %struct.vn_phi_s** %vp2, metadata !7217, metadata !DIExpression()), !dbg !7218
  %2 = load i8*, i8** %p2.addr, align 8, !dbg !7219
  %3 = bitcast i8* %2 to %struct.vn_phi_s*, !dbg !7220
  store %struct.vn_phi_s* %3, %struct.vn_phi_s** %vp2, align 8, !dbg !7218
  %4 = load %struct.vn_phi_s*, %struct.vn_phi_s** %vp1, align 8, !dbg !7221
  %hashcode = getelementptr inbounds %struct.vn_phi_s, %struct.vn_phi_s* %4, i32 0, i32 1, !dbg !7223
  %5 = load i32, i32* %hashcode, align 4, !dbg !7223
  %6 = load %struct.vn_phi_s*, %struct.vn_phi_s** %vp2, align 8, !dbg !7224
  %hashcode1 = getelementptr inbounds %struct.vn_phi_s, %struct.vn_phi_s* %6, i32 0, i32 1, !dbg !7225
  %7 = load i32, i32* %hashcode1, align 4, !dbg !7225
  %cmp = icmp ne i32 %5, %7, !dbg !7226
  br i1 %cmp, label %if.then, label %if.end, !dbg !7227

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !7228
  br label %return, !dbg !7228

if.end:                                           ; preds = %entry
  %8 = load %struct.vn_phi_s*, %struct.vn_phi_s** %vp1, align 8, !dbg !7229
  %block = getelementptr inbounds %struct.vn_phi_s, %struct.vn_phi_s* %8, i32 0, i32 3, !dbg !7231
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %block, align 8, !dbg !7231
  %10 = load %struct.vn_phi_s*, %struct.vn_phi_s** %vp2, align 8, !dbg !7232
  %block2 = getelementptr inbounds %struct.vn_phi_s, %struct.vn_phi_s* %10, i32 0, i32 3, !dbg !7233
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %block2, align 8, !dbg !7233
  %cmp3 = icmp eq %struct.basic_block_def* %9, %11, !dbg !7234
  br i1 %cmp3, label %if.then4, label %if.end48, !dbg !7235

if.then4:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7236, metadata !DIExpression()), !dbg !7238
  call void @llvm.dbg.declare(metadata %union.tree_node** %phi1op, metadata !7239, metadata !DIExpression()), !dbg !7240
  %12 = load %struct.vn_phi_s*, %struct.vn_phi_s** %vp1, align 8, !dbg !7241
  %phiargs = getelementptr inbounds %struct.vn_phi_s, %struct.vn_phi_s* %12, i32 0, i32 2, !dbg !7241
  %13 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %phiargs, align 8, !dbg !7241
  %tobool = icmp ne %struct.VEC_tree_heap* %13, null, !dbg !7241
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7241

cond.true:                                        ; preds = %if.then4
  %14 = load %struct.vn_phi_s*, %struct.vn_phi_s** %vp1, align 8, !dbg !7241
  %phiargs5 = getelementptr inbounds %struct.vn_phi_s, %struct.vn_phi_s* %14, i32 0, i32 2, !dbg !7241
  %15 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %phiargs5, align 8, !dbg !7241
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %15, i32 0, i32 0, !dbg !7241
  br label %cond.end, !dbg !7241

cond.false:                                       ; preds = %if.then4
  br label %cond.end, !dbg !7241

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7241
  %call = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond, i32 0), !dbg !7241
  %common = bitcast %union.tree_node* %call to %struct.tree_common*, !dbg !7241
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7241
  %16 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7241
  %17 = load %struct.vn_phi_s*, %struct.vn_phi_s** %vp2, align 8, !dbg !7243
  %phiargs6 = getelementptr inbounds %struct.vn_phi_s, %struct.vn_phi_s* %17, i32 0, i32 2, !dbg !7243
  %18 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %phiargs6, align 8, !dbg !7243
  %tobool7 = icmp ne %struct.VEC_tree_heap* %18, null, !dbg !7243
  br i1 %tobool7, label %cond.true8, label %cond.false11, !dbg !7243

cond.true8:                                       ; preds = %cond.end
  %19 = load %struct.vn_phi_s*, %struct.vn_phi_s** %vp2, align 8, !dbg !7243
  %phiargs9 = getelementptr inbounds %struct.vn_phi_s, %struct.vn_phi_s* %19, i32 0, i32 2, !dbg !7243
  %20 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %phiargs9, align 8, !dbg !7243
  %base10 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %20, i32 0, i32 0, !dbg !7243
  br label %cond.end12, !dbg !7243

cond.false11:                                     ; preds = %cond.end
  br label %cond.end12, !dbg !7243

cond.end12:                                       ; preds = %cond.false11, %cond.true8
  %cond13 = phi %struct.VEC_tree_base* [ %base10, %cond.true8 ], [ null, %cond.false11 ], !dbg !7243
  %call14 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond13, i32 0), !dbg !7243
  %common15 = bitcast %union.tree_node* %call14 to %struct.tree_common*, !dbg !7243
  %type16 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common15, i32 0, i32 2, !dbg !7243
  %21 = load %union.tree_node*, %union.tree_node** %type16, align 8, !dbg !7243
  %call17 = call zeroext i8 @types_compatible_p(%union.tree_node* %16, %union.tree_node* %21), !dbg !7244
  %tobool18 = icmp ne i8 %call17, 0, !dbg !7244
  br i1 %tobool18, label %if.end20, label %if.then19, !dbg !7245

if.then19:                                        ; preds = %cond.end12
  store i32 0, i32* %retval, align 4, !dbg !7246
  br label %return, !dbg !7246

if.end20:                                         ; preds = %cond.end12
  store i32 0, i32* %i, align 4, !dbg !7247
  br label %for.cond, !dbg !7249

for.cond:                                         ; preds = %for.inc, %if.end20
  %22 = load %struct.vn_phi_s*, %struct.vn_phi_s** %vp1, align 8, !dbg !7250
  %phiargs21 = getelementptr inbounds %struct.vn_phi_s, %struct.vn_phi_s* %22, i32 0, i32 2, !dbg !7250
  %23 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %phiargs21, align 8, !dbg !7250
  %tobool22 = icmp ne %struct.VEC_tree_heap* %23, null, !dbg !7250
  br i1 %tobool22, label %cond.true23, label %cond.false26, !dbg !7250

cond.true23:                                      ; preds = %for.cond
  %24 = load %struct.vn_phi_s*, %struct.vn_phi_s** %vp1, align 8, !dbg !7250
  %phiargs24 = getelementptr inbounds %struct.vn_phi_s, %struct.vn_phi_s* %24, i32 0, i32 2, !dbg !7250
  %25 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %phiargs24, align 8, !dbg !7250
  %base25 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %25, i32 0, i32 0, !dbg !7250
  br label %cond.end27, !dbg !7250

cond.false26:                                     ; preds = %for.cond
  br label %cond.end27, !dbg !7250

cond.end27:                                       ; preds = %cond.false26, %cond.true23
  %cond28 = phi %struct.VEC_tree_base* [ %base25, %cond.true23 ], [ null, %cond.false26 ], !dbg !7250
  %26 = load i32, i32* %i, align 4, !dbg !7250
  %call29 = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond28, i32 %26, %union.tree_node** %phi1op), !dbg !7250
  %tobool30 = icmp ne i32 %call29, 0, !dbg !7252
  br i1 %tobool30, label %for.body, label %for.end, !dbg !7252

for.body:                                         ; preds = %cond.end27
  call void @llvm.dbg.declare(metadata %union.tree_node** %phi2op, metadata !7253, metadata !DIExpression()), !dbg !7255
  %27 = load %struct.vn_phi_s*, %struct.vn_phi_s** %vp2, align 8, !dbg !7256
  %phiargs31 = getelementptr inbounds %struct.vn_phi_s, %struct.vn_phi_s* %27, i32 0, i32 2, !dbg !7256
  %28 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %phiargs31, align 8, !dbg !7256
  %tobool32 = icmp ne %struct.VEC_tree_heap* %28, null, !dbg !7256
  br i1 %tobool32, label %cond.true33, label %cond.false36, !dbg !7256

cond.true33:                                      ; preds = %for.body
  %29 = load %struct.vn_phi_s*, %struct.vn_phi_s** %vp2, align 8, !dbg !7256
  %phiargs34 = getelementptr inbounds %struct.vn_phi_s, %struct.vn_phi_s* %29, i32 0, i32 2, !dbg !7256
  %30 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %phiargs34, align 8, !dbg !7256
  %base35 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %30, i32 0, i32 0, !dbg !7256
  br label %cond.end37, !dbg !7256

cond.false36:                                     ; preds = %for.body
  br label %cond.end37, !dbg !7256

cond.end37:                                       ; preds = %cond.false36, %cond.true33
  %cond38 = phi %struct.VEC_tree_base* [ %base35, %cond.true33 ], [ null, %cond.false36 ], !dbg !7256
  %31 = load i32, i32* %i, align 4, !dbg !7256
  %call39 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond38, i32 %31), !dbg !7256
  store %union.tree_node* %call39, %union.tree_node** %phi2op, align 8, !dbg !7255
  %32 = load %union.tree_node*, %union.tree_node** %phi1op, align 8, !dbg !7257
  %33 = load %union.tree_node*, %union.tree_node** @VN_TOP, align 8, !dbg !7259
  %cmp40 = icmp eq %union.tree_node* %32, %33, !dbg !7260
  br i1 %cmp40, label %if.then42, label %lor.lhs.false, !dbg !7261

lor.lhs.false:                                    ; preds = %cond.end37
  %34 = load %union.tree_node*, %union.tree_node** %phi2op, align 8, !dbg !7262
  %35 = load %union.tree_node*, %union.tree_node** @VN_TOP, align 8, !dbg !7263
  %cmp41 = icmp eq %union.tree_node* %34, %35, !dbg !7264
  br i1 %cmp41, label %if.then42, label %if.end43, !dbg !7265

if.then42:                                        ; preds = %lor.lhs.false, %cond.end37
  br label %for.inc, !dbg !7266

if.end43:                                         ; preds = %lor.lhs.false
  %36 = load %union.tree_node*, %union.tree_node** %phi1op, align 8, !dbg !7267
  %37 = load %union.tree_node*, %union.tree_node** %phi2op, align 8, !dbg !7269
  %call44 = call zeroext i8 @expressions_equal_p(%union.tree_node* %36, %union.tree_node* %37), !dbg !7270
  %tobool45 = icmp ne i8 %call44, 0, !dbg !7270
  br i1 %tobool45, label %if.end47, label %if.then46, !dbg !7271

if.then46:                                        ; preds = %if.end43
  store i32 0, i32* %retval, align 4, !dbg !7272
  br label %return, !dbg !7272

if.end47:                                         ; preds = %if.end43
  br label %for.inc, !dbg !7273

for.inc:                                          ; preds = %if.end47, %if.then42
  %38 = load i32, i32* %i, align 4, !dbg !7274
  %inc = add nsw i32 %38, 1, !dbg !7274
  store i32 %inc, i32* %i, align 4, !dbg !7274
  br label %for.cond, !dbg !7275, !llvm.loop !7276

for.end:                                          ; preds = %cond.end27
  store i32 1, i32* %retval, align 4, !dbg !7278
  br label %return, !dbg !7278

if.end48:                                         ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !7279
  br label %return, !dbg !7279

return:                                           ; preds = %if.end48, %for.end, %if.then46, %if.then19, %if.then
  %39 = load i32, i32* %retval, align 4, !dbg !7280
  ret i32 %39, !dbg !7280
}

; Function Attrs: noinline nounwind uwtable
define internal void @free_phi(i8* %vp) #0 !dbg !7281 {
entry:
  %vp.addr = alloca i8*, align 8
  %phi = alloca %struct.vn_phi_s*, align 8
  store i8* %vp, i8** %vp.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vp.addr, metadata !7282, metadata !DIExpression()), !dbg !7283
  call void @llvm.dbg.declare(metadata %struct.vn_phi_s** %phi, metadata !7284, metadata !DIExpression()), !dbg !7285
  %0 = load i8*, i8** %vp.addr, align 8, !dbg !7286
  %1 = bitcast i8* %0 to %struct.vn_phi_s*, !dbg !7287
  store %struct.vn_phi_s* %1, %struct.vn_phi_s** %phi, align 8, !dbg !7285
  %2 = load %struct.vn_phi_s*, %struct.vn_phi_s** %phi, align 8, !dbg !7288
  %phiargs = getelementptr inbounds %struct.vn_phi_s, %struct.vn_phi_s* %2, i32 0, i32 2, !dbg !7288
  call void @VEC_tree_heap_free(%struct.VEC_tree_heap** %phiargs), !dbg !7288
  ret void, !dbg !7289
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @vn_nary_op_hash(i8* %p1) #0 !dbg !7290 {
entry:
  %p1.addr = alloca i8*, align 8
  %vno1 = alloca %struct.vn_nary_op_s*, align 8
  store i8* %p1, i8** %p1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p1.addr, metadata !7291, metadata !DIExpression()), !dbg !7292
  call void @llvm.dbg.declare(metadata %struct.vn_nary_op_s** %vno1, metadata !7293, metadata !DIExpression()), !dbg !7294
  %0 = load i8*, i8** %p1.addr, align 8, !dbg !7295
  %1 = bitcast i8* %0 to %struct.vn_nary_op_s*, !dbg !7296
  store %struct.vn_nary_op_s* %1, %struct.vn_nary_op_s** %vno1, align 8, !dbg !7294
  %2 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %vno1, align 8, !dbg !7297
  %hashcode = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %2, i32 0, i32 2, !dbg !7298
  %3 = load i32, i32* %hashcode, align 8, !dbg !7298
  ret i32 %3, !dbg !7299
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @vn_reference_hash(i8* %p1) #0 !dbg !7300 {
entry:
  %p1.addr = alloca i8*, align 8
  %vr1 = alloca %struct.vn_reference_s*, align 8
  store i8* %p1, i8** %p1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p1.addr, metadata !7301, metadata !DIExpression()), !dbg !7302
  call void @llvm.dbg.declare(metadata %struct.vn_reference_s** %vr1, metadata !7303, metadata !DIExpression()), !dbg !7304
  %0 = load i8*, i8** %p1.addr, align 8, !dbg !7305
  %1 = bitcast i8* %0 to %struct.vn_reference_s*, !dbg !7306
  store %struct.vn_reference_s* %1, %struct.vn_reference_s** %vr1, align 8, !dbg !7304
  %2 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr1, align 8, !dbg !7307
  %hashcode = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %2, i32 0, i32 1, !dbg !7308
  %3 = load i32, i32* %hashcode, align 4, !dbg !7308
  ret i32 %3, !dbg !7309
}

declare dso_local %struct.alloc_pool_def* @create_alloc_pool(i8*, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %vec_, i32 %ix_, %union.tree_node** %ptr) #0 !dbg !7310 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %union.tree_node**, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !7313, metadata !DIExpression()), !dbg !7314
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !7315, metadata !DIExpression()), !dbg !7314
  store %union.tree_node** %ptr, %union.tree_node*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %ptr.addr, metadata !7316, metadata !DIExpression()), !dbg !7314
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7317
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !7317
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !7317

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !7317
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7317
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 0, !dbg !7317
  %3 = load i32, i32* %num, align 8, !dbg !7317
  %cmp = icmp ult i32 %1, %3, !dbg !7317
  br i1 %cmp, label %if.then, label %if.else, !dbg !7314

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7319
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 2, !dbg !7319
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !7319
  %idxprom = zext i32 %5 to i64, !dbg !7319
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !7319
  %6 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7319
  %7 = load %union.tree_node**, %union.tree_node*** %ptr.addr, align 8, !dbg !7319
  store %union.tree_node* %6, %union.tree_node** %7, align 8, !dbg !7319
  store i32 1, i32* %retval, align 4, !dbg !7319
  br label %return, !dbg !7319

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %union.tree_node**, %union.tree_node*** %ptr.addr, align 8, !dbg !7321
  store %union.tree_node* null, %union.tree_node** %8, align 8, !dbg !7321
  store i32 0, i32* %retval, align 4, !dbg !7321
  br label %return, !dbg !7321

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !7314
  ret i32 %9, !dbg !7314
}

declare dso_local zeroext i8 @has_zero_uses_1(%struct.ssa_use_operand_d*) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** %vec_, %union.tree_node* %obj_) #0 !dbg !7323 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  %obj_.addr = alloca %union.tree_node*, align 8
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !7326, metadata !DIExpression()), !dbg !7327
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !7328, metadata !DIExpression()), !dbg !7327
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !7327
  %call = call i32 @VEC_tree_heap_reserve(%struct.VEC_tree_heap** %0, i32 1), !dbg !7327
  %1 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !7327
  %2 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %1, align 8, !dbg !7327
  %tobool = icmp ne %struct.VEC_tree_heap* %2, null, !dbg !7327
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7327

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !7327
  %4 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %3, align 8, !dbg !7327
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %4, i32 0, i32 0, !dbg !7327
  br label %cond.end, !dbg !7327

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7327

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7327
  %5 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !7327
  %call1 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond, %union.tree_node* %5), !dbg !7327
  ret %union.tree_node** %call1, !dbg !7327
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_init_phiuse(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %phi, i32 %flags) #0 !dbg !7329 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %phi.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  %phi_def = alloca %union.tree_node*, align 8
  %comp = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !7333, metadata !DIExpression()), !dbg !7334
  store %union.gimple_statement_d* %phi, %union.gimple_statement_d** %phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi.addr, metadata !7335, metadata !DIExpression()), !dbg !7336
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !7337, metadata !DIExpression()), !dbg !7338
  call void @llvm.dbg.declare(metadata %union.tree_node** %phi_def, metadata !7339, metadata !DIExpression()), !dbg !7340
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !7341
  %call = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %0), !dbg !7342
  store %union.tree_node* %call, %union.tree_node** %phi_def, align 8, !dbg !7340
  call void @llvm.dbg.declare(metadata i32* %comp, metadata !7343, metadata !DIExpression()), !dbg !7344
  %1 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7345
  call void @clear_and_done_ssa_iter(%struct.ssa_operand_iterator_d* %1), !dbg !7346
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7347
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 0, !dbg !7348
  store i8 0, i8* %done, align 8, !dbg !7349
  %3 = load i32, i32* %flags.addr, align 4, !dbg !7350
  %and = and i32 %3, 5, !dbg !7350
  %cmp = icmp ne i32 %and, 0, !dbg !7350
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !7350

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.9, i64 0, i64 0), i32 918, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7350
  br label %cond.end, !dbg !7350

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7350

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7350
  %4 = load %union.tree_node*, %union.tree_node** %phi_def, align 8, !dbg !7351
  %call1 = call zeroext i8 @is_gimple_reg(%union.tree_node* %4), !dbg !7352
  %conv = zext i8 %call1 to i32, !dbg !7352
  %tobool = icmp ne i32 %conv, 0, !dbg !7352
  %5 = zext i1 %tobool to i64, !dbg !7352
  %cond2 = select i1 %tobool, i32 1, i32 4, !dbg !7352
  store i32 %cond2, i32* %comp, align 4, !dbg !7353
  %6 = load i32, i32* %flags.addr, align 4, !dbg !7354
  %7 = load i32, i32* %comp, align 4, !dbg !7356
  %and3 = and i32 %6, %7, !dbg !7357
  %cmp4 = icmp eq i32 %and3, 0, !dbg !7358
  br i1 %cmp4, label %if.then, label %if.end, !dbg !7359

if.then:                                          ; preds = %cond.end
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7360
  %done6 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 0, !dbg !7362
  store i8 1, i8* %done6, align 8, !dbg !7363
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !7364
  br label %return, !dbg !7364

if.end:                                           ; preds = %cond.end
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !7365
  %10 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7366
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %10, i32 0, i32 6, !dbg !7367
  store %union.gimple_statement_d* %9, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !7368
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !7369
  %call7 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %11), !dbg !7370
  %12 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7371
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %12, i32 0, i32 5, !dbg !7372
  store i32 %call7, i32* %num_phi, align 4, !dbg !7373
  %13 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7374
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %13, i32 0, i32 1, !dbg !7375
  store i32 2, i32* %iter_type, align 4, !dbg !7376
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7377
  %call8 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %14), !dbg !7378
  store %struct.ssa_use_operand_d* %call8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !7379
  br label %return, !dbg !7379

return:                                           ; preds = %if.end, %if.then
  %15 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !7380
  ret %struct.ssa_use_operand_d* %15, !dbg !7380
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !7381 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !7382, metadata !DIExpression()), !dbg !7383
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7384, metadata !DIExpression()), !dbg !7385
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !7386, metadata !DIExpression()), !dbg !7387
  %0 = load i32, i32* %flags.addr, align 4, !dbg !7388
  %and = and i32 %0, 10, !dbg !7388
  %cmp = icmp eq i32 %and, 0, !dbg !7388
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !7388

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !7388
  %and1 = and i32 %1, 1, !dbg !7388
  %tobool = icmp ne i32 %and1, 0, !dbg !7388
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !7388

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.9, i64 0, i64 0), i32 771, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7388
  br label %cond.end, !dbg !7388

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !7388

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7388
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7389
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7390
  %4 = load i32, i32* %flags.addr, align 4, !dbg !7391
  call void @op_iter_init(%struct.ssa_operand_iterator_d* %2, %union.gimple_statement_d* %3, i32 %4), !dbg !7392
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7393
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 1, !dbg !7394
  store i32 2, i32* %iter_type, align 4, !dbg !7395
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7396
  %call = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %6), !dbg !7397
  ret %struct.ssa_use_operand_d* %call, !dbg !7398
}

; Function Attrs: noinline nounwind uwtable
define internal void @clear_and_done_ssa_iter(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !7399 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !7402, metadata !DIExpression()), !dbg !7403
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7404
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 2, !dbg !7405
  store %struct.def_optype_d* null, %struct.def_optype_d** %defs, align 8, !dbg !7406
  %1 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7407
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %1, i32 0, i32 3, !dbg !7408
  store %struct.use_optype_d* null, %struct.use_optype_d** %uses, align 8, !dbg !7409
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7410
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 1, !dbg !7411
  store i32 0, i32* %iter_type, align 4, !dbg !7412
  %3 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7413
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %3, i32 0, i32 4, !dbg !7414
  store i32 0, i32* %phi_i, align 8, !dbg !7415
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7416
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 5, !dbg !7417
  store i32 0, i32* %num_phi, align 4, !dbg !7418
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7419
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 6, !dbg !7420
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !7421
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7422
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %6, i32 0, i32 0, !dbg !7423
  store i8 1, i8* %done, align 8, !dbg !7424
  ret void, !dbg !7425
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !7426 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !7431, metadata !DIExpression()), !dbg !7432
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7433
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 0, !dbg !7434
  %1 = load i8, i8* %done, align 8, !dbg !7434
  ret i8 %1, !dbg !7435
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @extract_and_process_scc_for_name(%union.tree_node* %name) #0 !dbg !7436 {
entry:
  %retval = alloca i8, align 1
  %name.addr = alloca %union.tree_node*, align 8
  %scc = alloca %struct.VEC_tree_heap*, align 8
  %x = alloca %union.tree_node*, align 8
  store %union.tree_node* %name, %union.tree_node** %name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %name.addr, metadata !7437, metadata !DIExpression()), !dbg !7438
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %scc, metadata !7439, metadata !DIExpression()), !dbg !7440
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** %scc, align 8, !dbg !7440
  call void @llvm.dbg.declare(metadata %union.tree_node** %x, metadata !7441, metadata !DIExpression()), !dbg !7442
  br label %do.body, !dbg !7443

do.body:                                          ; preds = %do.cond, %entry
  %0 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @sccstack, align 8, !dbg !7444
  %tobool = icmp ne %struct.VEC_tree_heap* %0, null, !dbg !7444
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7444

cond.true:                                        ; preds = %do.body
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @sccstack, align 8, !dbg !7444
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %1, i32 0, i32 0, !dbg !7444
  br label %cond.end, !dbg !7444

cond.false:                                       ; preds = %do.body
  br label %cond.end, !dbg !7444

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7444
  %call = call %union.tree_node* @VEC_tree_base_pop(%struct.VEC_tree_base* %cond), !dbg !7444
  store %union.tree_node* %call, %union.tree_node** %x, align 8, !dbg !7446
  %2 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !7447
  %call1 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %2), !dbg !7448
  %on_sccstack = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call1, i32 0, i32 5, !dbg !7449
  %bf.load = load i8, i8* %on_sccstack, align 4, !dbg !7450
  %bf.clear = and i8 %bf.load, -3, !dbg !7450
  store i8 %bf.clear, i8* %on_sccstack, align 4, !dbg !7450
  %3 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !7451
  %call2 = call %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** %scc, %union.tree_node* %3), !dbg !7451
  br label %do.cond, !dbg !7452

do.cond:                                          ; preds = %cond.end
  %4 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !7453
  %5 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !7454
  %cmp = icmp ne %union.tree_node* %4, %5, !dbg !7455
  br i1 %cmp, label %do.body, label %do.end, !dbg !7452, !llvm.loop !7456

do.end:                                           ; preds = %do.cond
  %6 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %scc, align 8, !dbg !7458
  %tobool3 = icmp ne %struct.VEC_tree_heap* %6, null, !dbg !7458
  br i1 %tobool3, label %cond.true4, label %cond.false6, !dbg !7458

cond.true4:                                       ; preds = %do.end
  %7 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %scc, align 8, !dbg !7458
  %base5 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %7, i32 0, i32 0, !dbg !7458
  br label %cond.end7, !dbg !7458

cond.false6:                                      ; preds = %do.end
  br label %cond.end7, !dbg !7458

cond.end7:                                        ; preds = %cond.false6, %cond.true4
  %cond8 = phi %struct.VEC_tree_base* [ %base5, %cond.true4 ], [ null, %cond.false6 ], !dbg !7458
  %call9 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond8), !dbg !7458
  %8 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !7460
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %8, i64 104, !dbg !7460
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !7460
  %9 = load i32, i32* %value, align 8, !dbg !7460
  %cmp10 = icmp ugt i32 %call9, %9, !dbg !7461
  br i1 %cmp10, label %if.then, label %if.end23, !dbg !7462

if.then:                                          ; preds = %cond.end7
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7463
  %tobool11 = icmp ne %struct._IO_FILE* %10, null, !dbg !7463
  br i1 %tobool11, label %if.then12, label %if.end, !dbg !7466

if.then12:                                        ; preds = %if.then
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7467
  %12 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %scc, align 8, !dbg !7468
  %tobool13 = icmp ne %struct.VEC_tree_heap* %12, null, !dbg !7468
  br i1 %tobool13, label %cond.true14, label %cond.false16, !dbg !7468

cond.true14:                                      ; preds = %if.then12
  %13 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %scc, align 8, !dbg !7468
  %base15 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %13, i32 0, i32 0, !dbg !7468
  br label %cond.end17, !dbg !7468

cond.false16:                                     ; preds = %if.then12
  br label %cond.end17, !dbg !7468

cond.end17:                                       ; preds = %cond.false16, %cond.true14
  %cond18 = phi %struct.VEC_tree_base* [ %base15, %cond.true14 ], [ null, %cond.false16 ], !dbg !7468
  %call19 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond18), !dbg !7468
  %14 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !7469
  %arrayidx20 = getelementptr inbounds %struct.param_info, %struct.param_info* %14, i64 104, !dbg !7469
  %value21 = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx20, i32 0, i32 1, !dbg !7469
  %15 = load i32, i32* %value21, align 8, !dbg !7469
  %call22 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.10, i64 0, i64 0), i32 %call19, i32 %15), !dbg !7470
  br label %if.end, !dbg !7470

if.end:                                           ; preds = %cond.end17, %if.then
  store i8 0, i8* %retval, align 1, !dbg !7471
  br label %return, !dbg !7471

if.end23:                                         ; preds = %cond.end7
  %16 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %scc, align 8, !dbg !7472
  %tobool24 = icmp ne %struct.VEC_tree_heap* %16, null, !dbg !7472
  br i1 %tobool24, label %cond.true25, label %cond.false27, !dbg !7472

cond.true25:                                      ; preds = %if.end23
  %17 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %scc, align 8, !dbg !7472
  %base26 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %17, i32 0, i32 0, !dbg !7472
  br label %cond.end28, !dbg !7472

cond.false27:                                     ; preds = %if.end23
  br label %cond.end28, !dbg !7472

cond.end28:                                       ; preds = %cond.false27, %cond.true25
  %cond29 = phi %struct.VEC_tree_base* [ %base26, %cond.true25 ], [ null, %cond.false27 ], !dbg !7472
  %call30 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond29), !dbg !7472
  %cmp31 = icmp ugt i32 %call30, 1, !dbg !7474
  br i1 %cmp31, label %if.then32, label %if.end33, !dbg !7475

if.then32:                                        ; preds = %cond.end28
  %18 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %scc, align 8, !dbg !7476
  call void @sort_scc(%struct.VEC_tree_heap* %18), !dbg !7477
  br label %if.end33, !dbg !7477

if.end33:                                         ; preds = %if.then32, %cond.end28
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7478
  %tobool34 = icmp ne %struct._IO_FILE* %19, null, !dbg !7478
  br i1 %tobool34, label %land.lhs.true, label %if.end37, !dbg !7480

land.lhs.true:                                    ; preds = %if.end33
  %20 = load i32, i32* @dump_flags, align 4, !dbg !7481
  %and = and i32 %20, 8, !dbg !7482
  %tobool35 = icmp ne i32 %and, 0, !dbg !7482
  br i1 %tobool35, label %if.then36, label %if.end37, !dbg !7483

if.then36:                                        ; preds = %land.lhs.true
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7484
  %22 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %scc, align 8, !dbg !7485
  call void @print_scc(%struct._IO_FILE* %21, %struct.VEC_tree_heap* %22), !dbg !7486
  br label %if.end37, !dbg !7486

if.end37:                                         ; preds = %if.then36, %land.lhs.true, %if.end33
  %23 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %scc, align 8, !dbg !7487
  call void @process_scc(%struct.VEC_tree_heap* %23), !dbg !7488
  call void @VEC_tree_heap_free(%struct.VEC_tree_heap** %scc), !dbg !7489
  store i8 1, i8* %retval, align 1, !dbg !7490
  br label %return, !dbg !7490

return:                                           ; preds = %if.end37, %if.end
  %24 = load i8, i8* %retval, align 1, !dbg !7491
  ret i8 %24, !dbg !7491
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_ssa_op_iter_heap_free(%struct.VEC_ssa_op_iter_heap** %vec_) #0 !dbg !7492 {
entry:
  %vec_.addr = alloca %struct.VEC_ssa_op_iter_heap**, align 8
  store %struct.VEC_ssa_op_iter_heap** %vec_, %struct.VEC_ssa_op_iter_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ssa_op_iter_heap*** %vec_.addr, metadata !7496, metadata !DIExpression()), !dbg !7497
  %0 = load %struct.VEC_ssa_op_iter_heap**, %struct.VEC_ssa_op_iter_heap*** %vec_.addr, align 8, !dbg !7498
  %1 = load %struct.VEC_ssa_op_iter_heap*, %struct.VEC_ssa_op_iter_heap** %0, align 8, !dbg !7498
  %tobool = icmp ne %struct.VEC_ssa_op_iter_heap* %1, null, !dbg !7498
  br i1 %tobool, label %if.then, label %if.end, !dbg !7497

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_ssa_op_iter_heap**, %struct.VEC_ssa_op_iter_heap*** %vec_.addr, align 8, !dbg !7498
  %3 = load %struct.VEC_ssa_op_iter_heap*, %struct.VEC_ssa_op_iter_heap** %2, align 8, !dbg !7498
  %4 = bitcast %struct.VEC_ssa_op_iter_heap* %3 to i8*, !dbg !7498
  call void @free(i8* %4), !dbg !7498
  br label %if.end, !dbg !7498

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_ssa_op_iter_heap**, %struct.VEC_ssa_op_iter_heap*** %vec_.addr, align 8, !dbg !7497
  store %struct.VEC_ssa_op_iter_heap* null, %struct.VEC_ssa_op_iter_heap** %5, align 8, !dbg !7497
  ret void, !dbg !7497
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @VEC_tree_base_pop(%struct.VEC_tree_base* %vec_) #0 !dbg !7500 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %obj_ = alloca %union.tree_node*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !7504, metadata !DIExpression()), !dbg !7505
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_, metadata !7506, metadata !DIExpression()), !dbg !7505
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7505
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %0, i32 0, i32 0, !dbg !7505
  %1 = load i32, i32* %num, align 8, !dbg !7505
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7505
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 2, !dbg !7505
  %3 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7505
  %num1 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %3, i32 0, i32 0, !dbg !7505
  %4 = load i32, i32* %num1, align 8, !dbg !7505
  %dec = add i32 %4, -1, !dbg !7505
  store i32 %dec, i32* %num1, align 8, !dbg !7505
  %idxprom = zext i32 %dec to i64, !dbg !7505
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !7505
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7505
  store %union.tree_node* %5, %union.tree_node** %obj_, align 8, !dbg !7505
  %6 = load %union.tree_node*, %union.tree_node** %obj_, align 8, !dbg !7505
  ret %union.tree_node* %6, !dbg !7505
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_operand_iterator_d* @VEC_ssa_op_iter_base_last(%struct.VEC_ssa_op_iter_base* %vec_) #0 !dbg !7507 {
entry:
  %vec_.addr = alloca %struct.VEC_ssa_op_iter_base*, align 8
  store %struct.VEC_ssa_op_iter_base* %vec_, %struct.VEC_ssa_op_iter_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ssa_op_iter_base** %vec_.addr, metadata !7511, metadata !DIExpression()), !dbg !7512
  %0 = load %struct.VEC_ssa_op_iter_base*, %struct.VEC_ssa_op_iter_base** %vec_.addr, align 8, !dbg !7512
  %tobool = icmp ne %struct.VEC_ssa_op_iter_base* %0, null, !dbg !7512
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !7512

land.rhs:                                         ; preds = %entry
  %1 = load %struct.VEC_ssa_op_iter_base*, %struct.VEC_ssa_op_iter_base** %vec_.addr, align 8, !dbg !7512
  %num = getelementptr inbounds %struct.VEC_ssa_op_iter_base, %struct.VEC_ssa_op_iter_base* %1, i32 0, i32 0, !dbg !7512
  %2 = load i32, i32* %num, align 8, !dbg !7512
  %tobool1 = icmp ne i32 %2, 0, !dbg !7512
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %3 = phi i1 [ false, %entry ], [ %tobool1, %land.rhs ], !dbg !7513
  %land.ext = zext i1 %3 to i32, !dbg !7512
  %4 = load %struct.VEC_ssa_op_iter_base*, %struct.VEC_ssa_op_iter_base** %vec_.addr, align 8, !dbg !7512
  %vec = getelementptr inbounds %struct.VEC_ssa_op_iter_base, %struct.VEC_ssa_op_iter_base* %4, i32 0, i32 2, !dbg !7512
  %5 = load %struct.VEC_ssa_op_iter_base*, %struct.VEC_ssa_op_iter_base** %vec_.addr, align 8, !dbg !7512
  %num2 = getelementptr inbounds %struct.VEC_ssa_op_iter_base, %struct.VEC_ssa_op_iter_base* %5, i32 0, i32 0, !dbg !7512
  %6 = load i32, i32* %num2, align 8, !dbg !7512
  %sub = sub i32 %6, 1, !dbg !7512
  %idxprom = zext i32 %sub to i64, !dbg !7512
  %arrayidx = getelementptr inbounds [1 x %struct.ssa_operand_iterator_d], [1 x %struct.ssa_operand_iterator_d]* %vec, i64 0, i64 %idxprom, !dbg !7512
  ret %struct.ssa_operand_iterator_d* %arrayidx, !dbg !7512
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_ssa_op_iter_base_pop(%struct.VEC_ssa_op_iter_base* %vec_) #0 !dbg !7514 {
entry:
  %vec_.addr = alloca %struct.VEC_ssa_op_iter_base*, align 8
  store %struct.VEC_ssa_op_iter_base* %vec_, %struct.VEC_ssa_op_iter_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ssa_op_iter_base** %vec_.addr, metadata !7517, metadata !DIExpression()), !dbg !7518
  %0 = load %struct.VEC_ssa_op_iter_base*, %struct.VEC_ssa_op_iter_base** %vec_.addr, align 8, !dbg !7518
  %num = getelementptr inbounds %struct.VEC_ssa_op_iter_base, %struct.VEC_ssa_op_iter_base* %0, i32 0, i32 0, !dbg !7518
  %1 = load i32, i32* %num, align 8, !dbg !7518
  %2 = load %struct.VEC_ssa_op_iter_base*, %struct.VEC_ssa_op_iter_base** %vec_.addr, align 8, !dbg !7518
  %num1 = getelementptr inbounds %struct.VEC_ssa_op_iter_base, %struct.VEC_ssa_op_iter_base* %2, i32 0, i32 0, !dbg !7518
  %3 = load i32, i32* %num1, align 8, !dbg !7518
  %dec = add i32 %3, -1, !dbg !7518
  store i32 %dec, i32* %num1, align 8, !dbg !7518
  ret void, !dbg !7518
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use) #0 !dbg !7519 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !7522, metadata !DIExpression()), !dbg !7523
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !7524
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 3, !dbg !7525
  %1 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !7525
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !7526
  ret %union.tree_node* %2, !dbg !7527
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_operand_iterator_d* @VEC_ssa_op_iter_heap_safe_push(%struct.VEC_ssa_op_iter_heap** %vec_, %struct.ssa_operand_iterator_d* %obj_) #0 !dbg !7528 {
entry:
  %vec_.addr = alloca %struct.VEC_ssa_op_iter_heap**, align 8
  %obj_.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.VEC_ssa_op_iter_heap** %vec_, %struct.VEC_ssa_op_iter_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ssa_op_iter_heap*** %vec_.addr, metadata !7531, metadata !DIExpression()), !dbg !7532
  store %struct.ssa_operand_iterator_d* %obj_, %struct.ssa_operand_iterator_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %obj_.addr, metadata !7533, metadata !DIExpression()), !dbg !7532
  %0 = load %struct.VEC_ssa_op_iter_heap**, %struct.VEC_ssa_op_iter_heap*** %vec_.addr, align 8, !dbg !7532
  %call = call i32 @VEC_ssa_op_iter_heap_reserve(%struct.VEC_ssa_op_iter_heap** %0, i32 1), !dbg !7532
  %1 = load %struct.VEC_ssa_op_iter_heap**, %struct.VEC_ssa_op_iter_heap*** %vec_.addr, align 8, !dbg !7532
  %2 = load %struct.VEC_ssa_op_iter_heap*, %struct.VEC_ssa_op_iter_heap** %1, align 8, !dbg !7532
  %tobool = icmp ne %struct.VEC_ssa_op_iter_heap* %2, null, !dbg !7532
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7532

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_ssa_op_iter_heap**, %struct.VEC_ssa_op_iter_heap*** %vec_.addr, align 8, !dbg !7532
  %4 = load %struct.VEC_ssa_op_iter_heap*, %struct.VEC_ssa_op_iter_heap** %3, align 8, !dbg !7532
  %base = getelementptr inbounds %struct.VEC_ssa_op_iter_heap, %struct.VEC_ssa_op_iter_heap* %4, i32 0, i32 0, !dbg !7532
  br label %cond.end, !dbg !7532

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7532

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ssa_op_iter_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7532
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %obj_.addr, align 8, !dbg !7532
  %call1 = call %struct.ssa_operand_iterator_d* @VEC_ssa_op_iter_base_quick_push(%struct.VEC_ssa_op_iter_base* %cond, %struct.ssa_operand_iterator_d* %5), !dbg !7532
  ret %struct.ssa_operand_iterator_d* %call1, !dbg !7532
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !7534 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !7537, metadata !DIExpression()), !dbg !7538
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !7539, metadata !DIExpression()), !dbg !7540
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7541
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 3, !dbg !7543
  %1 = load %struct.use_optype_d*, %struct.use_optype_d** %uses, align 8, !dbg !7543
  %tobool = icmp ne %struct.use_optype_d* %1, null, !dbg !7541
  br i1 %tobool, label %if.then, label %if.end, !dbg !7544

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7545
  %uses1 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 3, !dbg !7545
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %uses1, align 8, !dbg !7545
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %3, i32 0, i32 1, !dbg !7545
  store %struct.ssa_use_operand_d* %use_ptr, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7547
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7548
  %uses2 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 3, !dbg !7549
  %5 = load %struct.use_optype_d*, %struct.use_optype_d** %uses2, align 8, !dbg !7549
  %next = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %5, i32 0, i32 0, !dbg !7550
  %6 = load %struct.use_optype_d*, %struct.use_optype_d** %next, align 8, !dbg !7550
  %7 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7551
  %uses3 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %7, i32 0, i32 3, !dbg !7552
  store %struct.use_optype_d* %6, %struct.use_optype_d** %uses3, align 8, !dbg !7553
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7554
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !7555
  br label %return, !dbg !7555

if.end:                                           ; preds = %entry
  %9 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7556
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %9, i32 0, i32 4, !dbg !7558
  %10 = load i32, i32* %phi_i, align 8, !dbg !7558
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7559
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 5, !dbg !7560
  %12 = load i32, i32* %num_phi, align 4, !dbg !7560
  %cmp = icmp slt i32 %10, %12, !dbg !7561
  br i1 %cmp, label %if.then4, label %if.end6, !dbg !7562

if.then4:                                         ; preds = %if.end
  %13 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7563
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %13, i32 0, i32 6, !dbg !7563
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !7563
  %15 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7563
  %phi_i5 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %15, i32 0, i32 4, !dbg !7563
  %16 = load i32, i32* %phi_i5, align 8, !dbg !7563
  %inc = add nsw i32 %16, 1, !dbg !7563
  store i32 %inc, i32* %phi_i5, align 8, !dbg !7563
  %call = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %14, i32 %16), !dbg !7563
  store %struct.ssa_use_operand_d* %call, %struct.ssa_use_operand_d** %retval, align 8, !dbg !7565
  br label %return, !dbg !7565

if.end6:                                          ; preds = %if.end
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7566
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 0, !dbg !7567
  store i8 1, i8* %done, align 8, !dbg !7568
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !7569
  br label %return, !dbg !7569

return:                                           ; preds = %if.end6, %if.then4, %if.then
  %18 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !7570
  ret %struct.ssa_use_operand_d* %18, !dbg !7570
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_heap_reserve(%struct.VEC_tree_heap** %vec_, i32 %alloc_) #0 !dbg !7571 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !7574, metadata !DIExpression()), !dbg !7575
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7576, metadata !DIExpression()), !dbg !7575
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !7577, metadata !DIExpression()), !dbg !7575
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !7575
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %0, align 8, !dbg !7575
  %tobool = icmp ne %struct.VEC_tree_heap* %1, null, !dbg !7575
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7575

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !7575
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %2, align 8, !dbg !7575
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %3, i32 0, i32 0, !dbg !7575
  br label %cond.end, !dbg !7575

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7575

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7575
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !7575
  %call = call i32 @VEC_tree_base_space(%struct.VEC_tree_base* %cond, i32 %4), !dbg !7575
  %tobool1 = icmp ne i32 %call, 0, !dbg !7575
  %lnot = xor i1 %tobool1, true, !dbg !7575
  %lnot.ext = zext i1 %lnot to i32, !dbg !7575
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !7575
  %5 = load i32, i32* %extend, align 4, !dbg !7578
  %tobool2 = icmp ne i32 %5, 0, !dbg !7578
  br i1 %tobool2, label %if.then, label %if.end, !dbg !7575

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !7578
  %7 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %6, align 8, !dbg !7578
  %8 = bitcast %struct.VEC_tree_heap* %7 to i8*, !dbg !7578
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !7578
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !7578
  %10 = bitcast i8* %call3 to %struct.VEC_tree_heap*, !dbg !7578
  %11 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !7578
  store %struct.VEC_tree_heap* %10, %struct.VEC_tree_heap** %11, align 8, !dbg !7578
  br label %if.end, !dbg !7578

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !7575
  ret i32 %12, !dbg !7575
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %vec_, %union.tree_node* %obj_) #0 !dbg !7580 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %obj_.addr = alloca %union.tree_node*, align 8
  %slot_ = alloca %union.tree_node**, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !7583, metadata !DIExpression()), !dbg !7584
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !7585, metadata !DIExpression()), !dbg !7584
  call void @llvm.dbg.declare(metadata %union.tree_node*** %slot_, metadata !7586, metadata !DIExpression()), !dbg !7584
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7584
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %0, i32 0, i32 0, !dbg !7584
  %1 = load i32, i32* %num, align 8, !dbg !7584
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7584
  %alloc = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 1, !dbg !7584
  %3 = load i32, i32* %alloc, align 4, !dbg !7584
  %cmp = icmp ult i32 %1, %3, !dbg !7584
  %conv = zext i1 %cmp to i32, !dbg !7584
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7584
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 2, !dbg !7584
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7584
  %num1 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 0, !dbg !7584
  %6 = load i32, i32* %num1, align 8, !dbg !7584
  %inc = add i32 %6, 1, !dbg !7584
  store i32 %inc, i32* %num1, align 8, !dbg !7584
  %idxprom = zext i32 %6 to i64, !dbg !7584
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !7584
  store %union.tree_node** %arrayidx, %union.tree_node*** %slot_, align 8, !dbg !7584
  %7 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !7584
  %8 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !7584
  store %union.tree_node* %7, %union.tree_node** %8, align 8, !dbg !7584
  %9 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !7584
  ret %union.tree_node** %9, !dbg !7584
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_space(%struct.VEC_tree_base* %vec_, i32 %alloc_) #0 !dbg !7587 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !7590, metadata !DIExpression()), !dbg !7591
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7592, metadata !DIExpression()), !dbg !7591
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !7591
  %cmp = icmp sge i32 %0, 0, !dbg !7591
  %conv = zext i1 %cmp to i32, !dbg !7591
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7591
  %tobool = icmp ne %struct.VEC_tree_base* %1, null, !dbg !7591
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7591

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7591
  %alloc = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 1, !dbg !7591
  %3 = load i32, i32* %alloc, align 4, !dbg !7591
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7591
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 0, !dbg !7591
  %5 = load i32, i32* %num, align 8, !dbg !7591
  %sub = sub i32 %3, %5, !dbg !7591
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !7591
  %cmp1 = icmp uge i32 %sub, %6, !dbg !7591
  %conv2 = zext i1 %cmp1 to i32, !dbg !7591
  br label %cond.end, !dbg !7591

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !7591
  %tobool3 = icmp ne i32 %7, 0, !dbg !7591
  %lnot = xor i1 %tobool3, true, !dbg !7591
  %lnot.ext = zext i1 %lnot to i32, !dbg !7591
  br label %cond.end, !dbg !7591

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !7591
  ret i32 %cond, !dbg !7591
}

declare dso_local i8* @vec_heap_p_reserve(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %gs) #0 !dbg !7593 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7594, metadata !DIExpression()), !dbg !7595
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7596
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !7597
  %result = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 3, !dbg !7598
  %1 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !7598
  ret %union.tree_node* %1, !dbg !7599
}

declare dso_local zeroext i8 @is_gimple_reg(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_phi_num_args(%union.gimple_statement_d* %gs) #0 !dbg !7600 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7601, metadata !DIExpression()), !dbg !7602
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7603
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !7604
  %nargs = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 2, !dbg !7605
  %1 = load i32, i32* %nargs, align 4, !dbg !7605
  ret i32 %1, !dbg !7606
}

; Function Attrs: noinline nounwind uwtable
define internal void @op_iter_init(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !7607 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !7610, metadata !DIExpression()), !dbg !7611
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7612, metadata !DIExpression()), !dbg !7613
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !7614, metadata !DIExpression()), !dbg !7615
  %0 = load i32, i32* %flags.addr, align 4, !dbg !7616
  %and = and i32 %0, 8, !dbg !7616
  %tobool = icmp ne i32 %and, 0, !dbg !7616
  br i1 %tobool, label %lor.lhs.false, label %land.lhs.true, !dbg !7616

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !7616
  %and1 = and i32 %1, 2, !dbg !7616
  %tobool2 = icmp ne i32 %and1, 0, !dbg !7616
  br i1 %tobool2, label %land.lhs.true, label %cond.true, !dbg !7616

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %2 = load i32, i32* %flags.addr, align 4, !dbg !7616
  %and3 = and i32 %2, 4, !dbg !7616
  %tobool4 = icmp ne i32 %and3, 0, !dbg !7616
  br i1 %tobool4, label %lor.lhs.false5, label %cond.false, !dbg !7616

lor.lhs.false5:                                   ; preds = %land.lhs.true
  %3 = load i32, i32* %flags.addr, align 4, !dbg !7616
  %and6 = and i32 %3, 1, !dbg !7616
  %tobool7 = icmp ne i32 %and6, 0, !dbg !7616
  br i1 %tobool7, label %cond.false, label %cond.true, !dbg !7616

cond.true:                                        ; preds = %lor.lhs.false5, %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.9, i64 0, i64 0), i32 747, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7616
  br label %cond.end, !dbg !7616

cond.false:                                       ; preds = %lor.lhs.false5, %land.lhs.true
  br label %cond.end, !dbg !7616

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7616
  %4 = load i32, i32* %flags.addr, align 4, !dbg !7617
  %and8 = and i32 %4, 10, !dbg !7618
  %tobool9 = icmp ne i32 %and8, 0, !dbg !7618
  br i1 %tobool9, label %cond.true10, label %cond.false11, !dbg !7619

cond.true10:                                      ; preds = %cond.end
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7620
  %call = call %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %5), !dbg !7621
  br label %cond.end12, !dbg !7619

cond.false11:                                     ; preds = %cond.end
  br label %cond.end12, !dbg !7619

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond13 = phi %struct.def_optype_d* [ %call, %cond.true10 ], [ null, %cond.false11 ], !dbg !7619
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7622
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %6, i32 0, i32 2, !dbg !7623
  store %struct.def_optype_d* %cond13, %struct.def_optype_d** %defs, align 8, !dbg !7624
  %7 = load i32, i32* %flags.addr, align 4, !dbg !7625
  %and14 = and i32 %7, 8, !dbg !7627
  %tobool15 = icmp ne i32 %and14, 0, !dbg !7627
  br i1 %tobool15, label %if.end, label %land.lhs.true16, !dbg !7628

land.lhs.true16:                                  ; preds = %cond.end12
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7629
  %defs17 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 2, !dbg !7630
  %9 = load %struct.def_optype_d*, %struct.def_optype_d** %defs17, align 8, !dbg !7630
  %tobool18 = icmp ne %struct.def_optype_d* %9, null, !dbg !7629
  br i1 %tobool18, label %land.lhs.true19, label %if.end, !dbg !7631

land.lhs.true19:                                  ; preds = %land.lhs.true16
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7632
  %call20 = call %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %10), !dbg !7633
  %cmp = icmp ne %union.tree_node* %call20, null, !dbg !7634
  br i1 %cmp, label %if.then, label %if.end, !dbg !7635

if.then:                                          ; preds = %land.lhs.true19
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7636
  %defs21 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 2, !dbg !7637
  %12 = load %struct.def_optype_d*, %struct.def_optype_d** %defs21, align 8, !dbg !7637
  %next = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %12, i32 0, i32 0, !dbg !7638
  %13 = load %struct.def_optype_d*, %struct.def_optype_d** %next, align 8, !dbg !7638
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7639
  %defs22 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %14, i32 0, i32 2, !dbg !7640
  store %struct.def_optype_d* %13, %struct.def_optype_d** %defs22, align 8, !dbg !7641
  br label %if.end, !dbg !7639

if.end:                                           ; preds = %if.then, %land.lhs.true19, %land.lhs.true16, %cond.end12
  %15 = load i32, i32* %flags.addr, align 4, !dbg !7642
  %and23 = and i32 %15, 5, !dbg !7643
  %tobool24 = icmp ne i32 %and23, 0, !dbg !7643
  br i1 %tobool24, label %cond.true25, label %cond.false27, !dbg !7644

cond.true25:                                      ; preds = %if.end
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7645
  %call26 = call %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %16), !dbg !7646
  br label %cond.end28, !dbg !7644

cond.false27:                                     ; preds = %if.end
  br label %cond.end28, !dbg !7644

cond.end28:                                       ; preds = %cond.false27, %cond.true25
  %cond29 = phi %struct.use_optype_d* [ %call26, %cond.true25 ], [ null, %cond.false27 ], !dbg !7644
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7647
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 3, !dbg !7648
  store %struct.use_optype_d* %cond29, %struct.use_optype_d** %uses, align 8, !dbg !7649
  %18 = load i32, i32* %flags.addr, align 4, !dbg !7650
  %and30 = and i32 %18, 4, !dbg !7652
  %tobool31 = icmp ne i32 %and30, 0, !dbg !7652
  br i1 %tobool31, label %if.end42, label %land.lhs.true32, !dbg !7653

land.lhs.true32:                                  ; preds = %cond.end28
  %19 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7654
  %uses33 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %19, i32 0, i32 3, !dbg !7655
  %20 = load %struct.use_optype_d*, %struct.use_optype_d** %uses33, align 8, !dbg !7655
  %tobool34 = icmp ne %struct.use_optype_d* %20, null, !dbg !7654
  br i1 %tobool34, label %land.lhs.true35, label %if.end42, !dbg !7656

land.lhs.true35:                                  ; preds = %land.lhs.true32
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7657
  %call36 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %21), !dbg !7658
  %cmp37 = icmp ne %union.tree_node* %call36, null, !dbg !7659
  br i1 %cmp37, label %if.then38, label %if.end42, !dbg !7660

if.then38:                                        ; preds = %land.lhs.true35
  %22 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7661
  %uses39 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %22, i32 0, i32 3, !dbg !7662
  %23 = load %struct.use_optype_d*, %struct.use_optype_d** %uses39, align 8, !dbg !7662
  %next40 = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %23, i32 0, i32 0, !dbg !7663
  %24 = load %struct.use_optype_d*, %struct.use_optype_d** %next40, align 8, !dbg !7663
  %25 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7664
  %uses41 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %25, i32 0, i32 3, !dbg !7665
  store %struct.use_optype_d* %24, %struct.use_optype_d** %uses41, align 8, !dbg !7666
  br label %if.end42, !dbg !7664

if.end42:                                         ; preds = %if.then38, %land.lhs.true35, %land.lhs.true32, %cond.end28
  %26 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7667
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %26, i32 0, i32 0, !dbg !7668
  store i8 0, i8* %done, align 8, !dbg !7669
  %27 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7670
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %27, i32 0, i32 4, !dbg !7671
  store i32 0, i32* %phi_i, align 8, !dbg !7672
  %28 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7673
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %28, i32 0, i32 5, !dbg !7674
  store i32 0, i32* %num_phi, align 4, !dbg !7675
  %29 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7676
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %29, i32 0, i32 6, !dbg !7677
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !7678
  ret void, !dbg !7679
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %g) #0 !dbg !7680 {
entry:
  %retval = alloca %struct.def_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !7683, metadata !DIExpression()), !dbg !7684
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7685
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !7687
  %tobool = icmp ne i8 %call, 0, !dbg !7687
  br i1 %tobool, label %if.end, label %if.then, !dbg !7688

if.then:                                          ; preds = %entry
  store %struct.def_optype_d* null, %struct.def_optype_d** %retval, align 8, !dbg !7689
  br label %return, !dbg !7689

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7690
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !7691
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !7692
  %def_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 1, !dbg !7693
  %2 = load %struct.def_optype_d*, %struct.def_optype_d** %def_ops, align 8, !dbg !7693
  store %struct.def_optype_d* %2, %struct.def_optype_d** %retval, align 8, !dbg !7694
  br label %return, !dbg !7694

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.def_optype_d*, %struct.def_optype_d** %retval, align 8, !dbg !7695
  ret %struct.def_optype_d* %3, !dbg !7695
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %g) #0 !dbg !7696 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !7697, metadata !DIExpression()), !dbg !7698
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7699
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !7701
  %tobool = icmp ne i8 %call, 0, !dbg !7701
  br i1 %tobool, label %if.end, label %if.then, !dbg !7702

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7703
  br label %return, !dbg !7703

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7704
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !7705
  %vdef = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 1, !dbg !7706
  %2 = load %union.tree_node*, %union.tree_node** %vdef, align 8, !dbg !7706
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !7707
  br label %return, !dbg !7707

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7708
  ret %union.tree_node* %3, !dbg !7708
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %g) #0 !dbg !7709 {
entry:
  %retval = alloca %struct.use_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !7712, metadata !DIExpression()), !dbg !7713
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7714
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !7716
  %tobool = icmp ne i8 %call, 0, !dbg !7716
  br i1 %tobool, label %if.end, label %if.then, !dbg !7717

if.then:                                          ; preds = %entry
  store %struct.use_optype_d* null, %struct.use_optype_d** %retval, align 8, !dbg !7718
  br label %return, !dbg !7718

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7719
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !7720
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !7721
  %use_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 2, !dbg !7722
  %2 = load %struct.use_optype_d*, %struct.use_optype_d** %use_ops, align 8, !dbg !7722
  store %struct.use_optype_d* %2, %struct.use_optype_d** %retval, align 8, !dbg !7723
  br label %return, !dbg !7723

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %retval, align 8, !dbg !7724
  ret %struct.use_optype_d* %3, !dbg !7724
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %g) #0 !dbg !7725 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !7726, metadata !DIExpression()), !dbg !7727
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7728
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !7730
  %tobool = icmp ne i8 %call, 0, !dbg !7730
  br i1 %tobool, label %if.end, label %if.then, !dbg !7731

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7732
  br label %return, !dbg !7732

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7733
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !7734
  %vuse = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 2, !dbg !7735
  %2 = load %union.tree_node*, %union.tree_node** %vuse, align 8, !dbg !7735
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !7736
  br label %return, !dbg !7736

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7737
  ret %union.tree_node* %3, !dbg !7737
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) #0 !dbg !7738 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !7739, metadata !DIExpression()), !dbg !7740
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7741
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !7742
  %cmp = icmp uge i32 %call, 6, !dbg !7743
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !7744

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7745
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !7746
  %cmp2 = icmp ule i32 %call1, 9, !dbg !7747
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !7748
  %land.ext = zext i1 %2 to i32, !dbg !7744
  %conv = trunc i32 %land.ext to i8, !dbg !7742
  ret i8 %conv, !dbg !7749
}

; Function Attrs: noinline nounwind uwtable
define internal void @sort_scc(%struct.VEC_tree_heap* %scc) #0 !dbg !7750 {
entry:
  %scc.addr = alloca %struct.VEC_tree_heap*, align 8
  store %struct.VEC_tree_heap* %scc, %struct.VEC_tree_heap** %scc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %scc.addr, metadata !7753, metadata !DIExpression()), !dbg !7754
  %0 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %scc.addr, align 8, !dbg !7755
  %tobool = icmp ne %struct.VEC_tree_heap* %0, null, !dbg !7755
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7755

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %scc.addr, align 8, !dbg !7755
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %1, i32 0, i32 0, !dbg !7755
  br label %cond.end, !dbg !7755

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7755

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7755
  %call = call %union.tree_node** @VEC_tree_base_address(%struct.VEC_tree_base* %cond), !dbg !7755
  %2 = bitcast %union.tree_node** %call to i8*, !dbg !7755
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %scc.addr, align 8, !dbg !7756
  %tobool1 = icmp ne %struct.VEC_tree_heap* %3, null, !dbg !7756
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !7756

cond.true2:                                       ; preds = %cond.end
  %4 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %scc.addr, align 8, !dbg !7756
  %base3 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %4, i32 0, i32 0, !dbg !7756
  br label %cond.end5, !dbg !7756

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !7756

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_tree_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !7756
  %call7 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond6), !dbg !7756
  %conv = zext i32 %call7 to i64, !dbg !7756
  call void @spec_qsort(i8* %2, i64 %conv, i64 8, i32 (i8*, i8*)* @compare_ops), !dbg !7757
  ret void, !dbg !7758
}

; Function Attrs: noinline nounwind uwtable
define internal void @print_scc(%struct._IO_FILE* %out, %struct.VEC_tree_heap* %scc) #0 !dbg !7759 {
entry:
  %out.addr = alloca %struct._IO_FILE*, align 8
  %scc.addr = alloca %struct.VEC_tree_heap*, align 8
  %var = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  store %struct._IO_FILE* %out, %struct._IO_FILE** %out.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %out.addr, metadata !7812, metadata !DIExpression()), !dbg !7813
  store %struct.VEC_tree_heap* %scc, %struct.VEC_tree_heap** %scc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %scc.addr, metadata !7814, metadata !DIExpression()), !dbg !7815
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !7816, metadata !DIExpression()), !dbg !7817
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7818, metadata !DIExpression()), !dbg !7819
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %out.addr, align 8, !dbg !7820
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.11, i64 0, i64 0)), !dbg !7821
  store i32 0, i32* %i, align 4, !dbg !7822
  br label %for.cond, !dbg !7824

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %scc.addr, align 8, !dbg !7825
  %tobool = icmp ne %struct.VEC_tree_heap* %1, null, !dbg !7825
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7825

cond.true:                                        ; preds = %for.cond
  %2 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %scc.addr, align 8, !dbg !7825
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %2, i32 0, i32 0, !dbg !7825
  br label %cond.end, !dbg !7825

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !7825

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7825
  %3 = load i32, i32* %i, align 4, !dbg !7825
  %call1 = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond, i32 %3, %union.tree_node** %var), !dbg !7825
  %tobool2 = icmp ne i32 %call1, 0, !dbg !7827
  br i1 %tobool2, label %for.body, label %for.end, !dbg !7827

for.body:                                         ; preds = %cond.end
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %out.addr, align 8, !dbg !7828
  %5 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7830
  call void @print_generic_expr(%struct._IO_FILE* %4, %union.tree_node* %5, i32 0), !dbg !7831
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %out.addr, align 8, !dbg !7832
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0)), !dbg !7833
  br label %for.inc, !dbg !7834

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4, !dbg !7835
  %inc = add i32 %7, 1, !dbg !7835
  store i32 %inc, i32* %i, align 4, !dbg !7835
  br label %for.cond, !dbg !7836, !llvm.loop !7837

for.end:                                          ; preds = %cond.end
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %out.addr, align 8, !dbg !7839
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !7840
  ret void, !dbg !7841
}

; Function Attrs: noinline nounwind uwtable
define internal void @process_scc(%struct.VEC_tree_heap* %scc) #0 !dbg !7842 {
entry:
  %scc.addr = alloca %struct.VEC_tree_heap*, align 8
  %use = alloca %union.tree_node*, align 8
  %var = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %iterations = alloca i32, align 4
  %changed = alloca i8, align 1
  store %struct.VEC_tree_heap* %scc, %struct.VEC_tree_heap** %scc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %scc.addr, metadata !7843, metadata !DIExpression()), !dbg !7844
  %0 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %scc.addr, align 8, !dbg !7845
  %tobool = icmp ne %struct.VEC_tree_heap* %0, null, !dbg !7845
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7845

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %scc.addr, align 8, !dbg !7845
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %1, i32 0, i32 0, !dbg !7845
  br label %cond.end, !dbg !7845

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7845

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7845
  %call = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !7845
  %cmp = icmp eq i32 %call, 1, !dbg !7847
  br i1 %cmp, label %if.then, label %if.else, !dbg !7848

if.then:                                          ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %use, metadata !7849, metadata !DIExpression()), !dbg !7851
  %2 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %scc.addr, align 8, !dbg !7852
  %tobool1 = icmp ne %struct.VEC_tree_heap* %2, null, !dbg !7852
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !7852

cond.true2:                                       ; preds = %if.then
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %scc.addr, align 8, !dbg !7852
  %base3 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %3, i32 0, i32 0, !dbg !7852
  br label %cond.end5, !dbg !7852

cond.false4:                                      ; preds = %if.then
  br label %cond.end5, !dbg !7852

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_tree_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !7852
  %call7 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond6, i32 0), !dbg !7852
  store %union.tree_node* %call7, %union.tree_node** %use, align 8, !dbg !7851
  %4 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !7853
  %call8 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %4), !dbg !7855
  %use_processed = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call8, i32 0, i32 5, !dbg !7856
  %bf.load = load i8, i8* %use_processed, align 4, !dbg !7856
  %bf.lshr = lshr i8 %bf.load, 3, !dbg !7856
  %bf.clear = and i8 %bf.lshr, 1, !dbg !7856
  %bf.cast = zext i8 %bf.clear to i32, !dbg !7856
  %tobool9 = icmp ne i32 %bf.cast, 0, !dbg !7855
  br i1 %tobool9, label %if.end, label %if.then10, !dbg !7857

if.then10:                                        ; preds = %cond.end5
  %5 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !7858
  %call11 = call zeroext i8 @visit_use(%union.tree_node* %5), !dbg !7859
  br label %if.end, !dbg !7859

if.end:                                           ; preds = %if.then10, %cond.end5
  br label %if.end73, !dbg !7860

if.else:                                          ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !7861, metadata !DIExpression()), !dbg !7863
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7864, metadata !DIExpression()), !dbg !7865
  call void @llvm.dbg.declare(metadata i32* %iterations, metadata !7866, metadata !DIExpression()), !dbg !7867
  store i32 0, i32* %iterations, align 4, !dbg !7867
  call void @llvm.dbg.declare(metadata i8* %changed, metadata !7868, metadata !DIExpression()), !dbg !7869
  store i8 1, i8* %changed, align 1, !dbg !7869
  %6 = load %struct.vn_tables_s*, %struct.vn_tables_s** @optimistic_info, align 8, !dbg !7870
  store %struct.vn_tables_s* %6, %struct.vn_tables_s** @current_info, align 8, !dbg !7871
  br label %while.cond, !dbg !7872

while.cond:                                       ; preds = %for.end68, %if.else
  %7 = load i8, i8* %changed, align 1, !dbg !7873
  %tobool12 = icmp ne i8 %7, 0, !dbg !7872
  br i1 %tobool12, label %while.body, label %while.end, !dbg !7872

while.body:                                       ; preds = %while.cond
  store i8 0, i8* %changed, align 1, !dbg !7874
  %8 = load i32, i32* %iterations, align 4, !dbg !7876
  %inc = add i32 %8, 1, !dbg !7876
  store i32 %inc, i32* %iterations, align 4, !dbg !7876
  %9 = load %struct.vn_tables_s*, %struct.vn_tables_s** @optimistic_info, align 8, !dbg !7877
  %nary = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %9, i32 0, i32 0, !dbg !7878
  %10 = load %struct.htab*, %struct.htab** %nary, align 8, !dbg !7878
  call void @htab_empty(%struct.htab* %10), !dbg !7879
  %11 = load %struct.vn_tables_s*, %struct.vn_tables_s** @optimistic_info, align 8, !dbg !7880
  %phis = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %11, i32 0, i32 1, !dbg !7881
  %12 = load %struct.htab*, %struct.htab** %phis, align 8, !dbg !7881
  call void @htab_empty(%struct.htab* %12), !dbg !7882
  %13 = load %struct.vn_tables_s*, %struct.vn_tables_s** @optimistic_info, align 8, !dbg !7883
  %references = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %13, i32 0, i32 2, !dbg !7884
  %14 = load %struct.htab*, %struct.htab** %references, align 8, !dbg !7884
  call void @htab_empty(%struct.htab* %14), !dbg !7885
  %15 = load %struct.vn_tables_s*, %struct.vn_tables_s** @optimistic_info, align 8, !dbg !7886
  %nary_obstack = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %15, i32 0, i32 3, !dbg !7886
  %chunk = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack, i32 0, i32 1, !dbg !7886
  %16 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8, !dbg !7886
  %17 = bitcast %struct._obstack_chunk* %16 to i8*, !dbg !7886
  %sub.ptr.rhs.cast = ptrtoint i8* %17 to i64, !dbg !7886
  %sub.ptr.sub = sub i64 0, %sub.ptr.rhs.cast, !dbg !7886
  %18 = load %struct.vn_tables_s*, %struct.vn_tables_s** @optimistic_info, align 8, !dbg !7886
  %nary_obstack13 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %18, i32 0, i32 3, !dbg !7886
  %temp = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack13, i32 0, i32 5, !dbg !7886
  store i64 %sub.ptr.sub, i64* %temp, align 8, !dbg !7886
  %19 = load %struct.vn_tables_s*, %struct.vn_tables_s** @optimistic_info, align 8, !dbg !7886
  %nary_obstack14 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %19, i32 0, i32 3, !dbg !7886
  %temp15 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack14, i32 0, i32 5, !dbg !7886
  %20 = load i64, i64* %temp15, align 8, !dbg !7886
  %cmp16 = icmp sgt i64 %20, 0, !dbg !7886
  br i1 %cmp16, label %land.lhs.true, label %cond.false32, !dbg !7886

land.lhs.true:                                    ; preds = %while.body
  %21 = load %struct.vn_tables_s*, %struct.vn_tables_s** @optimistic_info, align 8, !dbg !7886
  %nary_obstack17 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %21, i32 0, i32 3, !dbg !7886
  %temp18 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack17, i32 0, i32 5, !dbg !7886
  %22 = load i64, i64* %temp18, align 8, !dbg !7886
  %23 = load %struct.vn_tables_s*, %struct.vn_tables_s** @optimistic_info, align 8, !dbg !7886
  %nary_obstack19 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %23, i32 0, i32 3, !dbg !7886
  %chunk_limit = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack19, i32 0, i32 4, !dbg !7886
  %24 = load i8*, i8** %chunk_limit, align 8, !dbg !7886
  %25 = load %struct.vn_tables_s*, %struct.vn_tables_s** @optimistic_info, align 8, !dbg !7886
  %nary_obstack20 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %25, i32 0, i32 3, !dbg !7886
  %chunk21 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack20, i32 0, i32 1, !dbg !7886
  %26 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk21, align 8, !dbg !7886
  %27 = bitcast %struct._obstack_chunk* %26 to i8*, !dbg !7886
  %sub.ptr.lhs.cast = ptrtoint i8* %24 to i64, !dbg !7886
  %sub.ptr.rhs.cast22 = ptrtoint i8* %27 to i64, !dbg !7886
  %sub.ptr.sub23 = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast22, !dbg !7886
  %cmp24 = icmp slt i64 %22, %sub.ptr.sub23, !dbg !7886
  br i1 %cmp24, label %cond.true25, label %cond.false32, !dbg !7886

cond.true25:                                      ; preds = %land.lhs.true
  %28 = load %struct.vn_tables_s*, %struct.vn_tables_s** @optimistic_info, align 8, !dbg !7886
  %nary_obstack26 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %28, i32 0, i32 3, !dbg !7886
  %temp27 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack26, i32 0, i32 5, !dbg !7886
  %29 = load i64, i64* %temp27, align 8, !dbg !7886
  %30 = load %struct.vn_tables_s*, %struct.vn_tables_s** @optimistic_info, align 8, !dbg !7886
  %nary_obstack28 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %30, i32 0, i32 3, !dbg !7886
  %chunk29 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack28, i32 0, i32 1, !dbg !7886
  %31 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk29, align 8, !dbg !7886
  %32 = bitcast %struct._obstack_chunk* %31 to i8*, !dbg !7886
  %add.ptr = getelementptr inbounds i8, i8* %32, i64 %29, !dbg !7886
  %33 = load %struct.vn_tables_s*, %struct.vn_tables_s** @optimistic_info, align 8, !dbg !7886
  %nary_obstack30 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %33, i32 0, i32 3, !dbg !7886
  %object_base = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack30, i32 0, i32 2, !dbg !7886
  store i8* %add.ptr, i8** %object_base, align 8, !dbg !7886
  %34 = load %struct.vn_tables_s*, %struct.vn_tables_s** @optimistic_info, align 8, !dbg !7886
  %nary_obstack31 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %34, i32 0, i32 3, !dbg !7886
  %next_free = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack31, i32 0, i32 3, !dbg !7886
  store i8* %add.ptr, i8** %next_free, align 8, !dbg !7886
  %35 = ptrtoint i8* %add.ptr to i64, !dbg !7886
  br label %cond.end39, !dbg !7886

cond.false32:                                     ; preds = %land.lhs.true, %while.body
  %36 = load %struct.vn_tables_s*, %struct.vn_tables_s** @optimistic_info, align 8, !dbg !7886
  %nary_obstack33 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %36, i32 0, i32 3, !dbg !7886
  %37 = load %struct.vn_tables_s*, %struct.vn_tables_s** @optimistic_info, align 8, !dbg !7886
  %nary_obstack34 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %37, i32 0, i32 3, !dbg !7886
  %temp35 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack34, i32 0, i32 5, !dbg !7886
  %38 = load i64, i64* %temp35, align 8, !dbg !7886
  %39 = load %struct.vn_tables_s*, %struct.vn_tables_s** @optimistic_info, align 8, !dbg !7886
  %nary_obstack36 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %39, i32 0, i32 3, !dbg !7886
  %chunk37 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack36, i32 0, i32 1, !dbg !7886
  %40 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk37, align 8, !dbg !7886
  %41 = bitcast %struct._obstack_chunk* %40 to i8*, !dbg !7886
  %add.ptr38 = getelementptr inbounds i8, i8* %41, i64 %38, !dbg !7886
  call void @obstack_free(%struct.obstack* %nary_obstack33, i8* %add.ptr38), !dbg !7886
  br label %cond.end39, !dbg !7886

cond.end39:                                       ; preds = %cond.false32, %cond.true25
  %cond40 = phi i64 [ %35, %cond.true25 ], [ 0, %cond.false32 ], !dbg !7886
  %42 = load %struct.vn_tables_s*, %struct.vn_tables_s** @optimistic_info, align 8, !dbg !7887
  %nary_obstack41 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %42, i32 0, i32 3, !dbg !7887
  %call42 = call i32 @_obstack_begin(%struct.obstack* %nary_obstack41, i32 0, i32 0, i8* (i64)* @xmalloc, void (i8*)* @free), !dbg !7887
  %43 = load %struct.vn_tables_s*, %struct.vn_tables_s** @optimistic_info, align 8, !dbg !7888
  %phis_pool = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %43, i32 0, i32 4, !dbg !7889
  %44 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** %phis_pool, align 8, !dbg !7889
  call void @empty_alloc_pool(%struct.alloc_pool_def* %44), !dbg !7890
  %45 = load %struct.vn_tables_s*, %struct.vn_tables_s** @optimistic_info, align 8, !dbg !7891
  %references_pool = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %45, i32 0, i32 5, !dbg !7892
  %46 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** %references_pool, align 8, !dbg !7892
  call void @empty_alloc_pool(%struct.alloc_pool_def* %46), !dbg !7893
  store i32 0, i32* %i, align 4, !dbg !7894
  br label %for.cond, !dbg !7896

for.cond:                                         ; preds = %for.inc, %cond.end39
  %47 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %scc.addr, align 8, !dbg !7897
  %tobool43 = icmp ne %struct.VEC_tree_heap* %47, null, !dbg !7897
  br i1 %tobool43, label %cond.true44, label %cond.false46, !dbg !7897

cond.true44:                                      ; preds = %for.cond
  %48 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %scc.addr, align 8, !dbg !7897
  %base45 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %48, i32 0, i32 0, !dbg !7897
  br label %cond.end47, !dbg !7897

cond.false46:                                     ; preds = %for.cond
  br label %cond.end47, !dbg !7897

cond.end47:                                       ; preds = %cond.false46, %cond.true44
  %cond48 = phi %struct.VEC_tree_base* [ %base45, %cond.true44 ], [ null, %cond.false46 ], !dbg !7897
  %49 = load i32, i32* %i, align 4, !dbg !7897
  %call49 = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond48, i32 %49, %union.tree_node** %var), !dbg !7897
  %tobool50 = icmp ne i32 %call49, 0, !dbg !7899
  br i1 %tobool50, label %for.body, label %for.end, !dbg !7899

for.body:                                         ; preds = %cond.end47
  %50 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7900
  %call51 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %50), !dbg !7901
  %expr = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call51, i32 0, i32 1, !dbg !7902
  store %union.tree_node* null, %union.tree_node** %expr, align 8, !dbg !7903
  br label %for.inc, !dbg !7901

for.inc:                                          ; preds = %for.body
  %51 = load i32, i32* %i, align 4, !dbg !7904
  %inc52 = add i32 %51, 1, !dbg !7904
  store i32 %inc52, i32* %i, align 4, !dbg !7904
  br label %for.cond, !dbg !7905, !llvm.loop !7906

for.end:                                          ; preds = %cond.end47
  store i32 0, i32* %i, align 4, !dbg !7908
  br label %for.cond53, !dbg !7910

for.cond53:                                       ; preds = %for.inc66, %for.end
  %52 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %scc.addr, align 8, !dbg !7911
  %tobool54 = icmp ne %struct.VEC_tree_heap* %52, null, !dbg !7911
  br i1 %tobool54, label %cond.true55, label %cond.false57, !dbg !7911

cond.true55:                                      ; preds = %for.cond53
  %53 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %scc.addr, align 8, !dbg !7911
  %base56 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %53, i32 0, i32 0, !dbg !7911
  br label %cond.end58, !dbg !7911

cond.false57:                                     ; preds = %for.cond53
  br label %cond.end58, !dbg !7911

cond.end58:                                       ; preds = %cond.false57, %cond.true55
  %cond59 = phi %struct.VEC_tree_base* [ %base56, %cond.true55 ], [ null, %cond.false57 ], !dbg !7911
  %54 = load i32, i32* %i, align 4, !dbg !7911
  %call60 = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond59, i32 %54, %union.tree_node** %var), !dbg !7911
  %tobool61 = icmp ne i32 %call60, 0, !dbg !7913
  br i1 %tobool61, label %for.body62, label %for.end68, !dbg !7913

for.body62:                                       ; preds = %cond.end58
  %55 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7914
  %call63 = call zeroext i8 @visit_use(%union.tree_node* %55), !dbg !7915
  %conv = zext i8 %call63 to i32, !dbg !7915
  %56 = load i8, i8* %changed, align 1, !dbg !7916
  %conv64 = zext i8 %56 to i32, !dbg !7916
  %or = or i32 %conv64, %conv, !dbg !7916
  %conv65 = trunc i32 %or to i8, !dbg !7916
  store i8 %conv65, i8* %changed, align 1, !dbg !7916
  br label %for.inc66, !dbg !7917

for.inc66:                                        ; preds = %for.body62
  %57 = load i32, i32* %i, align 4, !dbg !7918
  %inc67 = add i32 %57, 1, !dbg !7918
  store i32 %inc67, i32* %i, align 4, !dbg !7918
  br label %for.cond53, !dbg !7919, !llvm.loop !7920

for.end68:                                        ; preds = %cond.end58
  br label %while.cond, !dbg !7872, !llvm.loop !7922

while.end:                                        ; preds = %while.cond
  %58 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7924
  %add.ptr69 = getelementptr inbounds %struct.function, %struct.function* %58, i64 0, !dbg !7924
  %59 = load i32, i32* %iterations, align 4, !dbg !7925
  call void @statistics_histogram_event(%struct.function* %add.ptr69, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.13, i64 0, i64 0), i32 %59), !dbg !7926
  %60 = load %struct.vn_tables_s*, %struct.vn_tables_s** @valid_info, align 8, !dbg !7927
  store %struct.vn_tables_s* %60, %struct.vn_tables_s** @current_info, align 8, !dbg !7928
  %61 = load %struct.vn_tables_s*, %struct.vn_tables_s** @optimistic_info, align 8, !dbg !7929
  %nary70 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %61, i32 0, i32 0, !dbg !7930
  %62 = load %struct.htab*, %struct.htab** %nary70, align 8, !dbg !7930
  call void @htab_traverse(%struct.htab* %62, i32 (i8**, i8*)* @copy_nary, i8* null), !dbg !7931
  %63 = load %struct.vn_tables_s*, %struct.vn_tables_s** @optimistic_info, align 8, !dbg !7932
  %phis71 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %63, i32 0, i32 1, !dbg !7933
  %64 = load %struct.htab*, %struct.htab** %phis71, align 8, !dbg !7933
  call void @htab_traverse(%struct.htab* %64, i32 (i8**, i8*)* @copy_phis, i8* null), !dbg !7934
  %65 = load %struct.vn_tables_s*, %struct.vn_tables_s** @optimistic_info, align 8, !dbg !7935
  %references72 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %65, i32 0, i32 2, !dbg !7936
  %66 = load %struct.htab*, %struct.htab** %references72, align 8, !dbg !7936
  call void @htab_traverse(%struct.htab* %66, i32 (i8**, i8*)* @copy_references, i8* null), !dbg !7937
  br label %if.end73

if.end73:                                         ; preds = %while.end, %if.end
  ret void, !dbg !7938
}

declare dso_local void @spec_qsort(i8*, i64, i64, i32 (i8*, i8*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_base_address(%struct.VEC_tree_base* %vec_) #0 !dbg !7939 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !7942, metadata !DIExpression()), !dbg !7943
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7943
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !7943
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7943

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7943
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %1, i32 0, i32 2, !dbg !7943
  %arraydecay = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 0, !dbg !7943
  br label %cond.end, !dbg !7943

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7943

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node** [ %arraydecay, %cond.true ], [ null, %cond.false ], !dbg !7943
  ret %union.tree_node** %cond, !dbg !7943
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @compare_ops(i8* %pa, i8* %pb) #0 !dbg !7944 {
entry:
  %retval = alloca i32, align 4
  %pa.addr = alloca i8*, align 8
  %pb.addr = alloca i8*, align 8
  %opa = alloca %union.tree_node*, align 8
  %opb = alloca %union.tree_node*, align 8
  %opstmta = alloca %union.gimple_statement_d*, align 8
  %opstmtb = alloca %union.gimple_statement_d*, align 8
  %bba = alloca %struct.basic_block_def*, align 8
  %bbb = alloca %struct.basic_block_def*, align 8
  store i8* %pa, i8** %pa.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pa.addr, metadata !7945, metadata !DIExpression()), !dbg !7946
  store i8* %pb, i8** %pb.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pb.addr, metadata !7947, metadata !DIExpression()), !dbg !7948
  call void @llvm.dbg.declare(metadata %union.tree_node** %opa, metadata !7949, metadata !DIExpression()), !dbg !7950
  %0 = load i8*, i8** %pa.addr, align 8, !dbg !7951
  %1 = bitcast i8* %0 to %union.tree_node**, !dbg !7952
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !7953
  store %union.tree_node* %2, %union.tree_node** %opa, align 8, !dbg !7950
  call void @llvm.dbg.declare(metadata %union.tree_node** %opb, metadata !7954, metadata !DIExpression()), !dbg !7955
  %3 = load i8*, i8** %pb.addr, align 8, !dbg !7956
  %4 = bitcast i8* %3 to %union.tree_node**, !dbg !7957
  %5 = load %union.tree_node*, %union.tree_node** %4, align 8, !dbg !7958
  store %union.tree_node* %5, %union.tree_node** %opb, align 8, !dbg !7955
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %opstmta, metadata !7959, metadata !DIExpression()), !dbg !7960
  %6 = load %union.tree_node*, %union.tree_node** %opa, align 8, !dbg !7961
  %ssa_name = bitcast %union.tree_node* %6 to %struct.tree_ssa_name*, !dbg !7961
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !7961
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7961
  store %union.gimple_statement_d* %7, %union.gimple_statement_d** %opstmta, align 8, !dbg !7960
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %opstmtb, metadata !7962, metadata !DIExpression()), !dbg !7963
  %8 = load %union.tree_node*, %union.tree_node** %opb, align 8, !dbg !7964
  %ssa_name1 = bitcast %union.tree_node* %8 to %struct.tree_ssa_name*, !dbg !7964
  %def_stmt2 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name1, i32 0, i32 2, !dbg !7964
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt2, align 8, !dbg !7964
  store %union.gimple_statement_d* %9, %union.gimple_statement_d** %opstmtb, align 8, !dbg !7963
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bba, metadata !7965, metadata !DIExpression()), !dbg !7966
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bbb, metadata !7967, metadata !DIExpression()), !dbg !7968
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %opstmta, align 8, !dbg !7969
  %call = call zeroext i8 @gimple_nop_p(%union.gimple_statement_d* %10), !dbg !7971
  %conv = zext i8 %call to i32, !dbg !7971
  %tobool = icmp ne i32 %conv, 0, !dbg !7971
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !7972

land.lhs.true:                                    ; preds = %entry
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %opstmtb, align 8, !dbg !7973
  %call3 = call zeroext i8 @gimple_nop_p(%union.gimple_statement_d* %11), !dbg !7974
  %conv4 = zext i8 %call3 to i32, !dbg !7974
  %tobool5 = icmp ne i32 %conv4, 0, !dbg !7974
  br i1 %tobool5, label %if.then, label %if.else, !dbg !7975

if.then:                                          ; preds = %land.lhs.true
  %12 = load %union.tree_node*, %union.tree_node** %opa, align 8, !dbg !7976
  %ssa_name6 = bitcast %union.tree_node* %12 to %struct.tree_ssa_name*, !dbg !7976
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name6, i32 0, i32 3, !dbg !7976
  %13 = load i32, i32* %version, align 8, !dbg !7976
  %14 = load %union.tree_node*, %union.tree_node** %opb, align 8, !dbg !7977
  %ssa_name7 = bitcast %union.tree_node* %14 to %struct.tree_ssa_name*, !dbg !7977
  %version8 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name7, i32 0, i32 3, !dbg !7977
  %15 = load i32, i32* %version8, align 8, !dbg !7977
  %sub = sub i32 %13, %15, !dbg !7978
  store i32 %sub, i32* %retval, align 4, !dbg !7979
  br label %return, !dbg !7979

if.else:                                          ; preds = %land.lhs.true, %entry
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %opstmta, align 8, !dbg !7980
  %call9 = call zeroext i8 @gimple_nop_p(%union.gimple_statement_d* %16), !dbg !7982
  %tobool10 = icmp ne i8 %call9, 0, !dbg !7982
  br i1 %tobool10, label %if.then11, label %if.else12, !dbg !7983

if.then11:                                        ; preds = %if.else
  store i32 -1, i32* %retval, align 4, !dbg !7984
  br label %return, !dbg !7984

if.else12:                                        ; preds = %if.else
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %opstmtb, align 8, !dbg !7985
  %call13 = call zeroext i8 @gimple_nop_p(%union.gimple_statement_d* %17), !dbg !7987
  %tobool14 = icmp ne i8 %call13, 0, !dbg !7987
  br i1 %tobool14, label %if.then15, label %if.end, !dbg !7988

if.then15:                                        ; preds = %if.else12
  store i32 1, i32* %retval, align 4, !dbg !7989
  br label %return, !dbg !7989

if.end:                                           ; preds = %if.else12
  br label %if.end16

if.end16:                                         ; preds = %if.end
  br label %if.end17

if.end17:                                         ; preds = %if.end16
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %opstmta, align 8, !dbg !7990
  %call18 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %18), !dbg !7991
  store %struct.basic_block_def* %call18, %struct.basic_block_def** %bba, align 8, !dbg !7992
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %opstmtb, align 8, !dbg !7993
  %call19 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %19), !dbg !7994
  store %struct.basic_block_def* %call19, %struct.basic_block_def** %bbb, align 8, !dbg !7995
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %bba, align 8, !dbg !7996
  %tobool20 = icmp ne %struct.basic_block_def* %20, null, !dbg !7996
  br i1 %tobool20, label %if.else29, label %land.lhs.true21, !dbg !7998

land.lhs.true21:                                  ; preds = %if.end17
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %bbb, align 8, !dbg !7999
  %tobool22 = icmp ne %struct.basic_block_def* %21, null, !dbg !7999
  br i1 %tobool22, label %if.else29, label %if.then23, !dbg !8000

if.then23:                                        ; preds = %land.lhs.true21
  %22 = load %union.tree_node*, %union.tree_node** %opa, align 8, !dbg !8001
  %ssa_name24 = bitcast %union.tree_node* %22 to %struct.tree_ssa_name*, !dbg !8001
  %version25 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name24, i32 0, i32 3, !dbg !8001
  %23 = load i32, i32* %version25, align 8, !dbg !8001
  %24 = load %union.tree_node*, %union.tree_node** %opb, align 8, !dbg !8002
  %ssa_name26 = bitcast %union.tree_node* %24 to %struct.tree_ssa_name*, !dbg !8002
  %version27 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name26, i32 0, i32 3, !dbg !8002
  %25 = load i32, i32* %version27, align 8, !dbg !8002
  %sub28 = sub i32 %23, %25, !dbg !8003
  store i32 %sub28, i32* %retval, align 4, !dbg !8004
  br label %return, !dbg !8004

if.else29:                                        ; preds = %land.lhs.true21, %if.end17
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %bba, align 8, !dbg !8005
  %tobool30 = icmp ne %struct.basic_block_def* %26, null, !dbg !8005
  br i1 %tobool30, label %if.else32, label %if.then31, !dbg !8007

if.then31:                                        ; preds = %if.else29
  store i32 -1, i32* %retval, align 4, !dbg !8008
  br label %return, !dbg !8008

if.else32:                                        ; preds = %if.else29
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %bbb, align 8, !dbg !8009
  %tobool33 = icmp ne %struct.basic_block_def* %27, null, !dbg !8009
  br i1 %tobool33, label %if.end35, label %if.then34, !dbg !8011

if.then34:                                        ; preds = %if.else32
  store i32 1, i32* %retval, align 4, !dbg !8012
  br label %return, !dbg !8012

if.end35:                                         ; preds = %if.else32
  br label %if.end36

if.end36:                                         ; preds = %if.end35
  br label %if.end37

if.end37:                                         ; preds = %if.end36
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %bba, align 8, !dbg !8013
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %bbb, align 8, !dbg !8015
  %cmp = icmp eq %struct.basic_block_def* %28, %29, !dbg !8016
  br i1 %cmp, label %if.then39, label %if.end78, !dbg !8017

if.then39:                                        ; preds = %if.end37
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %opstmta, align 8, !dbg !8018
  %call40 = call i32 @gimple_code(%union.gimple_statement_d* %30), !dbg !8021
  %cmp41 = icmp eq i32 %call40, 16, !dbg !8022
  br i1 %cmp41, label %land.lhs.true43, label %if.else53, !dbg !8023

land.lhs.true43:                                  ; preds = %if.then39
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %opstmtb, align 8, !dbg !8024
  %call44 = call i32 @gimple_code(%union.gimple_statement_d* %31), !dbg !8025
  %cmp45 = icmp eq i32 %call44, 16, !dbg !8026
  br i1 %cmp45, label %if.then47, label %if.else53, !dbg !8027

if.then47:                                        ; preds = %land.lhs.true43
  %32 = load %union.tree_node*, %union.tree_node** %opa, align 8, !dbg !8028
  %ssa_name48 = bitcast %union.tree_node* %32 to %struct.tree_ssa_name*, !dbg !8028
  %version49 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name48, i32 0, i32 3, !dbg !8028
  %33 = load i32, i32* %version49, align 8, !dbg !8028
  %34 = load %union.tree_node*, %union.tree_node** %opb, align 8, !dbg !8029
  %ssa_name50 = bitcast %union.tree_node* %34 to %struct.tree_ssa_name*, !dbg !8029
  %version51 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name50, i32 0, i32 3, !dbg !8029
  %35 = load i32, i32* %version51, align 8, !dbg !8029
  %sub52 = sub i32 %33, %35, !dbg !8030
  store i32 %sub52, i32* %retval, align 4, !dbg !8031
  br label %return, !dbg !8031

if.else53:                                        ; preds = %land.lhs.true43, %if.then39
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %opstmta, align 8, !dbg !8032
  %call54 = call i32 @gimple_code(%union.gimple_statement_d* %36), !dbg !8034
  %cmp55 = icmp eq i32 %call54, 16, !dbg !8035
  br i1 %cmp55, label %if.then57, label %if.else58, !dbg !8036

if.then57:                                        ; preds = %if.else53
  store i32 -1, i32* %retval, align 4, !dbg !8037
  br label %return, !dbg !8037

if.else58:                                        ; preds = %if.else53
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %opstmtb, align 8, !dbg !8038
  %call59 = call i32 @gimple_code(%union.gimple_statement_d* %37), !dbg !8040
  %cmp60 = icmp eq i32 %call59, 16, !dbg !8041
  br i1 %cmp60, label %if.then62, label %if.else63, !dbg !8042

if.then62:                                        ; preds = %if.else58
  store i32 1, i32* %retval, align 4, !dbg !8043
  br label %return, !dbg !8043

if.else63:                                        ; preds = %if.else58
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %opstmta, align 8, !dbg !8044
  %call64 = call i32 @gimple_uid(%union.gimple_statement_d* %38), !dbg !8046
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %opstmtb, align 8, !dbg !8047
  %call65 = call i32 @gimple_uid(%union.gimple_statement_d* %39), !dbg !8048
  %cmp66 = icmp ne i32 %call64, %call65, !dbg !8049
  br i1 %cmp66, label %if.then68, label %if.else72, !dbg !8050

if.then68:                                        ; preds = %if.else63
  %40 = load %union.gimple_statement_d*, %union.gimple_statement_d** %opstmta, align 8, !dbg !8051
  %call69 = call i32 @gimple_uid(%union.gimple_statement_d* %40), !dbg !8052
  %41 = load %union.gimple_statement_d*, %union.gimple_statement_d** %opstmtb, align 8, !dbg !8053
  %call70 = call i32 @gimple_uid(%union.gimple_statement_d* %41), !dbg !8054
  %sub71 = sub i32 %call69, %call70, !dbg !8055
  store i32 %sub71, i32* %retval, align 4, !dbg !8056
  br label %return, !dbg !8056

if.else72:                                        ; preds = %if.else63
  %42 = load %union.tree_node*, %union.tree_node** %opa, align 8, !dbg !8057
  %ssa_name73 = bitcast %union.tree_node* %42 to %struct.tree_ssa_name*, !dbg !8057
  %version74 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name73, i32 0, i32 3, !dbg !8057
  %43 = load i32, i32* %version74, align 8, !dbg !8057
  %44 = load %union.tree_node*, %union.tree_node** %opb, align 8, !dbg !8058
  %ssa_name75 = bitcast %union.tree_node* %44 to %struct.tree_ssa_name*, !dbg !8058
  %version76 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name75, i32 0, i32 3, !dbg !8058
  %45 = load i32, i32* %version76, align 8, !dbg !8058
  %sub77 = sub i32 %43, %45, !dbg !8059
  store i32 %sub77, i32* %retval, align 4, !dbg !8060
  br label %return, !dbg !8060

if.end78:                                         ; preds = %if.end37
  %46 = load i32*, i32** @rpo_numbers, align 8, !dbg !8061
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %bba, align 8, !dbg !8062
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %47, i32 0, i32 9, !dbg !8063
  %48 = load i32, i32* %index, align 8, !dbg !8063
  %idxprom = sext i32 %48 to i64, !dbg !8061
  %arrayidx = getelementptr inbounds i32, i32* %46, i64 %idxprom, !dbg !8061
  %49 = load i32, i32* %arrayidx, align 4, !dbg !8061
  %50 = load i32*, i32** @rpo_numbers, align 8, !dbg !8064
  %51 = load %struct.basic_block_def*, %struct.basic_block_def** %bbb, align 8, !dbg !8065
  %index79 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %51, i32 0, i32 9, !dbg !8066
  %52 = load i32, i32* %index79, align 8, !dbg !8066
  %idxprom80 = sext i32 %52 to i64, !dbg !8064
  %arrayidx81 = getelementptr inbounds i32, i32* %50, i64 %idxprom80, !dbg !8064
  %53 = load i32, i32* %arrayidx81, align 4, !dbg !8064
  %sub82 = sub nsw i32 %49, %53, !dbg !8067
  store i32 %sub82, i32* %retval, align 4, !dbg !8068
  br label %return, !dbg !8068

return:                                           ; preds = %if.end78, %if.else72, %if.then68, %if.then62, %if.then57, %if.then47, %if.then34, %if.then31, %if.then23, %if.then15, %if.then11, %if.then
  %54 = load i32, i32* %retval, align 4, !dbg !8069
  ret i32 %54, !dbg !8069
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %g) #0 !dbg !8070 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !8073, metadata !DIExpression()), !dbg !8074
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8075
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !8076
  %bb = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 4, !dbg !8077
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8077
  ret %struct.basic_block_def* %1, !dbg !8078
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_uid(%union.gimple_statement_d* %g) #0 !dbg !8079 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !8080, metadata !DIExpression()), !dbg !8081
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8082
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !8083
  %uid = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 1, !dbg !8084
  %1 = load i32, i32* %uid, align 4, !dbg !8084
  ret i32 %1, !dbg !8085
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @visit_use(%union.tree_node* %use) #0 !dbg !8086 {
entry:
  %use.addr = alloca %union.tree_node*, align 8
  %changed = alloca i8, align 1
  %stmt = alloca %union.gimple_statement_d*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %simplified = alloca %union.tree_node*, align 8
  %lhs344 = alloca %union.tree_node*, align 8
  store %union.tree_node* %use, %union.tree_node** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %use.addr, metadata !8087, metadata !DIExpression()), !dbg !8088
  call void @llvm.dbg.declare(metadata i8* %changed, metadata !8089, metadata !DIExpression()), !dbg !8090
  store i8 0, i8* %changed, align 1, !dbg !8090
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !8091, metadata !DIExpression()), !dbg !8092
  %0 = load %union.tree_node*, %union.tree_node** %use.addr, align 8, !dbg !8093
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !8093
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !8093
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !8093
  store %union.gimple_statement_d* %1, %union.gimple_statement_d** %stmt, align 8, !dbg !8092
  %2 = load %union.tree_node*, %union.tree_node** %use.addr, align 8, !dbg !8094
  %call = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %2), !dbg !8095
  %use_processed = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call, i32 0, i32 5, !dbg !8096
  %bf.load = load i8, i8* %use_processed, align 4, !dbg !8097
  %bf.clear = and i8 %bf.load, -9, !dbg !8097
  %bf.set = or i8 %bf.clear, 8, !dbg !8097
  store i8 %bf.set, i8* %use_processed, align 4, !dbg !8097
  %3 = load %union.tree_node*, %union.tree_node** %use.addr, align 8, !dbg !8098
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !8098
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !8098
  %bf.load1 = load i64, i64* %4, align 8, !dbg !8098
  %bf.lshr = lshr i64 %bf.load1, 25, !dbg !8098
  %bf.clear2 = and i64 %bf.lshr, 1, !dbg !8098
  %bf.cast = trunc i64 %bf.clear2 to i32, !dbg !8098
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !8098
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8098

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0), i32 2488, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8098
  br label %cond.end, !dbg !8098

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8098

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8098
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8099
  %tobool3 = icmp ne %struct._IO_FILE* %5, null, !dbg !8099
  br i1 %tobool3, label %land.lhs.true, label %if.end, !dbg !8101

land.lhs.true:                                    ; preds = %cond.end
  %6 = load i32, i32* @dump_flags, align 4, !dbg !8102
  %and = and i32 %6, 8, !dbg !8103
  %tobool4 = icmp ne i32 %and, 0, !dbg !8103
  br i1 %tobool4, label %land.lhs.true5, label %if.end, !dbg !8104

land.lhs.true5:                                   ; preds = %land.lhs.true
  %7 = load %union.tree_node*, %union.tree_node** %use.addr, align 8, !dbg !8105
  %base6 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !8105
  %8 = bitcast %struct.tree_base* %base6 to i64*, !dbg !8105
  %bf.load7 = load i64, i64* %8, align 8, !dbg !8105
  %bf.lshr8 = lshr i64 %bf.load7, 32, !dbg !8105
  %bf.clear9 = and i64 %bf.lshr8, 1, !dbg !8105
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !8105
  %tobool11 = icmp ne i32 %bf.cast10, 0, !dbg !8105
  br i1 %tobool11, label %if.end, label %if.then, !dbg !8106

if.then:                                          ; preds = %land.lhs.true5
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8107
  %call12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14, i64 0, i64 0)), !dbg !8109
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8110
  %11 = load %union.tree_node*, %union.tree_node** %use.addr, align 8, !dbg !8111
  call void @print_generic_expr(%struct._IO_FILE* %10, %union.tree_node* %11, i32 0), !dbg !8112
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8113
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.15, i64 0, i64 0)), !dbg !8114
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8115
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8116
  call void @print_gimple_stmt(%struct._IO_FILE* %13, %union.gimple_statement_d* %14, i32 0, i32 0), !dbg !8117
  br label %if.end, !dbg !8118

if.end:                                           ; preds = %if.then, %land.lhs.true5, %land.lhs.true, %cond.end
  %15 = load %union.tree_node*, %union.tree_node** %use.addr, align 8, !dbg !8119
  %base14 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !8119
  %16 = bitcast %struct.tree_base* %base14 to i64*, !dbg !8119
  %bf.load15 = load i64, i64* %16, align 8, !dbg !8119
  %bf.lshr16 = lshr i64 %bf.load15, 32, !dbg !8119
  %bf.clear17 = and i64 %bf.lshr16, 1, !dbg !8119
  %bf.cast18 = trunc i64 %bf.clear17 to i32, !dbg !8119
  %tobool19 = icmp ne i32 %bf.cast18, 0, !dbg !8119
  br i1 %tobool19, label %if.then20, label %if.else, !dbg !8121

if.then20:                                        ; preds = %if.end
  %17 = load %union.tree_node*, %union.tree_node** %use.addr, align 8, !dbg !8122
  %18 = load %union.tree_node*, %union.tree_node** %use.addr, align 8, !dbg !8123
  %call21 = call zeroext i8 @set_ssa_val_to(%union.tree_node* %17, %union.tree_node* %18), !dbg !8124
  store i8 %call21, i8* %changed, align 1, !dbg !8125
  br label %if.end417, !dbg !8126

if.else:                                          ; preds = %if.end
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8127
  %call22 = call i32 @gimple_code(%union.gimple_statement_d* %19), !dbg !8130
  %cmp = icmp eq i32 %call22, 16, !dbg !8131
  br i1 %cmp, label %if.then23, label %if.else25, !dbg !8132

if.then23:                                        ; preds = %if.else
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8133
  %call24 = call zeroext i8 @visit_phi(%union.gimple_statement_d* %20), !dbg !8134
  store i8 %call24, i8* %changed, align 1, !dbg !8135
  br label %if.end416, !dbg !8136

if.else25:                                        ; preds = %if.else
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8137
  %call26 = call zeroext i8 @gimple_has_lhs(%union.gimple_statement_d* %21), !dbg !8139
  %tobool27 = icmp ne i8 %call26, 0, !dbg !8139
  br i1 %tobool27, label %lor.lhs.false, label %if.then34, !dbg !8140

lor.lhs.false:                                    ; preds = %if.else25
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8141
  %call28 = call zeroext i8 @gimple_has_volatile_ops(%union.gimple_statement_d* %22), !dbg !8142
  %conv = zext i8 %call28 to i32, !dbg !8142
  %tobool29 = icmp ne i32 %conv, 0, !dbg !8142
  br i1 %tobool29, label %if.then34, label %lor.lhs.false30, !dbg !8143

lor.lhs.false30:                                  ; preds = %lor.lhs.false
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8144
  %call31 = call zeroext i8 @stmt_could_throw_p(%union.gimple_statement_d* %23), !dbg !8145
  %conv32 = zext i8 %call31 to i32, !dbg !8145
  %tobool33 = icmp ne i32 %conv32, 0, !dbg !8145
  br i1 %tobool33, label %if.then34, label %if.else36, !dbg !8146

if.then34:                                        ; preds = %lor.lhs.false30, %lor.lhs.false, %if.else25
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8147
  %call35 = call zeroext i8 @defs_to_varying(%union.gimple_statement_d* %24), !dbg !8148
  store i8 %call35, i8* %changed, align 1, !dbg !8149
  br label %if.end415, !dbg !8150

if.else36:                                        ; preds = %lor.lhs.false30
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8151
  %call37 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %25), !dbg !8153
  %tobool38 = icmp ne i8 %call37, 0, !dbg !8153
  br i1 %tobool38, label %if.then39, label %if.else340, !dbg !8154

if.then39:                                        ; preds = %if.else36
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !8155, metadata !DIExpression()), !dbg !8157
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8158
  %call40 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %26), !dbg !8159
  store %union.tree_node* %call40, %union.tree_node** %lhs, align 8, !dbg !8157
  call void @llvm.dbg.declare(metadata %union.tree_node** %simplified, metadata !8160, metadata !DIExpression()), !dbg !8161
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8162
  %call41 = call zeroext i8 @gimple_assign_copy_p(%union.gimple_statement_d* %27), !dbg !8164
  %conv42 = zext i8 %call41 to i32, !dbg !8164
  %tobool43 = icmp ne i32 %conv42, 0, !dbg !8164
  br i1 %tobool43, label %land.lhs.true44, label %if.end62, !dbg !8165

land.lhs.true44:                                  ; preds = %if.then39
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8166
  %call45 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %28), !dbg !8166
  %base46 = bitcast %union.tree_node* %call45 to %struct.tree_base*, !dbg !8166
  %29 = bitcast %struct.tree_base* %base46 to i64*, !dbg !8166
  %bf.load47 = load i64, i64* %29, align 8, !dbg !8166
  %bf.clear48 = and i64 %bf.load47, 65535, !dbg !8166
  %bf.cast49 = trunc i64 %bf.clear48 to i32, !dbg !8166
  %cmp50 = icmp eq i32 %bf.cast49, 141, !dbg !8167
  br i1 %cmp50, label %land.lhs.true52, label %if.end62, !dbg !8168

land.lhs.true52:                                  ; preds = %land.lhs.true44
  %30 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8169
  %base53 = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !8169
  %31 = bitcast %struct.tree_base* %base53 to i64*, !dbg !8169
  %bf.load54 = load i64, i64* %31, align 8, !dbg !8169
  %bf.clear55 = and i64 %bf.load54, 65535, !dbg !8169
  %bf.cast56 = trunc i64 %bf.clear55 to i32, !dbg !8169
  %cmp57 = icmp eq i32 %bf.cast56, 141, !dbg !8170
  br i1 %cmp57, label %if.then59, label %if.end62, !dbg !8171

if.then59:                                        ; preds = %land.lhs.true52
  %32 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8172
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8174
  %call60 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %33), !dbg !8175
  %call61 = call zeroext i8 @visit_copy(%union.tree_node* %32, %union.tree_node* %call60), !dbg !8176
  store i8 %call61, i8* %changed, align 1, !dbg !8177
  br label %done, !dbg !8178

if.end62:                                         ; preds = %land.lhs.true52, %land.lhs.true44, %if.then39
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8179
  %call63 = call %union.tree_node* @try_to_simplify(%union.gimple_statement_d* %34), !dbg !8180
  store %union.tree_node* %call63, %union.tree_node** %simplified, align 8, !dbg !8181
  %35 = load %union.tree_node*, %union.tree_node** %simplified, align 8, !dbg !8182
  %tobool64 = icmp ne %union.tree_node* %35, null, !dbg !8182
  br i1 %tobool64, label %if.then65, label %if.end87, !dbg !8184

if.then65:                                        ; preds = %if.end62
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8185
  %tobool66 = icmp ne %struct._IO_FILE* %36, null, !dbg !8185
  br i1 %tobool66, label %land.lhs.true67, label %if.end86, !dbg !8188

land.lhs.true67:                                  ; preds = %if.then65
  %37 = load i32, i32* @dump_flags, align 4, !dbg !8189
  %and68 = and i32 %37, 8, !dbg !8190
  %tobool69 = icmp ne i32 %and68, 0, !dbg !8190
  br i1 %tobool69, label %if.then70, label %if.end86, !dbg !8191

if.then70:                                        ; preds = %land.lhs.true67
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8192
  %call71 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %38, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.16, i64 0, i64 0)), !dbg !8194
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8195
  %40 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8196
  call void @print_gimple_expr(%struct._IO_FILE* %39, %union.gimple_statement_d* %40, i32 0, i32 0), !dbg !8197
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8198
  %call72 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %41, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.17, i64 0, i64 0)), !dbg !8199
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8200
  %43 = load %union.tree_node*, %union.tree_node** %simplified, align 8, !dbg !8201
  call void @print_generic_expr(%struct._IO_FILE* %42, %union.tree_node* %43, i32 0), !dbg !8202
  %44 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8203
  %base73 = bitcast %union.tree_node* %44 to %struct.tree_base*, !dbg !8203
  %45 = bitcast %struct.tree_base* %base73 to i64*, !dbg !8203
  %bf.load74 = load i64, i64* %45, align 8, !dbg !8203
  %bf.clear75 = and i64 %bf.load74, 65535, !dbg !8203
  %bf.cast76 = trunc i64 %bf.clear75 to i32, !dbg !8203
  %cmp77 = icmp eq i32 %bf.cast76, 141, !dbg !8205
  br i1 %cmp77, label %if.then79, label %if.else83, !dbg !8206

if.then79:                                        ; preds = %if.then70
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8207
  %47 = load %union.tree_node*, %union.tree_node** %simplified, align 8, !dbg !8208
  %call80 = call zeroext i8 @expr_has_constants(%union.tree_node* %47), !dbg !8209
  %conv81 = zext i8 %call80 to i32, !dbg !8209
  %call82 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %46, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.18, i64 0, i64 0), i32 %conv81), !dbg !8210
  br label %if.end85, !dbg !8210

if.else83:                                        ; preds = %if.then70
  %48 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8211
  %call84 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %48, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !8212
  br label %if.end85

if.end85:                                         ; preds = %if.else83, %if.then79
  br label %if.end86, !dbg !8213

if.end86:                                         ; preds = %if.end85, %land.lhs.true67, %if.then65
  br label %if.end87, !dbg !8214

if.end87:                                         ; preds = %if.end86, %if.end62
  %49 = load %union.tree_node*, %union.tree_node** %simplified, align 8, !dbg !8215
  %tobool88 = icmp ne %union.tree_node* %49, null, !dbg !8215
  br i1 %tobool88, label %land.lhs.true89, label %if.else107, !dbg !8217

land.lhs.true89:                                  ; preds = %if.end87
  %50 = load %union.tree_node*, %union.tree_node** %simplified, align 8, !dbg !8218
  %call90 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %50), !dbg !8219
  %conv91 = zext i8 %call90 to i32, !dbg !8219
  %tobool92 = icmp ne i32 %conv91, 0, !dbg !8219
  br i1 %tobool92, label %land.lhs.true93, label %if.else107, !dbg !8220

land.lhs.true93:                                  ; preds = %land.lhs.true89
  %51 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8221
  %base94 = bitcast %union.tree_node* %51 to %struct.tree_base*, !dbg !8221
  %52 = bitcast %struct.tree_base* %base94 to i64*, !dbg !8221
  %bf.load95 = load i64, i64* %52, align 8, !dbg !8221
  %bf.clear96 = and i64 %bf.load95, 65535, !dbg !8221
  %bf.cast97 = trunc i64 %bf.clear96 to i32, !dbg !8221
  %cmp98 = icmp eq i32 %bf.cast97, 141, !dbg !8222
  br i1 %cmp98, label %if.then100, label %if.else107, !dbg !8223

if.then100:                                       ; preds = %land.lhs.true93
  %53 = load %union.tree_node*, %union.tree_node** %simplified, align 8, !dbg !8224
  %54 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8226
  %call101 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %54), !dbg !8227
  %expr = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call101, i32 0, i32 1, !dbg !8228
  store %union.tree_node* %53, %union.tree_node** %expr, align 8, !dbg !8229
  %55 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8230
  %call102 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %55), !dbg !8231
  %has_constants = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call102, i32 0, i32 5, !dbg !8232
  %bf.load103 = load i8, i8* %has_constants, align 4, !dbg !8233
  %bf.clear104 = and i8 %bf.load103, -5, !dbg !8233
  %bf.set105 = or i8 %bf.clear104, 4, !dbg !8233
  store i8 %bf.set105, i8* %has_constants, align 4, !dbg !8233
  %56 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8234
  %57 = load %union.tree_node*, %union.tree_node** %simplified, align 8, !dbg !8235
  %call106 = call zeroext i8 @set_ssa_val_to(%union.tree_node* %56, %union.tree_node* %57), !dbg !8236
  store i8 %call106, i8* %changed, align 1, !dbg !8237
  br label %done, !dbg !8238

if.else107:                                       ; preds = %land.lhs.true93, %land.lhs.true89, %if.end87
  %58 = load %union.tree_node*, %union.tree_node** %simplified, align 8, !dbg !8239
  %tobool108 = icmp ne %union.tree_node* %58, null, !dbg !8239
  br i1 %tobool108, label %land.lhs.true109, label %if.else125, !dbg !8241

land.lhs.true109:                                 ; preds = %if.else107
  %59 = load %union.tree_node*, %union.tree_node** %simplified, align 8, !dbg !8242
  %base110 = bitcast %union.tree_node* %59 to %struct.tree_base*, !dbg !8242
  %60 = bitcast %struct.tree_base* %base110 to i64*, !dbg !8242
  %bf.load111 = load i64, i64* %60, align 8, !dbg !8242
  %bf.clear112 = and i64 %bf.load111, 65535, !dbg !8242
  %bf.cast113 = trunc i64 %bf.clear112 to i32, !dbg !8242
  %cmp114 = icmp eq i32 %bf.cast113, 141, !dbg !8243
  br i1 %cmp114, label %land.lhs.true116, label %if.else125, !dbg !8244

land.lhs.true116:                                 ; preds = %land.lhs.true109
  %61 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8245
  %base117 = bitcast %union.tree_node* %61 to %struct.tree_base*, !dbg !8245
  %62 = bitcast %struct.tree_base* %base117 to i64*, !dbg !8245
  %bf.load118 = load i64, i64* %62, align 8, !dbg !8245
  %bf.clear119 = and i64 %bf.load118, 65535, !dbg !8245
  %bf.cast120 = trunc i64 %bf.clear119 to i32, !dbg !8245
  %cmp121 = icmp eq i32 %bf.cast120, 141, !dbg !8246
  br i1 %cmp121, label %if.then123, label %if.else125, !dbg !8247

if.then123:                                       ; preds = %land.lhs.true116
  %63 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8248
  %64 = load %union.tree_node*, %union.tree_node** %simplified, align 8, !dbg !8250
  %call124 = call zeroext i8 @visit_copy(%union.tree_node* %63, %union.tree_node* %64), !dbg !8251
  store i8 %call124, i8* %changed, align 1, !dbg !8252
  br label %done, !dbg !8253

if.else125:                                       ; preds = %land.lhs.true116, %land.lhs.true109, %if.else107
  %65 = load %union.tree_node*, %union.tree_node** %simplified, align 8, !dbg !8254
  %tobool126 = icmp ne %union.tree_node* %65, null, !dbg !8254
  br i1 %tobool126, label %if.then127, label %if.else146, !dbg !8256

if.then127:                                       ; preds = %if.else125
  %66 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8257
  %base128 = bitcast %union.tree_node* %66 to %struct.tree_base*, !dbg !8257
  %67 = bitcast %struct.tree_base* %base128 to i64*, !dbg !8257
  %bf.load129 = load i64, i64* %67, align 8, !dbg !8257
  %bf.clear130 = and i64 %bf.load129, 65535, !dbg !8257
  %bf.cast131 = trunc i64 %bf.clear130 to i32, !dbg !8257
  %cmp132 = icmp eq i32 %bf.cast131, 141, !dbg !8260
  br i1 %cmp132, label %if.then134, label %if.end145, !dbg !8261

if.then134:                                       ; preds = %if.then127
  %68 = load %union.tree_node*, %union.tree_node** %simplified, align 8, !dbg !8262
  %call135 = call zeroext i8 @expr_has_constants(%union.tree_node* %68), !dbg !8264
  %conv136 = zext i8 %call135 to i32, !dbg !8264
  %69 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8265
  %call137 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %69), !dbg !8266
  %has_constants138 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call137, i32 0, i32 5, !dbg !8267
  %70 = trunc i32 %conv136 to i8, !dbg !8268
  %bf.load139 = load i8, i8* %has_constants138, align 4, !dbg !8268
  %bf.value = and i8 %70, 1, !dbg !8268
  %bf.shl = shl i8 %bf.value, 2, !dbg !8268
  %bf.clear140 = and i8 %bf.load139, -5, !dbg !8268
  %bf.set141 = or i8 %bf.clear140, %bf.shl, !dbg !8268
  store i8 %bf.set141, i8* %has_constants138, align 4, !dbg !8268
  %bf.result.cast = zext i8 %bf.value to i32, !dbg !8268
  %71 = load %union.tree_node*, %union.tree_node** %simplified, align 8, !dbg !8269
  %call142 = call %union.tree_node* @unshare_expr(%union.tree_node* %71), !dbg !8270
  %72 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8271
  %call143 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %72), !dbg !8272
  %expr144 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call143, i32 0, i32 1, !dbg !8273
  store %union.tree_node* %call142, %union.tree_node** %expr144, align 8, !dbg !8274
  br label %if.end145, !dbg !8275

if.end145:                                        ; preds = %if.then134, %if.then127
  br label %if.end179, !dbg !8276

if.else146:                                       ; preds = %if.else125
  %73 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8277
  %call147 = call zeroext i8 @stmt_has_constants(%union.gimple_statement_d* %73), !dbg !8279
  %conv148 = zext i8 %call147 to i32, !dbg !8279
  %tobool149 = icmp ne i32 %conv148, 0, !dbg !8279
  br i1 %tobool149, label %land.lhs.true150, label %if.else163, !dbg !8280

land.lhs.true150:                                 ; preds = %if.else146
  %74 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8281
  %base151 = bitcast %union.tree_node* %74 to %struct.tree_base*, !dbg !8281
  %75 = bitcast %struct.tree_base* %base151 to i64*, !dbg !8281
  %bf.load152 = load i64, i64* %75, align 8, !dbg !8281
  %bf.clear153 = and i64 %bf.load152, 65535, !dbg !8281
  %bf.cast154 = trunc i64 %bf.clear153 to i32, !dbg !8281
  %cmp155 = icmp eq i32 %bf.cast154, 141, !dbg !8282
  br i1 %cmp155, label %if.then157, label %if.else163, !dbg !8283

if.then157:                                       ; preds = %land.lhs.true150
  %76 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8284
  %call158 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %76), !dbg !8285
  %has_constants159 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call158, i32 0, i32 5, !dbg !8286
  %bf.load160 = load i8, i8* %has_constants159, align 4, !dbg !8287
  %bf.clear161 = and i8 %bf.load160, -5, !dbg !8287
  %bf.set162 = or i8 %bf.clear161, 4, !dbg !8287
  store i8 %bf.set162, i8* %has_constants159, align 4, !dbg !8287
  br label %if.end178, !dbg !8285

if.else163:                                       ; preds = %land.lhs.true150, %if.else146
  %77 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8288
  %base164 = bitcast %union.tree_node* %77 to %struct.tree_base*, !dbg !8288
  %78 = bitcast %struct.tree_base* %base164 to i64*, !dbg !8288
  %bf.load165 = load i64, i64* %78, align 8, !dbg !8288
  %bf.clear166 = and i64 %bf.load165, 65535, !dbg !8288
  %bf.cast167 = trunc i64 %bf.clear166 to i32, !dbg !8288
  %cmp168 = icmp eq i32 %bf.cast167, 141, !dbg !8290
  br i1 %cmp168, label %if.then170, label %if.end177, !dbg !8291

if.then170:                                       ; preds = %if.else163
  %79 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8292
  %call171 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %79), !dbg !8294
  %has_constants172 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call171, i32 0, i32 5, !dbg !8295
  %bf.load173 = load i8, i8* %has_constants172, align 4, !dbg !8296
  %bf.clear174 = and i8 %bf.load173, -5, !dbg !8296
  store i8 %bf.clear174, i8* %has_constants172, align 4, !dbg !8296
  %80 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8297
  %call175 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %80), !dbg !8298
  %expr176 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call175, i32 0, i32 1, !dbg !8299
  store %union.tree_node* null, %union.tree_node** %expr176, align 8, !dbg !8300
  br label %if.end177, !dbg !8301

if.end177:                                        ; preds = %if.then170, %if.else163
  br label %if.end178

if.end178:                                        ; preds = %if.end177, %if.then157
  br label %if.end179

if.end179:                                        ; preds = %if.end178, %if.end145
  br label %if.end180

if.end180:                                        ; preds = %if.end179
  br label %if.end181

if.end181:                                        ; preds = %if.end180
  %81 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8302
  %base182 = bitcast %union.tree_node* %81 to %struct.tree_base*, !dbg !8302
  %82 = bitcast %struct.tree_base* %base182 to i64*, !dbg !8302
  %bf.load183 = load i64, i64* %82, align 8, !dbg !8302
  %bf.clear184 = and i64 %bf.load183, 65535, !dbg !8302
  %bf.cast185 = trunc i64 %bf.clear184 to i32, !dbg !8302
  %cmp186 = icmp eq i32 %bf.cast185, 141, !dbg !8304
  br i1 %cmp186, label %land.lhs.true188, label %lor.lhs.false210, !dbg !8305

land.lhs.true188:                                 ; preds = %if.end181
  %83 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8306
  %call189 = call zeroext i8 @gimple_assign_copy_p(%union.gimple_statement_d* %83), !dbg !8307
  %conv190 = zext i8 %call189 to i32, !dbg !8307
  %tobool191 = icmp ne i32 %conv190, 0, !dbg !8307
  br i1 %tobool191, label %land.lhs.true192, label %land.lhs.true197, !dbg !8308

land.lhs.true192:                                 ; preds = %land.lhs.true188
  %84 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8309
  %call193 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %84), !dbg !8310
  %call194 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %call193), !dbg !8311
  %conv195 = zext i8 %call194 to i32, !dbg !8311
  %tobool196 = icmp ne i32 %conv195, 0, !dbg !8311
  br i1 %tobool196, label %lor.lhs.false210, label %land.lhs.true197, !dbg !8312

land.lhs.true197:                                 ; preds = %land.lhs.true192, %land.lhs.true188
  %85 = load %union.tree_node*, %union.tree_node** %simplified, align 8, !dbg !8313
  %tobool198 = icmp ne %union.tree_node* %85, null, !dbg !8313
  br i1 %tobool198, label %land.lhs.true199, label %land.lhs.true203, !dbg !8314

land.lhs.true199:                                 ; preds = %land.lhs.true197
  %86 = load %union.tree_node*, %union.tree_node** %simplified, align 8, !dbg !8315
  %call200 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %86), !dbg !8316
  %conv201 = zext i8 %call200 to i32, !dbg !8316
  %tobool202 = icmp ne i32 %conv201, 0, !dbg !8316
  br i1 %tobool202, label %lor.lhs.false210, label %land.lhs.true203, !dbg !8317

land.lhs.true203:                                 ; preds = %land.lhs.true199, %land.lhs.true197
  %87 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8318
  %base204 = bitcast %union.tree_node* %87 to %struct.tree_base*, !dbg !8318
  %88 = bitcast %struct.tree_base* %base204 to i64*, !dbg !8318
  %bf.load205 = load i64, i64* %88, align 8, !dbg !8318
  %bf.lshr206 = lshr i64 %bf.load205, 22, !dbg !8318
  %bf.clear207 = and i64 %bf.lshr206, 1, !dbg !8318
  %bf.cast208 = trunc i64 %bf.clear207 to i32, !dbg !8318
  %tobool209 = icmp ne i32 %bf.cast208, 0, !dbg !8318
  br i1 %tobool209, label %if.then230, label %lor.lhs.false210, !dbg !8319

lor.lhs.false210:                                 ; preds = %land.lhs.true203, %land.lhs.true199, %land.lhs.true192, %if.end181
  %89 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8320
  %call211 = call zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d* %89), !dbg !8321
  %conv212 = zext i8 %call211 to i32, !dbg !8321
  %tobool213 = icmp ne i32 %conv212, 0, !dbg !8321
  br i1 %tobool213, label %land.lhs.true214, label %if.else232, !dbg !8322

land.lhs.true214:                                 ; preds = %lor.lhs.false210
  %90 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8323
  %call215 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %90), !dbg !8323
  %base216 = bitcast %union.tree_node* %call215 to %struct.tree_base*, !dbg !8323
  %91 = bitcast %struct.tree_base* %base216 to i64*, !dbg !8323
  %bf.load217 = load i64, i64* %91, align 8, !dbg !8323
  %bf.clear218 = and i64 %bf.load217, 65535, !dbg !8323
  %bf.cast219 = trunc i64 %bf.clear218 to i32, !dbg !8323
  %cmp220 = icmp eq i32 %bf.cast219, 141, !dbg !8324
  br i1 %cmp220, label %land.lhs.true222, label %if.else232, !dbg !8325

land.lhs.true222:                                 ; preds = %land.lhs.true214
  %92 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8326
  %call223 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %92), !dbg !8326
  %base224 = bitcast %union.tree_node* %call223 to %struct.tree_base*, !dbg !8326
  %93 = bitcast %struct.tree_base* %base224 to i64*, !dbg !8326
  %bf.load225 = load i64, i64* %93, align 8, !dbg !8326
  %bf.lshr226 = lshr i64 %bf.load225, 22, !dbg !8326
  %bf.clear227 = and i64 %bf.lshr226, 1, !dbg !8326
  %bf.cast228 = trunc i64 %bf.clear227 to i32, !dbg !8326
  %tobool229 = icmp ne i32 %bf.cast228, 0, !dbg !8326
  br i1 %tobool229, label %if.then230, label %if.else232, !dbg !8327

if.then230:                                       ; preds = %land.lhs.true222, %land.lhs.true203
  %94 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8328
  %call231 = call zeroext i8 @defs_to_varying(%union.gimple_statement_d* %94), !dbg !8329
  store i8 %call231, i8* %changed, align 1, !dbg !8330
  br label %if.end339, !dbg !8331

if.else232:                                       ; preds = %land.lhs.true222, %land.lhs.true214, %lor.lhs.false210
  %95 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8332
  %base233 = bitcast %union.tree_node* %95 to %struct.tree_base*, !dbg !8332
  %96 = bitcast %struct.tree_base* %base233 to i64*, !dbg !8332
  %bf.load234 = load i64, i64* %96, align 8, !dbg !8332
  %bf.clear235 = and i64 %bf.load234, 65535, !dbg !8332
  %bf.cast236 = trunc i64 %bf.clear235 to i32, !dbg !8332
  %idxprom = sext i32 %bf.cast236 to i64, !dbg !8332
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !8332
  %97 = load i32, i32* %arrayidx, align 4, !dbg !8332
  %cmp237 = icmp eq i32 %97, 4, !dbg !8332
  br i1 %cmp237, label %if.then248, label %lor.lhs.false239, !dbg !8334

lor.lhs.false239:                                 ; preds = %if.else232
  %98 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8335
  %base240 = bitcast %union.tree_node* %98 to %struct.tree_base*, !dbg !8335
  %99 = bitcast %struct.tree_base* %base240 to i64*, !dbg !8335
  %bf.load241 = load i64, i64* %99, align 8, !dbg !8335
  %bf.clear242 = and i64 %bf.load241, 65535, !dbg !8335
  %bf.cast243 = trunc i64 %bf.clear242 to i32, !dbg !8335
  %idxprom244 = sext i32 %bf.cast243 to i64, !dbg !8335
  %arrayidx245 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom244, !dbg !8335
  %100 = load i32, i32* %arrayidx245, align 4, !dbg !8335
  %cmp246 = icmp eq i32 %100, 3, !dbg !8335
  br i1 %cmp246, label %if.then248, label %if.else251, !dbg !8336

if.then248:                                       ; preds = %lor.lhs.false239, %if.else232
  %101 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8337
  %102 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8339
  %call249 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %102), !dbg !8340
  %103 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8341
  %call250 = call zeroext i8 @visit_reference_op_store(%union.tree_node* %101, %union.tree_node* %call249, %union.gimple_statement_d* %103), !dbg !8342
  store i8 %call250, i8* %changed, align 1, !dbg !8343
  br label %if.end338, !dbg !8344

if.else251:                                       ; preds = %lor.lhs.false239
  %104 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8345
  %base252 = bitcast %union.tree_node* %104 to %struct.tree_base*, !dbg !8345
  %105 = bitcast %struct.tree_base* %base252 to i64*, !dbg !8345
  %bf.load253 = load i64, i64* %105, align 8, !dbg !8345
  %bf.clear254 = and i64 %bf.load253, 65535, !dbg !8345
  %bf.cast255 = trunc i64 %bf.clear254 to i32, !dbg !8345
  %cmp256 = icmp eq i32 %bf.cast255, 141, !dbg !8347
  br i1 %cmp256, label %if.then258, label %if.else335, !dbg !8348

if.then258:                                       ; preds = %if.else251
  %106 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8349
  %call259 = call zeroext i8 @gimple_assign_copy_p(%union.gimple_statement_d* %106), !dbg !8352
  %conv260 = zext i8 %call259 to i32, !dbg !8352
  %tobool261 = icmp ne i32 %conv260, 0, !dbg !8352
  br i1 %tobool261, label %land.lhs.true262, label %lor.lhs.false267, !dbg !8353

land.lhs.true262:                                 ; preds = %if.then258
  %107 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8354
  %call263 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %107), !dbg !8355
  %call264 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %call263), !dbg !8356
  %conv265 = zext i8 %call264 to i32, !dbg !8356
  %tobool266 = icmp ne i32 %conv265, 0, !dbg !8356
  br i1 %tobool266, label %if.then273, label %lor.lhs.false267, !dbg !8357

lor.lhs.false267:                                 ; preds = %land.lhs.true262, %if.then258
  %108 = load %union.tree_node*, %union.tree_node** %simplified, align 8, !dbg !8358
  %tobool268 = icmp ne %union.tree_node* %108, null, !dbg !8358
  br i1 %tobool268, label %land.lhs.true269, label %if.else286, !dbg !8359

land.lhs.true269:                                 ; preds = %lor.lhs.false267
  %109 = load %union.tree_node*, %union.tree_node** %simplified, align 8, !dbg !8360
  %call270 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %109), !dbg !8361
  %conv271 = zext i8 %call270 to i32, !dbg !8361
  %tobool272 = icmp ne i32 %conv271, 0, !dbg !8361
  br i1 %tobool272, label %if.then273, label %if.else286, !dbg !8362

if.then273:                                       ; preds = %land.lhs.true269, %land.lhs.true262
  %110 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8363
  %call274 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %110), !dbg !8365
  %has_constants275 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call274, i32 0, i32 5, !dbg !8366
  %bf.load276 = load i8, i8* %has_constants275, align 4, !dbg !8367
  %bf.clear277 = and i8 %bf.load276, -5, !dbg !8367
  %bf.set278 = or i8 %bf.clear277, 4, !dbg !8367
  store i8 %bf.set278, i8* %has_constants275, align 4, !dbg !8367
  %111 = load %union.tree_node*, %union.tree_node** %simplified, align 8, !dbg !8368
  %tobool279 = icmp ne %union.tree_node* %111, null, !dbg !8368
  br i1 %tobool279, label %if.then280, label %if.else282, !dbg !8370

if.then280:                                       ; preds = %if.then273
  %112 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8371
  %113 = load %union.tree_node*, %union.tree_node** %simplified, align 8, !dbg !8372
  %call281 = call zeroext i8 @set_ssa_val_to(%union.tree_node* %112, %union.tree_node* %113), !dbg !8373
  store i8 %call281, i8* %changed, align 1, !dbg !8374
  br label %if.end285, !dbg !8375

if.else282:                                       ; preds = %if.then273
  %114 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8376
  %115 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8377
  %call283 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %115), !dbg !8378
  %call284 = call zeroext i8 @set_ssa_val_to(%union.tree_node* %114, %union.tree_node* %call283), !dbg !8379
  store i8 %call284, i8* %changed, align 1, !dbg !8380
  br label %if.end285

if.end285:                                        ; preds = %if.else282, %if.then280
  br label %if.end334, !dbg !8381

if.else286:                                       ; preds = %land.lhs.true269, %lor.lhs.false267
  %116 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8382
  %call287 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %116), !dbg !8384
  %call288 = call i32 @get_gimple_rhs_class(i32 %call287), !dbg !8385
  switch i32 %call288, label %sw.default331 [
    i32 2, label %sw.bb
    i32 1, label %sw.bb290
    i32 3, label %sw.bb292
  ], !dbg !8386

sw.bb:                                            ; preds = %if.else286
  %117 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8387
  %118 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8389
  %call289 = call zeroext i8 @visit_unary_op(%union.tree_node* %117, %union.gimple_statement_d* %118), !dbg !8390
  store i8 %call289, i8* %changed, align 1, !dbg !8391
  br label %sw.epilog333, !dbg !8392

sw.bb290:                                         ; preds = %if.else286
  %119 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8393
  %120 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8394
  %call291 = call zeroext i8 @visit_binary_op(%union.tree_node* %119, %union.gimple_statement_d* %120), !dbg !8395
  store i8 %call291, i8* %changed, align 1, !dbg !8396
  br label %sw.epilog333, !dbg !8397

sw.bb292:                                         ; preds = %if.else286
  %121 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8398
  %call293 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %121), !dbg !8398
  %idxprom294 = sext i32 %call293 to i64, !dbg !8398
  %arrayidx295 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom294, !dbg !8398
  %122 = load i32, i32* %arrayidx295, align 4, !dbg !8398
  switch i32 %122, label %sw.default [
    i32 4, label %sw.bb296
    i32 3, label %sw.bb320
    i32 10, label %sw.bb323
  ], !dbg !8399

sw.bb296:                                         ; preds = %sw.bb292
  %123 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8400
  %call297 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %123), !dbg !8403
  %cmp298 = icmp eq i32 %call297, 43, !dbg !8404
  br i1 %cmp298, label %land.lhs.true308, label %lor.lhs.false300, !dbg !8405

lor.lhs.false300:                                 ; preds = %sw.bb296
  %124 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8406
  %call301 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %124), !dbg !8407
  %cmp302 = icmp eq i32 %call301, 44, !dbg !8408
  br i1 %cmp302, label %land.lhs.true308, label %lor.lhs.false304, !dbg !8409

lor.lhs.false304:                                 ; preds = %lor.lhs.false300
  %125 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8410
  %call305 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %125), !dbg !8411
  %cmp306 = icmp eq i32 %call305, 118, !dbg !8412
  br i1 %cmp306, label %land.lhs.true308, label %if.end319, !dbg !8413

land.lhs.true308:                                 ; preds = %lor.lhs.false304, %lor.lhs.false300, %sw.bb296
  %126 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8414
  %call309 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %126), !dbg !8414
  %exp = bitcast %union.tree_node* %call309 to %struct.tree_exp*, !dbg !8414
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !8414
  %arrayidx310 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !8414
  %127 = load %union.tree_node*, %union.tree_node** %arrayidx310, align 8, !dbg !8414
  %base311 = bitcast %union.tree_node* %127 to %struct.tree_base*, !dbg !8414
  %128 = bitcast %struct.tree_base* %base311 to i64*, !dbg !8414
  %bf.load312 = load i64, i64* %128, align 8, !dbg !8414
  %bf.clear313 = and i64 %bf.load312, 65535, !dbg !8414
  %bf.cast314 = trunc i64 %bf.clear313 to i32, !dbg !8414
  %cmp315 = icmp eq i32 %bf.cast314, 141, !dbg !8415
  br i1 %cmp315, label %if.then317, label %if.end319, !dbg !8416

if.then317:                                       ; preds = %land.lhs.true308
  %129 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8417
  %130 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8419
  %call318 = call zeroext i8 @visit_unary_op(%union.tree_node* %129, %union.gimple_statement_d* %130), !dbg !8420
  store i8 %call318, i8* %changed, align 1, !dbg !8421
  br label %sw.epilog, !dbg !8422

if.end319:                                        ; preds = %land.lhs.true308, %lor.lhs.false304
  br label %sw.bb320, !dbg !8423

sw.bb320:                                         ; preds = %sw.bb292, %if.end319
  %131 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8424
  %132 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8425
  %call321 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %132), !dbg !8426
  %133 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8427
  %call322 = call zeroext i8 @visit_reference_op_load(%union.tree_node* %131, %union.tree_node* %call321, %union.gimple_statement_d* %133), !dbg !8428
  store i8 %call322, i8* %changed, align 1, !dbg !8429
  br label %sw.epilog, !dbg !8430

sw.bb323:                                         ; preds = %sw.bb292
  %134 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8431
  %call324 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %134), !dbg !8433
  %cmp325 = icmp eq i32 %call324, 121, !dbg !8434
  br i1 %cmp325, label %if.then327, label %if.end329, !dbg !8435

if.then327:                                       ; preds = %sw.bb323
  %135 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8436
  %136 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8438
  %call328 = call zeroext i8 @visit_unary_op(%union.tree_node* %135, %union.gimple_statement_d* %136), !dbg !8439
  store i8 %call328, i8* %changed, align 1, !dbg !8440
  br label %sw.epilog, !dbg !8441

if.end329:                                        ; preds = %sw.bb323
  br label %sw.default, !dbg !8442

sw.default:                                       ; preds = %sw.bb292, %if.end329
  %137 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8443
  %call330 = call zeroext i8 @defs_to_varying(%union.gimple_statement_d* %137), !dbg !8444
  store i8 %call330, i8* %changed, align 1, !dbg !8445
  br label %sw.epilog, !dbg !8446

sw.epilog:                                        ; preds = %sw.default, %if.then327, %sw.bb320, %if.then317
  br label %sw.epilog333, !dbg !8447

sw.default331:                                    ; preds = %if.else286
  %138 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8448
  %call332 = call zeroext i8 @defs_to_varying(%union.gimple_statement_d* %138), !dbg !8449
  store i8 %call332, i8* %changed, align 1, !dbg !8450
  br label %sw.epilog333, !dbg !8451

sw.epilog333:                                     ; preds = %sw.default331, %sw.epilog, %sw.bb290, %sw.bb
  br label %if.end334

if.end334:                                        ; preds = %sw.epilog333, %if.end285
  br label %if.end337, !dbg !8452

if.else335:                                       ; preds = %if.else251
  %139 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8453
  %call336 = call zeroext i8 @defs_to_varying(%union.gimple_statement_d* %139), !dbg !8454
  store i8 %call336, i8* %changed, align 1, !dbg !8455
  br label %if.end337

if.end337:                                        ; preds = %if.else335, %if.end334
  br label %if.end338

if.end338:                                        ; preds = %if.end337, %if.then248
  br label %if.end339

if.end339:                                        ; preds = %if.end338, %if.then230
  br label %if.end414, !dbg !8456

if.else340:                                       ; preds = %if.else36
  %140 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8457
  %call341 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %140), !dbg !8459
  %tobool342 = icmp ne i8 %call341, 0, !dbg !8459
  br i1 %tobool342, label %if.then343, label %if.end413, !dbg !8460

if.then343:                                       ; preds = %if.else340
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs344, metadata !8461, metadata !DIExpression()), !dbg !8463
  %141 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8464
  %call345 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %141), !dbg !8465
  store %union.tree_node* %call345, %union.tree_node** %lhs344, align 8, !dbg !8463
  %142 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8466
  %call346 = call zeroext i8 @stmt_has_constants(%union.gimple_statement_d* %142), !dbg !8468
  %conv347 = zext i8 %call346 to i32, !dbg !8468
  %tobool348 = icmp ne i32 %conv347, 0, !dbg !8468
  br i1 %tobool348, label %land.lhs.true349, label %if.else362, !dbg !8469

land.lhs.true349:                                 ; preds = %if.then343
  %143 = load %union.tree_node*, %union.tree_node** %lhs344, align 8, !dbg !8470
  %base350 = bitcast %union.tree_node* %143 to %struct.tree_base*, !dbg !8470
  %144 = bitcast %struct.tree_base* %base350 to i64*, !dbg !8470
  %bf.load351 = load i64, i64* %144, align 8, !dbg !8470
  %bf.clear352 = and i64 %bf.load351, 65535, !dbg !8470
  %bf.cast353 = trunc i64 %bf.clear352 to i32, !dbg !8470
  %cmp354 = icmp eq i32 %bf.cast353, 141, !dbg !8471
  br i1 %cmp354, label %if.then356, label %if.else362, !dbg !8472

if.then356:                                       ; preds = %land.lhs.true349
  %145 = load %union.tree_node*, %union.tree_node** %lhs344, align 8, !dbg !8473
  %call357 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %145), !dbg !8474
  %has_constants358 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call357, i32 0, i32 5, !dbg !8475
  %bf.load359 = load i8, i8* %has_constants358, align 4, !dbg !8476
  %bf.clear360 = and i8 %bf.load359, -5, !dbg !8476
  %bf.set361 = or i8 %bf.clear360, 4, !dbg !8476
  store i8 %bf.set361, i8* %has_constants358, align 4, !dbg !8476
  br label %if.end377, !dbg !8474

if.else362:                                       ; preds = %land.lhs.true349, %if.then343
  %146 = load %union.tree_node*, %union.tree_node** %lhs344, align 8, !dbg !8477
  %base363 = bitcast %union.tree_node* %146 to %struct.tree_base*, !dbg !8477
  %147 = bitcast %struct.tree_base* %base363 to i64*, !dbg !8477
  %bf.load364 = load i64, i64* %147, align 8, !dbg !8477
  %bf.clear365 = and i64 %bf.load364, 65535, !dbg !8477
  %bf.cast366 = trunc i64 %bf.clear365 to i32, !dbg !8477
  %cmp367 = icmp eq i32 %bf.cast366, 141, !dbg !8479
  br i1 %cmp367, label %if.then369, label %if.end376, !dbg !8480

if.then369:                                       ; preds = %if.else362
  %148 = load %union.tree_node*, %union.tree_node** %lhs344, align 8, !dbg !8481
  %call370 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %148), !dbg !8483
  %has_constants371 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call370, i32 0, i32 5, !dbg !8484
  %bf.load372 = load i8, i8* %has_constants371, align 4, !dbg !8485
  %bf.clear373 = and i8 %bf.load372, -5, !dbg !8485
  store i8 %bf.clear373, i8* %has_constants371, align 4, !dbg !8485
  %149 = load %union.tree_node*, %union.tree_node** %lhs344, align 8, !dbg !8486
  %call374 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %149), !dbg !8487
  %expr375 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call374, i32 0, i32 1, !dbg !8488
  store %union.tree_node* null, %union.tree_node** %expr375, align 8, !dbg !8489
  br label %if.end376, !dbg !8490

if.end376:                                        ; preds = %if.then369, %if.else362
  br label %if.end377

if.end377:                                        ; preds = %if.end376, %if.then356
  %150 = load %union.tree_node*, %union.tree_node** %lhs344, align 8, !dbg !8491
  %base378 = bitcast %union.tree_node* %150 to %struct.tree_base*, !dbg !8491
  %151 = bitcast %struct.tree_base* %base378 to i64*, !dbg !8491
  %bf.load379 = load i64, i64* %151, align 8, !dbg !8491
  %bf.clear380 = and i64 %bf.load379, 65535, !dbg !8491
  %bf.cast381 = trunc i64 %bf.clear380 to i32, !dbg !8491
  %cmp382 = icmp eq i32 %bf.cast381, 141, !dbg !8493
  br i1 %cmp382, label %land.lhs.true384, label %if.else393, !dbg !8494

land.lhs.true384:                                 ; preds = %if.end377
  %152 = load %union.tree_node*, %union.tree_node** %lhs344, align 8, !dbg !8495
  %base385 = bitcast %union.tree_node* %152 to %struct.tree_base*, !dbg !8495
  %153 = bitcast %struct.tree_base* %base385 to i64*, !dbg !8495
  %bf.load386 = load i64, i64* %153, align 8, !dbg !8495
  %bf.lshr387 = lshr i64 %bf.load386, 22, !dbg !8495
  %bf.clear388 = and i64 %bf.lshr387, 1, !dbg !8495
  %bf.cast389 = trunc i64 %bf.clear388 to i32, !dbg !8495
  %tobool390 = icmp ne i32 %bf.cast389, 0, !dbg !8495
  br i1 %tobool390, label %if.then391, label %if.else393, !dbg !8496

if.then391:                                       ; preds = %land.lhs.true384
  %154 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8497
  %call392 = call zeroext i8 @defs_to_varying(%union.gimple_statement_d* %154), !dbg !8498
  store i8 %call392, i8* %changed, align 1, !dbg !8499
  br label %if.end412, !dbg !8500

if.else393:                                       ; preds = %land.lhs.true384, %if.end377
  %155 = load %union.tree_node*, %union.tree_node** %lhs344, align 8, !dbg !8501
  %base394 = bitcast %union.tree_node* %155 to %struct.tree_base*, !dbg !8501
  %156 = bitcast %struct.tree_base* %base394 to i64*, !dbg !8501
  %bf.load395 = load i64, i64* %156, align 8, !dbg !8501
  %bf.clear396 = and i64 %bf.load395, 65535, !dbg !8501
  %bf.cast397 = trunc i64 %bf.clear396 to i32, !dbg !8501
  %cmp398 = icmp eq i32 %bf.cast397, 141, !dbg !8503
  br i1 %cmp398, label %if.then400, label %if.else409, !dbg !8504

if.then400:                                       ; preds = %if.else393
  %157 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8505
  %call401 = call i32 @gimple_call_flags(%union.gimple_statement_d* %157), !dbg !8508
  %and402 = and i32 %call401, 3, !dbg !8509
  %tobool403 = icmp ne i32 %and402, 0, !dbg !8509
  br i1 %tobool403, label %if.then404, label %if.else406, !dbg !8510

if.then404:                                       ; preds = %if.then400
  %158 = load %union.tree_node*, %union.tree_node** %lhs344, align 8, !dbg !8511
  %159 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8512
  %call405 = call zeroext i8 @visit_reference_op_call(%union.tree_node* %158, %union.gimple_statement_d* %159), !dbg !8513
  store i8 %call405, i8* %changed, align 1, !dbg !8514
  br label %if.end408, !dbg !8515

if.else406:                                       ; preds = %if.then400
  %160 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8516
  %call407 = call zeroext i8 @defs_to_varying(%union.gimple_statement_d* %160), !dbg !8517
  store i8 %call407, i8* %changed, align 1, !dbg !8518
  br label %if.end408

if.end408:                                        ; preds = %if.else406, %if.then404
  br label %if.end411, !dbg !8519

if.else409:                                       ; preds = %if.else393
  %161 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8520
  %call410 = call zeroext i8 @defs_to_varying(%union.gimple_statement_d* %161), !dbg !8521
  store i8 %call410, i8* %changed, align 1, !dbg !8522
  br label %if.end411

if.end411:                                        ; preds = %if.else409, %if.end408
  br label %if.end412

if.end412:                                        ; preds = %if.end411, %if.then391
  br label %if.end413, !dbg !8523

if.end413:                                        ; preds = %if.end412, %if.else340
  br label %if.end414

if.end414:                                        ; preds = %if.end413, %if.end339
  br label %if.end415

if.end415:                                        ; preds = %if.end414, %if.then34
  br label %if.end416

if.end416:                                        ; preds = %if.end415, %if.then23
  br label %if.end417

if.end417:                                        ; preds = %if.end416, %if.then20
  br label %done, !dbg !8119

done:                                             ; preds = %if.end417, %if.then123, %if.then100, %if.then59
  call void @llvm.dbg.label(metadata !8524), !dbg !8525
  %162 = load i8, i8* %changed, align 1, !dbg !8526
  ret i8 %162, !dbg !8527
}

declare dso_local void @htab_empty(%struct.htab*) #2

declare dso_local void @empty_alloc_pool(%struct.alloc_pool_def*) #2

declare dso_local void @statistics_histogram_event(%struct.function*, i8*, i32) #2

declare dso_local void @htab_traverse(%struct.htab*, i32 (i8**, i8*)*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @copy_nary(i8** %entry1, i8* %data) #0 !dbg !8528 {
entry:
  %entry.addr = alloca i8**, align 8
  %data.addr = alloca i8*, align 8
  %onary = alloca %struct.vn_nary_op_s*, align 8
  %size = alloca i64, align 8
  %nary = alloca %struct.vn_nary_op_s*, align 8
  %slot = alloca i8**, align 8
  store i8** %entry1, i8*** %entry.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %entry.addr, metadata !8531, metadata !DIExpression()), !dbg !8532
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !8533, metadata !DIExpression()), !dbg !8534
  call void @llvm.dbg.declare(metadata %struct.vn_nary_op_s** %onary, metadata !8535, metadata !DIExpression()), !dbg !8536
  %0 = load i8**, i8*** %entry.addr, align 8, !dbg !8537
  %1 = load i8*, i8** %0, align 8, !dbg !8538
  %2 = bitcast i8* %1 to %struct.vn_nary_op_s*, !dbg !8539
  store %struct.vn_nary_op_s* %2, %struct.vn_nary_op_s** %onary, align 8, !dbg !8536
  call void @llvm.dbg.declare(metadata i64* %size, metadata !8540, metadata !DIExpression()), !dbg !8541
  %3 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %onary, align 8, !dbg !8542
  %length = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %3, i32 0, i32 1, !dbg !8543
  %bf.load = load i32, i32* %length, align 4, !dbg !8543
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !8543
  %sub = sub nsw i32 4, %bf.lshr, !dbg !8544
  %conv = sext i32 %sub to i64, !dbg !8545
  %mul = mul i64 8, %conv, !dbg !8546
  %sub2 = sub i64 64, %mul, !dbg !8547
  store i64 %sub2, i64* %size, align 8, !dbg !8541
  call void @llvm.dbg.declare(metadata %struct.vn_nary_op_s** %nary, metadata !8548, metadata !DIExpression()), !dbg !8549
  %4 = load i64, i64* %size, align 8, !dbg !8550
  %5 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !8550
  %nary_obstack = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %5, i32 0, i32 3, !dbg !8550
  %temp = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack, i32 0, i32 5, !dbg !8550
  store i64 %4, i64* %temp, align 8, !dbg !8550
  %6 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !8550
  %nary_obstack3 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %6, i32 0, i32 3, !dbg !8550
  %chunk_limit = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack3, i32 0, i32 4, !dbg !8550
  %7 = load i8*, i8** %chunk_limit, align 8, !dbg !8550
  %8 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !8550
  %nary_obstack4 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %8, i32 0, i32 3, !dbg !8550
  %next_free = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack4, i32 0, i32 3, !dbg !8550
  %9 = load i8*, i8** %next_free, align 8, !dbg !8550
  %sub.ptr.lhs.cast = ptrtoint i8* %7 to i64, !dbg !8550
  %sub.ptr.rhs.cast = ptrtoint i8* %9 to i64, !dbg !8550
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !8550
  %10 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !8550
  %nary_obstack5 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %10, i32 0, i32 3, !dbg !8550
  %temp6 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack5, i32 0, i32 5, !dbg !8550
  %11 = load i64, i64* %temp6, align 8, !dbg !8550
  %cmp = icmp slt i64 %sub.ptr.sub, %11, !dbg !8550
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !8550

cond.true:                                        ; preds = %entry
  %12 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !8550
  %nary_obstack8 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %12, i32 0, i32 3, !dbg !8550
  %13 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !8550
  %nary_obstack9 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %13, i32 0, i32 3, !dbg !8550
  %temp10 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack9, i32 0, i32 5, !dbg !8550
  %14 = load i64, i64* %temp10, align 8, !dbg !8550
  %conv11 = trunc i64 %14 to i32, !dbg !8550
  call void @_obstack_newchunk(%struct.obstack* %nary_obstack8, i32 %conv11), !dbg !8550
  br label %cond.end, !dbg !8550

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8550

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8550
  %15 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !8550
  %nary_obstack12 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %15, i32 0, i32 3, !dbg !8550
  %temp13 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack12, i32 0, i32 5, !dbg !8550
  %16 = load i64, i64* %temp13, align 8, !dbg !8550
  %17 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !8550
  %nary_obstack14 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %17, i32 0, i32 3, !dbg !8550
  %next_free15 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack14, i32 0, i32 3, !dbg !8550
  %18 = load i8*, i8** %next_free15, align 8, !dbg !8550
  %add.ptr = getelementptr inbounds i8, i8* %18, i64 %16, !dbg !8550
  store i8* %add.ptr, i8** %next_free15, align 8, !dbg !8550
  %19 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !8550
  %nary_obstack16 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %19, i32 0, i32 3, !dbg !8550
  %next_free17 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack16, i32 0, i32 3, !dbg !8550
  %20 = load i8*, i8** %next_free17, align 8, !dbg !8550
  %21 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !8550
  %nary_obstack18 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %21, i32 0, i32 3, !dbg !8550
  %object_base = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack18, i32 0, i32 2, !dbg !8550
  %22 = load i8*, i8** %object_base, align 8, !dbg !8550
  %cmp19 = icmp eq i8* %20, %22, !dbg !8550
  br i1 %cmp19, label %cond.true21, label %cond.false24, !dbg !8550

cond.true21:                                      ; preds = %cond.end
  %23 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !8550
  %nary_obstack22 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %23, i32 0, i32 3, !dbg !8550
  %maybe_empty_object = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack22, i32 0, i32 10, !dbg !8550
  %bf.load23 = load i8, i8* %maybe_empty_object, align 8, !dbg !8550
  %bf.clear = and i8 %bf.load23, -3, !dbg !8550
  %bf.set = or i8 %bf.clear, 2, !dbg !8550
  store i8 %bf.set, i8* %maybe_empty_object, align 8, !dbg !8550
  br label %cond.end25, !dbg !8550

cond.false24:                                     ; preds = %cond.end
  br label %cond.end25, !dbg !8550

cond.end25:                                       ; preds = %cond.false24, %cond.true21
  %cond26 = phi i32 [ 0, %cond.true21 ], [ 0, %cond.false24 ], !dbg !8550
  %24 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !8550
  %nary_obstack27 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %24, i32 0, i32 3, !dbg !8550
  %object_base28 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack27, i32 0, i32 2, !dbg !8550
  %25 = load i8*, i8** %object_base28, align 8, !dbg !8550
  %sub.ptr.lhs.cast29 = ptrtoint i8* %25 to i64, !dbg !8550
  %sub.ptr.sub30 = sub i64 %sub.ptr.lhs.cast29, 0, !dbg !8550
  %26 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !8550
  %nary_obstack31 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %26, i32 0, i32 3, !dbg !8550
  %temp32 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack31, i32 0, i32 5, !dbg !8550
  store i64 %sub.ptr.sub30, i64* %temp32, align 8, !dbg !8550
  %27 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !8550
  %nary_obstack33 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %27, i32 0, i32 3, !dbg !8550
  %next_free34 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack33, i32 0, i32 3, !dbg !8550
  %28 = load i8*, i8** %next_free34, align 8, !dbg !8550
  %sub.ptr.lhs.cast35 = ptrtoint i8* %28 to i64, !dbg !8550
  %sub.ptr.sub36 = sub i64 %sub.ptr.lhs.cast35, 0, !dbg !8550
  %29 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !8550
  %nary_obstack37 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %29, i32 0, i32 3, !dbg !8550
  %alignment_mask = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack37, i32 0, i32 6, !dbg !8550
  %30 = load i32, i32* %alignment_mask, align 8, !dbg !8550
  %conv38 = sext i32 %30 to i64, !dbg !8550
  %add = add nsw i64 %sub.ptr.sub36, %conv38, !dbg !8550
  %31 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !8550
  %nary_obstack39 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %31, i32 0, i32 3, !dbg !8550
  %alignment_mask40 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack39, i32 0, i32 6, !dbg !8550
  %32 = load i32, i32* %alignment_mask40, align 8, !dbg !8550
  %neg = xor i32 %32, -1, !dbg !8550
  %conv41 = sext i32 %neg to i64, !dbg !8550
  %and = and i64 %add, %conv41, !dbg !8550
  %33 = inttoptr i64 %and to i8*, !dbg !8550
  %34 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !8550
  %nary_obstack42 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %34, i32 0, i32 3, !dbg !8550
  %next_free43 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack42, i32 0, i32 3, !dbg !8550
  store i8* %33, i8** %next_free43, align 8, !dbg !8550
  %35 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !8550
  %nary_obstack44 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %35, i32 0, i32 3, !dbg !8550
  %next_free45 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack44, i32 0, i32 3, !dbg !8550
  %36 = load i8*, i8** %next_free45, align 8, !dbg !8550
  %37 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !8550
  %nary_obstack46 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %37, i32 0, i32 3, !dbg !8550
  %chunk = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack46, i32 0, i32 1, !dbg !8550
  %38 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8, !dbg !8550
  %39 = bitcast %struct._obstack_chunk* %38 to i8*, !dbg !8550
  %sub.ptr.lhs.cast47 = ptrtoint i8* %36 to i64, !dbg !8550
  %sub.ptr.rhs.cast48 = ptrtoint i8* %39 to i64, !dbg !8550
  %sub.ptr.sub49 = sub i64 %sub.ptr.lhs.cast47, %sub.ptr.rhs.cast48, !dbg !8550
  %40 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !8550
  %nary_obstack50 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %40, i32 0, i32 3, !dbg !8550
  %chunk_limit51 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack50, i32 0, i32 4, !dbg !8550
  %41 = load i8*, i8** %chunk_limit51, align 8, !dbg !8550
  %42 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !8550
  %nary_obstack52 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %42, i32 0, i32 3, !dbg !8550
  %chunk53 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack52, i32 0, i32 1, !dbg !8550
  %43 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk53, align 8, !dbg !8550
  %44 = bitcast %struct._obstack_chunk* %43 to i8*, !dbg !8550
  %sub.ptr.lhs.cast54 = ptrtoint i8* %41 to i64, !dbg !8550
  %sub.ptr.rhs.cast55 = ptrtoint i8* %44 to i64, !dbg !8550
  %sub.ptr.sub56 = sub i64 %sub.ptr.lhs.cast54, %sub.ptr.rhs.cast55, !dbg !8550
  %cmp57 = icmp sgt i64 %sub.ptr.sub49, %sub.ptr.sub56, !dbg !8550
  br i1 %cmp57, label %cond.true59, label %cond.false64, !dbg !8550

cond.true59:                                      ; preds = %cond.end25
  %45 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !8550
  %nary_obstack60 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %45, i32 0, i32 3, !dbg !8550
  %chunk_limit61 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack60, i32 0, i32 4, !dbg !8550
  %46 = load i8*, i8** %chunk_limit61, align 8, !dbg !8550
  %47 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !8550
  %nary_obstack62 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %47, i32 0, i32 3, !dbg !8550
  %next_free63 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack62, i32 0, i32 3, !dbg !8550
  store i8* %46, i8** %next_free63, align 8, !dbg !8550
  br label %cond.end65, !dbg !8550

cond.false64:                                     ; preds = %cond.end25
  br label %cond.end65, !dbg !8550

cond.end65:                                       ; preds = %cond.false64, %cond.true59
  %cond66 = phi i8* [ %46, %cond.true59 ], [ null, %cond.false64 ], !dbg !8550
  %48 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !8550
  %nary_obstack67 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %48, i32 0, i32 3, !dbg !8550
  %next_free68 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack67, i32 0, i32 3, !dbg !8550
  %49 = load i8*, i8** %next_free68, align 8, !dbg !8550
  %50 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !8550
  %nary_obstack69 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %50, i32 0, i32 3, !dbg !8550
  %object_base70 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack69, i32 0, i32 2, !dbg !8550
  store i8* %49, i8** %object_base70, align 8, !dbg !8550
  %51 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !8550
  %nary_obstack71 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %51, i32 0, i32 3, !dbg !8550
  %temp72 = getelementptr inbounds %struct.obstack, %struct.obstack* %nary_obstack71, i32 0, i32 5, !dbg !8550
  %52 = load i64, i64* %temp72, align 8, !dbg !8550
  %53 = inttoptr i64 %52 to i8*, !dbg !8550
  %54 = bitcast i8* %53 to %struct.vn_nary_op_s*, !dbg !8551
  store %struct.vn_nary_op_s* %54, %struct.vn_nary_op_s** %nary, align 8, !dbg !8549
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !8552, metadata !DIExpression()), !dbg !8553
  %55 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !8554
  %56 = bitcast %struct.vn_nary_op_s* %55 to i8*, !dbg !8555
  %57 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %onary, align 8, !dbg !8556
  %58 = bitcast %struct.vn_nary_op_s* %57 to i8*, !dbg !8555
  %59 = load i64, i64* %size, align 8, !dbg !8557
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %56, i8* align 8 %58, i64 %59, i1 false), !dbg !8555
  %60 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !8558
  %nary73 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %60, i32 0, i32 0, !dbg !8559
  %61 = load %struct.htab*, %struct.htab** %nary73, align 8, !dbg !8559
  %62 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !8560
  %63 = bitcast %struct.vn_nary_op_s* %62 to i8*, !dbg !8560
  %64 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !8561
  %hashcode = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %64, i32 0, i32 2, !dbg !8562
  %65 = load i32, i32* %hashcode, align 8, !dbg !8562
  %call = call i8** @htab_find_slot_with_hash(%struct.htab* %61, i8* %63, i32 %65, i32 1), !dbg !8563
  store i8** %call, i8*** %slot, align 8, !dbg !8564
  %66 = load i8**, i8*** %slot, align 8, !dbg !8565
  %67 = load i8*, i8** %66, align 8, !dbg !8565
  %tobool = icmp ne i8* %67, null, !dbg !8565
  br i1 %tobool, label %cond.true74, label %cond.false75, !dbg !8565

cond.true74:                                      ; preds = %cond.end65
  call void @fancy_abort(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0), i32 2781, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8565
  br label %cond.end76, !dbg !8565

cond.false75:                                     ; preds = %cond.end65
  br label %cond.end76, !dbg !8565

cond.end76:                                       ; preds = %cond.false75, %cond.true74
  %cond77 = phi i32 [ 0, %cond.true74 ], [ 0, %cond.false75 ], !dbg !8565
  %68 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !8566
  %69 = bitcast %struct.vn_nary_op_s* %68 to i8*, !dbg !8566
  %70 = load i8**, i8*** %slot, align 8, !dbg !8567
  store i8* %69, i8** %70, align 8, !dbg !8568
  ret i32 1, !dbg !8569
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @copy_phis(i8** %entry1, i8* %data) #0 !dbg !8570 {
entry:
  %entry.addr = alloca i8**, align 8
  %data.addr = alloca i8*, align 8
  %ophi = alloca %struct.vn_phi_s*, align 8
  %phi = alloca %struct.vn_phi_s*, align 8
  %slot = alloca i8**, align 8
  store i8** %entry1, i8*** %entry.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %entry.addr, metadata !8571, metadata !DIExpression()), !dbg !8572
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !8573, metadata !DIExpression()), !dbg !8574
  call void @llvm.dbg.declare(metadata %struct.vn_phi_s** %ophi, metadata !8575, metadata !DIExpression()), !dbg !8576
  %0 = load i8**, i8*** %entry.addr, align 8, !dbg !8577
  %1 = load i8*, i8** %0, align 8, !dbg !8578
  %2 = bitcast i8* %1 to %struct.vn_phi_s*, !dbg !8579
  store %struct.vn_phi_s* %2, %struct.vn_phi_s** %ophi, align 8, !dbg !8576
  call void @llvm.dbg.declare(metadata %struct.vn_phi_s** %phi, metadata !8580, metadata !DIExpression()), !dbg !8581
  %3 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !8582
  %phis_pool = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %3, i32 0, i32 4, !dbg !8583
  %4 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** %phis_pool, align 8, !dbg !8583
  %call = call i8* @pool_alloc(%struct.alloc_pool_def* %4), !dbg !8584
  %5 = bitcast i8* %call to %struct.vn_phi_s*, !dbg !8585
  store %struct.vn_phi_s* %5, %struct.vn_phi_s** %phi, align 8, !dbg !8581
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !8586, metadata !DIExpression()), !dbg !8587
  %6 = load %struct.vn_phi_s*, %struct.vn_phi_s** %phi, align 8, !dbg !8588
  %7 = bitcast %struct.vn_phi_s* %6 to i8*, !dbg !8589
  %8 = load %struct.vn_phi_s*, %struct.vn_phi_s** %ophi, align 8, !dbg !8590
  %9 = bitcast %struct.vn_phi_s* %8 to i8*, !dbg !8589
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 %9, i64 32, i1 false), !dbg !8589
  %10 = load %struct.vn_phi_s*, %struct.vn_phi_s** %ophi, align 8, !dbg !8591
  %phiargs = getelementptr inbounds %struct.vn_phi_s, %struct.vn_phi_s* %10, i32 0, i32 2, !dbg !8592
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** %phiargs, align 8, !dbg !8593
  %11 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !8594
  %phis = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %11, i32 0, i32 1, !dbg !8595
  %12 = load %struct.htab*, %struct.htab** %phis, align 8, !dbg !8595
  %13 = load %struct.vn_phi_s*, %struct.vn_phi_s** %phi, align 8, !dbg !8596
  %14 = bitcast %struct.vn_phi_s* %13 to i8*, !dbg !8596
  %15 = load %struct.vn_phi_s*, %struct.vn_phi_s** %phi, align 8, !dbg !8597
  %hashcode = getelementptr inbounds %struct.vn_phi_s, %struct.vn_phi_s* %15, i32 0, i32 1, !dbg !8598
  %16 = load i32, i32* %hashcode, align 4, !dbg !8598
  %call2 = call i8** @htab_find_slot_with_hash(%struct.htab* %12, i8* %14, i32 %16, i32 1), !dbg !8599
  store i8** %call2, i8*** %slot, align 8, !dbg !8600
  %17 = load %struct.vn_phi_s*, %struct.vn_phi_s** %phi, align 8, !dbg !8601
  %18 = bitcast %struct.vn_phi_s* %17 to i8*, !dbg !8601
  %19 = load i8**, i8*** %slot, align 8, !dbg !8602
  store i8* %18, i8** %19, align 8, !dbg !8603
  ret i32 1, !dbg !8604
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @copy_references(i8** %entry1, i8* %data) #0 !dbg !8605 {
entry:
  %entry.addr = alloca i8**, align 8
  %data.addr = alloca i8*, align 8
  %oref = alloca %struct.vn_reference_s*, align 8
  %ref = alloca %struct.vn_reference_s*, align 8
  %slot = alloca i8**, align 8
  store i8** %entry1, i8*** %entry.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %entry.addr, metadata !8606, metadata !DIExpression()), !dbg !8607
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !8608, metadata !DIExpression()), !dbg !8609
  call void @llvm.dbg.declare(metadata %struct.vn_reference_s** %oref, metadata !8610, metadata !DIExpression()), !dbg !8611
  %0 = load i8**, i8*** %entry.addr, align 8, !dbg !8612
  %1 = load i8*, i8** %0, align 8, !dbg !8613
  %2 = bitcast i8* %1 to %struct.vn_reference_s*, !dbg !8614
  store %struct.vn_reference_s* %2, %struct.vn_reference_s** %oref, align 8, !dbg !8611
  call void @llvm.dbg.declare(metadata %struct.vn_reference_s** %ref, metadata !8615, metadata !DIExpression()), !dbg !8616
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !8617, metadata !DIExpression()), !dbg !8618
  %3 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !8619
  %references_pool = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %3, i32 0, i32 5, !dbg !8620
  %4 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** %references_pool, align 8, !dbg !8620
  %call = call i8* @pool_alloc(%struct.alloc_pool_def* %4), !dbg !8621
  %5 = bitcast i8* %call to %struct.vn_reference_s*, !dbg !8622
  store %struct.vn_reference_s* %5, %struct.vn_reference_s** %ref, align 8, !dbg !8623
  %6 = load %struct.vn_reference_s*, %struct.vn_reference_s** %ref, align 8, !dbg !8624
  %7 = bitcast %struct.vn_reference_s* %6 to i8*, !dbg !8625
  %8 = load %struct.vn_reference_s*, %struct.vn_reference_s** %oref, align 8, !dbg !8626
  %9 = bitcast %struct.vn_reference_s* %8 to i8*, !dbg !8625
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 %9, i64 48, i1 false), !dbg !8625
  %10 = load %struct.vn_reference_s*, %struct.vn_reference_s** %oref, align 8, !dbg !8627
  %operands = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %10, i32 0, i32 5, !dbg !8628
  store %struct.VEC_vn_reference_op_s_heap* null, %struct.VEC_vn_reference_op_s_heap** %operands, align 8, !dbg !8629
  %11 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !8630
  %references = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %11, i32 0, i32 2, !dbg !8631
  %12 = load %struct.htab*, %struct.htab** %references, align 8, !dbg !8631
  %13 = load %struct.vn_reference_s*, %struct.vn_reference_s** %ref, align 8, !dbg !8632
  %14 = bitcast %struct.vn_reference_s* %13 to i8*, !dbg !8632
  %15 = load %struct.vn_reference_s*, %struct.vn_reference_s** %ref, align 8, !dbg !8633
  %hashcode = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %15, i32 0, i32 1, !dbg !8634
  %16 = load i32, i32* %hashcode, align 4, !dbg !8634
  %call2 = call i8** @htab_find_slot_with_hash(%struct.htab* %12, i8* %14, i32 %16, i32 1), !dbg !8635
  store i8** %call2, i8*** %slot, align 8, !dbg !8636
  %17 = load i8**, i8*** %slot, align 8, !dbg !8637
  %18 = load i8*, i8** %17, align 8, !dbg !8639
  %tobool = icmp ne i8* %18, null, !dbg !8639
  br i1 %tobool, label %if.then, label %if.end, !dbg !8640

if.then:                                          ; preds = %entry
  %19 = load i8**, i8*** %slot, align 8, !dbg !8641
  %20 = load i8*, i8** %19, align 8, !dbg !8642
  call void @free_reference(i8* %20), !dbg !8643
  br label %if.end, !dbg !8643

if.end:                                           ; preds = %if.then, %entry
  %21 = load %struct.vn_reference_s*, %struct.vn_reference_s** %ref, align 8, !dbg !8644
  %22 = bitcast %struct.vn_reference_s* %21 to i8*, !dbg !8644
  %23 = load i8**, i8*** %slot, align 8, !dbg !8645
  store i8* %22, i8** %23, align 8, !dbg !8646
  ret i32 1, !dbg !8647
}

declare dso_local void @print_gimple_stmt(%struct._IO_FILE*, %union.gimple_statement_d*, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @set_ssa_val_to(%union.tree_node* %from, %union.tree_node* %to) #0 !dbg !8648 {
entry:
  %retval = alloca i8, align 1
  %from.addr = alloca %union.tree_node*, align 8
  %to.addr = alloca %union.tree_node*, align 8
  %currval = alloca %union.tree_node*, align 8
  store %union.tree_node* %from, %union.tree_node** %from.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %from.addr, metadata !8649, metadata !DIExpression()), !dbg !8650
  store %union.tree_node* %to, %union.tree_node** %to.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %to.addr, metadata !8651, metadata !DIExpression()), !dbg !8652
  call void @llvm.dbg.declare(metadata %union.tree_node** %currval, metadata !8653, metadata !DIExpression()), !dbg !8654
  %0 = load %union.tree_node*, %union.tree_node** %from.addr, align 8, !dbg !8655
  %1 = load %union.tree_node*, %union.tree_node** %to.addr, align 8, !dbg !8657
  %cmp = icmp ne %union.tree_node* %0, %1, !dbg !8658
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !8659

land.lhs.true:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %to.addr, align 8, !dbg !8660
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !8660
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !8660
  %bf.load = load i64, i64* %3, align 8, !dbg !8660
  %bf.clear = and i64 %bf.load, 65535, !dbg !8660
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8660
  %cmp1 = icmp eq i32 %bf.cast, 141, !dbg !8661
  br i1 %cmp1, label %land.lhs.true2, label %if.end, !dbg !8662

land.lhs.true2:                                   ; preds = %land.lhs.true
  %4 = load %union.tree_node*, %union.tree_node** %to.addr, align 8, !dbg !8663
  %base3 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !8663
  %5 = bitcast %struct.tree_base* %base3 to i64*, !dbg !8663
  %bf.load4 = load i64, i64* %5, align 8, !dbg !8663
  %bf.lshr = lshr i64 %bf.load4, 22, !dbg !8663
  %bf.clear5 = and i64 %bf.lshr, 1, !dbg !8663
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !8663
  %tobool = icmp ne i32 %bf.cast6, 0, !dbg !8663
  br i1 %tobool, label %if.then, label %if.end, !dbg !8664

if.then:                                          ; preds = %land.lhs.true2
  %6 = load %union.tree_node*, %union.tree_node** %from.addr, align 8, !dbg !8665
  store %union.tree_node* %6, %union.tree_node** %to.addr, align 8, !dbg !8666
  br label %if.end, !dbg !8667

if.end:                                           ; preds = %if.then, %land.lhs.true2, %land.lhs.true, %entry
  %7 = load %union.tree_node*, %union.tree_node** %to.addr, align 8, !dbg !8668
  %cmp7 = icmp ne %union.tree_node* %7, null, !dbg !8668
  br i1 %cmp7, label %land.lhs.true8, label %cond.true, !dbg !8668

land.lhs.true8:                                   ; preds = %if.end
  %8 = load %union.tree_node*, %union.tree_node** %to.addr, align 8, !dbg !8668
  %9 = load %union.tree_node*, %union.tree_node** @VN_TOP, align 8, !dbg !8668
  %cmp9 = icmp eq %union.tree_node* %8, %9, !dbg !8668
  br i1 %cmp9, label %cond.false, label %lor.lhs.false, !dbg !8668

lor.lhs.false:                                    ; preds = %land.lhs.true8
  %10 = load %union.tree_node*, %union.tree_node** %to.addr, align 8, !dbg !8668
  %base10 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !8668
  %11 = bitcast %struct.tree_base* %base10 to i64*, !dbg !8668
  %bf.load11 = load i64, i64* %11, align 8, !dbg !8668
  %bf.clear12 = and i64 %bf.load11, 65535, !dbg !8668
  %bf.cast13 = trunc i64 %bf.clear12 to i32, !dbg !8668
  %cmp14 = icmp eq i32 %bf.cast13, 141, !dbg !8668
  br i1 %cmp14, label %cond.false, label %lor.lhs.false15, !dbg !8668

lor.lhs.false15:                                  ; preds = %lor.lhs.false
  %12 = load %union.tree_node*, %union.tree_node** %to.addr, align 8, !dbg !8668
  %call = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %12), !dbg !8668
  %conv = zext i8 %call to i32, !dbg !8668
  %tobool16 = icmp ne i32 %conv, 0, !dbg !8668
  br i1 %tobool16, label %cond.false, label %cond.true, !dbg !8668

cond.true:                                        ; preds = %lor.lhs.false15, %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0), i32 1812, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8668
  br label %cond.end, !dbg !8668

cond.false:                                       ; preds = %lor.lhs.false15, %lor.lhs.false, %land.lhs.true8
  br label %cond.end, !dbg !8668

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8668
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8669
  %tobool17 = icmp ne %struct._IO_FILE* %13, null, !dbg !8669
  br i1 %tobool17, label %land.lhs.true18, label %if.end23, !dbg !8671

land.lhs.true18:                                  ; preds = %cond.end
  %14 = load i32, i32* @dump_flags, align 4, !dbg !8672
  %and = and i32 %14, 8, !dbg !8673
  %tobool19 = icmp ne i32 %and, 0, !dbg !8673
  br i1 %tobool19, label %if.then20, label %if.end23, !dbg !8674

if.then20:                                        ; preds = %land.lhs.true18
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8675
  %call21 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %15, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.19, i64 0, i64 0)), !dbg !8677
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8678
  %17 = load %union.tree_node*, %union.tree_node** %from.addr, align 8, !dbg !8679
  call void @print_generic_expr(%struct._IO_FILE* %16, %union.tree_node* %17, i32 0), !dbg !8680
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8681
  %call22 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.20, i64 0, i64 0)), !dbg !8682
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8683
  %20 = load %union.tree_node*, %union.tree_node** %to.addr, align 8, !dbg !8684
  call void @print_generic_expr(%struct._IO_FILE* %19, %union.tree_node* %20, i32 0), !dbg !8685
  br label %if.end23, !dbg !8686

if.end23:                                         ; preds = %if.then20, %land.lhs.true18, %cond.end
  %21 = load %union.tree_node*, %union.tree_node** %from.addr, align 8, !dbg !8687
  %call24 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %21), !dbg !8687
  %valnum = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call24, i32 0, i32 0, !dbg !8687
  %22 = load %union.tree_node*, %union.tree_node** %valnum, align 8, !dbg !8687
  store %union.tree_node* %22, %union.tree_node** %currval, align 8, !dbg !8688
  %23 = load %union.tree_node*, %union.tree_node** %currval, align 8, !dbg !8689
  %24 = load %union.tree_node*, %union.tree_node** %to.addr, align 8, !dbg !8691
  %cmp25 = icmp ne %union.tree_node* %23, %24, !dbg !8692
  br i1 %cmp25, label %land.lhs.true27, label %if.end40, !dbg !8693

land.lhs.true27:                                  ; preds = %if.end23
  %25 = load %union.tree_node*, %union.tree_node** %currval, align 8, !dbg !8694
  %26 = load %union.tree_node*, %union.tree_node** %to.addr, align 8, !dbg !8695
  %call28 = call i32 @operand_equal_p(%union.tree_node* %25, %union.tree_node* %26, i32 2), !dbg !8696
  %tobool29 = icmp ne i32 %call28, 0, !dbg !8696
  br i1 %tobool29, label %if.end40, label %if.then30, !dbg !8697

if.then30:                                        ; preds = %land.lhs.true27
  %27 = load %union.tree_node*, %union.tree_node** %to.addr, align 8, !dbg !8698
  %28 = load %union.tree_node*, %union.tree_node** %from.addr, align 8, !dbg !8700
  %call31 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %28), !dbg !8701
  %valnum32 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call31, i32 0, i32 0, !dbg !8702
  store %union.tree_node* %27, %union.tree_node** %valnum32, align 8, !dbg !8703
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8704
  %tobool33 = icmp ne %struct._IO_FILE* %29, null, !dbg !8704
  br i1 %tobool33, label %land.lhs.true34, label %if.end39, !dbg !8706

land.lhs.true34:                                  ; preds = %if.then30
  %30 = load i32, i32* @dump_flags, align 4, !dbg !8707
  %and35 = and i32 %30, 8, !dbg !8708
  %tobool36 = icmp ne i32 %and35, 0, !dbg !8708
  br i1 %tobool36, label %if.then37, label %if.end39, !dbg !8709

if.then37:                                        ; preds = %land.lhs.true34
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8710
  %call38 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %31, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.21, i64 0, i64 0)), !dbg !8711
  br label %if.end39, !dbg !8711

if.end39:                                         ; preds = %if.then37, %land.lhs.true34, %if.then30
  store i8 1, i8* %retval, align 1, !dbg !8712
  br label %return, !dbg !8712

if.end40:                                         ; preds = %land.lhs.true27, %if.end23
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8713
  %tobool41 = icmp ne %struct._IO_FILE* %32, null, !dbg !8713
  br i1 %tobool41, label %land.lhs.true42, label %if.end47, !dbg !8715

land.lhs.true42:                                  ; preds = %if.end40
  %33 = load i32, i32* @dump_flags, align 4, !dbg !8716
  %and43 = and i32 %33, 8, !dbg !8717
  %tobool44 = icmp ne i32 %and43, 0, !dbg !8717
  br i1 %tobool44, label %if.then45, label %if.end47, !dbg !8718

if.then45:                                        ; preds = %land.lhs.true42
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8719
  %call46 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %34, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !8720
  br label %if.end47, !dbg !8720

if.end47:                                         ; preds = %if.then45, %land.lhs.true42, %if.end40
  store i8 0, i8* %retval, align 1, !dbg !8721
  br label %return, !dbg !8721

return:                                           ; preds = %if.end47, %if.end39
  %35 = load i8, i8* %retval, align 1, !dbg !8722
  ret i8 %35, !dbg !8722
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @visit_phi(%union.gimple_statement_d* %phi) #0 !dbg !8723 {
entry:
  %retval = alloca i8, align 1
  %phi.addr = alloca %union.gimple_statement_d*, align 8
  %changed = alloca i8, align 1
  %result = alloca %union.tree_node*, align 8
  %sameval = alloca %union.tree_node*, align 8
  %allsame = alloca i8, align 1
  %i = alloca i32, align 4
  %def = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %phi, %union.gimple_statement_d** %phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi.addr, metadata !8726, metadata !DIExpression()), !dbg !8727
  call void @llvm.dbg.declare(metadata i8* %changed, metadata !8728, metadata !DIExpression()), !dbg !8729
  store i8 0, i8* %changed, align 1, !dbg !8729
  call void @llvm.dbg.declare(metadata %union.tree_node** %result, metadata !8730, metadata !DIExpression()), !dbg !8731
  call void @llvm.dbg.declare(metadata %union.tree_node** %sameval, metadata !8732, metadata !DIExpression()), !dbg !8733
  %0 = load %union.tree_node*, %union.tree_node** @VN_TOP, align 8, !dbg !8734
  store %union.tree_node* %0, %union.tree_node** %sameval, align 8, !dbg !8733
  call void @llvm.dbg.declare(metadata i8* %allsame, metadata !8735, metadata !DIExpression()), !dbg !8736
  store i8 1, i8* %allsame, align 1, !dbg !8736
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8737, metadata !DIExpression()), !dbg !8738
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !8739
  %call = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %1), !dbg !8739
  %call1 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call), !dbg !8739
  %base = bitcast %union.tree_node* %call1 to %struct.tree_base*, !dbg !8739
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !8739
  %bf.load = load i64, i64* %2, align 8, !dbg !8739
  %bf.lshr = lshr i64 %bf.load, 22, !dbg !8739
  %bf.clear = and i64 %bf.lshr, 1, !dbg !8739
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8739
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !8739
  br i1 %tobool, label %if.then, label %if.end, !dbg !8741

if.then:                                          ; preds = %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !8742
  %call2 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %3), !dbg !8742
  %call3 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call2), !dbg !8742
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !8743
  %call4 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %4), !dbg !8743
  %call5 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call4), !dbg !8743
  %call6 = call zeroext i8 @set_ssa_val_to(%union.tree_node* %call3, %union.tree_node* %call5), !dbg !8744
  store i8 %call6, i8* %retval, align 1, !dbg !8745
  br label %return, !dbg !8745

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !8746
  br label %for.cond, !dbg !8748

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load i32, i32* %i, align 4, !dbg !8749
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !8751
  %call7 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %6), !dbg !8752
  %cmp = icmp ult i32 %5, %call7, !dbg !8753
  br i1 %cmp, label %for.body, label %for.end, !dbg !8754

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %def, metadata !8755, metadata !DIExpression()), !dbg !8757
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !8758
  %8 = load i32, i32* %i, align 4, !dbg !8758
  %call8 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %7, i32 %8), !dbg !8758
  %call9 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call8), !dbg !8758
  store %union.tree_node* %call9, %union.tree_node** %def, align 8, !dbg !8757
  %9 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !8759
  %base10 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !8759
  %10 = bitcast %struct.tree_base* %base10 to i64*, !dbg !8759
  %bf.load11 = load i64, i64* %10, align 8, !dbg !8759
  %bf.clear12 = and i64 %bf.load11, 65535, !dbg !8759
  %bf.cast13 = trunc i64 %bf.clear12 to i32, !dbg !8759
  %cmp14 = icmp eq i32 %bf.cast13, 141, !dbg !8761
  br i1 %cmp14, label %if.then15, label %if.end17, !dbg !8762

if.then15:                                        ; preds = %for.body
  %11 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !8763
  %call16 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %11), !dbg !8763
  %valnum = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call16, i32 0, i32 0, !dbg !8763
  %12 = load %union.tree_node*, %union.tree_node** %valnum, align 8, !dbg !8763
  store %union.tree_node* %12, %union.tree_node** %def, align 8, !dbg !8764
  br label %if.end17, !dbg !8765

if.end17:                                         ; preds = %if.then15, %for.body
  %13 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !8766
  %14 = load %union.tree_node*, %union.tree_node** @VN_TOP, align 8, !dbg !8768
  %cmp18 = icmp eq %union.tree_node* %13, %14, !dbg !8769
  br i1 %cmp18, label %if.then19, label %if.end20, !dbg !8770

if.then19:                                        ; preds = %if.end17
  br label %for.inc, !dbg !8771

if.end20:                                         ; preds = %if.end17
  %15 = load %union.tree_node*, %union.tree_node** %sameval, align 8, !dbg !8772
  %16 = load %union.tree_node*, %union.tree_node** @VN_TOP, align 8, !dbg !8774
  %cmp21 = icmp eq %union.tree_node* %15, %16, !dbg !8775
  br i1 %cmp21, label %if.then22, label %if.else, !dbg !8776

if.then22:                                        ; preds = %if.end20
  %17 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !8777
  store %union.tree_node* %17, %union.tree_node** %sameval, align 8, !dbg !8779
  br label %if.end27, !dbg !8780

if.else:                                          ; preds = %if.end20
  %18 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !8781
  %19 = load %union.tree_node*, %union.tree_node** %sameval, align 8, !dbg !8784
  %call23 = call zeroext i8 @expressions_equal_p(%union.tree_node* %18, %union.tree_node* %19), !dbg !8785
  %tobool24 = icmp ne i8 %call23, 0, !dbg !8785
  br i1 %tobool24, label %if.end26, label %if.then25, !dbg !8786

if.then25:                                        ; preds = %if.else
  store i8 0, i8* %allsame, align 1, !dbg !8787
  br label %for.end, !dbg !8789

if.end26:                                         ; preds = %if.else
  br label %if.end27

if.end27:                                         ; preds = %if.end26, %if.then22
  br label %for.inc, !dbg !8790

for.inc:                                          ; preds = %if.end27, %if.then19
  %20 = load i32, i32* %i, align 4, !dbg !8791
  %inc = add i32 %20, 1, !dbg !8791
  store i32 %inc, i32* %i, align 4, !dbg !8791
  br label %for.cond, !dbg !8792, !llvm.loop !8793

for.end:                                          ; preds = %if.then25, %for.cond
  %21 = load i8, i8* %allsame, align 1, !dbg !8795
  %tobool28 = icmp ne i8 %21, 0, !dbg !8795
  br i1 %tobool28, label %if.then29, label %if.end66, !dbg !8797

if.then29:                                        ; preds = %for.end
  %22 = load %union.tree_node*, %union.tree_node** %sameval, align 8, !dbg !8798
  %call30 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %22), !dbg !8801
  %tobool31 = icmp ne i8 %call30, 0, !dbg !8801
  br i1 %tobool31, label %if.then32, label %if.else41, !dbg !8802

if.then32:                                        ; preds = %if.then29
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !8803
  %call33 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %23), !dbg !8803
  %call34 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call33), !dbg !8803
  %call35 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %call34), !dbg !8805
  %has_constants = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call35, i32 0, i32 5, !dbg !8806
  %bf.load36 = load i8, i8* %has_constants, align 4, !dbg !8807
  %bf.clear37 = and i8 %bf.load36, -5, !dbg !8807
  %bf.set = or i8 %bf.clear37, 4, !dbg !8807
  store i8 %bf.set, i8* %has_constants, align 4, !dbg !8807
  %24 = load %union.tree_node*, %union.tree_node** %sameval, align 8, !dbg !8808
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !8809
  %call38 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %25), !dbg !8809
  %call39 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call38), !dbg !8809
  %call40 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %call39), !dbg !8810
  %expr = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call40, i32 0, i32 1, !dbg !8811
  store %union.tree_node* %24, %union.tree_node** %expr, align 8, !dbg !8812
  br label %if.end52, !dbg !8813

if.else41:                                        ; preds = %if.then29
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !8814
  %call42 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %26), !dbg !8814
  %call43 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call42), !dbg !8814
  %call44 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %call43), !dbg !8816
  %has_constants45 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call44, i32 0, i32 5, !dbg !8817
  %bf.load46 = load i8, i8* %has_constants45, align 4, !dbg !8818
  %bf.clear47 = and i8 %bf.load46, -5, !dbg !8818
  store i8 %bf.clear47, i8* %has_constants45, align 4, !dbg !8818
  %27 = load %union.tree_node*, %union.tree_node** %sameval, align 8, !dbg !8819
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !8820
  %call48 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %28), !dbg !8820
  %call49 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call48), !dbg !8820
  %call50 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %call49), !dbg !8821
  %expr51 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call50, i32 0, i32 1, !dbg !8822
  store %union.tree_node* %27, %union.tree_node** %expr51, align 8, !dbg !8823
  br label %if.end52

if.end52:                                         ; preds = %if.else41, %if.then32
  %29 = load %union.tree_node*, %union.tree_node** %sameval, align 8, !dbg !8824
  %base53 = bitcast %union.tree_node* %29 to %struct.tree_base*, !dbg !8824
  %30 = bitcast %struct.tree_base* %base53 to i64*, !dbg !8824
  %bf.load54 = load i64, i64* %30, align 8, !dbg !8824
  %bf.clear55 = and i64 %bf.load54, 65535, !dbg !8824
  %bf.cast56 = trunc i64 %bf.clear55 to i32, !dbg !8824
  %cmp57 = icmp eq i32 %bf.cast56, 141, !dbg !8826
  br i1 %cmp57, label %if.then58, label %if.end62, !dbg !8827

if.then58:                                        ; preds = %if.end52
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !8828
  %call59 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %31), !dbg !8828
  %call60 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call59), !dbg !8828
  %32 = load %union.tree_node*, %union.tree_node** %sameval, align 8, !dbg !8829
  %call61 = call zeroext i8 @visit_copy(%union.tree_node* %call60, %union.tree_node* %32), !dbg !8830
  store i8 %call61, i8* %retval, align 1, !dbg !8831
  br label %return, !dbg !8831

if.end62:                                         ; preds = %if.end52
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !8832
  %call63 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %33), !dbg !8832
  %call64 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call63), !dbg !8832
  %34 = load %union.tree_node*, %union.tree_node** %sameval, align 8, !dbg !8833
  %call65 = call zeroext i8 @set_ssa_val_to(%union.tree_node* %call64, %union.tree_node* %34), !dbg !8834
  store i8 %call65, i8* %retval, align 1, !dbg !8835
  br label %return, !dbg !8835

if.end66:                                         ; preds = %for.end
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !8836
  %call67 = call %union.tree_node* @vn_phi_lookup(%union.gimple_statement_d* %35), !dbg !8837
  store %union.tree_node* %call67, %union.tree_node** %result, align 8, !dbg !8838
  %36 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !8839
  %tobool68 = icmp ne %union.tree_node* %36, null, !dbg !8839
  br i1 %tobool68, label %if.then69, label %if.else84, !dbg !8841

if.then69:                                        ; preds = %if.end66
  %37 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !8842
  %base70 = bitcast %union.tree_node* %37 to %struct.tree_base*, !dbg !8842
  %38 = bitcast %struct.tree_base* %base70 to i64*, !dbg !8842
  %bf.load71 = load i64, i64* %38, align 8, !dbg !8842
  %bf.clear72 = and i64 %bf.load71, 65535, !dbg !8842
  %bf.cast73 = trunc i64 %bf.clear72 to i32, !dbg !8842
  %cmp74 = icmp eq i32 %bf.cast73, 141, !dbg !8845
  br i1 %cmp74, label %if.then75, label %if.else79, !dbg !8846

if.then75:                                        ; preds = %if.then69
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !8847
  %call76 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %39), !dbg !8847
  %call77 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call76), !dbg !8847
  %40 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !8848
  %call78 = call zeroext i8 @visit_copy(%union.tree_node* %call77, %union.tree_node* %40), !dbg !8849
  store i8 %call78, i8* %changed, align 1, !dbg !8850
  br label %if.end83, !dbg !8851

if.else79:                                        ; preds = %if.then69
  %41 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !8852
  %call80 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %41), !dbg !8852
  %call81 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call80), !dbg !8852
  %42 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !8853
  %call82 = call zeroext i8 @set_ssa_val_to(%union.tree_node* %call81, %union.tree_node* %42), !dbg !8854
  store i8 %call82, i8* %changed, align 1, !dbg !8855
  br label %if.end83

if.end83:                                         ; preds = %if.else79, %if.then75
  br label %if.end105, !dbg !8856

if.else84:                                        ; preds = %if.end66
  %43 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !8857
  %44 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !8859
  %call85 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %44), !dbg !8859
  %call86 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call85), !dbg !8859
  %call87 = call %struct.vn_phi_s* @vn_phi_insert(%union.gimple_statement_d* %43, %union.tree_node* %call86), !dbg !8860
  %45 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !8861
  %call88 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %45), !dbg !8861
  %call89 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call88), !dbg !8861
  %call90 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %call89), !dbg !8862
  %has_constants91 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call90, i32 0, i32 5, !dbg !8863
  %bf.load92 = load i8, i8* %has_constants91, align 4, !dbg !8864
  %bf.clear93 = and i8 %bf.load92, -5, !dbg !8864
  store i8 %bf.clear93, i8* %has_constants91, align 4, !dbg !8864
  %46 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !8865
  %call94 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %46), !dbg !8865
  %call95 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call94), !dbg !8865
  %47 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !8866
  %call96 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %47), !dbg !8866
  %call97 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call96), !dbg !8866
  %call98 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %call97), !dbg !8867
  %expr99 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call98, i32 0, i32 1, !dbg !8868
  store %union.tree_node* %call95, %union.tree_node** %expr99, align 8, !dbg !8869
  %48 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !8870
  %call100 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %48), !dbg !8870
  %call101 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call100), !dbg !8870
  %49 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !8871
  %call102 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %49), !dbg !8871
  %call103 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call102), !dbg !8871
  %call104 = call zeroext i8 @set_ssa_val_to(%union.tree_node* %call101, %union.tree_node* %call103), !dbg !8872
  store i8 %call104, i8* %changed, align 1, !dbg !8873
  br label %if.end105

if.end105:                                        ; preds = %if.else84, %if.end83
  %50 = load i8, i8* %changed, align 1, !dbg !8874
  store i8 %50, i8* %retval, align 1, !dbg !8875
  br label %return, !dbg !8875

return:                                           ; preds = %if.end105, %if.end62, %if.then58, %if.then
  %51 = load i8, i8* %retval, align 1, !dbg !8876
  ret i8 %51, !dbg !8876
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_lhs(%union.gimple_statement_d* %stmt) #0 !dbg !8877 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8878, metadata !DIExpression()), !dbg !8879
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8880
  %call = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %0), !dbg !8881
  %conv = zext i8 %call to i32, !dbg !8881
  %tobool = icmp ne i32 %conv, 0, !dbg !8881
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !8882

lor.rhs:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8883
  %call1 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %1), !dbg !8884
  %conv2 = zext i8 %call1 to i32, !dbg !8884
  %tobool3 = icmp ne i32 %conv2, 0, !dbg !8884
  br i1 %tobool3, label %land.rhs, label %land.end, !dbg !8885

land.rhs:                                         ; preds = %lor.rhs
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8886
  %call4 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %2), !dbg !8887
  %cmp = icmp ne %union.tree_node* %call4, null, !dbg !8888
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %3 = phi i1 [ false, %lor.rhs ], [ %cmp, %land.rhs ], !dbg !8889
  br label %lor.end, !dbg !8882

lor.end:                                          ; preds = %land.end, %entry
  %4 = phi i1 [ true, %entry ], [ %3, %land.end ]
  %lor.ext = zext i1 %4 to i32, !dbg !8882
  %conv6 = trunc i32 %lor.ext to i8, !dbg !8890
  ret i8 %conv6, !dbg !8891
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_volatile_ops(%union.gimple_statement_d* %stmt) #0 !dbg !8892 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8893, metadata !DIExpression()), !dbg !8894
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8895
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !8897
  %tobool = icmp ne i8 %call, 0, !dbg !8897
  br i1 %tobool, label %if.then, label %if.else, !dbg !8898

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8899
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !8900
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !8901
  %bf.load = load i32, i32* %2, align 8, !dbg !8901
  %bf.lshr = lshr i32 %bf.load, 14, !dbg !8901
  %bf.clear = and i32 %bf.lshr, 1, !dbg !8901
  %conv = trunc i32 %bf.clear to i8, !dbg !8899
  store i8 %conv, i8* %retval, align 1, !dbg !8902
  br label %return, !dbg !8902

if.else:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !8903
  br label %return, !dbg !8903

return:                                           ; preds = %if.else, %if.then
  %3 = load i8, i8* %retval, align 1, !dbg !8904
  ret i8 %3, !dbg !8904
}

declare dso_local zeroext i8 @stmt_could_throw_p(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @defs_to_varying(%union.gimple_statement_d* %stmt) #0 !dbg !8905 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %changed = alloca i8, align 1
  %iter = alloca %struct.ssa_operand_iterator_d, align 8
  %defp = alloca %union.tree_node**, align 8
  %def = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8906, metadata !DIExpression()), !dbg !8907
  call void @llvm.dbg.declare(metadata i8* %changed, metadata !8908, metadata !DIExpression()), !dbg !8909
  store i8 0, i8* %changed, align 1, !dbg !8909
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %iter, metadata !8910, metadata !DIExpression()), !dbg !8911
  call void @llvm.dbg.declare(metadata %union.tree_node*** %defp, metadata !8912, metadata !DIExpression()), !dbg !8913
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8914
  %call = call %union.tree_node** @op_iter_init_def(%struct.ssa_operand_iterator_d* %iter, %union.gimple_statement_d* %0, i32 10), !dbg !8914
  store %union.tree_node** %call, %union.tree_node*** %defp, align 8, !dbg !8914
  br label %for.cond, !dbg !8914

for.cond:                                         ; preds = %for.inc, %entry
  %call1 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !8916
  %tobool = icmp ne i8 %call1, 0, !dbg !8916
  %lnot = xor i1 %tobool, true, !dbg !8916
  br i1 %lnot, label %for.body, label %for.end, !dbg !8914

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %def, metadata !8918, metadata !DIExpression()), !dbg !8920
  %1 = load %union.tree_node**, %union.tree_node*** %defp, align 8, !dbg !8921
  %call2 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %1), !dbg !8921
  store %union.tree_node* %call2, %union.tree_node** %def, align 8, !dbg !8920
  %2 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !8922
  %call3 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %2), !dbg !8923
  %use_processed = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call3, i32 0, i32 5, !dbg !8924
  %bf.load = load i8, i8* %use_processed, align 4, !dbg !8925
  %bf.clear = and i8 %bf.load, -9, !dbg !8925
  %bf.set = or i8 %bf.clear, 8, !dbg !8925
  store i8 %bf.set, i8* %use_processed, align 4, !dbg !8925
  %3 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !8926
  %4 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !8927
  %call4 = call zeroext i8 @set_ssa_val_to(%union.tree_node* %3, %union.tree_node* %4), !dbg !8928
  %conv = zext i8 %call4 to i32, !dbg !8928
  %5 = load i8, i8* %changed, align 1, !dbg !8929
  %conv5 = zext i8 %5 to i32, !dbg !8929
  %or = or i32 %conv5, %conv, !dbg !8929
  %conv6 = trunc i32 %or to i8, !dbg !8929
  store i8 %conv6, i8* %changed, align 1, !dbg !8929
  br label %for.inc, !dbg !8930

for.inc:                                          ; preds = %for.body
  %call7 = call %union.tree_node** @op_iter_next_def(%struct.ssa_operand_iterator_d* %iter), !dbg !8916
  store %union.tree_node** %call7, %union.tree_node*** %defp, align 8, !dbg !8916
  br label %for.cond, !dbg !8916, !llvm.loop !8931

for.end:                                          ; preds = %for.cond
  %6 = load i8, i8* %changed, align 1, !dbg !8933
  ret i8 %6, !dbg !8934
}

declare dso_local zeroext i8 @gimple_assign_copy_p(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @visit_copy(%union.tree_node* %lhs, %union.tree_node* %rhs) #0 !dbg !8935 {
entry:
  %lhs.addr = alloca %union.tree_node*, align 8
  %rhs.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !8936, metadata !DIExpression()), !dbg !8937
  store %union.tree_node* %rhs, %union.tree_node** %rhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs.addr, metadata !8938, metadata !DIExpression()), !dbg !8939
  br label %while.cond, !dbg !8940

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !8941
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !8941
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !8941
  %bf.load = load i64, i64* %1, align 8, !dbg !8941
  %bf.clear = and i64 %bf.load, 65535, !dbg !8941
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8941
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !8942
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !8943

land.rhs:                                         ; preds = %while.cond
  %2 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !8944
  %call = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %2), !dbg !8944
  %valnum = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call, i32 0, i32 0, !dbg !8944
  %3 = load %union.tree_node*, %union.tree_node** %valnum, align 8, !dbg !8944
  %4 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !8945
  %cmp1 = icmp ne %union.tree_node* %3, %4, !dbg !8946
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %5 = phi i1 [ false, %while.cond ], [ %cmp1, %land.rhs ], !dbg !8947
  br i1 %5, label %while.body, label %while.end, !dbg !8940

while.body:                                       ; preds = %land.end
  %6 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !8948
  %call2 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %6), !dbg !8948
  %valnum3 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call2, i32 0, i32 0, !dbg !8948
  %7 = load %union.tree_node*, %union.tree_node** %valnum3, align 8, !dbg !8948
  store %union.tree_node* %7, %union.tree_node** %rhs.addr, align 8, !dbg !8949
  br label %while.cond, !dbg !8940, !llvm.loop !8950

while.end:                                        ; preds = %land.end
  %8 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !8951
  %base4 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !8951
  %9 = bitcast %struct.tree_base* %base4 to i64*, !dbg !8951
  %bf.load5 = load i64, i64* %9, align 8, !dbg !8951
  %bf.clear6 = and i64 %bf.load5, 65535, !dbg !8951
  %bf.cast7 = trunc i64 %bf.clear6 to i32, !dbg !8951
  %cmp8 = icmp eq i32 %bf.cast7, 141, !dbg !8953
  br i1 %cmp8, label %if.then, label %if.end, !dbg !8954

if.then:                                          ; preds = %while.end
  %10 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !8955
  %call9 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %10), !dbg !8957
  %has_constants = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call9, i32 0, i32 5, !dbg !8958
  %bf.load10 = load i8, i8* %has_constants, align 4, !dbg !8958
  %bf.lshr = lshr i8 %bf.load10, 2, !dbg !8958
  %bf.clear11 = and i8 %bf.lshr, 1, !dbg !8958
  %bf.cast12 = zext i8 %bf.clear11 to i32, !dbg !8958
  %11 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !8959
  %call13 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %11), !dbg !8960
  %has_constants14 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call13, i32 0, i32 5, !dbg !8961
  %12 = trunc i32 %bf.cast12 to i8, !dbg !8962
  %bf.load15 = load i8, i8* %has_constants14, align 4, !dbg !8962
  %bf.value = and i8 %12, 1, !dbg !8962
  %bf.shl = shl i8 %bf.value, 2, !dbg !8962
  %bf.clear16 = and i8 %bf.load15, -5, !dbg !8962
  %bf.set = or i8 %bf.clear16, %bf.shl, !dbg !8962
  store i8 %bf.set, i8* %has_constants14, align 4, !dbg !8962
  %bf.result.cast = zext i8 %bf.value to i32, !dbg !8962
  %13 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !8963
  %call17 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %13), !dbg !8964
  %expr = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call17, i32 0, i32 1, !dbg !8965
  %14 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !8965
  %15 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !8966
  %call18 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %15), !dbg !8967
  %expr19 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call18, i32 0, i32 1, !dbg !8968
  store %union.tree_node* %14, %union.tree_node** %expr19, align 8, !dbg !8969
  br label %if.end, !dbg !8970

if.end:                                           ; preds = %if.then, %while.end
  %16 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !8971
  %17 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !8972
  %call20 = call zeroext i8 @set_ssa_val_to(%union.tree_node* %16, %union.tree_node* %17), !dbg !8973
  ret i8 %call20, !dbg !8974
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @try_to_simplify(%union.gimple_statement_d* %stmt) #0 !dbg !8975 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %tem = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8978, metadata !DIExpression()), !dbg !8979
  call void @llvm.dbg.declare(metadata %union.tree_node** %tem, metadata !8980, metadata !DIExpression()), !dbg !8981
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8982
  %call = call zeroext i8 @gimple_assign_copy_p(%union.gimple_statement_d* %0), !dbg !8984
  %conv = zext i8 %call to i32, !dbg !8984
  %tobool = icmp ne i32 %conv, 0, !dbg !8984
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !8985

land.lhs.true:                                    ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8986
  %call1 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %1), !dbg !8986
  %base = bitcast %union.tree_node* %call1 to %struct.tree_base*, !dbg !8986
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !8986
  %bf.load = load i64, i64* %2, align 8, !dbg !8986
  %bf.clear = and i64 %bf.load, 65535, !dbg !8986
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8986
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !8987
  br i1 %cmp, label %if.then, label %if.end, !dbg !8988

if.then:                                          ; preds = %land.lhs.true
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8989
  br label %return, !dbg !8989

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8990
  %call3 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %3), !dbg !8990
  %idxprom = sext i32 %call3 to i64, !dbg !8990
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !8990
  %4 = load i32, i32* %arrayidx, align 4, !dbg !8990
  switch i32 %4, label %sw.default [
    i32 3, label %sw.bb
    i32 4, label %sw.bb9
    i32 6, label %sw.bb39
    i32 5, label %sw.bb41
    i32 7, label %sw.bb41
  ], !dbg !8991

sw.bb:                                            ; preds = %if.end
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8992
  %call4 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %5), !dbg !8994
  %call5 = call %union.tree_node* @get_symbol_constant_value(%union.tree_node* %call4), !dbg !8995
  store %union.tree_node* %call5, %union.tree_node** %tem, align 8, !dbg !8996
  %6 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !8997
  %tobool6 = icmp ne %union.tree_node* %6, null, !dbg !8997
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !8999

if.then7:                                         ; preds = %sw.bb
  %7 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !9000
  store %union.tree_node* %7, %union.tree_node** %retval, align 8, !dbg !9001
  br label %return, !dbg !9001

if.end8:                                          ; preds = %sw.bb
  br label %sw.epilog, !dbg !9002

sw.bb9:                                           ; preds = %if.end
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9003
  %call10 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %8), !dbg !9004
  %call11 = call %union.tree_node* @fold_const_aggregate_ref(%union.tree_node* %call10), !dbg !9005
  store %union.tree_node* %call11, %union.tree_node** %tem, align 8, !dbg !9006
  %9 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !9007
  %tobool12 = icmp ne %union.tree_node* %9, null, !dbg !9007
  br i1 %tobool12, label %if.then13, label %if.end14, !dbg !9009

if.then13:                                        ; preds = %sw.bb9
  %10 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !9010
  store %union.tree_node* %10, %union.tree_node** %retval, align 8, !dbg !9011
  br label %return, !dbg !9011

if.end14:                                         ; preds = %sw.bb9
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9012
  %call15 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %11), !dbg !9012
  %base16 = bitcast %union.tree_node* %call15 to %struct.tree_base*, !dbg !9012
  %12 = bitcast %struct.tree_base* %base16 to i64*, !dbg !9012
  %bf.load17 = load i64, i64* %12, align 8, !dbg !9012
  %bf.clear18 = and i64 %bf.load17, 65535, !dbg !9012
  %bf.cast19 = trunc i64 %bf.clear18 to i32, !dbg !9012
  %cmp20 = icmp eq i32 %bf.cast19, 43, !dbg !9014
  br i1 %cmp20, label %if.end38, label %lor.lhs.false, !dbg !9015

lor.lhs.false:                                    ; preds = %if.end14
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9016
  %call22 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %13), !dbg !9016
  %base23 = bitcast %union.tree_node* %call22 to %struct.tree_base*, !dbg !9016
  %14 = bitcast %struct.tree_base* %base23 to i64*, !dbg !9016
  %bf.load24 = load i64, i64* %14, align 8, !dbg !9016
  %bf.clear25 = and i64 %bf.load24, 65535, !dbg !9016
  %bf.cast26 = trunc i64 %bf.clear25 to i32, !dbg !9016
  %cmp27 = icmp eq i32 %bf.cast26, 44, !dbg !9017
  br i1 %cmp27, label %if.end38, label %lor.lhs.false29, !dbg !9018

lor.lhs.false29:                                  ; preds = %lor.lhs.false
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9019
  %call30 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %15), !dbg !9019
  %base31 = bitcast %union.tree_node* %call30 to %struct.tree_base*, !dbg !9019
  %16 = bitcast %struct.tree_base* %base31 to i64*, !dbg !9019
  %bf.load32 = load i64, i64* %16, align 8, !dbg !9019
  %bf.clear33 = and i64 %bf.load32, 65535, !dbg !9019
  %bf.cast34 = trunc i64 %bf.clear33 to i32, !dbg !9019
  %cmp35 = icmp eq i32 %bf.cast34, 118, !dbg !9020
  br i1 %cmp35, label %if.end38, label %if.then37, !dbg !9021

if.then37:                                        ; preds = %lor.lhs.false29
  br label %sw.epilog, !dbg !9022

if.end38:                                         ; preds = %lor.lhs.false29, %lor.lhs.false, %if.end14
  br label %sw.bb39, !dbg !9023

sw.bb39:                                          ; preds = %if.end, %if.end38
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9024
  %call40 = call %union.tree_node* @simplify_unary_expression(%union.gimple_statement_d* %17), !dbg !9025
  store %union.tree_node* %call40, %union.tree_node** %retval, align 8, !dbg !9026
  br label %return, !dbg !9026

sw.bb41:                                          ; preds = %if.end, %if.end
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9027
  %call42 = call %union.tree_node* @simplify_binary_expression(%union.gimple_statement_d* %18), !dbg !9028
  store %union.tree_node* %call42, %union.tree_node** %retval, align 8, !dbg !9029
  br label %return, !dbg !9029

sw.default:                                       ; preds = %if.end
  br label %sw.epilog, !dbg !9030

sw.epilog:                                        ; preds = %sw.default, %if.then37, %if.end8
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9031
  br label %return, !dbg !9031

return:                                           ; preds = %sw.epilog, %sw.bb41, %sw.bb39, %if.then13, %if.then7, %if.then
  %19 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !9032
  ret %union.tree_node* %19, !dbg !9032
}

declare dso_local void @print_gimple_expr(%struct._IO_FILE*, %union.gimple_statement_d*, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @expr_has_constants(%union.tree_node* %expr) #0 !dbg !9033 {
entry:
  %retval = alloca i8, align 1
  %expr.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !9034, metadata !DIExpression()), !dbg !9035
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !9036
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !9036
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !9036
  %bf.load = load i64, i64* %1, align 8, !dbg !9036
  %bf.clear = and i64 %bf.load, 65535, !dbg !9036
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9036
  %idxprom = sext i32 %bf.cast to i64, !dbg !9036
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !9036
  %2 = load i32, i32* %arrayidx, align 4, !dbg !9036
  switch i32 %2, label %sw.default [
    i32 6, label %sw.bb
    i32 7, label %sw.bb2
    i32 4, label %sw.bb14
    i32 3, label %sw.bb14
  ], !dbg !9037

sw.bb:                                            ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !9038
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !9038
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !9038
  %arrayidx1 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !9038
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx1, align 8, !dbg !9038
  %call = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %4), !dbg !9040
  store i8 %call, i8* %retval, align 1, !dbg !9041
  br label %return, !dbg !9041

sw.bb2:                                           ; preds = %entry
  %5 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !9042
  %exp3 = bitcast %union.tree_node* %5 to %struct.tree_exp*, !dbg !9042
  %operands4 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3, i32 0, i32 3, !dbg !9042
  %arrayidx5 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4, i64 0, i64 0, !dbg !9042
  %6 = load %union.tree_node*, %union.tree_node** %arrayidx5, align 8, !dbg !9042
  %call6 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %6), !dbg !9043
  %conv = zext i8 %call6 to i32, !dbg !9043
  %tobool = icmp ne i32 %conv, 0, !dbg !9043
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !9044

lor.rhs:                                          ; preds = %sw.bb2
  %7 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !9045
  %exp7 = bitcast %union.tree_node* %7 to %struct.tree_exp*, !dbg !9045
  %operands8 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp7, i32 0, i32 3, !dbg !9045
  %arrayidx9 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands8, i64 0, i64 1, !dbg !9045
  %8 = load %union.tree_node*, %union.tree_node** %arrayidx9, align 8, !dbg !9045
  %call10 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %8), !dbg !9046
  %conv11 = zext i8 %call10 to i32, !dbg !9046
  %tobool12 = icmp ne i32 %conv11, 0, !dbg !9044
  br label %lor.end, !dbg !9044

lor.end:                                          ; preds = %lor.rhs, %sw.bb2
  %9 = phi i1 [ true, %sw.bb2 ], [ %tobool12, %lor.rhs ]
  %lor.ext = zext i1 %9 to i32, !dbg !9044
  %conv13 = trunc i32 %lor.ext to i8, !dbg !9043
  store i8 %conv13, i8* %retval, align 1, !dbg !9047
  br label %return, !dbg !9047

sw.bb14:                                          ; preds = %entry, %entry
  store i8 0, i8* %retval, align 1, !dbg !9048
  br label %return, !dbg !9048

sw.default:                                       ; preds = %entry
  %10 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !9049
  %call15 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %10), !dbg !9050
  store i8 %call15, i8* %retval, align 1, !dbg !9051
  br label %return, !dbg !9051

return:                                           ; preds = %sw.default, %sw.bb14, %lor.end, %sw.bb
  %11 = load i8, i8* %retval, align 1, !dbg !9052
  ret i8 %11, !dbg !9052
}

declare dso_local %union.tree_node* @unshare_expr(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @stmt_has_constants(%union.gimple_statement_d* %stmt) #0 !dbg !9053 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !9054, metadata !DIExpression()), !dbg !9055
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9056
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !9058
  %cmp = icmp ne i32 %call, 6, !dbg !9059
  br i1 %cmp, label %if.then, label %if.end, !dbg !9060

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !9061
  br label %return, !dbg !9061

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9062
  %call1 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %1), !dbg !9063
  %call2 = call i32 @get_gimple_rhs_class(i32 %call1), !dbg !9064
  switch i32 %call2, label %sw.default [
    i32 2, label %sw.bb
    i32 1, label %sw.bb5
    i32 3, label %sw.bb13
  ], !dbg !9065

sw.bb:                                            ; preds = %if.end
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9066
  %call3 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %2), !dbg !9068
  %call4 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %call3), !dbg !9069
  store i8 %call4, i8* %retval, align 1, !dbg !9070
  br label %return, !dbg !9070

sw.bb5:                                           ; preds = %if.end
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9071
  %call6 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %3), !dbg !9072
  %call7 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %call6), !dbg !9073
  %conv = zext i8 %call7 to i32, !dbg !9073
  %tobool = icmp ne i32 %conv, 0, !dbg !9073
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !9074

lor.rhs:                                          ; preds = %sw.bb5
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9075
  %call8 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %4), !dbg !9076
  %call9 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %call8), !dbg !9077
  %conv10 = zext i8 %call9 to i32, !dbg !9077
  %tobool11 = icmp ne i32 %conv10, 0, !dbg !9074
  br label %lor.end, !dbg !9074

lor.end:                                          ; preds = %lor.rhs, %sw.bb5
  %5 = phi i1 [ true, %sw.bb5 ], [ %tobool11, %lor.rhs ]
  %lor.ext = zext i1 %5 to i32, !dbg !9074
  %conv12 = trunc i32 %lor.ext to i8, !dbg !9078
  store i8 %conv12, i8* %retval, align 1, !dbg !9079
  br label %return, !dbg !9079

sw.bb13:                                          ; preds = %if.end
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9080
  %call14 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %6), !dbg !9081
  %call15 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %call14), !dbg !9082
  store i8 %call15, i8* %retval, align 1, !dbg !9083
  br label %return, !dbg !9083

sw.default:                                       ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0), i32 2285, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9084
  br label %sw.epilog, !dbg !9085

sw.epilog:                                        ; preds = %sw.default
  store i8 0, i8* %retval, align 1, !dbg !9086
  br label %return, !dbg !9086

return:                                           ; preds = %sw.epilog, %sw.bb13, %lor.end, %sw.bb, %if.then
  %7 = load i8, i8* %retval, align 1, !dbg !9087
  ret i8 %7, !dbg !9087
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @visit_reference_op_store(%union.tree_node* %lhs, %union.tree_node* %op, %union.gimple_statement_d* %stmt) #0 !dbg !9088 {
entry:
  %lhs.addr = alloca %union.tree_node*, align 8
  %op.addr = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %changed = alloca i8, align 1
  %result = alloca %union.tree_node*, align 8
  %resultsame = alloca i8, align 1
  %vdef = alloca %union.tree_node*, align 8
  %def = alloca %union.tree_node*, align 8
  %use = alloca %union.tree_node*, align 8
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !9091, metadata !DIExpression()), !dbg !9092
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !9093, metadata !DIExpression()), !dbg !9094
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !9095, metadata !DIExpression()), !dbg !9096
  call void @llvm.dbg.declare(metadata i8* %changed, metadata !9097, metadata !DIExpression()), !dbg !9098
  store i8 0, i8* %changed, align 1, !dbg !9098
  call void @llvm.dbg.declare(metadata %union.tree_node** %result, metadata !9099, metadata !DIExpression()), !dbg !9100
  call void @llvm.dbg.declare(metadata i8* %resultsame, metadata !9101, metadata !DIExpression()), !dbg !9102
  store i8 0, i8* %resultsame, align 1, !dbg !9102
  %0 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !9103
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9104
  %call = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %1), !dbg !9105
  %call1 = call %union.tree_node* @vn_reference_lookup(%union.tree_node* %0, %union.tree_node* %call, i8 zeroext 0, %struct.vn_reference_s** null), !dbg !9106
  store %union.tree_node* %call1, %union.tree_node** %result, align 8, !dbg !9107
  %2 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !9108
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !9108
  br i1 %tobool, label %if.then, label %if.end14, !dbg !9110

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !9111
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !9111
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !9111
  %bf.load = load i64, i64* %4, align 8, !dbg !9111
  %bf.clear = and i64 %bf.load, 65535, !dbg !9111
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9111
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !9114
  br i1 %cmp, label %if.then2, label %if.end, !dbg !9115

if.then2:                                         ; preds = %if.then
  %5 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !9116
  %call3 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %5), !dbg !9116
  %valnum = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call3, i32 0, i32 0, !dbg !9116
  %6 = load %union.tree_node*, %union.tree_node** %valnum, align 8, !dbg !9116
  store %union.tree_node* %6, %union.tree_node** %result, align 8, !dbg !9117
  br label %if.end, !dbg !9118

if.end:                                           ; preds = %if.then2, %if.then
  %7 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !9119
  %base4 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !9119
  %8 = bitcast %struct.tree_base* %base4 to i64*, !dbg !9119
  %bf.load5 = load i64, i64* %8, align 8, !dbg !9119
  %bf.clear6 = and i64 %bf.load5, 65535, !dbg !9119
  %bf.cast7 = trunc i64 %bf.clear6 to i32, !dbg !9119
  %cmp8 = icmp eq i32 %bf.cast7, 141, !dbg !9121
  br i1 %cmp8, label %if.then9, label %if.end12, !dbg !9122

if.then9:                                         ; preds = %if.end
  %9 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !9123
  %call10 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %9), !dbg !9123
  %valnum11 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call10, i32 0, i32 0, !dbg !9123
  %10 = load %union.tree_node*, %union.tree_node** %valnum11, align 8, !dbg !9123
  store %union.tree_node* %10, %union.tree_node** %op.addr, align 8, !dbg !9124
  br label %if.end12, !dbg !9125

if.end12:                                         ; preds = %if.then9, %if.end
  %11 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !9126
  %12 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !9127
  %call13 = call zeroext i8 @expressions_equal_p(%union.tree_node* %11, %union.tree_node* %12), !dbg !9128
  store i8 %call13, i8* %resultsame, align 1, !dbg !9129
  br label %if.end14, !dbg !9130

if.end14:                                         ; preds = %if.end12, %entry
  %13 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !9131
  %tobool15 = icmp ne %union.tree_node* %13, null, !dbg !9131
  br i1 %tobool15, label %lor.lhs.false, label %if.then17, !dbg !9133

lor.lhs.false:                                    ; preds = %if.end14
  %14 = load i8, i8* %resultsame, align 1, !dbg !9134
  %tobool16 = icmp ne i8 %14, 0, !dbg !9134
  br i1 %tobool16, label %if.else, label %if.then17, !dbg !9135

if.then17:                                        ; preds = %lor.lhs.false, %if.end14
  call void @llvm.dbg.declare(metadata %union.tree_node** %vdef, metadata !9136, metadata !DIExpression()), !dbg !9138
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9139
  %tobool18 = icmp ne %struct._IO_FILE* %15, null, !dbg !9139
  br i1 %tobool18, label %land.lhs.true, label %if.end25, !dbg !9141

land.lhs.true:                                    ; preds = %if.then17
  %16 = load i32, i32* @dump_flags, align 4, !dbg !9142
  %and = and i32 %16, 8, !dbg !9143
  %tobool19 = icmp ne i32 %and, 0, !dbg !9143
  br i1 %tobool19, label %if.then20, label %if.end25, !dbg !9144

if.then20:                                        ; preds = %land.lhs.true
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9145
  %call21 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.22, i64 0, i64 0)), !dbg !9147
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9148
  %call22 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.23, i64 0, i64 0)), !dbg !9149
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9150
  %20 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !9151
  call void @print_generic_expr(%struct._IO_FILE* %19, %union.tree_node* %20, i32 0), !dbg !9152
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9153
  %call23 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.20, i64 0, i64 0)), !dbg !9154
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9155
  %23 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !9156
  call void @print_generic_expr(%struct._IO_FILE* %22, %union.tree_node* %23, i32 0), !dbg !9157
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9158
  %call24 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %24, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !9159
  br label %if.end25, !dbg !9160

if.end25:                                         ; preds = %if.then20, %land.lhs.true, %if.then17
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9161
  %call26 = call %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %25), !dbg !9163
  store %union.tree_node* %call26, %union.tree_node** %vdef, align 8, !dbg !9164
  %tobool27 = icmp ne %union.tree_node* %call26, null, !dbg !9164
  br i1 %tobool27, label %if.then28, label %if.end35, !dbg !9165

if.then28:                                        ; preds = %if.end25
  %26 = load %union.tree_node*, %union.tree_node** %vdef, align 8, !dbg !9166
  %call29 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %26), !dbg !9168
  %use_processed = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call29, i32 0, i32 5, !dbg !9169
  %bf.load30 = load i8, i8* %use_processed, align 4, !dbg !9170
  %bf.clear31 = and i8 %bf.load30, -9, !dbg !9170
  %bf.set = or i8 %bf.clear31, 8, !dbg !9170
  store i8 %bf.set, i8* %use_processed, align 4, !dbg !9170
  %27 = load %union.tree_node*, %union.tree_node** %vdef, align 8, !dbg !9171
  %28 = load %union.tree_node*, %union.tree_node** %vdef, align 8, !dbg !9172
  %call32 = call zeroext i8 @set_ssa_val_to(%union.tree_node* %27, %union.tree_node* %28), !dbg !9173
  %conv = zext i8 %call32 to i32, !dbg !9173
  %29 = load i8, i8* %changed, align 1, !dbg !9174
  %conv33 = zext i8 %29 to i32, !dbg !9174
  %or = or i32 %conv33, %conv, !dbg !9174
  %conv34 = trunc i32 %or to i8, !dbg !9174
  store i8 %conv34, i8* %changed, align 1, !dbg !9174
  br label %if.end35, !dbg !9175

if.end35:                                         ; preds = %if.then28, %if.end25
  %30 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !9176
  %call36 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %30), !dbg !9178
  %conv37 = zext i8 %call36 to i32, !dbg !9178
  %tobool38 = icmp ne i32 %conv37, 0, !dbg !9178
  br i1 %tobool38, label %if.then43, label %lor.lhs.false39, !dbg !9179

lor.lhs.false39:                                  ; preds = %if.end35
  %31 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !9180
  %call40 = call zeroext i8 @is_gimple_reg(%union.tree_node* %31), !dbg !9181
  %conv41 = zext i8 %call40 to i32, !dbg !9181
  %tobool42 = icmp ne i32 %conv41, 0, !dbg !9181
  br i1 %tobool42, label %if.then43, label %if.end45, !dbg !9182

if.then43:                                        ; preds = %lor.lhs.false39, %if.end35
  %32 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !9183
  %33 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !9184
  %34 = load %union.tree_node*, %union.tree_node** %vdef, align 8, !dbg !9185
  %call44 = call %struct.vn_reference_s* @vn_reference_insert(%union.tree_node* %32, %union.tree_node* %33, %union.tree_node* %34), !dbg !9186
  br label %if.end45, !dbg !9186

if.end45:                                         ; preds = %if.then43, %lor.lhs.false39
  br label %if.end67, !dbg !9187

if.else:                                          ; preds = %lor.lhs.false
  call void @llvm.dbg.declare(metadata %union.tree_node** %def, metadata !9188, metadata !DIExpression()), !dbg !9190
  call void @llvm.dbg.declare(metadata %union.tree_node** %use, metadata !9191, metadata !DIExpression()), !dbg !9192
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9193
  %tobool46 = icmp ne %struct._IO_FILE* %35, null, !dbg !9193
  br i1 %tobool46, label %land.lhs.true47, label %if.end52, !dbg !9195

land.lhs.true47:                                  ; preds = %if.else
  %36 = load i32, i32* @dump_flags, align 4, !dbg !9196
  %and48 = and i32 %36, 8, !dbg !9197
  %tobool49 = icmp ne i32 %and48, 0, !dbg !9197
  br i1 %tobool49, label %if.then50, label %if.end52, !dbg !9198

if.then50:                                        ; preds = %land.lhs.true47
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9199
  %call51 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %37, i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.24, i64 0, i64 0)), !dbg !9200
  br label %if.end52, !dbg !9200

if.end52:                                         ; preds = %if.then50, %land.lhs.true47, %if.else
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9201
  %call53 = call %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %38), !dbg !9202
  store %union.tree_node* %call53, %union.tree_node** %def, align 8, !dbg !9203
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9204
  %call54 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %39), !dbg !9205
  store %union.tree_node* %call54, %union.tree_node** %use, align 8, !dbg !9206
  %40 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !9207
  %call55 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %40), !dbg !9208
  %use_processed56 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call55, i32 0, i32 5, !dbg !9209
  %bf.load57 = load i8, i8* %use_processed56, align 4, !dbg !9210
  %bf.clear58 = and i8 %bf.load57, -9, !dbg !9210
  %bf.set59 = or i8 %bf.clear58, 8, !dbg !9210
  store i8 %bf.set59, i8* %use_processed56, align 4, !dbg !9210
  %41 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !9211
  %42 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !9212
  %call60 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %42), !dbg !9212
  %valnum61 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call60, i32 0, i32 0, !dbg !9212
  %43 = load %union.tree_node*, %union.tree_node** %valnum61, align 8, !dbg !9212
  %call62 = call zeroext i8 @set_ssa_val_to(%union.tree_node* %41, %union.tree_node* %43), !dbg !9213
  %conv63 = zext i8 %call62 to i32, !dbg !9213
  %44 = load i8, i8* %changed, align 1, !dbg !9214
  %conv64 = zext i8 %44 to i32, !dbg !9214
  %or65 = or i32 %conv64, %conv63, !dbg !9214
  %conv66 = trunc i32 %or65 to i8, !dbg !9214
  store i8 %conv66, i8* %changed, align 1, !dbg !9214
  br label %if.end67

if.end67:                                         ; preds = %if.end52, %if.end45
  %45 = load i8, i8* %changed, align 1, !dbg !9215
  ret i8 %45, !dbg !9216
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @visit_unary_op(%union.tree_node* %lhs, %union.gimple_statement_d* %stmt) #0 !dbg !9217 {
entry:
  %lhs.addr = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %changed = alloca i8, align 1
  %result = alloca %union.tree_node*, align 8
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !9220, metadata !DIExpression()), !dbg !9221
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !9222, metadata !DIExpression()), !dbg !9223
  call void @llvm.dbg.declare(metadata i8* %changed, metadata !9224, metadata !DIExpression()), !dbg !9225
  store i8 0, i8* %changed, align 1, !dbg !9225
  call void @llvm.dbg.declare(metadata %union.tree_node** %result, metadata !9226, metadata !DIExpression()), !dbg !9227
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9228
  %call = call %union.tree_node* @vn_nary_op_lookup_stmt(%union.gimple_statement_d* %0, %struct.vn_nary_op_s** null), !dbg !9229
  store %union.tree_node* %call, %union.tree_node** %result, align 8, !dbg !9227
  %1 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !9230
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !9230
  br i1 %tobool, label %if.then, label %if.else, !dbg !9232

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !9233
  %3 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !9235
  %call1 = call zeroext i8 @set_ssa_val_to(%union.tree_node* %2, %union.tree_node* %3), !dbg !9236
  store i8 %call1, i8* %changed, align 1, !dbg !9237
  br label %if.end, !dbg !9238

if.else:                                          ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !9239
  %5 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !9241
  %call2 = call zeroext i8 @set_ssa_val_to(%union.tree_node* %4, %union.tree_node* %5), !dbg !9242
  store i8 %call2, i8* %changed, align 1, !dbg !9243
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9244
  %7 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !9245
  %call3 = call %struct.vn_nary_op_s* @vn_nary_op_insert_stmt(%union.gimple_statement_d* %6, %union.tree_node* %7), !dbg !9246
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %8 = load i8, i8* %changed, align 1, !dbg !9247
  ret i8 %8, !dbg !9248
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @visit_binary_op(%union.tree_node* %lhs, %union.gimple_statement_d* %stmt) #0 !dbg !9249 {
entry:
  %lhs.addr = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %changed = alloca i8, align 1
  %result = alloca %union.tree_node*, align 8
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !9250, metadata !DIExpression()), !dbg !9251
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !9252, metadata !DIExpression()), !dbg !9253
  call void @llvm.dbg.declare(metadata i8* %changed, metadata !9254, metadata !DIExpression()), !dbg !9255
  store i8 0, i8* %changed, align 1, !dbg !9255
  call void @llvm.dbg.declare(metadata %union.tree_node** %result, metadata !9256, metadata !DIExpression()), !dbg !9257
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9258
  %call = call %union.tree_node* @vn_nary_op_lookup_stmt(%union.gimple_statement_d* %0, %struct.vn_nary_op_s** null), !dbg !9259
  store %union.tree_node* %call, %union.tree_node** %result, align 8, !dbg !9257
  %1 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !9260
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !9260
  br i1 %tobool, label %if.then, label %if.else, !dbg !9262

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !9263
  %3 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !9265
  %call1 = call zeroext i8 @set_ssa_val_to(%union.tree_node* %2, %union.tree_node* %3), !dbg !9266
  store i8 %call1, i8* %changed, align 1, !dbg !9267
  br label %if.end, !dbg !9268

if.else:                                          ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !9269
  %5 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !9271
  %call2 = call zeroext i8 @set_ssa_val_to(%union.tree_node* %4, %union.tree_node* %5), !dbg !9272
  store i8 %call2, i8* %changed, align 1, !dbg !9273
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9274
  %7 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !9275
  %call3 = call %struct.vn_nary_op_s* @vn_nary_op_insert_stmt(%union.gimple_statement_d* %6, %union.tree_node* %7), !dbg !9276
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %8 = load i8, i8* %changed, align 1, !dbg !9277
  ret i8 %8, !dbg !9278
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @visit_reference_op_load(%union.tree_node* %lhs, %union.tree_node* %op, %union.gimple_statement_d* %stmt) #0 !dbg !9279 {
entry:
  %lhs.addr = alloca %union.tree_node*, align 8
  %op.addr = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %changed = alloca i8, align 1
  %last_vuse = alloca %union.tree_node*, align 8
  %result = alloca %union.tree_node*, align 8
  %val = alloca %union.tree_node*, align 8
  %tem = alloca %union.tree_node*, align 8
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !9280, metadata !DIExpression()), !dbg !9281
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !9282, metadata !DIExpression()), !dbg !9283
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !9284, metadata !DIExpression()), !dbg !9285
  call void @llvm.dbg.declare(metadata i8* %changed, metadata !9286, metadata !DIExpression()), !dbg !9287
  store i8 0, i8* %changed, align 1, !dbg !9287
  call void @llvm.dbg.declare(metadata %union.tree_node** %last_vuse, metadata !9288, metadata !DIExpression()), !dbg !9289
  call void @llvm.dbg.declare(metadata %union.tree_node** %result, metadata !9290, metadata !DIExpression()), !dbg !9291
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9292
  %call = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %0), !dbg !9293
  store %union.tree_node* %call, %union.tree_node** %last_vuse, align 8, !dbg !9294
  store %union.tree_node** %last_vuse, %union.tree_node*** @last_vuse_ptr, align 8, !dbg !9295
  %1 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !9296
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9297
  %call1 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %2), !dbg !9298
  %call2 = call %union.tree_node* @vn_reference_lookup(%union.tree_node* %1, %union.tree_node* %call1, i8 zeroext 1, %struct.vn_reference_s** null), !dbg !9299
  store %union.tree_node* %call2, %union.tree_node** %result, align 8, !dbg !9300
  store %union.tree_node** null, %union.tree_node*** @last_vuse_ptr, align 8, !dbg !9301
  %3 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !9302
  %tobool = icmp ne %union.tree_node* %3, null, !dbg !9302
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !9304

land.lhs.true:                                    ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !9305
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !9305
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !9305
  %bf.load = load i64, i64* %5, align 8, !dbg !9305
  %bf.clear = and i64 %bf.load, 65535, !dbg !9305
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9305
  %cmp = icmp eq i32 %bf.cast, 118, !dbg !9306
  br i1 %cmp, label %if.then, label %if.end, !dbg !9307

if.then:                                          ; preds = %land.lhs.true
  %6 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !9308
  %exp = bitcast %union.tree_node* %6 to %struct.tree_exp*, !dbg !9308
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !9308
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !9308
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !9308
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9309
  %call3 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %8), !dbg !9310
  %call4 = call %union.tree_node* @vn_reference_lookup(%union.tree_node* %7, %union.tree_node* %call3, i8 zeroext 1, %struct.vn_reference_s** null), !dbg !9311
  store %union.tree_node* %call4, %union.tree_node** %result, align 8, !dbg !9312
  br label %if.end, !dbg !9313

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %9 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !9314
  %tobool5 = icmp ne %union.tree_node* %9, null, !dbg !9314
  br i1 %tobool5, label %land.lhs.true6, label %if.end119, !dbg !9316

land.lhs.true6:                                   ; preds = %if.end
  %10 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !9317
  %common = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !9317
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !9317
  %11 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9317
  %12 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !9318
  %common7 = bitcast %union.tree_node* %12 to %struct.tree_common*, !dbg !9318
  %type8 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common7, i32 0, i32 2, !dbg !9318
  %13 = load %union.tree_node*, %union.tree_node** %type8, align 8, !dbg !9318
  %call9 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %11, %union.tree_node* %13), !dbg !9319
  %tobool10 = icmp ne i8 %call9, 0, !dbg !9319
  br i1 %tobool10, label %if.end119, label %if.then11, !dbg !9320

if.then11:                                        ; preds = %land.lhs.true6
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !9321, metadata !DIExpression()), !dbg !9323
  %14 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !9324
  %common12 = bitcast %union.tree_node* %14 to %struct.tree_common*, !dbg !9324
  %type13 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common12, i32 0, i32 2, !dbg !9324
  %15 = load %union.tree_node*, %union.tree_node** %type13, align 8, !dbg !9324
  %16 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !9324
  %call14 = call %union.tree_node* @fold_build1_stat_loc(i32 0, i32 118, %union.tree_node* %15, %union.tree_node* %16), !dbg !9324
  store %union.tree_node* %call14, %union.tree_node** %val, align 8, !dbg !9323
  %17 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !9325
  %base15 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !9325
  %18 = bitcast %struct.tree_base* %base15 to i64*, !dbg !9325
  %bf.load16 = load i64, i64* %18, align 8, !dbg !9325
  %bf.clear17 = and i64 %bf.load16, 65535, !dbg !9325
  %bf.cast18 = trunc i64 %bf.clear17 to i32, !dbg !9325
  %cmp19 = icmp eq i32 %bf.cast18, 116, !dbg !9325
  br i1 %cmp19, label %land.lhs.true31, label %lor.lhs.false, !dbg !9325

lor.lhs.false:                                    ; preds = %if.then11
  %19 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !9325
  %base20 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !9325
  %20 = bitcast %struct.tree_base* %base20 to i64*, !dbg !9325
  %bf.load21 = load i64, i64* %20, align 8, !dbg !9325
  %bf.clear22 = and i64 %bf.load21, 65535, !dbg !9325
  %bf.cast23 = trunc i64 %bf.clear22 to i32, !dbg !9325
  %cmp24 = icmp eq i32 %bf.cast23, 113, !dbg !9325
  br i1 %cmp24, label %land.lhs.true31, label %lor.lhs.false25, !dbg !9327

lor.lhs.false25:                                  ; preds = %lor.lhs.false
  %21 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !9328
  %base26 = bitcast %union.tree_node* %21 to %struct.tree_base*, !dbg !9328
  %22 = bitcast %struct.tree_base* %base26 to i64*, !dbg !9328
  %bf.load27 = load i64, i64* %22, align 8, !dbg !9328
  %bf.clear28 = and i64 %bf.load27, 65535, !dbg !9328
  %bf.cast29 = trunc i64 %bf.clear28 to i32, !dbg !9328
  %cmp30 = icmp eq i32 %bf.cast29, 118, !dbg !9329
  br i1 %cmp30, label %land.lhs.true31, label %if.end74, !dbg !9330

land.lhs.true31:                                  ; preds = %lor.lhs.false25, %lor.lhs.false, %if.then11
  %23 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !9331
  %exp32 = bitcast %union.tree_node* %23 to %struct.tree_exp*, !dbg !9331
  %operands33 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp32, i32 0, i32 3, !dbg !9331
  %arrayidx34 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands33, i64 0, i64 0, !dbg !9331
  %24 = load %union.tree_node*, %union.tree_node** %arrayidx34, align 8, !dbg !9331
  %base35 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !9331
  %25 = bitcast %struct.tree_base* %base35 to i64*, !dbg !9331
  %bf.load36 = load i64, i64* %25, align 8, !dbg !9331
  %bf.clear37 = and i64 %bf.load36, 65535, !dbg !9331
  %bf.cast38 = trunc i64 %bf.clear37 to i32, !dbg !9331
  %cmp39 = icmp eq i32 %bf.cast38, 141, !dbg !9332
  br i1 %cmp39, label %if.then40, label %if.end74, !dbg !9333

if.then40:                                        ; preds = %land.lhs.true31
  call void @llvm.dbg.declare(metadata %union.tree_node** %tem, metadata !9334, metadata !DIExpression()), !dbg !9336
  %26 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !9337
  %exp41 = bitcast %union.tree_node* %26 to %struct.tree_exp*, !dbg !9337
  %operands42 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp41, i32 0, i32 3, !dbg !9337
  %arrayidx43 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands42, i64 0, i64 0, !dbg !9337
  %27 = load %union.tree_node*, %union.tree_node** %arrayidx43, align 8, !dbg !9337
  %call44 = call %union.tree_node* @vn_get_expr_for(%union.tree_node* %27), !dbg !9338
  %call45 = call %union.tree_node* @valueize_expr(%union.tree_node* %call44), !dbg !9339
  store %union.tree_node* %call45, %union.tree_node** %tem, align 8, !dbg !9336
  %28 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !9340
  %base46 = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !9340
  %29 = bitcast %struct.tree_base* %base46 to i64*, !dbg !9340
  %bf.load47 = load i64, i64* %29, align 8, !dbg !9340
  %bf.clear48 = and i64 %bf.load47, 65535, !dbg !9340
  %bf.cast49 = trunc i64 %bf.clear48 to i32, !dbg !9340
  %cmp50 = icmp eq i32 %bf.cast49, 116, !dbg !9340
  br i1 %cmp50, label %land.lhs.true63, label %lor.lhs.false51, !dbg !9340

lor.lhs.false51:                                  ; preds = %if.then40
  %30 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !9340
  %base52 = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !9340
  %31 = bitcast %struct.tree_base* %base52 to i64*, !dbg !9340
  %bf.load53 = load i64, i64* %31, align 8, !dbg !9340
  %bf.clear54 = and i64 %bf.load53, 65535, !dbg !9340
  %bf.cast55 = trunc i64 %bf.clear54 to i32, !dbg !9340
  %cmp56 = icmp eq i32 %bf.cast55, 113, !dbg !9340
  br i1 %cmp56, label %land.lhs.true63, label %lor.lhs.false57, !dbg !9342

lor.lhs.false57:                                  ; preds = %lor.lhs.false51
  %32 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !9343
  %base58 = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !9343
  %33 = bitcast %struct.tree_base* %base58 to i64*, !dbg !9343
  %bf.load59 = load i64, i64* %33, align 8, !dbg !9343
  %bf.clear60 = and i64 %bf.load59, 65535, !dbg !9343
  %bf.cast61 = trunc i64 %bf.clear60 to i32, !dbg !9343
  %cmp62 = icmp eq i32 %bf.cast61, 118, !dbg !9344
  br i1 %cmp62, label %land.lhs.true63, label %if.end73, !dbg !9345

land.lhs.true63:                                  ; preds = %lor.lhs.false57, %lor.lhs.false51, %if.then40
  %34 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !9346
  %base64 = bitcast %union.tree_node* %34 to %struct.tree_base*, !dbg !9346
  %35 = bitcast %struct.tree_base* %base64 to i64*, !dbg !9346
  %bf.load65 = load i64, i64* %35, align 8, !dbg !9346
  %bf.clear66 = and i64 %bf.load65, 65535, !dbg !9346
  %bf.cast67 = trunc i64 %bf.clear66 to i32, !dbg !9346
  %36 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !9346
  %common68 = bitcast %union.tree_node* %36 to %struct.tree_common*, !dbg !9346
  %type69 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common68, i32 0, i32 2, !dbg !9346
  %37 = load %union.tree_node*, %union.tree_node** %type69, align 8, !dbg !9346
  %38 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !9346
  %call70 = call %union.tree_node* @fold_unary_ignore_overflow_loc(i32 0, i32 %bf.cast67, %union.tree_node* %37, %union.tree_node* %38), !dbg !9346
  store %union.tree_node* %call70, %union.tree_node** %tem, align 8, !dbg !9347
  %tobool71 = icmp ne %union.tree_node* %call70, null, !dbg !9347
  br i1 %tobool71, label %if.then72, label %if.end73, !dbg !9348

if.then72:                                        ; preds = %land.lhs.true63
  %39 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !9349
  store %union.tree_node* %39, %union.tree_node** %val, align 8, !dbg !9350
  br label %if.end73, !dbg !9351

if.end73:                                         ; preds = %if.then72, %land.lhs.true63, %lor.lhs.false57
  br label %if.end74, !dbg !9352

if.end74:                                         ; preds = %if.end73, %land.lhs.true31, %lor.lhs.false25
  %40 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !9353
  store %union.tree_node* %40, %union.tree_node** %result, align 8, !dbg !9354
  %41 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !9355
  %call75 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %41), !dbg !9357
  %tobool76 = icmp ne i8 %call75, 0, !dbg !9357
  br i1 %tobool76, label %if.end85, label %land.lhs.true77, !dbg !9358

land.lhs.true77:                                  ; preds = %if.end74
  %42 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !9359
  %base78 = bitcast %union.tree_node* %42 to %struct.tree_base*, !dbg !9359
  %43 = bitcast %struct.tree_base* %base78 to i64*, !dbg !9359
  %bf.load79 = load i64, i64* %43, align 8, !dbg !9359
  %bf.clear80 = and i64 %bf.load79, 65535, !dbg !9359
  %bf.cast81 = trunc i64 %bf.clear80 to i32, !dbg !9359
  %cmp82 = icmp ne i32 %bf.cast81, 141, !dbg !9360
  br i1 %cmp82, label %if.then83, label %if.end85, !dbg !9361

if.then83:                                        ; preds = %land.lhs.true77
  %44 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !9362
  %call84 = call %union.tree_node* @vn_nary_op_lookup(%union.tree_node* %44, %struct.vn_nary_op_s** null), !dbg !9363
  store %union.tree_node* %call84, %union.tree_node** %result, align 8, !dbg !9364
  br label %if.end85, !dbg !9365

if.end85:                                         ; preds = %if.then83, %land.lhs.true77, %if.end74
  %45 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !9366
  %tobool86 = icmp ne %union.tree_node* %45, null, !dbg !9366
  br i1 %tobool86, label %if.end118, label %land.lhs.true87, !dbg !9368

land.lhs.true87:                                  ; preds = %if.end85
  %46 = load i8, i8* @may_insert, align 1, !dbg !9369
  %conv = zext i8 %46 to i32, !dbg !9369
  %tobool88 = icmp ne i32 %conv, 0, !dbg !9369
  br i1 %tobool88, label %if.then89, label %if.end118, !dbg !9370

if.then89:                                        ; preds = %land.lhs.true87
  %47 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !9371
  %ssa_name = bitcast %union.tree_node* %47 to %struct.tree_ssa_name*, !dbg !9371
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !9371
  %48 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !9371
  %call90 = call %union.tree_node* @make_ssa_name(%union.tree_node* %48, %union.gimple_statement_d* null), !dbg !9373
  store %union.tree_node* %call90, %union.tree_node** %result, align 8, !dbg !9374
  %49 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !9375
  %50 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !9376
  %call91 = call %struct.vn_ssa_aux* @VN_INFO_GET(%union.tree_node* %50), !dbg !9377
  %valnum = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call91, i32 0, i32 0, !dbg !9378
  store %union.tree_node* %49, %union.tree_node** %valnum, align 8, !dbg !9379
  %call92 = call i32 @get_next_value_id(), !dbg !9380
  %51 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !9381
  %call93 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %51), !dbg !9382
  %value_id = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call93, i32 0, i32 2, !dbg !9383
  store i32 %call92, i32* %value_id, align 8, !dbg !9384
  %52 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !9385
  %53 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !9386
  %call94 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %53), !dbg !9387
  %expr = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call94, i32 0, i32 1, !dbg !9388
  store %union.tree_node* %52, %union.tree_node** %expr, align 8, !dbg !9389
  %54 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !9390
  %call95 = call zeroext i8 @expr_has_constants(%union.tree_node* %54), !dbg !9391
  %conv96 = zext i8 %call95 to i32, !dbg !9391
  %55 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !9392
  %call97 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %55), !dbg !9393
  %has_constants = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call97, i32 0, i32 5, !dbg !9394
  %56 = trunc i32 %conv96 to i8, !dbg !9395
  %bf.load98 = load i8, i8* %has_constants, align 4, !dbg !9395
  %bf.value = and i8 %56, 1, !dbg !9395
  %bf.shl = shl i8 %bf.value, 2, !dbg !9395
  %bf.clear99 = and i8 %bf.load98, -5, !dbg !9395
  %bf.set = or i8 %bf.clear99, %bf.shl, !dbg !9395
  store i8 %bf.set, i8* %has_constants, align 4, !dbg !9395
  %bf.result.cast = zext i8 %bf.value to i32, !dbg !9395
  %57 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !9396
  %call100 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %57), !dbg !9397
  %needs_insertion = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call100, i32 0, i32 5, !dbg !9398
  %bf.load101 = load i8, i8* %needs_insertion, align 4, !dbg !9399
  %bf.clear102 = and i8 %bf.load101, -17, !dbg !9399
  %bf.set103 = or i8 %bf.clear102, 16, !dbg !9399
  store i8 %bf.set103, i8* %needs_insertion, align 4, !dbg !9399
  %58 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !9400
  %59 = load %struct.vn_tables_s*, %struct.vn_tables_s** @optimistic_info, align 8, !dbg !9402
  %cmp104 = icmp eq %struct.vn_tables_s* %58, %59, !dbg !9403
  br i1 %cmp104, label %if.then106, label %if.else, !dbg !9404

if.then106:                                       ; preds = %if.then89
  %60 = load %struct.vn_tables_s*, %struct.vn_tables_s** @valid_info, align 8, !dbg !9405
  store %struct.vn_tables_s* %60, %struct.vn_tables_s** @current_info, align 8, !dbg !9407
  %61 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !9408
  %62 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !9409
  %call107 = call %struct.vn_nary_op_s* @vn_nary_op_insert(%union.tree_node* %61, %union.tree_node* %62), !dbg !9410
  %63 = load %struct.vn_tables_s*, %struct.vn_tables_s** @optimistic_info, align 8, !dbg !9411
  store %struct.vn_tables_s* %63, %struct.vn_tables_s** @current_info, align 8, !dbg !9412
  br label %if.end109, !dbg !9413

if.else:                                          ; preds = %if.then89
  %64 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !9414
  %65 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !9415
  %call108 = call %struct.vn_nary_op_s* @vn_nary_op_insert(%union.tree_node* %64, %union.tree_node* %65), !dbg !9416
  br label %if.end109

if.end109:                                        ; preds = %if.else, %if.then106
  %66 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9417
  %tobool110 = icmp ne %struct._IO_FILE* %66, null, !dbg !9417
  br i1 %tobool110, label %land.lhs.true111, label %if.end117, !dbg !9419

land.lhs.true111:                                 ; preds = %if.end109
  %67 = load i32, i32* @dump_flags, align 4, !dbg !9420
  %and = and i32 %67, 8, !dbg !9421
  %tobool112 = icmp ne i32 %and, 0, !dbg !9421
  br i1 %tobool112, label %if.then113, label %if.end117, !dbg !9422

if.then113:                                       ; preds = %land.lhs.true111
  %68 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9423
  %call114 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %68, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.25, i64 0, i64 0)), !dbg !9425
  %69 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9426
  %70 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !9427
  call void @print_generic_expr(%struct._IO_FILE* %69, %union.tree_node* %70, i32 0), !dbg !9428
  %71 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9429
  %call115 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %71, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.26, i64 0, i64 0)), !dbg !9430
  %72 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9431
  %73 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !9432
  call void @print_generic_expr(%struct._IO_FILE* %72, %union.tree_node* %73, i32 0), !dbg !9433
  %74 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9434
  %call116 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %74, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !9435
  br label %if.end117, !dbg !9436

if.end117:                                        ; preds = %if.then113, %land.lhs.true111, %if.end109
  br label %if.end118, !dbg !9437

if.end118:                                        ; preds = %if.end117, %land.lhs.true87, %if.end85
  br label %if.end119, !dbg !9438

if.end119:                                        ; preds = %if.end118, %land.lhs.true6, %if.end
  %75 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !9439
  %tobool120 = icmp ne %union.tree_node* %75, null, !dbg !9439
  br i1 %tobool120, label %if.then121, label %if.else147, !dbg !9441

if.then121:                                       ; preds = %if.end119
  %76 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !9442
  %77 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !9444
  %call122 = call zeroext i8 @set_ssa_val_to(%union.tree_node* %76, %union.tree_node* %77), !dbg !9445
  store i8 %call122, i8* %changed, align 1, !dbg !9446
  %78 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !9447
  %base123 = bitcast %union.tree_node* %78 to %struct.tree_base*, !dbg !9447
  %79 = bitcast %struct.tree_base* %base123 to i64*, !dbg !9447
  %bf.load124 = load i64, i64* %79, align 8, !dbg !9447
  %bf.clear125 = and i64 %bf.load124, 65535, !dbg !9447
  %bf.cast126 = trunc i64 %bf.clear125 to i32, !dbg !9447
  %cmp127 = icmp eq i32 %bf.cast126, 141, !dbg !9449
  br i1 %cmp127, label %land.lhs.true129, label %if.end146, !dbg !9450

land.lhs.true129:                                 ; preds = %if.then121
  %80 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !9451
  %call130 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %80), !dbg !9452
  %has_constants131 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call130, i32 0, i32 5, !dbg !9453
  %bf.load132 = load i8, i8* %has_constants131, align 4, !dbg !9453
  %bf.lshr = lshr i8 %bf.load132, 2, !dbg !9453
  %bf.clear133 = and i8 %bf.lshr, 1, !dbg !9453
  %bf.cast134 = zext i8 %bf.clear133 to i32, !dbg !9453
  %tobool135 = icmp ne i32 %bf.cast134, 0, !dbg !9452
  br i1 %tobool135, label %if.then136, label %if.end146, !dbg !9454

if.then136:                                       ; preds = %land.lhs.true129
  %81 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !9455
  %call137 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %81), !dbg !9457
  %expr138 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call137, i32 0, i32 1, !dbg !9458
  %82 = load %union.tree_node*, %union.tree_node** %expr138, align 8, !dbg !9458
  %83 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !9459
  %call139 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %83), !dbg !9460
  %expr140 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call139, i32 0, i32 1, !dbg !9461
  store %union.tree_node* %82, %union.tree_node** %expr140, align 8, !dbg !9462
  %84 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !9463
  %call141 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %84), !dbg !9464
  %has_constants142 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call141, i32 0, i32 5, !dbg !9465
  %bf.load143 = load i8, i8* %has_constants142, align 4, !dbg !9466
  %bf.clear144 = and i8 %bf.load143, -5, !dbg !9466
  %bf.set145 = or i8 %bf.clear144, 4, !dbg !9466
  store i8 %bf.set145, i8* %has_constants142, align 4, !dbg !9466
  br label %if.end146, !dbg !9467

if.end146:                                        ; preds = %if.then136, %land.lhs.true129, %if.then121
  br label %if.end150, !dbg !9468

if.else147:                                       ; preds = %if.end119
  %85 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !9469
  %86 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !9471
  %call148 = call zeroext i8 @set_ssa_val_to(%union.tree_node* %85, %union.tree_node* %86), !dbg !9472
  store i8 %call148, i8* %changed, align 1, !dbg !9473
  %87 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !9474
  %88 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !9475
  %89 = load %union.tree_node*, %union.tree_node** %last_vuse, align 8, !dbg !9476
  %call149 = call %struct.vn_reference_s* @vn_reference_insert(%union.tree_node* %87, %union.tree_node* %88, %union.tree_node* %89), !dbg !9477
  br label %if.end150

if.end150:                                        ; preds = %if.else147, %if.end146
  %90 = load i8, i8* %changed, align 1, !dbg !9478
  ret i8 %90, !dbg !9479
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %gs) #0 !dbg !9480 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9481, metadata !DIExpression()), !dbg !9482
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9483
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !9484
  ret %union.tree_node* %call, !dbg !9485
}

declare dso_local i32 @gimple_call_flags(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @visit_reference_op_call(%union.tree_node* %lhs, %union.gimple_statement_d* %stmt) #0 !dbg !9486 {
entry:
  %lhs.addr = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %changed = alloca i8, align 1
  %vr1 = alloca %struct.vn_reference_s, align 8
  %result = alloca %union.tree_node*, align 8
  %vuse = alloca %union.tree_node*, align 8
  %slot = alloca i8**, align 8
  %vr2 = alloca %struct.vn_reference_s*, align 8
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !9487, metadata !DIExpression()), !dbg !9488
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !9489, metadata !DIExpression()), !dbg !9490
  call void @llvm.dbg.declare(metadata i8* %changed, metadata !9491, metadata !DIExpression()), !dbg !9492
  store i8 0, i8* %changed, align 1, !dbg !9492
  call void @llvm.dbg.declare(metadata %struct.vn_reference_s* %vr1, metadata !9493, metadata !DIExpression()), !dbg !9494
  call void @llvm.dbg.declare(metadata %union.tree_node** %result, metadata !9495, metadata !DIExpression()), !dbg !9496
  call void @llvm.dbg.declare(metadata %union.tree_node** %vuse, metadata !9497, metadata !DIExpression()), !dbg !9498
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9499
  %call = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %0), !dbg !9500
  store %union.tree_node* %call, %union.tree_node** %vuse, align 8, !dbg !9498
  %1 = load %union.tree_node*, %union.tree_node** %vuse, align 8, !dbg !9501
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !9501
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9501

cond.true:                                        ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %vuse, align 8, !dbg !9502
  %call1 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %2), !dbg !9502
  %valnum = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call1, i32 0, i32 0, !dbg !9502
  %3 = load %union.tree_node*, %union.tree_node** %valnum, align 8, !dbg !9502
  br label %cond.end, !dbg !9501

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9501

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %3, %cond.true ], [ null, %cond.false ], !dbg !9501
  %vuse2 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %vr1, i32 0, i32 2, !dbg !9503
  store %union.tree_node* %cond, %union.tree_node** %vuse2, align 8, !dbg !9504
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9505
  %call3 = call %struct.VEC_vn_reference_op_s_heap* @valueize_shared_reference_ops_from_call(%union.gimple_statement_d* %4), !dbg !9506
  %operands = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %vr1, i32 0, i32 5, !dbg !9507
  store %struct.VEC_vn_reference_op_s_heap* %call3, %struct.VEC_vn_reference_op_s_heap** %operands, align 8, !dbg !9508
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9509
  %call4 = call %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %5), !dbg !9510
  %type = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %vr1, i32 0, i32 4, !dbg !9511
  store %union.tree_node* %call4, %union.tree_node** %type, align 8, !dbg !9512
  %set = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %vr1, i32 0, i32 3, !dbg !9513
  store i32 0, i32* %set, align 8, !dbg !9514
  %call5 = call i32 @vn_reference_compute_hash(%struct.vn_reference_s* %vr1), !dbg !9515
  %hashcode = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %vr1, i32 0, i32 1, !dbg !9516
  store i32 %call5, i32* %hashcode, align 4, !dbg !9517
  %call6 = call %union.tree_node* @vn_reference_lookup_1(%struct.vn_reference_s* %vr1, %struct.vn_reference_s** null), !dbg !9518
  store %union.tree_node* %call6, %union.tree_node** %result, align 8, !dbg !9519
  %6 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !9520
  %tobool7 = icmp ne %union.tree_node* %6, null, !dbg !9520
  br i1 %tobool7, label %if.then, label %if.else, !dbg !9522

if.then:                                          ; preds = %cond.end
  %7 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !9523
  %8 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !9525
  %call8 = call zeroext i8 @set_ssa_val_to(%union.tree_node* %7, %union.tree_node* %8), !dbg !9526
  store i8 %call8, i8* %changed, align 1, !dbg !9527
  %9 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !9528
  %base = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !9528
  %10 = bitcast %struct.tree_base* %base to i64*, !dbg !9528
  %bf.load = load i64, i64* %10, align 8, !dbg !9528
  %bf.clear = and i64 %bf.load, 65535, !dbg !9528
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9528
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !9530
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !9531

land.lhs.true:                                    ; preds = %if.then
  %11 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !9532
  %call9 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %11), !dbg !9533
  %has_constants = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call9, i32 0, i32 5, !dbg !9534
  %bf.load10 = load i8, i8* %has_constants, align 4, !dbg !9534
  %bf.lshr = lshr i8 %bf.load10, 2, !dbg !9534
  %bf.clear11 = and i8 %bf.lshr, 1, !dbg !9534
  %bf.cast12 = zext i8 %bf.clear11 to i32, !dbg !9534
  %tobool13 = icmp ne i32 %bf.cast12, 0, !dbg !9533
  br i1 %tobool13, label %if.then14, label %if.end, !dbg !9535

if.then14:                                        ; preds = %land.lhs.true
  %12 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !9536
  %call15 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %12), !dbg !9537
  %has_constants16 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call15, i32 0, i32 5, !dbg !9538
  %bf.load17 = load i8, i8* %has_constants16, align 4, !dbg !9539
  %bf.clear18 = and i8 %bf.load17, -5, !dbg !9539
  %bf.set = or i8 %bf.clear18, 4, !dbg !9539
  store i8 %bf.set, i8* %has_constants16, align 4, !dbg !9539
  br label %if.end, !dbg !9537

if.end:                                           ; preds = %if.then14, %land.lhs.true, %if.then
  br label %if.end38, !dbg !9540

if.else:                                          ; preds = %cond.end
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !9541, metadata !DIExpression()), !dbg !9543
  call void @llvm.dbg.declare(metadata %struct.vn_reference_s** %vr2, metadata !9544, metadata !DIExpression()), !dbg !9545
  %13 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !9546
  %14 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !9547
  %call19 = call zeroext i8 @set_ssa_val_to(%union.tree_node* %13, %union.tree_node* %14), !dbg !9548
  store i8 %call19, i8* %changed, align 1, !dbg !9549
  %15 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !9550
  %references_pool = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %15, i32 0, i32 5, !dbg !9551
  %16 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** %references_pool, align 8, !dbg !9551
  %call20 = call i8* @pool_alloc(%struct.alloc_pool_def* %16), !dbg !9552
  %17 = bitcast i8* %call20 to %struct.vn_reference_s*, !dbg !9553
  store %struct.vn_reference_s* %17, %struct.vn_reference_s** %vr2, align 8, !dbg !9554
  %vuse21 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %vr1, i32 0, i32 2, !dbg !9555
  %18 = load %union.tree_node*, %union.tree_node** %vuse21, align 8, !dbg !9555
  %19 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr2, align 8, !dbg !9556
  %vuse22 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %19, i32 0, i32 2, !dbg !9557
  store %union.tree_node* %18, %union.tree_node** %vuse22, align 8, !dbg !9558
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9559
  %call23 = call %struct.VEC_vn_reference_op_s_heap* @create_reference_ops_from_call(%union.gimple_statement_d* %20), !dbg !9560
  %call24 = call %struct.VEC_vn_reference_op_s_heap* @valueize_refs(%struct.VEC_vn_reference_op_s_heap* %call23), !dbg !9561
  %21 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr2, align 8, !dbg !9562
  %operands25 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %21, i32 0, i32 5, !dbg !9563
  store %struct.VEC_vn_reference_op_s_heap* %call24, %struct.VEC_vn_reference_op_s_heap** %operands25, align 8, !dbg !9564
  %type26 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %vr1, i32 0, i32 4, !dbg !9565
  %22 = load %union.tree_node*, %union.tree_node** %type26, align 8, !dbg !9565
  %23 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr2, align 8, !dbg !9566
  %type27 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %23, i32 0, i32 4, !dbg !9567
  store %union.tree_node* %22, %union.tree_node** %type27, align 8, !dbg !9568
  %set28 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %vr1, i32 0, i32 3, !dbg !9569
  %24 = load i32, i32* %set28, align 8, !dbg !9569
  %25 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr2, align 8, !dbg !9570
  %set29 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %25, i32 0, i32 3, !dbg !9571
  store i32 %24, i32* %set29, align 8, !dbg !9572
  %hashcode30 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %vr1, i32 0, i32 1, !dbg !9573
  %26 = load i32, i32* %hashcode30, align 4, !dbg !9573
  %27 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr2, align 8, !dbg !9574
  %hashcode31 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %27, i32 0, i32 1, !dbg !9575
  store i32 %26, i32* %hashcode31, align 4, !dbg !9576
  %28 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !9577
  %29 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr2, align 8, !dbg !9578
  %result32 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %29, i32 0, i32 6, !dbg !9579
  store %union.tree_node* %28, %union.tree_node** %result32, align 8, !dbg !9580
  %30 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !9581
  %references = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %30, i32 0, i32 2, !dbg !9582
  %31 = load %struct.htab*, %struct.htab** %references, align 8, !dbg !9582
  %32 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr2, align 8, !dbg !9583
  %33 = bitcast %struct.vn_reference_s* %32 to i8*, !dbg !9583
  %34 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr2, align 8, !dbg !9584
  %hashcode33 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %34, i32 0, i32 1, !dbg !9585
  %35 = load i32, i32* %hashcode33, align 4, !dbg !9585
  %call34 = call i8** @htab_find_slot_with_hash(%struct.htab* %31, i8* %33, i32 %35, i32 1), !dbg !9586
  store i8** %call34, i8*** %slot, align 8, !dbg !9587
  %36 = load i8**, i8*** %slot, align 8, !dbg !9588
  %37 = load i8*, i8** %36, align 8, !dbg !9590
  %tobool35 = icmp ne i8* %37, null, !dbg !9590
  br i1 %tobool35, label %if.then36, label %if.end37, !dbg !9591

if.then36:                                        ; preds = %if.else
  %38 = load i8**, i8*** %slot, align 8, !dbg !9592
  %39 = load i8*, i8** %38, align 8, !dbg !9593
  call void @free_reference(i8* %39), !dbg !9594
  br label %if.end37, !dbg !9594

if.end37:                                         ; preds = %if.then36, %if.else
  %40 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr2, align 8, !dbg !9595
  %41 = bitcast %struct.vn_reference_s* %40 to i8*, !dbg !9595
  %42 = load i8**, i8*** %slot, align 8, !dbg !9596
  store i8* %41, i8** %42, align 8, !dbg !9597
  br label %if.end38

if.end38:                                         ; preds = %if.end37, %if.end
  %43 = load i8, i8* %changed, align 1, !dbg !9598
  ret i8 %43, !dbg !9599
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_def_from_ptr(%union.tree_node** %def) #0 !dbg !9600 {
entry:
  %def.addr = alloca %union.tree_node**, align 8
  store %union.tree_node** %def, %union.tree_node*** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %def.addr, metadata !9603, metadata !DIExpression()), !dbg !9604
  %0 = load %union.tree_node**, %union.tree_node*** %def.addr, align 8, !dbg !9605
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !9606
  ret %union.tree_node* %1, !dbg !9607
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %gs) #0 !dbg !9608 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9609, metadata !DIExpression()), !dbg !9610
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9611
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !9612
  %result = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 3, !dbg !9613
  ret %union.tree_node** %result, !dbg !9614
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !9615 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9618, metadata !DIExpression()), !dbg !9619
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !9620, metadata !DIExpression()), !dbg !9621
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9622
  %1 = load i32, i32* %i.addr, align 4, !dbg !9623
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %1), !dbg !9624
  %imm_use = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i32 0, i32 0, !dbg !9625
  ret %struct.ssa_use_operand_d* %imm_use, !dbg !9626
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @vn_phi_lookup(%union.gimple_statement_d* %phi) #0 !dbg !9627 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %phi.addr = alloca %union.gimple_statement_d*, align 8
  %slot = alloca i8**, align 8
  %vp1 = alloca %struct.vn_phi_s, align 8
  %i = alloca i32, align 4
  %def = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %phi, %union.gimple_statement_d** %phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi.addr, metadata !9628, metadata !DIExpression()), !dbg !9629
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !9630, metadata !DIExpression()), !dbg !9631
  call void @llvm.dbg.declare(metadata %struct.vn_phi_s* %vp1, metadata !9632, metadata !DIExpression()), !dbg !9633
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9634, metadata !DIExpression()), !dbg !9635
  %0 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @shared_lookup_phiargs, align 8, !dbg !9636
  %tobool = icmp ne %struct.VEC_tree_heap* %0, null, !dbg !9636
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9636

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @shared_lookup_phiargs, align 8, !dbg !9636
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %1, i32 0, i32 0, !dbg !9636
  br label %cond.end, !dbg !9636

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9636

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9636
  call void @VEC_tree_base_truncate(%struct.VEC_tree_base* %cond, i32 0), !dbg !9636
  store i32 0, i32* %i, align 4, !dbg !9637
  br label %for.cond, !dbg !9639

for.cond:                                         ; preds = %for.inc, %cond.end
  %2 = load i32, i32* %i, align 4, !dbg !9640
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !9642
  %call = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %3), !dbg !9643
  %cmp = icmp ult i32 %2, %call, !dbg !9644
  br i1 %cmp, label %for.body, label %for.end, !dbg !9645

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %def, metadata !9646, metadata !DIExpression()), !dbg !9648
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !9649
  %5 = load i32, i32* %i, align 4, !dbg !9649
  %call1 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %4, i32 %5), !dbg !9649
  %call2 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call1), !dbg !9649
  store %union.tree_node* %call2, %union.tree_node** %def, align 8, !dbg !9648
  %6 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !9650
  %base3 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !9650
  %7 = bitcast %struct.tree_base* %base3 to i64*, !dbg !9650
  %bf.load = load i64, i64* %7, align 8, !dbg !9650
  %bf.clear = and i64 %bf.load, 65535, !dbg !9650
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9650
  %cmp4 = icmp eq i32 %bf.cast, 141, !dbg !9651
  br i1 %cmp4, label %cond.true5, label %cond.false7, !dbg !9650

cond.true5:                                       ; preds = %for.body
  %8 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !9652
  %call6 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %8), !dbg !9652
  %valnum = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call6, i32 0, i32 0, !dbg !9652
  %9 = load %union.tree_node*, %union.tree_node** %valnum, align 8, !dbg !9652
  br label %cond.end8, !dbg !9650

cond.false7:                                      ; preds = %for.body
  %10 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !9653
  br label %cond.end8, !dbg !9650

cond.end8:                                        ; preds = %cond.false7, %cond.true5
  %cond9 = phi %union.tree_node* [ %9, %cond.true5 ], [ %10, %cond.false7 ], !dbg !9650
  store %union.tree_node* %cond9, %union.tree_node** %def, align 8, !dbg !9654
  %11 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !9655
  %call10 = call %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** @shared_lookup_phiargs, %union.tree_node* %11), !dbg !9655
  br label %for.inc, !dbg !9656

for.inc:                                          ; preds = %cond.end8
  %12 = load i32, i32* %i, align 4, !dbg !9657
  %inc = add i32 %12, 1, !dbg !9657
  store i32 %inc, i32* %i, align 4, !dbg !9657
  br label %for.cond, !dbg !9658, !llvm.loop !9659

for.end:                                          ; preds = %for.cond
  %13 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @shared_lookup_phiargs, align 8, !dbg !9661
  %phiargs = getelementptr inbounds %struct.vn_phi_s, %struct.vn_phi_s* %vp1, i32 0, i32 2, !dbg !9662
  store %struct.VEC_tree_heap* %13, %struct.VEC_tree_heap** %phiargs, align 8, !dbg !9663
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !9664
  %call11 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %14), !dbg !9665
  %block = getelementptr inbounds %struct.vn_phi_s, %struct.vn_phi_s* %vp1, i32 0, i32 3, !dbg !9666
  store %struct.basic_block_def* %call11, %struct.basic_block_def** %block, align 8, !dbg !9667
  %call12 = call i32 @vn_phi_compute_hash(%struct.vn_phi_s* %vp1), !dbg !9668
  %hashcode = getelementptr inbounds %struct.vn_phi_s, %struct.vn_phi_s* %vp1, i32 0, i32 1, !dbg !9669
  store i32 %call12, i32* %hashcode, align 4, !dbg !9670
  %15 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !9671
  %phis = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %15, i32 0, i32 1, !dbg !9672
  %16 = load %struct.htab*, %struct.htab** %phis, align 8, !dbg !9672
  %17 = bitcast %struct.vn_phi_s* %vp1 to i8*, !dbg !9673
  %hashcode13 = getelementptr inbounds %struct.vn_phi_s, %struct.vn_phi_s* %vp1, i32 0, i32 1, !dbg !9674
  %18 = load i32, i32* %hashcode13, align 4, !dbg !9674
  %call14 = call i8** @htab_find_slot_with_hash(%struct.htab* %16, i8* %17, i32 %18, i32 0), !dbg !9675
  store i8** %call14, i8*** %slot, align 8, !dbg !9676
  %19 = load i8**, i8*** %slot, align 8, !dbg !9677
  %tobool15 = icmp ne i8** %19, null, !dbg !9677
  br i1 %tobool15, label %if.end, label %land.lhs.true, !dbg !9679

land.lhs.true:                                    ; preds = %for.end
  %20 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !9680
  %21 = load %struct.vn_tables_s*, %struct.vn_tables_s** @optimistic_info, align 8, !dbg !9681
  %cmp16 = icmp eq %struct.vn_tables_s* %20, %21, !dbg !9682
  br i1 %cmp16, label %if.then, label %if.end, !dbg !9683

if.then:                                          ; preds = %land.lhs.true
  %22 = load %struct.vn_tables_s*, %struct.vn_tables_s** @valid_info, align 8, !dbg !9684
  %phis17 = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %22, i32 0, i32 1, !dbg !9685
  %23 = load %struct.htab*, %struct.htab** %phis17, align 8, !dbg !9685
  %24 = bitcast %struct.vn_phi_s* %vp1 to i8*, !dbg !9686
  %hashcode18 = getelementptr inbounds %struct.vn_phi_s, %struct.vn_phi_s* %vp1, i32 0, i32 1, !dbg !9687
  %25 = load i32, i32* %hashcode18, align 4, !dbg !9687
  %call19 = call i8** @htab_find_slot_with_hash(%struct.htab* %23, i8* %24, i32 %25, i32 0), !dbg !9688
  store i8** %call19, i8*** %slot, align 8, !dbg !9689
  br label %if.end, !dbg !9690

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.end
  %26 = load i8**, i8*** %slot, align 8, !dbg !9691
  %tobool20 = icmp ne i8** %26, null, !dbg !9691
  br i1 %tobool20, label %if.end22, label %if.then21, !dbg !9693

if.then21:                                        ; preds = %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9694
  br label %return, !dbg !9694

if.end22:                                         ; preds = %if.end
  %27 = load i8**, i8*** %slot, align 8, !dbg !9695
  %28 = load i8*, i8** %27, align 8, !dbg !9696
  %29 = bitcast i8* %28 to %struct.vn_phi_s*, !dbg !9697
  %result = getelementptr inbounds %struct.vn_phi_s, %struct.vn_phi_s* %29, i32 0, i32 4, !dbg !9698
  %30 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !9698
  store %union.tree_node* %30, %union.tree_node** %retval, align 8, !dbg !9699
  br label %return, !dbg !9699

return:                                           ; preds = %if.end22, %if.then21
  %31 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !9700
  ret %union.tree_node* %31, !dbg !9700
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.vn_phi_s* @vn_phi_insert(%union.gimple_statement_d* %phi, %union.tree_node* %result) #0 !dbg !9701 {
entry:
  %phi.addr = alloca %union.gimple_statement_d*, align 8
  %result.addr = alloca %union.tree_node*, align 8
  %slot = alloca i8**, align 8
  %vp1 = alloca %struct.vn_phi_s*, align 8
  %i = alloca i32, align 4
  %args = alloca %struct.VEC_tree_heap*, align 8
  %def = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %phi, %union.gimple_statement_d** %phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi.addr, metadata !9704, metadata !DIExpression()), !dbg !9705
  store %union.tree_node* %result, %union.tree_node** %result.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %result.addr, metadata !9706, metadata !DIExpression()), !dbg !9707
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !9708, metadata !DIExpression()), !dbg !9709
  call void @llvm.dbg.declare(metadata %struct.vn_phi_s** %vp1, metadata !9710, metadata !DIExpression()), !dbg !9711
  %0 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !9712
  %phis_pool = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %0, i32 0, i32 4, !dbg !9713
  %1 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** %phis_pool, align 8, !dbg !9713
  %call = call i8* @pool_alloc(%struct.alloc_pool_def* %1), !dbg !9714
  %2 = bitcast i8* %call to %struct.vn_phi_s*, !dbg !9715
  store %struct.vn_phi_s* %2, %struct.vn_phi_s** %vp1, align 8, !dbg !9711
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9716, metadata !DIExpression()), !dbg !9717
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %args, metadata !9718, metadata !DIExpression()), !dbg !9719
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** %args, align 8, !dbg !9719
  store i32 0, i32* %i, align 4, !dbg !9720
  br label %for.cond, !dbg !9722

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4, !dbg !9723
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !9725
  %call1 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %4), !dbg !9726
  %cmp = icmp ult i32 %3, %call1, !dbg !9727
  br i1 %cmp, label %for.body, label %for.end, !dbg !9728

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %def, metadata !9729, metadata !DIExpression()), !dbg !9731
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !9732
  %6 = load i32, i32* %i, align 4, !dbg !9732
  %call2 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %5, i32 %6), !dbg !9732
  %call3 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call2), !dbg !9732
  store %union.tree_node* %call3, %union.tree_node** %def, align 8, !dbg !9731
  %7 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !9733
  %base = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !9733
  %8 = bitcast %struct.tree_base* %base to i64*, !dbg !9733
  %bf.load = load i64, i64* %8, align 8, !dbg !9733
  %bf.clear = and i64 %bf.load, 65535, !dbg !9733
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9733
  %cmp4 = icmp eq i32 %bf.cast, 141, !dbg !9734
  br i1 %cmp4, label %cond.true, label %cond.false, !dbg !9733

cond.true:                                        ; preds = %for.body
  %9 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !9735
  %call5 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %9), !dbg !9735
  %valnum = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call5, i32 0, i32 0, !dbg !9735
  %10 = load %union.tree_node*, %union.tree_node** %valnum, align 8, !dbg !9735
  br label %cond.end, !dbg !9733

cond.false:                                       ; preds = %for.body
  %11 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !9736
  br label %cond.end, !dbg !9733

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %10, %cond.true ], [ %11, %cond.false ], !dbg !9733
  store %union.tree_node* %cond, %union.tree_node** %def, align 8, !dbg !9737
  %12 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !9738
  %call6 = call %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** %args, %union.tree_node* %12), !dbg !9738
  br label %for.inc, !dbg !9739

for.inc:                                          ; preds = %cond.end
  %13 = load i32, i32* %i, align 4, !dbg !9740
  %inc = add i32 %13, 1, !dbg !9740
  store i32 %inc, i32* %i, align 4, !dbg !9740
  br label %for.cond, !dbg !9741, !llvm.loop !9742

for.end:                                          ; preds = %for.cond
  %14 = load %union.tree_node*, %union.tree_node** %result.addr, align 8, !dbg !9744
  %call7 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %14), !dbg !9745
  %value_id = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call7, i32 0, i32 2, !dbg !9746
  %15 = load i32, i32* %value_id, align 8, !dbg !9746
  %16 = load %struct.vn_phi_s*, %struct.vn_phi_s** %vp1, align 8, !dbg !9747
  %value_id8 = getelementptr inbounds %struct.vn_phi_s, %struct.vn_phi_s* %16, i32 0, i32 0, !dbg !9748
  store i32 %15, i32* %value_id8, align 8, !dbg !9749
  %17 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %args, align 8, !dbg !9750
  %18 = load %struct.vn_phi_s*, %struct.vn_phi_s** %vp1, align 8, !dbg !9751
  %phiargs = getelementptr inbounds %struct.vn_phi_s, %struct.vn_phi_s* %18, i32 0, i32 2, !dbg !9752
  store %struct.VEC_tree_heap* %17, %struct.VEC_tree_heap** %phiargs, align 8, !dbg !9753
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !9754
  %call9 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %19), !dbg !9755
  %20 = load %struct.vn_phi_s*, %struct.vn_phi_s** %vp1, align 8, !dbg !9756
  %block = getelementptr inbounds %struct.vn_phi_s, %struct.vn_phi_s* %20, i32 0, i32 3, !dbg !9757
  store %struct.basic_block_def* %call9, %struct.basic_block_def** %block, align 8, !dbg !9758
  %21 = load %union.tree_node*, %union.tree_node** %result.addr, align 8, !dbg !9759
  %22 = load %struct.vn_phi_s*, %struct.vn_phi_s** %vp1, align 8, !dbg !9760
  %result10 = getelementptr inbounds %struct.vn_phi_s, %struct.vn_phi_s* %22, i32 0, i32 4, !dbg !9761
  store %union.tree_node* %21, %union.tree_node** %result10, align 8, !dbg !9762
  %23 = load %struct.vn_phi_s*, %struct.vn_phi_s** %vp1, align 8, !dbg !9763
  %call11 = call i32 @vn_phi_compute_hash(%struct.vn_phi_s* %23), !dbg !9764
  %24 = load %struct.vn_phi_s*, %struct.vn_phi_s** %vp1, align 8, !dbg !9765
  %hashcode = getelementptr inbounds %struct.vn_phi_s, %struct.vn_phi_s* %24, i32 0, i32 1, !dbg !9766
  store i32 %call11, i32* %hashcode, align 4, !dbg !9767
  %25 = load %struct.vn_tables_s*, %struct.vn_tables_s** @current_info, align 8, !dbg !9768
  %phis = getelementptr inbounds %struct.vn_tables_s, %struct.vn_tables_s* %25, i32 0, i32 1, !dbg !9769
  %26 = load %struct.htab*, %struct.htab** %phis, align 8, !dbg !9769
  %27 = load %struct.vn_phi_s*, %struct.vn_phi_s** %vp1, align 8, !dbg !9770
  %28 = bitcast %struct.vn_phi_s* %27 to i8*, !dbg !9770
  %29 = load %struct.vn_phi_s*, %struct.vn_phi_s** %vp1, align 8, !dbg !9771
  %hashcode12 = getelementptr inbounds %struct.vn_phi_s, %struct.vn_phi_s* %29, i32 0, i32 1, !dbg !9772
  %30 = load i32, i32* %hashcode12, align 4, !dbg !9772
  %call13 = call i8** @htab_find_slot_with_hash(%struct.htab* %26, i8* %28, i32 %30, i32 1), !dbg !9773
  store i8** %call13, i8*** %slot, align 8, !dbg !9774
  %31 = load %struct.vn_phi_s*, %struct.vn_phi_s** %vp1, align 8, !dbg !9775
  %32 = bitcast %struct.vn_phi_s* %31 to i8*, !dbg !9775
  %33 = load i8**, i8*** %slot, align 8, !dbg !9776
  store i8* %32, i8** %33, align 8, !dbg !9777
  %34 = load %struct.vn_phi_s*, %struct.vn_phi_s** %vp1, align 8, !dbg !9778
  ret %struct.vn_phi_s* %34, !dbg !9779
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !9780 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9784, metadata !DIExpression()), !dbg !9785
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !9786, metadata !DIExpression()), !dbg !9787
  %0 = load i32, i32* %index.addr, align 4, !dbg !9788
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9788
  %gimple_phi = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_phi*, !dbg !9788
  %capacity = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 1, !dbg !9788
  %2 = load i32, i32* %capacity, align 8, !dbg !9788
  %cmp = icmp ule i32 %0, %2, !dbg !9788
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !9788

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i64 0, i64 0), i32 3103, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9788
  br label %cond.end, !dbg !9788

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9788

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9788
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9789
  %gimple_phi1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_phi*, !dbg !9790
  %args = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi1, i32 0, i32 4, !dbg !9791
  %4 = load i32, i32* %index.addr, align 4, !dbg !9792
  %idxprom = zext i32 %4 to i64, !dbg !9789
  %arrayidx = getelementptr inbounds [1 x %struct.phi_arg_d], [1 x %struct.phi_arg_d]* %args, i64 0, i64 %idxprom, !dbg !9789
  ret %struct.phi_arg_d* %arrayidx, !dbg !9793
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_tree_base_truncate(%struct.VEC_tree_base* %vec_, i32 %size_) #0 !dbg !9794 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %size_.addr = alloca i32, align 4
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !9797, metadata !DIExpression()), !dbg !9798
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !9799, metadata !DIExpression()), !dbg !9798
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !9798
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !9798
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9798

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !9798
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %1, i32 0, i32 0, !dbg !9798
  %2 = load i32, i32* %num, align 8, !dbg !9798
  %3 = load i32, i32* %size_.addr, align 4, !dbg !9798
  %cmp = icmp uge i32 %2, %3, !dbg !9798
  %conv = zext i1 %cmp to i32, !dbg !9798
  br label %cond.end, !dbg !9798

cond.false:                                       ; preds = %entry
  %4 = load i32, i32* %size_.addr, align 4, !dbg !9798
  %tobool1 = icmp ne i32 %4, 0, !dbg !9798
  %lnot = xor i1 %tobool1, true, !dbg !9798
  %lnot.ext = zext i1 %lnot to i32, !dbg !9798
  br label %cond.end, !dbg !9798

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !9798
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !9800
  %tobool2 = icmp ne %struct.VEC_tree_base* %5, null, !dbg !9800
  br i1 %tobool2, label %if.then, label %if.end, !dbg !9798

if.then:                                          ; preds = %cond.end
  %6 = load i32, i32* %size_.addr, align 4, !dbg !9800
  %7 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !9800
  %num3 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %7, i32 0, i32 0, !dbg !9800
  store i32 %6, i32* %num3, align 8, !dbg !9800
  br label %if.end, !dbg !9800

if.end:                                           ; preds = %if.then, %cond.end
  ret void, !dbg !9798
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @vn_phi_compute_hash(%struct.vn_phi_s* %vp1) #0 !dbg !9802 {
entry:
  %vp1.addr = alloca %struct.vn_phi_s*, align 8
  %result = alloca i32, align 4
  %i = alloca i32, align 4
  %phi1op = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  store %struct.vn_phi_s* %vp1, %struct.vn_phi_s** %vp1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.vn_phi_s** %vp1.addr, metadata !9805, metadata !DIExpression()), !dbg !9806
  call void @llvm.dbg.declare(metadata i32* %result, metadata !9807, metadata !DIExpression()), !dbg !9808
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9809, metadata !DIExpression()), !dbg !9810
  call void @llvm.dbg.declare(metadata %union.tree_node** %phi1op, metadata !9811, metadata !DIExpression()), !dbg !9812
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !9813, metadata !DIExpression()), !dbg !9814
  %0 = load %struct.vn_phi_s*, %struct.vn_phi_s** %vp1.addr, align 8, !dbg !9815
  %block = getelementptr inbounds %struct.vn_phi_s, %struct.vn_phi_s* %0, i32 0, i32 3, !dbg !9816
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %block, align 8, !dbg !9816
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 9, !dbg !9817
  %2 = load i32, i32* %index, align 8, !dbg !9817
  store i32 %2, i32* %result, align 4, !dbg !9818
  %3 = load %struct.vn_phi_s*, %struct.vn_phi_s** %vp1.addr, align 8, !dbg !9819
  %phiargs = getelementptr inbounds %struct.vn_phi_s, %struct.vn_phi_s* %3, i32 0, i32 2, !dbg !9819
  %4 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %phiargs, align 8, !dbg !9819
  %tobool = icmp ne %struct.VEC_tree_heap* %4, null, !dbg !9819
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9819

cond.true:                                        ; preds = %entry
  %5 = load %struct.vn_phi_s*, %struct.vn_phi_s** %vp1.addr, align 8, !dbg !9819
  %phiargs1 = getelementptr inbounds %struct.vn_phi_s, %struct.vn_phi_s* %5, i32 0, i32 2, !dbg !9819
  %6 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %phiargs1, align 8, !dbg !9819
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %6, i32 0, i32 0, !dbg !9819
  br label %cond.end, !dbg !9819

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9819

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9819
  %call = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond, i32 0), !dbg !9819
  %common = bitcast %union.tree_node* %call to %struct.tree_common*, !dbg !9819
  %type2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !9819
  %7 = load %union.tree_node*, %union.tree_node** %type2, align 8, !dbg !9819
  store %union.tree_node* %7, %union.tree_node** %type, align 8, !dbg !9820
  %8 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9821
  %base3 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !9821
  %9 = bitcast %struct.tree_base* %base3 to i64*, !dbg !9821
  %bf.load = load i64, i64* %9, align 8, !dbg !9821
  %bf.clear = and i64 %bf.load, 65535, !dbg !9821
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9821
  %cmp = icmp eq i32 %bf.cast, 6, !dbg !9821
  br i1 %cmp, label %lor.end, label %lor.lhs.false, !dbg !9821

lor.lhs.false:                                    ; preds = %cond.end
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9821
  %base4 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !9821
  %11 = bitcast %struct.tree_base* %base4 to i64*, !dbg !9821
  %bf.load5 = load i64, i64* %11, align 8, !dbg !9821
  %bf.clear6 = and i64 %bf.load5, 65535, !dbg !9821
  %bf.cast7 = trunc i64 %bf.clear6 to i32, !dbg !9821
  %cmp8 = icmp eq i32 %bf.cast7, 7, !dbg !9821
  br i1 %cmp8, label %lor.end, label %lor.rhs, !dbg !9821

lor.rhs:                                          ; preds = %lor.lhs.false
  %12 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9821
  %base9 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !9821
  %13 = bitcast %struct.tree_base* %base9 to i64*, !dbg !9821
  %bf.load10 = load i64, i64* %13, align 8, !dbg !9821
  %bf.clear11 = and i64 %bf.load10, 65535, !dbg !9821
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !9821
  %cmp13 = icmp eq i32 %bf.cast12, 8, !dbg !9821
  br label %lor.end, !dbg !9821

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %cond.end
  %14 = phi i1 [ true, %lor.lhs.false ], [ true, %cond.end ], [ %cmp13, %lor.rhs ]
  %lor.ext = zext i1 %14 to i32, !dbg !9821
  %15 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9822
  %base14 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !9822
  %16 = bitcast %struct.tree_base* %base14 to i64*, !dbg !9822
  %bf.load15 = load i64, i64* %16, align 8, !dbg !9822
  %bf.clear16 = and i64 %bf.load15, 65535, !dbg !9822
  %bf.cast17 = trunc i64 %bf.clear16 to i32, !dbg !9822
  %cmp18 = icmp eq i32 %bf.cast17, 6, !dbg !9822
  br i1 %cmp18, label %cond.true31, label %lor.lhs.false19, !dbg !9822

lor.lhs.false19:                                  ; preds = %lor.end
  %17 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9822
  %base20 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !9822
  %18 = bitcast %struct.tree_base* %base20 to i64*, !dbg !9822
  %bf.load21 = load i64, i64* %18, align 8, !dbg !9822
  %bf.clear22 = and i64 %bf.load21, 65535, !dbg !9822
  %bf.cast23 = trunc i64 %bf.clear22 to i32, !dbg !9822
  %cmp24 = icmp eq i32 %bf.cast23, 7, !dbg !9822
  br i1 %cmp24, label %cond.true31, label %lor.lhs.false25, !dbg !9822

lor.lhs.false25:                                  ; preds = %lor.lhs.false19
  %19 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9822
  %base26 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !9822
  %20 = bitcast %struct.tree_base* %base26 to i64*, !dbg !9822
  %bf.load27 = load i64, i64* %20, align 8, !dbg !9822
  %bf.clear28 = and i64 %bf.load27, 65535, !dbg !9822
  %bf.cast29 = trunc i64 %bf.clear28 to i32, !dbg !9822
  %cmp30 = icmp eq i32 %bf.cast29, 8, !dbg !9822
  br i1 %cmp30, label %cond.true31, label %cond.false39, !dbg !9822

cond.true31:                                      ; preds = %lor.lhs.false25, %lor.lhs.false19, %lor.end
  %21 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9823
  %type32 = bitcast %union.tree_node* %21 to %struct.tree_type*, !dbg !9823
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type32, i32 0, i32 6, !dbg !9823
  %bf.load33 = load i32, i32* %precision, align 4, !dbg !9823
  %bf.clear34 = and i32 %bf.load33, 1023, !dbg !9823
  %22 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9824
  %base35 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !9824
  %23 = bitcast %struct.tree_base* %base35 to i64*, !dbg !9824
  %bf.load36 = load i64, i64* %23, align 8, !dbg !9824
  %bf.lshr = lshr i64 %bf.load36, 21, !dbg !9824
  %bf.clear37 = and i64 %bf.lshr, 1, !dbg !9824
  %bf.cast38 = trunc i64 %bf.clear37 to i32, !dbg !9824
  %add = add nsw i32 %bf.clear34, %bf.cast38, !dbg !9825
  br label %cond.end40, !dbg !9822

cond.false39:                                     ; preds = %lor.lhs.false25
  br label %cond.end40, !dbg !9822

cond.end40:                                       ; preds = %cond.false39, %cond.true31
  %cond41 = phi i32 [ %add, %cond.true31 ], [ 0, %cond.false39 ], !dbg !9822
  %add42 = add nsw i32 %lor.ext, %cond41, !dbg !9826
  %24 = load i32, i32* %result, align 4, !dbg !9827
  %add43 = add i32 %24, %add42, !dbg !9827
  store i32 %add43, i32* %result, align 4, !dbg !9827
  store i32 0, i32* %i, align 4, !dbg !9828
  br label %for.cond, !dbg !9830

for.cond:                                         ; preds = %for.inc, %cond.end40
  %25 = load %struct.vn_phi_s*, %struct.vn_phi_s** %vp1.addr, align 8, !dbg !9831
  %phiargs44 = getelementptr inbounds %struct.vn_phi_s, %struct.vn_phi_s* %25, i32 0, i32 2, !dbg !9831
  %26 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %phiargs44, align 8, !dbg !9831
  %tobool45 = icmp ne %struct.VEC_tree_heap* %26, null, !dbg !9831
  br i1 %tobool45, label %cond.true46, label %cond.false49, !dbg !9831

cond.true46:                                      ; preds = %for.cond
  %27 = load %struct.vn_phi_s*, %struct.vn_phi_s** %vp1.addr, align 8, !dbg !9831
  %phiargs47 = getelementptr inbounds %struct.vn_phi_s, %struct.vn_phi_s* %27, i32 0, i32 2, !dbg !9831
  %28 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %phiargs47, align 8, !dbg !9831
  %base48 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %28, i32 0, i32 0, !dbg !9831
  br label %cond.end50, !dbg !9831

cond.false49:                                     ; preds = %for.cond
  br label %cond.end50, !dbg !9831

cond.end50:                                       ; preds = %cond.false49, %cond.true46
  %cond51 = phi %struct.VEC_tree_base* [ %base48, %cond.true46 ], [ null, %cond.false49 ], !dbg !9831
  %29 = load i32, i32* %i, align 4, !dbg !9831
  %call52 = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond51, i32 %29, %union.tree_node** %phi1op), !dbg !9831
  %tobool53 = icmp ne i32 %call52, 0, !dbg !9833
  br i1 %tobool53, label %for.body, label %for.end, !dbg !9833

for.body:                                         ; preds = %cond.end50
  %30 = load %union.tree_node*, %union.tree_node** %phi1op, align 8, !dbg !9834
  %31 = load %union.tree_node*, %union.tree_node** @VN_TOP, align 8, !dbg !9837
  %cmp54 = icmp eq %union.tree_node* %30, %31, !dbg !9838
  br i1 %cmp54, label %if.then, label %if.end, !dbg !9839

if.then:                                          ; preds = %for.body
  br label %for.inc, !dbg !9840

if.end:                                           ; preds = %for.body
  %32 = load %union.tree_node*, %union.tree_node** %phi1op, align 8, !dbg !9841
  %33 = load i32, i32* %result, align 4, !dbg !9842
  %call55 = call i32 @iterative_hash_expr(%union.tree_node* %32, i32 %33), !dbg !9843
  store i32 %call55, i32* %result, align 4, !dbg !9844
  br label %for.inc, !dbg !9845

for.inc:                                          ; preds = %if.end, %if.then
  %34 = load i32, i32* %i, align 4, !dbg !9846
  %inc = add nsw i32 %34, 1, !dbg !9846
  store i32 %inc, i32* %i, align 4, !dbg !9846
  br label %for.cond, !dbg !9847, !llvm.loop !9848

for.end:                                          ; preds = %cond.end50
  %35 = load i32, i32* %result, align 4, !dbg !9850
  ret i32 %35, !dbg !9851
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @op_iter_init_def(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !9852 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !9855, metadata !DIExpression()), !dbg !9856
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !9857, metadata !DIExpression()), !dbg !9858
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !9859, metadata !DIExpression()), !dbg !9860
  %0 = load i32, i32* %flags.addr, align 4, !dbg !9861
  %and = and i32 %0, 5, !dbg !9861
  %cmp = icmp eq i32 %and, 0, !dbg !9861
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !9861

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !9861
  %and1 = and i32 %1, 2, !dbg !9861
  %tobool = icmp ne i32 %and1, 0, !dbg !9861
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !9861

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.9, i64 0, i64 0), i32 783, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9861
  br label %cond.end, !dbg !9861

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !9861

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9861
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !9862
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9863
  %4 = load i32, i32* %flags.addr, align 4, !dbg !9864
  call void @op_iter_init(%struct.ssa_operand_iterator_d* %2, %union.gimple_statement_d* %3, i32 %4), !dbg !9865
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !9866
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 1, !dbg !9867
  store i32 3, i32* %iter_type, align 4, !dbg !9868
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !9869
  %call = call %union.tree_node** @op_iter_next_def(%struct.ssa_operand_iterator_d* %6), !dbg !9870
  ret %union.tree_node** %call, !dbg !9871
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @op_iter_next_def(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !9872 {
entry:
  %retval = alloca %union.tree_node**, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %def_p = alloca %union.tree_node**, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !9875, metadata !DIExpression()), !dbg !9876
  call void @llvm.dbg.declare(metadata %union.tree_node*** %def_p, metadata !9877, metadata !DIExpression()), !dbg !9878
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !9879
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 2, !dbg !9881
  %1 = load %struct.def_optype_d*, %struct.def_optype_d** %defs, align 8, !dbg !9881
  %tobool = icmp ne %struct.def_optype_d* %1, null, !dbg !9879
  br i1 %tobool, label %if.then, label %if.end, !dbg !9882

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !9883
  %defs1 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 2, !dbg !9883
  %3 = load %struct.def_optype_d*, %struct.def_optype_d** %defs1, align 8, !dbg !9883
  %def_ptr = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %3, i32 0, i32 1, !dbg !9883
  %4 = load %union.tree_node**, %union.tree_node*** %def_ptr, align 8, !dbg !9883
  store %union.tree_node** %4, %union.tree_node*** %def_p, align 8, !dbg !9885
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !9886
  %defs2 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 2, !dbg !9887
  %6 = load %struct.def_optype_d*, %struct.def_optype_d** %defs2, align 8, !dbg !9887
  %next = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %6, i32 0, i32 0, !dbg !9888
  %7 = load %struct.def_optype_d*, %struct.def_optype_d** %next, align 8, !dbg !9888
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !9889
  %defs3 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 2, !dbg !9890
  store %struct.def_optype_d* %7, %struct.def_optype_d** %defs3, align 8, !dbg !9891
  %9 = load %union.tree_node**, %union.tree_node*** %def_p, align 8, !dbg !9892
  store %union.tree_node** %9, %union.tree_node*** %retval, align 8, !dbg !9893
  br label %return, !dbg !9893

if.end:                                           ; preds = %entry
  %10 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !9894
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %10, i32 0, i32 0, !dbg !9895
  store i8 1, i8* %done, align 8, !dbg !9896
  store %union.tree_node** null, %union.tree_node*** %retval, align 8, !dbg !9897
  br label %return, !dbg !9897

return:                                           ; preds = %if.end, %if.then
  %11 = load %union.tree_node**, %union.tree_node*** %retval, align 8, !dbg !9898
  ret %union.tree_node** %11, !dbg !9898
}

declare dso_local %union.tree_node* @get_symbol_constant_value(%union.tree_node*) #2

declare dso_local %union.tree_node* @fold_const_aggregate_ref(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @simplify_unary_expression(%union.gimple_statement_d* %stmt) #0 !dbg !9899 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %result = alloca %union.tree_node*, align 8
  %orig_op0 = alloca %union.tree_node*, align 8
  %op0 = alloca %union.tree_node*, align 8
  %tem = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !9900, metadata !DIExpression()), !dbg !9901
  call void @llvm.dbg.declare(metadata %union.tree_node** %result, metadata !9902, metadata !DIExpression()), !dbg !9903
  store %union.tree_node* null, %union.tree_node** %result, align 8, !dbg !9903
  call void @llvm.dbg.declare(metadata %union.tree_node** %orig_op0, metadata !9904, metadata !DIExpression()), !dbg !9905
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !9906, metadata !DIExpression()), !dbg !9907
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9908
  %call = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %0), !dbg !9909
  store %union.tree_node* %call, %union.tree_node** %op0, align 8, !dbg !9907
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9910
  %call1 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %1), !dbg !9912
  %cmp = icmp eq i32 %call1, 43, !dbg !9913
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !9914

lor.lhs.false:                                    ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9915
  %call2 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %2), !dbg !9916
  %cmp3 = icmp eq i32 %call2, 44, !dbg !9917
  br i1 %cmp3, label %if.then, label %lor.lhs.false4, !dbg !9918

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9919
  %call5 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %3), !dbg !9920
  %cmp6 = icmp eq i32 %call5, 118, !dbg !9921
  br i1 %cmp6, label %if.then, label %if.end, !dbg !9922

if.then:                                          ; preds = %lor.lhs.false4, %lor.lhs.false, %entry
  %4 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !9923
  %exp = bitcast %union.tree_node* %4 to %struct.tree_exp*, !dbg !9923
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !9923
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !9923
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !9923
  store %union.tree_node* %5, %union.tree_node** %op0, align 8, !dbg !9924
  br label %if.end, !dbg !9925

if.end:                                           ; preds = %if.then, %lor.lhs.false4
  %6 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !9926
  %base = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !9926
  %7 = bitcast %struct.tree_base* %base to i64*, !dbg !9926
  %bf.load = load i64, i64* %7, align 8, !dbg !9926
  %bf.clear = and i64 %bf.load, 65535, !dbg !9926
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9926
  %cmp7 = icmp ne i32 %bf.cast, 141, !dbg !9928
  br i1 %cmp7, label %if.then8, label %if.end9, !dbg !9929

if.then8:                                         ; preds = %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9930
  br label %return, !dbg !9930

if.end9:                                          ; preds = %if.end
  %8 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !9931
  store %union.tree_node* %8, %union.tree_node** %orig_op0, align 8, !dbg !9932
  %9 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !9933
  %call10 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %9), !dbg !9935
  %has_constants = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call10, i32 0, i32 5, !dbg !9936
  %bf.load11 = load i8, i8* %has_constants, align 4, !dbg !9936
  %bf.lshr = lshr i8 %bf.load11, 2, !dbg !9936
  %bf.clear12 = and i8 %bf.lshr, 1, !dbg !9936
  %bf.cast13 = zext i8 %bf.clear12 to i32, !dbg !9936
  %tobool = icmp ne i32 %bf.cast13, 0, !dbg !9935
  br i1 %tobool, label %if.then14, label %if.else, !dbg !9937

if.then14:                                        ; preds = %if.end9
  %10 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !9938
  %call15 = call %union.tree_node* @vn_get_expr_for(%union.tree_node* %10), !dbg !9939
  %call16 = call %union.tree_node* @valueize_expr(%union.tree_node* %call15), !dbg !9940
  store %union.tree_node* %call16, %union.tree_node** %op0, align 8, !dbg !9941
  br label %if.end71, !dbg !9942

if.else:                                          ; preds = %if.end9
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9943
  %call17 = call zeroext i8 @gimple_assign_cast_p(%union.gimple_statement_d* %11), !dbg !9945
  %conv = zext i8 %call17 to i32, !dbg !9945
  %tobool18 = icmp ne i32 %conv, 0, !dbg !9945
  br i1 %tobool18, label %if.then31, label %lor.lhs.false19, !dbg !9946

lor.lhs.false19:                                  ; preds = %if.else
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9947
  %call20 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %12), !dbg !9948
  %cmp21 = icmp eq i32 %call20, 43, !dbg !9949
  br i1 %cmp21, label %if.then31, label %lor.lhs.false23, !dbg !9950

lor.lhs.false23:                                  ; preds = %lor.lhs.false19
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9951
  %call24 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %13), !dbg !9952
  %cmp25 = icmp eq i32 %call24, 44, !dbg !9953
  br i1 %cmp25, label %if.then31, label %lor.lhs.false27, !dbg !9954

lor.lhs.false27:                                  ; preds = %lor.lhs.false23
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9955
  %call28 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %14), !dbg !9956
  %cmp29 = icmp eq i32 %call28, 118, !dbg !9957
  br i1 %cmp29, label %if.then31, label %if.end70, !dbg !9958

if.then31:                                        ; preds = %lor.lhs.false27, %lor.lhs.false23, %lor.lhs.false19, %if.else
  call void @llvm.dbg.declare(metadata %union.tree_node** %tem, metadata !9959, metadata !DIExpression()), !dbg !9961
  %15 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !9962
  %call32 = call %union.tree_node* @vn_get_expr_for(%union.tree_node* %15), !dbg !9963
  %call33 = call %union.tree_node* @valueize_expr(%union.tree_node* %call32), !dbg !9964
  store %union.tree_node* %call33, %union.tree_node** %tem, align 8, !dbg !9961
  %16 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !9965
  %base34 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !9965
  %17 = bitcast %struct.tree_base* %base34 to i64*, !dbg !9965
  %bf.load35 = load i64, i64* %17, align 8, !dbg !9965
  %bf.clear36 = and i64 %bf.load35, 65535, !dbg !9965
  %bf.cast37 = trunc i64 %bf.clear36 to i32, !dbg !9965
  %idxprom = sext i32 %bf.cast37 to i64, !dbg !9965
  %arrayidx38 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !9965
  %18 = load i32, i32* %arrayidx38, align 4, !dbg !9965
  %cmp39 = icmp eq i32 %18, 6, !dbg !9965
  br i1 %cmp39, label %if.then68, label %lor.lhs.false41, !dbg !9967

lor.lhs.false41:                                  ; preds = %if.then31
  %19 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !9968
  %base42 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !9968
  %20 = bitcast %struct.tree_base* %base42 to i64*, !dbg !9968
  %bf.load43 = load i64, i64* %20, align 8, !dbg !9968
  %bf.clear44 = and i64 %bf.load43, 65535, !dbg !9968
  %bf.cast45 = trunc i64 %bf.clear44 to i32, !dbg !9968
  %idxprom46 = sext i32 %bf.cast45 to i64, !dbg !9968
  %arrayidx47 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom46, !dbg !9968
  %21 = load i32, i32* %arrayidx47, align 4, !dbg !9968
  %cmp48 = icmp eq i32 %21, 7, !dbg !9968
  br i1 %cmp48, label %if.then68, label %lor.lhs.false50, !dbg !9969

lor.lhs.false50:                                  ; preds = %lor.lhs.false41
  %22 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !9970
  %base51 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !9970
  %23 = bitcast %struct.tree_base* %base51 to i64*, !dbg !9970
  %bf.load52 = load i64, i64* %23, align 8, !dbg !9970
  %bf.clear53 = and i64 %bf.load52, 65535, !dbg !9970
  %bf.cast54 = trunc i64 %bf.clear53 to i32, !dbg !9970
  %cmp55 = icmp eq i32 %bf.cast54, 118, !dbg !9971
  br i1 %cmp55, label %if.then68, label %lor.lhs.false57, !dbg !9972

lor.lhs.false57:                                  ; preds = %lor.lhs.false50
  %24 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !9973
  %base58 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !9973
  %25 = bitcast %struct.tree_base* %base58 to i64*, !dbg !9973
  %bf.load59 = load i64, i64* %25, align 8, !dbg !9973
  %bf.clear60 = and i64 %bf.load59, 65535, !dbg !9973
  %bf.cast61 = trunc i64 %bf.clear60 to i32, !dbg !9973
  %cmp62 = icmp eq i32 %bf.cast61, 141, !dbg !9974
  br i1 %cmp62, label %if.then68, label %lor.lhs.false64, !dbg !9975

lor.lhs.false64:                                  ; preds = %lor.lhs.false57
  %26 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !9976
  %call65 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %26), !dbg !9977
  %conv66 = zext i8 %call65 to i32, !dbg !9977
  %tobool67 = icmp ne i32 %conv66, 0, !dbg !9977
  br i1 %tobool67, label %if.then68, label %if.end69, !dbg !9978

if.then68:                                        ; preds = %lor.lhs.false64, %lor.lhs.false57, %lor.lhs.false50, %lor.lhs.false41, %if.then31
  %27 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !9979
  store %union.tree_node* %27, %union.tree_node** %op0, align 8, !dbg !9980
  br label %if.end69, !dbg !9981

if.end69:                                         ; preds = %if.then68, %lor.lhs.false64
  br label %if.end70, !dbg !9982

if.end70:                                         ; preds = %if.end69, %lor.lhs.false27
  br label %if.end71

if.end71:                                         ; preds = %if.end70, %if.then14
  %28 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !9983
  %29 = load %union.tree_node*, %union.tree_node** %orig_op0, align 8, !dbg !9985
  %cmp72 = icmp eq %union.tree_node* %28, %29, !dbg !9986
  br i1 %cmp72, label %if.then74, label %if.end75, !dbg !9987

if.then74:                                        ; preds = %if.end71
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9988
  br label %return, !dbg !9988

if.end75:                                         ; preds = %if.end71
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9989
  %call76 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %30), !dbg !9989
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9989
  %call77 = call %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %31), !dbg !9989
  %32 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !9989
  %call78 = call %union.tree_node* @fold_unary_ignore_overflow_loc(i32 0, i32 %call76, %union.tree_node* %call77, %union.tree_node* %32), !dbg !9989
  store %union.tree_node* %call78, %union.tree_node** %result, align 8, !dbg !9990
  %33 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !9991
  %tobool79 = icmp ne %union.tree_node* %33, null, !dbg !9991
  br i1 %tobool79, label %if.then80, label %if.end86, !dbg !9993

if.then80:                                        ; preds = %if.end75
  %34 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !9994
  %call81 = call %union.tree_node* @tree_ssa_strip_useless_type_conversions(%union.tree_node* %34), !dbg !9994
  store %union.tree_node* %call81, %union.tree_node** %result, align 8, !dbg !9994
  %35 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !9996
  %call82 = call zeroext i8 @valid_gimple_rhs_p(%union.tree_node* %35), !dbg !9998
  %tobool83 = icmp ne i8 %call82, 0, !dbg !9998
  br i1 %tobool83, label %if.then84, label %if.end85, !dbg !9999

if.then84:                                        ; preds = %if.then80
  %36 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !10000
  store %union.tree_node* %36, %union.tree_node** %retval, align 8, !dbg !10001
  br label %return, !dbg !10001

if.end85:                                         ; preds = %if.then80
  br label %if.end86, !dbg !10002

if.end86:                                         ; preds = %if.end85, %if.end75
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !10003
  br label %return, !dbg !10003

return:                                           ; preds = %if.end86, %if.then84, %if.then74, %if.then8
  %37 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !10004
  ret %union.tree_node* %37, !dbg !10004
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @simplify_binary_expression(%union.gimple_statement_d* %stmt) #0 !dbg !10005 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %result = alloca %union.tree_node*, align 8
  %op0 = alloca %union.tree_node*, align 8
  %op1 = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !10006, metadata !DIExpression()), !dbg !10007
  call void @llvm.dbg.declare(metadata %union.tree_node** %result, metadata !10008, metadata !DIExpression()), !dbg !10009
  store %union.tree_node* null, %union.tree_node** %result, align 8, !dbg !10009
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !10010, metadata !DIExpression()), !dbg !10011
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !10012
  %call = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %0), !dbg !10013
  store %union.tree_node* %call, %union.tree_node** %op0, align 8, !dbg !10011
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1, metadata !10014, metadata !DIExpression()), !dbg !10015
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !10016
  %call1 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %1), !dbg !10017
  store %union.tree_node* %call1, %union.tree_node** %op1, align 8, !dbg !10015
  %2 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !10018
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !10018
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !10018
  %bf.load = load i64, i64* %3, align 8, !dbg !10018
  %bf.clear = and i64 %bf.load, 65535, !dbg !10018
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10018
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !10020
  br i1 %cmp, label %if.then, label %if.end20, !dbg !10021

if.then:                                          ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !10022
  %call2 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %4), !dbg !10025
  %has_constants = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call2, i32 0, i32 5, !dbg !10026
  %bf.load3 = load i8, i8* %has_constants, align 4, !dbg !10026
  %bf.lshr = lshr i8 %bf.load3, 2, !dbg !10026
  %bf.clear4 = and i8 %bf.lshr, 1, !dbg !10026
  %bf.cast5 = zext i8 %bf.clear4 to i32, !dbg !10026
  %tobool = icmp ne i32 %bf.cast5, 0, !dbg !10025
  br i1 %tobool, label %if.then8, label %lor.lhs.false, !dbg !10027

lor.lhs.false:                                    ; preds = %if.then
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !10028
  %call6 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %5), !dbg !10028
  %idxprom = sext i32 %call6 to i64, !dbg !10028
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !10028
  %6 = load i32, i32* %arrayidx, align 4, !dbg !10028
  %cmp7 = icmp eq i32 %6, 5, !dbg !10029
  br i1 %cmp7, label %if.then8, label %if.else, !dbg !10030

if.then8:                                         ; preds = %lor.lhs.false, %if.then
  %7 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !10031
  %call9 = call %union.tree_node* @vn_get_expr_for(%union.tree_node* %7), !dbg !10032
  %call10 = call %union.tree_node* @valueize_expr(%union.tree_node* %call9), !dbg !10033
  store %union.tree_node* %call10, %union.tree_node** %op0, align 8, !dbg !10034
  br label %if.end19, !dbg !10035

if.else:                                          ; preds = %lor.lhs.false
  %8 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !10036
  %call11 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %8), !dbg !10036
  %valnum = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call11, i32 0, i32 0, !dbg !10036
  %9 = load %union.tree_node*, %union.tree_node** %valnum, align 8, !dbg !10036
  %10 = load %union.tree_node*, %union.tree_node** @VN_TOP, align 8, !dbg !10038
  %cmp12 = icmp ne %union.tree_node* %9, %10, !dbg !10039
  br i1 %cmp12, label %land.lhs.true, label %if.end, !dbg !10040

land.lhs.true:                                    ; preds = %if.else
  %11 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !10041
  %call13 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %11), !dbg !10041
  %valnum14 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call13, i32 0, i32 0, !dbg !10041
  %12 = load %union.tree_node*, %union.tree_node** %valnum14, align 8, !dbg !10041
  %13 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !10042
  %cmp15 = icmp ne %union.tree_node* %12, %13, !dbg !10043
  br i1 %cmp15, label %if.then16, label %if.end, !dbg !10044

if.then16:                                        ; preds = %land.lhs.true
  %14 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !10045
  %call17 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %14), !dbg !10045
  %valnum18 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call17, i32 0, i32 0, !dbg !10045
  %15 = load %union.tree_node*, %union.tree_node** %valnum18, align 8, !dbg !10045
  store %union.tree_node* %15, %union.tree_node** %op0, align 8, !dbg !10046
  br label %if.end, !dbg !10047

if.end:                                           ; preds = %if.then16, %land.lhs.true, %if.else
  br label %if.end19

if.end19:                                         ; preds = %if.end, %if.then8
  br label %if.end20, !dbg !10048

if.end20:                                         ; preds = %if.end19, %entry
  %16 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !10049
  %base21 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !10049
  %17 = bitcast %struct.tree_base* %base21 to i64*, !dbg !10049
  %bf.load22 = load i64, i64* %17, align 8, !dbg !10049
  %bf.clear23 = and i64 %bf.load22, 65535, !dbg !10049
  %bf.cast24 = trunc i64 %bf.clear23 to i32, !dbg !10049
  %cmp25 = icmp eq i32 %bf.cast24, 141, !dbg !10051
  br i1 %cmp25, label %if.then26, label %if.end50, !dbg !10052

if.then26:                                        ; preds = %if.end20
  %18 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !10053
  %call27 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %18), !dbg !10056
  %has_constants28 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call27, i32 0, i32 5, !dbg !10057
  %bf.load29 = load i8, i8* %has_constants28, align 4, !dbg !10057
  %bf.lshr30 = lshr i8 %bf.load29, 2, !dbg !10057
  %bf.clear31 = and i8 %bf.lshr30, 1, !dbg !10057
  %bf.cast32 = zext i8 %bf.clear31 to i32, !dbg !10057
  %tobool33 = icmp ne i32 %bf.cast32, 0, !dbg !10056
  br i1 %tobool33, label %if.then34, label %if.else37, !dbg !10058

if.then34:                                        ; preds = %if.then26
  %19 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !10059
  %call35 = call %union.tree_node* @vn_get_expr_for(%union.tree_node* %19), !dbg !10060
  %call36 = call %union.tree_node* @valueize_expr(%union.tree_node* %call35), !dbg !10061
  store %union.tree_node* %call36, %union.tree_node** %op1, align 8, !dbg !10062
  br label %if.end49, !dbg !10063

if.else37:                                        ; preds = %if.then26
  %20 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !10064
  %call38 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %20), !dbg !10064
  %valnum39 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call38, i32 0, i32 0, !dbg !10064
  %21 = load %union.tree_node*, %union.tree_node** %valnum39, align 8, !dbg !10064
  %22 = load %union.tree_node*, %union.tree_node** @VN_TOP, align 8, !dbg !10066
  %cmp40 = icmp ne %union.tree_node* %21, %22, !dbg !10067
  br i1 %cmp40, label %land.lhs.true41, label %if.end48, !dbg !10068

land.lhs.true41:                                  ; preds = %if.else37
  %23 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !10069
  %call42 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %23), !dbg !10069
  %valnum43 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call42, i32 0, i32 0, !dbg !10069
  %24 = load %union.tree_node*, %union.tree_node** %valnum43, align 8, !dbg !10069
  %25 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !10070
  %cmp44 = icmp ne %union.tree_node* %24, %25, !dbg !10071
  br i1 %cmp44, label %if.then45, label %if.end48, !dbg !10072

if.then45:                                        ; preds = %land.lhs.true41
  %26 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !10073
  %call46 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %26), !dbg !10073
  %valnum47 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call46, i32 0, i32 0, !dbg !10073
  %27 = load %union.tree_node*, %union.tree_node** %valnum47, align 8, !dbg !10073
  store %union.tree_node* %27, %union.tree_node** %op1, align 8, !dbg !10074
  br label %if.end48, !dbg !10075

if.end48:                                         ; preds = %if.then45, %land.lhs.true41, %if.else37
  br label %if.end49

if.end49:                                         ; preds = %if.end48, %if.then34
  br label %if.end50, !dbg !10076

if.end50:                                         ; preds = %if.end49, %if.end20
  %28 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !10077
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !10079
  %call51 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %29), !dbg !10080
  %cmp52 = icmp eq %union.tree_node* %28, %call51, !dbg !10081
  br i1 %cmp52, label %land.lhs.true53, label %if.end57, !dbg !10082

land.lhs.true53:                                  ; preds = %if.end50
  %30 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !10083
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !10084
  %call54 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %31), !dbg !10085
  %cmp55 = icmp eq %union.tree_node* %30, %call54, !dbg !10086
  br i1 %cmp55, label %if.then56, label %if.end57, !dbg !10087

if.then56:                                        ; preds = %land.lhs.true53
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !10088
  br label %return, !dbg !10088

if.end57:                                         ; preds = %land.lhs.true53, %if.end50
  call void @fold_defer_overflow_warnings(), !dbg !10089
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !10090
  %call58 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %32), !dbg !10090
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !10090
  %call59 = call %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %33), !dbg !10090
  %34 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !10090
  %35 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !10090
  %call60 = call %union.tree_node* @fold_binary_loc(i32 0, i32 %call58, %union.tree_node* %call59, %union.tree_node* %34, %union.tree_node* %35), !dbg !10090
  store %union.tree_node* %call60, %union.tree_node** %result, align 8, !dbg !10091
  %36 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !10092
  %tobool61 = icmp ne %union.tree_node* %36, null, !dbg !10092
  br i1 %tobool61, label %if.then62, label %if.end64, !dbg !10094

if.then62:                                        ; preds = %if.end57
  %37 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !10095
  %call63 = call %union.tree_node* @tree_ssa_strip_useless_type_conversions(%union.tree_node* %37), !dbg !10095
  store %union.tree_node* %call63, %union.tree_node** %result, align 8, !dbg !10095
  br label %if.end64, !dbg !10095

if.end64:                                         ; preds = %if.then62, %if.end57
  %38 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !10096
  %tobool65 = icmp ne %union.tree_node* %38, null, !dbg !10096
  br i1 %tobool65, label %land.rhs, label %land.end, !dbg !10097

land.rhs:                                         ; preds = %if.end64
  %39 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !10098
  %call66 = call zeroext i8 @valid_gimple_rhs_p(%union.tree_node* %39), !dbg !10099
  %conv = zext i8 %call66 to i32, !dbg !10099
  %tobool67 = icmp ne i32 %conv, 0, !dbg !10097
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end64
  %40 = phi i1 [ false, %if.end64 ], [ %tobool67, %land.rhs ], !dbg !10100
  %land.ext = zext i1 %40 to i32, !dbg !10097
  %conv68 = trunc i32 %land.ext to i8, !dbg !10096
  %41 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !10101
  call void @fold_undefer_overflow_warnings(i8 zeroext %conv68, %union.gimple_statement_d* %41, i32 0), !dbg !10102
  %42 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !10103
  %tobool69 = icmp ne %union.tree_node* %42, null, !dbg !10103
  br i1 %tobool69, label %land.lhs.true70, label %if.end75, !dbg !10105

land.lhs.true70:                                  ; preds = %land.end
  %43 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !10106
  %call71 = call zeroext i8 @valid_gimple_rhs_p(%union.tree_node* %43), !dbg !10107
  %conv72 = zext i8 %call71 to i32, !dbg !10107
  %tobool73 = icmp ne i32 %conv72, 0, !dbg !10107
  br i1 %tobool73, label %if.then74, label %if.end75, !dbg !10108

if.then74:                                        ; preds = %land.lhs.true70
  %44 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !10109
  store %union.tree_node* %44, %union.tree_node** %retval, align 8, !dbg !10110
  br label %return, !dbg !10110

if.end75:                                         ; preds = %land.lhs.true70, %land.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !10111
  br label %return, !dbg !10111

return:                                           ; preds = %if.end75, %if.then74, %if.then56
  %45 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !10112
  ret %union.tree_node* %45, !dbg !10112
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @valueize_expr(%union.tree_node* %expr) #0 !dbg !10113 {
entry:
  %expr.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !10114, metadata !DIExpression()), !dbg !10115
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !10116
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !10116
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !10116
  %bf.load = load i64, i64* %1, align 8, !dbg !10116
  %bf.clear = and i64 %bf.load, 65535, !dbg !10116
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10116
  %idxprom = sext i32 %bf.cast to i64, !dbg !10116
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !10116
  %2 = load i32, i32* %arrayidx, align 4, !dbg !10116
  switch i32 %2, label %sw.default [
    i32 6, label %sw.bb
    i32 7, label %sw.bb18
  ], !dbg !10117

sw.bb:                                            ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !10118
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !10118
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !10118
  %arrayidx1 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !10118
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx1, align 8, !dbg !10118
  %base2 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !10118
  %5 = bitcast %struct.tree_base* %base2 to i64*, !dbg !10118
  %bf.load3 = load i64, i64* %5, align 8, !dbg !10118
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !10118
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !10118
  %cmp = icmp eq i32 %bf.cast5, 141, !dbg !10121
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !10122

land.lhs.true:                                    ; preds = %sw.bb
  %6 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !10123
  %exp6 = bitcast %union.tree_node* %6 to %struct.tree_exp*, !dbg !10123
  %operands7 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp6, i32 0, i32 3, !dbg !10123
  %arrayidx8 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands7, i64 0, i64 0, !dbg !10123
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx8, align 8, !dbg !10123
  %call = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %7), !dbg !10123
  %valnum = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call, i32 0, i32 0, !dbg !10123
  %8 = load %union.tree_node*, %union.tree_node** %valnum, align 8, !dbg !10123
  %9 = load %union.tree_node*, %union.tree_node** @VN_TOP, align 8, !dbg !10124
  %cmp9 = icmp ne %union.tree_node* %8, %9, !dbg !10125
  br i1 %cmp9, label %if.then, label %if.end, !dbg !10126

if.then:                                          ; preds = %land.lhs.true
  %10 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !10127
  %exp10 = bitcast %union.tree_node* %10 to %struct.tree_exp*, !dbg !10127
  %operands11 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp10, i32 0, i32 3, !dbg !10127
  %arrayidx12 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands11, i64 0, i64 0, !dbg !10127
  %11 = load %union.tree_node*, %union.tree_node** %arrayidx12, align 8, !dbg !10127
  %call13 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %11), !dbg !10127
  %valnum14 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call13, i32 0, i32 0, !dbg !10127
  %12 = load %union.tree_node*, %union.tree_node** %valnum14, align 8, !dbg !10127
  %13 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !10128
  %exp15 = bitcast %union.tree_node* %13 to %struct.tree_exp*, !dbg !10128
  %operands16 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp15, i32 0, i32 3, !dbg !10128
  %arrayidx17 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands16, i64 0, i64 0, !dbg !10128
  store %union.tree_node* %12, %union.tree_node** %arrayidx17, align 8, !dbg !10129
  br label %if.end, !dbg !10128

if.end:                                           ; preds = %if.then, %land.lhs.true, %sw.bb
  br label %sw.epilog, !dbg !10130

sw.bb18:                                          ; preds = %entry
  %14 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !10131
  %exp19 = bitcast %union.tree_node* %14 to %struct.tree_exp*, !dbg !10131
  %operands20 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp19, i32 0, i32 3, !dbg !10131
  %arrayidx21 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands20, i64 0, i64 0, !dbg !10131
  %15 = load %union.tree_node*, %union.tree_node** %arrayidx21, align 8, !dbg !10131
  %base22 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !10131
  %16 = bitcast %struct.tree_base* %base22 to i64*, !dbg !10131
  %bf.load23 = load i64, i64* %16, align 8, !dbg !10131
  %bf.clear24 = and i64 %bf.load23, 65535, !dbg !10131
  %bf.cast25 = trunc i64 %bf.clear24 to i32, !dbg !10131
  %cmp26 = icmp eq i32 %bf.cast25, 141, !dbg !10133
  br i1 %cmp26, label %land.lhs.true27, label %if.end43, !dbg !10134

land.lhs.true27:                                  ; preds = %sw.bb18
  %17 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !10135
  %exp28 = bitcast %union.tree_node* %17 to %struct.tree_exp*, !dbg !10135
  %operands29 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp28, i32 0, i32 3, !dbg !10135
  %arrayidx30 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands29, i64 0, i64 0, !dbg !10135
  %18 = load %union.tree_node*, %union.tree_node** %arrayidx30, align 8, !dbg !10135
  %call31 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %18), !dbg !10135
  %valnum32 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call31, i32 0, i32 0, !dbg !10135
  %19 = load %union.tree_node*, %union.tree_node** %valnum32, align 8, !dbg !10135
  %20 = load %union.tree_node*, %union.tree_node** @VN_TOP, align 8, !dbg !10136
  %cmp33 = icmp ne %union.tree_node* %19, %20, !dbg !10137
  br i1 %cmp33, label %if.then34, label %if.end43, !dbg !10138

if.then34:                                        ; preds = %land.lhs.true27
  %21 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !10139
  %exp35 = bitcast %union.tree_node* %21 to %struct.tree_exp*, !dbg !10139
  %operands36 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp35, i32 0, i32 3, !dbg !10139
  %arrayidx37 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands36, i64 0, i64 0, !dbg !10139
  %22 = load %union.tree_node*, %union.tree_node** %arrayidx37, align 8, !dbg !10139
  %call38 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %22), !dbg !10139
  %valnum39 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call38, i32 0, i32 0, !dbg !10139
  %23 = load %union.tree_node*, %union.tree_node** %valnum39, align 8, !dbg !10139
  %24 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !10140
  %exp40 = bitcast %union.tree_node* %24 to %struct.tree_exp*, !dbg !10140
  %operands41 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp40, i32 0, i32 3, !dbg !10140
  %arrayidx42 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands41, i64 0, i64 0, !dbg !10140
  store %union.tree_node* %23, %union.tree_node** %arrayidx42, align 8, !dbg !10141
  br label %if.end43, !dbg !10140

if.end43:                                         ; preds = %if.then34, %land.lhs.true27, %sw.bb18
  %25 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !10142
  %exp44 = bitcast %union.tree_node* %25 to %struct.tree_exp*, !dbg !10142
  %operands45 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp44, i32 0, i32 3, !dbg !10142
  %arrayidx46 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands45, i64 0, i64 1, !dbg !10142
  %26 = load %union.tree_node*, %union.tree_node** %arrayidx46, align 8, !dbg !10142
  %base47 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !10142
  %27 = bitcast %struct.tree_base* %base47 to i64*, !dbg !10142
  %bf.load48 = load i64, i64* %27, align 8, !dbg !10142
  %bf.clear49 = and i64 %bf.load48, 65535, !dbg !10142
  %bf.cast50 = trunc i64 %bf.clear49 to i32, !dbg !10142
  %cmp51 = icmp eq i32 %bf.cast50, 141, !dbg !10144
  br i1 %cmp51, label %land.lhs.true52, label %if.end68, !dbg !10145

land.lhs.true52:                                  ; preds = %if.end43
  %28 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !10146
  %exp53 = bitcast %union.tree_node* %28 to %struct.tree_exp*, !dbg !10146
  %operands54 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp53, i32 0, i32 3, !dbg !10146
  %arrayidx55 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands54, i64 0, i64 1, !dbg !10146
  %29 = load %union.tree_node*, %union.tree_node** %arrayidx55, align 8, !dbg !10146
  %call56 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %29), !dbg !10146
  %valnum57 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call56, i32 0, i32 0, !dbg !10146
  %30 = load %union.tree_node*, %union.tree_node** %valnum57, align 8, !dbg !10146
  %31 = load %union.tree_node*, %union.tree_node** @VN_TOP, align 8, !dbg !10147
  %cmp58 = icmp ne %union.tree_node* %30, %31, !dbg !10148
  br i1 %cmp58, label %if.then59, label %if.end68, !dbg !10149

if.then59:                                        ; preds = %land.lhs.true52
  %32 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !10150
  %exp60 = bitcast %union.tree_node* %32 to %struct.tree_exp*, !dbg !10150
  %operands61 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp60, i32 0, i32 3, !dbg !10150
  %arrayidx62 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands61, i64 0, i64 1, !dbg !10150
  %33 = load %union.tree_node*, %union.tree_node** %arrayidx62, align 8, !dbg !10150
  %call63 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %33), !dbg !10150
  %valnum64 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call63, i32 0, i32 0, !dbg !10150
  %34 = load %union.tree_node*, %union.tree_node** %valnum64, align 8, !dbg !10150
  %35 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !10151
  %exp65 = bitcast %union.tree_node* %35 to %struct.tree_exp*, !dbg !10151
  %operands66 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp65, i32 0, i32 3, !dbg !10151
  %arrayidx67 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands66, i64 0, i64 1, !dbg !10151
  store %union.tree_node* %34, %union.tree_node** %arrayidx67, align 8, !dbg !10152
  br label %if.end68, !dbg !10151

if.end68:                                         ; preds = %if.then59, %land.lhs.true52, %if.end43
  br label %sw.epilog, !dbg !10153

sw.default:                                       ; preds = %entry
  br label %sw.epilog, !dbg !10154

sw.epilog:                                        ; preds = %sw.default, %if.end68, %if.end
  %36 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !10155
  ret %union.tree_node* %36, !dbg !10156
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_assign_cast_p(%union.gimple_statement_d* %s) #0 !dbg !10157 {
entry:
  %retval = alloca i8, align 1
  %s.addr = alloca %union.gimple_statement_d*, align 8
  %sc = alloca i32, align 4
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !10158, metadata !DIExpression()), !dbg !10159
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !10160
  %call = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %0), !dbg !10162
  %tobool = icmp ne i8 %call, 0, !dbg !10162
  br i1 %tobool, label %if.then, label %if.end, !dbg !10163

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %sc, metadata !10164, metadata !DIExpression()), !dbg !10166
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !10167
  %call1 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %1), !dbg !10168
  store i32 %call1, i32* %sc, align 4, !dbg !10166
  %2 = load i32, i32* %sc, align 4, !dbg !10169
  %cmp = icmp eq i32 %2, 116, !dbg !10169
  br i1 %cmp, label %lor.end, label %lor.lhs.false, !dbg !10169

lor.lhs.false:                                    ; preds = %if.then
  %3 = load i32, i32* %sc, align 4, !dbg !10169
  %cmp2 = icmp eq i32 %3, 113, !dbg !10169
  br i1 %cmp2, label %lor.end, label %lor.lhs.false3, !dbg !10170

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %4 = load i32, i32* %sc, align 4, !dbg !10171
  %cmp4 = icmp eq i32 %4, 118, !dbg !10172
  br i1 %cmp4, label %lor.end, label %lor.rhs, !dbg !10173

lor.rhs:                                          ; preds = %lor.lhs.false3
  %5 = load i32, i32* %sc, align 4, !dbg !10174
  %cmp5 = icmp eq i32 %5, 77, !dbg !10175
  br label %lor.end, !dbg !10173

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false3, %lor.lhs.false, %if.then
  %6 = phi i1 [ true, %lor.lhs.false3 ], [ true, %lor.lhs.false ], [ true, %if.then ], [ %cmp5, %lor.rhs ]
  %lor.ext = zext i1 %6 to i32, !dbg !10173
  %conv = trunc i32 %lor.ext to i8, !dbg !10169
  store i8 %conv, i8* %retval, align 1, !dbg !10176
  br label %return, !dbg !10176

if.end:                                           ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !10177
  br label %return, !dbg !10177

return:                                           ; preds = %if.end, %lor.end
  %7 = load i8, i8* %retval, align 1, !dbg !10178
  ret i8 %7, !dbg !10178
}

declare dso_local %union.tree_node* @fold_unary_ignore_overflow_loc(i32, i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @tree_ssa_strip_useless_type_conversions(%union.tree_node*) #2

declare dso_local zeroext i8 @valid_gimple_rhs_p(%union.tree_node*) #2

declare dso_local void @fold_defer_overflow_warnings() #2

declare dso_local %union.tree_node* @fold_binary_loc(i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local void @fold_undefer_overflow_warnings(i8 zeroext, %union.gimple_statement_d*, i32) #2

declare dso_local zeroext i8 @useless_type_conversion_p(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @make_ssa_name(%union.tree_node* %var, %union.gimple_statement_d* %stmt) #0 !dbg !10179 {
entry:
  %var.addr = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !10182, metadata !DIExpression()), !dbg !10183
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !10184, metadata !DIExpression()), !dbg !10185
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10186
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !10186
  %1 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !10187
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !10188
  %call = call %union.tree_node* @make_ssa_name_fn(%struct.function* %add.ptr, %union.tree_node* %1, %union.gimple_statement_d* %2), !dbg !10189
  ret %union.tree_node* %call, !dbg !10190
}

declare dso_local %union.tree_node* @make_ssa_name_fn(%struct.function*, %union.tree_node*, %union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_vn_reference_op_s_heap* @valueize_shared_reference_ops_from_call(%union.gimple_statement_d* %call) #0 !dbg !10191 {
entry:
  %retval = alloca %struct.VEC_vn_reference_op_s_heap*, align 8
  %call.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %call.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %call.addr, metadata !10194, metadata !DIExpression()), !dbg !10195
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call.addr, align 8, !dbg !10196
  %tobool = icmp ne %union.gimple_statement_d* %0, null, !dbg !10196
  br i1 %tobool, label %if.end, label %if.then, !dbg !10198

if.then:                                          ; preds = %entry
  store %struct.VEC_vn_reference_op_s_heap* null, %struct.VEC_vn_reference_op_s_heap** %retval, align 8, !dbg !10199
  br label %return, !dbg !10199

if.end:                                           ; preds = %entry
  %1 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** @shared_lookup_references, align 8, !dbg !10200
  %tobool1 = icmp ne %struct.VEC_vn_reference_op_s_heap* %1, null, !dbg !10200
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !10200

cond.true:                                        ; preds = %if.end
  %2 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** @shared_lookup_references, align 8, !dbg !10200
  %base = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %2, i32 0, i32 0, !dbg !10200
  br label %cond.end, !dbg !10200

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !10200

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_vn_reference_op_s_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !10200
  call void @VEC_vn_reference_op_s_base_truncate(%struct.VEC_vn_reference_op_s_base* %cond, i32 0), !dbg !10200
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call.addr, align 8, !dbg !10201
  call void @copy_reference_ops_from_call(%union.gimple_statement_d* %3, %struct.VEC_vn_reference_op_s_heap** @shared_lookup_references), !dbg !10202
  %4 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** @shared_lookup_references, align 8, !dbg !10203
  %call2 = call %struct.VEC_vn_reference_op_s_heap* @valueize_refs(%struct.VEC_vn_reference_op_s_heap* %4), !dbg !10204
  store %struct.VEC_vn_reference_op_s_heap* %call2, %struct.VEC_vn_reference_op_s_heap** @shared_lookup_references, align 8, !dbg !10205
  %5 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** @shared_lookup_references, align 8, !dbg !10206
  store %struct.VEC_vn_reference_op_s_heap* %5, %struct.VEC_vn_reference_op_s_heap** %retval, align 8, !dbg !10207
  br label %return, !dbg !10207

return:                                           ; preds = %cond.end, %if.then
  %6 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %retval, align 8, !dbg !10208
  ret %struct.VEC_vn_reference_op_s_heap* %6, !dbg !10208
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_vn_reference_op_s_heap* @create_reference_ops_from_call(%union.gimple_statement_d* %call) #0 !dbg !10209 {
entry:
  %call.addr = alloca %union.gimple_statement_d*, align 8
  %result = alloca %struct.VEC_vn_reference_op_s_heap*, align 8
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %call.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %call.addr, metadata !10210, metadata !DIExpression()), !dbg !10211
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_reference_op_s_heap** %result, metadata !10212, metadata !DIExpression()), !dbg !10213
  store %struct.VEC_vn_reference_op_s_heap* null, %struct.VEC_vn_reference_op_s_heap** %result, align 8, !dbg !10213
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call.addr, align 8, !dbg !10214
  call void @copy_reference_ops_from_call(%union.gimple_statement_d* %0, %struct.VEC_vn_reference_op_s_heap** %result), !dbg !10215
  %1 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %result, align 8, !dbg !10216
  ret %struct.VEC_vn_reference_op_s_heap* %1, !dbg !10217
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ssa_op_iter_heap_reserve(%struct.VEC_ssa_op_iter_heap** %vec_, i32 %alloc_) #0 !dbg !10218 {
entry:
  %vec_.addr = alloca %struct.VEC_ssa_op_iter_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_ssa_op_iter_heap** %vec_, %struct.VEC_ssa_op_iter_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ssa_op_iter_heap*** %vec_.addr, metadata !10221, metadata !DIExpression()), !dbg !10222
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !10223, metadata !DIExpression()), !dbg !10222
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !10224, metadata !DIExpression()), !dbg !10222
  %0 = load %struct.VEC_ssa_op_iter_heap**, %struct.VEC_ssa_op_iter_heap*** %vec_.addr, align 8, !dbg !10222
  %1 = load %struct.VEC_ssa_op_iter_heap*, %struct.VEC_ssa_op_iter_heap** %0, align 8, !dbg !10222
  %tobool = icmp ne %struct.VEC_ssa_op_iter_heap* %1, null, !dbg !10222
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10222

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_ssa_op_iter_heap**, %struct.VEC_ssa_op_iter_heap*** %vec_.addr, align 8, !dbg !10222
  %3 = load %struct.VEC_ssa_op_iter_heap*, %struct.VEC_ssa_op_iter_heap** %2, align 8, !dbg !10222
  %base = getelementptr inbounds %struct.VEC_ssa_op_iter_heap, %struct.VEC_ssa_op_iter_heap* %3, i32 0, i32 0, !dbg !10222
  br label %cond.end, !dbg !10222

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10222

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ssa_op_iter_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !10222
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !10222
  %call = call i32 @VEC_ssa_op_iter_base_space(%struct.VEC_ssa_op_iter_base* %cond, i32 %4), !dbg !10222
  %tobool1 = icmp ne i32 %call, 0, !dbg !10222
  %lnot = xor i1 %tobool1, true, !dbg !10222
  %lnot.ext = zext i1 %lnot to i32, !dbg !10222
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !10222
  %5 = load i32, i32* %extend, align 4, !dbg !10225
  %tobool2 = icmp ne i32 %5, 0, !dbg !10225
  br i1 %tobool2, label %if.then, label %if.end, !dbg !10222

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_ssa_op_iter_heap**, %struct.VEC_ssa_op_iter_heap*** %vec_.addr, align 8, !dbg !10225
  %7 = load %struct.VEC_ssa_op_iter_heap*, %struct.VEC_ssa_op_iter_heap** %6, align 8, !dbg !10225
  %8 = bitcast %struct.VEC_ssa_op_iter_heap* %7 to i8*, !dbg !10225
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !10225
  %call3 = call i8* @vec_heap_o_reserve(i8* %8, i32 %9, i64 8, i64 40), !dbg !10225
  %10 = bitcast i8* %call3 to %struct.VEC_ssa_op_iter_heap*, !dbg !10225
  %11 = load %struct.VEC_ssa_op_iter_heap**, %struct.VEC_ssa_op_iter_heap*** %vec_.addr, align 8, !dbg !10225
  store %struct.VEC_ssa_op_iter_heap* %10, %struct.VEC_ssa_op_iter_heap** %11, align 8, !dbg !10225
  br label %if.end, !dbg !10225

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !10222
  ret i32 %12, !dbg !10222
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_operand_iterator_d* @VEC_ssa_op_iter_base_quick_push(%struct.VEC_ssa_op_iter_base* %vec_, %struct.ssa_operand_iterator_d* %obj_) #0 !dbg !10227 {
entry:
  %vec_.addr = alloca %struct.VEC_ssa_op_iter_base*, align 8
  %obj_.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %slot_ = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.VEC_ssa_op_iter_base* %vec_, %struct.VEC_ssa_op_iter_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ssa_op_iter_base** %vec_.addr, metadata !10230, metadata !DIExpression()), !dbg !10231
  store %struct.ssa_operand_iterator_d* %obj_, %struct.ssa_operand_iterator_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %obj_.addr, metadata !10232, metadata !DIExpression()), !dbg !10231
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %slot_, metadata !10233, metadata !DIExpression()), !dbg !10231
  %0 = load %struct.VEC_ssa_op_iter_base*, %struct.VEC_ssa_op_iter_base** %vec_.addr, align 8, !dbg !10231
  %num = getelementptr inbounds %struct.VEC_ssa_op_iter_base, %struct.VEC_ssa_op_iter_base* %0, i32 0, i32 0, !dbg !10231
  %1 = load i32, i32* %num, align 8, !dbg !10231
  %2 = load %struct.VEC_ssa_op_iter_base*, %struct.VEC_ssa_op_iter_base** %vec_.addr, align 8, !dbg !10231
  %alloc = getelementptr inbounds %struct.VEC_ssa_op_iter_base, %struct.VEC_ssa_op_iter_base* %2, i32 0, i32 1, !dbg !10231
  %3 = load i32, i32* %alloc, align 4, !dbg !10231
  %cmp = icmp ult i32 %1, %3, !dbg !10231
  %conv = zext i1 %cmp to i32, !dbg !10231
  %4 = load %struct.VEC_ssa_op_iter_base*, %struct.VEC_ssa_op_iter_base** %vec_.addr, align 8, !dbg !10231
  %vec = getelementptr inbounds %struct.VEC_ssa_op_iter_base, %struct.VEC_ssa_op_iter_base* %4, i32 0, i32 2, !dbg !10231
  %5 = load %struct.VEC_ssa_op_iter_base*, %struct.VEC_ssa_op_iter_base** %vec_.addr, align 8, !dbg !10231
  %num1 = getelementptr inbounds %struct.VEC_ssa_op_iter_base, %struct.VEC_ssa_op_iter_base* %5, i32 0, i32 0, !dbg !10231
  %6 = load i32, i32* %num1, align 8, !dbg !10231
  %inc = add i32 %6, 1, !dbg !10231
  store i32 %inc, i32* %num1, align 8, !dbg !10231
  %idxprom = zext i32 %6 to i64, !dbg !10231
  %arrayidx = getelementptr inbounds [1 x %struct.ssa_operand_iterator_d], [1 x %struct.ssa_operand_iterator_d]* %vec, i64 0, i64 %idxprom, !dbg !10231
  store %struct.ssa_operand_iterator_d* %arrayidx, %struct.ssa_operand_iterator_d** %slot_, align 8, !dbg !10231
  %7 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %obj_.addr, align 8, !dbg !10234
  %tobool = icmp ne %struct.ssa_operand_iterator_d* %7, null, !dbg !10234
  br i1 %tobool, label %if.then, label %if.end, !dbg !10231

if.then:                                          ; preds = %entry
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %slot_, align 8, !dbg !10234
  %9 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %obj_.addr, align 8, !dbg !10234
  %10 = bitcast %struct.ssa_operand_iterator_d* %8 to i8*, !dbg !10234
  %11 = bitcast %struct.ssa_operand_iterator_d* %9 to i8*, !dbg !10234
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 40, i1 false), !dbg !10234
  br label %if.end, !dbg !10234

if.end:                                           ; preds = %if.then, %entry
  %12 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %slot_, align 8, !dbg !10231
  ret %struct.ssa_operand_iterator_d* %12, !dbg !10231
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ssa_op_iter_base_space(%struct.VEC_ssa_op_iter_base* %vec_, i32 %alloc_) #0 !dbg !10236 {
entry:
  %vec_.addr = alloca %struct.VEC_ssa_op_iter_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_ssa_op_iter_base* %vec_, %struct.VEC_ssa_op_iter_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ssa_op_iter_base** %vec_.addr, metadata !10239, metadata !DIExpression()), !dbg !10240
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !10241, metadata !DIExpression()), !dbg !10240
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !10240
  %cmp = icmp sge i32 %0, 0, !dbg !10240
  %conv = zext i1 %cmp to i32, !dbg !10240
  %1 = load %struct.VEC_ssa_op_iter_base*, %struct.VEC_ssa_op_iter_base** %vec_.addr, align 8, !dbg !10240
  %tobool = icmp ne %struct.VEC_ssa_op_iter_base* %1, null, !dbg !10240
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10240

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_ssa_op_iter_base*, %struct.VEC_ssa_op_iter_base** %vec_.addr, align 8, !dbg !10240
  %alloc = getelementptr inbounds %struct.VEC_ssa_op_iter_base, %struct.VEC_ssa_op_iter_base* %2, i32 0, i32 1, !dbg !10240
  %3 = load i32, i32* %alloc, align 4, !dbg !10240
  %4 = load %struct.VEC_ssa_op_iter_base*, %struct.VEC_ssa_op_iter_base** %vec_.addr, align 8, !dbg !10240
  %num = getelementptr inbounds %struct.VEC_ssa_op_iter_base, %struct.VEC_ssa_op_iter_base* %4, i32 0, i32 0, !dbg !10240
  %5 = load i32, i32* %num, align 8, !dbg !10240
  %sub = sub i32 %3, %5, !dbg !10240
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !10240
  %cmp1 = icmp uge i32 %sub, %6, !dbg !10240
  %conv2 = zext i1 %cmp1 to i32, !dbg !10240
  br label %cond.end, !dbg !10240

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !10240
  %tobool3 = icmp ne i32 %7, 0, !dbg !10240
  %lnot = xor i1 %tobool3, true, !dbg !10240
  %lnot.ext = zext i1 %lnot to i32, !dbg !10240
  br label %cond.end, !dbg !10240

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !10240
  ret i32 %cond, !dbg !10240
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @first_htab_element(%struct.htab_iterator* %hti, %struct.htab* %table) #0 !dbg !10242 {
entry:
  %retval = alloca i8*, align 8
  %hti.addr = alloca %struct.htab_iterator*, align 8
  %table.addr = alloca %struct.htab*, align 8
  %x = alloca i8*, align 8
  store %struct.htab_iterator* %hti, %struct.htab_iterator** %hti.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab_iterator** %hti.addr, metadata !10246, metadata !DIExpression()), !dbg !10247
  store %struct.htab* %table, %struct.htab** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %table.addr, metadata !10248, metadata !DIExpression()), !dbg !10249
  %0 = load %struct.htab*, %struct.htab** %table.addr, align 8, !dbg !10250
  %1 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !10251
  %htab = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %1, i32 0, i32 0, !dbg !10252
  store %struct.htab* %0, %struct.htab** %htab, align 8, !dbg !10253
  %2 = load %struct.htab*, %struct.htab** %table.addr, align 8, !dbg !10254
  %entries = getelementptr inbounds %struct.htab, %struct.htab* %2, i32 0, i32 3, !dbg !10255
  %3 = load i8**, i8*** %entries, align 8, !dbg !10255
  %4 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !10256
  %slot = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %4, i32 0, i32 1, !dbg !10257
  store i8** %3, i8*** %slot, align 8, !dbg !10258
  %5 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !10259
  %slot1 = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %5, i32 0, i32 1, !dbg !10260
  %6 = load i8**, i8*** %slot1, align 8, !dbg !10260
  %7 = load %struct.htab*, %struct.htab** %table.addr, align 8, !dbg !10261
  %call = call i64 @htab_size(%struct.htab* %7), !dbg !10262
  %add.ptr = getelementptr inbounds i8*, i8** %6, i64 %call, !dbg !10263
  %8 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !10264
  %limit = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %8, i32 0, i32 2, !dbg !10265
  store i8** %add.ptr, i8*** %limit, align 8, !dbg !10266
  br label %do.body, !dbg !10267

do.body:                                          ; preds = %do.cond, %entry
  call void @llvm.dbg.declare(metadata i8** %x, metadata !10268, metadata !DIExpression()), !dbg !10270
  %9 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !10271
  %slot2 = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %9, i32 0, i32 1, !dbg !10272
  %10 = load i8**, i8*** %slot2, align 8, !dbg !10272
  %11 = load i8*, i8** %10, align 8, !dbg !10273
  store i8* %11, i8** %x, align 8, !dbg !10270
  %12 = load i8*, i8** %x, align 8, !dbg !10274
  %cmp = icmp ne i8* %12, null, !dbg !10276
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !10277

land.lhs.true:                                    ; preds = %do.body
  %13 = load i8*, i8** %x, align 8, !dbg !10278
  %cmp3 = icmp ne i8* %13, inttoptr (i64 1 to i8*), !dbg !10279
  br i1 %cmp3, label %if.then, label %if.end, !dbg !10280

if.then:                                          ; preds = %land.lhs.true
  br label %do.end, !dbg !10281

if.end:                                           ; preds = %land.lhs.true, %do.body
  br label %do.cond, !dbg !10282

do.cond:                                          ; preds = %if.end
  %14 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !10283
  %slot4 = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %14, i32 0, i32 1, !dbg !10284
  %15 = load i8**, i8*** %slot4, align 8, !dbg !10285
  %incdec.ptr = getelementptr inbounds i8*, i8** %15, i32 1, !dbg !10285
  store i8** %incdec.ptr, i8*** %slot4, align 8, !dbg !10285
  %16 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !10286
  %limit5 = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %16, i32 0, i32 2, !dbg !10287
  %17 = load i8**, i8*** %limit5, align 8, !dbg !10287
  %cmp6 = icmp ult i8** %incdec.ptr, %17, !dbg !10288
  br i1 %cmp6, label %do.body, label %do.end, !dbg !10282, !llvm.loop !10289

do.end:                                           ; preds = %do.cond, %if.then
  %18 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !10291
  %slot7 = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %18, i32 0, i32 1, !dbg !10293
  %19 = load i8**, i8*** %slot7, align 8, !dbg !10293
  %20 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !10294
  %limit8 = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %20, i32 0, i32 2, !dbg !10295
  %21 = load i8**, i8*** %limit8, align 8, !dbg !10295
  %cmp9 = icmp ult i8** %19, %21, !dbg !10296
  br i1 %cmp9, label %if.then10, label %if.end12, !dbg !10297

if.then10:                                        ; preds = %do.end
  %22 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !10298
  %slot11 = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %22, i32 0, i32 1, !dbg !10299
  %23 = load i8**, i8*** %slot11, align 8, !dbg !10299
  %24 = load i8*, i8** %23, align 8, !dbg !10300
  store i8* %24, i8** %retval, align 8, !dbg !10301
  br label %return, !dbg !10301

if.end12:                                         ; preds = %do.end
  store i8* null, i8** %retval, align 8, !dbg !10302
  br label %return, !dbg !10302

return:                                           ; preds = %if.end12, %if.then10
  %25 = load i8*, i8** %retval, align 8, !dbg !10303
  ret i8* %25, !dbg !10303
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @end_htab_p(%struct.htab_iterator* %hti) #0 !dbg !10304 {
entry:
  %retval = alloca i8, align 1
  %hti.addr = alloca %struct.htab_iterator*, align 8
  store %struct.htab_iterator* %hti, %struct.htab_iterator** %hti.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab_iterator** %hti.addr, metadata !10309, metadata !DIExpression()), !dbg !10310
  %0 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !10311
  %slot = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %0, i32 0, i32 1, !dbg !10313
  %1 = load i8**, i8*** %slot, align 8, !dbg !10313
  %2 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !10314
  %limit = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %2, i32 0, i32 2, !dbg !10315
  %3 = load i8**, i8*** %limit, align 8, !dbg !10315
  %cmp = icmp uge i8** %1, %3, !dbg !10316
  br i1 %cmp, label %if.then, label %if.end, !dbg !10317

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !10318
  br label %return, !dbg !10318

if.end:                                           ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !10319
  br label %return, !dbg !10319

return:                                           ; preds = %if.end, %if.then
  %4 = load i8, i8* %retval, align 1, !dbg !10320
  ret i8 %4, !dbg !10320
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @next_htab_element(%struct.htab_iterator* %hti) #0 !dbg !10321 {
entry:
  %retval = alloca i8*, align 8
  %hti.addr = alloca %struct.htab_iterator*, align 8
  %x = alloca i8*, align 8
  store %struct.htab_iterator* %hti, %struct.htab_iterator** %hti.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab_iterator** %hti.addr, metadata !10324, metadata !DIExpression()), !dbg !10325
  br label %while.cond, !dbg !10326

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !10327
  %slot = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %0, i32 0, i32 1, !dbg !10328
  %1 = load i8**, i8*** %slot, align 8, !dbg !10329
  %incdec.ptr = getelementptr inbounds i8*, i8** %1, i32 1, !dbg !10329
  store i8** %incdec.ptr, i8*** %slot, align 8, !dbg !10329
  %2 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !10330
  %limit = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %2, i32 0, i32 2, !dbg !10331
  %3 = load i8**, i8*** %limit, align 8, !dbg !10331
  %cmp = icmp ult i8** %incdec.ptr, %3, !dbg !10332
  br i1 %cmp, label %while.body, label %while.end, !dbg !10326

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i8** %x, metadata !10333, metadata !DIExpression()), !dbg !10335
  %4 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !10336
  %slot1 = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %4, i32 0, i32 1, !dbg !10337
  %5 = load i8**, i8*** %slot1, align 8, !dbg !10337
  %6 = load i8*, i8** %5, align 8, !dbg !10338
  store i8* %6, i8** %x, align 8, !dbg !10335
  %7 = load i8*, i8** %x, align 8, !dbg !10339
  %cmp2 = icmp ne i8* %7, null, !dbg !10341
  br i1 %cmp2, label %land.lhs.true, label %if.end, !dbg !10342

land.lhs.true:                                    ; preds = %while.body
  %8 = load i8*, i8** %x, align 8, !dbg !10343
  %cmp3 = icmp ne i8* %8, inttoptr (i64 1 to i8*), !dbg !10344
  br i1 %cmp3, label %if.then, label %if.end, !dbg !10345

if.then:                                          ; preds = %land.lhs.true
  %9 = load i8*, i8** %x, align 8, !dbg !10346
  store i8* %9, i8** %retval, align 8, !dbg !10347
  br label %return, !dbg !10347

if.end:                                           ; preds = %land.lhs.true, %while.body
  br label %while.cond, !dbg !10326, !llvm.loop !10348

while.end:                                        ; preds = %while.cond
  store i8* null, i8** %retval, align 8, !dbg !10350
  br label %return, !dbg !10350

return:                                           ; preds = %while.end, %if.then
  %10 = load i8*, i8** %retval, align 8, !dbg !10351
  ret i8* %10, !dbg !10351
}

declare dso_local i64 @htab_size(%struct.htab*) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!3041, !3042, !3043}
!llvm.ident = !{!3044}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "vn_ssa_aux_table", scope: !2, file: !3, line: 170, type: !2908, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !1477, globals: !3009, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "tree-ssa-sccvn.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !134, !329, !338, !342, !348, !353, !358, !376, !383, !390, !429, !434, !568, !581, !585, !591, !597, !1317, !1343, !1347, !1354}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !6, line: 7, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133}
!9 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!25 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!26 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!27 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!28 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!29 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!30 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!31 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!32 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!33 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!34 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!35 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!36 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!37 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!38 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!39 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!40 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!41 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!42 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!43 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!44 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!45 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!46 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!47 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!48 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!49 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!50 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!51 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!52 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!53 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!54 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!55 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!56 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!57 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!58 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!59 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!60 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!61 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!62 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!63 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!64 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!65 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!66 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!67 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!68 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!69 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!70 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!71 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!72 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!73 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!74 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!75 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!76 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!77 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!78 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!79 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!80 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!81 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!82 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!83 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!84 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!85 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!86 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!87 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!88 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!89 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!90 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!91 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!92 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!93 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!94 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!95 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!133 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!134 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !135, line: 39, baseType: !7, size: 32, elements: !136)
!135 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!136 = !{!137, !138, !139, !140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328}
!137 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!139 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!140 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!141 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!142 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!143 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!144 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!145 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!146 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!147 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!148 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!149 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!150 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!151 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!152 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!153 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!154 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!155 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!156 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!157 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!158 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!159 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!160 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!161 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!162 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!163 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!164 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!165 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!166 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!167 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!168 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!169 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!170 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!171 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!172 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!173 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!174 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!175 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!176 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!177 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!178 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!179 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!180 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!181 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!182 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!183 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!184 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!185 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!186 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!187 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!188 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!189 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!190 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!191 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!192 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!193 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!194 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!195 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!196 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!197 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!198 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!199 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!200 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!201 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!202 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!203 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!204 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!205 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!206 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!207 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!208 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!209 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!210 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!211 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!212 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!213 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!214 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!215 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!216 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!217 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!218 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!219 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!220 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!221 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!222 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!223 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!224 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!225 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!226 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!227 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!228 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!229 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!230 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!231 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!232 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!233 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!234 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!235 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!236 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!237 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!238 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!239 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!240 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!241 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!242 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!243 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!244 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!245 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!246 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!247 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!248 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!249 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!250 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!251 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!252 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!253 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!254 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!255 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!256 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!257 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!258 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!259 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!260 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!261 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!262 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!263 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!264 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!265 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!266 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!267 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!268 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!269 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!270 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!271 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!272 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!273 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!274 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!275 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!276 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!277 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!278 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!279 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!280 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!281 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!282 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!283 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!284 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!285 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!286 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!287 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!288 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!289 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!290 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!291 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!292 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!293 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!294 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!295 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!296 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!297 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!298 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!299 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!300 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!301 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!302 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!303 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!304 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!305 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!306 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!307 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!308 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!309 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!310 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!311 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!312 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!313 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!314 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!315 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!316 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!317 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!318 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!319 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!320 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!321 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!322 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!323 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!324 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!325 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!326 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!327 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!328 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!329 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "lpt_dec", file: !330, line: 31, baseType: !7, size: 32, elements: !331)
!330 = !DIFile(filename: "./cfgloop.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!331 = !{!332, !333, !334, !335, !336, !337}
!332 = !DIEnumerator(name: "LPT_NONE", value: 0, isUnsigned: true)
!333 = !DIEnumerator(name: "LPT_PEEL_COMPLETELY", value: 1, isUnsigned: true)
!334 = !DIEnumerator(name: "LPT_PEEL_SIMPLE", value: 2, isUnsigned: true)
!335 = !DIEnumerator(name: "LPT_UNROLL_CONSTANT", value: 3, isUnsigned: true)
!336 = !DIEnumerator(name: "LPT_UNROLL_RUNTIME", value: 4, isUnsigned: true)
!337 = !DIEnumerator(name: "LPT_UNROLL_STUPID", value: 5, isUnsigned: true)
!338 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "loop_estimation", file: !330, line: 91, baseType: !7, size: 32, elements: !339)
!339 = !{!340, !341}
!340 = !DIEnumerator(name: "EST_NOT_COMPUTED", value: 0, isUnsigned: true)
!341 = !DIEnumerator(name: "EST_AVAILABLE", value: 1, isUnsigned: true)
!342 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !343, line: 363, baseType: !7, size: 32, elements: !344)
!343 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!344 = !{!345, !346, !347}
!345 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!346 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!347 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!348 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !343, line: 355, baseType: !7, size: 32, elements: !349)
!349 = !{!350, !351, !352}
!350 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!351 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!352 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!353 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !354, line: 474, baseType: !7, size: 32, elements: !355)
!354 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!355 = !{!356, !357}
!356 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!357 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!358 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !135, line: 280, baseType: !7, size: 32, elements: !359)
!359 = !{!360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375}
!360 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!361 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!362 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!363 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!364 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!365 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!366 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!367 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!368 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!369 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!370 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!371 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!372 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!373 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!374 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!375 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!376 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !135, line: 1817, baseType: !7, size: 32, elements: !377)
!377 = !{!378, !379, !380, !381, !382}
!378 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!379 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!380 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!381 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!382 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!383 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !135, line: 1805, baseType: !7, size: 32, elements: !384)
!384 = !{!385, !386, !387, !388, !389}
!385 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!386 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!387 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!388 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!389 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!390 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !391, line: 51, baseType: !7, size: 32, elements: !392)
!391 = !DIFile(filename: "./gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!392 = !{!393, !394, !395, !396, !397, !398, !399, !400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428}
!393 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!394 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!395 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!396 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!397 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!398 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!399 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!400 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!401 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!402 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!403 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!404 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!405 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!406 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!407 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!408 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!409 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!410 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!411 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!412 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!413 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!414 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!415 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!416 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!417 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!418 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!419 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!420 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!421 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!422 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!423 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!424 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!425 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!426 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!427 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!428 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!429 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insert_option", file: !430, line: 147, baseType: !7, size: 32, elements: !431)
!430 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!431 = !{!432, !433}
!432 = !DIEnumerator(name: "NO_INSERT", value: 0, isUnsigned: true)
!433 = !DIEnumerator(name: "INSERT", value: 1, isUnsigned: true)
!434 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_index", file: !135, line: 3410, baseType: !7, size: 32, elements: !435)
!435 = !{!436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567}
!436 = !DIEnumerator(name: "TI_ERROR_MARK", value: 0, isUnsigned: true)
!437 = !DIEnumerator(name: "TI_INTQI_TYPE", value: 1, isUnsigned: true)
!438 = !DIEnumerator(name: "TI_INTHI_TYPE", value: 2, isUnsigned: true)
!439 = !DIEnumerator(name: "TI_INTSI_TYPE", value: 3, isUnsigned: true)
!440 = !DIEnumerator(name: "TI_INTDI_TYPE", value: 4, isUnsigned: true)
!441 = !DIEnumerator(name: "TI_INTTI_TYPE", value: 5, isUnsigned: true)
!442 = !DIEnumerator(name: "TI_UINTQI_TYPE", value: 6, isUnsigned: true)
!443 = !DIEnumerator(name: "TI_UINTHI_TYPE", value: 7, isUnsigned: true)
!444 = !DIEnumerator(name: "TI_UINTSI_TYPE", value: 8, isUnsigned: true)
!445 = !DIEnumerator(name: "TI_UINTDI_TYPE", value: 9, isUnsigned: true)
!446 = !DIEnumerator(name: "TI_UINTTI_TYPE", value: 10, isUnsigned: true)
!447 = !DIEnumerator(name: "TI_UINT32_TYPE", value: 11, isUnsigned: true)
!448 = !DIEnumerator(name: "TI_UINT64_TYPE", value: 12, isUnsigned: true)
!449 = !DIEnumerator(name: "TI_INTEGER_ZERO", value: 13, isUnsigned: true)
!450 = !DIEnumerator(name: "TI_INTEGER_ONE", value: 14, isUnsigned: true)
!451 = !DIEnumerator(name: "TI_INTEGER_MINUS_ONE", value: 15, isUnsigned: true)
!452 = !DIEnumerator(name: "TI_NULL_POINTER", value: 16, isUnsigned: true)
!453 = !DIEnumerator(name: "TI_SIZE_ZERO", value: 17, isUnsigned: true)
!454 = !DIEnumerator(name: "TI_SIZE_ONE", value: 18, isUnsigned: true)
!455 = !DIEnumerator(name: "TI_BITSIZE_ZERO", value: 19, isUnsigned: true)
!456 = !DIEnumerator(name: "TI_BITSIZE_ONE", value: 20, isUnsigned: true)
!457 = !DIEnumerator(name: "TI_BITSIZE_UNIT", value: 21, isUnsigned: true)
!458 = !DIEnumerator(name: "TI_PUBLIC", value: 22, isUnsigned: true)
!459 = !DIEnumerator(name: "TI_PROTECTED", value: 23, isUnsigned: true)
!460 = !DIEnumerator(name: "TI_PRIVATE", value: 24, isUnsigned: true)
!461 = !DIEnumerator(name: "TI_BOOLEAN_FALSE", value: 25, isUnsigned: true)
!462 = !DIEnumerator(name: "TI_BOOLEAN_TRUE", value: 26, isUnsigned: true)
!463 = !DIEnumerator(name: "TI_COMPLEX_INTEGER_TYPE", value: 27, isUnsigned: true)
!464 = !DIEnumerator(name: "TI_COMPLEX_FLOAT_TYPE", value: 28, isUnsigned: true)
!465 = !DIEnumerator(name: "TI_COMPLEX_DOUBLE_TYPE", value: 29, isUnsigned: true)
!466 = !DIEnumerator(name: "TI_COMPLEX_LONG_DOUBLE_TYPE", value: 30, isUnsigned: true)
!467 = !DIEnumerator(name: "TI_FLOAT_TYPE", value: 31, isUnsigned: true)
!468 = !DIEnumerator(name: "TI_DOUBLE_TYPE", value: 32, isUnsigned: true)
!469 = !DIEnumerator(name: "TI_LONG_DOUBLE_TYPE", value: 33, isUnsigned: true)
!470 = !DIEnumerator(name: "TI_FLOAT_PTR_TYPE", value: 34, isUnsigned: true)
!471 = !DIEnumerator(name: "TI_DOUBLE_PTR_TYPE", value: 35, isUnsigned: true)
!472 = !DIEnumerator(name: "TI_LONG_DOUBLE_PTR_TYPE", value: 36, isUnsigned: true)
!473 = !DIEnumerator(name: "TI_INTEGER_PTR_TYPE", value: 37, isUnsigned: true)
!474 = !DIEnumerator(name: "TI_VOID_TYPE", value: 38, isUnsigned: true)
!475 = !DIEnumerator(name: "TI_PTR_TYPE", value: 39, isUnsigned: true)
!476 = !DIEnumerator(name: "TI_CONST_PTR_TYPE", value: 40, isUnsigned: true)
!477 = !DIEnumerator(name: "TI_SIZE_TYPE", value: 41, isUnsigned: true)
!478 = !DIEnumerator(name: "TI_PID_TYPE", value: 42, isUnsigned: true)
!479 = !DIEnumerator(name: "TI_PTRDIFF_TYPE", value: 43, isUnsigned: true)
!480 = !DIEnumerator(name: "TI_VA_LIST_TYPE", value: 44, isUnsigned: true)
!481 = !DIEnumerator(name: "TI_VA_LIST_GPR_COUNTER_FIELD", value: 45, isUnsigned: true)
!482 = !DIEnumerator(name: "TI_VA_LIST_FPR_COUNTER_FIELD", value: 46, isUnsigned: true)
!483 = !DIEnumerator(name: "TI_BOOLEAN_TYPE", value: 47, isUnsigned: true)
!484 = !DIEnumerator(name: "TI_FILEPTR_TYPE", value: 48, isUnsigned: true)
!485 = !DIEnumerator(name: "TI_DFLOAT32_TYPE", value: 49, isUnsigned: true)
!486 = !DIEnumerator(name: "TI_DFLOAT64_TYPE", value: 50, isUnsigned: true)
!487 = !DIEnumerator(name: "TI_DFLOAT128_TYPE", value: 51, isUnsigned: true)
!488 = !DIEnumerator(name: "TI_DFLOAT32_PTR_TYPE", value: 52, isUnsigned: true)
!489 = !DIEnumerator(name: "TI_DFLOAT64_PTR_TYPE", value: 53, isUnsigned: true)
!490 = !DIEnumerator(name: "TI_DFLOAT128_PTR_TYPE", value: 54, isUnsigned: true)
!491 = !DIEnumerator(name: "TI_VOID_LIST_NODE", value: 55, isUnsigned: true)
!492 = !DIEnumerator(name: "TI_MAIN_IDENTIFIER", value: 56, isUnsigned: true)
!493 = !DIEnumerator(name: "TI_SAT_SFRACT_TYPE", value: 57, isUnsigned: true)
!494 = !DIEnumerator(name: "TI_SAT_FRACT_TYPE", value: 58, isUnsigned: true)
!495 = !DIEnumerator(name: "TI_SAT_LFRACT_TYPE", value: 59, isUnsigned: true)
!496 = !DIEnumerator(name: "TI_SAT_LLFRACT_TYPE", value: 60, isUnsigned: true)
!497 = !DIEnumerator(name: "TI_SAT_USFRACT_TYPE", value: 61, isUnsigned: true)
!498 = !DIEnumerator(name: "TI_SAT_UFRACT_TYPE", value: 62, isUnsigned: true)
!499 = !DIEnumerator(name: "TI_SAT_ULFRACT_TYPE", value: 63, isUnsigned: true)
!500 = !DIEnumerator(name: "TI_SAT_ULLFRACT_TYPE", value: 64, isUnsigned: true)
!501 = !DIEnumerator(name: "TI_SFRACT_TYPE", value: 65, isUnsigned: true)
!502 = !DIEnumerator(name: "TI_FRACT_TYPE", value: 66, isUnsigned: true)
!503 = !DIEnumerator(name: "TI_LFRACT_TYPE", value: 67, isUnsigned: true)
!504 = !DIEnumerator(name: "TI_LLFRACT_TYPE", value: 68, isUnsigned: true)
!505 = !DIEnumerator(name: "TI_USFRACT_TYPE", value: 69, isUnsigned: true)
!506 = !DIEnumerator(name: "TI_UFRACT_TYPE", value: 70, isUnsigned: true)
!507 = !DIEnumerator(name: "TI_ULFRACT_TYPE", value: 71, isUnsigned: true)
!508 = !DIEnumerator(name: "TI_ULLFRACT_TYPE", value: 72, isUnsigned: true)
!509 = !DIEnumerator(name: "TI_SAT_SACCUM_TYPE", value: 73, isUnsigned: true)
!510 = !DIEnumerator(name: "TI_SAT_ACCUM_TYPE", value: 74, isUnsigned: true)
!511 = !DIEnumerator(name: "TI_SAT_LACCUM_TYPE", value: 75, isUnsigned: true)
!512 = !DIEnumerator(name: "TI_SAT_LLACCUM_TYPE", value: 76, isUnsigned: true)
!513 = !DIEnumerator(name: "TI_SAT_USACCUM_TYPE", value: 77, isUnsigned: true)
!514 = !DIEnumerator(name: "TI_SAT_UACCUM_TYPE", value: 78, isUnsigned: true)
!515 = !DIEnumerator(name: "TI_SAT_ULACCUM_TYPE", value: 79, isUnsigned: true)
!516 = !DIEnumerator(name: "TI_SAT_ULLACCUM_TYPE", value: 80, isUnsigned: true)
!517 = !DIEnumerator(name: "TI_SACCUM_TYPE", value: 81, isUnsigned: true)
!518 = !DIEnumerator(name: "TI_ACCUM_TYPE", value: 82, isUnsigned: true)
!519 = !DIEnumerator(name: "TI_LACCUM_TYPE", value: 83, isUnsigned: true)
!520 = !DIEnumerator(name: "TI_LLACCUM_TYPE", value: 84, isUnsigned: true)
!521 = !DIEnumerator(name: "TI_USACCUM_TYPE", value: 85, isUnsigned: true)
!522 = !DIEnumerator(name: "TI_UACCUM_TYPE", value: 86, isUnsigned: true)
!523 = !DIEnumerator(name: "TI_ULACCUM_TYPE", value: 87, isUnsigned: true)
!524 = !DIEnumerator(name: "TI_ULLACCUM_TYPE", value: 88, isUnsigned: true)
!525 = !DIEnumerator(name: "TI_QQ_TYPE", value: 89, isUnsigned: true)
!526 = !DIEnumerator(name: "TI_HQ_TYPE", value: 90, isUnsigned: true)
!527 = !DIEnumerator(name: "TI_SQ_TYPE", value: 91, isUnsigned: true)
!528 = !DIEnumerator(name: "TI_DQ_TYPE", value: 92, isUnsigned: true)
!529 = !DIEnumerator(name: "TI_TQ_TYPE", value: 93, isUnsigned: true)
!530 = !DIEnumerator(name: "TI_UQQ_TYPE", value: 94, isUnsigned: true)
!531 = !DIEnumerator(name: "TI_UHQ_TYPE", value: 95, isUnsigned: true)
!532 = !DIEnumerator(name: "TI_USQ_TYPE", value: 96, isUnsigned: true)
!533 = !DIEnumerator(name: "TI_UDQ_TYPE", value: 97, isUnsigned: true)
!534 = !DIEnumerator(name: "TI_UTQ_TYPE", value: 98, isUnsigned: true)
!535 = !DIEnumerator(name: "TI_SAT_QQ_TYPE", value: 99, isUnsigned: true)
!536 = !DIEnumerator(name: "TI_SAT_HQ_TYPE", value: 100, isUnsigned: true)
!537 = !DIEnumerator(name: "TI_SAT_SQ_TYPE", value: 101, isUnsigned: true)
!538 = !DIEnumerator(name: "TI_SAT_DQ_TYPE", value: 102, isUnsigned: true)
!539 = !DIEnumerator(name: "TI_SAT_TQ_TYPE", value: 103, isUnsigned: true)
!540 = !DIEnumerator(name: "TI_SAT_UQQ_TYPE", value: 104, isUnsigned: true)
!541 = !DIEnumerator(name: "TI_SAT_UHQ_TYPE", value: 105, isUnsigned: true)
!542 = !DIEnumerator(name: "TI_SAT_USQ_TYPE", value: 106, isUnsigned: true)
!543 = !DIEnumerator(name: "TI_SAT_UDQ_TYPE", value: 107, isUnsigned: true)
!544 = !DIEnumerator(name: "TI_SAT_UTQ_TYPE", value: 108, isUnsigned: true)
!545 = !DIEnumerator(name: "TI_HA_TYPE", value: 109, isUnsigned: true)
!546 = !DIEnumerator(name: "TI_SA_TYPE", value: 110, isUnsigned: true)
!547 = !DIEnumerator(name: "TI_DA_TYPE", value: 111, isUnsigned: true)
!548 = !DIEnumerator(name: "TI_TA_TYPE", value: 112, isUnsigned: true)
!549 = !DIEnumerator(name: "TI_UHA_TYPE", value: 113, isUnsigned: true)
!550 = !DIEnumerator(name: "TI_USA_TYPE", value: 114, isUnsigned: true)
!551 = !DIEnumerator(name: "TI_UDA_TYPE", value: 115, isUnsigned: true)
!552 = !DIEnumerator(name: "TI_UTA_TYPE", value: 116, isUnsigned: true)
!553 = !DIEnumerator(name: "TI_SAT_HA_TYPE", value: 117, isUnsigned: true)
!554 = !DIEnumerator(name: "TI_SAT_SA_TYPE", value: 118, isUnsigned: true)
!555 = !DIEnumerator(name: "TI_SAT_DA_TYPE", value: 119, isUnsigned: true)
!556 = !DIEnumerator(name: "TI_SAT_TA_TYPE", value: 120, isUnsigned: true)
!557 = !DIEnumerator(name: "TI_SAT_UHA_TYPE", value: 121, isUnsigned: true)
!558 = !DIEnumerator(name: "TI_SAT_USA_TYPE", value: 122, isUnsigned: true)
!559 = !DIEnumerator(name: "TI_SAT_UDA_TYPE", value: 123, isUnsigned: true)
!560 = !DIEnumerator(name: "TI_SAT_UTA_TYPE", value: 124, isUnsigned: true)
!561 = !DIEnumerator(name: "TI_OPTIMIZATION_DEFAULT", value: 125, isUnsigned: true)
!562 = !DIEnumerator(name: "TI_OPTIMIZATION_CURRENT", value: 126, isUnsigned: true)
!563 = !DIEnumerator(name: "TI_TARGET_OPTION_DEFAULT", value: 127, isUnsigned: true)
!564 = !DIEnumerator(name: "TI_TARGET_OPTION_CURRENT", value: 128, isUnsigned: true)
!565 = !DIEnumerator(name: "TI_CURRENT_TARGET_PRAGMA", value: 129, isUnsigned: true)
!566 = !DIEnumerator(name: "TI_CURRENT_OPTIMIZE_PRAGMA", value: 130, isUnsigned: true)
!567 = !DIEnumerator(name: "TI_MAX", value: 131, isUnsigned: true)
!568 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code_class", file: !135, line: 58, baseType: !7, size: 32, elements: !569)
!569 = !{!570, !571, !572, !573, !574, !575, !576, !577, !578, !579, !580}
!570 = !DIEnumerator(name: "tcc_exceptional", value: 0, isUnsigned: true)
!571 = !DIEnumerator(name: "tcc_constant", value: 1, isUnsigned: true)
!572 = !DIEnumerator(name: "tcc_type", value: 2, isUnsigned: true)
!573 = !DIEnumerator(name: "tcc_declaration", value: 3, isUnsigned: true)
!574 = !DIEnumerator(name: "tcc_reference", value: 4, isUnsigned: true)
!575 = !DIEnumerator(name: "tcc_comparison", value: 5, isUnsigned: true)
!576 = !DIEnumerator(name: "tcc_unary", value: 6, isUnsigned: true)
!577 = !DIEnumerator(name: "tcc_binary", value: 7, isUnsigned: true)
!578 = !DIEnumerator(name: "tcc_statement", value: 8, isUnsigned: true)
!579 = !DIEnumerator(name: "tcc_vl_exp", value: 9, isUnsigned: true)
!580 = !DIEnumerator(name: "tcc_expression", value: 10, isUnsigned: true)
!581 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "operand_equal_flag", file: !135, line: 4853, baseType: !7, size: 32, elements: !582)
!582 = !{!583, !584}
!583 = !DIEnumerator(name: "OEP_ONLY_CONST", value: 1, isUnsigned: true)
!584 = !DIEnumerator(name: "OEP_PURE_SAME", value: 2, isUnsigned: true)
!585 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_rhs_class", file: !391, line: 80, baseType: !7, size: 32, elements: !586)
!586 = !{!587, !588, !589, !590}
!587 = !DIEnumerator(name: "GIMPLE_INVALID_RHS", value: 0, isUnsigned: true)
!588 = !DIEnumerator(name: "GIMPLE_BINARY_RHS", value: 1, isUnsigned: true)
!589 = !DIEnumerator(name: "GIMPLE_UNARY_RHS", value: 2, isUnsigned: true)
!590 = !DIEnumerator(name: "GIMPLE_SINGLE_RHS", value: 3, isUnsigned: true)
!591 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "built_in_class", file: !135, line: 205, baseType: !7, size: 32, elements: !592)
!592 = !{!593, !594, !595, !596}
!593 = !DIEnumerator(name: "NOT_BUILT_IN", value: 0, isUnsigned: true)
!594 = !DIEnumerator(name: "BUILT_IN_FRONTEND", value: 1, isUnsigned: true)
!595 = !DIEnumerator(name: "BUILT_IN_MD", value: 2, isUnsigned: true)
!596 = !DIEnumerator(name: "BUILT_IN_NORMAL", value: 3, isUnsigned: true)
!597 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "built_in_function", file: !135, line: 220, baseType: !7, size: 32, elements: !598)
!598 = !{!599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743, !744, !745, !746, !747, !748, !749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760, !761, !762, !763, !764, !765, !766, !767, !768, !769, !770, !771, !772, !773, !774, !775, !776, !777, !778, !779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826, !827, !828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845, !846, !847, !848, !849, !850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860, !861, !862, !863, !864, !865, !866, !867, !868, !869, !870, !871, !872, !873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902, !903, !904, !905, !906, !907, !908, !909, !910, !911, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !926, !927, !928, !929, !930, !931, !932, !933, !934, !935, !936, !937, !938, !939, !940, !941, !942, !943, !944, !945, !946, !947, !948, !949, !950, !951, !952, !953, !954, !955, !956, !957, !958, !959, !960, !961, !962, !963, !964, !965, !966, !967, !968, !969, !970, !971, !972, !973, !974, !975, !976, !977, !978, !979, !980, !981, !982, !983, !984, !985, !986, !987, !988, !989, !990, !991, !992, !993, !994, !995, !996, !997, !998, !999, !1000, !1001, !1002, !1003, !1004, !1005, !1006, !1007, !1008, !1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018, !1019, !1020, !1021, !1022, !1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1032, !1033, !1034, !1035, !1036, !1037, !1038, !1039, !1040, !1041, !1042, !1043, !1044, !1045, !1046, !1047, !1048, !1049, !1050, !1051, !1052, !1053, !1054, !1055, !1056, !1057, !1058, !1059, !1060, !1061, !1062, !1063, !1064, !1065, !1066, !1067, !1068, !1069, !1070, !1071, !1072, !1073, !1074, !1075, !1076, !1077, !1078, !1079, !1080, !1081, !1082, !1083, !1084, !1085, !1086, !1087, !1088, !1089, !1090, !1091, !1092, !1093, !1094, !1095, !1096, !1097, !1098, !1099, !1100, !1101, !1102, !1103, !1104, !1105, !1106, !1107, !1108, !1109, !1110, !1111, !1112, !1113, !1114, !1115, !1116, !1117, !1118, !1119, !1120, !1121, !1122, !1123, !1124, !1125, !1126, !1127, !1128, !1129, !1130, !1131, !1132, !1133, !1134, !1135, !1136, !1137, !1138, !1139, !1140, !1141, !1142, !1143, !1144, !1145, !1146, !1147, !1148, !1149, !1150, !1151, !1152, !1153, !1154, !1155, !1156, !1157, !1158, !1159, !1160, !1161, !1162, !1163, !1164, !1165, !1166, !1167, !1168, !1169, !1170, !1171, !1172, !1173, !1174, !1175, !1176, !1177, !1178, !1179, !1180, !1181, !1182, !1183, !1184, !1185, !1186, !1187, !1188, !1189, !1190, !1191, !1192, !1193, !1194, !1195, !1196, !1197, !1198, !1199, !1200, !1201, !1202, !1203, !1204, !1205, !1206, !1207, !1208, !1209, !1210, !1211, !1212, !1213, !1214, !1215, !1216, !1217, !1218, !1219, !1220, !1221, !1222, !1223, !1224, !1225, !1226, !1227, !1228, !1229, !1230, !1231, !1232, !1233, !1234, !1235, !1236, !1237, !1238, !1239, !1240, !1241, !1242, !1243, !1244, !1245, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273, !1274, !1275, !1276, !1277, !1278, !1279, !1280, !1281, !1282, !1283, !1284, !1285, !1286, !1287, !1288, !1289, !1290, !1291, !1292, !1293, !1294, !1295, !1296, !1297, !1298, !1299, !1300, !1301, !1302, !1303, !1304, !1305, !1306, !1307, !1308, !1309, !1310, !1311, !1312, !1313, !1314, !1315, !1316}
!599 = !DIEnumerator(name: "BUILT_IN_ACOS", value: 0, isUnsigned: true)
!600 = !DIEnumerator(name: "BUILT_IN_ACOSF", value: 1, isUnsigned: true)
!601 = !DIEnumerator(name: "BUILT_IN_ACOSH", value: 2, isUnsigned: true)
!602 = !DIEnumerator(name: "BUILT_IN_ACOSHF", value: 3, isUnsigned: true)
!603 = !DIEnumerator(name: "BUILT_IN_ACOSHL", value: 4, isUnsigned: true)
!604 = !DIEnumerator(name: "BUILT_IN_ACOSL", value: 5, isUnsigned: true)
!605 = !DIEnumerator(name: "BUILT_IN_ASIN", value: 6, isUnsigned: true)
!606 = !DIEnumerator(name: "BUILT_IN_ASINF", value: 7, isUnsigned: true)
!607 = !DIEnumerator(name: "BUILT_IN_ASINH", value: 8, isUnsigned: true)
!608 = !DIEnumerator(name: "BUILT_IN_ASINHF", value: 9, isUnsigned: true)
!609 = !DIEnumerator(name: "BUILT_IN_ASINHL", value: 10, isUnsigned: true)
!610 = !DIEnumerator(name: "BUILT_IN_ASINL", value: 11, isUnsigned: true)
!611 = !DIEnumerator(name: "BUILT_IN_ATAN", value: 12, isUnsigned: true)
!612 = !DIEnumerator(name: "BUILT_IN_ATAN2", value: 13, isUnsigned: true)
!613 = !DIEnumerator(name: "BUILT_IN_ATAN2F", value: 14, isUnsigned: true)
!614 = !DIEnumerator(name: "BUILT_IN_ATAN2L", value: 15, isUnsigned: true)
!615 = !DIEnumerator(name: "BUILT_IN_ATANF", value: 16, isUnsigned: true)
!616 = !DIEnumerator(name: "BUILT_IN_ATANH", value: 17, isUnsigned: true)
!617 = !DIEnumerator(name: "BUILT_IN_ATANHF", value: 18, isUnsigned: true)
!618 = !DIEnumerator(name: "BUILT_IN_ATANHL", value: 19, isUnsigned: true)
!619 = !DIEnumerator(name: "BUILT_IN_ATANL", value: 20, isUnsigned: true)
!620 = !DIEnumerator(name: "BUILT_IN_CBRT", value: 21, isUnsigned: true)
!621 = !DIEnumerator(name: "BUILT_IN_CBRTF", value: 22, isUnsigned: true)
!622 = !DIEnumerator(name: "BUILT_IN_CBRTL", value: 23, isUnsigned: true)
!623 = !DIEnumerator(name: "BUILT_IN_CEIL", value: 24, isUnsigned: true)
!624 = !DIEnumerator(name: "BUILT_IN_CEILF", value: 25, isUnsigned: true)
!625 = !DIEnumerator(name: "BUILT_IN_CEILL", value: 26, isUnsigned: true)
!626 = !DIEnumerator(name: "BUILT_IN_COPYSIGN", value: 27, isUnsigned: true)
!627 = !DIEnumerator(name: "BUILT_IN_COPYSIGNF", value: 28, isUnsigned: true)
!628 = !DIEnumerator(name: "BUILT_IN_COPYSIGNL", value: 29, isUnsigned: true)
!629 = !DIEnumerator(name: "BUILT_IN_COS", value: 30, isUnsigned: true)
!630 = !DIEnumerator(name: "BUILT_IN_COSF", value: 31, isUnsigned: true)
!631 = !DIEnumerator(name: "BUILT_IN_COSH", value: 32, isUnsigned: true)
!632 = !DIEnumerator(name: "BUILT_IN_COSHF", value: 33, isUnsigned: true)
!633 = !DIEnumerator(name: "BUILT_IN_COSHL", value: 34, isUnsigned: true)
!634 = !DIEnumerator(name: "BUILT_IN_COSL", value: 35, isUnsigned: true)
!635 = !DIEnumerator(name: "BUILT_IN_DREM", value: 36, isUnsigned: true)
!636 = !DIEnumerator(name: "BUILT_IN_DREMF", value: 37, isUnsigned: true)
!637 = !DIEnumerator(name: "BUILT_IN_DREML", value: 38, isUnsigned: true)
!638 = !DIEnumerator(name: "BUILT_IN_ERF", value: 39, isUnsigned: true)
!639 = !DIEnumerator(name: "BUILT_IN_ERFC", value: 40, isUnsigned: true)
!640 = !DIEnumerator(name: "BUILT_IN_ERFCF", value: 41, isUnsigned: true)
!641 = !DIEnumerator(name: "BUILT_IN_ERFCL", value: 42, isUnsigned: true)
!642 = !DIEnumerator(name: "BUILT_IN_ERFF", value: 43, isUnsigned: true)
!643 = !DIEnumerator(name: "BUILT_IN_ERFL", value: 44, isUnsigned: true)
!644 = !DIEnumerator(name: "BUILT_IN_EXP", value: 45, isUnsigned: true)
!645 = !DIEnumerator(name: "BUILT_IN_EXP10", value: 46, isUnsigned: true)
!646 = !DIEnumerator(name: "BUILT_IN_EXP10F", value: 47, isUnsigned: true)
!647 = !DIEnumerator(name: "BUILT_IN_EXP10L", value: 48, isUnsigned: true)
!648 = !DIEnumerator(name: "BUILT_IN_EXP2", value: 49, isUnsigned: true)
!649 = !DIEnumerator(name: "BUILT_IN_EXP2F", value: 50, isUnsigned: true)
!650 = !DIEnumerator(name: "BUILT_IN_EXP2L", value: 51, isUnsigned: true)
!651 = !DIEnumerator(name: "BUILT_IN_EXPF", value: 52, isUnsigned: true)
!652 = !DIEnumerator(name: "BUILT_IN_EXPL", value: 53, isUnsigned: true)
!653 = !DIEnumerator(name: "BUILT_IN_EXPM1", value: 54, isUnsigned: true)
!654 = !DIEnumerator(name: "BUILT_IN_EXPM1F", value: 55, isUnsigned: true)
!655 = !DIEnumerator(name: "BUILT_IN_EXPM1L", value: 56, isUnsigned: true)
!656 = !DIEnumerator(name: "BUILT_IN_FABS", value: 57, isUnsigned: true)
!657 = !DIEnumerator(name: "BUILT_IN_FABSF", value: 58, isUnsigned: true)
!658 = !DIEnumerator(name: "BUILT_IN_FABSL", value: 59, isUnsigned: true)
!659 = !DIEnumerator(name: "BUILT_IN_FDIM", value: 60, isUnsigned: true)
!660 = !DIEnumerator(name: "BUILT_IN_FDIMF", value: 61, isUnsigned: true)
!661 = !DIEnumerator(name: "BUILT_IN_FDIML", value: 62, isUnsigned: true)
!662 = !DIEnumerator(name: "BUILT_IN_FLOOR", value: 63, isUnsigned: true)
!663 = !DIEnumerator(name: "BUILT_IN_FLOORF", value: 64, isUnsigned: true)
!664 = !DIEnumerator(name: "BUILT_IN_FLOORL", value: 65, isUnsigned: true)
!665 = !DIEnumerator(name: "BUILT_IN_FMA", value: 66, isUnsigned: true)
!666 = !DIEnumerator(name: "BUILT_IN_FMAF", value: 67, isUnsigned: true)
!667 = !DIEnumerator(name: "BUILT_IN_FMAL", value: 68, isUnsigned: true)
!668 = !DIEnumerator(name: "BUILT_IN_FMAX", value: 69, isUnsigned: true)
!669 = !DIEnumerator(name: "BUILT_IN_FMAXF", value: 70, isUnsigned: true)
!670 = !DIEnumerator(name: "BUILT_IN_FMAXL", value: 71, isUnsigned: true)
!671 = !DIEnumerator(name: "BUILT_IN_FMIN", value: 72, isUnsigned: true)
!672 = !DIEnumerator(name: "BUILT_IN_FMINF", value: 73, isUnsigned: true)
!673 = !DIEnumerator(name: "BUILT_IN_FMINL", value: 74, isUnsigned: true)
!674 = !DIEnumerator(name: "BUILT_IN_FMOD", value: 75, isUnsigned: true)
!675 = !DIEnumerator(name: "BUILT_IN_FMODF", value: 76, isUnsigned: true)
!676 = !DIEnumerator(name: "BUILT_IN_FMODL", value: 77, isUnsigned: true)
!677 = !DIEnumerator(name: "BUILT_IN_FREXP", value: 78, isUnsigned: true)
!678 = !DIEnumerator(name: "BUILT_IN_FREXPF", value: 79, isUnsigned: true)
!679 = !DIEnumerator(name: "BUILT_IN_FREXPL", value: 80, isUnsigned: true)
!680 = !DIEnumerator(name: "BUILT_IN_GAMMA", value: 81, isUnsigned: true)
!681 = !DIEnumerator(name: "BUILT_IN_GAMMAF", value: 82, isUnsigned: true)
!682 = !DIEnumerator(name: "BUILT_IN_GAMMAL", value: 83, isUnsigned: true)
!683 = !DIEnumerator(name: "BUILT_IN_GAMMA_R", value: 84, isUnsigned: true)
!684 = !DIEnumerator(name: "BUILT_IN_GAMMAF_R", value: 85, isUnsigned: true)
!685 = !DIEnumerator(name: "BUILT_IN_GAMMAL_R", value: 86, isUnsigned: true)
!686 = !DIEnumerator(name: "BUILT_IN_HUGE_VAL", value: 87, isUnsigned: true)
!687 = !DIEnumerator(name: "BUILT_IN_HUGE_VALF", value: 88, isUnsigned: true)
!688 = !DIEnumerator(name: "BUILT_IN_HUGE_VALL", value: 89, isUnsigned: true)
!689 = !DIEnumerator(name: "BUILT_IN_HYPOT", value: 90, isUnsigned: true)
!690 = !DIEnumerator(name: "BUILT_IN_HYPOTF", value: 91, isUnsigned: true)
!691 = !DIEnumerator(name: "BUILT_IN_HYPOTL", value: 92, isUnsigned: true)
!692 = !DIEnumerator(name: "BUILT_IN_ILOGB", value: 93, isUnsigned: true)
!693 = !DIEnumerator(name: "BUILT_IN_ILOGBF", value: 94, isUnsigned: true)
!694 = !DIEnumerator(name: "BUILT_IN_ILOGBL", value: 95, isUnsigned: true)
!695 = !DIEnumerator(name: "BUILT_IN_INF", value: 96, isUnsigned: true)
!696 = !DIEnumerator(name: "BUILT_IN_INFF", value: 97, isUnsigned: true)
!697 = !DIEnumerator(name: "BUILT_IN_INFL", value: 98, isUnsigned: true)
!698 = !DIEnumerator(name: "BUILT_IN_INFD32", value: 99, isUnsigned: true)
!699 = !DIEnumerator(name: "BUILT_IN_INFD64", value: 100, isUnsigned: true)
!700 = !DIEnumerator(name: "BUILT_IN_INFD128", value: 101, isUnsigned: true)
!701 = !DIEnumerator(name: "BUILT_IN_J0", value: 102, isUnsigned: true)
!702 = !DIEnumerator(name: "BUILT_IN_J0F", value: 103, isUnsigned: true)
!703 = !DIEnumerator(name: "BUILT_IN_J0L", value: 104, isUnsigned: true)
!704 = !DIEnumerator(name: "BUILT_IN_J1", value: 105, isUnsigned: true)
!705 = !DIEnumerator(name: "BUILT_IN_J1F", value: 106, isUnsigned: true)
!706 = !DIEnumerator(name: "BUILT_IN_J1L", value: 107, isUnsigned: true)
!707 = !DIEnumerator(name: "BUILT_IN_JN", value: 108, isUnsigned: true)
!708 = !DIEnumerator(name: "BUILT_IN_JNF", value: 109, isUnsigned: true)
!709 = !DIEnumerator(name: "BUILT_IN_JNL", value: 110, isUnsigned: true)
!710 = !DIEnumerator(name: "BUILT_IN_LCEIL", value: 111, isUnsigned: true)
!711 = !DIEnumerator(name: "BUILT_IN_LCEILF", value: 112, isUnsigned: true)
!712 = !DIEnumerator(name: "BUILT_IN_LCEILL", value: 113, isUnsigned: true)
!713 = !DIEnumerator(name: "BUILT_IN_LDEXP", value: 114, isUnsigned: true)
!714 = !DIEnumerator(name: "BUILT_IN_LDEXPF", value: 115, isUnsigned: true)
!715 = !DIEnumerator(name: "BUILT_IN_LDEXPL", value: 116, isUnsigned: true)
!716 = !DIEnumerator(name: "BUILT_IN_LFLOOR", value: 117, isUnsigned: true)
!717 = !DIEnumerator(name: "BUILT_IN_LFLOORF", value: 118, isUnsigned: true)
!718 = !DIEnumerator(name: "BUILT_IN_LFLOORL", value: 119, isUnsigned: true)
!719 = !DIEnumerator(name: "BUILT_IN_LGAMMA", value: 120, isUnsigned: true)
!720 = !DIEnumerator(name: "BUILT_IN_LGAMMAF", value: 121, isUnsigned: true)
!721 = !DIEnumerator(name: "BUILT_IN_LGAMMAL", value: 122, isUnsigned: true)
!722 = !DIEnumerator(name: "BUILT_IN_LGAMMA_R", value: 123, isUnsigned: true)
!723 = !DIEnumerator(name: "BUILT_IN_LGAMMAF_R", value: 124, isUnsigned: true)
!724 = !DIEnumerator(name: "BUILT_IN_LGAMMAL_R", value: 125, isUnsigned: true)
!725 = !DIEnumerator(name: "BUILT_IN_LLCEIL", value: 126, isUnsigned: true)
!726 = !DIEnumerator(name: "BUILT_IN_LLCEILF", value: 127, isUnsigned: true)
!727 = !DIEnumerator(name: "BUILT_IN_LLCEILL", value: 128, isUnsigned: true)
!728 = !DIEnumerator(name: "BUILT_IN_LLFLOOR", value: 129, isUnsigned: true)
!729 = !DIEnumerator(name: "BUILT_IN_LLFLOORF", value: 130, isUnsigned: true)
!730 = !DIEnumerator(name: "BUILT_IN_LLFLOORL", value: 131, isUnsigned: true)
!731 = !DIEnumerator(name: "BUILT_IN_LLRINT", value: 132, isUnsigned: true)
!732 = !DIEnumerator(name: "BUILT_IN_LLRINTF", value: 133, isUnsigned: true)
!733 = !DIEnumerator(name: "BUILT_IN_LLRINTL", value: 134, isUnsigned: true)
!734 = !DIEnumerator(name: "BUILT_IN_LLROUND", value: 135, isUnsigned: true)
!735 = !DIEnumerator(name: "BUILT_IN_LLROUNDF", value: 136, isUnsigned: true)
!736 = !DIEnumerator(name: "BUILT_IN_LLROUNDL", value: 137, isUnsigned: true)
!737 = !DIEnumerator(name: "BUILT_IN_LOG", value: 138, isUnsigned: true)
!738 = !DIEnumerator(name: "BUILT_IN_LOG10", value: 139, isUnsigned: true)
!739 = !DIEnumerator(name: "BUILT_IN_LOG10F", value: 140, isUnsigned: true)
!740 = !DIEnumerator(name: "BUILT_IN_LOG10L", value: 141, isUnsigned: true)
!741 = !DIEnumerator(name: "BUILT_IN_LOG1P", value: 142, isUnsigned: true)
!742 = !DIEnumerator(name: "BUILT_IN_LOG1PF", value: 143, isUnsigned: true)
!743 = !DIEnumerator(name: "BUILT_IN_LOG1PL", value: 144, isUnsigned: true)
!744 = !DIEnumerator(name: "BUILT_IN_LOG2", value: 145, isUnsigned: true)
!745 = !DIEnumerator(name: "BUILT_IN_LOG2F", value: 146, isUnsigned: true)
!746 = !DIEnumerator(name: "BUILT_IN_LOG2L", value: 147, isUnsigned: true)
!747 = !DIEnumerator(name: "BUILT_IN_LOGB", value: 148, isUnsigned: true)
!748 = !DIEnumerator(name: "BUILT_IN_LOGBF", value: 149, isUnsigned: true)
!749 = !DIEnumerator(name: "BUILT_IN_LOGBL", value: 150, isUnsigned: true)
!750 = !DIEnumerator(name: "BUILT_IN_LOGF", value: 151, isUnsigned: true)
!751 = !DIEnumerator(name: "BUILT_IN_LOGL", value: 152, isUnsigned: true)
!752 = !DIEnumerator(name: "BUILT_IN_LRINT", value: 153, isUnsigned: true)
!753 = !DIEnumerator(name: "BUILT_IN_LRINTF", value: 154, isUnsigned: true)
!754 = !DIEnumerator(name: "BUILT_IN_LRINTL", value: 155, isUnsigned: true)
!755 = !DIEnumerator(name: "BUILT_IN_LROUND", value: 156, isUnsigned: true)
!756 = !DIEnumerator(name: "BUILT_IN_LROUNDF", value: 157, isUnsigned: true)
!757 = !DIEnumerator(name: "BUILT_IN_LROUNDL", value: 158, isUnsigned: true)
!758 = !DIEnumerator(name: "BUILT_IN_MODF", value: 159, isUnsigned: true)
!759 = !DIEnumerator(name: "BUILT_IN_MODFF", value: 160, isUnsigned: true)
!760 = !DIEnumerator(name: "BUILT_IN_MODFL", value: 161, isUnsigned: true)
!761 = !DIEnumerator(name: "BUILT_IN_NAN", value: 162, isUnsigned: true)
!762 = !DIEnumerator(name: "BUILT_IN_NANF", value: 163, isUnsigned: true)
!763 = !DIEnumerator(name: "BUILT_IN_NANL", value: 164, isUnsigned: true)
!764 = !DIEnumerator(name: "BUILT_IN_NAND32", value: 165, isUnsigned: true)
!765 = !DIEnumerator(name: "BUILT_IN_NAND64", value: 166, isUnsigned: true)
!766 = !DIEnumerator(name: "BUILT_IN_NAND128", value: 167, isUnsigned: true)
!767 = !DIEnumerator(name: "BUILT_IN_NANS", value: 168, isUnsigned: true)
!768 = !DIEnumerator(name: "BUILT_IN_NANSF", value: 169, isUnsigned: true)
!769 = !DIEnumerator(name: "BUILT_IN_NANSL", value: 170, isUnsigned: true)
!770 = !DIEnumerator(name: "BUILT_IN_NEARBYINT", value: 171, isUnsigned: true)
!771 = !DIEnumerator(name: "BUILT_IN_NEARBYINTF", value: 172, isUnsigned: true)
!772 = !DIEnumerator(name: "BUILT_IN_NEARBYINTL", value: 173, isUnsigned: true)
!773 = !DIEnumerator(name: "BUILT_IN_NEXTAFTER", value: 174, isUnsigned: true)
!774 = !DIEnumerator(name: "BUILT_IN_NEXTAFTERF", value: 175, isUnsigned: true)
!775 = !DIEnumerator(name: "BUILT_IN_NEXTAFTERL", value: 176, isUnsigned: true)
!776 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARD", value: 177, isUnsigned: true)
!777 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARDF", value: 178, isUnsigned: true)
!778 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARDL", value: 179, isUnsigned: true)
!779 = !DIEnumerator(name: "BUILT_IN_POW", value: 180, isUnsigned: true)
!780 = !DIEnumerator(name: "BUILT_IN_POW10", value: 181, isUnsigned: true)
!781 = !DIEnumerator(name: "BUILT_IN_POW10F", value: 182, isUnsigned: true)
!782 = !DIEnumerator(name: "BUILT_IN_POW10L", value: 183, isUnsigned: true)
!783 = !DIEnumerator(name: "BUILT_IN_POWF", value: 184, isUnsigned: true)
!784 = !DIEnumerator(name: "BUILT_IN_POWI", value: 185, isUnsigned: true)
!785 = !DIEnumerator(name: "BUILT_IN_POWIF", value: 186, isUnsigned: true)
!786 = !DIEnumerator(name: "BUILT_IN_POWIL", value: 187, isUnsigned: true)
!787 = !DIEnumerator(name: "BUILT_IN_POWL", value: 188, isUnsigned: true)
!788 = !DIEnumerator(name: "BUILT_IN_REMAINDER", value: 189, isUnsigned: true)
!789 = !DIEnumerator(name: "BUILT_IN_REMAINDERF", value: 190, isUnsigned: true)
!790 = !DIEnumerator(name: "BUILT_IN_REMAINDERL", value: 191, isUnsigned: true)
!791 = !DIEnumerator(name: "BUILT_IN_REMQUO", value: 192, isUnsigned: true)
!792 = !DIEnumerator(name: "BUILT_IN_REMQUOF", value: 193, isUnsigned: true)
!793 = !DIEnumerator(name: "BUILT_IN_REMQUOL", value: 194, isUnsigned: true)
!794 = !DIEnumerator(name: "BUILT_IN_RINT", value: 195, isUnsigned: true)
!795 = !DIEnumerator(name: "BUILT_IN_RINTF", value: 196, isUnsigned: true)
!796 = !DIEnumerator(name: "BUILT_IN_RINTL", value: 197, isUnsigned: true)
!797 = !DIEnumerator(name: "BUILT_IN_ROUND", value: 198, isUnsigned: true)
!798 = !DIEnumerator(name: "BUILT_IN_ROUNDF", value: 199, isUnsigned: true)
!799 = !DIEnumerator(name: "BUILT_IN_ROUNDL", value: 200, isUnsigned: true)
!800 = !DIEnumerator(name: "BUILT_IN_SCALB", value: 201, isUnsigned: true)
!801 = !DIEnumerator(name: "BUILT_IN_SCALBF", value: 202, isUnsigned: true)
!802 = !DIEnumerator(name: "BUILT_IN_SCALBL", value: 203, isUnsigned: true)
!803 = !DIEnumerator(name: "BUILT_IN_SCALBLN", value: 204, isUnsigned: true)
!804 = !DIEnumerator(name: "BUILT_IN_SCALBLNF", value: 205, isUnsigned: true)
!805 = !DIEnumerator(name: "BUILT_IN_SCALBLNL", value: 206, isUnsigned: true)
!806 = !DIEnumerator(name: "BUILT_IN_SCALBN", value: 207, isUnsigned: true)
!807 = !DIEnumerator(name: "BUILT_IN_SCALBNF", value: 208, isUnsigned: true)
!808 = !DIEnumerator(name: "BUILT_IN_SCALBNL", value: 209, isUnsigned: true)
!809 = !DIEnumerator(name: "BUILT_IN_SIGNBIT", value: 210, isUnsigned: true)
!810 = !DIEnumerator(name: "BUILT_IN_SIGNBITF", value: 211, isUnsigned: true)
!811 = !DIEnumerator(name: "BUILT_IN_SIGNBITL", value: 212, isUnsigned: true)
!812 = !DIEnumerator(name: "BUILT_IN_SIGNBITD32", value: 213, isUnsigned: true)
!813 = !DIEnumerator(name: "BUILT_IN_SIGNBITD64", value: 214, isUnsigned: true)
!814 = !DIEnumerator(name: "BUILT_IN_SIGNBITD128", value: 215, isUnsigned: true)
!815 = !DIEnumerator(name: "BUILT_IN_SIGNIFICAND", value: 216, isUnsigned: true)
!816 = !DIEnumerator(name: "BUILT_IN_SIGNIFICANDF", value: 217, isUnsigned: true)
!817 = !DIEnumerator(name: "BUILT_IN_SIGNIFICANDL", value: 218, isUnsigned: true)
!818 = !DIEnumerator(name: "BUILT_IN_SIN", value: 219, isUnsigned: true)
!819 = !DIEnumerator(name: "BUILT_IN_SINCOS", value: 220, isUnsigned: true)
!820 = !DIEnumerator(name: "BUILT_IN_SINCOSF", value: 221, isUnsigned: true)
!821 = !DIEnumerator(name: "BUILT_IN_SINCOSL", value: 222, isUnsigned: true)
!822 = !DIEnumerator(name: "BUILT_IN_SINF", value: 223, isUnsigned: true)
!823 = !DIEnumerator(name: "BUILT_IN_SINH", value: 224, isUnsigned: true)
!824 = !DIEnumerator(name: "BUILT_IN_SINHF", value: 225, isUnsigned: true)
!825 = !DIEnumerator(name: "BUILT_IN_SINHL", value: 226, isUnsigned: true)
!826 = !DIEnumerator(name: "BUILT_IN_SINL", value: 227, isUnsigned: true)
!827 = !DIEnumerator(name: "BUILT_IN_SQRT", value: 228, isUnsigned: true)
!828 = !DIEnumerator(name: "BUILT_IN_SQRTF", value: 229, isUnsigned: true)
!829 = !DIEnumerator(name: "BUILT_IN_SQRTL", value: 230, isUnsigned: true)
!830 = !DIEnumerator(name: "BUILT_IN_TAN", value: 231, isUnsigned: true)
!831 = !DIEnumerator(name: "BUILT_IN_TANF", value: 232, isUnsigned: true)
!832 = !DIEnumerator(name: "BUILT_IN_TANH", value: 233, isUnsigned: true)
!833 = !DIEnumerator(name: "BUILT_IN_TANHF", value: 234, isUnsigned: true)
!834 = !DIEnumerator(name: "BUILT_IN_TANHL", value: 235, isUnsigned: true)
!835 = !DIEnumerator(name: "BUILT_IN_TANL", value: 236, isUnsigned: true)
!836 = !DIEnumerator(name: "BUILT_IN_TGAMMA", value: 237, isUnsigned: true)
!837 = !DIEnumerator(name: "BUILT_IN_TGAMMAF", value: 238, isUnsigned: true)
!838 = !DIEnumerator(name: "BUILT_IN_TGAMMAL", value: 239, isUnsigned: true)
!839 = !DIEnumerator(name: "BUILT_IN_TRUNC", value: 240, isUnsigned: true)
!840 = !DIEnumerator(name: "BUILT_IN_TRUNCF", value: 241, isUnsigned: true)
!841 = !DIEnumerator(name: "BUILT_IN_TRUNCL", value: 242, isUnsigned: true)
!842 = !DIEnumerator(name: "BUILT_IN_Y0", value: 243, isUnsigned: true)
!843 = !DIEnumerator(name: "BUILT_IN_Y0F", value: 244, isUnsigned: true)
!844 = !DIEnumerator(name: "BUILT_IN_Y0L", value: 245, isUnsigned: true)
!845 = !DIEnumerator(name: "BUILT_IN_Y1", value: 246, isUnsigned: true)
!846 = !DIEnumerator(name: "BUILT_IN_Y1F", value: 247, isUnsigned: true)
!847 = !DIEnumerator(name: "BUILT_IN_Y1L", value: 248, isUnsigned: true)
!848 = !DIEnumerator(name: "BUILT_IN_YN", value: 249, isUnsigned: true)
!849 = !DIEnumerator(name: "BUILT_IN_YNF", value: 250, isUnsigned: true)
!850 = !DIEnumerator(name: "BUILT_IN_YNL", value: 251, isUnsigned: true)
!851 = !DIEnumerator(name: "BUILT_IN_CABS", value: 252, isUnsigned: true)
!852 = !DIEnumerator(name: "BUILT_IN_CABSF", value: 253, isUnsigned: true)
!853 = !DIEnumerator(name: "BUILT_IN_CABSL", value: 254, isUnsigned: true)
!854 = !DIEnumerator(name: "BUILT_IN_CACOS", value: 255, isUnsigned: true)
!855 = !DIEnumerator(name: "BUILT_IN_CACOSF", value: 256, isUnsigned: true)
!856 = !DIEnumerator(name: "BUILT_IN_CACOSH", value: 257, isUnsigned: true)
!857 = !DIEnumerator(name: "BUILT_IN_CACOSHF", value: 258, isUnsigned: true)
!858 = !DIEnumerator(name: "BUILT_IN_CACOSHL", value: 259, isUnsigned: true)
!859 = !DIEnumerator(name: "BUILT_IN_CACOSL", value: 260, isUnsigned: true)
!860 = !DIEnumerator(name: "BUILT_IN_CARG", value: 261, isUnsigned: true)
!861 = !DIEnumerator(name: "BUILT_IN_CARGF", value: 262, isUnsigned: true)
!862 = !DIEnumerator(name: "BUILT_IN_CARGL", value: 263, isUnsigned: true)
!863 = !DIEnumerator(name: "BUILT_IN_CASIN", value: 264, isUnsigned: true)
!864 = !DIEnumerator(name: "BUILT_IN_CASINF", value: 265, isUnsigned: true)
!865 = !DIEnumerator(name: "BUILT_IN_CASINH", value: 266, isUnsigned: true)
!866 = !DIEnumerator(name: "BUILT_IN_CASINHF", value: 267, isUnsigned: true)
!867 = !DIEnumerator(name: "BUILT_IN_CASINHL", value: 268, isUnsigned: true)
!868 = !DIEnumerator(name: "BUILT_IN_CASINL", value: 269, isUnsigned: true)
!869 = !DIEnumerator(name: "BUILT_IN_CATAN", value: 270, isUnsigned: true)
!870 = !DIEnumerator(name: "BUILT_IN_CATANF", value: 271, isUnsigned: true)
!871 = !DIEnumerator(name: "BUILT_IN_CATANH", value: 272, isUnsigned: true)
!872 = !DIEnumerator(name: "BUILT_IN_CATANHF", value: 273, isUnsigned: true)
!873 = !DIEnumerator(name: "BUILT_IN_CATANHL", value: 274, isUnsigned: true)
!874 = !DIEnumerator(name: "BUILT_IN_CATANL", value: 275, isUnsigned: true)
!875 = !DIEnumerator(name: "BUILT_IN_CCOS", value: 276, isUnsigned: true)
!876 = !DIEnumerator(name: "BUILT_IN_CCOSF", value: 277, isUnsigned: true)
!877 = !DIEnumerator(name: "BUILT_IN_CCOSH", value: 278, isUnsigned: true)
!878 = !DIEnumerator(name: "BUILT_IN_CCOSHF", value: 279, isUnsigned: true)
!879 = !DIEnumerator(name: "BUILT_IN_CCOSHL", value: 280, isUnsigned: true)
!880 = !DIEnumerator(name: "BUILT_IN_CCOSL", value: 281, isUnsigned: true)
!881 = !DIEnumerator(name: "BUILT_IN_CEXP", value: 282, isUnsigned: true)
!882 = !DIEnumerator(name: "BUILT_IN_CEXPF", value: 283, isUnsigned: true)
!883 = !DIEnumerator(name: "BUILT_IN_CEXPL", value: 284, isUnsigned: true)
!884 = !DIEnumerator(name: "BUILT_IN_CEXPI", value: 285, isUnsigned: true)
!885 = !DIEnumerator(name: "BUILT_IN_CEXPIF", value: 286, isUnsigned: true)
!886 = !DIEnumerator(name: "BUILT_IN_CEXPIL", value: 287, isUnsigned: true)
!887 = !DIEnumerator(name: "BUILT_IN_CIMAG", value: 288, isUnsigned: true)
!888 = !DIEnumerator(name: "BUILT_IN_CIMAGF", value: 289, isUnsigned: true)
!889 = !DIEnumerator(name: "BUILT_IN_CIMAGL", value: 290, isUnsigned: true)
!890 = !DIEnumerator(name: "BUILT_IN_CLOG", value: 291, isUnsigned: true)
!891 = !DIEnumerator(name: "BUILT_IN_CLOGF", value: 292, isUnsigned: true)
!892 = !DIEnumerator(name: "BUILT_IN_CLOGL", value: 293, isUnsigned: true)
!893 = !DIEnumerator(name: "BUILT_IN_CLOG10", value: 294, isUnsigned: true)
!894 = !DIEnumerator(name: "BUILT_IN_CLOG10F", value: 295, isUnsigned: true)
!895 = !DIEnumerator(name: "BUILT_IN_CLOG10L", value: 296, isUnsigned: true)
!896 = !DIEnumerator(name: "BUILT_IN_CONJ", value: 297, isUnsigned: true)
!897 = !DIEnumerator(name: "BUILT_IN_CONJF", value: 298, isUnsigned: true)
!898 = !DIEnumerator(name: "BUILT_IN_CONJL", value: 299, isUnsigned: true)
!899 = !DIEnumerator(name: "BUILT_IN_CPOW", value: 300, isUnsigned: true)
!900 = !DIEnumerator(name: "BUILT_IN_CPOWF", value: 301, isUnsigned: true)
!901 = !DIEnumerator(name: "BUILT_IN_CPOWL", value: 302, isUnsigned: true)
!902 = !DIEnumerator(name: "BUILT_IN_CPROJ", value: 303, isUnsigned: true)
!903 = !DIEnumerator(name: "BUILT_IN_CPROJF", value: 304, isUnsigned: true)
!904 = !DIEnumerator(name: "BUILT_IN_CPROJL", value: 305, isUnsigned: true)
!905 = !DIEnumerator(name: "BUILT_IN_CREAL", value: 306, isUnsigned: true)
!906 = !DIEnumerator(name: "BUILT_IN_CREALF", value: 307, isUnsigned: true)
!907 = !DIEnumerator(name: "BUILT_IN_CREALL", value: 308, isUnsigned: true)
!908 = !DIEnumerator(name: "BUILT_IN_CSIN", value: 309, isUnsigned: true)
!909 = !DIEnumerator(name: "BUILT_IN_CSINF", value: 310, isUnsigned: true)
!910 = !DIEnumerator(name: "BUILT_IN_CSINH", value: 311, isUnsigned: true)
!911 = !DIEnumerator(name: "BUILT_IN_CSINHF", value: 312, isUnsigned: true)
!912 = !DIEnumerator(name: "BUILT_IN_CSINHL", value: 313, isUnsigned: true)
!913 = !DIEnumerator(name: "BUILT_IN_CSINL", value: 314, isUnsigned: true)
!914 = !DIEnumerator(name: "BUILT_IN_CSQRT", value: 315, isUnsigned: true)
!915 = !DIEnumerator(name: "BUILT_IN_CSQRTF", value: 316, isUnsigned: true)
!916 = !DIEnumerator(name: "BUILT_IN_CSQRTL", value: 317, isUnsigned: true)
!917 = !DIEnumerator(name: "BUILT_IN_CTAN", value: 318, isUnsigned: true)
!918 = !DIEnumerator(name: "BUILT_IN_CTANF", value: 319, isUnsigned: true)
!919 = !DIEnumerator(name: "BUILT_IN_CTANH", value: 320, isUnsigned: true)
!920 = !DIEnumerator(name: "BUILT_IN_CTANHF", value: 321, isUnsigned: true)
!921 = !DIEnumerator(name: "BUILT_IN_CTANHL", value: 322, isUnsigned: true)
!922 = !DIEnumerator(name: "BUILT_IN_CTANL", value: 323, isUnsigned: true)
!923 = !DIEnumerator(name: "BUILT_IN_BCMP", value: 324, isUnsigned: true)
!924 = !DIEnumerator(name: "BUILT_IN_BCOPY", value: 325, isUnsigned: true)
!925 = !DIEnumerator(name: "BUILT_IN_BZERO", value: 326, isUnsigned: true)
!926 = !DIEnumerator(name: "BUILT_IN_INDEX", value: 327, isUnsigned: true)
!927 = !DIEnumerator(name: "BUILT_IN_MEMCHR", value: 328, isUnsigned: true)
!928 = !DIEnumerator(name: "BUILT_IN_MEMCMP", value: 329, isUnsigned: true)
!929 = !DIEnumerator(name: "BUILT_IN_MEMCPY", value: 330, isUnsigned: true)
!930 = !DIEnumerator(name: "BUILT_IN_MEMMOVE", value: 331, isUnsigned: true)
!931 = !DIEnumerator(name: "BUILT_IN_MEMPCPY", value: 332, isUnsigned: true)
!932 = !DIEnumerator(name: "BUILT_IN_MEMSET", value: 333, isUnsigned: true)
!933 = !DIEnumerator(name: "BUILT_IN_RINDEX", value: 334, isUnsigned: true)
!934 = !DIEnumerator(name: "BUILT_IN_STPCPY", value: 335, isUnsigned: true)
!935 = !DIEnumerator(name: "BUILT_IN_STPNCPY", value: 336, isUnsigned: true)
!936 = !DIEnumerator(name: "BUILT_IN_STRCASECMP", value: 337, isUnsigned: true)
!937 = !DIEnumerator(name: "BUILT_IN_STRCAT", value: 338, isUnsigned: true)
!938 = !DIEnumerator(name: "BUILT_IN_STRCHR", value: 339, isUnsigned: true)
!939 = !DIEnumerator(name: "BUILT_IN_STRCMP", value: 340, isUnsigned: true)
!940 = !DIEnumerator(name: "BUILT_IN_STRCPY", value: 341, isUnsigned: true)
!941 = !DIEnumerator(name: "BUILT_IN_STRCSPN", value: 342, isUnsigned: true)
!942 = !DIEnumerator(name: "BUILT_IN_STRDUP", value: 343, isUnsigned: true)
!943 = !DIEnumerator(name: "BUILT_IN_STRNDUP", value: 344, isUnsigned: true)
!944 = !DIEnumerator(name: "BUILT_IN_STRLEN", value: 345, isUnsigned: true)
!945 = !DIEnumerator(name: "BUILT_IN_STRNCASECMP", value: 346, isUnsigned: true)
!946 = !DIEnumerator(name: "BUILT_IN_STRNCAT", value: 347, isUnsigned: true)
!947 = !DIEnumerator(name: "BUILT_IN_STRNCMP", value: 348, isUnsigned: true)
!948 = !DIEnumerator(name: "BUILT_IN_STRNCPY", value: 349, isUnsigned: true)
!949 = !DIEnumerator(name: "BUILT_IN_STRPBRK", value: 350, isUnsigned: true)
!950 = !DIEnumerator(name: "BUILT_IN_STRRCHR", value: 351, isUnsigned: true)
!951 = !DIEnumerator(name: "BUILT_IN_STRSPN", value: 352, isUnsigned: true)
!952 = !DIEnumerator(name: "BUILT_IN_STRSTR", value: 353, isUnsigned: true)
!953 = !DIEnumerator(name: "BUILT_IN_FPRINTF", value: 354, isUnsigned: true)
!954 = !DIEnumerator(name: "BUILT_IN_FPRINTF_UNLOCKED", value: 355, isUnsigned: true)
!955 = !DIEnumerator(name: "BUILT_IN_PUTC", value: 356, isUnsigned: true)
!956 = !DIEnumerator(name: "BUILT_IN_PUTC_UNLOCKED", value: 357, isUnsigned: true)
!957 = !DIEnumerator(name: "BUILT_IN_FPUTC", value: 358, isUnsigned: true)
!958 = !DIEnumerator(name: "BUILT_IN_FPUTC_UNLOCKED", value: 359, isUnsigned: true)
!959 = !DIEnumerator(name: "BUILT_IN_FPUTS", value: 360, isUnsigned: true)
!960 = !DIEnumerator(name: "BUILT_IN_FPUTS_UNLOCKED", value: 361, isUnsigned: true)
!961 = !DIEnumerator(name: "BUILT_IN_FSCANF", value: 362, isUnsigned: true)
!962 = !DIEnumerator(name: "BUILT_IN_FWRITE", value: 363, isUnsigned: true)
!963 = !DIEnumerator(name: "BUILT_IN_FWRITE_UNLOCKED", value: 364, isUnsigned: true)
!964 = !DIEnumerator(name: "BUILT_IN_PRINTF", value: 365, isUnsigned: true)
!965 = !DIEnumerator(name: "BUILT_IN_PRINTF_UNLOCKED", value: 366, isUnsigned: true)
!966 = !DIEnumerator(name: "BUILT_IN_PUTCHAR", value: 367, isUnsigned: true)
!967 = !DIEnumerator(name: "BUILT_IN_PUTCHAR_UNLOCKED", value: 368, isUnsigned: true)
!968 = !DIEnumerator(name: "BUILT_IN_PUTS", value: 369, isUnsigned: true)
!969 = !DIEnumerator(name: "BUILT_IN_PUTS_UNLOCKED", value: 370, isUnsigned: true)
!970 = !DIEnumerator(name: "BUILT_IN_SCANF", value: 371, isUnsigned: true)
!971 = !DIEnumerator(name: "BUILT_IN_SNPRINTF", value: 372, isUnsigned: true)
!972 = !DIEnumerator(name: "BUILT_IN_SPRINTF", value: 373, isUnsigned: true)
!973 = !DIEnumerator(name: "BUILT_IN_SSCANF", value: 374, isUnsigned: true)
!974 = !DIEnumerator(name: "BUILT_IN_VFPRINTF", value: 375, isUnsigned: true)
!975 = !DIEnumerator(name: "BUILT_IN_VFSCANF", value: 376, isUnsigned: true)
!976 = !DIEnumerator(name: "BUILT_IN_VPRINTF", value: 377, isUnsigned: true)
!977 = !DIEnumerator(name: "BUILT_IN_VSCANF", value: 378, isUnsigned: true)
!978 = !DIEnumerator(name: "BUILT_IN_VSNPRINTF", value: 379, isUnsigned: true)
!979 = !DIEnumerator(name: "BUILT_IN_VSPRINTF", value: 380, isUnsigned: true)
!980 = !DIEnumerator(name: "BUILT_IN_VSSCANF", value: 381, isUnsigned: true)
!981 = !DIEnumerator(name: "BUILT_IN_ISALNUM", value: 382, isUnsigned: true)
!982 = !DIEnumerator(name: "BUILT_IN_ISALPHA", value: 383, isUnsigned: true)
!983 = !DIEnumerator(name: "BUILT_IN_ISASCII", value: 384, isUnsigned: true)
!984 = !DIEnumerator(name: "BUILT_IN_ISBLANK", value: 385, isUnsigned: true)
!985 = !DIEnumerator(name: "BUILT_IN_ISCNTRL", value: 386, isUnsigned: true)
!986 = !DIEnumerator(name: "BUILT_IN_ISDIGIT", value: 387, isUnsigned: true)
!987 = !DIEnumerator(name: "BUILT_IN_ISGRAPH", value: 388, isUnsigned: true)
!988 = !DIEnumerator(name: "BUILT_IN_ISLOWER", value: 389, isUnsigned: true)
!989 = !DIEnumerator(name: "BUILT_IN_ISPRINT", value: 390, isUnsigned: true)
!990 = !DIEnumerator(name: "BUILT_IN_ISPUNCT", value: 391, isUnsigned: true)
!991 = !DIEnumerator(name: "BUILT_IN_ISSPACE", value: 392, isUnsigned: true)
!992 = !DIEnumerator(name: "BUILT_IN_ISUPPER", value: 393, isUnsigned: true)
!993 = !DIEnumerator(name: "BUILT_IN_ISXDIGIT", value: 394, isUnsigned: true)
!994 = !DIEnumerator(name: "BUILT_IN_TOASCII", value: 395, isUnsigned: true)
!995 = !DIEnumerator(name: "BUILT_IN_TOLOWER", value: 396, isUnsigned: true)
!996 = !DIEnumerator(name: "BUILT_IN_TOUPPER", value: 397, isUnsigned: true)
!997 = !DIEnumerator(name: "BUILT_IN_ISWALNUM", value: 398, isUnsigned: true)
!998 = !DIEnumerator(name: "BUILT_IN_ISWALPHA", value: 399, isUnsigned: true)
!999 = !DIEnumerator(name: "BUILT_IN_ISWBLANK", value: 400, isUnsigned: true)
!1000 = !DIEnumerator(name: "BUILT_IN_ISWCNTRL", value: 401, isUnsigned: true)
!1001 = !DIEnumerator(name: "BUILT_IN_ISWDIGIT", value: 402, isUnsigned: true)
!1002 = !DIEnumerator(name: "BUILT_IN_ISWGRAPH", value: 403, isUnsigned: true)
!1003 = !DIEnumerator(name: "BUILT_IN_ISWLOWER", value: 404, isUnsigned: true)
!1004 = !DIEnumerator(name: "BUILT_IN_ISWPRINT", value: 405, isUnsigned: true)
!1005 = !DIEnumerator(name: "BUILT_IN_ISWPUNCT", value: 406, isUnsigned: true)
!1006 = !DIEnumerator(name: "BUILT_IN_ISWSPACE", value: 407, isUnsigned: true)
!1007 = !DIEnumerator(name: "BUILT_IN_ISWUPPER", value: 408, isUnsigned: true)
!1008 = !DIEnumerator(name: "BUILT_IN_ISWXDIGIT", value: 409, isUnsigned: true)
!1009 = !DIEnumerator(name: "BUILT_IN_TOWLOWER", value: 410, isUnsigned: true)
!1010 = !DIEnumerator(name: "BUILT_IN_TOWUPPER", value: 411, isUnsigned: true)
!1011 = !DIEnumerator(name: "BUILT_IN_ABORT", value: 412, isUnsigned: true)
!1012 = !DIEnumerator(name: "BUILT_IN_ABS", value: 413, isUnsigned: true)
!1013 = !DIEnumerator(name: "BUILT_IN_AGGREGATE_INCOMING_ADDRESS", value: 414, isUnsigned: true)
!1014 = !DIEnumerator(name: "BUILT_IN_ALLOCA", value: 415, isUnsigned: true)
!1015 = !DIEnumerator(name: "BUILT_IN_APPLY", value: 416, isUnsigned: true)
!1016 = !DIEnumerator(name: "BUILT_IN_APPLY_ARGS", value: 417, isUnsigned: true)
!1017 = !DIEnumerator(name: "BUILT_IN_ARGS_INFO", value: 418, isUnsigned: true)
!1018 = !DIEnumerator(name: "BUILT_IN_BSWAP32", value: 419, isUnsigned: true)
!1019 = !DIEnumerator(name: "BUILT_IN_BSWAP64", value: 420, isUnsigned: true)
!1020 = !DIEnumerator(name: "BUILT_IN_CLEAR_CACHE", value: 421, isUnsigned: true)
!1021 = !DIEnumerator(name: "BUILT_IN_CALLOC", value: 422, isUnsigned: true)
!1022 = !DIEnumerator(name: "BUILT_IN_CLASSIFY_TYPE", value: 423, isUnsigned: true)
!1023 = !DIEnumerator(name: "BUILT_IN_CLZ", value: 424, isUnsigned: true)
!1024 = !DIEnumerator(name: "BUILT_IN_CLZIMAX", value: 425, isUnsigned: true)
!1025 = !DIEnumerator(name: "BUILT_IN_CLZL", value: 426, isUnsigned: true)
!1026 = !DIEnumerator(name: "BUILT_IN_CLZLL", value: 427, isUnsigned: true)
!1027 = !DIEnumerator(name: "BUILT_IN_CONSTANT_P", value: 428, isUnsigned: true)
!1028 = !DIEnumerator(name: "BUILT_IN_CTZ", value: 429, isUnsigned: true)
!1029 = !DIEnumerator(name: "BUILT_IN_CTZIMAX", value: 430, isUnsigned: true)
!1030 = !DIEnumerator(name: "BUILT_IN_CTZL", value: 431, isUnsigned: true)
!1031 = !DIEnumerator(name: "BUILT_IN_CTZLL", value: 432, isUnsigned: true)
!1032 = !DIEnumerator(name: "BUILT_IN_DCGETTEXT", value: 433, isUnsigned: true)
!1033 = !DIEnumerator(name: "BUILT_IN_DGETTEXT", value: 434, isUnsigned: true)
!1034 = !DIEnumerator(name: "BUILT_IN_DWARF_CFA", value: 435, isUnsigned: true)
!1035 = !DIEnumerator(name: "BUILT_IN_DWARF_SP_COLUMN", value: 436, isUnsigned: true)
!1036 = !DIEnumerator(name: "BUILT_IN_EH_RETURN", value: 437, isUnsigned: true)
!1037 = !DIEnumerator(name: "BUILT_IN_EH_RETURN_DATA_REGNO", value: 438, isUnsigned: true)
!1038 = !DIEnumerator(name: "BUILT_IN_EXECL", value: 439, isUnsigned: true)
!1039 = !DIEnumerator(name: "BUILT_IN_EXECLP", value: 440, isUnsigned: true)
!1040 = !DIEnumerator(name: "BUILT_IN_EXECLE", value: 441, isUnsigned: true)
!1041 = !DIEnumerator(name: "BUILT_IN_EXECV", value: 442, isUnsigned: true)
!1042 = !DIEnumerator(name: "BUILT_IN_EXECVP", value: 443, isUnsigned: true)
!1043 = !DIEnumerator(name: "BUILT_IN_EXECVE", value: 444, isUnsigned: true)
!1044 = !DIEnumerator(name: "BUILT_IN_EXIT", value: 445, isUnsigned: true)
!1045 = !DIEnumerator(name: "BUILT_IN_EXPECT", value: 446, isUnsigned: true)
!1046 = !DIEnumerator(name: "BUILT_IN_EXTEND_POINTER", value: 447, isUnsigned: true)
!1047 = !DIEnumerator(name: "BUILT_IN_EXTRACT_RETURN_ADDR", value: 448, isUnsigned: true)
!1048 = !DIEnumerator(name: "BUILT_IN_FFS", value: 449, isUnsigned: true)
!1049 = !DIEnumerator(name: "BUILT_IN_FFSIMAX", value: 450, isUnsigned: true)
!1050 = !DIEnumerator(name: "BUILT_IN_FFSL", value: 451, isUnsigned: true)
!1051 = !DIEnumerator(name: "BUILT_IN_FFSLL", value: 452, isUnsigned: true)
!1052 = !DIEnumerator(name: "BUILT_IN_FORK", value: 453, isUnsigned: true)
!1053 = !DIEnumerator(name: "BUILT_IN_FRAME_ADDRESS", value: 454, isUnsigned: true)
!1054 = !DIEnumerator(name: "BUILT_IN_FREE", value: 455, isUnsigned: true)
!1055 = !DIEnumerator(name: "BUILT_IN_FROB_RETURN_ADDR", value: 456, isUnsigned: true)
!1056 = !DIEnumerator(name: "BUILT_IN_GETTEXT", value: 457, isUnsigned: true)
!1057 = !DIEnumerator(name: "BUILT_IN_IMAXABS", value: 458, isUnsigned: true)
!1058 = !DIEnumerator(name: "BUILT_IN_INIT_DWARF_REG_SIZES", value: 459, isUnsigned: true)
!1059 = !DIEnumerator(name: "BUILT_IN_FINITE", value: 460, isUnsigned: true)
!1060 = !DIEnumerator(name: "BUILT_IN_FINITEF", value: 461, isUnsigned: true)
!1061 = !DIEnumerator(name: "BUILT_IN_FINITEL", value: 462, isUnsigned: true)
!1062 = !DIEnumerator(name: "BUILT_IN_FINITED32", value: 463, isUnsigned: true)
!1063 = !DIEnumerator(name: "BUILT_IN_FINITED64", value: 464, isUnsigned: true)
!1064 = !DIEnumerator(name: "BUILT_IN_FINITED128", value: 465, isUnsigned: true)
!1065 = !DIEnumerator(name: "BUILT_IN_FPCLASSIFY", value: 466, isUnsigned: true)
!1066 = !DIEnumerator(name: "BUILT_IN_ISFINITE", value: 467, isUnsigned: true)
!1067 = !DIEnumerator(name: "BUILT_IN_ISINF_SIGN", value: 468, isUnsigned: true)
!1068 = !DIEnumerator(name: "BUILT_IN_ISINF", value: 469, isUnsigned: true)
!1069 = !DIEnumerator(name: "BUILT_IN_ISINFF", value: 470, isUnsigned: true)
!1070 = !DIEnumerator(name: "BUILT_IN_ISINFL", value: 471, isUnsigned: true)
!1071 = !DIEnumerator(name: "BUILT_IN_ISINFD32", value: 472, isUnsigned: true)
!1072 = !DIEnumerator(name: "BUILT_IN_ISINFD64", value: 473, isUnsigned: true)
!1073 = !DIEnumerator(name: "BUILT_IN_ISINFD128", value: 474, isUnsigned: true)
!1074 = !DIEnumerator(name: "BUILT_IN_ISNAN", value: 475, isUnsigned: true)
!1075 = !DIEnumerator(name: "BUILT_IN_ISNANF", value: 476, isUnsigned: true)
!1076 = !DIEnumerator(name: "BUILT_IN_ISNANL", value: 477, isUnsigned: true)
!1077 = !DIEnumerator(name: "BUILT_IN_ISNAND32", value: 478, isUnsigned: true)
!1078 = !DIEnumerator(name: "BUILT_IN_ISNAND64", value: 479, isUnsigned: true)
!1079 = !DIEnumerator(name: "BUILT_IN_ISNAND128", value: 480, isUnsigned: true)
!1080 = !DIEnumerator(name: "BUILT_IN_ISNORMAL", value: 481, isUnsigned: true)
!1081 = !DIEnumerator(name: "BUILT_IN_ISGREATER", value: 482, isUnsigned: true)
!1082 = !DIEnumerator(name: "BUILT_IN_ISGREATEREQUAL", value: 483, isUnsigned: true)
!1083 = !DIEnumerator(name: "BUILT_IN_ISLESS", value: 484, isUnsigned: true)
!1084 = !DIEnumerator(name: "BUILT_IN_ISLESSEQUAL", value: 485, isUnsigned: true)
!1085 = !DIEnumerator(name: "BUILT_IN_ISLESSGREATER", value: 486, isUnsigned: true)
!1086 = !DIEnumerator(name: "BUILT_IN_ISUNORDERED", value: 487, isUnsigned: true)
!1087 = !DIEnumerator(name: "BUILT_IN_LABS", value: 488, isUnsigned: true)
!1088 = !DIEnumerator(name: "BUILT_IN_LLABS", value: 489, isUnsigned: true)
!1089 = !DIEnumerator(name: "BUILT_IN_LONGJMP", value: 490, isUnsigned: true)
!1090 = !DIEnumerator(name: "BUILT_IN_MALLOC", value: 491, isUnsigned: true)
!1091 = !DIEnumerator(name: "BUILT_IN_NEXT_ARG", value: 492, isUnsigned: true)
!1092 = !DIEnumerator(name: "BUILT_IN_PARITY", value: 493, isUnsigned: true)
!1093 = !DIEnumerator(name: "BUILT_IN_PARITYIMAX", value: 494, isUnsigned: true)
!1094 = !DIEnumerator(name: "BUILT_IN_PARITYL", value: 495, isUnsigned: true)
!1095 = !DIEnumerator(name: "BUILT_IN_PARITYLL", value: 496, isUnsigned: true)
!1096 = !DIEnumerator(name: "BUILT_IN_POPCOUNT", value: 497, isUnsigned: true)
!1097 = !DIEnumerator(name: "BUILT_IN_POPCOUNTIMAX", value: 498, isUnsigned: true)
!1098 = !DIEnumerator(name: "BUILT_IN_POPCOUNTL", value: 499, isUnsigned: true)
!1099 = !DIEnumerator(name: "BUILT_IN_POPCOUNTLL", value: 500, isUnsigned: true)
!1100 = !DIEnumerator(name: "BUILT_IN_PREFETCH", value: 501, isUnsigned: true)
!1101 = !DIEnumerator(name: "BUILT_IN_REALLOC", value: 502, isUnsigned: true)
!1102 = !DIEnumerator(name: "BUILT_IN_RETURN", value: 503, isUnsigned: true)
!1103 = !DIEnumerator(name: "BUILT_IN_RETURN_ADDRESS", value: 504, isUnsigned: true)
!1104 = !DIEnumerator(name: "BUILT_IN_SAVEREGS", value: 505, isUnsigned: true)
!1105 = !DIEnumerator(name: "BUILT_IN_SETJMP", value: 506, isUnsigned: true)
!1106 = !DIEnumerator(name: "BUILT_IN_STRFMON", value: 507, isUnsigned: true)
!1107 = !DIEnumerator(name: "BUILT_IN_STRFTIME", value: 508, isUnsigned: true)
!1108 = !DIEnumerator(name: "BUILT_IN_TRAP", value: 509, isUnsigned: true)
!1109 = !DIEnumerator(name: "BUILT_IN_UNREACHABLE", value: 510, isUnsigned: true)
!1110 = !DIEnumerator(name: "BUILT_IN_UNWIND_INIT", value: 511, isUnsigned: true)
!1111 = !DIEnumerator(name: "BUILT_IN_UPDATE_SETJMP_BUF", value: 512, isUnsigned: true)
!1112 = !DIEnumerator(name: "BUILT_IN_VA_COPY", value: 513, isUnsigned: true)
!1113 = !DIEnumerator(name: "BUILT_IN_VA_END", value: 514, isUnsigned: true)
!1114 = !DIEnumerator(name: "BUILT_IN_VA_START", value: 515, isUnsigned: true)
!1115 = !DIEnumerator(name: "BUILT_IN_VA_ARG_PACK", value: 516, isUnsigned: true)
!1116 = !DIEnumerator(name: "BUILT_IN_VA_ARG_PACK_LEN", value: 517, isUnsigned: true)
!1117 = !DIEnumerator(name: "BUILT_IN__EXIT", value: 518, isUnsigned: true)
!1118 = !DIEnumerator(name: "BUILT_IN__EXIT2", value: 519, isUnsigned: true)
!1119 = !DIEnumerator(name: "BUILT_IN_INIT_TRAMPOLINE", value: 520, isUnsigned: true)
!1120 = !DIEnumerator(name: "BUILT_IN_ADJUST_TRAMPOLINE", value: 521, isUnsigned: true)
!1121 = !DIEnumerator(name: "BUILT_IN_NONLOCAL_GOTO", value: 522, isUnsigned: true)
!1122 = !DIEnumerator(name: "BUILT_IN_SETJMP_SETUP", value: 523, isUnsigned: true)
!1123 = !DIEnumerator(name: "BUILT_IN_SETJMP_DISPATCHER", value: 524, isUnsigned: true)
!1124 = !DIEnumerator(name: "BUILT_IN_SETJMP_RECEIVER", value: 525, isUnsigned: true)
!1125 = !DIEnumerator(name: "BUILT_IN_STACK_SAVE", value: 526, isUnsigned: true)
!1126 = !DIEnumerator(name: "BUILT_IN_STACK_RESTORE", value: 527, isUnsigned: true)
!1127 = !DIEnumerator(name: "BUILT_IN_OBJECT_SIZE", value: 528, isUnsigned: true)
!1128 = !DIEnumerator(name: "BUILT_IN_MEMCPY_CHK", value: 529, isUnsigned: true)
!1129 = !DIEnumerator(name: "BUILT_IN_MEMMOVE_CHK", value: 530, isUnsigned: true)
!1130 = !DIEnumerator(name: "BUILT_IN_MEMPCPY_CHK", value: 531, isUnsigned: true)
!1131 = !DIEnumerator(name: "BUILT_IN_MEMSET_CHK", value: 532, isUnsigned: true)
!1132 = !DIEnumerator(name: "BUILT_IN_STPCPY_CHK", value: 533, isUnsigned: true)
!1133 = !DIEnumerator(name: "BUILT_IN_STRCAT_CHK", value: 534, isUnsigned: true)
!1134 = !DIEnumerator(name: "BUILT_IN_STRCPY_CHK", value: 535, isUnsigned: true)
!1135 = !DIEnumerator(name: "BUILT_IN_STRNCAT_CHK", value: 536, isUnsigned: true)
!1136 = !DIEnumerator(name: "BUILT_IN_STRNCPY_CHK", value: 537, isUnsigned: true)
!1137 = !DIEnumerator(name: "BUILT_IN_SNPRINTF_CHK", value: 538, isUnsigned: true)
!1138 = !DIEnumerator(name: "BUILT_IN_SPRINTF_CHK", value: 539, isUnsigned: true)
!1139 = !DIEnumerator(name: "BUILT_IN_VSNPRINTF_CHK", value: 540, isUnsigned: true)
!1140 = !DIEnumerator(name: "BUILT_IN_VSPRINTF_CHK", value: 541, isUnsigned: true)
!1141 = !DIEnumerator(name: "BUILT_IN_FPRINTF_CHK", value: 542, isUnsigned: true)
!1142 = !DIEnumerator(name: "BUILT_IN_PRINTF_CHK", value: 543, isUnsigned: true)
!1143 = !DIEnumerator(name: "BUILT_IN_VFPRINTF_CHK", value: 544, isUnsigned: true)
!1144 = !DIEnumerator(name: "BUILT_IN_VPRINTF_CHK", value: 545, isUnsigned: true)
!1145 = !DIEnumerator(name: "BUILT_IN_PROFILE_FUNC_ENTER", value: 546, isUnsigned: true)
!1146 = !DIEnumerator(name: "BUILT_IN_PROFILE_FUNC_EXIT", value: 547, isUnsigned: true)
!1147 = !DIEnumerator(name: "BUILT_IN_EMUTLS_GET_ADDRESS", value: 548, isUnsigned: true)
!1148 = !DIEnumerator(name: "BUILT_IN_EMUTLS_REGISTER_COMMON", value: 549, isUnsigned: true)
!1149 = !DIEnumerator(name: "BUILT_IN_UNWIND_RESUME", value: 550, isUnsigned: true)
!1150 = !DIEnumerator(name: "BUILT_IN_CXA_END_CLEANUP", value: 551, isUnsigned: true)
!1151 = !DIEnumerator(name: "BUILT_IN_EH_POINTER", value: 552, isUnsigned: true)
!1152 = !DIEnumerator(name: "BUILT_IN_EH_FILTER", value: 553, isUnsigned: true)
!1153 = !DIEnumerator(name: "BUILT_IN_EH_COPY_VALUES", value: 554, isUnsigned: true)
!1154 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_N", value: 555, isUnsigned: true)
!1155 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_1", value: 556, isUnsigned: true)
!1156 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_2", value: 557, isUnsigned: true)
!1157 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_4", value: 558, isUnsigned: true)
!1158 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_8", value: 559, isUnsigned: true)
!1159 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_16", value: 560, isUnsigned: true)
!1160 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_N", value: 561, isUnsigned: true)
!1161 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_1", value: 562, isUnsigned: true)
!1162 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_2", value: 563, isUnsigned: true)
!1163 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_4", value: 564, isUnsigned: true)
!1164 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_8", value: 565, isUnsigned: true)
!1165 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_16", value: 566, isUnsigned: true)
!1166 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_N", value: 567, isUnsigned: true)
!1167 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_1", value: 568, isUnsigned: true)
!1168 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_2", value: 569, isUnsigned: true)
!1169 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_4", value: 570, isUnsigned: true)
!1170 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_8", value: 571, isUnsigned: true)
!1171 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_16", value: 572, isUnsigned: true)
!1172 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_N", value: 573, isUnsigned: true)
!1173 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_1", value: 574, isUnsigned: true)
!1174 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_2", value: 575, isUnsigned: true)
!1175 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_4", value: 576, isUnsigned: true)
!1176 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_8", value: 577, isUnsigned: true)
!1177 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_16", value: 578, isUnsigned: true)
!1178 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_N", value: 579, isUnsigned: true)
!1179 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_1", value: 580, isUnsigned: true)
!1180 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_2", value: 581, isUnsigned: true)
!1181 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_4", value: 582, isUnsigned: true)
!1182 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_8", value: 583, isUnsigned: true)
!1183 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_16", value: 584, isUnsigned: true)
!1184 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_N", value: 585, isUnsigned: true)
!1185 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_1", value: 586, isUnsigned: true)
!1186 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_2", value: 587, isUnsigned: true)
!1187 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_4", value: 588, isUnsigned: true)
!1188 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_8", value: 589, isUnsigned: true)
!1189 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_16", value: 590, isUnsigned: true)
!1190 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_N", value: 591, isUnsigned: true)
!1191 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_1", value: 592, isUnsigned: true)
!1192 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_2", value: 593, isUnsigned: true)
!1193 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_4", value: 594, isUnsigned: true)
!1194 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_8", value: 595, isUnsigned: true)
!1195 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_16", value: 596, isUnsigned: true)
!1196 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_N", value: 597, isUnsigned: true)
!1197 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_1", value: 598, isUnsigned: true)
!1198 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_2", value: 599, isUnsigned: true)
!1199 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_4", value: 600, isUnsigned: true)
!1200 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_8", value: 601, isUnsigned: true)
!1201 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_16", value: 602, isUnsigned: true)
!1202 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_N", value: 603, isUnsigned: true)
!1203 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_1", value: 604, isUnsigned: true)
!1204 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_2", value: 605, isUnsigned: true)
!1205 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_4", value: 606, isUnsigned: true)
!1206 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_8", value: 607, isUnsigned: true)
!1207 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_16", value: 608, isUnsigned: true)
!1208 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_N", value: 609, isUnsigned: true)
!1209 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_1", value: 610, isUnsigned: true)
!1210 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_2", value: 611, isUnsigned: true)
!1211 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_4", value: 612, isUnsigned: true)
!1212 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_8", value: 613, isUnsigned: true)
!1213 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_16", value: 614, isUnsigned: true)
!1214 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_N", value: 615, isUnsigned: true)
!1215 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_1", value: 616, isUnsigned: true)
!1216 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_2", value: 617, isUnsigned: true)
!1217 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_4", value: 618, isUnsigned: true)
!1218 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_8", value: 619, isUnsigned: true)
!1219 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_16", value: 620, isUnsigned: true)
!1220 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_N", value: 621, isUnsigned: true)
!1221 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_1", value: 622, isUnsigned: true)
!1222 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_2", value: 623, isUnsigned: true)
!1223 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_4", value: 624, isUnsigned: true)
!1224 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_8", value: 625, isUnsigned: true)
!1225 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_16", value: 626, isUnsigned: true)
!1226 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_N", value: 627, isUnsigned: true)
!1227 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_1", value: 628, isUnsigned: true)
!1228 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_2", value: 629, isUnsigned: true)
!1229 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_4", value: 630, isUnsigned: true)
!1230 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_8", value: 631, isUnsigned: true)
!1231 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_16", value: 632, isUnsigned: true)
!1232 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_N", value: 633, isUnsigned: true)
!1233 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_1", value: 634, isUnsigned: true)
!1234 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_2", value: 635, isUnsigned: true)
!1235 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_4", value: 636, isUnsigned: true)
!1236 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_8", value: 637, isUnsigned: true)
!1237 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_16", value: 638, isUnsigned: true)
!1238 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_N", value: 639, isUnsigned: true)
!1239 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_1", value: 640, isUnsigned: true)
!1240 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_2", value: 641, isUnsigned: true)
!1241 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_4", value: 642, isUnsigned: true)
!1242 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_8", value: 643, isUnsigned: true)
!1243 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_16", value: 644, isUnsigned: true)
!1244 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_N", value: 645, isUnsigned: true)
!1245 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_1", value: 646, isUnsigned: true)
!1246 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_2", value: 647, isUnsigned: true)
!1247 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_4", value: 648, isUnsigned: true)
!1248 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_8", value: 649, isUnsigned: true)
!1249 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_16", value: 650, isUnsigned: true)
!1250 = !DIEnumerator(name: "BUILT_IN_SYNCHRONIZE", value: 651, isUnsigned: true)
!1251 = !DIEnumerator(name: "BUILT_IN_OMP_GET_THREAD_NUM", value: 652, isUnsigned: true)
!1252 = !DIEnumerator(name: "BUILT_IN_OMP_GET_NUM_THREADS", value: 653, isUnsigned: true)
!1253 = !DIEnumerator(name: "BUILT_IN_GOMP_ATOMIC_START", value: 654, isUnsigned: true)
!1254 = !DIEnumerator(name: "BUILT_IN_GOMP_ATOMIC_END", value: 655, isUnsigned: true)
!1255 = !DIEnumerator(name: "BUILT_IN_GOMP_BARRIER", value: 656, isUnsigned: true)
!1256 = !DIEnumerator(name: "BUILT_IN_GOMP_TASKWAIT", value: 657, isUnsigned: true)
!1257 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_START", value: 658, isUnsigned: true)
!1258 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_END", value: 659, isUnsigned: true)
!1259 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_NAME_START", value: 660, isUnsigned: true)
!1260 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_NAME_END", value: 661, isUnsigned: true)
!1261 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_STATIC_START", value: 662, isUnsigned: true)
!1262 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_DYNAMIC_START", value: 663, isUnsigned: true)
!1263 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_GUIDED_START", value: 664, isUnsigned: true)
!1264 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_RUNTIME_START", value: 665, isUnsigned: true)
!1265 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_STATIC_START", value: 666, isUnsigned: true)
!1266 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_START", value: 667, isUnsigned: true)
!1267 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_START", value: 668, isUnsigned: true)
!1268 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_START", value: 669, isUnsigned: true)
!1269 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_STATIC_NEXT", value: 670, isUnsigned: true)
!1270 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_DYNAMIC_NEXT", value: 671, isUnsigned: true)
!1271 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_GUIDED_NEXT", value: 672, isUnsigned: true)
!1272 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_RUNTIME_NEXT", value: 673, isUnsigned: true)
!1273 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_STATIC_NEXT", value: 674, isUnsigned: true)
!1274 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_NEXT", value: 675, isUnsigned: true)
!1275 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_NEXT", value: 676, isUnsigned: true)
!1276 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_NEXT", value: 677, isUnsigned: true)
!1277 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_STATIC_START", value: 678, isUnsigned: true)
!1278 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_START", value: 679, isUnsigned: true)
!1279 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_GUIDED_START", value: 680, isUnsigned: true)
!1280 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_RUNTIME_START", value: 681, isUnsigned: true)
!1281 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_START", value: 682, isUnsigned: true)
!1282 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_START", value: 683, isUnsigned: true)
!1283 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_START", value: 684, isUnsigned: true)
!1284 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_START", value: 685, isUnsigned: true)
!1285 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_STATIC_NEXT", value: 686, isUnsigned: true)
!1286 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_NEXT", value: 687, isUnsigned: true)
!1287 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_GUIDED_NEXT", value: 688, isUnsigned: true)
!1288 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_RUNTIME_NEXT", value: 689, isUnsigned: true)
!1289 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_NEXT", value: 690, isUnsigned: true)
!1290 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_NEXT", value: 691, isUnsigned: true)
!1291 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_NEXT", value: 692, isUnsigned: true)
!1292 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_NEXT", value: 693, isUnsigned: true)
!1293 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_STATIC_START", value: 694, isUnsigned: true)
!1294 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_DYNAMIC_START", value: 695, isUnsigned: true)
!1295 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_GUIDED_START", value: 696, isUnsigned: true)
!1296 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_RUNTIME_START", value: 697, isUnsigned: true)
!1297 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_END", value: 698, isUnsigned: true)
!1298 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_END_NOWAIT", value: 699, isUnsigned: true)
!1299 = !DIEnumerator(name: "BUILT_IN_GOMP_ORDERED_START", value: 700, isUnsigned: true)
!1300 = !DIEnumerator(name: "BUILT_IN_GOMP_ORDERED_END", value: 701, isUnsigned: true)
!1301 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_START", value: 702, isUnsigned: true)
!1302 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_END", value: 703, isUnsigned: true)
!1303 = !DIEnumerator(name: "BUILT_IN_GOMP_TASK", value: 704, isUnsigned: true)
!1304 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_START", value: 705, isUnsigned: true)
!1305 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_NEXT", value: 706, isUnsigned: true)
!1306 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_SECTIONS_START", value: 707, isUnsigned: true)
!1307 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_END", value: 708, isUnsigned: true)
!1308 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_END_NOWAIT", value: 709, isUnsigned: true)
!1309 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_START", value: 710, isUnsigned: true)
!1310 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_COPY_START", value: 711, isUnsigned: true)
!1311 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_COPY_END", value: 712, isUnsigned: true)
!1312 = !DIEnumerator(name: "BUILT_IN_COMPLEX_MUL_MIN", value: 713, isUnsigned: true)
!1313 = !DIEnumerator(name: "BUILT_IN_COMPLEX_MUL_MAX", value: 716, isUnsigned: true)
!1314 = !DIEnumerator(name: "BUILT_IN_COMPLEX_DIV_MIN", value: 717, isUnsigned: true)
!1315 = !DIEnumerator(name: "BUILT_IN_COMPLEX_DIV_MAX", value: 720, isUnsigned: true)
!1316 = !DIEnumerator(name: "END_BUILTINS", value: 721, isUnsigned: true)
!1317 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !391, line: 727, baseType: !7, size: 32, elements: !1318)
!1318 = !{!1319, !1320, !1321, !1322, !1323, !1324, !1325, !1326, !1327, !1328, !1329, !1330, !1331, !1332, !1333, !1334, !1335, !1336, !1337, !1338, !1339, !1340, !1341, !1342}
!1319 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!1320 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!1321 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!1322 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!1323 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!1324 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!1325 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!1326 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!1327 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!1328 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!1329 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!1330 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!1331 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!1332 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!1333 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!1334 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!1335 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!1336 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!1337 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!1338 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!1339 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!1340 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!1341 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!1342 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!1343 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "cdi_direction", file: !343, line: 912, baseType: !7, size: 32, elements: !1344)
!1344 = !{!1345, !1346}
!1345 = !DIEnumerator(name: "CDI_DOMINATORS", value: 1, isUnsigned: true)
!1346 = !DIEnumerator(name: "CDI_POST_DOMINATORS", value: 2, isUnsigned: true)
!1347 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ssa_op_iter_type", file: !1348, line: 119, baseType: !7, size: 32, elements: !1349)
!1348 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1349 = !{!1350, !1351, !1352, !1353}
!1350 = !DIEnumerator(name: "ssa_op_iter_none", value: 0, isUnsigned: true)
!1351 = !DIEnumerator(name: "ssa_op_iter_tree", value: 1, isUnsigned: true)
!1352 = !DIEnumerator(name: "ssa_op_iter_use", value: 2, isUnsigned: true)
!1353 = !DIEnumerator(name: "ssa_op_iter_def", value: 3, isUnsigned: true)
!1354 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "compiler_param", file: !1355, line: 82, baseType: !7, size: 32, elements: !1356)
!1355 = !DIFile(filename: "./params.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1356 = !{!1357, !1358, !1359, !1360, !1361, !1362, !1363, !1364, !1365, !1366, !1367, !1368, !1369, !1370, !1371, !1372, !1373, !1374, !1375, !1376, !1377, !1378, !1379, !1380, !1381, !1382, !1383, !1384, !1385, !1386, !1387, !1388, !1389, !1390, !1391, !1392, !1393, !1394, !1395, !1396, !1397, !1398, !1399, !1400, !1401, !1402, !1403, !1404, !1405, !1406, !1407, !1408, !1409, !1410, !1411, !1412, !1413, !1414, !1415, !1416, !1417, !1418, !1419, !1420, !1421, !1422, !1423, !1424, !1425, !1426, !1427, !1428, !1429, !1430, !1431, !1432, !1433, !1434, !1435, !1436, !1437, !1438, !1439, !1440, !1441, !1442, !1443, !1444, !1445, !1446, !1447, !1448, !1449, !1450, !1451, !1452, !1453, !1454, !1455, !1456, !1457, !1458, !1459, !1460, !1461, !1462, !1463, !1464, !1465, !1466, !1467, !1468, !1469, !1470, !1471, !1472, !1473, !1474, !1475, !1476}
!1357 = !DIEnumerator(name: "PARAM_STRUCT_REORG_COLD_STRUCT_RATIO", value: 0, isUnsigned: true)
!1358 = !DIEnumerator(name: "PARAM_PREDICTABLE_BRANCH_OUTCOME", value: 1, isUnsigned: true)
!1359 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_SINGLE", value: 2, isUnsigned: true)
!1360 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_AUTO", value: 3, isUnsigned: true)
!1361 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE", value: 4, isUnsigned: true)
!1362 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE_AUTO", value: 5, isUnsigned: true)
!1363 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH", value: 6, isUnsigned: true)
!1364 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH_AUTO", value: 7, isUnsigned: true)
!1365 = !DIEnumerator(name: "PARAM_MIN_INLINE_RECURSIVE_PROBABILITY", value: 8, isUnsigned: true)
!1366 = !DIEnumerator(name: "PARAM_EARLY_INLINER_MAX_ITERATIONS", value: 9, isUnsigned: true)
!1367 = !DIEnumerator(name: "PARAM_MAX_VARIABLE_EXPANSIONS", value: 10, isUnsigned: true)
!1368 = !DIEnumerator(name: "PARAM_MIN_VECT_LOOP_BOUND", value: 11, isUnsigned: true)
!1369 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_INSN_SEARCH", value: 12, isUnsigned: true)
!1370 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_LIVE_SEARCH", value: 13, isUnsigned: true)
!1371 = !DIEnumerator(name: "PARAM_MAX_PENDING_LIST_LENGTH", value: 14, isUnsigned: true)
!1372 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_INSNS", value: 15, isUnsigned: true)
!1373 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_GROWTH", value: 16, isUnsigned: true)
!1374 = !DIEnumerator(name: "PARAM_LARGE_UNIT_INSNS", value: 17, isUnsigned: true)
!1375 = !DIEnumerator(name: "PARAM_INLINE_UNIT_GROWTH", value: 18, isUnsigned: true)
!1376 = !DIEnumerator(name: "PARAM_IPCP_UNIT_GROWTH", value: 19, isUnsigned: true)
!1377 = !DIEnumerator(name: "PARAM_EARLY_INLINING_INSNS", value: 20, isUnsigned: true)
!1378 = !DIEnumerator(name: "PARAM_LARGE_STACK_FRAME", value: 21, isUnsigned: true)
!1379 = !DIEnumerator(name: "PARAM_STACK_FRAME_GROWTH", value: 22, isUnsigned: true)
!1380 = !DIEnumerator(name: "PARAM_MAX_GCSE_MEMORY", value: 23, isUnsigned: true)
!1381 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_PARTIAL_FRACTION", value: 24, isUnsigned: true)
!1382 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_CRITICAL_FRACTION", value: 25, isUnsigned: true)
!1383 = !DIEnumerator(name: "PARAM_MAX_UNROLLED_INSNS", value: 26, isUnsigned: true)
!1384 = !DIEnumerator(name: "PARAM_MAX_AVERAGE_UNROLLED_INSNS", value: 27, isUnsigned: true)
!1385 = !DIEnumerator(name: "PARAM_MAX_UNROLL_TIMES", value: 28, isUnsigned: true)
!1386 = !DIEnumerator(name: "PARAM_MAX_PEELED_INSNS", value: 29, isUnsigned: true)
!1387 = !DIEnumerator(name: "PARAM_MAX_PEEL_TIMES", value: 30, isUnsigned: true)
!1388 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEELED_INSNS", value: 31, isUnsigned: true)
!1389 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEEL_TIMES", value: 32, isUnsigned: true)
!1390 = !DIEnumerator(name: "PARAM_MAX_ONCE_PEELED_INSNS", value: 33, isUnsigned: true)
!1391 = !DIEnumerator(name: "PARAM_MAX_UNROLL_ITERATIONS", value: 34, isUnsigned: true)
!1392 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_INSNS", value: 35, isUnsigned: true)
!1393 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_LEVEL", value: 36, isUnsigned: true)
!1394 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_TO_TRACK", value: 37, isUnsigned: true)
!1395 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_COMPUTATION_COST", value: 38, isUnsigned: true)
!1396 = !DIEnumerator(name: "PARAM_SMS_MAX_II_FACTOR", value: 39, isUnsigned: true)
!1397 = !DIEnumerator(name: "PARAM_SMS_DFA_HISTORY", value: 40, isUnsigned: true)
!1398 = !DIEnumerator(name: "PARAM_SMS_LOOP_AVERAGE_COUNT_THRESHOLD", value: 41, isUnsigned: true)
!1399 = !DIEnumerator(name: "HOT_BB_COUNT_FRACTION", value: 42, isUnsigned: true)
!1400 = !DIEnumerator(name: "HOT_BB_FREQUENCY_FRACTION", value: 43, isUnsigned: true)
!1401 = !DIEnumerator(name: "PARAM_ALIGN_THRESHOLD", value: 44, isUnsigned: true)
!1402 = !DIEnumerator(name: "PARAM_ALIGN_LOOP_ITERATIONS", value: 45, isUnsigned: true)
!1403 = !DIEnumerator(name: "PARAM_MAX_PREDICTED_ITERATIONS", value: 46, isUnsigned: true)
!1404 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE_FEEDBACK", value: 47, isUnsigned: true)
!1405 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE", value: 48, isUnsigned: true)
!1406 = !DIEnumerator(name: "TRACER_MAX_CODE_GROWTH", value: 49, isUnsigned: true)
!1407 = !DIEnumerator(name: "TRACER_MIN_BRANCH_RATIO", value: 50, isUnsigned: true)
!1408 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY_FEEDBACK", value: 51, isUnsigned: true)
!1409 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY", value: 52, isUnsigned: true)
!1410 = !DIEnumerator(name: "PARAM_MAX_CROSSJUMP_EDGES", value: 53, isUnsigned: true)
!1411 = !DIEnumerator(name: "PARAM_MIN_CROSSJUMP_INSNS", value: 54, isUnsigned: true)
!1412 = !DIEnumerator(name: "PARAM_MAX_GROW_COPY_BB_INSNS", value: 55, isUnsigned: true)
!1413 = !DIEnumerator(name: "PARAM_MAX_GOTO_DUPLICATION_INSNS", value: 56, isUnsigned: true)
!1414 = !DIEnumerator(name: "PARAM_MAX_CSE_PATH_LENGTH", value: 57, isUnsigned: true)
!1415 = !DIEnumerator(name: "PARAM_MAX_CSE_INSNS", value: 58, isUnsigned: true)
!1416 = !DIEnumerator(name: "PARAM_LIM_EXPENSIVE", value: 59, isUnsigned: true)
!1417 = !DIEnumerator(name: "PARAM_IV_CONSIDER_ALL_CANDIDATES_BOUND", value: 60, isUnsigned: true)
!1418 = !DIEnumerator(name: "PARAM_IV_MAX_CONSIDERED_USES", value: 61, isUnsigned: true)
!1419 = !DIEnumerator(name: "PARAM_IV_ALWAYS_PRUNE_CAND_SET_BOUND", value: 62, isUnsigned: true)
!1420 = !DIEnumerator(name: "PARAM_SCEV_MAX_EXPR_SIZE", value: 63, isUnsigned: true)
!1421 = !DIEnumerator(name: "PARAM_OMEGA_MAX_VARS", value: 64, isUnsigned: true)
!1422 = !DIEnumerator(name: "PARAM_OMEGA_MAX_GEQS", value: 65, isUnsigned: true)
!1423 = !DIEnumerator(name: "PARAM_OMEGA_MAX_EQS", value: 66, isUnsigned: true)
!1424 = !DIEnumerator(name: "PARAM_OMEGA_MAX_WILD_CARDS", value: 67, isUnsigned: true)
!1425 = !DIEnumerator(name: "PARAM_OMEGA_HASH_TABLE_SIZE", value: 68, isUnsigned: true)
!1426 = !DIEnumerator(name: "PARAM_OMEGA_MAX_KEYS", value: 69, isUnsigned: true)
!1427 = !DIEnumerator(name: "PARAM_OMEGA_ELIMINATE_REDUNDANT_CONSTRAINTS", value: 70, isUnsigned: true)
!1428 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIGNMENT_CHECKS", value: 71, isUnsigned: true)
!1429 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIAS_CHECKS", value: 72, isUnsigned: true)
!1430 = !DIEnumerator(name: "PARAM_MAX_CSELIB_MEMORY_LOCATIONS", value: 73, isUnsigned: true)
!1431 = !DIEnumerator(name: "GGC_MIN_EXPAND", value: 74, isUnsigned: true)
!1432 = !DIEnumerator(name: "GGC_MIN_HEAPSIZE", value: 75, isUnsigned: true)
!1433 = !DIEnumerator(name: "PARAM_MAX_RELOAD_SEARCH_INSNS", value: 76, isUnsigned: true)
!1434 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_BLOCKS", value: 77, isUnsigned: true)
!1435 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_INSNS", value: 78, isUnsigned: true)
!1436 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_BLOCKS", value: 79, isUnsigned: true)
!1437 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_INSNS", value: 80, isUnsigned: true)
!1438 = !DIEnumerator(name: "PARAM_MIN_SPEC_PROB", value: 81, isUnsigned: true)
!1439 = !DIEnumerator(name: "PARAM_MAX_SCHED_EXTEND_REGIONS_ITERS", value: 82, isUnsigned: true)
!1440 = !DIEnumerator(name: "PARAM_MAX_SCHED_INSN_CONFLICT_DELAY", value: 83, isUnsigned: true)
!1441 = !DIEnumerator(name: "PARAM_SCHED_SPEC_PROB_CUTOFF", value: 84, isUnsigned: true)
!1442 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_LOOKAHEAD", value: 85, isUnsigned: true)
!1443 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_SCHED_TIMES", value: 86, isUnsigned: true)
!1444 = !DIEnumerator(name: "PARAM_SELSCHED_INSNS_TO_RENAME", value: 87, isUnsigned: true)
!1445 = !DIEnumerator(name: "PARAM_SCHED_MEM_TRUE_DEP_COST", value: 88, isUnsigned: true)
!1446 = !DIEnumerator(name: "PARAM_MAX_LAST_VALUE_RTL", value: 89, isUnsigned: true)
!1447 = !DIEnumerator(name: "PARAM_INTEGER_SHARE_LIMIT", value: 90, isUnsigned: true)
!1448 = !DIEnumerator(name: "PARAM_MIN_VIRTUAL_MAPPINGS", value: 91, isUnsigned: true)
!1449 = !DIEnumerator(name: "PARAM_VIRTUAL_MAPPINGS_TO_SYMS_RATIO", value: 92, isUnsigned: true)
!1450 = !DIEnumerator(name: "PARAM_SSP_BUFFER_SIZE", value: 93, isUnsigned: true)
!1451 = !DIEnumerator(name: "PARAM_MAX_JUMP_THREAD_DUPLICATION_STMTS", value: 94, isUnsigned: true)
!1452 = !DIEnumerator(name: "PARAM_MAX_FIELDS_FOR_FIELD_SENSITIVE", value: 95, isUnsigned: true)
!1453 = !DIEnumerator(name: "PARAM_MAX_SCHED_READY_INSNS", value: 96, isUnsigned: true)
!1454 = !DIEnumerator(name: "PARAM_PREFETCH_LATENCY", value: 97, isUnsigned: true)
!1455 = !DIEnumerator(name: "PARAM_SIMULTANEOUS_PREFETCHES", value: 98, isUnsigned: true)
!1456 = !DIEnumerator(name: "PARAM_L1_CACHE_SIZE", value: 99, isUnsigned: true)
!1457 = !DIEnumerator(name: "PARAM_L1_CACHE_LINE_SIZE", value: 100, isUnsigned: true)
!1458 = !DIEnumerator(name: "PARAM_L2_CACHE_SIZE", value: 101, isUnsigned: true)
!1459 = !DIEnumerator(name: "PARAM_USE_CANONICAL_TYPES", value: 102, isUnsigned: true)
!1460 = !DIEnumerator(name: "PARAM_MAX_PARTIAL_ANTIC_LENGTH", value: 103, isUnsigned: true)
!1461 = !DIEnumerator(name: "PARAM_SCCVN_MAX_SCC_SIZE", value: 104, isUnsigned: true)
!1462 = !DIEnumerator(name: "PARAM_IRA_MAX_LOOPS_NUM", value: 105, isUnsigned: true)
!1463 = !DIEnumerator(name: "PARAM_IRA_MAX_CONFLICT_TABLE_SIZE", value: 106, isUnsigned: true)
!1464 = !DIEnumerator(name: "PARAM_IRA_LOOP_RESERVED_REGS", value: 107, isUnsigned: true)
!1465 = !DIEnumerator(name: "PARAM_SWITCH_CONVERSION_BRANCH_RATIO", value: 108, isUnsigned: true)
!1466 = !DIEnumerator(name: "PARAM_LOOP_BLOCK_TILE_SIZE", value: 109, isUnsigned: true)
!1467 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_NB_SCOP_PARAMS", value: 110, isUnsigned: true)
!1468 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_BBS_PER_FUNCTION", value: 111, isUnsigned: true)
!1469 = !DIEnumerator(name: "PARAM_LOOP_INVARIANT_MAX_BBS_IN_LOOP", value: 112, isUnsigned: true)
!1470 = !DIEnumerator(name: "PARAM_SLP_MAX_INSNS_IN_BB", value: 113, isUnsigned: true)
!1471 = !DIEnumerator(name: "PARAM_MIN_INSN_TO_PREFETCH_RATIO", value: 114, isUnsigned: true)
!1472 = !DIEnumerator(name: "PARAM_PREFETCH_MIN_INSN_TO_MEM_RATIO", value: 115, isUnsigned: true)
!1473 = !DIEnumerator(name: "PARAM_MAX_VARTRACK_SIZE", value: 116, isUnsigned: true)
!1474 = !DIEnumerator(name: "PARAM_MIN_NONDEBUG_INSN_UID", value: 117, isUnsigned: true)
!1475 = !DIEnumerator(name: "PARAM_IPA_SRA_PTR_GROWTH_FACTOR", value: 118, isUnsigned: true)
!1476 = !DIEnumerator(name: "LAST_PARAM", value: 119, isUnsigned: true)
!1477 = !{!1478, !1752, !1767, !1483, !134, !1580, !1613, !2850, !2851, !2857, !2889, !2890, !2892, !2905, !2383, !2907, !7, !2908, !585, !2921, !2868, !1537, !1815, !2924, !1848, !2926, !2317, !2929, !2930, !2960, !2962, !2977, !2970, !2979, !2982, !2984, !2985}
!1478 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1479, size: 64)
!1479 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "vn_ssa_aux", file: !1480, line: 136, size: 256, elements: !1481)
!1480 = !DIFile(filename: "./tree-ssa-sccvn.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1481 = !{!1482, !2841, !2842, !2843, !2844, !2845, !2846, !2847, !2848, !2849}
!1482 = !DIDerivedType(tag: DW_TAG_member, name: "valnum", scope: !1479, file: !1480, line: 139, baseType: !1483, size: 64)
!1483 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !1484, line: 56, baseType: !1485)
!1484 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1485 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1486, size: 64)
!1486 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !135, line: 3371, size: 1792, elements: !1487)
!1487 = !{!1488, !1521, !1527, !1540, !1559, !1570, !1575, !1586, !1592, !1606, !1618, !1656, !2170, !2198, !2215, !2216, !2221, !2230, !2236, !2241, !2245, !2249, !2492, !2539, !2545, !2551, !2558, !2571, !2585, !2602, !2614, !2636, !2651, !2823}
!1488 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1486, file: !135, line: 3372, baseType: !1489, size: 64)
!1489 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !135, line: 360, size: 64, elements: !1490)
!1490 = !{!1491, !1492, !1493, !1494, !1495, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510, !1511, !1512, !1513, !1514, !1515, !1516, !1517, !1518, !1519, !1520}
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1489, file: !135, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1492 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !1489, file: !135, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1493 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !1489, file: !135, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !1489, file: !135, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1495 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !1489, file: !135, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !1489, file: !135, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !1489, file: !135, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !1489, file: !135, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !1489, file: !135, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !1489, file: !135, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !1489, file: !135, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !1489, file: !135, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !1489, file: !135, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !1489, file: !135, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !1489, file: !135, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !1489, file: !135, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !1489, file: !135, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !1489, file: !135, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1489, file: !135, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1489, file: !135, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1489, file: !135, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!1512 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1489, file: !135, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!1513 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1489, file: !135, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1489, file: !135, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!1515 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1489, file: !135, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!1516 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1489, file: !135, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!1517 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !1489, file: !135, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !1489, file: !135, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !1489, file: !135, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !1489, file: !135, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1486, file: !135, line: 3373, baseType: !1522, size: 192)
!1522 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !135, line: 402, size: 192, elements: !1523)
!1523 = !{!1524, !1525, !1526}
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1522, file: !135, line: 403, baseType: !1489, size: 64)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !1522, file: !135, line: 404, baseType: !1483, size: 64, offset: 64)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1522, file: !135, line: 405, baseType: !1483, size: 64, offset: 128)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1486, file: !135, line: 3374, baseType: !1528, size: 320)
!1528 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !135, line: 1384, size: 320, elements: !1529)
!1529 = !{!1530, !1531}
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1528, file: !135, line: 1385, baseType: !1522, size: 192)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1528, file: !135, line: 1386, baseType: !1532, size: 128, offset: 192)
!1532 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !1533, line: 58, baseType: !1534)
!1533 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1534 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1533, line: 54, size: 128, elements: !1535)
!1535 = !{!1536, !1538}
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1534, file: !1533, line: 56, baseType: !1537, size: 64)
!1537 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1534, file: !1533, line: 57, baseType: !1539, size: 64, offset: 64)
!1539 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !1486, file: !135, line: 3375, baseType: !1541, size: 256)
!1541 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !135, line: 1397, size: 256, elements: !1542)
!1542 = !{!1543, !1544}
!1543 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1541, file: !135, line: 1398, baseType: !1522, size: 192)
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !1541, file: !135, line: 1399, baseType: !1545, size: 64, offset: 192)
!1545 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1546, size: 64)
!1546 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !1547, line: 52, size: 256, elements: !1548)
!1547 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1548 = !{!1549, !1550, !1551, !1552, !1553, !1554, !1555}
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !1546, file: !1547, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1550 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !1546, file: !1547, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1551 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !1546, file: !1547, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1552 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !1546, file: !1547, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1546, file: !1547, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !1546, file: !1547, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !1546, file: !1547, line: 62, baseType: !1556, size: 192, offset: 64)
!1556 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1537, size: 192, elements: !1557)
!1557 = !{!1558}
!1558 = !DISubrange(count: 3)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !1486, file: !135, line: 3376, baseType: !1560, size: 256)
!1560 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !135, line: 1408, size: 256, elements: !1561)
!1561 = !{!1562, !1563}
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1560, file: !135, line: 1409, baseType: !1522, size: 192)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !1560, file: !135, line: 1410, baseType: !1564, size: 64, offset: 192)
!1564 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1565, size: 64)
!1565 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !1566, line: 27, size: 192, elements: !1567)
!1566 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1567 = !{!1568, !1569}
!1568 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1565, file: !1566, line: 29, baseType: !1532, size: 128)
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1565, file: !1566, line: 30, baseType: !5, size: 32, offset: 128)
!1570 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !1486, file: !135, line: 3377, baseType: !1571, size: 256)
!1571 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !135, line: 1437, size: 256, elements: !1572)
!1572 = !{!1573, !1574}
!1573 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1571, file: !135, line: 1438, baseType: !1522, size: 192)
!1574 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1571, file: !135, line: 1439, baseType: !1483, size: 64, offset: 192)
!1575 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1486, file: !135, line: 3378, baseType: !1576, size: 256)
!1576 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !135, line: 1418, size: 256, elements: !1577)
!1577 = !{!1578, !1579, !1581}
!1578 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1576, file: !135, line: 1419, baseType: !1522, size: 192)
!1579 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1576, file: !135, line: 1420, baseType: !1580, size: 32, offset: 192)
!1580 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1576, file: !135, line: 1421, baseType: !1582, size: 8, offset: 224)
!1582 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1583, size: 8, elements: !1584)
!1583 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!1584 = !{!1585}
!1585 = !DISubrange(count: 1)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !1486, file: !135, line: 3379, baseType: !1587, size: 320)
!1587 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !135, line: 1428, size: 320, elements: !1588)
!1588 = !{!1589, !1590, !1591}
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1587, file: !135, line: 1429, baseType: !1522, size: 192)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !1587, file: !135, line: 1430, baseType: !1483, size: 64, offset: 192)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !1587, file: !135, line: 1431, baseType: !1483, size: 64, offset: 256)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !1486, file: !135, line: 3380, baseType: !1593, size: 320)
!1593 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !135, line: 1460, size: 320, elements: !1594)
!1594 = !{!1595, !1596}
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1593, file: !135, line: 1461, baseType: !1522, size: 192)
!1596 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1593, file: !135, line: 1462, baseType: !1597, size: 128, offset: 192)
!1597 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !1598, line: 31, size: 128, elements: !1599)
!1598 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1599 = !{!1600, !1604, !1605}
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1597, file: !1598, line: 32, baseType: !1601, size: 64)
!1601 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1602, size: 64)
!1602 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1603)
!1603 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1597, file: !1598, line: 33, baseType: !7, size: 32, offset: 64)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !1597, file: !1598, line: 34, baseType: !7, size: 32, offset: 96)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !1486, file: !135, line: 3381, baseType: !1607, size: 384)
!1607 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !135, line: 2507, size: 384, elements: !1608)
!1608 = !{!1609, !1610, !1615, !1616, !1617}
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1607, file: !135, line: 2508, baseType: !1522, size: 192)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1607, file: !135, line: 2509, baseType: !1611, size: 32, offset: 192)
!1611 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !1612, line: 58, baseType: !1613)
!1612 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1613 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !1614, line: 44, baseType: !7)
!1614 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1607, file: !135, line: 2510, baseType: !7, size: 32, offset: 224)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1607, file: !135, line: 2511, baseType: !1483, size: 64, offset: 256)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1607, file: !135, line: 2512, baseType: !1483, size: 64, offset: 320)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !1486, file: !135, line: 3382, baseType: !1619, size: 896)
!1619 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !135, line: 2652, size: 896, elements: !1620)
!1620 = !{!1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631, !1632, !1633, !1634, !1635, !1636, !1637, !1638, !1639, !1640, !1641, !1642, !1643, !1644, !1645, !1646, !1647, !1648, !1649, !1650, !1651, !1652, !1653}
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1619, file: !135, line: 2653, baseType: !1607, size: 384)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1619, file: !135, line: 2654, baseType: !1483, size: 64, offset: 384)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1619, file: !135, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !1619, file: !135, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !1619, file: !135, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !1619, file: !135, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1619, file: !135, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !1619, file: !135, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !1619, file: !135, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !1619, file: !135, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1619, file: !135, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1619, file: !135, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!1633 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1619, file: !135, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!1634 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1619, file: !135, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1619, file: !135, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!1636 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1619, file: !135, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!1637 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1619, file: !135, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!1638 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !1619, file: !135, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !1619, file: !135, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !1619, file: !135, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!1641 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !1619, file: !135, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !1619, file: !135, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!1643 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !1619, file: !135, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!1644 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !1619, file: !135, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !1619, file: !135, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!1646 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !1619, file: !135, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!1647 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !1619, file: !135, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!1648 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1619, file: !135, line: 2703, baseType: !7, size: 32, offset: 512)
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1619, file: !135, line: 2705, baseType: !1483, size: 64, offset: 576)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1619, file: !135, line: 2706, baseType: !1483, size: 64, offset: 640)
!1651 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1619, file: !135, line: 2707, baseType: !1483, size: 64, offset: 704)
!1652 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1619, file: !135, line: 2708, baseType: !1483, size: 64, offset: 768)
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1619, file: !135, line: 2711, baseType: !1654, size: 64, offset: 832)
!1654 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1655, size: 64)
!1655 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !135, line: 2711, flags: DIFlagFwdDecl)
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !1486, file: !135, line: 3383, baseType: !1657, size: 960)
!1657 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !135, line: 2756, size: 960, elements: !1658)
!1658 = !{!1659, !1660}
!1659 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1657, file: !135, line: 2757, baseType: !1619, size: 896)
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1657, file: !135, line: 2758, baseType: !1661, size: 64, offset: 896)
!1661 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !1484, line: 50, baseType: !1662)
!1662 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1663, size: 64)
!1663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !1664, line: 240, size: 384, elements: !1665)
!1664 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1665 = !{!1666, !1667, !1668, !1669, !1670, !1671, !1672, !1673, !1674, !1675, !1676}
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1663, file: !1664, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1667 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1663, file: !1664, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !1663, file: !1664, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1669 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !1663, file: !1664, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1670 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !1663, file: !1664, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !1663, file: !1664, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1672 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !1663, file: !1664, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1663, file: !1664, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1674 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !1663, file: !1664, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1675 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !1663, file: !1664, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1663, file: !1664, line: 321, baseType: !1677, size: 320, offset: 64)
!1677 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !1664, line: 315, size: 320, elements: !1678)
!1678 = !{!1679, !2137, !2139, !2168, !2169}
!1679 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1677, file: !1664, line: 316, baseType: !1680, size: 64)
!1680 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1681, size: 64, elements: !1584)
!1681 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !1664, line: 183, baseType: !1682)
!1682 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !1664, line: 166, size: 64, elements: !1683)
!1683 = !{!1684, !1685, !1686, !1689, !1690, !1698, !1699, !1711, !1714, !1776, !1777, !2114, !2127, !2134}
!1684 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !1682, file: !1664, line: 168, baseType: !1580, size: 32)
!1685 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !1682, file: !1664, line: 169, baseType: !7, size: 32)
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !1682, file: !1664, line: 170, baseType: !1687, size: 64)
!1687 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1688, size: 64)
!1688 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1583)
!1689 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !1682, file: !1664, line: 171, baseType: !1661, size: 64)
!1690 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !1682, file: !1664, line: 172, baseType: !1691, size: 64)
!1691 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !1484, line: 53, baseType: !1692)
!1692 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1693, size: 64)
!1693 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !1664, line: 359, size: 128, elements: !1694)
!1694 = !{!1695, !1696}
!1695 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !1693, file: !1664, line: 360, baseType: !1580, size: 32)
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !1693, file: !1664, line: 361, baseType: !1697, size: 64, offset: 64)
!1697 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1661, size: 64, elements: !1584)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !1682, file: !1664, line: 173, baseType: !5, size: 32)
!1699 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !1682, file: !1664, line: 174, baseType: !1700, size: 32)
!1700 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !1664, line: 133, baseType: !1701)
!1701 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1664, line: 115, size: 32, elements: !1702)
!1702 = !{!1703, !1704, !1705, !1706, !1707, !1708, !1709, !1710}
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !1701, file: !1664, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !1701, file: !1664, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !1701, file: !1664, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !1701, file: !1664, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !1701, file: !1664, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !1701, file: !1664, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !1701, file: !1664, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !1701, file: !1664, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !1682, file: !1664, line: 175, baseType: !1712, size: 64)
!1712 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1713, size: 64)
!1713 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !1664, line: 175, flags: DIFlagFwdDecl)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !1682, file: !1664, line: 176, baseType: !1715, size: 64)
!1715 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1716, size: 64)
!1716 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !1717, line: 75, size: 256, elements: !1718)
!1717 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1718 = !{!1719, !1733, !1734, !1735}
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1716, file: !1717, line: 76, baseType: !1720, size: 64)
!1720 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1721, size: 64)
!1721 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !1717, line: 68, baseType: !1722)
!1722 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !1717, line: 63, size: 320, elements: !1723)
!1723 = !{!1724, !1726, !1727, !1728}
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1722, file: !1717, line: 64, baseType: !1725, size: 64)
!1725 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1722, size: 64)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1722, file: !1717, line: 65, baseType: !1725, size: 64, offset: 64)
!1727 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1722, file: !1717, line: 66, baseType: !7, size: 32, offset: 128)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !1722, file: !1717, line: 67, baseType: !1729, size: 128, offset: 192)
!1729 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1730, size: 128, elements: !1731)
!1730 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !1717, line: 29, baseType: !1537)
!1731 = !{!1732}
!1732 = !DISubrange(count: 2)
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !1716, file: !1717, line: 77, baseType: !1720, size: 64, offset: 64)
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1716, file: !1717, line: 78, baseType: !7, size: 32, offset: 128)
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1716, file: !1717, line: 79, baseType: !1736, size: 64, offset: 192)
!1736 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1737, size: 64)
!1737 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !1717, line: 49, baseType: !1738)
!1738 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !1717, line: 45, size: 832, elements: !1739)
!1739 = !{!1740, !1741, !1742}
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1738, file: !1717, line: 46, baseType: !1725, size: 64)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !1738, file: !1717, line: 47, baseType: !1715, size: 64, offset: 64)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1738, file: !1717, line: 48, baseType: !1743, size: 704, offset: 128)
!1743 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !1744, line: 164, size: 704, elements: !1745)
!1744 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1745 = !{!1746, !1747, !1758, !1759, !1760, !1761, !1762, !1763, !1768, !1772, !1773, !1774, !1775}
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !1743, file: !1744, line: 166, baseType: !1539, size: 64)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !1743, file: !1744, line: 167, baseType: !1748, size: 64, offset: 64)
!1748 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1749, size: 64)
!1749 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !1744, line: 157, size: 192, elements: !1750)
!1750 = !{!1751, !1753, !1754}
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1749, file: !1744, line: 159, baseType: !1752, size: 64)
!1752 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1583, size: 64)
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1749, file: !1744, line: 160, baseType: !1748, size: 64, offset: 64)
!1754 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !1749, file: !1744, line: 161, baseType: !1755, size: 32, offset: 128)
!1755 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1583, size: 32, elements: !1756)
!1756 = !{!1757}
!1757 = !DISubrange(count: 4)
!1758 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !1743, file: !1744, line: 168, baseType: !1752, size: 64, offset: 128)
!1759 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1743, file: !1744, line: 169, baseType: !1752, size: 64, offset: 192)
!1760 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !1743, file: !1744, line: 170, baseType: !1752, size: 64, offset: 256)
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !1743, file: !1744, line: 171, baseType: !1539, size: 64, offset: 320)
!1762 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !1743, file: !1744, line: 172, baseType: !1580, size: 32, offset: 384)
!1763 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !1743, file: !1744, line: 176, baseType: !1764, size: 64, offset: 448)
!1764 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1765, size: 64)
!1765 = !DISubroutineType(types: !1766)
!1766 = !{!1748, !1767, !1539}
!1767 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !1743, file: !1744, line: 177, baseType: !1769, size: 64, offset: 512)
!1769 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1770, size: 64)
!1770 = !DISubroutineType(types: !1771)
!1771 = !{null, !1767, !1748}
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !1743, file: !1744, line: 178, baseType: !1767, size: 64, offset: 576)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !1743, file: !1744, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !1743, file: !1744, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !1743, file: !1744, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !1682, file: !1664, line: 177, baseType: !1483, size: 64)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !1682, file: !1664, line: 178, baseType: !1778, size: 64)
!1778 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1779, size: 64)
!1779 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !343, line: 217, size: 832, elements: !1780)
!1780 = !{!1781, !2026, !2027, !2028, !2084, !2088, !2089, !2090, !2108, !2109, !2110, !2111, !2112, !2113}
!1781 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !1779, file: !343, line: 219, baseType: !1782, size: 64)
!1782 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1783, size: 64)
!1783 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !343, line: 151, baseType: !1784)
!1784 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !343, line: 151, size: 128, elements: !1785)
!1785 = !{!1786}
!1786 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1784, file: !343, line: 151, baseType: !1787, size: 128)
!1787 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !343, line: 150, baseType: !1788)
!1788 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !343, line: 150, size: 128, elements: !1789)
!1789 = !{!1790, !1791, !1792}
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1788, file: !343, line: 150, baseType: !7, size: 32)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1788, file: !343, line: 150, baseType: !7, size: 32, offset: 32)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1788, file: !343, line: 150, baseType: !1793, size: 64, offset: 64)
!1793 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1794, size: 64, elements: !1584)
!1794 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !1484, line: 108, baseType: !1795)
!1795 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1796, size: 64)
!1796 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !343, line: 122, size: 512, elements: !1797)
!1797 = !{!1798, !1799, !1800, !2018, !2019, !2020, !2021, !2022, !2023, !2024}
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !1796, file: !343, line: 124, baseType: !1778, size: 64)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !1796, file: !343, line: 125, baseType: !1778, size: 64, offset: 64)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !1796, file: !343, line: 131, baseType: !1801, size: 64, offset: 128)
!1801 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !343, line: 128, size: 64, elements: !1802)
!1802 = !{!1803, !2017}
!1803 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !1801, file: !343, line: 129, baseType: !1804, size: 64)
!1804 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !1484, line: 66, baseType: !1805)
!1805 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1806, size: 64)
!1806 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !391, line: 143, size: 192, elements: !1807)
!1807 = !{!1808, !2015, !2016}
!1808 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1806, file: !391, line: 145, baseType: !1809, size: 64)
!1809 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !1484, line: 69, baseType: !1810)
!1810 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1811, size: 64)
!1811 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !391, line: 136, size: 192, elements: !1812)
!1812 = !{!1813, !2013, !2014}
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1811, file: !391, line: 137, baseType: !1814, size: 64)
!1814 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !1484, line: 58, baseType: !1815)
!1815 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1816, size: 64)
!1816 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !391, line: 737, size: 768, elements: !1817)
!1817 = !{!1818, !1835, !1868, !1874, !1879, !1884, !1891, !1897, !1903, !1908, !1922, !1927, !1933, !1938, !1948, !1953, !1971, !1978, !1985, !1991, !1996, !2002, !2008}
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1816, file: !391, line: 738, baseType: !1819, size: 256)
!1819 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !391, line: 271, size: 256, elements: !1820)
!1820 = !{!1821, !1822, !1823, !1824, !1825, !1826, !1827, !1828, !1829, !1830, !1831, !1832, !1833, !1834}
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1819, file: !391, line: 274, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !1819, file: !391, line: 277, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1819, file: !391, line: 281, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !1819, file: !391, line: 284, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1825 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !1819, file: !391, line: 291, baseType: !7, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1826 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !1819, file: !391, line: 295, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1827 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !1819, file: !391, line: 298, baseType: !7, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1828 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1819, file: !391, line: 301, baseType: !7, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1829 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1819, file: !391, line: 307, baseType: !7, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1830 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1819, file: !391, line: 312, baseType: !7, size: 32, offset: 32)
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !1819, file: !391, line: 316, baseType: !1611, size: 32, offset: 64)
!1832 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !1819, file: !391, line: 319, baseType: !7, size: 32, offset: 96)
!1833 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !1819, file: !391, line: 323, baseType: !1778, size: 64, offset: 128)
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1819, file: !391, line: 327, baseType: !1483, size: 64, offset: 192)
!1835 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !1816, file: !391, line: 739, baseType: !1836, size: 448)
!1836 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !391, line: 350, size: 448, elements: !1837)
!1837 = !{!1838, !1866}
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1836, file: !391, line: 353, baseType: !1839, size: 384)
!1839 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !391, line: 333, size: 384, elements: !1840)
!1840 = !{!1841, !1842, !1849}
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1839, file: !391, line: 336, baseType: !1819, size: 256)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !1839, file: !391, line: 343, baseType: !1843, size: 64, offset: 256)
!1843 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1844, size: 64)
!1844 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !1348, line: 37, size: 128, elements: !1845)
!1845 = !{!1846, !1847}
!1846 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1844, file: !1348, line: 39, baseType: !1843, size: 64)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !1844, file: !1348, line: 40, baseType: !1848, size: 64, offset: 64)
!1848 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1483, size: 64)
!1849 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !1839, file: !391, line: 344, baseType: !1850, size: 64, offset: 320)
!1850 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1851, size: 64)
!1851 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !1348, line: 45, size: 320, elements: !1852)
!1852 = !{!1853, !1854}
!1853 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1851, file: !1348, line: 47, baseType: !1850, size: 64)
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !1851, file: !1348, line: 48, baseType: !1855, size: 256, offset: 64)
!1855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !135, line: 1883, size: 256, elements: !1856)
!1856 = !{!1857, !1859, !1860, !1865}
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1855, file: !135, line: 1884, baseType: !1858, size: 64)
!1858 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1855, size: 64)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1855, file: !135, line: 1885, baseType: !1858, size: 64, offset: 64)
!1860 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1855, file: !135, line: 1891, baseType: !1861, size: 64, offset: 128)
!1861 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1855, file: !135, line: 1891, size: 64, elements: !1862)
!1862 = !{!1863, !1864}
!1863 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1861, file: !135, line: 1891, baseType: !1814, size: 64)
!1864 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1861, file: !135, line: 1891, baseType: !1483, size: 64)
!1865 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !1855, file: !135, line: 1892, baseType: !1848, size: 64, offset: 192)
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1836, file: !391, line: 359, baseType: !1867, size: 64, offset: 384)
!1867 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1483, size: 64, elements: !1584)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !1816, file: !391, line: 740, baseType: !1869, size: 512)
!1869 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !391, line: 365, size: 512, elements: !1870)
!1870 = !{!1871, !1872, !1873}
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1869, file: !391, line: 368, baseType: !1839, size: 384)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !1869, file: !391, line: 373, baseType: !1483, size: 64, offset: 384)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !1869, file: !391, line: 374, baseType: !1483, size: 64, offset: 448)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !1816, file: !391, line: 741, baseType: !1875, size: 576)
!1875 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !391, line: 380, size: 576, elements: !1876)
!1876 = !{!1877, !1878}
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1875, file: !391, line: 383, baseType: !1869, size: 512)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1875, file: !391, line: 389, baseType: !1867, size: 64, offset: 512)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1816, file: !391, line: 742, baseType: !1880, size: 320)
!1880 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !391, line: 395, size: 320, elements: !1881)
!1881 = !{!1882, !1883}
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1880, file: !391, line: 397, baseType: !1819, size: 256)
!1883 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1880, file: !391, line: 400, baseType: !1804, size: 64, offset: 256)
!1884 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !1816, file: !391, line: 743, baseType: !1885, size: 448)
!1885 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !391, line: 406, size: 448, elements: !1886)
!1886 = !{!1887, !1888, !1889, !1890}
!1887 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1885, file: !391, line: 408, baseType: !1819, size: 256)
!1888 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1885, file: !391, line: 412, baseType: !1483, size: 64, offset: 256)
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1885, file: !391, line: 420, baseType: !1483, size: 64, offset: 320)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1885, file: !391, line: 423, baseType: !1804, size: 64, offset: 384)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !1816, file: !391, line: 744, baseType: !1892, size: 384)
!1892 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !391, line: 429, size: 384, elements: !1893)
!1893 = !{!1894, !1895, !1896}
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1892, file: !391, line: 431, baseType: !1819, size: 256)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1892, file: !391, line: 434, baseType: !1483, size: 64, offset: 256)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !1892, file: !391, line: 437, baseType: !1804, size: 64, offset: 320)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !1816, file: !391, line: 745, baseType: !1898, size: 384)
!1898 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !391, line: 443, size: 384, elements: !1899)
!1899 = !{!1900, !1901, !1902}
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1898, file: !391, line: 445, baseType: !1819, size: 256)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1898, file: !391, line: 449, baseType: !1483, size: 64, offset: 256)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !1898, file: !391, line: 453, baseType: !1804, size: 64, offset: 320)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !1816, file: !391, line: 746, baseType: !1904, size: 320)
!1904 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !391, line: 459, size: 320, elements: !1905)
!1905 = !{!1906, !1907}
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1904, file: !391, line: 461, baseType: !1819, size: 256)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !1904, file: !391, line: 464, baseType: !1483, size: 64, offset: 256)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !1816, file: !391, line: 747, baseType: !1909, size: 768)
!1909 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !391, line: 469, size: 768, elements: !1910)
!1910 = !{!1911, !1912, !1913, !1914, !1915}
!1911 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1909, file: !391, line: 471, baseType: !1819, size: 256)
!1912 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !1909, file: !391, line: 474, baseType: !7, size: 32, offset: 256)
!1913 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !1909, file: !391, line: 475, baseType: !7, size: 32, offset: 288)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1909, file: !391, line: 478, baseType: !1483, size: 64, offset: 320)
!1915 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !1909, file: !391, line: 481, baseType: !1916, size: 384, offset: 384)
!1916 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1917, size: 384, elements: !1584)
!1917 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !135, line: 1917, size: 384, elements: !1918)
!1918 = !{!1919, !1920, !1921}
!1919 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !1917, file: !135, line: 1920, baseType: !1855, size: 256)
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !1917, file: !135, line: 1921, baseType: !1483, size: 64, offset: 256)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1917, file: !135, line: 1922, baseType: !1611, size: 32, offset: 320)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !1816, file: !391, line: 748, baseType: !1923, size: 320)
!1923 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !391, line: 487, size: 320, elements: !1924)
!1924 = !{!1925, !1926}
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1923, file: !391, line: 490, baseType: !1819, size: 256)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !1923, file: !391, line: 494, baseType: !1580, size: 32, offset: 256)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !1816, file: !391, line: 749, baseType: !1928, size: 384)
!1928 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !391, line: 500, size: 384, elements: !1929)
!1929 = !{!1930, !1931, !1932}
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1928, file: !391, line: 502, baseType: !1819, size: 256)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !1928, file: !391, line: 506, baseType: !1804, size: 64, offset: 256)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1928, file: !391, line: 510, baseType: !1804, size: 64, offset: 320)
!1933 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !1816, file: !391, line: 750, baseType: !1934, size: 320)
!1934 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !391, line: 529, size: 320, elements: !1935)
!1935 = !{!1936, !1937}
!1936 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1934, file: !391, line: 531, baseType: !1819, size: 256)
!1937 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1934, file: !391, line: 540, baseType: !1804, size: 64, offset: 256)
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !1816, file: !391, line: 751, baseType: !1939, size: 704)
!1939 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !391, line: 546, size: 704, elements: !1940)
!1940 = !{!1941, !1942, !1943, !1944, !1945, !1946, !1947}
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1939, file: !391, line: 549, baseType: !1869, size: 512)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1939, file: !391, line: 553, baseType: !1687, size: 64, offset: 512)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !1939, file: !391, line: 557, baseType: !1603, size: 8, offset: 576)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !1939, file: !391, line: 558, baseType: !1603, size: 8, offset: 584)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !1939, file: !391, line: 559, baseType: !1603, size: 8, offset: 592)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !1939, file: !391, line: 560, baseType: !1603, size: 8, offset: 600)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1939, file: !391, line: 566, baseType: !1867, size: 64, offset: 640)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !1816, file: !391, line: 752, baseType: !1949, size: 384)
!1949 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !391, line: 571, size: 384, elements: !1950)
!1950 = !{!1951, !1952}
!1951 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1949, file: !391, line: 573, baseType: !1880, size: 320)
!1952 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1949, file: !391, line: 577, baseType: !1483, size: 64, offset: 320)
!1953 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !1816, file: !391, line: 753, baseType: !1954, size: 576)
!1954 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !391, line: 600, size: 576, elements: !1955)
!1955 = !{!1956, !1957, !1958, !1961, !1970}
!1956 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1954, file: !391, line: 602, baseType: !1880, size: 320)
!1957 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1954, file: !391, line: 605, baseType: !1483, size: 64, offset: 320)
!1958 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !1954, file: !391, line: 609, baseType: !1959, size: 64, offset: 384)
!1959 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !1960, line: 46, baseType: !1537)
!1960 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !1954, file: !391, line: 612, baseType: !1962, size: 64, offset: 448)
!1962 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1963, size: 64)
!1963 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !391, line: 581, size: 320, elements: !1964)
!1964 = !{!1965, !1966, !1967, !1968, !1969}
!1965 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !1963, file: !391, line: 583, baseType: !134, size: 32)
!1966 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1963, file: !391, line: 586, baseType: !1483, size: 64, offset: 64)
!1967 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1963, file: !391, line: 589, baseType: !1483, size: 64, offset: 128)
!1968 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !1963, file: !391, line: 592, baseType: !1483, size: 64, offset: 192)
!1969 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !1963, file: !391, line: 595, baseType: !1483, size: 64, offset: 256)
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !1954, file: !391, line: 616, baseType: !1804, size: 64, offset: 512)
!1971 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !1816, file: !391, line: 754, baseType: !1972, size: 512)
!1972 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !391, line: 622, size: 512, elements: !1973)
!1973 = !{!1974, !1975, !1976, !1977}
!1974 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1972, file: !391, line: 624, baseType: !1880, size: 320)
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1972, file: !391, line: 628, baseType: !1483, size: 64, offset: 320)
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !1972, file: !391, line: 632, baseType: !1483, size: 64, offset: 384)
!1977 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !1972, file: !391, line: 636, baseType: !1483, size: 64, offset: 448)
!1978 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !1816, file: !391, line: 755, baseType: !1979, size: 704)
!1979 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !391, line: 642, size: 704, elements: !1980)
!1980 = !{!1981, !1982, !1983, !1984}
!1981 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !1979, file: !391, line: 644, baseType: !1972, size: 512)
!1982 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !1979, file: !391, line: 648, baseType: !1483, size: 64, offset: 512)
!1983 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !1979, file: !391, line: 652, baseType: !1483, size: 64, offset: 576)
!1984 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !1979, file: !391, line: 653, baseType: !1483, size: 64, offset: 640)
!1985 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !1816, file: !391, line: 756, baseType: !1986, size: 448)
!1986 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !391, line: 663, size: 448, elements: !1987)
!1987 = !{!1988, !1989, !1990}
!1988 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1986, file: !391, line: 665, baseType: !1880, size: 320)
!1989 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1986, file: !391, line: 668, baseType: !1483, size: 64, offset: 320)
!1990 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !1986, file: !391, line: 673, baseType: !1483, size: 64, offset: 384)
!1991 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !1816, file: !391, line: 757, baseType: !1992, size: 384)
!1992 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !391, line: 694, size: 384, elements: !1993)
!1993 = !{!1994, !1995}
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1992, file: !391, line: 696, baseType: !1880, size: 320)
!1995 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1992, file: !391, line: 699, baseType: !1483, size: 64, offset: 320)
!1996 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !1816, file: !391, line: 758, baseType: !1997, size: 384)
!1997 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !391, line: 681, size: 384, elements: !1998)
!1998 = !{!1999, !2000, !2001}
!1999 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1997, file: !391, line: 683, baseType: !1819, size: 256)
!2000 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !1997, file: !391, line: 686, baseType: !1483, size: 64, offset: 256)
!2001 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !1997, file: !391, line: 689, baseType: !1483, size: 64, offset: 320)
!2002 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !1816, file: !391, line: 759, baseType: !2003, size: 384)
!2003 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !391, line: 707, size: 384, elements: !2004)
!2004 = !{!2005, !2006, !2007}
!2005 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2003, file: !391, line: 709, baseType: !1819, size: 256)
!2006 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !2003, file: !391, line: 712, baseType: !1483, size: 64, offset: 256)
!2007 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !2003, file: !391, line: 712, baseType: !1483, size: 64, offset: 320)
!2008 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !1816, file: !391, line: 760, baseType: !2009, size: 320)
!2009 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !391, line: 718, size: 320, elements: !2010)
!2010 = !{!2011, !2012}
!2011 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2009, file: !391, line: 720, baseType: !1819, size: 256)
!2012 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2009, file: !391, line: 723, baseType: !1483, size: 64, offset: 256)
!2013 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1811, file: !391, line: 138, baseType: !1810, size: 64, offset: 64)
!2014 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1811, file: !391, line: 139, baseType: !1810, size: 64, offset: 128)
!2015 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !1806, file: !391, line: 146, baseType: !1809, size: 64, offset: 64)
!2016 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1806, file: !391, line: 152, baseType: !1804, size: 64, offset: 128)
!2017 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !1801, file: !343, line: 130, baseType: !1661, size: 64)
!2018 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1796, file: !343, line: 134, baseType: !1767, size: 64, offset: 192)
!2019 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !1796, file: !343, line: 137, baseType: !1483, size: 64, offset: 256)
!2020 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !1796, file: !343, line: 138, baseType: !1611, size: 32, offset: 320)
!2021 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !1796, file: !343, line: 142, baseType: !7, size: 32, offset: 352)
!2022 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1796, file: !343, line: 144, baseType: !1580, size: 32, offset: 384)
!2023 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !1796, file: !343, line: 145, baseType: !1580, size: 32, offset: 416)
!2024 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1796, file: !343, line: 146, baseType: !2025, size: 64, offset: 448)
!2025 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !343, line: 119, baseType: !1539)
!2026 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !1779, file: !343, line: 220, baseType: !1782, size: 64, offset: 64)
!2027 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1779, file: !343, line: 223, baseType: !1767, size: 64, offset: 128)
!2028 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !1779, file: !343, line: 226, baseType: !2029, size: 64, offset: 192)
!2029 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2030, size: 64)
!2030 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !330, line: 100, size: 1216, elements: !2031)
!2031 = !{!2032, !2033, !2034, !2035, !2036, !2041, !2042, !2043, !2057, !2058, !2059, !2060, !2061, !2062, !2063, !2064, !2065, !2066, !2074, !2082, !2083}
!2032 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2030, file: !330, line: 102, baseType: !1580, size: 32)
!2033 = !DIDerivedType(tag: DW_TAG_member, name: "ninsns", scope: !2030, file: !330, line: 105, baseType: !7, size: 32, offset: 32)
!2034 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !2030, file: !330, line: 108, baseType: !1778, size: 64, offset: 64)
!2035 = !DIDerivedType(tag: DW_TAG_member, name: "latch", scope: !2030, file: !330, line: 111, baseType: !1778, size: 64, offset: 128)
!2036 = !DIDerivedType(tag: DW_TAG_member, name: "lpt_decision", scope: !2030, file: !330, line: 114, baseType: !2037, size: 64, offset: 192)
!2037 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lpt_decision", file: !330, line: 41, size: 64, elements: !2038)
!2038 = !{!2039, !2040}
!2039 = !DIDerivedType(tag: DW_TAG_member, name: "decision", scope: !2037, file: !330, line: 42, baseType: !329, size: 32)
!2040 = !DIDerivedType(tag: DW_TAG_member, name: "times", scope: !2037, file: !330, line: 43, baseType: !7, size: 32, offset: 32)
!2041 = !DIDerivedType(tag: DW_TAG_member, name: "av_ninsns", scope: !2030, file: !330, line: 117, baseType: !7, size: 32, offset: 256)
!2042 = !DIDerivedType(tag: DW_TAG_member, name: "num_nodes", scope: !2030, file: !330, line: 120, baseType: !7, size: 32, offset: 288)
!2043 = !DIDerivedType(tag: DW_TAG_member, name: "superloops", scope: !2030, file: !330, line: 123, baseType: !2044, size: 64, offset: 320)
!2044 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2045, size: 64)
!2045 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_gc", file: !330, line: 87, baseType: !2046)
!2046 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_gc", file: !330, line: 87, size: 128, elements: !2047)
!2047 = !{!2048}
!2048 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2046, file: !330, line: 87, baseType: !2049, size: 128)
!2049 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_base", file: !330, line: 85, baseType: !2050)
!2050 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_base", file: !330, line: 85, size: 128, elements: !2051)
!2051 = !{!2052, !2053, !2054}
!2052 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2050, file: !330, line: 85, baseType: !7, size: 32)
!2053 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2050, file: !330, line: 85, baseType: !7, size: 32, offset: 32)
!2054 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2050, file: !330, line: 85, baseType: !2055, size: 64, offset: 64)
!2055 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2056, size: 64, elements: !1584)
!2056 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_p", file: !330, line: 84, baseType: !2029)
!2057 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !2030, file: !330, line: 126, baseType: !2029, size: 64, offset: 384)
!2058 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2030, file: !330, line: 129, baseType: !2029, size: 64, offset: 448)
!2059 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2030, file: !330, line: 132, baseType: !1767, size: 64, offset: 512)
!2060 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations", scope: !2030, file: !330, line: 139, baseType: !1483, size: 64, offset: 576)
!2061 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_upper_bound", scope: !2030, file: !330, line: 143, baseType: !1532, size: 128, offset: 640)
!2062 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_estimate", scope: !2030, file: !330, line: 146, baseType: !1532, size: 128, offset: 768)
!2063 = !DIDerivedType(tag: DW_TAG_member, name: "any_upper_bound", scope: !2030, file: !330, line: 148, baseType: !1603, size: 8, offset: 896)
!2064 = !DIDerivedType(tag: DW_TAG_member, name: "any_estimate", scope: !2030, file: !330, line: 149, baseType: !1603, size: 8, offset: 904)
!2065 = !DIDerivedType(tag: DW_TAG_member, name: "estimate_state", scope: !2030, file: !330, line: 153, baseType: !338, size: 32, offset: 928)
!2066 = !DIDerivedType(tag: DW_TAG_member, name: "bounds", scope: !2030, file: !330, line: 156, baseType: !2067, size: 64, offset: 960)
!2067 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2068, size: 64)
!2068 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nb_iter_bound", file: !330, line: 48, size: 320, elements: !2069)
!2069 = !{!2070, !2071, !2072, !2073}
!2070 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2068, file: !330, line: 50, baseType: !1814, size: 64)
!2071 = !DIDerivedType(tag: DW_TAG_member, name: "bound", scope: !2068, file: !330, line: 59, baseType: !1532, size: 128, offset: 64)
!2072 = !DIDerivedType(tag: DW_TAG_member, name: "is_exit", scope: !2068, file: !330, line: 64, baseType: !1603, size: 8, offset: 192)
!2073 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2068, file: !330, line: 67, baseType: !2067, size: 64, offset: 256)
!2074 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !2030, file: !330, line: 159, baseType: !2075, size: 64, offset: 1024)
!2075 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2076, size: 64)
!2076 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop_exit", file: !330, line: 72, size: 256, elements: !2077)
!2077 = !{!2078, !2079, !2080, !2081}
!2078 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !2076, file: !330, line: 74, baseType: !1795, size: 64)
!2079 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2076, file: !330, line: 77, baseType: !2075, size: 64, offset: 64)
!2080 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2076, file: !330, line: 78, baseType: !2075, size: 64, offset: 128)
!2081 = !DIDerivedType(tag: DW_TAG_member, name: "next_e", scope: !2076, file: !330, line: 81, baseType: !2075, size: 64, offset: 192)
!2082 = !DIDerivedType(tag: DW_TAG_member, name: "can_be_parallel", scope: !2030, file: !330, line: 162, baseType: !1603, size: 8, offset: 1088)
!2083 = !DIDerivedType(tag: DW_TAG_member, name: "single_iv", scope: !2030, file: !330, line: 166, baseType: !1483, size: 64, offset: 1152)
!2084 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !1779, file: !343, line: 229, baseType: !2085, size: 128, offset: 256)
!2085 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2086, size: 128, elements: !1731)
!2086 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2087, size: 64)
!2087 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !343, line: 229, flags: DIFlagFwdDecl)
!2088 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !1779, file: !343, line: 232, baseType: !1778, size: 64, offset: 384)
!2089 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !1779, file: !343, line: 233, baseType: !1778, size: 64, offset: 448)
!2090 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !1779, file: !343, line: 238, baseType: !2091, size: 64, offset: 512)
!2091 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !343, line: 235, size: 64, elements: !2092)
!2092 = !{!2093, !2099}
!2093 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !2091, file: !343, line: 236, baseType: !2094, size: 64)
!2094 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2095, size: 64)
!2095 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !343, line: 273, size: 128, elements: !2096)
!2096 = !{!2097, !2098}
!2097 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !2095, file: !343, line: 275, baseType: !1804, size: 64)
!2098 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !2095, file: !343, line: 278, baseType: !1804, size: 64, offset: 64)
!2099 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !2091, file: !343, line: 237, baseType: !2100, size: 64)
!2100 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2101, size: 64)
!2101 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !343, line: 259, size: 320, elements: !2102)
!2102 = !{!2103, !2104, !2105, !2106, !2107}
!2103 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !2101, file: !343, line: 261, baseType: !1661, size: 64)
!2104 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !2101, file: !343, line: 262, baseType: !1661, size: 64, offset: 64)
!2105 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !2101, file: !343, line: 266, baseType: !1661, size: 64, offset: 128)
!2106 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !2101, file: !343, line: 267, baseType: !1661, size: 64, offset: 192)
!2107 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !2101, file: !343, line: 270, baseType: !1580, size: 32, offset: 256)
!2108 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1779, file: !343, line: 241, baseType: !2025, size: 64, offset: 576)
!2109 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1779, file: !343, line: 244, baseType: !1580, size: 32, offset: 640)
!2110 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !1779, file: !343, line: 247, baseType: !1580, size: 32, offset: 672)
!2111 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !1779, file: !343, line: 250, baseType: !1580, size: 32, offset: 704)
!2112 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !1779, file: !343, line: 253, baseType: !1580, size: 32, offset: 736)
!2113 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1779, file: !343, line: 256, baseType: !1580, size: 32, offset: 768)
!2114 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !1682, file: !1664, line: 179, baseType: !2115, size: 64)
!2115 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2116, size: 64)
!2116 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !1664, line: 150, baseType: !2117)
!2117 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !1664, line: 142, size: 320, elements: !2118)
!2118 = !{!2119, !2120, !2121, !2122, !2125, !2126}
!2119 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !2117, file: !1664, line: 144, baseType: !1483, size: 64)
!2120 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2117, file: !1664, line: 145, baseType: !1661, size: 64, offset: 64)
!2121 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2117, file: !1664, line: 146, baseType: !1661, size: 64, offset: 128)
!2122 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2117, file: !1664, line: 147, baseType: !2123, size: 32, offset: 192)
!2123 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !2124, line: 31, baseType: !1580)
!2124 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2125 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2117, file: !1664, line: 148, baseType: !7, size: 32, offset: 224)
!2126 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !2117, file: !1664, line: 149, baseType: !1603, size: 8, offset: 256)
!2127 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !1682, file: !1664, line: 180, baseType: !2128, size: 64)
!2128 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2129, size: 64)
!2129 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !1664, line: 162, baseType: !2130)
!2130 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !1664, line: 159, size: 128, elements: !2131)
!2131 = !{!2132, !2133}
!2132 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2130, file: !1664, line: 160, baseType: !1483, size: 64)
!2133 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2130, file: !1664, line: 161, baseType: !1539, size: 64, offset: 64)
!2134 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !1682, file: !1664, line: 181, baseType: !2135, size: 64)
!2135 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2136, size: 64)
!2136 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !1664, line: 181, flags: DIFlagFwdDecl)
!2137 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !1677, file: !1664, line: 317, baseType: !2138, size: 64)
!2138 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1539, size: 64, elements: !1584)
!2139 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !1677, file: !1664, line: 318, baseType: !2140, size: 320)
!2140 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !1664, line: 188, size: 320, elements: !2141)
!2141 = !{!2142, !2144, !2167}
!2142 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !2140, file: !1664, line: 190, baseType: !2143, size: 192)
!2143 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1681, size: 192, elements: !1557)
!2144 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2140, file: !1664, line: 193, baseType: !2145, size: 64, offset: 192)
!2145 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2146, size: 64)
!2146 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !1664, line: 206, size: 320, elements: !2147)
!2147 = !{!2148, !2152, !2153, !2154, !2166}
!2148 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !2146, file: !1664, line: 208, baseType: !2149, size: 64)
!2149 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2150, size: 64)
!2150 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !1484, line: 62, baseType: !2151)
!2151 = !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !1484, line: 61, flags: DIFlagFwdDecl)
!2152 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !2146, file: !1664, line: 211, baseType: !7, size: 32, offset: 64)
!2153 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2146, file: !1664, line: 214, baseType: !1539, size: 64, offset: 128)
!2154 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !2146, file: !1664, line: 224, baseType: !2155, size: 64, offset: 192)
!2155 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2156, size: 64)
!2156 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !1664, line: 202, baseType: !2157)
!2157 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !1664, line: 202, size: 128, elements: !2158)
!2158 = !{!2159}
!2159 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2157, file: !1664, line: 202, baseType: !2160, size: 128)
!2160 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !1664, line: 200, baseType: !2161)
!2161 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !1664, line: 200, size: 128, elements: !2162)
!2162 = !{!2163, !2164, !2165}
!2163 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2161, file: !1664, line: 200, baseType: !7, size: 32)
!2164 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2161, file: !1664, line: 200, baseType: !7, size: 32, offset: 32)
!2165 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2161, file: !1664, line: 200, baseType: !1697, size: 64, offset: 64)
!2166 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !2146, file: !1664, line: 234, baseType: !2155, size: 64, offset: 256)
!2167 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2140, file: !1664, line: 197, baseType: !1539, size: 64, offset: 256)
!2168 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !1677, file: !1664, line: 319, baseType: !1546, size: 256)
!2169 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !1677, file: !1664, line: 320, baseType: !1565, size: 192)
!2170 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !1486, file: !135, line: 3384, baseType: !2171, size: 1472)
!2171 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !135, line: 3114, size: 1472, elements: !2172)
!2172 = !{!2173, !2194, !2195, !2196, !2197}
!2173 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2171, file: !135, line: 3115, baseType: !2174, size: 1216)
!2174 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !135, line: 2984, size: 1216, elements: !2175)
!2175 = !{!2176, !2177, !2178, !2179, !2180, !2181, !2182, !2183, !2184, !2185, !2186, !2187, !2188, !2189, !2190, !2191, !2192, !2193}
!2176 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2174, file: !135, line: 2985, baseType: !1657, size: 960)
!2177 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !2174, file: !135, line: 2986, baseType: !1483, size: 64, offset: 960)
!2178 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !2174, file: !135, line: 2987, baseType: !1483, size: 64, offset: 1024)
!2179 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !2174, file: !135, line: 2988, baseType: !1483, size: 64, offset: 1088)
!2180 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !2174, file: !135, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!2181 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !2174, file: !135, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!2182 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !2174, file: !135, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!2183 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !2174, file: !135, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!2184 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !2174, file: !135, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!2185 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !2174, file: !135, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!2186 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !2174, file: !135, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!2187 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !2174, file: !135, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!2188 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !2174, file: !135, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!2189 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !2174, file: !135, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!2190 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !2174, file: !135, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!2191 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !2174, file: !135, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!2192 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !2174, file: !135, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!2193 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !2174, file: !135, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!2194 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !2171, file: !135, line: 3117, baseType: !1483, size: 64, offset: 1216)
!2195 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !2171, file: !135, line: 3119, baseType: !1483, size: 64, offset: 1280)
!2196 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !2171, file: !135, line: 3121, baseType: !1483, size: 64, offset: 1344)
!2197 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !2171, file: !135, line: 3123, baseType: !1483, size: 64, offset: 1408)
!2198 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !1486, file: !135, line: 3385, baseType: !2199, size: 1088)
!2199 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !135, line: 2874, size: 1088, elements: !2200)
!2200 = !{!2201, !2202, !2203}
!2201 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2199, file: !135, line: 2875, baseType: !1657, size: 960)
!2202 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !2199, file: !135, line: 2876, baseType: !1661, size: 64, offset: 960)
!2203 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2199, file: !135, line: 2877, baseType: !2204, size: 64, offset: 1024)
!2204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2205, size: 64)
!2205 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !2206, line: 172, size: 128, elements: !2207)
!2206 = !DIFile(filename: "./tree-flow.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2207 = !{!2208, !2209, !2210, !2211, !2212, !2213, !2214}
!2208 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !2205, file: !2206, line: 174, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!2209 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !2205, file: !2206, line: 178, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!2210 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !2205, file: !2206, line: 183, baseType: !7, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!2211 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !2205, file: !2206, line: 187, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2212 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !2205, file: !2206, line: 192, baseType: !7, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2213 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !2205, file: !2206, line: 195, baseType: !7, size: 32, offset: 32)
!2214 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !2205, file: !2206, line: 199, baseType: !1483, size: 64, offset: 64)
!2215 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !1486, file: !135, line: 3386, baseType: !2174, size: 1216)
!2216 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !1486, file: !135, line: 3387, baseType: !2217, size: 1280)
!2217 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !135, line: 3093, size: 1280, elements: !2218)
!2218 = !{!2219, !2220}
!2219 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2217, file: !135, line: 3094, baseType: !2174, size: 1216)
!2220 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2217, file: !135, line: 3095, baseType: !2204, size: 64, offset: 1216)
!2221 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !1486, file: !135, line: 3388, baseType: !2222, size: 1216)
!2222 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !135, line: 2824, size: 1216, elements: !2223)
!2223 = !{!2224, !2225, !2226, !2227, !2228, !2229}
!2224 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2222, file: !135, line: 2825, baseType: !1619, size: 896)
!2225 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2222, file: !135, line: 2827, baseType: !1483, size: 64, offset: 896)
!2226 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !2222, file: !135, line: 2828, baseType: !1483, size: 64, offset: 960)
!2227 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !2222, file: !135, line: 2829, baseType: !1483, size: 64, offset: 1024)
!2228 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !2222, file: !135, line: 2830, baseType: !1483, size: 64, offset: 1088)
!2229 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !2222, file: !135, line: 2831, baseType: !1483, size: 64, offset: 1152)
!2230 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !1486, file: !135, line: 3389, baseType: !2231, size: 1024)
!2231 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !135, line: 2850, size: 1024, elements: !2232)
!2232 = !{!2233, !2234, !2235}
!2233 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2231, file: !135, line: 2851, baseType: !1657, size: 960)
!2234 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !2231, file: !135, line: 2852, baseType: !1580, size: 32, offset: 960)
!2235 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !2231, file: !135, line: 2853, baseType: !1580, size: 32, offset: 992)
!2236 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !1486, file: !135, line: 3390, baseType: !2237, size: 1024)
!2237 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !135, line: 2857, size: 1024, elements: !2238)
!2238 = !{!2239, !2240}
!2239 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2237, file: !135, line: 2858, baseType: !1657, size: 960)
!2240 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2237, file: !135, line: 2859, baseType: !2204, size: 64, offset: 960)
!2241 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !1486, file: !135, line: 3391, baseType: !2242, size: 960)
!2242 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !135, line: 2862, size: 960, elements: !2243)
!2243 = !{!2244}
!2244 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2242, file: !135, line: 2863, baseType: !1657, size: 960)
!2245 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !1486, file: !135, line: 3392, baseType: !2246, size: 1472)
!2246 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !135, line: 3304, size: 1472, elements: !2247)
!2247 = !{!2248}
!2248 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2246, file: !135, line: 3305, baseType: !2171, size: 1472)
!2249 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !1486, file: !135, line: 3393, baseType: !2250, size: 1792)
!2250 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !135, line: 3248, size: 1792, elements: !2251)
!2251 = !{!2252, !2253, !2471, !2472, !2473, !2474, !2475, !2476, !2477, !2478, !2479, !2480, !2481, !2482, !2483, !2484, !2485, !2486, !2487, !2488, !2489, !2490, !2491}
!2252 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2250, file: !135, line: 3249, baseType: !2171, size: 1472)
!2253 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !2250, file: !135, line: 3251, baseType: !2254, size: 64, offset: 1472)
!2254 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2255, size: 64)
!2255 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !2256, line: 463, size: 1152, elements: !2257)
!2256 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2257 = !{!2258, !2261, !2292, !2293, !2407, !2415, !2416, !2417, !2418, !2419, !2420, !2444, !2447, !2448, !2449, !2450, !2451, !2452, !2453, !2454, !2455, !2456, !2457, !2458, !2459, !2460, !2461, !2462, !2463, !2464, !2465, !2466, !2467, !2468, !2469, !2470}
!2258 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !2255, file: !2256, line: 464, baseType: !2259, size: 64)
!2259 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2260, size: 64)
!2260 = !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !2256, line: 464, flags: DIFlagFwdDecl)
!2261 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !2255, file: !2256, line: 467, baseType: !2262, size: 64, offset: 64)
!2262 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2263, size: 64)
!2263 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !343, line: 374, size: 640, elements: !2264)
!2264 = !{!2265, !2267, !2268, !2281, !2282, !2283, !2284, !2285, !2286, !2288, !2290, !2291}
!2265 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !2263, file: !343, line: 377, baseType: !2266, size: 64)
!2266 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !1484, line: 111, baseType: !1778)
!2267 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !2263, file: !343, line: 378, baseType: !2266, size: 64, offset: 64)
!2268 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !2263, file: !343, line: 381, baseType: !2269, size: 64, offset: 128)
!2269 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2270, size: 64)
!2270 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !343, line: 282, baseType: !2271)
!2271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !343, line: 282, size: 128, elements: !2272)
!2272 = !{!2273}
!2273 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2271, file: !343, line: 282, baseType: !2274, size: 128)
!2274 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !343, line: 281, baseType: !2275)
!2275 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !343, line: 281, size: 128, elements: !2276)
!2276 = !{!2277, !2278, !2279}
!2277 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2275, file: !343, line: 281, baseType: !7, size: 32)
!2278 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2275, file: !343, line: 281, baseType: !7, size: 32, offset: 32)
!2279 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2275, file: !343, line: 281, baseType: !2280, size: 64, offset: 64)
!2280 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2266, size: 64, elements: !1584)
!2281 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !2263, file: !343, line: 384, baseType: !1580, size: 32, offset: 192)
!2282 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !2263, file: !343, line: 387, baseType: !1580, size: 32, offset: 224)
!2283 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !2263, file: !343, line: 390, baseType: !1580, size: 32, offset: 256)
!2284 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !2263, file: !343, line: 394, baseType: !2269, size: 64, offset: 320)
!2285 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !2263, file: !343, line: 396, baseType: !342, size: 32, offset: 384)
!2286 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !2263, file: !343, line: 399, baseType: !2287, size: 64, offset: 416)
!2287 = !DICompositeType(tag: DW_TAG_array_type, baseType: !348, size: 64, elements: !1731)
!2288 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !2263, file: !343, line: 402, baseType: !2289, size: 64, offset: 480)
!2289 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !1731)
!2290 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !2263, file: !343, line: 406, baseType: !1580, size: 32, offset: 544)
!2291 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !2263, file: !343, line: 409, baseType: !1580, size: 32, offset: 576)
!2292 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !2255, file: !2256, line: 470, baseType: !1805, size: 64, offset: 128)
!2293 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !2255, file: !2256, line: 473, baseType: !2294, size: 64, offset: 192)
!2294 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2295, size: 64)
!2295 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !2206, line: 39, size: 1152, elements: !2296)
!2296 = !{!2297, !2346, !2359, !2371, !2372, !2384, !2385, !2389, !2390, !2391, !2392, !2393}
!2297 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !2295, file: !2206, line: 41, baseType: !2298, size: 64)
!2298 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !430, line: 144, baseType: !2299)
!2299 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2300, size: 64)
!2300 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !430, line: 100, size: 896, elements: !2301)
!2301 = !{!2302, !2310, !2315, !2320, !2322, !2323, !2324, !2325, !2326, !2327, !2332, !2334, !2335, !2340, !2345}
!2302 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !2300, file: !430, line: 102, baseType: !2303, size: 64)
!2303 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !430, line: 52, baseType: !2304)
!2304 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2305, size: 64)
!2305 = !DISubroutineType(types: !2306)
!2306 = !{!2307, !2308}
!2307 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !430, line: 47, baseType: !7)
!2308 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2309, size: 64)
!2309 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!2310 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !2300, file: !430, line: 105, baseType: !2311, size: 64, offset: 64)
!2311 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !430, line: 59, baseType: !2312)
!2312 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2313, size: 64)
!2313 = !DISubroutineType(types: !2314)
!2314 = !{!1580, !2308, !2308}
!2315 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !2300, file: !430, line: 108, baseType: !2316, size: 64, offset: 128)
!2316 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !430, line: 63, baseType: !2317)
!2317 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2318, size: 64)
!2318 = !DISubroutineType(types: !2319)
!2319 = !{null, !1767}
!2320 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !2300, file: !430, line: 111, baseType: !2321, size: 64, offset: 192)
!2321 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1767, size: 64)
!2322 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2300, file: !430, line: 114, baseType: !1959, size: 64, offset: 256)
!2323 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !2300, file: !430, line: 117, baseType: !1959, size: 64, offset: 320)
!2324 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !2300, file: !430, line: 120, baseType: !1959, size: 64, offset: 384)
!2325 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !2300, file: !430, line: 124, baseType: !7, size: 32, offset: 448)
!2326 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !2300, file: !430, line: 128, baseType: !7, size: 32, offset: 480)
!2327 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !2300, file: !430, line: 131, baseType: !2328, size: 64, offset: 512)
!2328 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !430, line: 75, baseType: !2329)
!2329 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2330, size: 64)
!2330 = !DISubroutineType(types: !2331)
!2331 = !{!1767, !1959, !1959}
!2332 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !2300, file: !430, line: 132, baseType: !2333, size: 64, offset: 576)
!2333 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !430, line: 78, baseType: !2317)
!2334 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !2300, file: !430, line: 135, baseType: !1767, size: 64, offset: 640)
!2335 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !2300, file: !430, line: 136, baseType: !2336, size: 64, offset: 704)
!2336 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !430, line: 82, baseType: !2337)
!2337 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2338, size: 64)
!2338 = !DISubroutineType(types: !2339)
!2339 = !{!1767, !1767, !1959, !1959}
!2340 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !2300, file: !430, line: 137, baseType: !2341, size: 64, offset: 768)
!2341 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !430, line: 83, baseType: !2342)
!2342 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2343, size: 64)
!2343 = !DISubroutineType(types: !2344)
!2344 = !{null, !1767, !1767}
!2345 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !2300, file: !430, line: 141, baseType: !7, size: 32, offset: 832)
!2346 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !2295, file: !2206, line: 48, baseType: !2347, size: 64, offset: 64)
!2347 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2348, size: 64)
!2348 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !391, line: 35, baseType: !2349)
!2349 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !391, line: 35, size: 128, elements: !2350)
!2350 = !{!2351}
!2351 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2349, file: !391, line: 35, baseType: !2352, size: 128)
!2352 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !391, line: 33, baseType: !2353)
!2353 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !391, line: 33, size: 128, elements: !2354)
!2354 = !{!2355, !2356, !2357}
!2355 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2353, file: !391, line: 33, baseType: !7, size: 32)
!2356 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2353, file: !391, line: 33, baseType: !7, size: 32, offset: 32)
!2357 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2353, file: !391, line: 33, baseType: !2358, size: 64, offset: 64)
!2358 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1814, size: 64, elements: !1584)
!2359 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !2295, file: !2206, line: 51, baseType: !2360, size: 64, offset: 128)
!2360 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2361, size: 64)
!2361 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !135, line: 183, baseType: !2362)
!2362 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !135, line: 183, size: 128, elements: !2363)
!2363 = !{!2364}
!2364 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2362, file: !135, line: 183, baseType: !2365, size: 128)
!2365 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !135, line: 182, baseType: !2366)
!2366 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !135, line: 182, size: 128, elements: !2367)
!2367 = !{!2368, !2369, !2370}
!2368 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2366, file: !135, line: 182, baseType: !7, size: 32)
!2369 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2366, file: !135, line: 182, baseType: !7, size: 32, offset: 32)
!2370 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2366, file: !135, line: 182, baseType: !1867, size: 64, offset: 64)
!2371 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !2295, file: !2206, line: 54, baseType: !1483, size: 64, offset: 192)
!2372 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !2295, file: !2206, line: 57, baseType: !2373, size: 128, offset: 256)
!2373 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !2374, line: 31, size: 128, elements: !2375)
!2374 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2375 = !{!2376, !2377, !2378, !2379, !2380, !2381, !2382}
!2376 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !2373, file: !2374, line: 35, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!2377 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !2373, file: !2374, line: 39, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!2378 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !2373, file: !2374, line: 42, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!2379 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !2373, file: !2374, line: 46, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!2380 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !2373, file: !2374, line: 50, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2381 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !2373, file: !2374, line: 53, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2382 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2373, file: !2374, line: 56, baseType: !2383, size: 64, offset: 64)
!2383 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !1484, line: 47, baseType: !1715)
!2384 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !2295, file: !2206, line: 60, baseType: !2373, size: 128, offset: 384)
!2385 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !2295, file: !2206, line: 64, baseType: !2386, size: 64, offset: 512)
!2386 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2387, size: 64)
!2387 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !2388, line: 33, flags: DIFlagFwdDecl)
!2388 = !DIFile(filename: "./pointer-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2389 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !2295, file: !2206, line: 67, baseType: !1483, size: 64, offset: 576)
!2390 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !2295, file: !2206, line: 73, baseType: !2298, size: 64, offset: 640)
!2391 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !2295, file: !2206, line: 77, baseType: !2383, size: 64, offset: 704)
!2392 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !2295, file: !2206, line: 80, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!2393 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !2295, file: !2206, line: 82, baseType: !2394, size: 320, offset: 832)
!2394 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !1348, line: 62, size: 320, elements: !2395)
!2395 = !{!2396, !2402, !2403, !2404, !2405, !2406}
!2396 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !2394, file: !1348, line: 63, baseType: !2397, size: 64)
!2397 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2398, size: 64)
!2398 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !1348, line: 56, size: 128, elements: !2399)
!2399 = !{!2400, !2401}
!2400 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2398, file: !1348, line: 57, baseType: !2397, size: 64)
!2401 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !2398, file: !1348, line: 58, baseType: !1582, size: 8, offset: 64)
!2402 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !2394, file: !1348, line: 64, baseType: !7, size: 32, offset: 64)
!2403 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !2394, file: !1348, line: 66, baseType: !7, size: 32, offset: 96)
!2404 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !2394, file: !1348, line: 68, baseType: !1603, size: 8, offset: 128)
!2405 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !2394, file: !1348, line: 70, baseType: !1843, size: 64, offset: 192)
!2406 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !2394, file: !1348, line: 71, baseType: !1850, size: 64, offset: 256)
!2407 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !2255, file: !2256, line: 476, baseType: !2408, size: 64, offset: 256)
!2408 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2409, size: 64)
!2409 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !330, line: 187, size: 256, elements: !2410)
!2410 = !{!2411, !2412, !2413, !2414}
!2411 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !2409, file: !330, line: 189, baseType: !1580, size: 32)
!2412 = !DIDerivedType(tag: DW_TAG_member, name: "larray", scope: !2409, file: !330, line: 192, baseType: !2044, size: 64, offset: 64)
!2413 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !2409, file: !330, line: 197, baseType: !2298, size: 64, offset: 128)
!2414 = !DIDerivedType(tag: DW_TAG_member, name: "tree_root", scope: !2409, file: !330, line: 200, baseType: !2029, size: 64, offset: 192)
!2415 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !2255, file: !2256, line: 479, baseType: !2298, size: 64, offset: 320)
!2416 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2255, file: !2256, line: 484, baseType: !1483, size: 64, offset: 384)
!2417 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !2255, file: !2256, line: 488, baseType: !1483, size: 64, offset: 448)
!2418 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !2255, file: !2256, line: 493, baseType: !1483, size: 64, offset: 512)
!2419 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !2255, file: !2256, line: 496, baseType: !1483, size: 64, offset: 576)
!2420 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !2255, file: !2256, line: 501, baseType: !2421, size: 64, offset: 640)
!2421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2422, size: 64)
!2422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !354, line: 2355, size: 576, elements: !2423)
!2423 = !{!2424, !2427, !2428, !2429, !2430, !2432, !2433, !2438, !2439, !2440, !2441, !2442, !2443}
!2424 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !2422, file: !354, line: 2356, baseType: !2425, size: 64)
!2425 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2426, size: 64)
!2426 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !354, line: 2356, flags: DIFlagFwdDecl)
!2427 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !2422, file: !354, line: 2357, baseType: !1687, size: 64, offset: 64)
!2428 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !2422, file: !354, line: 2358, baseType: !1580, size: 32, offset: 128)
!2429 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !2422, file: !354, line: 2359, baseType: !1580, size: 32, offset: 160)
!2430 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !2422, file: !354, line: 2360, baseType: !2431, size: 128, offset: 192)
!2431 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1580, size: 128, elements: !1756)
!2432 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !2422, file: !354, line: 2364, baseType: !1580, size: 32, offset: 320)
!2433 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !2422, file: !354, line: 2367, baseType: !2434, size: 128, offset: 384)
!2434 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !354, line: 2349, size: 128, elements: !2435)
!2435 = !{!2436, !2437}
!2436 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !2434, file: !354, line: 2351, baseType: !1661, size: 64)
!2437 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2434, file: !354, line: 2352, baseType: !1539, size: 64, offset: 64)
!2438 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !2422, file: !354, line: 2371, baseType: !353, size: 32, offset: 512)
!2439 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !2422, file: !354, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!2440 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !2422, file: !354, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!2441 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !2422, file: !354, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!2442 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !2422, file: !354, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!2443 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !2422, file: !354, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!2444 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !2255, file: !2256, line: 504, baseType: !2445, size: 64, offset: 704)
!2445 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2446, size: 64)
!2446 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !2256, line: 504, flags: DIFlagFwdDecl)
!2447 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !2255, file: !2256, line: 507, baseType: !2298, size: 64, offset: 768)
!2448 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !2255, file: !2256, line: 510, baseType: !1580, size: 32, offset: 832)
!2449 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !2255, file: !2256, line: 513, baseType: !1580, size: 32, offset: 864)
!2450 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !2255, file: !2256, line: 516, baseType: !1611, size: 32, offset: 896)
!2451 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !2255, file: !2256, line: 519, baseType: !1611, size: 32, offset: 928)
!2452 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !2255, file: !2256, line: 522, baseType: !7, size: 32, offset: 960)
!2453 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !2255, file: !2256, line: 523, baseType: !7, size: 32, offset: 992)
!2454 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !2255, file: !2256, line: 528, baseType: !1687, size: 64, offset: 1024)
!2455 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !2255, file: !2256, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!2456 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !2255, file: !2256, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!2457 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !2255, file: !2256, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!2458 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !2255, file: !2256, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!2459 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !2255, file: !2256, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!2460 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !2255, file: !2256, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!2461 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !2255, file: !2256, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!2462 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !2255, file: !2256, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!2463 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !2255, file: !2256, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!2464 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !2255, file: !2256, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!2465 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !2255, file: !2256, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!2466 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !2255, file: !2256, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!2467 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !2255, file: !2256, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!2468 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !2255, file: !2256, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!2469 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !2255, file: !2256, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!2470 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !2255, file: !2256, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!2471 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !2250, file: !135, line: 3254, baseType: !1483, size: 64, offset: 1536)
!2472 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !2250, file: !135, line: 3257, baseType: !1483, size: 64, offset: 1600)
!2473 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !2250, file: !135, line: 3258, baseType: !1483, size: 64, offset: 1664)
!2474 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !2250, file: !135, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!2475 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !2250, file: !135, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!2476 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !2250, file: !135, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!2477 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !2250, file: !135, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!2478 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !2250, file: !135, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!2479 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !2250, file: !135, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!2480 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !2250, file: !135, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!2481 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !2250, file: !135, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!2482 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !2250, file: !135, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!2483 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !2250, file: !135, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!2484 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !2250, file: !135, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!2485 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !2250, file: !135, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!2486 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !2250, file: !135, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!2487 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !2250, file: !135, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!2488 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !2250, file: !135, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!2489 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !2250, file: !135, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!2490 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !2250, file: !135, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!2491 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !2250, file: !135, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!2492 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1486, file: !135, line: 3394, baseType: !2493, size: 1344)
!2493 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !135, line: 2279, size: 1344, elements: !2494)
!2494 = !{!2495, !2496, !2497, !2498, !2499, !2500, !2501, !2502, !2503, !2504, !2505, !2506, !2507, !2508, !2509, !2510, !2511, !2512, !2513, !2514, !2515, !2516, !2517, !2518, !2519, !2520, !2528, !2529, !2530, !2531, !2532, !2533, !2534, !2535, !2536}
!2495 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2493, file: !135, line: 2280, baseType: !1522, size: 192)
!2496 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !2493, file: !135, line: 2281, baseType: !1483, size: 64, offset: 192)
!2497 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2493, file: !135, line: 2282, baseType: !1483, size: 64, offset: 256)
!2498 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !2493, file: !135, line: 2283, baseType: !1483, size: 64, offset: 320)
!2499 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !2493, file: !135, line: 2284, baseType: !1483, size: 64, offset: 384)
!2500 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2493, file: !135, line: 2285, baseType: !7, size: 32, offset: 448)
!2501 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !2493, file: !135, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!2502 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !2493, file: !135, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!2503 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !2493, file: !135, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!2504 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !2493, file: !135, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!2505 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !2493, file: !135, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!2506 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !2493, file: !135, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!2507 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2493, file: !135, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!2508 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !2493, file: !135, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!2509 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !2493, file: !135, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!2510 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !2493, file: !135, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!2511 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !2493, file: !135, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!2512 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !2493, file: !135, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!2513 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !2493, file: !135, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!2514 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !2493, file: !135, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!2515 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !2493, file: !135, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!2516 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2493, file: !135, line: 2305, baseType: !7, size: 32, offset: 512)
!2517 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !2493, file: !135, line: 2306, baseType: !2123, size: 32, offset: 544)
!2518 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !2493, file: !135, line: 2307, baseType: !1483, size: 64, offset: 576)
!2519 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !2493, file: !135, line: 2308, baseType: !1483, size: 64, offset: 640)
!2520 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !2493, file: !135, line: 2314, baseType: !2521, size: 64, offset: 704)
!2521 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !135, line: 2309, size: 64, elements: !2522)
!2522 = !{!2523, !2524, !2525}
!2523 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !2521, file: !135, line: 2310, baseType: !1580, size: 32)
!2524 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !2521, file: !135, line: 2311, baseType: !1687, size: 64)
!2525 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !2521, file: !135, line: 2312, baseType: !2526, size: 64)
!2526 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2527, size: 64)
!2527 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !135, line: 2277, flags: DIFlagFwdDecl)
!2528 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2493, file: !135, line: 2315, baseType: !1483, size: 64, offset: 768)
!2529 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !2493, file: !135, line: 2316, baseType: !1483, size: 64, offset: 832)
!2530 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !2493, file: !135, line: 2317, baseType: !1483, size: 64, offset: 896)
!2531 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !2493, file: !135, line: 2318, baseType: !1483, size: 64, offset: 960)
!2532 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !2493, file: !135, line: 2319, baseType: !1483, size: 64, offset: 1024)
!2533 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !2493, file: !135, line: 2320, baseType: !1483, size: 64, offset: 1088)
!2534 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !2493, file: !135, line: 2321, baseType: !1483, size: 64, offset: 1152)
!2535 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !2493, file: !135, line: 2322, baseType: !1483, size: 64, offset: 1216)
!2536 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !2493, file: !135, line: 2324, baseType: !2537, size: 64, offset: 1280)
!2537 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2538, size: 64)
!2538 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !135, line: 2324, flags: DIFlagFwdDecl)
!2539 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !1486, file: !135, line: 3395, baseType: !2540, size: 320)
!2540 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !135, line: 1469, size: 320, elements: !2541)
!2541 = !{!2542, !2543, !2544}
!2542 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2540, file: !135, line: 1470, baseType: !1522, size: 192)
!2543 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !2540, file: !135, line: 1471, baseType: !1483, size: 64, offset: 192)
!2544 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2540, file: !135, line: 1472, baseType: !1483, size: 64, offset: 256)
!2545 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1486, file: !135, line: 3396, baseType: !2546, size: 320)
!2546 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !135, line: 1482, size: 320, elements: !2547)
!2547 = !{!2548, !2549, !2550}
!2548 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2546, file: !135, line: 1483, baseType: !1522, size: 192)
!2549 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !2546, file: !135, line: 1484, baseType: !1580, size: 32, offset: 192)
!2550 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !2546, file: !135, line: 1485, baseType: !1867, size: 64, offset: 256)
!2551 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !1486, file: !135, line: 3397, baseType: !2552, size: 384)
!2552 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !135, line: 1829, size: 384, elements: !2553)
!2553 = !{!2554, !2555, !2556, !2557}
!2554 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2552, file: !135, line: 1830, baseType: !1522, size: 192)
!2555 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2552, file: !135, line: 1831, baseType: !1611, size: 32, offset: 192)
!2556 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2552, file: !135, line: 1832, baseType: !1483, size: 64, offset: 256)
!2557 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !2552, file: !135, line: 1835, baseType: !1867, size: 64, offset: 320)
!2558 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1486, file: !135, line: 3398, baseType: !2559, size: 704)
!2559 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !135, line: 1898, size: 704, elements: !2560)
!2560 = !{!2561, !2562, !2563, !2564, !2565, !2570}
!2561 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2559, file: !135, line: 1899, baseType: !1522, size: 192)
!2562 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !2559, file: !135, line: 1902, baseType: !1483, size: 64, offset: 192)
!2563 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !2559, file: !135, line: 1905, baseType: !1814, size: 64, offset: 256)
!2564 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !2559, file: !135, line: 1908, baseType: !7, size: 32, offset: 320)
!2565 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !2559, file: !135, line: 1911, baseType: !2566, size: 64, offset: 384)
!2566 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2567, size: 64)
!2567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !2206, line: 117, size: 128, elements: !2568)
!2568 = !{!2569}
!2569 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !2567, file: !2206, line: 120, baseType: !2373, size: 128)
!2570 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !2559, file: !135, line: 1914, baseType: !1855, size: 256, offset: 448)
!2571 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1486, file: !135, line: 3399, baseType: !2572, size: 704)
!2572 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !135, line: 2008, size: 704, elements: !2573)
!2573 = !{!2574, !2575, !2576, !2577, !2578, !2579, !2580, !2581, !2582, !2583, !2584}
!2574 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2572, file: !135, line: 2009, baseType: !1522, size: 192)
!2575 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !2572, file: !135, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!2576 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !2572, file: !135, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!2577 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2572, file: !135, line: 2014, baseType: !1611, size: 32, offset: 224)
!2578 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2572, file: !135, line: 2016, baseType: !1483, size: 64, offset: 256)
!2579 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !2572, file: !135, line: 2017, baseType: !2360, size: 64, offset: 320)
!2580 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !2572, file: !135, line: 2019, baseType: !1483, size: 64, offset: 384)
!2581 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !2572, file: !135, line: 2020, baseType: !1483, size: 64, offset: 448)
!2582 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !2572, file: !135, line: 2021, baseType: !1483, size: 64, offset: 512)
!2583 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !2572, file: !135, line: 2022, baseType: !1483, size: 64, offset: 576)
!2584 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !2572, file: !135, line: 2023, baseType: !1483, size: 64, offset: 640)
!2585 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1486, file: !135, line: 3400, baseType: !2586, size: 832)
!2586 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !135, line: 2430, size: 832, elements: !2587)
!2587 = !{!2588, !2589, !2590, !2591, !2592, !2593, !2594, !2595, !2596, !2597}
!2588 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2586, file: !135, line: 2431, baseType: !1522, size: 192)
!2589 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2586, file: !135, line: 2433, baseType: !1483, size: 64, offset: 192)
!2590 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !2586, file: !135, line: 2434, baseType: !1483, size: 64, offset: 256)
!2591 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !2586, file: !135, line: 2435, baseType: !1483, size: 64, offset: 320)
!2592 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !2586, file: !135, line: 2436, baseType: !1483, size: 64, offset: 384)
!2593 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !2586, file: !135, line: 2437, baseType: !2360, size: 64, offset: 448)
!2594 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !2586, file: !135, line: 2438, baseType: !1483, size: 64, offset: 512)
!2595 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !2586, file: !135, line: 2440, baseType: !1483, size: 64, offset: 576)
!2596 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !2586, file: !135, line: 2441, baseType: !1483, size: 64, offset: 640)
!2597 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !2586, file: !135, line: 2443, baseType: !2598, size: 128, offset: 704)
!2598 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !135, line: 182, baseType: !2599)
!2599 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !135, line: 182, size: 128, elements: !2600)
!2600 = !{!2601}
!2601 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2599, file: !135, line: 182, baseType: !2365, size: 128)
!2602 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !1486, file: !135, line: 3401, baseType: !2603, size: 320)
!2603 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !135, line: 3327, size: 320, elements: !2604)
!2604 = !{!2605, !2606, !2613}
!2605 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2603, file: !135, line: 3329, baseType: !1522, size: 192)
!2606 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !2603, file: !135, line: 3330, baseType: !2607, size: 64, offset: 192)
!2607 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2608, size: 64)
!2608 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !135, line: 3320, size: 192, elements: !2609)
!2609 = !{!2610, !2611, !2612}
!2610 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2608, file: !135, line: 3322, baseType: !2607, size: 64)
!2611 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2608, file: !135, line: 3323, baseType: !2607, size: 64, offset: 64)
!2612 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2608, file: !135, line: 3324, baseType: !1483, size: 64, offset: 128)
!2613 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !2603, file: !135, line: 3331, baseType: !2607, size: 64, offset: 256)
!2614 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !1486, file: !135, line: 3402, baseType: !2615, size: 256)
!2615 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !135, line: 1540, size: 256, elements: !2616)
!2616 = !{!2617, !2618}
!2617 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2615, file: !135, line: 1541, baseType: !1522, size: 192)
!2618 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !2615, file: !135, line: 1542, baseType: !2619, size: 64, offset: 192)
!2619 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2620, size: 64)
!2620 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !135, line: 1538, baseType: !2621)
!2621 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !135, line: 1538, size: 192, elements: !2622)
!2622 = !{!2623}
!2623 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2621, file: !135, line: 1538, baseType: !2624, size: 192)
!2624 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !135, line: 1537, baseType: !2625)
!2625 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !135, line: 1537, size: 192, elements: !2626)
!2626 = !{!2627, !2628, !2629}
!2627 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2625, file: !135, line: 1537, baseType: !7, size: 32)
!2628 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2625, file: !135, line: 1537, baseType: !7, size: 32, offset: 32)
!2629 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2625, file: !135, line: 1537, baseType: !2630, size: 128, offset: 64)
!2630 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2631, size: 128, elements: !1584)
!2631 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !135, line: 1535, baseType: !2632)
!2632 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !135, line: 1532, size: 128, elements: !2633)
!2633 = !{!2634, !2635}
!2634 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2632, file: !135, line: 1533, baseType: !1483, size: 64)
!2635 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2632, file: !135, line: 1534, baseType: !1483, size: 64, offset: 64)
!2636 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !1486, file: !135, line: 3403, baseType: !2637, size: 512)
!2637 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !135, line: 1938, size: 512, elements: !2638)
!2638 = !{!2639, !2640, !2641, !2642, !2648, !2649, !2650}
!2639 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2637, file: !135, line: 1939, baseType: !1522, size: 192)
!2640 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2637, file: !135, line: 1940, baseType: !1611, size: 32, offset: 192)
!2641 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2637, file: !135, line: 1941, baseType: !358, size: 32, offset: 224)
!2642 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !2637, file: !135, line: 1946, baseType: !2643, size: 32, offset: 256)
!2643 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !135, line: 1942, size: 32, elements: !2644)
!2644 = !{!2645, !2646, !2647}
!2645 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !2643, file: !135, line: 1943, baseType: !376, size: 32)
!2646 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !2643, file: !135, line: 1944, baseType: !383, size: 32)
!2647 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !2643, file: !135, line: 1945, baseType: !134, size: 32)
!2648 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !2637, file: !135, line: 1950, baseType: !1804, size: 64, offset: 320)
!2649 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !2637, file: !135, line: 1951, baseType: !1804, size: 64, offset: 384)
!2650 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !2637, file: !135, line: 1953, baseType: !1867, size: 64, offset: 448)
!2651 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !1486, file: !135, line: 3404, baseType: !2652, size: 1664)
!2652 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !135, line: 3337, size: 1664, elements: !2653)
!2653 = !{!2654, !2655}
!2654 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2652, file: !135, line: 3338, baseType: !1522, size: 192)
!2655 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2652, file: !135, line: 3341, baseType: !2656, size: 1472, offset: 192)
!2656 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !2657, line: 410, size: 1472, elements: !2658)
!2657 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2658 = !{!2659, !2660, !2661, !2662, !2663, !2664, !2665, !2666, !2667, !2669, !2670, !2671, !2672, !2673, !2674, !2675, !2676, !2677, !2678, !2679, !2680, !2681, !2682, !2683, !2684, !2685, !2686, !2687, !2688, !2689, !2690, !2691, !2692, !2693, !2694, !2695, !2696, !2697, !2698, !2699, !2700, !2701, !2702, !2703, !2704, !2705, !2706, !2707, !2708, !2709, !2710, !2711, !2712, !2713, !2714, !2715, !2716, !2717, !2718, !2719, !2720, !2721, !2722, !2723, !2724, !2725, !2726, !2727, !2728, !2729, !2730, !2731, !2732, !2733, !2734, !2735, !2736, !2737, !2738, !2739, !2740, !2741, !2742, !2743, !2744, !2745, !2746, !2747, !2748, !2749, !2750, !2751, !2752, !2753, !2754, !2755, !2756, !2757, !2758, !2759, !2760, !2761, !2762, !2763, !2764, !2765, !2766, !2767, !2768, !2769, !2770, !2771, !2772, !2773, !2774, !2775, !2776, !2777, !2778, !2779, !2780, !2781, !2782, !2783, !2784, !2785, !2786, !2787, !2788, !2789, !2790, !2791, !2792, !2793, !2794, !2795, !2796, !2797, !2798, !2799, !2800, !2801, !2802, !2803, !2804, !2805, !2806, !2807, !2808, !2809, !2810, !2811, !2812, !2813, !2814, !2815, !2816, !2817, !2818, !2819, !2820, !2821, !2822}
!2659 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !2656, file: !2657, line: 412, baseType: !1580, size: 32)
!2660 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !2656, file: !2657, line: 413, baseType: !1580, size: 32, offset: 32)
!2661 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !2656, file: !2657, line: 414, baseType: !1580, size: 32, offset: 64)
!2662 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !2656, file: !2657, line: 415, baseType: !1580, size: 32, offset: 96)
!2663 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !2656, file: !2657, line: 416, baseType: !1580, size: 32, offset: 128)
!2664 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !2656, file: !2657, line: 417, baseType: !1580, size: 32, offset: 160)
!2665 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !2656, file: !2657, line: 418, baseType: !1603, size: 8, offset: 192)
!2666 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !2656, file: !2657, line: 419, baseType: !1603, size: 8, offset: 200)
!2667 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !2656, file: !2657, line: 420, baseType: !2668, size: 8, offset: 208)
!2668 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!2669 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !2656, file: !2657, line: 421, baseType: !2668, size: 8, offset: 216)
!2670 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !2656, file: !2657, line: 422, baseType: !2668, size: 8, offset: 224)
!2671 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !2656, file: !2657, line: 423, baseType: !2668, size: 8, offset: 232)
!2672 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !2656, file: !2657, line: 424, baseType: !2668, size: 8, offset: 240)
!2673 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !2656, file: !2657, line: 425, baseType: !2668, size: 8, offset: 248)
!2674 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !2656, file: !2657, line: 426, baseType: !2668, size: 8, offset: 256)
!2675 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !2656, file: !2657, line: 427, baseType: !2668, size: 8, offset: 264)
!2676 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !2656, file: !2657, line: 428, baseType: !2668, size: 8, offset: 272)
!2677 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !2656, file: !2657, line: 429, baseType: !2668, size: 8, offset: 280)
!2678 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !2656, file: !2657, line: 430, baseType: !2668, size: 8, offset: 288)
!2679 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !2656, file: !2657, line: 431, baseType: !2668, size: 8, offset: 296)
!2680 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !2656, file: !2657, line: 432, baseType: !2668, size: 8, offset: 304)
!2681 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !2656, file: !2657, line: 433, baseType: !2668, size: 8, offset: 312)
!2682 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !2656, file: !2657, line: 434, baseType: !2668, size: 8, offset: 320)
!2683 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !2656, file: !2657, line: 435, baseType: !2668, size: 8, offset: 328)
!2684 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !2656, file: !2657, line: 436, baseType: !2668, size: 8, offset: 336)
!2685 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !2656, file: !2657, line: 437, baseType: !2668, size: 8, offset: 344)
!2686 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !2656, file: !2657, line: 438, baseType: !2668, size: 8, offset: 352)
!2687 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !2656, file: !2657, line: 439, baseType: !2668, size: 8, offset: 360)
!2688 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !2656, file: !2657, line: 440, baseType: !2668, size: 8, offset: 368)
!2689 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !2656, file: !2657, line: 441, baseType: !2668, size: 8, offset: 376)
!2690 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !2656, file: !2657, line: 442, baseType: !2668, size: 8, offset: 384)
!2691 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !2656, file: !2657, line: 443, baseType: !2668, size: 8, offset: 392)
!2692 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !2656, file: !2657, line: 444, baseType: !2668, size: 8, offset: 400)
!2693 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !2656, file: !2657, line: 445, baseType: !2668, size: 8, offset: 408)
!2694 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !2656, file: !2657, line: 446, baseType: !2668, size: 8, offset: 416)
!2695 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !2656, file: !2657, line: 447, baseType: !2668, size: 8, offset: 424)
!2696 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !2656, file: !2657, line: 448, baseType: !2668, size: 8, offset: 432)
!2697 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !2656, file: !2657, line: 449, baseType: !2668, size: 8, offset: 440)
!2698 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !2656, file: !2657, line: 450, baseType: !2668, size: 8, offset: 448)
!2699 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !2656, file: !2657, line: 451, baseType: !2668, size: 8, offset: 456)
!2700 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !2656, file: !2657, line: 452, baseType: !2668, size: 8, offset: 464)
!2701 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !2656, file: !2657, line: 453, baseType: !2668, size: 8, offset: 472)
!2702 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !2656, file: !2657, line: 454, baseType: !2668, size: 8, offset: 480)
!2703 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !2656, file: !2657, line: 455, baseType: !2668, size: 8, offset: 488)
!2704 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !2656, file: !2657, line: 456, baseType: !2668, size: 8, offset: 496)
!2705 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !2656, file: !2657, line: 457, baseType: !2668, size: 8, offset: 504)
!2706 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !2656, file: !2657, line: 458, baseType: !2668, size: 8, offset: 512)
!2707 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !2656, file: !2657, line: 459, baseType: !2668, size: 8, offset: 520)
!2708 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !2656, file: !2657, line: 460, baseType: !2668, size: 8, offset: 528)
!2709 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !2656, file: !2657, line: 461, baseType: !2668, size: 8, offset: 536)
!2710 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !2656, file: !2657, line: 462, baseType: !2668, size: 8, offset: 544)
!2711 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !2656, file: !2657, line: 463, baseType: !2668, size: 8, offset: 552)
!2712 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !2656, file: !2657, line: 464, baseType: !2668, size: 8, offset: 560)
!2713 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !2656, file: !2657, line: 465, baseType: !2668, size: 8, offset: 568)
!2714 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !2656, file: !2657, line: 466, baseType: !2668, size: 8, offset: 576)
!2715 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !2656, file: !2657, line: 467, baseType: !2668, size: 8, offset: 584)
!2716 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !2656, file: !2657, line: 468, baseType: !2668, size: 8, offset: 592)
!2717 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !2656, file: !2657, line: 469, baseType: !2668, size: 8, offset: 600)
!2718 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !2656, file: !2657, line: 470, baseType: !2668, size: 8, offset: 608)
!2719 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !2656, file: !2657, line: 471, baseType: !2668, size: 8, offset: 616)
!2720 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !2656, file: !2657, line: 472, baseType: !2668, size: 8, offset: 624)
!2721 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !2656, file: !2657, line: 473, baseType: !2668, size: 8, offset: 632)
!2722 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !2656, file: !2657, line: 474, baseType: !2668, size: 8, offset: 640)
!2723 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !2656, file: !2657, line: 475, baseType: !2668, size: 8, offset: 648)
!2724 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !2656, file: !2657, line: 476, baseType: !2668, size: 8, offset: 656)
!2725 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !2656, file: !2657, line: 477, baseType: !2668, size: 8, offset: 664)
!2726 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !2656, file: !2657, line: 478, baseType: !2668, size: 8, offset: 672)
!2727 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !2656, file: !2657, line: 479, baseType: !2668, size: 8, offset: 680)
!2728 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !2656, file: !2657, line: 480, baseType: !2668, size: 8, offset: 688)
!2729 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !2656, file: !2657, line: 481, baseType: !2668, size: 8, offset: 696)
!2730 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !2656, file: !2657, line: 482, baseType: !2668, size: 8, offset: 704)
!2731 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !2656, file: !2657, line: 483, baseType: !2668, size: 8, offset: 712)
!2732 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !2656, file: !2657, line: 484, baseType: !2668, size: 8, offset: 720)
!2733 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !2656, file: !2657, line: 485, baseType: !2668, size: 8, offset: 728)
!2734 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !2656, file: !2657, line: 486, baseType: !2668, size: 8, offset: 736)
!2735 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !2656, file: !2657, line: 487, baseType: !2668, size: 8, offset: 744)
!2736 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !2656, file: !2657, line: 488, baseType: !2668, size: 8, offset: 752)
!2737 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !2656, file: !2657, line: 489, baseType: !2668, size: 8, offset: 760)
!2738 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !2656, file: !2657, line: 490, baseType: !2668, size: 8, offset: 768)
!2739 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !2656, file: !2657, line: 491, baseType: !2668, size: 8, offset: 776)
!2740 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !2656, file: !2657, line: 492, baseType: !2668, size: 8, offset: 784)
!2741 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !2656, file: !2657, line: 493, baseType: !2668, size: 8, offset: 792)
!2742 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !2656, file: !2657, line: 494, baseType: !2668, size: 8, offset: 800)
!2743 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !2656, file: !2657, line: 495, baseType: !2668, size: 8, offset: 808)
!2744 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !2656, file: !2657, line: 496, baseType: !2668, size: 8, offset: 816)
!2745 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !2656, file: !2657, line: 497, baseType: !2668, size: 8, offset: 824)
!2746 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !2656, file: !2657, line: 498, baseType: !2668, size: 8, offset: 832)
!2747 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !2656, file: !2657, line: 499, baseType: !2668, size: 8, offset: 840)
!2748 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !2656, file: !2657, line: 500, baseType: !2668, size: 8, offset: 848)
!2749 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !2656, file: !2657, line: 501, baseType: !2668, size: 8, offset: 856)
!2750 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !2656, file: !2657, line: 502, baseType: !2668, size: 8, offset: 864)
!2751 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !2656, file: !2657, line: 503, baseType: !2668, size: 8, offset: 872)
!2752 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !2656, file: !2657, line: 504, baseType: !2668, size: 8, offset: 880)
!2753 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !2656, file: !2657, line: 505, baseType: !2668, size: 8, offset: 888)
!2754 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !2656, file: !2657, line: 506, baseType: !2668, size: 8, offset: 896)
!2755 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !2656, file: !2657, line: 507, baseType: !2668, size: 8, offset: 904)
!2756 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !2656, file: !2657, line: 508, baseType: !2668, size: 8, offset: 912)
!2757 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !2656, file: !2657, line: 509, baseType: !2668, size: 8, offset: 920)
!2758 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !2656, file: !2657, line: 510, baseType: !2668, size: 8, offset: 928)
!2759 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !2656, file: !2657, line: 511, baseType: !2668, size: 8, offset: 936)
!2760 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !2656, file: !2657, line: 512, baseType: !2668, size: 8, offset: 944)
!2761 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !2656, file: !2657, line: 513, baseType: !2668, size: 8, offset: 952)
!2762 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !2656, file: !2657, line: 514, baseType: !2668, size: 8, offset: 960)
!2763 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !2656, file: !2657, line: 515, baseType: !2668, size: 8, offset: 968)
!2764 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !2656, file: !2657, line: 516, baseType: !2668, size: 8, offset: 976)
!2765 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !2656, file: !2657, line: 517, baseType: !2668, size: 8, offset: 984)
!2766 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !2656, file: !2657, line: 518, baseType: !2668, size: 8, offset: 992)
!2767 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !2656, file: !2657, line: 519, baseType: !2668, size: 8, offset: 1000)
!2768 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !2656, file: !2657, line: 520, baseType: !2668, size: 8, offset: 1008)
!2769 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !2656, file: !2657, line: 521, baseType: !2668, size: 8, offset: 1016)
!2770 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !2656, file: !2657, line: 522, baseType: !2668, size: 8, offset: 1024)
!2771 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !2656, file: !2657, line: 523, baseType: !2668, size: 8, offset: 1032)
!2772 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !2656, file: !2657, line: 524, baseType: !2668, size: 8, offset: 1040)
!2773 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !2656, file: !2657, line: 525, baseType: !2668, size: 8, offset: 1048)
!2774 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !2656, file: !2657, line: 526, baseType: !2668, size: 8, offset: 1056)
!2775 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !2656, file: !2657, line: 527, baseType: !2668, size: 8, offset: 1064)
!2776 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !2656, file: !2657, line: 528, baseType: !2668, size: 8, offset: 1072)
!2777 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !2656, file: !2657, line: 529, baseType: !2668, size: 8, offset: 1080)
!2778 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !2656, file: !2657, line: 530, baseType: !2668, size: 8, offset: 1088)
!2779 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !2656, file: !2657, line: 531, baseType: !2668, size: 8, offset: 1096)
!2780 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !2656, file: !2657, line: 532, baseType: !2668, size: 8, offset: 1104)
!2781 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !2656, file: !2657, line: 533, baseType: !2668, size: 8, offset: 1112)
!2782 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !2656, file: !2657, line: 534, baseType: !2668, size: 8, offset: 1120)
!2783 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !2656, file: !2657, line: 535, baseType: !2668, size: 8, offset: 1128)
!2784 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !2656, file: !2657, line: 536, baseType: !2668, size: 8, offset: 1136)
!2785 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !2656, file: !2657, line: 537, baseType: !2668, size: 8, offset: 1144)
!2786 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !2656, file: !2657, line: 538, baseType: !2668, size: 8, offset: 1152)
!2787 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !2656, file: !2657, line: 539, baseType: !2668, size: 8, offset: 1160)
!2788 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !2656, file: !2657, line: 540, baseType: !2668, size: 8, offset: 1168)
!2789 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !2656, file: !2657, line: 541, baseType: !2668, size: 8, offset: 1176)
!2790 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !2656, file: !2657, line: 542, baseType: !2668, size: 8, offset: 1184)
!2791 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !2656, file: !2657, line: 543, baseType: !2668, size: 8, offset: 1192)
!2792 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !2656, file: !2657, line: 544, baseType: !2668, size: 8, offset: 1200)
!2793 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !2656, file: !2657, line: 545, baseType: !2668, size: 8, offset: 1208)
!2794 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !2656, file: !2657, line: 546, baseType: !2668, size: 8, offset: 1216)
!2795 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !2656, file: !2657, line: 547, baseType: !2668, size: 8, offset: 1224)
!2796 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !2656, file: !2657, line: 548, baseType: !2668, size: 8, offset: 1232)
!2797 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !2656, file: !2657, line: 549, baseType: !2668, size: 8, offset: 1240)
!2798 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !2656, file: !2657, line: 550, baseType: !2668, size: 8, offset: 1248)
!2799 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !2656, file: !2657, line: 551, baseType: !2668, size: 8, offset: 1256)
!2800 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !2656, file: !2657, line: 552, baseType: !2668, size: 8, offset: 1264)
!2801 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !2656, file: !2657, line: 553, baseType: !2668, size: 8, offset: 1272)
!2802 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !2656, file: !2657, line: 554, baseType: !2668, size: 8, offset: 1280)
!2803 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !2656, file: !2657, line: 555, baseType: !2668, size: 8, offset: 1288)
!2804 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !2656, file: !2657, line: 556, baseType: !2668, size: 8, offset: 1296)
!2805 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !2656, file: !2657, line: 557, baseType: !2668, size: 8, offset: 1304)
!2806 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !2656, file: !2657, line: 558, baseType: !2668, size: 8, offset: 1312)
!2807 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !2656, file: !2657, line: 559, baseType: !2668, size: 8, offset: 1320)
!2808 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !2656, file: !2657, line: 560, baseType: !2668, size: 8, offset: 1328)
!2809 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !2656, file: !2657, line: 561, baseType: !2668, size: 8, offset: 1336)
!2810 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !2656, file: !2657, line: 562, baseType: !2668, size: 8, offset: 1344)
!2811 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !2656, file: !2657, line: 563, baseType: !2668, size: 8, offset: 1352)
!2812 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !2656, file: !2657, line: 564, baseType: !2668, size: 8, offset: 1360)
!2813 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !2656, file: !2657, line: 565, baseType: !2668, size: 8, offset: 1368)
!2814 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !2656, file: !2657, line: 566, baseType: !2668, size: 8, offset: 1376)
!2815 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !2656, file: !2657, line: 567, baseType: !2668, size: 8, offset: 1384)
!2816 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !2656, file: !2657, line: 568, baseType: !2668, size: 8, offset: 1392)
!2817 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !2656, file: !2657, line: 569, baseType: !2668, size: 8, offset: 1400)
!2818 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !2656, file: !2657, line: 570, baseType: !2668, size: 8, offset: 1408)
!2819 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !2656, file: !2657, line: 571, baseType: !2668, size: 8, offset: 1416)
!2820 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !2656, file: !2657, line: 572, baseType: !2668, size: 8, offset: 1424)
!2821 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !2656, file: !2657, line: 573, baseType: !2668, size: 8, offset: 1432)
!2822 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !2656, file: !2657, line: 574, baseType: !2668, size: 8, offset: 1440)
!2823 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !1486, file: !135, line: 3405, baseType: !2824, size: 384)
!2824 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !135, line: 3352, size: 384, elements: !2825)
!2825 = !{!2826, !2827}
!2826 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2824, file: !135, line: 3353, baseType: !1522, size: 192)
!2827 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2824, file: !135, line: 3356, baseType: !2828, size: 192, offset: 192)
!2828 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !2657, line: 578, size: 192, elements: !2829)
!2829 = !{!2830, !2831, !2832, !2833, !2834, !2835, !2836, !2837, !2838, !2839, !2840}
!2830 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !2828, file: !2657, line: 580, baseType: !1580, size: 32)
!2831 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !2828, file: !2657, line: 581, baseType: !1580, size: 32, offset: 32)
!2832 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !2828, file: !2657, line: 582, baseType: !1580, size: 32, offset: 64)
!2833 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !2828, file: !2657, line: 583, baseType: !1580, size: 32, offset: 96)
!2834 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !2828, file: !2657, line: 584, baseType: !1603, size: 8, offset: 128)
!2835 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !2828, file: !2657, line: 585, baseType: !1603, size: 8, offset: 136)
!2836 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !2828, file: !2657, line: 586, baseType: !1603, size: 8, offset: 144)
!2837 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !2828, file: !2657, line: 587, baseType: !1603, size: 8, offset: 152)
!2838 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !2828, file: !2657, line: 588, baseType: !1603, size: 8, offset: 160)
!2839 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !2828, file: !2657, line: 589, baseType: !1603, size: 8, offset: 168)
!2840 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !2828, file: !2657, line: 590, baseType: !1603, size: 8, offset: 176)
!2841 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !1479, file: !1480, line: 141, baseType: !1483, size: 64, offset: 64)
!2842 = !DIDerivedType(tag: DW_TAG_member, name: "value_id", scope: !1479, file: !1480, line: 144, baseType: !7, size: 32, offset: 128)
!2843 = !DIDerivedType(tag: DW_TAG_member, name: "dfsnum", scope: !1479, file: !1480, line: 147, baseType: !7, size: 32, offset: 160)
!2844 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1479, file: !1480, line: 148, baseType: !7, size: 32, offset: 192)
!2845 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1479, file: !1480, line: 149, baseType: !7, size: 1, offset: 224, flags: DIFlagBitField, extraData: i64 224)
!2846 = !DIDerivedType(tag: DW_TAG_member, name: "on_sccstack", scope: !1479, file: !1480, line: 150, baseType: !7, size: 1, offset: 225, flags: DIFlagBitField, extraData: i64 224)
!2847 = !DIDerivedType(tag: DW_TAG_member, name: "has_constants", scope: !1479, file: !1480, line: 153, baseType: !7, size: 1, offset: 226, flags: DIFlagBitField, extraData: i64 224)
!2848 = !DIDerivedType(tag: DW_TAG_member, name: "use_processed", scope: !1479, file: !1480, line: 158, baseType: !7, size: 1, offset: 227, flags: DIFlagBitField, extraData: i64 224)
!2849 = !DIDerivedType(tag: DW_TAG_member, name: "needs_insertion", scope: !1479, file: !1480, line: 163, baseType: !7, size: 1, offset: 228, flags: DIFlagBitField, extraData: i64 224)
!2850 = !DIDerivedType(tag: DW_TAG_typedef, name: "vn_constant_t", file: !1480, line: 111, baseType: !2851)
!2851 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2852, size: 64)
!2852 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "vn_constant_s", file: !1480, line: 106, size: 128, elements: !2853)
!2853 = !{!2854, !2855, !2856}
!2854 = !DIDerivedType(tag: DW_TAG_member, name: "value_id", scope: !2852, file: !1480, line: 108, baseType: !7, size: 32)
!2855 = !DIDerivedType(tag: DW_TAG_member, name: "hashcode", scope: !2852, file: !1480, line: 109, baseType: !2307, size: 32, offset: 32)
!2856 = !DIDerivedType(tag: DW_TAG_member, name: "constant", scope: !2852, file: !1480, line: 110, baseType: !1483, size: 64, offset: 64)
!2857 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_vn_reference_t", file: !1480, line: 104, baseType: !2858)
!2858 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2859, size: 64)
!2859 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2860)
!2860 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "vn_reference_s", file: !1480, line: 93, size: 384, elements: !2861)
!2861 = !{!2862, !2863, !2864, !2865, !2866, !2867, !2888}
!2862 = !DIDerivedType(tag: DW_TAG_member, name: "value_id", scope: !2860, file: !1480, line: 96, baseType: !7, size: 32)
!2863 = !DIDerivedType(tag: DW_TAG_member, name: "hashcode", scope: !2860, file: !1480, line: 97, baseType: !2307, size: 32, offset: 32)
!2864 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !2860, file: !1480, line: 98, baseType: !1483, size: 64, offset: 64)
!2865 = !DIDerivedType(tag: DW_TAG_member, name: "set", scope: !2860, file: !1480, line: 99, baseType: !2123, size: 32, offset: 128)
!2866 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2860, file: !1480, line: 100, baseType: !1483, size: 64, offset: 192)
!2867 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !2860, file: !1480, line: 101, baseType: !2868, size: 64, offset: 256)
!2868 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2869, size: 64)
!2869 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_vn_reference_op_s_heap", file: !1480, line: 84, baseType: !2870)
!2870 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_vn_reference_op_s_heap", file: !1480, line: 84, size: 384, elements: !2871)
!2871 = !{!2872}
!2872 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2870, file: !1480, line: 84, baseType: !2873, size: 384)
!2873 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_vn_reference_op_s_base", file: !1480, line: 83, baseType: !2874)
!2874 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_vn_reference_op_s_base", file: !1480, line: 83, size: 384, elements: !2875)
!2875 = !{!2876, !2877, !2878}
!2876 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2874, file: !1480, line: 83, baseType: !7, size: 32)
!2877 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2874, file: !1480, line: 83, baseType: !7, size: 32, offset: 32)
!2878 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2874, file: !1480, line: 83, baseType: !2879, size: 320, offset: 64)
!2879 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2880, size: 320, elements: !1584)
!2880 = !DIDerivedType(tag: DW_TAG_typedef, name: "vn_reference_op_s", file: !1480, line: 79, baseType: !2881)
!2881 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "vn_reference_op_struct", file: !1480, line: 72, size: 320, elements: !2882)
!2882 = !{!2883, !2884, !2885, !2886, !2887}
!2883 = !DIDerivedType(tag: DW_TAG_member, name: "opcode", scope: !2881, file: !1480, line: 74, baseType: !134, size: 32)
!2884 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2881, file: !1480, line: 75, baseType: !1483, size: 64, offset: 64)
!2885 = !DIDerivedType(tag: DW_TAG_member, name: "op0", scope: !2881, file: !1480, line: 76, baseType: !1483, size: 64, offset: 128)
!2886 = !DIDerivedType(tag: DW_TAG_member, name: "op1", scope: !2881, file: !1480, line: 77, baseType: !1483, size: 64, offset: 192)
!2887 = !DIDerivedType(tag: DW_TAG_member, name: "op2", scope: !2881, file: !1480, line: 78, baseType: !1483, size: 64, offset: 256)
!2888 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !2860, file: !1480, line: 102, baseType: !1483, size: 64, offset: 320)
!2889 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!2890 = !DIDerivedType(tag: DW_TAG_typedef, name: "vn_reference_t", file: !1480, line: 103, baseType: !2891)
!2891 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2860, size: 64)
!2892 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_vn_nary_op_t", file: !1480, line: 47, baseType: !2893)
!2893 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2894, size: 64)
!2894 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2895)
!2895 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "vn_nary_op_s", file: !1480, line: 36, size: 512, elements: !2896)
!2896 = !{!2897, !2898, !2899, !2900, !2901, !2902, !2903}
!2897 = !DIDerivedType(tag: DW_TAG_member, name: "value_id", scope: !2895, file: !1480, line: 39, baseType: !7, size: 32)
!2898 = !DIDerivedType(tag: DW_TAG_member, name: "opcode", scope: !2895, file: !1480, line: 40, baseType: !7, size: 16, offset: 32, flags: DIFlagBitField, extraData: i64 32)
!2899 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !2895, file: !1480, line: 41, baseType: !7, size: 16, offset: 48, flags: DIFlagBitField, extraData: i64 32)
!2900 = !DIDerivedType(tag: DW_TAG_member, name: "hashcode", scope: !2895, file: !1480, line: 42, baseType: !2307, size: 32, offset: 64)
!2901 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !2895, file: !1480, line: 43, baseType: !1483, size: 64, offset: 128)
!2902 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2895, file: !1480, line: 44, baseType: !1483, size: 64, offset: 192)
!2903 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2895, file: !1480, line: 45, baseType: !2904, size: 256, offset: 256)
!2904 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1483, size: 256, elements: !1756)
!2905 = !DIDerivedType(tag: DW_TAG_typedef, name: "vn_nary_op_t", file: !1480, line: 46, baseType: !2906)
!2906 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2895, size: 64)
!2907 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", file: !1960, line: 35, baseType: !1539)
!2908 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2909, size: 64)
!2909 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_vn_ssa_aux_t_heap", file: !3, line: 164, baseType: !2910)
!2910 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_vn_ssa_aux_t_heap", file: !3, line: 164, size: 128, elements: !2911)
!2911 = !{!2912}
!2912 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2910, file: !3, line: 164, baseType: !2913, size: 128)
!2913 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_vn_ssa_aux_t_base", file: !3, line: 163, baseType: !2914)
!2914 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_vn_ssa_aux_t_base", file: !3, line: 163, size: 128, elements: !2915)
!2915 = !{!2916, !2917, !2918}
!2916 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2914, file: !3, line: 163, baseType: !7, size: 32)
!2917 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2914, file: !3, line: 163, baseType: !7, size: 32, offset: 32)
!2918 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2914, file: !3, line: 163, baseType: !2919, size: 64, offset: 64)
!2919 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2920, size: 64, elements: !1584)
!2920 = !DIDerivedType(tag: DW_TAG_typedef, name: "vn_ssa_aux_t", file: !1480, line: 164, baseType: !1478)
!2921 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_vn_reference_op_t", file: !1480, line: 81, baseType: !2922)
!2922 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2923, size: 64)
!2923 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2880)
!2924 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2925, size: 64)
!2925 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1816)
!2926 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2927, size: 64)
!2927 = !DISubroutineType(types: !2928)
!2928 = !{!1767, !1539}
!2929 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1580, size: 64)
!2930 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2931, size: 64)
!2931 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "vn_tables_s", file: !3, line: 108, size: 1024, elements: !2932)
!2932 = !{!2933, !2934, !2935, !2936, !2937, !2959}
!2933 = !DIDerivedType(tag: DW_TAG_member, name: "nary", scope: !2931, file: !3, line: 110, baseType: !2298, size: 64)
!2934 = !DIDerivedType(tag: DW_TAG_member, name: "phis", scope: !2931, file: !3, line: 111, baseType: !2298, size: 64, offset: 64)
!2935 = !DIDerivedType(tag: DW_TAG_member, name: "references", scope: !2931, file: !3, line: 112, baseType: !2298, size: 64, offset: 128)
!2936 = !DIDerivedType(tag: DW_TAG_member, name: "nary_obstack", scope: !2931, file: !3, line: 113, baseType: !1743, size: 704, offset: 192)
!2937 = !DIDerivedType(tag: DW_TAG_member, name: "phis_pool", scope: !2931, file: !3, line: 114, baseType: !2938, size: 64, offset: 896)
!2938 = !DIDerivedType(tag: DW_TAG_typedef, name: "alloc_pool", file: !2939, line: 58, baseType: !2940)
!2939 = !DIFile(filename: "./alloc-pool.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2940 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2941, size: 64)
!2941 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "alloc_pool_def", file: !2939, line: 32, size: 704, elements: !2942)
!2942 = !{!2943, !2944, !2945, !2951, !2952, !2953, !2954, !2955, !2956, !2957, !2958}
!2943 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2941, file: !2939, line: 34, baseType: !1687, size: 64)
!2944 = !DIDerivedType(tag: DW_TAG_member, name: "elts_per_block", scope: !2941, file: !2939, line: 38, baseType: !1959, size: 64, offset: 64)
!2945 = !DIDerivedType(tag: DW_TAG_member, name: "returned_free_list", scope: !2941, file: !2939, line: 41, baseType: !2946, size: 64, offset: 128)
!2946 = !DIDerivedType(tag: DW_TAG_typedef, name: "alloc_pool_list", file: !2939, line: 30, baseType: !2947)
!2947 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2948, size: 64)
!2948 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "alloc_pool_list_def", file: !2939, line: 26, size: 64, elements: !2949)
!2949 = !{!2950}
!2950 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2948, file: !2939, line: 28, baseType: !2947, size: 64)
!2951 = !DIDerivedType(tag: DW_TAG_member, name: "virgin_free_list", scope: !2941, file: !2939, line: 45, baseType: !1752, size: 64, offset: 192)
!2952 = !DIDerivedType(tag: DW_TAG_member, name: "virgin_elts_remaining", scope: !2941, file: !2939, line: 49, baseType: !1959, size: 64, offset: 256)
!2953 = !DIDerivedType(tag: DW_TAG_member, name: "elts_allocated", scope: !2941, file: !2939, line: 51, baseType: !1959, size: 64, offset: 320)
!2954 = !DIDerivedType(tag: DW_TAG_member, name: "elts_free", scope: !2941, file: !2939, line: 52, baseType: !1959, size: 64, offset: 384)
!2955 = !DIDerivedType(tag: DW_TAG_member, name: "blocks_allocated", scope: !2941, file: !2939, line: 53, baseType: !1959, size: 64, offset: 448)
!2956 = !DIDerivedType(tag: DW_TAG_member, name: "block_list", scope: !2941, file: !2939, line: 54, baseType: !2946, size: 64, offset: 512)
!2957 = !DIDerivedType(tag: DW_TAG_member, name: "block_size", scope: !2941, file: !2939, line: 55, baseType: !1959, size: 64, offset: 576)
!2958 = !DIDerivedType(tag: DW_TAG_member, name: "elt_size", scope: !2941, file: !2939, line: 56, baseType: !1959, size: 64, offset: 640)
!2959 = !DIDerivedType(tag: DW_TAG_member, name: "references_pool", scope: !2931, file: !3, line: 115, baseType: !2938, size: 64, offset: 960)
!2960 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2961, size: 64)
!2961 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2852)
!2962 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_vn_phi_t", file: !1480, line: 64, baseType: !2963)
!2963 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2964, size: 64)
!2964 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2965)
!2965 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "vn_phi_s", file: !1480, line: 55, size: 256, elements: !2966)
!2966 = !{!2967, !2968, !2969, !2975, !2976}
!2967 = !DIDerivedType(tag: DW_TAG_member, name: "value_id", scope: !2965, file: !1480, line: 58, baseType: !7, size: 32)
!2968 = !DIDerivedType(tag: DW_TAG_member, name: "hashcode", scope: !2965, file: !1480, line: 59, baseType: !2307, size: 32, offset: 32)
!2969 = !DIDerivedType(tag: DW_TAG_member, name: "phiargs", scope: !2965, file: !1480, line: 60, baseType: !2970, size: 64, offset: 64)
!2970 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2971, size: 64)
!2971 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_heap", file: !135, line: 184, baseType: !2972)
!2972 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_heap", file: !135, line: 184, size: 128, elements: !2973)
!2973 = !{!2974}
!2974 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2972, file: !135, line: 184, baseType: !2365, size: 128)
!2975 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2965, file: !1480, line: 61, baseType: !2266, size: 64, offset: 128)
!2976 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !2965, file: !1480, line: 62, baseType: !1483, size: 64, offset: 192)
!2977 = !DIDerivedType(tag: DW_TAG_typedef, name: "vn_phi_t", file: !1480, line: 63, baseType: !2978)
!2978 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2965, size: 64)
!2979 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_operand_p", file: !1348, line: 30, baseType: !2980)
!2980 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2981, size: 64)
!2981 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_use_operand_t", file: !135, line: 1893, baseType: !1855)
!2982 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2983, size: 64)
!2983 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1483)
!2984 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_operand_p", file: !1348, line: 27, baseType: !1848)
!2985 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2986, size: 64)
!2986 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ssa_op_iter_heap", file: !3, line: 2876, baseType: !2987)
!2987 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ssa_op_iter_heap", file: !3, line: 2876, size: 384, elements: !2988)
!2988 = !{!2989}
!2989 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2987, file: !3, line: 2876, baseType: !2990, size: 384)
!2990 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ssa_op_iter_base", file: !3, line: 2875, baseType: !2991)
!2991 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ssa_op_iter_base", file: !3, line: 2875, size: 384, elements: !2992)
!2992 = !{!2993, !2994, !2995}
!2993 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2991, file: !3, line: 2875, baseType: !7, size: 32)
!2994 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2991, file: !3, line: 2875, baseType: !7, size: 32, offset: 32)
!2995 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2991, file: !3, line: 2875, baseType: !2996, size: 320, offset: 64)
!2996 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2997, size: 320, elements: !1584)
!2997 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_op_iter", file: !1348, line: 140, baseType: !2998)
!2998 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_iterator_d", file: !1348, line: 131, size: 320, elements: !2999)
!2999 = !{!3000, !3001, !3002, !3004, !3006, !3007, !3008}
!3000 = !DIDerivedType(tag: DW_TAG_member, name: "done", scope: !2998, file: !1348, line: 133, baseType: !1603, size: 8)
!3001 = !DIDerivedType(tag: DW_TAG_member, name: "iter_type", scope: !2998, file: !1348, line: 134, baseType: !1347, size: 32, offset: 32)
!3002 = !DIDerivedType(tag: DW_TAG_member, name: "defs", scope: !2998, file: !1348, line: 135, baseType: !3003, size: 64, offset: 64)
!3003 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_optype_p", file: !1348, line: 42, baseType: !1843)
!3004 = !DIDerivedType(tag: DW_TAG_member, name: "uses", scope: !2998, file: !1348, line: 136, baseType: !3005, size: 64, offset: 128)
!3005 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_optype_p", file: !1348, line: 50, baseType: !1850)
!3006 = !DIDerivedType(tag: DW_TAG_member, name: "phi_i", scope: !2998, file: !1348, line: 137, baseType: !1580, size: 32, offset: 192)
!3007 = !DIDerivedType(tag: DW_TAG_member, name: "num_phi", scope: !2998, file: !1348, line: 138, baseType: !1580, size: 32, offset: 224)
!3008 = !DIDerivedType(tag: DW_TAG_member, name: "phi_stmt", scope: !2998, file: !1348, line: 139, baseType: !1814, size: 64, offset: 256)
!3009 = !{!3010, !3012, !3014, !3017, !3019, !3021, !3023, !3025, !3027, !3029, !0, !3031, !3033, !3035, !3037, !3039}
!3010 = !DIGlobalVariableExpression(var: !3011, expr: !DIExpression())
!3011 = distinct !DIGlobalVariable(name: "constant_to_value_id", scope: !2, file: !3, line: 118, type: !2298, isLocal: true, isDefinition: true)
!3012 = !DIGlobalVariableExpression(var: !3013, expr: !DIExpression())
!3013 = distinct !DIGlobalVariable(name: "constant_value_ids", scope: !2, file: !3, line: 119, type: !2383, isLocal: true, isDefinition: true)
!3014 = !DIGlobalVariableExpression(var: !3015, expr: !DIExpression())
!3015 = distinct !DIGlobalVariable(name: "valid_info", scope: !2, file: !3, line: 125, type: !3016, isLocal: true, isDefinition: true)
!3016 = !DIDerivedType(tag: DW_TAG_typedef, name: "vn_tables_t", file: !3, line: 116, baseType: !2930)
!3017 = !DIGlobalVariableExpression(var: !3018, expr: !DIExpression())
!3018 = distinct !DIGlobalVariable(name: "optimistic_info", scope: !2, file: !3, line: 130, type: !3016, isLocal: true, isDefinition: true)
!3019 = !DIGlobalVariableExpression(var: !3020, expr: !DIExpression())
!3020 = distinct !DIGlobalVariable(name: "current_info", scope: !2, file: !3, line: 136, type: !3016, isLocal: true, isDefinition: true)
!3021 = !DIGlobalVariableExpression(var: !3022, expr: !DIExpression())
!3022 = distinct !DIGlobalVariable(name: "rpo_numbers", scope: !2, file: !3, line: 141, type: !2929, isLocal: true, isDefinition: true)
!3023 = !DIGlobalVariableExpression(var: !3024, expr: !DIExpression())
!3024 = distinct !DIGlobalVariable(name: "VN_TOP", scope: !2, file: !3, line: 148, type: !1483, isLocal: false, isDefinition: true)
!3025 = !DIGlobalVariableExpression(var: !3026, expr: !DIExpression())
!3026 = distinct !DIGlobalVariable(name: "next_value_id", scope: !2, file: !3, line: 152, type: !7, isLocal: true, isDefinition: true)
!3027 = !DIGlobalVariableExpression(var: !3028, expr: !DIExpression())
!3028 = distinct !DIGlobalVariable(name: "sccstack", scope: !2, file: !3, line: 158, type: !2970, isLocal: true, isDefinition: true)
!3029 = !DIGlobalVariableExpression(var: !3030, expr: !DIExpression())
!3030 = distinct !DIGlobalVariable(name: "may_insert", scope: !2, file: !3, line: 160, type: !1603, isLocal: true, isDefinition: true)
!3031 = !DIGlobalVariableExpression(var: !3032, expr: !DIExpression())
!3032 = distinct !DIGlobalVariable(name: "vn_ssa_aux_obstack", scope: !2, file: !3, line: 171, type: !1743, isLocal: true, isDefinition: true)
!3033 = !DIGlobalVariableExpression(var: !3034, expr: !DIExpression())
!3034 = distinct !DIGlobalVariable(name: "shared_lookup_references", scope: !2, file: !3, line: 931, type: !2868, isLocal: true, isDefinition: true)
!3035 = !DIGlobalVariableExpression(var: !3036, expr: !DIExpression())
!3036 = distinct !DIGlobalVariable(name: "shared_lookup_phiargs", scope: !2, file: !3, line: 1708, type: !2970, isLocal: true, isDefinition: true)
!3037 = !DIGlobalVariableExpression(var: !3038, expr: !DIExpression())
!3038 = distinct !DIGlobalVariable(name: "last_vuse_ptr", scope: !2, file: !3, line: 990, type: !1848, isLocal: true, isDefinition: true)
!3039 = !DIGlobalVariableExpression(var: !3040, expr: !DIExpression())
!3040 = distinct !DIGlobalVariable(name: "next_dfs_num", scope: !2, file: !3, line: 157, type: !7, isLocal: true, isDefinition: true)
!3041 = !{i32 7, !"Dwarf Version", i32 4}
!3042 = !{i32 2, !"Debug Info Version", i32 3}
!3043 = !{i32 1, !"wchar_size", i32 4}
!3044 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!3045 = distinct !DISubprogram(name: "VN_INFO", scope: !3, file: !3, line: 176, type: !3046, scopeLine: 177, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!3046 = !DISubroutineType(types: !3047)
!3047 = !{!2920, !1483}
!3048 = !{}
!3049 = !DILocalVariable(name: "name", arg: 1, scope: !3045, file: !3, line: 176, type: !1483)
!3050 = !DILocation(line: 176, column: 15, scope: !3045)
!3051 = !DILocalVariable(name: "res", scope: !3045, file: !3, line: 178, type: !2920)
!3052 = !DILocation(line: 178, column: 16, scope: !3045)
!3053 = !DILocation(line: 178, column: 22, scope: !3045)
!3054 = !DILocation(line: 180, column: 3, scope: !3045)
!3055 = !DILocation(line: 181, column: 10, scope: !3045)
!3056 = !DILocation(line: 181, column: 3, scope: !3045)
!3057 = distinct !DISubprogram(name: "VEC_vn_ssa_aux_t_base_index", scope: !3, file: !3, line: 163, type: !3058, scopeLine: 163, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!3058 = !DISubroutineType(types: !3059)
!3059 = !{!2920, !3060, !7}
!3060 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3061, size: 64)
!3061 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2913)
!3062 = !DILocalVariable(name: "vec_", arg: 1, scope: !3057, file: !3, line: 163, type: !3060)
!3063 = !DILocation(line: 163, column: 1, scope: !3057)
!3064 = !DILocalVariable(name: "ix_", arg: 2, scope: !3057, file: !3, line: 163, type: !7)
!3065 = !DILocation(line: 0, scope: !3057)
!3066 = distinct !DISubprogram(name: "VN_INFO_GET", scope: !3, file: !3, line: 198, type: !3046, scopeLine: 199, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!3067 = !DILocalVariable(name: "name", arg: 1, scope: !3066, file: !3, line: 198, type: !1483)
!3068 = !DILocation(line: 198, column: 19, scope: !3066)
!3069 = !DILocalVariable(name: "newinfo", scope: !3066, file: !3, line: 200, type: !2920)
!3070 = !DILocation(line: 200, column: 16, scope: !3066)
!3071 = !DILocation(line: 202, column: 13, scope: !3066)
!3072 = !DILocation(line: 202, column: 11, scope: !3066)
!3073 = !DILocation(line: 203, column: 11, scope: !3066)
!3074 = !DILocation(line: 203, column: 3, scope: !3066)
!3075 = !DILocation(line: 204, column: 7, scope: !3076)
!3076 = distinct !DILexicalBlock(scope: !3066, file: !3, line: 204, column: 7)
!3077 = !DILocation(line: 204, column: 34, scope: !3076)
!3078 = !DILocation(line: 204, column: 31, scope: !3076)
!3079 = !DILocation(line: 204, column: 7, scope: !3066)
!3080 = !DILocation(line: 205, column: 5, scope: !3076)
!3081 = !DILocation(line: 207, column: 3, scope: !3066)
!3082 = !DILocation(line: 209, column: 10, scope: !3066)
!3083 = !DILocation(line: 209, column: 3, scope: !3066)
!3084 = distinct !DISubprogram(name: "VEC_vn_ssa_aux_t_base_length", scope: !3, file: !3, line: 163, type: !3085, scopeLine: 163, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!3085 = !DISubroutineType(types: !3086)
!3086 = !{!7, !3060}
!3087 = !DILocalVariable(name: "vec_", arg: 1, scope: !3084, file: !3, line: 163, type: !3060)
!3088 = !DILocation(line: 163, column: 1, scope: !3084)
!3089 = distinct !DISubprogram(name: "VEC_vn_ssa_aux_t_heap_safe_grow", scope: !3, file: !3, line: 164, type: !3090, scopeLine: 164, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!3090 = !DISubroutineType(types: !3091)
!3091 = !{null, !3092, !1580}
!3092 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2908, size: 64)
!3093 = !DILocalVariable(name: "vec_", arg: 1, scope: !3089, file: !3, line: 164, type: !3092)
!3094 = !DILocation(line: 164, column: 1, scope: !3089)
!3095 = !DILocalVariable(name: "size_", arg: 2, scope: !3089, file: !3, line: 164, type: !1580)
!3096 = !DILocation(line: 0, scope: !3089)
!3097 = distinct !DISubprogram(name: "VEC_vn_ssa_aux_t_base_replace", scope: !3, file: !3, line: 163, type: !3098, scopeLine: 163, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!3098 = !DISubroutineType(types: !3099)
!3099 = !{!2920, !3100, !7, !2920}
!3100 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2913, size: 64)
!3101 = !DILocalVariable(name: "vec_", arg: 1, scope: !3097, file: !3, line: 163, type: !3100)
!3102 = !DILocation(line: 163, column: 1, scope: !3097)
!3103 = !DILocalVariable(name: "ix_", arg: 2, scope: !3097, file: !3, line: 163, type: !7)
!3104 = !DILocalVariable(name: "obj_", arg: 3, scope: !3097, file: !3, line: 163, type: !2920)
!3105 = !DILocalVariable(name: "old_obj_", scope: !3097, file: !3, line: 163, type: !2920)
!3106 = distinct !DISubprogram(name: "vn_get_expr_for", scope: !3, file: !3, line: 217, type: !3107, scopeLine: 218, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!3107 = !DISubroutineType(types: !3108)
!3108 = !{!1483, !1483}
!3109 = !DILocalVariable(name: "name", arg: 1, scope: !3106, file: !3, line: 217, type: !1483)
!3110 = !DILocation(line: 217, column: 23, scope: !3106)
!3111 = !DILocalVariable(name: "vn", scope: !3106, file: !3, line: 219, type: !2920)
!3112 = !DILocation(line: 219, column: 16, scope: !3106)
!3113 = !DILocation(line: 219, column: 30, scope: !3106)
!3114 = !DILocation(line: 219, column: 21, scope: !3106)
!3115 = !DILocalVariable(name: "def_stmt", scope: !3106, file: !3, line: 220, type: !1814)
!3116 = !DILocation(line: 220, column: 10, scope: !3106)
!3117 = !DILocalVariable(name: "expr", scope: !3106, file: !3, line: 221, type: !1483)
!3118 = !DILocation(line: 221, column: 8, scope: !3106)
!3119 = !DILocation(line: 223, column: 7, scope: !3120)
!3120 = distinct !DILexicalBlock(scope: !3106, file: !3, line: 223, column: 7)
!3121 = !DILocation(line: 223, column: 11, scope: !3120)
!3122 = !DILocation(line: 223, column: 21, scope: !3120)
!3123 = !DILocation(line: 223, column: 18, scope: !3120)
!3124 = !DILocation(line: 223, column: 7, scope: !3106)
!3125 = !DILocation(line: 224, column: 12, scope: !3120)
!3126 = !DILocation(line: 224, column: 5, scope: !3120)
!3127 = !DILocation(line: 228, column: 7, scope: !3128)
!3128 = distinct !DILexicalBlock(scope: !3106, file: !3, line: 228, column: 7)
!3129 = !DILocation(line: 228, column: 30, scope: !3128)
!3130 = !DILocation(line: 228, column: 7, scope: !3106)
!3131 = !DILocation(line: 229, column: 12, scope: !3128)
!3132 = !DILocation(line: 229, column: 16, scope: !3128)
!3133 = !DILocation(line: 229, column: 5, scope: !3128)
!3134 = !DILocation(line: 232, column: 17, scope: !3106)
!3135 = !DILocation(line: 232, column: 21, scope: !3106)
!3136 = !DILocation(line: 232, column: 8, scope: !3106)
!3137 = !DILocation(line: 232, column: 6, scope: !3106)
!3138 = !DILocation(line: 236, column: 7, scope: !3139)
!3139 = distinct !DILexicalBlock(scope: !3106, file: !3, line: 236, column: 7)
!3140 = !DILocation(line: 236, column: 30, scope: !3139)
!3141 = !DILocation(line: 236, column: 7, scope: !3106)
!3142 = !DILocation(line: 237, column: 12, scope: !3139)
!3143 = !DILocation(line: 237, column: 16, scope: !3139)
!3144 = !DILocation(line: 237, column: 5, scope: !3139)
!3145 = !DILocation(line: 240, column: 7, scope: !3146)
!3146 = distinct !DILexicalBlock(scope: !3106, file: !3, line: 240, column: 7)
!3147 = !DILocation(line: 240, column: 11, scope: !3146)
!3148 = !DILocation(line: 240, column: 16, scope: !3146)
!3149 = !DILocation(line: 240, column: 7, scope: !3106)
!3150 = !DILocation(line: 241, column: 12, scope: !3146)
!3151 = !DILocation(line: 241, column: 16, scope: !3146)
!3152 = !DILocation(line: 241, column: 5, scope: !3146)
!3153 = !DILocation(line: 244, column: 14, scope: !3106)
!3154 = !DILocation(line: 244, column: 12, scope: !3106)
!3155 = !DILocation(line: 248, column: 21, scope: !3156)
!3156 = distinct !DILexicalBlock(scope: !3106, file: !3, line: 248, column: 7)
!3157 = !DILocation(line: 248, column: 7, scope: !3156)
!3158 = !DILocation(line: 249, column: 7, scope: !3156)
!3159 = !DILocation(line: 249, column: 23, scope: !3156)
!3160 = !DILocation(line: 249, column: 10, scope: !3156)
!3161 = !DILocation(line: 249, column: 33, scope: !3156)
!3162 = !DILocation(line: 248, column: 7, scope: !3106)
!3163 = !DILocation(line: 250, column: 12, scope: !3156)
!3164 = !DILocation(line: 250, column: 16, scope: !3156)
!3165 = !DILocation(line: 250, column: 5, scope: !3156)
!3166 = !DILocation(line: 252, column: 26, scope: !3167)
!3167 = distinct !DILexicalBlock(scope: !3106, file: !3, line: 252, column: 7)
!3168 = !DILocation(line: 252, column: 8, scope: !3167)
!3169 = !DILocation(line: 252, column: 7, scope: !3106)
!3170 = !DILocation(line: 253, column: 12, scope: !3167)
!3171 = !DILocation(line: 253, column: 16, scope: !3167)
!3172 = !DILocation(line: 253, column: 5, scope: !3167)
!3173 = !DILocation(line: 257, column: 11, scope: !3106)
!3174 = !DILocation(line: 257, column: 3, scope: !3106)
!3175 = !DILocation(line: 260, column: 36, scope: !3176)
!3176 = distinct !DILexicalBlock(scope: !3177, file: !3, line: 260, column: 11)
!3177 = distinct !DILexicalBlock(scope: !3106, file: !3, line: 258, column: 5)
!3178 = !DILocation(line: 260, column: 12, scope: !3176)
!3179 = !DILocation(line: 260, column: 46, scope: !3176)
!3180 = !DILocation(line: 261, column: 5, scope: !3176)
!3181 = !DILocation(line: 261, column: 32, scope: !3176)
!3182 = !DILocation(line: 261, column: 8, scope: !3176)
!3183 = !DILocation(line: 261, column: 42, scope: !3176)
!3184 = !DILocation(line: 262, column: 5, scope: !3176)
!3185 = !DILocation(line: 262, column: 32, scope: !3176)
!3186 = !DILocation(line: 262, column: 8, scope: !3176)
!3187 = !DILocation(line: 262, column: 42, scope: !3176)
!3188 = !DILocation(line: 263, column: 4, scope: !3176)
!3189 = !DILocation(line: 263, column: 7, scope: !3176)
!3190 = !DILocation(line: 263, column: 49, scope: !3176)
!3191 = !DILocation(line: 260, column: 11, scope: !3177)
!3192 = !DILocation(line: 264, column: 9, scope: !3176)
!3193 = !DILocation(line: 264, column: 7, scope: !3176)
!3194 = !DILocation(line: 264, column: 2, scope: !3176)
!3195 = !DILocation(line: 267, column: 7, scope: !3177)
!3196 = !DILocation(line: 270, column: 14, scope: !3177)
!3197 = !DILocation(line: 270, column: 12, scope: !3177)
!3198 = !DILocation(line: 273, column: 7, scope: !3177)
!3199 = !DILocation(line: 276, column: 14, scope: !3177)
!3200 = !DILocation(line: 276, column: 12, scope: !3177)
!3201 = !DILocation(line: 280, column: 7, scope: !3177)
!3202 = !DILocation(line: 283, column: 5, scope: !3177)
!3203 = !DILocation(line: 284, column: 7, scope: !3204)
!3204 = distinct !DILexicalBlock(scope: !3106, file: !3, line: 284, column: 7)
!3205 = !DILocation(line: 284, column: 12, scope: !3204)
!3206 = !DILocation(line: 284, column: 7, scope: !3106)
!3207 = !DILocation(line: 285, column: 12, scope: !3204)
!3208 = !DILocation(line: 285, column: 16, scope: !3204)
!3209 = !DILocation(line: 285, column: 5, scope: !3204)
!3210 = !DILocation(line: 288, column: 14, scope: !3106)
!3211 = !DILocation(line: 288, column: 3, scope: !3106)
!3212 = !DILocation(line: 288, column: 7, scope: !3106)
!3213 = !DILocation(line: 288, column: 12, scope: !3106)
!3214 = !DILocation(line: 290, column: 10, scope: !3106)
!3215 = !DILocation(line: 290, column: 3, scope: !3106)
!3216 = !DILocation(line: 291, column: 1, scope: !3106)
!3217 = distinct !DISubprogram(name: "gimple_nop_p", scope: !391, file: !391, line: 4304, type: !3218, scopeLine: 4305, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!3218 = !DISubroutineType(types: !3219)
!3219 = !{!1603, !3220}
!3220 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !1484, line: 60, baseType: !2924)
!3221 = !DILocalVariable(name: "g", arg: 1, scope: !3217, file: !391, line: 4304, type: !3220)
!3222 = !DILocation(line: 4304, column: 28, scope: !3217)
!3223 = !DILocation(line: 4306, column: 23, scope: !3217)
!3224 = !DILocation(line: 4306, column: 10, scope: !3217)
!3225 = !DILocation(line: 4306, column: 26, scope: !3217)
!3226 = !DILocation(line: 4306, column: 3, scope: !3217)
!3227 = distinct !DISubprogram(name: "gimple_code", scope: !391, file: !391, line: 1052, type: !3228, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!3228 = !DISubroutineType(types: !3229)
!3229 = !{!390, !3220}
!3230 = !DILocalVariable(name: "g", arg: 1, scope: !3227, file: !391, line: 1052, type: !3220)
!3231 = !DILocation(line: 1052, column: 27, scope: !3227)
!3232 = !DILocation(line: 1054, column: 10, scope: !3227)
!3233 = !DILocation(line: 1054, column: 13, scope: !3227)
!3234 = !DILocation(line: 1054, column: 20, scope: !3227)
!3235 = !DILocation(line: 1054, column: 3, scope: !3227)
!3236 = distinct !DISubprogram(name: "is_gimple_assign", scope: !391, file: !391, line: 1677, type: !3218, scopeLine: 1678, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!3237 = !DILocalVariable(name: "gs", arg: 1, scope: !3236, file: !391, line: 1677, type: !3220)
!3238 = !DILocation(line: 1677, column: 32, scope: !3236)
!3239 = !DILocation(line: 1679, column: 23, scope: !3236)
!3240 = !DILocation(line: 1679, column: 10, scope: !3236)
!3241 = !DILocation(line: 1679, column: 27, scope: !3236)
!3242 = !DILocation(line: 1679, column: 3, scope: !3236)
!3243 = distinct !DISubprogram(name: "gimple_assign_rhs_code", scope: !391, file: !391, line: 1815, type: !3244, scopeLine: 1816, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!3244 = !DISubroutineType(types: !3245)
!3245 = !{!134, !3220}
!3246 = !DILocalVariable(name: "gs", arg: 1, scope: !3243, file: !391, line: 1815, type: !3220)
!3247 = !DILocation(line: 1815, column: 38, scope: !3243)
!3248 = !DILocalVariable(name: "code", scope: !3243, file: !391, line: 1817, type: !134)
!3249 = !DILocation(line: 1817, column: 18, scope: !3243)
!3250 = !DILocation(line: 1820, column: 28, scope: !3243)
!3251 = !DILocation(line: 1820, column: 10, scope: !3243)
!3252 = !DILocation(line: 1820, column: 8, scope: !3243)
!3253 = !DILocation(line: 1821, column: 29, scope: !3254)
!3254 = distinct !DILexicalBlock(scope: !3243, file: !391, line: 1821, column: 7)
!3255 = !DILocation(line: 1821, column: 7, scope: !3254)
!3256 = !DILocation(line: 1821, column: 35, scope: !3254)
!3257 = !DILocation(line: 1821, column: 7, scope: !3243)
!3258 = !DILocation(line: 1822, column: 12, scope: !3254)
!3259 = !DILocation(line: 1822, column: 10, scope: !3254)
!3260 = !DILocation(line: 1822, column: 5, scope: !3254)
!3261 = !DILocation(line: 1824, column: 10, scope: !3243)
!3262 = !DILocation(line: 1824, column: 3, scope: !3243)
!3263 = distinct !DISubprogram(name: "gimple_assign_rhs1", scope: !391, file: !391, line: 1727, type: !3264, scopeLine: 1728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!3264 = !DISubroutineType(types: !3265)
!3265 = !{!1483, !3220}
!3266 = !DILocalVariable(name: "gs", arg: 1, scope: !3263, file: !391, line: 1727, type: !3220)
!3267 = !DILocation(line: 1727, column: 34, scope: !3263)
!3268 = !DILocation(line: 1730, column: 21, scope: !3263)
!3269 = !DILocation(line: 1730, column: 10, scope: !3263)
!3270 = !DILocation(line: 1730, column: 3, scope: !3263)
!3271 = distinct !DISubprogram(name: "gimple_expr_type", scope: !391, file: !391, line: 4366, type: !3264, scopeLine: 4367, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!3272 = !DILocalVariable(name: "stmt", arg: 1, scope: !3271, file: !391, line: 4366, type: !3220)
!3273 = !DILocation(line: 4366, column: 32, scope: !3271)
!3274 = !DILocalVariable(name: "code", scope: !3271, file: !391, line: 4368, type: !390)
!3275 = !DILocation(line: 4368, column: 20, scope: !3271)
!3276 = !DILocation(line: 4368, column: 40, scope: !3271)
!3277 = !DILocation(line: 4368, column: 27, scope: !3271)
!3278 = !DILocation(line: 4370, column: 7, scope: !3279)
!3279 = distinct !DILexicalBlock(scope: !3271, file: !391, line: 4370, column: 7)
!3280 = !DILocation(line: 4370, column: 12, scope: !3279)
!3281 = !DILocation(line: 4370, column: 29, scope: !3279)
!3282 = !DILocation(line: 4370, column: 32, scope: !3279)
!3283 = !DILocation(line: 4370, column: 37, scope: !3279)
!3284 = !DILocation(line: 4370, column: 7, scope: !3271)
!3285 = !DILocalVariable(name: "type", scope: !3286, file: !391, line: 4372, type: !1483)
!3286 = distinct !DILexicalBlock(scope: !3279, file: !391, line: 4371, column: 5)
!3287 = !DILocation(line: 4372, column: 12, scope: !3286)
!3288 = !DILocation(line: 4377, column: 11, scope: !3289)
!3289 = distinct !DILexicalBlock(scope: !3286, file: !391, line: 4377, column: 11)
!3290 = !DILocation(line: 4377, column: 16, scope: !3289)
!3291 = !DILocation(line: 4377, column: 11, scope: !3286)
!3292 = !DILocation(line: 4378, column: 34, scope: !3289)
!3293 = !DILocation(line: 4378, column: 9, scope: !3289)
!3294 = !DILocation(line: 4378, column: 7, scope: !3289)
!3295 = !DILocation(line: 4378, column: 2, scope: !3289)
!3296 = !DILocation(line: 4380, column: 34, scope: !3289)
!3297 = !DILocation(line: 4380, column: 10, scope: !3289)
!3298 = !DILocation(line: 4380, column: 2, scope: !3289)
!3299 = !DILocation(line: 4383, column: 13, scope: !3300)
!3300 = distinct !DILexicalBlock(scope: !3289, file: !391, line: 4381, column: 4)
!3301 = !DILocation(line: 4383, column: 11, scope: !3300)
!3302 = !DILocation(line: 4384, column: 6, scope: !3300)
!3303 = !DILocation(line: 4388, column: 13, scope: !3300)
!3304 = !DILocation(line: 4388, column: 11, scope: !3300)
!3305 = !DILocation(line: 4389, column: 6, scope: !3300)
!3306 = !DILocation(line: 4391, column: 14, scope: !3286)
!3307 = !DILocation(line: 4391, column: 7, scope: !3286)
!3308 = !DILocation(line: 4393, column: 12, scope: !3309)
!3309 = distinct !DILexicalBlock(scope: !3279, file: !391, line: 4393, column: 12)
!3310 = !DILocation(line: 4393, column: 17, scope: !3309)
!3311 = !DILocation(line: 4393, column: 12, scope: !3279)
!3312 = !DILocation(line: 4394, column: 12, scope: !3309)
!3313 = !DILocation(line: 4394, column: 5, scope: !3309)
!3314 = !DILocation(line: 4396, column: 12, scope: !3309)
!3315 = !DILocation(line: 4396, column: 5, scope: !3309)
!3316 = !DILocation(line: 4397, column: 1, scope: !3271)
!3317 = distinct !DISubprogram(name: "gimple_assign_rhs2", scope: !391, file: !391, line: 1759, type: !3264, scopeLine: 1760, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!3318 = !DILocalVariable(name: "gs", arg: 1, scope: !3317, file: !391, line: 1759, type: !3220)
!3319 = !DILocation(line: 1759, column: 34, scope: !3317)
!3320 = !DILocation(line: 1763, column: 23, scope: !3321)
!3321 = distinct !DILexicalBlock(scope: !3317, file: !391, line: 1763, column: 7)
!3322 = !DILocation(line: 1763, column: 7, scope: !3321)
!3323 = !DILocation(line: 1763, column: 27, scope: !3321)
!3324 = !DILocation(line: 1763, column: 7, scope: !3317)
!3325 = !DILocation(line: 1764, column: 23, scope: !3321)
!3326 = !DILocation(line: 1764, column: 12, scope: !3321)
!3327 = !DILocation(line: 1764, column: 5, scope: !3321)
!3328 = !DILocation(line: 1766, column: 5, scope: !3321)
!3329 = !DILocation(line: 1767, column: 1, scope: !3317)
!3330 = distinct !DISubprogram(name: "get_constant_value_id", scope: !3, file: !3, line: 339, type: !3331, scopeLine: 340, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!3331 = !DISubroutineType(types: !3332)
!3332 = !{!7, !1483}
!3333 = !DILocalVariable(name: "constant", arg: 1, scope: !3330, file: !3, line: 339, type: !1483)
!3334 = !DILocation(line: 339, column: 29, scope: !3330)
!3335 = !DILocalVariable(name: "slot", scope: !3330, file: !3, line: 341, type: !2321)
!3336 = !DILocation(line: 341, column: 10, scope: !3330)
!3337 = !DILocalVariable(name: "vc", scope: !3330, file: !3, line: 342, type: !2852)
!3338 = !DILocation(line: 342, column: 24, scope: !3330)
!3339 = !DILocation(line: 344, column: 45, scope: !3330)
!3340 = !DILocation(line: 344, column: 17, scope: !3330)
!3341 = !DILocation(line: 344, column: 6, scope: !3330)
!3342 = !DILocation(line: 344, column: 15, scope: !3330)
!3343 = !DILocation(line: 345, column: 17, scope: !3330)
!3344 = !DILocation(line: 345, column: 6, scope: !3330)
!3345 = !DILocation(line: 345, column: 15, scope: !3330)
!3346 = !DILocation(line: 346, column: 36, scope: !3330)
!3347 = !DILocation(line: 346, column: 58, scope: !3330)
!3348 = !DILocation(line: 347, column: 11, scope: !3330)
!3349 = !DILocation(line: 346, column: 10, scope: !3330)
!3350 = !DILocation(line: 346, column: 8, scope: !3330)
!3351 = !DILocation(line: 348, column: 7, scope: !3352)
!3352 = distinct !DILexicalBlock(scope: !3330, file: !3, line: 348, column: 7)
!3353 = !DILocation(line: 348, column: 7, scope: !3330)
!3354 = !DILocation(line: 349, column: 29, scope: !3352)
!3355 = !DILocation(line: 349, column: 28, scope: !3352)
!3356 = !DILocation(line: 349, column: 13, scope: !3352)
!3357 = !DILocation(line: 349, column: 36, scope: !3352)
!3358 = !DILocation(line: 349, column: 5, scope: !3352)
!3359 = !DILocation(line: 350, column: 3, scope: !3330)
!3360 = !DILocation(line: 351, column: 1, scope: !3330)
!3361 = distinct !DISubprogram(name: "vn_hash_constant_with_type", scope: !1480, file: !1480, line: 117, type: !3362, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!3362 = !DISubroutineType(types: !3363)
!3363 = !{!2307, !1483}
!3364 = !DILocalVariable(name: "constant", arg: 1, scope: !3361, file: !1480, line: 117, type: !1483)
!3365 = !DILocation(line: 117, column: 34, scope: !3361)
!3366 = !DILocalVariable(name: "type", scope: !3361, file: !1480, line: 119, type: !1483)
!3367 = !DILocation(line: 119, column: 8, scope: !3361)
!3368 = !DILocation(line: 119, column: 15, scope: !3361)
!3369 = !DILocation(line: 120, column: 32, scope: !3361)
!3370 = !DILocation(line: 120, column: 11, scope: !3361)
!3371 = !DILocation(line: 121, column: 6, scope: !3361)
!3372 = !DILocation(line: 121, column: 4, scope: !3361)
!3373 = !DILocation(line: 122, column: 7, scope: !3361)
!3374 = !DILocation(line: 123, column: 9, scope: !3361)
!3375 = !DILocation(line: 123, column: 33, scope: !3361)
!3376 = !DILocation(line: 123, column: 31, scope: !3361)
!3377 = !DILocation(line: 122, column: 4, scope: !3361)
!3378 = !DILocation(line: 120, column: 3, scope: !3361)
!3379 = distinct !DISubprogram(name: "get_or_alloc_constant_value_id", scope: !3, file: !3, line: 357, type: !3331, scopeLine: 358, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!3380 = !DILocalVariable(name: "constant", arg: 1, scope: !3379, file: !3, line: 357, type: !1483)
!3381 = !DILocation(line: 357, column: 38, scope: !3379)
!3382 = !DILocalVariable(name: "slot", scope: !3379, file: !3, line: 359, type: !2321)
!3383 = !DILocation(line: 359, column: 10, scope: !3379)
!3384 = !DILocalVariable(name: "vc", scope: !3379, file: !3, line: 360, type: !2852)
!3385 = !DILocation(line: 360, column: 24, scope: !3379)
!3386 = !DILocalVariable(name: "vcp", scope: !3379, file: !3, line: 361, type: !2850)
!3387 = !DILocation(line: 361, column: 17, scope: !3379)
!3388 = !DILocation(line: 363, column: 45, scope: !3379)
!3389 = !DILocation(line: 363, column: 17, scope: !3379)
!3390 = !DILocation(line: 363, column: 6, scope: !3379)
!3391 = !DILocation(line: 363, column: 15, scope: !3379)
!3392 = !DILocation(line: 364, column: 17, scope: !3379)
!3393 = !DILocation(line: 364, column: 6, scope: !3379)
!3394 = !DILocation(line: 364, column: 15, scope: !3379)
!3395 = !DILocation(line: 365, column: 36, scope: !3379)
!3396 = !DILocation(line: 365, column: 58, scope: !3379)
!3397 = !DILocation(line: 366, column: 11, scope: !3379)
!3398 = !DILocation(line: 365, column: 10, scope: !3379)
!3399 = !DILocation(line: 365, column: 8, scope: !3379)
!3400 = !DILocation(line: 367, column: 8, scope: !3401)
!3401 = distinct !DILexicalBlock(scope: !3379, file: !3, line: 367, column: 7)
!3402 = !DILocation(line: 367, column: 7, scope: !3401)
!3403 = !DILocation(line: 367, column: 7, scope: !3379)
!3404 = !DILocation(line: 368, column: 29, scope: !3401)
!3405 = !DILocation(line: 368, column: 28, scope: !3401)
!3406 = !DILocation(line: 368, column: 13, scope: !3401)
!3407 = !DILocation(line: 368, column: 36, scope: !3401)
!3408 = !DILocation(line: 368, column: 5, scope: !3401)
!3409 = !DILocation(line: 370, column: 9, scope: !3379)
!3410 = !DILocation(line: 370, column: 7, scope: !3379)
!3411 = !DILocation(line: 371, column: 22, scope: !3379)
!3412 = !DILocation(line: 371, column: 3, scope: !3379)
!3413 = !DILocation(line: 371, column: 8, scope: !3379)
!3414 = !DILocation(line: 371, column: 17, scope: !3379)
!3415 = !DILocation(line: 372, column: 19, scope: !3379)
!3416 = !DILocation(line: 372, column: 3, scope: !3379)
!3417 = !DILocation(line: 372, column: 8, scope: !3379)
!3418 = !DILocation(line: 372, column: 17, scope: !3379)
!3419 = !DILocation(line: 373, column: 19, scope: !3379)
!3420 = !DILocation(line: 373, column: 3, scope: !3379)
!3421 = !DILocation(line: 373, column: 8, scope: !3379)
!3422 = !DILocation(line: 373, column: 17, scope: !3379)
!3423 = !DILocation(line: 374, column: 20, scope: !3379)
!3424 = !DILocation(line: 374, column: 11, scope: !3379)
!3425 = !DILocation(line: 374, column: 4, scope: !3379)
!3426 = !DILocation(line: 374, column: 9, scope: !3379)
!3427 = !DILocation(line: 375, column: 19, scope: !3379)
!3428 = !DILocation(line: 375, column: 39, scope: !3379)
!3429 = !DILocation(line: 375, column: 44, scope: !3379)
!3430 = !DILocation(line: 375, column: 3, scope: !3379)
!3431 = !DILocation(line: 376, column: 10, scope: !3379)
!3432 = !DILocation(line: 376, column: 15, scope: !3379)
!3433 = !DILocation(line: 376, column: 3, scope: !3379)
!3434 = !DILocation(line: 377, column: 1, scope: !3379)
!3435 = distinct !DISubprogram(name: "get_next_value_id", scope: !3, file: !3, line: 3307, type: !3436, scopeLine: 3308, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!3436 = !DISubroutineType(types: !3437)
!3437 = !{!7}
!3438 = !DILocation(line: 3309, column: 23, scope: !3435)
!3439 = !DILocation(line: 3309, column: 3, scope: !3435)
!3440 = distinct !DISubprogram(name: "value_id_constant_p", scope: !3, file: !3, line: 382, type: !3441, scopeLine: 383, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!3441 = !DISubroutineType(types: !3442)
!3442 = !{!1603, !7}
!3443 = !DILocalVariable(name: "v", arg: 1, scope: !3440, file: !3, line: 382, type: !7)
!3444 = !DILocation(line: 382, column: 35, scope: !3440)
!3445 = !DILocation(line: 384, column: 24, scope: !3440)
!3446 = !DILocation(line: 384, column: 44, scope: !3440)
!3447 = !DILocation(line: 384, column: 10, scope: !3440)
!3448 = !DILocation(line: 384, column: 3, scope: !3440)
!3449 = distinct !DISubprogram(name: "vn_reference_compute_hash", scope: !3, file: !3, line: 430, type: !3450, scopeLine: 431, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!3450 = !DISubroutineType(types: !3451)
!3451 = !{!2307, !3452}
!3452 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2890)
!3453 = !DILocalVariable(name: "vr1", arg: 1, scope: !3449, file: !3, line: 430, type: !3452)
!3454 = !DILocation(line: 430, column: 49, scope: !3449)
!3455 = !DILocalVariable(name: "result", scope: !3449, file: !3, line: 432, type: !2307)
!3456 = !DILocation(line: 432, column: 13, scope: !3449)
!3457 = !DILocalVariable(name: "i", scope: !3449, file: !3, line: 433, type: !1580)
!3458 = !DILocation(line: 433, column: 7, scope: !3449)
!3459 = !DILocalVariable(name: "vro", scope: !3449, file: !3, line: 434, type: !3460)
!3460 = !DIDerivedType(tag: DW_TAG_typedef, name: "vn_reference_op_t", file: !1480, line: 80, baseType: !3461)
!3461 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2880, size: 64)
!3462 = !DILocation(line: 434, column: 21, scope: !3449)
!3463 = !DILocation(line: 436, column: 10, scope: !3464)
!3464 = distinct !DILexicalBlock(scope: !3449, file: !3, line: 436, column: 3)
!3465 = !DILocation(line: 436, column: 8, scope: !3464)
!3466 = !DILocation(line: 436, column: 15, scope: !3467)
!3467 = distinct !DILexicalBlock(scope: !3464, file: !3, line: 436, column: 3)
!3468 = !DILocation(line: 436, column: 3, scope: !3464)
!3469 = !DILocation(line: 437, column: 44, scope: !3467)
!3470 = !DILocation(line: 437, column: 49, scope: !3467)
!3471 = !DILocation(line: 437, column: 14, scope: !3467)
!3472 = !DILocation(line: 437, column: 12, scope: !3467)
!3473 = !DILocation(line: 437, column: 5, scope: !3467)
!3474 = !DILocation(line: 436, column: 72, scope: !3467)
!3475 = !DILocation(line: 436, column: 3, scope: !3467)
!3476 = distinct !{!3476, !3468, !3477}
!3477 = !DILocation(line: 437, column: 55, scope: !3464)
!3478 = !DILocation(line: 438, column: 7, scope: !3479)
!3479 = distinct !DILexicalBlock(scope: !3449, file: !3, line: 438, column: 7)
!3480 = !DILocation(line: 438, column: 12, scope: !3479)
!3481 = !DILocation(line: 438, column: 7, scope: !3449)
!3482 = !DILocation(line: 439, column: 15, scope: !3479)
!3483 = !DILocation(line: 439, column: 12, scope: !3479)
!3484 = !DILocation(line: 439, column: 5, scope: !3479)
!3485 = !DILocation(line: 441, column: 10, scope: !3449)
!3486 = !DILocation(line: 441, column: 3, scope: !3449)
!3487 = distinct !DISubprogram(name: "VEC_vn_reference_op_s_base_iterate", scope: !1480, file: !1480, line: 83, type: !3488, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!3488 = !DISubroutineType(types: !3489)
!3489 = !{!1580, !3490, !7, !3491}
!3490 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2873, size: 64)
!3491 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3461, size: 64)
!3492 = !DILocalVariable(name: "vec_", arg: 1, scope: !3487, file: !1480, line: 83, type: !3490)
!3493 = !DILocation(line: 83, column: 1, scope: !3487)
!3494 = !DILocalVariable(name: "ix_", arg: 2, scope: !3487, file: !1480, line: 83, type: !7)
!3495 = !DILocalVariable(name: "ptr", arg: 3, scope: !3487, file: !1480, line: 83, type: !3491)
!3496 = !DILocation(line: 83, column: 1, scope: !3497)
!3497 = distinct !DILexicalBlock(scope: !3487, file: !1480, line: 83, column: 1)
!3498 = !DILocation(line: 83, column: 1, scope: !3499)
!3499 = distinct !DILexicalBlock(scope: !3497, file: !1480, line: 83, column: 1)
!3500 = !DILocation(line: 83, column: 1, scope: !3501)
!3501 = distinct !DILexicalBlock(scope: !3497, file: !1480, line: 83, column: 1)
!3502 = distinct !DISubprogram(name: "vn_reference_op_compute_hash", scope: !3, file: !3, line: 406, type: !3503, scopeLine: 407, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!3503 = !DISubroutineType(types: !3504)
!3504 = !{!2307, !3505, !2307}
!3505 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3460)
!3506 = !DILocalVariable(name: "vro1", arg: 1, scope: !3502, file: !3, line: 406, type: !3505)
!3507 = !DILocation(line: 406, column: 55, scope: !3502)
!3508 = !DILocalVariable(name: "result", arg: 2, scope: !3502, file: !3, line: 406, type: !2307)
!3509 = !DILocation(line: 406, column: 71, scope: !3502)
!3510 = !DILocation(line: 408, column: 38, scope: !3502)
!3511 = !DILocation(line: 408, column: 44, scope: !3502)
!3512 = !DILocation(line: 408, column: 52, scope: !3502)
!3513 = !DILocation(line: 408, column: 12, scope: !3502)
!3514 = !DILocation(line: 408, column: 10, scope: !3502)
!3515 = !DILocation(line: 409, column: 7, scope: !3516)
!3516 = distinct !DILexicalBlock(scope: !3502, file: !3, line: 409, column: 7)
!3517 = !DILocation(line: 409, column: 13, scope: !3516)
!3518 = !DILocation(line: 409, column: 7, scope: !3502)
!3519 = !DILocation(line: 410, column: 35, scope: !3516)
!3520 = !DILocation(line: 410, column: 41, scope: !3516)
!3521 = !DILocation(line: 410, column: 46, scope: !3516)
!3522 = !DILocation(line: 410, column: 14, scope: !3516)
!3523 = !DILocation(line: 410, column: 12, scope: !3516)
!3524 = !DILocation(line: 410, column: 5, scope: !3516)
!3525 = !DILocation(line: 411, column: 7, scope: !3526)
!3526 = distinct !DILexicalBlock(scope: !3502, file: !3, line: 411, column: 7)
!3527 = !DILocation(line: 411, column: 13, scope: !3526)
!3528 = !DILocation(line: 411, column: 7, scope: !3502)
!3529 = !DILocation(line: 412, column: 35, scope: !3526)
!3530 = !DILocation(line: 412, column: 41, scope: !3526)
!3531 = !DILocation(line: 412, column: 46, scope: !3526)
!3532 = !DILocation(line: 412, column: 14, scope: !3526)
!3533 = !DILocation(line: 412, column: 12, scope: !3526)
!3534 = !DILocation(line: 412, column: 5, scope: !3526)
!3535 = !DILocation(line: 413, column: 7, scope: !3536)
!3536 = distinct !DILexicalBlock(scope: !3502, file: !3, line: 413, column: 7)
!3537 = !DILocation(line: 413, column: 13, scope: !3536)
!3538 = !DILocation(line: 413, column: 7, scope: !3502)
!3539 = !DILocation(line: 414, column: 35, scope: !3536)
!3540 = !DILocation(line: 414, column: 41, scope: !3536)
!3541 = !DILocation(line: 414, column: 46, scope: !3536)
!3542 = !DILocation(line: 414, column: 14, scope: !3536)
!3543 = !DILocation(line: 414, column: 12, scope: !3536)
!3544 = !DILocation(line: 414, column: 5, scope: !3536)
!3545 = !DILocation(line: 415, column: 10, scope: !3502)
!3546 = !DILocation(line: 415, column: 3, scope: !3502)
!3547 = distinct !DISubprogram(name: "vn_reference_eq", scope: !3, file: !3, line: 448, type: !2313, scopeLine: 449, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!3548 = !DILocalVariable(name: "p1", arg: 1, scope: !3547, file: !3, line: 448, type: !2308)
!3549 = !DILocation(line: 448, column: 30, scope: !3547)
!3550 = !DILocalVariable(name: "p2", arg: 2, scope: !3547, file: !3, line: 448, type: !2308)
!3551 = !DILocation(line: 448, column: 46, scope: !3547)
!3552 = !DILocalVariable(name: "i", scope: !3547, file: !3, line: 450, type: !1580)
!3553 = !DILocation(line: 450, column: 7, scope: !3547)
!3554 = !DILocalVariable(name: "vro", scope: !3547, file: !3, line: 451, type: !3460)
!3555 = !DILocation(line: 451, column: 21, scope: !3547)
!3556 = !DILocalVariable(name: "vr1", scope: !3547, file: !3, line: 453, type: !3557)
!3557 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2857)
!3558 = !DILocation(line: 453, column: 30, scope: !3547)
!3559 = !DILocation(line: 453, column: 59, scope: !3547)
!3560 = !DILocation(line: 453, column: 36, scope: !3547)
!3561 = !DILocalVariable(name: "vr2", scope: !3547, file: !3, line: 454, type: !3557)
!3562 = !DILocation(line: 454, column: 30, scope: !3547)
!3563 = !DILocation(line: 454, column: 59, scope: !3547)
!3564 = !DILocation(line: 454, column: 36, scope: !3547)
!3565 = !DILocation(line: 455, column: 7, scope: !3566)
!3566 = distinct !DILexicalBlock(scope: !3547, file: !3, line: 455, column: 7)
!3567 = !DILocation(line: 455, column: 12, scope: !3566)
!3568 = !DILocation(line: 455, column: 24, scope: !3566)
!3569 = !DILocation(line: 455, column: 29, scope: !3566)
!3570 = !DILocation(line: 455, column: 21, scope: !3566)
!3571 = !DILocation(line: 455, column: 7, scope: !3547)
!3572 = !DILocation(line: 456, column: 5, scope: !3566)
!3573 = !DILocation(line: 459, column: 7, scope: !3574)
!3574 = distinct !DILexicalBlock(scope: !3547, file: !3, line: 459, column: 7)
!3575 = !DILocation(line: 459, column: 12, scope: !3574)
!3576 = !DILocation(line: 459, column: 24, scope: !3574)
!3577 = !DILocation(line: 459, column: 29, scope: !3574)
!3578 = !DILocation(line: 459, column: 21, scope: !3574)
!3579 = !DILocation(line: 459, column: 7, scope: !3547)
!3580 = !DILocation(line: 460, column: 5, scope: !3574)
!3581 = !DILocation(line: 463, column: 7, scope: !3582)
!3582 = distinct !DILexicalBlock(scope: !3547, file: !3, line: 463, column: 7)
!3583 = !DILocation(line: 463, column: 12, scope: !3582)
!3584 = !DILocation(line: 463, column: 20, scope: !3582)
!3585 = !DILocation(line: 463, column: 25, scope: !3582)
!3586 = !DILocation(line: 463, column: 17, scope: !3582)
!3587 = !DILocation(line: 463, column: 7, scope: !3547)
!3588 = !DILocation(line: 464, column: 5, scope: !3582)
!3589 = !DILocation(line: 467, column: 7, scope: !3590)
!3590 = distinct !DILexicalBlock(scope: !3547, file: !3, line: 467, column: 7)
!3591 = !DILocation(line: 467, column: 12, scope: !3590)
!3592 = !DILocation(line: 467, column: 24, scope: !3590)
!3593 = !DILocation(line: 467, column: 29, scope: !3590)
!3594 = !DILocation(line: 467, column: 21, scope: !3590)
!3595 = !DILocation(line: 467, column: 7, scope: !3547)
!3596 = !DILocation(line: 468, column: 5, scope: !3590)
!3597 = !DILocation(line: 473, column: 7, scope: !3598)
!3598 = distinct !DILexicalBlock(scope: !3547, file: !3, line: 473, column: 7)
!3599 = !DILocation(line: 474, column: 10, scope: !3598)
!3600 = !DILocation(line: 474, column: 7, scope: !3598)
!3601 = !DILocation(line: 473, column: 7, scope: !3547)
!3602 = !DILocation(line: 475, column: 5, scope: !3598)
!3603 = !DILocation(line: 477, column: 10, scope: !3604)
!3604 = distinct !DILexicalBlock(scope: !3547, file: !3, line: 477, column: 3)
!3605 = !DILocation(line: 477, column: 8, scope: !3604)
!3606 = !DILocation(line: 477, column: 15, scope: !3607)
!3607 = distinct !DILexicalBlock(scope: !3604, file: !3, line: 477, column: 3)
!3608 = !DILocation(line: 477, column: 3, scope: !3604)
!3609 = !DILocation(line: 478, column: 30, scope: !3610)
!3610 = distinct !DILexicalBlock(scope: !3607, file: !3, line: 478, column: 9)
!3611 = !DILocation(line: 479, column: 9, scope: !3610)
!3612 = !DILocation(line: 478, column: 10, scope: !3610)
!3613 = !DILocation(line: 478, column: 9, scope: !3607)
!3614 = !DILocation(line: 480, column: 7, scope: !3610)
!3615 = !DILocation(line: 479, column: 12, scope: !3610)
!3616 = !DILocation(line: 477, column: 72, scope: !3607)
!3617 = !DILocation(line: 477, column: 3, scope: !3607)
!3618 = distinct !{!3618, !3608, !3619}
!3619 = !DILocation(line: 480, column: 14, scope: !3604)
!3620 = !DILocation(line: 482, column: 3, scope: !3547)
!3621 = !DILocation(line: 483, column: 1, scope: !3547)
!3622 = distinct !DISubprogram(name: "VEC_vn_reference_op_s_base_length", scope: !1480, file: !1480, line: 83, type: !3623, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!3623 = !DISubroutineType(types: !3624)
!3624 = !{!7, !3625}
!3625 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3626, size: 64)
!3626 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2873)
!3627 = !DILocalVariable(name: "vec_", arg: 1, scope: !3622, file: !1480, line: 83, type: !3625)
!3628 = !DILocation(line: 83, column: 1, scope: !3622)
!3629 = distinct !DISubprogram(name: "vn_reference_op_eq", scope: !3, file: !3, line: 391, type: !2313, scopeLine: 392, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!3630 = !DILocalVariable(name: "p1", arg: 1, scope: !3629, file: !3, line: 391, type: !2308)
!3631 = !DILocation(line: 391, column: 33, scope: !3629)
!3632 = !DILocalVariable(name: "p2", arg: 2, scope: !3629, file: !3, line: 391, type: !2308)
!3633 = !DILocation(line: 391, column: 49, scope: !3629)
!3634 = !DILocalVariable(name: "vro1", scope: !3629, file: !3, line: 393, type: !3635)
!3635 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2921)
!3636 = !DILocation(line: 393, column: 33, scope: !3629)
!3637 = !DILocation(line: 393, column: 66, scope: !3629)
!3638 = !DILocation(line: 393, column: 40, scope: !3629)
!3639 = !DILocalVariable(name: "vro2", scope: !3629, file: !3, line: 394, type: !3635)
!3640 = !DILocation(line: 394, column: 33, scope: !3629)
!3641 = !DILocation(line: 394, column: 66, scope: !3629)
!3642 = !DILocation(line: 394, column: 40, scope: !3629)
!3643 = !DILocation(line: 396, column: 10, scope: !3629)
!3644 = !DILocation(line: 396, column: 16, scope: !3629)
!3645 = !DILocation(line: 396, column: 26, scope: !3629)
!3646 = !DILocation(line: 396, column: 32, scope: !3629)
!3647 = !DILocation(line: 396, column: 23, scope: !3629)
!3648 = !DILocation(line: 397, column: 5, scope: !3629)
!3649 = !DILocation(line: 397, column: 28, scope: !3629)
!3650 = !DILocation(line: 397, column: 34, scope: !3629)
!3651 = !DILocation(line: 397, column: 40, scope: !3629)
!3652 = !DILocation(line: 397, column: 46, scope: !3629)
!3653 = !DILocation(line: 397, column: 8, scope: !3629)
!3654 = !DILocation(line: 398, column: 5, scope: !3629)
!3655 = !DILocation(line: 398, column: 29, scope: !3629)
!3656 = !DILocation(line: 398, column: 35, scope: !3629)
!3657 = !DILocation(line: 398, column: 40, scope: !3629)
!3658 = !DILocation(line: 398, column: 46, scope: !3629)
!3659 = !DILocation(line: 398, column: 8, scope: !3629)
!3660 = !DILocation(line: 399, column: 5, scope: !3629)
!3661 = !DILocation(line: 399, column: 29, scope: !3629)
!3662 = !DILocation(line: 399, column: 35, scope: !3629)
!3663 = !DILocation(line: 399, column: 40, scope: !3629)
!3664 = !DILocation(line: 399, column: 46, scope: !3629)
!3665 = !DILocation(line: 399, column: 8, scope: !3629)
!3666 = !DILocation(line: 400, column: 5, scope: !3629)
!3667 = !DILocation(line: 400, column: 29, scope: !3629)
!3668 = !DILocation(line: 400, column: 35, scope: !3629)
!3669 = !DILocation(line: 400, column: 40, scope: !3629)
!3670 = !DILocation(line: 400, column: 46, scope: !3629)
!3671 = !DILocation(line: 400, column: 8, scope: !3629)
!3672 = !DILocation(line: 0, scope: !3629)
!3673 = !DILocation(line: 396, column: 3, scope: !3629)
!3674 = distinct !DISubprogram(name: "VEC_vn_reference_op_s_base_index", scope: !1480, file: !1480, line: 83, type: !3675, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!3675 = !DISubroutineType(types: !3676)
!3676 = !{!3461, !3490, !7}
!3677 = !DILocalVariable(name: "vec_", arg: 1, scope: !3674, file: !1480, line: 83, type: !3490)
!3678 = !DILocation(line: 83, column: 1, scope: !3674)
!3679 = !DILocalVariable(name: "ix_", arg: 2, scope: !3674, file: !1480, line: 83, type: !7)
!3680 = !DILocation(line: 0, scope: !3674)
!3681 = distinct !DISubprogram(name: "copy_reference_ops_from_ref", scope: !3, file: !3, line: 489, type: !3682, scopeLine: 490, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!3682 = !DISubroutineType(types: !3683)
!3683 = !{null, !1483, !3684}
!3684 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2868, size: 64)
!3685 = !DILocalVariable(name: "ref", arg: 1, scope: !3681, file: !3, line: 489, type: !1483)
!3686 = !DILocation(line: 489, column: 35, scope: !3681)
!3687 = !DILocalVariable(name: "result", arg: 2, scope: !3681, file: !3, line: 489, type: !3684)
!3688 = !DILocation(line: 489, column: 71, scope: !3681)
!3689 = !DILocation(line: 491, column: 7, scope: !3690)
!3690 = distinct !DILexicalBlock(scope: !3681, file: !3, line: 491, column: 7)
!3691 = !DILocation(line: 491, column: 23, scope: !3690)
!3692 = !DILocation(line: 491, column: 7, scope: !3681)
!3693 = !DILocalVariable(name: "temp", scope: !3694, file: !3, line: 493, type: !2880)
!3694 = distinct !DILexicalBlock(scope: !3690, file: !3, line: 492, column: 5)
!3695 = !DILocation(line: 493, column: 25, scope: !3694)
!3696 = !DILocalVariable(name: "base", scope: !3694, file: !3, line: 494, type: !1483)
!3697 = !DILocation(line: 494, column: 12, scope: !3694)
!3698 = !DILocation(line: 496, column: 14, scope: !3694)
!3699 = !DILocation(line: 496, column: 33, scope: !3694)
!3700 = !DILocation(line: 496, column: 52, scope: !3694)
!3701 = !DILocation(line: 496, column: 12, scope: !3694)
!3702 = !DILocation(line: 497, column: 12, scope: !3703)
!3703 = distinct !DILexicalBlock(scope: !3694, file: !3, line: 497, column: 11)
!3704 = !DILocation(line: 497, column: 11, scope: !3694)
!3705 = !DILocation(line: 498, column: 24, scope: !3703)
!3706 = !DILocation(line: 498, column: 9, scope: !3703)
!3707 = !DILocation(line: 498, column: 7, scope: !3703)
!3708 = !DILocation(line: 498, column: 2, scope: !3703)
!3709 = !DILocation(line: 500, column: 7, scope: !3694)
!3710 = !DILocation(line: 502, column: 19, scope: !3694)
!3711 = !DILocation(line: 502, column: 12, scope: !3694)
!3712 = !DILocation(line: 502, column: 17, scope: !3694)
!3713 = !DILocation(line: 503, column: 21, scope: !3694)
!3714 = !DILocation(line: 503, column: 12, scope: !3694)
!3715 = !DILocation(line: 503, column: 19, scope: !3694)
!3716 = !DILocation(line: 504, column: 18, scope: !3694)
!3717 = !DILocation(line: 504, column: 12, scope: !3694)
!3718 = !DILocation(line: 504, column: 16, scope: !3694)
!3719 = !DILocation(line: 505, column: 18, scope: !3694)
!3720 = !DILocation(line: 505, column: 12, scope: !3694)
!3721 = !DILocation(line: 505, column: 16, scope: !3694)
!3722 = !DILocation(line: 506, column: 18, scope: !3694)
!3723 = !DILocation(line: 506, column: 12, scope: !3694)
!3724 = !DILocation(line: 506, column: 16, scope: !3694)
!3725 = !DILocation(line: 507, column: 7, scope: !3694)
!3726 = !DILocation(line: 509, column: 7, scope: !3694)
!3727 = !DILocation(line: 510, column: 12, scope: !3694)
!3728 = !DILocation(line: 510, column: 17, scope: !3694)
!3729 = !DILocation(line: 511, column: 21, scope: !3694)
!3730 = !DILocation(line: 511, column: 12, scope: !3694)
!3731 = !DILocation(line: 511, column: 19, scope: !3694)
!3732 = !DILocation(line: 512, column: 18, scope: !3694)
!3733 = !DILocation(line: 512, column: 12, scope: !3694)
!3734 = !DILocation(line: 512, column: 16, scope: !3694)
!3735 = !DILocation(line: 513, column: 18, scope: !3694)
!3736 = !DILocation(line: 513, column: 12, scope: !3694)
!3737 = !DILocation(line: 513, column: 16, scope: !3694)
!3738 = !DILocation(line: 514, column: 7, scope: !3694)
!3739 = !DILocation(line: 515, column: 7, scope: !3694)
!3740 = !DILocation(line: 520, column: 3, scope: !3681)
!3741 = !DILocation(line: 520, column: 10, scope: !3681)
!3742 = !DILocalVariable(name: "temp", scope: !3743, file: !3, line: 522, type: !2880)
!3743 = distinct !DILexicalBlock(scope: !3681, file: !3, line: 521, column: 5)
!3744 = !DILocation(line: 522, column: 25, scope: !3743)
!3745 = !DILocation(line: 524, column: 7, scope: !3743)
!3746 = !DILocation(line: 526, column: 19, scope: !3743)
!3747 = !DILocation(line: 526, column: 12, scope: !3743)
!3748 = !DILocation(line: 526, column: 17, scope: !3743)
!3749 = !DILocation(line: 527, column: 21, scope: !3743)
!3750 = !DILocation(line: 527, column: 12, scope: !3743)
!3751 = !DILocation(line: 527, column: 19, scope: !3743)
!3752 = !DILocation(line: 529, column: 20, scope: !3743)
!3753 = !DILocation(line: 529, column: 7, scope: !3743)
!3754 = !DILocation(line: 535, column: 4, scope: !3755)
!3755 = distinct !DILexicalBlock(scope: !3743, file: !3, line: 530, column: 2)
!3756 = !DILocation(line: 537, column: 15, scope: !3755)
!3757 = !DILocation(line: 537, column: 9, scope: !3755)
!3758 = !DILocation(line: 537, column: 13, scope: !3755)
!3759 = !DILocation(line: 538, column: 4, scope: !3755)
!3760 = !DILocation(line: 541, column: 15, scope: !3755)
!3761 = !DILocation(line: 541, column: 9, scope: !3755)
!3762 = !DILocation(line: 541, column: 13, scope: !3755)
!3763 = !DILocation(line: 542, column: 15, scope: !3755)
!3764 = !DILocation(line: 542, column: 9, scope: !3755)
!3765 = !DILocation(line: 542, column: 13, scope: !3755)
!3766 = !DILocation(line: 543, column: 4, scope: !3755)
!3767 = !DILocation(line: 548, column: 9, scope: !3755)
!3768 = !DILocation(line: 548, column: 14, scope: !3755)
!3769 = !DILocation(line: 549, column: 15, scope: !3755)
!3770 = !DILocation(line: 549, column: 9, scope: !3755)
!3771 = !DILocation(line: 549, column: 13, scope: !3755)
!3772 = !DILocation(line: 550, column: 15, scope: !3755)
!3773 = !DILocation(line: 550, column: 9, scope: !3755)
!3774 = !DILocation(line: 550, column: 13, scope: !3755)
!3775 = !DILocation(line: 555, column: 8, scope: !3776)
!3776 = distinct !DILexicalBlock(scope: !3755, file: !3, line: 555, column: 8)
!3777 = !DILocation(line: 556, column: 8, scope: !3776)
!3778 = !DILocation(line: 556, column: 16, scope: !3776)
!3779 = !DILocation(line: 556, column: 20, scope: !3776)
!3780 = !DILocation(line: 557, column: 8, scope: !3776)
!3781 = !DILocation(line: 557, column: 11, scope: !3776)
!3782 = !DILocation(line: 557, column: 47, scope: !3776)
!3783 = !DILocation(line: 558, column: 8, scope: !3776)
!3784 = !DILocation(line: 558, column: 26, scope: !3776)
!3785 = !DILocation(line: 558, column: 11, scope: !3776)
!3786 = !DILocation(line: 559, column: 8, scope: !3776)
!3787 = !DILocation(line: 559, column: 26, scope: !3776)
!3788 = !DILocation(line: 559, column: 11, scope: !3776)
!3789 = !DILocation(line: 560, column: 8, scope: !3776)
!3790 = !DILocation(line: 560, column: 26, scope: !3776)
!3791 = !DILocation(line: 560, column: 11, scope: !3776)
!3792 = !DILocation(line: 555, column: 8, scope: !3755)
!3793 = !DILocation(line: 561, column: 17, scope: !3776)
!3794 = !DILocation(line: 561, column: 11, scope: !3776)
!3795 = !DILocation(line: 561, column: 15, scope: !3776)
!3796 = !DILocation(line: 561, column: 6, scope: !3776)
!3797 = !DILocation(line: 562, column: 4, scope: !3755)
!3798 = !DILocation(line: 566, column: 15, scope: !3755)
!3799 = !DILocation(line: 566, column: 9, scope: !3755)
!3800 = !DILocation(line: 566, column: 13, scope: !3755)
!3801 = !DILocation(line: 568, column: 36, scope: !3755)
!3802 = !DILocation(line: 568, column: 15, scope: !3755)
!3803 = !DILocation(line: 568, column: 9, scope: !3755)
!3804 = !DILocation(line: 568, column: 13, scope: !3755)
!3805 = !DILocation(line: 569, column: 39, scope: !3755)
!3806 = !DILocation(line: 569, column: 15, scope: !3755)
!3807 = !DILocation(line: 569, column: 9, scope: !3755)
!3808 = !DILocation(line: 569, column: 13, scope: !3755)
!3809 = !DILocation(line: 570, column: 4, scope: !3755)
!3810 = !DILocation(line: 582, column: 15, scope: !3755)
!3811 = !DILocation(line: 582, column: 9, scope: !3755)
!3812 = !DILocation(line: 582, column: 13, scope: !3755)
!3813 = !DILocation(line: 583, column: 4, scope: !3755)
!3814 = !DILocation(line: 585, column: 33, scope: !3815)
!3815 = distinct !DILexicalBlock(scope: !3755, file: !3, line: 585, column: 8)
!3816 = !DILocation(line: 585, column: 8, scope: !3815)
!3817 = !DILocation(line: 585, column: 8, scope: !3755)
!3818 = !DILocation(line: 587, column: 19, scope: !3819)
!3819 = distinct !DILexicalBlock(scope: !3815, file: !3, line: 586, column: 6)
!3820 = !DILocation(line: 587, column: 13, scope: !3819)
!3821 = !DILocation(line: 587, column: 17, scope: !3819)
!3822 = !DILocation(line: 588, column: 8, scope: !3819)
!3823 = !DILocation(line: 585, column: 36, scope: !3815)
!3824 = !DILocation(line: 599, column: 4, scope: !3755)
!3825 = !DILocation(line: 601, column: 4, scope: !3755)
!3826 = !DILocation(line: 602, column: 2, scope: !3755)
!3827 = !DILocation(line: 603, column: 7, scope: !3743)
!3828 = !DILocation(line: 605, column: 11, scope: !3829)
!3829 = distinct !DILexicalBlock(scope: !3743, file: !3, line: 605, column: 11)
!3830 = !DILocation(line: 606, column: 4, scope: !3829)
!3831 = !DILocation(line: 606, column: 8, scope: !3829)
!3832 = !DILocation(line: 606, column: 24, scope: !3829)
!3833 = !DILocation(line: 607, column: 8, scope: !3829)
!3834 = !DILocation(line: 607, column: 37, scope: !3829)
!3835 = !DILocation(line: 607, column: 12, scope: !3829)
!3836 = !DILocation(line: 605, column: 11, scope: !3743)
!3837 = !DILocation(line: 608, column: 8, scope: !3829)
!3838 = !DILocation(line: 608, column: 6, scope: !3829)
!3839 = !DILocation(line: 608, column: 2, scope: !3829)
!3840 = !DILocation(line: 610, column: 6, scope: !3829)
!3841 = distinct !{!3841, !3740, !3842}
!3842 = !DILocation(line: 611, column: 5, scope: !3681)
!3843 = !DILocation(line: 612, column: 1, scope: !3681)
!3844 = distinct !DISubprogram(name: "VEC_vn_reference_op_s_heap_safe_push", scope: !1480, file: !1480, line: 84, type: !3845, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!3845 = !DISubroutineType(types: !3846)
!3846 = !{!3461, !3684, !2922}
!3847 = !DILocalVariable(name: "vec_", arg: 1, scope: !3844, file: !1480, line: 84, type: !3684)
!3848 = !DILocation(line: 84, column: 1, scope: !3844)
!3849 = !DILocalVariable(name: "obj_", arg: 2, scope: !3844, file: !1480, line: 84, type: !2922)
!3850 = distinct !DISubprogram(name: "ao_ref_init_from_vn_reference", scope: !3, file: !3, line: 619, type: !3851, scopeLine: 622, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!3851 = !DISubroutineType(types: !3852)
!3852 = !{!1603, !3853, !2123, !1483, !2868}
!3853 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3854, size: 64)
!3854 = !DIDerivedType(tag: DW_TAG_typedef, name: "ao_ref", file: !2374, line: 86, baseType: !3855)
!3855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ao_ref_s", file: !2374, line: 63, size: 384, elements: !3856)
!3856 = !{!3857, !3858, !3859, !3860, !3861, !3862, !3863}
!3857 = !DIDerivedType(tag: DW_TAG_member, name: "ref", scope: !3855, file: !2374, line: 67, baseType: !1483, size: 64)
!3858 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3855, file: !2374, line: 73, baseType: !1483, size: 64, offset: 64)
!3859 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3855, file: !2374, line: 75, baseType: !1539, size: 64, offset: 128)
!3860 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3855, file: !2374, line: 77, baseType: !1539, size: 64, offset: 192)
!3861 = !DIDerivedType(tag: DW_TAG_member, name: "max_size", scope: !3855, file: !2374, line: 79, baseType: !1539, size: 64, offset: 256)
!3862 = !DIDerivedType(tag: DW_TAG_member, name: "ref_alias_set", scope: !3855, file: !2374, line: 82, baseType: !2123, size: 32, offset: 320)
!3863 = !DIDerivedType(tag: DW_TAG_member, name: "base_alias_set", scope: !3855, file: !2374, line: 85, baseType: !2123, size: 32, offset: 352)
!3864 = !DILocalVariable(name: "ref", arg: 1, scope: !3850, file: !3, line: 619, type: !3853)
!3865 = !DILocation(line: 619, column: 40, scope: !3850)
!3866 = !DILocalVariable(name: "set", arg: 2, scope: !3850, file: !3, line: 620, type: !2123)
!3867 = !DILocation(line: 620, column: 26, scope: !3850)
!3868 = !DILocalVariable(name: "type", arg: 3, scope: !3850, file: !3, line: 620, type: !1483)
!3869 = !DILocation(line: 620, column: 36, scope: !3850)
!3870 = !DILocalVariable(name: "ops", arg: 4, scope: !3850, file: !3, line: 621, type: !2868)
!3871 = !DILocation(line: 621, column: 42, scope: !3850)
!3872 = !DILocalVariable(name: "op", scope: !3850, file: !3, line: 623, type: !3460)
!3873 = !DILocation(line: 623, column: 21, scope: !3850)
!3874 = !DILocalVariable(name: "i", scope: !3850, file: !3, line: 624, type: !7)
!3875 = !DILocation(line: 624, column: 12, scope: !3850)
!3876 = !DILocalVariable(name: "base", scope: !3850, file: !3, line: 625, type: !1483)
!3877 = !DILocation(line: 625, column: 8, scope: !3850)
!3878 = !DILocalVariable(name: "op0_p", scope: !3850, file: !3, line: 626, type: !1848)
!3879 = !DILocation(line: 626, column: 9, scope: !3850)
!3880 = !DILocalVariable(name: "offset", scope: !3850, file: !3, line: 627, type: !1539)
!3881 = !DILocation(line: 627, column: 17, scope: !3850)
!3882 = !DILocalVariable(name: "max_size", scope: !3850, file: !3, line: 628, type: !1539)
!3883 = !DILocation(line: 628, column: 17, scope: !3850)
!3884 = !DILocalVariable(name: "size", scope: !3850, file: !3, line: 629, type: !1539)
!3885 = !DILocation(line: 629, column: 17, scope: !3850)
!3886 = !DILocalVariable(name: "size_tree", scope: !3850, file: !3, line: 630, type: !1483)
!3887 = !DILocation(line: 630, column: 8, scope: !3850)
!3888 = !DILocation(line: 633, column: 8, scope: !3850)
!3889 = !DILocation(line: 633, column: 6, scope: !3850)
!3890 = !DILocation(line: 634, column: 7, scope: !3891)
!3891 = distinct !DILexicalBlock(scope: !3850, file: !3, line: 634, column: 7)
!3892 = !DILocation(line: 634, column: 11, scope: !3891)
!3893 = !DILocation(line: 634, column: 18, scope: !3891)
!3894 = !DILocation(line: 634, column: 7, scope: !3850)
!3895 = !DILocation(line: 636, column: 11, scope: !3896)
!3896 = distinct !DILexicalBlock(scope: !3897, file: !3, line: 636, column: 11)
!3897 = distinct !DILexicalBlock(scope: !3891, file: !3, line: 635, column: 5)
!3898 = !DILocation(line: 636, column: 31, scope: !3896)
!3899 = !DILocation(line: 636, column: 11, scope: !3897)
!3900 = !DILocation(line: 637, column: 14, scope: !3896)
!3901 = !DILocation(line: 637, column: 18, scope: !3896)
!3902 = !DILocation(line: 637, column: 12, scope: !3896)
!3903 = !DILocation(line: 637, column: 2, scope: !3896)
!3904 = !DILocation(line: 639, column: 14, scope: !3896)
!3905 = !DILocation(line: 639, column: 12, scope: !3896)
!3906 = !DILocation(line: 640, column: 5, scope: !3897)
!3907 = !DILocation(line: 641, column: 12, scope: !3908)
!3908 = distinct !DILexicalBlock(scope: !3891, file: !3, line: 641, column: 12)
!3909 = !DILocation(line: 641, column: 16, scope: !3908)
!3910 = !DILocation(line: 641, column: 23, scope: !3908)
!3911 = !DILocation(line: 641, column: 12, scope: !3891)
!3912 = !DILocation(line: 642, column: 17, scope: !3908)
!3913 = !DILocation(line: 642, column: 21, scope: !3908)
!3914 = !DILocation(line: 642, column: 15, scope: !3908)
!3915 = !DILocation(line: 642, column: 5, scope: !3908)
!3916 = !DILocalVariable(name: "mode", scope: !3917, file: !3, line: 645, type: !5)
!3917 = distinct !DILexicalBlock(scope: !3908, file: !3, line: 644, column: 5)
!3918 = !DILocation(line: 645, column: 25, scope: !3917)
!3919 = !DILocation(line: 645, column: 32, scope: !3917)
!3920 = !DILocation(line: 646, column: 11, scope: !3921)
!3921 = distinct !DILexicalBlock(scope: !3917, file: !3, line: 646, column: 11)
!3922 = !DILocation(line: 646, column: 16, scope: !3921)
!3923 = !DILocation(line: 646, column: 11, scope: !3917)
!3924 = !DILocation(line: 647, column: 14, scope: !3921)
!3925 = !DILocation(line: 647, column: 12, scope: !3921)
!3926 = !DILocation(line: 647, column: 2, scope: !3921)
!3927 = !DILocation(line: 649, column: 16, scope: !3921)
!3928 = !DILocation(line: 649, column: 14, scope: !3921)
!3929 = !DILocation(line: 651, column: 7, scope: !3930)
!3930 = distinct !DILexicalBlock(scope: !3850, file: !3, line: 651, column: 7)
!3931 = !DILocation(line: 651, column: 17, scope: !3930)
!3932 = !DILocation(line: 651, column: 7, scope: !3850)
!3933 = !DILocation(line: 653, column: 27, scope: !3934)
!3934 = distinct !DILexicalBlock(scope: !3935, file: !3, line: 653, column: 11)
!3935 = distinct !DILexicalBlock(scope: !3930, file: !3, line: 652, column: 5)
!3936 = !DILocation(line: 653, column: 12, scope: !3934)
!3937 = !DILocation(line: 653, column: 11, scope: !3935)
!3938 = !DILocation(line: 654, column: 7, scope: !3934)
!3939 = !DILocation(line: 654, column: 2, scope: !3934)
!3940 = !DILocation(line: 656, column: 9, scope: !3934)
!3941 = !DILocation(line: 656, column: 7, scope: !3934)
!3942 = !DILocation(line: 657, column: 5, scope: !3935)
!3943 = !DILocation(line: 661, column: 14, scope: !3850)
!3944 = !DILocation(line: 661, column: 12, scope: !3850)
!3945 = !DILocation(line: 665, column: 10, scope: !3946)
!3946 = distinct !DILexicalBlock(scope: !3850, file: !3, line: 665, column: 3)
!3947 = !DILocation(line: 665, column: 8, scope: !3946)
!3948 = !DILocation(line: 665, column: 15, scope: !3949)
!3949 = distinct !DILexicalBlock(scope: !3946, file: !3, line: 665, column: 3)
!3950 = !DILocation(line: 665, column: 3, scope: !3946)
!3951 = !DILocation(line: 667, column: 15, scope: !3952)
!3952 = distinct !DILexicalBlock(scope: !3949, file: !3, line: 666, column: 5)
!3953 = !DILocation(line: 667, column: 19, scope: !3952)
!3954 = !DILocation(line: 667, column: 7, scope: !3952)
!3955 = !DILocation(line: 673, column: 4, scope: !3956)
!3956 = distinct !DILexicalBlock(scope: !3952, file: !3, line: 668, column: 2)
!3957 = !DILocation(line: 678, column: 13, scope: !3956)
!3958 = !DILocation(line: 678, column: 5, scope: !3956)
!3959 = !DILocation(line: 678, column: 11, scope: !3956)
!3960 = !DILocation(line: 679, column: 13, scope: !3956)
!3961 = !DILocation(line: 679, column: 10, scope: !3956)
!3962 = !DILocation(line: 680, column: 4, scope: !3956)
!3963 = !DILocation(line: 683, column: 13, scope: !3956)
!3964 = !DILocation(line: 683, column: 5, scope: !3956)
!3965 = !DILocation(line: 683, column: 11, scope: !3956)
!3966 = !DILocation(line: 685, column: 13, scope: !3956)
!3967 = !DILocation(line: 685, column: 10, scope: !3956)
!3968 = !DILocation(line: 686, column: 4, scope: !3956)
!3969 = !DILocation(line: 692, column: 13, scope: !3956)
!3970 = !DILocation(line: 692, column: 17, scope: !3956)
!3971 = !DILocation(line: 692, column: 5, scope: !3956)
!3972 = !DILocation(line: 692, column: 11, scope: !3956)
!3973 = !DILocation(line: 693, column: 4, scope: !3956)
!3974 = !DILocation(line: 697, column: 28, scope: !3956)
!3975 = !DILocation(line: 697, column: 32, scope: !3956)
!3976 = !DILocation(line: 697, column: 14, scope: !3956)
!3977 = !DILocation(line: 697, column: 11, scope: !3956)
!3978 = !DILocation(line: 698, column: 4, scope: !3956)
!3979 = !DILocalVariable(name: "field", scope: !3980, file: !3, line: 702, type: !1483)
!3980 = distinct !DILexicalBlock(scope: !3956, file: !3, line: 701, column: 4)
!3981 = !DILocation(line: 702, column: 11, scope: !3980)
!3982 = !DILocation(line: 702, column: 19, scope: !3980)
!3983 = !DILocation(line: 702, column: 23, scope: !3980)
!3984 = !DILocation(line: 708, column: 10, scope: !3985)
!3985 = distinct !DILexicalBlock(scope: !3980, file: !3, line: 708, column: 10)
!3986 = !DILocation(line: 708, column: 28, scope: !3985)
!3987 = !DILocation(line: 708, column: 10, scope: !3980)
!3988 = !DILocation(line: 710, column: 15, scope: !3989)
!3989 = distinct !DILexicalBlock(scope: !3985, file: !3, line: 710, column: 15)
!3990 = !DILocation(line: 710, column: 19, scope: !3989)
!3991 = !DILocation(line: 711, column: 8, scope: !3989)
!3992 = !DILocation(line: 711, column: 27, scope: !3989)
!3993 = !DILocation(line: 711, column: 12, scope: !3989)
!3994 = !DILocation(line: 710, column: 15, scope: !3985)
!3995 = !DILocation(line: 712, column: 17, scope: !3989)
!3996 = !DILocation(line: 712, column: 8, scope: !3989)
!3997 = !DILocation(line: 715, column: 14, scope: !3998)
!3998 = distinct !DILexicalBlock(scope: !3989, file: !3, line: 714, column: 8)
!3999 = !DILocation(line: 716, column: 7, scope: !3998)
!4000 = !DILocation(line: 715, column: 10, scope: !3998)
!4001 = !DILocation(line: 717, column: 13, scope: !3998)
!4002 = !DILocation(line: 717, column: 10, scope: !3998)
!4003 = !DILocation(line: 719, column: 6, scope: !3980)
!4004 = !DILocation(line: 725, column: 24, scope: !4005)
!4005 = distinct !DILexicalBlock(scope: !3956, file: !3, line: 725, column: 8)
!4006 = !DILocation(line: 725, column: 28, scope: !4005)
!4007 = !DILocation(line: 725, column: 9, scope: !4005)
!4008 = !DILocation(line: 726, column: 8, scope: !4005)
!4009 = !DILocation(line: 726, column: 27, scope: !4005)
!4010 = !DILocation(line: 726, column: 31, scope: !4005)
!4011 = !DILocation(line: 726, column: 12, scope: !4005)
!4012 = !DILocation(line: 727, column: 8, scope: !4005)
!4013 = !DILocation(line: 727, column: 27, scope: !4005)
!4014 = !DILocation(line: 727, column: 31, scope: !4005)
!4015 = !DILocation(line: 727, column: 12, scope: !4005)
!4016 = !DILocation(line: 725, column: 8, scope: !3956)
!4017 = !DILocation(line: 728, column: 15, scope: !4005)
!4018 = !DILocation(line: 728, column: 6, scope: !4005)
!4019 = !DILocalVariable(name: "hindex", scope: !4020, file: !3, line: 731, type: !1539)
!4020 = distinct !DILexicalBlock(scope: !4005, file: !3, line: 730, column: 6)
!4021 = !DILocation(line: 731, column: 22, scope: !4020)
!4022 = !DILocation(line: 731, column: 31, scope: !4020)
!4023 = !DILocation(line: 732, column: 18, scope: !4020)
!4024 = !DILocation(line: 732, column: 15, scope: !4020)
!4025 = !DILocation(line: 733, column: 18, scope: !4020)
!4026 = !DILocation(line: 733, column: 15, scope: !4020)
!4027 = !DILocation(line: 734, column: 15, scope: !4020)
!4028 = !DILocation(line: 735, column: 18, scope: !4020)
!4029 = !DILocation(line: 735, column: 15, scope: !4020)
!4030 = !DILocation(line: 737, column: 4, scope: !3956)
!4031 = !DILocation(line: 740, column: 4, scope: !3956)
!4032 = !DILocation(line: 743, column: 14, scope: !3956)
!4033 = !DILocation(line: 743, column: 11, scope: !3956)
!4034 = !DILocation(line: 744, column: 4, scope: !3956)
!4035 = !DILocation(line: 747, column: 4, scope: !3956)
!4036 = !DILocation(line: 756, column: 4, scope: !3956)
!4037 = !DILocation(line: 759, column: 4, scope: !3956)
!4038 = !DILocation(line: 761, column: 5, scope: !3952)
!4039 = !DILocation(line: 665, column: 60, scope: !3949)
!4040 = !DILocation(line: 665, column: 3, scope: !3949)
!4041 = distinct !{!4041, !3950, !4042}
!4042 = !DILocation(line: 761, column: 5, scope: !3946)
!4043 = !DILocation(line: 763, column: 7, scope: !4044)
!4044 = distinct !DILexicalBlock(scope: !3850, file: !3, line: 763, column: 7)
!4045 = !DILocation(line: 763, column: 12, scope: !4044)
!4046 = !DILocation(line: 763, column: 7, scope: !3850)
!4047 = !DILocation(line: 764, column: 5, scope: !4044)
!4048 = !DILocation(line: 766, column: 3, scope: !3850)
!4049 = !DILocation(line: 766, column: 8, scope: !3850)
!4050 = !DILocation(line: 766, column: 12, scope: !3850)
!4051 = !DILocation(line: 767, column: 15, scope: !3850)
!4052 = !DILocation(line: 767, column: 3, scope: !3850)
!4053 = !DILocation(line: 767, column: 8, scope: !3850)
!4054 = !DILocation(line: 767, column: 13, scope: !3850)
!4055 = !DILocation(line: 768, column: 17, scope: !3850)
!4056 = !DILocation(line: 768, column: 3, scope: !3850)
!4057 = !DILocation(line: 768, column: 8, scope: !3850)
!4058 = !DILocation(line: 768, column: 15, scope: !3850)
!4059 = !DILocation(line: 769, column: 15, scope: !3850)
!4060 = !DILocation(line: 769, column: 3, scope: !3850)
!4061 = !DILocation(line: 769, column: 8, scope: !3850)
!4062 = !DILocation(line: 769, column: 13, scope: !3850)
!4063 = !DILocation(line: 770, column: 19, scope: !3850)
!4064 = !DILocation(line: 770, column: 3, scope: !3850)
!4065 = !DILocation(line: 770, column: 8, scope: !3850)
!4066 = !DILocation(line: 770, column: 17, scope: !3850)
!4067 = !DILocation(line: 771, column: 24, scope: !3850)
!4068 = !DILocation(line: 771, column: 3, scope: !3850)
!4069 = !DILocation(line: 771, column: 8, scope: !3850)
!4070 = !DILocation(line: 771, column: 22, scope: !3850)
!4071 = !DILocation(line: 772, column: 3, scope: !3850)
!4072 = !DILocation(line: 772, column: 8, scope: !3850)
!4073 = !DILocation(line: 772, column: 23, scope: !3850)
!4074 = !DILocation(line: 774, column: 3, scope: !3850)
!4075 = !DILocation(line: 775, column: 1, scope: !3850)
!4076 = distinct !DISubprogram(name: "copy_reference_ops_from_call", scope: !3, file: !3, line: 781, type: !4077, scopeLine: 783, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!4077 = !DISubroutineType(types: !4078)
!4078 = !{null, !1814, !3684}
!4079 = !DILocalVariable(name: "call", arg: 1, scope: !4076, file: !3, line: 781, type: !1814)
!4080 = !DILocation(line: 781, column: 38, scope: !4076)
!4081 = !DILocalVariable(name: "result", arg: 2, scope: !4076, file: !3, line: 782, type: !3684)
!4082 = !DILocation(line: 782, column: 41, scope: !4076)
!4083 = !DILocalVariable(name: "temp", scope: !4076, file: !3, line: 784, type: !2880)
!4084 = !DILocation(line: 784, column: 21, scope: !4076)
!4085 = !DILocalVariable(name: "i", scope: !4076, file: !3, line: 785, type: !7)
!4086 = !DILocation(line: 785, column: 12, scope: !4076)
!4087 = !DILocation(line: 788, column: 3, scope: !4076)
!4088 = !DILocation(line: 789, column: 40, scope: !4076)
!4089 = !DILocation(line: 789, column: 15, scope: !4076)
!4090 = !DILocation(line: 789, column: 8, scope: !4076)
!4091 = !DILocation(line: 789, column: 13, scope: !4076)
!4092 = !DILocation(line: 790, column: 8, scope: !4076)
!4093 = !DILocation(line: 790, column: 15, scope: !4076)
!4094 = !DILocation(line: 791, column: 30, scope: !4076)
!4095 = !DILocation(line: 791, column: 14, scope: !4076)
!4096 = !DILocation(line: 791, column: 8, scope: !4076)
!4097 = !DILocation(line: 791, column: 12, scope: !4076)
!4098 = !DILocation(line: 792, column: 33, scope: !4076)
!4099 = !DILocation(line: 792, column: 14, scope: !4076)
!4100 = !DILocation(line: 792, column: 8, scope: !4076)
!4101 = !DILocation(line: 792, column: 12, scope: !4076)
!4102 = !DILocation(line: 793, column: 3, scope: !4076)
!4103 = !DILocation(line: 797, column: 10, scope: !4104)
!4104 = distinct !DILexicalBlock(scope: !4076, file: !3, line: 797, column: 3)
!4105 = !DILocation(line: 797, column: 8, scope: !4104)
!4106 = !DILocation(line: 797, column: 15, scope: !4107)
!4107 = distinct !DILexicalBlock(scope: !4104, file: !3, line: 797, column: 3)
!4108 = !DILocation(line: 797, column: 41, scope: !4107)
!4109 = !DILocation(line: 797, column: 19, scope: !4107)
!4110 = !DILocation(line: 797, column: 17, scope: !4107)
!4111 = !DILocation(line: 797, column: 3, scope: !4104)
!4112 = !DILocalVariable(name: "callarg", scope: !4113, file: !3, line: 799, type: !1483)
!4113 = distinct !DILexicalBlock(scope: !4107, file: !3, line: 798, column: 5)
!4114 = !DILocation(line: 799, column: 12, scope: !4113)
!4115 = !DILocation(line: 799, column: 39, scope: !4113)
!4116 = !DILocation(line: 799, column: 45, scope: !4113)
!4117 = !DILocation(line: 799, column: 22, scope: !4113)
!4118 = !DILocation(line: 800, column: 36, scope: !4113)
!4119 = !DILocation(line: 800, column: 45, scope: !4113)
!4120 = !DILocation(line: 800, column: 7, scope: !4113)
!4121 = !DILocation(line: 801, column: 5, scope: !4113)
!4122 = !DILocation(line: 797, column: 48, scope: !4107)
!4123 = !DILocation(line: 797, column: 3, scope: !4107)
!4124 = distinct !{!4124, !4111, !4125}
!4125 = !DILocation(line: 801, column: 5, scope: !4104)
!4126 = !DILocation(line: 802, column: 1, scope: !4076)
!4127 = distinct !DISubprogram(name: "gimple_call_return_type", scope: !391, file: !391, line: 1966, type: !3264, scopeLine: 1967, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!4128 = !DILocalVariable(name: "gs", arg: 1, scope: !4127, file: !391, line: 1966, type: !3220)
!4129 = !DILocation(line: 1966, column: 39, scope: !4127)
!4130 = !DILocalVariable(name: "fn", scope: !4127, file: !391, line: 1968, type: !1483)
!4131 = !DILocation(line: 1968, column: 8, scope: !4127)
!4132 = !DILocation(line: 1968, column: 29, scope: !4127)
!4133 = !DILocation(line: 1968, column: 13, scope: !4127)
!4134 = !DILocalVariable(name: "type", scope: !4127, file: !391, line: 1969, type: !1483)
!4135 = !DILocation(line: 1969, column: 8, scope: !4127)
!4136 = !DILocation(line: 1969, column: 15, scope: !4127)
!4137 = !DILocation(line: 1972, column: 10, scope: !4127)
!4138 = !DILocation(line: 1972, column: 8, scope: !4127)
!4139 = !DILocation(line: 1976, column: 10, scope: !4127)
!4140 = !DILocation(line: 1976, column: 3, scope: !4127)
!4141 = distinct !DISubprogram(name: "gimple_call_fn", scope: !391, file: !391, line: 1911, type: !3264, scopeLine: 1912, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!4142 = !DILocalVariable(name: "gs", arg: 1, scope: !4141, file: !391, line: 1911, type: !3220)
!4143 = !DILocation(line: 1911, column: 30, scope: !4141)
!4144 = !DILocation(line: 1914, column: 21, scope: !4141)
!4145 = !DILocation(line: 1914, column: 10, scope: !4141)
!4146 = !DILocation(line: 1914, column: 3, scope: !4141)
!4147 = distinct !DISubprogram(name: "gimple_call_chain", scope: !391, file: !391, line: 1983, type: !3264, scopeLine: 1984, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!4148 = !DILocalVariable(name: "gs", arg: 1, scope: !4147, file: !391, line: 1983, type: !3220)
!4149 = !DILocation(line: 1983, column: 33, scope: !4147)
!4150 = !DILocation(line: 1986, column: 21, scope: !4147)
!4151 = !DILocation(line: 1986, column: 10, scope: !4147)
!4152 = !DILocation(line: 1986, column: 3, scope: !4147)
!4153 = distinct !DISubprogram(name: "gimple_call_num_args", scope: !391, file: !391, line: 2013, type: !4154, scopeLine: 2014, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!4154 = !DISubroutineType(types: !4155)
!4155 = !{!7, !3220}
!4156 = !DILocalVariable(name: "gs", arg: 1, scope: !4153, file: !391, line: 2013, type: !3220)
!4157 = !DILocation(line: 2013, column: 36, scope: !4153)
!4158 = !DILocalVariable(name: "num_ops", scope: !4153, file: !391, line: 2015, type: !7)
!4159 = !DILocation(line: 2015, column: 12, scope: !4153)
!4160 = !DILocation(line: 2017, column: 29, scope: !4153)
!4161 = !DILocation(line: 2017, column: 13, scope: !4153)
!4162 = !DILocation(line: 2017, column: 11, scope: !4153)
!4163 = !DILocation(line: 2018, column: 10, scope: !4153)
!4164 = !DILocation(line: 2018, column: 18, scope: !4153)
!4165 = !DILocation(line: 2018, column: 3, scope: !4153)
!4166 = distinct !DISubprogram(name: "gimple_call_arg", scope: !391, file: !391, line: 2025, type: !4167, scopeLine: 2026, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!4167 = !DISubroutineType(types: !4168)
!4168 = !{!1483, !3220, !7}
!4169 = !DILocalVariable(name: "gs", arg: 1, scope: !4166, file: !391, line: 2025, type: !3220)
!4170 = !DILocation(line: 2025, column: 31, scope: !4166)
!4171 = !DILocalVariable(name: "index", arg: 2, scope: !4166, file: !391, line: 2025, type: !7)
!4172 = !DILocation(line: 2025, column: 44, scope: !4166)
!4173 = !DILocation(line: 2028, column: 21, scope: !4166)
!4174 = !DILocation(line: 2028, column: 25, scope: !4166)
!4175 = !DILocation(line: 2028, column: 31, scope: !4166)
!4176 = !DILocation(line: 2028, column: 10, scope: !4166)
!4177 = !DILocation(line: 2028, column: 3, scope: !4166)
!4178 = distinct !DISubprogram(name: "vn_reference_fold_indirect", scope: !3, file: !3, line: 831, type: !4179, scopeLine: 833, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!4179 = !DISubroutineType(types: !4180)
!4180 = !{null, !3684, !4181}
!4181 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!4182 = !DILocalVariable(name: "ops", arg: 1, scope: !4178, file: !3, line: 831, type: !3684)
!4183 = !DILocation(line: 831, column: 61, scope: !4178)
!4184 = !DILocalVariable(name: "i_p", arg: 2, scope: !4178, file: !3, line: 832, type: !4181)
!4185 = !DILocation(line: 832, column: 22, scope: !4178)
!4186 = !DILocalVariable(name: "mem", scope: !4178, file: !3, line: 834, type: !2868)
!4187 = !DILocation(line: 834, column: 33, scope: !4178)
!4188 = !DILocalVariable(name: "op", scope: !4178, file: !3, line: 835, type: !3460)
!4189 = !DILocation(line: 835, column: 21, scope: !4178)
!4190 = !DILocalVariable(name: "i", scope: !4178, file: !3, line: 836, type: !7)
!4191 = !DILocation(line: 836, column: 16, scope: !4178)
!4192 = !DILocation(line: 836, column: 21, scope: !4178)
!4193 = !DILocation(line: 836, column: 20, scope: !4178)
!4194 = !DILocalVariable(name: "j", scope: !4178, file: !3, line: 837, type: !7)
!4195 = !DILocation(line: 837, column: 16, scope: !4178)
!4196 = !DILocation(line: 840, column: 8, scope: !4178)
!4197 = !DILocation(line: 840, column: 6, scope: !4178)
!4198 = !DILocation(line: 843, column: 7, scope: !4199)
!4199 = distinct !DILexicalBlock(scope: !4178, file: !3, line: 843, column: 7)
!4200 = !DILocation(line: 843, column: 57, scope: !4199)
!4201 = !DILocation(line: 844, column: 7, scope: !4199)
!4202 = !DILocation(line: 844, column: 10, scope: !4199)
!4203 = !DILocation(line: 844, column: 54, scope: !4199)
!4204 = !DILocation(line: 843, column: 7, scope: !4178)
!4205 = !DILocalVariable(name: "aref", scope: !4206, file: !3, line: 846, type: !2880)
!4206 = distinct !DILexicalBlock(scope: !4199, file: !3, line: 845, column: 5)
!4207 = !DILocation(line: 846, column: 25, scope: !4206)
!4208 = !DILocalVariable(name: "dom", scope: !4206, file: !3, line: 847, type: !1483)
!4209 = !DILocation(line: 847, column: 12, scope: !4206)
!4210 = !DILocation(line: 848, column: 19, scope: !4206)
!4211 = !DILocation(line: 848, column: 12, scope: !4206)
!4212 = !DILocation(line: 848, column: 17, scope: !4206)
!4213 = !DILocation(line: 849, column: 12, scope: !4206)
!4214 = !DILocation(line: 849, column: 19, scope: !4206)
!4215 = !DILocation(line: 850, column: 18, scope: !4206)
!4216 = !DILocation(line: 850, column: 12, scope: !4206)
!4217 = !DILocation(line: 850, column: 16, scope: !4206)
!4218 = !DILocation(line: 851, column: 18, scope: !4219)
!4219 = distinct !DILexicalBlock(scope: !4206, file: !3, line: 851, column: 11)
!4220 = !DILocation(line: 851, column: 16, scope: !4219)
!4221 = !DILocation(line: 852, column: 4, scope: !4219)
!4222 = !DILocation(line: 852, column: 7, scope: !4219)
!4223 = !DILocation(line: 851, column: 11, scope: !4206)
!4224 = !DILocation(line: 853, column: 13, scope: !4219)
!4225 = !DILocation(line: 853, column: 7, scope: !4219)
!4226 = !DILocation(line: 853, column: 11, scope: !4219)
!4227 = !DILocation(line: 853, column: 2, scope: !4219)
!4228 = !DILocation(line: 854, column: 23, scope: !4206)
!4229 = !DILocation(line: 854, column: 12, scope: !4206)
!4230 = !DILocation(line: 854, column: 16, scope: !4206)
!4231 = !DILocation(line: 855, column: 18, scope: !4206)
!4232 = !DILocation(line: 855, column: 12, scope: !4206)
!4233 = !DILocation(line: 855, column: 16, scope: !4206)
!4234 = !DILocation(line: 856, column: 7, scope: !4206)
!4235 = !DILocation(line: 857, column: 5, scope: !4206)
!4236 = !DILocation(line: 858, column: 32, scope: !4178)
!4237 = !DILocation(line: 858, column: 3, scope: !4178)
!4238 = !DILocation(line: 861, column: 7, scope: !4239)
!4239 = distinct !DILexicalBlock(scope: !4178, file: !3, line: 861, column: 7)
!4240 = !DILocation(line: 861, column: 43, scope: !4239)
!4241 = !DILocation(line: 861, column: 7, scope: !4178)
!4242 = !DILocation(line: 863, column: 7, scope: !4243)
!4243 = distinct !DILexicalBlock(scope: !4239, file: !3, line: 862, column: 5)
!4244 = !DILocation(line: 865, column: 7, scope: !4243)
!4245 = !DILocation(line: 866, column: 8, scope: !4243)
!4246 = !DILocation(line: 867, column: 5, scope: !4243)
!4247 = !DILocation(line: 868, column: 12, scope: !4248)
!4248 = distinct !DILexicalBlock(scope: !4239, file: !3, line: 868, column: 12)
!4249 = !DILocation(line: 868, column: 48, scope: !4248)
!4250 = !DILocation(line: 868, column: 12, scope: !4239)
!4251 = !DILocation(line: 870, column: 7, scope: !4252)
!4252 = distinct !DILexicalBlock(scope: !4248, file: !3, line: 869, column: 5)
!4253 = !DILocation(line: 872, column: 7, scope: !4252)
!4254 = !DILocation(line: 874, column: 5, scope: !4252)
!4255 = !DILocation(line: 875, column: 12, scope: !4256)
!4256 = distinct !DILexicalBlock(scope: !4248, file: !3, line: 875, column: 12)
!4257 = !DILocation(line: 875, column: 48, scope: !4256)
!4258 = !DILocation(line: 875, column: 12, scope: !4248)
!4259 = !DILocation(line: 877, column: 7, scope: !4260)
!4260 = distinct !DILexicalBlock(scope: !4256, file: !3, line: 876, column: 5)
!4261 = !DILocation(line: 879, column: 7, scope: !4260)
!4262 = !DILocation(line: 882, column: 14, scope: !4263)
!4263 = distinct !DILexicalBlock(scope: !4260, file: !3, line: 882, column: 7)
!4264 = !DILocation(line: 882, column: 12, scope: !4263)
!4265 = !DILocation(line: 882, column: 19, scope: !4266)
!4266 = distinct !DILexicalBlock(scope: !4263, file: !3, line: 882, column: 7)
!4267 = !DILocation(line: 882, column: 7, scope: !4263)
!4268 = !DILocation(line: 883, column: 2, scope: !4266)
!4269 = !DILocation(line: 882, column: 65, scope: !4266)
!4270 = !DILocation(line: 882, column: 7, scope: !4266)
!4271 = distinct !{!4271, !4267, !4272}
!4272 = !DILocation(line: 883, column: 2, scope: !4263)
!4273 = !DILocation(line: 884, column: 5, scope: !4260)
!4274 = !DILocation(line: 886, column: 5, scope: !4256)
!4275 = !DILocation(line: 888, column: 3, scope: !4178)
!4276 = !DILocation(line: 889, column: 10, scope: !4178)
!4277 = !DILocation(line: 889, column: 4, scope: !4178)
!4278 = !DILocation(line: 889, column: 8, scope: !4178)
!4279 = !DILocation(line: 890, column: 1, scope: !4178)
!4280 = distinct !DISubprogram(name: "VEC_vn_reference_op_s_base_replace", scope: !1480, file: !1480, line: 83, type: !4281, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!4281 = !DISubroutineType(types: !4282)
!4282 = !{!3461, !3490, !7, !2922}
!4283 = !DILocalVariable(name: "vec_", arg: 1, scope: !4280, file: !1480, line: 83, type: !3490)
!4284 = !DILocation(line: 83, column: 1, scope: !4280)
!4285 = !DILocalVariable(name: "ix_", arg: 2, scope: !4280, file: !1480, line: 83, type: !7)
!4286 = !DILocalVariable(name: "obj_", arg: 3, scope: !4280, file: !1480, line: 83, type: !2922)
!4287 = !DILocalVariable(name: "slot_", scope: !4280, file: !1480, line: 83, type: !3461)
!4288 = !DILocation(line: 83, column: 1, scope: !4289)
!4289 = distinct !DILexicalBlock(scope: !4280, file: !1480, line: 83, column: 1)
!4290 = distinct !DISubprogram(name: "VEC_vn_reference_op_s_base_ordered_remove", scope: !1480, file: !1480, line: 83, type: !4291, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!4291 = !DISubroutineType(types: !4292)
!4292 = !{null, !3490, !7}
!4293 = !DILocalVariable(name: "vec_", arg: 1, scope: !4290, file: !1480, line: 83, type: !3490)
!4294 = !DILocation(line: 83, column: 1, scope: !4290)
!4295 = !DILocalVariable(name: "ix_", arg: 2, scope: !4290, file: !1480, line: 83, type: !7)
!4296 = !DILocalVariable(name: "slot_", scope: !4290, file: !1480, line: 83, type: !3461)
!4297 = distinct !DISubprogram(name: "VEC_vn_reference_op_s_heap_safe_insert", scope: !1480, file: !1480, line: 84, type: !4298, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!4298 = !DISubroutineType(types: !4299)
!4299 = !{!3461, !3684, !7, !2922}
!4300 = !DILocalVariable(name: "vec_", arg: 1, scope: !4297, file: !1480, line: 84, type: !3684)
!4301 = !DILocation(line: 84, column: 1, scope: !4297)
!4302 = !DILocalVariable(name: "ix_", arg: 2, scope: !4297, file: !1480, line: 84, type: !7)
!4303 = !DILocalVariable(name: "obj_", arg: 3, scope: !4297, file: !1480, line: 84, type: !2922)
!4304 = distinct !DISubprogram(name: "VEC_vn_reference_op_s_heap_free", scope: !1480, file: !1480, line: 84, type: !4305, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!4305 = !DISubroutineType(types: !4306)
!4306 = !{null, !3684}
!4307 = !DILocalVariable(name: "vec_", arg: 1, scope: !4304, file: !1480, line: 84, type: !3684)
!4308 = !DILocation(line: 84, column: 1, scope: !4304)
!4309 = !DILocation(line: 84, column: 1, scope: !4310)
!4310 = distinct !DILexicalBlock(scope: !4304, file: !1480, line: 84, column: 1)
!4311 = distinct !DISubprogram(name: "vn_reference_lookup_pieces", scope: !3, file: !3, line: 1191, type: !4312, scopeLine: 1194, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!4312 = !DISubroutineType(types: !4313)
!4313 = !{!1483, !1483, !2123, !1483, !2868, !4314, !1603}
!4314 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2890, size: 64)
!4315 = !DILocalVariable(name: "vuse", arg: 1, scope: !4311, file: !3, line: 1191, type: !1483)
!4316 = !DILocation(line: 1191, column: 34, scope: !4311)
!4317 = !DILocalVariable(name: "set", arg: 2, scope: !4311, file: !3, line: 1191, type: !2123)
!4318 = !DILocation(line: 1191, column: 55, scope: !4311)
!4319 = !DILocalVariable(name: "type", arg: 3, scope: !4311, file: !3, line: 1191, type: !1483)
!4320 = !DILocation(line: 1191, column: 65, scope: !4311)
!4321 = !DILocalVariable(name: "operands", arg: 4, scope: !4311, file: !3, line: 1192, type: !2868)
!4322 = !DILocation(line: 1192, column: 39, scope: !4311)
!4323 = !DILocalVariable(name: "vnresult", arg: 5, scope: !4311, file: !3, line: 1193, type: !4314)
!4324 = !DILocation(line: 1193, column: 24, scope: !4311)
!4325 = !DILocalVariable(name: "maywalk", arg: 6, scope: !4311, file: !3, line: 1193, type: !1603)
!4326 = !DILocation(line: 1193, column: 39, scope: !4311)
!4327 = !DILocalVariable(name: "vr1", scope: !4311, file: !3, line: 1195, type: !2860)
!4328 = !DILocation(line: 1195, column: 25, scope: !4311)
!4329 = !DILocalVariable(name: "tmp", scope: !4311, file: !3, line: 1196, type: !2890)
!4330 = !DILocation(line: 1196, column: 18, scope: !4311)
!4331 = !DILocation(line: 1198, column: 8, scope: !4332)
!4332 = distinct !DILexicalBlock(scope: !4311, file: !3, line: 1198, column: 7)
!4333 = !DILocation(line: 1198, column: 7, scope: !4311)
!4334 = !DILocation(line: 1199, column: 14, scope: !4332)
!4335 = !DILocation(line: 1199, column: 5, scope: !4332)
!4336 = !DILocation(line: 1200, column: 4, scope: !4311)
!4337 = !DILocation(line: 1200, column: 13, scope: !4311)
!4338 = !DILocation(line: 1202, column: 14, scope: !4311)
!4339 = !DILocation(line: 1202, column: 21, scope: !4311)
!4340 = !DILocation(line: 1202, column: 7, scope: !4311)
!4341 = !DILocation(line: 1202, column: 12, scope: !4311)
!4342 = !DILocation(line: 1203, column: 3, scope: !4311)
!4343 = !DILocation(line: 1204, column: 3, scope: !4311)
!4344 = !DILocation(line: 1206, column: 11, scope: !4311)
!4345 = !DILocation(line: 1206, column: 3, scope: !4311)
!4346 = !DILocation(line: 1207, column: 4, scope: !4311)
!4347 = !DILocation(line: 1209, column: 6, scope: !4311)
!4348 = !DILocation(line: 1209, column: 4, scope: !4311)
!4349 = !DILocation(line: 1211, column: 22, scope: !4311)
!4350 = !DILocation(line: 1211, column: 7, scope: !4311)
!4351 = !DILocation(line: 1211, column: 5, scope: !4311)
!4352 = !DILocation(line: 1210, column: 27, scope: !4311)
!4353 = !DILocation(line: 1210, column: 7, scope: !4311)
!4354 = !DILocation(line: 1210, column: 16, scope: !4311)
!4355 = !DILocation(line: 1212, column: 14, scope: !4311)
!4356 = !DILocation(line: 1212, column: 7, scope: !4311)
!4357 = !DILocation(line: 1212, column: 12, scope: !4311)
!4358 = !DILocation(line: 1213, column: 13, scope: !4311)
!4359 = !DILocation(line: 1213, column: 7, scope: !4311)
!4360 = !DILocation(line: 1213, column: 11, scope: !4311)
!4361 = !DILocation(line: 1214, column: 18, scope: !4311)
!4362 = !DILocation(line: 1214, column: 7, scope: !4311)
!4363 = !DILocation(line: 1214, column: 16, scope: !4311)
!4364 = !DILocation(line: 1215, column: 32, scope: !4311)
!4365 = !DILocation(line: 1215, column: 3, scope: !4311)
!4366 = !DILocation(line: 1217, column: 9, scope: !4367)
!4367 = distinct !DILexicalBlock(scope: !4311, file: !3, line: 1217, column: 7)
!4368 = !DILocation(line: 1217, column: 8, scope: !4367)
!4369 = !DILocation(line: 1218, column: 7, scope: !4367)
!4370 = !DILocation(line: 1218, column: 10, scope: !4367)
!4371 = !DILocation(line: 1219, column: 7, scope: !4367)
!4372 = !DILocation(line: 1219, column: 14, scope: !4367)
!4373 = !DILocation(line: 1219, column: 10, scope: !4367)
!4374 = !DILocation(line: 1217, column: 7, scope: !4311)
!4375 = !DILocalVariable(name: "r", scope: !4376, file: !3, line: 1221, type: !3854)
!4376 = distinct !DILexicalBlock(scope: !4367, file: !3, line: 1220, column: 5)
!4377 = !DILocation(line: 1221, column: 14, scope: !4376)
!4378 = !DILocation(line: 1222, column: 46, scope: !4379)
!4379 = distinct !DILexicalBlock(scope: !4376, file: !3, line: 1222, column: 11)
!4380 = !DILocation(line: 1222, column: 51, scope: !4379)
!4381 = !DILocation(line: 1222, column: 61, scope: !4379)
!4382 = !DILocation(line: 1222, column: 11, scope: !4379)
!4383 = !DILocation(line: 1222, column: 11, scope: !4376)
!4384 = !DILocation(line: 1224, column: 52, scope: !4379)
!4385 = !DILocation(line: 1226, column: 32, scope: !4379)
!4386 = !DILocation(line: 1224, column: 20, scope: !4379)
!4387 = !DILocation(line: 1224, column: 4, scope: !4379)
!4388 = !DILocation(line: 1223, column: 3, scope: !4379)
!4389 = !DILocation(line: 1223, column: 12, scope: !4379)
!4390 = !DILocation(line: 1223, column: 2, scope: !4379)
!4391 = !DILocation(line: 1227, column: 15, scope: !4392)
!4392 = distinct !DILexicalBlock(scope: !4376, file: !3, line: 1227, column: 11)
!4393 = !DILocation(line: 1227, column: 27, scope: !4392)
!4394 = !DILocation(line: 1227, column: 24, scope: !4392)
!4395 = !DILocation(line: 1227, column: 11, scope: !4376)
!4396 = !DILocation(line: 1228, column: 2, scope: !4392)
!4397 = !DILocation(line: 1229, column: 5, scope: !4376)
!4398 = !DILocation(line: 1231, column: 8, scope: !4399)
!4399 = distinct !DILexicalBlock(scope: !4311, file: !3, line: 1231, column: 7)
!4400 = !DILocation(line: 1231, column: 7, scope: !4399)
!4401 = !DILocation(line: 1231, column: 7, scope: !4311)
!4402 = !DILocation(line: 1232, column: 15, scope: !4399)
!4403 = !DILocation(line: 1232, column: 14, scope: !4399)
!4404 = !DILocation(line: 1232, column: 26, scope: !4399)
!4405 = !DILocation(line: 1232, column: 6, scope: !4399)
!4406 = !DILocation(line: 1234, column: 3, scope: !4311)
!4407 = !DILocation(line: 1235, column: 1, scope: !4311)
!4408 = distinct !DISubprogram(name: "VEC_vn_reference_op_s_base_truncate", scope: !1480, file: !1480, line: 83, type: !4291, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!4409 = !DILocalVariable(name: "vec_", arg: 1, scope: !4408, file: !1480, line: 83, type: !3490)
!4410 = !DILocation(line: 83, column: 1, scope: !4408)
!4411 = !DILocalVariable(name: "size_", arg: 2, scope: !4408, file: !1480, line: 83, type: !7)
!4412 = !DILocation(line: 83, column: 1, scope: !4413)
!4413 = distinct !DILexicalBlock(scope: !4408, file: !1480, line: 83, column: 1)
!4414 = distinct !DISubprogram(name: "VEC_vn_reference_op_s_heap_safe_grow", scope: !1480, file: !1480, line: 84, type: !4415, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!4415 = !DISubroutineType(types: !4416)
!4416 = !{null, !3684, !1580}
!4417 = !DILocalVariable(name: "vec_", arg: 1, scope: !4414, file: !1480, line: 84, type: !3684)
!4418 = !DILocation(line: 84, column: 1, scope: !4414)
!4419 = !DILocalVariable(name: "size_", arg: 2, scope: !4414, file: !1480, line: 84, type: !1580)
!4420 = !DILocation(line: 0, scope: !4414)
!4421 = distinct !DISubprogram(name: "VEC_vn_reference_op_s_base_address", scope: !1480, file: !1480, line: 83, type: !4422, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!4422 = !DISubroutineType(types: !4423)
!4423 = !{!3461, !3490}
!4424 = !DILocalVariable(name: "vec_", arg: 1, scope: !4421, file: !1480, line: 83, type: !3490)
!4425 = !DILocation(line: 83, column: 1, scope: !4421)
!4426 = distinct !DISubprogram(name: "valueize_refs", scope: !3, file: !3, line: 897, type: !4427, scopeLine: 898, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!4427 = !DISubroutineType(types: !4428)
!4428 = !{!2868, !2868}
!4429 = !DILocalVariable(name: "orig", arg: 1, scope: !4426, file: !3, line: 897, type: !2868)
!4430 = !DILocation(line: 897, column: 47, scope: !4426)
!4431 = !DILocalVariable(name: "vro", scope: !4426, file: !3, line: 899, type: !3460)
!4432 = !DILocation(line: 899, column: 21, scope: !4426)
!4433 = !DILocalVariable(name: "i", scope: !4426, file: !3, line: 900, type: !7)
!4434 = !DILocation(line: 900, column: 16, scope: !4426)
!4435 = !DILocation(line: 902, column: 10, scope: !4436)
!4436 = distinct !DILexicalBlock(scope: !4426, file: !3, line: 902, column: 3)
!4437 = !DILocation(line: 902, column: 8, scope: !4436)
!4438 = !DILocation(line: 902, column: 15, scope: !4439)
!4439 = distinct !DILexicalBlock(scope: !4436, file: !3, line: 902, column: 3)
!4440 = !DILocation(line: 902, column: 3, scope: !4436)
!4441 = !DILocation(line: 904, column: 11, scope: !4442)
!4442 = distinct !DILexicalBlock(scope: !4443, file: !3, line: 904, column: 11)
!4443 = distinct !DILexicalBlock(scope: !4439, file: !3, line: 903, column: 5)
!4444 = !DILocation(line: 904, column: 16, scope: !4442)
!4445 = !DILocation(line: 904, column: 23, scope: !4442)
!4446 = !DILocation(line: 905, column: 4, scope: !4442)
!4447 = !DILocation(line: 905, column: 8, scope: !4442)
!4448 = !DILocation(line: 905, column: 13, scope: !4442)
!4449 = !DILocation(line: 905, column: 17, scope: !4442)
!4450 = !DILocation(line: 905, column: 20, scope: !4442)
!4451 = !DILocation(line: 905, column: 41, scope: !4442)
!4452 = !DILocation(line: 904, column: 11, scope: !4443)
!4453 = !DILocation(line: 907, column: 15, scope: !4454)
!4454 = distinct !DILexicalBlock(scope: !4442, file: !3, line: 906, column: 2)
!4455 = !DILocation(line: 907, column: 4, scope: !4454)
!4456 = !DILocation(line: 907, column: 9, scope: !4454)
!4457 = !DILocation(line: 907, column: 13, scope: !4454)
!4458 = !DILocation(line: 910, column: 8, scope: !4459)
!4459 = distinct !DILexicalBlock(scope: !4454, file: !3, line: 910, column: 8)
!4460 = !DILocation(line: 910, column: 29, scope: !4459)
!4461 = !DILocation(line: 910, column: 41, scope: !4459)
!4462 = !DILocation(line: 910, column: 44, scope: !4459)
!4463 = !DILocation(line: 910, column: 49, scope: !4459)
!4464 = !DILocation(line: 910, column: 56, scope: !4459)
!4465 = !DILocation(line: 910, column: 8, scope: !4454)
!4466 = !DILocation(line: 911, column: 20, scope: !4459)
!4467 = !DILocation(line: 911, column: 6, scope: !4459)
!4468 = !DILocation(line: 911, column: 11, scope: !4459)
!4469 = !DILocation(line: 911, column: 18, scope: !4459)
!4470 = !DILocation(line: 914, column: 8, scope: !4471)
!4471 = distinct !DILexicalBlock(scope: !4454, file: !3, line: 914, column: 8)
!4472 = !DILocation(line: 914, column: 10, scope: !4471)
!4473 = !DILocation(line: 914, column: 14, scope: !4471)
!4474 = !DILocation(line: 914, column: 17, scope: !4471)
!4475 = !DILocation(line: 914, column: 38, scope: !4471)
!4476 = !DILocation(line: 915, column: 8, scope: !4471)
!4477 = !DILocation(line: 915, column: 11, scope: !4471)
!4478 = !DILocation(line: 916, column: 22, scope: !4471)
!4479 = !DILocation(line: 916, column: 29, scope: !4471)
!4480 = !DILocation(line: 914, column: 8, scope: !4454)
!4481 = !DILocation(line: 918, column: 8, scope: !4482)
!4482 = distinct !DILexicalBlock(scope: !4471, file: !3, line: 917, column: 6)
!4483 = !DILocation(line: 919, column: 8, scope: !4482)
!4484 = !DILocation(line: 921, column: 2, scope: !4454)
!4485 = !DILocation(line: 922, column: 11, scope: !4486)
!4486 = distinct !DILexicalBlock(scope: !4443, file: !3, line: 922, column: 11)
!4487 = !DILocation(line: 922, column: 16, scope: !4486)
!4488 = !DILocation(line: 922, column: 20, scope: !4486)
!4489 = !DILocation(line: 922, column: 23, scope: !4486)
!4490 = !DILocation(line: 922, column: 44, scope: !4486)
!4491 = !DILocation(line: 922, column: 11, scope: !4443)
!4492 = !DILocation(line: 923, column: 13, scope: !4486)
!4493 = !DILocation(line: 923, column: 2, scope: !4486)
!4494 = !DILocation(line: 923, column: 7, scope: !4486)
!4495 = !DILocation(line: 923, column: 11, scope: !4486)
!4496 = !DILocation(line: 924, column: 11, scope: !4497)
!4497 = distinct !DILexicalBlock(scope: !4443, file: !3, line: 924, column: 11)
!4498 = !DILocation(line: 924, column: 16, scope: !4497)
!4499 = !DILocation(line: 924, column: 20, scope: !4497)
!4500 = !DILocation(line: 924, column: 23, scope: !4497)
!4501 = !DILocation(line: 924, column: 44, scope: !4497)
!4502 = !DILocation(line: 924, column: 11, scope: !4443)
!4503 = !DILocation(line: 925, column: 13, scope: !4497)
!4504 = !DILocation(line: 925, column: 2, scope: !4497)
!4505 = !DILocation(line: 925, column: 7, scope: !4497)
!4506 = !DILocation(line: 925, column: 11, scope: !4497)
!4507 = !DILocation(line: 926, column: 5, scope: !4443)
!4508 = !DILocation(line: 902, column: 63, scope: !4439)
!4509 = !DILocation(line: 902, column: 3, scope: !4439)
!4510 = distinct !{!4510, !4440, !4511}
!4511 = !DILocation(line: 926, column: 5, scope: !4436)
!4512 = !DILocation(line: 928, column: 10, scope: !4426)
!4513 = !DILocation(line: 928, column: 3, scope: !4426)
!4514 = distinct !DISubprogram(name: "vn_reference_lookup_1", scope: !3, file: !3, line: 969, type: !4515, scopeLine: 970, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!4515 = !DISubroutineType(types: !4516)
!4516 = !{!1483, !2890, !4314}
!4517 = !DILocalVariable(name: "vr", arg: 1, scope: !4514, file: !3, line: 969, type: !2890)
!4518 = !DILocation(line: 969, column: 39, scope: !4514)
!4519 = !DILocalVariable(name: "vnresult", arg: 2, scope: !4514, file: !3, line: 969, type: !4314)
!4520 = !DILocation(line: 969, column: 59, scope: !4514)
!4521 = !DILocalVariable(name: "slot", scope: !4514, file: !3, line: 971, type: !2321)
!4522 = !DILocation(line: 971, column: 10, scope: !4514)
!4523 = !DILocalVariable(name: "hash", scope: !4514, file: !3, line: 972, type: !2307)
!4524 = !DILocation(line: 972, column: 13, scope: !4514)
!4525 = !DILocation(line: 974, column: 10, scope: !4514)
!4526 = !DILocation(line: 974, column: 14, scope: !4514)
!4527 = !DILocation(line: 974, column: 8, scope: !4514)
!4528 = !DILocation(line: 975, column: 36, scope: !4514)
!4529 = !DILocation(line: 975, column: 50, scope: !4514)
!4530 = !DILocation(line: 975, column: 62, scope: !4514)
!4531 = !DILocation(line: 976, column: 8, scope: !4514)
!4532 = !DILocation(line: 975, column: 10, scope: !4514)
!4533 = !DILocation(line: 975, column: 8, scope: !4514)
!4534 = !DILocation(line: 977, column: 8, scope: !4535)
!4535 = distinct !DILexicalBlock(scope: !4514, file: !3, line: 977, column: 7)
!4536 = !DILocation(line: 977, column: 13, scope: !4535)
!4537 = !DILocation(line: 977, column: 16, scope: !4535)
!4538 = !DILocation(line: 977, column: 32, scope: !4535)
!4539 = !DILocation(line: 977, column: 29, scope: !4535)
!4540 = !DILocation(line: 977, column: 7, scope: !4514)
!4541 = !DILocation(line: 978, column: 38, scope: !4535)
!4542 = !DILocation(line: 978, column: 50, scope: !4535)
!4543 = !DILocation(line: 978, column: 62, scope: !4535)
!4544 = !DILocation(line: 979, column: 10, scope: !4535)
!4545 = !DILocation(line: 978, column: 12, scope: !4535)
!4546 = !DILocation(line: 978, column: 10, scope: !4535)
!4547 = !DILocation(line: 978, column: 5, scope: !4535)
!4548 = !DILocation(line: 980, column: 7, scope: !4549)
!4549 = distinct !DILexicalBlock(scope: !4514, file: !3, line: 980, column: 7)
!4550 = !DILocation(line: 980, column: 7, scope: !4514)
!4551 = !DILocation(line: 982, column: 11, scope: !4552)
!4552 = distinct !DILexicalBlock(scope: !4553, file: !3, line: 982, column: 11)
!4553 = distinct !DILexicalBlock(scope: !4549, file: !3, line: 981, column: 5)
!4554 = !DILocation(line: 982, column: 11, scope: !4553)
!4555 = !DILocation(line: 983, column: 31, scope: !4552)
!4556 = !DILocation(line: 983, column: 30, scope: !4552)
!4557 = !DILocation(line: 983, column: 14, scope: !4552)
!4558 = !DILocation(line: 983, column: 3, scope: !4552)
!4559 = !DILocation(line: 983, column: 12, scope: !4552)
!4560 = !DILocation(line: 983, column: 2, scope: !4552)
!4561 = !DILocation(line: 984, column: 32, scope: !4553)
!4562 = !DILocation(line: 984, column: 31, scope: !4553)
!4563 = !DILocation(line: 984, column: 15, scope: !4553)
!4564 = !DILocation(line: 984, column: 39, scope: !4553)
!4565 = !DILocation(line: 984, column: 7, scope: !4553)
!4566 = !DILocation(line: 987, column: 3, scope: !4514)
!4567 = !DILocation(line: 988, column: 1, scope: !4514)
!4568 = distinct !DISubprogram(name: "vn_reference_lookup_2", scope: !3, file: !3, line: 996, type: !4569, scopeLine: 997, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!4569 = !DISubroutineType(types: !4570)
!4570 = !{!1767, !3853, !1483, !1767}
!4571 = !DILocalVariable(name: "op", arg: 1, scope: !4568, file: !3, line: 996, type: !3853)
!4572 = !DILocation(line: 996, column: 32, scope: !4568)
!4573 = !DILocalVariable(name: "vuse", arg: 2, scope: !4568, file: !3, line: 996, type: !1483)
!4574 = !DILocation(line: 996, column: 58, scope: !4568)
!4575 = !DILocalVariable(name: "vr_", arg: 3, scope: !4568, file: !3, line: 996, type: !1767)
!4576 = !DILocation(line: 996, column: 70, scope: !4568)
!4577 = !DILocalVariable(name: "vr", scope: !4568, file: !3, line: 998, type: !2890)
!4578 = !DILocation(line: 998, column: 18, scope: !4568)
!4579 = !DILocation(line: 998, column: 39, scope: !4568)
!4580 = !DILocation(line: 998, column: 23, scope: !4568)
!4581 = !DILocalVariable(name: "slot", scope: !4568, file: !3, line: 999, type: !2321)
!4582 = !DILocation(line: 999, column: 10, scope: !4568)
!4583 = !DILocalVariable(name: "hash", scope: !4568, file: !3, line: 1000, type: !2307)
!4584 = !DILocation(line: 1000, column: 13, scope: !4568)
!4585 = !DILocation(line: 1002, column: 7, scope: !4586)
!4586 = distinct !DILexicalBlock(scope: !4568, file: !3, line: 1002, column: 7)
!4587 = !DILocation(line: 1002, column: 7, scope: !4568)
!4588 = !DILocation(line: 1003, column: 22, scope: !4586)
!4589 = !DILocation(line: 1003, column: 6, scope: !4586)
!4590 = !DILocation(line: 1003, column: 20, scope: !4586)
!4591 = !DILocation(line: 1003, column: 5, scope: !4586)
!4592 = !DILocation(line: 1006, column: 7, scope: !4593)
!4593 = distinct !DILexicalBlock(scope: !4568, file: !3, line: 1006, column: 7)
!4594 = !DILocation(line: 1006, column: 11, scope: !4593)
!4595 = !DILocation(line: 1006, column: 7, scope: !4568)
!4596 = !DILocation(line: 1007, column: 20, scope: !4593)
!4597 = !DILocation(line: 1007, column: 24, scope: !4593)
!4598 = !DILocation(line: 1007, column: 35, scope: !4593)
!4599 = !DILocation(line: 1007, column: 33, scope: !4593)
!4600 = !DILocation(line: 1007, column: 5, scope: !4593)
!4601 = !DILocation(line: 1007, column: 9, scope: !4593)
!4602 = !DILocation(line: 1007, column: 18, scope: !4593)
!4603 = !DILocation(line: 1008, column: 14, scope: !4568)
!4604 = !DILocation(line: 1008, column: 3, scope: !4568)
!4605 = !DILocation(line: 1008, column: 7, scope: !4568)
!4606 = !DILocation(line: 1008, column: 12, scope: !4568)
!4607 = !DILocation(line: 1009, column: 7, scope: !4608)
!4608 = distinct !DILexicalBlock(scope: !4568, file: !3, line: 1009, column: 7)
!4609 = !DILocation(line: 1009, column: 11, scope: !4608)
!4610 = !DILocation(line: 1009, column: 7, scope: !4568)
!4611 = !DILocation(line: 1010, column: 20, scope: !4608)
!4612 = !DILocation(line: 1010, column: 24, scope: !4608)
!4613 = !DILocation(line: 1010, column: 35, scope: !4608)
!4614 = !DILocation(line: 1010, column: 33, scope: !4608)
!4615 = !DILocation(line: 1010, column: 5, scope: !4608)
!4616 = !DILocation(line: 1010, column: 9, scope: !4608)
!4617 = !DILocation(line: 1010, column: 18, scope: !4608)
!4618 = !DILocation(line: 1012, column: 10, scope: !4568)
!4619 = !DILocation(line: 1012, column: 14, scope: !4568)
!4620 = !DILocation(line: 1012, column: 8, scope: !4568)
!4621 = !DILocation(line: 1013, column: 36, scope: !4568)
!4622 = !DILocation(line: 1013, column: 50, scope: !4568)
!4623 = !DILocation(line: 1013, column: 62, scope: !4568)
!4624 = !DILocation(line: 1014, column: 8, scope: !4568)
!4625 = !DILocation(line: 1013, column: 10, scope: !4568)
!4626 = !DILocation(line: 1013, column: 8, scope: !4568)
!4627 = !DILocation(line: 1015, column: 8, scope: !4628)
!4628 = distinct !DILexicalBlock(scope: !4568, file: !3, line: 1015, column: 7)
!4629 = !DILocation(line: 1015, column: 13, scope: !4628)
!4630 = !DILocation(line: 1015, column: 16, scope: !4628)
!4631 = !DILocation(line: 1015, column: 32, scope: !4628)
!4632 = !DILocation(line: 1015, column: 29, scope: !4628)
!4633 = !DILocation(line: 1015, column: 7, scope: !4568)
!4634 = !DILocation(line: 1016, column: 38, scope: !4628)
!4635 = !DILocation(line: 1016, column: 50, scope: !4628)
!4636 = !DILocation(line: 1016, column: 62, scope: !4628)
!4637 = !DILocation(line: 1017, column: 10, scope: !4628)
!4638 = !DILocation(line: 1016, column: 12, scope: !4628)
!4639 = !DILocation(line: 1016, column: 10, scope: !4628)
!4640 = !DILocation(line: 1016, column: 5, scope: !4628)
!4641 = !DILocation(line: 1018, column: 7, scope: !4642)
!4642 = distinct !DILexicalBlock(scope: !4568, file: !3, line: 1018, column: 7)
!4643 = !DILocation(line: 1018, column: 7, scope: !4568)
!4644 = !DILocation(line: 1019, column: 13, scope: !4642)
!4645 = !DILocation(line: 1019, column: 12, scope: !4642)
!4646 = !DILocation(line: 1019, column: 5, scope: !4642)
!4647 = !DILocation(line: 1021, column: 3, scope: !4568)
!4648 = !DILocation(line: 1022, column: 1, scope: !4568)
!4649 = distinct !DISubprogram(name: "vn_reference_lookup_3", scope: !3, file: !3, line: 1030, type: !4569, scopeLine: 1031, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!4650 = !DILocalVariable(name: "ref", arg: 1, scope: !4649, file: !3, line: 1030, type: !3853)
!4651 = !DILocation(line: 1030, column: 32, scope: !4649)
!4652 = !DILocalVariable(name: "vuse", arg: 2, scope: !4649, file: !3, line: 1030, type: !1483)
!4653 = !DILocation(line: 1030, column: 42, scope: !4649)
!4654 = !DILocalVariable(name: "vr_", arg: 3, scope: !4649, file: !3, line: 1030, type: !1767)
!4655 = !DILocation(line: 1030, column: 54, scope: !4649)
!4656 = !DILocalVariable(name: "vr", scope: !4649, file: !3, line: 1032, type: !2890)
!4657 = !DILocation(line: 1032, column: 18, scope: !4649)
!4658 = !DILocation(line: 1032, column: 39, scope: !4649)
!4659 = !DILocation(line: 1032, column: 23, scope: !4649)
!4660 = !DILocalVariable(name: "def_stmt", scope: !4649, file: !3, line: 1033, type: !1814)
!4661 = !DILocation(line: 1033, column: 10, scope: !4649)
!4662 = !DILocation(line: 1033, column: 21, scope: !4649)
!4663 = !DILocalVariable(name: "fndecl", scope: !4649, file: !3, line: 1034, type: !1483)
!4664 = !DILocation(line: 1034, column: 8, scope: !4649)
!4665 = !DILocalVariable(name: "base", scope: !4649, file: !3, line: 1035, type: !1483)
!4666 = !DILocation(line: 1035, column: 8, scope: !4649)
!4667 = !DILocalVariable(name: "offset", scope: !4649, file: !3, line: 1036, type: !1539)
!4668 = !DILocation(line: 1036, column: 17, scope: !4649)
!4669 = !DILocalVariable(name: "maxsize", scope: !4649, file: !3, line: 1036, type: !1539)
!4670 = !DILocation(line: 1036, column: 25, scope: !4649)
!4671 = !DILocation(line: 1038, column: 23, scope: !4649)
!4672 = !DILocation(line: 1038, column: 10, scope: !4649)
!4673 = !DILocation(line: 1038, column: 8, scope: !4649)
!4674 = !DILocation(line: 1039, column: 12, scope: !4649)
!4675 = !DILocation(line: 1039, column: 17, scope: !4649)
!4676 = !DILocation(line: 1039, column: 10, scope: !4649)
!4677 = !DILocation(line: 1040, column: 13, scope: !4649)
!4678 = !DILocation(line: 1040, column: 18, scope: !4649)
!4679 = !DILocation(line: 1040, column: 11, scope: !4649)
!4680 = !DILocation(line: 1044, column: 7, scope: !4681)
!4681 = distinct !DILexicalBlock(scope: !4649, file: !3, line: 1044, column: 7)
!4682 = !DILocation(line: 1044, column: 15, scope: !4681)
!4683 = !DILocation(line: 1044, column: 7, scope: !4649)
!4684 = !DILocation(line: 1045, column: 5, scope: !4681)
!4685 = !DILocation(line: 1050, column: 27, scope: !4686)
!4686 = distinct !DILexicalBlock(scope: !4649, file: !3, line: 1050, column: 7)
!4687 = !DILocation(line: 1050, column: 31, scope: !4686)
!4688 = !DILocation(line: 1050, column: 7, scope: !4686)
!4689 = !DILocation(line: 1051, column: 7, scope: !4686)
!4690 = !DILocation(line: 1051, column: 26, scope: !4686)
!4691 = !DILocation(line: 1051, column: 10, scope: !4686)
!4692 = !DILocation(line: 1052, column: 7, scope: !4686)
!4693 = !DILocation(line: 1052, column: 40, scope: !4686)
!4694 = !DILocation(line: 1052, column: 20, scope: !4686)
!4695 = !DILocation(line: 1052, column: 18, scope: !4686)
!4696 = !DILocation(line: 1053, column: 7, scope: !4686)
!4697 = !DILocation(line: 1053, column: 10, scope: !4686)
!4698 = !DILocation(line: 1053, column: 39, scope: !4686)
!4699 = !DILocation(line: 1054, column: 7, scope: !4686)
!4700 = !DILocation(line: 1054, column: 10, scope: !4686)
!4701 = !DILocation(line: 1054, column: 38, scope: !4686)
!4702 = !DILocation(line: 1055, column: 7, scope: !4686)
!4703 = !DILocation(line: 1055, column: 42, scope: !4686)
!4704 = !DILocation(line: 1055, column: 25, scope: !4686)
!4705 = !DILocation(line: 1055, column: 10, scope: !4686)
!4706 = !DILocation(line: 1056, column: 7, scope: !4686)
!4707 = !DILocation(line: 1056, column: 42, scope: !4686)
!4708 = !DILocation(line: 1056, column: 25, scope: !4686)
!4709 = !DILocation(line: 1056, column: 10, scope: !4686)
!4710 = !DILocation(line: 1057, column: 7, scope: !4686)
!4711 = !DILocation(line: 1057, column: 10, scope: !4686)
!4712 = !DILocation(line: 1057, column: 52, scope: !4686)
!4713 = !DILocation(line: 1050, column: 7, scope: !4649)
!4714 = !DILocalVariable(name: "ref2", scope: !4715, file: !3, line: 1059, type: !1483)
!4715 = distinct !DILexicalBlock(scope: !4686, file: !3, line: 1058, column: 5)
!4716 = !DILocation(line: 1059, column: 12, scope: !4715)
!4717 = !DILocation(line: 1059, column: 19, scope: !4715)
!4718 = !DILocalVariable(name: "base2", scope: !4715, file: !3, line: 1060, type: !1483)
!4719 = !DILocation(line: 1060, column: 12, scope: !4715)
!4720 = !DILocalVariable(name: "offset2", scope: !4715, file: !3, line: 1061, type: !1539)
!4721 = !DILocation(line: 1061, column: 21, scope: !4715)
!4722 = !DILocalVariable(name: "size2", scope: !4715, file: !3, line: 1061, type: !1539)
!4723 = !DILocation(line: 1061, column: 30, scope: !4715)
!4724 = !DILocalVariable(name: "maxsize2", scope: !4715, file: !3, line: 1061, type: !1539)
!4725 = !DILocation(line: 1061, column: 37, scope: !4715)
!4726 = !DILocation(line: 1062, column: 40, scope: !4715)
!4727 = !DILocation(line: 1062, column: 15, scope: !4715)
!4728 = !DILocation(line: 1062, column: 13, scope: !4715)
!4729 = !DILocation(line: 1063, column: 15, scope: !4715)
!4730 = !DILocation(line: 1063, column: 64, scope: !4715)
!4731 = !DILocation(line: 1063, column: 13, scope: !4715)
!4732 = !DILocation(line: 1064, column: 35, scope: !4733)
!4733 = distinct !DILexicalBlock(scope: !4715, file: !3, line: 1064, column: 11)
!4734 = !DILocation(line: 1064, column: 41, scope: !4733)
!4735 = !DILocation(line: 1065, column: 7, scope: !4733)
!4736 = !DILocation(line: 1065, column: 4, scope: !4733)
!4737 = !DILocation(line: 1066, column: 4, scope: !4733)
!4738 = !DILocation(line: 1066, column: 24, scope: !4733)
!4739 = !DILocation(line: 1066, column: 30, scope: !4733)
!4740 = !DILocation(line: 1066, column: 7, scope: !4733)
!4741 = !DILocation(line: 1067, column: 4, scope: !4733)
!4742 = !DILocation(line: 1067, column: 7, scope: !4733)
!4743 = !DILocation(line: 1067, column: 18, scope: !4733)
!4744 = !DILocation(line: 1067, column: 15, scope: !4733)
!4745 = !DILocation(line: 1068, column: 4, scope: !4733)
!4746 = !DILocation(line: 1068, column: 7, scope: !4733)
!4747 = !DILocation(line: 1068, column: 17, scope: !4733)
!4748 = !DILocation(line: 1068, column: 15, scope: !4733)
!4749 = !DILocation(line: 1068, column: 26, scope: !4733)
!4750 = !DILocation(line: 1068, column: 35, scope: !4733)
!4751 = !DILocation(line: 1068, column: 33, scope: !4733)
!4752 = !DILocation(line: 1068, column: 23, scope: !4733)
!4753 = !DILocation(line: 1064, column: 11, scope: !4715)
!4754 = !DILocalVariable(name: "val", scope: !4755, file: !3, line: 1070, type: !1483)
!4755 = distinct !DILexicalBlock(scope: !4733, file: !3, line: 1069, column: 2)
!4756 = !DILocation(line: 1070, column: 9, scope: !4755)
!4757 = !DILocation(line: 1070, column: 15, scope: !4755)
!4758 = !DILocalVariable(name: "value_id", scope: !4755, file: !3, line: 1071, type: !7)
!4759 = !DILocation(line: 1071, column: 17, scope: !4755)
!4760 = !DILocation(line: 1071, column: 60, scope: !4755)
!4761 = !DILocation(line: 1071, column: 28, scope: !4755)
!4762 = !DILocation(line: 1072, column: 39, scope: !4755)
!4763 = !DILocation(line: 1072, column: 45, scope: !4755)
!4764 = !DILocation(line: 1072, column: 49, scope: !4755)
!4765 = !DILocation(line: 1072, column: 54, scope: !4755)
!4766 = !DILocation(line: 1072, column: 58, scope: !4755)
!4767 = !DILocation(line: 1073, column: 11, scope: !4755)
!4768 = !DILocation(line: 1075, column: 11, scope: !4755)
!4769 = !DILocation(line: 1075, column: 16, scope: !4755)
!4770 = !DILocation(line: 1072, column: 11, scope: !4755)
!4771 = !DILocation(line: 1072, column: 4, scope: !4755)
!4772 = !DILocation(line: 1077, column: 5, scope: !4715)
!4773 = !DILocation(line: 1080, column: 32, scope: !4774)
!4774 = distinct !DILexicalBlock(scope: !4686, file: !3, line: 1080, column: 12)
!4775 = !DILocation(line: 1080, column: 36, scope: !4774)
!4776 = !DILocation(line: 1080, column: 12, scope: !4774)
!4777 = !DILocation(line: 1081, column: 5, scope: !4774)
!4778 = !DILocation(line: 1081, column: 32, scope: !4774)
!4779 = !DILocation(line: 1081, column: 8, scope: !4774)
!4780 = !DILocation(line: 1082, column: 5, scope: !4774)
!4781 = !DILocation(line: 1082, column: 32, scope: !4774)
!4782 = !DILocation(line: 1082, column: 8, scope: !4774)
!4783 = !DILocation(line: 1082, column: 42, scope: !4774)
!4784 = !DILocation(line: 1083, column: 5, scope: !4774)
!4785 = !DILocation(line: 1083, column: 8, scope: !4774)
!4786 = !DILocation(line: 1083, column: 58, scope: !4774)
!4787 = !DILocation(line: 1080, column: 12, scope: !4686)
!4788 = !DILocalVariable(name: "base2", scope: !4789, file: !3, line: 1085, type: !1483)
!4789 = distinct !DILexicalBlock(scope: !4774, file: !3, line: 1084, column: 5)
!4790 = !DILocation(line: 1085, column: 12, scope: !4789)
!4791 = !DILocalVariable(name: "offset2", scope: !4789, file: !3, line: 1086, type: !1539)
!4792 = !DILocation(line: 1086, column: 21, scope: !4789)
!4793 = !DILocalVariable(name: "size2", scope: !4789, file: !3, line: 1086, type: !1539)
!4794 = !DILocation(line: 1086, column: 30, scope: !4789)
!4795 = !DILocalVariable(name: "maxsize2", scope: !4789, file: !3, line: 1086, type: !1539)
!4796 = !DILocation(line: 1086, column: 37, scope: !4789)
!4797 = !DILocation(line: 1087, column: 59, scope: !4789)
!4798 = !DILocation(line: 1087, column: 40, scope: !4789)
!4799 = !DILocation(line: 1087, column: 15, scope: !4789)
!4800 = !DILocation(line: 1087, column: 13, scope: !4789)
!4801 = !DILocation(line: 1089, column: 28, scope: !4802)
!4802 = distinct !DILexicalBlock(scope: !4789, file: !3, line: 1089, column: 11)
!4803 = !DILocation(line: 1089, column: 34, scope: !4802)
!4804 = !DILocation(line: 1089, column: 11, scope: !4802)
!4805 = !DILocation(line: 1090, column: 4, scope: !4802)
!4806 = !DILocation(line: 1090, column: 7, scope: !4802)
!4807 = !DILocation(line: 1090, column: 18, scope: !4802)
!4808 = !DILocation(line: 1090, column: 15, scope: !4802)
!4809 = !DILocation(line: 1091, column: 4, scope: !4802)
!4810 = !DILocation(line: 1091, column: 7, scope: !4802)
!4811 = !DILocation(line: 1091, column: 17, scope: !4802)
!4812 = !DILocation(line: 1091, column: 15, scope: !4802)
!4813 = !DILocation(line: 1091, column: 26, scope: !4802)
!4814 = !DILocation(line: 1091, column: 35, scope: !4802)
!4815 = !DILocation(line: 1091, column: 33, scope: !4802)
!4816 = !DILocation(line: 1091, column: 23, scope: !4802)
!4817 = !DILocation(line: 1089, column: 11, scope: !4789)
!4818 = !DILocalVariable(name: "val", scope: !4819, file: !3, line: 1093, type: !1483)
!4819 = distinct !DILexicalBlock(scope: !4802, file: !3, line: 1092, column: 2)
!4820 = !DILocation(line: 1093, column: 9, scope: !4819)
!4821 = !DILocation(line: 1093, column: 15, scope: !4819)
!4822 = !DILocalVariable(name: "value_id", scope: !4819, file: !3, line: 1094, type: !7)
!4823 = !DILocation(line: 1094, column: 17, scope: !4819)
!4824 = !DILocation(line: 1094, column: 60, scope: !4819)
!4825 = !DILocation(line: 1094, column: 28, scope: !4819)
!4826 = !DILocation(line: 1095, column: 39, scope: !4819)
!4827 = !DILocation(line: 1095, column: 45, scope: !4819)
!4828 = !DILocation(line: 1095, column: 49, scope: !4819)
!4829 = !DILocation(line: 1095, column: 54, scope: !4819)
!4830 = !DILocation(line: 1095, column: 58, scope: !4819)
!4831 = !DILocation(line: 1096, column: 11, scope: !4819)
!4832 = !DILocation(line: 1098, column: 11, scope: !4819)
!4833 = !DILocation(line: 1098, column: 16, scope: !4819)
!4834 = !DILocation(line: 1095, column: 11, scope: !4819)
!4835 = !DILocation(line: 1095, column: 4, scope: !4819)
!4836 = !DILocation(line: 1100, column: 5, scope: !4789)
!4837 = !DILocation(line: 1104, column: 36, scope: !4838)
!4838 = distinct !DILexicalBlock(scope: !4774, file: !3, line: 1104, column: 12)
!4839 = !DILocation(line: 1104, column: 12, scope: !4838)
!4840 = !DILocation(line: 1105, column: 5, scope: !4838)
!4841 = !DILocation(line: 1105, column: 9, scope: !4838)
!4842 = !DILocation(line: 1106, column: 9, scope: !4838)
!4843 = !DILocation(line: 1106, column: 12, scope: !4838)
!4844 = !DILocation(line: 1107, column: 9, scope: !4838)
!4845 = !DILocation(line: 1107, column: 53, scope: !4838)
!4846 = !DILocation(line: 1107, column: 33, scope: !4838)
!4847 = !DILocation(line: 1107, column: 12, scope: !4838)
!4848 = !DILocation(line: 1104, column: 12, scope: !4774)
!4849 = !DILocalVariable(name: "base2", scope: !4850, file: !3, line: 1109, type: !1483)
!4850 = distinct !DILexicalBlock(scope: !4838, file: !3, line: 1108, column: 5)
!4851 = !DILocation(line: 1109, column: 12, scope: !4850)
!4852 = !DILocalVariable(name: "offset2", scope: !4850, file: !3, line: 1110, type: !1539)
!4853 = !DILocation(line: 1110, column: 21, scope: !4850)
!4854 = !DILocalVariable(name: "size2", scope: !4850, file: !3, line: 1110, type: !1539)
!4855 = !DILocation(line: 1110, column: 30, scope: !4850)
!4856 = !DILocalVariable(name: "maxsize2", scope: !4850, file: !3, line: 1110, type: !1539)
!4857 = !DILocation(line: 1110, column: 37, scope: !4850)
!4858 = !DILocalVariable(name: "i", scope: !4850, file: !3, line: 1111, type: !1580)
!4859 = !DILocation(line: 1111, column: 11, scope: !4850)
!4860 = !DILocalVariable(name: "j", scope: !4850, file: !3, line: 1111, type: !1580)
!4861 = !DILocation(line: 1111, column: 14, scope: !4850)
!4862 = !DILocalVariable(name: "lhs", scope: !4850, file: !3, line: 1112, type: !2868)
!4863 = !DILocation(line: 1112, column: 38, scope: !4850)
!4864 = !DILocalVariable(name: "rhs", scope: !4850, file: !3, line: 1112, type: !2868)
!4865 = !DILocation(line: 1112, column: 51, scope: !4850)
!4866 = !DILocalVariable(name: "vro", scope: !4850, file: !3, line: 1113, type: !3460)
!4867 = !DILocation(line: 1113, column: 25, scope: !4850)
!4868 = !DILocalVariable(name: "r", scope: !4850, file: !3, line: 1114, type: !3854)
!4869 = !DILocation(line: 1114, column: 14, scope: !4850)
!4870 = !DILocation(line: 1117, column: 59, scope: !4850)
!4871 = !DILocation(line: 1117, column: 40, scope: !4850)
!4872 = !DILocation(line: 1117, column: 15, scope: !4850)
!4873 = !DILocation(line: 1117, column: 13, scope: !4850)
!4874 = !DILocation(line: 1119, column: 29, scope: !4875)
!4875 = distinct !DILexicalBlock(scope: !4850, file: !3, line: 1119, column: 11)
!4876 = !DILocation(line: 1119, column: 35, scope: !4875)
!4877 = !DILocation(line: 1119, column: 12, scope: !4875)
!4878 = !DILocation(line: 1120, column: 4, scope: !4875)
!4879 = !DILocation(line: 1120, column: 7, scope: !4875)
!4880 = !DILocation(line: 1120, column: 17, scope: !4875)
!4881 = !DILocation(line: 1120, column: 15, scope: !4875)
!4882 = !DILocation(line: 1121, column: 4, scope: !4875)
!4883 = !DILocation(line: 1121, column: 7, scope: !4875)
!4884 = !DILocation(line: 1121, column: 17, scope: !4875)
!4885 = !DILocation(line: 1121, column: 15, scope: !4875)
!4886 = !DILocation(line: 1121, column: 25, scope: !4875)
!4887 = !DILocation(line: 1121, column: 34, scope: !4875)
!4888 = !DILocation(line: 1121, column: 32, scope: !4875)
!4889 = !DILocation(line: 1121, column: 23, scope: !4875)
!4890 = !DILocation(line: 1119, column: 11, scope: !4850)
!4891 = !DILocation(line: 1122, column: 2, scope: !4875)
!4892 = !DILocation(line: 1125, column: 55, scope: !4850)
!4893 = !DILocation(line: 1125, column: 36, scope: !4850)
!4894 = !DILocation(line: 1125, column: 7, scope: !4850)
!4895 = !DILocation(line: 1126, column: 11, scope: !4850)
!4896 = !DILocation(line: 1126, column: 56, scope: !4850)
!4897 = !DILocation(line: 1126, column: 9, scope: !4850)
!4898 = !DILocation(line: 1127, column: 11, scope: !4850)
!4899 = !DILocation(line: 1127, column: 47, scope: !4850)
!4900 = !DILocation(line: 1127, column: 9, scope: !4850)
!4901 = !DILocation(line: 1128, column: 7, scope: !4850)
!4902 = !DILocation(line: 1128, column: 14, scope: !4850)
!4903 = !DILocation(line: 1128, column: 16, scope: !4850)
!4904 = !DILocation(line: 1128, column: 21, scope: !4850)
!4905 = !DILocation(line: 1128, column: 24, scope: !4850)
!4906 = !DILocation(line: 1128, column: 26, scope: !4850)
!4907 = !DILocation(line: 1129, column: 7, scope: !4850)
!4908 = !DILocation(line: 1129, column: 30, scope: !4850)
!4909 = !DILocation(line: 1131, column: 9, scope: !4850)
!4910 = !DILocation(line: 1129, column: 10, scope: !4850)
!4911 = !DILocation(line: 0, scope: !4850)
!4912 = !DILocation(line: 1133, column: 5, scope: !4913)
!4913 = distinct !DILexicalBlock(scope: !4850, file: !3, line: 1132, column: 2)
!4914 = !DILocation(line: 1134, column: 5, scope: !4913)
!4915 = distinct !{!4915, !4901, !4916}
!4916 = !DILocation(line: 1135, column: 2, scope: !4850)
!4917 = !DILocation(line: 1137, column: 7, scope: !4850)
!4918 = !DILocation(line: 1142, column: 11, scope: !4919)
!4919 = distinct !DILexicalBlock(scope: !4850, file: !3, line: 1142, column: 11)
!4920 = !DILocation(line: 1142, column: 13, scope: !4919)
!4921 = !DILocation(line: 1142, column: 11, scope: !4850)
!4922 = !DILocation(line: 1143, column: 2, scope: !4919)
!4923 = !DILocation(line: 1146, column: 56, scope: !4850)
!4924 = !DILocation(line: 1146, column: 36, scope: !4850)
!4925 = !DILocation(line: 1146, column: 7, scope: !4850)
!4926 = !DILocation(line: 1148, column: 11, scope: !4927)
!4927 = distinct !DILexicalBlock(scope: !4850, file: !3, line: 1148, column: 11)
!4928 = !DILocation(line: 1148, column: 13, scope: !4927)
!4929 = !DILocation(line: 1148, column: 19, scope: !4927)
!4930 = !DILocation(line: 1148, column: 17, scope: !4927)
!4931 = !DILocation(line: 1149, column: 6, scope: !4927)
!4932 = !DILocation(line: 1149, column: 4, scope: !4927)
!4933 = !DILocation(line: 1148, column: 11, scope: !4850)
!4934 = !DILocalVariable(name: "old", scope: !4935, file: !3, line: 1151, type: !2868)
!4935 = distinct !DILexicalBlock(scope: !4927, file: !3, line: 1150, column: 2)
!4936 = !DILocation(line: 1151, column: 35, scope: !4935)
!4937 = !DILocation(line: 1151, column: 41, scope: !4935)
!4938 = !DILocation(line: 1151, column: 45, scope: !4935)
!4939 = !DILocation(line: 1152, column: 4, scope: !4935)
!4940 = !DILocation(line: 1154, column: 8, scope: !4941)
!4941 = distinct !DILexicalBlock(scope: !4935, file: !3, line: 1154, column: 8)
!4942 = !DILocation(line: 1154, column: 15, scope: !4941)
!4943 = !DILocation(line: 1154, column: 12, scope: !4941)
!4944 = !DILocation(line: 1155, column: 8, scope: !4941)
!4945 = !DILocation(line: 1155, column: 11, scope: !4941)
!4946 = !DILocation(line: 1155, column: 15, scope: !4941)
!4947 = !DILocation(line: 1155, column: 27, scope: !4941)
!4948 = !DILocation(line: 1155, column: 24, scope: !4941)
!4949 = !DILocation(line: 1154, column: 8, scope: !4935)
!4950 = !DILocation(line: 1156, column: 31, scope: !4941)
!4951 = !DILocation(line: 1156, column: 6, scope: !4941)
!4952 = !DILocation(line: 1157, column: 2, scope: !4935)
!4953 = !DILocation(line: 1159, column: 2, scope: !4927)
!4954 = !DILocation(line: 1161, column: 14, scope: !4955)
!4955 = distinct !DILexicalBlock(scope: !4850, file: !3, line: 1161, column: 7)
!4956 = !DILocation(line: 1161, column: 12, scope: !4955)
!4957 = !DILocation(line: 1161, column: 19, scope: !4958)
!4958 = distinct !DILexicalBlock(scope: !4955, file: !3, line: 1161, column: 7)
!4959 = !DILocation(line: 1161, column: 7, scope: !4955)
!4960 = !DILocation(line: 1162, column: 2, scope: !4958)
!4961 = !DILocation(line: 1161, column: 65, scope: !4958)
!4962 = !DILocation(line: 1161, column: 7, scope: !4958)
!4963 = distinct !{!4963, !4959, !4964}
!4964 = !DILocation(line: 1162, column: 2, scope: !4955)
!4965 = !DILocation(line: 1163, column: 7, scope: !4850)
!4966 = !DILocation(line: 1164, column: 49, scope: !4850)
!4967 = !DILocation(line: 1164, column: 22, scope: !4850)
!4968 = !DILocation(line: 1164, column: 7, scope: !4850)
!4969 = !DILocation(line: 1164, column: 11, scope: !4850)
!4970 = !DILocation(line: 1164, column: 20, scope: !4850)
!4971 = !DILocation(line: 1167, column: 47, scope: !4972)
!4972 = distinct !DILexicalBlock(scope: !4850, file: !3, line: 1167, column: 11)
!4973 = !DILocation(line: 1167, column: 51, scope: !4972)
!4974 = !DILocation(line: 1167, column: 56, scope: !4972)
!4975 = !DILocation(line: 1167, column: 60, scope: !4972)
!4976 = !DILocation(line: 1167, column: 66, scope: !4972)
!4977 = !DILocation(line: 1167, column: 70, scope: !4972)
!4978 = !DILocation(line: 1167, column: 12, scope: !4972)
!4979 = !DILocation(line: 1167, column: 11, scope: !4850)
!4980 = !DILocation(line: 1168, column: 2, scope: !4972)
!4981 = !DILocation(line: 1170, column: 11, scope: !4982)
!4982 = distinct !DILexicalBlock(scope: !4850, file: !3, line: 1170, column: 11)
!4983 = !DILocation(line: 1170, column: 16, scope: !4982)
!4984 = !DILocation(line: 1170, column: 26, scope: !4982)
!4985 = !DILocation(line: 1170, column: 21, scope: !4982)
!4986 = !DILocation(line: 1170, column: 11, scope: !4850)
!4987 = !DILocation(line: 1171, column: 2, scope: !4982)
!4988 = !DILocation(line: 1172, column: 8, scope: !4850)
!4989 = !DILocation(line: 1172, column: 14, scope: !4850)
!4990 = !DILocation(line: 1175, column: 21, scope: !4850)
!4991 = !DILocation(line: 1178, column: 7, scope: !4850)
!4992 = !DILocation(line: 1182, column: 3, scope: !4649)
!4993 = !DILocation(line: 1183, column: 1, scope: !4649)
!4994 = distinct !DISubprogram(name: "vn_reference_lookup", scope: !3, file: !3, line: 1244, type: !4995, scopeLine: 1246, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!4995 = !DISubroutineType(types: !4996)
!4996 = !{!1483, !1483, !1483, !1603, !4314}
!4997 = !DILocalVariable(name: "op", arg: 1, scope: !4994, file: !3, line: 1244, type: !1483)
!4998 = !DILocation(line: 1244, column: 27, scope: !4994)
!4999 = !DILocalVariable(name: "vuse", arg: 2, scope: !4994, file: !3, line: 1244, type: !1483)
!5000 = !DILocation(line: 1244, column: 36, scope: !4994)
!5001 = !DILocalVariable(name: "maywalk", arg: 3, scope: !4994, file: !3, line: 1244, type: !1603)
!5002 = !DILocation(line: 1244, column: 47, scope: !4994)
!5003 = !DILocalVariable(name: "vnresult", arg: 4, scope: !4994, file: !3, line: 1245, type: !4314)
!5004 = !DILocation(line: 1245, column: 24, scope: !4994)
!5005 = !DILocalVariable(name: "operands", scope: !4994, file: !3, line: 1247, type: !2868)
!5006 = !DILocation(line: 1247, column: 34, scope: !4994)
!5007 = !DILocalVariable(name: "vr1", scope: !4994, file: !3, line: 1248, type: !2860)
!5008 = !DILocation(line: 1248, column: 25, scope: !4994)
!5009 = !DILocation(line: 1250, column: 7, scope: !5010)
!5010 = distinct !DILexicalBlock(scope: !4994, file: !3, line: 1250, column: 7)
!5011 = !DILocation(line: 1250, column: 7, scope: !4994)
!5012 = !DILocation(line: 1251, column: 6, scope: !5010)
!5013 = !DILocation(line: 1251, column: 15, scope: !5010)
!5014 = !DILocation(line: 1251, column: 5, scope: !5010)
!5015 = !DILocation(line: 1253, column: 14, scope: !4994)
!5016 = !DILocation(line: 1253, column: 21, scope: !4994)
!5017 = !DILocation(line: 1253, column: 7, scope: !4994)
!5018 = !DILocation(line: 1253, column: 12, scope: !4994)
!5019 = !DILocation(line: 1254, column: 69, scope: !4994)
!5020 = !DILocation(line: 1254, column: 29, scope: !4994)
!5021 = !DILocation(line: 1254, column: 27, scope: !4994)
!5022 = !DILocation(line: 1254, column: 7, scope: !4994)
!5023 = !DILocation(line: 1254, column: 16, scope: !4994)
!5024 = !DILocation(line: 1255, column: 14, scope: !4994)
!5025 = !DILocation(line: 1255, column: 7, scope: !4994)
!5026 = !DILocation(line: 1255, column: 12, scope: !4994)
!5027 = !DILocation(line: 1256, column: 28, scope: !4994)
!5028 = !DILocation(line: 1256, column: 13, scope: !4994)
!5029 = !DILocation(line: 1256, column: 7, scope: !4994)
!5030 = !DILocation(line: 1256, column: 11, scope: !4994)
!5031 = !DILocation(line: 1257, column: 18, scope: !4994)
!5032 = !DILocation(line: 1257, column: 7, scope: !4994)
!5033 = !DILocation(line: 1257, column: 16, scope: !4994)
!5034 = !DILocation(line: 1259, column: 7, scope: !5035)
!5035 = distinct !DILexicalBlock(scope: !4994, file: !3, line: 1259, column: 7)
!5036 = !DILocation(line: 1260, column: 7, scope: !5035)
!5037 = !DILocation(line: 1260, column: 14, scope: !5035)
!5038 = !DILocation(line: 1260, column: 10, scope: !5035)
!5039 = !DILocation(line: 1259, column: 7, scope: !4994)
!5040 = !DILocalVariable(name: "wvnresult", scope: !5041, file: !3, line: 1262, type: !2890)
!5041 = distinct !DILexicalBlock(scope: !5035, file: !3, line: 1261, column: 5)
!5042 = !DILocation(line: 1262, column: 22, scope: !5041)
!5043 = !DILocalVariable(name: "r", scope: !5041, file: !3, line: 1263, type: !3854)
!5044 = !DILocation(line: 1263, column: 14, scope: !5041)
!5045 = !DILocation(line: 1264, column: 24, scope: !5041)
!5046 = !DILocation(line: 1264, column: 7, scope: !5041)
!5047 = !DILocation(line: 1266, column: 50, scope: !5041)
!5048 = !DILocation(line: 1268, column: 30, scope: !5041)
!5049 = !DILocation(line: 1266, column: 18, scope: !5041)
!5050 = !DILocation(line: 1266, column: 2, scope: !5041)
!5051 = !DILocation(line: 1265, column: 17, scope: !5041)
!5052 = !DILocation(line: 1269, column: 15, scope: !5053)
!5053 = distinct !DILexicalBlock(scope: !5041, file: !3, line: 1269, column: 11)
!5054 = !DILocation(line: 1269, column: 27, scope: !5053)
!5055 = !DILocation(line: 1269, column: 24, scope: !5053)
!5056 = !DILocation(line: 1269, column: 11, scope: !5041)
!5057 = !DILocation(line: 1270, column: 2, scope: !5053)
!5058 = !DILocation(line: 1271, column: 11, scope: !5059)
!5059 = distinct !DILexicalBlock(scope: !5041, file: !3, line: 1271, column: 11)
!5060 = !DILocation(line: 1271, column: 11, scope: !5041)
!5061 = !DILocation(line: 1273, column: 8, scope: !5062)
!5062 = distinct !DILexicalBlock(scope: !5063, file: !3, line: 1273, column: 8)
!5063 = distinct !DILexicalBlock(scope: !5059, file: !3, line: 1272, column: 2)
!5064 = !DILocation(line: 1273, column: 8, scope: !5063)
!5065 = !DILocation(line: 1274, column: 18, scope: !5062)
!5066 = !DILocation(line: 1274, column: 7, scope: !5062)
!5067 = !DILocation(line: 1274, column: 16, scope: !5062)
!5068 = !DILocation(line: 1274, column: 6, scope: !5062)
!5069 = !DILocation(line: 1275, column: 11, scope: !5063)
!5070 = !DILocation(line: 1275, column: 22, scope: !5063)
!5071 = !DILocation(line: 1275, column: 4, scope: !5063)
!5072 = !DILocation(line: 1278, column: 7, scope: !5041)
!5073 = !DILocation(line: 1281, column: 39, scope: !4994)
!5074 = !DILocation(line: 1281, column: 10, scope: !4994)
!5075 = !DILocation(line: 1281, column: 3, scope: !4994)
!5076 = !DILocation(line: 1282, column: 1, scope: !4994)
!5077 = distinct !DISubprogram(name: "valueize_shared_reference_ops_from_ref", scope: !3, file: !3, line: 938, type: !5078, scopeLine: 939, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!5078 = !DISubroutineType(types: !5079)
!5079 = !{!2868, !1483}
!5080 = !DILocalVariable(name: "ref", arg: 1, scope: !5077, file: !3, line: 938, type: !1483)
!5081 = !DILocation(line: 938, column: 46, scope: !5077)
!5082 = !DILocation(line: 940, column: 8, scope: !5083)
!5083 = distinct !DILexicalBlock(scope: !5077, file: !3, line: 940, column: 7)
!5084 = !DILocation(line: 940, column: 7, scope: !5077)
!5085 = !DILocation(line: 941, column: 5, scope: !5083)
!5086 = !DILocation(line: 942, column: 3, scope: !5077)
!5087 = !DILocation(line: 943, column: 32, scope: !5077)
!5088 = !DILocation(line: 943, column: 3, scope: !5077)
!5089 = !DILocation(line: 944, column: 45, scope: !5077)
!5090 = !DILocation(line: 944, column: 30, scope: !5077)
!5091 = !DILocation(line: 944, column: 28, scope: !5077)
!5092 = !DILocation(line: 945, column: 10, scope: !5077)
!5093 = !DILocation(line: 945, column: 3, scope: !5077)
!5094 = !DILocation(line: 946, column: 1, scope: !5077)
!5095 = distinct !DISubprogram(name: "vn_reference_insert", scope: !3, file: !3, line: 1289, type: !5096, scopeLine: 1290, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!5096 = !DISubroutineType(types: !5097)
!5097 = !{!2890, !1483, !1483, !1483}
!5098 = !DILocalVariable(name: "op", arg: 1, scope: !5095, file: !3, line: 1289, type: !1483)
!5099 = !DILocation(line: 1289, column: 27, scope: !5095)
!5100 = !DILocalVariable(name: "result", arg: 2, scope: !5095, file: !3, line: 1289, type: !1483)
!5101 = !DILocation(line: 1289, column: 36, scope: !5095)
!5102 = !DILocalVariable(name: "vuse", arg: 3, scope: !5095, file: !3, line: 1289, type: !1483)
!5103 = !DILocation(line: 1289, column: 49, scope: !5095)
!5104 = !DILocalVariable(name: "slot", scope: !5095, file: !3, line: 1291, type: !2321)
!5105 = !DILocation(line: 1291, column: 10, scope: !5095)
!5106 = !DILocalVariable(name: "vr1", scope: !5095, file: !3, line: 1292, type: !2890)
!5107 = !DILocation(line: 1292, column: 18, scope: !5095)
!5108 = !DILocation(line: 1294, column: 38, scope: !5095)
!5109 = !DILocation(line: 1294, column: 52, scope: !5095)
!5110 = !DILocation(line: 1294, column: 26, scope: !5095)
!5111 = !DILocation(line: 1294, column: 9, scope: !5095)
!5112 = !DILocation(line: 1294, column: 7, scope: !5095)
!5113 = !DILocation(line: 1295, column: 7, scope: !5114)
!5114 = distinct !DILexicalBlock(scope: !5095, file: !3, line: 1295, column: 7)
!5115 = !DILocation(line: 1295, column: 26, scope: !5114)
!5116 = !DILocation(line: 1295, column: 7, scope: !5095)
!5117 = !DILocation(line: 1296, column: 30, scope: !5114)
!5118 = !DILocation(line: 1296, column: 21, scope: !5114)
!5119 = !DILocation(line: 1296, column: 39, scope: !5114)
!5120 = !DILocation(line: 1296, column: 5, scope: !5114)
!5121 = !DILocation(line: 1296, column: 10, scope: !5114)
!5122 = !DILocation(line: 1296, column: 19, scope: !5114)
!5123 = !DILocation(line: 1298, column: 53, scope: !5114)
!5124 = !DILocation(line: 1298, column: 21, scope: !5114)
!5125 = !DILocation(line: 1298, column: 5, scope: !5114)
!5126 = !DILocation(line: 1298, column: 10, scope: !5114)
!5127 = !DILocation(line: 1298, column: 19, scope: !5114)
!5128 = !DILocation(line: 1299, column: 15, scope: !5095)
!5129 = !DILocation(line: 1299, column: 22, scope: !5095)
!5130 = !DILocation(line: 1299, column: 3, scope: !5095)
!5131 = !DILocation(line: 1299, column: 8, scope: !5095)
!5132 = !DILocation(line: 1299, column: 13, scope: !5095)
!5133 = !DILocation(line: 1300, column: 65, scope: !5095)
!5134 = !DILocation(line: 1300, column: 34, scope: !5095)
!5135 = !DILocation(line: 1300, column: 19, scope: !5095)
!5136 = !DILocation(line: 1300, column: 3, scope: !5095)
!5137 = !DILocation(line: 1300, column: 8, scope: !5095)
!5138 = !DILocation(line: 1300, column: 17, scope: !5095)
!5139 = !DILocation(line: 1301, column: 15, scope: !5095)
!5140 = !DILocation(line: 1301, column: 3, scope: !5095)
!5141 = !DILocation(line: 1301, column: 8, scope: !5095)
!5142 = !DILocation(line: 1301, column: 13, scope: !5095)
!5143 = !DILocation(line: 1302, column: 29, scope: !5095)
!5144 = !DILocation(line: 1302, column: 14, scope: !5095)
!5145 = !DILocation(line: 1302, column: 3, scope: !5095)
!5146 = !DILocation(line: 1302, column: 8, scope: !5095)
!5147 = !DILocation(line: 1302, column: 12, scope: !5095)
!5148 = !DILocation(line: 1303, column: 46, scope: !5095)
!5149 = !DILocation(line: 1303, column: 19, scope: !5095)
!5150 = !DILocation(line: 1303, column: 3, scope: !5095)
!5151 = !DILocation(line: 1303, column: 8, scope: !5095)
!5152 = !DILocation(line: 1303, column: 17, scope: !5095)
!5153 = !DILocation(line: 1304, column: 17, scope: !5095)
!5154 = !DILocation(line: 1304, column: 36, scope: !5095)
!5155 = !DILocation(line: 1304, column: 50, scope: !5095)
!5156 = !DILocation(line: 1304, column: 69, scope: !5095)
!5157 = !DILocation(line: 1304, column: 3, scope: !5095)
!5158 = !DILocation(line: 1304, column: 8, scope: !5095)
!5159 = !DILocation(line: 1304, column: 15, scope: !5095)
!5160 = !DILocation(line: 1306, column: 36, scope: !5095)
!5161 = !DILocation(line: 1306, column: 50, scope: !5095)
!5162 = !DILocation(line: 1306, column: 62, scope: !5095)
!5163 = !DILocation(line: 1306, column: 67, scope: !5095)
!5164 = !DILocation(line: 1306, column: 72, scope: !5095)
!5165 = !DILocation(line: 1306, column: 10, scope: !5095)
!5166 = !DILocation(line: 1306, column: 8, scope: !5095)
!5167 = !DILocation(line: 1318, column: 8, scope: !5168)
!5168 = distinct !DILexicalBlock(scope: !5095, file: !3, line: 1318, column: 7)
!5169 = !DILocation(line: 1318, column: 7, scope: !5168)
!5170 = !DILocation(line: 1318, column: 7, scope: !5095)
!5171 = !DILocation(line: 1319, column: 22, scope: !5168)
!5172 = !DILocation(line: 1319, column: 21, scope: !5168)
!5173 = !DILocation(line: 1319, column: 5, scope: !5168)
!5174 = !DILocation(line: 1321, column: 11, scope: !5095)
!5175 = !DILocation(line: 1321, column: 4, scope: !5095)
!5176 = !DILocation(line: 1321, column: 9, scope: !5095)
!5177 = !DILocation(line: 1322, column: 10, scope: !5095)
!5178 = !DILocation(line: 1322, column: 3, scope: !5095)
!5179 = distinct !DISubprogram(name: "create_reference_ops_from_ref", scope: !3, file: !3, line: 808, type: !5078, scopeLine: 809, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!5180 = !DILocalVariable(name: "ref", arg: 1, scope: !5179, file: !3, line: 808, type: !1483)
!5181 = !DILocation(line: 808, column: 37, scope: !5179)
!5182 = !DILocalVariable(name: "result", scope: !5179, file: !3, line: 810, type: !2868)
!5183 = !DILocation(line: 810, column: 34, scope: !5179)
!5184 = !DILocation(line: 812, column: 32, scope: !5179)
!5185 = !DILocation(line: 812, column: 3, scope: !5179)
!5186 = !DILocation(line: 813, column: 10, scope: !5179)
!5187 = !DILocation(line: 813, column: 3, scope: !5179)
!5188 = distinct !DISubprogram(name: "free_reference", scope: !3, file: !3, line: 306, type: !2318, scopeLine: 307, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!5189 = !DILocalVariable(name: "vp", arg: 1, scope: !5188, file: !3, line: 306, type: !1767)
!5190 = !DILocation(line: 306, column: 23, scope: !5188)
!5191 = !DILocalVariable(name: "vr", scope: !5188, file: !3, line: 308, type: !2890)
!5192 = !DILocation(line: 308, column: 18, scope: !5188)
!5193 = !DILocation(line: 308, column: 40, scope: !5188)
!5194 = !DILocation(line: 308, column: 23, scope: !5188)
!5195 = !DILocation(line: 309, column: 3, scope: !5188)
!5196 = !DILocation(line: 310, column: 1, scope: !5188)
!5197 = distinct !DISubprogram(name: "vn_reference_insert_pieces", scope: !3, file: !3, line: 1330, type: !5198, scopeLine: 1334, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!5198 = !DISubroutineType(types: !5199)
!5199 = !{!2890, !1483, !2123, !1483, !2868, !1483, !7}
!5200 = !DILocalVariable(name: "vuse", arg: 1, scope: !5197, file: !3, line: 1330, type: !1483)
!5201 = !DILocation(line: 1330, column: 34, scope: !5197)
!5202 = !DILocalVariable(name: "set", arg: 2, scope: !5197, file: !3, line: 1330, type: !2123)
!5203 = !DILocation(line: 1330, column: 55, scope: !5197)
!5204 = !DILocalVariable(name: "type", arg: 3, scope: !5197, file: !3, line: 1330, type: !1483)
!5205 = !DILocation(line: 1330, column: 65, scope: !5197)
!5206 = !DILocalVariable(name: "operands", arg: 4, scope: !5197, file: !3, line: 1331, type: !2868)
!5207 = !DILocation(line: 1331, column: 39, scope: !5197)
!5208 = !DILocalVariable(name: "result", arg: 5, scope: !5197, file: !3, line: 1332, type: !1483)
!5209 = !DILocation(line: 1332, column: 13, scope: !5197)
!5210 = !DILocalVariable(name: "value_id", arg: 6, scope: !5197, file: !3, line: 1332, type: !7)
!5211 = !DILocation(line: 1332, column: 34, scope: !5197)
!5212 = !DILocalVariable(name: "slot", scope: !5197, file: !3, line: 1335, type: !2321)
!5213 = !DILocation(line: 1335, column: 10, scope: !5197)
!5214 = !DILocalVariable(name: "vr1", scope: !5197, file: !3, line: 1336, type: !2890)
!5215 = !DILocation(line: 1336, column: 18, scope: !5197)
!5216 = !DILocation(line: 1338, column: 38, scope: !5197)
!5217 = !DILocation(line: 1338, column: 52, scope: !5197)
!5218 = !DILocation(line: 1338, column: 26, scope: !5197)
!5219 = !DILocation(line: 1338, column: 9, scope: !5197)
!5220 = !DILocation(line: 1338, column: 7, scope: !5197)
!5221 = !DILocation(line: 1339, column: 19, scope: !5197)
!5222 = !DILocation(line: 1339, column: 3, scope: !5197)
!5223 = !DILocation(line: 1339, column: 8, scope: !5197)
!5224 = !DILocation(line: 1339, column: 17, scope: !5197)
!5225 = !DILocation(line: 1340, column: 15, scope: !5197)
!5226 = !DILocation(line: 1340, column: 22, scope: !5197)
!5227 = !DILocation(line: 1340, column: 3, scope: !5197)
!5228 = !DILocation(line: 1340, column: 8, scope: !5197)
!5229 = !DILocation(line: 1340, column: 13, scope: !5197)
!5230 = !DILocation(line: 1341, column: 34, scope: !5197)
!5231 = !DILocation(line: 1341, column: 19, scope: !5197)
!5232 = !DILocation(line: 1341, column: 3, scope: !5197)
!5233 = !DILocation(line: 1341, column: 8, scope: !5197)
!5234 = !DILocation(line: 1341, column: 17, scope: !5197)
!5235 = !DILocation(line: 1342, column: 15, scope: !5197)
!5236 = !DILocation(line: 1342, column: 3, scope: !5197)
!5237 = !DILocation(line: 1342, column: 8, scope: !5197)
!5238 = !DILocation(line: 1342, column: 13, scope: !5197)
!5239 = !DILocation(line: 1343, column: 14, scope: !5197)
!5240 = !DILocation(line: 1343, column: 3, scope: !5197)
!5241 = !DILocation(line: 1343, column: 8, scope: !5197)
!5242 = !DILocation(line: 1343, column: 12, scope: !5197)
!5243 = !DILocation(line: 1344, column: 46, scope: !5197)
!5244 = !DILocation(line: 1344, column: 19, scope: !5197)
!5245 = !DILocation(line: 1344, column: 3, scope: !5197)
!5246 = !DILocation(line: 1344, column: 8, scope: !5197)
!5247 = !DILocation(line: 1344, column: 17, scope: !5197)
!5248 = !DILocation(line: 1345, column: 7, scope: !5249)
!5249 = distinct !DILexicalBlock(scope: !5197, file: !3, line: 1345, column: 7)
!5250 = !DILocation(line: 1345, column: 14, scope: !5249)
!5251 = !DILocation(line: 1345, column: 17, scope: !5249)
!5252 = !DILocation(line: 1345, column: 36, scope: !5249)
!5253 = !DILocation(line: 1345, column: 7, scope: !5197)
!5254 = !DILocation(line: 1346, column: 14, scope: !5249)
!5255 = !DILocation(line: 1346, column: 12, scope: !5249)
!5256 = !DILocation(line: 1346, column: 5, scope: !5249)
!5257 = !DILocation(line: 1347, column: 17, scope: !5197)
!5258 = !DILocation(line: 1347, column: 3, scope: !5197)
!5259 = !DILocation(line: 1347, column: 8, scope: !5197)
!5260 = !DILocation(line: 1347, column: 15, scope: !5197)
!5261 = !DILocation(line: 1349, column: 36, scope: !5197)
!5262 = !DILocation(line: 1349, column: 50, scope: !5197)
!5263 = !DILocation(line: 1349, column: 62, scope: !5197)
!5264 = !DILocation(line: 1349, column: 67, scope: !5197)
!5265 = !DILocation(line: 1349, column: 72, scope: !5197)
!5266 = !DILocation(line: 1349, column: 10, scope: !5197)
!5267 = !DILocation(line: 1349, column: 8, scope: !5197)
!5268 = !DILocation(line: 1355, column: 3, scope: !5197)
!5269 = !DILocation(line: 1356, column: 8, scope: !5270)
!5270 = distinct !DILexicalBlock(scope: !5197, file: !3, line: 1356, column: 7)
!5271 = !DILocation(line: 1356, column: 7, scope: !5270)
!5272 = !DILocation(line: 1356, column: 7, scope: !5197)
!5273 = !DILocation(line: 1357, column: 22, scope: !5270)
!5274 = !DILocation(line: 1357, column: 21, scope: !5270)
!5275 = !DILocation(line: 1357, column: 5, scope: !5270)
!5276 = !DILocation(line: 1359, column: 11, scope: !5197)
!5277 = !DILocation(line: 1359, column: 4, scope: !5197)
!5278 = !DILocation(line: 1359, column: 9, scope: !5197)
!5279 = !DILocation(line: 1360, column: 10, scope: !5197)
!5280 = !DILocation(line: 1360, column: 3, scope: !5197)
!5281 = distinct !DISubprogram(name: "vn_nary_op_compute_hash", scope: !3, file: !3, line: 1366, type: !5282, scopeLine: 1367, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!5282 = !DISubroutineType(types: !5283)
!5283 = !{!2307, !5284}
!5284 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2905)
!5285 = !DILocalVariable(name: "vno1", arg: 1, scope: !5281, file: !3, line: 1366, type: !5284)
!5286 = !DILocation(line: 1366, column: 45, scope: !5281)
!5287 = !DILocalVariable(name: "hash", scope: !5281, file: !3, line: 1368, type: !2307)
!5288 = !DILocation(line: 1368, column: 13, scope: !5281)
!5289 = !DILocalVariable(name: "i", scope: !5281, file: !3, line: 1369, type: !7)
!5290 = !DILocation(line: 1369, column: 12, scope: !5281)
!5291 = !DILocation(line: 1371, column: 10, scope: !5292)
!5292 = distinct !DILexicalBlock(scope: !5281, file: !3, line: 1371, column: 3)
!5293 = !DILocation(line: 1371, column: 8, scope: !5292)
!5294 = !DILocation(line: 1371, column: 15, scope: !5295)
!5295 = distinct !DILexicalBlock(scope: !5292, file: !3, line: 1371, column: 3)
!5296 = !DILocation(line: 1371, column: 19, scope: !5295)
!5297 = !DILocation(line: 1371, column: 25, scope: !5295)
!5298 = !DILocation(line: 1371, column: 17, scope: !5295)
!5299 = !DILocation(line: 1371, column: 3, scope: !5292)
!5300 = !DILocation(line: 1372, column: 9, scope: !5301)
!5301 = distinct !DILexicalBlock(scope: !5295, file: !3, line: 1372, column: 9)
!5302 = !DILocation(line: 1372, column: 33, scope: !5301)
!5303 = !DILocation(line: 1372, column: 9, scope: !5295)
!5304 = !DILocation(line: 1373, column: 21, scope: !5301)
!5305 = !DILocation(line: 1373, column: 7, scope: !5301)
!5306 = !DILocation(line: 1373, column: 13, scope: !5301)
!5307 = !DILocation(line: 1373, column: 16, scope: !5301)
!5308 = !DILocation(line: 1373, column: 19, scope: !5301)
!5309 = !DILocation(line: 1372, column: 36, scope: !5301)
!5310 = !DILocation(line: 1371, column: 33, scope: !5295)
!5311 = !DILocation(line: 1371, column: 3, scope: !5295)
!5312 = distinct !{!5312, !5299, !5313}
!5313 = !DILocation(line: 1373, column: 21, scope: !5292)
!5314 = !DILocation(line: 1375, column: 7, scope: !5315)
!5315 = distinct !DILexicalBlock(scope: !5281, file: !3, line: 1375, column: 7)
!5316 = !DILocation(line: 1375, column: 13, scope: !5315)
!5317 = !DILocation(line: 1375, column: 20, scope: !5315)
!5318 = !DILocation(line: 1376, column: 7, scope: !5315)
!5319 = !DILocation(line: 1376, column: 33, scope: !5315)
!5320 = !DILocation(line: 1376, column: 39, scope: !5315)
!5321 = !DILocation(line: 1376, column: 10, scope: !5315)
!5322 = !DILocation(line: 1377, column: 7, scope: !5315)
!5323 = !DILocation(line: 1377, column: 32, scope: !5315)
!5324 = !DILocation(line: 1377, column: 38, scope: !5315)
!5325 = !DILocation(line: 1377, column: 45, scope: !5315)
!5326 = !DILocation(line: 1377, column: 51, scope: !5315)
!5327 = !DILocation(line: 1377, column: 10, scope: !5315)
!5328 = !DILocation(line: 1375, column: 7, scope: !5281)
!5329 = !DILocalVariable(name: "temp", scope: !5330, file: !3, line: 1379, type: !1483)
!5330 = distinct !DILexicalBlock(scope: !5315, file: !3, line: 1378, column: 5)
!5331 = !DILocation(line: 1379, column: 12, scope: !5330)
!5332 = !DILocation(line: 1379, column: 19, scope: !5330)
!5333 = !DILocation(line: 1379, column: 25, scope: !5330)
!5334 = !DILocation(line: 1380, column: 21, scope: !5330)
!5335 = !DILocation(line: 1380, column: 27, scope: !5330)
!5336 = !DILocation(line: 1380, column: 7, scope: !5330)
!5337 = !DILocation(line: 1380, column: 13, scope: !5330)
!5338 = !DILocation(line: 1380, column: 19, scope: !5330)
!5339 = !DILocation(line: 1381, column: 21, scope: !5330)
!5340 = !DILocation(line: 1381, column: 7, scope: !5330)
!5341 = !DILocation(line: 1381, column: 13, scope: !5330)
!5342 = !DILocation(line: 1381, column: 19, scope: !5330)
!5343 = !DILocation(line: 1382, column: 5, scope: !5330)
!5344 = !DILocation(line: 1384, column: 36, scope: !5281)
!5345 = !DILocation(line: 1384, column: 42, scope: !5281)
!5346 = !DILocation(line: 1384, column: 10, scope: !5281)
!5347 = !DILocation(line: 1384, column: 8, scope: !5281)
!5348 = !DILocation(line: 1385, column: 10, scope: !5349)
!5349 = distinct !DILexicalBlock(scope: !5281, file: !3, line: 1385, column: 3)
!5350 = !DILocation(line: 1385, column: 8, scope: !5349)
!5351 = !DILocation(line: 1385, column: 15, scope: !5352)
!5352 = distinct !DILexicalBlock(scope: !5349, file: !3, line: 1385, column: 3)
!5353 = !DILocation(line: 1385, column: 19, scope: !5352)
!5354 = !DILocation(line: 1385, column: 25, scope: !5352)
!5355 = !DILocation(line: 1385, column: 17, scope: !5352)
!5356 = !DILocation(line: 1385, column: 3, scope: !5349)
!5357 = !DILocation(line: 1386, column: 33, scope: !5352)
!5358 = !DILocation(line: 1386, column: 39, scope: !5352)
!5359 = !DILocation(line: 1386, column: 42, scope: !5352)
!5360 = !DILocation(line: 1386, column: 46, scope: !5352)
!5361 = !DILocation(line: 1386, column: 12, scope: !5352)
!5362 = !DILocation(line: 1386, column: 10, scope: !5352)
!5363 = !DILocation(line: 1386, column: 5, scope: !5352)
!5364 = !DILocation(line: 1385, column: 33, scope: !5352)
!5365 = !DILocation(line: 1385, column: 3, scope: !5352)
!5366 = distinct !{!5366, !5356, !5367}
!5367 = !DILocation(line: 1386, column: 50, scope: !5349)
!5368 = !DILocation(line: 1388, column: 10, scope: !5281)
!5369 = !DILocation(line: 1388, column: 3, scope: !5281)
!5370 = distinct !DISubprogram(name: "vn_nary_op_eq", scope: !3, file: !3, line: 1404, type: !2313, scopeLine: 1405, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!5371 = !DILocalVariable(name: "p1", arg: 1, scope: !5370, file: !3, line: 1404, type: !2308)
!5372 = !DILocation(line: 1404, column: 28, scope: !5370)
!5373 = !DILocalVariable(name: "p2", arg: 2, scope: !5370, file: !3, line: 1404, type: !2308)
!5374 = !DILocation(line: 1404, column: 44, scope: !5370)
!5375 = !DILocalVariable(name: "vno1", scope: !5370, file: !3, line: 1406, type: !5376)
!5376 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2892)
!5377 = !DILocation(line: 1406, column: 28, scope: !5370)
!5378 = !DILocation(line: 1406, column: 56, scope: !5370)
!5379 = !DILocation(line: 1406, column: 35, scope: !5370)
!5380 = !DILocalVariable(name: "vno2", scope: !5370, file: !3, line: 1407, type: !5376)
!5381 = !DILocation(line: 1407, column: 28, scope: !5370)
!5382 = !DILocation(line: 1407, column: 56, scope: !5370)
!5383 = !DILocation(line: 1407, column: 35, scope: !5370)
!5384 = !DILocalVariable(name: "i", scope: !5370, file: !3, line: 1408, type: !7)
!5385 = !DILocation(line: 1408, column: 12, scope: !5370)
!5386 = !DILocation(line: 1410, column: 7, scope: !5387)
!5387 = distinct !DILexicalBlock(scope: !5370, file: !3, line: 1410, column: 7)
!5388 = !DILocation(line: 1410, column: 13, scope: !5387)
!5389 = !DILocation(line: 1410, column: 25, scope: !5387)
!5390 = !DILocation(line: 1410, column: 31, scope: !5387)
!5391 = !DILocation(line: 1410, column: 22, scope: !5387)
!5392 = !DILocation(line: 1410, column: 7, scope: !5370)
!5393 = !DILocation(line: 1411, column: 5, scope: !5387)
!5394 = !DILocation(line: 1413, column: 7, scope: !5395)
!5395 = distinct !DILexicalBlock(scope: !5370, file: !3, line: 1413, column: 7)
!5396 = !DILocation(line: 1413, column: 13, scope: !5395)
!5397 = !DILocation(line: 1413, column: 23, scope: !5395)
!5398 = !DILocation(line: 1413, column: 29, scope: !5395)
!5399 = !DILocation(line: 1413, column: 20, scope: !5395)
!5400 = !DILocation(line: 1414, column: 7, scope: !5395)
!5401 = !DILocation(line: 1414, column: 31, scope: !5395)
!5402 = !DILocation(line: 1414, column: 37, scope: !5395)
!5403 = !DILocation(line: 1414, column: 43, scope: !5395)
!5404 = !DILocation(line: 1414, column: 49, scope: !5395)
!5405 = !DILocation(line: 1414, column: 11, scope: !5395)
!5406 = !DILocation(line: 1413, column: 7, scope: !5370)
!5407 = !DILocation(line: 1415, column: 5, scope: !5395)
!5408 = !DILocation(line: 1417, column: 10, scope: !5409)
!5409 = distinct !DILexicalBlock(scope: !5370, file: !3, line: 1417, column: 3)
!5410 = !DILocation(line: 1417, column: 8, scope: !5409)
!5411 = !DILocation(line: 1417, column: 15, scope: !5412)
!5412 = distinct !DILexicalBlock(scope: !5409, file: !3, line: 1417, column: 3)
!5413 = !DILocation(line: 1417, column: 19, scope: !5412)
!5414 = !DILocation(line: 1417, column: 25, scope: !5412)
!5415 = !DILocation(line: 1417, column: 17, scope: !5412)
!5416 = !DILocation(line: 1417, column: 3, scope: !5409)
!5417 = !DILocation(line: 1418, column: 31, scope: !5418)
!5418 = distinct !DILexicalBlock(scope: !5412, file: !3, line: 1418, column: 9)
!5419 = !DILocation(line: 1418, column: 37, scope: !5418)
!5420 = !DILocation(line: 1418, column: 40, scope: !5418)
!5421 = !DILocation(line: 1418, column: 44, scope: !5418)
!5422 = !DILocation(line: 1418, column: 50, scope: !5418)
!5423 = !DILocation(line: 1418, column: 53, scope: !5418)
!5424 = !DILocation(line: 1418, column: 10, scope: !5418)
!5425 = !DILocation(line: 1418, column: 9, scope: !5412)
!5426 = !DILocation(line: 1419, column: 7, scope: !5418)
!5427 = !DILocation(line: 1418, column: 55, scope: !5418)
!5428 = !DILocation(line: 1417, column: 33, scope: !5412)
!5429 = !DILocation(line: 1417, column: 3, scope: !5412)
!5430 = distinct !{!5430, !5416, !5431}
!5431 = !DILocation(line: 1419, column: 14, scope: !5409)
!5432 = !DILocation(line: 1421, column: 3, scope: !5370)
!5433 = !DILocation(line: 1422, column: 1, scope: !5370)
!5434 = distinct !DISubprogram(name: "expressions_equal_p", scope: !3, file: !3, line: 3316, type: !5435, scopeLine: 3317, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!5435 = !DISubroutineType(types: !5436)
!5436 = !{!1603, !1483, !1483}
!5437 = !DILocalVariable(name: "e1", arg: 1, scope: !5434, file: !3, line: 3316, type: !1483)
!5438 = !DILocation(line: 3316, column: 27, scope: !5434)
!5439 = !DILocalVariable(name: "e2", arg: 2, scope: !5434, file: !3, line: 3316, type: !1483)
!5440 = !DILocation(line: 3316, column: 36, scope: !5434)
!5441 = !DILocation(line: 3319, column: 7, scope: !5442)
!5442 = distinct !DILexicalBlock(scope: !5434, file: !3, line: 3319, column: 7)
!5443 = !DILocation(line: 3319, column: 13, scope: !5442)
!5444 = !DILocation(line: 3319, column: 10, scope: !5442)
!5445 = !DILocation(line: 3319, column: 7, scope: !5434)
!5446 = !DILocation(line: 3320, column: 5, scope: !5442)
!5447 = !DILocation(line: 3323, column: 8, scope: !5448)
!5448 = distinct !DILexicalBlock(scope: !5434, file: !3, line: 3323, column: 7)
!5449 = !DILocation(line: 3323, column: 11, scope: !5448)
!5450 = !DILocation(line: 3323, column: 15, scope: !5448)
!5451 = !DILocation(line: 3323, column: 7, scope: !5434)
!5452 = !DILocation(line: 3324, column: 5, scope: !5448)
!5453 = !DILocation(line: 3327, column: 7, scope: !5454)
!5454 = distinct !DILexicalBlock(scope: !5434, file: !3, line: 3327, column: 7)
!5455 = !DILocation(line: 3327, column: 25, scope: !5454)
!5456 = !DILocation(line: 3327, column: 22, scope: !5454)
!5457 = !DILocation(line: 3328, column: 7, scope: !5454)
!5458 = !DILocation(line: 3328, column: 27, scope: !5454)
!5459 = !DILocation(line: 3328, column: 31, scope: !5454)
!5460 = !DILocation(line: 3328, column: 10, scope: !5454)
!5461 = !DILocation(line: 3327, column: 7, scope: !5434)
!5462 = !DILocation(line: 3329, column: 5, scope: !5454)
!5463 = !DILocation(line: 3331, column: 3, scope: !5434)
!5464 = !DILocation(line: 3332, column: 1, scope: !5434)
!5465 = distinct !DISubprogram(name: "vn_nary_op_lookup_pieces", scope: !3, file: !3, line: 1431, type: !5466, scopeLine: 1434, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!5466 = !DISubroutineType(types: !5467)
!5467 = !{!1483, !7, !134, !1483, !1483, !1483, !1483, !1483, !5468}
!5468 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2905, size: 64)
!5469 = !DILocalVariable(name: "length", arg: 1, scope: !5465, file: !3, line: 1431, type: !7)
!5470 = !DILocation(line: 1431, column: 40, scope: !5465)
!5471 = !DILocalVariable(name: "code", arg: 2, scope: !5465, file: !3, line: 1431, type: !134)
!5472 = !DILocation(line: 1431, column: 63, scope: !5465)
!5473 = !DILocalVariable(name: "type", arg: 3, scope: !5465, file: !3, line: 1432, type: !1483)
!5474 = !DILocation(line: 1432, column: 11, scope: !5465)
!5475 = !DILocalVariable(name: "op0", arg: 4, scope: !5465, file: !3, line: 1432, type: !1483)
!5476 = !DILocation(line: 1432, column: 22, scope: !5465)
!5477 = !DILocalVariable(name: "op1", arg: 5, scope: !5465, file: !3, line: 1432, type: !1483)
!5478 = !DILocation(line: 1432, column: 32, scope: !5465)
!5479 = !DILocalVariable(name: "op2", arg: 6, scope: !5465, file: !3, line: 1432, type: !1483)
!5480 = !DILocation(line: 1432, column: 42, scope: !5465)
!5481 = !DILocalVariable(name: "op3", arg: 7, scope: !5465, file: !3, line: 1433, type: !1483)
!5482 = !DILocation(line: 1433, column: 11, scope: !5465)
!5483 = !DILocalVariable(name: "vnresult", arg: 8, scope: !5465, file: !3, line: 1433, type: !5468)
!5484 = !DILocation(line: 1433, column: 30, scope: !5465)
!5485 = !DILocalVariable(name: "slot", scope: !5465, file: !3, line: 1435, type: !2321)
!5486 = !DILocation(line: 1435, column: 10, scope: !5465)
!5487 = !DILocalVariable(name: "vno1", scope: !5465, file: !3, line: 1436, type: !2895)
!5488 = !DILocation(line: 1436, column: 23, scope: !5465)
!5489 = !DILocation(line: 1437, column: 7, scope: !5490)
!5490 = distinct !DILexicalBlock(scope: !5465, file: !3, line: 1437, column: 7)
!5491 = !DILocation(line: 1437, column: 7, scope: !5465)
!5492 = !DILocation(line: 1438, column: 6, scope: !5490)
!5493 = !DILocation(line: 1438, column: 15, scope: !5490)
!5494 = !DILocation(line: 1438, column: 5, scope: !5490)
!5495 = !DILocation(line: 1439, column: 17, scope: !5465)
!5496 = !DILocation(line: 1439, column: 8, scope: !5465)
!5497 = !DILocation(line: 1439, column: 15, scope: !5465)
!5498 = !DILocation(line: 1440, column: 17, scope: !5465)
!5499 = !DILocation(line: 1440, column: 8, scope: !5465)
!5500 = !DILocation(line: 1440, column: 15, scope: !5465)
!5501 = !DILocation(line: 1441, column: 15, scope: !5465)
!5502 = !DILocation(line: 1441, column: 8, scope: !5465)
!5503 = !DILocation(line: 1441, column: 13, scope: !5465)
!5504 = !DILocation(line: 1442, column: 16, scope: !5465)
!5505 = !DILocation(line: 1442, column: 8, scope: !5465)
!5506 = !DILocation(line: 1442, column: 3, scope: !5465)
!5507 = !DILocation(line: 1442, column: 14, scope: !5465)
!5508 = !DILocation(line: 1443, column: 16, scope: !5465)
!5509 = !DILocation(line: 1443, column: 8, scope: !5465)
!5510 = !DILocation(line: 1443, column: 3, scope: !5465)
!5511 = !DILocation(line: 1443, column: 14, scope: !5465)
!5512 = !DILocation(line: 1444, column: 16, scope: !5465)
!5513 = !DILocation(line: 1444, column: 8, scope: !5465)
!5514 = !DILocation(line: 1444, column: 3, scope: !5465)
!5515 = !DILocation(line: 1444, column: 14, scope: !5465)
!5516 = !DILocation(line: 1445, column: 16, scope: !5465)
!5517 = !DILocation(line: 1445, column: 8, scope: !5465)
!5518 = !DILocation(line: 1445, column: 3, scope: !5465)
!5519 = !DILocation(line: 1445, column: 14, scope: !5465)
!5520 = !DILocation(line: 1446, column: 19, scope: !5465)
!5521 = !DILocation(line: 1446, column: 8, scope: !5465)
!5522 = !DILocation(line: 1446, column: 17, scope: !5465)
!5523 = !DILocation(line: 1447, column: 36, scope: !5465)
!5524 = !DILocation(line: 1447, column: 50, scope: !5465)
!5525 = !DILocation(line: 1447, column: 56, scope: !5465)
!5526 = !DILocation(line: 1447, column: 68, scope: !5465)
!5527 = !DILocation(line: 1447, column: 10, scope: !5465)
!5528 = !DILocation(line: 1447, column: 8, scope: !5465)
!5529 = !DILocation(line: 1449, column: 8, scope: !5530)
!5530 = distinct !DILexicalBlock(scope: !5465, file: !3, line: 1449, column: 7)
!5531 = !DILocation(line: 1449, column: 13, scope: !5530)
!5532 = !DILocation(line: 1449, column: 16, scope: !5530)
!5533 = !DILocation(line: 1449, column: 32, scope: !5530)
!5534 = !DILocation(line: 1449, column: 29, scope: !5530)
!5535 = !DILocation(line: 1449, column: 7, scope: !5465)
!5536 = !DILocation(line: 1450, column: 38, scope: !5530)
!5537 = !DILocation(line: 1450, column: 50, scope: !5530)
!5538 = !DILocation(line: 1450, column: 56, scope: !5530)
!5539 = !DILocation(line: 1450, column: 68, scope: !5530)
!5540 = !DILocation(line: 1450, column: 12, scope: !5530)
!5541 = !DILocation(line: 1450, column: 10, scope: !5530)
!5542 = !DILocation(line: 1450, column: 5, scope: !5530)
!5543 = !DILocation(line: 1452, column: 8, scope: !5544)
!5544 = distinct !DILexicalBlock(scope: !5465, file: !3, line: 1452, column: 7)
!5545 = !DILocation(line: 1452, column: 7, scope: !5465)
!5546 = !DILocation(line: 1453, column: 5, scope: !5544)
!5547 = !DILocation(line: 1454, column: 7, scope: !5548)
!5548 = distinct !DILexicalBlock(scope: !5465, file: !3, line: 1454, column: 7)
!5549 = !DILocation(line: 1454, column: 7, scope: !5465)
!5550 = !DILocation(line: 1455, column: 32, scope: !5548)
!5551 = !DILocation(line: 1455, column: 31, scope: !5548)
!5552 = !DILocation(line: 1455, column: 17, scope: !5548)
!5553 = !DILocation(line: 1455, column: 6, scope: !5548)
!5554 = !DILocation(line: 1455, column: 15, scope: !5548)
!5555 = !DILocation(line: 1455, column: 5, scope: !5548)
!5556 = !DILocation(line: 1456, column: 26, scope: !5465)
!5557 = !DILocation(line: 1456, column: 25, scope: !5465)
!5558 = !DILocation(line: 1456, column: 11, scope: !5465)
!5559 = !DILocation(line: 1456, column: 33, scope: !5465)
!5560 = !DILocation(line: 1456, column: 3, scope: !5465)
!5561 = !DILocation(line: 1457, column: 1, scope: !5465)
!5562 = distinct !DISubprogram(name: "vn_nary_op_lookup", scope: !3, file: !3, line: 1466, type: !5563, scopeLine: 1467, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!5563 = !DISubroutineType(types: !5564)
!5564 = !{!1483, !1483, !5468}
!5565 = !DILocalVariable(name: "op", arg: 1, scope: !5562, file: !3, line: 1466, type: !1483)
!5566 = !DILocation(line: 1466, column: 25, scope: !5562)
!5567 = !DILocalVariable(name: "vnresult", arg: 2, scope: !5562, file: !3, line: 1466, type: !5468)
!5568 = !DILocation(line: 1466, column: 43, scope: !5562)
!5569 = !DILocalVariable(name: "slot", scope: !5562, file: !3, line: 1468, type: !2321)
!5570 = !DILocation(line: 1468, column: 10, scope: !5562)
!5571 = !DILocalVariable(name: "vno1", scope: !5562, file: !3, line: 1469, type: !2895)
!5572 = !DILocation(line: 1469, column: 23, scope: !5562)
!5573 = !DILocalVariable(name: "i", scope: !5562, file: !3, line: 1470, type: !7)
!5574 = !DILocation(line: 1470, column: 12, scope: !5562)
!5575 = !DILocation(line: 1472, column: 7, scope: !5576)
!5576 = distinct !DILexicalBlock(scope: !5562, file: !3, line: 1472, column: 7)
!5577 = !DILocation(line: 1472, column: 7, scope: !5562)
!5578 = !DILocation(line: 1473, column: 6, scope: !5576)
!5579 = !DILocation(line: 1473, column: 15, scope: !5576)
!5580 = !DILocation(line: 1473, column: 5, scope: !5576)
!5581 = !DILocation(line: 1474, column: 17, scope: !5562)
!5582 = !DILocation(line: 1474, column: 8, scope: !5562)
!5583 = !DILocation(line: 1474, column: 15, scope: !5562)
!5584 = !DILocation(line: 1475, column: 17, scope: !5562)
!5585 = !DILocation(line: 1475, column: 8, scope: !5562)
!5586 = !DILocation(line: 1475, column: 15, scope: !5562)
!5587 = !DILocation(line: 1476, column: 15, scope: !5562)
!5588 = !DILocation(line: 1476, column: 8, scope: !5562)
!5589 = !DILocation(line: 1476, column: 13, scope: !5562)
!5590 = !DILocation(line: 1477, column: 10, scope: !5591)
!5591 = distinct !DILexicalBlock(scope: !5562, file: !3, line: 1477, column: 3)
!5592 = !DILocation(line: 1477, column: 8, scope: !5591)
!5593 = !DILocation(line: 1477, column: 15, scope: !5594)
!5594 = distinct !DILexicalBlock(scope: !5591, file: !3, line: 1477, column: 3)
!5595 = !DILocation(line: 1477, column: 24, scope: !5594)
!5596 = !DILocation(line: 1477, column: 17, scope: !5594)
!5597 = !DILocation(line: 1477, column: 3, scope: !5591)
!5598 = !DILocation(line: 1478, column: 18, scope: !5594)
!5599 = !DILocation(line: 1478, column: 10, scope: !5594)
!5600 = !DILocation(line: 1478, column: 13, scope: !5594)
!5601 = !DILocation(line: 1478, column: 5, scope: !5594)
!5602 = !DILocation(line: 1478, column: 16, scope: !5594)
!5603 = !DILocation(line: 1477, column: 32, scope: !5594)
!5604 = !DILocation(line: 1477, column: 3, scope: !5594)
!5605 = distinct !{!5605, !5597, !5606}
!5606 = !DILocation(line: 1478, column: 18, scope: !5591)
!5607 = !DILocation(line: 1479, column: 19, scope: !5562)
!5608 = !DILocation(line: 1479, column: 8, scope: !5562)
!5609 = !DILocation(line: 1479, column: 17, scope: !5562)
!5610 = !DILocation(line: 1480, column: 36, scope: !5562)
!5611 = !DILocation(line: 1480, column: 50, scope: !5562)
!5612 = !DILocation(line: 1480, column: 56, scope: !5562)
!5613 = !DILocation(line: 1480, column: 68, scope: !5562)
!5614 = !DILocation(line: 1480, column: 10, scope: !5562)
!5615 = !DILocation(line: 1480, column: 8, scope: !5562)
!5616 = !DILocation(line: 1482, column: 8, scope: !5617)
!5617 = distinct !DILexicalBlock(scope: !5562, file: !3, line: 1482, column: 7)
!5618 = !DILocation(line: 1482, column: 13, scope: !5617)
!5619 = !DILocation(line: 1482, column: 16, scope: !5617)
!5620 = !DILocation(line: 1482, column: 32, scope: !5617)
!5621 = !DILocation(line: 1482, column: 29, scope: !5617)
!5622 = !DILocation(line: 1482, column: 7, scope: !5562)
!5623 = !DILocation(line: 1483, column: 38, scope: !5617)
!5624 = !DILocation(line: 1483, column: 50, scope: !5617)
!5625 = !DILocation(line: 1483, column: 56, scope: !5617)
!5626 = !DILocation(line: 1483, column: 68, scope: !5617)
!5627 = !DILocation(line: 1483, column: 12, scope: !5617)
!5628 = !DILocation(line: 1483, column: 10, scope: !5617)
!5629 = !DILocation(line: 1483, column: 5, scope: !5617)
!5630 = !DILocation(line: 1485, column: 8, scope: !5631)
!5631 = distinct !DILexicalBlock(scope: !5562, file: !3, line: 1485, column: 7)
!5632 = !DILocation(line: 1485, column: 7, scope: !5562)
!5633 = !DILocation(line: 1486, column: 5, scope: !5631)
!5634 = !DILocation(line: 1487, column: 7, scope: !5635)
!5635 = distinct !DILexicalBlock(scope: !5562, file: !3, line: 1487, column: 7)
!5636 = !DILocation(line: 1487, column: 7, scope: !5562)
!5637 = !DILocation(line: 1488, column: 32, scope: !5635)
!5638 = !DILocation(line: 1488, column: 31, scope: !5635)
!5639 = !DILocation(line: 1488, column: 17, scope: !5635)
!5640 = !DILocation(line: 1488, column: 6, scope: !5635)
!5641 = !DILocation(line: 1488, column: 15, scope: !5635)
!5642 = !DILocation(line: 1488, column: 5, scope: !5635)
!5643 = !DILocation(line: 1489, column: 26, scope: !5562)
!5644 = !DILocation(line: 1489, column: 25, scope: !5562)
!5645 = !DILocation(line: 1489, column: 11, scope: !5562)
!5646 = !DILocation(line: 1489, column: 33, scope: !5562)
!5647 = !DILocation(line: 1489, column: 3, scope: !5562)
!5648 = !DILocation(line: 1490, column: 1, scope: !5562)
!5649 = distinct !DISubprogram(name: "vn_nary_op_lookup_stmt", scope: !3, file: !3, line: 1498, type: !5650, scopeLine: 1499, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!5650 = !DISubroutineType(types: !5651)
!5651 = !{!1483, !1814, !5468}
!5652 = !DILocalVariable(name: "stmt", arg: 1, scope: !5649, file: !3, line: 1498, type: !1814)
!5653 = !DILocation(line: 1498, column: 32, scope: !5649)
!5654 = !DILocalVariable(name: "vnresult", arg: 2, scope: !5649, file: !3, line: 1498, type: !5468)
!5655 = !DILocation(line: 1498, column: 52, scope: !5649)
!5656 = !DILocalVariable(name: "slot", scope: !5649, file: !3, line: 1500, type: !2321)
!5657 = !DILocation(line: 1500, column: 10, scope: !5649)
!5658 = !DILocalVariable(name: "vno1", scope: !5649, file: !3, line: 1501, type: !2895)
!5659 = !DILocation(line: 1501, column: 23, scope: !5649)
!5660 = !DILocalVariable(name: "i", scope: !5649, file: !3, line: 1502, type: !7)
!5661 = !DILocation(line: 1502, column: 12, scope: !5649)
!5662 = !DILocation(line: 1504, column: 7, scope: !5663)
!5663 = distinct !DILexicalBlock(scope: !5649, file: !3, line: 1504, column: 7)
!5664 = !DILocation(line: 1504, column: 7, scope: !5649)
!5665 = !DILocation(line: 1505, column: 6, scope: !5663)
!5666 = !DILocation(line: 1505, column: 15, scope: !5663)
!5667 = !DILocation(line: 1505, column: 5, scope: !5663)
!5668 = !DILocation(line: 1506, column: 41, scope: !5649)
!5669 = !DILocation(line: 1506, column: 17, scope: !5649)
!5670 = !DILocation(line: 1506, column: 8, scope: !5649)
!5671 = !DILocation(line: 1506, column: 15, scope: !5649)
!5672 = !DILocation(line: 1507, column: 33, scope: !5649)
!5673 = !DILocation(line: 1507, column: 17, scope: !5649)
!5674 = !DILocation(line: 1507, column: 39, scope: !5649)
!5675 = !DILocation(line: 1507, column: 8, scope: !5649)
!5676 = !DILocation(line: 1507, column: 15, scope: !5649)
!5677 = !DILocation(line: 1508, column: 33, scope: !5649)
!5678 = !DILocation(line: 1508, column: 15, scope: !5649)
!5679 = !DILocation(line: 1508, column: 8, scope: !5649)
!5680 = !DILocation(line: 1508, column: 13, scope: !5649)
!5681 = !DILocation(line: 1509, column: 10, scope: !5682)
!5682 = distinct !DILexicalBlock(scope: !5649, file: !3, line: 1509, column: 3)
!5683 = !DILocation(line: 1509, column: 8, scope: !5682)
!5684 = !DILocation(line: 1509, column: 15, scope: !5685)
!5685 = distinct !DILexicalBlock(scope: !5682, file: !3, line: 1509, column: 3)
!5686 = !DILocation(line: 1509, column: 24, scope: !5685)
!5687 = !DILocation(line: 1509, column: 17, scope: !5685)
!5688 = !DILocation(line: 1509, column: 3, scope: !5682)
!5689 = !DILocation(line: 1510, column: 29, scope: !5685)
!5690 = !DILocation(line: 1510, column: 35, scope: !5685)
!5691 = !DILocation(line: 1510, column: 37, scope: !5685)
!5692 = !DILocation(line: 1510, column: 18, scope: !5685)
!5693 = !DILocation(line: 1510, column: 10, scope: !5685)
!5694 = !DILocation(line: 1510, column: 13, scope: !5685)
!5695 = !DILocation(line: 1510, column: 5, scope: !5685)
!5696 = !DILocation(line: 1510, column: 16, scope: !5685)
!5697 = !DILocation(line: 1509, column: 32, scope: !5685)
!5698 = !DILocation(line: 1509, column: 3, scope: !5685)
!5699 = distinct !{!5699, !5688, !5700}
!5700 = !DILocation(line: 1510, column: 40, scope: !5682)
!5701 = !DILocation(line: 1511, column: 12, scope: !5702)
!5702 = distinct !DILexicalBlock(scope: !5649, file: !3, line: 1511, column: 7)
!5703 = !DILocation(line: 1511, column: 19, scope: !5702)
!5704 = !DILocation(line: 1512, column: 7, scope: !5702)
!5705 = !DILocation(line: 1512, column: 15, scope: !5702)
!5706 = !DILocation(line: 1512, column: 22, scope: !5702)
!5707 = !DILocation(line: 1513, column: 7, scope: !5702)
!5708 = !DILocation(line: 1513, column: 15, scope: !5702)
!5709 = !DILocation(line: 1513, column: 22, scope: !5702)
!5710 = !DILocation(line: 1511, column: 7, scope: !5649)
!5711 = !DILocation(line: 1514, column: 18, scope: !5702)
!5712 = !DILocation(line: 1514, column: 10, scope: !5702)
!5713 = !DILocation(line: 1514, column: 5, scope: !5702)
!5714 = !DILocation(line: 1514, column: 16, scope: !5702)
!5715 = !DILocation(line: 1515, column: 19, scope: !5649)
!5716 = !DILocation(line: 1515, column: 8, scope: !5649)
!5717 = !DILocation(line: 1515, column: 17, scope: !5649)
!5718 = !DILocation(line: 1516, column: 36, scope: !5649)
!5719 = !DILocation(line: 1516, column: 50, scope: !5649)
!5720 = !DILocation(line: 1516, column: 56, scope: !5649)
!5721 = !DILocation(line: 1516, column: 68, scope: !5649)
!5722 = !DILocation(line: 1516, column: 10, scope: !5649)
!5723 = !DILocation(line: 1516, column: 8, scope: !5649)
!5724 = !DILocation(line: 1518, column: 8, scope: !5725)
!5725 = distinct !DILexicalBlock(scope: !5649, file: !3, line: 1518, column: 7)
!5726 = !DILocation(line: 1518, column: 13, scope: !5725)
!5727 = !DILocation(line: 1518, column: 16, scope: !5725)
!5728 = !DILocation(line: 1518, column: 32, scope: !5725)
!5729 = !DILocation(line: 1518, column: 29, scope: !5725)
!5730 = !DILocation(line: 1518, column: 7, scope: !5649)
!5731 = !DILocation(line: 1519, column: 38, scope: !5725)
!5732 = !DILocation(line: 1519, column: 50, scope: !5725)
!5733 = !DILocation(line: 1519, column: 56, scope: !5725)
!5734 = !DILocation(line: 1519, column: 68, scope: !5725)
!5735 = !DILocation(line: 1519, column: 12, scope: !5725)
!5736 = !DILocation(line: 1519, column: 10, scope: !5725)
!5737 = !DILocation(line: 1519, column: 5, scope: !5725)
!5738 = !DILocation(line: 1521, column: 8, scope: !5739)
!5739 = distinct !DILexicalBlock(scope: !5649, file: !3, line: 1521, column: 7)
!5740 = !DILocation(line: 1521, column: 7, scope: !5649)
!5741 = !DILocation(line: 1522, column: 5, scope: !5739)
!5742 = !DILocation(line: 1523, column: 7, scope: !5743)
!5743 = distinct !DILexicalBlock(scope: !5649, file: !3, line: 1523, column: 7)
!5744 = !DILocation(line: 1523, column: 7, scope: !5649)
!5745 = !DILocation(line: 1524, column: 32, scope: !5743)
!5746 = !DILocation(line: 1524, column: 31, scope: !5743)
!5747 = !DILocation(line: 1524, column: 17, scope: !5743)
!5748 = !DILocation(line: 1524, column: 6, scope: !5743)
!5749 = !DILocation(line: 1524, column: 15, scope: !5743)
!5750 = !DILocation(line: 1524, column: 5, scope: !5743)
!5751 = !DILocation(line: 1525, column: 26, scope: !5649)
!5752 = !DILocation(line: 1525, column: 25, scope: !5649)
!5753 = !DILocation(line: 1525, column: 11, scope: !5649)
!5754 = !DILocation(line: 1525, column: 33, scope: !5649)
!5755 = !DILocation(line: 1525, column: 3, scope: !5649)
!5756 = !DILocation(line: 1526, column: 1, scope: !5649)
!5757 = distinct !DISubprogram(name: "gimple_num_ops", scope: !391, file: !391, line: 1596, type: !4154, scopeLine: 1597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!5758 = !DILocalVariable(name: "gs", arg: 1, scope: !5757, file: !391, line: 1596, type: !3220)
!5759 = !DILocation(line: 1596, column: 30, scope: !5757)
!5760 = !DILocation(line: 1598, column: 10, scope: !5757)
!5761 = !DILocation(line: 1598, column: 14, scope: !5757)
!5762 = !DILocation(line: 1598, column: 21, scope: !5757)
!5763 = !DILocation(line: 1598, column: 3, scope: !5757)
!5764 = distinct !DISubprogram(name: "gimple_op", scope: !391, file: !391, line: 1631, type: !4167, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!5765 = !DILocalVariable(name: "gs", arg: 1, scope: !5764, file: !391, line: 1631, type: !3220)
!5766 = !DILocation(line: 1631, column: 25, scope: !5764)
!5767 = !DILocalVariable(name: "i", arg: 2, scope: !5764, file: !391, line: 1631, type: !7)
!5768 = !DILocation(line: 1631, column: 38, scope: !5764)
!5769 = !DILocation(line: 1633, column: 23, scope: !5770)
!5770 = distinct !DILexicalBlock(scope: !5764, file: !391, line: 1633, column: 7)
!5771 = !DILocation(line: 1633, column: 7, scope: !5770)
!5772 = !DILocation(line: 1633, column: 7, scope: !5764)
!5773 = !DILocation(line: 1638, column: 26, scope: !5774)
!5774 = distinct !DILexicalBlock(scope: !5770, file: !391, line: 1634, column: 5)
!5775 = !DILocation(line: 1638, column: 14, scope: !5774)
!5776 = !DILocation(line: 1638, column: 50, scope: !5774)
!5777 = !DILocation(line: 1638, column: 7, scope: !5774)
!5778 = !DILocation(line: 1641, column: 5, scope: !5770)
!5779 = !DILocation(line: 1642, column: 1, scope: !5764)
!5780 = distinct !DISubprogram(name: "vn_nary_op_insert_pieces", scope: !3, file: !3, line: 1533, type: !5781, scopeLine: 1538, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!5781 = !DISubroutineType(types: !5782)
!5782 = !{!2905, !7, !134, !1483, !1483, !1483, !1483, !1483, !1483, !7}
!5783 = !DILocalVariable(name: "length", arg: 1, scope: !5780, file: !3, line: 1533, type: !7)
!5784 = !DILocation(line: 1533, column: 40, scope: !5780)
!5785 = !DILocalVariable(name: "code", arg: 2, scope: !5780, file: !3, line: 1533, type: !134)
!5786 = !DILocation(line: 1533, column: 63, scope: !5780)
!5787 = !DILocalVariable(name: "type", arg: 3, scope: !5780, file: !3, line: 1534, type: !1483)
!5788 = !DILocation(line: 1534, column: 11, scope: !5780)
!5789 = !DILocalVariable(name: "op0", arg: 4, scope: !5780, file: !3, line: 1534, type: !1483)
!5790 = !DILocation(line: 1534, column: 22, scope: !5780)
!5791 = !DILocalVariable(name: "op1", arg: 5, scope: !5780, file: !3, line: 1535, type: !1483)
!5792 = !DILocation(line: 1535, column: 11, scope: !5780)
!5793 = !DILocalVariable(name: "op2", arg: 6, scope: !5780, file: !3, line: 1535, type: !1483)
!5794 = !DILocation(line: 1535, column: 21, scope: !5780)
!5795 = !DILocalVariable(name: "op3", arg: 7, scope: !5780, file: !3, line: 1535, type: !1483)
!5796 = !DILocation(line: 1535, column: 31, scope: !5780)
!5797 = !DILocalVariable(name: "result", arg: 8, scope: !5780, file: !3, line: 1536, type: !1483)
!5798 = !DILocation(line: 1536, column: 11, scope: !5780)
!5799 = !DILocalVariable(name: "value_id", arg: 9, scope: !5780, file: !3, line: 1537, type: !7)
!5800 = !DILocation(line: 1537, column: 19, scope: !5780)
!5801 = !DILocalVariable(name: "slot", scope: !5780, file: !3, line: 1539, type: !2321)
!5802 = !DILocation(line: 1539, column: 10, scope: !5780)
!5803 = !DILocalVariable(name: "vno1", scope: !5780, file: !3, line: 1540, type: !2905)
!5804 = !DILocation(line: 1540, column: 16, scope: !5780)
!5805 = !DILocation(line: 1542, column: 25, scope: !5780)
!5806 = !DILocation(line: 1542, column: 10, scope: !5780)
!5807 = !DILocation(line: 1542, column: 8, scope: !5780)
!5808 = !DILocation(line: 1545, column: 20, scope: !5780)
!5809 = !DILocation(line: 1545, column: 3, scope: !5780)
!5810 = !DILocation(line: 1545, column: 9, scope: !5780)
!5811 = !DILocation(line: 1545, column: 18, scope: !5780)
!5812 = !DILocation(line: 1546, column: 18, scope: !5780)
!5813 = !DILocation(line: 1546, column: 3, scope: !5780)
!5814 = !DILocation(line: 1546, column: 9, scope: !5780)
!5815 = !DILocation(line: 1546, column: 16, scope: !5780)
!5816 = !DILocation(line: 1547, column: 18, scope: !5780)
!5817 = !DILocation(line: 1547, column: 3, scope: !5780)
!5818 = !DILocation(line: 1547, column: 9, scope: !5780)
!5819 = !DILocation(line: 1547, column: 16, scope: !5780)
!5820 = !DILocation(line: 1548, column: 16, scope: !5780)
!5821 = !DILocation(line: 1548, column: 3, scope: !5780)
!5822 = !DILocation(line: 1548, column: 9, scope: !5780)
!5823 = !DILocation(line: 1548, column: 14, scope: !5780)
!5824 = !DILocation(line: 1549, column: 7, scope: !5825)
!5825 = distinct !DILexicalBlock(scope: !5780, file: !3, line: 1549, column: 7)
!5826 = !DILocation(line: 1549, column: 14, scope: !5825)
!5827 = !DILocation(line: 1549, column: 7, scope: !5780)
!5828 = !DILocation(line: 1550, column: 19, scope: !5825)
!5829 = !DILocation(line: 1550, column: 5, scope: !5825)
!5830 = !DILocation(line: 1550, column: 11, scope: !5825)
!5831 = !DILocation(line: 1550, column: 17, scope: !5825)
!5832 = !DILocation(line: 1551, column: 7, scope: !5833)
!5833 = distinct !DILexicalBlock(scope: !5780, file: !3, line: 1551, column: 7)
!5834 = !DILocation(line: 1551, column: 14, scope: !5833)
!5835 = !DILocation(line: 1551, column: 7, scope: !5780)
!5836 = !DILocation(line: 1552, column: 19, scope: !5833)
!5837 = !DILocation(line: 1552, column: 5, scope: !5833)
!5838 = !DILocation(line: 1552, column: 11, scope: !5833)
!5839 = !DILocation(line: 1552, column: 17, scope: !5833)
!5840 = !DILocation(line: 1553, column: 7, scope: !5841)
!5841 = distinct !DILexicalBlock(scope: !5780, file: !3, line: 1553, column: 7)
!5842 = !DILocation(line: 1553, column: 14, scope: !5841)
!5843 = !DILocation(line: 1553, column: 7, scope: !5780)
!5844 = !DILocation(line: 1554, column: 19, scope: !5841)
!5845 = !DILocation(line: 1554, column: 5, scope: !5841)
!5846 = !DILocation(line: 1554, column: 11, scope: !5841)
!5847 = !DILocation(line: 1554, column: 17, scope: !5841)
!5848 = !DILocation(line: 1555, column: 7, scope: !5849)
!5849 = distinct !DILexicalBlock(scope: !5780, file: !3, line: 1555, column: 7)
!5850 = !DILocation(line: 1555, column: 14, scope: !5849)
!5851 = !DILocation(line: 1555, column: 7, scope: !5780)
!5852 = !DILocation(line: 1556, column: 19, scope: !5849)
!5853 = !DILocation(line: 1556, column: 5, scope: !5849)
!5854 = !DILocation(line: 1556, column: 11, scope: !5849)
!5855 = !DILocation(line: 1556, column: 17, scope: !5849)
!5856 = !DILocation(line: 1557, column: 18, scope: !5780)
!5857 = !DILocation(line: 1557, column: 3, scope: !5780)
!5858 = !DILocation(line: 1557, column: 9, scope: !5780)
!5859 = !DILocation(line: 1557, column: 16, scope: !5780)
!5860 = !DILocation(line: 1558, column: 45, scope: !5780)
!5861 = !DILocation(line: 1558, column: 20, scope: !5780)
!5862 = !DILocation(line: 1558, column: 3, scope: !5780)
!5863 = !DILocation(line: 1558, column: 9, scope: !5780)
!5864 = !DILocation(line: 1558, column: 18, scope: !5780)
!5865 = !DILocation(line: 1559, column: 36, scope: !5780)
!5866 = !DILocation(line: 1559, column: 50, scope: !5780)
!5867 = !DILocation(line: 1559, column: 56, scope: !5780)
!5868 = !DILocation(line: 1559, column: 62, scope: !5780)
!5869 = !DILocation(line: 1559, column: 68, scope: !5780)
!5870 = !DILocation(line: 1559, column: 10, scope: !5780)
!5871 = !DILocation(line: 1559, column: 8, scope: !5780)
!5872 = !DILocation(line: 1561, column: 3, scope: !5780)
!5873 = !DILocation(line: 1563, column: 11, scope: !5780)
!5874 = !DILocation(line: 1563, column: 4, scope: !5780)
!5875 = !DILocation(line: 1563, column: 9, scope: !5780)
!5876 = !DILocation(line: 1564, column: 10, scope: !5780)
!5877 = !DILocation(line: 1564, column: 3, scope: !5780)
!5878 = distinct !DISubprogram(name: "vn_nary_op_insert", scope: !3, file: !3, line: 1573, type: !5879, scopeLine: 1574, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!5879 = !DISubroutineType(types: !5880)
!5880 = !{!2905, !1483, !1483}
!5881 = !DILocalVariable(name: "op", arg: 1, scope: !5878, file: !3, line: 1573, type: !1483)
!5882 = !DILocation(line: 1573, column: 25, scope: !5878)
!5883 = !DILocalVariable(name: "result", arg: 2, scope: !5878, file: !3, line: 1573, type: !1483)
!5884 = !DILocation(line: 1573, column: 34, scope: !5878)
!5885 = !DILocalVariable(name: "length", scope: !5878, file: !3, line: 1575, type: !7)
!5886 = !DILocation(line: 1575, column: 12, scope: !5878)
!5887 = !DILocation(line: 1575, column: 21, scope: !5878)
!5888 = !DILocalVariable(name: "slot", scope: !5878, file: !3, line: 1576, type: !2321)
!5889 = !DILocation(line: 1576, column: 10, scope: !5878)
!5890 = !DILocalVariable(name: "vno1", scope: !5878, file: !3, line: 1577, type: !2905)
!5891 = !DILocation(line: 1577, column: 16, scope: !5878)
!5892 = !DILocalVariable(name: "i", scope: !5878, file: !3, line: 1578, type: !7)
!5893 = !DILocation(line: 1578, column: 12, scope: !5878)
!5894 = !DILocation(line: 1580, column: 25, scope: !5878)
!5895 = !DILocation(line: 1580, column: 10, scope: !5878)
!5896 = !DILocation(line: 1580, column: 8, scope: !5878)
!5897 = !DILocation(line: 1583, column: 29, scope: !5878)
!5898 = !DILocation(line: 1583, column: 20, scope: !5878)
!5899 = !DILocation(line: 1583, column: 38, scope: !5878)
!5900 = !DILocation(line: 1583, column: 3, scope: !5878)
!5901 = !DILocation(line: 1583, column: 9, scope: !5878)
!5902 = !DILocation(line: 1583, column: 18, scope: !5878)
!5903 = !DILocation(line: 1584, column: 18, scope: !5878)
!5904 = !DILocation(line: 1584, column: 3, scope: !5878)
!5905 = !DILocation(line: 1584, column: 9, scope: !5878)
!5906 = !DILocation(line: 1584, column: 16, scope: !5878)
!5907 = !DILocation(line: 1585, column: 18, scope: !5878)
!5908 = !DILocation(line: 1585, column: 3, scope: !5878)
!5909 = !DILocation(line: 1585, column: 9, scope: !5878)
!5910 = !DILocation(line: 1585, column: 16, scope: !5878)
!5911 = !DILocation(line: 1586, column: 16, scope: !5878)
!5912 = !DILocation(line: 1586, column: 3, scope: !5878)
!5913 = !DILocation(line: 1586, column: 9, scope: !5878)
!5914 = !DILocation(line: 1586, column: 14, scope: !5878)
!5915 = !DILocation(line: 1587, column: 10, scope: !5916)
!5916 = distinct !DILexicalBlock(scope: !5878, file: !3, line: 1587, column: 3)
!5917 = !DILocation(line: 1587, column: 8, scope: !5916)
!5918 = !DILocation(line: 1587, column: 15, scope: !5919)
!5919 = distinct !DILexicalBlock(scope: !5916, file: !3, line: 1587, column: 3)
!5920 = !DILocation(line: 1587, column: 19, scope: !5919)
!5921 = !DILocation(line: 1587, column: 25, scope: !5919)
!5922 = !DILocation(line: 1587, column: 17, scope: !5919)
!5923 = !DILocation(line: 1587, column: 3, scope: !5916)
!5924 = !DILocation(line: 1588, column: 19, scope: !5919)
!5925 = !DILocation(line: 1588, column: 5, scope: !5919)
!5926 = !DILocation(line: 1588, column: 11, scope: !5919)
!5927 = !DILocation(line: 1588, column: 14, scope: !5919)
!5928 = !DILocation(line: 1588, column: 17, scope: !5919)
!5929 = !DILocation(line: 1587, column: 33, scope: !5919)
!5930 = !DILocation(line: 1587, column: 3, scope: !5919)
!5931 = distinct !{!5931, !5923, !5932}
!5932 = !DILocation(line: 1588, column: 19, scope: !5916)
!5933 = !DILocation(line: 1589, column: 18, scope: !5878)
!5934 = !DILocation(line: 1589, column: 3, scope: !5878)
!5935 = !DILocation(line: 1589, column: 9, scope: !5878)
!5936 = !DILocation(line: 1589, column: 16, scope: !5878)
!5937 = !DILocation(line: 1590, column: 45, scope: !5878)
!5938 = !DILocation(line: 1590, column: 20, scope: !5878)
!5939 = !DILocation(line: 1590, column: 3, scope: !5878)
!5940 = !DILocation(line: 1590, column: 9, scope: !5878)
!5941 = !DILocation(line: 1590, column: 18, scope: !5878)
!5942 = !DILocation(line: 1591, column: 36, scope: !5878)
!5943 = !DILocation(line: 1591, column: 50, scope: !5878)
!5944 = !DILocation(line: 1591, column: 56, scope: !5878)
!5945 = !DILocation(line: 1591, column: 62, scope: !5878)
!5946 = !DILocation(line: 1591, column: 68, scope: !5878)
!5947 = !DILocation(line: 1591, column: 10, scope: !5878)
!5948 = !DILocation(line: 1591, column: 8, scope: !5878)
!5949 = !DILocation(line: 1593, column: 3, scope: !5878)
!5950 = !DILocation(line: 1595, column: 11, scope: !5878)
!5951 = !DILocation(line: 1595, column: 4, scope: !5878)
!5952 = !DILocation(line: 1595, column: 9, scope: !5878)
!5953 = !DILocation(line: 1596, column: 10, scope: !5878)
!5954 = !DILocation(line: 1596, column: 3, scope: !5878)
!5955 = distinct !DISubprogram(name: "vn_nary_op_insert_stmt", scope: !3, file: !3, line: 1603, type: !5956, scopeLine: 1604, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!5956 = !DISubroutineType(types: !5957)
!5957 = !{!2905, !1814, !1483}
!5958 = !DILocalVariable(name: "stmt", arg: 1, scope: !5955, file: !3, line: 1603, type: !1814)
!5959 = !DILocation(line: 1603, column: 32, scope: !5955)
!5960 = !DILocalVariable(name: "result", arg: 2, scope: !5955, file: !3, line: 1603, type: !1483)
!5961 = !DILocation(line: 1603, column: 43, scope: !5955)
!5962 = !DILocalVariable(name: "length", scope: !5955, file: !3, line: 1605, type: !7)
!5963 = !DILocation(line: 1605, column: 12, scope: !5955)
!5964 = !DILocation(line: 1605, column: 37, scope: !5955)
!5965 = !DILocation(line: 1605, column: 21, scope: !5955)
!5966 = !DILocation(line: 1605, column: 43, scope: !5955)
!5967 = !DILocalVariable(name: "slot", scope: !5955, file: !3, line: 1606, type: !2321)
!5968 = !DILocation(line: 1606, column: 10, scope: !5955)
!5969 = !DILocalVariable(name: "vno1", scope: !5955, file: !3, line: 1607, type: !2905)
!5970 = !DILocation(line: 1607, column: 16, scope: !5955)
!5971 = !DILocalVariable(name: "i", scope: !5955, file: !3, line: 1608, type: !7)
!5972 = !DILocation(line: 1608, column: 12, scope: !5955)
!5973 = !DILocation(line: 1610, column: 25, scope: !5955)
!5974 = !DILocation(line: 1610, column: 10, scope: !5955)
!5975 = !DILocation(line: 1610, column: 8, scope: !5955)
!5976 = !DILocation(line: 1613, column: 29, scope: !5955)
!5977 = !DILocation(line: 1613, column: 20, scope: !5955)
!5978 = !DILocation(line: 1613, column: 38, scope: !5955)
!5979 = !DILocation(line: 1613, column: 3, scope: !5955)
!5980 = !DILocation(line: 1613, column: 9, scope: !5955)
!5981 = !DILocation(line: 1613, column: 18, scope: !5955)
!5982 = !DILocation(line: 1614, column: 42, scope: !5955)
!5983 = !DILocation(line: 1614, column: 18, scope: !5955)
!5984 = !DILocation(line: 1614, column: 3, scope: !5955)
!5985 = !DILocation(line: 1614, column: 9, scope: !5955)
!5986 = !DILocation(line: 1614, column: 16, scope: !5955)
!5987 = !DILocation(line: 1615, column: 18, scope: !5955)
!5988 = !DILocation(line: 1615, column: 3, scope: !5955)
!5989 = !DILocation(line: 1615, column: 9, scope: !5955)
!5990 = !DILocation(line: 1615, column: 16, scope: !5955)
!5991 = !DILocation(line: 1616, column: 34, scope: !5955)
!5992 = !DILocation(line: 1616, column: 16, scope: !5955)
!5993 = !DILocation(line: 1616, column: 3, scope: !5955)
!5994 = !DILocation(line: 1616, column: 9, scope: !5955)
!5995 = !DILocation(line: 1616, column: 14, scope: !5955)
!5996 = !DILocation(line: 1617, column: 10, scope: !5997)
!5997 = distinct !DILexicalBlock(scope: !5955, file: !3, line: 1617, column: 3)
!5998 = !DILocation(line: 1617, column: 8, scope: !5997)
!5999 = !DILocation(line: 1617, column: 15, scope: !6000)
!6000 = distinct !DILexicalBlock(scope: !5997, file: !3, line: 1617, column: 3)
!6001 = !DILocation(line: 1617, column: 19, scope: !6000)
!6002 = !DILocation(line: 1617, column: 25, scope: !6000)
!6003 = !DILocation(line: 1617, column: 17, scope: !6000)
!6004 = !DILocation(line: 1617, column: 3, scope: !5997)
!6005 = !DILocation(line: 1618, column: 30, scope: !6000)
!6006 = !DILocation(line: 1618, column: 36, scope: !6000)
!6007 = !DILocation(line: 1618, column: 38, scope: !6000)
!6008 = !DILocation(line: 1618, column: 19, scope: !6000)
!6009 = !DILocation(line: 1618, column: 5, scope: !6000)
!6010 = !DILocation(line: 1618, column: 11, scope: !6000)
!6011 = !DILocation(line: 1618, column: 14, scope: !6000)
!6012 = !DILocation(line: 1618, column: 17, scope: !6000)
!6013 = !DILocation(line: 1617, column: 33, scope: !6000)
!6014 = !DILocation(line: 1617, column: 3, scope: !6000)
!6015 = distinct !{!6015, !6004, !6016}
!6016 = !DILocation(line: 1618, column: 41, scope: !5997)
!6017 = !DILocation(line: 1619, column: 7, scope: !6018)
!6018 = distinct !DILexicalBlock(scope: !5955, file: !3, line: 1619, column: 7)
!6019 = !DILocation(line: 1619, column: 13, scope: !6018)
!6020 = !DILocation(line: 1619, column: 20, scope: !6018)
!6021 = !DILocation(line: 1620, column: 7, scope: !6018)
!6022 = !DILocation(line: 1620, column: 10, scope: !6018)
!6023 = !DILocation(line: 1620, column: 16, scope: !6018)
!6024 = !DILocation(line: 1620, column: 23, scope: !6018)
!6025 = !DILocation(line: 1621, column: 7, scope: !6018)
!6026 = !DILocation(line: 1621, column: 10, scope: !6018)
!6027 = !DILocation(line: 1621, column: 16, scope: !6018)
!6028 = !DILocation(line: 1621, column: 23, scope: !6018)
!6029 = !DILocation(line: 1619, column: 7, scope: !5955)
!6030 = !DILocation(line: 1622, column: 19, scope: !6018)
!6031 = !DILocation(line: 1622, column: 5, scope: !6018)
!6032 = !DILocation(line: 1622, column: 11, scope: !6018)
!6033 = !DILocation(line: 1622, column: 17, scope: !6018)
!6034 = !DILocation(line: 1623, column: 18, scope: !5955)
!6035 = !DILocation(line: 1623, column: 3, scope: !5955)
!6036 = !DILocation(line: 1623, column: 9, scope: !5955)
!6037 = !DILocation(line: 1623, column: 16, scope: !5955)
!6038 = !DILocation(line: 1624, column: 45, scope: !5955)
!6039 = !DILocation(line: 1624, column: 20, scope: !5955)
!6040 = !DILocation(line: 1624, column: 3, scope: !5955)
!6041 = !DILocation(line: 1624, column: 9, scope: !5955)
!6042 = !DILocation(line: 1624, column: 18, scope: !5955)
!6043 = !DILocation(line: 1625, column: 36, scope: !5955)
!6044 = !DILocation(line: 1625, column: 50, scope: !5955)
!6045 = !DILocation(line: 1625, column: 56, scope: !5955)
!6046 = !DILocation(line: 1625, column: 62, scope: !5955)
!6047 = !DILocation(line: 1625, column: 68, scope: !5955)
!6048 = !DILocation(line: 1625, column: 10, scope: !5955)
!6049 = !DILocation(line: 1625, column: 8, scope: !5955)
!6050 = !DILocation(line: 1627, column: 3, scope: !5955)
!6051 = !DILocation(line: 1629, column: 11, scope: !5955)
!6052 = !DILocation(line: 1629, column: 4, scope: !5955)
!6053 = !DILocation(line: 1629, column: 9, scope: !5955)
!6054 = !DILocation(line: 1630, column: 10, scope: !5955)
!6055 = !DILocation(line: 1630, column: 3, scope: !5955)
!6056 = distinct !DISubprogram(name: "free_scc_vn", scope: !3, file: !3, line: 3118, type: !6057, scopeLine: 3119, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!6057 = !DISubroutineType(types: !6058)
!6058 = !{null}
!6059 = !DILocalVariable(name: "i", scope: !6056, file: !3, line: 3120, type: !1959)
!6060 = !DILocation(line: 3120, column: 10, scope: !6056)
!6061 = !DILocation(line: 3122, column: 16, scope: !6056)
!6062 = !DILocation(line: 3122, column: 3, scope: !6056)
!6063 = !DILocation(line: 3123, column: 3, scope: !6056)
!6064 = !DILocation(line: 3124, column: 3, scope: !6056)
!6065 = !DILocation(line: 3125, column: 3, scope: !6056)
!6066 = !DILocation(line: 3126, column: 3, scope: !6056)
!6067 = !DILocation(line: 3128, column: 10, scope: !6068)
!6068 = distinct !DILexicalBlock(scope: !6056, file: !3, line: 3128, column: 3)
!6069 = !DILocation(line: 3128, column: 8, scope: !6068)
!6070 = !DILocation(line: 3128, column: 15, scope: !6071)
!6071 = distinct !DILexicalBlock(scope: !6068, file: !3, line: 3128, column: 3)
!6072 = !DILocation(line: 3128, column: 19, scope: !6071)
!6073 = !DILocation(line: 3128, column: 17, scope: !6071)
!6074 = !DILocation(line: 3128, column: 3, scope: !6068)
!6075 = !DILocalVariable(name: "name", scope: !6076, file: !3, line: 3130, type: !1483)
!6076 = distinct !DILexicalBlock(scope: !6071, file: !3, line: 3129, column: 5)
!6077 = !DILocation(line: 3130, column: 12, scope: !6076)
!6078 = !DILocation(line: 3130, column: 19, scope: !6076)
!6079 = !DILocation(line: 3131, column: 11, scope: !6080)
!6080 = distinct !DILexicalBlock(scope: !6076, file: !3, line: 3131, column: 11)
!6081 = !DILocation(line: 3132, column: 4, scope: !6080)
!6082 = !DILocation(line: 3132, column: 16, scope: !6080)
!6083 = !DILocation(line: 3132, column: 7, scope: !6080)
!6084 = !DILocation(line: 3132, column: 23, scope: !6080)
!6085 = !DILocation(line: 3131, column: 11, scope: !6076)
!6086 = !DILocation(line: 3133, column: 20, scope: !6080)
!6087 = !DILocation(line: 3133, column: 2, scope: !6080)
!6088 = !DILocation(line: 3134, column: 5, scope: !6076)
!6089 = !DILocation(line: 3128, column: 35, scope: !6071)
!6090 = !DILocation(line: 3128, column: 3, scope: !6071)
!6091 = distinct !{!6091, !6074, !6092}
!6092 = !DILocation(line: 3134, column: 5, scope: !6068)
!6093 = !DILocation(line: 3135, column: 3, scope: !6056)
!6094 = !DILocation(line: 3136, column: 3, scope: !6056)
!6095 = !DILocation(line: 3138, column: 3, scope: !6056)
!6096 = !DILocation(line: 3139, column: 18, scope: !6056)
!6097 = !DILocation(line: 3139, column: 3, scope: !6056)
!6098 = !DILocation(line: 3140, column: 3, scope: !6056)
!6099 = !DILocation(line: 3141, column: 18, scope: !6056)
!6100 = !DILocation(line: 3141, column: 3, scope: !6056)
!6101 = !DILocation(line: 3142, column: 3, scope: !6056)
!6102 = !DILocation(line: 3143, column: 1, scope: !6056)
!6103 = distinct !DISubprogram(name: "VEC_tree_heap_free", scope: !135, file: !135, line: 184, type: !6104, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!6104 = !DISubroutineType(types: !6105)
!6105 = !{null, !6106}
!6106 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2970, size: 64)
!6107 = !DILocalVariable(name: "vec_", arg: 1, scope: !6103, file: !135, line: 184, type: !6106)
!6108 = !DILocation(line: 184, column: 1, scope: !6103)
!6109 = !DILocation(line: 184, column: 1, scope: !6110)
!6110 = distinct !DILexicalBlock(scope: !6103, file: !135, line: 184, column: 1)
!6111 = distinct !DISubprogram(name: "VEC_tree_base_length", scope: !135, file: !135, line: 182, type: !6112, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!6112 = !DISubroutineType(types: !6113)
!6113 = !{!7, !6114}
!6114 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6115, size: 64)
!6115 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2365)
!6116 = !DILocalVariable(name: "vec_", arg: 1, scope: !6111, file: !135, line: 182, type: !6114)
!6117 = !DILocation(line: 182, column: 1, scope: !6111)
!6118 = distinct !DISubprogram(name: "VEC_tree_base_index", scope: !135, file: !135, line: 182, type: !6119, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!6119 = !DISubroutineType(types: !6120)
!6120 = !{!1483, !6114, !7}
!6121 = !DILocalVariable(name: "vec_", arg: 1, scope: !6118, file: !135, line: 182, type: !6114)
!6122 = !DILocation(line: 182, column: 1, scope: !6118)
!6123 = !DILocalVariable(name: "ix_", arg: 2, scope: !6118, file: !135, line: 182, type: !7)
!6124 = !DILocation(line: 0, scope: !6118)
!6125 = distinct !DISubprogram(name: "VEC_vn_ssa_aux_t_heap_free", scope: !3, file: !3, line: 164, type: !6126, scopeLine: 164, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!6126 = !DISubroutineType(types: !6127)
!6127 = !{null, !3092}
!6128 = !DILocalVariable(name: "vec_", arg: 1, scope: !6125, file: !3, line: 164, type: !3092)
!6129 = !DILocation(line: 164, column: 1, scope: !6125)
!6130 = !DILocation(line: 164, column: 1, scope: !6131)
!6131 = distinct !DILexicalBlock(scope: !6125, file: !3, line: 164, column: 1)
!6132 = distinct !DISubprogram(name: "free_vn_table", scope: !3, file: !3, line: 3046, type: !6133, scopeLine: 3047, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!6133 = !DISubroutineType(types: !6134)
!6134 = !{null, !3016}
!6135 = !DILocalVariable(name: "table", arg: 1, scope: !6132, file: !3, line: 3046, type: !3016)
!6136 = !DILocation(line: 3046, column: 28, scope: !6132)
!6137 = !DILocation(line: 3048, column: 16, scope: !6132)
!6138 = !DILocation(line: 3048, column: 23, scope: !6132)
!6139 = !DILocation(line: 3048, column: 3, scope: !6132)
!6140 = !DILocation(line: 3049, column: 16, scope: !6132)
!6141 = !DILocation(line: 3049, column: 23, scope: !6132)
!6142 = !DILocation(line: 3049, column: 3, scope: !6132)
!6143 = !DILocation(line: 3050, column: 16, scope: !6132)
!6144 = !DILocation(line: 3050, column: 23, scope: !6132)
!6145 = !DILocation(line: 3050, column: 3, scope: !6132)
!6146 = !DILocation(line: 3051, column: 3, scope: !6132)
!6147 = !DILocation(line: 3052, column: 20, scope: !6132)
!6148 = !DILocation(line: 3052, column: 27, scope: !6132)
!6149 = !DILocation(line: 3052, column: 3, scope: !6132)
!6150 = !DILocation(line: 3053, column: 20, scope: !6132)
!6151 = !DILocation(line: 3053, column: 27, scope: !6132)
!6152 = !DILocation(line: 3053, column: 3, scope: !6132)
!6153 = !DILocation(line: 3054, column: 1, scope: !6132)
!6154 = distinct !DISubprogram(name: "run_scc_vn", scope: !3, file: !3, line: 3199, type: !6155, scopeLine: 3200, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!6155 = !DISubroutineType(types: !6156)
!6156 = !{!1603, !1603}
!6157 = !DILocalVariable(name: "may_insert_arg", arg: 1, scope: !6154, file: !3, line: 3199, type: !1603)
!6158 = !DILocation(line: 3199, column: 18, scope: !6154)
!6159 = !DILocalVariable(name: "i", scope: !6154, file: !3, line: 3201, type: !1959)
!6160 = !DILocation(line: 3201, column: 10, scope: !6154)
!6161 = !DILocalVariable(name: "param", scope: !6154, file: !3, line: 3202, type: !1483)
!6162 = !DILocation(line: 3202, column: 8, scope: !6154)
!6163 = !DILocalVariable(name: "changed", scope: !6154, file: !3, line: 3203, type: !1603)
!6164 = !DILocation(line: 3203, column: 8, scope: !6154)
!6165 = !DILocation(line: 3205, column: 16, scope: !6154)
!6166 = !DILocation(line: 3205, column: 14, scope: !6154)
!6167 = !DILocation(line: 3207, column: 3, scope: !6154)
!6168 = !DILocation(line: 3208, column: 18, scope: !6154)
!6169 = !DILocation(line: 3208, column: 16, scope: !6154)
!6170 = !DILocation(line: 3210, column: 16, scope: !6171)
!6171 = distinct !DILexicalBlock(scope: !6154, file: !3, line: 3210, column: 3)
!6172 = !DILocation(line: 3210, column: 14, scope: !6171)
!6173 = !DILocation(line: 3210, column: 8, scope: !6171)
!6174 = !DILocation(line: 3211, column: 8, scope: !6175)
!6175 = distinct !DILexicalBlock(scope: !6171, file: !3, line: 3210, column: 3)
!6176 = !DILocation(line: 3210, column: 3, scope: !6171)
!6177 = !DILocation(line: 3214, column: 31, scope: !6178)
!6178 = distinct !DILexicalBlock(scope: !6179, file: !3, line: 3214, column: 11)
!6179 = distinct !DILexicalBlock(scope: !6175, file: !3, line: 3213, column: 5)
!6180 = !DILocation(line: 3214, column: 37, scope: !6178)
!6181 = !DILocation(line: 3214, column: 11, scope: !6178)
!6182 = !DILocation(line: 3214, column: 44, scope: !6178)
!6183 = !DILocation(line: 3214, column: 11, scope: !6179)
!6184 = !DILocalVariable(name: "def", scope: !6185, file: !3, line: 3216, type: !1483)
!6185 = distinct !DILexicalBlock(scope: !6178, file: !3, line: 3215, column: 2)
!6186 = !DILocation(line: 3216, column: 9, scope: !6185)
!6187 = !DILocation(line: 3216, column: 35, scope: !6185)
!6188 = !DILocation(line: 3216, column: 41, scope: !6185)
!6189 = !DILocation(line: 3216, column: 15, scope: !6185)
!6190 = !DILocation(line: 3217, column: 28, scope: !6185)
!6191 = !DILocation(line: 3217, column: 13, scope: !6185)
!6192 = !DILocation(line: 3217, column: 4, scope: !6185)
!6193 = !DILocation(line: 3217, column: 19, scope: !6185)
!6194 = !DILocation(line: 3217, column: 26, scope: !6185)
!6195 = !DILocation(line: 3218, column: 2, scope: !6185)
!6196 = !DILocation(line: 3219, column: 5, scope: !6179)
!6197 = !DILocation(line: 3212, column: 16, scope: !6175)
!6198 = !DILocation(line: 3212, column: 14, scope: !6175)
!6199 = !DILocation(line: 3210, column: 3, scope: !6175)
!6200 = distinct !{!6200, !6176, !6201}
!6201 = !DILocation(line: 3219, column: 5, scope: !6171)
!6202 = !DILocation(line: 3221, column: 10, scope: !6203)
!6203 = distinct !DILexicalBlock(scope: !6154, file: !3, line: 3221, column: 3)
!6204 = !DILocation(line: 3221, column: 8, scope: !6203)
!6205 = !DILocation(line: 3221, column: 15, scope: !6206)
!6206 = distinct !DILexicalBlock(scope: !6203, file: !3, line: 3221, column: 3)
!6207 = !DILocation(line: 3221, column: 19, scope: !6206)
!6208 = !DILocation(line: 3221, column: 17, scope: !6206)
!6209 = !DILocation(line: 3221, column: 3, scope: !6203)
!6210 = !DILocalVariable(name: "name", scope: !6211, file: !3, line: 3223, type: !1483)
!6211 = distinct !DILexicalBlock(scope: !6206, file: !3, line: 3222, column: 5)
!6212 = !DILocation(line: 3223, column: 12, scope: !6211)
!6213 = !DILocation(line: 3223, column: 19, scope: !6211)
!6214 = !DILocation(line: 3224, column: 11, scope: !6215)
!6215 = distinct !DILexicalBlock(scope: !6211, file: !3, line: 3224, column: 11)
!6216 = !DILocation(line: 3225, column: 4, scope: !6215)
!6217 = !DILocation(line: 3225, column: 16, scope: !6215)
!6218 = !DILocation(line: 3225, column: 7, scope: !6215)
!6219 = !DILocation(line: 3225, column: 23, scope: !6215)
!6220 = !DILocation(line: 3225, column: 31, scope: !6215)
!6221 = !DILocation(line: 3226, column: 4, scope: !6215)
!6222 = !DILocation(line: 3226, column: 23, scope: !6215)
!6223 = !DILocation(line: 3226, column: 8, scope: !6215)
!6224 = !DILocation(line: 3224, column: 11, scope: !6211)
!6225 = !DILocation(line: 3227, column: 12, scope: !6226)
!6226 = distinct !DILexicalBlock(scope: !6215, file: !3, line: 3227, column: 6)
!6227 = !DILocation(line: 3227, column: 7, scope: !6226)
!6228 = !DILocation(line: 3227, column: 6, scope: !6215)
!6229 = !DILocation(line: 3229, column: 6, scope: !6230)
!6230 = distinct !DILexicalBlock(scope: !6226, file: !3, line: 3228, column: 4)
!6231 = !DILocation(line: 3230, column: 17, scope: !6230)
!6232 = !DILocation(line: 3231, column: 6, scope: !6230)
!6233 = !DILocation(line: 3227, column: 16, scope: !6226)
!6234 = !DILocation(line: 3233, column: 5, scope: !6211)
!6235 = !DILocation(line: 3221, column: 34, scope: !6206)
!6236 = !DILocation(line: 3221, column: 3, scope: !6206)
!6237 = distinct !{!6237, !6209, !6238}
!6238 = !DILocation(line: 3233, column: 5, scope: !6203)
!6239 = !DILocation(line: 3237, column: 10, scope: !6240)
!6240 = distinct !DILexicalBlock(scope: !6154, file: !3, line: 3237, column: 3)
!6241 = !DILocation(line: 3237, column: 8, scope: !6240)
!6242 = !DILocation(line: 3237, column: 15, scope: !6243)
!6243 = distinct !DILexicalBlock(scope: !6240, file: !3, line: 3237, column: 3)
!6244 = !DILocation(line: 3237, column: 19, scope: !6243)
!6245 = !DILocation(line: 3237, column: 17, scope: !6243)
!6246 = !DILocation(line: 3237, column: 3, scope: !6240)
!6247 = !DILocalVariable(name: "name", scope: !6248, file: !3, line: 3239, type: !1483)
!6248 = distinct !DILexicalBlock(scope: !6243, file: !3, line: 3238, column: 5)
!6249 = !DILocation(line: 3239, column: 12, scope: !6248)
!6250 = !DILocation(line: 3239, column: 19, scope: !6248)
!6251 = !DILocalVariable(name: "info", scope: !6248, file: !3, line: 3240, type: !2920)
!6252 = !DILocation(line: 3240, column: 20, scope: !6248)
!6253 = !DILocation(line: 3241, column: 12, scope: !6254)
!6254 = distinct !DILexicalBlock(scope: !6248, file: !3, line: 3241, column: 11)
!6255 = !DILocation(line: 3241, column: 11, scope: !6248)
!6256 = !DILocation(line: 3242, column: 2, scope: !6254)
!6257 = !DILocation(line: 3243, column: 23, scope: !6248)
!6258 = !DILocation(line: 3243, column: 14, scope: !6248)
!6259 = !DILocation(line: 3243, column: 12, scope: !6248)
!6260 = !DILocation(line: 3244, column: 11, scope: !6261)
!6261 = distinct !DILexicalBlock(scope: !6248, file: !3, line: 3244, column: 11)
!6262 = !DILocation(line: 3244, column: 17, scope: !6261)
!6263 = !DILocation(line: 3244, column: 27, scope: !6261)
!6264 = !DILocation(line: 3244, column: 24, scope: !6261)
!6265 = !DILocation(line: 3245, column: 4, scope: !6261)
!6266 = !DILocation(line: 3245, column: 7, scope: !6261)
!6267 = !DILocation(line: 3245, column: 13, scope: !6261)
!6268 = !DILocation(line: 3245, column: 23, scope: !6261)
!6269 = !DILocation(line: 3245, column: 20, scope: !6261)
!6270 = !DILocation(line: 3244, column: 11, scope: !6248)
!6271 = !DILocation(line: 3246, column: 19, scope: !6261)
!6272 = !DILocation(line: 3246, column: 2, scope: !6261)
!6273 = !DILocation(line: 3246, column: 8, scope: !6261)
!6274 = !DILocation(line: 3246, column: 17, scope: !6261)
!6275 = !DILocation(line: 3247, column: 41, scope: !6276)
!6276 = distinct !DILexicalBlock(scope: !6261, file: !3, line: 3247, column: 16)
!6277 = !DILocation(line: 3247, column: 47, scope: !6276)
!6278 = !DILocation(line: 3247, column: 16, scope: !6276)
!6279 = !DILocation(line: 3247, column: 16, scope: !6261)
!6280 = !DILocation(line: 3248, column: 51, scope: !6276)
!6281 = !DILocation(line: 3248, column: 57, scope: !6276)
!6282 = !DILocation(line: 3248, column: 19, scope: !6276)
!6283 = !DILocation(line: 3248, column: 2, scope: !6276)
!6284 = !DILocation(line: 3248, column: 8, scope: !6276)
!6285 = !DILocation(line: 3248, column: 17, scope: !6276)
!6286 = !DILocation(line: 3249, column: 5, scope: !6248)
!6287 = !DILocation(line: 3237, column: 34, scope: !6243)
!6288 = !DILocation(line: 3237, column: 3, scope: !6243)
!6289 = distinct !{!6289, !6246, !6290}
!6290 = !DILocation(line: 3249, column: 5, scope: !6240)
!6291 = !DILocation(line: 3252, column: 3, scope: !6154)
!6292 = !DILocation(line: 3252, column: 10, scope: !6154)
!6293 = !DILocation(line: 3254, column: 15, scope: !6294)
!6294 = distinct !DILexicalBlock(scope: !6154, file: !3, line: 3253, column: 5)
!6295 = !DILocation(line: 3255, column: 14, scope: !6296)
!6296 = distinct !DILexicalBlock(scope: !6294, file: !3, line: 3255, column: 7)
!6297 = !DILocation(line: 3255, column: 12, scope: !6296)
!6298 = !DILocation(line: 3255, column: 19, scope: !6299)
!6299 = distinct !DILexicalBlock(scope: !6296, file: !3, line: 3255, column: 7)
!6300 = !DILocation(line: 3255, column: 23, scope: !6299)
!6301 = !DILocation(line: 3255, column: 21, scope: !6299)
!6302 = !DILocation(line: 3255, column: 7, scope: !6296)
!6303 = !DILocalVariable(name: "name", scope: !6304, file: !3, line: 3257, type: !1483)
!6304 = distinct !DILexicalBlock(scope: !6299, file: !3, line: 3256, column: 2)
!6305 = !DILocation(line: 3257, column: 9, scope: !6304)
!6306 = !DILocation(line: 3257, column: 16, scope: !6304)
!6307 = !DILocalVariable(name: "info", scope: !6304, file: !3, line: 3258, type: !2920)
!6308 = !DILocation(line: 3258, column: 17, scope: !6304)
!6309 = !DILocation(line: 3259, column: 9, scope: !6310)
!6310 = distinct !DILexicalBlock(scope: !6304, file: !3, line: 3259, column: 8)
!6311 = !DILocation(line: 3259, column: 8, scope: !6304)
!6312 = !DILocation(line: 3260, column: 6, scope: !6310)
!6313 = !DILocation(line: 3261, column: 20, scope: !6304)
!6314 = !DILocation(line: 3261, column: 11, scope: !6304)
!6315 = !DILocation(line: 3261, column: 9, scope: !6304)
!6316 = !DILocation(line: 3262, column: 8, scope: !6317)
!6317 = distinct !DILexicalBlock(scope: !6304, file: !3, line: 3262, column: 8)
!6318 = !DILocation(line: 3262, column: 33, scope: !6317)
!6319 = !DILocation(line: 3263, column: 8, scope: !6317)
!6320 = !DILocation(line: 3263, column: 11, scope: !6317)
!6321 = !DILocation(line: 3263, column: 17, scope: !6317)
!6322 = !DILocation(line: 3263, column: 27, scope: !6317)
!6323 = !DILocation(line: 3263, column: 24, scope: !6317)
!6324 = !DILocation(line: 3264, column: 8, scope: !6317)
!6325 = !DILocation(line: 3264, column: 11, scope: !6317)
!6326 = !DILocation(line: 3264, column: 17, scope: !6317)
!6327 = !DILocation(line: 3264, column: 38, scope: !6317)
!6328 = !DILocation(line: 3264, column: 44, scope: !6317)
!6329 = !DILocation(line: 3264, column: 29, scope: !6317)
!6330 = !DILocation(line: 3264, column: 53, scope: !6317)
!6331 = !DILocation(line: 3264, column: 26, scope: !6317)
!6332 = !DILocation(line: 3262, column: 8, scope: !6304)
!6333 = !DILocation(line: 3266, column: 16, scope: !6334)
!6334 = distinct !DILexicalBlock(scope: !6317, file: !3, line: 3265, column: 6)
!6335 = !DILocation(line: 3267, column: 34, scope: !6334)
!6336 = !DILocation(line: 3267, column: 40, scope: !6334)
!6337 = !DILocation(line: 3267, column: 25, scope: !6334)
!6338 = !DILocation(line: 3267, column: 49, scope: !6334)
!6339 = !DILocation(line: 3267, column: 8, scope: !6334)
!6340 = !DILocation(line: 3267, column: 14, scope: !6334)
!6341 = !DILocation(line: 3267, column: 23, scope: !6334)
!6342 = !DILocation(line: 3268, column: 6, scope: !6334)
!6343 = !DILocation(line: 3269, column: 2, scope: !6304)
!6344 = !DILocation(line: 3255, column: 38, scope: !6299)
!6345 = !DILocation(line: 3255, column: 7, scope: !6299)
!6346 = distinct !{!6346, !6302, !6347}
!6347 = !DILocation(line: 3269, column: 2, scope: !6296)
!6348 = distinct !{!6348, !6291, !6349}
!6349 = !DILocation(line: 3270, column: 5, scope: !6154)
!6350 = !DILocation(line: 3272, column: 3, scope: !6154)
!6351 = !DILocation(line: 3274, column: 7, scope: !6352)
!6352 = distinct !DILexicalBlock(scope: !6154, file: !3, line: 3274, column: 7)
!6353 = !DILocation(line: 3274, column: 17, scope: !6352)
!6354 = !DILocation(line: 3274, column: 21, scope: !6352)
!6355 = !DILocation(line: 3274, column: 32, scope: !6352)
!6356 = !DILocation(line: 3274, column: 7, scope: !6154)
!6357 = !DILocation(line: 3276, column: 16, scope: !6358)
!6358 = distinct !DILexicalBlock(scope: !6352, file: !3, line: 3275, column: 5)
!6359 = !DILocation(line: 3276, column: 7, scope: !6358)
!6360 = !DILocation(line: 3277, column: 14, scope: !6361)
!6361 = distinct !DILexicalBlock(scope: !6358, file: !3, line: 3277, column: 7)
!6362 = !DILocation(line: 3277, column: 12, scope: !6361)
!6363 = !DILocation(line: 3277, column: 19, scope: !6364)
!6364 = distinct !DILexicalBlock(scope: !6361, file: !3, line: 3277, column: 7)
!6365 = !DILocation(line: 3277, column: 23, scope: !6364)
!6366 = !DILocation(line: 3277, column: 21, scope: !6364)
!6367 = !DILocation(line: 3277, column: 7, scope: !6361)
!6368 = !DILocalVariable(name: "name", scope: !6369, file: !3, line: 3279, type: !1483)
!6369 = distinct !DILexicalBlock(scope: !6364, file: !3, line: 3278, column: 2)
!6370 = !DILocation(line: 3279, column: 9, scope: !6369)
!6371 = !DILocation(line: 3279, column: 16, scope: !6369)
!6372 = !DILocation(line: 3280, column: 8, scope: !6373)
!6373 = distinct !DILexicalBlock(scope: !6369, file: !3, line: 3280, column: 8)
!6374 = !DILocation(line: 3281, column: 8, scope: !6373)
!6375 = !DILocation(line: 3281, column: 20, scope: !6373)
!6376 = !DILocation(line: 3281, column: 11, scope: !6373)
!6377 = !DILocation(line: 3281, column: 27, scope: !6373)
!6378 = !DILocation(line: 3282, column: 8, scope: !6373)
!6379 = !DILocation(line: 3282, column: 11, scope: !6373)
!6380 = !DILocation(line: 3282, column: 29, scope: !6373)
!6381 = !DILocation(line: 3282, column: 26, scope: !6373)
!6382 = !DILocation(line: 3280, column: 8, scope: !6369)
!6383 = !DILocation(line: 3284, column: 28, scope: !6384)
!6384 = distinct !DILexicalBlock(scope: !6373, file: !3, line: 3283, column: 6)
!6385 = !DILocation(line: 3284, column: 39, scope: !6384)
!6386 = !DILocation(line: 3284, column: 8, scope: !6384)
!6387 = !DILocation(line: 3285, column: 17, scope: !6384)
!6388 = !DILocation(line: 3285, column: 8, scope: !6384)
!6389 = !DILocation(line: 3286, column: 28, scope: !6384)
!6390 = !DILocation(line: 3286, column: 39, scope: !6384)
!6391 = !DILocation(line: 3286, column: 8, scope: !6384)
!6392 = !DILocation(line: 3287, column: 17, scope: !6384)
!6393 = !DILocation(line: 3287, column: 8, scope: !6384)
!6394 = !DILocation(line: 3288, column: 6, scope: !6384)
!6395 = !DILocation(line: 3289, column: 2, scope: !6369)
!6396 = !DILocation(line: 3277, column: 39, scope: !6364)
!6397 = !DILocation(line: 3277, column: 7, scope: !6364)
!6398 = distinct !{!6398, !6367, !6399}
!6399 = !DILocation(line: 3289, column: 2, scope: !6361)
!6400 = !DILocation(line: 3290, column: 5, scope: !6358)
!6401 = !DILocation(line: 3292, column: 14, scope: !6154)
!6402 = !DILocation(line: 3293, column: 3, scope: !6154)
!6403 = !DILocation(line: 3294, column: 1, scope: !6154)
!6404 = distinct !DISubprogram(name: "init_scc_vn", scope: !3, file: !3, line: 3057, type: !6057, scopeLine: 3058, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!6405 = !DILocalVariable(name: "i", scope: !6404, file: !3, line: 3059, type: !1959)
!6406 = !DILocation(line: 3059, column: 10, scope: !6404)
!6407 = !DILocalVariable(name: "j", scope: !6404, file: !3, line: 3060, type: !1580)
!6408 = !DILocation(line: 3060, column: 7, scope: !6404)
!6409 = !DILocalVariable(name: "rpo_numbers_temp", scope: !6404, file: !3, line: 3061, type: !2929)
!6410 = !DILocation(line: 3061, column: 8, scope: !6404)
!6411 = !DILocation(line: 3063, column: 3, scope: !6404)
!6412 = !DILocation(line: 3064, column: 12, scope: !6404)
!6413 = !DILocation(line: 3065, column: 26, scope: !6404)
!6414 = !DILocation(line: 3065, column: 24, scope: !6404)
!6415 = !DILocation(line: 3068, column: 24, scope: !6404)
!6416 = !DILocation(line: 3068, column: 22, scope: !6404)
!6417 = !DILocation(line: 3070, column: 16, scope: !6404)
!6418 = !DILocation(line: 3071, column: 17, scope: !6404)
!6419 = !DILocation(line: 3073, column: 22, scope: !6404)
!6420 = !DILocation(line: 3073, column: 20, scope: !6404)
!6421 = !DILocation(line: 3076, column: 3, scope: !6404)
!6422 = !DILocation(line: 3077, column: 3, scope: !6404)
!6423 = !DILocation(line: 3079, column: 25, scope: !6404)
!6424 = !DILocation(line: 3080, column: 28, scope: !6404)
!6425 = !DILocation(line: 3081, column: 17, scope: !6404)
!6426 = !DILocation(line: 3081, column: 15, scope: !6404)
!6427 = !DILocation(line: 3082, column: 22, scope: !6404)
!6428 = !DILocation(line: 3082, column: 20, scope: !6404)
!6429 = !DILocation(line: 3083, column: 41, scope: !6404)
!6430 = !DILocation(line: 3083, column: 3, scope: !6404)
!6431 = !DILocation(line: 3088, column: 10, scope: !6432)
!6432 = distinct !DILexicalBlock(scope: !6404, file: !3, line: 3088, column: 3)
!6433 = !DILocation(line: 3088, column: 8, scope: !6432)
!6434 = !DILocation(line: 3088, column: 15, scope: !6435)
!6435 = distinct !DILexicalBlock(scope: !6432, file: !3, line: 3088, column: 3)
!6436 = !DILocation(line: 3088, column: 19, scope: !6435)
!6437 = !DILocation(line: 3088, column: 34, scope: !6435)
!6438 = !DILocation(line: 3088, column: 17, scope: !6435)
!6439 = !DILocation(line: 3088, column: 3, scope: !6432)
!6440 = !DILocation(line: 3089, column: 40, scope: !6435)
!6441 = !DILocation(line: 3089, column: 5, scope: !6435)
!6442 = !DILocation(line: 3089, column: 17, scope: !6435)
!6443 = !DILocation(line: 3089, column: 34, scope: !6435)
!6444 = !DILocation(line: 3089, column: 38, scope: !6435)
!6445 = !DILocation(line: 3088, column: 55, scope: !6435)
!6446 = !DILocation(line: 3088, column: 3, scope: !6435)
!6447 = distinct !{!6447, !6439, !6448}
!6448 = !DILocation(line: 3089, column: 40, scope: !6432)
!6449 = !DILocation(line: 3091, column: 3, scope: !6404)
!6450 = !DILocation(line: 3093, column: 32, scope: !6404)
!6451 = !DILocation(line: 3093, column: 12, scope: !6404)
!6452 = !DILocation(line: 3093, column: 10, scope: !6404)
!6453 = !DILocation(line: 3097, column: 10, scope: !6454)
!6454 = distinct !DILexicalBlock(scope: !6404, file: !3, line: 3097, column: 3)
!6455 = !DILocation(line: 3097, column: 8, scope: !6454)
!6456 = !DILocation(line: 3097, column: 15, scope: !6457)
!6457 = distinct !DILexicalBlock(scope: !6454, file: !3, line: 3097, column: 3)
!6458 = !DILocation(line: 3097, column: 19, scope: !6457)
!6459 = !DILocation(line: 3097, column: 17, scope: !6457)
!6460 = !DILocation(line: 3097, column: 3, scope: !6454)
!6461 = !DILocalVariable(name: "name", scope: !6462, file: !3, line: 3099, type: !1483)
!6462 = distinct !DILexicalBlock(scope: !6457, file: !3, line: 3098, column: 5)
!6463 = !DILocation(line: 3099, column: 12, scope: !6462)
!6464 = !DILocation(line: 3099, column: 19, scope: !6462)
!6465 = !DILocation(line: 3100, column: 11, scope: !6466)
!6466 = distinct !DILexicalBlock(scope: !6462, file: !3, line: 3100, column: 11)
!6467 = !DILocation(line: 3100, column: 11, scope: !6462)
!6468 = !DILocation(line: 3102, column: 33, scope: !6469)
!6469 = distinct !DILexicalBlock(scope: !6466, file: !3, line: 3101, column: 2)
!6470 = !DILocation(line: 3102, column: 17, scope: !6469)
!6471 = !DILocation(line: 3102, column: 4, scope: !6469)
!6472 = !DILocation(line: 3102, column: 24, scope: !6469)
!6473 = !DILocation(line: 3102, column: 31, scope: !6469)
!6474 = !DILocation(line: 3103, column: 13, scope: !6469)
!6475 = !DILocation(line: 3103, column: 4, scope: !6469)
!6476 = !DILocation(line: 3103, column: 20, scope: !6469)
!6477 = !DILocation(line: 3103, column: 25, scope: !6469)
!6478 = !DILocation(line: 3104, column: 13, scope: !6469)
!6479 = !DILocation(line: 3104, column: 4, scope: !6469)
!6480 = !DILocation(line: 3104, column: 20, scope: !6469)
!6481 = !DILocation(line: 3104, column: 29, scope: !6469)
!6482 = !DILocation(line: 3105, column: 2, scope: !6469)
!6483 = !DILocation(line: 3106, column: 5, scope: !6462)
!6484 = !DILocation(line: 3097, column: 35, scope: !6457)
!6485 = !DILocation(line: 3097, column: 3, scope: !6457)
!6486 = distinct !{!6486, !6460, !6487}
!6487 = !DILocation(line: 3106, column: 5, scope: !6454)
!6488 = !DILocation(line: 3108, column: 3, scope: !6404)
!6489 = !DILocation(line: 3111, column: 16, scope: !6404)
!6490 = !DILocation(line: 3111, column: 14, scope: !6404)
!6491 = !DILocation(line: 3112, column: 22, scope: !6404)
!6492 = !DILocation(line: 3112, column: 3, scope: !6404)
!6493 = !DILocation(line: 3113, column: 21, scope: !6404)
!6494 = !DILocation(line: 3113, column: 19, scope: !6404)
!6495 = !DILocation(line: 3114, column: 22, scope: !6404)
!6496 = !DILocation(line: 3114, column: 3, scope: !6404)
!6497 = !DILocation(line: 3115, column: 1, scope: !6404)
!6498 = distinct !DISubprogram(name: "has_zero_uses", scope: !6499, file: !6499, line: 332, type: !6500, scopeLine: 333, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!6499 = !DIFile(filename: "./tree-flow-inline.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!6500 = !DISubroutineType(types: !6501)
!6501 = !{!1603, !6502}
!6502 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_tree", file: !1484, line: 59, baseType: !6503)
!6503 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6504, size: 64)
!6504 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1486)
!6505 = !DILocalVariable(name: "var", arg: 1, scope: !6498, file: !6499, line: 332, type: !6502)
!6506 = !DILocation(line: 332, column: 27, scope: !6498)
!6507 = !DILocalVariable(name: "ptr", scope: !6498, file: !6499, line: 334, type: !6508)
!6508 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !6509)
!6509 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6510, size: 64)
!6510 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2981)
!6511 = !DILocation(line: 334, column: 34, scope: !6498)
!6512 = !DILocation(line: 334, column: 42, scope: !6498)
!6513 = !DILocation(line: 337, column: 7, scope: !6514)
!6514 = distinct !DILexicalBlock(scope: !6498, file: !6499, line: 337, column: 7)
!6515 = !DILocation(line: 337, column: 14, scope: !6514)
!6516 = !DILocation(line: 337, column: 19, scope: !6514)
!6517 = !DILocation(line: 337, column: 11, scope: !6514)
!6518 = !DILocation(line: 337, column: 7, scope: !6498)
!6519 = !DILocation(line: 338, column: 5, scope: !6514)
!6520 = !DILocation(line: 342, column: 8, scope: !6521)
!6521 = distinct !DILexicalBlock(scope: !6498, file: !6499, line: 342, column: 7)
!6522 = !DILocation(line: 342, column: 7, scope: !6498)
!6523 = !DILocation(line: 343, column: 5, scope: !6521)
!6524 = !DILocation(line: 345, column: 27, scope: !6498)
!6525 = !DILocation(line: 345, column: 10, scope: !6498)
!6526 = !DILocation(line: 345, column: 3, scope: !6498)
!6527 = !DILocation(line: 346, column: 1, scope: !6498)
!6528 = distinct !DISubprogram(name: "DFS", scope: !3, file: !3, line: 2930, type: !6529, scopeLine: 2931, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!6529 = !DISubroutineType(types: !6530)
!6530 = !{!1603, !1483}
!6531 = !DILocalVariable(name: "name", arg: 1, scope: !6528, file: !3, line: 2930, type: !1483)
!6532 = !DILocation(line: 2930, column: 11, scope: !6528)
!6533 = !DILocalVariable(name: "itervec", scope: !6528, file: !3, line: 2932, type: !2985)
!6534 = !DILocation(line: 2932, column: 27, scope: !6528)
!6535 = !DILocalVariable(name: "namevec", scope: !6528, file: !3, line: 2933, type: !2970)
!6536 = !DILocation(line: 2933, column: 20, scope: !6528)
!6537 = !DILocalVariable(name: "usep", scope: !6528, file: !3, line: 2934, type: !2979)
!6538 = !DILocation(line: 2934, column: 17, scope: !6528)
!6539 = !DILocalVariable(name: "defstmt", scope: !6528, file: !3, line: 2935, type: !1814)
!6540 = !DILocation(line: 2935, column: 10, scope: !6528)
!6541 = !DILocalVariable(name: "use", scope: !6528, file: !3, line: 2936, type: !1483)
!6542 = !DILocation(line: 2936, column: 8, scope: !6528)
!6543 = !DILocalVariable(name: "iter", scope: !6528, file: !3, line: 2937, type: !2997)
!6544 = !DILocation(line: 2937, column: 15, scope: !6528)
!6545 = !DILocation(line: 2937, column: 3, scope: !6528)
!6546 = !DILabel(scope: !6528, name: "start_over", file: !3, line: 2939)
!6547 = !DILocation(line: 2939, column: 1, scope: !6528)
!6548 = !DILocation(line: 2941, column: 40, scope: !6528)
!6549 = !DILocation(line: 2941, column: 12, scope: !6528)
!6550 = !DILocation(line: 2941, column: 3, scope: !6528)
!6551 = !DILocation(line: 2941, column: 19, scope: !6528)
!6552 = !DILocation(line: 2941, column: 26, scope: !6528)
!6553 = !DILocation(line: 2942, column: 12, scope: !6528)
!6554 = !DILocation(line: 2942, column: 3, scope: !6528)
!6555 = !DILocation(line: 2942, column: 19, scope: !6528)
!6556 = !DILocation(line: 2942, column: 27, scope: !6528)
!6557 = !DILocation(line: 2943, column: 34, scope: !6528)
!6558 = !DILocation(line: 2943, column: 25, scope: !6528)
!6559 = !DILocation(line: 2943, column: 41, scope: !6528)
!6560 = !DILocation(line: 2943, column: 12, scope: !6528)
!6561 = !DILocation(line: 2943, column: 3, scope: !6528)
!6562 = !DILocation(line: 2943, column: 19, scope: !6528)
!6563 = !DILocation(line: 2943, column: 23, scope: !6528)
!6564 = !DILocation(line: 2945, column: 3, scope: !6528)
!6565 = !DILocation(line: 2946, column: 12, scope: !6528)
!6566 = !DILocation(line: 2946, column: 3, scope: !6528)
!6567 = !DILocation(line: 2946, column: 19, scope: !6528)
!6568 = !DILocation(line: 2946, column: 31, scope: !6528)
!6569 = !DILocation(line: 2947, column: 13, scope: !6528)
!6570 = !DILocation(line: 2947, column: 11, scope: !6528)
!6571 = !DILocation(line: 2950, column: 22, scope: !6572)
!6572 = distinct !DILexicalBlock(scope: !6528, file: !3, line: 2950, column: 7)
!6573 = !DILocation(line: 2950, column: 8, scope: !6572)
!6574 = !DILocation(line: 2950, column: 7, scope: !6528)
!6575 = !DILocation(line: 2953, column: 24, scope: !6576)
!6576 = distinct !DILexicalBlock(scope: !6577, file: !3, line: 2953, column: 11)
!6577 = distinct !DILexicalBlock(scope: !6572, file: !3, line: 2951, column: 5)
!6578 = !DILocation(line: 2953, column: 11, scope: !6576)
!6579 = !DILocation(line: 2953, column: 33, scope: !6576)
!6580 = !DILocation(line: 2953, column: 11, scope: !6577)
!6581 = !DILocation(line: 2954, column: 37, scope: !6576)
!6582 = !DILocation(line: 2954, column: 9, scope: !6576)
!6583 = !DILocation(line: 2954, column: 7, scope: !6576)
!6584 = !DILocation(line: 2954, column: 2, scope: !6576)
!6585 = !DILocation(line: 2956, column: 34, scope: !6576)
!6586 = !DILocation(line: 2956, column: 9, scope: !6576)
!6587 = !DILocation(line: 2956, column: 7, scope: !6576)
!6588 = !DILocation(line: 2957, column: 5, scope: !6577)
!6589 = !DILocation(line: 2959, column: 5, scope: !6572)
!6590 = !DILocation(line: 2961, column: 3, scope: !6528)
!6591 = !DILocation(line: 2965, column: 11, scope: !6592)
!6592 = distinct !DILexicalBlock(scope: !6593, file: !3, line: 2965, column: 11)
!6593 = distinct !DILexicalBlock(scope: !6528, file: !3, line: 2962, column: 5)
!6594 = !DILocation(line: 2965, column: 11, scope: !6593)
!6595 = !DILocation(line: 2968, column: 17, scope: !6596)
!6596 = distinct !DILexicalBlock(scope: !6597, file: !3, line: 2968, column: 8)
!6597 = distinct !DILexicalBlock(scope: !6592, file: !3, line: 2966, column: 2)
!6598 = !DILocation(line: 2968, column: 8, scope: !6596)
!6599 = !DILocation(line: 2968, column: 24, scope: !6596)
!6600 = !DILocation(line: 2968, column: 40, scope: !6596)
!6601 = !DILocation(line: 2968, column: 31, scope: !6596)
!6602 = !DILocation(line: 2968, column: 47, scope: !6596)
!6603 = !DILocation(line: 2968, column: 28, scope: !6596)
!6604 = !DILocation(line: 2968, column: 8, scope: !6597)
!6605 = !DILocation(line: 2969, column: 45, scope: !6606)
!6606 = distinct !DILexicalBlock(scope: !6596, file: !3, line: 2969, column: 10)
!6607 = !DILocation(line: 2969, column: 11, scope: !6606)
!6608 = !DILocation(line: 2969, column: 10, scope: !6596)
!6609 = !DILocation(line: 2971, column: 3, scope: !6610)
!6610 = distinct !DILexicalBlock(scope: !6606, file: !3, line: 2970, column: 8)
!6611 = !DILocation(line: 2972, column: 3, scope: !6610)
!6612 = !DILocation(line: 2973, column: 3, scope: !6610)
!6613 = !DILocation(line: 2969, column: 49, scope: !6606)
!6614 = !DILocation(line: 2977, column: 8, scope: !6615)
!6615 = distinct !DILexicalBlock(scope: !6597, file: !3, line: 2977, column: 8)
!6616 = !DILocation(line: 2977, column: 8, scope: !6597)
!6617 = !DILocation(line: 2979, column: 8, scope: !6618)
!6618 = distinct !DILexicalBlock(scope: !6615, file: !3, line: 2978, column: 6)
!6619 = !DILocation(line: 2980, column: 8, scope: !6618)
!6620 = !DILocation(line: 2981, column: 8, scope: !6618)
!6621 = !DILocation(line: 2985, column: 10, scope: !6597)
!6622 = !DILocation(line: 2985, column: 8, scope: !6597)
!6623 = !DILocation(line: 2986, column: 11, scope: !6597)
!6624 = !DILocation(line: 2986, column: 9, scope: !6597)
!6625 = !DILocation(line: 2987, column: 4, scope: !6597)
!6626 = !DILocation(line: 2987, column: 19, scope: !6597)
!6627 = !DILocation(line: 2989, column: 4, scope: !6597)
!6628 = !DILocation(line: 2990, column: 4, scope: !6597)
!6629 = !DILocation(line: 2993, column: 13, scope: !6593)
!6630 = !DILocation(line: 2993, column: 11, scope: !6593)
!6631 = !DILocation(line: 2997, column: 11, scope: !6632)
!6632 = distinct !DILexicalBlock(scope: !6593, file: !3, line: 2997, column: 11)
!6633 = !DILocation(line: 2997, column: 27, scope: !6632)
!6634 = !DILocation(line: 2997, column: 11, scope: !6593)
!6635 = !DILocation(line: 2999, column: 20, scope: !6636)
!6636 = distinct !DILexicalBlock(scope: !6637, file: !3, line: 2999, column: 8)
!6637 = distinct !DILexicalBlock(scope: !6632, file: !3, line: 2998, column: 2)
!6638 = !DILocation(line: 2999, column: 11, scope: !6636)
!6639 = !DILocation(line: 2999, column: 26, scope: !6636)
!6640 = !DILocation(line: 2999, column: 10, scope: !6636)
!6641 = !DILocation(line: 2999, column: 8, scope: !6637)
!6642 = !DILocation(line: 3003, column: 8, scope: !6643)
!6643 = distinct !DILexicalBlock(scope: !6636, file: !3, line: 3000, column: 6)
!6644 = !DILocation(line: 3004, column: 8, scope: !6643)
!6645 = !DILocation(line: 3005, column: 15, scope: !6643)
!6646 = !DILocation(line: 3005, column: 13, scope: !6643)
!6647 = !DILocation(line: 3006, column: 8, scope: !6643)
!6648 = !DILabel(scope: !6643, name: "continue_walking", file: !3, line: 3008)
!6649 = !DILocation(line: 3008, column: 1, scope: !6643)
!6650 = !DILocation(line: 3009, column: 30, scope: !6643)
!6651 = !DILocation(line: 3009, column: 17, scope: !6643)
!6652 = !DILocation(line: 3009, column: 8, scope: !6643)
!6653 = !DILocation(line: 3009, column: 24, scope: !6643)
!6654 = !DILocation(line: 3009, column: 28, scope: !6643)
!6655 = !DILocation(line: 3011, column: 6, scope: !6643)
!6656 = !DILocation(line: 3012, column: 17, scope: !6657)
!6657 = distinct !DILexicalBlock(scope: !6637, file: !3, line: 3012, column: 8)
!6658 = !DILocation(line: 3012, column: 8, scope: !6657)
!6659 = !DILocation(line: 3012, column: 23, scope: !6657)
!6660 = !DILocation(line: 3012, column: 41, scope: !6657)
!6661 = !DILocation(line: 3012, column: 32, scope: !6657)
!6662 = !DILocation(line: 3012, column: 48, scope: !6657)
!6663 = !DILocation(line: 3012, column: 30, scope: !6657)
!6664 = !DILocation(line: 3013, column: 8, scope: !6657)
!6665 = !DILocation(line: 3013, column: 20, scope: !6657)
!6666 = !DILocation(line: 3013, column: 11, scope: !6657)
!6667 = !DILocation(line: 3013, column: 26, scope: !6657)
!6668 = !DILocation(line: 3012, column: 8, scope: !6637)
!6669 = !DILocation(line: 3015, column: 30, scope: !6670)
!6670 = distinct !DILexicalBlock(scope: !6657, file: !3, line: 3014, column: 6)
!6671 = !DILocation(line: 3015, column: 17, scope: !6670)
!6672 = !DILocation(line: 3015, column: 8, scope: !6670)
!6673 = !DILocation(line: 3015, column: 24, scope: !6670)
!6674 = !DILocation(line: 3015, column: 28, scope: !6670)
!6675 = !DILocation(line: 3017, column: 6, scope: !6670)
!6676 = !DILocation(line: 3018, column: 2, scope: !6637)
!6677 = !DILocation(line: 3020, column: 14, scope: !6593)
!6678 = !DILocation(line: 3020, column: 12, scope: !6593)
!6679 = distinct !{!6679, !6590, !6680}
!6680 = !DILocation(line: 3021, column: 5, scope: !6528)
!6681 = !DILocation(line: 3022, column: 1, scope: !6528)
!6682 = distinct !DISubprogram(name: "set_hashtable_value_ids", scope: !3, file: !3, line: 3148, type: !6057, scopeLine: 3149, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!6683 = !DILocalVariable(name: "hi", scope: !6682, file: !3, line: 3150, type: !6684)
!6684 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_iterator", file: !2206, line: 98, baseType: !6685)
!6685 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2206, line: 93, size: 192, elements: !6686)
!6686 = !{!6687, !6688, !6689}
!6687 = !DIDerivedType(tag: DW_TAG_member, name: "htab", scope: !6685, file: !2206, line: 95, baseType: !2298, size: 64)
!6688 = !DIDerivedType(tag: DW_TAG_member, name: "slot", scope: !6685, file: !2206, line: 96, baseType: !2321, size: 64, offset: 64)
!6689 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !6685, file: !2206, line: 97, baseType: !2321, size: 64, offset: 128)
!6690 = !DILocation(line: 3150, column: 17, scope: !6682)
!6691 = !DILocalVariable(name: "vno", scope: !6682, file: !3, line: 3151, type: !2905)
!6692 = !DILocation(line: 3151, column: 16, scope: !6682)
!6693 = !DILocalVariable(name: "vr", scope: !6682, file: !3, line: 3152, type: !2890)
!6694 = !DILocation(line: 3152, column: 18, scope: !6682)
!6695 = !DILocalVariable(name: "vp", scope: !6682, file: !3, line: 3153, type: !2977)
!6696 = !DILocation(line: 3153, column: 12, scope: !6682)
!6697 = !DILocation(line: 3158, column: 3, scope: !6698)
!6698 = distinct !DILexicalBlock(scope: !6682, file: !3, line: 3158, column: 3)
!6699 = !DILocation(line: 3158, column: 3, scope: !6700)
!6700 = distinct !DILexicalBlock(scope: !6698, file: !3, line: 3158, column: 3)
!6701 = !DILocation(line: 3161, column: 11, scope: !6702)
!6702 = distinct !DILexicalBlock(scope: !6703, file: !3, line: 3161, column: 11)
!6703 = distinct !DILexicalBlock(scope: !6700, file: !3, line: 3160, column: 5)
!6704 = !DILocation(line: 3161, column: 16, scope: !6702)
!6705 = !DILocation(line: 3161, column: 11, scope: !6703)
!6706 = !DILocation(line: 3163, column: 8, scope: !6707)
!6707 = distinct !DILexicalBlock(scope: !6708, file: !3, line: 3163, column: 8)
!6708 = distinct !DILexicalBlock(scope: !6702, file: !3, line: 3162, column: 2)
!6709 = !DILocation(line: 3163, column: 32, scope: !6707)
!6710 = !DILocation(line: 3163, column: 8, scope: !6708)
!6711 = !DILocation(line: 3164, column: 31, scope: !6707)
!6712 = !DILocation(line: 3164, column: 36, scope: !6707)
!6713 = !DILocation(line: 3164, column: 22, scope: !6707)
!6714 = !DILocation(line: 3164, column: 45, scope: !6707)
!6715 = !DILocation(line: 3164, column: 6, scope: !6707)
!6716 = !DILocation(line: 3164, column: 11, scope: !6707)
!6717 = !DILocation(line: 3164, column: 20, scope: !6707)
!6718 = !DILocation(line: 3165, column: 38, scope: !6719)
!6719 = distinct !DILexicalBlock(scope: !6707, file: !3, line: 3165, column: 13)
!6720 = !DILocation(line: 3165, column: 43, scope: !6719)
!6721 = !DILocation(line: 3165, column: 13, scope: !6719)
!6722 = !DILocation(line: 3165, column: 13, scope: !6707)
!6723 = !DILocation(line: 3166, column: 54, scope: !6719)
!6724 = !DILocation(line: 3166, column: 59, scope: !6719)
!6725 = !DILocation(line: 3166, column: 22, scope: !6719)
!6726 = !DILocation(line: 3166, column: 6, scope: !6719)
!6727 = !DILocation(line: 3166, column: 11, scope: !6719)
!6728 = !DILocation(line: 3166, column: 20, scope: !6719)
!6729 = !DILocation(line: 3167, column: 2, scope: !6708)
!6730 = !DILocation(line: 3168, column: 5, scope: !6703)
!6731 = distinct !{!6731, !6697, !6732}
!6732 = !DILocation(line: 3168, column: 5, scope: !6698)
!6733 = !DILocation(line: 3170, column: 3, scope: !6734)
!6734 = distinct !DILexicalBlock(scope: !6682, file: !3, line: 3170, column: 3)
!6735 = !DILocation(line: 3170, column: 3, scope: !6736)
!6736 = distinct !DILexicalBlock(scope: !6734, file: !3, line: 3170, column: 3)
!6737 = !DILocation(line: 3173, column: 11, scope: !6738)
!6738 = distinct !DILexicalBlock(scope: !6739, file: !3, line: 3173, column: 11)
!6739 = distinct !DILexicalBlock(scope: !6736, file: !3, line: 3172, column: 5)
!6740 = !DILocation(line: 3173, column: 15, scope: !6738)
!6741 = !DILocation(line: 3173, column: 11, scope: !6739)
!6742 = !DILocation(line: 3175, column: 8, scope: !6743)
!6743 = distinct !DILexicalBlock(scope: !6744, file: !3, line: 3175, column: 8)
!6744 = distinct !DILexicalBlock(scope: !6738, file: !3, line: 3174, column: 2)
!6745 = !DILocation(line: 3175, column: 31, scope: !6743)
!6746 = !DILocation(line: 3175, column: 8, scope: !6744)
!6747 = !DILocation(line: 3176, column: 30, scope: !6743)
!6748 = !DILocation(line: 3176, column: 34, scope: !6743)
!6749 = !DILocation(line: 3176, column: 21, scope: !6743)
!6750 = !DILocation(line: 3176, column: 43, scope: !6743)
!6751 = !DILocation(line: 3176, column: 6, scope: !6743)
!6752 = !DILocation(line: 3176, column: 10, scope: !6743)
!6753 = !DILocation(line: 3176, column: 19, scope: !6743)
!6754 = !DILocation(line: 3177, column: 38, scope: !6755)
!6755 = distinct !DILexicalBlock(scope: !6743, file: !3, line: 3177, column: 13)
!6756 = !DILocation(line: 3177, column: 42, scope: !6755)
!6757 = !DILocation(line: 3177, column: 13, scope: !6755)
!6758 = !DILocation(line: 3177, column: 13, scope: !6743)
!6759 = !DILocation(line: 3178, column: 53, scope: !6755)
!6760 = !DILocation(line: 3178, column: 57, scope: !6755)
!6761 = !DILocation(line: 3178, column: 21, scope: !6755)
!6762 = !DILocation(line: 3178, column: 6, scope: !6755)
!6763 = !DILocation(line: 3178, column: 10, scope: !6755)
!6764 = !DILocation(line: 3178, column: 19, scope: !6755)
!6765 = !DILocation(line: 3179, column: 2, scope: !6744)
!6766 = !DILocation(line: 3180, column: 5, scope: !6739)
!6767 = distinct !{!6767, !6733, !6768}
!6768 = !DILocation(line: 3180, column: 5, scope: !6734)
!6769 = !DILocation(line: 3182, column: 3, scope: !6770)
!6770 = distinct !DILexicalBlock(scope: !6682, file: !3, line: 3182, column: 3)
!6771 = !DILocation(line: 3182, column: 3, scope: !6772)
!6772 = distinct !DILexicalBlock(scope: !6770, file: !3, line: 3182, column: 3)
!6773 = !DILocation(line: 3185, column: 11, scope: !6774)
!6774 = distinct !DILexicalBlock(scope: !6775, file: !3, line: 3185, column: 11)
!6775 = distinct !DILexicalBlock(scope: !6772, file: !3, line: 3184, column: 5)
!6776 = !DILocation(line: 3185, column: 15, scope: !6774)
!6777 = !DILocation(line: 3185, column: 11, scope: !6775)
!6778 = !DILocation(line: 3187, column: 8, scope: !6779)
!6779 = distinct !DILexicalBlock(scope: !6780, file: !3, line: 3187, column: 8)
!6780 = distinct !DILexicalBlock(scope: !6774, file: !3, line: 3186, column: 2)
!6781 = !DILocation(line: 3187, column: 31, scope: !6779)
!6782 = !DILocation(line: 3187, column: 8, scope: !6780)
!6783 = !DILocation(line: 3188, column: 30, scope: !6779)
!6784 = !DILocation(line: 3188, column: 34, scope: !6779)
!6785 = !DILocation(line: 3188, column: 21, scope: !6779)
!6786 = !DILocation(line: 3188, column: 43, scope: !6779)
!6787 = !DILocation(line: 3188, column: 6, scope: !6779)
!6788 = !DILocation(line: 3188, column: 10, scope: !6779)
!6789 = !DILocation(line: 3188, column: 19, scope: !6779)
!6790 = !DILocation(line: 3189, column: 38, scope: !6791)
!6791 = distinct !DILexicalBlock(scope: !6779, file: !3, line: 3189, column: 13)
!6792 = !DILocation(line: 3189, column: 42, scope: !6791)
!6793 = !DILocation(line: 3189, column: 13, scope: !6791)
!6794 = !DILocation(line: 3189, column: 13, scope: !6779)
!6795 = !DILocation(line: 3190, column: 53, scope: !6791)
!6796 = !DILocation(line: 3190, column: 57, scope: !6791)
!6797 = !DILocation(line: 3190, column: 21, scope: !6791)
!6798 = !DILocation(line: 3190, column: 6, scope: !6791)
!6799 = !DILocation(line: 3190, column: 10, scope: !6791)
!6800 = !DILocation(line: 3190, column: 19, scope: !6791)
!6801 = !DILocation(line: 3191, column: 2, scope: !6780)
!6802 = !DILocation(line: 3192, column: 5, scope: !6775)
!6803 = distinct !{!6803, !6769, !6804}
!6804 = !DILocation(line: 3192, column: 5, scope: !6770)
!6805 = !DILocation(line: 3193, column: 1, scope: !6682)
!6806 = distinct !DISubprogram(name: "get_max_value_id", scope: !3, file: !3, line: 3299, type: !3436, scopeLine: 3300, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!6807 = !DILocation(line: 3301, column: 10, scope: !6806)
!6808 = !DILocation(line: 3301, column: 3, scope: !6806)
!6809 = distinct !DISubprogram(name: "vn_nary_may_trap", scope: !3, file: !3, line: 3339, type: !6810, scopeLine: 3340, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!6810 = !DISubroutineType(types: !6811)
!6811 = !{!1603, !2905}
!6812 = !DILocalVariable(name: "nary", arg: 1, scope: !6809, file: !3, line: 3339, type: !2905)
!6813 = !DILocation(line: 3339, column: 32, scope: !6809)
!6814 = !DILocalVariable(name: "type", scope: !6809, file: !3, line: 3341, type: !1483)
!6815 = !DILocation(line: 3341, column: 8, scope: !6809)
!6816 = !DILocalVariable(name: "rhs2", scope: !6809, file: !3, line: 3342, type: !1483)
!6817 = !DILocation(line: 3342, column: 8, scope: !6809)
!6818 = !DILocalVariable(name: "honor_nans", scope: !6809, file: !3, line: 3343, type: !1603)
!6819 = !DILocation(line: 3343, column: 8, scope: !6809)
!6820 = !DILocalVariable(name: "honor_snans", scope: !6809, file: !3, line: 3344, type: !1603)
!6821 = !DILocation(line: 3344, column: 8, scope: !6809)
!6822 = !DILocalVariable(name: "fp_operation", scope: !6809, file: !3, line: 3345, type: !1603)
!6823 = !DILocation(line: 3345, column: 8, scope: !6809)
!6824 = !DILocalVariable(name: "honor_trapv", scope: !6809, file: !3, line: 3346, type: !1603)
!6825 = !DILocation(line: 3346, column: 8, scope: !6809)
!6826 = !DILocalVariable(name: "handled", scope: !6809, file: !3, line: 3347, type: !1603)
!6827 = !DILocation(line: 3347, column: 8, scope: !6809)
!6828 = !DILocalVariable(name: "ret", scope: !6809, file: !3, line: 3347, type: !1603)
!6829 = !DILocation(line: 3347, column: 17, scope: !6809)
!6830 = !DILocalVariable(name: "i", scope: !6809, file: !3, line: 3348, type: !7)
!6831 = !DILocation(line: 3348, column: 12, scope: !6809)
!6832 = !DILocation(line: 3350, column: 7, scope: !6833)
!6833 = distinct !DILexicalBlock(scope: !6809, file: !3, line: 3350, column: 7)
!6834 = !DILocation(line: 3350, column: 38, scope: !6833)
!6835 = !DILocation(line: 3351, column: 7, scope: !6833)
!6836 = !DILocation(line: 3351, column: 10, scope: !6833)
!6837 = !DILocation(line: 3351, column: 41, scope: !6833)
!6838 = !DILocation(line: 3352, column: 7, scope: !6833)
!6839 = !DILocation(line: 3352, column: 10, scope: !6833)
!6840 = !DILocation(line: 3352, column: 41, scope: !6833)
!6841 = !DILocation(line: 3350, column: 7, scope: !6809)
!6842 = !DILocation(line: 3354, column: 14, scope: !6843)
!6843 = distinct !DILexicalBlock(scope: !6833, file: !3, line: 3353, column: 5)
!6844 = !DILocation(line: 3354, column: 20, scope: !6843)
!6845 = !DILocation(line: 3354, column: 12, scope: !6843)
!6846 = !DILocation(line: 3355, column: 22, scope: !6843)
!6847 = !DILocation(line: 0, scope: !6843)
!6848 = !DILocation(line: 3355, column: 20, scope: !6843)
!6849 = !DILocation(line: 3356, column: 11, scope: !6850)
!6850 = distinct !DILexicalBlock(scope: !6843, file: !3, line: 3356, column: 11)
!6851 = !DILocation(line: 3356, column: 11, scope: !6843)
!6852 = !DILocation(line: 3358, column: 17, scope: !6853)
!6853 = distinct !DILexicalBlock(scope: !6850, file: !3, line: 3357, column: 2)
!6854 = !DILocation(line: 3358, column: 36, scope: !6853)
!6855 = !DILocation(line: 3358, column: 40, scope: !6853)
!6856 = !DILocation(line: 3358, column: 39, scope: !6853)
!6857 = !DILocation(line: 0, scope: !6853)
!6858 = !DILocation(line: 3358, column: 15, scope: !6853)
!6859 = !DILocation(line: 3359, column: 18, scope: !6853)
!6860 = !DILocation(line: 3359, column: 38, scope: !6853)
!6861 = !DILocation(line: 3359, column: 16, scope: !6853)
!6862 = !DILocation(line: 3360, column: 2, scope: !6853)
!6863 = !DILocation(line: 3361, column: 16, scope: !6864)
!6864 = distinct !DILexicalBlock(scope: !6850, file: !3, line: 3361, column: 16)
!6865 = !DILocation(line: 3362, column: 9, scope: !6864)
!6866 = !DILocation(line: 3362, column: 12, scope: !6864)
!6867 = !DILocation(line: 3361, column: 16, scope: !6850)
!6868 = !DILocation(line: 3363, column: 14, scope: !6864)
!6869 = !DILocation(line: 3363, column: 2, scope: !6864)
!6870 = !DILocation(line: 3364, column: 5, scope: !6843)
!6871 = !DILocation(line: 3365, column: 10, scope: !6809)
!6872 = !DILocation(line: 3365, column: 16, scope: !6809)
!6873 = !DILocation(line: 3365, column: 8, scope: !6809)
!6874 = !DILocation(line: 3366, column: 40, scope: !6809)
!6875 = !DILocation(line: 3366, column: 46, scope: !6809)
!6876 = !DILocation(line: 3366, column: 54, scope: !6809)
!6877 = !DILocation(line: 3367, column: 12, scope: !6809)
!6878 = !DILocation(line: 3368, column: 12, scope: !6809)
!6879 = !DILocation(line: 3368, column: 24, scope: !6809)
!6880 = !DILocation(line: 3368, column: 37, scope: !6809)
!6881 = !DILocation(line: 3366, column: 9, scope: !6809)
!6882 = !DILocation(line: 3366, column: 7, scope: !6809)
!6883 = !DILocation(line: 3370, column: 7, scope: !6884)
!6884 = distinct !DILexicalBlock(scope: !6809, file: !3, line: 3370, column: 7)
!6885 = !DILocation(line: 3371, column: 7, scope: !6884)
!6886 = !DILocation(line: 3371, column: 10, scope: !6884)
!6887 = !DILocation(line: 3370, column: 7, scope: !6809)
!6888 = !DILocation(line: 3372, column: 5, scope: !6884)
!6889 = !DILocation(line: 3374, column: 10, scope: !6890)
!6890 = distinct !DILexicalBlock(scope: !6809, file: !3, line: 3374, column: 3)
!6891 = !DILocation(line: 3374, column: 8, scope: !6890)
!6892 = !DILocation(line: 3374, column: 15, scope: !6893)
!6893 = distinct !DILexicalBlock(scope: !6890, file: !3, line: 3374, column: 3)
!6894 = !DILocation(line: 3374, column: 19, scope: !6893)
!6895 = !DILocation(line: 3374, column: 25, scope: !6893)
!6896 = !DILocation(line: 3374, column: 17, scope: !6893)
!6897 = !DILocation(line: 3374, column: 3, scope: !6890)
!6898 = !DILocation(line: 3375, column: 28, scope: !6899)
!6899 = distinct !DILexicalBlock(scope: !6893, file: !3, line: 3375, column: 9)
!6900 = !DILocation(line: 3375, column: 34, scope: !6899)
!6901 = !DILocation(line: 3375, column: 37, scope: !6899)
!6902 = !DILocation(line: 3375, column: 9, scope: !6899)
!6903 = !DILocation(line: 3375, column: 9, scope: !6893)
!6904 = !DILocation(line: 3376, column: 7, scope: !6899)
!6905 = !DILocation(line: 3375, column: 39, scope: !6899)
!6906 = !DILocation(line: 3374, column: 33, scope: !6893)
!6907 = !DILocation(line: 3374, column: 3, scope: !6893)
!6908 = distinct !{!6908, !6897, !6909}
!6909 = !DILocation(line: 3376, column: 14, scope: !6890)
!6910 = !DILocation(line: 3378, column: 3, scope: !6809)
!6911 = !DILocation(line: 3379, column: 1, scope: !6809)
!6912 = distinct !DISubprogram(name: "VEC_vn_ssa_aux_t_heap_reserve_exact", scope: !3, file: !3, line: 164, type: !6913, scopeLine: 164, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!6913 = !DISubroutineType(types: !6914)
!6914 = !{!1580, !3092, !1580}
!6915 = !DILocalVariable(name: "vec_", arg: 1, scope: !6912, file: !3, line: 164, type: !3092)
!6916 = !DILocation(line: 164, column: 1, scope: !6912)
!6917 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6912, file: !3, line: 164, type: !1580)
!6918 = !DILocalVariable(name: "extend", scope: !6912, file: !3, line: 164, type: !1580)
!6919 = !DILocation(line: 164, column: 1, scope: !6920)
!6920 = distinct !DILexicalBlock(scope: !6912, file: !3, line: 164, column: 1)
!6921 = distinct !DISubprogram(name: "VEC_vn_ssa_aux_t_base_space", scope: !3, file: !3, line: 163, type: !6922, scopeLine: 163, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!6922 = !DISubroutineType(types: !6923)
!6923 = !{!1580, !3100, !1580}
!6924 = !DILocalVariable(name: "vec_", arg: 1, scope: !6921, file: !3, line: 163, type: !3100)
!6925 = !DILocation(line: 163, column: 1, scope: !6921)
!6926 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6921, file: !3, line: 163, type: !1580)
!6927 = distinct !DISubprogram(name: "gimple_expr_code", scope: !391, file: !391, line: 1438, type: !3244, scopeLine: 1439, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!6928 = !DILocalVariable(name: "stmt", arg: 1, scope: !6927, file: !391, line: 1438, type: !3220)
!6929 = !DILocation(line: 1438, column: 32, scope: !6927)
!6930 = !DILocalVariable(name: "code", scope: !6927, file: !391, line: 1440, type: !390)
!6931 = !DILocation(line: 1440, column: 20, scope: !6927)
!6932 = !DILocation(line: 1440, column: 40, scope: !6927)
!6933 = !DILocation(line: 1440, column: 27, scope: !6927)
!6934 = !DILocation(line: 1441, column: 7, scope: !6935)
!6935 = distinct !DILexicalBlock(scope: !6927, file: !391, line: 1441, column: 7)
!6936 = !DILocation(line: 1441, column: 12, scope: !6935)
!6937 = !DILocation(line: 1441, column: 29, scope: !6935)
!6938 = !DILocation(line: 1441, column: 32, scope: !6935)
!6939 = !DILocation(line: 1441, column: 37, scope: !6935)
!6940 = !DILocation(line: 1441, column: 7, scope: !6927)
!6941 = !DILocation(line: 1442, column: 29, scope: !6935)
!6942 = !DILocation(line: 1442, column: 35, scope: !6935)
!6943 = !DILocation(line: 1442, column: 42, scope: !6935)
!6944 = !DILocation(line: 1442, column: 5, scope: !6935)
!6945 = !DILocation(line: 1443, column: 12, scope: !6946)
!6946 = distinct !DILexicalBlock(scope: !6935, file: !391, line: 1443, column: 12)
!6947 = !DILocation(line: 1443, column: 17, scope: !6946)
!6948 = !DILocation(line: 1443, column: 12, scope: !6935)
!6949 = !DILocation(line: 1444, column: 5, scope: !6946)
!6950 = !DILocation(line: 1446, column: 5, scope: !6946)
!6951 = !DILocation(line: 1448, column: 5, scope: !6927)
!6952 = !DILocation(line: 1450, column: 1, scope: !6927)
!6953 = distinct !DISubprogram(name: "get_gimple_rhs_class", scope: !391, file: !391, line: 1686, type: !6954, scopeLine: 1687, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!6954 = !DISubroutineType(types: !6955)
!6955 = !{!585, !134}
!6956 = !DILocalVariable(name: "code", arg: 1, scope: !6953, file: !391, line: 1686, type: !134)
!6957 = !DILocation(line: 1686, column: 38, scope: !6953)
!6958 = !DILocation(line: 1688, column: 63, scope: !6953)
!6959 = !DILocation(line: 1688, column: 34, scope: !6953)
!6960 = !DILocation(line: 1688, column: 10, scope: !6953)
!6961 = !DILocation(line: 1688, column: 3, scope: !6953)
!6962 = distinct !DISubprogram(name: "VEC_vn_reference_op_s_heap_reserve", scope: !1480, file: !1480, line: 84, type: !6963, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!6963 = !DISubroutineType(types: !6964)
!6964 = !{!1580, !3684, !1580}
!6965 = !DILocalVariable(name: "vec_", arg: 1, scope: !6962, file: !1480, line: 84, type: !3684)
!6966 = !DILocation(line: 84, column: 1, scope: !6962)
!6967 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6962, file: !1480, line: 84, type: !1580)
!6968 = !DILocalVariable(name: "extend", scope: !6962, file: !1480, line: 84, type: !1580)
!6969 = !DILocation(line: 84, column: 1, scope: !6970)
!6970 = distinct !DILexicalBlock(scope: !6962, file: !1480, line: 84, column: 1)
!6971 = distinct !DISubprogram(name: "VEC_vn_reference_op_s_base_quick_push", scope: !1480, file: !1480, line: 83, type: !6972, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!6972 = !DISubroutineType(types: !6973)
!6973 = !{!3461, !3490, !2922}
!6974 = !DILocalVariable(name: "vec_", arg: 1, scope: !6971, file: !1480, line: 83, type: !3490)
!6975 = !DILocation(line: 83, column: 1, scope: !6971)
!6976 = !DILocalVariable(name: "obj_", arg: 2, scope: !6971, file: !1480, line: 83, type: !2922)
!6977 = !DILocalVariable(name: "slot_", scope: !6971, file: !1480, line: 83, type: !3461)
!6978 = !DILocation(line: 83, column: 1, scope: !6979)
!6979 = distinct !DILexicalBlock(scope: !6971, file: !1480, line: 83, column: 1)
!6980 = distinct !DISubprogram(name: "VEC_vn_reference_op_s_base_space", scope: !1480, file: !1480, line: 83, type: !6981, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!6981 = !DISubroutineType(types: !6982)
!6982 = !{!1580, !3490, !1580}
!6983 = !DILocalVariable(name: "vec_", arg: 1, scope: !6980, file: !1480, line: 83, type: !3490)
!6984 = !DILocation(line: 83, column: 1, scope: !6980)
!6985 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6980, file: !1480, line: 83, type: !1580)
!6986 = distinct !DISubprogram(name: "VEC_vn_reference_op_s_base_quick_insert", scope: !1480, file: !1480, line: 83, type: !4281, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!6987 = !DILocalVariable(name: "vec_", arg: 1, scope: !6986, file: !1480, line: 83, type: !3490)
!6988 = !DILocation(line: 83, column: 1, scope: !6986)
!6989 = !DILocalVariable(name: "ix_", arg: 2, scope: !6986, file: !1480, line: 83, type: !7)
!6990 = !DILocalVariable(name: "obj_", arg: 3, scope: !6986, file: !1480, line: 83, type: !2922)
!6991 = !DILocalVariable(name: "slot_", scope: !6986, file: !1480, line: 83, type: !3461)
!6992 = !DILocation(line: 83, column: 1, scope: !6993)
!6993 = distinct !DILexicalBlock(scope: !6986, file: !1480, line: 83, column: 1)
!6994 = distinct !DISubprogram(name: "VEC_vn_reference_op_s_heap_reserve_exact", scope: !1480, file: !1480, line: 84, type: !6963, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!6995 = !DILocalVariable(name: "vec_", arg: 1, scope: !6994, file: !1480, line: 84, type: !3684)
!6996 = !DILocation(line: 84, column: 1, scope: !6994)
!6997 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6994, file: !1480, line: 84, type: !1580)
!6998 = !DILocalVariable(name: "extend", scope: !6994, file: !1480, line: 84, type: !1580)
!6999 = !DILocation(line: 84, column: 1, scope: !7000)
!7000 = distinct !DILexicalBlock(scope: !6994, file: !1480, line: 84, column: 1)
!7001 = distinct !DISubprogram(name: "is_gimple_call", scope: !391, file: !391, line: 1870, type: !3218, scopeLine: 1871, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7002 = !DILocalVariable(name: "gs", arg: 1, scope: !7001, file: !391, line: 1870, type: !3220)
!7003 = !DILocation(line: 1870, column: 30, scope: !7001)
!7004 = !DILocation(line: 1872, column: 23, scope: !7001)
!7005 = !DILocation(line: 1872, column: 10, scope: !7001)
!7006 = !DILocation(line: 1872, column: 27, scope: !7001)
!7007 = !DILocation(line: 1872, column: 3, scope: !7001)
!7008 = distinct !DISubprogram(name: "gimple_call_fndecl", scope: !391, file: !391, line: 1954, type: !3264, scopeLine: 1955, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7009 = !DILocalVariable(name: "gs", arg: 1, scope: !7008, file: !391, line: 1954, type: !3220)
!7010 = !DILocation(line: 1954, column: 34, scope: !7008)
!7011 = !DILocalVariable(name: "addr", scope: !7008, file: !391, line: 1956, type: !1483)
!7012 = !DILocation(line: 1956, column: 8, scope: !7008)
!7013 = !DILocation(line: 1956, column: 31, scope: !7008)
!7014 = !DILocation(line: 1956, column: 15, scope: !7008)
!7015 = !DILocation(line: 1957, column: 7, scope: !7016)
!7016 = distinct !DILexicalBlock(scope: !7008, file: !391, line: 1957, column: 7)
!7017 = !DILocation(line: 1957, column: 24, scope: !7016)
!7018 = !DILocation(line: 1957, column: 7, scope: !7008)
!7019 = !DILocation(line: 1958, column: 12, scope: !7016)
!7020 = !DILocation(line: 1958, column: 5, scope: !7016)
!7021 = !DILocation(line: 1959, column: 3, scope: !7008)
!7022 = !DILocation(line: 1960, column: 1, scope: !7008)
!7023 = distinct !DISubprogram(name: "VEC_vn_reference_op_s_heap_copy", scope: !1480, file: !1480, line: 84, type: !7024, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7024 = !DISubroutineType(types: !7025)
!7025 = !{!2868, !3490}
!7026 = !DILocalVariable(name: "vec_", arg: 1, scope: !7023, file: !1480, line: 84, type: !3490)
!7027 = !DILocation(line: 84, column: 1, scope: !7023)
!7028 = !DILocalVariable(name: "len_", scope: !7023, file: !1480, line: 84, type: !1959)
!7029 = !DILocalVariable(name: "new_vec_", scope: !7023, file: !1480, line: 84, type: !2868)
!7030 = !DILocation(line: 84, column: 1, scope: !7031)
!7031 = distinct !DILexicalBlock(scope: !7023, file: !1480, line: 84, column: 1)
!7032 = !DILocation(line: 84, column: 1, scope: !7033)
!7033 = distinct !DILexicalBlock(scope: !7031, file: !1480, line: 84, column: 1)
!7034 = distinct !DISubprogram(name: "VEC_constructor_elt_base_length", scope: !135, file: !135, line: 1537, type: !7035, scopeLine: 1537, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7035 = !DISubroutineType(types: !7036)
!7036 = !{!7, !7037}
!7037 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7038, size: 64)
!7038 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2624)
!7039 = !DILocalVariable(name: "vec_", arg: 1, scope: !7034, file: !135, line: 1537, type: !7037)
!7040 = !DILocation(line: 1537, column: 1, scope: !7034)
!7041 = distinct !DISubprogram(name: "gimple_assign_lhs", scope: !391, file: !391, line: 1694, type: !3264, scopeLine: 1695, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7042 = !DILocalVariable(name: "gs", arg: 1, scope: !7041, file: !391, line: 1694, type: !3220)
!7043 = !DILocation(line: 1694, column: 33, scope: !7041)
!7044 = !DILocation(line: 1697, column: 21, scope: !7041)
!7045 = !DILocation(line: 1697, column: 10, scope: !7041)
!7046 = !DILocation(line: 1697, column: 3, scope: !7041)
!7047 = distinct !DISubprogram(name: "handled_component_p", scope: !135, file: !135, line: 4551, type: !6500, scopeLine: 4552, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7048 = !DILocalVariable(name: "t", arg: 1, scope: !7047, file: !135, line: 4551, type: !6502)
!7049 = !DILocation(line: 4551, column: 33, scope: !7047)
!7050 = !DILocation(line: 4553, column: 11, scope: !7047)
!7051 = !DILocation(line: 4553, column: 3, scope: !7047)
!7052 = !DILocation(line: 4562, column: 7, scope: !7053)
!7053 = distinct !DILexicalBlock(scope: !7047, file: !135, line: 4554, column: 5)
!7054 = !DILocation(line: 4565, column: 7, scope: !7053)
!7055 = !DILocation(line: 4567, column: 1, scope: !7047)
!7056 = distinct !DISubprogram(name: "gimple_has_ops", scope: !391, file: !391, line: 1274, type: !3218, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7057 = !DILocalVariable(name: "g", arg: 1, scope: !7056, file: !391, line: 1274, type: !3220)
!7058 = !DILocation(line: 1274, column: 30, scope: !7056)
!7059 = !DILocation(line: 1276, column: 23, scope: !7056)
!7060 = !DILocation(line: 1276, column: 10, scope: !7056)
!7061 = !DILocation(line: 1276, column: 26, scope: !7056)
!7062 = !DILocation(line: 1276, column: 41, scope: !7056)
!7063 = !DILocation(line: 1276, column: 57, scope: !7056)
!7064 = !DILocation(line: 1276, column: 44, scope: !7056)
!7065 = !DILocation(line: 1276, column: 60, scope: !7056)
!7066 = !DILocation(line: 0, scope: !7056)
!7067 = !DILocation(line: 1276, column: 3, scope: !7056)
!7068 = distinct !DISubprogram(name: "gimple_ops", scope: !391, file: !391, line: 1614, type: !7069, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7069 = !DISubroutineType(types: !7070)
!7070 = !{!1848, !1814}
!7071 = !DILocalVariable(name: "gs", arg: 1, scope: !7068, file: !391, line: 1614, type: !1814)
!7072 = !DILocation(line: 1614, column: 20, scope: !7068)
!7073 = !DILocalVariable(name: "off", scope: !7068, file: !391, line: 1616, type: !1959)
!7074 = !DILocation(line: 1616, column: 10, scope: !7068)
!7075 = !DILocation(line: 1621, column: 56, scope: !7068)
!7076 = !DILocation(line: 1621, column: 28, scope: !7068)
!7077 = !DILocation(line: 1621, column: 9, scope: !7068)
!7078 = !DILocation(line: 1621, column: 7, scope: !7068)
!7079 = !DILocation(line: 1622, column: 3, scope: !7068)
!7080 = !DILocation(line: 1624, column: 29, scope: !7068)
!7081 = !DILocation(line: 1624, column: 20, scope: !7068)
!7082 = !DILocation(line: 1624, column: 34, scope: !7068)
!7083 = !DILocation(line: 1624, column: 32, scope: !7068)
!7084 = !DILocation(line: 1624, column: 10, scope: !7068)
!7085 = !DILocation(line: 1624, column: 3, scope: !7068)
!7086 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !391, file: !391, line: 1073, type: !7087, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7087 = !DISubroutineType(types: !7088)
!7088 = !{!1317, !1814}
!7089 = !DILocalVariable(name: "gs", arg: 1, scope: !7086, file: !391, line: 1073, type: !1814)
!7090 = !DILocation(line: 1073, column: 36, scope: !7086)
!7091 = !DILocation(line: 1075, column: 37, scope: !7086)
!7092 = !DILocation(line: 1075, column: 24, scope: !7086)
!7093 = !DILocation(line: 1075, column: 10, scope: !7086)
!7094 = !DILocation(line: 1075, column: 3, scope: !7086)
!7095 = distinct !DISubprogram(name: "gss_for_code", scope: !391, file: !391, line: 1061, type: !7096, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7096 = !DISubroutineType(types: !7097)
!7097 = !{!1317, !390}
!7098 = !DILocalVariable(name: "code", arg: 1, scope: !7095, file: !391, line: 1061, type: !390)
!7099 = !DILocation(line: 1061, column: 32, scope: !7095)
!7100 = !DILocation(line: 1066, column: 24, scope: !7095)
!7101 = !DILocation(line: 1066, column: 10, scope: !7095)
!7102 = !DILocation(line: 1066, column: 3, scope: !7095)
!7103 = distinct !DISubprogram(name: "vn_constant_hash", scope: !3, file: !3, line: 329, type: !2305, scopeLine: 330, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7104 = !DILocalVariable(name: "p1", arg: 1, scope: !7103, file: !3, line: 329, type: !2308)
!7105 = !DILocation(line: 329, column: 31, scope: !7103)
!7106 = !DILocalVariable(name: "vc1", scope: !7103, file: !3, line: 331, type: !2960)
!7107 = !DILocation(line: 331, column: 31, scope: !7103)
!7108 = !DILocation(line: 331, column: 68, scope: !7103)
!7109 = !DILocation(line: 331, column: 37, scope: !7103)
!7110 = !DILocation(line: 332, column: 10, scope: !7103)
!7111 = !DILocation(line: 332, column: 15, scope: !7103)
!7112 = !DILocation(line: 332, column: 3, scope: !7103)
!7113 = distinct !DISubprogram(name: "vn_constant_eq", scope: !3, file: !3, line: 315, type: !2313, scopeLine: 316, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7114 = !DILocalVariable(name: "p1", arg: 1, scope: !7113, file: !3, line: 315, type: !2308)
!7115 = !DILocation(line: 315, column: 29, scope: !7113)
!7116 = !DILocalVariable(name: "p2", arg: 2, scope: !7113, file: !3, line: 315, type: !2308)
!7117 = !DILocation(line: 315, column: 45, scope: !7113)
!7118 = !DILocalVariable(name: "vc1", scope: !7113, file: !3, line: 317, type: !2960)
!7119 = !DILocation(line: 317, column: 31, scope: !7113)
!7120 = !DILocation(line: 317, column: 68, scope: !7113)
!7121 = !DILocation(line: 317, column: 37, scope: !7113)
!7122 = !DILocalVariable(name: "vc2", scope: !7113, file: !3, line: 318, type: !2960)
!7123 = !DILocation(line: 318, column: 31, scope: !7113)
!7124 = !DILocation(line: 318, column: 68, scope: !7113)
!7125 = !DILocation(line: 318, column: 37, scope: !7113)
!7126 = !DILocation(line: 320, column: 7, scope: !7127)
!7127 = distinct !DILexicalBlock(scope: !7113, file: !3, line: 320, column: 7)
!7128 = !DILocation(line: 320, column: 12, scope: !7127)
!7129 = !DILocation(line: 320, column: 24, scope: !7127)
!7130 = !DILocation(line: 320, column: 29, scope: !7127)
!7131 = !DILocation(line: 320, column: 21, scope: !7127)
!7132 = !DILocation(line: 320, column: 7, scope: !7113)
!7133 = !DILocation(line: 321, column: 5, scope: !7127)
!7134 = !DILocation(line: 323, column: 36, scope: !7113)
!7135 = !DILocation(line: 323, column: 41, scope: !7113)
!7136 = !DILocation(line: 323, column: 51, scope: !7113)
!7137 = !DILocation(line: 323, column: 56, scope: !7113)
!7138 = !DILocation(line: 323, column: 10, scope: !7113)
!7139 = !DILocation(line: 323, column: 3, scope: !7113)
!7140 = !DILocation(line: 324, column: 1, scope: !7113)
!7141 = distinct !DISubprogram(name: "VEC_vn_ssa_aux_t_heap_alloc", scope: !3, file: !3, line: 164, type: !7142, scopeLine: 164, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7142 = !DISubroutineType(types: !7143)
!7143 = !{!2908, !1580}
!7144 = !DILocalVariable(name: "alloc_", arg: 1, scope: !7141, file: !3, line: 164, type: !1580)
!7145 = !DILocation(line: 164, column: 1, scope: !7141)
!7146 = distinct !DISubprogram(name: "VEC_vn_ssa_aux_t_heap_safe_grow_cleared", scope: !3, file: !3, line: 164, type: !3090, scopeLine: 164, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7147 = !DILocalVariable(name: "vec_", arg: 1, scope: !7146, file: !3, line: 164, type: !3092)
!7148 = !DILocation(line: 164, column: 1, scope: !7146)
!7149 = !DILocalVariable(name: "size_", arg: 2, scope: !7146, file: !3, line: 164, type: !1580)
!7150 = !DILocalVariable(name: "oldsize", scope: !7146, file: !3, line: 164, type: !1580)
!7151 = distinct !DISubprogram(name: "allocate_vn_table", scope: !3, file: !3, line: 3027, type: !6133, scopeLine: 3028, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7152 = !DILocalVariable(name: "table", arg: 1, scope: !7151, file: !3, line: 3027, type: !3016)
!7153 = !DILocation(line: 3027, column: 32, scope: !7151)
!7154 = !DILocation(line: 3029, column: 17, scope: !7151)
!7155 = !DILocation(line: 3029, column: 3, scope: !7151)
!7156 = !DILocation(line: 3029, column: 10, scope: !7151)
!7157 = !DILocation(line: 3029, column: 15, scope: !7151)
!7158 = !DILocation(line: 3030, column: 17, scope: !7151)
!7159 = !DILocation(line: 3030, column: 3, scope: !7151)
!7160 = !DILocation(line: 3030, column: 10, scope: !7151)
!7161 = !DILocation(line: 3030, column: 15, scope: !7151)
!7162 = !DILocation(line: 3031, column: 23, scope: !7151)
!7163 = !DILocation(line: 3031, column: 3, scope: !7151)
!7164 = !DILocation(line: 3031, column: 10, scope: !7151)
!7165 = !DILocation(line: 3031, column: 21, scope: !7151)
!7166 = !DILocation(line: 3034, column: 3, scope: !7151)
!7167 = !DILocation(line: 3035, column: 22, scope: !7151)
!7168 = !DILocation(line: 3035, column: 3, scope: !7151)
!7169 = !DILocation(line: 3035, column: 10, scope: !7151)
!7170 = !DILocation(line: 3035, column: 20, scope: !7151)
!7171 = !DILocation(line: 3038, column: 28, scope: !7151)
!7172 = !DILocation(line: 3038, column: 3, scope: !7151)
!7173 = !DILocation(line: 3038, column: 10, scope: !7151)
!7174 = !DILocation(line: 3038, column: 26, scope: !7151)
!7175 = !DILocation(line: 3041, column: 1, scope: !7151)
!7176 = distinct !DISubprogram(name: "vn_constant_eq_with_type", scope: !1480, file: !1480, line: 130, type: !5435, scopeLine: 131, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7177 = !DILocalVariable(name: "c1", arg: 1, scope: !7176, file: !1480, line: 130, type: !1483)
!7178 = !DILocation(line: 130, column: 32, scope: !7176)
!7179 = !DILocalVariable(name: "c2", arg: 2, scope: !7176, file: !1480, line: 130, type: !1483)
!7180 = !DILocation(line: 130, column: 41, scope: !7176)
!7181 = !DILocation(line: 132, column: 32, scope: !7176)
!7182 = !DILocation(line: 132, column: 36, scope: !7176)
!7183 = !DILocation(line: 132, column: 11, scope: !7176)
!7184 = !DILocation(line: 133, column: 4, scope: !7176)
!7185 = !DILocation(line: 133, column: 27, scope: !7176)
!7186 = !DILocation(line: 133, column: 43, scope: !7176)
!7187 = !DILocation(line: 133, column: 7, scope: !7176)
!7188 = !DILocation(line: 0, scope: !7176)
!7189 = !DILocation(line: 132, column: 10, scope: !7176)
!7190 = !DILocation(line: 132, column: 3, scope: !7176)
!7191 = distinct !DISubprogram(name: "VEC_vn_ssa_aux_t_base_address", scope: !3, file: !3, line: 163, type: !7192, scopeLine: 163, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7192 = !DISubroutineType(types: !7193)
!7193 = !{!7194, !3100}
!7194 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2920, size: 64)
!7195 = !DILocalVariable(name: "vec_", arg: 1, scope: !7191, file: !3, line: 163, type: !3100)
!7196 = !DILocation(line: 163, column: 1, scope: !7191)
!7197 = distinct !DISubprogram(name: "vn_phi_hash", scope: !3, file: !3, line: 1665, type: !2305, scopeLine: 1666, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7198 = !DILocalVariable(name: "p1", arg: 1, scope: !7197, file: !3, line: 1665, type: !2308)
!7199 = !DILocation(line: 1665, column: 26, scope: !7197)
!7200 = !DILocalVariable(name: "vp1", scope: !7197, file: !3, line: 1667, type: !7201)
!7201 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2962)
!7202 = !DILocation(line: 1667, column: 24, scope: !7197)
!7203 = !DILocation(line: 1667, column: 47, scope: !7197)
!7204 = !DILocation(line: 1667, column: 30, scope: !7197)
!7205 = !DILocation(line: 1668, column: 10, scope: !7197)
!7206 = !DILocation(line: 1668, column: 15, scope: !7197)
!7207 = !DILocation(line: 1668, column: 3, scope: !7197)
!7208 = distinct !DISubprogram(name: "vn_phi_eq", scope: !3, file: !3, line: 1674, type: !2313, scopeLine: 1675, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7209 = !DILocalVariable(name: "p1", arg: 1, scope: !7208, file: !3, line: 1674, type: !2308)
!7210 = !DILocation(line: 1674, column: 24, scope: !7208)
!7211 = !DILocalVariable(name: "p2", arg: 2, scope: !7208, file: !3, line: 1674, type: !2308)
!7212 = !DILocation(line: 1674, column: 40, scope: !7208)
!7213 = !DILocalVariable(name: "vp1", scope: !7208, file: !3, line: 1676, type: !7201)
!7214 = !DILocation(line: 1676, column: 24, scope: !7208)
!7215 = !DILocation(line: 1676, column: 47, scope: !7208)
!7216 = !DILocation(line: 1676, column: 30, scope: !7208)
!7217 = !DILocalVariable(name: "vp2", scope: !7208, file: !3, line: 1677, type: !7201)
!7218 = !DILocation(line: 1677, column: 24, scope: !7208)
!7219 = !DILocation(line: 1677, column: 47, scope: !7208)
!7220 = !DILocation(line: 1677, column: 30, scope: !7208)
!7221 = !DILocation(line: 1679, column: 7, scope: !7222)
!7222 = distinct !DILexicalBlock(scope: !7208, file: !3, line: 1679, column: 7)
!7223 = !DILocation(line: 1679, column: 12, scope: !7222)
!7224 = !DILocation(line: 1679, column: 24, scope: !7222)
!7225 = !DILocation(line: 1679, column: 29, scope: !7222)
!7226 = !DILocation(line: 1679, column: 21, scope: !7222)
!7227 = !DILocation(line: 1679, column: 7, scope: !7208)
!7228 = !DILocation(line: 1680, column: 5, scope: !7222)
!7229 = !DILocation(line: 1682, column: 7, scope: !7230)
!7230 = distinct !DILexicalBlock(scope: !7208, file: !3, line: 1682, column: 7)
!7231 = !DILocation(line: 1682, column: 12, scope: !7230)
!7232 = !DILocation(line: 1682, column: 21, scope: !7230)
!7233 = !DILocation(line: 1682, column: 26, scope: !7230)
!7234 = !DILocation(line: 1682, column: 18, scope: !7230)
!7235 = !DILocation(line: 1682, column: 7, scope: !7208)
!7236 = !DILocalVariable(name: "i", scope: !7237, file: !3, line: 1684, type: !1580)
!7237 = distinct !DILexicalBlock(scope: !7230, file: !3, line: 1683, column: 5)
!7238 = !DILocation(line: 1684, column: 11, scope: !7237)
!7239 = !DILocalVariable(name: "phi1op", scope: !7237, file: !3, line: 1685, type: !1483)
!7240 = !DILocation(line: 1685, column: 12, scope: !7237)
!7241 = !DILocation(line: 1689, column: 32, scope: !7242)
!7242 = distinct !DILexicalBlock(scope: !7237, file: !3, line: 1689, column: 11)
!7243 = !DILocation(line: 1690, column: 11, scope: !7242)
!7244 = !DILocation(line: 1689, column: 12, scope: !7242)
!7245 = !DILocation(line: 1689, column: 11, scope: !7237)
!7246 = !DILocation(line: 1691, column: 2, scope: !7242)
!7247 = !DILocation(line: 1695, column: 14, scope: !7248)
!7248 = distinct !DILexicalBlock(scope: !7237, file: !3, line: 1695, column: 7)
!7249 = !DILocation(line: 1695, column: 12, scope: !7248)
!7250 = !DILocation(line: 1695, column: 19, scope: !7251)
!7251 = distinct !DILexicalBlock(scope: !7248, file: !3, line: 1695, column: 7)
!7252 = !DILocation(line: 1695, column: 7, scope: !7248)
!7253 = !DILocalVariable(name: "phi2op", scope: !7254, file: !3, line: 1697, type: !1483)
!7254 = distinct !DILexicalBlock(scope: !7251, file: !3, line: 1696, column: 2)
!7255 = !DILocation(line: 1697, column: 9, scope: !7254)
!7256 = !DILocation(line: 1697, column: 18, scope: !7254)
!7257 = !DILocation(line: 1698, column: 8, scope: !7258)
!7258 = distinct !DILexicalBlock(scope: !7254, file: !3, line: 1698, column: 8)
!7259 = !DILocation(line: 1698, column: 18, scope: !7258)
!7260 = !DILocation(line: 1698, column: 15, scope: !7258)
!7261 = !DILocation(line: 1698, column: 25, scope: !7258)
!7262 = !DILocation(line: 1698, column: 28, scope: !7258)
!7263 = !DILocation(line: 1698, column: 38, scope: !7258)
!7264 = !DILocation(line: 1698, column: 35, scope: !7258)
!7265 = !DILocation(line: 1698, column: 8, scope: !7254)
!7266 = !DILocation(line: 1699, column: 6, scope: !7258)
!7267 = !DILocation(line: 1700, column: 30, scope: !7268)
!7268 = distinct !DILexicalBlock(scope: !7254, file: !3, line: 1700, column: 8)
!7269 = !DILocation(line: 1700, column: 38, scope: !7268)
!7270 = !DILocation(line: 1700, column: 9, scope: !7268)
!7271 = !DILocation(line: 1700, column: 8, scope: !7254)
!7272 = !DILocation(line: 1701, column: 6, scope: !7268)
!7273 = !DILocation(line: 1702, column: 2, scope: !7254)
!7274 = !DILocation(line: 1695, column: 65, scope: !7251)
!7275 = !DILocation(line: 1695, column: 7, scope: !7251)
!7276 = distinct !{!7276, !7252, !7277}
!7277 = !DILocation(line: 1702, column: 2, scope: !7248)
!7278 = !DILocation(line: 1703, column: 7, scope: !7237)
!7279 = !DILocation(line: 1705, column: 3, scope: !7208)
!7280 = !DILocation(line: 1706, column: 1, scope: !7208)
!7281 = distinct !DISubprogram(name: "free_phi", scope: !3, file: !3, line: 297, type: !2318, scopeLine: 298, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7282 = !DILocalVariable(name: "vp", arg: 1, scope: !7281, file: !3, line: 297, type: !1767)
!7283 = !DILocation(line: 297, column: 17, scope: !7281)
!7284 = !DILocalVariable(name: "phi", scope: !7281, file: !3, line: 299, type: !2977)
!7285 = !DILocation(line: 299, column: 12, scope: !7281)
!7286 = !DILocation(line: 299, column: 29, scope: !7281)
!7287 = !DILocation(line: 299, column: 18, scope: !7281)
!7288 = !DILocation(line: 300, column: 3, scope: !7281)
!7289 = !DILocation(line: 301, column: 1, scope: !7281)
!7290 = distinct !DISubprogram(name: "vn_nary_op_hash", scope: !3, file: !3, line: 1394, type: !2305, scopeLine: 1395, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7291 = !DILocalVariable(name: "p1", arg: 1, scope: !7290, file: !3, line: 1394, type: !2308)
!7292 = !DILocation(line: 1394, column: 30, scope: !7290)
!7293 = !DILocalVariable(name: "vno1", scope: !7290, file: !3, line: 1396, type: !5376)
!7294 = !DILocation(line: 1396, column: 28, scope: !7290)
!7295 = !DILocation(line: 1396, column: 56, scope: !7290)
!7296 = !DILocation(line: 1396, column: 35, scope: !7290)
!7297 = !DILocation(line: 1397, column: 10, scope: !7290)
!7298 = !DILocation(line: 1397, column: 16, scope: !7290)
!7299 = !DILocation(line: 1397, column: 3, scope: !7290)
!7300 = distinct !DISubprogram(name: "vn_reference_hash", scope: !3, file: !3, line: 421, type: !2305, scopeLine: 422, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7301 = !DILocalVariable(name: "p1", arg: 1, scope: !7300, file: !3, line: 421, type: !2308)
!7302 = !DILocation(line: 421, column: 32, scope: !7300)
!7303 = !DILocalVariable(name: "vr1", scope: !7300, file: !3, line: 423, type: !3557)
!7304 = !DILocation(line: 423, column: 30, scope: !7300)
!7305 = !DILocation(line: 423, column: 59, scope: !7300)
!7306 = !DILocation(line: 423, column: 36, scope: !7300)
!7307 = !DILocation(line: 424, column: 10, scope: !7300)
!7308 = !DILocation(line: 424, column: 15, scope: !7300)
!7309 = !DILocation(line: 424, column: 3, scope: !7300)
!7310 = distinct !DISubprogram(name: "VEC_tree_base_iterate", scope: !135, file: !135, line: 182, type: !7311, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7311 = !DISubroutineType(types: !7312)
!7312 = !{!1580, !6114, !7, !1848}
!7313 = !DILocalVariable(name: "vec_", arg: 1, scope: !7310, file: !135, line: 182, type: !6114)
!7314 = !DILocation(line: 182, column: 1, scope: !7310)
!7315 = !DILocalVariable(name: "ix_", arg: 2, scope: !7310, file: !135, line: 182, type: !7)
!7316 = !DILocalVariable(name: "ptr", arg: 3, scope: !7310, file: !135, line: 182, type: !1848)
!7317 = !DILocation(line: 182, column: 1, scope: !7318)
!7318 = distinct !DILexicalBlock(scope: !7310, file: !135, line: 182, column: 1)
!7319 = !DILocation(line: 182, column: 1, scope: !7320)
!7320 = distinct !DILexicalBlock(scope: !7318, file: !135, line: 182, column: 1)
!7321 = !DILocation(line: 182, column: 1, scope: !7322)
!7322 = distinct !DILexicalBlock(scope: !7318, file: !135, line: 182, column: 1)
!7323 = distinct !DISubprogram(name: "VEC_tree_heap_safe_push", scope: !135, file: !135, line: 184, type: !7324, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7324 = !DISubroutineType(types: !7325)
!7325 = !{!1848, !6106, !1483}
!7326 = !DILocalVariable(name: "vec_", arg: 1, scope: !7323, file: !135, line: 184, type: !6106)
!7327 = !DILocation(line: 184, column: 1, scope: !7323)
!7328 = !DILocalVariable(name: "obj_", arg: 2, scope: !7323, file: !135, line: 184, type: !1483)
!7329 = distinct !DISubprogram(name: "op_iter_init_phiuse", scope: !6499, file: !6499, line: 910, type: !7330, scopeLine: 911, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7330 = !DISubroutineType(types: !7331)
!7331 = !{!2979, !7332, !1814, !1580}
!7332 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2997, size: 64)
!7333 = !DILocalVariable(name: "ptr", arg: 1, scope: !7329, file: !6499, line: 910, type: !7332)
!7334 = !DILocation(line: 910, column: 35, scope: !7329)
!7335 = !DILocalVariable(name: "phi", arg: 2, scope: !7329, file: !6499, line: 910, type: !1814)
!7336 = !DILocation(line: 910, column: 47, scope: !7329)
!7337 = !DILocalVariable(name: "flags", arg: 3, scope: !7329, file: !6499, line: 910, type: !1580)
!7338 = !DILocation(line: 910, column: 56, scope: !7329)
!7339 = !DILocalVariable(name: "phi_def", scope: !7329, file: !6499, line: 912, type: !1483)
!7340 = !DILocation(line: 912, column: 8, scope: !7329)
!7341 = !DILocation(line: 912, column: 37, scope: !7329)
!7342 = !DILocation(line: 912, column: 18, scope: !7329)
!7343 = !DILocalVariable(name: "comp", scope: !7329, file: !6499, line: 913, type: !1580)
!7344 = !DILocation(line: 913, column: 7, scope: !7329)
!7345 = !DILocation(line: 915, column: 28, scope: !7329)
!7346 = !DILocation(line: 915, column: 3, scope: !7329)
!7347 = !DILocation(line: 916, column: 3, scope: !7329)
!7348 = !DILocation(line: 916, column: 8, scope: !7329)
!7349 = !DILocation(line: 916, column: 13, scope: !7329)
!7350 = !DILocation(line: 918, column: 3, scope: !7329)
!7351 = !DILocation(line: 920, column: 26, scope: !7329)
!7352 = !DILocation(line: 920, column: 11, scope: !7329)
!7353 = !DILocation(line: 920, column: 8, scope: !7329)
!7354 = !DILocation(line: 923, column: 8, scope: !7355)
!7355 = distinct !DILexicalBlock(scope: !7329, file: !6499, line: 923, column: 7)
!7356 = !DILocation(line: 923, column: 16, scope: !7355)
!7357 = !DILocation(line: 923, column: 14, scope: !7355)
!7358 = !DILocation(line: 923, column: 22, scope: !7355)
!7359 = !DILocation(line: 923, column: 7, scope: !7329)
!7360 = !DILocation(line: 925, column: 7, scope: !7361)
!7361 = distinct !DILexicalBlock(scope: !7355, file: !6499, line: 924, column: 5)
!7362 = !DILocation(line: 925, column: 12, scope: !7361)
!7363 = !DILocation(line: 925, column: 17, scope: !7361)
!7364 = !DILocation(line: 926, column: 7, scope: !7361)
!7365 = !DILocation(line: 929, column: 19, scope: !7329)
!7366 = !DILocation(line: 929, column: 3, scope: !7329)
!7367 = !DILocation(line: 929, column: 8, scope: !7329)
!7368 = !DILocation(line: 929, column: 17, scope: !7329)
!7369 = !DILocation(line: 930, column: 39, scope: !7329)
!7370 = !DILocation(line: 930, column: 18, scope: !7329)
!7371 = !DILocation(line: 930, column: 3, scope: !7329)
!7372 = !DILocation(line: 930, column: 8, scope: !7329)
!7373 = !DILocation(line: 930, column: 16, scope: !7329)
!7374 = !DILocation(line: 931, column: 3, scope: !7329)
!7375 = !DILocation(line: 931, column: 8, scope: !7329)
!7376 = !DILocation(line: 931, column: 18, scope: !7329)
!7377 = !DILocation(line: 932, column: 28, scope: !7329)
!7378 = !DILocation(line: 932, column: 10, scope: !7329)
!7379 = !DILocation(line: 932, column: 3, scope: !7329)
!7380 = !DILocation(line: 933, column: 1, scope: !7329)
!7381 = distinct !DISubprogram(name: "op_iter_init_use", scope: !6499, file: !6499, line: 768, type: !7330, scopeLine: 769, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7382 = !DILocalVariable(name: "ptr", arg: 1, scope: !7381, file: !6499, line: 768, type: !7332)
!7383 = !DILocation(line: 768, column: 32, scope: !7381)
!7384 = !DILocalVariable(name: "stmt", arg: 2, scope: !7381, file: !6499, line: 768, type: !1814)
!7385 = !DILocation(line: 768, column: 44, scope: !7381)
!7386 = !DILocalVariable(name: "flags", arg: 3, scope: !7381, file: !6499, line: 768, type: !1580)
!7387 = !DILocation(line: 768, column: 54, scope: !7381)
!7388 = !DILocation(line: 770, column: 3, scope: !7381)
!7389 = !DILocation(line: 772, column: 17, scope: !7381)
!7390 = !DILocation(line: 772, column: 22, scope: !7381)
!7391 = !DILocation(line: 772, column: 28, scope: !7381)
!7392 = !DILocation(line: 772, column: 3, scope: !7381)
!7393 = !DILocation(line: 773, column: 3, scope: !7381)
!7394 = !DILocation(line: 773, column: 8, scope: !7381)
!7395 = !DILocation(line: 773, column: 18, scope: !7381)
!7396 = !DILocation(line: 774, column: 28, scope: !7381)
!7397 = !DILocation(line: 774, column: 10, scope: !7381)
!7398 = !DILocation(line: 774, column: 3, scope: !7381)
!7399 = distinct !DISubprogram(name: "clear_and_done_ssa_iter", scope: !6499, file: !6499, line: 729, type: !7400, scopeLine: 730, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7400 = !DISubroutineType(types: !7401)
!7401 = !{null, !7332}
!7402 = !DILocalVariable(name: "ptr", arg: 1, scope: !7399, file: !6499, line: 729, type: !7332)
!7403 = !DILocation(line: 729, column: 39, scope: !7399)
!7404 = !DILocation(line: 731, column: 3, scope: !7399)
!7405 = !DILocation(line: 731, column: 8, scope: !7399)
!7406 = !DILocation(line: 731, column: 13, scope: !7399)
!7407 = !DILocation(line: 732, column: 3, scope: !7399)
!7408 = !DILocation(line: 732, column: 8, scope: !7399)
!7409 = !DILocation(line: 732, column: 13, scope: !7399)
!7410 = !DILocation(line: 733, column: 3, scope: !7399)
!7411 = !DILocation(line: 733, column: 8, scope: !7399)
!7412 = !DILocation(line: 733, column: 18, scope: !7399)
!7413 = !DILocation(line: 734, column: 3, scope: !7399)
!7414 = !DILocation(line: 734, column: 8, scope: !7399)
!7415 = !DILocation(line: 734, column: 14, scope: !7399)
!7416 = !DILocation(line: 735, column: 3, scope: !7399)
!7417 = !DILocation(line: 735, column: 8, scope: !7399)
!7418 = !DILocation(line: 735, column: 16, scope: !7399)
!7419 = !DILocation(line: 736, column: 3, scope: !7399)
!7420 = !DILocation(line: 736, column: 8, scope: !7399)
!7421 = !DILocation(line: 736, column: 17, scope: !7399)
!7422 = !DILocation(line: 737, column: 3, scope: !7399)
!7423 = !DILocation(line: 737, column: 8, scope: !7399)
!7424 = !DILocation(line: 737, column: 13, scope: !7399)
!7425 = !DILocation(line: 738, column: 1, scope: !7399)
!7426 = distinct !DISubprogram(name: "op_iter_done", scope: !6499, file: !6499, line: 652, type: !7427, scopeLine: 653, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7427 = !DISubroutineType(types: !7428)
!7428 = !{!1603, !7429}
!7429 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7430, size: 64)
!7430 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2997)
!7431 = !DILocalVariable(name: "ptr", arg: 1, scope: !7426, file: !6499, line: 652, type: !7429)
!7432 = !DILocation(line: 652, column: 34, scope: !7426)
!7433 = !DILocation(line: 654, column: 10, scope: !7426)
!7434 = !DILocation(line: 654, column: 15, scope: !7426)
!7435 = !DILocation(line: 654, column: 3, scope: !7426)
!7436 = distinct !DISubprogram(name: "extract_and_process_scc_for_name", scope: !3, file: !3, line: 2883, type: !6529, scopeLine: 2884, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7437 = !DILocalVariable(name: "name", arg: 1, scope: !7436, file: !3, line: 2883, type: !1483)
!7438 = !DILocation(line: 2883, column: 40, scope: !7436)
!7439 = !DILocalVariable(name: "scc", scope: !7436, file: !3, line: 2885, type: !2970)
!7440 = !DILocation(line: 2885, column: 21, scope: !7436)
!7441 = !DILocalVariable(name: "x", scope: !7436, file: !3, line: 2886, type: !1483)
!7442 = !DILocation(line: 2886, column: 8, scope: !7436)
!7443 = !DILocation(line: 2890, column: 3, scope: !7436)
!7444 = !DILocation(line: 2892, column: 11, scope: !7445)
!7445 = distinct !DILexicalBlock(scope: !7436, file: !3, line: 2891, column: 5)
!7446 = !DILocation(line: 2892, column: 9, scope: !7445)
!7447 = !DILocation(line: 2894, column: 16, scope: !7445)
!7448 = !DILocation(line: 2894, column: 7, scope: !7445)
!7449 = !DILocation(line: 2894, column: 20, scope: !7445)
!7450 = !DILocation(line: 2894, column: 32, scope: !7445)
!7451 = !DILocation(line: 2895, column: 7, scope: !7445)
!7452 = !DILocation(line: 2896, column: 5, scope: !7445)
!7453 = !DILocation(line: 2896, column: 14, scope: !7436)
!7454 = !DILocation(line: 2896, column: 19, scope: !7436)
!7455 = !DILocation(line: 2896, column: 16, scope: !7436)
!7456 = distinct !{!7456, !7443, !7457}
!7457 = !DILocation(line: 2896, column: 23, scope: !7436)
!7458 = !DILocation(line: 2899, column: 7, scope: !7459)
!7459 = distinct !DILexicalBlock(scope: !7436, file: !3, line: 2899, column: 7)
!7460 = !DILocation(line: 2900, column: 19, scope: !7459)
!7461 = !DILocation(line: 2900, column: 7, scope: !7459)
!7462 = !DILocation(line: 2899, column: 7, scope: !7436)
!7463 = !DILocation(line: 2902, column: 11, scope: !7464)
!7464 = distinct !DILexicalBlock(scope: !7465, file: !3, line: 2902, column: 11)
!7465 = distinct !DILexicalBlock(scope: !7459, file: !3, line: 2901, column: 5)
!7466 = !DILocation(line: 2902, column: 11, scope: !7465)
!7467 = !DILocation(line: 2903, column: 11, scope: !7464)
!7468 = !DILocation(line: 2904, column: 34, scope: !7464)
!7469 = !DILocation(line: 2905, column: 14, scope: !7464)
!7470 = !DILocation(line: 2903, column: 2, scope: !7464)
!7471 = !DILocation(line: 2906, column: 7, scope: !7465)
!7472 = !DILocation(line: 2909, column: 7, scope: !7473)
!7473 = distinct !DILexicalBlock(scope: !7436, file: !3, line: 2909, column: 7)
!7474 = !DILocation(line: 2909, column: 30, scope: !7473)
!7475 = !DILocation(line: 2909, column: 7, scope: !7436)
!7476 = !DILocation(line: 2910, column: 15, scope: !7473)
!7477 = !DILocation(line: 2910, column: 5, scope: !7473)
!7478 = !DILocation(line: 2912, column: 7, scope: !7479)
!7479 = distinct !DILexicalBlock(scope: !7436, file: !3, line: 2912, column: 7)
!7480 = !DILocation(line: 2912, column: 17, scope: !7479)
!7481 = !DILocation(line: 2912, column: 21, scope: !7479)
!7482 = !DILocation(line: 2912, column: 32, scope: !7479)
!7483 = !DILocation(line: 2912, column: 7, scope: !7436)
!7484 = !DILocation(line: 2913, column: 16, scope: !7479)
!7485 = !DILocation(line: 2913, column: 27, scope: !7479)
!7486 = !DILocation(line: 2913, column: 5, scope: !7479)
!7487 = !DILocation(line: 2915, column: 16, scope: !7436)
!7488 = !DILocation(line: 2915, column: 3, scope: !7436)
!7489 = !DILocation(line: 2917, column: 3, scope: !7436)
!7490 = !DILocation(line: 2919, column: 3, scope: !7436)
!7491 = !DILocation(line: 2920, column: 1, scope: !7436)
!7492 = distinct !DISubprogram(name: "VEC_ssa_op_iter_heap_free", scope: !3, file: !3, line: 2876, type: !7493, scopeLine: 2876, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7493 = !DISubroutineType(types: !7494)
!7494 = !{null, !7495}
!7495 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2985, size: 64)
!7496 = !DILocalVariable(name: "vec_", arg: 1, scope: !7492, file: !3, line: 2876, type: !7495)
!7497 = !DILocation(line: 2876, column: 1, scope: !7492)
!7498 = !DILocation(line: 2876, column: 1, scope: !7499)
!7499 = distinct !DILexicalBlock(scope: !7492, file: !3, line: 2876, column: 1)
!7500 = distinct !DISubprogram(name: "VEC_tree_base_pop", scope: !135, file: !135, line: 182, type: !7501, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7501 = !DISubroutineType(types: !7502)
!7502 = !{!1483, !7503}
!7503 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2365, size: 64)
!7504 = !DILocalVariable(name: "vec_", arg: 1, scope: !7500, file: !135, line: 182, type: !7503)
!7505 = !DILocation(line: 182, column: 1, scope: !7500)
!7506 = !DILocalVariable(name: "obj_", scope: !7500, file: !135, line: 182, type: !1483)
!7507 = distinct !DISubprogram(name: "VEC_ssa_op_iter_base_last", scope: !3, file: !3, line: 2875, type: !7508, scopeLine: 2875, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7508 = !DISubroutineType(types: !7509)
!7509 = !{!7332, !7510}
!7510 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2990, size: 64)
!7511 = !DILocalVariable(name: "vec_", arg: 1, scope: !7507, file: !3, line: 2875, type: !7510)
!7512 = !DILocation(line: 2875, column: 1, scope: !7507)
!7513 = !DILocation(line: 0, scope: !7507)
!7514 = distinct !DISubprogram(name: "VEC_ssa_op_iter_base_pop", scope: !3, file: !3, line: 2875, type: !7515, scopeLine: 2875, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7515 = !DISubroutineType(types: !7516)
!7516 = !{null, !7510}
!7517 = !DILocalVariable(name: "vec_", arg: 1, scope: !7514, file: !3, line: 2875, type: !7510)
!7518 = !DILocation(line: 2875, column: 1, scope: !7514)
!7519 = distinct !DISubprogram(name: "get_use_from_ptr", scope: !6499, file: !6499, line: 427, type: !7520, scopeLine: 428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7520 = !DISubroutineType(types: !7521)
!7521 = !{!1483, !2979}
!7522 = !DILocalVariable(name: "use", arg: 1, scope: !7519, file: !6499, line: 427, type: !2979)
!7523 = !DILocation(line: 427, column: 33, scope: !7519)
!7524 = !DILocation(line: 429, column: 12, scope: !7519)
!7525 = !DILocation(line: 429, column: 17, scope: !7519)
!7526 = !DILocation(line: 429, column: 10, scope: !7519)
!7527 = !DILocation(line: 429, column: 3, scope: !7519)
!7528 = distinct !DISubprogram(name: "VEC_ssa_op_iter_heap_safe_push", scope: !3, file: !3, line: 2876, type: !7529, scopeLine: 2876, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7529 = !DISubroutineType(types: !7530)
!7530 = !{!7332, !7495, !7429}
!7531 = !DILocalVariable(name: "vec_", arg: 1, scope: !7528, file: !3, line: 2876, type: !7495)
!7532 = !DILocation(line: 2876, column: 1, scope: !7528)
!7533 = !DILocalVariable(name: "obj_", arg: 2, scope: !7528, file: !3, line: 2876, type: !7429)
!7534 = distinct !DISubprogram(name: "op_iter_next_use", scope: !6499, file: !6499, line: 659, type: !7535, scopeLine: 660, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7535 = !DISubroutineType(types: !7536)
!7536 = !{!2979, !7332}
!7537 = !DILocalVariable(name: "ptr", arg: 1, scope: !7534, file: !6499, line: 659, type: !7332)
!7538 = !DILocation(line: 659, column: 32, scope: !7534)
!7539 = !DILocalVariable(name: "use_p", scope: !7534, file: !6499, line: 661, type: !2979)
!7540 = !DILocation(line: 661, column: 17, scope: !7534)
!7541 = !DILocation(line: 665, column: 7, scope: !7542)
!7542 = distinct !DILexicalBlock(scope: !7534, file: !6499, line: 665, column: 7)
!7543 = !DILocation(line: 665, column: 12, scope: !7542)
!7544 = !DILocation(line: 665, column: 7, scope: !7534)
!7545 = !DILocation(line: 667, column: 15, scope: !7546)
!7546 = distinct !DILexicalBlock(scope: !7542, file: !6499, line: 666, column: 5)
!7547 = !DILocation(line: 667, column: 13, scope: !7546)
!7548 = !DILocation(line: 668, column: 19, scope: !7546)
!7549 = !DILocation(line: 668, column: 24, scope: !7546)
!7550 = !DILocation(line: 668, column: 30, scope: !7546)
!7551 = !DILocation(line: 668, column: 7, scope: !7546)
!7552 = !DILocation(line: 668, column: 12, scope: !7546)
!7553 = !DILocation(line: 668, column: 17, scope: !7546)
!7554 = !DILocation(line: 669, column: 14, scope: !7546)
!7555 = !DILocation(line: 669, column: 7, scope: !7546)
!7556 = !DILocation(line: 671, column: 7, scope: !7557)
!7557 = distinct !DILexicalBlock(scope: !7534, file: !6499, line: 671, column: 7)
!7558 = !DILocation(line: 671, column: 12, scope: !7557)
!7559 = !DILocation(line: 671, column: 20, scope: !7557)
!7560 = !DILocation(line: 671, column: 25, scope: !7557)
!7561 = !DILocation(line: 671, column: 18, scope: !7557)
!7562 = !DILocation(line: 671, column: 7, scope: !7534)
!7563 = !DILocation(line: 673, column: 14, scope: !7564)
!7564 = distinct !DILexicalBlock(scope: !7557, file: !6499, line: 672, column: 5)
!7565 = !DILocation(line: 673, column: 7, scope: !7564)
!7566 = !DILocation(line: 675, column: 3, scope: !7534)
!7567 = !DILocation(line: 675, column: 8, scope: !7534)
!7568 = !DILocation(line: 675, column: 13, scope: !7534)
!7569 = !DILocation(line: 676, column: 3, scope: !7534)
!7570 = !DILocation(line: 677, column: 1, scope: !7534)
!7571 = distinct !DISubprogram(name: "VEC_tree_heap_reserve", scope: !135, file: !135, line: 184, type: !7572, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7572 = !DISubroutineType(types: !7573)
!7573 = !{!1580, !6106, !1580}
!7574 = !DILocalVariable(name: "vec_", arg: 1, scope: !7571, file: !135, line: 184, type: !6106)
!7575 = !DILocation(line: 184, column: 1, scope: !7571)
!7576 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7571, file: !135, line: 184, type: !1580)
!7577 = !DILocalVariable(name: "extend", scope: !7571, file: !135, line: 184, type: !1580)
!7578 = !DILocation(line: 184, column: 1, scope: !7579)
!7579 = distinct !DILexicalBlock(scope: !7571, file: !135, line: 184, column: 1)
!7580 = distinct !DISubprogram(name: "VEC_tree_base_quick_push", scope: !135, file: !135, line: 182, type: !7581, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7581 = !DISubroutineType(types: !7582)
!7582 = !{!1848, !7503, !1483}
!7583 = !DILocalVariable(name: "vec_", arg: 1, scope: !7580, file: !135, line: 182, type: !7503)
!7584 = !DILocation(line: 182, column: 1, scope: !7580)
!7585 = !DILocalVariable(name: "obj_", arg: 2, scope: !7580, file: !135, line: 182, type: !1483)
!7586 = !DILocalVariable(name: "slot_", scope: !7580, file: !135, line: 182, type: !1848)
!7587 = distinct !DISubprogram(name: "VEC_tree_base_space", scope: !135, file: !135, line: 182, type: !7588, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7588 = !DISubroutineType(types: !7589)
!7589 = !{!1580, !7503, !1580}
!7590 = !DILocalVariable(name: "vec_", arg: 1, scope: !7587, file: !135, line: 182, type: !7503)
!7591 = !DILocation(line: 182, column: 1, scope: !7587)
!7592 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7587, file: !135, line: 182, type: !1580)
!7593 = distinct !DISubprogram(name: "gimple_phi_result", scope: !391, file: !391, line: 3071, type: !3264, scopeLine: 3072, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7594 = !DILocalVariable(name: "gs", arg: 1, scope: !7593, file: !391, line: 3071, type: !3220)
!7595 = !DILocation(line: 3071, column: 33, scope: !7593)
!7596 = !DILocation(line: 3074, column: 10, scope: !7593)
!7597 = !DILocation(line: 3074, column: 14, scope: !7593)
!7598 = !DILocation(line: 3074, column: 25, scope: !7593)
!7599 = !DILocation(line: 3074, column: 3, scope: !7593)
!7600 = distinct !DISubprogram(name: "gimple_phi_num_args", scope: !391, file: !391, line: 3061, type: !4154, scopeLine: 3062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7601 = !DILocalVariable(name: "gs", arg: 1, scope: !7600, file: !391, line: 3061, type: !3220)
!7602 = !DILocation(line: 3061, column: 35, scope: !7600)
!7603 = !DILocation(line: 3064, column: 10, scope: !7600)
!7604 = !DILocation(line: 3064, column: 14, scope: !7600)
!7605 = !DILocation(line: 3064, column: 25, scope: !7600)
!7606 = !DILocation(line: 3064, column: 3, scope: !7600)
!7607 = distinct !DISubprogram(name: "op_iter_init", scope: !6499, file: !6499, line: 742, type: !7608, scopeLine: 743, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7608 = !DISubroutineType(types: !7609)
!7609 = !{null, !7332, !1814, !1580}
!7610 = !DILocalVariable(name: "ptr", arg: 1, scope: !7607, file: !6499, line: 742, type: !7332)
!7611 = !DILocation(line: 742, column: 28, scope: !7607)
!7612 = !DILocalVariable(name: "stmt", arg: 2, scope: !7607, file: !6499, line: 742, type: !1814)
!7613 = !DILocation(line: 742, column: 40, scope: !7607)
!7614 = !DILocalVariable(name: "flags", arg: 3, scope: !7607, file: !6499, line: 742, type: !1580)
!7615 = !DILocation(line: 742, column: 50, scope: !7607)
!7616 = !DILocation(line: 746, column: 3, scope: !7607)
!7617 = !DILocation(line: 748, column: 16, scope: !7607)
!7618 = !DILocation(line: 748, column: 22, scope: !7607)
!7619 = !DILocation(line: 748, column: 15, scope: !7607)
!7620 = !DILocation(line: 748, column: 68, scope: !7607)
!7621 = !DILocation(line: 748, column: 52, scope: !7607)
!7622 = !DILocation(line: 748, column: 3, scope: !7607)
!7623 = !DILocation(line: 748, column: 8, scope: !7607)
!7624 = !DILocation(line: 748, column: 13, scope: !7607)
!7625 = !DILocation(line: 749, column: 9, scope: !7626)
!7626 = distinct !DILexicalBlock(scope: !7607, file: !6499, line: 749, column: 7)
!7627 = !DILocation(line: 749, column: 15, scope: !7626)
!7628 = !DILocation(line: 750, column: 7, scope: !7626)
!7629 = !DILocation(line: 750, column: 10, scope: !7626)
!7630 = !DILocation(line: 750, column: 15, scope: !7626)
!7631 = !DILocation(line: 751, column: 7, scope: !7626)
!7632 = !DILocation(line: 751, column: 23, scope: !7626)
!7633 = !DILocation(line: 751, column: 10, scope: !7626)
!7634 = !DILocation(line: 751, column: 29, scope: !7626)
!7635 = !DILocation(line: 749, column: 7, scope: !7607)
!7636 = !DILocation(line: 752, column: 17, scope: !7626)
!7637 = !DILocation(line: 752, column: 22, scope: !7626)
!7638 = !DILocation(line: 752, column: 28, scope: !7626)
!7639 = !DILocation(line: 752, column: 5, scope: !7626)
!7640 = !DILocation(line: 752, column: 10, scope: !7626)
!7641 = !DILocation(line: 752, column: 15, scope: !7626)
!7642 = !DILocation(line: 753, column: 16, scope: !7607)
!7643 = !DILocation(line: 753, column: 22, scope: !7607)
!7644 = !DILocation(line: 753, column: 15, scope: !7607)
!7645 = !DILocation(line: 753, column: 68, scope: !7607)
!7646 = !DILocation(line: 753, column: 52, scope: !7607)
!7647 = !DILocation(line: 753, column: 3, scope: !7607)
!7648 = !DILocation(line: 753, column: 8, scope: !7607)
!7649 = !DILocation(line: 753, column: 13, scope: !7607)
!7650 = !DILocation(line: 754, column: 9, scope: !7651)
!7651 = distinct !DILexicalBlock(scope: !7607, file: !6499, line: 754, column: 7)
!7652 = !DILocation(line: 754, column: 15, scope: !7651)
!7653 = !DILocation(line: 755, column: 7, scope: !7651)
!7654 = !DILocation(line: 755, column: 10, scope: !7651)
!7655 = !DILocation(line: 755, column: 15, scope: !7651)
!7656 = !DILocation(line: 756, column: 7, scope: !7651)
!7657 = !DILocation(line: 756, column: 23, scope: !7651)
!7658 = !DILocation(line: 756, column: 10, scope: !7651)
!7659 = !DILocation(line: 756, column: 29, scope: !7651)
!7660 = !DILocation(line: 754, column: 7, scope: !7607)
!7661 = !DILocation(line: 757, column: 17, scope: !7651)
!7662 = !DILocation(line: 757, column: 22, scope: !7651)
!7663 = !DILocation(line: 757, column: 28, scope: !7651)
!7664 = !DILocation(line: 757, column: 5, scope: !7651)
!7665 = !DILocation(line: 757, column: 10, scope: !7651)
!7666 = !DILocation(line: 757, column: 15, scope: !7651)
!7667 = !DILocation(line: 758, column: 3, scope: !7607)
!7668 = !DILocation(line: 758, column: 8, scope: !7607)
!7669 = !DILocation(line: 758, column: 13, scope: !7607)
!7670 = !DILocation(line: 760, column: 3, scope: !7607)
!7671 = !DILocation(line: 760, column: 8, scope: !7607)
!7672 = !DILocation(line: 760, column: 14, scope: !7607)
!7673 = !DILocation(line: 761, column: 3, scope: !7607)
!7674 = !DILocation(line: 761, column: 8, scope: !7607)
!7675 = !DILocation(line: 761, column: 16, scope: !7607)
!7676 = !DILocation(line: 762, column: 3, scope: !7607)
!7677 = !DILocation(line: 762, column: 8, scope: !7607)
!7678 = !DILocation(line: 762, column: 17, scope: !7607)
!7679 = !DILocation(line: 763, column: 1, scope: !7607)
!7680 = distinct !DISubprogram(name: "gimple_def_ops", scope: !391, file: !391, line: 1292, type: !7681, scopeLine: 1293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7681 = !DISubroutineType(types: !7682)
!7682 = !{!1843, !3220}
!7683 = !DILocalVariable(name: "g", arg: 1, scope: !7680, file: !391, line: 1292, type: !3220)
!7684 = !DILocation(line: 1292, column: 30, scope: !7680)
!7685 = !DILocation(line: 1294, column: 24, scope: !7686)
!7686 = distinct !DILexicalBlock(scope: !7680, file: !391, line: 1294, column: 7)
!7687 = !DILocation(line: 1294, column: 8, scope: !7686)
!7688 = !DILocation(line: 1294, column: 7, scope: !7680)
!7689 = !DILocation(line: 1295, column: 5, scope: !7686)
!7690 = !DILocation(line: 1296, column: 10, scope: !7680)
!7691 = !DILocation(line: 1296, column: 13, scope: !7680)
!7692 = !DILocation(line: 1296, column: 19, scope: !7680)
!7693 = !DILocation(line: 1296, column: 26, scope: !7680)
!7694 = !DILocation(line: 1296, column: 3, scope: !7680)
!7695 = !DILocation(line: 1297, column: 1, scope: !7680)
!7696 = distinct !DISubprogram(name: "gimple_vdef", scope: !391, file: !391, line: 1375, type: !3264, scopeLine: 1376, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7697 = !DILocalVariable(name: "g", arg: 1, scope: !7696, file: !391, line: 1375, type: !3220)
!7698 = !DILocation(line: 1375, column: 27, scope: !7696)
!7699 = !DILocation(line: 1377, column: 28, scope: !7700)
!7700 = distinct !DILexicalBlock(scope: !7696, file: !391, line: 1377, column: 7)
!7701 = !DILocation(line: 1377, column: 8, scope: !7700)
!7702 = !DILocation(line: 1377, column: 7, scope: !7696)
!7703 = !DILocation(line: 1378, column: 5, scope: !7700)
!7704 = !DILocation(line: 1379, column: 10, scope: !7696)
!7705 = !DILocation(line: 1379, column: 13, scope: !7696)
!7706 = !DILocation(line: 1379, column: 23, scope: !7696)
!7707 = !DILocation(line: 1379, column: 3, scope: !7696)
!7708 = !DILocation(line: 1380, column: 1, scope: !7696)
!7709 = distinct !DISubprogram(name: "gimple_use_ops", scope: !391, file: !391, line: 1313, type: !7710, scopeLine: 1314, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7710 = !DISubroutineType(types: !7711)
!7711 = !{!1850, !3220}
!7712 = !DILocalVariable(name: "g", arg: 1, scope: !7709, file: !391, line: 1313, type: !3220)
!7713 = !DILocation(line: 1313, column: 30, scope: !7709)
!7714 = !DILocation(line: 1315, column: 24, scope: !7715)
!7715 = distinct !DILexicalBlock(scope: !7709, file: !391, line: 1315, column: 7)
!7716 = !DILocation(line: 1315, column: 8, scope: !7715)
!7717 = !DILocation(line: 1315, column: 7, scope: !7709)
!7718 = !DILocation(line: 1316, column: 5, scope: !7715)
!7719 = !DILocation(line: 1317, column: 10, scope: !7709)
!7720 = !DILocation(line: 1317, column: 13, scope: !7709)
!7721 = !DILocation(line: 1317, column: 19, scope: !7709)
!7722 = !DILocation(line: 1317, column: 26, scope: !7709)
!7723 = !DILocation(line: 1317, column: 3, scope: !7709)
!7724 = !DILocation(line: 1318, column: 1, scope: !7709)
!7725 = distinct !DISubprogram(name: "gimple_vuse", scope: !391, file: !391, line: 1365, type: !3264, scopeLine: 1366, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7726 = !DILocalVariable(name: "g", arg: 1, scope: !7725, file: !391, line: 1365, type: !3220)
!7727 = !DILocation(line: 1365, column: 27, scope: !7725)
!7728 = !DILocation(line: 1367, column: 28, scope: !7729)
!7729 = distinct !DILexicalBlock(scope: !7725, file: !391, line: 1367, column: 7)
!7730 = !DILocation(line: 1367, column: 8, scope: !7729)
!7731 = !DILocation(line: 1367, column: 7, scope: !7725)
!7732 = !DILocation(line: 1368, column: 5, scope: !7729)
!7733 = !DILocation(line: 1369, column: 10, scope: !7725)
!7734 = !DILocation(line: 1369, column: 13, scope: !7725)
!7735 = !DILocation(line: 1369, column: 23, scope: !7725)
!7736 = !DILocation(line: 1369, column: 3, scope: !7725)
!7737 = !DILocation(line: 1370, column: 1, scope: !7725)
!7738 = distinct !DISubprogram(name: "gimple_has_mem_ops", scope: !391, file: !391, line: 1283, type: !3218, scopeLine: 1284, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7739 = !DILocalVariable(name: "g", arg: 1, scope: !7738, file: !391, line: 1283, type: !3220)
!7740 = !DILocation(line: 1283, column: 34, scope: !7738)
!7741 = !DILocation(line: 1285, column: 23, scope: !7738)
!7742 = !DILocation(line: 1285, column: 10, scope: !7738)
!7743 = !DILocation(line: 1285, column: 26, scope: !7738)
!7744 = !DILocation(line: 1285, column: 43, scope: !7738)
!7745 = !DILocation(line: 1285, column: 59, scope: !7738)
!7746 = !DILocation(line: 1285, column: 46, scope: !7738)
!7747 = !DILocation(line: 1285, column: 62, scope: !7738)
!7748 = !DILocation(line: 0, scope: !7738)
!7749 = !DILocation(line: 1285, column: 3, scope: !7738)
!7750 = distinct !DISubprogram(name: "sort_scc", scope: !3, file: !3, line: 2752, type: !7751, scopeLine: 2753, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7751 = !DISubroutineType(types: !7752)
!7752 = !{null, !2970}
!7753 = !DILocalVariable(name: "scc", arg: 1, scope: !7750, file: !3, line: 2752, type: !2970)
!7754 = !DILocation(line: 2752, column: 29, scope: !7750)
!7755 = !DILocation(line: 2755, column: 15, scope: !7750)
!7756 = !DILocation(line: 2756, column: 15, scope: !7750)
!7757 = !DILocation(line: 2755, column: 3, scope: !7750)
!7758 = !DILocation(line: 2765, column: 1, scope: !7750)
!7759 = distinct !DISubprogram(name: "print_scc", scope: !3, file: !3, line: 1780, type: !7760, scopeLine: 1781, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7760 = !DISubroutineType(types: !7761)
!7761 = !{null, !7762, !2970}
!7762 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7763, size: 64)
!7763 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !7764, line: 7, baseType: !7765)
!7764 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!7765 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !7766, line: 49, size: 1728, elements: !7767)
!7766 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!7767 = !{!7768, !7769, !7770, !7771, !7772, !7773, !7774, !7775, !7776, !7777, !7778, !7779, !7780, !7783, !7785, !7786, !7787, !7790, !7791, !7792, !7793, !7796, !7798, !7801, !7804, !7805, !7806, !7807, !7808}
!7768 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !7765, file: !7766, line: 51, baseType: !1580, size: 32)
!7769 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !7765, file: !7766, line: 54, baseType: !1752, size: 64, offset: 64)
!7770 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !7765, file: !7766, line: 55, baseType: !1752, size: 64, offset: 128)
!7771 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !7765, file: !7766, line: 56, baseType: !1752, size: 64, offset: 192)
!7772 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !7765, file: !7766, line: 57, baseType: !1752, size: 64, offset: 256)
!7773 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !7765, file: !7766, line: 58, baseType: !1752, size: 64, offset: 320)
!7774 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !7765, file: !7766, line: 59, baseType: !1752, size: 64, offset: 384)
!7775 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !7765, file: !7766, line: 60, baseType: !1752, size: 64, offset: 448)
!7776 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !7765, file: !7766, line: 61, baseType: !1752, size: 64, offset: 512)
!7777 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !7765, file: !7766, line: 64, baseType: !1752, size: 64, offset: 576)
!7778 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !7765, file: !7766, line: 65, baseType: !1752, size: 64, offset: 640)
!7779 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !7765, file: !7766, line: 66, baseType: !1752, size: 64, offset: 704)
!7780 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !7765, file: !7766, line: 68, baseType: !7781, size: 64, offset: 768)
!7781 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7782, size: 64)
!7782 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !7766, line: 36, flags: DIFlagFwdDecl)
!7783 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !7765, file: !7766, line: 70, baseType: !7784, size: 64, offset: 832)
!7784 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7765, size: 64)
!7785 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !7765, file: !7766, line: 72, baseType: !1580, size: 32, offset: 896)
!7786 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !7765, file: !7766, line: 73, baseType: !1580, size: 32, offset: 928)
!7787 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !7765, file: !7766, line: 74, baseType: !7788, size: 64, offset: 960)
!7788 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !7789, line: 152, baseType: !1539)
!7789 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!7790 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !7765, file: !7766, line: 77, baseType: !2889, size: 16, offset: 1024)
!7791 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !7765, file: !7766, line: 78, baseType: !2668, size: 8, offset: 1040)
!7792 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !7765, file: !7766, line: 79, baseType: !1582, size: 8, offset: 1048)
!7793 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !7765, file: !7766, line: 81, baseType: !7794, size: 64, offset: 1088)
!7794 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7795, size: 64)
!7795 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !7766, line: 43, baseType: null)
!7796 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !7765, file: !7766, line: 89, baseType: !7797, size: 64, offset: 1152)
!7797 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !7789, line: 153, baseType: !1539)
!7798 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !7765, file: !7766, line: 91, baseType: !7799, size: 64, offset: 1216)
!7799 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7800, size: 64)
!7800 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !7766, line: 37, flags: DIFlagFwdDecl)
!7801 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !7765, file: !7766, line: 92, baseType: !7802, size: 64, offset: 1280)
!7802 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7803, size: 64)
!7803 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !7766, line: 38, flags: DIFlagFwdDecl)
!7804 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !7765, file: !7766, line: 93, baseType: !7784, size: 64, offset: 1344)
!7805 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !7765, file: !7766, line: 94, baseType: !1767, size: 64, offset: 1408)
!7806 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !7765, file: !7766, line: 95, baseType: !1959, size: 64, offset: 1472)
!7807 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !7765, file: !7766, line: 96, baseType: !1580, size: 32, offset: 1536)
!7808 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !7765, file: !7766, line: 98, baseType: !7809, size: 160, offset: 1568)
!7809 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1583, size: 160, elements: !7810)
!7810 = !{!7811}
!7811 = !DISubrange(count: 20)
!7812 = !DILocalVariable(name: "out", arg: 1, scope: !7759, file: !3, line: 1780, type: !7762)
!7813 = !DILocation(line: 1780, column: 18, scope: !7759)
!7814 = !DILocalVariable(name: "scc", arg: 2, scope: !7759, file: !3, line: 1780, type: !2970)
!7815 = !DILocation(line: 1780, column: 41, scope: !7759)
!7816 = !DILocalVariable(name: "var", scope: !7759, file: !3, line: 1782, type: !1483)
!7817 = !DILocation(line: 1782, column: 8, scope: !7759)
!7818 = !DILocalVariable(name: "i", scope: !7759, file: !3, line: 1783, type: !7)
!7819 = !DILocation(line: 1783, column: 16, scope: !7759)
!7820 = !DILocation(line: 1785, column: 12, scope: !7759)
!7821 = !DILocation(line: 1785, column: 3, scope: !7759)
!7822 = !DILocation(line: 1786, column: 10, scope: !7823)
!7823 = distinct !DILexicalBlock(scope: !7759, file: !3, line: 1786, column: 3)
!7824 = !DILocation(line: 1786, column: 8, scope: !7823)
!7825 = !DILocation(line: 1786, column: 15, scope: !7826)
!7826 = distinct !DILexicalBlock(scope: !7823, file: !3, line: 1786, column: 3)
!7827 = !DILocation(line: 1786, column: 3, scope: !7823)
!7828 = !DILocation(line: 1788, column: 27, scope: !7829)
!7829 = distinct !DILexicalBlock(scope: !7826, file: !3, line: 1787, column: 5)
!7830 = !DILocation(line: 1788, column: 32, scope: !7829)
!7831 = !DILocation(line: 1788, column: 7, scope: !7829)
!7832 = !DILocation(line: 1789, column: 16, scope: !7829)
!7833 = !DILocation(line: 1789, column: 7, scope: !7829)
!7834 = !DILocation(line: 1790, column: 5, scope: !7829)
!7835 = !DILocation(line: 1786, column: 49, scope: !7826)
!7836 = !DILocation(line: 1786, column: 3, scope: !7826)
!7837 = distinct !{!7837, !7827, !7838}
!7838 = !DILocation(line: 1790, column: 5, scope: !7823)
!7839 = !DILocation(line: 1791, column: 12, scope: !7759)
!7840 = !DILocation(line: 1791, column: 3, scope: !7759)
!7841 = !DILocation(line: 1792, column: 1, scope: !7759)
!7842 = distinct !DISubprogram(name: "process_scc", scope: !3, file: !3, line: 2824, type: !7751, scopeLine: 2825, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7843 = !DILocalVariable(name: "scc", arg: 1, scope: !7842, file: !3, line: 2824, type: !2970)
!7844 = !DILocation(line: 2824, column: 32, scope: !7842)
!7845 = !DILocation(line: 2828, column: 7, scope: !7846)
!7846 = distinct !DILexicalBlock(scope: !7842, file: !3, line: 2828, column: 7)
!7847 = !DILocation(line: 2828, column: 30, scope: !7846)
!7848 = !DILocation(line: 2828, column: 7, scope: !7842)
!7849 = !DILocalVariable(name: "use", scope: !7850, file: !3, line: 2830, type: !1483)
!7850 = distinct !DILexicalBlock(scope: !7846, file: !3, line: 2829, column: 5)
!7851 = !DILocation(line: 2830, column: 12, scope: !7850)
!7852 = !DILocation(line: 2830, column: 18, scope: !7850)
!7853 = !DILocation(line: 2831, column: 21, scope: !7854)
!7854 = distinct !DILexicalBlock(scope: !7850, file: !3, line: 2831, column: 11)
!7855 = !DILocation(line: 2831, column: 12, scope: !7854)
!7856 = !DILocation(line: 2831, column: 27, scope: !7854)
!7857 = !DILocation(line: 2831, column: 11, scope: !7850)
!7858 = !DILocation(line: 2832, column: 13, scope: !7854)
!7859 = !DILocation(line: 2832, column: 2, scope: !7854)
!7860 = !DILocation(line: 2833, column: 5, scope: !7850)
!7861 = !DILocalVariable(name: "var", scope: !7862, file: !3, line: 2836, type: !1483)
!7862 = distinct !DILexicalBlock(scope: !7846, file: !3, line: 2835, column: 5)
!7863 = !DILocation(line: 2836, column: 12, scope: !7862)
!7864 = !DILocalVariable(name: "i", scope: !7862, file: !3, line: 2837, type: !7)
!7865 = !DILocation(line: 2837, column: 20, scope: !7862)
!7866 = !DILocalVariable(name: "iterations", scope: !7862, file: !3, line: 2838, type: !7)
!7867 = !DILocation(line: 2838, column: 20, scope: !7862)
!7868 = !DILocalVariable(name: "changed", scope: !7862, file: !3, line: 2839, type: !1603)
!7869 = !DILocation(line: 2839, column: 12, scope: !7862)
!7870 = !DILocation(line: 2843, column: 22, scope: !7862)
!7871 = !DILocation(line: 2843, column: 20, scope: !7862)
!7872 = !DILocation(line: 2844, column: 7, scope: !7862)
!7873 = !DILocation(line: 2844, column: 14, scope: !7862)
!7874 = !DILocation(line: 2846, column: 12, scope: !7875)
!7875 = distinct !DILexicalBlock(scope: !7862, file: !3, line: 2845, column: 2)
!7876 = !DILocation(line: 2847, column: 14, scope: !7875)
!7877 = !DILocation(line: 2851, column: 16, scope: !7875)
!7878 = !DILocation(line: 2851, column: 33, scope: !7875)
!7879 = !DILocation(line: 2851, column: 4, scope: !7875)
!7880 = !DILocation(line: 2852, column: 16, scope: !7875)
!7881 = !DILocation(line: 2852, column: 33, scope: !7875)
!7882 = !DILocation(line: 2852, column: 4, scope: !7875)
!7883 = !DILocation(line: 2853, column: 16, scope: !7875)
!7884 = !DILocation(line: 2853, column: 33, scope: !7875)
!7885 = !DILocation(line: 2853, column: 4, scope: !7875)
!7886 = !DILocation(line: 2854, column: 4, scope: !7875)
!7887 = !DILocation(line: 2855, column: 4, scope: !7875)
!7888 = !DILocation(line: 2856, column: 22, scope: !7875)
!7889 = !DILocation(line: 2856, column: 39, scope: !7875)
!7890 = !DILocation(line: 2856, column: 4, scope: !7875)
!7891 = !DILocation(line: 2857, column: 22, scope: !7875)
!7892 = !DILocation(line: 2857, column: 39, scope: !7875)
!7893 = !DILocation(line: 2857, column: 4, scope: !7875)
!7894 = !DILocation(line: 2858, column: 11, scope: !7895)
!7895 = distinct !DILexicalBlock(scope: !7875, file: !3, line: 2858, column: 4)
!7896 = !DILocation(line: 2858, column: 9, scope: !7895)
!7897 = !DILocation(line: 2858, column: 16, scope: !7898)
!7898 = distinct !DILexicalBlock(scope: !7895, file: !3, line: 2858, column: 4)
!7899 = !DILocation(line: 2858, column: 4, scope: !7895)
!7900 = !DILocation(line: 2859, column: 15, scope: !7898)
!7901 = !DILocation(line: 2859, column: 6, scope: !7898)
!7902 = !DILocation(line: 2859, column: 21, scope: !7898)
!7903 = !DILocation(line: 2859, column: 26, scope: !7898)
!7904 = !DILocation(line: 2858, column: 50, scope: !7898)
!7905 = !DILocation(line: 2858, column: 4, scope: !7898)
!7906 = distinct !{!7906, !7899, !7907}
!7907 = !DILocation(line: 2859, column: 28, scope: !7895)
!7908 = !DILocation(line: 2860, column: 11, scope: !7909)
!7909 = distinct !DILexicalBlock(scope: !7875, file: !3, line: 2860, column: 4)
!7910 = !DILocation(line: 2860, column: 9, scope: !7909)
!7911 = !DILocation(line: 2860, column: 16, scope: !7912)
!7912 = distinct !DILexicalBlock(scope: !7909, file: !3, line: 2860, column: 4)
!7913 = !DILocation(line: 2860, column: 4, scope: !7909)
!7914 = !DILocation(line: 2861, column: 28, scope: !7912)
!7915 = !DILocation(line: 2861, column: 17, scope: !7912)
!7916 = !DILocation(line: 2861, column: 14, scope: !7912)
!7917 = !DILocation(line: 2861, column: 6, scope: !7912)
!7918 = !DILocation(line: 2860, column: 50, scope: !7912)
!7919 = !DILocation(line: 2860, column: 4, scope: !7912)
!7920 = distinct !{!7920, !7913, !7921}
!7921 = !DILocation(line: 2861, column: 31, scope: !7909)
!7922 = distinct !{!7922, !7872, !7923}
!7923 = !DILocation(line: 2862, column: 2, scope: !7862)
!7924 = !DILocation(line: 2864, column: 35, scope: !7862)
!7925 = !DILocation(line: 2864, column: 59, scope: !7862)
!7926 = !DILocation(line: 2864, column: 7, scope: !7862)
!7927 = !DILocation(line: 2868, column: 22, scope: !7862)
!7928 = !DILocation(line: 2868, column: 20, scope: !7862)
!7929 = !DILocation(line: 2869, column: 22, scope: !7862)
!7930 = !DILocation(line: 2869, column: 39, scope: !7862)
!7931 = !DILocation(line: 2869, column: 7, scope: !7862)
!7932 = !DILocation(line: 2870, column: 22, scope: !7862)
!7933 = !DILocation(line: 2870, column: 39, scope: !7862)
!7934 = !DILocation(line: 2870, column: 7, scope: !7862)
!7935 = !DILocation(line: 2871, column: 22, scope: !7862)
!7936 = !DILocation(line: 2871, column: 39, scope: !7862)
!7937 = !DILocation(line: 2871, column: 7, scope: !7862)
!7938 = !DILocation(line: 2873, column: 1, scope: !7842)
!7939 = distinct !DISubprogram(name: "VEC_tree_base_address", scope: !135, file: !135, line: 182, type: !7940, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7940 = !DISubroutineType(types: !7941)
!7941 = !{!1848, !7503}
!7942 = !DILocalVariable(name: "vec_", arg: 1, scope: !7939, file: !135, line: 182, type: !7503)
!7943 = !DILocation(line: 182, column: 1, scope: !7939)
!7944 = distinct !DISubprogram(name: "compare_ops", scope: !3, file: !3, line: 2703, type: !2313, scopeLine: 2704, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!7945 = !DILocalVariable(name: "pa", arg: 1, scope: !7944, file: !3, line: 2703, type: !2308)
!7946 = !DILocation(line: 2703, column: 26, scope: !7944)
!7947 = !DILocalVariable(name: "pb", arg: 2, scope: !7944, file: !3, line: 2703, type: !2308)
!7948 = !DILocation(line: 2703, column: 42, scope: !7944)
!7949 = !DILocalVariable(name: "opa", scope: !7944, file: !3, line: 2705, type: !2983)
!7950 = !DILocation(line: 2705, column: 14, scope: !7944)
!7951 = !DILocation(line: 2705, column: 36, scope: !7944)
!7952 = !DILocation(line: 2705, column: 22, scope: !7944)
!7953 = !DILocation(line: 2705, column: 20, scope: !7944)
!7954 = !DILocalVariable(name: "opb", scope: !7944, file: !3, line: 2706, type: !2983)
!7955 = !DILocation(line: 2706, column: 14, scope: !7944)
!7956 = !DILocation(line: 2706, column: 36, scope: !7944)
!7957 = !DILocation(line: 2706, column: 22, scope: !7944)
!7958 = !DILocation(line: 2706, column: 20, scope: !7944)
!7959 = !DILocalVariable(name: "opstmta", scope: !7944, file: !3, line: 2707, type: !1814)
!7960 = !DILocation(line: 2707, column: 10, scope: !7944)
!7961 = !DILocation(line: 2707, column: 20, scope: !7944)
!7962 = !DILocalVariable(name: "opstmtb", scope: !7944, file: !3, line: 2708, type: !1814)
!7963 = !DILocation(line: 2708, column: 10, scope: !7944)
!7964 = !DILocation(line: 2708, column: 20, scope: !7944)
!7965 = !DILocalVariable(name: "bba", scope: !7944, file: !3, line: 2709, type: !2266)
!7966 = !DILocation(line: 2709, column: 15, scope: !7944)
!7967 = !DILocalVariable(name: "bbb", scope: !7944, file: !3, line: 2710, type: !2266)
!7968 = !DILocation(line: 2710, column: 15, scope: !7944)
!7969 = !DILocation(line: 2712, column: 21, scope: !7970)
!7970 = distinct !DILexicalBlock(scope: !7944, file: !3, line: 2712, column: 7)
!7971 = !DILocation(line: 2712, column: 7, scope: !7970)
!7972 = !DILocation(line: 2712, column: 30, scope: !7970)
!7973 = !DILocation(line: 2712, column: 47, scope: !7970)
!7974 = !DILocation(line: 2712, column: 33, scope: !7970)
!7975 = !DILocation(line: 2712, column: 7, scope: !7944)
!7976 = !DILocation(line: 2713, column: 12, scope: !7970)
!7977 = !DILocation(line: 2713, column: 37, scope: !7970)
!7978 = !DILocation(line: 2713, column: 35, scope: !7970)
!7979 = !DILocation(line: 2713, column: 5, scope: !7970)
!7980 = !DILocation(line: 2714, column: 26, scope: !7981)
!7981 = distinct !DILexicalBlock(scope: !7970, file: !3, line: 2714, column: 12)
!7982 = !DILocation(line: 2714, column: 12, scope: !7981)
!7983 = !DILocation(line: 2714, column: 12, scope: !7970)
!7984 = !DILocation(line: 2715, column: 5, scope: !7981)
!7985 = !DILocation(line: 2716, column: 26, scope: !7986)
!7986 = distinct !DILexicalBlock(scope: !7981, file: !3, line: 2716, column: 12)
!7987 = !DILocation(line: 2716, column: 12, scope: !7986)
!7988 = !DILocation(line: 2716, column: 12, scope: !7981)
!7989 = !DILocation(line: 2717, column: 5, scope: !7986)
!7990 = !DILocation(line: 2719, column: 20, scope: !7944)
!7991 = !DILocation(line: 2719, column: 9, scope: !7944)
!7992 = !DILocation(line: 2719, column: 7, scope: !7944)
!7993 = !DILocation(line: 2720, column: 20, scope: !7944)
!7994 = !DILocation(line: 2720, column: 9, scope: !7944)
!7995 = !DILocation(line: 2720, column: 7, scope: !7944)
!7996 = !DILocation(line: 2722, column: 8, scope: !7997)
!7997 = distinct !DILexicalBlock(scope: !7944, file: !3, line: 2722, column: 7)
!7998 = !DILocation(line: 2722, column: 12, scope: !7997)
!7999 = !DILocation(line: 2722, column: 16, scope: !7997)
!8000 = !DILocation(line: 2722, column: 7, scope: !7944)
!8001 = !DILocation(line: 2723, column: 12, scope: !7997)
!8002 = !DILocation(line: 2723, column: 37, scope: !7997)
!8003 = !DILocation(line: 2723, column: 35, scope: !7997)
!8004 = !DILocation(line: 2723, column: 5, scope: !7997)
!8005 = !DILocation(line: 2724, column: 13, scope: !8006)
!8006 = distinct !DILexicalBlock(scope: !7997, file: !3, line: 2724, column: 12)
!8007 = !DILocation(line: 2724, column: 12, scope: !7997)
!8008 = !DILocation(line: 2725, column: 5, scope: !8006)
!8009 = !DILocation(line: 2726, column: 13, scope: !8010)
!8010 = distinct !DILexicalBlock(scope: !8006, file: !3, line: 2726, column: 12)
!8011 = !DILocation(line: 2726, column: 12, scope: !8006)
!8012 = !DILocation(line: 2727, column: 5, scope: !8010)
!8013 = !DILocation(line: 2729, column: 7, scope: !8014)
!8014 = distinct !DILexicalBlock(scope: !7944, file: !3, line: 2729, column: 7)
!8015 = !DILocation(line: 2729, column: 14, scope: !8014)
!8016 = !DILocation(line: 2729, column: 11, scope: !8014)
!8017 = !DILocation(line: 2729, column: 7, scope: !7944)
!8018 = !DILocation(line: 2731, column: 24, scope: !8019)
!8019 = distinct !DILexicalBlock(scope: !8020, file: !3, line: 2731, column: 11)
!8020 = distinct !DILexicalBlock(scope: !8014, file: !3, line: 2730, column: 5)
!8021 = !DILocation(line: 2731, column: 11, scope: !8019)
!8022 = !DILocation(line: 2731, column: 33, scope: !8019)
!8023 = !DILocation(line: 2732, column: 4, scope: !8019)
!8024 = !DILocation(line: 2732, column: 20, scope: !8019)
!8025 = !DILocation(line: 2732, column: 7, scope: !8019)
!8026 = !DILocation(line: 2732, column: 29, scope: !8019)
!8027 = !DILocation(line: 2731, column: 11, scope: !8020)
!8028 = !DILocation(line: 2733, column: 9, scope: !8019)
!8029 = !DILocation(line: 2733, column: 34, scope: !8019)
!8030 = !DILocation(line: 2733, column: 32, scope: !8019)
!8031 = !DILocation(line: 2733, column: 2, scope: !8019)
!8032 = !DILocation(line: 2734, column: 29, scope: !8033)
!8033 = distinct !DILexicalBlock(scope: !8019, file: !3, line: 2734, column: 16)
!8034 = !DILocation(line: 2734, column: 16, scope: !8033)
!8035 = !DILocation(line: 2734, column: 38, scope: !8033)
!8036 = !DILocation(line: 2734, column: 16, scope: !8019)
!8037 = !DILocation(line: 2735, column: 2, scope: !8033)
!8038 = !DILocation(line: 2736, column: 29, scope: !8039)
!8039 = distinct !DILexicalBlock(scope: !8033, file: !3, line: 2736, column: 16)
!8040 = !DILocation(line: 2736, column: 16, scope: !8039)
!8041 = !DILocation(line: 2736, column: 38, scope: !8039)
!8042 = !DILocation(line: 2736, column: 16, scope: !8033)
!8043 = !DILocation(line: 2737, column: 2, scope: !8039)
!8044 = !DILocation(line: 2738, column: 28, scope: !8045)
!8045 = distinct !DILexicalBlock(scope: !8039, file: !3, line: 2738, column: 16)
!8046 = !DILocation(line: 2738, column: 16, scope: !8045)
!8047 = !DILocation(line: 2738, column: 52, scope: !8045)
!8048 = !DILocation(line: 2738, column: 40, scope: !8045)
!8049 = !DILocation(line: 2738, column: 37, scope: !8045)
!8050 = !DILocation(line: 2738, column: 16, scope: !8039)
!8051 = !DILocation(line: 2739, column: 28, scope: !8045)
!8052 = !DILocation(line: 2739, column: 16, scope: !8045)
!8053 = !DILocation(line: 2739, column: 51, scope: !8045)
!8054 = !DILocation(line: 2739, column: 39, scope: !8045)
!8055 = !DILocation(line: 2739, column: 37, scope: !8045)
!8056 = !DILocation(line: 2739, column: 9, scope: !8045)
!8057 = !DILocation(line: 2741, column: 9, scope: !8045)
!8058 = !DILocation(line: 2741, column: 34, scope: !8045)
!8059 = !DILocation(line: 2741, column: 32, scope: !8045)
!8060 = !DILocation(line: 2741, column: 2, scope: !8045)
!8061 = !DILocation(line: 2743, column: 10, scope: !7944)
!8062 = !DILocation(line: 2743, column: 22, scope: !7944)
!8063 = !DILocation(line: 2743, column: 27, scope: !7944)
!8064 = !DILocation(line: 2743, column: 36, scope: !7944)
!8065 = !DILocation(line: 2743, column: 48, scope: !7944)
!8066 = !DILocation(line: 2743, column: 53, scope: !7944)
!8067 = !DILocation(line: 2743, column: 34, scope: !7944)
!8068 = !DILocation(line: 2743, column: 3, scope: !7944)
!8069 = !DILocation(line: 2744, column: 1, scope: !7944)
!8070 = distinct !DISubprogram(name: "gimple_bb", scope: !391, file: !391, line: 1112, type: !8071, scopeLine: 1113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!8071 = !DISubroutineType(types: !8072)
!8072 = !{!1778, !3220}
!8073 = !DILocalVariable(name: "g", arg: 1, scope: !8070, file: !391, line: 1112, type: !3220)
!8074 = !DILocation(line: 1112, column: 25, scope: !8070)
!8075 = !DILocation(line: 1114, column: 10, scope: !8070)
!8076 = !DILocation(line: 1114, column: 13, scope: !8070)
!8077 = !DILocation(line: 1114, column: 20, scope: !8070)
!8078 = !DILocation(line: 1114, column: 3, scope: !8070)
!8079 = distinct !DISubprogram(name: "gimple_uid", scope: !391, file: !391, line: 1265, type: !4154, scopeLine: 1266, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!8080 = !DILocalVariable(name: "g", arg: 1, scope: !8079, file: !391, line: 1265, type: !3220)
!8081 = !DILocation(line: 1265, column: 26, scope: !8079)
!8082 = !DILocation(line: 1267, column: 10, scope: !8079)
!8083 = !DILocation(line: 1267, column: 13, scope: !8079)
!8084 = !DILocation(line: 1267, column: 20, scope: !8079)
!8085 = !DILocation(line: 1267, column: 3, scope: !8079)
!8086 = distinct !DISubprogram(name: "visit_use", scope: !3, file: !3, line: 2481, type: !6529, scopeLine: 2482, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!8087 = !DILocalVariable(name: "use", arg: 1, scope: !8086, file: !3, line: 2481, type: !1483)
!8088 = !DILocation(line: 2481, column: 17, scope: !8086)
!8089 = !DILocalVariable(name: "changed", scope: !8086, file: !3, line: 2483, type: !1603)
!8090 = !DILocation(line: 2483, column: 8, scope: !8086)
!8091 = !DILocalVariable(name: "stmt", scope: !8086, file: !3, line: 2484, type: !1814)
!8092 = !DILocation(line: 2484, column: 10, scope: !8086)
!8093 = !DILocation(line: 2484, column: 17, scope: !8086)
!8094 = !DILocation(line: 2486, column: 12, scope: !8086)
!8095 = !DILocation(line: 2486, column: 3, scope: !8086)
!8096 = !DILocation(line: 2486, column: 18, scope: !8086)
!8097 = !DILocation(line: 2486, column: 32, scope: !8086)
!8098 = !DILocation(line: 2488, column: 3, scope: !8086)
!8099 = !DILocation(line: 2489, column: 7, scope: !8100)
!8100 = distinct !DILexicalBlock(scope: !8086, file: !3, line: 2489, column: 7)
!8101 = !DILocation(line: 2489, column: 17, scope: !8100)
!8102 = !DILocation(line: 2489, column: 21, scope: !8100)
!8103 = !DILocation(line: 2489, column: 32, scope: !8100)
!8104 = !DILocation(line: 2490, column: 7, scope: !8100)
!8105 = !DILocation(line: 2490, column: 11, scope: !8100)
!8106 = !DILocation(line: 2489, column: 7, scope: !8086)
!8107 = !DILocation(line: 2492, column: 16, scope: !8108)
!8108 = distinct !DILexicalBlock(scope: !8100, file: !3, line: 2491, column: 5)
!8109 = !DILocation(line: 2492, column: 7, scope: !8108)
!8110 = !DILocation(line: 2493, column: 27, scope: !8108)
!8111 = !DILocation(line: 2493, column: 38, scope: !8108)
!8112 = !DILocation(line: 2493, column: 7, scope: !8108)
!8113 = !DILocation(line: 2494, column: 16, scope: !8108)
!8114 = !DILocation(line: 2494, column: 7, scope: !8108)
!8115 = !DILocation(line: 2495, column: 26, scope: !8108)
!8116 = !DILocation(line: 2495, column: 37, scope: !8108)
!8117 = !DILocation(line: 2495, column: 7, scope: !8108)
!8118 = !DILocation(line: 2496, column: 5, scope: !8108)
!8119 = !DILocation(line: 2499, column: 7, scope: !8120)
!8120 = distinct !DILexicalBlock(scope: !8086, file: !3, line: 2499, column: 7)
!8121 = !DILocation(line: 2499, column: 7, scope: !8086)
!8122 = !DILocation(line: 2500, column: 31, scope: !8120)
!8123 = !DILocation(line: 2500, column: 36, scope: !8120)
!8124 = !DILocation(line: 2500, column: 15, scope: !8120)
!8125 = !DILocation(line: 2500, column: 13, scope: !8120)
!8126 = !DILocation(line: 2500, column: 5, scope: !8120)
!8127 = !DILocation(line: 2503, column: 24, scope: !8128)
!8128 = distinct !DILexicalBlock(scope: !8129, file: !3, line: 2503, column: 11)
!8129 = distinct !DILexicalBlock(scope: !8120, file: !3, line: 2502, column: 5)
!8130 = !DILocation(line: 2503, column: 11, scope: !8128)
!8131 = !DILocation(line: 2503, column: 30, scope: !8128)
!8132 = !DILocation(line: 2503, column: 11, scope: !8129)
!8133 = !DILocation(line: 2504, column: 23, scope: !8128)
!8134 = !DILocation(line: 2504, column: 12, scope: !8128)
!8135 = !DILocation(line: 2504, column: 10, scope: !8128)
!8136 = !DILocation(line: 2504, column: 2, scope: !8128)
!8137 = !DILocation(line: 2505, column: 33, scope: !8138)
!8138 = distinct !DILexicalBlock(scope: !8128, file: !3, line: 2505, column: 16)
!8139 = !DILocation(line: 2505, column: 17, scope: !8138)
!8140 = !DILocation(line: 2506, column: 9, scope: !8138)
!8141 = !DILocation(line: 2506, column: 37, scope: !8138)
!8142 = !DILocation(line: 2506, column: 12, scope: !8138)
!8143 = !DILocation(line: 2507, column: 9, scope: !8138)
!8144 = !DILocation(line: 2507, column: 32, scope: !8138)
!8145 = !DILocation(line: 2507, column: 12, scope: !8138)
!8146 = !DILocation(line: 2505, column: 16, scope: !8128)
!8147 = !DILocation(line: 2508, column: 29, scope: !8138)
!8148 = !DILocation(line: 2508, column: 12, scope: !8138)
!8149 = !DILocation(line: 2508, column: 10, scope: !8138)
!8150 = !DILocation(line: 2508, column: 2, scope: !8138)
!8151 = !DILocation(line: 2509, column: 34, scope: !8152)
!8152 = distinct !DILexicalBlock(scope: !8138, file: !3, line: 2509, column: 16)
!8153 = !DILocation(line: 2509, column: 16, scope: !8152)
!8154 = !DILocation(line: 2509, column: 16, scope: !8138)
!8155 = !DILocalVariable(name: "lhs", scope: !8156, file: !3, line: 2511, type: !1483)
!8156 = distinct !DILexicalBlock(scope: !8152, file: !3, line: 2510, column: 2)
!8157 = !DILocation(line: 2511, column: 9, scope: !8156)
!8158 = !DILocation(line: 2511, column: 34, scope: !8156)
!8159 = !DILocation(line: 2511, column: 15, scope: !8156)
!8160 = !DILocalVariable(name: "simplified", scope: !8156, file: !3, line: 2512, type: !1483)
!8161 = !DILocation(line: 2512, column: 9, scope: !8156)
!8162 = !DILocation(line: 2516, column: 30, scope: !8163)
!8163 = distinct !DILexicalBlock(scope: !8156, file: !3, line: 2516, column: 8)
!8164 = !DILocation(line: 2516, column: 8, scope: !8163)
!8165 = !DILocation(line: 2517, column: 8, scope: !8163)
!8166 = !DILocation(line: 2517, column: 11, scope: !8163)
!8167 = !DILocation(line: 2517, column: 49, scope: !8163)
!8168 = !DILocation(line: 2518, column: 8, scope: !8163)
!8169 = !DILocation(line: 2518, column: 11, scope: !8163)
!8170 = !DILocation(line: 2518, column: 27, scope: !8163)
!8171 = !DILocation(line: 2516, column: 8, scope: !8156)
!8172 = !DILocation(line: 2520, column: 30, scope: !8173)
!8173 = distinct !DILexicalBlock(scope: !8163, file: !3, line: 2519, column: 6)
!8174 = !DILocation(line: 2520, column: 55, scope: !8173)
!8175 = !DILocation(line: 2520, column: 35, scope: !8173)
!8176 = !DILocation(line: 2520, column: 18, scope: !8173)
!8177 = !DILocation(line: 2520, column: 16, scope: !8173)
!8178 = !DILocation(line: 2521, column: 8, scope: !8173)
!8179 = !DILocation(line: 2523, column: 34, scope: !8156)
!8180 = !DILocation(line: 2523, column: 17, scope: !8156)
!8181 = !DILocation(line: 2523, column: 15, scope: !8156)
!8182 = !DILocation(line: 2524, column: 8, scope: !8183)
!8183 = distinct !DILexicalBlock(scope: !8156, file: !3, line: 2524, column: 8)
!8184 = !DILocation(line: 2524, column: 8, scope: !8156)
!8185 = !DILocation(line: 2526, column: 12, scope: !8186)
!8186 = distinct !DILexicalBlock(scope: !8187, file: !3, line: 2526, column: 12)
!8187 = distinct !DILexicalBlock(scope: !8183, file: !3, line: 2525, column: 6)
!8188 = !DILocation(line: 2526, column: 22, scope: !8186)
!8189 = !DILocation(line: 2526, column: 26, scope: !8186)
!8190 = !DILocation(line: 2526, column: 37, scope: !8186)
!8191 = !DILocation(line: 2526, column: 12, scope: !8187)
!8192 = !DILocation(line: 2528, column: 14, scope: !8193)
!8193 = distinct !DILexicalBlock(scope: !8186, file: !3, line: 2527, column: 3)
!8194 = !DILocation(line: 2528, column: 5, scope: !8193)
!8195 = !DILocation(line: 2529, column: 24, scope: !8193)
!8196 = !DILocation(line: 2529, column: 35, scope: !8193)
!8197 = !DILocation(line: 2529, column: 5, scope: !8193)
!8198 = !DILocation(line: 2530, column: 14, scope: !8193)
!8199 = !DILocation(line: 2530, column: 5, scope: !8193)
!8200 = !DILocation(line: 2531, column: 25, scope: !8193)
!8201 = !DILocation(line: 2531, column: 36, scope: !8193)
!8202 = !DILocation(line: 2531, column: 5, scope: !8193)
!8203 = !DILocation(line: 2532, column: 9, scope: !8204)
!8204 = distinct !DILexicalBlock(scope: !8193, file: !3, line: 2532, column: 9)
!8205 = !DILocation(line: 2532, column: 25, scope: !8204)
!8206 = !DILocation(line: 2532, column: 9, scope: !8193)
!8207 = !DILocation(line: 2533, column: 16, scope: !8204)
!8208 = !DILocation(line: 2534, column: 29, scope: !8204)
!8209 = !DILocation(line: 2534, column: 9, scope: !8204)
!8210 = !DILocation(line: 2533, column: 7, scope: !8204)
!8211 = !DILocation(line: 2536, column: 16, scope: !8204)
!8212 = !DILocation(line: 2536, column: 7, scope: !8204)
!8213 = !DILocation(line: 2537, column: 3, scope: !8193)
!8214 = !DILocation(line: 2538, column: 6, scope: !8187)
!8215 = !DILocation(line: 2543, column: 8, scope: !8216)
!8216 = distinct !DILexicalBlock(scope: !8156, file: !3, line: 2543, column: 8)
!8217 = !DILocation(line: 2544, column: 8, scope: !8216)
!8218 = !DILocation(line: 2544, column: 36, scope: !8216)
!8219 = !DILocation(line: 2544, column: 11, scope: !8216)
!8220 = !DILocation(line: 2545, column: 8, scope: !8216)
!8221 = !DILocation(line: 2545, column: 11, scope: !8216)
!8222 = !DILocation(line: 2545, column: 27, scope: !8216)
!8223 = !DILocation(line: 2543, column: 8, scope: !8156)
!8224 = !DILocation(line: 2547, column: 30, scope: !8225)
!8225 = distinct !DILexicalBlock(scope: !8216, file: !3, line: 2546, column: 6)
!8226 = !DILocation(line: 2547, column: 17, scope: !8225)
!8227 = !DILocation(line: 2547, column: 8, scope: !8225)
!8228 = !DILocation(line: 2547, column: 23, scope: !8225)
!8229 = !DILocation(line: 2547, column: 28, scope: !8225)
!8230 = !DILocation(line: 2548, column: 17, scope: !8225)
!8231 = !DILocation(line: 2548, column: 8, scope: !8225)
!8232 = !DILocation(line: 2548, column: 23, scope: !8225)
!8233 = !DILocation(line: 2548, column: 37, scope: !8225)
!8234 = !DILocation(line: 2549, column: 34, scope: !8225)
!8235 = !DILocation(line: 2549, column: 39, scope: !8225)
!8236 = !DILocation(line: 2549, column: 18, scope: !8225)
!8237 = !DILocation(line: 2549, column: 16, scope: !8225)
!8238 = !DILocation(line: 2550, column: 8, scope: !8225)
!8239 = !DILocation(line: 2552, column: 13, scope: !8240)
!8240 = distinct !DILexicalBlock(scope: !8216, file: !3, line: 2552, column: 13)
!8241 = !DILocation(line: 2553, column: 6, scope: !8240)
!8242 = !DILocation(line: 2553, column: 9, scope: !8240)
!8243 = !DILocation(line: 2553, column: 32, scope: !8240)
!8244 = !DILocation(line: 2554, column: 6, scope: !8240)
!8245 = !DILocation(line: 2554, column: 9, scope: !8240)
!8246 = !DILocation(line: 2554, column: 25, scope: !8240)
!8247 = !DILocation(line: 2552, column: 13, scope: !8216)
!8248 = !DILocation(line: 2556, column: 30, scope: !8249)
!8249 = distinct !DILexicalBlock(scope: !8240, file: !3, line: 2555, column: 6)
!8250 = !DILocation(line: 2556, column: 35, scope: !8249)
!8251 = !DILocation(line: 2556, column: 18, scope: !8249)
!8252 = !DILocation(line: 2556, column: 16, scope: !8249)
!8253 = !DILocation(line: 2557, column: 8, scope: !8249)
!8254 = !DILocation(line: 2559, column: 13, scope: !8255)
!8255 = distinct !DILexicalBlock(scope: !8240, file: !3, line: 2559, column: 13)
!8256 = !DILocation(line: 2559, column: 13, scope: !8240)
!8257 = !DILocation(line: 2561, column: 12, scope: !8258)
!8258 = distinct !DILexicalBlock(scope: !8259, file: !3, line: 2561, column: 12)
!8259 = distinct !DILexicalBlock(scope: !8255, file: !3, line: 2560, column: 6)
!8260 = !DILocation(line: 2561, column: 28, scope: !8258)
!8261 = !DILocation(line: 2561, column: 12, scope: !8259)
!8262 = !DILocation(line: 2563, column: 56, scope: !8263)
!8263 = distinct !DILexicalBlock(scope: !8258, file: !3, line: 2562, column: 3)
!8264 = !DILocation(line: 2563, column: 36, scope: !8263)
!8265 = !DILocation(line: 2563, column: 14, scope: !8263)
!8266 = !DILocation(line: 2563, column: 5, scope: !8263)
!8267 = !DILocation(line: 2563, column: 20, scope: !8263)
!8268 = !DILocation(line: 2563, column: 34, scope: !8263)
!8269 = !DILocation(line: 2566, column: 41, scope: !8263)
!8270 = !DILocation(line: 2566, column: 27, scope: !8263)
!8271 = !DILocation(line: 2566, column: 14, scope: !8263)
!8272 = !DILocation(line: 2566, column: 5, scope: !8263)
!8273 = !DILocation(line: 2566, column: 20, scope: !8263)
!8274 = !DILocation(line: 2566, column: 25, scope: !8263)
!8275 = !DILocation(line: 2567, column: 3, scope: !8263)
!8276 = !DILocation(line: 2568, column: 6, scope: !8259)
!8277 = !DILocation(line: 2569, column: 33, scope: !8278)
!8278 = distinct !DILexicalBlock(scope: !8255, file: !3, line: 2569, column: 13)
!8279 = !DILocation(line: 2569, column: 13, scope: !8278)
!8280 = !DILocation(line: 2570, column: 6, scope: !8278)
!8281 = !DILocation(line: 2570, column: 9, scope: !8278)
!8282 = !DILocation(line: 2570, column: 25, scope: !8278)
!8283 = !DILocation(line: 2569, column: 13, scope: !8255)
!8284 = !DILocation(line: 2571, column: 15, scope: !8278)
!8285 = !DILocation(line: 2571, column: 6, scope: !8278)
!8286 = !DILocation(line: 2571, column: 21, scope: !8278)
!8287 = !DILocation(line: 2571, column: 35, scope: !8278)
!8288 = !DILocation(line: 2572, column: 13, scope: !8289)
!8289 = distinct !DILexicalBlock(scope: !8278, file: !3, line: 2572, column: 13)
!8290 = !DILocation(line: 2572, column: 29, scope: !8289)
!8291 = !DILocation(line: 2572, column: 13, scope: !8278)
!8292 = !DILocation(line: 2579, column: 17, scope: !8293)
!8293 = distinct !DILexicalBlock(scope: !8289, file: !3, line: 2573, column: 6)
!8294 = !DILocation(line: 2579, column: 8, scope: !8293)
!8295 = !DILocation(line: 2579, column: 23, scope: !8293)
!8296 = !DILocation(line: 2579, column: 37, scope: !8293)
!8297 = !DILocation(line: 2580, column: 17, scope: !8293)
!8298 = !DILocation(line: 2580, column: 8, scope: !8293)
!8299 = !DILocation(line: 2580, column: 23, scope: !8293)
!8300 = !DILocation(line: 2580, column: 28, scope: !8293)
!8301 = !DILocation(line: 2581, column: 6, scope: !8293)
!8302 = !DILocation(line: 2583, column: 9, scope: !8303)
!8303 = distinct !DILexicalBlock(scope: !8156, file: !3, line: 2583, column: 8)
!8304 = !DILocation(line: 2583, column: 25, scope: !8303)
!8305 = !DILocation(line: 2586, column: 9, scope: !8303)
!8306 = !DILocation(line: 2586, column: 36, scope: !8303)
!8307 = !DILocation(line: 2586, column: 14, scope: !8303)
!8308 = !DILocation(line: 2587, column: 7, scope: !8303)
!8309 = !DILocation(line: 2587, column: 55, scope: !8303)
!8310 = !DILocation(line: 2587, column: 35, scope: !8303)
!8311 = !DILocation(line: 2587, column: 10, scope: !8303)
!8312 = !DILocation(line: 2588, column: 9, scope: !8303)
!8313 = !DILocation(line: 2588, column: 14, scope: !8303)
!8314 = !DILocation(line: 2589, column: 7, scope: !8303)
!8315 = !DILocation(line: 2589, column: 35, scope: !8303)
!8316 = !DILocation(line: 2589, column: 10, scope: !8303)
!8317 = !DILocation(line: 2590, column: 9, scope: !8303)
!8318 = !DILocation(line: 2590, column: 12, scope: !8303)
!8319 = !DILocation(line: 2593, column: 8, scope: !8303)
!8320 = !DILocation(line: 2593, column: 36, scope: !8303)
!8321 = !DILocation(line: 2593, column: 12, scope: !8303)
!8322 = !DILocation(line: 2594, column: 5, scope: !8303)
!8323 = !DILocation(line: 2594, column: 8, scope: !8303)
!8324 = !DILocation(line: 2594, column: 46, scope: !8303)
!8325 = !DILocation(line: 2595, column: 5, scope: !8303)
!8326 = !DILocation(line: 2595, column: 8, scope: !8303)
!8327 = !DILocation(line: 2583, column: 8, scope: !8156)
!8328 = !DILocation(line: 2596, column: 33, scope: !8303)
!8329 = !DILocation(line: 2596, column: 16, scope: !8303)
!8330 = !DILocation(line: 2596, column: 14, scope: !8303)
!8331 = !DILocation(line: 2596, column: 6, scope: !8303)
!8332 = !DILocation(line: 2597, column: 13, scope: !8333)
!8333 = distinct !DILexicalBlock(scope: !8303, file: !3, line: 2597, column: 13)
!8334 = !DILocation(line: 2597, column: 37, scope: !8333)
!8335 = !DILocation(line: 2597, column: 40, scope: !8333)
!8336 = !DILocation(line: 2597, column: 13, scope: !8303)
!8337 = !DILocation(line: 2599, column: 44, scope: !8338)
!8338 = distinct !DILexicalBlock(scope: !8333, file: !3, line: 2598, column: 6)
!8339 = !DILocation(line: 2599, column: 69, scope: !8338)
!8340 = !DILocation(line: 2599, column: 49, scope: !8338)
!8341 = !DILocation(line: 2599, column: 76, scope: !8338)
!8342 = !DILocation(line: 2599, column: 18, scope: !8338)
!8343 = !DILocation(line: 2599, column: 16, scope: !8338)
!8344 = !DILocation(line: 2600, column: 6, scope: !8338)
!8345 = !DILocation(line: 2601, column: 13, scope: !8346)
!8346 = distinct !DILexicalBlock(scope: !8333, file: !3, line: 2601, column: 13)
!8347 = !DILocation(line: 2601, column: 29, scope: !8346)
!8348 = !DILocation(line: 2601, column: 13, scope: !8333)
!8349 = !DILocation(line: 2603, column: 35, scope: !8350)
!8350 = distinct !DILexicalBlock(scope: !8351, file: !3, line: 2603, column: 12)
!8351 = distinct !DILexicalBlock(scope: !8346, file: !3, line: 2602, column: 6)
!8352 = !DILocation(line: 2603, column: 13, scope: !8350)
!8353 = !DILocation(line: 2604, column: 6, scope: !8350)
!8354 = !DILocation(line: 2604, column: 54, scope: !8350)
!8355 = !DILocation(line: 2604, column: 34, scope: !8350)
!8356 = !DILocation(line: 2604, column: 9, scope: !8350)
!8357 = !DILocation(line: 2605, column: 5, scope: !8350)
!8358 = !DILocation(line: 2605, column: 9, scope: !8350)
!8359 = !DILocation(line: 2606, column: 9, scope: !8350)
!8360 = !DILocation(line: 2606, column: 37, scope: !8350)
!8361 = !DILocation(line: 2606, column: 12, scope: !8350)
!8362 = !DILocation(line: 2603, column: 12, scope: !8351)
!8363 = !DILocation(line: 2608, column: 14, scope: !8364)
!8364 = distinct !DILexicalBlock(scope: !8350, file: !3, line: 2607, column: 3)
!8365 = !DILocation(line: 2608, column: 5, scope: !8364)
!8366 = !DILocation(line: 2608, column: 20, scope: !8364)
!8367 = !DILocation(line: 2608, column: 34, scope: !8364)
!8368 = !DILocation(line: 2609, column: 9, scope: !8369)
!8369 = distinct !DILexicalBlock(scope: !8364, file: !3, line: 2609, column: 9)
!8370 = !DILocation(line: 2609, column: 9, scope: !8364)
!8371 = !DILocation(line: 2610, column: 33, scope: !8369)
!8372 = !DILocation(line: 2610, column: 38, scope: !8369)
!8373 = !DILocation(line: 2610, column: 17, scope: !8369)
!8374 = !DILocation(line: 2610, column: 15, scope: !8369)
!8375 = !DILocation(line: 2610, column: 7, scope: !8369)
!8376 = !DILocation(line: 2612, column: 33, scope: !8369)
!8377 = !DILocation(line: 2612, column: 58, scope: !8369)
!8378 = !DILocation(line: 2612, column: 38, scope: !8369)
!8379 = !DILocation(line: 2612, column: 17, scope: !8369)
!8380 = !DILocation(line: 2612, column: 15, scope: !8369)
!8381 = !DILocation(line: 2613, column: 3, scope: !8364)
!8382 = !DILocation(line: 2616, column: 59, scope: !8383)
!8383 = distinct !DILexicalBlock(scope: !8350, file: !3, line: 2615, column: 3)
!8384 = !DILocation(line: 2616, column: 35, scope: !8383)
!8385 = !DILocation(line: 2616, column: 13, scope: !8383)
!8386 = !DILocation(line: 2616, column: 5, scope: !8383)
!8387 = !DILocation(line: 2619, column: 35, scope: !8388)
!8388 = distinct !DILexicalBlock(scope: !8383, file: !3, line: 2617, column: 7)
!8389 = !DILocation(line: 2619, column: 40, scope: !8388)
!8390 = !DILocation(line: 2619, column: 19, scope: !8388)
!8391 = !DILocation(line: 2619, column: 17, scope: !8388)
!8392 = !DILocation(line: 2620, column: 9, scope: !8388)
!8393 = !DILocation(line: 2622, column: 36, scope: !8388)
!8394 = !DILocation(line: 2622, column: 41, scope: !8388)
!8395 = !DILocation(line: 2622, column: 19, scope: !8388)
!8396 = !DILocation(line: 2622, column: 17, scope: !8388)
!8397 = !DILocation(line: 2623, column: 9, scope: !8388)
!8398 = !DILocation(line: 2625, column: 17, scope: !8388)
!8399 = !DILocation(line: 2625, column: 9, scope: !8388)
!8400 = !DILocation(line: 2629, column: 35, scope: !8401)
!8401 = distinct !DILexicalBlock(scope: !8402, file: !3, line: 2629, column: 10)
!8402 = distinct !DILexicalBlock(scope: !8388, file: !3, line: 2626, column: 4)
!8403 = !DILocation(line: 2629, column: 11, scope: !8401)
!8404 = !DILocation(line: 2629, column: 41, scope: !8401)
!8405 = !DILocation(line: 2630, column: 11, scope: !8401)
!8406 = !DILocation(line: 2630, column: 38, scope: !8401)
!8407 = !DILocation(line: 2630, column: 14, scope: !8401)
!8408 = !DILocation(line: 2630, column: 44, scope: !8401)
!8409 = !DILocation(line: 2631, column: 11, scope: !8401)
!8410 = !DILocation(line: 2631, column: 38, scope: !8401)
!8411 = !DILocation(line: 2631, column: 14, scope: !8401)
!8412 = !DILocation(line: 2631, column: 44, scope: !8401)
!8413 = !DILocation(line: 2632, column: 10, scope: !8401)
!8414 = !DILocation(line: 2632, column: 13, scope: !8401)
!8415 = !DILocation(line: 2632, column: 69, scope: !8401)
!8416 = !DILocation(line: 2629, column: 10, scope: !8402)
!8417 = !DILocation(line: 2634, column: 36, scope: !8418)
!8418 = distinct !DILexicalBlock(scope: !8401, file: !3, line: 2633, column: 8)
!8419 = !DILocation(line: 2634, column: 41, scope: !8418)
!8420 = !DILocation(line: 2634, column: 20, scope: !8418)
!8421 = !DILocation(line: 2634, column: 18, scope: !8418)
!8422 = !DILocation(line: 2635, column: 10, scope: !8418)
!8423 = !DILocation(line: 2632, column: 72, scope: !8401)
!8424 = !DILocation(line: 2640, column: 11, scope: !8402)
!8425 = !DILocation(line: 2640, column: 36, scope: !8402)
!8426 = !DILocation(line: 2640, column: 16, scope: !8402)
!8427 = !DILocation(line: 2640, column: 43, scope: !8402)
!8428 = !DILocation(line: 2639, column: 16, scope: !8402)
!8429 = !DILocation(line: 2639, column: 14, scope: !8402)
!8430 = !DILocation(line: 2641, column: 6, scope: !8402)
!8431 = !DILocation(line: 2643, column: 34, scope: !8432)
!8432 = distinct !DILexicalBlock(scope: !8402, file: !3, line: 2643, column: 10)
!8433 = !DILocation(line: 2643, column: 10, scope: !8432)
!8434 = !DILocation(line: 2643, column: 40, scope: !8432)
!8435 = !DILocation(line: 2643, column: 10, scope: !8402)
!8436 = !DILocation(line: 2645, column: 36, scope: !8437)
!8437 = distinct !DILexicalBlock(scope: !8432, file: !3, line: 2644, column: 8)
!8438 = !DILocation(line: 2645, column: 41, scope: !8437)
!8439 = !DILocation(line: 2645, column: 20, scope: !8437)
!8440 = !DILocation(line: 2645, column: 18, scope: !8437)
!8441 = !DILocation(line: 2646, column: 10, scope: !8437)
!8442 = !DILocation(line: 2643, column: 43, scope: !8432)
!8443 = !DILocation(line: 2650, column: 33, scope: !8402)
!8444 = !DILocation(line: 2650, column: 16, scope: !8402)
!8445 = !DILocation(line: 2650, column: 14, scope: !8402)
!8446 = !DILocation(line: 2651, column: 4, scope: !8402)
!8447 = !DILocation(line: 2652, column: 9, scope: !8388)
!8448 = !DILocation(line: 2654, column: 36, scope: !8388)
!8449 = !DILocation(line: 2654, column: 19, scope: !8388)
!8450 = !DILocation(line: 2654, column: 17, scope: !8388)
!8451 = !DILocation(line: 2655, column: 9, scope: !8388)
!8452 = !DILocation(line: 2658, column: 6, scope: !8351)
!8453 = !DILocation(line: 2660, column: 33, scope: !8346)
!8454 = !DILocation(line: 2660, column: 16, scope: !8346)
!8455 = !DILocation(line: 2660, column: 14, scope: !8346)
!8456 = !DILocation(line: 2661, column: 2, scope: !8156)
!8457 = !DILocation(line: 2662, column: 32, scope: !8458)
!8458 = distinct !DILexicalBlock(scope: !8152, file: !3, line: 2662, column: 16)
!8459 = !DILocation(line: 2662, column: 16, scope: !8458)
!8460 = !DILocation(line: 2662, column: 16, scope: !8152)
!8461 = !DILocalVariable(name: "lhs", scope: !8462, file: !3, line: 2664, type: !1483)
!8462 = distinct !DILexicalBlock(scope: !8458, file: !3, line: 2663, column: 2)
!8463 = !DILocation(line: 2664, column: 9, scope: !8462)
!8464 = !DILocation(line: 2664, column: 32, scope: !8462)
!8465 = !DILocation(line: 2664, column: 15, scope: !8462)
!8466 = !DILocation(line: 2668, column: 28, scope: !8467)
!8467 = distinct !DILexicalBlock(scope: !8462, file: !3, line: 2668, column: 8)
!8468 = !DILocation(line: 2668, column: 8, scope: !8467)
!8469 = !DILocation(line: 2669, column: 8, scope: !8467)
!8470 = !DILocation(line: 2669, column: 11, scope: !8467)
!8471 = !DILocation(line: 2669, column: 27, scope: !8467)
!8472 = !DILocation(line: 2668, column: 8, scope: !8462)
!8473 = !DILocation(line: 2670, column: 15, scope: !8467)
!8474 = !DILocation(line: 2670, column: 6, scope: !8467)
!8475 = !DILocation(line: 2670, column: 21, scope: !8467)
!8476 = !DILocation(line: 2670, column: 35, scope: !8467)
!8477 = !DILocation(line: 2671, column: 13, scope: !8478)
!8478 = distinct !DILexicalBlock(scope: !8467, file: !3, line: 2671, column: 13)
!8479 = !DILocation(line: 2671, column: 29, scope: !8478)
!8480 = !DILocation(line: 2671, column: 13, scope: !8467)
!8481 = !DILocation(line: 2677, column: 17, scope: !8482)
!8482 = distinct !DILexicalBlock(scope: !8478, file: !3, line: 2672, column: 6)
!8483 = !DILocation(line: 2677, column: 8, scope: !8482)
!8484 = !DILocation(line: 2677, column: 23, scope: !8482)
!8485 = !DILocation(line: 2677, column: 37, scope: !8482)
!8486 = !DILocation(line: 2678, column: 17, scope: !8482)
!8487 = !DILocation(line: 2678, column: 8, scope: !8482)
!8488 = !DILocation(line: 2678, column: 23, scope: !8482)
!8489 = !DILocation(line: 2678, column: 28, scope: !8482)
!8490 = !DILocation(line: 2679, column: 6, scope: !8482)
!8491 = !DILocation(line: 2681, column: 8, scope: !8492)
!8492 = distinct !DILexicalBlock(scope: !8462, file: !3, line: 2681, column: 8)
!8493 = !DILocation(line: 2681, column: 24, scope: !8492)
!8494 = !DILocation(line: 2682, column: 8, scope: !8492)
!8495 = !DILocation(line: 2682, column: 11, scope: !8492)
!8496 = !DILocation(line: 2681, column: 8, scope: !8462)
!8497 = !DILocation(line: 2683, column: 33, scope: !8492)
!8498 = !DILocation(line: 2683, column: 16, scope: !8492)
!8499 = !DILocation(line: 2683, column: 14, scope: !8492)
!8500 = !DILocation(line: 2683, column: 6, scope: !8492)
!8501 = !DILocation(line: 2685, column: 13, scope: !8502)
!8502 = distinct !DILexicalBlock(scope: !8492, file: !3, line: 2685, column: 13)
!8503 = !DILocation(line: 2685, column: 29, scope: !8502)
!8504 = !DILocation(line: 2685, column: 13, scope: !8492)
!8505 = !DILocation(line: 2687, column: 31, scope: !8506)
!8506 = distinct !DILexicalBlock(scope: !8507, file: !3, line: 2687, column: 12)
!8507 = distinct !DILexicalBlock(scope: !8502, file: !3, line: 2686, column: 6)
!8508 = !DILocation(line: 2687, column: 12, scope: !8506)
!8509 = !DILocation(line: 2687, column: 37, scope: !8506)
!8510 = !DILocation(line: 2687, column: 12, scope: !8507)
!8511 = !DILocation(line: 2688, column: 38, scope: !8506)
!8512 = !DILocation(line: 2688, column: 43, scope: !8506)
!8513 = !DILocation(line: 2688, column: 13, scope: !8506)
!8514 = !DILocation(line: 2688, column: 11, scope: !8506)
!8515 = !DILocation(line: 2688, column: 3, scope: !8506)
!8516 = !DILocation(line: 2690, column: 30, scope: !8506)
!8517 = !DILocation(line: 2690, column: 13, scope: !8506)
!8518 = !DILocation(line: 2690, column: 11, scope: !8506)
!8519 = !DILocation(line: 2691, column: 6, scope: !8507)
!8520 = !DILocation(line: 2693, column: 33, scope: !8502)
!8521 = !DILocation(line: 2693, column: 16, scope: !8502)
!8522 = !DILocation(line: 2693, column: 14, scope: !8502)
!8523 = !DILocation(line: 2694, column: 2, scope: !8462)
!8524 = !DILabel(scope: !8086, name: "done", file: !3, line: 2696)
!8525 = !DILocation(line: 2696, column: 2, scope: !8086)
!8526 = !DILocation(line: 2697, column: 10, scope: !8086)
!8527 = !DILocation(line: 2697, column: 3, scope: !8086)
!8528 = distinct !DISubprogram(name: "copy_nary", scope: !3, file: !3, line: 2770, type: !8529, scopeLine: 2771, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!8529 = !DISubroutineType(types: !8530)
!8530 = !{!1580, !2321, !1767}
!8531 = !DILocalVariable(name: "entry", arg: 1, scope: !8528, file: !3, line: 2770, type: !2321)
!8532 = !DILocation(line: 2770, column: 19, scope: !8528)
!8533 = !DILocalVariable(name: "data", arg: 2, scope: !8528, file: !3, line: 2770, type: !1767)
!8534 = !DILocation(line: 2770, column: 32, scope: !8528)
!8535 = !DILocalVariable(name: "onary", scope: !8528, file: !3, line: 2772, type: !2905)
!8536 = !DILocation(line: 2772, column: 16, scope: !8528)
!8537 = !DILocation(line: 2772, column: 40, scope: !8528)
!8538 = !DILocation(line: 2772, column: 39, scope: !8528)
!8539 = !DILocation(line: 2772, column: 24, scope: !8528)
!8540 = !DILocalVariable(name: "size", scope: !8528, file: !3, line: 2773, type: !1959)
!8541 = !DILocation(line: 2773, column: 10, scope: !8528)
!8542 = !DILocation(line: 2774, column: 27, scope: !8528)
!8543 = !DILocation(line: 2774, column: 34, scope: !8528)
!8544 = !DILocation(line: 2774, column: 25, scope: !8528)
!8545 = !DILocation(line: 2774, column: 22, scope: !8528)
!8546 = !DILocation(line: 2774, column: 20, scope: !8528)
!8547 = !DILocation(line: 2774, column: 4, scope: !8528)
!8548 = !DILocalVariable(name: "nary", scope: !8528, file: !3, line: 2775, type: !2905)
!8549 = !DILocation(line: 2775, column: 16, scope: !8528)
!8550 = !DILocation(line: 2775, column: 38, scope: !8528)
!8551 = !DILocation(line: 2775, column: 23, scope: !8528)
!8552 = !DILocalVariable(name: "slot", scope: !8528, file: !3, line: 2777, type: !2321)
!8553 = !DILocation(line: 2777, column: 10, scope: !8528)
!8554 = !DILocation(line: 2778, column: 11, scope: !8528)
!8555 = !DILocation(line: 2778, column: 3, scope: !8528)
!8556 = !DILocation(line: 2778, column: 17, scope: !8528)
!8557 = !DILocation(line: 2778, column: 24, scope: !8528)
!8558 = !DILocation(line: 2779, column: 36, scope: !8528)
!8559 = !DILocation(line: 2779, column: 50, scope: !8528)
!8560 = !DILocation(line: 2779, column: 56, scope: !8528)
!8561 = !DILocation(line: 2779, column: 62, scope: !8528)
!8562 = !DILocation(line: 2779, column: 68, scope: !8528)
!8563 = !DILocation(line: 2779, column: 10, scope: !8528)
!8564 = !DILocation(line: 2779, column: 8, scope: !8528)
!8565 = !DILocation(line: 2781, column: 3, scope: !8528)
!8566 = !DILocation(line: 2782, column: 11, scope: !8528)
!8567 = !DILocation(line: 2782, column: 4, scope: !8528)
!8568 = !DILocation(line: 2782, column: 9, scope: !8528)
!8569 = !DILocation(line: 2783, column: 3, scope: !8528)
!8570 = distinct !DISubprogram(name: "copy_phis", scope: !3, file: !3, line: 2789, type: !8529, scopeLine: 2790, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!8571 = !DILocalVariable(name: "entry", arg: 1, scope: !8570, file: !3, line: 2789, type: !2321)
!8572 = !DILocation(line: 2789, column: 19, scope: !8570)
!8573 = !DILocalVariable(name: "data", arg: 2, scope: !8570, file: !3, line: 2789, type: !1767)
!8574 = !DILocation(line: 2789, column: 32, scope: !8570)
!8575 = !DILocalVariable(name: "ophi", scope: !8570, file: !3, line: 2791, type: !2977)
!8576 = !DILocation(line: 2791, column: 12, scope: !8570)
!8577 = !DILocation(line: 2791, column: 31, scope: !8570)
!8578 = !DILocation(line: 2791, column: 30, scope: !8570)
!8579 = !DILocation(line: 2791, column: 19, scope: !8570)
!8580 = !DILocalVariable(name: "phi", scope: !8570, file: !3, line: 2792, type: !2977)
!8581 = !DILocation(line: 2792, column: 12, scope: !8570)
!8582 = !DILocation(line: 2792, column: 41, scope: !8570)
!8583 = !DILocation(line: 2792, column: 55, scope: !8570)
!8584 = !DILocation(line: 2792, column: 29, scope: !8570)
!8585 = !DILocation(line: 2792, column: 18, scope: !8570)
!8586 = !DILocalVariable(name: "slot", scope: !8570, file: !3, line: 2793, type: !2321)
!8587 = !DILocation(line: 2793, column: 10, scope: !8570)
!8588 = !DILocation(line: 2794, column: 11, scope: !8570)
!8589 = !DILocation(line: 2794, column: 3, scope: !8570)
!8590 = !DILocation(line: 2794, column: 16, scope: !8570)
!8591 = !DILocation(line: 2795, column: 3, scope: !8570)
!8592 = !DILocation(line: 2795, column: 9, scope: !8570)
!8593 = !DILocation(line: 2795, column: 17, scope: !8570)
!8594 = !DILocation(line: 2796, column: 36, scope: !8570)
!8595 = !DILocation(line: 2796, column: 50, scope: !8570)
!8596 = !DILocation(line: 2796, column: 56, scope: !8570)
!8597 = !DILocation(line: 2796, column: 61, scope: !8570)
!8598 = !DILocation(line: 2796, column: 66, scope: !8570)
!8599 = !DILocation(line: 2796, column: 10, scope: !8570)
!8600 = !DILocation(line: 2796, column: 8, scope: !8570)
!8601 = !DILocation(line: 2798, column: 11, scope: !8570)
!8602 = !DILocation(line: 2798, column: 4, scope: !8570)
!8603 = !DILocation(line: 2798, column: 9, scope: !8570)
!8604 = !DILocation(line: 2799, column: 3, scope: !8570)
!8605 = distinct !DISubprogram(name: "copy_references", scope: !3, file: !3, line: 2805, type: !8529, scopeLine: 2806, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!8606 = !DILocalVariable(name: "entry", arg: 1, scope: !8605, file: !3, line: 2805, type: !2321)
!8607 = !DILocation(line: 2805, column: 25, scope: !8605)
!8608 = !DILocalVariable(name: "data", arg: 2, scope: !8605, file: !3, line: 2805, type: !1767)
!8609 = !DILocation(line: 2805, column: 38, scope: !8605)
!8610 = !DILocalVariable(name: "oref", scope: !8605, file: !3, line: 2807, type: !2890)
!8611 = !DILocation(line: 2807, column: 18, scope: !8605)
!8612 = !DILocation(line: 2807, column: 43, scope: !8605)
!8613 = !DILocation(line: 2807, column: 42, scope: !8605)
!8614 = !DILocation(line: 2807, column: 25, scope: !8605)
!8615 = !DILocalVariable(name: "ref", scope: !8605, file: !3, line: 2808, type: !2890)
!8616 = !DILocation(line: 2808, column: 18, scope: !8605)
!8617 = !DILocalVariable(name: "slot", scope: !8605, file: !3, line: 2809, type: !2321)
!8618 = !DILocation(line: 2809, column: 10, scope: !8605)
!8619 = !DILocation(line: 2810, column: 38, scope: !8605)
!8620 = !DILocation(line: 2810, column: 52, scope: !8605)
!8621 = !DILocation(line: 2810, column: 26, scope: !8605)
!8622 = !DILocation(line: 2810, column: 9, scope: !8605)
!8623 = !DILocation(line: 2810, column: 7, scope: !8605)
!8624 = !DILocation(line: 2811, column: 11, scope: !8605)
!8625 = !DILocation(line: 2811, column: 3, scope: !8605)
!8626 = !DILocation(line: 2811, column: 16, scope: !8605)
!8627 = !DILocation(line: 2812, column: 3, scope: !8605)
!8628 = !DILocation(line: 2812, column: 9, scope: !8605)
!8629 = !DILocation(line: 2812, column: 18, scope: !8605)
!8630 = !DILocation(line: 2813, column: 36, scope: !8605)
!8631 = !DILocation(line: 2813, column: 50, scope: !8605)
!8632 = !DILocation(line: 2813, column: 62, scope: !8605)
!8633 = !DILocation(line: 2813, column: 67, scope: !8605)
!8634 = !DILocation(line: 2813, column: 72, scope: !8605)
!8635 = !DILocation(line: 2813, column: 10, scope: !8605)
!8636 = !DILocation(line: 2813, column: 8, scope: !8605)
!8637 = !DILocation(line: 2815, column: 8, scope: !8638)
!8638 = distinct !DILexicalBlock(scope: !8605, file: !3, line: 2815, column: 7)
!8639 = !DILocation(line: 2815, column: 7, scope: !8638)
!8640 = !DILocation(line: 2815, column: 7, scope: !8605)
!8641 = !DILocation(line: 2816, column: 22, scope: !8638)
!8642 = !DILocation(line: 2816, column: 21, scope: !8638)
!8643 = !DILocation(line: 2816, column: 5, scope: !8638)
!8644 = !DILocation(line: 2817, column: 11, scope: !8605)
!8645 = !DILocation(line: 2817, column: 4, scope: !8605)
!8646 = !DILocation(line: 2817, column: 9, scope: !8605)
!8647 = !DILocation(line: 2818, column: 3, scope: !8605)
!8648 = distinct !DISubprogram(name: "set_ssa_val_to", scope: !3, file: !3, line: 1798, type: !5435, scopeLine: 1799, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!8649 = !DILocalVariable(name: "from", arg: 1, scope: !8648, file: !3, line: 1798, type: !1483)
!8650 = !DILocation(line: 1798, column: 22, scope: !8648)
!8651 = !DILocalVariable(name: "to", arg: 2, scope: !8648, file: !3, line: 1798, type: !1483)
!8652 = !DILocation(line: 1798, column: 33, scope: !8648)
!8653 = !DILocalVariable(name: "currval", scope: !8648, file: !3, line: 1800, type: !1483)
!8654 = !DILocation(line: 1800, column: 8, scope: !8648)
!8655 = !DILocation(line: 1802, column: 7, scope: !8656)
!8656 = distinct !DILexicalBlock(scope: !8648, file: !3, line: 1802, column: 7)
!8657 = !DILocation(line: 1802, column: 15, scope: !8656)
!8658 = !DILocation(line: 1802, column: 12, scope: !8656)
!8659 = !DILocation(line: 1803, column: 7, scope: !8656)
!8660 = !DILocation(line: 1803, column: 10, scope: !8656)
!8661 = !DILocation(line: 1803, column: 25, scope: !8656)
!8662 = !DILocation(line: 1804, column: 7, scope: !8656)
!8663 = !DILocation(line: 1804, column: 10, scope: !8656)
!8664 = !DILocation(line: 1802, column: 7, scope: !8648)
!8665 = !DILocation(line: 1805, column: 10, scope: !8656)
!8666 = !DILocation(line: 1805, column: 8, scope: !8656)
!8667 = !DILocation(line: 1805, column: 5, scope: !8656)
!8668 = !DILocation(line: 1809, column: 3, scope: !8648)
!8669 = !DILocation(line: 1814, column: 7, scope: !8670)
!8670 = distinct !DILexicalBlock(scope: !8648, file: !3, line: 1814, column: 7)
!8671 = !DILocation(line: 1814, column: 17, scope: !8670)
!8672 = !DILocation(line: 1814, column: 21, scope: !8670)
!8673 = !DILocation(line: 1814, column: 32, scope: !8670)
!8674 = !DILocation(line: 1814, column: 7, scope: !8648)
!8675 = !DILocation(line: 1816, column: 16, scope: !8676)
!8676 = distinct !DILexicalBlock(scope: !8670, file: !3, line: 1815, column: 5)
!8677 = !DILocation(line: 1816, column: 7, scope: !8676)
!8678 = !DILocation(line: 1817, column: 27, scope: !8676)
!8679 = !DILocation(line: 1817, column: 38, scope: !8676)
!8680 = !DILocation(line: 1817, column: 7, scope: !8676)
!8681 = !DILocation(line: 1818, column: 16, scope: !8676)
!8682 = !DILocation(line: 1818, column: 7, scope: !8676)
!8683 = !DILocation(line: 1819, column: 27, scope: !8676)
!8684 = !DILocation(line: 1819, column: 38, scope: !8676)
!8685 = !DILocation(line: 1819, column: 7, scope: !8676)
!8686 = !DILocation(line: 1820, column: 5, scope: !8676)
!8687 = !DILocation(line: 1822, column: 13, scope: !8648)
!8688 = !DILocation(line: 1822, column: 11, scope: !8648)
!8689 = !DILocation(line: 1824, column: 7, scope: !8690)
!8690 = distinct !DILexicalBlock(scope: !8648, file: !3, line: 1824, column: 7)
!8691 = !DILocation(line: 1824, column: 18, scope: !8690)
!8692 = !DILocation(line: 1824, column: 15, scope: !8690)
!8693 = !DILocation(line: 1824, column: 22, scope: !8690)
!8694 = !DILocation(line: 1824, column: 43, scope: !8690)
!8695 = !DILocation(line: 1824, column: 52, scope: !8690)
!8696 = !DILocation(line: 1824, column: 26, scope: !8690)
!8697 = !DILocation(line: 1824, column: 7, scope: !8648)
!8698 = !DILocation(line: 1826, column: 32, scope: !8699)
!8699 = distinct !DILexicalBlock(scope: !8690, file: !3, line: 1825, column: 5)
!8700 = !DILocation(line: 1826, column: 16, scope: !8699)
!8701 = !DILocation(line: 1826, column: 7, scope: !8699)
!8702 = !DILocation(line: 1826, column: 23, scope: !8699)
!8703 = !DILocation(line: 1826, column: 30, scope: !8699)
!8704 = !DILocation(line: 1827, column: 11, scope: !8705)
!8705 = distinct !DILexicalBlock(scope: !8699, file: !3, line: 1827, column: 11)
!8706 = !DILocation(line: 1827, column: 21, scope: !8705)
!8707 = !DILocation(line: 1827, column: 25, scope: !8705)
!8708 = !DILocation(line: 1827, column: 36, scope: !8705)
!8709 = !DILocation(line: 1827, column: 11, scope: !8699)
!8710 = !DILocation(line: 1828, column: 11, scope: !8705)
!8711 = !DILocation(line: 1828, column: 2, scope: !8705)
!8712 = !DILocation(line: 1829, column: 7, scope: !8699)
!8713 = !DILocation(line: 1831, column: 7, scope: !8714)
!8714 = distinct !DILexicalBlock(scope: !8648, file: !3, line: 1831, column: 7)
!8715 = !DILocation(line: 1831, column: 17, scope: !8714)
!8716 = !DILocation(line: 1831, column: 21, scope: !8714)
!8717 = !DILocation(line: 1831, column: 32, scope: !8714)
!8718 = !DILocation(line: 1831, column: 7, scope: !8648)
!8719 = !DILocation(line: 1832, column: 14, scope: !8714)
!8720 = !DILocation(line: 1832, column: 5, scope: !8714)
!8721 = !DILocation(line: 1833, column: 3, scope: !8648)
!8722 = !DILocation(line: 1834, column: 1, scope: !8648)
!8723 = distinct !DISubprogram(name: "visit_phi", scope: !3, file: !3, line: 2162, type: !8724, scopeLine: 2163, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!8724 = !DISubroutineType(types: !8725)
!8725 = !{!1603, !1814}
!8726 = !DILocalVariable(name: "phi", arg: 1, scope: !8723, file: !3, line: 2162, type: !1814)
!8727 = !DILocation(line: 2162, column: 19, scope: !8723)
!8728 = !DILocalVariable(name: "changed", scope: !8723, file: !3, line: 2164, type: !1603)
!8729 = !DILocation(line: 2164, column: 8, scope: !8723)
!8730 = !DILocalVariable(name: "result", scope: !8723, file: !3, line: 2165, type: !1483)
!8731 = !DILocation(line: 2165, column: 8, scope: !8723)
!8732 = !DILocalVariable(name: "sameval", scope: !8723, file: !3, line: 2166, type: !1483)
!8733 = !DILocation(line: 2166, column: 8, scope: !8723)
!8734 = !DILocation(line: 2166, column: 18, scope: !8723)
!8735 = !DILocalVariable(name: "allsame", scope: !8723, file: !3, line: 2167, type: !1603)
!8736 = !DILocation(line: 2167, column: 8, scope: !8723)
!8737 = !DILocalVariable(name: "i", scope: !8723, file: !3, line: 2168, type: !7)
!8738 = !DILocation(line: 2168, column: 12, scope: !8723)
!8739 = !DILocation(line: 2172, column: 7, scope: !8740)
!8740 = distinct !DILexicalBlock(scope: !8723, file: !3, line: 2172, column: 7)
!8741 = !DILocation(line: 2172, column: 7, scope: !8723)
!8742 = !DILocation(line: 2173, column: 28, scope: !8740)
!8743 = !DILocation(line: 2173, column: 46, scope: !8740)
!8744 = !DILocation(line: 2173, column: 12, scope: !8740)
!8745 = !DILocation(line: 2173, column: 5, scope: !8740)
!8746 = !DILocation(line: 2177, column: 10, scope: !8747)
!8747 = distinct !DILexicalBlock(scope: !8723, file: !3, line: 2177, column: 3)
!8748 = !DILocation(line: 2177, column: 8, scope: !8747)
!8749 = !DILocation(line: 2177, column: 15, scope: !8750)
!8750 = distinct !DILexicalBlock(scope: !8747, file: !3, line: 2177, column: 3)
!8751 = !DILocation(line: 2177, column: 40, scope: !8750)
!8752 = !DILocation(line: 2177, column: 19, scope: !8750)
!8753 = !DILocation(line: 2177, column: 17, scope: !8750)
!8754 = !DILocation(line: 2177, column: 3, scope: !8747)
!8755 = !DILocalVariable(name: "def", scope: !8756, file: !3, line: 2179, type: !1483)
!8756 = distinct !DILexicalBlock(scope: !8750, file: !3, line: 2178, column: 5)
!8757 = !DILocation(line: 2179, column: 12, scope: !8756)
!8758 = !DILocation(line: 2179, column: 18, scope: !8756)
!8759 = !DILocation(line: 2181, column: 11, scope: !8760)
!8760 = distinct !DILexicalBlock(scope: !8756, file: !3, line: 2181, column: 11)
!8761 = !DILocation(line: 2181, column: 27, scope: !8760)
!8762 = !DILocation(line: 2181, column: 11, scope: !8756)
!8763 = !DILocation(line: 2182, column: 8, scope: !8760)
!8764 = !DILocation(line: 2182, column: 6, scope: !8760)
!8765 = !DILocation(line: 2182, column: 2, scope: !8760)
!8766 = !DILocation(line: 2183, column: 11, scope: !8767)
!8767 = distinct !DILexicalBlock(scope: !8756, file: !3, line: 2183, column: 11)
!8768 = !DILocation(line: 2183, column: 18, scope: !8767)
!8769 = !DILocation(line: 2183, column: 15, scope: !8767)
!8770 = !DILocation(line: 2183, column: 11, scope: !8756)
!8771 = !DILocation(line: 2184, column: 2, scope: !8767)
!8772 = !DILocation(line: 2185, column: 11, scope: !8773)
!8773 = distinct !DILexicalBlock(scope: !8756, file: !3, line: 2185, column: 11)
!8774 = !DILocation(line: 2185, column: 22, scope: !8773)
!8775 = !DILocation(line: 2185, column: 19, scope: !8773)
!8776 = !DILocation(line: 2185, column: 11, scope: !8756)
!8777 = !DILocation(line: 2187, column: 14, scope: !8778)
!8778 = distinct !DILexicalBlock(scope: !8773, file: !3, line: 2186, column: 2)
!8779 = !DILocation(line: 2187, column: 12, scope: !8778)
!8780 = !DILocation(line: 2188, column: 2, scope: !8778)
!8781 = !DILocation(line: 2191, column: 30, scope: !8782)
!8782 = distinct !DILexicalBlock(scope: !8783, file: !3, line: 2191, column: 8)
!8783 = distinct !DILexicalBlock(scope: !8773, file: !3, line: 2190, column: 2)
!8784 = !DILocation(line: 2191, column: 35, scope: !8782)
!8785 = !DILocation(line: 2191, column: 9, scope: !8782)
!8786 = !DILocation(line: 2191, column: 8, scope: !8783)
!8787 = !DILocation(line: 2193, column: 16, scope: !8788)
!8788 = distinct !DILexicalBlock(scope: !8782, file: !3, line: 2192, column: 6)
!8789 = !DILocation(line: 2194, column: 8, scope: !8788)
!8790 = !DILocation(line: 2197, column: 5, scope: !8756)
!8791 = !DILocation(line: 2177, column: 47, scope: !8750)
!8792 = !DILocation(line: 2177, column: 3, scope: !8750)
!8793 = distinct !{!8793, !8754, !8794}
!8794 = !DILocation(line: 2197, column: 5, scope: !8747)
!8795 = !DILocation(line: 2201, column: 7, scope: !8796)
!8796 = distinct !DILexicalBlock(scope: !8723, file: !3, line: 2201, column: 7)
!8797 = !DILocation(line: 2201, column: 7, scope: !8723)
!8798 = !DILocation(line: 2203, column: 36, scope: !8799)
!8799 = distinct !DILexicalBlock(scope: !8800, file: !3, line: 2203, column: 11)
!8800 = distinct !DILexicalBlock(scope: !8796, file: !3, line: 2202, column: 5)
!8801 = !DILocation(line: 2203, column: 11, scope: !8799)
!8802 = !DILocation(line: 2203, column: 11, scope: !8800)
!8803 = !DILocation(line: 2205, column: 13, scope: !8804)
!8804 = distinct !DILexicalBlock(scope: !8799, file: !3, line: 2204, column: 2)
!8805 = !DILocation(line: 2205, column: 4, scope: !8804)
!8806 = !DILocation(line: 2205, column: 32, scope: !8804)
!8807 = !DILocation(line: 2205, column: 46, scope: !8804)
!8808 = !DILocation(line: 2206, column: 39, scope: !8804)
!8809 = !DILocation(line: 2206, column: 13, scope: !8804)
!8810 = !DILocation(line: 2206, column: 4, scope: !8804)
!8811 = !DILocation(line: 2206, column: 32, scope: !8804)
!8812 = !DILocation(line: 2206, column: 37, scope: !8804)
!8813 = !DILocation(line: 2207, column: 2, scope: !8804)
!8814 = !DILocation(line: 2210, column: 13, scope: !8815)
!8815 = distinct !DILexicalBlock(scope: !8799, file: !3, line: 2209, column: 2)
!8816 = !DILocation(line: 2210, column: 4, scope: !8815)
!8817 = !DILocation(line: 2210, column: 32, scope: !8815)
!8818 = !DILocation(line: 2210, column: 46, scope: !8815)
!8819 = !DILocation(line: 2211, column: 39, scope: !8815)
!8820 = !DILocation(line: 2211, column: 13, scope: !8815)
!8821 = !DILocation(line: 2211, column: 4, scope: !8815)
!8822 = !DILocation(line: 2211, column: 32, scope: !8815)
!8823 = !DILocation(line: 2211, column: 37, scope: !8815)
!8824 = !DILocation(line: 2214, column: 11, scope: !8825)
!8825 = distinct !DILexicalBlock(scope: !8800, file: !3, line: 2214, column: 11)
!8826 = !DILocation(line: 2214, column: 31, scope: !8825)
!8827 = !DILocation(line: 2214, column: 11, scope: !8800)
!8828 = !DILocation(line: 2215, column: 21, scope: !8825)
!8829 = !DILocation(line: 2215, column: 39, scope: !8825)
!8830 = !DILocation(line: 2215, column: 9, scope: !8825)
!8831 = !DILocation(line: 2215, column: 2, scope: !8825)
!8832 = !DILocation(line: 2217, column: 30, scope: !8800)
!8833 = !DILocation(line: 2217, column: 48, scope: !8800)
!8834 = !DILocation(line: 2217, column: 14, scope: !8800)
!8835 = !DILocation(line: 2217, column: 7, scope: !8800)
!8836 = !DILocation(line: 2221, column: 27, scope: !8723)
!8837 = !DILocation(line: 2221, column: 12, scope: !8723)
!8838 = !DILocation(line: 2221, column: 10, scope: !8723)
!8839 = !DILocation(line: 2222, column: 7, scope: !8840)
!8840 = distinct !DILexicalBlock(scope: !8723, file: !3, line: 2222, column: 7)
!8841 = !DILocation(line: 2222, column: 7, scope: !8723)
!8842 = !DILocation(line: 2224, column: 11, scope: !8843)
!8843 = distinct !DILexicalBlock(scope: !8844, file: !3, line: 2224, column: 11)
!8844 = distinct !DILexicalBlock(scope: !8840, file: !3, line: 2223, column: 5)
!8845 = !DILocation(line: 2224, column: 30, scope: !8843)
!8846 = !DILocation(line: 2224, column: 11, scope: !8844)
!8847 = !DILocation(line: 2225, column: 24, scope: !8843)
!8848 = !DILocation(line: 2225, column: 42, scope: !8843)
!8849 = !DILocation(line: 2225, column: 12, scope: !8843)
!8850 = !DILocation(line: 2225, column: 10, scope: !8843)
!8851 = !DILocation(line: 2225, column: 2, scope: !8843)
!8852 = !DILocation(line: 2227, column: 28, scope: !8843)
!8853 = !DILocation(line: 2227, column: 46, scope: !8843)
!8854 = !DILocation(line: 2227, column: 12, scope: !8843)
!8855 = !DILocation(line: 2227, column: 10, scope: !8843)
!8856 = !DILocation(line: 2228, column: 5, scope: !8844)
!8857 = !DILocation(line: 2231, column: 22, scope: !8858)
!8858 = distinct !DILexicalBlock(scope: !8840, file: !3, line: 2230, column: 5)
!8859 = !DILocation(line: 2231, column: 27, scope: !8858)
!8860 = !DILocation(line: 2231, column: 7, scope: !8858)
!8861 = !DILocation(line: 2232, column: 16, scope: !8858)
!8862 = !DILocation(line: 2232, column: 7, scope: !8858)
!8863 = !DILocation(line: 2232, column: 35, scope: !8858)
!8864 = !DILocation(line: 2232, column: 49, scope: !8858)
!8865 = !DILocation(line: 2233, column: 42, scope: !8858)
!8866 = !DILocation(line: 2233, column: 16, scope: !8858)
!8867 = !DILocation(line: 2233, column: 7, scope: !8858)
!8868 = !DILocation(line: 2233, column: 35, scope: !8858)
!8869 = !DILocation(line: 2233, column: 40, scope: !8858)
!8870 = !DILocation(line: 2234, column: 33, scope: !8858)
!8871 = !DILocation(line: 2234, column: 51, scope: !8858)
!8872 = !DILocation(line: 2234, column: 17, scope: !8858)
!8873 = !DILocation(line: 2234, column: 15, scope: !8858)
!8874 = !DILocation(line: 2237, column: 10, scope: !8723)
!8875 = !DILocation(line: 2237, column: 3, scope: !8723)
!8876 = !DILocation(line: 2238, column: 1, scope: !8723)
!8877 = distinct !DISubprogram(name: "gimple_has_lhs", scope: !391, file: !391, line: 2210, type: !8724, scopeLine: 2211, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!8878 = !DILocalVariable(name: "stmt", arg: 1, scope: !8877, file: !391, line: 2210, type: !1814)
!8879 = !DILocation(line: 2210, column: 24, scope: !8877)
!8880 = !DILocation(line: 2212, column: 29, scope: !8877)
!8881 = !DILocation(line: 2212, column: 11, scope: !8877)
!8882 = !DILocation(line: 2213, column: 4, scope: !8877)
!8883 = !DILocation(line: 2213, column: 24, scope: !8877)
!8884 = !DILocation(line: 2213, column: 8, scope: !8877)
!8885 = !DILocation(line: 2214, column: 8, scope: !8877)
!8886 = !DILocation(line: 2214, column: 28, scope: !8877)
!8887 = !DILocation(line: 2214, column: 11, scope: !8877)
!8888 = !DILocation(line: 2214, column: 34, scope: !8877)
!8889 = !DILocation(line: 0, scope: !8877)
!8890 = !DILocation(line: 2212, column: 10, scope: !8877)
!8891 = !DILocation(line: 2212, column: 3, scope: !8877)
!8892 = distinct !DISubprogram(name: "gimple_has_volatile_ops", scope: !391, file: !391, line: 1477, type: !3218, scopeLine: 1478, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!8893 = !DILocalVariable(name: "stmt", arg: 1, scope: !8892, file: !391, line: 1477, type: !3220)
!8894 = !DILocation(line: 1477, column: 39, scope: !8892)
!8895 = !DILocation(line: 1479, column: 27, scope: !8896)
!8896 = distinct !DILexicalBlock(scope: !8892, file: !391, line: 1479, column: 7)
!8897 = !DILocation(line: 1479, column: 7, scope: !8896)
!8898 = !DILocation(line: 1479, column: 7, scope: !8892)
!8899 = !DILocation(line: 1480, column: 12, scope: !8896)
!8900 = !DILocation(line: 1480, column: 18, scope: !8896)
!8901 = !DILocation(line: 1480, column: 25, scope: !8896)
!8902 = !DILocation(line: 1480, column: 5, scope: !8896)
!8903 = !DILocation(line: 1482, column: 5, scope: !8896)
!8904 = !DILocation(line: 1483, column: 1, scope: !8892)
!8905 = distinct !DISubprogram(name: "defs_to_varying", scope: !3, file: !3, line: 1840, type: !8724, scopeLine: 1841, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!8906 = !DILocalVariable(name: "stmt", arg: 1, scope: !8905, file: !3, line: 1840, type: !1814)
!8907 = !DILocation(line: 1840, column: 25, scope: !8905)
!8908 = !DILocalVariable(name: "changed", scope: !8905, file: !3, line: 1842, type: !1603)
!8909 = !DILocation(line: 1842, column: 8, scope: !8905)
!8910 = !DILocalVariable(name: "iter", scope: !8905, file: !3, line: 1843, type: !2997)
!8911 = !DILocation(line: 1843, column: 15, scope: !8905)
!8912 = !DILocalVariable(name: "defp", scope: !8905, file: !3, line: 1844, type: !2984)
!8913 = !DILocation(line: 1844, column: 17, scope: !8905)
!8914 = !DILocation(line: 1846, column: 3, scope: !8915)
!8915 = distinct !DILexicalBlock(scope: !8905, file: !3, line: 1846, column: 3)
!8916 = !DILocation(line: 1846, column: 3, scope: !8917)
!8917 = distinct !DILexicalBlock(scope: !8915, file: !3, line: 1846, column: 3)
!8918 = !DILocalVariable(name: "def", scope: !8919, file: !3, line: 1848, type: !1483)
!8919 = distinct !DILexicalBlock(scope: !8917, file: !3, line: 1847, column: 5)
!8920 = !DILocation(line: 1848, column: 12, scope: !8919)
!8921 = !DILocation(line: 1848, column: 18, scope: !8919)
!8922 = !DILocation(line: 1850, column: 16, scope: !8919)
!8923 = !DILocation(line: 1850, column: 7, scope: !8919)
!8924 = !DILocation(line: 1850, column: 22, scope: !8919)
!8925 = !DILocation(line: 1850, column: 36, scope: !8919)
!8926 = !DILocation(line: 1851, column: 34, scope: !8919)
!8927 = !DILocation(line: 1851, column: 39, scope: !8919)
!8928 = !DILocation(line: 1851, column: 18, scope: !8919)
!8929 = !DILocation(line: 1851, column: 15, scope: !8919)
!8930 = !DILocation(line: 1852, column: 5, scope: !8919)
!8931 = distinct !{!8931, !8914, !8932}
!8932 = !DILocation(line: 1852, column: 5, scope: !8915)
!8933 = !DILocation(line: 1853, column: 10, scope: !8905)
!8934 = !DILocation(line: 1853, column: 3, scope: !8905)
!8935 = distinct !DISubprogram(name: "visit_copy", scope: !3, file: !3, line: 1863, type: !5435, scopeLine: 1864, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!8936 = !DILocalVariable(name: "lhs", arg: 1, scope: !8935, file: !3, line: 1863, type: !1483)
!8937 = !DILocation(line: 1863, column: 18, scope: !8935)
!8938 = !DILocalVariable(name: "rhs", arg: 2, scope: !8935, file: !3, line: 1863, type: !1483)
!8939 = !DILocation(line: 1863, column: 28, scope: !8935)
!8940 = !DILocation(line: 1866, column: 3, scope: !8935)
!8941 = !DILocation(line: 1866, column: 10, scope: !8935)
!8942 = !DILocation(line: 1866, column: 26, scope: !8935)
!8943 = !DILocation(line: 1867, column: 3, scope: !8935)
!8944 = !DILocation(line: 1867, column: 6, scope: !8935)
!8945 = !DILocation(line: 1867, column: 23, scope: !8935)
!8946 = !DILocation(line: 1867, column: 20, scope: !8935)
!8947 = !DILocation(line: 0, scope: !8935)
!8948 = !DILocation(line: 1868, column: 11, scope: !8935)
!8949 = !DILocation(line: 1868, column: 9, scope: !8935)
!8950 = distinct !{!8950, !8940, !8948}
!8951 = !DILocation(line: 1872, column: 7, scope: !8952)
!8952 = distinct !DILexicalBlock(scope: !8935, file: !3, line: 1872, column: 7)
!8953 = !DILocation(line: 1872, column: 23, scope: !8952)
!8954 = !DILocation(line: 1872, column: 7, scope: !8935)
!8955 = !DILocation(line: 1874, column: 47, scope: !8956)
!8956 = distinct !DILexicalBlock(scope: !8952, file: !3, line: 1873, column: 5)
!8957 = !DILocation(line: 1874, column: 38, scope: !8956)
!8958 = !DILocation(line: 1874, column: 53, scope: !8956)
!8959 = !DILocation(line: 1874, column: 16, scope: !8956)
!8960 = !DILocation(line: 1874, column: 7, scope: !8956)
!8961 = !DILocation(line: 1874, column: 22, scope: !8956)
!8962 = !DILocation(line: 1874, column: 36, scope: !8956)
!8963 = !DILocation(line: 1875, column: 38, scope: !8956)
!8964 = !DILocation(line: 1875, column: 29, scope: !8956)
!8965 = !DILocation(line: 1875, column: 44, scope: !8956)
!8966 = !DILocation(line: 1875, column: 16, scope: !8956)
!8967 = !DILocation(line: 1875, column: 7, scope: !8956)
!8968 = !DILocation(line: 1875, column: 22, scope: !8956)
!8969 = !DILocation(line: 1875, column: 27, scope: !8956)
!8970 = !DILocation(line: 1876, column: 5, scope: !8956)
!8971 = !DILocation(line: 1878, column: 26, scope: !8935)
!8972 = !DILocation(line: 1878, column: 31, scope: !8935)
!8973 = !DILocation(line: 1878, column: 10, scope: !8935)
!8974 = !DILocation(line: 1878, column: 3, scope: !8935)
!8975 = distinct !DISubprogram(name: "try_to_simplify", scope: !3, file: !3, line: 2431, type: !8976, scopeLine: 2432, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!8976 = !DISubroutineType(types: !8977)
!8977 = !{!1483, !1814}
!8978 = !DILocalVariable(name: "stmt", arg: 1, scope: !8975, file: !3, line: 2431, type: !1814)
!8979 = !DILocation(line: 2431, column: 25, scope: !8975)
!8980 = !DILocalVariable(name: "tem", scope: !8975, file: !3, line: 2433, type: !1483)
!8981 = !DILocation(line: 2433, column: 8, scope: !8975)
!8982 = !DILocation(line: 2437, column: 29, scope: !8983)
!8983 = distinct !DILexicalBlock(scope: !8975, file: !3, line: 2437, column: 7)
!8984 = !DILocation(line: 2437, column: 7, scope: !8983)
!8985 = !DILocation(line: 2438, column: 7, scope: !8983)
!8986 = !DILocation(line: 2438, column: 10, scope: !8983)
!8987 = !DILocation(line: 2438, column: 48, scope: !8983)
!8988 = !DILocation(line: 2437, column: 7, scope: !8975)
!8989 = !DILocation(line: 2439, column: 5, scope: !8983)
!8990 = !DILocation(line: 2441, column: 11, scope: !8975)
!8991 = !DILocation(line: 2441, column: 3, scope: !8975)
!8992 = !DILocation(line: 2444, column: 60, scope: !8993)
!8993 = distinct !DILexicalBlock(scope: !8975, file: !3, line: 2442, column: 5)
!8994 = !DILocation(line: 2444, column: 40, scope: !8993)
!8995 = !DILocation(line: 2444, column: 13, scope: !8993)
!8996 = !DILocation(line: 2444, column: 11, scope: !8993)
!8997 = !DILocation(line: 2445, column: 11, scope: !8998)
!8998 = distinct !DILexicalBlock(scope: !8993, file: !3, line: 2445, column: 11)
!8999 = !DILocation(line: 2445, column: 11, scope: !8993)
!9000 = !DILocation(line: 2446, column: 9, scope: !8998)
!9001 = !DILocation(line: 2446, column: 2, scope: !8998)
!9002 = !DILocation(line: 2447, column: 7, scope: !8993)
!9003 = !DILocation(line: 2452, column: 59, scope: !8993)
!9004 = !DILocation(line: 2452, column: 39, scope: !8993)
!9005 = !DILocation(line: 2452, column: 13, scope: !8993)
!9006 = !DILocation(line: 2452, column: 11, scope: !8993)
!9007 = !DILocation(line: 2453, column: 11, scope: !9008)
!9008 = distinct !DILexicalBlock(scope: !8993, file: !3, line: 2453, column: 11)
!9009 = !DILocation(line: 2453, column: 11, scope: !8993)
!9010 = !DILocation(line: 2454, column: 9, scope: !9008)
!9011 = !DILocation(line: 2454, column: 2, scope: !9008)
!9012 = !DILocation(line: 2457, column: 13, scope: !9013)
!9013 = distinct !DILexicalBlock(scope: !8993, file: !3, line: 2457, column: 11)
!9014 = !DILocation(line: 2457, column: 51, scope: !9013)
!9015 = !DILocation(line: 2458, column: 6, scope: !9013)
!9016 = !DILocation(line: 2458, column: 9, scope: !9013)
!9017 = !DILocation(line: 2458, column: 47, scope: !9013)
!9018 = !DILocation(line: 2459, column: 6, scope: !9013)
!9019 = !DILocation(line: 2459, column: 9, scope: !9013)
!9020 = !DILocation(line: 2459, column: 47, scope: !9013)
!9021 = !DILocation(line: 2457, column: 11, scope: !8993)
!9022 = !DILocation(line: 2460, column: 2, scope: !9013)
!9023 = !DILocation(line: 2459, column: 67, scope: !9013)
!9024 = !DILocation(line: 2464, column: 41, scope: !8993)
!9025 = !DILocation(line: 2464, column: 14, scope: !8993)
!9026 = !DILocation(line: 2464, column: 7, scope: !8993)
!9027 = !DILocation(line: 2468, column: 42, scope: !8993)
!9028 = !DILocation(line: 2468, column: 14, scope: !8993)
!9029 = !DILocation(line: 2468, column: 7, scope: !8993)
!9030 = !DILocation(line: 2471, column: 7, scope: !8993)
!9031 = !DILocation(line: 2474, column: 3, scope: !8975)
!9032 = !DILocation(line: 2475, column: 1, scope: !8975)
!9033 = distinct !DISubprogram(name: "expr_has_constants", scope: !3, file: !3, line: 2243, type: !6529, scopeLine: 2244, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!9034 = !DILocalVariable(name: "expr", arg: 1, scope: !9033, file: !3, line: 2243, type: !1483)
!9035 = !DILocation(line: 2243, column: 26, scope: !9033)
!9036 = !DILocation(line: 2245, column: 11, scope: !9033)
!9037 = !DILocation(line: 2245, column: 3, scope: !9033)
!9038 = !DILocation(line: 2248, column: 39, scope: !9039)
!9039 = distinct !DILexicalBlock(scope: !9033, file: !3, line: 2246, column: 5)
!9040 = !DILocation(line: 2248, column: 14, scope: !9039)
!9041 = !DILocation(line: 2248, column: 7, scope: !9039)
!9042 = !DILocation(line: 2251, column: 39, scope: !9039)
!9043 = !DILocation(line: 2251, column: 14, scope: !9039)
!9044 = !DILocation(line: 2252, column: 2, scope: !9039)
!9045 = !DILocation(line: 2252, column: 30, scope: !9039)
!9046 = !DILocation(line: 2252, column: 5, scope: !9039)
!9047 = !DILocation(line: 2251, column: 7, scope: !9039)
!9048 = !DILocation(line: 2257, column: 7, scope: !9039)
!9049 = !DILocation(line: 2259, column: 39, scope: !9039)
!9050 = !DILocation(line: 2259, column: 14, scope: !9039)
!9051 = !DILocation(line: 2259, column: 7, scope: !9039)
!9052 = !DILocation(line: 2262, column: 1, scope: !9033)
!9053 = distinct !DISubprogram(name: "stmt_has_constants", scope: !3, file: !3, line: 2267, type: !8724, scopeLine: 2268, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!9054 = !DILocalVariable(name: "stmt", arg: 1, scope: !9053, file: !3, line: 2267, type: !1814)
!9055 = !DILocation(line: 2267, column: 28, scope: !9053)
!9056 = !DILocation(line: 2269, column: 20, scope: !9057)
!9057 = distinct !DILexicalBlock(scope: !9053, file: !3, line: 2269, column: 7)
!9058 = !DILocation(line: 2269, column: 7, scope: !9057)
!9059 = !DILocation(line: 2269, column: 26, scope: !9057)
!9060 = !DILocation(line: 2269, column: 7, scope: !9053)
!9061 = !DILocation(line: 2270, column: 5, scope: !9057)
!9062 = !DILocation(line: 2272, column: 57, scope: !9053)
!9063 = !DILocation(line: 2272, column: 33, scope: !9053)
!9064 = !DILocation(line: 2272, column: 11, scope: !9053)
!9065 = !DILocation(line: 2272, column: 3, scope: !9053)
!9066 = !DILocation(line: 2275, column: 59, scope: !9067)
!9067 = distinct !DILexicalBlock(scope: !9053, file: !3, line: 2273, column: 5)
!9068 = !DILocation(line: 2275, column: 39, scope: !9067)
!9069 = !DILocation(line: 2275, column: 14, scope: !9067)
!9070 = !DILocation(line: 2275, column: 7, scope: !9067)
!9071 = !DILocation(line: 2278, column: 60, scope: !9067)
!9072 = !DILocation(line: 2278, column: 40, scope: !9067)
!9073 = !DILocation(line: 2278, column: 15, scope: !9067)
!9074 = !DILocation(line: 2279, column: 8, scope: !9067)
!9075 = !DILocation(line: 2279, column: 56, scope: !9067)
!9076 = !DILocation(line: 2279, column: 36, scope: !9067)
!9077 = !DILocation(line: 2279, column: 11, scope: !9067)
!9078 = !DILocation(line: 2278, column: 14, scope: !9067)
!9079 = !DILocation(line: 2278, column: 7, scope: !9067)
!9080 = !DILocation(line: 2283, column: 59, scope: !9067)
!9081 = !DILocation(line: 2283, column: 39, scope: !9067)
!9082 = !DILocation(line: 2283, column: 14, scope: !9067)
!9083 = !DILocation(line: 2283, column: 7, scope: !9067)
!9084 = !DILocation(line: 2285, column: 7, scope: !9067)
!9085 = !DILocation(line: 2286, column: 5, scope: !9067)
!9086 = !DILocation(line: 2287, column: 3, scope: !9053)
!9087 = !DILocation(line: 2288, column: 1, scope: !9053)
!9088 = distinct !DISubprogram(name: "visit_reference_op_store", scope: !3, file: !3, line: 2079, type: !9089, scopeLine: 2080, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!9089 = !DISubroutineType(types: !9090)
!9090 = !{!1603, !1483, !1483, !1814}
!9091 = !DILocalVariable(name: "lhs", arg: 1, scope: !9088, file: !3, line: 2079, type: !1483)
!9092 = !DILocation(line: 2079, column: 32, scope: !9088)
!9093 = !DILocalVariable(name: "op", arg: 2, scope: !9088, file: !3, line: 2079, type: !1483)
!9094 = !DILocation(line: 2079, column: 42, scope: !9088)
!9095 = !DILocalVariable(name: "stmt", arg: 3, scope: !9088, file: !3, line: 2079, type: !1814)
!9096 = !DILocation(line: 2079, column: 53, scope: !9088)
!9097 = !DILocalVariable(name: "changed", scope: !9088, file: !3, line: 2081, type: !1603)
!9098 = !DILocation(line: 2081, column: 8, scope: !9088)
!9099 = !DILocalVariable(name: "result", scope: !9088, file: !3, line: 2082, type: !1483)
!9100 = !DILocation(line: 2082, column: 8, scope: !9088)
!9101 = !DILocalVariable(name: "resultsame", scope: !9088, file: !3, line: 2083, type: !1603)
!9102 = !DILocation(line: 2083, column: 8, scope: !9088)
!9103 = !DILocation(line: 2101, column: 33, scope: !9088)
!9104 = !DILocation(line: 2101, column: 51, scope: !9088)
!9105 = !DILocation(line: 2101, column: 38, scope: !9088)
!9106 = !DILocation(line: 2101, column: 12, scope: !9088)
!9107 = !DILocation(line: 2101, column: 10, scope: !9088)
!9108 = !DILocation(line: 2103, column: 7, scope: !9109)
!9109 = distinct !DILexicalBlock(scope: !9088, file: !3, line: 2103, column: 7)
!9110 = !DILocation(line: 2103, column: 7, scope: !9088)
!9111 = !DILocation(line: 2105, column: 11, scope: !9112)
!9112 = distinct !DILexicalBlock(scope: !9113, file: !3, line: 2105, column: 11)
!9113 = distinct !DILexicalBlock(scope: !9109, file: !3, line: 2104, column: 5)
!9114 = !DILocation(line: 2105, column: 30, scope: !9112)
!9115 = !DILocation(line: 2105, column: 11, scope: !9113)
!9116 = !DILocation(line: 2106, column: 11, scope: !9112)
!9117 = !DILocation(line: 2106, column: 9, scope: !9112)
!9118 = !DILocation(line: 2106, column: 2, scope: !9112)
!9119 = !DILocation(line: 2107, column: 11, scope: !9120)
!9120 = distinct !DILexicalBlock(scope: !9113, file: !3, line: 2107, column: 11)
!9121 = !DILocation(line: 2107, column: 26, scope: !9120)
!9122 = !DILocation(line: 2107, column: 11, scope: !9113)
!9123 = !DILocation(line: 2108, column: 7, scope: !9120)
!9124 = !DILocation(line: 2108, column: 5, scope: !9120)
!9125 = !DILocation(line: 2108, column: 2, scope: !9120)
!9126 = !DILocation(line: 2109, column: 41, scope: !9113)
!9127 = !DILocation(line: 2109, column: 49, scope: !9113)
!9128 = !DILocation(line: 2109, column: 20, scope: !9113)
!9129 = !DILocation(line: 2109, column: 18, scope: !9113)
!9130 = !DILocation(line: 2110, column: 5, scope: !9113)
!9131 = !DILocation(line: 2112, column: 8, scope: !9132)
!9132 = distinct !DILexicalBlock(scope: !9088, file: !3, line: 2112, column: 7)
!9133 = !DILocation(line: 2112, column: 15, scope: !9132)
!9134 = !DILocation(line: 2112, column: 19, scope: !9132)
!9135 = !DILocation(line: 2112, column: 7, scope: !9088)
!9136 = !DILocalVariable(name: "vdef", scope: !9137, file: !3, line: 2114, type: !1483)
!9137 = distinct !DILexicalBlock(scope: !9132, file: !3, line: 2113, column: 5)
!9138 = !DILocation(line: 2114, column: 12, scope: !9137)
!9139 = !DILocation(line: 2116, column: 11, scope: !9140)
!9140 = distinct !DILexicalBlock(scope: !9137, file: !3, line: 2116, column: 11)
!9141 = !DILocation(line: 2116, column: 21, scope: !9140)
!9142 = !DILocation(line: 2116, column: 25, scope: !9140)
!9143 = !DILocation(line: 2116, column: 36, scope: !9140)
!9144 = !DILocation(line: 2116, column: 11, scope: !9137)
!9145 = !DILocation(line: 2118, column: 13, scope: !9146)
!9146 = distinct !DILexicalBlock(scope: !9140, file: !3, line: 2117, column: 2)
!9147 = !DILocation(line: 2118, column: 4, scope: !9146)
!9148 = !DILocation(line: 2119, column: 13, scope: !9146)
!9149 = !DILocation(line: 2119, column: 4, scope: !9146)
!9150 = !DILocation(line: 2120, column: 24, scope: !9146)
!9151 = !DILocation(line: 2120, column: 35, scope: !9146)
!9152 = !DILocation(line: 2120, column: 4, scope: !9146)
!9153 = !DILocation(line: 2121, column: 13, scope: !9146)
!9154 = !DILocation(line: 2121, column: 4, scope: !9146)
!9155 = !DILocation(line: 2122, column: 24, scope: !9146)
!9156 = !DILocation(line: 2122, column: 35, scope: !9146)
!9157 = !DILocation(line: 2122, column: 4, scope: !9146)
!9158 = !DILocation(line: 2123, column: 13, scope: !9146)
!9159 = !DILocation(line: 2123, column: 4, scope: !9146)
!9160 = !DILocation(line: 2124, column: 2, scope: !9146)
!9161 = !DILocation(line: 2127, column: 32, scope: !9162)
!9162 = distinct !DILexicalBlock(scope: !9137, file: !3, line: 2127, column: 11)
!9163 = !DILocation(line: 2127, column: 19, scope: !9162)
!9164 = !DILocation(line: 2127, column: 17, scope: !9162)
!9165 = !DILocation(line: 2127, column: 11, scope: !9137)
!9166 = !DILocation(line: 2129, column: 13, scope: !9167)
!9167 = distinct !DILexicalBlock(scope: !9162, file: !3, line: 2128, column: 2)
!9168 = !DILocation(line: 2129, column: 4, scope: !9167)
!9169 = !DILocation(line: 2129, column: 20, scope: !9167)
!9170 = !DILocation(line: 2129, column: 34, scope: !9167)
!9171 = !DILocation(line: 2130, column: 31, scope: !9167)
!9172 = !DILocation(line: 2130, column: 37, scope: !9167)
!9173 = !DILocation(line: 2130, column: 15, scope: !9167)
!9174 = !DILocation(line: 2130, column: 12, scope: !9167)
!9175 = !DILocation(line: 2131, column: 2, scope: !9167)
!9176 = !DILocation(line: 2134, column: 36, scope: !9177)
!9177 = distinct !DILexicalBlock(scope: !9137, file: !3, line: 2134, column: 11)
!9178 = !DILocation(line: 2134, column: 11, scope: !9177)
!9179 = !DILocation(line: 2135, column: 4, scope: !9177)
!9180 = !DILocation(line: 2135, column: 22, scope: !9177)
!9181 = !DILocation(line: 2135, column: 7, scope: !9177)
!9182 = !DILocation(line: 2134, column: 11, scope: !9137)
!9183 = !DILocation(line: 2136, column: 30, scope: !9177)
!9184 = !DILocation(line: 2136, column: 35, scope: !9177)
!9185 = !DILocation(line: 2136, column: 39, scope: !9177)
!9186 = !DILocation(line: 2136, column: 9, scope: !9177)
!9187 = !DILocation(line: 2137, column: 5, scope: !9137)
!9188 = !DILocalVariable(name: "def", scope: !9189, file: !3, line: 2142, type: !1483)
!9189 = distinct !DILexicalBlock(scope: !9132, file: !3, line: 2139, column: 5)
!9190 = !DILocation(line: 2142, column: 12, scope: !9189)
!9191 = !DILocalVariable(name: "use", scope: !9189, file: !3, line: 2142, type: !1483)
!9192 = !DILocation(line: 2142, column: 17, scope: !9189)
!9193 = !DILocation(line: 2144, column: 11, scope: !9194)
!9194 = distinct !DILexicalBlock(scope: !9189, file: !3, line: 2144, column: 11)
!9195 = !DILocation(line: 2144, column: 21, scope: !9194)
!9196 = !DILocation(line: 2144, column: 25, scope: !9194)
!9197 = !DILocation(line: 2144, column: 36, scope: !9194)
!9198 = !DILocation(line: 2144, column: 11, scope: !9189)
!9199 = !DILocation(line: 2145, column: 11, scope: !9194)
!9200 = !DILocation(line: 2145, column: 2, scope: !9194)
!9201 = !DILocation(line: 2148, column: 26, scope: !9189)
!9202 = !DILocation(line: 2148, column: 13, scope: !9189)
!9203 = !DILocation(line: 2148, column: 11, scope: !9189)
!9204 = !DILocation(line: 2149, column: 26, scope: !9189)
!9205 = !DILocation(line: 2149, column: 13, scope: !9189)
!9206 = !DILocation(line: 2149, column: 11, scope: !9189)
!9207 = !DILocation(line: 2151, column: 16, scope: !9189)
!9208 = !DILocation(line: 2151, column: 7, scope: !9189)
!9209 = !DILocation(line: 2151, column: 22, scope: !9189)
!9210 = !DILocation(line: 2151, column: 36, scope: !9189)
!9211 = !DILocation(line: 2152, column: 34, scope: !9189)
!9212 = !DILocation(line: 2152, column: 39, scope: !9189)
!9213 = !DILocation(line: 2152, column: 18, scope: !9189)
!9214 = !DILocation(line: 2152, column: 15, scope: !9189)
!9215 = !DILocation(line: 2155, column: 10, scope: !9088)
!9216 = !DILocation(line: 2155, column: 3, scope: !9088)
!9217 = distinct !DISubprogram(name: "visit_unary_op", scope: !3, file: !3, line: 1885, type: !9218, scopeLine: 1886, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!9218 = !DISubroutineType(types: !9219)
!9219 = !{!1603, !1483, !1814}
!9220 = !DILocalVariable(name: "lhs", arg: 1, scope: !9217, file: !3, line: 1885, type: !1483)
!9221 = !DILocation(line: 1885, column: 22, scope: !9217)
!9222 = !DILocalVariable(name: "stmt", arg: 2, scope: !9217, file: !3, line: 1885, type: !1814)
!9223 = !DILocation(line: 1885, column: 34, scope: !9217)
!9224 = !DILocalVariable(name: "changed", scope: !9217, file: !3, line: 1887, type: !1603)
!9225 = !DILocation(line: 1887, column: 8, scope: !9217)
!9226 = !DILocalVariable(name: "result", scope: !9217, file: !3, line: 1888, type: !1483)
!9227 = !DILocation(line: 1888, column: 8, scope: !9217)
!9228 = !DILocation(line: 1888, column: 41, scope: !9217)
!9229 = !DILocation(line: 1888, column: 17, scope: !9217)
!9230 = !DILocation(line: 1890, column: 7, scope: !9231)
!9231 = distinct !DILexicalBlock(scope: !9217, file: !3, line: 1890, column: 7)
!9232 = !DILocation(line: 1890, column: 7, scope: !9217)
!9233 = !DILocation(line: 1892, column: 33, scope: !9234)
!9234 = distinct !DILexicalBlock(scope: !9231, file: !3, line: 1891, column: 5)
!9235 = !DILocation(line: 1892, column: 38, scope: !9234)
!9236 = !DILocation(line: 1892, column: 17, scope: !9234)
!9237 = !DILocation(line: 1892, column: 15, scope: !9234)
!9238 = !DILocation(line: 1893, column: 5, scope: !9234)
!9239 = !DILocation(line: 1896, column: 33, scope: !9240)
!9240 = distinct !DILexicalBlock(scope: !9231, file: !3, line: 1895, column: 5)
!9241 = !DILocation(line: 1896, column: 38, scope: !9240)
!9242 = !DILocation(line: 1896, column: 17, scope: !9240)
!9243 = !DILocation(line: 1896, column: 15, scope: !9240)
!9244 = !DILocation(line: 1897, column: 31, scope: !9240)
!9245 = !DILocation(line: 1897, column: 37, scope: !9240)
!9246 = !DILocation(line: 1897, column: 7, scope: !9240)
!9247 = !DILocation(line: 1900, column: 10, scope: !9217)
!9248 = !DILocation(line: 1900, column: 3, scope: !9217)
!9249 = distinct !DISubprogram(name: "visit_binary_op", scope: !3, file: !3, line: 1907, type: !9218, scopeLine: 1908, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!9250 = !DILocalVariable(name: "lhs", arg: 1, scope: !9249, file: !3, line: 1907, type: !1483)
!9251 = !DILocation(line: 1907, column: 23, scope: !9249)
!9252 = !DILocalVariable(name: "stmt", arg: 2, scope: !9249, file: !3, line: 1907, type: !1814)
!9253 = !DILocation(line: 1907, column: 35, scope: !9249)
!9254 = !DILocalVariable(name: "changed", scope: !9249, file: !3, line: 1909, type: !1603)
!9255 = !DILocation(line: 1909, column: 8, scope: !9249)
!9256 = !DILocalVariable(name: "result", scope: !9249, file: !3, line: 1910, type: !1483)
!9257 = !DILocation(line: 1910, column: 8, scope: !9249)
!9258 = !DILocation(line: 1910, column: 41, scope: !9249)
!9259 = !DILocation(line: 1910, column: 17, scope: !9249)
!9260 = !DILocation(line: 1912, column: 7, scope: !9261)
!9261 = distinct !DILexicalBlock(scope: !9249, file: !3, line: 1912, column: 7)
!9262 = !DILocation(line: 1912, column: 7, scope: !9249)
!9263 = !DILocation(line: 1914, column: 33, scope: !9264)
!9264 = distinct !DILexicalBlock(scope: !9261, file: !3, line: 1913, column: 5)
!9265 = !DILocation(line: 1914, column: 38, scope: !9264)
!9266 = !DILocation(line: 1914, column: 17, scope: !9264)
!9267 = !DILocation(line: 1914, column: 15, scope: !9264)
!9268 = !DILocation(line: 1915, column: 5, scope: !9264)
!9269 = !DILocation(line: 1918, column: 33, scope: !9270)
!9270 = distinct !DILexicalBlock(scope: !9261, file: !3, line: 1917, column: 5)
!9271 = !DILocation(line: 1918, column: 38, scope: !9270)
!9272 = !DILocation(line: 1918, column: 17, scope: !9270)
!9273 = !DILocation(line: 1918, column: 15, scope: !9270)
!9274 = !DILocation(line: 1919, column: 31, scope: !9270)
!9275 = !DILocation(line: 1919, column: 37, scope: !9270)
!9276 = !DILocation(line: 1919, column: 7, scope: !9270)
!9277 = !DILocation(line: 1922, column: 10, scope: !9249)
!9278 = !DILocation(line: 1922, column: 3, scope: !9249)
!9279 = distinct !DISubprogram(name: "visit_reference_op_load", scope: !3, file: !3, line: 1975, type: !9089, scopeLine: 1976, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!9280 = !DILocalVariable(name: "lhs", arg: 1, scope: !9279, file: !3, line: 1975, type: !1483)
!9281 = !DILocation(line: 1975, column: 31, scope: !9279)
!9282 = !DILocalVariable(name: "op", arg: 2, scope: !9279, file: !3, line: 1975, type: !1483)
!9283 = !DILocation(line: 1975, column: 41, scope: !9279)
!9284 = !DILocalVariable(name: "stmt", arg: 3, scope: !9279, file: !3, line: 1975, type: !1814)
!9285 = !DILocation(line: 1975, column: 52, scope: !9279)
!9286 = !DILocalVariable(name: "changed", scope: !9279, file: !3, line: 1977, type: !1603)
!9287 = !DILocation(line: 1977, column: 8, scope: !9279)
!9288 = !DILocalVariable(name: "last_vuse", scope: !9279, file: !3, line: 1978, type: !1483)
!9289 = !DILocation(line: 1978, column: 8, scope: !9279)
!9290 = !DILocalVariable(name: "result", scope: !9279, file: !3, line: 1979, type: !1483)
!9291 = !DILocation(line: 1979, column: 8, scope: !9279)
!9292 = !DILocation(line: 1981, column: 28, scope: !9279)
!9293 = !DILocation(line: 1981, column: 15, scope: !9279)
!9294 = !DILocation(line: 1981, column: 13, scope: !9279)
!9295 = !DILocation(line: 1982, column: 17, scope: !9279)
!9296 = !DILocation(line: 1983, column: 33, scope: !9279)
!9297 = !DILocation(line: 1983, column: 50, scope: !9279)
!9298 = !DILocation(line: 1983, column: 37, scope: !9279)
!9299 = !DILocation(line: 1983, column: 12, scope: !9279)
!9300 = !DILocation(line: 1983, column: 10, scope: !9279)
!9301 = !DILocation(line: 1984, column: 17, scope: !9279)
!9302 = !DILocation(line: 1988, column: 8, scope: !9303)
!9303 = distinct !DILexicalBlock(scope: !9279, file: !3, line: 1988, column: 7)
!9304 = !DILocation(line: 1988, column: 15, scope: !9303)
!9305 = !DILocation(line: 1988, column: 18, scope: !9303)
!9306 = !DILocation(line: 1988, column: 33, scope: !9303)
!9307 = !DILocation(line: 1988, column: 7, scope: !9279)
!9308 = !DILocation(line: 1989, column: 35, scope: !9303)
!9309 = !DILocation(line: 1989, column: 70, scope: !9303)
!9310 = !DILocation(line: 1989, column: 57, scope: !9303)
!9311 = !DILocation(line: 1989, column: 14, scope: !9303)
!9312 = !DILocation(line: 1989, column: 12, scope: !9303)
!9313 = !DILocation(line: 1989, column: 5, scope: !9303)
!9314 = !DILocation(line: 1995, column: 7, scope: !9315)
!9315 = distinct !DILexicalBlock(scope: !9279, file: !3, line: 1995, column: 7)
!9316 = !DILocation(line: 1996, column: 7, scope: !9315)
!9317 = !DILocation(line: 1996, column: 38, scope: !9315)
!9318 = !DILocation(line: 1996, column: 58, scope: !9315)
!9319 = !DILocation(line: 1996, column: 11, scope: !9315)
!9320 = !DILocation(line: 1995, column: 7, scope: !9279)
!9321 = !DILocalVariable(name: "val", scope: !9322, file: !3, line: 2002, type: !1483)
!9322 = distinct !DILexicalBlock(scope: !9315, file: !3, line: 1997, column: 5)
!9323 = !DILocation(line: 2002, column: 12, scope: !9322)
!9324 = !DILocation(line: 2002, column: 18, scope: !9322)
!9325 = !DILocation(line: 2003, column: 12, scope: !9326)
!9326 = distinct !DILexicalBlock(scope: !9322, file: !3, line: 2003, column: 11)
!9327 = !DILocation(line: 2004, column: 5, scope: !9326)
!9328 = !DILocation(line: 2004, column: 8, scope: !9326)
!9329 = !DILocation(line: 2004, column: 24, scope: !9326)
!9330 = !DILocation(line: 2005, column: 4, scope: !9326)
!9331 = !DILocation(line: 2005, column: 7, scope: !9326)
!9332 = !DILocation(line: 2005, column: 41, scope: !9326)
!9333 = !DILocation(line: 2003, column: 11, scope: !9322)
!9334 = !DILocalVariable(name: "tem", scope: !9335, file: !3, line: 2007, type: !1483)
!9335 = distinct !DILexicalBlock(scope: !9326, file: !3, line: 2006, column: 9)
!9336 = !DILocation(line: 2007, column: 9, scope: !9335)
!9337 = !DILocation(line: 2007, column: 47, scope: !9335)
!9338 = !DILocation(line: 2007, column: 30, scope: !9335)
!9339 = !DILocation(line: 2007, column: 15, scope: !9335)
!9340 = !DILocation(line: 2008, column: 9, scope: !9341)
!9341 = distinct !DILexicalBlock(scope: !9335, file: !3, line: 2008, column: 8)
!9342 = !DILocation(line: 2009, column: 9, scope: !9341)
!9343 = !DILocation(line: 2009, column: 12, scope: !9341)
!9344 = !DILocation(line: 2009, column: 28, scope: !9341)
!9345 = !DILocation(line: 2010, column: 8, scope: !9341)
!9346 = !DILocation(line: 2010, column: 18, scope: !9341)
!9347 = !DILocation(line: 2010, column: 16, scope: !9341)
!9348 = !DILocation(line: 2008, column: 8, scope: !9335)
!9349 = !DILocation(line: 2012, column: 12, scope: !9341)
!9350 = !DILocation(line: 2012, column: 10, scope: !9341)
!9351 = !DILocation(line: 2012, column: 6, scope: !9341)
!9352 = !DILocation(line: 2013, column: 2, scope: !9335)
!9353 = !DILocation(line: 2014, column: 16, scope: !9322)
!9354 = !DILocation(line: 2014, column: 14, scope: !9322)
!9355 = !DILocation(line: 2015, column: 37, scope: !9356)
!9356 = distinct !DILexicalBlock(scope: !9322, file: !3, line: 2015, column: 11)
!9357 = !DILocation(line: 2015, column: 12, scope: !9356)
!9358 = !DILocation(line: 2016, column: 4, scope: !9356)
!9359 = !DILocation(line: 2016, column: 7, scope: !9356)
!9360 = !DILocation(line: 2016, column: 23, scope: !9356)
!9361 = !DILocation(line: 2015, column: 11, scope: !9322)
!9362 = !DILocation(line: 2017, column: 30, scope: !9356)
!9363 = !DILocation(line: 2017, column: 11, scope: !9356)
!9364 = !DILocation(line: 2017, column: 9, scope: !9356)
!9365 = !DILocation(line: 2017, column: 2, scope: !9356)
!9366 = !DILocation(line: 2020, column: 12, scope: !9367)
!9367 = distinct !DILexicalBlock(scope: !9322, file: !3, line: 2020, column: 11)
!9368 = !DILocation(line: 2020, column: 19, scope: !9367)
!9369 = !DILocation(line: 2020, column: 22, scope: !9367)
!9370 = !DILocation(line: 2020, column: 11, scope: !9322)
!9371 = !DILocation(line: 2022, column: 28, scope: !9372)
!9372 = distinct !DILexicalBlock(scope: !9367, file: !3, line: 2021, column: 9)
!9373 = !DILocation(line: 2022, column: 13, scope: !9372)
!9374 = !DILocation(line: 2022, column: 11, scope: !9372)
!9375 = !DILocation(line: 2024, column: 35, scope: !9372)
!9376 = !DILocation(line: 2024, column: 17, scope: !9372)
!9377 = !DILocation(line: 2024, column: 4, scope: !9372)
!9378 = !DILocation(line: 2024, column: 26, scope: !9372)
!9379 = !DILocation(line: 2024, column: 33, scope: !9372)
!9380 = !DILocation(line: 2025, column: 33, scope: !9372)
!9381 = !DILocation(line: 2025, column: 13, scope: !9372)
!9382 = !DILocation(line: 2025, column: 4, scope: !9372)
!9383 = !DILocation(line: 2025, column: 22, scope: !9372)
!9384 = !DILocation(line: 2025, column: 31, scope: !9372)
!9385 = !DILocation(line: 2026, column: 29, scope: !9372)
!9386 = !DILocation(line: 2026, column: 13, scope: !9372)
!9387 = !DILocation(line: 2026, column: 4, scope: !9372)
!9388 = !DILocation(line: 2026, column: 22, scope: !9372)
!9389 = !DILocation(line: 2026, column: 27, scope: !9372)
!9390 = !DILocation(line: 2027, column: 58, scope: !9372)
!9391 = !DILocation(line: 2027, column: 38, scope: !9372)
!9392 = !DILocation(line: 2027, column: 13, scope: !9372)
!9393 = !DILocation(line: 2027, column: 4, scope: !9372)
!9394 = !DILocation(line: 2027, column: 22, scope: !9372)
!9395 = !DILocation(line: 2027, column: 36, scope: !9372)
!9396 = !DILocation(line: 2028, column: 13, scope: !9372)
!9397 = !DILocation(line: 2028, column: 4, scope: !9372)
!9398 = !DILocation(line: 2028, column: 22, scope: !9372)
!9399 = !DILocation(line: 2028, column: 38, scope: !9372)
!9400 = !DILocation(line: 2036, column: 8, scope: !9401)
!9401 = distinct !DILexicalBlock(scope: !9372, file: !3, line: 2036, column: 8)
!9402 = !DILocation(line: 2036, column: 24, scope: !9401)
!9403 = !DILocation(line: 2036, column: 21, scope: !9401)
!9404 = !DILocation(line: 2036, column: 8, scope: !9372)
!9405 = !DILocation(line: 2038, column: 23, scope: !9406)
!9406 = distinct !DILexicalBlock(scope: !9401, file: !3, line: 2037, column: 6)
!9407 = !DILocation(line: 2038, column: 21, scope: !9406)
!9408 = !DILocation(line: 2039, column: 27, scope: !9406)
!9409 = !DILocation(line: 2039, column: 32, scope: !9406)
!9410 = !DILocation(line: 2039, column: 8, scope: !9406)
!9411 = !DILocation(line: 2040, column: 23, scope: !9406)
!9412 = !DILocation(line: 2040, column: 21, scope: !9406)
!9413 = !DILocation(line: 2041, column: 6, scope: !9406)
!9414 = !DILocation(line: 2043, column: 25, scope: !9401)
!9415 = !DILocation(line: 2043, column: 30, scope: !9401)
!9416 = !DILocation(line: 2043, column: 6, scope: !9401)
!9417 = !DILocation(line: 2044, column: 8, scope: !9418)
!9418 = distinct !DILexicalBlock(scope: !9372, file: !3, line: 2044, column: 8)
!9419 = !DILocation(line: 2044, column: 18, scope: !9418)
!9420 = !DILocation(line: 2044, column: 22, scope: !9418)
!9421 = !DILocation(line: 2044, column: 33, scope: !9418)
!9422 = !DILocation(line: 2044, column: 8, scope: !9372)
!9423 = !DILocation(line: 2046, column: 17, scope: !9424)
!9424 = distinct !DILexicalBlock(scope: !9418, file: !3, line: 2045, column: 6)
!9425 = !DILocation(line: 2046, column: 8, scope: !9424)
!9426 = !DILocation(line: 2047, column: 28, scope: !9424)
!9427 = !DILocation(line: 2047, column: 39, scope: !9424)
!9428 = !DILocation(line: 2047, column: 8, scope: !9424)
!9429 = !DILocation(line: 2048, column: 17, scope: !9424)
!9430 = !DILocation(line: 2048, column: 8, scope: !9424)
!9431 = !DILocation(line: 2049, column: 28, scope: !9424)
!9432 = !DILocation(line: 2049, column: 39, scope: !9424)
!9433 = !DILocation(line: 2049, column: 8, scope: !9424)
!9434 = !DILocation(line: 2050, column: 17, scope: !9424)
!9435 = !DILocation(line: 2050, column: 8, scope: !9424)
!9436 = !DILocation(line: 2051, column: 6, scope: !9424)
!9437 = !DILocation(line: 2052, column: 2, scope: !9372)
!9438 = !DILocation(line: 2053, column: 5, scope: !9322)
!9439 = !DILocation(line: 2055, column: 7, scope: !9440)
!9440 = distinct !DILexicalBlock(scope: !9279, file: !3, line: 2055, column: 7)
!9441 = !DILocation(line: 2055, column: 7, scope: !9279)
!9442 = !DILocation(line: 2057, column: 33, scope: !9443)
!9443 = distinct !DILexicalBlock(scope: !9440, file: !3, line: 2056, column: 5)
!9444 = !DILocation(line: 2057, column: 38, scope: !9443)
!9445 = !DILocation(line: 2057, column: 17, scope: !9443)
!9446 = !DILocation(line: 2057, column: 15, scope: !9443)
!9447 = !DILocation(line: 2058, column: 11, scope: !9448)
!9448 = distinct !DILexicalBlock(scope: !9443, file: !3, line: 2058, column: 11)
!9449 = !DILocation(line: 2058, column: 30, scope: !9448)
!9450 = !DILocation(line: 2059, column: 4, scope: !9448)
!9451 = !DILocation(line: 2059, column: 16, scope: !9448)
!9452 = !DILocation(line: 2059, column: 7, scope: !9448)
!9453 = !DILocation(line: 2059, column: 25, scope: !9448)
!9454 = !DILocation(line: 2058, column: 11, scope: !9443)
!9455 = !DILocation(line: 2061, column: 35, scope: !9456)
!9456 = distinct !DILexicalBlock(scope: !9448, file: !3, line: 2060, column: 2)
!9457 = !DILocation(line: 2061, column: 26, scope: !9456)
!9458 = !DILocation(line: 2061, column: 44, scope: !9456)
!9459 = !DILocation(line: 2061, column: 13, scope: !9456)
!9460 = !DILocation(line: 2061, column: 4, scope: !9456)
!9461 = !DILocation(line: 2061, column: 19, scope: !9456)
!9462 = !DILocation(line: 2061, column: 24, scope: !9456)
!9463 = !DILocation(line: 2062, column: 13, scope: !9456)
!9464 = !DILocation(line: 2062, column: 4, scope: !9456)
!9465 = !DILocation(line: 2062, column: 19, scope: !9456)
!9466 = !DILocation(line: 2062, column: 33, scope: !9456)
!9467 = !DILocation(line: 2063, column: 2, scope: !9456)
!9468 = !DILocation(line: 2064, column: 5, scope: !9443)
!9469 = !DILocation(line: 2067, column: 33, scope: !9470)
!9470 = distinct !DILexicalBlock(scope: !9440, file: !3, line: 2066, column: 5)
!9471 = !DILocation(line: 2067, column: 38, scope: !9470)
!9472 = !DILocation(line: 2067, column: 17, scope: !9470)
!9473 = !DILocation(line: 2067, column: 15, scope: !9470)
!9474 = !DILocation(line: 2068, column: 28, scope: !9470)
!9475 = !DILocation(line: 2068, column: 32, scope: !9470)
!9476 = !DILocation(line: 2068, column: 37, scope: !9470)
!9477 = !DILocation(line: 2068, column: 7, scope: !9470)
!9478 = !DILocation(line: 2071, column: 10, scope: !9279)
!9479 = !DILocation(line: 2071, column: 3, scope: !9279)
!9480 = distinct !DISubprogram(name: "gimple_call_lhs", scope: !391, file: !391, line: 1878, type: !3264, scopeLine: 1879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!9481 = !DILocalVariable(name: "gs", arg: 1, scope: !9480, file: !391, line: 1878, type: !3220)
!9482 = !DILocation(line: 1878, column: 31, scope: !9480)
!9483 = !DILocation(line: 1881, column: 21, scope: !9480)
!9484 = !DILocation(line: 1881, column: 10, scope: !9480)
!9485 = !DILocation(line: 1881, column: 3, scope: !9480)
!9486 = distinct !DISubprogram(name: "visit_reference_op_call", scope: !3, file: !3, line: 1929, type: !9218, scopeLine: 1930, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!9487 = !DILocalVariable(name: "lhs", arg: 1, scope: !9486, file: !3, line: 1929, type: !1483)
!9488 = !DILocation(line: 1929, column: 31, scope: !9486)
!9489 = !DILocalVariable(name: "stmt", arg: 2, scope: !9486, file: !3, line: 1929, type: !1814)
!9490 = !DILocation(line: 1929, column: 43, scope: !9486)
!9491 = !DILocalVariable(name: "changed", scope: !9486, file: !3, line: 1931, type: !1603)
!9492 = !DILocation(line: 1931, column: 8, scope: !9486)
!9493 = !DILocalVariable(name: "vr1", scope: !9486, file: !3, line: 1932, type: !2860)
!9494 = !DILocation(line: 1932, column: 25, scope: !9486)
!9495 = !DILocalVariable(name: "result", scope: !9486, file: !3, line: 1933, type: !1483)
!9496 = !DILocation(line: 1933, column: 8, scope: !9486)
!9497 = !DILocalVariable(name: "vuse", scope: !9486, file: !3, line: 1934, type: !1483)
!9498 = !DILocation(line: 1934, column: 8, scope: !9486)
!9499 = !DILocation(line: 1934, column: 28, scope: !9486)
!9500 = !DILocation(line: 1934, column: 15, scope: !9486)
!9501 = !DILocation(line: 1936, column: 14, scope: !9486)
!9502 = !DILocation(line: 1936, column: 21, scope: !9486)
!9503 = !DILocation(line: 1936, column: 7, scope: !9486)
!9504 = !DILocation(line: 1936, column: 12, scope: !9486)
!9505 = !DILocation(line: 1937, column: 59, scope: !9486)
!9506 = !DILocation(line: 1937, column: 18, scope: !9486)
!9507 = !DILocation(line: 1937, column: 7, scope: !9486)
!9508 = !DILocation(line: 1937, column: 16, scope: !9486)
!9509 = !DILocation(line: 1938, column: 32, scope: !9486)
!9510 = !DILocation(line: 1938, column: 14, scope: !9486)
!9511 = !DILocation(line: 1938, column: 7, scope: !9486)
!9512 = !DILocation(line: 1938, column: 12, scope: !9486)
!9513 = !DILocation(line: 1939, column: 7, scope: !9486)
!9514 = !DILocation(line: 1939, column: 11, scope: !9486)
!9515 = !DILocation(line: 1940, column: 18, scope: !9486)
!9516 = !DILocation(line: 1940, column: 7, scope: !9486)
!9517 = !DILocation(line: 1940, column: 16, scope: !9486)
!9518 = !DILocation(line: 1941, column: 12, scope: !9486)
!9519 = !DILocation(line: 1941, column: 10, scope: !9486)
!9520 = !DILocation(line: 1942, column: 7, scope: !9521)
!9521 = distinct !DILexicalBlock(scope: !9486, file: !3, line: 1942, column: 7)
!9522 = !DILocation(line: 1942, column: 7, scope: !9486)
!9523 = !DILocation(line: 1944, column: 33, scope: !9524)
!9524 = distinct !DILexicalBlock(scope: !9521, file: !3, line: 1943, column: 5)
!9525 = !DILocation(line: 1944, column: 38, scope: !9524)
!9526 = !DILocation(line: 1944, column: 17, scope: !9524)
!9527 = !DILocation(line: 1944, column: 15, scope: !9524)
!9528 = !DILocation(line: 1945, column: 11, scope: !9529)
!9529 = distinct !DILexicalBlock(scope: !9524, file: !3, line: 1945, column: 11)
!9530 = !DILocation(line: 1945, column: 30, scope: !9529)
!9531 = !DILocation(line: 1946, column: 4, scope: !9529)
!9532 = !DILocation(line: 1946, column: 16, scope: !9529)
!9533 = !DILocation(line: 1946, column: 7, scope: !9529)
!9534 = !DILocation(line: 1946, column: 25, scope: !9529)
!9535 = !DILocation(line: 1945, column: 11, scope: !9524)
!9536 = !DILocation(line: 1947, column: 11, scope: !9529)
!9537 = !DILocation(line: 1947, column: 2, scope: !9529)
!9538 = !DILocation(line: 1947, column: 17, scope: !9529)
!9539 = !DILocation(line: 1947, column: 31, scope: !9529)
!9540 = !DILocation(line: 1948, column: 5, scope: !9524)
!9541 = !DILocalVariable(name: "slot", scope: !9542, file: !3, line: 1951, type: !2321)
!9542 = distinct !DILexicalBlock(scope: !9521, file: !3, line: 1950, column: 5)
!9543 = !DILocation(line: 1951, column: 14, scope: !9542)
!9544 = !DILocalVariable(name: "vr2", scope: !9542, file: !3, line: 1952, type: !2890)
!9545 = !DILocation(line: 1952, column: 22, scope: !9542)
!9546 = !DILocation(line: 1953, column: 33, scope: !9542)
!9547 = !DILocation(line: 1953, column: 38, scope: !9542)
!9548 = !DILocation(line: 1953, column: 17, scope: !9542)
!9549 = !DILocation(line: 1953, column: 15, scope: !9542)
!9550 = !DILocation(line: 1954, column: 42, scope: !9542)
!9551 = !DILocation(line: 1954, column: 56, scope: !9542)
!9552 = !DILocation(line: 1954, column: 30, scope: !9542)
!9553 = !DILocation(line: 1954, column: 13, scope: !9542)
!9554 = !DILocation(line: 1954, column: 11, scope: !9542)
!9555 = !DILocation(line: 1955, column: 23, scope: !9542)
!9556 = !DILocation(line: 1955, column: 7, scope: !9542)
!9557 = !DILocation(line: 1955, column: 12, scope: !9542)
!9558 = !DILocation(line: 1955, column: 17, scope: !9542)
!9559 = !DILocation(line: 1956, column: 70, scope: !9542)
!9560 = !DILocation(line: 1956, column: 38, scope: !9542)
!9561 = !DILocation(line: 1956, column: 23, scope: !9542)
!9562 = !DILocation(line: 1956, column: 7, scope: !9542)
!9563 = !DILocation(line: 1956, column: 12, scope: !9542)
!9564 = !DILocation(line: 1956, column: 21, scope: !9542)
!9565 = !DILocation(line: 1957, column: 23, scope: !9542)
!9566 = !DILocation(line: 1957, column: 7, scope: !9542)
!9567 = !DILocation(line: 1957, column: 12, scope: !9542)
!9568 = !DILocation(line: 1957, column: 17, scope: !9542)
!9569 = !DILocation(line: 1958, column: 22, scope: !9542)
!9570 = !DILocation(line: 1958, column: 7, scope: !9542)
!9571 = !DILocation(line: 1958, column: 12, scope: !9542)
!9572 = !DILocation(line: 1958, column: 16, scope: !9542)
!9573 = !DILocation(line: 1959, column: 27, scope: !9542)
!9574 = !DILocation(line: 1959, column: 7, scope: !9542)
!9575 = !DILocation(line: 1959, column: 12, scope: !9542)
!9576 = !DILocation(line: 1959, column: 21, scope: !9542)
!9577 = !DILocation(line: 1960, column: 21, scope: !9542)
!9578 = !DILocation(line: 1960, column: 7, scope: !9542)
!9579 = !DILocation(line: 1960, column: 12, scope: !9542)
!9580 = !DILocation(line: 1960, column: 19, scope: !9542)
!9581 = !DILocation(line: 1961, column: 40, scope: !9542)
!9582 = !DILocation(line: 1961, column: 54, scope: !9542)
!9583 = !DILocation(line: 1962, column: 12, scope: !9542)
!9584 = !DILocation(line: 1962, column: 17, scope: !9542)
!9585 = !DILocation(line: 1962, column: 22, scope: !9542)
!9586 = !DILocation(line: 1961, column: 14, scope: !9542)
!9587 = !DILocation(line: 1961, column: 12, scope: !9542)
!9588 = !DILocation(line: 1963, column: 12, scope: !9589)
!9589 = distinct !DILexicalBlock(scope: !9542, file: !3, line: 1963, column: 11)
!9590 = !DILocation(line: 1963, column: 11, scope: !9589)
!9591 = !DILocation(line: 1963, column: 11, scope: !9542)
!9592 = !DILocation(line: 1964, column: 19, scope: !9589)
!9593 = !DILocation(line: 1964, column: 18, scope: !9589)
!9594 = !DILocation(line: 1964, column: 2, scope: !9589)
!9595 = !DILocation(line: 1965, column: 15, scope: !9542)
!9596 = !DILocation(line: 1965, column: 8, scope: !9542)
!9597 = !DILocation(line: 1965, column: 13, scope: !9542)
!9598 = !DILocation(line: 1968, column: 10, scope: !9486)
!9599 = !DILocation(line: 1968, column: 3, scope: !9486)
!9600 = distinct !DISubprogram(name: "get_def_from_ptr", scope: !6499, file: !6499, line: 434, type: !9601, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!9601 = !DISubroutineType(types: !9602)
!9602 = !{!1483, !2984}
!9603 = !DILocalVariable(name: "def", arg: 1, scope: !9600, file: !6499, line: 434, type: !2984)
!9604 = !DILocation(line: 434, column: 33, scope: !9600)
!9605 = !DILocation(line: 436, column: 11, scope: !9600)
!9606 = !DILocation(line: 436, column: 10, scope: !9600)
!9607 = !DILocation(line: 436, column: 3, scope: !9600)
!9608 = distinct !DISubprogram(name: "gimple_phi_result_ptr", scope: !391, file: !391, line: 3080, type: !7069, scopeLine: 3081, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!9609 = !DILocalVariable(name: "gs", arg: 1, scope: !9608, file: !391, line: 3080, type: !1814)
!9610 = !DILocation(line: 3080, column: 31, scope: !9608)
!9611 = !DILocation(line: 3083, column: 11, scope: !9608)
!9612 = !DILocation(line: 3083, column: 15, scope: !9608)
!9613 = !DILocation(line: 3083, column: 26, scope: !9608)
!9614 = !DILocation(line: 3083, column: 3, scope: !9608)
!9615 = distinct !DISubprogram(name: "gimple_phi_arg_imm_use_ptr", scope: !6499, file: !6499, line: 442, type: !9616, scopeLine: 443, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!9616 = !DISubroutineType(types: !9617)
!9617 = !{!2979, !1814, !1580}
!9618 = !DILocalVariable(name: "gs", arg: 1, scope: !9615, file: !6499, line: 442, type: !1814)
!9619 = !DILocation(line: 442, column: 36, scope: !9615)
!9620 = !DILocalVariable(name: "i", arg: 2, scope: !9615, file: !6499, line: 442, type: !1580)
!9621 = !DILocation(line: 442, column: 44, scope: !9615)
!9622 = !DILocation(line: 444, column: 27, scope: !9615)
!9623 = !DILocation(line: 444, column: 31, scope: !9615)
!9624 = !DILocation(line: 444, column: 11, scope: !9615)
!9625 = !DILocation(line: 444, column: 35, scope: !9615)
!9626 = !DILocation(line: 444, column: 3, scope: !9615)
!9627 = distinct !DISubprogram(name: "vn_phi_lookup", scope: !3, file: !3, line: 1715, type: !8976, scopeLine: 1716, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!9628 = !DILocalVariable(name: "phi", arg: 1, scope: !9627, file: !3, line: 1715, type: !1814)
!9629 = !DILocation(line: 1715, column: 23, scope: !9627)
!9630 = !DILocalVariable(name: "slot", scope: !9627, file: !3, line: 1717, type: !2321)
!9631 = !DILocation(line: 1717, column: 10, scope: !9627)
!9632 = !DILocalVariable(name: "vp1", scope: !9627, file: !3, line: 1718, type: !2965)
!9633 = !DILocation(line: 1718, column: 19, scope: !9627)
!9634 = !DILocalVariable(name: "i", scope: !9627, file: !3, line: 1719, type: !7)
!9635 = !DILocation(line: 1719, column: 12, scope: !9627)
!9636 = !DILocation(line: 1721, column: 3, scope: !9627)
!9637 = !DILocation(line: 1724, column: 10, scope: !9638)
!9638 = distinct !DILexicalBlock(scope: !9627, file: !3, line: 1724, column: 3)
!9639 = !DILocation(line: 1724, column: 8, scope: !9638)
!9640 = !DILocation(line: 1724, column: 15, scope: !9641)
!9641 = distinct !DILexicalBlock(scope: !9638, file: !3, line: 1724, column: 3)
!9642 = !DILocation(line: 1724, column: 40, scope: !9641)
!9643 = !DILocation(line: 1724, column: 19, scope: !9641)
!9644 = !DILocation(line: 1724, column: 17, scope: !9641)
!9645 = !DILocation(line: 1724, column: 3, scope: !9638)
!9646 = !DILocalVariable(name: "def", scope: !9647, file: !3, line: 1726, type: !1483)
!9647 = distinct !DILexicalBlock(scope: !9641, file: !3, line: 1725, column: 5)
!9648 = !DILocation(line: 1726, column: 12, scope: !9647)
!9649 = !DILocation(line: 1726, column: 18, scope: !9647)
!9650 = !DILocation(line: 1727, column: 13, scope: !9647)
!9651 = !DILocation(line: 1727, column: 29, scope: !9647)
!9652 = !DILocation(line: 1727, column: 43, scope: !9647)
!9653 = !DILocation(line: 1727, column: 59, scope: !9647)
!9654 = !DILocation(line: 1727, column: 11, scope: !9647)
!9655 = !DILocation(line: 1728, column: 7, scope: !9647)
!9656 = !DILocation(line: 1729, column: 5, scope: !9647)
!9657 = !DILocation(line: 1724, column: 47, scope: !9641)
!9658 = !DILocation(line: 1724, column: 3, scope: !9641)
!9659 = distinct !{!9659, !9645, !9660}
!9660 = !DILocation(line: 1729, column: 5, scope: !9638)
!9661 = !DILocation(line: 1730, column: 17, scope: !9627)
!9662 = !DILocation(line: 1730, column: 7, scope: !9627)
!9663 = !DILocation(line: 1730, column: 15, scope: !9627)
!9664 = !DILocation(line: 1731, column: 26, scope: !9627)
!9665 = !DILocation(line: 1731, column: 15, scope: !9627)
!9666 = !DILocation(line: 1731, column: 7, scope: !9627)
!9667 = !DILocation(line: 1731, column: 13, scope: !9627)
!9668 = !DILocation(line: 1732, column: 18, scope: !9627)
!9669 = !DILocation(line: 1732, column: 7, scope: !9627)
!9670 = !DILocation(line: 1732, column: 16, scope: !9627)
!9671 = !DILocation(line: 1733, column: 36, scope: !9627)
!9672 = !DILocation(line: 1733, column: 50, scope: !9627)
!9673 = !DILocation(line: 1733, column: 56, scope: !9627)
!9674 = !DILocation(line: 1733, column: 66, scope: !9627)
!9675 = !DILocation(line: 1733, column: 10, scope: !9627)
!9676 = !DILocation(line: 1733, column: 8, scope: !9627)
!9677 = !DILocation(line: 1735, column: 8, scope: !9678)
!9678 = distinct !DILexicalBlock(scope: !9627, file: !3, line: 1735, column: 7)
!9679 = !DILocation(line: 1735, column: 13, scope: !9678)
!9680 = !DILocation(line: 1735, column: 16, scope: !9678)
!9681 = !DILocation(line: 1735, column: 32, scope: !9678)
!9682 = !DILocation(line: 1735, column: 29, scope: !9678)
!9683 = !DILocation(line: 1735, column: 7, scope: !9627)
!9684 = !DILocation(line: 1736, column: 38, scope: !9678)
!9685 = !DILocation(line: 1736, column: 50, scope: !9678)
!9686 = !DILocation(line: 1736, column: 56, scope: !9678)
!9687 = !DILocation(line: 1736, column: 66, scope: !9678)
!9688 = !DILocation(line: 1736, column: 12, scope: !9678)
!9689 = !DILocation(line: 1736, column: 10, scope: !9678)
!9690 = !DILocation(line: 1736, column: 5, scope: !9678)
!9691 = !DILocation(line: 1738, column: 8, scope: !9692)
!9692 = distinct !DILexicalBlock(scope: !9627, file: !3, line: 1738, column: 7)
!9693 = !DILocation(line: 1738, column: 7, scope: !9627)
!9694 = !DILocation(line: 1739, column: 5, scope: !9692)
!9695 = !DILocation(line: 1740, column: 22, scope: !9627)
!9696 = !DILocation(line: 1740, column: 21, scope: !9627)
!9697 = !DILocation(line: 1740, column: 11, scope: !9627)
!9698 = !DILocation(line: 1740, column: 29, scope: !9627)
!9699 = !DILocation(line: 1740, column: 3, scope: !9627)
!9700 = !DILocation(line: 1741, column: 1, scope: !9627)
!9701 = distinct !DISubprogram(name: "vn_phi_insert", scope: !3, file: !3, line: 1747, type: !9702, scopeLine: 1748, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!9702 = !DISubroutineType(types: !9703)
!9703 = !{!2977, !1814, !1483}
!9704 = !DILocalVariable(name: "phi", arg: 1, scope: !9701, file: !3, line: 1747, type: !1814)
!9705 = !DILocation(line: 1747, column: 23, scope: !9701)
!9706 = !DILocalVariable(name: "result", arg: 2, scope: !9701, file: !3, line: 1747, type: !1483)
!9707 = !DILocation(line: 1747, column: 33, scope: !9701)
!9708 = !DILocalVariable(name: "slot", scope: !9701, file: !3, line: 1749, type: !2321)
!9709 = !DILocation(line: 1749, column: 10, scope: !9701)
!9710 = !DILocalVariable(name: "vp1", scope: !9701, file: !3, line: 1750, type: !2977)
!9711 = !DILocation(line: 1750, column: 12, scope: !9701)
!9712 = !DILocation(line: 1750, column: 41, scope: !9701)
!9713 = !DILocation(line: 1750, column: 55, scope: !9701)
!9714 = !DILocation(line: 1750, column: 29, scope: !9701)
!9715 = !DILocation(line: 1750, column: 18, scope: !9701)
!9716 = !DILocalVariable(name: "i", scope: !9701, file: !3, line: 1751, type: !7)
!9717 = !DILocation(line: 1751, column: 12, scope: !9701)
!9718 = !DILocalVariable(name: "args", scope: !9701, file: !3, line: 1752, type: !2970)
!9719 = !DILocation(line: 1752, column: 21, scope: !9701)
!9720 = !DILocation(line: 1755, column: 10, scope: !9721)
!9721 = distinct !DILexicalBlock(scope: !9701, file: !3, line: 1755, column: 3)
!9722 = !DILocation(line: 1755, column: 8, scope: !9721)
!9723 = !DILocation(line: 1755, column: 15, scope: !9724)
!9724 = distinct !DILexicalBlock(scope: !9721, file: !3, line: 1755, column: 3)
!9725 = !DILocation(line: 1755, column: 40, scope: !9724)
!9726 = !DILocation(line: 1755, column: 19, scope: !9724)
!9727 = !DILocation(line: 1755, column: 17, scope: !9724)
!9728 = !DILocation(line: 1755, column: 3, scope: !9721)
!9729 = !DILocalVariable(name: "def", scope: !9730, file: !3, line: 1757, type: !1483)
!9730 = distinct !DILexicalBlock(scope: !9724, file: !3, line: 1756, column: 5)
!9731 = !DILocation(line: 1757, column: 12, scope: !9730)
!9732 = !DILocation(line: 1757, column: 18, scope: !9730)
!9733 = !DILocation(line: 1758, column: 13, scope: !9730)
!9734 = !DILocation(line: 1758, column: 29, scope: !9730)
!9735 = !DILocation(line: 1758, column: 43, scope: !9730)
!9736 = !DILocation(line: 1758, column: 59, scope: !9730)
!9737 = !DILocation(line: 1758, column: 11, scope: !9730)
!9738 = !DILocation(line: 1759, column: 7, scope: !9730)
!9739 = !DILocation(line: 1760, column: 5, scope: !9730)
!9740 = !DILocation(line: 1755, column: 47, scope: !9724)
!9741 = !DILocation(line: 1755, column: 3, scope: !9724)
!9742 = distinct !{!9742, !9728, !9743}
!9743 = !DILocation(line: 1760, column: 5, scope: !9721)
!9744 = !DILocation(line: 1761, column: 28, scope: !9701)
!9745 = !DILocation(line: 1761, column: 19, scope: !9701)
!9746 = !DILocation(line: 1761, column: 37, scope: !9701)
!9747 = !DILocation(line: 1761, column: 3, scope: !9701)
!9748 = !DILocation(line: 1761, column: 8, scope: !9701)
!9749 = !DILocation(line: 1761, column: 17, scope: !9701)
!9750 = !DILocation(line: 1762, column: 18, scope: !9701)
!9751 = !DILocation(line: 1762, column: 3, scope: !9701)
!9752 = !DILocation(line: 1762, column: 8, scope: !9701)
!9753 = !DILocation(line: 1762, column: 16, scope: !9701)
!9754 = !DILocation(line: 1763, column: 27, scope: !9701)
!9755 = !DILocation(line: 1763, column: 16, scope: !9701)
!9756 = !DILocation(line: 1763, column: 3, scope: !9701)
!9757 = !DILocation(line: 1763, column: 8, scope: !9701)
!9758 = !DILocation(line: 1763, column: 14, scope: !9701)
!9759 = !DILocation(line: 1764, column: 17, scope: !9701)
!9760 = !DILocation(line: 1764, column: 3, scope: !9701)
!9761 = !DILocation(line: 1764, column: 8, scope: !9701)
!9762 = !DILocation(line: 1764, column: 15, scope: !9701)
!9763 = !DILocation(line: 1765, column: 40, scope: !9701)
!9764 = !DILocation(line: 1765, column: 19, scope: !9701)
!9765 = !DILocation(line: 1765, column: 3, scope: !9701)
!9766 = !DILocation(line: 1765, column: 8, scope: !9701)
!9767 = !DILocation(line: 1765, column: 17, scope: !9701)
!9768 = !DILocation(line: 1767, column: 36, scope: !9701)
!9769 = !DILocation(line: 1767, column: 50, scope: !9701)
!9770 = !DILocation(line: 1767, column: 56, scope: !9701)
!9771 = !DILocation(line: 1767, column: 61, scope: !9701)
!9772 = !DILocation(line: 1767, column: 66, scope: !9701)
!9773 = !DILocation(line: 1767, column: 10, scope: !9701)
!9774 = !DILocation(line: 1767, column: 8, scope: !9701)
!9775 = !DILocation(line: 1772, column: 11, scope: !9701)
!9776 = !DILocation(line: 1772, column: 4, scope: !9701)
!9777 = !DILocation(line: 1772, column: 9, scope: !9701)
!9778 = !DILocation(line: 1773, column: 10, scope: !9701)
!9779 = !DILocation(line: 1773, column: 3, scope: !9701)
!9780 = distinct !DISubprogram(name: "gimple_phi_arg", scope: !391, file: !391, line: 3100, type: !9781, scopeLine: 3101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!9781 = !DISubroutineType(types: !9782)
!9782 = !{!9783, !1814, !7}
!9783 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1917, size: 64)
!9784 = !DILocalVariable(name: "gs", arg: 1, scope: !9780, file: !391, line: 3100, type: !1814)
!9785 = !DILocation(line: 3100, column: 24, scope: !9780)
!9786 = !DILocalVariable(name: "index", arg: 2, scope: !9780, file: !391, line: 3100, type: !7)
!9787 = !DILocation(line: 3100, column: 37, scope: !9780)
!9788 = !DILocation(line: 3103, column: 3, scope: !9780)
!9789 = !DILocation(line: 3104, column: 12, scope: !9780)
!9790 = !DILocation(line: 3104, column: 16, scope: !9780)
!9791 = !DILocation(line: 3104, column: 27, scope: !9780)
!9792 = !DILocation(line: 3104, column: 32, scope: !9780)
!9793 = !DILocation(line: 3104, column: 3, scope: !9780)
!9794 = distinct !DISubprogram(name: "VEC_tree_base_truncate", scope: !135, file: !135, line: 182, type: !9795, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!9795 = !DISubroutineType(types: !9796)
!9796 = !{null, !7503, !7}
!9797 = !DILocalVariable(name: "vec_", arg: 1, scope: !9794, file: !135, line: 182, type: !7503)
!9798 = !DILocation(line: 182, column: 1, scope: !9794)
!9799 = !DILocalVariable(name: "size_", arg: 2, scope: !9794, file: !135, line: 182, type: !7)
!9800 = !DILocation(line: 182, column: 1, scope: !9801)
!9801 = distinct !DILexicalBlock(scope: !9794, file: !135, line: 182, column: 1)
!9802 = distinct !DISubprogram(name: "vn_phi_compute_hash", scope: !3, file: !3, line: 1636, type: !9803, scopeLine: 1637, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!9803 = !DISubroutineType(types: !9804)
!9804 = !{!2307, !2977}
!9805 = !DILocalVariable(name: "vp1", arg: 1, scope: !9802, file: !3, line: 1636, type: !2977)
!9806 = !DILocation(line: 1636, column: 31, scope: !9802)
!9807 = !DILocalVariable(name: "result", scope: !9802, file: !3, line: 1638, type: !2307)
!9808 = !DILocation(line: 1638, column: 13, scope: !9802)
!9809 = !DILocalVariable(name: "i", scope: !9802, file: !3, line: 1639, type: !1580)
!9810 = !DILocation(line: 1639, column: 7, scope: !9802)
!9811 = !DILocalVariable(name: "phi1op", scope: !9802, file: !3, line: 1640, type: !1483)
!9812 = !DILocation(line: 1640, column: 8, scope: !9802)
!9813 = !DILocalVariable(name: "type", scope: !9802, file: !3, line: 1641, type: !1483)
!9814 = !DILocation(line: 1641, column: 8, scope: !9802)
!9815 = !DILocation(line: 1643, column: 12, scope: !9802)
!9816 = !DILocation(line: 1643, column: 17, scope: !9802)
!9817 = !DILocation(line: 1643, column: 24, scope: !9802)
!9818 = !DILocation(line: 1643, column: 10, scope: !9802)
!9819 = !DILocation(line: 1647, column: 10, scope: !9802)
!9820 = !DILocation(line: 1647, column: 8, scope: !9802)
!9821 = !DILocation(line: 1648, column: 14, scope: !9802)
!9822 = !DILocation(line: 1649, column: 10, scope: !9802)
!9823 = !DILocation(line: 1650, column: 5, scope: !9802)
!9824 = !DILocation(line: 1650, column: 29, scope: !9802)
!9825 = !DILocation(line: 1650, column: 27, scope: !9802)
!9826 = !DILocation(line: 1649, column: 7, scope: !9802)
!9827 = !DILocation(line: 1648, column: 10, scope: !9802)
!9828 = !DILocation(line: 1652, column: 10, scope: !9829)
!9829 = distinct !DILexicalBlock(scope: !9802, file: !3, line: 1652, column: 3)
!9830 = !DILocation(line: 1652, column: 8, scope: !9829)
!9831 = !DILocation(line: 1652, column: 15, scope: !9832)
!9832 = distinct !DILexicalBlock(scope: !9829, file: !3, line: 1652, column: 3)
!9833 = !DILocation(line: 1652, column: 3, scope: !9829)
!9834 = !DILocation(line: 1654, column: 11, scope: !9835)
!9835 = distinct !DILexicalBlock(scope: !9836, file: !3, line: 1654, column: 11)
!9836 = distinct !DILexicalBlock(scope: !9832, file: !3, line: 1653, column: 5)
!9837 = !DILocation(line: 1654, column: 21, scope: !9835)
!9838 = !DILocation(line: 1654, column: 18, scope: !9835)
!9839 = !DILocation(line: 1654, column: 11, scope: !9836)
!9840 = !DILocation(line: 1655, column: 2, scope: !9835)
!9841 = !DILocation(line: 1656, column: 37, scope: !9836)
!9842 = !DILocation(line: 1656, column: 45, scope: !9836)
!9843 = !DILocation(line: 1656, column: 16, scope: !9836)
!9844 = !DILocation(line: 1656, column: 14, scope: !9836)
!9845 = !DILocation(line: 1657, column: 5, scope: !9836)
!9846 = !DILocation(line: 1652, column: 61, scope: !9832)
!9847 = !DILocation(line: 1652, column: 3, scope: !9832)
!9848 = distinct !{!9848, !9833, !9849}
!9849 = !DILocation(line: 1657, column: 5, scope: !9829)
!9850 = !DILocation(line: 1659, column: 10, scope: !9802)
!9851 = !DILocation(line: 1659, column: 3, scope: !9802)
!9852 = distinct !DISubprogram(name: "op_iter_init_def", scope: !6499, file: !6499, line: 780, type: !9853, scopeLine: 781, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!9853 = !DISubroutineType(types: !9854)
!9854 = !{!2984, !7332, !1814, !1580}
!9855 = !DILocalVariable(name: "ptr", arg: 1, scope: !9852, file: !6499, line: 780, type: !7332)
!9856 = !DILocation(line: 780, column: 32, scope: !9852)
!9857 = !DILocalVariable(name: "stmt", arg: 2, scope: !9852, file: !6499, line: 780, type: !1814)
!9858 = !DILocation(line: 780, column: 44, scope: !9852)
!9859 = !DILocalVariable(name: "flags", arg: 3, scope: !9852, file: !6499, line: 780, type: !1580)
!9860 = !DILocation(line: 780, column: 54, scope: !9852)
!9861 = !DILocation(line: 782, column: 3, scope: !9852)
!9862 = !DILocation(line: 784, column: 17, scope: !9852)
!9863 = !DILocation(line: 784, column: 22, scope: !9852)
!9864 = !DILocation(line: 784, column: 28, scope: !9852)
!9865 = !DILocation(line: 784, column: 3, scope: !9852)
!9866 = !DILocation(line: 785, column: 3, scope: !9852)
!9867 = !DILocation(line: 785, column: 8, scope: !9852)
!9868 = !DILocation(line: 785, column: 18, scope: !9852)
!9869 = !DILocation(line: 786, column: 28, scope: !9852)
!9870 = !DILocation(line: 786, column: 10, scope: !9852)
!9871 = !DILocation(line: 786, column: 3, scope: !9852)
!9872 = distinct !DISubprogram(name: "op_iter_next_def", scope: !6499, file: !6499, line: 681, type: !9873, scopeLine: 682, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!9873 = !DISubroutineType(types: !9874)
!9874 = !{!2984, !7332}
!9875 = !DILocalVariable(name: "ptr", arg: 1, scope: !9872, file: !6499, line: 681, type: !7332)
!9876 = !DILocation(line: 681, column: 32, scope: !9872)
!9877 = !DILocalVariable(name: "def_p", scope: !9872, file: !6499, line: 683, type: !2984)
!9878 = !DILocation(line: 683, column: 17, scope: !9872)
!9879 = !DILocation(line: 687, column: 7, scope: !9880)
!9880 = distinct !DILexicalBlock(scope: !9872, file: !6499, line: 687, column: 7)
!9881 = !DILocation(line: 687, column: 12, scope: !9880)
!9882 = !DILocation(line: 687, column: 7, scope: !9872)
!9883 = !DILocation(line: 689, column: 15, scope: !9884)
!9884 = distinct !DILexicalBlock(scope: !9880, file: !6499, line: 688, column: 5)
!9885 = !DILocation(line: 689, column: 13, scope: !9884)
!9886 = !DILocation(line: 690, column: 19, scope: !9884)
!9887 = !DILocation(line: 690, column: 24, scope: !9884)
!9888 = !DILocation(line: 690, column: 30, scope: !9884)
!9889 = !DILocation(line: 690, column: 7, scope: !9884)
!9890 = !DILocation(line: 690, column: 12, scope: !9884)
!9891 = !DILocation(line: 690, column: 17, scope: !9884)
!9892 = !DILocation(line: 691, column: 14, scope: !9884)
!9893 = !DILocation(line: 691, column: 7, scope: !9884)
!9894 = !DILocation(line: 693, column: 3, scope: !9872)
!9895 = !DILocation(line: 693, column: 8, scope: !9872)
!9896 = !DILocation(line: 693, column: 13, scope: !9872)
!9897 = !DILocation(line: 694, column: 3, scope: !9872)
!9898 = !DILocation(line: 695, column: 1, scope: !9872)
!9899 = distinct !DISubprogram(name: "simplify_unary_expression", scope: !3, file: !3, line: 2378, type: !8976, scopeLine: 2379, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!9900 = !DILocalVariable(name: "stmt", arg: 1, scope: !9899, file: !3, line: 2378, type: !1814)
!9901 = !DILocation(line: 2378, column: 35, scope: !9899)
!9902 = !DILocalVariable(name: "result", scope: !9899, file: !3, line: 2380, type: !1483)
!9903 = !DILocation(line: 2380, column: 8, scope: !9899)
!9904 = !DILocalVariable(name: "orig_op0", scope: !9899, file: !3, line: 2381, type: !1483)
!9905 = !DILocation(line: 2381, column: 8, scope: !9899)
!9906 = !DILocalVariable(name: "op0", scope: !9899, file: !3, line: 2381, type: !1483)
!9907 = !DILocation(line: 2381, column: 18, scope: !9899)
!9908 = !DILocation(line: 2381, column: 44, scope: !9899)
!9909 = !DILocation(line: 2381, column: 24, scope: !9899)
!9910 = !DILocation(line: 2385, column: 31, scope: !9911)
!9911 = distinct !DILexicalBlock(scope: !9899, file: !3, line: 2385, column: 7)
!9912 = !DILocation(line: 2385, column: 7, scope: !9911)
!9913 = !DILocation(line: 2385, column: 37, scope: !9911)
!9914 = !DILocation(line: 2386, column: 7, scope: !9911)
!9915 = !DILocation(line: 2386, column: 34, scope: !9911)
!9916 = !DILocation(line: 2386, column: 10, scope: !9911)
!9917 = !DILocation(line: 2386, column: 40, scope: !9911)
!9918 = !DILocation(line: 2387, column: 7, scope: !9911)
!9919 = !DILocation(line: 2387, column: 34, scope: !9911)
!9920 = !DILocation(line: 2387, column: 10, scope: !9911)
!9921 = !DILocation(line: 2387, column: 40, scope: !9911)
!9922 = !DILocation(line: 2385, column: 7, scope: !9899)
!9923 = !DILocation(line: 2388, column: 11, scope: !9911)
!9924 = !DILocation(line: 2388, column: 9, scope: !9911)
!9925 = !DILocation(line: 2388, column: 5, scope: !9911)
!9926 = !DILocation(line: 2390, column: 7, scope: !9927)
!9927 = distinct !DILexicalBlock(scope: !9899, file: !3, line: 2390, column: 7)
!9928 = !DILocation(line: 2390, column: 23, scope: !9927)
!9929 = !DILocation(line: 2390, column: 7, scope: !9899)
!9930 = !DILocation(line: 2391, column: 5, scope: !9927)
!9931 = !DILocation(line: 2393, column: 14, scope: !9899)
!9932 = !DILocation(line: 2393, column: 12, scope: !9899)
!9933 = !DILocation(line: 2394, column: 16, scope: !9934)
!9934 = distinct !DILexicalBlock(scope: !9899, file: !3, line: 2394, column: 7)
!9935 = !DILocation(line: 2394, column: 7, scope: !9934)
!9936 = !DILocation(line: 2394, column: 22, scope: !9934)
!9937 = !DILocation(line: 2394, column: 7, scope: !9899)
!9938 = !DILocation(line: 2395, column: 43, scope: !9934)
!9939 = !DILocation(line: 2395, column: 26, scope: !9934)
!9940 = !DILocation(line: 2395, column: 11, scope: !9934)
!9941 = !DILocation(line: 2395, column: 9, scope: !9934)
!9942 = !DILocation(line: 2395, column: 5, scope: !9934)
!9943 = !DILocation(line: 2396, column: 34, scope: !9944)
!9944 = distinct !DILexicalBlock(scope: !9934, file: !3, line: 2396, column: 12)
!9945 = !DILocation(line: 2396, column: 12, scope: !9944)
!9946 = !DILocation(line: 2397, column: 5, scope: !9944)
!9947 = !DILocation(line: 2397, column: 32, scope: !9944)
!9948 = !DILocation(line: 2397, column: 8, scope: !9944)
!9949 = !DILocation(line: 2397, column: 38, scope: !9944)
!9950 = !DILocation(line: 2398, column: 5, scope: !9944)
!9951 = !DILocation(line: 2398, column: 32, scope: !9944)
!9952 = !DILocation(line: 2398, column: 8, scope: !9944)
!9953 = !DILocation(line: 2398, column: 38, scope: !9944)
!9954 = !DILocation(line: 2399, column: 5, scope: !9944)
!9955 = !DILocation(line: 2399, column: 32, scope: !9944)
!9956 = !DILocation(line: 2399, column: 8, scope: !9944)
!9957 = !DILocation(line: 2399, column: 38, scope: !9944)
!9958 = !DILocation(line: 2396, column: 12, scope: !9934)
!9959 = !DILocalVariable(name: "tem", scope: !9960, file: !3, line: 2403, type: !1483)
!9960 = distinct !DILexicalBlock(scope: !9944, file: !3, line: 2400, column: 5)
!9961 = !DILocation(line: 2403, column: 12, scope: !9960)
!9962 = !DILocation(line: 2403, column: 50, scope: !9960)
!9963 = !DILocation(line: 2403, column: 33, scope: !9960)
!9964 = !DILocation(line: 2403, column: 18, scope: !9960)
!9965 = !DILocation(line: 2404, column: 11, scope: !9966)
!9966 = distinct !DILexicalBlock(scope: !9960, file: !3, line: 2404, column: 11)
!9967 = !DILocation(line: 2405, column: 4, scope: !9966)
!9968 = !DILocation(line: 2405, column: 7, scope: !9966)
!9969 = !DILocation(line: 2406, column: 4, scope: !9966)
!9970 = !DILocation(line: 2406, column: 7, scope: !9966)
!9971 = !DILocation(line: 2406, column: 23, scope: !9966)
!9972 = !DILocation(line: 2407, column: 4, scope: !9966)
!9973 = !DILocation(line: 2407, column: 7, scope: !9966)
!9974 = !DILocation(line: 2407, column: 23, scope: !9966)
!9975 = !DILocation(line: 2408, column: 4, scope: !9966)
!9976 = !DILocation(line: 2408, column: 32, scope: !9966)
!9977 = !DILocation(line: 2408, column: 7, scope: !9966)
!9978 = !DILocation(line: 2404, column: 11, scope: !9960)
!9979 = !DILocation(line: 2409, column: 8, scope: !9966)
!9980 = !DILocation(line: 2409, column: 6, scope: !9966)
!9981 = !DILocation(line: 2409, column: 2, scope: !9966)
!9982 = !DILocation(line: 2410, column: 5, scope: !9960)
!9983 = !DILocation(line: 2413, column: 7, scope: !9984)
!9984 = distinct !DILexicalBlock(scope: !9899, file: !3, line: 2413, column: 7)
!9985 = !DILocation(line: 2413, column: 14, scope: !9984)
!9986 = !DILocation(line: 2413, column: 11, scope: !9984)
!9987 = !DILocation(line: 2413, column: 7, scope: !9899)
!9988 = !DILocation(line: 2414, column: 5, scope: !9984)
!9989 = !DILocation(line: 2416, column: 12, scope: !9899)
!9990 = !DILocation(line: 2416, column: 10, scope: !9899)
!9991 = !DILocation(line: 2418, column: 7, scope: !9992)
!9992 = distinct !DILexicalBlock(scope: !9899, file: !3, line: 2418, column: 7)
!9993 = !DILocation(line: 2418, column: 7, scope: !9899)
!9994 = !DILocation(line: 2420, column: 7, scope: !9995)
!9995 = distinct !DILexicalBlock(scope: !9992, file: !3, line: 2419, column: 5)
!9996 = !DILocation(line: 2421, column: 31, scope: !9997)
!9997 = distinct !DILexicalBlock(scope: !9995, file: !3, line: 2421, column: 11)
!9998 = !DILocation(line: 2421, column: 11, scope: !9997)
!9999 = !DILocation(line: 2421, column: 11, scope: !9995)
!10000 = !DILocation(line: 2422, column: 16, scope: !9997)
!10001 = !DILocation(line: 2422, column: 9, scope: !9997)
!10002 = !DILocation(line: 2423, column: 5, scope: !9995)
!10003 = !DILocation(line: 2425, column: 3, scope: !9899)
!10004 = !DILocation(line: 2426, column: 1, scope: !9899)
!10005 = distinct !DISubprogram(name: "simplify_binary_expression", scope: !3, file: !3, line: 2322, type: !8976, scopeLine: 2323, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!10006 = !DILocalVariable(name: "stmt", arg: 1, scope: !10005, file: !3, line: 2322, type: !1814)
!10007 = !DILocation(line: 2322, column: 36, scope: !10005)
!10008 = !DILocalVariable(name: "result", scope: !10005, file: !3, line: 2324, type: !1483)
!10009 = !DILocation(line: 2324, column: 8, scope: !10005)
!10010 = !DILocalVariable(name: "op0", scope: !10005, file: !3, line: 2325, type: !1483)
!10011 = !DILocation(line: 2325, column: 8, scope: !10005)
!10012 = !DILocation(line: 2325, column: 34, scope: !10005)
!10013 = !DILocation(line: 2325, column: 14, scope: !10005)
!10014 = !DILocalVariable(name: "op1", scope: !10005, file: !3, line: 2326, type: !1483)
!10015 = !DILocation(line: 2326, column: 8, scope: !10005)
!10016 = !DILocation(line: 2326, column: 34, scope: !10005)
!10017 = !DILocation(line: 2326, column: 14, scope: !10005)
!10018 = !DILocation(line: 2332, column: 7, scope: !10019)
!10019 = distinct !DILexicalBlock(scope: !10005, file: !3, line: 2332, column: 7)
!10020 = !DILocation(line: 2332, column: 23, scope: !10019)
!10021 = !DILocation(line: 2332, column: 7, scope: !10005)
!10022 = !DILocation(line: 2334, column: 20, scope: !10023)
!10023 = distinct !DILexicalBlock(scope: !10024, file: !3, line: 2334, column: 11)
!10024 = distinct !DILexicalBlock(scope: !10019, file: !3, line: 2333, column: 5)
!10025 = !DILocation(line: 2334, column: 11, scope: !10023)
!10026 = !DILocation(line: 2334, column: 26, scope: !10023)
!10027 = !DILocation(line: 2335, column: 4, scope: !10023)
!10028 = !DILocation(line: 2335, column: 7, scope: !10023)
!10029 = !DILocation(line: 2335, column: 55, scope: !10023)
!10030 = !DILocation(line: 2334, column: 11, scope: !10024)
!10031 = !DILocation(line: 2336, column: 40, scope: !10023)
!10032 = !DILocation(line: 2336, column: 23, scope: !10023)
!10033 = !DILocation(line: 2336, column: 8, scope: !10023)
!10034 = !DILocation(line: 2336, column: 6, scope: !10023)
!10035 = !DILocation(line: 2336, column: 2, scope: !10023)
!10036 = !DILocation(line: 2337, column: 16, scope: !10037)
!10037 = distinct !DILexicalBlock(scope: !10023, file: !3, line: 2337, column: 16)
!10038 = !DILocation(line: 2337, column: 33, scope: !10037)
!10039 = !DILocation(line: 2337, column: 30, scope: !10037)
!10040 = !DILocation(line: 2337, column: 40, scope: !10037)
!10041 = !DILocation(line: 2337, column: 43, scope: !10037)
!10042 = !DILocation(line: 2337, column: 60, scope: !10037)
!10043 = !DILocation(line: 2337, column: 57, scope: !10037)
!10044 = !DILocation(line: 2337, column: 16, scope: !10023)
!10045 = !DILocation(line: 2338, column: 8, scope: !10037)
!10046 = !DILocation(line: 2338, column: 6, scope: !10037)
!10047 = !DILocation(line: 2338, column: 2, scope: !10037)
!10048 = !DILocation(line: 2339, column: 5, scope: !10024)
!10049 = !DILocation(line: 2341, column: 7, scope: !10050)
!10050 = distinct !DILexicalBlock(scope: !10005, file: !3, line: 2341, column: 7)
!10051 = !DILocation(line: 2341, column: 23, scope: !10050)
!10052 = !DILocation(line: 2341, column: 7, scope: !10005)
!10053 = !DILocation(line: 2343, column: 20, scope: !10054)
!10054 = distinct !DILexicalBlock(scope: !10055, file: !3, line: 2343, column: 11)
!10055 = distinct !DILexicalBlock(scope: !10050, file: !3, line: 2342, column: 5)
!10056 = !DILocation(line: 2343, column: 11, scope: !10054)
!10057 = !DILocation(line: 2343, column: 26, scope: !10054)
!10058 = !DILocation(line: 2343, column: 11, scope: !10055)
!10059 = !DILocation(line: 2344, column: 40, scope: !10054)
!10060 = !DILocation(line: 2344, column: 23, scope: !10054)
!10061 = !DILocation(line: 2344, column: 8, scope: !10054)
!10062 = !DILocation(line: 2344, column: 6, scope: !10054)
!10063 = !DILocation(line: 2344, column: 2, scope: !10054)
!10064 = !DILocation(line: 2345, column: 16, scope: !10065)
!10065 = distinct !DILexicalBlock(scope: !10054, file: !3, line: 2345, column: 16)
!10066 = !DILocation(line: 2345, column: 33, scope: !10065)
!10067 = !DILocation(line: 2345, column: 30, scope: !10065)
!10068 = !DILocation(line: 2345, column: 40, scope: !10065)
!10069 = !DILocation(line: 2345, column: 43, scope: !10065)
!10070 = !DILocation(line: 2345, column: 60, scope: !10065)
!10071 = !DILocation(line: 2345, column: 57, scope: !10065)
!10072 = !DILocation(line: 2345, column: 16, scope: !10054)
!10073 = !DILocation(line: 2346, column: 8, scope: !10065)
!10074 = !DILocation(line: 2346, column: 6, scope: !10065)
!10075 = !DILocation(line: 2346, column: 2, scope: !10065)
!10076 = !DILocation(line: 2347, column: 5, scope: !10055)
!10077 = !DILocation(line: 2350, column: 7, scope: !10078)
!10078 = distinct !DILexicalBlock(scope: !10005, file: !3, line: 2350, column: 7)
!10079 = !DILocation(line: 2350, column: 34, scope: !10078)
!10080 = !DILocation(line: 2350, column: 14, scope: !10078)
!10081 = !DILocation(line: 2350, column: 11, scope: !10078)
!10082 = !DILocation(line: 2351, column: 7, scope: !10078)
!10083 = !DILocation(line: 2351, column: 10, scope: !10078)
!10084 = !DILocation(line: 2351, column: 37, scope: !10078)
!10085 = !DILocation(line: 2351, column: 17, scope: !10078)
!10086 = !DILocation(line: 2351, column: 14, scope: !10078)
!10087 = !DILocation(line: 2350, column: 7, scope: !10005)
!10088 = !DILocation(line: 2352, column: 5, scope: !10078)
!10089 = !DILocation(line: 2354, column: 3, scope: !10005)
!10090 = !DILocation(line: 2356, column: 12, scope: !10005)
!10091 = !DILocation(line: 2356, column: 10, scope: !10005)
!10092 = !DILocation(line: 2358, column: 7, scope: !10093)
!10093 = distinct !DILexicalBlock(scope: !10005, file: !3, line: 2358, column: 7)
!10094 = !DILocation(line: 2358, column: 7, scope: !10005)
!10095 = !DILocation(line: 2359, column: 5, scope: !10093)
!10096 = !DILocation(line: 2361, column: 35, scope: !10005)
!10097 = !DILocation(line: 2361, column: 42, scope: !10005)
!10098 = !DILocation(line: 2361, column: 65, scope: !10005)
!10099 = !DILocation(line: 2361, column: 45, scope: !10005)
!10100 = !DILocation(line: 0, scope: !10005)
!10101 = !DILocation(line: 2362, column: 7, scope: !10005)
!10102 = !DILocation(line: 2361, column: 3, scope: !10005)
!10103 = !DILocation(line: 2368, column: 7, scope: !10104)
!10104 = distinct !DILexicalBlock(scope: !10005, file: !3, line: 2368, column: 7)
!10105 = !DILocation(line: 2368, column: 14, scope: !10104)
!10106 = !DILocation(line: 2368, column: 37, scope: !10104)
!10107 = !DILocation(line: 2368, column: 17, scope: !10104)
!10108 = !DILocation(line: 2368, column: 7, scope: !10005)
!10109 = !DILocation(line: 2369, column: 12, scope: !10104)
!10110 = !DILocation(line: 2369, column: 5, scope: !10104)
!10111 = !DILocation(line: 2371, column: 3, scope: !10005)
!10112 = !DILocation(line: 2372, column: 1, scope: !10005)
!10113 = distinct !DISubprogram(name: "valueize_expr", scope: !3, file: !3, line: 2295, type: !3107, scopeLine: 2296, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!10114 = !DILocalVariable(name: "expr", arg: 1, scope: !10113, file: !3, line: 2295, type: !1483)
!10115 = !DILocation(line: 2295, column: 21, scope: !10113)
!10116 = !DILocation(line: 2297, column: 11, scope: !10113)
!10117 = !DILocation(line: 2297, column: 3, scope: !10113)
!10118 = !DILocation(line: 2300, column: 11, scope: !10119)
!10119 = distinct !DILexicalBlock(scope: !10120, file: !3, line: 2300, column: 11)
!10120 = distinct !DILexicalBlock(scope: !10113, file: !3, line: 2298, column: 5)
!10121 = !DILocation(line: 2300, column: 46, scope: !10119)
!10122 = !DILocation(line: 2301, column: 4, scope: !10119)
!10123 = !DILocation(line: 2301, column: 7, scope: !10119)
!10124 = !DILocation(line: 2301, column: 43, scope: !10119)
!10125 = !DILocation(line: 2301, column: 40, scope: !10119)
!10126 = !DILocation(line: 2300, column: 11, scope: !10120)
!10127 = !DILocation(line: 2302, column: 27, scope: !10119)
!10128 = !DILocation(line: 2302, column: 2, scope: !10119)
!10129 = !DILocation(line: 2302, column: 25, scope: !10119)
!10130 = !DILocation(line: 2303, column: 7, scope: !10120)
!10131 = !DILocation(line: 2305, column: 11, scope: !10132)
!10132 = distinct !DILexicalBlock(scope: !10120, file: !3, line: 2305, column: 11)
!10133 = !DILocation(line: 2305, column: 46, scope: !10132)
!10134 = !DILocation(line: 2306, column: 4, scope: !10132)
!10135 = !DILocation(line: 2306, column: 7, scope: !10132)
!10136 = !DILocation(line: 2306, column: 43, scope: !10132)
!10137 = !DILocation(line: 2306, column: 40, scope: !10132)
!10138 = !DILocation(line: 2305, column: 11, scope: !10120)
!10139 = !DILocation(line: 2307, column: 27, scope: !10132)
!10140 = !DILocation(line: 2307, column: 2, scope: !10132)
!10141 = !DILocation(line: 2307, column: 25, scope: !10132)
!10142 = !DILocation(line: 2308, column: 11, scope: !10143)
!10143 = distinct !DILexicalBlock(scope: !10120, file: !3, line: 2308, column: 11)
!10144 = !DILocation(line: 2308, column: 46, scope: !10143)
!10145 = !DILocation(line: 2309, column: 4, scope: !10143)
!10146 = !DILocation(line: 2309, column: 7, scope: !10143)
!10147 = !DILocation(line: 2309, column: 43, scope: !10143)
!10148 = !DILocation(line: 2309, column: 40, scope: !10143)
!10149 = !DILocation(line: 2308, column: 11, scope: !10120)
!10150 = !DILocation(line: 2310, column: 27, scope: !10143)
!10151 = !DILocation(line: 2310, column: 2, scope: !10143)
!10152 = !DILocation(line: 2310, column: 25, scope: !10143)
!10153 = !DILocation(line: 2311, column: 7, scope: !10120)
!10154 = !DILocation(line: 2313, column: 7, scope: !10120)
!10155 = !DILocation(line: 2315, column: 10, scope: !10113)
!10156 = !DILocation(line: 2315, column: 3, scope: !10113)
!10157 = distinct !DISubprogram(name: "gimple_assign_cast_p", scope: !391, file: !391, line: 1853, type: !8724, scopeLine: 1854, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!10158 = !DILocalVariable(name: "s", arg: 1, scope: !10157, file: !391, line: 1853, type: !1814)
!10159 = !DILocation(line: 1853, column: 30, scope: !10157)
!10160 = !DILocation(line: 1855, column: 25, scope: !10161)
!10161 = distinct !DILexicalBlock(scope: !10157, file: !391, line: 1855, column: 7)
!10162 = !DILocation(line: 1855, column: 7, scope: !10161)
!10163 = !DILocation(line: 1855, column: 7, scope: !10157)
!10164 = !DILocalVariable(name: "sc", scope: !10165, file: !391, line: 1857, type: !134)
!10165 = distinct !DILexicalBlock(scope: !10161, file: !391, line: 1856, column: 5)
!10166 = !DILocation(line: 1857, column: 22, scope: !10165)
!10167 = !DILocation(line: 1857, column: 51, scope: !10165)
!10168 = !DILocation(line: 1857, column: 27, scope: !10165)
!10169 = !DILocation(line: 1858, column: 14, scope: !10165)
!10170 = !DILocation(line: 1859, column: 7, scope: !10165)
!10171 = !DILocation(line: 1859, column: 10, scope: !10165)
!10172 = !DILocation(line: 1859, column: 13, scope: !10165)
!10173 = !DILocation(line: 1860, column: 7, scope: !10165)
!10174 = !DILocation(line: 1860, column: 10, scope: !10165)
!10175 = !DILocation(line: 1860, column: 13, scope: !10165)
!10176 = !DILocation(line: 1858, column: 7, scope: !10165)
!10177 = !DILocation(line: 1863, column: 3, scope: !10157)
!10178 = !DILocation(line: 1864, column: 1, scope: !10157)
!10179 = distinct !DISubprogram(name: "make_ssa_name", scope: !6499, file: !6499, line: 1245, type: !10180, scopeLine: 1246, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!10180 = !DISubroutineType(types: !10181)
!10181 = !{!1483, !1483, !1814}
!10182 = !DILocalVariable(name: "var", arg: 1, scope: !10179, file: !6499, line: 1245, type: !1483)
!10183 = !DILocation(line: 1245, column: 21, scope: !10179)
!10184 = !DILocalVariable(name: "stmt", arg: 2, scope: !10179, file: !6499, line: 1245, type: !1814)
!10185 = !DILocation(line: 1245, column: 33, scope: !10179)
!10186 = !DILocation(line: 1247, column: 28, scope: !10179)
!10187 = !DILocation(line: 1247, column: 34, scope: !10179)
!10188 = !DILocation(line: 1247, column: 39, scope: !10179)
!10189 = !DILocation(line: 1247, column: 10, scope: !10179)
!10190 = !DILocation(line: 1247, column: 3, scope: !10179)
!10191 = distinct !DISubprogram(name: "valueize_shared_reference_ops_from_call", scope: !3, file: !3, line: 953, type: !10192, scopeLine: 954, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!10192 = !DISubroutineType(types: !10193)
!10193 = !{!2868, !1814}
!10194 = !DILocalVariable(name: "call", arg: 1, scope: !10191, file: !3, line: 953, type: !1814)
!10195 = !DILocation(line: 953, column: 49, scope: !10191)
!10196 = !DILocation(line: 955, column: 8, scope: !10197)
!10197 = distinct !DILexicalBlock(scope: !10191, file: !3, line: 955, column: 7)
!10198 = !DILocation(line: 955, column: 7, scope: !10191)
!10199 = !DILocation(line: 956, column: 5, scope: !10197)
!10200 = !DILocation(line: 957, column: 3, scope: !10191)
!10201 = !DILocation(line: 958, column: 33, scope: !10191)
!10202 = !DILocation(line: 958, column: 3, scope: !10191)
!10203 = !DILocation(line: 959, column: 45, scope: !10191)
!10204 = !DILocation(line: 959, column: 30, scope: !10191)
!10205 = !DILocation(line: 959, column: 28, scope: !10191)
!10206 = !DILocation(line: 960, column: 10, scope: !10191)
!10207 = !DILocation(line: 960, column: 3, scope: !10191)
!10208 = !DILocation(line: 961, column: 1, scope: !10191)
!10209 = distinct !DISubprogram(name: "create_reference_ops_from_call", scope: !3, file: !3, line: 820, type: !10192, scopeLine: 821, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!10210 = !DILocalVariable(name: "call", arg: 1, scope: !10209, file: !3, line: 820, type: !1814)
!10211 = !DILocation(line: 820, column: 40, scope: !10209)
!10212 = !DILocalVariable(name: "result", scope: !10209, file: !3, line: 822, type: !2868)
!10213 = !DILocation(line: 822, column: 34, scope: !10209)
!10214 = !DILocation(line: 824, column: 33, scope: !10209)
!10215 = !DILocation(line: 824, column: 3, scope: !10209)
!10216 = !DILocation(line: 825, column: 10, scope: !10209)
!10217 = !DILocation(line: 825, column: 3, scope: !10209)
!10218 = distinct !DISubprogram(name: "VEC_ssa_op_iter_heap_reserve", scope: !3, file: !3, line: 2876, type: !10219, scopeLine: 2876, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!10219 = !DISubroutineType(types: !10220)
!10220 = !{!1580, !7495, !1580}
!10221 = !DILocalVariable(name: "vec_", arg: 1, scope: !10218, file: !3, line: 2876, type: !7495)
!10222 = !DILocation(line: 2876, column: 1, scope: !10218)
!10223 = !DILocalVariable(name: "alloc_", arg: 2, scope: !10218, file: !3, line: 2876, type: !1580)
!10224 = !DILocalVariable(name: "extend", scope: !10218, file: !3, line: 2876, type: !1580)
!10225 = !DILocation(line: 2876, column: 1, scope: !10226)
!10226 = distinct !DILexicalBlock(scope: !10218, file: !3, line: 2876, column: 1)
!10227 = distinct !DISubprogram(name: "VEC_ssa_op_iter_base_quick_push", scope: !3, file: !3, line: 2875, type: !10228, scopeLine: 2875, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!10228 = !DISubroutineType(types: !10229)
!10229 = !{!7332, !7510, !7429}
!10230 = !DILocalVariable(name: "vec_", arg: 1, scope: !10227, file: !3, line: 2875, type: !7510)
!10231 = !DILocation(line: 2875, column: 1, scope: !10227)
!10232 = !DILocalVariable(name: "obj_", arg: 2, scope: !10227, file: !3, line: 2875, type: !7429)
!10233 = !DILocalVariable(name: "slot_", scope: !10227, file: !3, line: 2875, type: !7332)
!10234 = !DILocation(line: 2875, column: 1, scope: !10235)
!10235 = distinct !DILexicalBlock(scope: !10227, file: !3, line: 2875, column: 1)
!10236 = distinct !DISubprogram(name: "VEC_ssa_op_iter_base_space", scope: !3, file: !3, line: 2875, type: !10237, scopeLine: 2875, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!10237 = !DISubroutineType(types: !10238)
!10238 = !{!1580, !7510, !1580}
!10239 = !DILocalVariable(name: "vec_", arg: 1, scope: !10236, file: !3, line: 2875, type: !7510)
!10240 = !DILocation(line: 2875, column: 1, scope: !10236)
!10241 = !DILocalVariable(name: "alloc_", arg: 2, scope: !10236, file: !3, line: 2875, type: !1580)
!10242 = distinct !DISubprogram(name: "first_htab_element", scope: !6499, file: !6499, line: 58, type: !10243, scopeLine: 59, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!10243 = !DISubroutineType(types: !10244)
!10244 = !{!1767, !10245, !2298}
!10245 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6684, size: 64)
!10246 = !DILocalVariable(name: "hti", arg: 1, scope: !10242, file: !6499, line: 58, type: !10245)
!10247 = !DILocation(line: 58, column: 36, scope: !10242)
!10248 = !DILocalVariable(name: "table", arg: 2, scope: !10242, file: !6499, line: 58, type: !2298)
!10249 = !DILocation(line: 58, column: 48, scope: !10242)
!10250 = !DILocation(line: 60, column: 15, scope: !10242)
!10251 = !DILocation(line: 60, column: 3, scope: !10242)
!10252 = !DILocation(line: 60, column: 8, scope: !10242)
!10253 = !DILocation(line: 60, column: 13, scope: !10242)
!10254 = !DILocation(line: 61, column: 15, scope: !10242)
!10255 = !DILocation(line: 61, column: 22, scope: !10242)
!10256 = !DILocation(line: 61, column: 3, scope: !10242)
!10257 = !DILocation(line: 61, column: 8, scope: !10242)
!10258 = !DILocation(line: 61, column: 13, scope: !10242)
!10259 = !DILocation(line: 62, column: 16, scope: !10242)
!10260 = !DILocation(line: 62, column: 21, scope: !10242)
!10261 = !DILocation(line: 62, column: 39, scope: !10242)
!10262 = !DILocation(line: 62, column: 28, scope: !10242)
!10263 = !DILocation(line: 62, column: 26, scope: !10242)
!10264 = !DILocation(line: 62, column: 3, scope: !10242)
!10265 = !DILocation(line: 62, column: 8, scope: !10242)
!10266 = !DILocation(line: 62, column: 14, scope: !10242)
!10267 = !DILocation(line: 63, column: 3, scope: !10242)
!10268 = !DILocalVariable(name: "x", scope: !10269, file: !6499, line: 65, type: !1767)
!10269 = distinct !DILexicalBlock(scope: !10242, file: !6499, line: 64, column: 5)
!10270 = !DILocation(line: 65, column: 11, scope: !10269)
!10271 = !DILocation(line: 65, column: 17, scope: !10269)
!10272 = !DILocation(line: 65, column: 22, scope: !10269)
!10273 = !DILocation(line: 65, column: 15, scope: !10269)
!10274 = !DILocation(line: 66, column: 11, scope: !10275)
!10275 = distinct !DILexicalBlock(scope: !10269, file: !6499, line: 66, column: 11)
!10276 = !DILocation(line: 66, column: 13, scope: !10275)
!10277 = !DILocation(line: 66, column: 33, scope: !10275)
!10278 = !DILocation(line: 66, column: 36, scope: !10275)
!10279 = !DILocation(line: 66, column: 38, scope: !10275)
!10280 = !DILocation(line: 66, column: 11, scope: !10269)
!10281 = !DILocation(line: 67, column: 2, scope: !10275)
!10282 = !DILocation(line: 68, column: 5, scope: !10269)
!10283 = !DILocation(line: 68, column: 17, scope: !10242)
!10284 = !DILocation(line: 68, column: 22, scope: !10242)
!10285 = !DILocation(line: 68, column: 14, scope: !10242)
!10286 = !DILocation(line: 68, column: 30, scope: !10242)
!10287 = !DILocation(line: 68, column: 35, scope: !10242)
!10288 = !DILocation(line: 68, column: 28, scope: !10242)
!10289 = distinct !{!10289, !10267, !10290}
!10290 = !DILocation(line: 68, column: 40, scope: !10242)
!10291 = !DILocation(line: 70, column: 7, scope: !10292)
!10292 = distinct !DILexicalBlock(scope: !10242, file: !6499, line: 70, column: 7)
!10293 = !DILocation(line: 70, column: 12, scope: !10292)
!10294 = !DILocation(line: 70, column: 19, scope: !10292)
!10295 = !DILocation(line: 70, column: 24, scope: !10292)
!10296 = !DILocation(line: 70, column: 17, scope: !10292)
!10297 = !DILocation(line: 70, column: 7, scope: !10242)
!10298 = !DILocation(line: 71, column: 14, scope: !10292)
!10299 = !DILocation(line: 71, column: 19, scope: !10292)
!10300 = !DILocation(line: 71, column: 12, scope: !10292)
!10301 = !DILocation(line: 71, column: 5, scope: !10292)
!10302 = !DILocation(line: 72, column: 3, scope: !10242)
!10303 = !DILocation(line: 73, column: 1, scope: !10242)
!10304 = distinct !DISubprogram(name: "end_htab_p", scope: !6499, file: !6499, line: 79, type: !10305, scopeLine: 80, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!10305 = !DISubroutineType(types: !10306)
!10306 = !{!1603, !10307}
!10307 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10308, size: 64)
!10308 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !6684)
!10309 = !DILocalVariable(name: "hti", arg: 1, scope: !10304, file: !6499, line: 79, type: !10307)
!10310 = !DILocation(line: 79, column: 34, scope: !10304)
!10311 = !DILocation(line: 81, column: 7, scope: !10312)
!10312 = distinct !DILexicalBlock(scope: !10304, file: !6499, line: 81, column: 7)
!10313 = !DILocation(line: 81, column: 12, scope: !10312)
!10314 = !DILocation(line: 81, column: 20, scope: !10312)
!10315 = !DILocation(line: 81, column: 25, scope: !10312)
!10316 = !DILocation(line: 81, column: 17, scope: !10312)
!10317 = !DILocation(line: 81, column: 7, scope: !10304)
!10318 = !DILocation(line: 82, column: 5, scope: !10312)
!10319 = !DILocation(line: 83, column: 3, scope: !10304)
!10320 = !DILocation(line: 84, column: 1, scope: !10304)
!10321 = distinct !DISubprogram(name: "next_htab_element", scope: !6499, file: !6499, line: 90, type: !10322, scopeLine: 91, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3048)
!10322 = !DISubroutineType(types: !10323)
!10323 = !{!1767, !10245}
!10324 = !DILocalVariable(name: "hti", arg: 1, scope: !10321, file: !6499, line: 90, type: !10245)
!10325 = !DILocation(line: 90, column: 35, scope: !10321)
!10326 = !DILocation(line: 92, column: 3, scope: !10321)
!10327 = !DILocation(line: 92, column: 13, scope: !10321)
!10328 = !DILocation(line: 92, column: 18, scope: !10321)
!10329 = !DILocation(line: 92, column: 10, scope: !10321)
!10330 = !DILocation(line: 92, column: 26, scope: !10321)
!10331 = !DILocation(line: 92, column: 31, scope: !10321)
!10332 = !DILocation(line: 92, column: 24, scope: !10321)
!10333 = !DILocalVariable(name: "x", scope: !10334, file: !6499, line: 94, type: !1767)
!10334 = distinct !DILexicalBlock(scope: !10321, file: !6499, line: 93, column: 5)
!10335 = !DILocation(line: 94, column: 11, scope: !10334)
!10336 = !DILocation(line: 94, column: 17, scope: !10334)
!10337 = !DILocation(line: 94, column: 22, scope: !10334)
!10338 = !DILocation(line: 94, column: 15, scope: !10334)
!10339 = !DILocation(line: 95, column: 11, scope: !10340)
!10340 = distinct !DILexicalBlock(scope: !10334, file: !6499, line: 95, column: 11)
!10341 = !DILocation(line: 95, column: 13, scope: !10340)
!10342 = !DILocation(line: 95, column: 33, scope: !10340)
!10343 = !DILocation(line: 95, column: 36, scope: !10340)
!10344 = !DILocation(line: 95, column: 38, scope: !10340)
!10345 = !DILocation(line: 95, column: 11, scope: !10334)
!10346 = !DILocation(line: 96, column: 9, scope: !10340)
!10347 = !DILocation(line: 96, column: 2, scope: !10340)
!10348 = distinct !{!10348, !10326, !10349}
!10349 = !DILocation(line: 97, column: 5, scope: !10321)
!10350 = !DILocation(line: 98, column: 3, scope: !10321)
!10351 = !DILocation(line: 99, column: 1, scope: !10321)
