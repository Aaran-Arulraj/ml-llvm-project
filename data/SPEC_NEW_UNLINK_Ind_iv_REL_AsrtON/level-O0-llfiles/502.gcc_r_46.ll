; ModuleID = 'cfgrtl.c'
source_filename = "cfgrtl.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.rtl_data = type { %struct.expr_status, %struct.emit_status, %struct.varasm_status, %struct.incoming_args, %struct.function_subsections, %struct.rtl_eh, i32, %struct.rtx_def*, %struct.initial_value_struct*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i64, %struct.rtx_def*, %struct.VEC_temp_slot_p_gc*, %struct.temp_slot*, i32, i32, i32, i32, i32, i32, %struct.rtx_def*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.expr_status = type { i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def* }
%struct.emit_status = type { i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.sequence_stack*, i32, i32, i32, i32, i8* }
%struct.sequence_stack = type { %struct.rtx_def*, %struct.rtx_def*, %struct.sequence_stack* }
%struct.varasm_status = type { %struct.rtx_constant_pool*, i32 }
%struct.rtx_constant_pool = type opaque
%struct.incoming_args = type { i32, i32, i32, %struct.rtx_def*, %struct.ix86_args, %struct.rtx_def* }
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.function_subsections = type { i8*, i8*, i8*, i8*, i8* }
%struct.rtl_eh = type { %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.VEC_uchar_gc*, [2 x %struct.VEC_call_site_record_gc*] }
%struct.VEC_uchar_gc = type { %struct.VEC_uchar_base }
%struct.VEC_uchar_base = type { i32, i32, [1 x i8] }
%struct.VEC_call_site_record_gc = type { %struct.VEC_call_site_record_base }
%struct.VEC_call_site_record_base = type { i32, i32, [1 x %struct.call_site_record_d*] }
%struct.call_site_record_d = type opaque
%struct.initial_value_struct = type opaque
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type { %struct.eh_region_d*, %struct.VEC_eh_region_gc*, %struct.VEC_eh_landing_pad_gc*, %struct.htab*, %struct.VEC_tree_gc*, %union.eh_status_u }
%struct.eh_region_d = type { %struct.eh_region_d*, %struct.eh_region_d*, %struct.eh_region_d*, i32, i32, %union.eh_region_u, %struct.eh_landing_pad_d*, %struct.rtx_def*, %struct.rtx_def*, i8 }
%union.eh_region_u = type { %struct.eh_region_u_allowed }
%struct.eh_region_u_allowed = type { %union.tree_node*, %union.tree_node*, i32 }
%struct.eh_landing_pad_d = type { %struct.eh_landing_pad_d*, %struct.eh_region_d*, %union.tree_node*, %struct.rtx_def*, i32 }
%struct.VEC_eh_region_gc = type { %struct.VEC_eh_region_base }
%struct.VEC_eh_region_base = type { i32, i32, [1 x %struct.eh_region_d*] }
%struct.VEC_eh_landing_pad_gc = type { %struct.VEC_eh_landing_pad_base }
%struct.VEC_eh_landing_pad_base = type { i32, i32, [1 x %struct.eh_landing_pad_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%union.eh_status_u = type { %struct.VEC_tree_gc* }
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type { i32, i32, %struct.basic_block_def*, %struct.basic_block_def*, %struct.lpt_decision, i32, i32, %struct.VEC_loop_p_gc*, %struct.loop*, %struct.loop*, i8*, %union.tree_node*, %struct.double_int, %struct.double_int, i8, i8, i32, %struct.nb_iter_bound*, %struct.loop_exit*, i8, %union.tree_node* }
%struct.lpt_decision = type { i32, i32 }
%struct.VEC_loop_p_gc = type { %struct.VEC_loop_p_base }
%struct.VEC_loop_p_base = type { i32, i32, [1 x %struct.loop*] }
%struct.double_int = type { i64, i64 }
%struct.nb_iter_bound = type { %union.gimple_statement_d*, %struct.double_int, i8, %struct.nb_iter_bound* }
%union.gimple_statement_d = type opaque
%struct.loop_exit = type { %struct.edge_def*, %struct.loop_exit*, %struct.loop_exit*, %struct.loop_exit* }
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type opaque
%struct.gimple_df = type opaque
%struct.loops = type { i32, %struct.VEC_loop_p_gc*, %struct.htab*, %struct.loop* }
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.VEC_temp_slot_p_gc = type { %struct.VEC_temp_slot_p_base }
%struct.VEC_temp_slot_p_base = type { i32, i32, [1 x %struct.temp_slot*] }
%struct.temp_slot = type opaque
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type { %struct.unnamed_section }
%struct.unnamed_section = type { %struct.section_common, void (i8*)*, i8*, %union.section* }
%struct.section_common = type { i32 }
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.rtl_opt_pass = type { %struct.opt_pass }
%struct.opt_pass = type { i32, i8*, i8 ()*, i32 ()*, %struct.opt_pass*, %struct.opt_pass*, i32, i32, i32, i32, i32, i32, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.gcc_target = type { %struct.asm_out, %struct.sched, %struct.vectorize, i32, void ()*, i8 (i64, i8*, i32)*, void ()*, i32 ()*, i32 ()*, i32 ()*, i32 ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %struct.attribute_spec*, i32 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void ()*, %union.tree_node* (i32, i8)*, %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32)*, %union.tree_node* (i32, %union.tree_node*, i8*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, i8)*, %union.tree_node* (i32, i8, i8)*, i8* (%union.tree_node*)*, void ()*, i32 (%union.tree_node*, i8*, i32)*, i8 ()*, i32 ()*, i8 (i8)*, i8 ()*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, i8 (i32, %struct.rtx_def*, i8)*, i8 (i32, %struct.rtx_def*)*, i64, i64, i8 (%struct.rtx_def*)*, i8 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*, i32)*, i8* (i8*)*, i64 (i32)*, i32 (i32)*, i32 (i32, i32)*, i8 (i32)*, %struct.addr_space, i8 (i32)*, i8 (i32)*, i8 (%struct.rtx_def*, i32, i32, i32*, i8)*, i32 (%struct.rtx_def*, i8)*, %struct.rtx_def* (%struct.rtx_def*)*, i32 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, void (%union.tree_node*)*, i8 (i32*, i32*)*, i32 (i32, i32)*, void ()*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, i8* (i64*)*, i8* (i8*, i64)*, i8* (i32)*, i8 ()*, %struct.rtx_def* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i32 (%union.tree_node*)*, void (i8*, %struct.rtx_def*, i32)*, i8 (%struct.stdarg_info*, %union.gimple_statement_d*)*, %union.tree_node* ()*, %union.tree_node* ()*, i8* (%struct.rtx_def*)*, i8 (%union.tree_node*)*, i64, %struct.calls, i8* (%union.tree_node*, %union.tree_node*)*, i8* (i32, %union.tree_node*)*, i8* (i32, %union.tree_node*, %union.tree_node*)*, i8* (%union.tree_node*)*, i8* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i32* ()*, i32 (i8, %struct.rtx_def*, i32, i32, %struct.secondary_reload_info*)*, void ()*, void ()*, i8 (i32)*, i32 ()*, i8 ()*, i8 (i32, i32)*, %struct.c, %struct.cxx, %struct.emutls, %struct.target_option_hooks, void (%struct.bitmap_head_def*)*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.asm_out = type { i8*, i8*, i8*, %struct.asm_int_op, %struct.asm_int_op, i8 (%struct.rtx_def*, i32, i32)*, void (%struct._IO_FILE*, i8*)*, void (%struct._IO_FILE*, %union.tree_node*)*, void (%struct._IO_FILE*, %union.tree_node*, i32, i32)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, %struct.rtx_def*)*, void (%struct._IO_FILE*, i8*, i64)*, i8 (%struct.rtx_def*)*, void (%union.tree_node*, i32)*, void (%struct._IO_FILE*, i64)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, i64)*, void ()*, void (i8*, i32, %union.tree_node*)*, i32 ()*, %union.section* (%union.tree_node*, i32, i64)*, %union.section* (i32, %struct.rtx_def*, i64)*, void (%union.tree_node*, i32)*, %union.section* (%union.tree_node*)*, void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i64, i64, %union.tree_node*)*, i8 (%union.tree_node*, i64, i64, %union.tree_node*)*, void ()*, void ()*, void ()*, void (%struct.rtx_def*)*, void (i8*)*, i32 (i32, i8*)*, i8*, void (%struct.rtx_def*)*, void (%struct._IO_FILE*, i32, %struct.rtx_def*)*, void (%struct._IO_FILE*, %struct.rtx_def*, %struct.rtx_def**, i32)*, void (%struct._IO_FILE*)* }
%struct.asm_int_op = type { i8*, i8*, i8*, i8* }
%struct.sched = type { i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)*, i32 ()*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, void (%struct.rtx_def*, %struct.rtx_def*)*, void ()*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, void ()*, void ()*, i32 ()*, i32 (%struct.rtx_def*)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32, i32, i32*)*, i8 (%struct._dep*, i32, i32)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def*, i32, i32)*, void ()*, i8* ()*, void (i8*, i8)*, void (i8*)*, void (i8*)*, void (i8*)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def**)*, i8 (i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, i8 (%struct.rtx_def*)*, void (%struct.spec_info_def*)*, i32 (%struct.rtx_def*)*, i32 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i32 (%struct.ddg*)* }
%struct._dep = type opaque
%struct.spec_info_def = type opaque
%struct.ddg = type opaque
%struct.vectorize = type { %union.tree_node* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (i32, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i32 (i8)*, i8 (%union.tree_node*, i8)*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (i32, %union.tree_node*, i32, i8)* }
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.addr_space = type { i32 (i8)*, i32 (i8)*, i8 (i32, i8)*, i8 (i32, %struct.rtx_def*, i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32, i8)*, i8 (i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %union.tree_node*, %union.tree_node*)* }
%struct.stdarg_info = type opaque
%struct.calls = type { i32 (%union.tree_node*, i32, i32*, %union.tree_node*, i32)*, i8 (%union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, i32)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, %struct.rtx_def* ()*, void (%struct.ix86_args*, i32, %union.tree_node*, i32*, i32)*, i8 (%struct.ix86_args*)*, i8 (%struct.ix86_args*)*, i8 (%union.tree_node*)*, i8 (i32, %union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i32 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i8* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, %union.tree_node*, i8)*, %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, i8 ()*, %struct.rtx_def* (%union.tree_node*, i8)*, void (%struct.rtx_def*, %union.tree_node*, %struct.rtx_def*)*, %struct.rtx_def* (%struct.rtx_def*)* }
%struct.secondary_reload_info = type { i32, i32, %struct.secondary_reload_info*, i32 }
%struct.c = type { i32 (i8)* }
%struct.cxx = type { %union.tree_node* ()*, i8 ()*, %union.tree_node* (%union.tree_node*)*, i8 ()*, i32 (%union.tree_node*, i32)*, i8 ()*, i8 ()*, void (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void (%union.tree_node*)* }
%struct.emutls = type { i8*, i8*, i8*, i8*, i8*, i8*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i8, i8 }
%struct.target_option_hooks = type { i8 (%union.tree_node*, %union.tree_node*, %union.tree_node*, i32)*, void (%struct.cl_target_option*)*, void (%struct.cl_target_option*)*, void (%struct._IO_FILE*, i32, %struct.cl_target_option*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)* }
%struct.cl_target_option = type { i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8 }
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.df = type { [8 x %struct.dataflow*], [8 x %struct.dataflow*], %struct.bitmap_head_def*, %struct.df_ref_info, %struct.df_ref_info, %struct.df_reg_info**, %struct.df_reg_info**, %struct.df_reg_info**, i32, i32, %struct.df_insn_info**, i32, i32, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, i32*, i32*, i32, i32, i32*, i32, i8, i8, i8 }
%struct.dataflow = type { %struct.df_problem*, i8**, i32, %struct.alloc_pool_def*, %struct.bitmap_head_def*, i8*, i32, i8, i8, i8 }
%struct.df_problem = type { i32, i32, void (%struct.bitmap_head_def*)*, void (%struct.bitmap_head_def*)*, void (%struct.basic_block_def*, i8*)*, void (%struct.bitmap_head_def*)*, void (%struct.bitmap_head_def*)*, void (%struct.dataflow*, %struct.bitmap_head_def*, i32*, i32)*, void (%struct.basic_block_def*)*, void (%struct.edge_def*)*, i8 (i32)*, void (%struct.bitmap_head_def*)*, void ()*, void ()*, void (%struct._IO_FILE*)*, void (%struct.basic_block_def*, %struct._IO_FILE*)*, void (%struct.basic_block_def*, %struct._IO_FILE*)*, void ()*, void ()*, %struct.df_problem*, i32, i8 }
%struct.alloc_pool_def = type { i8*, i64, %struct.alloc_pool_list_def*, i8*, i64, i64, i64, i64, %struct.alloc_pool_list_def*, i64, i64 }
%struct.alloc_pool_list_def = type { %struct.alloc_pool_list_def* }
%struct.df_ref_info = type { %union.df_ref_d**, i32*, i32*, i32, i32, i32, i32 }
%union.df_ref_d = type { %struct.df_extract_ref }
%struct.df_extract_ref = type { %struct.df_regular_ref, i32, i32, i32 }
%struct.df_regular_ref = type { %struct.df_base_ref, %struct.rtx_def** }
%struct.df_base_ref = type { i32, %struct.rtx_def*, %struct.df_link*, %struct.df_insn_info*, %union.df_ref_d*, %union.df_ref_d*, i32, i32, i32 }
%struct.df_link = type { %union.df_ref_d*, %struct.df_link* }
%struct.df_insn_info = type { %struct.rtx_def*, %union.df_ref_d**, %union.df_ref_d**, %union.df_ref_d**, %struct.df_mw_hardreg**, i32 }
%struct.df_mw_hardreg = type { %struct.rtx_def*, i32, i32, i32, i32 }
%struct.df_reg_info = type { %union.df_ref_d*, i32 }
%struct.cfg_hooks = type { i8*, i32 ()*, void (%struct.basic_block_def*, %struct._IO_FILE*, i32, i32)*, %struct.basic_block_def* (i8*, i8*, %struct.basic_block_def*)*, %struct.edge_def* (%struct.edge_def*, %struct.basic_block_def*)*, %struct.basic_block_def* (%struct.edge_def*, %struct.basic_block_def*)*, i8 (%struct.edge_def*)*, void (%struct.basic_block_def*)*, %struct.basic_block_def* (%struct.basic_block_def*, i8*)*, i8 (%struct.basic_block_def*, %struct.basic_block_def*)*, i8 (%struct.basic_block_def*, %struct.basic_block_def*)*, void (%struct.basic_block_def*, %struct.basic_block_def*)*, void (%struct.edge_def*, i32, i32)*, i8 (%struct.basic_block_def*, i32)*, i8 (%struct.basic_block_def*)*, %struct.basic_block_def* (%struct.basic_block_def*)*, %struct.basic_block_def* (%struct.edge_def*)*, void (%struct.edge_def*)*, void (%struct.edge_def*)*, i8 (%struct.basic_block_def*)*, i8 (%struct.basic_block_def*)*, i32 (%struct.simple_bitmap_def*)*, void (%struct.edge_def*)*, void (%struct.edge_def*)*, i8 (%struct.loop*, %struct.edge_def*, i32, %struct.simple_bitmap_def*, %struct.edge_def*, %struct.VEC_edge_heap**, i32)*, void (%struct.basic_block_def*, %struct.basic_block_def*, %struct.basic_block_def*, i8*)*, void (%struct.basic_block_def*, %struct.basic_block_def*, %struct.basic_block_def*, %struct.edge_def*)*, void (%struct.basic_block_def*, %struct.edge_def**, %struct.edge_def**)*, void (%struct.edge_def*)* }
%struct.simple_bitmap_def = type { i8*, i32, i32, [1 x i64] }
%struct.VEC_edge_heap = type { %struct.VEC_edge_base }
%struct.rtvec_def = type { i32, [1 x %struct.rtx_def*] }
%struct.rtl_bb_info = type { %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32 }
%struct.edge_iterator = type { i32, %struct.VEC_edge_gc** }

@x_rtl = external dso_local global %struct.rtl_data, align 8
@.str = private unnamed_addr constant [9 x i8] c"cfgrtl.c\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@cfun = external dso_local global %struct.function*, align 8
@.str.2 = private unnamed_addr constant [10 x i8] c"*free_cfg\00", align 1
@pass_free_cfg = dso_local global %struct.rtl_opt_pass { %struct.opt_pass { i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i32 0, i32 0), i8 ()* null, i32 ()* @rest_of_pass_free_cfg, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 0, i32 0, i32 0, i32 8, i32 0, i32 0 } }, align 8, !dbg !0
@optimize = external dso_local global i32, align 4
@reload_completed = external dso_local global i32, align 4
@dump_file = external dso_local global %struct._IO_FILE*, align 8
@.str.3 = private unnamed_addr constant [19 x i8] c"Removing jump %i.\0A\00", align 1
@.str.4 = private unnamed_addr constant [36 x i8] c"Redirecting jump %i from %i to %i.\0A\00", align 1
@.str.5 = private unnamed_addr constant [30 x i8] c"Replacing insn %i by jump %i\0A\00", align 1
@flag_reorder_blocks_and_partition = external dso_local global i32, align 4
@targetm = external dso_local global %struct.gcc_target, align 8
@.str.6 = private unnamed_addr constant [7 x i8] c"(nil)\0A\00", align 1
@df = external dso_local global %struct.df*, align 8
@.str.7 = private unnamed_addr constant [26 x i8] c";; Start of basic block (\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c" %d\00", align 1
@.str.9 = private unnamed_addr constant [9 x i8] c") -> %d\0A\00", align 1
@.str.10 = private unnamed_addr constant [14 x i8] c";; Pred edge \00", align 1
@.str.11 = private unnamed_addr constant [37 x i8] c";; Insn is not within a basic block\0A\00", align 1
@.str.12 = private unnamed_addr constant [37 x i8] c";; Insn is in multiple basic blocks\0A\00", align 1
@.str.13 = private unnamed_addr constant [30 x i8] c";; End of basic block %d -> (\00", align 1
@.str.14 = private unnamed_addr constant [3 x i8] c")\0A\00", align 1
@.str.15 = private unnamed_addr constant [14 x i8] c";; Succ edge \00", align 1
@.str.16 = private unnamed_addr constant [36 x i8] c"\0A;; Insns in epilogue delay list:\0A\0A\00", align 1
@.str.17 = private unnamed_addr constant [25 x i8] c"Purged edges from bb %i\0A\00", align 1
@.str.18 = private unnamed_addr constant [38 x i8] c"Purged non-fallthru edges from bb %i\0A\00", align 1
@.str.19 = private unnamed_addr constant [4 x i8] c"rtl\00", align 1
@rtl_cfg_hooks = dso_local global %struct.cfg_hooks { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.19, i32 0, i32 0), i32 ()* @rtl_verify_flow_info, void (%struct.basic_block_def*, %struct._IO_FILE*, i32, i32)* @rtl_dump_bb, %struct.basic_block_def* (i8*, i8*, %struct.basic_block_def*)* @rtl_create_basic_block, %struct.edge_def* (%struct.edge_def*, %struct.basic_block_def*)* @rtl_redirect_edge_and_branch, %struct.basic_block_def* (%struct.edge_def*, %struct.basic_block_def*)* @rtl_redirect_edge_and_branch_force, i8 (%struct.edge_def*)* @rtl_can_remove_branch_p, void (%struct.basic_block_def*)* @rtl_delete_block, %struct.basic_block_def* (%struct.basic_block_def*, i8*)* @rtl_split_block, i8 (%struct.basic_block_def*, %struct.basic_block_def*)* @rtl_move_block_after, i8 (%struct.basic_block_def*, %struct.basic_block_def*)* @rtl_can_merge_blocks, void (%struct.basic_block_def*, %struct.basic_block_def*)* @rtl_merge_blocks, void (%struct.edge_def*, i32, i32)* @rtl_predict_edge, i8 (%struct.basic_block_def*, i32)* @rtl_predicted_by_p, i8 (%struct.basic_block_def*)* null, %struct.basic_block_def* (%struct.basic_block_def*)* null, %struct.basic_block_def* (%struct.edge_def*)* @rtl_split_edge, void (%struct.edge_def*)* @rtl_make_forwarder_block, void (%struct.edge_def*)* @rtl_tidy_fallthru_edge, i8 (%struct.basic_block_def*)* @rtl_block_ends_with_call_p, i8 (%struct.basic_block_def*)* @rtl_block_ends_with_condjump_p, i32 (%struct.simple_bitmap_def*)* @rtl_flow_call_edges_add, void (%struct.edge_def*)* null, void (%struct.edge_def*)* null, i8 (%struct.loop*, %struct.edge_def*, i32, %struct.simple_bitmap_def*, %struct.edge_def*, %struct.VEC_edge_heap**, i32)* null, void (%struct.basic_block_def*, %struct.basic_block_def*, %struct.basic_block_def*, i8*)* null, void (%struct.basic_block_def*, %struct.basic_block_def*, %struct.basic_block_def*, %struct.edge_def*)* null, void (%struct.basic_block_def*, %struct.edge_def**, %struct.edge_def**)* null, void (%struct.edge_def*)* null }, align 8, !dbg !2138
@.str.20 = private unnamed_addr constant [15 x i8] c"cfglayout mode\00", align 1
@cfg_layout_rtl_cfg_hooks = dso_local global %struct.cfg_hooks { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.20, i32 0, i32 0), i32 ()* @rtl_verify_flow_info_1, void (%struct.basic_block_def*, %struct._IO_FILE*, i32, i32)* @rtl_dump_bb, %struct.basic_block_def* (i8*, i8*, %struct.basic_block_def*)* @cfg_layout_create_basic_block, %struct.edge_def* (%struct.edge_def*, %struct.basic_block_def*)* @cfg_layout_redirect_edge_and_branch, %struct.basic_block_def* (%struct.edge_def*, %struct.basic_block_def*)* @cfg_layout_redirect_edge_and_branch_force, i8 (%struct.edge_def*)* @rtl_can_remove_branch_p, void (%struct.basic_block_def*)* @cfg_layout_delete_block, %struct.basic_block_def* (%struct.basic_block_def*, i8*)* @cfg_layout_split_block, i8 (%struct.basic_block_def*, %struct.basic_block_def*)* @rtl_move_block_after, i8 (%struct.basic_block_def*, %struct.basic_block_def*)* @cfg_layout_can_merge_blocks_p, void (%struct.basic_block_def*, %struct.basic_block_def*)* @cfg_layout_merge_blocks, void (%struct.edge_def*, i32, i32)* @rtl_predict_edge, i8 (%struct.basic_block_def*, i32)* @rtl_predicted_by_p, i8 (%struct.basic_block_def*)* @cfg_layout_can_duplicate_bb_p, %struct.basic_block_def* (%struct.basic_block_def*)* @cfg_layout_duplicate_bb, %struct.basic_block_def* (%struct.edge_def*)* @cfg_layout_split_edge, void (%struct.edge_def*)* @rtl_make_forwarder_block, void (%struct.edge_def*)* null, i8 (%struct.basic_block_def*)* @rtl_block_ends_with_call_p, i8 (%struct.basic_block_def*)* @rtl_block_ends_with_condjump_p, i32 (%struct.simple_bitmap_def*)* @rtl_flow_call_edges_add, void (%struct.edge_def*)* null, void (%struct.edge_def*)* null, i8 (%struct.loop*, %struct.edge_def*, i32, %struct.simple_bitmap_def*, %struct.edge_def*, %struct.VEC_edge_heap**, i32)* @duplicate_loop_to_header_edge, void (%struct.basic_block_def*, %struct.basic_block_def*, %struct.basic_block_def*, i8*)* @rtl_lv_add_condition_to_bb, void (%struct.basic_block_def*, %struct.basic_block_def*, %struct.basic_block_def*, %struct.edge_def*)* null, void (%struct.basic_block_def*, %struct.edge_def**, %struct.edge_def**)* @rtl_extract_cond_bb_edges, void (%struct.edge_def*)* null }, align 8, !dbg !2262
@.str.21 = private unnamed_addr constant [16 x i8] c"./basic-block.h\00", align 1
@.str.22 = private unnamed_addr constant [54 x i8] c"insn %d outside of basic blocks has non-NULL bb field\00", align 1
@.str.23 = private unnamed_addr constant [54 x i8] c"end insn %d for block %d not found in the insn stream\00", align 1
@.str.24 = private unnamed_addr constant [48 x i8] c"insn %d is in multiple basic blocks (%d and %d)\00", align 1
@.str.25 = private unnamed_addr constant [55 x i8] c"head insn %d for block %d not found in the insn stream\00", align 1
@.str.26 = private unnamed_addr constant [31 x i8] c"missing barrier after block %i\00", align 1
@.str.27 = private unnamed_addr constant [55 x i8] c"verify_flow_info: Incorrect blocks for fallthru %i->%i\00", align 1
@.str.28 = private unnamed_addr constant [44 x i8] c"verify_flow_info: Incorrect fallthru %i->%i\00", align 1
@.str.29 = private unnamed_addr constant [32 x i8] c"wrong insn in the fallthru edge\00", align 1
@.str.30 = private unnamed_addr constant [41 x i8] c"basic blocks not laid down consecutively\00", align 1
@.str.31 = private unnamed_addr constant [25 x i8] c"insn outside basic block\00", align 1
@.str.32 = private unnamed_addr constant [31 x i8] c"return not followed by barrier\00", align 1
@.str.33 = private unnamed_addr constant [61 x i8] c"number of bb notes in insn chain (%d) != n_basic_blocks (%d)\00", align 1
@currently_expanding_to_rtl = external dso_local global i32, align 4
@.str.34 = private unnamed_addr constant [30 x i8] c"Edge %i->%i redirected to %i\0A\00", align 1
@global_rtl = external dso_local global [11 x %struct.rtx_def*], align 16
@.str.35 = private unnamed_addr constant [19 x i8] c"deleting block %d\0A\00", align 1
@.str.36 = private unnamed_addr constant [32 x i8] c"merging block %d into block %d\0A\00", align 1
@const_int_rtx = external dso_local global [129 x %struct.rtx_def*], align 16
@.str.37 = private unnamed_addr constant [33 x i8] c"BB_RTL flag not set for block %d\00", align 1
@.str.38 = private unnamed_addr constant [48 x i8] c"insn %d basic block pointer is %d, should be %d\00", align 1
@.str.39 = private unnamed_addr constant [52 x i8] c"insn %d in header of bb %d has non-NULL basic block\00", align 1
@.str.40 = private unnamed_addr constant [52 x i8] c"insn %d in footer of bb %d has non-NULL basic block\00", align 1
@.str.41 = private unnamed_addr constant [56 x i8] c"verify_flow_info: REG_BR_PROB does not match cfg %wi %i\00", align 1
@.str.42 = private unnamed_addr constant [47 x i8] c"fallthru edge crosses section boundary (bb %i)\00", align 1
@.str.43 = private unnamed_addr constant [47 x i8] c"missing REG_EH_REGION note in the end of bb %i\00", align 1
@.str.44 = private unnamed_addr constant [21 x i8] c"too many eh edges %i\00", align 1
@.str.45 = private unnamed_addr constant [42 x i8] c"too many outgoing branch edges from bb %i\00", align 1
@.str.46 = private unnamed_addr constant [42 x i8] c"fallthru edge after unconditional jump %i\00", align 1
@.str.47 = private unnamed_addr constant [57 x i8] c"wrong number of branch edges after unconditional jump %i\00", align 1
@.str.48 = private unnamed_addr constant [55 x i8] c"wrong amount of branch edges after conditional jump %i\00", align 1
@.str.49 = private unnamed_addr constant [38 x i8] c"call edges for non-call insn in bb %i\00", align 1
@.str.50 = private unnamed_addr constant [39 x i8] c"abnormal edges for no purpose in bb %i\00", align 1
@.str.51 = private unnamed_addr constant [57 x i8] c"insn %d inside basic block %d but block_for_insn is NULL\00", align 1
@.str.52 = private unnamed_addr constant [55 x i8] c"insn %d inside basic block %d but block_for_insn is %i\00", align 1
@.str.53 = private unnamed_addr constant [46 x i8] c"NOTE_INSN_BASIC_BLOCK is missing for block %d\00", align 1
@.str.54 = private unnamed_addr constant [53 x i8] c"NOTE_INSN_BASIC_BLOCK %d in middle of basic block %d\00", align 1
@.str.55 = private unnamed_addr constant [19 x i8] c"in basic block %d:\00", align 1
@.str.56 = private unnamed_addr constant [39 x i8] c"flow control insn inside a basic block\00", align 1
@.str.57 = private unnamed_addr constant [41 x i8] c"Redirecting entry edge from bb %i to %i\0A\00", align 1
@.str.58 = private unnamed_addr constant [59 x i8] c"Fallthru edge unified with branch %i->%i redirected to %i\0A\00", align 1
@.str.59 = private unnamed_addr constant [39 x i8] c"Fallthru edge %i->%i redirected to %i\0A\00", align 1
@cfg_layout_function_footer = external dso_local global %struct.rtx_def*, align 8
@.str.60 = private unnamed_addr constant [26 x i8] c"Merged blocks %d and %d.\0A\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @delete_insn(%struct.rtx_def* %insn) #0 !dbg !2294 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %next = alloca %struct.rtx_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  %really_delete = alloca i8, align 1
  %name = alloca i8*, align 8
  %pat = alloca %struct.rtx_def*, align 8
  %diff_vec_p = alloca i32, align 4
  %len = alloca i32, align 4
  %i = alloca i32, align 4
  %label = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !2297, metadata !DIExpression()), !dbg !2298
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %next, metadata !2299, metadata !DIExpression()), !dbg !2300
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2301
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !2301
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !2301
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !2301
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !2301
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !2301
  store %struct.rtx_def* %1, %struct.rtx_def** %next, align 8, !dbg !2300
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !2302, metadata !DIExpression()), !dbg !2303
  call void @llvm.dbg.declare(metadata i8* %really_delete, metadata !2304, metadata !DIExpression()), !dbg !2305
  store i8 1, i8* %really_delete, align 1, !dbg !2305
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2306
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !2306
  %bf.load = load i32, i32* %3, align 8, !dbg !2306
  %bf.clear = and i32 %bf.load, 65535, !dbg !2306
  %cmp = icmp eq i32 %bf.clear, 12, !dbg !2306
  br i1 %cmp, label %if.then, label %if.end14, !dbg !2308

if.then:                                          ; preds = %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2309
  %call = call i32 @can_delete_label_p(%struct.rtx_def* %4), !dbg !2312
  %tobool = icmp ne i32 %call, 0, !dbg !2312
  br i1 %tobool, label %if.end, label %if.then1, !dbg !2313

if.then1:                                         ; preds = %if.then
  call void @llvm.dbg.declare(metadata i8** %name, metadata !2314, metadata !DIExpression()), !dbg !2316
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2317
  %u2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !2317
  %fld3 = bitcast %union.u* %u2 to [1 x %union.rtunion_def]*, !dbg !2317
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3, i64 0, i64 7, !dbg !2317
  %rt_str = bitcast %union.rtunion_def* %arrayidx4 to i8**, !dbg !2317
  %6 = load i8*, i8** %rt_str, align 8, !dbg !2317
  store i8* %6, i8** %name, align 8, !dbg !2316
  store i8 0, i8* %really_delete, align 1, !dbg !2318
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2319
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !2319
  %bf.load5 = load i32, i32* %8, align 8, !dbg !2319
  %bf.clear6 = and i32 %bf.load5, -65536, !dbg !2319
  %bf.set = or i32 %bf.clear6, 13, !dbg !2319
  store i32 %bf.set, i32* %8, align 8, !dbg !2319
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2320
  %u7 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !2320
  %fld8 = bitcast %union.u* %u7 to [1 x %union.rtunion_def]*, !dbg !2320
  %arrayidx9 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld8, i64 0, i64 5, !dbg !2320
  %rt_int = bitcast %union.rtunion_def* %arrayidx9 to i32*, !dbg !2320
  store i32 1, i32* %rt_int, align 8, !dbg !2321
  %10 = load i8*, i8** %name, align 8, !dbg !2322
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2323
  %u10 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !2323
  %fld11 = bitcast %union.u* %u10 to [1 x %union.rtunion_def]*, !dbg !2323
  %arrayidx12 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld11, i64 0, i64 4, !dbg !2323
  %rt_str13 = bitcast %union.rtunion_def* %arrayidx12 to i8**, !dbg !2323
  store i8* %10, i8** %rt_str13, align 8, !dbg !2324
  br label %if.end, !dbg !2325

if.end:                                           ; preds = %if.then1, %if.then
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2326
  call void @remove_node_from_expr_list(%struct.rtx_def* %12, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 10)), !dbg !2327
  br label %if.end14, !dbg !2328

if.end14:                                         ; preds = %if.end, %entry
  %13 = load i8, i8* %really_delete, align 1, !dbg !2329
  %tobool15 = icmp ne i8 %13, 0, !dbg !2329
  br i1 %tobool15, label %if.then16, label %if.end23, !dbg !2331

if.then16:                                        ; preds = %if.end14
  %14 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2332
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !2332
  %bf.load17 = load i32, i32* %15, align 8, !dbg !2332
  %bf.lshr = lshr i32 %bf.load17, 27, !dbg !2332
  %bf.clear18 = and i32 %bf.lshr, 1, !dbg !2332
  %tobool19 = icmp ne i32 %bf.clear18, 0, !dbg !2332
  br i1 %tobool19, label %cond.true, label %cond.false, !dbg !2332

cond.true:                                        ; preds = %if.then16
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 142, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2332
  br label %cond.end, !dbg !2332

cond.false:                                       ; preds = %if.then16
  br label %cond.end, !dbg !2332

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !2332
  %16 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2334
  call void @remove_insn(%struct.rtx_def* %16), !dbg !2335
  %17 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2336
  %18 = bitcast %struct.rtx_def* %17 to i32*, !dbg !2336
  %bf.load20 = load i32, i32* %18, align 8, !dbg !2337
  %bf.clear21 = and i32 %bf.load20, -134217729, !dbg !2337
  %bf.set22 = or i32 %bf.clear21, 134217728, !dbg !2337
  store i32 %bf.set22, i32* %18, align 8, !dbg !2337
  br label %if.end23, !dbg !2338

if.end23:                                         ; preds = %cond.end, %if.end14
  %19 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2339
  %20 = bitcast %struct.rtx_def* %19 to i32*, !dbg !2339
  %bf.load24 = load i32, i32* %20, align 8, !dbg !2339
  %bf.clear25 = and i32 %bf.load24, 65535, !dbg !2339
  %cmp26 = icmp eq i32 %bf.clear25, 9, !dbg !2339
  br i1 %cmp26, label %if.then27, label %if.end68, !dbg !2341

if.then27:                                        ; preds = %if.end23
  %21 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2342
  %u28 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !2342
  %fld29 = bitcast %union.u* %u28 to [1 x %union.rtunion_def]*, !dbg !2342
  %arrayidx30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld29, i64 0, i64 8, !dbg !2342
  %rt_rtx31 = bitcast %union.rtunion_def* %arrayidx30 to %struct.rtx_def**, !dbg !2342
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx31, align 8, !dbg !2342
  %tobool32 = icmp ne %struct.rtx_def* %22, null, !dbg !2342
  br i1 %tobool32, label %land.lhs.true, label %if.end49, !dbg !2345

land.lhs.true:                                    ; preds = %if.then27
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2346
  %u33 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1, !dbg !2346
  %fld34 = bitcast %union.u* %u33 to [1 x %union.rtunion_def]*, !dbg !2346
  %arrayidx35 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld34, i64 0, i64 8, !dbg !2346
  %rt_rtx36 = bitcast %union.rtunion_def* %arrayidx35 to %struct.rtx_def**, !dbg !2346
  %24 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx36, align 8, !dbg !2346
  %25 = bitcast %struct.rtx_def* %24 to i32*, !dbg !2346
  %bf.load37 = load i32, i32* %25, align 8, !dbg !2346
  %bf.clear38 = and i32 %bf.load37, 65535, !dbg !2346
  %cmp39 = icmp eq i32 %bf.clear38, 12, !dbg !2346
  br i1 %cmp39, label %if.then40, label %if.end49, !dbg !2347

if.then40:                                        ; preds = %land.lhs.true
  %26 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2348
  %u41 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1, !dbg !2348
  %fld42 = bitcast %union.u* %u41 to [1 x %union.rtunion_def]*, !dbg !2348
  %arrayidx43 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld42, i64 0, i64 8, !dbg !2348
  %rt_rtx44 = bitcast %union.rtunion_def* %arrayidx43 to %struct.rtx_def**, !dbg !2348
  %27 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx44, align 8, !dbg !2348
  %u45 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1, !dbg !2348
  %fld46 = bitcast %union.u* %u45 to [1 x %union.rtunion_def]*, !dbg !2348
  %arrayidx47 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld46, i64 0, i64 4, !dbg !2348
  %rt_int48 = bitcast %union.rtunion_def* %arrayidx47 to i32*, !dbg !2348
  %28 = load i32, i32* %rt_int48, align 8, !dbg !2349
  %dec = add nsw i32 %28, -1, !dbg !2349
  store i32 %dec, i32* %rt_int48, align 8, !dbg !2349
  br label %if.end49, !dbg !2348

if.end49:                                         ; preds = %if.then40, %land.lhs.true, %if.then27
  br label %while.cond, !dbg !2350

while.cond:                                       ; preds = %while.body, %if.end49
  %29 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2351
  %call50 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %29, i32 9, %struct.rtx_def* null), !dbg !2352
  store %struct.rtx_def* %call50, %struct.rtx_def** %note, align 8, !dbg !2353
  %cmp51 = icmp ne %struct.rtx_def* %call50, null, !dbg !2354
  br i1 %cmp51, label %land.rhs, label %land.end, !dbg !2355

land.rhs:                                         ; preds = %while.cond
  %30 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !2356
  %u52 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1, !dbg !2356
  %fld53 = bitcast %union.u* %u52 to [1 x %union.rtunion_def]*, !dbg !2356
  %arrayidx54 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld53, i64 0, i64 0, !dbg !2356
  %rt_rtx55 = bitcast %union.rtunion_def* %arrayidx54 to %struct.rtx_def**, !dbg !2356
  %31 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx55, align 8, !dbg !2356
  %32 = bitcast %struct.rtx_def* %31 to i32*, !dbg !2356
  %bf.load56 = load i32, i32* %32, align 8, !dbg !2356
  %bf.clear57 = and i32 %bf.load56, 65535, !dbg !2356
  %cmp58 = icmp eq i32 %bf.clear57, 12, !dbg !2356
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %33 = phi i1 [ false, %while.cond ], [ %cmp58, %land.rhs ], !dbg !2357
  br i1 %33, label %while.body, label %while.end, !dbg !2350

while.body:                                       ; preds = %land.end
  %34 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !2358
  %u59 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %34, i32 0, i32 1, !dbg !2358
  %fld60 = bitcast %union.u* %u59 to [1 x %union.rtunion_def]*, !dbg !2358
  %arrayidx61 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld60, i64 0, i64 0, !dbg !2358
  %rt_rtx62 = bitcast %union.rtunion_def* %arrayidx61 to %struct.rtx_def**, !dbg !2358
  %35 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx62, align 8, !dbg !2358
  %u63 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1, !dbg !2358
  %fld64 = bitcast %union.u* %u63 to [1 x %union.rtunion_def]*, !dbg !2358
  %arrayidx65 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld64, i64 0, i64 4, !dbg !2358
  %rt_int66 = bitcast %union.rtunion_def* %arrayidx65 to i32*, !dbg !2358
  %36 = load i32, i32* %rt_int66, align 8, !dbg !2360
  %dec67 = add nsw i32 %36, -1, !dbg !2360
  store i32 %dec67, i32* %rt_int66, align 8, !dbg !2360
  %37 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2361
  %38 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !2362
  call void @remove_note(%struct.rtx_def* %37, %struct.rtx_def* %38), !dbg !2363
  br label %while.cond, !dbg !2350, !llvm.loop !2364

while.end:                                        ; preds = %land.end
  br label %if.end68, !dbg !2366

if.end68:                                         ; preds = %while.end, %if.end23
  br label %while.cond69, !dbg !2367

while.cond69:                                     ; preds = %while.body81, %if.end68
  %39 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2368
  %call70 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %39, i32 10, %struct.rtx_def* null), !dbg !2369
  store %struct.rtx_def* %call70, %struct.rtx_def** %note, align 8, !dbg !2370
  %cmp71 = icmp ne %struct.rtx_def* %call70, null, !dbg !2371
  br i1 %cmp71, label %land.rhs72, label %land.end80, !dbg !2372

land.rhs72:                                       ; preds = %while.cond69
  %40 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !2373
  %u73 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %40, i32 0, i32 1, !dbg !2373
  %fld74 = bitcast %union.u* %u73 to [1 x %union.rtunion_def]*, !dbg !2373
  %arrayidx75 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld74, i64 0, i64 0, !dbg !2373
  %rt_rtx76 = bitcast %union.rtunion_def* %arrayidx75 to %struct.rtx_def**, !dbg !2373
  %41 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx76, align 8, !dbg !2373
  %42 = bitcast %struct.rtx_def* %41 to i32*, !dbg !2373
  %bf.load77 = load i32, i32* %42, align 8, !dbg !2373
  %bf.clear78 = and i32 %bf.load77, 65535, !dbg !2373
  %cmp79 = icmp eq i32 %bf.clear78, 12, !dbg !2373
  br label %land.end80

land.end80:                                       ; preds = %land.rhs72, %while.cond69
  %43 = phi i1 [ false, %while.cond69 ], [ %cmp79, %land.rhs72 ], !dbg !2374
  br i1 %43, label %while.body81, label %while.end91, !dbg !2367

while.body81:                                     ; preds = %land.end80
  %44 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !2375
  %u82 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %44, i32 0, i32 1, !dbg !2375
  %fld83 = bitcast %union.u* %u82 to [1 x %union.rtunion_def]*, !dbg !2375
  %arrayidx84 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld83, i64 0, i64 0, !dbg !2375
  %rt_rtx85 = bitcast %union.rtunion_def* %arrayidx84 to %struct.rtx_def**, !dbg !2375
  %45 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx85, align 8, !dbg !2375
  %u86 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1, !dbg !2375
  %fld87 = bitcast %union.u* %u86 to [1 x %union.rtunion_def]*, !dbg !2375
  %arrayidx88 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld87, i64 0, i64 4, !dbg !2375
  %rt_int89 = bitcast %union.rtunion_def* %arrayidx88 to i32*, !dbg !2375
  %46 = load i32, i32* %rt_int89, align 8, !dbg !2377
  %dec90 = add nsw i32 %46, -1, !dbg !2377
  store i32 %dec90, i32* %rt_int89, align 8, !dbg !2377
  %47 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2378
  %48 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !2379
  call void @remove_note(%struct.rtx_def* %47, %struct.rtx_def* %48), !dbg !2380
  br label %while.cond69, !dbg !2367, !llvm.loop !2381

while.end91:                                      ; preds = %land.end80
  %49 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2383
  %50 = bitcast %struct.rtx_def* %49 to i32*, !dbg !2383
  %bf.load92 = load i32, i32* %50, align 8, !dbg !2383
  %bf.clear93 = and i32 %bf.load92, 65535, !dbg !2383
  %cmp94 = icmp eq i32 %bf.clear93, 9, !dbg !2383
  br i1 %cmp94, label %land.lhs.true95, label %if.end149, !dbg !2383

land.lhs.true95:                                  ; preds = %while.end91
  %51 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2383
  %u96 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %51, i32 0, i32 1, !dbg !2383
  %fld97 = bitcast %union.u* %u96 to [1 x %union.rtunion_def]*, !dbg !2383
  %arrayidx98 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld97, i64 0, i64 5, !dbg !2383
  %rt_rtx99 = bitcast %union.rtunion_def* %arrayidx98 to %struct.rtx_def**, !dbg !2383
  %52 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx99, align 8, !dbg !2383
  %53 = bitcast %struct.rtx_def* %52 to i32*, !dbg !2383
  %bf.load100 = load i32, i32* %53, align 8, !dbg !2383
  %bf.clear101 = and i32 %bf.load100, 65535, !dbg !2383
  %cmp102 = icmp eq i32 %bf.clear101, 20, !dbg !2383
  br i1 %cmp102, label %if.then110, label %lor.lhs.false, !dbg !2383

lor.lhs.false:                                    ; preds = %land.lhs.true95
  %54 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2383
  %u103 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %54, i32 0, i32 1, !dbg !2383
  %fld104 = bitcast %union.u* %u103 to [1 x %union.rtunion_def]*, !dbg !2383
  %arrayidx105 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld104, i64 0, i64 5, !dbg !2383
  %rt_rtx106 = bitcast %union.rtunion_def* %arrayidx105 to %struct.rtx_def**, !dbg !2383
  %55 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx106, align 8, !dbg !2383
  %56 = bitcast %struct.rtx_def* %55 to i32*, !dbg !2383
  %bf.load107 = load i32, i32* %56, align 8, !dbg !2383
  %bf.clear108 = and i32 %bf.load107, 65535, !dbg !2383
  %cmp109 = icmp eq i32 %bf.clear108, 21, !dbg !2383
  br i1 %cmp109, label %if.then110, label %if.end149, !dbg !2385

if.then110:                                       ; preds = %lor.lhs.false, %land.lhs.true95
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pat, metadata !2386, metadata !DIExpression()), !dbg !2388
  %57 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2389
  %u111 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %57, i32 0, i32 1, !dbg !2389
  %fld112 = bitcast %union.u* %u111 to [1 x %union.rtunion_def]*, !dbg !2389
  %arrayidx113 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld112, i64 0, i64 5, !dbg !2389
  %rt_rtx114 = bitcast %union.rtunion_def* %arrayidx113 to %struct.rtx_def**, !dbg !2389
  %58 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx114, align 8, !dbg !2389
  store %struct.rtx_def* %58, %struct.rtx_def** %pat, align 8, !dbg !2388
  call void @llvm.dbg.declare(metadata i32* %diff_vec_p, metadata !2390, metadata !DIExpression()), !dbg !2391
  %59 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2392
  %u115 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %59, i32 0, i32 1, !dbg !2392
  %fld116 = bitcast %union.u* %u115 to [1 x %union.rtunion_def]*, !dbg !2392
  %arrayidx117 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld116, i64 0, i64 5, !dbg !2392
  %rt_rtx118 = bitcast %union.rtunion_def* %arrayidx117 to %struct.rtx_def**, !dbg !2392
  %60 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx118, align 8, !dbg !2392
  %61 = bitcast %struct.rtx_def* %60 to i32*, !dbg !2392
  %bf.load119 = load i32, i32* %61, align 8, !dbg !2392
  %bf.clear120 = and i32 %bf.load119, 65535, !dbg !2392
  %cmp121 = icmp eq i32 %bf.clear120, 21, !dbg !2393
  %conv = zext i1 %cmp121 to i32, !dbg !2393
  store i32 %conv, i32* %diff_vec_p, align 4, !dbg !2391
  call void @llvm.dbg.declare(metadata i32* %len, metadata !2394, metadata !DIExpression()), !dbg !2395
  %62 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !2396
  %u122 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %62, i32 0, i32 1, !dbg !2396
  %fld123 = bitcast %union.u* %u122 to [1 x %union.rtunion_def]*, !dbg !2396
  %63 = load i32, i32* %diff_vec_p, align 4, !dbg !2396
  %idxprom = sext i32 %63 to i64, !dbg !2396
  %arrayidx124 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld123, i64 0, i64 %idxprom, !dbg !2396
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx124 to %struct.rtvec_def**, !dbg !2396
  %64 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !2396
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %64, i32 0, i32 0, !dbg !2396
  %65 = load i32, i32* %num_elem, align 8, !dbg !2396
  store i32 %65, i32* %len, align 4, !dbg !2395
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2397, metadata !DIExpression()), !dbg !2398
  store i32 0, i32* %i, align 4, !dbg !2399
  br label %for.cond, !dbg !2401

for.cond:                                         ; preds = %for.inc, %if.then110
  %66 = load i32, i32* %i, align 4, !dbg !2402
  %67 = load i32, i32* %len, align 4, !dbg !2404
  %cmp125 = icmp slt i32 %66, %67, !dbg !2405
  br i1 %cmp125, label %for.body, label %for.end, !dbg !2406

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %label, metadata !2407, metadata !DIExpression()), !dbg !2409
  %68 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !2410
  %u127 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %68, i32 0, i32 1, !dbg !2410
  %fld128 = bitcast %union.u* %u127 to [1 x %union.rtunion_def]*, !dbg !2410
  %69 = load i32, i32* %diff_vec_p, align 4, !dbg !2410
  %idxprom129 = sext i32 %69 to i64, !dbg !2410
  %arrayidx130 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld128, i64 0, i64 %idxprom129, !dbg !2410
  %rt_rtvec131 = bitcast %union.rtunion_def* %arrayidx130 to %struct.rtvec_def**, !dbg !2410
  %70 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec131, align 8, !dbg !2410
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %70, i32 0, i32 1, !dbg !2410
  %71 = load i32, i32* %i, align 4, !dbg !2410
  %idxprom132 = sext i32 %71 to i64, !dbg !2410
  %arrayidx133 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom132, !dbg !2410
  %72 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx133, align 8, !dbg !2410
  %u134 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %72, i32 0, i32 1, !dbg !2410
  %fld135 = bitcast %union.u* %u134 to [1 x %union.rtunion_def]*, !dbg !2410
  %arrayidx136 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld135, i64 0, i64 0, !dbg !2410
  %rt_rtx137 = bitcast %union.rtunion_def* %arrayidx136 to %struct.rtx_def**, !dbg !2410
  %73 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx137, align 8, !dbg !2410
  store %struct.rtx_def* %73, %struct.rtx_def** %label, align 8, !dbg !2409
  %74 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !2411
  %75 = bitcast %struct.rtx_def* %74 to i32*, !dbg !2411
  %bf.load138 = load i32, i32* %75, align 8, !dbg !2411
  %bf.clear139 = and i32 %bf.load138, 65535, !dbg !2411
  %cmp140 = icmp eq i32 %bf.clear139, 13, !dbg !2411
  br i1 %cmp140, label %if.end148, label %if.then142, !dbg !2413

if.then142:                                       ; preds = %for.body
  %76 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !2414
  %u143 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %76, i32 0, i32 1, !dbg !2414
  %fld144 = bitcast %union.u* %u143 to [1 x %union.rtunion_def]*, !dbg !2414
  %arrayidx145 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld144, i64 0, i64 4, !dbg !2414
  %rt_int146 = bitcast %union.rtunion_def* %arrayidx145 to i32*, !dbg !2414
  %77 = load i32, i32* %rt_int146, align 8, !dbg !2415
  %dec147 = add nsw i32 %77, -1, !dbg !2415
  store i32 %dec147, i32* %rt_int146, align 8, !dbg !2415
  br label %if.end148, !dbg !2414

if.end148:                                        ; preds = %if.then142, %for.body
  br label %for.inc, !dbg !2416

for.inc:                                          ; preds = %if.end148
  %78 = load i32, i32* %i, align 4, !dbg !2417
  %inc = add nsw i32 %78, 1, !dbg !2417
  store i32 %inc, i32* %i, align 4, !dbg !2417
  br label %for.cond, !dbg !2418, !llvm.loop !2419

for.end:                                          ; preds = %for.cond
  br label %if.end149, !dbg !2421

if.end149:                                        ; preds = %for.end, %lor.lhs.false, %while.end91
  %79 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !2422
  ret %struct.rtx_def* %79, !dbg !2423
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @can_delete_label_p(%struct.rtx_def* %label) #0 !dbg !2424 {
entry:
  %label.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %label, %struct.rtx_def** %label.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %label.addr, metadata !2427, metadata !DIExpression()), !dbg !2428
  %0 = load %struct.rtx_def*, %struct.rtx_def** %label.addr, align 8, !dbg !2429
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !2429
  %bf.load = load i32, i32* %1, align 8, !dbg !2429
  %bf.lshr = lshr i32 %bf.load, 28, !dbg !2429
  %bf.clear = and i32 %bf.lshr, 1, !dbg !2429
  %tobool = icmp ne i32 %bf.clear, 0, !dbg !2429
  br i1 %tobool, label %land.end, label %land.lhs.true, !dbg !2430

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %label.addr, align 8, !dbg !2431
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !2431
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !2431
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 7, !dbg !2431
  %rt_str = bitcast %union.rtunion_def* %arrayidx to i8**, !dbg !2431
  %3 = load i8*, i8** %rt_str, align 8, !dbg !2431
  %cmp = icmp eq i8* %3, null, !dbg !2432
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !2433

land.rhs:                                         ; preds = %land.lhs.true
  %4 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 5), align 8, !dbg !2434
  %5 = load %struct.rtx_def*, %struct.rtx_def** %label.addr, align 8, !dbg !2435
  %call = call i32 @in_expr_list_p(%struct.rtx_def* %4, %struct.rtx_def* %5), !dbg !2436
  %tobool1 = icmp ne i32 %call, 0, !dbg !2437
  %lnot = xor i1 %tobool1, true, !dbg !2437
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %6 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %lnot, %land.rhs ], !dbg !2438
  %land.ext = zext i1 %6 to i32, !dbg !2433
  ret i32 %land.ext, !dbg !2439
}

declare dso_local void @remove_node_from_expr_list(%struct.rtx_def*, %struct.rtx_def**) #2

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

declare dso_local void @remove_insn(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @find_reg_note(%struct.rtx_def*, i32, %struct.rtx_def*) #2

declare dso_local void @remove_note(%struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @delete_insn_and_edges(%struct.rtx_def* %insn) #0 !dbg !2440 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %x = alloca %struct.rtx_def*, align 8
  %purge = alloca i8, align 1
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !2441, metadata !DIExpression()), !dbg !2442
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !2443, metadata !DIExpression()), !dbg !2444
  call void @llvm.dbg.declare(metadata i8* %purge, metadata !2445, metadata !DIExpression()), !dbg !2446
  store i8 0, i8* %purge, align 1, !dbg !2446
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2447
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !2447
  %bf.load = load i32, i32* %1, align 8, !dbg !2447
  %bf.clear = and i32 %bf.load, 65535, !dbg !2447
  %cmp = icmp eq i32 %bf.clear, 8, !dbg !2447
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !2447

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2447
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !2447
  %bf.load1 = load i32, i32* %3, align 8, !dbg !2447
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !2447
  %cmp3 = icmp eq i32 %bf.clear2, 7, !dbg !2447
  br i1 %cmp3, label %land.lhs.true, label %lor.lhs.false4, !dbg !2447

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2447
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !2447
  %bf.load5 = load i32, i32* %5, align 8, !dbg !2447
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !2447
  %cmp7 = icmp eq i32 %bf.clear6, 9, !dbg !2447
  br i1 %cmp7, label %land.lhs.true, label %lor.lhs.false8, !dbg !2447

lor.lhs.false8:                                   ; preds = %lor.lhs.false4
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2447
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !2447
  %bf.load9 = load i32, i32* %7, align 8, !dbg !2447
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !2447
  %cmp11 = icmp eq i32 %bf.clear10, 10, !dbg !2447
  br i1 %cmp11, label %land.lhs.true, label %if.end, !dbg !2449

land.lhs.true:                                    ; preds = %lor.lhs.false8, %lor.lhs.false4, %lor.lhs.false, %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2450
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !2450
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !2450
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !2450
  %rt_bb = bitcast %union.rtunion_def* %arrayidx to %struct.basic_block_def**, !dbg !2450
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !2450
  %tobool = icmp ne %struct.basic_block_def* %9, null, !dbg !2450
  br i1 %tobool, label %land.lhs.true12, label %if.end, !dbg !2451

land.lhs.true12:                                  ; preds = %land.lhs.true
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2452
  %u13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !2452
  %fld14 = bitcast %union.u* %u13 to [1 x %union.rtunion_def]*, !dbg !2452
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i64 0, i64 3, !dbg !2452
  %rt_bb16 = bitcast %union.rtunion_def* %arrayidx15 to %struct.basic_block_def**, !dbg !2452
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb16, align 8, !dbg !2452
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 7, !dbg !2452
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !2452
  %12 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !2452
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %12, i32 0, i32 1, !dbg !2452
  %13 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !2452
  %14 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2453
  %cmp17 = icmp eq %struct.rtx_def* %13, %14, !dbg !2454
  br i1 %cmp17, label %if.then, label %if.end, !dbg !2455

if.then:                                          ; preds = %land.lhs.true12
  store i8 1, i8* %purge, align 1, !dbg !2456
  br label %if.end, !dbg !2457

if.end:                                           ; preds = %if.then, %land.lhs.true12, %land.lhs.true, %lor.lhs.false8
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2458
  %call = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %15), !dbg !2459
  store %struct.rtx_def* %call, %struct.rtx_def** %x, align 8, !dbg !2460
  %16 = load i8, i8* %purge, align 1, !dbg !2461
  %tobool18 = icmp ne i8 %16, 0, !dbg !2461
  br i1 %tobool18, label %if.then19, label %if.end25, !dbg !2463

if.then19:                                        ; preds = %if.end
  %17 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2464
  %u20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !2464
  %fld21 = bitcast %union.u* %u20 to [1 x %union.rtunion_def]*, !dbg !2464
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i64 0, i64 3, !dbg !2464
  %rt_bb23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.basic_block_def**, !dbg !2464
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb23, align 8, !dbg !2464
  %call24 = call zeroext i8 @purge_dead_edges(%struct.basic_block_def* %18), !dbg !2465
  br label %if.end25, !dbg !2465

if.end25:                                         ; preds = %if.then19, %if.end
  %19 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !2466
  ret %struct.rtx_def* %19, !dbg !2467
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @purge_dead_edges(%struct.basic_block_def* %bb) #0 !dbg !2468 {
entry:
  %retval = alloca i8, align 1
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  %purged = alloca i8, align 1
  %found = alloca i8, align 1
  %ei = alloca %struct.edge_iterator, align 8
  %eqnote = alloca %struct.rtx_def*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %remove = alloca i8, align 1
  %note81 = alloca %struct.rtx_def*, align 8
  %b = alloca %struct.edge_def*, align 8
  %f = alloca %struct.edge_def*, align 8
  %ei82 = alloca %struct.edge_iterator, align 8
  %tmp103 = alloca %struct.edge_iterator, align 8
  %tmp303 = alloca %struct.edge_iterator, align 8
  %tmp319 = alloca %struct.edge_iterator, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !2469, metadata !DIExpression()), !dbg !2470
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !2471, metadata !DIExpression()), !dbg !2472
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !2473, metadata !DIExpression()), !dbg !2474
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2475
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 7, !dbg !2475
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !2475
  %1 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !2475
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %1, i32 0, i32 1, !dbg !2475
  %2 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !2475
  store %struct.rtx_def* %2, %struct.rtx_def** %insn, align 8, !dbg !2474
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !2476, metadata !DIExpression()), !dbg !2477
  call void @llvm.dbg.declare(metadata i8* %purged, metadata !2478, metadata !DIExpression()), !dbg !2479
  store i8 0, i8* %purged, align 1, !dbg !2479
  call void @llvm.dbg.declare(metadata i8* %found, metadata !2480, metadata !DIExpression()), !dbg !2481
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !2482, metadata !DIExpression()), !dbg !2489
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2490
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !2490
  %bf.load = load i32, i32* %4, align 8, !dbg !2490
  %bf.clear = and i32 %bf.load, 65535, !dbg !2490
  %cmp = icmp eq i32 %bf.clear, 7, !dbg !2490
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !2492

land.lhs.true:                                    ; preds = %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2493
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2494
  %il1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 7, !dbg !2494
  %rtl2 = bitcast %union.basic_block_il_dependent* %il1 to %struct.rtl_bb_info**, !dbg !2494
  %7 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl2, align 8, !dbg !2494
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %7, i32 0, i32 0, !dbg !2494
  %8 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !2494
  %cmp3 = icmp ne %struct.rtx_def* %5, %8, !dbg !2495
  br i1 %cmp3, label %if.then, label %if.end, !dbg !2496

if.then:                                          ; preds = %land.lhs.true
  br label %do.body, !dbg !2497

do.body:                                          ; preds = %land.end, %if.then
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2498
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !2498
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !2498
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !2498
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !2498
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !2498
  store %struct.rtx_def* %10, %struct.rtx_def** %insn, align 8, !dbg !2499
  br label %do.cond, !dbg !2500

do.cond:                                          ; preds = %do.body
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2501
  %12 = bitcast %struct.rtx_def* %11 to i32*, !dbg !2501
  %bf.load4 = load i32, i32* %12, align 8, !dbg !2501
  %bf.clear5 = and i32 %bf.load4, 65535, !dbg !2501
  %cmp6 = icmp eq i32 %bf.clear5, 7, !dbg !2501
  br i1 %cmp6, label %land.rhs, label %lor.lhs.false, !dbg !2502

lor.lhs.false:                                    ; preds = %do.cond
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2503
  %14 = bitcast %struct.rtx_def* %13 to i32*, !dbg !2503
  %bf.load7 = load i32, i32* %14, align 8, !dbg !2503
  %bf.clear8 = and i32 %bf.load7, 65535, !dbg !2503
  %cmp9 = icmp eq i32 %bf.clear8, 13, !dbg !2503
  br i1 %cmp9, label %land.rhs, label %land.end, !dbg !2504

land.rhs:                                         ; preds = %lor.lhs.false, %do.cond
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2505
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2506
  %il10 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i32 0, i32 7, !dbg !2506
  %rtl11 = bitcast %union.basic_block_il_dependent* %il10 to %struct.rtl_bb_info**, !dbg !2506
  %17 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl11, align 8, !dbg !2506
  %head_12 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %17, i32 0, i32 0, !dbg !2506
  %18 = load %struct.rtx_def*, %struct.rtx_def** %head_12, align 8, !dbg !2506
  %cmp13 = icmp ne %struct.rtx_def* %15, %18, !dbg !2507
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.lhs.false
  %19 = phi i1 [ false, %lor.lhs.false ], [ %cmp13, %land.rhs ], !dbg !2508
  br i1 %19, label %do.body, label %do.end, !dbg !2500, !llvm.loop !2509

do.end:                                           ; preds = %land.end
  br label %if.end, !dbg !2500

if.end:                                           ; preds = %do.end, %land.lhs.true, %entry
  %20 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2511
  %21 = bitcast %struct.rtx_def* %20 to i32*, !dbg !2511
  %bf.load14 = load i32, i32* %21, align 8, !dbg !2511
  %bf.clear15 = and i32 %bf.load14, 65535, !dbg !2511
  %cmp16 = icmp eq i32 %bf.clear15, 8, !dbg !2511
  br i1 %cmp16, label %land.lhs.true17, label %if.end37, !dbg !2513

land.lhs.true17:                                  ; preds = %if.end
  %22 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2514
  %call = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %22, i32 25, %struct.rtx_def* null), !dbg !2515
  store %struct.rtx_def* %call, %struct.rtx_def** %note, align 8, !dbg !2516
  %tobool = icmp ne %struct.rtx_def* %call, null, !dbg !2516
  br i1 %tobool, label %if.then18, label %if.end37, !dbg !2517

if.then18:                                        ; preds = %land.lhs.true17
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %eqnote, metadata !2518, metadata !DIExpression()), !dbg !2520
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2521
  %u19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1, !dbg !2521
  %fld20 = bitcast %union.u* %u19 to [1 x %union.rtunion_def]*, !dbg !2521
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i64 0, i64 5, !dbg !2521
  %rt_rtx22 = bitcast %union.rtunion_def* %arrayidx21 to %struct.rtx_def**, !dbg !2521
  %24 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx22, align 8, !dbg !2521
  %call23 = call i32 @may_trap_p(%struct.rtx_def* %24), !dbg !2523
  %tobool24 = icmp ne i32 %call23, 0, !dbg !2523
  br i1 %tobool24, label %lor.lhs.false25, label %if.then35, !dbg !2524

lor.lhs.false25:                                  ; preds = %if.then18
  %25 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2525
  %call26 = call %struct.rtx_def* @find_reg_equal_equiv_note(%struct.rtx_def* %25), !dbg !2526
  store %struct.rtx_def* %call26, %struct.rtx_def** %eqnote, align 8, !dbg !2527
  %tobool27 = icmp ne %struct.rtx_def* %call26, null, !dbg !2527
  br i1 %tobool27, label %land.lhs.true28, label %if.end36, !dbg !2528

land.lhs.true28:                                  ; preds = %lor.lhs.false25
  %26 = load %struct.rtx_def*, %struct.rtx_def** %eqnote, align 8, !dbg !2529
  %u29 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1, !dbg !2529
  %fld30 = bitcast %union.u* %u29 to [1 x %union.rtunion_def]*, !dbg !2529
  %arrayidx31 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld30, i64 0, i64 0, !dbg !2529
  %rt_rtx32 = bitcast %union.rtunion_def* %arrayidx31 to %struct.rtx_def**, !dbg !2529
  %27 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx32, align 8, !dbg !2529
  %call33 = call i32 @may_trap_p(%struct.rtx_def* %27), !dbg !2530
  %tobool34 = icmp ne i32 %call33, 0, !dbg !2530
  br i1 %tobool34, label %if.end36, label %if.then35, !dbg !2531

if.then35:                                        ; preds = %land.lhs.true28, %if.then18
  %28 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2532
  %29 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !2533
  call void @remove_note(%struct.rtx_def* %28, %struct.rtx_def* %29), !dbg !2534
  br label %if.end36, !dbg !2534

if.end36:                                         ; preds = %if.then35, %land.lhs.true28, %lor.lhs.false25
  br label %if.end37, !dbg !2535

if.end37:                                         ; preds = %if.end36, %land.lhs.true17, %if.end
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2536
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %30, i32 0, i32 1, !dbg !2536
  %call38 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !2536
  %31 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !2536
  %32 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %31, i32 0, i32 0, !dbg !2536
  %33 = extractvalue { i32, %struct.VEC_edge_gc** } %call38, 0, !dbg !2536
  store i32 %33, i32* %32, align 8, !dbg !2536
  %34 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %31, i32 0, i32 1, !dbg !2536
  %35 = extractvalue { i32, %struct.VEC_edge_gc** } %call38, 1, !dbg !2536
  store %struct.VEC_edge_gc** %35, %struct.VEC_edge_gc*** %34, align 8, !dbg !2536
  %36 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !2536
  %37 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !2536
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %36, i8* align 8 %37, i64 16, i1 false), !dbg !2536
  br label %for.cond, !dbg !2538

for.cond:                                         ; preds = %if.end75, %if.end37
  %38 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !2539
  %39 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %38, i32 0, i32 0, !dbg !2539
  %40 = load i32, i32* %39, align 8, !dbg !2539
  %41 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %38, i32 0, i32 1, !dbg !2539
  %42 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %41, align 8, !dbg !2539
  %call39 = call %struct.edge_def* @ei_safe_edge(i32 %40, %struct.VEC_edge_gc** %42), !dbg !2539
  store %struct.edge_def* %call39, %struct.edge_def** %e, align 8, !dbg !2541
  %tobool40 = icmp ne %struct.edge_def* %call39, null, !dbg !2542
  br i1 %tobool40, label %for.body, label %for.end, !dbg !2542

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i8* %remove, metadata !2543, metadata !DIExpression()), !dbg !2545
  store i8 0, i8* %remove, align 1, !dbg !2545
  %43 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2546
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %43, i32 0, i32 7, !dbg !2548
  %44 = load i32, i32* %flags, align 8, !dbg !2548
  %and = and i32 %44, 4, !dbg !2549
  %tobool41 = icmp ne i32 %and, 0, !dbg !2549
  br i1 %tobool41, label %if.then42, label %if.else62, !dbg !2550

if.then42:                                        ; preds = %for.body
  %45 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2551
  %46 = bitcast %struct.rtx_def* %45 to i32*, !dbg !2551
  %bf.load43 = load i32, i32* %46, align 8, !dbg !2551
  %bf.clear44 = and i32 %bf.load43, 65535, !dbg !2551
  %cmp45 = icmp eq i32 %bf.clear44, 10, !dbg !2551
  br i1 %cmp45, label %if.else, label %if.then46, !dbg !2554

if.then46:                                        ; preds = %if.then42
  store i8 1, i8* %remove, align 1, !dbg !2555
  br label %if.end61, !dbg !2556

if.else:                                          ; preds = %if.then42
  %47 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2557
  %call47 = call zeroext i8 @can_nonlocal_goto(%struct.rtx_def* %47), !dbg !2559
  %tobool48 = icmp ne i8 %call47, 0, !dbg !2559
  br i1 %tobool48, label %if.then49, label %if.else50, !dbg !2560

if.then49:                                        ; preds = %if.else
  br label %if.end60, !dbg !2560

if.else50:                                        ; preds = %if.else
  %48 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2561
  %flags51 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %48, i32 0, i32 7, !dbg !2563
  %49 = load i32, i32* %flags51, align 8, !dbg !2563
  %and52 = and i32 %49, 8, !dbg !2564
  %tobool53 = icmp ne i32 %and52, 0, !dbg !2564
  br i1 %tobool53, label %land.lhs.true54, label %if.else58, !dbg !2565

land.lhs.true54:                                  ; preds = %if.else50
  %50 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2566
  %call55 = call zeroext i8 @can_throw_internal(%struct.rtx_def* %50), !dbg !2567
  %conv = zext i8 %call55 to i32, !dbg !2567
  %tobool56 = icmp ne i32 %conv, 0, !dbg !2567
  br i1 %tobool56, label %if.then57, label %if.else58, !dbg !2568

if.then57:                                        ; preds = %land.lhs.true54
  br label %if.end59, !dbg !2568

if.else58:                                        ; preds = %land.lhs.true54, %if.else50
  store i8 1, i8* %remove, align 1, !dbg !2569
  br label %if.end59

if.end59:                                         ; preds = %if.else58, %if.then57
  br label %if.end60

if.end60:                                         ; preds = %if.end59, %if.then49
  br label %if.end61

if.end61:                                         ; preds = %if.end60, %if.then46
  br label %if.end71, !dbg !2570

if.else62:                                        ; preds = %for.body
  %51 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2571
  %flags63 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %51, i32 0, i32 7, !dbg !2573
  %52 = load i32, i32* %flags63, align 8, !dbg !2573
  %and64 = and i32 %52, 8, !dbg !2574
  %tobool65 = icmp ne i32 %and64, 0, !dbg !2574
  br i1 %tobool65, label %if.then66, label %if.end70, !dbg !2575

if.then66:                                        ; preds = %if.else62
  %53 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2576
  %call67 = call zeroext i8 @can_throw_internal(%struct.rtx_def* %53), !dbg !2577
  %tobool68 = icmp ne i8 %call67, 0, !dbg !2578
  %lnot = xor i1 %tobool68, true, !dbg !2578
  %lnot.ext = zext i1 %lnot to i32, !dbg !2578
  %conv69 = trunc i32 %lnot.ext to i8, !dbg !2578
  store i8 %conv69, i8* %remove, align 1, !dbg !2579
  br label %if.end70, !dbg !2580

if.end70:                                         ; preds = %if.then66, %if.else62
  br label %if.end71

if.end71:                                         ; preds = %if.end70, %if.end61
  %54 = load i8, i8* %remove, align 1, !dbg !2581
  %tobool72 = icmp ne i8 %54, 0, !dbg !2581
  br i1 %tobool72, label %if.then73, label %if.else74, !dbg !2583

if.then73:                                        ; preds = %if.end71
  %55 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2584
  call void @remove_edge(%struct.edge_def* %55), !dbg !2586
  %56 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2587
  call void @df_set_bb_dirty(%struct.basic_block_def* %56), !dbg !2588
  store i8 1, i8* %purged, align 1, !dbg !2589
  br label %if.end75, !dbg !2590

if.else74:                                        ; preds = %if.end71
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !2591
  br label %if.end75

if.end75:                                         ; preds = %if.else74, %if.then73
  br label %for.cond, !dbg !2592, !llvm.loop !2593

for.end:                                          ; preds = %for.cond
  %57 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2595
  %58 = bitcast %struct.rtx_def* %57 to i32*, !dbg !2595
  %bf.load76 = load i32, i32* %58, align 8, !dbg !2595
  %bf.clear77 = and i32 %bf.load76, 65535, !dbg !2595
  %cmp78 = icmp eq i32 %bf.clear77, 9, !dbg !2595
  br i1 %cmp78, label %if.then80, label %if.else277, !dbg !2597

if.then80:                                        ; preds = %for.end
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note81, metadata !2598, metadata !DIExpression()), !dbg !2600
  call void @llvm.dbg.declare(metadata %struct.edge_def** %b, metadata !2601, metadata !DIExpression()), !dbg !2602
  call void @llvm.dbg.declare(metadata %struct.edge_def** %f, metadata !2603, metadata !DIExpression()), !dbg !2604
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei82, metadata !2605, metadata !DIExpression()), !dbg !2606
  %59 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2607
  %call83 = call i32 @any_condjump_p(%struct.rtx_def* %59), !dbg !2609
  %tobool84 = icmp ne i32 %call83, 0, !dbg !2609
  br i1 %tobool84, label %if.end92, label %land.lhs.true85, !dbg !2610

land.lhs.true85:                                  ; preds = %if.then80
  %60 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2611
  %call86 = call i32 @returnjump_p(%struct.rtx_def* %60), !dbg !2612
  %tobool87 = icmp ne i32 %call86, 0, !dbg !2612
  br i1 %tobool87, label %if.end92, label %land.lhs.true88, !dbg !2613

land.lhs.true88:                                  ; preds = %land.lhs.true85
  %61 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2614
  %call89 = call i32 @simplejump_p(%struct.rtx_def* %61), !dbg !2615
  %tobool90 = icmp ne i32 %call89, 0, !dbg !2615
  br i1 %tobool90, label %if.end92, label %if.then91, !dbg !2616

if.then91:                                        ; preds = %land.lhs.true88
  %62 = load i8, i8* %purged, align 1, !dbg !2617
  store i8 %62, i8* %retval, align 1, !dbg !2618
  br label %return, !dbg !2618

if.end92:                                         ; preds = %land.lhs.true88, %land.lhs.true85, %if.then80
  %63 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2619
  %call93 = call i32 @simplejump_p(%struct.rtx_def* %63), !dbg !2621
  %tobool94 = icmp ne i32 %call93, 0, !dbg !2621
  br i1 %tobool94, label %if.then95, label %if.end102, !dbg !2622

if.then95:                                        ; preds = %if.end92
  %64 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2623
  %call96 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %64, i32 13, %struct.rtx_def* null), !dbg !2625
  store %struct.rtx_def* %call96, %struct.rtx_def** %note81, align 8, !dbg !2626
  %65 = load %struct.rtx_def*, %struct.rtx_def** %note81, align 8, !dbg !2627
  %tobool97 = icmp ne %struct.rtx_def* %65, null, !dbg !2627
  br i1 %tobool97, label %if.then98, label %if.end99, !dbg !2629

if.then98:                                        ; preds = %if.then95
  %66 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2630
  %67 = load %struct.rtx_def*, %struct.rtx_def** %note81, align 8, !dbg !2631
  call void @remove_note(%struct.rtx_def* %66, %struct.rtx_def* %67), !dbg !2632
  br label %if.end99, !dbg !2632

if.end99:                                         ; preds = %if.then98, %if.then95
  br label %while.cond, !dbg !2633

while.cond:                                       ; preds = %while.body, %if.end99
  %68 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2634
  %call100 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %68, i32 16, %struct.rtx_def* null), !dbg !2635
  store %struct.rtx_def* %call100, %struct.rtx_def** %note81, align 8, !dbg !2636
  %tobool101 = icmp ne %struct.rtx_def* %call100, null, !dbg !2633
  br i1 %tobool101, label %while.body, label %while.end, !dbg !2633

while.body:                                       ; preds = %while.cond
  %69 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2637
  %70 = load %struct.rtx_def*, %struct.rtx_def** %note81, align 8, !dbg !2638
  call void @remove_note(%struct.rtx_def* %69, %struct.rtx_def* %70), !dbg !2639
  br label %while.cond, !dbg !2633, !llvm.loop !2640

while.end:                                        ; preds = %while.cond
  br label %if.end102, !dbg !2642

if.end102:                                        ; preds = %while.end, %if.end92
  %71 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2643
  %succs104 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %71, i32 0, i32 1, !dbg !2643
  %call105 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs104), !dbg !2643
  %72 = bitcast %struct.edge_iterator* %tmp103 to { i32, %struct.VEC_edge_gc** }*, !dbg !2643
  %73 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %72, i32 0, i32 0, !dbg !2643
  %74 = extractvalue { i32, %struct.VEC_edge_gc** } %call105, 0, !dbg !2643
  store i32 %74, i32* %73, align 8, !dbg !2643
  %75 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %72, i32 0, i32 1, !dbg !2643
  %76 = extractvalue { i32, %struct.VEC_edge_gc** } %call105, 1, !dbg !2643
  store %struct.VEC_edge_gc** %76, %struct.VEC_edge_gc*** %75, align 8, !dbg !2643
  %77 = bitcast %struct.edge_iterator* %ei82 to i8*, !dbg !2643
  %78 = bitcast %struct.edge_iterator* %tmp103 to i8*, !dbg !2643
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %77, i8* align 8 %78, i64 16, i1 false), !dbg !2643
  br label %for.cond106, !dbg !2645

for.cond106:                                      ; preds = %if.end158, %if.then153, %if.then144, %if.then133, %if.then118, %if.end102
  %79 = bitcast %struct.edge_iterator* %ei82 to { i32, %struct.VEC_edge_gc** }*, !dbg !2646
  %80 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %79, i32 0, i32 0, !dbg !2646
  %81 = load i32, i32* %80, align 8, !dbg !2646
  %82 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %79, i32 0, i32 1, !dbg !2646
  %83 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %82, align 8, !dbg !2646
  %call107 = call %struct.edge_def* @ei_safe_edge(i32 %81, %struct.VEC_edge_gc** %83), !dbg !2646
  store %struct.edge_def* %call107, %struct.edge_def** %e, align 8, !dbg !2648
  %tobool108 = icmp ne %struct.edge_def* %call107, null, !dbg !2649
  br i1 %tobool108, label %for.body109, label %for.end159, !dbg !2649

for.body109:                                      ; preds = %for.cond106
  %84 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2650
  %flags110 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %84, i32 0, i32 7, !dbg !2652
  %85 = load i32, i32* %flags110, align 8, !dbg !2653
  %and111 = and i32 %85, -3, !dbg !2653
  store i32 %and111, i32* %flags110, align 8, !dbg !2653
  %86 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2654
  %flags112 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %86, i32 0, i32 7, !dbg !2656
  %87 = load i32, i32* %flags112, align 8, !dbg !2656
  %and113 = and i32 %87, 1, !dbg !2657
  %tobool114 = icmp ne i32 %and113, 0, !dbg !2657
  br i1 %tobool114, label %land.lhs.true115, label %if.else119, !dbg !2658

land.lhs.true115:                                 ; preds = %for.body109
  %88 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2659
  %call116 = call i32 @any_condjump_p(%struct.rtx_def* %88), !dbg !2660
  %tobool117 = icmp ne i32 %call116, 0, !dbg !2660
  br i1 %tobool117, label %if.then118, label %if.else119, !dbg !2661

if.then118:                                       ; preds = %land.lhs.true115
  call void @ei_next(%struct.edge_iterator* %ei82), !dbg !2662
  br label %for.cond106, !dbg !2664, !llvm.loop !2665

if.else119:                                       ; preds = %land.lhs.true115, %for.body109
  %89 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2667
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %89, i32 0, i32 1, !dbg !2669
  %90 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !2669
  %91 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2670
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %91, i64 0, !dbg !2670
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !2670
  %92 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !2670
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %92, i32 0, i32 1, !dbg !2670
  %93 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !2670
  %cmp120 = icmp ne %struct.basic_block_def* %90, %93, !dbg !2671
  br i1 %cmp120, label %land.lhs.true122, label %if.else134, !dbg !2672

land.lhs.true122:                                 ; preds = %if.else119
  %94 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2673
  %dest123 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %94, i32 0, i32 1, !dbg !2673
  %95 = load %struct.basic_block_def*, %struct.basic_block_def** %dest123, align 8, !dbg !2673
  %il124 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %95, i32 0, i32 7, !dbg !2673
  %rtl125 = bitcast %union.basic_block_il_dependent* %il124 to %struct.rtl_bb_info**, !dbg !2673
  %96 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl125, align 8, !dbg !2673
  %head_126 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %96, i32 0, i32 0, !dbg !2673
  %97 = load %struct.rtx_def*, %struct.rtx_def** %head_126, align 8, !dbg !2673
  %98 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2674
  %u127 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %98, i32 0, i32 1, !dbg !2674
  %fld128 = bitcast %union.u* %u127 to [1 x %union.rtunion_def]*, !dbg !2674
  %arrayidx129 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld128, i64 0, i64 8, !dbg !2674
  %rt_rtx130 = bitcast %union.rtunion_def* %arrayidx129 to %struct.rtx_def**, !dbg !2674
  %99 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx130, align 8, !dbg !2674
  %cmp131 = icmp eq %struct.rtx_def* %97, %99, !dbg !2675
  br i1 %cmp131, label %if.then133, label %if.else134, !dbg !2676

if.then133:                                       ; preds = %land.lhs.true122
  call void @ei_next(%struct.edge_iterator* %ei82), !dbg !2677
  br label %for.cond106, !dbg !2679, !llvm.loop !2665

if.else134:                                       ; preds = %land.lhs.true122, %if.else119
  %100 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2680
  %dest135 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %100, i32 0, i32 1, !dbg !2682
  %101 = load %struct.basic_block_def*, %struct.basic_block_def** %dest135, align 8, !dbg !2682
  %102 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2683
  %add.ptr136 = getelementptr inbounds %struct.function, %struct.function* %102, i64 0, !dbg !2683
  %cfg137 = getelementptr inbounds %struct.function, %struct.function* %add.ptr136, i32 0, i32 1, !dbg !2683
  %103 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg137, align 8, !dbg !2683
  %x_exit_block_ptr138 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %103, i32 0, i32 1, !dbg !2683
  %104 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr138, align 8, !dbg !2683
  %cmp139 = icmp eq %struct.basic_block_def* %101, %104, !dbg !2684
  br i1 %cmp139, label %land.lhs.true141, label %if.else145, !dbg !2685

land.lhs.true141:                                 ; preds = %if.else134
  %105 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2686
  %call142 = call i32 @returnjump_p(%struct.rtx_def* %105), !dbg !2687
  %tobool143 = icmp ne i32 %call142, 0, !dbg !2687
  br i1 %tobool143, label %if.then144, label %if.else145, !dbg !2688

if.then144:                                       ; preds = %land.lhs.true141
  call void @ei_next(%struct.edge_iterator* %ei82), !dbg !2689
  br label %for.cond106, !dbg !2691, !llvm.loop !2665

if.else145:                                       ; preds = %land.lhs.true141, %if.else134
  %106 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2692
  %flags146 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %106, i32 0, i32 7, !dbg !2694
  %107 = load i32, i32* %flags146, align 8, !dbg !2694
  %and147 = and i32 %107, 8, !dbg !2695
  %tobool148 = icmp ne i32 %and147, 0, !dbg !2695
  br i1 %tobool148, label %land.lhs.true149, label %if.end155, !dbg !2696

land.lhs.true149:                                 ; preds = %if.else145
  %108 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2697
  %call150 = call zeroext i8 @can_throw_internal(%struct.rtx_def* %108), !dbg !2698
  %conv151 = zext i8 %call150 to i32, !dbg !2698
  %tobool152 = icmp ne i32 %conv151, 0, !dbg !2698
  br i1 %tobool152, label %if.then153, label %if.end155, !dbg !2699

if.then153:                                       ; preds = %land.lhs.true149
  %109 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2700
  %flags154 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %109, i32 0, i32 7, !dbg !2702
  %110 = load i32, i32* %flags154, align 8, !dbg !2703
  %or = or i32 %110, 2, !dbg !2703
  store i32 %or, i32* %flags154, align 8, !dbg !2703
  call void @ei_next(%struct.edge_iterator* %ei82), !dbg !2704
  br label %for.cond106, !dbg !2705, !llvm.loop !2665

if.end155:                                        ; preds = %land.lhs.true149, %if.else145
  br label %if.end156

if.end156:                                        ; preds = %if.end155
  br label %if.end157

if.end157:                                        ; preds = %if.end156
  br label %if.end158

if.end158:                                        ; preds = %if.end157
  %111 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2706
  call void @df_set_bb_dirty(%struct.basic_block_def* %111), !dbg !2707
  store i8 1, i8* %purged, align 1, !dbg !2708
  %112 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2709
  call void @remove_edge(%struct.edge_def* %112), !dbg !2710
  br label %for.cond106, !dbg !2711, !llvm.loop !2665

for.end159:                                       ; preds = %for.cond106
  %113 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2712
  %succs160 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %113, i32 0, i32 1, !dbg !2712
  %114 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs160, align 8, !dbg !2712
  %tobool161 = icmp ne %struct.VEC_edge_gc* %114, null, !dbg !2712
  br i1 %tobool161, label %cond.true, label %cond.false, !dbg !2712

cond.true:                                        ; preds = %for.end159
  %115 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2712
  %succs162 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %115, i32 0, i32 1, !dbg !2712
  %116 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs162, align 8, !dbg !2712
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %116, i32 0, i32 0, !dbg !2712
  br label %cond.end, !dbg !2712

cond.false:                                       ; preds = %for.end159
  br label %cond.end, !dbg !2712

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2712
  %call163 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !2712
  %cmp164 = icmp eq i32 %call163, 0, !dbg !2714
  br i1 %cmp164, label %if.then168, label %lor.lhs.false166, !dbg !2715

lor.lhs.false166:                                 ; preds = %cond.end
  %117 = load i8, i8* %purged, align 1, !dbg !2716
  %tobool167 = icmp ne i8 %117, 0, !dbg !2716
  br i1 %tobool167, label %if.end169, label %if.then168, !dbg !2717

if.then168:                                       ; preds = %lor.lhs.false166, %cond.end
  %118 = load i8, i8* %purged, align 1, !dbg !2718
  store i8 %118, i8* %retval, align 1, !dbg !2719
  br label %return, !dbg !2719

if.end169:                                        ; preds = %lor.lhs.false166
  %119 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2720
  %tobool170 = icmp ne %struct._IO_FILE* %119, null, !dbg !2720
  br i1 %tobool170, label %if.then171, label %if.end173, !dbg !2722

if.then171:                                       ; preds = %if.end169
  %120 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2723
  %121 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2724
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %121, i32 0, i32 9, !dbg !2725
  %122 = load i32, i32* %index, align 8, !dbg !2725
  %call172 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %120, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.17, i64 0, i64 0), i32 %122), !dbg !2726
  br label %if.end173, !dbg !2726

if.end173:                                        ; preds = %if.then171, %if.end169
  %123 = load i32, i32* @optimize, align 4, !dbg !2727
  %tobool174 = icmp ne i32 %123, 0, !dbg !2727
  br i1 %tobool174, label %if.end176, label %if.then175, !dbg !2729

if.then175:                                       ; preds = %if.end173
  %124 = load i8, i8* %purged, align 1, !dbg !2730
  store i8 %124, i8* %retval, align 1, !dbg !2731
  br label %return, !dbg !2731

if.end176:                                        ; preds = %if.end173
  %125 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2732
  %call177 = call zeroext i8 @single_succ_p(%struct.basic_block_def* %125), !dbg !2734
  %tobool178 = icmp ne i8 %call177, 0, !dbg !2734
  br i1 %tobool178, label %if.then179, label %if.else183, !dbg !2735

if.then179:                                       ; preds = %if.end176
  %126 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2736
  %call180 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %126), !dbg !2738
  %probability = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call180, i32 0, i32 8, !dbg !2739
  store i32 10000, i32* %probability, align 4, !dbg !2740
  %127 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2741
  %count = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %127, i32 0, i32 8, !dbg !2742
  %128 = load i64, i64* %count, align 8, !dbg !2742
  %129 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2743
  %call181 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %129), !dbg !2744
  %count182 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call181, i32 0, i32 9, !dbg !2745
  store i64 %128, i64* %count182, align 8, !dbg !2746
  br label %if.end276, !dbg !2747

if.else183:                                       ; preds = %if.end176
  %130 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2748
  %call184 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %130, i32 13, %struct.rtx_def* null), !dbg !2750
  store %struct.rtx_def* %call184, %struct.rtx_def** %note81, align 8, !dbg !2751
  %131 = load %struct.rtx_def*, %struct.rtx_def** %note81, align 8, !dbg !2752
  %tobool185 = icmp ne %struct.rtx_def* %131, null, !dbg !2752
  br i1 %tobool185, label %if.end187, label %if.then186, !dbg !2754

if.then186:                                       ; preds = %if.else183
  %132 = load i8, i8* %purged, align 1, !dbg !2755
  store i8 %132, i8* %retval, align 1, !dbg !2756
  br label %return, !dbg !2756

if.end187:                                        ; preds = %if.else183
  %133 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2757
  %succs188 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %133, i32 0, i32 1, !dbg !2757
  %134 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs188, align 8, !dbg !2757
  %tobool189 = icmp ne %struct.VEC_edge_gc* %134, null, !dbg !2757
  br i1 %tobool189, label %cond.true190, label %cond.false193, !dbg !2757

cond.true190:                                     ; preds = %if.end187
  %135 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2757
  %succs191 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %135, i32 0, i32 1, !dbg !2757
  %136 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs191, align 8, !dbg !2757
  %base192 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %136, i32 0, i32 0, !dbg !2757
  br label %cond.end194, !dbg !2757

cond.false193:                                    ; preds = %if.end187
  br label %cond.end194, !dbg !2757

cond.end194:                                      ; preds = %cond.false193, %cond.true190
  %cond195 = phi %struct.VEC_edge_base* [ %base192, %cond.true190 ], [ null, %cond.false193 ], !dbg !2757
  %call196 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond195, i32 0), !dbg !2757
  %flags197 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call196, i32 0, i32 7, !dbg !2757
  %137 = load i32, i32* %flags197, align 8, !dbg !2757
  %and198 = and i32 %137, 1, !dbg !2757
  %tobool199 = icmp ne i32 %and198, 0, !dbg !2757
  br i1 %tobool199, label %cond.true200, label %cond.false210, !dbg !2757

cond.true200:                                     ; preds = %cond.end194
  %138 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2757
  %succs201 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %138, i32 0, i32 1, !dbg !2757
  %139 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs201, align 8, !dbg !2757
  %tobool202 = icmp ne %struct.VEC_edge_gc* %139, null, !dbg !2757
  br i1 %tobool202, label %cond.true203, label %cond.false206, !dbg !2757

cond.true203:                                     ; preds = %cond.true200
  %140 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2757
  %succs204 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %140, i32 0, i32 1, !dbg !2757
  %141 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs204, align 8, !dbg !2757
  %base205 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %141, i32 0, i32 0, !dbg !2757
  br label %cond.end207, !dbg !2757

cond.false206:                                    ; preds = %cond.true200
  br label %cond.end207, !dbg !2757

cond.end207:                                      ; preds = %cond.false206, %cond.true203
  %cond208 = phi %struct.VEC_edge_base* [ %base205, %cond.true203 ], [ null, %cond.false206 ], !dbg !2757
  %call209 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond208, i32 1), !dbg !2757
  br label %cond.end220, !dbg !2757

cond.false210:                                    ; preds = %cond.end194
  %142 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2757
  %succs211 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %142, i32 0, i32 1, !dbg !2757
  %143 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs211, align 8, !dbg !2757
  %tobool212 = icmp ne %struct.VEC_edge_gc* %143, null, !dbg !2757
  br i1 %tobool212, label %cond.true213, label %cond.false216, !dbg !2757

cond.true213:                                     ; preds = %cond.false210
  %144 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2757
  %succs214 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %144, i32 0, i32 1, !dbg !2757
  %145 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs214, align 8, !dbg !2757
  %base215 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %145, i32 0, i32 0, !dbg !2757
  br label %cond.end217, !dbg !2757

cond.false216:                                    ; preds = %cond.false210
  br label %cond.end217, !dbg !2757

cond.end217:                                      ; preds = %cond.false216, %cond.true213
  %cond218 = phi %struct.VEC_edge_base* [ %base215, %cond.true213 ], [ null, %cond.false216 ], !dbg !2757
  %call219 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond218, i32 0), !dbg !2757
  br label %cond.end220, !dbg !2757

cond.end220:                                      ; preds = %cond.end217, %cond.end207
  %cond221 = phi %struct.edge_def* [ %call209, %cond.end207 ], [ %call219, %cond.end217 ], !dbg !2757
  store %struct.edge_def* %cond221, %struct.edge_def** %b, align 8, !dbg !2758
  %146 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2759
  %succs222 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %146, i32 0, i32 1, !dbg !2759
  %147 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs222, align 8, !dbg !2759
  %tobool223 = icmp ne %struct.VEC_edge_gc* %147, null, !dbg !2759
  br i1 %tobool223, label %cond.true224, label %cond.false227, !dbg !2759

cond.true224:                                     ; preds = %cond.end220
  %148 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2759
  %succs225 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %148, i32 0, i32 1, !dbg !2759
  %149 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs225, align 8, !dbg !2759
  %base226 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %149, i32 0, i32 0, !dbg !2759
  br label %cond.end228, !dbg !2759

cond.false227:                                    ; preds = %cond.end220
  br label %cond.end228, !dbg !2759

cond.end228:                                      ; preds = %cond.false227, %cond.true224
  %cond229 = phi %struct.VEC_edge_base* [ %base226, %cond.true224 ], [ null, %cond.false227 ], !dbg !2759
  %call230 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond229, i32 0), !dbg !2759
  %flags231 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call230, i32 0, i32 7, !dbg !2759
  %150 = load i32, i32* %flags231, align 8, !dbg !2759
  %and232 = and i32 %150, 1, !dbg !2759
  %tobool233 = icmp ne i32 %and232, 0, !dbg !2759
  br i1 %tobool233, label %cond.true234, label %cond.false244, !dbg !2759

cond.true234:                                     ; preds = %cond.end228
  %151 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2759
  %succs235 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %151, i32 0, i32 1, !dbg !2759
  %152 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs235, align 8, !dbg !2759
  %tobool236 = icmp ne %struct.VEC_edge_gc* %152, null, !dbg !2759
  br i1 %tobool236, label %cond.true237, label %cond.false240, !dbg !2759

cond.true237:                                     ; preds = %cond.true234
  %153 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2759
  %succs238 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %153, i32 0, i32 1, !dbg !2759
  %154 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs238, align 8, !dbg !2759
  %base239 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %154, i32 0, i32 0, !dbg !2759
  br label %cond.end241, !dbg !2759

cond.false240:                                    ; preds = %cond.true234
  br label %cond.end241, !dbg !2759

cond.end241:                                      ; preds = %cond.false240, %cond.true237
  %cond242 = phi %struct.VEC_edge_base* [ %base239, %cond.true237 ], [ null, %cond.false240 ], !dbg !2759
  %call243 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond242, i32 0), !dbg !2759
  br label %cond.end254, !dbg !2759

cond.false244:                                    ; preds = %cond.end228
  %155 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2759
  %succs245 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %155, i32 0, i32 1, !dbg !2759
  %156 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs245, align 8, !dbg !2759
  %tobool246 = icmp ne %struct.VEC_edge_gc* %156, null, !dbg !2759
  br i1 %tobool246, label %cond.true247, label %cond.false250, !dbg !2759

cond.true247:                                     ; preds = %cond.false244
  %157 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2759
  %succs248 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %157, i32 0, i32 1, !dbg !2759
  %158 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs248, align 8, !dbg !2759
  %base249 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %158, i32 0, i32 0, !dbg !2759
  br label %cond.end251, !dbg !2759

cond.false250:                                    ; preds = %cond.false244
  br label %cond.end251, !dbg !2759

cond.end251:                                      ; preds = %cond.false250, %cond.true247
  %cond252 = phi %struct.VEC_edge_base* [ %base249, %cond.true247 ], [ null, %cond.false250 ], !dbg !2759
  %call253 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond252, i32 1), !dbg !2759
  br label %cond.end254, !dbg !2759

cond.end254:                                      ; preds = %cond.end251, %cond.end241
  %cond255 = phi %struct.edge_def* [ %call243, %cond.end241 ], [ %call253, %cond.end251 ], !dbg !2759
  store %struct.edge_def* %cond255, %struct.edge_def** %f, align 8, !dbg !2760
  %159 = load %struct.rtx_def*, %struct.rtx_def** %note81, align 8, !dbg !2761
  %u256 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %159, i32 0, i32 1, !dbg !2761
  %fld257 = bitcast %union.u* %u256 to [1 x %union.rtunion_def]*, !dbg !2761
  %arrayidx258 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld257, i64 0, i64 0, !dbg !2761
  %rt_rtx259 = bitcast %union.rtunion_def* %arrayidx258 to %struct.rtx_def**, !dbg !2761
  %160 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx259, align 8, !dbg !2761
  %u260 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %160, i32 0, i32 1, !dbg !2761
  %hwint = bitcast %union.u* %u260 to [1 x i64]*, !dbg !2761
  %arrayidx261 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !2761
  %161 = load i64, i64* %arrayidx261, align 8, !dbg !2761
  %conv262 = trunc i64 %161 to i32, !dbg !2761
  %162 = load %struct.edge_def*, %struct.edge_def** %b, align 8, !dbg !2762
  %probability263 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %162, i32 0, i32 8, !dbg !2763
  store i32 %conv262, i32* %probability263, align 4, !dbg !2764
  %163 = load %struct.edge_def*, %struct.edge_def** %b, align 8, !dbg !2765
  %probability264 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %163, i32 0, i32 8, !dbg !2766
  %164 = load i32, i32* %probability264, align 4, !dbg !2766
  %sub = sub nsw i32 10000, %164, !dbg !2767
  %165 = load %struct.edge_def*, %struct.edge_def** %f, align 8, !dbg !2768
  %probability265 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %165, i32 0, i32 8, !dbg !2769
  store i32 %sub, i32* %probability265, align 4, !dbg !2770
  %166 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2771
  %count266 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %166, i32 0, i32 8, !dbg !2772
  %167 = load i64, i64* %count266, align 8, !dbg !2772
  %168 = load %struct.edge_def*, %struct.edge_def** %b, align 8, !dbg !2773
  %probability267 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %168, i32 0, i32 8, !dbg !2774
  %169 = load i32, i32* %probability267, align 4, !dbg !2774
  %conv268 = sext i32 %169 to i64, !dbg !2773
  %mul = mul nsw i64 %167, %conv268, !dbg !2775
  %div = sdiv i64 %mul, 10000, !dbg !2776
  %170 = load %struct.edge_def*, %struct.edge_def** %b, align 8, !dbg !2777
  %count269 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %170, i32 0, i32 9, !dbg !2778
  store i64 %div, i64* %count269, align 8, !dbg !2779
  %171 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2780
  %count270 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %171, i32 0, i32 8, !dbg !2781
  %172 = load i64, i64* %count270, align 8, !dbg !2781
  %173 = load %struct.edge_def*, %struct.edge_def** %f, align 8, !dbg !2782
  %probability271 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %173, i32 0, i32 8, !dbg !2783
  %174 = load i32, i32* %probability271, align 4, !dbg !2783
  %conv272 = sext i32 %174 to i64, !dbg !2782
  %mul273 = mul nsw i64 %172, %conv272, !dbg !2784
  %div274 = sdiv i64 %mul273, 10000, !dbg !2785
  %175 = load %struct.edge_def*, %struct.edge_def** %f, align 8, !dbg !2786
  %count275 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %175, i32 0, i32 9, !dbg !2787
  store i64 %div274, i64* %count275, align 8, !dbg !2788
  br label %if.end276

if.end276:                                        ; preds = %cond.end254, %if.then179
  %176 = load i8, i8* %purged, align 1, !dbg !2789
  store i8 %176, i8* %retval, align 1, !dbg !2790
  br label %return, !dbg !2790

if.else277:                                       ; preds = %for.end
  %177 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2791
  %178 = bitcast %struct.rtx_def* %177 to i32*, !dbg !2791
  %bf.load278 = load i32, i32* %178, align 8, !dbg !2791
  %bf.clear279 = and i32 %bf.load278, 65535, !dbg !2791
  %cmp280 = icmp eq i32 %bf.clear279, 10, !dbg !2791
  br i1 %cmp280, label %land.lhs.true282, label %if.end301, !dbg !2793

land.lhs.true282:                                 ; preds = %if.else277
  %179 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2794
  %180 = bitcast %struct.rtx_def* %179 to i32*, !dbg !2794
  %bf.load283 = load i32, i32* %180, align 8, !dbg !2794
  %bf.lshr = lshr i32 %bf.load283, 24, !dbg !2794
  %bf.clear284 = and i32 %bf.lshr, 1, !dbg !2794
  %tobool285 = icmp ne i32 %bf.clear284, 0, !dbg !2794
  br i1 %tobool285, label %if.then286, label %if.end301, !dbg !2795

if.then286:                                       ; preds = %land.lhs.true282
  %181 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2796
  %call287 = call zeroext i8 @single_succ_p(%struct.basic_block_def* %181), !dbg !2796
  %tobool288 = icmp ne i8 %call287, 0, !dbg !2796
  br i1 %tobool288, label %cond.false290, label %cond.true289, !dbg !2796

cond.true289:                                     ; preds = %if.then286
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 2386, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2796
  br label %cond.end291, !dbg !2796

cond.false290:                                    ; preds = %if.then286
  br label %cond.end291, !dbg !2796

cond.end291:                                      ; preds = %cond.false290, %cond.true289
  %cond292 = phi i32 [ 0, %cond.true289 ], [ 0, %cond.false290 ], !dbg !2796
  %182 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2798
  %call293 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %182), !dbg !2798
  %flags294 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call293, i32 0, i32 7, !dbg !2798
  %183 = load i32, i32* %flags294, align 8, !dbg !2798
  %cmp295 = icmp eq i32 %183, 258, !dbg !2798
  br i1 %cmp295, label %cond.false298, label %cond.true297, !dbg !2798

cond.true297:                                     ; preds = %cond.end291
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 2388, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2798
  br label %cond.end299, !dbg !2798

cond.false298:                                    ; preds = %cond.end291
  br label %cond.end299, !dbg !2798

cond.end299:                                      ; preds = %cond.false298, %cond.true297
  %cond300 = phi i32 [ 0, %cond.true297 ], [ 0, %cond.false298 ], !dbg !2798
  store i8 0, i8* %retval, align 1, !dbg !2799
  br label %return, !dbg !2799

if.end301:                                        ; preds = %land.lhs.true282, %if.else277
  br label %if.end302

if.end302:                                        ; preds = %if.end301
  store i8 0, i8* %found, align 1, !dbg !2800
  %184 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2801
  %succs304 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %184, i32 0, i32 1, !dbg !2801
  %call305 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs304), !dbg !2801
  %185 = bitcast %struct.edge_iterator* %tmp303 to { i32, %struct.VEC_edge_gc** }*, !dbg !2801
  %186 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %185, i32 0, i32 0, !dbg !2801
  %187 = extractvalue { i32, %struct.VEC_edge_gc** } %call305, 0, !dbg !2801
  store i32 %187, i32* %186, align 8, !dbg !2801
  %188 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %185, i32 0, i32 1, !dbg !2801
  %189 = extractvalue { i32, %struct.VEC_edge_gc** } %call305, 1, !dbg !2801
  store %struct.VEC_edge_gc** %189, %struct.VEC_edge_gc*** %188, align 8, !dbg !2801
  %190 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !2801
  %191 = bitcast %struct.edge_iterator* %tmp303 to i8*, !dbg !2801
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %190, i8* align 8 %191, i64 16, i1 false), !dbg !2801
  br label %for.cond306, !dbg !2801

for.cond306:                                      ; preds = %for.inc, %if.end302
  %192 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !2803
  %193 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %192, i32 0, i32 0, !dbg !2803
  %194 = load i32, i32* %193, align 8, !dbg !2803
  %195 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %192, i32 0, i32 1, !dbg !2803
  %196 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %195, align 8, !dbg !2803
  %call307 = call zeroext i8 @ei_cond(i32 %194, %struct.VEC_edge_gc** %196, %struct.edge_def** %e), !dbg !2803
  %tobool308 = icmp ne i8 %call307, 0, !dbg !2801
  br i1 %tobool308, label %for.body309, label %for.end315, !dbg !2801

for.body309:                                      ; preds = %for.cond306
  %197 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2805
  %flags310 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %197, i32 0, i32 7, !dbg !2807
  %198 = load i32, i32* %flags310, align 8, !dbg !2807
  %and311 = and i32 %198, 15, !dbg !2808
  %tobool312 = icmp ne i32 %and311, 0, !dbg !2808
  br i1 %tobool312, label %if.end314, label %if.then313, !dbg !2809

if.then313:                                       ; preds = %for.body309
  store i8 1, i8* %found, align 1, !dbg !2810
  br label %for.end315, !dbg !2812

if.end314:                                        ; preds = %for.body309
  br label %for.inc, !dbg !2813

for.inc:                                          ; preds = %if.end314
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !2803
  br label %for.cond306, !dbg !2803, !llvm.loop !2814

for.end315:                                       ; preds = %if.then313, %for.cond306
  %199 = load i8, i8* %found, align 1, !dbg !2816
  %tobool316 = icmp ne i8 %199, 0, !dbg !2816
  br i1 %tobool316, label %if.end318, label %if.then317, !dbg !2818

if.then317:                                       ; preds = %for.end315
  %200 = load i8, i8* %purged, align 1, !dbg !2819
  store i8 %200, i8* %retval, align 1, !dbg !2820
  br label %return, !dbg !2820

if.end318:                                        ; preds = %for.end315
  %201 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2821
  %succs320 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %201, i32 0, i32 1, !dbg !2821
  %call321 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs320), !dbg !2821
  %202 = bitcast %struct.edge_iterator* %tmp319 to { i32, %struct.VEC_edge_gc** }*, !dbg !2821
  %203 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %202, i32 0, i32 0, !dbg !2821
  %204 = extractvalue { i32, %struct.VEC_edge_gc** } %call321, 0, !dbg !2821
  store i32 %204, i32* %203, align 8, !dbg !2821
  %205 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %202, i32 0, i32 1, !dbg !2821
  %206 = extractvalue { i32, %struct.VEC_edge_gc** } %call321, 1, !dbg !2821
  store %struct.VEC_edge_gc** %206, %struct.VEC_edge_gc*** %205, align 8, !dbg !2821
  %207 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !2821
  %208 = bitcast %struct.edge_iterator* %tmp319 to i8*, !dbg !2821
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %207, i8* align 8 %208, i64 16, i1 false), !dbg !2821
  br label %for.cond322, !dbg !2823

for.cond322:                                      ; preds = %if.end331, %if.end318
  %209 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !2824
  %210 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %209, i32 0, i32 0, !dbg !2824
  %211 = load i32, i32* %210, align 8, !dbg !2824
  %212 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %209, i32 0, i32 1, !dbg !2824
  %213 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %212, align 8, !dbg !2824
  %call323 = call %struct.edge_def* @ei_safe_edge(i32 %211, %struct.VEC_edge_gc** %213), !dbg !2824
  store %struct.edge_def* %call323, %struct.edge_def** %e, align 8, !dbg !2826
  %tobool324 = icmp ne %struct.edge_def* %call323, null, !dbg !2827
  br i1 %tobool324, label %for.body325, label %for.end332, !dbg !2827

for.body325:                                      ; preds = %for.cond322
  %214 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2828
  %flags326 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %214, i32 0, i32 7, !dbg !2831
  %215 = load i32, i32* %flags326, align 8, !dbg !2831
  %and327 = and i32 %215, 17, !dbg !2832
  %tobool328 = icmp ne i32 %and327, 0, !dbg !2832
  br i1 %tobool328, label %if.else330, label %if.then329, !dbg !2833

if.then329:                                       ; preds = %for.body325
  %216 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2834
  call void @df_set_bb_dirty(%struct.basic_block_def* %216), !dbg !2836
  %217 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2837
  call void @remove_edge(%struct.edge_def* %217), !dbg !2838
  store i8 1, i8* %purged, align 1, !dbg !2839
  br label %if.end331, !dbg !2840

if.else330:                                       ; preds = %for.body325
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !2841
  br label %if.end331

if.end331:                                        ; preds = %if.else330, %if.then329
  br label %for.cond322, !dbg !2842, !llvm.loop !2843

for.end332:                                       ; preds = %for.cond322
  %218 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2845
  %call333 = call zeroext i8 @single_succ_p(%struct.basic_block_def* %218), !dbg !2845
  %tobool334 = icmp ne i8 %call333, 0, !dbg !2845
  br i1 %tobool334, label %cond.false336, label %cond.true335, !dbg !2845

cond.true335:                                     ; preds = %for.end332
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 2424, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2845
  br label %cond.end337, !dbg !2845

cond.false336:                                    ; preds = %for.end332
  br label %cond.end337, !dbg !2845

cond.end337:                                      ; preds = %cond.false336, %cond.true335
  %cond338 = phi i32 [ 0, %cond.true335 ], [ 0, %cond.false336 ], !dbg !2845
  %219 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2846
  %call339 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %219), !dbg !2847
  %probability340 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call339, i32 0, i32 8, !dbg !2848
  store i32 10000, i32* %probability340, align 4, !dbg !2849
  %220 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2850
  %count341 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %220, i32 0, i32 8, !dbg !2851
  %221 = load i64, i64* %count341, align 8, !dbg !2851
  %222 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2852
  %call342 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %222), !dbg !2853
  %count343 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call342, i32 0, i32 9, !dbg !2854
  store i64 %221, i64* %count343, align 8, !dbg !2855
  %223 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2856
  %tobool344 = icmp ne %struct._IO_FILE* %223, null, !dbg !2856
  br i1 %tobool344, label %if.then345, label %if.end348, !dbg !2858

if.then345:                                       ; preds = %cond.end337
  %224 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2859
  %225 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2860
  %index346 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %225, i32 0, i32 9, !dbg !2861
  %226 = load i32, i32* %index346, align 8, !dbg !2861
  %call347 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %224, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.18, i64 0, i64 0), i32 %226), !dbg !2862
  br label %if.end348, !dbg !2862

if.end348:                                        ; preds = %if.then345, %cond.end337
  %227 = load i8, i8* %purged, align 1, !dbg !2863
  store i8 %227, i8* %retval, align 1, !dbg !2864
  br label %return, !dbg !2864

return:                                           ; preds = %if.end348, %if.then317, %cond.end299, %if.end276, %if.then186, %if.then175, %if.then168, %if.then91
  %228 = load i8, i8* %retval, align 1, !dbg !2865
  ret i8 %228, !dbg !2865
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @delete_insn_chain(%struct.rtx_def* %start, %struct.rtx_def* %finish, i8 zeroext %clear_bb) #0 !dbg !2866 {
entry:
  %start.addr = alloca %struct.rtx_def*, align 8
  %finish.addr = alloca %struct.rtx_def*, align 8
  %clear_bb.addr = alloca i8, align 1
  %next = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %start, %struct.rtx_def** %start.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %start.addr, metadata !2869, metadata !DIExpression()), !dbg !2870
  store %struct.rtx_def* %finish, %struct.rtx_def** %finish.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %finish.addr, metadata !2871, metadata !DIExpression()), !dbg !2872
  store i8 %clear_bb, i8* %clear_bb.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %clear_bb.addr, metadata !2873, metadata !DIExpression()), !dbg !2874
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %next, metadata !2875, metadata !DIExpression()), !dbg !2876
  br label %while.body, !dbg !2877

while.body:                                       ; preds = %entry, %if.end15
  %0 = load %struct.rtx_def*, %struct.rtx_def** %start.addr, align 8, !dbg !2878
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !2878
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !2878
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !2878
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !2878
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !2878
  store %struct.rtx_def* %1, %struct.rtx_def** %next, align 8, !dbg !2880
  %2 = load %struct.rtx_def*, %struct.rtx_def** %start.addr, align 8, !dbg !2881
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !2881
  %bf.load = load i32, i32* %3, align 8, !dbg !2881
  %bf.clear = and i32 %bf.load, 65535, !dbg !2881
  %cmp = icmp eq i32 %bf.clear, 13, !dbg !2881
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !2883

land.lhs.true:                                    ; preds = %while.body
  %4 = load %struct.rtx_def*, %struct.rtx_def** %start.addr, align 8, !dbg !2884
  %call = call i32 @can_delete_note_p(%struct.rtx_def* %4), !dbg !2885
  %tobool = icmp ne i32 %call, 0, !dbg !2885
  br i1 %tobool, label %if.else, label %if.then, !dbg !2886

if.then:                                          ; preds = %land.lhs.true
  br label %if.end, !dbg !2886

if.else:                                          ; preds = %land.lhs.true, %while.body
  %5 = load %struct.rtx_def*, %struct.rtx_def** %start.addr, align 8, !dbg !2887
  %call1 = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %5), !dbg !2888
  store %struct.rtx_def* %call1, %struct.rtx_def** %next, align 8, !dbg !2889
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %6 = load i8, i8* %clear_bb.addr, align 1, !dbg !2890
  %conv = zext i8 %6 to i32, !dbg !2890
  %tobool2 = icmp ne i32 %conv, 0, !dbg !2890
  br i1 %tobool2, label %land.lhs.true3, label %if.end11, !dbg !2892

land.lhs.true3:                                   ; preds = %if.end
  %7 = load %struct.rtx_def*, %struct.rtx_def** %start.addr, align 8, !dbg !2893
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !2893
  %bf.load4 = load i32, i32* %8, align 8, !dbg !2893
  %bf.lshr = lshr i32 %bf.load4, 27, !dbg !2893
  %bf.clear5 = and i32 %bf.lshr, 1, !dbg !2893
  %tobool6 = icmp ne i32 %bf.clear5, 0, !dbg !2893
  br i1 %tobool6, label %if.end11, label %if.then7, !dbg !2894

if.then7:                                         ; preds = %land.lhs.true3
  %9 = load %struct.rtx_def*, %struct.rtx_def** %start.addr, align 8, !dbg !2895
  %u8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !2895
  %fld9 = bitcast %union.u* %u8 to [1 x %union.rtunion_def]*, !dbg !2895
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i64 0, i64 3, !dbg !2895
  %rt_bb = bitcast %union.rtunion_def* %arrayidx10 to %struct.basic_block_def**, !dbg !2895
  store %struct.basic_block_def* null, %struct.basic_block_def** %rt_bb, align 8, !dbg !2895
  br label %if.end11, !dbg !2895

if.end11:                                         ; preds = %if.then7, %land.lhs.true3, %if.end
  %10 = load %struct.rtx_def*, %struct.rtx_def** %start.addr, align 8, !dbg !2896
  %11 = load %struct.rtx_def*, %struct.rtx_def** %finish.addr, align 8, !dbg !2898
  %cmp12 = icmp eq %struct.rtx_def* %10, %11, !dbg !2899
  br i1 %cmp12, label %if.then14, label %if.end15, !dbg !2900

if.then14:                                        ; preds = %if.end11
  br label %while.end, !dbg !2901

if.end15:                                         ; preds = %if.end11
  %12 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !2902
  store %struct.rtx_def* %12, %struct.rtx_def** %start.addr, align 8, !dbg !2903
  br label %while.body, !dbg !2877, !llvm.loop !2904

while.end:                                        ; preds = %if.then14
  ret void, !dbg !2906
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @can_delete_note_p(%struct.rtx_def* %note) #0 !dbg !2907 {
entry:
  %retval = alloca i32, align 4
  %note.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %note, %struct.rtx_def** %note.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note.addr, metadata !2908, metadata !DIExpression()), !dbg !2909
  %0 = load %struct.rtx_def*, %struct.rtx_def** %note.addr, align 8, !dbg !2910
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !2910
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !2910
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !2910
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !2910
  %1 = load i32, i32* %rt_int, align 8, !dbg !2910
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb
    i32 10, label %sw.bb
    i32 6, label %sw.bb
  ], !dbg !2911

sw.bb:                                            ; preds = %entry, %entry, %entry
  store i32 1, i32* %retval, align 4, !dbg !2912
  br label %return, !dbg !2912

sw.default:                                       ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !2914
  br label %return, !dbg !2914

return:                                           ; preds = %sw.default, %sw.bb
  %2 = load i32, i32* %retval, align 4, !dbg !2915
  ret i32 %2, !dbg !2915
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.basic_block_def* @create_basic_block_structure(%struct.rtx_def* %head, %struct.rtx_def* %end, %struct.rtx_def* %bb_note, %struct.basic_block_def* %after) #0 !dbg !2916 {
entry:
  %head.addr = alloca %struct.rtx_def*, align 8
  %end.addr = alloca %struct.rtx_def*, align 8
  %bb_note.addr = alloca %struct.rtx_def*, align 8
  %after.addr = alloca %struct.basic_block_def*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %after3 = alloca %struct.rtx_def*, align 8
  %bb_ = alloca %struct.basic_block_def*, align 8
  store %struct.rtx_def* %head, %struct.rtx_def** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %head.addr, metadata !2919, metadata !DIExpression()), !dbg !2920
  store %struct.rtx_def* %end, %struct.rtx_def** %end.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %end.addr, metadata !2921, metadata !DIExpression()), !dbg !2922
  store %struct.rtx_def* %bb_note, %struct.rtx_def** %bb_note.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %bb_note.addr, metadata !2923, metadata !DIExpression()), !dbg !2924
  store %struct.basic_block_def* %after, %struct.basic_block_def** %after.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %after.addr, metadata !2925, metadata !DIExpression()), !dbg !2926
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !2927, metadata !DIExpression()), !dbg !2928
  %0 = load %struct.rtx_def*, %struct.rtx_def** %bb_note.addr, align 8, !dbg !2929
  %tobool = icmp ne %struct.rtx_def* %0, null, !dbg !2929
  br i1 %tobool, label %land.lhs.true, label %if.else18, !dbg !2931

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %bb_note.addr, align 8, !dbg !2932
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !2932
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !2932
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 4, !dbg !2932
  %rt_bb = bitcast %union.rtunion_def* %arrayidx to %struct.basic_block_def**, !dbg !2932
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !2932
  store %struct.basic_block_def* %2, %struct.basic_block_def** %bb, align 8, !dbg !2933
  %cmp = icmp ne %struct.basic_block_def* %2, null, !dbg !2934
  br i1 %cmp, label %land.lhs.true1, label %if.else18, !dbg !2935

land.lhs.true1:                                   ; preds = %land.lhs.true
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2936
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 2, !dbg !2937
  %4 = load i8*, i8** %aux, align 8, !dbg !2937
  %cmp2 = icmp eq i8* %4, null, !dbg !2938
  br i1 %cmp2, label %if.then, label %if.else18, !dbg !2939

if.then:                                          ; preds = %land.lhs.true1
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %after3, metadata !2940, metadata !DIExpression()), !dbg !2942
  %5 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !2943
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !2943
  %bf.load = load i32, i32* %6, align 8, !dbg !2943
  %bf.clear = and i32 %bf.load, 65535, !dbg !2943
  %cmp4 = icmp eq i32 %bf.clear, 12, !dbg !2943
  br i1 %cmp4, label %if.then5, label %if.else, !dbg !2945

if.then5:                                         ; preds = %if.then
  %7 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !2946
  store %struct.rtx_def* %7, %struct.rtx_def** %after3, align 8, !dbg !2947
  br label %if.end, !dbg !2948

if.else:                                          ; preds = %if.then
  %8 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !2949
  %u6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !2949
  %fld7 = bitcast %union.u* %u6 to [1 x %union.rtunion_def]*, !dbg !2949
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i64 0, i64 1, !dbg !2949
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx8 to %struct.rtx_def**, !dbg !2949
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !2949
  store %struct.rtx_def* %9, %struct.rtx_def** %after3, align 8, !dbg !2951
  %10 = load %struct.rtx_def*, %struct.rtx_def** %bb_note.addr, align 8, !dbg !2952
  store %struct.rtx_def* %10, %struct.rtx_def** %head.addr, align 8, !dbg !2953
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then5
  %11 = load %struct.rtx_def*, %struct.rtx_def** %after3, align 8, !dbg !2954
  %12 = load %struct.rtx_def*, %struct.rtx_def** %bb_note.addr, align 8, !dbg !2956
  %cmp9 = icmp ne %struct.rtx_def* %11, %12, !dbg !2957
  br i1 %cmp9, label %land.lhs.true10, label %if.end17, !dbg !2958

land.lhs.true10:                                  ; preds = %if.end
  %13 = load %struct.rtx_def*, %struct.rtx_def** %after3, align 8, !dbg !2959
  %u11 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !2959
  %fld12 = bitcast %union.u* %u11 to [1 x %union.rtunion_def]*, !dbg !2959
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i64 0, i64 2, !dbg !2959
  %rt_rtx14 = bitcast %union.rtunion_def* %arrayidx13 to %struct.rtx_def**, !dbg !2959
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx14, align 8, !dbg !2959
  %15 = load %struct.rtx_def*, %struct.rtx_def** %bb_note.addr, align 8, !dbg !2960
  %cmp15 = icmp ne %struct.rtx_def* %14, %15, !dbg !2961
  br i1 %cmp15, label %if.then16, label %if.end17, !dbg !2962

if.then16:                                        ; preds = %land.lhs.true10
  %16 = load %struct.rtx_def*, %struct.rtx_def** %bb_note.addr, align 8, !dbg !2963
  %17 = load %struct.rtx_def*, %struct.rtx_def** %bb_note.addr, align 8, !dbg !2964
  %18 = load %struct.rtx_def*, %struct.rtx_def** %after3, align 8, !dbg !2965
  call void @reorder_insns_nobb(%struct.rtx_def* %16, %struct.rtx_def* %17, %struct.rtx_def* %18), !dbg !2966
  br label %if.end17, !dbg !2966

if.end17:                                         ; preds = %if.then16, %land.lhs.true10, %if.end
  br label %if.end47, !dbg !2967

if.else18:                                        ; preds = %land.lhs.true1, %land.lhs.true, %entry
  %call = call %struct.basic_block_def* @alloc_block(), !dbg !2968
  store %struct.basic_block_def* %call, %struct.basic_block_def** %bb, align 8, !dbg !2970
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2971
  call void @init_rtl_bb_info(%struct.basic_block_def* %19), !dbg !2972
  %20 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !2973
  %tobool19 = icmp ne %struct.rtx_def* %20, null, !dbg !2973
  br i1 %tobool19, label %if.else25, label %land.lhs.true20, !dbg !2975

land.lhs.true20:                                  ; preds = %if.else18
  %21 = load %struct.rtx_def*, %struct.rtx_def** %end.addr, align 8, !dbg !2976
  %tobool21 = icmp ne %struct.rtx_def* %21, null, !dbg !2976
  br i1 %tobool21, label %if.else25, label %if.then22, !dbg !2977

if.then22:                                        ; preds = %land.lhs.true20
  %call23 = call %struct.rtx_def* @get_last_insn(), !dbg !2978
  %call24 = call %struct.rtx_def* @emit_note_after(i32 10, %struct.rtx_def* %call23), !dbg !2979
  store %struct.rtx_def* %call24, %struct.rtx_def** %bb_note.addr, align 8, !dbg !2980
  store %struct.rtx_def* %call24, %struct.rtx_def** %end.addr, align 8, !dbg !2981
  store %struct.rtx_def* %call24, %struct.rtx_def** %head.addr, align 8, !dbg !2982
  br label %if.end42, !dbg !2983

if.else25:                                        ; preds = %land.lhs.true20, %if.else18
  %22 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !2984
  %23 = bitcast %struct.rtx_def* %22 to i32*, !dbg !2984
  %bf.load26 = load i32, i32* %23, align 8, !dbg !2984
  %bf.clear27 = and i32 %bf.load26, 65535, !dbg !2984
  %cmp28 = icmp eq i32 %bf.clear27, 12, !dbg !2984
  br i1 %cmp28, label %land.lhs.true29, label %if.else36, !dbg !2986

land.lhs.true29:                                  ; preds = %if.else25
  %24 = load %struct.rtx_def*, %struct.rtx_def** %end.addr, align 8, !dbg !2987
  %tobool30 = icmp ne %struct.rtx_def* %24, null, !dbg !2987
  br i1 %tobool30, label %if.then31, label %if.else36, !dbg !2988

if.then31:                                        ; preds = %land.lhs.true29
  %25 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !2989
  %call32 = call %struct.rtx_def* @emit_note_after(i32 10, %struct.rtx_def* %25), !dbg !2991
  store %struct.rtx_def* %call32, %struct.rtx_def** %bb_note.addr, align 8, !dbg !2992
  %26 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !2993
  %27 = load %struct.rtx_def*, %struct.rtx_def** %end.addr, align 8, !dbg !2995
  %cmp33 = icmp eq %struct.rtx_def* %26, %27, !dbg !2996
  br i1 %cmp33, label %if.then34, label %if.end35, !dbg !2997

if.then34:                                        ; preds = %if.then31
  %28 = load %struct.rtx_def*, %struct.rtx_def** %bb_note.addr, align 8, !dbg !2998
  store %struct.rtx_def* %28, %struct.rtx_def** %end.addr, align 8, !dbg !2999
  br label %if.end35, !dbg !3000

if.end35:                                         ; preds = %if.then34, %if.then31
  br label %if.end41, !dbg !3001

if.else36:                                        ; preds = %land.lhs.true29, %if.else25
  %29 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !3002
  %call37 = call %struct.rtx_def* @emit_note_before(i32 10, %struct.rtx_def* %29), !dbg !3004
  store %struct.rtx_def* %call37, %struct.rtx_def** %bb_note.addr, align 8, !dbg !3005
  %30 = load %struct.rtx_def*, %struct.rtx_def** %bb_note.addr, align 8, !dbg !3006
  store %struct.rtx_def* %30, %struct.rtx_def** %head.addr, align 8, !dbg !3007
  %31 = load %struct.rtx_def*, %struct.rtx_def** %end.addr, align 8, !dbg !3008
  %tobool38 = icmp ne %struct.rtx_def* %31, null, !dbg !3008
  br i1 %tobool38, label %if.end40, label %if.then39, !dbg !3010

if.then39:                                        ; preds = %if.else36
  %32 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !3011
  store %struct.rtx_def* %32, %struct.rtx_def** %end.addr, align 8, !dbg !3012
  br label %if.end40, !dbg !3013

if.end40:                                         ; preds = %if.then39, %if.else36
  br label %if.end41

if.end41:                                         ; preds = %if.end40, %if.end35
  br label %if.end42

if.end42:                                         ; preds = %if.end41, %if.then22
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3014
  %34 = load %struct.rtx_def*, %struct.rtx_def** %bb_note.addr, align 8, !dbg !3015
  %u43 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %34, i32 0, i32 1, !dbg !3015
  %fld44 = bitcast %union.u* %u43 to [1 x %union.rtunion_def]*, !dbg !3015
  %arrayidx45 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld44, i64 0, i64 4, !dbg !3015
  %rt_bb46 = bitcast %union.rtunion_def* %arrayidx45 to %struct.basic_block_def**, !dbg !3015
  store %struct.basic_block_def* %33, %struct.basic_block_def** %rt_bb46, align 8, !dbg !3016
  br label %if.end47

if.end47:                                         ; preds = %if.end42, %if.end17
  %35 = load %struct.rtx_def*, %struct.rtx_def** %end.addr, align 8, !dbg !3017
  %u48 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1, !dbg !3017
  %fld49 = bitcast %union.u* %u48 to [1 x %union.rtunion_def]*, !dbg !3017
  %arrayidx50 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld49, i64 0, i64 2, !dbg !3017
  %rt_rtx51 = bitcast %union.rtunion_def* %arrayidx50 to %struct.rtx_def**, !dbg !3017
  %36 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx51, align 8, !dbg !3017
  %37 = load %struct.rtx_def*, %struct.rtx_def** %bb_note.addr, align 8, !dbg !3019
  %cmp52 = icmp eq %struct.rtx_def* %36, %37, !dbg !3020
  br i1 %cmp52, label %if.then53, label %if.end54, !dbg !3021

if.then53:                                        ; preds = %if.end47
  %38 = load %struct.rtx_def*, %struct.rtx_def** %bb_note.addr, align 8, !dbg !3022
  store %struct.rtx_def* %38, %struct.rtx_def** %end.addr, align 8, !dbg !3023
  br label %if.end54, !dbg !3024

if.end54:                                         ; preds = %if.then53, %if.end47
  %39 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !3025
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3026
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %40, i32 0, i32 7, !dbg !3026
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !3026
  %41 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !3026
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %41, i32 0, i32 0, !dbg !3026
  store %struct.rtx_def* %39, %struct.rtx_def** %head_, align 8, !dbg !3027
  %42 = load %struct.rtx_def*, %struct.rtx_def** %end.addr, align 8, !dbg !3028
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3029
  %il55 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %43, i32 0, i32 7, !dbg !3029
  %rtl56 = bitcast %union.basic_block_il_dependent* %il55 to %struct.rtl_bb_info**, !dbg !3029
  %44 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl56, align 8, !dbg !3029
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %44, i32 0, i32 1, !dbg !3029
  store %struct.rtx_def* %42, %struct.rtx_def** %end_, align 8, !dbg !3030
  %45 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3031
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %45, i64 0, !dbg !3031
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3031
  %46 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3031
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %46, i32 0, i32 5, !dbg !3031
  %47 = load i32, i32* %x_last_basic_block, align 8, !dbg !3032
  %inc = add nsw i32 %47, 1, !dbg !3032
  store i32 %inc, i32* %x_last_basic_block, align 8, !dbg !3032
  %48 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3033
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %48, i32 0, i32 9, !dbg !3034
  store i32 %47, i32* %index, align 8, !dbg !3035
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3036
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %49, i32 0, i32 13, !dbg !3037
  store i32 513, i32* %flags, align 8, !dbg !3038
  %50 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3039
  %51 = load %struct.basic_block_def*, %struct.basic_block_def** %after.addr, align 8, !dbg !3040
  call void @link_block(%struct.basic_block_def* %50, %struct.basic_block_def* %51), !dbg !3041
  %52 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3042
  %add.ptr57 = getelementptr inbounds %struct.function, %struct.function* %52, i64 0, !dbg !3042
  %cfg58 = getelementptr inbounds %struct.function, %struct.function* %add.ptr57, i32 0, i32 1, !dbg !3042
  %53 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg58, align 8, !dbg !3042
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %53, i32 0, i32 2, !dbg !3042
  %54 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !3042
  %tobool59 = icmp ne %struct.VEC_basic_block_gc* %54, null, !dbg !3042
  br i1 %tobool59, label %cond.true, label %cond.false, !dbg !3042

cond.true:                                        ; preds = %if.end54
  %55 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3042
  %add.ptr60 = getelementptr inbounds %struct.function, %struct.function* %55, i64 0, !dbg !3042
  %cfg61 = getelementptr inbounds %struct.function, %struct.function* %add.ptr60, i32 0, i32 1, !dbg !3042
  %56 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg61, align 8, !dbg !3042
  %x_basic_block_info62 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %56, i32 0, i32 2, !dbg !3042
  %57 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info62, align 8, !dbg !3042
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %57, i32 0, i32 0, !dbg !3042
  br label %cond.end, !dbg !3042

cond.false:                                       ; preds = %if.end54
  br label %cond.end, !dbg !3042

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3042
  %58 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3042
  %index63 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %58, i32 0, i32 9, !dbg !3042
  %59 = load i32, i32* %index63, align 8, !dbg !3042
  %60 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3042
  %call64 = call %struct.basic_block_def* @VEC_basic_block_base_replace(%struct.VEC_basic_block_base* %cond, i32 %59, %struct.basic_block_def* %60), !dbg !3042
  %61 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3043
  %index65 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %61, i32 0, i32 9, !dbg !3044
  %62 = load i32, i32* %index65, align 8, !dbg !3044
  call void @df_bb_refs_record(i32 %62, i8 zeroext 0), !dbg !3045
  %63 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3046
  call void @update_bb_for_insn(%struct.basic_block_def* %63), !dbg !3047
  br label %do.body, !dbg !3048

do.body:                                          ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb_, metadata !3049, metadata !DIExpression()), !dbg !3051
  %64 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3051
  store %struct.basic_block_def* %64, %struct.basic_block_def** %bb_, align 8, !dbg !3051
  %65 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_, align 8, !dbg !3051
  %flags66 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %65, i32 0, i32 13, !dbg !3051
  %66 = load i32, i32* %flags66, align 8, !dbg !3051
  %and = and i32 %66, -97, !dbg !3051
  %67 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_, align 8, !dbg !3051
  %flags67 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %67, i32 0, i32 13, !dbg !3051
  store i32 %and, i32* %flags67, align 8, !dbg !3051
  br label %do.end, !dbg !3051

do.end:                                           ; preds = %do.body
  %68 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3052
  %69 = bitcast %struct.basic_block_def* %68 to i8*, !dbg !3052
  %70 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3053
  %aux68 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %70, i32 0, i32 2, !dbg !3054
  store i8* %69, i8** %aux68, align 8, !dbg !3055
  %71 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3056
  ret %struct.basic_block_def* %71, !dbg !3057
}

declare dso_local void @reorder_insns_nobb(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.basic_block_def* @alloc_block() #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @init_rtl_bb_info(%struct.basic_block_def* %bb) #0 !dbg !3058 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !3059, metadata !DIExpression()), !dbg !3060
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3061
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 7, !dbg !3061
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !3061
  %1 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !3061
  %tobool = icmp ne %struct.rtl_bb_info* %1, null, !dbg !3061
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3061

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 3064, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3061
  br label %cond.end, !dbg !3061

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3061

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3061
  %call = call i8* @ggc_alloc_cleared_stat(i64 40), !dbg !3062
  %2 = bitcast i8* %call to %struct.rtl_bb_info*, !dbg !3062
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3063
  %il1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 7, !dbg !3064
  %rtl2 = bitcast %union.basic_block_il_dependent* %il1 to %struct.rtl_bb_info**, !dbg !3065
  store %struct.rtl_bb_info* %2, %struct.rtl_bb_info** %rtl2, align 8, !dbg !3066
  ret void, !dbg !3067
}

declare dso_local %struct.rtx_def* @emit_note_after(i32, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @get_last_insn() #2

declare dso_local %struct.rtx_def* @emit_note_before(i32, %struct.rtx_def*) #2

declare dso_local void @link_block(%struct.basic_block_def*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @VEC_basic_block_base_replace(%struct.VEC_basic_block_base* %vec_, i32 %ix_, %struct.basic_block_def* %obj_) #0 !dbg !3068 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  %ix_.addr = alloca i32, align 4
  %obj_.addr = alloca %struct.basic_block_def*, align 8
  %old_obj_ = alloca %struct.basic_block_def*, align 8
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !3072, metadata !DIExpression()), !dbg !3073
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3074, metadata !DIExpression()), !dbg !3073
  store %struct.basic_block_def* %obj_, %struct.basic_block_def** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %obj_.addr, metadata !3075, metadata !DIExpression()), !dbg !3073
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %old_obj_, metadata !3076, metadata !DIExpression()), !dbg !3073
  %0 = load i32, i32* %ix_.addr, align 4, !dbg !3073
  %1 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !3073
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %1, i32 0, i32 0, !dbg !3073
  %2 = load i32, i32* %num, align 8, !dbg !3073
  %cmp = icmp ult i32 %0, %2, !dbg !3073
  %conv = zext i1 %cmp to i32, !dbg !3073
  %3 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !3073
  %vec = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %3, i32 0, i32 2, !dbg !3073
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !3073
  %idxprom = zext i32 %4 to i64, !dbg !3073
  %arrayidx = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %vec, i64 0, i64 %idxprom, !dbg !3073
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !3073
  store %struct.basic_block_def* %5, %struct.basic_block_def** %old_obj_, align 8, !dbg !3073
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %obj_.addr, align 8, !dbg !3073
  %7 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !3073
  %vec1 = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %7, i32 0, i32 2, !dbg !3073
  %8 = load i32, i32* %ix_.addr, align 4, !dbg !3073
  %idxprom2 = zext i32 %8 to i64, !dbg !3073
  %arrayidx3 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %vec1, i64 0, i64 %idxprom2, !dbg !3073
  store %struct.basic_block_def* %6, %struct.basic_block_def** %arrayidx3, align 8, !dbg !3073
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %old_obj_, align 8, !dbg !3073
  ret %struct.basic_block_def* %9, !dbg !3073
}

declare dso_local void @df_bb_refs_record(i32, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @update_bb_for_insn(%struct.basic_block_def* %bb) #0 !dbg !3077 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !3078, metadata !DIExpression()), !dbg !3079
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3080
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 7, !dbg !3080
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !3080
  %1 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !3080
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %1, i32 0, i32 0, !dbg !3080
  %2 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !3080
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3081
  %il1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 7, !dbg !3081
  %rtl2 = bitcast %union.basic_block_il_dependent* %il1 to %struct.rtl_bb_info**, !dbg !3081
  %4 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl2, align 8, !dbg !3081
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %4, i32 0, i32 1, !dbg !3081
  %5 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !3081
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3082
  call void @update_bb_for_insn_chain(%struct.rtx_def* %2, %struct.rtx_def* %5, %struct.basic_block_def* %6), !dbg !3083
  ret void, !dbg !3084
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @compute_bb_for_insn() #0 !dbg !3085 {
entry:
  %bb = alloca %struct.basic_block_def*, align 8
  %end = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !3088, metadata !DIExpression()), !dbg !3089
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3090
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3090
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3090
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3090
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !3090
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !3090
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 6, !dbg !3090
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !3090
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb, align 8, !dbg !3090
  br label %for.cond, !dbg !3090

for.cond:                                         ; preds = %for.inc10, %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3092
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3092
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !3092
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !3092
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !3092
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 1, !dbg !3092
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !3092
  %cmp = icmp ne %struct.basic_block_def* %4, %7, !dbg !3092
  br i1 %cmp, label %for.body, label %for.end12, !dbg !3090

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %end, metadata !3094, metadata !DIExpression()), !dbg !3096
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3097
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 7, !dbg !3097
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !3097
  %9 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !3097
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %9, i32 0, i32 1, !dbg !3097
  %10 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !3097
  store %struct.rtx_def* %10, %struct.rtx_def** %end, align 8, !dbg !3096
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !3098, metadata !DIExpression()), !dbg !3099
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3100
  %il3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 7, !dbg !3100
  %rtl4 = bitcast %union.basic_block_il_dependent* %il3 to %struct.rtl_bb_info**, !dbg !3100
  %12 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl4, align 8, !dbg !3100
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %12, i32 0, i32 0, !dbg !3100
  %13 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !3100
  store %struct.rtx_def* %13, %struct.rtx_def** %insn, align 8, !dbg !3102
  br label %for.cond5, !dbg !3103

for.cond5:                                        ; preds = %for.inc, %for.body
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3104
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3107
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !3107
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3107
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !3107
  %rt_bb = bitcast %union.rtunion_def* %arrayidx to %struct.basic_block_def**, !dbg !3107
  store %struct.basic_block_def* %14, %struct.basic_block_def** %rt_bb, align 8, !dbg !3108
  %16 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3109
  %17 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8, !dbg !3111
  %cmp6 = icmp eq %struct.rtx_def* %16, %17, !dbg !3112
  br i1 %cmp6, label %if.then, label %if.end, !dbg !3113

if.then:                                          ; preds = %for.cond5
  br label %for.end, !dbg !3114

if.end:                                           ; preds = %for.cond5
  br label %for.inc, !dbg !3115

for.inc:                                          ; preds = %if.end
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3116
  %u7 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1, !dbg !3116
  %fld8 = bitcast %union.u* %u7 to [1 x %union.rtunion_def]*, !dbg !3116
  %arrayidx9 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld8, i64 0, i64 2, !dbg !3116
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx9 to %struct.rtx_def**, !dbg !3116
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !3116
  store %struct.rtx_def* %19, %struct.rtx_def** %insn, align 8, !dbg !3117
  br label %for.cond5, !dbg !3118, !llvm.loop !3119

for.end:                                          ; preds = %if.then
  br label %for.inc10, !dbg !3122

for.inc10:                                        ; preds = %for.end
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3092
  %next_bb11 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %20, i32 0, i32 6, !dbg !3092
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb11, align 8, !dbg !3092
  store %struct.basic_block_def* %21, %struct.basic_block_def** %bb, align 8, !dbg !3092
  br label %for.cond, !dbg !3092, !llvm.loop !3123

for.end12:                                        ; preds = %for.cond
  ret void, !dbg !3125
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @free_bb_for_insn() #0 !dbg !3126 {
entry:
  %insn = alloca %struct.rtx_def*, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !3127, metadata !DIExpression()), !dbg !3128
  %call = call %struct.rtx_def* @get_insns(), !dbg !3129
  store %struct.rtx_def* %call, %struct.rtx_def** %insn, align 8, !dbg !3131
  br label %for.cond, !dbg !3132

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3133
  %tobool = icmp ne %struct.rtx_def* %0, null, !dbg !3135
  br i1 %tobool, label %for.body, label %for.end, !dbg !3135

for.body:                                         ; preds = %for.cond
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3136
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !3136
  %bf.load = load i32, i32* %2, align 8, !dbg !3136
  %bf.clear = and i32 %bf.load, 65535, !dbg !3136
  %cmp = icmp eq i32 %bf.clear, 11, !dbg !3136
  br i1 %cmp, label %if.end, label %if.then, !dbg !3138

if.then:                                          ; preds = %for.body
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3139
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !3139
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3139
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !3139
  %rt_bb = bitcast %union.rtunion_def* %arrayidx to %struct.basic_block_def**, !dbg !3139
  store %struct.basic_block_def* null, %struct.basic_block_def** %rt_bb, align 8, !dbg !3140
  br label %if.end, !dbg !3139

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !3136

for.inc:                                          ; preds = %if.end
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3141
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !3141
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !3141
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 2, !dbg !3141
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**, !dbg !3141
  %5 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !3141
  store %struct.rtx_def* %5, %struct.rtx_def** %insn, align 8, !dbg !3142
  br label %for.cond, !dbg !3143, !llvm.loop !3144

for.end:                                          ; preds = %for.cond
  ret i32 0, !dbg !3146
}

declare dso_local %struct.rtx_def* @get_insns() #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @rest_of_pass_free_cfg() #0 !dbg !3147 {
entry:
  %call = call i32 @free_bb_for_insn(), !dbg !3148
  ret i32 0, !dbg !3149
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @entry_of_function() #0 !dbg !3150 {
entry:
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3153
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3153
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3153
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3153
  %x_n_basic_blocks = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 3, !dbg !3153
  %2 = load i32, i32* %x_n_basic_blocks, align 8, !dbg !3153
  %cmp = icmp sgt i32 %2, 2, !dbg !3154
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !3153

cond.true:                                        ; preds = %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3155
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !3155
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !3155
  %4 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !3155
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %4, i32 0, i32 0, !dbg !3155
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !3155
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %5, i32 0, i32 6, !dbg !3155
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !3155
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 7, !dbg !3155
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !3155
  %7 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !3155
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %7, i32 0, i32 0, !dbg !3155
  %8 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !3155
  br label %cond.end, !dbg !3153

cond.false:                                       ; preds = %entry
  %call = call %struct.rtx_def* @get_insns(), !dbg !3156
  br label %cond.end, !dbg !3153

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %8, %cond.true ], [ %call, %cond.false ], !dbg !3153
  ret %struct.rtx_def* %cond, !dbg !3157
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @emit_insn_at_entry(%struct.rtx_def* %insn) #0 !dbg !3158 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %e = alloca %struct.edge_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !3161, metadata !DIExpression()), !dbg !3162
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !3163, metadata !DIExpression()), !dbg !3164
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3165
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3165
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3165
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3165
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !3165
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !3165
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 1, !dbg !3165
  %call = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !3165
  %3 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !3165
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !3165
  %5 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !3165
  store i32 %5, i32* %4, align 8, !dbg !3165
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !3165
  %7 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !3165
  store %struct.VEC_edge_gc** %7, %struct.VEC_edge_gc*** %6, align 8, !dbg !3165
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !3166, metadata !DIExpression()), !dbg !3167
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !3168
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !3168
  %10 = load i32, i32* %9, align 8, !dbg !3168
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !3168
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !3168
  %call1 = call %struct.edge_def* @ei_safe_edge(i32 %10, %struct.VEC_edge_gc** %12), !dbg !3168
  store %struct.edge_def* %call1, %struct.edge_def** %e, align 8, !dbg !3167
  %13 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3169
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %13, i32 0, i32 7, !dbg !3169
  %14 = load i32, i32* %flags, align 8, !dbg !3169
  %and = and i32 %14, 1, !dbg !3169
  %tobool = icmp ne i32 %and, 0, !dbg !3169
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !3169

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 466, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3169
  br label %cond.end, !dbg !3169

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3169

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3169
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3170
  %16 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3171
  call void @insert_insn_on_edge(%struct.rtx_def* %15, %struct.edge_def* %16), !dbg !3172
  call void @commit_edge_insertions(), !dbg !3173
  ret void, !dbg !3174
}

; Function Attrs: noinline nounwind uwtable
define internal { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %ev) #0 !dbg !3175 {
entry:
  %retval = alloca %struct.edge_iterator, align 8
  %ev.addr = alloca %struct.VEC_edge_gc**, align 8
  store %struct.VEC_edge_gc** %ev, %struct.VEC_edge_gc*** %ev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_gc*** %ev.addr, metadata !3178, metadata !DIExpression()), !dbg !3179
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %retval, metadata !3180, metadata !DIExpression()), !dbg !3181
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 0, !dbg !3182
  store i32 0, i32* %index, align 8, !dbg !3183
  %0 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %ev.addr, align 8, !dbg !3184
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 1, !dbg !3185
  store %struct.VEC_edge_gc** %0, %struct.VEC_edge_gc*** %container, align 8, !dbg !3186
  %1 = bitcast %struct.edge_iterator* %retval to { i32, %struct.VEC_edge_gc** }*, !dbg !3187
  %2 = load { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, align 8, !dbg !3187
  ret { i32, %struct.VEC_edge_gc** } %2, !dbg !3187
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @ei_safe_edge(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !3188 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !3191, metadata !DIExpression()), !dbg !3192
  %3 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !3193
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !3193
  %5 = load i32, i32* %4, align 8, !dbg !3193
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !3193
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !3193
  %call = call zeroext i8 @ei_end_p(i32 %5, %struct.VEC_edge_gc** %7), !dbg !3193
  %tobool = icmp ne i8 %call, 0, !dbg !3193
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !3194

cond.true:                                        ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !3195
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !3195
  %10 = load i32, i32* %9, align 8, !dbg !3195
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !3195
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !3195
  %call1 = call %struct.edge_def* @ei_edge(i32 %10, %struct.VEC_edge_gc** %12), !dbg !3195
  br label %cond.end, !dbg !3194

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3194

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.edge_def* [ %call1, %cond.true ], [ null, %cond.false ], !dbg !3194
  ret %struct.edge_def* %cond, !dbg !3196
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @insert_insn_on_edge(%struct.rtx_def* %pattern, %struct.edge_def* %e) #0 !dbg !3197 {
entry:
  %pattern.addr = alloca %struct.rtx_def*, align 8
  %e.addr = alloca %struct.edge_def*, align 8
  store %struct.rtx_def* %pattern, %struct.rtx_def** %pattern.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pattern.addr, metadata !3200, metadata !DIExpression()), !dbg !3201
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !3202, metadata !DIExpression()), !dbg !3203
  %0 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3204
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %0, i32 0, i32 7, !dbg !3204
  %1 = load i32, i32* %flags, align 8, !dbg !3204
  %and = and i32 %1, 2, !dbg !3204
  %tobool = icmp ne i32 %and, 0, !dbg !3204
  br i1 %tobool, label %land.lhs.true, label %cond.false16, !dbg !3204

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3204
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %2, i32 0, i32 0, !dbg !3204
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3204
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 1, !dbg !3204
  %4 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !3204
  %tobool1 = icmp ne %struct.VEC_edge_gc* %4, null, !dbg !3204
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !3204

cond.true:                                        ; preds = %land.lhs.true
  %5 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3204
  %src2 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %5, i32 0, i32 0, !dbg !3204
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %src2, align 8, !dbg !3204
  %succs3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 1, !dbg !3204
  %7 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs3, align 8, !dbg !3204
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %7, i32 0, i32 0, !dbg !3204
  br label %cond.end, !dbg !3204

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !3204

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3204
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !3204
  %cmp = icmp uge i32 %call, 2, !dbg !3204
  br i1 %cmp, label %land.lhs.true4, label %cond.false16, !dbg !3204

land.lhs.true4:                                   ; preds = %cond.end
  %8 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3204
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %8, i32 0, i32 1, !dbg !3204
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !3204
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 0, !dbg !3204
  %10 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !3204
  %tobool5 = icmp ne %struct.VEC_edge_gc* %10, null, !dbg !3204
  br i1 %tobool5, label %cond.true6, label %cond.false10, !dbg !3204

cond.true6:                                       ; preds = %land.lhs.true4
  %11 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3204
  %dest7 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %11, i32 0, i32 1, !dbg !3204
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %dest7, align 8, !dbg !3204
  %preds8 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 0, !dbg !3204
  %13 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds8, align 8, !dbg !3204
  %base9 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %13, i32 0, i32 0, !dbg !3204
  br label %cond.end11, !dbg !3204

cond.false10:                                     ; preds = %land.lhs.true4
  br label %cond.end11, !dbg !3204

cond.end11:                                       ; preds = %cond.false10, %cond.true6
  %cond12 = phi %struct.VEC_edge_base* [ %base9, %cond.true6 ], [ null, %cond.false10 ], !dbg !3204
  %call13 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond12), !dbg !3204
  %cmp14 = icmp uge i32 %call13, 2, !dbg !3204
  br i1 %cmp14, label %cond.true15, label %cond.false16, !dbg !3204

cond.true15:                                      ; preds = %cond.end11
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 1424, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3204
  br label %cond.end17, !dbg !3204

cond.false16:                                     ; preds = %cond.end11, %cond.end, %entry
  br label %cond.end17, !dbg !3204

cond.end17:                                       ; preds = %cond.false16, %cond.true15
  %cond18 = phi i32 [ 0, %cond.true15 ], [ 0, %cond.false16 ], !dbg !3204
  %14 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3205
  %insns = getelementptr inbounds %struct.edge_def, %struct.edge_def* %14, i32 0, i32 2, !dbg !3207
  %r = bitcast %union.edge_def_insns* %insns to %struct.rtx_def**, !dbg !3208
  %15 = load %struct.rtx_def*, %struct.rtx_def** %r, align 8, !dbg !3208
  %cmp19 = icmp eq %struct.rtx_def* %15, null, !dbg !3209
  br i1 %cmp19, label %if.then, label %if.else, !dbg !3210

if.then:                                          ; preds = %cond.end17
  call void @start_sequence(), !dbg !3211
  br label %if.end, !dbg !3211

if.else:                                          ; preds = %cond.end17
  %16 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3212
  %insns20 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %16, i32 0, i32 2, !dbg !3213
  %r21 = bitcast %union.edge_def_insns* %insns20 to %struct.rtx_def**, !dbg !3214
  %17 = load %struct.rtx_def*, %struct.rtx_def** %r21, align 8, !dbg !3214
  call void @push_to_sequence(%struct.rtx_def* %17), !dbg !3215
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %18 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8, !dbg !3216
  %call22 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %18), !dbg !3217
  %call23 = call %struct.rtx_def* @get_insns(), !dbg !3218
  %19 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3219
  %insns24 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %19, i32 0, i32 2, !dbg !3220
  %r25 = bitcast %union.edge_def_insns* %insns24 to %struct.rtx_def**, !dbg !3221
  store %struct.rtx_def* %call23, %struct.rtx_def** %r25, align 8, !dbg !3222
  call void @end_sequence(), !dbg !3223
  ret void, !dbg !3224
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @commit_edge_insertions() #0 !dbg !3225 {
entry:
  %bb = alloca %struct.basic_block_def*, align 8
  %blocks = alloca %struct.simple_bitmap_def*, align 8
  %changed = alloca i8, align 1
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !3226, metadata !DIExpression()), !dbg !3227
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %blocks, metadata !3228, metadata !DIExpression()), !dbg !3229
  call void @llvm.dbg.declare(metadata i8* %changed, metadata !3230, metadata !DIExpression()), !dbg !3231
  store i8 0, i8* %changed, align 1, !dbg !3231
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3232
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3232
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3232
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3232
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !3232
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !3232
  store %struct.basic_block_def* %2, %struct.basic_block_def** %bb, align 8, !dbg !3232
  br label %for.cond, !dbg !3232

for.cond:                                         ; preds = %for.inc7, %entry
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3234
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3234
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !3234
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !3234
  %5 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !3234
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %5, i32 0, i32 1, !dbg !3234
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !3234
  %cmp = icmp ne %struct.basic_block_def* %3, %6, !dbg !3234
  br i1 %cmp, label %for.body, label %for.end8, !dbg !3232

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !3236, metadata !DIExpression()), !dbg !3238
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !3239, metadata !DIExpression()), !dbg !3240
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3241
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 1, !dbg !3241
  %call = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !3241
  %8 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !3241
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !3241
  %10 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !3241
  store i32 %10, i32* %9, align 8, !dbg !3241
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !3241
  %12 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !3241
  store %struct.VEC_edge_gc** %12, %struct.VEC_edge_gc*** %11, align 8, !dbg !3241
  %13 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !3241
  %14 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !3241
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 16, i1 false), !dbg !3241
  br label %for.cond3, !dbg !3241

for.cond3:                                        ; preds = %for.inc, %for.body
  %15 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !3243
  %16 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %15, i32 0, i32 0, !dbg !3243
  %17 = load i32, i32* %16, align 8, !dbg !3243
  %18 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %15, i32 0, i32 1, !dbg !3243
  %19 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %18, align 8, !dbg !3243
  %call4 = call zeroext i8 @ei_cond(i32 %17, %struct.VEC_edge_gc** %19, %struct.edge_def** %e), !dbg !3243
  %tobool = icmp ne i8 %call4, 0, !dbg !3241
  br i1 %tobool, label %for.body5, label %for.end, !dbg !3241

for.body5:                                        ; preds = %for.cond3
  %20 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3245
  %insns = getelementptr inbounds %struct.edge_def, %struct.edge_def* %20, i32 0, i32 2, !dbg !3247
  %r = bitcast %union.edge_def_insns* %insns to %struct.rtx_def**, !dbg !3248
  %21 = load %struct.rtx_def*, %struct.rtx_def** %r, align 8, !dbg !3248
  %tobool6 = icmp ne %struct.rtx_def* %21, null, !dbg !3245
  br i1 %tobool6, label %if.then, label %if.end, !dbg !3249

if.then:                                          ; preds = %for.body5
  store i8 1, i8* %changed, align 1, !dbg !3250
  %22 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3252
  call void @commit_one_edge_insertion(%struct.edge_def* %22), !dbg !3253
  br label %if.end, !dbg !3254

if.end:                                           ; preds = %if.then, %for.body5
  br label %for.inc, !dbg !3248

for.inc:                                          ; preds = %if.end
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !3243
  br label %for.cond3, !dbg !3243, !llvm.loop !3255

for.end:                                          ; preds = %for.cond3
  br label %for.inc7, !dbg !3257

for.inc7:                                         ; preds = %for.end
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3234
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %23, i32 0, i32 6, !dbg !3234
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !3234
  store %struct.basic_block_def* %24, %struct.basic_block_def** %bb, align 8, !dbg !3234
  br label %for.cond, !dbg !3234, !llvm.loop !3258

for.end8:                                         ; preds = %for.cond
  %25 = load i8, i8* %changed, align 1, !dbg !3260
  %tobool9 = icmp ne i8 %25, 0, !dbg !3260
  br i1 %tobool9, label %if.end11, label %if.then10, !dbg !3262

if.then10:                                        ; preds = %for.end8
  br label %return, !dbg !3263

if.end11:                                         ; preds = %for.end8
  %call12 = call i32 @current_ir_type(), !dbg !3264
  %cmp13 = icmp eq i32 %call12, 2, !dbg !3266
  br i1 %cmp13, label %if.then14, label %if.end15, !dbg !3267

if.then14:                                        ; preds = %if.end11
  br label %return, !dbg !3268

if.end15:                                         ; preds = %if.end11
  %26 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3269
  %add.ptr16 = getelementptr inbounds %struct.function, %struct.function* %26, i64 0, !dbg !3269
  %cfg17 = getelementptr inbounds %struct.function, %struct.function* %add.ptr16, i32 0, i32 1, !dbg !3269
  %27 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg17, align 8, !dbg !3269
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %27, i32 0, i32 5, !dbg !3269
  %28 = load i32, i32* %x_last_basic_block, align 8, !dbg !3269
  %call18 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %28), !dbg !3270
  store %struct.simple_bitmap_def* %call18, %struct.simple_bitmap_def** %blocks, align 8, !dbg !3271
  %29 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %blocks, align 8, !dbg !3272
  call void @sbitmap_zero(%struct.simple_bitmap_def* %29), !dbg !3273
  %30 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3274
  %add.ptr19 = getelementptr inbounds %struct.function, %struct.function* %30, i64 0, !dbg !3274
  %cfg20 = getelementptr inbounds %struct.function, %struct.function* %add.ptr19, i32 0, i32 1, !dbg !3274
  %31 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg20, align 8, !dbg !3274
  %x_entry_block_ptr21 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %31, i32 0, i32 0, !dbg !3274
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr21, align 8, !dbg !3274
  %next_bb22 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %32, i32 0, i32 6, !dbg !3274
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb22, align 8, !dbg !3274
  store %struct.basic_block_def* %33, %struct.basic_block_def** %bb, align 8, !dbg !3274
  br label %for.cond23, !dbg !3274

for.cond23:                                       ; preds = %for.inc36, %if.end15
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3276
  %35 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3276
  %add.ptr24 = getelementptr inbounds %struct.function, %struct.function* %35, i64 0, !dbg !3276
  %cfg25 = getelementptr inbounds %struct.function, %struct.function* %add.ptr24, i32 0, i32 1, !dbg !3276
  %36 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg25, align 8, !dbg !3276
  %x_exit_block_ptr26 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %36, i32 0, i32 1, !dbg !3276
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr26, align 8, !dbg !3276
  %cmp27 = icmp ne %struct.basic_block_def* %34, %37, !dbg !3276
  br i1 %cmp27, label %for.body28, label %for.end38, !dbg !3274

for.body28:                                       ; preds = %for.cond23
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3278
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %38, i32 0, i32 2, !dbg !3280
  %39 = load i8*, i8** %aux, align 8, !dbg !3280
  %tobool29 = icmp ne i8* %39, null, !dbg !3278
  br i1 %tobool29, label %if.then30, label %if.end35, !dbg !3281

if.then30:                                        ; preds = %for.body28
  %40 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %blocks, align 8, !dbg !3282
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3284
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %41, i32 0, i32 9, !dbg !3285
  %42 = load i32, i32* %index, align 8, !dbg !3285
  call void @SET_BIT(%struct.simple_bitmap_def* %40, i32 %42), !dbg !3286
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3287
  %aux31 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %43, i32 0, i32 2, !dbg !3287
  %44 = load i8*, i8** %aux31, align 8, !dbg !3287
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3287
  %aux32 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %45, i32 0, i32 2, !dbg !3287
  %46 = bitcast i8** %aux32 to i8*, !dbg !3287
  %cmp33 = icmp eq i8* %44, %46, !dbg !3287
  br i1 %cmp33, label %cond.false, label %cond.true, !dbg !3287

cond.true:                                        ; preds = %if.then30
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 1594, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3287
  br label %cond.end, !dbg !3287

cond.false:                                       ; preds = %if.then30
  br label %cond.end, !dbg !3287

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3287
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3288
  %aux34 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %47, i32 0, i32 2, !dbg !3289
  store i8* null, i8** %aux34, align 8, !dbg !3290
  br label %if.end35, !dbg !3291

if.end35:                                         ; preds = %cond.end, %for.body28
  br label %for.inc36, !dbg !3280

for.inc36:                                        ; preds = %if.end35
  %48 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3276
  %next_bb37 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %48, i32 0, i32 6, !dbg !3276
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb37, align 8, !dbg !3276
  store %struct.basic_block_def* %49, %struct.basic_block_def** %bb, align 8, !dbg !3276
  br label %for.cond23, !dbg !3276, !llvm.loop !3292

for.end38:                                        ; preds = %for.cond23
  %50 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %blocks, align 8, !dbg !3294
  call void @find_many_sub_basic_blocks(%struct.simple_bitmap_def* %50), !dbg !3295
  %51 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %blocks, align 8, !dbg !3296
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %51, i32 0, i32 0, !dbg !3296
  %52 = load i8*, i8** %popcount, align 8, !dbg !3296
  call void @free(i8* %52), !dbg !3296
  %53 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %blocks, align 8, !dbg !3296
  %54 = bitcast %struct.simple_bitmap_def* %53 to i8*, !dbg !3296
  call void @free(i8* %54), !dbg !3296
  br label %return, !dbg !3297

return:                                           ; preds = %for.end38, %if.then14, %if.then10
  ret void, !dbg !3297
}

; Function Attrs: noinline nounwind uwtable
define internal void @update_bb_for_insn_chain(%struct.rtx_def* %begin, %struct.rtx_def* %end, %struct.basic_block_def* %bb) #0 !dbg !3298 {
entry:
  %begin.addr = alloca %struct.rtx_def*, align 8
  %end.addr = alloca %struct.rtx_def*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %begin, %struct.rtx_def** %begin.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %begin.addr, metadata !3301, metadata !DIExpression()), !dbg !3302
  store %struct.rtx_def* %end, %struct.rtx_def** %end.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %end.addr, metadata !3303, metadata !DIExpression()), !dbg !3304
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !3305, metadata !DIExpression()), !dbg !3306
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !3307, metadata !DIExpression()), !dbg !3308
  %0 = load %struct.rtx_def*, %struct.rtx_def** %end.addr, align 8, !dbg !3309
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !3309
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3309
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !3309
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !3309
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !3309
  store %struct.rtx_def* %1, %struct.rtx_def** %end.addr, align 8, !dbg !3310
  %2 = load %struct.rtx_def*, %struct.rtx_def** %begin.addr, align 8, !dbg !3311
  store %struct.rtx_def* %2, %struct.rtx_def** %insn, align 8, !dbg !3313
  br label %for.cond, !dbg !3314

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3315
  %4 = load %struct.rtx_def*, %struct.rtx_def** %end.addr, align 8, !dbg !3317
  %cmp = icmp ne %struct.rtx_def* %3, %4, !dbg !3318
  br i1 %cmp, label %for.body, label %for.end, !dbg !3319

for.body:                                         ; preds = %for.cond
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3320
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !3320
  %bf.load = load i32, i32* %6, align 8, !dbg !3320
  %bf.clear = and i32 %bf.load, 65535, !dbg !3320
  %cmp1 = icmp eq i32 %bf.clear, 11, !dbg !3320
  br i1 %cmp1, label %if.end, label %if.then, !dbg !3322

if.then:                                          ; preds = %for.body
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3323
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3324
  call void @df_insn_change_bb(%struct.rtx_def* %7, %struct.basic_block_def* %8), !dbg !3325
  br label %if.end, !dbg !3325

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !3320

for.inc:                                          ; preds = %if.end
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3326
  %u2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !3326
  %fld3 = bitcast %union.u* %u2 to [1 x %union.rtunion_def]*, !dbg !3326
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3, i64 0, i64 2, !dbg !3326
  %rt_rtx5 = bitcast %union.rtunion_def* %arrayidx4 to %struct.rtx_def**, !dbg !3326
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx5, align 8, !dbg !3326
  store %struct.rtx_def* %10, %struct.rtx_def** %insn, align 8, !dbg !3327
  br label %for.cond, !dbg !3328, !llvm.loop !3329

for.end:                                          ; preds = %for.cond
  ret void, !dbg !3331
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @block_label(%struct.basic_block_def* %block) #0 !dbg !3332 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %block.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %block, %struct.basic_block_def** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %block.addr, metadata !3335, metadata !DIExpression()), !dbg !3336
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !3337
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3339
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !3339
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3339
  %2 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3339
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %2, i32 0, i32 1, !dbg !3339
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !3339
  %cmp = icmp eq %struct.basic_block_def* %0, %3, !dbg !3340
  br i1 %cmp, label %if.then, label %if.end, !dbg !3341

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !3342
  br label %return, !dbg !3342

if.end:                                           ; preds = %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !3343
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !3343
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !3343
  %5 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !3343
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %5, i32 0, i32 0, !dbg !3343
  %6 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !3343
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !3343
  %bf.load = load i32, i32* %7, align 8, !dbg !3343
  %bf.clear = and i32 %bf.load, 65535, !dbg !3343
  %cmp1 = icmp eq i32 %bf.clear, 12, !dbg !3343
  br i1 %cmp1, label %if.end10, label %if.then2, !dbg !3345

if.then2:                                         ; preds = %if.end
  %call = call %struct.rtx_def* @gen_label_rtx(), !dbg !3346
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !3348
  %il3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 7, !dbg !3348
  %rtl4 = bitcast %union.basic_block_il_dependent* %il3 to %struct.rtl_bb_info**, !dbg !3348
  %9 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl4, align 8, !dbg !3348
  %head_5 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %9, i32 0, i32 0, !dbg !3348
  %10 = load %struct.rtx_def*, %struct.rtx_def** %head_5, align 8, !dbg !3348
  %call6 = call %struct.rtx_def* @emit_label_before(%struct.rtx_def* %call, %struct.rtx_def* %10), !dbg !3349
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !3350
  %il7 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 7, !dbg !3350
  %rtl8 = bitcast %union.basic_block_il_dependent* %il7 to %struct.rtl_bb_info**, !dbg !3350
  %12 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl8, align 8, !dbg !3350
  %head_9 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %12, i32 0, i32 0, !dbg !3350
  store %struct.rtx_def* %call6, %struct.rtx_def** %head_9, align 8, !dbg !3351
  br label %if.end10, !dbg !3352

if.end10:                                         ; preds = %if.then2, %if.end
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !3353
  %il11 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 7, !dbg !3353
  %rtl12 = bitcast %union.basic_block_il_dependent* %il11 to %struct.rtl_bb_info**, !dbg !3353
  %14 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl12, align 8, !dbg !3353
  %head_13 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %14, i32 0, i32 0, !dbg !3353
  %15 = load %struct.rtx_def*, %struct.rtx_def** %head_13, align 8, !dbg !3353
  store %struct.rtx_def* %15, %struct.rtx_def** %retval, align 8, !dbg !3354
  br label %return, !dbg !3354

return:                                           ; preds = %if.end10, %if.then
  %16 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !3355
  ret %struct.rtx_def* %16, !dbg !3355
}

declare dso_local %struct.rtx_def* @emit_label_before(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @gen_label_rtx() #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.edge_def* @try_redirect_by_replacing_jump(%struct.edge_def* %e, %struct.basic_block_def* %target, i8 zeroext %in_cfglayout) #0 !dbg !3356 {
entry:
  %retval = alloca %struct.edge_def*, align 8
  %e.addr = alloca %struct.edge_def*, align 8
  %target.addr = alloca %struct.basic_block_def*, align 8
  %in_cfglayout.addr = alloca i8, align 1
  %src = alloca %struct.basic_block_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %kill_from = alloca %struct.rtx_def*, align 8
  %set = alloca %struct.rtx_def*, align 8
  %fallthru = alloca i32, align 4
  %insn115 = alloca %struct.rtx_def*, align 8
  %target_label = alloca %struct.rtx_def*, align 8
  %barrier = alloca %struct.rtx_def*, align 8
  %label = alloca %struct.rtx_def*, align 8
  %table = alloca %struct.rtx_def*, align 8
  %new_insn = alloca %struct.rtx_def*, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !3359, metadata !DIExpression()), !dbg !3360
  store %struct.basic_block_def* %target, %struct.basic_block_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %target.addr, metadata !3361, metadata !DIExpression()), !dbg !3362
  store i8 %in_cfglayout, i8* %in_cfglayout.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %in_cfglayout.addr, metadata !3363, metadata !DIExpression()), !dbg !3364
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %src, metadata !3365, metadata !DIExpression()), !dbg !3366
  %0 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3367
  %src1 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %0, i32 0, i32 0, !dbg !3368
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %src1, align 8, !dbg !3368
  store %struct.basic_block_def* %1, %struct.basic_block_def** %src, align 8, !dbg !3366
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !3369, metadata !DIExpression()), !dbg !3370
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3371
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !3371
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !3371
  %3 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !3371
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %3, i32 0, i32 1, !dbg !3371
  %4 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !3371
  store %struct.rtx_def* %4, %struct.rtx_def** %insn, align 8, !dbg !3370
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %kill_from, metadata !3372, metadata !DIExpression()), !dbg !3373
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set, metadata !3374, metadata !DIExpression()), !dbg !3375
  call void @llvm.dbg.declare(metadata i32* %fallthru, metadata !3376, metadata !DIExpression()), !dbg !3377
  store i32 0, i32* %fallthru, align 4, !dbg !3377
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3378
  %call = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %5, i32 29, %struct.rtx_def* null), !dbg !3380
  %tobool = icmp ne %struct.rtx_def* %call, null, !dbg !3380
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !3381

lor.lhs.false:                                    ; preds = %entry
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3382
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 13, !dbg !3382
  %7 = load i32, i32* %flags, align 8, !dbg !3382
  %and = and i32 %7, 96, !dbg !3382
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %target.addr, align 8, !dbg !3383
  %flags2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 13, !dbg !3383
  %9 = load i32, i32* %flags2, align 8, !dbg !3383
  %and3 = and i32 %9, 96, !dbg !3383
  %cmp = icmp ne i32 %and, %and3, !dbg !3384
  br i1 %cmp, label %if.then, label %if.end, !dbg !3385

if.then:                                          ; preds = %lor.lhs.false, %entry
  store %struct.edge_def* null, %struct.edge_def** %retval, align 8, !dbg !3386
  br label %return, !dbg !3386

if.end:                                           ; preds = %lor.lhs.false
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3387
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 1, !dbg !3387
  %11 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !3387
  %tobool4 = icmp ne %struct.VEC_edge_gc* %11, null, !dbg !3387
  br i1 %tobool4, label %cond.true, label %cond.false, !dbg !3387

cond.true:                                        ; preds = %if.end
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3387
  %succs5 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 1, !dbg !3387
  %13 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs5, align 8, !dbg !3387
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %13, i32 0, i32 0, !dbg !3387
  br label %cond.end, !dbg !3387

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !3387

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3387
  %call6 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !3387
  %cmp7 = icmp uge i32 %call6, 3, !dbg !3389
  br i1 %cmp7, label %if.then40, label %lor.lhs.false8, !dbg !3390

lor.lhs.false8:                                   ; preds = %cond.end
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3391
  %succs9 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %14, i32 0, i32 1, !dbg !3391
  %15 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs9, align 8, !dbg !3391
  %tobool10 = icmp ne %struct.VEC_edge_gc* %15, null, !dbg !3391
  br i1 %tobool10, label %cond.true11, label %cond.false14, !dbg !3391

cond.true11:                                      ; preds = %lor.lhs.false8
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3391
  %succs12 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i32 0, i32 1, !dbg !3391
  %17 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs12, align 8, !dbg !3391
  %base13 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %17, i32 0, i32 0, !dbg !3391
  br label %cond.end15, !dbg !3391

cond.false14:                                     ; preds = %lor.lhs.false8
  br label %cond.end15, !dbg !3391

cond.end15:                                       ; preds = %cond.false14, %cond.true11
  %cond16 = phi %struct.VEC_edge_base* [ %base13, %cond.true11 ], [ null, %cond.false14 ], !dbg !3391
  %call17 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond16), !dbg !3391
  %cmp18 = icmp eq i32 %call17, 2, !dbg !3392
  br i1 %cmp18, label %land.lhs.true, label %if.end41, !dbg !3393

land.lhs.true:                                    ; preds = %cond.end15
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3394
  %succs19 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %18, i32 0, i32 1, !dbg !3394
  %19 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs19, align 8, !dbg !3394
  %tobool20 = icmp ne %struct.VEC_edge_gc* %19, null, !dbg !3394
  br i1 %tobool20, label %cond.true21, label %cond.false24, !dbg !3394

cond.true21:                                      ; preds = %land.lhs.true
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3394
  %succs22 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %20, i32 0, i32 1, !dbg !3394
  %21 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs22, align 8, !dbg !3394
  %base23 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %21, i32 0, i32 0, !dbg !3394
  br label %cond.end25, !dbg !3394

cond.false24:                                     ; preds = %land.lhs.true
  br label %cond.end25, !dbg !3394

cond.end25:                                       ; preds = %cond.false24, %cond.true21
  %cond26 = phi %struct.VEC_edge_base* [ %base23, %cond.true21 ], [ null, %cond.false24 ], !dbg !3394
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3394
  %succs27 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %22, i32 0, i32 1, !dbg !3394
  %23 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs27, align 8, !dbg !3394
  %tobool28 = icmp ne %struct.VEC_edge_gc* %23, null, !dbg !3394
  br i1 %tobool28, label %cond.true29, label %cond.false32, !dbg !3394

cond.true29:                                      ; preds = %cond.end25
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3394
  %succs30 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %24, i32 0, i32 1, !dbg !3394
  %25 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs30, align 8, !dbg !3394
  %base31 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %25, i32 0, i32 0, !dbg !3394
  br label %cond.end33, !dbg !3394

cond.false32:                                     ; preds = %cond.end25
  br label %cond.end33, !dbg !3394

cond.end33:                                       ; preds = %cond.false32, %cond.true29
  %cond34 = phi %struct.VEC_edge_base* [ %base31, %cond.true29 ], [ null, %cond.false32 ], !dbg !3394
  %call35 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond34, i32 0), !dbg !3394
  %26 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3394
  %cmp36 = icmp eq %struct.edge_def* %call35, %26, !dbg !3394
  %conv = zext i1 %cmp36 to i32, !dbg !3394
  %call37 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond26, i32 %conv), !dbg !3394
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call37, i32 0, i32 1, !dbg !3395
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !3395
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %target.addr, align 8, !dbg !3396
  %cmp38 = icmp ne %struct.basic_block_def* %27, %28, !dbg !3397
  br i1 %cmp38, label %if.then40, label %if.end41, !dbg !3398

if.then40:                                        ; preds = %cond.end33, %cond.end
  store %struct.edge_def* null, %struct.edge_def** %retval, align 8, !dbg !3399
  br label %return, !dbg !3399

if.end41:                                         ; preds = %cond.end33, %cond.end15
  %29 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3400
  %call42 = call i32 @onlyjump_p(%struct.rtx_def* %29), !dbg !3402
  %tobool43 = icmp ne i32 %call42, 0, !dbg !3402
  br i1 %tobool43, label %if.end45, label %if.then44, !dbg !3403

if.then44:                                        ; preds = %if.end41
  store %struct.edge_def* null, %struct.edge_def** %retval, align 8, !dbg !3404
  br label %return, !dbg !3404

if.end45:                                         ; preds = %if.end41
  %30 = load i32, i32* @optimize, align 4, !dbg !3405
  %tobool46 = icmp ne i32 %30, 0, !dbg !3405
  br i1 %tobool46, label %lor.lhs.false47, label %land.lhs.true49, !dbg !3407

lor.lhs.false47:                                  ; preds = %if.end45
  %31 = load i32, i32* @reload_completed, align 4, !dbg !3408
  %tobool48 = icmp ne i32 %31, 0, !dbg !3408
  br i1 %tobool48, label %land.lhs.true49, label %if.end54, !dbg !3409

land.lhs.true49:                                  ; preds = %lor.lhs.false47, %if.end45
  %32 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3410
  %call50 = call zeroext i8 @tablejump_p(%struct.rtx_def* %32, %struct.rtx_def** null, %struct.rtx_def** null), !dbg !3411
  %conv51 = zext i8 %call50 to i32, !dbg !3411
  %tobool52 = icmp ne i32 %conv51, 0, !dbg !3411
  br i1 %tobool52, label %if.then53, label %if.end54, !dbg !3412

if.then53:                                        ; preds = %land.lhs.true49
  store %struct.edge_def* null, %struct.edge_def** %retval, align 8, !dbg !3413
  br label %return, !dbg !3413

if.end54:                                         ; preds = %land.lhs.true49, %lor.lhs.false47
  %33 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3414
  %34 = bitcast %struct.rtx_def* %33 to i32*, !dbg !3414
  %bf.load = load i32, i32* %34, align 8, !dbg !3414
  %bf.clear = and i32 %bf.load, 65535, !dbg !3414
  %cmp55 = icmp eq i32 %bf.clear, 8, !dbg !3414
  br i1 %cmp55, label %cond.true72, label %lor.lhs.false57, !dbg !3414

lor.lhs.false57:                                  ; preds = %if.end54
  %35 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3414
  %36 = bitcast %struct.rtx_def* %35 to i32*, !dbg !3414
  %bf.load58 = load i32, i32* %36, align 8, !dbg !3414
  %bf.clear59 = and i32 %bf.load58, 65535, !dbg !3414
  %cmp60 = icmp eq i32 %bf.clear59, 7, !dbg !3414
  br i1 %cmp60, label %cond.true72, label %lor.lhs.false62, !dbg !3414

lor.lhs.false62:                                  ; preds = %lor.lhs.false57
  %37 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3414
  %38 = bitcast %struct.rtx_def* %37 to i32*, !dbg !3414
  %bf.load63 = load i32, i32* %38, align 8, !dbg !3414
  %bf.clear64 = and i32 %bf.load63, 65535, !dbg !3414
  %cmp65 = icmp eq i32 %bf.clear64, 9, !dbg !3414
  br i1 %cmp65, label %cond.true72, label %lor.lhs.false67, !dbg !3414

lor.lhs.false67:                                  ; preds = %lor.lhs.false62
  %39 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3414
  %40 = bitcast %struct.rtx_def* %39 to i32*, !dbg !3414
  %bf.load68 = load i32, i32* %40, align 8, !dbg !3414
  %bf.clear69 = and i32 %bf.load68, 65535, !dbg !3414
  %cmp70 = icmp eq i32 %bf.clear69, 10, !dbg !3414
  br i1 %cmp70, label %cond.true72, label %cond.false90, !dbg !3414

cond.true72:                                      ; preds = %lor.lhs.false67, %lor.lhs.false62, %lor.lhs.false57, %if.end54
  %41 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3414
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1, !dbg !3414
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3414
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !3414
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !3414
  %42 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !3414
  %43 = bitcast %struct.rtx_def* %42 to i32*, !dbg !3414
  %bf.load73 = load i32, i32* %43, align 8, !dbg !3414
  %bf.clear74 = and i32 %bf.load73, 65535, !dbg !3414
  %cmp75 = icmp eq i32 %bf.clear74, 23, !dbg !3414
  br i1 %cmp75, label %cond.true77, label %cond.false82, !dbg !3414

cond.true77:                                      ; preds = %cond.true72
  %44 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3414
  %u78 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %44, i32 0, i32 1, !dbg !3414
  %fld79 = bitcast %union.u* %u78 to [1 x %union.rtunion_def]*, !dbg !3414
  %arrayidx80 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld79, i64 0, i64 5, !dbg !3414
  %rt_rtx81 = bitcast %union.rtunion_def* %arrayidx80 to %struct.rtx_def**, !dbg !3414
  %45 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx81, align 8, !dbg !3414
  br label %cond.end88, !dbg !3414

cond.false82:                                     ; preds = %cond.true72
  %46 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3414
  %47 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3414
  %u83 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %47, i32 0, i32 1, !dbg !3414
  %fld84 = bitcast %union.u* %u83 to [1 x %union.rtunion_def]*, !dbg !3414
  %arrayidx85 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld84, i64 0, i64 5, !dbg !3414
  %rt_rtx86 = bitcast %union.rtunion_def* %arrayidx85 to %struct.rtx_def**, !dbg !3414
  %48 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx86, align 8, !dbg !3414
  %call87 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %46, %struct.rtx_def* %48), !dbg !3414
  br label %cond.end88, !dbg !3414

cond.end88:                                       ; preds = %cond.false82, %cond.true77
  %cond89 = phi %struct.rtx_def* [ %45, %cond.true77 ], [ %call87, %cond.false82 ], !dbg !3414
  br label %cond.end91, !dbg !3414

cond.false90:                                     ; preds = %lor.lhs.false67
  br label %cond.end91, !dbg !3414

cond.end91:                                       ; preds = %cond.false90, %cond.end88
  %cond92 = phi %struct.rtx_def* [ %cond89, %cond.end88 ], [ null, %cond.false90 ], !dbg !3414
  store %struct.rtx_def* %cond92, %struct.rtx_def** %set, align 8, !dbg !3415
  %49 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !3416
  %tobool93 = icmp ne %struct.rtx_def* %49, null, !dbg !3416
  br i1 %tobool93, label %lor.lhs.false94, label %if.then97, !dbg !3418

lor.lhs.false94:                                  ; preds = %cond.end91
  %50 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !3419
  %call95 = call i32 @side_effects_p(%struct.rtx_def* %50), !dbg !3420
  %tobool96 = icmp ne i32 %call95, 0, !dbg !3420
  br i1 %tobool96, label %if.then97, label %if.end98, !dbg !3421

if.then97:                                        ; preds = %lor.lhs.false94, %cond.end91
  store %struct.edge_def* null, %struct.edge_def** %retval, align 8, !dbg !3422
  br label %return, !dbg !3422

if.end98:                                         ; preds = %lor.lhs.false94
  %51 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3423
  store %struct.rtx_def* %51, %struct.rtx_def** %kill_from, align 8, !dbg !3424
  %52 = load i8, i8* %in_cfglayout.addr, align 1, !dbg !3425
  %conv99 = zext i8 %52 to i32, !dbg !3425
  %tobool100 = icmp ne i32 %conv99, 0, !dbg !3425
  br i1 %tobool100, label %if.then105, label %lor.lhs.false101, !dbg !3427

lor.lhs.false101:                                 ; preds = %if.end98
  %53 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3428
  %54 = load %struct.basic_block_def*, %struct.basic_block_def** %target.addr, align 8, !dbg !3429
  %call102 = call zeroext i8 @can_fallthru(%struct.basic_block_def* %53, %struct.basic_block_def* %54), !dbg !3430
  %conv103 = zext i8 %call102 to i32, !dbg !3430
  %tobool104 = icmp ne i32 %conv103, 0, !dbg !3430
  br i1 %tobool104, label %if.then105, label %if.else191, !dbg !3431

if.then105:                                       ; preds = %lor.lhs.false101, %if.end98
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3432
  %tobool106 = icmp ne %struct._IO_FILE* %55, null, !dbg !3432
  br i1 %tobool106, label %if.then107, label %if.end112, !dbg !3435

if.then107:                                       ; preds = %if.then105
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3436
  %57 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3437
  %u108 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %57, i32 0, i32 1, !dbg !3437
  %fld109 = bitcast %union.u* %u108 to [1 x %union.rtunion_def]*, !dbg !3437
  %arrayidx110 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld109, i64 0, i64 0, !dbg !3437
  %rt_int = bitcast %union.rtunion_def* %arrayidx110 to i32*, !dbg !3437
  %58 = load i32, i32* %rt_int, align 8, !dbg !3437
  %call111 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %56, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i32 %58), !dbg !3438
  br label %if.end112, !dbg !3438

if.end112:                                        ; preds = %if.then107, %if.then105
  store i32 1, i32* %fallthru, align 4, !dbg !3439
  %59 = load i8, i8* %in_cfglayout.addr, align 1, !dbg !3440
  %tobool113 = icmp ne i8 %59, 0, !dbg !3440
  br i1 %tobool113, label %if.then114, label %if.else183, !dbg !3442

if.then114:                                       ; preds = %if.end112
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn115, metadata !3443, metadata !DIExpression()), !dbg !3445
  %60 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3446
  %il116 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %60, i32 0, i32 7, !dbg !3447
  %rtl117 = bitcast %union.basic_block_il_dependent* %il116 to %struct.rtl_bb_info**, !dbg !3448
  %61 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl117, align 8, !dbg !3448
  %footer = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %61, i32 0, i32 3, !dbg !3449
  %62 = load %struct.rtx_def*, %struct.rtx_def** %footer, align 8, !dbg !3449
  store %struct.rtx_def* %62, %struct.rtx_def** %insn115, align 8, !dbg !3445
  %63 = load %struct.rtx_def*, %struct.rtx_def** %kill_from, align 8, !dbg !3450
  %64 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3451
  %il118 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %64, i32 0, i32 7, !dbg !3451
  %rtl119 = bitcast %union.basic_block_il_dependent* %il118 to %struct.rtl_bb_info**, !dbg !3451
  %65 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl119, align 8, !dbg !3451
  %end_120 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %65, i32 0, i32 1, !dbg !3451
  %66 = load %struct.rtx_def*, %struct.rtx_def** %end_120, align 8, !dbg !3451
  call void @delete_insn_chain(%struct.rtx_def* %63, %struct.rtx_def* %66, i8 zeroext 0), !dbg !3452
  br label %while.cond, !dbg !3453

while.cond:                                       ; preds = %if.end178, %if.then114
  %67 = load %struct.rtx_def*, %struct.rtx_def** %insn115, align 8, !dbg !3454
  %tobool121 = icmp ne %struct.rtx_def* %67, null, !dbg !3453
  br i1 %tobool121, label %while.body, label %while.end, !dbg !3453

while.body:                                       ; preds = %while.cond
  %68 = load %struct.rtx_def*, %struct.rtx_def** %insn115, align 8, !dbg !3455
  %69 = bitcast %struct.rtx_def* %68 to i32*, !dbg !3455
  %bf.load122 = load i32, i32* %69, align 8, !dbg !3455
  %bf.clear123 = and i32 %bf.load122, 65535, !dbg !3455
  %cmp124 = icmp eq i32 %bf.clear123, 11, !dbg !3455
  br i1 %cmp124, label %if.then126, label %if.end172, !dbg !3458

if.then126:                                       ; preds = %while.body
  %70 = load %struct.rtx_def*, %struct.rtx_def** %insn115, align 8, !dbg !3459
  %u127 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %70, i32 0, i32 1, !dbg !3459
  %fld128 = bitcast %union.u* %u127 to [1 x %union.rtunion_def]*, !dbg !3459
  %arrayidx129 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld128, i64 0, i64 1, !dbg !3459
  %rt_rtx130 = bitcast %union.rtunion_def* %arrayidx129 to %struct.rtx_def**, !dbg !3459
  %71 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx130, align 8, !dbg !3459
  %tobool131 = icmp ne %struct.rtx_def* %71, null, !dbg !3459
  br i1 %tobool131, label %if.then132, label %if.else, !dbg !3462

if.then132:                                       ; preds = %if.then126
  %72 = load %struct.rtx_def*, %struct.rtx_def** %insn115, align 8, !dbg !3463
  %u133 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %72, i32 0, i32 1, !dbg !3463
  %fld134 = bitcast %union.u* %u133 to [1 x %union.rtunion_def]*, !dbg !3463
  %arrayidx135 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld134, i64 0, i64 2, !dbg !3463
  %rt_rtx136 = bitcast %union.rtunion_def* %arrayidx135 to %struct.rtx_def**, !dbg !3463
  %73 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx136, align 8, !dbg !3463
  %74 = load %struct.rtx_def*, %struct.rtx_def** %insn115, align 8, !dbg !3464
  %u137 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %74, i32 0, i32 1, !dbg !3464
  %fld138 = bitcast %union.u* %u137 to [1 x %union.rtunion_def]*, !dbg !3464
  %arrayidx139 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld138, i64 0, i64 1, !dbg !3464
  %rt_rtx140 = bitcast %union.rtunion_def* %arrayidx139 to %struct.rtx_def**, !dbg !3464
  %75 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx140, align 8, !dbg !3464
  %u141 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %75, i32 0, i32 1, !dbg !3464
  %fld142 = bitcast %union.u* %u141 to [1 x %union.rtunion_def]*, !dbg !3464
  %arrayidx143 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld142, i64 0, i64 2, !dbg !3464
  %rt_rtx144 = bitcast %union.rtunion_def* %arrayidx143 to %struct.rtx_def**, !dbg !3464
  store %struct.rtx_def* %73, %struct.rtx_def** %rt_rtx144, align 8, !dbg !3465
  br label %if.end152, !dbg !3464

if.else:                                          ; preds = %if.then126
  %76 = load %struct.rtx_def*, %struct.rtx_def** %insn115, align 8, !dbg !3466
  %u145 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %76, i32 0, i32 1, !dbg !3466
  %fld146 = bitcast %union.u* %u145 to [1 x %union.rtunion_def]*, !dbg !3466
  %arrayidx147 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld146, i64 0, i64 2, !dbg !3466
  %rt_rtx148 = bitcast %union.rtunion_def* %arrayidx147 to %struct.rtx_def**, !dbg !3466
  %77 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx148, align 8, !dbg !3466
  %78 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3467
  %il149 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %78, i32 0, i32 7, !dbg !3468
  %rtl150 = bitcast %union.basic_block_il_dependent* %il149 to %struct.rtl_bb_info**, !dbg !3469
  %79 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl150, align 8, !dbg !3469
  %footer151 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %79, i32 0, i32 3, !dbg !3470
  store %struct.rtx_def* %77, %struct.rtx_def** %footer151, align 8, !dbg !3471
  br label %if.end152

if.end152:                                        ; preds = %if.else, %if.then132
  %80 = load %struct.rtx_def*, %struct.rtx_def** %insn115, align 8, !dbg !3472
  %u153 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %80, i32 0, i32 1, !dbg !3472
  %fld154 = bitcast %union.u* %u153 to [1 x %union.rtunion_def]*, !dbg !3472
  %arrayidx155 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld154, i64 0, i64 2, !dbg !3472
  %rt_rtx156 = bitcast %union.rtunion_def* %arrayidx155 to %struct.rtx_def**, !dbg !3472
  %81 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx156, align 8, !dbg !3472
  %tobool157 = icmp ne %struct.rtx_def* %81, null, !dbg !3472
  br i1 %tobool157, label %if.then158, label %if.end171, !dbg !3474

if.then158:                                       ; preds = %if.end152
  %82 = load %struct.rtx_def*, %struct.rtx_def** %insn115, align 8, !dbg !3475
  %u159 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %82, i32 0, i32 1, !dbg !3475
  %fld160 = bitcast %union.u* %u159 to [1 x %union.rtunion_def]*, !dbg !3475
  %arrayidx161 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld160, i64 0, i64 1, !dbg !3475
  %rt_rtx162 = bitcast %union.rtunion_def* %arrayidx161 to %struct.rtx_def**, !dbg !3475
  %83 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx162, align 8, !dbg !3475
  %84 = load %struct.rtx_def*, %struct.rtx_def** %insn115, align 8, !dbg !3476
  %u163 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %84, i32 0, i32 1, !dbg !3476
  %fld164 = bitcast %union.u* %u163 to [1 x %union.rtunion_def]*, !dbg !3476
  %arrayidx165 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld164, i64 0, i64 2, !dbg !3476
  %rt_rtx166 = bitcast %union.rtunion_def* %arrayidx165 to %struct.rtx_def**, !dbg !3476
  %85 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx166, align 8, !dbg !3476
  %u167 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %85, i32 0, i32 1, !dbg !3476
  %fld168 = bitcast %union.u* %u167 to [1 x %union.rtunion_def]*, !dbg !3476
  %arrayidx169 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld168, i64 0, i64 1, !dbg !3476
  %rt_rtx170 = bitcast %union.rtunion_def* %arrayidx169 to %struct.rtx_def**, !dbg !3476
  store %struct.rtx_def* %83, %struct.rtx_def** %rt_rtx170, align 8, !dbg !3477
  br label %if.end171, !dbg !3476

if.end171:                                        ; preds = %if.then158, %if.end152
  br label %if.end172, !dbg !3478

if.end172:                                        ; preds = %if.end171, %while.body
  %86 = load %struct.rtx_def*, %struct.rtx_def** %insn115, align 8, !dbg !3479
  %87 = bitcast %struct.rtx_def* %86 to i32*, !dbg !3479
  %bf.load173 = load i32, i32* %87, align 8, !dbg !3479
  %bf.clear174 = and i32 %bf.load173, 65535, !dbg !3479
  %cmp175 = icmp eq i32 %bf.clear174, 12, !dbg !3479
  br i1 %cmp175, label %if.then177, label %if.end178, !dbg !3481

if.then177:                                       ; preds = %if.end172
  br label %while.end, !dbg !3482

if.end178:                                        ; preds = %if.end172
  %88 = load %struct.rtx_def*, %struct.rtx_def** %insn115, align 8, !dbg !3483
  %u179 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %88, i32 0, i32 1, !dbg !3483
  %fld180 = bitcast %union.u* %u179 to [1 x %union.rtunion_def]*, !dbg !3483
  %arrayidx181 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld180, i64 0, i64 2, !dbg !3483
  %rt_rtx182 = bitcast %union.rtunion_def* %arrayidx181 to %struct.rtx_def**, !dbg !3483
  %89 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx182, align 8, !dbg !3483
  store %struct.rtx_def* %89, %struct.rtx_def** %insn115, align 8, !dbg !3484
  br label %while.cond, !dbg !3453, !llvm.loop !3485

while.end:                                        ; preds = %if.then177, %while.cond
  br label %if.end190, !dbg !3487

if.else183:                                       ; preds = %if.end112
  %90 = load %struct.rtx_def*, %struct.rtx_def** %kill_from, align 8, !dbg !3488
  %91 = load %struct.basic_block_def*, %struct.basic_block_def** %target.addr, align 8, !dbg !3489
  %il184 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %91, i32 0, i32 7, !dbg !3489
  %rtl185 = bitcast %union.basic_block_il_dependent* %il184 to %struct.rtl_bb_info**, !dbg !3489
  %92 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl185, align 8, !dbg !3489
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %92, i32 0, i32 0, !dbg !3489
  %93 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !3489
  %u186 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %93, i32 0, i32 1, !dbg !3489
  %fld187 = bitcast %union.u* %u186 to [1 x %union.rtunion_def]*, !dbg !3489
  %arrayidx188 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld187, i64 0, i64 1, !dbg !3489
  %rt_rtx189 = bitcast %union.rtunion_def* %arrayidx188 to %struct.rtx_def**, !dbg !3489
  %94 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx189, align 8, !dbg !3489
  call void @delete_insn_chain(%struct.rtx_def* %90, %struct.rtx_def* %94, i8 zeroext 0), !dbg !3490
  br label %if.end190

if.end190:                                        ; preds = %if.else183, %while.end
  br label %if.end354, !dbg !3491

if.else191:                                       ; preds = %lor.lhs.false101
  %95 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3492
  %call192 = call i32 @simplejump_p(%struct.rtx_def* %95), !dbg !3494
  %tobool193 = icmp ne i32 %call192, 0, !dbg !3494
  br i1 %tobool193, label %if.then194, label %if.else221, !dbg !3495

if.then194:                                       ; preds = %if.else191
  %96 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3496
  %dest195 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %96, i32 0, i32 1, !dbg !3499
  %97 = load %struct.basic_block_def*, %struct.basic_block_def** %dest195, align 8, !dbg !3499
  %98 = load %struct.basic_block_def*, %struct.basic_block_def** %target.addr, align 8, !dbg !3500
  %cmp196 = icmp eq %struct.basic_block_def* %97, %98, !dbg !3501
  br i1 %cmp196, label %if.then198, label %if.end199, !dbg !3502

if.then198:                                       ; preds = %if.then194
  store %struct.edge_def* null, %struct.edge_def** %retval, align 8, !dbg !3503
  br label %return, !dbg !3503

if.end199:                                        ; preds = %if.then194
  %99 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3504
  %tobool200 = icmp ne %struct._IO_FILE* %99, null, !dbg !3504
  br i1 %tobool200, label %if.then201, label %if.end209, !dbg !3506

if.then201:                                       ; preds = %if.end199
  %100 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3507
  %101 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3508
  %u202 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %101, i32 0, i32 1, !dbg !3508
  %fld203 = bitcast %union.u* %u202 to [1 x %union.rtunion_def]*, !dbg !3508
  %arrayidx204 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld203, i64 0, i64 0, !dbg !3508
  %rt_int205 = bitcast %union.rtunion_def* %arrayidx204 to i32*, !dbg !3508
  %102 = load i32, i32* %rt_int205, align 8, !dbg !3508
  %103 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3509
  %dest206 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %103, i32 0, i32 1, !dbg !3510
  %104 = load %struct.basic_block_def*, %struct.basic_block_def** %dest206, align 8, !dbg !3510
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %104, i32 0, i32 9, !dbg !3511
  %105 = load i32, i32* %index, align 8, !dbg !3511
  %106 = load %struct.basic_block_def*, %struct.basic_block_def** %target.addr, align 8, !dbg !3512
  %index207 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %106, i32 0, i32 9, !dbg !3513
  %107 = load i32, i32* %index207, align 8, !dbg !3513
  %call208 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %100, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.4, i64 0, i64 0), i32 %102, i32 %105, i32 %107), !dbg !3514
  br label %if.end209, !dbg !3514

if.end209:                                        ; preds = %if.then201, %if.end199
  %108 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3515
  %109 = load %struct.basic_block_def*, %struct.basic_block_def** %target.addr, align 8, !dbg !3517
  %call210 = call %struct.rtx_def* @block_label(%struct.basic_block_def* %109), !dbg !3518
  %call211 = call i32 @redirect_jump(%struct.rtx_def* %108, %struct.rtx_def* %call210, i32 0), !dbg !3519
  %tobool212 = icmp ne i32 %call211, 0, !dbg !3519
  br i1 %tobool212, label %if.end220, label %if.then213, !dbg !3520

if.then213:                                       ; preds = %if.end209
  %110 = load %struct.basic_block_def*, %struct.basic_block_def** %target.addr, align 8, !dbg !3521
  %111 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3521
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %111, i64 0, !dbg !3521
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3521
  %112 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3521
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %112, i32 0, i32 1, !dbg !3521
  %113 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !3521
  %cmp214 = icmp eq %struct.basic_block_def* %110, %113, !dbg !3521
  br i1 %cmp214, label %cond.false217, label %cond.true216, !dbg !3521

cond.true216:                                     ; preds = %if.then213
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 837, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3521
  br label %cond.end218, !dbg !3521

cond.false217:                                    ; preds = %if.then213
  br label %cond.end218, !dbg !3521

cond.end218:                                      ; preds = %cond.false217, %cond.true216
  %cond219 = phi i32 [ 0, %cond.true216 ], [ 0, %cond.false217 ], !dbg !3521
  store %struct.edge_def* null, %struct.edge_def** %retval, align 8, !dbg !3523
  br label %return, !dbg !3523

if.end220:                                        ; preds = %if.end209
  br label %if.end353, !dbg !3524

if.else221:                                       ; preds = %if.else191
  %114 = load %struct.basic_block_def*, %struct.basic_block_def** %target.addr, align 8, !dbg !3525
  %115 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3527
  %add.ptr222 = getelementptr inbounds %struct.function, %struct.function* %115, i64 0, !dbg !3527
  %cfg223 = getelementptr inbounds %struct.function, %struct.function* %add.ptr222, i32 0, i32 1, !dbg !3527
  %116 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg223, align 8, !dbg !3527
  %x_exit_block_ptr224 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %116, i32 0, i32 1, !dbg !3527
  %117 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr224, align 8, !dbg !3527
  %cmp225 = icmp eq %struct.basic_block_def* %114, %117, !dbg !3528
  br i1 %cmp225, label %if.then227, label %if.else228, !dbg !3529

if.then227:                                       ; preds = %if.else221
  store %struct.edge_def* null, %struct.edge_def** %retval, align 8, !dbg !3530
  br label %return, !dbg !3530

if.else228:                                       ; preds = %if.else221
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target_label, metadata !3531, metadata !DIExpression()), !dbg !3533
  %118 = load %struct.basic_block_def*, %struct.basic_block_def** %target.addr, align 8, !dbg !3534
  %call229 = call %struct.rtx_def* @block_label(%struct.basic_block_def* %118), !dbg !3535
  store %struct.rtx_def* %call229, %struct.rtx_def** %target_label, align 8, !dbg !3533
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %barrier, metadata !3536, metadata !DIExpression()), !dbg !3537
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %label, metadata !3538, metadata !DIExpression()), !dbg !3539
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %table, metadata !3540, metadata !DIExpression()), !dbg !3541
  %119 = load %struct.rtx_def*, %struct.rtx_def** %target_label, align 8, !dbg !3542
  %call230 = call %struct.rtx_def* @gen_jump(%struct.rtx_def* %119), !dbg !3543
  %120 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3544
  %call231 = call %struct.rtx_def* @emit_jump_insn_after_noloc(%struct.rtx_def* %call230, %struct.rtx_def* %120), !dbg !3545
  %121 = load %struct.rtx_def*, %struct.rtx_def** %target_label, align 8, !dbg !3546
  %122 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3547
  %il232 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %122, i32 0, i32 7, !dbg !3547
  %rtl233 = bitcast %union.basic_block_il_dependent* %il232 to %struct.rtl_bb_info**, !dbg !3547
  %123 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl233, align 8, !dbg !3547
  %end_234 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %123, i32 0, i32 1, !dbg !3547
  %124 = load %struct.rtx_def*, %struct.rtx_def** %end_234, align 8, !dbg !3547
  %u235 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %124, i32 0, i32 1, !dbg !3547
  %fld236 = bitcast %union.u* %u235 to [1 x %union.rtunion_def]*, !dbg !3547
  %arrayidx237 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld236, i64 0, i64 8, !dbg !3547
  %rt_rtx238 = bitcast %union.rtunion_def* %arrayidx237 to %struct.rtx_def**, !dbg !3547
  store %struct.rtx_def* %121, %struct.rtx_def** %rt_rtx238, align 8, !dbg !3548
  %125 = load %struct.rtx_def*, %struct.rtx_def** %target_label, align 8, !dbg !3549
  %u239 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %125, i32 0, i32 1, !dbg !3549
  %fld240 = bitcast %union.u* %u239 to [1 x %union.rtunion_def]*, !dbg !3549
  %arrayidx241 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld240, i64 0, i64 4, !dbg !3549
  %rt_int242 = bitcast %union.rtunion_def* %arrayidx241 to i32*, !dbg !3549
  %126 = load i32, i32* %rt_int242, align 8, !dbg !3550
  %inc = add nsw i32 %126, 1, !dbg !3550
  store i32 %inc, i32* %rt_int242, align 8, !dbg !3550
  %127 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3551
  %tobool243 = icmp ne %struct._IO_FILE* %127, null, !dbg !3551
  br i1 %tobool243, label %if.then244, label %if.end257, !dbg !3553

if.then244:                                       ; preds = %if.else228
  %128 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3554
  %129 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3555
  %u245 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %129, i32 0, i32 1, !dbg !3555
  %fld246 = bitcast %union.u* %u245 to [1 x %union.rtunion_def]*, !dbg !3555
  %arrayidx247 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld246, i64 0, i64 0, !dbg !3555
  %rt_int248 = bitcast %union.rtunion_def* %arrayidx247 to i32*, !dbg !3555
  %130 = load i32, i32* %rt_int248, align 8, !dbg !3555
  %131 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3556
  %il249 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %131, i32 0, i32 7, !dbg !3556
  %rtl250 = bitcast %union.basic_block_il_dependent* %il249 to %struct.rtl_bb_info**, !dbg !3556
  %132 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl250, align 8, !dbg !3556
  %end_251 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %132, i32 0, i32 1, !dbg !3556
  %133 = load %struct.rtx_def*, %struct.rtx_def** %end_251, align 8, !dbg !3556
  %u252 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %133, i32 0, i32 1, !dbg !3556
  %fld253 = bitcast %union.u* %u252 to [1 x %union.rtunion_def]*, !dbg !3556
  %arrayidx254 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld253, i64 0, i64 0, !dbg !3556
  %rt_int255 = bitcast %union.rtunion_def* %arrayidx254 to i32*, !dbg !3556
  %134 = load i32, i32* %rt_int255, align 8, !dbg !3556
  %call256 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %128, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.5, i64 0, i64 0), i32 %130, i32 %134), !dbg !3557
  br label %if.end257, !dbg !3557

if.end257:                                        ; preds = %if.then244, %if.else228
  %135 = load %struct.rtx_def*, %struct.rtx_def** %kill_from, align 8, !dbg !3558
  %136 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3559
  call void @delete_insn_chain(%struct.rtx_def* %135, %struct.rtx_def* %136, i8 zeroext 0), !dbg !3560
  %137 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3561
  %call258 = call zeroext i8 @tablejump_p(%struct.rtx_def* %137, %struct.rtx_def** %label, %struct.rtx_def** %table), !dbg !3563
  %tobool259 = icmp ne i8 %call258, 0, !dbg !3563
  br i1 %tobool259, label %if.then260, label %if.end261, !dbg !3564

if.then260:                                       ; preds = %if.end257
  %138 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !3565
  %139 = load %struct.rtx_def*, %struct.rtx_def** %table, align 8, !dbg !3566
  call void @delete_insn_chain(%struct.rtx_def* %138, %struct.rtx_def* %139, i8 zeroext 0), !dbg !3567
  br label %if.end261, !dbg !3567

if.end261:                                        ; preds = %if.then260, %if.end257
  %140 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3568
  %il262 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %140, i32 0, i32 7, !dbg !3568
  %rtl263 = bitcast %union.basic_block_il_dependent* %il262 to %struct.rtl_bb_info**, !dbg !3568
  %141 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl263, align 8, !dbg !3568
  %end_264 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %141, i32 0, i32 1, !dbg !3568
  %142 = load %struct.rtx_def*, %struct.rtx_def** %end_264, align 8, !dbg !3568
  %call265 = call %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %142), !dbg !3569
  store %struct.rtx_def* %call265, %struct.rtx_def** %barrier, align 8, !dbg !3570
  %143 = load %struct.rtx_def*, %struct.rtx_def** %barrier, align 8, !dbg !3571
  %tobool266 = icmp ne %struct.rtx_def* %143, null, !dbg !3571
  br i1 %tobool266, label %lor.lhs.false267, label %if.then272, !dbg !3573

lor.lhs.false267:                                 ; preds = %if.end261
  %144 = load %struct.rtx_def*, %struct.rtx_def** %barrier, align 8, !dbg !3574
  %145 = bitcast %struct.rtx_def* %144 to i32*, !dbg !3574
  %bf.load268 = load i32, i32* %145, align 8, !dbg !3574
  %bf.clear269 = and i32 %bf.load268, 65535, !dbg !3574
  %cmp270 = icmp eq i32 %bf.clear269, 11, !dbg !3574
  br i1 %cmp270, label %if.else277, label %if.then272, !dbg !3575

if.then272:                                       ; preds = %lor.lhs.false267, %if.end261
  %146 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3576
  %il273 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %146, i32 0, i32 7, !dbg !3576
  %rtl274 = bitcast %union.basic_block_il_dependent* %il273 to %struct.rtl_bb_info**, !dbg !3576
  %147 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl274, align 8, !dbg !3576
  %end_275 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %147, i32 0, i32 1, !dbg !3576
  %148 = load %struct.rtx_def*, %struct.rtx_def** %end_275, align 8, !dbg !3576
  %call276 = call %struct.rtx_def* @emit_barrier_after(%struct.rtx_def* %148), !dbg !3577
  br label %if.end351, !dbg !3577

if.else277:                                       ; preds = %lor.lhs.false267
  %149 = load %struct.rtx_def*, %struct.rtx_def** %barrier, align 8, !dbg !3578
  %150 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3581
  %il278 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %150, i32 0, i32 7, !dbg !3581
  %rtl279 = bitcast %union.basic_block_il_dependent* %il278 to %struct.rtl_bb_info**, !dbg !3581
  %151 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl279, align 8, !dbg !3581
  %end_280 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %151, i32 0, i32 1, !dbg !3581
  %152 = load %struct.rtx_def*, %struct.rtx_def** %end_280, align 8, !dbg !3581
  %u281 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %152, i32 0, i32 1, !dbg !3581
  %fld282 = bitcast %union.u* %u281 to [1 x %union.rtunion_def]*, !dbg !3581
  %arrayidx283 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld282, i64 0, i64 2, !dbg !3581
  %rt_rtx284 = bitcast %union.rtunion_def* %arrayidx283 to %struct.rtx_def**, !dbg !3581
  %153 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx284, align 8, !dbg !3581
  %cmp285 = icmp ne %struct.rtx_def* %149, %153, !dbg !3582
  br i1 %cmp285, label %if.then287, label %if.end350, !dbg !3583

if.then287:                                       ; preds = %if.else277
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %new_insn, metadata !3584, metadata !DIExpression()), !dbg !3586
  %154 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3587
  %il288 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %154, i32 0, i32 7, !dbg !3587
  %rtl289 = bitcast %union.basic_block_il_dependent* %il288 to %struct.rtl_bb_info**, !dbg !3587
  %155 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl289, align 8, !dbg !3587
  %end_290 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %155, i32 0, i32 1, !dbg !3587
  %156 = load %struct.rtx_def*, %struct.rtx_def** %end_290, align 8, !dbg !3587
  store %struct.rtx_def* %156, %struct.rtx_def** %new_insn, align 8, !dbg !3586
  %157 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3588
  %il291 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %157, i32 0, i32 7, !dbg !3588
  %rtl292 = bitcast %union.basic_block_il_dependent* %il291 to %struct.rtl_bb_info**, !dbg !3588
  %158 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl292, align 8, !dbg !3588
  %end_293 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %158, i32 0, i32 1, !dbg !3588
  %159 = load %struct.rtx_def*, %struct.rtx_def** %end_293, align 8, !dbg !3588
  %u294 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %159, i32 0, i32 1, !dbg !3588
  %fld295 = bitcast %union.u* %u294 to [1 x %union.rtunion_def]*, !dbg !3588
  %arrayidx296 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld295, i64 0, i64 2, !dbg !3588
  %rt_rtx297 = bitcast %union.rtunion_def* %arrayidx296 to %struct.rtx_def**, !dbg !3588
  %160 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx297, align 8, !dbg !3588
  %161 = load %struct.rtx_def*, %struct.rtx_def** %barrier, align 8, !dbg !3589
  %u298 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %161, i32 0, i32 1, !dbg !3589
  %fld299 = bitcast %union.u* %u298 to [1 x %union.rtunion_def]*, !dbg !3589
  %arrayidx300 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld299, i64 0, i64 1, !dbg !3589
  %rt_rtx301 = bitcast %union.rtunion_def* %arrayidx300 to %struct.rtx_def**, !dbg !3589
  %162 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx301, align 8, !dbg !3589
  %163 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3590
  call void @update_bb_for_insn_chain(%struct.rtx_def* %160, %struct.rtx_def* %162, %struct.basic_block_def* %163), !dbg !3591
  %164 = load %struct.rtx_def*, %struct.rtx_def** %new_insn, align 8, !dbg !3592
  %u302 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %164, i32 0, i32 1, !dbg !3592
  %fld303 = bitcast %union.u* %u302 to [1 x %union.rtunion_def]*, !dbg !3592
  %arrayidx304 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld303, i64 0, i64 2, !dbg !3592
  %rt_rtx305 = bitcast %union.rtunion_def* %arrayidx304 to %struct.rtx_def**, !dbg !3592
  %165 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx305, align 8, !dbg !3592
  %166 = load %struct.rtx_def*, %struct.rtx_def** %new_insn, align 8, !dbg !3593
  %u306 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %166, i32 0, i32 1, !dbg !3593
  %fld307 = bitcast %union.u* %u306 to [1 x %union.rtunion_def]*, !dbg !3593
  %arrayidx308 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld307, i64 0, i64 1, !dbg !3593
  %rt_rtx309 = bitcast %union.rtunion_def* %arrayidx308 to %struct.rtx_def**, !dbg !3593
  %167 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx309, align 8, !dbg !3593
  %u310 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %167, i32 0, i32 1, !dbg !3593
  %fld311 = bitcast %union.u* %u310 to [1 x %union.rtunion_def]*, !dbg !3593
  %arrayidx312 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld311, i64 0, i64 2, !dbg !3593
  %rt_rtx313 = bitcast %union.rtunion_def* %arrayidx312 to %struct.rtx_def**, !dbg !3593
  store %struct.rtx_def* %165, %struct.rtx_def** %rt_rtx313, align 8, !dbg !3594
  %168 = load %struct.rtx_def*, %struct.rtx_def** %new_insn, align 8, !dbg !3595
  %u314 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %168, i32 0, i32 1, !dbg !3595
  %fld315 = bitcast %union.u* %u314 to [1 x %union.rtunion_def]*, !dbg !3595
  %arrayidx316 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld315, i64 0, i64 1, !dbg !3595
  %rt_rtx317 = bitcast %union.rtunion_def* %arrayidx316 to %struct.rtx_def**, !dbg !3595
  %169 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx317, align 8, !dbg !3595
  %170 = load %struct.rtx_def*, %struct.rtx_def** %new_insn, align 8, !dbg !3596
  %u318 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %170, i32 0, i32 1, !dbg !3596
  %fld319 = bitcast %union.u* %u318 to [1 x %union.rtunion_def]*, !dbg !3596
  %arrayidx320 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld319, i64 0, i64 2, !dbg !3596
  %rt_rtx321 = bitcast %union.rtunion_def* %arrayidx320 to %struct.rtx_def**, !dbg !3596
  %171 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx321, align 8, !dbg !3596
  %u322 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %171, i32 0, i32 1, !dbg !3596
  %fld323 = bitcast %union.u* %u322 to [1 x %union.rtunion_def]*, !dbg !3596
  %arrayidx324 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld323, i64 0, i64 1, !dbg !3596
  %rt_rtx325 = bitcast %union.rtunion_def* %arrayidx324 to %struct.rtx_def**, !dbg !3596
  store %struct.rtx_def* %169, %struct.rtx_def** %rt_rtx325, align 8, !dbg !3597
  %172 = load %struct.rtx_def*, %struct.rtx_def** %barrier, align 8, !dbg !3598
  %173 = load %struct.rtx_def*, %struct.rtx_def** %new_insn, align 8, !dbg !3599
  %u326 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %173, i32 0, i32 1, !dbg !3599
  %fld327 = bitcast %union.u* %u326 to [1 x %union.rtunion_def]*, !dbg !3599
  %arrayidx328 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld327, i64 0, i64 2, !dbg !3599
  %rt_rtx329 = bitcast %union.rtunion_def* %arrayidx328 to %struct.rtx_def**, !dbg !3599
  store %struct.rtx_def* %172, %struct.rtx_def** %rt_rtx329, align 8, !dbg !3600
  %174 = load %struct.rtx_def*, %struct.rtx_def** %new_insn, align 8, !dbg !3601
  %175 = load %struct.rtx_def*, %struct.rtx_def** %barrier, align 8, !dbg !3602
  %u330 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %175, i32 0, i32 1, !dbg !3602
  %fld331 = bitcast %union.u* %u330 to [1 x %union.rtunion_def]*, !dbg !3602
  %arrayidx332 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld331, i64 0, i64 1, !dbg !3602
  %rt_rtx333 = bitcast %union.rtunion_def* %arrayidx332 to %struct.rtx_def**, !dbg !3602
  %176 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx333, align 8, !dbg !3602
  %u334 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %176, i32 0, i32 1, !dbg !3602
  %fld335 = bitcast %union.u* %u334 to [1 x %union.rtunion_def]*, !dbg !3602
  %arrayidx336 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld335, i64 0, i64 2, !dbg !3602
  %rt_rtx337 = bitcast %union.rtunion_def* %arrayidx336 to %struct.rtx_def**, !dbg !3602
  store %struct.rtx_def* %174, %struct.rtx_def** %rt_rtx337, align 8, !dbg !3603
  %177 = load %struct.rtx_def*, %struct.rtx_def** %barrier, align 8, !dbg !3604
  %u338 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %177, i32 0, i32 1, !dbg !3604
  %fld339 = bitcast %union.u* %u338 to [1 x %union.rtunion_def]*, !dbg !3604
  %arrayidx340 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld339, i64 0, i64 1, !dbg !3604
  %rt_rtx341 = bitcast %union.rtunion_def* %arrayidx340 to %struct.rtx_def**, !dbg !3604
  %178 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx341, align 8, !dbg !3604
  %179 = load %struct.rtx_def*, %struct.rtx_def** %new_insn, align 8, !dbg !3605
  %u342 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %179, i32 0, i32 1, !dbg !3605
  %fld343 = bitcast %union.u* %u342 to [1 x %union.rtunion_def]*, !dbg !3605
  %arrayidx344 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld343, i64 0, i64 1, !dbg !3605
  %rt_rtx345 = bitcast %union.rtunion_def* %arrayidx344 to %struct.rtx_def**, !dbg !3605
  store %struct.rtx_def* %178, %struct.rtx_def** %rt_rtx345, align 8, !dbg !3606
  %180 = load %struct.rtx_def*, %struct.rtx_def** %new_insn, align 8, !dbg !3607
  %181 = load %struct.rtx_def*, %struct.rtx_def** %barrier, align 8, !dbg !3608
  %u346 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %181, i32 0, i32 1, !dbg !3608
  %fld347 = bitcast %union.u* %u346 to [1 x %union.rtunion_def]*, !dbg !3608
  %arrayidx348 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld347, i64 0, i64 1, !dbg !3608
  %rt_rtx349 = bitcast %union.rtunion_def* %arrayidx348 to %struct.rtx_def**, !dbg !3608
  store %struct.rtx_def* %180, %struct.rtx_def** %rt_rtx349, align 8, !dbg !3609
  br label %if.end350, !dbg !3610

if.end350:                                        ; preds = %if.then287, %if.else277
  br label %if.end351

if.end351:                                        ; preds = %if.end350, %if.then272
  br label %if.end352

if.end352:                                        ; preds = %if.end351
  br label %if.end353

if.end353:                                        ; preds = %if.end352, %if.end220
  br label %if.end354

if.end354:                                        ; preds = %if.end353, %if.end190
  %182 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3611
  %call355 = call zeroext i8 @single_succ_p(%struct.basic_block_def* %182), !dbg !3613
  %tobool356 = icmp ne i8 %call355, 0, !dbg !3613
  br i1 %tobool356, label %if.end358, label %if.then357, !dbg !3614

if.then357:                                       ; preds = %if.end354
  %183 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3615
  call void @remove_edge(%struct.edge_def* %183), !dbg !3616
  br label %if.end358, !dbg !3616

if.end358:                                        ; preds = %if.then357, %if.end354
  %184 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3617
  %call359 = call zeroext i8 @single_succ_p(%struct.basic_block_def* %184), !dbg !3617
  %tobool360 = icmp ne i8 %call359, 0, !dbg !3617
  br i1 %tobool360, label %cond.false362, label %cond.true361, !dbg !3617

cond.true361:                                     ; preds = %if.end358
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 898, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3617
  br label %cond.end363, !dbg !3617

cond.false362:                                    ; preds = %if.end358
  br label %cond.end363, !dbg !3617

cond.end363:                                      ; preds = %cond.false362, %cond.true361
  %cond364 = phi i32 [ 0, %cond.true361 ], [ 0, %cond.false362 ], !dbg !3617
  %185 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3618
  %call365 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %185), !dbg !3619
  store %struct.edge_def* %call365, %struct.edge_def** %e.addr, align 8, !dbg !3620
  %186 = load i32, i32* %fallthru, align 4, !dbg !3621
  %tobool366 = icmp ne i32 %186, 0, !dbg !3621
  br i1 %tobool366, label %if.then367, label %if.else369, !dbg !3623

if.then367:                                       ; preds = %cond.end363
  %187 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3624
  %flags368 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %187, i32 0, i32 7, !dbg !3625
  store i32 1, i32* %flags368, align 8, !dbg !3626
  br label %if.end371, !dbg !3624

if.else369:                                       ; preds = %cond.end363
  %188 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3627
  %flags370 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %188, i32 0, i32 7, !dbg !3628
  store i32 0, i32* %flags370, align 8, !dbg !3629
  br label %if.end371

if.end371:                                        ; preds = %if.else369, %if.then367
  %189 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3630
  %probability = getelementptr inbounds %struct.edge_def, %struct.edge_def* %189, i32 0, i32 8, !dbg !3631
  store i32 10000, i32* %probability, align 4, !dbg !3632
  %190 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3633
  %count = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %190, i32 0, i32 8, !dbg !3634
  %191 = load i64, i64* %count, align 8, !dbg !3634
  %192 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3635
  %count372 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %192, i32 0, i32 9, !dbg !3636
  store i64 %191, i64* %count372, align 8, !dbg !3637
  %193 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3638
  %dest373 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %193, i32 0, i32 1, !dbg !3640
  %194 = load %struct.basic_block_def*, %struct.basic_block_def** %dest373, align 8, !dbg !3640
  %195 = load %struct.basic_block_def*, %struct.basic_block_def** %target.addr, align 8, !dbg !3641
  %cmp374 = icmp ne %struct.basic_block_def* %194, %195, !dbg !3642
  br i1 %cmp374, label %if.then376, label %if.end377, !dbg !3643

if.then376:                                       ; preds = %if.end371
  %196 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3644
  %197 = load %struct.basic_block_def*, %struct.basic_block_def** %target.addr, align 8, !dbg !3645
  call void @redirect_edge_succ(%struct.edge_def* %196, %struct.basic_block_def* %197), !dbg !3646
  br label %if.end377, !dbg !3646

if.end377:                                        ; preds = %if.then376, %if.end371
  %198 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3647
  store %struct.edge_def* %198, %struct.edge_def** %retval, align 8, !dbg !3648
  br label %return, !dbg !3648

return:                                           ; preds = %if.end377, %if.then227, %cond.end218, %if.then198, %if.then97, %if.then53, %if.then44, %if.then40, %if.then
  %199 = load %struct.edge_def*, %struct.edge_def** %retval, align 8, !dbg !3649
  ret %struct.edge_def* %199, !dbg !3649
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_length(%struct.VEC_edge_base* %vec_) #0 !dbg !3650 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !3655, metadata !DIExpression()), !dbg !3656
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !3656
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !3656
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3656

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !3656
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %1, i32 0, i32 0, !dbg !3656
  %2 = load i32, i32* %num, align 8, !dbg !3656
  br label %cond.end, !dbg !3656

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3656

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !3656
  ret i32 %cond, !dbg !3656
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %vec_, i32 %ix_) #0 !dbg !3657 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !3660, metadata !DIExpression()), !dbg !3661
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3662, metadata !DIExpression()), !dbg !3661
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !3661
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !3661
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !3661

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !3661
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !3661
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !3661
  %3 = load i32, i32* %num, align 8, !dbg !3661
  %cmp = icmp ult i32 %1, %3, !dbg !3661
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !3663
  %land.ext = zext i1 %4 to i32, !dbg !3661
  %5 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !3661
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %5, i32 0, i32 2, !dbg !3661
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !3661
  %idxprom = zext i32 %6 to i64, !dbg !3661
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !3661
  %7 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !3661
  ret %struct.edge_def* %7, !dbg !3661
}

declare dso_local i32 @onlyjump_p(%struct.rtx_def*) #2

declare dso_local zeroext i8 @tablejump_p(%struct.rtx_def*, %struct.rtx_def**, %struct.rtx_def**) #2

declare dso_local %struct.rtx_def* @single_set_2(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local i32 @side_effects_p(%struct.rtx_def*) #2

declare dso_local zeroext i8 @can_fallthru(%struct.basic_block_def*, %struct.basic_block_def*) #2

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

declare dso_local i32 @simplejump_p(%struct.rtx_def*) #2

declare dso_local i32 @redirect_jump(%struct.rtx_def*, %struct.rtx_def*, i32) #2

declare dso_local %struct.rtx_def* @emit_jump_insn_after_noloc(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @gen_jump(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @emit_barrier_after(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_succ_p(%struct.basic_block_def* %bb) #0 !dbg !3664 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !3665, metadata !DIExpression()), !dbg !3666
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3667
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 1, !dbg !3667
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !3667
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !3667
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3667

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3667
  %succs1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 1, !dbg !3667
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs1, align 8, !dbg !3667
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !3667
  br label %cond.end, !dbg !3667

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3667

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3667
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !3667
  %cmp = icmp eq i32 %call, 1, !dbg !3668
  %conv = zext i1 %cmp to i32, !dbg !3668
  %conv2 = trunc i32 %conv to i8, !dbg !3667
  ret i8 %conv2, !dbg !3669
}

declare dso_local void @remove_edge(%struct.edge_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %bb) #0 !dbg !3670 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !3673, metadata !DIExpression()), !dbg !3674
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3675
  %call = call zeroext i8 @single_succ_p(%struct.basic_block_def* %0), !dbg !3675
  %tobool = icmp ne i8 %call, 0, !dbg !3675
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !3675

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.21, i64 0, i64 0), i32 645, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3675
  br label %cond.end, !dbg !3675

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3675

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3675
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3676
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 1, !dbg !3676
  %2 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !3676
  %tobool1 = icmp ne %struct.VEC_edge_gc* %2, null, !dbg !3676
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !3676

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3676
  %succs3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 1, !dbg !3676
  %4 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs3, align 8, !dbg !3676
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %4, i32 0, i32 0, !dbg !3676
  br label %cond.end5, !dbg !3676

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !3676

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_edge_base* [ %base, %cond.true2 ], [ null, %cond.false4 ], !dbg !3676
  %call7 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond6, i32 0), !dbg !3676
  ret %struct.edge_def* %call7, !dbg !3677
}

declare dso_local void @redirect_edge_succ(%struct.edge_def*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.basic_block_def* @force_nonfallthru(%struct.edge_def* %e) #0 !dbg !3678 {
entry:
  %e.addr = alloca %struct.edge_def*, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !3679, metadata !DIExpression()), !dbg !3680
  %0 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3681
  %1 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3682
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %1, i32 0, i32 1, !dbg !3683
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !3683
  %call = call %struct.basic_block_def* @force_nonfallthru_and_redirect(%struct.edge_def* %0, %struct.basic_block_def* %2), !dbg !3684
  ret %struct.basic_block_def* %call, !dbg !3685
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @force_nonfallthru_and_redirect(%struct.edge_def* %e, %struct.basic_block_def* %target) #0 !dbg !3686 {
entry:
  %e.addr = alloca %struct.edge_def*, align 8
  %target.addr = alloca %struct.basic_block_def*, align 8
  %jump_block = alloca %struct.basic_block_def*, align 8
  %new_bb = alloca %struct.basic_block_def*, align 8
  %src = alloca %struct.basic_block_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  %new_edge = alloca %struct.edge_def*, align 8
  %abnormal_edge_flags = alloca i32, align 4
  %loc = alloca i32, align 4
  %note17 = alloca %struct.rtx_def*, align 8
  %b = alloca %struct.edge_def*, align 8
  %redirected = alloca i8, align 1
  %prob = alloca i32, align 4
  %tmp = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %found = alloca i8, align 1
  %bb = alloca %struct.basic_block_def*, align 8
  %tmp97 = alloca %struct.edge_iterator, align 8
  %bb_ = alloca %struct.basic_block_def*, align 8
  %label = alloca %struct.rtx_def*, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !3687, metadata !DIExpression()), !dbg !3688
  store %struct.basic_block_def* %target, %struct.basic_block_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %target.addr, metadata !3689, metadata !DIExpression()), !dbg !3690
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %jump_block, metadata !3691, metadata !DIExpression()), !dbg !3692
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %new_bb, metadata !3693, metadata !DIExpression()), !dbg !3694
  store %struct.basic_block_def* null, %struct.basic_block_def** %new_bb, align 8, !dbg !3694
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %src, metadata !3695, metadata !DIExpression()), !dbg !3696
  %0 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3697
  %src1 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %0, i32 0, i32 0, !dbg !3698
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %src1, align 8, !dbg !3698
  store %struct.basic_block_def* %1, %struct.basic_block_def** %src, align 8, !dbg !3696
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !3699, metadata !DIExpression()), !dbg !3700
  call void @llvm.dbg.declare(metadata %struct.edge_def** %new_edge, metadata !3701, metadata !DIExpression()), !dbg !3702
  call void @llvm.dbg.declare(metadata i32* %abnormal_edge_flags, metadata !3703, metadata !DIExpression()), !dbg !3704
  store i32 0, i32* %abnormal_edge_flags, align 4, !dbg !3704
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !3705, metadata !DIExpression()), !dbg !3706
  %2 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3707
  %src2 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %2, i32 0, i32 0, !dbg !3709
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %src2, align 8, !dbg !3709
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3710
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !3710
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3710
  %5 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3710
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %5, i32 0, i32 0, !dbg !3710
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !3710
  %cmp = icmp ne %struct.basic_block_def* %3, %6, !dbg !3711
  br i1 %cmp, label %land.lhs.true, label %if.end60, !dbg !3712

land.lhs.true:                                    ; preds = %entry
  %7 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3713
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %7, i32 0, i32 1, !dbg !3714
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !3714
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3715
  %add.ptr3 = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !3715
  %cfg4 = getelementptr inbounds %struct.function, %struct.function* %add.ptr3, i32 0, i32 1, !dbg !3715
  %10 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg4, align 8, !dbg !3715
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %10, i32 0, i32 1, !dbg !3715
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !3715
  %cmp5 = icmp ne %struct.basic_block_def* %8, %11, !dbg !3716
  br i1 %cmp5, label %land.lhs.true6, label %if.end60, !dbg !3717

land.lhs.true6:                                   ; preds = %land.lhs.true
  %12 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3718
  %src7 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %12, i32 0, i32 0, !dbg !3718
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %src7, align 8, !dbg !3718
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 7, !dbg !3718
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !3718
  %14 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !3718
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %14, i32 0, i32 1, !dbg !3718
  %15 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !3718
  %call = call i32 @any_condjump_p(%struct.rtx_def* %15), !dbg !3719
  %tobool = icmp ne i32 %call, 0, !dbg !3719
  br i1 %tobool, label %land.lhs.true8, label %if.end60, !dbg !3720

land.lhs.true8:                                   ; preds = %land.lhs.true6
  %16 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3721
  %src9 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %16, i32 0, i32 0, !dbg !3721
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %src9, align 8, !dbg !3721
  %il10 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %17, i32 0, i32 7, !dbg !3721
  %rtl11 = bitcast %union.basic_block_il_dependent* %il10 to %struct.rtl_bb_info**, !dbg !3721
  %18 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl11, align 8, !dbg !3721
  %end_12 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %18, i32 0, i32 1, !dbg !3721
  %19 = load %struct.rtx_def*, %struct.rtx_def** %end_12, align 8, !dbg !3721
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !3721
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3721
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 8, !dbg !3721
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !3721
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !3721
  %21 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3722
  %dest13 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %21, i32 0, i32 1, !dbg !3722
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %dest13, align 8, !dbg !3722
  %il14 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %22, i32 0, i32 7, !dbg !3722
  %rtl15 = bitcast %union.basic_block_il_dependent* %il14 to %struct.rtl_bb_info**, !dbg !3722
  %23 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl15, align 8, !dbg !3722
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %23, i32 0, i32 0, !dbg !3722
  %24 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !3722
  %cmp16 = icmp eq %struct.rtx_def* %20, %24, !dbg !3723
  br i1 %cmp16, label %if.then, label %if.end60, !dbg !3724

if.then:                                          ; preds = %land.lhs.true8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note17, metadata !3725, metadata !DIExpression()), !dbg !3727
  call void @llvm.dbg.declare(metadata %struct.edge_def** %b, metadata !3728, metadata !DIExpression()), !dbg !3729
  %25 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3730
  %src18 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %25, i32 0, i32 0, !dbg !3731
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %src18, align 8, !dbg !3731
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %target.addr, align 8, !dbg !3732
  %call19 = call %struct.edge_def* @unchecked_make_edge(%struct.basic_block_def* %26, %struct.basic_block_def* %27, i32 0), !dbg !3733
  store %struct.edge_def* %call19, %struct.edge_def** %b, align 8, !dbg !3729
  call void @llvm.dbg.declare(metadata i8* %redirected, metadata !3734, metadata !DIExpression()), !dbg !3735
  %28 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3736
  %src20 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %28, i32 0, i32 0, !dbg !3736
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %src20, align 8, !dbg !3736
  %il21 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %29, i32 0, i32 7, !dbg !3736
  %rtl22 = bitcast %union.basic_block_il_dependent* %il21 to %struct.rtl_bb_info**, !dbg !3736
  %30 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl22, align 8, !dbg !3736
  %end_23 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %30, i32 0, i32 1, !dbg !3736
  %31 = load %struct.rtx_def*, %struct.rtx_def** %end_23, align 8, !dbg !3736
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %target.addr, align 8, !dbg !3737
  %call24 = call %struct.rtx_def* @block_label(%struct.basic_block_def* %32), !dbg !3738
  %call25 = call i32 @redirect_jump(%struct.rtx_def* %31, %struct.rtx_def* %call24, i32 0), !dbg !3739
  %conv = trunc i32 %call25 to i8, !dbg !3739
  store i8 %conv, i8* %redirected, align 1, !dbg !3740
  %33 = load i8, i8* %redirected, align 1, !dbg !3741
  %tobool26 = icmp ne i8 %33, 0, !dbg !3741
  br i1 %tobool26, label %cond.false, label %cond.true, !dbg !3741

cond.true:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 1127, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3741
  br label %cond.end, !dbg !3741

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !3741

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3741
  %34 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3742
  %src27 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %34, i32 0, i32 0, !dbg !3742
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %src27, align 8, !dbg !3742
  %il28 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %35, i32 0, i32 7, !dbg !3742
  %rtl29 = bitcast %union.basic_block_il_dependent* %il28 to %struct.rtl_bb_info**, !dbg !3742
  %36 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl29, align 8, !dbg !3742
  %end_30 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %36, i32 0, i32 1, !dbg !3742
  %37 = load %struct.rtx_def*, %struct.rtx_def** %end_30, align 8, !dbg !3742
  %call31 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %37, i32 13, %struct.rtx_def* null), !dbg !3743
  store %struct.rtx_def* %call31, %struct.rtx_def** %note17, align 8, !dbg !3744
  %38 = load %struct.rtx_def*, %struct.rtx_def** %note17, align 8, !dbg !3745
  %tobool32 = icmp ne %struct.rtx_def* %38, null, !dbg !3745
  br i1 %tobool32, label %if.then33, label %if.end59, !dbg !3747

if.then33:                                        ; preds = %cond.end
  call void @llvm.dbg.declare(metadata i32* %prob, metadata !3748, metadata !DIExpression()), !dbg !3750
  %39 = load %struct.rtx_def*, %struct.rtx_def** %note17, align 8, !dbg !3751
  %u34 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1, !dbg !3751
  %fld35 = bitcast %union.u* %u34 to [1 x %union.rtunion_def]*, !dbg !3751
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld35, i64 0, i64 0, !dbg !3751
  %rt_rtx37 = bitcast %union.rtunion_def* %arrayidx36 to %struct.rtx_def**, !dbg !3751
  %40 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx37, align 8, !dbg !3751
  %u38 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %40, i32 0, i32 1, !dbg !3751
  %hwint = bitcast %union.u* %u38 to [1 x i64]*, !dbg !3751
  %arrayidx39 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !3751
  %41 = load i64, i64* %arrayidx39, align 8, !dbg !3751
  %conv40 = trunc i64 %41 to i32, !dbg !3751
  store i32 %conv40, i32* %prob, align 4, !dbg !3750
  %42 = load i32, i32* %prob, align 4, !dbg !3752
  %43 = load %struct.edge_def*, %struct.edge_def** %b, align 8, !dbg !3753
  %probability = getelementptr inbounds %struct.edge_def, %struct.edge_def* %43, i32 0, i32 8, !dbg !3754
  store i32 %42, i32* %probability, align 4, !dbg !3755
  %44 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3756
  %count = getelementptr inbounds %struct.edge_def, %struct.edge_def* %44, i32 0, i32 9, !dbg !3757
  %45 = load i64, i64* %count, align 8, !dbg !3757
  %46 = load i32, i32* %prob, align 4, !dbg !3758
  %conv41 = sext i32 %46 to i64, !dbg !3758
  %mul = mul nsw i64 %45, %conv41, !dbg !3759
  %div = sdiv i64 %mul, 10000, !dbg !3760
  %47 = load %struct.edge_def*, %struct.edge_def** %b, align 8, !dbg !3761
  %count42 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %47, i32 0, i32 9, !dbg !3762
  store i64 %div, i64* %count42, align 8, !dbg !3763
  %48 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3764
  %probability43 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %48, i32 0, i32 8, !dbg !3765
  %49 = load i32, i32* %probability43, align 4, !dbg !3765
  %50 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3766
  %probability44 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %50, i32 0, i32 8, !dbg !3767
  %51 = load i32, i32* %probability44, align 4, !dbg !3768
  %sub = sub nsw i32 %51, %49, !dbg !3768
  store i32 %sub, i32* %probability44, align 4, !dbg !3768
  %52 = load %struct.edge_def*, %struct.edge_def** %b, align 8, !dbg !3769
  %count45 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %52, i32 0, i32 9, !dbg !3770
  %53 = load i64, i64* %count45, align 8, !dbg !3770
  %54 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3771
  %count46 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %54, i32 0, i32 9, !dbg !3772
  %55 = load i64, i64* %count46, align 8, !dbg !3773
  %sub47 = sub nsw i64 %55, %53, !dbg !3773
  store i64 %sub47, i64* %count46, align 8, !dbg !3773
  %56 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3774
  %probability48 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %56, i32 0, i32 8, !dbg !3776
  %57 = load i32, i32* %probability48, align 4, !dbg !3776
  %cmp49 = icmp slt i32 %57, 0, !dbg !3777
  br i1 %cmp49, label %if.then51, label %if.end, !dbg !3778

if.then51:                                        ; preds = %if.then33
  %58 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3779
  %probability52 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %58, i32 0, i32 8, !dbg !3780
  store i32 0, i32* %probability52, align 4, !dbg !3781
  br label %if.end, !dbg !3779

if.end:                                           ; preds = %if.then51, %if.then33
  %59 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3782
  %count53 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %59, i32 0, i32 9, !dbg !3784
  %60 = load i64, i64* %count53, align 8, !dbg !3784
  %cmp54 = icmp slt i64 %60, 0, !dbg !3785
  br i1 %cmp54, label %if.then56, label %if.end58, !dbg !3786

if.then56:                                        ; preds = %if.end
  %61 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3787
  %count57 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %61, i32 0, i32 9, !dbg !3788
  store i64 0, i64* %count57, align 8, !dbg !3789
  br label %if.end58, !dbg !3787

if.end58:                                         ; preds = %if.then56, %if.end
  br label %if.end59, !dbg !3790

if.end59:                                         ; preds = %if.end58, %cond.end
  br label %if.end60, !dbg !3791

if.end60:                                         ; preds = %if.end59, %land.lhs.true8, %land.lhs.true6, %land.lhs.true, %entry
  %62 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3792
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %62, i32 0, i32 7, !dbg !3794
  %63 = load i32, i32* %flags, align 8, !dbg !3794
  %and = and i32 %63, 2, !dbg !3795
  %tobool61 = icmp ne i32 %and, 0, !dbg !3795
  br i1 %tobool61, label %if.then62, label %if.else, !dbg !3796

if.then62:                                        ; preds = %if.end60
  %64 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3797
  %dest63 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %64, i32 0, i32 1, !dbg !3797
  %65 = load %struct.basic_block_def*, %struct.basic_block_def** %dest63, align 8, !dbg !3797
  %66 = load %struct.basic_block_def*, %struct.basic_block_def** %target.addr, align 8, !dbg !3797
  %cmp64 = icmp eq %struct.basic_block_def* %65, %66, !dbg !3797
  br i1 %cmp64, label %cond.false67, label %cond.true66, !dbg !3797

cond.true66:                                      ; preds = %if.then62
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 1152, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3797
  br label %cond.end68, !dbg !3797

cond.false67:                                     ; preds = %if.then62
  br label %cond.end68, !dbg !3797

cond.end68:                                       ; preds = %cond.false67, %cond.true66
  %cond69 = phi i32 [ 0, %cond.true66 ], [ 0, %cond.false67 ], !dbg !3797
  %67 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3799
  %flags70 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %67, i32 0, i32 7, !dbg !3800
  %68 = load i32, i32* %flags70, align 8, !dbg !3800
  %and71 = and i32 %68, -66, !dbg !3801
  store i32 %and71, i32* %abnormal_edge_flags, align 4, !dbg !3802
  %69 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3803
  %flags72 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %69, i32 0, i32 7, !dbg !3804
  %70 = load i32, i32* %flags72, align 8, !dbg !3805
  %and73 = and i32 %70, 65, !dbg !3805
  store i32 %and73, i32* %flags72, align 8, !dbg !3805
  br label %if.end135, !dbg !3806

if.else:                                          ; preds = %if.end60
  %71 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3807
  %flags74 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %71, i32 0, i32 7, !dbg !3807
  %72 = load i32, i32* %flags74, align 8, !dbg !3807
  %and75 = and i32 %72, 1, !dbg !3807
  %tobool76 = icmp ne i32 %and75, 0, !dbg !3807
  br i1 %tobool76, label %cond.false78, label %cond.true77, !dbg !3807

cond.true77:                                      ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 1158, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3807
  br label %cond.end79, !dbg !3807

cond.false78:                                     ; preds = %if.else
  br label %cond.end79, !dbg !3807

cond.end79:                                       ; preds = %cond.false78, %cond.true77
  %cond80 = phi i32 [ 0, %cond.true77 ], [ 0, %cond.false78 ], !dbg !3807
  %73 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3809
  %src81 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %73, i32 0, i32 0, !dbg !3811
  %74 = load %struct.basic_block_def*, %struct.basic_block_def** %src81, align 8, !dbg !3811
  %75 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3812
  %add.ptr82 = getelementptr inbounds %struct.function, %struct.function* %75, i64 0, !dbg !3812
  %cfg83 = getelementptr inbounds %struct.function, %struct.function* %add.ptr82, i32 0, i32 1, !dbg !3812
  %76 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg83, align 8, !dbg !3812
  %x_entry_block_ptr84 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %76, i32 0, i32 0, !dbg !3812
  %77 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr84, align 8, !dbg !3812
  %cmp85 = icmp eq %struct.basic_block_def* %74, %77, !dbg !3813
  br i1 %cmp85, label %if.then87, label %if.end134, !dbg !3814

if.then87:                                        ; preds = %cond.end79
  call void @llvm.dbg.declare(metadata %struct.edge_def** %tmp, metadata !3815, metadata !DIExpression()), !dbg !3817
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !3818, metadata !DIExpression()), !dbg !3819
  call void @llvm.dbg.declare(metadata i8* %found, metadata !3820, metadata !DIExpression()), !dbg !3821
  store i8 0, i8* %found, align 1, !dbg !3821
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !3822, metadata !DIExpression()), !dbg !3823
  %78 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3824
  %dest88 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %78, i32 0, i32 1, !dbg !3824
  %79 = load %struct.basic_block_def*, %struct.basic_block_def** %dest88, align 8, !dbg !3824
  %il89 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %79, i32 0, i32 7, !dbg !3824
  %rtl90 = bitcast %union.basic_block_il_dependent* %il89 to %struct.rtl_bb_info**, !dbg !3824
  %80 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl90, align 8, !dbg !3824
  %head_91 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %80, i32 0, i32 0, !dbg !3824
  %81 = load %struct.rtx_def*, %struct.rtx_def** %head_91, align 8, !dbg !3824
  %82 = bitcast %struct.rtx_def* %81 to i8*, !dbg !3824
  %83 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3825
  %add.ptr92 = getelementptr inbounds %struct.function, %struct.function* %83, i64 0, !dbg !3825
  %cfg93 = getelementptr inbounds %struct.function, %struct.function* %add.ptr92, i32 0, i32 1, !dbg !3825
  %84 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg93, align 8, !dbg !3825
  %x_entry_block_ptr94 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %84, i32 0, i32 0, !dbg !3825
  %85 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr94, align 8, !dbg !3825
  %call95 = call %struct.basic_block_def* @create_basic_block(i8* %82, i8* null, %struct.basic_block_def* %85), !dbg !3826
  store %struct.basic_block_def* %call95, %struct.basic_block_def** %bb, align 8, !dbg !3823
  %86 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3827
  %87 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3828
  %src96 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %87, i32 0, i32 0, !dbg !3829
  store %struct.basic_block_def* %86, %struct.basic_block_def** %src96, align 8, !dbg !3830
  %88 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3831
  %add.ptr98 = getelementptr inbounds %struct.function, %struct.function* %88, i64 0, !dbg !3831
  %cfg99 = getelementptr inbounds %struct.function, %struct.function* %add.ptr98, i32 0, i32 1, !dbg !3831
  %89 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg99, align 8, !dbg !3831
  %x_entry_block_ptr100 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %89, i32 0, i32 0, !dbg !3831
  %90 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr100, align 8, !dbg !3831
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %90, i32 0, i32 1, !dbg !3831
  %call101 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !3831
  %91 = bitcast %struct.edge_iterator* %tmp97 to { i32, %struct.VEC_edge_gc** }*, !dbg !3831
  %92 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %91, i32 0, i32 0, !dbg !3831
  %93 = extractvalue { i32, %struct.VEC_edge_gc** } %call101, 0, !dbg !3831
  store i32 %93, i32* %92, align 8, !dbg !3831
  %94 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %91, i32 0, i32 1, !dbg !3831
  %95 = extractvalue { i32, %struct.VEC_edge_gc** } %call101, 1, !dbg !3831
  store %struct.VEC_edge_gc** %95, %struct.VEC_edge_gc*** %94, align 8, !dbg !3831
  %96 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !3831
  %97 = bitcast %struct.edge_iterator* %tmp97 to i8*, !dbg !3831
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %96, i8* align 8 %97, i64 16, i1 false), !dbg !3831
  br label %for.cond, !dbg !3833

for.cond:                                         ; preds = %if.end122, %if.then87
  %98 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !3834
  %99 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %98, i32 0, i32 0, !dbg !3834
  %100 = load i32, i32* %99, align 8, !dbg !3834
  %101 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %98, i32 0, i32 1, !dbg !3834
  %102 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %101, align 8, !dbg !3834
  %call102 = call %struct.edge_def* @ei_safe_edge(i32 %100, %struct.VEC_edge_gc** %102), !dbg !3834
  store %struct.edge_def* %call102, %struct.edge_def** %tmp, align 8, !dbg !3836
  %tobool103 = icmp ne %struct.edge_def* %call102, null, !dbg !3837
  br i1 %tobool103, label %for.body, label %for.end, !dbg !3837

for.body:                                         ; preds = %for.cond
  %103 = load %struct.edge_def*, %struct.edge_def** %tmp, align 8, !dbg !3838
  %104 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3841
  %cmp104 = icmp eq %struct.edge_def* %103, %104, !dbg !3842
  br i1 %cmp104, label %if.then106, label %if.else121, !dbg !3843

if.then106:                                       ; preds = %for.body
  %105 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3844
  %add.ptr107 = getelementptr inbounds %struct.function, %struct.function* %105, i64 0, !dbg !3844
  %cfg108 = getelementptr inbounds %struct.function, %struct.function* %add.ptr107, i32 0, i32 1, !dbg !3844
  %106 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg108, align 8, !dbg !3844
  %x_entry_block_ptr109 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %106, i32 0, i32 0, !dbg !3844
  %107 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr109, align 8, !dbg !3844
  %succs110 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %107, i32 0, i32 1, !dbg !3844
  %108 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs110, align 8, !dbg !3844
  %tobool111 = icmp ne %struct.VEC_edge_gc* %108, null, !dbg !3844
  br i1 %tobool111, label %cond.true112, label %cond.false117, !dbg !3844

cond.true112:                                     ; preds = %if.then106
  %109 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3844
  %add.ptr113 = getelementptr inbounds %struct.function, %struct.function* %109, i64 0, !dbg !3844
  %cfg114 = getelementptr inbounds %struct.function, %struct.function* %add.ptr113, i32 0, i32 1, !dbg !3844
  %110 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg114, align 8, !dbg !3844
  %x_entry_block_ptr115 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %110, i32 0, i32 0, !dbg !3844
  %111 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr115, align 8, !dbg !3844
  %succs116 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %111, i32 0, i32 1, !dbg !3844
  %112 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs116, align 8, !dbg !3844
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %112, i32 0, i32 0, !dbg !3844
  br label %cond.end118, !dbg !3844

cond.false117:                                    ; preds = %if.then106
  br label %cond.end118, !dbg !3844

cond.end118:                                      ; preds = %cond.false117, %cond.true112
  %cond119 = phi %struct.VEC_edge_base* [ %base, %cond.true112 ], [ null, %cond.false117 ], !dbg !3844
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %ei, i32 0, i32 0, !dbg !3844
  %113 = load i32, i32* %index, align 8, !dbg !3844
  %call120 = call %struct.edge_def* @VEC_edge_base_unordered_remove(%struct.VEC_edge_base* %cond119, i32 %113), !dbg !3844
  store i8 1, i8* %found, align 1, !dbg !3846
  br label %for.end, !dbg !3847

if.else121:                                       ; preds = %for.body
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !3848
  br label %if.end122

if.end122:                                        ; preds = %if.else121
  br label %for.cond, !dbg !3849, !llvm.loop !3850

for.end:                                          ; preds = %cond.end118, %for.cond
  %114 = load i8, i8* %found, align 1, !dbg !3852
  %tobool123 = icmp ne i8 %114, 0, !dbg !3852
  br i1 %tobool123, label %cond.false125, label %cond.true124, !dbg !3852

cond.true124:                                     ; preds = %for.end
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 1185, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3852
  br label %cond.end126, !dbg !3852

cond.false125:                                    ; preds = %for.end
  br label %cond.end126, !dbg !3852

cond.end126:                                      ; preds = %cond.false125, %cond.true124
  %cond127 = phi i32 [ 0, %cond.true124 ], [ 0, %cond.false125 ], !dbg !3852
  %115 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3853
  %succs128 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %115, i32 0, i32 1, !dbg !3853
  %116 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3853
  %call129 = call %struct.edge_def** @VEC_edge_gc_safe_push(%struct.VEC_edge_gc** %succs128, %struct.edge_def* %116), !dbg !3853
  %117 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3854
  %add.ptr130 = getelementptr inbounds %struct.function, %struct.function* %117, i64 0, !dbg !3854
  %cfg131 = getelementptr inbounds %struct.function, %struct.function* %add.ptr130, i32 0, i32 1, !dbg !3854
  %118 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg131, align 8, !dbg !3854
  %x_entry_block_ptr132 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %118, i32 0, i32 0, !dbg !3854
  %119 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr132, align 8, !dbg !3854
  %120 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3855
  %call133 = call %struct.edge_def* @make_single_succ_edge(%struct.basic_block_def* %119, %struct.basic_block_def* %120, i32 1), !dbg !3856
  br label %if.end134, !dbg !3857

if.end134:                                        ; preds = %cond.end126, %cond.end79
  br label %if.end135

if.end135:                                        ; preds = %if.end134, %cond.end68
  %121 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3858
  %src136 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %121, i32 0, i32 0, !dbg !3858
  %122 = load %struct.basic_block_def*, %struct.basic_block_def** %src136, align 8, !dbg !3858
  %succs137 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %122, i32 0, i32 1, !dbg !3858
  %123 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs137, align 8, !dbg !3858
  %tobool138 = icmp ne %struct.VEC_edge_gc* %123, null, !dbg !3858
  br i1 %tobool138, label %cond.true139, label %cond.false143, !dbg !3858

cond.true139:                                     ; preds = %if.end135
  %124 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3858
  %src140 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %124, i32 0, i32 0, !dbg !3858
  %125 = load %struct.basic_block_def*, %struct.basic_block_def** %src140, align 8, !dbg !3858
  %succs141 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %125, i32 0, i32 1, !dbg !3858
  %126 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs141, align 8, !dbg !3858
  %base142 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %126, i32 0, i32 0, !dbg !3858
  br label %cond.end144, !dbg !3858

cond.false143:                                    ; preds = %if.end135
  br label %cond.end144, !dbg !3858

cond.end144:                                      ; preds = %cond.false143, %cond.true139
  %cond145 = phi %struct.VEC_edge_base* [ %base142, %cond.true139 ], [ null, %cond.false143 ], !dbg !3858
  %call146 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond145), !dbg !3858
  %cmp147 = icmp uge i32 %call146, 2, !dbg !3860
  br i1 %cmp147, label %if.then150, label %lor.lhs.false, !dbg !3861

lor.lhs.false:                                    ; preds = %cond.end144
  %127 = load i32, i32* %abnormal_edge_flags, align 4, !dbg !3862
  %tobool149 = icmp ne i32 %127, 0, !dbg !3862
  br i1 %tobool149, label %if.then150, label %if.else224, !dbg !3863

if.then150:                                       ; preds = %lor.lhs.false, %cond.end144
  %128 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3864
  %src151 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %128, i32 0, i32 0, !dbg !3864
  %129 = load %struct.basic_block_def*, %struct.basic_block_def** %src151, align 8, !dbg !3864
  %il152 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %129, i32 0, i32 7, !dbg !3864
  %rtl153 = bitcast %union.basic_block_il_dependent* %il152 to %struct.rtl_bb_info**, !dbg !3864
  %130 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl153, align 8, !dbg !3864
  %end_154 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %130, i32 0, i32 1, !dbg !3864
  %131 = load %struct.rtx_def*, %struct.rtx_def** %end_154, align 8, !dbg !3864
  %call155 = call zeroext i8 @tablejump_p(%struct.rtx_def* %131, %struct.rtx_def** null, %struct.rtx_def** %note), !dbg !3867
  %tobool156 = icmp ne i8 %call155, 0, !dbg !3867
  br i1 %tobool156, label %if.end162, label %if.then157, !dbg !3868

if.then157:                                       ; preds = %if.then150
  %132 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3869
  %src158 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %132, i32 0, i32 0, !dbg !3869
  %133 = load %struct.basic_block_def*, %struct.basic_block_def** %src158, align 8, !dbg !3869
  %il159 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %133, i32 0, i32 7, !dbg !3869
  %rtl160 = bitcast %union.basic_block_il_dependent* %il159 to %struct.rtl_bb_info**, !dbg !3869
  %134 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl160, align 8, !dbg !3869
  %end_161 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %134, i32 0, i32 1, !dbg !3869
  %135 = load %struct.rtx_def*, %struct.rtx_def** %end_161, align 8, !dbg !3869
  store %struct.rtx_def* %135, %struct.rtx_def** %note, align 8, !dbg !3870
  br label %if.end162, !dbg !3871

if.end162:                                        ; preds = %if.then157, %if.then150
  %136 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !3872
  %u163 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %136, i32 0, i32 1, !dbg !3872
  %fld164 = bitcast %union.u* %u163 to [1 x %union.rtunion_def]*, !dbg !3872
  %arrayidx165 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld164, i64 0, i64 2, !dbg !3872
  %rt_rtx166 = bitcast %union.rtunion_def* %arrayidx165 to %struct.rtx_def**, !dbg !3872
  %137 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx166, align 8, !dbg !3872
  store %struct.rtx_def* %137, %struct.rtx_def** %note, align 8, !dbg !3873
  %138 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !3874
  %139 = bitcast %struct.rtx_def* %138 to i8*, !dbg !3874
  %140 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3875
  %src167 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %140, i32 0, i32 0, !dbg !3876
  %141 = load %struct.basic_block_def*, %struct.basic_block_def** %src167, align 8, !dbg !3876
  %call168 = call %struct.basic_block_def* @create_basic_block(i8* %139, i8* null, %struct.basic_block_def* %141), !dbg !3877
  store %struct.basic_block_def* %call168, %struct.basic_block_def** %jump_block, align 8, !dbg !3878
  %142 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3879
  %count169 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %142, i32 0, i32 9, !dbg !3880
  %143 = load i64, i64* %count169, align 8, !dbg !3880
  %144 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_block, align 8, !dbg !3881
  %count170 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %144, i32 0, i32 8, !dbg !3882
  store i64 %143, i64* %count170, align 8, !dbg !3883
  %145 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3884
  %src171 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %145, i32 0, i32 0, !dbg !3884
  %146 = load %struct.basic_block_def*, %struct.basic_block_def** %src171, align 8, !dbg !3884
  %frequency = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %146, i32 0, i32 11, !dbg !3884
  %147 = load i32, i32* %frequency, align 8, !dbg !3884
  %148 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3884
  %probability172 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %148, i32 0, i32 8, !dbg !3884
  %149 = load i32, i32* %probability172, align 4, !dbg !3884
  %mul173 = mul nsw i32 %147, %149, !dbg !3884
  %add = add nsw i32 %mul173, 5000, !dbg !3884
  %div174 = sdiv i32 %add, 10000, !dbg !3884
  %150 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_block, align 8, !dbg !3885
  %frequency175 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %150, i32 0, i32 11, !dbg !3886
  store i32 %div174, i32* %frequency175, align 8, !dbg !3887
  %151 = load %struct.basic_block_def*, %struct.basic_block_def** %target.addr, align 8, !dbg !3888
  %loop_depth = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %151, i32 0, i32 10, !dbg !3889
  %152 = load i32, i32* %loop_depth, align 4, !dbg !3889
  %153 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_block, align 8, !dbg !3890
  %loop_depth176 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %153, i32 0, i32 10, !dbg !3891
  store i32 %152, i32* %loop_depth176, align 4, !dbg !3892
  br label %do.body, !dbg !3893

do.body:                                          ; preds = %if.end162
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb_, metadata !3894, metadata !DIExpression()), !dbg !3896
  %154 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_block, align 8, !dbg !3896
  store %struct.basic_block_def* %154, %struct.basic_block_def** %bb_, align 8, !dbg !3896
  %155 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_, align 8, !dbg !3896
  %flags177 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %155, i32 0, i32 13, !dbg !3896
  %156 = load i32, i32* %flags177, align 8, !dbg !3896
  %and178 = and i32 %156, -97, !dbg !3896
  %157 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3896
  %src179 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %157, i32 0, i32 0, !dbg !3896
  %158 = load %struct.basic_block_def*, %struct.basic_block_def** %src179, align 8, !dbg !3896
  %flags180 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %158, i32 0, i32 13, !dbg !3896
  %159 = load i32, i32* %flags180, align 8, !dbg !3896
  %and181 = and i32 %159, 96, !dbg !3896
  %or = or i32 %and178, %and181, !dbg !3896
  %160 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_, align 8, !dbg !3896
  %flags182 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %160, i32 0, i32 13, !dbg !3896
  store i32 %or, i32* %flags182, align 8, !dbg !3896
  br label %do.end, !dbg !3896

do.end:                                           ; preds = %do.body
  %161 = load i32, i32* @flag_reorder_blocks_and_partition, align 4, !dbg !3897
  %tobool183 = icmp ne i32 %161, 0, !dbg !3897
  br i1 %tobool183, label %land.lhs.true184, label %if.end216, !dbg !3899

land.lhs.true184:                                 ; preds = %do.end
  %162 = load i8, i8* getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 110), align 1, !dbg !3900
  %conv185 = zext i8 %162 to i32, !dbg !3901
  %tobool186 = icmp ne i32 %conv185, 0, !dbg !3901
  br i1 %tobool186, label %land.lhs.true187, label %if.end216, !dbg !3902

land.lhs.true187:                                 ; preds = %land.lhs.true184
  %163 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_block, align 8, !dbg !3903
  %il188 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %163, i32 0, i32 7, !dbg !3903
  %rtl189 = bitcast %union.basic_block_il_dependent* %il188 to %struct.rtl_bb_info**, !dbg !3903
  %164 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl189, align 8, !dbg !3903
  %end_190 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %164, i32 0, i32 1, !dbg !3903
  %165 = load %struct.rtx_def*, %struct.rtx_def** %end_190, align 8, !dbg !3903
  %166 = bitcast %struct.rtx_def* %165 to i32*, !dbg !3903
  %bf.load = load i32, i32* %166, align 8, !dbg !3903
  %bf.clear = and i32 %bf.load, 65535, !dbg !3903
  %cmp191 = icmp eq i32 %bf.clear, 9, !dbg !3903
  br i1 %cmp191, label %land.lhs.true193, label %if.end216, !dbg !3904

land.lhs.true193:                                 ; preds = %land.lhs.true187
  %167 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_block, align 8, !dbg !3905
  %il194 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %167, i32 0, i32 7, !dbg !3905
  %rtl195 = bitcast %union.basic_block_il_dependent* %il194 to %struct.rtl_bb_info**, !dbg !3905
  %168 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl195, align 8, !dbg !3905
  %end_196 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %168, i32 0, i32 1, !dbg !3905
  %169 = load %struct.rtx_def*, %struct.rtx_def** %end_196, align 8, !dbg !3905
  %call197 = call i32 @any_condjump_p(%struct.rtx_def* %169), !dbg !3906
  %tobool198 = icmp ne i32 %call197, 0, !dbg !3906
  br i1 %tobool198, label %if.end216, label %land.lhs.true199, !dbg !3907

land.lhs.true199:                                 ; preds = %land.lhs.true193
  %170 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_block, align 8, !dbg !3908
  %succs200 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %170, i32 0, i32 1, !dbg !3908
  %171 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs200, align 8, !dbg !3908
  %tobool201 = icmp ne %struct.VEC_edge_gc* %171, null, !dbg !3908
  br i1 %tobool201, label %cond.true202, label %cond.false205, !dbg !3908

cond.true202:                                     ; preds = %land.lhs.true199
  %172 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_block, align 8, !dbg !3908
  %succs203 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %172, i32 0, i32 1, !dbg !3908
  %173 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs203, align 8, !dbg !3908
  %base204 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %173, i32 0, i32 0, !dbg !3908
  br label %cond.end206, !dbg !3908

cond.false205:                                    ; preds = %land.lhs.true199
  br label %cond.end206, !dbg !3908

cond.end206:                                      ; preds = %cond.false205, %cond.true202
  %cond207 = phi %struct.VEC_edge_base* [ %base204, %cond.true202 ], [ null, %cond.false205 ], !dbg !3908
  %call208 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond207, i32 0), !dbg !3908
  %flags209 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call208, i32 0, i32 7, !dbg !3909
  %174 = load i32, i32* %flags209, align 8, !dbg !3909
  %and210 = and i32 %174, 8192, !dbg !3910
  %tobool211 = icmp ne i32 %and210, 0, !dbg !3910
  br i1 %tobool211, label %if.then212, label %if.end216, !dbg !3911

if.then212:                                       ; preds = %cond.end206
  %175 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_block, align 8, !dbg !3912
  %il213 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %175, i32 0, i32 7, !dbg !3912
  %rtl214 = bitcast %union.basic_block_il_dependent* %il213 to %struct.rtl_bb_info**, !dbg !3912
  %176 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl214, align 8, !dbg !3912
  %end_215 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %176, i32 0, i32 1, !dbg !3912
  %177 = load %struct.rtx_def*, %struct.rtx_def** %end_215, align 8, !dbg !3912
  call void @add_reg_note(%struct.rtx_def* %177, i32 29, %struct.rtx_def* null), !dbg !3913
  br label %if.end216, !dbg !3913

if.end216:                                        ; preds = %if.then212, %cond.end206, %land.lhs.true193, %land.lhs.true187, %land.lhs.true184, %do.end
  %178 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3914
  %src217 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %178, i32 0, i32 0, !dbg !3915
  %179 = load %struct.basic_block_def*, %struct.basic_block_def** %src217, align 8, !dbg !3915
  %180 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_block, align 8, !dbg !3916
  %call218 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %179, %struct.basic_block_def* %180, i32 1), !dbg !3917
  store %struct.edge_def* %call218, %struct.edge_def** %new_edge, align 8, !dbg !3918
  %181 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3919
  %probability219 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %181, i32 0, i32 8, !dbg !3920
  %182 = load i32, i32* %probability219, align 4, !dbg !3920
  %183 = load %struct.edge_def*, %struct.edge_def** %new_edge, align 8, !dbg !3921
  %probability220 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %183, i32 0, i32 8, !dbg !3922
  store i32 %182, i32* %probability220, align 4, !dbg !3923
  %184 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3924
  %count221 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %184, i32 0, i32 9, !dbg !3925
  %185 = load i64, i64* %count221, align 8, !dbg !3925
  %186 = load %struct.edge_def*, %struct.edge_def** %new_edge, align 8, !dbg !3926
  %count222 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %186, i32 0, i32 9, !dbg !3927
  store i64 %185, i64* %count222, align 8, !dbg !3928
  %187 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3929
  %188 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_block, align 8, !dbg !3930
  call void @redirect_edge_pred(%struct.edge_def* %187, %struct.basic_block_def* %188), !dbg !3931
  %189 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3932
  %probability223 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %189, i32 0, i32 8, !dbg !3933
  store i32 10000, i32* %probability223, align 4, !dbg !3934
  %190 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_block, align 8, !dbg !3935
  store %struct.basic_block_def* %190, %struct.basic_block_def** %new_bb, align 8, !dbg !3936
  br label %if.end226, !dbg !3937

if.else224:                                       ; preds = %lor.lhs.false
  %191 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3938
  %src225 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %191, i32 0, i32 0, !dbg !3939
  %192 = load %struct.basic_block_def*, %struct.basic_block_def** %src225, align 8, !dbg !3939
  store %struct.basic_block_def* %192, %struct.basic_block_def** %jump_block, align 8, !dbg !3940
  br label %if.end226

if.end226:                                        ; preds = %if.else224, %if.end216
  %193 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3941
  %goto_locus = getelementptr inbounds %struct.edge_def, %struct.edge_def* %193, i32 0, i32 5, !dbg !3943
  %194 = load i32, i32* %goto_locus, align 8, !dbg !3943
  %tobool227 = icmp ne i32 %194, 0, !dbg !3941
  br i1 %tobool227, label %land.lhs.true228, label %if.else233, !dbg !3944

land.lhs.true228:                                 ; preds = %if.end226
  %195 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3945
  %goto_block = getelementptr inbounds %struct.edge_def, %struct.edge_def* %195, i32 0, i32 4, !dbg !3946
  %196 = load %union.tree_node*, %union.tree_node** %goto_block, align 8, !dbg !3946
  %cmp229 = icmp eq %union.tree_node* %196, null, !dbg !3947
  br i1 %cmp229, label %if.then231, label %if.else233, !dbg !3948

if.then231:                                       ; preds = %land.lhs.true228
  %197 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3949
  %goto_locus232 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %197, i32 0, i32 5, !dbg !3950
  %198 = load i32, i32* %goto_locus232, align 8, !dbg !3950
  store i32 %198, i32* %loc, align 4, !dbg !3951
  br label %if.end234, !dbg !3952

if.else233:                                       ; preds = %land.lhs.true228, %if.end226
  store i32 0, i32* %loc, align 4, !dbg !3953
  br label %if.end234

if.end234:                                        ; preds = %if.else233, %if.then231
  %199 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3954
  %flags235 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %199, i32 0, i32 7, !dbg !3955
  %200 = load i32, i32* %flags235, align 8, !dbg !3956
  %and236 = and i32 %200, -2, !dbg !3956
  store i32 %and236, i32* %flags235, align 8, !dbg !3956
  %201 = load %struct.basic_block_def*, %struct.basic_block_def** %target.addr, align 8, !dbg !3957
  %202 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3959
  %add.ptr237 = getelementptr inbounds %struct.function, %struct.function* %202, i64 0, !dbg !3959
  %cfg238 = getelementptr inbounds %struct.function, %struct.function* %add.ptr237, i32 0, i32 1, !dbg !3959
  %203 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg238, align 8, !dbg !3959
  %x_exit_block_ptr239 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %203, i32 0, i32 1, !dbg !3959
  %204 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr239, align 8, !dbg !3959
  %cmp240 = icmp eq %struct.basic_block_def* %201, %204, !dbg !3960
  br i1 %cmp240, label %if.then242, label %if.else248, !dbg !3961

if.then242:                                       ; preds = %if.end234
  %call243 = call %struct.rtx_def* @gen_return(), !dbg !3962
  %205 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_block, align 8, !dbg !3964
  %il244 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %205, i32 0, i32 7, !dbg !3964
  %rtl245 = bitcast %union.basic_block_il_dependent* %il244 to %struct.rtl_bb_info**, !dbg !3964
  %206 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl245, align 8, !dbg !3964
  %end_246 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %206, i32 0, i32 1, !dbg !3964
  %207 = load %struct.rtx_def*, %struct.rtx_def** %end_246, align 8, !dbg !3964
  %208 = load i32, i32* %loc, align 4, !dbg !3965
  %call247 = call %struct.rtx_def* @emit_jump_insn_after_setloc(%struct.rtx_def* %call243, %struct.rtx_def* %207, i32 %208), !dbg !3966
  br label %if.end265, !dbg !3967

if.else248:                                       ; preds = %if.end234
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %label, metadata !3968, metadata !DIExpression()), !dbg !3970
  %209 = load %struct.basic_block_def*, %struct.basic_block_def** %target.addr, align 8, !dbg !3971
  %call249 = call %struct.rtx_def* @block_label(%struct.basic_block_def* %209), !dbg !3972
  store %struct.rtx_def* %call249, %struct.rtx_def** %label, align 8, !dbg !3970
  %210 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !3973
  %call250 = call %struct.rtx_def* @gen_jump(%struct.rtx_def* %210), !dbg !3974
  %211 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_block, align 8, !dbg !3975
  %il251 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %211, i32 0, i32 7, !dbg !3975
  %rtl252 = bitcast %union.basic_block_il_dependent* %il251 to %struct.rtl_bb_info**, !dbg !3975
  %212 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl252, align 8, !dbg !3975
  %end_253 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %212, i32 0, i32 1, !dbg !3975
  %213 = load %struct.rtx_def*, %struct.rtx_def** %end_253, align 8, !dbg !3975
  %214 = load i32, i32* %loc, align 4, !dbg !3976
  %call254 = call %struct.rtx_def* @emit_jump_insn_after_setloc(%struct.rtx_def* %call250, %struct.rtx_def* %213, i32 %214), !dbg !3977
  %215 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !3978
  %216 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_block, align 8, !dbg !3979
  %il255 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %216, i32 0, i32 7, !dbg !3979
  %rtl256 = bitcast %union.basic_block_il_dependent* %il255 to %struct.rtl_bb_info**, !dbg !3979
  %217 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl256, align 8, !dbg !3979
  %end_257 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %217, i32 0, i32 1, !dbg !3979
  %218 = load %struct.rtx_def*, %struct.rtx_def** %end_257, align 8, !dbg !3979
  %u258 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %218, i32 0, i32 1, !dbg !3979
  %fld259 = bitcast %union.u* %u258 to [1 x %union.rtunion_def]*, !dbg !3979
  %arrayidx260 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld259, i64 0, i64 8, !dbg !3979
  %rt_rtx261 = bitcast %union.rtunion_def* %arrayidx260 to %struct.rtx_def**, !dbg !3979
  store %struct.rtx_def* %215, %struct.rtx_def** %rt_rtx261, align 8, !dbg !3980
  %219 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !3981
  %u262 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %219, i32 0, i32 1, !dbg !3981
  %fld263 = bitcast %union.u* %u262 to [1 x %union.rtunion_def]*, !dbg !3981
  %arrayidx264 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld263, i64 0, i64 4, !dbg !3981
  %rt_int = bitcast %union.rtunion_def* %arrayidx264 to i32*, !dbg !3981
  %220 = load i32, i32* %rt_int, align 8, !dbg !3982
  %inc = add nsw i32 %220, 1, !dbg !3982
  store i32 %inc, i32* %rt_int, align 8, !dbg !3982
  br label %if.end265

if.end265:                                        ; preds = %if.else248, %if.then242
  %221 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_block, align 8, !dbg !3983
  %il266 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %221, i32 0, i32 7, !dbg !3983
  %rtl267 = bitcast %union.basic_block_il_dependent* %il266 to %struct.rtl_bb_info**, !dbg !3983
  %222 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl267, align 8, !dbg !3983
  %end_268 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %222, i32 0, i32 1, !dbg !3983
  %223 = load %struct.rtx_def*, %struct.rtx_def** %end_268, align 8, !dbg !3983
  %call269 = call %struct.rtx_def* @emit_barrier_after(%struct.rtx_def* %223), !dbg !3984
  %224 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3985
  %225 = load %struct.basic_block_def*, %struct.basic_block_def** %target.addr, align 8, !dbg !3986
  %call270 = call %struct.edge_def* @redirect_edge_succ_nodup(%struct.edge_def* %224, %struct.basic_block_def* %225), !dbg !3987
  %226 = load i32, i32* %abnormal_edge_flags, align 4, !dbg !3988
  %tobool271 = icmp ne i32 %226, 0, !dbg !3988
  br i1 %tobool271, label %if.then272, label %if.end274, !dbg !3990

if.then272:                                       ; preds = %if.end265
  %227 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3991
  %228 = load %struct.basic_block_def*, %struct.basic_block_def** %target.addr, align 8, !dbg !3992
  %229 = load i32, i32* %abnormal_edge_flags, align 4, !dbg !3993
  %call273 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %227, %struct.basic_block_def* %228, i32 %229), !dbg !3994
  br label %if.end274, !dbg !3994

if.end274:                                        ; preds = %if.then272, %if.end265
  call void @df_mark_solutions_dirty(), !dbg !3995
  %230 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !3996
  ret %struct.basic_block_def* %230, !dbg !3997
}

declare dso_local void @start_sequence() #2

declare dso_local void @push_to_sequence(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @emit_insn(%struct.rtx_def*) #2

declare dso_local void @end_sequence() #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @commit_one_edge_insertion(%struct.edge_def* %e) #0 !dbg !3998 {
entry:
  %e.addr = alloca %struct.edge_def*, align 8
  %before = alloca %struct.rtx_def*, align 8
  %after = alloca %struct.rtx_def*, align 8
  %insns = alloca %struct.rtx_def*, align 8
  %tmp = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !3999, metadata !DIExpression()), !dbg !4000
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %before, metadata !4001, metadata !DIExpression()), !dbg !4002
  store %struct.rtx_def* null, %struct.rtx_def** %before, align 8, !dbg !4002
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %after, metadata !4003, metadata !DIExpression()), !dbg !4004
  store %struct.rtx_def* null, %struct.rtx_def** %after, align 8, !dbg !4004
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insns, metadata !4005, metadata !DIExpression()), !dbg !4006
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tmp, metadata !4007, metadata !DIExpression()), !dbg !4008
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !4009, metadata !DIExpression()), !dbg !4010
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4011, metadata !DIExpression()), !dbg !4012
  store %struct.basic_block_def* null, %struct.basic_block_def** %bb, align 8, !dbg !4012
  %0 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4013
  %insns1 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %0, i32 0, i32 2, !dbg !4014
  %r = bitcast %union.edge_def_insns* %insns1 to %struct.rtx_def**, !dbg !4015
  %1 = load %struct.rtx_def*, %struct.rtx_def** %r, align 8, !dbg !4015
  store %struct.rtx_def* %1, %struct.rtx_def** %insns, align 8, !dbg !4016
  %2 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4017
  %insns2 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %2, i32 0, i32 2, !dbg !4018
  %r3 = bitcast %union.edge_def_insns* %insns2 to %struct.rtx_def**, !dbg !4019
  store %struct.rtx_def* null, %struct.rtx_def** %r3, align 8, !dbg !4020
  %3 = load %struct.rtx_def*, %struct.rtx_def** %before, align 8, !dbg !4021
  %tobool = icmp ne %struct.rtx_def* %3, null, !dbg !4021
  br i1 %tobool, label %if.end122, label %land.lhs.true, !dbg !4023

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %after, align 8, !dbg !4024
  %tobool4 = icmp ne %struct.rtx_def* %4, null, !dbg !4024
  br i1 %tobool4, label %if.end122, label %if.then, !dbg !4025

if.then:                                          ; preds = %land.lhs.true
  %5 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4026
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %5, i32 0, i32 1, !dbg !4029
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !4029
  %call = call zeroext i8 @single_pred_p(%struct.basic_block_def* %6), !dbg !4030
  %conv = zext i8 %call to i32, !dbg !4030
  %tobool5 = icmp ne i32 %conv, 0, !dbg !4030
  br i1 %tobool5, label %land.lhs.true6, label %if.else46, !dbg !4031

land.lhs.true6:                                   ; preds = %if.then
  %7 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4032
  %dest7 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %7, i32 0, i32 1, !dbg !4033
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %dest7, align 8, !dbg !4033
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4034
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !4034
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4034
  %10 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4034
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %10, i32 0, i32 1, !dbg !4034
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !4034
  %cmp = icmp ne %struct.basic_block_def* %8, %11, !dbg !4035
  br i1 %cmp, label %if.then9, label %if.else46, !dbg !4036

if.then9:                                         ; preds = %land.lhs.true6
  %12 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4037
  %dest10 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %12, i32 0, i32 1, !dbg !4039
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %dest10, align 8, !dbg !4039
  store %struct.basic_block_def* %13, %struct.basic_block_def** %bb, align 8, !dbg !4040
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4041
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %14, i32 0, i32 7, !dbg !4041
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !4041
  %15 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !4041
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %15, i32 0, i32 0, !dbg !4041
  %16 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !4041
  store %struct.rtx_def* %16, %struct.rtx_def** %tmp, align 8, !dbg !4042
  %17 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !4043
  %18 = bitcast %struct.rtx_def* %17 to i32*, !dbg !4043
  %bf.load = load i32, i32* %18, align 8, !dbg !4043
  %bf.clear = and i32 %bf.load, 65535, !dbg !4043
  %cmp11 = icmp eq i32 %bf.clear, 12, !dbg !4043
  br i1 %cmp11, label %if.then13, label %if.end, !dbg !4045

if.then13:                                        ; preds = %if.then9
  %19 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !4046
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !4046
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4046
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !4046
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4046
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4046
  store %struct.rtx_def* %20, %struct.rtx_def** %tmp, align 8, !dbg !4047
  br label %if.end, !dbg !4048

if.end:                                           ; preds = %if.then13, %if.then9
  %21 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !4049
  %22 = bitcast %struct.rtx_def* %21 to i32*, !dbg !4049
  %bf.load14 = load i32, i32* %22, align 8, !dbg !4049
  %bf.clear15 = and i32 %bf.load14, 65535, !dbg !4049
  %cmp16 = icmp eq i32 %bf.clear15, 13, !dbg !4049
  br i1 %cmp16, label %land.lhs.true18, label %if.end29, !dbg !4049

land.lhs.true18:                                  ; preds = %if.end
  %23 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !4049
  %u19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1, !dbg !4049
  %fld20 = bitcast %union.u* %u19 to [1 x %union.rtunion_def]*, !dbg !4049
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i64 0, i64 5, !dbg !4049
  %rt_int = bitcast %union.rtunion_def* %arrayidx21 to i32*, !dbg !4049
  %24 = load i32, i32* %rt_int, align 8, !dbg !4049
  %cmp22 = icmp eq i32 %24, 10, !dbg !4049
  br i1 %cmp22, label %if.then24, label %if.end29, !dbg !4051

if.then24:                                        ; preds = %land.lhs.true18
  %25 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !4052
  %u25 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1, !dbg !4052
  %fld26 = bitcast %union.u* %u25 to [1 x %union.rtunion_def]*, !dbg !4052
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i64 0, i64 2, !dbg !4052
  %rt_rtx28 = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtx_def**, !dbg !4052
  %26 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx28, align 8, !dbg !4052
  store %struct.rtx_def* %26, %struct.rtx_def** %tmp, align 8, !dbg !4053
  br label %if.end29, !dbg !4054

if.end29:                                         ; preds = %if.then24, %land.lhs.true18, %if.end
  %27 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !4055
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4057
  %il30 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %28, i32 0, i32 7, !dbg !4057
  %rtl31 = bitcast %union.basic_block_il_dependent* %il30 to %struct.rtl_bb_info**, !dbg !4057
  %29 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl31, align 8, !dbg !4057
  %head_32 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %29, i32 0, i32 0, !dbg !4057
  %30 = load %struct.rtx_def*, %struct.rtx_def** %head_32, align 8, !dbg !4057
  %cmp33 = icmp eq %struct.rtx_def* %27, %30, !dbg !4058
  br i1 %cmp33, label %if.then35, label %if.else, !dbg !4059

if.then35:                                        ; preds = %if.end29
  %31 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !4060
  store %struct.rtx_def* %31, %struct.rtx_def** %before, align 8, !dbg !4061
  br label %if.end45, !dbg !4062

if.else:                                          ; preds = %if.end29
  %32 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !4063
  %tobool36 = icmp ne %struct.rtx_def* %32, null, !dbg !4063
  br i1 %tobool36, label %if.then37, label %if.else42, !dbg !4065

if.then37:                                        ; preds = %if.else
  %33 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !4066
  %u38 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1, !dbg !4066
  %fld39 = bitcast %union.u* %u38 to [1 x %union.rtunion_def]*, !dbg !4066
  %arrayidx40 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld39, i64 0, i64 1, !dbg !4066
  %rt_rtx41 = bitcast %union.rtunion_def* %arrayidx40 to %struct.rtx_def**, !dbg !4066
  %34 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx41, align 8, !dbg !4066
  store %struct.rtx_def* %34, %struct.rtx_def** %after, align 8, !dbg !4067
  br label %if.end44, !dbg !4068

if.else42:                                        ; preds = %if.else
  %call43 = call %struct.rtx_def* @get_last_insn(), !dbg !4069
  store %struct.rtx_def* %call43, %struct.rtx_def** %after, align 8, !dbg !4070
  br label %if.end44

if.end44:                                         ; preds = %if.else42, %if.then37
  br label %if.end45

if.end45:                                         ; preds = %if.end44, %if.then35
  br label %if.end121, !dbg !4071

if.else46:                                        ; preds = %land.lhs.true6, %if.then
  %35 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4072
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %35, i32 0, i32 7, !dbg !4074
  %36 = load i32, i32* %flags, align 8, !dbg !4074
  %and = and i32 %36, 2, !dbg !4075
  %cmp47 = icmp eq i32 %and, 0, !dbg !4076
  br i1 %cmp47, label %land.lhs.true49, label %if.else79, !dbg !4077

land.lhs.true49:                                  ; preds = %if.else46
  %37 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4078
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %37, i32 0, i32 0, !dbg !4079
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !4079
  %call50 = call zeroext i8 @single_succ_p(%struct.basic_block_def* %38), !dbg !4080
  %conv51 = zext i8 %call50 to i32, !dbg !4080
  %tobool52 = icmp ne i32 %conv51, 0, !dbg !4080
  br i1 %tobool52, label %land.lhs.true53, label %if.else79, !dbg !4081

land.lhs.true53:                                  ; preds = %land.lhs.true49
  %39 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4082
  %src54 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %39, i32 0, i32 0, !dbg !4083
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %src54, align 8, !dbg !4083
  %41 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4084
  %add.ptr55 = getelementptr inbounds %struct.function, %struct.function* %41, i64 0, !dbg !4084
  %cfg56 = getelementptr inbounds %struct.function, %struct.function* %add.ptr55, i32 0, i32 1, !dbg !4084
  %42 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg56, align 8, !dbg !4084
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %42, i32 0, i32 0, !dbg !4084
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4084
  %cmp57 = icmp ne %struct.basic_block_def* %40, %43, !dbg !4085
  br i1 %cmp57, label %if.then59, label %if.else79, !dbg !4086

if.then59:                                        ; preds = %land.lhs.true53
  %44 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4087
  %src60 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %44, i32 0, i32 0, !dbg !4089
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %src60, align 8, !dbg !4089
  store %struct.basic_block_def* %45, %struct.basic_block_def** %bb, align 8, !dbg !4090
  %46 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4091
  %il61 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %46, i32 0, i32 7, !dbg !4091
  %rtl62 = bitcast %union.basic_block_il_dependent* %il61 to %struct.rtl_bb_info**, !dbg !4091
  %47 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl62, align 8, !dbg !4091
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %47, i32 0, i32 1, !dbg !4091
  %48 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !4091
  %49 = bitcast %struct.rtx_def* %48 to i32*, !dbg !4091
  %bf.load63 = load i32, i32* %49, align 8, !dbg !4091
  %bf.clear64 = and i32 %bf.load63, 65535, !dbg !4091
  %cmp65 = icmp eq i32 %bf.clear64, 9, !dbg !4091
  br i1 %cmp65, label %if.then67, label %if.else71, !dbg !4093

if.then67:                                        ; preds = %if.then59
  %50 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4094
  %il68 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %50, i32 0, i32 7, !dbg !4094
  %rtl69 = bitcast %union.basic_block_il_dependent* %il68 to %struct.rtl_bb_info**, !dbg !4094
  %51 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl69, align 8, !dbg !4094
  %end_70 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %51, i32 0, i32 1, !dbg !4094
  %52 = load %struct.rtx_def*, %struct.rtx_def** %end_70, align 8, !dbg !4094
  store %struct.rtx_def* %52, %struct.rtx_def** %before, align 8, !dbg !4095
  br label %if.end78, !dbg !4096

if.else71:                                        ; preds = %if.then59
  %53 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4097
  %flags72 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %53, i32 0, i32 7, !dbg !4097
  %54 = load i32, i32* %flags72, align 8, !dbg !4097
  %and73 = and i32 %54, 1, !dbg !4097
  %tobool74 = icmp ne i32 %and73, 0, !dbg !4097
  br i1 %tobool74, label %cond.false, label %cond.true, !dbg !4097

cond.true:                                        ; preds = %if.else71
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 1492, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4097
  br label %cond.end, !dbg !4097

cond.false:                                       ; preds = %if.else71
  br label %cond.end, !dbg !4097

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4097
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4099
  %il75 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %55, i32 0, i32 7, !dbg !4099
  %rtl76 = bitcast %union.basic_block_il_dependent* %il75 to %struct.rtl_bb_info**, !dbg !4099
  %56 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl76, align 8, !dbg !4099
  %end_77 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %56, i32 0, i32 1, !dbg !4099
  %57 = load %struct.rtx_def*, %struct.rtx_def** %end_77, align 8, !dbg !4099
  store %struct.rtx_def* %57, %struct.rtx_def** %after, align 8, !dbg !4100
  br label %if.end78

if.end78:                                         ; preds = %cond.end, %if.then67
  br label %if.end120, !dbg !4101

if.else79:                                        ; preds = %land.lhs.true53, %land.lhs.true49, %if.else46
  %58 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4102
  %call80 = call %struct.basic_block_def* @split_edge(%struct.edge_def* %58), !dbg !4104
  store %struct.basic_block_def* %call80, %struct.basic_block_def** %bb, align 8, !dbg !4105
  %59 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4106
  %il81 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %59, i32 0, i32 7, !dbg !4106
  %rtl82 = bitcast %union.basic_block_il_dependent* %il81 to %struct.rtl_bb_info**, !dbg !4106
  %60 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl82, align 8, !dbg !4106
  %end_83 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %60, i32 0, i32 1, !dbg !4106
  %61 = load %struct.rtx_def*, %struct.rtx_def** %end_83, align 8, !dbg !4106
  store %struct.rtx_def* %61, %struct.rtx_def** %after, align 8, !dbg !4107
  %62 = load i32, i32* @flag_reorder_blocks_and_partition, align 4, !dbg !4108
  %tobool84 = icmp ne i32 %62, 0, !dbg !4108
  br i1 %tobool84, label %land.lhs.true85, label %if.end119, !dbg !4110

land.lhs.true85:                                  ; preds = %if.else79
  %63 = load i8, i8* getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 110), align 1, !dbg !4111
  %conv86 = zext i8 %63 to i32, !dbg !4112
  %tobool87 = icmp ne i32 %conv86, 0, !dbg !4112
  br i1 %tobool87, label %land.lhs.true88, label %if.end119, !dbg !4113

land.lhs.true88:                                  ; preds = %land.lhs.true85
  %64 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4114
  %src89 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %64, i32 0, i32 0, !dbg !4115
  %65 = load %struct.basic_block_def*, %struct.basic_block_def** %src89, align 8, !dbg !4115
  %66 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4116
  %add.ptr90 = getelementptr inbounds %struct.function, %struct.function* %66, i64 0, !dbg !4116
  %cfg91 = getelementptr inbounds %struct.function, %struct.function* %add.ptr90, i32 0, i32 1, !dbg !4116
  %67 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg91, align 8, !dbg !4116
  %x_entry_block_ptr92 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %67, i32 0, i32 0, !dbg !4116
  %68 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr92, align 8, !dbg !4116
  %cmp93 = icmp ne %struct.basic_block_def* %65, %68, !dbg !4117
  br i1 %cmp93, label %land.lhs.true95, label %if.end119, !dbg !4118

land.lhs.true95:                                  ; preds = %land.lhs.true88
  %69 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4119
  %src96 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %69, i32 0, i32 0, !dbg !4119
  %70 = load %struct.basic_block_def*, %struct.basic_block_def** %src96, align 8, !dbg !4119
  %flags97 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %70, i32 0, i32 13, !dbg !4119
  %71 = load i32, i32* %flags97, align 8, !dbg !4119
  %and98 = and i32 %71, 96, !dbg !4119
  %cmp99 = icmp eq i32 %and98, 64, !dbg !4120
  br i1 %cmp99, label %land.lhs.true101, label %if.end119, !dbg !4121

land.lhs.true101:                                 ; preds = %land.lhs.true95
  %72 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4122
  %flags102 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %72, i32 0, i32 7, !dbg !4123
  %73 = load i32, i32* %flags102, align 8, !dbg !4123
  %and103 = and i32 %73, 8192, !dbg !4124
  %tobool104 = icmp ne i32 %and103, 0, !dbg !4124
  br i1 %tobool104, label %if.end119, label %land.lhs.true105, !dbg !4125

land.lhs.true105:                                 ; preds = %land.lhs.true101
  %74 = load %struct.rtx_def*, %struct.rtx_def** %after, align 8, !dbg !4126
  %75 = bitcast %struct.rtx_def* %74 to i32*, !dbg !4126
  %bf.load106 = load i32, i32* %75, align 8, !dbg !4126
  %bf.clear107 = and i32 %bf.load106, 65535, !dbg !4126
  %cmp108 = icmp eq i32 %bf.clear107, 9, !dbg !4126
  br i1 %cmp108, label %land.lhs.true110, label %if.end119, !dbg !4127

land.lhs.true110:                                 ; preds = %land.lhs.true105
  %76 = load %struct.rtx_def*, %struct.rtx_def** %after, align 8, !dbg !4128
  %call111 = call i32 @any_condjump_p(%struct.rtx_def* %76), !dbg !4129
  %tobool112 = icmp ne i32 %call111, 0, !dbg !4129
  br i1 %tobool112, label %if.end119, label %land.lhs.true113, !dbg !4130

land.lhs.true113:                                 ; preds = %land.lhs.true110
  %77 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4131
  %call114 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %77), !dbg !4132
  %flags115 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call114, i32 0, i32 7, !dbg !4133
  %78 = load i32, i32* %flags115, align 8, !dbg !4133
  %and116 = and i32 %78, 8192, !dbg !4134
  %tobool117 = icmp ne i32 %and116, 0, !dbg !4134
  br i1 %tobool117, label %if.then118, label %if.end119, !dbg !4135

if.then118:                                       ; preds = %land.lhs.true113
  %79 = load %struct.rtx_def*, %struct.rtx_def** %after, align 8, !dbg !4136
  call void @add_reg_note(%struct.rtx_def* %79, i32 29, %struct.rtx_def* null), !dbg !4137
  br label %if.end119, !dbg !4137

if.end119:                                        ; preds = %if.then118, %land.lhs.true113, %land.lhs.true110, %land.lhs.true105, %land.lhs.true101, %land.lhs.true95, %land.lhs.true88, %land.lhs.true85, %if.else79
  br label %if.end120

if.end120:                                        ; preds = %if.end119, %if.end78
  br label %if.end121

if.end121:                                        ; preds = %if.end120, %if.end45
  br label %if.end122, !dbg !4138

if.end122:                                        ; preds = %if.end121, %land.lhs.true, %entry
  %80 = load %struct.rtx_def*, %struct.rtx_def** %before, align 8, !dbg !4139
  %tobool123 = icmp ne %struct.rtx_def* %80, null, !dbg !4139
  br i1 %tobool123, label %if.then124, label %if.else127, !dbg !4141

if.then124:                                       ; preds = %if.end122
  %81 = load %struct.rtx_def*, %struct.rtx_def** %insns, align 8, !dbg !4142
  %82 = load %struct.rtx_def*, %struct.rtx_def** %before, align 8, !dbg !4144
  %83 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4145
  %call125 = call %struct.rtx_def* @emit_insn_before_noloc(%struct.rtx_def* %81, %struct.rtx_def* %82, %struct.basic_block_def* %83), !dbg !4146
  %84 = load %struct.rtx_def*, %struct.rtx_def** %before, align 8, !dbg !4147
  %call126 = call %struct.rtx_def* @prev_nonnote_insn(%struct.rtx_def* %84), !dbg !4148
  store %struct.rtx_def* %call126, %struct.rtx_def** %last, align 8, !dbg !4149
  br label %if.end129, !dbg !4150

if.else127:                                       ; preds = %if.end122
  %85 = load %struct.rtx_def*, %struct.rtx_def** %insns, align 8, !dbg !4151
  %86 = load %struct.rtx_def*, %struct.rtx_def** %after, align 8, !dbg !4152
  %87 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4153
  %call128 = call %struct.rtx_def* @emit_insn_after_noloc(%struct.rtx_def* %85, %struct.rtx_def* %86, %struct.basic_block_def* %87), !dbg !4154
  store %struct.rtx_def* %call128, %struct.rtx_def** %last, align 8, !dbg !4155
  br label %if.end129

if.end129:                                        ; preds = %if.else127, %if.then124
  %88 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !4156
  %call130 = call i32 @returnjump_p(%struct.rtx_def* %88), !dbg !4158
  %tobool131 = icmp ne i32 %call130, 0, !dbg !4158
  br i1 %tobool131, label %if.then132, label %if.else159, !dbg !4159

if.then132:                                       ; preds = %if.end129
  %89 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4160
  %call133 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %89), !dbg !4162
  store %struct.edge_def* %call133, %struct.edge_def** %e.addr, align 8, !dbg !4163
  %90 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4164
  %dest134 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %90, i32 0, i32 1, !dbg !4164
  %91 = load %struct.basic_block_def*, %struct.basic_block_def** %dest134, align 8, !dbg !4164
  %92 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4164
  %add.ptr135 = getelementptr inbounds %struct.function, %struct.function* %92, i64 0, !dbg !4164
  %cfg136 = getelementptr inbounds %struct.function, %struct.function* %add.ptr135, i32 0, i32 1, !dbg !4164
  %93 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg136, align 8, !dbg !4164
  %x_exit_block_ptr137 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %93, i32 0, i32 1, !dbg !4164
  %94 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr137, align 8, !dbg !4164
  %cmp138 = icmp eq %struct.basic_block_def* %91, %94, !dbg !4164
  br i1 %cmp138, label %land.lhs.true140, label %cond.true148, !dbg !4164

land.lhs.true140:                                 ; preds = %if.then132
  %95 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4164
  %call141 = call zeroext i8 @single_succ_p(%struct.basic_block_def* %95), !dbg !4164
  %conv142 = zext i8 %call141 to i32, !dbg !4164
  %tobool143 = icmp ne i32 %conv142, 0, !dbg !4164
  br i1 %tobool143, label %land.lhs.true144, label %cond.true148, !dbg !4164

land.lhs.true144:                                 ; preds = %land.lhs.true140
  %96 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4164
  %flags145 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %96, i32 0, i32 7, !dbg !4164
  %97 = load i32, i32* %flags145, align 8, !dbg !4164
  %and146 = and i32 %97, 1, !dbg !4164
  %tobool147 = icmp ne i32 %and146, 0, !dbg !4164
  br i1 %tobool147, label %cond.false149, label %cond.true148, !dbg !4164

cond.true148:                                     ; preds = %land.lhs.true144, %land.lhs.true140, %if.then132
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 1534, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4164
  br label %cond.end150, !dbg !4164

cond.false149:                                    ; preds = %land.lhs.true144
  br label %cond.end150, !dbg !4164

cond.end150:                                      ; preds = %cond.false149, %cond.true148
  %cond151 = phi i32 [ 0, %cond.true148 ], [ 0, %cond.false149 ], !dbg !4164
  %98 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4165
  %flags152 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %98, i32 0, i32 7, !dbg !4166
  %99 = load i32, i32* %flags152, align 8, !dbg !4167
  %and153 = and i32 %99, -2, !dbg !4167
  store i32 %and153, i32* %flags152, align 8, !dbg !4167
  %100 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !4168
  %call154 = call %struct.rtx_def* @emit_barrier_after(%struct.rtx_def* %100), !dbg !4169
  %101 = load %struct.rtx_def*, %struct.rtx_def** %before, align 8, !dbg !4170
  %tobool155 = icmp ne %struct.rtx_def* %101, null, !dbg !4170
  br i1 %tobool155, label %if.then156, label %if.end158, !dbg !4172

if.then156:                                       ; preds = %cond.end150
  %102 = load %struct.rtx_def*, %struct.rtx_def** %before, align 8, !dbg !4173
  %call157 = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %102), !dbg !4174
  br label %if.end158, !dbg !4174

if.end158:                                        ; preds = %if.then156, %cond.end150
  br label %if.end168, !dbg !4175

if.else159:                                       ; preds = %if.end129
  %103 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !4176
  %104 = bitcast %struct.rtx_def* %103 to i32*, !dbg !4176
  %bf.load160 = load i32, i32* %104, align 8, !dbg !4176
  %bf.clear161 = and i32 %bf.load160, 65535, !dbg !4176
  %cmp162 = icmp eq i32 %bf.clear161, 9, !dbg !4176
  br i1 %cmp162, label %cond.true164, label %cond.false165, !dbg !4176

cond.true164:                                     ; preds = %if.else159
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 1543, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4176
  br label %cond.end166, !dbg !4176

cond.false165:                                    ; preds = %if.else159
  br label %cond.end166, !dbg !4176

cond.end166:                                      ; preds = %cond.false165, %cond.true164
  %cond167 = phi i32 [ 0, %cond.true164 ], [ 0, %cond.false165 ], !dbg !4176
  br label %if.end168

if.end168:                                        ; preds = %cond.end166, %if.end158
  %call169 = call i32 @current_ir_type(), !dbg !4177
  %cmp170 = icmp ne i32 %call169, 2, !dbg !4179
  br i1 %cmp170, label %if.then172, label %if.end174, !dbg !4180

if.then172:                                       ; preds = %if.end168
  %105 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4181
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %105, i32 0, i32 2, !dbg !4182
  %106 = bitcast i8** %aux to i8*, !dbg !4183
  %107 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4184
  %aux173 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %107, i32 0, i32 2, !dbg !4185
  store i8* %106, i8** %aux173, align 8, !dbg !4186
  br label %if.end174, !dbg !4184

if.end174:                                        ; preds = %if.then172, %if.end168
  ret void, !dbg !4187
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_pred_p(%struct.basic_block_def* %bb) #0 !dbg !4188 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4189, metadata !DIExpression()), !dbg !4190
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4191
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 0, !dbg !4191
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !4191
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !4191
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4191

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4191
  %preds1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 0, !dbg !4191
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds1, align 8, !dbg !4191
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !4191
  br label %cond.end, !dbg !4191

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4191

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4191
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !4191
  %cmp = icmp eq i32 %call, 1, !dbg !4192
  %conv = zext i1 %cmp to i32, !dbg !4192
  %conv2 = trunc i32 %conv to i8, !dbg !4191
  ret i8 %conv2, !dbg !4193
}

declare dso_local %struct.basic_block_def* @split_edge(%struct.edge_def*) #2

declare dso_local i32 @any_condjump_p(%struct.rtx_def*) #2

declare dso_local void @add_reg_note(%struct.rtx_def*, i32, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @emit_insn_before_noloc(%struct.rtx_def*, %struct.rtx_def*, %struct.basic_block_def*) #2

declare dso_local %struct.rtx_def* @prev_nonnote_insn(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @emit_insn_after_noloc(%struct.rtx_def*, %struct.rtx_def*, %struct.basic_block_def*) #2

declare dso_local i32 @returnjump_p(%struct.rtx_def*) #2

declare dso_local i32 @current_ir_type() #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_cond(i32 %ei.coerce0, %struct.VEC_edge_gc** %ei.coerce1, %struct.edge_def** %p) #0 !dbg !4194 {
entry:
  %retval = alloca i8, align 1
  %ei = alloca %struct.edge_iterator, align 8
  %p.addr = alloca %struct.edge_def**, align 8
  %0 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %ei.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %ei.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !4197, metadata !DIExpression()), !dbg !4198
  store %struct.edge_def** %p, %struct.edge_def*** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %p.addr, metadata !4199, metadata !DIExpression()), !dbg !4200
  %3 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !4201
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !4201
  %5 = load i32, i32* %4, align 8, !dbg !4201
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !4201
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !4201
  %call = call zeroext i8 @ei_end_p(i32 %5, %struct.VEC_edge_gc** %7), !dbg !4201
  %tobool = icmp ne i8 %call, 0, !dbg !4201
  br i1 %tobool, label %if.else, label %if.then, !dbg !4203

if.then:                                          ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !4204
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !4204
  %10 = load i32, i32* %9, align 8, !dbg !4204
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !4204
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !4204
  %call1 = call %struct.edge_def* @ei_edge(i32 %10, %struct.VEC_edge_gc** %12), !dbg !4204
  %13 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !4206
  store %struct.edge_def* %call1, %struct.edge_def** %13, align 8, !dbg !4207
  store i8 1, i8* %retval, align 1, !dbg !4208
  br label %return, !dbg !4208

if.else:                                          ; preds = %entry
  %14 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !4209
  store %struct.edge_def* null, %struct.edge_def** %14, align 8, !dbg !4211
  store i8 0, i8* %retval, align 1, !dbg !4212
  br label %return, !dbg !4212

return:                                           ; preds = %if.else, %if.then
  %15 = load i8, i8* %retval, align 1, !dbg !4213
  ret i8 %15, !dbg !4213
}

; Function Attrs: noinline nounwind uwtable
define internal void @ei_next(%struct.edge_iterator* %i) #0 !dbg !4214 {
entry:
  %i.addr = alloca %struct.edge_iterator*, align 8
  store %struct.edge_iterator* %i, %struct.edge_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator** %i.addr, metadata !4218, metadata !DIExpression()), !dbg !4219
  %0 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !4220
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %0, i32 0, i32 0, !dbg !4220
  %1 = load i32, i32* %index, align 8, !dbg !4220
  %2 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !4220
  %3 = bitcast %struct.edge_iterator* %2 to { i32, %struct.VEC_edge_gc** }*, !dbg !4220
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !4220
  %5 = load i32, i32* %4, align 8, !dbg !4220
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !4220
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !4220
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !4220
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !4220
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4220

cond.true:                                        ; preds = %entry
  %8 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !4220
  %9 = bitcast %struct.edge_iterator* %8 to { i32, %struct.VEC_edge_gc** }*, !dbg !4220
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !4220
  %11 = load i32, i32* %10, align 8, !dbg !4220
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !4220
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !4220
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !4220
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !4220
  br label %cond.end, !dbg !4220

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4220

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4220
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !4220
  %cmp = icmp ult i32 %1, %call2, !dbg !4220
  br i1 %cmp, label %cond.false4, label %cond.true3, !dbg !4220

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.21, i64 0, i64 0), i32 738, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4220
  br label %cond.end5, !dbg !4220

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !4220

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !4220
  %14 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !4221
  %index7 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %14, i32 0, i32 0, !dbg !4222
  %15 = load i32, i32* %index7, align 8, !dbg !4223
  %inc = add i32 %15, 1, !dbg !4223
  store i32 %inc, i32* %index7, align 8, !dbg !4223
  ret void, !dbg !4224
}

declare dso_local %struct.simple_bitmap_def* @sbitmap_alloc(i32) #2

declare dso_local void @sbitmap_zero(%struct.simple_bitmap_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @SET_BIT(%struct.simple_bitmap_def* %map, i32 %bitno) #0 !dbg !4225 {
entry:
  %map.addr = alloca %struct.simple_bitmap_def*, align 8
  %bitno.addr = alloca i32, align 4
  %oldbit = alloca i8, align 1
  store %struct.simple_bitmap_def* %map, %struct.simple_bitmap_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %map.addr, metadata !4228, metadata !DIExpression()), !dbg !4229
  store i32 %bitno, i32* %bitno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bitno.addr, metadata !4230, metadata !DIExpression()), !dbg !4231
  %0 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !4232
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %0, i32 0, i32 0, !dbg !4234
  %1 = load i8*, i8** %popcount, align 8, !dbg !4234
  %tobool = icmp ne i8* %1, null, !dbg !4232
  br i1 %tobool, label %if.then, label %if.end7, !dbg !4235

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %oldbit, metadata !4236, metadata !DIExpression()), !dbg !4238
  %2 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !4239
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %2, i32 0, i32 3, !dbg !4239
  %3 = load i32, i32* %bitno.addr, align 4, !dbg !4239
  %div = udiv i32 %3, 64, !dbg !4239
  %idxprom = zext i32 %div to i64, !dbg !4239
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !4239
  %4 = load i64, i64* %arrayidx, align 8, !dbg !4239
  %5 = load i32, i32* %bitno.addr, align 4, !dbg !4239
  %rem = urem i32 %5, 64, !dbg !4239
  %sh_prom = zext i32 %rem to i64, !dbg !4239
  %shr = lshr i64 %4, %sh_prom, !dbg !4239
  %and = and i64 %shr, 1, !dbg !4239
  %conv = trunc i64 %and to i8, !dbg !4239
  store i8 %conv, i8* %oldbit, align 1, !dbg !4240
  %6 = load i8, i8* %oldbit, align 1, !dbg !4241
  %tobool1 = icmp ne i8 %6, 0, !dbg !4241
  br i1 %tobool1, label %if.end, label %if.then2, !dbg !4243

if.then2:                                         ; preds = %if.then
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !4244
  %popcount3 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %7, i32 0, i32 0, !dbg !4245
  %8 = load i8*, i8** %popcount3, align 8, !dbg !4245
  %9 = load i32, i32* %bitno.addr, align 4, !dbg !4246
  %div4 = udiv i32 %9, 64, !dbg !4247
  %idxprom5 = zext i32 %div4 to i64, !dbg !4244
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i64 %idxprom5, !dbg !4244
  %10 = load i8, i8* %arrayidx6, align 1, !dbg !4248
  %inc = add i8 %10, 1, !dbg !4248
  store i8 %inc, i8* %arrayidx6, align 1, !dbg !4248
  br label %if.end, !dbg !4244

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end7, !dbg !4249

if.end7:                                          ; preds = %if.end, %entry
  %11 = load i32, i32* %bitno.addr, align 4, !dbg !4250
  %rem8 = urem i32 %11, 64, !dbg !4251
  %sh_prom9 = zext i32 %rem8 to i64, !dbg !4252
  %shl = shl i64 1, %sh_prom9, !dbg !4252
  %12 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !4253
  %elms10 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %12, i32 0, i32 3, !dbg !4254
  %13 = load i32, i32* %bitno.addr, align 4, !dbg !4255
  %div11 = udiv i32 %13, 64, !dbg !4256
  %idxprom12 = zext i32 %div11 to i64, !dbg !4253
  %arrayidx13 = getelementptr inbounds [1 x i64], [1 x i64]* %elms10, i64 0, i64 %idxprom12, !dbg !4253
  %14 = load i64, i64* %arrayidx13, align 8, !dbg !4257
  %or = or i64 %14, %shl, !dbg !4257
  store i64 %or, i64* %arrayidx13, align 8, !dbg !4257
  ret void, !dbg !4258
}

declare dso_local void @find_many_sub_basic_blocks(%struct.simple_bitmap_def*) #2

declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @print_rtl_with_bb(%struct._IO_FILE* %outf, %struct.rtx_def* %rtx_first) #0 !dbg !794 {
entry:
  %outf.addr = alloca %struct._IO_FILE*, align 8
  %rtx_first.addr = alloca %struct.rtx_def*, align 8
  %tmp_rtx = alloca %struct.rtx_def*, align 8
  %max_uid = alloca i32, align 4
  %start = alloca %struct.basic_block_def**, align 8
  %end = alloca %struct.basic_block_def**, align 8
  %in_bb_p = alloca i32*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %x = alloca %struct.rtx_def*, align 8
  %state = alloca i32, align 4
  %did_output = alloca i32, align 4
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %tmp85 = alloca %struct.edge_iterator, align 8
  %e137 = alloca %struct.edge_def*, align 8
  %ei138 = alloca %struct.edge_iterator, align 8
  %tmp141 = alloca %struct.edge_iterator, align 8
  %tmp157 = alloca %struct.edge_iterator, align 8
  store %struct._IO_FILE* %outf, %struct._IO_FILE** %outf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %outf.addr, metadata !4259, metadata !DIExpression()), !dbg !4260
  store %struct.rtx_def* %rtx_first, %struct.rtx_def** %rtx_first.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %rtx_first.addr, metadata !4261, metadata !DIExpression()), !dbg !4262
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tmp_rtx, metadata !4263, metadata !DIExpression()), !dbg !4264
  %0 = load %struct.rtx_def*, %struct.rtx_def** %rtx_first.addr, align 8, !dbg !4265
  %cmp = icmp eq %struct.rtx_def* %0, null, !dbg !4267
  br i1 %cmp, label %if.then, label %if.else, !dbg !4268

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !4269
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i64 0, i64 0)), !dbg !4270
  br label %if.end179, !dbg !4270

if.else:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %max_uid, metadata !4271, metadata !DIExpression()), !dbg !4273
  %call1 = call i32 @get_max_uid(), !dbg !4274
  store i32 %call1, i32* %max_uid, align 4, !dbg !4273
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %start, metadata !4275, metadata !DIExpression()), !dbg !4276
  %2 = load i32, i32* %max_uid, align 4, !dbg !4277
  %conv = sext i32 %2 to i64, !dbg !4277
  %call2 = call i8* @xcalloc(i64 %conv, i64 8), !dbg !4277
  %3 = bitcast i8* %call2 to %struct.basic_block_def**, !dbg !4277
  store %struct.basic_block_def** %3, %struct.basic_block_def*** %start, align 8, !dbg !4276
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %end, metadata !4278, metadata !DIExpression()), !dbg !4279
  %4 = load i32, i32* %max_uid, align 4, !dbg !4280
  %conv3 = sext i32 %4 to i64, !dbg !4280
  %call4 = call i8* @xcalloc(i64 %conv3, i64 8), !dbg !4280
  %5 = bitcast i8* %call4 to %struct.basic_block_def**, !dbg !4280
  store %struct.basic_block_def** %5, %struct.basic_block_def*** %end, align 8, !dbg !4279
  call void @llvm.dbg.declare(metadata i32** %in_bb_p, metadata !4281, metadata !DIExpression()), !dbg !4282
  %6 = load i32, i32* %max_uid, align 4, !dbg !4283
  %conv5 = sext i32 %6 to i64, !dbg !4283
  %call6 = call i8* @xcalloc(i64 %conv5, i64 4), !dbg !4283
  %7 = bitcast i8* %call6 to i32*, !dbg !4283
  store i32* %7, i32** %in_bb_p, align 8, !dbg !4282
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4284, metadata !DIExpression()), !dbg !4285
  %8 = load %struct.df*, %struct.df** @df, align 8, !dbg !4286
  %tobool = icmp ne %struct.df* %8, null, !dbg !4286
  br i1 %tobool, label %if.then7, label %if.end, !dbg !4288

if.then7:                                         ; preds = %if.else
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !4289
  call void @df_dump_start(%struct._IO_FILE* %9), !dbg !4290
  br label %if.end, !dbg !4290

if.end:                                           ; preds = %if.then7, %if.else
  %10 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4291
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %10, i64 0, !dbg !4291
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4291
  %11 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4291
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %11, i32 0, i32 1, !dbg !4291
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !4291
  %prev_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 5, !dbg !4291
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb, align 8, !dbg !4291
  store %struct.basic_block_def* %13, %struct.basic_block_def** %bb, align 8, !dbg !4291
  br label %for.cond, !dbg !4291

for.cond:                                         ; preds = %for.inc54, %if.end
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4293
  %15 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4293
  %add.ptr8 = getelementptr inbounds %struct.function, %struct.function* %15, i64 0, !dbg !4293
  %cfg9 = getelementptr inbounds %struct.function, %struct.function* %add.ptr8, i32 0, i32 1, !dbg !4293
  %16 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg9, align 8, !dbg !4293
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %16, i32 0, i32 0, !dbg !4293
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4293
  %cmp10 = icmp ne %struct.basic_block_def* %14, %17, !dbg !4293
  br i1 %cmp10, label %for.body, label %for.end56, !dbg !4291

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !4295, metadata !DIExpression()), !dbg !4297
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4298
  %19 = load %struct.basic_block_def**, %struct.basic_block_def*** %start, align 8, !dbg !4299
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4300
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %20, i32 0, i32 7, !dbg !4300
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !4300
  %21 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !4300
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %21, i32 0, i32 0, !dbg !4300
  %22 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !4300
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !4300
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4300
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !4300
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !4300
  %23 = load i32, i32* %rt_int, align 8, !dbg !4300
  %idxprom = sext i32 %23 to i64, !dbg !4299
  %arrayidx12 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %19, i64 %idxprom, !dbg !4299
  store %struct.basic_block_def* %18, %struct.basic_block_def** %arrayidx12, align 8, !dbg !4301
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4302
  %25 = load %struct.basic_block_def**, %struct.basic_block_def*** %end, align 8, !dbg !4303
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4304
  %il13 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %26, i32 0, i32 7, !dbg !4304
  %rtl14 = bitcast %union.basic_block_il_dependent* %il13 to %struct.rtl_bb_info**, !dbg !4304
  %27 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl14, align 8, !dbg !4304
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %27, i32 0, i32 1, !dbg !4304
  %28 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !4304
  %u15 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1, !dbg !4304
  %fld16 = bitcast %union.u* %u15 to [1 x %union.rtunion_def]*, !dbg !4304
  %arrayidx17 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld16, i64 0, i64 0, !dbg !4304
  %rt_int18 = bitcast %union.rtunion_def* %arrayidx17 to i32*, !dbg !4304
  %29 = load i32, i32* %rt_int18, align 8, !dbg !4304
  %idxprom19 = sext i32 %29 to i64, !dbg !4303
  %arrayidx20 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %25, i64 %idxprom19, !dbg !4303
  store %struct.basic_block_def* %24, %struct.basic_block_def** %arrayidx20, align 8, !dbg !4305
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4306
  %il21 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %30, i32 0, i32 7, !dbg !4306
  %rtl22 = bitcast %union.basic_block_il_dependent* %il21 to %struct.rtl_bb_info**, !dbg !4306
  %31 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl22, align 8, !dbg !4306
  %head_23 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %31, i32 0, i32 0, !dbg !4306
  %32 = load %struct.rtx_def*, %struct.rtx_def** %head_23, align 8, !dbg !4306
  store %struct.rtx_def* %32, %struct.rtx_def** %x, align 8, !dbg !4308
  br label %for.cond24, !dbg !4309

for.cond24:                                       ; preds = %for.inc, %for.body
  %33 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4310
  %cmp25 = icmp ne %struct.rtx_def* %33, null, !dbg !4312
  br i1 %cmp25, label %for.body27, label %for.end, !dbg !4313

for.body27:                                       ; preds = %for.cond24
  call void @llvm.dbg.declare(metadata i32* %state, metadata !4314, metadata !DIExpression()), !dbg !4316
  store i32 2, i32* %state, align 4, !dbg !4316
  %34 = load i32*, i32** %in_bb_p, align 8, !dbg !4317
  %35 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4319
  %u28 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1, !dbg !4319
  %fld29 = bitcast %union.u* %u28 to [1 x %union.rtunion_def]*, !dbg !4319
  %arrayidx30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld29, i64 0, i64 0, !dbg !4319
  %rt_int31 = bitcast %union.rtunion_def* %arrayidx30 to i32*, !dbg !4319
  %36 = load i32, i32* %rt_int31, align 8, !dbg !4319
  %idxprom32 = sext i32 %36 to i64, !dbg !4317
  %arrayidx33 = getelementptr inbounds i32, i32* %34, i64 %idxprom32, !dbg !4317
  %37 = load i32, i32* %arrayidx33, align 4, !dbg !4317
  %cmp34 = icmp eq i32 %37, 0, !dbg !4320
  br i1 %cmp34, label %if.then36, label %if.end37, !dbg !4321

if.then36:                                        ; preds = %for.body27
  store i32 1, i32* %state, align 4, !dbg !4322
  br label %if.end37, !dbg !4323

if.end37:                                         ; preds = %if.then36, %for.body27
  %38 = load i32, i32* %state, align 4, !dbg !4324
  %39 = load i32*, i32** %in_bb_p, align 8, !dbg !4325
  %40 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4326
  %u38 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %40, i32 0, i32 1, !dbg !4326
  %fld39 = bitcast %union.u* %u38 to [1 x %union.rtunion_def]*, !dbg !4326
  %arrayidx40 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld39, i64 0, i64 0, !dbg !4326
  %rt_int41 = bitcast %union.rtunion_def* %arrayidx40 to i32*, !dbg !4326
  %41 = load i32, i32* %rt_int41, align 8, !dbg !4326
  %idxprom42 = sext i32 %41 to i64, !dbg !4325
  %arrayidx43 = getelementptr inbounds i32, i32* %39, i64 %idxprom42, !dbg !4325
  store i32 %38, i32* %arrayidx43, align 4, !dbg !4327
  %42 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4328
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4330
  %il44 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %43, i32 0, i32 7, !dbg !4330
  %rtl45 = bitcast %union.basic_block_il_dependent* %il44 to %struct.rtl_bb_info**, !dbg !4330
  %44 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl45, align 8, !dbg !4330
  %end_46 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %44, i32 0, i32 1, !dbg !4330
  %45 = load %struct.rtx_def*, %struct.rtx_def** %end_46, align 8, !dbg !4330
  %cmp47 = icmp eq %struct.rtx_def* %42, %45, !dbg !4331
  br i1 %cmp47, label %if.then49, label %if.end50, !dbg !4332

if.then49:                                        ; preds = %if.end37
  br label %for.end, !dbg !4333

if.end50:                                         ; preds = %if.end37
  br label %for.inc, !dbg !4334

for.inc:                                          ; preds = %if.end50
  %46 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4335
  %u51 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %46, i32 0, i32 1, !dbg !4335
  %fld52 = bitcast %union.u* %u51 to [1 x %union.rtunion_def]*, !dbg !4335
  %arrayidx53 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld52, i64 0, i64 2, !dbg !4335
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx53 to %struct.rtx_def**, !dbg !4335
  %47 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4335
  store %struct.rtx_def* %47, %struct.rtx_def** %x, align 8, !dbg !4336
  br label %for.cond24, !dbg !4337, !llvm.loop !4338

for.end:                                          ; preds = %if.then49, %for.cond24
  br label %for.inc54, !dbg !4340

for.inc54:                                        ; preds = %for.end
  %48 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4293
  %prev_bb55 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %48, i32 0, i32 5, !dbg !4293
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb55, align 8, !dbg !4293
  store %struct.basic_block_def* %49, %struct.basic_block_def** %bb, align 8, !dbg !4293
  br label %for.cond, !dbg !4293, !llvm.loop !4341

for.end56:                                        ; preds = %for.cond
  %50 = load %struct.rtx_def*, %struct.rtx_def** %rtx_first.addr, align 8, !dbg !4343
  store %struct.rtx_def* %50, %struct.rtx_def** %tmp_rtx, align 8, !dbg !4345
  br label %for.cond57, !dbg !4346

for.cond57:                                       ; preds = %for.inc173, %for.end56
  %51 = load %struct.rtx_def*, %struct.rtx_def** %tmp_rtx, align 8, !dbg !4347
  %cmp58 = icmp ne %struct.rtx_def* null, %51, !dbg !4349
  br i1 %cmp58, label %for.body60, label %for.end178, !dbg !4350

for.body60:                                       ; preds = %for.cond57
  call void @llvm.dbg.declare(metadata i32* %did_output, metadata !4351, metadata !DIExpression()), !dbg !4353
  %52 = load %struct.basic_block_def**, %struct.basic_block_def*** %start, align 8, !dbg !4354
  %53 = load %struct.rtx_def*, %struct.rtx_def** %tmp_rtx, align 8, !dbg !4356
  %u61 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %53, i32 0, i32 1, !dbg !4356
  %fld62 = bitcast %union.u* %u61 to [1 x %union.rtunion_def]*, !dbg !4356
  %arrayidx63 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld62, i64 0, i64 0, !dbg !4356
  %rt_int64 = bitcast %union.rtunion_def* %arrayidx63 to i32*, !dbg !4356
  %54 = load i32, i32* %rt_int64, align 8, !dbg !4356
  %idxprom65 = sext i32 %54 to i64, !dbg !4354
  %arrayidx66 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %52, i64 %idxprom65, !dbg !4354
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx66, align 8, !dbg !4354
  store %struct.basic_block_def* %55, %struct.basic_block_def** %bb, align 8, !dbg !4357
  %cmp67 = icmp ne %struct.basic_block_def* %55, null, !dbg !4358
  br i1 %cmp67, label %if.then69, label %if.end96, !dbg !4359

if.then69:                                        ; preds = %for.body60
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !4360, metadata !DIExpression()), !dbg !4362
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !4363, metadata !DIExpression()), !dbg !4364
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !4365
  %call70 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %56, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.7, i64 0, i64 0)), !dbg !4366
  %57 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4367
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %57, i32 0, i32 0, !dbg !4367
  %call71 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !4367
  %58 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !4367
  %59 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %58, i32 0, i32 0, !dbg !4367
  %60 = extractvalue { i32, %struct.VEC_edge_gc** } %call71, 0, !dbg !4367
  store i32 %60, i32* %59, align 8, !dbg !4367
  %61 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %58, i32 0, i32 1, !dbg !4367
  %62 = extractvalue { i32, %struct.VEC_edge_gc** } %call71, 1, !dbg !4367
  store %struct.VEC_edge_gc** %62, %struct.VEC_edge_gc*** %61, align 8, !dbg !4367
  %63 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !4367
  %64 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !4367
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %63, i8* align 8 %64, i64 16, i1 false), !dbg !4367
  br label %for.cond72, !dbg !4367

for.cond72:                                       ; preds = %for.inc77, %if.then69
  %65 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !4369
  %66 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %65, i32 0, i32 0, !dbg !4369
  %67 = load i32, i32* %66, align 8, !dbg !4369
  %68 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %65, i32 0, i32 1, !dbg !4369
  %69 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %68, align 8, !dbg !4369
  %call73 = call zeroext i8 @ei_cond(i32 %67, %struct.VEC_edge_gc** %69, %struct.edge_def** %e), !dbg !4369
  %tobool74 = icmp ne i8 %call73, 0, !dbg !4367
  br i1 %tobool74, label %for.body75, label %for.end78, !dbg !4367

for.body75:                                       ; preds = %for.cond72
  %70 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !4371
  %71 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4372
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %71, i32 0, i32 0, !dbg !4373
  %72 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !4373
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %72, i32 0, i32 9, !dbg !4374
  %73 = load i32, i32* %index, align 8, !dbg !4374
  %call76 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %70, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0), i32 %73), !dbg !4375
  br label %for.inc77, !dbg !4375

for.inc77:                                        ; preds = %for.body75
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !4369
  br label %for.cond72, !dbg !4369, !llvm.loop !4376

for.end78:                                        ; preds = %for.cond72
  %74 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !4378
  %75 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4379
  %index79 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %75, i32 0, i32 9, !dbg !4380
  %76 = load i32, i32* %index79, align 8, !dbg !4380
  %call80 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %74, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.9, i64 0, i64 0), i32 %76), !dbg !4381
  %77 = load %struct.df*, %struct.df** @df, align 8, !dbg !4382
  %tobool81 = icmp ne %struct.df* %77, null, !dbg !4382
  br i1 %tobool81, label %if.then82, label %if.end84, !dbg !4384

if.then82:                                        ; preds = %for.end78
  %78 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4385
  %79 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !4387
  call void @df_dump_top(%struct.basic_block_def* %78, %struct._IO_FILE* %79), !dbg !4388
  %80 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !4389
  %call83 = call i32 @putc(i32 10, %struct._IO_FILE* %80), !dbg !4390
  br label %if.end84, !dbg !4391

if.end84:                                         ; preds = %if.then82, %for.end78
  %81 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4392
  %preds86 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %81, i32 0, i32 0, !dbg !4392
  %call87 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds86), !dbg !4392
  %82 = bitcast %struct.edge_iterator* %tmp85 to { i32, %struct.VEC_edge_gc** }*, !dbg !4392
  %83 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %82, i32 0, i32 0, !dbg !4392
  %84 = extractvalue { i32, %struct.VEC_edge_gc** } %call87, 0, !dbg !4392
  store i32 %84, i32* %83, align 8, !dbg !4392
  %85 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %82, i32 0, i32 1, !dbg !4392
  %86 = extractvalue { i32, %struct.VEC_edge_gc** } %call87, 1, !dbg !4392
  store %struct.VEC_edge_gc** %86, %struct.VEC_edge_gc*** %85, align 8, !dbg !4392
  %87 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !4392
  %88 = bitcast %struct.edge_iterator* %tmp85 to i8*, !dbg !4392
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %87, i8* align 8 %88, i64 16, i1 false), !dbg !4392
  br label %for.cond88, !dbg !4392

for.cond88:                                       ; preds = %for.inc94, %if.end84
  %89 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !4394
  %90 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %89, i32 0, i32 0, !dbg !4394
  %91 = load i32, i32* %90, align 8, !dbg !4394
  %92 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %89, i32 0, i32 1, !dbg !4394
  %93 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %92, align 8, !dbg !4394
  %call89 = call zeroext i8 @ei_cond(i32 %91, %struct.VEC_edge_gc** %93, %struct.edge_def** %e), !dbg !4394
  %tobool90 = icmp ne i8 %call89, 0, !dbg !4392
  br i1 %tobool90, label %for.body91, label %for.end95, !dbg !4392

for.body91:                                       ; preds = %for.cond88
  %94 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !4396
  %call92 = call i32 @fputs(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.10, i64 0, i64 0), %struct._IO_FILE* %94), !dbg !4398
  %95 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !4399
  %96 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4400
  call void @dump_edge_info(%struct._IO_FILE* %95, %struct.edge_def* %96, i32 0), !dbg !4401
  %97 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !4402
  %call93 = call i32 @fputc(i32 10, %struct._IO_FILE* %97), !dbg !4403
  br label %for.inc94, !dbg !4404

for.inc94:                                        ; preds = %for.body91
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !4394
  br label %for.cond88, !dbg !4394, !llvm.loop !4405

for.end95:                                        ; preds = %for.cond88
  br label %if.end96, !dbg !4407

if.end96:                                         ; preds = %for.end95, %for.body60
  %98 = load i32*, i32** %in_bb_p, align 8, !dbg !4408
  %99 = load %struct.rtx_def*, %struct.rtx_def** %tmp_rtx, align 8, !dbg !4410
  %u97 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %99, i32 0, i32 1, !dbg !4410
  %fld98 = bitcast %union.u* %u97 to [1 x %union.rtunion_def]*, !dbg !4410
  %arrayidx99 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld98, i64 0, i64 0, !dbg !4410
  %rt_int100 = bitcast %union.rtunion_def* %arrayidx99 to i32*, !dbg !4410
  %100 = load i32, i32* %rt_int100, align 8, !dbg !4410
  %idxprom101 = sext i32 %100 to i64, !dbg !4408
  %arrayidx102 = getelementptr inbounds i32, i32* %98, i64 %idxprom101, !dbg !4408
  %101 = load i32, i32* %arrayidx102, align 4, !dbg !4408
  %cmp103 = icmp eq i32 %101, 0, !dbg !4411
  br i1 %cmp103, label %land.lhs.true, label %if.else114, !dbg !4412

land.lhs.true:                                    ; preds = %if.end96
  %102 = load %struct.rtx_def*, %struct.rtx_def** %tmp_rtx, align 8, !dbg !4413
  %103 = bitcast %struct.rtx_def* %102 to i32*, !dbg !4413
  %bf.load = load i32, i32* %103, align 8, !dbg !4413
  %bf.clear = and i32 %bf.load, 65535, !dbg !4413
  %cmp105 = icmp eq i32 %bf.clear, 13, !dbg !4413
  br i1 %cmp105, label %if.else114, label %land.lhs.true107, !dbg !4414

land.lhs.true107:                                 ; preds = %land.lhs.true
  %104 = load %struct.rtx_def*, %struct.rtx_def** %tmp_rtx, align 8, !dbg !4415
  %105 = bitcast %struct.rtx_def* %104 to i32*, !dbg !4415
  %bf.load108 = load i32, i32* %105, align 8, !dbg !4415
  %bf.clear109 = and i32 %bf.load108, 65535, !dbg !4415
  %cmp110 = icmp eq i32 %bf.clear109, 11, !dbg !4415
  br i1 %cmp110, label %if.else114, label %if.then112, !dbg !4416

if.then112:                                       ; preds = %land.lhs.true107
  %106 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !4417
  %call113 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %106, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.11, i64 0, i64 0)), !dbg !4418
  br label %if.end126, !dbg !4418

if.else114:                                       ; preds = %land.lhs.true107, %land.lhs.true, %if.end96
  %107 = load i32*, i32** %in_bb_p, align 8, !dbg !4419
  %108 = load %struct.rtx_def*, %struct.rtx_def** %tmp_rtx, align 8, !dbg !4421
  %u115 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %108, i32 0, i32 1, !dbg !4421
  %fld116 = bitcast %union.u* %u115 to [1 x %union.rtunion_def]*, !dbg !4421
  %arrayidx117 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld116, i64 0, i64 0, !dbg !4421
  %rt_int118 = bitcast %union.rtunion_def* %arrayidx117 to i32*, !dbg !4421
  %109 = load i32, i32* %rt_int118, align 8, !dbg !4421
  %idxprom119 = sext i32 %109 to i64, !dbg !4419
  %arrayidx120 = getelementptr inbounds i32, i32* %107, i64 %idxprom119, !dbg !4419
  %110 = load i32, i32* %arrayidx120, align 4, !dbg !4419
  %cmp121 = icmp eq i32 %110, 2, !dbg !4422
  br i1 %cmp121, label %if.then123, label %if.end125, !dbg !4423

if.then123:                                       ; preds = %if.else114
  %111 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !4424
  %call124 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %111, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.12, i64 0, i64 0)), !dbg !4425
  br label %if.end125, !dbg !4425

if.end125:                                        ; preds = %if.then123, %if.else114
  br label %if.end126

if.end126:                                        ; preds = %if.end125, %if.then112
  %112 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !4426
  %113 = load %struct.rtx_def*, %struct.rtx_def** %tmp_rtx, align 8, !dbg !4427
  %call127 = call i32 @print_rtl_single(%struct._IO_FILE* %112, %struct.rtx_def* %113), !dbg !4428
  store i32 %call127, i32* %did_output, align 4, !dbg !4429
  %114 = load %struct.basic_block_def**, %struct.basic_block_def*** %end, align 8, !dbg !4430
  %115 = load %struct.rtx_def*, %struct.rtx_def** %tmp_rtx, align 8, !dbg !4432
  %u128 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %115, i32 0, i32 1, !dbg !4432
  %fld129 = bitcast %union.u* %u128 to [1 x %union.rtunion_def]*, !dbg !4432
  %arrayidx130 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld129, i64 0, i64 0, !dbg !4432
  %rt_int131 = bitcast %union.rtunion_def* %arrayidx130 to i32*, !dbg !4432
  %116 = load i32, i32* %rt_int131, align 8, !dbg !4432
  %idxprom132 = sext i32 %116 to i64, !dbg !4430
  %arrayidx133 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %114, i64 %idxprom132, !dbg !4430
  %117 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx133, align 8, !dbg !4430
  store %struct.basic_block_def* %117, %struct.basic_block_def** %bb, align 8, !dbg !4433
  %cmp134 = icmp ne %struct.basic_block_def* %117, null, !dbg !4434
  br i1 %cmp134, label %if.then136, label %if.end168, !dbg !4435

if.then136:                                       ; preds = %if.end126
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e137, metadata !4436, metadata !DIExpression()), !dbg !4438
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei138, metadata !4439, metadata !DIExpression()), !dbg !4440
  %118 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !4441
  %119 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4442
  %index139 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %119, i32 0, i32 9, !dbg !4443
  %120 = load i32, i32* %index139, align 8, !dbg !4443
  %call140 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %118, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.13, i64 0, i64 0), i32 %120), !dbg !4444
  %121 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4445
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %121, i32 0, i32 1, !dbg !4445
  %call142 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !4445
  %122 = bitcast %struct.edge_iterator* %tmp141 to { i32, %struct.VEC_edge_gc** }*, !dbg !4445
  %123 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %122, i32 0, i32 0, !dbg !4445
  %124 = extractvalue { i32, %struct.VEC_edge_gc** } %call142, 0, !dbg !4445
  store i32 %124, i32* %123, align 8, !dbg !4445
  %125 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %122, i32 0, i32 1, !dbg !4445
  %126 = extractvalue { i32, %struct.VEC_edge_gc** } %call142, 1, !dbg !4445
  store %struct.VEC_edge_gc** %126, %struct.VEC_edge_gc*** %125, align 8, !dbg !4445
  %127 = bitcast %struct.edge_iterator* %ei138 to i8*, !dbg !4445
  %128 = bitcast %struct.edge_iterator* %tmp141 to i8*, !dbg !4445
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %127, i8* align 8 %128, i64 16, i1 false), !dbg !4445
  br label %for.cond143, !dbg !4445

for.cond143:                                      ; preds = %for.inc149, %if.then136
  %129 = bitcast %struct.edge_iterator* %ei138 to { i32, %struct.VEC_edge_gc** }*, !dbg !4447
  %130 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %129, i32 0, i32 0, !dbg !4447
  %131 = load i32, i32* %130, align 8, !dbg !4447
  %132 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %129, i32 0, i32 1, !dbg !4447
  %133 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %132, align 8, !dbg !4447
  %call144 = call zeroext i8 @ei_cond(i32 %131, %struct.VEC_edge_gc** %133, %struct.edge_def** %e137), !dbg !4447
  %tobool145 = icmp ne i8 %call144, 0, !dbg !4445
  br i1 %tobool145, label %for.body146, label %for.end150, !dbg !4445

for.body146:                                      ; preds = %for.cond143
  %134 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !4449
  %135 = load %struct.edge_def*, %struct.edge_def** %e137, align 8, !dbg !4450
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %135, i32 0, i32 1, !dbg !4451
  %136 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !4451
  %index147 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %136, i32 0, i32 9, !dbg !4452
  %137 = load i32, i32* %index147, align 8, !dbg !4452
  %call148 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %134, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0), i32 %137), !dbg !4453
  br label %for.inc149, !dbg !4453

for.inc149:                                       ; preds = %for.body146
  call void @ei_next(%struct.edge_iterator* %ei138), !dbg !4447
  br label %for.cond143, !dbg !4447, !llvm.loop !4454

for.end150:                                       ; preds = %for.cond143
  %138 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !4456
  %call151 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %138, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i64 0, i64 0)), !dbg !4457
  %139 = load %struct.df*, %struct.df** @df, align 8, !dbg !4458
  %tobool152 = icmp ne %struct.df* %139, null, !dbg !4458
  br i1 %tobool152, label %if.then153, label %if.end155, !dbg !4460

if.then153:                                       ; preds = %for.end150
  %140 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4461
  %141 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !4463
  call void @df_dump_bottom(%struct.basic_block_def* %140, %struct._IO_FILE* %141), !dbg !4464
  %142 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !4465
  %call154 = call i32 @putc(i32 10, %struct._IO_FILE* %142), !dbg !4466
  br label %if.end155, !dbg !4467

if.end155:                                        ; preds = %if.then153, %for.end150
  %143 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !4468
  %call156 = call i32 @putc(i32 10, %struct._IO_FILE* %143), !dbg !4469
  %144 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4470
  %succs158 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %144, i32 0, i32 1, !dbg !4470
  %call159 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs158), !dbg !4470
  %145 = bitcast %struct.edge_iterator* %tmp157 to { i32, %struct.VEC_edge_gc** }*, !dbg !4470
  %146 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %145, i32 0, i32 0, !dbg !4470
  %147 = extractvalue { i32, %struct.VEC_edge_gc** } %call159, 0, !dbg !4470
  store i32 %147, i32* %146, align 8, !dbg !4470
  %148 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %145, i32 0, i32 1, !dbg !4470
  %149 = extractvalue { i32, %struct.VEC_edge_gc** } %call159, 1, !dbg !4470
  store %struct.VEC_edge_gc** %149, %struct.VEC_edge_gc*** %148, align 8, !dbg !4470
  %150 = bitcast %struct.edge_iterator* %ei138 to i8*, !dbg !4470
  %151 = bitcast %struct.edge_iterator* %tmp157 to i8*, !dbg !4470
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %150, i8* align 8 %151, i64 16, i1 false), !dbg !4470
  br label %for.cond160, !dbg !4470

for.cond160:                                      ; preds = %for.inc166, %if.end155
  %152 = bitcast %struct.edge_iterator* %ei138 to { i32, %struct.VEC_edge_gc** }*, !dbg !4472
  %153 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %152, i32 0, i32 0, !dbg !4472
  %154 = load i32, i32* %153, align 8, !dbg !4472
  %155 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %152, i32 0, i32 1, !dbg !4472
  %156 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %155, align 8, !dbg !4472
  %call161 = call zeroext i8 @ei_cond(i32 %154, %struct.VEC_edge_gc** %156, %struct.edge_def** %e137), !dbg !4472
  %tobool162 = icmp ne i8 %call161, 0, !dbg !4470
  br i1 %tobool162, label %for.body163, label %for.end167, !dbg !4470

for.body163:                                      ; preds = %for.cond160
  %157 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !4474
  %call164 = call i32 @fputs(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i64 0, i64 0), %struct._IO_FILE* %157), !dbg !4476
  %158 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !4477
  %159 = load %struct.edge_def*, %struct.edge_def** %e137, align 8, !dbg !4478
  call void @dump_edge_info(%struct._IO_FILE* %158, %struct.edge_def* %159, i32 1), !dbg !4479
  %160 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !4480
  %call165 = call i32 @fputc(i32 10, %struct._IO_FILE* %160), !dbg !4481
  br label %for.inc166, !dbg !4482

for.inc166:                                       ; preds = %for.body163
  call void @ei_next(%struct.edge_iterator* %ei138), !dbg !4472
  br label %for.cond160, !dbg !4472, !llvm.loop !4483

for.end167:                                       ; preds = %for.cond160
  br label %if.end168, !dbg !4485

if.end168:                                        ; preds = %for.end167, %if.end126
  %161 = load i32, i32* %did_output, align 4, !dbg !4486
  %tobool169 = icmp ne i32 %161, 0, !dbg !4486
  br i1 %tobool169, label %if.then170, label %if.end172, !dbg !4488

if.then170:                                       ; preds = %if.end168
  %162 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !4489
  %call171 = call i32 @putc(i32 10, %struct._IO_FILE* %162), !dbg !4490
  br label %if.end172, !dbg !4490

if.end172:                                        ; preds = %if.then170, %if.end168
  br label %for.inc173, !dbg !4491

for.inc173:                                       ; preds = %if.end172
  %163 = load %struct.rtx_def*, %struct.rtx_def** %tmp_rtx, align 8, !dbg !4492
  %u174 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %163, i32 0, i32 1, !dbg !4492
  %fld175 = bitcast %union.u* %u174 to [1 x %union.rtunion_def]*, !dbg !4492
  %arrayidx176 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld175, i64 0, i64 2, !dbg !4492
  %rt_rtx177 = bitcast %union.rtunion_def* %arrayidx176 to %struct.rtx_def**, !dbg !4492
  %164 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx177, align 8, !dbg !4492
  store %struct.rtx_def* %164, %struct.rtx_def** %tmp_rtx, align 8, !dbg !4493
  br label %for.cond57, !dbg !4494, !llvm.loop !4495

for.end178:                                       ; preds = %for.cond57
  %165 = load %struct.basic_block_def**, %struct.basic_block_def*** %start, align 8, !dbg !4497
  %166 = bitcast %struct.basic_block_def** %165 to i8*, !dbg !4497
  call void @free(i8* %166), !dbg !4498
  %167 = load %struct.basic_block_def**, %struct.basic_block_def*** %end, align 8, !dbg !4499
  %168 = bitcast %struct.basic_block_def** %167 to i8*, !dbg !4499
  call void @free(i8* %168), !dbg !4500
  %169 = load i32*, i32** %in_bb_p, align 8, !dbg !4501
  %170 = bitcast i32* %169 to i8*, !dbg !4501
  call void @free(i8* %170), !dbg !4502
  br label %if.end179

if.end179:                                        ; preds = %for.end178, %if.then
  %171 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 27), align 8, !dbg !4503
  %cmp180 = icmp ne %struct.rtx_def* %171, null, !dbg !4505
  br i1 %cmp180, label %if.then182, label %if.end199, !dbg !4506

if.then182:                                       ; preds = %if.end179
  %172 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !4507
  %call183 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %172, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.16, i64 0, i64 0)), !dbg !4509
  %173 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 27), align 8, !dbg !4510
  store %struct.rtx_def* %173, %struct.rtx_def** %tmp_rtx, align 8, !dbg !4512
  br label %for.cond184, !dbg !4513

for.cond184:                                      ; preds = %for.inc193, %if.then182
  %174 = load %struct.rtx_def*, %struct.rtx_def** %tmp_rtx, align 8, !dbg !4514
  %cmp185 = icmp ne %struct.rtx_def* %174, null, !dbg !4516
  br i1 %cmp185, label %for.body187, label %for.end198, !dbg !4517

for.body187:                                      ; preds = %for.cond184
  %175 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !4518
  %176 = load %struct.rtx_def*, %struct.rtx_def** %tmp_rtx, align 8, !dbg !4519
  %u188 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %176, i32 0, i32 1, !dbg !4519
  %fld189 = bitcast %union.u* %u188 to [1 x %union.rtunion_def]*, !dbg !4519
  %arrayidx190 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld189, i64 0, i64 0, !dbg !4519
  %rt_rtx191 = bitcast %union.rtunion_def* %arrayidx190 to %struct.rtx_def**, !dbg !4519
  %177 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx191, align 8, !dbg !4519
  %call192 = call i32 @print_rtl_single(%struct._IO_FILE* %175, %struct.rtx_def* %177), !dbg !4520
  br label %for.inc193, !dbg !4520

for.inc193:                                       ; preds = %for.body187
  %178 = load %struct.rtx_def*, %struct.rtx_def** %tmp_rtx, align 8, !dbg !4521
  %u194 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %178, i32 0, i32 1, !dbg !4521
  %fld195 = bitcast %union.u* %u194 to [1 x %union.rtunion_def]*, !dbg !4521
  %arrayidx196 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld195, i64 0, i64 1, !dbg !4521
  %rt_rtx197 = bitcast %union.rtunion_def* %arrayidx196 to %struct.rtx_def**, !dbg !4521
  %179 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx197, align 8, !dbg !4521
  store %struct.rtx_def* %179, %struct.rtx_def** %tmp_rtx, align 8, !dbg !4522
  br label %for.cond184, !dbg !4523, !llvm.loop !4524

for.end198:                                       ; preds = %for.cond184
  br label %if.end199, !dbg !4526

if.end199:                                        ; preds = %for.end198, %if.end179
  ret void, !dbg !4527
}

declare dso_local i32 @get_max_uid() #2

declare dso_local i8* @xcalloc(i64, i64) #2

declare dso_local void @df_dump_start(%struct._IO_FILE*) #2

declare dso_local void @df_dump_top(%struct.basic_block_def*, %struct._IO_FILE*) #2

declare dso_local i32 @putc(i32, %struct._IO_FILE*) #2

declare dso_local i32 @fputs(i8*, %struct._IO_FILE*) #2

declare dso_local void @dump_edge_info(%struct._IO_FILE*, %struct.edge_def*, i32) #2

declare dso_local i32 @fputc(i32, %struct._IO_FILE*) #2

declare dso_local i32 @print_rtl_single(%struct._IO_FILE*, %struct.rtx_def*) #2

declare dso_local void @df_dump_bottom(%struct.basic_block_def*, %struct._IO_FILE*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @update_br_prob_note(%struct.basic_block_def* %bb) #0 !dbg !4528 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4529, metadata !DIExpression()), !dbg !4530
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !4531, metadata !DIExpression()), !dbg !4532
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4533
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 7, !dbg !4533
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !4533
  %1 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !4533
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %1, i32 0, i32 1, !dbg !4533
  %2 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !4533
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !4533
  %bf.load = load i32, i32* %3, align 8, !dbg !4533
  %bf.clear = and i32 %bf.load, 65535, !dbg !4533
  %cmp = icmp eq i32 %bf.clear, 9, !dbg !4533
  br i1 %cmp, label %if.end, label %if.then, !dbg !4535

if.then:                                          ; preds = %entry
  br label %return, !dbg !4536

if.end:                                           ; preds = %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4537
  %il1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !4537
  %rtl2 = bitcast %union.basic_block_il_dependent* %il1 to %struct.rtl_bb_info**, !dbg !4537
  %5 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl2, align 8, !dbg !4537
  %end_3 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %5, i32 0, i32 1, !dbg !4537
  %6 = load %struct.rtx_def*, %struct.rtx_def** %end_3, align 8, !dbg !4537
  %call = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %6, i32 13, %struct.rtx_def* null), !dbg !4538
  store %struct.rtx_def* %call, %struct.rtx_def** %note, align 8, !dbg !4539
  %7 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4540
  %tobool = icmp ne %struct.rtx_def* %7, null, !dbg !4540
  br i1 %tobool, label %lor.lhs.false, label %if.then34, !dbg !4542

lor.lhs.false:                                    ; preds = %if.end
  %8 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4543
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !4543
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4543
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !4543
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4543
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4543
  %u4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !4543
  %hwint = bitcast %union.u* %u4 to [1 x i64]*, !dbg !4543
  %arrayidx5 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !4543
  %10 = load i64, i64* %arrayidx5, align 8, !dbg !4543
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4544
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 1, !dbg !4544
  %12 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !4544
  %tobool6 = icmp ne %struct.VEC_edge_gc* %12, null, !dbg !4544
  br i1 %tobool6, label %cond.true, label %cond.false, !dbg !4544

cond.true:                                        ; preds = %lor.lhs.false
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4544
  %succs7 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 1, !dbg !4544
  %14 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs7, align 8, !dbg !4544
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %14, i32 0, i32 0, !dbg !4544
  br label %cond.end, !dbg !4544

cond.false:                                       ; preds = %lor.lhs.false
  br label %cond.end, !dbg !4544

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4544
  %call8 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 0), !dbg !4544
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call8, i32 0, i32 7, !dbg !4544
  %15 = load i32, i32* %flags, align 8, !dbg !4544
  %and = and i32 %15, 1, !dbg !4544
  %tobool9 = icmp ne i32 %and, 0, !dbg !4544
  br i1 %tobool9, label %cond.true10, label %cond.false20, !dbg !4544

cond.true10:                                      ; preds = %cond.end
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4544
  %succs11 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i32 0, i32 1, !dbg !4544
  %17 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs11, align 8, !dbg !4544
  %tobool12 = icmp ne %struct.VEC_edge_gc* %17, null, !dbg !4544
  br i1 %tobool12, label %cond.true13, label %cond.false16, !dbg !4544

cond.true13:                                      ; preds = %cond.true10
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4544
  %succs14 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %18, i32 0, i32 1, !dbg !4544
  %19 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs14, align 8, !dbg !4544
  %base15 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %19, i32 0, i32 0, !dbg !4544
  br label %cond.end17, !dbg !4544

cond.false16:                                     ; preds = %cond.true10
  br label %cond.end17, !dbg !4544

cond.end17:                                       ; preds = %cond.false16, %cond.true13
  %cond18 = phi %struct.VEC_edge_base* [ %base15, %cond.true13 ], [ null, %cond.false16 ], !dbg !4544
  %call19 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond18, i32 1), !dbg !4544
  br label %cond.end30, !dbg !4544

cond.false20:                                     ; preds = %cond.end
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4544
  %succs21 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %20, i32 0, i32 1, !dbg !4544
  %21 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs21, align 8, !dbg !4544
  %tobool22 = icmp ne %struct.VEC_edge_gc* %21, null, !dbg !4544
  br i1 %tobool22, label %cond.true23, label %cond.false26, !dbg !4544

cond.true23:                                      ; preds = %cond.false20
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4544
  %succs24 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %22, i32 0, i32 1, !dbg !4544
  %23 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs24, align 8, !dbg !4544
  %base25 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %23, i32 0, i32 0, !dbg !4544
  br label %cond.end27, !dbg !4544

cond.false26:                                     ; preds = %cond.false20
  br label %cond.end27, !dbg !4544

cond.end27:                                       ; preds = %cond.false26, %cond.true23
  %cond28 = phi %struct.VEC_edge_base* [ %base25, %cond.true23 ], [ null, %cond.false26 ], !dbg !4544
  %call29 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond28, i32 0), !dbg !4544
  br label %cond.end30, !dbg !4544

cond.end30:                                       ; preds = %cond.end27, %cond.end17
  %cond31 = phi %struct.edge_def* [ %call19, %cond.end17 ], [ %call29, %cond.end27 ], !dbg !4544
  %probability = getelementptr inbounds %struct.edge_def, %struct.edge_def* %cond31, i32 0, i32 8, !dbg !4545
  %24 = load i32, i32* %probability, align 4, !dbg !4545
  %conv = sext i32 %24 to i64, !dbg !4544
  %cmp32 = icmp eq i64 %10, %conv, !dbg !4546
  br i1 %cmp32, label %if.then34, label %if.end35, !dbg !4547

if.then34:                                        ; preds = %cond.end30, %if.end
  br label %return, !dbg !4548

if.end35:                                         ; preds = %cond.end30
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4549
  %succs36 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %25, i32 0, i32 1, !dbg !4549
  %26 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs36, align 8, !dbg !4549
  %tobool37 = icmp ne %struct.VEC_edge_gc* %26, null, !dbg !4549
  br i1 %tobool37, label %cond.true38, label %cond.false41, !dbg !4549

cond.true38:                                      ; preds = %if.end35
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4549
  %succs39 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %27, i32 0, i32 1, !dbg !4549
  %28 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs39, align 8, !dbg !4549
  %base40 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %28, i32 0, i32 0, !dbg !4549
  br label %cond.end42, !dbg !4549

cond.false41:                                     ; preds = %if.end35
  br label %cond.end42, !dbg !4549

cond.end42:                                       ; preds = %cond.false41, %cond.true38
  %cond43 = phi %struct.VEC_edge_base* [ %base40, %cond.true38 ], [ null, %cond.false41 ], !dbg !4549
  %call44 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond43, i32 0), !dbg !4549
  %flags45 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call44, i32 0, i32 7, !dbg !4549
  %29 = load i32, i32* %flags45, align 8, !dbg !4549
  %and46 = and i32 %29, 1, !dbg !4549
  %tobool47 = icmp ne i32 %and46, 0, !dbg !4549
  br i1 %tobool47, label %cond.true48, label %cond.false58, !dbg !4549

cond.true48:                                      ; preds = %cond.end42
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4549
  %succs49 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %30, i32 0, i32 1, !dbg !4549
  %31 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs49, align 8, !dbg !4549
  %tobool50 = icmp ne %struct.VEC_edge_gc* %31, null, !dbg !4549
  br i1 %tobool50, label %cond.true51, label %cond.false54, !dbg !4549

cond.true51:                                      ; preds = %cond.true48
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4549
  %succs52 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %32, i32 0, i32 1, !dbg !4549
  %33 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs52, align 8, !dbg !4549
  %base53 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %33, i32 0, i32 0, !dbg !4549
  br label %cond.end55, !dbg !4549

cond.false54:                                     ; preds = %cond.true48
  br label %cond.end55, !dbg !4549

cond.end55:                                       ; preds = %cond.false54, %cond.true51
  %cond56 = phi %struct.VEC_edge_base* [ %base53, %cond.true51 ], [ null, %cond.false54 ], !dbg !4549
  %call57 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond56, i32 1), !dbg !4549
  br label %cond.end68, !dbg !4549

cond.false58:                                     ; preds = %cond.end42
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4549
  %succs59 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %34, i32 0, i32 1, !dbg !4549
  %35 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs59, align 8, !dbg !4549
  %tobool60 = icmp ne %struct.VEC_edge_gc* %35, null, !dbg !4549
  br i1 %tobool60, label %cond.true61, label %cond.false64, !dbg !4549

cond.true61:                                      ; preds = %cond.false58
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4549
  %succs62 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %36, i32 0, i32 1, !dbg !4549
  %37 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs62, align 8, !dbg !4549
  %base63 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %37, i32 0, i32 0, !dbg !4549
  br label %cond.end65, !dbg !4549

cond.false64:                                     ; preds = %cond.false58
  br label %cond.end65, !dbg !4549

cond.end65:                                       ; preds = %cond.false64, %cond.true61
  %cond66 = phi %struct.VEC_edge_base* [ %base63, %cond.true61 ], [ null, %cond.false64 ], !dbg !4549
  %call67 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond66, i32 0), !dbg !4549
  br label %cond.end68, !dbg !4549

cond.end68:                                       ; preds = %cond.end65, %cond.end55
  %cond69 = phi %struct.edge_def* [ %call57, %cond.end55 ], [ %call67, %cond.end65 ], !dbg !4549
  %probability70 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %cond69, i32 0, i32 8, !dbg !4549
  %38 = load i32, i32* %probability70, align 4, !dbg !4549
  %conv71 = sext i32 %38 to i64, !dbg !4549
  %call72 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv71), !dbg !4549
  %39 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4550
  %u73 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1, !dbg !4550
  %fld74 = bitcast %union.u* %u73 to [1 x %union.rtunion_def]*, !dbg !4550
  %arrayidx75 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld74, i64 0, i64 0, !dbg !4550
  %rt_rtx76 = bitcast %union.rtunion_def* %arrayidx75 to %struct.rtx_def**, !dbg !4550
  store %struct.rtx_def* %call72, %struct.rtx_def** %rt_rtx76, align 8, !dbg !4551
  br label %return, !dbg !4552

return:                                           ; preds = %cond.end68, %if.then34, %if.then
  ret void, !dbg !4552
}

declare dso_local %struct.rtx_def* @gen_rtx_CONST_INT(i32, i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @get_last_bb_insn(%struct.basic_block_def* %bb) #0 !dbg !4553 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %tmp = alloca %struct.rtx_def*, align 8
  %end = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4554, metadata !DIExpression()), !dbg !4555
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tmp, metadata !4556, metadata !DIExpression()), !dbg !4557
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %end, metadata !4558, metadata !DIExpression()), !dbg !4559
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4560
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 7, !dbg !4560
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !4560
  %1 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !4560
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %1, i32 0, i32 1, !dbg !4560
  %2 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !4560
  store %struct.rtx_def* %2, %struct.rtx_def** %end, align 8, !dbg !4559
  %3 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8, !dbg !4561
  %call = call zeroext i8 @tablejump_p(%struct.rtx_def* %3, %struct.rtx_def** null, %struct.rtx_def** %tmp), !dbg !4563
  %tobool = icmp ne i8 %call, 0, !dbg !4563
  br i1 %tobool, label %if.then, label %if.end, !dbg !4564

if.then:                                          ; preds = %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !4565
  store %struct.rtx_def* %4, %struct.rtx_def** %end, align 8, !dbg !4566
  br label %if.end, !dbg !4567

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8, !dbg !4568
  %call1 = call %struct.rtx_def* @next_nonnote_insn_bb(%struct.rtx_def* %5), !dbg !4569
  store %struct.rtx_def* %call1, %struct.rtx_def** %tmp, align 8, !dbg !4570
  br label %while.cond, !dbg !4571

while.cond:                                       ; preds = %while.body, %if.end
  %6 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !4572
  %tobool2 = icmp ne %struct.rtx_def* %6, null, !dbg !4572
  br i1 %tobool2, label %land.rhs, label %land.end, !dbg !4573

land.rhs:                                         ; preds = %while.cond
  %7 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !4574
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !4574
  %bf.load = load i32, i32* %8, align 8, !dbg !4574
  %bf.clear = and i32 %bf.load, 65535, !dbg !4574
  %cmp = icmp eq i32 %bf.clear, 11, !dbg !4574
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %9 = phi i1 [ false, %while.cond ], [ %cmp, %land.rhs ], !dbg !4575
  br i1 %9, label %while.body, label %while.end, !dbg !4571

while.body:                                       ; preds = %land.end
  %10 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !4576
  store %struct.rtx_def* %10, %struct.rtx_def** %end, align 8, !dbg !4578
  %11 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8, !dbg !4579
  %call3 = call %struct.rtx_def* @next_nonnote_insn_bb(%struct.rtx_def* %11), !dbg !4580
  store %struct.rtx_def* %call3, %struct.rtx_def** %tmp, align 8, !dbg !4581
  br label %while.cond, !dbg !4571, !llvm.loop !4582

while.end:                                        ; preds = %land.end
  %12 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8, !dbg !4584
  ret %struct.rtx_def* %12, !dbg !4585
}

declare dso_local %struct.rtx_def* @next_nonnote_insn_bb(%struct.rtx_def*) #2

declare dso_local i32 @may_trap_p(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @find_reg_equal_equiv_note(%struct.rtx_def*) #2

declare dso_local zeroext i8 @can_nonlocal_goto(%struct.rtx_def*) #2

declare dso_local zeroext i8 @can_throw_internal(%struct.rtx_def*) #2

declare dso_local void @df_set_bb_dirty(%struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @purge_all_dead_edges() #0 !dbg !4586 {
entry:
  %purged = alloca i32, align 4
  %bb = alloca %struct.basic_block_def*, align 8
  %purged_here = alloca i8, align 1
  call void @llvm.dbg.declare(metadata i32* %purged, metadata !4587, metadata !DIExpression()), !dbg !4588
  store i32 0, i32* %purged, align 4, !dbg !4588
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4589, metadata !DIExpression()), !dbg !4590
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4591
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !4591
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4591
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4591
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !4591
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4591
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 6, !dbg !4591
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !4591
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb, align 8, !dbg !4591
  br label %for.cond, !dbg !4591

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4593
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4593
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !4593
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !4593
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !4593
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 1, !dbg !4593
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !4593
  %cmp = icmp ne %struct.basic_block_def* %4, %7, !dbg !4593
  br i1 %cmp, label %for.body, label %for.end, !dbg !4591

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i8* %purged_here, metadata !4595, metadata !DIExpression()), !dbg !4597
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4598
  %call = call zeroext i8 @purge_dead_edges(%struct.basic_block_def* %8), !dbg !4599
  store i8 %call, i8* %purged_here, align 1, !dbg !4597
  %9 = load i8, i8* %purged_here, align 1, !dbg !4600
  %conv = zext i8 %9 to i32, !dbg !4600
  %10 = load i32, i32* %purged, align 4, !dbg !4601
  %or = or i32 %10, %conv, !dbg !4601
  store i32 %or, i32* %purged, align 4, !dbg !4601
  br label %for.inc, !dbg !4602

for.inc:                                          ; preds = %for.body
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4593
  %next_bb3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 6, !dbg !4593
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb3, align 8, !dbg !4593
  store %struct.basic_block_def* %12, %struct.basic_block_def** %bb, align 8, !dbg !4593
  br label %for.cond, !dbg !4593, !llvm.loop !4603

for.end:                                          ; preds = %for.cond
  %13 = load i32, i32* %purged, align 4, !dbg !4605
  %conv4 = trunc i32 %13 to i8, !dbg !4605
  ret i8 %conv4, !dbg !4606
}

declare dso_local i8* @ggc_alloc_cleared_stat(i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @insert_insn_end_bb_new(%struct.rtx_def* %pat, %struct.basic_block_def* %bb) #0 !dbg !4607 {
entry:
  %pat.addr = alloca %struct.rtx_def*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %new_insn = alloca %struct.rtx_def*, align 8
  %pat_end = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %pat, %struct.rtx_def** %pat.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pat.addr, metadata !4610, metadata !DIExpression()), !dbg !4611
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4612, metadata !DIExpression()), !dbg !4613
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !4614, metadata !DIExpression()), !dbg !4615
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4616
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 7, !dbg !4616
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !4616
  %1 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !4616
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %1, i32 0, i32 1, !dbg !4616
  %2 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !4616
  store %struct.rtx_def* %2, %struct.rtx_def** %insn, align 8, !dbg !4615
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %new_insn, metadata !4617, metadata !DIExpression()), !dbg !4618
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pat_end, metadata !4619, metadata !DIExpression()), !dbg !4620
  %3 = load %struct.rtx_def*, %struct.rtx_def** %pat.addr, align 8, !dbg !4621
  store %struct.rtx_def* %3, %struct.rtx_def** %pat_end, align 8, !dbg !4620
  br label %while.cond, !dbg !4622

while.cond:                                       ; preds = %while.body, %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %pat_end, align 8, !dbg !4623
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !4623
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4623
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !4623
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4623
  %5 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4623
  %cmp = icmp ne %struct.rtx_def* %5, null, !dbg !4624
  br i1 %cmp, label %while.body, label %while.end, !dbg !4622

while.body:                                       ; preds = %while.cond
  %6 = load %struct.rtx_def*, %struct.rtx_def** %pat_end, align 8, !dbg !4625
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !4625
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !4625
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 2, !dbg !4625
  %rt_rtx4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**, !dbg !4625
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx4, align 8, !dbg !4625
  store %struct.rtx_def* %7, %struct.rtx_def** %pat_end, align 8, !dbg !4626
  br label %while.cond, !dbg !4622, !llvm.loop !4627

while.end:                                        ; preds = %while.cond
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4628
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !4628
  %bf.load = load i32, i32* %9, align 8, !dbg !4628
  %bf.clear = and i32 %bf.load, 65535, !dbg !4628
  %cmp5 = icmp eq i32 %bf.clear, 9, !dbg !4628
  br i1 %cmp5, label %if.then, label %lor.lhs.false, !dbg !4630

lor.lhs.false:                                    ; preds = %while.end
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4631
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !4631
  %bf.load6 = load i32, i32* %11, align 8, !dbg !4631
  %bf.clear7 = and i32 %bf.load6, 65535, !dbg !4631
  %cmp8 = icmp eq i32 %bf.clear7, 8, !dbg !4631
  br i1 %cmp8, label %land.lhs.true, label %if.else, !dbg !4632

land.lhs.true:                                    ; preds = %lor.lhs.false
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4633
  %call = call zeroext i8 @single_succ_p(%struct.basic_block_def* %12), !dbg !4634
  %tobool = icmp ne i8 %call, 0, !dbg !4634
  br i1 %tobool, label %lor.lhs.false9, label %if.then, !dbg !4635

lor.lhs.false9:                                   ; preds = %land.lhs.true
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4636
  %call10 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %13), !dbg !4637
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call10, i32 0, i32 7, !dbg !4638
  %14 = load i32, i32* %flags, align 8, !dbg !4638
  %and = and i32 %14, 2, !dbg !4639
  %tobool11 = icmp ne i32 %and, 0, !dbg !4639
  br i1 %tobool11, label %if.then, label %if.else, !dbg !4640

if.then:                                          ; preds = %lor.lhs.false9, %land.lhs.true, %while.end
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4641
  %u12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !4641
  %fld13 = bitcast %union.u* %u12 to [1 x %union.rtunion_def]*, !dbg !4641
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i64 0, i64 5, !dbg !4641
  %rt_rtx15 = bitcast %union.rtunion_def* %arrayidx14 to %struct.rtx_def**, !dbg !4641
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx15, align 8, !dbg !4641
  %17 = bitcast %struct.rtx_def* %16 to i32*, !dbg !4641
  %bf.load16 = load i32, i32* %17, align 8, !dbg !4641
  %bf.clear17 = and i32 %bf.load16, 65535, !dbg !4641
  %cmp18 = icmp eq i32 %bf.clear17, 20, !dbg !4644
  br i1 %cmp18, label %if.then27, label %lor.lhs.false19, !dbg !4645

lor.lhs.false19:                                  ; preds = %if.then
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4646
  %u20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1, !dbg !4646
  %fld21 = bitcast %union.u* %u20 to [1 x %union.rtunion_def]*, !dbg !4646
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i64 0, i64 5, !dbg !4646
  %rt_rtx23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtx_def**, !dbg !4646
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx23, align 8, !dbg !4646
  %20 = bitcast %struct.rtx_def* %19 to i32*, !dbg !4646
  %bf.load24 = load i32, i32* %20, align 8, !dbg !4646
  %bf.clear25 = and i32 %bf.load24, 65535, !dbg !4646
  %cmp26 = icmp eq i32 %bf.clear25, 21, !dbg !4647
  br i1 %cmp26, label %if.then27, label %if.end, !dbg !4648

if.then27:                                        ; preds = %lor.lhs.false19, %if.then
  %21 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4649
  %call28 = call %struct.rtx_def* @prev_real_insn(%struct.rtx_def* %21), !dbg !4650
  store %struct.rtx_def* %call28, %struct.rtx_def** %insn, align 8, !dbg !4651
  br label %if.end, !dbg !4652

if.end:                                           ; preds = %if.then27, %lor.lhs.false19
  %22 = load %struct.rtx_def*, %struct.rtx_def** %pat.addr, align 8, !dbg !4653
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4654
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4655
  %call29 = call %struct.rtx_def* @emit_insn_before_noloc(%struct.rtx_def* %22, %struct.rtx_def* %23, %struct.basic_block_def* %24), !dbg !4656
  store %struct.rtx_def* %call29, %struct.rtx_def** %new_insn, align 8, !dbg !4657
  br label %if.end66, !dbg !4658

if.else:                                          ; preds = %lor.lhs.false9, %lor.lhs.false
  %25 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4659
  %26 = bitcast %struct.rtx_def* %25 to i32*, !dbg !4659
  %bf.load30 = load i32, i32* %26, align 8, !dbg !4659
  %bf.clear31 = and i32 %bf.load30, 65535, !dbg !4659
  %cmp32 = icmp eq i32 %bf.clear31, 10, !dbg !4659
  br i1 %cmp32, label %land.lhs.true33, label %if.else63, !dbg !4661

land.lhs.true33:                                  ; preds = %if.else
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4662
  %call34 = call zeroext i8 @single_succ_p(%struct.basic_block_def* %27), !dbg !4663
  %tobool35 = icmp ne i8 %call34, 0, !dbg !4663
  br i1 %tobool35, label %lor.lhs.false36, label %if.then41, !dbg !4664

lor.lhs.false36:                                  ; preds = %land.lhs.true33
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4665
  %call37 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %28), !dbg !4666
  %flags38 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call37, i32 0, i32 7, !dbg !4667
  %29 = load i32, i32* %flags38, align 8, !dbg !4667
  %and39 = and i32 %29, 2, !dbg !4668
  %tobool40 = icmp ne i32 %and39, 0, !dbg !4668
  br i1 %tobool40, label %if.then41, label %if.else63, !dbg !4669

if.then41:                                        ; preds = %lor.lhs.false36, %land.lhs.true33
  %30 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4670
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4672
  %il42 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %31, i32 0, i32 7, !dbg !4672
  %rtl43 = bitcast %union.basic_block_il_dependent* %il42 to %struct.rtl_bb_info**, !dbg !4672
  %32 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl43, align 8, !dbg !4672
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %32, i32 0, i32 0, !dbg !4672
  %33 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !4672
  %call44 = call %struct.rtx_def* @find_first_parameter_load(%struct.rtx_def* %30, %struct.rtx_def* %33), !dbg !4673
  store %struct.rtx_def* %call44, %struct.rtx_def** %insn, align 8, !dbg !4674
  br label %while.cond45, !dbg !4675

while.cond45:                                     ; preds = %while.body56, %if.then41
  %34 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4676
  %35 = bitcast %struct.rtx_def* %34 to i32*, !dbg !4676
  %bf.load46 = load i32, i32* %35, align 8, !dbg !4676
  %bf.clear47 = and i32 %bf.load46, 65535, !dbg !4676
  %cmp48 = icmp eq i32 %bf.clear47, 12, !dbg !4676
  br i1 %cmp48, label %lor.end, label %lor.rhs, !dbg !4677

lor.rhs:                                          ; preds = %while.cond45
  %36 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4678
  %37 = bitcast %struct.rtx_def* %36 to i32*, !dbg !4678
  %bf.load49 = load i32, i32* %37, align 8, !dbg !4678
  %bf.clear50 = and i32 %bf.load49, 65535, !dbg !4678
  %cmp51 = icmp eq i32 %bf.clear50, 13, !dbg !4678
  br i1 %cmp51, label %land.rhs, label %land.end, !dbg !4678

land.rhs:                                         ; preds = %lor.rhs
  %38 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4678
  %u52 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1, !dbg !4678
  %fld53 = bitcast %union.u* %u52 to [1 x %union.rtunion_def]*, !dbg !4678
  %arrayidx54 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld53, i64 0, i64 5, !dbg !4678
  %rt_int = bitcast %union.rtunion_def* %arrayidx54 to i32*, !dbg !4678
  %39 = load i32, i32* %rt_int, align 8, !dbg !4678
  %cmp55 = icmp eq i32 %39, 10, !dbg !4678
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %40 = phi i1 [ false, %lor.rhs ], [ %cmp55, %land.rhs ], !dbg !4679
  br label %lor.end, !dbg !4677

lor.end:                                          ; preds = %land.end, %while.cond45
  %41 = phi i1 [ true, %while.cond45 ], [ %40, %land.end ]
  br i1 %41, label %while.body56, label %while.end61, !dbg !4675

while.body56:                                     ; preds = %lor.end
  %42 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4680
  %u57 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1, !dbg !4680
  %fld58 = bitcast %union.u* %u57 to [1 x %union.rtunion_def]*, !dbg !4680
  %arrayidx59 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld58, i64 0, i64 2, !dbg !4680
  %rt_rtx60 = bitcast %union.rtunion_def* %arrayidx59 to %struct.rtx_def**, !dbg !4680
  %43 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx60, align 8, !dbg !4680
  store %struct.rtx_def* %43, %struct.rtx_def** %insn, align 8, !dbg !4681
  br label %while.cond45, !dbg !4675, !llvm.loop !4682

while.end61:                                      ; preds = %lor.end
  %44 = load %struct.rtx_def*, %struct.rtx_def** %pat.addr, align 8, !dbg !4683
  %45 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4684
  %46 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4685
  %call62 = call %struct.rtx_def* @emit_insn_before_noloc(%struct.rtx_def* %44, %struct.rtx_def* %45, %struct.basic_block_def* %46), !dbg !4686
  store %struct.rtx_def* %call62, %struct.rtx_def** %new_insn, align 8, !dbg !4687
  br label %if.end65, !dbg !4688

if.else63:                                        ; preds = %lor.lhs.false36, %if.else
  %47 = load %struct.rtx_def*, %struct.rtx_def** %pat.addr, align 8, !dbg !4689
  %48 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4690
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4691
  %call64 = call %struct.rtx_def* @emit_insn_after_noloc(%struct.rtx_def* %47, %struct.rtx_def* %48, %struct.basic_block_def* %49), !dbg !4692
  store %struct.rtx_def* %call64, %struct.rtx_def** %new_insn, align 8, !dbg !4693
  br label %if.end65

if.end65:                                         ; preds = %if.else63, %while.end61
  br label %if.end66

if.end66:                                         ; preds = %if.end65, %if.end
  %50 = load %struct.rtx_def*, %struct.rtx_def** %new_insn, align 8, !dbg !4694
  ret %struct.rtx_def* %50, !dbg !4695
}

declare dso_local %struct.rtx_def* @prev_real_insn(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @find_first_parameter_load(%struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @rtl_verify_flow_info() #0 !dbg !4696 {
entry:
  %bb = alloca %struct.basic_block_def*, align 8
  %err = alloca i32, align 4
  %x = alloca %struct.rtx_def*, align 8
  %last_head = alloca %struct.rtx_def*, align 8
  %bb_info = alloca %struct.basic_block_def**, align 8
  %num_bb_notes = alloca i32, align 4
  %rtx_first = alloca %struct.rtx_def*, align 8
  %last_bb_seen = alloca %struct.basic_block_def*, align 8
  %curr_bb = alloca %struct.basic_block_def*, align 8
  %max_uid = alloca i32, align 4
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %head = alloca %struct.rtx_def*, align 8
  %end = alloca %struct.rtx_def*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %insn149 = alloca %struct.rtx_def*, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4697, metadata !DIExpression()), !dbg !4698
  call void @llvm.dbg.declare(metadata i32* %err, metadata !4699, metadata !DIExpression()), !dbg !4700
  %call = call i32 @rtl_verify_flow_info_1(), !dbg !4701
  store i32 %call, i32* %err, align 4, !dbg !4700
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !4702, metadata !DIExpression()), !dbg !4703
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last_head, metadata !4704, metadata !DIExpression()), !dbg !4705
  %call1 = call %struct.rtx_def* @get_last_insn(), !dbg !4706
  store %struct.rtx_def* %call1, %struct.rtx_def** %last_head, align 8, !dbg !4705
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %bb_info, metadata !4707, metadata !DIExpression()), !dbg !4708
  call void @llvm.dbg.declare(metadata i32* %num_bb_notes, metadata !4709, metadata !DIExpression()), !dbg !4710
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %rtx_first, metadata !4711, metadata !DIExpression()), !dbg !4713
  %call2 = call %struct.rtx_def* @get_insns(), !dbg !4714
  store %struct.rtx_def* %call2, %struct.rtx_def** %rtx_first, align 8, !dbg !4713
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %last_bb_seen, metadata !4715, metadata !DIExpression()), !dbg !4716
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4717
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !4717
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4717
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4717
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !4717
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4717
  store %struct.basic_block_def* %2, %struct.basic_block_def** %last_bb_seen, align 8, !dbg !4716
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %curr_bb, metadata !4718, metadata !DIExpression()), !dbg !4719
  store %struct.basic_block_def* null, %struct.basic_block_def** %curr_bb, align 8, !dbg !4719
  call void @llvm.dbg.declare(metadata i32* %max_uid, metadata !4720, metadata !DIExpression()), !dbg !4722
  %call3 = call i32 @get_max_uid(), !dbg !4723
  store i32 %call3, i32* %max_uid, align 4, !dbg !4722
  %3 = load i32, i32* %max_uid, align 4, !dbg !4724
  %conv = sext i32 %3 to i64, !dbg !4724
  %call4 = call i8* @xcalloc(i64 %conv, i64 8), !dbg !4724
  %4 = bitcast i8* %call4 to %struct.basic_block_def**, !dbg !4724
  store %struct.basic_block_def** %4, %struct.basic_block_def*** %bb_info, align 8, !dbg !4725
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4726
  %add.ptr5 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !4726
  %cfg6 = getelementptr inbounds %struct.function, %struct.function* %add.ptr5, i32 0, i32 1, !dbg !4726
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg6, align 8, !dbg !4726
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 1, !dbg !4726
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !4726
  %prev_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 5, !dbg !4726
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb, align 8, !dbg !4726
  store %struct.basic_block_def* %8, %struct.basic_block_def** %bb, align 8, !dbg !4726
  br label %for.cond, !dbg !4726

for.cond:                                         ; preds = %for.inc215, %entry
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4728
  %10 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4728
  %add.ptr7 = getelementptr inbounds %struct.function, %struct.function* %10, i64 0, !dbg !4728
  %cfg8 = getelementptr inbounds %struct.function, %struct.function* %add.ptr7, i32 0, i32 1, !dbg !4728
  %11 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg8, align 8, !dbg !4728
  %x_entry_block_ptr9 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %11, i32 0, i32 0, !dbg !4728
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr9, align 8, !dbg !4728
  %cmp = icmp ne %struct.basic_block_def* %9, %12, !dbg !4728
  br i1 %cmp, label %for.body, label %for.end217, !dbg !4726

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !4730, metadata !DIExpression()), !dbg !4732
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !4733, metadata !DIExpression()), !dbg !4734
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %head, metadata !4735, metadata !DIExpression()), !dbg !4736
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4737
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 7, !dbg !4737
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !4737
  %14 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !4737
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %14, i32 0, i32 0, !dbg !4737
  %15 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !4737
  store %struct.rtx_def* %15, %struct.rtx_def** %head, align 8, !dbg !4736
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %end, metadata !4738, metadata !DIExpression()), !dbg !4739
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4740
  %il11 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i32 0, i32 7, !dbg !4740
  %rtl12 = bitcast %union.basic_block_il_dependent* %il11 to %struct.rtl_bb_info**, !dbg !4740
  %17 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl12, align 8, !dbg !4740
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %17, i32 0, i32 1, !dbg !4740
  %18 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !4740
  store %struct.rtx_def* %18, %struct.rtx_def** %end, align 8, !dbg !4739
  %19 = load %struct.rtx_def*, %struct.rtx_def** %last_head, align 8, !dbg !4741
  store %struct.rtx_def* %19, %struct.rtx_def** %x, align 8, !dbg !4743
  br label %for.cond13, !dbg !4744

for.cond13:                                       ; preds = %for.inc, %for.body
  %20 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4745
  %cmp14 = icmp ne %struct.rtx_def* %20, null, !dbg !4747
  br i1 %cmp14, label %for.body16, label %for.end, !dbg !4748

for.body16:                                       ; preds = %for.cond13
  %21 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4749
  %22 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8, !dbg !4752
  %cmp17 = icmp eq %struct.rtx_def* %21, %22, !dbg !4753
  br i1 %cmp17, label %if.then, label %if.end, !dbg !4754

if.then:                                          ; preds = %for.body16
  br label %for.end, !dbg !4755

if.end:                                           ; preds = %for.body16
  %23 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4756
  %24 = bitcast %struct.rtx_def* %23 to i32*, !dbg !4756
  %bf.load = load i32, i32* %24, align 8, !dbg !4756
  %bf.clear = and i32 %bf.load, 65535, !dbg !4756
  %cmp19 = icmp eq i32 %bf.clear, 11, !dbg !4756
  br i1 %cmp19, label %if.end27, label %land.lhs.true, !dbg !4758

land.lhs.true:                                    ; preds = %if.end
  %25 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4759
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1, !dbg !4759
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4759
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !4759
  %rt_bb = bitcast %union.rtunion_def* %arrayidx to %struct.basic_block_def**, !dbg !4759
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !4759
  %cmp21 = icmp ne %struct.basic_block_def* %26, null, !dbg !4760
  br i1 %cmp21, label %if.then23, label %if.end27, !dbg !4761

if.then23:                                        ; preds = %land.lhs.true
  %27 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4762
  %u24 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1, !dbg !4762
  %fld25 = bitcast %union.u* %u24 to [1 x %union.rtunion_def]*, !dbg !4762
  %arrayidx26 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld25, i64 0, i64 0, !dbg !4762
  %rt_int = bitcast %union.rtunion_def* %arrayidx26 to i32*, !dbg !4762
  %28 = load i32, i32* %rt_int, align 8, !dbg !4762
  call void (i8*, ...) @error(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.22, i64 0, i64 0), i32 %28), !dbg !4764
  store i32 1, i32* %err, align 4, !dbg !4765
  br label %if.end27, !dbg !4766

if.end27:                                         ; preds = %if.then23, %land.lhs.true, %if.end
  br label %for.inc, !dbg !4767

for.inc:                                          ; preds = %if.end27
  %29 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4768
  %u28 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1, !dbg !4768
  %fld29 = bitcast %union.u* %u28 to [1 x %union.rtunion_def]*, !dbg !4768
  %arrayidx30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld29, i64 0, i64 1, !dbg !4768
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx30 to %struct.rtx_def**, !dbg !4768
  %30 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4768
  store %struct.rtx_def* %30, %struct.rtx_def** %x, align 8, !dbg !4769
  br label %for.cond13, !dbg !4770, !llvm.loop !4771

for.end:                                          ; preds = %if.then, %for.cond13
  %31 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4773
  %tobool = icmp ne %struct.rtx_def* %31, null, !dbg !4773
  br i1 %tobool, label %if.end36, label %if.then31, !dbg !4775

if.then31:                                        ; preds = %for.end
  %32 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8, !dbg !4776
  %u32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1, !dbg !4776
  %fld33 = bitcast %union.u* %u32 to [1 x %union.rtunion_def]*, !dbg !4776
  %arrayidx34 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld33, i64 0, i64 0, !dbg !4776
  %rt_int35 = bitcast %union.rtunion_def* %arrayidx34 to i32*, !dbg !4776
  %33 = load i32, i32* %rt_int35, align 8, !dbg !4776
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4778
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %34, i32 0, i32 9, !dbg !4779
  %35 = load i32, i32* %index, align 8, !dbg !4779
  call void (i8*, ...) @error(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.23, i64 0, i64 0), i32 %33, i32 %35), !dbg !4780
  store i32 1, i32* %err, align 4, !dbg !4781
  br label %if.end36, !dbg !4782

if.end36:                                         ; preds = %if.then31, %for.end
  br label %for.cond37, !dbg !4783

for.cond37:                                       ; preds = %for.inc72, %if.end36
  %36 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4784
  %cmp38 = icmp ne %struct.rtx_def* %36, null, !dbg !4787
  br i1 %cmp38, label %for.body40, label %for.end77, !dbg !4788

for.body40:                                       ; preds = %for.cond37
  %37 = load %struct.basic_block_def**, %struct.basic_block_def*** %bb_info, align 8, !dbg !4789
  %38 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4792
  %u41 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1, !dbg !4792
  %fld42 = bitcast %union.u* %u41 to [1 x %union.rtunion_def]*, !dbg !4792
  %arrayidx43 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld42, i64 0, i64 0, !dbg !4792
  %rt_int44 = bitcast %union.rtunion_def* %arrayidx43 to i32*, !dbg !4792
  %39 = load i32, i32* %rt_int44, align 8, !dbg !4792
  %idxprom = sext i32 %39 to i64, !dbg !4789
  %arrayidx45 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %37, i64 %idxprom, !dbg !4789
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx45, align 8, !dbg !4789
  %cmp46 = icmp ne %struct.basic_block_def* %40, null, !dbg !4793
  br i1 %cmp46, label %if.then48, label %if.end61, !dbg !4794

if.then48:                                        ; preds = %for.body40
  %41 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4795
  %u49 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1, !dbg !4795
  %fld50 = bitcast %union.u* %u49 to [1 x %union.rtunion_def]*, !dbg !4795
  %arrayidx51 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld50, i64 0, i64 0, !dbg !4795
  %rt_int52 = bitcast %union.rtunion_def* %arrayidx51 to i32*, !dbg !4795
  %42 = load i32, i32* %rt_int52, align 8, !dbg !4795
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4797
  %index53 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %43, i32 0, i32 9, !dbg !4798
  %44 = load i32, i32* %index53, align 8, !dbg !4798
  %45 = load %struct.basic_block_def**, %struct.basic_block_def*** %bb_info, align 8, !dbg !4799
  %46 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4800
  %u54 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %46, i32 0, i32 1, !dbg !4800
  %fld55 = bitcast %union.u* %u54 to [1 x %union.rtunion_def]*, !dbg !4800
  %arrayidx56 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld55, i64 0, i64 0, !dbg !4800
  %rt_int57 = bitcast %union.rtunion_def* %arrayidx56 to i32*, !dbg !4800
  %47 = load i32, i32* %rt_int57, align 8, !dbg !4800
  %idxprom58 = sext i32 %47 to i64, !dbg !4799
  %arrayidx59 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %45, i64 %idxprom58, !dbg !4799
  %48 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx59, align 8, !dbg !4799
  %index60 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %48, i32 0, i32 9, !dbg !4801
  %49 = load i32, i32* %index60, align 8, !dbg !4801
  call void (i8*, ...) @error(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.24, i64 0, i64 0), i32 %42, i32 %44, i32 %49), !dbg !4802
  store i32 1, i32* %err, align 4, !dbg !4803
  br label %if.end61, !dbg !4804

if.end61:                                         ; preds = %if.then48, %for.body40
  %50 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4805
  %51 = load %struct.basic_block_def**, %struct.basic_block_def*** %bb_info, align 8, !dbg !4806
  %52 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4807
  %u62 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %52, i32 0, i32 1, !dbg !4807
  %fld63 = bitcast %union.u* %u62 to [1 x %union.rtunion_def]*, !dbg !4807
  %arrayidx64 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld63, i64 0, i64 0, !dbg !4807
  %rt_int65 = bitcast %union.rtunion_def* %arrayidx64 to i32*, !dbg !4807
  %53 = load i32, i32* %rt_int65, align 8, !dbg !4807
  %idxprom66 = sext i32 %53 to i64, !dbg !4806
  %arrayidx67 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %51, i64 %idxprom66, !dbg !4806
  store %struct.basic_block_def* %50, %struct.basic_block_def** %arrayidx67, align 8, !dbg !4808
  %54 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4809
  %55 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !4811
  %cmp68 = icmp eq %struct.rtx_def* %54, %55, !dbg !4812
  br i1 %cmp68, label %if.then70, label %if.end71, !dbg !4813

if.then70:                                        ; preds = %if.end61
  br label %for.end77, !dbg !4814

if.end71:                                         ; preds = %if.end61
  br label %for.inc72, !dbg !4815

for.inc72:                                        ; preds = %if.end71
  %56 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4816
  %u73 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %56, i32 0, i32 1, !dbg !4816
  %fld74 = bitcast %union.u* %u73 to [1 x %union.rtunion_def]*, !dbg !4816
  %arrayidx75 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld74, i64 0, i64 1, !dbg !4816
  %rt_rtx76 = bitcast %union.rtunion_def* %arrayidx75 to %struct.rtx_def**, !dbg !4816
  %57 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx76, align 8, !dbg !4816
  store %struct.rtx_def* %57, %struct.rtx_def** %x, align 8, !dbg !4817
  br label %for.cond37, !dbg !4818, !llvm.loop !4819

for.end77:                                        ; preds = %if.then70, %for.cond37
  %58 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4821
  %tobool78 = icmp ne %struct.rtx_def* %58, null, !dbg !4821
  br i1 %tobool78, label %if.end85, label %if.then79, !dbg !4823

if.then79:                                        ; preds = %for.end77
  %59 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !4824
  %u80 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %59, i32 0, i32 1, !dbg !4824
  %fld81 = bitcast %union.u* %u80 to [1 x %union.rtunion_def]*, !dbg !4824
  %arrayidx82 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld81, i64 0, i64 0, !dbg !4824
  %rt_int83 = bitcast %union.rtunion_def* %arrayidx82 to i32*, !dbg !4824
  %60 = load i32, i32* %rt_int83, align 8, !dbg !4824
  %61 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4826
  %index84 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %61, i32 0, i32 9, !dbg !4827
  %62 = load i32, i32* %index84, align 8, !dbg !4827
  call void (i8*, ...) @error(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.25, i64 0, i64 0), i32 %60, i32 %62), !dbg !4828
  store i32 1, i32* %err, align 4, !dbg !4829
  br label %if.end85, !dbg !4830

if.end85:                                         ; preds = %if.then79, %for.end77
  %63 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4831
  %u86 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %63, i32 0, i32 1, !dbg !4831
  %fld87 = bitcast %union.u* %u86 to [1 x %union.rtunion_def]*, !dbg !4831
  %arrayidx88 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld87, i64 0, i64 1, !dbg !4831
  %rt_rtx89 = bitcast %union.rtunion_def* %arrayidx88 to %struct.rtx_def**, !dbg !4831
  %64 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx89, align 8, !dbg !4831
  store %struct.rtx_def* %64, %struct.rtx_def** %last_head, align 8, !dbg !4832
  %65 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4833
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %65, i32 0, i32 1, !dbg !4833
  %call90 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !4833
  %66 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !4833
  %67 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %66, i32 0, i32 0, !dbg !4833
  %68 = extractvalue { i32, %struct.VEC_edge_gc** } %call90, 0, !dbg !4833
  store i32 %68, i32* %67, align 8, !dbg !4833
  %69 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %66, i32 0, i32 1, !dbg !4833
  %70 = extractvalue { i32, %struct.VEC_edge_gc** } %call90, 1, !dbg !4833
  store %struct.VEC_edge_gc** %70, %struct.VEC_edge_gc*** %69, align 8, !dbg !4833
  %71 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !4833
  %72 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !4833
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %71, i8* align 8 %72, i64 16, i1 false), !dbg !4833
  br label %for.cond91, !dbg !4833

for.cond91:                                       ; preds = %for.inc98, %if.end85
  %73 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !4835
  %74 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %73, i32 0, i32 0, !dbg !4835
  %75 = load i32, i32* %74, align 8, !dbg !4835
  %76 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %73, i32 0, i32 1, !dbg !4835
  %77 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %76, align 8, !dbg !4835
  %call92 = call zeroext i8 @ei_cond(i32 %75, %struct.VEC_edge_gc** %77, %struct.edge_def** %e), !dbg !4835
  %tobool93 = icmp ne i8 %call92, 0, !dbg !4833
  br i1 %tobool93, label %for.body94, label %for.end99, !dbg !4833

for.body94:                                       ; preds = %for.cond91
  %78 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4837
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %78, i32 0, i32 7, !dbg !4839
  %79 = load i32, i32* %flags, align 8, !dbg !4839
  %and = and i32 %79, 1, !dbg !4840
  %tobool95 = icmp ne i32 %and, 0, !dbg !4840
  br i1 %tobool95, label %if.then96, label %if.end97, !dbg !4841

if.then96:                                        ; preds = %for.body94
  br label %for.end99, !dbg !4842

if.end97:                                         ; preds = %for.body94
  br label %for.inc98, !dbg !4843

for.inc98:                                        ; preds = %if.end97
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !4835
  br label %for.cond91, !dbg !4835, !llvm.loop !4844

for.end99:                                        ; preds = %if.then96, %for.cond91
  %80 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4846
  %tobool100 = icmp ne %struct.edge_def* %80, null, !dbg !4846
  br i1 %tobool100, label %if.else, label %if.then101, !dbg !4848

if.then101:                                       ; preds = %for.end99
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !4849, metadata !DIExpression()), !dbg !4851
  %81 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4852
  %il102 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %81, i32 0, i32 7, !dbg !4852
  %rtl103 = bitcast %union.basic_block_il_dependent* %il102 to %struct.rtl_bb_info**, !dbg !4852
  %82 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl103, align 8, !dbg !4852
  %end_104 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %82, i32 0, i32 1, !dbg !4852
  %83 = load %struct.rtx_def*, %struct.rtx_def** %end_104, align 8, !dbg !4852
  %u105 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %83, i32 0, i32 1, !dbg !4852
  %fld106 = bitcast %union.u* %u105 to [1 x %union.rtunion_def]*, !dbg !4852
  %arrayidx107 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld106, i64 0, i64 2, !dbg !4852
  %rt_rtx108 = bitcast %union.rtunion_def* %arrayidx107 to %struct.rtx_def**, !dbg !4852
  %84 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx108, align 8, !dbg !4852
  store %struct.rtx_def* %84, %struct.rtx_def** %insn, align 8, !dbg !4854
  br label %for.cond109, !dbg !4855

for.cond109:                                      ; preds = %for.inc131, %if.then101
  %85 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4856
  %tobool110 = icmp ne %struct.rtx_def* %85, null, !dbg !4856
  br i1 %tobool110, label %lor.lhs.false, label %if.then122, !dbg !4860

lor.lhs.false:                                    ; preds = %for.cond109
  %86 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4861
  %87 = bitcast %struct.rtx_def* %86 to i32*, !dbg !4861
  %bf.load111 = load i32, i32* %87, align 8, !dbg !4861
  %bf.clear112 = and i32 %bf.load111, 65535, !dbg !4861
  %cmp113 = icmp eq i32 %bf.clear112, 13, !dbg !4861
  br i1 %cmp113, label %land.lhs.true115, label %if.end124, !dbg !4861

land.lhs.true115:                                 ; preds = %lor.lhs.false
  %88 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4861
  %u116 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %88, i32 0, i32 1, !dbg !4861
  %fld117 = bitcast %union.u* %u116 to [1 x %union.rtunion_def]*, !dbg !4861
  %arrayidx118 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld117, i64 0, i64 5, !dbg !4861
  %rt_int119 = bitcast %union.rtunion_def* %arrayidx118 to i32*, !dbg !4861
  %89 = load i32, i32* %rt_int119, align 8, !dbg !4861
  %cmp120 = icmp eq i32 %89, 10, !dbg !4861
  br i1 %cmp120, label %if.then122, label %if.end124, !dbg !4862

if.then122:                                       ; preds = %land.lhs.true115, %for.cond109
  %90 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4863
  %index123 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %90, i32 0, i32 9, !dbg !4865
  %91 = load i32, i32* %index123, align 8, !dbg !4865
  call void (i8*, ...) @error(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.26, i64 0, i64 0), i32 %91), !dbg !4866
  store i32 1, i32* %err, align 4, !dbg !4867
  br label %for.end136, !dbg !4868

if.end124:                                        ; preds = %land.lhs.true115, %lor.lhs.false
  %92 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4869
  %93 = bitcast %struct.rtx_def* %92 to i32*, !dbg !4869
  %bf.load125 = load i32, i32* %93, align 8, !dbg !4869
  %bf.clear126 = and i32 %bf.load125, 65535, !dbg !4869
  %cmp127 = icmp eq i32 %bf.clear126, 11, !dbg !4869
  br i1 %cmp127, label %if.then129, label %if.end130, !dbg !4871

if.then129:                                       ; preds = %if.end124
  br label %for.end136, !dbg !4872

if.end130:                                        ; preds = %if.end124
  br label %for.inc131, !dbg !4873

for.inc131:                                       ; preds = %if.end130
  %94 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4874
  %u132 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %94, i32 0, i32 1, !dbg !4874
  %fld133 = bitcast %union.u* %u132 to [1 x %union.rtunion_def]*, !dbg !4874
  %arrayidx134 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld133, i64 0, i64 2, !dbg !4874
  %rt_rtx135 = bitcast %union.rtunion_def* %arrayidx134 to %struct.rtx_def**, !dbg !4874
  %95 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx135, align 8, !dbg !4874
  store %struct.rtx_def* %95, %struct.rtx_def** %insn, align 8, !dbg !4875
  br label %for.cond109, !dbg !4876, !llvm.loop !4877

for.end136:                                       ; preds = %if.then129, %if.then122
  br label %if.end214, !dbg !4880

if.else:                                          ; preds = %for.end99
  %96 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4881
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %96, i32 0, i32 0, !dbg !4883
  %97 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !4883
  %98 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4884
  %add.ptr137 = getelementptr inbounds %struct.function, %struct.function* %98, i64 0, !dbg !4884
  %cfg138 = getelementptr inbounds %struct.function, %struct.function* %add.ptr137, i32 0, i32 1, !dbg !4884
  %99 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg138, align 8, !dbg !4884
  %x_entry_block_ptr139 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %99, i32 0, i32 0, !dbg !4884
  %100 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr139, align 8, !dbg !4884
  %cmp140 = icmp ne %struct.basic_block_def* %97, %100, !dbg !4885
  br i1 %cmp140, label %land.lhs.true142, label %if.end213, !dbg !4886

land.lhs.true142:                                 ; preds = %if.else
  %101 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4887
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %101, i32 0, i32 1, !dbg !4888
  %102 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !4888
  %103 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4889
  %add.ptr143 = getelementptr inbounds %struct.function, %struct.function* %103, i64 0, !dbg !4889
  %cfg144 = getelementptr inbounds %struct.function, %struct.function* %add.ptr143, i32 0, i32 1, !dbg !4889
  %104 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg144, align 8, !dbg !4889
  %x_exit_block_ptr145 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %104, i32 0, i32 1, !dbg !4889
  %105 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr145, align 8, !dbg !4889
  %cmp146 = icmp ne %struct.basic_block_def* %102, %105, !dbg !4890
  br i1 %cmp146, label %if.then148, label %if.end213, !dbg !4891

if.then148:                                       ; preds = %land.lhs.true142
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn149, metadata !4892, metadata !DIExpression()), !dbg !4894
  %106 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4895
  %src150 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %106, i32 0, i32 0, !dbg !4897
  %107 = load %struct.basic_block_def*, %struct.basic_block_def** %src150, align 8, !dbg !4897
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %107, i32 0, i32 6, !dbg !4898
  %108 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !4898
  %109 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4899
  %dest151 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %109, i32 0, i32 1, !dbg !4900
  %110 = load %struct.basic_block_def*, %struct.basic_block_def** %dest151, align 8, !dbg !4900
  %cmp152 = icmp ne %struct.basic_block_def* %108, %110, !dbg !4901
  br i1 %cmp152, label %if.then154, label %if.else159, !dbg !4902

if.then154:                                       ; preds = %if.then148
  %111 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4903
  %src155 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %111, i32 0, i32 0, !dbg !4905
  %112 = load %struct.basic_block_def*, %struct.basic_block_def** %src155, align 8, !dbg !4905
  %index156 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %112, i32 0, i32 9, !dbg !4906
  %113 = load i32, i32* %index156, align 8, !dbg !4906
  %114 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4907
  %dest157 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %114, i32 0, i32 1, !dbg !4908
  %115 = load %struct.basic_block_def*, %struct.basic_block_def** %dest157, align 8, !dbg !4908
  %index158 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %115, i32 0, i32 9, !dbg !4909
  %116 = load i32, i32* %index158, align 8, !dbg !4909
  call void (i8*, ...) @error(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.27, i64 0, i64 0), i32 %113, i32 %116), !dbg !4910
  store i32 1, i32* %err, align 4, !dbg !4911
  br label %if.end212, !dbg !4912

if.else159:                                       ; preds = %if.then148
  %117 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4913
  %src160 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %117, i32 0, i32 0, !dbg !4913
  %118 = load %struct.basic_block_def*, %struct.basic_block_def** %src160, align 8, !dbg !4913
  %il161 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %118, i32 0, i32 7, !dbg !4913
  %rtl162 = bitcast %union.basic_block_il_dependent* %il161 to %struct.rtl_bb_info**, !dbg !4913
  %119 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl162, align 8, !dbg !4913
  %end_163 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %119, i32 0, i32 1, !dbg !4913
  %120 = load %struct.rtx_def*, %struct.rtx_def** %end_163, align 8, !dbg !4913
  %u164 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %120, i32 0, i32 1, !dbg !4913
  %fld165 = bitcast %union.u* %u164 to [1 x %union.rtunion_def]*, !dbg !4913
  %arrayidx166 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld165, i64 0, i64 2, !dbg !4913
  %rt_rtx167 = bitcast %union.rtunion_def* %arrayidx166 to %struct.rtx_def**, !dbg !4913
  %121 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx167, align 8, !dbg !4913
  store %struct.rtx_def* %121, %struct.rtx_def** %insn149, align 8, !dbg !4915
  br label %for.cond168, !dbg !4916

for.cond168:                                      ; preds = %for.inc206, %if.else159
  %122 = load %struct.rtx_def*, %struct.rtx_def** %insn149, align 8, !dbg !4917
  %123 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4919
  %dest169 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %123, i32 0, i32 1, !dbg !4919
  %124 = load %struct.basic_block_def*, %struct.basic_block_def** %dest169, align 8, !dbg !4919
  %il170 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %124, i32 0, i32 7, !dbg !4919
  %rtl171 = bitcast %union.basic_block_il_dependent* %il170 to %struct.rtl_bb_info**, !dbg !4919
  %125 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl171, align 8, !dbg !4919
  %head_172 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %125, i32 0, i32 0, !dbg !4919
  %126 = load %struct.rtx_def*, %struct.rtx_def** %head_172, align 8, !dbg !4919
  %cmp173 = icmp ne %struct.rtx_def* %122, %126, !dbg !4920
  br i1 %cmp173, label %for.body175, label %for.end211, !dbg !4921

for.body175:                                      ; preds = %for.cond168
  %127 = load %struct.rtx_def*, %struct.rtx_def** %insn149, align 8, !dbg !4922
  %128 = bitcast %struct.rtx_def* %127 to i32*, !dbg !4922
  %bf.load176 = load i32, i32* %128, align 8, !dbg !4922
  %bf.clear177 = and i32 %bf.load176, 65535, !dbg !4922
  %cmp178 = icmp eq i32 %bf.clear177, 11, !dbg !4922
  br i1 %cmp178, label %if.then200, label %lor.lhs.false180, !dbg !4924

lor.lhs.false180:                                 ; preds = %for.body175
  %129 = load %struct.rtx_def*, %struct.rtx_def** %insn149, align 8, !dbg !4925
  %130 = bitcast %struct.rtx_def* %129 to i32*, !dbg !4925
  %bf.load181 = load i32, i32* %130, align 8, !dbg !4925
  %bf.clear182 = and i32 %bf.load181, 65535, !dbg !4925
  %cmp183 = icmp eq i32 %bf.clear182, 8, !dbg !4925
  br i1 %cmp183, label %if.then200, label %lor.lhs.false185, !dbg !4925

lor.lhs.false185:                                 ; preds = %lor.lhs.false180
  %131 = load %struct.rtx_def*, %struct.rtx_def** %insn149, align 8, !dbg !4925
  %132 = bitcast %struct.rtx_def* %131 to i32*, !dbg !4925
  %bf.load186 = load i32, i32* %132, align 8, !dbg !4925
  %bf.clear187 = and i32 %bf.load186, 65535, !dbg !4925
  %cmp188 = icmp eq i32 %bf.clear187, 7, !dbg !4925
  br i1 %cmp188, label %if.then200, label %lor.lhs.false190, !dbg !4925

lor.lhs.false190:                                 ; preds = %lor.lhs.false185
  %133 = load %struct.rtx_def*, %struct.rtx_def** %insn149, align 8, !dbg !4925
  %134 = bitcast %struct.rtx_def* %133 to i32*, !dbg !4925
  %bf.load191 = load i32, i32* %134, align 8, !dbg !4925
  %bf.clear192 = and i32 %bf.load191, 65535, !dbg !4925
  %cmp193 = icmp eq i32 %bf.clear192, 9, !dbg !4925
  br i1 %cmp193, label %if.then200, label %lor.lhs.false195, !dbg !4925

lor.lhs.false195:                                 ; preds = %lor.lhs.false190
  %135 = load %struct.rtx_def*, %struct.rtx_def** %insn149, align 8, !dbg !4925
  %136 = bitcast %struct.rtx_def* %135 to i32*, !dbg !4925
  %bf.load196 = load i32, i32* %136, align 8, !dbg !4925
  %bf.clear197 = and i32 %bf.load196, 65535, !dbg !4925
  %cmp198 = icmp eq i32 %bf.clear197, 10, !dbg !4925
  br i1 %cmp198, label %if.then200, label %if.end205, !dbg !4926

if.then200:                                       ; preds = %lor.lhs.false195, %lor.lhs.false190, %lor.lhs.false185, %lor.lhs.false180, %for.body175
  %137 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4927
  %src201 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %137, i32 0, i32 0, !dbg !4929
  %138 = load %struct.basic_block_def*, %struct.basic_block_def** %src201, align 8, !dbg !4929
  %index202 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %138, i32 0, i32 9, !dbg !4930
  %139 = load i32, i32* %index202, align 8, !dbg !4930
  %140 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4931
  %dest203 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %140, i32 0, i32 1, !dbg !4932
  %141 = load %struct.basic_block_def*, %struct.basic_block_def** %dest203, align 8, !dbg !4932
  %index204 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %141, i32 0, i32 9, !dbg !4933
  %142 = load i32, i32* %index204, align 8, !dbg !4933
  call void (i8*, ...) @error(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.28, i64 0, i64 0), i32 %139, i32 %142), !dbg !4934
  %143 = load %struct.rtx_def*, %struct.rtx_def** %insn149, align 8, !dbg !4935
  call void @_fatal_insn(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.29, i64 0, i64 0), %struct.rtx_def* %143, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 2144, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4935
  store i32 1, i32* %err, align 4, !dbg !4936
  br label %if.end205, !dbg !4937

if.end205:                                        ; preds = %if.then200, %lor.lhs.false195
  br label %for.inc206, !dbg !4925

for.inc206:                                       ; preds = %if.end205
  %144 = load %struct.rtx_def*, %struct.rtx_def** %insn149, align 8, !dbg !4938
  %u207 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %144, i32 0, i32 1, !dbg !4938
  %fld208 = bitcast %union.u* %u207 to [1 x %union.rtunion_def]*, !dbg !4938
  %arrayidx209 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld208, i64 0, i64 2, !dbg !4938
  %rt_rtx210 = bitcast %union.rtunion_def* %arrayidx209 to %struct.rtx_def**, !dbg !4938
  %145 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx210, align 8, !dbg !4938
  store %struct.rtx_def* %145, %struct.rtx_def** %insn149, align 8, !dbg !4939
  br label %for.cond168, !dbg !4940, !llvm.loop !4941

for.end211:                                       ; preds = %for.cond168
  br label %if.end212

if.end212:                                        ; preds = %for.end211, %if.then154
  br label %if.end213, !dbg !4943

if.end213:                                        ; preds = %if.end212, %land.lhs.true142, %if.else
  br label %if.end214

if.end214:                                        ; preds = %if.end213, %for.end136
  br label %for.inc215, !dbg !4944

for.inc215:                                       ; preds = %if.end214
  %146 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4728
  %prev_bb216 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %146, i32 0, i32 5, !dbg !4728
  %147 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb216, align 8, !dbg !4728
  store %struct.basic_block_def* %147, %struct.basic_block_def** %bb, align 8, !dbg !4728
  br label %for.cond, !dbg !4728, !llvm.loop !4945

for.end217:                                       ; preds = %for.cond
  %148 = load %struct.rtx_def*, %struct.rtx_def** %last_head, align 8, !dbg !4947
  store %struct.rtx_def* %148, %struct.rtx_def** %x, align 8, !dbg !4949
  br label %for.cond218, !dbg !4950

for.cond218:                                      ; preds = %for.inc239, %for.end217
  %149 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4951
  %cmp219 = icmp ne %struct.rtx_def* %149, null, !dbg !4953
  br i1 %cmp219, label %for.body221, label %for.end244, !dbg !4954

for.body221:                                      ; preds = %for.cond218
  %150 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4955
  %151 = bitcast %struct.rtx_def* %150 to i32*, !dbg !4955
  %bf.load222 = load i32, i32* %151, align 8, !dbg !4955
  %bf.clear223 = and i32 %bf.load222, 65535, !dbg !4955
  %cmp224 = icmp eq i32 %bf.clear223, 11, !dbg !4955
  br i1 %cmp224, label %if.end238, label %land.lhs.true226, !dbg !4958

land.lhs.true226:                                 ; preds = %for.body221
  %152 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4959
  %u227 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %152, i32 0, i32 1, !dbg !4959
  %fld228 = bitcast %union.u* %u227 to [1 x %union.rtunion_def]*, !dbg !4959
  %arrayidx229 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld228, i64 0, i64 3, !dbg !4959
  %rt_bb230 = bitcast %union.rtunion_def* %arrayidx229 to %struct.basic_block_def**, !dbg !4959
  %153 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb230, align 8, !dbg !4959
  %cmp231 = icmp ne %struct.basic_block_def* %153, null, !dbg !4960
  br i1 %cmp231, label %if.then233, label %if.end238, !dbg !4961

if.then233:                                       ; preds = %land.lhs.true226
  %154 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4962
  %u234 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %154, i32 0, i32 1, !dbg !4962
  %fld235 = bitcast %union.u* %u234 to [1 x %union.rtunion_def]*, !dbg !4962
  %arrayidx236 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld235, i64 0, i64 0, !dbg !4962
  %rt_int237 = bitcast %union.rtunion_def* %arrayidx236 to i32*, !dbg !4962
  %155 = load i32, i32* %rt_int237, align 8, !dbg !4962
  call void (i8*, ...) @error(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.22, i64 0, i64 0), i32 %155), !dbg !4964
  store i32 1, i32* %err, align 4, !dbg !4965
  br label %if.end238, !dbg !4966

if.end238:                                        ; preds = %if.then233, %land.lhs.true226, %for.body221
  br label %for.inc239, !dbg !4967

for.inc239:                                       ; preds = %if.end238
  %156 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4968
  %u240 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %156, i32 0, i32 1, !dbg !4968
  %fld241 = bitcast %union.u* %u240 to [1 x %union.rtunion_def]*, !dbg !4968
  %arrayidx242 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld241, i64 0, i64 1, !dbg !4968
  %rt_rtx243 = bitcast %union.rtunion_def* %arrayidx242 to %struct.rtx_def**, !dbg !4968
  %157 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx243, align 8, !dbg !4968
  store %struct.rtx_def* %157, %struct.rtx_def** %x, align 8, !dbg !4969
  br label %for.cond218, !dbg !4970, !llvm.loop !4971

for.end244:                                       ; preds = %for.cond218
  %158 = load %struct.basic_block_def**, %struct.basic_block_def*** %bb_info, align 8, !dbg !4973
  %159 = bitcast %struct.basic_block_def** %158 to i8*, !dbg !4973
  call void @free(i8* %159), !dbg !4974
  store i32 0, i32* %num_bb_notes, align 4, !dbg !4975
  %160 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4976
  %add.ptr245 = getelementptr inbounds %struct.function, %struct.function* %160, i64 0, !dbg !4976
  %cfg246 = getelementptr inbounds %struct.function, %struct.function* %add.ptr245, i32 0, i32 1, !dbg !4976
  %161 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg246, align 8, !dbg !4976
  %x_entry_block_ptr247 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %161, i32 0, i32 0, !dbg !4976
  %162 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr247, align 8, !dbg !4976
  store %struct.basic_block_def* %162, %struct.basic_block_def** %last_bb_seen, align 8, !dbg !4977
  %163 = load %struct.rtx_def*, %struct.rtx_def** %rtx_first, align 8, !dbg !4978
  store %struct.rtx_def* %163, %struct.rtx_def** %x, align 8, !dbg !4980
  br label %for.cond248, !dbg !4981

for.cond248:                                      ; preds = %for.inc355, %for.end244
  %164 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4982
  %tobool249 = icmp ne %struct.rtx_def* %164, null, !dbg !4984
  br i1 %tobool249, label %for.body250, label %for.end360, !dbg !4984

for.body250:                                      ; preds = %for.cond248
  %165 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4985
  %166 = bitcast %struct.rtx_def* %165 to i32*, !dbg !4985
  %bf.load251 = load i32, i32* %166, align 8, !dbg !4985
  %bf.clear252 = and i32 %bf.load251, 65535, !dbg !4985
  %cmp253 = icmp eq i32 %bf.clear252, 13, !dbg !4985
  br i1 %cmp253, label %land.lhs.true255, label %if.end272, !dbg !4985

land.lhs.true255:                                 ; preds = %for.body250
  %167 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4985
  %u256 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %167, i32 0, i32 1, !dbg !4985
  %fld257 = bitcast %union.u* %u256 to [1 x %union.rtunion_def]*, !dbg !4985
  %arrayidx258 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld257, i64 0, i64 5, !dbg !4985
  %rt_int259 = bitcast %union.rtunion_def* %arrayidx258 to i32*, !dbg !4985
  %168 = load i32, i32* %rt_int259, align 8, !dbg !4985
  %cmp260 = icmp eq i32 %168, 10, !dbg !4985
  br i1 %cmp260, label %if.then262, label %if.end272, !dbg !4988

if.then262:                                       ; preds = %land.lhs.true255
  %169 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4989
  %u263 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %169, i32 0, i32 1, !dbg !4989
  %fld264 = bitcast %union.u* %u263 to [1 x %union.rtunion_def]*, !dbg !4989
  %arrayidx265 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld264, i64 0, i64 4, !dbg !4989
  %rt_bb266 = bitcast %union.rtunion_def* %arrayidx265 to %struct.basic_block_def**, !dbg !4989
  %170 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb266, align 8, !dbg !4989
  store %struct.basic_block_def* %170, %struct.basic_block_def** %bb, align 8, !dbg !4991
  %171 = load i32, i32* %num_bb_notes, align 4, !dbg !4992
  %inc = add nsw i32 %171, 1, !dbg !4992
  store i32 %inc, i32* %num_bb_notes, align 4, !dbg !4992
  %172 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4993
  %173 = load %struct.basic_block_def*, %struct.basic_block_def** %last_bb_seen, align 8, !dbg !4995
  %next_bb267 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %173, i32 0, i32 6, !dbg !4996
  %174 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb267, align 8, !dbg !4996
  %cmp268 = icmp ne %struct.basic_block_def* %172, %174, !dbg !4997
  br i1 %cmp268, label %if.then270, label %if.end271, !dbg !4998

if.then270:                                       ; preds = %if.then262
  call void (i8*, ...) @internal_error(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.30, i64 0, i64 0)), !dbg !4999
  br label %if.end271, !dbg !4999

if.end271:                                        ; preds = %if.then270, %if.then262
  %175 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5000
  store %struct.basic_block_def* %175, %struct.basic_block_def** %last_bb_seen, align 8, !dbg !5001
  store %struct.basic_block_def* %175, %struct.basic_block_def** %curr_bb, align 8, !dbg !5002
  br label %if.end272, !dbg !5003

if.end272:                                        ; preds = %if.end271, %land.lhs.true255, %for.body250
  %176 = load %struct.basic_block_def*, %struct.basic_block_def** %curr_bb, align 8, !dbg !5004
  %tobool273 = icmp ne %struct.basic_block_def* %176, null, !dbg !5004
  br i1 %tobool273, label %if.end324, label %if.then274, !dbg !5006

if.then274:                                       ; preds = %if.end272
  %177 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5007
  %178 = bitcast %struct.rtx_def* %177 to i32*, !dbg !5007
  %bf.load275 = load i32, i32* %178, align 8, !dbg !5007
  %bf.clear276 = and i32 %bf.load275, 65535, !dbg !5007
  switch i32 %bf.clear276, label %sw.default [
    i32 11, label %sw.bb
    i32 13, label %sw.bb
    i32 12, label %sw.bb277
  ], !dbg !5009

sw.bb:                                            ; preds = %if.then274, %if.then274
  br label %sw.epilog, !dbg !5010

sw.bb277:                                         ; preds = %if.then274
  %179 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5012
  %u278 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %179, i32 0, i32 1, !dbg !5012
  %fld279 = bitcast %union.u* %u278 to [1 x %union.rtunion_def]*, !dbg !5012
  %arrayidx280 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld279, i64 0, i64 2, !dbg !5012
  %rt_rtx281 = bitcast %union.rtunion_def* %arrayidx280 to %struct.rtx_def**, !dbg !5012
  %180 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx281, align 8, !dbg !5012
  %tobool282 = icmp ne %struct.rtx_def* %180, null, !dbg !5012
  br i1 %tobool282, label %land.lhs.true283, label %if.end323, !dbg !5014

land.lhs.true283:                                 ; preds = %sw.bb277
  %181 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5015
  %u284 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %181, i32 0, i32 1, !dbg !5015
  %fld285 = bitcast %union.u* %u284 to [1 x %union.rtunion_def]*, !dbg !5015
  %arrayidx286 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld285, i64 0, i64 2, !dbg !5015
  %rt_rtx287 = bitcast %union.rtunion_def* %arrayidx286 to %struct.rtx_def**, !dbg !5015
  %182 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx287, align 8, !dbg !5015
  %183 = bitcast %struct.rtx_def* %182 to i32*, !dbg !5015
  %bf.load288 = load i32, i32* %183, align 8, !dbg !5015
  %bf.clear289 = and i32 %bf.load288, 65535, !dbg !5015
  %cmp290 = icmp eq i32 %bf.clear289, 9, !dbg !5015
  br i1 %cmp290, label %land.lhs.true292, label %if.end323, !dbg !5015

land.lhs.true292:                                 ; preds = %land.lhs.true283
  %184 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5015
  %u293 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %184, i32 0, i32 1, !dbg !5015
  %fld294 = bitcast %union.u* %u293 to [1 x %union.rtunion_def]*, !dbg !5015
  %arrayidx295 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld294, i64 0, i64 2, !dbg !5015
  %rt_rtx296 = bitcast %union.rtunion_def* %arrayidx295 to %struct.rtx_def**, !dbg !5015
  %185 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx296, align 8, !dbg !5015
  %u297 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %185, i32 0, i32 1, !dbg !5015
  %fld298 = bitcast %union.u* %u297 to [1 x %union.rtunion_def]*, !dbg !5015
  %arrayidx299 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld298, i64 0, i64 5, !dbg !5015
  %rt_rtx300 = bitcast %union.rtunion_def* %arrayidx299 to %struct.rtx_def**, !dbg !5015
  %186 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx300, align 8, !dbg !5015
  %187 = bitcast %struct.rtx_def* %186 to i32*, !dbg !5015
  %bf.load301 = load i32, i32* %187, align 8, !dbg !5015
  %bf.clear302 = and i32 %bf.load301, 65535, !dbg !5015
  %cmp303 = icmp eq i32 %bf.clear302, 20, !dbg !5015
  br i1 %cmp303, label %if.then318, label %lor.lhs.false305, !dbg !5015

lor.lhs.false305:                                 ; preds = %land.lhs.true292
  %188 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5015
  %u306 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %188, i32 0, i32 1, !dbg !5015
  %fld307 = bitcast %union.u* %u306 to [1 x %union.rtunion_def]*, !dbg !5015
  %arrayidx308 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld307, i64 0, i64 2, !dbg !5015
  %rt_rtx309 = bitcast %union.rtunion_def* %arrayidx308 to %struct.rtx_def**, !dbg !5015
  %189 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx309, align 8, !dbg !5015
  %u310 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %189, i32 0, i32 1, !dbg !5015
  %fld311 = bitcast %union.u* %u310 to [1 x %union.rtunion_def]*, !dbg !5015
  %arrayidx312 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld311, i64 0, i64 5, !dbg !5015
  %rt_rtx313 = bitcast %union.rtunion_def* %arrayidx312 to %struct.rtx_def**, !dbg !5015
  %190 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx313, align 8, !dbg !5015
  %191 = bitcast %struct.rtx_def* %190 to i32*, !dbg !5015
  %bf.load314 = load i32, i32* %191, align 8, !dbg !5015
  %bf.clear315 = and i32 %bf.load314, 65535, !dbg !5015
  %cmp316 = icmp eq i32 %bf.clear315, 21, !dbg !5015
  br i1 %cmp316, label %if.then318, label %if.end323, !dbg !5016

if.then318:                                       ; preds = %lor.lhs.false305, %land.lhs.true292
  %192 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5017
  %u319 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %192, i32 0, i32 1, !dbg !5017
  %fld320 = bitcast %union.u* %u319 to [1 x %union.rtunion_def]*, !dbg !5017
  %arrayidx321 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld320, i64 0, i64 2, !dbg !5017
  %rt_rtx322 = bitcast %union.rtunion_def* %arrayidx321 to %struct.rtx_def**, !dbg !5017
  %193 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx322, align 8, !dbg !5017
  store %struct.rtx_def* %193, %struct.rtx_def** %x, align 8, !dbg !5018
  br label %if.end323, !dbg !5019

if.end323:                                        ; preds = %if.then318, %lor.lhs.false305, %land.lhs.true283, %sw.bb277
  br label %sw.epilog, !dbg !5020

sw.default:                                       ; preds = %if.then274
  %194 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5021
  call void @_fatal_insn(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.31, i64 0, i64 0), %struct.rtx_def* %194, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 2198, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5021
  br label %sw.epilog, !dbg !5022

sw.epilog:                                        ; preds = %sw.default, %if.end323, %sw.bb
  br label %if.end324, !dbg !5023

if.end324:                                        ; preds = %sw.epilog, %if.end272
  %195 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5024
  %196 = bitcast %struct.rtx_def* %195 to i32*, !dbg !5024
  %bf.load325 = load i32, i32* %196, align 8, !dbg !5024
  %bf.clear326 = and i32 %bf.load325, 65535, !dbg !5024
  %cmp327 = icmp eq i32 %bf.clear326, 9, !dbg !5024
  br i1 %cmp327, label %land.lhs.true329, label %if.end345, !dbg !5026

land.lhs.true329:                                 ; preds = %if.end324
  %197 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5027
  %call330 = call i32 @returnjump_p(%struct.rtx_def* %197), !dbg !5028
  %tobool331 = icmp ne i32 %call330, 0, !dbg !5028
  br i1 %tobool331, label %land.lhs.true332, label %if.end345, !dbg !5029

land.lhs.true332:                                 ; preds = %land.lhs.true329
  %198 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5030
  %call333 = call i32 @condjump_p(%struct.rtx_def* %198), !dbg !5031
  %tobool334 = icmp ne i32 %call333, 0, !dbg !5031
  br i1 %tobool334, label %if.end345, label %land.lhs.true335, !dbg !5032

land.lhs.true335:                                 ; preds = %land.lhs.true332
  %199 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5033
  %call336 = call %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %199), !dbg !5034
  %tobool337 = icmp ne %struct.rtx_def* %call336, null, !dbg !5034
  br i1 %tobool337, label %land.lhs.true338, label %if.then344, !dbg !5035

land.lhs.true338:                                 ; preds = %land.lhs.true335
  %200 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5036
  %call339 = call %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %200), !dbg !5036
  %201 = bitcast %struct.rtx_def* %call339 to i32*, !dbg !5036
  %bf.load340 = load i32, i32* %201, align 8, !dbg !5036
  %bf.clear341 = and i32 %bf.load340, 65535, !dbg !5036
  %cmp342 = icmp eq i32 %bf.clear341, 11, !dbg !5036
  br i1 %cmp342, label %if.end345, label %if.then344, !dbg !5037

if.then344:                                       ; preds = %land.lhs.true338, %land.lhs.true335
  %202 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5038
  call void @_fatal_insn(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.32, i64 0, i64 0), %struct.rtx_def* %202, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 2205, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5038
  br label %if.end345, !dbg !5038

if.end345:                                        ; preds = %if.then344, %land.lhs.true338, %land.lhs.true332, %land.lhs.true329, %if.end324
  %203 = load %struct.basic_block_def*, %struct.basic_block_def** %curr_bb, align 8, !dbg !5039
  %tobool346 = icmp ne %struct.basic_block_def* %203, null, !dbg !5039
  br i1 %tobool346, label %land.lhs.true347, label %if.end354, !dbg !5041

land.lhs.true347:                                 ; preds = %if.end345
  %204 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5042
  %205 = load %struct.basic_block_def*, %struct.basic_block_def** %curr_bb, align 8, !dbg !5043
  %il348 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %205, i32 0, i32 7, !dbg !5043
  %rtl349 = bitcast %union.basic_block_il_dependent* %il348 to %struct.rtl_bb_info**, !dbg !5043
  %206 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl349, align 8, !dbg !5043
  %end_350 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %206, i32 0, i32 1, !dbg !5043
  %207 = load %struct.rtx_def*, %struct.rtx_def** %end_350, align 8, !dbg !5043
  %cmp351 = icmp eq %struct.rtx_def* %204, %207, !dbg !5044
  br i1 %cmp351, label %if.then353, label %if.end354, !dbg !5045

if.then353:                                       ; preds = %land.lhs.true347
  store %struct.basic_block_def* null, %struct.basic_block_def** %curr_bb, align 8, !dbg !5046
  br label %if.end354, !dbg !5047

if.end354:                                        ; preds = %if.then353, %land.lhs.true347, %if.end345
  br label %for.inc355, !dbg !5048

for.inc355:                                       ; preds = %if.end354
  %208 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5049
  %u356 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %208, i32 0, i32 1, !dbg !5049
  %fld357 = bitcast %union.u* %u356 to [1 x %union.rtunion_def]*, !dbg !5049
  %arrayidx358 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld357, i64 0, i64 2, !dbg !5049
  %rt_rtx359 = bitcast %union.rtunion_def* %arrayidx358 to %struct.rtx_def**, !dbg !5049
  %209 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx359, align 8, !dbg !5049
  store %struct.rtx_def* %209, %struct.rtx_def** %x, align 8, !dbg !5050
  br label %for.cond248, !dbg !5051, !llvm.loop !5052

for.end360:                                       ; preds = %for.cond248
  %210 = load i32, i32* %num_bb_notes, align 4, !dbg !5054
  %211 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5056
  %add.ptr361 = getelementptr inbounds %struct.function, %struct.function* %211, i64 0, !dbg !5056
  %cfg362 = getelementptr inbounds %struct.function, %struct.function* %add.ptr361, i32 0, i32 1, !dbg !5056
  %212 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg362, align 8, !dbg !5056
  %x_n_basic_blocks = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %212, i32 0, i32 3, !dbg !5056
  %213 = load i32, i32* %x_n_basic_blocks, align 8, !dbg !5056
  %sub = sub nsw i32 %213, 2, !dbg !5057
  %cmp363 = icmp ne i32 %210, %sub, !dbg !5058
  br i1 %cmp363, label %if.then365, label %if.end369, !dbg !5059

if.then365:                                       ; preds = %for.end360
  %214 = load i32, i32* %num_bb_notes, align 4, !dbg !5060
  %215 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5061
  %add.ptr366 = getelementptr inbounds %struct.function, %struct.function* %215, i64 0, !dbg !5061
  %cfg367 = getelementptr inbounds %struct.function, %struct.function* %add.ptr366, i32 0, i32 1, !dbg !5061
  %216 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg367, align 8, !dbg !5061
  %x_n_basic_blocks368 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %216, i32 0, i32 3, !dbg !5061
  %217 = load i32, i32* %x_n_basic_blocks368, align 8, !dbg !5061
  call void (i8*, ...) @internal_error(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.33, i64 0, i64 0), i32 %214, i32 %217), !dbg !5062
  br label %if.end369, !dbg !5062

if.end369:                                        ; preds = %if.then365, %for.end360
  %218 = load i32, i32* %err, align 4, !dbg !5063
  ret i32 %218, !dbg !5064
}

; Function Attrs: noinline nounwind uwtable
define internal void @rtl_dump_bb(%struct.basic_block_def* %bb, %struct._IO_FILE* %outf, i32 %indent, i32 %flags) #0 !dbg !5065 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %outf.addr = alloca %struct._IO_FILE*, align 8
  %indent.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %insn = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  %s_indent = alloca i8*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5066, metadata !DIExpression()), !dbg !5067
  store %struct._IO_FILE* %outf, %struct._IO_FILE** %outf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %outf.addr, metadata !5068, metadata !DIExpression()), !dbg !5069
  store i32 %indent, i32* %indent.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %indent.addr, metadata !5070, metadata !DIExpression()), !dbg !5071
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !5072, metadata !DIExpression()), !dbg !5073
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !5074, metadata !DIExpression()), !dbg !5075
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !5076, metadata !DIExpression()), !dbg !5077
  call void @llvm.dbg.declare(metadata i8** %s_indent, metadata !5078, metadata !DIExpression()), !dbg !5079
  %0 = load i32, i32* %indent.addr, align 4, !dbg !5080
  %conv = sext i32 %0 to i64, !dbg !5080
  %add = add i64 %conv, 1, !dbg !5080
  %1 = alloca i8, i64 %add, align 16, !dbg !5080
  store i8* %1, i8** %s_indent, align 8, !dbg !5081
  %2 = load i8*, i8** %s_indent, align 8, !dbg !5082
  %3 = load i32, i32* %indent.addr, align 4, !dbg !5083
  %conv1 = sext i32 %3 to i64, !dbg !5084
  call void @llvm.memset.p0i8.i64(i8* align 1 %2, i8 32, i64 %conv1, i1 false), !dbg !5085
  %4 = load i8*, i8** %s_indent, align 8, !dbg !5086
  %5 = load i32, i32* %indent.addr, align 4, !dbg !5087
  %idxprom = sext i32 %5 to i64, !dbg !5086
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom, !dbg !5086
  store i8 0, i8* %arrayidx, align 1, !dbg !5088
  %6 = load %struct.df*, %struct.df** @df, align 8, !dbg !5089
  %tobool = icmp ne %struct.df* %6, null, !dbg !5089
  br i1 %tobool, label %if.then, label %if.end, !dbg !5091

if.then:                                          ; preds = %entry
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5092
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !5094
  call void @df_dump_top(%struct.basic_block_def* %7, %struct._IO_FILE* %8), !dbg !5095
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !5096
  %call = call i32 @putc(i32 10, %struct._IO_FILE* %9), !dbg !5097
  br label %if.end, !dbg !5098

if.end:                                           ; preds = %if.then, %entry
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5099
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 7, !dbg !5099
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !5099
  %11 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !5099
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %11, i32 0, i32 0, !dbg !5099
  %12 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !5099
  store %struct.rtx_def* %12, %struct.rtx_def** %insn, align 8, !dbg !5101
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5102
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 7, !dbg !5102
  %rtl3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.rtl_bb_info**, !dbg !5102
  %14 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl3, align 8, !dbg !5102
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %14, i32 0, i32 1, !dbg !5102
  %15 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !5102
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !5102
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5102
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !5102
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx4 to %struct.rtx_def**, !dbg !5102
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5102
  store %struct.rtx_def* %16, %struct.rtx_def** %last, align 8, !dbg !5103
  br label %for.cond, !dbg !5104

for.cond:                                         ; preds = %for.inc, %if.end
  %17 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5105
  %18 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !5107
  %cmp = icmp ne %struct.rtx_def* %17, %18, !dbg !5108
  br i1 %cmp, label %for.body, label %for.end, !dbg !5109

for.body:                                         ; preds = %for.cond
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !5110
  %20 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5111
  %call6 = call i32 @print_rtl_single(%struct._IO_FILE* %19, %struct.rtx_def* %20), !dbg !5112
  br label %for.inc, !dbg !5112

for.inc:                                          ; preds = %for.body
  %21 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5113
  %u7 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !5113
  %fld8 = bitcast %union.u* %u7 to [1 x %union.rtunion_def]*, !dbg !5113
  %arrayidx9 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld8, i64 0, i64 2, !dbg !5113
  %rt_rtx10 = bitcast %union.rtunion_def* %arrayidx9 to %struct.rtx_def**, !dbg !5113
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx10, align 8, !dbg !5113
  store %struct.rtx_def* %22, %struct.rtx_def** %insn, align 8, !dbg !5114
  br label %for.cond, !dbg !5115, !llvm.loop !5116

for.end:                                          ; preds = %for.cond
  %23 = load %struct.df*, %struct.df** @df, align 8, !dbg !5118
  %tobool11 = icmp ne %struct.df* %23, null, !dbg !5118
  br i1 %tobool11, label %if.then12, label %if.end14, !dbg !5120

if.then12:                                        ; preds = %for.end
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5121
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !5123
  call void @df_dump_bottom(%struct.basic_block_def* %24, %struct._IO_FILE* %25), !dbg !5124
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !5125
  %call13 = call i32 @putc(i32 10, %struct._IO_FILE* %26), !dbg !5126
  br label %if.end14, !dbg !5127

if.end14:                                         ; preds = %if.then12, %for.end
  ret void, !dbg !5128
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @rtl_create_basic_block(i8* %headp, i8* %endp, %struct.basic_block_def* %after) #0 !dbg !5129 {
entry:
  %headp.addr = alloca i8*, align 8
  %endp.addr = alloca i8*, align 8
  %after.addr = alloca %struct.basic_block_def*, align 8
  %head = alloca %struct.rtx_def*, align 8
  %end = alloca %struct.rtx_def*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %new_size = alloca i64, align 8
  store i8* %headp, i8** %headp.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %headp.addr, metadata !5130, metadata !DIExpression()), !dbg !5131
  store i8* %endp, i8** %endp.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %endp.addr, metadata !5132, metadata !DIExpression()), !dbg !5133
  store %struct.basic_block_def* %after, %struct.basic_block_def** %after.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %after.addr, metadata !5134, metadata !DIExpression()), !dbg !5135
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %head, metadata !5136, metadata !DIExpression()), !dbg !5137
  %0 = load i8*, i8** %headp.addr, align 8, !dbg !5138
  %1 = bitcast i8* %0 to %struct.rtx_def*, !dbg !5139
  store %struct.rtx_def* %1, %struct.rtx_def** %head, align 8, !dbg !5137
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %end, metadata !5140, metadata !DIExpression()), !dbg !5141
  %2 = load i8*, i8** %endp.addr, align 8, !dbg !5142
  %3 = bitcast i8* %2 to %struct.rtx_def*, !dbg !5143
  store %struct.rtx_def* %3, %struct.rtx_def** %end, align 8, !dbg !5141
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !5144, metadata !DIExpression()), !dbg !5145
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5146
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !5146
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !5146
  %5 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5146
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %5, i32 0, i32 5, !dbg !5146
  %6 = load i32, i32* %x_last_basic_block, align 8, !dbg !5146
  %conv = sext i32 %6 to i64, !dbg !5148
  %7 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5149
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %7, i64 0, !dbg !5149
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !5149
  %8 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !5149
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %8, i32 0, i32 2, !dbg !5149
  %9 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !5149
  %tobool = icmp ne %struct.VEC_basic_block_gc* %9, null, !dbg !5149
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5149

cond.true:                                        ; preds = %entry
  %10 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5149
  %add.ptr3 = getelementptr inbounds %struct.function, %struct.function* %10, i64 0, !dbg !5149
  %cfg4 = getelementptr inbounds %struct.function, %struct.function* %add.ptr3, i32 0, i32 1, !dbg !5149
  %11 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg4, align 8, !dbg !5149
  %x_basic_block_info5 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %11, i32 0, i32 2, !dbg !5149
  %12 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info5, align 8, !dbg !5149
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %12, i32 0, i32 0, !dbg !5149
  br label %cond.end, !dbg !5149

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5149

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5149
  %call = call i32 @VEC_basic_block_base_length(%struct.VEC_basic_block_base* %cond), !dbg !5149
  %conv6 = zext i32 %call to i64, !dbg !5149
  %cmp = icmp uge i64 %conv, %conv6, !dbg !5150
  br i1 %cmp, label %if.then, label %if.end, !dbg !5151

if.then:                                          ; preds = %cond.end
  call void @llvm.dbg.declare(metadata i64* %new_size, metadata !5152, metadata !DIExpression()), !dbg !5154
  %13 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5155
  %add.ptr8 = getelementptr inbounds %struct.function, %struct.function* %13, i64 0, !dbg !5155
  %cfg9 = getelementptr inbounds %struct.function, %struct.function* %add.ptr8, i32 0, i32 1, !dbg !5155
  %14 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg9, align 8, !dbg !5155
  %x_last_basic_block10 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %14, i32 0, i32 5, !dbg !5155
  %15 = load i32, i32* %x_last_basic_block10, align 8, !dbg !5155
  %16 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5156
  %add.ptr11 = getelementptr inbounds %struct.function, %struct.function* %16, i64 0, !dbg !5156
  %cfg12 = getelementptr inbounds %struct.function, %struct.function* %add.ptr11, i32 0, i32 1, !dbg !5156
  %17 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg12, align 8, !dbg !5156
  %x_last_basic_block13 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %17, i32 0, i32 5, !dbg !5156
  %18 = load i32, i32* %x_last_basic_block13, align 8, !dbg !5156
  %add = add nsw i32 %18, 3, !dbg !5157
  %div = sdiv i32 %add, 4, !dbg !5158
  %add14 = add nsw i32 %15, %div, !dbg !5159
  %conv15 = sext i32 %add14 to i64, !dbg !5155
  store i64 %conv15, i64* %new_size, align 8, !dbg !5154
  %19 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5160
  %add.ptr16 = getelementptr inbounds %struct.function, %struct.function* %19, i64 0, !dbg !5160
  %cfg17 = getelementptr inbounds %struct.function, %struct.function* %add.ptr16, i32 0, i32 1, !dbg !5160
  %20 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg17, align 8, !dbg !5160
  %x_basic_block_info18 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %20, i32 0, i32 2, !dbg !5160
  %21 = load i64, i64* %new_size, align 8, !dbg !5160
  %conv19 = trunc i64 %21 to i32, !dbg !5160
  call void @VEC_basic_block_gc_safe_grow_cleared(%struct.VEC_basic_block_gc** %x_basic_block_info18, i32 %conv19), !dbg !5160
  br label %if.end, !dbg !5161

if.end:                                           ; preds = %if.then, %cond.end
  %22 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5162
  %add.ptr20 = getelementptr inbounds %struct.function, %struct.function* %22, i64 0, !dbg !5162
  %cfg21 = getelementptr inbounds %struct.function, %struct.function* %add.ptr20, i32 0, i32 1, !dbg !5162
  %23 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg21, align 8, !dbg !5162
  %x_n_basic_blocks = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %23, i32 0, i32 3, !dbg !5162
  %24 = load i32, i32* %x_n_basic_blocks, align 8, !dbg !5163
  %inc = add nsw i32 %24, 1, !dbg !5163
  store i32 %inc, i32* %x_n_basic_blocks, align 8, !dbg !5163
  %25 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !5164
  %26 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8, !dbg !5165
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %after.addr, align 8, !dbg !5166
  %call22 = call %struct.basic_block_def* @create_basic_block_structure(%struct.rtx_def* %25, %struct.rtx_def* %26, %struct.rtx_def* null, %struct.basic_block_def* %27), !dbg !5167
  store %struct.basic_block_def* %call22, %struct.basic_block_def** %bb, align 8, !dbg !5168
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5169
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %28, i32 0, i32 2, !dbg !5170
  store i8* null, i8** %aux, align 8, !dbg !5171
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5172
  ret %struct.basic_block_def* %29, !dbg !5173
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @rtl_redirect_edge_and_branch(%struct.edge_def* %e, %struct.basic_block_def* %target) #0 !dbg !5174 {
entry:
  %retval = alloca %struct.edge_def*, align 8
  %e.addr = alloca %struct.edge_def*, align 8
  %target.addr = alloca %struct.basic_block_def*, align 8
  %ret = alloca %struct.edge_def*, align 8
  %src = alloca %struct.basic_block_def*, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !5175, metadata !DIExpression()), !dbg !5176
  store %struct.basic_block_def* %target, %struct.basic_block_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %target.addr, metadata !5177, metadata !DIExpression()), !dbg !5178
  call void @llvm.dbg.declare(metadata %struct.edge_def** %ret, metadata !5179, metadata !DIExpression()), !dbg !5180
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %src, metadata !5181, metadata !DIExpression()), !dbg !5182
  %0 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !5183
  %src1 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %0, i32 0, i32 0, !dbg !5184
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %src1, align 8, !dbg !5184
  store %struct.basic_block_def* %1, %struct.basic_block_def** %src, align 8, !dbg !5182
  %2 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !5185
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %2, i32 0, i32 7, !dbg !5187
  %3 = load i32, i32* %flags, align 8, !dbg !5187
  %and = and i32 %3, 12, !dbg !5188
  %tobool = icmp ne i32 %and, 0, !dbg !5188
  br i1 %tobool, label %if.then, label %if.end, !dbg !5189

if.then:                                          ; preds = %entry
  store %struct.edge_def* null, %struct.edge_def** %retval, align 8, !dbg !5190
  br label %return, !dbg !5190

if.end:                                           ; preds = %entry
  %4 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !5191
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %4, i32 0, i32 1, !dbg !5193
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !5193
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %target.addr, align 8, !dbg !5194
  %cmp = icmp eq %struct.basic_block_def* %5, %6, !dbg !5195
  br i1 %cmp, label %if.then2, label %if.end3, !dbg !5196

if.then2:                                         ; preds = %if.end
  %7 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !5197
  store %struct.edge_def* %7, %struct.edge_def** %retval, align 8, !dbg !5198
  br label %return, !dbg !5198

if.end3:                                          ; preds = %if.end
  %8 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !5199
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %target.addr, align 8, !dbg !5201
  %call = call %struct.edge_def* @try_redirect_by_replacing_jump(%struct.edge_def* %8, %struct.basic_block_def* %9, i8 zeroext 0), !dbg !5202
  store %struct.edge_def* %call, %struct.edge_def** %ret, align 8, !dbg !5203
  %cmp4 = icmp ne %struct.edge_def* %call, null, !dbg !5204
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !5205

if.then5:                                         ; preds = %if.end3
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !5206
  call void @df_set_bb_dirty(%struct.basic_block_def* %10), !dbg !5208
  %11 = load %struct.edge_def*, %struct.edge_def** %ret, align 8, !dbg !5209
  store %struct.edge_def* %11, %struct.edge_def** %retval, align 8, !dbg !5210
  br label %return, !dbg !5210

if.end6:                                          ; preds = %if.end3
  %12 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !5211
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %target.addr, align 8, !dbg !5212
  %call7 = call %struct.edge_def* @redirect_branch_edge(%struct.edge_def* %12, %struct.basic_block_def* %13), !dbg !5213
  store %struct.edge_def* %call7, %struct.edge_def** %ret, align 8, !dbg !5214
  %14 = load %struct.edge_def*, %struct.edge_def** %ret, align 8, !dbg !5215
  %tobool8 = icmp ne %struct.edge_def* %14, null, !dbg !5215
  br i1 %tobool8, label %if.end10, label %if.then9, !dbg !5217

if.then9:                                         ; preds = %if.end6
  store %struct.edge_def* null, %struct.edge_def** %retval, align 8, !dbg !5218
  br label %return, !dbg !5218

if.end10:                                         ; preds = %if.end6
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !5219
  call void @df_set_bb_dirty(%struct.basic_block_def* %15), !dbg !5220
  %16 = load %struct.edge_def*, %struct.edge_def** %ret, align 8, !dbg !5221
  store %struct.edge_def* %16, %struct.edge_def** %retval, align 8, !dbg !5222
  br label %return, !dbg !5222

return:                                           ; preds = %if.end10, %if.then9, %if.then5, %if.then2, %if.then
  %17 = load %struct.edge_def*, %struct.edge_def** %retval, align 8, !dbg !5223
  ret %struct.edge_def* %17, !dbg !5223
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @rtl_redirect_edge_and_branch_force(%struct.edge_def* %e, %struct.basic_block_def* %target) #0 !dbg !5224 {
entry:
  %retval = alloca %struct.basic_block_def*, align 8
  %e.addr = alloca %struct.edge_def*, align 8
  %target.addr = alloca %struct.basic_block_def*, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !5225, metadata !DIExpression()), !dbg !5226
  store %struct.basic_block_def* %target, %struct.basic_block_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %target.addr, metadata !5227, metadata !DIExpression()), !dbg !5228
  %0 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !5229
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %target.addr, align 8, !dbg !5231
  %call = call %struct.edge_def* @redirect_edge_and_branch(%struct.edge_def* %0, %struct.basic_block_def* %1), !dbg !5232
  %tobool = icmp ne %struct.edge_def* %call, null, !dbg !5232
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !5233

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !5234
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %2, i32 0, i32 1, !dbg !5235
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !5235
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %target.addr, align 8, !dbg !5236
  %cmp = icmp eq %struct.basic_block_def* %3, %4, !dbg !5237
  br i1 %cmp, label %if.then, label %if.end, !dbg !5238

if.then:                                          ; preds = %lor.lhs.false, %entry
  store %struct.basic_block_def* null, %struct.basic_block_def** %retval, align 8, !dbg !5239
  br label %return, !dbg !5239

if.end:                                           ; preds = %lor.lhs.false
  %5 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !5240
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %5, i32 0, i32 0, !dbg !5241
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !5241
  call void @df_set_bb_dirty(%struct.basic_block_def* %6), !dbg !5242
  %7 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !5243
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %target.addr, align 8, !dbg !5244
  %call1 = call %struct.basic_block_def* @force_nonfallthru_and_redirect(%struct.edge_def* %7, %struct.basic_block_def* %8), !dbg !5245
  store %struct.basic_block_def* %call1, %struct.basic_block_def** %retval, align 8, !dbg !5246
  br label %return, !dbg !5246

return:                                           ; preds = %if.end, %if.then
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %retval, align 8, !dbg !5247
  ret %struct.basic_block_def* %9, !dbg !5247
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @rtl_can_remove_branch_p(%struct.edge_def* %e) #0 !dbg !5248 {
entry:
  %retval = alloca i8, align 1
  %e.addr = alloca %struct.edge_def*, align 8
  %src = alloca %struct.basic_block_def*, align 8
  %target = alloca %struct.basic_block_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %set = alloca %struct.rtx_def*, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !5249, metadata !DIExpression()), !dbg !5250
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %src, metadata !5251, metadata !DIExpression()), !dbg !5252
  %0 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !5253
  %src1 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %0, i32 0, i32 0, !dbg !5254
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %src1, align 8, !dbg !5254
  store %struct.basic_block_def* %1, %struct.basic_block_def** %src, align 8, !dbg !5252
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %target, metadata !5255, metadata !DIExpression()), !dbg !5256
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !5257
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 1, !dbg !5257
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !5257
  %tobool = icmp ne %struct.VEC_edge_gc* %3, null, !dbg !5257
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5257

cond.true:                                        ; preds = %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !5257
  %succs2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 1, !dbg !5257
  %5 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs2, align 8, !dbg !5257
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %5, i32 0, i32 0, !dbg !5257
  br label %cond.end, !dbg !5257

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5257

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5257
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !5257
  %succs3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 1, !dbg !5257
  %7 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs3, align 8, !dbg !5257
  %tobool4 = icmp ne %struct.VEC_edge_gc* %7, null, !dbg !5257
  br i1 %tobool4, label %cond.true5, label %cond.false8, !dbg !5257

cond.true5:                                       ; preds = %cond.end
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !5257
  %succs6 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 1, !dbg !5257
  %9 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs6, align 8, !dbg !5257
  %base7 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %9, i32 0, i32 0, !dbg !5257
  br label %cond.end9, !dbg !5257

cond.false8:                                      ; preds = %cond.end
  br label %cond.end9, !dbg !5257

cond.end9:                                        ; preds = %cond.false8, %cond.true5
  %cond10 = phi %struct.VEC_edge_base* [ %base7, %cond.true5 ], [ null, %cond.false8 ], !dbg !5257
  %call = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond10, i32 0), !dbg !5257
  %10 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !5257
  %cmp = icmp eq %struct.edge_def* %call, %10, !dbg !5257
  %conv = zext i1 %cmp to i32, !dbg !5257
  %call11 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 %conv), !dbg !5257
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call11, i32 0, i32 1, !dbg !5258
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !5258
  store %struct.basic_block_def* %11, %struct.basic_block_def** %target, align 8, !dbg !5256
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !5259, metadata !DIExpression()), !dbg !5260
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !5261
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 7, !dbg !5261
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !5261
  %13 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !5261
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %13, i32 0, i32 1, !dbg !5261
  %14 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !5261
  store %struct.rtx_def* %14, %struct.rtx_def** %insn, align 8, !dbg !5260
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set, metadata !5262, metadata !DIExpression()), !dbg !5263
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %target, align 8, !dbg !5264
  %16 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5266
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %16, i64 0, !dbg !5266
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !5266
  %17 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5266
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %17, i32 0, i32 1, !dbg !5266
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !5266
  %cmp12 = icmp eq %struct.basic_block_def* %15, %18, !dbg !5267
  br i1 %cmp12, label %if.then, label %if.end, !dbg !5268

if.then:                                          ; preds = %cond.end9
  store i8 0, i8* %retval, align 1, !dbg !5269
  br label %return, !dbg !5269

if.end:                                           ; preds = %cond.end9
  %19 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !5270
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %19, i32 0, i32 7, !dbg !5272
  %20 = load i32, i32* %flags, align 8, !dbg !5272
  %and = and i32 %20, 12, !dbg !5273
  %tobool14 = icmp ne i32 %and, 0, !dbg !5273
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !5274

if.then15:                                        ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !5275
  br label %return, !dbg !5275

if.end16:                                         ; preds = %if.end
  %21 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5276
  %call17 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %21, i32 29, %struct.rtx_def* null), !dbg !5278
  %tobool18 = icmp ne %struct.rtx_def* %call17, null, !dbg !5278
  br i1 %tobool18, label %if.then25, label %lor.lhs.false, !dbg !5279

lor.lhs.false:                                    ; preds = %if.end16
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !5280
  %flags19 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %22, i32 0, i32 13, !dbg !5280
  %23 = load i32, i32* %flags19, align 8, !dbg !5280
  %and20 = and i32 %23, 96, !dbg !5280
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %target, align 8, !dbg !5281
  %flags21 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %24, i32 0, i32 13, !dbg !5281
  %25 = load i32, i32* %flags21, align 8, !dbg !5281
  %and22 = and i32 %25, 96, !dbg !5281
  %cmp23 = icmp ne i32 %and20, %and22, !dbg !5282
  br i1 %cmp23, label %if.then25, label %if.end26, !dbg !5283

if.then25:                                        ; preds = %lor.lhs.false, %if.end16
  store i8 0, i8* %retval, align 1, !dbg !5284
  br label %return, !dbg !5284

if.end26:                                         ; preds = %lor.lhs.false
  %26 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5285
  %call27 = call i32 @onlyjump_p(%struct.rtx_def* %26), !dbg !5287
  %tobool28 = icmp ne i32 %call27, 0, !dbg !5287
  br i1 %tobool28, label %lor.lhs.false29, label %if.then33, !dbg !5288

lor.lhs.false29:                                  ; preds = %if.end26
  %27 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5289
  %call30 = call zeroext i8 @tablejump_p(%struct.rtx_def* %27, %struct.rtx_def** null, %struct.rtx_def** null), !dbg !5290
  %conv31 = zext i8 %call30 to i32, !dbg !5290
  %tobool32 = icmp ne i32 %conv31, 0, !dbg !5290
  br i1 %tobool32, label %if.then33, label %if.end34, !dbg !5291

if.then33:                                        ; preds = %lor.lhs.false29, %if.end26
  store i8 0, i8* %retval, align 1, !dbg !5292
  br label %return, !dbg !5292

if.end34:                                         ; preds = %lor.lhs.false29
  %28 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5293
  %29 = bitcast %struct.rtx_def* %28 to i32*, !dbg !5293
  %bf.load = load i32, i32* %29, align 8, !dbg !5293
  %bf.clear = and i32 %bf.load, 65535, !dbg !5293
  %cmp35 = icmp eq i32 %bf.clear, 8, !dbg !5293
  br i1 %cmp35, label %cond.true52, label %lor.lhs.false37, !dbg !5293

lor.lhs.false37:                                  ; preds = %if.end34
  %30 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5293
  %31 = bitcast %struct.rtx_def* %30 to i32*, !dbg !5293
  %bf.load38 = load i32, i32* %31, align 8, !dbg !5293
  %bf.clear39 = and i32 %bf.load38, 65535, !dbg !5293
  %cmp40 = icmp eq i32 %bf.clear39, 7, !dbg !5293
  br i1 %cmp40, label %cond.true52, label %lor.lhs.false42, !dbg !5293

lor.lhs.false42:                                  ; preds = %lor.lhs.false37
  %32 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5293
  %33 = bitcast %struct.rtx_def* %32 to i32*, !dbg !5293
  %bf.load43 = load i32, i32* %33, align 8, !dbg !5293
  %bf.clear44 = and i32 %bf.load43, 65535, !dbg !5293
  %cmp45 = icmp eq i32 %bf.clear44, 9, !dbg !5293
  br i1 %cmp45, label %cond.true52, label %lor.lhs.false47, !dbg !5293

lor.lhs.false47:                                  ; preds = %lor.lhs.false42
  %34 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5293
  %35 = bitcast %struct.rtx_def* %34 to i32*, !dbg !5293
  %bf.load48 = load i32, i32* %35, align 8, !dbg !5293
  %bf.clear49 = and i32 %bf.load48, 65535, !dbg !5293
  %cmp50 = icmp eq i32 %bf.clear49, 10, !dbg !5293
  br i1 %cmp50, label %cond.true52, label %cond.false70, !dbg !5293

cond.true52:                                      ; preds = %lor.lhs.false47, %lor.lhs.false42, %lor.lhs.false37, %if.end34
  %36 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5293
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1, !dbg !5293
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5293
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !5293
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !5293
  %37 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5293
  %38 = bitcast %struct.rtx_def* %37 to i32*, !dbg !5293
  %bf.load53 = load i32, i32* %38, align 8, !dbg !5293
  %bf.clear54 = and i32 %bf.load53, 65535, !dbg !5293
  %cmp55 = icmp eq i32 %bf.clear54, 23, !dbg !5293
  br i1 %cmp55, label %cond.true57, label %cond.false62, !dbg !5293

cond.true57:                                      ; preds = %cond.true52
  %39 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5293
  %u58 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1, !dbg !5293
  %fld59 = bitcast %union.u* %u58 to [1 x %union.rtunion_def]*, !dbg !5293
  %arrayidx60 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld59, i64 0, i64 5, !dbg !5293
  %rt_rtx61 = bitcast %union.rtunion_def* %arrayidx60 to %struct.rtx_def**, !dbg !5293
  %40 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx61, align 8, !dbg !5293
  br label %cond.end68, !dbg !5293

cond.false62:                                     ; preds = %cond.true52
  %41 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5293
  %42 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5293
  %u63 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1, !dbg !5293
  %fld64 = bitcast %union.u* %u63 to [1 x %union.rtunion_def]*, !dbg !5293
  %arrayidx65 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld64, i64 0, i64 5, !dbg !5293
  %rt_rtx66 = bitcast %union.rtunion_def* %arrayidx65 to %struct.rtx_def**, !dbg !5293
  %43 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx66, align 8, !dbg !5293
  %call67 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %41, %struct.rtx_def* %43), !dbg !5293
  br label %cond.end68, !dbg !5293

cond.end68:                                       ; preds = %cond.false62, %cond.true57
  %cond69 = phi %struct.rtx_def* [ %40, %cond.true57 ], [ %call67, %cond.false62 ], !dbg !5293
  br label %cond.end71, !dbg !5293

cond.false70:                                     ; preds = %lor.lhs.false47
  br label %cond.end71, !dbg !5293

cond.end71:                                       ; preds = %cond.false70, %cond.end68
  %cond72 = phi %struct.rtx_def* [ %cond69, %cond.end68 ], [ null, %cond.false70 ], !dbg !5293
  store %struct.rtx_def* %cond72, %struct.rtx_def** %set, align 8, !dbg !5294
  %44 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !5295
  %tobool73 = icmp ne %struct.rtx_def* %44, null, !dbg !5295
  br i1 %tobool73, label %lor.lhs.false74, label %if.then77, !dbg !5297

lor.lhs.false74:                                  ; preds = %cond.end71
  %45 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !5298
  %call75 = call i32 @side_effects_p(%struct.rtx_def* %45), !dbg !5299
  %tobool76 = icmp ne i32 %call75, 0, !dbg !5299
  br i1 %tobool76, label %if.then77, label %if.end78, !dbg !5300

if.then77:                                        ; preds = %lor.lhs.false74, %cond.end71
  store i8 0, i8* %retval, align 1, !dbg !5301
  br label %return, !dbg !5301

if.end78:                                         ; preds = %lor.lhs.false74
  store i8 1, i8* %retval, align 1, !dbg !5302
  br label %return, !dbg !5302

return:                                           ; preds = %if.end78, %if.then77, %if.then33, %if.then25, %if.then15, %if.then
  %46 = load i8, i8* %retval, align 1, !dbg !5303
  ret i8 %46, !dbg !5303
}

; Function Attrs: noinline nounwind uwtable
define internal void @rtl_delete_block(%struct.basic_block_def* %b) #0 !dbg !5304 {
entry:
  %b.addr = alloca %struct.basic_block_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %end = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def* %b, %struct.basic_block_def** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %b.addr, metadata !5305, metadata !DIExpression()), !dbg !5306
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !5307, metadata !DIExpression()), !dbg !5308
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %end, metadata !5309, metadata !DIExpression()), !dbg !5310
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !5311
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 7, !dbg !5311
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !5311
  %1 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !5311
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %1, i32 0, i32 0, !dbg !5311
  %2 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !5311
  store %struct.rtx_def* %2, %struct.rtx_def** %insn, align 8, !dbg !5312
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !5313
  %call = call %struct.rtx_def* @get_last_bb_insn(%struct.basic_block_def* %3), !dbg !5314
  store %struct.rtx_def* %call, %struct.rtx_def** %end, align 8, !dbg !5315
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !5316
  %il1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !5316
  %rtl2 = bitcast %union.basic_block_il_dependent* %il1 to %struct.rtl_bb_info**, !dbg !5316
  %5 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl2, align 8, !dbg !5316
  %head_3 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %5, i32 0, i32 0, !dbg !5316
  store %struct.rtx_def* null, %struct.rtx_def** %head_3, align 8, !dbg !5317
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5318
  %7 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8, !dbg !5319
  call void @delete_insn_chain(%struct.rtx_def* %6, %struct.rtx_def* %7, i8 zeroext 1), !dbg !5320
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5321
  %tobool = icmp ne %struct._IO_FILE* %8, null, !dbg !5321
  br i1 %tobool, label %if.then, label %if.end, !dbg !5323

if.then:                                          ; preds = %entry
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5324
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !5325
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 9, !dbg !5326
  %11 = load i32, i32* %index, align 8, !dbg !5326
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.35, i64 0, i64 0), i32 %11), !dbg !5327
  br label %if.end, !dbg !5327

if.end:                                           ; preds = %if.then, %entry
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !5328
  %index5 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 9, !dbg !5329
  %13 = load i32, i32* %index5, align 8, !dbg !5329
  call void @df_bb_delete(i32 %13), !dbg !5330
  ret void, !dbg !5331
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @rtl_split_block(%struct.basic_block_def* %bb, i8* %insnp) #0 !dbg !5332 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %insnp.addr = alloca i8*, align 8
  %new_bb = alloca %struct.basic_block_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %next = alloca %struct.rtx_def*, align 8
  %bb_ = alloca %struct.basic_block_def*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5333, metadata !DIExpression()), !dbg !5334
  store i8* %insnp, i8** %insnp.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %insnp.addr, metadata !5335, metadata !DIExpression()), !dbg !5336
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %new_bb, metadata !5337, metadata !DIExpression()), !dbg !5338
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !5339, metadata !DIExpression()), !dbg !5340
  %0 = load i8*, i8** %insnp.addr, align 8, !dbg !5341
  %1 = bitcast i8* %0 to %struct.rtx_def*, !dbg !5342
  store %struct.rtx_def* %1, %struct.rtx_def** %insn, align 8, !dbg !5340
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !5343, metadata !DIExpression()), !dbg !5344
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !5345, metadata !DIExpression()), !dbg !5346
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5347
  %tobool = icmp ne %struct.rtx_def* %2, null, !dbg !5347
  br i1 %tobool, label %if.end32, label %if.then, !dbg !5349

if.then:                                          ; preds = %entry
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5350
  %call = call %struct.rtx_def* @first_insn_after_basic_block_note(%struct.basic_block_def* %3), !dbg !5352
  store %struct.rtx_def* %call, %struct.rtx_def** %insn, align 8, !dbg !5353
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5354
  %tobool1 = icmp ne %struct.rtx_def* %4, null, !dbg !5354
  br i1 %tobool1, label %if.then2, label %if.else, !dbg !5356

if.then2:                                         ; preds = %if.then
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %next, metadata !5357, metadata !DIExpression()), !dbg !5359
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5360
  store %struct.rtx_def* %5, %struct.rtx_def** %next, align 8, !dbg !5359
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5361
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !5361
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5361
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !5361
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !5361
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5361
  store %struct.rtx_def* %7, %struct.rtx_def** %insn, align 8, !dbg !5362
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5363
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5365
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 7, !dbg !5365
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !5365
  %10 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !5365
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %10, i32 0, i32 1, !dbg !5365
  %11 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !5365
  %cmp = icmp ne %struct.rtx_def* %8, %11, !dbg !5366
  br i1 %cmp, label %land.lhs.true, label %if.end29, !dbg !5367

land.lhs.true:                                    ; preds = %if.then2
  %12 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !5368
  %13 = bitcast %struct.rtx_def* %12 to i32*, !dbg !5368
  %bf.load = load i32, i32* %13, align 8, !dbg !5368
  %bf.clear = and i32 %bf.load, 65535, !dbg !5368
  %cmp3 = icmp eq i32 %bf.clear, 7, !dbg !5368
  br i1 %cmp3, label %land.lhs.true4, label %if.end29, !dbg !5369

land.lhs.true4:                                   ; preds = %land.lhs.true
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5370
  %il5 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %14, i32 0, i32 7, !dbg !5370
  %rtl6 = bitcast %union.basic_block_il_dependent* %il5 to %struct.rtl_bb_info**, !dbg !5370
  %15 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl6, align 8, !dbg !5370
  %end_7 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %15, i32 0, i32 1, !dbg !5370
  %16 = load %struct.rtx_def*, %struct.rtx_def** %end_7, align 8, !dbg !5370
  %17 = bitcast %struct.rtx_def* %16 to i32*, !dbg !5370
  %bf.load8 = load i32, i32* %17, align 8, !dbg !5370
  %bf.clear9 = and i32 %bf.load8, 65535, !dbg !5370
  %cmp10 = icmp eq i32 %bf.clear9, 7, !dbg !5370
  br i1 %cmp10, label %if.then11, label %if.end29, !dbg !5371

if.then11:                                        ; preds = %land.lhs.true4
  br label %while.cond, !dbg !5372

while.cond:                                       ; preds = %while.body, %if.then11
  %18 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !5374
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5375
  %il12 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %19, i32 0, i32 7, !dbg !5375
  %rtl13 = bitcast %union.basic_block_il_dependent* %il12 to %struct.rtl_bb_info**, !dbg !5375
  %20 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl13, align 8, !dbg !5375
  %end_14 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %20, i32 0, i32 1, !dbg !5375
  %21 = load %struct.rtx_def*, %struct.rtx_def** %end_14, align 8, !dbg !5375
  %cmp15 = icmp ne %struct.rtx_def* %18, %21, !dbg !5376
  br i1 %cmp15, label %land.rhs, label %land.end, !dbg !5377

land.rhs:                                         ; preds = %while.cond
  %22 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !5378
  %23 = bitcast %struct.rtx_def* %22 to i32*, !dbg !5378
  %bf.load16 = load i32, i32* %23, align 8, !dbg !5378
  %bf.clear17 = and i32 %bf.load16, 65535, !dbg !5378
  %cmp18 = icmp eq i32 %bf.clear17, 7, !dbg !5378
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %24 = phi i1 [ false, %while.cond ], [ %cmp18, %land.rhs ], !dbg !5379
  br i1 %24, label %while.body, label %while.end, !dbg !5372

while.body:                                       ; preds = %land.end
  %25 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !5380
  %u19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1, !dbg !5380
  %fld20 = bitcast %union.u* %u19 to [1 x %union.rtunion_def]*, !dbg !5380
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i64 0, i64 2, !dbg !5380
  %rt_rtx22 = bitcast %union.rtunion_def* %arrayidx21 to %struct.rtx_def**, !dbg !5380
  %26 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx22, align 8, !dbg !5380
  store %struct.rtx_def* %26, %struct.rtx_def** %next, align 8, !dbg !5381
  br label %while.cond, !dbg !5372, !llvm.loop !5382

while.end:                                        ; preds = %land.end
  %27 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !5383
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5385
  %il23 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %28, i32 0, i32 7, !dbg !5385
  %rtl24 = bitcast %union.basic_block_il_dependent* %il23 to %struct.rtl_bb_info**, !dbg !5385
  %29 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl24, align 8, !dbg !5385
  %end_25 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %29, i32 0, i32 1, !dbg !5385
  %30 = load %struct.rtx_def*, %struct.rtx_def** %end_25, align 8, !dbg !5385
  %cmp26 = icmp eq %struct.rtx_def* %27, %30, !dbg !5386
  br i1 %cmp26, label %if.then27, label %if.end, !dbg !5387

if.then27:                                        ; preds = %while.end
  %31 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !5388
  %call28 = call %struct.rtx_def* @emit_note_after(i32 0, %struct.rtx_def* %31), !dbg !5389
  br label %if.end, !dbg !5389

if.end:                                           ; preds = %if.then27, %while.end
  br label %if.end29, !dbg !5390

if.end29:                                         ; preds = %if.end, %land.lhs.true4, %land.lhs.true, %if.then2
  br label %if.end31, !dbg !5391

if.else:                                          ; preds = %if.then
  %call30 = call %struct.rtx_def* @get_last_insn(), !dbg !5392
  store %struct.rtx_def* %call30, %struct.rtx_def** %insn, align 8, !dbg !5393
  br label %if.end31

if.end31:                                         ; preds = %if.else, %if.end29
  br label %if.end32, !dbg !5394

if.end32:                                         ; preds = %if.end31, %entry
  %32 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5395
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5397
  %il33 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %33, i32 0, i32 7, !dbg !5397
  %rtl34 = bitcast %union.basic_block_il_dependent* %il33 to %struct.rtl_bb_info**, !dbg !5397
  %34 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl34, align 8, !dbg !5397
  %end_35 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %34, i32 0, i32 1, !dbg !5397
  %35 = load %struct.rtx_def*, %struct.rtx_def** %end_35, align 8, !dbg !5397
  %cmp36 = icmp eq %struct.rtx_def* %32, %35, !dbg !5398
  br i1 %cmp36, label %if.then37, label %if.end39, !dbg !5399

if.then37:                                        ; preds = %if.end32
  %36 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5400
  %call38 = call %struct.rtx_def* @emit_note_after(i32 0, %struct.rtx_def* %36), !dbg !5401
  br label %if.end39, !dbg !5401

if.end39:                                         ; preds = %if.then37, %if.end32
  %37 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5402
  %u40 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1, !dbg !5402
  %fld41 = bitcast %union.u* %u40 to [1 x %union.rtunion_def]*, !dbg !5402
  %arrayidx42 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld41, i64 0, i64 2, !dbg !5402
  %rt_rtx43 = bitcast %union.rtunion_def* %arrayidx42 to %struct.rtx_def**, !dbg !5402
  %38 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx43, align 8, !dbg !5402
  %39 = bitcast %struct.rtx_def* %38 to i8*, !dbg !5402
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5403
  %il44 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %40, i32 0, i32 7, !dbg !5403
  %rtl45 = bitcast %union.basic_block_il_dependent* %il44 to %struct.rtl_bb_info**, !dbg !5403
  %41 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl45, align 8, !dbg !5403
  %end_46 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %41, i32 0, i32 1, !dbg !5403
  %42 = load %struct.rtx_def*, %struct.rtx_def** %end_46, align 8, !dbg !5403
  %43 = bitcast %struct.rtx_def* %42 to i8*, !dbg !5403
  %44 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5404
  %call47 = call %struct.basic_block_def* @create_basic_block(i8* %39, i8* %43, %struct.basic_block_def* %44), !dbg !5405
  store %struct.basic_block_def* %call47, %struct.basic_block_def** %new_bb, align 8, !dbg !5406
  br label %do.body, !dbg !5407

do.body:                                          ; preds = %if.end39
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb_, metadata !5408, metadata !DIExpression()), !dbg !5410
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !5410
  store %struct.basic_block_def* %45, %struct.basic_block_def** %bb_, align 8, !dbg !5410
  %46 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_, align 8, !dbg !5410
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %46, i32 0, i32 13, !dbg !5410
  %47 = load i32, i32* %flags, align 8, !dbg !5410
  %and = and i32 %47, -97, !dbg !5410
  %48 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5410
  %flags48 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %48, i32 0, i32 13, !dbg !5410
  %49 = load i32, i32* %flags48, align 8, !dbg !5410
  %and49 = and i32 %49, 96, !dbg !5410
  %or = or i32 %and, %and49, !dbg !5410
  %50 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_, align 8, !dbg !5410
  %flags50 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %50, i32 0, i32 13, !dbg !5410
  store i32 %or, i32* %flags50, align 8, !dbg !5410
  br label %do.end, !dbg !5410

do.end:                                           ; preds = %do.body
  %51 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5411
  %52 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5412
  %il51 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %52, i32 0, i32 7, !dbg !5412
  %rtl52 = bitcast %union.basic_block_il_dependent* %il51 to %struct.rtl_bb_info**, !dbg !5412
  %53 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl52, align 8, !dbg !5412
  %end_53 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %53, i32 0, i32 1, !dbg !5412
  store %struct.rtx_def* %51, %struct.rtx_def** %end_53, align 8, !dbg !5413
  %54 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5414
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %54, i32 0, i32 1, !dbg !5415
  %55 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !5415
  %56 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !5416
  %succs54 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %56, i32 0, i32 1, !dbg !5417
  store %struct.VEC_edge_gc* %55, %struct.VEC_edge_gc** %succs54, align 8, !dbg !5418
  %57 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5419
  %succs55 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %57, i32 0, i32 1, !dbg !5420
  store %struct.VEC_edge_gc* null, %struct.VEC_edge_gc** %succs55, align 8, !dbg !5421
  %58 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !5422
  %succs56 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %58, i32 0, i32 1, !dbg !5422
  %call57 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs56), !dbg !5422
  %59 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !5422
  %60 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %59, i32 0, i32 0, !dbg !5422
  %61 = extractvalue { i32, %struct.VEC_edge_gc** } %call57, 0, !dbg !5422
  store i32 %61, i32* %60, align 8, !dbg !5422
  %62 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %59, i32 0, i32 1, !dbg !5422
  %63 = extractvalue { i32, %struct.VEC_edge_gc** } %call57, 1, !dbg !5422
  store %struct.VEC_edge_gc** %63, %struct.VEC_edge_gc*** %62, align 8, !dbg !5422
  %64 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !5422
  %65 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !5422
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %64, i8* align 8 %65, i64 16, i1 false), !dbg !5422
  br label %for.cond, !dbg !5422

for.cond:                                         ; preds = %for.inc, %do.end
  %66 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !5424
  %67 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %66, i32 0, i32 0, !dbg !5424
  %68 = load i32, i32* %67, align 8, !dbg !5424
  %69 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %66, i32 0, i32 1, !dbg !5424
  %70 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %69, align 8, !dbg !5424
  %call58 = call zeroext i8 @ei_cond(i32 %68, %struct.VEC_edge_gc** %70, %struct.edge_def** %e), !dbg !5424
  %tobool59 = icmp ne i8 %call58, 0, !dbg !5422
  br i1 %tobool59, label %for.body, label %for.end, !dbg !5422

for.body:                                         ; preds = %for.cond
  %71 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !5426
  %72 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5427
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %72, i32 0, i32 0, !dbg !5428
  store %struct.basic_block_def* %71, %struct.basic_block_def** %src, align 8, !dbg !5429
  br label %for.inc, !dbg !5427

for.inc:                                          ; preds = %for.body
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !5424
  br label %for.cond, !dbg !5424, !llvm.loop !5430

for.end:                                          ; preds = %for.cond
  %73 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5432
  call void @df_set_bb_dirty(%struct.basic_block_def* %73), !dbg !5433
  %74 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !5434
  ret %struct.basic_block_def* %74, !dbg !5435
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @rtl_move_block_after(%struct.basic_block_def* %bb, %struct.basic_block_def* %after) #0 !dbg !5436 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %after.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5437, metadata !DIExpression()), !dbg !5438
  store %struct.basic_block_def* %after, %struct.basic_block_def** %after.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %after.addr, metadata !5439, metadata !DIExpression()), !dbg !5440
  ret i8 0, !dbg !5441
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @rtl_can_merge_blocks(%struct.basic_block_def* %a, %struct.basic_block_def* %b) #0 !dbg !5442 {
entry:
  %retval = alloca i8, align 1
  %a.addr = alloca %struct.basic_block_def*, align 8
  %b.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %a, %struct.basic_block_def** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %a.addr, metadata !5443, metadata !DIExpression()), !dbg !5444
  store %struct.basic_block_def* %b, %struct.basic_block_def** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %b.addr, metadata !5445, metadata !DIExpression()), !dbg !5446
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !5447
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !5447
  %1 = load i32, i32* %flags, align 8, !dbg !5447
  %and = and i32 %1, 96, !dbg !5447
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !5449
  %flags1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 13, !dbg !5449
  %3 = load i32, i32* %flags1, align 8, !dbg !5449
  %and2 = and i32 %3, 96, !dbg !5449
  %cmp = icmp ne i32 %and, %and2, !dbg !5450
  br i1 %cmp, label %if.then, label %if.end, !dbg !5451

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !5452
  br label %return, !dbg !5452

if.end:                                           ; preds = %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !5453
  %call = call zeroext i8 @single_succ_p(%struct.basic_block_def* %4), !dbg !5454
  %conv = zext i8 %call to i32, !dbg !5454
  %tobool = icmp ne i32 %conv, 0, !dbg !5454
  br i1 %tobool, label %land.lhs.true, label %land.end, !dbg !5455

land.lhs.true:                                    ; preds = %if.end
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !5456
  %call3 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %5), !dbg !5457
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !5458
  %cmp4 = icmp eq %struct.basic_block_def* %call3, %6, !dbg !5459
  br i1 %cmp4, label %land.lhs.true6, label %land.end, !dbg !5460

land.lhs.true6:                                   ; preds = %land.lhs.true
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !5461
  %call7 = call zeroext i8 @single_pred_p(%struct.basic_block_def* %7), !dbg !5462
  %conv8 = zext i8 %call7 to i32, !dbg !5462
  %tobool9 = icmp ne i32 %conv8, 0, !dbg !5462
  br i1 %tobool9, label %land.lhs.true10, label %land.end, !dbg !5463

land.lhs.true10:                                  ; preds = %land.lhs.true6
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !5464
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !5465
  %cmp11 = icmp ne %struct.basic_block_def* %8, %9, !dbg !5466
  br i1 %cmp11, label %land.lhs.true13, label %land.end, !dbg !5467

land.lhs.true13:                                  ; preds = %land.lhs.true10
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !5468
  %call14 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %10), !dbg !5469
  %flags15 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call14, i32 0, i32 7, !dbg !5470
  %11 = load i32, i32* %flags15, align 8, !dbg !5470
  %and16 = and i32 %11, 14, !dbg !5471
  %tobool17 = icmp ne i32 %and16, 0, !dbg !5471
  br i1 %tobool17, label %land.end, label %land.lhs.true18, !dbg !5472

land.lhs.true18:                                  ; preds = %land.lhs.true13
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !5473
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 6, !dbg !5474
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !5474
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !5475
  %cmp19 = icmp eq %struct.basic_block_def* %13, %14, !dbg !5476
  br i1 %cmp19, label %land.lhs.true21, label %land.end, !dbg !5477

land.lhs.true21:                                  ; preds = %land.lhs.true18
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !5478
  %16 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5479
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %16, i64 0, !dbg !5479
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !5479
  %17 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5479
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %17, i32 0, i32 0, !dbg !5479
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !5479
  %cmp22 = icmp ne %struct.basic_block_def* %15, %18, !dbg !5480
  br i1 %cmp22, label %land.lhs.true24, label %land.end, !dbg !5481

land.lhs.true24:                                  ; preds = %land.lhs.true21
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !5482
  %20 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5483
  %add.ptr25 = getelementptr inbounds %struct.function, %struct.function* %20, i64 0, !dbg !5483
  %cfg26 = getelementptr inbounds %struct.function, %struct.function* %add.ptr25, i32 0, i32 1, !dbg !5483
  %21 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg26, align 8, !dbg !5483
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %21, i32 0, i32 1, !dbg !5483
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !5483
  %cmp27 = icmp ne %struct.basic_block_def* %19, %22, !dbg !5484
  br i1 %cmp27, label %land.rhs, label %land.end, !dbg !5485

land.rhs:                                         ; preds = %land.lhs.true24
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !5486
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %23, i32 0, i32 7, !dbg !5486
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !5486
  %24 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !5486
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %24, i32 0, i32 1, !dbg !5486
  %25 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !5486
  %26 = bitcast %struct.rtx_def* %25 to i32*, !dbg !5486
  %bf.load = load i32, i32* %26, align 8, !dbg !5486
  %bf.clear = and i32 %bf.load, 65535, !dbg !5486
  %cmp29 = icmp eq i32 %bf.clear, 9, !dbg !5486
  br i1 %cmp29, label %lor.rhs, label %lor.end, !dbg !5487

lor.rhs:                                          ; preds = %land.rhs
  %27 = load i32, i32* @reload_completed, align 4, !dbg !5488
  %tobool31 = icmp ne i32 %27, 0, !dbg !5488
  br i1 %tobool31, label %cond.true, label %cond.false, !dbg !5488

cond.true:                                        ; preds = %lor.rhs
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !5489
  %il32 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %28, i32 0, i32 7, !dbg !5489
  %rtl33 = bitcast %union.basic_block_il_dependent* %il32 to %struct.rtl_bb_info**, !dbg !5489
  %29 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl33, align 8, !dbg !5489
  %end_34 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %29, i32 0, i32 1, !dbg !5489
  %30 = load %struct.rtx_def*, %struct.rtx_def** %end_34, align 8, !dbg !5489
  %call35 = call i32 @simplejump_p(%struct.rtx_def* %30), !dbg !5490
  br label %cond.end, !dbg !5488

cond.false:                                       ; preds = %lor.rhs
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !5491
  %il36 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %31, i32 0, i32 7, !dbg !5491
  %rtl37 = bitcast %union.basic_block_il_dependent* %il36 to %struct.rtl_bb_info**, !dbg !5491
  %32 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl37, align 8, !dbg !5491
  %end_38 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %32, i32 0, i32 1, !dbg !5491
  %33 = load %struct.rtx_def*, %struct.rtx_def** %end_38, align 8, !dbg !5491
  %call39 = call i32 @onlyjump_p(%struct.rtx_def* %33), !dbg !5492
  br label %cond.end, !dbg !5488

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call35, %cond.true ], [ %call39, %cond.false ], !dbg !5488
  %tobool40 = icmp ne i32 %cond, 0, !dbg !5487
  br label %lor.end, !dbg !5487

lor.end:                                          ; preds = %cond.end, %land.rhs
  %34 = phi i1 [ true, %land.rhs ], [ %tobool40, %cond.end ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %land.lhs.true24, %land.lhs.true21, %land.lhs.true18, %land.lhs.true13, %land.lhs.true10, %land.lhs.true6, %land.lhs.true, %if.end
  %35 = phi i1 [ false, %land.lhs.true24 ], [ false, %land.lhs.true21 ], [ false, %land.lhs.true18 ], [ false, %land.lhs.true13 ], [ false, %land.lhs.true10 ], [ false, %land.lhs.true6 ], [ false, %land.lhs.true ], [ false, %if.end ], [ %34, %lor.end ], !dbg !5493
  %land.ext = zext i1 %35 to i32, !dbg !5485
  %conv41 = trunc i32 %land.ext to i8, !dbg !5494
  store i8 %conv41, i8* %retval, align 1, !dbg !5495
  br label %return, !dbg !5495

return:                                           ; preds = %land.end, %if.then
  %36 = load i8, i8* %retval, align 1, !dbg !5496
  ret i8 %36, !dbg !5496
}

; Function Attrs: noinline nounwind uwtable
define internal void @rtl_merge_blocks(%struct.basic_block_def* %a, %struct.basic_block_def* %b) #0 !dbg !5497 {
entry:
  %a.addr = alloca %struct.basic_block_def*, align 8
  %b.addr = alloca %struct.basic_block_def*, align 8
  %b_head = alloca %struct.rtx_def*, align 8
  %b_end = alloca %struct.rtx_def*, align 8
  %a_end = alloca %struct.rtx_def*, align 8
  %del_first = alloca %struct.rtx_def*, align 8
  %del_last = alloca %struct.rtx_def*, align 8
  %b_debug_start = alloca %struct.rtx_def*, align 8
  %b_debug_end = alloca %struct.rtx_def*, align 8
  %b_empty = alloca i32, align 4
  %prev = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def* %a, %struct.basic_block_def** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %a.addr, metadata !5498, metadata !DIExpression()), !dbg !5499
  store %struct.basic_block_def* %b, %struct.basic_block_def** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %b.addr, metadata !5500, metadata !DIExpression()), !dbg !5501
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %b_head, metadata !5502, metadata !DIExpression()), !dbg !5503
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !5504
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 7, !dbg !5504
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !5504
  %1 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !5504
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %1, i32 0, i32 0, !dbg !5504
  %2 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !5504
  store %struct.rtx_def* %2, %struct.rtx_def** %b_head, align 8, !dbg !5503
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %b_end, metadata !5505, metadata !DIExpression()), !dbg !5506
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !5507
  %il1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 7, !dbg !5507
  %rtl2 = bitcast %union.basic_block_il_dependent* %il1 to %struct.rtl_bb_info**, !dbg !5507
  %4 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl2, align 8, !dbg !5507
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %4, i32 0, i32 1, !dbg !5507
  %5 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !5507
  store %struct.rtx_def* %5, %struct.rtx_def** %b_end, align 8, !dbg !5506
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %a_end, metadata !5508, metadata !DIExpression()), !dbg !5509
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !5510
  %il3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 7, !dbg !5510
  %rtl4 = bitcast %union.basic_block_il_dependent* %il3 to %struct.rtl_bb_info**, !dbg !5510
  %7 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl4, align 8, !dbg !5510
  %end_5 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %7, i32 0, i32 1, !dbg !5510
  %8 = load %struct.rtx_def*, %struct.rtx_def** %end_5, align 8, !dbg !5510
  store %struct.rtx_def* %8, %struct.rtx_def** %a_end, align 8, !dbg !5509
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %del_first, metadata !5511, metadata !DIExpression()), !dbg !5512
  store %struct.rtx_def* null, %struct.rtx_def** %del_first, align 8, !dbg !5512
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %del_last, metadata !5513, metadata !DIExpression()), !dbg !5514
  store %struct.rtx_def* null, %struct.rtx_def** %del_last, align 8, !dbg !5514
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %b_debug_start, metadata !5515, metadata !DIExpression()), !dbg !5516
  %9 = load %struct.rtx_def*, %struct.rtx_def** %b_end, align 8, !dbg !5517
  store %struct.rtx_def* %9, %struct.rtx_def** %b_debug_start, align 8, !dbg !5516
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %b_debug_end, metadata !5518, metadata !DIExpression()), !dbg !5519
  %10 = load %struct.rtx_def*, %struct.rtx_def** %b_end, align 8, !dbg !5520
  store %struct.rtx_def* %10, %struct.rtx_def** %b_debug_end, align 8, !dbg !5519
  call void @llvm.dbg.declare(metadata i32* %b_empty, metadata !5521, metadata !DIExpression()), !dbg !5522
  store i32 0, i32* %b_empty, align 4, !dbg !5522
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5523
  %tobool = icmp ne %struct._IO_FILE* %11, null, !dbg !5523
  br i1 %tobool, label %if.then, label %if.end, !dbg !5525

if.then:                                          ; preds = %entry
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5526
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !5527
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 9, !dbg !5528
  %14 = load i32, i32* %index, align 8, !dbg !5528
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !5529
  %index6 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %15, i32 0, i32 9, !dbg !5530
  %16 = load i32, i32* %index6, align 8, !dbg !5530
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.36, i64 0, i64 0), i32 %14, i32 %16), !dbg !5531
  br label %if.end, !dbg !5531

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond, !dbg !5532

while.cond:                                       ; preds = %while.body, %if.end
  %17 = load %struct.rtx_def*, %struct.rtx_def** %b_end, align 8, !dbg !5533
  %18 = bitcast %struct.rtx_def* %17 to i32*, !dbg !5533
  %bf.load = load i32, i32* %18, align 8, !dbg !5533
  %bf.clear = and i32 %bf.load, 65535, !dbg !5533
  %cmp = icmp eq i32 %bf.clear, 7, !dbg !5533
  br i1 %cmp, label %while.body, label %while.end, !dbg !5532

while.body:                                       ; preds = %while.cond
  %19 = load %struct.rtx_def*, %struct.rtx_def** %b_end, align 8, !dbg !5534
  store %struct.rtx_def* %19, %struct.rtx_def** %b_debug_start, align 8, !dbg !5534
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !5534
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5534
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !5534
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !5534
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5534
  store %struct.rtx_def* %20, %struct.rtx_def** %b_end, align 8, !dbg !5535
  br label %while.cond, !dbg !5532, !llvm.loop !5536

while.end:                                        ; preds = %while.cond
  %21 = load %struct.rtx_def*, %struct.rtx_def** %b_head, align 8, !dbg !5537
  %22 = bitcast %struct.rtx_def* %21 to i32*, !dbg !5537
  %bf.load7 = load i32, i32* %22, align 8, !dbg !5537
  %bf.clear8 = and i32 %bf.load7, 65535, !dbg !5537
  %cmp9 = icmp eq i32 %bf.clear8, 12, !dbg !5537
  br i1 %cmp9, label %if.then10, label %if.end18, !dbg !5539

if.then10:                                        ; preds = %while.end
  %23 = load %struct.rtx_def*, %struct.rtx_def** %b_head, align 8, !dbg !5540
  %24 = load %struct.rtx_def*, %struct.rtx_def** %b_end, align 8, !dbg !5543
  %cmp11 = icmp eq %struct.rtx_def* %23, %24, !dbg !5544
  br i1 %cmp11, label %if.then12, label %if.end13, !dbg !5545

if.then12:                                        ; preds = %if.then10
  store i32 1, i32* %b_empty, align 4, !dbg !5546
  br label %if.end13, !dbg !5547

if.end13:                                         ; preds = %if.then12, %if.then10
  %25 = load %struct.rtx_def*, %struct.rtx_def** %b_head, align 8, !dbg !5548
  store %struct.rtx_def* %25, %struct.rtx_def** %del_last, align 8, !dbg !5549
  store %struct.rtx_def* %25, %struct.rtx_def** %del_first, align 8, !dbg !5550
  %26 = load %struct.rtx_def*, %struct.rtx_def** %b_head, align 8, !dbg !5551
  %u14 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1, !dbg !5551
  %fld15 = bitcast %union.u* %u14 to [1 x %union.rtunion_def]*, !dbg !5551
  %arrayidx16 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld15, i64 0, i64 2, !dbg !5551
  %rt_rtx17 = bitcast %union.rtunion_def* %arrayidx16 to %struct.rtx_def**, !dbg !5551
  %27 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx17, align 8, !dbg !5551
  store %struct.rtx_def* %27, %struct.rtx_def** %b_head, align 8, !dbg !5552
  br label %if.end18, !dbg !5553

if.end18:                                         ; preds = %if.end13, %while.end
  %28 = load %struct.rtx_def*, %struct.rtx_def** %b_head, align 8, !dbg !5554
  %29 = bitcast %struct.rtx_def* %28 to i32*, !dbg !5554
  %bf.load19 = load i32, i32* %29, align 8, !dbg !5554
  %bf.clear20 = and i32 %bf.load19, 65535, !dbg !5554
  %cmp21 = icmp eq i32 %bf.clear20, 13, !dbg !5554
  br i1 %cmp21, label %land.lhs.true, label %if.end37, !dbg !5554

land.lhs.true:                                    ; preds = %if.end18
  %30 = load %struct.rtx_def*, %struct.rtx_def** %b_head, align 8, !dbg !5554
  %u22 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1, !dbg !5554
  %fld23 = bitcast %union.u* %u22 to [1 x %union.rtunion_def]*, !dbg !5554
  %arrayidx24 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld23, i64 0, i64 5, !dbg !5554
  %rt_int = bitcast %union.rtunion_def* %arrayidx24 to i32*, !dbg !5554
  %31 = load i32, i32* %rt_int, align 8, !dbg !5554
  %cmp25 = icmp eq i32 %31, 10, !dbg !5554
  br i1 %cmp25, label %if.then26, label %if.end37, !dbg !5556

if.then26:                                        ; preds = %land.lhs.true
  %32 = load %struct.rtx_def*, %struct.rtx_def** %b_head, align 8, !dbg !5557
  %33 = load %struct.rtx_def*, %struct.rtx_def** %b_end, align 8, !dbg !5560
  %cmp27 = icmp eq %struct.rtx_def* %32, %33, !dbg !5561
  br i1 %cmp27, label %if.then28, label %if.end29, !dbg !5562

if.then28:                                        ; preds = %if.then26
  store i32 1, i32* %b_empty, align 4, !dbg !5563
  br label %if.end29, !dbg !5564

if.end29:                                         ; preds = %if.then28, %if.then26
  %34 = load %struct.rtx_def*, %struct.rtx_def** %del_last, align 8, !dbg !5565
  %tobool30 = icmp ne %struct.rtx_def* %34, null, !dbg !5565
  br i1 %tobool30, label %if.end32, label %if.then31, !dbg !5567

if.then31:                                        ; preds = %if.end29
  %35 = load %struct.rtx_def*, %struct.rtx_def** %b_head, align 8, !dbg !5568
  store %struct.rtx_def* %35, %struct.rtx_def** %del_first, align 8, !dbg !5569
  br label %if.end32, !dbg !5570

if.end32:                                         ; preds = %if.then31, %if.end29
  %36 = load %struct.rtx_def*, %struct.rtx_def** %b_head, align 8, !dbg !5571
  store %struct.rtx_def* %36, %struct.rtx_def** %del_last, align 8, !dbg !5572
  %37 = load %struct.rtx_def*, %struct.rtx_def** %b_head, align 8, !dbg !5573
  %u33 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1, !dbg !5573
  %fld34 = bitcast %union.u* %u33 to [1 x %union.rtunion_def]*, !dbg !5573
  %arrayidx35 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld34, i64 0, i64 2, !dbg !5573
  %rt_rtx36 = bitcast %union.rtunion_def* %arrayidx35 to %struct.rtx_def**, !dbg !5573
  %38 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx36, align 8, !dbg !5573
  store %struct.rtx_def* %38, %struct.rtx_def** %b_head, align 8, !dbg !5574
  br label %if.end37, !dbg !5575

if.end37:                                         ; preds = %if.end32, %land.lhs.true, %if.end18
  %39 = load %struct.rtx_def*, %struct.rtx_def** %a_end, align 8, !dbg !5576
  %40 = bitcast %struct.rtx_def* %39 to i32*, !dbg !5576
  %bf.load38 = load i32, i32* %40, align 8, !dbg !5576
  %bf.clear39 = and i32 %bf.load38, 65535, !dbg !5576
  %cmp40 = icmp eq i32 %bf.clear39, 9, !dbg !5576
  br i1 %cmp40, label %if.then41, label %if.else, !dbg !5578

if.then41:                                        ; preds = %if.end37
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %prev, metadata !5579, metadata !DIExpression()), !dbg !5581
  %41 = load %struct.rtx_def*, %struct.rtx_def** %a_end, align 8, !dbg !5582
  %u42 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1, !dbg !5582
  %fld43 = bitcast %union.u* %u42 to [1 x %union.rtunion_def]*, !dbg !5582
  %arrayidx44 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld43, i64 0, i64 1, !dbg !5582
  %rt_rtx45 = bitcast %union.rtunion_def* %arrayidx44 to %struct.rtx_def**, !dbg !5582
  %42 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx45, align 8, !dbg !5582
  store %struct.rtx_def* %42, %struct.rtx_def** %prev, align 8, !dbg !5584
  br label %for.cond, !dbg !5585

for.cond:                                         ; preds = %for.inc, %if.then41
  %43 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !5586
  %44 = bitcast %struct.rtx_def* %43 to i32*, !dbg !5586
  %bf.load46 = load i32, i32* %44, align 8, !dbg !5586
  %bf.clear47 = and i32 %bf.load46, 65535, !dbg !5586
  %cmp48 = icmp eq i32 %bf.clear47, 13, !dbg !5586
  br i1 %cmp48, label %lor.lhs.false, label %if.then63, !dbg !5589

lor.lhs.false:                                    ; preds = %for.cond
  %45 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !5590
  %46 = bitcast %struct.rtx_def* %45 to i32*, !dbg !5590
  %bf.load49 = load i32, i32* %46, align 8, !dbg !5590
  %bf.clear50 = and i32 %bf.load49, 65535, !dbg !5590
  %cmp51 = icmp eq i32 %bf.clear50, 13, !dbg !5590
  br i1 %cmp51, label %land.lhs.true52, label %lor.lhs.false58, !dbg !5590

land.lhs.true52:                                  ; preds = %lor.lhs.false
  %47 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !5590
  %u53 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %47, i32 0, i32 1, !dbg !5590
  %fld54 = bitcast %union.u* %u53 to [1 x %union.rtunion_def]*, !dbg !5590
  %arrayidx55 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld54, i64 0, i64 5, !dbg !5590
  %rt_int56 = bitcast %union.rtunion_def* %arrayidx55 to i32*, !dbg !5590
  %48 = load i32, i32* %rt_int56, align 8, !dbg !5590
  %cmp57 = icmp eq i32 %48, 10, !dbg !5590
  br i1 %cmp57, label %if.then63, label %lor.lhs.false58, !dbg !5591

lor.lhs.false58:                                  ; preds = %land.lhs.true52, %lor.lhs.false
  %49 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !5592
  %50 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !5593
  %il59 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %50, i32 0, i32 7, !dbg !5593
  %rtl60 = bitcast %union.basic_block_il_dependent* %il59 to %struct.rtl_bb_info**, !dbg !5593
  %51 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl60, align 8, !dbg !5593
  %head_61 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %51, i32 0, i32 0, !dbg !5593
  %52 = load %struct.rtx_def*, %struct.rtx_def** %head_61, align 8, !dbg !5593
  %cmp62 = icmp eq %struct.rtx_def* %49, %52, !dbg !5594
  br i1 %cmp62, label %if.then63, label %if.end64, !dbg !5595

if.then63:                                        ; preds = %lor.lhs.false58, %land.lhs.true52, %for.cond
  br label %for.end, !dbg !5596

if.end64:                                         ; preds = %lor.lhs.false58
  br label %for.inc, !dbg !5593

for.inc:                                          ; preds = %if.end64
  %53 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !5597
  %u65 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %53, i32 0, i32 1, !dbg !5597
  %fld66 = bitcast %union.u* %u65 to [1 x %union.rtunion_def]*, !dbg !5597
  %arrayidx67 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld66, i64 0, i64 1, !dbg !5597
  %rt_rtx68 = bitcast %union.rtunion_def* %arrayidx67 to %struct.rtx_def**, !dbg !5597
  %54 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx68, align 8, !dbg !5597
  store %struct.rtx_def* %54, %struct.rtx_def** %prev, align 8, !dbg !5598
  br label %for.cond, !dbg !5599, !llvm.loop !5600

for.end:                                          ; preds = %if.then63
  %55 = load %struct.rtx_def*, %struct.rtx_def** %a_end, align 8, !dbg !5603
  store %struct.rtx_def* %55, %struct.rtx_def** %del_first, align 8, !dbg !5604
  %56 = load %struct.rtx_def*, %struct.rtx_def** %del_first, align 8, !dbg !5605
  %u69 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %56, i32 0, i32 1, !dbg !5605
  %fld70 = bitcast %union.u* %u69 to [1 x %union.rtunion_def]*, !dbg !5605
  %arrayidx71 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld70, i64 0, i64 1, !dbg !5605
  %rt_rtx72 = bitcast %union.rtunion_def* %arrayidx71 to %struct.rtx_def**, !dbg !5605
  %57 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx72, align 8, !dbg !5605
  store %struct.rtx_def* %57, %struct.rtx_def** %a_end, align 8, !dbg !5606
  br label %if.end86, !dbg !5607

if.else:                                          ; preds = %if.end37
  %58 = load %struct.rtx_def*, %struct.rtx_def** %a_end, align 8, !dbg !5608
  %u73 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %58, i32 0, i32 1, !dbg !5608
  %fld74 = bitcast %union.u* %u73 to [1 x %union.rtunion_def]*, !dbg !5608
  %arrayidx75 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld74, i64 0, i64 2, !dbg !5608
  %rt_rtx76 = bitcast %union.rtunion_def* %arrayidx75 to %struct.rtx_def**, !dbg !5608
  %59 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx76, align 8, !dbg !5608
  %60 = bitcast %struct.rtx_def* %59 to i32*, !dbg !5608
  %bf.load77 = load i32, i32* %60, align 8, !dbg !5608
  %bf.clear78 = and i32 %bf.load77, 65535, !dbg !5608
  %cmp79 = icmp eq i32 %bf.clear78, 11, !dbg !5608
  br i1 %cmp79, label %if.then80, label %if.end85, !dbg !5610

if.then80:                                        ; preds = %if.else
  %61 = load %struct.rtx_def*, %struct.rtx_def** %a_end, align 8, !dbg !5611
  %u81 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %61, i32 0, i32 1, !dbg !5611
  %fld82 = bitcast %union.u* %u81 to [1 x %union.rtunion_def]*, !dbg !5611
  %arrayidx83 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld82, i64 0, i64 2, !dbg !5611
  %rt_rtx84 = bitcast %union.rtunion_def* %arrayidx83 to %struct.rtx_def**, !dbg !5611
  %62 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx84, align 8, !dbg !5611
  store %struct.rtx_def* %62, %struct.rtx_def** %del_first, align 8, !dbg !5612
  br label %if.end85, !dbg !5613

if.end85:                                         ; preds = %if.then80, %if.else
  br label %if.end86

if.end86:                                         ; preds = %if.end85, %for.end
  %63 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !5614
  %il87 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %63, i32 0, i32 7, !dbg !5614
  %rtl88 = bitcast %union.basic_block_il_dependent* %il87 to %struct.rtl_bb_info**, !dbg !5614
  %64 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl88, align 8, !dbg !5614
  %head_89 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %64, i32 0, i32 0, !dbg !5614
  store %struct.rtx_def* null, %struct.rtx_def** %head_89, align 8, !dbg !5615
  %65 = load %struct.rtx_def*, %struct.rtx_def** %del_first, align 8, !dbg !5616
  %66 = load %struct.rtx_def*, %struct.rtx_def** %del_last, align 8, !dbg !5617
  call void @delete_insn_chain(%struct.rtx_def* %65, %struct.rtx_def* %66, i8 zeroext 1), !dbg !5618
  %67 = load i32, i32* %b_empty, align 4, !dbg !5619
  %tobool90 = icmp ne i32 %67, 0, !dbg !5619
  br i1 %tobool90, label %if.else92, label %if.then91, !dbg !5621

if.then91:                                        ; preds = %if.end86
  %68 = load %struct.rtx_def*, %struct.rtx_def** %a_end, align 8, !dbg !5622
  %69 = load %struct.rtx_def*, %struct.rtx_def** %b_debug_end, align 8, !dbg !5624
  %70 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !5625
  call void @update_bb_for_insn_chain(%struct.rtx_def* %68, %struct.rtx_def* %69, %struct.basic_block_def* %70), !dbg !5626
  %71 = load %struct.rtx_def*, %struct.rtx_def** %b_debug_end, align 8, !dbg !5627
  store %struct.rtx_def* %71, %struct.rtx_def** %a_end, align 8, !dbg !5628
  br label %if.end111, !dbg !5629

if.else92:                                        ; preds = %if.end86
  %72 = load %struct.rtx_def*, %struct.rtx_def** %b_end, align 8, !dbg !5630
  %73 = load %struct.rtx_def*, %struct.rtx_def** %b_debug_end, align 8, !dbg !5632
  %cmp93 = icmp ne %struct.rtx_def* %72, %73, !dbg !5633
  br i1 %cmp93, label %if.then94, label %if.end110, !dbg !5634

if.then94:                                        ; preds = %if.else92
  %74 = load %struct.rtx_def*, %struct.rtx_def** %a_end, align 8, !dbg !5635
  %u95 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %74, i32 0, i32 1, !dbg !5635
  %fld96 = bitcast %union.u* %u95 to [1 x %union.rtunion_def]*, !dbg !5635
  %arrayidx97 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld96, i64 0, i64 2, !dbg !5635
  %rt_rtx98 = bitcast %union.rtunion_def* %arrayidx97 to %struct.rtx_def**, !dbg !5635
  %75 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx98, align 8, !dbg !5635
  %76 = load %struct.rtx_def*, %struct.rtx_def** %b_debug_start, align 8, !dbg !5638
  %cmp99 = icmp ne %struct.rtx_def* %75, %76, !dbg !5639
  br i1 %cmp99, label %if.then100, label %if.end109, !dbg !5640

if.then100:                                       ; preds = %if.then94
  %77 = load %struct.rtx_def*, %struct.rtx_def** %a_end, align 8, !dbg !5641
  %u101 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %77, i32 0, i32 1, !dbg !5641
  %fld102 = bitcast %union.u* %u101 to [1 x %union.rtunion_def]*, !dbg !5641
  %arrayidx103 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld102, i64 0, i64 2, !dbg !5641
  %rt_rtx104 = bitcast %union.rtunion_def* %arrayidx103 to %struct.rtx_def**, !dbg !5641
  %78 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx104, align 8, !dbg !5641
  %79 = load %struct.rtx_def*, %struct.rtx_def** %b_debug_start, align 8, !dbg !5642
  %u105 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %79, i32 0, i32 1, !dbg !5642
  %fld106 = bitcast %union.u* %u105 to [1 x %union.rtunion_def]*, !dbg !5642
  %arrayidx107 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld106, i64 0, i64 1, !dbg !5642
  %rt_rtx108 = bitcast %union.rtunion_def* %arrayidx107 to %struct.rtx_def**, !dbg !5642
  %80 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx108, align 8, !dbg !5642
  %81 = load %struct.rtx_def*, %struct.rtx_def** %b_debug_end, align 8, !dbg !5643
  call void @reorder_insns_nobb(%struct.rtx_def* %78, %struct.rtx_def* %80, %struct.rtx_def* %81), !dbg !5644
  br label %if.end109, !dbg !5644

if.end109:                                        ; preds = %if.then100, %if.then94
  %82 = load %struct.rtx_def*, %struct.rtx_def** %b_debug_start, align 8, !dbg !5645
  %83 = load %struct.rtx_def*, %struct.rtx_def** %b_debug_end, align 8, !dbg !5646
  %84 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !5647
  call void @update_bb_for_insn_chain(%struct.rtx_def* %82, %struct.rtx_def* %83, %struct.basic_block_def* %84), !dbg !5648
  %85 = load %struct.rtx_def*, %struct.rtx_def** %b_debug_end, align 8, !dbg !5649
  store %struct.rtx_def* %85, %struct.rtx_def** %a_end, align 8, !dbg !5650
  br label %if.end110, !dbg !5651

if.end110:                                        ; preds = %if.end109, %if.else92
  br label %if.end111

if.end111:                                        ; preds = %if.end110, %if.then91
  %86 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !5652
  %index112 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %86, i32 0, i32 9, !dbg !5653
  %87 = load i32, i32* %index112, align 8, !dbg !5653
  call void @df_bb_delete(i32 %87), !dbg !5654
  %88 = load %struct.rtx_def*, %struct.rtx_def** %a_end, align 8, !dbg !5655
  %89 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !5656
  %il113 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %89, i32 0, i32 7, !dbg !5656
  %rtl114 = bitcast %union.basic_block_il_dependent* %il113 to %struct.rtl_bb_info**, !dbg !5656
  %90 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl114, align 8, !dbg !5656
  %end_115 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %90, i32 0, i32 1, !dbg !5656
  store %struct.rtx_def* %88, %struct.rtx_def** %end_115, align 8, !dbg !5657
  ret void, !dbg !5658
}

declare dso_local void @rtl_predict_edge(%struct.edge_def*, i32, i32) #2

declare dso_local zeroext i8 @rtl_predicted_by_p(%struct.basic_block_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @rtl_split_edge(%struct.edge_def* %edge_in) #0 !dbg !5659 {
entry:
  %edge_in.addr = alloca %struct.edge_def*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %before = alloca %struct.rtx_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %bb_ = alloca %struct.basic_block_def*, align 8
  %bb_42 = alloca %struct.basic_block_def*, align 8
  %redirected = alloca %struct.edge_def*, align 8
  store %struct.edge_def* %edge_in, %struct.edge_def** %edge_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %edge_in.addr, metadata !5660, metadata !DIExpression()), !dbg !5661
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !5662, metadata !DIExpression()), !dbg !5663
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %before, metadata !5664, metadata !DIExpression()), !dbg !5665
  %0 = load %struct.edge_def*, %struct.edge_def** %edge_in.addr, align 8, !dbg !5666
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %0, i32 0, i32 7, !dbg !5666
  %1 = load i32, i32* %flags, align 8, !dbg !5666
  %and = and i32 %1, 2, !dbg !5666
  %tobool = icmp ne i32 %and, 0, !dbg !5666
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5666

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 1362, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5666
  br label %cond.end, !dbg !5666

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5666

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5666
  %2 = load %struct.edge_def*, %struct.edge_def** %edge_in.addr, align 8, !dbg !5667
  %flags1 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %2, i32 0, i32 7, !dbg !5669
  %3 = load i32, i32* %flags1, align 8, !dbg !5669
  %and2 = and i32 %3, 1, !dbg !5670
  %cmp = icmp eq i32 %and2, 0, !dbg !5671
  br i1 %cmp, label %if.then, label %if.end13, !dbg !5672

if.then:                                          ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !5673, metadata !DIExpression()), !dbg !5675
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !5676, metadata !DIExpression()), !dbg !5677
  %4 = load %struct.edge_def*, %struct.edge_def** %edge_in.addr, align 8, !dbg !5678
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %4, i32 0, i32 1, !dbg !5678
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !5678
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %5, i32 0, i32 0, !dbg !5678
  %call = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !5678
  %6 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !5678
  %7 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %6, i32 0, i32 0, !dbg !5678
  %8 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !5678
  store i32 %8, i32* %7, align 8, !dbg !5678
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %6, i32 0, i32 1, !dbg !5678
  %10 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !5678
  store %struct.VEC_edge_gc** %10, %struct.VEC_edge_gc*** %9, align 8, !dbg !5678
  %11 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !5678
  %12 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !5678
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* align 8 %12, i64 16, i1 false), !dbg !5678
  br label %for.cond, !dbg !5678

for.cond:                                         ; preds = %for.inc, %if.then
  %13 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !5680
  %14 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %13, i32 0, i32 0, !dbg !5680
  %15 = load i32, i32* %14, align 8, !dbg !5680
  %16 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %13, i32 0, i32 1, !dbg !5680
  %17 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %16, align 8, !dbg !5680
  %call3 = call zeroext i8 @ei_cond(i32 %15, %struct.VEC_edge_gc** %17, %struct.edge_def** %e), !dbg !5680
  %tobool4 = icmp ne i8 %call3, 0, !dbg !5678
  br i1 %tobool4, label %for.body, label %for.end, !dbg !5678

for.body:                                         ; preds = %for.cond
  %18 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5682
  %flags5 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %18, i32 0, i32 7, !dbg !5684
  %19 = load i32, i32* %flags5, align 8, !dbg !5684
  %and6 = and i32 %19, 1, !dbg !5685
  %tobool7 = icmp ne i32 %and6, 0, !dbg !5685
  br i1 %tobool7, label %if.then8, label %if.end, !dbg !5686

if.then8:                                         ; preds = %for.body
  br label %for.end, !dbg !5687

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !5688

for.inc:                                          ; preds = %if.end
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !5680
  br label %for.cond, !dbg !5680, !llvm.loop !5689

for.end:                                          ; preds = %if.then8, %for.cond
  %20 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5691
  %tobool9 = icmp ne %struct.edge_def* %20, null, !dbg !5691
  br i1 %tobool9, label %if.then10, label %if.end12, !dbg !5693

if.then10:                                        ; preds = %for.end
  %21 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5694
  %call11 = call %struct.basic_block_def* @force_nonfallthru(%struct.edge_def* %21), !dbg !5695
  br label %if.end12, !dbg !5695

if.end12:                                         ; preds = %if.then10, %for.end
  br label %if.end13, !dbg !5696

if.end13:                                         ; preds = %if.end12, %cond.end
  %22 = load %struct.edge_def*, %struct.edge_def** %edge_in.addr, align 8, !dbg !5697
  %dest14 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %22, i32 0, i32 1, !dbg !5699
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %dest14, align 8, !dbg !5699
  %24 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5700
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %24, i64 0, !dbg !5700
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !5700
  %25 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5700
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %25, i32 0, i32 1, !dbg !5700
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !5700
  %cmp15 = icmp ne %struct.basic_block_def* %23, %26, !dbg !5701
  br i1 %cmp15, label %if.then16, label %if.else, !dbg !5702

if.then16:                                        ; preds = %if.end13
  %27 = load %struct.edge_def*, %struct.edge_def** %edge_in.addr, align 8, !dbg !5703
  %dest17 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %27, i32 0, i32 1, !dbg !5703
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %dest17, align 8, !dbg !5703
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %28, i32 0, i32 7, !dbg !5703
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !5703
  %29 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !5703
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %29, i32 0, i32 0, !dbg !5703
  %30 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !5703
  store %struct.rtx_def* %30, %struct.rtx_def** %before, align 8, !dbg !5704
  br label %if.end18, !dbg !5705

if.else:                                          ; preds = %if.end13
  store %struct.rtx_def* null, %struct.rtx_def** %before, align 8, !dbg !5706
  br label %if.end18

if.end18:                                         ; preds = %if.else, %if.then16
  %31 = load %struct.edge_def*, %struct.edge_def** %edge_in.addr, align 8, !dbg !5707
  %flags19 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %31, i32 0, i32 7, !dbg !5709
  %32 = load i32, i32* %flags19, align 8, !dbg !5709
  %and20 = and i32 %32, 1, !dbg !5710
  %tobool21 = icmp ne i32 %and20, 0, !dbg !5710
  br i1 %tobool21, label %land.lhs.true, label %if.else38, !dbg !5711

land.lhs.true:                                    ; preds = %if.end18
  %33 = load %struct.edge_def*, %struct.edge_def** %edge_in.addr, align 8, !dbg !5712
  %dest22 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %33, i32 0, i32 1, !dbg !5713
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %dest22, align 8, !dbg !5713
  %35 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5714
  %add.ptr23 = getelementptr inbounds %struct.function, %struct.function* %35, i64 0, !dbg !5714
  %cfg24 = getelementptr inbounds %struct.function, %struct.function* %add.ptr23, i32 0, i32 1, !dbg !5714
  %36 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg24, align 8, !dbg !5714
  %x_exit_block_ptr25 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %36, i32 0, i32 1, !dbg !5714
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr25, align 8, !dbg !5714
  %cmp26 = icmp eq %struct.basic_block_def* %34, %37, !dbg !5715
  br i1 %cmp26, label %if.then27, label %if.else38, !dbg !5716

if.then27:                                        ; preds = %land.lhs.true
  %38 = load %struct.edge_def*, %struct.edge_def** %edge_in.addr, align 8, !dbg !5717
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %38, i32 0, i32 0, !dbg !5717
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !5717
  %il28 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %39, i32 0, i32 7, !dbg !5717
  %rtl29 = bitcast %union.basic_block_il_dependent* %il28 to %struct.rtl_bb_info**, !dbg !5717
  %40 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl29, align 8, !dbg !5717
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %40, i32 0, i32 1, !dbg !5717
  %41 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !5717
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1, !dbg !5717
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5717
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !5717
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !5717
  %42 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5717
  store %struct.rtx_def* %42, %struct.rtx_def** %before, align 8, !dbg !5719
  %43 = load %struct.rtx_def*, %struct.rtx_def** %before, align 8, !dbg !5720
  %44 = bitcast %struct.rtx_def* %43 to i8*, !dbg !5720
  %45 = load %struct.edge_def*, %struct.edge_def** %edge_in.addr, align 8, !dbg !5721
  %src30 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %45, i32 0, i32 0, !dbg !5722
  %46 = load %struct.basic_block_def*, %struct.basic_block_def** %src30, align 8, !dbg !5722
  %call31 = call %struct.basic_block_def* @create_basic_block(i8* %44, i8* null, %struct.basic_block_def* %46), !dbg !5723
  store %struct.basic_block_def* %call31, %struct.basic_block_def** %bb, align 8, !dbg !5724
  br label %do.body, !dbg !5725

do.body:                                          ; preds = %if.then27
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb_, metadata !5726, metadata !DIExpression()), !dbg !5728
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5728
  store %struct.basic_block_def* %47, %struct.basic_block_def** %bb_, align 8, !dbg !5728
  %48 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_, align 8, !dbg !5728
  %flags32 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %48, i32 0, i32 13, !dbg !5728
  %49 = load i32, i32* %flags32, align 8, !dbg !5728
  %and33 = and i32 %49, -97, !dbg !5728
  %50 = load %struct.edge_def*, %struct.edge_def** %edge_in.addr, align 8, !dbg !5728
  %src34 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %50, i32 0, i32 0, !dbg !5728
  %51 = load %struct.basic_block_def*, %struct.basic_block_def** %src34, align 8, !dbg !5728
  %flags35 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %51, i32 0, i32 13, !dbg !5728
  %52 = load i32, i32* %flags35, align 8, !dbg !5728
  %and36 = and i32 %52, 96, !dbg !5728
  %or = or i32 %and33, %and36, !dbg !5728
  %53 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_, align 8, !dbg !5728
  %flags37 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %53, i32 0, i32 13, !dbg !5728
  store i32 %or, i32* %flags37, align 8, !dbg !5728
  br label %do.end, !dbg !5728

do.end:                                           ; preds = %do.body
  br label %if.end51, !dbg !5729

if.else38:                                        ; preds = %land.lhs.true, %if.end18
  %54 = load %struct.rtx_def*, %struct.rtx_def** %before, align 8, !dbg !5730
  %55 = bitcast %struct.rtx_def* %54 to i8*, !dbg !5730
  %56 = load %struct.edge_def*, %struct.edge_def** %edge_in.addr, align 8, !dbg !5732
  %dest39 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %56, i32 0, i32 1, !dbg !5733
  %57 = load %struct.basic_block_def*, %struct.basic_block_def** %dest39, align 8, !dbg !5733
  %prev_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %57, i32 0, i32 5, !dbg !5734
  %58 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb, align 8, !dbg !5734
  %call40 = call %struct.basic_block_def* @create_basic_block(i8* %55, i8* null, %struct.basic_block_def* %58), !dbg !5735
  store %struct.basic_block_def* %call40, %struct.basic_block_def** %bb, align 8, !dbg !5736
  br label %do.body41, !dbg !5737

do.body41:                                        ; preds = %if.else38
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb_42, metadata !5738, metadata !DIExpression()), !dbg !5740
  %59 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5740
  store %struct.basic_block_def* %59, %struct.basic_block_def** %bb_42, align 8, !dbg !5740
  %60 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_42, align 8, !dbg !5740
  %flags43 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %60, i32 0, i32 13, !dbg !5740
  %61 = load i32, i32* %flags43, align 8, !dbg !5740
  %and44 = and i32 %61, -97, !dbg !5740
  %62 = load %struct.edge_def*, %struct.edge_def** %edge_in.addr, align 8, !dbg !5740
  %dest45 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %62, i32 0, i32 1, !dbg !5740
  %63 = load %struct.basic_block_def*, %struct.basic_block_def** %dest45, align 8, !dbg !5740
  %flags46 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %63, i32 0, i32 13, !dbg !5740
  %64 = load i32, i32* %flags46, align 8, !dbg !5740
  %and47 = and i32 %64, 96, !dbg !5740
  %or48 = or i32 %and44, %and47, !dbg !5740
  %65 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_42, align 8, !dbg !5740
  %flags49 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %65, i32 0, i32 13, !dbg !5740
  store i32 %or48, i32* %flags49, align 8, !dbg !5740
  br label %do.end50, !dbg !5740

do.end50:                                         ; preds = %do.body41
  br label %if.end51

if.end51:                                         ; preds = %do.end50, %do.end
  %66 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5741
  %67 = load %struct.edge_def*, %struct.edge_def** %edge_in.addr, align 8, !dbg !5742
  %dest52 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %67, i32 0, i32 1, !dbg !5743
  %68 = load %struct.basic_block_def*, %struct.basic_block_def** %dest52, align 8, !dbg !5743
  %call53 = call %struct.edge_def* @make_single_succ_edge(%struct.basic_block_def* %66, %struct.basic_block_def* %68, i32 1), !dbg !5744
  %69 = load %struct.edge_def*, %struct.edge_def** %edge_in.addr, align 8, !dbg !5745
  %flags54 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %69, i32 0, i32 7, !dbg !5747
  %70 = load i32, i32* %flags54, align 8, !dbg !5747
  %and55 = and i32 %70, 1, !dbg !5748
  %cmp56 = icmp eq i32 %and55, 0, !dbg !5749
  br i1 %cmp56, label %if.then57, label %if.else64, !dbg !5750

if.then57:                                        ; preds = %if.end51
  call void @llvm.dbg.declare(metadata %struct.edge_def** %redirected, metadata !5751, metadata !DIExpression()), !dbg !5753
  %71 = load %struct.edge_def*, %struct.edge_def** %edge_in.addr, align 8, !dbg !5754
  %72 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5755
  %call58 = call %struct.edge_def* @redirect_edge_and_branch(%struct.edge_def* %71, %struct.basic_block_def* %72), !dbg !5756
  store %struct.edge_def* %call58, %struct.edge_def** %redirected, align 8, !dbg !5753
  %73 = load %struct.edge_def*, %struct.edge_def** %redirected, align 8, !dbg !5757
  %tobool59 = icmp ne %struct.edge_def* %73, null, !dbg !5757
  br i1 %tobool59, label %cond.false61, label %cond.true60, !dbg !5757

cond.true60:                                      ; preds = %if.then57
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 1407, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5757
  br label %cond.end62, !dbg !5757

cond.false61:                                     ; preds = %if.then57
  br label %cond.end62, !dbg !5757

cond.end62:                                       ; preds = %cond.false61, %cond.true60
  %cond63 = phi i32 [ 0, %cond.true60 ], [ 0, %cond.false61 ], !dbg !5757
  br label %if.end65, !dbg !5758

if.else64:                                        ; preds = %if.end51
  %74 = load %struct.edge_def*, %struct.edge_def** %edge_in.addr, align 8, !dbg !5759
  %75 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5760
  call void @redirect_edge_succ(%struct.edge_def* %74, %struct.basic_block_def* %75), !dbg !5761
  br label %if.end65

if.end65:                                         ; preds = %if.else64, %cond.end62
  %76 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5762
  ret %struct.basic_block_def* %76, !dbg !5763
}

; Function Attrs: noinline nounwind uwtable
define internal void @rtl_make_forwarder_block(%struct.edge_def* %fallthru) #0 !dbg !5764 {
entry:
  %fallthru.addr = alloca %struct.edge_def*, align 8
  store %struct.edge_def* %fallthru, %struct.edge_def** %fallthru.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %fallthru.addr, metadata !5765, metadata !DIExpression()), !dbg !5766
  ret void, !dbg !5767
}

; Function Attrs: noinline nounwind uwtable
define internal void @rtl_tidy_fallthru_edge(%struct.edge_def* %e) #0 !dbg !5768 {
entry:
  %e.addr = alloca %struct.edge_def*, align 8
  %q = alloca %struct.rtx_def*, align 8
  %b = alloca %struct.basic_block_def*, align 8
  %c = alloca %struct.basic_block_def*, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !5769, metadata !DIExpression()), !dbg !5770
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %q, metadata !5771, metadata !DIExpression()), !dbg !5772
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %b, metadata !5773, metadata !DIExpression()), !dbg !5774
  %0 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !5775
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %0, i32 0, i32 0, !dbg !5776
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !5776
  store %struct.basic_block_def* %1, %struct.basic_block_def** %b, align 8, !dbg !5774
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %c, metadata !5777, metadata !DIExpression()), !dbg !5778
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !5779
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 6, !dbg !5780
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !5780
  store %struct.basic_block_def* %3, %struct.basic_block_def** %c, align 8, !dbg !5778
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !5781
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !5781
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !5781
  %5 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !5781
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %5, i32 0, i32 1, !dbg !5781
  %6 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !5781
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !5781
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5781
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !5781
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !5781
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5781
  store %struct.rtx_def* %7, %struct.rtx_def** %q, align 8, !dbg !5783
  br label %for.cond, !dbg !5784

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %q, align 8, !dbg !5785
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %c, align 8, !dbg !5787
  %il1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 7, !dbg !5787
  %rtl2 = bitcast %union.basic_block_il_dependent* %il1 to %struct.rtl_bb_info**, !dbg !5787
  %10 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl2, align 8, !dbg !5787
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %10, i32 0, i32 0, !dbg !5787
  %11 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !5787
  %cmp = icmp ne %struct.rtx_def* %8, %11, !dbg !5788
  br i1 %cmp, label %for.body, label %for.end, !dbg !5789

for.body:                                         ; preds = %for.cond
  %12 = load %struct.rtx_def*, %struct.rtx_def** %q, align 8, !dbg !5790
  %13 = bitcast %struct.rtx_def* %12 to i32*, !dbg !5790
  %bf.load = load i32, i32* %13, align 8, !dbg !5790
  %bf.clear = and i32 %bf.load, 65535, !dbg !5790
  %cmp3 = icmp eq i32 %bf.clear, 8, !dbg !5790
  br i1 %cmp3, label %if.then, label %lor.lhs.false, !dbg !5790

lor.lhs.false:                                    ; preds = %for.body
  %14 = load %struct.rtx_def*, %struct.rtx_def** %q, align 8, !dbg !5790
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !5790
  %bf.load4 = load i32, i32* %15, align 8, !dbg !5790
  %bf.clear5 = and i32 %bf.load4, 65535, !dbg !5790
  %cmp6 = icmp eq i32 %bf.clear5, 7, !dbg !5790
  br i1 %cmp6, label %if.then, label %lor.lhs.false7, !dbg !5790

lor.lhs.false7:                                   ; preds = %lor.lhs.false
  %16 = load %struct.rtx_def*, %struct.rtx_def** %q, align 8, !dbg !5790
  %17 = bitcast %struct.rtx_def* %16 to i32*, !dbg !5790
  %bf.load8 = load i32, i32* %17, align 8, !dbg !5790
  %bf.clear9 = and i32 %bf.load8, 65535, !dbg !5790
  %cmp10 = icmp eq i32 %bf.clear9, 9, !dbg !5790
  br i1 %cmp10, label %if.then, label %lor.lhs.false11, !dbg !5790

lor.lhs.false11:                                  ; preds = %lor.lhs.false7
  %18 = load %struct.rtx_def*, %struct.rtx_def** %q, align 8, !dbg !5790
  %19 = bitcast %struct.rtx_def* %18 to i32*, !dbg !5790
  %bf.load12 = load i32, i32* %19, align 8, !dbg !5790
  %bf.clear13 = and i32 %bf.load12, 65535, !dbg !5790
  %cmp14 = icmp eq i32 %bf.clear13, 10, !dbg !5790
  br i1 %cmp14, label %if.then, label %if.end, !dbg !5792

if.then:                                          ; preds = %lor.lhs.false11, %lor.lhs.false7, %lor.lhs.false, %for.body
  br label %return, !dbg !5793

if.end:                                           ; preds = %lor.lhs.false11
  br label %for.inc, !dbg !5790

for.inc:                                          ; preds = %if.end
  %20 = load %struct.rtx_def*, %struct.rtx_def** %q, align 8, !dbg !5794
  %u15 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1, !dbg !5794
  %fld16 = bitcast %union.u* %u15 to [1 x %union.rtunion_def]*, !dbg !5794
  %arrayidx17 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld16, i64 0, i64 2, !dbg !5794
  %rt_rtx18 = bitcast %union.rtunion_def* %arrayidx17 to %struct.rtx_def**, !dbg !5794
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx18, align 8, !dbg !5794
  store %struct.rtx_def* %21, %struct.rtx_def** %q, align 8, !dbg !5795
  br label %for.cond, !dbg !5796, !llvm.loop !5797

for.end:                                          ; preds = %for.cond
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !5799
  %il19 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %22, i32 0, i32 7, !dbg !5799
  %rtl20 = bitcast %union.basic_block_il_dependent* %il19 to %struct.rtl_bb_info**, !dbg !5799
  %23 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl20, align 8, !dbg !5799
  %end_21 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %23, i32 0, i32 1, !dbg !5799
  %24 = load %struct.rtx_def*, %struct.rtx_def** %end_21, align 8, !dbg !5799
  store %struct.rtx_def* %24, %struct.rtx_def** %q, align 8, !dbg !5800
  %25 = load %struct.rtx_def*, %struct.rtx_def** %q, align 8, !dbg !5801
  %26 = bitcast %struct.rtx_def* %25 to i32*, !dbg !5801
  %bf.load22 = load i32, i32* %26, align 8, !dbg !5801
  %bf.clear23 = and i32 %bf.load22, 65535, !dbg !5801
  %cmp24 = icmp eq i32 %bf.clear23, 9, !dbg !5801
  br i1 %cmp24, label %land.lhs.true, label %if.end36, !dbg !5803

land.lhs.true:                                    ; preds = %for.end
  %27 = load %struct.rtx_def*, %struct.rtx_def** %q, align 8, !dbg !5804
  %call = call i32 @onlyjump_p(%struct.rtx_def* %27), !dbg !5805
  %tobool = icmp ne i32 %call, 0, !dbg !5805
  br i1 %tobool, label %land.lhs.true25, label %if.end36, !dbg !5806

land.lhs.true25:                                  ; preds = %land.lhs.true
  %28 = load %struct.rtx_def*, %struct.rtx_def** %q, align 8, !dbg !5807
  %call26 = call i32 @any_uncondjump_p(%struct.rtx_def* %28), !dbg !5808
  %tobool27 = icmp ne i32 %call26, 0, !dbg !5808
  br i1 %tobool27, label %if.then31, label %lor.lhs.false28, !dbg !5809

lor.lhs.false28:                                  ; preds = %land.lhs.true25
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !5810
  %call29 = call zeroext i8 @single_succ_p(%struct.basic_block_def* %29), !dbg !5811
  %conv = zext i8 %call29 to i32, !dbg !5811
  %tobool30 = icmp ne i32 %conv, 0, !dbg !5811
  br i1 %tobool30, label %if.then31, label %if.end36, !dbg !5812

if.then31:                                        ; preds = %lor.lhs.false28, %land.lhs.true25
  %30 = load %struct.rtx_def*, %struct.rtx_def** %q, align 8, !dbg !5813
  %u32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1, !dbg !5813
  %fld33 = bitcast %union.u* %u32 to [1 x %union.rtunion_def]*, !dbg !5813
  %arrayidx34 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld33, i64 0, i64 1, !dbg !5813
  %rt_rtx35 = bitcast %union.rtunion_def* %arrayidx34 to %struct.rtx_def**, !dbg !5813
  %31 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx35, align 8, !dbg !5813
  store %struct.rtx_def* %31, %struct.rtx_def** %q, align 8, !dbg !5815
  br label %if.end36, !dbg !5816

if.end36:                                         ; preds = %if.then31, %lor.lhs.false28, %land.lhs.true, %for.end
  %32 = load %struct.rtx_def*, %struct.rtx_def** %q, align 8, !dbg !5817
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %c, align 8, !dbg !5819
  %il37 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %33, i32 0, i32 7, !dbg !5819
  %rtl38 = bitcast %union.basic_block_il_dependent* %il37 to %struct.rtl_bb_info**, !dbg !5819
  %34 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl38, align 8, !dbg !5819
  %head_39 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %34, i32 0, i32 0, !dbg !5819
  %35 = load %struct.rtx_def*, %struct.rtx_def** %head_39, align 8, !dbg !5819
  %u40 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1, !dbg !5819
  %fld41 = bitcast %union.u* %u40 to [1 x %union.rtunion_def]*, !dbg !5819
  %arrayidx42 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld41, i64 0, i64 1, !dbg !5819
  %rt_rtx43 = bitcast %union.rtunion_def* %arrayidx42 to %struct.rtx_def**, !dbg !5819
  %36 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx43, align 8, !dbg !5819
  %cmp44 = icmp ne %struct.rtx_def* %32, %36, !dbg !5820
  br i1 %cmp44, label %if.then46, label %if.end58, !dbg !5821

if.then46:                                        ; preds = %if.end36
  %37 = load %struct.rtx_def*, %struct.rtx_def** %q, align 8, !dbg !5822
  %u47 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1, !dbg !5822
  %fld48 = bitcast %union.u* %u47 to [1 x %union.rtunion_def]*, !dbg !5822
  %arrayidx49 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld48, i64 0, i64 2, !dbg !5822
  %rt_rtx50 = bitcast %union.rtunion_def* %arrayidx49 to %struct.rtx_def**, !dbg !5822
  %38 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx50, align 8, !dbg !5822
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %c, align 8, !dbg !5823
  %il51 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %39, i32 0, i32 7, !dbg !5823
  %rtl52 = bitcast %union.basic_block_il_dependent* %il51 to %struct.rtl_bb_info**, !dbg !5823
  %40 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl52, align 8, !dbg !5823
  %head_53 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %40, i32 0, i32 0, !dbg !5823
  %41 = load %struct.rtx_def*, %struct.rtx_def** %head_53, align 8, !dbg !5823
  %u54 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1, !dbg !5823
  %fld55 = bitcast %union.u* %u54 to [1 x %union.rtunion_def]*, !dbg !5823
  %arrayidx56 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld55, i64 0, i64 1, !dbg !5823
  %rt_rtx57 = bitcast %union.rtunion_def* %arrayidx56 to %struct.rtx_def**, !dbg !5823
  %42 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx57, align 8, !dbg !5823
  call void @delete_insn_chain(%struct.rtx_def* %38, %struct.rtx_def* %42, i8 zeroext 0), !dbg !5824
  br label %if.end58, !dbg !5824

if.end58:                                         ; preds = %if.then46, %if.end36
  %43 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !5825
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %43, i32 0, i32 7, !dbg !5826
  %44 = load i32, i32* %flags, align 8, !dbg !5827
  %or = or i32 %44, 1, !dbg !5827
  store i32 %or, i32* %flags, align 8, !dbg !5827
  br label %return, !dbg !5828

return:                                           ; preds = %if.end58, %if.then
  ret void, !dbg !5828
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @rtl_block_ends_with_call_p(%struct.basic_block_def* %bb) #0 !dbg !5829 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5830, metadata !DIExpression()), !dbg !5831
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !5832, metadata !DIExpression()), !dbg !5833
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5834
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 7, !dbg !5834
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !5834
  %1 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !5834
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %1, i32 0, i32 1, !dbg !5834
  %2 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !5834
  store %struct.rtx_def* %2, %struct.rtx_def** %insn, align 8, !dbg !5833
  br label %while.cond, !dbg !5835

while.cond:                                       ; preds = %while.body, %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5836
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !5836
  %bf.load = load i32, i32* %4, align 8, !dbg !5836
  %bf.clear = and i32 %bf.load, 65535, !dbg !5836
  %cmp = icmp eq i32 %bf.clear, 10, !dbg !5836
  br i1 %cmp, label %land.end, label %land.lhs.true, !dbg !5837

land.lhs.true:                                    ; preds = %while.cond
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5838
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5839
  %il1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 7, !dbg !5839
  %rtl2 = bitcast %union.basic_block_il_dependent* %il1 to %struct.rtl_bb_info**, !dbg !5839
  %7 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl2, align 8, !dbg !5839
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %7, i32 0, i32 0, !dbg !5839
  %8 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !5839
  %cmp3 = icmp ne %struct.rtx_def* %5, %8, !dbg !5840
  br i1 %cmp3, label %land.rhs, label %land.end, !dbg !5841

land.rhs:                                         ; preds = %land.lhs.true
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5842
  %call = call zeroext i8 @keep_with_call_p(%struct.rtx_def* %9), !dbg !5843
  %conv = zext i8 %call to i32, !dbg !5843
  %tobool = icmp ne i32 %conv, 0, !dbg !5843
  br i1 %tobool, label %lor.end, label %lor.lhs.false, !dbg !5844

lor.lhs.false:                                    ; preds = %land.rhs
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5845
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !5845
  %bf.load4 = load i32, i32* %11, align 8, !dbg !5845
  %bf.clear5 = and i32 %bf.load4, 65535, !dbg !5845
  %cmp6 = icmp eq i32 %bf.clear5, 13, !dbg !5845
  br i1 %cmp6, label %lor.end, label %lor.rhs, !dbg !5846

lor.rhs:                                          ; preds = %lor.lhs.false
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5847
  %13 = bitcast %struct.rtx_def* %12 to i32*, !dbg !5847
  %bf.load8 = load i32, i32* %13, align 8, !dbg !5847
  %bf.clear9 = and i32 %bf.load8, 65535, !dbg !5847
  %cmp10 = icmp eq i32 %bf.clear9, 7, !dbg !5847
  br label %lor.end, !dbg !5846

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %land.rhs
  %14 = phi i1 [ true, %lor.lhs.false ], [ true, %land.rhs ], [ %cmp10, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %land.lhs.true, %while.cond
  %15 = phi i1 [ false, %land.lhs.true ], [ false, %while.cond ], [ %14, %lor.end ], !dbg !5848
  br i1 %15, label %while.body, label %while.end, !dbg !5835

while.body:                                       ; preds = %land.end
  %16 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5849
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !5849
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5849
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !5849
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !5849
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5849
  store %struct.rtx_def* %17, %struct.rtx_def** %insn, align 8, !dbg !5850
  br label %while.cond, !dbg !5835, !llvm.loop !5851

while.end:                                        ; preds = %land.end
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5852
  %19 = bitcast %struct.rtx_def* %18 to i32*, !dbg !5852
  %bf.load12 = load i32, i32* %19, align 8, !dbg !5852
  %bf.clear13 = and i32 %bf.load12, 65535, !dbg !5852
  %cmp14 = icmp eq i32 %bf.clear13, 10, !dbg !5852
  %conv15 = zext i1 %cmp14 to i32, !dbg !5852
  %conv16 = trunc i32 %conv15 to i8, !dbg !5853
  ret i8 %conv16, !dbg !5854
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @rtl_block_ends_with_condjump_p(%struct.basic_block_def* %bb) #0 !dbg !5855 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5856, metadata !DIExpression()), !dbg !5857
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5858
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 7, !dbg !5858
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !5858
  %1 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !5858
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %1, i32 0, i32 1, !dbg !5858
  %2 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !5858
  %call = call i32 @any_condjump_p(%struct.rtx_def* %2), !dbg !5859
  %conv = trunc i32 %call to i8, !dbg !5859
  ret i8 %conv, !dbg !5860
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @rtl_flow_call_edges_add(%struct.simple_bitmap_def* %blocks) #0 !dbg !5861 {
entry:
  %retval = alloca i32, align 4
  %blocks.addr = alloca %struct.simple_bitmap_def*, align 8
  %i = alloca i32, align 4
  %blocks_split = alloca i32, align 4
  %last_bb = alloca i32, align 4
  %check_last_block = alloca i8, align 1
  %bb = alloca %struct.basic_block_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %bb40 = alloca %struct.basic_block_def*, align 8
  %insn48 = alloca %struct.rtx_def*, align 8
  %prev_insn = alloca %struct.rtx_def*, align 8
  %e75 = alloca %struct.edge_def*, align 8
  %split_at_insn = alloca %struct.rtx_def*, align 8
  store %struct.simple_bitmap_def* %blocks, %struct.simple_bitmap_def** %blocks.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %blocks.addr, metadata !5862, metadata !DIExpression()), !dbg !5863
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5864, metadata !DIExpression()), !dbg !5865
  call void @llvm.dbg.declare(metadata i32* %blocks_split, metadata !5866, metadata !DIExpression()), !dbg !5867
  store i32 0, i32* %blocks_split, align 4, !dbg !5867
  call void @llvm.dbg.declare(metadata i32* %last_bb, metadata !5868, metadata !DIExpression()), !dbg !5869
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5870
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !5870
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !5870
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5870
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 5, !dbg !5870
  %2 = load i32, i32* %x_last_basic_block, align 8, !dbg !5870
  store i32 %2, i32* %last_bb, align 4, !dbg !5869
  call void @llvm.dbg.declare(metadata i8* %check_last_block, metadata !5871, metadata !DIExpression()), !dbg !5872
  store i8 0, i8* %check_last_block, align 1, !dbg !5872
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5873
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !5873
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !5873
  %4 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !5873
  %x_n_basic_blocks = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %4, i32 0, i32 3, !dbg !5873
  %5 = load i32, i32* %x_n_basic_blocks, align 8, !dbg !5873
  %cmp = icmp eq i32 %5, 2, !dbg !5875
  br i1 %cmp, label %if.then, label %if.end, !dbg !5876

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !5877
  br label %return, !dbg !5877

if.end:                                           ; preds = %entry
  %6 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %blocks.addr, align 8, !dbg !5878
  %tobool = icmp ne %struct.simple_bitmap_def* %6, null, !dbg !5878
  br i1 %tobool, label %if.else, label %if.then3, !dbg !5880

if.then3:                                         ; preds = %if.end
  store i8 1, i8* %check_last_block, align 1, !dbg !5881
  br label %if.end11, !dbg !5882

if.else:                                          ; preds = %if.end
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %blocks.addr, align 8, !dbg !5883
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %7, i32 0, i32 3, !dbg !5883
  %8 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5883
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %8, i64 0, !dbg !5883
  %cfg5 = getelementptr inbounds %struct.function, %struct.function* %add.ptr4, i32 0, i32 1, !dbg !5883
  %9 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg5, align 8, !dbg !5883
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %9, i32 0, i32 1, !dbg !5883
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !5883
  %prev_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 5, !dbg !5883
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb, align 8, !dbg !5883
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 9, !dbg !5883
  %12 = load i32, i32* %index, align 8, !dbg !5883
  %div = udiv i32 %12, 64, !dbg !5883
  %idxprom = zext i32 %div to i64, !dbg !5883
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !5883
  %13 = load i64, i64* %arrayidx, align 8, !dbg !5883
  %14 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5883
  %add.ptr6 = getelementptr inbounds %struct.function, %struct.function* %14, i64 0, !dbg !5883
  %cfg7 = getelementptr inbounds %struct.function, %struct.function* %add.ptr6, i32 0, i32 1, !dbg !5883
  %15 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg7, align 8, !dbg !5883
  %x_exit_block_ptr8 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %15, i32 0, i32 1, !dbg !5883
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr8, align 8, !dbg !5883
  %prev_bb9 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i32 0, i32 5, !dbg !5883
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb9, align 8, !dbg !5883
  %index10 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %17, i32 0, i32 9, !dbg !5883
  %18 = load i32, i32* %index10, align 8, !dbg !5883
  %rem = urem i32 %18, 64, !dbg !5883
  %sh_prom = zext i32 %rem to i64, !dbg !5883
  %shr = lshr i64 %13, %sh_prom, !dbg !5883
  %and = and i64 %shr, 1, !dbg !5883
  %conv = trunc i64 %and to i8, !dbg !5883
  store i8 %conv, i8* %check_last_block, align 1, !dbg !5884
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.then3
  %19 = load i8, i8* %check_last_block, align 1, !dbg !5885
  %tobool12 = icmp ne i8 %19, 0, !dbg !5885
  br i1 %tobool12, label %if.then13, label %if.end37, !dbg !5887

if.then13:                                        ; preds = %if.end11
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !5888, metadata !DIExpression()), !dbg !5890
  %20 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5891
  %add.ptr14 = getelementptr inbounds %struct.function, %struct.function* %20, i64 0, !dbg !5891
  %cfg15 = getelementptr inbounds %struct.function, %struct.function* %add.ptr14, i32 0, i32 1, !dbg !5891
  %21 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg15, align 8, !dbg !5891
  %x_exit_block_ptr16 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %21, i32 0, i32 1, !dbg !5891
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr16, align 8, !dbg !5891
  %prev_bb17 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %22, i32 0, i32 5, !dbg !5892
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb17, align 8, !dbg !5892
  store %struct.basic_block_def* %23, %struct.basic_block_def** %bb, align 8, !dbg !5890
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !5893, metadata !DIExpression()), !dbg !5894
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5895
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %24, i32 0, i32 7, !dbg !5895
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !5895
  %25 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !5895
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %25, i32 0, i32 1, !dbg !5895
  %26 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !5895
  store %struct.rtx_def* %26, %struct.rtx_def** %insn, align 8, !dbg !5894
  br label %while.cond, !dbg !5896

while.cond:                                       ; preds = %while.body, %if.then13
  %27 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5897
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5898
  %il18 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %28, i32 0, i32 7, !dbg !5898
  %rtl19 = bitcast %union.basic_block_il_dependent* %il18 to %struct.rtl_bb_info**, !dbg !5898
  %29 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl19, align 8, !dbg !5898
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %29, i32 0, i32 0, !dbg !5898
  %30 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !5898
  %cmp20 = icmp ne %struct.rtx_def* %27, %30, !dbg !5899
  br i1 %cmp20, label %land.rhs, label %land.end, !dbg !5900

land.rhs:                                         ; preds = %while.cond
  %31 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5901
  %call = call zeroext i8 @keep_with_call_p(%struct.rtx_def* %31), !dbg !5902
  %conv22 = zext i8 %call to i32, !dbg !5902
  %tobool23 = icmp ne i32 %conv22, 0, !dbg !5900
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %32 = phi i1 [ false, %while.cond ], [ %tobool23, %land.rhs ], !dbg !5903
  br i1 %32, label %while.body, label %while.end, !dbg !5896

while.body:                                       ; preds = %land.end
  %33 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5904
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1, !dbg !5904
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5904
  %arrayidx24 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !5904
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx24 to %struct.rtx_def**, !dbg !5904
  %34 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5904
  store %struct.rtx_def* %34, %struct.rtx_def** %insn, align 8, !dbg !5905
  br label %while.cond, !dbg !5896, !llvm.loop !5906

while.end:                                        ; preds = %land.end
  %35 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5907
  %call25 = call zeroext i8 @need_fake_edge_p(%struct.rtx_def* %35), !dbg !5909
  %tobool26 = icmp ne i8 %call25, 0, !dbg !5909
  br i1 %tobool26, label %if.then27, label %if.end36, !dbg !5910

if.then27:                                        ; preds = %while.end
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !5911, metadata !DIExpression()), !dbg !5913
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5914
  %37 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5915
  %add.ptr28 = getelementptr inbounds %struct.function, %struct.function* %37, i64 0, !dbg !5915
  %cfg29 = getelementptr inbounds %struct.function, %struct.function* %add.ptr28, i32 0, i32 1, !dbg !5915
  %38 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg29, align 8, !dbg !5915
  %x_exit_block_ptr30 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %38, i32 0, i32 1, !dbg !5915
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr30, align 8, !dbg !5915
  %call31 = call %struct.edge_def* @find_edge(%struct.basic_block_def* %36, %struct.basic_block_def* %39), !dbg !5916
  store %struct.edge_def* %call31, %struct.edge_def** %e, align 8, !dbg !5917
  %40 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5918
  %tobool32 = icmp ne %struct.edge_def* %40, null, !dbg !5918
  br i1 %tobool32, label %if.then33, label %if.end35, !dbg !5920

if.then33:                                        ; preds = %if.then27
  %41 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !5921
  %call34 = call %struct.rtx_def* @gen_use(%struct.rtx_def* %41), !dbg !5923
  %42 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5924
  call void @insert_insn_on_edge(%struct.rtx_def* %call34, %struct.edge_def* %42), !dbg !5925
  call void @commit_edge_insertions(), !dbg !5926
  br label %if.end35, !dbg !5927

if.end35:                                         ; preds = %if.then33, %if.then27
  br label %if.end36, !dbg !5928

if.end36:                                         ; preds = %if.end35, %while.end
  br label %if.end37, !dbg !5929

if.end37:                                         ; preds = %if.end36, %if.end11
  store i32 2, i32* %i, align 4, !dbg !5930
  br label %for.cond, !dbg !5932

for.cond:                                         ; preds = %for.inc124, %if.end37
  %43 = load i32, i32* %i, align 4, !dbg !5933
  %44 = load i32, i32* %last_bb, align 4, !dbg !5935
  %cmp38 = icmp slt i32 %43, %44, !dbg !5936
  br i1 %cmp38, label %for.body, label %for.end126, !dbg !5937

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb40, metadata !5938, metadata !DIExpression()), !dbg !5940
  %45 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5941
  %add.ptr41 = getelementptr inbounds %struct.function, %struct.function* %45, i64 0, !dbg !5941
  %cfg42 = getelementptr inbounds %struct.function, %struct.function* %add.ptr41, i32 0, i32 1, !dbg !5941
  %46 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg42, align 8, !dbg !5941
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %46, i32 0, i32 2, !dbg !5941
  %47 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !5941
  %tobool43 = icmp ne %struct.VEC_basic_block_gc* %47, null, !dbg !5941
  br i1 %tobool43, label %cond.true, label %cond.false, !dbg !5941

cond.true:                                        ; preds = %for.body
  %48 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5941
  %add.ptr44 = getelementptr inbounds %struct.function, %struct.function* %48, i64 0, !dbg !5941
  %cfg45 = getelementptr inbounds %struct.function, %struct.function* %add.ptr44, i32 0, i32 1, !dbg !5941
  %49 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg45, align 8, !dbg !5941
  %x_basic_block_info46 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %49, i32 0, i32 2, !dbg !5941
  %50 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info46, align 8, !dbg !5941
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %50, i32 0, i32 0, !dbg !5941
  br label %cond.end, !dbg !5941

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !5941

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5941
  %51 = load i32, i32* %i, align 4, !dbg !5941
  %call47 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond, i32 %51), !dbg !5941
  store %struct.basic_block_def* %call47, %struct.basic_block_def** %bb40, align 8, !dbg !5940
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn48, metadata !5942, metadata !DIExpression()), !dbg !5943
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %prev_insn, metadata !5944, metadata !DIExpression()), !dbg !5945
  %52 = load %struct.basic_block_def*, %struct.basic_block_def** %bb40, align 8, !dbg !5946
  %tobool49 = icmp ne %struct.basic_block_def* %52, null, !dbg !5946
  br i1 %tobool49, label %if.end51, label %if.then50, !dbg !5948

if.then50:                                        ; preds = %cond.end
  br label %for.inc124, !dbg !5949

if.end51:                                         ; preds = %cond.end
  %53 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %blocks.addr, align 8, !dbg !5950
  %tobool52 = icmp ne %struct.simple_bitmap_def* %53, null, !dbg !5950
  br i1 %tobool52, label %land.lhs.true, label %if.end63, !dbg !5952

land.lhs.true:                                    ; preds = %if.end51
  %54 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %blocks.addr, align 8, !dbg !5953
  %elms53 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %54, i32 0, i32 3, !dbg !5953
  %55 = load i32, i32* %i, align 4, !dbg !5953
  %div54 = udiv i32 %55, 64, !dbg !5953
  %idxprom55 = zext i32 %div54 to i64, !dbg !5953
  %arrayidx56 = getelementptr inbounds [1 x i64], [1 x i64]* %elms53, i64 0, i64 %idxprom55, !dbg !5953
  %56 = load i64, i64* %arrayidx56, align 8, !dbg !5953
  %57 = load i32, i32* %i, align 4, !dbg !5953
  %rem57 = urem i32 %57, 64, !dbg !5953
  %sh_prom58 = zext i32 %rem57 to i64, !dbg !5953
  %shr59 = lshr i64 %56, %sh_prom58, !dbg !5953
  %and60 = and i64 %shr59, 1, !dbg !5953
  %tobool61 = icmp ne i64 %and60, 0, !dbg !5953
  br i1 %tobool61, label %if.end63, label %if.then62, !dbg !5954

if.then62:                                        ; preds = %land.lhs.true
  br label %for.inc124, !dbg !5955

if.end63:                                         ; preds = %land.lhs.true, %if.end51
  %58 = load %struct.basic_block_def*, %struct.basic_block_def** %bb40, align 8, !dbg !5956
  %il64 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %58, i32 0, i32 7, !dbg !5956
  %rtl65 = bitcast %union.basic_block_il_dependent* %il64 to %struct.rtl_bb_info**, !dbg !5956
  %59 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl65, align 8, !dbg !5956
  %end_66 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %59, i32 0, i32 1, !dbg !5956
  %60 = load %struct.rtx_def*, %struct.rtx_def** %end_66, align 8, !dbg !5956
  store %struct.rtx_def* %60, %struct.rtx_def** %insn48, align 8, !dbg !5958
  br label %for.cond67, !dbg !5959

for.cond67:                                       ; preds = %for.inc, %if.end63
  %61 = load %struct.rtx_def*, %struct.rtx_def** %insn48, align 8, !dbg !5960
  %u68 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %61, i32 0, i32 1, !dbg !5960
  %fld69 = bitcast %union.u* %u68 to [1 x %union.rtunion_def]*, !dbg !5960
  %arrayidx70 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld69, i64 0, i64 1, !dbg !5960
  %rt_rtx71 = bitcast %union.rtunion_def* %arrayidx70 to %struct.rtx_def**, !dbg !5960
  %62 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx71, align 8, !dbg !5960
  store %struct.rtx_def* %62, %struct.rtx_def** %prev_insn, align 8, !dbg !5963
  %63 = load %struct.rtx_def*, %struct.rtx_def** %insn48, align 8, !dbg !5964
  %call72 = call zeroext i8 @need_fake_edge_p(%struct.rtx_def* %63), !dbg !5966
  %tobool73 = icmp ne i8 %call72, 0, !dbg !5966
  br i1 %tobool73, label %if.then74, label %if.end116, !dbg !5967

if.then74:                                        ; preds = %for.cond67
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e75, metadata !5968, metadata !DIExpression()), !dbg !5970
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %split_at_insn, metadata !5971, metadata !DIExpression()), !dbg !5972
  %64 = load %struct.rtx_def*, %struct.rtx_def** %insn48, align 8, !dbg !5973
  store %struct.rtx_def* %64, %struct.rtx_def** %split_at_insn, align 8, !dbg !5972
  %65 = load %struct.rtx_def*, %struct.rtx_def** %insn48, align 8, !dbg !5974
  %66 = bitcast %struct.rtx_def* %65 to i32*, !dbg !5974
  %bf.load = load i32, i32* %66, align 8, !dbg !5974
  %bf.clear = and i32 %bf.load, 65535, !dbg !5974
  %cmp76 = icmp eq i32 %bf.clear, 10, !dbg !5974
  br i1 %cmp76, label %if.then78, label %if.end100, !dbg !5976

if.then78:                                        ; preds = %if.then74
  br label %while.cond79, !dbg !5977

while.cond79:                                     ; preds = %while.body94, %if.then78
  %67 = load %struct.rtx_def*, %struct.rtx_def** %split_at_insn, align 8, !dbg !5978
  %68 = load %struct.basic_block_def*, %struct.basic_block_def** %bb40, align 8, !dbg !5979
  %il80 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %68, i32 0, i32 7, !dbg !5979
  %rtl81 = bitcast %union.basic_block_il_dependent* %il80 to %struct.rtl_bb_info**, !dbg !5979
  %69 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl81, align 8, !dbg !5979
  %end_82 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %69, i32 0, i32 1, !dbg !5979
  %70 = load %struct.rtx_def*, %struct.rtx_def** %end_82, align 8, !dbg !5979
  %cmp83 = icmp ne %struct.rtx_def* %67, %70, !dbg !5980
  br i1 %cmp83, label %land.rhs85, label %land.end93, !dbg !5981

land.rhs85:                                       ; preds = %while.cond79
  %71 = load %struct.rtx_def*, %struct.rtx_def** %split_at_insn, align 8, !dbg !5982
  %u86 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %71, i32 0, i32 1, !dbg !5982
  %fld87 = bitcast %union.u* %u86 to [1 x %union.rtunion_def]*, !dbg !5982
  %arrayidx88 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld87, i64 0, i64 2, !dbg !5982
  %rt_rtx89 = bitcast %union.rtunion_def* %arrayidx88 to %struct.rtx_def**, !dbg !5982
  %72 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx89, align 8, !dbg !5982
  %call90 = call zeroext i8 @keep_with_call_p(%struct.rtx_def* %72), !dbg !5983
  %conv91 = zext i8 %call90 to i32, !dbg !5983
  %tobool92 = icmp ne i32 %conv91, 0, !dbg !5981
  br label %land.end93

land.end93:                                       ; preds = %land.rhs85, %while.cond79
  %73 = phi i1 [ false, %while.cond79 ], [ %tobool92, %land.rhs85 ], !dbg !5984
  br i1 %73, label %while.body94, label %while.end99, !dbg !5977

while.body94:                                     ; preds = %land.end93
  %74 = load %struct.rtx_def*, %struct.rtx_def** %split_at_insn, align 8, !dbg !5985
  %u95 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %74, i32 0, i32 1, !dbg !5985
  %fld96 = bitcast %union.u* %u95 to [1 x %union.rtunion_def]*, !dbg !5985
  %arrayidx97 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld96, i64 0, i64 2, !dbg !5985
  %rt_rtx98 = bitcast %union.rtunion_def* %arrayidx97 to %struct.rtx_def**, !dbg !5985
  %75 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx98, align 8, !dbg !5985
  store %struct.rtx_def* %75, %struct.rtx_def** %split_at_insn, align 8, !dbg !5986
  br label %while.cond79, !dbg !5977, !llvm.loop !5987

while.end99:                                      ; preds = %land.end93
  br label %if.end100, !dbg !5977

if.end100:                                        ; preds = %while.end99, %if.then74
  %76 = load %struct.rtx_def*, %struct.rtx_def** %split_at_insn, align 8, !dbg !5988
  %77 = load %struct.basic_block_def*, %struct.basic_block_def** %bb40, align 8, !dbg !5990
  %il101 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %77, i32 0, i32 7, !dbg !5990
  %rtl102 = bitcast %union.basic_block_il_dependent* %il101 to %struct.rtl_bb_info**, !dbg !5990
  %78 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl102, align 8, !dbg !5990
  %end_103 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %78, i32 0, i32 1, !dbg !5990
  %79 = load %struct.rtx_def*, %struct.rtx_def** %end_103, align 8, !dbg !5990
  %cmp104 = icmp ne %struct.rtx_def* %76, %79, !dbg !5991
  br i1 %cmp104, label %if.then106, label %if.end111, !dbg !5992

if.then106:                                       ; preds = %if.end100
  %80 = load %struct.basic_block_def*, %struct.basic_block_def** %bb40, align 8, !dbg !5993
  %81 = load %struct.rtx_def*, %struct.rtx_def** %split_at_insn, align 8, !dbg !5995
  %82 = bitcast %struct.rtx_def* %81 to i8*, !dbg !5995
  %call107 = call %struct.edge_def* @split_block(%struct.basic_block_def* %80, i8* %82), !dbg !5996
  store %struct.edge_def* %call107, %struct.edge_def** %e75, align 8, !dbg !5997
  %83 = load %struct.edge_def*, %struct.edge_def** %e75, align 8, !dbg !5998
  %tobool108 = icmp ne %struct.edge_def* %83, null, !dbg !5998
  br i1 %tobool108, label %if.then109, label %if.end110, !dbg !6000

if.then109:                                       ; preds = %if.then106
  %84 = load i32, i32* %blocks_split, align 4, !dbg !6001
  %inc = add nsw i32 %84, 1, !dbg !6001
  store i32 %inc, i32* %blocks_split, align 4, !dbg !6001
  br label %if.end110, !dbg !6002

if.end110:                                        ; preds = %if.then109, %if.then106
  br label %if.end111, !dbg !6003

if.end111:                                        ; preds = %if.end110, %if.end100
  %85 = load %struct.basic_block_def*, %struct.basic_block_def** %bb40, align 8, !dbg !6004
  %86 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6005
  %add.ptr112 = getelementptr inbounds %struct.function, %struct.function* %86, i64 0, !dbg !6005
  %cfg113 = getelementptr inbounds %struct.function, %struct.function* %add.ptr112, i32 0, i32 1, !dbg !6005
  %87 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg113, align 8, !dbg !6005
  %x_exit_block_ptr114 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %87, i32 0, i32 1, !dbg !6005
  %88 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr114, align 8, !dbg !6005
  %call115 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %85, %struct.basic_block_def* %88, i32 16), !dbg !6006
  br label %if.end116, !dbg !6007

if.end116:                                        ; preds = %if.end111, %for.cond67
  %89 = load %struct.rtx_def*, %struct.rtx_def** %insn48, align 8, !dbg !6008
  %90 = load %struct.basic_block_def*, %struct.basic_block_def** %bb40, align 8, !dbg !6010
  %il117 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %90, i32 0, i32 7, !dbg !6010
  %rtl118 = bitcast %union.basic_block_il_dependent* %il117 to %struct.rtl_bb_info**, !dbg !6010
  %91 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl118, align 8, !dbg !6010
  %head_119 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %91, i32 0, i32 0, !dbg !6010
  %92 = load %struct.rtx_def*, %struct.rtx_def** %head_119, align 8, !dbg !6010
  %cmp120 = icmp eq %struct.rtx_def* %89, %92, !dbg !6011
  br i1 %cmp120, label %if.then122, label %if.end123, !dbg !6012

if.then122:                                       ; preds = %if.end116
  br label %for.end, !dbg !6013

if.end123:                                        ; preds = %if.end116
  br label %for.inc, !dbg !6014

for.inc:                                          ; preds = %if.end123
  %93 = load %struct.rtx_def*, %struct.rtx_def** %prev_insn, align 8, !dbg !6015
  store %struct.rtx_def* %93, %struct.rtx_def** %insn48, align 8, !dbg !6016
  br label %for.cond67, !dbg !6017, !llvm.loop !6018

for.end:                                          ; preds = %if.then122
  br label %for.inc124, !dbg !6021

for.inc124:                                       ; preds = %for.end, %if.then62, %if.then50
  %94 = load i32, i32* %i, align 4, !dbg !6022
  %inc125 = add nsw i32 %94, 1, !dbg !6022
  store i32 %inc125, i32* %i, align 4, !dbg !6022
  br label %for.cond, !dbg !6023, !llvm.loop !6024

for.end126:                                       ; preds = %for.cond
  %95 = load i32, i32* %blocks_split, align 4, !dbg !6026
  %tobool127 = icmp ne i32 %95, 0, !dbg !6026
  br i1 %tobool127, label %if.then128, label %if.end129, !dbg !6028

if.then128:                                       ; preds = %for.end126
  call void @verify_flow_info(), !dbg !6029
  br label %if.end129, !dbg !6029

if.end129:                                        ; preds = %if.then128, %for.end126
  %96 = load i32, i32* %blocks_split, align 4, !dbg !6030
  store i32 %96, i32* %retval, align 4, !dbg !6031
  br label %return, !dbg !6031

return:                                           ; preds = %if.end129, %if.then
  %97 = load i32, i32* %retval, align 4, !dbg !6032
  ret i32 %97, !dbg !6032
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @rtl_verify_flow_info_1() #0 !dbg !6033 {
entry:
  %x = alloca %struct.rtx_def*, align 8
  %err = alloca i32, align 4
  %bb = alloca %struct.basic_block_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %n_fallthru = alloca i32, align 4
  %n_eh = alloca i32, align 4
  %n_call = alloca i32, align 4
  %n_abnormal = alloca i32, align 4
  %n_branch = alloca i32, align 4
  %e = alloca %struct.edge_def*, align 8
  %fallthru = alloca %struct.edge_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !6034, metadata !DIExpression()), !dbg !6035
  call void @llvm.dbg.declare(metadata i32* %err, metadata !6036, metadata !DIExpression()), !dbg !6037
  store i32 0, i32* %err, align 4, !dbg !6037
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !6038, metadata !DIExpression()), !dbg !6039
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6040
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !6040
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !6040
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !6040
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 1, !dbg !6040
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !6040
  %prev_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 5, !dbg !6040
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb, align 8, !dbg !6040
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb, align 8, !dbg !6040
  br label %for.cond, !dbg !6040

for.cond:                                         ; preds = %for.inc84, %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6042
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6042
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !6042
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !6042
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !6042
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 0, !dbg !6042
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !6042
  %cmp = icmp ne %struct.basic_block_def* %4, %7, !dbg !6042
  br i1 %cmp, label %for.body, label %for.end86, !dbg !6040

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !6044, metadata !DIExpression()), !dbg !6046
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6047
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 13, !dbg !6049
  %9 = load i32, i32* %flags, align 8, !dbg !6049
  %and = and i32 %9, 512, !dbg !6050
  %tobool = icmp ne i32 %and, 0, !dbg !6050
  br i1 %tobool, label %if.end, label %if.then, !dbg !6051

if.then:                                          ; preds = %for.body
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6052
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 9, !dbg !6054
  %11 = load i32, i32* %index, align 8, !dbg !6054
  call void (i8*, ...) @error(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.37, i64 0, i64 0), i32 %11), !dbg !6055
  store i32 1, i32* %err, align 4, !dbg !6056
  br label %if.end, !dbg !6057

if.end:                                           ; preds = %if.then, %for.body
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6058
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 7, !dbg !6058
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !6058
  %13 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !6058
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %13, i32 0, i32 0, !dbg !6058
  %14 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !6058
  store %struct.rtx_def* %14, %struct.rtx_def** %insn, align 8, !dbg !6058
  br label %for.cond3, !dbg !6058

for.cond3:                                        ; preds = %for.inc, %if.end
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6060
  %tobool4 = icmp ne %struct.rtx_def* %15, null, !dbg !6060
  br i1 %tobool4, label %land.rhs, label %land.end, !dbg !6060

land.rhs:                                         ; preds = %for.cond3
  %16 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6060
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6060
  %il5 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %17, i32 0, i32 7, !dbg !6060
  %rtl6 = bitcast %union.basic_block_il_dependent* %il5 to %struct.rtl_bb_info**, !dbg !6060
  %18 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl6, align 8, !dbg !6060
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %18, i32 0, i32 1, !dbg !6060
  %19 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !6060
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !6060
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6060
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !6060
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6060
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6060
  %cmp7 = icmp ne %struct.rtx_def* %16, %20, !dbg !6060
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond3
  %21 = phi i1 [ false, %for.cond3 ], [ %cmp7, %land.rhs ], !dbg !6062
  br i1 %21, label %for.body8, label %for.end, !dbg !6058

for.body8:                                        ; preds = %land.end
  %22 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6063
  %u9 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !6063
  %fld10 = bitcast %union.u* %u9 to [1 x %union.rtunion_def]*, !dbg !6063
  %arrayidx11 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld10, i64 0, i64 3, !dbg !6063
  %rt_bb = bitcast %union.rtunion_def* %arrayidx11 to %struct.basic_block_def**, !dbg !6063
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !6063
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6065
  %cmp12 = icmp ne %struct.basic_block_def* %23, %24, !dbg !6066
  br i1 %cmp12, label %if.then13, label %if.end28, !dbg !6067

if.then13:                                        ; preds = %for.body8
  %25 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6068
  %u14 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1, !dbg !6068
  %fld15 = bitcast %union.u* %u14 to [1 x %union.rtunion_def]*, !dbg !6068
  %arrayidx16 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld15, i64 0, i64 0, !dbg !6068
  %rt_int = bitcast %union.rtunion_def* %arrayidx16 to i32*, !dbg !6068
  %26 = load i32, i32* %rt_int, align 8, !dbg !6068
  %27 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6070
  %u17 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1, !dbg !6070
  %fld18 = bitcast %union.u* %u17 to [1 x %union.rtunion_def]*, !dbg !6070
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld18, i64 0, i64 3, !dbg !6070
  %rt_bb20 = bitcast %union.rtunion_def* %arrayidx19 to %struct.basic_block_def**, !dbg !6070
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb20, align 8, !dbg !6070
  %tobool21 = icmp ne %struct.basic_block_def* %28, null, !dbg !6070
  br i1 %tobool21, label %cond.true, label %cond.false, !dbg !6070

cond.true:                                        ; preds = %if.then13
  %29 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6071
  %u22 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1, !dbg !6071
  %fld23 = bitcast %union.u* %u22 to [1 x %union.rtunion_def]*, !dbg !6071
  %arrayidx24 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld23, i64 0, i64 3, !dbg !6071
  %rt_bb25 = bitcast %union.rtunion_def* %arrayidx24 to %struct.basic_block_def**, !dbg !6071
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb25, align 8, !dbg !6071
  %index26 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %30, i32 0, i32 9, !dbg !6072
  %31 = load i32, i32* %index26, align 8, !dbg !6072
  br label %cond.end, !dbg !6070

cond.false:                                       ; preds = %if.then13
  br label %cond.end, !dbg !6070

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %31, %cond.true ], [ 0, %cond.false ], !dbg !6070
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6073
  %index27 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %32, i32 0, i32 9, !dbg !6074
  %33 = load i32, i32* %index27, align 8, !dbg !6074
  call void (i8*, ...) @error(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.38, i64 0, i64 0), i32 %26, i32 %cond, i32 %33), !dbg !6075
  store i32 1, i32* %err, align 4, !dbg !6076
  br label %if.end28, !dbg !6077

if.end28:                                         ; preds = %cond.end, %for.body8
  br label %for.inc, !dbg !6065

for.inc:                                          ; preds = %if.end28
  %34 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6060
  %u29 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %34, i32 0, i32 1, !dbg !6060
  %fld30 = bitcast %union.u* %u29 to [1 x %union.rtunion_def]*, !dbg !6060
  %arrayidx31 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld30, i64 0, i64 2, !dbg !6060
  %rt_rtx32 = bitcast %union.rtunion_def* %arrayidx31 to %struct.rtx_def**, !dbg !6060
  %35 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx32, align 8, !dbg !6060
  store %struct.rtx_def* %35, %struct.rtx_def** %insn, align 8, !dbg !6060
  br label %for.cond3, !dbg !6060, !llvm.loop !6078

for.end:                                          ; preds = %land.end
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6080
  %il33 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %36, i32 0, i32 7, !dbg !6082
  %rtl34 = bitcast %union.basic_block_il_dependent* %il33 to %struct.rtl_bb_info**, !dbg !6083
  %37 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl34, align 8, !dbg !6083
  %header = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %37, i32 0, i32 2, !dbg !6084
  %38 = load %struct.rtx_def*, %struct.rtx_def** %header, align 8, !dbg !6084
  store %struct.rtx_def* %38, %struct.rtx_def** %insn, align 8, !dbg !6085
  br label %for.cond35, !dbg !6086

for.cond35:                                       ; preds = %for.inc51, %for.end
  %39 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6087
  %tobool36 = icmp ne %struct.rtx_def* %39, null, !dbg !6089
  br i1 %tobool36, label %for.body37, label %for.end56, !dbg !6089

for.body37:                                       ; preds = %for.cond35
  %40 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6090
  %41 = bitcast %struct.rtx_def* %40 to i32*, !dbg !6090
  %bf.load = load i32, i32* %41, align 8, !dbg !6090
  %bf.clear = and i32 %bf.load, 65535, !dbg !6090
  %cmp38 = icmp eq i32 %bf.clear, 11, !dbg !6090
  br i1 %cmp38, label %if.end50, label %land.lhs.true, !dbg !6092

land.lhs.true:                                    ; preds = %for.body37
  %42 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6093
  %u39 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1, !dbg !6093
  %fld40 = bitcast %union.u* %u39 to [1 x %union.rtunion_def]*, !dbg !6093
  %arrayidx41 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld40, i64 0, i64 3, !dbg !6093
  %rt_bb42 = bitcast %union.rtunion_def* %arrayidx41 to %struct.basic_block_def**, !dbg !6093
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb42, align 8, !dbg !6093
  %cmp43 = icmp ne %struct.basic_block_def* %43, null, !dbg !6094
  br i1 %cmp43, label %if.then44, label %if.end50, !dbg !6095

if.then44:                                        ; preds = %land.lhs.true
  %44 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6096
  %u45 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %44, i32 0, i32 1, !dbg !6096
  %fld46 = bitcast %union.u* %u45 to [1 x %union.rtunion_def]*, !dbg !6096
  %arrayidx47 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld46, i64 0, i64 0, !dbg !6096
  %rt_int48 = bitcast %union.rtunion_def* %arrayidx47 to i32*, !dbg !6096
  %45 = load i32, i32* %rt_int48, align 8, !dbg !6096
  %46 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6098
  %index49 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %46, i32 0, i32 9, !dbg !6099
  %47 = load i32, i32* %index49, align 8, !dbg !6099
  call void (i8*, ...) @error(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.39, i64 0, i64 0), i32 %45, i32 %47), !dbg !6100
  store i32 1, i32* %err, align 4, !dbg !6101
  br label %if.end50, !dbg !6102

if.end50:                                         ; preds = %if.then44, %land.lhs.true, %for.body37
  br label %for.inc51, !dbg !6103

for.inc51:                                        ; preds = %if.end50
  %48 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6104
  %u52 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %48, i32 0, i32 1, !dbg !6104
  %fld53 = bitcast %union.u* %u52 to [1 x %union.rtunion_def]*, !dbg !6104
  %arrayidx54 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld53, i64 0, i64 2, !dbg !6104
  %rt_rtx55 = bitcast %union.rtunion_def* %arrayidx54 to %struct.rtx_def**, !dbg !6104
  %49 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx55, align 8, !dbg !6104
  store %struct.rtx_def* %49, %struct.rtx_def** %insn, align 8, !dbg !6105
  br label %for.cond35, !dbg !6106, !llvm.loop !6107

for.end56:                                        ; preds = %for.cond35
  %50 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6109
  %il57 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %50, i32 0, i32 7, !dbg !6111
  %rtl58 = bitcast %union.basic_block_il_dependent* %il57 to %struct.rtl_bb_info**, !dbg !6112
  %51 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl58, align 8, !dbg !6112
  %footer = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %51, i32 0, i32 3, !dbg !6113
  %52 = load %struct.rtx_def*, %struct.rtx_def** %footer, align 8, !dbg !6113
  store %struct.rtx_def* %52, %struct.rtx_def** %insn, align 8, !dbg !6114
  br label %for.cond59, !dbg !6115

for.cond59:                                       ; preds = %for.inc78, %for.end56
  %53 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6116
  %tobool60 = icmp ne %struct.rtx_def* %53, null, !dbg !6118
  br i1 %tobool60, label %for.body61, label %for.end83, !dbg !6118

for.body61:                                       ; preds = %for.cond59
  %54 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6119
  %55 = bitcast %struct.rtx_def* %54 to i32*, !dbg !6119
  %bf.load62 = load i32, i32* %55, align 8, !dbg !6119
  %bf.clear63 = and i32 %bf.load62, 65535, !dbg !6119
  %cmp64 = icmp eq i32 %bf.clear63, 11, !dbg !6119
  br i1 %cmp64, label %if.end77, label %land.lhs.true65, !dbg !6121

land.lhs.true65:                                  ; preds = %for.body61
  %56 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6122
  %u66 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %56, i32 0, i32 1, !dbg !6122
  %fld67 = bitcast %union.u* %u66 to [1 x %union.rtunion_def]*, !dbg !6122
  %arrayidx68 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld67, i64 0, i64 3, !dbg !6122
  %rt_bb69 = bitcast %union.rtunion_def* %arrayidx68 to %struct.basic_block_def**, !dbg !6122
  %57 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb69, align 8, !dbg !6122
  %cmp70 = icmp ne %struct.basic_block_def* %57, null, !dbg !6123
  br i1 %cmp70, label %if.then71, label %if.end77, !dbg !6124

if.then71:                                        ; preds = %land.lhs.true65
  %58 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6125
  %u72 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %58, i32 0, i32 1, !dbg !6125
  %fld73 = bitcast %union.u* %u72 to [1 x %union.rtunion_def]*, !dbg !6125
  %arrayidx74 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld73, i64 0, i64 0, !dbg !6125
  %rt_int75 = bitcast %union.rtunion_def* %arrayidx74 to i32*, !dbg !6125
  %59 = load i32, i32* %rt_int75, align 8, !dbg !6125
  %60 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6127
  %index76 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %60, i32 0, i32 9, !dbg !6128
  %61 = load i32, i32* %index76, align 8, !dbg !6128
  call void (i8*, ...) @error(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.40, i64 0, i64 0), i32 %59, i32 %61), !dbg !6129
  store i32 1, i32* %err, align 4, !dbg !6130
  br label %if.end77, !dbg !6131

if.end77:                                         ; preds = %if.then71, %land.lhs.true65, %for.body61
  br label %for.inc78, !dbg !6132

for.inc78:                                        ; preds = %if.end77
  %62 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6133
  %u79 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %62, i32 0, i32 1, !dbg !6133
  %fld80 = bitcast %union.u* %u79 to [1 x %union.rtunion_def]*, !dbg !6133
  %arrayidx81 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld80, i64 0, i64 2, !dbg !6133
  %rt_rtx82 = bitcast %union.rtunion_def* %arrayidx81 to %struct.rtx_def**, !dbg !6133
  %63 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx82, align 8, !dbg !6133
  store %struct.rtx_def* %63, %struct.rtx_def** %insn, align 8, !dbg !6134
  br label %for.cond59, !dbg !6135, !llvm.loop !6136

for.end83:                                        ; preds = %for.cond59
  br label %for.inc84, !dbg !6138

for.inc84:                                        ; preds = %for.end83
  %64 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6042
  %prev_bb85 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %64, i32 0, i32 5, !dbg !6042
  %65 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb85, align 8, !dbg !6042
  store %struct.basic_block_def* %65, %struct.basic_block_def** %bb, align 8, !dbg !6042
  br label %for.cond, !dbg !6042, !llvm.loop !6139

for.end86:                                        ; preds = %for.cond
  %66 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6141
  %add.ptr87 = getelementptr inbounds %struct.function, %struct.function* %66, i64 0, !dbg !6141
  %cfg88 = getelementptr inbounds %struct.function, %struct.function* %add.ptr87, i32 0, i32 1, !dbg !6141
  %67 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg88, align 8, !dbg !6141
  %x_exit_block_ptr89 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %67, i32 0, i32 1, !dbg !6141
  %68 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr89, align 8, !dbg !6141
  %prev_bb90 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %68, i32 0, i32 5, !dbg !6141
  %69 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb90, align 8, !dbg !6141
  store %struct.basic_block_def* %69, %struct.basic_block_def** %bb, align 8, !dbg !6141
  br label %for.cond91, !dbg !6141

for.cond91:                                       ; preds = %for.inc565, %for.end86
  %70 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6143
  %71 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6143
  %add.ptr92 = getelementptr inbounds %struct.function, %struct.function* %71, i64 0, !dbg !6143
  %cfg93 = getelementptr inbounds %struct.function, %struct.function* %add.ptr92, i32 0, i32 1, !dbg !6143
  %72 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg93, align 8, !dbg !6143
  %x_entry_block_ptr94 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %72, i32 0, i32 0, !dbg !6143
  %73 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr94, align 8, !dbg !6143
  %cmp95 = icmp ne %struct.basic_block_def* %70, %73, !dbg !6143
  br i1 %cmp95, label %for.body96, label %for.end567, !dbg !6141

for.body96:                                       ; preds = %for.cond91
  call void @llvm.dbg.declare(metadata i32* %n_fallthru, metadata !6145, metadata !DIExpression()), !dbg !6147
  store i32 0, i32* %n_fallthru, align 4, !dbg !6147
  call void @llvm.dbg.declare(metadata i32* %n_eh, metadata !6148, metadata !DIExpression()), !dbg !6149
  store i32 0, i32* %n_eh, align 4, !dbg !6149
  call void @llvm.dbg.declare(metadata i32* %n_call, metadata !6150, metadata !DIExpression()), !dbg !6151
  store i32 0, i32* %n_call, align 4, !dbg !6151
  call void @llvm.dbg.declare(metadata i32* %n_abnormal, metadata !6152, metadata !DIExpression()), !dbg !6153
  store i32 0, i32* %n_abnormal, align 4, !dbg !6153
  call void @llvm.dbg.declare(metadata i32* %n_branch, metadata !6154, metadata !DIExpression()), !dbg !6155
  store i32 0, i32* %n_branch, align 4, !dbg !6155
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !6156, metadata !DIExpression()), !dbg !6157
  call void @llvm.dbg.declare(metadata %struct.edge_def** %fallthru, metadata !6158, metadata !DIExpression()), !dbg !6159
  store %struct.edge_def* null, %struct.edge_def** %fallthru, align 8, !dbg !6159
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !6160, metadata !DIExpression()), !dbg !6161
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !6162, metadata !DIExpression()), !dbg !6163
  %74 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6164
  %il97 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %74, i32 0, i32 7, !dbg !6164
  %rtl98 = bitcast %union.basic_block_il_dependent* %il97 to %struct.rtl_bb_info**, !dbg !6164
  %75 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl98, align 8, !dbg !6164
  %end_99 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %75, i32 0, i32 1, !dbg !6164
  %76 = load %struct.rtx_def*, %struct.rtx_def** %end_99, align 8, !dbg !6164
  %77 = bitcast %struct.rtx_def* %76 to i32*, !dbg !6164
  %bf.load100 = load i32, i32* %77, align 8, !dbg !6164
  %bf.clear101 = and i32 %bf.load100, 65535, !dbg !6164
  %cmp102 = icmp eq i32 %bf.clear101, 9, !dbg !6164
  br i1 %cmp102, label %land.lhs.true103, label %if.end215, !dbg !6166

land.lhs.true103:                                 ; preds = %for.body96
  %78 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6167
  %il104 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %78, i32 0, i32 7, !dbg !6167
  %rtl105 = bitcast %union.basic_block_il_dependent* %il104 to %struct.rtl_bb_info**, !dbg !6167
  %79 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl105, align 8, !dbg !6167
  %end_106 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %79, i32 0, i32 1, !dbg !6167
  %80 = load %struct.rtx_def*, %struct.rtx_def** %end_106, align 8, !dbg !6167
  %call = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %80, i32 13, %struct.rtx_def* null), !dbg !6168
  store %struct.rtx_def* %call, %struct.rtx_def** %note, align 8, !dbg !6169
  %tobool107 = icmp ne %struct.rtx_def* %call, null, !dbg !6169
  br i1 %tobool107, label %land.lhs.true108, label %if.end215, !dbg !6170

land.lhs.true108:                                 ; preds = %land.lhs.true103
  %81 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6171
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %81, i32 0, i32 1, !dbg !6171
  %82 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !6171
  %tobool109 = icmp ne %struct.VEC_edge_gc* %82, null, !dbg !6171
  br i1 %tobool109, label %cond.true110, label %cond.false112, !dbg !6171

cond.true110:                                     ; preds = %land.lhs.true108
  %83 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6171
  %succs111 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %83, i32 0, i32 1, !dbg !6171
  %84 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs111, align 8, !dbg !6171
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %84, i32 0, i32 0, !dbg !6171
  br label %cond.end113, !dbg !6171

cond.false112:                                    ; preds = %land.lhs.true108
  br label %cond.end113, !dbg !6171

cond.end113:                                      ; preds = %cond.false112, %cond.true110
  %cond114 = phi %struct.VEC_edge_base* [ %base, %cond.true110 ], [ null, %cond.false112 ], !dbg !6171
  %call115 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond114), !dbg !6171
  %cmp116 = icmp uge i32 %call115, 2, !dbg !6172
  br i1 %cmp116, label %land.lhs.true117, label %if.end215, !dbg !6173

land.lhs.true117:                                 ; preds = %cond.end113
  %85 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6174
  %il118 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %85, i32 0, i32 7, !dbg !6174
  %rtl119 = bitcast %union.basic_block_il_dependent* %il118 to %struct.rtl_bb_info**, !dbg !6174
  %86 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl119, align 8, !dbg !6174
  %end_120 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %86, i32 0, i32 1, !dbg !6174
  %87 = load %struct.rtx_def*, %struct.rtx_def** %end_120, align 8, !dbg !6174
  %call121 = call i32 @any_condjump_p(%struct.rtx_def* %87), !dbg !6175
  %tobool122 = icmp ne i32 %call121, 0, !dbg !6175
  br i1 %tobool122, label %if.then123, label %if.end215, !dbg !6176

if.then123:                                       ; preds = %land.lhs.true117
  %88 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !6177
  %u124 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %88, i32 0, i32 1, !dbg !6177
  %fld125 = bitcast %union.u* %u124 to [1 x %union.rtunion_def]*, !dbg !6177
  %arrayidx126 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld125, i64 0, i64 0, !dbg !6177
  %rt_rtx127 = bitcast %union.rtunion_def* %arrayidx126 to %struct.rtx_def**, !dbg !6177
  %89 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx127, align 8, !dbg !6177
  %u128 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %89, i32 0, i32 1, !dbg !6177
  %hwint = bitcast %union.u* %u128 to [1 x i64]*, !dbg !6177
  %arrayidx129 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !6177
  %90 = load i64, i64* %arrayidx129, align 8, !dbg !6177
  %91 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6180
  %succs130 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %91, i32 0, i32 1, !dbg !6180
  %92 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs130, align 8, !dbg !6180
  %tobool131 = icmp ne %struct.VEC_edge_gc* %92, null, !dbg !6180
  br i1 %tobool131, label %cond.true132, label %cond.false135, !dbg !6180

cond.true132:                                     ; preds = %if.then123
  %93 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6180
  %succs133 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %93, i32 0, i32 1, !dbg !6180
  %94 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs133, align 8, !dbg !6180
  %base134 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %94, i32 0, i32 0, !dbg !6180
  br label %cond.end136, !dbg !6180

cond.false135:                                    ; preds = %if.then123
  br label %cond.end136, !dbg !6180

cond.end136:                                      ; preds = %cond.false135, %cond.true132
  %cond137 = phi %struct.VEC_edge_base* [ %base134, %cond.true132 ], [ null, %cond.false135 ], !dbg !6180
  %call138 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond137, i32 0), !dbg !6180
  %flags139 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call138, i32 0, i32 7, !dbg !6180
  %95 = load i32, i32* %flags139, align 8, !dbg !6180
  %and140 = and i32 %95, 1, !dbg !6180
  %tobool141 = icmp ne i32 %and140, 0, !dbg !6180
  br i1 %tobool141, label %cond.true142, label %cond.false152, !dbg !6180

cond.true142:                                     ; preds = %cond.end136
  %96 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6180
  %succs143 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %96, i32 0, i32 1, !dbg !6180
  %97 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs143, align 8, !dbg !6180
  %tobool144 = icmp ne %struct.VEC_edge_gc* %97, null, !dbg !6180
  br i1 %tobool144, label %cond.true145, label %cond.false148, !dbg !6180

cond.true145:                                     ; preds = %cond.true142
  %98 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6180
  %succs146 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %98, i32 0, i32 1, !dbg !6180
  %99 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs146, align 8, !dbg !6180
  %base147 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %99, i32 0, i32 0, !dbg !6180
  br label %cond.end149, !dbg !6180

cond.false148:                                    ; preds = %cond.true142
  br label %cond.end149, !dbg !6180

cond.end149:                                      ; preds = %cond.false148, %cond.true145
  %cond150 = phi %struct.VEC_edge_base* [ %base147, %cond.true145 ], [ null, %cond.false148 ], !dbg !6180
  %call151 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond150, i32 1), !dbg !6180
  br label %cond.end162, !dbg !6180

cond.false152:                                    ; preds = %cond.end136
  %100 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6180
  %succs153 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %100, i32 0, i32 1, !dbg !6180
  %101 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs153, align 8, !dbg !6180
  %tobool154 = icmp ne %struct.VEC_edge_gc* %101, null, !dbg !6180
  br i1 %tobool154, label %cond.true155, label %cond.false158, !dbg !6180

cond.true155:                                     ; preds = %cond.false152
  %102 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6180
  %succs156 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %102, i32 0, i32 1, !dbg !6180
  %103 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs156, align 8, !dbg !6180
  %base157 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %103, i32 0, i32 0, !dbg !6180
  br label %cond.end159, !dbg !6180

cond.false158:                                    ; preds = %cond.false152
  br label %cond.end159, !dbg !6180

cond.end159:                                      ; preds = %cond.false158, %cond.true155
  %cond160 = phi %struct.VEC_edge_base* [ %base157, %cond.true155 ], [ null, %cond.false158 ], !dbg !6180
  %call161 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond160, i32 0), !dbg !6180
  br label %cond.end162, !dbg !6180

cond.end162:                                      ; preds = %cond.end159, %cond.end149
  %cond163 = phi %struct.edge_def* [ %call151, %cond.end149 ], [ %call161, %cond.end159 ], !dbg !6180
  %probability = getelementptr inbounds %struct.edge_def, %struct.edge_def* %cond163, i32 0, i32 8, !dbg !6181
  %104 = load i32, i32* %probability, align 4, !dbg !6181
  %conv = sext i32 %104 to i64, !dbg !6180
  %cmp164 = icmp ne i64 %90, %conv, !dbg !6182
  br i1 %cmp164, label %land.lhs.true166, label %if.end214, !dbg !6183

land.lhs.true166:                                 ; preds = %cond.end162
  %105 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6184
  %add.ptr167 = getelementptr inbounds %struct.function, %struct.function* %105, i64 0, !dbg !6184
  %cfg168 = getelementptr inbounds %struct.function, %struct.function* %add.ptr167, i32 0, i32 1, !dbg !6184
  %106 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg168, align 8, !dbg !6184
  %x_profile_status = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %106, i32 0, i32 7, !dbg !6184
  %107 = load i32, i32* %x_profile_status, align 8, !dbg !6184
  %cmp169 = icmp ne i32 %107, 0, !dbg !6185
  br i1 %cmp169, label %if.then171, label %if.end214, !dbg !6186

if.then171:                                       ; preds = %land.lhs.true166
  %108 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !6187
  %u172 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %108, i32 0, i32 1, !dbg !6187
  %fld173 = bitcast %union.u* %u172 to [1 x %union.rtunion_def]*, !dbg !6187
  %arrayidx174 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld173, i64 0, i64 0, !dbg !6187
  %rt_rtx175 = bitcast %union.rtunion_def* %arrayidx174 to %struct.rtx_def**, !dbg !6187
  %109 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx175, align 8, !dbg !6187
  %u176 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %109, i32 0, i32 1, !dbg !6187
  %hwint177 = bitcast %union.u* %u176 to [1 x i64]*, !dbg !6187
  %arrayidx178 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint177, i64 0, i64 0, !dbg !6187
  %110 = load i64, i64* %arrayidx178, align 8, !dbg !6187
  %111 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6189
  %succs179 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %111, i32 0, i32 1, !dbg !6189
  %112 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs179, align 8, !dbg !6189
  %tobool180 = icmp ne %struct.VEC_edge_gc* %112, null, !dbg !6189
  br i1 %tobool180, label %cond.true181, label %cond.false184, !dbg !6189

cond.true181:                                     ; preds = %if.then171
  %113 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6189
  %succs182 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %113, i32 0, i32 1, !dbg !6189
  %114 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs182, align 8, !dbg !6189
  %base183 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %114, i32 0, i32 0, !dbg !6189
  br label %cond.end185, !dbg !6189

cond.false184:                                    ; preds = %if.then171
  br label %cond.end185, !dbg !6189

cond.end185:                                      ; preds = %cond.false184, %cond.true181
  %cond186 = phi %struct.VEC_edge_base* [ %base183, %cond.true181 ], [ null, %cond.false184 ], !dbg !6189
  %call187 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond186, i32 0), !dbg !6189
  %flags188 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call187, i32 0, i32 7, !dbg !6189
  %115 = load i32, i32* %flags188, align 8, !dbg !6189
  %and189 = and i32 %115, 1, !dbg !6189
  %tobool190 = icmp ne i32 %and189, 0, !dbg !6189
  br i1 %tobool190, label %cond.true191, label %cond.false201, !dbg !6189

cond.true191:                                     ; preds = %cond.end185
  %116 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6189
  %succs192 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %116, i32 0, i32 1, !dbg !6189
  %117 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs192, align 8, !dbg !6189
  %tobool193 = icmp ne %struct.VEC_edge_gc* %117, null, !dbg !6189
  br i1 %tobool193, label %cond.true194, label %cond.false197, !dbg !6189

cond.true194:                                     ; preds = %cond.true191
  %118 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6189
  %succs195 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %118, i32 0, i32 1, !dbg !6189
  %119 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs195, align 8, !dbg !6189
  %base196 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %119, i32 0, i32 0, !dbg !6189
  br label %cond.end198, !dbg !6189

cond.false197:                                    ; preds = %cond.true191
  br label %cond.end198, !dbg !6189

cond.end198:                                      ; preds = %cond.false197, %cond.true194
  %cond199 = phi %struct.VEC_edge_base* [ %base196, %cond.true194 ], [ null, %cond.false197 ], !dbg !6189
  %call200 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond199, i32 1), !dbg !6189
  br label %cond.end211, !dbg !6189

cond.false201:                                    ; preds = %cond.end185
  %120 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6189
  %succs202 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %120, i32 0, i32 1, !dbg !6189
  %121 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs202, align 8, !dbg !6189
  %tobool203 = icmp ne %struct.VEC_edge_gc* %121, null, !dbg !6189
  br i1 %tobool203, label %cond.true204, label %cond.false207, !dbg !6189

cond.true204:                                     ; preds = %cond.false201
  %122 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6189
  %succs205 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %122, i32 0, i32 1, !dbg !6189
  %123 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs205, align 8, !dbg !6189
  %base206 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %123, i32 0, i32 0, !dbg !6189
  br label %cond.end208, !dbg !6189

cond.false207:                                    ; preds = %cond.false201
  br label %cond.end208, !dbg !6189

cond.end208:                                      ; preds = %cond.false207, %cond.true204
  %cond209 = phi %struct.VEC_edge_base* [ %base206, %cond.true204 ], [ null, %cond.false207 ], !dbg !6189
  %call210 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond209, i32 0), !dbg !6189
  br label %cond.end211, !dbg !6189

cond.end211:                                      ; preds = %cond.end208, %cond.end198
  %cond212 = phi %struct.edge_def* [ %call200, %cond.end198 ], [ %call210, %cond.end208 ], !dbg !6189
  %probability213 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %cond212, i32 0, i32 8, !dbg !6190
  %124 = load i32, i32* %probability213, align 4, !dbg !6190
  call void (i8*, ...) @error(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.41, i64 0, i64 0), i64 %110, i32 %124), !dbg !6191
  store i32 1, i32* %err, align 4, !dbg !6192
  br label %if.end214, !dbg !6193

if.end214:                                        ; preds = %cond.end211, %land.lhs.true166, %cond.end162
  br label %if.end215, !dbg !6194

if.end215:                                        ; preds = %if.end214, %land.lhs.true117, %cond.end113, %land.lhs.true103, %for.body96
  %125 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6195
  %succs216 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %125, i32 0, i32 1, !dbg !6195
  %call217 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs216), !dbg !6195
  %126 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !6195
  %127 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %126, i32 0, i32 0, !dbg !6195
  %128 = extractvalue { i32, %struct.VEC_edge_gc** } %call217, 0, !dbg !6195
  store i32 %128, i32* %127, align 8, !dbg !6195
  %129 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %126, i32 0, i32 1, !dbg !6195
  %130 = extractvalue { i32, %struct.VEC_edge_gc** } %call217, 1, !dbg !6195
  store %struct.VEC_edge_gc** %130, %struct.VEC_edge_gc*** %129, align 8, !dbg !6195
  %131 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !6195
  %132 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !6195
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %131, i8* align 8 %132, i64 16, i1 false), !dbg !6195
  br label %for.cond218, !dbg !6195

for.cond218:                                      ; preds = %for.inc279, %if.end215
  %133 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !6197
  %134 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %133, i32 0, i32 0, !dbg !6197
  %135 = load i32, i32* %134, align 8, !dbg !6197
  %136 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %133, i32 0, i32 1, !dbg !6197
  %137 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %136, align 8, !dbg !6197
  %call219 = call zeroext i8 @ei_cond(i32 %135, %struct.VEC_edge_gc** %137, %struct.edge_def** %e), !dbg !6197
  %tobool220 = icmp ne i8 %call219, 0, !dbg !6195
  br i1 %tobool220, label %for.body221, label %for.end280, !dbg !6195

for.body221:                                      ; preds = %for.cond218
  %138 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6199
  %flags222 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %138, i32 0, i32 7, !dbg !6202
  %139 = load i32, i32* %flags222, align 8, !dbg !6202
  %and223 = and i32 %139, 1, !dbg !6203
  %tobool224 = icmp ne i32 %and223, 0, !dbg !6203
  br i1 %tobool224, label %if.then225, label %if.end253, !dbg !6204

if.then225:                                       ; preds = %for.body221
  %140 = load i32, i32* %n_fallthru, align 4, !dbg !6205
  %inc = add nsw i32 %140, 1, !dbg !6205
  store i32 %inc, i32* %n_fallthru, align 4, !dbg !6205
  %141 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6207
  store %struct.edge_def* %141, %struct.edge_def** %fallthru, align 8, !dbg !6208
  %142 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6209
  %flags226 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %142, i32 0, i32 7, !dbg !6211
  %143 = load i32, i32* %flags226, align 8, !dbg !6211
  %and227 = and i32 %143, 8192, !dbg !6212
  %tobool228 = icmp ne i32 %and227, 0, !dbg !6212
  br i1 %tobool228, label %if.then249, label %lor.lhs.false, !dbg !6213

lor.lhs.false:                                    ; preds = %if.then225
  %144 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6214
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %144, i32 0, i32 0, !dbg !6214
  %145 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !6214
  %flags229 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %145, i32 0, i32 13, !dbg !6214
  %146 = load i32, i32* %flags229, align 8, !dbg !6214
  %and230 = and i32 %146, 96, !dbg !6214
  %147 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6215
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %147, i32 0, i32 1, !dbg !6215
  %148 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !6215
  %flags231 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %148, i32 0, i32 13, !dbg !6215
  %149 = load i32, i32* %flags231, align 8, !dbg !6215
  %and232 = and i32 %149, 96, !dbg !6215
  %cmp233 = icmp ne i32 %and230, %and232, !dbg !6216
  br i1 %cmp233, label %land.lhs.true235, label %if.end252, !dbg !6217

land.lhs.true235:                                 ; preds = %lor.lhs.false
  %150 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6218
  %src236 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %150, i32 0, i32 0, !dbg !6219
  %151 = load %struct.basic_block_def*, %struct.basic_block_def** %src236, align 8, !dbg !6219
  %152 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6220
  %add.ptr237 = getelementptr inbounds %struct.function, %struct.function* %152, i64 0, !dbg !6220
  %cfg238 = getelementptr inbounds %struct.function, %struct.function* %add.ptr237, i32 0, i32 1, !dbg !6220
  %153 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg238, align 8, !dbg !6220
  %x_entry_block_ptr239 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %153, i32 0, i32 0, !dbg !6220
  %154 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr239, align 8, !dbg !6220
  %cmp240 = icmp ne %struct.basic_block_def* %151, %154, !dbg !6221
  br i1 %cmp240, label %land.lhs.true242, label %if.end252, !dbg !6222

land.lhs.true242:                                 ; preds = %land.lhs.true235
  %155 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6223
  %dest243 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %155, i32 0, i32 1, !dbg !6224
  %156 = load %struct.basic_block_def*, %struct.basic_block_def** %dest243, align 8, !dbg !6224
  %157 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6225
  %add.ptr244 = getelementptr inbounds %struct.function, %struct.function* %157, i64 0, !dbg !6225
  %cfg245 = getelementptr inbounds %struct.function, %struct.function* %add.ptr244, i32 0, i32 1, !dbg !6225
  %158 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg245, align 8, !dbg !6225
  %x_exit_block_ptr246 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %158, i32 0, i32 1, !dbg !6225
  %159 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr246, align 8, !dbg !6225
  %cmp247 = icmp ne %struct.basic_block_def* %156, %159, !dbg !6226
  br i1 %cmp247, label %if.then249, label %if.end252, !dbg !6227

if.then249:                                       ; preds = %land.lhs.true242, %if.then225
  %160 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6228
  %src250 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %160, i32 0, i32 0, !dbg !6230
  %161 = load %struct.basic_block_def*, %struct.basic_block_def** %src250, align 8, !dbg !6230
  %index251 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %161, i32 0, i32 9, !dbg !6231
  %162 = load i32, i32* %index251, align 8, !dbg !6231
  call void (i8*, ...) @error(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.42, i64 0, i64 0), i32 %162), !dbg !6232
  store i32 1, i32* %err, align 4, !dbg !6233
  br label %if.end252, !dbg !6234

if.end252:                                        ; preds = %if.then249, %land.lhs.true242, %land.lhs.true235, %lor.lhs.false
  br label %if.end253, !dbg !6235

if.end253:                                        ; preds = %if.end252, %for.body221
  %163 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6236
  %flags254 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %163, i32 0, i32 7, !dbg !6238
  %164 = load i32, i32* %flags254, align 8, !dbg !6238
  %and255 = and i32 %164, -8929, !dbg !6239
  %cmp256 = icmp eq i32 %and255, 0, !dbg !6240
  br i1 %cmp256, label %if.then258, label %if.end260, !dbg !6241

if.then258:                                       ; preds = %if.end253
  %165 = load i32, i32* %n_branch, align 4, !dbg !6242
  %inc259 = add nsw i32 %165, 1, !dbg !6242
  store i32 %inc259, i32* %n_branch, align 4, !dbg !6242
  br label %if.end260, !dbg !6243

if.end260:                                        ; preds = %if.then258, %if.end253
  %166 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6244
  %flags261 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %166, i32 0, i32 7, !dbg !6246
  %167 = load i32, i32* %flags261, align 8, !dbg !6246
  %and262 = and i32 %167, 4, !dbg !6247
  %tobool263 = icmp ne i32 %and262, 0, !dbg !6247
  br i1 %tobool263, label %if.then264, label %if.end266, !dbg !6248

if.then264:                                       ; preds = %if.end260
  %168 = load i32, i32* %n_call, align 4, !dbg !6249
  %inc265 = add nsw i32 %168, 1, !dbg !6249
  store i32 %inc265, i32* %n_call, align 4, !dbg !6249
  br label %if.end266, !dbg !6250

if.end266:                                        ; preds = %if.then264, %if.end260
  %169 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6251
  %flags267 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %169, i32 0, i32 7, !dbg !6253
  %170 = load i32, i32* %flags267, align 8, !dbg !6253
  %and268 = and i32 %170, 8, !dbg !6254
  %tobool269 = icmp ne i32 %and268, 0, !dbg !6254
  br i1 %tobool269, label %if.then270, label %if.else, !dbg !6255

if.then270:                                       ; preds = %if.end266
  %171 = load i32, i32* %n_eh, align 4, !dbg !6256
  %inc271 = add nsw i32 %171, 1, !dbg !6256
  store i32 %inc271, i32* %n_eh, align 4, !dbg !6256
  br label %if.end278, !dbg !6257

if.else:                                          ; preds = %if.end266
  %172 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6258
  %flags272 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %172, i32 0, i32 7, !dbg !6260
  %173 = load i32, i32* %flags272, align 8, !dbg !6260
  %and273 = and i32 %173, 2, !dbg !6261
  %tobool274 = icmp ne i32 %and273, 0, !dbg !6261
  br i1 %tobool274, label %if.then275, label %if.end277, !dbg !6262

if.then275:                                       ; preds = %if.else
  %174 = load i32, i32* %n_abnormal, align 4, !dbg !6263
  %inc276 = add nsw i32 %174, 1, !dbg !6263
  store i32 %inc276, i32* %n_abnormal, align 4, !dbg !6263
  br label %if.end277, !dbg !6264

if.end277:                                        ; preds = %if.then275, %if.else
  br label %if.end278

if.end278:                                        ; preds = %if.end277, %if.then270
  br label %for.inc279, !dbg !6265

for.inc279:                                       ; preds = %if.end278
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !6197
  br label %for.cond218, !dbg !6197, !llvm.loop !6266

for.end280:                                       ; preds = %for.cond218
  %175 = load i32, i32* %n_eh, align 4, !dbg !6268
  %tobool281 = icmp ne i32 %175, 0, !dbg !6268
  br i1 %tobool281, label %land.lhs.true282, label %if.end290, !dbg !6270

land.lhs.true282:                                 ; preds = %for.end280
  %176 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6271
  %il283 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %176, i32 0, i32 7, !dbg !6271
  %rtl284 = bitcast %union.basic_block_il_dependent* %il283 to %struct.rtl_bb_info**, !dbg !6271
  %177 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl284, align 8, !dbg !6271
  %end_285 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %177, i32 0, i32 1, !dbg !6271
  %178 = load %struct.rtx_def*, %struct.rtx_def** %end_285, align 8, !dbg !6271
  %call286 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %178, i32 25, %struct.rtx_def* null), !dbg !6272
  %tobool287 = icmp ne %struct.rtx_def* %call286, null, !dbg !6272
  br i1 %tobool287, label %if.end290, label %if.then288, !dbg !6273

if.then288:                                       ; preds = %land.lhs.true282
  %179 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6274
  %index289 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %179, i32 0, i32 9, !dbg !6276
  %180 = load i32, i32* %index289, align 8, !dbg !6276
  call void (i8*, ...) @error(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.43, i64 0, i64 0), i32 %180), !dbg !6277
  store i32 1, i32* %err, align 4, !dbg !6278
  br label %if.end290, !dbg !6279

if.end290:                                        ; preds = %if.then288, %land.lhs.true282, %for.end280
  %181 = load i32, i32* %n_eh, align 4, !dbg !6280
  %cmp291 = icmp sgt i32 %181, 1, !dbg !6282
  br i1 %cmp291, label %if.then293, label %if.end295, !dbg !6283

if.then293:                                       ; preds = %if.end290
  %182 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6284
  %index294 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %182, i32 0, i32 9, !dbg !6286
  %183 = load i32, i32* %index294, align 8, !dbg !6286
  call void (i8*, ...) @error(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.44, i64 0, i64 0), i32 %183), !dbg !6287
  store i32 1, i32* %err, align 4, !dbg !6288
  br label %if.end295, !dbg !6289

if.end295:                                        ; preds = %if.then293, %if.end290
  %184 = load i32, i32* %n_branch, align 4, !dbg !6290
  %tobool296 = icmp ne i32 %184, 0, !dbg !6290
  br i1 %tobool296, label %land.lhs.true297, label %if.end322, !dbg !6292

land.lhs.true297:                                 ; preds = %if.end295
  %185 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6293
  %il298 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %185, i32 0, i32 7, !dbg !6293
  %rtl299 = bitcast %union.basic_block_il_dependent* %il298 to %struct.rtl_bb_info**, !dbg !6293
  %186 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl299, align 8, !dbg !6293
  %end_300 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %186, i32 0, i32 1, !dbg !6293
  %187 = load %struct.rtx_def*, %struct.rtx_def** %end_300, align 8, !dbg !6293
  %188 = bitcast %struct.rtx_def* %187 to i32*, !dbg !6293
  %bf.load301 = load i32, i32* %188, align 8, !dbg !6293
  %bf.clear302 = and i32 %bf.load301, 65535, !dbg !6293
  %cmp303 = icmp eq i32 %bf.clear302, 9, !dbg !6293
  br i1 %cmp303, label %lor.lhs.false305, label %if.then320, !dbg !6294

lor.lhs.false305:                                 ; preds = %land.lhs.true297
  %189 = load i32, i32* %n_branch, align 4, !dbg !6295
  %cmp306 = icmp sgt i32 %189, 1, !dbg !6296
  br i1 %cmp306, label %land.lhs.true308, label %if.end322, !dbg !6297

land.lhs.true308:                                 ; preds = %lor.lhs.false305
  %190 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6298
  %il309 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %190, i32 0, i32 7, !dbg !6298
  %rtl310 = bitcast %union.basic_block_il_dependent* %il309 to %struct.rtl_bb_info**, !dbg !6298
  %191 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl310, align 8, !dbg !6298
  %end_311 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %191, i32 0, i32 1, !dbg !6298
  %192 = load %struct.rtx_def*, %struct.rtx_def** %end_311, align 8, !dbg !6298
  %call312 = call i32 @any_uncondjump_p(%struct.rtx_def* %192), !dbg !6299
  %tobool313 = icmp ne i32 %call312, 0, !dbg !6299
  br i1 %tobool313, label %if.then320, label %lor.lhs.false314, !dbg !6300

lor.lhs.false314:                                 ; preds = %land.lhs.true308
  %193 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6301
  %il315 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %193, i32 0, i32 7, !dbg !6301
  %rtl316 = bitcast %union.basic_block_il_dependent* %il315 to %struct.rtl_bb_info**, !dbg !6301
  %194 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl316, align 8, !dbg !6301
  %end_317 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %194, i32 0, i32 1, !dbg !6301
  %195 = load %struct.rtx_def*, %struct.rtx_def** %end_317, align 8, !dbg !6301
  %call318 = call i32 @any_condjump_p(%struct.rtx_def* %195), !dbg !6302
  %tobool319 = icmp ne i32 %call318, 0, !dbg !6302
  br i1 %tobool319, label %if.then320, label %if.end322, !dbg !6303

if.then320:                                       ; preds = %lor.lhs.false314, %land.lhs.true308, %land.lhs.true297
  %196 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6304
  %index321 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %196, i32 0, i32 9, !dbg !6306
  %197 = load i32, i32* %index321, align 8, !dbg !6306
  call void (i8*, ...) @error(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.45, i64 0, i64 0), i32 %197), !dbg !6307
  store i32 1, i32* %err, align 4, !dbg !6308
  br label %if.end322, !dbg !6309

if.end322:                                        ; preds = %if.then320, %lor.lhs.false314, %lor.lhs.false305, %if.end295
  %198 = load i32, i32* %n_fallthru, align 4, !dbg !6310
  %tobool323 = icmp ne i32 %198, 0, !dbg !6310
  br i1 %tobool323, label %land.lhs.true324, label %if.end332, !dbg !6312

land.lhs.true324:                                 ; preds = %if.end322
  %199 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6313
  %il325 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %199, i32 0, i32 7, !dbg !6313
  %rtl326 = bitcast %union.basic_block_il_dependent* %il325 to %struct.rtl_bb_info**, !dbg !6313
  %200 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl326, align 8, !dbg !6313
  %end_327 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %200, i32 0, i32 1, !dbg !6313
  %201 = load %struct.rtx_def*, %struct.rtx_def** %end_327, align 8, !dbg !6313
  %call328 = call i32 @any_uncondjump_p(%struct.rtx_def* %201), !dbg !6314
  %tobool329 = icmp ne i32 %call328, 0, !dbg !6314
  br i1 %tobool329, label %if.then330, label %if.end332, !dbg !6315

if.then330:                                       ; preds = %land.lhs.true324
  %202 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6316
  %index331 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %202, i32 0, i32 9, !dbg !6318
  %203 = load i32, i32* %index331, align 8, !dbg !6318
  call void (i8*, ...) @error(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.46, i64 0, i64 0), i32 %203), !dbg !6319
  store i32 1, i32* %err, align 4, !dbg !6320
  br label %if.end332, !dbg !6321

if.end332:                                        ; preds = %if.then330, %land.lhs.true324, %if.end322
  %204 = load i32, i32* %n_branch, align 4, !dbg !6322
  %cmp333 = icmp ne i32 %204, 1, !dbg !6324
  br i1 %cmp333, label %land.lhs.true335, label %if.end343, !dbg !6325

land.lhs.true335:                                 ; preds = %if.end332
  %205 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6326
  %il336 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %205, i32 0, i32 7, !dbg !6326
  %rtl337 = bitcast %union.basic_block_il_dependent* %il336 to %struct.rtl_bb_info**, !dbg !6326
  %206 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl337, align 8, !dbg !6326
  %end_338 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %206, i32 0, i32 1, !dbg !6326
  %207 = load %struct.rtx_def*, %struct.rtx_def** %end_338, align 8, !dbg !6326
  %call339 = call i32 @any_uncondjump_p(%struct.rtx_def* %207), !dbg !6327
  %tobool340 = icmp ne i32 %call339, 0, !dbg !6327
  br i1 %tobool340, label %if.then341, label %if.end343, !dbg !6328

if.then341:                                       ; preds = %land.lhs.true335
  %208 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6329
  %index342 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %208, i32 0, i32 9, !dbg !6331
  %209 = load i32, i32* %index342, align 8, !dbg !6331
  call void (i8*, ...) @error(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.47, i64 0, i64 0), i32 %209), !dbg !6332
  store i32 1, i32* %err, align 4, !dbg !6333
  br label %if.end343, !dbg !6334

if.end343:                                        ; preds = %if.then341, %land.lhs.true335, %if.end332
  %210 = load i32, i32* %n_branch, align 4, !dbg !6335
  %cmp344 = icmp ne i32 %210, 1, !dbg !6337
  br i1 %cmp344, label %land.lhs.true346, label %if.end368, !dbg !6338

land.lhs.true346:                                 ; preds = %if.end343
  %211 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6339
  %il347 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %211, i32 0, i32 7, !dbg !6339
  %rtl348 = bitcast %union.basic_block_il_dependent* %il347 to %struct.rtl_bb_info**, !dbg !6339
  %212 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl348, align 8, !dbg !6339
  %end_349 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %212, i32 0, i32 1, !dbg !6339
  %213 = load %struct.rtx_def*, %struct.rtx_def** %end_349, align 8, !dbg !6339
  %call350 = call i32 @any_condjump_p(%struct.rtx_def* %213), !dbg !6340
  %tobool351 = icmp ne i32 %call350, 0, !dbg !6340
  br i1 %tobool351, label %land.lhs.true352, label %if.end368, !dbg !6341

land.lhs.true352:                                 ; preds = %land.lhs.true346
  %214 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6342
  %il353 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %214, i32 0, i32 7, !dbg !6342
  %rtl354 = bitcast %union.basic_block_il_dependent* %il353 to %struct.rtl_bb_info**, !dbg !6342
  %215 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl354, align 8, !dbg !6342
  %end_355 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %215, i32 0, i32 1, !dbg !6342
  %216 = load %struct.rtx_def*, %struct.rtx_def** %end_355, align 8, !dbg !6342
  %u356 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %216, i32 0, i32 1, !dbg !6342
  %fld357 = bitcast %union.u* %u356 to [1 x %union.rtunion_def]*, !dbg !6342
  %arrayidx358 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld357, i64 0, i64 8, !dbg !6342
  %rt_rtx359 = bitcast %union.rtunion_def* %arrayidx358 to %struct.rtx_def**, !dbg !6342
  %217 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx359, align 8, !dbg !6342
  %218 = load %struct.edge_def*, %struct.edge_def** %fallthru, align 8, !dbg !6343
  %dest360 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %218, i32 0, i32 1, !dbg !6343
  %219 = load %struct.basic_block_def*, %struct.basic_block_def** %dest360, align 8, !dbg !6343
  %il361 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %219, i32 0, i32 7, !dbg !6343
  %rtl362 = bitcast %union.basic_block_il_dependent* %il361 to %struct.rtl_bb_info**, !dbg !6343
  %220 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl362, align 8, !dbg !6343
  %head_363 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %220, i32 0, i32 0, !dbg !6343
  %221 = load %struct.rtx_def*, %struct.rtx_def** %head_363, align 8, !dbg !6343
  %cmp364 = icmp ne %struct.rtx_def* %217, %221, !dbg !6344
  br i1 %cmp364, label %if.then366, label %if.end368, !dbg !6345

if.then366:                                       ; preds = %land.lhs.true352
  %222 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6346
  %index367 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %222, i32 0, i32 9, !dbg !6348
  %223 = load i32, i32* %index367, align 8, !dbg !6348
  call void (i8*, ...) @error(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.48, i64 0, i64 0), i32 %223), !dbg !6349
  store i32 1, i32* %err, align 4, !dbg !6350
  br label %if.end368, !dbg !6351

if.end368:                                        ; preds = %if.then366, %land.lhs.true352, %land.lhs.true346, %if.end343
  %224 = load i32, i32* %n_call, align 4, !dbg !6352
  %tobool369 = icmp ne i32 %224, 0, !dbg !6352
  br i1 %tobool369, label %land.lhs.true370, label %if.end380, !dbg !6354

land.lhs.true370:                                 ; preds = %if.end368
  %225 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6355
  %il371 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %225, i32 0, i32 7, !dbg !6355
  %rtl372 = bitcast %union.basic_block_il_dependent* %il371 to %struct.rtl_bb_info**, !dbg !6355
  %226 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl372, align 8, !dbg !6355
  %end_373 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %226, i32 0, i32 1, !dbg !6355
  %227 = load %struct.rtx_def*, %struct.rtx_def** %end_373, align 8, !dbg !6355
  %228 = bitcast %struct.rtx_def* %227 to i32*, !dbg !6355
  %bf.load374 = load i32, i32* %228, align 8, !dbg !6355
  %bf.clear375 = and i32 %bf.load374, 65535, !dbg !6355
  %cmp376 = icmp eq i32 %bf.clear375, 10, !dbg !6355
  br i1 %cmp376, label %if.end380, label %if.then378, !dbg !6356

if.then378:                                       ; preds = %land.lhs.true370
  %229 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6357
  %index379 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %229, i32 0, i32 9, !dbg !6359
  %230 = load i32, i32* %index379, align 8, !dbg !6359
  call void (i8*, ...) @error(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.49, i64 0, i64 0), i32 %230), !dbg !6360
  store i32 1, i32* %err, align 4, !dbg !6361
  br label %if.end380, !dbg !6362

if.end380:                                        ; preds = %if.then378, %land.lhs.true370, %if.end368
  %231 = load i32, i32* %n_abnormal, align 4, !dbg !6363
  %tobool381 = icmp ne i32 %231, 0, !dbg !6363
  br i1 %tobool381, label %land.lhs.true382, label %if.end415, !dbg !6365

land.lhs.true382:                                 ; preds = %if.end380
  %232 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6366
  %il383 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %232, i32 0, i32 7, !dbg !6366
  %rtl384 = bitcast %union.basic_block_il_dependent* %il383 to %struct.rtl_bb_info**, !dbg !6366
  %233 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl384, align 8, !dbg !6366
  %end_385 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %233, i32 0, i32 1, !dbg !6366
  %234 = load %struct.rtx_def*, %struct.rtx_def** %end_385, align 8, !dbg !6366
  %235 = bitcast %struct.rtx_def* %234 to i32*, !dbg !6366
  %bf.load386 = load i32, i32* %235, align 8, !dbg !6366
  %bf.clear387 = and i32 %bf.load386, 65535, !dbg !6366
  %cmp388 = icmp eq i32 %bf.clear387, 10, !dbg !6366
  br i1 %cmp388, label %if.end415, label %land.lhs.true390, !dbg !6367

land.lhs.true390:                                 ; preds = %land.lhs.true382
  %236 = load i32, i32* %n_call, align 4, !dbg !6368
  %237 = load i32, i32* %n_abnormal, align 4, !dbg !6369
  %cmp391 = icmp ne i32 %236, %237, !dbg !6370
  br i1 %cmp391, label %land.lhs.true393, label %if.end415, !dbg !6371

land.lhs.true393:                                 ; preds = %land.lhs.true390
  %238 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6372
  %il394 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %238, i32 0, i32 7, !dbg !6372
  %rtl395 = bitcast %union.basic_block_il_dependent* %il394 to %struct.rtl_bb_info**, !dbg !6372
  %239 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl395, align 8, !dbg !6372
  %end_396 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %239, i32 0, i32 1, !dbg !6372
  %240 = load %struct.rtx_def*, %struct.rtx_def** %end_396, align 8, !dbg !6372
  %241 = bitcast %struct.rtx_def* %240 to i32*, !dbg !6372
  %bf.load397 = load i32, i32* %241, align 8, !dbg !6372
  %bf.clear398 = and i32 %bf.load397, 65535, !dbg !6372
  %cmp399 = icmp eq i32 %bf.clear398, 9, !dbg !6372
  br i1 %cmp399, label %lor.lhs.false401, label %if.then413, !dbg !6373

lor.lhs.false401:                                 ; preds = %land.lhs.true393
  %242 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6374
  %il402 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %242, i32 0, i32 7, !dbg !6374
  %rtl403 = bitcast %union.basic_block_il_dependent* %il402 to %struct.rtl_bb_info**, !dbg !6374
  %243 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl403, align 8, !dbg !6374
  %end_404 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %243, i32 0, i32 1, !dbg !6374
  %244 = load %struct.rtx_def*, %struct.rtx_def** %end_404, align 8, !dbg !6374
  %call405 = call i32 @any_condjump_p(%struct.rtx_def* %244), !dbg !6375
  %tobool406 = icmp ne i32 %call405, 0, !dbg !6375
  br i1 %tobool406, label %if.then413, label %lor.lhs.false407, !dbg !6376

lor.lhs.false407:                                 ; preds = %lor.lhs.false401
  %245 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6377
  %il408 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %245, i32 0, i32 7, !dbg !6377
  %rtl409 = bitcast %union.basic_block_il_dependent* %il408 to %struct.rtl_bb_info**, !dbg !6377
  %246 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl409, align 8, !dbg !6377
  %end_410 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %246, i32 0, i32 1, !dbg !6377
  %247 = load %struct.rtx_def*, %struct.rtx_def** %end_410, align 8, !dbg !6377
  %call411 = call i32 @any_uncondjump_p(%struct.rtx_def* %247), !dbg !6378
  %tobool412 = icmp ne i32 %call411, 0, !dbg !6378
  br i1 %tobool412, label %if.then413, label %if.end415, !dbg !6379

if.then413:                                       ; preds = %lor.lhs.false407, %lor.lhs.false401, %land.lhs.true393
  %248 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6380
  %index414 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %248, i32 0, i32 9, !dbg !6382
  %249 = load i32, i32* %index414, align 8, !dbg !6382
  call void (i8*, ...) @error(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.50, i64 0, i64 0), i32 %249), !dbg !6383
  store i32 1, i32* %err, align 4, !dbg !6384
  br label %if.end415, !dbg !6385

if.end415:                                        ; preds = %if.then413, %lor.lhs.false407, %land.lhs.true390, %land.lhs.true382, %if.end380
  %250 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6386
  %il416 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %250, i32 0, i32 7, !dbg !6386
  %rtl417 = bitcast %union.basic_block_il_dependent* %il416 to %struct.rtl_bb_info**, !dbg !6386
  %251 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl417, align 8, !dbg !6386
  %head_418 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %251, i32 0, i32 0, !dbg !6386
  %252 = load %struct.rtx_def*, %struct.rtx_def** %head_418, align 8, !dbg !6386
  store %struct.rtx_def* %252, %struct.rtx_def** %x, align 8, !dbg !6388
  br label %for.cond419, !dbg !6389

for.cond419:                                      ; preds = %for.inc466, %if.end415
  %253 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6390
  %254 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6392
  %il420 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %254, i32 0, i32 7, !dbg !6392
  %rtl421 = bitcast %union.basic_block_il_dependent* %il420 to %struct.rtl_bb_info**, !dbg !6392
  %255 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl421, align 8, !dbg !6392
  %end_422 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %255, i32 0, i32 1, !dbg !6392
  %256 = load %struct.rtx_def*, %struct.rtx_def** %end_422, align 8, !dbg !6392
  %u423 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %256, i32 0, i32 1, !dbg !6392
  %fld424 = bitcast %union.u* %u423 to [1 x %union.rtunion_def]*, !dbg !6392
  %arrayidx425 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld424, i64 0, i64 2, !dbg !6392
  %rt_rtx426 = bitcast %union.rtunion_def* %arrayidx425 to %struct.rtx_def**, !dbg !6392
  %257 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx426, align 8, !dbg !6392
  %cmp427 = icmp ne %struct.rtx_def* %253, %257, !dbg !6393
  br i1 %cmp427, label %for.body429, label %for.end471, !dbg !6394

for.body429:                                      ; preds = %for.cond419
  %258 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6395
  %259 = bitcast %struct.rtx_def* %258 to i32*, !dbg !6395
  %bf.load430 = load i32, i32* %259, align 8, !dbg !6395
  %bf.clear431 = and i32 %bf.load430, 65535, !dbg !6395
  %cmp432 = icmp eq i32 %bf.clear431, 11, !dbg !6395
  br i1 %cmp432, label %if.end465, label %land.lhs.true434, !dbg !6397

land.lhs.true434:                                 ; preds = %for.body429
  %260 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6398
  %u435 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %260, i32 0, i32 1, !dbg !6398
  %fld436 = bitcast %union.u* %u435 to [1 x %union.rtunion_def]*, !dbg !6398
  %arrayidx437 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld436, i64 0, i64 3, !dbg !6398
  %rt_bb438 = bitcast %union.rtunion_def* %arrayidx437 to %struct.basic_block_def**, !dbg !6398
  %261 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb438, align 8, !dbg !6398
  %262 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6399
  %cmp439 = icmp ne %struct.basic_block_def* %261, %262, !dbg !6400
  br i1 %cmp439, label %if.then441, label %if.end465, !dbg !6401

if.then441:                                       ; preds = %land.lhs.true434
  %263 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6402
  call void @debug_rtx(%struct.rtx_def* %263), !dbg !6404
  %264 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6405
  %u442 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %264, i32 0, i32 1, !dbg !6405
  %fld443 = bitcast %union.u* %u442 to [1 x %union.rtunion_def]*, !dbg !6405
  %arrayidx444 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld443, i64 0, i64 3, !dbg !6405
  %rt_bb445 = bitcast %union.rtunion_def* %arrayidx444 to %struct.basic_block_def**, !dbg !6405
  %265 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb445, align 8, !dbg !6405
  %tobool446 = icmp ne %struct.basic_block_def* %265, null, !dbg !6405
  br i1 %tobool446, label %if.else453, label %if.then447, !dbg !6407

if.then447:                                       ; preds = %if.then441
  %266 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6408
  %u448 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %266, i32 0, i32 1, !dbg !6408
  %fld449 = bitcast %union.u* %u448 to [1 x %union.rtunion_def]*, !dbg !6408
  %arrayidx450 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld449, i64 0, i64 0, !dbg !6408
  %rt_int451 = bitcast %union.rtunion_def* %arrayidx450 to i32*, !dbg !6408
  %267 = load i32, i32* %rt_int451, align 8, !dbg !6408
  %268 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6409
  %index452 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %268, i32 0, i32 9, !dbg !6410
  %269 = load i32, i32* %index452, align 8, !dbg !6410
  call void (i8*, ...) @error(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.51, i64 0, i64 0), i32 %267, i32 %269), !dbg !6411
  br label %if.end464, !dbg !6411

if.else453:                                       ; preds = %if.then441
  %270 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6412
  %u454 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %270, i32 0, i32 1, !dbg !6412
  %fld455 = bitcast %union.u* %u454 to [1 x %union.rtunion_def]*, !dbg !6412
  %arrayidx456 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld455, i64 0, i64 0, !dbg !6412
  %rt_int457 = bitcast %union.rtunion_def* %arrayidx456 to i32*, !dbg !6412
  %271 = load i32, i32* %rt_int457, align 8, !dbg !6412
  %272 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6413
  %index458 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %272, i32 0, i32 9, !dbg !6414
  %273 = load i32, i32* %index458, align 8, !dbg !6414
  %274 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6415
  %u459 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %274, i32 0, i32 1, !dbg !6415
  %fld460 = bitcast %union.u* %u459 to [1 x %union.rtunion_def]*, !dbg !6415
  %arrayidx461 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld460, i64 0, i64 3, !dbg !6415
  %rt_bb462 = bitcast %union.rtunion_def* %arrayidx461 to %struct.basic_block_def**, !dbg !6415
  %275 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb462, align 8, !dbg !6415
  %index463 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %275, i32 0, i32 9, !dbg !6416
  %276 = load i32, i32* %index463, align 8, !dbg !6416
  call void (i8*, ...) @error(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.52, i64 0, i64 0), i32 %271, i32 %273, i32 %276), !dbg !6417
  br label %if.end464

if.end464:                                        ; preds = %if.else453, %if.then447
  store i32 1, i32* %err, align 4, !dbg !6418
  br label %if.end465, !dbg !6419

if.end465:                                        ; preds = %if.end464, %land.lhs.true434, %for.body429
  br label %for.inc466, !dbg !6399

for.inc466:                                       ; preds = %if.end465
  %277 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6420
  %u467 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %277, i32 0, i32 1, !dbg !6420
  %fld468 = bitcast %union.u* %u467 to [1 x %union.rtunion_def]*, !dbg !6420
  %arrayidx469 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld468, i64 0, i64 2, !dbg !6420
  %rt_rtx470 = bitcast %union.rtunion_def* %arrayidx469 to %struct.rtx_def**, !dbg !6420
  %278 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx470, align 8, !dbg !6420
  store %struct.rtx_def* %278, %struct.rtx_def** %x, align 8, !dbg !6421
  br label %for.cond419, !dbg !6422, !llvm.loop !6423

for.end471:                                       ; preds = %for.cond419
  %279 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6425
  %il472 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %279, i32 0, i32 7, !dbg !6425
  %rtl473 = bitcast %union.basic_block_il_dependent* %il472 to %struct.rtl_bb_info**, !dbg !6425
  %280 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl473, align 8, !dbg !6425
  %head_474 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %280, i32 0, i32 0, !dbg !6425
  %281 = load %struct.rtx_def*, %struct.rtx_def** %head_474, align 8, !dbg !6425
  store %struct.rtx_def* %281, %struct.rtx_def** %x, align 8, !dbg !6426
  %282 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6427
  %283 = bitcast %struct.rtx_def* %282 to i32*, !dbg !6427
  %bf.load475 = load i32, i32* %283, align 8, !dbg !6427
  %bf.clear476 = and i32 %bf.load475, 65535, !dbg !6427
  %cmp477 = icmp eq i32 %bf.clear476, 12, !dbg !6427
  br i1 %cmp477, label %if.then479, label %if.end492, !dbg !6429

if.then479:                                       ; preds = %for.end471
  %284 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6430
  %il480 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %284, i32 0, i32 7, !dbg !6430
  %rtl481 = bitcast %union.basic_block_il_dependent* %il480 to %struct.rtl_bb_info**, !dbg !6430
  %285 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl481, align 8, !dbg !6430
  %end_482 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %285, i32 0, i32 1, !dbg !6430
  %286 = load %struct.rtx_def*, %struct.rtx_def** %end_482, align 8, !dbg !6430
  %287 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6433
  %cmp483 = icmp eq %struct.rtx_def* %286, %287, !dbg !6434
  br i1 %cmp483, label %if.then485, label %if.end487, !dbg !6435

if.then485:                                       ; preds = %if.then479
  %288 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6436
  %index486 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %288, i32 0, i32 9, !dbg !6438
  %289 = load i32, i32* %index486, align 8, !dbg !6438
  call void (i8*, ...) @error(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.53, i64 0, i64 0), i32 %289), !dbg !6439
  store i32 1, i32* %err, align 4, !dbg !6440
  br label %if.end487, !dbg !6441

if.end487:                                        ; preds = %if.then485, %if.then479
  %290 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6442
  %u488 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %290, i32 0, i32 1, !dbg !6442
  %fld489 = bitcast %union.u* %u488 to [1 x %union.rtunion_def]*, !dbg !6442
  %arrayidx490 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld489, i64 0, i64 2, !dbg !6442
  %rt_rtx491 = bitcast %union.rtunion_def* %arrayidx490 to %struct.rtx_def**, !dbg !6442
  %291 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx491, align 8, !dbg !6442
  store %struct.rtx_def* %291, %struct.rtx_def** %x, align 8, !dbg !6443
  br label %if.end492, !dbg !6444

if.end492:                                        ; preds = %if.end487, %for.end471
  %292 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6445
  %293 = bitcast %struct.rtx_def* %292 to i32*, !dbg !6445
  %bf.load493 = load i32, i32* %293, align 8, !dbg !6445
  %bf.clear494 = and i32 %bf.load493, 65535, !dbg !6445
  %cmp495 = icmp eq i32 %bf.clear494, 13, !dbg !6445
  br i1 %cmp495, label %land.lhs.true497, label %if.then511, !dbg !6445

land.lhs.true497:                                 ; preds = %if.end492
  %294 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6445
  %u498 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %294, i32 0, i32 1, !dbg !6445
  %fld499 = bitcast %union.u* %u498 to [1 x %union.rtunion_def]*, !dbg !6445
  %arrayidx500 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld499, i64 0, i64 5, !dbg !6445
  %rt_int501 = bitcast %union.rtunion_def* %arrayidx500 to i32*, !dbg !6445
  %295 = load i32, i32* %rt_int501, align 8, !dbg !6445
  %cmp502 = icmp eq i32 %295, 10, !dbg !6445
  br i1 %cmp502, label %lor.lhs.false504, label %if.then511, !dbg !6447

lor.lhs.false504:                                 ; preds = %land.lhs.true497
  %296 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6448
  %u505 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %296, i32 0, i32 1, !dbg !6448
  %fld506 = bitcast %union.u* %u505 to [1 x %union.rtunion_def]*, !dbg !6448
  %arrayidx507 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld506, i64 0, i64 4, !dbg !6448
  %rt_bb508 = bitcast %union.rtunion_def* %arrayidx507 to %struct.basic_block_def**, !dbg !6448
  %297 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb508, align 8, !dbg !6448
  %298 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6449
  %cmp509 = icmp ne %struct.basic_block_def* %297, %298, !dbg !6450
  br i1 %cmp509, label %if.then511, label %if.end513, !dbg !6451

if.then511:                                       ; preds = %lor.lhs.false504, %land.lhs.true497, %if.end492
  %299 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6452
  %index512 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %299, i32 0, i32 9, !dbg !6454
  %300 = load i32, i32* %index512, align 8, !dbg !6454
  call void (i8*, ...) @error(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.53, i64 0, i64 0), i32 %300), !dbg !6455
  store i32 1, i32* %err, align 4, !dbg !6456
  br label %if.end513, !dbg !6457

if.end513:                                        ; preds = %if.then511, %lor.lhs.false504
  %301 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6458
  %il514 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %301, i32 0, i32 7, !dbg !6458
  %rtl515 = bitcast %union.basic_block_il_dependent* %il514 to %struct.rtl_bb_info**, !dbg !6458
  %302 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl515, align 8, !dbg !6458
  %end_516 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %302, i32 0, i32 1, !dbg !6458
  %303 = load %struct.rtx_def*, %struct.rtx_def** %end_516, align 8, !dbg !6458
  %304 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6460
  %cmp517 = icmp eq %struct.rtx_def* %303, %304, !dbg !6461
  br i1 %cmp517, label %if.then519, label %if.else520, !dbg !6462

if.then519:                                       ; preds = %if.end513
  br label %if.end564, !dbg !6462

if.else520:                                       ; preds = %if.end513
  %305 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6463
  %u521 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %305, i32 0, i32 1, !dbg !6463
  %fld522 = bitcast %union.u* %u521 to [1 x %union.rtunion_def]*, !dbg !6463
  %arrayidx523 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld522, i64 0, i64 2, !dbg !6463
  %rt_rtx524 = bitcast %union.rtunion_def* %arrayidx523 to %struct.rtx_def**, !dbg !6463
  %306 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx524, align 8, !dbg !6463
  store %struct.rtx_def* %306, %struct.rtx_def** %x, align 8, !dbg !6465
  br label %for.cond525, !dbg !6466

for.cond525:                                      ; preds = %for.inc558, %if.else520
  %307 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6467
  %tobool526 = icmp ne %struct.rtx_def* %307, null, !dbg !6469
  br i1 %tobool526, label %for.body527, label %for.end563, !dbg !6469

for.body527:                                      ; preds = %for.cond525
  %308 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6470
  %309 = bitcast %struct.rtx_def* %308 to i32*, !dbg !6470
  %bf.load528 = load i32, i32* %309, align 8, !dbg !6470
  %bf.clear529 = and i32 %bf.load528, 65535, !dbg !6470
  %cmp530 = icmp eq i32 %bf.clear529, 13, !dbg !6470
  br i1 %cmp530, label %land.lhs.true532, label %if.end545, !dbg !6470

land.lhs.true532:                                 ; preds = %for.body527
  %310 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6470
  %u533 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %310, i32 0, i32 1, !dbg !6470
  %fld534 = bitcast %union.u* %u533 to [1 x %union.rtunion_def]*, !dbg !6470
  %arrayidx535 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld534, i64 0, i64 5, !dbg !6470
  %rt_int536 = bitcast %union.rtunion_def* %arrayidx535 to i32*, !dbg !6470
  %311 = load i32, i32* %rt_int536, align 8, !dbg !6470
  %cmp537 = icmp eq i32 %311, 10, !dbg !6470
  br i1 %cmp537, label %if.then539, label %if.end545, !dbg !6473

if.then539:                                       ; preds = %land.lhs.true532
  %312 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6474
  %u540 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %312, i32 0, i32 1, !dbg !6474
  %fld541 = bitcast %union.u* %u540 to [1 x %union.rtunion_def]*, !dbg !6474
  %arrayidx542 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld541, i64 0, i64 0, !dbg !6474
  %rt_int543 = bitcast %union.rtunion_def* %arrayidx542 to i32*, !dbg !6474
  %313 = load i32, i32* %rt_int543, align 8, !dbg !6474
  %314 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6476
  %index544 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %314, i32 0, i32 9, !dbg !6477
  %315 = load i32, i32* %index544, align 8, !dbg !6477
  call void (i8*, ...) @error(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.54, i64 0, i64 0), i32 %313, i32 %315), !dbg !6478
  store i32 1, i32* %err, align 4, !dbg !6479
  br label %if.end545, !dbg !6480

if.end545:                                        ; preds = %if.then539, %land.lhs.true532, %for.body527
  %316 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6481
  %317 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6483
  %il546 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %317, i32 0, i32 7, !dbg !6483
  %rtl547 = bitcast %union.basic_block_il_dependent* %il546 to %struct.rtl_bb_info**, !dbg !6483
  %318 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl547, align 8, !dbg !6483
  %end_548 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %318, i32 0, i32 1, !dbg !6483
  %319 = load %struct.rtx_def*, %struct.rtx_def** %end_548, align 8, !dbg !6483
  %cmp549 = icmp eq %struct.rtx_def* %316, %319, !dbg !6484
  br i1 %cmp549, label %if.then551, label %if.end552, !dbg !6485

if.then551:                                       ; preds = %if.end545
  br label %for.end563, !dbg !6486

if.end552:                                        ; preds = %if.end545
  %320 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6487
  %call553 = call zeroext i8 @control_flow_insn_p(%struct.rtx_def* %320), !dbg !6489
  %tobool554 = icmp ne i8 %call553, 0, !dbg !6489
  br i1 %tobool554, label %if.then555, label %if.end557, !dbg !6490

if.then555:                                       ; preds = %if.end552
  %321 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6491
  %index556 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %321, i32 0, i32 9, !dbg !6493
  %322 = load i32, i32* %index556, align 8, !dbg !6493
  call void (i8*, ...) @error(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.55, i64 0, i64 0), i32 %322), !dbg !6494
  %323 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6495
  call void @_fatal_insn(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.56, i64 0, i64 0), %struct.rtx_def* %323, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 2013, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6495
  br label %if.end557, !dbg !6496

if.end557:                                        ; preds = %if.then555, %if.end552
  br label %for.inc558, !dbg !6497

for.inc558:                                       ; preds = %if.end557
  %324 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6498
  %u559 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %324, i32 0, i32 1, !dbg !6498
  %fld560 = bitcast %union.u* %u559 to [1 x %union.rtunion_def]*, !dbg !6498
  %arrayidx561 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld560, i64 0, i64 2, !dbg !6498
  %rt_rtx562 = bitcast %union.rtunion_def* %arrayidx561 to %struct.rtx_def**, !dbg !6498
  %325 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx562, align 8, !dbg !6498
  store %struct.rtx_def* %325, %struct.rtx_def** %x, align 8, !dbg !6499
  br label %for.cond525, !dbg !6500, !llvm.loop !6501

for.end563:                                       ; preds = %if.then551, %for.cond525
  br label %if.end564

if.end564:                                        ; preds = %for.end563, %if.then519
  br label %for.inc565, !dbg !6503

for.inc565:                                       ; preds = %if.end564
  %326 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6143
  %prev_bb566 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %326, i32 0, i32 5, !dbg !6143
  %327 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb566, align 8, !dbg !6143
  store %struct.basic_block_def* %327, %struct.basic_block_def** %bb, align 8, !dbg !6143
  br label %for.cond91, !dbg !6143, !llvm.loop !6504

for.end567:                                       ; preds = %for.cond91
  %328 = load i32, i32* %err, align 4, !dbg !6506
  ret i32 %328, !dbg !6507
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @cfg_layout_create_basic_block(i8* %head, i8* %end, %struct.basic_block_def* %after) #0 !dbg !6508 {
entry:
  %head.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %after.addr = alloca %struct.basic_block_def*, align 8
  %newbb = alloca %struct.basic_block_def*, align 8
  store i8* %head, i8** %head.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %head.addr, metadata !6509, metadata !DIExpression()), !dbg !6510
  store i8* %end, i8** %end.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %end.addr, metadata !6511, metadata !DIExpression()), !dbg !6512
  store %struct.basic_block_def* %after, %struct.basic_block_def** %after.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %after.addr, metadata !6513, metadata !DIExpression()), !dbg !6514
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %newbb, metadata !6515, metadata !DIExpression()), !dbg !6516
  %0 = load i8*, i8** %head.addr, align 8, !dbg !6517
  %1 = load i8*, i8** %end.addr, align 8, !dbg !6518
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %after.addr, align 8, !dbg !6519
  %call = call %struct.basic_block_def* @rtl_create_basic_block(i8* %0, i8* %1, %struct.basic_block_def* %2), !dbg !6520
  store %struct.basic_block_def* %call, %struct.basic_block_def** %newbb, align 8, !dbg !6516
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %newbb, align 8, !dbg !6521
  ret %struct.basic_block_def* %3, !dbg !6522
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @cfg_layout_redirect_edge_and_branch(%struct.edge_def* %e, %struct.basic_block_def* %dest) #0 !dbg !6523 {
entry:
  %retval = alloca %struct.edge_def*, align 8
  %e.addr = alloca %struct.edge_def*, align 8
  %dest.addr = alloca %struct.basic_block_def*, align 8
  %src = alloca %struct.basic_block_def*, align 8
  %ret = alloca %struct.edge_def*, align 8
  %redirected = alloca %struct.edge_def*, align 8
  %s = alloca %struct.edge_def*, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !6524, metadata !DIExpression()), !dbg !6525
  store %struct.basic_block_def* %dest, %struct.basic_block_def** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %dest.addr, metadata !6526, metadata !DIExpression()), !dbg !6527
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %src, metadata !6528, metadata !DIExpression()), !dbg !6529
  %0 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !6530
  %src1 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %0, i32 0, i32 0, !dbg !6531
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %src1, align 8, !dbg !6531
  store %struct.basic_block_def* %1, %struct.basic_block_def** %src, align 8, !dbg !6529
  call void @llvm.dbg.declare(metadata %struct.edge_def** %ret, metadata !6532, metadata !DIExpression()), !dbg !6533
  %2 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !6534
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %2, i32 0, i32 7, !dbg !6536
  %3 = load i32, i32* %flags, align 8, !dbg !6536
  %and = and i32 %3, 12, !dbg !6537
  %tobool = icmp ne i32 %and, 0, !dbg !6537
  br i1 %tobool, label %if.then, label %if.end, !dbg !6538

if.then:                                          ; preds = %entry
  store %struct.edge_def* null, %struct.edge_def** %retval, align 8, !dbg !6539
  br label %return, !dbg !6539

if.end:                                           ; preds = %entry
  %4 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !6540
  %dest2 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %4, i32 0, i32 1, !dbg !6542
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %dest2, align 8, !dbg !6542
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %dest.addr, align 8, !dbg !6543
  %cmp = icmp eq %struct.basic_block_def* %5, %6, !dbg !6544
  br i1 %cmp, label %if.then3, label %if.end4, !dbg !6545

if.then3:                                         ; preds = %if.end
  %7 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !6546
  store %struct.edge_def* %7, %struct.edge_def** %retval, align 8, !dbg !6547
  br label %return, !dbg !6547

if.end4:                                          ; preds = %if.end
  %8 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !6548
  %src5 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %8, i32 0, i32 0, !dbg !6550
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %src5, align 8, !dbg !6550
  %10 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6551
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %10, i64 0, !dbg !6551
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !6551
  %11 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !6551
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %11, i32 0, i32 0, !dbg !6551
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !6551
  %cmp6 = icmp ne %struct.basic_block_def* %9, %12, !dbg !6552
  br i1 %cmp6, label %land.lhs.true, label %if.end9, !dbg !6553

land.lhs.true:                                    ; preds = %if.end4
  %13 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !6554
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %dest.addr, align 8, !dbg !6555
  %call = call %struct.edge_def* @try_redirect_by_replacing_jump(%struct.edge_def* %13, %struct.basic_block_def* %14, i8 zeroext 1), !dbg !6556
  store %struct.edge_def* %call, %struct.edge_def** %ret, align 8, !dbg !6557
  %tobool7 = icmp ne %struct.edge_def* %call, null, !dbg !6557
  br i1 %tobool7, label %if.then8, label %if.end9, !dbg !6558

if.then8:                                         ; preds = %land.lhs.true
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !6559
  call void @df_set_bb_dirty(%struct.basic_block_def* %15), !dbg !6561
  %16 = load %struct.edge_def*, %struct.edge_def** %ret, align 8, !dbg !6562
  store %struct.edge_def* %16, %struct.edge_def** %retval, align 8, !dbg !6563
  br label %return, !dbg !6563

if.end9:                                          ; preds = %land.lhs.true, %if.end4
  %17 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !6564
  %src10 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %17, i32 0, i32 0, !dbg !6566
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %src10, align 8, !dbg !6566
  %19 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6567
  %add.ptr11 = getelementptr inbounds %struct.function, %struct.function* %19, i64 0, !dbg !6567
  %cfg12 = getelementptr inbounds %struct.function, %struct.function* %add.ptr11, i32 0, i32 1, !dbg !6567
  %20 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg12, align 8, !dbg !6567
  %x_entry_block_ptr13 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %20, i32 0, i32 0, !dbg !6567
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr13, align 8, !dbg !6567
  %cmp14 = icmp eq %struct.basic_block_def* %18, %21, !dbg !6568
  br i1 %cmp14, label %land.lhs.true15, label %if.end31, !dbg !6569

land.lhs.true15:                                  ; preds = %if.end9
  %22 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !6570
  %flags16 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %22, i32 0, i32 7, !dbg !6571
  %23 = load i32, i32* %flags16, align 8, !dbg !6571
  %and17 = and i32 %23, 1, !dbg !6572
  %tobool18 = icmp ne i32 %and17, 0, !dbg !6572
  br i1 %tobool18, label %land.lhs.true19, label %if.end31, !dbg !6573

land.lhs.true19:                                  ; preds = %land.lhs.true15
  %24 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !6574
  %flags20 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %24, i32 0, i32 7, !dbg !6575
  %25 = load i32, i32* %flags20, align 8, !dbg !6575
  %and21 = and i32 %25, 14, !dbg !6576
  %tobool22 = icmp ne i32 %and21, 0, !dbg !6576
  br i1 %tobool22, label %if.end31, label %if.then23, !dbg !6577

if.then23:                                        ; preds = %land.lhs.true19
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6578
  %tobool24 = icmp ne %struct._IO_FILE* %26, null, !dbg !6578
  br i1 %tobool24, label %if.then25, label %if.end29, !dbg !6581

if.then25:                                        ; preds = %if.then23
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6582
  %28 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !6583
  %src26 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %28, i32 0, i32 0, !dbg !6584
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %src26, align 8, !dbg !6584
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %29, i32 0, i32 9, !dbg !6585
  %30 = load i32, i32* %index, align 8, !dbg !6585
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %dest.addr, align 8, !dbg !6586
  %index27 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %31, i32 0, i32 9, !dbg !6587
  %32 = load i32, i32* %index27, align 8, !dbg !6587
  %call28 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %27, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.57, i64 0, i64 0), i32 %30, i32 %32), !dbg !6588
  br label %if.end29, !dbg !6588

if.end29:                                         ; preds = %if.then25, %if.then23
  %33 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !6589
  %src30 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %33, i32 0, i32 0, !dbg !6590
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %src30, align 8, !dbg !6590
  call void @df_set_bb_dirty(%struct.basic_block_def* %34), !dbg !6591
  %35 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !6592
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %dest.addr, align 8, !dbg !6593
  call void @redirect_edge_succ(%struct.edge_def* %35, %struct.basic_block_def* %36), !dbg !6594
  %37 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !6595
  store %struct.edge_def* %37, %struct.edge_def** %retval, align 8, !dbg !6596
  br label %return, !dbg !6596

if.end31:                                         ; preds = %land.lhs.true19, %land.lhs.true15, %if.end9
  %38 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !6597
  %flags32 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %38, i32 0, i32 7, !dbg !6599
  %39 = load i32, i32* %flags32, align 8, !dbg !6599
  %and33 = and i32 %39, 1, !dbg !6600
  %tobool34 = icmp ne i32 %and33, 0, !dbg !6600
  br i1 %tobool34, label %if.then35, label %if.else, !dbg !6601

if.then35:                                        ; preds = %if.end31
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !6602
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %40, i32 0, i32 7, !dbg !6602
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !6602
  %41 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !6602
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %41, i32 0, i32 1, !dbg !6602
  %42 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !6602
  %43 = bitcast %struct.rtx_def* %42 to i32*, !dbg !6602
  %bf.load = load i32, i32* %43, align 8, !dbg !6602
  %bf.clear = and i32 %bf.load, 65535, !dbg !6602
  %cmp36 = icmp eq i32 %bf.clear, 9, !dbg !6602
  br i1 %cmp36, label %land.lhs.true37, label %if.end62, !dbg !6605

land.lhs.true37:                                  ; preds = %if.then35
  %44 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !6606
  %dest38 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %44, i32 0, i32 1, !dbg !6606
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %dest38, align 8, !dbg !6606
  %il39 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %45, i32 0, i32 7, !dbg !6606
  %rtl40 = bitcast %union.basic_block_il_dependent* %il39 to %struct.rtl_bb_info**, !dbg !6606
  %46 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl40, align 8, !dbg !6606
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %46, i32 0, i32 0, !dbg !6606
  %47 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !6606
  %48 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !6607
  %il41 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %48, i32 0, i32 7, !dbg !6607
  %rtl42 = bitcast %union.basic_block_il_dependent* %il41 to %struct.rtl_bb_info**, !dbg !6607
  %49 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl42, align 8, !dbg !6607
  %end_43 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %49, i32 0, i32 1, !dbg !6607
  %50 = load %struct.rtx_def*, %struct.rtx_def** %end_43, align 8, !dbg !6607
  %call44 = call zeroext i8 @label_is_jump_target_p(%struct.rtx_def* %47, %struct.rtx_def* %50), !dbg !6608
  %conv = zext i8 %call44 to i32, !dbg !6608
  %tobool45 = icmp ne i32 %conv, 0, !dbg !6608
  br i1 %tobool45, label %if.then46, label %if.end62, !dbg !6609

if.then46:                                        ; preds = %land.lhs.true37
  call void @llvm.dbg.declare(metadata %struct.edge_def** %redirected, metadata !6610, metadata !DIExpression()), !dbg !6612
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6613
  %tobool47 = icmp ne %struct._IO_FILE* %51, null, !dbg !6613
  br i1 %tobool47, label %if.then48, label %if.end55, !dbg !6615

if.then48:                                        ; preds = %if.then46
  %52 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6616
  %53 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !6617
  %src49 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %53, i32 0, i32 0, !dbg !6618
  %54 = load %struct.basic_block_def*, %struct.basic_block_def** %src49, align 8, !dbg !6618
  %index50 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %54, i32 0, i32 9, !dbg !6619
  %55 = load i32, i32* %index50, align 8, !dbg !6619
  %56 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !6620
  %dest51 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %56, i32 0, i32 1, !dbg !6621
  %57 = load %struct.basic_block_def*, %struct.basic_block_def** %dest51, align 8, !dbg !6621
  %index52 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %57, i32 0, i32 9, !dbg !6622
  %58 = load i32, i32* %index52, align 8, !dbg !6622
  %59 = load %struct.basic_block_def*, %struct.basic_block_def** %dest.addr, align 8, !dbg !6623
  %index53 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %59, i32 0, i32 9, !dbg !6624
  %60 = load i32, i32* %index53, align 8, !dbg !6624
  %call54 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %52, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.58, i64 0, i64 0), i32 %55, i32 %58, i32 %60), !dbg !6625
  br label %if.end55, !dbg !6625

if.end55:                                         ; preds = %if.then48, %if.then46
  %61 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !6626
  %flags56 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %61, i32 0, i32 7, !dbg !6627
  %62 = load i32, i32* %flags56, align 8, !dbg !6628
  %and57 = and i32 %62, -2, !dbg !6628
  store i32 %and57, i32* %flags56, align 8, !dbg !6628
  %63 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !6629
  %64 = load %struct.basic_block_def*, %struct.basic_block_def** %dest.addr, align 8, !dbg !6630
  %call58 = call %struct.edge_def* @redirect_branch_edge(%struct.edge_def* %63, %struct.basic_block_def* %64), !dbg !6631
  store %struct.edge_def* %call58, %struct.edge_def** %redirected, align 8, !dbg !6632
  %65 = load %struct.edge_def*, %struct.edge_def** %redirected, align 8, !dbg !6633
  %tobool59 = icmp ne %struct.edge_def* %65, null, !dbg !6633
  br i1 %tobool59, label %cond.false, label %cond.true, !dbg !6633

cond.true:                                        ; preds = %if.end55
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 2519, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6633
  br label %cond.end, !dbg !6633

cond.false:                                       ; preds = %if.end55
  br label %cond.end, !dbg !6633

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6633
  %66 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !6634
  %flags60 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %66, i32 0, i32 7, !dbg !6635
  %67 = load i32, i32* %flags60, align 8, !dbg !6636
  %or = or i32 %67, 1, !dbg !6636
  store i32 %or, i32* %flags60, align 8, !dbg !6636
  %68 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !6637
  %src61 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %68, i32 0, i32 0, !dbg !6638
  %69 = load %struct.basic_block_def*, %struct.basic_block_def** %src61, align 8, !dbg !6638
  call void @df_set_bb_dirty(%struct.basic_block_def* %69), !dbg !6639
  %70 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !6640
  store %struct.edge_def* %70, %struct.edge_def** %retval, align 8, !dbg !6641
  br label %return, !dbg !6641

if.end62:                                         ; preds = %land.lhs.true37, %if.then35
  %71 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !6642
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %71, i32 0, i32 1, !dbg !6642
  %72 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !6642
  %tobool63 = icmp ne %struct.VEC_edge_gc* %72, null, !dbg !6642
  br i1 %tobool63, label %cond.true64, label %cond.false66, !dbg !6642

cond.true64:                                      ; preds = %if.end62
  %73 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !6642
  %succs65 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %73, i32 0, i32 1, !dbg !6642
  %74 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs65, align 8, !dbg !6642
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %74, i32 0, i32 0, !dbg !6642
  br label %cond.end67, !dbg !6642

cond.false66:                                     ; preds = %if.end62
  br label %cond.end67, !dbg !6642

cond.end67:                                       ; preds = %cond.false66, %cond.true64
  %cond68 = phi %struct.VEC_edge_base* [ %base, %cond.true64 ], [ null, %cond.false66 ], !dbg !6642
  %call69 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond68), !dbg !6642
  %cmp70 = icmp eq i32 %call69, 2, !dbg !6644
  br i1 %cmp70, label %if.then72, label %if.end114, !dbg !6645

if.then72:                                        ; preds = %cond.end67
  call void @llvm.dbg.declare(metadata %struct.edge_def** %s, metadata !6646, metadata !DIExpression()), !dbg !6648
  %75 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !6649
  %succs73 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %75, i32 0, i32 1, !dbg !6649
  %76 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs73, align 8, !dbg !6649
  %tobool74 = icmp ne %struct.VEC_edge_gc* %76, null, !dbg !6649
  br i1 %tobool74, label %cond.true75, label %cond.false78, !dbg !6649

cond.true75:                                      ; preds = %if.then72
  %77 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !6649
  %succs76 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %77, i32 0, i32 1, !dbg !6649
  %78 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs76, align 8, !dbg !6649
  %base77 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %78, i32 0, i32 0, !dbg !6649
  br label %cond.end79, !dbg !6649

cond.false78:                                     ; preds = %if.then72
  br label %cond.end79, !dbg !6649

cond.end79:                                       ; preds = %cond.false78, %cond.true75
  %cond80 = phi %struct.VEC_edge_base* [ %base77, %cond.true75 ], [ null, %cond.false78 ], !dbg !6649
  %79 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !6649
  %succs81 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %79, i32 0, i32 1, !dbg !6649
  %80 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs81, align 8, !dbg !6649
  %tobool82 = icmp ne %struct.VEC_edge_gc* %80, null, !dbg !6649
  br i1 %tobool82, label %cond.true83, label %cond.false86, !dbg !6649

cond.true83:                                      ; preds = %cond.end79
  %81 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !6649
  %succs84 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %81, i32 0, i32 1, !dbg !6649
  %82 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs84, align 8, !dbg !6649
  %base85 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %82, i32 0, i32 0, !dbg !6649
  br label %cond.end87, !dbg !6649

cond.false86:                                     ; preds = %cond.end79
  br label %cond.end87, !dbg !6649

cond.end87:                                       ; preds = %cond.false86, %cond.true83
  %cond88 = phi %struct.VEC_edge_base* [ %base85, %cond.true83 ], [ null, %cond.false86 ], !dbg !6649
  %call89 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond88, i32 0), !dbg !6649
  %83 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !6649
  %cmp90 = icmp eq %struct.edge_def* %call89, %83, !dbg !6649
  %conv91 = zext i1 %cmp90 to i32, !dbg !6649
  %call92 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond80, i32 %conv91), !dbg !6649
  store %struct.edge_def* %call92, %struct.edge_def** %s, align 8, !dbg !6648
  %84 = load %struct.edge_def*, %struct.edge_def** %s, align 8, !dbg !6650
  %dest93 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %84, i32 0, i32 1, !dbg !6652
  %85 = load %struct.basic_block_def*, %struct.basic_block_def** %dest93, align 8, !dbg !6652
  %86 = load %struct.basic_block_def*, %struct.basic_block_def** %dest.addr, align 8, !dbg !6653
  %cmp94 = icmp eq %struct.basic_block_def* %85, %86, !dbg !6654
  br i1 %cmp94, label %land.lhs.true96, label %if.end113, !dbg !6655

land.lhs.true96:                                  ; preds = %cond.end87
  %87 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !6656
  %il97 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %87, i32 0, i32 7, !dbg !6656
  %rtl98 = bitcast %union.basic_block_il_dependent* %il97 to %struct.rtl_bb_info**, !dbg !6656
  %88 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl98, align 8, !dbg !6656
  %end_99 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %88, i32 0, i32 1, !dbg !6656
  %89 = load %struct.rtx_def*, %struct.rtx_def** %end_99, align 8, !dbg !6656
  %call100 = call i32 @any_condjump_p(%struct.rtx_def* %89), !dbg !6657
  %tobool101 = icmp ne i32 %call100, 0, !dbg !6657
  br i1 %tobool101, label %land.lhs.true102, label %if.end113, !dbg !6658

land.lhs.true102:                                 ; preds = %land.lhs.true96
  %90 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !6659
  %il103 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %90, i32 0, i32 7, !dbg !6659
  %rtl104 = bitcast %union.basic_block_il_dependent* %il103 to %struct.rtl_bb_info**, !dbg !6659
  %91 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl104, align 8, !dbg !6659
  %end_105 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %91, i32 0, i32 1, !dbg !6659
  %92 = load %struct.rtx_def*, %struct.rtx_def** %end_105, align 8, !dbg !6659
  %call106 = call i32 @onlyjump_p(%struct.rtx_def* %92), !dbg !6660
  %tobool107 = icmp ne i32 %call106, 0, !dbg !6660
  br i1 %tobool107, label %if.then108, label %if.end113, !dbg !6661

if.then108:                                       ; preds = %land.lhs.true102
  %93 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !6662
  %il109 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %93, i32 0, i32 7, !dbg !6662
  %rtl110 = bitcast %union.basic_block_il_dependent* %il109 to %struct.rtl_bb_info**, !dbg !6662
  %94 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl110, align 8, !dbg !6662
  %end_111 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %94, i32 0, i32 1, !dbg !6662
  %95 = load %struct.rtx_def*, %struct.rtx_def** %end_111, align 8, !dbg !6662
  %call112 = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %95), !dbg !6663
  br label %if.end113, !dbg !6663

if.end113:                                        ; preds = %if.then108, %land.lhs.true102, %land.lhs.true96, %cond.end87
  br label %if.end114, !dbg !6664

if.end114:                                        ; preds = %if.end113, %cond.end67
  %96 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !6665
  %97 = load %struct.basic_block_def*, %struct.basic_block_def** %dest.addr, align 8, !dbg !6666
  %call115 = call %struct.edge_def* @redirect_edge_succ_nodup(%struct.edge_def* %96, %struct.basic_block_def* %97), !dbg !6667
  store %struct.edge_def* %call115, %struct.edge_def** %ret, align 8, !dbg !6668
  %98 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6669
  %tobool116 = icmp ne %struct._IO_FILE* %98, null, !dbg !6669
  br i1 %tobool116, label %if.then117, label %if.end124, !dbg !6671

if.then117:                                       ; preds = %if.end114
  %99 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6672
  %100 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !6673
  %src118 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %100, i32 0, i32 0, !dbg !6674
  %101 = load %struct.basic_block_def*, %struct.basic_block_def** %src118, align 8, !dbg !6674
  %index119 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %101, i32 0, i32 9, !dbg !6675
  %102 = load i32, i32* %index119, align 8, !dbg !6675
  %103 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !6676
  %dest120 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %103, i32 0, i32 1, !dbg !6677
  %104 = load %struct.basic_block_def*, %struct.basic_block_def** %dest120, align 8, !dbg !6677
  %index121 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %104, i32 0, i32 9, !dbg !6678
  %105 = load i32, i32* %index121, align 8, !dbg !6678
  %106 = load %struct.basic_block_def*, %struct.basic_block_def** %dest.addr, align 8, !dbg !6679
  %index122 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %106, i32 0, i32 9, !dbg !6680
  %107 = load i32, i32* %index122, align 8, !dbg !6680
  %call123 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %99, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.59, i64 0, i64 0), i32 %102, i32 %105, i32 %107), !dbg !6681
  br label %if.end124, !dbg !6681

if.end124:                                        ; preds = %if.then117, %if.end114
  br label %if.end126, !dbg !6682

if.else:                                          ; preds = %if.end31
  %108 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !6683
  %109 = load %struct.basic_block_def*, %struct.basic_block_def** %dest.addr, align 8, !dbg !6684
  %call125 = call %struct.edge_def* @redirect_branch_edge(%struct.edge_def* %108, %struct.basic_block_def* %109), !dbg !6685
  store %struct.edge_def* %call125, %struct.edge_def** %ret, align 8, !dbg !6686
  br label %if.end126

if.end126:                                        ; preds = %if.else, %if.end124
  %110 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !6687
  %il127 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %110, i32 0, i32 7, !dbg !6687
  %rtl128 = bitcast %union.basic_block_il_dependent* %il127 to %struct.rtl_bb_info**, !dbg !6687
  %111 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl128, align 8, !dbg !6687
  %end_129 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %111, i32 0, i32 1, !dbg !6687
  %112 = load %struct.rtx_def*, %struct.rtx_def** %end_129, align 8, !dbg !6687
  %call130 = call i32 @simplejump_p(%struct.rtx_def* %112), !dbg !6687
  %tobool131 = icmp ne i32 %call130, 0, !dbg !6687
  br i1 %tobool131, label %cond.true132, label %cond.false133, !dbg !6687

cond.true132:                                     ; preds = %if.end126
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 2545, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6687
  br label %cond.end134, !dbg !6687

cond.false133:                                    ; preds = %if.end126
  br label %cond.end134, !dbg !6687

cond.end134:                                      ; preds = %cond.false133, %cond.true132
  %cond135 = phi i32 [ 0, %cond.true132 ], [ 0, %cond.false133 ], !dbg !6687
  %113 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !6688
  call void @df_set_bb_dirty(%struct.basic_block_def* %113), !dbg !6689
  %114 = load %struct.edge_def*, %struct.edge_def** %ret, align 8, !dbg !6690
  store %struct.edge_def* %114, %struct.edge_def** %retval, align 8, !dbg !6691
  br label %return, !dbg !6691

return:                                           ; preds = %cond.end134, %cond.end, %if.end29, %if.then8, %if.then3, %if.then
  %115 = load %struct.edge_def*, %struct.edge_def** %retval, align 8, !dbg !6692
  ret %struct.edge_def* %115, !dbg !6692
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @cfg_layout_redirect_edge_and_branch_force(%struct.edge_def* %e, %struct.basic_block_def* %dest) #0 !dbg !6693 {
entry:
  %e.addr = alloca %struct.edge_def*, align 8
  %dest.addr = alloca %struct.basic_block_def*, align 8
  %redirected = alloca %struct.edge_def*, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !6694, metadata !DIExpression()), !dbg !6695
  store %struct.basic_block_def* %dest, %struct.basic_block_def** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %dest.addr, metadata !6696, metadata !DIExpression()), !dbg !6697
  call void @llvm.dbg.declare(metadata %struct.edge_def** %redirected, metadata !6698, metadata !DIExpression()), !dbg !6699
  %0 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !6700
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %dest.addr, align 8, !dbg !6701
  %call = call %struct.edge_def* @cfg_layout_redirect_edge_and_branch(%struct.edge_def* %0, %struct.basic_block_def* %1), !dbg !6702
  store %struct.edge_def* %call, %struct.edge_def** %redirected, align 8, !dbg !6699
  %2 = load %struct.edge_def*, %struct.edge_def** %redirected, align 8, !dbg !6703
  %tobool = icmp ne %struct.edge_def* %2, null, !dbg !6703
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6703

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 2557, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6703
  br label %cond.end, !dbg !6703

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6703

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6703
  ret %struct.basic_block_def* null, !dbg !6704
}

; Function Attrs: noinline nounwind uwtable
define internal void @cfg_layout_delete_block(%struct.basic_block_def* %bb) #0 !dbg !6705 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %next = alloca %struct.rtx_def*, align 8
  %prev = alloca %struct.rtx_def*, align 8
  %to = alloca %struct.rtx_def**, align 8
  %remaints = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6706, metadata !DIExpression()), !dbg !6707
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !6708, metadata !DIExpression()), !dbg !6709
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %next, metadata !6710, metadata !DIExpression()), !dbg !6711
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %prev, metadata !6712, metadata !DIExpression()), !dbg !6713
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6714
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 7, !dbg !6714
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !6714
  %1 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !6714
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %1, i32 0, i32 0, !dbg !6714
  %2 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !6714
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !6714
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6714
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !6714
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6714
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6714
  store %struct.rtx_def* %3, %struct.rtx_def** %prev, align 8, !dbg !6713
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %to, metadata !6715, metadata !DIExpression()), !dbg !6717
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %remaints, metadata !6718, metadata !DIExpression()), !dbg !6719
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6720
  %il1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !6722
  %rtl2 = bitcast %union.basic_block_il_dependent* %il1 to %struct.rtl_bb_info**, !dbg !6723
  %5 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl2, align 8, !dbg !6723
  %header = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %5, i32 0, i32 2, !dbg !6724
  %6 = load %struct.rtx_def*, %struct.rtx_def** %header, align 8, !dbg !6724
  %tobool = icmp ne %struct.rtx_def* %6, null, !dbg !6720
  br i1 %tobool, label %if.then, label %if.end45, !dbg !6725

if.then:                                          ; preds = %entry
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6726
  %il3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 7, !dbg !6726
  %rtl4 = bitcast %union.basic_block_il_dependent* %il3 to %struct.rtl_bb_info**, !dbg !6726
  %8 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl4, align 8, !dbg !6726
  %head_5 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %8, i32 0, i32 0, !dbg !6726
  %9 = load %struct.rtx_def*, %struct.rtx_def** %head_5, align 8, !dbg !6726
  store %struct.rtx_def* %9, %struct.rtx_def** %next, align 8, !dbg !6728
  %10 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !6729
  %tobool6 = icmp ne %struct.rtx_def* %10, null, !dbg !6729
  br i1 %tobool6, label %if.then7, label %if.else, !dbg !6731

if.then7:                                         ; preds = %if.then
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6732
  %il8 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 7, !dbg !6733
  %rtl9 = bitcast %union.basic_block_il_dependent* %il8 to %struct.rtl_bb_info**, !dbg !6734
  %12 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl9, align 8, !dbg !6734
  %header10 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %12, i32 0, i32 2, !dbg !6735
  %13 = load %struct.rtx_def*, %struct.rtx_def** %header10, align 8, !dbg !6735
  %14 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !6736
  %u11 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !6736
  %fld12 = bitcast %union.u* %u11 to [1 x %union.rtunion_def]*, !dbg !6736
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i64 0, i64 2, !dbg !6736
  %rt_rtx14 = bitcast %union.rtunion_def* %arrayidx13 to %struct.rtx_def**, !dbg !6736
  store %struct.rtx_def* %13, %struct.rtx_def** %rt_rtx14, align 8, !dbg !6737
  br label %if.end, !dbg !6736

if.else:                                          ; preds = %if.then
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6738
  %il15 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %15, i32 0, i32 7, !dbg !6739
  %rtl16 = bitcast %union.basic_block_il_dependent* %il15 to %struct.rtl_bb_info**, !dbg !6740
  %16 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl16, align 8, !dbg !6740
  %header17 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %16, i32 0, i32 2, !dbg !6741
  %17 = load %struct.rtx_def*, %struct.rtx_def** %header17, align 8, !dbg !6741
  call void @set_first_insn(%struct.rtx_def* %17), !dbg !6742
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then7
  %18 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !6743
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6744
  %il18 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %19, i32 0, i32 7, !dbg !6744
  %rtl19 = bitcast %union.basic_block_il_dependent* %il18 to %struct.rtl_bb_info**, !dbg !6744
  %20 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl19, align 8, !dbg !6744
  %header20 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %20, i32 0, i32 2, !dbg !6744
  %21 = load %struct.rtx_def*, %struct.rtx_def** %header20, align 8, !dbg !6744
  %u21 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !6744
  %fld22 = bitcast %union.u* %u21 to [1 x %union.rtunion_def]*, !dbg !6744
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld22, i64 0, i64 1, !dbg !6744
  %rt_rtx24 = bitcast %union.rtunion_def* %arrayidx23 to %struct.rtx_def**, !dbg !6744
  store %struct.rtx_def* %18, %struct.rtx_def** %rt_rtx24, align 8, !dbg !6745
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6746
  %il25 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %22, i32 0, i32 7, !dbg !6747
  %rtl26 = bitcast %union.basic_block_il_dependent* %il25 to %struct.rtl_bb_info**, !dbg !6748
  %23 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl26, align 8, !dbg !6748
  %header27 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %23, i32 0, i32 2, !dbg !6749
  %24 = load %struct.rtx_def*, %struct.rtx_def** %header27, align 8, !dbg !6749
  store %struct.rtx_def* %24, %struct.rtx_def** %insn, align 8, !dbg !6750
  br label %while.cond, !dbg !6751

while.cond:                                       ; preds = %while.body, %if.end
  %25 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6752
  %u28 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1, !dbg !6752
  %fld29 = bitcast %union.u* %u28 to [1 x %union.rtunion_def]*, !dbg !6752
  %arrayidx30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld29, i64 0, i64 2, !dbg !6752
  %rt_rtx31 = bitcast %union.rtunion_def* %arrayidx30 to %struct.rtx_def**, !dbg !6752
  %26 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx31, align 8, !dbg !6752
  %tobool32 = icmp ne %struct.rtx_def* %26, null, !dbg !6751
  br i1 %tobool32, label %while.body, label %while.end, !dbg !6751

while.body:                                       ; preds = %while.cond
  %27 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6753
  %u33 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1, !dbg !6753
  %fld34 = bitcast %union.u* %u33 to [1 x %union.rtunion_def]*, !dbg !6753
  %arrayidx35 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld34, i64 0, i64 2, !dbg !6753
  %rt_rtx36 = bitcast %union.rtunion_def* %arrayidx35 to %struct.rtx_def**, !dbg !6753
  %28 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx36, align 8, !dbg !6753
  store %struct.rtx_def* %28, %struct.rtx_def** %insn, align 8, !dbg !6754
  br label %while.cond, !dbg !6751, !llvm.loop !6755

while.end:                                        ; preds = %while.cond
  %29 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !6756
  %30 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6757
  %u37 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1, !dbg !6757
  %fld38 = bitcast %union.u* %u37 to [1 x %union.rtunion_def]*, !dbg !6757
  %arrayidx39 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld38, i64 0, i64 2, !dbg !6757
  %rt_rtx40 = bitcast %union.rtunion_def* %arrayidx39 to %struct.rtx_def**, !dbg !6757
  store %struct.rtx_def* %29, %struct.rtx_def** %rt_rtx40, align 8, !dbg !6758
  %31 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6759
  %32 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !6760
  %u41 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1, !dbg !6760
  %fld42 = bitcast %union.u* %u41 to [1 x %union.rtunion_def]*, !dbg !6760
  %arrayidx43 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld42, i64 0, i64 1, !dbg !6760
  %rt_rtx44 = bitcast %union.rtunion_def* %arrayidx43 to %struct.rtx_def**, !dbg !6760
  store %struct.rtx_def* %31, %struct.rtx_def** %rt_rtx44, align 8, !dbg !6761
  br label %if.end45, !dbg !6762

if.end45:                                         ; preds = %while.end, %entry
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6763
  %il46 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %33, i32 0, i32 7, !dbg !6763
  %rtl47 = bitcast %union.basic_block_il_dependent* %il46 to %struct.rtl_bb_info**, !dbg !6763
  %34 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl47, align 8, !dbg !6763
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %34, i32 0, i32 1, !dbg !6763
  %35 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !6763
  %u48 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1, !dbg !6763
  %fld49 = bitcast %union.u* %u48 to [1 x %union.rtunion_def]*, !dbg !6763
  %arrayidx50 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld49, i64 0, i64 2, !dbg !6763
  %rt_rtx51 = bitcast %union.rtunion_def* %arrayidx50 to %struct.rtx_def**, !dbg !6763
  %36 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx51, align 8, !dbg !6763
  store %struct.rtx_def* %36, %struct.rtx_def** %next, align 8, !dbg !6764
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6765
  %il52 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %37, i32 0, i32 7, !dbg !6767
  %rtl53 = bitcast %union.basic_block_il_dependent* %il52 to %struct.rtl_bb_info**, !dbg !6768
  %38 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl53, align 8, !dbg !6768
  %footer = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %38, i32 0, i32 3, !dbg !6769
  %39 = load %struct.rtx_def*, %struct.rtx_def** %footer, align 8, !dbg !6769
  %tobool54 = icmp ne %struct.rtx_def* %39, null, !dbg !6765
  br i1 %tobool54, label %if.then55, label %if.end167, !dbg !6770

if.then55:                                        ; preds = %if.end45
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6771
  %il56 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %40, i32 0, i32 7, !dbg !6773
  %rtl57 = bitcast %union.basic_block_il_dependent* %il56 to %struct.rtl_bb_info**, !dbg !6774
  %41 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl57, align 8, !dbg !6774
  %footer58 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %41, i32 0, i32 3, !dbg !6775
  %42 = load %struct.rtx_def*, %struct.rtx_def** %footer58, align 8, !dbg !6775
  store %struct.rtx_def* %42, %struct.rtx_def** %insn, align 8, !dbg !6776
  br label %while.cond59, !dbg !6777

while.cond59:                                     ; preds = %if.end114, %if.then55
  %43 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6778
  %tobool60 = icmp ne %struct.rtx_def* %43, null, !dbg !6777
  br i1 %tobool60, label %while.body61, label %while.end119, !dbg !6777

while.body61:                                     ; preds = %while.cond59
  %44 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6779
  %45 = bitcast %struct.rtx_def* %44 to i32*, !dbg !6779
  %bf.load = load i32, i32* %45, align 8, !dbg !6779
  %bf.clear = and i32 %bf.load, 65535, !dbg !6779
  %cmp = icmp eq i32 %bf.clear, 11, !dbg !6779
  br i1 %cmp, label %if.then62, label %if.end109, !dbg !6782

if.then62:                                        ; preds = %while.body61
  %46 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6783
  %u63 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %46, i32 0, i32 1, !dbg !6783
  %fld64 = bitcast %union.u* %u63 to [1 x %union.rtunion_def]*, !dbg !6783
  %arrayidx65 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld64, i64 0, i64 1, !dbg !6783
  %rt_rtx66 = bitcast %union.rtunion_def* %arrayidx65 to %struct.rtx_def**, !dbg !6783
  %47 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx66, align 8, !dbg !6783
  %tobool67 = icmp ne %struct.rtx_def* %47, null, !dbg !6783
  br i1 %tobool67, label %if.then68, label %if.else81, !dbg !6786

if.then68:                                        ; preds = %if.then62
  %48 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6787
  %u69 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %48, i32 0, i32 1, !dbg !6787
  %fld70 = bitcast %union.u* %u69 to [1 x %union.rtunion_def]*, !dbg !6787
  %arrayidx71 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld70, i64 0, i64 2, !dbg !6787
  %rt_rtx72 = bitcast %union.rtunion_def* %arrayidx71 to %struct.rtx_def**, !dbg !6787
  %49 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx72, align 8, !dbg !6787
  %50 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6788
  %u73 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %50, i32 0, i32 1, !dbg !6788
  %fld74 = bitcast %union.u* %u73 to [1 x %union.rtunion_def]*, !dbg !6788
  %arrayidx75 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld74, i64 0, i64 1, !dbg !6788
  %rt_rtx76 = bitcast %union.rtunion_def* %arrayidx75 to %struct.rtx_def**, !dbg !6788
  %51 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx76, align 8, !dbg !6788
  %u77 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %51, i32 0, i32 1, !dbg !6788
  %fld78 = bitcast %union.u* %u77 to [1 x %union.rtunion_def]*, !dbg !6788
  %arrayidx79 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld78, i64 0, i64 2, !dbg !6788
  %rt_rtx80 = bitcast %union.rtunion_def* %arrayidx79 to %struct.rtx_def**, !dbg !6788
  store %struct.rtx_def* %49, %struct.rtx_def** %rt_rtx80, align 8, !dbg !6789
  br label %if.end89, !dbg !6788

if.else81:                                        ; preds = %if.then62
  %52 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6790
  %u82 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %52, i32 0, i32 1, !dbg !6790
  %fld83 = bitcast %union.u* %u82 to [1 x %union.rtunion_def]*, !dbg !6790
  %arrayidx84 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld83, i64 0, i64 2, !dbg !6790
  %rt_rtx85 = bitcast %union.rtunion_def* %arrayidx84 to %struct.rtx_def**, !dbg !6790
  %53 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx85, align 8, !dbg !6790
  %54 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6791
  %il86 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %54, i32 0, i32 7, !dbg !6792
  %rtl87 = bitcast %union.basic_block_il_dependent* %il86 to %struct.rtl_bb_info**, !dbg !6793
  %55 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl87, align 8, !dbg !6793
  %footer88 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %55, i32 0, i32 3, !dbg !6794
  store %struct.rtx_def* %53, %struct.rtx_def** %footer88, align 8, !dbg !6795
  br label %if.end89

if.end89:                                         ; preds = %if.else81, %if.then68
  %56 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6796
  %u90 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %56, i32 0, i32 1, !dbg !6796
  %fld91 = bitcast %union.u* %u90 to [1 x %union.rtunion_def]*, !dbg !6796
  %arrayidx92 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld91, i64 0, i64 2, !dbg !6796
  %rt_rtx93 = bitcast %union.rtunion_def* %arrayidx92 to %struct.rtx_def**, !dbg !6796
  %57 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx93, align 8, !dbg !6796
  %tobool94 = icmp ne %struct.rtx_def* %57, null, !dbg !6796
  br i1 %tobool94, label %if.then95, label %if.end108, !dbg !6798

if.then95:                                        ; preds = %if.end89
  %58 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6799
  %u96 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %58, i32 0, i32 1, !dbg !6799
  %fld97 = bitcast %union.u* %u96 to [1 x %union.rtunion_def]*, !dbg !6799
  %arrayidx98 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld97, i64 0, i64 1, !dbg !6799
  %rt_rtx99 = bitcast %union.rtunion_def* %arrayidx98 to %struct.rtx_def**, !dbg !6799
  %59 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx99, align 8, !dbg !6799
  %60 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6800
  %u100 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %60, i32 0, i32 1, !dbg !6800
  %fld101 = bitcast %union.u* %u100 to [1 x %union.rtunion_def]*, !dbg !6800
  %arrayidx102 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld101, i64 0, i64 2, !dbg !6800
  %rt_rtx103 = bitcast %union.rtunion_def* %arrayidx102 to %struct.rtx_def**, !dbg !6800
  %61 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx103, align 8, !dbg !6800
  %u104 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %61, i32 0, i32 1, !dbg !6800
  %fld105 = bitcast %union.u* %u104 to [1 x %union.rtunion_def]*, !dbg !6800
  %arrayidx106 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld105, i64 0, i64 1, !dbg !6800
  %rt_rtx107 = bitcast %union.rtunion_def* %arrayidx106 to %struct.rtx_def**, !dbg !6800
  store %struct.rtx_def* %59, %struct.rtx_def** %rt_rtx107, align 8, !dbg !6801
  br label %if.end108, !dbg !6800

if.end108:                                        ; preds = %if.then95, %if.end89
  br label %if.end109, !dbg !6802

if.end109:                                        ; preds = %if.end108, %while.body61
  %62 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6803
  %63 = bitcast %struct.rtx_def* %62 to i32*, !dbg !6803
  %bf.load110 = load i32, i32* %63, align 8, !dbg !6803
  %bf.clear111 = and i32 %bf.load110, 65535, !dbg !6803
  %cmp112 = icmp eq i32 %bf.clear111, 12, !dbg !6803
  br i1 %cmp112, label %if.then113, label %if.end114, !dbg !6805

if.then113:                                       ; preds = %if.end109
  br label %while.end119, !dbg !6806

if.end114:                                        ; preds = %if.end109
  %64 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6807
  %u115 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %64, i32 0, i32 1, !dbg !6807
  %fld116 = bitcast %union.u* %u115 to [1 x %union.rtunion_def]*, !dbg !6807
  %arrayidx117 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld116, i64 0, i64 2, !dbg !6807
  %rt_rtx118 = bitcast %union.rtunion_def* %arrayidx117 to %struct.rtx_def**, !dbg !6807
  %65 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx118, align 8, !dbg !6807
  store %struct.rtx_def* %65, %struct.rtx_def** %insn, align 8, !dbg !6808
  br label %while.cond59, !dbg !6777, !llvm.loop !6809

while.end119:                                     ; preds = %if.then113, %while.cond59
  %66 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6811
  %il120 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %66, i32 0, i32 7, !dbg !6813
  %rtl121 = bitcast %union.basic_block_il_dependent* %il120 to %struct.rtl_bb_info**, !dbg !6814
  %67 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl121, align 8, !dbg !6814
  %footer122 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %67, i32 0, i32 3, !dbg !6815
  %68 = load %struct.rtx_def*, %struct.rtx_def** %footer122, align 8, !dbg !6815
  %tobool123 = icmp ne %struct.rtx_def* %68, null, !dbg !6811
  br i1 %tobool123, label %if.then124, label %if.end166, !dbg !6816

if.then124:                                       ; preds = %while.end119
  %69 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6817
  %il125 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %69, i32 0, i32 7, !dbg !6817
  %rtl126 = bitcast %union.basic_block_il_dependent* %il125 to %struct.rtl_bb_info**, !dbg !6817
  %70 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl126, align 8, !dbg !6817
  %end_127 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %70, i32 0, i32 1, !dbg !6817
  %71 = load %struct.rtx_def*, %struct.rtx_def** %end_127, align 8, !dbg !6817
  store %struct.rtx_def* %71, %struct.rtx_def** %insn, align 8, !dbg !6819
  %72 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6820
  %il128 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %72, i32 0, i32 7, !dbg !6821
  %rtl129 = bitcast %union.basic_block_il_dependent* %il128 to %struct.rtl_bb_info**, !dbg !6822
  %73 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl129, align 8, !dbg !6822
  %footer130 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %73, i32 0, i32 3, !dbg !6823
  %74 = load %struct.rtx_def*, %struct.rtx_def** %footer130, align 8, !dbg !6823
  %75 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6824
  %u131 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %75, i32 0, i32 1, !dbg !6824
  %fld132 = bitcast %union.u* %u131 to [1 x %union.rtunion_def]*, !dbg !6824
  %arrayidx133 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld132, i64 0, i64 2, !dbg !6824
  %rt_rtx134 = bitcast %union.rtunion_def* %arrayidx133 to %struct.rtx_def**, !dbg !6824
  store %struct.rtx_def* %74, %struct.rtx_def** %rt_rtx134, align 8, !dbg !6825
  %76 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6826
  %77 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6827
  %il135 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %77, i32 0, i32 7, !dbg !6827
  %rtl136 = bitcast %union.basic_block_il_dependent* %il135 to %struct.rtl_bb_info**, !dbg !6827
  %78 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl136, align 8, !dbg !6827
  %footer137 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %78, i32 0, i32 3, !dbg !6827
  %79 = load %struct.rtx_def*, %struct.rtx_def** %footer137, align 8, !dbg !6827
  %u138 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %79, i32 0, i32 1, !dbg !6827
  %fld139 = bitcast %union.u* %u138 to [1 x %union.rtunion_def]*, !dbg !6827
  %arrayidx140 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld139, i64 0, i64 1, !dbg !6827
  %rt_rtx141 = bitcast %union.rtunion_def* %arrayidx140 to %struct.rtx_def**, !dbg !6827
  store %struct.rtx_def* %76, %struct.rtx_def** %rt_rtx141, align 8, !dbg !6828
  br label %while.cond142, !dbg !6829

while.cond142:                                    ; preds = %while.body148, %if.then124
  %80 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6830
  %u143 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %80, i32 0, i32 1, !dbg !6830
  %fld144 = bitcast %union.u* %u143 to [1 x %union.rtunion_def]*, !dbg !6830
  %arrayidx145 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld144, i64 0, i64 2, !dbg !6830
  %rt_rtx146 = bitcast %union.rtunion_def* %arrayidx145 to %struct.rtx_def**, !dbg !6830
  %81 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx146, align 8, !dbg !6830
  %tobool147 = icmp ne %struct.rtx_def* %81, null, !dbg !6829
  br i1 %tobool147, label %while.body148, label %while.end153, !dbg !6829

while.body148:                                    ; preds = %while.cond142
  %82 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6831
  %u149 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %82, i32 0, i32 1, !dbg !6831
  %fld150 = bitcast %union.u* %u149 to [1 x %union.rtunion_def]*, !dbg !6831
  %arrayidx151 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld150, i64 0, i64 2, !dbg !6831
  %rt_rtx152 = bitcast %union.rtunion_def* %arrayidx151 to %struct.rtx_def**, !dbg !6831
  %83 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx152, align 8, !dbg !6831
  store %struct.rtx_def* %83, %struct.rtx_def** %insn, align 8, !dbg !6832
  br label %while.cond142, !dbg !6829, !llvm.loop !6833

while.end153:                                     ; preds = %while.cond142
  %84 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !6834
  %85 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6835
  %u154 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %85, i32 0, i32 1, !dbg !6835
  %fld155 = bitcast %union.u* %u154 to [1 x %union.rtunion_def]*, !dbg !6835
  %arrayidx156 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld155, i64 0, i64 2, !dbg !6835
  %rt_rtx157 = bitcast %union.rtunion_def* %arrayidx156 to %struct.rtx_def**, !dbg !6835
  store %struct.rtx_def* %84, %struct.rtx_def** %rt_rtx157, align 8, !dbg !6836
  %86 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !6837
  %tobool158 = icmp ne %struct.rtx_def* %86, null, !dbg !6837
  br i1 %tobool158, label %if.then159, label %if.else164, !dbg !6839

if.then159:                                       ; preds = %while.end153
  %87 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6840
  %88 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !6841
  %u160 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %88, i32 0, i32 1, !dbg !6841
  %fld161 = bitcast %union.u* %u160 to [1 x %union.rtunion_def]*, !dbg !6841
  %arrayidx162 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld161, i64 0, i64 1, !dbg !6841
  %rt_rtx163 = bitcast %union.rtunion_def* %arrayidx162 to %struct.rtx_def**, !dbg !6841
  store %struct.rtx_def* %87, %struct.rtx_def** %rt_rtx163, align 8, !dbg !6842
  br label %if.end165, !dbg !6841

if.else164:                                       ; preds = %while.end153
  %89 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6843
  call void @set_last_insn(%struct.rtx_def* %89), !dbg !6844
  br label %if.end165

if.end165:                                        ; preds = %if.else164, %if.then159
  br label %if.end166, !dbg !6845

if.end166:                                        ; preds = %if.end165, %while.end119
  br label %if.end167, !dbg !6846

if.end167:                                        ; preds = %if.end166, %if.end45
  %90 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6847
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %90, i32 0, i32 6, !dbg !6849
  %91 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !6849
  %92 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6850
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %92, i64 0, !dbg !6850
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !6850
  %93 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !6850
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %93, i32 0, i32 1, !dbg !6850
  %94 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !6850
  %cmp168 = icmp ne %struct.basic_block_def* %91, %94, !dbg !6851
  br i1 %cmp168, label %if.then169, label %if.else174, !dbg !6852

if.then169:                                       ; preds = %if.end167
  %95 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6853
  %next_bb170 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %95, i32 0, i32 6, !dbg !6854
  %96 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb170, align 8, !dbg !6854
  %il171 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %96, i32 0, i32 7, !dbg !6855
  %rtl172 = bitcast %union.basic_block_il_dependent* %il171 to %struct.rtl_bb_info**, !dbg !6856
  %97 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl172, align 8, !dbg !6856
  %header173 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %97, i32 0, i32 2, !dbg !6857
  store %struct.rtx_def** %header173, %struct.rtx_def*** %to, align 8, !dbg !6858
  br label %if.end175, !dbg !6859

if.else174:                                       ; preds = %if.end167
  store %struct.rtx_def** @cfg_layout_function_footer, %struct.rtx_def*** %to, align 8, !dbg !6860
  br label %if.end175

if.end175:                                        ; preds = %if.else174, %if.then169
  %98 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6861
  call void @rtl_delete_block(%struct.basic_block_def* %98), !dbg !6862
  %99 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !6863
  %tobool176 = icmp ne %struct.rtx_def* %99, null, !dbg !6863
  br i1 %tobool176, label %if.then177, label %if.else182, !dbg !6865

if.then177:                                       ; preds = %if.end175
  %100 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !6866
  %u178 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %100, i32 0, i32 1, !dbg !6866
  %fld179 = bitcast %union.u* %u178 to [1 x %union.rtunion_def]*, !dbg !6866
  %arrayidx180 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld179, i64 0, i64 2, !dbg !6866
  %rt_rtx181 = bitcast %union.rtunion_def* %arrayidx180 to %struct.rtx_def**, !dbg !6866
  %101 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx181, align 8, !dbg !6866
  store %struct.rtx_def* %101, %struct.rtx_def** %prev, align 8, !dbg !6867
  br label %if.end183, !dbg !6868

if.else182:                                       ; preds = %if.end175
  %call = call %struct.rtx_def* @get_insns(), !dbg !6869
  store %struct.rtx_def* %call, %struct.rtx_def** %prev, align 8, !dbg !6870
  br label %if.end183

if.end183:                                        ; preds = %if.else182, %if.then177
  %102 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !6871
  %tobool184 = icmp ne %struct.rtx_def* %102, null, !dbg !6871
  br i1 %tobool184, label %if.then185, label %if.else190, !dbg !6873

if.then185:                                       ; preds = %if.end183
  %103 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !6874
  %u186 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %103, i32 0, i32 1, !dbg !6874
  %fld187 = bitcast %union.u* %u186 to [1 x %union.rtunion_def]*, !dbg !6874
  %arrayidx188 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld187, i64 0, i64 1, !dbg !6874
  %rt_rtx189 = bitcast %union.rtunion_def* %arrayidx188 to %struct.rtx_def**, !dbg !6874
  %104 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx189, align 8, !dbg !6874
  store %struct.rtx_def* %104, %struct.rtx_def** %next, align 8, !dbg !6875
  br label %if.end192, !dbg !6876

if.else190:                                       ; preds = %if.end183
  %call191 = call %struct.rtx_def* @get_last_insn(), !dbg !6877
  store %struct.rtx_def* %call191, %struct.rtx_def** %next, align 8, !dbg !6878
  br label %if.end192

if.end192:                                        ; preds = %if.else190, %if.then185
  %105 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !6879
  %tobool193 = icmp ne %struct.rtx_def* %105, null, !dbg !6879
  br i1 %tobool193, label %land.lhs.true, label %if.end224, !dbg !6881

land.lhs.true:                                    ; preds = %if.end192
  %106 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !6882
  %u194 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %106, i32 0, i32 1, !dbg !6882
  %fld195 = bitcast %union.u* %u194 to [1 x %union.rtunion_def]*, !dbg !6882
  %arrayidx196 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld195, i64 0, i64 2, !dbg !6882
  %rt_rtx197 = bitcast %union.rtunion_def* %arrayidx196 to %struct.rtx_def**, !dbg !6882
  %107 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx197, align 8, !dbg !6882
  %108 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !6883
  %cmp198 = icmp ne %struct.rtx_def* %107, %108, !dbg !6884
  br i1 %cmp198, label %if.then199, label %if.end224, !dbg !6885

if.then199:                                       ; preds = %land.lhs.true
  %109 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !6886
  %110 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !6888
  %call200 = call %struct.rtx_def* @unlink_insn_chain(%struct.rtx_def* %109, %struct.rtx_def* %110), !dbg !6889
  store %struct.rtx_def* %call200, %struct.rtx_def** %remaints, align 8, !dbg !6890
  %111 = load %struct.rtx_def*, %struct.rtx_def** %remaints, align 8, !dbg !6891
  store %struct.rtx_def* %111, %struct.rtx_def** %insn, align 8, !dbg !6892
  br label %while.cond201, !dbg !6893

while.cond201:                                    ; preds = %while.body207, %if.then199
  %112 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6894
  %u202 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %112, i32 0, i32 1, !dbg !6894
  %fld203 = bitcast %union.u* %u202 to [1 x %union.rtunion_def]*, !dbg !6894
  %arrayidx204 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld203, i64 0, i64 2, !dbg !6894
  %rt_rtx205 = bitcast %union.rtunion_def* %arrayidx204 to %struct.rtx_def**, !dbg !6894
  %113 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx205, align 8, !dbg !6894
  %tobool206 = icmp ne %struct.rtx_def* %113, null, !dbg !6893
  br i1 %tobool206, label %while.body207, label %while.end212, !dbg !6893

while.body207:                                    ; preds = %while.cond201
  %114 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6895
  %u208 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %114, i32 0, i32 1, !dbg !6895
  %fld209 = bitcast %union.u* %u208 to [1 x %union.rtunion_def]*, !dbg !6895
  %arrayidx210 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld209, i64 0, i64 2, !dbg !6895
  %rt_rtx211 = bitcast %union.rtunion_def* %arrayidx210 to %struct.rtx_def**, !dbg !6895
  %115 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx211, align 8, !dbg !6895
  store %struct.rtx_def* %115, %struct.rtx_def** %insn, align 8, !dbg !6896
  br label %while.cond201, !dbg !6893, !llvm.loop !6897

while.end212:                                     ; preds = %while.cond201
  %116 = load %struct.rtx_def**, %struct.rtx_def*** %to, align 8, !dbg !6898
  %117 = load %struct.rtx_def*, %struct.rtx_def** %116, align 8, !dbg !6899
  %118 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6900
  %u213 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %118, i32 0, i32 1, !dbg !6900
  %fld214 = bitcast %union.u* %u213 to [1 x %union.rtunion_def]*, !dbg !6900
  %arrayidx215 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld214, i64 0, i64 2, !dbg !6900
  %rt_rtx216 = bitcast %union.rtunion_def* %arrayidx215 to %struct.rtx_def**, !dbg !6900
  store %struct.rtx_def* %117, %struct.rtx_def** %rt_rtx216, align 8, !dbg !6901
  %119 = load %struct.rtx_def**, %struct.rtx_def*** %to, align 8, !dbg !6902
  %120 = load %struct.rtx_def*, %struct.rtx_def** %119, align 8, !dbg !6904
  %tobool217 = icmp ne %struct.rtx_def* %120, null, !dbg !6904
  br i1 %tobool217, label %if.then218, label %if.end223, !dbg !6905

if.then218:                                       ; preds = %while.end212
  %121 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6906
  %122 = load %struct.rtx_def**, %struct.rtx_def*** %to, align 8, !dbg !6907
  %123 = load %struct.rtx_def*, %struct.rtx_def** %122, align 8, !dbg !6907
  %u219 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %123, i32 0, i32 1, !dbg !6907
  %fld220 = bitcast %union.u* %u219 to [1 x %union.rtunion_def]*, !dbg !6907
  %arrayidx221 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld220, i64 0, i64 1, !dbg !6907
  %rt_rtx222 = bitcast %union.rtunion_def* %arrayidx221 to %struct.rtx_def**, !dbg !6907
  store %struct.rtx_def* %121, %struct.rtx_def** %rt_rtx222, align 8, !dbg !6908
  br label %if.end223, !dbg !6907

if.end223:                                        ; preds = %if.then218, %while.end212
  %124 = load %struct.rtx_def*, %struct.rtx_def** %remaints, align 8, !dbg !6909
  %125 = load %struct.rtx_def**, %struct.rtx_def*** %to, align 8, !dbg !6910
  store %struct.rtx_def* %124, %struct.rtx_def** %125, align 8, !dbg !6911
  br label %if.end224, !dbg !6912

if.end224:                                        ; preds = %if.end223, %land.lhs.true, %if.end192
  ret void, !dbg !6913
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @cfg_layout_split_block(%struct.basic_block_def* %bb, i8* %insnp) #0 !dbg !6914 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %insnp.addr = alloca i8*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %new_bb = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6915, metadata !DIExpression()), !dbg !6916
  store i8* %insnp, i8** %insnp.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %insnp.addr, metadata !6917, metadata !DIExpression()), !dbg !6918
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !6919, metadata !DIExpression()), !dbg !6920
  %0 = load i8*, i8** %insnp.addr, align 8, !dbg !6921
  %1 = bitcast i8* %0 to %struct.rtx_def*, !dbg !6922
  store %struct.rtx_def* %1, %struct.rtx_def** %insn, align 8, !dbg !6920
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %new_bb, metadata !6923, metadata !DIExpression()), !dbg !6924
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6925
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6926
  %4 = bitcast %struct.rtx_def* %3 to i8*, !dbg !6926
  %call = call %struct.basic_block_def* @rtl_split_block(%struct.basic_block_def* %2, i8* %4), !dbg !6927
  store %struct.basic_block_def* %call, %struct.basic_block_def** %new_bb, align 8, !dbg !6924
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6928
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %5, i32 0, i32 7, !dbg !6929
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !6930
  %6 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !6930
  %footer = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %6, i32 0, i32 3, !dbg !6931
  %7 = load %struct.rtx_def*, %struct.rtx_def** %footer, align 8, !dbg !6931
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !6932
  %il1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 7, !dbg !6933
  %rtl2 = bitcast %union.basic_block_il_dependent* %il1 to %struct.rtl_bb_info**, !dbg !6934
  %9 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl2, align 8, !dbg !6934
  %footer3 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %9, i32 0, i32 3, !dbg !6935
  store %struct.rtx_def* %7, %struct.rtx_def** %footer3, align 8, !dbg !6936
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6937
  %il4 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 7, !dbg !6938
  %rtl5 = bitcast %union.basic_block_il_dependent* %il4 to %struct.rtl_bb_info**, !dbg !6939
  %11 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl5, align 8, !dbg !6939
  %footer6 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %11, i32 0, i32 3, !dbg !6940
  store %struct.rtx_def* null, %struct.rtx_def** %footer6, align 8, !dbg !6941
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !6942
  ret %struct.basic_block_def* %12, !dbg !6943
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @cfg_layout_can_merge_blocks_p(%struct.basic_block_def* %a, %struct.basic_block_def* %b) #0 !dbg !6944 {
entry:
  %retval = alloca i8, align 1
  %a.addr = alloca %struct.basic_block_def*, align 8
  %b.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %a, %struct.basic_block_def** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %a.addr, metadata !6945, metadata !DIExpression()), !dbg !6946
  store %struct.basic_block_def* %b, %struct.basic_block_def** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %b.addr, metadata !6947, metadata !DIExpression()), !dbg !6948
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !6949
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !6949
  %1 = load i32, i32* %flags, align 8, !dbg !6949
  %and = and i32 %1, 96, !dbg !6949
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !6951
  %flags1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 13, !dbg !6951
  %3 = load i32, i32* %flags1, align 8, !dbg !6951
  %and2 = and i32 %3, 96, !dbg !6951
  %cmp = icmp ne i32 %and, %and2, !dbg !6952
  br i1 %cmp, label %if.then, label %if.end, !dbg !6953

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !6954
  br label %return, !dbg !6954

if.end:                                           ; preds = %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !6955
  %call = call zeroext i8 @single_succ_p(%struct.basic_block_def* %4), !dbg !6956
  %conv = zext i8 %call to i32, !dbg !6956
  %tobool = icmp ne i32 %conv, 0, !dbg !6956
  br i1 %tobool, label %land.lhs.true, label %land.end, !dbg !6957

land.lhs.true:                                    ; preds = %if.end
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !6958
  %call3 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %5), !dbg !6959
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !6960
  %cmp4 = icmp eq %struct.basic_block_def* %call3, %6, !dbg !6961
  br i1 %cmp4, label %land.lhs.true6, label %land.end, !dbg !6962

land.lhs.true6:                                   ; preds = %land.lhs.true
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !6963
  %call7 = call zeroext i8 @single_pred_p(%struct.basic_block_def* %7), !dbg !6964
  %conv8 = zext i8 %call7 to i32, !dbg !6964
  %cmp9 = icmp eq i32 %conv8, 1, !dbg !6965
  br i1 %cmp9, label %land.lhs.true11, label %land.end, !dbg !6966

land.lhs.true11:                                  ; preds = %land.lhs.true6
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !6967
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !6968
  %cmp12 = icmp ne %struct.basic_block_def* %8, %9, !dbg !6969
  br i1 %cmp12, label %land.lhs.true14, label %land.end, !dbg !6970

land.lhs.true14:                                  ; preds = %land.lhs.true11
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !6971
  %call15 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %10), !dbg !6972
  %flags16 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call15, i32 0, i32 7, !dbg !6973
  %11 = load i32, i32* %flags16, align 8, !dbg !6973
  %and17 = and i32 %11, 14, !dbg !6974
  %tobool18 = icmp ne i32 %and17, 0, !dbg !6974
  br i1 %tobool18, label %land.end, label %land.lhs.true19, !dbg !6975

land.lhs.true19:                                  ; preds = %land.lhs.true14
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !6976
  %13 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6977
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %13, i64 0, !dbg !6977
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !6977
  %14 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !6977
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %14, i32 0, i32 0, !dbg !6977
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !6977
  %cmp20 = icmp ne %struct.basic_block_def* %12, %15, !dbg !6978
  br i1 %cmp20, label %land.lhs.true22, label %land.end, !dbg !6979

land.lhs.true22:                                  ; preds = %land.lhs.true19
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !6980
  %17 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6981
  %add.ptr23 = getelementptr inbounds %struct.function, %struct.function* %17, i64 0, !dbg !6981
  %cfg24 = getelementptr inbounds %struct.function, %struct.function* %add.ptr23, i32 0, i32 1, !dbg !6981
  %18 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg24, align 8, !dbg !6981
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %18, i32 0, i32 1, !dbg !6981
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !6981
  %cmp25 = icmp ne %struct.basic_block_def* %16, %19, !dbg !6982
  br i1 %cmp25, label %land.rhs, label %land.end, !dbg !6983

land.rhs:                                         ; preds = %land.lhs.true22
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !6984
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %20, i32 0, i32 7, !dbg !6984
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !6984
  %21 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !6984
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %21, i32 0, i32 1, !dbg !6984
  %22 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !6984
  %23 = bitcast %struct.rtx_def* %22 to i32*, !dbg !6984
  %bf.load = load i32, i32* %23, align 8, !dbg !6984
  %bf.clear = and i32 %bf.load, 65535, !dbg !6984
  %cmp27 = icmp eq i32 %bf.clear, 9, !dbg !6984
  br i1 %cmp27, label %lor.rhs, label %lor.end, !dbg !6985

lor.rhs:                                          ; preds = %land.rhs
  %24 = load i32, i32* @optimize, align 4, !dbg !6986
  %tobool29 = icmp ne i32 %24, 0, !dbg !6986
  br i1 %tobool29, label %lor.lhs.false, label %cond.true, !dbg !6987

lor.lhs.false:                                    ; preds = %lor.rhs
  %25 = load i32, i32* @reload_completed, align 4, !dbg !6988
  %tobool30 = icmp ne i32 %25, 0, !dbg !6988
  br i1 %tobool30, label %cond.true, label %cond.false, !dbg !6989

cond.true:                                        ; preds = %lor.lhs.false, %lor.rhs
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !6990
  %il31 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %26, i32 0, i32 7, !dbg !6990
  %rtl32 = bitcast %union.basic_block_il_dependent* %il31 to %struct.rtl_bb_info**, !dbg !6990
  %27 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl32, align 8, !dbg !6990
  %end_33 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %27, i32 0, i32 1, !dbg !6990
  %28 = load %struct.rtx_def*, %struct.rtx_def** %end_33, align 8, !dbg !6990
  %call34 = call i32 @simplejump_p(%struct.rtx_def* %28), !dbg !6991
  br label %cond.end, !dbg !6989

cond.false:                                       ; preds = %lor.lhs.false
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !6992
  %il35 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %29, i32 0, i32 7, !dbg !6992
  %rtl36 = bitcast %union.basic_block_il_dependent* %il35 to %struct.rtl_bb_info**, !dbg !6992
  %30 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl36, align 8, !dbg !6992
  %end_37 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %30, i32 0, i32 1, !dbg !6992
  %31 = load %struct.rtx_def*, %struct.rtx_def** %end_37, align 8, !dbg !6992
  %call38 = call i32 @onlyjump_p(%struct.rtx_def* %31), !dbg !6993
  br label %cond.end, !dbg !6989

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call34, %cond.true ], [ %call38, %cond.false ], !dbg !6989
  %tobool39 = icmp ne i32 %cond, 0, !dbg !6985
  br label %lor.end, !dbg !6985

lor.end:                                          ; preds = %cond.end, %land.rhs
  %32 = phi i1 [ true, %land.rhs ], [ %tobool39, %cond.end ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %land.lhs.true22, %land.lhs.true19, %land.lhs.true14, %land.lhs.true11, %land.lhs.true6, %land.lhs.true, %if.end
  %33 = phi i1 [ false, %land.lhs.true22 ], [ false, %land.lhs.true19 ], [ false, %land.lhs.true14 ], [ false, %land.lhs.true11 ], [ false, %land.lhs.true6 ], [ false, %land.lhs.true ], [ false, %if.end ], [ %32, %lor.end ], !dbg !6994
  %land.ext = zext i1 %33 to i32, !dbg !6983
  %conv40 = trunc i32 %land.ext to i8, !dbg !6995
  store i8 %conv40, i8* %retval, align 1, !dbg !6996
  br label %return, !dbg !6996

return:                                           ; preds = %land.end, %if.then
  %34 = load i8, i8* %retval, align 1, !dbg !6997
  ret i8 %34, !dbg !6997
}

; Function Attrs: noinline nounwind uwtable
define internal void @cfg_layout_merge_blocks(%struct.basic_block_def* %a, %struct.basic_block_def* %b) #0 !dbg !6998 {
entry:
  %a.addr = alloca %struct.basic_block_def*, align 8
  %b.addr = alloca %struct.basic_block_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %end = alloca %struct.rtx_def*, align 8
  %goto_locus47 = alloca i32, align 4
  %first = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  %first205 = alloca %struct.rtx_def*, align 8
  %insn261 = alloca %struct.rtx_def*, align 8
  %last331 = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def* %a, %struct.basic_block_def** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %a.addr, metadata !6999, metadata !DIExpression()), !dbg !7000
  store %struct.basic_block_def* %b, %struct.basic_block_def** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %b.addr, metadata !7001, metadata !DIExpression()), !dbg !7002
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7003
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !7003
  br i1 %tobool, label %if.then, label %if.end, !dbg !7005

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7006
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !7007
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 9, !dbg !7008
  %3 = load i32, i32* %index, align 8, !dbg !7008
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !7009
  %index1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 9, !dbg !7010
  %5 = load i32, i32* %index1, align 8, !dbg !7010
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.36, i64 0, i64 0), i32 %3, i32 %5), !dbg !7011
  br label %if.end, !dbg !7011

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !7012
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 7, !dbg !7012
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !7012
  %7 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !7012
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %7, i32 0, i32 0, !dbg !7012
  %8 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !7012
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !7012
  %bf.load = load i32, i32* %9, align 8, !dbg !7012
  %bf.clear = and i32 %bf.load, 65535, !dbg !7012
  %cmp = icmp eq i32 %bf.clear, 12, !dbg !7012
  br i1 %cmp, label %if.then2, label %if.end7, !dbg !7014

if.then2:                                         ; preds = %if.end
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !7015
  %il3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 7, !dbg !7015
  %rtl4 = bitcast %union.basic_block_il_dependent* %il3 to %struct.rtl_bb_info**, !dbg !7015
  %11 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl4, align 8, !dbg !7015
  %head_5 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %11, i32 0, i32 0, !dbg !7015
  %12 = load %struct.rtx_def*, %struct.rtx_def** %head_5, align 8, !dbg !7015
  %call6 = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %12), !dbg !7017
  br label %if.end7, !dbg !7018

if.end7:                                          ; preds = %if.then2, %if.end
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !7019
  %il8 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 7, !dbg !7019
  %rtl9 = bitcast %union.basic_block_il_dependent* %il8 to %struct.rtl_bb_info**, !dbg !7019
  %14 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl9, align 8, !dbg !7019
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %14, i32 0, i32 1, !dbg !7019
  %15 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !7019
  %16 = bitcast %struct.rtx_def* %15 to i32*, !dbg !7019
  %bf.load10 = load i32, i32* %16, align 8, !dbg !7019
  %bf.clear11 = and i32 %bf.load10, 65535, !dbg !7019
  %cmp12 = icmp eq i32 %bf.clear11, 9, !dbg !7019
  br i1 %cmp12, label %if.then13, label %if.end18, !dbg !7021

if.then13:                                        ; preds = %if.end7
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !7022
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %17, i32 0, i32 1, !dbg !7022
  %18 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !7022
  %tobool14 = icmp ne %struct.VEC_edge_gc* %18, null, !dbg !7022
  br i1 %tobool14, label %cond.true, label %cond.false, !dbg !7022

cond.true:                                        ; preds = %if.then13
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !7022
  %succs15 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %19, i32 0, i32 1, !dbg !7022
  %20 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs15, align 8, !dbg !7022
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %20, i32 0, i32 0, !dbg !7022
  br label %cond.end, !dbg !7022

cond.false:                                       ; preds = %if.then13
  br label %cond.end, !dbg !7022

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7022
  %call16 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 0), !dbg !7022
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !7023
  %call17 = call %struct.edge_def* @try_redirect_by_replacing_jump(%struct.edge_def* %call16, %struct.basic_block_def* %21, i8 zeroext 1), !dbg !7024
  br label %if.end18, !dbg !7024

if.end18:                                         ; preds = %cond.end, %if.end7
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !7025
  %il19 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %22, i32 0, i32 7, !dbg !7025
  %rtl20 = bitcast %union.basic_block_il_dependent* %il19 to %struct.rtl_bb_info**, !dbg !7025
  %23 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl20, align 8, !dbg !7025
  %end_21 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %23, i32 0, i32 1, !dbg !7025
  %24 = load %struct.rtx_def*, %struct.rtx_def** %end_21, align 8, !dbg !7025
  %25 = bitcast %struct.rtx_def* %24 to i32*, !dbg !7025
  %bf.load22 = load i32, i32* %25, align 8, !dbg !7025
  %bf.clear23 = and i32 %bf.load22, 65535, !dbg !7025
  %cmp24 = icmp eq i32 %bf.clear23, 9, !dbg !7025
  br i1 %cmp24, label %cond.true25, label %cond.false26, !dbg !7025

cond.true25:                                      ; preds = %if.end18
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 2700, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7025
  br label %cond.end27, !dbg !7025

cond.false26:                                     ; preds = %if.end18
  br label %cond.end27, !dbg !7025

cond.end27:                                       ; preds = %cond.false26, %cond.true25
  %cond28 = phi i32 [ 0, %cond.true25 ], [ 0, %cond.false26 ], !dbg !7025
  %26 = load i32, i32* @optimize, align 4, !dbg !7026
  %tobool29 = icmp ne i32 %26, 0, !dbg !7026
  br i1 %tobool29, label %if.end169, label %land.lhs.true, !dbg !7028

land.lhs.true:                                    ; preds = %cond.end27
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !7029
  %succs30 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %27, i32 0, i32 1, !dbg !7029
  %28 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs30, align 8, !dbg !7029
  %tobool31 = icmp ne %struct.VEC_edge_gc* %28, null, !dbg !7029
  br i1 %tobool31, label %cond.true32, label %cond.false35, !dbg !7029

cond.true32:                                      ; preds = %land.lhs.true
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !7029
  %succs33 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %29, i32 0, i32 1, !dbg !7029
  %30 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs33, align 8, !dbg !7029
  %base34 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %30, i32 0, i32 0, !dbg !7029
  br label %cond.end36, !dbg !7029

cond.false35:                                     ; preds = %land.lhs.true
  br label %cond.end36, !dbg !7029

cond.end36:                                       ; preds = %cond.false35, %cond.true32
  %cond37 = phi %struct.VEC_edge_base* [ %base34, %cond.true32 ], [ null, %cond.false35 ], !dbg !7029
  %call38 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond37, i32 0), !dbg !7029
  %goto_locus = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call38, i32 0, i32 5, !dbg !7030
  %31 = load i32, i32* %goto_locus, align 8, !dbg !7030
  %tobool39 = icmp ne i32 %31, 0, !dbg !7029
  br i1 %tobool39, label %if.then40, label %if.end169, !dbg !7031

if.then40:                                        ; preds = %cond.end36
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !7032, metadata !DIExpression()), !dbg !7034
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !7035
  %il41 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %32, i32 0, i32 7, !dbg !7035
  %rtl42 = bitcast %union.basic_block_il_dependent* %il41 to %struct.rtl_bb_info**, !dbg !7035
  %33 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl42, align 8, !dbg !7035
  %end_43 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %33, i32 0, i32 1, !dbg !7035
  %34 = load %struct.rtx_def*, %struct.rtx_def** %end_43, align 8, !dbg !7035
  store %struct.rtx_def* %34, %struct.rtx_def** %insn, align 8, !dbg !7034
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %end, metadata !7036, metadata !DIExpression()), !dbg !7037
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !7038
  %il44 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %35, i32 0, i32 7, !dbg !7038
  %rtl45 = bitcast %union.basic_block_il_dependent* %il44 to %struct.rtl_bb_info**, !dbg !7038
  %36 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl45, align 8, !dbg !7038
  %head_46 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %36, i32 0, i32 0, !dbg !7038
  %37 = load %struct.rtx_def*, %struct.rtx_def** %head_46, align 8, !dbg !7038
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1, !dbg !7038
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7038
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !7038
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !7038
  %38 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7038
  store %struct.rtx_def* %38, %struct.rtx_def** %end, align 8, !dbg !7037
  call void @llvm.dbg.declare(metadata i32* %goto_locus47, metadata !7039, metadata !DIExpression()), !dbg !7040
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !7041
  %succs48 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %39, i32 0, i32 1, !dbg !7041
  %40 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs48, align 8, !dbg !7041
  %tobool49 = icmp ne %struct.VEC_edge_gc* %40, null, !dbg !7041
  br i1 %tobool49, label %cond.true50, label %cond.false53, !dbg !7041

cond.true50:                                      ; preds = %if.then40
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !7041
  %succs51 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %41, i32 0, i32 1, !dbg !7041
  %42 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs51, align 8, !dbg !7041
  %base52 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %42, i32 0, i32 0, !dbg !7041
  br label %cond.end54, !dbg !7041

cond.false53:                                     ; preds = %if.then40
  br label %cond.end54, !dbg !7041

cond.end54:                                       ; preds = %cond.false53, %cond.true50
  %cond55 = phi %struct.VEC_edge_base* [ %base52, %cond.true50 ], [ null, %cond.false53 ], !dbg !7041
  %call56 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond55, i32 0), !dbg !7041
  %goto_locus57 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call56, i32 0, i32 5, !dbg !7042
  %43 = load i32, i32* %goto_locus57, align 8, !dbg !7042
  store i32 %43, i32* %goto_locus47, align 4, !dbg !7040
  br label %while.cond, !dbg !7043

while.cond:                                       ; preds = %while.body, %cond.end54
  %44 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7044
  %45 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8, !dbg !7045
  %cmp58 = icmp ne %struct.rtx_def* %44, %45, !dbg !7046
  br i1 %cmp58, label %land.rhs, label %land.end, !dbg !7047

land.rhs:                                         ; preds = %while.cond
  %46 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7048
  %47 = bitcast %struct.rtx_def* %46 to i32*, !dbg !7048
  %bf.load59 = load i32, i32* %47, align 8, !dbg !7048
  %bf.clear60 = and i32 %bf.load59, 65535, !dbg !7048
  %cmp61 = icmp eq i32 %bf.clear60, 8, !dbg !7048
  br i1 %cmp61, label %lor.rhs, label %lor.lhs.false, !dbg !7048

lor.lhs.false:                                    ; preds = %land.rhs
  %48 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7048
  %49 = bitcast %struct.rtx_def* %48 to i32*, !dbg !7048
  %bf.load62 = load i32, i32* %49, align 8, !dbg !7048
  %bf.clear63 = and i32 %bf.load62, 65535, !dbg !7048
  %cmp64 = icmp eq i32 %bf.clear63, 7, !dbg !7048
  br i1 %cmp64, label %lor.rhs, label %lor.lhs.false65, !dbg !7048

lor.lhs.false65:                                  ; preds = %lor.lhs.false
  %50 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7048
  %51 = bitcast %struct.rtx_def* %50 to i32*, !dbg !7048
  %bf.load66 = load i32, i32* %51, align 8, !dbg !7048
  %bf.clear67 = and i32 %bf.load66, 65535, !dbg !7048
  %cmp68 = icmp eq i32 %bf.clear67, 9, !dbg !7048
  br i1 %cmp68, label %lor.rhs, label %lor.lhs.false69, !dbg !7048

lor.lhs.false69:                                  ; preds = %lor.lhs.false65
  %52 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7048
  %53 = bitcast %struct.rtx_def* %52 to i32*, !dbg !7048
  %bf.load70 = load i32, i32* %53, align 8, !dbg !7048
  %bf.clear71 = and i32 %bf.load70, 65535, !dbg !7048
  %cmp72 = icmp eq i32 %bf.clear71, 10, !dbg !7048
  br i1 %cmp72, label %lor.rhs, label %lor.end, !dbg !7049

lor.rhs:                                          ; preds = %lor.lhs.false69, %lor.lhs.false65, %lor.lhs.false, %land.rhs
  %54 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7050
  %u73 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %54, i32 0, i32 1, !dbg !7050
  %fld74 = bitcast %union.u* %u73 to [1 x %union.rtunion_def]*, !dbg !7050
  %arrayidx75 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld74, i64 0, i64 4, !dbg !7050
  %rt_int = bitcast %union.rtunion_def* %arrayidx75 to i32*, !dbg !7050
  %55 = load i32, i32* %rt_int, align 8, !dbg !7050
  %cmp76 = icmp eq i32 %55, 0, !dbg !7051
  br label %lor.end, !dbg !7049

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false69
  %56 = phi i1 [ true, %lor.lhs.false69 ], [ %cmp76, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %while.cond
  %57 = phi i1 [ false, %while.cond ], [ %56, %lor.end ], !dbg !7052
  br i1 %57, label %while.body, label %while.end, !dbg !7043

while.body:                                       ; preds = %land.end
  %58 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7053
  %u77 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %58, i32 0, i32 1, !dbg !7053
  %fld78 = bitcast %union.u* %u77 to [1 x %union.rtunion_def]*, !dbg !7053
  %arrayidx79 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld78, i64 0, i64 1, !dbg !7053
  %rt_rtx80 = bitcast %union.rtunion_def* %arrayidx79 to %struct.rtx_def**, !dbg !7053
  %59 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx80, align 8, !dbg !7053
  store %struct.rtx_def* %59, %struct.rtx_def** %insn, align 8, !dbg !7054
  br label %while.cond, !dbg !7043, !llvm.loop !7055

while.end:                                        ; preds = %land.end
  %60 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7056
  %61 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8, !dbg !7058
  %cmp81 = icmp ne %struct.rtx_def* %60, %61, !dbg !7059
  br i1 %cmp81, label %land.lhs.true82, label %if.else, !dbg !7060

land.lhs.true82:                                  ; preds = %while.end
  %62 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7061
  %u83 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %62, i32 0, i32 1, !dbg !7061
  %fld84 = bitcast %union.u* %u83 to [1 x %union.rtunion_def]*, !dbg !7061
  %arrayidx85 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld84, i64 0, i64 4, !dbg !7061
  %rt_int86 = bitcast %union.rtunion_def* %arrayidx85 to i32*, !dbg !7061
  %63 = load i32, i32* %rt_int86, align 8, !dbg !7061
  %64 = load i32, i32* %goto_locus47, align 4, !dbg !7062
  %call87 = call zeroext i8 @locator_eq(i32 %63, i32 %64), !dbg !7063
  %conv = zext i8 %call87 to i32, !dbg !7063
  %tobool88 = icmp ne i32 %conv, 0, !dbg !7063
  br i1 %tobool88, label %if.then89, label %if.else, !dbg !7064

if.then89:                                        ; preds = %land.lhs.true82
  store i32 0, i32* %goto_locus47, align 4, !dbg !7065
  br label %if.end150, !dbg !7066

if.else:                                          ; preds = %land.lhs.true82, %while.end
  %65 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !7067
  %il90 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %65, i32 0, i32 7, !dbg !7067
  %rtl91 = bitcast %union.basic_block_il_dependent* %il90 to %struct.rtl_bb_info**, !dbg !7067
  %66 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl91, align 8, !dbg !7067
  %head_92 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %66, i32 0, i32 0, !dbg !7067
  %67 = load %struct.rtx_def*, %struct.rtx_def** %head_92, align 8, !dbg !7067
  store %struct.rtx_def* %67, %struct.rtx_def** %insn, align 8, !dbg !7069
  %68 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !7070
  %il93 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %68, i32 0, i32 7, !dbg !7070
  %rtl94 = bitcast %union.basic_block_il_dependent* %il93 to %struct.rtl_bb_info**, !dbg !7070
  %69 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl94, align 8, !dbg !7070
  %end_95 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %69, i32 0, i32 1, !dbg !7070
  %70 = load %struct.rtx_def*, %struct.rtx_def** %end_95, align 8, !dbg !7070
  %u96 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %70, i32 0, i32 1, !dbg !7070
  %fld97 = bitcast %union.u* %u96 to [1 x %union.rtunion_def]*, !dbg !7070
  %arrayidx98 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld97, i64 0, i64 2, !dbg !7070
  %rt_rtx99 = bitcast %union.rtunion_def* %arrayidx98 to %struct.rtx_def**, !dbg !7070
  %71 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx99, align 8, !dbg !7070
  store %struct.rtx_def* %71, %struct.rtx_def** %end, align 8, !dbg !7071
  br label %while.cond100, !dbg !7072

while.cond100:                                    ; preds = %while.body125, %if.else
  %72 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7073
  %73 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8, !dbg !7074
  %cmp101 = icmp ne %struct.rtx_def* %72, %73, !dbg !7075
  br i1 %cmp101, label %land.rhs103, label %land.end124, !dbg !7076

land.rhs103:                                      ; preds = %while.cond100
  %74 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7077
  %75 = bitcast %struct.rtx_def* %74 to i32*, !dbg !7077
  %bf.load104 = load i32, i32* %75, align 8, !dbg !7077
  %bf.clear105 = and i32 %bf.load104, 65535, !dbg !7077
  %cmp106 = icmp eq i32 %bf.clear105, 8, !dbg !7077
  br i1 %cmp106, label %lor.end123, label %lor.lhs.false108, !dbg !7077

lor.lhs.false108:                                 ; preds = %land.rhs103
  %76 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7077
  %77 = bitcast %struct.rtx_def* %76 to i32*, !dbg !7077
  %bf.load109 = load i32, i32* %77, align 8, !dbg !7077
  %bf.clear110 = and i32 %bf.load109, 65535, !dbg !7077
  %cmp111 = icmp eq i32 %bf.clear110, 7, !dbg !7077
  br i1 %cmp111, label %lor.end123, label %lor.lhs.false113, !dbg !7077

lor.lhs.false113:                                 ; preds = %lor.lhs.false108
  %78 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7077
  %79 = bitcast %struct.rtx_def* %78 to i32*, !dbg !7077
  %bf.load114 = load i32, i32* %79, align 8, !dbg !7077
  %bf.clear115 = and i32 %bf.load114, 65535, !dbg !7077
  %cmp116 = icmp eq i32 %bf.clear115, 9, !dbg !7077
  br i1 %cmp116, label %lor.end123, label %lor.rhs118, !dbg !7077

lor.rhs118:                                       ; preds = %lor.lhs.false113
  %80 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7077
  %81 = bitcast %struct.rtx_def* %80 to i32*, !dbg !7077
  %bf.load119 = load i32, i32* %81, align 8, !dbg !7077
  %bf.clear120 = and i32 %bf.load119, 65535, !dbg !7077
  %cmp121 = icmp eq i32 %bf.clear120, 10, !dbg !7077
  br label %lor.end123, !dbg !7077

lor.end123:                                       ; preds = %lor.rhs118, %lor.lhs.false113, %lor.lhs.false108, %land.rhs103
  %82 = phi i1 [ true, %lor.lhs.false113 ], [ true, %lor.lhs.false108 ], [ true, %land.rhs103 ], [ %cmp121, %lor.rhs118 ]
  %lnot = xor i1 %82, true, !dbg !7078
  br label %land.end124

land.end124:                                      ; preds = %lor.end123, %while.cond100
  %83 = phi i1 [ false, %while.cond100 ], [ %lnot, %lor.end123 ], !dbg !7079
  br i1 %83, label %while.body125, label %while.end130, !dbg !7072

while.body125:                                    ; preds = %land.end124
  %84 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7080
  %u126 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %84, i32 0, i32 1, !dbg !7080
  %fld127 = bitcast %union.u* %u126 to [1 x %union.rtunion_def]*, !dbg !7080
  %arrayidx128 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld127, i64 0, i64 2, !dbg !7080
  %rt_rtx129 = bitcast %union.rtunion_def* %arrayidx128 to %struct.rtx_def**, !dbg !7080
  %85 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx129, align 8, !dbg !7080
  store %struct.rtx_def* %85, %struct.rtx_def** %insn, align 8, !dbg !7081
  br label %while.cond100, !dbg !7072, !llvm.loop !7082

while.end130:                                     ; preds = %land.end124
  %86 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7083
  %87 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8, !dbg !7085
  %cmp131 = icmp ne %struct.rtx_def* %86, %87, !dbg !7086
  br i1 %cmp131, label %land.lhs.true133, label %if.end149, !dbg !7087

land.lhs.true133:                                 ; preds = %while.end130
  %88 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7088
  %u134 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %88, i32 0, i32 1, !dbg !7088
  %fld135 = bitcast %union.u* %u134 to [1 x %union.rtunion_def]*, !dbg !7088
  %arrayidx136 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld135, i64 0, i64 4, !dbg !7088
  %rt_int137 = bitcast %union.rtunion_def* %arrayidx136 to i32*, !dbg !7088
  %89 = load i32, i32* %rt_int137, align 8, !dbg !7088
  %cmp138 = icmp ne i32 %89, 0, !dbg !7089
  br i1 %cmp138, label %land.lhs.true140, label %if.end149, !dbg !7090

land.lhs.true140:                                 ; preds = %land.lhs.true133
  %90 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7091
  %u141 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %90, i32 0, i32 1, !dbg !7091
  %fld142 = bitcast %union.u* %u141 to [1 x %union.rtunion_def]*, !dbg !7091
  %arrayidx143 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld142, i64 0, i64 4, !dbg !7091
  %rt_int144 = bitcast %union.rtunion_def* %arrayidx143 to i32*, !dbg !7091
  %91 = load i32, i32* %rt_int144, align 8, !dbg !7091
  %92 = load i32, i32* %goto_locus47, align 4, !dbg !7092
  %call145 = call zeroext i8 @locator_eq(i32 %91, i32 %92), !dbg !7093
  %conv146 = zext i8 %call145 to i32, !dbg !7093
  %tobool147 = icmp ne i32 %conv146, 0, !dbg !7093
  br i1 %tobool147, label %if.then148, label %if.end149, !dbg !7094

if.then148:                                       ; preds = %land.lhs.true140
  store i32 0, i32* %goto_locus47, align 4, !dbg !7095
  br label %if.end149, !dbg !7096

if.end149:                                        ; preds = %if.then148, %land.lhs.true140, %land.lhs.true133, %while.end130
  br label %if.end150

if.end150:                                        ; preds = %if.end149, %if.then89
  %93 = load i32, i32* %goto_locus47, align 4, !dbg !7097
  %tobool151 = icmp ne i32 %93, 0, !dbg !7097
  br i1 %tobool151, label %if.then152, label %if.end168, !dbg !7099

if.then152:                                       ; preds = %if.end150
  %call153 = call %struct.rtx_def* @gen_nop(), !dbg !7100
  %94 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !7102
  %il154 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %94, i32 0, i32 7, !dbg !7102
  %rtl155 = bitcast %union.basic_block_il_dependent* %il154 to %struct.rtl_bb_info**, !dbg !7102
  %95 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl155, align 8, !dbg !7102
  %end_156 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %95, i32 0, i32 1, !dbg !7102
  %96 = load %struct.rtx_def*, %struct.rtx_def** %end_156, align 8, !dbg !7102
  %97 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !7103
  %call157 = call %struct.rtx_def* @emit_insn_after_noloc(%struct.rtx_def* %call153, %struct.rtx_def* %96, %struct.basic_block_def* %97), !dbg !7104
  %98 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !7105
  %il158 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %98, i32 0, i32 7, !dbg !7105
  %rtl159 = bitcast %union.basic_block_il_dependent* %il158 to %struct.rtl_bb_info**, !dbg !7105
  %99 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl159, align 8, !dbg !7105
  %end_160 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %99, i32 0, i32 1, !dbg !7105
  store %struct.rtx_def* %call157, %struct.rtx_def** %end_160, align 8, !dbg !7106
  %100 = load i32, i32* %goto_locus47, align 4, !dbg !7107
  %101 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !7108
  %il161 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %101, i32 0, i32 7, !dbg !7108
  %rtl162 = bitcast %union.basic_block_il_dependent* %il161 to %struct.rtl_bb_info**, !dbg !7108
  %102 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl162, align 8, !dbg !7108
  %end_163 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %102, i32 0, i32 1, !dbg !7108
  %103 = load %struct.rtx_def*, %struct.rtx_def** %end_163, align 8, !dbg !7108
  %u164 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %103, i32 0, i32 1, !dbg !7108
  %fld165 = bitcast %union.u* %u164 to [1 x %union.rtunion_def]*, !dbg !7108
  %arrayidx166 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld165, i64 0, i64 4, !dbg !7108
  %rt_int167 = bitcast %union.rtunion_def* %arrayidx166 to i32*, !dbg !7108
  store i32 %100, i32* %rt_int167, align 8, !dbg !7109
  br label %if.end168, !dbg !7110

if.end168:                                        ; preds = %if.then152, %if.end150
  br label %if.end169, !dbg !7111

if.end169:                                        ; preds = %if.end168, %cond.end36, %cond.end27
  %104 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !7112
  %il170 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %104, i32 0, i32 7, !dbg !7114
  %rtl171 = bitcast %union.basic_block_il_dependent* %il170 to %struct.rtl_bb_info**, !dbg !7115
  %105 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl171, align 8, !dbg !7115
  %header = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %105, i32 0, i32 2, !dbg !7116
  %106 = load %struct.rtx_def*, %struct.rtx_def** %header, align 8, !dbg !7116
  %tobool172 = icmp ne %struct.rtx_def* %106, null, !dbg !7112
  br i1 %tobool172, label %if.then173, label %if.end191, !dbg !7117

if.then173:                                       ; preds = %if.end169
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %first, metadata !7118, metadata !DIExpression()), !dbg !7120
  %107 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !7121
  %il174 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %107, i32 0, i32 7, !dbg !7121
  %rtl175 = bitcast %union.basic_block_il_dependent* %il174 to %struct.rtl_bb_info**, !dbg !7121
  %108 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl175, align 8, !dbg !7121
  %end_176 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %108, i32 0, i32 1, !dbg !7121
  %109 = load %struct.rtx_def*, %struct.rtx_def** %end_176, align 8, !dbg !7121
  store %struct.rtx_def* %109, %struct.rtx_def** %first, align 8, !dbg !7120
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !7122, metadata !DIExpression()), !dbg !7123
  %110 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !7124
  %il177 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %110, i32 0, i32 7, !dbg !7125
  %rtl178 = bitcast %union.basic_block_il_dependent* %il177 to %struct.rtl_bb_info**, !dbg !7126
  %111 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl178, align 8, !dbg !7126
  %header179 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %111, i32 0, i32 2, !dbg !7127
  %112 = load %struct.rtx_def*, %struct.rtx_def** %header179, align 8, !dbg !7127
  %113 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !7128
  %il180 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %113, i32 0, i32 7, !dbg !7128
  %rtl181 = bitcast %union.basic_block_il_dependent* %il180 to %struct.rtl_bb_info**, !dbg !7128
  %114 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl181, align 8, !dbg !7128
  %end_182 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %114, i32 0, i32 1, !dbg !7128
  %115 = load %struct.rtx_def*, %struct.rtx_def** %end_182, align 8, !dbg !7128
  %116 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !7129
  %call183 = call %struct.rtx_def* @emit_insn_after_noloc(%struct.rtx_def* %112, %struct.rtx_def* %115, %struct.basic_block_def* %116), !dbg !7130
  store %struct.rtx_def* %call183, %struct.rtx_def** %last, align 8, !dbg !7131
  %117 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8, !dbg !7132
  %u184 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %117, i32 0, i32 1, !dbg !7132
  %fld185 = bitcast %union.u* %u184 to [1 x %union.rtunion_def]*, !dbg !7132
  %arrayidx186 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld185, i64 0, i64 2, !dbg !7132
  %rt_rtx187 = bitcast %union.rtunion_def* %arrayidx186 to %struct.rtx_def**, !dbg !7132
  %118 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx187, align 8, !dbg !7132
  %119 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !7133
  call void @delete_insn_chain(%struct.rtx_def* %118, %struct.rtx_def* %119, i8 zeroext 0), !dbg !7134
  %120 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !7135
  %il188 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %120, i32 0, i32 7, !dbg !7136
  %rtl189 = bitcast %union.basic_block_il_dependent* %il188 to %struct.rtl_bb_info**, !dbg !7137
  %121 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl189, align 8, !dbg !7137
  %header190 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %121, i32 0, i32 2, !dbg !7138
  store %struct.rtx_def* null, %struct.rtx_def** %header190, align 8, !dbg !7139
  br label %if.end191, !dbg !7140

if.end191:                                        ; preds = %if.then173, %if.end169
  %122 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !7141
  %il192 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %122, i32 0, i32 7, !dbg !7141
  %rtl193 = bitcast %union.basic_block_il_dependent* %il192 to %struct.rtl_bb_info**, !dbg !7141
  %123 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl193, align 8, !dbg !7141
  %end_194 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %123, i32 0, i32 1, !dbg !7141
  %124 = load %struct.rtx_def*, %struct.rtx_def** %end_194, align 8, !dbg !7141
  %u195 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %124, i32 0, i32 1, !dbg !7141
  %fld196 = bitcast %union.u* %u195 to [1 x %union.rtunion_def]*, !dbg !7141
  %arrayidx197 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld196, i64 0, i64 2, !dbg !7141
  %rt_rtx198 = bitcast %union.rtunion_def* %arrayidx197 to %struct.rtx_def**, !dbg !7141
  %125 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx198, align 8, !dbg !7141
  %126 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !7143
  %il199 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %126, i32 0, i32 7, !dbg !7143
  %rtl200 = bitcast %union.basic_block_il_dependent* %il199 to %struct.rtl_bb_info**, !dbg !7143
  %127 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl200, align 8, !dbg !7143
  %head_201 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %127, i32 0, i32 0, !dbg !7143
  %128 = load %struct.rtx_def*, %struct.rtx_def** %head_201, align 8, !dbg !7143
  %cmp202 = icmp ne %struct.rtx_def* %125, %128, !dbg !7144
  br i1 %cmp202, label %if.then204, label %if.else260, !dbg !7145

if.then204:                                       ; preds = %if.end191
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %first205, metadata !7146, metadata !DIExpression()), !dbg !7148
  %129 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !7149
  %il206 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %129, i32 0, i32 7, !dbg !7149
  %rtl207 = bitcast %union.basic_block_il_dependent* %il206 to %struct.rtl_bb_info**, !dbg !7149
  %130 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl207, align 8, !dbg !7149
  %head_208 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %130, i32 0, i32 0, !dbg !7149
  %131 = load %struct.rtx_def*, %struct.rtx_def** %head_208, align 8, !dbg !7149
  %132 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !7150
  %il209 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %132, i32 0, i32 7, !dbg !7150
  %rtl210 = bitcast %union.basic_block_il_dependent* %il209 to %struct.rtl_bb_info**, !dbg !7150
  %133 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl210, align 8, !dbg !7150
  %end_211 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %133, i32 0, i32 1, !dbg !7150
  %134 = load %struct.rtx_def*, %struct.rtx_def** %end_211, align 8, !dbg !7150
  %call212 = call %struct.rtx_def* @unlink_insn_chain(%struct.rtx_def* %131, %struct.rtx_def* %134), !dbg !7151
  store %struct.rtx_def* %call212, %struct.rtx_def** %first205, align 8, !dbg !7148
  %135 = load %struct.rtx_def*, %struct.rtx_def** %first205, align 8, !dbg !7152
  %136 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !7153
  %il213 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %136, i32 0, i32 7, !dbg !7153
  %rtl214 = bitcast %union.basic_block_il_dependent* %il213 to %struct.rtl_bb_info**, !dbg !7153
  %137 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl214, align 8, !dbg !7153
  %end_215 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %137, i32 0, i32 1, !dbg !7153
  %138 = load %struct.rtx_def*, %struct.rtx_def** %end_215, align 8, !dbg !7153
  %139 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !7154
  %call216 = call %struct.rtx_def* @emit_insn_after_noloc(%struct.rtx_def* %135, %struct.rtx_def* %138, %struct.basic_block_def* %139), !dbg !7155
  %140 = load %struct.rtx_def*, %struct.rtx_def** %first205, align 8, !dbg !7156
  %141 = bitcast %struct.rtx_def* %140 to i32*, !dbg !7156
  %bf.load217 = load i32, i32* %141, align 8, !dbg !7156
  %bf.clear218 = and i32 %bf.load217, 65535, !dbg !7156
  %cmp219 = icmp eq i32 %bf.clear218, 13, !dbg !7156
  br i1 %cmp219, label %land.lhs.true221, label %if.then228, !dbg !7156

land.lhs.true221:                                 ; preds = %if.then204
  %142 = load %struct.rtx_def*, %struct.rtx_def** %first205, align 8, !dbg !7156
  %u222 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %142, i32 0, i32 1, !dbg !7156
  %fld223 = bitcast %union.u* %u222 to [1 x %union.rtunion_def]*, !dbg !7156
  %arrayidx224 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld223, i64 0, i64 5, !dbg !7156
  %rt_int225 = bitcast %union.rtunion_def* %arrayidx224 to i32*, !dbg !7156
  %143 = load i32, i32* %rt_int225, align 8, !dbg !7156
  %cmp226 = icmp eq i32 %143, 10, !dbg !7156
  br i1 %cmp226, label %if.end233, label %if.then228, !dbg !7158

if.then228:                                       ; preds = %land.lhs.true221, %if.then204
  %144 = load %struct.rtx_def*, %struct.rtx_def** %first205, align 8, !dbg !7159
  %u229 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %144, i32 0, i32 1, !dbg !7159
  %fld230 = bitcast %union.u* %u229 to [1 x %union.rtunion_def]*, !dbg !7159
  %arrayidx231 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld230, i64 0, i64 2, !dbg !7159
  %rt_rtx232 = bitcast %union.rtunion_def* %arrayidx231 to %struct.rtx_def**, !dbg !7159
  %145 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx232, align 8, !dbg !7159
  store %struct.rtx_def* %145, %struct.rtx_def** %first205, align 8, !dbg !7160
  br label %if.end233, !dbg !7161

if.end233:                                        ; preds = %if.then228, %land.lhs.true221
  %146 = load %struct.rtx_def*, %struct.rtx_def** %first205, align 8, !dbg !7162
  %147 = bitcast %struct.rtx_def* %146 to i32*, !dbg !7162
  %bf.load234 = load i32, i32* %147, align 8, !dbg !7162
  %bf.clear235 = and i32 %bf.load234, 65535, !dbg !7162
  %cmp236 = icmp eq i32 %bf.clear235, 13, !dbg !7162
  br i1 %cmp236, label %land.lhs.true238, label %cond.true245, !dbg !7162

land.lhs.true238:                                 ; preds = %if.end233
  %148 = load %struct.rtx_def*, %struct.rtx_def** %first205, align 8, !dbg !7162
  %u239 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %148, i32 0, i32 1, !dbg !7162
  %fld240 = bitcast %union.u* %u239 to [1 x %union.rtunion_def]*, !dbg !7162
  %arrayidx241 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld240, i64 0, i64 5, !dbg !7162
  %rt_int242 = bitcast %union.rtunion_def* %arrayidx241 to i32*, !dbg !7162
  %149 = load i32, i32* %rt_int242, align 8, !dbg !7162
  %cmp243 = icmp eq i32 %149, 10, !dbg !7162
  br i1 %cmp243, label %cond.false246, label %cond.true245, !dbg !7162

cond.true245:                                     ; preds = %land.lhs.true238, %if.end233
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 2749, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7162
  br label %cond.end247, !dbg !7162

cond.false246:                                    ; preds = %land.lhs.true238
  br label %cond.end247, !dbg !7162

cond.end247:                                      ; preds = %cond.false246, %cond.true245
  %cond248 = phi i32 [ 0, %cond.true245 ], [ 0, %cond.false246 ], !dbg !7162
  %150 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !7163
  %il249 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %150, i32 0, i32 7, !dbg !7163
  %rtl250 = bitcast %union.basic_block_il_dependent* %il249 to %struct.rtl_bb_info**, !dbg !7163
  %151 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl250, align 8, !dbg !7163
  %head_251 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %151, i32 0, i32 0, !dbg !7163
  store %struct.rtx_def* null, %struct.rtx_def** %head_251, align 8, !dbg !7164
  %152 = load %struct.rtx_def*, %struct.rtx_def** %first205, align 8, !dbg !7165
  %u252 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %152, i32 0, i32 1, !dbg !7165
  %fld253 = bitcast %union.u* %u252 to [1 x %union.rtunion_def]*, !dbg !7165
  %arrayidx254 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld253, i64 0, i64 2, !dbg !7165
  %rt_rtx255 = bitcast %union.rtunion_def* %arrayidx254 to %struct.rtx_def**, !dbg !7165
  %153 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx255, align 8, !dbg !7165
  %154 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !7166
  %il256 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %154, i32 0, i32 7, !dbg !7166
  %rtl257 = bitcast %union.basic_block_il_dependent* %il256 to %struct.rtl_bb_info**, !dbg !7166
  %155 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl257, align 8, !dbg !7166
  %end_258 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %155, i32 0, i32 1, !dbg !7166
  %156 = load %struct.rtx_def*, %struct.rtx_def** %end_258, align 8, !dbg !7166
  %157 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !7167
  call void @update_bb_for_insn_chain(%struct.rtx_def* %153, %struct.rtx_def* %156, %struct.basic_block_def* %157), !dbg !7168
  %158 = load %struct.rtx_def*, %struct.rtx_def** %first205, align 8, !dbg !7169
  %call259 = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %158), !dbg !7170
  br label %if.end313, !dbg !7171

if.else260:                                       ; preds = %if.end191
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn261, metadata !7172, metadata !DIExpression()), !dbg !7174
  %159 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !7175
  %il262 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %159, i32 0, i32 7, !dbg !7175
  %rtl263 = bitcast %union.basic_block_il_dependent* %il262 to %struct.rtl_bb_info**, !dbg !7175
  %160 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl263, align 8, !dbg !7175
  %head_264 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %160, i32 0, i32 0, !dbg !7175
  %161 = load %struct.rtx_def*, %struct.rtx_def** %head_264, align 8, !dbg !7175
  %162 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !7176
  %il265 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %162, i32 0, i32 7, !dbg !7176
  %rtl266 = bitcast %union.basic_block_il_dependent* %il265 to %struct.rtl_bb_info**, !dbg !7176
  %163 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl266, align 8, !dbg !7176
  %end_267 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %163, i32 0, i32 1, !dbg !7176
  %164 = load %struct.rtx_def*, %struct.rtx_def** %end_267, align 8, !dbg !7176
  %165 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !7177
  call void @update_bb_for_insn_chain(%struct.rtx_def* %161, %struct.rtx_def* %164, %struct.basic_block_def* %165), !dbg !7178
  %166 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !7179
  %il268 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %166, i32 0, i32 7, !dbg !7179
  %rtl269 = bitcast %union.basic_block_il_dependent* %il268 to %struct.rtl_bb_info**, !dbg !7179
  %167 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl269, align 8, !dbg !7179
  %head_270 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %167, i32 0, i32 0, !dbg !7179
  %168 = load %struct.rtx_def*, %struct.rtx_def** %head_270, align 8, !dbg !7179
  store %struct.rtx_def* %168, %struct.rtx_def** %insn261, align 8, !dbg !7180
  %169 = load %struct.rtx_def*, %struct.rtx_def** %insn261, align 8, !dbg !7181
  %170 = bitcast %struct.rtx_def* %169 to i32*, !dbg !7181
  %bf.load271 = load i32, i32* %170, align 8, !dbg !7181
  %bf.clear272 = and i32 %bf.load271, 65535, !dbg !7181
  %cmp273 = icmp eq i32 %bf.clear272, 13, !dbg !7181
  br i1 %cmp273, label %land.lhs.true275, label %if.then282, !dbg !7181

land.lhs.true275:                                 ; preds = %if.else260
  %171 = load %struct.rtx_def*, %struct.rtx_def** %insn261, align 8, !dbg !7181
  %u276 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %171, i32 0, i32 1, !dbg !7181
  %fld277 = bitcast %union.u* %u276 to [1 x %union.rtunion_def]*, !dbg !7181
  %arrayidx278 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld277, i64 0, i64 5, !dbg !7181
  %rt_int279 = bitcast %union.rtunion_def* %arrayidx278 to i32*, !dbg !7181
  %172 = load i32, i32* %rt_int279, align 8, !dbg !7181
  %cmp280 = icmp eq i32 %172, 10, !dbg !7181
  br i1 %cmp280, label %if.end287, label %if.then282, !dbg !7183

if.then282:                                       ; preds = %land.lhs.true275, %if.else260
  %173 = load %struct.rtx_def*, %struct.rtx_def** %insn261, align 8, !dbg !7184
  %u283 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %173, i32 0, i32 1, !dbg !7184
  %fld284 = bitcast %union.u* %u283 to [1 x %union.rtunion_def]*, !dbg !7184
  %arrayidx285 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld284, i64 0, i64 2, !dbg !7184
  %rt_rtx286 = bitcast %union.rtunion_def* %arrayidx285 to %struct.rtx_def**, !dbg !7184
  %174 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx286, align 8, !dbg !7184
  store %struct.rtx_def* %174, %struct.rtx_def** %insn261, align 8, !dbg !7185
  br label %if.end287, !dbg !7186

if.end287:                                        ; preds = %if.then282, %land.lhs.true275
  %175 = load %struct.rtx_def*, %struct.rtx_def** %insn261, align 8, !dbg !7187
  %176 = bitcast %struct.rtx_def* %175 to i32*, !dbg !7187
  %bf.load288 = load i32, i32* %176, align 8, !dbg !7187
  %bf.clear289 = and i32 %bf.load288, 65535, !dbg !7187
  %cmp290 = icmp eq i32 %bf.clear289, 13, !dbg !7187
  br i1 %cmp290, label %land.lhs.true292, label %cond.true299, !dbg !7187

land.lhs.true292:                                 ; preds = %if.end287
  %177 = load %struct.rtx_def*, %struct.rtx_def** %insn261, align 8, !dbg !7187
  %u293 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %177, i32 0, i32 1, !dbg !7187
  %fld294 = bitcast %union.u* %u293 to [1 x %union.rtunion_def]*, !dbg !7187
  %arrayidx295 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld294, i64 0, i64 5, !dbg !7187
  %rt_int296 = bitcast %union.rtunion_def* %arrayidx295 to i32*, !dbg !7187
  %178 = load i32, i32* %rt_int296, align 8, !dbg !7187
  %cmp297 = icmp eq i32 %178, 10, !dbg !7187
  br i1 %cmp297, label %cond.false300, label %cond.true299, !dbg !7187

cond.true299:                                     ; preds = %land.lhs.true292, %if.end287
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 2771, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7187
  br label %cond.end301, !dbg !7187

cond.false300:                                    ; preds = %land.lhs.true292
  br label %cond.end301, !dbg !7187

cond.end301:                                      ; preds = %cond.false300, %cond.true299
  %cond302 = phi i32 [ 0, %cond.true299 ], [ 0, %cond.false300 ], !dbg !7187
  %179 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !7188
  %il303 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %179, i32 0, i32 7, !dbg !7188
  %rtl304 = bitcast %union.basic_block_il_dependent* %il303 to %struct.rtl_bb_info**, !dbg !7188
  %180 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl304, align 8, !dbg !7188
  %head_305 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %180, i32 0, i32 0, !dbg !7188
  store %struct.rtx_def* null, %struct.rtx_def** %head_305, align 8, !dbg !7189
  %181 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !7190
  %il306 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %181, i32 0, i32 7, !dbg !7190
  %rtl307 = bitcast %union.basic_block_il_dependent* %il306 to %struct.rtl_bb_info**, !dbg !7190
  %182 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl307, align 8, !dbg !7190
  %end_308 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %182, i32 0, i32 1, !dbg !7190
  %183 = load %struct.rtx_def*, %struct.rtx_def** %end_308, align 8, !dbg !7190
  %184 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !7191
  %il309 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %184, i32 0, i32 7, !dbg !7191
  %rtl310 = bitcast %union.basic_block_il_dependent* %il309 to %struct.rtl_bb_info**, !dbg !7191
  %185 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl310, align 8, !dbg !7191
  %end_311 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %185, i32 0, i32 1, !dbg !7191
  store %struct.rtx_def* %183, %struct.rtx_def** %end_311, align 8, !dbg !7192
  %186 = load %struct.rtx_def*, %struct.rtx_def** %insn261, align 8, !dbg !7193
  %call312 = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %186), !dbg !7194
  br label %if.end313

if.end313:                                        ; preds = %cond.end301, %cond.end247
  %187 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !7195
  %index314 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %187, i32 0, i32 9, !dbg !7196
  %188 = load i32, i32* %index314, align 8, !dbg !7196
  call void @df_bb_delete(i32 %188), !dbg !7197
  %189 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !7198
  %il315 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %189, i32 0, i32 7, !dbg !7200
  %rtl316 = bitcast %union.basic_block_il_dependent* %il315 to %struct.rtl_bb_info**, !dbg !7201
  %190 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl316, align 8, !dbg !7201
  %footer = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %190, i32 0, i32 3, !dbg !7202
  %191 = load %struct.rtx_def*, %struct.rtx_def** %footer, align 8, !dbg !7202
  %tobool317 = icmp ne %struct.rtx_def* %191, null, !dbg !7198
  br i1 %tobool317, label %if.then318, label %if.end365, !dbg !7203

if.then318:                                       ; preds = %if.end313
  %192 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !7204
  %il319 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %192, i32 0, i32 7, !dbg !7207
  %rtl320 = bitcast %union.basic_block_il_dependent* %il319 to %struct.rtl_bb_info**, !dbg !7208
  %193 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl320, align 8, !dbg !7208
  %footer321 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %193, i32 0, i32 3, !dbg !7209
  %194 = load %struct.rtx_def*, %struct.rtx_def** %footer321, align 8, !dbg !7209
  %tobool322 = icmp ne %struct.rtx_def* %194, null, !dbg !7204
  br i1 %tobool322, label %if.else330, label %if.then323, !dbg !7210

if.then323:                                       ; preds = %if.then318
  %195 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !7211
  %il324 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %195, i32 0, i32 7, !dbg !7212
  %rtl325 = bitcast %union.basic_block_il_dependent* %il324 to %struct.rtl_bb_info**, !dbg !7213
  %196 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl325, align 8, !dbg !7213
  %footer326 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %196, i32 0, i32 3, !dbg !7214
  %197 = load %struct.rtx_def*, %struct.rtx_def** %footer326, align 8, !dbg !7214
  %198 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !7215
  %il327 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %198, i32 0, i32 7, !dbg !7216
  %rtl328 = bitcast %union.basic_block_il_dependent* %il327 to %struct.rtl_bb_info**, !dbg !7217
  %199 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl328, align 8, !dbg !7217
  %footer329 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %199, i32 0, i32 3, !dbg !7218
  store %struct.rtx_def* %197, %struct.rtx_def** %footer329, align 8, !dbg !7219
  br label %if.end361, !dbg !7215

if.else330:                                       ; preds = %if.then318
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last331, metadata !7220, metadata !DIExpression()), !dbg !7222
  %200 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !7223
  %il332 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %200, i32 0, i32 7, !dbg !7224
  %rtl333 = bitcast %union.basic_block_il_dependent* %il332 to %struct.rtl_bb_info**, !dbg !7225
  %201 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl333, align 8, !dbg !7225
  %footer334 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %201, i32 0, i32 3, !dbg !7226
  %202 = load %struct.rtx_def*, %struct.rtx_def** %footer334, align 8, !dbg !7226
  store %struct.rtx_def* %202, %struct.rtx_def** %last331, align 8, !dbg !7222
  br label %while.cond335, !dbg !7227

while.cond335:                                    ; preds = %while.body341, %if.else330
  %203 = load %struct.rtx_def*, %struct.rtx_def** %last331, align 8, !dbg !7228
  %u336 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %203, i32 0, i32 1, !dbg !7228
  %fld337 = bitcast %union.u* %u336 to [1 x %union.rtunion_def]*, !dbg !7228
  %arrayidx338 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld337, i64 0, i64 2, !dbg !7228
  %rt_rtx339 = bitcast %union.rtunion_def* %arrayidx338 to %struct.rtx_def**, !dbg !7228
  %204 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx339, align 8, !dbg !7228
  %tobool340 = icmp ne %struct.rtx_def* %204, null, !dbg !7227
  br i1 %tobool340, label %while.body341, label %while.end346, !dbg !7227

while.body341:                                    ; preds = %while.cond335
  %205 = load %struct.rtx_def*, %struct.rtx_def** %last331, align 8, !dbg !7229
  %u342 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %205, i32 0, i32 1, !dbg !7229
  %fld343 = bitcast %union.u* %u342 to [1 x %union.rtunion_def]*, !dbg !7229
  %arrayidx344 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld343, i64 0, i64 2, !dbg !7229
  %rt_rtx345 = bitcast %union.rtunion_def* %arrayidx344 to %struct.rtx_def**, !dbg !7229
  %206 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx345, align 8, !dbg !7229
  store %struct.rtx_def* %206, %struct.rtx_def** %last331, align 8, !dbg !7230
  br label %while.cond335, !dbg !7227, !llvm.loop !7231

while.end346:                                     ; preds = %while.cond335
  %207 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !7232
  %il347 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %207, i32 0, i32 7, !dbg !7233
  %rtl348 = bitcast %union.basic_block_il_dependent* %il347 to %struct.rtl_bb_info**, !dbg !7234
  %208 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl348, align 8, !dbg !7234
  %footer349 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %208, i32 0, i32 3, !dbg !7235
  %209 = load %struct.rtx_def*, %struct.rtx_def** %footer349, align 8, !dbg !7235
  %210 = load %struct.rtx_def*, %struct.rtx_def** %last331, align 8, !dbg !7236
  %u350 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %210, i32 0, i32 1, !dbg !7236
  %fld351 = bitcast %union.u* %u350 to [1 x %union.rtunion_def]*, !dbg !7236
  %arrayidx352 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld351, i64 0, i64 2, !dbg !7236
  %rt_rtx353 = bitcast %union.rtunion_def* %arrayidx352 to %struct.rtx_def**, !dbg !7236
  store %struct.rtx_def* %209, %struct.rtx_def** %rt_rtx353, align 8, !dbg !7237
  %211 = load %struct.rtx_def*, %struct.rtx_def** %last331, align 8, !dbg !7238
  %212 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !7239
  %il354 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %212, i32 0, i32 7, !dbg !7239
  %rtl355 = bitcast %union.basic_block_il_dependent* %il354 to %struct.rtl_bb_info**, !dbg !7239
  %213 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl355, align 8, !dbg !7239
  %footer356 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %213, i32 0, i32 3, !dbg !7239
  %214 = load %struct.rtx_def*, %struct.rtx_def** %footer356, align 8, !dbg !7239
  %u357 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %214, i32 0, i32 1, !dbg !7239
  %fld358 = bitcast %union.u* %u357 to [1 x %union.rtunion_def]*, !dbg !7239
  %arrayidx359 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld358, i64 0, i64 1, !dbg !7239
  %rt_rtx360 = bitcast %union.rtunion_def* %arrayidx359 to %struct.rtx_def**, !dbg !7239
  store %struct.rtx_def* %211, %struct.rtx_def** %rt_rtx360, align 8, !dbg !7240
  br label %if.end361

if.end361:                                        ; preds = %while.end346, %if.then323
  %215 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !7241
  %il362 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %215, i32 0, i32 7, !dbg !7242
  %rtl363 = bitcast %union.basic_block_il_dependent* %il362 to %struct.rtl_bb_info**, !dbg !7243
  %216 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl363, align 8, !dbg !7243
  %footer364 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %216, i32 0, i32 3, !dbg !7244
  store %struct.rtx_def* null, %struct.rtx_def** %footer364, align 8, !dbg !7245
  br label %if.end365, !dbg !7246

if.end365:                                        ; preds = %if.end361, %if.end313
  %217 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7247
  %tobool366 = icmp ne %struct._IO_FILE* %217, null, !dbg !7247
  br i1 %tobool366, label %if.then367, label %if.end371, !dbg !7249

if.then367:                                       ; preds = %if.end365
  %218 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7250
  %219 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !7251
  %index368 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %219, i32 0, i32 9, !dbg !7252
  %220 = load i32, i32* %index368, align 8, !dbg !7252
  %221 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !7253
  %index369 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %221, i32 0, i32 9, !dbg !7254
  %222 = load i32, i32* %index369, align 8, !dbg !7254
  %call370 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %218, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.60, i64 0, i64 0), i32 %220, i32 %222), !dbg !7255
  br label %if.end371, !dbg !7255

if.end371:                                        ; preds = %if.then367, %if.end365
  ret void, !dbg !7256
}

declare dso_local zeroext i8 @cfg_layout_can_duplicate_bb_p(%struct.basic_block_def*) #2

declare dso_local %struct.basic_block_def* @cfg_layout_duplicate_bb(%struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @cfg_layout_split_edge(%struct.edge_def* %e) #0 !dbg !7257 {
entry:
  %e.addr = alloca %struct.edge_def*, align 8
  %new_bb = alloca %struct.basic_block_def*, align 8
  %bb_ = alloca %struct.basic_block_def*, align 8
  %bb_12 = alloca %struct.basic_block_def*, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !7258, metadata !DIExpression()), !dbg !7259
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %new_bb, metadata !7260, metadata !DIExpression()), !dbg !7261
  %0 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7262
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %0, i32 0, i32 0, !dbg !7263
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !7263
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7264
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !7264
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !7264
  %3 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !7264
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %3, i32 0, i32 0, !dbg !7264
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !7264
  %cmp = icmp ne %struct.basic_block_def* %1, %4, !dbg !7265
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !7262

cond.true:                                        ; preds = %entry
  %5 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7266
  %src1 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %5, i32 0, i32 0, !dbg !7266
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %src1, align 8, !dbg !7266
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 7, !dbg !7266
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !7266
  %7 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !7266
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %7, i32 0, i32 1, !dbg !7266
  %8 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !7266
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !7266
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7266
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !7266
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !7266
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7266
  br label %cond.end, !dbg !7262

cond.false:                                       ; preds = %entry
  %call = call %struct.rtx_def* @get_insns(), !dbg !7267
  br label %cond.end, !dbg !7262

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %9, %cond.true ], [ %call, %cond.false ], !dbg !7262
  %10 = bitcast %struct.rtx_def* %cond to i8*, !dbg !7262
  %11 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7268
  %src2 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %11, i32 0, i32 0, !dbg !7269
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %src2, align 8, !dbg !7269
  %call3 = call %struct.basic_block_def* @create_basic_block(i8* %10, i8* null, %struct.basic_block_def* %12), !dbg !7270
  store %struct.basic_block_def* %call3, %struct.basic_block_def** %new_bb, align 8, !dbg !7261
  %13 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7271
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %13, i32 0, i32 1, !dbg !7273
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !7273
  %15 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7274
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %15, i64 0, !dbg !7274
  %cfg5 = getelementptr inbounds %struct.function, %struct.function* %add.ptr4, i32 0, i32 1, !dbg !7274
  %16 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg5, align 8, !dbg !7274
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %16, i32 0, i32 1, !dbg !7274
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !7274
  %cmp6 = icmp eq %struct.basic_block_def* %14, %17, !dbg !7275
  br i1 %cmp6, label %if.then, label %if.else, !dbg !7276

if.then:                                          ; preds = %cond.end
  br label %do.body, !dbg !7277

do.body:                                          ; preds = %if.then
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb_, metadata !7278, metadata !DIExpression()), !dbg !7280
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !7280
  store %struct.basic_block_def* %18, %struct.basic_block_def** %bb_, align 8, !dbg !7280
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_, align 8, !dbg !7280
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %19, i32 0, i32 13, !dbg !7280
  %20 = load i32, i32* %flags, align 8, !dbg !7280
  %and = and i32 %20, -97, !dbg !7280
  %21 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7280
  %src7 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %21, i32 0, i32 0, !dbg !7280
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %src7, align 8, !dbg !7280
  %flags8 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %22, i32 0, i32 13, !dbg !7280
  %23 = load i32, i32* %flags8, align 8, !dbg !7280
  %and9 = and i32 %23, 96, !dbg !7280
  %or = or i32 %and, %and9, !dbg !7280
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_, align 8, !dbg !7280
  %flags10 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %24, i32 0, i32 13, !dbg !7280
  store i32 %or, i32* %flags10, align 8, !dbg !7280
  br label %do.end, !dbg !7280

do.end:                                           ; preds = %do.body
  br label %if.end, !dbg !7280

if.else:                                          ; preds = %cond.end
  br label %do.body11, !dbg !7281

do.body11:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb_12, metadata !7282, metadata !DIExpression()), !dbg !7284
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !7284
  store %struct.basic_block_def* %25, %struct.basic_block_def** %bb_12, align 8, !dbg !7284
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_12, align 8, !dbg !7284
  %flags13 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %26, i32 0, i32 13, !dbg !7284
  %27 = load i32, i32* %flags13, align 8, !dbg !7284
  %and14 = and i32 %27, -97, !dbg !7284
  %28 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7284
  %dest15 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %28, i32 0, i32 1, !dbg !7284
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %dest15, align 8, !dbg !7284
  %flags16 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %29, i32 0, i32 13, !dbg !7284
  %30 = load i32, i32* %flags16, align 8, !dbg !7284
  %and17 = and i32 %30, 96, !dbg !7284
  %or18 = or i32 %and14, %and17, !dbg !7284
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_12, align 8, !dbg !7284
  %flags19 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %31, i32 0, i32 13, !dbg !7284
  store i32 %or18, i32* %flags19, align 8, !dbg !7284
  br label %do.end20, !dbg !7284

do.end20:                                         ; preds = %do.body11
  br label %if.end

if.end:                                           ; preds = %do.end20, %do.end
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !7285
  %33 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7286
  %dest21 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %33, i32 0, i32 1, !dbg !7287
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %dest21, align 8, !dbg !7287
  %call22 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %32, %struct.basic_block_def* %34, i32 1), !dbg !7288
  %35 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7289
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !7290
  %call23 = call %struct.basic_block_def* @redirect_edge_and_branch_force(%struct.edge_def* %35, %struct.basic_block_def* %36), !dbg !7291
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !7292
  ret %struct.basic_block_def* %37, !dbg !7293
}

declare dso_local zeroext i8 @duplicate_loop_to_header_edge(%struct.loop*, %struct.edge_def*, i32, %struct.simple_bitmap_def*, %struct.edge_def*, %struct.VEC_edge_heap**, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @rtl_lv_add_condition_to_bb(%struct.basic_block_def* %first_head, %struct.basic_block_def* %second_head, %struct.basic_block_def* %cond_bb, i8* %comp_rtx) #0 !dbg !7294 {
entry:
  %first_head.addr = alloca %struct.basic_block_def*, align 8
  %second_head.addr = alloca %struct.basic_block_def*, align 8
  %cond_bb.addr = alloca %struct.basic_block_def*, align 8
  %comp_rtx.addr = alloca i8*, align 8
  %label = alloca %struct.rtx_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  %jump = alloca %struct.rtx_def*, align 8
  %op0 = alloca %struct.rtx_def*, align 8
  %op1 = alloca %struct.rtx_def*, align 8
  %comp = alloca i32, align 4
  %mode = alloca i32, align 4
  store %struct.basic_block_def* %first_head, %struct.basic_block_def** %first_head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %first_head.addr, metadata !7295, metadata !DIExpression()), !dbg !7296
  store %struct.basic_block_def* %second_head, %struct.basic_block_def** %second_head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %second_head.addr, metadata !7297, metadata !DIExpression()), !dbg !7298
  store %struct.basic_block_def* %cond_bb, %struct.basic_block_def** %cond_bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %cond_bb.addr, metadata !7299, metadata !DIExpression()), !dbg !7300
  store i8* %comp_rtx, i8** %comp_rtx.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %comp_rtx.addr, metadata !7301, metadata !DIExpression()), !dbg !7302
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %label, metadata !7303, metadata !DIExpression()), !dbg !7304
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %seq, metadata !7305, metadata !DIExpression()), !dbg !7306
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %jump, metadata !7307, metadata !DIExpression()), !dbg !7308
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0, metadata !7309, metadata !DIExpression()), !dbg !7310
  %0 = load i8*, i8** %comp_rtx.addr, align 8, !dbg !7311
  %1 = bitcast i8* %0 to %struct.rtx_def*, !dbg !7311
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !7311
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7311
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !7311
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !7311
  %2 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7311
  store %struct.rtx_def* %2, %struct.rtx_def** %op0, align 8, !dbg !7310
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op1, metadata !7312, metadata !DIExpression()), !dbg !7313
  %3 = load i8*, i8** %comp_rtx.addr, align 8, !dbg !7314
  %4 = bitcast i8* %3 to %struct.rtx_def*, !dbg !7314
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !7314
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !7314
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 1, !dbg !7314
  %rt_rtx4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**, !dbg !7314
  %5 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx4, align 8, !dbg !7314
  store %struct.rtx_def* %5, %struct.rtx_def** %op1, align 8, !dbg !7313
  call void @llvm.dbg.declare(metadata i32* %comp, metadata !7315, metadata !DIExpression()), !dbg !7316
  %6 = load i8*, i8** %comp_rtx.addr, align 8, !dbg !7317
  %7 = bitcast i8* %6 to %struct.rtx_def*, !dbg !7317
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !7317
  %bf.load = load i32, i32* %8, align 8, !dbg !7317
  %bf.clear = and i32 %bf.load, 65535, !dbg !7317
  store i32 %bf.clear, i32* %comp, align 4, !dbg !7316
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !7318, metadata !DIExpression()), !dbg !7319
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %first_head.addr, align 8, !dbg !7320
  %call = call %struct.rtx_def* @block_label(%struct.basic_block_def* %9), !dbg !7321
  store %struct.rtx_def* %call, %struct.rtx_def** %label, align 8, !dbg !7322
  %10 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !7323
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !7323
  %bf.load5 = load i32, i32* %11, align 8, !dbg !7323
  %bf.lshr = lshr i32 %bf.load5, 16, !dbg !7323
  %bf.clear6 = and i32 %bf.lshr, 255, !dbg !7323
  store i32 %bf.clear6, i32* %mode, align 4, !dbg !7324
  %12 = load i32, i32* %mode, align 4, !dbg !7325
  %cmp = icmp eq i32 %12, 0, !dbg !7327
  br i1 %cmp, label %if.then, label %if.end, !dbg !7328

if.then:                                          ; preds = %entry
  %13 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !7329
  %14 = bitcast %struct.rtx_def* %13 to i32*, !dbg !7329
  %bf.load7 = load i32, i32* %14, align 8, !dbg !7329
  %bf.lshr8 = lshr i32 %bf.load7, 16, !dbg !7329
  %bf.clear9 = and i32 %bf.lshr8, 255, !dbg !7329
  store i32 %bf.clear9, i32* %mode, align 4, !dbg !7330
  br label %if.end, !dbg !7331

if.end:                                           ; preds = %if.then, %entry
  call void @start_sequence(), !dbg !7332
  %15 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !7333
  %call10 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %15, %struct.rtx_def* null), !dbg !7334
  store %struct.rtx_def* %call10, %struct.rtx_def** %op0, align 8, !dbg !7335
  %16 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !7336
  %call11 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %16, %struct.rtx_def* null), !dbg !7337
  store %struct.rtx_def* %call11, %struct.rtx_def** %op1, align 8, !dbg !7338
  %17 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !7339
  %18 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !7340
  %19 = load i32, i32* %comp, align 4, !dbg !7341
  %20 = load i32, i32* %mode, align 4, !dbg !7342
  %21 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !7343
  call void @do_compare_rtx_and_jump(%struct.rtx_def* %17, %struct.rtx_def* %18, i32 %19, i32 0, i32 %20, %struct.rtx_def* null, %struct.rtx_def* null, %struct.rtx_def* %21, i32 -1), !dbg !7344
  %call12 = call %struct.rtx_def* @get_last_insn(), !dbg !7345
  store %struct.rtx_def* %call12, %struct.rtx_def** %jump, align 8, !dbg !7346
  %22 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !7347
  %23 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !7348
  %u13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1, !dbg !7348
  %fld14 = bitcast %union.u* %u13 to [1 x %union.rtunion_def]*, !dbg !7348
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i64 0, i64 8, !dbg !7348
  %rt_rtx16 = bitcast %union.rtunion_def* %arrayidx15 to %struct.rtx_def**, !dbg !7348
  store %struct.rtx_def* %22, %struct.rtx_def** %rt_rtx16, align 8, !dbg !7349
  %24 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !7350
  %u17 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1, !dbg !7350
  %fld18 = bitcast %union.u* %u17 to [1 x %union.rtunion_def]*, !dbg !7350
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld18, i64 0, i64 4, !dbg !7350
  %rt_int = bitcast %union.rtunion_def* %arrayidx19 to i32*, !dbg !7350
  %25 = load i32, i32* %rt_int, align 8, !dbg !7351
  %inc = add nsw i32 %25, 1, !dbg !7351
  store i32 %inc, i32* %rt_int, align 8, !dbg !7351
  %call20 = call %struct.rtx_def* @get_insns(), !dbg !7352
  store %struct.rtx_def* %call20, %struct.rtx_def** %seq, align 8, !dbg !7353
  call void @end_sequence(), !dbg !7354
  %26 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !7355
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %cond_bb.addr, align 8, !dbg !7356
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %27, i32 0, i32 7, !dbg !7356
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !7356
  %28 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !7356
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %28, i32 0, i32 1, !dbg !7356
  %29 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !7356
  %call21 = call %struct.rtx_def* @emit_insn_after(%struct.rtx_def* %26, %struct.rtx_def* %29), !dbg !7357
  ret void, !dbg !7358
}

; Function Attrs: noinline nounwind uwtable
define internal void @rtl_extract_cond_bb_edges(%struct.basic_block_def* %b, %struct.edge_def** %branch_edge, %struct.edge_def** %fallthru_edge) #0 !dbg !7359 {
entry:
  %b.addr = alloca %struct.basic_block_def*, align 8
  %branch_edge.addr = alloca %struct.edge_def**, align 8
  %fallthru_edge.addr = alloca %struct.edge_def**, align 8
  %e = alloca %struct.edge_def*, align 8
  store %struct.basic_block_def* %b, %struct.basic_block_def** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %b.addr, metadata !7360, metadata !DIExpression()), !dbg !7361
  store %struct.edge_def** %branch_edge, %struct.edge_def*** %branch_edge.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %branch_edge.addr, metadata !7362, metadata !DIExpression()), !dbg !7363
  store %struct.edge_def** %fallthru_edge, %struct.edge_def*** %fallthru_edge.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %fallthru_edge.addr, metadata !7364, metadata !DIExpression()), !dbg !7365
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !7366, metadata !DIExpression()), !dbg !7367
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !7368
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 1, !dbg !7368
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !7368
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !7368
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7368

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !7368
  %succs1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 1, !dbg !7368
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs1, align 8, !dbg !7368
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !7368
  br label %cond.end, !dbg !7368

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7368

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7368
  %call = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 0), !dbg !7368
  store %struct.edge_def* %call, %struct.edge_def** %e, align 8, !dbg !7367
  %4 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !7369
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %4, i32 0, i32 7, !dbg !7371
  %5 = load i32, i32* %flags, align 8, !dbg !7371
  %and = and i32 %5, 1, !dbg !7372
  %tobool2 = icmp ne i32 %and, 0, !dbg !7372
  br i1 %tobool2, label %if.then, label %if.else, !dbg !7373

if.then:                                          ; preds = %cond.end
  %6 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !7374
  %7 = load %struct.edge_def**, %struct.edge_def*** %fallthru_edge.addr, align 8, !dbg !7376
  store %struct.edge_def* %6, %struct.edge_def** %7, align 8, !dbg !7377
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !7378
  %succs3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 1, !dbg !7378
  %9 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs3, align 8, !dbg !7378
  %tobool4 = icmp ne %struct.VEC_edge_gc* %9, null, !dbg !7378
  br i1 %tobool4, label %cond.true5, label %cond.false8, !dbg !7378

cond.true5:                                       ; preds = %if.then
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !7378
  %succs6 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 1, !dbg !7378
  %11 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs6, align 8, !dbg !7378
  %base7 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %11, i32 0, i32 0, !dbg !7378
  br label %cond.end9, !dbg !7378

cond.false8:                                      ; preds = %if.then
  br label %cond.end9, !dbg !7378

cond.end9:                                        ; preds = %cond.false8, %cond.true5
  %cond10 = phi %struct.VEC_edge_base* [ %base7, %cond.true5 ], [ null, %cond.false8 ], !dbg !7378
  %call11 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond10, i32 1), !dbg !7378
  %12 = load %struct.edge_def**, %struct.edge_def*** %branch_edge.addr, align 8, !dbg !7379
  store %struct.edge_def* %call11, %struct.edge_def** %12, align 8, !dbg !7380
  br label %if.end, !dbg !7381

if.else:                                          ; preds = %cond.end
  %13 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !7382
  %14 = load %struct.edge_def**, %struct.edge_def*** %branch_edge.addr, align 8, !dbg !7384
  store %struct.edge_def* %13, %struct.edge_def** %14, align 8, !dbg !7385
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !7386
  %succs12 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %15, i32 0, i32 1, !dbg !7386
  %16 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs12, align 8, !dbg !7386
  %tobool13 = icmp ne %struct.VEC_edge_gc* %16, null, !dbg !7386
  br i1 %tobool13, label %cond.true14, label %cond.false17, !dbg !7386

cond.true14:                                      ; preds = %if.else
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !7386
  %succs15 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %17, i32 0, i32 1, !dbg !7386
  %18 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs15, align 8, !dbg !7386
  %base16 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %18, i32 0, i32 0, !dbg !7386
  br label %cond.end18, !dbg !7386

cond.false17:                                     ; preds = %if.else
  br label %cond.end18, !dbg !7386

cond.end18:                                       ; preds = %cond.false17, %cond.true14
  %cond19 = phi %struct.VEC_edge_base* [ %base16, %cond.true14 ], [ null, %cond.false17 ], !dbg !7386
  %call20 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond19, i32 1), !dbg !7386
  %19 = load %struct.edge_def**, %struct.edge_def*** %fallthru_edge.addr, align 8, !dbg !7387
  store %struct.edge_def* %call20, %struct.edge_def** %19, align 8, !dbg !7388
  br label %if.end

if.end:                                           ; preds = %cond.end18, %cond.end9
  ret void, !dbg !7389
}

declare dso_local i32 @in_expr_list_p(%struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_end_p(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !7390 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !7393, metadata !DIExpression()), !dbg !7394
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !7395
  %3 = load i32, i32* %index, align 8, !dbg !7395
  %4 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !7396
  %5 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 0, !dbg !7396
  %6 = load i32, i32* %5, align 8, !dbg !7396
  %7 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 1, !dbg !7396
  %8 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %7, align 8, !dbg !7396
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %6, %struct.VEC_edge_gc** %8), !dbg !7396
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !7396
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7396

cond.true:                                        ; preds = %entry
  %9 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !7396
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !7396
  %11 = load i32, i32* %10, align 8, !dbg !7396
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !7396
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !7396
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !7396
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !7396
  br label %cond.end, !dbg !7396

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7396

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7396
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !7396
  %cmp = icmp eq i32 %3, %call2, !dbg !7397
  %conv = zext i1 %cmp to i32, !dbg !7397
  %conv3 = trunc i32 %conv to i8, !dbg !7398
  ret i8 %conv3, !dbg !7399
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @ei_edge(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !7400 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !7401, metadata !DIExpression()), !dbg !7402
  %3 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !7403
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !7403
  %5 = load i32, i32* %4, align 8, !dbg !7403
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !7403
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !7403
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !7403
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !7403
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7403

cond.true:                                        ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !7403
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !7403
  %10 = load i32, i32* %9, align 8, !dbg !7403
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !7403
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !7403
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %10, %struct.VEC_edge_gc** %12), !dbg !7403
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !7403
  br label %cond.end, !dbg !7403

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7403

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7403
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !7403
  %13 = load i32, i32* %index, align 8, !dbg !7403
  %call2 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 %13), !dbg !7403
  ret %struct.edge_def* %call2, !dbg !7404
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_edge_gc* @ei_container(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !7405 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !7408, metadata !DIExpression()), !dbg !7409
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !7410
  %3 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container, align 8, !dbg !7410
  %tobool = icmp ne %struct.VEC_edge_gc** %3, null, !dbg !7410
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !7410

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.21, i64 0, i64 0), i32 687, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7410
  br label %cond.end, !dbg !7410

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7410

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7410
  %container1 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !7411
  %4 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container1, align 8, !dbg !7411
  %5 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %4, align 8, !dbg !7412
  ret %struct.VEC_edge_gc* %5, !dbg !7413
}

declare dso_local void @df_insn_change_bb(%struct.rtx_def*, %struct.basic_block_def*) #2

declare dso_local %struct.edge_def* @unchecked_make_edge(%struct.basic_block_def*, %struct.basic_block_def*, i32) #2

declare dso_local %struct.basic_block_def* @create_basic_block(i8*, i8*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @VEC_edge_base_unordered_remove(%struct.VEC_edge_base* %vec_, i32 %ix_) #0 !dbg !7414 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  %slot_ = alloca %struct.edge_def**, align 8
  %obj_ = alloca %struct.edge_def*, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !7418, metadata !DIExpression()), !dbg !7419
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !7420, metadata !DIExpression()), !dbg !7419
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %slot_, metadata !7421, metadata !DIExpression()), !dbg !7419
  call void @llvm.dbg.declare(metadata %struct.edge_def** %obj_, metadata !7422, metadata !DIExpression()), !dbg !7419
  %0 = load i32, i32* %ix_.addr, align 4, !dbg !7419
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !7419
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %1, i32 0, i32 0, !dbg !7419
  %2 = load i32, i32* %num, align 8, !dbg !7419
  %cmp = icmp ult i32 %0, %2, !dbg !7419
  %conv = zext i1 %cmp to i32, !dbg !7419
  %3 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !7419
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %3, i32 0, i32 2, !dbg !7419
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !7419
  %idxprom = zext i32 %4 to i64, !dbg !7419
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !7419
  store %struct.edge_def** %arrayidx, %struct.edge_def*** %slot_, align 8, !dbg !7419
  %5 = load %struct.edge_def**, %struct.edge_def*** %slot_, align 8, !dbg !7419
  %6 = load %struct.edge_def*, %struct.edge_def** %5, align 8, !dbg !7419
  store %struct.edge_def* %6, %struct.edge_def** %obj_, align 8, !dbg !7419
  %7 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !7419
  %vec1 = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %7, i32 0, i32 2, !dbg !7419
  %8 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !7419
  %num2 = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %8, i32 0, i32 0, !dbg !7419
  %9 = load i32, i32* %num2, align 8, !dbg !7419
  %dec = add i32 %9, -1, !dbg !7419
  store i32 %dec, i32* %num2, align 8, !dbg !7419
  %idxprom3 = zext i32 %dec to i64, !dbg !7419
  %arrayidx4 = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec1, i64 0, i64 %idxprom3, !dbg !7419
  %10 = load %struct.edge_def*, %struct.edge_def** %arrayidx4, align 8, !dbg !7419
  %11 = load %struct.edge_def**, %struct.edge_def*** %slot_, align 8, !dbg !7419
  store %struct.edge_def* %10, %struct.edge_def** %11, align 8, !dbg !7419
  %12 = load %struct.edge_def*, %struct.edge_def** %obj_, align 8, !dbg !7419
  ret %struct.edge_def* %12, !dbg !7419
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def** @VEC_edge_gc_safe_push(%struct.VEC_edge_gc** %vec_, %struct.edge_def* %obj_) #0 !dbg !7423 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_gc**, align 8
  %obj_.addr = alloca %struct.edge_def*, align 8
  store %struct.VEC_edge_gc** %vec_, %struct.VEC_edge_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_gc*** %vec_.addr, metadata !7426, metadata !DIExpression()), !dbg !7427
  store %struct.edge_def* %obj_, %struct.edge_def** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %obj_.addr, metadata !7428, metadata !DIExpression()), !dbg !7427
  %0 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %vec_.addr, align 8, !dbg !7427
  %call = call i32 @VEC_edge_gc_reserve(%struct.VEC_edge_gc** %0, i32 1), !dbg !7427
  %1 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %vec_.addr, align 8, !dbg !7427
  %2 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %1, align 8, !dbg !7427
  %tobool = icmp ne %struct.VEC_edge_gc* %2, null, !dbg !7427
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7427

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %vec_.addr, align 8, !dbg !7427
  %4 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %3, align 8, !dbg !7427
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %4, i32 0, i32 0, !dbg !7427
  br label %cond.end, !dbg !7427

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7427

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7427
  %5 = load %struct.edge_def*, %struct.edge_def** %obj_.addr, align 8, !dbg !7427
  %call1 = call %struct.edge_def** @VEC_edge_base_quick_push(%struct.VEC_edge_base* %cond, %struct.edge_def* %5), !dbg !7427
  ret %struct.edge_def** %call1, !dbg !7427
}

declare dso_local %struct.edge_def* @make_single_succ_edge(%struct.basic_block_def*, %struct.basic_block_def*, i32) #2

declare dso_local %struct.edge_def* @make_edge(%struct.basic_block_def*, %struct.basic_block_def*, i32) #2

declare dso_local void @redirect_edge_pred(%struct.edge_def*, %struct.basic_block_def*) #2

declare dso_local %struct.rtx_def* @emit_jump_insn_after_setloc(%struct.rtx_def*, %struct.rtx_def*, i32) #2

declare dso_local %struct.rtx_def* @gen_return() #2

declare dso_local %struct.edge_def* @redirect_edge_succ_nodup(%struct.edge_def*, %struct.basic_block_def*) #2

declare dso_local void @df_mark_solutions_dirty() #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_gc_reserve(%struct.VEC_edge_gc** %vec_, i32 %alloc_) #0 !dbg !7429 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_gc**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_edge_gc** %vec_, %struct.VEC_edge_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_gc*** %vec_.addr, metadata !7432, metadata !DIExpression()), !dbg !7433
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7434, metadata !DIExpression()), !dbg !7433
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !7435, metadata !DIExpression()), !dbg !7433
  %0 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %vec_.addr, align 8, !dbg !7433
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %0, align 8, !dbg !7433
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !7433
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7433

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %vec_.addr, align 8, !dbg !7433
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %2, align 8, !dbg !7433
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !7433
  br label %cond.end, !dbg !7433

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7433

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7433
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !7433
  %call = call i32 @VEC_edge_base_space(%struct.VEC_edge_base* %cond, i32 %4), !dbg !7433
  %tobool1 = icmp ne i32 %call, 0, !dbg !7433
  %lnot = xor i1 %tobool1, true, !dbg !7433
  %lnot.ext = zext i1 %lnot to i32, !dbg !7433
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !7433
  %5 = load i32, i32* %extend, align 4, !dbg !7436
  %tobool2 = icmp ne i32 %5, 0, !dbg !7436
  br i1 %tobool2, label %if.then, label %if.end, !dbg !7433

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %vec_.addr, align 8, !dbg !7436
  %7 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %6, align 8, !dbg !7436
  %8 = bitcast %struct.VEC_edge_gc* %7 to i8*, !dbg !7436
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !7436
  %call3 = call i8* @vec_gc_p_reserve(i8* %8, i32 %9), !dbg !7436
  %10 = bitcast i8* %call3 to %struct.VEC_edge_gc*, !dbg !7436
  %11 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %vec_.addr, align 8, !dbg !7436
  store %struct.VEC_edge_gc* %10, %struct.VEC_edge_gc** %11, align 8, !dbg !7436
  br label %if.end, !dbg !7436

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !7433
  ret i32 %12, !dbg !7433
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def** @VEC_edge_base_quick_push(%struct.VEC_edge_base* %vec_, %struct.edge_def* %obj_) #0 !dbg !7438 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %obj_.addr = alloca %struct.edge_def*, align 8
  %slot_ = alloca %struct.edge_def**, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !7441, metadata !DIExpression()), !dbg !7442
  store %struct.edge_def* %obj_, %struct.edge_def** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %obj_.addr, metadata !7443, metadata !DIExpression()), !dbg !7442
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %slot_, metadata !7444, metadata !DIExpression()), !dbg !7442
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !7442
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %0, i32 0, i32 0, !dbg !7442
  %1 = load i32, i32* %num, align 8, !dbg !7442
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !7442
  %alloc = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 1, !dbg !7442
  %3 = load i32, i32* %alloc, align 4, !dbg !7442
  %cmp = icmp ult i32 %1, %3, !dbg !7442
  %conv = zext i1 %cmp to i32, !dbg !7442
  %4 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !7442
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %4, i32 0, i32 2, !dbg !7442
  %5 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !7442
  %num1 = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %5, i32 0, i32 0, !dbg !7442
  %6 = load i32, i32* %num1, align 8, !dbg !7442
  %inc = add i32 %6, 1, !dbg !7442
  store i32 %inc, i32* %num1, align 8, !dbg !7442
  %idxprom = zext i32 %6 to i64, !dbg !7442
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !7442
  store %struct.edge_def** %arrayidx, %struct.edge_def*** %slot_, align 8, !dbg !7442
  %7 = load %struct.edge_def*, %struct.edge_def** %obj_.addr, align 8, !dbg !7442
  %8 = load %struct.edge_def**, %struct.edge_def*** %slot_, align 8, !dbg !7442
  store %struct.edge_def* %7, %struct.edge_def** %8, align 8, !dbg !7442
  %9 = load %struct.edge_def**, %struct.edge_def*** %slot_, align 8, !dbg !7442
  ret %struct.edge_def** %9, !dbg !7442
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_space(%struct.VEC_edge_base* %vec_, i32 %alloc_) #0 !dbg !7445 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !7448, metadata !DIExpression()), !dbg !7449
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7450, metadata !DIExpression()), !dbg !7449
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !7449
  %cmp = icmp sge i32 %0, 0, !dbg !7449
  %conv = zext i1 %cmp to i32, !dbg !7449
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !7449
  %tobool = icmp ne %struct.VEC_edge_base* %1, null, !dbg !7449
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7449

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !7449
  %alloc = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 1, !dbg !7449
  %3 = load i32, i32* %alloc, align 4, !dbg !7449
  %4 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !7449
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %4, i32 0, i32 0, !dbg !7449
  %5 = load i32, i32* %num, align 8, !dbg !7449
  %sub = sub i32 %3, %5, !dbg !7449
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !7449
  %cmp1 = icmp uge i32 %sub, %6, !dbg !7449
  %conv2 = zext i1 %cmp1 to i32, !dbg !7449
  br label %cond.end, !dbg !7449

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !7449
  %tobool3 = icmp ne i32 %7, 0, !dbg !7449
  %lnot = xor i1 %tobool3, true, !dbg !7449
  %lnot.ext = zext i1 %lnot to i32, !dbg !7449
  br label %cond.end, !dbg !7449

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !7449
  ret i32 %cond, !dbg !7449
}

declare dso_local i8* @vec_gc_p_reserve(i8*, i32) #2

declare dso_local void @error(i8*, ...) #2

declare dso_local void @_fatal_insn(i8*, %struct.rtx_def*, i8*, i32, i8*) #2

declare dso_local void @internal_error(i8*, ...) #2

declare dso_local i32 @condjump_p(%struct.rtx_def*) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_basic_block_base_length(%struct.VEC_basic_block_base* %vec_) #0 !dbg !7451 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !7456, metadata !DIExpression()), !dbg !7457
  %0 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !7457
  %tobool = icmp ne %struct.VEC_basic_block_base* %0, null, !dbg !7457
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7457

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !7457
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %1, i32 0, i32 0, !dbg !7457
  %2 = load i32, i32* %num, align 8, !dbg !7457
  br label %cond.end, !dbg !7457

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7457

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !7457
  ret i32 %cond, !dbg !7457
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_basic_block_gc_safe_grow_cleared(%struct.VEC_basic_block_gc** %vec_, i32 %size_) #0 !dbg !7458 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_gc**, align 8
  %size_.addr = alloca i32, align 4
  %oldsize = alloca i32, align 4
  store %struct.VEC_basic_block_gc** %vec_, %struct.VEC_basic_block_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_gc*** %vec_.addr, metadata !7462, metadata !DIExpression()), !dbg !7463
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !7464, metadata !DIExpression()), !dbg !7463
  call void @llvm.dbg.declare(metadata i32* %oldsize, metadata !7465, metadata !DIExpression()), !dbg !7463
  %0 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !7463
  %1 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %0, align 8, !dbg !7463
  %tobool = icmp ne %struct.VEC_basic_block_gc* %1, null, !dbg !7463
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7463

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !7463
  %3 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %2, align 8, !dbg !7463
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %3, i32 0, i32 0, !dbg !7463
  br label %cond.end, !dbg !7463

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7463

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7463
  %call = call i32 @VEC_basic_block_base_length(%struct.VEC_basic_block_base* %cond), !dbg !7463
  store i32 %call, i32* %oldsize, align 4, !dbg !7463
  %4 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !7463
  %5 = load i32, i32* %size_.addr, align 4, !dbg !7463
  call void @VEC_basic_block_gc_safe_grow(%struct.VEC_basic_block_gc** %4, i32 %5), !dbg !7463
  %6 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !7463
  %7 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %6, align 8, !dbg !7463
  %tobool1 = icmp ne %struct.VEC_basic_block_gc* %7, null, !dbg !7463
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !7463

cond.true2:                                       ; preds = %cond.end
  %8 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !7463
  %9 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %8, align 8, !dbg !7463
  %base3 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %9, i32 0, i32 0, !dbg !7463
  br label %cond.end5, !dbg !7463

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !7463

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_basic_block_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !7463
  %call7 = call %struct.basic_block_def** @VEC_basic_block_base_address(%struct.VEC_basic_block_base* %cond6), !dbg !7463
  %10 = load i32, i32* %oldsize, align 4, !dbg !7463
  %idxprom = sext i32 %10 to i64, !dbg !7463
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %call7, i64 %idxprom, !dbg !7463
  %11 = bitcast %struct.basic_block_def** %arrayidx to i8*, !dbg !7463
  %12 = load i32, i32* %size_.addr, align 4, !dbg !7463
  %13 = load i32, i32* %oldsize, align 4, !dbg !7463
  %sub = sub nsw i32 %12, %13, !dbg !7463
  %conv = sext i32 %sub to i64, !dbg !7463
  %mul = mul i64 8, %conv, !dbg !7463
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 %mul, i1 false), !dbg !7463
  ret void, !dbg !7463
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_basic_block_gc_safe_grow(%struct.VEC_basic_block_gc** %vec_, i32 %size_) #0 !dbg !7466 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_gc**, align 8
  %size_.addr = alloca i32, align 4
  store %struct.VEC_basic_block_gc** %vec_, %struct.VEC_basic_block_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_gc*** %vec_.addr, metadata !7467, metadata !DIExpression()), !dbg !7468
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !7469, metadata !DIExpression()), !dbg !7468
  %0 = load i32, i32* %size_.addr, align 4, !dbg !7468
  %cmp = icmp sge i32 %0, 0, !dbg !7468
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !7468

land.rhs:                                         ; preds = %entry
  %1 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !7468
  %2 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %1, align 8, !dbg !7468
  %tobool = icmp ne %struct.VEC_basic_block_gc* %2, null, !dbg !7468
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7468

cond.true:                                        ; preds = %land.rhs
  %3 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !7468
  %4 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %3, align 8, !dbg !7468
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %4, i32 0, i32 0, !dbg !7468
  br label %cond.end, !dbg !7468

cond.false:                                       ; preds = %land.rhs
  br label %cond.end, !dbg !7468

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7468
  %call = call i32 @VEC_basic_block_base_length(%struct.VEC_basic_block_base* %cond), !dbg !7468
  %5 = load i32, i32* %size_.addr, align 4, !dbg !7468
  %cmp1 = icmp ule i32 %call, %5, !dbg !7468
  br label %land.end

land.end:                                         ; preds = %cond.end, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %cond.end ], !dbg !7470
  %land.ext = zext i1 %6 to i32, !dbg !7468
  %7 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !7468
  %8 = load i32, i32* %size_.addr, align 4, !dbg !7468
  %9 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !7468
  %10 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %9, align 8, !dbg !7468
  %tobool2 = icmp ne %struct.VEC_basic_block_gc* %10, null, !dbg !7468
  br i1 %tobool2, label %cond.true3, label %cond.false10, !dbg !7468

cond.true3:                                       ; preds = %land.end
  %11 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !7468
  %12 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %11, align 8, !dbg !7468
  %tobool4 = icmp ne %struct.VEC_basic_block_gc* %12, null, !dbg !7468
  br i1 %tobool4, label %cond.true5, label %cond.false7, !dbg !7468

cond.true5:                                       ; preds = %cond.true3
  %13 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !7468
  %14 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %13, align 8, !dbg !7468
  %base6 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %14, i32 0, i32 0, !dbg !7468
  br label %cond.end8, !dbg !7468

cond.false7:                                      ; preds = %cond.true3
  br label %cond.end8, !dbg !7468

cond.end8:                                        ; preds = %cond.false7, %cond.true5
  %cond9 = phi %struct.VEC_basic_block_base* [ %base6, %cond.true5 ], [ null, %cond.false7 ], !dbg !7468
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %cond9, i32 0, i32 0, !dbg !7468
  %15 = load i32, i32* %num, align 8, !dbg !7468
  br label %cond.end11, !dbg !7468

cond.false10:                                     ; preds = %land.end
  br label %cond.end11, !dbg !7468

cond.end11:                                       ; preds = %cond.false10, %cond.end8
  %cond12 = phi i32 [ %15, %cond.end8 ], [ 0, %cond.false10 ], !dbg !7468
  %sub = sub nsw i32 %8, %cond12, !dbg !7468
  %call13 = call i32 @VEC_basic_block_gc_reserve_exact(%struct.VEC_basic_block_gc** %7, i32 %sub), !dbg !7468
  %16 = load i32, i32* %size_.addr, align 4, !dbg !7468
  %17 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !7468
  %18 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %17, align 8, !dbg !7468
  %tobool14 = icmp ne %struct.VEC_basic_block_gc* %18, null, !dbg !7468
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !7468

cond.true15:                                      ; preds = %cond.end11
  %19 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !7468
  %20 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %19, align 8, !dbg !7468
  %base16 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %20, i32 0, i32 0, !dbg !7468
  br label %cond.end18, !dbg !7468

cond.false17:                                     ; preds = %cond.end11
  br label %cond.end18, !dbg !7468

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_basic_block_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !7468
  %num20 = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %cond19, i32 0, i32 0, !dbg !7468
  store i32 %16, i32* %num20, align 8, !dbg !7468
  ret void, !dbg !7468
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def** @VEC_basic_block_base_address(%struct.VEC_basic_block_base* %vec_) #0 !dbg !7471 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !7474, metadata !DIExpression()), !dbg !7475
  %0 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !7475
  %tobool = icmp ne %struct.VEC_basic_block_base* %0, null, !dbg !7475
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7475

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !7475
  %vec = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %1, i32 0, i32 2, !dbg !7475
  %arraydecay = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %vec, i64 0, i64 0, !dbg !7475
  br label %cond.end, !dbg !7475

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7475

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.basic_block_def** [ %arraydecay, %cond.true ], [ null, %cond.false ], !dbg !7475
  ret %struct.basic_block_def** %cond, !dbg !7475
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_basic_block_gc_reserve_exact(%struct.VEC_basic_block_gc** %vec_, i32 %alloc_) #0 !dbg !7476 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_gc**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_basic_block_gc** %vec_, %struct.VEC_basic_block_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_gc*** %vec_.addr, metadata !7479, metadata !DIExpression()), !dbg !7480
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7481, metadata !DIExpression()), !dbg !7480
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !7482, metadata !DIExpression()), !dbg !7480
  %0 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !7480
  %1 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %0, align 8, !dbg !7480
  %tobool = icmp ne %struct.VEC_basic_block_gc* %1, null, !dbg !7480
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7480

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !7480
  %3 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %2, align 8, !dbg !7480
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %3, i32 0, i32 0, !dbg !7480
  br label %cond.end, !dbg !7480

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7480

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7480
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !7480
  %call = call i32 @VEC_basic_block_base_space(%struct.VEC_basic_block_base* %cond, i32 %4), !dbg !7480
  %tobool1 = icmp ne i32 %call, 0, !dbg !7480
  %lnot = xor i1 %tobool1, true, !dbg !7480
  %lnot.ext = zext i1 %lnot to i32, !dbg !7480
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !7480
  %5 = load i32, i32* %extend, align 4, !dbg !7483
  %tobool2 = icmp ne i32 %5, 0, !dbg !7483
  br i1 %tobool2, label %if.then, label %if.end, !dbg !7480

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !7483
  %7 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %6, align 8, !dbg !7483
  %8 = bitcast %struct.VEC_basic_block_gc* %7 to i8*, !dbg !7483
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !7483
  %call3 = call i8* @vec_gc_p_reserve_exact(i8* %8, i32 %9), !dbg !7483
  %10 = bitcast i8* %call3 to %struct.VEC_basic_block_gc*, !dbg !7483
  %11 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !7483
  store %struct.VEC_basic_block_gc* %10, %struct.VEC_basic_block_gc** %11, align 8, !dbg !7483
  br label %if.end, !dbg !7483

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !7480
  ret i32 %12, !dbg !7480
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_basic_block_base_space(%struct.VEC_basic_block_base* %vec_, i32 %alloc_) #0 !dbg !7485 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !7488, metadata !DIExpression()), !dbg !7489
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7490, metadata !DIExpression()), !dbg !7489
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !7489
  %cmp = icmp sge i32 %0, 0, !dbg !7489
  %conv = zext i1 %cmp to i32, !dbg !7489
  %1 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !7489
  %tobool = icmp ne %struct.VEC_basic_block_base* %1, null, !dbg !7489
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7489

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !7489
  %alloc = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %2, i32 0, i32 1, !dbg !7489
  %3 = load i32, i32* %alloc, align 4, !dbg !7489
  %4 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !7489
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %4, i32 0, i32 0, !dbg !7489
  %5 = load i32, i32* %num, align 8, !dbg !7489
  %sub = sub i32 %3, %5, !dbg !7489
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !7489
  %cmp1 = icmp uge i32 %sub, %6, !dbg !7489
  %conv2 = zext i1 %cmp1 to i32, !dbg !7489
  br label %cond.end, !dbg !7489

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !7489
  %tobool3 = icmp ne i32 %7, 0, !dbg !7489
  %lnot = xor i1 %tobool3, true, !dbg !7489
  %lnot.ext = zext i1 %lnot to i32, !dbg !7489
  br label %cond.end, !dbg !7489

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !7489
  ret i32 %cond, !dbg !7489
}

declare dso_local i8* @vec_gc_p_reserve_exact(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @redirect_branch_edge(%struct.edge_def* %e, %struct.basic_block_def* %target) #0 !dbg !7491 {
entry:
  %retval = alloca %struct.edge_def*, align 8
  %e.addr = alloca %struct.edge_def*, align 8
  %target.addr = alloca %struct.basic_block_def*, align 8
  %old_label = alloca %struct.rtx_def*, align 8
  %src = alloca %struct.basic_block_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !7492, metadata !DIExpression()), !dbg !7493
  store %struct.basic_block_def* %target, %struct.basic_block_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %target.addr, metadata !7494, metadata !DIExpression()), !dbg !7495
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %old_label, metadata !7496, metadata !DIExpression()), !dbg !7497
  %0 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7498
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %0, i32 0, i32 1, !dbg !7498
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !7498
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 7, !dbg !7498
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !7498
  %2 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !7498
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %2, i32 0, i32 0, !dbg !7498
  %3 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !7498
  store %struct.rtx_def* %3, %struct.rtx_def** %old_label, align 8, !dbg !7497
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %src, metadata !7499, metadata !DIExpression()), !dbg !7500
  %4 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7501
  %src1 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %4, i32 0, i32 0, !dbg !7502
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %src1, align 8, !dbg !7502
  store %struct.basic_block_def* %5, %struct.basic_block_def** %src, align 8, !dbg !7500
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !7503, metadata !DIExpression()), !dbg !7504
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !7505
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 7, !dbg !7505
  %rtl3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.rtl_bb_info**, !dbg !7505
  %7 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl3, align 8, !dbg !7505
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %7, i32 0, i32 1, !dbg !7505
  %8 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !7505
  store %struct.rtx_def* %8, %struct.rtx_def** %insn, align 8, !dbg !7504
  %9 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7506
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %9, i32 0, i32 7, !dbg !7508
  %10 = load i32, i32* %flags, align 8, !dbg !7508
  %and = and i32 %10, 1, !dbg !7509
  %tobool = icmp ne i32 %and, 0, !dbg !7509
  br i1 %tobool, label %if.then, label %if.else, !dbg !7510

if.then:                                          ; preds = %entry
  store %struct.edge_def* null, %struct.edge_def** %retval, align 8, !dbg !7511
  br label %return, !dbg !7511

if.else:                                          ; preds = %entry
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7512
  %12 = bitcast %struct.rtx_def* %11 to i32*, !dbg !7512
  %bf.load = load i32, i32* %12, align 8, !dbg !7512
  %bf.clear = and i32 %bf.load, 65535, !dbg !7512
  %cmp = icmp eq i32 %bf.clear, 9, !dbg !7512
  br i1 %cmp, label %if.end, label %land.lhs.true, !dbg !7514

land.lhs.true:                                    ; preds = %if.else
  %13 = load i32, i32* @currently_expanding_to_rtl, align 4, !dbg !7515
  %tobool4 = icmp ne i32 %13, 0, !dbg !7515
  br i1 %tobool4, label %if.end, label %if.then5, !dbg !7516

if.then5:                                         ; preds = %land.lhs.true
  store %struct.edge_def* null, %struct.edge_def** %retval, align 8, !dbg !7517
  br label %return, !dbg !7517

if.end:                                           ; preds = %land.lhs.true, %if.else
  br label %if.end6

if.end6:                                          ; preds = %if.end
  %14 = load i32, i32* @currently_expanding_to_rtl, align 4, !dbg !7518
  %tobool7 = icmp ne i32 %14, 0, !dbg !7518
  br i1 %tobool7, label %if.else12, label %if.then8, !dbg !7520

if.then8:                                         ; preds = %if.end6
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7521
  %16 = load %struct.rtx_def*, %struct.rtx_def** %old_label, align 8, !dbg !7524
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %target.addr, align 8, !dbg !7525
  %call = call zeroext i8 @patch_jump_insn(%struct.rtx_def* %15, %struct.rtx_def* %16, %struct.basic_block_def* %17), !dbg !7526
  %tobool9 = icmp ne i8 %call, 0, !dbg !7526
  br i1 %tobool9, label %if.end11, label %if.then10, !dbg !7527

if.then10:                                        ; preds = %if.then8
  store %struct.edge_def* null, %struct.edge_def** %retval, align 8, !dbg !7528
  br label %return, !dbg !7528

if.end11:                                         ; preds = %if.then8
  br label %if.end32, !dbg !7529

if.else12:                                        ; preds = %if.end6
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !7530
  %il13 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %18, i32 0, i32 7, !dbg !7530
  %rtl14 = bitcast %union.basic_block_il_dependent* %il13 to %struct.rtl_bb_info**, !dbg !7530
  %19 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl14, align 8, !dbg !7530
  %head_15 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %19, i32 0, i32 0, !dbg !7530
  %20 = load %struct.rtx_def*, %struct.rtx_def** %head_15, align 8, !dbg !7530
  store %struct.rtx_def* %20, %struct.rtx_def** %insn, align 8, !dbg !7532
  br label %for.cond, !dbg !7533

for.cond:                                         ; preds = %for.inc, %if.else12
  %21 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7534
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !7536
  %il16 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %22, i32 0, i32 7, !dbg !7536
  %rtl17 = bitcast %union.basic_block_il_dependent* %il16 to %struct.rtl_bb_info**, !dbg !7536
  %23 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl17, align 8, !dbg !7536
  %end_18 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %23, i32 0, i32 1, !dbg !7536
  %24 = load %struct.rtx_def*, %struct.rtx_def** %end_18, align 8, !dbg !7536
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1, !dbg !7536
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7536
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !7536
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !7536
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7536
  %cmp19 = icmp ne %struct.rtx_def* %21, %25, !dbg !7537
  br i1 %cmp19, label %for.body, label %for.end, !dbg !7538

for.body:                                         ; preds = %for.cond
  %26 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7539
  %27 = bitcast %struct.rtx_def* %26 to i32*, !dbg !7539
  %bf.load20 = load i32, i32* %27, align 8, !dbg !7539
  %bf.clear21 = and i32 %bf.load20, 65535, !dbg !7539
  %cmp22 = icmp eq i32 %bf.clear21, 9, !dbg !7539
  br i1 %cmp22, label %land.lhs.true23, label %if.end27, !dbg !7541

land.lhs.true23:                                  ; preds = %for.body
  %28 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7542
  %29 = load %struct.rtx_def*, %struct.rtx_def** %old_label, align 8, !dbg !7543
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %target.addr, align 8, !dbg !7544
  %call24 = call zeroext i8 @patch_jump_insn(%struct.rtx_def* %28, %struct.rtx_def* %29, %struct.basic_block_def* %30), !dbg !7545
  %tobool25 = icmp ne i8 %call24, 0, !dbg !7545
  br i1 %tobool25, label %if.end27, label %if.then26, !dbg !7546

if.then26:                                        ; preds = %land.lhs.true23
  store %struct.edge_def* null, %struct.edge_def** %retval, align 8, !dbg !7547
  br label %return, !dbg !7547

if.end27:                                         ; preds = %land.lhs.true23, %for.body
  br label %for.inc, !dbg !7548

for.inc:                                          ; preds = %if.end27
  %31 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7549
  %u28 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1, !dbg !7549
  %fld29 = bitcast %union.u* %u28 to [1 x %union.rtunion_def]*, !dbg !7549
  %arrayidx30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld29, i64 0, i64 2, !dbg !7549
  %rt_rtx31 = bitcast %union.rtunion_def* %arrayidx30 to %struct.rtx_def**, !dbg !7549
  %32 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx31, align 8, !dbg !7549
  store %struct.rtx_def* %32, %struct.rtx_def** %insn, align 8, !dbg !7550
  br label %for.cond, !dbg !7551, !llvm.loop !7552

for.end:                                          ; preds = %for.cond
  br label %if.end32

if.end32:                                         ; preds = %for.end, %if.end11
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7554
  %tobool33 = icmp ne %struct._IO_FILE* %33, null, !dbg !7554
  br i1 %tobool33, label %if.then34, label %if.end40, !dbg !7556

if.then34:                                        ; preds = %if.end32
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7557
  %35 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7558
  %src35 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %35, i32 0, i32 0, !dbg !7559
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %src35, align 8, !dbg !7559
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %36, i32 0, i32 9, !dbg !7560
  %37 = load i32, i32* %index, align 8, !dbg !7560
  %38 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7561
  %dest36 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %38, i32 0, i32 1, !dbg !7562
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %dest36, align 8, !dbg !7562
  %index37 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %39, i32 0, i32 9, !dbg !7563
  %40 = load i32, i32* %index37, align 8, !dbg !7563
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %target.addr, align 8, !dbg !7564
  %index38 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %41, i32 0, i32 9, !dbg !7565
  %42 = load i32, i32* %index38, align 8, !dbg !7565
  %call39 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %34, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.34, i64 0, i64 0), i32 %37, i32 %40, i32 %42), !dbg !7566
  br label %if.end40, !dbg !7566

if.end40:                                         ; preds = %if.then34, %if.end32
  %43 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7567
  %dest41 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %43, i32 0, i32 1, !dbg !7569
  %44 = load %struct.basic_block_def*, %struct.basic_block_def** %dest41, align 8, !dbg !7569
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %target.addr, align 8, !dbg !7570
  %cmp42 = icmp ne %struct.basic_block_def* %44, %45, !dbg !7571
  br i1 %cmp42, label %if.then43, label %if.end45, !dbg !7572

if.then43:                                        ; preds = %if.end40
  %46 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7573
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %target.addr, align 8, !dbg !7574
  %call44 = call %struct.edge_def* @redirect_edge_succ_nodup(%struct.edge_def* %46, %struct.basic_block_def* %47), !dbg !7575
  store %struct.edge_def* %call44, %struct.edge_def** %e.addr, align 8, !dbg !7576
  br label %if.end45, !dbg !7577

if.end45:                                         ; preds = %if.then43, %if.end40
  %48 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7578
  store %struct.edge_def* %48, %struct.edge_def** %retval, align 8, !dbg !7579
  br label %return, !dbg !7579

return:                                           ; preds = %if.end45, %if.then26, %if.then10, %if.then5, %if.then
  %49 = load %struct.edge_def*, %struct.edge_def** %retval, align 8, !dbg !7580
  ret %struct.edge_def* %49, !dbg !7580
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @patch_jump_insn(%struct.rtx_def* %insn, %struct.rtx_def* %old_label, %struct.basic_block_def* %new_bb) #0 !dbg !7581 {
entry:
  %retval = alloca i8, align 1
  %insn.addr = alloca %struct.rtx_def*, align 8
  %old_label.addr = alloca %struct.rtx_def*, align 8
  %new_bb.addr = alloca %struct.basic_block_def*, align 8
  %tmp = alloca %struct.rtx_def*, align 8
  %vec = alloca %struct.rtvec_def*, align 8
  %j = alloca i32, align 4
  %new_label = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %new_label150 = alloca %struct.rtx_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  %old_ref = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !7584, metadata !DIExpression()), !dbg !7585
  store %struct.rtx_def* %old_label, %struct.rtx_def** %old_label.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %old_label.addr, metadata !7586, metadata !DIExpression()), !dbg !7587
  store %struct.basic_block_def* %new_bb, %struct.basic_block_def** %new_bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %new_bb.addr, metadata !7588, metadata !DIExpression()), !dbg !7589
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tmp, metadata !7590, metadata !DIExpression()), !dbg !7591
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7592
  %call = call zeroext i8 @tablejump_p(%struct.rtx_def* %0, %struct.rtx_def** null, %struct.rtx_def** %tmp), !dbg !7594
  %tobool = icmp ne i8 %call, 0, !dbg !7594
  br i1 %tobool, label %if.then, label %if.else137, !dbg !7595

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.rtvec_def** %vec, metadata !7596, metadata !DIExpression()), !dbg !7598
  call void @llvm.dbg.declare(metadata i32* %j, metadata !7599, metadata !DIExpression()), !dbg !7600
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %new_label, metadata !7601, metadata !DIExpression()), !dbg !7602
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb.addr, align 8, !dbg !7603
  %call1 = call %struct.rtx_def* @block_label(%struct.basic_block_def* %1), !dbg !7604
  store %struct.rtx_def* %call1, %struct.rtx_def** %new_label, align 8, !dbg !7602
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb.addr, align 8, !dbg !7605
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7607
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !7607
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !7607
  %4 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !7607
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %4, i32 0, i32 1, !dbg !7607
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !7607
  %cmp = icmp eq %struct.basic_block_def* %2, %5, !dbg !7608
  br i1 %cmp, label %if.then2, label %if.end, !dbg !7609

if.then2:                                         ; preds = %if.then
  store i8 0, i8* %retval, align 1, !dbg !7610
  br label %return, !dbg !7610

if.end:                                           ; preds = %if.then
  %6 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !7611
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !7611
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7611
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !7611
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !7611
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7611
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !7611
  %bf.load = load i32, i32* %8, align 8, !dbg !7611
  %bf.clear = and i32 %bf.load, 65535, !dbg !7611
  %cmp3 = icmp eq i32 %bf.clear, 20, !dbg !7613
  br i1 %cmp3, label %if.then4, label %if.else, !dbg !7614

if.then4:                                         ; preds = %if.end
  %9 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !7615
  %u5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !7615
  %fld6 = bitcast %union.u* %u5 to [1 x %union.rtunion_def]*, !dbg !7615
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i64 0, i64 5, !dbg !7615
  %rt_rtx8 = bitcast %union.rtunion_def* %arrayidx7 to %struct.rtx_def**, !dbg !7615
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx8, align 8, !dbg !7615
  %u9 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !7615
  %fld10 = bitcast %union.u* %u9 to [1 x %union.rtunion_def]*, !dbg !7615
  %arrayidx11 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld10, i64 0, i64 0, !dbg !7615
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx11 to %struct.rtvec_def**, !dbg !7615
  %11 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !7615
  store %struct.rtvec_def* %11, %struct.rtvec_def** %vec, align 8, !dbg !7616
  br label %if.end20, !dbg !7617

if.else:                                          ; preds = %if.end
  %12 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !7618
  %u12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !7618
  %fld13 = bitcast %union.u* %u12 to [1 x %union.rtunion_def]*, !dbg !7618
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i64 0, i64 5, !dbg !7618
  %rt_rtx15 = bitcast %union.rtunion_def* %arrayidx14 to %struct.rtx_def**, !dbg !7618
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx15, align 8, !dbg !7618
  %u16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !7618
  %fld17 = bitcast %union.u* %u16 to [1 x %union.rtunion_def]*, !dbg !7618
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i64 0, i64 1, !dbg !7618
  %rt_rtvec19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtvec_def**, !dbg !7618
  %14 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec19, align 8, !dbg !7618
  store %struct.rtvec_def* %14, %struct.rtvec_def** %vec, align 8, !dbg !7619
  br label %if.end20

if.end20:                                         ; preds = %if.else, %if.then4
  %15 = load %struct.rtvec_def*, %struct.rtvec_def** %vec, align 8, !dbg !7620
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %15, i32 0, i32 0, !dbg !7620
  %16 = load i32, i32* %num_elem, align 8, !dbg !7620
  %sub = sub nsw i32 %16, 1, !dbg !7622
  store i32 %sub, i32* %j, align 4, !dbg !7623
  br label %for.cond, !dbg !7624

for.cond:                                         ; preds = %for.inc, %if.end20
  %17 = load i32, i32* %j, align 4, !dbg !7625
  %cmp21 = icmp sge i32 %17, 0, !dbg !7627
  br i1 %cmp21, label %for.body, label %for.end, !dbg !7628

for.body:                                         ; preds = %for.cond
  %18 = load %struct.rtvec_def*, %struct.rtvec_def** %vec, align 8, !dbg !7629
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %18, i32 0, i32 1, !dbg !7629
  %19 = load i32, i32* %j, align 4, !dbg !7629
  %idxprom = sext i32 %19 to i64, !dbg !7629
  %arrayidx22 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom, !dbg !7629
  %20 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx22, align 8, !dbg !7629
  %u23 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1, !dbg !7629
  %fld24 = bitcast %union.u* %u23 to [1 x %union.rtunion_def]*, !dbg !7629
  %arrayidx25 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld24, i64 0, i64 0, !dbg !7629
  %rt_rtx26 = bitcast %union.rtunion_def* %arrayidx25 to %struct.rtx_def**, !dbg !7629
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx26, align 8, !dbg !7629
  %22 = load %struct.rtx_def*, %struct.rtx_def** %old_label.addr, align 8, !dbg !7631
  %cmp27 = icmp eq %struct.rtx_def* %21, %22, !dbg !7632
  br i1 %cmp27, label %if.then28, label %if.end40, !dbg !7633

if.then28:                                        ; preds = %for.body
  %23 = load %struct.rtx_def*, %struct.rtx_def** %new_label, align 8, !dbg !7634
  %call29 = call %struct.rtx_def* @gen_rtx_fmt_u_stat(i32 44, i32 16, %struct.rtx_def* %23), !dbg !7634
  %24 = load %struct.rtvec_def*, %struct.rtvec_def** %vec, align 8, !dbg !7636
  %elem30 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %24, i32 0, i32 1, !dbg !7636
  %25 = load i32, i32* %j, align 4, !dbg !7636
  %idxprom31 = sext i32 %25 to i64, !dbg !7636
  %arrayidx32 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem30, i64 0, i64 %idxprom31, !dbg !7636
  store %struct.rtx_def* %call29, %struct.rtx_def** %arrayidx32, align 8, !dbg !7637
  %26 = load %struct.rtx_def*, %struct.rtx_def** %old_label.addr, align 8, !dbg !7638
  %u33 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1, !dbg !7638
  %fld34 = bitcast %union.u* %u33 to [1 x %union.rtunion_def]*, !dbg !7638
  %arrayidx35 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld34, i64 0, i64 4, !dbg !7638
  %rt_int = bitcast %union.rtunion_def* %arrayidx35 to i32*, !dbg !7638
  %27 = load i32, i32* %rt_int, align 8, !dbg !7639
  %dec = add nsw i32 %27, -1, !dbg !7639
  store i32 %dec, i32* %rt_int, align 8, !dbg !7639
  %28 = load %struct.rtx_def*, %struct.rtx_def** %new_label, align 8, !dbg !7640
  %u36 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1, !dbg !7640
  %fld37 = bitcast %union.u* %u36 to [1 x %union.rtunion_def]*, !dbg !7640
  %arrayidx38 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld37, i64 0, i64 4, !dbg !7640
  %rt_int39 = bitcast %union.rtunion_def* %arrayidx38 to i32*, !dbg !7640
  %29 = load i32, i32* %rt_int39, align 8, !dbg !7641
  %inc = add nsw i32 %29, 1, !dbg !7641
  store i32 %inc, i32* %rt_int39, align 8, !dbg !7641
  br label %if.end40, !dbg !7642

if.end40:                                         ; preds = %if.then28, %for.body
  br label %for.inc, !dbg !7631

for.inc:                                          ; preds = %if.end40
  %30 = load i32, i32* %j, align 4, !dbg !7643
  %dec41 = add nsw i32 %30, -1, !dbg !7643
  store i32 %dec41, i32* %j, align 4, !dbg !7643
  br label %for.cond, !dbg !7644, !llvm.loop !7645

for.end:                                          ; preds = %for.cond
  %31 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7647
  %32 = bitcast %struct.rtx_def* %31 to i32*, !dbg !7647
  %bf.load42 = load i32, i32* %32, align 8, !dbg !7647
  %bf.clear43 = and i32 %bf.load42, 65535, !dbg !7647
  %cmp44 = icmp eq i32 %bf.clear43, 8, !dbg !7647
  br i1 %cmp44, label %cond.true, label %lor.lhs.false, !dbg !7647

lor.lhs.false:                                    ; preds = %for.end
  %33 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7647
  %34 = bitcast %struct.rtx_def* %33 to i32*, !dbg !7647
  %bf.load45 = load i32, i32* %34, align 8, !dbg !7647
  %bf.clear46 = and i32 %bf.load45, 65535, !dbg !7647
  %cmp47 = icmp eq i32 %bf.clear46, 7, !dbg !7647
  br i1 %cmp47, label %cond.true, label %lor.lhs.false48, !dbg !7647

lor.lhs.false48:                                  ; preds = %lor.lhs.false
  %35 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7647
  %36 = bitcast %struct.rtx_def* %35 to i32*, !dbg !7647
  %bf.load49 = load i32, i32* %36, align 8, !dbg !7647
  %bf.clear50 = and i32 %bf.load49, 65535, !dbg !7647
  %cmp51 = icmp eq i32 %bf.clear50, 9, !dbg !7647
  br i1 %cmp51, label %cond.true, label %lor.lhs.false52, !dbg !7647

lor.lhs.false52:                                  ; preds = %lor.lhs.false48
  %37 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7647
  %38 = bitcast %struct.rtx_def* %37 to i32*, !dbg !7647
  %bf.load53 = load i32, i32* %38, align 8, !dbg !7647
  %bf.clear54 = and i32 %bf.load53, 65535, !dbg !7647
  %cmp55 = icmp eq i32 %bf.clear54, 10, !dbg !7647
  br i1 %cmp55, label %cond.true, label %cond.false73, !dbg !7647

cond.true:                                        ; preds = %lor.lhs.false52, %lor.lhs.false48, %lor.lhs.false, %for.end
  %39 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7647
  %u56 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1, !dbg !7647
  %fld57 = bitcast %union.u* %u56 to [1 x %union.rtunion_def]*, !dbg !7647
  %arrayidx58 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld57, i64 0, i64 5, !dbg !7647
  %rt_rtx59 = bitcast %union.rtunion_def* %arrayidx58 to %struct.rtx_def**, !dbg !7647
  %40 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx59, align 8, !dbg !7647
  %41 = bitcast %struct.rtx_def* %40 to i32*, !dbg !7647
  %bf.load60 = load i32, i32* %41, align 8, !dbg !7647
  %bf.clear61 = and i32 %bf.load60, 65535, !dbg !7647
  %cmp62 = icmp eq i32 %bf.clear61, 23, !dbg !7647
  br i1 %cmp62, label %cond.true63, label %cond.false, !dbg !7647

cond.true63:                                      ; preds = %cond.true
  %42 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7647
  %u64 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1, !dbg !7647
  %fld65 = bitcast %union.u* %u64 to [1 x %union.rtunion_def]*, !dbg !7647
  %arrayidx66 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld65, i64 0, i64 5, !dbg !7647
  %rt_rtx67 = bitcast %union.rtunion_def* %arrayidx66 to %struct.rtx_def**, !dbg !7647
  %43 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx67, align 8, !dbg !7647
  br label %cond.end, !dbg !7647

cond.false:                                       ; preds = %cond.true
  %44 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7647
  %45 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7647
  %u68 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1, !dbg !7647
  %fld69 = bitcast %union.u* %u68 to [1 x %union.rtunion_def]*, !dbg !7647
  %arrayidx70 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld69, i64 0, i64 5, !dbg !7647
  %rt_rtx71 = bitcast %union.rtunion_def* %arrayidx70 to %struct.rtx_def**, !dbg !7647
  %46 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx71, align 8, !dbg !7647
  %call72 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %44, %struct.rtx_def* %46), !dbg !7647
  br label %cond.end, !dbg !7647

cond.end:                                         ; preds = %cond.false, %cond.true63
  %cond = phi %struct.rtx_def* [ %43, %cond.true63 ], [ %call72, %cond.false ], !dbg !7647
  br label %cond.end74, !dbg !7647

cond.false73:                                     ; preds = %lor.lhs.false52
  br label %cond.end74, !dbg !7647

cond.end74:                                       ; preds = %cond.false73, %cond.end
  %cond75 = phi %struct.rtx_def* [ %cond, %cond.end ], [ null, %cond.false73 ], !dbg !7647
  store %struct.rtx_def* %cond75, %struct.rtx_def** %tmp, align 8, !dbg !7649
  %cmp76 = icmp ne %struct.rtx_def* %cond75, null, !dbg !7650
  br i1 %cmp76, label %land.lhs.true, label %if.end136, !dbg !7651

land.lhs.true:                                    ; preds = %cond.end74
  %47 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !7652
  %u77 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %47, i32 0, i32 1, !dbg !7652
  %fld78 = bitcast %union.u* %u77 to [1 x %union.rtunion_def]*, !dbg !7652
  %arrayidx79 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld78, i64 0, i64 0, !dbg !7652
  %rt_rtx80 = bitcast %union.rtunion_def* %arrayidx79 to %struct.rtx_def**, !dbg !7652
  %48 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx80, align 8, !dbg !7652
  %49 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 0), align 16, !dbg !7653
  %cmp81 = icmp eq %struct.rtx_def* %48, %49, !dbg !7654
  br i1 %cmp81, label %land.lhs.true82, label %if.end136, !dbg !7655

land.lhs.true82:                                  ; preds = %land.lhs.true
  %50 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !7656
  %u83 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %50, i32 0, i32 1, !dbg !7656
  %fld84 = bitcast %union.u* %u83 to [1 x %union.rtunion_def]*, !dbg !7656
  %arrayidx85 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld84, i64 0, i64 1, !dbg !7656
  %rt_rtx86 = bitcast %union.rtunion_def* %arrayidx85 to %struct.rtx_def**, !dbg !7656
  %51 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx86, align 8, !dbg !7656
  %52 = bitcast %struct.rtx_def* %51 to i32*, !dbg !7656
  %bf.load87 = load i32, i32* %52, align 8, !dbg !7656
  %bf.clear88 = and i32 %bf.load87, 65535, !dbg !7656
  %cmp89 = icmp eq i32 %bf.clear88, 47, !dbg !7657
  br i1 %cmp89, label %land.lhs.true90, label %if.end136, !dbg !7658

land.lhs.true90:                                  ; preds = %land.lhs.true82
  %53 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !7659
  %u91 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %53, i32 0, i32 1, !dbg !7659
  %fld92 = bitcast %union.u* %u91 to [1 x %union.rtunion_def]*, !dbg !7659
  %arrayidx93 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld92, i64 0, i64 1, !dbg !7659
  %rt_rtx94 = bitcast %union.rtunion_def* %arrayidx93 to %struct.rtx_def**, !dbg !7659
  %54 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx94, align 8, !dbg !7659
  %u95 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %54, i32 0, i32 1, !dbg !7659
  %fld96 = bitcast %union.u* %u95 to [1 x %union.rtunion_def]*, !dbg !7659
  %arrayidx97 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld96, i64 0, i64 2, !dbg !7659
  %rt_rtx98 = bitcast %union.rtunion_def* %arrayidx97 to %struct.rtx_def**, !dbg !7659
  %55 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx98, align 8, !dbg !7659
  %56 = bitcast %struct.rtx_def* %55 to i32*, !dbg !7659
  %bf.load99 = load i32, i32* %56, align 8, !dbg !7659
  %bf.clear100 = and i32 %bf.load99, 65535, !dbg !7659
  %cmp101 = icmp eq i32 %bf.clear100, 44, !dbg !7660
  br i1 %cmp101, label %land.lhs.true102, label %if.end136, !dbg !7661

land.lhs.true102:                                 ; preds = %land.lhs.true90
  %57 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !7662
  %u103 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %57, i32 0, i32 1, !dbg !7662
  %fld104 = bitcast %union.u* %u103 to [1 x %union.rtunion_def]*, !dbg !7662
  %arrayidx105 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld104, i64 0, i64 1, !dbg !7662
  %rt_rtx106 = bitcast %union.rtunion_def* %arrayidx105 to %struct.rtx_def**, !dbg !7662
  %58 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx106, align 8, !dbg !7662
  %u107 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %58, i32 0, i32 1, !dbg !7662
  %fld108 = bitcast %union.u* %u107 to [1 x %union.rtunion_def]*, !dbg !7662
  %arrayidx109 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld108, i64 0, i64 2, !dbg !7662
  %rt_rtx110 = bitcast %union.rtunion_def* %arrayidx109 to %struct.rtx_def**, !dbg !7662
  %59 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx110, align 8, !dbg !7662
  %u111 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %59, i32 0, i32 1, !dbg !7662
  %fld112 = bitcast %union.u* %u111 to [1 x %union.rtunion_def]*, !dbg !7662
  %arrayidx113 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld112, i64 0, i64 0, !dbg !7662
  %rt_rtx114 = bitcast %union.rtunion_def* %arrayidx113 to %struct.rtx_def**, !dbg !7662
  %60 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx114, align 8, !dbg !7662
  %61 = load %struct.rtx_def*, %struct.rtx_def** %old_label.addr, align 8, !dbg !7663
  %cmp115 = icmp eq %struct.rtx_def* %60, %61, !dbg !7664
  br i1 %cmp115, label %if.then116, label %if.end136, !dbg !7665

if.then116:                                       ; preds = %land.lhs.true102
  %62 = load %struct.rtx_def*, %struct.rtx_def** %new_label, align 8, !dbg !7666
  %call117 = call %struct.rtx_def* @gen_rtx_fmt_u_stat(i32 44, i32 16, %struct.rtx_def* %62), !dbg !7666
  %63 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !7668
  %u118 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %63, i32 0, i32 1, !dbg !7668
  %fld119 = bitcast %union.u* %u118 to [1 x %union.rtunion_def]*, !dbg !7668
  %arrayidx120 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld119, i64 0, i64 1, !dbg !7668
  %rt_rtx121 = bitcast %union.rtunion_def* %arrayidx120 to %struct.rtx_def**, !dbg !7668
  %64 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx121, align 8, !dbg !7668
  %u122 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %64, i32 0, i32 1, !dbg !7668
  %fld123 = bitcast %union.u* %u122 to [1 x %union.rtunion_def]*, !dbg !7668
  %arrayidx124 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld123, i64 0, i64 2, !dbg !7668
  %rt_rtx125 = bitcast %union.rtunion_def* %arrayidx124 to %struct.rtx_def**, !dbg !7668
  store %struct.rtx_def* %call117, %struct.rtx_def** %rt_rtx125, align 8, !dbg !7669
  %65 = load %struct.rtx_def*, %struct.rtx_def** %old_label.addr, align 8, !dbg !7670
  %u126 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %65, i32 0, i32 1, !dbg !7670
  %fld127 = bitcast %union.u* %u126 to [1 x %union.rtunion_def]*, !dbg !7670
  %arrayidx128 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld127, i64 0, i64 4, !dbg !7670
  %rt_int129 = bitcast %union.rtunion_def* %arrayidx128 to i32*, !dbg !7670
  %66 = load i32, i32* %rt_int129, align 8, !dbg !7671
  %dec130 = add nsw i32 %66, -1, !dbg !7671
  store i32 %dec130, i32* %rt_int129, align 8, !dbg !7671
  %67 = load %struct.rtx_def*, %struct.rtx_def** %new_label, align 8, !dbg !7672
  %u131 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %67, i32 0, i32 1, !dbg !7672
  %fld132 = bitcast %union.u* %u131 to [1 x %union.rtunion_def]*, !dbg !7672
  %arrayidx133 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld132, i64 0, i64 4, !dbg !7672
  %rt_int134 = bitcast %union.rtunion_def* %arrayidx133 to i32*, !dbg !7672
  %68 = load i32, i32* %rt_int134, align 8, !dbg !7673
  %inc135 = add nsw i32 %68, 1, !dbg !7673
  store i32 %inc135, i32* %rt_int134, align 8, !dbg !7673
  br label %if.end136, !dbg !7674

if.end136:                                        ; preds = %if.then116, %land.lhs.true102, %land.lhs.true90, %land.lhs.true82, %land.lhs.true, %cond.end74
  br label %if.end273, !dbg !7675

if.else137:                                       ; preds = %entry
  %69 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7676
  %u138 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %69, i32 0, i32 1, !dbg !7676
  %fld139 = bitcast %union.u* %u138 to [1 x %union.rtunion_def]*, !dbg !7676
  %arrayidx140 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld139, i64 0, i64 5, !dbg !7676
  %rt_rtx141 = bitcast %union.rtunion_def* %arrayidx140 to %struct.rtx_def**, !dbg !7676
  %70 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx141, align 8, !dbg !7676
  %call142 = call %struct.rtx_def* @extract_asm_operands(%struct.rtx_def* %70), !dbg !7678
  store %struct.rtx_def* %call142, %struct.rtx_def** %tmp, align 8, !dbg !7679
  %cmp143 = icmp ne %struct.rtx_def* %call142, null, !dbg !7680
  br i1 %cmp143, label %if.then144, label %if.else233, !dbg !7681

if.then144:                                       ; preds = %if.else137
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7682, metadata !DIExpression()), !dbg !7684
  call void @llvm.dbg.declare(metadata i32* %n, metadata !7685, metadata !DIExpression()), !dbg !7686
  %71 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !7687
  %u145 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %71, i32 0, i32 1, !dbg !7687
  %fld146 = bitcast %union.u* %u145 to [1 x %union.rtunion_def]*, !dbg !7687
  %arrayidx147 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld146, i64 0, i64 5, !dbg !7687
  %rt_rtvec148 = bitcast %union.rtunion_def* %arrayidx147 to %struct.rtvec_def**, !dbg !7687
  %72 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec148, align 8, !dbg !7687
  %num_elem149 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %72, i32 0, i32 0, !dbg !7687
  %73 = load i32, i32* %num_elem149, align 8, !dbg !7687
  store i32 %73, i32* %n, align 4, !dbg !7686
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %new_label150, metadata !7688, metadata !DIExpression()), !dbg !7689
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !7690, metadata !DIExpression()), !dbg !7691
  %74 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb.addr, align 8, !dbg !7692
  %75 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7694
  %add.ptr151 = getelementptr inbounds %struct.function, %struct.function* %75, i64 0, !dbg !7694
  %cfg152 = getelementptr inbounds %struct.function, %struct.function* %add.ptr151, i32 0, i32 1, !dbg !7694
  %76 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg152, align 8, !dbg !7694
  %x_exit_block_ptr153 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %76, i32 0, i32 1, !dbg !7694
  %77 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr153, align 8, !dbg !7694
  %cmp154 = icmp eq %struct.basic_block_def* %74, %77, !dbg !7695
  br i1 %cmp154, label %if.then155, label %if.end156, !dbg !7696

if.then155:                                       ; preds = %if.then144
  store i8 0, i8* %retval, align 1, !dbg !7697
  br label %return, !dbg !7697

if.end156:                                        ; preds = %if.then144
  %78 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb.addr, align 8, !dbg !7698
  %call157 = call %struct.rtx_def* @block_label(%struct.basic_block_def* %78), !dbg !7699
  store %struct.rtx_def* %call157, %struct.rtx_def** %new_label150, align 8, !dbg !7700
  store i32 0, i32* %i, align 4, !dbg !7701
  br label %for.cond158, !dbg !7703

for.cond158:                                      ; preds = %for.inc200, %if.end156
  %79 = load i32, i32* %i, align 4, !dbg !7704
  %80 = load i32, i32* %n, align 4, !dbg !7706
  %cmp159 = icmp slt i32 %79, %80, !dbg !7707
  br i1 %cmp159, label %for.body160, label %for.end202, !dbg !7708

for.body160:                                      ; preds = %for.cond158
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %old_ref, metadata !7709, metadata !DIExpression()), !dbg !7711
  %81 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !7712
  %u161 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %81, i32 0, i32 1, !dbg !7712
  %fld162 = bitcast %union.u* %u161 to [1 x %union.rtunion_def]*, !dbg !7712
  %arrayidx163 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld162, i64 0, i64 5, !dbg !7712
  %rt_rtvec164 = bitcast %union.rtunion_def* %arrayidx163 to %struct.rtvec_def**, !dbg !7712
  %82 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec164, align 8, !dbg !7712
  %elem165 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %82, i32 0, i32 1, !dbg !7712
  %83 = load i32, i32* %i, align 4, !dbg !7712
  %idxprom166 = sext i32 %83 to i64, !dbg !7712
  %arrayidx167 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem165, i64 0, i64 %idxprom166, !dbg !7712
  %84 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx167, align 8, !dbg !7712
  store %struct.rtx_def* %84, %struct.rtx_def** %old_ref, align 8, !dbg !7711
  %85 = load %struct.rtx_def*, %struct.rtx_def** %old_ref, align 8, !dbg !7713
  %86 = bitcast %struct.rtx_def* %85 to i32*, !dbg !7713
  %bf.load168 = load i32, i32* %86, align 8, !dbg !7713
  %bf.clear169 = and i32 %bf.load168, 65535, !dbg !7713
  %cmp170 = icmp eq i32 %bf.clear169, 44, !dbg !7713
  br i1 %cmp170, label %cond.false172, label %cond.true171, !dbg !7713

cond.true171:                                     ; preds = %for.body160
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 971, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7713
  br label %cond.end173, !dbg !7713

cond.false172:                                    ; preds = %for.body160
  br label %cond.end173, !dbg !7713

cond.end173:                                      ; preds = %cond.false172, %cond.true171
  %cond174 = phi i32 [ 0, %cond.true171 ], [ 0, %cond.false172 ], !dbg !7713
  %87 = load %struct.rtx_def*, %struct.rtx_def** %old_ref, align 8, !dbg !7714
  %u175 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %87, i32 0, i32 1, !dbg !7714
  %fld176 = bitcast %union.u* %u175 to [1 x %union.rtunion_def]*, !dbg !7714
  %arrayidx177 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld176, i64 0, i64 0, !dbg !7714
  %rt_rtx178 = bitcast %union.rtunion_def* %arrayidx177 to %struct.rtx_def**, !dbg !7714
  %88 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx178, align 8, !dbg !7714
  %89 = load %struct.rtx_def*, %struct.rtx_def** %old_label.addr, align 8, !dbg !7716
  %cmp179 = icmp eq %struct.rtx_def* %88, %89, !dbg !7717
  br i1 %cmp179, label %if.then180, label %if.end199, !dbg !7718

if.then180:                                       ; preds = %cond.end173
  %90 = load %struct.rtx_def*, %struct.rtx_def** %new_label150, align 8, !dbg !7719
  %call181 = call %struct.rtx_def* @gen_rtx_fmt_u_stat(i32 44, i32 16, %struct.rtx_def* %90), !dbg !7719
  %91 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !7721
  %u182 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %91, i32 0, i32 1, !dbg !7721
  %fld183 = bitcast %union.u* %u182 to [1 x %union.rtunion_def]*, !dbg !7721
  %arrayidx184 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld183, i64 0, i64 5, !dbg !7721
  %rt_rtvec185 = bitcast %union.rtunion_def* %arrayidx184 to %struct.rtvec_def**, !dbg !7721
  %92 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec185, align 8, !dbg !7721
  %elem186 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %92, i32 0, i32 1, !dbg !7721
  %93 = load i32, i32* %i, align 4, !dbg !7721
  %idxprom187 = sext i32 %93 to i64, !dbg !7721
  %arrayidx188 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem186, i64 0, i64 %idxprom187, !dbg !7721
  store %struct.rtx_def* %call181, %struct.rtx_def** %arrayidx188, align 8, !dbg !7722
  %94 = load %struct.rtx_def*, %struct.rtx_def** %old_label.addr, align 8, !dbg !7723
  %u189 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %94, i32 0, i32 1, !dbg !7723
  %fld190 = bitcast %union.u* %u189 to [1 x %union.rtunion_def]*, !dbg !7723
  %arrayidx191 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld190, i64 0, i64 4, !dbg !7723
  %rt_int192 = bitcast %union.rtunion_def* %arrayidx191 to i32*, !dbg !7723
  %95 = load i32, i32* %rt_int192, align 8, !dbg !7724
  %dec193 = add nsw i32 %95, -1, !dbg !7724
  store i32 %dec193, i32* %rt_int192, align 8, !dbg !7724
  %96 = load %struct.rtx_def*, %struct.rtx_def** %new_label150, align 8, !dbg !7725
  %u194 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %96, i32 0, i32 1, !dbg !7725
  %fld195 = bitcast %union.u* %u194 to [1 x %union.rtunion_def]*, !dbg !7725
  %arrayidx196 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld195, i64 0, i64 4, !dbg !7725
  %rt_int197 = bitcast %union.rtunion_def* %arrayidx196 to i32*, !dbg !7725
  %97 = load i32, i32* %rt_int197, align 8, !dbg !7726
  %inc198 = add nsw i32 %97, 1, !dbg !7726
  store i32 %inc198, i32* %rt_int197, align 8, !dbg !7726
  br label %if.end199, !dbg !7727

if.end199:                                        ; preds = %if.then180, %cond.end173
  br label %for.inc200, !dbg !7728

for.inc200:                                       ; preds = %if.end199
  %98 = load i32, i32* %i, align 4, !dbg !7729
  %inc201 = add nsw i32 %98, 1, !dbg !7729
  store i32 %inc201, i32* %i, align 4, !dbg !7729
  br label %for.cond158, !dbg !7730, !llvm.loop !7731

for.end202:                                       ; preds = %for.cond158
  %99 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7733
  %u203 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %99, i32 0, i32 1, !dbg !7733
  %fld204 = bitcast %union.u* %u203 to [1 x %union.rtunion_def]*, !dbg !7733
  %arrayidx205 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld204, i64 0, i64 8, !dbg !7733
  %rt_rtx206 = bitcast %union.rtunion_def* %arrayidx205 to %struct.rtx_def**, !dbg !7733
  %100 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx206, align 8, !dbg !7733
  %101 = load %struct.rtx_def*, %struct.rtx_def** %old_label.addr, align 8, !dbg !7735
  %cmp207 = icmp eq %struct.rtx_def* %100, %101, !dbg !7736
  br i1 %cmp207, label %if.then208, label %if.else217, !dbg !7737

if.then208:                                       ; preds = %for.end202
  %102 = load %struct.rtx_def*, %struct.rtx_def** %new_label150, align 8, !dbg !7738
  %103 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7740
  %u209 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %103, i32 0, i32 1, !dbg !7740
  %fld210 = bitcast %union.u* %u209 to [1 x %union.rtunion_def]*, !dbg !7740
  %arrayidx211 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld210, i64 0, i64 8, !dbg !7740
  %rt_rtx212 = bitcast %union.rtunion_def* %arrayidx211 to %struct.rtx_def**, !dbg !7740
  store %struct.rtx_def* %102, %struct.rtx_def** %rt_rtx212, align 8, !dbg !7741
  %104 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7742
  %105 = load %struct.rtx_def*, %struct.rtx_def** %new_label150, align 8, !dbg !7743
  %call213 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %104, i32 9, %struct.rtx_def* %105), !dbg !7744
  store %struct.rtx_def* %call213, %struct.rtx_def** %note, align 8, !dbg !7745
  %106 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !7746
  %tobool214 = icmp ne %struct.rtx_def* %106, null, !dbg !7746
  br i1 %tobool214, label %if.then215, label %if.end216, !dbg !7748

if.then215:                                       ; preds = %if.then208
  %107 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7749
  %108 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !7750
  call void @remove_note(%struct.rtx_def* %107, %struct.rtx_def* %108), !dbg !7751
  br label %if.end216, !dbg !7751

if.end216:                                        ; preds = %if.then215, %if.then208
  br label %if.end232, !dbg !7752

if.else217:                                       ; preds = %for.end202
  %109 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7753
  %110 = load %struct.rtx_def*, %struct.rtx_def** %old_label.addr, align 8, !dbg !7755
  %call218 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %109, i32 9, %struct.rtx_def* %110), !dbg !7756
  store %struct.rtx_def* %call218, %struct.rtx_def** %note, align 8, !dbg !7757
  %111 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !7758
  %tobool219 = icmp ne %struct.rtx_def* %111, null, !dbg !7758
  br i1 %tobool219, label %if.then220, label %if.end221, !dbg !7760

if.then220:                                       ; preds = %if.else217
  %112 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7761
  %113 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !7762
  call void @remove_note(%struct.rtx_def* %112, %struct.rtx_def* %113), !dbg !7763
  br label %if.end221, !dbg !7763

if.end221:                                        ; preds = %if.then220, %if.else217
  %114 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7764
  %u222 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %114, i32 0, i32 1, !dbg !7764
  %fld223 = bitcast %union.u* %u222 to [1 x %union.rtunion_def]*, !dbg !7764
  %arrayidx224 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld223, i64 0, i64 8, !dbg !7764
  %rt_rtx225 = bitcast %union.rtunion_def* %arrayidx224 to %struct.rtx_def**, !dbg !7764
  %115 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx225, align 8, !dbg !7764
  %116 = load %struct.rtx_def*, %struct.rtx_def** %new_label150, align 8, !dbg !7766
  %cmp226 = icmp ne %struct.rtx_def* %115, %116, !dbg !7767
  br i1 %cmp226, label %land.lhs.true227, label %if.end231, !dbg !7768

land.lhs.true227:                                 ; preds = %if.end221
  %117 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7769
  %118 = load %struct.rtx_def*, %struct.rtx_def** %new_label150, align 8, !dbg !7770
  %call228 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %117, i32 9, %struct.rtx_def* %118), !dbg !7771
  %tobool229 = icmp ne %struct.rtx_def* %call228, null, !dbg !7771
  br i1 %tobool229, label %if.end231, label %if.then230, !dbg !7772

if.then230:                                       ; preds = %land.lhs.true227
  %119 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7773
  %120 = load %struct.rtx_def*, %struct.rtx_def** %new_label150, align 8, !dbg !7774
  call void @add_reg_note(%struct.rtx_def* %119, i32 9, %struct.rtx_def* %120), !dbg !7775
  br label %if.end231, !dbg !7775

if.end231:                                        ; preds = %if.then230, %land.lhs.true227, %if.end221
  br label %if.end232

if.end232:                                        ; preds = %if.end231, %if.end216
  br label %if.end272, !dbg !7776

if.else233:                                       ; preds = %if.else137
  %121 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7777
  %call234 = call i32 @computed_jump_p(%struct.rtx_def* %121), !dbg !7780
  %tobool235 = icmp ne i32 %call234, 0, !dbg !7780
  br i1 %tobool235, label %if.then239, label %lor.lhs.false236, !dbg !7781

lor.lhs.false236:                                 ; preds = %if.else233
  %122 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7782
  %call237 = call i32 @returnjump_p(%struct.rtx_def* %122), !dbg !7783
  %tobool238 = icmp ne i32 %call237, 0, !dbg !7783
  br i1 %tobool238, label %if.then239, label %if.end240, !dbg !7784

if.then239:                                       ; preds = %lor.lhs.false236, %if.else233
  store i8 0, i8* %retval, align 1, !dbg !7785
  br label %return, !dbg !7785

if.end240:                                        ; preds = %lor.lhs.false236
  %123 = load i32, i32* @currently_expanding_to_rtl, align 4, !dbg !7786
  %tobool241 = icmp ne i32 %123, 0, !dbg !7786
  br i1 %tobool241, label %lor.lhs.false242, label %if.then248, !dbg !7788

lor.lhs.false242:                                 ; preds = %if.end240
  %124 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7789
  %u243 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %124, i32 0, i32 1, !dbg !7789
  %fld244 = bitcast %union.u* %u243 to [1 x %union.rtunion_def]*, !dbg !7789
  %arrayidx245 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld244, i64 0, i64 8, !dbg !7789
  %rt_rtx246 = bitcast %union.rtunion_def* %arrayidx245 to %struct.rtx_def**, !dbg !7789
  %125 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx246, align 8, !dbg !7789
  %126 = load %struct.rtx_def*, %struct.rtx_def** %old_label.addr, align 8, !dbg !7790
  %cmp247 = icmp eq %struct.rtx_def* %125, %126, !dbg !7791
  br i1 %cmp247, label %if.then248, label %if.end271, !dbg !7792

if.then248:                                       ; preds = %lor.lhs.false242, %if.end240
  %127 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7793
  %u249 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %127, i32 0, i32 1, !dbg !7793
  %fld250 = bitcast %union.u* %u249 to [1 x %union.rtunion_def]*, !dbg !7793
  %arrayidx251 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld250, i64 0, i64 8, !dbg !7793
  %rt_rtx252 = bitcast %union.rtunion_def* %arrayidx251 to %struct.rtx_def**, !dbg !7793
  %128 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx252, align 8, !dbg !7793
  %129 = load %struct.rtx_def*, %struct.rtx_def** %old_label.addr, align 8, !dbg !7793
  %cmp253 = icmp eq %struct.rtx_def* %128, %129, !dbg !7793
  br i1 %cmp253, label %cond.false255, label %cond.true254, !dbg !7793

cond.true254:                                     ; preds = %if.then248
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 1011, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7793
  br label %cond.end256, !dbg !7793

cond.false255:                                    ; preds = %if.then248
  br label %cond.end256, !dbg !7793

cond.end256:                                      ; preds = %cond.false255, %cond.true254
  %cond257 = phi i32 [ 0, %cond.true254 ], [ 0, %cond.false255 ], !dbg !7793
  %130 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7795
  %131 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb.addr, align 8, !dbg !7797
  %call258 = call %struct.rtx_def* @block_label(%struct.basic_block_def* %131), !dbg !7798
  %call259 = call i32 @redirect_jump(%struct.rtx_def* %130, %struct.rtx_def* %call258, i32 0), !dbg !7799
  %tobool260 = icmp ne i32 %call259, 0, !dbg !7799
  br i1 %tobool260, label %if.end270, label %if.then261, !dbg !7800

if.then261:                                       ; preds = %cond.end256
  %132 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb.addr, align 8, !dbg !7801
  %133 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7801
  %add.ptr262 = getelementptr inbounds %struct.function, %struct.function* %133, i64 0, !dbg !7801
  %cfg263 = getelementptr inbounds %struct.function, %struct.function* %add.ptr262, i32 0, i32 1, !dbg !7801
  %134 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg263, align 8, !dbg !7801
  %x_exit_block_ptr264 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %134, i32 0, i32 1, !dbg !7801
  %135 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr264, align 8, !dbg !7801
  %cmp265 = icmp eq %struct.basic_block_def* %132, %135, !dbg !7801
  br i1 %cmp265, label %cond.false267, label %cond.true266, !dbg !7801

cond.true266:                                     ; preds = %if.then261
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 1018, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7801
  br label %cond.end268, !dbg !7801

cond.false267:                                    ; preds = %if.then261
  br label %cond.end268, !dbg !7801

cond.end268:                                      ; preds = %cond.false267, %cond.true266
  %cond269 = phi i32 [ 0, %cond.true266 ], [ 0, %cond.false267 ], !dbg !7801
  store i8 0, i8* %retval, align 1, !dbg !7803
  br label %return, !dbg !7803

if.end270:                                        ; preds = %cond.end256
  br label %if.end271, !dbg !7804

if.end271:                                        ; preds = %if.end270, %lor.lhs.false242
  br label %if.end272

if.end272:                                        ; preds = %if.end271, %if.end232
  br label %if.end273

if.end273:                                        ; preds = %if.end272, %if.end136
  store i8 1, i8* %retval, align 1, !dbg !7805
  br label %return, !dbg !7805

return:                                           ; preds = %if.end273, %cond.end268, %if.then239, %if.then155, %if.then2
  %136 = load i8, i8* %retval, align 1, !dbg !7806
  ret i8 %136, !dbg !7806
}

declare dso_local %struct.rtx_def* @gen_rtx_fmt_u_stat(i32, i32, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @extract_asm_operands(%struct.rtx_def*) #2

declare dso_local i32 @computed_jump_p(%struct.rtx_def*) #2

declare dso_local %struct.edge_def* @redirect_edge_and_branch(%struct.edge_def*, %struct.basic_block_def*) #2

declare dso_local void @df_bb_delete(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @first_insn_after_basic_block_note(%struct.basic_block_def* %block) #0 !dbg !7807 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %block.addr = alloca %struct.basic_block_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def* %block, %struct.basic_block_def** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %block.addr, metadata !7808, metadata !DIExpression()), !dbg !7809
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !7810, metadata !DIExpression()), !dbg !7811
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !7812
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 7, !dbg !7812
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !7812
  %1 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !7812
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %1, i32 0, i32 0, !dbg !7812
  %2 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !7812
  store %struct.rtx_def* %2, %struct.rtx_def** %insn, align 8, !dbg !7813
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7814
  %cmp = icmp eq %struct.rtx_def* %3, null, !dbg !7816
  br i1 %cmp, label %if.then, label %if.end, !dbg !7817

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !7818
  br label %return, !dbg !7818

if.end:                                           ; preds = %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7819
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !7819
  %bf.load = load i32, i32* %5, align 8, !dbg !7819
  %bf.clear = and i32 %bf.load, 65535, !dbg !7819
  %cmp1 = icmp eq i32 %bf.clear, 12, !dbg !7819
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !7821

if.then2:                                         ; preds = %if.end
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7822
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !7822
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7822
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !7822
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !7822
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7822
  store %struct.rtx_def* %7, %struct.rtx_def** %insn, align 8, !dbg !7823
  br label %if.end3, !dbg !7824

if.end3:                                          ; preds = %if.then2, %if.end
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7825
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !7825
  %bf.load4 = load i32, i32* %9, align 8, !dbg !7825
  %bf.clear5 = and i32 %bf.load4, 65535, !dbg !7825
  %cmp6 = icmp eq i32 %bf.clear5, 13, !dbg !7825
  br i1 %cmp6, label %land.lhs.true, label %cond.true, !dbg !7825

land.lhs.true:                                    ; preds = %if.end3
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7825
  %u7 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !7825
  %fld8 = bitcast %union.u* %u7 to [1 x %union.rtunion_def]*, !dbg !7825
  %arrayidx9 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld8, i64 0, i64 5, !dbg !7825
  %rt_int = bitcast %union.rtunion_def* %arrayidx9 to i32*, !dbg !7825
  %11 = load i32, i32* %rt_int, align 8, !dbg !7825
  %cmp10 = icmp eq i32 %11, 10, !dbg !7825
  br i1 %cmp10, label %cond.false, label %cond.true, !dbg !7825

cond.true:                                        ; preds = %land.lhs.true, %if.end3
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 513, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7825
  br label %cond.end, !dbg !7825

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !7825

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7825
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7826
  %u11 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !7826
  %fld12 = bitcast %union.u* %u11 to [1 x %union.rtunion_def]*, !dbg !7826
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i64 0, i64 2, !dbg !7826
  %rt_rtx14 = bitcast %union.rtunion_def* %arrayidx13 to %struct.rtx_def**, !dbg !7826
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx14, align 8, !dbg !7826
  store %struct.rtx_def* %13, %struct.rtx_def** %retval, align 8, !dbg !7827
  br label %return, !dbg !7827

return:                                           ; preds = %cond.end, %if.then
  %14 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !7828
  ret %struct.rtx_def* %14, !dbg !7828
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @single_succ(%struct.basic_block_def* %bb) #0 !dbg !7829 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !7832, metadata !DIExpression()), !dbg !7833
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7834
  %call = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %0), !dbg !7835
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call, i32 0, i32 1, !dbg !7836
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !7836
  ret %struct.basic_block_def* %1, !dbg !7837
}

declare dso_local i32 @any_uncondjump_p(%struct.rtx_def*) #2

declare dso_local zeroext i8 @keep_with_call_p(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @need_fake_edge_p(%struct.rtx_def* %insn) #0 !dbg !7838 {
entry:
  %retval = alloca i8, align 1
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !7841, metadata !DIExpression()), !dbg !7842
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7843
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !7843
  %bf.load = load i32, i32* %1, align 8, !dbg !7843
  %bf.clear = and i32 %bf.load, 65535, !dbg !7843
  %cmp = icmp eq i32 %bf.clear, 8, !dbg !7843
  br i1 %cmp, label %if.end, label %lor.lhs.false, !dbg !7843

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7843
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !7843
  %bf.load1 = load i32, i32* %3, align 8, !dbg !7843
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !7843
  %cmp3 = icmp eq i32 %bf.clear2, 7, !dbg !7843
  br i1 %cmp3, label %if.end, label %lor.lhs.false4, !dbg !7843

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7843
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !7843
  %bf.load5 = load i32, i32* %5, align 8, !dbg !7843
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !7843
  %cmp7 = icmp eq i32 %bf.clear6, 9, !dbg !7843
  br i1 %cmp7, label %if.end, label %lor.lhs.false8, !dbg !7843

lor.lhs.false8:                                   ; preds = %lor.lhs.false4
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7843
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !7843
  %bf.load9 = load i32, i32* %7, align 8, !dbg !7843
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !7843
  %cmp11 = icmp eq i32 %bf.clear10, 10, !dbg !7843
  br i1 %cmp11, label %if.end, label %if.then, !dbg !7845

if.then:                                          ; preds = %lor.lhs.false8
  store i8 0, i8* %retval, align 1, !dbg !7846
  br label %return, !dbg !7846

if.end:                                           ; preds = %lor.lhs.false8, %lor.lhs.false4, %lor.lhs.false, %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7847
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !7847
  %bf.load12 = load i32, i32* %9, align 8, !dbg !7847
  %bf.clear13 = and i32 %bf.load12, 65535, !dbg !7847
  %cmp14 = icmp eq i32 %bf.clear13, 10, !dbg !7847
  br i1 %cmp14, label %land.lhs.true, label %if.end29, !dbg !7849

land.lhs.true:                                    ; preds = %if.end
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7850
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !7850
  %bf.load15 = load i32, i32* %11, align 8, !dbg !7850
  %bf.lshr = lshr i32 %bf.load15, 24, !dbg !7850
  %bf.clear16 = and i32 %bf.lshr, 1, !dbg !7850
  %tobool = icmp ne i32 %bf.clear16, 0, !dbg !7850
  br i1 %tobool, label %if.end29, label %land.lhs.true17, !dbg !7851

land.lhs.true17:                                  ; preds = %land.lhs.true
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7852
  %call = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %12, i32 27, %struct.rtx_def* null), !dbg !7853
  %tobool18 = icmp ne %struct.rtx_def* %call, null, !dbg !7853
  br i1 %tobool18, label %if.end29, label %land.lhs.true19, !dbg !7854

land.lhs.true19:                                  ; preds = %land.lhs.true17
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7855
  %14 = bitcast %struct.rtx_def* %13 to i32*, !dbg !7855
  %bf.load20 = load i32, i32* %14, align 8, !dbg !7855
  %bf.lshr21 = lshr i32 %bf.load20, 26, !dbg !7855
  %bf.clear22 = and i32 %bf.lshr21, 1, !dbg !7855
  %tobool23 = icmp ne i32 %bf.clear22, 0, !dbg !7855
  br i1 %tobool23, label %if.end29, label %lor.lhs.false24, !dbg !7855

lor.lhs.false24:                                  ; preds = %land.lhs.true19
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7855
  %16 = bitcast %struct.rtx_def* %15 to i32*, !dbg !7855
  %bf.load25 = load i32, i32* %16, align 8, !dbg !7855
  %bf.lshr26 = lshr i32 %bf.load25, 31, !dbg !7855
  %tobool27 = icmp ne i32 %bf.lshr26, 0, !dbg !7855
  br i1 %tobool27, label %if.end29, label %if.then28, !dbg !7856

if.then28:                                        ; preds = %lor.lhs.false24
  store i8 1, i8* %retval, align 1, !dbg !7857
  br label %return, !dbg !7857

if.end29:                                         ; preds = %lor.lhs.false24, %land.lhs.true19, %land.lhs.true17, %land.lhs.true, %if.end
  %17 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7858
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !7858
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7858
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !7858
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !7858
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7858
  %19 = bitcast %struct.rtx_def* %18 to i32*, !dbg !7858
  %bf.load30 = load i32, i32* %19, align 8, !dbg !7858
  %bf.clear31 = and i32 %bf.load30, 65535, !dbg !7858
  %cmp32 = icmp eq i32 %bf.clear31, 17, !dbg !7859
  br i1 %cmp32, label %land.lhs.true33, label %lor.lhs.false42, !dbg !7860

land.lhs.true33:                                  ; preds = %if.end29
  %20 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7861
  %u34 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1, !dbg !7861
  %fld35 = bitcast %union.u* %u34 to [1 x %union.rtunion_def]*, !dbg !7861
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld35, i64 0, i64 5, !dbg !7861
  %rt_rtx37 = bitcast %union.rtunion_def* %arrayidx36 to %struct.rtx_def**, !dbg !7861
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx37, align 8, !dbg !7861
  %22 = bitcast %struct.rtx_def* %21 to i32*, !dbg !7861
  %bf.load38 = load i32, i32* %22, align 8, !dbg !7861
  %bf.lshr39 = lshr i32 %bf.load38, 27, !dbg !7861
  %bf.clear40 = and i32 %bf.lshr39, 1, !dbg !7861
  %tobool41 = icmp ne i32 %bf.clear40, 0, !dbg !7861
  br i1 %tobool41, label %lor.end, label %lor.lhs.false42, !dbg !7862

lor.lhs.false42:                                  ; preds = %land.lhs.true33, %if.end29
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7863
  %u43 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1, !dbg !7863
  %fld44 = bitcast %union.u* %u43 to [1 x %union.rtunion_def]*, !dbg !7863
  %arrayidx45 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld44, i64 0, i64 5, !dbg !7863
  %rt_rtx46 = bitcast %union.rtunion_def* %arrayidx45 to %struct.rtx_def**, !dbg !7863
  %24 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx46, align 8, !dbg !7863
  %25 = bitcast %struct.rtx_def* %24 to i32*, !dbg !7863
  %bf.load47 = load i32, i32* %25, align 8, !dbg !7863
  %bf.clear48 = and i32 %bf.load47, 65535, !dbg !7863
  %cmp49 = icmp eq i32 %bf.clear48, 15, !dbg !7864
  br i1 %cmp49, label %land.lhs.true50, label %lor.rhs, !dbg !7865

land.lhs.true50:                                  ; preds = %lor.lhs.false42
  %26 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7866
  %call51 = call i32 @asm_noperands(%struct.rtx_def* %26), !dbg !7867
  %cmp52 = icmp ne i32 %call51, -1, !dbg !7868
  br i1 %cmp52, label %land.lhs.true53, label %lor.rhs, !dbg !7869

land.lhs.true53:                                  ; preds = %land.lhs.true50
  %27 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7870
  %u54 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1, !dbg !7870
  %fld55 = bitcast %union.u* %u54 to [1 x %union.rtunion_def]*, !dbg !7870
  %arrayidx56 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld55, i64 0, i64 5, !dbg !7870
  %rt_rtx57 = bitcast %union.rtunion_def* %arrayidx56 to %struct.rtx_def**, !dbg !7870
  %28 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx57, align 8, !dbg !7870
  %u58 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1, !dbg !7870
  %fld59 = bitcast %union.u* %u58 to [1 x %union.rtunion_def]*, !dbg !7870
  %arrayidx60 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld59, i64 0, i64 0, !dbg !7870
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx60 to %struct.rtvec_def**, !dbg !7870
  %29 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !7870
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %29, i32 0, i32 1, !dbg !7870
  %arrayidx61 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 0, !dbg !7870
  %30 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx61, align 8, !dbg !7870
  %31 = bitcast %struct.rtx_def* %30 to i32*, !dbg !7870
  %bf.load62 = load i32, i32* %31, align 8, !dbg !7870
  %bf.lshr63 = lshr i32 %bf.load62, 27, !dbg !7870
  %bf.clear64 = and i32 %bf.lshr63, 1, !dbg !7870
  %tobool65 = icmp ne i32 %bf.clear64, 0, !dbg !7870
  br i1 %tobool65, label %lor.end, label %lor.rhs, !dbg !7871

lor.rhs:                                          ; preds = %land.lhs.true53, %land.lhs.true50, %lor.lhs.false42
  %32 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7872
  %u66 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1, !dbg !7872
  %fld67 = bitcast %union.u* %u66 to [1 x %union.rtunion_def]*, !dbg !7872
  %arrayidx68 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld67, i64 0, i64 5, !dbg !7872
  %rt_rtx69 = bitcast %union.rtunion_def* %arrayidx68 to %struct.rtx_def**, !dbg !7872
  %33 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx69, align 8, !dbg !7872
  %34 = bitcast %struct.rtx_def* %33 to i32*, !dbg !7872
  %bf.load70 = load i32, i32* %34, align 8, !dbg !7872
  %bf.clear71 = and i32 %bf.load70, 65535, !dbg !7872
  %cmp72 = icmp eq i32 %bf.clear71, 16, !dbg !7873
  br label %lor.end, !dbg !7871

lor.end:                                          ; preds = %lor.rhs, %land.lhs.true53, %land.lhs.true33
  %35 = phi i1 [ true, %land.lhs.true53 ], [ true, %land.lhs.true33 ], [ %cmp72, %lor.rhs ]
  %lor.ext = zext i1 %35 to i32, !dbg !7871
  %conv = trunc i32 %lor.ext to i8, !dbg !7874
  store i8 %conv, i8* %retval, align 1, !dbg !7875
  br label %return, !dbg !7875

return:                                           ; preds = %lor.end, %if.then28, %if.then
  %36 = load i8, i8* %retval, align 1, !dbg !7876
  ret i8 %36, !dbg !7876
}

declare dso_local %struct.edge_def* @find_edge(%struct.basic_block_def*, %struct.basic_block_def*) #2

declare dso_local %struct.rtx_def* @gen_use(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %vec_, i32 %ix_) #0 !dbg !7877 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !7880, metadata !DIExpression()), !dbg !7881
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !7882, metadata !DIExpression()), !dbg !7881
  %0 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !7881
  %tobool = icmp ne %struct.VEC_basic_block_base* %0, null, !dbg !7881
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !7881

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !7881
  %2 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !7881
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %2, i32 0, i32 0, !dbg !7881
  %3 = load i32, i32* %num, align 8, !dbg !7881
  %cmp = icmp ult i32 %1, %3, !dbg !7881
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !7883
  %land.ext = zext i1 %4 to i32, !dbg !7881
  %5 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !7881
  %vec = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %5, i32 0, i32 2, !dbg !7881
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !7881
  %idxprom = zext i32 %6 to i64, !dbg !7881
  %arrayidx = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %vec, i64 0, i64 %idxprom, !dbg !7881
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !7881
  ret %struct.basic_block_def* %7, !dbg !7881
}

declare dso_local %struct.edge_def* @split_block(%struct.basic_block_def*, i8*) #2

declare dso_local void @verify_flow_info() #2

declare dso_local i32 @asm_noperands(%struct.rtx_def*) #2

declare dso_local void @debug_rtx(%struct.rtx_def*) #2

declare dso_local zeroext i8 @control_flow_insn_p(%struct.rtx_def*) #2

declare dso_local zeroext i8 @label_is_jump_target_p(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local void @set_first_insn(%struct.rtx_def*) #2

declare dso_local void @set_last_insn(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @unlink_insn_chain(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local zeroext i8 @locator_eq(i32, i32) #2

declare dso_local %struct.rtx_def* @gen_nop() #2

declare dso_local %struct.basic_block_def* @redirect_edge_and_branch_force(%struct.edge_def*, %struct.basic_block_def*) #2

declare dso_local %struct.rtx_def* @force_operand(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local void @do_compare_rtx_and_jump(%struct.rtx_def*, %struct.rtx_def*, i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32) #2

declare dso_local %struct.rtx_def* @emit_insn_after(%struct.rtx_def*, %struct.rtx_def*) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!2290, !2291, !2292}
!llvm.ident = !{!2293}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "pass_free_cfg", scope: !2, file: !3, line: 432, type: !2264, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !2134, globals: !2137, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "cfgrtl.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !134, !141, !150, !154, !160, !165, !170, !189, !196, !203, !397, !540, !556, !590, !604, !611, !787, !793, !2088, !2120}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !6, line: 7, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133}
!9 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!25 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!26 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!27 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!28 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!29 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!30 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!31 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!32 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!33 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!34 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!35 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!36 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!37 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!38 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!39 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!40 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!41 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!42 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!43 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!44 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!45 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!46 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!47 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!48 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!49 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!50 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!51 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!52 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!53 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!54 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!55 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!56 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!57 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!58 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!59 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!60 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!61 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!62 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!63 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!64 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!65 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!66 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!67 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!68 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!69 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!70 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!71 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!72 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!73 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!74 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!75 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!76 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!77 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!78 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!79 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!80 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!81 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!82 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!83 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!84 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!85 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!86 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!87 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!88 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!89 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!90 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!91 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!92 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!93 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!94 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!95 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!133 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!134 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "eh_region_type", file: !135, line: 30, baseType: !7, size: 32, elements: !136)
!135 = !DIFile(filename: "./except.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!136 = !{!137, !138, !139, !140}
!137 = !DIEnumerator(name: "ERT_CLEANUP", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "ERT_TRY", value: 1, isUnsigned: true)
!139 = !DIEnumerator(name: "ERT_ALLOWED_EXCEPTIONS", value: 2, isUnsigned: true)
!140 = !DIEnumerator(name: "ERT_MUST_NOT_THROW", value: 3, isUnsigned: true)
!141 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "lpt_dec", file: !142, line: 31, baseType: !7, size: 32, elements: !143)
!142 = !DIFile(filename: "./cfgloop.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!143 = !{!144, !145, !146, !147, !148, !149}
!144 = !DIEnumerator(name: "LPT_NONE", value: 0, isUnsigned: true)
!145 = !DIEnumerator(name: "LPT_PEEL_COMPLETELY", value: 1, isUnsigned: true)
!146 = !DIEnumerator(name: "LPT_PEEL_SIMPLE", value: 2, isUnsigned: true)
!147 = !DIEnumerator(name: "LPT_UNROLL_CONSTANT", value: 3, isUnsigned: true)
!148 = !DIEnumerator(name: "LPT_UNROLL_RUNTIME", value: 4, isUnsigned: true)
!149 = !DIEnumerator(name: "LPT_UNROLL_STUPID", value: 5, isUnsigned: true)
!150 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "loop_estimation", file: !142, line: 91, baseType: !7, size: 32, elements: !151)
!151 = !{!152, !153}
!152 = !DIEnumerator(name: "EST_NOT_COMPUTED", value: 0, isUnsigned: true)
!153 = !DIEnumerator(name: "EST_AVAILABLE", value: 1, isUnsigned: true)
!154 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !155, line: 363, baseType: !7, size: 32, elements: !156)
!155 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!156 = !{!157, !158, !159}
!157 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!158 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!159 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!160 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !155, line: 355, baseType: !7, size: 32, elements: !161)
!161 = !{!162, !163, !164}
!162 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!163 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!164 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!165 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !166, line: 474, baseType: !7, size: 32, elements: !167)
!166 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!167 = !{!168, !169}
!168 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!169 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!170 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !171, line: 280, baseType: !7, size: 32, elements: !172)
!171 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!172 = !{!173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188}
!173 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!174 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!175 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!176 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!177 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!178 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!179 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!180 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!181 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!182 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!183 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!184 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!185 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!186 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!187 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!188 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!189 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !171, line: 1817, baseType: !7, size: 32, elements: !190)
!190 = !{!191, !192, !193, !194, !195}
!191 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!192 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!193 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!194 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!195 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!196 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !171, line: 1805, baseType: !7, size: 32, elements: !197)
!197 = !{!198, !199, !200, !201, !202}
!198 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!199 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!200 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!201 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!202 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!203 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !171, line: 39, baseType: !7, size: 32, elements: !204)
!204 = !{!205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !334, !335, !336, !337, !338, !339, !340, !341, !342, !343, !344, !345, !346, !347, !348, !349, !350, !351, !352, !353, !354, !355, !356, !357, !358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375, !376, !377, !378, !379, !380, !381, !382, !383, !384, !385, !386, !387, !388, !389, !390, !391, !392, !393, !394, !395, !396}
!205 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!206 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!207 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!208 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!209 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!210 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!211 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!212 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!213 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!214 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!215 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!216 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!217 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!218 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!219 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!220 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!221 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!222 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!223 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!224 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!225 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!226 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!227 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!228 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!229 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!230 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!231 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!232 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!233 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!234 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!235 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!236 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!237 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!238 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!239 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!240 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!241 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!242 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!243 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!244 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!245 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!246 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!247 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!248 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!249 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!250 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!251 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!252 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!253 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!254 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!255 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!256 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!257 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!258 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!259 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!260 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!261 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!262 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!263 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!264 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!265 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!266 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!267 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!268 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!269 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!270 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!271 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!272 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!273 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!274 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!275 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!276 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!277 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!278 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!279 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!280 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!281 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!282 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!283 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!284 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!285 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!286 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!287 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!288 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!289 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!290 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!291 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!292 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!293 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!294 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!295 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!296 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!297 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!298 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!299 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!300 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!301 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!302 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!303 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!304 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!305 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!306 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!307 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!308 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!309 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!310 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!311 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!312 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!313 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!314 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!315 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!316 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!317 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!318 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!319 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!320 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!321 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!322 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!323 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!324 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!325 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!326 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!327 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!328 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!329 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!330 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!331 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!332 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!333 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!334 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!335 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!336 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!337 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!338 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!339 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!340 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!341 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!342 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!343 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!344 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!345 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!346 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!347 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!348 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!349 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!350 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!351 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!352 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!353 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!354 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!355 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!356 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!357 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!358 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!359 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!360 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!361 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!362 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!363 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!364 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!365 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!366 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!367 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!368 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!369 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!370 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!371 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!372 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!373 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!374 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!375 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!376 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!377 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!378 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!379 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!380 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!381 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!382 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!383 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!384 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!385 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!386 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!387 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!388 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!389 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!390 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!391 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!392 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!393 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!394 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!395 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!396 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!397 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rtx_code", file: !398, line: 45, baseType: !7, size: 32, elements: !399)
!398 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!399 = !{!400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539}
!400 = !DIEnumerator(name: "UNKNOWN", value: 0, isUnsigned: true)
!401 = !DIEnumerator(name: "VALUE", value: 1, isUnsigned: true)
!402 = !DIEnumerator(name: "DEBUG_EXPR", value: 2, isUnsigned: true)
!403 = !DIEnumerator(name: "EXPR_LIST", value: 3, isUnsigned: true)
!404 = !DIEnumerator(name: "INSN_LIST", value: 4, isUnsigned: true)
!405 = !DIEnumerator(name: "SEQUENCE", value: 5, isUnsigned: true)
!406 = !DIEnumerator(name: "ADDRESS", value: 6, isUnsigned: true)
!407 = !DIEnumerator(name: "DEBUG_INSN", value: 7, isUnsigned: true)
!408 = !DIEnumerator(name: "INSN", value: 8, isUnsigned: true)
!409 = !DIEnumerator(name: "JUMP_INSN", value: 9, isUnsigned: true)
!410 = !DIEnumerator(name: "CALL_INSN", value: 10, isUnsigned: true)
!411 = !DIEnumerator(name: "BARRIER", value: 11, isUnsigned: true)
!412 = !DIEnumerator(name: "CODE_LABEL", value: 12, isUnsigned: true)
!413 = !DIEnumerator(name: "NOTE", value: 13, isUnsigned: true)
!414 = !DIEnumerator(name: "COND_EXEC", value: 14, isUnsigned: true)
!415 = !DIEnumerator(name: "PARALLEL", value: 15, isUnsigned: true)
!416 = !DIEnumerator(name: "ASM_INPUT", value: 16, isUnsigned: true)
!417 = !DIEnumerator(name: "ASM_OPERANDS", value: 17, isUnsigned: true)
!418 = !DIEnumerator(name: "UNSPEC", value: 18, isUnsigned: true)
!419 = !DIEnumerator(name: "UNSPEC_VOLATILE", value: 19, isUnsigned: true)
!420 = !DIEnumerator(name: "ADDR_VEC", value: 20, isUnsigned: true)
!421 = !DIEnumerator(name: "ADDR_DIFF_VEC", value: 21, isUnsigned: true)
!422 = !DIEnumerator(name: "PREFETCH", value: 22, isUnsigned: true)
!423 = !DIEnumerator(name: "SET", value: 23, isUnsigned: true)
!424 = !DIEnumerator(name: "USE", value: 24, isUnsigned: true)
!425 = !DIEnumerator(name: "CLOBBER", value: 25, isUnsigned: true)
!426 = !DIEnumerator(name: "CALL", value: 26, isUnsigned: true)
!427 = !DIEnumerator(name: "RETURN", value: 27, isUnsigned: true)
!428 = !DIEnumerator(name: "EH_RETURN", value: 28, isUnsigned: true)
!429 = !DIEnumerator(name: "TRAP_IF", value: 29, isUnsigned: true)
!430 = !DIEnumerator(name: "CONST_INT", value: 30, isUnsigned: true)
!431 = !DIEnumerator(name: "CONST_FIXED", value: 31, isUnsigned: true)
!432 = !DIEnumerator(name: "CONST_DOUBLE", value: 32, isUnsigned: true)
!433 = !DIEnumerator(name: "CONST_VECTOR", value: 33, isUnsigned: true)
!434 = !DIEnumerator(name: "CONST_STRING", value: 34, isUnsigned: true)
!435 = !DIEnumerator(name: "CONST", value: 35, isUnsigned: true)
!436 = !DIEnumerator(name: "PC", value: 36, isUnsigned: true)
!437 = !DIEnumerator(name: "REG", value: 37, isUnsigned: true)
!438 = !DIEnumerator(name: "SCRATCH", value: 38, isUnsigned: true)
!439 = !DIEnumerator(name: "SUBREG", value: 39, isUnsigned: true)
!440 = !DIEnumerator(name: "STRICT_LOW_PART", value: 40, isUnsigned: true)
!441 = !DIEnumerator(name: "CONCAT", value: 41, isUnsigned: true)
!442 = !DIEnumerator(name: "CONCATN", value: 42, isUnsigned: true)
!443 = !DIEnumerator(name: "MEM", value: 43, isUnsigned: true)
!444 = !DIEnumerator(name: "LABEL_REF", value: 44, isUnsigned: true)
!445 = !DIEnumerator(name: "SYMBOL_REF", value: 45, isUnsigned: true)
!446 = !DIEnumerator(name: "CC0", value: 46, isUnsigned: true)
!447 = !DIEnumerator(name: "IF_THEN_ELSE", value: 47, isUnsigned: true)
!448 = !DIEnumerator(name: "COMPARE", value: 48, isUnsigned: true)
!449 = !DIEnumerator(name: "PLUS", value: 49, isUnsigned: true)
!450 = !DIEnumerator(name: "MINUS", value: 50, isUnsigned: true)
!451 = !DIEnumerator(name: "NEG", value: 51, isUnsigned: true)
!452 = !DIEnumerator(name: "MULT", value: 52, isUnsigned: true)
!453 = !DIEnumerator(name: "SS_MULT", value: 53, isUnsigned: true)
!454 = !DIEnumerator(name: "US_MULT", value: 54, isUnsigned: true)
!455 = !DIEnumerator(name: "DIV", value: 55, isUnsigned: true)
!456 = !DIEnumerator(name: "SS_DIV", value: 56, isUnsigned: true)
!457 = !DIEnumerator(name: "US_DIV", value: 57, isUnsigned: true)
!458 = !DIEnumerator(name: "MOD", value: 58, isUnsigned: true)
!459 = !DIEnumerator(name: "UDIV", value: 59, isUnsigned: true)
!460 = !DIEnumerator(name: "UMOD", value: 60, isUnsigned: true)
!461 = !DIEnumerator(name: "AND", value: 61, isUnsigned: true)
!462 = !DIEnumerator(name: "IOR", value: 62, isUnsigned: true)
!463 = !DIEnumerator(name: "XOR", value: 63, isUnsigned: true)
!464 = !DIEnumerator(name: "NOT", value: 64, isUnsigned: true)
!465 = !DIEnumerator(name: "ASHIFT", value: 65, isUnsigned: true)
!466 = !DIEnumerator(name: "ROTATE", value: 66, isUnsigned: true)
!467 = !DIEnumerator(name: "ASHIFTRT", value: 67, isUnsigned: true)
!468 = !DIEnumerator(name: "LSHIFTRT", value: 68, isUnsigned: true)
!469 = !DIEnumerator(name: "ROTATERT", value: 69, isUnsigned: true)
!470 = !DIEnumerator(name: "SMIN", value: 70, isUnsigned: true)
!471 = !DIEnumerator(name: "SMAX", value: 71, isUnsigned: true)
!472 = !DIEnumerator(name: "UMIN", value: 72, isUnsigned: true)
!473 = !DIEnumerator(name: "UMAX", value: 73, isUnsigned: true)
!474 = !DIEnumerator(name: "PRE_DEC", value: 74, isUnsigned: true)
!475 = !DIEnumerator(name: "PRE_INC", value: 75, isUnsigned: true)
!476 = !DIEnumerator(name: "POST_DEC", value: 76, isUnsigned: true)
!477 = !DIEnumerator(name: "POST_INC", value: 77, isUnsigned: true)
!478 = !DIEnumerator(name: "PRE_MODIFY", value: 78, isUnsigned: true)
!479 = !DIEnumerator(name: "POST_MODIFY", value: 79, isUnsigned: true)
!480 = !DIEnumerator(name: "NE", value: 80, isUnsigned: true)
!481 = !DIEnumerator(name: "EQ", value: 81, isUnsigned: true)
!482 = !DIEnumerator(name: "GE", value: 82, isUnsigned: true)
!483 = !DIEnumerator(name: "GT", value: 83, isUnsigned: true)
!484 = !DIEnumerator(name: "LE", value: 84, isUnsigned: true)
!485 = !DIEnumerator(name: "LT", value: 85, isUnsigned: true)
!486 = !DIEnumerator(name: "GEU", value: 86, isUnsigned: true)
!487 = !DIEnumerator(name: "GTU", value: 87, isUnsigned: true)
!488 = !DIEnumerator(name: "LEU", value: 88, isUnsigned: true)
!489 = !DIEnumerator(name: "LTU", value: 89, isUnsigned: true)
!490 = !DIEnumerator(name: "UNORDERED", value: 90, isUnsigned: true)
!491 = !DIEnumerator(name: "ORDERED", value: 91, isUnsigned: true)
!492 = !DIEnumerator(name: "UNEQ", value: 92, isUnsigned: true)
!493 = !DIEnumerator(name: "UNGE", value: 93, isUnsigned: true)
!494 = !DIEnumerator(name: "UNGT", value: 94, isUnsigned: true)
!495 = !DIEnumerator(name: "UNLE", value: 95, isUnsigned: true)
!496 = !DIEnumerator(name: "UNLT", value: 96, isUnsigned: true)
!497 = !DIEnumerator(name: "LTGT", value: 97, isUnsigned: true)
!498 = !DIEnumerator(name: "SIGN_EXTEND", value: 98, isUnsigned: true)
!499 = !DIEnumerator(name: "ZERO_EXTEND", value: 99, isUnsigned: true)
!500 = !DIEnumerator(name: "TRUNCATE", value: 100, isUnsigned: true)
!501 = !DIEnumerator(name: "FLOAT_EXTEND", value: 101, isUnsigned: true)
!502 = !DIEnumerator(name: "FLOAT_TRUNCATE", value: 102, isUnsigned: true)
!503 = !DIEnumerator(name: "FLOAT", value: 103, isUnsigned: true)
!504 = !DIEnumerator(name: "FIX", value: 104, isUnsigned: true)
!505 = !DIEnumerator(name: "UNSIGNED_FLOAT", value: 105, isUnsigned: true)
!506 = !DIEnumerator(name: "UNSIGNED_FIX", value: 106, isUnsigned: true)
!507 = !DIEnumerator(name: "FRACT_CONVERT", value: 107, isUnsigned: true)
!508 = !DIEnumerator(name: "UNSIGNED_FRACT_CONVERT", value: 108, isUnsigned: true)
!509 = !DIEnumerator(name: "SAT_FRACT", value: 109, isUnsigned: true)
!510 = !DIEnumerator(name: "UNSIGNED_SAT_FRACT", value: 110, isUnsigned: true)
!511 = !DIEnumerator(name: "ABS", value: 111, isUnsigned: true)
!512 = !DIEnumerator(name: "SQRT", value: 112, isUnsigned: true)
!513 = !DIEnumerator(name: "BSWAP", value: 113, isUnsigned: true)
!514 = !DIEnumerator(name: "FFS", value: 114, isUnsigned: true)
!515 = !DIEnumerator(name: "CLZ", value: 115, isUnsigned: true)
!516 = !DIEnumerator(name: "CTZ", value: 116, isUnsigned: true)
!517 = !DIEnumerator(name: "POPCOUNT", value: 117, isUnsigned: true)
!518 = !DIEnumerator(name: "PARITY", value: 118, isUnsigned: true)
!519 = !DIEnumerator(name: "SIGN_EXTRACT", value: 119, isUnsigned: true)
!520 = !DIEnumerator(name: "ZERO_EXTRACT", value: 120, isUnsigned: true)
!521 = !DIEnumerator(name: "HIGH", value: 121, isUnsigned: true)
!522 = !DIEnumerator(name: "LO_SUM", value: 122, isUnsigned: true)
!523 = !DIEnumerator(name: "VEC_MERGE", value: 123, isUnsigned: true)
!524 = !DIEnumerator(name: "VEC_SELECT", value: 124, isUnsigned: true)
!525 = !DIEnumerator(name: "VEC_CONCAT", value: 125, isUnsigned: true)
!526 = !DIEnumerator(name: "VEC_DUPLICATE", value: 126, isUnsigned: true)
!527 = !DIEnumerator(name: "SS_PLUS", value: 127, isUnsigned: true)
!528 = !DIEnumerator(name: "US_PLUS", value: 128, isUnsigned: true)
!529 = !DIEnumerator(name: "SS_MINUS", value: 129, isUnsigned: true)
!530 = !DIEnumerator(name: "SS_NEG", value: 130, isUnsigned: true)
!531 = !DIEnumerator(name: "US_NEG", value: 131, isUnsigned: true)
!532 = !DIEnumerator(name: "SS_ABS", value: 132, isUnsigned: true)
!533 = !DIEnumerator(name: "SS_ASHIFT", value: 133, isUnsigned: true)
!534 = !DIEnumerator(name: "US_ASHIFT", value: 134, isUnsigned: true)
!535 = !DIEnumerator(name: "US_MINUS", value: 135, isUnsigned: true)
!536 = !DIEnumerator(name: "SS_TRUNCATE", value: 136, isUnsigned: true)
!537 = !DIEnumerator(name: "US_TRUNCATE", value: 137, isUnsigned: true)
!538 = !DIEnumerator(name: "VAR_LOCATION", value: 138, isUnsigned: true)
!539 = !DIEnumerator(name: "LAST_AND_UNUSED_RTX_CODE", value: 139, isUnsigned: true)
!540 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insn_note", file: !398, line: 956, baseType: !7, size: 32, elements: !541)
!541 = !{!542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555}
!542 = !DIEnumerator(name: "NOTE_INSN_DELETED", value: 0, isUnsigned: true)
!543 = !DIEnumerator(name: "NOTE_INSN_DELETED_LABEL", value: 1, isUnsigned: true)
!544 = !DIEnumerator(name: "NOTE_INSN_BLOCK_BEG", value: 2, isUnsigned: true)
!545 = !DIEnumerator(name: "NOTE_INSN_BLOCK_END", value: 3, isUnsigned: true)
!546 = !DIEnumerator(name: "NOTE_INSN_FUNCTION_BEG", value: 4, isUnsigned: true)
!547 = !DIEnumerator(name: "NOTE_INSN_PROLOGUE_END", value: 5, isUnsigned: true)
!548 = !DIEnumerator(name: "NOTE_INSN_EPILOGUE_BEG", value: 6, isUnsigned: true)
!549 = !DIEnumerator(name: "NOTE_INSN_EH_REGION_BEG", value: 7, isUnsigned: true)
!550 = !DIEnumerator(name: "NOTE_INSN_EH_REGION_END", value: 8, isUnsigned: true)
!551 = !DIEnumerator(name: "NOTE_INSN_VAR_LOCATION", value: 9, isUnsigned: true)
!552 = !DIEnumerator(name: "NOTE_INSN_BASIC_BLOCK", value: 10, isUnsigned: true)
!553 = !DIEnumerator(name: "NOTE_INSN_SWITCH_TEXT_SECTIONS", value: 11, isUnsigned: true)
!554 = !DIEnumerator(name: "NOTE_INSN_CFA_RESTORE_STATE", value: 12, isUnsigned: true)
!555 = !DIEnumerator(name: "NOTE_INSN_MAX", value: 13, isUnsigned: true)
!556 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "reg_note", file: !398, line: 836, baseType: !7, size: 32, elements: !557)
!557 = !{!558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575, !576, !577, !578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589}
!558 = !DIEnumerator(name: "REG_DEP_TRUE", value: 0, isUnsigned: true)
!559 = !DIEnumerator(name: "REG_DEAD", value: 1, isUnsigned: true)
!560 = !DIEnumerator(name: "REG_INC", value: 2, isUnsigned: true)
!561 = !DIEnumerator(name: "REG_EQUIV", value: 3, isUnsigned: true)
!562 = !DIEnumerator(name: "REG_EQUAL", value: 4, isUnsigned: true)
!563 = !DIEnumerator(name: "REG_NONNEG", value: 5, isUnsigned: true)
!564 = !DIEnumerator(name: "REG_UNUSED", value: 6, isUnsigned: true)
!565 = !DIEnumerator(name: "REG_CC_SETTER", value: 7, isUnsigned: true)
!566 = !DIEnumerator(name: "REG_CC_USER", value: 8, isUnsigned: true)
!567 = !DIEnumerator(name: "REG_LABEL_TARGET", value: 9, isUnsigned: true)
!568 = !DIEnumerator(name: "REG_LABEL_OPERAND", value: 10, isUnsigned: true)
!569 = !DIEnumerator(name: "REG_DEP_OUTPUT", value: 11, isUnsigned: true)
!570 = !DIEnumerator(name: "REG_DEP_ANTI", value: 12, isUnsigned: true)
!571 = !DIEnumerator(name: "REG_BR_PROB", value: 13, isUnsigned: true)
!572 = !DIEnumerator(name: "REG_VALUE_PROFILE", value: 14, isUnsigned: true)
!573 = !DIEnumerator(name: "REG_NOALIAS", value: 15, isUnsigned: true)
!574 = !DIEnumerator(name: "REG_BR_PRED", value: 16, isUnsigned: true)
!575 = !DIEnumerator(name: "REG_FRAME_RELATED_EXPR", value: 17, isUnsigned: true)
!576 = !DIEnumerator(name: "REG_CFA_DEF_CFA", value: 18, isUnsigned: true)
!577 = !DIEnumerator(name: "REG_CFA_ADJUST_CFA", value: 19, isUnsigned: true)
!578 = !DIEnumerator(name: "REG_CFA_OFFSET", value: 20, isUnsigned: true)
!579 = !DIEnumerator(name: "REG_CFA_REGISTER", value: 21, isUnsigned: true)
!580 = !DIEnumerator(name: "REG_CFA_RESTORE", value: 22, isUnsigned: true)
!581 = !DIEnumerator(name: "REG_CFA_SET_VDRAP", value: 23, isUnsigned: true)
!582 = !DIEnumerator(name: "REG_EH_CONTEXT", value: 24, isUnsigned: true)
!583 = !DIEnumerator(name: "REG_EH_REGION", value: 25, isUnsigned: true)
!584 = !DIEnumerator(name: "REG_SAVE_NOTE", value: 26, isUnsigned: true)
!585 = !DIEnumerator(name: "REG_NORETURN", value: 27, isUnsigned: true)
!586 = !DIEnumerator(name: "REG_NON_LOCAL_GOTO", value: 28, isUnsigned: true)
!587 = !DIEnumerator(name: "REG_CROSSING_JUMP", value: 29, isUnsigned: true)
!588 = !DIEnumerator(name: "REG_SETJMP", value: 30, isUnsigned: true)
!589 = !DIEnumerator(name: "REG_NOTE_MAX", value: 31, isUnsigned: true)
!590 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "bb_flags", file: !155, line: 295, baseType: !7, size: 32, elements: !591)
!591 = !{!592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603}
!592 = !DIEnumerator(name: "BB_NEW", value: 1, isUnsigned: true)
!593 = !DIEnumerator(name: "BB_REACHABLE", value: 2, isUnsigned: true)
!594 = !DIEnumerator(name: "BB_IRREDUCIBLE_LOOP", value: 4, isUnsigned: true)
!595 = !DIEnumerator(name: "BB_SUPERBLOCK", value: 8, isUnsigned: true)
!596 = !DIEnumerator(name: "BB_DISABLE_SCHEDULE", value: 16, isUnsigned: true)
!597 = !DIEnumerator(name: "BB_HOT_PARTITION", value: 32, isUnsigned: true)
!598 = !DIEnumerator(name: "BB_COLD_PARTITION", value: 64, isUnsigned: true)
!599 = !DIEnumerator(name: "BB_DUPLICATED", value: 128, isUnsigned: true)
!600 = !DIEnumerator(name: "BB_NON_LOCAL_GOTO_TARGET", value: 256, isUnsigned: true)
!601 = !DIEnumerator(name: "BB_RTL", value: 512, isUnsigned: true)
!602 = !DIEnumerator(name: "BB_FORWARDER_BLOCK", value: 1024, isUnsigned: true)
!603 = !DIEnumerator(name: "BB_NONTHREADABLE_BLOCK", value: 2048, isUnsigned: true)
!604 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_pass_type", file: !605, line: 104, baseType: !7, size: 32, elements: !606)
!605 = !DIFile(filename: "./tree-pass.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!606 = !{!607, !608, !609, !610}
!607 = !DIEnumerator(name: "GIMPLE_PASS", value: 0, isUnsigned: true)
!608 = !DIEnumerator(name: "RTL_PASS", value: 1, isUnsigned: true)
!609 = !DIEnumerator(name: "SIMPLE_IPA_PASS", value: 2, isUnsigned: true)
!610 = !DIEnumerator(name: "IPA_PASS", value: 3, isUnsigned: true)
!611 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !612, line: 74, baseType: !7, size: 32, elements: !613)
!612 = !DIFile(filename: "./timevar.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!613 = !{!614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743, !744, !745, !746, !747, !748, !749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760, !761, !762, !763, !764, !765, !766, !767, !768, !769, !770, !771, !772, !773, !774, !775, !776, !777, !778, !779, !780, !781, !782, !783, !784, !785, !786}
!614 = !DIEnumerator(name: "TV_NONE", value: 0, isUnsigned: true)
!615 = !DIEnumerator(name: "TV_TOTAL", value: 1, isUnsigned: true)
!616 = !DIEnumerator(name: "TV_GC", value: 2, isUnsigned: true)
!617 = !DIEnumerator(name: "TV_DUMP", value: 3, isUnsigned: true)
!618 = !DIEnumerator(name: "TV_CGRAPH", value: 4, isUnsigned: true)
!619 = !DIEnumerator(name: "TV_CGRAPHOPT", value: 5, isUnsigned: true)
!620 = !DIEnumerator(name: "TV_IPA_CONSTANT_PROP", value: 6, isUnsigned: true)
!621 = !DIEnumerator(name: "TV_IPA_LTO_GIMPLE_IO", value: 7, isUnsigned: true)
!622 = !DIEnumerator(name: "TV_IPA_LTO_DECL_IO", value: 8, isUnsigned: true)
!623 = !DIEnumerator(name: "TV_IPA_LTO_CGRAPH_IO", value: 9, isUnsigned: true)
!624 = !DIEnumerator(name: "TV_LTO", value: 10, isUnsigned: true)
!625 = !DIEnumerator(name: "TV_WHOPR_WPA", value: 11, isUnsigned: true)
!626 = !DIEnumerator(name: "TV_WHOPR_WPA_IO", value: 12, isUnsigned: true)
!627 = !DIEnumerator(name: "TV_WHOPR_LTRANS", value: 13, isUnsigned: true)
!628 = !DIEnumerator(name: "TV_WHOPR_WPA_FIXUP", value: 14, isUnsigned: true)
!629 = !DIEnumerator(name: "TV_WHOPR_WPA_LTRANS_EXEC", value: 15, isUnsigned: true)
!630 = !DIEnumerator(name: "TV_IPA_REFERENCE", value: 16, isUnsigned: true)
!631 = !DIEnumerator(name: "TV_IPA_PURE_CONST", value: 17, isUnsigned: true)
!632 = !DIEnumerator(name: "TV_IPA_TYPE_ESCAPE", value: 18, isUnsigned: true)
!633 = !DIEnumerator(name: "TV_IPA_PTA", value: 19, isUnsigned: true)
!634 = !DIEnumerator(name: "TV_IPA_SRA", value: 20, isUnsigned: true)
!635 = !DIEnumerator(name: "TV_IPA_FREE_LANG_DATA", value: 21, isUnsigned: true)
!636 = !DIEnumerator(name: "TV_CFG", value: 22, isUnsigned: true)
!637 = !DIEnumerator(name: "TV_CLEANUP_CFG", value: 23, isUnsigned: true)
!638 = !DIEnumerator(name: "TV_CFG_VERIFY", value: 24, isUnsigned: true)
!639 = !DIEnumerator(name: "TV_DELETE_TRIVIALLY_DEAD", value: 25, isUnsigned: true)
!640 = !DIEnumerator(name: "TV_LIFE", value: 26, isUnsigned: true)
!641 = !DIEnumerator(name: "TV_LIFE_UPDATE", value: 27, isUnsigned: true)
!642 = !DIEnumerator(name: "TV_DF_SCAN", value: 28, isUnsigned: true)
!643 = !DIEnumerator(name: "TV_DF_MD", value: 29, isUnsigned: true)
!644 = !DIEnumerator(name: "TV_DF_RD", value: 30, isUnsigned: true)
!645 = !DIEnumerator(name: "TV_DF_LR", value: 31, isUnsigned: true)
!646 = !DIEnumerator(name: "TV_DF_LIVE", value: 32, isUnsigned: true)
!647 = !DIEnumerator(name: "TV_DF_UREC", value: 33, isUnsigned: true)
!648 = !DIEnumerator(name: "TV_DF_CHAIN", value: 34, isUnsigned: true)
!649 = !DIEnumerator(name: "TV_DF_BYTE_LR", value: 35, isUnsigned: true)
!650 = !DIEnumerator(name: "TV_DF_NOTE", value: 36, isUnsigned: true)
!651 = !DIEnumerator(name: "TV_REG_STATS", value: 37, isUnsigned: true)
!652 = !DIEnumerator(name: "TV_ALIAS_ANALYSIS", value: 38, isUnsigned: true)
!653 = !DIEnumerator(name: "TV_ALIAS_STMT_WALK", value: 39, isUnsigned: true)
!654 = !DIEnumerator(name: "TV_REG_SCAN", value: 40, isUnsigned: true)
!655 = !DIEnumerator(name: "TV_REBUILD_JUMP", value: 41, isUnsigned: true)
!656 = !DIEnumerator(name: "TV_CPP", value: 42, isUnsigned: true)
!657 = !DIEnumerator(name: "TV_LEX", value: 43, isUnsigned: true)
!658 = !DIEnumerator(name: "TV_PARSE", value: 44, isUnsigned: true)
!659 = !DIEnumerator(name: "TV_NAME_LOOKUP", value: 45, isUnsigned: true)
!660 = !DIEnumerator(name: "TV_INLINE_HEURISTICS", value: 46, isUnsigned: true)
!661 = !DIEnumerator(name: "TV_INTEGRATION", value: 47, isUnsigned: true)
!662 = !DIEnumerator(name: "TV_TREE_GIMPLIFY", value: 48, isUnsigned: true)
!663 = !DIEnumerator(name: "TV_TREE_EH", value: 49, isUnsigned: true)
!664 = !DIEnumerator(name: "TV_TREE_CFG", value: 50, isUnsigned: true)
!665 = !DIEnumerator(name: "TV_TREE_CLEANUP_CFG", value: 51, isUnsigned: true)
!666 = !DIEnumerator(name: "TV_TREE_VRP", value: 52, isUnsigned: true)
!667 = !DIEnumerator(name: "TV_TREE_COPY_PROP", value: 53, isUnsigned: true)
!668 = !DIEnumerator(name: "TV_TREE_STORE_COPY_PROP", value: 54, isUnsigned: true)
!669 = !DIEnumerator(name: "TV_FIND_REFERENCED_VARS", value: 55, isUnsigned: true)
!670 = !DIEnumerator(name: "TV_TREE_PTA", value: 56, isUnsigned: true)
!671 = !DIEnumerator(name: "TV_TREE_INSERT_PHI_NODES", value: 57, isUnsigned: true)
!672 = !DIEnumerator(name: "TV_TREE_SSA_REWRITE_BLOCKS", value: 58, isUnsigned: true)
!673 = !DIEnumerator(name: "TV_TREE_SSA_OTHER", value: 59, isUnsigned: true)
!674 = !DIEnumerator(name: "TV_TREE_SSA_INCREMENTAL", value: 60, isUnsigned: true)
!675 = !DIEnumerator(name: "TV_TREE_OPS", value: 61, isUnsigned: true)
!676 = !DIEnumerator(name: "TV_TREE_SSA_DOMINATOR_OPTS", value: 62, isUnsigned: true)
!677 = !DIEnumerator(name: "TV_TREE_SRA", value: 63, isUnsigned: true)
!678 = !DIEnumerator(name: "TV_TREE_STORE_CCP", value: 64, isUnsigned: true)
!679 = !DIEnumerator(name: "TV_TREE_CCP", value: 65, isUnsigned: true)
!680 = !DIEnumerator(name: "TV_TREE_PHI_CPROP", value: 66, isUnsigned: true)
!681 = !DIEnumerator(name: "TV_TREE_SPLIT_EDGES", value: 67, isUnsigned: true)
!682 = !DIEnumerator(name: "TV_TREE_REASSOC", value: 68, isUnsigned: true)
!683 = !DIEnumerator(name: "TV_TREE_PRE", value: 69, isUnsigned: true)
!684 = !DIEnumerator(name: "TV_TREE_REDPHI", value: 70, isUnsigned: true)
!685 = !DIEnumerator(name: "TV_TREE_FRE", value: 71, isUnsigned: true)
!686 = !DIEnumerator(name: "TV_TREE_SINK", value: 72, isUnsigned: true)
!687 = !DIEnumerator(name: "TV_TREE_PHIOPT", value: 73, isUnsigned: true)
!688 = !DIEnumerator(name: "TV_TREE_FORWPROP", value: 74, isUnsigned: true)
!689 = !DIEnumerator(name: "TV_TREE_PHIPROP", value: 75, isUnsigned: true)
!690 = !DIEnumerator(name: "TV_TREE_DCE", value: 76, isUnsigned: true)
!691 = !DIEnumerator(name: "TV_TREE_CD_DCE", value: 77, isUnsigned: true)
!692 = !DIEnumerator(name: "TV_TREE_CALL_CDCE", value: 78, isUnsigned: true)
!693 = !DIEnumerator(name: "TV_TREE_DSE", value: 79, isUnsigned: true)
!694 = !DIEnumerator(name: "TV_TREE_MERGE_PHI", value: 80, isUnsigned: true)
!695 = !DIEnumerator(name: "TV_TREE_LOOP", value: 81, isUnsigned: true)
!696 = !DIEnumerator(name: "TV_TREE_LOOP_BOUNDS", value: 82, isUnsigned: true)
!697 = !DIEnumerator(name: "TV_LIM", value: 83, isUnsigned: true)
!698 = !DIEnumerator(name: "TV_TREE_LOOP_IVCANON", value: 84, isUnsigned: true)
!699 = !DIEnumerator(name: "TV_SCEV_CONST", value: 85, isUnsigned: true)
!700 = !DIEnumerator(name: "TV_TREE_LOOP_UNSWITCH", value: 86, isUnsigned: true)
!701 = !DIEnumerator(name: "TV_COMPLETE_UNROLL", value: 87, isUnsigned: true)
!702 = !DIEnumerator(name: "TV_TREE_PARALLELIZE_LOOPS", value: 88, isUnsigned: true)
!703 = !DIEnumerator(name: "TV_TREE_VECTORIZATION", value: 89, isUnsigned: true)
!704 = !DIEnumerator(name: "TV_TREE_SLP_VECTORIZATION", value: 90, isUnsigned: true)
!705 = !DIEnumerator(name: "TV_GRAPHITE_TRANSFORMS", value: 91, isUnsigned: true)
!706 = !DIEnumerator(name: "TV_GRAPHITE_DATA_DEPS", value: 92, isUnsigned: true)
!707 = !DIEnumerator(name: "TV_GRAPHITE_CODE_GEN", value: 93, isUnsigned: true)
!708 = !DIEnumerator(name: "TV_TREE_LINEAR_TRANSFORM", value: 94, isUnsigned: true)
!709 = !DIEnumerator(name: "TV_TREE_LOOP_DISTRIBUTION", value: 95, isUnsigned: true)
!710 = !DIEnumerator(name: "TV_CHECK_DATA_DEPS", value: 96, isUnsigned: true)
!711 = !DIEnumerator(name: "TV_TREE_PREFETCH", value: 97, isUnsigned: true)
!712 = !DIEnumerator(name: "TV_TREE_LOOP_IVOPTS", value: 98, isUnsigned: true)
!713 = !DIEnumerator(name: "TV_PREDCOM", value: 99, isUnsigned: true)
!714 = !DIEnumerator(name: "TV_TREE_LOOP_INIT", value: 100, isUnsigned: true)
!715 = !DIEnumerator(name: "TV_TREE_LOOP_FINI", value: 101, isUnsigned: true)
!716 = !DIEnumerator(name: "TV_TREE_CH", value: 102, isUnsigned: true)
!717 = !DIEnumerator(name: "TV_TREE_SSA_UNCPROP", value: 103, isUnsigned: true)
!718 = !DIEnumerator(name: "TV_TREE_SSA_TO_NORMAL", value: 104, isUnsigned: true)
!719 = !DIEnumerator(name: "TV_TREE_NRV", value: 105, isUnsigned: true)
!720 = !DIEnumerator(name: "TV_TREE_COPY_RENAME", value: 106, isUnsigned: true)
!721 = !DIEnumerator(name: "TV_TREE_SSA_VERIFY", value: 107, isUnsigned: true)
!722 = !DIEnumerator(name: "TV_TREE_STMT_VERIFY", value: 108, isUnsigned: true)
!723 = !DIEnumerator(name: "TV_TREE_SWITCH_CONVERSION", value: 109, isUnsigned: true)
!724 = !DIEnumerator(name: "TV_CGRAPH_VERIFY", value: 110, isUnsigned: true)
!725 = !DIEnumerator(name: "TV_DOM_FRONTIERS", value: 111, isUnsigned: true)
!726 = !DIEnumerator(name: "TV_DOMINANCE", value: 112, isUnsigned: true)
!727 = !DIEnumerator(name: "TV_CONTROL_DEPENDENCES", value: 113, isUnsigned: true)
!728 = !DIEnumerator(name: "TV_OVERLOAD", value: 114, isUnsigned: true)
!729 = !DIEnumerator(name: "TV_TEMPLATE_INSTANTIATION", value: 115, isUnsigned: true)
!730 = !DIEnumerator(name: "TV_EXPAND", value: 116, isUnsigned: true)
!731 = !DIEnumerator(name: "TV_VARCONST", value: 117, isUnsigned: true)
!732 = !DIEnumerator(name: "TV_LOWER_SUBREG", value: 118, isUnsigned: true)
!733 = !DIEnumerator(name: "TV_JUMP", value: 119, isUnsigned: true)
!734 = !DIEnumerator(name: "TV_FWPROP", value: 120, isUnsigned: true)
!735 = !DIEnumerator(name: "TV_CSE", value: 121, isUnsigned: true)
!736 = !DIEnumerator(name: "TV_DCE", value: 122, isUnsigned: true)
!737 = !DIEnumerator(name: "TV_DSE1", value: 123, isUnsigned: true)
!738 = !DIEnumerator(name: "TV_DSE2", value: 124, isUnsigned: true)
!739 = !DIEnumerator(name: "TV_LOOP", value: 125, isUnsigned: true)
!740 = !DIEnumerator(name: "TV_LOOP_MOVE_INVARIANTS", value: 126, isUnsigned: true)
!741 = !DIEnumerator(name: "TV_LOOP_UNSWITCH", value: 127, isUnsigned: true)
!742 = !DIEnumerator(name: "TV_LOOP_UNROLL", value: 128, isUnsigned: true)
!743 = !DIEnumerator(name: "TV_LOOP_DOLOOP", value: 129, isUnsigned: true)
!744 = !DIEnumerator(name: "TV_CPROP", value: 130, isUnsigned: true)
!745 = !DIEnumerator(name: "TV_PRE", value: 131, isUnsigned: true)
!746 = !DIEnumerator(name: "TV_HOIST", value: 132, isUnsigned: true)
!747 = !DIEnumerator(name: "TV_LSM", value: 133, isUnsigned: true)
!748 = !DIEnumerator(name: "TV_TRACER", value: 134, isUnsigned: true)
!749 = !DIEnumerator(name: "TV_WEB", value: 135, isUnsigned: true)
!750 = !DIEnumerator(name: "TV_AUTO_INC_DEC", value: 136, isUnsigned: true)
!751 = !DIEnumerator(name: "TV_CSE2", value: 137, isUnsigned: true)
!752 = !DIEnumerator(name: "TV_BRANCH_PROB", value: 138, isUnsigned: true)
!753 = !DIEnumerator(name: "TV_VPT", value: 139, isUnsigned: true)
!754 = !DIEnumerator(name: "TV_COMBINE", value: 140, isUnsigned: true)
!755 = !DIEnumerator(name: "TV_IFCVT", value: 141, isUnsigned: true)
!756 = !DIEnumerator(name: "TV_REGMOVE", value: 142, isUnsigned: true)
!757 = !DIEnumerator(name: "TV_MODE_SWITCH", value: 143, isUnsigned: true)
!758 = !DIEnumerator(name: "TV_SMS", value: 144, isUnsigned: true)
!759 = !DIEnumerator(name: "TV_SCHED", value: 145, isUnsigned: true)
!760 = !DIEnumerator(name: "TV_LOCAL_ALLOC", value: 146, isUnsigned: true)
!761 = !DIEnumerator(name: "TV_GLOBAL_ALLOC", value: 147, isUnsigned: true)
!762 = !DIEnumerator(name: "TV_IRA", value: 148, isUnsigned: true)
!763 = !DIEnumerator(name: "TV_RELOAD", value: 149, isUnsigned: true)
!764 = !DIEnumerator(name: "TV_RELOAD_CSE_REGS", value: 150, isUnsigned: true)
!765 = !DIEnumerator(name: "TV_SEQABSTR", value: 151, isUnsigned: true)
!766 = !DIEnumerator(name: "TV_GCSE_AFTER_RELOAD", value: 152, isUnsigned: true)
!767 = !DIEnumerator(name: "TV_THREAD_PROLOGUE_AND_EPILOGUE", value: 153, isUnsigned: true)
!768 = !DIEnumerator(name: "TV_IFCVT2", value: 154, isUnsigned: true)
!769 = !DIEnumerator(name: "TV_COMBINE_STACK_ADJUST", value: 155, isUnsigned: true)
!770 = !DIEnumerator(name: "TV_PEEPHOLE2", value: 156, isUnsigned: true)
!771 = !DIEnumerator(name: "TV_RENAME_REGISTERS", value: 157, isUnsigned: true)
!772 = !DIEnumerator(name: "TV_CPROP_REGISTERS", value: 158, isUnsigned: true)
!773 = !DIEnumerator(name: "TV_SCHED2", value: 159, isUnsigned: true)
!774 = !DIEnumerator(name: "TV_MACH_DEP", value: 160, isUnsigned: true)
!775 = !DIEnumerator(name: "TV_DBR_SCHED", value: 161, isUnsigned: true)
!776 = !DIEnumerator(name: "TV_REORDER_BLOCKS", value: 162, isUnsigned: true)
!777 = !DIEnumerator(name: "TV_SHORTEN_BRANCH", value: 163, isUnsigned: true)
!778 = !DIEnumerator(name: "TV_REG_STACK", value: 164, isUnsigned: true)
!779 = !DIEnumerator(name: "TV_FINAL", value: 165, isUnsigned: true)
!780 = !DIEnumerator(name: "TV_SYMOUT", value: 166, isUnsigned: true)
!781 = !DIEnumerator(name: "TV_VAR_TRACKING", value: 167, isUnsigned: true)
!782 = !DIEnumerator(name: "TV_TREE_IFCOMBINE", value: 168, isUnsigned: true)
!783 = !DIEnumerator(name: "TV_PLUGIN_INIT", value: 169, isUnsigned: true)
!784 = !DIEnumerator(name: "TV_PLUGIN_RUN", value: 170, isUnsigned: true)
!785 = !DIEnumerator(name: "TV_REST_OF_COMPILATION", value: 171, isUnsigned: true)
!786 = !DIEnumerator(name: "TIMEVAR_LAST", value: 172, isUnsigned: true)
!787 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ir_type", file: !788, line: 80, baseType: !7, size: 32, elements: !789)
!788 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!789 = !{!790, !791, !792}
!790 = !DIEnumerator(name: "IR_GIMPLE", value: 0, isUnsigned: true)
!791 = !DIEnumerator(name: "IR_RTL_CFGRTL", value: 1, isUnsigned: true)
!792 = !DIEnumerator(name: "IR_RTL_CFGLAYOUT", value: 2, isUnsigned: true)
!793 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "bb_state", scope: !794, file: !3, line: 1645, baseType: !7, size: 32, elements: !2084)
!794 = distinct !DISubprogram(name: "print_rtl_with_bb", scope: !3, file: !3, line: 1638, type: !795, scopeLine: 1639, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!795 = !DISubroutineType(types: !796)
!796 = !{null, !797, !860}
!797 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !798, size: 64)
!798 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !799, line: 7, baseType: !800)
!799 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!800 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !801, line: 49, size: 1728, elements: !802)
!801 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!802 = !{!803, !805, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !821, !823, !824, !825, !829, !831, !833, !837, !840, !842, !845, !848, !849, !851, !855, !856}
!803 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !800, file: !801, line: 51, baseType: !804, size: 32)
!804 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!805 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !800, file: !801, line: 54, baseType: !806, size: 64, offset: 64)
!806 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !807, size: 64)
!807 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!808 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !800, file: !801, line: 55, baseType: !806, size: 64, offset: 128)
!809 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !800, file: !801, line: 56, baseType: !806, size: 64, offset: 192)
!810 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !800, file: !801, line: 57, baseType: !806, size: 64, offset: 256)
!811 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !800, file: !801, line: 58, baseType: !806, size: 64, offset: 320)
!812 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !800, file: !801, line: 59, baseType: !806, size: 64, offset: 384)
!813 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !800, file: !801, line: 60, baseType: !806, size: 64, offset: 448)
!814 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !800, file: !801, line: 61, baseType: !806, size: 64, offset: 512)
!815 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !800, file: !801, line: 64, baseType: !806, size: 64, offset: 576)
!816 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !800, file: !801, line: 65, baseType: !806, size: 64, offset: 640)
!817 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !800, file: !801, line: 66, baseType: !806, size: 64, offset: 704)
!818 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !800, file: !801, line: 68, baseType: !819, size: 64, offset: 768)
!819 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !820, size: 64)
!820 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !801, line: 36, flags: DIFlagFwdDecl)
!821 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !800, file: !801, line: 70, baseType: !822, size: 64, offset: 832)
!822 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !800, size: 64)
!823 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !800, file: !801, line: 72, baseType: !804, size: 32, offset: 896)
!824 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !800, file: !801, line: 73, baseType: !804, size: 32, offset: 928)
!825 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !800, file: !801, line: 74, baseType: !826, size: 64, offset: 960)
!826 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !827, line: 152, baseType: !828)
!827 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!828 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!829 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !800, file: !801, line: 77, baseType: !830, size: 16, offset: 1024)
!830 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!831 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !800, file: !801, line: 78, baseType: !832, size: 8, offset: 1040)
!832 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!833 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !800, file: !801, line: 79, baseType: !834, size: 8, offset: 1048)
!834 = !DICompositeType(tag: DW_TAG_array_type, baseType: !807, size: 8, elements: !835)
!835 = !{!836}
!836 = !DISubrange(count: 1)
!837 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !800, file: !801, line: 81, baseType: !838, size: 64, offset: 1088)
!838 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !839, size: 64)
!839 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !801, line: 43, baseType: null)
!840 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !800, file: !801, line: 89, baseType: !841, size: 64, offset: 1152)
!841 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !827, line: 153, baseType: !828)
!842 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !800, file: !801, line: 91, baseType: !843, size: 64, offset: 1216)
!843 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !844, size: 64)
!844 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !801, line: 37, flags: DIFlagFwdDecl)
!845 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !800, file: !801, line: 92, baseType: !846, size: 64, offset: 1280)
!846 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !847, size: 64)
!847 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !801, line: 38, flags: DIFlagFwdDecl)
!848 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !800, file: !801, line: 93, baseType: !822, size: 64, offset: 1344)
!849 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !800, file: !801, line: 94, baseType: !850, size: 64, offset: 1408)
!850 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!851 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !800, file: !801, line: 95, baseType: !852, size: 64, offset: 1472)
!852 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !853, line: 46, baseType: !854)
!853 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!854 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!855 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !800, file: !801, line: 96, baseType: !804, size: 32, offset: 1536)
!856 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !800, file: !801, line: 98, baseType: !857, size: 160, offset: 1568)
!857 = !DICompositeType(tag: DW_TAG_array_type, baseType: !807, size: 160, elements: !858)
!858 = !{!859}
!859 = !DISubrange(count: 20)
!860 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_rtx", file: !788, line: 51, baseType: !861)
!861 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !862, size: 64)
!862 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !863)
!863 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !398, line: 240, size: 384, elements: !864)
!864 = !{!865, !866, !867, !868, !869, !870, !871, !872, !873, !874, !875}
!865 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !863, file: !398, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!866 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !863, file: !398, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!867 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !863, file: !398, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!868 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !863, file: !398, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!869 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !863, file: !398, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!870 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !863, file: !398, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!871 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !863, file: !398, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!872 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !863, file: !398, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!873 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !863, file: !398, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!874 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !863, file: !398, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!875 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !863, file: !398, line: 321, baseType: !876, size: 320, offset: 64)
!876 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !398, line: 315, size: 320, elements: !877)
!877 = !{!878, !2018, !2020, !2081, !2082}
!878 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !876, file: !398, line: 316, baseType: !879, size: 64)
!879 = !DICompositeType(tag: DW_TAG_array_type, baseType: !880, size: 64, elements: !835)
!880 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !398, line: 183, baseType: !881)
!881 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !398, line: 166, size: 64, elements: !882)
!882 = !{!883, !884, !885, !888, !891, !899, !900, !912, !915, !975, !1996, !1997, !2008, !2015}
!883 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !881, file: !398, line: 168, baseType: !804, size: 32)
!884 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !881, file: !398, line: 169, baseType: !7, size: 32)
!885 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !881, file: !398, line: 170, baseType: !886, size: 64)
!886 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !887, size: 64)
!887 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !807)
!888 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !881, file: !398, line: 171, baseType: !889, size: 64)
!889 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !788, line: 50, baseType: !890)
!890 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !863, size: 64)
!891 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !881, file: !398, line: 172, baseType: !892, size: 64)
!892 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !788, line: 53, baseType: !893)
!893 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !894, size: 64)
!894 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !398, line: 359, size: 128, elements: !895)
!895 = !{!896, !897}
!896 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !894, file: !398, line: 360, baseType: !804, size: 32)
!897 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !894, file: !398, line: 361, baseType: !898, size: 64, offset: 64)
!898 = !DICompositeType(tag: DW_TAG_array_type, baseType: !889, size: 64, elements: !835)
!899 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !881, file: !398, line: 173, baseType: !5, size: 32)
!900 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !881, file: !398, line: 174, baseType: !901, size: 32)
!901 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !398, line: 133, baseType: !902)
!902 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !398, line: 115, size: 32, elements: !903)
!903 = !{!904, !905, !906, !907, !908, !909, !910, !911}
!904 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !902, file: !398, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!905 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !902, file: !398, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!906 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !902, file: !398, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!907 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !902, file: !398, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!908 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !902, file: !398, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!909 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !902, file: !398, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!910 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !902, file: !398, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!911 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !902, file: !398, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!912 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !881, file: !398, line: 175, baseType: !913, size: 64)
!913 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !914, size: 64)
!914 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !398, line: 175, flags: DIFlagFwdDecl)
!915 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !881, file: !398, line: 176, baseType: !916, size: 64)
!916 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !917, size: 64)
!917 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !918, line: 75, size: 256, elements: !919)
!918 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!919 = !{!920, !934, !935, !936}
!920 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !917, file: !918, line: 76, baseType: !921, size: 64)
!921 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !922, size: 64)
!922 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !918, line: 68, baseType: !923)
!923 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !918, line: 63, size: 320, elements: !924)
!924 = !{!925, !927, !928, !929}
!925 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !923, file: !918, line: 64, baseType: !926, size: 64)
!926 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !923, size: 64)
!927 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !923, file: !918, line: 65, baseType: !926, size: 64, offset: 64)
!928 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !923, file: !918, line: 66, baseType: !7, size: 32, offset: 128)
!929 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !923, file: !918, line: 67, baseType: !930, size: 128, offset: 192)
!930 = !DICompositeType(tag: DW_TAG_array_type, baseType: !931, size: 128, elements: !932)
!931 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !918, line: 29, baseType: !854)
!932 = !{!933}
!933 = !DISubrange(count: 2)
!934 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !917, file: !918, line: 77, baseType: !921, size: 64, offset: 64)
!935 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !917, file: !918, line: 78, baseType: !7, size: 32, offset: 128)
!936 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !917, file: !918, line: 79, baseType: !937, size: 64, offset: 192)
!937 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !938, size: 64)
!938 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !918, line: 49, baseType: !939)
!939 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !918, line: 45, size: 832, elements: !940)
!940 = !{!941, !942, !943}
!941 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !939, file: !918, line: 46, baseType: !926, size: 64)
!942 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !939, file: !918, line: 47, baseType: !916, size: 64, offset: 64)
!943 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !939, file: !918, line: 48, baseType: !944, size: 704, offset: 128)
!944 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !945, line: 164, size: 704, elements: !946)
!945 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!946 = !{!947, !948, !958, !959, !960, !961, !962, !963, !967, !971, !972, !973, !974}
!947 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !944, file: !945, line: 166, baseType: !828, size: 64)
!948 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !944, file: !945, line: 167, baseType: !949, size: 64, offset: 64)
!949 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !950, size: 64)
!950 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !945, line: 157, size: 192, elements: !951)
!951 = !{!952, !953, !954}
!952 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !950, file: !945, line: 159, baseType: !806, size: 64)
!953 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !950, file: !945, line: 160, baseType: !949, size: 64, offset: 64)
!954 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !950, file: !945, line: 161, baseType: !955, size: 32, offset: 128)
!955 = !DICompositeType(tag: DW_TAG_array_type, baseType: !807, size: 32, elements: !956)
!956 = !{!957}
!957 = !DISubrange(count: 4)
!958 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !944, file: !945, line: 168, baseType: !806, size: 64, offset: 128)
!959 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !944, file: !945, line: 169, baseType: !806, size: 64, offset: 192)
!960 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !944, file: !945, line: 170, baseType: !806, size: 64, offset: 256)
!961 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !944, file: !945, line: 171, baseType: !828, size: 64, offset: 320)
!962 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !944, file: !945, line: 172, baseType: !804, size: 32, offset: 384)
!963 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !944, file: !945, line: 176, baseType: !964, size: 64, offset: 448)
!964 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !965, size: 64)
!965 = !DISubroutineType(types: !966)
!966 = !{!949, !850, !828}
!967 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !944, file: !945, line: 177, baseType: !968, size: 64, offset: 512)
!968 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !969, size: 64)
!969 = !DISubroutineType(types: !970)
!970 = !{null, !850, !949}
!971 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !944, file: !945, line: 178, baseType: !850, size: 64, offset: 576)
!972 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !944, file: !945, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!973 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !944, file: !945, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!974 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !944, file: !945, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!975 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !881, file: !398, line: 177, baseType: !976, size: 64)
!976 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !788, line: 56, baseType: !977)
!977 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !978, size: 64)
!978 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !171, line: 3371, size: 1792, elements: !979)
!979 = !{!980, !1013, !1019, !1030, !1049, !1060, !1065, !1071, !1077, !1091, !1103, !1141, !1146, !1174, !1182, !1183, !1188, !1197, !1203, !1208, !1212, !1216, !1636, !1685, !1691, !1697, !1704, !1727, !1741, !1758, !1770, !1792, !1807, !1978}
!980 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !978, file: !171, line: 3372, baseType: !981, size: 64)
!981 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !171, line: 360, size: 64, elements: !982)
!982 = !{!983, !984, !985, !986, !987, !988, !989, !990, !991, !992, !993, !994, !995, !996, !997, !998, !999, !1000, !1001, !1002, !1003, !1004, !1005, !1006, !1007, !1008, !1009, !1010, !1011, !1012}
!983 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !981, file: !171, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!984 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !981, file: !171, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!985 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !981, file: !171, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!986 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !981, file: !171, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!987 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !981, file: !171, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!988 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !981, file: !171, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!989 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !981, file: !171, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!990 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !981, file: !171, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!991 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !981, file: !171, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!992 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !981, file: !171, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!993 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !981, file: !171, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!994 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !981, file: !171, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!995 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !981, file: !171, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!996 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !981, file: !171, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!997 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !981, file: !171, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!998 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !981, file: !171, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!999 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !981, file: !171, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1000 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !981, file: !171, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!1001 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !981, file: !171, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!1002 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !981, file: !171, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!1003 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !981, file: !171, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!1004 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !981, file: !171, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!1005 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !981, file: !171, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!1006 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !981, file: !171, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!1007 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !981, file: !171, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!1008 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !981, file: !171, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!1009 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !981, file: !171, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!1010 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !981, file: !171, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!1011 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !981, file: !171, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!1012 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !981, file: !171, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!1013 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !978, file: !171, line: 3373, baseType: !1014, size: 192)
!1014 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !171, line: 402, size: 192, elements: !1015)
!1015 = !{!1016, !1017, !1018}
!1016 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1014, file: !171, line: 403, baseType: !981, size: 64)
!1017 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !1014, file: !171, line: 404, baseType: !976, size: 64, offset: 64)
!1018 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1014, file: !171, line: 405, baseType: !976, size: 64, offset: 128)
!1019 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !978, file: !171, line: 3374, baseType: !1020, size: 320)
!1020 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !171, line: 1384, size: 320, elements: !1021)
!1021 = !{!1022, !1023}
!1022 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1020, file: !171, line: 1385, baseType: !1014, size: 192)
!1023 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1020, file: !171, line: 1386, baseType: !1024, size: 128, offset: 192)
!1024 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !1025, line: 58, baseType: !1026)
!1025 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1026 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1025, line: 54, size: 128, elements: !1027)
!1027 = !{!1028, !1029}
!1028 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1026, file: !1025, line: 56, baseType: !854, size: 64)
!1029 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1026, file: !1025, line: 57, baseType: !828, size: 64, offset: 64)
!1030 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !978, file: !171, line: 3375, baseType: !1031, size: 256)
!1031 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !171, line: 1397, size: 256, elements: !1032)
!1032 = !{!1033, !1034}
!1033 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1031, file: !171, line: 1398, baseType: !1014, size: 192)
!1034 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !1031, file: !171, line: 1399, baseType: !1035, size: 64, offset: 192)
!1035 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1036, size: 64)
!1036 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !1037, line: 52, size: 256, elements: !1038)
!1037 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1038 = !{!1039, !1040, !1041, !1042, !1043, !1044, !1045}
!1039 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !1036, file: !1037, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1040 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !1036, file: !1037, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1041 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !1036, file: !1037, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1042 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !1036, file: !1037, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1043 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1036, file: !1037, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1044 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !1036, file: !1037, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1045 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !1036, file: !1037, line: 62, baseType: !1046, size: 192, offset: 64)
!1046 = !DICompositeType(tag: DW_TAG_array_type, baseType: !854, size: 192, elements: !1047)
!1047 = !{!1048}
!1048 = !DISubrange(count: 3)
!1049 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !978, file: !171, line: 3376, baseType: !1050, size: 256)
!1050 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !171, line: 1408, size: 256, elements: !1051)
!1051 = !{!1052, !1053}
!1052 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1050, file: !171, line: 1409, baseType: !1014, size: 192)
!1053 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !1050, file: !171, line: 1410, baseType: !1054, size: 64, offset: 192)
!1054 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1055, size: 64)
!1055 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !1056, line: 27, size: 192, elements: !1057)
!1056 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1057 = !{!1058, !1059}
!1058 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1055, file: !1056, line: 29, baseType: !1024, size: 128)
!1059 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1055, file: !1056, line: 30, baseType: !5, size: 32, offset: 128)
!1060 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !978, file: !171, line: 3377, baseType: !1061, size: 256)
!1061 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !171, line: 1437, size: 256, elements: !1062)
!1062 = !{!1063, !1064}
!1063 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1061, file: !171, line: 1438, baseType: !1014, size: 192)
!1064 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1061, file: !171, line: 1439, baseType: !976, size: 64, offset: 192)
!1065 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !978, file: !171, line: 3378, baseType: !1066, size: 256)
!1066 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !171, line: 1418, size: 256, elements: !1067)
!1067 = !{!1068, !1069, !1070}
!1068 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1066, file: !171, line: 1419, baseType: !1014, size: 192)
!1069 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1066, file: !171, line: 1420, baseType: !804, size: 32, offset: 192)
!1070 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1066, file: !171, line: 1421, baseType: !834, size: 8, offset: 224)
!1071 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !978, file: !171, line: 3379, baseType: !1072, size: 320)
!1072 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !171, line: 1428, size: 320, elements: !1073)
!1073 = !{!1074, !1075, !1076}
!1074 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1072, file: !171, line: 1429, baseType: !1014, size: 192)
!1075 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !1072, file: !171, line: 1430, baseType: !976, size: 64, offset: 192)
!1076 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !1072, file: !171, line: 1431, baseType: !976, size: 64, offset: 256)
!1077 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !978, file: !171, line: 3380, baseType: !1078, size: 320)
!1078 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !171, line: 1460, size: 320, elements: !1079)
!1079 = !{!1080, !1081}
!1080 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1078, file: !171, line: 1461, baseType: !1014, size: 192)
!1081 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1078, file: !171, line: 1462, baseType: !1082, size: 128, offset: 192)
!1082 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !1083, line: 31, size: 128, elements: !1084)
!1083 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1084 = !{!1085, !1089, !1090}
!1085 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1082, file: !1083, line: 32, baseType: !1086, size: 64)
!1086 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1087, size: 64)
!1087 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1088)
!1088 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!1089 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1082, file: !1083, line: 33, baseType: !7, size: 32, offset: 64)
!1090 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !1082, file: !1083, line: 34, baseType: !7, size: 32, offset: 96)
!1091 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !978, file: !171, line: 3381, baseType: !1092, size: 384)
!1092 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !171, line: 2507, size: 384, elements: !1093)
!1093 = !{!1094, !1095, !1100, !1101, !1102}
!1094 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1092, file: !171, line: 2508, baseType: !1014, size: 192)
!1095 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1092, file: !171, line: 2509, baseType: !1096, size: 32, offset: 192)
!1096 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !1097, line: 58, baseType: !1098)
!1097 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1098 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !1099, line: 44, baseType: !7)
!1099 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1100 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1092, file: !171, line: 2510, baseType: !7, size: 32, offset: 224)
!1101 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1092, file: !171, line: 2511, baseType: !976, size: 64, offset: 256)
!1102 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1092, file: !171, line: 2512, baseType: !976, size: 64, offset: 320)
!1103 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !978, file: !171, line: 3382, baseType: !1104, size: 896)
!1104 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !171, line: 2652, size: 896, elements: !1105)
!1105 = !{!1106, !1107, !1108, !1109, !1110, !1111, !1112, !1113, !1114, !1115, !1116, !1117, !1118, !1119, !1120, !1121, !1122, !1123, !1124, !1125, !1126, !1127, !1128, !1129, !1130, !1131, !1132, !1133, !1134, !1135, !1136, !1137, !1138}
!1106 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1104, file: !171, line: 2653, baseType: !1092, size: 384)
!1107 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1104, file: !171, line: 2654, baseType: !976, size: 64, offset: 384)
!1108 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1104, file: !171, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!1109 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !1104, file: !171, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!1110 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !1104, file: !171, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!1111 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !1104, file: !171, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!1112 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1104, file: !171, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!1113 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !1104, file: !171, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!1114 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !1104, file: !171, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!1115 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !1104, file: !171, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!1116 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1104, file: !171, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!1117 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1104, file: !171, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!1118 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1104, file: !171, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!1119 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1104, file: !171, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!1120 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1104, file: !171, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!1121 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1104, file: !171, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!1122 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1104, file: !171, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!1123 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !1104, file: !171, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!1124 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !1104, file: !171, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!1125 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !1104, file: !171, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!1126 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !1104, file: !171, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!1127 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !1104, file: !171, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!1128 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !1104, file: !171, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!1129 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !1104, file: !171, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!1130 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !1104, file: !171, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!1131 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !1104, file: !171, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!1132 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !1104, file: !171, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!1133 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1104, file: !171, line: 2703, baseType: !7, size: 32, offset: 512)
!1134 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1104, file: !171, line: 2705, baseType: !976, size: 64, offset: 576)
!1135 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1104, file: !171, line: 2706, baseType: !976, size: 64, offset: 640)
!1136 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1104, file: !171, line: 2707, baseType: !976, size: 64, offset: 704)
!1137 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1104, file: !171, line: 2708, baseType: !976, size: 64, offset: 768)
!1138 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1104, file: !171, line: 2711, baseType: !1139, size: 64, offset: 832)
!1139 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1140, size: 64)
!1140 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !171, line: 2711, flags: DIFlagFwdDecl)
!1141 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !978, file: !171, line: 3383, baseType: !1142, size: 960)
!1142 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !171, line: 2756, size: 960, elements: !1143)
!1143 = !{!1144, !1145}
!1144 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1142, file: !171, line: 2757, baseType: !1104, size: 896)
!1145 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1142, file: !171, line: 2758, baseType: !889, size: 64, offset: 896)
!1146 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !978, file: !171, line: 3384, baseType: !1147, size: 1472)
!1147 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !171, line: 3114, size: 1472, elements: !1148)
!1148 = !{!1149, !1170, !1171, !1172, !1173}
!1149 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1147, file: !171, line: 3115, baseType: !1150, size: 1216)
!1150 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !171, line: 2984, size: 1216, elements: !1151)
!1151 = !{!1152, !1153, !1154, !1155, !1156, !1157, !1158, !1159, !1160, !1161, !1162, !1163, !1164, !1165, !1166, !1167, !1168, !1169}
!1152 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1150, file: !171, line: 2985, baseType: !1142, size: 960)
!1153 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !1150, file: !171, line: 2986, baseType: !976, size: 64, offset: 960)
!1154 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !1150, file: !171, line: 2987, baseType: !976, size: 64, offset: 1024)
!1155 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !1150, file: !171, line: 2988, baseType: !976, size: 64, offset: 1088)
!1156 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !1150, file: !171, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!1157 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !1150, file: !171, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!1158 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !1150, file: !171, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!1159 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !1150, file: !171, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!1160 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !1150, file: !171, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!1161 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !1150, file: !171, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!1162 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !1150, file: !171, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!1163 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !1150, file: !171, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!1164 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !1150, file: !171, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!1165 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !1150, file: !171, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!1166 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !1150, file: !171, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!1167 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !1150, file: !171, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!1168 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !1150, file: !171, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!1169 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !1150, file: !171, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!1170 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !1147, file: !171, line: 3117, baseType: !976, size: 64, offset: 1216)
!1171 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !1147, file: !171, line: 3119, baseType: !976, size: 64, offset: 1280)
!1172 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1147, file: !171, line: 3121, baseType: !976, size: 64, offset: 1344)
!1173 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !1147, file: !171, line: 3123, baseType: !976, size: 64, offset: 1408)
!1174 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !978, file: !171, line: 3385, baseType: !1175, size: 1088)
!1175 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !171, line: 2874, size: 1088, elements: !1176)
!1176 = !{!1177, !1178, !1179}
!1177 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1175, file: !171, line: 2875, baseType: !1142, size: 960)
!1178 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !1175, file: !171, line: 2876, baseType: !889, size: 64, offset: 960)
!1179 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1175, file: !171, line: 2877, baseType: !1180, size: 64, offset: 1024)
!1180 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1181, size: 64)
!1181 = !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !171, line: 2856, flags: DIFlagFwdDecl)
!1182 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !978, file: !171, line: 3386, baseType: !1150, size: 1216)
!1183 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !978, file: !171, line: 3387, baseType: !1184, size: 1280)
!1184 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !171, line: 3093, size: 1280, elements: !1185)
!1185 = !{!1186, !1187}
!1186 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1184, file: !171, line: 3094, baseType: !1150, size: 1216)
!1187 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1184, file: !171, line: 3095, baseType: !1180, size: 64, offset: 1216)
!1188 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !978, file: !171, line: 3388, baseType: !1189, size: 1216)
!1189 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !171, line: 2824, size: 1216, elements: !1190)
!1190 = !{!1191, !1192, !1193, !1194, !1195, !1196}
!1191 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1189, file: !171, line: 2825, baseType: !1104, size: 896)
!1192 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1189, file: !171, line: 2827, baseType: !976, size: 64, offset: 896)
!1193 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !1189, file: !171, line: 2828, baseType: !976, size: 64, offset: 960)
!1194 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !1189, file: !171, line: 2829, baseType: !976, size: 64, offset: 1024)
!1195 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !1189, file: !171, line: 2830, baseType: !976, size: 64, offset: 1088)
!1196 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !1189, file: !171, line: 2831, baseType: !976, size: 64, offset: 1152)
!1197 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !978, file: !171, line: 3389, baseType: !1198, size: 1024)
!1198 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !171, line: 2850, size: 1024, elements: !1199)
!1199 = !{!1200, !1201, !1202}
!1200 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1198, file: !171, line: 2851, baseType: !1142, size: 960)
!1201 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !1198, file: !171, line: 2852, baseType: !804, size: 32, offset: 960)
!1202 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !1198, file: !171, line: 2853, baseType: !804, size: 32, offset: 992)
!1203 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !978, file: !171, line: 3390, baseType: !1204, size: 1024)
!1204 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !171, line: 2857, size: 1024, elements: !1205)
!1205 = !{!1206, !1207}
!1206 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1204, file: !171, line: 2858, baseType: !1142, size: 960)
!1207 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1204, file: !171, line: 2859, baseType: !1180, size: 64, offset: 960)
!1208 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !978, file: !171, line: 3391, baseType: !1209, size: 960)
!1209 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !171, line: 2862, size: 960, elements: !1210)
!1210 = !{!1211}
!1211 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1209, file: !171, line: 2863, baseType: !1142, size: 960)
!1212 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !978, file: !171, line: 3392, baseType: !1213, size: 1472)
!1213 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !171, line: 3304, size: 1472, elements: !1214)
!1214 = !{!1215}
!1215 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1213, file: !171, line: 3305, baseType: !1147, size: 1472)
!1216 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !978, file: !171, line: 3393, baseType: !1217, size: 1792)
!1217 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !171, line: 3248, size: 1792, elements: !1218)
!1218 = !{!1219, !1220, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631, !1632, !1633, !1634, !1635}
!1219 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1217, file: !171, line: 3249, baseType: !1147, size: 1472)
!1220 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !1217, file: !171, line: 3251, baseType: !1221, size: 64, offset: 1472)
!1221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1222, size: 64)
!1222 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !1223, line: 463, size: 1152, elements: !1224)
!1223 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1224 = !{!1225, !1387, !1547, !1548, !1551, !1559, !1560, !1561, !1562, !1563, !1564, !1588, !1591, !1592, !1593, !1594, !1595, !1596, !1597, !1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614}
!1225 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !1222, file: !1223, line: 464, baseType: !1226, size: 64)
!1226 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1227, size: 64)
!1227 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !135, line: 194, size: 384, elements: !1228)
!1228 = !{!1229, !1278, !1291, !1305, !1355, !1368}
!1229 = !DIDerivedType(tag: DW_TAG_member, name: "region_tree", scope: !1227, file: !135, line: 197, baseType: !1230, size: 64)
!1230 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_region", file: !135, line: 182, baseType: !1231)
!1231 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1232, size: 64)
!1232 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_d", file: !135, line: 116, size: 704, elements: !1233)
!1233 = !{!1234, !1235, !1236, !1237, !1238, !1239, !1266, !1275, !1276, !1277}
!1234 = !DIDerivedType(tag: DW_TAG_member, name: "outer", scope: !1232, file: !135, line: 119, baseType: !1231, size: 64)
!1235 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !1232, file: !135, line: 122, baseType: !1231, size: 64, offset: 64)
!1236 = !DIDerivedType(tag: DW_TAG_member, name: "next_peer", scope: !1232, file: !135, line: 123, baseType: !1231, size: 64, offset: 128)
!1237 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1232, file: !135, line: 126, baseType: !804, size: 32, offset: 192)
!1238 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1232, file: !135, line: 129, baseType: !134, size: 32, offset: 224)
!1239 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1232, file: !135, line: 165, baseType: !1240, size: 192, offset: 256)
!1240 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_region_u", file: !135, line: 132, size: 192, elements: !1241)
!1241 = !{!1242, !1255, !1261}
!1242 = !DIDerivedType(tag: DW_TAG_member, name: "eh_try", scope: !1240, file: !135, line: 137, baseType: !1243, size: 128)
!1243 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_try", file: !135, line: 133, size: 128, elements: !1244)
!1244 = !{!1245, !1254}
!1245 = !DIDerivedType(tag: DW_TAG_member, name: "first_catch", scope: !1243, file: !135, line: 135, baseType: !1246, size: 64)
!1246 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1247, size: 64)
!1247 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_catch_d", file: !135, line: 93, size: 320, elements: !1248)
!1248 = !{!1249, !1250, !1251, !1252, !1253}
!1249 = !DIDerivedType(tag: DW_TAG_member, name: "next_catch", scope: !1247, file: !135, line: 96, baseType: !1246, size: 64)
!1250 = !DIDerivedType(tag: DW_TAG_member, name: "prev_catch", scope: !1247, file: !135, line: 97, baseType: !1246, size: 64, offset: 64)
!1251 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !1247, file: !135, line: 101, baseType: !976, size: 64, offset: 128)
!1252 = !DIDerivedType(tag: DW_TAG_member, name: "filter_list", scope: !1247, file: !135, line: 106, baseType: !976, size: 64, offset: 192)
!1253 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !1247, file: !135, line: 111, baseType: !976, size: 64, offset: 256)
!1254 = !DIDerivedType(tag: DW_TAG_member, name: "last_catch", scope: !1243, file: !135, line: 136, baseType: !1246, size: 64, offset: 64)
!1255 = !DIDerivedType(tag: DW_TAG_member, name: "allowed", scope: !1240, file: !135, line: 151, baseType: !1256, size: 192)
!1256 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_allowed", file: !135, line: 139, size: 192, elements: !1257)
!1257 = !{!1258, !1259, !1260}
!1258 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !1256, file: !135, line: 141, baseType: !976, size: 64)
!1259 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !1256, file: !135, line: 145, baseType: !976, size: 64, offset: 64)
!1260 = !DIDerivedType(tag: DW_TAG_member, name: "filter", scope: !1256, file: !135, line: 150, baseType: !804, size: 32, offset: 128)
!1261 = !DIDerivedType(tag: DW_TAG_member, name: "must_not_throw", scope: !1240, file: !135, line: 164, baseType: !1262, size: 128)
!1262 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_must_not_throw", file: !135, line: 153, size: 128, elements: !1263)
!1263 = !{!1264, !1265}
!1264 = !DIDerivedType(tag: DW_TAG_member, name: "failure_decl", scope: !1262, file: !135, line: 161, baseType: !976, size: 64)
!1265 = !DIDerivedType(tag: DW_TAG_member, name: "failure_loc", scope: !1262, file: !135, line: 163, baseType: !1096, size: 32, offset: 64)
!1266 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pads", scope: !1232, file: !135, line: 168, baseType: !1267, size: 64, offset: 448)
!1267 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1268, size: 64)
!1268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_landing_pad_d", file: !135, line: 67, size: 320, elements: !1269)
!1269 = !{!1270, !1271, !1272, !1273, !1274}
!1270 = !DIDerivedType(tag: DW_TAG_member, name: "next_lp", scope: !1268, file: !135, line: 70, baseType: !1267, size: 64)
!1271 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !1268, file: !135, line: 73, baseType: !1231, size: 64, offset: 64)
!1272 = !DIDerivedType(tag: DW_TAG_member, name: "post_landing_pad", scope: !1268, file: !135, line: 78, baseType: !976, size: 64, offset: 128)
!1273 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pad", scope: !1268, file: !135, line: 85, baseType: !889, size: 64, offset: 192)
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1268, file: !135, line: 88, baseType: !804, size: 32, offset: 256)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "exc_ptr_reg", scope: !1232, file: !135, line: 173, baseType: !889, size: 64, offset: 512)
!1276 = !DIDerivedType(tag: DW_TAG_member, name: "filter_reg", scope: !1232, file: !135, line: 173, baseType: !889, size: 64, offset: 576)
!1277 = !DIDerivedType(tag: DW_TAG_member, name: "use_cxa_end_cleanup", scope: !1232, file: !135, line: 177, baseType: !1088, size: 8, offset: 640)
!1278 = !DIDerivedType(tag: DW_TAG_member, name: "region_array", scope: !1227, file: !135, line: 200, baseType: !1279, size: 64, offset: 64)
!1279 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1280, size: 64)
!1280 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_gc", file: !135, line: 185, baseType: !1281)
!1281 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_gc", file: !135, line: 185, size: 128, elements: !1282)
!1282 = !{!1283}
!1283 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1281, file: !135, line: 185, baseType: !1284, size: 128)
!1284 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_base", file: !135, line: 184, baseType: !1285)
!1285 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_base", file: !135, line: 184, size: 128, elements: !1286)
!1286 = !{!1287, !1288, !1289}
!1287 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1285, file: !135, line: 184, baseType: !7, size: 32)
!1288 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1285, file: !135, line: 184, baseType: !7, size: 32, offset: 32)
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1285, file: !135, line: 184, baseType: !1290, size: 64, offset: 64)
!1290 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1230, size: 64, elements: !835)
!1291 = !DIDerivedType(tag: DW_TAG_member, name: "lp_array", scope: !1227, file: !135, line: 203, baseType: !1292, size: 64, offset: 128)
!1292 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1293, size: 64)
!1293 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_gc", file: !135, line: 189, baseType: !1294)
!1294 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_gc", file: !135, line: 189, size: 128, elements: !1295)
!1295 = !{!1296}
!1296 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1294, file: !135, line: 189, baseType: !1297, size: 128)
!1297 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_base", file: !135, line: 188, baseType: !1298)
!1298 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_base", file: !135, line: 188, size: 128, elements: !1299)
!1299 = !{!1300, !1301, !1302}
!1300 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1298, file: !135, line: 188, baseType: !7, size: 32)
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1298, file: !135, line: 188, baseType: !7, size: 32, offset: 32)
!1302 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1298, file: !135, line: 188, baseType: !1303, size: 64, offset: 64)
!1303 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1304, size: 64, elements: !835)
!1304 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_landing_pad", file: !135, line: 180, baseType: !1267)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "throw_stmt_table", scope: !1227, file: !135, line: 207, baseType: !1306, size: 64, offset: 192)
!1306 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !1307, line: 144, baseType: !1308)
!1307 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1308 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1309, size: 64)
!1309 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !1307, line: 100, size: 896, elements: !1310)
!1310 = !{!1311, !1319, !1324, !1329, !1331, !1332, !1333, !1334, !1335, !1336, !1341, !1343, !1344, !1349, !1354}
!1311 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !1309, file: !1307, line: 102, baseType: !1312, size: 64)
!1312 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !1307, line: 52, baseType: !1313)
!1313 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1314, size: 64)
!1314 = !DISubroutineType(types: !1315)
!1315 = !{!1316, !1317}
!1316 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !1307, line: 47, baseType: !7)
!1317 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1318, size: 64)
!1318 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!1319 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !1309, file: !1307, line: 105, baseType: !1320, size: 64, offset: 64)
!1320 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !1307, line: 59, baseType: !1321)
!1321 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1322, size: 64)
!1322 = !DISubroutineType(types: !1323)
!1323 = !{!804, !1317, !1317}
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !1309, file: !1307, line: 108, baseType: !1325, size: 64, offset: 128)
!1325 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !1307, line: 63, baseType: !1326)
!1326 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1327, size: 64)
!1327 = !DISubroutineType(types: !1328)
!1328 = !{null, !850}
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !1309, file: !1307, line: 111, baseType: !1330, size: 64, offset: 192)
!1330 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !850, size: 64)
!1331 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1309, file: !1307, line: 114, baseType: !852, size: 64, offset: 256)
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !1309, file: !1307, line: 117, baseType: !852, size: 64, offset: 320)
!1333 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !1309, file: !1307, line: 120, baseType: !852, size: 64, offset: 384)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !1309, file: !1307, line: 124, baseType: !7, size: 32, offset: 448)
!1335 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !1309, file: !1307, line: 128, baseType: !7, size: 32, offset: 480)
!1336 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !1309, file: !1307, line: 131, baseType: !1337, size: 64, offset: 512)
!1337 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !1307, line: 75, baseType: !1338)
!1338 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1339, size: 64)
!1339 = !DISubroutineType(types: !1340)
!1340 = !{!850, !852, !852}
!1341 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !1309, file: !1307, line: 132, baseType: !1342, size: 64, offset: 576)
!1342 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !1307, line: 78, baseType: !1326)
!1343 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !1309, file: !1307, line: 135, baseType: !850, size: 64, offset: 640)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !1309, file: !1307, line: 136, baseType: !1345, size: 64, offset: 704)
!1345 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !1307, line: 82, baseType: !1346)
!1346 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1347, size: 64)
!1347 = !DISubroutineType(types: !1348)
!1348 = !{!850, !850, !852, !852}
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !1309, file: !1307, line: 137, baseType: !1350, size: 64, offset: 768)
!1350 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !1307, line: 83, baseType: !1351)
!1351 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1352, size: 64)
!1352 = !DISubroutineType(types: !1353)
!1353 = !{null, !850, !850}
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !1309, file: !1307, line: 141, baseType: !7, size: 32, offset: 832)
!1355 = !DIDerivedType(tag: DW_TAG_member, name: "ttype_data", scope: !1227, file: !135, line: 211, baseType: !1356, size: 64, offset: 256)
!1356 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1357, size: 64)
!1357 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !171, line: 183, baseType: !1358)
!1358 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !171, line: 183, size: 128, elements: !1359)
!1359 = !{!1360}
!1360 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1358, file: !171, line: 183, baseType: !1361, size: 128)
!1361 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !171, line: 182, baseType: !1362)
!1362 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !171, line: 182, size: 128, elements: !1363)
!1363 = !{!1364, !1365, !1366}
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1362, file: !171, line: 182, baseType: !7, size: 32)
!1365 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1362, file: !171, line: 182, baseType: !7, size: 32, offset: 32)
!1366 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1362, file: !171, line: 182, baseType: !1367, size: 64, offset: 64)
!1367 = !DICompositeType(tag: DW_TAG_array_type, baseType: !976, size: 64, elements: !835)
!1368 = !DIDerivedType(tag: DW_TAG_member, name: "ehspec_data", scope: !1227, file: !135, line: 220, baseType: !1369, size: 64, offset: 320)
!1369 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_status_u", file: !135, line: 217, size: 64, elements: !1370)
!1370 = !{!1371, !1372}
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "arm_eabi", scope: !1369, file: !135, line: 218, baseType: !1356, size: 64)
!1372 = !DIDerivedType(tag: DW_TAG_member, name: "other", scope: !1369, file: !135, line: 219, baseType: !1373, size: 64)
!1373 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1374, size: 64)
!1374 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_gc", file: !1375, line: 29, baseType: !1376)
!1375 = !DIFile(filename: "./vecprim.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1376 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_gc", file: !1375, line: 29, size: 96, elements: !1377)
!1377 = !{!1378}
!1378 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1376, file: !1375, line: 29, baseType: !1379, size: 96)
!1379 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_base", file: !1375, line: 27, baseType: !1380)
!1380 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_base", file: !1375, line: 27, size: 96, elements: !1381)
!1381 = !{!1382, !1383, !1384}
!1382 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1380, file: !1375, line: 27, baseType: !7, size: 32)
!1383 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1380, file: !1375, line: 27, baseType: !7, size: 32, offset: 32)
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1380, file: !1375, line: 27, baseType: !1385, size: 8, offset: 64)
!1385 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1386, size: 8, elements: !835)
!1386 = !DIDerivedType(tag: DW_TAG_typedef, name: "uchar", file: !1375, line: 26, baseType: !1088)
!1387 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !1222, file: !1223, line: 467, baseType: !1388, size: 64, offset: 64)
!1388 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1389, size: 64)
!1389 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !155, line: 374, size: 640, elements: !1390)
!1390 = !{!1391, !1522, !1523, !1536, !1537, !1538, !1539, !1540, !1541, !1543, !1545, !1546}
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !1389, file: !155, line: 377, baseType: !1392, size: 64)
!1392 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !788, line: 111, baseType: !1393)
!1393 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1394, size: 64)
!1394 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !155, line: 217, size: 832, elements: !1395)
!1395 = !{!1396, !1431, !1432, !1433, !1492, !1496, !1497, !1498, !1516, !1517, !1518, !1519, !1520, !1521}
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !1394, file: !155, line: 219, baseType: !1397, size: 64)
!1397 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1398, size: 64)
!1398 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !155, line: 151, baseType: !1399)
!1399 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !155, line: 151, size: 128, elements: !1400)
!1400 = !{!1401}
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1399, file: !155, line: 151, baseType: !1402, size: 128)
!1402 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !155, line: 150, baseType: !1403)
!1403 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !155, line: 150, size: 128, elements: !1404)
!1404 = !{!1405, !1406, !1407}
!1405 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1403, file: !155, line: 150, baseType: !7, size: 32)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1403, file: !155, line: 150, baseType: !7, size: 32, offset: 32)
!1407 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1403, file: !155, line: 150, baseType: !1408, size: 64, offset: 64)
!1408 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1409, size: 64, elements: !835)
!1409 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !788, line: 108, baseType: !1410)
!1410 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1411, size: 64)
!1411 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !155, line: 122, size: 512, elements: !1412)
!1412 = !{!1413, !1414, !1415, !1423, !1424, !1425, !1426, !1427, !1428, !1429}
!1413 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !1411, file: !155, line: 124, baseType: !1393, size: 64)
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !1411, file: !155, line: 125, baseType: !1393, size: 64, offset: 64)
!1415 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !1411, file: !155, line: 131, baseType: !1416, size: 64, offset: 128)
!1416 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !155, line: 128, size: 64, elements: !1417)
!1417 = !{!1418, !1422}
!1418 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !1416, file: !155, line: 129, baseType: !1419, size: 64)
!1419 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !788, line: 66, baseType: !1420)
!1420 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1421, size: 64)
!1421 = !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !788, line: 65, flags: DIFlagFwdDecl)
!1422 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !1416, file: !155, line: 130, baseType: !889, size: 64)
!1423 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1411, file: !155, line: 134, baseType: !850, size: 64, offset: 192)
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !1411, file: !155, line: 137, baseType: !976, size: 64, offset: 256)
!1425 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !1411, file: !155, line: 138, baseType: !1096, size: 32, offset: 320)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !1411, file: !155, line: 142, baseType: !7, size: 32, offset: 352)
!1427 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1411, file: !155, line: 144, baseType: !804, size: 32, offset: 384)
!1428 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !1411, file: !155, line: 145, baseType: !804, size: 32, offset: 416)
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1411, file: !155, line: 146, baseType: !1430, size: 64, offset: 448)
!1430 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !155, line: 119, baseType: !828)
!1431 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !1394, file: !155, line: 220, baseType: !1397, size: 64, offset: 64)
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1394, file: !155, line: 223, baseType: !850, size: 64, offset: 128)
!1433 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !1394, file: !155, line: 226, baseType: !1434, size: 64, offset: 192)
!1434 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1435, size: 64)
!1435 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !142, line: 100, size: 1216, elements: !1436)
!1436 = !{!1437, !1438, !1439, !1440, !1441, !1446, !1447, !1448, !1462, !1463, !1464, !1465, !1466, !1467, !1468, !1469, !1470, !1471, !1482, !1490, !1491}
!1437 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1435, file: !142, line: 102, baseType: !804, size: 32)
!1438 = !DIDerivedType(tag: DW_TAG_member, name: "ninsns", scope: !1435, file: !142, line: 105, baseType: !7, size: 32, offset: 32)
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1435, file: !142, line: 108, baseType: !1393, size: 64, offset: 64)
!1440 = !DIDerivedType(tag: DW_TAG_member, name: "latch", scope: !1435, file: !142, line: 111, baseType: !1393, size: 64, offset: 128)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "lpt_decision", scope: !1435, file: !142, line: 114, baseType: !1442, size: 64, offset: 192)
!1442 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lpt_decision", file: !142, line: 41, size: 64, elements: !1443)
!1443 = !{!1444, !1445}
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "decision", scope: !1442, file: !142, line: 42, baseType: !141, size: 32)
!1445 = !DIDerivedType(tag: DW_TAG_member, name: "times", scope: !1442, file: !142, line: 43, baseType: !7, size: 32, offset: 32)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "av_ninsns", scope: !1435, file: !142, line: 117, baseType: !7, size: 32, offset: 256)
!1447 = !DIDerivedType(tag: DW_TAG_member, name: "num_nodes", scope: !1435, file: !142, line: 120, baseType: !7, size: 32, offset: 288)
!1448 = !DIDerivedType(tag: DW_TAG_member, name: "superloops", scope: !1435, file: !142, line: 123, baseType: !1449, size: 64, offset: 320)
!1449 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1450, size: 64)
!1450 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_gc", file: !142, line: 87, baseType: !1451)
!1451 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_gc", file: !142, line: 87, size: 128, elements: !1452)
!1452 = !{!1453}
!1453 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1451, file: !142, line: 87, baseType: !1454, size: 128)
!1454 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_base", file: !142, line: 85, baseType: !1455)
!1455 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_base", file: !142, line: 85, size: 128, elements: !1456)
!1456 = !{!1457, !1458, !1459}
!1457 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1455, file: !142, line: 85, baseType: !7, size: 32)
!1458 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1455, file: !142, line: 85, baseType: !7, size: 32, offset: 32)
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1455, file: !142, line: 85, baseType: !1460, size: 64, offset: 64)
!1460 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1461, size: 64, elements: !835)
!1461 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_p", file: !142, line: 84, baseType: !1434)
!1462 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !1435, file: !142, line: 126, baseType: !1434, size: 64, offset: 384)
!1463 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1435, file: !142, line: 129, baseType: !1434, size: 64, offset: 448)
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1435, file: !142, line: 132, baseType: !850, size: 64, offset: 512)
!1465 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations", scope: !1435, file: !142, line: 139, baseType: !976, size: 64, offset: 576)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_upper_bound", scope: !1435, file: !142, line: 143, baseType: !1024, size: 128, offset: 640)
!1467 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_estimate", scope: !1435, file: !142, line: 146, baseType: !1024, size: 128, offset: 768)
!1468 = !DIDerivedType(tag: DW_TAG_member, name: "any_upper_bound", scope: !1435, file: !142, line: 148, baseType: !1088, size: 8, offset: 896)
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "any_estimate", scope: !1435, file: !142, line: 149, baseType: !1088, size: 8, offset: 904)
!1470 = !DIDerivedType(tag: DW_TAG_member, name: "estimate_state", scope: !1435, file: !142, line: 153, baseType: !150, size: 32, offset: 928)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "bounds", scope: !1435, file: !142, line: 156, baseType: !1472, size: 64, offset: 960)
!1472 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1473, size: 64)
!1473 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nb_iter_bound", file: !142, line: 48, size: 320, elements: !1474)
!1474 = !{!1475, !1479, !1480, !1481}
!1475 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1473, file: !142, line: 50, baseType: !1476, size: 64)
!1476 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !788, line: 58, baseType: !1477)
!1477 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1478, size: 64)
!1478 = !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !788, line: 57, flags: DIFlagFwdDecl)
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "bound", scope: !1473, file: !142, line: 59, baseType: !1024, size: 128, offset: 64)
!1480 = !DIDerivedType(tag: DW_TAG_member, name: "is_exit", scope: !1473, file: !142, line: 64, baseType: !1088, size: 8, offset: 192)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1473, file: !142, line: 67, baseType: !1472, size: 64, offset: 256)
!1482 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1435, file: !142, line: 159, baseType: !1483, size: 64, offset: 1024)
!1483 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1484, size: 64)
!1484 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop_exit", file: !142, line: 72, size: 256, elements: !1485)
!1485 = !{!1486, !1487, !1488, !1489}
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !1484, file: !142, line: 74, baseType: !1410, size: 64)
!1487 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1484, file: !142, line: 77, baseType: !1483, size: 64, offset: 64)
!1488 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1484, file: !142, line: 78, baseType: !1483, size: 64, offset: 128)
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "next_e", scope: !1484, file: !142, line: 81, baseType: !1483, size: 64, offset: 192)
!1490 = !DIDerivedType(tag: DW_TAG_member, name: "can_be_parallel", scope: !1435, file: !142, line: 162, baseType: !1088, size: 8, offset: 1088)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "single_iv", scope: !1435, file: !142, line: 166, baseType: !976, size: 64, offset: 1152)
!1492 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !1394, file: !155, line: 229, baseType: !1493, size: 128, offset: 256)
!1493 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1494, size: 128, elements: !932)
!1494 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1495, size: 64)
!1495 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !155, line: 229, flags: DIFlagFwdDecl)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !1394, file: !155, line: 232, baseType: !1393, size: 64, offset: 384)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !1394, file: !155, line: 233, baseType: !1393, size: 64, offset: 448)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !1394, file: !155, line: 238, baseType: !1499, size: 64, offset: 512)
!1499 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !155, line: 235, size: 64, elements: !1500)
!1500 = !{!1501, !1507}
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !1499, file: !155, line: 236, baseType: !1502, size: 64)
!1502 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1503, size: 64)
!1503 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !155, line: 273, size: 128, elements: !1504)
!1504 = !{!1505, !1506}
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !1503, file: !155, line: 275, baseType: !1419, size: 64)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !1503, file: !155, line: 278, baseType: !1419, size: 64, offset: 64)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1499, file: !155, line: 237, baseType: !1508, size: 64)
!1508 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1509, size: 64)
!1509 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !155, line: 259, size: 320, elements: !1510)
!1510 = !{!1511, !1512, !1513, !1514, !1515}
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !1509, file: !155, line: 261, baseType: !889, size: 64)
!1512 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !1509, file: !155, line: 262, baseType: !889, size: 64, offset: 64)
!1513 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1509, file: !155, line: 266, baseType: !889, size: 64, offset: 128)
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !1509, file: !155, line: 267, baseType: !889, size: 64, offset: 192)
!1515 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1509, file: !155, line: 270, baseType: !804, size: 32, offset: 256)
!1516 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1394, file: !155, line: 241, baseType: !1430, size: 64, offset: 576)
!1517 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1394, file: !155, line: 244, baseType: !804, size: 32, offset: 640)
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !1394, file: !155, line: 247, baseType: !804, size: 32, offset: 672)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !1394, file: !155, line: 250, baseType: !804, size: 32, offset: 704)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !1394, file: !155, line: 253, baseType: !804, size: 32, offset: 736)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1394, file: !155, line: 256, baseType: !804, size: 32, offset: 768)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !1389, file: !155, line: 378, baseType: !1392, size: 64, offset: 64)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !1389, file: !155, line: 381, baseType: !1524, size: 64, offset: 128)
!1524 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1525, size: 64)
!1525 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !155, line: 282, baseType: !1526)
!1526 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !155, line: 282, size: 128, elements: !1527)
!1527 = !{!1528}
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1526, file: !155, line: 282, baseType: !1529, size: 128)
!1529 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !155, line: 281, baseType: !1530)
!1530 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !155, line: 281, size: 128, elements: !1531)
!1531 = !{!1532, !1533, !1534}
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1530, file: !155, line: 281, baseType: !7, size: 32)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1530, file: !155, line: 281, baseType: !7, size: 32, offset: 32)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1530, file: !155, line: 281, baseType: !1535, size: 64, offset: 64)
!1535 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1392, size: 64, elements: !835)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !1389, file: !155, line: 384, baseType: !804, size: 32, offset: 192)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !1389, file: !155, line: 387, baseType: !804, size: 32, offset: 224)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !1389, file: !155, line: 390, baseType: !804, size: 32, offset: 256)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !1389, file: !155, line: 394, baseType: !1524, size: 64, offset: 320)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !1389, file: !155, line: 396, baseType: !154, size: 32, offset: 384)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !1389, file: !155, line: 399, baseType: !1542, size: 64, offset: 416)
!1542 = !DICompositeType(tag: DW_TAG_array_type, baseType: !160, size: 64, elements: !932)
!1543 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !1389, file: !155, line: 402, baseType: !1544, size: 64, offset: 480)
!1544 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !932)
!1545 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !1389, file: !155, line: 406, baseType: !804, size: 32, offset: 544)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !1389, file: !155, line: 409, baseType: !804, size: 32, offset: 576)
!1547 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !1222, file: !1223, line: 470, baseType: !1420, size: 64, offset: 128)
!1548 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !1222, file: !1223, line: 473, baseType: !1549, size: 64, offset: 192)
!1549 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1550, size: 64)
!1550 = !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !1223, line: 166, flags: DIFlagFwdDecl)
!1551 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !1222, file: !1223, line: 476, baseType: !1552, size: 64, offset: 256)
!1552 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1553, size: 64)
!1553 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !142, line: 187, size: 256, elements: !1554)
!1554 = !{!1555, !1556, !1557, !1558}
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !1553, file: !142, line: 189, baseType: !804, size: 32)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "larray", scope: !1553, file: !142, line: 192, baseType: !1449, size: 64, offset: 64)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1553, file: !142, line: 197, baseType: !1306, size: 64, offset: 128)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "tree_root", scope: !1553, file: !142, line: 200, baseType: !1434, size: 64, offset: 192)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !1222, file: !1223, line: 479, baseType: !1306, size: 64, offset: 320)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1222, file: !1223, line: 484, baseType: !976, size: 64, offset: 384)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !1222, file: !1223, line: 488, baseType: !976, size: 64, offset: 448)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !1222, file: !1223, line: 493, baseType: !976, size: 64, offset: 512)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !1222, file: !1223, line: 496, baseType: !976, size: 64, offset: 576)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !1222, file: !1223, line: 501, baseType: !1565, size: 64, offset: 640)
!1565 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1566, size: 64)
!1566 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !166, line: 2355, size: 576, elements: !1567)
!1567 = !{!1568, !1571, !1572, !1573, !1574, !1576, !1577, !1582, !1583, !1584, !1585, !1586, !1587}
!1568 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !1566, file: !166, line: 2356, baseType: !1569, size: 64)
!1569 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1570, size: 64)
!1570 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !166, line: 2356, flags: DIFlagFwdDecl)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !1566, file: !166, line: 2357, baseType: !886, size: 64, offset: 64)
!1572 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !1566, file: !166, line: 2358, baseType: !804, size: 32, offset: 128)
!1573 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !1566, file: !166, line: 2359, baseType: !804, size: 32, offset: 160)
!1574 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !1566, file: !166, line: 2360, baseType: !1575, size: 128, offset: 192)
!1575 = !DICompositeType(tag: DW_TAG_array_type, baseType: !804, size: 128, elements: !956)
!1576 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !1566, file: !166, line: 2364, baseType: !804, size: 32, offset: 320)
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !1566, file: !166, line: 2367, baseType: !1578, size: 128, offset: 384)
!1578 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !166, line: 2349, size: 128, elements: !1579)
!1579 = !{!1580, !1581}
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !1578, file: !166, line: 2351, baseType: !889, size: 64)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1578, file: !166, line: 2352, baseType: !828, size: 64, offset: 64)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !1566, file: !166, line: 2371, baseType: !165, size: 32, offset: 512)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !1566, file: !166, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !1566, file: !166, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !1566, file: !166, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !1566, file: !166, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !1566, file: !166, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !1222, file: !1223, line: 504, baseType: !1589, size: 64, offset: 704)
!1589 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1590, size: 64)
!1590 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !1223, line: 504, flags: DIFlagFwdDecl)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !1222, file: !1223, line: 507, baseType: !1306, size: 64, offset: 768)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !1222, file: !1223, line: 510, baseType: !804, size: 32, offset: 832)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !1222, file: !1223, line: 513, baseType: !804, size: 32, offset: 864)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !1222, file: !1223, line: 516, baseType: !1096, size: 32, offset: 896)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !1222, file: !1223, line: 519, baseType: !1096, size: 32, offset: 928)
!1596 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !1222, file: !1223, line: 522, baseType: !7, size: 32, offset: 960)
!1597 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !1222, file: !1223, line: 523, baseType: !7, size: 32, offset: 992)
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !1222, file: !1223, line: 528, baseType: !886, size: 64, offset: 1024)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !1222, file: !1223, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !1222, file: !1223, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !1222, file: !1223, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !1222, file: !1223, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !1222, file: !1223, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !1222, file: !1223, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !1222, file: !1223, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !1222, file: !1223, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !1222, file: !1223, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !1222, file: !1223, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !1222, file: !1223, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !1222, file: !1223, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !1222, file: !1223, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !1222, file: !1223, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !1222, file: !1223, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !1222, file: !1223, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !1217, file: !171, line: 3254, baseType: !976, size: 64, offset: 1536)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !1217, file: !171, line: 3257, baseType: !976, size: 64, offset: 1600)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !1217, file: !171, line: 3258, baseType: !976, size: 64, offset: 1664)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !1217, file: !171, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !1217, file: !171, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !1217, file: !171, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !1217, file: !171, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !1217, file: !171, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !1217, file: !171, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !1217, file: !171, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !1217, file: !171, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !1217, file: !171, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !1217, file: !171, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !1217, file: !171, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !1217, file: !171, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !1217, file: !171, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !1217, file: !171, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !1217, file: !171, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!1633 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !1217, file: !171, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!1634 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !1217, file: !171, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !1217, file: !171, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!1636 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !978, file: !171, line: 3394, baseType: !1637, size: 1344)
!1637 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !171, line: 2279, size: 1344, elements: !1638)
!1638 = !{!1639, !1640, !1641, !1642, !1643, !1644, !1645, !1646, !1647, !1648, !1649, !1650, !1651, !1652, !1653, !1654, !1655, !1656, !1657, !1658, !1659, !1660, !1661, !1664, !1665, !1666, !1674, !1675, !1676, !1677, !1678, !1679, !1680, !1681, !1682}
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1637, file: !171, line: 2280, baseType: !1014, size: 192)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !1637, file: !171, line: 2281, baseType: !976, size: 64, offset: 192)
!1641 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1637, file: !171, line: 2282, baseType: !976, size: 64, offset: 256)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1637, file: !171, line: 2283, baseType: !976, size: 64, offset: 320)
!1643 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1637, file: !171, line: 2284, baseType: !976, size: 64, offset: 384)
!1644 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1637, file: !171, line: 2285, baseType: !7, size: 32, offset: 448)
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !1637, file: !171, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!1646 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !1637, file: !171, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!1647 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !1637, file: !171, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!1648 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !1637, file: !171, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !1637, file: !171, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !1637, file: !171, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!1651 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1637, file: !171, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!1652 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !1637, file: !171, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1637, file: !171, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!1654 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1637, file: !171, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!1655 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1637, file: !171, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1637, file: !171, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!1657 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1637, file: !171, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1637, file: !171, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!1659 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1637, file: !171, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1637, file: !171, line: 2305, baseType: !7, size: 32, offset: 512)
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !1637, file: !171, line: 2306, baseType: !1662, size: 32, offset: 544)
!1662 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !1663, line: 31, baseType: !804)
!1663 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1664 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !1637, file: !171, line: 2307, baseType: !976, size: 64, offset: 576)
!1665 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !1637, file: !171, line: 2308, baseType: !976, size: 64, offset: 640)
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !1637, file: !171, line: 2314, baseType: !1667, size: 64, offset: 704)
!1667 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !171, line: 2309, size: 64, elements: !1668)
!1668 = !{!1669, !1670, !1671}
!1669 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !1667, file: !171, line: 2310, baseType: !804, size: 32)
!1670 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !1667, file: !171, line: 2311, baseType: !886, size: 64)
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !1667, file: !171, line: 2312, baseType: !1672, size: 64)
!1672 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1673, size: 64)
!1673 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !171, line: 2277, flags: DIFlagFwdDecl)
!1674 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1637, file: !171, line: 2315, baseType: !976, size: 64, offset: 768)
!1675 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !1637, file: !171, line: 2316, baseType: !976, size: 64, offset: 832)
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !1637, file: !171, line: 2317, baseType: !976, size: 64, offset: 896)
!1677 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !1637, file: !171, line: 2318, baseType: !976, size: 64, offset: 960)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !1637, file: !171, line: 2319, baseType: !976, size: 64, offset: 1024)
!1679 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1637, file: !171, line: 2320, baseType: !976, size: 64, offset: 1088)
!1680 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1637, file: !171, line: 2321, baseType: !976, size: 64, offset: 1152)
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1637, file: !171, line: 2322, baseType: !976, size: 64, offset: 1216)
!1682 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1637, file: !171, line: 2324, baseType: !1683, size: 64, offset: 1280)
!1683 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1684, size: 64)
!1684 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !171, line: 2324, flags: DIFlagFwdDecl)
!1685 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !978, file: !171, line: 3395, baseType: !1686, size: 320)
!1686 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !171, line: 1469, size: 320, elements: !1687)
!1687 = !{!1688, !1689, !1690}
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1686, file: !171, line: 1470, baseType: !1014, size: 192)
!1689 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !1686, file: !171, line: 1471, baseType: !976, size: 64, offset: 192)
!1690 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1686, file: !171, line: 1472, baseType: !976, size: 64, offset: 256)
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !978, file: !171, line: 3396, baseType: !1692, size: 320)
!1692 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !171, line: 1482, size: 320, elements: !1693)
!1693 = !{!1694, !1695, !1696}
!1694 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1692, file: !171, line: 1483, baseType: !1014, size: 192)
!1695 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1692, file: !171, line: 1484, baseType: !804, size: 32, offset: 192)
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !1692, file: !171, line: 1485, baseType: !1367, size: 64, offset: 256)
!1697 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !978, file: !171, line: 3397, baseType: !1698, size: 384)
!1698 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !171, line: 1829, size: 384, elements: !1699)
!1699 = !{!1700, !1701, !1702, !1703}
!1700 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1698, file: !171, line: 1830, baseType: !1014, size: 192)
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1698, file: !171, line: 1831, baseType: !1096, size: 32, offset: 192)
!1702 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1698, file: !171, line: 1832, baseType: !976, size: 64, offset: 256)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !1698, file: !171, line: 1835, baseType: !1367, size: 64, offset: 320)
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !978, file: !171, line: 3398, baseType: !1705, size: 704)
!1705 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !171, line: 1898, size: 704, elements: !1706)
!1706 = !{!1707, !1708, !1709, !1710, !1711, !1714}
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1705, file: !171, line: 1899, baseType: !1014, size: 192)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !1705, file: !171, line: 1902, baseType: !976, size: 64, offset: 192)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !1705, file: !171, line: 1905, baseType: !1476, size: 64, offset: 256)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !1705, file: !171, line: 1908, baseType: !7, size: 32, offset: 320)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !1705, file: !171, line: 1911, baseType: !1712, size: 64, offset: 384)
!1712 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1713, size: 64)
!1713 = !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !171, line: 1876, flags: DIFlagFwdDecl)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !1705, file: !171, line: 1914, baseType: !1715, size: 256, offset: 448)
!1715 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !171, line: 1883, size: 256, elements: !1716)
!1716 = !{!1717, !1719, !1720, !1725}
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1715, file: !171, line: 1884, baseType: !1718, size: 64)
!1718 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1715, size: 64)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1715, file: !171, line: 1885, baseType: !1718, size: 64, offset: 64)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1715, file: !171, line: 1891, baseType: !1721, size: 64, offset: 128)
!1721 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1715, file: !171, line: 1891, size: 64, elements: !1722)
!1722 = !{!1723, !1724}
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1721, file: !171, line: 1891, baseType: !1476, size: 64)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1721, file: !171, line: 1891, baseType: !976, size: 64)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !1715, file: !171, line: 1892, baseType: !1726, size: 64, offset: 192)
!1726 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !976, size: 64)
!1727 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !978, file: !171, line: 3399, baseType: !1728, size: 704)
!1728 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !171, line: 2008, size: 704, elements: !1729)
!1729 = !{!1730, !1731, !1732, !1733, !1734, !1735, !1736, !1737, !1738, !1739, !1740}
!1730 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1728, file: !171, line: 2009, baseType: !1014, size: 192)
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1728, file: !171, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!1732 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !1728, file: !171, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1728, file: !171, line: 2014, baseType: !1096, size: 32, offset: 224)
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1728, file: !171, line: 2016, baseType: !976, size: 64, offset: 256)
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !1728, file: !171, line: 2017, baseType: !1356, size: 64, offset: 320)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !1728, file: !171, line: 2019, baseType: !976, size: 64, offset: 384)
!1737 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !1728, file: !171, line: 2020, baseType: !976, size: 64, offset: 448)
!1738 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1728, file: !171, line: 2021, baseType: !976, size: 64, offset: 512)
!1739 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !1728, file: !171, line: 2022, baseType: !976, size: 64, offset: 576)
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !1728, file: !171, line: 2023, baseType: !976, size: 64, offset: 640)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !978, file: !171, line: 3400, baseType: !1742, size: 832)
!1742 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !171, line: 2430, size: 832, elements: !1743)
!1743 = !{!1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751, !1752, !1753}
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1742, file: !171, line: 2431, baseType: !1014, size: 192)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1742, file: !171, line: 2433, baseType: !976, size: 64, offset: 192)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !1742, file: !171, line: 2434, baseType: !976, size: 64, offset: 256)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !1742, file: !171, line: 2435, baseType: !976, size: 64, offset: 320)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !1742, file: !171, line: 2436, baseType: !976, size: 64, offset: 384)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !1742, file: !171, line: 2437, baseType: !1356, size: 64, offset: 448)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !1742, file: !171, line: 2438, baseType: !976, size: 64, offset: 512)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !1742, file: !171, line: 2440, baseType: !976, size: 64, offset: 576)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !1742, file: !171, line: 2441, baseType: !976, size: 64, offset: 640)
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !1742, file: !171, line: 2443, baseType: !1754, size: 128, offset: 704)
!1754 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !171, line: 182, baseType: !1755)
!1755 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !171, line: 182, size: 128, elements: !1756)
!1756 = !{!1757}
!1757 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1755, file: !171, line: 182, baseType: !1361, size: 128)
!1758 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !978, file: !171, line: 3401, baseType: !1759, size: 320)
!1759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !171, line: 3327, size: 320, elements: !1760)
!1760 = !{!1761, !1762, !1769}
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1759, file: !171, line: 3329, baseType: !1014, size: 192)
!1762 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !1759, file: !171, line: 3330, baseType: !1763, size: 64, offset: 192)
!1763 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1764, size: 64)
!1764 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !171, line: 3320, size: 192, elements: !1765)
!1765 = !{!1766, !1767, !1768}
!1766 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1764, file: !171, line: 3322, baseType: !1763, size: 64)
!1767 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1764, file: !171, line: 3323, baseType: !1763, size: 64, offset: 64)
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1764, file: !171, line: 3324, baseType: !976, size: 64, offset: 128)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !1759, file: !171, line: 3331, baseType: !1763, size: 64, offset: 256)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !978, file: !171, line: 3402, baseType: !1771, size: 256)
!1771 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !171, line: 1540, size: 256, elements: !1772)
!1772 = !{!1773, !1774}
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1771, file: !171, line: 1541, baseType: !1014, size: 192)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !1771, file: !171, line: 1542, baseType: !1775, size: 64, offset: 192)
!1775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1776, size: 64)
!1776 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !171, line: 1538, baseType: !1777)
!1777 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !171, line: 1538, size: 192, elements: !1778)
!1778 = !{!1779}
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1777, file: !171, line: 1538, baseType: !1780, size: 192)
!1780 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !171, line: 1537, baseType: !1781)
!1781 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !171, line: 1537, size: 192, elements: !1782)
!1782 = !{!1783, !1784, !1785}
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1781, file: !171, line: 1537, baseType: !7, size: 32)
!1784 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1781, file: !171, line: 1537, baseType: !7, size: 32, offset: 32)
!1785 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1781, file: !171, line: 1537, baseType: !1786, size: 128, offset: 64)
!1786 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1787, size: 128, elements: !835)
!1787 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !171, line: 1535, baseType: !1788)
!1788 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !171, line: 1532, size: 128, elements: !1789)
!1789 = !{!1790, !1791}
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1788, file: !171, line: 1533, baseType: !976, size: 64)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1788, file: !171, line: 1534, baseType: !976, size: 64, offset: 64)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !978, file: !171, line: 3403, baseType: !1793, size: 512)
!1793 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !171, line: 1938, size: 512, elements: !1794)
!1794 = !{!1795, !1796, !1797, !1798, !1804, !1805, !1806}
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1793, file: !171, line: 1939, baseType: !1014, size: 192)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1793, file: !171, line: 1940, baseType: !1096, size: 32, offset: 192)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1793, file: !171, line: 1941, baseType: !170, size: 32, offset: 224)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1793, file: !171, line: 1946, baseType: !1799, size: 32, offset: 256)
!1799 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !171, line: 1942, size: 32, elements: !1800)
!1800 = !{!1801, !1802, !1803}
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !1799, file: !171, line: 1943, baseType: !189, size: 32)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !1799, file: !171, line: 1944, baseType: !196, size: 32)
!1803 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !1799, file: !171, line: 1945, baseType: !203, size: 32)
!1804 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !1793, file: !171, line: 1950, baseType: !1419, size: 64, offset: 320)
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !1793, file: !171, line: 1951, baseType: !1419, size: 64, offset: 384)
!1806 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !1793, file: !171, line: 1953, baseType: !1367, size: 64, offset: 448)
!1807 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !978, file: !171, line: 3404, baseType: !1808, size: 1664)
!1808 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !171, line: 3337, size: 1664, elements: !1809)
!1809 = !{!1810, !1811}
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1808, file: !171, line: 3338, baseType: !1014, size: 192)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1808, file: !171, line: 3341, baseType: !1812, size: 1472, offset: 192)
!1812 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !1813, line: 410, size: 1472, elements: !1814)
!1813 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1814 = !{!1815, !1816, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824, !1825, !1826, !1827, !1828, !1829, !1830, !1831, !1832, !1833, !1834, !1835, !1836, !1837, !1838, !1839, !1840, !1841, !1842, !1843, !1844, !1845, !1846, !1847, !1848, !1849, !1850, !1851, !1852, !1853, !1854, !1855, !1856, !1857, !1858, !1859, !1860, !1861, !1862, !1863, !1864, !1865, !1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1883, !1884, !1885, !1886, !1887, !1888, !1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905, !1906, !1907, !1908, !1909, !1910, !1911, !1912, !1913, !1914, !1915, !1916, !1917, !1918, !1919, !1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930, !1931, !1932, !1933, !1934, !1935, !1936, !1937, !1938, !1939, !1940, !1941, !1942, !1943, !1944, !1945, !1946, !1947, !1948, !1949, !1950, !1951, !1952, !1953, !1954, !1955, !1956, !1957, !1958, !1959, !1960, !1961, !1962, !1963, !1964, !1965, !1966, !1967, !1968, !1969, !1970, !1971, !1972, !1973, !1974, !1975, !1976, !1977}
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !1812, file: !1813, line: 412, baseType: !804, size: 32)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !1812, file: !1813, line: 413, baseType: !804, size: 32, offset: 32)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !1812, file: !1813, line: 414, baseType: !804, size: 32, offset: 64)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !1812, file: !1813, line: 415, baseType: !804, size: 32, offset: 96)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !1812, file: !1813, line: 416, baseType: !804, size: 32, offset: 128)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !1812, file: !1813, line: 417, baseType: !804, size: 32, offset: 160)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !1812, file: !1813, line: 418, baseType: !1088, size: 8, offset: 192)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !1812, file: !1813, line: 419, baseType: !1088, size: 8, offset: 200)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !1812, file: !1813, line: 420, baseType: !832, size: 8, offset: 208)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !1812, file: !1813, line: 421, baseType: !832, size: 8, offset: 216)
!1825 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !1812, file: !1813, line: 422, baseType: !832, size: 8, offset: 224)
!1826 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !1812, file: !1813, line: 423, baseType: !832, size: 8, offset: 232)
!1827 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !1812, file: !1813, line: 424, baseType: !832, size: 8, offset: 240)
!1828 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !1812, file: !1813, line: 425, baseType: !832, size: 8, offset: 248)
!1829 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !1812, file: !1813, line: 426, baseType: !832, size: 8, offset: 256)
!1830 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !1812, file: !1813, line: 427, baseType: !832, size: 8, offset: 264)
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !1812, file: !1813, line: 428, baseType: !832, size: 8, offset: 272)
!1832 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !1812, file: !1813, line: 429, baseType: !832, size: 8, offset: 280)
!1833 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !1812, file: !1813, line: 430, baseType: !832, size: 8, offset: 288)
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !1812, file: !1813, line: 431, baseType: !832, size: 8, offset: 296)
!1835 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !1812, file: !1813, line: 432, baseType: !832, size: 8, offset: 304)
!1836 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !1812, file: !1813, line: 433, baseType: !832, size: 8, offset: 312)
!1837 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !1812, file: !1813, line: 434, baseType: !832, size: 8, offset: 320)
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !1812, file: !1813, line: 435, baseType: !832, size: 8, offset: 328)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !1812, file: !1813, line: 436, baseType: !832, size: 8, offset: 336)
!1840 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !1812, file: !1813, line: 437, baseType: !832, size: 8, offset: 344)
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !1812, file: !1813, line: 438, baseType: !832, size: 8, offset: 352)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !1812, file: !1813, line: 439, baseType: !832, size: 8, offset: 360)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !1812, file: !1813, line: 440, baseType: !832, size: 8, offset: 368)
!1844 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !1812, file: !1813, line: 441, baseType: !832, size: 8, offset: 376)
!1845 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !1812, file: !1813, line: 442, baseType: !832, size: 8, offset: 384)
!1846 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !1812, file: !1813, line: 443, baseType: !832, size: 8, offset: 392)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !1812, file: !1813, line: 444, baseType: !832, size: 8, offset: 400)
!1848 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !1812, file: !1813, line: 445, baseType: !832, size: 8, offset: 408)
!1849 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !1812, file: !1813, line: 446, baseType: !832, size: 8, offset: 416)
!1850 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !1812, file: !1813, line: 447, baseType: !832, size: 8, offset: 424)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !1812, file: !1813, line: 448, baseType: !832, size: 8, offset: 432)
!1852 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !1812, file: !1813, line: 449, baseType: !832, size: 8, offset: 440)
!1853 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !1812, file: !1813, line: 450, baseType: !832, size: 8, offset: 448)
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !1812, file: !1813, line: 451, baseType: !832, size: 8, offset: 456)
!1855 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !1812, file: !1813, line: 452, baseType: !832, size: 8, offset: 464)
!1856 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !1812, file: !1813, line: 453, baseType: !832, size: 8, offset: 472)
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !1812, file: !1813, line: 454, baseType: !832, size: 8, offset: 480)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !1812, file: !1813, line: 455, baseType: !832, size: 8, offset: 488)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !1812, file: !1813, line: 456, baseType: !832, size: 8, offset: 496)
!1860 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !1812, file: !1813, line: 457, baseType: !832, size: 8, offset: 504)
!1861 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !1812, file: !1813, line: 458, baseType: !832, size: 8, offset: 512)
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !1812, file: !1813, line: 459, baseType: !832, size: 8, offset: 520)
!1863 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !1812, file: !1813, line: 460, baseType: !832, size: 8, offset: 528)
!1864 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !1812, file: !1813, line: 461, baseType: !832, size: 8, offset: 536)
!1865 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !1812, file: !1813, line: 462, baseType: !832, size: 8, offset: 544)
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !1812, file: !1813, line: 463, baseType: !832, size: 8, offset: 552)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !1812, file: !1813, line: 464, baseType: !832, size: 8, offset: 560)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !1812, file: !1813, line: 465, baseType: !832, size: 8, offset: 568)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !1812, file: !1813, line: 466, baseType: !832, size: 8, offset: 576)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !1812, file: !1813, line: 467, baseType: !832, size: 8, offset: 584)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !1812, file: !1813, line: 468, baseType: !832, size: 8, offset: 592)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !1812, file: !1813, line: 469, baseType: !832, size: 8, offset: 600)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !1812, file: !1813, line: 470, baseType: !832, size: 8, offset: 608)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !1812, file: !1813, line: 471, baseType: !832, size: 8, offset: 616)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !1812, file: !1813, line: 472, baseType: !832, size: 8, offset: 624)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !1812, file: !1813, line: 473, baseType: !832, size: 8, offset: 632)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !1812, file: !1813, line: 474, baseType: !832, size: 8, offset: 640)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !1812, file: !1813, line: 475, baseType: !832, size: 8, offset: 648)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !1812, file: !1813, line: 476, baseType: !832, size: 8, offset: 656)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !1812, file: !1813, line: 477, baseType: !832, size: 8, offset: 664)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !1812, file: !1813, line: 478, baseType: !832, size: 8, offset: 672)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !1812, file: !1813, line: 479, baseType: !832, size: 8, offset: 680)
!1883 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !1812, file: !1813, line: 480, baseType: !832, size: 8, offset: 688)
!1884 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !1812, file: !1813, line: 481, baseType: !832, size: 8, offset: 696)
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !1812, file: !1813, line: 482, baseType: !832, size: 8, offset: 704)
!1886 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !1812, file: !1813, line: 483, baseType: !832, size: 8, offset: 712)
!1887 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !1812, file: !1813, line: 484, baseType: !832, size: 8, offset: 720)
!1888 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !1812, file: !1813, line: 485, baseType: !832, size: 8, offset: 728)
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !1812, file: !1813, line: 486, baseType: !832, size: 8, offset: 736)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !1812, file: !1813, line: 487, baseType: !832, size: 8, offset: 744)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !1812, file: !1813, line: 488, baseType: !832, size: 8, offset: 752)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !1812, file: !1813, line: 489, baseType: !832, size: 8, offset: 760)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !1812, file: !1813, line: 490, baseType: !832, size: 8, offset: 768)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !1812, file: !1813, line: 491, baseType: !832, size: 8, offset: 776)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !1812, file: !1813, line: 492, baseType: !832, size: 8, offset: 784)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !1812, file: !1813, line: 493, baseType: !832, size: 8, offset: 792)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !1812, file: !1813, line: 494, baseType: !832, size: 8, offset: 800)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !1812, file: !1813, line: 495, baseType: !832, size: 8, offset: 808)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !1812, file: !1813, line: 496, baseType: !832, size: 8, offset: 816)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !1812, file: !1813, line: 497, baseType: !832, size: 8, offset: 824)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !1812, file: !1813, line: 498, baseType: !832, size: 8, offset: 832)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !1812, file: !1813, line: 499, baseType: !832, size: 8, offset: 840)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !1812, file: !1813, line: 500, baseType: !832, size: 8, offset: 848)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !1812, file: !1813, line: 501, baseType: !832, size: 8, offset: 856)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !1812, file: !1813, line: 502, baseType: !832, size: 8, offset: 864)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !1812, file: !1813, line: 503, baseType: !832, size: 8, offset: 872)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !1812, file: !1813, line: 504, baseType: !832, size: 8, offset: 880)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !1812, file: !1813, line: 505, baseType: !832, size: 8, offset: 888)
!1909 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !1812, file: !1813, line: 506, baseType: !832, size: 8, offset: 896)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !1812, file: !1813, line: 507, baseType: !832, size: 8, offset: 904)
!1911 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !1812, file: !1813, line: 508, baseType: !832, size: 8, offset: 912)
!1912 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !1812, file: !1813, line: 509, baseType: !832, size: 8, offset: 920)
!1913 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !1812, file: !1813, line: 510, baseType: !832, size: 8, offset: 928)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !1812, file: !1813, line: 511, baseType: !832, size: 8, offset: 936)
!1915 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !1812, file: !1813, line: 512, baseType: !832, size: 8, offset: 944)
!1916 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !1812, file: !1813, line: 513, baseType: !832, size: 8, offset: 952)
!1917 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !1812, file: !1813, line: 514, baseType: !832, size: 8, offset: 960)
!1918 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !1812, file: !1813, line: 515, baseType: !832, size: 8, offset: 968)
!1919 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !1812, file: !1813, line: 516, baseType: !832, size: 8, offset: 976)
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !1812, file: !1813, line: 517, baseType: !832, size: 8, offset: 984)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !1812, file: !1813, line: 518, baseType: !832, size: 8, offset: 992)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !1812, file: !1813, line: 519, baseType: !832, size: 8, offset: 1000)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !1812, file: !1813, line: 520, baseType: !832, size: 8, offset: 1008)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !1812, file: !1813, line: 521, baseType: !832, size: 8, offset: 1016)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !1812, file: !1813, line: 522, baseType: !832, size: 8, offset: 1024)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !1812, file: !1813, line: 523, baseType: !832, size: 8, offset: 1032)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !1812, file: !1813, line: 524, baseType: !832, size: 8, offset: 1040)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !1812, file: !1813, line: 525, baseType: !832, size: 8, offset: 1048)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !1812, file: !1813, line: 526, baseType: !832, size: 8, offset: 1056)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !1812, file: !1813, line: 527, baseType: !832, size: 8, offset: 1064)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !1812, file: !1813, line: 528, baseType: !832, size: 8, offset: 1072)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !1812, file: !1813, line: 529, baseType: !832, size: 8, offset: 1080)
!1933 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !1812, file: !1813, line: 530, baseType: !832, size: 8, offset: 1088)
!1934 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !1812, file: !1813, line: 531, baseType: !832, size: 8, offset: 1096)
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !1812, file: !1813, line: 532, baseType: !832, size: 8, offset: 1104)
!1936 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !1812, file: !1813, line: 533, baseType: !832, size: 8, offset: 1112)
!1937 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !1812, file: !1813, line: 534, baseType: !832, size: 8, offset: 1120)
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !1812, file: !1813, line: 535, baseType: !832, size: 8, offset: 1128)
!1939 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !1812, file: !1813, line: 536, baseType: !832, size: 8, offset: 1136)
!1940 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !1812, file: !1813, line: 537, baseType: !832, size: 8, offset: 1144)
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !1812, file: !1813, line: 538, baseType: !832, size: 8, offset: 1152)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !1812, file: !1813, line: 539, baseType: !832, size: 8, offset: 1160)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !1812, file: !1813, line: 540, baseType: !832, size: 8, offset: 1168)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !1812, file: !1813, line: 541, baseType: !832, size: 8, offset: 1176)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !1812, file: !1813, line: 542, baseType: !832, size: 8, offset: 1184)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !1812, file: !1813, line: 543, baseType: !832, size: 8, offset: 1192)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !1812, file: !1813, line: 544, baseType: !832, size: 8, offset: 1200)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !1812, file: !1813, line: 545, baseType: !832, size: 8, offset: 1208)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !1812, file: !1813, line: 546, baseType: !832, size: 8, offset: 1216)
!1950 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !1812, file: !1813, line: 547, baseType: !832, size: 8, offset: 1224)
!1951 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !1812, file: !1813, line: 548, baseType: !832, size: 8, offset: 1232)
!1952 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !1812, file: !1813, line: 549, baseType: !832, size: 8, offset: 1240)
!1953 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !1812, file: !1813, line: 550, baseType: !832, size: 8, offset: 1248)
!1954 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !1812, file: !1813, line: 551, baseType: !832, size: 8, offset: 1256)
!1955 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !1812, file: !1813, line: 552, baseType: !832, size: 8, offset: 1264)
!1956 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !1812, file: !1813, line: 553, baseType: !832, size: 8, offset: 1272)
!1957 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !1812, file: !1813, line: 554, baseType: !832, size: 8, offset: 1280)
!1958 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !1812, file: !1813, line: 555, baseType: !832, size: 8, offset: 1288)
!1959 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !1812, file: !1813, line: 556, baseType: !832, size: 8, offset: 1296)
!1960 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !1812, file: !1813, line: 557, baseType: !832, size: 8, offset: 1304)
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !1812, file: !1813, line: 558, baseType: !832, size: 8, offset: 1312)
!1962 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !1812, file: !1813, line: 559, baseType: !832, size: 8, offset: 1320)
!1963 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !1812, file: !1813, line: 560, baseType: !832, size: 8, offset: 1328)
!1964 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !1812, file: !1813, line: 561, baseType: !832, size: 8, offset: 1336)
!1965 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !1812, file: !1813, line: 562, baseType: !832, size: 8, offset: 1344)
!1966 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !1812, file: !1813, line: 563, baseType: !832, size: 8, offset: 1352)
!1967 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !1812, file: !1813, line: 564, baseType: !832, size: 8, offset: 1360)
!1968 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !1812, file: !1813, line: 565, baseType: !832, size: 8, offset: 1368)
!1969 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !1812, file: !1813, line: 566, baseType: !832, size: 8, offset: 1376)
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !1812, file: !1813, line: 567, baseType: !832, size: 8, offset: 1384)
!1971 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !1812, file: !1813, line: 568, baseType: !832, size: 8, offset: 1392)
!1972 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !1812, file: !1813, line: 569, baseType: !832, size: 8, offset: 1400)
!1973 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !1812, file: !1813, line: 570, baseType: !832, size: 8, offset: 1408)
!1974 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !1812, file: !1813, line: 571, baseType: !832, size: 8, offset: 1416)
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !1812, file: !1813, line: 572, baseType: !832, size: 8, offset: 1424)
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !1812, file: !1813, line: 573, baseType: !832, size: 8, offset: 1432)
!1977 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !1812, file: !1813, line: 574, baseType: !832, size: 8, offset: 1440)
!1978 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !978, file: !171, line: 3405, baseType: !1979, size: 384)
!1979 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !171, line: 3352, size: 384, elements: !1980)
!1980 = !{!1981, !1982}
!1981 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1979, file: !171, line: 3353, baseType: !1014, size: 192)
!1982 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1979, file: !171, line: 3356, baseType: !1983, size: 192, offset: 192)
!1983 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !1813, line: 578, size: 192, elements: !1984)
!1984 = !{!1985, !1986, !1987, !1988, !1989, !1990, !1991, !1992, !1993, !1994, !1995}
!1985 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !1983, file: !1813, line: 580, baseType: !804, size: 32)
!1986 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !1983, file: !1813, line: 581, baseType: !804, size: 32, offset: 32)
!1987 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !1983, file: !1813, line: 582, baseType: !804, size: 32, offset: 64)
!1988 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !1983, file: !1813, line: 583, baseType: !804, size: 32, offset: 96)
!1989 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !1983, file: !1813, line: 584, baseType: !1088, size: 8, offset: 128)
!1990 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !1983, file: !1813, line: 585, baseType: !1088, size: 8, offset: 136)
!1991 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !1983, file: !1813, line: 586, baseType: !1088, size: 8, offset: 144)
!1992 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !1983, file: !1813, line: 587, baseType: !1088, size: 8, offset: 152)
!1993 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !1983, file: !1813, line: 588, baseType: !1088, size: 8, offset: 160)
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !1983, file: !1813, line: 589, baseType: !1088, size: 8, offset: 168)
!1995 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !1983, file: !1813, line: 590, baseType: !1088, size: 8, offset: 176)
!1996 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !881, file: !398, line: 178, baseType: !1393, size: 64)
!1997 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !881, file: !398, line: 179, baseType: !1998, size: 64)
!1998 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1999, size: 64)
!1999 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !398, line: 150, baseType: !2000)
!2000 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !398, line: 142, size: 320, elements: !2001)
!2001 = !{!2002, !2003, !2004, !2005, !2006, !2007}
!2002 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !2000, file: !398, line: 144, baseType: !976, size: 64)
!2003 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2000, file: !398, line: 145, baseType: !889, size: 64, offset: 64)
!2004 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2000, file: !398, line: 146, baseType: !889, size: 64, offset: 128)
!2005 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2000, file: !398, line: 147, baseType: !1662, size: 32, offset: 192)
!2006 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2000, file: !398, line: 148, baseType: !7, size: 32, offset: 224)
!2007 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !2000, file: !398, line: 149, baseType: !1088, size: 8, offset: 256)
!2008 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !881, file: !398, line: 180, baseType: !2009, size: 64)
!2009 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2010, size: 64)
!2010 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !398, line: 162, baseType: !2011)
!2011 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !398, line: 159, size: 128, elements: !2012)
!2012 = !{!2013, !2014}
!2013 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2011, file: !398, line: 160, baseType: !976, size: 64)
!2014 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2011, file: !398, line: 161, baseType: !828, size: 64, offset: 64)
!2015 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !881, file: !398, line: 181, baseType: !2016, size: 64)
!2016 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2017, size: 64)
!2017 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !398, line: 181, flags: DIFlagFwdDecl)
!2018 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !876, file: !398, line: 317, baseType: !2019, size: 64)
!2019 = !DICompositeType(tag: DW_TAG_array_type, baseType: !828, size: 64, elements: !835)
!2020 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !876, file: !398, line: 318, baseType: !2021, size: 320)
!2021 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !398, line: 188, size: 320, elements: !2022)
!2022 = !{!2023, !2025, !2080}
!2023 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !2021, file: !398, line: 190, baseType: !2024, size: 192)
!2024 = !DICompositeType(tag: DW_TAG_array_type, baseType: !880, size: 192, elements: !1047)
!2025 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2021, file: !398, line: 193, baseType: !2026, size: 64, offset: 192)
!2026 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2027, size: 64)
!2027 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !398, line: 206, size: 320, elements: !2028)
!2028 = !{!2029, !2065, !2066, !2067, !2079}
!2029 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !2027, file: !398, line: 208, baseType: !2030, size: 64)
!2030 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2031, size: 64)
!2031 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !788, line: 62, baseType: !2032)
!2032 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !2033, line: 538, size: 256, elements: !2034)
!2033 = !DIFile(filename: "./output.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2034 = !{!2035, !2039, !2045, !2056}
!2035 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2032, file: !2033, line: 539, baseType: !2036, size: 32)
!2036 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "section_common", file: !2033, line: 482, size: 32, elements: !2037)
!2037 = !{!2038}
!2038 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2036, file: !2033, line: 484, baseType: !7, size: 32)
!2039 = !DIDerivedType(tag: DW_TAG_member, name: "named", scope: !2032, file: !2033, line: 540, baseType: !2040, size: 192)
!2040 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "named_section", file: !2033, line: 488, size: 192, elements: !2041)
!2041 = !{!2042, !2043, !2044}
!2042 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2040, file: !2033, line: 489, baseType: !2036, size: 32)
!2043 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2040, file: !2033, line: 492, baseType: !886, size: 64, offset: 64)
!2044 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2040, file: !2033, line: 496, baseType: !976, size: 64, offset: 128)
!2045 = !DIDerivedType(tag: DW_TAG_member, name: "unnamed", scope: !2032, file: !2033, line: 541, baseType: !2046, size: 256)
!2046 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "unnamed_section", file: !2033, line: 504, size: 256, elements: !2047)
!2047 = !{!2048, !2049, !2054, !2055}
!2048 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2046, file: !2033, line: 505, baseType: !2036, size: 32)
!2049 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !2046, file: !2033, line: 509, baseType: !2050, size: 64, offset: 64)
!2050 = !DIDerivedType(tag: DW_TAG_typedef, name: "unnamed_section_callback", file: !2033, line: 501, baseType: !2051)
!2051 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2052, size: 64)
!2052 = !DISubroutineType(types: !2053)
!2053 = !{null, !1317}
!2054 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !2046, file: !2033, line: 510, baseType: !1317, size: 64, offset: 128)
!2055 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2046, file: !2033, line: 513, baseType: !2030, size: 64, offset: 192)
!2056 = !DIDerivedType(tag: DW_TAG_member, name: "noswitch", scope: !2032, file: !2033, line: 542, baseType: !2057, size: 128)
!2057 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "noswitch_section", file: !2033, line: 530, size: 128, elements: !2058)
!2058 = !{!2059, !2060}
!2059 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2057, file: !2033, line: 531, baseType: !2036, size: 32)
!2060 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !2057, file: !2033, line: 534, baseType: !2061, size: 64, offset: 64)
!2061 = !DIDerivedType(tag: DW_TAG_typedef, name: "noswitch_section_callback", file: !2033, line: 525, baseType: !2062)
!2062 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2063, size: 64)
!2063 = !DISubroutineType(types: !2064)
!2064 = !{!1088, !976, !886, !854, !854}
!2065 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !2027, file: !398, line: 211, baseType: !7, size: 32, offset: 64)
!2066 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2027, file: !398, line: 214, baseType: !828, size: 64, offset: 128)
!2067 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !2027, file: !398, line: 224, baseType: !2068, size: 64, offset: 192)
!2068 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2069, size: 64)
!2069 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !398, line: 202, baseType: !2070)
!2070 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !398, line: 202, size: 128, elements: !2071)
!2071 = !{!2072}
!2072 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2070, file: !398, line: 202, baseType: !2073, size: 128)
!2073 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !398, line: 200, baseType: !2074)
!2074 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !398, line: 200, size: 128, elements: !2075)
!2075 = !{!2076, !2077, !2078}
!2076 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2074, file: !398, line: 200, baseType: !7, size: 32)
!2077 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2074, file: !398, line: 200, baseType: !7, size: 32, offset: 32)
!2078 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2074, file: !398, line: 200, baseType: !898, size: 64, offset: 64)
!2079 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !2027, file: !398, line: 234, baseType: !2068, size: 64, offset: 256)
!2080 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2021, file: !398, line: 197, baseType: !828, size: 64, offset: 256)
!2081 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !876, file: !398, line: 319, baseType: !1036, size: 256)
!2082 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !876, file: !398, line: 320, baseType: !1055, size: 192)
!2083 = !{}
!2084 = !{!2085, !2086, !2087}
!2085 = !DIEnumerator(name: "NOT_IN_BB", value: 0, isUnsigned: true)
!2086 = !DIEnumerator(name: "IN_ONE_BB", value: 1, isUnsigned: true)
!2087 = !DIEnumerator(name: "IN_MULTIPLE_BB", value: 2, isUnsigned: true)
!2088 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "br_predictor", file: !2089, line: 24, baseType: !7, size: 32, elements: !2090)
!2089 = !DIFile(filename: "./predict.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2090 = !{!2091, !2092, !2093, !2094, !2095, !2096, !2097, !2098, !2099, !2100, !2101, !2102, !2103, !2104, !2105, !2106, !2107, !2108, !2109, !2110, !2111, !2112, !2113, !2114, !2115, !2116, !2117, !2118, !2119}
!2091 = !DIEnumerator(name: "PRED_COMBINED", value: 0, isUnsigned: true)
!2092 = !DIEnumerator(name: "PRED_DS_THEORY", value: 1, isUnsigned: true)
!2093 = !DIEnumerator(name: "PRED_FIRST_MATCH", value: 2, isUnsigned: true)
!2094 = !DIEnumerator(name: "PRED_NO_PREDICTION", value: 3, isUnsigned: true)
!2095 = !DIEnumerator(name: "PRED_UNCONDITIONAL", value: 4, isUnsigned: true)
!2096 = !DIEnumerator(name: "PRED_LOOP_ITERATIONS", value: 5, isUnsigned: true)
!2097 = !DIEnumerator(name: "PRED_BUILTIN_EXPECT", value: 6, isUnsigned: true)
!2098 = !DIEnumerator(name: "PRED_LOOP_ITERATIONS_GUESSED", value: 7, isUnsigned: true)
!2099 = !DIEnumerator(name: "PRED_CONTINUE", value: 8, isUnsigned: true)
!2100 = !DIEnumerator(name: "PRED_NORETURN", value: 9, isUnsigned: true)
!2101 = !DIEnumerator(name: "PRED_COLD_FUNCTION", value: 10, isUnsigned: true)
!2102 = !DIEnumerator(name: "PRED_LOOP_BRANCH", value: 11, isUnsigned: true)
!2103 = !DIEnumerator(name: "PRED_LOOP_EXIT", value: 12, isUnsigned: true)
!2104 = !DIEnumerator(name: "PRED_POINTER", value: 13, isUnsigned: true)
!2105 = !DIEnumerator(name: "PRED_TREE_POINTER", value: 14, isUnsigned: true)
!2106 = !DIEnumerator(name: "PRED_OPCODE_POSITIVE", value: 15, isUnsigned: true)
!2107 = !DIEnumerator(name: "PRED_OPCODE_NONEQUAL", value: 16, isUnsigned: true)
!2108 = !DIEnumerator(name: "PRED_FPOPCODE", value: 17, isUnsigned: true)
!2109 = !DIEnumerator(name: "PRED_TREE_OPCODE_POSITIVE", value: 18, isUnsigned: true)
!2110 = !DIEnumerator(name: "PRED_TREE_OPCODE_NONEQUAL", value: 19, isUnsigned: true)
!2111 = !DIEnumerator(name: "PRED_TREE_FPOPCODE", value: 20, isUnsigned: true)
!2112 = !DIEnumerator(name: "PRED_CALL", value: 21, isUnsigned: true)
!2113 = !DIEnumerator(name: "PRED_TREE_EARLY_RETURN", value: 22, isUnsigned: true)
!2114 = !DIEnumerator(name: "PRED_GOTO", value: 23, isUnsigned: true)
!2115 = !DIEnumerator(name: "PRED_CONST_RETURN", value: 24, isUnsigned: true)
!2116 = !DIEnumerator(name: "PRED_NEGATIVE_RETURN", value: 25, isUnsigned: true)
!2117 = !DIEnumerator(name: "PRED_NULL_RETURN", value: 26, isUnsigned: true)
!2118 = !DIEnumerator(name: "PRED_MUDFLAP", value: 27, isUnsigned: true)
!2119 = !DIEnumerator(name: "END_PREDICTORS", value: 28, isUnsigned: true)
!2120 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "global_rtl_index", file: !398, line: 1994, baseType: !7, size: 32, elements: !2121)
!2121 = !{!2122, !2123, !2124, !2125, !2126, !2127, !2128, !2129, !2130, !2131, !2132, !2133}
!2122 = !DIEnumerator(name: "GR_PC", value: 0, isUnsigned: true)
!2123 = !DIEnumerator(name: "GR_CC0", value: 1, isUnsigned: true)
!2124 = !DIEnumerator(name: "GR_STACK_POINTER", value: 2, isUnsigned: true)
!2125 = !DIEnumerator(name: "GR_FRAME_POINTER", value: 3, isUnsigned: true)
!2126 = !DIEnumerator(name: "GR_HARD_FRAME_POINTER", value: 4, isUnsigned: true)
!2127 = !DIEnumerator(name: "GR_ARG_POINTER", value: 5, isUnsigned: true)
!2128 = !DIEnumerator(name: "GR_VIRTUAL_INCOMING_ARGS", value: 6, isUnsigned: true)
!2129 = !DIEnumerator(name: "GR_VIRTUAL_STACK_ARGS", value: 7, isUnsigned: true)
!2130 = !DIEnumerator(name: "GR_VIRTUAL_STACK_DYNAMIC", value: 8, isUnsigned: true)
!2131 = !DIEnumerator(name: "GR_VIRTUAL_OUTGOING_ARGS", value: 9, isUnsigned: true)
!2132 = !DIEnumerator(name: "GR_VIRTUAL_CFA", value: 10, isUnsigned: true)
!2133 = !DIEnumerator(name: "GR_MAX", value: 11, isUnsigned: true)
!2134 = !{!397, !889, !850, !2135, !2136, !1508, !1397, !7, !854, !806, !852, !804, !1524, !5}
!2135 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1392, size: 64)
!2136 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !793, size: 64)
!2137 = !{!0, !2138, !2262}
!2138 = !DIGlobalVariableExpression(var: !2139, expr: !DIExpression())
!2139 = distinct !DIGlobalVariable(name: "rtl_cfg_hooks", scope: !2, file: !3, line: 3189, type: !2140, isLocal: false, isDefinition: true)
!2140 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cfg_hooks", file: !2141, line: 25, size: 1856, elements: !2142)
!2141 = !DIFile(filename: "./cfghooks.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2142 = !{!2143, !2144, !2148, !2152, !2156, !2160, !2164, !2171, !2175, !2179, !2183, !2184, !2188, !2192, !2199, !2203, !2207, !2211, !2215, !2216, !2220, !2221, !2236, !2237, !2238, !2248, !2252, !2256, !2261}
!2143 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2140, file: !2141, line: 28, baseType: !886, size: 64)
!2144 = !DIDerivedType(tag: DW_TAG_member, name: "verify_flow_info", scope: !2140, file: !2141, line: 31, baseType: !2145, size: 64, offset: 64)
!2145 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2146, size: 64)
!2146 = !DISubroutineType(types: !2147)
!2147 = !{!804}
!2148 = !DIDerivedType(tag: DW_TAG_member, name: "dump_bb", scope: !2140, file: !2141, line: 32, baseType: !2149, size: 64, offset: 128)
!2149 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2150, size: 64)
!2150 = !DISubroutineType(types: !2151)
!2151 = !{null, !1392, !797, !804, !804}
!2152 = !DIDerivedType(tag: DW_TAG_member, name: "create_basic_block", scope: !2140, file: !2141, line: 37, baseType: !2153, size: 64, offset: 192)
!2153 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2154, size: 64)
!2154 = !DISubroutineType(types: !2155)
!2155 = !{!1392, !850, !850, !1392}
!2156 = !DIDerivedType(tag: DW_TAG_member, name: "redirect_edge_and_branch", scope: !2140, file: !2141, line: 43, baseType: !2157, size: 64, offset: 256)
!2157 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2158, size: 64)
!2158 = !DISubroutineType(types: !2159)
!2159 = !{!1409, !1409, !1392}
!2160 = !DIDerivedType(tag: DW_TAG_member, name: "redirect_edge_and_branch_force", scope: !2140, file: !2141, line: 48, baseType: !2161, size: 64, offset: 320)
!2161 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2162, size: 64)
!2162 = !DISubroutineType(types: !2163)
!2163 = !{!1392, !1409, !1392}
!2164 = !DIDerivedType(tag: DW_TAG_member, name: "can_remove_branch_p", scope: !2140, file: !2141, line: 52, baseType: !2165, size: 64, offset: 384)
!2165 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2166, size: 64)
!2166 = !DISubroutineType(types: !2167)
!2167 = !{!1088, !2168}
!2168 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_edge", file: !788, line: 109, baseType: !2169)
!2169 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2170, size: 64)
!2170 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1411)
!2171 = !DIDerivedType(tag: DW_TAG_member, name: "delete_basic_block", scope: !2140, file: !2141, line: 55, baseType: !2172, size: 64, offset: 448)
!2172 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2173, size: 64)
!2173 = !DISubroutineType(types: !2174)
!2174 = !{null, !1392}
!2175 = !DIDerivedType(tag: DW_TAG_member, name: "split_block", scope: !2140, file: !2141, line: 59, baseType: !2176, size: 64, offset: 512)
!2176 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2177, size: 64)
!2177 = !DISubroutineType(types: !2178)
!2178 = !{!1392, !1392, !850}
!2179 = !DIDerivedType(tag: DW_TAG_member, name: "move_block_after", scope: !2140, file: !2141, line: 62, baseType: !2180, size: 64, offset: 576)
!2180 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2181, size: 64)
!2181 = !DISubroutineType(types: !2182)
!2182 = !{!1088, !1392, !1392}
!2183 = !DIDerivedType(tag: DW_TAG_member, name: "can_merge_blocks_p", scope: !2140, file: !2141, line: 65, baseType: !2180, size: 64, offset: 640)
!2184 = !DIDerivedType(tag: DW_TAG_member, name: "merge_blocks", scope: !2140, file: !2141, line: 68, baseType: !2185, size: 64, offset: 704)
!2185 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2186, size: 64)
!2186 = !DISubroutineType(types: !2187)
!2187 = !{null, !1392, !1392}
!2188 = !DIDerivedType(tag: DW_TAG_member, name: "predict_edge", scope: !2140, file: !2141, line: 71, baseType: !2189, size: 64, offset: 768)
!2189 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2190, size: 64)
!2190 = !DISubroutineType(types: !2191)
!2191 = !{null, !1409, !2088, !804}
!2192 = !DIDerivedType(tag: DW_TAG_member, name: "predicted_by_p", scope: !2140, file: !2141, line: 75, baseType: !2193, size: 64, offset: 832)
!2193 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2194, size: 64)
!2194 = !DISubroutineType(types: !2195)
!2195 = !{!1088, !2196, !2088}
!2196 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !788, line: 112, baseType: !2197)
!2197 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2198, size: 64)
!2198 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1394)
!2199 = !DIDerivedType(tag: DW_TAG_member, name: "can_duplicate_block_p", scope: !2140, file: !2141, line: 78, baseType: !2200, size: 64, offset: 896)
!2200 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2201, size: 64)
!2201 = !DISubroutineType(types: !2202)
!2202 = !{!1088, !2196}
!2203 = !DIDerivedType(tag: DW_TAG_member, name: "duplicate_block", scope: !2140, file: !2141, line: 81, baseType: !2204, size: 64, offset: 960)
!2204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2205, size: 64)
!2205 = !DISubroutineType(types: !2206)
!2206 = !{!1392, !1392}
!2207 = !DIDerivedType(tag: DW_TAG_member, name: "split_edge", scope: !2140, file: !2141, line: 85, baseType: !2208, size: 64, offset: 1024)
!2208 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2209, size: 64)
!2209 = !DISubroutineType(types: !2210)
!2210 = !{!1392, !1409}
!2211 = !DIDerivedType(tag: DW_TAG_member, name: "make_forwarder_block", scope: !2140, file: !2141, line: 86, baseType: !2212, size: 64, offset: 1088)
!2212 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2213, size: 64)
!2213 = !DISubroutineType(types: !2214)
!2214 = !{null, !1409}
!2215 = !DIDerivedType(tag: DW_TAG_member, name: "tidy_fallthru_edge", scope: !2140, file: !2141, line: 89, baseType: !2212, size: 64, offset: 1152)
!2216 = !DIDerivedType(tag: DW_TAG_member, name: "block_ends_with_call_p", scope: !2140, file: !2141, line: 93, baseType: !2217, size: 64, offset: 1216)
!2217 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2218, size: 64)
!2218 = !DISubroutineType(types: !2219)
!2219 = !{!1088, !1392}
!2220 = !DIDerivedType(tag: DW_TAG_member, name: "block_ends_with_condjump_p", scope: !2140, file: !2141, line: 97, baseType: !2200, size: 64, offset: 1280)
!2221 = !DIDerivedType(tag: DW_TAG_member, name: "flow_call_edges_add", scope: !2140, file: !2141, line: 106, baseType: !2222, size: 64, offset: 1344)
!2222 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2223, size: 64)
!2223 = !DISubroutineType(types: !2224)
!2224 = !{!804, !2225}
!2225 = !DIDerivedType(tag: DW_TAG_typedef, name: "sbitmap", file: !2226, line: 45, baseType: !2227)
!2226 = !DIFile(filename: "./sbitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2227 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2228, size: 64)
!2228 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "simple_bitmap_def", file: !2226, line: 39, size: 192, elements: !2229)
!2229 = !{!2230, !2232, !2233, !2234}
!2230 = !DIDerivedType(tag: DW_TAG_member, name: "popcount", scope: !2228, file: !2226, line: 41, baseType: !2231, size: 64)
!2231 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1088, size: 64)
!2232 = !DIDerivedType(tag: DW_TAG_member, name: "n_bits", scope: !2228, file: !2226, line: 42, baseType: !7, size: 32, offset: 64)
!2233 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2228, file: !2226, line: 43, baseType: !7, size: 32, offset: 96)
!2234 = !DIDerivedType(tag: DW_TAG_member, name: "elms", scope: !2228, file: !2226, line: 44, baseType: !2235, size: 64, offset: 128)
!2235 = !DICompositeType(tag: DW_TAG_array_type, baseType: !854, size: 64, elements: !835)
!2236 = !DIDerivedType(tag: DW_TAG_member, name: "execute_on_growing_pred", scope: !2140, file: !2141, line: 110, baseType: !2212, size: 64, offset: 1408)
!2237 = !DIDerivedType(tag: DW_TAG_member, name: "execute_on_shrinking_pred", scope: !2140, file: !2141, line: 114, baseType: !2212, size: 64, offset: 1472)
!2238 = !DIDerivedType(tag: DW_TAG_member, name: "cfg_hook_duplicate_loop_to_header_edge", scope: !2140, file: !2141, line: 118, baseType: !2239, size: 64, offset: 1536)
!2239 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2240, size: 64)
!2240 = !DISubroutineType(types: !2241)
!2241 = !{!1088, !1434, !1409, !7, !2225, !1409, !2242, !804}
!2242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2243, size: 64)
!2243 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2244, size: 64)
!2244 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_heap", file: !155, line: 152, baseType: !2245)
!2245 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_heap", file: !155, line: 152, size: 128, elements: !2246)
!2246 = !{!2247}
!2247 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2245, file: !155, line: 152, baseType: !1402, size: 128)
!2248 = !DIDerivedType(tag: DW_TAG_member, name: "lv_add_condition_to_bb", scope: !2140, file: !2141, line: 125, baseType: !2249, size: 64, offset: 1600)
!2249 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2250, size: 64)
!2250 = !DISubroutineType(types: !2251)
!2251 = !{null, !1392, !1392, !1392, !850}
!2252 = !DIDerivedType(tag: DW_TAG_member, name: "lv_adjust_loop_header_phi", scope: !2140, file: !2141, line: 128, baseType: !2253, size: 64, offset: 1664)
!2253 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2254, size: 64)
!2254 = !DISubroutineType(types: !2255)
!2255 = !{null, !1392, !1392, !1392, !1409}
!2256 = !DIDerivedType(tag: DW_TAG_member, name: "extract_cond_bb_edges", scope: !2140, file: !2141, line: 133, baseType: !2257, size: 64, offset: 1728)
!2257 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2258, size: 64)
!2258 = !DISubroutineType(types: !2259)
!2259 = !{null, !1392, !2260, !2260}
!2260 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1409, size: 64)
!2261 = !DIDerivedType(tag: DW_TAG_member, name: "flush_pending_stmts", scope: !2140, file: !2141, line: 138, baseType: !2212, size: 64, offset: 1792)
!2262 = !DIGlobalVariableExpression(var: !2263, expr: !DIExpression())
!2263 = distinct !DIGlobalVariable(name: "cfg_layout_rtl_cfg_hooks", scope: !2, file: !3, line: 3233, type: !2140, isLocal: false, isDefinition: true)
!2264 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_opt_pass", file: !605, line: 162, size: 640, elements: !2265)
!2265 = !{!2266}
!2266 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !2264, file: !605, line: 164, baseType: !2267, size: 640)
!2267 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "opt_pass", file: !605, line: 114, size: 640, elements: !2268)
!2268 = !{!2269, !2270, !2271, !2275, !2279, !2281, !2282, !2283, !2285, !2286, !2287, !2288, !2289}
!2269 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2267, file: !605, line: 117, baseType: !604, size: 32)
!2270 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2267, file: !605, line: 121, baseType: !886, size: 64, offset: 64)
!2271 = !DIDerivedType(tag: DW_TAG_member, name: "gate", scope: !2267, file: !605, line: 125, baseType: !2272, size: 64, offset: 128)
!2272 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2273, size: 64)
!2273 = !DISubroutineType(types: !2274)
!2274 = !{!1088}
!2275 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !2267, file: !605, line: 130, baseType: !2276, size: 64, offset: 192)
!2276 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2277, size: 64)
!2277 = !DISubroutineType(types: !2278)
!2278 = !{!7}
!2279 = !DIDerivedType(tag: DW_TAG_member, name: "sub", scope: !2267, file: !605, line: 133, baseType: !2280, size: 64, offset: 256)
!2280 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2267, size: 64)
!2281 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2267, file: !605, line: 136, baseType: !2280, size: 64, offset: 320)
!2282 = !DIDerivedType(tag: DW_TAG_member, name: "static_pass_number", scope: !2267, file: !605, line: 139, baseType: !804, size: 32, offset: 384)
!2283 = !DIDerivedType(tag: DW_TAG_member, name: "tv_id", scope: !2267, file: !605, line: 143, baseType: !2284, size: 32, offset: 416)
!2284 = !DIDerivedType(tag: DW_TAG_typedef, name: "timevar_id_t", file: !612, line: 80, baseType: !611)
!2285 = !DIDerivedType(tag: DW_TAG_member, name: "properties_required", scope: !2267, file: !605, line: 146, baseType: !7, size: 32, offset: 448)
!2286 = !DIDerivedType(tag: DW_TAG_member, name: "properties_provided", scope: !2267, file: !605, line: 147, baseType: !7, size: 32, offset: 480)
!2287 = !DIDerivedType(tag: DW_TAG_member, name: "properties_destroyed", scope: !2267, file: !605, line: 148, baseType: !7, size: 32, offset: 512)
!2288 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_start", scope: !2267, file: !605, line: 151, baseType: !7, size: 32, offset: 544)
!2289 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_finish", scope: !2267, file: !605, line: 152, baseType: !7, size: 32, offset: 576)
!2290 = !{i32 7, !"Dwarf Version", i32 4}
!2291 = !{i32 2, !"Debug Info Version", i32 3}
!2292 = !{i32 1, !"wchar_size", i32 4}
!2293 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!2294 = distinct !DISubprogram(name: "delete_insn", scope: !3, file: !3, line: 115, type: !2295, scopeLine: 116, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!2295 = !DISubroutineType(types: !2296)
!2296 = !{!889, !889}
!2297 = !DILocalVariable(name: "insn", arg: 1, scope: !2294, file: !3, line: 115, type: !889)
!2298 = !DILocation(line: 115, column: 18, scope: !2294)
!2299 = !DILocalVariable(name: "next", scope: !2294, file: !3, line: 117, type: !889)
!2300 = !DILocation(line: 117, column: 7, scope: !2294)
!2301 = !DILocation(line: 117, column: 14, scope: !2294)
!2302 = !DILocalVariable(name: "note", scope: !2294, file: !3, line: 118, type: !889)
!2303 = !DILocation(line: 118, column: 7, scope: !2294)
!2304 = !DILocalVariable(name: "really_delete", scope: !2294, file: !3, line: 119, type: !1088)
!2305 = !DILocation(line: 119, column: 8, scope: !2294)
!2306 = !DILocation(line: 121, column: 7, scope: !2307)
!2307 = distinct !DILexicalBlock(scope: !2294, file: !3, line: 121, column: 7)
!2308 = !DILocation(line: 121, column: 7, scope: !2294)
!2309 = !DILocation(line: 126, column: 33, scope: !2310)
!2310 = distinct !DILexicalBlock(scope: !2311, file: !3, line: 126, column: 11)
!2311 = distinct !DILexicalBlock(scope: !2307, file: !3, line: 122, column: 5)
!2312 = !DILocation(line: 126, column: 13, scope: !2310)
!2313 = !DILocation(line: 126, column: 11, scope: !2311)
!2314 = !DILocalVariable(name: "name", scope: !2315, file: !3, line: 128, type: !886)
!2315 = distinct !DILexicalBlock(scope: !2310, file: !3, line: 127, column: 2)
!2316 = !DILocation(line: 128, column: 16, scope: !2315)
!2317 = !DILocation(line: 128, column: 23, scope: !2315)
!2318 = !DILocation(line: 130, column: 18, scope: !2315)
!2319 = !DILocation(line: 131, column: 4, scope: !2315)
!2320 = !DILocation(line: 132, column: 4, scope: !2315)
!2321 = !DILocation(line: 132, column: 21, scope: !2315)
!2322 = !DILocation(line: 133, column: 37, scope: !2315)
!2323 = !DILocation(line: 133, column: 4, scope: !2315)
!2324 = !DILocation(line: 133, column: 35, scope: !2315)
!2325 = !DILocation(line: 134, column: 2, scope: !2315)
!2326 = !DILocation(line: 136, column: 35, scope: !2311)
!2327 = !DILocation(line: 136, column: 7, scope: !2311)
!2328 = !DILocation(line: 137, column: 5, scope: !2311)
!2329 = !DILocation(line: 139, column: 7, scope: !2330)
!2330 = distinct !DILexicalBlock(scope: !2294, file: !3, line: 139, column: 7)
!2331 = !DILocation(line: 139, column: 7, scope: !2294)
!2332 = !DILocation(line: 142, column: 7, scope: !2333)
!2333 = distinct !DILexicalBlock(scope: !2330, file: !3, line: 140, column: 5)
!2334 = !DILocation(line: 143, column: 20, scope: !2333)
!2335 = !DILocation(line: 143, column: 7, scope: !2333)
!2336 = !DILocation(line: 144, column: 7, scope: !2333)
!2337 = !DILocation(line: 144, column: 29, scope: !2333)
!2338 = !DILocation(line: 145, column: 5, scope: !2333)
!2339 = !DILocation(line: 149, column: 7, scope: !2340)
!2340 = distinct !DILexicalBlock(scope: !2294, file: !3, line: 149, column: 7)
!2341 = !DILocation(line: 149, column: 7, scope: !2294)
!2342 = !DILocation(line: 151, column: 11, scope: !2343)
!2343 = distinct !DILexicalBlock(scope: !2344, file: !3, line: 151, column: 11)
!2344 = distinct !DILexicalBlock(scope: !2340, file: !3, line: 150, column: 5)
!2345 = !DILocation(line: 152, column: 4, scope: !2343)
!2346 = !DILocation(line: 152, column: 7, scope: !2343)
!2347 = !DILocation(line: 151, column: 11, scope: !2344)
!2348 = !DILocation(line: 153, column: 2, scope: !2343)
!2349 = !DILocation(line: 153, column: 33, scope: !2343)
!2350 = !DILocation(line: 156, column: 7, scope: !2344)
!2351 = !DILocation(line: 157, column: 25, scope: !2344)
!2352 = !DILocation(line: 157, column: 10, scope: !2344)
!2353 = !DILocation(line: 157, column: 8, scope: !2344)
!2354 = !DILocation(line: 157, column: 60, scope: !2344)
!2355 = !DILocation(line: 158, column: 7, scope: !2344)
!2356 = !DILocation(line: 158, column: 10, scope: !2344)
!2357 = !DILocation(line: 0, scope: !2344)
!2358 = !DILocation(line: 160, column: 4, scope: !2359)
!2359 = distinct !DILexicalBlock(scope: !2344, file: !3, line: 159, column: 2)
!2360 = !DILocation(line: 160, column: 32, scope: !2359)
!2361 = !DILocation(line: 161, column: 17, scope: !2359)
!2362 = !DILocation(line: 161, column: 23, scope: !2359)
!2363 = !DILocation(line: 161, column: 4, scope: !2359)
!2364 = distinct !{!2364, !2350, !2365}
!2365 = !DILocation(line: 162, column: 2, scope: !2344)
!2366 = !DILocation(line: 163, column: 5, scope: !2344)
!2367 = !DILocation(line: 166, column: 3, scope: !2294)
!2368 = !DILocation(line: 166, column: 33, scope: !2294)
!2369 = !DILocation(line: 166, column: 18, scope: !2294)
!2370 = !DILocation(line: 166, column: 16, scope: !2294)
!2371 = !DILocation(line: 166, column: 69, scope: !2294)
!2372 = !DILocation(line: 167, column: 3, scope: !2294)
!2373 = !DILocation(line: 167, column: 6, scope: !2294)
!2374 = !DILocation(line: 0, scope: !2294)
!2375 = !DILocation(line: 169, column: 7, scope: !2376)
!2376 = distinct !DILexicalBlock(scope: !2294, file: !3, line: 168, column: 5)
!2377 = !DILocation(line: 169, column: 35, scope: !2376)
!2378 = !DILocation(line: 170, column: 20, scope: !2376)
!2379 = !DILocation(line: 170, column: 26, scope: !2376)
!2380 = !DILocation(line: 170, column: 7, scope: !2376)
!2381 = distinct !{!2381, !2367, !2382}
!2382 = !DILocation(line: 171, column: 5, scope: !2294)
!2383 = !DILocation(line: 173, column: 7, scope: !2384)
!2384 = distinct !DILexicalBlock(scope: !2294, file: !3, line: 173, column: 7)
!2385 = !DILocation(line: 173, column: 7, scope: !2294)
!2386 = !DILocalVariable(name: "pat", scope: !2387, file: !3, line: 175, type: !889)
!2387 = distinct !DILexicalBlock(scope: !2384, file: !3, line: 174, column: 5)
!2388 = !DILocation(line: 175, column: 11, scope: !2387)
!2389 = !DILocation(line: 175, column: 17, scope: !2387)
!2390 = !DILocalVariable(name: "diff_vec_p", scope: !2387, file: !3, line: 176, type: !804)
!2391 = !DILocation(line: 176, column: 11, scope: !2387)
!2392 = !DILocation(line: 176, column: 24, scope: !2387)
!2393 = !DILocation(line: 176, column: 50, scope: !2387)
!2394 = !DILocalVariable(name: "len", scope: !2387, file: !3, line: 177, type: !804)
!2395 = !DILocation(line: 177, column: 11, scope: !2387)
!2396 = !DILocation(line: 177, column: 17, scope: !2387)
!2397 = !DILocalVariable(name: "i", scope: !2387, file: !3, line: 178, type: !804)
!2398 = !DILocation(line: 178, column: 11, scope: !2387)
!2399 = !DILocation(line: 180, column: 14, scope: !2400)
!2400 = distinct !DILexicalBlock(scope: !2387, file: !3, line: 180, column: 7)
!2401 = !DILocation(line: 180, column: 12, scope: !2400)
!2402 = !DILocation(line: 180, column: 19, scope: !2403)
!2403 = distinct !DILexicalBlock(scope: !2400, file: !3, line: 180, column: 7)
!2404 = !DILocation(line: 180, column: 23, scope: !2403)
!2405 = !DILocation(line: 180, column: 21, scope: !2403)
!2406 = !DILocation(line: 180, column: 7, scope: !2400)
!2407 = !DILocalVariable(name: "label", scope: !2408, file: !3, line: 182, type: !889)
!2408 = distinct !DILexicalBlock(scope: !2403, file: !3, line: 181, column: 2)
!2409 = !DILocation(line: 182, column: 8, scope: !2408)
!2410 = !DILocation(line: 182, column: 16, scope: !2408)
!2411 = !DILocation(line: 187, column: 9, scope: !2412)
!2412 = distinct !DILexicalBlock(scope: !2408, file: !3, line: 187, column: 8)
!2413 = !DILocation(line: 187, column: 8, scope: !2408)
!2414 = !DILocation(line: 188, column: 6, scope: !2412)
!2415 = !DILocation(line: 188, column: 25, scope: !2412)
!2416 = !DILocation(line: 189, column: 2, scope: !2408)
!2417 = !DILocation(line: 180, column: 29, scope: !2403)
!2418 = !DILocation(line: 180, column: 7, scope: !2403)
!2419 = distinct !{!2419, !2406, !2420}
!2420 = !DILocation(line: 189, column: 2, scope: !2400)
!2421 = !DILocation(line: 190, column: 5, scope: !2387)
!2422 = !DILocation(line: 192, column: 10, scope: !2294)
!2423 = !DILocation(line: 192, column: 3, scope: !2294)
!2424 = distinct !DISubprogram(name: "can_delete_label_p", scope: !3, file: !3, line: 104, type: !2425, scopeLine: 105, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!2425 = !DISubroutineType(types: !2426)
!2426 = !{!804, !860}
!2427 = !DILocalVariable(name: "label", arg: 1, scope: !2424, file: !3, line: 104, type: !860)
!2428 = !DILocation(line: 104, column: 31, scope: !2424)
!2429 = !DILocation(line: 106, column: 12, scope: !2424)
!2430 = !DILocation(line: 108, column: 4, scope: !2424)
!2431 = !DILocation(line: 108, column: 7, scope: !2424)
!2432 = !DILocation(line: 108, column: 26, scope: !2424)
!2433 = !DILocation(line: 109, column: 4, scope: !2424)
!2434 = !DILocation(line: 109, column: 24, scope: !2424)
!2435 = !DILocation(line: 109, column: 39, scope: !2424)
!2436 = !DILocation(line: 109, column: 8, scope: !2424)
!2437 = !DILocation(line: 109, column: 7, scope: !2424)
!2438 = !DILocation(line: 0, scope: !2424)
!2439 = !DILocation(line: 106, column: 3, scope: !2424)
!2440 = distinct !DISubprogram(name: "delete_insn_and_edges", scope: !3, file: !3, line: 198, type: !2295, scopeLine: 199, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!2441 = !DILocalVariable(name: "insn", arg: 1, scope: !2440, file: !3, line: 198, type: !889)
!2442 = !DILocation(line: 198, column: 28, scope: !2440)
!2443 = !DILocalVariable(name: "x", scope: !2440, file: !3, line: 200, type: !889)
!2444 = !DILocation(line: 200, column: 7, scope: !2440)
!2445 = !DILocalVariable(name: "purge", scope: !2440, file: !3, line: 201, type: !1088)
!2446 = !DILocation(line: 201, column: 8, scope: !2440)
!2447 = !DILocation(line: 203, column: 7, scope: !2448)
!2448 = distinct !DILexicalBlock(scope: !2440, file: !3, line: 203, column: 7)
!2449 = !DILocation(line: 204, column: 7, scope: !2448)
!2450 = !DILocation(line: 204, column: 10, scope: !2448)
!2451 = !DILocation(line: 205, column: 7, scope: !2448)
!2452 = !DILocation(line: 205, column: 10, scope: !2448)
!2453 = !DILocation(line: 205, column: 44, scope: !2448)
!2454 = !DILocation(line: 205, column: 41, scope: !2448)
!2455 = !DILocation(line: 203, column: 7, scope: !2440)
!2456 = !DILocation(line: 206, column: 11, scope: !2448)
!2457 = !DILocation(line: 206, column: 5, scope: !2448)
!2458 = !DILocation(line: 207, column: 20, scope: !2440)
!2459 = !DILocation(line: 207, column: 7, scope: !2440)
!2460 = !DILocation(line: 207, column: 5, scope: !2440)
!2461 = !DILocation(line: 208, column: 7, scope: !2462)
!2462 = distinct !DILexicalBlock(scope: !2440, file: !3, line: 208, column: 7)
!2463 = !DILocation(line: 208, column: 7, scope: !2440)
!2464 = !DILocation(line: 209, column: 23, scope: !2462)
!2465 = !DILocation(line: 209, column: 5, scope: !2462)
!2466 = !DILocation(line: 210, column: 10, scope: !2440)
!2467 = !DILocation(line: 210, column: 3, scope: !2440)
!2468 = distinct !DISubprogram(name: "purge_dead_edges", scope: !3, file: !3, line: 2223, type: !2218, scopeLine: 2224, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!2469 = !DILocalVariable(name: "bb", arg: 1, scope: !2468, file: !3, line: 2223, type: !1392)
!2470 = !DILocation(line: 2223, column: 31, scope: !2468)
!2471 = !DILocalVariable(name: "e", scope: !2468, file: !3, line: 2225, type: !1409)
!2472 = !DILocation(line: 2225, column: 8, scope: !2468)
!2473 = !DILocalVariable(name: "insn", scope: !2468, file: !3, line: 2226, type: !889)
!2474 = !DILocation(line: 2226, column: 7, scope: !2468)
!2475 = !DILocation(line: 2226, column: 14, scope: !2468)
!2476 = !DILocalVariable(name: "note", scope: !2468, file: !3, line: 2226, type: !889)
!2477 = !DILocation(line: 2226, column: 27, scope: !2468)
!2478 = !DILocalVariable(name: "purged", scope: !2468, file: !3, line: 2227, type: !1088)
!2479 = !DILocation(line: 2227, column: 8, scope: !2468)
!2480 = !DILocalVariable(name: "found", scope: !2468, file: !3, line: 2228, type: !1088)
!2481 = !DILocation(line: 2228, column: 8, scope: !2468)
!2482 = !DILocalVariable(name: "ei", scope: !2468, file: !3, line: 2229, type: !2483)
!2483 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge_iterator", file: !155, line: 682, baseType: !2484)
!2484 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !155, line: 679, size: 128, elements: !2485)
!2485 = !{!2486, !2487}
!2486 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2484, file: !155, line: 680, baseType: !7, size: 32)
!2487 = !DIDerivedType(tag: DW_TAG_member, name: "container", scope: !2484, file: !155, line: 681, baseType: !2488, size: 64, offset: 64)
!2488 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1397, size: 64)
!2489 = !DILocation(line: 2229, column: 17, scope: !2468)
!2490 = !DILocation(line: 2231, column: 7, scope: !2491)
!2491 = distinct !DILexicalBlock(scope: !2468, file: !3, line: 2231, column: 7)
!2492 = !DILocation(line: 2231, column: 27, scope: !2491)
!2493 = !DILocation(line: 2231, column: 30, scope: !2491)
!2494 = !DILocation(line: 2231, column: 38, scope: !2491)
!2495 = !DILocation(line: 2231, column: 35, scope: !2491)
!2496 = !DILocation(line: 2231, column: 7, scope: !2468)
!2497 = !DILocation(line: 2232, column: 5, scope: !2491)
!2498 = !DILocation(line: 2233, column: 14, scope: !2491)
!2499 = !DILocation(line: 2233, column: 12, scope: !2491)
!2500 = !DILocation(line: 2233, column: 7, scope: !2491)
!2501 = !DILocation(line: 2234, column: 13, scope: !2491)
!2502 = !DILocation(line: 2234, column: 33, scope: !2491)
!2503 = !DILocation(line: 2234, column: 36, scope: !2491)
!2504 = !DILocation(line: 2234, column: 51, scope: !2491)
!2505 = !DILocation(line: 2234, column: 54, scope: !2491)
!2506 = !DILocation(line: 2234, column: 62, scope: !2491)
!2507 = !DILocation(line: 2234, column: 59, scope: !2491)
!2508 = !DILocation(line: 0, scope: !2491)
!2509 = distinct !{!2509, !2497, !2510}
!2510 = !DILocation(line: 2234, column: 74, scope: !2491)
!2511 = !DILocation(line: 2237, column: 7, scope: !2512)
!2512 = distinct !DILexicalBlock(scope: !2468, file: !3, line: 2237, column: 7)
!2513 = !DILocation(line: 2238, column: 7, scope: !2512)
!2514 = !DILocation(line: 2238, column: 33, scope: !2512)
!2515 = !DILocation(line: 2238, column: 18, scope: !2512)
!2516 = !DILocation(line: 2238, column: 16, scope: !2512)
!2517 = !DILocation(line: 2237, column: 7, scope: !2468)
!2518 = !DILocalVariable(name: "eqnote", scope: !2519, file: !3, line: 2240, type: !889)
!2519 = distinct !DILexicalBlock(scope: !2512, file: !3, line: 2239, column: 5)
!2520 = !DILocation(line: 2240, column: 11, scope: !2519)
!2521 = !DILocation(line: 2242, column: 25, scope: !2522)
!2522 = distinct !DILexicalBlock(scope: !2519, file: !3, line: 2242, column: 11)
!2523 = !DILocation(line: 2242, column: 13, scope: !2522)
!2524 = !DILocation(line: 2243, column: 4, scope: !2522)
!2525 = !DILocation(line: 2243, column: 45, scope: !2522)
!2526 = !DILocation(line: 2243, column: 18, scope: !2522)
!2527 = !DILocation(line: 2243, column: 16, scope: !2522)
!2528 = !DILocation(line: 2244, column: 8, scope: !2522)
!2529 = !DILocation(line: 2244, column: 25, scope: !2522)
!2530 = !DILocation(line: 2244, column: 13, scope: !2522)
!2531 = !DILocation(line: 2242, column: 11, scope: !2519)
!2532 = !DILocation(line: 2245, column: 15, scope: !2522)
!2533 = !DILocation(line: 2245, column: 21, scope: !2522)
!2534 = !DILocation(line: 2245, column: 2, scope: !2522)
!2535 = !DILocation(line: 2246, column: 5, scope: !2519)
!2536 = !DILocation(line: 2249, column: 13, scope: !2537)
!2537 = distinct !DILexicalBlock(scope: !2468, file: !3, line: 2249, column: 3)
!2538 = !DILocation(line: 2249, column: 8, scope: !2537)
!2539 = !DILocation(line: 2249, column: 40, scope: !2540)
!2540 = distinct !DILexicalBlock(scope: !2537, file: !3, line: 2249, column: 3)
!2541 = !DILocation(line: 2249, column: 38, scope: !2540)
!2542 = !DILocation(line: 2249, column: 3, scope: !2537)
!2543 = !DILocalVariable(name: "remove", scope: !2544, file: !3, line: 2251, type: !1088)
!2544 = distinct !DILexicalBlock(scope: !2540, file: !3, line: 2250, column: 5)
!2545 = !DILocation(line: 2251, column: 12, scope: !2544)
!2546 = !DILocation(line: 2256, column: 11, scope: !2547)
!2547 = distinct !DILexicalBlock(scope: !2544, file: !3, line: 2256, column: 11)
!2548 = !DILocation(line: 2256, column: 14, scope: !2547)
!2549 = !DILocation(line: 2256, column: 20, scope: !2547)
!2550 = !DILocation(line: 2256, column: 11, scope: !2544)
!2551 = !DILocation(line: 2258, column: 9, scope: !2552)
!2552 = distinct !DILexicalBlock(scope: !2553, file: !3, line: 2258, column: 8)
!2553 = distinct !DILexicalBlock(scope: !2547, file: !3, line: 2257, column: 2)
!2554 = !DILocation(line: 2258, column: 8, scope: !2553)
!2555 = !DILocation(line: 2259, column: 13, scope: !2552)
!2556 = !DILocation(line: 2259, column: 6, scope: !2552)
!2557 = !DILocation(line: 2260, column: 32, scope: !2558)
!2558 = distinct !DILexicalBlock(scope: !2552, file: !3, line: 2260, column: 13)
!2559 = !DILocation(line: 2260, column: 13, scope: !2558)
!2560 = !DILocation(line: 2260, column: 13, scope: !2552)
!2561 = !DILocation(line: 2262, column: 14, scope: !2562)
!2562 = distinct !DILexicalBlock(scope: !2558, file: !3, line: 2262, column: 13)
!2563 = !DILocation(line: 2262, column: 17, scope: !2562)
!2564 = !DILocation(line: 2262, column: 23, scope: !2562)
!2565 = !DILocation(line: 2262, column: 34, scope: !2562)
!2566 = !DILocation(line: 2262, column: 57, scope: !2562)
!2567 = !DILocation(line: 2262, column: 37, scope: !2562)
!2568 = !DILocation(line: 2262, column: 13, scope: !2558)
!2569 = !DILocation(line: 2265, column: 13, scope: !2562)
!2570 = !DILocation(line: 2266, column: 2, scope: !2553)
!2571 = !DILocation(line: 2267, column: 16, scope: !2572)
!2572 = distinct !DILexicalBlock(scope: !2547, file: !3, line: 2267, column: 16)
!2573 = !DILocation(line: 2267, column: 19, scope: !2572)
!2574 = !DILocation(line: 2267, column: 25, scope: !2572)
!2575 = !DILocation(line: 2267, column: 16, scope: !2547)
!2576 = !DILocation(line: 2268, column: 32, scope: !2572)
!2577 = !DILocation(line: 2268, column: 12, scope: !2572)
!2578 = !DILocation(line: 2268, column: 11, scope: !2572)
!2579 = !DILocation(line: 2268, column: 9, scope: !2572)
!2580 = !DILocation(line: 2268, column: 2, scope: !2572)
!2581 = !DILocation(line: 2270, column: 11, scope: !2582)
!2582 = distinct !DILexicalBlock(scope: !2544, file: !3, line: 2270, column: 11)
!2583 = !DILocation(line: 2270, column: 11, scope: !2544)
!2584 = !DILocation(line: 2272, column: 17, scope: !2585)
!2585 = distinct !DILexicalBlock(scope: !2582, file: !3, line: 2271, column: 2)
!2586 = !DILocation(line: 2272, column: 4, scope: !2585)
!2587 = !DILocation(line: 2273, column: 21, scope: !2585)
!2588 = !DILocation(line: 2273, column: 4, scope: !2585)
!2589 = !DILocation(line: 2274, column: 11, scope: !2585)
!2590 = !DILocation(line: 2275, column: 2, scope: !2585)
!2591 = !DILocation(line: 2277, column: 2, scope: !2582)
!2592 = !DILocation(line: 2249, column: 3, scope: !2540)
!2593 = distinct !{!2593, !2542, !2594}
!2594 = !DILocation(line: 2278, column: 5, scope: !2537)
!2595 = !DILocation(line: 2280, column: 7, scope: !2596)
!2596 = distinct !DILexicalBlock(scope: !2468, file: !3, line: 2280, column: 7)
!2597 = !DILocation(line: 2280, column: 7, scope: !2468)
!2598 = !DILocalVariable(name: "note", scope: !2599, file: !3, line: 2282, type: !889)
!2599 = distinct !DILexicalBlock(scope: !2596, file: !3, line: 2281, column: 5)
!2600 = !DILocation(line: 2282, column: 11, scope: !2599)
!2601 = !DILocalVariable(name: "b", scope: !2599, file: !3, line: 2283, type: !1409)
!2602 = !DILocation(line: 2283, column: 12, scope: !2599)
!2603 = !DILocalVariable(name: "f", scope: !2599, file: !3, line: 2283, type: !1409)
!2604 = !DILocation(line: 2283, column: 14, scope: !2599)
!2605 = !DILocalVariable(name: "ei", scope: !2599, file: !3, line: 2284, type: !2483)
!2606 = !DILocation(line: 2284, column: 21, scope: !2599)
!2607 = !DILocation(line: 2287, column: 28, scope: !2608)
!2608 = distinct !DILexicalBlock(scope: !2599, file: !3, line: 2287, column: 11)
!2609 = !DILocation(line: 2287, column: 12, scope: !2608)
!2610 = !DILocation(line: 2288, column: 4, scope: !2608)
!2611 = !DILocation(line: 2288, column: 22, scope: !2608)
!2612 = !DILocation(line: 2288, column: 8, scope: !2608)
!2613 = !DILocation(line: 2289, column: 4, scope: !2608)
!2614 = !DILocation(line: 2289, column: 22, scope: !2608)
!2615 = !DILocation(line: 2289, column: 8, scope: !2608)
!2616 = !DILocation(line: 2287, column: 11, scope: !2599)
!2617 = !DILocation(line: 2290, column: 9, scope: !2608)
!2618 = !DILocation(line: 2290, column: 2, scope: !2608)
!2619 = !DILocation(line: 2294, column: 25, scope: !2620)
!2620 = distinct !DILexicalBlock(scope: !2599, file: !3, line: 2294, column: 11)
!2621 = !DILocation(line: 2294, column: 11, scope: !2620)
!2622 = !DILocation(line: 2294, column: 11, scope: !2599)
!2623 = !DILocation(line: 2296, column: 26, scope: !2624)
!2624 = distinct !DILexicalBlock(scope: !2620, file: !3, line: 2295, column: 2)
!2625 = !DILocation(line: 2296, column: 11, scope: !2624)
!2626 = !DILocation(line: 2296, column: 9, scope: !2624)
!2627 = !DILocation(line: 2297, column: 8, scope: !2628)
!2628 = distinct !DILexicalBlock(scope: !2624, file: !3, line: 2297, column: 8)
!2629 = !DILocation(line: 2297, column: 8, scope: !2624)
!2630 = !DILocation(line: 2298, column: 19, scope: !2628)
!2631 = !DILocation(line: 2298, column: 25, scope: !2628)
!2632 = !DILocation(line: 2298, column: 6, scope: !2628)
!2633 = !DILocation(line: 2299, column: 4, scope: !2624)
!2634 = !DILocation(line: 2299, column: 34, scope: !2624)
!2635 = !DILocation(line: 2299, column: 19, scope: !2624)
!2636 = !DILocation(line: 2299, column: 17, scope: !2624)
!2637 = !DILocation(line: 2300, column: 19, scope: !2624)
!2638 = !DILocation(line: 2300, column: 25, scope: !2624)
!2639 = !DILocation(line: 2300, column: 6, scope: !2624)
!2640 = distinct !{!2640, !2633, !2641}
!2641 = !DILocation(line: 2300, column: 29, scope: !2624)
!2642 = !DILocation(line: 2301, column: 2, scope: !2624)
!2643 = !DILocation(line: 2303, column: 17, scope: !2644)
!2644 = distinct !DILexicalBlock(scope: !2599, file: !3, line: 2303, column: 7)
!2645 = !DILocation(line: 2303, column: 12, scope: !2644)
!2646 = !DILocation(line: 2303, column: 44, scope: !2647)
!2647 = distinct !DILexicalBlock(scope: !2644, file: !3, line: 2303, column: 7)
!2648 = !DILocation(line: 2303, column: 42, scope: !2647)
!2649 = !DILocation(line: 2303, column: 7, scope: !2644)
!2650 = !DILocation(line: 2308, column: 4, scope: !2651)
!2651 = distinct !DILexicalBlock(scope: !2647, file: !3, line: 2304, column: 2)
!2652 = !DILocation(line: 2308, column: 7, scope: !2651)
!2653 = !DILocation(line: 2308, column: 13, scope: !2651)
!2654 = !DILocation(line: 2311, column: 9, scope: !2655)
!2655 = distinct !DILexicalBlock(scope: !2651, file: !3, line: 2311, column: 8)
!2656 = !DILocation(line: 2311, column: 12, scope: !2655)
!2657 = !DILocation(line: 2311, column: 18, scope: !2655)
!2658 = !DILocation(line: 2311, column: 35, scope: !2655)
!2659 = !DILocation(line: 2311, column: 54, scope: !2655)
!2660 = !DILocation(line: 2311, column: 38, scope: !2655)
!2661 = !DILocation(line: 2311, column: 8, scope: !2651)
!2662 = !DILocation(line: 2315, column: 8, scope: !2663)
!2663 = distinct !DILexicalBlock(scope: !2655, file: !3, line: 2314, column: 6)
!2664 = !DILocation(line: 2316, column: 8, scope: !2663)
!2665 = distinct !{!2665, !2649, !2666}
!2666 = !DILocation(line: 2347, column: 2, scope: !2644)
!2667 = !DILocation(line: 2318, column: 13, scope: !2668)
!2668 = distinct !DILexicalBlock(scope: !2655, file: !3, line: 2318, column: 13)
!2669 = !DILocation(line: 2318, column: 16, scope: !2668)
!2670 = !DILocation(line: 2318, column: 24, scope: !2668)
!2671 = !DILocation(line: 2318, column: 21, scope: !2668)
!2672 = !DILocation(line: 2319, column: 6, scope: !2668)
!2673 = !DILocation(line: 2319, column: 9, scope: !2668)
!2674 = !DILocation(line: 2319, column: 30, scope: !2668)
!2675 = !DILocation(line: 2319, column: 27, scope: !2668)
!2676 = !DILocation(line: 2318, column: 13, scope: !2655)
!2677 = !DILocation(line: 2323, column: 8, scope: !2678)
!2678 = distinct !DILexicalBlock(scope: !2668, file: !3, line: 2322, column: 6)
!2679 = !DILocation(line: 2324, column: 8, scope: !2678)
!2680 = !DILocation(line: 2326, column: 13, scope: !2681)
!2681 = distinct !DILexicalBlock(scope: !2668, file: !3, line: 2326, column: 13)
!2682 = !DILocation(line: 2326, column: 16, scope: !2681)
!2683 = !DILocation(line: 2326, column: 24, scope: !2681)
!2684 = !DILocation(line: 2326, column: 21, scope: !2681)
!2685 = !DILocation(line: 2326, column: 39, scope: !2681)
!2686 = !DILocation(line: 2326, column: 56, scope: !2681)
!2687 = !DILocation(line: 2326, column: 42, scope: !2681)
!2688 = !DILocation(line: 2326, column: 13, scope: !2668)
!2689 = !DILocation(line: 2330, column: 8, scope: !2690)
!2690 = distinct !DILexicalBlock(scope: !2681, file: !3, line: 2329, column: 6)
!2691 = !DILocation(line: 2331, column: 8, scope: !2690)
!2692 = !DILocation(line: 2333, column: 14, scope: !2693)
!2693 = distinct !DILexicalBlock(scope: !2681, file: !3, line: 2333, column: 13)
!2694 = !DILocation(line: 2333, column: 17, scope: !2693)
!2695 = !DILocation(line: 2333, column: 23, scope: !2693)
!2696 = !DILocation(line: 2333, column: 34, scope: !2693)
!2697 = !DILocation(line: 2333, column: 57, scope: !2693)
!2698 = !DILocation(line: 2333, column: 37, scope: !2693)
!2699 = !DILocation(line: 2333, column: 13, scope: !2681)
!2700 = !DILocation(line: 2338, column: 8, scope: !2701)
!2701 = distinct !DILexicalBlock(scope: !2693, file: !3, line: 2337, column: 6)
!2702 = !DILocation(line: 2338, column: 11, scope: !2701)
!2703 = !DILocation(line: 2338, column: 17, scope: !2701)
!2704 = !DILocation(line: 2339, column: 8, scope: !2701)
!2705 = !DILocation(line: 2340, column: 8, scope: !2701)
!2706 = !DILocation(line: 2344, column: 21, scope: !2651)
!2707 = !DILocation(line: 2344, column: 4, scope: !2651)
!2708 = !DILocation(line: 2345, column: 11, scope: !2651)
!2709 = !DILocation(line: 2346, column: 17, scope: !2651)
!2710 = !DILocation(line: 2346, column: 4, scope: !2651)
!2711 = !DILocation(line: 2303, column: 7, scope: !2647)
!2712 = !DILocation(line: 2349, column: 11, scope: !2713)
!2713 = distinct !DILexicalBlock(scope: !2599, file: !3, line: 2349, column: 11)
!2714 = !DILocation(line: 2349, column: 34, scope: !2713)
!2715 = !DILocation(line: 2349, column: 39, scope: !2713)
!2716 = !DILocation(line: 2349, column: 43, scope: !2713)
!2717 = !DILocation(line: 2349, column: 11, scope: !2599)
!2718 = !DILocation(line: 2350, column: 9, scope: !2713)
!2719 = !DILocation(line: 2350, column: 2, scope: !2713)
!2720 = !DILocation(line: 2352, column: 11, scope: !2721)
!2721 = distinct !DILexicalBlock(scope: !2599, file: !3, line: 2352, column: 11)
!2722 = !DILocation(line: 2352, column: 11, scope: !2599)
!2723 = !DILocation(line: 2353, column: 11, scope: !2721)
!2724 = !DILocation(line: 2353, column: 51, scope: !2721)
!2725 = !DILocation(line: 2353, column: 55, scope: !2721)
!2726 = !DILocation(line: 2353, column: 2, scope: !2721)
!2727 = !DILocation(line: 2355, column: 12, scope: !2728)
!2728 = distinct !DILexicalBlock(scope: !2599, file: !3, line: 2355, column: 11)
!2729 = !DILocation(line: 2355, column: 11, scope: !2599)
!2730 = !DILocation(line: 2356, column: 9, scope: !2728)
!2731 = !DILocation(line: 2356, column: 2, scope: !2728)
!2732 = !DILocation(line: 2359, column: 26, scope: !2733)
!2733 = distinct !DILexicalBlock(scope: !2599, file: !3, line: 2359, column: 11)
!2734 = !DILocation(line: 2359, column: 11, scope: !2733)
!2735 = !DILocation(line: 2359, column: 11, scope: !2599)
!2736 = !DILocation(line: 2361, column: 22, scope: !2737)
!2737 = distinct !DILexicalBlock(scope: !2733, file: !3, line: 2360, column: 2)
!2738 = !DILocation(line: 2361, column: 4, scope: !2737)
!2739 = !DILocation(line: 2361, column: 27, scope: !2737)
!2740 = !DILocation(line: 2361, column: 39, scope: !2737)
!2741 = !DILocation(line: 2362, column: 35, scope: !2737)
!2742 = !DILocation(line: 2362, column: 39, scope: !2737)
!2743 = !DILocation(line: 2362, column: 22, scope: !2737)
!2744 = !DILocation(line: 2362, column: 4, scope: !2737)
!2745 = !DILocation(line: 2362, column: 27, scope: !2737)
!2746 = !DILocation(line: 2362, column: 33, scope: !2737)
!2747 = !DILocation(line: 2363, column: 2, scope: !2737)
!2748 = !DILocation(line: 2366, column: 26, scope: !2749)
!2749 = distinct !DILexicalBlock(scope: !2733, file: !3, line: 2365, column: 2)
!2750 = !DILocation(line: 2366, column: 11, scope: !2749)
!2751 = !DILocation(line: 2366, column: 9, scope: !2749)
!2752 = !DILocation(line: 2367, column: 9, scope: !2753)
!2753 = distinct !DILexicalBlock(scope: !2749, file: !3, line: 2367, column: 8)
!2754 = !DILocation(line: 2367, column: 8, scope: !2749)
!2755 = !DILocation(line: 2368, column: 13, scope: !2753)
!2756 = !DILocation(line: 2368, column: 6, scope: !2753)
!2757 = !DILocation(line: 2370, column: 8, scope: !2749)
!2758 = !DILocation(line: 2370, column: 6, scope: !2749)
!2759 = !DILocation(line: 2371, column: 8, scope: !2749)
!2760 = !DILocation(line: 2371, column: 6, scope: !2749)
!2761 = !DILocation(line: 2372, column: 21, scope: !2749)
!2762 = !DILocation(line: 2372, column: 4, scope: !2749)
!2763 = !DILocation(line: 2372, column: 7, scope: !2749)
!2764 = !DILocation(line: 2372, column: 19, scope: !2749)
!2765 = !DILocation(line: 2373, column: 40, scope: !2749)
!2766 = !DILocation(line: 2373, column: 43, scope: !2749)
!2767 = !DILocation(line: 2373, column: 38, scope: !2749)
!2768 = !DILocation(line: 2373, column: 4, scope: !2749)
!2769 = !DILocation(line: 2373, column: 7, scope: !2749)
!2770 = !DILocation(line: 2373, column: 19, scope: !2749)
!2771 = !DILocation(line: 2374, column: 15, scope: !2749)
!2772 = !DILocation(line: 2374, column: 19, scope: !2749)
!2773 = !DILocation(line: 2374, column: 27, scope: !2749)
!2774 = !DILocation(line: 2374, column: 30, scope: !2749)
!2775 = !DILocation(line: 2374, column: 25, scope: !2749)
!2776 = !DILocation(line: 2374, column: 42, scope: !2749)
!2777 = !DILocation(line: 2374, column: 4, scope: !2749)
!2778 = !DILocation(line: 2374, column: 7, scope: !2749)
!2779 = !DILocation(line: 2374, column: 13, scope: !2749)
!2780 = !DILocation(line: 2375, column: 15, scope: !2749)
!2781 = !DILocation(line: 2375, column: 19, scope: !2749)
!2782 = !DILocation(line: 2375, column: 27, scope: !2749)
!2783 = !DILocation(line: 2375, column: 30, scope: !2749)
!2784 = !DILocation(line: 2375, column: 25, scope: !2749)
!2785 = !DILocation(line: 2375, column: 42, scope: !2749)
!2786 = !DILocation(line: 2375, column: 4, scope: !2749)
!2787 = !DILocation(line: 2375, column: 7, scope: !2749)
!2788 = !DILocation(line: 2375, column: 13, scope: !2749)
!2789 = !DILocation(line: 2378, column: 14, scope: !2599)
!2790 = !DILocation(line: 2378, column: 7, scope: !2599)
!2791 = !DILocation(line: 2380, column: 12, scope: !2792)
!2792 = distinct !DILexicalBlock(scope: !2596, file: !3, line: 2380, column: 12)
!2793 = !DILocation(line: 2380, column: 26, scope: !2792)
!2794 = !DILocation(line: 2380, column: 29, scope: !2792)
!2795 = !DILocation(line: 2380, column: 12, scope: !2596)
!2796 = !DILocation(line: 2386, column: 7, scope: !2797)
!2797 = distinct !DILexicalBlock(scope: !2792, file: !3, line: 2381, column: 5)
!2798 = !DILocation(line: 2387, column: 7, scope: !2797)
!2799 = !DILocation(line: 2390, column: 7, scope: !2797)
!2800 = !DILocation(line: 2398, column: 9, scope: !2468)
!2801 = !DILocation(line: 2399, column: 3, scope: !2802)
!2802 = distinct !DILexicalBlock(scope: !2468, file: !3, line: 2399, column: 3)
!2803 = !DILocation(line: 2399, column: 3, scope: !2804)
!2804 = distinct !DILexicalBlock(scope: !2802, file: !3, line: 2399, column: 3)
!2805 = !DILocation(line: 2400, column: 12, scope: !2806)
!2806 = distinct !DILexicalBlock(scope: !2804, file: !3, line: 2400, column: 9)
!2807 = !DILocation(line: 2400, column: 15, scope: !2806)
!2808 = !DILocation(line: 2400, column: 21, scope: !2806)
!2809 = !DILocation(line: 2400, column: 9, scope: !2804)
!2810 = !DILocation(line: 2402, column: 8, scope: !2811)
!2811 = distinct !DILexicalBlock(scope: !2806, file: !3, line: 2401, column: 7)
!2812 = !DILocation(line: 2403, column: 2, scope: !2811)
!2813 = !DILocation(line: 2400, column: 53, scope: !2806)
!2814 = distinct !{!2814, !2801, !2815}
!2815 = !DILocation(line: 2404, column: 7, scope: !2802)
!2816 = !DILocation(line: 2406, column: 8, scope: !2817)
!2817 = distinct !DILexicalBlock(scope: !2468, file: !3, line: 2406, column: 7)
!2818 = !DILocation(line: 2406, column: 7, scope: !2468)
!2819 = !DILocation(line: 2407, column: 12, scope: !2817)
!2820 = !DILocation(line: 2407, column: 5, scope: !2817)
!2821 = !DILocation(line: 2412, column: 13, scope: !2822)
!2822 = distinct !DILexicalBlock(scope: !2468, file: !3, line: 2412, column: 3)
!2823 = !DILocation(line: 2412, column: 8, scope: !2822)
!2824 = !DILocation(line: 2412, column: 40, scope: !2825)
!2825 = distinct !DILexicalBlock(scope: !2822, file: !3, line: 2412, column: 3)
!2826 = !DILocation(line: 2412, column: 38, scope: !2825)
!2827 = !DILocation(line: 2412, column: 3, scope: !2822)
!2828 = !DILocation(line: 2414, column: 13, scope: !2829)
!2829 = distinct !DILexicalBlock(scope: !2830, file: !3, line: 2414, column: 11)
!2830 = distinct !DILexicalBlock(scope: !2825, file: !3, line: 2413, column: 5)
!2831 = !DILocation(line: 2414, column: 16, scope: !2829)
!2832 = !DILocation(line: 2414, column: 22, scope: !2829)
!2833 = !DILocation(line: 2414, column: 11, scope: !2830)
!2834 = !DILocation(line: 2416, column: 21, scope: !2835)
!2835 = distinct !DILexicalBlock(scope: !2829, file: !3, line: 2415, column: 2)
!2836 = !DILocation(line: 2416, column: 4, scope: !2835)
!2837 = !DILocation(line: 2417, column: 17, scope: !2835)
!2838 = !DILocation(line: 2417, column: 4, scope: !2835)
!2839 = !DILocation(line: 2418, column: 11, scope: !2835)
!2840 = !DILocation(line: 2419, column: 2, scope: !2835)
!2841 = !DILocation(line: 2421, column: 2, scope: !2829)
!2842 = !DILocation(line: 2412, column: 3, scope: !2825)
!2843 = distinct !{!2843, !2827, !2844}
!2844 = !DILocation(line: 2422, column: 5, scope: !2822)
!2845 = !DILocation(line: 2424, column: 3, scope: !2468)
!2846 = !DILocation(line: 2426, column: 21, scope: !2468)
!2847 = !DILocation(line: 2426, column: 3, scope: !2468)
!2848 = !DILocation(line: 2426, column: 26, scope: !2468)
!2849 = !DILocation(line: 2426, column: 38, scope: !2468)
!2850 = !DILocation(line: 2427, column: 34, scope: !2468)
!2851 = !DILocation(line: 2427, column: 38, scope: !2468)
!2852 = !DILocation(line: 2427, column: 21, scope: !2468)
!2853 = !DILocation(line: 2427, column: 3, scope: !2468)
!2854 = !DILocation(line: 2427, column: 26, scope: !2468)
!2855 = !DILocation(line: 2427, column: 32, scope: !2468)
!2856 = !DILocation(line: 2429, column: 7, scope: !2857)
!2857 = distinct !DILexicalBlock(scope: !2468, file: !3, line: 2429, column: 7)
!2858 = !DILocation(line: 2429, column: 7, scope: !2468)
!2859 = !DILocation(line: 2430, column: 14, scope: !2857)
!2860 = !DILocation(line: 2431, column: 7, scope: !2857)
!2861 = !DILocation(line: 2431, column: 11, scope: !2857)
!2862 = !DILocation(line: 2430, column: 5, scope: !2857)
!2863 = !DILocation(line: 2432, column: 10, scope: !2468)
!2864 = !DILocation(line: 2432, column: 3, scope: !2468)
!2865 = !DILocation(line: 2433, column: 1, scope: !2468)
!2866 = distinct !DISubprogram(name: "delete_insn_chain", scope: !3, file: !3, line: 218, type: !2867, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!2867 = !DISubroutineType(types: !2868)
!2868 = !{null, !889, !889, !1088}
!2869 = !DILocalVariable(name: "start", arg: 1, scope: !2866, file: !3, line: 218, type: !889)
!2870 = !DILocation(line: 218, column: 24, scope: !2866)
!2871 = !DILocalVariable(name: "finish", arg: 2, scope: !2866, file: !3, line: 218, type: !889)
!2872 = !DILocation(line: 218, column: 35, scope: !2866)
!2873 = !DILocalVariable(name: "clear_bb", arg: 3, scope: !2866, file: !3, line: 218, type: !1088)
!2874 = !DILocation(line: 218, column: 48, scope: !2866)
!2875 = !DILocalVariable(name: "next", scope: !2866, file: !3, line: 220, type: !889)
!2876 = !DILocation(line: 220, column: 7, scope: !2866)
!2877 = !DILocation(line: 225, column: 3, scope: !2866)
!2878 = !DILocation(line: 227, column: 14, scope: !2879)
!2879 = distinct !DILexicalBlock(scope: !2866, file: !3, line: 226, column: 5)
!2880 = !DILocation(line: 227, column: 12, scope: !2879)
!2881 = !DILocation(line: 228, column: 11, scope: !2882)
!2882 = distinct !DILexicalBlock(scope: !2879, file: !3, line: 228, column: 11)
!2883 = !DILocation(line: 228, column: 26, scope: !2882)
!2884 = !DILocation(line: 228, column: 49, scope: !2882)
!2885 = !DILocation(line: 228, column: 30, scope: !2882)
!2886 = !DILocation(line: 228, column: 11, scope: !2879)
!2887 = !DILocation(line: 231, column: 22, scope: !2882)
!2888 = !DILocation(line: 231, column: 9, scope: !2882)
!2889 = !DILocation(line: 231, column: 7, scope: !2882)
!2890 = !DILocation(line: 233, column: 11, scope: !2891)
!2891 = distinct !DILexicalBlock(scope: !2879, file: !3, line: 233, column: 11)
!2892 = !DILocation(line: 233, column: 20, scope: !2891)
!2893 = !DILocation(line: 233, column: 24, scope: !2891)
!2894 = !DILocation(line: 233, column: 11, scope: !2879)
!2895 = !DILocation(line: 234, column: 2, scope: !2891)
!2896 = !DILocation(line: 236, column: 11, scope: !2897)
!2897 = distinct !DILexicalBlock(scope: !2879, file: !3, line: 236, column: 11)
!2898 = !DILocation(line: 236, column: 20, scope: !2897)
!2899 = !DILocation(line: 236, column: 17, scope: !2897)
!2900 = !DILocation(line: 236, column: 11, scope: !2879)
!2901 = !DILocation(line: 237, column: 2, scope: !2897)
!2902 = !DILocation(line: 238, column: 15, scope: !2879)
!2903 = !DILocation(line: 238, column: 13, scope: !2879)
!2904 = distinct !{!2904, !2877, !2905}
!2905 = !DILocation(line: 239, column: 5, scope: !2866)
!2906 = !DILocation(line: 240, column: 1, scope: !2866)
!2907 = distinct !DISubprogram(name: "can_delete_note_p", scope: !3, file: !3, line: 87, type: !2425, scopeLine: 88, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!2908 = !DILocalVariable(name: "note", arg: 1, scope: !2907, file: !3, line: 87, type: !860)
!2909 = !DILocation(line: 87, column: 30, scope: !2907)
!2910 = !DILocation(line: 89, column: 11, scope: !2907)
!2911 = !DILocation(line: 89, column: 3, scope: !2907)
!2912 = !DILocation(line: 94, column: 7, scope: !2913)
!2913 = distinct !DILexicalBlock(scope: !2907, file: !3, line: 90, column: 5)
!2914 = !DILocation(line: 97, column: 7, scope: !2913)
!2915 = !DILocation(line: 99, column: 1, scope: !2907)
!2916 = distinct !DISubprogram(name: "create_basic_block_structure", scope: !3, file: !3, line: 251, type: !2917, scopeLine: 252, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!2917 = !DISubroutineType(types: !2918)
!2918 = !{!1392, !889, !889, !889, !1392}
!2919 = !DILocalVariable(name: "head", arg: 1, scope: !2916, file: !3, line: 251, type: !889)
!2920 = !DILocation(line: 251, column: 35, scope: !2916)
!2921 = !DILocalVariable(name: "end", arg: 2, scope: !2916, file: !3, line: 251, type: !889)
!2922 = !DILocation(line: 251, column: 45, scope: !2916)
!2923 = !DILocalVariable(name: "bb_note", arg: 3, scope: !2916, file: !3, line: 251, type: !889)
!2924 = !DILocation(line: 251, column: 54, scope: !2916)
!2925 = !DILocalVariable(name: "after", arg: 4, scope: !2916, file: !3, line: 251, type: !1392)
!2926 = !DILocation(line: 251, column: 75, scope: !2916)
!2927 = !DILocalVariable(name: "bb", scope: !2916, file: !3, line: 253, type: !1392)
!2928 = !DILocation(line: 253, column: 15, scope: !2916)
!2929 = !DILocation(line: 255, column: 7, scope: !2930)
!2930 = distinct !DILexicalBlock(scope: !2916, file: !3, line: 255, column: 7)
!2931 = !DILocation(line: 256, column: 7, scope: !2930)
!2932 = !DILocation(line: 256, column: 16, scope: !2930)
!2933 = !DILocation(line: 256, column: 14, scope: !2930)
!2934 = !DILocation(line: 256, column: 44, scope: !2930)
!2935 = !DILocation(line: 257, column: 7, scope: !2930)
!2936 = !DILocation(line: 257, column: 10, scope: !2930)
!2937 = !DILocation(line: 257, column: 14, scope: !2930)
!2938 = !DILocation(line: 257, column: 18, scope: !2930)
!2939 = !DILocation(line: 255, column: 7, scope: !2916)
!2940 = !DILocalVariable(name: "after", scope: !2941, file: !3, line: 261, type: !889)
!2941 = distinct !DILexicalBlock(scope: !2930, file: !3, line: 258, column: 5)
!2942 = !DILocation(line: 261, column: 11, scope: !2941)
!2943 = !DILocation(line: 263, column: 11, scope: !2944)
!2944 = distinct !DILexicalBlock(scope: !2941, file: !3, line: 263, column: 11)
!2945 = !DILocation(line: 263, column: 11, scope: !2941)
!2946 = !DILocation(line: 264, column: 10, scope: !2944)
!2947 = !DILocation(line: 264, column: 8, scope: !2944)
!2948 = !DILocation(line: 264, column: 2, scope: !2944)
!2949 = !DILocation(line: 267, column: 12, scope: !2950)
!2950 = distinct !DILexicalBlock(scope: !2944, file: !3, line: 266, column: 2)
!2951 = !DILocation(line: 267, column: 10, scope: !2950)
!2952 = !DILocation(line: 268, column: 11, scope: !2950)
!2953 = !DILocation(line: 268, column: 9, scope: !2950)
!2954 = !DILocation(line: 271, column: 11, scope: !2955)
!2955 = distinct !DILexicalBlock(scope: !2941, file: !3, line: 271, column: 11)
!2956 = !DILocation(line: 271, column: 20, scope: !2955)
!2957 = !DILocation(line: 271, column: 17, scope: !2955)
!2958 = !DILocation(line: 271, column: 28, scope: !2955)
!2959 = !DILocation(line: 271, column: 31, scope: !2955)
!2960 = !DILocation(line: 271, column: 52, scope: !2955)
!2961 = !DILocation(line: 271, column: 49, scope: !2955)
!2962 = !DILocation(line: 271, column: 11, scope: !2941)
!2963 = !DILocation(line: 272, column: 22, scope: !2955)
!2964 = !DILocation(line: 272, column: 31, scope: !2955)
!2965 = !DILocation(line: 272, column: 40, scope: !2955)
!2966 = !DILocation(line: 272, column: 2, scope: !2955)
!2967 = !DILocation(line: 273, column: 5, scope: !2941)
!2968 = !DILocation(line: 278, column: 12, scope: !2969)
!2969 = distinct !DILexicalBlock(scope: !2930, file: !3, line: 275, column: 5)
!2970 = !DILocation(line: 278, column: 10, scope: !2969)
!2971 = !DILocation(line: 280, column: 25, scope: !2969)
!2972 = !DILocation(line: 280, column: 7, scope: !2969)
!2973 = !DILocation(line: 281, column: 12, scope: !2974)
!2974 = distinct !DILexicalBlock(scope: !2969, file: !3, line: 281, column: 11)
!2975 = !DILocation(line: 281, column: 17, scope: !2974)
!2976 = !DILocation(line: 281, column: 21, scope: !2974)
!2977 = !DILocation(line: 281, column: 11, scope: !2969)
!2978 = !DILocation(line: 283, column: 46, scope: !2974)
!2979 = !DILocation(line: 283, column: 6, scope: !2974)
!2980 = !DILocation(line: 283, column: 4, scope: !2974)
!2981 = !DILocation(line: 282, column: 13, scope: !2974)
!2982 = !DILocation(line: 282, column: 7, scope: !2974)
!2983 = !DILocation(line: 282, column: 2, scope: !2974)
!2984 = !DILocation(line: 284, column: 16, scope: !2985)
!2985 = distinct !DILexicalBlock(scope: !2974, file: !3, line: 284, column: 16)
!2986 = !DILocation(line: 284, column: 31, scope: !2985)
!2987 = !DILocation(line: 284, column: 34, scope: !2985)
!2988 = !DILocation(line: 284, column: 16, scope: !2974)
!2989 = !DILocation(line: 286, column: 54, scope: !2990)
!2990 = distinct !DILexicalBlock(scope: !2985, file: !3, line: 285, column: 2)
!2991 = !DILocation(line: 286, column: 14, scope: !2990)
!2992 = !DILocation(line: 286, column: 12, scope: !2990)
!2993 = !DILocation(line: 287, column: 8, scope: !2994)
!2994 = distinct !DILexicalBlock(scope: !2990, file: !3, line: 287, column: 8)
!2995 = !DILocation(line: 287, column: 16, scope: !2994)
!2996 = !DILocation(line: 287, column: 13, scope: !2994)
!2997 = !DILocation(line: 287, column: 8, scope: !2990)
!2998 = !DILocation(line: 288, column: 12, scope: !2994)
!2999 = !DILocation(line: 288, column: 10, scope: !2994)
!3000 = !DILocation(line: 288, column: 6, scope: !2994)
!3001 = !DILocation(line: 289, column: 2, scope: !2990)
!3002 = !DILocation(line: 292, column: 55, scope: !3003)
!3003 = distinct !DILexicalBlock(scope: !2985, file: !3, line: 291, column: 2)
!3004 = !DILocation(line: 292, column: 14, scope: !3003)
!3005 = !DILocation(line: 292, column: 12, scope: !3003)
!3006 = !DILocation(line: 293, column: 11, scope: !3003)
!3007 = !DILocation(line: 293, column: 9, scope: !3003)
!3008 = !DILocation(line: 294, column: 9, scope: !3009)
!3009 = distinct !DILexicalBlock(scope: !3003, file: !3, line: 294, column: 8)
!3010 = !DILocation(line: 294, column: 8, scope: !3003)
!3011 = !DILocation(line: 295, column: 12, scope: !3009)
!3012 = !DILocation(line: 295, column: 10, scope: !3009)
!3013 = !DILocation(line: 295, column: 6, scope: !3009)
!3014 = !DILocation(line: 298, column: 36, scope: !2969)
!3015 = !DILocation(line: 298, column: 7, scope: !2969)
!3016 = !DILocation(line: 298, column: 34, scope: !2969)
!3017 = !DILocation(line: 302, column: 7, scope: !3018)
!3018 = distinct !DILexicalBlock(scope: !2916, file: !3, line: 302, column: 7)
!3019 = !DILocation(line: 302, column: 26, scope: !3018)
!3020 = !DILocation(line: 302, column: 23, scope: !3018)
!3021 = !DILocation(line: 302, column: 7, scope: !2916)
!3022 = !DILocation(line: 303, column: 11, scope: !3018)
!3023 = !DILocation(line: 303, column: 9, scope: !3018)
!3024 = !DILocation(line: 303, column: 5, scope: !3018)
!3025 = !DILocation(line: 305, column: 18, scope: !2916)
!3026 = !DILocation(line: 305, column: 3, scope: !2916)
!3027 = !DILocation(line: 305, column: 16, scope: !2916)
!3028 = !DILocation(line: 306, column: 17, scope: !2916)
!3029 = !DILocation(line: 306, column: 3, scope: !2916)
!3030 = !DILocation(line: 306, column: 15, scope: !2916)
!3031 = !DILocation(line: 307, column: 15, scope: !2916)
!3032 = !DILocation(line: 307, column: 31, scope: !2916)
!3033 = !DILocation(line: 307, column: 3, scope: !2916)
!3034 = !DILocation(line: 307, column: 7, scope: !2916)
!3035 = !DILocation(line: 307, column: 13, scope: !2916)
!3036 = !DILocation(line: 308, column: 3, scope: !2916)
!3037 = !DILocation(line: 308, column: 7, scope: !2916)
!3038 = !DILocation(line: 308, column: 13, scope: !2916)
!3039 = !DILocation(line: 309, column: 15, scope: !2916)
!3040 = !DILocation(line: 309, column: 19, scope: !2916)
!3041 = !DILocation(line: 309, column: 3, scope: !2916)
!3042 = !DILocation(line: 310, column: 3, scope: !2916)
!3043 = !DILocation(line: 311, column: 22, scope: !2916)
!3044 = !DILocation(line: 311, column: 26, scope: !2916)
!3045 = !DILocation(line: 311, column: 3, scope: !2916)
!3046 = !DILocation(line: 312, column: 23, scope: !2916)
!3047 = !DILocation(line: 312, column: 3, scope: !2916)
!3048 = !DILocation(line: 313, column: 3, scope: !2916)
!3049 = !DILocalVariable(name: "bb_", scope: !3050, file: !3, line: 313, type: !1392)
!3050 = distinct !DILexicalBlock(scope: !2916, file: !3, line: 313, column: 3)
!3051 = !DILocation(line: 313, column: 3, scope: !3050)
!3052 = !DILocation(line: 317, column: 13, scope: !2916)
!3053 = !DILocation(line: 317, column: 3, scope: !2916)
!3054 = !DILocation(line: 317, column: 7, scope: !2916)
!3055 = !DILocation(line: 317, column: 11, scope: !2916)
!3056 = !DILocation(line: 319, column: 10, scope: !2916)
!3057 = !DILocation(line: 319, column: 3, scope: !2916)
!3058 = distinct !DISubprogram(name: "init_rtl_bb_info", scope: !3, file: !3, line: 3062, type: !2173, scopeLine: 3063, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!3059 = !DILocalVariable(name: "bb", arg: 1, scope: !3058, file: !3, line: 3062, type: !1392)
!3060 = !DILocation(line: 3062, column: 31, scope: !3058)
!3061 = !DILocation(line: 3064, column: 3, scope: !3058)
!3062 = !DILocation(line: 3065, column: 16, scope: !3058)
!3063 = !DILocation(line: 3065, column: 3, scope: !3058)
!3064 = !DILocation(line: 3065, column: 7, scope: !3058)
!3065 = !DILocation(line: 3065, column: 10, scope: !3058)
!3066 = !DILocation(line: 3065, column: 14, scope: !3058)
!3067 = !DILocation(line: 3066, column: 1, scope: !3058)
!3068 = distinct !DISubprogram(name: "VEC_basic_block_base_replace", scope: !155, file: !155, line: 281, type: !3069, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!3069 = !DISubroutineType(types: !3070)
!3070 = !{!1392, !3071, !7, !1392}
!3071 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1529, size: 64)
!3072 = !DILocalVariable(name: "vec_", arg: 1, scope: !3068, file: !155, line: 281, type: !3071)
!3073 = !DILocation(line: 281, column: 1, scope: !3068)
!3074 = !DILocalVariable(name: "ix_", arg: 2, scope: !3068, file: !155, line: 281, type: !7)
!3075 = !DILocalVariable(name: "obj_", arg: 3, scope: !3068, file: !155, line: 281, type: !1392)
!3076 = !DILocalVariable(name: "old_obj_", scope: !3068, file: !155, line: 281, type: !1392)
!3077 = distinct !DISubprogram(name: "update_bb_for_insn", scope: !3, file: !3, line: 492, type: !2173, scopeLine: 493, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!3078 = !DILocalVariable(name: "bb", arg: 1, scope: !3077, file: !3, line: 492, type: !1392)
!3079 = !DILocation(line: 492, column: 33, scope: !3077)
!3080 = !DILocation(line: 494, column: 29, scope: !3077)
!3081 = !DILocation(line: 494, column: 43, scope: !3077)
!3082 = !DILocation(line: 494, column: 56, scope: !3077)
!3083 = !DILocation(line: 494, column: 3, scope: !3077)
!3084 = !DILocation(line: 495, column: 1, scope: !3077)
!3085 = distinct !DISubprogram(name: "compute_bb_for_insn", scope: !3, file: !3, line: 388, type: !3086, scopeLine: 389, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!3086 = !DISubroutineType(types: !3087)
!3087 = !{null}
!3088 = !DILocalVariable(name: "bb", scope: !3085, file: !3, line: 390, type: !1392)
!3089 = !DILocation(line: 390, column: 15, scope: !3085)
!3090 = !DILocation(line: 392, column: 3, scope: !3091)
!3091 = distinct !DILexicalBlock(scope: !3085, file: !3, line: 392, column: 3)
!3092 = !DILocation(line: 392, column: 3, scope: !3093)
!3093 = distinct !DILexicalBlock(scope: !3091, file: !3, line: 392, column: 3)
!3094 = !DILocalVariable(name: "end", scope: !3095, file: !3, line: 394, type: !889)
!3095 = distinct !DILexicalBlock(scope: !3093, file: !3, line: 393, column: 5)
!3096 = !DILocation(line: 394, column: 11, scope: !3095)
!3097 = !DILocation(line: 394, column: 17, scope: !3095)
!3098 = !DILocalVariable(name: "insn", scope: !3095, file: !3, line: 395, type: !889)
!3099 = !DILocation(line: 395, column: 11, scope: !3095)
!3100 = !DILocation(line: 397, column: 19, scope: !3101)
!3101 = distinct !DILexicalBlock(scope: !3095, file: !3, line: 397, column: 7)
!3102 = !DILocation(line: 397, column: 17, scope: !3101)
!3103 = !DILocation(line: 397, column: 12, scope: !3101)
!3104 = !DILocation(line: 399, column: 28, scope: !3105)
!3105 = distinct !DILexicalBlock(scope: !3106, file: !3, line: 398, column: 2)
!3106 = distinct !DILexicalBlock(scope: !3101, file: !3, line: 397, column: 7)
!3107 = !DILocation(line: 399, column: 4, scope: !3105)
!3108 = !DILocation(line: 399, column: 26, scope: !3105)
!3109 = !DILocation(line: 400, column: 8, scope: !3110)
!3110 = distinct !DILexicalBlock(scope: !3105, file: !3, line: 400, column: 8)
!3111 = !DILocation(line: 400, column: 16, scope: !3110)
!3112 = !DILocation(line: 400, column: 13, scope: !3110)
!3113 = !DILocation(line: 400, column: 8, scope: !3105)
!3114 = !DILocation(line: 401, column: 6, scope: !3110)
!3115 = !DILocation(line: 402, column: 2, scope: !3105)
!3116 = !DILocation(line: 397, column: 42, scope: !3106)
!3117 = !DILocation(line: 397, column: 40, scope: !3106)
!3118 = !DILocation(line: 397, column: 7, scope: !3106)
!3119 = distinct !{!3119, !3120, !3121}
!3120 = !DILocation(line: 397, column: 7, scope: !3101)
!3121 = !DILocation(line: 402, column: 2, scope: !3101)
!3122 = !DILocation(line: 403, column: 5, scope: !3095)
!3123 = distinct !{!3123, !3090, !3124}
!3124 = !DILocation(line: 403, column: 5, scope: !3091)
!3125 = !DILocation(line: 404, column: 1, scope: !3085)
!3126 = distinct !DISubprogram(name: "free_bb_for_insn", scope: !3, file: !3, line: 409, type: !2277, scopeLine: 410, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!3127 = !DILocalVariable(name: "insn", scope: !3126, file: !3, line: 411, type: !889)
!3128 = !DILocation(line: 411, column: 7, scope: !3126)
!3129 = !DILocation(line: 412, column: 15, scope: !3130)
!3130 = distinct !DILexicalBlock(scope: !3126, file: !3, line: 412, column: 3)
!3131 = !DILocation(line: 412, column: 13, scope: !3130)
!3132 = !DILocation(line: 412, column: 8, scope: !3130)
!3133 = !DILocation(line: 412, column: 29, scope: !3134)
!3134 = distinct !DILexicalBlock(scope: !3130, file: !3, line: 412, column: 3)
!3135 = !DILocation(line: 412, column: 3, scope: !3130)
!3136 = !DILocation(line: 413, column: 10, scope: !3137)
!3137 = distinct !DILexicalBlock(scope: !3134, file: !3, line: 413, column: 9)
!3138 = !DILocation(line: 413, column: 9, scope: !3134)
!3139 = !DILocation(line: 414, column: 7, scope: !3137)
!3140 = !DILocation(line: 414, column: 29, scope: !3137)
!3141 = !DILocation(line: 412, column: 42, scope: !3134)
!3142 = !DILocation(line: 412, column: 40, scope: !3134)
!3143 = !DILocation(line: 412, column: 3, scope: !3134)
!3144 = distinct !{!3144, !3135, !3145}
!3145 = !DILocation(line: 414, column: 31, scope: !3130)
!3146 = !DILocation(line: 415, column: 3, scope: !3126)
!3147 = distinct !DISubprogram(name: "rest_of_pass_free_cfg", scope: !3, file: !3, line: 419, type: !2277, scopeLine: 420, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!3148 = !DILocation(line: 428, column: 3, scope: !3147)
!3149 = !DILocation(line: 429, column: 3, scope: !3147)
!3150 = distinct !DISubprogram(name: "entry_of_function", scope: !3, file: !3, line: 453, type: !3151, scopeLine: 454, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!3151 = !DISubroutineType(types: !3152)
!3152 = !{!889}
!3153 = !DILocation(line: 455, column: 11, scope: !3150)
!3154 = !DILocation(line: 455, column: 26, scope: !3150)
!3155 = !DILocation(line: 456, column: 4, scope: !3150)
!3156 = !DILocation(line: 456, column: 41, scope: !3150)
!3157 = !DILocation(line: 455, column: 3, scope: !3150)
!3158 = distinct !DISubprogram(name: "emit_insn_at_entry", scope: !3, file: !3, line: 462, type: !3159, scopeLine: 463, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!3159 = !DISubroutineType(types: !3160)
!3160 = !{null, !889}
!3161 = !DILocalVariable(name: "insn", arg: 1, scope: !3158, file: !3, line: 462, type: !889)
!3162 = !DILocation(line: 462, column: 25, scope: !3158)
!3163 = !DILocalVariable(name: "ei", scope: !3158, file: !3, line: 464, type: !2483)
!3164 = !DILocation(line: 464, column: 17, scope: !3158)
!3165 = !DILocation(line: 464, column: 22, scope: !3158)
!3166 = !DILocalVariable(name: "e", scope: !3158, file: !3, line: 465, type: !1409)
!3167 = !DILocation(line: 465, column: 8, scope: !3158)
!3168 = !DILocation(line: 465, column: 12, scope: !3158)
!3169 = !DILocation(line: 466, column: 3, scope: !3158)
!3170 = !DILocation(line: 468, column: 24, scope: !3158)
!3171 = !DILocation(line: 468, column: 30, scope: !3158)
!3172 = !DILocation(line: 468, column: 3, scope: !3158)
!3173 = !DILocation(line: 469, column: 3, scope: !3158)
!3174 = !DILocation(line: 470, column: 1, scope: !3158)
!3175 = distinct !DISubprogram(name: "ei_start_1", scope: !155, file: !155, line: 696, type: !3176, scopeLine: 697, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!3176 = !DISubroutineType(types: !3177)
!3177 = !{!2483, !2488}
!3178 = !DILocalVariable(name: "ev", arg: 1, scope: !3175, file: !155, line: 696, type: !2488)
!3179 = !DILocation(line: 696, column: 28, scope: !3175)
!3180 = !DILocalVariable(name: "i", scope: !3175, file: !155, line: 698, type: !2483)
!3181 = !DILocation(line: 698, column: 17, scope: !3175)
!3182 = !DILocation(line: 700, column: 5, scope: !3175)
!3183 = !DILocation(line: 700, column: 11, scope: !3175)
!3184 = !DILocation(line: 701, column: 17, scope: !3175)
!3185 = !DILocation(line: 701, column: 5, scope: !3175)
!3186 = !DILocation(line: 701, column: 15, scope: !3175)
!3187 = !DILocation(line: 703, column: 3, scope: !3175)
!3188 = distinct !DISubprogram(name: "ei_safe_edge", scope: !155, file: !155, line: 761, type: !3189, scopeLine: 762, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!3189 = !DISubroutineType(types: !3190)
!3190 = !{!1409, !2483}
!3191 = !DILocalVariable(name: "i", arg: 1, scope: !3188, file: !155, line: 761, type: !2483)
!3192 = !DILocation(line: 761, column: 29, scope: !3188)
!3193 = !DILocation(line: 763, column: 11, scope: !3188)
!3194 = !DILocation(line: 763, column: 10, scope: !3188)
!3195 = !DILocation(line: 763, column: 26, scope: !3188)
!3196 = !DILocation(line: 763, column: 3, scope: !3188)
!3197 = distinct !DISubprogram(name: "insert_insn_on_edge", scope: !3, file: !3, line: 1420, type: !3198, scopeLine: 1421, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!3198 = !DISubroutineType(types: !3199)
!3199 = !{null, !889, !1409}
!3200 = !DILocalVariable(name: "pattern", arg: 1, scope: !3197, file: !3, line: 1420, type: !889)
!3201 = !DILocation(line: 1420, column: 26, scope: !3197)
!3202 = !DILocalVariable(name: "e", arg: 2, scope: !3197, file: !3, line: 1420, type: !1409)
!3203 = !DILocation(line: 1420, column: 40, scope: !3197)
!3204 = !DILocation(line: 1424, column: 3, scope: !3197)
!3205 = !DILocation(line: 1426, column: 7, scope: !3206)
!3206 = distinct !DILexicalBlock(scope: !3197, file: !3, line: 1426, column: 7)
!3207 = !DILocation(line: 1426, column: 10, scope: !3206)
!3208 = !DILocation(line: 1426, column: 16, scope: !3206)
!3209 = !DILocation(line: 1426, column: 18, scope: !3206)
!3210 = !DILocation(line: 1426, column: 7, scope: !3197)
!3211 = !DILocation(line: 1427, column: 5, scope: !3206)
!3212 = !DILocation(line: 1429, column: 23, scope: !3206)
!3213 = !DILocation(line: 1429, column: 26, scope: !3206)
!3214 = !DILocation(line: 1429, column: 32, scope: !3206)
!3215 = !DILocation(line: 1429, column: 5, scope: !3206)
!3216 = !DILocation(line: 1431, column: 14, scope: !3197)
!3217 = !DILocation(line: 1431, column: 3, scope: !3197)
!3218 = !DILocation(line: 1433, column: 16, scope: !3197)
!3219 = !DILocation(line: 1433, column: 3, scope: !3197)
!3220 = !DILocation(line: 1433, column: 6, scope: !3197)
!3221 = !DILocation(line: 1433, column: 12, scope: !3197)
!3222 = !DILocation(line: 1433, column: 14, scope: !3197)
!3223 = !DILocation(line: 1434, column: 3, scope: !3197)
!3224 = !DILocation(line: 1435, column: 1, scope: !3197)
!3225 = distinct !DISubprogram(name: "commit_edge_insertions", scope: !3, file: !3, line: 1553, type: !3086, scopeLine: 1554, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!3226 = !DILocalVariable(name: "bb", scope: !3225, file: !3, line: 1555, type: !1392)
!3227 = !DILocation(line: 1555, column: 15, scope: !3225)
!3228 = !DILocalVariable(name: "blocks", scope: !3225, file: !3, line: 1556, type: !2225)
!3229 = !DILocation(line: 1556, column: 11, scope: !3225)
!3230 = !DILocalVariable(name: "changed", scope: !3225, file: !3, line: 1557, type: !1088)
!3231 = !DILocation(line: 1557, column: 8, scope: !3225)
!3232 = !DILocation(line: 1563, column: 3, scope: !3233)
!3233 = distinct !DILexicalBlock(scope: !3225, file: !3, line: 1563, column: 3)
!3234 = !DILocation(line: 1563, column: 3, scope: !3235)
!3235 = distinct !DILexicalBlock(scope: !3233, file: !3, line: 1563, column: 3)
!3236 = !DILocalVariable(name: "e", scope: !3237, file: !3, line: 1565, type: !1409)
!3237 = distinct !DILexicalBlock(scope: !3235, file: !3, line: 1564, column: 5)
!3238 = !DILocation(line: 1565, column: 12, scope: !3237)
!3239 = !DILocalVariable(name: "ei", scope: !3237, file: !3, line: 1566, type: !2483)
!3240 = !DILocation(line: 1566, column: 21, scope: !3237)
!3241 = !DILocation(line: 1568, column: 7, scope: !3242)
!3242 = distinct !DILexicalBlock(scope: !3237, file: !3, line: 1568, column: 7)
!3243 = !DILocation(line: 1568, column: 7, scope: !3244)
!3244 = distinct !DILexicalBlock(scope: !3242, file: !3, line: 1568, column: 7)
!3245 = !DILocation(line: 1569, column: 6, scope: !3246)
!3246 = distinct !DILexicalBlock(scope: !3244, file: !3, line: 1569, column: 6)
!3247 = !DILocation(line: 1569, column: 9, scope: !3246)
!3248 = !DILocation(line: 1569, column: 15, scope: !3246)
!3249 = !DILocation(line: 1569, column: 6, scope: !3244)
!3250 = !DILocation(line: 1571, column: 14, scope: !3251)
!3251 = distinct !DILexicalBlock(scope: !3246, file: !3, line: 1570, column: 4)
!3252 = !DILocation(line: 1572, column: 33, scope: !3251)
!3253 = !DILocation(line: 1572, column: 6, scope: !3251)
!3254 = !DILocation(line: 1573, column: 4, scope: !3251)
!3255 = distinct !{!3255, !3241, !3256}
!3256 = !DILocation(line: 1573, column: 4, scope: !3242)
!3257 = !DILocation(line: 1574, column: 5, scope: !3237)
!3258 = distinct !{!3258, !3232, !3259}
!3259 = !DILocation(line: 1574, column: 5, scope: !3233)
!3260 = !DILocation(line: 1576, column: 8, scope: !3261)
!3261 = distinct !DILexicalBlock(scope: !3225, file: !3, line: 1576, column: 7)
!3262 = !DILocation(line: 1576, column: 7, scope: !3225)
!3263 = !DILocation(line: 1577, column: 5, scope: !3261)
!3264 = !DILocation(line: 1583, column: 7, scope: !3265)
!3265 = distinct !DILexicalBlock(scope: !3225, file: !3, line: 1583, column: 7)
!3266 = !DILocation(line: 1583, column: 26, scope: !3265)
!3267 = !DILocation(line: 1583, column: 7, scope: !3225)
!3268 = !DILocation(line: 1584, column: 5, scope: !3265)
!3269 = !DILocation(line: 1586, column: 27, scope: !3225)
!3270 = !DILocation(line: 1586, column: 12, scope: !3225)
!3271 = !DILocation(line: 1586, column: 10, scope: !3225)
!3272 = !DILocation(line: 1587, column: 17, scope: !3225)
!3273 = !DILocation(line: 1587, column: 3, scope: !3225)
!3274 = !DILocation(line: 1588, column: 3, scope: !3275)
!3275 = distinct !DILexicalBlock(scope: !3225, file: !3, line: 1588, column: 3)
!3276 = !DILocation(line: 1588, column: 3, scope: !3277)
!3277 = distinct !DILexicalBlock(scope: !3275, file: !3, line: 1588, column: 3)
!3278 = !DILocation(line: 1589, column: 9, scope: !3279)
!3279 = distinct !DILexicalBlock(scope: !3277, file: !3, line: 1589, column: 9)
!3280 = !DILocation(line: 1589, column: 13, scope: !3279)
!3281 = !DILocation(line: 1589, column: 9, scope: !3277)
!3282 = !DILocation(line: 1591, column: 11, scope: !3283)
!3283 = distinct !DILexicalBlock(scope: !3279, file: !3, line: 1590, column: 7)
!3284 = !DILocation(line: 1591, column: 19, scope: !3283)
!3285 = !DILocation(line: 1591, column: 23, scope: !3283)
!3286 = !DILocation(line: 1591, column: 2, scope: !3283)
!3287 = !DILocation(line: 1594, column: 2, scope: !3283)
!3288 = !DILocation(line: 1595, column: 2, scope: !3283)
!3289 = !DILocation(line: 1595, column: 6, scope: !3283)
!3290 = !DILocation(line: 1595, column: 10, scope: !3283)
!3291 = !DILocation(line: 1596, column: 7, scope: !3283)
!3292 = distinct !{!3292, !3274, !3293}
!3293 = !DILocation(line: 1596, column: 7, scope: !3275)
!3294 = !DILocation(line: 1597, column: 31, scope: !3225)
!3295 = !DILocation(line: 1597, column: 3, scope: !3225)
!3296 = !DILocation(line: 1598, column: 3, scope: !3225)
!3297 = !DILocation(line: 1599, column: 1, scope: !3225)
!3298 = distinct !DISubprogram(name: "update_bb_for_insn_chain", scope: !3, file: !3, line: 478, type: !3299, scopeLine: 479, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!3299 = !DISubroutineType(types: !3300)
!3300 = !{null, !889, !889, !1392}
!3301 = !DILocalVariable(name: "begin", arg: 1, scope: !3298, file: !3, line: 478, type: !889)
!3302 = !DILocation(line: 478, column: 31, scope: !3298)
!3303 = !DILocalVariable(name: "end", arg: 2, scope: !3298, file: !3, line: 478, type: !889)
!3304 = !DILocation(line: 478, column: 42, scope: !3298)
!3305 = !DILocalVariable(name: "bb", arg: 3, scope: !3298, file: !3, line: 478, type: !1392)
!3306 = !DILocation(line: 478, column: 59, scope: !3298)
!3307 = !DILocalVariable(name: "insn", scope: !3298, file: !3, line: 480, type: !889)
!3308 = !DILocation(line: 480, column: 7, scope: !3298)
!3309 = !DILocation(line: 482, column: 9, scope: !3298)
!3310 = !DILocation(line: 482, column: 7, scope: !3298)
!3311 = !DILocation(line: 483, column: 15, scope: !3312)
!3312 = distinct !DILexicalBlock(scope: !3298, file: !3, line: 483, column: 3)
!3313 = !DILocation(line: 483, column: 13, scope: !3312)
!3314 = !DILocation(line: 483, column: 8, scope: !3312)
!3315 = !DILocation(line: 483, column: 22, scope: !3316)
!3316 = distinct !DILexicalBlock(scope: !3312, file: !3, line: 483, column: 3)
!3317 = !DILocation(line: 483, column: 30, scope: !3316)
!3318 = !DILocation(line: 483, column: 27, scope: !3316)
!3319 = !DILocation(line: 483, column: 3, scope: !3312)
!3320 = !DILocation(line: 484, column: 10, scope: !3321)
!3321 = distinct !DILexicalBlock(scope: !3316, file: !3, line: 484, column: 9)
!3322 = !DILocation(line: 484, column: 9, scope: !3316)
!3323 = !DILocation(line: 485, column: 26, scope: !3321)
!3324 = !DILocation(line: 485, column: 32, scope: !3321)
!3325 = !DILocation(line: 485, column: 7, scope: !3321)
!3326 = !DILocation(line: 483, column: 42, scope: !3316)
!3327 = !DILocation(line: 483, column: 40, scope: !3316)
!3328 = !DILocation(line: 483, column: 3, scope: !3316)
!3329 = distinct !{!3329, !3319, !3330}
!3330 = !DILocation(line: 485, column: 34, scope: !3312)
!3331 = !DILocation(line: 486, column: 1, scope: !3298)
!3332 = distinct !DISubprogram(name: "block_label", scope: !3, file: !3, line: 722, type: !3333, scopeLine: 723, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!3333 = !DISubroutineType(types: !3334)
!3334 = !{!889, !1392}
!3335 = !DILocalVariable(name: "block", arg: 1, scope: !3332, file: !3, line: 722, type: !1392)
!3336 = !DILocation(line: 722, column: 26, scope: !3332)
!3337 = !DILocation(line: 724, column: 7, scope: !3338)
!3338 = distinct !DILexicalBlock(scope: !3332, file: !3, line: 724, column: 7)
!3339 = !DILocation(line: 724, column: 16, scope: !3338)
!3340 = !DILocation(line: 724, column: 13, scope: !3338)
!3341 = !DILocation(line: 724, column: 7, scope: !3332)
!3342 = !DILocation(line: 725, column: 5, scope: !3338)
!3343 = !DILocation(line: 727, column: 8, scope: !3344)
!3344 = distinct !DILexicalBlock(scope: !3332, file: !3, line: 727, column: 7)
!3345 = !DILocation(line: 727, column: 7, scope: !3332)
!3346 = !DILocation(line: 729, column: 44, scope: !3347)
!3347 = distinct !DILexicalBlock(scope: !3344, file: !3, line: 728, column: 5)
!3348 = !DILocation(line: 729, column: 62, scope: !3347)
!3349 = !DILocation(line: 729, column: 25, scope: !3347)
!3350 = !DILocation(line: 729, column: 7, scope: !3347)
!3351 = !DILocation(line: 729, column: 23, scope: !3347)
!3352 = !DILocation(line: 730, column: 5, scope: !3347)
!3353 = !DILocation(line: 732, column: 10, scope: !3332)
!3354 = !DILocation(line: 732, column: 3, scope: !3332)
!3355 = !DILocation(line: 733, column: 1, scope: !3332)
!3356 = distinct !DISubprogram(name: "try_redirect_by_replacing_jump", scope: !3, file: !3, line: 741, type: !3357, scopeLine: 742, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!3357 = !DISubroutineType(types: !3358)
!3358 = !{!1409, !1409, !1392, !1088}
!3359 = !DILocalVariable(name: "e", arg: 1, scope: !3356, file: !3, line: 741, type: !1409)
!3360 = !DILocation(line: 741, column: 38, scope: !3356)
!3361 = !DILocalVariable(name: "target", arg: 2, scope: !3356, file: !3, line: 741, type: !1392)
!3362 = !DILocation(line: 741, column: 53, scope: !3356)
!3363 = !DILocalVariable(name: "in_cfglayout", arg: 3, scope: !3356, file: !3, line: 741, type: !1088)
!3364 = !DILocation(line: 741, column: 66, scope: !3356)
!3365 = !DILocalVariable(name: "src", scope: !3356, file: !3, line: 743, type: !1392)
!3366 = !DILocation(line: 743, column: 15, scope: !3356)
!3367 = !DILocation(line: 743, column: 21, scope: !3356)
!3368 = !DILocation(line: 743, column: 24, scope: !3356)
!3369 = !DILocalVariable(name: "insn", scope: !3356, file: !3, line: 744, type: !889)
!3370 = !DILocation(line: 744, column: 7, scope: !3356)
!3371 = !DILocation(line: 744, column: 14, scope: !3356)
!3372 = !DILocalVariable(name: "kill_from", scope: !3356, file: !3, line: 744, type: !889)
!3373 = !DILocation(line: 744, column: 28, scope: !3356)
!3374 = !DILocalVariable(name: "set", scope: !3356, file: !3, line: 745, type: !889)
!3375 = !DILocation(line: 745, column: 7, scope: !3356)
!3376 = !DILocalVariable(name: "fallthru", scope: !3356, file: !3, line: 746, type: !804)
!3377 = !DILocation(line: 746, column: 7, scope: !3356)
!3378 = !DILocation(line: 758, column: 22, scope: !3379)
!3379 = distinct !DILexicalBlock(scope: !3356, file: !3, line: 758, column: 7)
!3380 = !DILocation(line: 758, column: 7, scope: !3379)
!3381 = !DILocation(line: 759, column: 7, scope: !3379)
!3382 = !DILocation(line: 759, column: 10, scope: !3379)
!3383 = !DILocation(line: 759, column: 32, scope: !3379)
!3384 = !DILocation(line: 759, column: 29, scope: !3379)
!3385 = !DILocation(line: 758, column: 7, scope: !3356)
!3386 = !DILocation(line: 760, column: 5, scope: !3379)
!3387 = !DILocation(line: 765, column: 7, scope: !3388)
!3388 = distinct !DILexicalBlock(scope: !3356, file: !3, line: 765, column: 7)
!3389 = !DILocation(line: 765, column: 31, scope: !3388)
!3390 = !DILocation(line: 768, column: 7, scope: !3388)
!3391 = !DILocation(line: 768, column: 11, scope: !3388)
!3392 = !DILocation(line: 768, column: 35, scope: !3388)
!3393 = !DILocation(line: 769, column: 4, scope: !3388)
!3394 = !DILocation(line: 769, column: 7, scope: !3388)
!3395 = !DILocation(line: 769, column: 49, scope: !3388)
!3396 = !DILocation(line: 769, column: 57, scope: !3388)
!3397 = !DILocation(line: 769, column: 54, scope: !3388)
!3398 = !DILocation(line: 765, column: 7, scope: !3356)
!3399 = !DILocation(line: 770, column: 5, scope: !3388)
!3400 = !DILocation(line: 772, column: 20, scope: !3401)
!3401 = distinct !DILexicalBlock(scope: !3356, file: !3, line: 772, column: 7)
!3402 = !DILocation(line: 772, column: 8, scope: !3401)
!3403 = !DILocation(line: 772, column: 7, scope: !3356)
!3404 = !DILocation(line: 773, column: 5, scope: !3401)
!3405 = !DILocation(line: 774, column: 9, scope: !3406)
!3406 = distinct !DILexicalBlock(scope: !3356, file: !3, line: 774, column: 7)
!3407 = !DILocation(line: 774, column: 18, scope: !3406)
!3408 = !DILocation(line: 774, column: 21, scope: !3406)
!3409 = !DILocation(line: 774, column: 39, scope: !3406)
!3410 = !DILocation(line: 774, column: 55, scope: !3406)
!3411 = !DILocation(line: 774, column: 42, scope: !3406)
!3412 = !DILocation(line: 774, column: 7, scope: !3356)
!3413 = !DILocation(line: 775, column: 5, scope: !3406)
!3414 = !DILocation(line: 778, column: 9, scope: !3356)
!3415 = !DILocation(line: 778, column: 7, scope: !3356)
!3416 = !DILocation(line: 779, column: 8, scope: !3417)
!3417 = distinct !DILexicalBlock(scope: !3356, file: !3, line: 779, column: 7)
!3418 = !DILocation(line: 779, column: 12, scope: !3417)
!3419 = !DILocation(line: 779, column: 31, scope: !3417)
!3420 = !DILocation(line: 779, column: 15, scope: !3417)
!3421 = !DILocation(line: 779, column: 7, scope: !3356)
!3422 = !DILocation(line: 780, column: 5, scope: !3417)
!3423 = !DILocation(line: 784, column: 15, scope: !3356)
!3424 = !DILocation(line: 784, column: 13, scope: !3356)
!3425 = !DILocation(line: 792, column: 7, scope: !3426)
!3426 = distinct !DILexicalBlock(scope: !3356, file: !3, line: 792, column: 7)
!3427 = !DILocation(line: 792, column: 20, scope: !3426)
!3428 = !DILocation(line: 792, column: 37, scope: !3426)
!3429 = !DILocation(line: 792, column: 42, scope: !3426)
!3430 = !DILocation(line: 792, column: 23, scope: !3426)
!3431 = !DILocation(line: 792, column: 7, scope: !3356)
!3432 = !DILocation(line: 794, column: 11, scope: !3433)
!3433 = distinct !DILexicalBlock(scope: !3434, file: !3, line: 794, column: 11)
!3434 = distinct !DILexicalBlock(scope: !3426, file: !3, line: 793, column: 5)
!3435 = !DILocation(line: 794, column: 11, scope: !3434)
!3436 = !DILocation(line: 795, column: 11, scope: !3433)
!3437 = !DILocation(line: 795, column: 45, scope: !3433)
!3438 = !DILocation(line: 795, column: 2, scope: !3433)
!3439 = !DILocation(line: 796, column: 16, scope: !3434)
!3440 = !DILocation(line: 799, column: 11, scope: !3441)
!3441 = distinct !DILexicalBlock(scope: !3434, file: !3, line: 799, column: 11)
!3442 = !DILocation(line: 799, column: 11, scope: !3434)
!3443 = !DILocalVariable(name: "insn", scope: !3444, file: !3, line: 801, type: !889)
!3444 = distinct !DILexicalBlock(scope: !3441, file: !3, line: 800, column: 2)
!3445 = !DILocation(line: 801, column: 8, scope: !3444)
!3446 = !DILocation(line: 801, column: 15, scope: !3444)
!3447 = !DILocation(line: 801, column: 20, scope: !3444)
!3448 = !DILocation(line: 801, column: 23, scope: !3444)
!3449 = !DILocation(line: 801, column: 28, scope: !3444)
!3450 = !DILocation(line: 803, column: 23, scope: !3444)
!3451 = !DILocation(line: 803, column: 34, scope: !3444)
!3452 = !DILocation(line: 803, column: 4, scope: !3444)
!3453 = !DILocation(line: 806, column: 4, scope: !3444)
!3454 = !DILocation(line: 806, column: 11, scope: !3444)
!3455 = !DILocation(line: 808, column: 12, scope: !3456)
!3456 = distinct !DILexicalBlock(scope: !3457, file: !3, line: 808, column: 12)
!3457 = distinct !DILexicalBlock(scope: !3444, file: !3, line: 807, column: 6)
!3458 = !DILocation(line: 808, column: 12, scope: !3457)
!3459 = !DILocation(line: 810, column: 9, scope: !3460)
!3460 = distinct !DILexicalBlock(scope: !3461, file: !3, line: 810, column: 9)
!3461 = distinct !DILexicalBlock(scope: !3456, file: !3, line: 809, column: 3)
!3462 = !DILocation(line: 810, column: 9, scope: !3461)
!3463 = !DILocation(line: 811, column: 38, scope: !3460)
!3464 = !DILocation(line: 811, column: 7, scope: !3460)
!3465 = !DILocation(line: 811, column: 36, scope: !3460)
!3466 = !DILocation(line: 813, column: 29, scope: !3460)
!3467 = !DILocation(line: 813, column: 7, scope: !3460)
!3468 = !DILocation(line: 813, column: 12, scope: !3460)
!3469 = !DILocation(line: 813, column: 15, scope: !3460)
!3470 = !DILocation(line: 813, column: 20, scope: !3460)
!3471 = !DILocation(line: 813, column: 27, scope: !3460)
!3472 = !DILocation(line: 814, column: 9, scope: !3473)
!3473 = distinct !DILexicalBlock(scope: !3461, file: !3, line: 814, column: 9)
!3474 = !DILocation(line: 814, column: 9, scope: !3461)
!3475 = !DILocation(line: 815, column: 38, scope: !3473)
!3476 = !DILocation(line: 815, column: 7, scope: !3473)
!3477 = !DILocation(line: 815, column: 36, scope: !3473)
!3478 = !DILocation(line: 816, column: 3, scope: !3461)
!3479 = !DILocation(line: 817, column: 12, scope: !3480)
!3480 = distinct !DILexicalBlock(scope: !3457, file: !3, line: 817, column: 12)
!3481 = !DILocation(line: 817, column: 12, scope: !3457)
!3482 = !DILocation(line: 818, column: 3, scope: !3480)
!3483 = !DILocation(line: 819, column: 15, scope: !3457)
!3484 = !DILocation(line: 819, column: 13, scope: !3457)
!3485 = distinct !{!3485, !3453, !3486}
!3486 = !DILocation(line: 820, column: 6, scope: !3444)
!3487 = !DILocation(line: 821, column: 2, scope: !3444)
!3488 = !DILocation(line: 823, column: 21, scope: !3441)
!3489 = !DILocation(line: 823, column: 32, scope: !3441)
!3490 = !DILocation(line: 823, column: 2, scope: !3441)
!3491 = !DILocation(line: 825, column: 5, scope: !3434)
!3492 = !DILocation(line: 828, column: 26, scope: !3493)
!3493 = distinct !DILexicalBlock(scope: !3426, file: !3, line: 828, column: 12)
!3494 = !DILocation(line: 828, column: 12, scope: !3493)
!3495 = !DILocation(line: 828, column: 12, scope: !3426)
!3496 = !DILocation(line: 830, column: 11, scope: !3497)
!3497 = distinct !DILexicalBlock(scope: !3498, file: !3, line: 830, column: 11)
!3498 = distinct !DILexicalBlock(scope: !3493, file: !3, line: 829, column: 5)
!3499 = !DILocation(line: 830, column: 14, scope: !3497)
!3500 = !DILocation(line: 830, column: 22, scope: !3497)
!3501 = !DILocation(line: 830, column: 19, scope: !3497)
!3502 = !DILocation(line: 830, column: 11, scope: !3498)
!3503 = !DILocation(line: 831, column: 2, scope: !3497)
!3504 = !DILocation(line: 832, column: 11, scope: !3505)
!3505 = distinct !DILexicalBlock(scope: !3498, file: !3, line: 832, column: 11)
!3506 = !DILocation(line: 832, column: 11, scope: !3498)
!3507 = !DILocation(line: 833, column: 11, scope: !3505)
!3508 = !DILocation(line: 834, column: 4, scope: !3505)
!3509 = !DILocation(line: 834, column: 21, scope: !3505)
!3510 = !DILocation(line: 834, column: 24, scope: !3505)
!3511 = !DILocation(line: 834, column: 30, scope: !3505)
!3512 = !DILocation(line: 834, column: 37, scope: !3505)
!3513 = !DILocation(line: 834, column: 45, scope: !3505)
!3514 = !DILocation(line: 833, column: 2, scope: !3505)
!3515 = !DILocation(line: 835, column: 27, scope: !3516)
!3516 = distinct !DILexicalBlock(scope: !3498, file: !3, line: 835, column: 11)
!3517 = !DILocation(line: 835, column: 46, scope: !3516)
!3518 = !DILocation(line: 835, column: 33, scope: !3516)
!3519 = !DILocation(line: 835, column: 12, scope: !3516)
!3520 = !DILocation(line: 835, column: 11, scope: !3498)
!3521 = !DILocation(line: 837, column: 4, scope: !3522)
!3522 = distinct !DILexicalBlock(scope: !3516, file: !3, line: 836, column: 2)
!3523 = !DILocation(line: 838, column: 4, scope: !3522)
!3524 = !DILocation(line: 840, column: 5, scope: !3498)
!3525 = !DILocation(line: 843, column: 12, scope: !3526)
!3526 = distinct !DILexicalBlock(scope: !3493, file: !3, line: 843, column: 12)
!3527 = !DILocation(line: 843, column: 22, scope: !3526)
!3528 = !DILocation(line: 843, column: 19, scope: !3526)
!3529 = !DILocation(line: 843, column: 12, scope: !3493)
!3530 = !DILocation(line: 844, column: 5, scope: !3526)
!3531 = !DILocalVariable(name: "target_label", scope: !3532, file: !3, line: 849, type: !889)
!3532 = distinct !DILexicalBlock(scope: !3526, file: !3, line: 848, column: 5)
!3533 = !DILocation(line: 849, column: 11, scope: !3532)
!3534 = !DILocation(line: 849, column: 39, scope: !3532)
!3535 = !DILocation(line: 849, column: 26, scope: !3532)
!3536 = !DILocalVariable(name: "barrier", scope: !3532, file: !3, line: 850, type: !889)
!3537 = !DILocation(line: 850, column: 11, scope: !3532)
!3538 = !DILocalVariable(name: "label", scope: !3532, file: !3, line: 850, type: !889)
!3539 = !DILocation(line: 850, column: 20, scope: !3532)
!3540 = !DILocalVariable(name: "table", scope: !3532, file: !3, line: 850, type: !889)
!3541 = !DILocation(line: 850, column: 27, scope: !3532)
!3542 = !DILocation(line: 852, column: 45, scope: !3532)
!3543 = !DILocation(line: 852, column: 35, scope: !3532)
!3544 = !DILocation(line: 852, column: 60, scope: !3532)
!3545 = !DILocation(line: 852, column: 7, scope: !3532)
!3546 = !DILocation(line: 853, column: 35, scope: !3532)
!3547 = !DILocation(line: 853, column: 7, scope: !3532)
!3548 = !DILocation(line: 853, column: 33, scope: !3532)
!3549 = !DILocation(line: 854, column: 7, scope: !3532)
!3550 = !DILocation(line: 854, column: 33, scope: !3532)
!3551 = !DILocation(line: 855, column: 11, scope: !3552)
!3552 = distinct !DILexicalBlock(scope: !3532, file: !3, line: 855, column: 11)
!3553 = !DILocation(line: 855, column: 11, scope: !3532)
!3554 = !DILocation(line: 856, column: 11, scope: !3552)
!3555 = !DILocation(line: 857, column: 4, scope: !3552)
!3556 = !DILocation(line: 857, column: 21, scope: !3552)
!3557 = !DILocation(line: 856, column: 2, scope: !3552)
!3558 = !DILocation(line: 860, column: 26, scope: !3532)
!3559 = !DILocation(line: 860, column: 37, scope: !3532)
!3560 = !DILocation(line: 860, column: 7, scope: !3532)
!3561 = !DILocation(line: 865, column: 24, scope: !3562)
!3562 = distinct !DILexicalBlock(scope: !3532, file: !3, line: 865, column: 11)
!3563 = !DILocation(line: 865, column: 11, scope: !3562)
!3564 = !DILocation(line: 865, column: 11, scope: !3532)
!3565 = !DILocation(line: 866, column: 21, scope: !3562)
!3566 = !DILocation(line: 866, column: 28, scope: !3562)
!3567 = !DILocation(line: 866, column: 2, scope: !3562)
!3568 = !DILocation(line: 868, column: 36, scope: !3532)
!3569 = !DILocation(line: 868, column: 17, scope: !3532)
!3570 = !DILocation(line: 868, column: 15, scope: !3532)
!3571 = !DILocation(line: 869, column: 12, scope: !3572)
!3572 = distinct !DILexicalBlock(scope: !3532, file: !3, line: 869, column: 11)
!3573 = !DILocation(line: 869, column: 20, scope: !3572)
!3574 = !DILocation(line: 869, column: 24, scope: !3572)
!3575 = !DILocation(line: 869, column: 11, scope: !3532)
!3576 = !DILocation(line: 870, column: 22, scope: !3572)
!3577 = !DILocation(line: 870, column: 2, scope: !3572)
!3578 = !DILocation(line: 873, column: 8, scope: !3579)
!3579 = distinct !DILexicalBlock(scope: !3580, file: !3, line: 873, column: 8)
!3580 = distinct !DILexicalBlock(scope: !3572, file: !3, line: 872, column: 2)
!3581 = !DILocation(line: 873, column: 19, scope: !3579)
!3582 = !DILocation(line: 873, column: 16, scope: !3579)
!3583 = !DILocation(line: 873, column: 8, scope: !3580)
!3584 = !DILocalVariable(name: "new_insn", scope: !3585, file: !3, line: 878, type: !889)
!3585 = distinct !DILexicalBlock(scope: !3579, file: !3, line: 874, column: 6)
!3586 = !DILocation(line: 878, column: 12, scope: !3585)
!3587 = !DILocation(line: 878, column: 23, scope: !3585)
!3588 = !DILocation(line: 880, column: 34, scope: !3585)
!3589 = !DILocation(line: 881, column: 13, scope: !3585)
!3590 = !DILocation(line: 881, column: 34, scope: !3585)
!3591 = !DILocation(line: 880, column: 8, scope: !3585)
!3592 = !DILocation(line: 883, column: 43, scope: !3585)
!3593 = !DILocation(line: 883, column: 8, scope: !3585)
!3594 = !DILocation(line: 883, column: 41, scope: !3585)
!3595 = !DILocation(line: 884, column: 43, scope: !3585)
!3596 = !DILocation(line: 884, column: 8, scope: !3585)
!3597 = !DILocation(line: 884, column: 41, scope: !3585)
!3598 = !DILocation(line: 886, column: 31, scope: !3585)
!3599 = !DILocation(line: 886, column: 8, scope: !3585)
!3600 = !DILocation(line: 886, column: 29, scope: !3585)
!3601 = !DILocation(line: 887, column: 42, scope: !3585)
!3602 = !DILocation(line: 887, column: 8, scope: !3585)
!3603 = !DILocation(line: 887, column: 40, scope: !3585)
!3604 = !DILocation(line: 889, column: 31, scope: !3585)
!3605 = !DILocation(line: 889, column: 8, scope: !3585)
!3606 = !DILocation(line: 889, column: 29, scope: !3585)
!3607 = !DILocation(line: 890, column: 30, scope: !3585)
!3608 = !DILocation(line: 890, column: 8, scope: !3585)
!3609 = !DILocation(line: 890, column: 28, scope: !3585)
!3610 = !DILocation(line: 891, column: 6, scope: !3585)
!3611 = !DILocation(line: 896, column: 23, scope: !3612)
!3612 = distinct !DILexicalBlock(scope: !3356, file: !3, line: 896, column: 7)
!3613 = !DILocation(line: 896, column: 8, scope: !3612)
!3614 = !DILocation(line: 896, column: 7, scope: !3356)
!3615 = !DILocation(line: 897, column: 18, scope: !3612)
!3616 = !DILocation(line: 897, column: 5, scope: !3612)
!3617 = !DILocation(line: 898, column: 3, scope: !3356)
!3618 = !DILocation(line: 900, column: 25, scope: !3356)
!3619 = !DILocation(line: 900, column: 7, scope: !3356)
!3620 = !DILocation(line: 900, column: 5, scope: !3356)
!3621 = !DILocation(line: 901, column: 7, scope: !3622)
!3622 = distinct !DILexicalBlock(scope: !3356, file: !3, line: 901, column: 7)
!3623 = !DILocation(line: 901, column: 7, scope: !3356)
!3624 = !DILocation(line: 902, column: 5, scope: !3622)
!3625 = !DILocation(line: 902, column: 8, scope: !3622)
!3626 = !DILocation(line: 902, column: 14, scope: !3622)
!3627 = !DILocation(line: 904, column: 5, scope: !3622)
!3628 = !DILocation(line: 904, column: 8, scope: !3622)
!3629 = !DILocation(line: 904, column: 14, scope: !3622)
!3630 = !DILocation(line: 906, column: 3, scope: !3356)
!3631 = !DILocation(line: 906, column: 6, scope: !3356)
!3632 = !DILocation(line: 906, column: 18, scope: !3356)
!3633 = !DILocation(line: 907, column: 14, scope: !3356)
!3634 = !DILocation(line: 907, column: 19, scope: !3356)
!3635 = !DILocation(line: 907, column: 3, scope: !3356)
!3636 = !DILocation(line: 907, column: 6, scope: !3356)
!3637 = !DILocation(line: 907, column: 12, scope: !3356)
!3638 = !DILocation(line: 909, column: 7, scope: !3639)
!3639 = distinct !DILexicalBlock(scope: !3356, file: !3, line: 909, column: 7)
!3640 = !DILocation(line: 909, column: 10, scope: !3639)
!3641 = !DILocation(line: 909, column: 18, scope: !3639)
!3642 = !DILocation(line: 909, column: 15, scope: !3639)
!3643 = !DILocation(line: 909, column: 7, scope: !3356)
!3644 = !DILocation(line: 910, column: 25, scope: !3639)
!3645 = !DILocation(line: 910, column: 28, scope: !3639)
!3646 = !DILocation(line: 910, column: 5, scope: !3639)
!3647 = !DILocation(line: 911, column: 10, scope: !3356)
!3648 = !DILocation(line: 911, column: 3, scope: !3356)
!3649 = !DILocation(line: 912, column: 1, scope: !3356)
!3650 = distinct !DISubprogram(name: "VEC_edge_base_length", scope: !155, file: !155, line: 150, type: !3651, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!3651 = !DISubroutineType(types: !3652)
!3652 = !{!7, !3653}
!3653 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3654, size: 64)
!3654 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1402)
!3655 = !DILocalVariable(name: "vec_", arg: 1, scope: !3650, file: !155, line: 150, type: !3653)
!3656 = !DILocation(line: 150, column: 1, scope: !3650)
!3657 = distinct !DISubprogram(name: "VEC_edge_base_index", scope: !155, file: !155, line: 150, type: !3658, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!3658 = !DISubroutineType(types: !3659)
!3659 = !{!1409, !3653, !7}
!3660 = !DILocalVariable(name: "vec_", arg: 1, scope: !3657, file: !155, line: 150, type: !3653)
!3661 = !DILocation(line: 150, column: 1, scope: !3657)
!3662 = !DILocalVariable(name: "ix_", arg: 2, scope: !3657, file: !155, line: 150, type: !7)
!3663 = !DILocation(line: 0, scope: !3657)
!3664 = distinct !DISubprogram(name: "single_succ_p", scope: !155, file: !155, line: 626, type: !2201, scopeLine: 627, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!3665 = !DILocalVariable(name: "bb", arg: 1, scope: !3664, file: !155, line: 626, type: !2196)
!3666 = !DILocation(line: 626, column: 34, scope: !3664)
!3667 = !DILocation(line: 628, column: 10, scope: !3664)
!3668 = !DILocation(line: 628, column: 33, scope: !3664)
!3669 = !DILocation(line: 628, column: 3, scope: !3664)
!3670 = distinct !DISubprogram(name: "single_succ_edge", scope: !155, file: !155, line: 643, type: !3671, scopeLine: 644, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!3671 = !DISubroutineType(types: !3672)
!3672 = !{!1409, !2196}
!3673 = !DILocalVariable(name: "bb", arg: 1, scope: !3670, file: !155, line: 643, type: !2196)
!3674 = !DILocation(line: 643, column: 37, scope: !3670)
!3675 = !DILocation(line: 645, column: 3, scope: !3670)
!3676 = !DILocation(line: 646, column: 10, scope: !3670)
!3677 = !DILocation(line: 646, column: 3, scope: !3670)
!3678 = distinct !DISubprogram(name: "force_nonfallthru", scope: !3, file: !3, line: 1268, type: !2209, scopeLine: 1269, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!3679 = !DILocalVariable(name: "e", arg: 1, scope: !3678, file: !3, line: 1268, type: !1409)
!3680 = !DILocation(line: 1268, column: 25, scope: !3678)
!3681 = !DILocation(line: 1270, column: 42, scope: !3678)
!3682 = !DILocation(line: 1270, column: 45, scope: !3678)
!3683 = !DILocation(line: 1270, column: 48, scope: !3678)
!3684 = !DILocation(line: 1270, column: 10, scope: !3678)
!3685 = !DILocation(line: 1270, column: 3, scope: !3678)
!3686 = distinct !DISubprogram(name: "force_nonfallthru_and_redirect", scope: !3, file: !3, line: 1107, type: !2162, scopeLine: 1108, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!3687 = !DILocalVariable(name: "e", arg: 1, scope: !3686, file: !3, line: 1107, type: !1409)
!3688 = !DILocation(line: 1107, column: 38, scope: !3686)
!3689 = !DILocalVariable(name: "target", arg: 2, scope: !3686, file: !3, line: 1107, type: !1392)
!3690 = !DILocation(line: 1107, column: 53, scope: !3686)
!3691 = !DILocalVariable(name: "jump_block", scope: !3686, file: !3, line: 1109, type: !1392)
!3692 = !DILocation(line: 1109, column: 15, scope: !3686)
!3693 = !DILocalVariable(name: "new_bb", scope: !3686, file: !3, line: 1109, type: !1392)
!3694 = !DILocation(line: 1109, column: 27, scope: !3686)
!3695 = !DILocalVariable(name: "src", scope: !3686, file: !3, line: 1109, type: !1392)
!3696 = !DILocation(line: 1109, column: 42, scope: !3686)
!3697 = !DILocation(line: 1109, column: 48, scope: !3686)
!3698 = !DILocation(line: 1109, column: 51, scope: !3686)
!3699 = !DILocalVariable(name: "note", scope: !3686, file: !3, line: 1110, type: !889)
!3700 = !DILocation(line: 1110, column: 7, scope: !3686)
!3701 = !DILocalVariable(name: "new_edge", scope: !3686, file: !3, line: 1111, type: !1409)
!3702 = !DILocation(line: 1111, column: 8, scope: !3686)
!3703 = !DILocalVariable(name: "abnormal_edge_flags", scope: !3686, file: !3, line: 1112, type: !804)
!3704 = !DILocation(line: 1112, column: 7, scope: !3686)
!3705 = !DILocalVariable(name: "loc", scope: !3686, file: !3, line: 1113, type: !804)
!3706 = !DILocation(line: 1113, column: 7, scope: !3686)
!3707 = !DILocation(line: 1118, column: 7, scope: !3708)
!3708 = distinct !DILexicalBlock(scope: !3686, file: !3, line: 1118, column: 7)
!3709 = !DILocation(line: 1118, column: 10, scope: !3708)
!3710 = !DILocation(line: 1118, column: 17, scope: !3708)
!3711 = !DILocation(line: 1118, column: 14, scope: !3708)
!3712 = !DILocation(line: 1118, column: 33, scope: !3708)
!3713 = !DILocation(line: 1118, column: 36, scope: !3708)
!3714 = !DILocation(line: 1118, column: 39, scope: !3708)
!3715 = !DILocation(line: 1118, column: 47, scope: !3708)
!3716 = !DILocation(line: 1118, column: 44, scope: !3708)
!3717 = !DILocation(line: 1119, column: 7, scope: !3708)
!3718 = !DILocation(line: 1119, column: 26, scope: !3708)
!3719 = !DILocation(line: 1119, column: 10, scope: !3708)
!3720 = !DILocation(line: 1120, column: 7, scope: !3708)
!3721 = !DILocation(line: 1120, column: 10, scope: !3708)
!3722 = !DILocation(line: 1120, column: 42, scope: !3708)
!3723 = !DILocation(line: 1120, column: 39, scope: !3708)
!3724 = !DILocation(line: 1118, column: 7, scope: !3686)
!3725 = !DILocalVariable(name: "note", scope: !3726, file: !3, line: 1122, type: !889)
!3726 = distinct !DILexicalBlock(scope: !3708, file: !3, line: 1121, column: 5)
!3727 = !DILocation(line: 1122, column: 11, scope: !3726)
!3728 = !DILocalVariable(name: "b", scope: !3726, file: !3, line: 1123, type: !1409)
!3729 = !DILocation(line: 1123, column: 12, scope: !3726)
!3730 = !DILocation(line: 1123, column: 37, scope: !3726)
!3731 = !DILocation(line: 1123, column: 40, scope: !3726)
!3732 = !DILocation(line: 1123, column: 45, scope: !3726)
!3733 = !DILocation(line: 1123, column: 16, scope: !3726)
!3734 = !DILocalVariable(name: "redirected", scope: !3726, file: !3, line: 1124, type: !1088)
!3735 = !DILocation(line: 1124, column: 12, scope: !3726)
!3736 = !DILocation(line: 1126, column: 35, scope: !3726)
!3737 = !DILocation(line: 1126, column: 65, scope: !3726)
!3738 = !DILocation(line: 1126, column: 52, scope: !3726)
!3739 = !DILocation(line: 1126, column: 20, scope: !3726)
!3740 = !DILocation(line: 1126, column: 18, scope: !3726)
!3741 = !DILocation(line: 1127, column: 7, scope: !3726)
!3742 = !DILocation(line: 1129, column: 29, scope: !3726)
!3743 = !DILocation(line: 1129, column: 14, scope: !3726)
!3744 = !DILocation(line: 1129, column: 12, scope: !3726)
!3745 = !DILocation(line: 1130, column: 11, scope: !3746)
!3746 = distinct !DILexicalBlock(scope: !3726, file: !3, line: 1130, column: 11)
!3747 = !DILocation(line: 1130, column: 11, scope: !3726)
!3748 = !DILocalVariable(name: "prob", scope: !3749, file: !3, line: 1132, type: !804)
!3749 = distinct !DILexicalBlock(scope: !3746, file: !3, line: 1131, column: 2)
!3750 = !DILocation(line: 1132, column: 8, scope: !3749)
!3751 = !DILocation(line: 1132, column: 15, scope: !3749)
!3752 = !DILocation(line: 1134, column: 21, scope: !3749)
!3753 = !DILocation(line: 1134, column: 4, scope: !3749)
!3754 = !DILocation(line: 1134, column: 7, scope: !3749)
!3755 = !DILocation(line: 1134, column: 19, scope: !3749)
!3756 = !DILocation(line: 1135, column: 15, scope: !3749)
!3757 = !DILocation(line: 1135, column: 18, scope: !3749)
!3758 = !DILocation(line: 1135, column: 26, scope: !3749)
!3759 = !DILocation(line: 1135, column: 24, scope: !3749)
!3760 = !DILocation(line: 1135, column: 31, scope: !3749)
!3761 = !DILocation(line: 1135, column: 4, scope: !3749)
!3762 = !DILocation(line: 1135, column: 7, scope: !3749)
!3763 = !DILocation(line: 1135, column: 13, scope: !3749)
!3764 = !DILocation(line: 1136, column: 22, scope: !3749)
!3765 = !DILocation(line: 1136, column: 25, scope: !3749)
!3766 = !DILocation(line: 1136, column: 4, scope: !3749)
!3767 = !DILocation(line: 1136, column: 7, scope: !3749)
!3768 = !DILocation(line: 1136, column: 19, scope: !3749)
!3769 = !DILocation(line: 1137, column: 16, scope: !3749)
!3770 = !DILocation(line: 1137, column: 19, scope: !3749)
!3771 = !DILocation(line: 1137, column: 4, scope: !3749)
!3772 = !DILocation(line: 1137, column: 7, scope: !3749)
!3773 = !DILocation(line: 1137, column: 13, scope: !3749)
!3774 = !DILocation(line: 1138, column: 8, scope: !3775)
!3775 = distinct !DILexicalBlock(scope: !3749, file: !3, line: 1138, column: 8)
!3776 = !DILocation(line: 1138, column: 11, scope: !3775)
!3777 = !DILocation(line: 1138, column: 23, scope: !3775)
!3778 = !DILocation(line: 1138, column: 8, scope: !3749)
!3779 = !DILocation(line: 1139, column: 6, scope: !3775)
!3780 = !DILocation(line: 1139, column: 9, scope: !3775)
!3781 = !DILocation(line: 1139, column: 21, scope: !3775)
!3782 = !DILocation(line: 1140, column: 8, scope: !3783)
!3783 = distinct !DILexicalBlock(scope: !3749, file: !3, line: 1140, column: 8)
!3784 = !DILocation(line: 1140, column: 11, scope: !3783)
!3785 = !DILocation(line: 1140, column: 17, scope: !3783)
!3786 = !DILocation(line: 1140, column: 8, scope: !3749)
!3787 = !DILocation(line: 1141, column: 6, scope: !3783)
!3788 = !DILocation(line: 1141, column: 9, scope: !3783)
!3789 = !DILocation(line: 1141, column: 15, scope: !3783)
!3790 = !DILocation(line: 1142, column: 2, scope: !3749)
!3791 = !DILocation(line: 1143, column: 5, scope: !3726)
!3792 = !DILocation(line: 1145, column: 7, scope: !3793)
!3793 = distinct !DILexicalBlock(scope: !3686, file: !3, line: 1145, column: 7)
!3794 = !DILocation(line: 1145, column: 10, scope: !3793)
!3795 = !DILocation(line: 1145, column: 16, scope: !3793)
!3796 = !DILocation(line: 1145, column: 7, scope: !3686)
!3797 = !DILocation(line: 1152, column: 7, scope: !3798)
!3798 = distinct !DILexicalBlock(scope: !3793, file: !3, line: 1146, column: 5)
!3799 = !DILocation(line: 1153, column: 29, scope: !3798)
!3800 = !DILocation(line: 1153, column: 32, scope: !3798)
!3801 = !DILocation(line: 1153, column: 38, scope: !3798)
!3802 = !DILocation(line: 1153, column: 27, scope: !3798)
!3803 = !DILocation(line: 1154, column: 7, scope: !3798)
!3804 = !DILocation(line: 1154, column: 10, scope: !3798)
!3805 = !DILocation(line: 1154, column: 16, scope: !3798)
!3806 = !DILocation(line: 1155, column: 5, scope: !3798)
!3807 = !DILocation(line: 1158, column: 7, scope: !3808)
!3808 = distinct !DILexicalBlock(scope: !3793, file: !3, line: 1157, column: 5)
!3809 = !DILocation(line: 1159, column: 11, scope: !3810)
!3810 = distinct !DILexicalBlock(scope: !3808, file: !3, line: 1159, column: 11)
!3811 = !DILocation(line: 1159, column: 14, scope: !3810)
!3812 = !DILocation(line: 1159, column: 21, scope: !3810)
!3813 = !DILocation(line: 1159, column: 18, scope: !3810)
!3814 = !DILocation(line: 1159, column: 11, scope: !3808)
!3815 = !DILocalVariable(name: "tmp", scope: !3816, file: !3, line: 1164, type: !1409)
!3816 = distinct !DILexicalBlock(scope: !3810, file: !3, line: 1160, column: 2)
!3817 = !DILocation(line: 1164, column: 9, scope: !3816)
!3818 = !DILocalVariable(name: "ei", scope: !3816, file: !3, line: 1165, type: !2483)
!3819 = !DILocation(line: 1165, column: 18, scope: !3816)
!3820 = !DILocalVariable(name: "found", scope: !3816, file: !3, line: 1166, type: !1088)
!3821 = !DILocation(line: 1166, column: 9, scope: !3816)
!3822 = !DILocalVariable(name: "bb", scope: !3816, file: !3, line: 1168, type: !1392)
!3823 = !DILocation(line: 1168, column: 16, scope: !3816)
!3824 = !DILocation(line: 1168, column: 41, scope: !3816)
!3825 = !DILocation(line: 1168, column: 66, scope: !3816)
!3826 = !DILocation(line: 1168, column: 21, scope: !3816)
!3827 = !DILocation(line: 1172, column: 13, scope: !3816)
!3828 = !DILocation(line: 1172, column: 4, scope: !3816)
!3829 = !DILocation(line: 1172, column: 7, scope: !3816)
!3830 = !DILocation(line: 1172, column: 11, scope: !3816)
!3831 = !DILocation(line: 1173, column: 14, scope: !3832)
!3832 = distinct !DILexicalBlock(scope: !3816, file: !3, line: 1173, column: 4)
!3833 = !DILocation(line: 1173, column: 9, scope: !3832)
!3834 = !DILocation(line: 1173, column: 56, scope: !3835)
!3835 = distinct !DILexicalBlock(scope: !3832, file: !3, line: 1173, column: 4)
!3836 = !DILocation(line: 1173, column: 54, scope: !3835)
!3837 = !DILocation(line: 1173, column: 4, scope: !3832)
!3838 = !DILocation(line: 1175, column: 12, scope: !3839)
!3839 = distinct !DILexicalBlock(scope: !3840, file: !3, line: 1175, column: 12)
!3840 = distinct !DILexicalBlock(scope: !3835, file: !3, line: 1174, column: 6)
!3841 = !DILocation(line: 1175, column: 19, scope: !3839)
!3842 = !DILocation(line: 1175, column: 16, scope: !3839)
!3843 = !DILocation(line: 1175, column: 12, scope: !3840)
!3844 = !DILocation(line: 1177, column: 5, scope: !3845)
!3845 = distinct !DILexicalBlock(scope: !3839, file: !3, line: 1176, column: 3)
!3846 = !DILocation(line: 1178, column: 11, scope: !3845)
!3847 = !DILocation(line: 1179, column: 5, scope: !3845)
!3848 = !DILocation(line: 1182, column: 3, scope: !3839)
!3849 = !DILocation(line: 1173, column: 4, scope: !3835)
!3850 = distinct !{!3850, !3837, !3851}
!3851 = !DILocation(line: 1183, column: 6, scope: !3832)
!3852 = !DILocation(line: 1185, column: 4, scope: !3816)
!3853 = !DILocation(line: 1187, column: 4, scope: !3816)
!3854 = !DILocation(line: 1188, column: 27, scope: !3816)
!3855 = !DILocation(line: 1188, column: 44, scope: !3816)
!3856 = !DILocation(line: 1188, column: 4, scope: !3816)
!3857 = !DILocation(line: 1189, column: 2, scope: !3816)
!3858 = !DILocation(line: 1192, column: 7, scope: !3859)
!3859 = distinct !DILexicalBlock(scope: !3686, file: !3, line: 1192, column: 7)
!3860 = !DILocation(line: 1192, column: 34, scope: !3859)
!3861 = !DILocation(line: 1192, column: 39, scope: !3859)
!3862 = !DILocation(line: 1192, column: 42, scope: !3859)
!3863 = !DILocation(line: 1192, column: 7, scope: !3686)
!3864 = !DILocation(line: 1199, column: 25, scope: !3865)
!3865 = distinct !DILexicalBlock(scope: !3866, file: !3, line: 1199, column: 11)
!3866 = distinct !DILexicalBlock(scope: !3859, file: !3, line: 1193, column: 5)
!3867 = !DILocation(line: 1199, column: 12, scope: !3865)
!3868 = !DILocation(line: 1199, column: 11, scope: !3866)
!3869 = !DILocation(line: 1200, column: 9, scope: !3865)
!3870 = !DILocation(line: 1200, column: 7, scope: !3865)
!3871 = !DILocation(line: 1200, column: 2, scope: !3865)
!3872 = !DILocation(line: 1201, column: 14, scope: !3866)
!3873 = !DILocation(line: 1201, column: 12, scope: !3866)
!3874 = !DILocation(line: 1203, column: 40, scope: !3866)
!3875 = !DILocation(line: 1203, column: 52, scope: !3866)
!3876 = !DILocation(line: 1203, column: 55, scope: !3866)
!3877 = !DILocation(line: 1203, column: 20, scope: !3866)
!3878 = !DILocation(line: 1203, column: 18, scope: !3866)
!3879 = !DILocation(line: 1204, column: 27, scope: !3866)
!3880 = !DILocation(line: 1204, column: 30, scope: !3866)
!3881 = !DILocation(line: 1204, column: 7, scope: !3866)
!3882 = !DILocation(line: 1204, column: 19, scope: !3866)
!3883 = !DILocation(line: 1204, column: 25, scope: !3866)
!3884 = !DILocation(line: 1205, column: 31, scope: !3866)
!3885 = !DILocation(line: 1205, column: 7, scope: !3866)
!3886 = !DILocation(line: 1205, column: 19, scope: !3866)
!3887 = !DILocation(line: 1205, column: 29, scope: !3866)
!3888 = !DILocation(line: 1206, column: 32, scope: !3866)
!3889 = !DILocation(line: 1206, column: 40, scope: !3866)
!3890 = !DILocation(line: 1206, column: 7, scope: !3866)
!3891 = !DILocation(line: 1206, column: 19, scope: !3866)
!3892 = !DILocation(line: 1206, column: 30, scope: !3866)
!3893 = !DILocation(line: 1210, column: 7, scope: !3866)
!3894 = !DILocalVariable(name: "bb_", scope: !3895, file: !3, line: 1210, type: !1392)
!3895 = distinct !DILexicalBlock(scope: !3866, file: !3, line: 1210, column: 7)
!3896 = !DILocation(line: 1210, column: 7, scope: !3895)
!3897 = !DILocation(line: 1211, column: 11, scope: !3898)
!3898 = distinct !DILexicalBlock(scope: !3866, file: !3, line: 1211, column: 11)
!3899 = !DILocation(line: 1212, column: 4, scope: !3898)
!3900 = !DILocation(line: 1212, column: 15, scope: !3898)
!3901 = !DILocation(line: 1212, column: 7, scope: !3898)
!3902 = !DILocation(line: 1213, column: 4, scope: !3898)
!3903 = !DILocation(line: 1213, column: 7, scope: !3898)
!3904 = !DILocation(line: 1214, column: 4, scope: !3898)
!3905 = !DILocation(line: 1214, column: 24, scope: !3898)
!3906 = !DILocation(line: 1214, column: 8, scope: !3898)
!3907 = !DILocation(line: 1215, column: 4, scope: !3898)
!3908 = !DILocation(line: 1215, column: 8, scope: !3898)
!3909 = !DILocation(line: 1215, column: 35, scope: !3898)
!3910 = !DILocation(line: 1215, column: 41, scope: !3898)
!3911 = !DILocation(line: 1211, column: 11, scope: !3866)
!3912 = !DILocation(line: 1216, column: 16, scope: !3898)
!3913 = !DILocation(line: 1216, column: 2, scope: !3898)
!3914 = !DILocation(line: 1219, column: 29, scope: !3866)
!3915 = !DILocation(line: 1219, column: 32, scope: !3866)
!3916 = !DILocation(line: 1219, column: 37, scope: !3866)
!3917 = !DILocation(line: 1219, column: 18, scope: !3866)
!3918 = !DILocation(line: 1219, column: 16, scope: !3866)
!3919 = !DILocation(line: 1220, column: 31, scope: !3866)
!3920 = !DILocation(line: 1220, column: 34, scope: !3866)
!3921 = !DILocation(line: 1220, column: 7, scope: !3866)
!3922 = !DILocation(line: 1220, column: 17, scope: !3866)
!3923 = !DILocation(line: 1220, column: 29, scope: !3866)
!3924 = !DILocation(line: 1221, column: 25, scope: !3866)
!3925 = !DILocation(line: 1221, column: 28, scope: !3866)
!3926 = !DILocation(line: 1221, column: 7, scope: !3866)
!3927 = !DILocation(line: 1221, column: 17, scope: !3866)
!3928 = !DILocation(line: 1221, column: 23, scope: !3866)
!3929 = !DILocation(line: 1224, column: 27, scope: !3866)
!3930 = !DILocation(line: 1224, column: 30, scope: !3866)
!3931 = !DILocation(line: 1224, column: 7, scope: !3866)
!3932 = !DILocation(line: 1225, column: 7, scope: !3866)
!3933 = !DILocation(line: 1225, column: 10, scope: !3866)
!3934 = !DILocation(line: 1225, column: 22, scope: !3866)
!3935 = !DILocation(line: 1227, column: 16, scope: !3866)
!3936 = !DILocation(line: 1227, column: 14, scope: !3866)
!3937 = !DILocation(line: 1228, column: 5, scope: !3866)
!3938 = !DILocation(line: 1230, column: 18, scope: !3859)
!3939 = !DILocation(line: 1230, column: 21, scope: !3859)
!3940 = !DILocation(line: 1230, column: 16, scope: !3859)
!3941 = !DILocation(line: 1232, column: 7, scope: !3942)
!3942 = distinct !DILexicalBlock(scope: !3686, file: !3, line: 1232, column: 7)
!3943 = !DILocation(line: 1232, column: 10, scope: !3942)
!3944 = !DILocation(line: 1232, column: 21, scope: !3942)
!3945 = !DILocation(line: 1232, column: 24, scope: !3942)
!3946 = !DILocation(line: 1232, column: 27, scope: !3942)
!3947 = !DILocation(line: 1232, column: 38, scope: !3942)
!3948 = !DILocation(line: 1232, column: 7, scope: !3686)
!3949 = !DILocation(line: 1233, column: 11, scope: !3942)
!3950 = !DILocation(line: 1233, column: 14, scope: !3942)
!3951 = !DILocation(line: 1233, column: 9, scope: !3942)
!3952 = !DILocation(line: 1233, column: 5, scope: !3942)
!3953 = !DILocation(line: 1235, column: 9, scope: !3942)
!3954 = !DILocation(line: 1236, column: 3, scope: !3686)
!3955 = !DILocation(line: 1236, column: 6, scope: !3686)
!3956 = !DILocation(line: 1236, column: 12, scope: !3686)
!3957 = !DILocation(line: 1237, column: 7, scope: !3958)
!3958 = distinct !DILexicalBlock(scope: !3686, file: !3, line: 1237, column: 7)
!3959 = !DILocation(line: 1237, column: 17, scope: !3958)
!3960 = !DILocation(line: 1237, column: 14, scope: !3958)
!3961 = !DILocation(line: 1237, column: 7, scope: !3686)
!3962 = !DILocation(line: 1240, column: 31, scope: !3963)
!3963 = distinct !DILexicalBlock(scope: !3958, file: !3, line: 1238, column: 5)
!3964 = !DILocation(line: 1240, column: 46, scope: !3963)
!3965 = !DILocation(line: 1240, column: 67, scope: !3963)
!3966 = !DILocation(line: 1240, column: 2, scope: !3963)
!3967 = !DILocation(line: 1244, column: 5, scope: !3963)
!3968 = !DILocalVariable(name: "label", scope: !3969, file: !3, line: 1247, type: !889)
!3969 = distinct !DILexicalBlock(scope: !3958, file: !3, line: 1246, column: 5)
!3970 = !DILocation(line: 1247, column: 11, scope: !3969)
!3971 = !DILocation(line: 1247, column: 32, scope: !3969)
!3972 = !DILocation(line: 1247, column: 19, scope: !3969)
!3973 = !DILocation(line: 1248, column: 46, scope: !3969)
!3974 = !DILocation(line: 1248, column: 36, scope: !3969)
!3975 = !DILocation(line: 1248, column: 54, scope: !3969)
!3976 = !DILocation(line: 1248, column: 75, scope: !3969)
!3977 = !DILocation(line: 1248, column: 7, scope: !3969)
!3978 = !DILocation(line: 1249, column: 42, scope: !3969)
!3979 = !DILocation(line: 1249, column: 7, scope: !3969)
!3980 = !DILocation(line: 1249, column: 40, scope: !3969)
!3981 = !DILocation(line: 1250, column: 7, scope: !3969)
!3982 = !DILocation(line: 1250, column: 26, scope: !3969)
!3983 = !DILocation(line: 1253, column: 23, scope: !3686)
!3984 = !DILocation(line: 1253, column: 3, scope: !3686)
!3985 = !DILocation(line: 1254, column: 29, scope: !3686)
!3986 = !DILocation(line: 1254, column: 32, scope: !3686)
!3987 = !DILocation(line: 1254, column: 3, scope: !3686)
!3988 = !DILocation(line: 1256, column: 7, scope: !3989)
!3989 = distinct !DILexicalBlock(scope: !3686, file: !3, line: 1256, column: 7)
!3990 = !DILocation(line: 1256, column: 7, scope: !3686)
!3991 = !DILocation(line: 1257, column: 16, scope: !3989)
!3992 = !DILocation(line: 1257, column: 21, scope: !3989)
!3993 = !DILocation(line: 1257, column: 29, scope: !3989)
!3994 = !DILocation(line: 1257, column: 5, scope: !3989)
!3995 = !DILocation(line: 1259, column: 3, scope: !3686)
!3996 = !DILocation(line: 1260, column: 10, scope: !3686)
!3997 = !DILocation(line: 1260, column: 3, scope: !3686)
!3998 = distinct !DISubprogram(name: "commit_one_edge_insertion", scope: !3, file: !3, line: 1440, type: !2213, scopeLine: 1441, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!3999 = !DILocalVariable(name: "e", arg: 1, scope: !3998, file: !3, line: 1440, type: !1409)
!4000 = !DILocation(line: 1440, column: 33, scope: !3998)
!4001 = !DILocalVariable(name: "before", scope: !3998, file: !3, line: 1442, type: !889)
!4002 = !DILocation(line: 1442, column: 7, scope: !3998)
!4003 = !DILocalVariable(name: "after", scope: !3998, file: !3, line: 1442, type: !889)
!4004 = !DILocation(line: 1442, column: 26, scope: !3998)
!4005 = !DILocalVariable(name: "insns", scope: !3998, file: !3, line: 1442, type: !889)
!4006 = !DILocation(line: 1442, column: 44, scope: !3998)
!4007 = !DILocalVariable(name: "tmp", scope: !3998, file: !3, line: 1442, type: !889)
!4008 = !DILocation(line: 1442, column: 51, scope: !3998)
!4009 = !DILocalVariable(name: "last", scope: !3998, file: !3, line: 1442, type: !889)
!4010 = !DILocation(line: 1442, column: 56, scope: !3998)
!4011 = !DILocalVariable(name: "bb", scope: !3998, file: !3, line: 1443, type: !1392)
!4012 = !DILocation(line: 1443, column: 15, scope: !3998)
!4013 = !DILocation(line: 1446, column: 11, scope: !3998)
!4014 = !DILocation(line: 1446, column: 14, scope: !3998)
!4015 = !DILocation(line: 1446, column: 20, scope: !3998)
!4016 = !DILocation(line: 1446, column: 9, scope: !3998)
!4017 = !DILocation(line: 1447, column: 3, scope: !3998)
!4018 = !DILocation(line: 1447, column: 6, scope: !3998)
!4019 = !DILocation(line: 1447, column: 12, scope: !3998)
!4020 = !DILocation(line: 1447, column: 14, scope: !3998)
!4021 = !DILocation(line: 1449, column: 8, scope: !4022)
!4022 = distinct !DILexicalBlock(scope: !3998, file: !3, line: 1449, column: 7)
!4023 = !DILocation(line: 1449, column: 15, scope: !4022)
!4024 = !DILocation(line: 1449, column: 19, scope: !4022)
!4025 = !DILocation(line: 1449, column: 7, scope: !3998)
!4026 = !DILocation(line: 1453, column: 26, scope: !4027)
!4027 = distinct !DILexicalBlock(scope: !4028, file: !3, line: 1453, column: 11)
!4028 = distinct !DILexicalBlock(scope: !4022, file: !3, line: 1450, column: 5)
!4029 = !DILocation(line: 1453, column: 29, scope: !4027)
!4030 = !DILocation(line: 1453, column: 11, scope: !4027)
!4031 = !DILocation(line: 1453, column: 35, scope: !4027)
!4032 = !DILocation(line: 1453, column: 38, scope: !4027)
!4033 = !DILocation(line: 1453, column: 41, scope: !4027)
!4034 = !DILocation(line: 1453, column: 49, scope: !4027)
!4035 = !DILocation(line: 1453, column: 46, scope: !4027)
!4036 = !DILocation(line: 1453, column: 11, scope: !4028)
!4037 = !DILocation(line: 1455, column: 9, scope: !4038)
!4038 = distinct !DILexicalBlock(scope: !4027, file: !3, line: 1454, column: 2)
!4039 = !DILocation(line: 1455, column: 12, scope: !4038)
!4040 = !DILocation(line: 1455, column: 7, scope: !4038)
!4041 = !DILocation(line: 1459, column: 10, scope: !4038)
!4042 = !DILocation(line: 1459, column: 8, scope: !4038)
!4043 = !DILocation(line: 1460, column: 8, scope: !4044)
!4044 = distinct !DILexicalBlock(scope: !4038, file: !3, line: 1460, column: 8)
!4045 = !DILocation(line: 1460, column: 8, scope: !4038)
!4046 = !DILocation(line: 1461, column: 12, scope: !4044)
!4047 = !DILocation(line: 1461, column: 10, scope: !4044)
!4048 = !DILocation(line: 1461, column: 6, scope: !4044)
!4049 = !DILocation(line: 1462, column: 8, scope: !4050)
!4050 = distinct !DILexicalBlock(scope: !4038, file: !3, line: 1462, column: 8)
!4051 = !DILocation(line: 1462, column: 8, scope: !4038)
!4052 = !DILocation(line: 1463, column: 12, scope: !4050)
!4053 = !DILocation(line: 1463, column: 10, scope: !4050)
!4054 = !DILocation(line: 1463, column: 6, scope: !4050)
!4055 = !DILocation(line: 1464, column: 8, scope: !4056)
!4056 = distinct !DILexicalBlock(scope: !4038, file: !3, line: 1464, column: 8)
!4057 = !DILocation(line: 1464, column: 15, scope: !4056)
!4058 = !DILocation(line: 1464, column: 12, scope: !4056)
!4059 = !DILocation(line: 1464, column: 8, scope: !4038)
!4060 = !DILocation(line: 1465, column: 15, scope: !4056)
!4061 = !DILocation(line: 1465, column: 13, scope: !4056)
!4062 = !DILocation(line: 1465, column: 6, scope: !4056)
!4063 = !DILocation(line: 1466, column: 13, scope: !4064)
!4064 = distinct !DILexicalBlock(scope: !4056, file: !3, line: 1466, column: 13)
!4065 = !DILocation(line: 1466, column: 13, scope: !4056)
!4066 = !DILocation(line: 1467, column: 14, scope: !4064)
!4067 = !DILocation(line: 1467, column: 12, scope: !4064)
!4068 = !DILocation(line: 1467, column: 6, scope: !4064)
!4069 = !DILocation(line: 1469, column: 14, scope: !4064)
!4070 = !DILocation(line: 1469, column: 12, scope: !4064)
!4071 = !DILocation(line: 1470, column: 2, scope: !4038)
!4072 = !DILocation(line: 1474, column: 17, scope: !4073)
!4073 = distinct !DILexicalBlock(scope: !4027, file: !3, line: 1474, column: 16)
!4074 = !DILocation(line: 1474, column: 20, scope: !4073)
!4075 = !DILocation(line: 1474, column: 26, scope: !4073)
!4076 = !DILocation(line: 1474, column: 43, scope: !4073)
!4077 = !DILocation(line: 1475, column: 9, scope: !4073)
!4078 = !DILocation(line: 1475, column: 27, scope: !4073)
!4079 = !DILocation(line: 1475, column: 30, scope: !4073)
!4080 = !DILocation(line: 1475, column: 12, scope: !4073)
!4081 = !DILocation(line: 1476, column: 9, scope: !4073)
!4082 = !DILocation(line: 1476, column: 12, scope: !4073)
!4083 = !DILocation(line: 1476, column: 15, scope: !4073)
!4084 = !DILocation(line: 1476, column: 22, scope: !4073)
!4085 = !DILocation(line: 1476, column: 19, scope: !4073)
!4086 = !DILocation(line: 1474, column: 16, scope: !4027)
!4087 = !DILocation(line: 1478, column: 9, scope: !4088)
!4088 = distinct !DILexicalBlock(scope: !4073, file: !3, line: 1477, column: 2)
!4089 = !DILocation(line: 1478, column: 12, scope: !4088)
!4090 = !DILocation(line: 1478, column: 7, scope: !4088)
!4091 = !DILocation(line: 1486, column: 8, scope: !4092)
!4092 = distinct !DILexicalBlock(scope: !4088, file: !3, line: 1486, column: 8)
!4093 = !DILocation(line: 1486, column: 8, scope: !4088)
!4094 = !DILocation(line: 1487, column: 15, scope: !4092)
!4095 = !DILocation(line: 1487, column: 13, scope: !4092)
!4096 = !DILocation(line: 1487, column: 6, scope: !4092)
!4097 = !DILocation(line: 1492, column: 8, scope: !4098)
!4098 = distinct !DILexicalBlock(scope: !4092, file: !3, line: 1489, column: 6)
!4099 = !DILocation(line: 1494, column: 16, scope: !4098)
!4100 = !DILocation(line: 1494, column: 14, scope: !4098)
!4101 = !DILocation(line: 1496, column: 2, scope: !4088)
!4102 = !DILocation(line: 1500, column: 21, scope: !4103)
!4103 = distinct !DILexicalBlock(scope: !4073, file: !3, line: 1499, column: 2)
!4104 = !DILocation(line: 1500, column: 9, scope: !4103)
!4105 = !DILocation(line: 1500, column: 7, scope: !4103)
!4106 = !DILocation(line: 1501, column: 12, scope: !4103)
!4107 = !DILocation(line: 1501, column: 10, scope: !4103)
!4108 = !DILocation(line: 1503, column: 8, scope: !4109)
!4109 = distinct !DILexicalBlock(scope: !4103, file: !3, line: 1503, column: 8)
!4110 = !DILocation(line: 1504, column: 8, scope: !4109)
!4111 = !DILocation(line: 1504, column: 19, scope: !4109)
!4112 = !DILocation(line: 1504, column: 11, scope: !4109)
!4113 = !DILocation(line: 1505, column: 8, scope: !4109)
!4114 = !DILocation(line: 1505, column: 11, scope: !4109)
!4115 = !DILocation(line: 1505, column: 14, scope: !4109)
!4116 = !DILocation(line: 1505, column: 21, scope: !4109)
!4117 = !DILocation(line: 1505, column: 18, scope: !4109)
!4118 = !DILocation(line: 1506, column: 8, scope: !4109)
!4119 = !DILocation(line: 1506, column: 11, scope: !4109)
!4120 = !DILocation(line: 1506, column: 33, scope: !4109)
!4121 = !DILocation(line: 1507, column: 8, scope: !4109)
!4122 = !DILocation(line: 1507, column: 13, scope: !4109)
!4123 = !DILocation(line: 1507, column: 16, scope: !4109)
!4124 = !DILocation(line: 1507, column: 22, scope: !4109)
!4125 = !DILocation(line: 1508, column: 8, scope: !4109)
!4126 = !DILocation(line: 1508, column: 11, scope: !4109)
!4127 = !DILocation(line: 1509, column: 8, scope: !4109)
!4128 = !DILocation(line: 1509, column: 28, scope: !4109)
!4129 = !DILocation(line: 1509, column: 12, scope: !4109)
!4130 = !DILocation(line: 1510, column: 8, scope: !4109)
!4131 = !DILocation(line: 1510, column: 30, scope: !4109)
!4132 = !DILocation(line: 1510, column: 12, scope: !4109)
!4133 = !DILocation(line: 1510, column: 35, scope: !4109)
!4134 = !DILocation(line: 1510, column: 41, scope: !4109)
!4135 = !DILocation(line: 1503, column: 8, scope: !4103)
!4136 = !DILocation(line: 1511, column: 20, scope: !4109)
!4137 = !DILocation(line: 1511, column: 6, scope: !4109)
!4138 = !DILocation(line: 1513, column: 5, scope: !4028)
!4139 = !DILocation(line: 1517, column: 7, scope: !4140)
!4140 = distinct !DILexicalBlock(scope: !3998, file: !3, line: 1517, column: 7)
!4141 = !DILocation(line: 1517, column: 7, scope: !3998)
!4142 = !DILocation(line: 1519, column: 31, scope: !4143)
!4143 = distinct !DILexicalBlock(scope: !4140, file: !3, line: 1518, column: 5)
!4144 = !DILocation(line: 1519, column: 38, scope: !4143)
!4145 = !DILocation(line: 1519, column: 46, scope: !4143)
!4146 = !DILocation(line: 1519, column: 7, scope: !4143)
!4147 = !DILocation(line: 1520, column: 33, scope: !4143)
!4148 = !DILocation(line: 1520, column: 14, scope: !4143)
!4149 = !DILocation(line: 1520, column: 12, scope: !4143)
!4150 = !DILocation(line: 1521, column: 5, scope: !4143)
!4151 = !DILocation(line: 1523, column: 35, scope: !4140)
!4152 = !DILocation(line: 1523, column: 42, scope: !4140)
!4153 = !DILocation(line: 1523, column: 49, scope: !4140)
!4154 = !DILocation(line: 1523, column: 12, scope: !4140)
!4155 = !DILocation(line: 1523, column: 10, scope: !4140)
!4156 = !DILocation(line: 1525, column: 21, scope: !4157)
!4157 = distinct !DILexicalBlock(scope: !3998, file: !3, line: 1525, column: 7)
!4158 = !DILocation(line: 1525, column: 7, scope: !4157)
!4159 = !DILocation(line: 1525, column: 7, scope: !3998)
!4160 = !DILocation(line: 1532, column: 29, scope: !4161)
!4161 = distinct !DILexicalBlock(scope: !4157, file: !3, line: 1526, column: 5)
!4162 = !DILocation(line: 1532, column: 11, scope: !4161)
!4163 = !DILocation(line: 1532, column: 9, scope: !4161)
!4164 = !DILocation(line: 1533, column: 7, scope: !4161)
!4165 = !DILocation(line: 1536, column: 7, scope: !4161)
!4166 = !DILocation(line: 1536, column: 10, scope: !4161)
!4167 = !DILocation(line: 1536, column: 16, scope: !4161)
!4168 = !DILocation(line: 1537, column: 27, scope: !4161)
!4169 = !DILocation(line: 1537, column: 7, scope: !4161)
!4170 = !DILocation(line: 1539, column: 11, scope: !4171)
!4171 = distinct !DILexicalBlock(scope: !4161, file: !3, line: 1539, column: 11)
!4172 = !DILocation(line: 1539, column: 11, scope: !4161)
!4173 = !DILocation(line: 1540, column: 15, scope: !4171)
!4174 = !DILocation(line: 1540, column: 2, scope: !4171)
!4175 = !DILocation(line: 1541, column: 5, scope: !4161)
!4176 = !DILocation(line: 1543, column: 5, scope: !4157)
!4177 = !DILocation(line: 1546, column: 7, scope: !4178)
!4178 = distinct !DILexicalBlock(scope: !3998, file: !3, line: 1546, column: 7)
!4179 = !DILocation(line: 1546, column: 26, scope: !4178)
!4180 = !DILocation(line: 1546, column: 7, scope: !3998)
!4181 = !DILocation(line: 1547, column: 16, scope: !4178)
!4182 = !DILocation(line: 1547, column: 20, scope: !4178)
!4183 = !DILocation(line: 1547, column: 15, scope: !4178)
!4184 = !DILocation(line: 1547, column: 5, scope: !4178)
!4185 = !DILocation(line: 1547, column: 9, scope: !4178)
!4186 = !DILocation(line: 1547, column: 13, scope: !4178)
!4187 = !DILocation(line: 1548, column: 1, scope: !3998)
!4188 = distinct !DISubprogram(name: "single_pred_p", scope: !155, file: !155, line: 634, type: !2201, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!4189 = !DILocalVariable(name: "bb", arg: 1, scope: !4188, file: !155, line: 634, type: !2196)
!4190 = !DILocation(line: 634, column: 34, scope: !4188)
!4191 = !DILocation(line: 636, column: 10, scope: !4188)
!4192 = !DILocation(line: 636, column: 33, scope: !4188)
!4193 = !DILocation(line: 636, column: 3, scope: !4188)
!4194 = distinct !DISubprogram(name: "ei_cond", scope: !155, file: !155, line: 771, type: !4195, scopeLine: 772, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!4195 = !DISubroutineType(types: !4196)
!4196 = !{!1088, !2483, !2260}
!4197 = !DILocalVariable(name: "ei", arg: 1, scope: !4194, file: !155, line: 771, type: !2483)
!4198 = !DILocation(line: 771, column: 24, scope: !4194)
!4199 = !DILocalVariable(name: "p", arg: 2, scope: !4194, file: !155, line: 771, type: !2260)
!4200 = !DILocation(line: 771, column: 34, scope: !4194)
!4201 = !DILocation(line: 773, column: 8, scope: !4202)
!4202 = distinct !DILexicalBlock(scope: !4194, file: !155, line: 773, column: 7)
!4203 = !DILocation(line: 773, column: 7, scope: !4194)
!4204 = !DILocation(line: 775, column: 12, scope: !4205)
!4205 = distinct !DILexicalBlock(scope: !4202, file: !155, line: 774, column: 5)
!4206 = !DILocation(line: 775, column: 8, scope: !4205)
!4207 = !DILocation(line: 775, column: 10, scope: !4205)
!4208 = !DILocation(line: 776, column: 7, scope: !4205)
!4209 = !DILocation(line: 780, column: 8, scope: !4210)
!4210 = distinct !DILexicalBlock(scope: !4202, file: !155, line: 779, column: 5)
!4211 = !DILocation(line: 780, column: 10, scope: !4210)
!4212 = !DILocation(line: 781, column: 7, scope: !4210)
!4213 = !DILocation(line: 783, column: 1, scope: !4194)
!4214 = distinct !DISubprogram(name: "ei_next", scope: !155, file: !155, line: 736, type: !4215, scopeLine: 737, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!4215 = !DISubroutineType(types: !4216)
!4216 = !{null, !4217}
!4217 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2483, size: 64)
!4218 = !DILocalVariable(name: "i", arg: 1, scope: !4214, file: !155, line: 736, type: !4217)
!4219 = !DILocation(line: 736, column: 25, scope: !4214)
!4220 = !DILocation(line: 738, column: 3, scope: !4214)
!4221 = !DILocation(line: 739, column: 3, scope: !4214)
!4222 = !DILocation(line: 739, column: 6, scope: !4214)
!4223 = !DILocation(line: 739, column: 11, scope: !4214)
!4224 = !DILocation(line: 740, column: 1, scope: !4214)
!4225 = distinct !DISubprogram(name: "SET_BIT", scope: !2226, file: !2226, line: 63, type: !4226, scopeLine: 64, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!4226 = !DISubroutineType(types: !4227)
!4227 = !{null, !2225, !7}
!4228 = !DILocalVariable(name: "map", arg: 1, scope: !4225, file: !2226, line: 63, type: !2225)
!4229 = !DILocation(line: 63, column: 18, scope: !4225)
!4230 = !DILocalVariable(name: "bitno", arg: 2, scope: !4225, file: !2226, line: 63, type: !7)
!4231 = !DILocation(line: 63, column: 36, scope: !4225)
!4232 = !DILocation(line: 65, column: 7, scope: !4233)
!4233 = distinct !DILexicalBlock(scope: !4225, file: !2226, line: 65, column: 7)
!4234 = !DILocation(line: 65, column: 12, scope: !4233)
!4235 = !DILocation(line: 65, column: 7, scope: !4225)
!4236 = !DILocalVariable(name: "oldbit", scope: !4237, file: !2226, line: 67, type: !1088)
!4237 = distinct !DILexicalBlock(scope: !4233, file: !2226, line: 66, column: 5)
!4238 = !DILocation(line: 67, column: 12, scope: !4237)
!4239 = !DILocation(line: 68, column: 16, scope: !4237)
!4240 = !DILocation(line: 68, column: 14, scope: !4237)
!4241 = !DILocation(line: 69, column: 12, scope: !4242)
!4242 = distinct !DILexicalBlock(scope: !4237, file: !2226, line: 69, column: 11)
!4243 = !DILocation(line: 69, column: 11, scope: !4237)
!4244 = !DILocation(line: 70, column: 2, scope: !4242)
!4245 = !DILocation(line: 70, column: 7, scope: !4242)
!4246 = !DILocation(line: 70, column: 16, scope: !4242)
!4247 = !DILocation(line: 70, column: 22, scope: !4242)
!4248 = !DILocation(line: 70, column: 41, scope: !4242)
!4249 = !DILocation(line: 71, column: 5, scope: !4237)
!4250 = !DILocation(line: 73, column: 33, scope: !4225)
!4251 = !DILocation(line: 73, column: 40, scope: !4225)
!4252 = !DILocation(line: 73, column: 29, scope: !4225)
!4253 = !DILocation(line: 72, column: 3, scope: !4225)
!4254 = !DILocation(line: 72, column: 8, scope: !4225)
!4255 = !DILocation(line: 72, column: 13, scope: !4225)
!4256 = !DILocation(line: 72, column: 19, scope: !4225)
!4257 = !DILocation(line: 73, column: 5, scope: !4225)
!4258 = !DILocation(line: 74, column: 1, scope: !4225)
!4259 = !DILocalVariable(name: "outf", arg: 1, scope: !794, file: !3, line: 1638, type: !797)
!4260 = !DILocation(line: 1638, column: 26, scope: !794)
!4261 = !DILocalVariable(name: "rtx_first", arg: 2, scope: !794, file: !3, line: 1638, type: !860)
!4262 = !DILocation(line: 1638, column: 42, scope: !794)
!4263 = !DILocalVariable(name: "tmp_rtx", scope: !794, file: !3, line: 1640, type: !860)
!4264 = !DILocation(line: 1640, column: 13, scope: !794)
!4265 = !DILocation(line: 1641, column: 7, scope: !4266)
!4266 = distinct !DILexicalBlock(scope: !794, file: !3, line: 1641, column: 7)
!4267 = !DILocation(line: 1641, column: 17, scope: !4266)
!4268 = !DILocation(line: 1641, column: 7, scope: !794)
!4269 = !DILocation(line: 1642, column: 14, scope: !4266)
!4270 = !DILocation(line: 1642, column: 5, scope: !4266)
!4271 = !DILocalVariable(name: "max_uid", scope: !4272, file: !3, line: 1646, type: !804)
!4272 = distinct !DILexicalBlock(scope: !4266, file: !3, line: 1644, column: 5)
!4273 = !DILocation(line: 1646, column: 11, scope: !4272)
!4274 = !DILocation(line: 1646, column: 21, scope: !4272)
!4275 = !DILocalVariable(name: "start", scope: !4272, file: !3, line: 1647, type: !2135)
!4276 = !DILocation(line: 1647, column: 20, scope: !4272)
!4277 = !DILocation(line: 1647, column: 28, scope: !4272)
!4278 = !DILocalVariable(name: "end", scope: !4272, file: !3, line: 1648, type: !2135)
!4279 = !DILocation(line: 1648, column: 20, scope: !4272)
!4280 = !DILocation(line: 1648, column: 26, scope: !4272)
!4281 = !DILocalVariable(name: "in_bb_p", scope: !4272, file: !3, line: 1649, type: !2136)
!4282 = !DILocation(line: 1649, column: 22, scope: !4272)
!4283 = !DILocation(line: 1649, column: 32, scope: !4272)
!4284 = !DILocalVariable(name: "bb", scope: !4272, file: !3, line: 1651, type: !1392)
!4285 = !DILocation(line: 1651, column: 19, scope: !4272)
!4286 = !DILocation(line: 1653, column: 11, scope: !4287)
!4287 = distinct !DILexicalBlock(scope: !4272, file: !3, line: 1653, column: 11)
!4288 = !DILocation(line: 1653, column: 11, scope: !4272)
!4289 = !DILocation(line: 1654, column: 17, scope: !4287)
!4290 = !DILocation(line: 1654, column: 2, scope: !4287)
!4291 = !DILocation(line: 1656, column: 7, scope: !4292)
!4292 = distinct !DILexicalBlock(scope: !4272, file: !3, line: 1656, column: 7)
!4293 = !DILocation(line: 1656, column: 7, scope: !4294)
!4294 = distinct !DILexicalBlock(scope: !4292, file: !3, line: 1656, column: 7)
!4295 = !DILocalVariable(name: "x", scope: !4296, file: !3, line: 1658, type: !889)
!4296 = distinct !DILexicalBlock(scope: !4294, file: !3, line: 1657, column: 2)
!4297 = !DILocation(line: 1658, column: 8, scope: !4296)
!4298 = !DILocation(line: 1660, column: 37, scope: !4296)
!4299 = !DILocation(line: 1660, column: 4, scope: !4296)
!4300 = !DILocation(line: 1660, column: 10, scope: !4296)
!4301 = !DILocation(line: 1660, column: 35, scope: !4296)
!4302 = !DILocation(line: 1661, column: 34, scope: !4296)
!4303 = !DILocation(line: 1661, column: 4, scope: !4296)
!4304 = !DILocation(line: 1661, column: 8, scope: !4296)
!4305 = !DILocation(line: 1661, column: 32, scope: !4296)
!4306 = !DILocation(line: 1662, column: 13, scope: !4307)
!4307 = distinct !DILexicalBlock(scope: !4296, file: !3, line: 1662, column: 4)
!4308 = !DILocation(line: 1662, column: 11, scope: !4307)
!4309 = !DILocation(line: 1662, column: 9, scope: !4307)
!4310 = !DILocation(line: 1662, column: 27, scope: !4311)
!4311 = distinct !DILexicalBlock(scope: !4307, file: !3, line: 1662, column: 4)
!4312 = !DILocation(line: 1662, column: 29, scope: !4311)
!4313 = !DILocation(line: 1662, column: 4, scope: !4307)
!4314 = !DILocalVariable(name: "state", scope: !4315, file: !3, line: 1664, type: !793)
!4315 = distinct !DILexicalBlock(scope: !4311, file: !3, line: 1663, column: 6)
!4316 = !DILocation(line: 1664, column: 22, scope: !4315)
!4317 = !DILocation(line: 1666, column: 12, scope: !4318)
!4318 = distinct !DILexicalBlock(scope: !4315, file: !3, line: 1666, column: 12)
!4319 = !DILocation(line: 1666, column: 20, scope: !4318)
!4320 = !DILocation(line: 1666, column: 34, scope: !4318)
!4321 = !DILocation(line: 1666, column: 12, scope: !4315)
!4322 = !DILocation(line: 1667, column: 9, scope: !4318)
!4323 = !DILocation(line: 1667, column: 3, scope: !4318)
!4324 = !DILocation(line: 1668, column: 32, scope: !4315)
!4325 = !DILocation(line: 1668, column: 8, scope: !4315)
!4326 = !DILocation(line: 1668, column: 16, scope: !4315)
!4327 = !DILocation(line: 1668, column: 30, scope: !4315)
!4328 = !DILocation(line: 1670, column: 12, scope: !4329)
!4329 = distinct !DILexicalBlock(scope: !4315, file: !3, line: 1670, column: 12)
!4330 = !DILocation(line: 1670, column: 17, scope: !4329)
!4331 = !DILocation(line: 1670, column: 14, scope: !4329)
!4332 = !DILocation(line: 1670, column: 12, scope: !4315)
!4333 = !DILocation(line: 1671, column: 3, scope: !4329)
!4334 = !DILocation(line: 1672, column: 6, scope: !4315)
!4335 = !DILocation(line: 1662, column: 46, scope: !4311)
!4336 = !DILocation(line: 1662, column: 44, scope: !4311)
!4337 = !DILocation(line: 1662, column: 4, scope: !4311)
!4338 = distinct !{!4338, !4313, !4339}
!4339 = !DILocation(line: 1672, column: 6, scope: !4307)
!4340 = !DILocation(line: 1673, column: 2, scope: !4296)
!4341 = distinct !{!4341, !4291, !4342}
!4342 = !DILocation(line: 1673, column: 2, scope: !4292)
!4343 = !DILocation(line: 1675, column: 22, scope: !4344)
!4344 = distinct !DILexicalBlock(scope: !4272, file: !3, line: 1675, column: 7)
!4345 = !DILocation(line: 1675, column: 20, scope: !4344)
!4346 = !DILocation(line: 1675, column: 12, scope: !4344)
!4347 = !DILocation(line: 1675, column: 41, scope: !4348)
!4348 = distinct !DILexicalBlock(scope: !4344, file: !3, line: 1675, column: 7)
!4349 = !DILocation(line: 1675, column: 38, scope: !4348)
!4350 = !DILocation(line: 1675, column: 7, scope: !4344)
!4351 = !DILocalVariable(name: "did_output", scope: !4352, file: !3, line: 1677, type: !804)
!4352 = distinct !DILexicalBlock(scope: !4348, file: !3, line: 1676, column: 2)
!4353 = !DILocation(line: 1677, column: 8, scope: !4352)
!4354 = !DILocation(line: 1678, column: 14, scope: !4355)
!4355 = distinct !DILexicalBlock(scope: !4352, file: !3, line: 1678, column: 8)
!4356 = !DILocation(line: 1678, column: 20, scope: !4355)
!4357 = !DILocation(line: 1678, column: 12, scope: !4355)
!4358 = !DILocation(line: 1678, column: 41, scope: !4355)
!4359 = !DILocation(line: 1678, column: 8, scope: !4352)
!4360 = !DILocalVariable(name: "e", scope: !4361, file: !3, line: 1680, type: !1409)
!4361 = distinct !DILexicalBlock(scope: !4355, file: !3, line: 1679, column: 6)
!4362 = !DILocation(line: 1680, column: 13, scope: !4361)
!4363 = !DILocalVariable(name: "ei", scope: !4361, file: !3, line: 1681, type: !2483)
!4364 = !DILocation(line: 1681, column: 22, scope: !4361)
!4365 = !DILocation(line: 1683, column: 17, scope: !4361)
!4366 = !DILocation(line: 1683, column: 8, scope: !4361)
!4367 = !DILocation(line: 1684, column: 8, scope: !4368)
!4368 = distinct !DILexicalBlock(scope: !4361, file: !3, line: 1684, column: 8)
!4369 = !DILocation(line: 1684, column: 8, scope: !4370)
!4370 = distinct !DILexicalBlock(scope: !4368, file: !3, line: 1684, column: 8)
!4371 = !DILocation(line: 1685, column: 12, scope: !4370)
!4372 = !DILocation(line: 1685, column: 25, scope: !4370)
!4373 = !DILocation(line: 1685, column: 28, scope: !4370)
!4374 = !DILocation(line: 1685, column: 33, scope: !4370)
!4375 = !DILocation(line: 1685, column: 3, scope: !4370)
!4376 = distinct !{!4376, !4367, !4377}
!4377 = !DILocation(line: 1685, column: 38, scope: !4368)
!4378 = !DILocation(line: 1686, column: 17, scope: !4361)
!4379 = !DILocation(line: 1686, column: 36, scope: !4361)
!4380 = !DILocation(line: 1686, column: 40, scope: !4361)
!4381 = !DILocation(line: 1686, column: 8, scope: !4361)
!4382 = !DILocation(line: 1688, column: 12, scope: !4383)
!4383 = distinct !DILexicalBlock(scope: !4361, file: !3, line: 1688, column: 12)
!4384 = !DILocation(line: 1688, column: 12, scope: !4361)
!4385 = !DILocation(line: 1690, column: 18, scope: !4386)
!4386 = distinct !DILexicalBlock(scope: !4383, file: !3, line: 1689, column: 3)
!4387 = !DILocation(line: 1690, column: 22, scope: !4386)
!4388 = !DILocation(line: 1690, column: 5, scope: !4386)
!4389 = !DILocation(line: 1691, column: 17, scope: !4386)
!4390 = !DILocation(line: 1691, column: 5, scope: !4386)
!4391 = !DILocation(line: 1692, column: 3, scope: !4386)
!4392 = !DILocation(line: 1693, column: 8, scope: !4393)
!4393 = distinct !DILexicalBlock(scope: !4361, file: !3, line: 1693, column: 8)
!4394 = !DILocation(line: 1693, column: 8, scope: !4395)
!4395 = distinct !DILexicalBlock(scope: !4393, file: !3, line: 1693, column: 8)
!4396 = !DILocation(line: 1695, column: 29, scope: !4397)
!4397 = distinct !DILexicalBlock(scope: !4395, file: !3, line: 1694, column: 3)
!4398 = !DILocation(line: 1695, column: 5, scope: !4397)
!4399 = !DILocation(line: 1696, column: 21, scope: !4397)
!4400 = !DILocation(line: 1696, column: 27, scope: !4397)
!4401 = !DILocation(line: 1696, column: 5, scope: !4397)
!4402 = !DILocation(line: 1697, column: 18, scope: !4397)
!4403 = !DILocation(line: 1697, column: 5, scope: !4397)
!4404 = !DILocation(line: 1698, column: 3, scope: !4397)
!4405 = distinct !{!4405, !4392, !4406}
!4406 = !DILocation(line: 1698, column: 3, scope: !4393)
!4407 = !DILocation(line: 1699, column: 6, scope: !4361)
!4408 = !DILocation(line: 1701, column: 8, scope: !4409)
!4409 = distinct !DILexicalBlock(scope: !4352, file: !3, line: 1701, column: 8)
!4410 = !DILocation(line: 1701, column: 16, scope: !4409)
!4411 = !DILocation(line: 1701, column: 36, scope: !4409)
!4412 = !DILocation(line: 1702, column: 8, scope: !4409)
!4413 = !DILocation(line: 1702, column: 12, scope: !4409)
!4414 = !DILocation(line: 1703, column: 8, scope: !4409)
!4415 = !DILocation(line: 1703, column: 12, scope: !4409)
!4416 = !DILocation(line: 1701, column: 8, scope: !4352)
!4417 = !DILocation(line: 1704, column: 15, scope: !4409)
!4418 = !DILocation(line: 1704, column: 6, scope: !4409)
!4419 = !DILocation(line: 1705, column: 13, scope: !4420)
!4420 = distinct !DILexicalBlock(scope: !4409, file: !3, line: 1705, column: 13)
!4421 = !DILocation(line: 1705, column: 21, scope: !4420)
!4422 = !DILocation(line: 1705, column: 41, scope: !4420)
!4423 = !DILocation(line: 1705, column: 13, scope: !4409)
!4424 = !DILocation(line: 1706, column: 15, scope: !4420)
!4425 = !DILocation(line: 1706, column: 6, scope: !4420)
!4426 = !DILocation(line: 1708, column: 35, scope: !4352)
!4427 = !DILocation(line: 1708, column: 41, scope: !4352)
!4428 = !DILocation(line: 1708, column: 17, scope: !4352)
!4429 = !DILocation(line: 1708, column: 15, scope: !4352)
!4430 = !DILocation(line: 1710, column: 14, scope: !4431)
!4431 = distinct !DILexicalBlock(scope: !4352, file: !3, line: 1710, column: 8)
!4432 = !DILocation(line: 1710, column: 18, scope: !4431)
!4433 = !DILocation(line: 1710, column: 12, scope: !4431)
!4434 = !DILocation(line: 1710, column: 39, scope: !4431)
!4435 = !DILocation(line: 1710, column: 8, scope: !4352)
!4436 = !DILocalVariable(name: "e", scope: !4437, file: !3, line: 1712, type: !1409)
!4437 = distinct !DILexicalBlock(scope: !4431, file: !3, line: 1711, column: 6)
!4438 = !DILocation(line: 1712, column: 13, scope: !4437)
!4439 = !DILocalVariable(name: "ei", scope: !4437, file: !3, line: 1713, type: !2483)
!4440 = !DILocation(line: 1713, column: 22, scope: !4437)
!4441 = !DILocation(line: 1715, column: 17, scope: !4437)
!4442 = !DILocation(line: 1715, column: 56, scope: !4437)
!4443 = !DILocation(line: 1715, column: 60, scope: !4437)
!4444 = !DILocation(line: 1715, column: 8, scope: !4437)
!4445 = !DILocation(line: 1716, column: 8, scope: !4446)
!4446 = distinct !DILexicalBlock(scope: !4437, file: !3, line: 1716, column: 8)
!4447 = !DILocation(line: 1716, column: 8, scope: !4448)
!4448 = distinct !DILexicalBlock(scope: !4446, file: !3, line: 1716, column: 8)
!4449 = !DILocation(line: 1717, column: 12, scope: !4448)
!4450 = !DILocation(line: 1717, column: 25, scope: !4448)
!4451 = !DILocation(line: 1717, column: 28, scope: !4448)
!4452 = !DILocation(line: 1717, column: 34, scope: !4448)
!4453 = !DILocation(line: 1717, column: 3, scope: !4448)
!4454 = distinct !{!4454, !4445, !4455}
!4455 = !DILocation(line: 1717, column: 39, scope: !4446)
!4456 = !DILocation(line: 1718, column: 17, scope: !4437)
!4457 = !DILocation(line: 1718, column: 8, scope: !4437)
!4458 = !DILocation(line: 1720, column: 12, scope: !4459)
!4459 = distinct !DILexicalBlock(scope: !4437, file: !3, line: 1720, column: 12)
!4460 = !DILocation(line: 1720, column: 12, scope: !4437)
!4461 = !DILocation(line: 1722, column: 21, scope: !4462)
!4462 = distinct !DILexicalBlock(scope: !4459, file: !3, line: 1721, column: 3)
!4463 = !DILocation(line: 1722, column: 25, scope: !4462)
!4464 = !DILocation(line: 1722, column: 5, scope: !4462)
!4465 = !DILocation(line: 1723, column: 17, scope: !4462)
!4466 = !DILocation(line: 1723, column: 5, scope: !4462)
!4467 = !DILocation(line: 1724, column: 3, scope: !4462)
!4468 = !DILocation(line: 1725, column: 20, scope: !4437)
!4469 = !DILocation(line: 1725, column: 8, scope: !4437)
!4470 = !DILocation(line: 1726, column: 8, scope: !4471)
!4471 = distinct !DILexicalBlock(scope: !4437, file: !3, line: 1726, column: 8)
!4472 = !DILocation(line: 1726, column: 8, scope: !4473)
!4473 = distinct !DILexicalBlock(scope: !4471, file: !3, line: 1726, column: 8)
!4474 = !DILocation(line: 1728, column: 29, scope: !4475)
!4475 = distinct !DILexicalBlock(scope: !4473, file: !3, line: 1727, column: 3)
!4476 = !DILocation(line: 1728, column: 5, scope: !4475)
!4477 = !DILocation(line: 1729, column: 21, scope: !4475)
!4478 = !DILocation(line: 1729, column: 27, scope: !4475)
!4479 = !DILocation(line: 1729, column: 5, scope: !4475)
!4480 = !DILocation(line: 1730, column: 18, scope: !4475)
!4481 = !DILocation(line: 1730, column: 5, scope: !4475)
!4482 = !DILocation(line: 1731, column: 3, scope: !4475)
!4483 = distinct !{!4483, !4470, !4484}
!4484 = !DILocation(line: 1731, column: 3, scope: !4471)
!4485 = !DILocation(line: 1732, column: 6, scope: !4437)
!4486 = !DILocation(line: 1733, column: 8, scope: !4487)
!4487 = distinct !DILexicalBlock(scope: !4352, file: !3, line: 1733, column: 8)
!4488 = !DILocation(line: 1733, column: 8, scope: !4352)
!4489 = !DILocation(line: 1734, column: 18, scope: !4487)
!4490 = !DILocation(line: 1734, column: 6, scope: !4487)
!4491 = !DILocation(line: 1735, column: 2, scope: !4352)
!4492 = !DILocation(line: 1675, column: 60, scope: !4348)
!4493 = !DILocation(line: 1675, column: 58, scope: !4348)
!4494 = !DILocation(line: 1675, column: 7, scope: !4348)
!4495 = distinct !{!4495, !4350, !4496}
!4496 = !DILocation(line: 1735, column: 2, scope: !4344)
!4497 = !DILocation(line: 1737, column: 13, scope: !4272)
!4498 = !DILocation(line: 1737, column: 7, scope: !4272)
!4499 = !DILocation(line: 1738, column: 13, scope: !4272)
!4500 = !DILocation(line: 1738, column: 7, scope: !4272)
!4501 = !DILocation(line: 1739, column: 13, scope: !4272)
!4502 = !DILocation(line: 1739, column: 7, scope: !4272)
!4503 = !DILocation(line: 1742, column: 13, scope: !4504)
!4504 = distinct !DILexicalBlock(scope: !794, file: !3, line: 1742, column: 7)
!4505 = !DILocation(line: 1742, column: 33, scope: !4504)
!4506 = !DILocation(line: 1742, column: 7, scope: !794)
!4507 = !DILocation(line: 1744, column: 16, scope: !4508)
!4508 = distinct !DILexicalBlock(scope: !4504, file: !3, line: 1743, column: 5)
!4509 = !DILocation(line: 1744, column: 7, scope: !4508)
!4510 = !DILocation(line: 1745, column: 28, scope: !4511)
!4511 = distinct !DILexicalBlock(scope: !4508, file: !3, line: 1745, column: 7)
!4512 = !DILocation(line: 1745, column: 20, scope: !4511)
!4513 = !DILocation(line: 1745, column: 12, scope: !4511)
!4514 = !DILocation(line: 1745, column: 49, scope: !4515)
!4515 = distinct !DILexicalBlock(scope: !4511, file: !3, line: 1745, column: 7)
!4516 = !DILocation(line: 1745, column: 57, scope: !4515)
!4517 = !DILocation(line: 1745, column: 7, scope: !4511)
!4518 = !DILocation(line: 1747, column: 20, scope: !4515)
!4519 = !DILocation(line: 1747, column: 26, scope: !4515)
!4520 = !DILocation(line: 1747, column: 2, scope: !4515)
!4521 = !DILocation(line: 1746, column: 15, scope: !4515)
!4522 = !DILocation(line: 1746, column: 13, scope: !4515)
!4523 = !DILocation(line: 1745, column: 7, scope: !4515)
!4524 = distinct !{!4524, !4517, !4525}
!4525 = !DILocation(line: 1747, column: 43, scope: !4511)
!4526 = !DILocation(line: 1748, column: 5, scope: !4508)
!4527 = !DILocation(line: 1749, column: 1, scope: !794)
!4528 = distinct !DISubprogram(name: "update_br_prob_note", scope: !3, file: !3, line: 1752, type: !2173, scopeLine: 1753, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!4529 = !DILocalVariable(name: "bb", arg: 1, scope: !4528, file: !3, line: 1752, type: !1392)
!4530 = !DILocation(line: 1752, column: 34, scope: !4528)
!4531 = !DILocalVariable(name: "note", scope: !4528, file: !3, line: 1754, type: !889)
!4532 = !DILocation(line: 1754, column: 7, scope: !4528)
!4533 = !DILocation(line: 1755, column: 8, scope: !4534)
!4534 = distinct !DILexicalBlock(scope: !4528, file: !3, line: 1755, column: 7)
!4535 = !DILocation(line: 1755, column: 7, scope: !4528)
!4536 = !DILocation(line: 1756, column: 5, scope: !4534)
!4537 = !DILocation(line: 1757, column: 25, scope: !4528)
!4538 = !DILocation(line: 1757, column: 10, scope: !4528)
!4539 = !DILocation(line: 1757, column: 8, scope: !4528)
!4540 = !DILocation(line: 1758, column: 8, scope: !4541)
!4541 = distinct !DILexicalBlock(scope: !4528, file: !3, line: 1758, column: 7)
!4542 = !DILocation(line: 1758, column: 13, scope: !4541)
!4543 = !DILocation(line: 1758, column: 16, scope: !4541)
!4544 = !DILocation(line: 1758, column: 43, scope: !4541)
!4545 = !DILocation(line: 1758, column: 61, scope: !4541)
!4546 = !DILocation(line: 1758, column: 40, scope: !4541)
!4547 = !DILocation(line: 1758, column: 7, scope: !4528)
!4548 = !DILocation(line: 1759, column: 5, scope: !4541)
!4549 = !DILocation(line: 1760, column: 20, scope: !4528)
!4550 = !DILocation(line: 1760, column: 3, scope: !4528)
!4551 = !DILocation(line: 1760, column: 18, scope: !4528)
!4552 = !DILocation(line: 1761, column: 1, scope: !4528)
!4553 = distinct !DISubprogram(name: "get_last_bb_insn", scope: !3, file: !3, line: 1766, type: !3333, scopeLine: 1767, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!4554 = !DILocalVariable(name: "bb", arg: 1, scope: !4553, file: !3, line: 1766, type: !1392)
!4555 = !DILocation(line: 1766, column: 31, scope: !4553)
!4556 = !DILocalVariable(name: "tmp", scope: !4553, file: !3, line: 1768, type: !889)
!4557 = !DILocation(line: 1768, column: 7, scope: !4553)
!4558 = !DILocalVariable(name: "end", scope: !4553, file: !3, line: 1769, type: !889)
!4559 = !DILocation(line: 1769, column: 7, scope: !4553)
!4560 = !DILocation(line: 1769, column: 13, scope: !4553)
!4561 = !DILocation(line: 1772, column: 20, scope: !4562)
!4562 = distinct !DILexicalBlock(scope: !4553, file: !3, line: 1772, column: 7)
!4563 = !DILocation(line: 1772, column: 7, scope: !4562)
!4564 = !DILocation(line: 1772, column: 7, scope: !4553)
!4565 = !DILocation(line: 1773, column: 11, scope: !4562)
!4566 = !DILocation(line: 1773, column: 9, scope: !4562)
!4567 = !DILocation(line: 1773, column: 5, scope: !4562)
!4568 = !DILocation(line: 1776, column: 31, scope: !4553)
!4569 = !DILocation(line: 1776, column: 9, scope: !4553)
!4570 = !DILocation(line: 1776, column: 7, scope: !4553)
!4571 = !DILocation(line: 1777, column: 3, scope: !4553)
!4572 = !DILocation(line: 1777, column: 10, scope: !4553)
!4573 = !DILocation(line: 1777, column: 14, scope: !4553)
!4574 = !DILocation(line: 1777, column: 17, scope: !4553)
!4575 = !DILocation(line: 0, scope: !4553)
!4576 = !DILocation(line: 1779, column: 13, scope: !4577)
!4577 = distinct !DILexicalBlock(scope: !4553, file: !3, line: 1778, column: 5)
!4578 = !DILocation(line: 1779, column: 11, scope: !4577)
!4579 = !DILocation(line: 1780, column: 35, scope: !4577)
!4580 = !DILocation(line: 1780, column: 13, scope: !4577)
!4581 = !DILocation(line: 1780, column: 11, scope: !4577)
!4582 = distinct !{!4582, !4571, !4583}
!4583 = !DILocation(line: 1781, column: 5, scope: !4553)
!4584 = !DILocation(line: 1783, column: 10, scope: !4553)
!4585 = !DILocation(line: 1783, column: 3, scope: !4553)
!4586 = distinct !DISubprogram(name: "purge_all_dead_edges", scope: !3, file: !3, line: 2439, type: !2273, scopeLine: 2440, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!4587 = !DILocalVariable(name: "purged", scope: !4586, file: !3, line: 2441, type: !804)
!4588 = !DILocation(line: 2441, column: 7, scope: !4586)
!4589 = !DILocalVariable(name: "bb", scope: !4586, file: !3, line: 2442, type: !1392)
!4590 = !DILocation(line: 2442, column: 15, scope: !4586)
!4591 = !DILocation(line: 2444, column: 3, scope: !4592)
!4592 = distinct !DILexicalBlock(scope: !4586, file: !3, line: 2444, column: 3)
!4593 = !DILocation(line: 2444, column: 3, scope: !4594)
!4594 = distinct !DILexicalBlock(scope: !4592, file: !3, line: 2444, column: 3)
!4595 = !DILocalVariable(name: "purged_here", scope: !4596, file: !3, line: 2446, type: !1088)
!4596 = distinct !DILexicalBlock(scope: !4594, file: !3, line: 2445, column: 5)
!4597 = !DILocation(line: 2446, column: 12, scope: !4596)
!4598 = !DILocation(line: 2446, column: 44, scope: !4596)
!4599 = !DILocation(line: 2446, column: 26, scope: !4596)
!4600 = !DILocation(line: 2448, column: 17, scope: !4596)
!4601 = !DILocation(line: 2448, column: 14, scope: !4596)
!4602 = !DILocation(line: 2449, column: 5, scope: !4596)
!4603 = distinct !{!4603, !4591, !4604}
!4604 = !DILocation(line: 2449, column: 5, scope: !4592)
!4605 = !DILocation(line: 2451, column: 10, scope: !4586)
!4606 = !DILocation(line: 2451, column: 3, scope: !4586)
!4607 = distinct !DISubprogram(name: "insert_insn_end_bb_new", scope: !3, file: !3, line: 3072, type: !4608, scopeLine: 3073, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!4608 = !DISubroutineType(types: !4609)
!4609 = !{!889, !889, !1392}
!4610 = !DILocalVariable(name: "pat", arg: 1, scope: !4607, file: !3, line: 3072, type: !889)
!4611 = !DILocation(line: 3072, column: 29, scope: !4607)
!4612 = !DILocalVariable(name: "bb", arg: 2, scope: !4607, file: !3, line: 3072, type: !1392)
!4613 = !DILocation(line: 3072, column: 46, scope: !4607)
!4614 = !DILocalVariable(name: "insn", scope: !4607, file: !3, line: 3074, type: !889)
!4615 = !DILocation(line: 3074, column: 7, scope: !4607)
!4616 = !DILocation(line: 3074, column: 14, scope: !4607)
!4617 = !DILocalVariable(name: "new_insn", scope: !4607, file: !3, line: 3075, type: !889)
!4618 = !DILocation(line: 3075, column: 7, scope: !4607)
!4619 = !DILocalVariable(name: "pat_end", scope: !4607, file: !3, line: 3076, type: !889)
!4620 = !DILocation(line: 3076, column: 7, scope: !4607)
!4621 = !DILocation(line: 3076, column: 17, scope: !4607)
!4622 = !DILocation(line: 3078, column: 3, scope: !4607)
!4623 = !DILocation(line: 3078, column: 10, scope: !4607)
!4624 = !DILocation(line: 3078, column: 30, scope: !4607)
!4625 = !DILocation(line: 3079, column: 15, scope: !4607)
!4626 = !DILocation(line: 3079, column: 13, scope: !4607)
!4627 = distinct !{!4627, !4622, !4625}
!4628 = !DILocation(line: 3085, column: 7, scope: !4629)
!4629 = distinct !DILexicalBlock(scope: !4607, file: !3, line: 3085, column: 7)
!4630 = !DILocation(line: 3086, column: 7, scope: !4629)
!4631 = !DILocation(line: 3086, column: 11, scope: !4629)
!4632 = !DILocation(line: 3087, column: 11, scope: !4629)
!4633 = !DILocation(line: 3087, column: 31, scope: !4629)
!4634 = !DILocation(line: 3087, column: 16, scope: !4629)
!4635 = !DILocation(line: 3088, column: 15, scope: !4629)
!4636 = !DILocation(line: 3088, column: 36, scope: !4629)
!4637 = !DILocation(line: 3088, column: 18, scope: !4629)
!4638 = !DILocation(line: 3088, column: 41, scope: !4629)
!4639 = !DILocation(line: 3088, column: 47, scope: !4629)
!4640 = !DILocation(line: 3085, column: 7, scope: !4607)
!4641 = !DILocation(line: 3096, column: 11, scope: !4642)
!4642 = distinct !DILexicalBlock(scope: !4643, file: !3, line: 3096, column: 11)
!4643 = distinct !DILexicalBlock(scope: !4629, file: !3, line: 3089, column: 5)
!4644 = !DILocation(line: 3096, column: 37, scope: !4642)
!4645 = !DILocation(line: 3097, column: 11, scope: !4642)
!4646 = !DILocation(line: 3097, column: 14, scope: !4642)
!4647 = !DILocation(line: 3097, column: 40, scope: !4642)
!4648 = !DILocation(line: 3096, column: 11, scope: !4643)
!4649 = !DILocation(line: 3098, column: 32, scope: !4642)
!4650 = !DILocation(line: 3098, column: 16, scope: !4642)
!4651 = !DILocation(line: 3098, column: 14, scope: !4642)
!4652 = !DILocation(line: 3098, column: 9, scope: !4642)
!4653 = !DILocation(line: 3117, column: 42, scope: !4643)
!4654 = !DILocation(line: 3117, column: 47, scope: !4643)
!4655 = !DILocation(line: 3117, column: 53, scope: !4643)
!4656 = !DILocation(line: 3117, column: 18, scope: !4643)
!4657 = !DILocation(line: 3117, column: 16, scope: !4643)
!4658 = !DILocation(line: 3118, column: 5, scope: !4643)
!4659 = !DILocation(line: 3122, column: 12, scope: !4660)
!4660 = distinct !DILexicalBlock(scope: !4629, file: !3, line: 3122, column: 12)
!4661 = !DILocation(line: 3123, column: 12, scope: !4660)
!4662 = !DILocation(line: 3123, column: 32, scope: !4660)
!4663 = !DILocation(line: 3123, column: 17, scope: !4660)
!4664 = !DILocation(line: 3124, column: 16, scope: !4660)
!4665 = !DILocation(line: 3124, column: 37, scope: !4660)
!4666 = !DILocation(line: 3124, column: 19, scope: !4660)
!4667 = !DILocation(line: 3124, column: 42, scope: !4660)
!4668 = !DILocation(line: 3124, column: 48, scope: !4660)
!4669 = !DILocation(line: 3122, column: 12, scope: !4629)
!4670 = !DILocation(line: 3134, column: 41, scope: !4671)
!4671 = distinct !DILexicalBlock(scope: !4660, file: !3, line: 3125, column: 5)
!4672 = !DILocation(line: 3134, column: 47, scope: !4671)
!4673 = !DILocation(line: 3134, column: 14, scope: !4671)
!4674 = !DILocation(line: 3134, column: 12, scope: !4671)
!4675 = !DILocation(line: 3144, column: 7, scope: !4671)
!4676 = !DILocation(line: 3144, column: 14, scope: !4671)
!4677 = !DILocation(line: 3145, column: 14, scope: !4671)
!4678 = !DILocation(line: 3145, column: 17, scope: !4671)
!4679 = !DILocation(line: 0, scope: !4671)
!4680 = !DILocation(line: 3146, column: 16, scope: !4671)
!4681 = !DILocation(line: 3146, column: 14, scope: !4671)
!4682 = distinct !{!4682, !4675, !4680}
!4683 = !DILocation(line: 3148, column: 42, scope: !4671)
!4684 = !DILocation(line: 3148, column: 47, scope: !4671)
!4685 = !DILocation(line: 3148, column: 53, scope: !4671)
!4686 = !DILocation(line: 3148, column: 18, scope: !4671)
!4687 = !DILocation(line: 3148, column: 16, scope: !4671)
!4688 = !DILocation(line: 3149, column: 5, scope: !4671)
!4689 = !DILocation(line: 3151, column: 39, scope: !4660)
!4690 = !DILocation(line: 3151, column: 44, scope: !4660)
!4691 = !DILocation(line: 3151, column: 50, scope: !4660)
!4692 = !DILocation(line: 3151, column: 16, scope: !4660)
!4693 = !DILocation(line: 3151, column: 14, scope: !4660)
!4694 = !DILocation(line: 3153, column: 10, scope: !4607)
!4695 = !DILocation(line: 3153, column: 3, scope: !4607)
!4696 = distinct !DISubprogram(name: "rtl_verify_flow_info", scope: !3, file: !3, line: 2034, type: !2146, scopeLine: 2035, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!4697 = !DILocalVariable(name: "bb", scope: !4696, file: !3, line: 2036, type: !1392)
!4698 = !DILocation(line: 2036, column: 15, scope: !4696)
!4699 = !DILocalVariable(name: "err", scope: !4696, file: !3, line: 2037, type: !804)
!4700 = !DILocation(line: 2037, column: 7, scope: !4696)
!4701 = !DILocation(line: 2037, column: 13, scope: !4696)
!4702 = !DILocalVariable(name: "x", scope: !4696, file: !3, line: 2038, type: !889)
!4703 = !DILocation(line: 2038, column: 7, scope: !4696)
!4704 = !DILocalVariable(name: "last_head", scope: !4696, file: !3, line: 2039, type: !889)
!4705 = !DILocation(line: 2039, column: 7, scope: !4696)
!4706 = !DILocation(line: 2039, column: 19, scope: !4696)
!4707 = !DILocalVariable(name: "bb_info", scope: !4696, file: !3, line: 2040, type: !2135)
!4708 = !DILocation(line: 2040, column: 16, scope: !4696)
!4709 = !DILocalVariable(name: "num_bb_notes", scope: !4696, file: !3, line: 2041, type: !804)
!4710 = !DILocation(line: 2041, column: 7, scope: !4696)
!4711 = !DILocalVariable(name: "rtx_first", scope: !4696, file: !3, line: 2042, type: !4712)
!4712 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !889)
!4713 = !DILocation(line: 2042, column: 13, scope: !4696)
!4714 = !DILocation(line: 2042, column: 25, scope: !4696)
!4715 = !DILocalVariable(name: "last_bb_seen", scope: !4696, file: !3, line: 2043, type: !1392)
!4716 = !DILocation(line: 2043, column: 15, scope: !4696)
!4717 = !DILocation(line: 2043, column: 30, scope: !4696)
!4718 = !DILocalVariable(name: "curr_bb", scope: !4696, file: !3, line: 2043, type: !1392)
!4719 = !DILocation(line: 2043, column: 47, scope: !4696)
!4720 = !DILocalVariable(name: "max_uid", scope: !4696, file: !3, line: 2044, type: !4721)
!4721 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !804)
!4722 = !DILocation(line: 2044, column: 13, scope: !4696)
!4723 = !DILocation(line: 2044, column: 23, scope: !4696)
!4724 = !DILocation(line: 2046, column: 13, scope: !4696)
!4725 = !DILocation(line: 2046, column: 11, scope: !4696)
!4726 = !DILocation(line: 2048, column: 3, scope: !4727)
!4727 = distinct !DILexicalBlock(scope: !4696, file: !3, line: 2048, column: 3)
!4728 = !DILocation(line: 2048, column: 3, scope: !4729)
!4729 = distinct !DILexicalBlock(scope: !4727, file: !3, line: 2048, column: 3)
!4730 = !DILocalVariable(name: "e", scope: !4731, file: !3, line: 2050, type: !1409)
!4731 = distinct !DILexicalBlock(scope: !4729, file: !3, line: 2049, column: 5)
!4732 = !DILocation(line: 2050, column: 12, scope: !4731)
!4733 = !DILocalVariable(name: "ei", scope: !4731, file: !3, line: 2051, type: !2483)
!4734 = !DILocation(line: 2051, column: 21, scope: !4731)
!4735 = !DILocalVariable(name: "head", scope: !4731, file: !3, line: 2052, type: !889)
!4736 = !DILocation(line: 2052, column: 11, scope: !4731)
!4737 = !DILocation(line: 2052, column: 18, scope: !4731)
!4738 = !DILocalVariable(name: "end", scope: !4731, file: !3, line: 2053, type: !889)
!4739 = !DILocation(line: 2053, column: 11, scope: !4731)
!4740 = !DILocation(line: 2053, column: 17, scope: !4731)
!4741 = !DILocation(line: 2055, column: 16, scope: !4742)
!4742 = distinct !DILexicalBlock(scope: !4731, file: !3, line: 2055, column: 7)
!4743 = !DILocation(line: 2055, column: 14, scope: !4742)
!4744 = !DILocation(line: 2055, column: 12, scope: !4742)
!4745 = !DILocation(line: 2055, column: 27, scope: !4746)
!4746 = distinct !DILexicalBlock(scope: !4742, file: !3, line: 2055, column: 7)
!4747 = !DILocation(line: 2055, column: 29, scope: !4746)
!4748 = !DILocation(line: 2055, column: 7, scope: !4742)
!4749 = !DILocation(line: 2058, column: 8, scope: !4750)
!4750 = distinct !DILexicalBlock(scope: !4751, file: !3, line: 2058, column: 8)
!4751 = distinct !DILexicalBlock(scope: !4746, file: !3, line: 2056, column: 2)
!4752 = !DILocation(line: 2058, column: 13, scope: !4750)
!4753 = !DILocation(line: 2058, column: 10, scope: !4750)
!4754 = !DILocation(line: 2058, column: 8, scope: !4751)
!4755 = !DILocation(line: 2059, column: 6, scope: !4750)
!4756 = !DILocation(line: 2062, column: 7, scope: !4757)
!4757 = distinct !DILexicalBlock(scope: !4751, file: !3, line: 2062, column: 6)
!4758 = !DILocation(line: 2063, column: 6, scope: !4757)
!4759 = !DILocation(line: 2063, column: 9, scope: !4757)
!4760 = !DILocation(line: 2063, column: 28, scope: !4757)
!4761 = !DILocation(line: 2062, column: 6, scope: !4751)
!4762 = !DILocation(line: 2066, column: 6, scope: !4763)
!4763 = distinct !DILexicalBlock(scope: !4757, file: !3, line: 2064, column: 4)
!4764 = !DILocation(line: 2065, column: 6, scope: !4763)
!4765 = !DILocation(line: 2067, column: 10, scope: !4763)
!4766 = !DILocation(line: 2068, column: 4, scope: !4763)
!4767 = !DILocation(line: 2069, column: 2, scope: !4751)
!4768 = !DILocation(line: 2055, column: 46, scope: !4746)
!4769 = !DILocation(line: 2055, column: 44, scope: !4746)
!4770 = !DILocation(line: 2055, column: 7, scope: !4746)
!4771 = distinct !{!4771, !4748, !4772}
!4772 = !DILocation(line: 2069, column: 2, scope: !4742)
!4773 = !DILocation(line: 2071, column: 12, scope: !4774)
!4774 = distinct !DILexicalBlock(scope: !4731, file: !3, line: 2071, column: 11)
!4775 = !DILocation(line: 2071, column: 11, scope: !4731)
!4776 = !DILocation(line: 2074, column: 4, scope: !4777)
!4777 = distinct !DILexicalBlock(scope: !4774, file: !3, line: 2072, column: 2)
!4778 = !DILocation(line: 2074, column: 20, scope: !4777)
!4779 = !DILocation(line: 2074, column: 24, scope: !4777)
!4780 = !DILocation(line: 2073, column: 4, scope: !4777)
!4781 = !DILocation(line: 2075, column: 8, scope: !4777)
!4782 = !DILocation(line: 2076, column: 2, scope: !4777)
!4783 = !DILocation(line: 2080, column: 7, scope: !4731)
!4784 = !DILocation(line: 2080, column: 14, scope: !4785)
!4785 = distinct !DILexicalBlock(scope: !4786, file: !3, line: 2080, column: 7)
!4786 = distinct !DILexicalBlock(scope: !4731, file: !3, line: 2080, column: 7)
!4787 = !DILocation(line: 2080, column: 16, scope: !4785)
!4788 = !DILocation(line: 2080, column: 7, scope: !4786)
!4789 = !DILocation(line: 2084, column: 8, scope: !4790)
!4790 = distinct !DILexicalBlock(scope: !4791, file: !3, line: 2084, column: 8)
!4791 = distinct !DILexicalBlock(scope: !4785, file: !3, line: 2081, column: 2)
!4792 = !DILocation(line: 2084, column: 16, scope: !4790)
!4793 = !DILocation(line: 2084, column: 30, scope: !4790)
!4794 = !DILocation(line: 2084, column: 8, scope: !4791)
!4795 = !DILocation(line: 2087, column: 8, scope: !4796)
!4796 = distinct !DILexicalBlock(scope: !4790, file: !3, line: 2085, column: 6)
!4797 = !DILocation(line: 2087, column: 22, scope: !4796)
!4798 = !DILocation(line: 2087, column: 26, scope: !4796)
!4799 = !DILocation(line: 2087, column: 33, scope: !4796)
!4800 = !DILocation(line: 2087, column: 41, scope: !4796)
!4801 = !DILocation(line: 2087, column: 56, scope: !4796)
!4802 = !DILocation(line: 2086, column: 8, scope: !4796)
!4803 = !DILocation(line: 2088, column: 12, scope: !4796)
!4804 = !DILocation(line: 2089, column: 6, scope: !4796)
!4805 = !DILocation(line: 2091, column: 28, scope: !4791)
!4806 = !DILocation(line: 2091, column: 4, scope: !4791)
!4807 = !DILocation(line: 2091, column: 12, scope: !4791)
!4808 = !DILocation(line: 2091, column: 26, scope: !4791)
!4809 = !DILocation(line: 2093, column: 8, scope: !4810)
!4810 = distinct !DILexicalBlock(scope: !4791, file: !3, line: 2093, column: 8)
!4811 = !DILocation(line: 2093, column: 13, scope: !4810)
!4812 = !DILocation(line: 2093, column: 10, scope: !4810)
!4813 = !DILocation(line: 2093, column: 8, scope: !4791)
!4814 = !DILocation(line: 2094, column: 6, scope: !4810)
!4815 = !DILocation(line: 2095, column: 2, scope: !4791)
!4816 = !DILocation(line: 2080, column: 33, scope: !4785)
!4817 = !DILocation(line: 2080, column: 31, scope: !4785)
!4818 = !DILocation(line: 2080, column: 7, scope: !4785)
!4819 = distinct !{!4819, !4788, !4820}
!4820 = !DILocation(line: 2095, column: 2, scope: !4786)
!4821 = !DILocation(line: 2096, column: 12, scope: !4822)
!4822 = distinct !DILexicalBlock(scope: !4731, file: !3, line: 2096, column: 11)
!4823 = !DILocation(line: 2096, column: 11, scope: !4731)
!4824 = !DILocation(line: 2099, column: 4, scope: !4825)
!4825 = distinct !DILexicalBlock(scope: !4822, file: !3, line: 2097, column: 2)
!4826 = !DILocation(line: 2099, column: 21, scope: !4825)
!4827 = !DILocation(line: 2099, column: 25, scope: !4825)
!4828 = !DILocation(line: 2098, column: 4, scope: !4825)
!4829 = !DILocation(line: 2100, column: 8, scope: !4825)
!4830 = !DILocation(line: 2101, column: 2, scope: !4825)
!4831 = !DILocation(line: 2103, column: 19, scope: !4731)
!4832 = !DILocation(line: 2103, column: 17, scope: !4731)
!4833 = !DILocation(line: 2105, column: 7, scope: !4834)
!4834 = distinct !DILexicalBlock(scope: !4731, file: !3, line: 2105, column: 7)
!4835 = !DILocation(line: 2105, column: 7, scope: !4836)
!4836 = distinct !DILexicalBlock(scope: !4834, file: !3, line: 2105, column: 7)
!4837 = !DILocation(line: 2106, column: 6, scope: !4838)
!4838 = distinct !DILexicalBlock(scope: !4836, file: !3, line: 2106, column: 6)
!4839 = !DILocation(line: 2106, column: 9, scope: !4838)
!4840 = !DILocation(line: 2106, column: 15, scope: !4838)
!4841 = !DILocation(line: 2106, column: 6, scope: !4836)
!4842 = !DILocation(line: 2107, column: 4, scope: !4838)
!4843 = !DILocation(line: 2106, column: 17, scope: !4838)
!4844 = distinct !{!4844, !4833, !4845}
!4845 = !DILocation(line: 2107, column: 4, scope: !4834)
!4846 = !DILocation(line: 2108, column: 12, scope: !4847)
!4847 = distinct !DILexicalBlock(scope: !4731, file: !3, line: 2108, column: 11)
!4848 = !DILocation(line: 2108, column: 11, scope: !4731)
!4849 = !DILocalVariable(name: "insn", scope: !4850, file: !3, line: 2110, type: !889)
!4850 = distinct !DILexicalBlock(scope: !4847, file: !3, line: 2109, column: 2)
!4851 = !DILocation(line: 2110, column: 8, scope: !4850)
!4852 = !DILocation(line: 2113, column: 16, scope: !4853)
!4853 = distinct !DILexicalBlock(scope: !4850, file: !3, line: 2113, column: 4)
!4854 = !DILocation(line: 2113, column: 14, scope: !4853)
!4855 = !DILocation(line: 2113, column: 9, scope: !4853)
!4856 = !DILocation(line: 2115, column: 13, scope: !4857)
!4857 = distinct !DILexicalBlock(scope: !4858, file: !3, line: 2115, column: 12)
!4858 = distinct !DILexicalBlock(scope: !4859, file: !3, line: 2114, column: 6)
!4859 = distinct !DILexicalBlock(scope: !4853, file: !3, line: 2113, column: 4)
!4860 = !DILocation(line: 2115, column: 18, scope: !4857)
!4861 = !DILocation(line: 2115, column: 21, scope: !4857)
!4862 = !DILocation(line: 2115, column: 12, scope: !4858)
!4863 = !DILocation(line: 2117, column: 46, scope: !4864)
!4864 = distinct !DILexicalBlock(scope: !4857, file: !3, line: 2116, column: 3)
!4865 = !DILocation(line: 2117, column: 50, scope: !4864)
!4866 = !DILocation(line: 2117, column: 5, scope: !4864)
!4867 = !DILocation(line: 2118, column: 9, scope: !4864)
!4868 = !DILocation(line: 2119, column: 5, scope: !4864)
!4869 = !DILocation(line: 2121, column: 12, scope: !4870)
!4870 = distinct !DILexicalBlock(scope: !4858, file: !3, line: 2121, column: 12)
!4871 = !DILocation(line: 2121, column: 12, scope: !4858)
!4872 = !DILocation(line: 2122, column: 3, scope: !4870)
!4873 = !DILocation(line: 2123, column: 6, scope: !4858)
!4874 = !DILocation(line: 2113, column: 50, scope: !4859)
!4875 = !DILocation(line: 2113, column: 48, scope: !4859)
!4876 = !DILocation(line: 2113, column: 4, scope: !4859)
!4877 = distinct !{!4877, !4878, !4879}
!4878 = !DILocation(line: 2113, column: 4, scope: !4853)
!4879 = !DILocation(line: 2123, column: 6, scope: !4853)
!4880 = !DILocation(line: 2124, column: 2, scope: !4850)
!4881 = !DILocation(line: 2125, column: 16, scope: !4882)
!4882 = distinct !DILexicalBlock(scope: !4847, file: !3, line: 2125, column: 16)
!4883 = !DILocation(line: 2125, column: 19, scope: !4882)
!4884 = !DILocation(line: 2125, column: 26, scope: !4882)
!4885 = !DILocation(line: 2125, column: 23, scope: !4882)
!4886 = !DILocation(line: 2126, column: 9, scope: !4882)
!4887 = !DILocation(line: 2126, column: 12, scope: !4882)
!4888 = !DILocation(line: 2126, column: 15, scope: !4882)
!4889 = !DILocation(line: 2126, column: 23, scope: !4882)
!4890 = !DILocation(line: 2126, column: 20, scope: !4882)
!4891 = !DILocation(line: 2125, column: 16, scope: !4847)
!4892 = !DILocalVariable(name: "insn", scope: !4893, file: !3, line: 2128, type: !889)
!4893 = distinct !DILexicalBlock(scope: !4882, file: !3, line: 2127, column: 2)
!4894 = !DILocation(line: 2128, column: 8, scope: !4893)
!4895 = !DILocation(line: 2130, column: 8, scope: !4896)
!4896 = distinct !DILexicalBlock(scope: !4893, file: !3, line: 2130, column: 8)
!4897 = !DILocation(line: 2130, column: 11, scope: !4896)
!4898 = !DILocation(line: 2130, column: 16, scope: !4896)
!4899 = !DILocation(line: 2130, column: 27, scope: !4896)
!4900 = !DILocation(line: 2130, column: 30, scope: !4896)
!4901 = !DILocation(line: 2130, column: 24, scope: !4896)
!4902 = !DILocation(line: 2130, column: 8, scope: !4893)
!4903 = !DILocation(line: 2134, column: 4, scope: !4904)
!4904 = distinct !DILexicalBlock(scope: !4896, file: !3, line: 2131, column: 6)
!4905 = !DILocation(line: 2134, column: 7, scope: !4904)
!4906 = !DILocation(line: 2134, column: 12, scope: !4904)
!4907 = !DILocation(line: 2134, column: 19, scope: !4904)
!4908 = !DILocation(line: 2134, column: 22, scope: !4904)
!4909 = !DILocation(line: 2134, column: 28, scope: !4904)
!4910 = !DILocation(line: 2132, column: 8, scope: !4904)
!4911 = !DILocation(line: 2135, column: 12, scope: !4904)
!4912 = !DILocation(line: 2136, column: 6, scope: !4904)
!4913 = !DILocation(line: 2138, column: 18, scope: !4914)
!4914 = distinct !DILexicalBlock(scope: !4896, file: !3, line: 2138, column: 6)
!4915 = !DILocation(line: 2138, column: 16, scope: !4914)
!4916 = !DILocation(line: 2138, column: 11, scope: !4914)
!4917 = !DILocation(line: 2138, column: 47, scope: !4918)
!4918 = distinct !DILexicalBlock(scope: !4914, file: !3, line: 2138, column: 6)
!4919 = !DILocation(line: 2138, column: 55, scope: !4918)
!4920 = !DILocation(line: 2138, column: 52, scope: !4918)
!4921 = !DILocation(line: 2138, column: 6, scope: !4914)
!4922 = !DILocation(line: 2140, column: 12, scope: !4923)
!4923 = distinct !DILexicalBlock(scope: !4918, file: !3, line: 2140, column: 12)
!4924 = !DILocation(line: 2140, column: 29, scope: !4923)
!4925 = !DILocation(line: 2140, column: 32, scope: !4923)
!4926 = !DILocation(line: 2140, column: 12, scope: !4918)
!4927 = !DILocation(line: 2143, column: 5, scope: !4928)
!4928 = distinct !DILexicalBlock(scope: !4923, file: !3, line: 2141, column: 3)
!4929 = !DILocation(line: 2143, column: 8, scope: !4928)
!4930 = !DILocation(line: 2143, column: 13, scope: !4928)
!4931 = !DILocation(line: 2143, column: 20, scope: !4928)
!4932 = !DILocation(line: 2143, column: 23, scope: !4928)
!4933 = !DILocation(line: 2143, column: 29, scope: !4928)
!4934 = !DILocation(line: 2142, column: 5, scope: !4928)
!4935 = !DILocation(line: 2144, column: 5, scope: !4928)
!4936 = !DILocation(line: 2145, column: 9, scope: !4928)
!4937 = !DILocation(line: 2146, column: 3, scope: !4928)
!4938 = !DILocation(line: 2139, column: 11, scope: !4918)
!4939 = !DILocation(line: 2139, column: 9, scope: !4918)
!4940 = !DILocation(line: 2138, column: 6, scope: !4918)
!4941 = distinct !{!4941, !4921, !4942}
!4942 = !DILocation(line: 2146, column: 3, scope: !4914)
!4943 = !DILocation(line: 2147, column: 2, scope: !4893)
!4944 = !DILocation(line: 2148, column: 5, scope: !4731)
!4945 = distinct !{!4945, !4726, !4946}
!4946 = !DILocation(line: 2148, column: 5, scope: !4727)
!4947 = !DILocation(line: 2150, column: 12, scope: !4948)
!4948 = distinct !DILexicalBlock(scope: !4696, file: !3, line: 2150, column: 3)
!4949 = !DILocation(line: 2150, column: 10, scope: !4948)
!4950 = !DILocation(line: 2150, column: 8, scope: !4948)
!4951 = !DILocation(line: 2150, column: 23, scope: !4952)
!4952 = distinct !DILexicalBlock(scope: !4948, file: !3, line: 2150, column: 3)
!4953 = !DILocation(line: 2150, column: 25, scope: !4952)
!4954 = !DILocation(line: 2150, column: 3, scope: !4948)
!4955 = !DILocation(line: 2154, column: 12, scope: !4956)
!4956 = distinct !DILexicalBlock(scope: !4957, file: !3, line: 2154, column: 11)
!4957 = distinct !DILexicalBlock(scope: !4952, file: !3, line: 2151, column: 5)
!4958 = !DILocation(line: 2155, column: 4, scope: !4956)
!4959 = !DILocation(line: 2155, column: 7, scope: !4956)
!4960 = !DILocation(line: 2155, column: 26, scope: !4956)
!4961 = !DILocation(line: 2154, column: 11, scope: !4957)
!4962 = !DILocation(line: 2158, column: 4, scope: !4963)
!4963 = distinct !DILexicalBlock(scope: !4956, file: !3, line: 2156, column: 2)
!4964 = !DILocation(line: 2157, column: 4, scope: !4963)
!4965 = !DILocation(line: 2159, column: 8, scope: !4963)
!4966 = !DILocation(line: 2160, column: 2, scope: !4963)
!4967 = !DILocation(line: 2161, column: 5, scope: !4957)
!4968 = !DILocation(line: 2150, column: 42, scope: !4952)
!4969 = !DILocation(line: 2150, column: 40, scope: !4952)
!4970 = !DILocation(line: 2150, column: 3, scope: !4952)
!4971 = distinct !{!4971, !4954, !4972}
!4972 = !DILocation(line: 2161, column: 5, scope: !4948)
!4973 = !DILocation(line: 2162, column: 9, scope: !4696)
!4974 = !DILocation(line: 2162, column: 3, scope: !4696)
!4975 = !DILocation(line: 2164, column: 16, scope: !4696)
!4976 = !DILocation(line: 2165, column: 18, scope: !4696)
!4977 = !DILocation(line: 2165, column: 16, scope: !4696)
!4978 = !DILocation(line: 2167, column: 12, scope: !4979)
!4979 = distinct !DILexicalBlock(scope: !4696, file: !3, line: 2167, column: 3)
!4980 = !DILocation(line: 2167, column: 10, scope: !4979)
!4981 = !DILocation(line: 2167, column: 8, scope: !4979)
!4982 = !DILocation(line: 2167, column: 23, scope: !4983)
!4983 = distinct !DILexicalBlock(scope: !4979, file: !3, line: 2167, column: 3)
!4984 = !DILocation(line: 2167, column: 3, scope: !4979)
!4985 = !DILocation(line: 2169, column: 11, scope: !4986)
!4986 = distinct !DILexicalBlock(scope: !4987, file: !3, line: 2169, column: 11)
!4987 = distinct !DILexicalBlock(scope: !4983, file: !3, line: 2168, column: 5)
!4988 = !DILocation(line: 2169, column: 11, scope: !4987)
!4989 = !DILocation(line: 2171, column: 9, scope: !4990)
!4990 = distinct !DILexicalBlock(scope: !4986, file: !3, line: 2170, column: 2)
!4991 = !DILocation(line: 2171, column: 7, scope: !4990)
!4992 = !DILocation(line: 2173, column: 16, scope: !4990)
!4993 = !DILocation(line: 2174, column: 8, scope: !4994)
!4994 = distinct !DILexicalBlock(scope: !4990, file: !3, line: 2174, column: 8)
!4995 = !DILocation(line: 2174, column: 14, scope: !4994)
!4996 = !DILocation(line: 2174, column: 28, scope: !4994)
!4997 = !DILocation(line: 2174, column: 11, scope: !4994)
!4998 = !DILocation(line: 2174, column: 8, scope: !4990)
!4999 = !DILocation(line: 2175, column: 6, scope: !4994)
!5000 = !DILocation(line: 2177, column: 29, scope: !4990)
!5001 = !DILocation(line: 2177, column: 27, scope: !4990)
!5002 = !DILocation(line: 2177, column: 12, scope: !4990)
!5003 = !DILocation(line: 2178, column: 2, scope: !4990)
!5004 = !DILocation(line: 2180, column: 12, scope: !5005)
!5005 = distinct !DILexicalBlock(scope: !4987, file: !3, line: 2180, column: 11)
!5006 = !DILocation(line: 2180, column: 11, scope: !4987)
!5007 = !DILocation(line: 2182, column: 12, scope: !5008)
!5008 = distinct !DILexicalBlock(scope: !5005, file: !3, line: 2181, column: 2)
!5009 = !DILocation(line: 2182, column: 4, scope: !5008)
!5010 = !DILocation(line: 2186, column: 8, scope: !5011)
!5011 = distinct !DILexicalBlock(scope: !5008, file: !3, line: 2183, column: 6)
!5012 = !DILocation(line: 2190, column: 12, scope: !5013)
!5013 = distinct !DILexicalBlock(scope: !5011, file: !3, line: 2190, column: 12)
!5014 = !DILocation(line: 2191, column: 5, scope: !5013)
!5015 = !DILocation(line: 2191, column: 8, scope: !5013)
!5016 = !DILocation(line: 2190, column: 12, scope: !5011)
!5017 = !DILocation(line: 2192, column: 7, scope: !5013)
!5018 = !DILocation(line: 2192, column: 5, scope: !5013)
!5019 = !DILocation(line: 2192, column: 3, scope: !5013)
!5020 = !DILocation(line: 2195, column: 8, scope: !5011)
!5021 = !DILocation(line: 2198, column: 8, scope: !5011)
!5022 = !DILocation(line: 2199, column: 6, scope: !5011)
!5023 = !DILocation(line: 2200, column: 2, scope: !5008)
!5024 = !DILocation(line: 2202, column: 11, scope: !5025)
!5025 = distinct !DILexicalBlock(scope: !4987, file: !3, line: 2202, column: 11)
!5026 = !DILocation(line: 2203, column: 4, scope: !5025)
!5027 = !DILocation(line: 2203, column: 21, scope: !5025)
!5028 = !DILocation(line: 2203, column: 7, scope: !5025)
!5029 = !DILocation(line: 2203, column: 24, scope: !5025)
!5030 = !DILocation(line: 2203, column: 41, scope: !5025)
!5031 = !DILocation(line: 2203, column: 29, scope: !5025)
!5032 = !DILocation(line: 2204, column: 4, scope: !5025)
!5033 = !DILocation(line: 2204, column: 29, scope: !5025)
!5034 = !DILocation(line: 2204, column: 10, scope: !5025)
!5035 = !DILocation(line: 2204, column: 32, scope: !5025)
!5036 = !DILocation(line: 2204, column: 35, scope: !5025)
!5037 = !DILocation(line: 2202, column: 11, scope: !4987)
!5038 = !DILocation(line: 2205, column: 6, scope: !5025)
!5039 = !DILocation(line: 2206, column: 11, scope: !5040)
!5040 = distinct !DILexicalBlock(scope: !4987, file: !3, line: 2206, column: 11)
!5041 = !DILocation(line: 2206, column: 19, scope: !5040)
!5042 = !DILocation(line: 2206, column: 22, scope: !5040)
!5043 = !DILocation(line: 2206, column: 27, scope: !5040)
!5044 = !DILocation(line: 2206, column: 24, scope: !5040)
!5045 = !DILocation(line: 2206, column: 11, scope: !4987)
!5046 = !DILocation(line: 2207, column: 10, scope: !5040)
!5047 = !DILocation(line: 2207, column: 2, scope: !5040)
!5048 = !DILocation(line: 2208, column: 5, scope: !4987)
!5049 = !DILocation(line: 2167, column: 30, scope: !4983)
!5050 = !DILocation(line: 2167, column: 28, scope: !4983)
!5051 = !DILocation(line: 2167, column: 3, scope: !4983)
!5052 = distinct !{!5052, !4984, !5053}
!5053 = !DILocation(line: 2208, column: 5, scope: !4979)
!5054 = !DILocation(line: 2210, column: 7, scope: !5055)
!5055 = distinct !DILexicalBlock(scope: !4696, file: !3, line: 2210, column: 7)
!5056 = !DILocation(line: 2210, column: 23, scope: !5055)
!5057 = !DILocation(line: 2210, column: 38, scope: !5055)
!5058 = !DILocation(line: 2210, column: 20, scope: !5055)
!5059 = !DILocation(line: 2210, column: 7, scope: !4696)
!5060 = !DILocation(line: 2213, column: 8, scope: !5055)
!5061 = !DILocation(line: 2213, column: 22, scope: !5055)
!5062 = !DILocation(line: 2211, column: 5, scope: !5055)
!5063 = !DILocation(line: 2215, column: 11, scope: !4696)
!5064 = !DILocation(line: 2215, column: 4, scope: !4696)
!5065 = distinct !DISubprogram(name: "rtl_dump_bb", scope: !3, file: !3, line: 1606, type: !2150, scopeLine: 1607, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!5066 = !DILocalVariable(name: "bb", arg: 1, scope: !5065, file: !3, line: 1606, type: !1392)
!5067 = !DILocation(line: 1606, column: 26, scope: !5065)
!5068 = !DILocalVariable(name: "outf", arg: 2, scope: !5065, file: !3, line: 1606, type: !797)
!5069 = !DILocation(line: 1606, column: 36, scope: !5065)
!5070 = !DILocalVariable(name: "indent", arg: 3, scope: !5065, file: !3, line: 1606, type: !804)
!5071 = !DILocation(line: 1606, column: 46, scope: !5065)
!5072 = !DILocalVariable(name: "flags", arg: 4, scope: !5065, file: !3, line: 1606, type: !804)
!5073 = !DILocation(line: 1606, column: 58, scope: !5065)
!5074 = !DILocalVariable(name: "insn", scope: !5065, file: !3, line: 1608, type: !889)
!5075 = !DILocation(line: 1608, column: 7, scope: !5065)
!5076 = !DILocalVariable(name: "last", scope: !5065, file: !3, line: 1609, type: !889)
!5077 = !DILocation(line: 1609, column: 7, scope: !5065)
!5078 = !DILocalVariable(name: "s_indent", scope: !5065, file: !3, line: 1610, type: !806)
!5079 = !DILocation(line: 1610, column: 9, scope: !5065)
!5080 = !DILocation(line: 1612, column: 23, scope: !5065)
!5081 = !DILocation(line: 1612, column: 12, scope: !5065)
!5082 = !DILocation(line: 1613, column: 11, scope: !5065)
!5083 = !DILocation(line: 1613, column: 35, scope: !5065)
!5084 = !DILocation(line: 1613, column: 26, scope: !5065)
!5085 = !DILocation(line: 1613, column: 3, scope: !5065)
!5086 = !DILocation(line: 1614, column: 3, scope: !5065)
!5087 = !DILocation(line: 1614, column: 12, scope: !5065)
!5088 = !DILocation(line: 1614, column: 20, scope: !5065)
!5089 = !DILocation(line: 1616, column: 7, scope: !5090)
!5090 = distinct !DILexicalBlock(scope: !5065, file: !3, line: 1616, column: 7)
!5091 = !DILocation(line: 1616, column: 7, scope: !5065)
!5092 = !DILocation(line: 1618, column: 20, scope: !5093)
!5093 = distinct !DILexicalBlock(scope: !5090, file: !3, line: 1617, column: 5)
!5094 = !DILocation(line: 1618, column: 24, scope: !5093)
!5095 = !DILocation(line: 1618, column: 7, scope: !5093)
!5096 = !DILocation(line: 1619, column: 19, scope: !5093)
!5097 = !DILocation(line: 1619, column: 7, scope: !5093)
!5098 = !DILocation(line: 1620, column: 5, scope: !5093)
!5099 = !DILocation(line: 1622, column: 15, scope: !5100)
!5100 = distinct !DILexicalBlock(scope: !5065, file: !3, line: 1622, column: 3)
!5101 = !DILocation(line: 1622, column: 13, scope: !5100)
!5102 = !DILocation(line: 1622, column: 36, scope: !5100)
!5103 = !DILocation(line: 1622, column: 34, scope: !5100)
!5104 = !DILocation(line: 1622, column: 8, scope: !5100)
!5105 = !DILocation(line: 1622, column: 61, scope: !5106)
!5106 = distinct !DILexicalBlock(scope: !5100, file: !3, line: 1622, column: 3)
!5107 = !DILocation(line: 1622, column: 69, scope: !5106)
!5108 = !DILocation(line: 1622, column: 66, scope: !5106)
!5109 = !DILocation(line: 1622, column: 3, scope: !5100)
!5110 = !DILocation(line: 1624, column: 23, scope: !5106)
!5111 = !DILocation(line: 1624, column: 29, scope: !5106)
!5112 = !DILocation(line: 1624, column: 5, scope: !5106)
!5113 = !DILocation(line: 1623, column: 15, scope: !5106)
!5114 = !DILocation(line: 1623, column: 13, scope: !5106)
!5115 = !DILocation(line: 1622, column: 3, scope: !5106)
!5116 = distinct !{!5116, !5109, !5117}
!5117 = !DILocation(line: 1624, column: 33, scope: !5100)
!5118 = !DILocation(line: 1626, column: 7, scope: !5119)
!5119 = distinct !DILexicalBlock(scope: !5065, file: !3, line: 1626, column: 7)
!5120 = !DILocation(line: 1626, column: 7, scope: !5065)
!5121 = !DILocation(line: 1628, column: 23, scope: !5122)
!5122 = distinct !DILexicalBlock(scope: !5119, file: !3, line: 1627, column: 5)
!5123 = !DILocation(line: 1628, column: 27, scope: !5122)
!5124 = !DILocation(line: 1628, column: 7, scope: !5122)
!5125 = !DILocation(line: 1629, column: 19, scope: !5122)
!5126 = !DILocation(line: 1629, column: 7, scope: !5122)
!5127 = !DILocation(line: 1630, column: 5, scope: !5122)
!5128 = !DILocation(line: 1632, column: 1, scope: !5065)
!5129 = distinct !DISubprogram(name: "rtl_create_basic_block", scope: !3, file: !3, line: 328, type: !2154, scopeLine: 329, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!5130 = !DILocalVariable(name: "headp", arg: 1, scope: !5129, file: !3, line: 328, type: !850)
!5131 = !DILocation(line: 328, column: 31, scope: !5129)
!5132 = !DILocalVariable(name: "endp", arg: 2, scope: !5129, file: !3, line: 328, type: !850)
!5133 = !DILocation(line: 328, column: 44, scope: !5129)
!5134 = !DILocalVariable(name: "after", arg: 3, scope: !5129, file: !3, line: 328, type: !1392)
!5135 = !DILocation(line: 328, column: 62, scope: !5129)
!5136 = !DILocalVariable(name: "head", scope: !5129, file: !3, line: 330, type: !889)
!5137 = !DILocation(line: 330, column: 7, scope: !5129)
!5138 = !DILocation(line: 330, column: 20, scope: !5129)
!5139 = !DILocation(line: 330, column: 14, scope: !5129)
!5140 = !DILocalVariable(name: "end", scope: !5129, file: !3, line: 330, type: !889)
!5141 = !DILocation(line: 330, column: 27, scope: !5129)
!5142 = !DILocation(line: 330, column: 39, scope: !5129)
!5143 = !DILocation(line: 330, column: 33, scope: !5129)
!5144 = !DILocalVariable(name: "bb", scope: !5129, file: !3, line: 331, type: !1392)
!5145 = !DILocation(line: 331, column: 15, scope: !5129)
!5146 = !DILocation(line: 334, column: 16, scope: !5147)
!5147 = distinct !DILexicalBlock(scope: !5129, file: !3, line: 334, column: 7)
!5148 = !DILocation(line: 334, column: 7, scope: !5147)
!5149 = !DILocation(line: 334, column: 36, scope: !5147)
!5150 = !DILocation(line: 334, column: 33, scope: !5147)
!5151 = !DILocation(line: 334, column: 7, scope: !5129)
!5152 = !DILocalVariable(name: "new_size", scope: !5153, file: !3, line: 336, type: !852)
!5153 = distinct !DILexicalBlock(scope: !5147, file: !3, line: 335, column: 5)
!5154 = !DILocation(line: 336, column: 14, scope: !5153)
!5155 = !DILocation(line: 336, column: 25, scope: !5153)
!5156 = !DILocation(line: 336, column: 45, scope: !5153)
!5157 = !DILocation(line: 336, column: 62, scope: !5153)
!5158 = !DILocation(line: 336, column: 67, scope: !5153)
!5159 = !DILocation(line: 336, column: 42, scope: !5153)
!5160 = !DILocation(line: 337, column: 7, scope: !5153)
!5161 = !DILocation(line: 338, column: 5, scope: !5153)
!5162 = !DILocation(line: 340, column: 3, scope: !5129)
!5163 = !DILocation(line: 340, column: 17, scope: !5129)
!5164 = !DILocation(line: 342, column: 38, scope: !5129)
!5165 = !DILocation(line: 342, column: 44, scope: !5129)
!5166 = !DILocation(line: 342, column: 55, scope: !5129)
!5167 = !DILocation(line: 342, column: 8, scope: !5129)
!5168 = !DILocation(line: 342, column: 6, scope: !5129)
!5169 = !DILocation(line: 343, column: 3, scope: !5129)
!5170 = !DILocation(line: 343, column: 7, scope: !5129)
!5171 = !DILocation(line: 343, column: 11, scope: !5129)
!5172 = !DILocation(line: 344, column: 10, scope: !5129)
!5173 = !DILocation(line: 344, column: 3, scope: !5129)
!5174 = distinct !DISubprogram(name: "rtl_redirect_edge_and_branch", scope: !3, file: !3, line: 1078, type: !2158, scopeLine: 1079, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!5175 = !DILocalVariable(name: "e", arg: 1, scope: !5174, file: !3, line: 1078, type: !1409)
!5176 = !DILocation(line: 1078, column: 36, scope: !5174)
!5177 = !DILocalVariable(name: "target", arg: 2, scope: !5174, file: !3, line: 1078, type: !1392)
!5178 = !DILocation(line: 1078, column: 51, scope: !5174)
!5179 = !DILocalVariable(name: "ret", scope: !5174, file: !3, line: 1080, type: !1409)
!5180 = !DILocation(line: 1080, column: 8, scope: !5174)
!5181 = !DILocalVariable(name: "src", scope: !5174, file: !3, line: 1081, type: !1392)
!5182 = !DILocation(line: 1081, column: 15, scope: !5174)
!5183 = !DILocation(line: 1081, column: 21, scope: !5174)
!5184 = !DILocation(line: 1081, column: 24, scope: !5174)
!5185 = !DILocation(line: 1083, column: 7, scope: !5186)
!5186 = distinct !DILexicalBlock(scope: !5174, file: !3, line: 1083, column: 7)
!5187 = !DILocation(line: 1083, column: 10, scope: !5186)
!5188 = !DILocation(line: 1083, column: 16, scope: !5186)
!5189 = !DILocation(line: 1083, column: 7, scope: !5174)
!5190 = !DILocation(line: 1084, column: 5, scope: !5186)
!5191 = !DILocation(line: 1086, column: 7, scope: !5192)
!5192 = distinct !DILexicalBlock(scope: !5174, file: !3, line: 1086, column: 7)
!5193 = !DILocation(line: 1086, column: 10, scope: !5192)
!5194 = !DILocation(line: 1086, column: 18, scope: !5192)
!5195 = !DILocation(line: 1086, column: 15, scope: !5192)
!5196 = !DILocation(line: 1086, column: 7, scope: !5174)
!5197 = !DILocation(line: 1087, column: 12, scope: !5192)
!5198 = !DILocation(line: 1087, column: 5, scope: !5192)
!5199 = !DILocation(line: 1089, column: 46, scope: !5200)
!5200 = distinct !DILexicalBlock(scope: !5174, file: !3, line: 1089, column: 7)
!5201 = !DILocation(line: 1089, column: 49, scope: !5200)
!5202 = !DILocation(line: 1089, column: 14, scope: !5200)
!5203 = !DILocation(line: 1089, column: 12, scope: !5200)
!5204 = !DILocation(line: 1089, column: 65, scope: !5200)
!5205 = !DILocation(line: 1089, column: 7, scope: !5174)
!5206 = !DILocation(line: 1091, column: 24, scope: !5207)
!5207 = distinct !DILexicalBlock(scope: !5200, file: !3, line: 1090, column: 5)
!5208 = !DILocation(line: 1091, column: 7, scope: !5207)
!5209 = !DILocation(line: 1092, column: 14, scope: !5207)
!5210 = !DILocation(line: 1092, column: 7, scope: !5207)
!5211 = !DILocation(line: 1095, column: 31, scope: !5174)
!5212 = !DILocation(line: 1095, column: 34, scope: !5174)
!5213 = !DILocation(line: 1095, column: 9, scope: !5174)
!5214 = !DILocation(line: 1095, column: 7, scope: !5174)
!5215 = !DILocation(line: 1096, column: 8, scope: !5216)
!5216 = distinct !DILexicalBlock(scope: !5174, file: !3, line: 1096, column: 7)
!5217 = !DILocation(line: 1096, column: 7, scope: !5174)
!5218 = !DILocation(line: 1097, column: 5, scope: !5216)
!5219 = !DILocation(line: 1099, column: 20, scope: !5174)
!5220 = !DILocation(line: 1099, column: 3, scope: !5174)
!5221 = !DILocation(line: 1100, column: 10, scope: !5174)
!5222 = !DILocation(line: 1100, column: 3, scope: !5174)
!5223 = !DILocation(line: 1101, column: 1, scope: !5174)
!5224 = distinct !DISubprogram(name: "rtl_redirect_edge_and_branch_force", scope: !3, file: !3, line: 1278, type: !2162, scopeLine: 1279, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!5225 = !DILocalVariable(name: "e", arg: 1, scope: !5224, file: !3, line: 1278, type: !1409)
!5226 = !DILocation(line: 1278, column: 42, scope: !5224)
!5227 = !DILocalVariable(name: "target", arg: 2, scope: !5224, file: !3, line: 1278, type: !1392)
!5228 = !DILocation(line: 1278, column: 57, scope: !5224)
!5229 = !DILocation(line: 1280, column: 33, scope: !5230)
!5230 = distinct !DILexicalBlock(scope: !5224, file: !3, line: 1280, column: 7)
!5231 = !DILocation(line: 1280, column: 36, scope: !5230)
!5232 = !DILocation(line: 1280, column: 7, scope: !5230)
!5233 = !DILocation(line: 1281, column: 7, scope: !5230)
!5234 = !DILocation(line: 1281, column: 10, scope: !5230)
!5235 = !DILocation(line: 1281, column: 13, scope: !5230)
!5236 = !DILocation(line: 1281, column: 21, scope: !5230)
!5237 = !DILocation(line: 1281, column: 18, scope: !5230)
!5238 = !DILocation(line: 1280, column: 7, scope: !5224)
!5239 = !DILocation(line: 1282, column: 5, scope: !5230)
!5240 = !DILocation(line: 1286, column: 20, scope: !5224)
!5241 = !DILocation(line: 1286, column: 23, scope: !5224)
!5242 = !DILocation(line: 1286, column: 3, scope: !5224)
!5243 = !DILocation(line: 1287, column: 42, scope: !5224)
!5244 = !DILocation(line: 1287, column: 45, scope: !5224)
!5245 = !DILocation(line: 1287, column: 10, scope: !5224)
!5246 = !DILocation(line: 1287, column: 3, scope: !5224)
!5247 = !DILocation(line: 1288, column: 1, scope: !5224)
!5248 = distinct !DISubprogram(name: "rtl_can_remove_branch_p", scope: !3, file: !3, line: 3160, type: !2166, scopeLine: 3161, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!5249 = !DILocalVariable(name: "e", arg: 1, scope: !5248, file: !3, line: 3160, type: !2168)
!5250 = !DILocation(line: 3160, column: 37, scope: !5248)
!5251 = !DILocalVariable(name: "src", scope: !5248, file: !3, line: 3162, type: !2196)
!5252 = !DILocation(line: 3162, column: 21, scope: !5248)
!5253 = !DILocation(line: 3162, column: 27, scope: !5248)
!5254 = !DILocation(line: 3162, column: 30, scope: !5248)
!5255 = !DILocalVariable(name: "target", scope: !5248, file: !3, line: 3163, type: !2196)
!5256 = !DILocation(line: 3163, column: 21, scope: !5248)
!5257 = !DILocation(line: 3163, column: 30, scope: !5248)
!5258 = !DILocation(line: 3163, column: 72, scope: !5248)
!5259 = !DILocalVariable(name: "insn", scope: !5248, file: !3, line: 3164, type: !860)
!5260 = !DILocation(line: 3164, column: 13, scope: !5248)
!5261 = !DILocation(line: 3164, column: 20, scope: !5248)
!5262 = !DILocalVariable(name: "set", scope: !5248, file: !3, line: 3164, type: !860)
!5263 = !DILocation(line: 3164, column: 34, scope: !5248)
!5264 = !DILocation(line: 3167, column: 7, scope: !5265)
!5265 = distinct !DILexicalBlock(scope: !5248, file: !3, line: 3167, column: 7)
!5266 = !DILocation(line: 3167, column: 17, scope: !5265)
!5267 = !DILocation(line: 3167, column: 14, scope: !5265)
!5268 = !DILocation(line: 3167, column: 7, scope: !5248)
!5269 = !DILocation(line: 3168, column: 5, scope: !5265)
!5270 = !DILocation(line: 3170, column: 7, scope: !5271)
!5271 = distinct !DILexicalBlock(scope: !5248, file: !3, line: 3170, column: 7)
!5272 = !DILocation(line: 3170, column: 10, scope: !5271)
!5273 = !DILocation(line: 3170, column: 16, scope: !5271)
!5274 = !DILocation(line: 3170, column: 7, scope: !5248)
!5275 = !DILocation(line: 3171, column: 5, scope: !5271)
!5276 = !DILocation(line: 3173, column: 22, scope: !5277)
!5277 = distinct !DILexicalBlock(scope: !5248, file: !3, line: 3173, column: 7)
!5278 = !DILocation(line: 3173, column: 7, scope: !5277)
!5279 = !DILocation(line: 3174, column: 7, scope: !5277)
!5280 = !DILocation(line: 3174, column: 10, scope: !5277)
!5281 = !DILocation(line: 3174, column: 32, scope: !5277)
!5282 = !DILocation(line: 3174, column: 29, scope: !5277)
!5283 = !DILocation(line: 3173, column: 7, scope: !5248)
!5284 = !DILocation(line: 3175, column: 5, scope: !5277)
!5285 = !DILocation(line: 3177, column: 20, scope: !5286)
!5286 = distinct !DILexicalBlock(scope: !5248, file: !3, line: 3177, column: 7)
!5287 = !DILocation(line: 3177, column: 8, scope: !5286)
!5288 = !DILocation(line: 3178, column: 7, scope: !5286)
!5289 = !DILocation(line: 3178, column: 23, scope: !5286)
!5290 = !DILocation(line: 3178, column: 10, scope: !5286)
!5291 = !DILocation(line: 3177, column: 7, scope: !5248)
!5292 = !DILocation(line: 3179, column: 5, scope: !5286)
!5293 = !DILocation(line: 3181, column: 9, scope: !5248)
!5294 = !DILocation(line: 3181, column: 7, scope: !5248)
!5295 = !DILocation(line: 3182, column: 8, scope: !5296)
!5296 = distinct !DILexicalBlock(scope: !5248, file: !3, line: 3182, column: 7)
!5297 = !DILocation(line: 3182, column: 12, scope: !5296)
!5298 = !DILocation(line: 3182, column: 31, scope: !5296)
!5299 = !DILocation(line: 3182, column: 15, scope: !5296)
!5300 = !DILocation(line: 3182, column: 7, scope: !5248)
!5301 = !DILocation(line: 3183, column: 5, scope: !5296)
!5302 = !DILocation(line: 3185, column: 3, scope: !5248)
!5303 = !DILocation(line: 3186, column: 1, scope: !5248)
!5304 = distinct !DISubprogram(name: "rtl_delete_block", scope: !3, file: !3, line: 364, type: !2173, scopeLine: 365, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!5305 = !DILocalVariable(name: "b", arg: 1, scope: !5304, file: !3, line: 364, type: !1392)
!5306 = !DILocation(line: 364, column: 31, scope: !5304)
!5307 = !DILocalVariable(name: "insn", scope: !5304, file: !3, line: 366, type: !889)
!5308 = !DILocation(line: 366, column: 7, scope: !5304)
!5309 = !DILocalVariable(name: "end", scope: !5304, file: !3, line: 366, type: !889)
!5310 = !DILocation(line: 366, column: 13, scope: !5304)
!5311 = !DILocation(line: 371, column: 10, scope: !5304)
!5312 = !DILocation(line: 371, column: 8, scope: !5304)
!5313 = !DILocation(line: 373, column: 27, scope: !5304)
!5314 = !DILocation(line: 373, column: 9, scope: !5304)
!5315 = !DILocation(line: 373, column: 7, scope: !5304)
!5316 = !DILocation(line: 376, column: 3, scope: !5304)
!5317 = !DILocation(line: 376, column: 15, scope: !5304)
!5318 = !DILocation(line: 377, column: 22, scope: !5304)
!5319 = !DILocation(line: 377, column: 28, scope: !5304)
!5320 = !DILocation(line: 377, column: 3, scope: !5304)
!5321 = !DILocation(line: 380, column: 7, scope: !5322)
!5322 = distinct !DILexicalBlock(scope: !5304, file: !3, line: 380, column: 7)
!5323 = !DILocation(line: 380, column: 7, scope: !5304)
!5324 = !DILocation(line: 381, column: 14, scope: !5322)
!5325 = !DILocation(line: 381, column: 48, scope: !5322)
!5326 = !DILocation(line: 381, column: 51, scope: !5322)
!5327 = !DILocation(line: 381, column: 5, scope: !5322)
!5328 = !DILocation(line: 382, column: 17, scope: !5304)
!5329 = !DILocation(line: 382, column: 20, scope: !5304)
!5330 = !DILocation(line: 382, column: 3, scope: !5304)
!5331 = !DILocation(line: 383, column: 1, scope: !5304)
!5332 = distinct !DISubprogram(name: "rtl_split_block", scope: !3, file: !3, line: 522, type: !2177, scopeLine: 523, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!5333 = !DILocalVariable(name: "bb", arg: 1, scope: !5332, file: !3, line: 522, type: !1392)
!5334 = !DILocation(line: 522, column: 30, scope: !5332)
!5335 = !DILocalVariable(name: "insnp", arg: 2, scope: !5332, file: !3, line: 522, type: !850)
!5336 = !DILocation(line: 522, column: 40, scope: !5332)
!5337 = !DILocalVariable(name: "new_bb", scope: !5332, file: !3, line: 524, type: !1392)
!5338 = !DILocation(line: 524, column: 15, scope: !5332)
!5339 = !DILocalVariable(name: "insn", scope: !5332, file: !3, line: 525, type: !889)
!5340 = !DILocation(line: 525, column: 7, scope: !5332)
!5341 = !DILocation(line: 525, column: 20, scope: !5332)
!5342 = !DILocation(line: 525, column: 14, scope: !5332)
!5343 = !DILocalVariable(name: "e", scope: !5332, file: !3, line: 526, type: !1409)
!5344 = !DILocation(line: 526, column: 8, scope: !5332)
!5345 = !DILocalVariable(name: "ei", scope: !5332, file: !3, line: 527, type: !2483)
!5346 = !DILocation(line: 527, column: 17, scope: !5332)
!5347 = !DILocation(line: 529, column: 8, scope: !5348)
!5348 = distinct !DILexicalBlock(scope: !5332, file: !3, line: 529, column: 7)
!5349 = !DILocation(line: 529, column: 7, scope: !5332)
!5350 = !DILocation(line: 531, column: 49, scope: !5351)
!5351 = distinct !DILexicalBlock(scope: !5348, file: !3, line: 530, column: 5)
!5352 = !DILocation(line: 531, column: 14, scope: !5351)
!5353 = !DILocation(line: 531, column: 12, scope: !5351)
!5354 = !DILocation(line: 533, column: 11, scope: !5355)
!5355 = distinct !DILexicalBlock(scope: !5351, file: !3, line: 533, column: 11)
!5356 = !DILocation(line: 533, column: 11, scope: !5351)
!5357 = !DILocalVariable(name: "next", scope: !5358, file: !3, line: 535, type: !889)
!5358 = distinct !DILexicalBlock(scope: !5355, file: !3, line: 534, column: 2)
!5359 = !DILocation(line: 535, column: 8, scope: !5358)
!5360 = !DILocation(line: 535, column: 15, scope: !5358)
!5361 = !DILocation(line: 537, column: 11, scope: !5358)
!5362 = !DILocation(line: 537, column: 9, scope: !5358)
!5363 = !DILocation(line: 543, column: 8, scope: !5364)
!5364 = distinct !DILexicalBlock(scope: !5358, file: !3, line: 543, column: 8)
!5365 = !DILocation(line: 543, column: 16, scope: !5364)
!5366 = !DILocation(line: 543, column: 13, scope: !5364)
!5367 = !DILocation(line: 544, column: 8, scope: !5364)
!5368 = !DILocation(line: 544, column: 11, scope: !5364)
!5369 = !DILocation(line: 545, column: 8, scope: !5364)
!5370 = !DILocation(line: 545, column: 11, scope: !5364)
!5371 = !DILocation(line: 543, column: 8, scope: !5358)
!5372 = !DILocation(line: 547, column: 8, scope: !5373)
!5373 = distinct !DILexicalBlock(scope: !5364, file: !3, line: 546, column: 6)
!5374 = !DILocation(line: 547, column: 15, scope: !5373)
!5375 = !DILocation(line: 547, column: 23, scope: !5373)
!5376 = !DILocation(line: 547, column: 20, scope: !5373)
!5377 = !DILocation(line: 547, column: 35, scope: !5373)
!5378 = !DILocation(line: 547, column: 38, scope: !5373)
!5379 = !DILocation(line: 0, scope: !5373)
!5380 = !DILocation(line: 548, column: 10, scope: !5373)
!5381 = !DILocation(line: 548, column: 8, scope: !5373)
!5382 = distinct !{!5382, !5372, !5380}
!5383 = !DILocation(line: 550, column: 12, scope: !5384)
!5384 = distinct !DILexicalBlock(scope: !5373, file: !3, line: 550, column: 12)
!5385 = !DILocation(line: 550, column: 20, scope: !5384)
!5386 = !DILocation(line: 550, column: 17, scope: !5384)
!5387 = !DILocation(line: 550, column: 12, scope: !5373)
!5388 = !DILocation(line: 551, column: 39, scope: !5384)
!5389 = !DILocation(line: 551, column: 3, scope: !5384)
!5390 = !DILocation(line: 552, column: 6, scope: !5373)
!5391 = !DILocation(line: 553, column: 2, scope: !5358)
!5392 = !DILocation(line: 555, column: 9, scope: !5355)
!5393 = !DILocation(line: 555, column: 7, scope: !5355)
!5394 = !DILocation(line: 556, column: 5, scope: !5351)
!5395 = !DILocation(line: 561, column: 7, scope: !5396)
!5396 = distinct !DILexicalBlock(scope: !5332, file: !3, line: 561, column: 7)
!5397 = !DILocation(line: 561, column: 15, scope: !5396)
!5398 = !DILocation(line: 561, column: 12, scope: !5396)
!5399 = !DILocation(line: 561, column: 7, scope: !5332)
!5400 = !DILocation(line: 562, column: 41, scope: !5396)
!5401 = !DILocation(line: 562, column: 5, scope: !5396)
!5402 = !DILocation(line: 565, column: 32, scope: !5332)
!5403 = !DILocation(line: 565, column: 50, scope: !5332)
!5404 = !DILocation(line: 565, column: 63, scope: !5332)
!5405 = !DILocation(line: 565, column: 12, scope: !5332)
!5406 = !DILocation(line: 565, column: 10, scope: !5332)
!5407 = !DILocation(line: 566, column: 3, scope: !5332)
!5408 = !DILocalVariable(name: "bb_", scope: !5409, file: !3, line: 566, type: !1392)
!5409 = distinct !DILexicalBlock(scope: !5332, file: !3, line: 566, column: 3)
!5410 = !DILocation(line: 566, column: 3, scope: !5409)
!5411 = !DILocation(line: 567, column: 17, scope: !5332)
!5412 = !DILocation(line: 567, column: 3, scope: !5332)
!5413 = !DILocation(line: 567, column: 15, scope: !5332)
!5414 = !DILocation(line: 570, column: 19, scope: !5332)
!5415 = !DILocation(line: 570, column: 23, scope: !5332)
!5416 = !DILocation(line: 570, column: 3, scope: !5332)
!5417 = !DILocation(line: 570, column: 11, scope: !5332)
!5418 = !DILocation(line: 570, column: 17, scope: !5332)
!5419 = !DILocation(line: 571, column: 3, scope: !5332)
!5420 = !DILocation(line: 571, column: 7, scope: !5332)
!5421 = !DILocation(line: 571, column: 13, scope: !5332)
!5422 = !DILocation(line: 572, column: 3, scope: !5423)
!5423 = distinct !DILexicalBlock(scope: !5332, file: !3, line: 572, column: 3)
!5424 = !DILocation(line: 572, column: 3, scope: !5425)
!5425 = distinct !DILexicalBlock(scope: !5423, file: !3, line: 572, column: 3)
!5426 = !DILocation(line: 573, column: 14, scope: !5425)
!5427 = !DILocation(line: 573, column: 5, scope: !5425)
!5428 = !DILocation(line: 573, column: 8, scope: !5425)
!5429 = !DILocation(line: 573, column: 12, scope: !5425)
!5430 = distinct !{!5430, !5422, !5431}
!5431 = !DILocation(line: 573, column: 14, scope: !5423)
!5432 = !DILocation(line: 576, column: 20, scope: !5332)
!5433 = !DILocation(line: 576, column: 3, scope: !5332)
!5434 = !DILocation(line: 577, column: 10, scope: !5332)
!5435 = !DILocation(line: 577, column: 3, scope: !5332)
!5436 = distinct !DISubprogram(name: "rtl_move_block_after", scope: !3, file: !3, line: 1342, type: !2181, scopeLine: 1344, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!5437 = !DILocalVariable(name: "bb", arg: 1, scope: !5436, file: !3, line: 1342, type: !1392)
!5438 = !DILocation(line: 1342, column: 35, scope: !5436)
!5439 = !DILocalVariable(name: "after", arg: 2, scope: !5436, file: !3, line: 1343, type: !1392)
!5440 = !DILocation(line: 1343, column: 21, scope: !5436)
!5441 = !DILocation(line: 1345, column: 3, scope: !5436)
!5442 = distinct !DISubprogram(name: "rtl_can_merge_blocks", scope: !3, file: !3, line: 687, type: !2181, scopeLine: 688, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!5443 = !DILocalVariable(name: "a", arg: 1, scope: !5442, file: !3, line: 687, type: !1392)
!5444 = !DILocation(line: 687, column: 35, scope: !5442)
!5445 = !DILocalVariable(name: "b", arg: 2, scope: !5442, file: !3, line: 687, type: !1392)
!5446 = !DILocation(line: 687, column: 50, scope: !5442)
!5447 = !DILocation(line: 699, column: 7, scope: !5448)
!5448 = distinct !DILexicalBlock(scope: !5442, file: !3, line: 699, column: 7)
!5449 = !DILocation(line: 699, column: 27, scope: !5448)
!5450 = !DILocation(line: 699, column: 24, scope: !5448)
!5451 = !DILocation(line: 699, column: 7, scope: !5442)
!5452 = !DILocation(line: 700, column: 5, scope: !5448)
!5453 = !DILocation(line: 703, column: 26, scope: !5442)
!5454 = !DILocation(line: 703, column: 11, scope: !5442)
!5455 = !DILocation(line: 704, column: 4, scope: !5442)
!5456 = !DILocation(line: 704, column: 20, scope: !5442)
!5457 = !DILocation(line: 704, column: 7, scope: !5442)
!5458 = !DILocation(line: 704, column: 26, scope: !5442)
!5459 = !DILocation(line: 704, column: 23, scope: !5442)
!5460 = !DILocation(line: 705, column: 4, scope: !5442)
!5461 = !DILocation(line: 705, column: 22, scope: !5442)
!5462 = !DILocation(line: 705, column: 7, scope: !5442)
!5463 = !DILocation(line: 706, column: 4, scope: !5442)
!5464 = !DILocation(line: 706, column: 7, scope: !5442)
!5465 = !DILocation(line: 706, column: 12, scope: !5442)
!5466 = !DILocation(line: 706, column: 9, scope: !5442)
!5467 = !DILocation(line: 708, column: 4, scope: !5442)
!5468 = !DILocation(line: 708, column: 27, scope: !5442)
!5469 = !DILocation(line: 708, column: 9, scope: !5442)
!5470 = !DILocation(line: 708, column: 31, scope: !5442)
!5471 = !DILocation(line: 708, column: 37, scope: !5442)
!5472 = !DILocation(line: 709, column: 4, scope: !5442)
!5473 = !DILocation(line: 709, column: 7, scope: !5442)
!5474 = !DILocation(line: 709, column: 10, scope: !5442)
!5475 = !DILocation(line: 709, column: 21, scope: !5442)
!5476 = !DILocation(line: 709, column: 18, scope: !5442)
!5477 = !DILocation(line: 710, column: 4, scope: !5442)
!5478 = !DILocation(line: 710, column: 7, scope: !5442)
!5479 = !DILocation(line: 710, column: 12, scope: !5442)
!5480 = !DILocation(line: 710, column: 9, scope: !5442)
!5481 = !DILocation(line: 710, column: 28, scope: !5442)
!5482 = !DILocation(line: 710, column: 31, scope: !5442)
!5483 = !DILocation(line: 710, column: 36, scope: !5442)
!5484 = !DILocation(line: 710, column: 33, scope: !5442)
!5485 = !DILocation(line: 713, column: 4, scope: !5442)
!5486 = !DILocation(line: 713, column: 9, scope: !5442)
!5487 = !DILocation(line: 714, column: 8, scope: !5442)
!5488 = !DILocation(line: 714, column: 12, scope: !5442)
!5489 = !DILocation(line: 715, column: 21, scope: !5442)
!5490 = !DILocation(line: 715, column: 7, scope: !5442)
!5491 = !DILocation(line: 715, column: 47, scope: !5442)
!5492 = !DILocation(line: 715, column: 35, scope: !5442)
!5493 = !DILocation(line: 0, scope: !5442)
!5494 = !DILocation(line: 703, column: 10, scope: !5442)
!5495 = !DILocation(line: 703, column: 3, scope: !5442)
!5496 = !DILocation(line: 716, column: 1, scope: !5442)
!5497 = distinct !DISubprogram(name: "rtl_merge_blocks", scope: !3, file: !3, line: 584, type: !2186, scopeLine: 585, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!5498 = !DILocalVariable(name: "a", arg: 1, scope: !5497, file: !3, line: 584, type: !1392)
!5499 = !DILocation(line: 584, column: 31, scope: !5497)
!5500 = !DILocalVariable(name: "b", arg: 2, scope: !5497, file: !3, line: 584, type: !1392)
!5501 = !DILocation(line: 584, column: 46, scope: !5497)
!5502 = !DILocalVariable(name: "b_head", scope: !5497, file: !3, line: 586, type: !889)
!5503 = !DILocation(line: 586, column: 7, scope: !5497)
!5504 = !DILocation(line: 586, column: 16, scope: !5497)
!5505 = !DILocalVariable(name: "b_end", scope: !5497, file: !3, line: 586, type: !889)
!5506 = !DILocation(line: 586, column: 29, scope: !5497)
!5507 = !DILocation(line: 586, column: 37, scope: !5497)
!5508 = !DILocalVariable(name: "a_end", scope: !5497, file: !3, line: 586, type: !889)
!5509 = !DILocation(line: 586, column: 49, scope: !5497)
!5510 = !DILocation(line: 586, column: 57, scope: !5497)
!5511 = !DILocalVariable(name: "del_first", scope: !5497, file: !3, line: 587, type: !889)
!5512 = !DILocation(line: 587, column: 7, scope: !5497)
!5513 = !DILocalVariable(name: "del_last", scope: !5497, file: !3, line: 587, type: !889)
!5514 = !DILocation(line: 587, column: 29, scope: !5497)
!5515 = !DILocalVariable(name: "b_debug_start", scope: !5497, file: !3, line: 588, type: !889)
!5516 = !DILocation(line: 588, column: 7, scope: !5497)
!5517 = !DILocation(line: 588, column: 23, scope: !5497)
!5518 = !DILocalVariable(name: "b_debug_end", scope: !5497, file: !3, line: 588, type: !889)
!5519 = !DILocation(line: 588, column: 30, scope: !5497)
!5520 = !DILocation(line: 588, column: 44, scope: !5497)
!5521 = !DILocalVariable(name: "b_empty", scope: !5497, file: !3, line: 589, type: !804)
!5522 = !DILocation(line: 589, column: 7, scope: !5497)
!5523 = !DILocation(line: 591, column: 7, scope: !5524)
!5524 = distinct !DILexicalBlock(scope: !5497, file: !3, line: 591, column: 7)
!5525 = !DILocation(line: 591, column: 7, scope: !5497)
!5526 = !DILocation(line: 592, column: 14, scope: !5524)
!5527 = !DILocation(line: 592, column: 61, scope: !5524)
!5528 = !DILocation(line: 592, column: 64, scope: !5524)
!5529 = !DILocation(line: 592, column: 71, scope: !5524)
!5530 = !DILocation(line: 592, column: 74, scope: !5524)
!5531 = !DILocation(line: 592, column: 5, scope: !5524)
!5532 = !DILocation(line: 594, column: 3, scope: !5497)
!5533 = !DILocation(line: 594, column: 10, scope: !5497)
!5534 = !DILocation(line: 595, column: 13, scope: !5497)
!5535 = !DILocation(line: 595, column: 11, scope: !5497)
!5536 = distinct !{!5536, !5532, !5534}
!5537 = !DILocation(line: 598, column: 7, scope: !5538)
!5538 = distinct !DILexicalBlock(scope: !5497, file: !3, line: 598, column: 7)
!5539 = !DILocation(line: 598, column: 7, scope: !5497)
!5540 = !DILocation(line: 602, column: 11, scope: !5541)
!5541 = distinct !DILexicalBlock(scope: !5542, file: !3, line: 602, column: 11)
!5542 = distinct !DILexicalBlock(scope: !5538, file: !3, line: 599, column: 5)
!5543 = !DILocation(line: 602, column: 21, scope: !5541)
!5544 = !DILocation(line: 602, column: 18, scope: !5541)
!5545 = !DILocation(line: 602, column: 11, scope: !5542)
!5546 = !DILocation(line: 603, column: 10, scope: !5541)
!5547 = !DILocation(line: 603, column: 2, scope: !5541)
!5548 = !DILocation(line: 605, column: 30, scope: !5542)
!5549 = !DILocation(line: 605, column: 28, scope: !5542)
!5550 = !DILocation(line: 605, column: 17, scope: !5542)
!5551 = !DILocation(line: 606, column: 16, scope: !5542)
!5552 = !DILocation(line: 606, column: 14, scope: !5542)
!5553 = !DILocation(line: 607, column: 5, scope: !5542)
!5554 = !DILocation(line: 611, column: 7, scope: !5555)
!5555 = distinct !DILexicalBlock(scope: !5497, file: !3, line: 611, column: 7)
!5556 = !DILocation(line: 611, column: 7, scope: !5497)
!5557 = !DILocation(line: 613, column: 11, scope: !5558)
!5558 = distinct !DILexicalBlock(scope: !5559, file: !3, line: 613, column: 11)
!5559 = distinct !DILexicalBlock(scope: !5555, file: !3, line: 612, column: 5)
!5560 = !DILocation(line: 613, column: 21, scope: !5558)
!5561 = !DILocation(line: 613, column: 18, scope: !5558)
!5562 = !DILocation(line: 613, column: 11, scope: !5559)
!5563 = !DILocation(line: 614, column: 10, scope: !5558)
!5564 = !DILocation(line: 614, column: 2, scope: !5558)
!5565 = !DILocation(line: 615, column: 13, scope: !5566)
!5566 = distinct !DILexicalBlock(scope: !5559, file: !3, line: 615, column: 11)
!5567 = !DILocation(line: 615, column: 11, scope: !5559)
!5568 = !DILocation(line: 616, column: 14, scope: !5566)
!5569 = !DILocation(line: 616, column: 12, scope: !5566)
!5570 = !DILocation(line: 616, column: 2, scope: !5566)
!5571 = !DILocation(line: 618, column: 18, scope: !5559)
!5572 = !DILocation(line: 618, column: 16, scope: !5559)
!5573 = !DILocation(line: 619, column: 16, scope: !5559)
!5574 = !DILocation(line: 619, column: 14, scope: !5559)
!5575 = !DILocation(line: 620, column: 5, scope: !5559)
!5576 = !DILocation(line: 623, column: 7, scope: !5577)
!5577 = distinct !DILexicalBlock(scope: !5497, file: !3, line: 623, column: 7)
!5578 = !DILocation(line: 623, column: 7, scope: !5497)
!5579 = !DILocalVariable(name: "prev", scope: !5580, file: !3, line: 625, type: !889)
!5580 = distinct !DILexicalBlock(scope: !5577, file: !3, line: 624, column: 5)
!5581 = !DILocation(line: 625, column: 11, scope: !5580)
!5582 = !DILocation(line: 627, column: 19, scope: !5583)
!5583 = distinct !DILexicalBlock(scope: !5580, file: !3, line: 627, column: 7)
!5584 = !DILocation(line: 627, column: 17, scope: !5583)
!5585 = !DILocation(line: 627, column: 12, scope: !5583)
!5586 = !DILocation(line: 628, column: 7, scope: !5587)
!5587 = distinct !DILexicalBlock(scope: !5588, file: !3, line: 628, column: 6)
!5588 = distinct !DILexicalBlock(scope: !5583, file: !3, line: 627, column: 7)
!5589 = !DILocation(line: 629, column: 6, scope: !5587)
!5590 = !DILocation(line: 629, column: 9, scope: !5587)
!5591 = !DILocation(line: 630, column: 6, scope: !5587)
!5592 = !DILocation(line: 630, column: 9, scope: !5587)
!5593 = !DILocation(line: 630, column: 17, scope: !5587)
!5594 = !DILocation(line: 630, column: 14, scope: !5587)
!5595 = !DILocation(line: 628, column: 6, scope: !5588)
!5596 = !DILocation(line: 631, column: 4, scope: !5587)
!5597 = !DILocation(line: 627, column: 47, scope: !5588)
!5598 = !DILocation(line: 627, column: 45, scope: !5588)
!5599 = !DILocation(line: 627, column: 7, scope: !5588)
!5600 = distinct !{!5600, !5601, !5602}
!5601 = !DILocation(line: 627, column: 7, scope: !5583)
!5602 = !DILocation(line: 631, column: 4, scope: !5583)
!5603 = !DILocation(line: 633, column: 19, scope: !5580)
!5604 = !DILocation(line: 633, column: 17, scope: !5580)
!5605 = !DILocation(line: 649, column: 15, scope: !5580)
!5606 = !DILocation(line: 649, column: 13, scope: !5580)
!5607 = !DILocation(line: 650, column: 5, scope: !5580)
!5608 = !DILocation(line: 651, column: 12, scope: !5609)
!5609 = distinct !DILexicalBlock(scope: !5577, file: !3, line: 651, column: 12)
!5610 = !DILocation(line: 651, column: 12, scope: !5577)
!5611 = !DILocation(line: 652, column: 17, scope: !5609)
!5612 = !DILocation(line: 652, column: 15, scope: !5609)
!5613 = !DILocation(line: 652, column: 5, scope: !5609)
!5614 = !DILocation(line: 656, column: 3, scope: !5497)
!5615 = !DILocation(line: 656, column: 15, scope: !5497)
!5616 = !DILocation(line: 657, column: 22, scope: !5497)
!5617 = !DILocation(line: 657, column: 33, scope: !5497)
!5618 = !DILocation(line: 657, column: 3, scope: !5497)
!5619 = !DILocation(line: 660, column: 8, scope: !5620)
!5620 = distinct !DILexicalBlock(scope: !5497, file: !3, line: 660, column: 7)
!5621 = !DILocation(line: 660, column: 7, scope: !5497)
!5622 = !DILocation(line: 662, column: 33, scope: !5623)
!5623 = distinct !DILexicalBlock(scope: !5620, file: !3, line: 661, column: 5)
!5624 = !DILocation(line: 662, column: 40, scope: !5623)
!5625 = !DILocation(line: 662, column: 53, scope: !5623)
!5626 = !DILocation(line: 662, column: 7, scope: !5623)
!5627 = !DILocation(line: 664, column: 15, scope: !5623)
!5628 = !DILocation(line: 664, column: 13, scope: !5623)
!5629 = !DILocation(line: 665, column: 5, scope: !5623)
!5630 = !DILocation(line: 666, column: 12, scope: !5631)
!5631 = distinct !DILexicalBlock(scope: !5620, file: !3, line: 666, column: 12)
!5632 = !DILocation(line: 666, column: 21, scope: !5631)
!5633 = !DILocation(line: 666, column: 18, scope: !5631)
!5634 = !DILocation(line: 666, column: 12, scope: !5620)
!5635 = !DILocation(line: 672, column: 11, scope: !5636)
!5636 = distinct !DILexicalBlock(scope: !5637, file: !3, line: 672, column: 11)
!5637 = distinct !DILexicalBlock(scope: !5631, file: !3, line: 667, column: 5)
!5638 = !DILocation(line: 672, column: 32, scope: !5636)
!5639 = !DILocation(line: 672, column: 29, scope: !5636)
!5640 = !DILocation(line: 672, column: 11, scope: !5637)
!5641 = !DILocation(line: 673, column: 22, scope: !5636)
!5642 = !DILocation(line: 673, column: 41, scope: !5636)
!5643 = !DILocation(line: 674, column: 8, scope: !5636)
!5644 = !DILocation(line: 673, column: 2, scope: !5636)
!5645 = !DILocation(line: 675, column: 33, scope: !5637)
!5646 = !DILocation(line: 675, column: 48, scope: !5637)
!5647 = !DILocation(line: 675, column: 61, scope: !5637)
!5648 = !DILocation(line: 675, column: 7, scope: !5637)
!5649 = !DILocation(line: 676, column: 15, scope: !5637)
!5650 = !DILocation(line: 676, column: 13, scope: !5637)
!5651 = !DILocation(line: 677, column: 5, scope: !5637)
!5652 = !DILocation(line: 679, column: 17, scope: !5497)
!5653 = !DILocation(line: 679, column: 20, scope: !5497)
!5654 = !DILocation(line: 679, column: 3, scope: !5497)
!5655 = !DILocation(line: 680, column: 16, scope: !5497)
!5656 = !DILocation(line: 680, column: 3, scope: !5497)
!5657 = !DILocation(line: 680, column: 14, scope: !5497)
!5658 = !DILocation(line: 681, column: 1, scope: !5497)
!5659 = distinct !DISubprogram(name: "rtl_split_edge", scope: !3, file: !3, line: 1356, type: !2209, scopeLine: 1357, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!5660 = !DILocalVariable(name: "edge_in", arg: 1, scope: !5659, file: !3, line: 1356, type: !1409)
!5661 = !DILocation(line: 1356, column: 22, scope: !5659)
!5662 = !DILocalVariable(name: "bb", scope: !5659, file: !3, line: 1358, type: !1392)
!5663 = !DILocation(line: 1358, column: 15, scope: !5659)
!5664 = !DILocalVariable(name: "before", scope: !5659, file: !3, line: 1359, type: !889)
!5665 = !DILocation(line: 1359, column: 7, scope: !5659)
!5666 = !DILocation(line: 1362, column: 3, scope: !5659)
!5667 = !DILocation(line: 1366, column: 8, scope: !5668)
!5668 = distinct !DILexicalBlock(scope: !5659, file: !3, line: 1366, column: 7)
!5669 = !DILocation(line: 1366, column: 17, scope: !5668)
!5670 = !DILocation(line: 1366, column: 23, scope: !5668)
!5671 = !DILocation(line: 1366, column: 40, scope: !5668)
!5672 = !DILocation(line: 1366, column: 7, scope: !5659)
!5673 = !DILocalVariable(name: "e", scope: !5674, file: !3, line: 1368, type: !1409)
!5674 = distinct !DILexicalBlock(scope: !5668, file: !3, line: 1367, column: 5)
!5675 = !DILocation(line: 1368, column: 12, scope: !5674)
!5676 = !DILocalVariable(name: "ei", scope: !5674, file: !3, line: 1369, type: !2483)
!5677 = !DILocation(line: 1369, column: 21, scope: !5674)
!5678 = !DILocation(line: 1371, column: 7, scope: !5679)
!5679 = distinct !DILexicalBlock(scope: !5674, file: !3, line: 1371, column: 7)
!5680 = !DILocation(line: 1371, column: 7, scope: !5681)
!5681 = distinct !DILexicalBlock(scope: !5679, file: !3, line: 1371, column: 7)
!5682 = !DILocation(line: 1372, column: 6, scope: !5683)
!5683 = distinct !DILexicalBlock(scope: !5681, file: !3, line: 1372, column: 6)
!5684 = !DILocation(line: 1372, column: 9, scope: !5683)
!5685 = !DILocation(line: 1372, column: 15, scope: !5683)
!5686 = !DILocation(line: 1372, column: 6, scope: !5681)
!5687 = !DILocation(line: 1373, column: 4, scope: !5683)
!5688 = !DILocation(line: 1372, column: 17, scope: !5683)
!5689 = distinct !{!5689, !5678, !5690}
!5690 = !DILocation(line: 1373, column: 4, scope: !5679)
!5691 = !DILocation(line: 1375, column: 11, scope: !5692)
!5692 = distinct !DILexicalBlock(scope: !5674, file: !3, line: 1375, column: 11)
!5693 = !DILocation(line: 1375, column: 11, scope: !5674)
!5694 = !DILocation(line: 1376, column: 21, scope: !5692)
!5695 = !DILocation(line: 1376, column: 2, scope: !5692)
!5696 = !DILocation(line: 1377, column: 5, scope: !5674)
!5697 = !DILocation(line: 1380, column: 7, scope: !5698)
!5698 = distinct !DILexicalBlock(scope: !5659, file: !3, line: 1380, column: 7)
!5699 = !DILocation(line: 1380, column: 16, scope: !5698)
!5700 = !DILocation(line: 1380, column: 24, scope: !5698)
!5701 = !DILocation(line: 1380, column: 21, scope: !5698)
!5702 = !DILocation(line: 1380, column: 7, scope: !5659)
!5703 = !DILocation(line: 1381, column: 14, scope: !5698)
!5704 = !DILocation(line: 1381, column: 12, scope: !5698)
!5705 = !DILocation(line: 1381, column: 5, scope: !5698)
!5706 = !DILocation(line: 1383, column: 12, scope: !5698)
!5707 = !DILocation(line: 1387, column: 7, scope: !5708)
!5708 = distinct !DILexicalBlock(scope: !5659, file: !3, line: 1387, column: 7)
!5709 = !DILocation(line: 1387, column: 16, scope: !5708)
!5710 = !DILocation(line: 1387, column: 22, scope: !5708)
!5711 = !DILocation(line: 1387, column: 38, scope: !5708)
!5712 = !DILocation(line: 1387, column: 41, scope: !5708)
!5713 = !DILocation(line: 1387, column: 50, scope: !5708)
!5714 = !DILocation(line: 1387, column: 58, scope: !5708)
!5715 = !DILocation(line: 1387, column: 55, scope: !5708)
!5716 = !DILocation(line: 1387, column: 7, scope: !5659)
!5717 = !DILocation(line: 1389, column: 16, scope: !5718)
!5718 = distinct !DILexicalBlock(scope: !5708, file: !3, line: 1388, column: 5)
!5719 = !DILocation(line: 1389, column: 14, scope: !5718)
!5720 = !DILocation(line: 1390, column: 32, scope: !5718)
!5721 = !DILocation(line: 1390, column: 46, scope: !5718)
!5722 = !DILocation(line: 1390, column: 55, scope: !5718)
!5723 = !DILocation(line: 1390, column: 12, scope: !5718)
!5724 = !DILocation(line: 1390, column: 10, scope: !5718)
!5725 = !DILocation(line: 1391, column: 7, scope: !5718)
!5726 = !DILocalVariable(name: "bb_", scope: !5727, file: !3, line: 1391, type: !1392)
!5727 = distinct !DILexicalBlock(scope: !5718, file: !3, line: 1391, column: 7)
!5728 = !DILocation(line: 1391, column: 7, scope: !5727)
!5729 = !DILocation(line: 1392, column: 5, scope: !5718)
!5730 = !DILocation(line: 1395, column: 32, scope: !5731)
!5731 = distinct !DILexicalBlock(scope: !5708, file: !3, line: 1394, column: 5)
!5732 = !DILocation(line: 1395, column: 46, scope: !5731)
!5733 = !DILocation(line: 1395, column: 55, scope: !5731)
!5734 = !DILocation(line: 1395, column: 61, scope: !5731)
!5735 = !DILocation(line: 1395, column: 12, scope: !5731)
!5736 = !DILocation(line: 1395, column: 10, scope: !5731)
!5737 = !DILocation(line: 1397, column: 7, scope: !5731)
!5738 = !DILocalVariable(name: "bb_", scope: !5739, file: !3, line: 1397, type: !1392)
!5739 = distinct !DILexicalBlock(scope: !5731, file: !3, line: 1397, column: 7)
!5740 = !DILocation(line: 1397, column: 7, scope: !5739)
!5741 = !DILocation(line: 1400, column: 26, scope: !5659)
!5742 = !DILocation(line: 1400, column: 30, scope: !5659)
!5743 = !DILocation(line: 1400, column: 39, scope: !5659)
!5744 = !DILocation(line: 1400, column: 3, scope: !5659)
!5745 = !DILocation(line: 1404, column: 8, scope: !5746)
!5746 = distinct !DILexicalBlock(scope: !5659, file: !3, line: 1404, column: 7)
!5747 = !DILocation(line: 1404, column: 17, scope: !5746)
!5748 = !DILocation(line: 1404, column: 23, scope: !5746)
!5749 = !DILocation(line: 1404, column: 40, scope: !5746)
!5750 = !DILocation(line: 1404, column: 7, scope: !5659)
!5751 = !DILocalVariable(name: "redirected", scope: !5752, file: !3, line: 1406, type: !1409)
!5752 = distinct !DILexicalBlock(scope: !5746, file: !3, line: 1405, column: 5)
!5753 = !DILocation(line: 1406, column: 12, scope: !5752)
!5754 = !DILocation(line: 1406, column: 51, scope: !5752)
!5755 = !DILocation(line: 1406, column: 60, scope: !5752)
!5756 = !DILocation(line: 1406, column: 25, scope: !5752)
!5757 = !DILocation(line: 1407, column: 7, scope: !5752)
!5758 = !DILocation(line: 1408, column: 5, scope: !5752)
!5759 = !DILocation(line: 1410, column: 25, scope: !5746)
!5760 = !DILocation(line: 1410, column: 34, scope: !5746)
!5761 = !DILocation(line: 1410, column: 5, scope: !5746)
!5762 = !DILocation(line: 1412, column: 10, scope: !5659)
!5763 = !DILocation(line: 1412, column: 3, scope: !5659)
!5764 = distinct !DISubprogram(name: "rtl_make_forwarder_block", scope: !3, file: !3, line: 2824, type: !2213, scopeLine: 2825, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!5765 = !DILocalVariable(name: "fallthru", arg: 1, scope: !5764, file: !3, line: 2824, type: !1409)
!5766 = !DILocation(line: 2824, column: 32, scope: !5764)
!5767 = !DILocation(line: 2826, column: 1, scope: !5764)
!5768 = distinct !DISubprogram(name: "rtl_tidy_fallthru_edge", scope: !3, file: !3, line: 1294, type: !2213, scopeLine: 1295, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!5769 = !DILocalVariable(name: "e", arg: 1, scope: !5768, file: !3, line: 1294, type: !1409)
!5770 = !DILocation(line: 1294, column: 30, scope: !5768)
!5771 = !DILocalVariable(name: "q", scope: !5768, file: !3, line: 1296, type: !889)
!5772 = !DILocation(line: 1296, column: 7, scope: !5768)
!5773 = !DILocalVariable(name: "b", scope: !5768, file: !3, line: 1297, type: !1392)
!5774 = !DILocation(line: 1297, column: 15, scope: !5768)
!5775 = !DILocation(line: 1297, column: 19, scope: !5768)
!5776 = !DILocation(line: 1297, column: 22, scope: !5768)
!5777 = !DILocalVariable(name: "c", scope: !5768, file: !3, line: 1297, type: !1392)
!5778 = !DILocation(line: 1297, column: 27, scope: !5768)
!5779 = !DILocation(line: 1297, column: 31, scope: !5768)
!5780 = !DILocation(line: 1297, column: 34, scope: !5768)
!5781 = !DILocation(line: 1309, column: 12, scope: !5782)
!5782 = distinct !DILexicalBlock(scope: !5768, file: !3, line: 1309, column: 3)
!5783 = !DILocation(line: 1309, column: 10, scope: !5782)
!5784 = !DILocation(line: 1309, column: 8, scope: !5782)
!5785 = !DILocation(line: 1309, column: 36, scope: !5786)
!5786 = distinct !DILexicalBlock(scope: !5782, file: !3, line: 1309, column: 3)
!5787 = !DILocation(line: 1309, column: 41, scope: !5786)
!5788 = !DILocation(line: 1309, column: 38, scope: !5786)
!5789 = !DILocation(line: 1309, column: 3, scope: !5782)
!5790 = !DILocation(line: 1310, column: 9, scope: !5791)
!5791 = distinct !DILexicalBlock(scope: !5786, file: !3, line: 1310, column: 9)
!5792 = !DILocation(line: 1310, column: 9, scope: !5786)
!5793 = !DILocation(line: 1311, column: 7, scope: !5791)
!5794 = !DILocation(line: 1309, column: 58, scope: !5786)
!5795 = !DILocation(line: 1309, column: 56, scope: !5786)
!5796 = !DILocation(line: 1309, column: 3, scope: !5786)
!5797 = distinct !{!5797, !5789, !5798}
!5798 = !DILocation(line: 1311, column: 7, scope: !5782)
!5799 = !DILocation(line: 1316, column: 7, scope: !5768)
!5800 = !DILocation(line: 1316, column: 5, scope: !5768)
!5801 = !DILocation(line: 1317, column: 7, scope: !5802)
!5802 = distinct !DILexicalBlock(scope: !5768, file: !3, line: 1317, column: 7)
!5803 = !DILocation(line: 1318, column: 7, scope: !5802)
!5804 = !DILocation(line: 1318, column: 22, scope: !5802)
!5805 = !DILocation(line: 1318, column: 10, scope: !5802)
!5806 = !DILocation(line: 1319, column: 7, scope: !5802)
!5807 = !DILocation(line: 1319, column: 29, scope: !5802)
!5808 = !DILocation(line: 1319, column: 11, scope: !5802)
!5809 = !DILocation(line: 1320, column: 4, scope: !5802)
!5810 = !DILocation(line: 1320, column: 22, scope: !5802)
!5811 = !DILocation(line: 1320, column: 7, scope: !5802)
!5812 = !DILocation(line: 1317, column: 7, scope: !5768)
!5813 = !DILocation(line: 1329, column: 11, scope: !5814)
!5814 = distinct !DILexicalBlock(scope: !5802, file: !3, line: 1321, column: 5)
!5815 = !DILocation(line: 1329, column: 9, scope: !5814)
!5816 = !DILocation(line: 1330, column: 5, scope: !5814)
!5817 = !DILocation(line: 1333, column: 7, scope: !5818)
!5818 = distinct !DILexicalBlock(scope: !5768, file: !3, line: 1333, column: 7)
!5819 = !DILocation(line: 1333, column: 12, scope: !5818)
!5820 = !DILocation(line: 1333, column: 9, scope: !5818)
!5821 = !DILocation(line: 1333, column: 7, scope: !5768)
!5822 = !DILocation(line: 1334, column: 24, scope: !5818)
!5823 = !DILocation(line: 1334, column: 39, scope: !5818)
!5824 = !DILocation(line: 1334, column: 5, scope: !5818)
!5825 = !DILocation(line: 1336, column: 3, scope: !5768)
!5826 = !DILocation(line: 1336, column: 6, scope: !5768)
!5827 = !DILocation(line: 1336, column: 12, scope: !5768)
!5828 = !DILocation(line: 1337, column: 1, scope: !5768)
!5829 = distinct !DISubprogram(name: "rtl_block_ends_with_call_p", scope: !3, file: !3, line: 2832, type: !2218, scopeLine: 2833, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!5830 = !DILocalVariable(name: "bb", arg: 1, scope: !5829, file: !3, line: 2832, type: !1392)
!5831 = !DILocation(line: 2832, column: 41, scope: !5829)
!5832 = !DILocalVariable(name: "insn", scope: !5829, file: !3, line: 2834, type: !889)
!5833 = !DILocation(line: 2834, column: 7, scope: !5829)
!5834 = !DILocation(line: 2834, column: 14, scope: !5829)
!5835 = !DILocation(line: 2836, column: 3, scope: !5829)
!5836 = !DILocation(line: 2836, column: 11, scope: !5829)
!5837 = !DILocation(line: 2837, column: 3, scope: !5829)
!5838 = !DILocation(line: 2837, column: 6, scope: !5829)
!5839 = !DILocation(line: 2837, column: 14, scope: !5829)
!5840 = !DILocation(line: 2837, column: 11, scope: !5829)
!5841 = !DILocation(line: 2838, column: 3, scope: !5829)
!5842 = !DILocation(line: 2838, column: 25, scope: !5829)
!5843 = !DILocation(line: 2838, column: 7, scope: !5829)
!5844 = !DILocation(line: 2839, column: 7, scope: !5829)
!5845 = !DILocation(line: 2839, column: 10, scope: !5829)
!5846 = !DILocation(line: 2840, column: 7, scope: !5829)
!5847 = !DILocation(line: 2840, column: 10, scope: !5829)
!5848 = !DILocation(line: 0, scope: !5829)
!5849 = !DILocation(line: 2841, column: 12, scope: !5829)
!5850 = !DILocation(line: 2841, column: 10, scope: !5829)
!5851 = distinct !{!5851, !5835, !5849}
!5852 = !DILocation(line: 2842, column: 11, scope: !5829)
!5853 = !DILocation(line: 2842, column: 10, scope: !5829)
!5854 = !DILocation(line: 2842, column: 3, scope: !5829)
!5855 = distinct !DISubprogram(name: "rtl_block_ends_with_condjump_p", scope: !3, file: !3, line: 2848, type: !2201, scopeLine: 2849, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!5856 = !DILocalVariable(name: "bb", arg: 1, scope: !5855, file: !3, line: 2848, type: !2196)
!5857 = !DILocation(line: 2848, column: 51, scope: !5855)
!5858 = !DILocation(line: 2850, column: 26, scope: !5855)
!5859 = !DILocation(line: 2850, column: 10, scope: !5855)
!5860 = !DILocation(line: 2850, column: 3, scope: !5855)
!5861 = distinct !DISubprogram(name: "rtl_flow_call_edges_add", scope: !3, file: !3, line: 2885, type: !2223, scopeLine: 2886, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!5862 = !DILocalVariable(name: "blocks", arg: 1, scope: !5861, file: !3, line: 2885, type: !2225)
!5863 = !DILocation(line: 2885, column: 34, scope: !5861)
!5864 = !DILocalVariable(name: "i", scope: !5861, file: !3, line: 2887, type: !804)
!5865 = !DILocation(line: 2887, column: 7, scope: !5861)
!5866 = !DILocalVariable(name: "blocks_split", scope: !5861, file: !3, line: 2888, type: !804)
!5867 = !DILocation(line: 2888, column: 7, scope: !5861)
!5868 = !DILocalVariable(name: "last_bb", scope: !5861, file: !3, line: 2889, type: !804)
!5869 = !DILocation(line: 2889, column: 7, scope: !5861)
!5870 = !DILocation(line: 2889, column: 17, scope: !5861)
!5871 = !DILocalVariable(name: "check_last_block", scope: !5861, file: !3, line: 2890, type: !1088)
!5872 = !DILocation(line: 2890, column: 8, scope: !5861)
!5873 = !DILocation(line: 2892, column: 7, scope: !5874)
!5874 = distinct !DILexicalBlock(scope: !5861, file: !3, line: 2892, column: 7)
!5875 = !DILocation(line: 2892, column: 22, scope: !5874)
!5876 = !DILocation(line: 2892, column: 7, scope: !5861)
!5877 = !DILocation(line: 2893, column: 5, scope: !5874)
!5878 = !DILocation(line: 2895, column: 9, scope: !5879)
!5879 = distinct !DILexicalBlock(scope: !5861, file: !3, line: 2895, column: 7)
!5880 = !DILocation(line: 2895, column: 7, scope: !5861)
!5881 = !DILocation(line: 2896, column: 22, scope: !5879)
!5882 = !DILocation(line: 2896, column: 5, scope: !5879)
!5883 = !DILocation(line: 2898, column: 24, scope: !5879)
!5884 = !DILocation(line: 2898, column: 22, scope: !5879)
!5885 = !DILocation(line: 2912, column: 7, scope: !5886)
!5886 = distinct !DILexicalBlock(scope: !5861, file: !3, line: 2912, column: 7)
!5887 = !DILocation(line: 2912, column: 7, scope: !5861)
!5888 = !DILocalVariable(name: "bb", scope: !5889, file: !3, line: 2914, type: !1392)
!5889 = distinct !DILexicalBlock(scope: !5886, file: !3, line: 2913, column: 5)
!5890 = !DILocation(line: 2914, column: 19, scope: !5889)
!5891 = !DILocation(line: 2914, column: 24, scope: !5889)
!5892 = !DILocation(line: 2914, column: 40, scope: !5889)
!5893 = !DILocalVariable(name: "insn", scope: !5889, file: !3, line: 2915, type: !889)
!5894 = !DILocation(line: 2915, column: 11, scope: !5889)
!5895 = !DILocation(line: 2915, column: 18, scope: !5889)
!5896 = !DILocation(line: 2918, column: 7, scope: !5889)
!5897 = !DILocation(line: 2918, column: 14, scope: !5889)
!5898 = !DILocation(line: 2918, column: 22, scope: !5889)
!5899 = !DILocation(line: 2918, column: 19, scope: !5889)
!5900 = !DILocation(line: 2919, column: 7, scope: !5889)
!5901 = !DILocation(line: 2919, column: 28, scope: !5889)
!5902 = !DILocation(line: 2919, column: 10, scope: !5889)
!5903 = !DILocation(line: 0, scope: !5889)
!5904 = !DILocation(line: 2920, column: 9, scope: !5889)
!5905 = !DILocation(line: 2920, column: 7, scope: !5889)
!5906 = distinct !{!5906, !5896, !5904}
!5907 = !DILocation(line: 2922, column: 29, scope: !5908)
!5908 = distinct !DILexicalBlock(scope: !5889, file: !3, line: 2922, column: 11)
!5909 = !DILocation(line: 2922, column: 11, scope: !5908)
!5910 = !DILocation(line: 2922, column: 11, scope: !5889)
!5911 = !DILocalVariable(name: "e", scope: !5912, file: !3, line: 2924, type: !1409)
!5912 = distinct !DILexicalBlock(scope: !5908, file: !3, line: 2923, column: 2)
!5913 = !DILocation(line: 2924, column: 9, scope: !5912)
!5914 = !DILocation(line: 2926, column: 19, scope: !5912)
!5915 = !DILocation(line: 2926, column: 23, scope: !5912)
!5916 = !DILocation(line: 2926, column: 8, scope: !5912)
!5917 = !DILocation(line: 2926, column: 6, scope: !5912)
!5918 = !DILocation(line: 2927, column: 8, scope: !5919)
!5919 = distinct !DILexicalBlock(scope: !5912, file: !3, line: 2927, column: 8)
!5920 = !DILocation(line: 2927, column: 8, scope: !5912)
!5921 = !DILocation(line: 2929, column: 38, scope: !5922)
!5922 = distinct !DILexicalBlock(scope: !5919, file: !3, line: 2928, column: 6)
!5923 = !DILocation(line: 2929, column: 29, scope: !5922)
!5924 = !DILocation(line: 2929, column: 51, scope: !5922)
!5925 = !DILocation(line: 2929, column: 8, scope: !5922)
!5926 = !DILocation(line: 2930, column: 8, scope: !5922)
!5927 = !DILocation(line: 2931, column: 6, scope: !5922)
!5928 = !DILocation(line: 2932, column: 2, scope: !5912)
!5929 = !DILocation(line: 2933, column: 5, scope: !5889)
!5930 = !DILocation(line: 2939, column: 10, scope: !5931)
!5931 = distinct !DILexicalBlock(scope: !5861, file: !3, line: 2939, column: 3)
!5932 = !DILocation(line: 2939, column: 8, scope: !5931)
!5933 = !DILocation(line: 2939, column: 30, scope: !5934)
!5934 = distinct !DILexicalBlock(scope: !5931, file: !3, line: 2939, column: 3)
!5935 = !DILocation(line: 2939, column: 34, scope: !5934)
!5936 = !DILocation(line: 2939, column: 32, scope: !5934)
!5937 = !DILocation(line: 2939, column: 3, scope: !5931)
!5938 = !DILocalVariable(name: "bb", scope: !5939, file: !3, line: 2941, type: !1392)
!5939 = distinct !DILexicalBlock(scope: !5934, file: !3, line: 2940, column: 5)
!5940 = !DILocation(line: 2941, column: 19, scope: !5939)
!5941 = !DILocation(line: 2941, column: 24, scope: !5939)
!5942 = !DILocalVariable(name: "insn", scope: !5939, file: !3, line: 2942, type: !889)
!5943 = !DILocation(line: 2942, column: 11, scope: !5939)
!5944 = !DILocalVariable(name: "prev_insn", scope: !5939, file: !3, line: 2943, type: !889)
!5945 = !DILocation(line: 2943, column: 11, scope: !5939)
!5946 = !DILocation(line: 2945, column: 12, scope: !5947)
!5947 = distinct !DILexicalBlock(scope: !5939, file: !3, line: 2945, column: 11)
!5948 = !DILocation(line: 2945, column: 11, scope: !5939)
!5949 = !DILocation(line: 2946, column: 2, scope: !5947)
!5950 = !DILocation(line: 2948, column: 11, scope: !5951)
!5951 = distinct !DILexicalBlock(scope: !5939, file: !3, line: 2948, column: 11)
!5952 = !DILocation(line: 2948, column: 18, scope: !5951)
!5953 = !DILocation(line: 2948, column: 22, scope: !5951)
!5954 = !DILocation(line: 2948, column: 11, scope: !5939)
!5955 = !DILocation(line: 2949, column: 2, scope: !5951)
!5956 = !DILocation(line: 2951, column: 19, scope: !5957)
!5957 = distinct !DILexicalBlock(scope: !5939, file: !3, line: 2951, column: 7)
!5958 = !DILocation(line: 2951, column: 17, scope: !5957)
!5959 = !DILocation(line: 2951, column: 12, scope: !5957)
!5960 = !DILocation(line: 2953, column: 16, scope: !5961)
!5961 = distinct !DILexicalBlock(scope: !5962, file: !3, line: 2952, column: 2)
!5962 = distinct !DILexicalBlock(scope: !5957, file: !3, line: 2951, column: 7)
!5963 = !DILocation(line: 2953, column: 14, scope: !5961)
!5964 = !DILocation(line: 2954, column: 26, scope: !5965)
!5965 = distinct !DILexicalBlock(scope: !5961, file: !3, line: 2954, column: 8)
!5966 = !DILocation(line: 2954, column: 8, scope: !5965)
!5967 = !DILocation(line: 2954, column: 8, scope: !5961)
!5968 = !DILocalVariable(name: "e", scope: !5969, file: !3, line: 2956, type: !1409)
!5969 = distinct !DILexicalBlock(scope: !5965, file: !3, line: 2955, column: 6)
!5970 = !DILocation(line: 2956, column: 13, scope: !5969)
!5971 = !DILocalVariable(name: "split_at_insn", scope: !5969, file: !3, line: 2957, type: !889)
!5972 = !DILocation(line: 2957, column: 12, scope: !5969)
!5973 = !DILocation(line: 2957, column: 28, scope: !5969)
!5974 = !DILocation(line: 2961, column: 12, scope: !5975)
!5975 = distinct !DILexicalBlock(scope: !5969, file: !3, line: 2961, column: 12)
!5976 = !DILocation(line: 2961, column: 12, scope: !5969)
!5977 = !DILocation(line: 2962, column: 3, scope: !5975)
!5978 = !DILocation(line: 2962, column: 10, scope: !5975)
!5979 = !DILocation(line: 2962, column: 27, scope: !5975)
!5980 = !DILocation(line: 2962, column: 24, scope: !5975)
!5981 = !DILocation(line: 2963, column: 10, scope: !5975)
!5982 = !DILocation(line: 2963, column: 31, scope: !5975)
!5983 = !DILocation(line: 2963, column: 13, scope: !5975)
!5984 = !DILocation(line: 0, scope: !5975)
!5985 = !DILocation(line: 2964, column: 21, scope: !5975)
!5986 = !DILocation(line: 2964, column: 19, scope: !5975)
!5987 = distinct !{!5987, !5977, !5985}
!5988 = !DILocation(line: 2981, column: 12, scope: !5989)
!5989 = distinct !DILexicalBlock(scope: !5969, file: !3, line: 2981, column: 12)
!5990 = !DILocation(line: 2981, column: 29, scope: !5989)
!5991 = !DILocation(line: 2981, column: 26, scope: !5989)
!5992 = !DILocation(line: 2981, column: 12, scope: !5969)
!5993 = !DILocation(line: 2983, column: 22, scope: !5994)
!5994 = distinct !DILexicalBlock(scope: !5989, file: !3, line: 2982, column: 3)
!5995 = !DILocation(line: 2983, column: 26, scope: !5994)
!5996 = !DILocation(line: 2983, column: 9, scope: !5994)
!5997 = !DILocation(line: 2983, column: 7, scope: !5994)
!5998 = !DILocation(line: 2984, column: 9, scope: !5999)
!5999 = distinct !DILexicalBlock(scope: !5994, file: !3, line: 2984, column: 9)
!6000 = !DILocation(line: 2984, column: 9, scope: !5994)
!6001 = !DILocation(line: 2985, column: 19, scope: !5999)
!6002 = !DILocation(line: 2985, column: 7, scope: !5999)
!6003 = !DILocation(line: 2986, column: 3, scope: !5994)
!6004 = !DILocation(line: 2988, column: 19, scope: !5969)
!6005 = !DILocation(line: 2988, column: 23, scope: !5969)
!6006 = !DILocation(line: 2988, column: 8, scope: !5969)
!6007 = !DILocation(line: 2989, column: 6, scope: !5969)
!6008 = !DILocation(line: 2991, column: 8, scope: !6009)
!6009 = distinct !DILexicalBlock(scope: !5961, file: !3, line: 2991, column: 8)
!6010 = !DILocation(line: 2991, column: 16, scope: !6009)
!6011 = !DILocation(line: 2991, column: 13, scope: !6009)
!6012 = !DILocation(line: 2991, column: 8, scope: !5961)
!6013 = !DILocation(line: 2992, column: 6, scope: !6009)
!6014 = !DILocation(line: 2993, column: 2, scope: !5961)
!6015 = !DILocation(line: 2951, column: 41, scope: !5962)
!6016 = !DILocation(line: 2951, column: 39, scope: !5962)
!6017 = !DILocation(line: 2951, column: 7, scope: !5962)
!6018 = distinct !{!6018, !6019, !6020}
!6019 = !DILocation(line: 2951, column: 7, scope: !5957)
!6020 = !DILocation(line: 2993, column: 2, scope: !5957)
!6021 = !DILocation(line: 2994, column: 5, scope: !5939)
!6022 = !DILocation(line: 2939, column: 44, scope: !5934)
!6023 = !DILocation(line: 2939, column: 3, scope: !5934)
!6024 = distinct !{!6024, !5937, !6025}
!6025 = !DILocation(line: 2994, column: 5, scope: !5931)
!6026 = !DILocation(line: 2996, column: 7, scope: !6027)
!6027 = distinct !DILexicalBlock(scope: !5861, file: !3, line: 2996, column: 7)
!6028 = !DILocation(line: 2996, column: 7, scope: !5861)
!6029 = !DILocation(line: 2997, column: 5, scope: !6027)
!6030 = !DILocation(line: 2999, column: 10, scope: !5861)
!6031 = !DILocation(line: 2999, column: 3, scope: !5861)
!6032 = !DILocation(line: 3000, column: 1, scope: !5861)
!6033 = distinct !DISubprogram(name: "rtl_verify_flow_info_1", scope: !3, file: !3, line: 1804, type: !2146, scopeLine: 1805, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!6034 = !DILocalVariable(name: "x", scope: !6033, file: !3, line: 1806, type: !889)
!6035 = !DILocation(line: 1806, column: 7, scope: !6033)
!6036 = !DILocalVariable(name: "err", scope: !6033, file: !3, line: 1807, type: !804)
!6037 = !DILocation(line: 1807, column: 7, scope: !6033)
!6038 = !DILocalVariable(name: "bb", scope: !6033, file: !3, line: 1808, type: !1392)
!6039 = !DILocation(line: 1808, column: 15, scope: !6033)
!6040 = !DILocation(line: 1811, column: 3, scope: !6041)
!6041 = distinct !DILexicalBlock(scope: !6033, file: !3, line: 1811, column: 3)
!6042 = !DILocation(line: 1811, column: 3, scope: !6043)
!6043 = distinct !DILexicalBlock(scope: !6041, file: !3, line: 1811, column: 3)
!6044 = !DILocalVariable(name: "insn", scope: !6045, file: !3, line: 1813, type: !889)
!6045 = distinct !DILexicalBlock(scope: !6043, file: !3, line: 1812, column: 5)
!6046 = !DILocation(line: 1813, column: 11, scope: !6045)
!6047 = !DILocation(line: 1815, column: 13, scope: !6048)
!6048 = distinct !DILexicalBlock(scope: !6045, file: !3, line: 1815, column: 11)
!6049 = !DILocation(line: 1815, column: 17, scope: !6048)
!6050 = !DILocation(line: 1815, column: 23, scope: !6048)
!6051 = !DILocation(line: 1815, column: 11, scope: !6045)
!6052 = !DILocation(line: 1817, column: 47, scope: !6053)
!6053 = distinct !DILexicalBlock(scope: !6048, file: !3, line: 1816, column: 2)
!6054 = !DILocation(line: 1817, column: 51, scope: !6053)
!6055 = !DILocation(line: 1817, column: 4, scope: !6053)
!6056 = !DILocation(line: 1818, column: 8, scope: !6053)
!6057 = !DILocation(line: 1819, column: 2, scope: !6053)
!6058 = !DILocation(line: 1821, column: 7, scope: !6059)
!6059 = distinct !DILexicalBlock(scope: !6045, file: !3, line: 1821, column: 7)
!6060 = !DILocation(line: 1821, column: 7, scope: !6061)
!6061 = distinct !DILexicalBlock(scope: !6059, file: !3, line: 1821, column: 7)
!6062 = !DILocation(line: 0, scope: !6061)
!6063 = !DILocation(line: 1822, column: 6, scope: !6064)
!6064 = distinct !DILexicalBlock(scope: !6061, file: !3, line: 1822, column: 6)
!6065 = !DILocation(line: 1822, column: 31, scope: !6064)
!6066 = !DILocation(line: 1822, column: 28, scope: !6064)
!6067 = !DILocation(line: 1822, column: 6, scope: !6061)
!6068 = !DILocation(line: 1825, column: 6, scope: !6069)
!6069 = distinct !DILexicalBlock(scope: !6064, file: !3, line: 1823, column: 4)
!6070 = !DILocation(line: 1826, column: 6, scope: !6069)
!6071 = !DILocation(line: 1826, column: 30, scope: !6069)
!6072 = !DILocation(line: 1826, column: 53, scope: !6069)
!6073 = !DILocation(line: 1827, column: 6, scope: !6069)
!6074 = !DILocation(line: 1827, column: 10, scope: !6069)
!6075 = !DILocation(line: 1824, column: 6, scope: !6069)
!6076 = !DILocation(line: 1828, column: 10, scope: !6069)
!6077 = !DILocation(line: 1829, column: 4, scope: !6069)
!6078 = distinct !{!6078, !6058, !6079}
!6079 = !DILocation(line: 1829, column: 4, scope: !6059)
!6080 = !DILocation(line: 1831, column: 19, scope: !6081)
!6081 = distinct !DILexicalBlock(scope: !6045, file: !3, line: 1831, column: 7)
!6082 = !DILocation(line: 1831, column: 23, scope: !6081)
!6083 = !DILocation(line: 1831, column: 26, scope: !6081)
!6084 = !DILocation(line: 1831, column: 31, scope: !6081)
!6085 = !DILocation(line: 1831, column: 17, scope: !6081)
!6086 = !DILocation(line: 1831, column: 12, scope: !6081)
!6087 = !DILocation(line: 1831, column: 39, scope: !6088)
!6088 = distinct !DILexicalBlock(scope: !6081, file: !3, line: 1831, column: 7)
!6089 = !DILocation(line: 1831, column: 7, scope: !6081)
!6090 = !DILocation(line: 1832, column: 7, scope: !6091)
!6091 = distinct !DILexicalBlock(scope: !6088, file: !3, line: 1832, column: 6)
!6092 = !DILocation(line: 1833, column: 6, scope: !6091)
!6093 = !DILocation(line: 1833, column: 9, scope: !6091)
!6094 = !DILocation(line: 1833, column: 31, scope: !6091)
!6095 = !DILocation(line: 1832, column: 6, scope: !6088)
!6096 = !DILocation(line: 1836, column: 6, scope: !6097)
!6097 = distinct !DILexicalBlock(scope: !6091, file: !3, line: 1834, column: 4)
!6098 = !DILocation(line: 1836, column: 23, scope: !6097)
!6099 = !DILocation(line: 1836, column: 27, scope: !6097)
!6100 = !DILocation(line: 1835, column: 6, scope: !6097)
!6101 = !DILocation(line: 1837, column: 10, scope: !6097)
!6102 = !DILocation(line: 1838, column: 4, scope: !6097)
!6103 = !DILocation(line: 1833, column: 34, scope: !6091)
!6104 = !DILocation(line: 1831, column: 52, scope: !6088)
!6105 = !DILocation(line: 1831, column: 50, scope: !6088)
!6106 = !DILocation(line: 1831, column: 7, scope: !6088)
!6107 = distinct !{!6107, !6089, !6108}
!6108 = !DILocation(line: 1838, column: 4, scope: !6081)
!6109 = !DILocation(line: 1839, column: 19, scope: !6110)
!6110 = distinct !DILexicalBlock(scope: !6045, file: !3, line: 1839, column: 7)
!6111 = !DILocation(line: 1839, column: 23, scope: !6110)
!6112 = !DILocation(line: 1839, column: 26, scope: !6110)
!6113 = !DILocation(line: 1839, column: 31, scope: !6110)
!6114 = !DILocation(line: 1839, column: 17, scope: !6110)
!6115 = !DILocation(line: 1839, column: 12, scope: !6110)
!6116 = !DILocation(line: 1839, column: 39, scope: !6117)
!6117 = distinct !DILexicalBlock(scope: !6110, file: !3, line: 1839, column: 7)
!6118 = !DILocation(line: 1839, column: 7, scope: !6110)
!6119 = !DILocation(line: 1840, column: 7, scope: !6120)
!6120 = distinct !DILexicalBlock(scope: !6117, file: !3, line: 1840, column: 6)
!6121 = !DILocation(line: 1841, column: 6, scope: !6120)
!6122 = !DILocation(line: 1841, column: 9, scope: !6120)
!6123 = !DILocation(line: 1841, column: 31, scope: !6120)
!6124 = !DILocation(line: 1840, column: 6, scope: !6117)
!6125 = !DILocation(line: 1844, column: 6, scope: !6126)
!6126 = distinct !DILexicalBlock(scope: !6120, file: !3, line: 1842, column: 4)
!6127 = !DILocation(line: 1844, column: 23, scope: !6126)
!6128 = !DILocation(line: 1844, column: 27, scope: !6126)
!6129 = !DILocation(line: 1843, column: 6, scope: !6126)
!6130 = !DILocation(line: 1845, column: 10, scope: !6126)
!6131 = !DILocation(line: 1846, column: 4, scope: !6126)
!6132 = !DILocation(line: 1841, column: 34, scope: !6120)
!6133 = !DILocation(line: 1839, column: 52, scope: !6117)
!6134 = !DILocation(line: 1839, column: 50, scope: !6117)
!6135 = !DILocation(line: 1839, column: 7, scope: !6117)
!6136 = distinct !{!6136, !6118, !6137}
!6137 = !DILocation(line: 1846, column: 4, scope: !6110)
!6138 = !DILocation(line: 1847, column: 5, scope: !6045)
!6139 = distinct !{!6139, !6040, !6140}
!6140 = !DILocation(line: 1847, column: 5, scope: !6041)
!6141 = !DILocation(line: 1850, column: 3, scope: !6142)
!6142 = distinct !DILexicalBlock(scope: !6033, file: !3, line: 1850, column: 3)
!6143 = !DILocation(line: 1850, column: 3, scope: !6144)
!6144 = distinct !DILexicalBlock(scope: !6142, file: !3, line: 1850, column: 3)
!6145 = !DILocalVariable(name: "n_fallthru", scope: !6146, file: !3, line: 1852, type: !804)
!6146 = distinct !DILexicalBlock(scope: !6144, file: !3, line: 1851, column: 5)
!6147 = !DILocation(line: 1852, column: 11, scope: !6146)
!6148 = !DILocalVariable(name: "n_eh", scope: !6146, file: !3, line: 1852, type: !804)
!6149 = !DILocation(line: 1852, column: 27, scope: !6146)
!6150 = !DILocalVariable(name: "n_call", scope: !6146, file: !3, line: 1852, type: !804)
!6151 = !DILocation(line: 1852, column: 37, scope: !6146)
!6152 = !DILocalVariable(name: "n_abnormal", scope: !6146, file: !3, line: 1852, type: !804)
!6153 = !DILocation(line: 1852, column: 49, scope: !6146)
!6154 = !DILocalVariable(name: "n_branch", scope: !6146, file: !3, line: 1852, type: !804)
!6155 = !DILocation(line: 1852, column: 65, scope: !6146)
!6156 = !DILocalVariable(name: "e", scope: !6146, file: !3, line: 1853, type: !1409)
!6157 = !DILocation(line: 1853, column: 12, scope: !6146)
!6158 = !DILocalVariable(name: "fallthru", scope: !6146, file: !3, line: 1853, type: !1409)
!6159 = !DILocation(line: 1853, column: 15, scope: !6146)
!6160 = !DILocalVariable(name: "note", scope: !6146, file: !3, line: 1854, type: !889)
!6161 = !DILocation(line: 1854, column: 11, scope: !6146)
!6162 = !DILocalVariable(name: "ei", scope: !6146, file: !3, line: 1855, type: !2483)
!6163 = !DILocation(line: 1855, column: 21, scope: !6146)
!6164 = !DILocation(line: 1857, column: 11, scope: !6165)
!6165 = distinct !DILexicalBlock(scope: !6146, file: !3, line: 1857, column: 11)
!6166 = !DILocation(line: 1858, column: 4, scope: !6165)
!6167 = !DILocation(line: 1858, column: 30, scope: !6165)
!6168 = !DILocation(line: 1858, column: 15, scope: !6165)
!6169 = !DILocation(line: 1858, column: 13, scope: !6165)
!6170 = !DILocation(line: 1859, column: 4, scope: !6165)
!6171 = !DILocation(line: 1859, column: 7, scope: !6165)
!6172 = !DILocation(line: 1859, column: 30, scope: !6165)
!6173 = !DILocation(line: 1860, column: 4, scope: !6165)
!6174 = !DILocation(line: 1860, column: 23, scope: !6165)
!6175 = !DILocation(line: 1860, column: 7, scope: !6165)
!6176 = !DILocation(line: 1857, column: 11, scope: !6146)
!6177 = !DILocation(line: 1862, column: 8, scope: !6178)
!6178 = distinct !DILexicalBlock(scope: !6179, file: !3, line: 1862, column: 8)
!6179 = distinct !DILexicalBlock(scope: !6165, file: !3, line: 1861, column: 2)
!6180 = !DILocation(line: 1862, column: 35, scope: !6178)
!6181 = !DILocation(line: 1862, column: 53, scope: !6178)
!6182 = !DILocation(line: 1862, column: 32, scope: !6178)
!6183 = !DILocation(line: 1863, column: 8, scope: !6178)
!6184 = !DILocation(line: 1863, column: 11, scope: !6178)
!6185 = !DILocation(line: 1863, column: 26, scope: !6178)
!6186 = !DILocation(line: 1862, column: 8, scope: !6179)
!6187 = !DILocation(line: 1866, column: 8, scope: !6188)
!6188 = distinct !DILexicalBlock(scope: !6178, file: !3, line: 1864, column: 6)
!6189 = !DILocation(line: 1866, column: 33, scope: !6188)
!6190 = !DILocation(line: 1866, column: 51, scope: !6188)
!6191 = !DILocation(line: 1865, column: 8, scope: !6188)
!6192 = !DILocation(line: 1867, column: 12, scope: !6188)
!6193 = !DILocation(line: 1868, column: 6, scope: !6188)
!6194 = !DILocation(line: 1869, column: 2, scope: !6179)
!6195 = !DILocation(line: 1870, column: 7, scope: !6196)
!6196 = distinct !DILexicalBlock(scope: !6146, file: !3, line: 1870, column: 7)
!6197 = !DILocation(line: 1870, column: 7, scope: !6198)
!6198 = distinct !DILexicalBlock(scope: !6196, file: !3, line: 1870, column: 7)
!6199 = !DILocation(line: 1872, column: 8, scope: !6200)
!6200 = distinct !DILexicalBlock(scope: !6201, file: !3, line: 1872, column: 8)
!6201 = distinct !DILexicalBlock(scope: !6198, file: !3, line: 1871, column: 2)
!6202 = !DILocation(line: 1872, column: 11, scope: !6200)
!6203 = !DILocation(line: 1872, column: 17, scope: !6200)
!6204 = !DILocation(line: 1872, column: 8, scope: !6201)
!6205 = !DILocation(line: 1874, column: 18, scope: !6206)
!6206 = distinct !DILexicalBlock(scope: !6200, file: !3, line: 1873, column: 6)
!6207 = !DILocation(line: 1874, column: 33, scope: !6206)
!6208 = !DILocation(line: 1874, column: 31, scope: !6206)
!6209 = !DILocation(line: 1875, column: 13, scope: !6210)
!6210 = distinct !DILexicalBlock(scope: !6206, file: !3, line: 1875, column: 12)
!6211 = !DILocation(line: 1875, column: 16, scope: !6210)
!6212 = !DILocation(line: 1875, column: 22, scope: !6210)
!6213 = !DILocation(line: 1876, column: 5, scope: !6210)
!6214 = !DILocation(line: 1876, column: 9, scope: !6210)
!6215 = !DILocation(line: 1876, column: 34, scope: !6210)
!6216 = !DILocation(line: 1876, column: 31, scope: !6210)
!6217 = !DILocation(line: 1877, column: 9, scope: !6210)
!6218 = !DILocation(line: 1877, column: 12, scope: !6210)
!6219 = !DILocation(line: 1877, column: 15, scope: !6210)
!6220 = !DILocation(line: 1877, column: 22, scope: !6210)
!6221 = !DILocation(line: 1877, column: 19, scope: !6210)
!6222 = !DILocation(line: 1878, column: 9, scope: !6210)
!6223 = !DILocation(line: 1878, column: 12, scope: !6210)
!6224 = !DILocation(line: 1878, column: 15, scope: !6210)
!6225 = !DILocation(line: 1878, column: 23, scope: !6210)
!6226 = !DILocation(line: 1878, column: 20, scope: !6210)
!6227 = !DILocation(line: 1875, column: 12, scope: !6206)
!6228 = !DILocation(line: 1881, column: 5, scope: !6229)
!6229 = distinct !DILexicalBlock(scope: !6210, file: !3, line: 1879, column: 6)
!6230 = !DILocation(line: 1881, column: 8, scope: !6229)
!6231 = !DILocation(line: 1881, column: 13, scope: !6229)
!6232 = !DILocation(line: 1880, column: 5, scope: !6229)
!6233 = !DILocation(line: 1882, column: 9, scope: !6229)
!6234 = !DILocation(line: 1883, column: 3, scope: !6229)
!6235 = !DILocation(line: 1884, column: 6, scope: !6206)
!6236 = !DILocation(line: 1886, column: 9, scope: !6237)
!6237 = distinct !DILexicalBlock(scope: !6201, file: !3, line: 1886, column: 8)
!6238 = !DILocation(line: 1886, column: 12, scope: !6237)
!6239 = !DILocation(line: 1886, column: 18, scope: !6237)
!6240 = !DILocation(line: 1890, column: 26, scope: !6237)
!6241 = !DILocation(line: 1886, column: 8, scope: !6201)
!6242 = !DILocation(line: 1891, column: 14, scope: !6237)
!6243 = !DILocation(line: 1891, column: 6, scope: !6237)
!6244 = !DILocation(line: 1893, column: 8, scope: !6245)
!6245 = distinct !DILexicalBlock(scope: !6201, file: !3, line: 1893, column: 8)
!6246 = !DILocation(line: 1893, column: 11, scope: !6245)
!6247 = !DILocation(line: 1893, column: 17, scope: !6245)
!6248 = !DILocation(line: 1893, column: 8, scope: !6201)
!6249 = !DILocation(line: 1894, column: 12, scope: !6245)
!6250 = !DILocation(line: 1894, column: 6, scope: !6245)
!6251 = !DILocation(line: 1896, column: 8, scope: !6252)
!6252 = distinct !DILexicalBlock(scope: !6201, file: !3, line: 1896, column: 8)
!6253 = !DILocation(line: 1896, column: 11, scope: !6252)
!6254 = !DILocation(line: 1896, column: 17, scope: !6252)
!6255 = !DILocation(line: 1896, column: 8, scope: !6201)
!6256 = !DILocation(line: 1897, column: 10, scope: !6252)
!6257 = !DILocation(line: 1897, column: 6, scope: !6252)
!6258 = !DILocation(line: 1898, column: 13, scope: !6259)
!6259 = distinct !DILexicalBlock(scope: !6252, file: !3, line: 1898, column: 13)
!6260 = !DILocation(line: 1898, column: 16, scope: !6259)
!6261 = !DILocation(line: 1898, column: 22, scope: !6259)
!6262 = !DILocation(line: 1898, column: 13, scope: !6252)
!6263 = !DILocation(line: 1899, column: 16, scope: !6259)
!6264 = !DILocation(line: 1899, column: 6, scope: !6259)
!6265 = !DILocation(line: 1900, column: 2, scope: !6201)
!6266 = distinct !{!6266, !6195, !6267}
!6267 = !DILocation(line: 1900, column: 2, scope: !6196)
!6268 = !DILocation(line: 1902, column: 11, scope: !6269)
!6269 = distinct !DILexicalBlock(scope: !6146, file: !3, line: 1902, column: 11)
!6270 = !DILocation(line: 1902, column: 16, scope: !6269)
!6271 = !DILocation(line: 1902, column: 35, scope: !6269)
!6272 = !DILocation(line: 1902, column: 20, scope: !6269)
!6273 = !DILocation(line: 1902, column: 11, scope: !6146)
!6274 = !DILocation(line: 1904, column: 61, scope: !6275)
!6275 = distinct !DILexicalBlock(scope: !6269, file: !3, line: 1903, column: 2)
!6276 = !DILocation(line: 1904, column: 65, scope: !6275)
!6277 = !DILocation(line: 1904, column: 4, scope: !6275)
!6278 = !DILocation(line: 1905, column: 8, scope: !6275)
!6279 = !DILocation(line: 1906, column: 2, scope: !6275)
!6280 = !DILocation(line: 1907, column: 11, scope: !6281)
!6281 = distinct !DILexicalBlock(scope: !6146, file: !3, line: 1907, column: 11)
!6282 = !DILocation(line: 1907, column: 16, scope: !6281)
!6283 = !DILocation(line: 1907, column: 11, scope: !6146)
!6284 = !DILocation(line: 1909, column: 35, scope: !6285)
!6285 = distinct !DILexicalBlock(scope: !6281, file: !3, line: 1908, column: 2)
!6286 = !DILocation(line: 1909, column: 39, scope: !6285)
!6287 = !DILocation(line: 1909, column: 4, scope: !6285)
!6288 = !DILocation(line: 1910, column: 8, scope: !6285)
!6289 = !DILocation(line: 1911, column: 2, scope: !6285)
!6290 = !DILocation(line: 1912, column: 11, scope: !6291)
!6291 = distinct !DILexicalBlock(scope: !6146, file: !3, line: 1912, column: 11)
!6292 = !DILocation(line: 1913, column: 4, scope: !6291)
!6293 = !DILocation(line: 1913, column: 9, scope: !6291)
!6294 = !DILocation(line: 1914, column: 8, scope: !6291)
!6295 = !DILocation(line: 1914, column: 12, scope: !6291)
!6296 = !DILocation(line: 1914, column: 21, scope: !6291)
!6297 = !DILocation(line: 1914, column: 25, scope: !6291)
!6298 = !DILocation(line: 1914, column: 47, scope: !6291)
!6299 = !DILocation(line: 1914, column: 29, scope: !6291)
!6300 = !DILocation(line: 1915, column: 8, scope: !6291)
!6301 = !DILocation(line: 1915, column: 27, scope: !6291)
!6302 = !DILocation(line: 1915, column: 11, scope: !6291)
!6303 = !DILocation(line: 1912, column: 11, scope: !6146)
!6304 = !DILocation(line: 1917, column: 56, scope: !6305)
!6305 = distinct !DILexicalBlock(scope: !6291, file: !3, line: 1916, column: 2)
!6306 = !DILocation(line: 1917, column: 60, scope: !6305)
!6307 = !DILocation(line: 1917, column: 4, scope: !6305)
!6308 = !DILocation(line: 1918, column: 8, scope: !6305)
!6309 = !DILocation(line: 1919, column: 2, scope: !6305)
!6310 = !DILocation(line: 1920, column: 11, scope: !6311)
!6311 = distinct !DILexicalBlock(scope: !6146, file: !3, line: 1920, column: 11)
!6312 = !DILocation(line: 1920, column: 22, scope: !6311)
!6313 = !DILocation(line: 1920, column: 43, scope: !6311)
!6314 = !DILocation(line: 1920, column: 25, scope: !6311)
!6315 = !DILocation(line: 1920, column: 11, scope: !6146)
!6316 = !DILocation(line: 1922, column: 56, scope: !6317)
!6317 = distinct !DILexicalBlock(scope: !6311, file: !3, line: 1921, column: 2)
!6318 = !DILocation(line: 1922, column: 60, scope: !6317)
!6319 = !DILocation(line: 1922, column: 4, scope: !6317)
!6320 = !DILocation(line: 1923, column: 8, scope: !6317)
!6321 = !DILocation(line: 1924, column: 2, scope: !6317)
!6322 = !DILocation(line: 1925, column: 11, scope: !6323)
!6323 = distinct !DILexicalBlock(scope: !6146, file: !3, line: 1925, column: 11)
!6324 = !DILocation(line: 1925, column: 20, scope: !6323)
!6325 = !DILocation(line: 1925, column: 25, scope: !6323)
!6326 = !DILocation(line: 1925, column: 46, scope: !6323)
!6327 = !DILocation(line: 1925, column: 28, scope: !6323)
!6328 = !DILocation(line: 1925, column: 11, scope: !6146)
!6329 = !DILocation(line: 1928, column: 4, scope: !6330)
!6330 = distinct !DILexicalBlock(scope: !6323, file: !3, line: 1926, column: 2)
!6331 = !DILocation(line: 1928, column: 8, scope: !6330)
!6332 = !DILocation(line: 1927, column: 4, scope: !6330)
!6333 = !DILocation(line: 1929, column: 8, scope: !6330)
!6334 = !DILocation(line: 1930, column: 2, scope: !6330)
!6335 = !DILocation(line: 1931, column: 11, scope: !6336)
!6336 = distinct !DILexicalBlock(scope: !6146, file: !3, line: 1931, column: 11)
!6337 = !DILocation(line: 1931, column: 20, scope: !6336)
!6338 = !DILocation(line: 1931, column: 25, scope: !6336)
!6339 = !DILocation(line: 1931, column: 44, scope: !6336)
!6340 = !DILocation(line: 1931, column: 28, scope: !6336)
!6341 = !DILocation(line: 1932, column: 4, scope: !6336)
!6342 = !DILocation(line: 1932, column: 7, scope: !6336)
!6343 = !DILocation(line: 1932, column: 35, scope: !6336)
!6344 = !DILocation(line: 1932, column: 32, scope: !6336)
!6345 = !DILocation(line: 1931, column: 11, scope: !6146)
!6346 = !DILocation(line: 1935, column: 4, scope: !6347)
!6347 = distinct !DILexicalBlock(scope: !6336, file: !3, line: 1933, column: 2)
!6348 = !DILocation(line: 1935, column: 8, scope: !6347)
!6349 = !DILocation(line: 1934, column: 4, scope: !6347)
!6350 = !DILocation(line: 1936, column: 8, scope: !6347)
!6351 = !DILocation(line: 1937, column: 2, scope: !6347)
!6352 = !DILocation(line: 1938, column: 11, scope: !6353)
!6353 = distinct !DILexicalBlock(scope: !6146, file: !3, line: 1938, column: 11)
!6354 = !DILocation(line: 1938, column: 18, scope: !6353)
!6355 = !DILocation(line: 1938, column: 22, scope: !6353)
!6356 = !DILocation(line: 1938, column: 11, scope: !6146)
!6357 = !DILocation(line: 1940, column: 52, scope: !6358)
!6358 = distinct !DILexicalBlock(scope: !6353, file: !3, line: 1939, column: 2)
!6359 = !DILocation(line: 1940, column: 56, scope: !6358)
!6360 = !DILocation(line: 1940, column: 4, scope: !6358)
!6361 = !DILocation(line: 1941, column: 8, scope: !6358)
!6362 = !DILocation(line: 1942, column: 2, scope: !6358)
!6363 = !DILocation(line: 1943, column: 11, scope: !6364)
!6364 = distinct !DILexicalBlock(scope: !6146, file: !3, line: 1943, column: 11)
!6365 = !DILocation(line: 1944, column: 4, scope: !6364)
!6366 = !DILocation(line: 1944, column: 9, scope: !6364)
!6367 = !DILocation(line: 1944, column: 30, scope: !6364)
!6368 = !DILocation(line: 1944, column: 33, scope: !6364)
!6369 = !DILocation(line: 1944, column: 43, scope: !6364)
!6370 = !DILocation(line: 1944, column: 40, scope: !6364)
!6371 = !DILocation(line: 1945, column: 4, scope: !6364)
!6372 = !DILocation(line: 1945, column: 9, scope: !6364)
!6373 = !DILocation(line: 1946, column: 8, scope: !6364)
!6374 = !DILocation(line: 1946, column: 27, scope: !6364)
!6375 = !DILocation(line: 1946, column: 11, scope: !6364)
!6376 = !DILocation(line: 1947, column: 8, scope: !6364)
!6377 = !DILocation(line: 1947, column: 29, scope: !6364)
!6378 = !DILocation(line: 1947, column: 11, scope: !6364)
!6379 = !DILocation(line: 1943, column: 11, scope: !6146)
!6380 = !DILocation(line: 1949, column: 53, scope: !6381)
!6381 = distinct !DILexicalBlock(scope: !6364, file: !3, line: 1948, column: 2)
!6382 = !DILocation(line: 1949, column: 57, scope: !6381)
!6383 = !DILocation(line: 1949, column: 4, scope: !6381)
!6384 = !DILocation(line: 1950, column: 8, scope: !6381)
!6385 = !DILocation(line: 1951, column: 2, scope: !6381)
!6386 = !DILocation(line: 1953, column: 16, scope: !6387)
!6387 = distinct !DILexicalBlock(scope: !6146, file: !3, line: 1953, column: 7)
!6388 = !DILocation(line: 1953, column: 14, scope: !6387)
!6389 = !DILocation(line: 1953, column: 12, scope: !6387)
!6390 = !DILocation(line: 1953, column: 30, scope: !6391)
!6391 = distinct !DILexicalBlock(scope: !6387, file: !3, line: 1953, column: 7)
!6392 = !DILocation(line: 1953, column: 35, scope: !6391)
!6393 = !DILocation(line: 1953, column: 32, scope: !6391)
!6394 = !DILocation(line: 1953, column: 7, scope: !6387)
!6395 = !DILocation(line: 1956, column: 7, scope: !6396)
!6396 = distinct !DILexicalBlock(scope: !6391, file: !3, line: 1956, column: 6)
!6397 = !DILocation(line: 1956, column: 21, scope: !6396)
!6398 = !DILocation(line: 1956, column: 24, scope: !6396)
!6399 = !DILocation(line: 1956, column: 46, scope: !6396)
!6400 = !DILocation(line: 1956, column: 43, scope: !6396)
!6401 = !DILocation(line: 1956, column: 6, scope: !6391)
!6402 = !DILocation(line: 1958, column: 17, scope: !6403)
!6403 = distinct !DILexicalBlock(scope: !6396, file: !3, line: 1957, column: 4)
!6404 = !DILocation(line: 1958, column: 6, scope: !6403)
!6405 = !DILocation(line: 1959, column: 12, scope: !6406)
!6406 = distinct !DILexicalBlock(scope: !6403, file: !3, line: 1959, column: 10)
!6407 = !DILocation(line: 1959, column: 10, scope: !6403)
!6408 = !DILocation(line: 1962, column: 4, scope: !6406)
!6409 = !DILocation(line: 1962, column: 18, scope: !6406)
!6410 = !DILocation(line: 1962, column: 22, scope: !6406)
!6411 = !DILocation(line: 1960, column: 8, scope: !6406)
!6412 = !DILocation(line: 1966, column: 4, scope: !6406)
!6413 = !DILocation(line: 1966, column: 18, scope: !6406)
!6414 = !DILocation(line: 1966, column: 22, scope: !6406)
!6415 = !DILocation(line: 1966, column: 29, scope: !6406)
!6416 = !DILocation(line: 1966, column: 49, scope: !6406)
!6417 = !DILocation(line: 1964, column: 8, scope: !6406)
!6418 = !DILocation(line: 1968, column: 10, scope: !6403)
!6419 = !DILocation(line: 1969, column: 4, scope: !6403)
!6420 = !DILocation(line: 1953, column: 64, scope: !6391)
!6421 = !DILocation(line: 1953, column: 62, scope: !6391)
!6422 = !DILocation(line: 1953, column: 7, scope: !6391)
!6423 = distinct !{!6423, !6394, !6424}
!6424 = !DILocation(line: 1969, column: 4, scope: !6387)
!6425 = !DILocation(line: 1974, column: 11, scope: !6146)
!6426 = !DILocation(line: 1974, column: 9, scope: !6146)
!6427 = !DILocation(line: 1975, column: 11, scope: !6428)
!6428 = distinct !DILexicalBlock(scope: !6146, file: !3, line: 1975, column: 11)
!6429 = !DILocation(line: 1975, column: 11, scope: !6146)
!6430 = !DILocation(line: 1977, column: 8, scope: !6431)
!6431 = distinct !DILexicalBlock(scope: !6432, file: !3, line: 1977, column: 8)
!6432 = distinct !DILexicalBlock(scope: !6428, file: !3, line: 1976, column: 2)
!6433 = !DILocation(line: 1977, column: 23, scope: !6431)
!6434 = !DILocation(line: 1977, column: 20, scope: !6431)
!6435 = !DILocation(line: 1977, column: 8, scope: !6432)
!6436 = !DILocation(line: 1980, column: 8, scope: !6437)
!6437 = distinct !DILexicalBlock(scope: !6431, file: !3, line: 1978, column: 6)
!6438 = !DILocation(line: 1980, column: 12, scope: !6437)
!6439 = !DILocation(line: 1979, column: 8, scope: !6437)
!6440 = !DILocation(line: 1981, column: 12, scope: !6437)
!6441 = !DILocation(line: 1982, column: 6, scope: !6437)
!6442 = !DILocation(line: 1984, column: 8, scope: !6432)
!6443 = !DILocation(line: 1984, column: 6, scope: !6432)
!6444 = !DILocation(line: 1985, column: 2, scope: !6432)
!6445 = !DILocation(line: 1987, column: 12, scope: !6446)
!6446 = distinct !DILexicalBlock(scope: !6146, file: !3, line: 1987, column: 11)
!6447 = !DILocation(line: 1987, column: 40, scope: !6446)
!6448 = !DILocation(line: 1987, column: 43, scope: !6446)
!6449 = !DILocation(line: 1987, column: 67, scope: !6446)
!6450 = !DILocation(line: 1987, column: 64, scope: !6446)
!6451 = !DILocation(line: 1987, column: 11, scope: !6146)
!6452 = !DILocation(line: 1990, column: 4, scope: !6453)
!6453 = distinct !DILexicalBlock(scope: !6446, file: !3, line: 1988, column: 2)
!6454 = !DILocation(line: 1990, column: 8, scope: !6453)
!6455 = !DILocation(line: 1989, column: 4, scope: !6453)
!6456 = !DILocation(line: 1991, column: 8, scope: !6453)
!6457 = !DILocation(line: 1992, column: 2, scope: !6453)
!6458 = !DILocation(line: 1994, column: 11, scope: !6459)
!6459 = distinct !DILexicalBlock(scope: !6146, file: !3, line: 1994, column: 11)
!6460 = !DILocation(line: 1994, column: 26, scope: !6459)
!6461 = !DILocation(line: 1994, column: 23, scope: !6459)
!6462 = !DILocation(line: 1994, column: 11, scope: !6146)
!6463 = !DILocation(line: 1998, column: 11, scope: !6464)
!6464 = distinct !DILexicalBlock(scope: !6459, file: !3, line: 1998, column: 2)
!6465 = !DILocation(line: 1998, column: 9, scope: !6464)
!6466 = !DILocation(line: 1998, column: 7, scope: !6464)
!6467 = !DILocation(line: 1998, column: 26, scope: !6468)
!6468 = distinct !DILexicalBlock(scope: !6464, file: !3, line: 1998, column: 2)
!6469 = !DILocation(line: 1998, column: 2, scope: !6464)
!6470 = !DILocation(line: 2000, column: 10, scope: !6471)
!6471 = distinct !DILexicalBlock(scope: !6472, file: !3, line: 2000, column: 10)
!6472 = distinct !DILexicalBlock(scope: !6468, file: !3, line: 1999, column: 4)
!6473 = !DILocation(line: 2000, column: 10, scope: !6472)
!6474 = !DILocation(line: 2003, column: 10, scope: !6475)
!6475 = distinct !DILexicalBlock(scope: !6471, file: !3, line: 2001, column: 8)
!6476 = !DILocation(line: 2003, column: 24, scope: !6475)
!6477 = !DILocation(line: 2003, column: 28, scope: !6475)
!6478 = !DILocation(line: 2002, column: 3, scope: !6475)
!6479 = !DILocation(line: 2004, column: 7, scope: !6475)
!6480 = !DILocation(line: 2005, column: 8, scope: !6475)
!6481 = !DILocation(line: 2007, column: 10, scope: !6482)
!6482 = distinct !DILexicalBlock(scope: !6472, file: !3, line: 2007, column: 10)
!6483 = !DILocation(line: 2007, column: 15, scope: !6482)
!6484 = !DILocation(line: 2007, column: 12, scope: !6482)
!6485 = !DILocation(line: 2007, column: 10, scope: !6472)
!6486 = !DILocation(line: 2008, column: 8, scope: !6482)
!6487 = !DILocation(line: 2010, column: 31, scope: !6488)
!6488 = distinct !DILexicalBlock(scope: !6472, file: !3, line: 2010, column: 10)
!6489 = !DILocation(line: 2010, column: 10, scope: !6488)
!6490 = !DILocation(line: 2010, column: 10, scope: !6472)
!6491 = !DILocation(line: 2012, column: 32, scope: !6492)
!6492 = distinct !DILexicalBlock(scope: !6488, file: !3, line: 2011, column: 8)
!6493 = !DILocation(line: 2012, column: 36, scope: !6492)
!6494 = !DILocation(line: 2012, column: 3, scope: !6492)
!6495 = !DILocation(line: 2013, column: 3, scope: !6492)
!6496 = !DILocation(line: 2014, column: 8, scope: !6492)
!6497 = !DILocation(line: 2015, column: 4, scope: !6472)
!6498 = !DILocation(line: 1998, column: 33, scope: !6468)
!6499 = !DILocation(line: 1998, column: 31, scope: !6468)
!6500 = !DILocation(line: 1998, column: 2, scope: !6468)
!6501 = distinct !{!6501, !6469, !6502}
!6502 = !DILocation(line: 2015, column: 4, scope: !6464)
!6503 = !DILocation(line: 2016, column: 5, scope: !6146)
!6504 = distinct !{!6504, !6141, !6505}
!6505 = !DILocation(line: 2016, column: 5, scope: !6142)
!6506 = !DILocation(line: 2019, column: 10, scope: !6033)
!6507 = !DILocation(line: 2019, column: 3, scope: !6033)
!6508 = distinct !DISubprogram(name: "cfg_layout_create_basic_block", scope: !3, file: !3, line: 348, type: !2154, scopeLine: 349, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!6509 = !DILocalVariable(name: "head", arg: 1, scope: !6508, file: !3, line: 348, type: !850)
!6510 = !DILocation(line: 348, column: 38, scope: !6508)
!6511 = !DILocalVariable(name: "end", arg: 2, scope: !6508, file: !3, line: 348, type: !850)
!6512 = !DILocation(line: 348, column: 50, scope: !6508)
!6513 = !DILocalVariable(name: "after", arg: 3, scope: !6508, file: !3, line: 348, type: !1392)
!6514 = !DILocation(line: 348, column: 67, scope: !6508)
!6515 = !DILocalVariable(name: "newbb", scope: !6508, file: !3, line: 350, type: !1392)
!6516 = !DILocation(line: 350, column: 15, scope: !6508)
!6517 = !DILocation(line: 350, column: 47, scope: !6508)
!6518 = !DILocation(line: 350, column: 53, scope: !6508)
!6519 = !DILocation(line: 350, column: 58, scope: !6508)
!6520 = !DILocation(line: 350, column: 23, scope: !6508)
!6521 = !DILocation(line: 352, column: 10, scope: !6508)
!6522 = !DILocation(line: 352, column: 3, scope: !6508)
!6523 = distinct !DISubprogram(name: "cfg_layout_redirect_edge_and_branch", scope: !3, file: !3, line: 2470, type: !2158, scopeLine: 2471, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!6524 = !DILocalVariable(name: "e", arg: 1, scope: !6523, file: !3, line: 2470, type: !1409)
!6525 = !DILocation(line: 2470, column: 43, scope: !6523)
!6526 = !DILocalVariable(name: "dest", arg: 2, scope: !6523, file: !3, line: 2470, type: !1392)
!6527 = !DILocation(line: 2470, column: 58, scope: !6523)
!6528 = !DILocalVariable(name: "src", scope: !6523, file: !3, line: 2472, type: !1392)
!6529 = !DILocation(line: 2472, column: 15, scope: !6523)
!6530 = !DILocation(line: 2472, column: 21, scope: !6523)
!6531 = !DILocation(line: 2472, column: 24, scope: !6523)
!6532 = !DILocalVariable(name: "ret", scope: !6523, file: !3, line: 2473, type: !1409)
!6533 = !DILocation(line: 2473, column: 8, scope: !6523)
!6534 = !DILocation(line: 2475, column: 7, scope: !6535)
!6535 = distinct !DILexicalBlock(scope: !6523, file: !3, line: 2475, column: 7)
!6536 = !DILocation(line: 2475, column: 10, scope: !6535)
!6537 = !DILocation(line: 2475, column: 16, scope: !6535)
!6538 = !DILocation(line: 2475, column: 7, scope: !6523)
!6539 = !DILocation(line: 2476, column: 5, scope: !6535)
!6540 = !DILocation(line: 2478, column: 7, scope: !6541)
!6541 = distinct !DILexicalBlock(scope: !6523, file: !3, line: 2478, column: 7)
!6542 = !DILocation(line: 2478, column: 10, scope: !6541)
!6543 = !DILocation(line: 2478, column: 18, scope: !6541)
!6544 = !DILocation(line: 2478, column: 15, scope: !6541)
!6545 = !DILocation(line: 2478, column: 7, scope: !6523)
!6546 = !DILocation(line: 2479, column: 12, scope: !6541)
!6547 = !DILocation(line: 2479, column: 5, scope: !6541)
!6548 = !DILocation(line: 2481, column: 7, scope: !6549)
!6549 = distinct !DILexicalBlock(scope: !6523, file: !3, line: 2481, column: 7)
!6550 = !DILocation(line: 2481, column: 10, scope: !6549)
!6551 = !DILocation(line: 2481, column: 17, scope: !6549)
!6552 = !DILocation(line: 2481, column: 14, scope: !6549)
!6553 = !DILocation(line: 2482, column: 7, scope: !6549)
!6554 = !DILocation(line: 2482, column: 49, scope: !6549)
!6555 = !DILocation(line: 2482, column: 52, scope: !6549)
!6556 = !DILocation(line: 2482, column: 17, scope: !6549)
!6557 = !DILocation(line: 2482, column: 15, scope: !6549)
!6558 = !DILocation(line: 2481, column: 7, scope: !6523)
!6559 = !DILocation(line: 2484, column: 24, scope: !6560)
!6560 = distinct !DILexicalBlock(scope: !6549, file: !3, line: 2483, column: 5)
!6561 = !DILocation(line: 2484, column: 7, scope: !6560)
!6562 = !DILocation(line: 2485, column: 14, scope: !6560)
!6563 = !DILocation(line: 2485, column: 7, scope: !6560)
!6564 = !DILocation(line: 2488, column: 7, scope: !6565)
!6565 = distinct !DILexicalBlock(scope: !6523, file: !3, line: 2488, column: 7)
!6566 = !DILocation(line: 2488, column: 10, scope: !6565)
!6567 = !DILocation(line: 2488, column: 17, scope: !6565)
!6568 = !DILocation(line: 2488, column: 14, scope: !6565)
!6569 = !DILocation(line: 2489, column: 7, scope: !6565)
!6570 = !DILocation(line: 2489, column: 11, scope: !6565)
!6571 = !DILocation(line: 2489, column: 14, scope: !6565)
!6572 = !DILocation(line: 2489, column: 20, scope: !6565)
!6573 = !DILocation(line: 2489, column: 37, scope: !6565)
!6574 = !DILocation(line: 2489, column: 42, scope: !6565)
!6575 = !DILocation(line: 2489, column: 45, scope: !6565)
!6576 = !DILocation(line: 2489, column: 51, scope: !6565)
!6577 = !DILocation(line: 2488, column: 7, scope: !6523)
!6578 = !DILocation(line: 2491, column: 11, scope: !6579)
!6579 = distinct !DILexicalBlock(scope: !6580, file: !3, line: 2491, column: 11)
!6580 = distinct !DILexicalBlock(scope: !6565, file: !3, line: 2490, column: 5)
!6581 = !DILocation(line: 2491, column: 11, scope: !6580)
!6582 = !DILocation(line: 2492, column: 11, scope: !6579)
!6583 = !DILocation(line: 2493, column: 4, scope: !6579)
!6584 = !DILocation(line: 2493, column: 7, scope: !6579)
!6585 = !DILocation(line: 2493, column: 12, scope: !6579)
!6586 = !DILocation(line: 2493, column: 19, scope: !6579)
!6587 = !DILocation(line: 2493, column: 25, scope: !6579)
!6588 = !DILocation(line: 2492, column: 2, scope: !6579)
!6589 = !DILocation(line: 2495, column: 24, scope: !6580)
!6590 = !DILocation(line: 2495, column: 27, scope: !6580)
!6591 = !DILocation(line: 2495, column: 7, scope: !6580)
!6592 = !DILocation(line: 2496, column: 27, scope: !6580)
!6593 = !DILocation(line: 2496, column: 30, scope: !6580)
!6594 = !DILocation(line: 2496, column: 7, scope: !6580)
!6595 = !DILocation(line: 2497, column: 14, scope: !6580)
!6596 = !DILocation(line: 2497, column: 7, scope: !6580)
!6597 = !DILocation(line: 2504, column: 7, scope: !6598)
!6598 = distinct !DILexicalBlock(scope: !6523, file: !3, line: 2504, column: 7)
!6599 = !DILocation(line: 2504, column: 10, scope: !6598)
!6600 = !DILocation(line: 2504, column: 16, scope: !6598)
!6601 = !DILocation(line: 2504, column: 7, scope: !6523)
!6602 = !DILocation(line: 2507, column: 11, scope: !6603)
!6603 = distinct !DILexicalBlock(scope: !6604, file: !3, line: 2507, column: 11)
!6604 = distinct !DILexicalBlock(scope: !6598, file: !3, line: 2505, column: 5)
!6605 = !DILocation(line: 2508, column: 4, scope: !6603)
!6606 = !DILocation(line: 2508, column: 31, scope: !6603)
!6607 = !DILocation(line: 2509, column: 10, scope: !6603)
!6608 = !DILocation(line: 2508, column: 7, scope: !6603)
!6609 = !DILocation(line: 2507, column: 11, scope: !6604)
!6610 = !DILocalVariable(name: "redirected", scope: !6611, file: !3, line: 2511, type: !1409)
!6611 = distinct !DILexicalBlock(scope: !6603, file: !3, line: 2510, column: 2)
!6612 = !DILocation(line: 2511, column: 9, scope: !6611)
!6613 = !DILocation(line: 2513, column: 8, scope: !6614)
!6614 = distinct !DILexicalBlock(scope: !6611, file: !3, line: 2513, column: 8)
!6615 = !DILocation(line: 2513, column: 8, scope: !6611)
!6616 = !DILocation(line: 2514, column: 15, scope: !6614)
!6617 = !DILocation(line: 2516, column: 8, scope: !6614)
!6618 = !DILocation(line: 2516, column: 11, scope: !6614)
!6619 = !DILocation(line: 2516, column: 16, scope: !6614)
!6620 = !DILocation(line: 2516, column: 23, scope: !6614)
!6621 = !DILocation(line: 2516, column: 26, scope: !6614)
!6622 = !DILocation(line: 2516, column: 32, scope: !6614)
!6623 = !DILocation(line: 2516, column: 39, scope: !6614)
!6624 = !DILocation(line: 2516, column: 45, scope: !6614)
!6625 = !DILocation(line: 2514, column: 6, scope: !6614)
!6626 = !DILocation(line: 2517, column: 4, scope: !6611)
!6627 = !DILocation(line: 2517, column: 7, scope: !6611)
!6628 = !DILocation(line: 2517, column: 13, scope: !6611)
!6629 = !DILocation(line: 2518, column: 39, scope: !6611)
!6630 = !DILocation(line: 2518, column: 42, scope: !6611)
!6631 = !DILocation(line: 2518, column: 17, scope: !6611)
!6632 = !DILocation(line: 2518, column: 15, scope: !6611)
!6633 = !DILocation(line: 2519, column: 4, scope: !6611)
!6634 = !DILocation(line: 2520, column: 4, scope: !6611)
!6635 = !DILocation(line: 2520, column: 7, scope: !6611)
!6636 = !DILocation(line: 2520, column: 13, scope: !6611)
!6637 = !DILocation(line: 2521, column: 21, scope: !6611)
!6638 = !DILocation(line: 2521, column: 24, scope: !6611)
!6639 = !DILocation(line: 2521, column: 4, scope: !6611)
!6640 = !DILocation(line: 2522, column: 11, scope: !6611)
!6641 = !DILocation(line: 2522, column: 4, scope: !6611)
!6642 = !DILocation(line: 2526, column: 11, scope: !6643)
!6643 = distinct !DILexicalBlock(scope: !6604, file: !3, line: 2526, column: 11)
!6644 = !DILocation(line: 2526, column: 35, scope: !6643)
!6645 = !DILocation(line: 2526, column: 11, scope: !6604)
!6646 = !DILocalVariable(name: "s", scope: !6647, file: !3, line: 2529, type: !1409)
!6647 = distinct !DILexicalBlock(scope: !6643, file: !3, line: 2527, column: 2)
!6648 = !DILocation(line: 2529, column: 9, scope: !6647)
!6649 = !DILocation(line: 2529, column: 13, scope: !6647)
!6650 = !DILocation(line: 2531, column: 8, scope: !6651)
!6651 = distinct !DILexicalBlock(scope: !6647, file: !3, line: 2531, column: 8)
!6652 = !DILocation(line: 2531, column: 11, scope: !6651)
!6653 = !DILocation(line: 2531, column: 19, scope: !6651)
!6654 = !DILocation(line: 2531, column: 16, scope: !6651)
!6655 = !DILocation(line: 2532, column: 8, scope: !6651)
!6656 = !DILocation(line: 2532, column: 27, scope: !6651)
!6657 = !DILocation(line: 2532, column: 11, scope: !6651)
!6658 = !DILocation(line: 2533, column: 8, scope: !6651)
!6659 = !DILocation(line: 2533, column: 23, scope: !6651)
!6660 = !DILocation(line: 2533, column: 11, scope: !6651)
!6661 = !DILocation(line: 2531, column: 8, scope: !6647)
!6662 = !DILocation(line: 2534, column: 19, scope: !6651)
!6663 = !DILocation(line: 2534, column: 6, scope: !6651)
!6664 = !DILocation(line: 2535, column: 2, scope: !6647)
!6665 = !DILocation(line: 2536, column: 39, scope: !6604)
!6666 = !DILocation(line: 2536, column: 42, scope: !6604)
!6667 = !DILocation(line: 2536, column: 13, scope: !6604)
!6668 = !DILocation(line: 2536, column: 11, scope: !6604)
!6669 = !DILocation(line: 2537, column: 11, scope: !6670)
!6670 = distinct !DILexicalBlock(scope: !6604, file: !3, line: 2537, column: 11)
!6671 = !DILocation(line: 2537, column: 11, scope: !6604)
!6672 = !DILocation(line: 2538, column: 11, scope: !6670)
!6673 = !DILocation(line: 2539, column: 4, scope: !6670)
!6674 = !DILocation(line: 2539, column: 7, scope: !6670)
!6675 = !DILocation(line: 2539, column: 12, scope: !6670)
!6676 = !DILocation(line: 2539, column: 19, scope: !6670)
!6677 = !DILocation(line: 2539, column: 22, scope: !6670)
!6678 = !DILocation(line: 2539, column: 28, scope: !6670)
!6679 = !DILocation(line: 2539, column: 35, scope: !6670)
!6680 = !DILocation(line: 2539, column: 41, scope: !6670)
!6681 = !DILocation(line: 2538, column: 2, scope: !6670)
!6682 = !DILocation(line: 2540, column: 5, scope: !6604)
!6683 = !DILocation(line: 2542, column: 33, scope: !6598)
!6684 = !DILocation(line: 2542, column: 36, scope: !6598)
!6685 = !DILocation(line: 2542, column: 11, scope: !6598)
!6686 = !DILocation(line: 2542, column: 9, scope: !6598)
!6687 = !DILocation(line: 2545, column: 3, scope: !6523)
!6688 = !DILocation(line: 2547, column: 20, scope: !6523)
!6689 = !DILocation(line: 2547, column: 3, scope: !6523)
!6690 = !DILocation(line: 2548, column: 10, scope: !6523)
!6691 = !DILocation(line: 2548, column: 3, scope: !6523)
!6692 = !DILocation(line: 2549, column: 1, scope: !6523)
!6693 = distinct !DISubprogram(name: "cfg_layout_redirect_edge_and_branch_force", scope: !3, file: !3, line: 2553, type: !2162, scopeLine: 2554, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!6694 = !DILocalVariable(name: "e", arg: 1, scope: !6693, file: !3, line: 2553, type: !1409)
!6695 = !DILocation(line: 2553, column: 49, scope: !6693)
!6696 = !DILocalVariable(name: "dest", arg: 2, scope: !6693, file: !3, line: 2553, type: !1392)
!6697 = !DILocation(line: 2553, column: 64, scope: !6693)
!6698 = !DILocalVariable(name: "redirected", scope: !6693, file: !3, line: 2555, type: !1409)
!6699 = !DILocation(line: 2555, column: 8, scope: !6693)
!6700 = !DILocation(line: 2555, column: 58, scope: !6693)
!6701 = !DILocation(line: 2555, column: 61, scope: !6693)
!6702 = !DILocation(line: 2555, column: 21, scope: !6693)
!6703 = !DILocation(line: 2557, column: 3, scope: !6693)
!6704 = !DILocation(line: 2558, column: 3, scope: !6693)
!6705 = distinct !DISubprogram(name: "cfg_layout_delete_block", scope: !3, file: !3, line: 2564, type: !2173, scopeLine: 2565, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!6706 = !DILocalVariable(name: "bb", arg: 1, scope: !6705, file: !3, line: 2564, type: !1392)
!6707 = !DILocation(line: 2564, column: 38, scope: !6705)
!6708 = !DILocalVariable(name: "insn", scope: !6705, file: !3, line: 2566, type: !889)
!6709 = !DILocation(line: 2566, column: 7, scope: !6705)
!6710 = !DILocalVariable(name: "next", scope: !6705, file: !3, line: 2566, type: !889)
!6711 = !DILocation(line: 2566, column: 13, scope: !6705)
!6712 = !DILocalVariable(name: "prev", scope: !6705, file: !3, line: 2566, type: !889)
!6713 = !DILocation(line: 2566, column: 19, scope: !6705)
!6714 = !DILocation(line: 2566, column: 26, scope: !6705)
!6715 = !DILocalVariable(name: "to", scope: !6705, file: !3, line: 2566, type: !6716)
!6716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !889, size: 64)
!6717 = !DILocation(line: 2566, column: 53, scope: !6705)
!6718 = !DILocalVariable(name: "remaints", scope: !6705, file: !3, line: 2566, type: !889)
!6719 = !DILocation(line: 2566, column: 57, scope: !6705)
!6720 = !DILocation(line: 2568, column: 7, scope: !6721)
!6721 = distinct !DILexicalBlock(scope: !6705, file: !3, line: 2568, column: 7)
!6722 = !DILocation(line: 2568, column: 11, scope: !6721)
!6723 = !DILocation(line: 2568, column: 14, scope: !6721)
!6724 = !DILocation(line: 2568, column: 19, scope: !6721)
!6725 = !DILocation(line: 2568, column: 7, scope: !6705)
!6726 = !DILocation(line: 2570, column: 14, scope: !6727)
!6727 = distinct !DILexicalBlock(scope: !6721, file: !3, line: 2569, column: 5)
!6728 = !DILocation(line: 2570, column: 12, scope: !6727)
!6729 = !DILocation(line: 2571, column: 11, scope: !6730)
!6730 = distinct !DILexicalBlock(scope: !6727, file: !3, line: 2571, column: 11)
!6731 = !DILocation(line: 2571, column: 11, scope: !6727)
!6732 = !DILocation(line: 2572, column: 21, scope: !6730)
!6733 = !DILocation(line: 2572, column: 25, scope: !6730)
!6734 = !DILocation(line: 2572, column: 28, scope: !6730)
!6735 = !DILocation(line: 2572, column: 33, scope: !6730)
!6736 = !DILocation(line: 2572, column: 2, scope: !6730)
!6737 = !DILocation(line: 2572, column: 19, scope: !6730)
!6738 = !DILocation(line: 2574, column: 18, scope: !6730)
!6739 = !DILocation(line: 2574, column: 22, scope: !6730)
!6740 = !DILocation(line: 2574, column: 25, scope: !6730)
!6741 = !DILocation(line: 2574, column: 30, scope: !6730)
!6742 = !DILocation(line: 2574, column: 2, scope: !6730)
!6743 = !DILocation(line: 2575, column: 40, scope: !6727)
!6744 = !DILocation(line: 2575, column: 7, scope: !6727)
!6745 = !DILocation(line: 2575, column: 38, scope: !6727)
!6746 = !DILocation(line: 2576, column: 14, scope: !6727)
!6747 = !DILocation(line: 2576, column: 18, scope: !6727)
!6748 = !DILocation(line: 2576, column: 21, scope: !6727)
!6749 = !DILocation(line: 2576, column: 26, scope: !6727)
!6750 = !DILocation(line: 2576, column: 12, scope: !6727)
!6751 = !DILocation(line: 2577, column: 7, scope: !6727)
!6752 = !DILocation(line: 2577, column: 14, scope: !6727)
!6753 = !DILocation(line: 2578, column: 9, scope: !6727)
!6754 = !DILocation(line: 2578, column: 7, scope: !6727)
!6755 = distinct !{!6755, !6751, !6753}
!6756 = !DILocation(line: 2579, column: 26, scope: !6727)
!6757 = !DILocation(line: 2579, column: 7, scope: !6727)
!6758 = !DILocation(line: 2579, column: 24, scope: !6727)
!6759 = !DILocation(line: 2580, column: 26, scope: !6727)
!6760 = !DILocation(line: 2580, column: 7, scope: !6727)
!6761 = !DILocation(line: 2580, column: 24, scope: !6727)
!6762 = !DILocation(line: 2581, column: 5, scope: !6727)
!6763 = !DILocation(line: 2582, column: 10, scope: !6705)
!6764 = !DILocation(line: 2582, column: 8, scope: !6705)
!6765 = !DILocation(line: 2583, column: 7, scope: !6766)
!6766 = distinct !DILexicalBlock(scope: !6705, file: !3, line: 2583, column: 7)
!6767 = !DILocation(line: 2583, column: 11, scope: !6766)
!6768 = !DILocation(line: 2583, column: 14, scope: !6766)
!6769 = !DILocation(line: 2583, column: 19, scope: !6766)
!6770 = !DILocation(line: 2583, column: 7, scope: !6705)
!6771 = !DILocation(line: 2585, column: 14, scope: !6772)
!6772 = distinct !DILexicalBlock(scope: !6766, file: !3, line: 2584, column: 5)
!6773 = !DILocation(line: 2585, column: 18, scope: !6772)
!6774 = !DILocation(line: 2585, column: 21, scope: !6772)
!6775 = !DILocation(line: 2585, column: 26, scope: !6772)
!6776 = !DILocation(line: 2585, column: 12, scope: !6772)
!6777 = !DILocation(line: 2586, column: 7, scope: !6772)
!6778 = !DILocation(line: 2586, column: 14, scope: !6772)
!6779 = !DILocation(line: 2588, column: 8, scope: !6780)
!6780 = distinct !DILexicalBlock(scope: !6781, file: !3, line: 2588, column: 8)
!6781 = distinct !DILexicalBlock(scope: !6772, file: !3, line: 2587, column: 2)
!6782 = !DILocation(line: 2588, column: 8, scope: !6781)
!6783 = !DILocation(line: 2590, column: 12, scope: !6784)
!6784 = distinct !DILexicalBlock(scope: !6785, file: !3, line: 2590, column: 12)
!6785 = distinct !DILexicalBlock(scope: !6780, file: !3, line: 2589, column: 6)
!6786 = !DILocation(line: 2590, column: 12, scope: !6785)
!6787 = !DILocation(line: 2591, column: 34, scope: !6784)
!6788 = !DILocation(line: 2591, column: 3, scope: !6784)
!6789 = !DILocation(line: 2591, column: 32, scope: !6784)
!6790 = !DILocation(line: 2593, column: 24, scope: !6784)
!6791 = !DILocation(line: 2593, column: 3, scope: !6784)
!6792 = !DILocation(line: 2593, column: 7, scope: !6784)
!6793 = !DILocation(line: 2593, column: 10, scope: !6784)
!6794 = !DILocation(line: 2593, column: 15, scope: !6784)
!6795 = !DILocation(line: 2593, column: 22, scope: !6784)
!6796 = !DILocation(line: 2594, column: 12, scope: !6797)
!6797 = distinct !DILexicalBlock(scope: !6785, file: !3, line: 2594, column: 12)
!6798 = !DILocation(line: 2594, column: 12, scope: !6785)
!6799 = !DILocation(line: 2595, column: 34, scope: !6797)
!6800 = !DILocation(line: 2595, column: 3, scope: !6797)
!6801 = !DILocation(line: 2595, column: 32, scope: !6797)
!6802 = !DILocation(line: 2596, column: 6, scope: !6785)
!6803 = !DILocation(line: 2597, column: 8, scope: !6804)
!6804 = distinct !DILexicalBlock(scope: !6781, file: !3, line: 2597, column: 8)
!6805 = !DILocation(line: 2597, column: 8, scope: !6781)
!6806 = !DILocation(line: 2598, column: 6, scope: !6804)
!6807 = !DILocation(line: 2599, column: 11, scope: !6781)
!6808 = !DILocation(line: 2599, column: 9, scope: !6781)
!6809 = distinct !{!6809, !6777, !6810}
!6810 = !DILocation(line: 2600, column: 2, scope: !6772)
!6811 = !DILocation(line: 2601, column: 11, scope: !6812)
!6812 = distinct !DILexicalBlock(scope: !6772, file: !3, line: 2601, column: 11)
!6813 = !DILocation(line: 2601, column: 15, scope: !6812)
!6814 = !DILocation(line: 2601, column: 18, scope: !6812)
!6815 = !DILocation(line: 2601, column: 23, scope: !6812)
!6816 = !DILocation(line: 2601, column: 11, scope: !6772)
!6817 = !DILocation(line: 2603, column: 11, scope: !6818)
!6818 = distinct !DILexicalBlock(scope: !6812, file: !3, line: 2602, column: 2)
!6819 = !DILocation(line: 2603, column: 9, scope: !6818)
!6820 = !DILocation(line: 2604, column: 23, scope: !6818)
!6821 = !DILocation(line: 2604, column: 27, scope: !6818)
!6822 = !DILocation(line: 2604, column: 30, scope: !6818)
!6823 = !DILocation(line: 2604, column: 35, scope: !6818)
!6824 = !DILocation(line: 2604, column: 4, scope: !6818)
!6825 = !DILocation(line: 2604, column: 21, scope: !6818)
!6826 = !DILocation(line: 2605, column: 37, scope: !6818)
!6827 = !DILocation(line: 2605, column: 4, scope: !6818)
!6828 = !DILocation(line: 2605, column: 35, scope: !6818)
!6829 = !DILocation(line: 2606, column: 4, scope: !6818)
!6830 = !DILocation(line: 2606, column: 11, scope: !6818)
!6831 = !DILocation(line: 2607, column: 13, scope: !6818)
!6832 = !DILocation(line: 2607, column: 11, scope: !6818)
!6833 = distinct !{!6833, !6829, !6831}
!6834 = !DILocation(line: 2608, column: 23, scope: !6818)
!6835 = !DILocation(line: 2608, column: 4, scope: !6818)
!6836 = !DILocation(line: 2608, column: 21, scope: !6818)
!6837 = !DILocation(line: 2609, column: 8, scope: !6838)
!6838 = distinct !DILexicalBlock(scope: !6818, file: !3, line: 2609, column: 8)
!6839 = !DILocation(line: 2609, column: 8, scope: !6818)
!6840 = !DILocation(line: 2610, column: 25, scope: !6838)
!6841 = !DILocation(line: 2610, column: 6, scope: !6838)
!6842 = !DILocation(line: 2610, column: 23, scope: !6838)
!6843 = !DILocation(line: 2612, column: 21, scope: !6838)
!6844 = !DILocation(line: 2612, column: 6, scope: !6838)
!6845 = !DILocation(line: 2613, column: 2, scope: !6818)
!6846 = !DILocation(line: 2614, column: 5, scope: !6772)
!6847 = !DILocation(line: 2615, column: 7, scope: !6848)
!6848 = distinct !DILexicalBlock(scope: !6705, file: !3, line: 2615, column: 7)
!6849 = !DILocation(line: 2615, column: 11, scope: !6848)
!6850 = !DILocation(line: 2615, column: 22, scope: !6848)
!6851 = !DILocation(line: 2615, column: 19, scope: !6848)
!6852 = !DILocation(line: 2615, column: 7, scope: !6705)
!6853 = !DILocation(line: 2616, column: 11, scope: !6848)
!6854 = !DILocation(line: 2616, column: 15, scope: !6848)
!6855 = !DILocation(line: 2616, column: 24, scope: !6848)
!6856 = !DILocation(line: 2616, column: 27, scope: !6848)
!6857 = !DILocation(line: 2616, column: 32, scope: !6848)
!6858 = !DILocation(line: 2616, column: 8, scope: !6848)
!6859 = !DILocation(line: 2616, column: 5, scope: !6848)
!6860 = !DILocation(line: 2618, column: 8, scope: !6848)
!6861 = !DILocation(line: 2620, column: 21, scope: !6705)
!6862 = !DILocation(line: 2620, column: 3, scope: !6705)
!6863 = !DILocation(line: 2622, column: 7, scope: !6864)
!6864 = distinct !DILexicalBlock(scope: !6705, file: !3, line: 2622, column: 7)
!6865 = !DILocation(line: 2622, column: 7, scope: !6705)
!6866 = !DILocation(line: 2623, column: 12, scope: !6864)
!6867 = !DILocation(line: 2623, column: 10, scope: !6864)
!6868 = !DILocation(line: 2623, column: 5, scope: !6864)
!6869 = !DILocation(line: 2625, column: 12, scope: !6864)
!6870 = !DILocation(line: 2625, column: 10, scope: !6864)
!6871 = !DILocation(line: 2626, column: 7, scope: !6872)
!6872 = distinct !DILexicalBlock(scope: !6705, file: !3, line: 2626, column: 7)
!6873 = !DILocation(line: 2626, column: 7, scope: !6705)
!6874 = !DILocation(line: 2627, column: 12, scope: !6872)
!6875 = !DILocation(line: 2627, column: 10, scope: !6872)
!6876 = !DILocation(line: 2627, column: 5, scope: !6872)
!6877 = !DILocation(line: 2629, column: 12, scope: !6872)
!6878 = !DILocation(line: 2629, column: 10, scope: !6872)
!6879 = !DILocation(line: 2631, column: 7, scope: !6880)
!6880 = distinct !DILexicalBlock(scope: !6705, file: !3, line: 2631, column: 7)
!6881 = !DILocation(line: 2631, column: 12, scope: !6880)
!6882 = !DILocation(line: 2631, column: 15, scope: !6880)
!6883 = !DILocation(line: 2631, column: 35, scope: !6880)
!6884 = !DILocation(line: 2631, column: 32, scope: !6880)
!6885 = !DILocation(line: 2631, column: 7, scope: !6705)
!6886 = !DILocation(line: 2633, column: 37, scope: !6887)
!6887 = distinct !DILexicalBlock(scope: !6880, file: !3, line: 2632, column: 5)
!6888 = !DILocation(line: 2633, column: 43, scope: !6887)
!6889 = !DILocation(line: 2633, column: 18, scope: !6887)
!6890 = !DILocation(line: 2633, column: 16, scope: !6887)
!6891 = !DILocation(line: 2634, column: 14, scope: !6887)
!6892 = !DILocation(line: 2634, column: 12, scope: !6887)
!6893 = !DILocation(line: 2635, column: 7, scope: !6887)
!6894 = !DILocation(line: 2635, column: 14, scope: !6887)
!6895 = !DILocation(line: 2636, column: 9, scope: !6887)
!6896 = !DILocation(line: 2636, column: 7, scope: !6887)
!6897 = distinct !{!6897, !6893, !6895}
!6898 = !DILocation(line: 2637, column: 27, scope: !6887)
!6899 = !DILocation(line: 2637, column: 26, scope: !6887)
!6900 = !DILocation(line: 2637, column: 7, scope: !6887)
!6901 = !DILocation(line: 2637, column: 24, scope: !6887)
!6902 = !DILocation(line: 2638, column: 12, scope: !6903)
!6903 = distinct !DILexicalBlock(scope: !6887, file: !3, line: 2638, column: 11)
!6904 = !DILocation(line: 2638, column: 11, scope: !6903)
!6905 = !DILocation(line: 2638, column: 11, scope: !6887)
!6906 = !DILocation(line: 2639, column: 20, scope: !6903)
!6907 = !DILocation(line: 2639, column: 2, scope: !6903)
!6908 = !DILocation(line: 2639, column: 18, scope: !6903)
!6909 = !DILocation(line: 2640, column: 13, scope: !6887)
!6910 = !DILocation(line: 2640, column: 8, scope: !6887)
!6911 = !DILocation(line: 2640, column: 11, scope: !6887)
!6912 = !DILocation(line: 2641, column: 5, scope: !6887)
!6913 = !DILocation(line: 2642, column: 1, scope: !6705)
!6914 = distinct !DISubprogram(name: "cfg_layout_split_block", scope: !3, file: !3, line: 2457, type: !2177, scopeLine: 2458, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!6915 = !DILocalVariable(name: "bb", arg: 1, scope: !6914, file: !3, line: 2457, type: !1392)
!6916 = !DILocation(line: 2457, column: 37, scope: !6914)
!6917 = !DILocalVariable(name: "insnp", arg: 2, scope: !6914, file: !3, line: 2457, type: !850)
!6918 = !DILocation(line: 2457, column: 47, scope: !6914)
!6919 = !DILocalVariable(name: "insn", scope: !6914, file: !3, line: 2459, type: !889)
!6920 = !DILocation(line: 2459, column: 7, scope: !6914)
!6921 = !DILocation(line: 2459, column: 20, scope: !6914)
!6922 = !DILocation(line: 2459, column: 14, scope: !6914)
!6923 = !DILocalVariable(name: "new_bb", scope: !6914, file: !3, line: 2460, type: !1392)
!6924 = !DILocation(line: 2460, column: 15, scope: !6914)
!6925 = !DILocation(line: 2460, column: 41, scope: !6914)
!6926 = !DILocation(line: 2460, column: 45, scope: !6914)
!6927 = !DILocation(line: 2460, column: 24, scope: !6914)
!6928 = !DILocation(line: 2462, column: 28, scope: !6914)
!6929 = !DILocation(line: 2462, column: 32, scope: !6914)
!6930 = !DILocation(line: 2462, column: 35, scope: !6914)
!6931 = !DILocation(line: 2462, column: 40, scope: !6914)
!6932 = !DILocation(line: 2462, column: 3, scope: !6914)
!6933 = !DILocation(line: 2462, column: 11, scope: !6914)
!6934 = !DILocation(line: 2462, column: 14, scope: !6914)
!6935 = !DILocation(line: 2462, column: 19, scope: !6914)
!6936 = !DILocation(line: 2462, column: 26, scope: !6914)
!6937 = !DILocation(line: 2463, column: 3, scope: !6914)
!6938 = !DILocation(line: 2463, column: 7, scope: !6914)
!6939 = !DILocation(line: 2463, column: 10, scope: !6914)
!6940 = !DILocation(line: 2463, column: 15, scope: !6914)
!6941 = !DILocation(line: 2463, column: 22, scope: !6914)
!6942 = !DILocation(line: 2465, column: 10, scope: !6914)
!6943 = !DILocation(line: 2465, column: 3, scope: !6914)
!6944 = distinct !DISubprogram(name: "cfg_layout_can_merge_blocks_p", scope: !3, file: !3, line: 2647, type: !2181, scopeLine: 2648, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!6945 = !DILocalVariable(name: "a", arg: 1, scope: !6944, file: !3, line: 2647, type: !1392)
!6946 = !DILocation(line: 2647, column: 44, scope: !6944)
!6947 = !DILocalVariable(name: "b", arg: 2, scope: !6944, file: !3, line: 2647, type: !1392)
!6948 = !DILocation(line: 2647, column: 59, scope: !6944)
!6949 = !DILocation(line: 2659, column: 7, scope: !6950)
!6950 = distinct !DILexicalBlock(scope: !6944, file: !3, line: 2659, column: 7)
!6951 = !DILocation(line: 2659, column: 27, scope: !6950)
!6952 = !DILocation(line: 2659, column: 24, scope: !6950)
!6953 = !DILocation(line: 2659, column: 7, scope: !6944)
!6954 = !DILocation(line: 2660, column: 5, scope: !6950)
!6955 = !DILocation(line: 2663, column: 26, scope: !6944)
!6956 = !DILocation(line: 2663, column: 11, scope: !6944)
!6957 = !DILocation(line: 2664, column: 4, scope: !6944)
!6958 = !DILocation(line: 2664, column: 20, scope: !6944)
!6959 = !DILocation(line: 2664, column: 7, scope: !6944)
!6960 = !DILocation(line: 2664, column: 26, scope: !6944)
!6961 = !DILocation(line: 2664, column: 23, scope: !6944)
!6962 = !DILocation(line: 2665, column: 4, scope: !6944)
!6963 = !DILocation(line: 2665, column: 22, scope: !6944)
!6964 = !DILocation(line: 2665, column: 7, scope: !6944)
!6965 = !DILocation(line: 2665, column: 25, scope: !6944)
!6966 = !DILocation(line: 2666, column: 4, scope: !6944)
!6967 = !DILocation(line: 2666, column: 7, scope: !6944)
!6968 = !DILocation(line: 2666, column: 12, scope: !6944)
!6969 = !DILocation(line: 2666, column: 9, scope: !6944)
!6970 = !DILocation(line: 2668, column: 4, scope: !6944)
!6971 = !DILocation(line: 2668, column: 27, scope: !6944)
!6972 = !DILocation(line: 2668, column: 9, scope: !6944)
!6973 = !DILocation(line: 2668, column: 31, scope: !6944)
!6974 = !DILocation(line: 2668, column: 37, scope: !6944)
!6975 = !DILocation(line: 2669, column: 4, scope: !6944)
!6976 = !DILocation(line: 2669, column: 7, scope: !6944)
!6977 = !DILocation(line: 2669, column: 12, scope: !6944)
!6978 = !DILocation(line: 2669, column: 9, scope: !6944)
!6979 = !DILocation(line: 2669, column: 28, scope: !6944)
!6980 = !DILocation(line: 2669, column: 31, scope: !6944)
!6981 = !DILocation(line: 2669, column: 36, scope: !6944)
!6982 = !DILocation(line: 2669, column: 33, scope: !6944)
!6983 = !DILocation(line: 2673, column: 4, scope: !6944)
!6984 = !DILocation(line: 2673, column: 9, scope: !6944)
!6985 = !DILocation(line: 2674, column: 8, scope: !6944)
!6986 = !DILocation(line: 2674, column: 14, scope: !6944)
!6987 = !DILocation(line: 2674, column: 23, scope: !6944)
!6988 = !DILocation(line: 2674, column: 26, scope: !6944)
!6989 = !DILocation(line: 2674, column: 12, scope: !6944)
!6990 = !DILocation(line: 2675, column: 21, scope: !6944)
!6991 = !DILocation(line: 2675, column: 7, scope: !6944)
!6992 = !DILocation(line: 2675, column: 47, scope: !6944)
!6993 = !DILocation(line: 2675, column: 35, scope: !6944)
!6994 = !DILocation(line: 0, scope: !6944)
!6995 = !DILocation(line: 2663, column: 10, scope: !6944)
!6996 = !DILocation(line: 2663, column: 3, scope: !6944)
!6997 = !DILocation(line: 2676, column: 1, scope: !6944)
!6998 = distinct !DISubprogram(name: "cfg_layout_merge_blocks", scope: !3, file: !3, line: 2681, type: !2186, scopeLine: 2682, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!6999 = !DILocalVariable(name: "a", arg: 1, scope: !6998, file: !3, line: 2681, type: !1392)
!7000 = !DILocation(line: 2681, column: 38, scope: !6998)
!7001 = !DILocalVariable(name: "b", arg: 2, scope: !6998, file: !3, line: 2681, type: !1392)
!7002 = !DILocation(line: 2681, column: 53, scope: !6998)
!7003 = !DILocation(line: 2687, column: 7, scope: !7004)
!7004 = distinct !DILexicalBlock(scope: !6998, file: !3, line: 2687, column: 7)
!7005 = !DILocation(line: 2687, column: 7, scope: !6998)
!7006 = !DILocation(line: 2688, column: 14, scope: !7004)
!7007 = !DILocation(line: 2688, column: 61, scope: !7004)
!7008 = !DILocation(line: 2688, column: 64, scope: !7004)
!7009 = !DILocation(line: 2688, column: 71, scope: !7004)
!7010 = !DILocation(line: 2688, column: 74, scope: !7004)
!7011 = !DILocation(line: 2688, column: 5, scope: !7004)
!7012 = !DILocation(line: 2691, column: 7, scope: !7013)
!7013 = distinct !DILexicalBlock(scope: !6998, file: !3, line: 2691, column: 7)
!7014 = !DILocation(line: 2691, column: 7, scope: !6998)
!7015 = !DILocation(line: 2693, column: 20, scope: !7016)
!7016 = distinct !DILexicalBlock(scope: !7013, file: !3, line: 2692, column: 5)
!7017 = !DILocation(line: 2693, column: 7, scope: !7016)
!7018 = !DILocation(line: 2694, column: 5, scope: !7016)
!7019 = !DILocation(line: 2698, column: 7, scope: !7020)
!7020 = distinct !DILexicalBlock(scope: !6998, file: !3, line: 2698, column: 7)
!7021 = !DILocation(line: 2698, column: 7, scope: !6998)
!7022 = !DILocation(line: 2699, column: 37, scope: !7020)
!7023 = !DILocation(line: 2699, column: 55, scope: !7020)
!7024 = !DILocation(line: 2699, column: 5, scope: !7020)
!7025 = !DILocation(line: 2700, column: 3, scope: !6998)
!7026 = !DILocation(line: 2704, column: 8, scope: !7027)
!7027 = distinct !DILexicalBlock(scope: !6998, file: !3, line: 2704, column: 7)
!7028 = !DILocation(line: 2704, column: 17, scope: !7027)
!7029 = !DILocation(line: 2704, column: 20, scope: !7027)
!7030 = !DILocation(line: 2704, column: 38, scope: !7027)
!7031 = !DILocation(line: 2704, column: 7, scope: !6998)
!7032 = !DILocalVariable(name: "insn", scope: !7033, file: !3, line: 2706, type: !889)
!7033 = distinct !DILexicalBlock(scope: !7027, file: !3, line: 2705, column: 5)
!7034 = !DILocation(line: 2706, column: 11, scope: !7033)
!7035 = !DILocation(line: 2706, column: 18, scope: !7033)
!7036 = !DILocalVariable(name: "end", scope: !7033, file: !3, line: 2706, type: !889)
!7037 = !DILocation(line: 2706, column: 30, scope: !7033)
!7038 = !DILocation(line: 2706, column: 36, scope: !7033)
!7039 = !DILocalVariable(name: "goto_locus", scope: !7033, file: !3, line: 2707, type: !804)
!7040 = !DILocation(line: 2707, column: 11, scope: !7033)
!7041 = !DILocation(line: 2707, column: 24, scope: !7033)
!7042 = !DILocation(line: 2707, column: 42, scope: !7033)
!7043 = !DILocation(line: 2709, column: 7, scope: !7033)
!7044 = !DILocation(line: 2709, column: 14, scope: !7033)
!7045 = !DILocation(line: 2709, column: 22, scope: !7033)
!7046 = !DILocation(line: 2709, column: 19, scope: !7033)
!7047 = !DILocation(line: 2709, column: 26, scope: !7033)
!7048 = !DILocation(line: 2709, column: 31, scope: !7033)
!7049 = !DILocation(line: 2709, column: 45, scope: !7033)
!7050 = !DILocation(line: 2709, column: 48, scope: !7033)
!7051 = !DILocation(line: 2709, column: 68, scope: !7033)
!7052 = !DILocation(line: 0, scope: !7033)
!7053 = !DILocation(line: 2710, column: 9, scope: !7033)
!7054 = !DILocation(line: 2710, column: 7, scope: !7033)
!7055 = distinct !{!7055, !7043, !7053}
!7056 = !DILocation(line: 2711, column: 11, scope: !7057)
!7057 = distinct !DILexicalBlock(scope: !7033, file: !3, line: 2711, column: 11)
!7058 = !DILocation(line: 2711, column: 19, scope: !7057)
!7059 = !DILocation(line: 2711, column: 16, scope: !7057)
!7060 = !DILocation(line: 2711, column: 23, scope: !7057)
!7061 = !DILocation(line: 2711, column: 38, scope: !7057)
!7062 = !DILocation(line: 2711, column: 59, scope: !7057)
!7063 = !DILocation(line: 2711, column: 26, scope: !7057)
!7064 = !DILocation(line: 2711, column: 11, scope: !7033)
!7065 = !DILocation(line: 2712, column: 13, scope: !7057)
!7066 = !DILocation(line: 2712, column: 2, scope: !7057)
!7067 = !DILocation(line: 2715, column: 11, scope: !7068)
!7068 = distinct !DILexicalBlock(scope: !7057, file: !3, line: 2714, column: 2)
!7069 = !DILocation(line: 2715, column: 9, scope: !7068)
!7070 = !DILocation(line: 2716, column: 10, scope: !7068)
!7071 = !DILocation(line: 2716, column: 8, scope: !7068)
!7072 = !DILocation(line: 2717, column: 4, scope: !7068)
!7073 = !DILocation(line: 2717, column: 11, scope: !7068)
!7074 = !DILocation(line: 2717, column: 19, scope: !7068)
!7075 = !DILocation(line: 2717, column: 16, scope: !7068)
!7076 = !DILocation(line: 2717, column: 23, scope: !7068)
!7077 = !DILocation(line: 2717, column: 27, scope: !7068)
!7078 = !DILocation(line: 2717, column: 26, scope: !7068)
!7079 = !DILocation(line: 0, scope: !7068)
!7080 = !DILocation(line: 2718, column: 13, scope: !7068)
!7081 = !DILocation(line: 2718, column: 11, scope: !7068)
!7082 = distinct !{!7082, !7072, !7080}
!7083 = !DILocation(line: 2719, column: 8, scope: !7084)
!7084 = distinct !DILexicalBlock(scope: !7068, file: !3, line: 2719, column: 8)
!7085 = !DILocation(line: 2719, column: 16, scope: !7084)
!7086 = !DILocation(line: 2719, column: 13, scope: !7084)
!7087 = !DILocation(line: 2719, column: 20, scope: !7084)
!7088 = !DILocation(line: 2719, column: 23, scope: !7084)
!7089 = !DILocation(line: 2719, column: 43, scope: !7084)
!7090 = !DILocation(line: 2720, column: 8, scope: !7084)
!7091 = !DILocation(line: 2720, column: 23, scope: !7084)
!7092 = !DILocation(line: 2720, column: 44, scope: !7084)
!7093 = !DILocation(line: 2720, column: 11, scope: !7084)
!7094 = !DILocation(line: 2719, column: 8, scope: !7068)
!7095 = !DILocation(line: 2721, column: 17, scope: !7084)
!7096 = !DILocation(line: 2721, column: 6, scope: !7084)
!7097 = !DILocation(line: 2723, column: 11, scope: !7098)
!7098 = distinct !DILexicalBlock(scope: !7033, file: !3, line: 2723, column: 11)
!7099 = !DILocation(line: 2723, column: 11, scope: !7033)
!7100 = !DILocation(line: 2725, column: 40, scope: !7101)
!7101 = distinct !DILexicalBlock(scope: !7098, file: !3, line: 2724, column: 2)
!7102 = !DILocation(line: 2725, column: 52, scope: !7101)
!7103 = !DILocation(line: 2725, column: 64, scope: !7101)
!7104 = !DILocation(line: 2725, column: 17, scope: !7101)
!7105 = !DILocation(line: 2725, column: 4, scope: !7101)
!7106 = !DILocation(line: 2725, column: 15, scope: !7101)
!7107 = !DILocation(line: 2726, column: 32, scope: !7101)
!7108 = !DILocation(line: 2726, column: 4, scope: !7101)
!7109 = !DILocation(line: 2726, column: 30, scope: !7101)
!7110 = !DILocation(line: 2727, column: 2, scope: !7101)
!7111 = !DILocation(line: 2728, column: 5, scope: !7033)
!7112 = !DILocation(line: 2731, column: 7, scope: !7113)
!7113 = distinct !DILexicalBlock(scope: !6998, file: !3, line: 2731, column: 7)
!7114 = !DILocation(line: 2731, column: 10, scope: !7113)
!7115 = !DILocation(line: 2731, column: 13, scope: !7113)
!7116 = !DILocation(line: 2731, column: 18, scope: !7113)
!7117 = !DILocation(line: 2731, column: 7, scope: !6998)
!7118 = !DILocalVariable(name: "first", scope: !7119, file: !3, line: 2733, type: !889)
!7119 = distinct !DILexicalBlock(scope: !7113, file: !3, line: 2732, column: 5)
!7120 = !DILocation(line: 2733, column: 11, scope: !7119)
!7121 = !DILocation(line: 2733, column: 19, scope: !7119)
!7122 = !DILocalVariable(name: "last", scope: !7119, file: !3, line: 2733, type: !889)
!7123 = !DILocation(line: 2733, column: 31, scope: !7119)
!7124 = !DILocation(line: 2735, column: 37, scope: !7119)
!7125 = !DILocation(line: 2735, column: 40, scope: !7119)
!7126 = !DILocation(line: 2735, column: 43, scope: !7119)
!7127 = !DILocation(line: 2735, column: 48, scope: !7119)
!7128 = !DILocation(line: 2735, column: 56, scope: !7119)
!7129 = !DILocation(line: 2735, column: 68, scope: !7119)
!7130 = !DILocation(line: 2735, column: 14, scope: !7119)
!7131 = !DILocation(line: 2735, column: 12, scope: !7119)
!7132 = !DILocation(line: 2736, column: 26, scope: !7119)
!7133 = !DILocation(line: 2736, column: 45, scope: !7119)
!7134 = !DILocation(line: 2736, column: 7, scope: !7119)
!7135 = !DILocation(line: 2737, column: 7, scope: !7119)
!7136 = !DILocation(line: 2737, column: 10, scope: !7119)
!7137 = !DILocation(line: 2737, column: 13, scope: !7119)
!7138 = !DILocation(line: 2737, column: 18, scope: !7119)
!7139 = !DILocation(line: 2737, column: 25, scope: !7119)
!7140 = !DILocation(line: 2738, column: 5, scope: !7119)
!7141 = !DILocation(line: 2741, column: 7, scope: !7142)
!7142 = distinct !DILexicalBlock(scope: !6998, file: !3, line: 2741, column: 7)
!7143 = !DILocation(line: 2741, column: 33, scope: !7142)
!7144 = !DILocation(line: 2741, column: 30, scope: !7142)
!7145 = !DILocation(line: 2741, column: 7, scope: !6998)
!7146 = !DILocalVariable(name: "first", scope: !7147, file: !3, line: 2743, type: !889)
!7147 = distinct !DILexicalBlock(scope: !7142, file: !3, line: 2742, column: 5)
!7148 = !DILocation(line: 2743, column: 11, scope: !7147)
!7149 = !DILocation(line: 2743, column: 38, scope: !7147)
!7150 = !DILocation(line: 2743, column: 51, scope: !7147)
!7151 = !DILocation(line: 2743, column: 19, scope: !7147)
!7152 = !DILocation(line: 2745, column: 30, scope: !7147)
!7153 = !DILocation(line: 2745, column: 37, scope: !7147)
!7154 = !DILocation(line: 2745, column: 49, scope: !7147)
!7155 = !DILocation(line: 2745, column: 7, scope: !7147)
!7156 = !DILocation(line: 2747, column: 12, scope: !7157)
!7157 = distinct !DILexicalBlock(scope: !7147, file: !3, line: 2747, column: 11)
!7158 = !DILocation(line: 2747, column: 11, scope: !7147)
!7159 = !DILocation(line: 2748, column: 10, scope: !7157)
!7160 = !DILocation(line: 2748, column: 8, scope: !7157)
!7161 = !DILocation(line: 2748, column: 2, scope: !7157)
!7162 = !DILocation(line: 2749, column: 7, scope: !7147)
!7163 = !DILocation(line: 2750, column: 7, scope: !7147)
!7164 = !DILocation(line: 2750, column: 19, scope: !7147)
!7165 = !DILocation(line: 2754, column: 33, scope: !7147)
!7166 = !DILocation(line: 2755, column: 5, scope: !7147)
!7167 = !DILocation(line: 2756, column: 5, scope: !7147)
!7168 = !DILocation(line: 2754, column: 7, scope: !7147)
!7169 = !DILocation(line: 2758, column: 20, scope: !7147)
!7170 = !DILocation(line: 2758, column: 7, scope: !7147)
!7171 = !DILocation(line: 2759, column: 5, scope: !7147)
!7172 = !DILocalVariable(name: "insn", scope: !7173, file: !3, line: 2763, type: !889)
!7173 = distinct !DILexicalBlock(scope: !7142, file: !3, line: 2762, column: 5)
!7174 = !DILocation(line: 2763, column: 11, scope: !7173)
!7175 = !DILocation(line: 2765, column: 33, scope: !7173)
!7176 = !DILocation(line: 2765, column: 46, scope: !7173)
!7177 = !DILocation(line: 2765, column: 58, scope: !7173)
!7178 = !DILocation(line: 2765, column: 7, scope: !7173)
!7179 = !DILocation(line: 2767, column: 14, scope: !7173)
!7180 = !DILocation(line: 2767, column: 12, scope: !7173)
!7181 = !DILocation(line: 2769, column: 12, scope: !7182)
!7182 = distinct !DILexicalBlock(scope: !7173, file: !3, line: 2769, column: 11)
!7183 = !DILocation(line: 2769, column: 11, scope: !7173)
!7184 = !DILocation(line: 2770, column: 9, scope: !7182)
!7185 = !DILocation(line: 2770, column: 7, scope: !7182)
!7186 = !DILocation(line: 2770, column: 2, scope: !7182)
!7187 = !DILocation(line: 2771, column: 7, scope: !7173)
!7188 = !DILocation(line: 2772, column: 7, scope: !7173)
!7189 = !DILocation(line: 2772, column: 19, scope: !7173)
!7190 = !DILocation(line: 2773, column: 20, scope: !7173)
!7191 = !DILocation(line: 2773, column: 7, scope: !7173)
!7192 = !DILocation(line: 2773, column: 18, scope: !7173)
!7193 = !DILocation(line: 2774, column: 20, scope: !7173)
!7194 = !DILocation(line: 2774, column: 7, scope: !7173)
!7195 = !DILocation(line: 2777, column: 17, scope: !6998)
!7196 = !DILocation(line: 2777, column: 20, scope: !6998)
!7197 = !DILocation(line: 2777, column: 3, scope: !6998)
!7198 = !DILocation(line: 2780, column: 7, scope: !7199)
!7199 = distinct !DILexicalBlock(scope: !6998, file: !3, line: 2780, column: 7)
!7200 = !DILocation(line: 2780, column: 10, scope: !7199)
!7201 = !DILocation(line: 2780, column: 13, scope: !7199)
!7202 = !DILocation(line: 2780, column: 18, scope: !7199)
!7203 = !DILocation(line: 2780, column: 7, scope: !6998)
!7204 = !DILocation(line: 2782, column: 12, scope: !7205)
!7205 = distinct !DILexicalBlock(scope: !7206, file: !3, line: 2782, column: 11)
!7206 = distinct !DILexicalBlock(scope: !7199, file: !3, line: 2781, column: 5)
!7207 = !DILocation(line: 2782, column: 15, scope: !7205)
!7208 = !DILocation(line: 2782, column: 18, scope: !7205)
!7209 = !DILocation(line: 2782, column: 23, scope: !7205)
!7210 = !DILocation(line: 2782, column: 11, scope: !7206)
!7211 = !DILocation(line: 2783, column: 22, scope: !7205)
!7212 = !DILocation(line: 2783, column: 25, scope: !7205)
!7213 = !DILocation(line: 2783, column: 28, scope: !7205)
!7214 = !DILocation(line: 2783, column: 33, scope: !7205)
!7215 = !DILocation(line: 2783, column: 2, scope: !7205)
!7216 = !DILocation(line: 2783, column: 5, scope: !7205)
!7217 = !DILocation(line: 2783, column: 8, scope: !7205)
!7218 = !DILocation(line: 2783, column: 13, scope: !7205)
!7219 = !DILocation(line: 2783, column: 20, scope: !7205)
!7220 = !DILocalVariable(name: "last", scope: !7221, file: !3, line: 2786, type: !889)
!7221 = distinct !DILexicalBlock(scope: !7205, file: !3, line: 2785, column: 2)
!7222 = !DILocation(line: 2786, column: 8, scope: !7221)
!7223 = !DILocation(line: 2786, column: 15, scope: !7221)
!7224 = !DILocation(line: 2786, column: 18, scope: !7221)
!7225 = !DILocation(line: 2786, column: 21, scope: !7221)
!7226 = !DILocation(line: 2786, column: 26, scope: !7221)
!7227 = !DILocation(line: 2788, column: 4, scope: !7221)
!7228 = !DILocation(line: 2788, column: 11, scope: !7221)
!7229 = !DILocation(line: 2789, column: 13, scope: !7221)
!7230 = !DILocation(line: 2789, column: 11, scope: !7221)
!7231 = distinct !{!7231, !7227, !7229}
!7232 = !DILocation(line: 2790, column: 23, scope: !7221)
!7233 = !DILocation(line: 2790, column: 26, scope: !7221)
!7234 = !DILocation(line: 2790, column: 29, scope: !7221)
!7235 = !DILocation(line: 2790, column: 34, scope: !7221)
!7236 = !DILocation(line: 2790, column: 4, scope: !7221)
!7237 = !DILocation(line: 2790, column: 21, scope: !7221)
!7238 = !DILocation(line: 2791, column: 36, scope: !7221)
!7239 = !DILocation(line: 2791, column: 4, scope: !7221)
!7240 = !DILocation(line: 2791, column: 34, scope: !7221)
!7241 = !DILocation(line: 2793, column: 7, scope: !7206)
!7242 = !DILocation(line: 2793, column: 10, scope: !7206)
!7243 = !DILocation(line: 2793, column: 13, scope: !7206)
!7244 = !DILocation(line: 2793, column: 18, scope: !7206)
!7245 = !DILocation(line: 2793, column: 25, scope: !7206)
!7246 = !DILocation(line: 2794, column: 5, scope: !7206)
!7247 = !DILocation(line: 2796, column: 7, scope: !7248)
!7248 = distinct !DILexicalBlock(scope: !6998, file: !3, line: 2796, column: 7)
!7249 = !DILocation(line: 2796, column: 7, scope: !6998)
!7250 = !DILocation(line: 2797, column: 14, scope: !7248)
!7251 = !DILocation(line: 2798, column: 7, scope: !7248)
!7252 = !DILocation(line: 2798, column: 10, scope: !7248)
!7253 = !DILocation(line: 2798, column: 17, scope: !7248)
!7254 = !DILocation(line: 2798, column: 20, scope: !7248)
!7255 = !DILocation(line: 2797, column: 5, scope: !7248)
!7256 = !DILocation(line: 2799, column: 1, scope: !6998)
!7257 = distinct !DISubprogram(name: "cfg_layout_split_edge", scope: !3, file: !3, line: 2804, type: !2209, scopeLine: 2805, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!7258 = !DILocalVariable(name: "e", arg: 1, scope: !7257, file: !3, line: 2804, type: !1409)
!7259 = !DILocation(line: 2804, column: 29, scope: !7257)
!7260 = !DILocalVariable(name: "new_bb", scope: !7257, file: !3, line: 2806, type: !1392)
!7261 = !DILocation(line: 2806, column: 15, scope: !7257)
!7262 = !DILocation(line: 2807, column: 25, scope: !7257)
!7263 = !DILocation(line: 2807, column: 28, scope: !7257)
!7264 = !DILocation(line: 2807, column: 35, scope: !7257)
!7265 = !DILocation(line: 2807, column: 32, scope: !7257)
!7266 = !DILocation(line: 2808, column: 6, scope: !7257)
!7267 = !DILocation(line: 2808, column: 36, scope: !7257)
!7268 = !DILocation(line: 2809, column: 14, scope: !7257)
!7269 = !DILocation(line: 2809, column: 17, scope: !7257)
!7270 = !DILocation(line: 2807, column: 5, scope: !7257)
!7271 = !DILocation(line: 2811, column: 7, scope: !7272)
!7272 = distinct !DILexicalBlock(scope: !7257, file: !3, line: 2811, column: 7)
!7273 = !DILocation(line: 2811, column: 10, scope: !7272)
!7274 = !DILocation(line: 2811, column: 18, scope: !7272)
!7275 = !DILocation(line: 2811, column: 15, scope: !7272)
!7276 = !DILocation(line: 2811, column: 7, scope: !7257)
!7277 = !DILocation(line: 2812, column: 5, scope: !7272)
!7278 = !DILocalVariable(name: "bb_", scope: !7279, file: !3, line: 2812, type: !1392)
!7279 = distinct !DILexicalBlock(scope: !7272, file: !3, line: 2812, column: 5)
!7280 = !DILocation(line: 2812, column: 5, scope: !7279)
!7281 = !DILocation(line: 2814, column: 5, scope: !7272)
!7282 = !DILocalVariable(name: "bb_", scope: !7283, file: !3, line: 2814, type: !1392)
!7283 = distinct !DILexicalBlock(scope: !7272, file: !3, line: 2814, column: 5)
!7284 = !DILocation(line: 2814, column: 5, scope: !7283)
!7285 = !DILocation(line: 2815, column: 14, scope: !7257)
!7286 = !DILocation(line: 2815, column: 22, scope: !7257)
!7287 = !DILocation(line: 2815, column: 25, scope: !7257)
!7288 = !DILocation(line: 2815, column: 3, scope: !7257)
!7289 = !DILocation(line: 2816, column: 35, scope: !7257)
!7290 = !DILocation(line: 2816, column: 38, scope: !7257)
!7291 = !DILocation(line: 2816, column: 3, scope: !7257)
!7292 = !DILocation(line: 2818, column: 10, scope: !7257)
!7293 = !DILocation(line: 2818, column: 3, scope: !7257)
!7294 = distinct !DISubprogram(name: "rtl_lv_add_condition_to_bb", scope: !3, file: !3, line: 3008, type: !2250, scopeLine: 3011, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!7295 = !DILocalVariable(name: "first_head", arg: 1, scope: !7294, file: !3, line: 3008, type: !1392)
!7296 = !DILocation(line: 3008, column: 41, scope: !7294)
!7297 = !DILocalVariable(name: "second_head", arg: 2, scope: !7294, file: !3, line: 3009, type: !1392)
!7298 = !DILocation(line: 3009, column: 20, scope: !7294)
!7299 = !DILocalVariable(name: "cond_bb", arg: 3, scope: !7294, file: !3, line: 3010, type: !1392)
!7300 = !DILocation(line: 3010, column: 20, scope: !7294)
!7301 = !DILocalVariable(name: "comp_rtx", arg: 4, scope: !7294, file: !3, line: 3010, type: !850)
!7302 = !DILocation(line: 3010, column: 35, scope: !7294)
!7303 = !DILocalVariable(name: "label", scope: !7294, file: !3, line: 3012, type: !889)
!7304 = !DILocation(line: 3012, column: 7, scope: !7294)
!7305 = !DILocalVariable(name: "seq", scope: !7294, file: !3, line: 3012, type: !889)
!7306 = !DILocation(line: 3012, column: 14, scope: !7294)
!7307 = !DILocalVariable(name: "jump", scope: !7294, file: !3, line: 3012, type: !889)
!7308 = !DILocation(line: 3012, column: 19, scope: !7294)
!7309 = !DILocalVariable(name: "op0", scope: !7294, file: !3, line: 3013, type: !889)
!7310 = !DILocation(line: 3013, column: 7, scope: !7294)
!7311 = !DILocation(line: 3013, column: 13, scope: !7294)
!7312 = !DILocalVariable(name: "op1", scope: !7294, file: !3, line: 3014, type: !889)
!7313 = !DILocation(line: 3014, column: 7, scope: !7294)
!7314 = !DILocation(line: 3014, column: 13, scope: !7294)
!7315 = !DILocalVariable(name: "comp", scope: !7294, file: !3, line: 3015, type: !397)
!7316 = !DILocation(line: 3015, column: 17, scope: !7294)
!7317 = !DILocation(line: 3015, column: 24, scope: !7294)
!7318 = !DILocalVariable(name: "mode", scope: !7294, file: !3, line: 3016, type: !5)
!7319 = !DILocation(line: 3016, column: 21, scope: !7294)
!7320 = !DILocation(line: 3019, column: 24, scope: !7294)
!7321 = !DILocation(line: 3019, column: 11, scope: !7294)
!7322 = !DILocation(line: 3019, column: 9, scope: !7294)
!7323 = !DILocation(line: 3020, column: 10, scope: !7294)
!7324 = !DILocation(line: 3020, column: 8, scope: !7294)
!7325 = !DILocation(line: 3021, column: 7, scope: !7326)
!7326 = distinct !DILexicalBlock(scope: !7294, file: !3, line: 3021, column: 7)
!7327 = !DILocation(line: 3021, column: 12, scope: !7326)
!7328 = !DILocation(line: 3021, column: 7, scope: !7294)
!7329 = !DILocation(line: 3022, column: 12, scope: !7326)
!7330 = !DILocation(line: 3022, column: 10, scope: !7326)
!7331 = !DILocation(line: 3022, column: 5, scope: !7326)
!7332 = !DILocation(line: 3024, column: 3, scope: !7294)
!7333 = !DILocation(line: 3025, column: 24, scope: !7294)
!7334 = !DILocation(line: 3025, column: 9, scope: !7294)
!7335 = !DILocation(line: 3025, column: 7, scope: !7294)
!7336 = !DILocation(line: 3026, column: 24, scope: !7294)
!7337 = !DILocation(line: 3026, column: 9, scope: !7294)
!7338 = !DILocation(line: 3026, column: 7, scope: !7294)
!7339 = !DILocation(line: 3027, column: 28, scope: !7294)
!7340 = !DILocation(line: 3027, column: 33, scope: !7294)
!7341 = !DILocation(line: 3027, column: 38, scope: !7294)
!7342 = !DILocation(line: 3028, column: 7, scope: !7294)
!7343 = !DILocation(line: 3028, column: 33, scope: !7294)
!7344 = !DILocation(line: 3027, column: 3, scope: !7294)
!7345 = !DILocation(line: 3029, column: 10, scope: !7294)
!7346 = !DILocation(line: 3029, column: 8, scope: !7294)
!7347 = !DILocation(line: 3030, column: 23, scope: !7294)
!7348 = !DILocation(line: 3030, column: 3, scope: !7294)
!7349 = !DILocation(line: 3030, column: 21, scope: !7294)
!7350 = !DILocation(line: 3031, column: 3, scope: !7294)
!7351 = !DILocation(line: 3031, column: 22, scope: !7294)
!7352 = !DILocation(line: 3032, column: 9, scope: !7294)
!7353 = !DILocation(line: 3032, column: 7, scope: !7294)
!7354 = !DILocation(line: 3033, column: 3, scope: !7294)
!7355 = !DILocation(line: 3036, column: 19, scope: !7294)
!7356 = !DILocation(line: 3036, column: 24, scope: !7294)
!7357 = !DILocation(line: 3036, column: 3, scope: !7294)
!7358 = !DILocation(line: 3037, column: 1, scope: !7294)
!7359 = distinct !DISubprogram(name: "rtl_extract_cond_bb_edges", scope: !3, file: !3, line: 3044, type: !2258, scopeLine: 3046, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!7360 = !DILocalVariable(name: "b", arg: 1, scope: !7359, file: !3, line: 3044, type: !1392)
!7361 = !DILocation(line: 3044, column: 40, scope: !7359)
!7362 = !DILocalVariable(name: "branch_edge", arg: 2, scope: !7359, file: !3, line: 3044, type: !2260)
!7363 = !DILocation(line: 3044, column: 49, scope: !7359)
!7364 = !DILocalVariable(name: "fallthru_edge", arg: 3, scope: !7359, file: !3, line: 3045, type: !2260)
!7365 = !DILocation(line: 3045, column: 13, scope: !7359)
!7366 = !DILocalVariable(name: "e", scope: !7359, file: !3, line: 3047, type: !1409)
!7367 = !DILocation(line: 3047, column: 8, scope: !7359)
!7368 = !DILocation(line: 3047, column: 12, scope: !7359)
!7369 = !DILocation(line: 3049, column: 7, scope: !7370)
!7370 = distinct !DILexicalBlock(scope: !7359, file: !3, line: 3049, column: 7)
!7371 = !DILocation(line: 3049, column: 10, scope: !7370)
!7372 = !DILocation(line: 3049, column: 16, scope: !7370)
!7373 = !DILocation(line: 3049, column: 7, scope: !7359)
!7374 = !DILocation(line: 3051, column: 24, scope: !7375)
!7375 = distinct !DILexicalBlock(scope: !7370, file: !3, line: 3050, column: 5)
!7376 = !DILocation(line: 3051, column: 8, scope: !7375)
!7377 = !DILocation(line: 3051, column: 22, scope: !7375)
!7378 = !DILocation(line: 3052, column: 22, scope: !7375)
!7379 = !DILocation(line: 3052, column: 8, scope: !7375)
!7380 = !DILocation(line: 3052, column: 20, scope: !7375)
!7381 = !DILocation(line: 3053, column: 5, scope: !7375)
!7382 = !DILocation(line: 3056, column: 22, scope: !7383)
!7383 = distinct !DILexicalBlock(scope: !7370, file: !3, line: 3055, column: 5)
!7384 = !DILocation(line: 3056, column: 8, scope: !7383)
!7385 = !DILocation(line: 3056, column: 20, scope: !7383)
!7386 = !DILocation(line: 3057, column: 24, scope: !7383)
!7387 = !DILocation(line: 3057, column: 8, scope: !7383)
!7388 = !DILocation(line: 3057, column: 22, scope: !7383)
!7389 = !DILocation(line: 3059, column: 1, scope: !7359)
!7390 = distinct !DISubprogram(name: "ei_end_p", scope: !155, file: !155, line: 721, type: !7391, scopeLine: 722, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!7391 = !DISubroutineType(types: !7392)
!7392 = !{!1088, !2483}
!7393 = !DILocalVariable(name: "i", arg: 1, scope: !7390, file: !155, line: 721, type: !2483)
!7394 = !DILocation(line: 721, column: 25, scope: !7390)
!7395 = !DILocation(line: 723, column: 13, scope: !7390)
!7396 = !DILocation(line: 723, column: 22, scope: !7390)
!7397 = !DILocation(line: 723, column: 19, scope: !7390)
!7398 = !DILocation(line: 723, column: 10, scope: !7390)
!7399 = !DILocation(line: 723, column: 3, scope: !7390)
!7400 = distinct !DISubprogram(name: "ei_edge", scope: !155, file: !155, line: 752, type: !3189, scopeLine: 753, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!7401 = !DILocalVariable(name: "i", arg: 1, scope: !7400, file: !155, line: 752, type: !2483)
!7402 = !DILocation(line: 752, column: 24, scope: !7400)
!7403 = !DILocation(line: 754, column: 10, scope: !7400)
!7404 = !DILocation(line: 754, column: 3, scope: !7400)
!7405 = distinct !DISubprogram(name: "ei_container", scope: !155, file: !155, line: 685, type: !7406, scopeLine: 686, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!7406 = !DISubroutineType(types: !7407)
!7407 = !{!1397, !2483}
!7408 = !DILocalVariable(name: "i", arg: 1, scope: !7405, file: !155, line: 685, type: !2483)
!7409 = !DILocation(line: 685, column: 29, scope: !7405)
!7410 = !DILocation(line: 687, column: 3, scope: !7405)
!7411 = !DILocation(line: 688, column: 13, scope: !7405)
!7412 = !DILocation(line: 688, column: 10, scope: !7405)
!7413 = !DILocation(line: 688, column: 3, scope: !7405)
!7414 = distinct !DISubprogram(name: "VEC_edge_base_unordered_remove", scope: !155, file: !155, line: 150, type: !7415, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!7415 = !DISubroutineType(types: !7416)
!7416 = !{!1409, !7417, !7}
!7417 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1402, size: 64)
!7418 = !DILocalVariable(name: "vec_", arg: 1, scope: !7414, file: !155, line: 150, type: !7417)
!7419 = !DILocation(line: 150, column: 1, scope: !7414)
!7420 = !DILocalVariable(name: "ix_", arg: 2, scope: !7414, file: !155, line: 150, type: !7)
!7421 = !DILocalVariable(name: "slot_", scope: !7414, file: !155, line: 150, type: !2260)
!7422 = !DILocalVariable(name: "obj_", scope: !7414, file: !155, line: 150, type: !1409)
!7423 = distinct !DISubprogram(name: "VEC_edge_gc_safe_push", scope: !155, file: !155, line: 151, type: !7424, scopeLine: 151, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!7424 = !DISubroutineType(types: !7425)
!7425 = !{!2260, !2488, !1409}
!7426 = !DILocalVariable(name: "vec_", arg: 1, scope: !7423, file: !155, line: 151, type: !2488)
!7427 = !DILocation(line: 151, column: 1, scope: !7423)
!7428 = !DILocalVariable(name: "obj_", arg: 2, scope: !7423, file: !155, line: 151, type: !1409)
!7429 = distinct !DISubprogram(name: "VEC_edge_gc_reserve", scope: !155, file: !155, line: 151, type: !7430, scopeLine: 151, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!7430 = !DISubroutineType(types: !7431)
!7431 = !{!804, !2488, !804}
!7432 = !DILocalVariable(name: "vec_", arg: 1, scope: !7429, file: !155, line: 151, type: !2488)
!7433 = !DILocation(line: 151, column: 1, scope: !7429)
!7434 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7429, file: !155, line: 151, type: !804)
!7435 = !DILocalVariable(name: "extend", scope: !7429, file: !155, line: 151, type: !804)
!7436 = !DILocation(line: 151, column: 1, scope: !7437)
!7437 = distinct !DILexicalBlock(scope: !7429, file: !155, line: 151, column: 1)
!7438 = distinct !DISubprogram(name: "VEC_edge_base_quick_push", scope: !155, file: !155, line: 150, type: !7439, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!7439 = !DISubroutineType(types: !7440)
!7440 = !{!2260, !7417, !1409}
!7441 = !DILocalVariable(name: "vec_", arg: 1, scope: !7438, file: !155, line: 150, type: !7417)
!7442 = !DILocation(line: 150, column: 1, scope: !7438)
!7443 = !DILocalVariable(name: "obj_", arg: 2, scope: !7438, file: !155, line: 150, type: !1409)
!7444 = !DILocalVariable(name: "slot_", scope: !7438, file: !155, line: 150, type: !2260)
!7445 = distinct !DISubprogram(name: "VEC_edge_base_space", scope: !155, file: !155, line: 150, type: !7446, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!7446 = !DISubroutineType(types: !7447)
!7447 = !{!804, !7417, !804}
!7448 = !DILocalVariable(name: "vec_", arg: 1, scope: !7445, file: !155, line: 150, type: !7417)
!7449 = !DILocation(line: 150, column: 1, scope: !7445)
!7450 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7445, file: !155, line: 150, type: !804)
!7451 = distinct !DISubprogram(name: "VEC_basic_block_base_length", scope: !155, file: !155, line: 281, type: !7452, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!7452 = !DISubroutineType(types: !7453)
!7453 = !{!7, !7454}
!7454 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7455, size: 64)
!7455 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1529)
!7456 = !DILocalVariable(name: "vec_", arg: 1, scope: !7451, file: !155, line: 281, type: !7454)
!7457 = !DILocation(line: 281, column: 1, scope: !7451)
!7458 = distinct !DISubprogram(name: "VEC_basic_block_gc_safe_grow_cleared", scope: !155, file: !155, line: 282, type: !7459, scopeLine: 282, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!7459 = !DISubroutineType(types: !7460)
!7460 = !{null, !7461, !804}
!7461 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1524, size: 64)
!7462 = !DILocalVariable(name: "vec_", arg: 1, scope: !7458, file: !155, line: 282, type: !7461)
!7463 = !DILocation(line: 282, column: 1, scope: !7458)
!7464 = !DILocalVariable(name: "size_", arg: 2, scope: !7458, file: !155, line: 282, type: !804)
!7465 = !DILocalVariable(name: "oldsize", scope: !7458, file: !155, line: 282, type: !804)
!7466 = distinct !DISubprogram(name: "VEC_basic_block_gc_safe_grow", scope: !155, file: !155, line: 282, type: !7459, scopeLine: 282, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!7467 = !DILocalVariable(name: "vec_", arg: 1, scope: !7466, file: !155, line: 282, type: !7461)
!7468 = !DILocation(line: 282, column: 1, scope: !7466)
!7469 = !DILocalVariable(name: "size_", arg: 2, scope: !7466, file: !155, line: 282, type: !804)
!7470 = !DILocation(line: 0, scope: !7466)
!7471 = distinct !DISubprogram(name: "VEC_basic_block_base_address", scope: !155, file: !155, line: 281, type: !7472, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!7472 = !DISubroutineType(types: !7473)
!7473 = !{!2135, !3071}
!7474 = !DILocalVariable(name: "vec_", arg: 1, scope: !7471, file: !155, line: 281, type: !3071)
!7475 = !DILocation(line: 281, column: 1, scope: !7471)
!7476 = distinct !DISubprogram(name: "VEC_basic_block_gc_reserve_exact", scope: !155, file: !155, line: 282, type: !7477, scopeLine: 282, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!7477 = !DISubroutineType(types: !7478)
!7478 = !{!804, !7461, !804}
!7479 = !DILocalVariable(name: "vec_", arg: 1, scope: !7476, file: !155, line: 282, type: !7461)
!7480 = !DILocation(line: 282, column: 1, scope: !7476)
!7481 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7476, file: !155, line: 282, type: !804)
!7482 = !DILocalVariable(name: "extend", scope: !7476, file: !155, line: 282, type: !804)
!7483 = !DILocation(line: 282, column: 1, scope: !7484)
!7484 = distinct !DILexicalBlock(scope: !7476, file: !155, line: 282, column: 1)
!7485 = distinct !DISubprogram(name: "VEC_basic_block_base_space", scope: !155, file: !155, line: 281, type: !7486, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!7486 = !DISubroutineType(types: !7487)
!7487 = !{!804, !3071, !804}
!7488 = !DILocalVariable(name: "vec_", arg: 1, scope: !7485, file: !155, line: 281, type: !3071)
!7489 = !DILocation(line: 281, column: 1, scope: !7485)
!7490 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7485, file: !155, line: 281, type: !804)
!7491 = distinct !DISubprogram(name: "redirect_branch_edge", scope: !3, file: !3, line: 1030, type: !2158, scopeLine: 1031, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!7492 = !DILocalVariable(name: "e", arg: 1, scope: !7491, file: !3, line: 1030, type: !1409)
!7493 = !DILocation(line: 1030, column: 28, scope: !7491)
!7494 = !DILocalVariable(name: "target", arg: 2, scope: !7491, file: !3, line: 1030, type: !1392)
!7495 = !DILocation(line: 1030, column: 43, scope: !7491)
!7496 = !DILocalVariable(name: "old_label", scope: !7491, file: !3, line: 1032, type: !889)
!7497 = !DILocation(line: 1032, column: 7, scope: !7491)
!7498 = !DILocation(line: 1032, column: 19, scope: !7491)
!7499 = !DILocalVariable(name: "src", scope: !7491, file: !3, line: 1033, type: !1392)
!7500 = !DILocation(line: 1033, column: 15, scope: !7491)
!7501 = !DILocation(line: 1033, column: 21, scope: !7491)
!7502 = !DILocation(line: 1033, column: 24, scope: !7491)
!7503 = !DILocalVariable(name: "insn", scope: !7491, file: !3, line: 1034, type: !889)
!7504 = !DILocation(line: 1034, column: 7, scope: !7491)
!7505 = !DILocation(line: 1034, column: 14, scope: !7491)
!7506 = !DILocation(line: 1037, column: 7, scope: !7507)
!7507 = distinct !DILexicalBlock(scope: !7491, file: !3, line: 1037, column: 7)
!7508 = !DILocation(line: 1037, column: 10, scope: !7507)
!7509 = !DILocation(line: 1037, column: 16, scope: !7507)
!7510 = !DILocation(line: 1037, column: 7, scope: !7491)
!7511 = !DILocation(line: 1038, column: 5, scope: !7507)
!7512 = !DILocation(line: 1039, column: 13, scope: !7513)
!7513 = distinct !DILexicalBlock(scope: !7507, file: !3, line: 1039, column: 12)
!7514 = !DILocation(line: 1039, column: 27, scope: !7513)
!7515 = !DILocation(line: 1039, column: 31, scope: !7513)
!7516 = !DILocation(line: 1039, column: 12, scope: !7507)
!7517 = !DILocation(line: 1040, column: 5, scope: !7513)
!7518 = !DILocation(line: 1042, column: 8, scope: !7519)
!7519 = distinct !DILexicalBlock(scope: !7491, file: !3, line: 1042, column: 7)
!7520 = !DILocation(line: 1042, column: 7, scope: !7491)
!7521 = !DILocation(line: 1044, column: 29, scope: !7522)
!7522 = distinct !DILexicalBlock(scope: !7523, file: !3, line: 1044, column: 11)
!7523 = distinct !DILexicalBlock(scope: !7519, file: !3, line: 1043, column: 5)
!7524 = !DILocation(line: 1044, column: 35, scope: !7522)
!7525 = !DILocation(line: 1044, column: 46, scope: !7522)
!7526 = !DILocation(line: 1044, column: 12, scope: !7522)
!7527 = !DILocation(line: 1044, column: 11, scope: !7523)
!7528 = !DILocation(line: 1045, column: 2, scope: !7522)
!7529 = !DILocation(line: 1046, column: 5, scope: !7523)
!7530 = !DILocation(line: 1051, column: 17, scope: !7531)
!7531 = distinct !DILexicalBlock(scope: !7519, file: !3, line: 1051, column: 5)
!7532 = !DILocation(line: 1051, column: 15, scope: !7531)
!7533 = !DILocation(line: 1051, column: 10, scope: !7531)
!7534 = !DILocation(line: 1051, column: 32, scope: !7535)
!7535 = distinct !DILexicalBlock(scope: !7531, file: !3, line: 1051, column: 5)
!7536 = !DILocation(line: 1051, column: 40, scope: !7535)
!7537 = !DILocation(line: 1051, column: 37, scope: !7535)
!7538 = !DILocation(line: 1051, column: 5, scope: !7531)
!7539 = !DILocation(line: 1053, column: 11, scope: !7540)
!7540 = distinct !DILexicalBlock(scope: !7535, file: !3, line: 1053, column: 11)
!7541 = !DILocation(line: 1053, column: 25, scope: !7540)
!7542 = !DILocation(line: 1053, column: 46, scope: !7540)
!7543 = !DILocation(line: 1053, column: 52, scope: !7540)
!7544 = !DILocation(line: 1053, column: 63, scope: !7540)
!7545 = !DILocation(line: 1053, column: 29, scope: !7540)
!7546 = !DILocation(line: 1053, column: 11, scope: !7535)
!7547 = !DILocation(line: 1054, column: 2, scope: !7540)
!7548 = !DILocation(line: 1053, column: 69, scope: !7540)
!7549 = !DILocation(line: 1052, column: 10, scope: !7535)
!7550 = !DILocation(line: 1052, column: 8, scope: !7535)
!7551 = !DILocation(line: 1051, column: 5, scope: !7535)
!7552 = distinct !{!7552, !7538, !7553}
!7553 = !DILocation(line: 1054, column: 9, scope: !7531)
!7554 = !DILocation(line: 1056, column: 7, scope: !7555)
!7555 = distinct !DILexicalBlock(scope: !7491, file: !3, line: 1056, column: 7)
!7556 = !DILocation(line: 1056, column: 7, scope: !7491)
!7557 = !DILocation(line: 1057, column: 14, scope: !7555)
!7558 = !DILocation(line: 1058, column: 7, scope: !7555)
!7559 = !DILocation(line: 1058, column: 10, scope: !7555)
!7560 = !DILocation(line: 1058, column: 15, scope: !7555)
!7561 = !DILocation(line: 1058, column: 22, scope: !7555)
!7562 = !DILocation(line: 1058, column: 25, scope: !7555)
!7563 = !DILocation(line: 1058, column: 31, scope: !7555)
!7564 = !DILocation(line: 1058, column: 38, scope: !7555)
!7565 = !DILocation(line: 1058, column: 46, scope: !7555)
!7566 = !DILocation(line: 1057, column: 5, scope: !7555)
!7567 = !DILocation(line: 1060, column: 7, scope: !7568)
!7568 = distinct !DILexicalBlock(scope: !7491, file: !3, line: 1060, column: 7)
!7569 = !DILocation(line: 1060, column: 10, scope: !7568)
!7570 = !DILocation(line: 1060, column: 18, scope: !7568)
!7571 = !DILocation(line: 1060, column: 15, scope: !7568)
!7572 = !DILocation(line: 1060, column: 7, scope: !7491)
!7573 = !DILocation(line: 1061, column: 35, scope: !7568)
!7574 = !DILocation(line: 1061, column: 38, scope: !7568)
!7575 = !DILocation(line: 1061, column: 9, scope: !7568)
!7576 = !DILocation(line: 1061, column: 7, scope: !7568)
!7577 = !DILocation(line: 1061, column: 5, scope: !7568)
!7578 = !DILocation(line: 1063, column: 10, scope: !7491)
!7579 = !DILocation(line: 1063, column: 3, scope: !7491)
!7580 = !DILocation(line: 1064, column: 1, scope: !7491)
!7581 = distinct !DISubprogram(name: "patch_jump_insn", scope: !3, file: !3, line: 921, type: !7582, scopeLine: 922, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!7582 = !DISubroutineType(types: !7583)
!7583 = !{!1088, !889, !889, !1392}
!7584 = !DILocalVariable(name: "insn", arg: 1, scope: !7581, file: !3, line: 921, type: !889)
!7585 = !DILocation(line: 921, column: 22, scope: !7581)
!7586 = !DILocalVariable(name: "old_label", arg: 2, scope: !7581, file: !3, line: 921, type: !889)
!7587 = !DILocation(line: 921, column: 32, scope: !7581)
!7588 = !DILocalVariable(name: "new_bb", arg: 3, scope: !7581, file: !3, line: 921, type: !1392)
!7589 = !DILocation(line: 921, column: 55, scope: !7581)
!7590 = !DILocalVariable(name: "tmp", scope: !7581, file: !3, line: 923, type: !889)
!7591 = !DILocation(line: 923, column: 7, scope: !7581)
!7592 = !DILocation(line: 925, column: 20, scope: !7593)
!7593 = distinct !DILexicalBlock(scope: !7581, file: !3, line: 925, column: 7)
!7594 = !DILocation(line: 925, column: 7, scope: !7593)
!7595 = !DILocation(line: 925, column: 7, scope: !7581)
!7596 = !DILocalVariable(name: "vec", scope: !7597, file: !3, line: 927, type: !892)
!7597 = distinct !DILexicalBlock(scope: !7593, file: !3, line: 926, column: 5)
!7598 = !DILocation(line: 927, column: 13, scope: !7597)
!7599 = !DILocalVariable(name: "j", scope: !7597, file: !3, line: 928, type: !804)
!7600 = !DILocation(line: 928, column: 11, scope: !7597)
!7601 = !DILocalVariable(name: "new_label", scope: !7597, file: !3, line: 929, type: !889)
!7602 = !DILocation(line: 929, column: 11, scope: !7597)
!7603 = !DILocation(line: 929, column: 36, scope: !7597)
!7604 = !DILocation(line: 929, column: 23, scope: !7597)
!7605 = !DILocation(line: 931, column: 11, scope: !7606)
!7606 = distinct !DILexicalBlock(scope: !7597, file: !3, line: 931, column: 11)
!7607 = !DILocation(line: 931, column: 21, scope: !7606)
!7608 = !DILocation(line: 931, column: 18, scope: !7606)
!7609 = !DILocation(line: 931, column: 11, scope: !7597)
!7610 = !DILocation(line: 932, column: 2, scope: !7606)
!7611 = !DILocation(line: 933, column: 11, scope: !7612)
!7612 = distinct !DILexicalBlock(scope: !7597, file: !3, line: 933, column: 11)
!7613 = !DILocation(line: 933, column: 36, scope: !7612)
!7614 = !DILocation(line: 933, column: 11, scope: !7597)
!7615 = !DILocation(line: 934, column: 8, scope: !7612)
!7616 = !DILocation(line: 934, column: 6, scope: !7612)
!7617 = !DILocation(line: 934, column: 2, scope: !7612)
!7618 = !DILocation(line: 936, column: 8, scope: !7612)
!7619 = !DILocation(line: 936, column: 6, scope: !7612)
!7620 = !DILocation(line: 938, column: 16, scope: !7621)
!7621 = distinct !DILexicalBlock(scope: !7597, file: !3, line: 938, column: 7)
!7622 = !DILocation(line: 938, column: 35, scope: !7621)
!7623 = !DILocation(line: 938, column: 14, scope: !7621)
!7624 = !DILocation(line: 938, column: 12, scope: !7621)
!7625 = !DILocation(line: 938, column: 40, scope: !7626)
!7626 = distinct !DILexicalBlock(scope: !7621, file: !3, line: 938, column: 7)
!7627 = !DILocation(line: 938, column: 42, scope: !7626)
!7628 = !DILocation(line: 938, column: 7, scope: !7621)
!7629 = !DILocation(line: 939, column: 6, scope: !7630)
!7630 = distinct !DILexicalBlock(scope: !7626, file: !3, line: 939, column: 6)
!7631 = !DILocation(line: 939, column: 38, scope: !7630)
!7632 = !DILocation(line: 939, column: 35, scope: !7630)
!7633 = !DILocation(line: 939, column: 6, scope: !7626)
!7634 = !DILocation(line: 941, column: 27, scope: !7635)
!7635 = distinct !DILexicalBlock(scope: !7630, file: !3, line: 940, column: 4)
!7636 = !DILocation(line: 941, column: 6, scope: !7635)
!7637 = !DILocation(line: 941, column: 25, scope: !7635)
!7638 = !DILocation(line: 942, column: 8, scope: !7635)
!7639 = !DILocation(line: 942, column: 6, scope: !7635)
!7640 = !DILocation(line: 943, column: 8, scope: !7635)
!7641 = !DILocation(line: 943, column: 6, scope: !7635)
!7642 = !DILocation(line: 944, column: 4, scope: !7635)
!7643 = !DILocation(line: 938, column: 48, scope: !7626)
!7644 = !DILocation(line: 938, column: 7, scope: !7626)
!7645 = distinct !{!7645, !7628, !7646}
!7646 = !DILocation(line: 944, column: 4, scope: !7621)
!7647 = !DILocation(line: 947, column: 18, scope: !7648)
!7648 = distinct !DILexicalBlock(scope: !7597, file: !3, line: 947, column: 11)
!7649 = !DILocation(line: 947, column: 16, scope: !7648)
!7650 = !DILocation(line: 947, column: 37, scope: !7648)
!7651 = !DILocation(line: 948, column: 4, scope: !7648)
!7652 = !DILocation(line: 948, column: 7, scope: !7648)
!7653 = !DILocation(line: 948, column: 25, scope: !7648)
!7654 = !DILocation(line: 948, column: 22, scope: !7648)
!7655 = !DILocation(line: 949, column: 4, scope: !7648)
!7656 = !DILocation(line: 949, column: 7, scope: !7648)
!7657 = !DILocation(line: 949, column: 32, scope: !7648)
!7658 = !DILocation(line: 950, column: 4, scope: !7648)
!7659 = !DILocation(line: 950, column: 7, scope: !7648)
!7660 = !DILocation(line: 950, column: 42, scope: !7648)
!7661 = !DILocation(line: 951, column: 4, scope: !7648)
!7662 = !DILocation(line: 951, column: 7, scope: !7648)
!7663 = !DILocation(line: 951, column: 44, scope: !7648)
!7664 = !DILocation(line: 951, column: 41, scope: !7648)
!7665 = !DILocation(line: 947, column: 11, scope: !7597)
!7666 = !DILocation(line: 953, column: 30, scope: !7667)
!7667 = distinct !DILexicalBlock(scope: !7648, file: !3, line: 952, column: 2)
!7668 = !DILocation(line: 953, column: 4, scope: !7667)
!7669 = !DILocation(line: 953, column: 28, scope: !7667)
!7670 = !DILocation(line: 955, column: 6, scope: !7667)
!7671 = !DILocation(line: 955, column: 4, scope: !7667)
!7672 = !DILocation(line: 956, column: 6, scope: !7667)
!7673 = !DILocation(line: 956, column: 4, scope: !7667)
!7674 = !DILocation(line: 957, column: 2, scope: !7667)
!7675 = !DILocation(line: 958, column: 5, scope: !7597)
!7676 = !DILocation(line: 959, column: 41, scope: !7677)
!7677 = distinct !DILexicalBlock(scope: !7593, file: !3, line: 959, column: 12)
!7678 = !DILocation(line: 959, column: 19, scope: !7677)
!7679 = !DILocation(line: 959, column: 17, scope: !7677)
!7680 = !DILocation(line: 959, column: 58, scope: !7677)
!7681 = !DILocation(line: 959, column: 12, scope: !7593)
!7682 = !DILocalVariable(name: "i", scope: !7683, file: !3, line: 961, type: !804)
!7683 = distinct !DILexicalBlock(scope: !7677, file: !3, line: 960, column: 5)
!7684 = !DILocation(line: 961, column: 11, scope: !7683)
!7685 = !DILocalVariable(name: "n", scope: !7683, file: !3, line: 961, type: !804)
!7686 = !DILocation(line: 961, column: 14, scope: !7683)
!7687 = !DILocation(line: 961, column: 18, scope: !7683)
!7688 = !DILocalVariable(name: "new_label", scope: !7683, file: !3, line: 962, type: !889)
!7689 = !DILocation(line: 962, column: 11, scope: !7683)
!7690 = !DILocalVariable(name: "note", scope: !7683, file: !3, line: 962, type: !889)
!7691 = !DILocation(line: 962, column: 22, scope: !7683)
!7692 = !DILocation(line: 964, column: 11, scope: !7693)
!7693 = distinct !DILexicalBlock(scope: !7683, file: !3, line: 964, column: 11)
!7694 = !DILocation(line: 964, column: 21, scope: !7693)
!7695 = !DILocation(line: 964, column: 18, scope: !7693)
!7696 = !DILocation(line: 964, column: 11, scope: !7683)
!7697 = !DILocation(line: 965, column: 2, scope: !7693)
!7698 = !DILocation(line: 966, column: 32, scope: !7683)
!7699 = !DILocation(line: 966, column: 19, scope: !7683)
!7700 = !DILocation(line: 966, column: 17, scope: !7683)
!7701 = !DILocation(line: 968, column: 14, scope: !7702)
!7702 = distinct !DILexicalBlock(scope: !7683, file: !3, line: 968, column: 7)
!7703 = !DILocation(line: 968, column: 12, scope: !7702)
!7704 = !DILocation(line: 968, column: 19, scope: !7705)
!7705 = distinct !DILexicalBlock(scope: !7702, file: !3, line: 968, column: 7)
!7706 = !DILocation(line: 968, column: 23, scope: !7705)
!7707 = !DILocation(line: 968, column: 21, scope: !7705)
!7708 = !DILocation(line: 968, column: 7, scope: !7702)
!7709 = !DILocalVariable(name: "old_ref", scope: !7710, file: !3, line: 970, type: !889)
!7710 = distinct !DILexicalBlock(scope: !7705, file: !3, line: 969, column: 2)
!7711 = !DILocation(line: 970, column: 8, scope: !7710)
!7712 = !DILocation(line: 970, column: 18, scope: !7710)
!7713 = !DILocation(line: 971, column: 4, scope: !7710)
!7714 = !DILocation(line: 972, column: 8, scope: !7715)
!7715 = distinct !DILexicalBlock(scope: !7710, file: !3, line: 972, column: 8)
!7716 = !DILocation(line: 972, column: 29, scope: !7715)
!7717 = !DILocation(line: 972, column: 26, scope: !7715)
!7718 = !DILocation(line: 972, column: 8, scope: !7710)
!7719 = !DILocation(line: 975, column: 5, scope: !7720)
!7720 = distinct !DILexicalBlock(scope: !7715, file: !3, line: 973, column: 6)
!7721 = !DILocation(line: 974, column: 8, scope: !7720)
!7722 = !DILocation(line: 975, column: 3, scope: !7720)
!7723 = !DILocation(line: 976, column: 10, scope: !7720)
!7724 = !DILocation(line: 976, column: 8, scope: !7720)
!7725 = !DILocation(line: 977, column: 10, scope: !7720)
!7726 = !DILocation(line: 977, column: 8, scope: !7720)
!7727 = !DILocation(line: 978, column: 6, scope: !7720)
!7728 = !DILocation(line: 979, column: 2, scope: !7710)
!7729 = !DILocation(line: 968, column: 26, scope: !7705)
!7730 = !DILocation(line: 968, column: 7, scope: !7705)
!7731 = distinct !{!7731, !7708, !7732}
!7732 = !DILocation(line: 979, column: 2, scope: !7702)
!7733 = !DILocation(line: 981, column: 11, scope: !7734)
!7734 = distinct !DILexicalBlock(scope: !7683, file: !3, line: 981, column: 11)
!7735 = !DILocation(line: 981, column: 32, scope: !7734)
!7736 = !DILocation(line: 981, column: 29, scope: !7734)
!7737 = !DILocation(line: 981, column: 11, scope: !7683)
!7738 = !DILocation(line: 983, column: 24, scope: !7739)
!7739 = distinct !DILexicalBlock(scope: !7734, file: !3, line: 982, column: 2)
!7740 = !DILocation(line: 983, column: 4, scope: !7739)
!7741 = !DILocation(line: 983, column: 22, scope: !7739)
!7742 = !DILocation(line: 984, column: 26, scope: !7739)
!7743 = !DILocation(line: 984, column: 50, scope: !7739)
!7744 = !DILocation(line: 984, column: 11, scope: !7739)
!7745 = !DILocation(line: 984, column: 9, scope: !7739)
!7746 = !DILocation(line: 985, column: 8, scope: !7747)
!7747 = distinct !DILexicalBlock(scope: !7739, file: !3, line: 985, column: 8)
!7748 = !DILocation(line: 985, column: 8, scope: !7739)
!7749 = !DILocation(line: 986, column: 19, scope: !7747)
!7750 = !DILocation(line: 986, column: 25, scope: !7747)
!7751 = !DILocation(line: 986, column: 6, scope: !7747)
!7752 = !DILocation(line: 987, column: 2, scope: !7739)
!7753 = !DILocation(line: 990, column: 26, scope: !7754)
!7754 = distinct !DILexicalBlock(scope: !7734, file: !3, line: 989, column: 2)
!7755 = !DILocation(line: 990, column: 50, scope: !7754)
!7756 = !DILocation(line: 990, column: 11, scope: !7754)
!7757 = !DILocation(line: 990, column: 9, scope: !7754)
!7758 = !DILocation(line: 991, column: 8, scope: !7759)
!7759 = distinct !DILexicalBlock(scope: !7754, file: !3, line: 991, column: 8)
!7760 = !DILocation(line: 991, column: 8, scope: !7754)
!7761 = !DILocation(line: 992, column: 19, scope: !7759)
!7762 = !DILocation(line: 992, column: 25, scope: !7759)
!7763 = !DILocation(line: 992, column: 6, scope: !7759)
!7764 = !DILocation(line: 993, column: 8, scope: !7765)
!7765 = distinct !DILexicalBlock(scope: !7754, file: !3, line: 993, column: 8)
!7766 = !DILocation(line: 993, column: 29, scope: !7765)
!7767 = !DILocation(line: 993, column: 26, scope: !7765)
!7768 = !DILocation(line: 994, column: 8, scope: !7765)
!7769 = !DILocation(line: 994, column: 27, scope: !7765)
!7770 = !DILocation(line: 994, column: 51, scope: !7765)
!7771 = !DILocation(line: 994, column: 12, scope: !7765)
!7772 = !DILocation(line: 993, column: 8, scope: !7754)
!7773 = !DILocation(line: 995, column: 20, scope: !7765)
!7774 = !DILocation(line: 995, column: 44, scope: !7765)
!7775 = !DILocation(line: 995, column: 6, scope: !7765)
!7776 = !DILocation(line: 997, column: 5, scope: !7683)
!7777 = !DILocation(line: 1003, column: 28, scope: !7778)
!7778 = distinct !DILexicalBlock(scope: !7779, file: !3, line: 1003, column: 11)
!7779 = distinct !DILexicalBlock(scope: !7677, file: !3, line: 999, column: 5)
!7780 = !DILocation(line: 1003, column: 11, scope: !7778)
!7781 = !DILocation(line: 1005, column: 4, scope: !7778)
!7782 = !DILocation(line: 1005, column: 21, scope: !7778)
!7783 = !DILocation(line: 1005, column: 7, scope: !7778)
!7784 = !DILocation(line: 1003, column: 11, scope: !7779)
!7785 = !DILocation(line: 1006, column: 2, scope: !7778)
!7786 = !DILocation(line: 1008, column: 12, scope: !7787)
!7787 = distinct !DILexicalBlock(scope: !7779, file: !3, line: 1008, column: 11)
!7788 = !DILocation(line: 1008, column: 39, scope: !7787)
!7789 = !DILocation(line: 1008, column: 42, scope: !7787)
!7790 = !DILocation(line: 1008, column: 63, scope: !7787)
!7791 = !DILocation(line: 1008, column: 60, scope: !7787)
!7792 = !DILocation(line: 1008, column: 11, scope: !7779)
!7793 = !DILocation(line: 1011, column: 4, scope: !7794)
!7794 = distinct !DILexicalBlock(scope: !7787, file: !3, line: 1009, column: 2)
!7795 = !DILocation(line: 1016, column: 24, scope: !7796)
!7796 = distinct !DILexicalBlock(scope: !7794, file: !3, line: 1016, column: 8)
!7797 = !DILocation(line: 1016, column: 43, scope: !7796)
!7798 = !DILocation(line: 1016, column: 30, scope: !7796)
!7799 = !DILocation(line: 1016, column: 9, scope: !7796)
!7800 = !DILocation(line: 1016, column: 8, scope: !7794)
!7801 = !DILocation(line: 1018, column: 8, scope: !7802)
!7802 = distinct !DILexicalBlock(scope: !7796, file: !3, line: 1017, column: 6)
!7803 = !DILocation(line: 1019, column: 8, scope: !7802)
!7804 = !DILocation(line: 1021, column: 2, scope: !7794)
!7805 = !DILocation(line: 1023, column: 3, scope: !7581)
!7806 = !DILocation(line: 1024, column: 1, scope: !7581)
!7807 = distinct !DISubprogram(name: "first_insn_after_basic_block_note", scope: !3, file: !3, line: 502, type: !3333, scopeLine: 503, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!7808 = !DILocalVariable(name: "block", arg: 1, scope: !7807, file: !3, line: 502, type: !1392)
!7809 = !DILocation(line: 502, column: 48, scope: !7807)
!7810 = !DILocalVariable(name: "insn", scope: !7807, file: !3, line: 504, type: !889)
!7811 = !DILocation(line: 504, column: 7, scope: !7807)
!7812 = !DILocation(line: 507, column: 10, scope: !7807)
!7813 = !DILocation(line: 507, column: 8, scope: !7807)
!7814 = !DILocation(line: 509, column: 7, scope: !7815)
!7815 = distinct !DILexicalBlock(scope: !7807, file: !3, line: 509, column: 7)
!7816 = !DILocation(line: 509, column: 12, scope: !7815)
!7817 = !DILocation(line: 509, column: 7, scope: !7807)
!7818 = !DILocation(line: 510, column: 5, scope: !7815)
!7819 = !DILocation(line: 511, column: 7, scope: !7820)
!7820 = distinct !DILexicalBlock(scope: !7807, file: !3, line: 511, column: 7)
!7821 = !DILocation(line: 511, column: 7, scope: !7807)
!7822 = !DILocation(line: 512, column: 12, scope: !7820)
!7823 = !DILocation(line: 512, column: 10, scope: !7820)
!7824 = !DILocation(line: 512, column: 5, scope: !7820)
!7825 = !DILocation(line: 513, column: 3, scope: !7807)
!7826 = !DILocation(line: 515, column: 10, scope: !7807)
!7827 = !DILocation(line: 515, column: 3, scope: !7807)
!7828 = !DILocation(line: 516, column: 1, scope: !7807)
!7829 = distinct !DISubprogram(name: "single_succ", scope: !155, file: !155, line: 663, type: !7830, scopeLine: 664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!7830 = !DISubroutineType(types: !7831)
!7831 = !{!1392, !2196}
!7832 = !DILocalVariable(name: "bb", arg: 1, scope: !7829, file: !155, line: 663, type: !2196)
!7833 = !DILocation(line: 663, column: 32, scope: !7829)
!7834 = !DILocation(line: 665, column: 28, scope: !7829)
!7835 = !DILocation(line: 665, column: 10, scope: !7829)
!7836 = !DILocation(line: 665, column: 33, scope: !7829)
!7837 = !DILocation(line: 665, column: 3, scope: !7829)
!7838 = distinct !DISubprogram(name: "need_fake_edge_p", scope: !3, file: !3, line: 2857, type: !7839, scopeLine: 2858, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!7839 = !DISubroutineType(types: !7840)
!7840 = !{!1088, !860}
!7841 = !DILocalVariable(name: "insn", arg: 1, scope: !7838, file: !3, line: 2857, type: !860)
!7842 = !DILocation(line: 2857, column: 29, scope: !7838)
!7843 = !DILocation(line: 2859, column: 8, scope: !7844)
!7844 = distinct !DILexicalBlock(scope: !7838, file: !3, line: 2859, column: 7)
!7845 = !DILocation(line: 2859, column: 7, scope: !7838)
!7846 = !DILocation(line: 2860, column: 5, scope: !7844)
!7847 = !DILocation(line: 2862, column: 8, scope: !7848)
!7848 = distinct !DILexicalBlock(scope: !7838, file: !3, line: 2862, column: 7)
!7849 = !DILocation(line: 2863, column: 8, scope: !7848)
!7850 = !DILocation(line: 2863, column: 12, scope: !7848)
!7851 = !DILocation(line: 2864, column: 8, scope: !7848)
!7852 = !DILocation(line: 2864, column: 27, scope: !7848)
!7853 = !DILocation(line: 2864, column: 12, scope: !7848)
!7854 = !DILocation(line: 2865, column: 8, scope: !7848)
!7855 = !DILocation(line: 2865, column: 13, scope: !7848)
!7856 = !DILocation(line: 2862, column: 7, scope: !7838)
!7857 = !DILocation(line: 2866, column: 5, scope: !7848)
!7858 = !DILocation(line: 2868, column: 12, scope: !7838)
!7859 = !DILocation(line: 2868, column: 38, scope: !7838)
!7860 = !DILocation(line: 2869, column: 5, scope: !7838)
!7861 = !DILocation(line: 2869, column: 8, scope: !7838)
!7862 = !DILocation(line: 2870, column: 4, scope: !7838)
!7863 = !DILocation(line: 2870, column: 8, scope: !7838)
!7864 = !DILocation(line: 2870, column: 34, scope: !7838)
!7865 = !DILocation(line: 2871, column: 8, scope: !7838)
!7866 = !DILocation(line: 2871, column: 26, scope: !7838)
!7867 = !DILocation(line: 2871, column: 11, scope: !7838)
!7868 = !DILocation(line: 2871, column: 32, scope: !7838)
!7869 = !DILocation(line: 2872, column: 8, scope: !7838)
!7870 = !DILocation(line: 2872, column: 11, scope: !7838)
!7871 = !DILocation(line: 2873, column: 4, scope: !7838)
!7872 = !DILocation(line: 2873, column: 7, scope: !7838)
!7873 = !DILocation(line: 2873, column: 33, scope: !7838)
!7874 = !DILocation(line: 2868, column: 10, scope: !7838)
!7875 = !DILocation(line: 2868, column: 3, scope: !7838)
!7876 = !DILocation(line: 2874, column: 1, scope: !7838)
!7877 = distinct !DISubprogram(name: "VEC_basic_block_base_index", scope: !155, file: !155, line: 281, type: !7878, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2083)
!7878 = !DISubroutineType(types: !7879)
!7879 = !{!1392, !7454, !7}
!7880 = !DILocalVariable(name: "vec_", arg: 1, scope: !7877, file: !155, line: 281, type: !7454)
!7881 = !DILocation(line: 281, column: 1, scope: !7877)
!7882 = !DILocalVariable(name: "ix_", arg: 2, scope: !7877, file: !155, line: 281, type: !7)
!7883 = !DILocation(line: 0, scope: !7877)
